["```js\ndisplays the AppointmentFormLoader after the CustomerForm is submitted\n```", "```js\nnavigates to /addAppointment after the CustomerForm is submitted\nrenders AppointmentFormRoute at /addAppointment\n```", "```js\n    ?searchTerm=An&limit=20&previousRowIds=123,456\n    ```", "```js\nimport React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { App } from \"./App\";\nReactDOM.createRoot(\n  document.getElementById(\"root\")\n).render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n);\n```", "```js\nimport { createMemoryHistory } from \"history\";\nimport {\n  unstable_HistoryRouter as HistoryRouter\n} from \"react-router-dom\";\nexport let history;\nexport const renderWithRouter = (\n  component,\n  { location } = { location: \"\" }\n) => {\n  history = createMemoryHistory({\n    initialEntries: [location]\n  });\n  act(() =>\n    reactRoot.render(\n      <HistoryRouter history={history}>\n        {component}\n      </HistoryRouter>\n    )\n  );\n};\n```", "```js\nconst [view, setView] = useState(\"dayView\");\n...\nswitch (view) {\n  case \"addCustomer\":\n    return (\n      <CustomerForm ... />\n    );\n  case \"searchCustomers\":\n    return (\n      <CustomerSearch ... />\n    );\n  case \"addAppointment\":\n    return (\n      <AppointmentFormLoader ... />\n    );\n  default:\n    return ...\n}\n```", "```js\n<Routes>\n  <Route\n    path=\"/addCustomer\"\n    element={<CustomerForm ... />}\n  />\n  <Route\n    path=\"/addAppointment\"\n    element={<AppointmentFormRoute ... />}\n  />\n  <Route\n    path=\"/searchCustomers\"\n    element={<CustomerSearchRoute ... />}\n  />\n  <Route path=\"/\" element={<MainScreen />} />\n</Routes>\n```", "```js\nit(\"initially shows the AppointmentDayViewLoader\", () => {\n  renderWithRouter(<App />);\n  expect(AppointmentsDayViewLoader).toBeRendered();\n});\nit(\"has a menu bar\", () => {\n  renderWithRouter(<App />);\n  expect(element(\"menu\")).not.toBeNull();\n});\n```", "```js\nit(\"renders CustomerForm at the /addCustomer endpoint\", () => {\n  renderWithRouter(<App />, {\n    location: \"/addCustomer\"\n  });\n  expect(CustomerForm).toBeRendered();\n});\nit(\"renders AppointmentFormRoute at /addAppointment\", () => {\n  renderWithRouter(<App />, {\n    location: \"/addAppointment?customer=123\",\n  });\n  expect(AppointmentFormRoute).toBeRendered();\n});\nit(\"renders CustomerSearchRoute at /searchCustomers\", () => {\n  renderWithRouter(<App />, {\n    location: \"/searchCustomers\"\n  });\n  expect(CustomerSearchRoute).toBeRendered();\n});\n```", "```js\nimport React from \"react\";\nimport { useSearchParams } from \"react-router-dom\";\nimport {\n  AppointmentFormLoader\n} from \"./AppointmentFormLoader\";\nconst blankAppointment = {\n  service: \"\",\n  stylist: \"\",\n  startsAt: null,\n};\nexport const AppointmentFormRoute = (props) => {\n  const [params, _] = useSearchParams();\n  return (\n    <AppointmentFormLoader\n      {...props}\n      original={{\n        ...blankAppointment,\n        customer: params.get(\"customer\"),\n      }}\n    />\n  );\n};\n```", "```js\nit(\"adds the customer id into the original appointment object\", () => {\n  renderWithRouter(<AppointmentFormRoute />, {\n    location: \"?customer=123\",\n  });\n  expect(AppointmentFormLoader).toBeRenderedWithProps({\n    original: expect.objectContaining({\n      customer: \"123\",\n    }),\n  });\n});\n```", "```js\nit(\"passes all other props through to AppointmentForm\", () => {\n  const props = { a: \"123\", b: \"456\" };\n  renderWithRouter(<AppointmentFormRoute {...props} />);\n  expect(AppointmentFormLoader).toBeRenderedWithProps(\n    expect.objectContaining({\n      a: \"123\",\n      b: \"456\",\n    })\n  );\n});\n```", "```js\n<Route\n  path=\"/addAppointment\"\n  element={\n    <AppointmentFormRoute onSave={transitionToDayView} />\n  }\n/>\n```", "```js\nconst convertParams = () => {\n  const [params] = useSearchParams();\n  const obj = {};\n  if (params.has(\"searchTerm\")) {\n    obj.searchTerm = params.get(\"searchTerm\");\n  }\n  if (params.has(\"limit\")) {\n    obj.limit = parseInt(params.get(\"limit\"), 10);\n  }\n  if (params.has(\"lastRowIds\")) {\n    obj.lastRowIds = params\n      .get(\"lastRowIds\")\n      .split(\",\")\n      .filter((id) => id !== \"\");\n  }\n  return obj;\n};\n```", "```js\nimport React from \"react\";\nimport {\n  useNavigate,\n  useSearchParams,\n} from \"react-router-dom\";\nimport {\n  CustomerSearch\n} from \"./CustomerSearch/CustomerSearch\";\nconst convertParams = ...; // as above\nexport const CustomerSearchRoute = (props) => (\n  <CustomerSearch\n    {...props}\n    navigate={useNavigate()}\n    {...convertParams()}\n  />\n);\n```", "```js\nit(\"parses lastRowIds from query string\", () => {\n  const location =\n    \"?lastRowIds=\" + encodeURIComponent(\"1,2,3\");\n  renderWithRouter(<CustomerSearchRoute />, { location });\n  expect(CustomerSearch).toBeRenderedWithProps(\n    expect.objectContaining({\n      lastRowIds: [\"1\", \"2\", \"3\"],\n    })\n  );\n});\n```", "```js\n<Link to=\"/addCustomer\" role=\"button\">\n  Add customer and appointment\n</Link>\n```", "```js\n<Link\n    to={{\n      search: objectToQueryString(queryParams),\n    }}\n>\n  {children}\n</Link>\n```", "```js\nexport const MainScreen = () => (\n  <>\n    <menu>\n      <li>\n        <Link to=\"/addCustomer\" role=\"button\">\n          Add customer and appointment\n        </Link>\n      </li>\n      <li>\n        <Link to=\"/searchCustomers\" role=\"button\">\n          Search customers\n        </Link>\n      </li>\n    </menu>\n    <AppointmentsDayViewLoader />\n  </>\n);\n```", "```js\nexport const linkFor = (href) =>\n  elements(\"a\").find(\n    (el) => el.getAttribute(\"href\") === href\n  );\n```", "```js\nit(\"renders a link to the /addCustomer route\", async () => {\n  renderWithRouter(<App />);\n  expect(linkFor(\"/addCustomer\")).toBeDefined();\n});\nit(\"captions the /addCustomer link as 'Add customer and appointment'\", async () => {\n  renderWithRouter(<App />);\n  expect(linkFor(\"/addCustomer\")).toContainText(\n    \"Add customer and appointment\"\n  );\n});\n```", "```js\nit(\"displays the CustomerSearch when link is clicked\", async () => {\n  renderWithRouter(<App />);\n  click(linkFor(\"/searchCustomers\"));\n  expect(CustomerSearchRoute).toBeRendered();\n});\n```", "```js\nimport React from \"react\";\nimport {\n  objectToQueryString\n} from \"../objectToQueryString\";\nimport { Link } from \"react-router-dom\";\nexport const RouterButton = ({\n  queryParams,\n  children,\n  disabled,\n}) => (\n  <Link\n    className={disabled ? \"disabled\" : \"\"}\n    role=\"button\"\n    to={{\n      search: objectToQueryString(queryParams),\n    }}\n  >\n    {children}\n  </Link>\n);\n```", "```js\nimport { Link } from \"react-router-dom\";\nimport {\n  RouterButton\n} from \"../../src/CustomerSearch/RouterButton\";\njest.mock(\"react-router-dom\", () => ({\n  Link: jest.fn(({ children }) => (\n    <div id=\"Link\">{children}</div>\n  )),\n}));\n```", "```js\nit(\"renders a Link\", () => {\n  render(<RouterButton queryParams={queryParams} />);\n  expect(Link).toBeRenderedWithProps({\n    className: \"\",\n    role: \"button\",\n    to: {\n      search: \"?a=123&b=234\",\n    },\n  });\n});\n```", "```js\n<menu>\n  ...\n  <li>\n    <RouterButton\n      id=\"previous-page\"\n      queryParams={previousPageParams()}\n      disabled={!hasPrevious}\n    >\n      Previous\n    </RouterButton>\n  </li>\n  <li>\n    <RouterButton\n      id=\"next-page\"\n      queryParams={nextPageParams()}\n      disabled={!hasNext}\n    >\n      Next\n    </RouterButton>\n  </li>\n</menu>\n```", "```js\njest.mock(\"../../src/CustomerSearch/RouterButton\", () => ({\n  RouterButton: jest.fn(({ id, children }) => (\n    <div id={id}>{children}</div>\n  )),\n}));\n```", "```js\nexport const propsMatching = (mockComponent, matching) => {\n  const [k, v] = Object.entries(matching)[0];\n  const call = mockComponent.mock.calls.find(\n    ([props]) => props[k] === v\n  );\n  return call?.[0];\n};\n```", "```js\nconst previousPageButtonProps = () =>\n  propsMatching(RouterButton, { id: \"previous-page\" });\nit(\"renders\", () => {\n  render(<SearchButtons {...testProps} />);\n  expect(previousPageButtonProps()).toMatchObject({\n    disabled: false,\n  });\n  expect(element(\"#previous-page\")).toContainText(\n    \"Previous\"\n  );\n});\n```", "```js\n<Route\n  path=\"/addCustomer\"\n  element={\n    <CustomerForm\n      original={blankCustomer}\n      onSave={transitionToAddAppointment}\n    />\n  }\n/>\n```", "```js\nimport {\n  ...,\n  useNavigate,\n} from \"react-router-dom\";\nexport const App = () => {\n  const navigate = useNavigate();\n  const transitionToAddAppointment = (customer) =>\n    navigate(`/addAppointment?customer=${customer.id}`);\n  ...\n};\n```", "```js\nimport {\n  ...,\n  history,\n} from \"./reactTestExtensions\";\n...\nit(\"navigates to /addAppointment after the CustomerForm is submitted\", () => {\n  renderWithRouter(<App />);\n  click(linkFor(\"/addCustomer\"));\n  const onSave = propsOf(CustomerForm).onSave;\n  act(() => onSave(customer));\n  expect(history.location.pathname).toEqual(\n    \"/addAppointment\"\n  );\n});\n```", "```js\nexpect(\n  window.location.pathname\n).toEqual(\"/addAppointment\");\n```"]