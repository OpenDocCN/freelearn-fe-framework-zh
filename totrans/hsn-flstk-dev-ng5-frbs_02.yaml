- en: Creating a Signup Component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will start our journey in application development. We will
    build a signup page. During the process, we will also explore different features
    of Firebase. We will take a look at how to enable Firebase authentication in the
    console, which is required to interact with the authentication feature module.
    Firebase supports many authentication mechanisms but, in this project, we will
    enable Email/Password authentication. Then, we will go ahead and build a signup
    form template. We will add a functionality in the signup component. In this process,
    we will also handle error scenarios. This will make our application more robust
    and less error-prone.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Enabling authentication in Firebase
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to AngularFire2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an authentication module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining a domain model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a signup template
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Error handling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a customized alert dialog
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a signup component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling authentication in Firebase
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first step in our application development is to enable authentication in
    our Firebase portal. We have already created our Firebase project in the preceding
    chapter. Perform the following steps to enable Firebase authentication:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your friends project in the Firebase console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Expand DEVELOP on left panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Authentication.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the SIGN-IN METHOD tab on the right panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Email/Password item and enable it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The enabled Email/Password authentication in Firebase will look as the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00009.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This is all we need to do to enable the Email/Password mode of authentication.
    Firebase also supports other modes of authentication. In this book, we will implement
    Email/Password authentication only. You can work with other authentications as
    an exercise.
  prefs: []
  type: TYPE_NORMAL
- en: 'Different modes of authentications are required to target different sets of
    users. It''s good to understand other authentication modes. Other supported modes
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Phone**: This is a simple form of authentication and doesn''t require much
    information from the user. Just the user''s mobile number is enough to authenticate
    the user. This mode has become popular in mobile applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Google**: It is good to enable Google authentication, as most of the targeted
    users have a Google account. In this mode, authentication happens via Google credentials.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Facebook**: This is similar to Google authentication. The only difference
    is that authentication happens via Facebook credentials instead of Google credentials.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Twitter**: This is similar to the preceding authentication, but the authentication
    happens via your Twitter account.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GitHub**: This is quite helpful for the developer community. They have a
    GitHub account, and you don''t need to give any personal account information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Anonymous**: This authentication is useful for an application where its user
    doesn''t want to sign up. This is mainly used on an e-commerce application, where
    the user can browse the products using this authentication.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In all the preceding authentications, Firebase generates a unique ID called
    a user UID and the user is registered in a Firebase authentication with a UID,
    identifier, and so on. The same UID is also used to register the user in Firebase
    database with more information, such as email, UID, name, and number.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to angularfire2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`angularfire2` is the official library for Angular and Firebase. We will use
    this library in our application. This library provides the following features:'
  prefs: []
  type: TYPE_NORMAL
- en: It uses the power of RxJS, Angular, and Firebase
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It provides APIs to interact with a Firebase database and authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It synchronizes data in real time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It provides APIs to interact with `AngularFirestore`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more details, refer [https://github.com/angular/angularfire2](https://github.com/angular/angularfire2).
  prefs: []
  type: TYPE_NORMAL
- en: Creating the authentication module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will create our first module using the Angular CLI command.
    Perform the following steps to create the authentication module:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to the `src` folder of your project and execute the module CLI command,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The preceding command creates the file skeleton of `authentication.module.ts`
    and `authentication.routing.ts`. You can follow the Angular CLI command to create
    other components.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add an authentication module in the app module and also configure Angular-
    and Firebase-related components, as follows; take a look at the `app.module.ts`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the placeholder in the app component template, as shown in the following `app.component.html` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Creating services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Services in an Angular application contain core business logic. As a part of
    the signup component, we created two services:'
  prefs: []
  type: TYPE_NORMAL
- en: Authentication service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authentication service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We introduced authentication service in the preceding chapter, so we will add
    more methods in an authentication service. Remember the following steps while
    creating angular services.
  prefs: []
  type: TYPE_NORMAL
- en: '**Writing the services**: AngularFire2 has an `AngularFireAuth` class. This
    class gives access to `firebase.auth.Auth`, which has the `createUserWithEmailAndPassword`
    API to sign up to Firebase.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**Registering the service**: We will need to include this service in the authentication
    module before using the APIs. Take a look at the following details.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**Injecting and using the** **service:** Once the service is registered, we
    will need to declare it in the constructor. The instance will be injected by the
    Angular framework. Finally, the signup component uses the `AuthenticationService` `signup()` API
    to authenticate a user to Firebase.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following example shows the declaration of `AuthenticationService` in the
    signup component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: User service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In addition to registering a new user to Firebase authentication, we will also
    need to store more information about the user, such as the mobile, email, and
    so on, in our Firebase database.
  prefs: []
  type: TYPE_NORMAL
- en: 'The user service is used to enter user information in the Firebase database.
    We use `AngularFireDatabase` from `angularfire2` to set user information to the
    Firebase database. This class is injected in the constructor of the `UserService`
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '`AngularFireDatabase` provides an object method, which accepts the path of
    the data in the Firebase database; this returns `AngularFireObject` to `set` the
    data to Firebase:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The complete `user.service.ts` file as of now is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'As covered in the preceding section, we will need to register the service in `authentication.module.ts`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Defining domain model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The object model contains information about the key domain of our application.
    This helps to store our unstructured data in a more readable and structured way.
    In our application, we will introduce a lot of object models to store our domain
    information.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we sign up a new user, we will store the user details in the Firebase
    database, and we created a user model with properties related to the user to store
    the user''s data. All the properties are declared as member variables with type
    since TypeScript supports types for variables as shown in the following `user.ts`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: TypeScript is the type version of JavaScript, and it compiles into JavaScript.
    Programming in Typescript is much easier and faster. You can learn more about
    this at [https://www.typescriptlang.org/docs/home.html](https://www.typescriptlang.org/docs/home.html).
  prefs: []
  type: TYPE_NORMAL
- en: Creating signup templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A signup template represents the view of web page. It provides the form elements
    to type user inputs. It also handles user errors in the template. We will go through
    all tags used in the template in this section. Error handling used in the template
    will be covered in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: FormModule
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We use `<form>` from `FormModule` to create the template for signup. `ngForm`
    contains the signup form data. This is required to retrieve the user-filled data.
    We pass this form data to the `onSignup()` method in the signup component. This
    user-filled data is retrieved using, for example, `signupFormData.value.email`,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Bootstrap elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We used bootstrap elements to design our signup form. We included bootstrap
    and other dependent libraries such as tether and jQuery in our `index.html` file,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Bootstrap is an open source toolkit for developing HTML, CSS, and JavaScript. For
    more details, refer to [https://getbootstrap.com/docs/4.0/getting-started/introduction/](https://getbootstrap.com/docs/4.0/getting-started/introduction/).
  prefs: []
  type: TYPE_NORMAL
- en: 'The elements used are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Grid styles**: We use bootstrap grid styles to align our form to the middle
    as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '**Alert**: This element is used to provide context messages when a user performs
    any action on the element as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: For more details about bootstrap, refer to [https://getbootstrap.com/docs/4.0/components/alerts/](https://getbootstrap.com/docs/4.0/components/alerts/).
  prefs: []
  type: TYPE_NORMAL
- en: Angular data binding
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As discussed in the preceding chapter, Angular supports various ways to bind
    data. In this particular case, we will support one-way binding using `(ngModel)='name'`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at the complete `signup.component.html` file as of now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Error handling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Error handling is an important step to create a good application. It makes our
    product more robust and error-resistant.
  prefs: []
  type: TYPE_NORMAL
- en: We use angular validators to validate user inputs for accuracy and completeness.
    For user input, we can use a common inbuilt validator or create our own custom
    validator.
  prefs: []
  type: TYPE_NORMAL
- en: Please note that these validators are built into HTML, not angular itself.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are a few of the inbuilt validators that are used:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Required**: This makes the input field mandatory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Min length**: This defines a lower limit to the user input. For example,
    we can limit the minimum length of mobile numbers to 10 digits.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Max length**. This defines a higher limit to the user input. For example,
    we can limit the maximum length of mobile number to 10 digits.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pattern**: We can create a pattern for user input. For example, the mobile
    number takes only number as its input.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Inbuilt validators can be used in a signup template, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: A custom validator is the customized validator for our application's use case.
    In our application, we will take a password and make the user retype their password
    for confirmation, to validate those two passwords, we will create a custom password
    validator.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create our validator, we will extend `Validator` from our form module. This
    provides a `validate` method to write our custom implementation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'We include the validator in our module, and our `authentication.module.ts` looks
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we use `PasswordEqualValidator` using the `passwordEqual` selector in
    our signup template to confirm the password, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Firebase errors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once a user provides correct input and clicks on the SIGNUP button, we can call
    the `signup()` method and the user is directed to their profile page. If any user
    input is incorrect, Firebase APIs throw an error to the application, and we will
    need to handle it in our application.
  prefs: []
  type: TYPE_NORMAL
- en: '`createUserWithEmailAndPassword` of `AngularFireAuth` throws the following
    errors:'
  prefs: []
  type: TYPE_NORMAL
- en: '**auth/email-already-in-use**: This error is thrown when a user provides an
    already-used email address for signing up.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**auth/invalid-email**: This error is thrown when the email address is not
    valid.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**auth/operation-not-allowed**: This error is thrown when Firebase authentication
    is not enabled when we create signup for the user. Most of the time, this occurs
    during development.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**auth/weak-password**: This is thrown when the password provided is weak.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When we call the signup API, `auth` returns `Promise<any>`. This class has `then`
    and `catch` methods for success and failure scenarios. In the `catch` block, we
    read the error message and show error in alert dialog. Firebase error message
    has a human-readable error message, so we don't map the error code with message. We
    can also  a create custom alert dialog and show the error message. In the next
    section, we will create a custom error alert and integrate it with the signup
    template.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Creating a customized alert dialog
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will create an alert dialog component. This is used to
    display an error message. It is a reusable component, which means it can be used
    across the application. We will need to follow the following steps to create and
    configure our independent alert dialog:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Creating the component**: This is same as creating any other component. We
    have provided the `@Input errorMessage:any` binding to accept an error message
    from an other integrated component. This message will be displayed on the signup page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here''s the complete `error-alert.component.ts`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '**Creating the template**: We have used alert from bootstrap components. The
    `errorMessage` variable in curly braces accepts the text and displays the error
    message on the signup page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here''s the complete `error-alert.component.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '**Creating the style sheets**: We have margin `top` and `bottom` to align the
    alert properly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here''s the complete `error-alert.component.scss`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '**Configuring in the signup template**: Once our error alert is ready, we can
    integrate it with other components. In this chapter, we integrated an error alert
    with our signup component. This contains the `*ngIf` directive to enable the error
    alert and error message binding to display the text from the signup component.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here''s the modified `signup.component.html` file with an error alert, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '**Assigning the error message**: We have created two member variables: `errorMessage`
    and `showError`. These variables are enabled in the `onSignup()` method when an
    error occurs. `errorMessage` is assigned from `error.message`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here''s the complete `signup.component.ts` with an error message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'During signup of a new user, if you type a password with just one character,
    the error in the Signup page looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00010.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Creating a signup component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A signup component is a controller and it is used to react to a user''s action,
    such as sign up or cancel. It is injected with the following two services:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Authentication service**: It provides authentication-related functionalities,
    such as login, signup, and logout'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**User service**: It interacts with the Firebase database to store extra user
    information, such as the mobile number and name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The constructor of the signup component accepts authentication and user services,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'When the user clicks on the SIGNUP button, the `onSignup` method is called.
    It accepts form data as a parameter, which has user-typed information. The email
    and password are retrieved and passed to the authentication service''s `signup`
    method. On successful signup, we retrieve other information from the form data
    and store it in the user domain model. Finally, we will pass this newly created
    `User` object to user service and register it in the Firebase database:'
  prefs: []
  type: TYPE_NORMAL
- en: On successful signup, the user info contains the UID. This is the unique identifier
    for a particular user. It is used as an indicator to store data in the Firebase
    database. This is also used to retrieve user information from the database.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'After a successful signup, Firebase authentication will have the following
    entry:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00011.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The Firebase database will have the following entry:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00012.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here''s the complete `signup.component.ts` file as of now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, register `signupComponent` in the authentication routing module, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, take a look at your component in the browser using `http://localhost:4200/app-friends-signup`,
    the component looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00013.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Finally, we build our signup component. The key learning in this chapter is
    injectable services. We created authentication and user services. These services
    used the Angular fire library to interact with Firebase authentication and database
    services. These new services were added to the signup component using dependency
    injection. This component used the services to sign up new users and add them
    to Firebase database. We inbuilt and customized message alerts.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will create a login component and log-in the newly registered
    user account. After successful login, the user will be directed to the user profile
    page.
  prefs: []
  type: TYPE_NORMAL
