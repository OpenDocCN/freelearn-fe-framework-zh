- en: Chapter 5. Mixins and the DOM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we took a deep dive into React Forms. We took a look
    at building multiple components and interactivity between them, Controller and
    Uncontrolled Components, building Forms and Form elements, and Form events and
    handlers for the events. We build a form to capture cart-checkout flow and orders
    being placed in a multi-step form.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will focus on abstracting content using mixins and touch
    upon DOM handling.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we will cover the following points:'
  prefs: []
  type: TYPE_NORMAL
- en: Mixins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PureRender mixin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: React and the DOM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At the end of this chapter, we will be able to abstract and reuse logic across
    our components and learn how to handle DOM from within the components.
  prefs: []
  type: TYPE_NORMAL
- en: Back at the office
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The duo was back at work. Mike entered with a cup of coffee. It was morning
    and the office had just started to buzz.
  prefs: []
  type: TYPE_NORMAL
- en: '"So Shawn, we did a lot of complex forms stuff last time. Our cart flow is
    now complete. However, now we have been asked to add a timeout to the cart. We
    need to show a timer to the user that they need to checkout and complete the order
    in 15 minutes."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Any idea how we can do this?"'
  prefs: []
  type: TYPE_NORMAL
- en: '"Umm, maintain a state for timer and keep updating every second? Take some
    action when the timer hits zero."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Right! We will use intervals to reduce the timeout values and keep updating
    our views to display the timer. As we have been storing the form data in a single
    place, our `Bookstore` component, let''s go ahead and add a state value that will
    track this timeout value. Let''s change our initial state to something similar
    to the following:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '"60 X 15, that''s 15 minutes in seconds value. We will also need to add a method
    to keep updating this state so that we can use it freely from here as well as
    the child components."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '"Cool."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Now, what we will do is define what are called as mixins."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Mixins?"'
  prefs: []
  type: TYPE_NORMAL
- en: '"Yeah, mixins allow us to share a code across components. Let''s take a look
    at how we are going to use it before moving ahead."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '"So what we are doing here is nothing much but defining an object. We will
    see how we use it in our components."'
  prefs: []
  type: TYPE_NORMAL
- en: '"As you can see, what we are trying to achieve here is add a way to track all
    our interval handlers, as follows:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '"Here, we are first initializing an array to hold instances to intervals that
    we will be creating. Next, we will define a method that can be used to define
    new intervals, as follows:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '"Got it. I see the last bit is defining the `componentWillUnmount` method and
    we have already defined `componentWillMount`; but this isn''t a React component.
    Why do we have these method here?"'
  prefs: []
  type: TYPE_NORMAL
- en: '"Oh right. Let''s take a look at the following method first:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '"What this method does is clean up the intervals, which we might have created,
    before we unmount our component."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Got it."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Now, as you mentioned, we have two life cycle methods here—`componentWillMount`
    and `componentWillUnmount`."'
  prefs: []
  type: TYPE_NORMAL
- en: '"When we start using this in our component, they are called just like the other
    similar methods, which we have in our component for life cycle."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Oh nice. Will both this and the existing method get called?" Shawn asked.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Exactly. Now that we have the mixing defined, let''s start using it!"'
  prefs: []
  type: TYPE_NORMAL
- en: '"The first place we want to start using this is on the delivery details page.
    This is as simple as doing the following:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '"Awesome, next we would like to start using this to take care of storing `cartTimout`
    values and updating them. Can you define a mixin to do just that?" asked Mike.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Okay, I will first define a method to decrement the cart timer, something
    that will keep updating the state. Next, we will need to actually set the timeout,
    to call the method at an interval so that it is called every second to decrement
    the time?"'
  prefs: []
  type: TYPE_NORMAL
- en: '"Exactly, let''s see how you would do it."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '"Nice, that''s exactly what we need. But we missed one piece; we need to be
    able to send this back to that parent component to store back the timer value
    that we are updating here."'
  prefs: []
  type: TYPE_NORMAL
- en: '"We will also take care of passing the current state of timer from the parent
    to the children."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Oh, right."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Let''s go back to our parent component to start passing the cart timer value
    to the children. Here''s how our render method should look now:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '"Notice that we are passing the `updateCartTimeout` method here. This is something
    that we will start using next in our mixin."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Next, we are going to update the `DeliveryDetails` component to start storing
    the `cartTimeout` value."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '"With this setup, we can now set up our render method for the delivery options
    page, this should now look similar to the following:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '"We also need to start using the `CartMixin`, so our `mixins` import should
    look similar to the following:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '"Nice, let me see how the shipping information looks like now."'
  prefs: []
  type: TYPE_NORMAL
- en: '![Back at the office](img/4730_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '"It works!" exclaimed Shawn.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Awesome. Remember, Shawn, now we need to pass the information back to our
    parent component when we change to some other page."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Yeah, we should add it to the components, where we used the mixin?"'
  prefs: []
  type: TYPE_NORMAL
- en: '"Better yet, let''s add the following code to the mixin:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '"Now our mixin should look similar to the following:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '"Our mixin will now update the current cart value when it gets unmounted."'
  prefs: []
  type: TYPE_NORMAL
- en: '"We missed one thing that is part of this mixin. We call `this.props.alertCartTimeout()`
    when the timer hits zero."'
  prefs: []
  type: TYPE_NORMAL
- en: '"We are going to define this on the *parent component* and pass it around to
    be called from child component, as follows:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '"Then update our render method to take care when we reach the timeout step,
    as shown in the following:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Let's see how the `DeliveryDetails` component looks after completing it, now:"
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '"We are also going to update our `ShippingDetails` component to look similar
    to the following:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'It should start looking similar to the following screenshot now:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Back at the office](img/4730_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '"Awesome," exclaimed Shawn.'
  prefs: []
  type: TYPE_NORMAL
- en: '"In case of timeouts, we have a simple display:"'
  prefs: []
  type: TYPE_NORMAL
- en: '![Back at the office](img/4730_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding a modal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"Alright, this works well," continued Mike.'
  prefs: []
  type: TYPE_NORMAL
- en: '"However, it''s a bit clumsy right now. After the timeout, there''s nothing
    a user can do. We can add a popup to notify the user. Instead of showing the error
    page, let''s display a modal with an alert and redirect the user to the first
    page so that the user can restart the flow. We can use Bootstrap modal to achieve
    this."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Got it. Want me to give it a try?" asked Shawn.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Go ahead!"'
  prefs: []
  type: TYPE_NORMAL
- en: '"Let me start with setting up the modal first. I will use a simple bootstrap
    modal to display it. After that''s done, I will need to invoke display of the
    modal from `alertCartTimeout`, I guess. I will also be setting up to display the
    first page and reset form data."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Correct."'
  prefs: []
  type: TYPE_NORMAL
- en: '"This is how the modal will look"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '"Nice. Next, you will be updating the `Bookstore` component `alertCartTimeout`
    method."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Yeah, I added a new empty HTML element with the `modalAlertTimeout` ID to
    the body. This will be used to display new modal and mount component on top of
    it. I also changed alert timeout method to the following:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '"Ah, let''s see what this does" continued Mike, checking the changes that Shawn
    had done."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Shawn, looks like the timeout is taking us to the first page, but its not
    displaying the modal alert"'
  prefs: []
  type: TYPE_NORMAL
- en: '"Oh, right. We still need to invoke the display of the modal from bootstrap."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Correct. Let me take care of that, Shawn. In our `ModalAlertTimeout`, we will
    add a method call to display the modal after the component has successfully mounted,
    as follows:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '"Ah, I see we are doing some DOM stuff here."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Yeah, let me go over them."'
  prefs: []
  type: TYPE_NORMAL
- en: Refs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"I think we have used this before," asked Shawn.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Yeah. What refs do is give us a handle to refer to some part of the component.
    We have done this in forms. Here, we are using it to get a handle to the modal
    so that we can invoke the `modal()` method on top of it."'
  prefs: []
  type: TYPE_NORMAL
- en: '"This would, in turn, display the modal."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Now, notice how we are using the `getDOMNode()` method."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Yup. What does it do?"'
  prefs: []
  type: TYPE_NORMAL
- en: '"The `getDOMNode()` method helps us to get the underlying DOM node, where the
    React element is rendered. In our case, we want to invoke a method on the DOM
    node."'
  prefs: []
  type: TYPE_NORMAL
- en: '"When we call `this.refs.timeoutModal`, it returns us a ref object of the component."'
  prefs: []
  type: TYPE_NORMAL
- en: '"This is different from the actual DOM component. It''s actually a React-wrapped
    object. To grab the underlying DOM object, we invoked `getDOMNode()`."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Got it."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Next, we have wrapped all this in a `setTimeout` call so that we can call
    it after the React component is successfully rendered and modal content exists
    on the page.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Finally, we called `$(timeoutModal).modal(''show'')` to invoke the modal!"'
  prefs: []
  type: TYPE_NORMAL
- en: '"Let''s see how our modal looks now."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '"Let''s see how this looks now."'
  prefs: []
  type: TYPE_NORMAL
- en: '![Refs](img/4730_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '"One last thing since we are discussing this, is about DOM. We can invoke `getDOMNode()`
    to also get the node for the current component. Therefore, we can simply call
    `this.getDOMNode()` and that will also return us an element!"'
  prefs: []
  type: TYPE_NORMAL
- en: '"Alright, let''s do this. We will unmount the modal when someone closes it
    so that we can invoke it afresh on the second render."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Let''s define a callback method to do just that, as follows:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '"Finally, we will set this as a callback on close of our modal, as follows:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '"With this, we are done! The component will unmount on modal hide."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Notice how we are using the `parentNode` attribute on the DOM node to hide
    the modal. This helps us to get the container on which the React element is and
    that we are using to remove the modal."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Nice. That has been a refresher. Thanks Mike!"'
  prefs: []
  type: TYPE_NORMAL
- en: With that, the duo headed back to check the various changes they had just done.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we took a look at refactoring our components. We saw how to
    make use of mixins and extract similar functionalities to use seamlessly across
    components. We also took a look at DOM interactions, using refs, and related DOM
    actions from a component.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will explore how React functions on the the server side.
    We will see how React allows us to render and handle components on the server
    to pre-render HTML, which is useful for several reasons. We will also take a look
    at how this affects the React component life cycle.
  prefs: []
  type: TYPE_NORMAL
