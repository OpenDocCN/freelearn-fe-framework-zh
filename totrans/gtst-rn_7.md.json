["```js\nvar NavigationBarRouteMapper = {\n  LeftButton: function(route, navigator, index, navState) {\n    switch (route.name) {\n      case 'home':\n        return (\n          <SimpleButton\n            onPress={() => navigator.push({name: 'noteLocations'})}\n            customText='Map'\n            style={styles.navBarLeftButton}\n            textStyle={styles.navBarButtonText}\n           />\n        );\n      case 'createNote':\n      case 'noteLocations':\n      case 'camera':\n        return (\n          <SimpleButton\n            onPress={() => navigator.pop()}\n            customText='Back'\n            style={styles.navBarLeftButton}\n            textStyle={styles.navBarButtonText}\n           />\n        );\n      default:\n        return null;\n    }\n  },\n\n  ...\n\n  Title: function(route, navigator, index, navState) {\n    switch (route.name) {\n      case 'home':\n        return (\n          <Text style={styles.navBarTitleText}>React Notes</Text>\n        );\n      case 'createNote':\n        return (\n          <Text style={styles.navBarTitleText}>{route.note ? route.note.title : 'Create Note'}</Text>\n        );\n      case 'noteLocations':\n        return (\n          <Text style={styles.navBarTitleText}>Note Locations</Text>\n        );\n      case 'camera':\n        return (\n          <Text style={styles.navBarTitleText}>Take Picture</Text>\n        );\n    }\n  }\n};\n```", "```js\nclass ReactNotes extends React.Component {\n  ...\n\n  renderScene(route, navigator) {\n    switch (route.name) {\n      ...\n\n      case 'createNote':\n        return (\n          <NoteScreen navigator={navigator} note={route.note} onChangeNote={(note) => this.updateNote(note)} showCameraButton={true} />\n        );\n\n      case 'camera':\n        return (\n          <CameraScreen />\n        );\n    }\n  }\n\n  ...\n\n}\n```", "```js\nnpm install react-native-camera@0.3.8 --save\n\n```", "```js\nimport Camera from 'react-native-camera';\n\n```", "```js\n  render () {\n    return (\n      <Camera\n        captureTarget={Camera.constants.CaptureTarget.disk}\n        ref=\"cam\"\n        style={styles.container}\n      >\n        <View style={styles.cameraButtonContainer}>\n          <SimpleButton\n            onPress={this._takePicture.bind(this)}\n            customText=\"Capture\"\n            style={styles.cameraButton}\n            textStyle={styles.cameraButtonText}\n          />\n        </View>\n      </Camera>\n    );\n  }\n```", "```js\n_takePicture () {\n  this.refs.cam.capture((err, data) => {\n    if (err) return;\n    this.props.onPicture(data);\n  });\n}\n```", "```js\nimport React, {\n  StyleSheet,\n  Text,\n  View\n} from 'react-native';\n\nimport Camera from 'react-native-camera';\nimport SimpleButton from './SimpleButton';\n\nexport default class CameraScreen extends React.Component {\n  _takePicture () {\n    this.refs.cam.capture((err, data) => {\n      if (err) return;\n      this.props.onPicture(data);\n    });\n  }\n\n  render () {\n    return (\n      <Camera\n        captureTarget={Camera.constants.CaptureTarget.disk}\n        ref=\"cam\"\n        style={styles.container}\n      >\n        <View style={styles.cameraButtonContainer}>\n          <SimpleButton\n            onPress={this._takePicture.bind(this)}\n            customText=\"Capture\"\n            style={styles.cameraButton}\n            textStyle={styles.cameraButtonText}\n          />\n        </View>\n      </Camera>\n    );\n  }\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 64\n  },\n  cameraButtonContainer: {\n    position: 'absolute',\n    bottom: 20,\n    left: 20,\n    right: 20\n  },\n  cameraButton: {\n    backgroundColor: '#5B29C1',\n    borderRadius: 4,\n    paddingHorizontal: 20,\n    paddingVertical: 15\n  },\n  cameraButtonText: {\n    color: 'white',\n    textAlign: 'center'\n  }\n});\n```", "```js\nrenderScene(route, navigator) {\n    switch (route.name) {\n      case 'home':\n        return (\n      …\n      case 'camera':\n        return (\n          <CameraScreen onPicture={(imagePath) => this.saveNoteImage(imagePath, route.note)}/>\n        );    \n   …\n    }\n  }\n}\n```", "```js\nsaveNoteImage(imagePath, note) {\n  note.imagePath = imagePath;\n  this.updateNote(note);\n}\n```", "```js\nimport NoteImageScreen from './App/Components/NoteImageScreen';\n\nvar NavigationBarRouteMapper = {\n  LeftButton: function(route, navigator, index, navState) {\n    switch (route.name) {\n\n      ...\n\n      case 'createNote':\n      case 'noteLocations':\n      case 'camera':\n      case 'noteImage':\n        ...\n    }\n  },\n\n  ...\n\n  Title: function(route, navigator, index, navState) {\n    switch (route.name) {\n\n      ...\n\n      case 'noteImage':\n        return (\n          <Text style={styles.navBarTitleText}>{`Image: ${route.note.title}`}</Text>\n        );\n    }\n  }\n};\n\nclass ReactNotes extends React.Component {\n\n  ...\n\n  renderScene(route, navigator) {\n    switch (route.name) {\n\n      ...\n\n      case 'noteImage':\n        return (\n          <NoteImageScreen note={route.note} />\n        );\n    }\n  }\n\n  ...\n\n}\n```", "```js\nimport React, {\n  Image,\n  View,\n  StyleSheet\n} from 'react-native';\n\nexport default class NoteImageScreen extends React.Component {\n  render () {\n    return (\n      <View style={styles.container}>\n        <Image\n          source={{uri: this.props.note.imagePath}}\n          style={styles.image}\n        />\n      </View>\n    );\n  }\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 64\n  },\n  image: {\n    flex: 1\n  }\n});\n```", "```js\nsource={{uri: https://example.com/example.png}}\n```", "```js\nsource={require('./example.png')} \n```", "```js\nclass ReactNotes extends React.Component {\n\n  ...\n\n  deleteNoteImage (note) {\n    note.imagePath = null;\n    this.updateNote(note);\n  }\n\n  saveNoteImage(imagePath, note) {\n    note.imagePath = imagePath;\n    this.updateNote(note);\n  }\n\n  ...\n\n}\n```", "```js\nvar NavigationBarRouteMapper = {\n\n  ...\n\n  RightButton: function(route, navigator, index, navState) {\n    switch (route.name) {\n\n      ...\n\n      case 'noteImage':\n        return (\n            <SimpleButton\n              onPress={() => {\n                navigator.props.onDeleteNoteImage(route.note);\n                navigator.pop();\n              }}\n              customText='Delete'\n              style={styles.navBarRightButton}\n              textStyle={styles.navBarButtonText}\n            />\n          );\n      default:\n         return null;\n    }\n  },\n\n  ...\n\n}\n\nclass ReactNotes extends React.Component {\n\n  ...\n\n   render () {\n    return (\n      <Navigator\n        initialRoute={{name: 'home'}}\n        renderScene={this.renderScene.bind(this)}\n        navigationBar={\n          <Navigator.NavigationBar\n            routeMapper={NavigationBarRouteMapper}\n            style={styles.navBar}\n          />\n        }\n        onDeleteNote={(note) => this.deleteNote(note)}\n        onDeleteNoteImage={(note) => this.deleteNoteImage(note)}\n      />\n    );\n  }\n}\n```", "```js\nimport SimpleButton = from './SimpleButton';\n\nexport default class NoteScreen extends React.Component {\n\n  ...\n\n  blurInputs () {\n    this.refs.body.blur();\n    this.refs.title.blur();\n  }\n\n  render () {\n    var pictureButton = null;\n    if (this.props.showCameraButton) {\n      pictureButton = (this.state.note.imagePath) ? (\n        <SimpleButton\n          onPress={() => {\n            this.blurInputs();\n            this.props.navigator.push({\n              name: 'noteImage',\n              note: this.state.note\n            });\n          }}\n          customText=\"View Picture\"\n          style={styles.takePictureButton}\n          textStyle={styles.takePictureButtonText}\n        />\n      ) : (\n        <SimpleButton\n          onPress={() => {\n            this.blurInputs();\n            this.props.navigator.push({\n              name: 'camera',\n              note: this.state.note\n            });\n          }}\n          customText=\"Take Picture\"\n          style={styles.takePictureButton}\n          textStyle={styles.takePictureButtonText}\n        />\n      );\n    }\n\n    return (\n      <View style={styles.container}>\n        <View style={styles.inputContainer}>\n          <TextInput\n            ref=\"title\"\n            autoFocus={true}\n            autoCapitalize=\"sentences\"\n            placeholder=\"Untitled\"\n            style={[styles.textInput, styles.title]}\n            onEndEditing={(text) => {this.refs.body.focus()}}\n            underlineColorAndroid=\"transparent\"\n            value={this.state.note.title}\n            onChangeText={(title) => this.updateNote(title, this.state.note.body)}\n          />\n\n          {pictureButton}\n        </View>\n        ...\n\n      </View>\n    );\n  }\n}\n```", "```js\nvar styles = StyleSheet.create({\n\n  ...\n\n  takePictureButton: {\n    backgroundColor: '#5B29C1',\n    borderColor: '#48209A',\n    borderWidth: 1,\n    borderRadius: 4,\n    paddingHorizontal: 10,\n    paddingVertical: 5,\n    shadowColor: 'darkgrey',\n    shadowOffset: {\n        width: 1,\n        height: 1\n    },\n    shadowOpacity: 0.8,\n    shadowRadius: 1\n  },\n  takePictureButtonText: {\n    color: 'white'\n  }\n});\n```"]