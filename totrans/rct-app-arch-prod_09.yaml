- en: '9'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '9'
- en: Configuring CI/CD for Testing and Deployment
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置测试和部署的CI/CD
- en: Our application is finally ready to go to production and meet its first users.
    We have built its features and implemented all the required checks, such as linting,
    testing, and so on, which will give us the confidence that the application code
    is working correctly.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序终于准备就绪，可以投入生产并迎接第一批用户。我们已经构建了其功能并实现了所有必需的检查，例如代码检查、测试等，这将让我们有信心应用程序代码正在正确运行。
- en: However, currently, all those checks must be executed on our local machine.
    Whenever we want to push a new feature to production, we need to run all the scripts
    and then redeploy the application manually, which is a very tedious process.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，目前，所有这些检查都必须在我们的本地机器上执行。每次我们想要将新功能推送到生产环境时，都需要运行所有脚本然后手动重新部署应用程序，这是一个非常繁琐的过程。
- en: In this chapter, we will learn what CI/CD is. Then, we will learn what GitHub
    Actions is and what are the main parts of a GitHub Actions pipeline. We will then
    learn how to create a CI/CD pipeline that will automate the verification and deployment
    of the application to Vercel.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习什么是CI/CD。然后，我们将学习什么是GitHub Actions以及GitHub Actions流水线的主要部分。接着，我们将学习如何创建一个CI/CD流水线，该流水线将自动化应用程序的验证和部署到Vercel。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: What is CI/CD?
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是CI/CD？
- en: Using GitHub Actions
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用GitHub Actions
- en: Configuring the pipeline for testing
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置测试流水线
- en: Configuring the pipeline for deploying to Vercel
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置部署到Vercel的流水线
- en: By the end of this chapter, we will know how to configure the CI/CD pipeline
    with GitHub Actions and deploy the application to Vercel.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，我们将知道如何使用GitHub Actions配置CI/CD流水线并将应用程序部署到Vercel。
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'Before we get started, we need to set up our project. To be able to develop
    our project, we will need the following things installed on our computer:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始之前，我们需要设置我们的项目。为了能够开发我们的项目，我们将在计算机上需要以下内容安装：
- en: '**Node.js** version 16 or above and **npm** version 8 or above.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Node.js** 版本16或更高，以及 **npm** 版本8或更高。'
- en: 'There are multiple ways to install Node.js and npm. Here is a great article
    that goes into more detail: [https://www.nodejsdesignpatterns.com/blog/5-ways-to-install-node-js](https://www.nodejsdesignpatterns.com/blog/5-ways-to-install-node-js).'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Node.js和npm有多种方式。这里有一篇很好的文章详细介绍了更多细节：[https://www.nodejsdesignpatterns.com/blog/5-ways-to-install-node-js](https://www.nodejsdesignpatterns.com/blog/5-ways-to-install-node-js)。
- en: '**VSCode** (optional) is currently the most popular editor/IDE for JavaScript/TypeScript,
    so we will be using it. It is open source, has great integration with TypeScript,
    and we can extend its features via extensions. It can be downloaded from [https://code.visualstudio.com/](https://code.visualstudio.com/).'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**VSCode**（可选）是目前最流行的JavaScript/TypeScript编辑器/IDE，因此我们将使用它。它是开源的，与TypeScript有很好的集成，并且我们可以通过扩展来扩展其功能。可以从[https://code.visualstudio.com/](https://code.visualstudio.com/)下载。'
- en: 'The code files for this chapter can be found here: [https://github.com/PacktPublishing/React-Application-Architecture-for-Production](https://github.com/PacktPublishing/React-Application-Architecture-for-Production).'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码文件可以在以下位置找到：[https://github.com/PacktPublishing/React-Application-Architecture-for-Production](https://github.com/PacktPublishing/React-Application-Architecture-for-Production)。
- en: 'The repository can be cloned locally with the following command:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用以下命令在本地克隆存储库：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Once the repository has been cloned, we need to install the application’s dependencies:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦克隆了存储库，我们需要安装应用程序的依赖项：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We can provide the environment variables using the following command:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下命令提供环境变量：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Once the dependencies have been installed, we need to select the right stage
    of the code base that matches this chapter. We can do that by executing the following
    command:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装了依赖项，我们需要选择与本章匹配的正确代码库阶段。我们可以通过执行以下命令来完成：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This command will prompt us with a list of stages for each chapter:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将提示我们每个章节的阶段列表：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This is the ninth chapter, so we can select `chapter-09-start` if we want to
    follow along, or `chapter-09` to see the final results of this chapter.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这是第九章，所以如果我们想跟随，可以选择`chapter-09-start`，或者选择`chapter-09`来查看本章的最终结果。
- en: Once the chapter has been selected, all the files required to follow along with
    this chapter will appear.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦选择了章节，所有必要的文件都会显示出来以供跟随本章内容。
- en: For more information about the setup details, check out the `README.md` file.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于设置细节的信息，请查看`README.md`文件。
- en: What is CI/CD?
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是CI/CD？
- en: '**Continuous integration/continuous deployment** (**CI/CD**) is a method of
    delivering application changes to its users in an automated way. CI/CD should
    usually consist of the following parts:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**持续集成/持续部署**（**CI/CD**）是一种以自动化方式向用户交付应用程序更改的方法。CI/CD通常应包括以下部分：'
- en: '**Continuous Integration** is the automated process of verifying that the code
    has been built, tested, and merged into a repository'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持续集成**是自动验证代码是否已构建、测试并合并到存储库的过程'
- en: '**Continuous Delivery** means delivering changes to the repository'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持续交付**意味着将更改交付到存储库'
- en: '**Continuous Deployment** means publishing the changes to the production server,
    where the changes are made available to the users'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持续部署**意味着将更改发布到生产服务器，在那里更改对用户可用'
- en: 'Now, let’s think about how we could implement CI/CD for our application. We
    already have all the parts – we just need to put them together. The process would
    work like this:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们考虑如何为我们的应用程序实现CI/CD。我们已经有了所有部分——我们只需要将它们组合在一起。这个过程将像这样工作：
- en: Run all code checks for the application (unit and integration testing, linting,
    type checking, format checking, and so on)
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行应用程序的所有代码检查（单元和集成测试、代码风格检查、类型检查、格式检查等）
- en: Build the application and run end-to-end tests
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建应用程序并运行端到端测试
- en: If both processes finish successfully, we can deploy our application
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果两个过程都成功完成，我们可以部署我们的应用程序
- en: 'Here is how the process can be visualized:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是如何可视化这个过程：
- en: '![Figure 9.1 – Pipeline overview ](img/B17297_09_01.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![图9.1 – 管道概述](img/B17297_09_01.jpg)'
- en: Figure 9.1 – Pipeline overview
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.1 – 管道概述
- en: This process will ensure our application is always in the best condition possible
    and that the changes get frequently and easily released to production. This is
    especially useful when working in larger teams where many changes are being introduced
    to the application on a daily basis.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 此过程将确保我们的应用程序始终处于最佳状态，并且更改可以频繁且容易地发布到生产环境中。这对于在大型团队中工作特别有用，因为每天都会向应用程序引入许多更改。
- en: To run the CI/CD pipeline, we need proper infrastructure. Since we keep the
    repository on GitHub, we can use GitHub Actions to handle CI/CD.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行CI/CD管道，我们需要适当的基础设施。由于我们将存储库保存在GitHub上，我们可以使用GitHub Actions来处理CI/CD。
- en: Using GitHub Actions
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用GitHub Actions
- en: '**GitHub Actions** is a CI/CD tool that allows us to automate, build, test,
    and deploy pipelines. We can create workflows that run on a specific event in
    the repository.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**GitHub Actions**是一个CI/CD工具，允许我们自动化、构建、测试和部署管道。我们可以在存储库中的特定事件上创建运行工作流程。'
- en: To understand how it works, let’s have a look at some of its components in the
    following sections.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解它是如何工作的，让我们在以下部分中查看其一些组件。
- en: Workflows
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作流程
- en: A `.github/workflows` folder. Workflows can be run when a specified event is
    triggered. We can also re-run workflows manually directly from GitHub. A repository
    can have as many workflows as we want.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 一个`.github/workflows`文件夹。当指定的事件被触发时，可以运行工作流程。我们还可以直接从GitHub手动重新运行工作流程。一个存储库可以有我们想要的任何数量的工作流程。
- en: Events
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 事件
- en: An **event**, when fired, will cause the workflow to run. GitHub activities
    can trigger events, such as pushing to the repository or creating a pull request.
    Besides that, they can also be started on a schedule or via HTTP POST requests.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个**事件**被触发时，将导致工作流程运行。GitHub活动可以触发事件，例如向存储库推送或创建拉取请求。除此之外，它们还可以按计划或通过HTTP
    POST请求启动。
- en: Jobs
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 作业
- en: A **job** defines a series of steps that will be executed in a workflow. A step
    can be either an action or a script that can be executed.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 一个**作业**定义了一系列将在工作流程中执行的步骤。一个步骤可以是执行的动作或脚本。
- en: A workflow can have many jobs that can run in parallel, or they can wait for
    dependent jobs to finish before starting.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 一个工作流程可以有多个可以并行运行的作业，或者它们可以在开始之前等待依赖作业完成。
- en: Actions
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动作
- en: An **action** is an application that runs on GitHub Actions to perform a repetitive
    task. We can use already built actions available on [https://github.com/marketplace?type=actions](https://github.com/marketplace?type=actions),
    or we can create our own. We will be using a couple of pre-made actions in our
    pipeline.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**动作**是在GitHub Actions上运行以执行重复性任务的应用程序。我们可以使用在[https://github.com/marketplace?type=actions](https://github.com/marketplace?type=actions)上可用的已构建动作，或者我们可以创建自己的。我们将在我们的管道中使用几个预制的动作。'
- en: Runners
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行器
- en: A runner is a server that runs workflows when they get triggered. It can be
    hosted on GitHub, but it can also be self-hosted.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 运行器是一个在触发时运行工作流程的服务器。它可以在GitHub上托管，也可以自行托管。
- en: Now that we are familiar with the basics of GitHub Actions, we can start working
    on creating the workflow for our application.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经熟悉了 GitHub Actions 的基础知识，我们可以开始创建我们应用程序的工作流程。
- en: 'Let’s create the `.github/workflows/main.yml` file and the initial code:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建 `.github/workflows/main.yml` 文件和初始代码：
- en: '[PRE5]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the preceding code, we are providing the name of the workflow. If we omit
    it, the name will be assigned to the name of the workflow file. Here, we are defining
    the `push` event, which will cause the workflow to run whenever code changes get
    pushed to the repository.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们提供了工作流程的名称。如果我们省略它，名称将被分配给工作流程文件的名称。在这里，我们定义了 `push` 事件，这将导致代码更改推送到仓库时工作流程运行。
- en: We will define the jobs in the following sections.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在以下部分定义作业。
- en: 'For every job we define, we will provide the following:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们定义的每个作业，我们将提供以下内容：
- en: '[PRE6]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'These properties will be common for all the jobs:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这些属性将适用于所有作业：
- en: '`name` sets the name of the running job'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` 设置正在运行的作业名称'
- en: '`runs-on` sets the runner, which will run the job'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`runs-on` 设置运行器，它将运行作业'
- en: Now that we learned what GitHub Actions is and what are the main parts of a
    pipeline, we can now start working on the pipelines for our application.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了 GitHub Actions 是什么以及管道的主要部分，我们可以开始为我们的应用程序构建管道。
- en: Configuring the pipeline for testing
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置测试管道
- en: 'Our testing pipeline will consist of two jobs that should do the following:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的测试管道将包括两个作业，它们应该执行以下操作：
- en: Run all code checks such as linting, type checking, unit and integration testing,
    and so on
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行所有代码检查，如代码风格检查、类型检查、单元测试和集成测试等
- en: Build the application and run end-to-end tests
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建应用程序并运行端到端测试
- en: Code checks job
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码检查作业
- en: 'The code checks job should work as shown in the following diagram:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 代码检查作业应该像以下图示中显示的那样工作：
- en: '![Figure 9.2 – Code checks job overview ](img/B17297_09_02.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.2 – 代码检查作业概述](img/B17297_09_02.jpg)'
- en: Figure 9.2 – Code checks job overview
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.2 – 代码检查作业概述
- en: 'As we can see, the job should be straightforward:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，作业应该是直接的：
- en: First, we need to provide environment variables to the application.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要向应用程序提供环境变量。
- en: Then, we need to install the dependencies.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们需要安装依赖项。
- en: Next, we must run unit and integration tests.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们必须运行单元测试和集成测试。
- en: Then, we must run linting.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们必须运行代码风格检查。
- en: After, we must check the code format.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们必须检查代码格式。
- en: Finally, we must run type checking.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们必须运行类型检查。
- en: 'Within `jobs`, let’s add the job that runs these tasks:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `jobs` 中，让我们添加运行这些任务的作业：
- en: '[PRE7]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'There are a couple of things worth mentioning about the job:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 关于作业，有几件事情值得提及：
- en: We use the `actions/checkout@v3` action from the marketplace to allow the job
    to access the repository
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用市场中的 `actions/checkout@v3` 动作允许作业访问仓库
- en: We use the `actions/setup-node` action to configure which node version to run
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用 `actions/setup-node` 动作来配置要运行哪个节点版本
- en: We execute the scripts to verify that everything works as expected
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们执行脚本以验证一切是否按预期工作
- en: End-to-end testing job
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 端到端测试作业
- en: Our second job related to testing is the end-to-end job, where we want to build
    the application and run the end-to-end tests we defined in the previous chapter.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们与测试相关的第二个作业是端到端作业，我们希望在上一章中定义的应用程序构建和端到端测试。
- en: 'It should work as shown in the following diagram:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 它应该像以下图示中显示的那样工作：
- en: '![Figure 9.3 – E2E testing job ](img/B17297_09_03.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.3 – E2E 测试作业](img/B17297_09_03.jpg)'
- en: Figure 9.3 – E2E testing job
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.3 – E2E 测试作业
- en: 'As we can see, the job will work as follows:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，作业将按以下方式工作：
- en: First, we need to add the environment variables.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要添加环境变量。
- en: Then, the dependencies for the applications need to be installed.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，需要安装应用程序的依赖项。
- en: Then, we need to create the production build of the application.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们需要创建应用程序的生产构建版本。
- en: Finally, the production code gets end-to-end tested.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，生产代码得到端到端测试。
- en: 'To implement this job, let’s add the following code:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这个作业，让我们添加以下代码：
- en: '[PRE8]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'There are a couple of things worth mentioning about the job:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 关于作业，有几件事情值得提及：
- en: We use the `actions/checkout@v3` action to check out the repository.
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用 `actions/checkout@v3` 动作来检出仓库。
- en: We use the `cypress-io/github-action@v4` action, which will abstract away the
    end-to-end testing. It will install all dependencies, build the application, and
    then start and run all Cypress tests.
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用 `cypress-io/github-action@v4` 动作，它将抽象化端到端测试。它将安装所有依赖项，构建应用程序，然后启动并运行所有
    Cypress 测试。
- en: Now that we configured the pipeline for running code checks such as linting,
    formatting, type checking, and testing, we can start working on deploying the
    application.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经配置了运行代码检查（如代码检查、格式化、类型检查和测试）的管道，我们可以开始部署应用程序的工作。
- en: Configuring the pipeline for deploying to Vercel
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置部署到 Vercel 的管道
- en: 'When our testing jobs finish, we want to deploy the application to Vercel.
    To start deploying to Vercel from GitHub Actions, we need to do a couple of things:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们的测试作业完成后，我们希望将应用程序部署到 Vercel。要从 GitHub Actions 开始部署到 Vercel，我们需要做一些事情：
- en: Have a Vercel account
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拥有 Vercel 账户
- en: Disable GitHub integration for Vercel
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 禁用 Vercel 的 GitHub 集成
- en: Link the project to Vercel
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将项目链接到 Vercel
- en: Provide environment variables to GitHub Actions
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向 GitHub Actions 提供环境变量
- en: Create the job that will deploy the application
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建部署应用程序的作业
- en: Having a Vercel account
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 拥有 Vercel 账户
- en: Vercel is straightforward to get started with. Visit [https://vercel.com/signup](https://vercel.com/signup)
    and create an account if you don’t have one.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: Vercel 很容易开始使用。访问 [https://vercel.com/signup](https://vercel.com/signup) 并创建账户，如果您还没有的话。
- en: Disabling GitHub integration for Vercel
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 禁用 Vercel 的 GitHub 集成
- en: '**Vercel** is a platform that has excellent integration with GitHub out of
    the box. This means that whenever we push changes to the repository, a new version
    of the application will be deployed to Vercel automatically. However, in our case,
    we want to verify that our application works as expected before the deployment
    step so that we can perform this task from the CI/CD pipeline.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '**Vercel** 是一个与 GitHub 集成出色的平台。这意味着每次我们向存储库推送更改时，应用程序的新版本将自动部署到 Vercel。然而，在我们的情况下，我们希望在部署步骤之前验证我们的应用程序是否按预期工作，以便我们可以从
    CI/CD 管道执行此任务。'
- en: 'To do this, we need to disable GitHub integration in Vercel. This can be done
    by creating the `vercel.json` file with the following content:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，我们需要在 Vercel 中禁用 GitHub 集成。这可以通过创建包含以下内容的`vercel.json`文件来完成：
- en: '[PRE9]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Linking the project to Vercel
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将项目链接到 Vercel
- en: Since we have disabled GitHub integration, we need to link the project in Vercel
    to our repository. This can be done by using the Vercel CLI.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已禁用 GitHub 集成，我们需要在 Vercel 中将项目链接到我们的存储库。这可以通过使用 Vercel CLI 来完成。
- en: 'Let’s execute the following command:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们执行以下命令：
- en: '[PRE10]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The CLI will ask us a series of questions, as follows:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: CLI 将会询问我们一系列问题，如下所示：
- en: '[PRE11]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Once the CLI process finishes, the `.vercel` folder will be generated. It is
    a folder that should never be tracked by the repository. Inside the `.vercel/project.json`
    file, we will find our project credentials, as follows:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 CLI 进程完成，`.vercel` 文件夹将被生成。这是一个不应该由存储库跟踪的文件夹。在 `.vercel/project.json` 文件中，我们将找到我们的项目凭据，如下所示：
- en: '[PRE12]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We will need to provide these values to GitHub Actions in a few moments.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在几分钟后需要将这些值提供给 GitHub Actions。
- en: Providing environment variables to GitHub Actions
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向 GitHub Actions 提供环境变量
- en: 'For our pipeline, we need a couple of environment variables:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的管道，我们需要几个环境变量：
- en: '`VERCEL_ORG_ID`, which we can get from the `.``vercel/project.json` file'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`VERCEL_ORG_ID`，我们可以从`.vercel/project.json`文件中获取'
- en: '`VERCEL_PROJECT_ID`, which we can also get from the `.``vercel/project.json`
    file'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`VERCEL_PROJECT_ID`，我们也可以从`.vercel/project.json`文件中获取'
- en: '`VERCEL_TOKEN` which we can get from [https://vercel.com/account/tokens](https://vercel.com/account/tokens%20)'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`VERCEL_TOKEN`，我们可以从[https://vercel.com/account/tokens](https://vercel.com/account/tokens%)
    获取'
- en: 'Once we have these values, we can add them to GitHub Actions for our project:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了这些值，我们就可以将它们添加到我们项目的 GitHub Actions 中：
- en: '![Figure 9.4 – Adding environment variables to GitHub Actions ](img/B17297_09_04.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.4 – 向 GitHub Actions 添加环境变量](img/B17297_09_04.jpg)'
- en: Figure 9.4 – Adding environment variables to GitHub Actions
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.4 – 向 GitHub Actions 添加环境变量
- en: Creating the job that will deploy the application
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建部署应用程序的作业
- en: 'Now that everything has been set, we can start working on the job that will
    do all the work. We can see how it should work in the following diagram:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 现在一切都已经设置好了，我们可以开始工作，这个工作将完成所有的工作。我们可以在以下图中看到它应该如何工作：
- en: '![Figure 9.5 – Deploy job overview ](img/B17297_09_05.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.5 – 部署作业概述](img/B17297_09_05.jpg)'
- en: Figure 9.5 – Deploy job overview
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.5 – 部署作业概述
- en: 'As we can see, it will go through a couple of steps:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，它将经过几个步骤：
- en: Check the repository owner since we do not want to deploy if the workflow is
    triggered from a repository fork.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查存储库所有者，因为我们不希望从存储库分叉触发工作流程时进行部署。
- en: Set the deployment status to *start*.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将部署状态设置为 *开始*。
- en: Deploy to Vercel.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署到 Vercel。
- en: Set the deployment status to *finish*.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将部署状态设置为*完成*。
- en: 'Let’s add the `deploy` job to the workflow file, below the other jobs we defined
    previously:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在定义了其他作业的工作流程文件中添加`deploy`作业：
- en: '[PRE13]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'There are a couple of things worth mentioning about the job:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 关于作业有几件事情值得提及：
- en: 'We set this job to depend on the previous two by adding `needs: [code-checks,
    e2e]`. This means that this job will wait until those jobs complete successfully
    before starting. If some of those jobs fail, this job will never run.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '我们通过添加`needs: [code-checks, e2e]`将此作业设置为依赖于前两个作业。这意味着此作业将在那些作业成功完成后才开始。如果其中一些作业失败，此作业将永远不会运行。'
- en: 'With `if: github.repository_owner == ''my-username''`, we check if the repository
    owner is the owner of the project. This check should prevent repository forks
    from deploying the application.'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '使用`if: github.repository_owner == ''my-username''`，我们检查仓库所有者是否是项目的所有者。这个检查应该可以防止仓库分叉部署应用程序。'
- en: We are using the `bobheadxi/deployments@v1` action before and after the deploying
    task to update the deployment status in GitHub.
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在部署任务前后，我们使用`bobheadxi/deployments@v1`动作来更新GitHub中的部署状态。
- en: We are using the `amondnet/vercel-action@v25` action to deploy to Vercel. Depending
    on which branch got updated, it will be deployed either to a preview or production
    environment.
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用`amondnet/vercel-action@v25`动作部署到Vercel。根据哪个分支被更新，它将被部署到预览环境或生产环境。
- en: 'Our pipeline should look like this:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的工作流程应该看起来像这样：
- en: '![Figure 9.6 – Pipeline ](img/B17297_09_06.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![图9.6 – 工作流程](img/B17297_09_06.jpg)'
- en: Figure 9.6 – Pipeline
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.6 – 工作流程
- en: 'We can track the deployment status of each environment in the bottom-right
    corner of the repository page:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在仓库页面右下角跟踪每个环境的部署状态：
- en: '![Figure 9.7 – Deployment statuses ](img/B17297_09_07.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![图9.7 – 部署状态](img/B17297_09_07.jpg)'
- en: Figure 9.7 – Deployment statuses
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.7 – 部署状态
- en: Awesome! Our application is now in production and available for users. Configuring
    the pipeline might take a bit more effort initially, but it saves a lot of time
    in the long run as we don’t have to worry about all these steps. They all just
    got automated.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们的应用程序现在已投入生产并可供用户使用。配置管道可能需要初始时更多的努力，但从长远来看，它可以节省大量时间，因为我们不必担心所有这些步骤。它们都已经自动化了。
- en: Summary
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned that a CI/CD pipeline is a process that allows the
    automation of code changes and delivery. We also got introduced to GitHub Actions
    and the parts that allow us to create the CI/CD pipeline to automate testing and
    deploying our application.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解到CI/CD管道是一个允许自动化代码更改和交付的过程。我们还介绍了GitHub Actions以及允许我们创建CI/CD管道以自动化测试和部署我们应用程序的各个部分。
- en: After that, we defined three jobs for the workflow. With these jobs, we automated
    the process of running all the required checks, tests, and deployments. Finally,
    we learned how to deploy to Vercel from the CI/CD pipeline and deliver the application
    to the users.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们为工作流程定义了三个作业。通过这些作业，我们自动化了运行所有必需的检查、测试和部署的过程。最后，我们学习了如何从CI/CD管道部署到Vercel并将应用程序交付给用户。
- en: This concludes the MVP version of our application. In the next chapter, we will
    cover some of the potential features and improvements we can make to the application.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 这标志着我们应用程序MVP版本的完成。在下一章中，我们将介绍一些我们可以对应用程序进行的潜在功能和改进。
