["```js\n<script setup>\n   import {onMounted, onBeforeUnmount} from \"vue\"\n   onMounted(()=>{\n       window.addEventListener(\"resize\", myFunction)\n   })\n   onBeforeUnmount(()=>{\n       window.removeEventListener(\"resize\", myFunction)\n   })\n   function myFunction(){\n       // Do something with the event here\n   }\n</script>\n```", "```js\nconst my_singleton={\n    // Implementation code here...\n}\nexport default my_singleton;\n```", "```js\nclass myClass{\n    constructor(){\n        if(myClass._instance){\n            return myClass._instance;\n        }else{\n            myClass._instance=this;\n        }\n        return this;\n    }\n}\nexport default new myClass()\n```", "```js\nimport my_method1_singleton from \"./singleton-json\";\nimport my_method2_singleton from \"./singleton-class\";\nconsole.log(\"Look mom, no instantiation in both cases!\")\nmy_method1_singleton.myFunction()\nmy_method2_singleton.myFunction()\n```", "```js\nimport dbManager from \"dbManager\"\nconst projects={\n    getAllProjects(){\n        return dbManager.getAll(\"projects\")\n    }\n}\nexport default projects;\n```", "```js\nconst projects={\n    getAllProjects(dbManager){\n        return dbManager.getAll(\"projects\")\n    }\n}\nexport default projects;\n```", "```js\nconst projects={\n    dbManager,\n    getAllProjects(){\n        return this.dbManager.getAll(\"projects\")\n    }\n}\nexport default projects;\n```", "```js\nimport projects from \"projects.js\"\nimport dbManager from \"dbManager.js\"\nprojects.dbManager=dbManager;\nprojects.getAllProjects();\n```", "```js\nclass Projects {\n    constructor(dbManager=null){\n        if(!dbManager){\n            throw \"Dependency missing\"\n        }else{\n            this.dbManager=dbManager;\n        }\n    }\n}\n```", "```js\n// Projects are a class\nimport Projects from \"projects.js\"\nimport dbManager from \"dbManager.js\"\ntry{\n    const projects=new Projects(dbManager);\n}catch{\n    // Error handler here\n}\n```", "```js\nimport projects from \"projects.js\"\nimport dbManager from \"dbManager.js\"\nprojects.setDBManager(dbManager);\n```", "```js\nconst dependencyService={                          //1\n    dependencies:{},                               //2\n    provide(name, dependency){                     //3\n        this.dependencies[name]=dependency         //4\n        return this;                               //5\n    },\n    inject(name){                                  //6\n        return this.dependencies[name]??null;      //7\n    }\n}\nexport default dependencyService;\n```", "```js\nimport dependencyService from \"./dependency-injection-6\"\nimport myDependency1 from \"myFile1\"\nimport myDependency2 from \"myFile2\"\nimport dbManager from \"dbManager\"\ndependencyService\n    .provide(\"dependency1\", myDependency1)\n    .provide(\"dependency2\", myDependency2)\n    .provide(\"dbManager\", dbManager)\n```", "```js\nimport dependencyService from \"./dependency-injection-6\"\nconst dbManager=dependencyService.inject(\"dbManager\")\n```", "```js\nfunction createShape(type){\n    switch(type){\n        case \"circle\": return new Circle();\n        case \"square\": return new Square();\n}}\nlet\n    shape1=createShape(\"circle\"),\n    shape2=createShape(\"square\");\nshape1.draw();\nshape2.draw();\n```", "```js\nclass ObserverPattern{\nconstructor(){\n    this.events={}                                             //1\n}\non(event_name, fn=()=>{}){                                     //2\n    if(!this.events[event_name]){\n       this.events[event_name]=[]\n    }\n    this.events[event_name].push(fn)                           //3\n}\nemit(event_name, data){                                        //4\n    if(!this.events[event_name]){\n       return\n    }\nfor(let i=0, l=this.events[event_name].length; i<l; i++){\n    this.events[event_name][i](data)\n}\n}\noff(event_name, fn){                                           //5\n    let i=this.events[event_name].indexOf(fn);\n    if(i>-1){\n        this.events[event_name].splice(i, 1);\n    }\n}\n}\n```", "```js\nimport dispatcher from \"ObserverClass.js\"    //a singleton\ndispatcher.on(\"event_name\", myFunction)\n```", "```js\nimport dispatcher from \"ObserverClass.js\"    //a singleton\ndispatcher.emit(\"event_name\", data)\n```", "```js\ndispatcher.off(\"event_name\", myFunction)\n```", "```js\nclass CommandInvoker{\n    addCommand(command_data){                          //1\n        // .. queue implementation here\n    }\n    runCommand(command_data){                          //2\n        switch(command_data.action){                   //3\n            case \"eat\":\n                // .. invoke the receiver here\n                break;\n            case \"code\":\n                // .. invoke the receiver here\n                break;\n            case \"repeat\":\n                // .. invoke the receiver here\n                break;\n        }\n    }\n}\n```", "```js\nlet temperature={celsius:0,fahrenheit: 32},                    //1\n    handler={                                                  //2\n      set(target, key, value){                                 //3\n         target[key]=value;                                    //4\n    switch(key){\n     case \"celsius\":\n           target.fahrenheit=calculateFahrenheit(value);       //5\n           break;\n    case \"fahrenheit\":\n           target.celsius=calculateCelsius(value);\n         }\n      },\n      get(target, key){\n         return target[key];                                   //6\n      }\n    },\n    degrees=new Proxy(temperature, handler)                    //7\n// Auxiliar functions\nfunction calculateCelsius(fahrenheit){\n    return (fahrenheit - 32) / 1.8\n}\nfunction calculateFahrenheit(celsius){\n    return (celsius * 1.8) + 32\n}\ndegrees.celsius=25                                             //8\nconsole.log(degrees)\n// Prints in the console:\n// {celsius:25, fahrenheit:77}                                 //9\n```", "```js\nconsole.log(getTimeStamp());\n```", "```js\n<script setup>\n    const $props=defineProps(['label'])          //1\n</script>\n<template>\n    <h1>{{$props.label}}</h1>                    //2\n</template>\n<style scoped></style>\n```", "```js\n<script setup>\n    import HeaderH1 from \"./decorator-1.vue\"\n    const $props=defineProps(['label'])                //1\n</script>\n<template>\n    <div style=\"color: purple !important;\">            //2\n        <HeaderH1 :title=\"$props.label+'!!!'\">         //3\n        </HeaderH1>\n    </div>\n</template>\n```", "```js\nF(0)=0\nF(1)=1\nF(n)=F(n-1)+F(n-2), with n>=2\n```", "```js\nfunction FibonacciSync(n, callback){\n    if(n<2){\n       callback(n)\n    } else{\n        let pre_1=0,pre_2=1,value;\n        for(let i=1; i<n; i++){\n           value=pre_1+pre_2;\n           pre_1=pre_2;\n           pre_2=value;\n        }\n        callback(value)\n    }\n}\n```", "```js\nFibonacciSync(8, console.log);\n// Will print 21 to the console\nFibonacciSync(8, alert)\n// Will show a modal with the number 21\n```", "```js\nconsole.log(\"Before\")\nFibonacciSync(9, console.log)\nconsole.log(\"After\")\n// Will output\n// Before\n// 34\n// After\n```", "```js\nfunction FibonacciAsync(n, callback){\n    setImmediate(()=>{\n        if (n<2){\n            callback(n)\n        } else{\n            let pre_1=0,pre_2=1,value;\n            for(let i=1; i<n; i++){\n                value=pre_1+pre_2;\n                pre_1=pre_2;\n                pre_2=value;\n            }\n            callback(value);\n        }\n    })\n}\n```", "```js\nconsole.log(\"Before\")\nFibonacciAsync(9, console.log)\nconsole.log(\"After\")\n// Will output\n// Before\n// After\n// 34\n```", "```js\nfunction FibonacciPromise(n) {\n    return new Promise((resolve, reject) => {          //1\n        if (n < 0) {\n            reject()                                   //2\n        } else {\n             if (n < 2) {\n                 resolve(n)                            //3\n             } else {\n                  let pre_1 = 1, pre_2 = 1, value;\n                  for (let i = 2; i < n; i++) {\n                      value = pre_1 + pre_2;\n                      pre_1 = pre_2;\n                      pre_2 = value;\n                  }\n                  resolve(value);\n             }\n        }\n    })\n}\n```", "```js\nconsole.log(\"Before\")\nFibonacciPromise(9).then(\n    value=>console.log(value),\n    ()=>{console.log(\"Undefined for negative numbers!\")}\n);\nconsole.log(\"After\")\n// Will output:\n// Before\n// After\n// 34\n```", "```js\nMyFunction()\n    .then(()=>{ return new Promise(...)}, ()=>{...})\n    .then(()=>{ return new Promise(...)}, ()=>{...})\n    .then(()=>{ return new Promise(...)}, ()=>{...})\n    .then(()=>{ return new Promise(...)}, ()=>{...})\n    .catch(err=>{...})\n```", "```js\nasync function myProcessFunction() {                  //1\n    try {                                             //2\n         let     a = await MyFuncA(),                 //3\n                 b = await MyFuncB(),\n                 c = await MyFuncC()\n         console.log(a + b + c)                       //4\n    } catch {\n             console.log(\"Error\")\n    }\n}\n// Invoke the function normally\nMyProcessFunction()                                   //5\n```", "```js\nlet a=await MyFuncA()\n```", "```js\nlet a;\nMyFuncA()\n    .then(result=>{ a=result; })\n```", "```js\nlet a,b,c;\nMyFuncA()\n    .then(result=>{ a=result; return MyFuncB()})\n    .then(result=>{ b=result; return MyFuncC()})\n    .then(result=>{ c=result; console.log(a+b+c)})\n```"]