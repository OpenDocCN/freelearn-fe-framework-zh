- en: Chapter 13. Redux and React
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第13章。Redux和React
- en: In the previous chapter, we dived into Flux as an architecture. We saw how problems
    arise during data sharing across components. We saw different parts of this architecture—Actions,
    Stores, Views, and Dispatcher—and build upon our example using pure Flux, Dispatcher
    from Facebook, and EventEmitter. Finally, we built a simple application to see
    how all these components are tied up together to create a simple flow to share
    a common state across components.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们深入探讨了Flux作为架构。我们看到了在组件间共享数据时出现的问题。我们看到了这个架构的不同部分——动作、商店、视图和分发器——并基于我们的纯Flux示例、Facebook的分发器和EventEmitter进行了构建。最后，我们构建了一个简单的应用来查看所有这些组件是如何结合在一起以创建一个简单的流程，在组件间共享公共状态。
- en: In this chapter, we will take a look at using Flux in a popular Flux-based state
    management implementation, **Redux**. We will see how it differs from pure Flux
    implementation that we saw previously. We will take a look at different components
    of Redux—its stores, actions, and reducers for the stores and actions. Finally,
    we will see how an app connects with the store, maintains a single state of the
    store, and passes information around in the views.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨在流行的基于Flux的状态管理实现中如何使用Flux。我们将看到它与之前看到的纯Flux实现有何不同。我们将查看Redux的不同组件——它的商店、动作和reducer。最后，我们将看到应用如何与商店连接，维护商店的单个状态，并在视图中传递信息。
- en: 'We will cover the following topics in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Redux
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Redux
- en: Setting up Redux
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置Redux
- en: Redux store
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Redux商店
- en: Reducers
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Reducers
- en: Connecting stores to app components
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将商店连接到应用组件
- en: Data flow in Redux
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Redux中的数据流
- en: At the end of the chapter, we will be able to start using Redux in our applications
    to maintain the state for the Views. We will be able to set up and connect it
    with different parts of the app. We will be able to see how to distribute data
    in stores and use reducers and actions to manage store' data.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，我们将能够开始在应用中使用Redux来维护视图的状态。我们将能够设置它并与应用的各个部分连接。我们将能够看到如何在商店中分配数据，并使用reducer和actions来管理商店数据。
- en: Redux
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Redux
- en: '"Good morning, Shawn," started Mike.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '"早上好，肖恩，"迈克开始说道。'
- en: '"Good morning, Mike. What are we working on today?"'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '"早上好，迈克。我们今天要做什么？"'
- en: '"Ah, yesterday, we worked with Flux. It was to introduce you to the basics
    of Flux. In most of our projects, we used something similar to it in order to
    manage the state in the apps."'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '"啊，昨天，我们使用了Flux。这是为了向您介绍Flux的基础。在我们的大多数项目中，我们使用了类似的方法来管理应用的状态。"'
- en: '"Today, we will see how to use Redux."'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '"今天，我们将看到如何使用Redux。"'
- en: '"Cool."'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '"酷。"'
- en: '"As stated at [https://github.coktreactjs/redux](https://github.coktreactjs/redux),
    *Redux is a predictable state container for JavaScript apps*. It''s kind of what
    we implemented previously."'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '"正如在[https://github.coktreactjs/redux](https://github.coktreactjs/redux)中所述，*Redux是JavaScript应用的可预测状态容器*。它有点像我们之前实现的那样。"'
- en: '"With Redux, we maintain a single state tree for the complete application and
    add reducers to enhance the state of the store. Previously, we were directly mutating
    the value of `_state` and then notifying the subscribers about the change. Let''s
    take a look at our app setup to get started with, as follows:"'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '"使用Redux，我们为整个应用维护一个单一的状态树，并添加reducer来增强商店的状态。之前，我们直接修改`_state`的值，然后通知订阅者关于变化。让我们看看我们的应用设置，如下开始："'
- en: '`├── actions`'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`├── actions`'
- en: '`│ └── social.js`'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`│ └── social.js`'
- en: '`├── components`'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`├── components`'
- en: '`│ └── SocialTracker.js`'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`│ └── SocialTracker.js`'
- en: '`├── config.js`'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`├── config.js`'
- en: '`├── containers`'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`├── containers`'
- en: '`│ └── App.js`'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`│ └── App.js`'
- en: '`├── reducers`'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`├── reducers`'
- en: '`│ ├── index.js`'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`│ ├── index.js`'
- en: '`│ └── social.js`'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`│ └── social.js`'
- en: '`├── server.js`'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`├── server.js`'
- en: '`├── store`'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`├── store`'
- en: '`│ └── configureStore.js`'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`│ └── configureStore.js`'
- en: '`├── styles`'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`├── styles`'
- en: '`│ └── App.css`'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`│ └── App.css`'
- en: '`├── utils`'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`├── utils`'
- en: This is based on our previous application and example from [https://github.acktreactjs/redux/tree/master/examples/todomvc](https://github.acktreactjs/redux/tree/master/examples/todomvc)."
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '"这是基于我们之前的应用和来自[https://github.acktreactjs/redux/tree/master/examples/todomvc](https://github.acktreactjs/redux/tree/master/examples/todomvc)的示例。"'
- en: '"Umm, I don''t see a dispatcher here."'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '"嗯，我没有在这里看到分发器。"'
- en: '"Correct. Redux deviates from the normal Flux; here, it does not have a dispatcher.
    During the set up, we will see how we connect stores to the components so that
    the components get updates for the changes to state in the store."'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '"正确。Redux与正常的Flux不同；在这里，它没有分发器。在设置过程中，我们将看到如何将商店连接到组件，以便组件能够获取商店状态变化的更新。"'
- en: '"Got it. Let''s begin as before then?"'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '"明白了。那我们就像以前一样开始吧？"'
- en: '"Yup."'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '"是的。"'
- en: '"Let''s start with our Main Component; this will be wrapped to listen to store
    by Redux, as follows:"'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '"让我们从我们的主组件开始；这将通过Redux进行包装以监听存储，如下所示："'
- en: '[PRE0]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Setting up Redux
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置Redux
- en: '"Now, there are different things happening here to set up our store. Let''s
    go through them, one wing:."'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '"现在，这里有一些不同的事情发生来设置我们的存储。让我们逐一来看："'
- en: '`mapStateToProps`: We use this method to define how we are going to map the
    state from the Redux store to the props being sent to the components connected
    to listen to the store. Whenever new changes happen in the store, the components
    get notified and are passed to the object payload from this method.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mapStateToProps`：我们使用这个方法来定义我们将如何将Redux存储的状态映射到发送给连接到存储的组件的props。每当存储中发生新的变化时，组件会收到通知，并通过此方法传递给对象有效载荷。'
- en: '`mapDispatchToProps`: This method is used to map the Actions and pass them
    on the props so that they can be used from within the component.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mapDispatchToProps`：这个方法用于映射动作并将它们传递到props上，以便它们可以在组件内部使用。'
- en: '`bindActionCreators`: This is used to wrap our Actions creator (`SocialActions`)
    into dispatch calls to support calling the actions directly. This helps to call
    the actions and notify the store for updates, which are done due to the dispatch.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bindActionCreators`：这用于将我们的动作创建器（`SocialActions`）包装成分发调用，以支持直接调用动作。这有助于调用动作并通知存储进行更新，这些更新是由于分发而进行的。'
- en: '`connect`: Finally, we have the connect call. This actually connects the React
    component to the store. It does not change the original component, but enhances
    and creates a new one. We can then start using the Actions from our component.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`connect`：最后，我们有`connect`调用。这实际上将React组件连接到存储。它不会改变原始组件，而是增强并创建一个新的组件。然后我们可以开始使用组件中的动作。'
- en: '"Got it. So, we are creating two methods to map how the actions and state from
    Redux should be made available to the component. We are then connecting the store
    to Redux in order to listen to the updates and make the actions and stores available
    to the component when there are updates to the store."'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '"明白了。所以，我们创建了两个方法来映射Redux中的动作和状态如何提供给组件。然后我们将存储连接到Redux以监听更新，并在存储有更新时将动作和存储提供给组件。"'
- en: '"Yup. We are then going to start using this setup in the index, as shown in
    the following code:"'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '"明白了。然后我们将开始在index中使用这个设置，如下面的代码所示："'
- en: '[PRE1]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '"The `Provider` component from the `react-redux` module allows us to connect
    the components to the stores. It accepts a store that we are setting up as the
    initial store state. The `Provider` component makes this store available to the
    components that are connected to hear from the store. This is what we did in our
    previous file by connecting to the store."'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '"来自`react-redux`模块的`Provider`组件允许我们将组件连接到存储。它接受一个我们设置的初始存储状态。`Provider`组件使这个存储对连接到存储的组件可用。这就是我们在上一个文件中通过连接到存储所做的事情。"'
- en: '"Got it. This is where *Redux as a single store* comes into picture, I assume?
    I see that we have a single store that the complete app is going to make use of."'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '"明白了。这就是*Redux作为一个单一存储*出现的地方，对吧？我注意到我们有一个完整的应用程序将要使用的单一存储。"'
- en: '"Yup."'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '"是的。"'
- en: '"Finally, we are going to complete our setup by defining the store that we
    are passing to the `<Provider>` tag, as follows:"'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '"最后，我们将通过定义传递给`<Provider>`标签的存储来完成我们的设置，如下所示："'
- en: '[PRE2]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '"Again, setting up a store requires performing different operations, let''s
    go throuowing:."'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '"再次，设置存储需要执行不同的操作，让我们逐一来看："'
- en: '`createStore`: This creates a store for us to represent the complete state
    tree of the application. It takes in the arguments—the reducer (our reducers that
    we will see shortly) and initial state for the store.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`createStore`：这为我们创建一个存储，以表示应用程序的完整状态树。它接受参数——reducer（我们很快将看到的reducer）和存储的初始状态。'
- en: '`applyMiddleware`: This is used to enhance Redux with middleware. Here, we
    are using the thunk middleware, which allows us to do asynchronous dispatches.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`applyMiddleware`：这用于增强Redux以使用中间件。在这里，我们使用thunk中间件，它允许我们进行异步分发。'
- en: '`configureStore`: Finally, in `configureStore`, we are creating the store by
    calling the enhanced `createStore`: `createStoreWithMiddleware`. We have some
    conditions here to handle the hot module replacement to auto-reload the code changes,
    which we saw in HMR.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`configureStore`：最后，在`configureStore`中，我们通过调用增强的`createStore`：`createStoreWithMiddleware`来创建存储。我们这里有一些条件来处理热模块替换以自动重新加载代码更改，这是我们之前在HMR中看到的。'
- en: '"Got it."'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '"明白了。"'
- en: '"Next, let''s take a look at the following actions:"'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '"接下来，让我们看看以下操作："'
- en: '[PRE3]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '"We are importing the following code:"'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '"我们正在导入以下代码："'
- en: '[PRE4]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `JSONUtil` and `ArrayUtil` class as before. I have moved them to use the
    classes instead of modules."
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '"与之前一样，`JSONUtil`和`ArrayUtil`类。我已经将它们移动到使用类而不是模块。"'
- en: '"The code for `ArrayUtil` class is as follows:"'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '"`ArrayUtil`类的代码如下："'
- en: '[PRE5]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '"The code for `JSONUtil` class is as follows:"'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '"`JSONUtil`类的代码如下："'
- en: '[PRE6]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '"Now, instead of the actions object that we defined before, we will define
    the actions as constants that we are going to refer acrosscommand:."'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '"现在，我们将定义动作作为常量，而不是之前定义的动作对象，我们将跨命令引用它们。"'
- en: '[PRE7]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '"For other methods, we define the methods simply as follows:"'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '"对于其他方法，我们简单地定义方法如下："'
- en: '[PRE8]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '"Similar to our previous implementation, we wrap and return the payload that
    will be used by the reducer to mutate the store."'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '"类似于我们之前的实现，我们包装并返回将用于reducer以突变存储的负载。"'
- en: '"In case of fetching data from the API, we wrap the actual calls in `dispatch`,
    as follows:"'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '"在从API获取数据的情况下，我们将实际的调用包装在`dispatch`中，如下所示："'
- en: '[PRE9]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '"Here, we are dispatching thods ious manner and they will get chained and called
    when the results are returned. As we saw previously, when we call the following
    method from `SocialActions`, which we wrapped in the dispatch calls to notify
    the store:"'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '"在这里，我们以不同的方式分发方法，它们将在结果返回时被链式调用和调用。正如我们之前看到的，当我们从`SocialActions`调用以下方法，我们将其包装在dispatch调用中以通知存储时："'
- en: '[PRE10]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '"In the preceding method, as it''s not wrapped by default, we will wrap the
    methods inside `fetchTweets` in the `dispactch()` calls. We will also wrap the
    following code:"'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '"在先前的方法中，因为它默认没有包装，所以我们将`fetchTweets`中的方法包装在`dispatch()`调用中。我们还将以下代码包装起来："'
- en: '[PRE11]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '"After a response is received, we will call syncTweets that also notifies the
    Redux store."'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '"在收到响应后，我们将调用syncTweets，它也会通知Redux存储。"'
- en: '"Got it. Next, we should see the reducer, I guess?"'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '"明白了。接下来，我们应该看到reducer，我想？"'
- en: '"Yup, let''s take a look at it:"'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '"是的，让我们看看它："'
- en: '[PRE12]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '"We already saw `mergeFeed` before. Similar to moving to classes, I moved the
    implementation to ES6\. The logic for determining the feed is as before, we will
    accept Twitter and Reddit feeds and `showReddit`/`showTwitter` flags to determine
    how to construct the feed."'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '"我们之前已经看到了`mergeFeed`。类似于迁移到类中，我将实现迁移到了ES6。确定feed的逻辑与之前相同，我们将接受Twitter和Reddit的feed以及`showReddit`/`showTwitter`标志来决定如何构建feed。"'
- en: '"Now, the peculiar method is as follows:"'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '"现在，特殊的方法如下："'
- en: '[PRE13]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '"The reducer gets called for action dispatches. It receives the previous state
    in state and action payload in action. The state, as you can see here, has a default
    value."'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '"reducer在动作分发时被调用。它接收状态中的上一个状态和在动作中的动作负载。如您所见，状态有一个默认值。"'
- en: '"Now, based on the action payload, we will determine what needs to be run with
    the data, just as we did earlier:"'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '"现在，根据动作负载，我们将确定需要使用数据运行什么，就像我们之前做的那样："'
- en: '[PRE14]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '"The difference here is that we are not mutating the state directly. Based
    on the previous state, we merge the previous and current computed state, based
    on the action type and return it."'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '"这里的区别是我们没有直接突变状态。根据之前的状态，我们基于动作类型合并了之前和当前的计算状态，并返回它。"'
- en: '"This is now the current state of the app."'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '"这是现在应用程序的当前状态。"'
- en: '"Got it, I believe. All that we are left with is the app now."'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '"明白了，我相信。我们现在只剩下应用程序了。"'
- en: '"Yup, let''s see how it will be. I have changed to use class as well."'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '"是的，让我们看看它会如何。我已经改为使用类。"'
- en: '[PRE15]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '"So, we start by setting the local state to manage the Twitter user and Reddit
    us as follows:."'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '"所以，我们首先将本地状态设置为管理Twitter用户和Reddit用户，如下所示："'
- en: '[PRE16]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '"In the `render` method, we fetch the values (the store) that are being passed
    down as props by Redux to the component in order to be displayed:"'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '"在`render`方法中，我们获取Redux传递给组件作为props的值（即存储），以便显示："'
- en: '[PRE17]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '"Now, if you recall the following:"'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '"现在，如果你还记得以下内容："'
- en: '[PRE18]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '"We are converting the state from Redux to pass the social object store from
    Redux as a prop to the component. We are then fetching the values such as `showTweets`,
    `showReddits`, and so on from the social prop value."'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '"我们将从Redux将状态转换为传递社交对象存储作为props到组件。然后我们从社交prop值获取诸如`showTweets`、`showReddits`等值。"'
- en: '"Similarly, we have the following code:"'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '"同样，我们有以下代码："'
- en: '[PRE19]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '"This converts the actions and passes them down as the props. We are receiving
    them as `filterTweets` and `filterReddits` on props. We then meof these actions
    as the `onclock` event handler, as follows:"'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '"这会将动作转换为props并传递下去。我们接收它们作为`filterTweets`和`filterReddits`在props上。然后我们将这些动作作为`onclick`事件处理器，如下所示："'
- en: '[PRE20]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '"Finally, we have the display of the feed itself by fetching the values from
    the props in the same way:"'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '"最后，我们通过从相同的 props 中获取值来显示数据源本身："'
- en: '[PRE21]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '"We will fetch the feed from the social prop being passed to us, as follows:"'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '"我们将从传递给我们的社交 prop 中获取数据源，如下："'
- en: '[PRE22]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '"Finally, to sync the contents we have the following code:"'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '"最后，为了同步内容，我们有以下代码："'
- en: '[PRE23]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '"Awesome. I guess that with this, we are done!"'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '"太棒了。我想，有了这个，我们就完成了！"'
- en: '"Yup. Would you like to recap the setup?"'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '"是的。你想回顾一下设置过程吗？"'
- en: '"Sure. We started by setting up how we want to map the actions and stores to
    the props being sent to the components. We then set up the store and connect it
    to the component."'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '"当然。我们首先设置了我们想要将 actions 和 stores 映射到传递给组件的 props 的方式。然后我们设置了 store 并将其连接到组件。"'
- en: '"To set up the store, we made use of and applied the thunk middleware module
    to enhance Redux in order to allow us to dispatch the actions asynchronously."'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '"为了设置 store，我们使用了并应用了 thunk 中间件模块来增强 Redux，以便我们可以异步地分发 actions。"'
- en: '"We then created actions to be called from the component and wrap the payloads
    and action type to be delivered to the store."'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '"然后我们创建了从组件中调用的 actions，并将有效载荷和动作类型包装起来，以便发送到 store。"'
- en: '"We also created the reducers—social reducer—to actually manipulate, create,
    and return new Redux states."'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '"我们还创建了 reducers——社交 reducer——来实际操作、创建并返回新的 Redux 状态。"'
- en: '"That''s right! Let''s take a look at how it looks, shall we?"'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '"没错！让我们看看它看起来怎么样，好吗？"'
- en: '![Setting up Redux](img/4730_13_01.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![设置 Redux](img/4730_13_01.jpg)'
- en: '"Awesome! Carla is going to love this."'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '"太棒了！卡拉一定会喜欢这个的。"'
- en: Summary
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We took a look at using Redux and setting it up. We saw how it differs from
    pure Flux implementation that we saw previously. We took a look at different components
    of Redux—its stores, actions, and reducers for the stores and actions. Finally,
    we saw how the app connects with the store and we make use of actions and data
    provided to the component via props.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们查看了一下使用 Redux 和设置它的方法。我们看到了它与之前看到的纯 Flux 实现的不同之处。我们查看了一下 Redux 的不同组件——它的 stores、actions
    以及用于 stores 和 actions 的 reducers。最后，我们看到了应用如何与 store 连接，以及我们如何通过 props 使用 actions
    和数据。
