["```js\n$ mkdir chapter08\n$ cd chapter08\n```", "```js\n$ pnpm init\n```", "```js\n# pnpm-workspace.yaml\npackages:\n  - 'packages/*'\n  - 'apps/*'\n```", "```js\n$ mkdir apps\n$ cd apps\n```", "```js\n$ pnpm dlx nuxi@latest init demo-website\n```", "```js\n// apps/demo-website/package.json\n{\n  \"name\": \"demo-website\"\n  // ...rest of the file\n}\n```", "```js\n$ pnpm --filter demo-website dev\n```", "```js\n// package.json\n{\n  \"scripts\": {\n    \"website:dev\": \"pnpm --filter demo-website dev\"\n  },\n}\n```", "```js\n$ pnpm website:dev\n```", "```js\n$ mkdir packages\n$ cd packages\n```", "```js\n$ pnpm dlx nuxi init -t module translation\n```", "```js\nimport { defineNuxtModule, addPlugin, createResolver } from '@nuxt/kit'\nexport interface ModuleOptions {}\nexport default defineNuxtModule<ModuleOptions>({\n  meta: {\n    name: 'my-module',\n    configKey: 'myModule',\n  },\n  defaults: {},\n  setup(_options, _nuxt) {\n    const resolver = createResolver(import.meta.url)\n    addPlugin(resolver.resolve('./runtime/plugin'))\n  },\n})\n```", "```js\n// packages/translation/src/module.ts\nexport default defineNuxtModule<ModuleOptions>({  meta: {\n    name: 'translation',\n    configKey: 'translation'\n  }\n  // … rest of code\n})\n```", "```js\n// packages/translation/package.json\n{\n  \"name\": \"translation\",\n  // Rest of configuration\n}\n```", "```js\nPackages/translation> $ pnpm dev:prepare\n```", "```js\n$ pnpm --filter demo-website add --workspace translation\n```", "```js\n// apps/demo-website/package.json\n{\n  \"dependencies\": {\n    \"nuxt\": \"^3.11.2\",\n    \"translation\": \"workspace:^\",\n    \"vue\": \"^3.4.21\",\n    \"vue-router\": \"^4.3.0\"\n  }\n}\n```", "```js\n// apps/demo-website/nuxt.config.ts\nexport default defineNuxtConfig({\n  devtools: { enabled: true },\n  modules: ['translation'],\n})\n```", "```js\n$ pnpm website:dev\n```", "```js\n// packages/translation/src/types.ts\nexport type ModuleOptions = {\n  defaultLocale: string;\n  locales?: LocaleOption[];\n};\nexport type LocaleOption = {\n  name: string;\n  file: string;\n};\n```", "```js\n// module.ts\nimport type { ModuleOptions } from './types';\nexport default defineNuxtModule<ModuleOptions>({\n  meta: {\n    name: 'translation',\n    configKey: 'translation',\n  },\n  defaults: {\n    defaultLocale: 'en',\n    locales: [],\n  },\n  setup(options, nuxt) {\n    // Module setup logic here\n  },\n});\n```", "```js\n// nuxt.config.ts\nexport default defineNuxtConfig({\n  devtools: { enabled: true },\n  modules: ['translation'],\n  translation: {},\n})\n```", "```js\n    // apps/demo-website/locales/en.json\n    {\n      \"welcome\": \"Welcome\"\n    }\n    ```", "```js\n    // apps/demo-website/locales/fr.json\n    {\n      \"welcome\": \"Bienvenue\"\n    }\n    ```", "```js\n// nuxt.config.ts\nexport default defineNuxtConfig({\n  // other options\n  translation: {\n    locales: [\n      { name: 'en', file: 'locales/en.json' },\n      { name: 'fr', file: 'locales/fr.json' },\n    ],\n  },\n})\n```", "```js\n// packages/translation/types.ts\n// other types\nexport type Messages = {\n  [key: string]: string;\n};\n```", "```js\n// packages/translation/module.ts\nimport { readFileSync } from 'node:fs'\nimport { defineNuxtModule, createResolver } from '@nuxt/kit'\nimport type { Messages, ModuleOptions } from './types'\nexport default defineNuxtModule<ModuleOptions>({\n  meta: {\n    name: 'translation',\n    configKey: 'translation',\n  },\n  defaults: {\n    defaultLocale: 'en',\n  },\n  async setup(options, nuxt) {\n    const localesResolver =\n      createResolver(nuxt.options.srcDir)\n    const messages: Messages = {}\n    for (const locale of options.locales ?? []) {\n      const filePath = localesResolver.resolve(locale.file)\n      const fileContents = await readFileSync(filePath,\n        'utf-8')\n      const _messages = JSON.parse(fileContents)\n      messages[locale.name] = _messages\n    }\n    nuxt.options.runtimeConfig.public.translation = {\n      ...options,\n      messages,\n    }\n  }\n});\n```", "```js\n<!-- apps/demo-website/app.vue -->\n<template>\n  <div>{{ translation }}</div>\n</template>\n<script setup lang=\"ts\">\nconst config = useRuntimeConfig();\nconst translation = config.public.translation;\n</script>\n```", "```js\nimport { computed, useCookie, useRuntimeConfig } from '#imports'\nexport default () => {\n  const config = useRuntimeConfig()\n  const translation = config.public.translation\n  const locale = useCookie('defaultLocale')\n  const locales = translation.locales\n  if (!locale.value) locale.value =\n    translation.defaultLocale\n  const messages = computed(() => {\n    const key = locale.value || translation.defaultLocale\n    return translation.messages[key]\n  })\n  return { locale, locales, messages }\n}\n```", "```js\nimport { defineNuxtModule, createResolver, addImportsDir } from '@nuxt/kit';\nexport default defineNuxtModule({\n  meta: {\n    name: 'translation',\n    configKey: 'translation',\n  },\n  setup(options, nuxt) {\n    // Existing setup code...\n    const resolver = createResolver(import.meta.url);\n    addImportsDir(resolver.resolve('runtime/composables'));\n  }\n});\n```", "```js\n<template>\n  {{ messages.welcome }}\n</template>\n<script setup lang=\"ts\">\nconst { messages } = useTranslation();\n</script>\n```", "```js\n// nuxt.config.ts\nexport default defineNuxtConfig({\n  translation: {\n    defaultLocale: 'fr',\n    locales: [\n      { name: 'en', file: 'locales/en.json' },\n      { name: 'fr', file: 'locales/fr.json' }\n    ]\n  }\n});\n```", "```js\nimport useTranslation from '../composables/useTranslation'\nimport { defineNuxtPlugin } from '#imports'\nexport default defineNuxtPlugin(async () => {\n  const { messages } = useTranslation()\n  // Translator function\n  const t = (key: string) => {\n    return messages.value[key] || key  // Return the\n                                          translated string\n                                          or key if not\n                                          found\n  }\n  return {\n    provide: { t }\n  }\n})\n```", "```js\nimport {\n  defineNuxtModule,\n  addPlugin,\n  createResolver,\n  addImportsDir,\n} from '@nuxt/kit'\nexport default defineNuxtModule({\n  setup(_options, nuxt) {\n   // …previous setup\n    addPlugin(resolver.resolve('./runtime/plugins/translate'))\n  },\n})\n```", "```js\n<template>\n  <div>{{ $t('welcome') }}</div>\n</template>\n```", "```js\n$ pnpm --filter translation add @nuxt/ui\n```", "```js\nexport default defineNuxtModule({\n  async setup(_options, nuxt) {\n  // other configuration\n    if (!hasNuxtModule('@nuxt/ui')) {\n      await installModule('@nuxt/ui')\n    }\n    const resolver = createResolver(import.meta.url)\n    addComponentsDir({\n      path: resolver.resolve('runtime/components')\n    })\n  }\n})\n```", "```js\n<template>\n  <USelectMenu\n    v-model=\"locale\"\n    :options=\"locales\"\n    value-attribute=\"name\"\n    option-attribute=\"name\"\n  />\n</template>\n<script setup lang=\"ts\">\nimport useTranslation from '../composables/useTranslation'\nconst { locale, locales } = useTranslation()\n</script>\n```", "```js\n$ pnpm --filter translation dev:prepare\n```", "```js\n<!-- apps/demo-website/app.vue -->\n<template>\n  <div>{{ $t('welcome') }}</div>\n  <LanguageSwitcher />\n</template>\n```"]