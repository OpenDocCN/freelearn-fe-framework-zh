- en: '10'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '10'
- en: Integration Testing in Vue.js 3
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Vue.js 3中的集成测试
- en: In the previous chapter, we learned about everything related to unit testing.
    We learned how to unit-test a Vue.js 3 component and the components and pages’
    methods. We also learned about unit testing tools such as Jest and Mocha and used
    them to effectively unit-test an enterprise project.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了与单元测试相关的所有内容。我们学习了如何对Vue.js 3组件及其组件和页面的方法进行单元测试。我们还学习了单元测试工具，如Jest和Mocha，并使用它们有效地对企业的项目进行单元测试。
- en: In this chapter, we will explore everything related to integration testing.
    We will learn in depth how to perform an integration test on a Vue.js 3 component
    and pages. We will also learn about integration testing tools such as Vue Test
    Library ([https://github.com/testing-library/vue-testing-library](https://github.com/testing-library/vue-testing-library))
    and how to use them to test an enterprise project effectively.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨与集成测试相关的所有内容。我们将深入了解如何在Vue.js 3组件和页面上执行集成测试。我们还将了解集成测试工具，如Vue Test
    Library ([https://github.com/testing-library/vue-testing-library](https://github.com/testing-library/vue-testing-library))，以及如何有效地使用它们来测试企业项目。
- en: 'We will cover the following key topics in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下关键主题：
- en: Introduction to integration testing
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成测试简介
- en: What is integration testing?
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是集成测试？
- en: Importance of integration testing
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成测试的重要性
- en: Benefits of integration testing
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成测试的好处
- en: Best practices when creating integration tests
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建集成测试的最佳实践
- en: JavaScript integration testing
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript集成测试
- en: Testing a basic Vue app
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试基本的Vue应用
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To get started with this chapter, I recommend you read through [*Chapter 9*](B17237_09.xhtml#_idTextAnchor322),
    *Best Practices in Unit Testing*, where we explored the benefits, importance,
    and best practices in writing and executing effective unit testing strategies.
    We will rely heavily on the knowledge acquired from that chapter in this one to
    learn about Vue 3 enterprise integration testing.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始本章的学习，我建议您阅读[*第9章*](B17237_09.xhtml#_idTextAnchor322)，*单元测试的最佳实践*，其中我们探讨了编写和执行有效的单元测试策略的好处、重要性和最佳实践。我们将在这个章节中大量依赖从那一章中获得的知识，来学习Vue
    3企业集成测试。
- en: All the code files for this chapter can be found at [https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications/tree/chapter-10](https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications/tree/chapter-10).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的所有代码文件都可以在[https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications/tree/chapter-10](https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications/tree/chapter-10)找到。
- en: Introduction to integration testing
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集成测试简介
- en: Engineers in a team develop applications in isolation, and after development
    and unit testing each unit during development, the next phase in the software
    testing phase is integration testing. This form of testing involves testing the
    modules/components when they are combined/integrated to make sure that they work
    according to the requirement.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 团队中的工程师在开发过程中独立开发应用程序，并在开发过程中对每个单元进行开发和单元测试后，软件测试阶段的下一阶段是集成测试。这种测试形式涉及在模块/组件组合/集成时测试它们，以确保它们符合要求。
- en: It is a type of testing where the units of software modules are integrated logically
    and tested completely as a group.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 它是一种测试类型，其中软件模块的单元逻辑上集成并作为一个整体进行完全测试。
- en: In this section, we will examine the definition of integration testing and explore
    how developers can create and manage integration test cases within their enterprise-ready
    Vue 3 application.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将检查集成测试的定义，并探讨开发者在他们的企业级Vue 3应用程序中如何创建和管理集成测试用例。
- en: What is integration testing?
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是集成测试？
- en: Integration testing is a type of testing in which the different units, modules,
    or components of the **software under test** (**SUT**) are combined and tested
    as a single entity. In addition, these modules or units are independent of the
    developers or team and can be coded by different programmers.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 集成测试是一种测试类型，其中被测试软件（**SUT**）的不同单元、模块或组件被组合并作为一个单一实体进行测试。此外，这些模块或单元独立于开发人员或团队，可以由不同的程序员编写。
- en: It is also known as component testing or **integration and** **testing** (**I&T**).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 它也被称为组件测试或**集成与测试**（**I&T**）。
- en: Integration testing is the first stage of combining individual modules to form
    components or combined entities, and it is aimed at testing the interfaces between
    the modules to expose any defects that may arise when these components are integrated
    and interact with each other.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 集成测试是将单个模块组合成组件或组合实体的第一阶段，其目的是测试模块之间的接口，以暴露在组件集成和交互时可能出现的任何缺陷。
- en: In the next section, we will examine the importance and benefits of integration
    testing for agile and enterprise-level teams.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨集成测试对敏捷和企业管理团队的重要性及好处。
- en: Importance of integration testing
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 集成测试的重要性
- en: 'Integration testing is a critical phase of the software testing process. It
    is the process of testing the interactions and interfaces between different components
    or modules of a system. It is important for several reasons:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 集成测试是软件测试过程中的一个关键阶段。它是测试系统不同组件或模块之间交互和接口的过程。它有几个重要原因：
- en: It helps to ensure that different system components work together seamlessly
    and as expected
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有助于确保不同的系统组件能够无缝且按预期协同工作
- en: It helps to identify and resolve conflicts between different system components
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有助于识别和解决不同系统组件之间的冲突
- en: It helps to identify and resolve bugs that may not have been uncovered during
    unit testing
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有助于识别和解决在单元测试中可能未发现的错误
- en: It helps to identify and resolve performance bottlenecks that may not have been
    uncovered during unit testing
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有助于识别和解决在单元测试中可能未被发现的表现瓶颈
- en: It helps ensure the system can handle the expected load and usage patterns
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有助于确保系统可以处理预期的负载和使用模式
- en: It helps ensure the system is secure and can protect sensitive data
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有助于确保系统安全并能保护敏感数据
- en: It helps to ensure that the system can be integrated with other systems or external
    components
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有助于确保系统可以与其他系统或外部组件集成
- en: It helps to ensure that the system meets the requirements and specifications
    defined in the design phase
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有助于确保系统满足设计阶段定义的要求和规范
- en: It helps to identify and resolve issues with data flow and data integrity between
    different system components
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有助于识别和解决不同系统组件之间数据流和数据完整性的问题
- en: It can help to identify and resolve issues with **user interfaces** (**UIs**)
    and user interactions between different system components
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以帮助识别和解决不同系统组件之间**用户界面**（**UIs**）和用户交互的问题
- en: It can help to identify and resolve issues with third-party APIs and services
    that the system may need to interact with
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以帮助识别和解决系统可能需要交互的第三方API和服务的问题
- en: It can help ensure the system can handle different environments and configurations,
    such as different operating systems or different hardware configurations
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以帮助确保系统可以处理不同的环境和配置，例如不同的操作系统或不同的硬件配置
- en: It can help ensure the system is compatible with other systems it may need to
    interact with, such as databases or external services
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以帮助确保系统与其可能需要交互的其他系统兼容，例如数据库或外部服务
- en: Overall, integration testing is an essential step in the software development
    process that helps to ensure the quality and reliability of the final product.
    It is important to conduct integration testing early in the development process
    so that any issues can be identified and resolved as soon as possible.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，集成测试是软件开发过程中的一个关键步骤，有助于确保最终产品的质量和可靠性。在开发早期进行集成测试很重要，以便尽快识别和解决问题。
- en: It’s also important to note that integration testing is not limited to testing
    between the different components of the system. It also includes testing the system
    as a whole with other external systems it will integrate with. It’s good practice
    to test the integration of the system with other systems before releasing it to
    production.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 还需要注意的是，集成测试不仅限于测试系统不同组件之间的交互。它还包括测试系统作为一个整体与其他将与之集成的外部系统。在将系统投入生产之前测试其与其他系统的集成是一个好的实践。
- en: In the next section, let’s look at some of the benefits of integration testing.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨集成测试的一些好处。
- en: Benefits of integration testing
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 集成测试的好处
- en: Integration testing is particularly important for enterprise software systems,
    as they are often complex, multi-faceted systems that need to integrate with other
    systems and handle large amounts of data and transactions. Some of the benefits
    of integration testing for enterprise software include the following.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 集成测试对于企业软件系统尤为重要，因为它们通常是复杂、多方面的系统，需要与其他系统集成并处理大量数据和交易。集成测试对企业软件的一些益处包括以下内容。
- en: Improved system reliability
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提高系统可靠性
- en: By testing the interactions and interfaces between different components of the
    system, integration testing helps to ensure that the system is reliable and can
    handle the expected load and usage patterns. This can help to reduce downtime
    and improve the system’s overall performance.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 通过测试系统不同组件之间的交互和接口，集成测试有助于确保系统可靠，并能处理预期的负载和使用模式。这有助于减少停机时间并提高系统的整体性能。
- en: Reduced risk of data loss
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 降低数据丢失风险
- en: Enterprise systems often handle large amounts of sensitive data, and integration
    testing can help ensure that data is properly protected and that data integrity
    is maintained between different system components.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 企业系统通常处理大量敏感数据，集成测试有助于确保数据得到适当保护，并在不同系统组件之间保持数据完整性。
- en: Increased scalability
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提高可扩展性
- en: Integration testing can help to identify and resolve performance bottlenecks
    that may not have been uncovered during unit testing, making it easier to scale
    the system as needed.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 集成测试有助于识别和解决单元测试期间可能未被发现的表现瓶颈，使得根据需要扩展系统变得更加容易。
- en: Improved security
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提高安全性
- en: Integration testing can help to ensure that the system is secure and can protect
    sensitive data, reducing the risk of data breaches and other security incidents.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 集成测试有助于确保系统安全并能保护敏感数据，降低数据泄露和其他安全事件的风险。
- en: Better integration with other systems
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更好地与其他系统集成
- en: Testing a system’s integration with other systems before it is released to production
    can help to ensure that the system is compatible and able to communicate with
    other systems that it may need to interact with.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在系统发布到生产之前对其进行与其他系统的集成测试，可以帮助确保系统兼容，并能与其他系统进行通信，这些系统可能是它需要交互的。
- en: Better compliance
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更好的合规性
- en: By conducting integration testing, you can ensure that the system meets the
    requirements and specifications defined in the design phase, which can help to
    ensure compliance with industry standards and regulations.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 通过进行集成测试，你可以确保系统满足设计阶段定义的要求和规范，这有助于确保符合行业标准法规。
- en: Better customer satisfaction and ROI
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更好的客户满意度和ROI
- en: By ensuring that the system is reliable, secure, and easy to use, integration
    testing can help to improve customer satisfaction and increase system adoption.
    Ensuring that all the system components are working seamlessly and without bugs
    can help to reduce development costs, improve the system’s performance, and increase
    the overall **return on investment** (**ROI**) of the system.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 通过确保系统可靠、安全且易于使用，集成测试有助于提高客户满意度和增加系统采用率。确保所有系统组件无缝且无错误地工作，有助于降低开发成本，提高系统性能，并增加系统的整体**投资回报率**（ROI）。
- en: Improved testing efficiency
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提高测试效率
- en: Integration testing can identify issues early in the development process, which
    can help to reduce the overall time and cost of testing.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 集成测试可以在开发早期阶段识别问题，这有助于减少测试的整体时间和成本。
- en: Improved software quality
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提高软件质量
- en: By thoroughly testing the interactions and interfaces between different components
    of the system, integration testing can help to ensure that the software is of
    high quality and free of defects.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 通过彻底测试系统不同组件之间的交互和接口，集成测试有助于确保软件质量高且无缺陷。
- en: Improved team collaboration
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提高团队协作
- en: Integration testing often involves collaboration between different teams, such
    as development, testing, and operations teams. This can help to improve communication
    and collaboration between teams and ensure that the system is developed and tested
    to meet the needs of all stakeholders.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 集成测试通常涉及不同团队之间的协作，如开发、测试和运维团队。这有助于改善团队间的沟通和协作，并确保系统开发和测试满足所有利益相关者的需求。
- en: Improved documentation
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提高文档质量
- en: The integration testing process can lead to better documentation of test cases
    and test results, which can be used to improve the system and for future reference.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 集成测试过程可以导致更好的测试用例和测试结果记录，这些记录可用于改进系统并供未来参考。
- en: Improved business continuity
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 改进业务连续性
- en: By ensuring that the system is reliable and can handle the expected load and
    usage patterns, integration testing can help to ensure that the system can continue
    to operate in case of unexpected events, such as hardware failures or power outages,
    which can help to improve business continuity and minimize disruption.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 通过确保系统可靠并能处理预期的负载和用法模式，集成测试可以帮助确保系统在意外事件（如硬件故障或停电）发生时能够继续运行，这有助于提高业务连续性和最小化中断。
- en: Improved data governance
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 改进数据治理
- en: By thoroughly testing the interactions and interfaces between different system
    components, integration testing can help ensure that data is properly protected
    and that data integrity is maintained between different components of the system,
    which can help improve data governance and compliance with data protection regulations.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 通过彻底测试不同系统组件之间的交互和接口，集成测试可以帮助确保数据得到适当保护，并在系统的不同组件之间保持数据完整性，这有助于提高数据治理和符合数据保护法规。
- en: In this section, we explored the benefits of integration testing to enterprise
    projects and how it improves development teams’ workflows. In the next section,
    we will learn about some of the best practices to put in place during integration
    testing.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们探讨了集成测试对企业项目的益处以及它是如何改善开发团队工作流程的。在下一节中，我们将了解在集成测试期间应实施的一些最佳实践。
- en: Best practices when creating integration tests
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建集成测试的最佳实践
- en: Now let’s look are some best practices for creating effective integration tests.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看创建有效集成测试的一些最佳实践。
- en: Starting early
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 早期开始
- en: Integration testing should be started as early as possible in the development
    process, ideally during the design phase. This will help to identify and resolve
    issues early on and ensure that the system is developed and tested to meet the
    needs of all stakeholders.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 集成测试应尽可能早地在开发过程中开始，理想情况下在设计阶段。这将有助于尽早识别和解决问题，并确保系统开发和测试满足所有利益相关者的需求。
- en: Defining clear objectives
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 明确定义目标
- en: Before starting integration testing, it’s important to define the objectives
    of the testing clearly. This includes identifying what the system is supposed
    to do, the system’s interfaces and interactions, and the expected outcomes.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始集成测试之前，明确测试目标是至关重要的。这包括确定系统应该做什么，系统的接口和交互，以及预期的结果。
- en: Creating a test plan
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 制定测试计划
- en: Create a test plan that outlines the scope of the testing, the test cases to
    be executed, and the resources and tools needed. The test plan should also include
    a schedule for testing, including when testing will be completed and when the
    results will be reviewed.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 制定一个测试计划，概述测试范围、要执行的测试用例以及所需资源和工具。测试计划还应包括测试时间表，包括何时完成测试以及何时审查结果。
- en: Using a modular approach
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 采用模块化方法
- en: Divide the system into smaller, more manageable modules and test them separately.
    This will help to identify and resolve issues more quickly and efficiently.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 将系统划分为更小、更易于管理的模块，并分别进行测试。这将有助于更快、更有效地识别和解决问题。
- en: Using automated testing
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用自动化测试
- en: Automated testing can help to improve testing efficiency and reduce the time
    and cost of testing. Automated testing can also be used to test the system under
    different conditions, such as different environments and configurations.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化测试可以帮助提高测试效率，并减少测试的时间和成本。自动化测试还可以用于在不同条件下测试系统，如不同的环境和配置。
- en: Testing the system as a whole
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对整个系统进行测试
- en: Test the system as a whole with the other external systems it will integrate
    with; this will ensure that the system is compatible and able to communicate with
    other systems that it may need to interact with.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 将系统作为一个整体与其他将与之集成的外部系统进行测试；这将确保系统兼容，并能与其他可能需要交互的系统进行通信。
- en: Testing for security vulnerabilities
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试安全漏洞
- en: Test the system for security vulnerabilities, such as SQL injection or cross-site
    scripting attacks. This will help ensure the system is secure and can protect
    sensitive data.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 测试系统是否存在安全漏洞，如SQL注入或跨站脚本攻击。这将有助于确保系统安全并保护敏感数据。
- en: Testing for performance bottlenecks
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试性能瓶颈
- en: Test the system for performance bottlenecks and identify and resolve any issues
    that may arise. This will help ensure the system can handle the expected load
    and usage patterns.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 测试系统以发现性能瓶颈，并识别和解决可能出现的任何问题。这将有助于确保系统可以处理预期的负载和用法模式。
- en: Documenting and reviewing the results
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 记录和审查结果
- en: Document the results of the testing, including any issues that were identified
    and how they were resolved. Review the results and use them to improve the system
    and the testing process.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 记录测试结果，包括识别出的问题及其解决方法。审查结果并利用它们来改进系统和测试过程。
- en: Continuously testing and monitoring
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 持续测试和监控
- en: Continuously test and monitor the system after it’s been released to production;
    this will help to ensure that the system is reliable and that any issues are identified
    and resolved quickly.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在系统发布到生产后，持续测试和监控系统；这将有助于确保系统的可靠性，并快速识别和解决任何问题。
- en: In this section, we explored the best practices to put in place when making
    use of integration testing into an enterprise. In the next section, we will learn
    how to implement integration testing within the demo project using JavaScript.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们探讨了在企业中使用集成测试时应实施的最佳实践。在下一节中，我们将学习如何在演示项目中使用 JavaScript 实现集成测试。
- en: JavaScript integration testing
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JavaScript 集成测试
- en: There are several tools that can be used to perform integration testing in JavaScript.
    Some popular choices include the following.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种工具可以用于在 JavaScript 中执行集成测试。以下是一些流行的选择。
- en: Mocha
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Mocha
- en: Mocha is a widely used JavaScript testing framework well suited for integration
    testing. It is highly customizable and can be used in conjunction with other libraries,
    such as Chai and Sinon, to perform various types of testing.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: Mocha 是一个广泛使用的 JavaScript 测试框架，非常适合集成测试。它高度可定制，可以与其他库一起使用，例如 Chai 和 Sinon，以执行各种类型的测试。
- en: Cypress
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Cypress
- en: Cypress is a JavaScript-based end-to-end testing framework that can be used
    for integration testing. It allows developers to test the entire flow of an application
    from the user’s perspective, and it has built-in support for real-time debugging,
    automatic waiting, and time-traveling.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: Cypress 是一个基于 JavaScript 的端到端测试框架，可用于集成测试。它允许开发者从用户的角度测试应用程序的整个流程，并具有内置的实时调试、自动等待和时间旅行支持。
- en: TestCafe
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: TestCafe
- en: TestCafe is an end-to-end testing tool that runs on top of Node.js. It allows
    you to run tests in a real browser and is easy to set up and use. It also offers
    the ability to test the UI of your application, which is useful in integration
    testing.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: TestCafe 是一个运行在 Node.js 之上的端到端测试工具。它允许您在真实浏览器中运行测试，易于设置和使用。它还提供了测试应用程序 UI 的能力，这在集成测试中非常有用。
- en: Selenium
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Selenium
- en: Selenium is a browser automation tool that can be used for integration tests
    for web applications. Selenium WebDriver allows you to interact with web browsers
    and perform tasks such as clicking buttons, filling out forms, and navigating
    through pages.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium 是一个浏览器自动化工具，可用于 Web 应用程序的集成测试。Selenium WebDriver 允许您与网络浏览器交互并执行诸如点击按钮、填写表单和浏览页面等任务。
- en: Vue Test Utils
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Vue Test Utils
- en: Vue Test Utils is an official testing library provided by the Vue.js team. It
    is a lightweight library that provides a set of utilities for testing Vue components.
    It can be used in conjunction with other testing frameworks, such as Jest or Mocha,
    to perform integration testing.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: Vue Test Utils 是 Vue.js 团队提供的官方测试库。它是一个轻量级的库，提供了一组用于测试 Vue 组件的实用工具。它可以与其他测试框架一起使用，例如
    Jest 或 Mocha，以执行集成测试。
- en: Avoriaz
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Avoriaz
- en: Avoriaz is a testing library specifically designed for Vue.js components. It
    provides a set of tools for testing Vue components and allows you to easily mount
    and interact with your components in a testing environment.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: Avoriaz 是一个专门为 Vue.js 组件设计的测试库。它提供了一套用于测试 Vue 组件的工具，并允许您在测试环境中轻松挂载和交互您的组件。
- en: Vue Testing Library
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Vue Testing Library
- en: This is a library built for testing Vue 3 applications. It provides a set of
    utilities for testing Vue 3 components and allows you to easily mount and interact
    with your components in a testing environment.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个为测试 Vue 3 应用程序而构建的库。它提供了一套用于测试 Vue 3 组件的实用工具，并允许您在测试环境中轻松挂载和交互您的组件。
- en: Nightwatch
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Nightwatch
- en: Nightwatch is an automated testing framework for web applications and websites.
    It can be used for integration tests for Vue 3 applications, and it allows you
    to write integration tests that simulate user interactions with an application.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: Nightwatch 是一个用于 Web 应用程序和网站的自动化测试框架。它可以用于 Vue 3 应用程序的集成测试，并允许您编写模拟用户与应用程序交互的集成测试。
- en: As with any other tool, you can pick the one that best suits your needs and
    the structure of your application. Keep in mind that some tools may be better
    suited for certain types of testing or certain types of applications.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 与任何其他工具一样，您可以选择最适合您需求和应用程序结构的工具。请记住，某些工具可能更适合某些类型的测试或某些类型的应用程序。
- en: These are some of the most popular tools available; you can use any depending
    on your needs and what you are trying to test.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是一些最受欢迎的工具；您可以根据您的需求和要测试的内容选择使用任何一种。
- en: It’s also important to note that most of these tools can be integrated with
    other libraries and frameworks to extend their functionality.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 还需要注意的是，这些工具中的大多数都可以与其他库和框架集成，以扩展其功能。
- en: In the next section, we will explore how to write your integration test with
    JavaScript and how to run your test manually. We will also explore how to automate
    your testing suite during a deployment pipeline.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨如何使用 JavaScript 编写集成测试，以及如何手动运行测试。我们还将探讨如何在部署管道中自动化测试套件。
- en: Testing a basic Vue app
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试基本的 Vue 应用
- en: In the previous chapter, we created a Pinterest application using Strapi for
    the backend and Vue 3 for the frontend.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们使用 Strapi 作为后端和 Vue 3 作为前端创建了一个 Pinterest 应用程序。
- en: Also, we added internationalization, structured the project, implemented unit
    and integration testing, and built a complete Pinterest clone. In this section,
    we will continue by using the official project we created for this book to set
    up integration testing to make up a full-blown enterprise-ready Pinterest clone
    application.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还添加了国际化，结构化了项目，实现了单元和集成测试，并构建了一个完整的 Pinterest 克隆。在本节中，我们将继续使用为本书创建的官方项目来设置集成测试，以构建一个完整的、企业级就绪的
    Pinterest 克隆应用程序。
- en: You can clone the project from the GitHub link mentioned in the *Technical*
    *requirements* section.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从*技术要求*部分提到的 GitHub 链接克隆项目。
- en: In this chapter, we will explore more advanced ways of implementing integration
    testing within the Pinterest clone application we use throughout this book.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨在本书中使用的 Pinterest 克隆应用程序中实现集成测试的更高级方法。
- en: Writing a basic integration test
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写基本集成测试
- en: First, we will start by installing the new testing library for Vue 3\. Since
    we are using Vite in the project, we will also install the Vitest library for
    our test runner. You can read more about the new Vue 3 test library at [https://vitest.dev/guide/](https://vitest.dev/guide/).
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将开始安装新的 Vue 3 测试库。由于我们在项目中使用 Vite，我们还将安装 Vitest 库作为我们的测试运行器。您可以在[https://vitest.dev/guide/](https://vitest.dev/guide/)上了解更多关于新
    Vue 3 测试库的信息。
- en: Installing the test library
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装测试库
- en: 'As of the time of writing, `@testing-library/vue` ([https://github.com/testing-library/vue-testing-library](https://github.com/testing-library/vue-testing-library))
    and `vitest` ([https://vitest.dev/guide/](https://vitest.dev/guide/)) are recommended
    for integration testing, and we will install the test libraries using the following
    command:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 到本文写作时，`@testing-library/vue` ([https://github.com/testing-library/vue-testing-library](https://github.com/testing-library/vue-testing-library))
    和 `vitest` ([https://vitest.dev/guide/](https://vitest.dev/guide/)) 被推荐用于集成测试，我们将使用以下命令安装测试库：
- en: '[PRE0]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, open your `vite.config.js` file and add the following configuration.
    Note that `happy-dom` is a JavaScript implementation of a web browser without
    its graphical UI:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，打开您的 `vite.config.js` 文件并添加以下配置。请注意，`happy-dom` 是一个没有图形 UI 的 Web 浏览器的 JavaScript
    实现：
- en: '[PRE1]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the preceding code, we configured the testing library to accommodate both
    unit and integration testing using the Vite library. This means that if we want
    to run unit and integration testing, we only need to use a single command, as
    shown when running the test.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们配置了测试库以适应使用 Vite 库进行的单元和集成测试。这意味着如果我们想运行单元和集成测试，我们只需要使用一个命令，就像运行测试时所示。
- en: Next, let’s create a simple integration test.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们创建一个简单的集成测试。
- en: Creating a basic component test
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建基本组件测试
- en: 'Here is a simple integration test snippet to demonstrate. This is a general
    integration testing example that tests the `Button` component inside the Pinterest
    demo application:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个简单的集成测试代码片段来演示。这是一个通用的集成测试示例，用于测试Pinterest演示应用内部的`Button`组件：
- en: '[PRE2]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The test simply renders `Button` with a custom label value and also checks whether
    we can retrieve the custom label added during the rendering process.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 测试简单地渲染带有自定义标签值的`Button`，并检查我们是否可以在渲染过程中检索添加的自定义标签。
- en: Running the test
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行测试
- en: 'Running the test will result in four passed test cases, including the unit
    test we created earlier. Here’s a command to run this test sample:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 运行测试将导致四个通过测试案例，包括我们之前创建的单元测试。以下是运行此测试样本的命令：
- en: '[PRE3]bash'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE3]bash'
- en: yarn test
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: yarn test
- en: '[PRE4]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![Figure 10.1 – A screenshot of the general test result](img/Figure_10.01_B17237.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![图10.1 – 一般测试结果的截图](img/Figure_10.01_B17237.jpg)'
- en: Figure 10.1 – A screenshot of the general test result
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.1 – 一般测试结果的截图
- en: In this section, we have demonstrated how to configure and structure integration
    testing, also known as component testing, with Vue 3 using the latest Vitest testing
    library for Vue 3\. We have also written basic component tests to help us understand
    the process of writing integration tests. In the next section, we will explore
    testing integrated components with Vue 3 using Vitest.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们展示了如何使用Vue 3和最新的Vitest测试库配置和构建集成测试，也称为组件测试。我们还编写了基本的组件测试，以帮助我们理解编写集成测试的过程。在下一节中，我们将探索使用Vue
    3和Vitest测试集成组件。
- en: Testing integrated components
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试集成组件
- en: 'In the previous example, we tested a simple `Button` component to make it render
    properly with the required properties. In this section, we will test a completely
    integrated component that combines different individual components. Let’s get
    started with the following steps:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们测试了一个简单的`Button`组件，以确保它以所需的属性正确渲染。在本节中，我们将测试一个完全集成的组件，该组件结合了不同的单个组件。让我们按照以下步骤开始：
- en: Create a file inside the `tests/components` directory called `HomeOverivew.vue`
    since we want to test the integration of the home page.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`tests/components`目录下创建一个名为`HomeOverivew.vue`的文件，因为我们想测试主页的集成。
- en: 'Open the file and add the following testing code or clone the repository using
    the GitHub link mentioned in the *Technical* *requirements* section:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开文件并添加以下测试代码，或者使用*技术要求*部分中提到的GitHub链接克隆仓库：
- en: '[PRE5]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In each test case, we are testing components that were added to the `HomeOverview`
    component to demonstrate how we can use integration testing to test integrated
    components as one.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个测试案例中，我们正在测试添加到`HomeOverview`组件中的组件，以展示我们如何使用集成测试来测试集成组件作为一个整体。
- en: 'Next, make sure the `HomeOverivew` page has been rendered correctly before
    testing for other test cases:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，确保在测试其他测试案例之前，`HomeOverivew`页面已经正确渲染：
- en: '[PRE6]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Next, test whether the `Button` component renders correctly and also check
    whether we can perform some actions with it. For instance, when the button is
    clicked, the app is supposed to create a new pin with photos. We will test to
    make sure that this functionality is implemented correctly even after integration:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，测试`Button`组件是否正确渲染，并检查我们是否可以对其进行一些操作。例如，当按钮被点击时，应用应该创建一个新的带有照片的pin。我们将测试确保即使在集成之后，此功能也正确实现：
- en: '[PRE7]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Next, test the notification display component found inside the `Header` component.
    We are testing it to make sure the users can dismiss notifications, and that it
    is also rendered correctly both inside the `Header` component and the `HomeOverview`
    component:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，测试`Header`组件内部的`通知显示`组件。我们正在测试它以确保用户可以取消通知，并且它也在`Header`组件和`HomeOverview`组件内部正确渲染：
- en: '[PRE8]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Next, also test the `Card` component to make sure that it displays the total
    amount of pins on the home page, and also that it renders the components correctly:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，也测试`Card`组件以确保它在主页上显示pin的总数，并且正确渲染组件：
- en: '[PRE9]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Lastly, we will test the `Search` component to make sure it was properly rendered
    for users and is available for users to search for pins:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将测试`Search`组件以确保它已正确渲染供用户使用，并且用户可以使用它来搜索pins：
- en: '[PRE10]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, let’s run the test by running the following command in our root terminal:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们在根终端中运行以下命令来运行测试：
- en: '[PRE11]bash'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[PRE11]bash'
- en: yarn test:component
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: yarn test:component
- en: '[PRE12]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'After successfully performing running the test, you should be greeted with
    green passes for your test, as in the following screenshot:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功运行测试后，你应该会看到绿色的通过测试结果，如下面的截图所示：
- en: '![Figure 10.2 – A screenshot of the integration test result](img/Figure_10.02_B17237.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![图10.2 – 集成测试结果的截图](img/Figure_10.02_B17237.jpg)'
- en: Figure 10.2 – A screenshot of the integration test result
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.2 – 集成测试结果的截图
- en: With all these test cases successful, we can easily see how integration testing
    helps developers to test out integrated and combined components instead of testing
    these components in isolation.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些测试用例都成功后，我们可以轻松地看到集成测试如何帮助开发者测试集成和组合的组件，而不是单独测试这些组件。
- en: Summary
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter explored everything related to integration testing. You also learned
    about integration testing tools such as Cypress, Mocha, and Vue Testing Library
    and used Vue Testing Library to effectively test an enterprise project.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 本章探讨了与集成测试相关的所有内容。你还学习了集成测试工具，如Cypress、Mocha和Vue Testing Library，并使用Vue Testing
    Library有效地测试了企业项目。
- en: In this chapter, we explored the benefits, importance, and best practices in
    writing and executing effective integration testing strategies. In addition, you
    also learned how to write integration test cases.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了编写和执行有效的集成测试策略的好处、重要性和最佳实践。此外，你还学习了如何编写集成测试用例。
- en: In the next chapter, you will learn about everything related to end-to-end testing.
    You will learn in depth how to perform end-to-end testing on a Vue.js 3 component
    and pages. In addition, you will also learn about end-to-end testing tools such
    as Cypress and Puppeteer and how to use them to test an enterprise project effectively
    from end to end.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将了解与端到端测试相关的所有内容。你将深入了解如何在Vue.js 3组件和页面上执行端到端测试。此外，你还将了解端到端测试工具，如Cypress和Puppeteer，以及如何使用它们从端到端有效地测试企业项目。
