["```js\nvue add @vue/unit-jest\n```", "```js\nimport { shallowMount } from '@vue/test-utils'\nimport App from '../src/App.vue'\ntest('App renders blog title correctly', () => {\n  const wrapper = shallowMount(App)\n  expect(wrapper.text()).toMatch(\"The Vue.js Workshop Blog\")\n})\n```", "```js\n<template>\n  <div id=\"app\" class=\"p-10\">\n    <div class=\"flex flex-col\">\n      <h2\n        class=\"leading-loose pb-4 flex justify-center m-auto           md:w-1/3 text-xl mb-8 font-bold text-gray-800 border-b\"\n      >\n      The Vue.js Workshop Blog\n      </h2>\n    </div>\n  </div>\n</template>\n```", "```js\nThe Vue.js Workshop Blog\n```", "```js\n<template>\n  <div class=\"flex flex-col w-full\">\n  </div>\n</template>\n<script>\nexport default {\n  props: {\n    posts: {\n      type: Array,\n      default: () => []\n    }\n  }\n}\n</script>\n```", "```js\n<script>\nexport default {\n  data() {\n    return {\n      posts: [\n        {\n          title: 'Vue.js for React developers',\n          description: 'React has massive popularity here are the             key benefits of Vue.js over it.',\n          tags: ['vue', 'react'],\n        },\n        {\n          title: 'Migrating an AngularJS app to Vue.js',\n          description: 'With many breaking changes, AngularJS developers             have found it easier to retrain to Vue.js than Angular 2',\n          tags: ['vue', 'angularjs']\n        }\n      ]\n    }\n  }\n}\n</script>\n```", "```js\n<template>\n  <!-- rest of template -->\n        <PostList :posts=\"posts\" />\n  <!-- rest of template -->\n</template>\n<script>\nimport PostList from './components/PostList.vue'\nexport default {\n  components: {\n    PostList\n  },\n  // rest of component properties\n}\n```", "```js\n<template>\n  <div class=\"flex flex-col m-auto w-full md:w-3/5 lg:w-2/5 mb-4\">\n    <h3 class=\"flex text-md font-semibold text-gray-700\">\n      {{ title }}</h3>\n    <p class=\"flex leading-relaxed\">{{ description }}</p>\n  </div>\n</template>\n<script>\nexport default {\n  props: {\n    title: {\n      type: String\n    },\n    description: {\n      type: String\n    }\n  }\n}\n</script>\n```", "```js\n<template>\n  !-- rest of template -->\n    <PostListItem\n      v-for=\"post in posts\"\n      :key=\"post.slug\"\n      :title=\"post.title\"\n      :description=\"post.description\"\n    />\n  <!-- rest of template -->\n</template>\n<script>\nimport PostListItem from './PostListItem.vue'\nexport default {\n  components: {\n    PostListItem,\n  },\n  // rest of component properties\n}\n</script>\n```", "```js\nThe Vue.js Workshop blog\n```", "```js\nimport { shallowMount } from '@vue/test-utils'\nimport PostListItem from '../src/components/PostListItem.vue'\ntest('PostListItem renders title and description correctly',   () => {\n  const wrapper = shallowMount(PostListItem, {\n    propsData: {\n      title: 'Blog post title',\n      description: 'Blog post description'\n    }\n  })\n  expect(wrapper.text()).toMatch(\"Blog post title\")\n  expect(wrapper.text()).toMatch(\"Blog post description\")\n})\n```", "```js\nimport { shallowMount } from '@vue/test-utils'\nimport PostList from '../src/components/PostList.vue'\nimport PostListItem from '../src/components/PostListItem.vue'\ntest('PostList renders the right number of PostListItem',   () => {\n  const wrapper = shallowMount(PostList, {\n    propsData: {\n      posts: [\n        {\n          title: \"Blog post title\",\n          description: \"Blog post description\"\n        }\n      ]\n    }\n  })\n  expect(wrapper.findAll(PostListItem)).toHaveLength(1)\n})\n```", "```js\nimport { shallowMount, mount } from '@vue/test-utils'\nimport PostList from '../src/components/PostList.vue'\n// other imports and tests\ntest('PostList renders passed title and description for each   passed post', () => {\n  const wrapper = mount(PostList, {\n    propsData: {\n      posts: [\n        {\n          title: 'Title 1',\n          description: 'Description 1'\n        },\n        {\n          title: 'Title 2',\n          description: 'Description 2'\n        }\n      ]\n    }\n  })\n  const outputText = wrapper.text()\n  expect(outputText).toContain('Title 1')\n  expect(outputText).toContain('Description 1')\n  expect(outputText).toContain('Title 2')\n  expect(outputText).toContain('Description 2')\n})\n```", "```js\n    // rest of tests and imports\n    test('PostListItem renders tags with a # prepended to   them', () => {\n      const wrapper = shallowMount(PostListItem, {\n        propsData: {\n          tags: ['react', 'vue']\n        }\n      })\n      expect(wrapper.text()).toMatch('#react')\n      expect(wrapper.text()).toMatch('#vue')\n    })\n    ```", "```js\n    <template>\n        <!-- rest of template -->\n        <div class=\"flex flex-row flex-wrap mt-4\">\n          <a\n            v-for=\"tag in tags\"\n            :key=\"tag\"\n            class=\"flex text-xs font-semibold px-2 py-1 mr-2           rounded border border-blue-500 text-blue-500\"\n          >\n            #{{ tag }}\n          </a>\n        </div>\n        <!-- rest of template -->\n    </template>\n    <script>\n    export default {\n      props: {\n        // rest of props\n        tags: {\n          type: Array,\n          default: () => []\n        }\n      }\n    }\n    </script>\n    ```", "```js\n    // rest of tests and imports\n    test('PostList renders tags for each post', () => {\n      const wrapper = mount(PostList, {\n        propsData: {\n          posts: [\n            {\n              tags: ['react', 'vue']\n            },\n            {\n              tags: ['html', 'angularjs']\n            }\n          ]\n        }\n      })\n      const outputText = wrapper.text()\n      expect(outputText).toContain('#react')\n      expect(outputText).toContain('#vue')\n      expect(outputText).toContain('#html')\n      expect(outputText).toContain('#angularjs')\n    })\n    ```", "```js\n    <template>\n      <!-- rest of template-->\n        <PostListItem\n          v-for=\"post in posts\"\n          :key=\"post.slug\"\n          :title=\"post.title\"\n          :description=\"post.description\"\n          :tags=\"post.tags\"\n        />\n      <!-- rest of template -->\n    </template>\n    ```", "```js\n<script>\nexport default {\n  filters: {\n    truncate(value) {\n      return value && value.slice(0, 8)\n    }\n  }\n}\n</script>\n```", "```js\nimport PostListItem from '../src/components/PostListItem.vue'\ntest('truncate should take only the first 8 characters', () => {\n  expect(\n    PostListItem.filters.truncate('longer than 8 characters')\n  ).toEqual('longer t')\n})\n```", "```js\n<template>\n  <!-- rest of template -->\n    <h3 class=\"flex text-md font-semibold text-gray-700\">\n      {{ title | truncate }}\n    </h3>\n  <!-- rest of template -->\n</template>\n```", "```js\n// imports\ntest('PostListItem renders title and description correctly',   () => {\n  const wrapper = shallowMount(PostListItem, {\n    propsData: {\n      title: 'Blog post title',\n      description: 'Blog post description'\n    }\n  })\n  expect(wrapper.text()).toMatch(\"Blog post title\")\n  expect(wrapper.text()).toMatch(\"Blog post description\")\n})\n// other tests\n```", "```js\n    import PostListItem from '../src/components/PostListItem.vue'\n    test('ellipsis should do nothing if value is less than 50   characters', () => {\n      expect(\n        PostListItem.filters.ellipsis('Less than 50 characters')\n      ).toEqual('Less than 50 characters')\n    })\n    test('ellipsis should truncate to 50 and append \"...\" when   longer than 50 characters', () => {\n      expect(\n        PostListItem.filters.ellipsis(\n          'Should be more than the 50 allowed characters by a         small amount'\n        )\n      ).toEqual('Should be more than the 50 allowed characters by     a...')\n    })\n    ```", "```js\n    <script>\n    export default {\n      // rest of component properties\n      filters: {\n        ellipsis(value) {\n          return value && value.length > 50\n            ? `${value.slice(0, 50)}...`\n            : value\n        }\n      }\n    }\n    </script>\n    ```", "```js\n    // other tests and imports\n    test('PostListItem truncates long descriptions', () => {\n      const wrapper = shallowMount(PostListItem, {\n        propsData: {\n          description: 'Very long blog post description that goes         over 50 characters'\n        }\n      })\n      expect(wrapper.text()).toMatch(\"Very long blog post description     that goes over 50 ...\")\n    })\n    ```", "```js\n    <template>\n      <!-- rest of template -->\n        <p class=\"flex leading-relaxed\">{{ description | ellipsis }}      </p>\n      <!-- rest of template -->\n    </template>\n    ```", "```js\n// other imports\nimport router from './router'\n// other imports and configuration \nnew Vue({\n  render: h => h(App),\n  router,\n}).$mount(‹#app›)\n```", "```js\nimport Vue from 'vue'\nimport VueRouter from 'vue-router'\nVue.use(VueRouter)\nexport default new VueRouter({})\n```", "```js\n// other imports\nimport PostList from './components/PostList.vue'\n// registering of Vue router\nconst routes = [\n  {\n    path: '/',\n    component: PostList\n  }\n]\nexport default new VueRouter({\n  routes\n})\n```", "```js\n<template>\n  <!-- rest of template -->\n      <router-view\n        :posts=\"posts\"\n      />\n  <!-- rest of template -->\n</template>\n```", "```js\n<script>\nexport default {\n  data() {\n    return {\n      posts: [\n        {\n          slug: 'vue-react',\n          title: 'Vue.js for React developers',\n          description: 'React has massive popularity here are the             key benefits of Vue.js over it.',\n          content:\n            'React has massive popularity here are the key benefits               of Vue.js over it.\n            See the following table, we'll also look at how the is               the content of the post.\n            There's more, we can map React concepts to Vue and               vice-versa.',\n          tags: ['vue', 'react'],\n        },\n        {\n          slug: 'vue-angularjs',\n          title: 'Migrating an AngularJS app to Vue.js',\n          description: 'With many breaking changes, AngularJS developers             have found it easier to retrain to Vue.js than Angular 2',\n          content:\n            'With many breaking changes, AngularJS developers have               found it easier to retrain to Vue.js than Angular 2\n            Vue.js keeps the directive-driven templating style while               adding a component model.\n            It's performant thanks to a great reactivity engine.',\n          tags: ['vue', 'angularjs']\n        }\n      ]\n    }\n  }\n}\n</script>\n```", "```js\n<template>\n  <div class=\"flex flex-col w-full md:w-1/2 m-auto\">\n    <h2\n      class=\"font-semibold text-sm mb-4\"\n    >\n      Post: RENDER ME\n    </h2>\n    <p>Placeholder for post.content</p>\n  </div>\n</template>\n<script>\nexport default {\n  props: {\n    posts: {\n      type: Array,\n      default: () => []\n    }\n  }\n}\n</script>\n```", "```js\n// other imports\nimport SinglePost from './components/SinglePost.vue'\n// vue router registration\nconst routes = [\n  // other route\n  {\n    path: '/:postId',\n    component: SinglePost\n  }\n]\n// exports and router instantiation\n```", "```js\n<script>\nexport default {\n  // other properties\n  computed: {\n    post() {\n      const { postId } = this.$route.params\n      return posts.find(p => p.slug === postId)\n    }\n  }\n}\n</script>\n```", "```js\n<script>\nexport default {\n  // other properties\n  computed: {\n    // other computed properties\n    title() {\n      return this.post && this.post.title\n    },\n    content() {\n      return this.post && this.post.content\n    }\n  }\n}\n</script>\n```", "```js\n<template>\n  <div class=\"flex flex-col w-full md:w-1/2 m-auto\">\n    <h2\n      class=\"font-semibold text-sm mb-4\"\n    >\n      Post: {{ title }}\n    </h2>\n    <p>{{ content }}</p>\n  </div>\n</template>\n```", "```js\n<template>\n  <router-link\n    class=\"flex flex-col m-auto w-full md:w-3/5 lg:w-2/5 mb-4\"\n    :to=\"`/${slug}`\"\n  >\n    <!-- rest of the template -->\n  </router-link>\n</template>\n```", "```js\nimport {render, fireEvent} from '@testing-library/vue'\nimport App from '../src/App.vue'\nimport router from '../src/router.js'\ntest('Router renders single post page when clicking a post title',   async () => {\n  const {getByText, queryByText} = render(App, { router })\n  expect(queryByText('The Vue.js Workshop Blog')).toBeTruthy()\n  expect(queryByText('Vue.js for React developers')).toBeTruthy()\n  expect(queryByText('Migrating an AngularJS app to Vue.js')).    toBeTruthy()\n  await fireEvent.click(getByText('Vue.js for React developers'))\n  expect(queryByText('Migrating an AngularJS app to Vue.js')).    toBeFalsy()\n  expect(queryByText('Post: Vue.js for React developers')).    toBeTruthy()\n  expect(\n    queryByText(\n      'React has massive popularity here are the key benefits of         Vue.js over it. See the following table, we'll also look at         how the is the content of the post. There's more, we can         map React concepts to Vue and vice-versa.'\n    )\n  ).toBeTruthy()\n})\n```", "```js\ntest('Router renders single post page when a slug is set',   async () => {\n  const {queryByText} = render(App, { router })\n  await router.replace('/')\n  await router.push('/vue-react')\n  expect(queryByText('Migrating an AngularJS app to Vue.js')).    toBeFalsy()\n  expect(queryByText('Post: Vue.js for React developers')).    toBeTruthy()\n  expect(\n    queryByText(\n      'React has massive popularity here are the key benefits of         Vue.js over it. See the following table, we'll also look at         how the is the content of the post. There's more, we can map         React concepts to Vue and vice-versa.'\n    )\n  ).toBeTruthy()\n})\n```", "```js\n    <template>\n      <div class=\"flex flex-col md:w-1/2 m-auto\">\n        <h3\n        class=\"font-semibold text-sm text-center mb-6\"\n        >\n          #INSERT_TAG_NAME\n        </h3>\n        <PostList :posts=\"[]\" />\n      </div>\n    </template>\n    <script>\n    import PostList from './PostList'\n    export default {\n      components: {\n        PostList\n      },\n      props: {\n        posts: {\n          type: Array,\n          default: () => []\n        }\n      },\n    }\n    </script>\n    ```", "```js\n    // other imports\n    import TagPage from './components/TagPage.vue'\n    // Vue router registration\n    const routes = [\n      // other routes\n      {\n        path: '/tags/:tagName',\n        component: TagPage\n      }\n    ]\n    // router instantiation and export\n    ```", "```js\n    <script>\n    // imports\n    export default {\n      // rest of component\n      computed: {\n        tagName() {\n          return this.$route.params.tagName\n        },\n        tagPosts() {\n          return this.posts.filter(p => p.tags.includes(this.tagName))\n        }\n      }\n    }\n    </script>\n    ```", "```js\n    <template>\n      <div class=\"flex flex-col md:w-1/2 m-auto\">\n        <h3\n          class=\"font-semibold text-sm text-center mb-6\"\n        >\n          #{{ tagName }}\n        </h3>\n        <PostList :posts=\"tagPosts\" />\n      </div>\n    </template>\n    ```", "```js\n    <template>\n      <!-- rest of template -->\n          <router-link\n            :to=\"`/tags/${tag}`\"\n            v-for=\"tag in tags\"\n            :key=\"tag\"\n            class=\"flex text-xs font-semibold px-2 py-1 mr-2           rounded border border-blue-500 text-blue-500\"\n          >\n            #{{ tag }}\n          </router-link>\n      <!-- rest of template -->\n    </template>\n    ```", "```js\n    import {render, fireEvent} from '@testing-library/vue'\n    import App from '../src/App.vue'\n    import router from '../src/router.js'\n    test('Router renders tag page when clicking a tag in the post     list item', async () => {\n      const {getByText, queryByText} = render(App, { router })\n      expect(queryByText('The Vue.js Workshop Blog')).    toBeTruthy()\n      expect(queryByText('Vue.js for React developers')).    toBeTruthy()\n      expect(queryByText('Migrating an AngularJS app to Vue.js')).    toBeTruthy()\n      await fireEvent.click(getByText('#angularjs'))\n      expect(queryByText('Migrating an AngularJS app to Vue.js')).    toBeTruthy()\n      expect(queryByText('Vue.js for React developers')).toBeFalsy()\n      expect(queryByText('React')).toBeFalsy()\n    })\n    ```", "```js\n    // import & other tests\n    test('Router renders tag page when a URL is set', async () => {\n      const {queryByText} = render(App, { router })\n      await router.push('/')\n      await router.replace('/tags/angularjs')\n      expect(queryByText('Migrating an AngularJS app to Vue.js')).    toBeTruthy()\n      expect(queryByText('Vue.js for React developers')).    toBeFalsy()\n      expect(queryByText('React')).toBeFalsy()\n    })\n    ```", "```js\n<template>\n  <div class=\"text-center py-4 md:px-4\">\n    <div\n      class=\"py-2 px-4 bg-indigo-800 items-center text-indigo-100\n      leading-none md:rounded-full flex md:inline-flex\"\n      role=\"alert\"\n    >\n      <span\n        class=\"font-semibold ml-2 md:mr-2 text-left flex-auto\"\n      >\n        Subscribe to the newsletter\n      </span>\n      <svg\n        class=\"fill-current h-6 w-6 text-indigo-500\"\n        role=\"button\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox=\"0 0 20 20\"\n      >\n        <title>Close</title>\n        <path\n          d=\"M14.348 14.849a1.2 1.2 0 0 1-1.697 0L10 11.819l-2.651\n          3.029a1.2 1.2 0 1 1-1.697-1.697l2.758-3.15-2.759-3.152a1\\.            2\n          1.2 0 1 1 1.697-1.697L10 8.183l2.651-3.031a1.2 1.2 0 1 1\n          1.697 1.697l-2.758 3.152 2.758 3.15a1.2 1.2 0 0 1 0 1\\.            698z\"\n        />\n      </svg>\n    </div>\n  </div>\n</template>\n```", "```js\n<template>\n  <!-- rest of template -->\n    <NewsletterBanner />\n  <!-- rest of template -->\n</template>\n<script>\nimport NewsletterBanner from './components/NewsletterBanner.vue'\nexport default {\n  components: {\n    NewsletterBanner\n  },\n  // other component properties\n}\n</script>\n```", "```js\nimport Vue from 'vue'\nimport Vuex from 'vuex'\nVue.use(Vuex)\nexport default new Vuex.Store({\n  state: {},\n  mutations: {}\n})\n```", "```js\n// other imports\nimport store from './store'\n// other configuration\nnew Vue({\n  // other vue options\n  store\n}).$mount('#app')\n```", "```js\n// imports and configuration\nexport default new Vuex.Store({\n  state: {\n    dismissedSubscribeBanner: false\n  }\n})\n```", "```js\n// imports and configuration\nexport default new Vuex.Store({\n  // other store configuration\n  mutations: {\n    dismissSubscribeBanner(state) {\n      state.dismissedSubscribeBanner = true\n    }\n  }\n})\n```", "```js\n<template>\n  <div v-if=\"showBanner\" class=\"text-center py-4 md:px-4\">\n    <!-- rest of template -->\n      <svg\n        @click=\"closeBanner()\"\n        class=\"fill-current h-6 w-6 text-indigo-500\"\n        role=\"button\"\n        xmlns=http://www.w3.org/2000/svg\n        viewBox=\"0 0 20 20\"\n      >\n    <!-- rest of the template -->\n  </div>\n</template>\n<script>\nexport default {\n  methods: {\n    closeBanner() {\n      this.$store.commit('dismissSubscribeBanner')\n    }\n  },\n  computed: {\n    showBanner() {\n      return !this.$store.state.dismissedSubscribeBanner\n    }\n  }\n}\n</script>\n```", "```js\nimport {render, fireEvent} from '@testing-library/vue'\nimport NewsletterBanner from '../src/components/  NewsletterBanner.vue'\nimport store from '../src/store'\ntest('Newsletter Banner should display if store is initialised   with it not dismissed', () => {\n  const {queryByText} = render(NewsletterBanner, { store })\n  expect(queryByText('Subscribe to the newsletter')).toBeTruthy()\n})\n```", "```js\n// imports and other tests\ntest('Newsletter Banner should not display if store is initialised with   it dismissed', () => {\n  const {queryByText} = render(NewsletterBanner, { store: {\n    state: {\n      dismissedSubscribeBanner: true\n    }\n  } })\n  expect(queryByText('Subscribe to the newsletter')).toBeFalsy()\n})\n```", "```js\n// imports and other tests\ntest('Newsletter Banner should hide on \"close\" button click',   async () => {\n  const dismissSubscribeBanner = jest.fn()\n  const {getByText} = render(NewsletterBanner, {\n    store: {\n      ...store,\n      mutations: {\n        dismissSubscribeBanner\n      }\n    }\n  })\n  await fireEvent.click(getByText('Close'))\n  expect(dismissSubscribeBanner).toHaveBeenCalledTimes(1)\n})\n```", "```js\n    <template>\n      <div\n        class=\"flex flex-row bg-green-100 border text-center       border-green-400\n        text-green-700 mt-8 px-4 md:px-8 py-3 rounded relative\"\n        role=\"alert\"\n      >\n        <div class=\"flex flex-col\">\n          <strong class=\"font-bold w-full flex\">Cookies Disclaimer\n          </strong>\n          <span class=\"block sm:inline\">We use cookies to improve your experience</span>\n        </div>\n        <button\n          class=\"ml-auto align-center bg-transparent         hover:bg-green-500\n          text-green-700 font-semibold font-sm hover:text-white         py-2 px-4 border\n          border-green-500 hover:border-transparent rounded\"\n        >\n          I agree\n        </button>\n      </div>\n    </template>\n    ```", "```js\n    <template>\n      <!-- rest of template -->\n          <CookieBanner />\n      <!-- rest of template -->\n    </template>\n    <script>\n    // other imports\n    import CookieBanner from './components/CookieBanner.vue'\n    export default {\n      components: {\n        // other components\n        CookieBanner\n      },\n      // other component properties\n    }\n    </script>\n    ```", "```js\n    // imports and configuration\n    export default new Vuex.Store({\n      state: {\n        // other state fields\n        acceptedCookie: false\n      },\n      // rest of vuex configuration\n    })\n    ```", "```js\n    // imports and configuration\n    export default new Vuex.Store({\n      // rest of vuex configuration\n      mutations: {\n        // other mutations\n        acceptCookie(state) {\n          state.acceptedCookie = true\n        }\n      }\n    })\n    ```", "```js\n    export default {\n      methods: {\n        acceptCookie() {\n          this.$store.commit('acceptCookie')\n        }\n      },\n      computed: {\n        acceptedCookie() {\n          return this.$store.state.acceptedCookie\n        }\n      }\n    }\n    </script>\n    ```", "```js\n    <template>\n      <div\n        v-if=\"!acceptedCookie\"\n        class=\"flex flex-row bg-green-100 border text-center       border-green-400\n        text-green-700 mt-8 px-4 md:px-8 py-3 rounded relative\"\n        role=\"alert\"\n      >\n        <!-- rest of template -->\n        <button\n          @click=\"acceptCookie()\"\n          class=\"ml-auto align-center bg-transparent         hover:bg-green-500\n          text-green-700 font-semibold font-sm hover:text-white         py-2 px-4 border\n          border-green-500 hover:border-transparent rounded\"\n        >\n          I agree\n        </button>\n      </div>\n    </template>\n    ```", "```js\n    import {render, fireEvent} from '@testing-library/vue'\n    import CookieBanner from '../src/components/CookieBanner.vue'\n    import store from '../src/store'\n    test('Cookie Banner should display if store is initialised with   it not dismissed', () => {\n      const {queryByText} = render(CookieBanner, { store })\n      expect(queryByText('Cookies Disclaimer')).toBeTruthy()\n    })\n    ```", "```js\n    test('Cookie Banner should not display if store is initialised   with it dismissed', () => {\n      const {queryByText} = render(CookieBanner, { store: {\n        state: {\n          acceptedCookie: true\n        }\n      } })\n      expect(queryByText('Cookies Disclaimer')).toBeFalsy()\n    })\n    ```", "```js\n    test('Cookie Banner should hide on \"I agree\" button click',   async () => {\n      const acceptCookie = jest.fn()\n      const {getByText} = render(CookieBanner, {\n        store: {\n          ...store,\n          mutations: {\n            acceptCookie\n          }\n        }\n      })\n      await fireEvent.click(getByText('I agree'))\n      expect(acceptCookie).toHaveBeenCalledTimes(1)\n    })\n    ```", "```js\n// imports and tests\ntest('Post List renders correctly', () => {\n  const wrapper = mount(PostList, {\n    propsData: {\n      posts: [\n        {\n          title: 'Title 1',\n          description: 'Description 1',\n          tags: ['react', 'vue']\n        },\n        {\n          title: 'Title 2',\n          description: 'Description 2',\n          tags: ['html', 'angularjs']\n        }\n      ]\n    }\n  })\n  expect(wrapper.text()).toMatchSnapshot()\n})\n```", "```js\n// Jest Snapshot v1, https://goo.gl/fbAQLP\nexports[`Post List renders correctly 1`] = `\n\"Title 1 Description 1 \n      #react\n\n      #vue\n    Title 2 Description 2 \n      #html\n\n      #angularjs\"\n`;\n```"]