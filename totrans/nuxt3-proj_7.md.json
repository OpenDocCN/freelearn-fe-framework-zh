["```js\n$ pnpm i -D @nuxtjs/google-fonts @nuxtjs/tailwindcss sass\n$ pnpm i @pinia/nuxt\n```", "```js\n$ pnpm dev\n```", "```js\nexport default {}\ndeclare global {\n  type Question = {\n    id: number\n    body: string\n    answers: Answer[]\n    rightAnswerId: number\n  }\n  type Answer = {\n    id: number\n    body: string\n  }\n  type Result = Question & {\n    userAnswer: Answer\n    answerIsRight: boolean\n  }\n}\n```", "```js\nconst currentQuestionIndex = ref<number>(0)\nconst quizFinished = ref<boolean>(false)\nconst result = ref<Result[]>([])\nconst score = ref<number>(0)\n```", "```js\nconst quiz = computed(() =>\nselectRandomQuestions(questions, 5))\n```", "```js\nconst currentQuestion = computed(() =>\nquiz.value[currentQuestionIndex.value])\n```", "```js\nconst updateProgress = (answerId: number) => {\n  const question = currentQuestion.value\n  const answerIsRight = question.rightAnswerId === answerId\n  if (answerIsRight) score.value++\n  result.value.push({\n    ...question,\n    userAnswer:\n      question.answers.find(({ id }) => id === answerId) ??\n      ({ body: 'no answer' } as Answer),\n    answerIsRight\n  })\n  if (currentQuestionIndex.value < quiz.value.length - 1)\n    currentQuestionIndex.value++\n  else quizFinished.value = true\n}\n```", "```js\nconst restartQuiz = () => {\n  currentQuestionIndex.value = 0\n  quizFinished.value = false\n  result.value = []\n  score.value = 0\n}\n```", "```js\nreturn {\n    currentQuestionIndex,\n    quizFinished,\n    quiz,\n    currentQuestion,\n    updateProgress,\n    restartQuiz,\n    result,\n    score\n  }\n```", "```js\n<!-- app.vue -->\n<template>\n  <div class=\"bg-violet-950 min-h-screen text-white\">\n    <div class=\"container py-12 text-center\">\n      <template v-if=\"quizStore.quizFinished\">\n        <!-- RESULT HERE -->\n      </template>\n      <Question v-else />\n    </div>\n  </div>\n</template>\n<script setup>\nconst quizStore = useQuizStore()\n</script>\n```", "```js\n$ pnpm add -D @nuxt/test-utils vitest happy-dom\n```", "```js\n// vitest.config.ts\nimport { defineVitestConfig } from\n'@nuxt/test-utils/config'\nexport default defineVitestConfig({\n  test: {\n    environment: 'happy-dom'\n  }\n})\n```", "```js\n// temp.spec.ts\nimport { describe, it, expect } from 'vitest'\nconst sum = (a: number, b: number): number => a + b\ndescribe('Sample Test', () => {\n  it('should accurately add two numbers', () => {\n    expect(sum(2, 3)).toBe(5)\n  })\n})\n```", "```js\n// package.json\n\"scripts\": {\n  // other scripts\n  \"test\": \"vitest\"\n}\n```", "```js\n$ pnpm test\n```", "```js\n// temp.spec.ts\nimport { describe, it, expect } from 'vitest'\nconst sum = (a: number, b: number): number => a + b\ndescribe('Sample Test', () => {\n  // previous test\n  // Add this test case within the same describe block\n  it('should fail to add two numbers correctly', () => {\n    expect(sum(2, 2)).toBe(5) // incorrect\n  })\n})\n```", "```js\n// stores/quiz.spec.ts\nimport { describe, it, expect, beforeEach } from 'vitest'\nimport { setActivePinia, createPinia } from 'pinia'\ndescribe('Quiz Store', () => {\n  beforeEach(() => {\n    setActivePinia(createPinia())\n  })\n})\n```", "```js\n// stores/quiz.spec.ts\nimport { describe, it, expect, beforeEach } from 'vitest'\nimport { setActivePinia, createPinia } from 'pinia'\ndescribe('Quiz Store', () => {\n  // before each\n  it('initializes with a set of 5 quiz questions', () => {\n    const quizStore = useQuizStore()\n    expect(quizStore.quiz.length).toBe(5)\n  })\n})\n```", "```js\n// inside the quiz.spec.ts file\nit(`doesn't increment the score when a wrong answer is\nselected`, () => {\n  const quizStore = useQuizStore()\n  const firstQuestion = quizStore.quiz[0]\n  // get a wrong answer\n  const wrongAnswerId = firstQuestion.answers.find(\n    answer => answer.id !== firstQuestion.rightAnswerId\n  )?.id\n  // Simulate the action of choosing a wrong answer\n  if (wrongAnswerId !== undefined) {\n    quizStore.updateProgress(wrongAnswerId)\n    expect(quizStore.score).toBe(0)\n  }\n})\n```", "```js\nit('increment the score only when the correct answer is\nselected', () => {\n  const quizStore = useQuizStore()\n  const firstQuestion = quizStore.quiz[0]\n  const rightAnswerId = firstQuestion.rightAnswerId\n  // Now try with the correct answer\n  quizStore.updateProgress(rightAnswerId)\n  expect(quizStore.score).toBe(1) // Score should increment\n                                     by 1\n})\n```", "```js\nit('transitions to the next question upon answering', () => {\n  const quizStore = useQuizStore()\n  expect(quizStore.currentQuestionIndex).toBe(0)\n  const firstQuestion = quizStore.quiz[0]\n  // Select any answer ID from the first question\n  const anyAnswerId = firstQuestion.answers[0].id\n  quizStore.updateProgress(anyAnswerId)\n  // Verify the store has moved to the next question\n  expect(quizStore.currentQuestionIndex).toBe(1)\n})\n```", "```js\nit('marks the quiz as finished when the last question is\nanswered', () => {\n  const quizStore = useQuizStore()\n  // Answer each question\n  for (let i = 0; i < quizStore.quiz.length; i++) {\n    const question = quizStore.quiz[i]\n    quizStore.updateProgress(question.rightAnswerId)\n  }\n  // After answering all questions,\n  // the quiz should be marked as finished\n  expect(quizStore.quizFinished).toBe(true)\n  expect(quizStore.result.length).toBe(5)\n})\n```", "```js\n$ pnpm add -D @vue/test-utils @pinia/testing\n```", "```js\n// /components/Question.spec.ts\nimport { describe, it, expect, vi } from 'vitest'\nimport { mount } from '@vue/test-utils'\nimport { createTestingPinia } from '@pinia/testing'\nimport QuestionComponent from '@/components/Question.vue'\nconst wrapper = mount(QuestionComponent, {\n  global: {\n    plugins: [\n      createTestingPinia({\n        createSpy: vi.fn\n      })\n    ]\n  }\n})\n```", "```js\n<!-- components/Question.vue -->\n<template>\n  <div class=\"text-center\">\n    <h1 class=\"text-4xl text-center capitalize font-bold\n    mb-8\">\n      {{ currentQuestion.body }}\n    </h1>\n    <div class=\"grid grid-cols-2 gap-4\">\n      <button\n        class=\"text-2xl font-bold bg-violet-900\n          hover:bg-violet-800 transition rounded-lg py-5\"\n        v-for=\"answer of currentQuestion.answers\"\n        @click=\"answered(answer.id)\"\n      >\n        {{ answer.body }}\n      </button>\n    </div>\n  </div>\n</template>\n<script setup lang=\"ts\">\nconst quizStore = useQuizStore()\nconst { currentQuestion } = storeToRefs(quizStore)\nconst answered = (answerId: number) => {\n  quizStore.updateProgress(answerId)\n}\n</script>\n```", "```js\n// components/Question.spec.ts\n// …previous code\ndescribe('Question Component', () => {\n  it('renders current question and answers', () => {\n    const quizStore = useQuizStore()\n    const question = quizStore.currentQuestion\n    expect(wrapper.text()).toContain(question.body)\n    expect(wrapper.findAll('button')).toHaveLength(4)\n    // Dynamically assert each answer is rendered\n    question.answers.forEach(answer => {\n      expect(wrapper.html()).toContain(answer.body)\n    })\n  })\n})\n```", "```js\n// components/Question.spec.ts\n// …previous code\ndescribe('Question Component', () => {\n  // previous test\n  it('calls answered method with correct answerId when an\n  answer is clicked', async () => {\n    const quizStore = useQuizStore()\n    // clicking on the first button\n    await wrapper.findAll('button')[0].trigger('click')\n    //  verify \"updateProgress\" was called correctly\n    expect(quizStore.updateProgress).toHaveBeenCalledWith(1)\n  })\n})\n```", "```js\n$ pnpm add -D playwright-core\n```", "```js\nimport { describe, expect, it } from 'vitest'\nimport questions from '~/data/questions'\nimport { setup, createPage } from '@nuxt/test-utils/e2e'\ndescribe('E2E Testing for the Quiz Feature in app.vue',\nasync () => {\n  await setup()\n})\n```", "```js\n// app.spec.ts\n// ...inside the describe function, under setup\nit('Verifies the quiz initial state: one question headline\nand four answer buttons', async () => {\n  const page = await createPage('/')\n  const h1Count = await page.locator('h1').count()\n  expect(h1Count).toBe(1)\n  const buttonCount =\n    await page.locator('button').count()\n  expect(buttonCount).toBe(4)\n})\n```", "```js\ntest(––, async () => {\n  const page = await createPage('/')\n  for (let i = 0; i < 5; i++) {\n    const questionText =\n      await page.locator('h1').textContent()\n    const question = questions.find(q => q.body ===\n      questionText)\n    const answerText = question?.answers.find(a => a.id ===\n      question.rightAnswerId).\n    await page.locator(`button:has-text(\"${answerText}\")`)\n      .click()\n  }\n  const finishedText =\n    await page.locator('h1').textContent()\n  expect(finishedText).toBe('Finished')\n  const score = await page.locator('h2').textContent()\n  expect(score).toContain('5 / 5')\n})\n```", "```js\nLooks like Playwright Test or Playwright was just installed or updated ║\n║ Please run the following command to download new browsers:\npnpm exec playwright install\n```", "```js\npnpm exec playwright-core install\n```", "```js\n$ pnpm i -D @vitest/coverage-v8 @vitest/ui\n```", "```js\n// package.json script\n\"test\": \"vitest --ui --coverage\"\n```"]