- en: '8'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '8'
- en: State Management
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 状态管理
- en: In this chapter, we’ll learn about **shared state**, which is state that is
    used by several different components. We will explore three approaches to managing
    shared state, discussing the pros and cons of each approach.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将了解 **共享状态**，这是由多个不同组件使用的状态。我们将探讨管理共享状态的三个方法，并讨论每种方法的优缺点。
- en: To do this, we will build a simple app containing a header that displays the
    user’s name, with the main content also referencing the user’s name. The user’s
    name will be stored in state that needs to be accessed by several components.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，我们将构建一个简单的应用程序，其中包含一个显示用户名的头部，主内容也会引用用户名。用户名将存储在需要由多个组件访问的状态中。
- en: We will start with the simplest state solution. This is to use one of React’s
    state hooks to store the state and pass it to other components using props. This
    approach is often referred to as **prop drilling**.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从最简单的状态解决方案开始。这是使用 React 的一个状态钩子来存储状态，并通过属性将其传递给其他组件。这种方法通常被称为 **属性钻取**。
- en: The second approach we will learn about is a feature in React called **context**.
    We will learn how to create a context containing a state and let other components
    access it.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要了解的第二种方法是 React 中的一个特性，称为 **上下文**。我们将学习如何创建一个包含状态的上下文，并允许其他组件访问它。
- en: The last approach we will cover is a popular library called **Redux**. We will
    take the time to understand what Redux is and its concepts before refactoring
    the app to use it.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要介绍的最后一个方法是流行的库 **Redux**。在重构应用程序以使用 Redux 之前，我们将花时间了解 Redux 是什么以及其概念。
- en: 'So, we’ll cover the following topics:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们将涵盖以下主题：
- en: Creating the project
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建项目
- en: Using prop drilling
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用属性钻取
- en: Using React context
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 React 上下文
- en: Using Redux
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Redux
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'We will use the following technologies in this chapter:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用以下技术：
- en: '**Node.js** and **npm**: You can install them from [https://nodejs.org/en/download/](https://nodejs.org/en/download/)'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Node.js** 和 **npm**：您可以从 [https://nodejs.org/en/download/](https://nodejs.org/en/download/)
    安装它们。'
- en: '**Visual Studio Code**: You can install it from [https://code.visualstudio.com/](https://code.visualstudio.com/)'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Visual Studio Code**：您可以从 [https://code.visualstudio.com/](https://code.visualstudio.com/)
    安装它。'
- en: All the code snippets in this chapter can be found online at [https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/tree/main/Chapter8](https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/tree/main/Chapter8).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中所有的代码片段都可以在以下网址找到：[https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/tree/main/Chapter8](https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/tree/main/Chapter8)。
- en: Creating the project
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建项目
- en: We will develop our form using Visual Studio Code and a new Create React App-based
    project setup. We’ve previously covered this several times, so we will not cover
    the steps in this chapter – instead, see [*Chapter 3*](B19051_03.xhtml#_idTextAnchor072),
    *Setting Up React* *and TypeScript*.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 Visual Studio Code 和一个新的基于 Create React App 的项目设置来开发我们的表单。我们之前已经多次介绍过这一点，所以本章中不会介绍步骤——相反，请参阅
    [*第 3 章*](B19051_03.xhtml#_idTextAnchor072)，*设置 React 和 TypeScript*。
- en: We will style the form with Tailwind CSS. We also previously covered how to
    install and configure Tailwind in Create React App in [*Chapter 5*](B19051_05.xhtml#_idTextAnchor127),
    *Approaches to Styling Frontends*. So, after you have created the React and TypeScript
    project, install and configure Tailwind.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 Tailwind CSS 来设计表单样式。我们之前也介绍了如何在 Create React App 中安装和配置 Tailwind，请参阅
    [*第 5 章*](B19051_05.xhtml#_idTextAnchor127)，*前端设计方法*。因此，在创建 React 和 TypeScript
    项目之后，安装并配置 Tailwind。
- en: We will also use the `@tailwindcss/forms` plugin to style the form. So, install
    this plugin as well – see [*Chapter 7*](B19051_07.xhtml#_idTextAnchor188), *Working
    with Forms*, for information on how to do this.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将使用 `@tailwindcss/forms` 插件来设计表单样式。因此，也要安装这个插件——有关如何操作的更多信息，请参阅 [*第 7 章*](B19051_07.xhtml#_idTextAnchor188)，*与表单一起工作*。
- en: 'The app we will build will contain a header and some content beneath it. Here
    is the component structure we will create:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要构建的应用程序将包含一个头部和其下的某些内容。以下是我们将创建的组件结构：
- en: '![Figure 8.1 – App component structure](img/B19051_08_01.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.1 – 应用组件结构](img/B19051_08_01.jpg)'
- en: Figure 8.1 – App component structure
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.1 – 应用组件结构
- en: The header will have a **Sign in** button to authenticate and authorize a user
    to get their name and permissions. Once authenticated, the user’s name will be
    displayed in the app header, and the user will be welcomed in the content. If
    the user has admin permissions, important content will be shown.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 该头部将包含一个**登录**按钮，用于验证和授权用户以获取其姓名和权限。一旦验证通过，用户的姓名将在应用头部显示，并在内容中欢迎用户。如果用户具有管理员权限，将显示重要内容。
- en: 'So, carry out the following steps to create the initial versions of the files
    that we need in the app without any statement management (some of the code snippets
    are lengthy – don’t forget you can copy them from [https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/tree/main/Chapter8/prop-drilling](https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/tree/main/Chapter8/prop-drilling)):'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，执行以下步骤以创建应用中所需的初始文件版本，而不进行任何语句管理（一些代码片段可能较长 - 不要忘记您可以从[https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/tree/main/Chapter8/prop-drilling](https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/tree/main/Chapter8/prop-drilling)复制它们）：
- en: 'We will start by creating a file containing a function to authenticate a user.
    Create a folder called `api` in the `src` folder. Then, create a file called `authenticate.ts`
    in the `api` folder with the following content:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先创建一个包含验证用户功能的文件。在`src`文件夹中创建一个名为`api`的文件夹。然后，在`api`文件夹中创建一个名为`authenticate.ts`的文件，并添加以下内容：
- en: '[PRE0]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The function simulates successful authentication for a user called Bob.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数模拟了名为Bob的用户成功验证。
- en: 'Next, we will create a file containing a function to authorize a user. So,
    create a file called `authorize.ts` in the `api` folder with the following content:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将创建一个包含授权用户功能的文件。因此，在`api`文件夹中创建一个名为`authorize.ts`的文件，并添加以下内容：
- en: '[PRE9]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The function simulates a user being authorized to have admin permissions.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数模拟了用户被授权具有管理员权限。
- en: 'Next, we will create a component for the app header. Create a file called `Header.tsx`
    in the `src` folder with the following content:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将创建一个用于应用头部的组件。在`src`文件夹中创建一个名为`Header.tsx`的文件，并添加以下内容：
- en: '[PRE14]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The component has a prop for the user, which will be `undefined` if the user
    isn’t authenticated yet. The component also has a prop called `onSignInClick`
    for a `loading` and it determines whether the app is in a loading state when the
    user is authenticated or authorized.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 组件有一个用于用户的属性，如果用户尚未验证，则该属性为`undefined`。组件还有一个名为`onSignInClick`的属性，用于`loading`，它确定当用户验证或授权时应用是否处于加载状态。
- en: 'Add the following component implementation into `Header.tsx`:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下组件实现添加到`Header.tsx`中：
- en: '[PRE20]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: The component informs the user that they have signed in if they have been authenticated.
    If the user is unauthenticated, the component displays a **Sign** **in** button.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户已验证，组件会通知用户他们已登录。如果用户未经验证，组件会显示一个**登录**按钮。
- en: 'Next, we will implement a component for the main app content. Create a file
    called `Main.tsx` in the `src` folder with the following content:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将实现一个用于主应用内容的组件。在`src`文件夹中创建一个名为`Main.tsx`的文件，并添加以下内容：
- en: '[PRE43]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: The component has a prop for the user and their permissions. We have imported
    a component called `Content`, which we will create in *step 7*.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 组件有一个用于用户及其权限的属性。我们已导入一个名为`Content`的组件，我们将在*第7步*中创建它。
- en: 'Now, add the following component implementation in `Main.tsx`:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将以下组件实现添加到`Main.tsx`中：
- en: '[PRE49]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: The component instructs the user to sign in if they are unauthenticated or shows
    a `Content` component passing it the user’s permissions.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 组件指示用户登录，如果他们未经验证或显示传递用户权限的`Content`组件。
- en: 'The last file to create in the `src` folder is called `Content.tsx`. Add the
    following content to the file:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src`文件夹中创建的最后一个文件被命名为`Content.tsx`。将以下内容添加到该文件中：
- en: '[PRE60]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: If the user is unauthorized, the component displays nothing. If the user has
    admin permissions, it displays some important stuff. Otherwise, it informs the
    user that they lack permissions.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户未授权，组件不显示任何内容。如果用户具有管理员权限，则显示一些重要内容。否则，它会通知用户他们缺少权限。
- en: That completes the project setup. The app will compile and run but won’t show
    any of the components we created yet because we haven’t referenced them in the
    `App` component. We will do this next when we share the user and permission information
    across several components.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这样就完成了项目设置。应用将编译并运行，但不会显示我们创建的任何组件，因为我们还没有在`App`组件中引用它们。我们将在分享用户和权限信息到多个组件时进行此操作。
- en: Using prop drilling
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用钻探法
- en: In this first state management approach, we will store the `user`, `permissions`,
    and `loading` state in the `App` component. The `App` component will then pass
    this state to the `Header` and `Main` components using props.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种第一种状态管理方法中，我们将`user`、`permissions`和`loading`状态存储在`App`组件中。然后，`App`组件将使用props将此状态传递给`Header`和`Main`组件。
- en: So, this approach uses React features that we are already aware of. The approach
    is referred to as **prop drilling** because the state is passed down the component
    tree using props.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这种方法使用了我们已知的React特性。这种方法被称为**属性钻取**，因为状态是通过props向下传递给组件树的。
- en: 'Carry out the following steps to rework the `App` component to store the `user`,
    `permissions`, and `loading` state, and pass this state down to the `Header` and
    `Main` components:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤来重构`App`组件，以存储`user`、`permissions`和`loading`状态，并将此状态传递给`Header`和`Main`组件：
- en: 'Open `App.tsx` and start by removing all the existing code and adding the following
    import statements:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`App.tsx`，首先删除所有现有代码，并添加以下导入语句：
- en: '[PRE77]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '[PRE79]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[PRE80]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[PRE81]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: We have imported `useReducer` from React to store the state. We have also imported
    the `Header` and `Main` components so that we can render them with the state values.
    Lastly, we’ve imported the `authenticate` and `authorize` functions because we
    will create the **Sign in** handler in this component.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从React中导入了`useReducer`来存储状态。我们还导入了`Header`和`Main`组件，以便我们可以使用状态值来渲染它们。最后，我们导入了`authenticate`和`authorize`函数，因为我们将在该组件中创建**登录**处理程序。
- en: 'After the import statements, add a type for the state and create a variable
    for the initial state values:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在导入语句之后，添加一个状态类型并创建一个初始状态值的变量：
- en: '[PRE82]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '[PRE83]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '[PRE84]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '[PRE85]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '[PRE86]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '[PRE87]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '[PRE88]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '[PRE90]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '[PRE91]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'Next, create a type for the different actions that can update the state:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，为可以更新状态的不同的动作创建一个类型：
- en: '[PRE92]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '[PRE93]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '[PRE94]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[PRE95]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '[PRE96]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '[PRE97]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '[PRE98]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '[PRE99]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '[PRE100]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '[PRE101]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '[PRE102]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '[PRE103]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '[PRE104]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '[PRE105]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '[PRE106]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE106]'
- en: The `"authenticate"` action will start the authentication process, and `"authenticated"`
    happens when it has been completed. Likewise, the `"authorize"` action will start
    the authorization process, and `"authorized"` happens when it has been completed.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '`"authenticate"`动作将启动认证过程，当完成时发生`"authenticated"`。同样，`"authorize"`动作将启动授权过程，当完成时发生`"authorized"`。'
- en: 'Next, add a `reducer` function that updates the state:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，添加一个更新状态的`reducer`函数：
- en: '[PRE107]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '[PRE108]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[PRE109]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '[PRE110]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '[PRE111]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '[PRE112]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '[PRE113]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '[PRE114]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '[PRE115]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '[PRE116]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE116]'
- en: '[PRE117]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '[PRE118]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '[PRE119]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE119]'
- en: '[PRE120]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE120]'
- en: '[PRE121]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '[PRE122]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '[PRE123]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE123]'
- en: '[PRE124]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE124]'
- en: The function takes in the existing state and the action as parameters. The function
    uses a switch statement on the action type to create a new version of the state
    in each branch.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数接受现有状态和动作作为参数。该函数使用动作类型的switch语句在每个分支中创建状态的新版本。
- en: 'Now, let’s define the `App` component as follows:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们按照以下方式定义`App`组件：
- en: '[PRE125]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '[PRE126]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE126]'
- en: '[PRE127]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE127]'
- en: '[PRE128]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE128]'
- en: '[PRE129]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE129]'
- en: '[PRE130]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE130]'
- en: '[PRE131]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE131]'
- en: '[PRE132]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE132]'
- en: '[PRE133]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE133]'
- en: '[PRE134]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE134]'
- en: '[PRE135]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE135]'
- en: '[PRE136]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE136]'
- en: '[PRE137]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE137]'
- en: '[PRE138]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE138]'
- en: '[PRE139]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE139]'
- en: The component uses `useReducer` with the `reducer` function and the `initialState`
    variable we defined earlier. We have destructured the `user`, `permissions`, and
    `loading` state values from `useReducer`. In the JSX, we have rendered both the
    `Header` and `Main` components passing the appropriate state values as props.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 该组件使用我们之前定义的`reducer`函数和`initialState`变量来`useReducer`。我们从`useReducer`中解构了`user`、`permissions`和`loading`状态值。在JSX中，我们渲染了`Header`和`Main`组件，并将适当的状态值作为props传递。
- en: 'The `Header` element in the JSX references a handler called `handleSignInClick`,
    which needs implementation. Create this above the return statement as follows:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: JSX中的`Header`元素引用了一个名为`handleSignInClick`的处理程序，需要实现。在返回语句上方创建此处理程序，如下所示：
- en: '[PRE140]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE140]'
- en: '[PRE141]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE141]'
- en: '[PRE142]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE142]'
- en: '[PRE143]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE143]'
- en: '[PRE144]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE144]'
- en: '[PRE145]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE145]'
- en: '[PRE146]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE146]'
- en: '[PRE147]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE147]'
- en: '[PRE148]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE148]'
- en: '[PRE149]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE149]'
- en: '[PRE150]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE150]'
- en: '[PRE151]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE151]'
- en: '[PRE152]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE152]'
- en: '[PRE153]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE153]'
- en: '[PRE154]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE154]'
- en: '[PRE155]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE155]'
- en: '[PRE156]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE156]'
- en: '[PRE157]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE157]'
- en: The sign-in handler authenticates and authorizes the user and dispatches the
    necessary actions along the way.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 登录处理程序在过程中验证和授权用户，并分派必要的动作。
- en: 'Run the app in development mode by running `npm start` in the terminal. The
    app appears as shown in the screenshot:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在终端中运行`npm start`来以开发模式运行应用程序。应用程序如图所示：
- en: '![Figure 8.2 – App before signing in](img/B19051_08_02.jpg)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![图8.2 – 登录前的应用](img/B19051_08_02.jpg)'
- en: Figure 8.2 – App before signing in
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.2 – 登录前的应用
- en: 'Click the **Sign in** button. The authentication and authorization processes
    then happen, and after a couple of seconds, the following screen appears:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**登录**按钮。然后发生认证和授权过程，几秒钟后，出现以下屏幕：
- en: '![Figure 8.3 – App after signing in](img/B19051_08_03.jpg)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![图8.3 – 登录后的应用](img/B19051_08_03.jpg)'
- en: Figure 8.3 – App after signing in
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.3 – 登录后的应用
- en: That completes the prop drilling approach.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 这就完成了属性钻取方法。
- en: A nice thing about this approach is that it is simple and uses React features
    we are already familiar with. A downside of this approach is that it forces all
    components between the component providing state and components accessing the
    state to have a prop for that state. So, some components that do not need access
    to the state are forced to access it. An example is the `Main` component – the
    `permissions` state is forced to pass through it to the `Content` component.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的优点是简单，并且使用了我们已熟悉的 React 特性。这种方法的缺点是它强制所有在提供状态和访问状态的组件之间的组件都必须有一个该状态的 prop。因此，一些不需要访问状态的组件被迫访问它。例如，`Main`
    组件 – `permissions` 状态被迫通过它传递到 `Content` 组件。
- en: The key point in this section is that it is fine to share state across a few
    adjacent components using props but isn’t ideal for sharing across lots of components
    far apart in the component tree.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 本节的关键点是，使用 props 在几个相邻组件之间共享状态是可以的，但不是在组件树中相隔甚远的许多组件之间共享的最佳选择。
- en: Next, keep the app running, and we will look at a more appropriate solution
    for sharing state across many components.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，保持应用运行，我们将探讨一个更适合在许多组件之间共享状态的解决方案。
- en: Using React context
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 React 上下文
- en: In this section, we will learn a feature in React called **context**. We will
    then refactor the app from the last section to use React context.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习 React 中称为 **上下文** 的一个特性。然后，我们将从上一节重构应用以使用 React 上下文。
- en: Understanding React context
  id: totrans-226
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解 React 上下文
- en: React context is an object that can be accessed by components. This object can
    contain state values, so it provides a mechanism for sharing state across components.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: React 上下文是一个对象，组件可以访问它。该对象可以包含状态值，因此它提供了一种在组件之间共享状态的机制。
- en: 'A context is created using a `createContext` function as follows:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `createContext` 函数创建上下文，如下所示：
- en: '[PRE158]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: A default value for the context must be passed into `createContext`. It also
    has a generic type parameter for the type that represents the object created by
    `createContext`.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 必须将上下文的默认值传递给 `createContext`。它还有一个泛型类型参数，用于表示由 `createContext` 创建的对象的类型。
- en: 'The context also contains a `Provider` component that needs to be placed above
    components requiring access to the context object in the component tree. A provider
    wrapper component can be created that stores the shared state and passes it to
    the context `Provider` component as follows:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 上下文还包含一个 `Provider` 组件，需要将其放置在组件树中需要访问上下文对象的组件之上。可以创建一个包装器组件来存储共享状态，并将其传递给上下文
    `Provider` 组件，如下所示：
- en: '[PRE159]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: '`useState` has been used for the state in the preceding example, but `useReducer`
    could also be used.'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中使用了 `useState` 来处理状态，但也可以使用 `useReducer`。
- en: 'The provider wrapper component can then be placed appropriately in the component
    tree, above components requiring the shared state:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 提供者包装器组件可以适当地放置在组件树中，位于需要共享状态的组件之上：
- en: '[PRE160]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: 'React also contains a `useContext` hook that can be used so that the context
    values can be consumed as a hook, as follows:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: React 还包含一个 `useContext` 钩子，可以用来使上下文值可以作为钩子被消费，如下所示：
- en: '[PRE161]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: The context must be passed into `useContext` and properties from the context
    object can be destructured from its result.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 必须将上下文传递给 `useContext`，并可以从上下文对象的结果中解构属性。
- en: 'So, components that want access to the shared state can access it using `useContext`
    as follows:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，想要访问共享状态的组件可以使用 `useContext` 如下访问：
- en: '[PRE162]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE162]'
- en: 'For more information on React context, see the following link: [https://reactjs.org/docs/context.html](https://reactjs.org/docs/context.html).'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 React 上下文的更多信息，请参阅以下链接：[https://reactjs.org/docs/context.html](https://reactjs.org/docs/context.html)。
- en: Now that we understand React context, we will use it in the app we created in
    the previous section.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了 React 上下文，我们将在上一节创建的应用中使用它。
- en: Using React context
  id: totrans-243
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 React 上下文
- en: We will refactor the app from the last section to use React context. We will
    start by creating a file containing the context and the provider wrapper. Then,
    we will use `useReducer` in the provider wrapper to store the state. We will also
    create a wrapper for `useContext` to make consuming it easy.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从上一节开始重构应用，以使用 React 上下文。我们首先创建一个包含上下文和提供者包装器的文件。然后，在提供者包装器中使用 `useReducer`
    来存储状态。我们还将创建一个 `useContext` 的包装器，以便更容易地消费它。
- en: 'So, to do this, carry out the following steps:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，要完成此操作，请执行以下步骤：
- en: Start by creating a file called `AppContext.tsx` in the `src` folder. This will
    contain the context, the provider wrapper, and the `useContext` wrapper.
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先在 `src` 文件夹中创建一个名为 `AppContext.tsx` 的文件。这将包含上下文、提供者包装器和 `useContext` 包装器。
- en: 'Add the following import statements to `AppContext.tsx`:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下导入语句添加到 `AppContext.tsx` 中：
- en: '[PRE163]'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE163]'
- en: '[PRE164]'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE164]'
- en: '[PRE165]'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE165]'
- en: '[PRE166]'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE166]'
- en: '[PRE167]'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE167]'
- en: '[PRE168]'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE168]'
- en: '[PRE169]'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE169]'
- en: We have imported all the functions we need from React along with the `ReactNode`
    type that we will need for the provider wrapper `children` prop. We have also
    imported the `User` type, which we will need for the user state type.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经从 React 导入了我们需要的所有函数，包括我们将需要的用于提供者包装器 `children` 属性的 `ReactNode` 类型。我们还导入了
    `User` 类型，这是我们需要的用户状态类型。
- en: 'We need to add a type for the state and a variable for the initial state values.
    We already have these in `App.tsx`, so the following lines can be moved from `App.tsx`
    to `AppContext.tsx`:'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要添加一个状态类型和一个初始状态值的变量。我们已经在 `App.tsx` 中有了这些，所以以下行可以从 `App.tsx` 移动到 `AppContext.tsx`：
- en: '[PRE170]'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE170]'
- en: '[PRE171]'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE171]'
- en: '[PRE172]'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE172]'
- en: '[PRE173]'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE173]'
- en: '[PRE174]'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE174]'
- en: '[PRE175]'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE175]'
- en: '[PRE176]'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE176]'
- en: '[PRE177]'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE177]'
- en: '[PRE178]'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE178]'
- en: '[PRE179]'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE179]'
- en: 'Similarly, the `Action` type and the `reducer` function can be moved from `App.tsx`
    to `AppContext.tsx`. Here are the lines to move:'
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 类似地，`Action` 类型以及 `reducer` 函数可以从 `App.tsx` 移动到 `AppContext.tsx`。以下是移动的代码行：
- en: '[PRE180]'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE180]'
- en: '[PRE181]'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE181]'
- en: '[PRE182]'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE182]'
- en: '[PRE183]'
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE183]'
- en: '[PRE184]'
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE184]'
- en: '[PRE185]'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE185]'
- en: '[PRE186]'
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE186]'
- en: '[PRE187]'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE187]'
- en: '[PRE188]'
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE188]'
- en: '[PRE189]'
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE189]'
- en: '[PRE190]'
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE190]'
- en: '[PRE191]'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE191]'
- en: '[PRE192]'
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE192]'
- en: '[PRE193]'
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE193]'
- en: '[PRE194]'
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE194]'
- en: '[PRE195]'
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE195]'
- en: '[PRE196]'
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE196]'
- en: '[PRE197]'
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE197]'
- en: '[PRE198]'
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE198]'
- en: '[PRE199]'
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE199]'
- en: '[PRE200]'
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE200]'
- en: '[PRE201]'
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE201]'
- en: '[PRE202]'
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE202]'
- en: '[PRE203]'
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE203]'
- en: '[PRE204]'
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE204]'
- en: '[PRE205]'
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE205]'
- en: '[PRE206]'
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE206]'
- en: '[PRE207]'
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE207]'
- en: '[PRE208]'
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE208]'
- en: Note that the `App.tsx` file will raise a compile error after moving this function.
    We will resolve this in the next set of instructions.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在移动此函数后，`App.tsx` 文件将引发编译错误。我们将在下一组指令中解决这个问题。
- en: 'Next, we will create a type for the context in `AppContext.tsx`:'
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将在 `AppContext.tsx` 中创建一个上下文类型：
- en: '[PRE209]'
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE209]'
- en: '[PRE210]'
  id: totrans-300
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE210]'
- en: '[PRE211]'
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE211]'
- en: The context will consist of the state values and a `dispatch` function to dispatch
    actions.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 上下文将包含状态值和一个用于分发操作的 `dispatch` 函数。
- en: 'Now we can create the context as follows:'
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以创建上下文，如下所示：
- en: '[PRE212]'
  id: totrans-304
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE212]'
- en: '[PRE213]'
  id: totrans-305
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE213]'
- en: '[PRE214]'
  id: totrans-306
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE214]'
- en: '[PRE215]'
  id: totrans-307
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE215]'
- en: We have called the context `AppContext`. We use the `initialState` variable
    and a dummy `dispatch` function as the default context value.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将上下文命名为 `AppContext`。我们使用 `initialState` 变量和虚拟的 `dispatch` 函数作为默认上下文值。
- en: 'Next, we can implement the provider wrapper as follows:'
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们可以实现提供者包装器，如下所示：
- en: '[PRE216]'
  id: totrans-310
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE216]'
- en: '[PRE217]'
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE217]'
- en: '[PRE218]'
  id: totrans-312
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE218]'
- en: '[PRE219]'
  id: totrans-313
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE219]'
- en: '[PRE220]'
  id: totrans-314
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE220]'
- en: '[PRE221]'
  id: totrans-315
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE221]'
- en: '[PRE222]'
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE222]'
- en: '[PRE223]'
  id: totrans-317
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE223]'
- en: '[PRE224]'
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE224]'
- en: '[PRE225]'
  id: totrans-319
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE225]'
- en: '[PRE226]'
  id: totrans-320
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE226]'
- en: '[PRE227]'
  id: totrans-321
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE227]'
- en: '[PRE228]'
  id: totrans-322
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE228]'
- en: '[PRE229]'
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE229]'
- en: '[PRE230]'
  id: totrans-324
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE230]'
- en: '[PRE231]'
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE231]'
- en: '[PRE232]'
  id: totrans-326
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE232]'
- en: '[PRE233]'
  id: totrans-327
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE233]'
- en: '[PRE234]'
  id: totrans-328
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE234]'
- en: We have called the component `AppProvider`, and it returns the context’s `Provider`
    component with the state values and the `dispatch` function from `useReducer`.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将组件命名为 `AppProvider`，它返回上下文的 `Provider` 组件，包含状态值和 `dispatch` 函数。
- en: 'The last thing to do in `AppContext.tsx` is to create a wrapper for `useContext`
    as follows:'
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `AppContext.tsx` 中最后要做的就是创建一个 `useContext` 的包装器，如下所示：
- en: '[PRE235]'
  id: totrans-331
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE235]'
- en: That completes the work we need to do in `AppContext.tsx`.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 这就完成了我们在 `AppContext.tsx` 中需要做的所有工作。
- en: So, `AppContext.tsx` exports an `AppProvider` component that can be placed above
    `Header` and `Main` in the component tree so that they can access the user and
    permissions information. `AppContext.tsx` also exports `useAppContext` so that
    the `Header`, `Main`, and `Content` components can use it to get access to the
    user and permissions information.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`AppContext.tsx` 导出 `AppProvider` 组件，可以放置在组件树中的 `Header` 和 `Main` 之上，以便它们可以访问用户和权限信息。`AppContext.tsx`
    还导出 `useAppContext`，以便 `Header`、`Main` 和 `Content` 组件可以使用它来获取访问用户和权限信息。
- en: 'Now, carry out the following steps to make the necessary changes to the `App`,
    `Header`, `Main`, and `Content` components to access the user and permissions
    information from `AppContext`:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，执行以下步骤以对 `App`、`Header`、`Main` 和 `Content` 组件进行必要的更改，以便从 `AppContext` 访问用户和权限信息：
- en: 'We will start with `Header.tsx`. Begin by importing the `authenticate`, `authorize`,
    and `useAppContext` functions. Also, remove the `User` type and the props for
    the `Header` component:'
  id: totrans-335
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将从 `Header.tsx` 开始。首先导入 `authenticate`、`authorize` 和 `useAppContext` 函数。同时，移除
    `User` 类型以及 `Header` 组件的属性：
- en: '[PRE236]'
  id: totrans-336
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE236]'
- en: '[PRE237]'
  id: totrans-337
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE237]'
- en: '[PRE238]'
  id: totrans-338
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE238]'
- en: '[PRE239]'
  id: totrans-339
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE239]'
- en: '[PRE240]'
  id: totrans-340
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE240]'
- en: '[PRE241]'
  id: totrans-341
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE241]'
- en: '`Header` will now handle the sign-in process instead of `App`. So, move the
    `handleSignInClick` handler from `App` in `App.tsx` to `Header.tsx` and place
    it above the return statement as follows:'
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Header` 将现在处理登录过程，而不是 `App`。因此，将 `App.tsx` 中的 `handleSignInClick` 处理器移动到 `Header.tsx`，并将其放置在返回语句之上，如下所示：'
- en: '[PRE242]'
  id: totrans-343
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE242]'
- en: '[PRE243]'
  id: totrans-344
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE243]'
- en: '[PRE244]'
  id: totrans-345
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE244]'
- en: '[PRE245]'
  id: totrans-346
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE245]'
- en: '[PRE246]'
  id: totrans-347
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE246]'
- en: '[PRE247]'
  id: totrans-348
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE247]'
- en: '[PRE248]'
  id: totrans-349
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE248]'
- en: '[PRE249]'
  id: totrans-350
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE249]'
- en: '[PRE250]'
  id: totrans-351
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE250]'
- en: '[PRE251]'
  id: totrans-352
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE251]'
- en: '[PRE252]'
  id: totrans-353
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE252]'
- en: '[PRE253]'
  id: totrans-354
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE253]'
- en: '[PRE254]'
  id: totrans-355
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE254]'
- en: '[PRE255]'
  id: totrans-356
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE255]'
- en: '[PRE256]'
  id: totrans-357
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE256]'
- en: '[PRE257]'
  id: totrans-358
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE257]'
- en: '[PRE258]'
  id: totrans-359
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE258]'
- en: '[PRE259]'
  id: totrans-360
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE259]'
- en: '[PRE260]'
  id: totrans-361
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE260]'
- en: '[PRE261]'
  id: totrans-362
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE261]'
- en: '[PRE262]'
  id: totrans-363
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE262]'
- en: 'Update the sign-in click handler to reference the function we just added:'
  id: totrans-364
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新登录点击处理器以引用我们刚刚添加的函数：
- en: '[PRE263]'
  id: totrans-365
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE263]'
- en: '[PRE264]'
  id: totrans-366
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE264]'
- en: '[PRE265]'
  id: totrans-367
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE265]'
- en: '[PRE266]'
  id: totrans-368
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE266]'
- en: '[PRE267]'
  id: totrans-369
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE267]'
- en: '[PRE268]'
  id: totrans-370
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE268]'
- en: '[PRE269]'
  id: totrans-371
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE269]'
- en: 'The last thing to do in `Header.tsx` is to get `user`, `loading`, and `dispatch`
    from the context. Add the following call to `useAppContext` at the top of the
    component:'
  id: totrans-372
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Header.tsx` 中最后要做的就是从上下文中获取 `user`、`loading` 和 `dispatch`。在组件顶部添加以下对 `useAppContext`
    的调用：
- en: '[PRE270]'
  id: totrans-373
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE270]'
- en: '[PRE271]'
  id: totrans-374
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE271]'
- en: '[PRE272]'
  id: totrans-375
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE272]'
- en: '[PRE273]'
  id: totrans-376
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE273]'
- en: 'Let’s move on to `Main.tsx`. Remove the import statement for the `User` type
    and add an import statement for `useAppContext`:'
  id: totrans-377
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们转到 `Main.tsx`。移除对 `User` 类型的导入语句，并添加对 `useAppContext` 的导入语句：
- en: '[PRE274]'
  id: totrans-378
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE274]'
- en: '[PRE275]'
  id: totrans-379
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE275]'
- en: 'Remove the props for the `Main` component and get `user` from `useAppContext`:'
  id: totrans-380
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 移除 `Main` 组件的属性，并从 `useAppContext` 获取 `user`：
- en: '[PRE276]'
  id: totrans-381
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE276]'
- en: '[PRE277]'
  id: totrans-382
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE277]'
- en: '[PRE278]'
  id: totrans-383
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE278]'
- en: '[PRE279]'
  id: totrans-384
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE279]'
- en: 'In the JSX in `Main`, remove the `permissions` attribute on the `Content` element:'
  id: totrans-385
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Main` 中的 JSX 中，移除 `Content` 元素的 `permissions` 属性：
- en: '[PRE280]'
  id: totrans-386
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE280]'
- en: 'Now, open `Content.tsx` and add an import statement for `useAppContext`:'
  id: totrans-387
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开 `Content.tsx` 并添加一个 `useAppContext` 的导入语句：
- en: '[PRE281]'
  id: totrans-388
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE281]'
- en: 'Remove the props for the `Content` component and get `permissions` from `useAppContext`:'
  id: totrans-389
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 移除 `Content` 组件的属性，并从 `useAppContext` 获取 `permissions`：
- en: '[PRE282]'
  id: totrans-390
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE282]'
- en: '[PRE283]'
  id: totrans-391
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE283]'
- en: '[PRE284]'
  id: totrans-392
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE284]'
- en: '[PRE285]'
  id: totrans-393
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE285]'
- en: '[PRE286]'
  id: totrans-394
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE286]'
- en: '[PRE287]'
  id: totrans-395
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE287]'
- en: '[PRE288]'
  id: totrans-396
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE288]'
- en: 'Lastly, we will modify `App.tsx`. Remove the import statements except for `Header`
    and `Main`, and add an import statement for `AppProvider`:'
  id: totrans-397
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将修改 `App.tsx`。移除除了 `Header` 和 `Main` 之外的所有导入语句，并添加一个 `AppProvider` 的导入语句：
- en: '[PRE289]'
  id: totrans-398
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE289]'
- en: '[PRE290]'
  id: totrans-399
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE290]'
- en: '[PRE291]'
  id: totrans-400
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE291]'
- en: 'Still in `App.tsx`, remove the call to `useReducer` and remove all the attributes
    passed to `Header` and `Main`:'
  id: totrans-401
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仍然在 `App.tsx` 中，移除对 `useReducer` 的调用，并移除传递给 `Header` 和 `Main` 的所有属性：
- en: '[PRE292]'
  id: totrans-402
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE292]'
- en: '[PRE293]'
  id: totrans-403
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE293]'
- en: '[PRE294]'
  id: totrans-404
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE294]'
- en: '[PRE295]'
  id: totrans-405
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE295]'
- en: '[PRE296]'
  id: totrans-406
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE296]'
- en: '[PRE297]'
  id: totrans-407
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE297]'
- en: '[PRE298]'
  id: totrans-408
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE298]'
- en: '[PRE299]'
  id: totrans-409
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE299]'
- en: 'Wrap `AppProvider` around `Header` and `Main` so that they can access the context:'
  id: totrans-410
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `AppProvider` 包裹在 `Header` 和 `Main` 旁边，以便它们可以访问上下文：
- en: '[PRE300]'
  id: totrans-411
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE300]'
- en: '[PRE301]'
  id: totrans-412
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE301]'
- en: '[PRE302]'
  id: totrans-413
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE302]'
- en: '[PRE303]'
  id: totrans-414
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE303]'
- en: '[PRE304]'
  id: totrans-415
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE304]'
- en: '[PRE305]'
  id: totrans-416
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE305]'
- en: '[PRE306]'
  id: totrans-417
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE306]'
- en: '[PRE307]'
  id: totrans-418
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE307]'
- en: '[PRE308]'
  id: totrans-419
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE308]'
- en: '[PRE309]'
  id: totrans-420
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE309]'
- en: The compile errors will now be resolved and the running app will look and behave
    like before.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 现在编译错误将被解决，运行中的应用将看起来和表现如前。
- en: Stop the app running by pressing *Ctrl* + *C*.
  id: totrans-422
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过按 *Ctrl* + *C* 停止应用运行。
- en: That completes the refactoring of the app to use React context instead of prop
    drilling.
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 这完成了将应用重构为使用 React 上下文而不是属性钻取的过程。
- en: In comparison to prop drilling, React context requires more code to be written.
    However, it allows components to access shared state using a hook rather than
    passing it through components using props. It’s an elegant, shared-state solution,
    particularly when many components share state.
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 与属性钻取相比，React 上下文需要编写更多的代码。然而，它允许组件使用钩子而不是通过属性在组件之间传递来访问共享状态。这是一个优雅的共享状态解决方案，尤其是在许多组件共享状态时。
- en: Next, we will learn about a popular third-party library that can be used to
    share state.
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将了解一个流行的第三方库，它可以用来共享状态。
- en: Using Redux
  id: totrans-426
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Redux
- en: In this section, we will learn about Redux before using it to refactor the app
    we have been working on to use it.
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将在使用 Redux 之前了解 Redux，并将其用于重构我们一直在工作的应用。
- en: Understanding Redux
  id: totrans-428
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解 Redux
- en: '**Redux** is a mature state management library that was first released in 2015\.
    It was released before React context and became a popular approach for shared
    state management.'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: '**Redux** 是一个成熟的州管理库，它最初于 2015 年发布。它在 React 上下文之前发布，并成为共享状态管理的一种流行方法。'
- en: Creating a store
  id: totrans-430
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建存储
- en: In Redux, the state lives in a centralized immutable object referred to as a
    `useReducer`, the state in a store is updated by dispatching an `reducer` function,
    which creates a new version of the state.
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Redux 中，状态存在于一个称为 `useReducer` 的集中式不可变对象中，存储中的状态通过分发 `reducer` 函数来更新，该函数创建状态的新版本。
- en: 'In the past, a lot of code was needed to set up a Redux store and consume it
    in a React component. Today, a companion library called Redux Toolkit reduces
    the code required to use Redux. A Redux store can be created using the Redux Toolkit’s
    `configureStore` function as follows:'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去，需要大量的代码来设置 Redux 存储，并在 React 组件中消耗它。今天，一个名为 Redux Toolkit 的伴侣库减少了使用 Redux
    所需的代码。可以使用 Redux Toolkit 的 `configureStore` 函数创建 Redux 存储，如下所示：
- en: '[PRE310]'
  id: totrans-433
  prefs: []
  type: TYPE_PRE
  zh: '[PRE310]'
- en: The `configureStore` function takes in the store’s reducers. Each feature in
    the app can have its own area of state and reducer to change the state. The different
    areas of state are often referred to as `someFeature` and `anotherFeature`.
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: '`configureStore` 函数接收存储的还原器。应用中的每个功能都可以有自己的状态区域和还原器来改变状态。不同的状态区域通常被称为 `someFeature`
    和 `anotherFeature`。'
- en: 'The Redux Toolkit has a function to create slices, called `createSlice`:'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: Redux Toolkit 有一个用于创建切片的函数，称为 `createSlice`：
- en: '[PRE311]'
  id: totrans-436
  prefs: []
  type: TYPE_PRE
  zh: '[PRE311]'
- en: The `createSlice` function takes in an object parameter containing the slice
    name, the initial state, and functions to handle the different actions and update
    the state.
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: '`createSlice` 函数接收一个包含切片名称、初始状态以及处理不同动作和更新状态的函数的对象参数。'
- en: 'The slice created from `createSlice` contains a `reducer` function that wraps
    the action handlers. This `reducer` function can be referenced in the `reducer`
    property of `configureStore` when the store is created:'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 从 `createSlice` 创建的切片包含一个包装动作处理器的 `reducer` 函数。当创建存储时，可以在 `configureStore` 的
    `reducer` 属性中引用此 `reducer` 函数：
- en: '[PRE312]'
  id: totrans-439
  prefs: []
  type: TYPE_PRE
  zh: '[PRE312]'
- en: In the preceding code snippet, the reducer from `someSlice` has been added to
    the store.
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，`someSlice` 的还原器已被添加到存储中。
- en: Providing the store to React components
  id: totrans-441
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 向 React 组件提供存储
- en: 'The Redux store is defined in the component tree using its `Provider` component.
    The value of the Redux store (from `configureStore`) needs to be specified on
    the `Provider` component. The `Provider` component must be placed above the components
    requiring access to the store:'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: Redux 存储通过其 `Provider` 组件在组件树中定义。`Provider` 组件上的 `value` 需要指定 Redux 存储（来自 `configureStore`）。`Provider`
    组件必须放置在需要访问存储的组件之上：
- en: '[PRE313]'
  id: totrans-443
  prefs: []
  type: TYPE_PRE
  zh: '[PRE313]'
- en: In the preceding example, `SomeComponent` and `AnotherComponent` have access
    to the store.
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，`SomeComponent` 和 `AnotherComponent` 可以访问存储。
- en: Accessing the store from a component
  id: totrans-445
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从组件中访问存储
- en: 'Components can access state from the Redux store using a `useSelector` hook
    from React Redux. A function that selects the relevant state in the store is passed
    into `useSelector`:'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 组件可以使用 React Redux 的 `useSelector` 钩子从 Redux 存储访问状态。一个选择存储中相关状态的功能被传递到 `useSelector`：
- en: '[PRE314]'
  id: totrans-447
  prefs: []
  type: TYPE_PRE
  zh: '[PRE314]'
- en: In the preceding example, `someValue` is selected from the `someFeature` slice
    in the store.
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，`someValue`是从存储中的`someFeature`切片中选择的。
- en: Dispatching actions to the store from a component
  id: totrans-449
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从组件向存储分发动作
- en: 'React Redux also has a `useDispatch` hook that returns a `dispatch` function
    that can be used to dispatch actions. The action is a function from the slice
    created using `createSlice`:'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: React Redux 还有一个名为 `useDispatch` 的钩子，它返回一个 `dispatch` 函数，可以用来分发动作。动作是从使用 `createSlice`
    创建的切片中创建的函数：
- en: '[PRE315]'
  id: totrans-451
  prefs: []
  type: TYPE_PRE
  zh: '[PRE315]'
- en: In the preceding example, `someAction` in `someSlice` is dispatched when the
    button is clicked.
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，当按钮被点击时，`someSlice` 中的 `someAction` 被分发。
- en: 'For more information on Redux, see the following link: [https://redux.js.org/](https://redux.js.org/).
    And for more information on the Redux Toolkit, see the following link: [https://redux-toolkit.js.org/](https://redux-toolkit.js.org/).'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于 Redux 的信息，请参阅以下链接：[https://redux.js.org/](https://redux.js.org/)。有关 Redux
    Toolkit 的更多信息，请参阅以下链接：[https://redux-toolkit.js.org/](https://redux-toolkit.js.org/)。
- en: Now that we understand Redux, we will use it in the app we created in the previous
    section.
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了 Redux，我们将在上一节创建的应用中使用它。
- en: Installing Redux
  id: totrans-455
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Redux
- en: 'First, we must install Redux and the Redux Toolkit into our project. Run the
    following command in the terminal:'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们必须将 Redux 和 Redux Toolkit 安装到我们的项目中。在终端中运行以下命令：
- en: '[PRE316]'
  id: totrans-457
  prefs: []
  type: TYPE_PRE
  zh: '[PRE316]'
- en: This will install all the Redux bits we need, including its TypeScript types.
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 这将安装我们需要的所有 Redux 组件，包括其 TypeScript 类型。
- en: Using Redux
  id: totrans-459
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Redux
- en: Now, we can refactor the app to use Redux instead of React context. First, we
    will create a Redux slice for the user information before creating a Redux store
    with this slice. We will then move on to add the store to the React component
    tree and consume it in the `Header`, `Main`, and `Content` components.
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以重构应用程序以使用 Redux 而不是 React 上下文。首先，我们将创建一个用于用户信息的 Redux slice，然后再创建一个包含此切片的
    Redux 存储。然后，我们将继续将存储添加到 React 组件树中，并在 `Header`、`Main` 和 `Content` 组件中消费它。
- en: Creating a Redux Slice
  id: totrans-461
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建 Redux Slice
- en: 'We will start by creating a Redux slice for the state for a user. Carry out
    the following steps:'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先创建一个用于用户状态的 Redux slice。执行以下步骤：
- en: Create a folder called `store` in the `src` folder and then a file called `userSlice.ts`
    within it.
  id: totrans-463
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src`文件夹中创建一个名为`store`的文件夹，然后在其中创建一个名为`userSlice.ts`的文件。
- en: 'Add the following import statements to `userSlice.ts`:'
  id: totrans-464
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下导入语句添加到 `userSlice.ts`：
- en: '[PRE317]'
  id: totrans-465
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE317]'
- en: '[PRE318]'
  id: totrans-466
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE318]'
- en: '[PRE319]'
  id: totrans-467
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE319]'
- en: We will eventually use `createSlice` to create the Redux slice. `PayloadAction`
    is a type that we can use for action objects. We will need the `User` type when
    defining the type for the state.
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最终将使用 `createSlice` 创建 Redux slice。`PayloadAction` 是一个我们可以用于动作对象的类型。在定义状态类型时，我们需要
    `User` 类型。
- en: 'Copy the following `State` type and initial state value from `AppContext.tsx`
    into `userSlice.ts`:'
  id: totrans-469
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下 `State` 类型及其初始状态值从 `AppContext.tsx` 复制到 `userSlice.ts`：
- en: '[PRE320]'
  id: totrans-470
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE320]'
- en: '[PRE321]'
  id: totrans-471
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE321]'
- en: '[PRE322]'
  id: totrans-472
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE322]'
- en: '[PRE323]'
  id: totrans-473
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE323]'
- en: '[PRE324]'
  id: totrans-474
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE324]'
- en: '[PRE325]'
  id: totrans-475
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE325]'
- en: '[PRE326]'
  id: totrans-476
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE326]'
- en: '[PRE327]'
  id: totrans-477
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE327]'
- en: '[PRE328]'
  id: totrans-478
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE328]'
- en: '[PRE329]'
  id: totrans-479
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE329]'
- en: 'Next, start to create the slice in `userSlice.ts`, as follows:'
  id: totrans-480
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，按照以下方式在 `userSlice.ts` 中开始创建切片：
- en: '[PRE330]'
  id: totrans-481
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE330]'
- en: '[PRE331]'
  id: totrans-482
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE331]'
- en: '[PRE332]'
  id: totrans-483
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE332]'
- en: '[PRE333]'
  id: totrans-484
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE333]'
- en: '[PRE334]'
  id: totrans-485
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE334]'
- en: '[PRE335]'
  id: totrans-486
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE335]'
- en: We have named the slice `user` and passed in the initial state value. We export
    the slice so that we can use it later to create the Redux store.
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已将切片命名为 `user` 并传递了初始状态值。我们导出切片，以便以后可以用来创建 Redux 存储。
- en: 'Now, define the following action handlers inside the `reducers` object:'
  id: totrans-488
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在 `reducers` 对象内部定义以下动作处理程序：
- en: '[PRE336]'
  id: totrans-489
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE336]'
- en: '[PRE337]'
  id: totrans-490
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE337]'
- en: '[PRE338]'
  id: totrans-491
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE338]'
- en: '[PRE339]'
  id: totrans-492
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE339]'
- en: '[PRE340]'
  id: totrans-493
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE340]'
- en: '[PRE341]'
  id: totrans-494
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE341]'
- en: '[PRE342]'
  id: totrans-495
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE342]'
- en: '[PRE343]'
  id: totrans-496
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE343]'
- en: '[PRE344]'
  id: totrans-497
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE344]'
- en: '[PRE345]'
  id: totrans-498
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE345]'
- en: '[PRE346]'
  id: totrans-499
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE346]'
- en: '[PRE347]'
  id: totrans-500
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE347]'
- en: '[PRE348]'
  id: totrans-501
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE348]'
- en: '[PRE349]'
  id: totrans-502
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE349]'
- en: '[PRE350]'
  id: totrans-503
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE350]'
- en: '[PRE351]'
  id: totrans-504
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE351]'
- en: '[PRE352]'
  id: totrans-505
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE352]'
- en: '[PRE353]'
  id: totrans-506
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE353]'
- en: '[PRE354]'
  id: totrans-507
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE354]'
- en: '[PRE355]'
  id: totrans-508
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE355]'
- en: '[PRE356]'
  id: totrans-509
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE356]'
- en: '[PRE357]'
  id: totrans-510
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE357]'
- en: Each action handler updates the required state. `PayloadAction` is used for
    the type of the action parameters. `PayloadAction` is a generic type with a parameter
    for the type of the action payload.
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: 每个动作处理程序都会更新所需的状态。`PayloadAction` 用于动作参数的类型。`PayloadAction` 是一个带有动作有效负载类型的泛型类型。
- en: 'Lastly, export the action handlers and the `reducer` function from the slice:'
  id: totrans-512
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，从切片中导出动作处理程序和`reducer`函数：
- en: '[PRE358]'
  id: totrans-513
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE358]'
- en: '[PRE359]'
  id: totrans-514
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE359]'
- en: '[PRE360]'
  id: totrans-515
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE360]'
- en: '[PRE361]'
  id: totrans-516
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE361]'
- en: '[PRE362]'
  id: totrans-517
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE362]'
- en: '[PRE363]'
  id: totrans-518
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE363]'
- en: '[PRE364]'
  id: totrans-519
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE364]'
- en: A default export has been used for the `reducer` function so the consumer can
    name it as required.
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: '`reducer`函数使用了默认导出，因此消费者可以按需命名它。'
- en: That completes the implementation of the Redux slice.
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: 这样就完成了Redux切片的实现。
- en: Creating the Redux store
  id: totrans-522
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建Redux存储
- en: 'Next, let’s create the Redux store. Carry out the following steps:'
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们创建Redux存储。执行以下步骤：
- en: 'Create a file called `store.ts` in the `store` folder containing the following
    import statements:'
  id: totrans-524
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`store`文件夹中创建一个名为`store.ts`的文件，包含以下导入语句：
- en: '[PRE365]'
  id: totrans-525
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE365]'
- en: '[PRE366]'
  id: totrans-526
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE366]'
- en: 'Next, use the `configureStore` function to create the store referencing the
    reducer from the slice we created earlier:'
  id: totrans-527
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，使用`configureStore`函数创建存储，引用我们之前创建的reducer：
- en: '[PRE367]'
  id: totrans-528
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE367]'
- en: '[PRE368]'
  id: totrans-529
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE368]'
- en: '[PRE369]'
  id: totrans-530
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE369]'
- en: We export the `store` variable so that we can later use it on React Redux’s
    `Provider` component.
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: 我们导出`store`变量，以便我们可以在以后在React Redux的`Provider`组件中使用它。
- en: 'The last thing to do in `store.ts` is export the type for Redux’s full state
    object, which we will eventually require in the `useSelector` hook in components
    consuming the Redux store:'
  id: totrans-532
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`store.ts`中最后要做的就是在Redux的全状态对象中导出类型，我们最终会在消费Redux存储的组件中的`useSelector`钩子中需要这个类型：
- en: '[PRE370]'
  id: totrans-533
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE370]'
- en: '`ReturnType` is a standard TypeScript utility type that returns the return
    type of the function type passed into it. The `getState` function in the Redux
    store returns the full state object. So, we use `ReturnType` to infer the type
    of the full state object rather than explicitly defining it.'
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: '`ReturnType`是TypeScript的一个标准实用工具类型，它返回传递给它的函数类型的返回类型。Redux存储中的`getState`函数返回完整的状态对象。因此，我们使用`ReturnType`来推断完整状态对象的类型，而不是显式地定义它。'
- en: That completes the implementation of the Redux store.
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: 这样就完成了Redux存储的实现。
- en: Adding the Redux store to the component tree
  id: totrans-536
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将Redux存储添加到组件树中
- en: 'Next, we will add the store at an appropriate place in the component tree using
    the `Provider` component from React Redux. Follow these steps:'
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将使用React Redux的`Provider`组件在组件树中的适当位置添加存储。遵循以下步骤：
- en: Open `App.tsx` and remove the `AppContext` import statement. Remove the `AppContext.tsx`
    file as well because this is no longer required.
  id: totrans-538
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`App.tsx`并移除`AppContext`导入语句。同时移除`AppContext.tsx`文件，因为现在不再需要它。
- en: 'Add an import statement for the `Provider` component from React Redux and the
    Redux store we created:'
  id: totrans-539
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从React Redux导入`Provider`组件和我们创建的Redux存储的导入语句：
- en: '[PRE371]'
  id: totrans-540
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE371]'
- en: '[PRE372]'
  id: totrans-541
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE372]'
- en: 'Replace `AppProvider` with `Provider` in the JSX, as follows:'
  id: totrans-542
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在JSX中将`AppProvider`替换为`Provider`，如下所示：
- en: '[PRE373]'
  id: totrans-543
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE373]'
- en: '[PRE374]'
  id: totrans-544
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE374]'
- en: '[PRE375]'
  id: totrans-545
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE375]'
- en: '[PRE376]'
  id: totrans-546
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE376]'
- en: '[PRE377]'
  id: totrans-547
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE377]'
- en: '[PRE378]'
  id: totrans-548
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE378]'
- en: We pass the imported Redux store into `Provider`.
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将导入的Redux存储传递给`Provider`。
- en: The Redux store is now accessible to the `Header`, `Main`, and `Content` components.
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: 现在Redux存储对`Header`、`Main`和`Content`组件都是可访问的。
- en: Consuming the Redux store in the components
  id: totrans-551
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在组件中消费Redux存储
- en: 'We will now integrate the Redux store into the `Header`, `Main`, and `Content`
    components. This will replace the previous React context consumption code. Follow
    these steps:'
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将Redux存储集成到`Header`、`Main`和`Content`组件中。这将替换之前的React上下文消费代码。遵循以下步骤：
- en: Start by opening `Header.tsx` and remove the `AppContext` import statement.
  id: totrans-553
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先打开`Header.tsx`并移除`AppContext`导入语句。
- en: 'Add the following import statements to `Header.tsx`:'
  id: totrans-554
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Header.tsx`中添加以下导入语句：
- en: '[PRE379]'
  id: totrans-555
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE379]'
- en: '[PRE380]'
  id: totrans-556
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE380]'
- en: '[PRE381]'
  id: totrans-557
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE381]'
- en: '[PRE382]'
  id: totrans-558
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE382]'
- en: '[PRE383]'
  id: totrans-559
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE383]'
- en: '[PRE384]'
  id: totrans-560
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE384]'
- en: '[PRE385]'
  id: totrans-561
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE385]'
- en: '[PRE386]'
  id: totrans-562
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE386]'
- en: We will be referencing state from Redux as well as dispatching actions, so we
    have imported both `useSelector` and `useDispatch`. The `RootState` type is required
    in the function we will eventually pass to `useSelector`. We have also imported
    all the actions from the slice we created because we will need them in the revised
    sign-in handler.
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将引用Redux中的状态以及分发动作，因此我们导入了`useSelector`和`useDispatch`。`RootState`类型是我们最终将传递给`useSelector`的函数中所需的。我们还导入了我们创建的切片中的所有动作，因为我们将在修订后的登录处理程序中需要它们。
- en: 'Inside the `Header` component, replace the `useAppContext` call with `useSelector`
    calls to get the required state:'
  id: totrans-564
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Header`组件内部，将`useAppContext`调用替换为`useSelector`调用以获取所需的状态：
- en: '[PRE387]'
  id: totrans-565
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE387]'
- en: '[PRE388]'
  id: totrans-566
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE388]'
- en: '[PRE389]'
  id: totrans-567
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE389]'
- en: '[PRE390]'
  id: totrans-568
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE390]'
- en: '[PRE391]'
  id: totrans-569
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE391]'
- en: '[PRE392]'
  id: totrans-570
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE392]'
- en: '[PRE393]'
  id: totrans-571
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE393]'
- en: '[PRE394]'
  id: totrans-572
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE394]'
- en: '[PRE395]'
  id: totrans-573
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE395]'
- en: '[PRE396]'
  id: totrans-574
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE396]'
- en: '[PRE397]'
  id: totrans-575
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE397]'
- en: '[PRE398]'
  id: totrans-576
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE398]'
- en: 'Also, call `useDispatch` to get a `dispatch` function:'
  id: totrans-577
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同时，调用`useDispatch`来获取`dispatch`函数：
- en: '[PRE399]'
  id: totrans-578
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE399]'
- en: '[PRE400]'
  id: totrans-579
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE400]'
- en: '[PRE401]'
  id: totrans-580
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE401]'
- en: '[PRE402]'
  id: totrans-581
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE402]'
- en: '[PRE403]'
  id: totrans-582
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE403]'
- en: '[PRE404]'
  id: totrans-583
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE404]'
- en: '[PRE405]'
  id: totrans-584
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE405]'
- en: '[PRE406]'
  id: totrans-585
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE406]'
- en: '[PRE407]'
  id: totrans-586
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE407]'
- en: '[PRE408]'
  id: totrans-587
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE408]'
- en: '[PRE409]'
  id: totrans-588
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE409]'
- en: '[PRE410]'
  id: totrans-589
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE410]'
- en: '[PRE411]'
  id: totrans-590
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE411]'
- en: 'The last thing to do in `Header.tsx` is to modify `handleSignInClick` to reference
    the action functions from the Redux slice:'
  id: totrans-591
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Header.tsx`中最后要做的就是在`handleSignInClick`中修改以引用Redux切片中的动作函数：
- en: '[PRE412]'
  id: totrans-592
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE412]'
- en: '[PRE413]'
  id: totrans-593
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE413]'
- en: '[PRE414]'
  id: totrans-594
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE414]'
- en: '[PRE415]'
  id: totrans-595
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE415]'
- en: '[PRE416]'
  id: totrans-596
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE416]'
- en: '[PRE417]'
  id: totrans-597
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE417]'
- en: '[PRE418]'
  id: totrans-598
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE418]'
- en: '[PRE419]'
  id: totrans-599
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE419]'
- en: '[PRE420]'
  id: totrans-600
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE420]'
- en: '[PRE421]'
  id: totrans-601
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE421]'
- en: '[PRE422]'
  id: totrans-602
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE422]'
- en: '[PRE423]'
  id: totrans-603
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE423]'
- en: 'Now, open `Main.tsx` and replace the `AppContext` import statement with import
    statements for `useSelector` and the `RootState` type:'
  id: totrans-604
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开`Main.tsx`并将`AppContext`导入语句替换为`useSelector`和`RootState`类型的导入语句：
- en: '[PRE424]'
  id: totrans-605
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE424]'
- en: '[PRE425]'
  id: totrans-606
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE425]'
- en: 'Replace the call to `useAppContext` with a call to `useSelector` to get the
    `user` state value:'
  id: totrans-607
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将对`useAppContext`的调用替换为对`useSelector`的调用以获取`user`状态值：
- en: '[PRE426]'
  id: totrans-608
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE426]'
- en: '[PRE427]'
  id: totrans-609
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE427]'
- en: '[PRE428]'
  id: totrans-610
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE428]'
- en: '[PRE429]'
  id: totrans-611
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE429]'
- en: '[PRE430]'
  id: totrans-612
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE430]'
- en: '[PRE431]'
  id: totrans-613
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE431]'
- en: 'Next, open `Content.tsx` and replace the `AppContext` import statement with
    import statements for `useSelector` and the `RootState` type:'
  id: totrans-614
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，打开`Content.tsx`，并将`AppContext`导入语句替换为对`useSelector`和`RootState`类型的导入语句：
- en: '[PRE432]'
  id: totrans-615
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE432]'
- en: '[PRE433]'
  id: totrans-616
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE433]'
- en: 'Replace the call to `useAppContext` with a call to `useSelector` to get the
    `permissions` state value:'
  id: totrans-617
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将对`useAppContext`的调用替换为对`useSelector`的调用，以获取`permissions`状态值：
- en: '[PRE434]'
  id: totrans-618
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE434]'
- en: '[PRE435]'
  id: totrans-619
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE435]'
- en: '[PRE436]'
  id: totrans-620
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE436]'
- en: '[PRE437]'
  id: totrans-621
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE437]'
- en: '[PRE438]'
  id: totrans-622
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE438]'
- en: '[PRE439]'
  id: totrans-623
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE439]'
- en: '[PRE440]'
  id: totrans-624
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE440]'
- en: '[PRE441]'
  id: totrans-625
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE441]'
- en: '[PRE442]'
  id: totrans-626
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE442]'
- en: Run the app by running `npm start` in the terminal. The app will look and behave
    just as it did before.
  id: totrans-627
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在终端中运行`npm start`来运行应用程序。应用程序的外观和行为将与之前一样。
- en: That completes the refactoring of the app to use Redux rather than React context.
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
  zh: 这就完成了将应用程序重构为使用Redux而不是React上下文的过程。
- en: 'Here’s a recap of the key points for using Redux:'
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是使用Redux的关键点的回顾：
- en: State is stored in a central store
  id: totrans-630
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 状态存储在中央存储中
- en: State is updated by dispatching actions that are handled by reducers
  id: totrans-631
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 状态通过分发由reducer处理的动作来更新
- en: A `Provider` component needs to be placed appropriately in the component tree
    to give components access to the Redux store
  id: totrans-632
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要适当地在组件树中放置`Provider`组件，以便组件可以访问Redux存储
- en: Components can select state using a `useSelector` hook and dispatch actions
    using a `useDispatch` hook
  id: totrans-633
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组件可以使用`useSelector`钩子选择状态，并使用`useDispatch`钩子分发动作
- en: As you have experienced, even using the Redux Toolkit requires many steps when
    using Redux to manage state. It is overkill for simple state management requirements
    but shines when there is a lot of shared application-level state.
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所经历的，即使使用Redux Toolkit，在使用Redux管理状态时也需要许多步骤。对于简单的状态管理需求来说，这有点过度，但在有大量共享应用程序级状态时却非常出色。
- en: Summary
  id: totrans-635
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we built a small one-page app that contained components that
    needed to share state. We started by using our existing knowledge and used props
    to pass the state between the components. We learned that a problem with this
    approach was that components not needing access to the state are forced to access
    it if its child components do need access to it.
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们构建了一个包含需要共享状态的组件的小型单页应用程序。我们首先使用现有的知识，并使用属性在组件之间传递状态。我们了解到这种方法的一个问题是，不需要访问状态的组件被迫访问它，如果其子组件需要访问它的话。
- en: We moved on to learn about React context and refactored the app to use it. We
    learned that React context can store state using `useState` or `useReducer`. The
    state can then be provided to components in the tree using the context’s `Provider`
    component. Components then access the context state via the `useContext` hook.
    We found that this was a much nicer solution than passing the state via props,
    particularly when many components need access to the state.
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
  zh: 我们继续学习React上下文，并将应用程序重构为使用它。我们了解到React上下文可以使用`useState`或`useReducer`存储状态。然后，可以通过上下文的`Provider`组件将状态提供给树中的组件。然后，组件通过`useContext`钩子访问上下文状态。我们发现这比通过属性传递状态要好得多，尤其是当许多组件需要访问状态时。
- en: Next, we learned about Redux, which is similar to React context. A difference
    is that there can only be a single Redux store containing the state, but there
    can be many React contexts. We learned that a `Provider` component needs to be
    added to the component tree to give components access to the Redux store. Components
    select state using the `useSelector` hook and dispatch actions using the `useDispatch`
    hook. Reducers handle actions and then update the state accordingly.
  id: totrans-638
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们学习了Redux，它与React上下文类似。一个区别是，只能有一个包含状态的Redux存储，但可以有多个React上下文。我们了解到需要将`Provider`组件添加到组件树中，以便组件可以访问Redux存储。组件使用`useSelector`钩子选择状态，并使用`useDispatch`钩子分发动作。然后，reducer处理动作并相应地更新状态。
- en: In the next chapter, we will learn how to work with REST APIs in React.
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何在React中与REST API一起工作。
- en: Questions
  id: totrans-640
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'Answer the following questions to check what you have learned in this chapter:'
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
  zh: 回答以下问题以检查您在本章中学到的内容：
- en: 'We have a context defined as follows to hold the theme state for an app:'
  id: totrans-642
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们定义了一个上下文，如下所示，以保存应用程序的主题状态：
- en: '[PRE443]'
  id: totrans-643
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE443]'
- en: '[PRE444]'
  id: totrans-644
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE444]'
- en: '[PRE445]'
  id: totrans-645
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE445]'
- en: '[PRE446]'
  id: totrans-646
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE446]'
- en: '[PRE447]'
  id: totrans-647
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE447]'
- en: '[PRE448]'
  id: totrans-648
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE448]'
- en: '[PRE449]'
  id: totrans-649
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE449]'
- en: '[PRE450]'
  id: totrans-650
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE450]'
- en: '[PRE451]'
  id: totrans-651
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE451]'
- en: '[PRE452]'
  id: totrans-652
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE452]'
- en: '[PRE453]'
  id: totrans-653
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE453]'
- en: The code doesn’t compile though; what is the problem?
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管代码可以编译，但问题是什么？
- en: 'The context from question 1 has a provider wrapper called `ThemeProvider`,
    which is added to the component tree as follows:'
  id: totrans-655
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 问题1的上下文中有一个名为`ThemeProvider`的提供者包装器，它被添加到组件树中，如下所示：
- en: '[PRE454]'
  id: totrans-656
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE454]'
- en: '[PRE455]'
  id: totrans-657
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE455]'
- en: '[PRE456]'
  id: totrans-658
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE456]'
- en: '[PRE457]'
  id: totrans-659
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE457]'
- en: '[PRE458]'
  id: totrans-660
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE458]'
- en: The theme state is `undefined` when destructured from `useContext` in the `Footer`
    component. What is the problem?
  id: totrans-661
  prefs: []
  type: TYPE_NORMAL
  zh: 当在`Footer`组件中使用`useContext`解构时，主题状态是`undefined`。问题是什么？
- en: Is it possible to have two React contexts in an app?
  id: totrans-662
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在应用程序中是否可以有两个React上下文？
- en: Is it possible to have two Redux stores in an app?
  id: totrans-663
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在应用程序中是否可以有两个Redux存储？
- en: 'The following code dispatches an action to change the theme:'
  id: totrans-664
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码分发了一个动作来更改主题：
- en: '[PRE459]'
  id: totrans-665
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE459]'
- en: '[PRE460]'
  id: totrans-666
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE460]'
- en: '[PRE461]'
  id: totrans-667
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE461]'
- en: There is a problem with this code. What is this problem?
  id: totrans-668
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码存在问题。问题是什么？
- en: In a React component, is it possible to use state only required by this component
    using `useState` as well as state from a Redux store?
  id: totrans-669
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在一个 React 组件中，是否可以使用 `useState` 以及来自 Redux 存储的状态来仅使用本组件所需的状态？
- en: 'In this chapter, when we implemented the Redux slice, the action handlers appeared
    to directly update the state, as in the following example:'
  id: totrans-670
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在本章中，当我们实现 Redux 切片时，动作处理程序似乎直接更新了状态，如下例所示：
- en: '[PRE462]'
  id: totrans-671
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE462]'
- en: '[PRE463]'
  id: totrans-672
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE463]'
- en: '[PRE464]'
  id: totrans-673
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE464]'
- en: '[PRE465]'
  id: totrans-674
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE465]'
- en: '[PRE466]'
  id: totrans-675
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE466]'
- en: '[PRE467]'
  id: totrans-676
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE467]'
- en: '[PRE468]'
  id: totrans-677
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE468]'
- en: Why are we allowed to mutate the state? I thought that state in React had to
    be immutable?
  id: totrans-678
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么我们可以修改状态？我以为 React 中的状态必须是不可变的？
- en: Answers
  id: totrans-679
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 答案
- en: '`createContext` must be passed a default value when using it with TypeScript.
    Here’s the corrected code:'
  id: totrans-680
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在使用 TypeScript 时，`createContext` 必须传递一个默认值。以下是修正后的代码：
- en: '[PRE469]'
  id: totrans-681
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE469]'
- en: '[PRE470]'
  id: totrans-682
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE470]'
- en: '[PRE471]'
  id: totrans-683
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE471]'
- en: '[PRE472]'
  id: totrans-684
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE472]'
- en: '[PRE473]'
  id: totrans-685
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE473]'
- en: '`Footer` must be placed inside `ThemeProvider` as follows:'
  id: totrans-686
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Footer` 必须按照以下方式放置在 `ThemeProvider` 内：'
- en: '[PRE474]'
  id: totrans-687
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE474]'
- en: '[PRE475]'
  id: totrans-688
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE475]'
- en: '[PRE476]'
  id: totrans-689
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE476]'
- en: '[PRE477]'
  id: totrans-690
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE477]'
- en: '[PRE478]'
  id: totrans-691
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE478]'
- en: Yes, there is no limit on the number of React contexts in an app.
  id: totrans-692
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是的，在应用中 React 上下文的数量没有限制。
- en: No, only a single Redux store can be added to an app.
  id: totrans-693
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不，一个应用中只能添加一个 Redux 存储。
- en: '`useDispatch` can’t be used directly to dispatch an action – it returns a function
    that can be used to dispatch an action:'
  id: totrans-694
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`useDispatch` 不能直接用来分发动作——它返回一个函数，可以用来分发动作：'
- en: '[PRE479]'
  id: totrans-695
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE479]'
- en: '[PRE480]'
  id: totrans-696
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE480]'
- en: '[PRE481]'
  id: totrans-697
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE481]'
- en: '[PRE482]'
  id: totrans-698
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE482]'
- en: Yes, local state defined using `useState` or `useReducer` can be used alongside
    shared state from a Redux store.
  id: totrans-699
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是的，使用 `useState` 或 `useReducer` 定义的本地状态可以与来自 Redux 存储的共享状态一起使用。
- en: 'The Redux Toolkit uses a library called `state` object without mutating it.
    For more information on *immer*, see the following link: [https://github.com/immerjs/immer](https://github.com/immerjs/immer).'
  id: totrans-700
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Redux Toolkit 使用一个名为 `state` 对象的库，而不对其进行修改。有关 *immer* 的更多信息，请参阅以下链接：[https://github.com/immerjs/immer](https://github.com/immerjs/immer)。
