- en: '2'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating a Todo List App
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have a development environment set up, we will get started with
    writing a small first application. In this chapter, we will create a Todo list
    app, which will teach us how the reactivity of Vue.js and the virtual DOM works.
    You can use the Todo list app as a guide to track progress in this book!
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s make it an assignment with some practical requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: We will make sure that you see a list of items
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each item will have a checkbox
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The list will be sorted by unchecked items first and checked items second
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The status of an item should be preserved by the browser on future visits
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are different ways of writing a valid Vue.js component. Currently, the
    Composition API is preferred over the Options API. The Options API uses an object-oriented
    approach, while the Composition API allows for a more reusable way of writing
    and organizing your code.
  prefs: []
  type: TYPE_NORMAL
- en: In this book, we will use the Composition API notation with shorthand for the
    setup function unless noted otherwise. This way of writing code removes lots of
    noise and repetitive operations from your components and is a very efficient way
    of working. We’ll also use the TypeScript variant since it is supported out of
    the box and offers a better **Developer eXperience** (**DX**) by facilitating
    strict typing.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'You can read more about the syntax here: [https://vuejs.org/api/sfc-script-setup.html#script-setup](https://vuejs.org/api/sfc-script-setup.html#script-setup).
    More about defining components using TypeScript can be found here: [https://vuejs.org/guide/typescript/composition-api.html#using-script-setup](https://vuejs.org/guide/typescript/composition-api.html#using-script-setup).'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the CLI tool to create a custom environment for an app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vue.js reactivity concept
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Styling with CSS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: First glance at Vue.js DevTools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have no technical requirements other than what we’ve covered in the previous
    chapter, so we can get started right away!
  prefs: []
  type: TYPE_NORMAL
- en: A new project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let’s start by scaffolding out a new project, using the CLI commands from the
    previous chapter. Open a Terminal window in your `projects` folder and use the
    following instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Hit *y* to proceed, use `vue-todo-list` as the project name, and select the
    options shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.1 – The setup configuration for the Todo list app](img/B19563_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.1 – The setup configuration for the Todo list app
  prefs: []
  type: TYPE_NORMAL
- en: Go ahead and follow the given instructions to install the dependencies and open
    your favorite IDE to get started.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: '`npm` offers a shorthand for installing, by typing `npm i` instead of `npm
    install`. Read more about `npm` commands here: [https://docs.npmjs.com/cli/v6/commands](https://docs.npmjs.com/cli/v6/commands).'
  prefs: []
  type: TYPE_NORMAL
- en: Cleaning up the default installation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s first clean up the `components` folder by removing `HelloWorld.vue`, `TheWelcome.vue`,
    `WelcomeItem.vue`, and the `icons` folder. Then we’ll remove the references from
    `App.vue` and clean up the template.
  prefs: []
  type: TYPE_NORMAL
- en: You will see a `__tests__` folder in the `components` folder, which is added
    by installing Vitest. You can ignore it for now. Otherwise, the `components` folder
    should be empty.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `App.vue` file should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The changes will result in a blank page since we’ve removed all the default
    elements! Now we can start to build our own application from the ground up.
  prefs: []
  type: TYPE_NORMAL
- en: Building up the app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will add a couple of components and compose the Todo app
    to follow the requirements, as listed at the beginning of this chapter (see *Technical
    requirements*). We’ll add the features step by step.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start simply, with an `AppHeader` component. Create the `AppHeader.vue`
    (remember: Vue.js recommends a filename that consists of at least two camel-cased
    words) file in the `components` folder. This will just be a static component with
    a `template` and `css` block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: A Vue component usually consists of template, script, and style blocks. Not
    all are mandatory (we’re not adding any scripts to this component), but between
    those three, we can define every aspect of our component. In this book, we’ll
    see numerous examples of this pattern in practice.
  prefs: []
  type: TYPE_NORMAL
- en: The template is just a title representation, and we’ll use the `scoped` style
    block to apply CSS rules to the markup. Note the `scoped` attribute, which makes
    sure that our CSS doesn’t affect other components in the application.
  prefs: []
  type: TYPE_NORMAL
- en: Using scoped CSS, we can write clean, readable rules. For single file components,
    this approach should be the default.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s continue building our app by creating a list component.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the ListItem component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We’ll create the `ListItem.vue` component in the same folder. It will be the
    representation of an individual item on the list, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: We define the props that will be passed to the component. Props are the properties
    that can be controlled from outside of the component. These are usually values
    that are being processed by the component and determine the unique characteristics
    of the component in that state. In rare cases, you could pass down a function
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: By using the `defineProps` method, we’re using the Vue.js API to declare our
    props properly.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second bit is the way that the component should render HTML to the virtual
    DOM. Vue.js uses a syntax that is HTML-based. You can read more about it here:
    [https://vuejs.org/guide/essentials/template-syntax.html#template-syntax](https://vuejs.org/guide/essentials/template-syntax.html#template-syntax).'
  prefs: []
  type: TYPE_NORMAL
- en: 'We’re marking up an HTML `<label>` tag with a dynamic class name: it will render
    as `class="checked"` when the `isChecked` property evaluates as `true`. In the
    label, we’ll add a checkbox that has a dynamic `checked` attribute: it too is
    connected to the `isChecked` prop. The `<slot></slot>` tag is Vue.js-specific
    and it allows us to put any content in that spot, from the parent component.'
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, we define the CSS rules for this component, similar to what we did with
    `AppHeader.vue`.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the list
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With the `ListItem` component available to us, we can start generating the
    list. We’ll create a new component for this, which will hold the list information
    and use it to render all the individual items on the list as well as to provide
    the interactive features:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s create a simple file called `TodoList.vue`, with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Before we continue, we want to be able to display our app while we’re working
    on it. So, on the `App.vue` file, follow a similar approach of importing the `AppHeader.vue`
    and `TodoList.vue` files and adding the components to the template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now that we can see what we’re doing, it is a good time to start the development
    server. If you’re using **Visual Studio Code** (**VSCode**), there’s actually
    a terminal built into the IDE:'
  prefs: []
  type: TYPE_NORMAL
- en: '**macOS users**: *⌃* + *`*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Windows users**: *Ctrl* + *`*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Linux users**: *Ctrl* + *Shift* + *`*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you run the `npm run dev` command, it will start the development server and
    provide you with a local preview URL.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.2 – Output of the npm run dev command](img/B19563_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.2 – Output of the npm run dev command
  prefs: []
  type: TYPE_NORMAL
- en: 'Since we don’t have a functional app right now, we need to work on its core
    feature: the list. You can leave the development server running since it will
    automatically update (this is called hot reloading) with the newly written code.'
  prefs: []
  type: TYPE_NORMAL
- en: Making a list
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The actual functionality resides in the `TodoList.vue` component, which we’ll
    now create. We’ll start small and add the more complex features in steps. Let’s
    start with a static list that has multiple list statuses.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look at the `script` block first. Apart from importing the `ListItem`
    component, we’re defining `type` for `Item`, which consists of the `title` property
    as a string and the optional property `checked` as a Boolean. TypeScript lets
    us define a `Type` alias, which our IDE can plug into when interacting with `Type`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, when accessing the properties on `item` in the `ListItem`
    template, the IDE already recognizes the `title` and optional `checked` properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: When constructing the `ListItems` array, we assign `Type` as an array of that
    type using the `[]` symbols. We immediately fill the `ListItems` array with a
    list of items. This means that TypeScript could also infer the types, but it is
    a better practice to explicitly set the types where possible.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the template, we are creating an unordered list element and use the `v-for`
    directive to iterate over the items in the array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The `v-for` directive is used to loop over collections and repeat the template
    that marks the collection. For every item, the current value is assigned to the
    first argument (`item`) and optionally provides an index of the collection as
    the second argument (`key`).
  prefs: []
  type: TYPE_NORMAL
- en: The `v-for` directive repeats the `<li>` item with a `<ListItem />` component
    enclosed. For every item, we fill the `<ListItem />` component with the `is-checked`
    and `title` properties for that item.
  prefs: []
  type: TYPE_NORMAL
- en: The `key` attribute helps Vue.js in keeping track of the changes that are being
    made so that it can update the virtual DOM more efficiently.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, we have added a `scoped` style block to stylize the elements for the
    browser. There’s not much going on here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: We now have a non-interactive Todo list app and have met the first two requirements
    already. Let’s take a look at how we can add some interactivity.
  prefs: []
  type: TYPE_NORMAL
- en: Reactivity explained
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you have opened the app and clicked an item, you can toggle the checkbox,
    but on refreshing the page, nothing happens. Also, if you’ve looked closely at
    the CSS of the `<ListItem />` component, you may have noticed that strikethrough
    styling should be applied on a checked item. This is only the case on the first
    item.
  prefs: []
  type: TYPE_NORMAL
- en: The toggling of the checkbox is, in fact, native browser behavior and doesn’t
    signify anything in the context of the state of the Todo list!
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to wire the changes in the UI to the state of the application. In order
    to get started, we need to import some utilities from the Vue.js package. Add
    these two lines to the top of the `<``script>` block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The `ref` function is used to add reactivity and track updates to certain parts
    of the code. The value of `ref` is automatically inferred by TypeScript, but for
    complex types, we can specify the type.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Vue.js also offers a `reactive` utility to mark reactivity. There are slight
    differences between the two, where `ref` can be used to track primitives and objects
    and `reactive` can only be initialized with an object. In general, you can opt
    for consistency in code by choosing `ref` over `reactive`. The only *downside*
    is that you have to access the value of the reactive item by a `.value` property
    in the script block. When using the variable in the `template` block, it is automatically
    unwrapped by Vue.js. It’s therefore a small concession for being able to use `ref`
    consistently.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have imported the utility, we can mark the `listItems` to be tracked
    by wrapping the contents in the `ref` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Note that capitalized `Ref` is used to type the value and lowercase `ref` is
    used as a wrapper of the array of items. If we now want to access the values in
    the script block, we need to access them by using `listItems.value`.
  prefs: []
  type: TYPE_NORMAL
- en: Now that the `listItems` are reactive, the virtual DOM will respond automatically
    to changes on the variables. We can add a method that changes an item so that
    it will be reflected in the user interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s add the following function to the `script` block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Adopting Robert C Martin’s Clean Code philosophy, I split the instruction into
    separate functions with their own clear intent. When calling `updateItem` with
    `item` as an argument, it will try to find it in the `itemList` and toggle the
    `checked` property on the object.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see that TypeScript is guiding us to a slightly better solution: because
    `findItemInList` could return an `undefined` value and `toggleItemChecked` expects
    a parameter, the argument of calling the `toggleItemChecked` function gets a squiggly
    line.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.3 – TypeScript hinting at a possible problem in our code](img/B19563_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.3 – TypeScript hinting at a possible problem in our code
  prefs: []
  type: TYPE_NORMAL
- en: 'We can fix this by adding a statement surrounding the call of the `toggleItemChecked`
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'With the `script` block changes complete, we can attach the interactivity to
    the user interface in the `template` block. We want the visitor to be able to
    click on a `ListItem` to mark it as complete. Vue.js has a built-in directive
    for this: `v-on`. This acts as an event handler and supports a couple of modifiers
    as well. For more information, see [https://vuejs.org/api/built-in-directives.html#v-on](https://vuejs.org/api/built-in-directives.html#v-on).'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can add it to the template like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: We’ve also added a `.prevent` modifier to prevent the default behavior of the
    checkbox mechanics. This is all the code that’s needed to call the method!
  prefs: []
  type: TYPE_NORMAL
- en: There’s even a shorthand for `v-on:click`, by using `@click`. You will see examples
    of both directives in resources, so it’s good to understand they are the same.
  prefs: []
  type: TYPE_NORMAL
- en: Under the hood, Vue.js uses the `ref` function to register a series of watchers
    on the values. The template engine is used to generate a virtual DOM (a node tree
    representation of the elements that make up the component). Once a reactive value
    is changed, the virtual DOM node where that value is used is also changed.
  prefs: []
  type: TYPE_NORMAL
- en: Vue.js compares the changes to the DOM and updates only the necessary elements
    in the real DOM to reflect the state. Being able to granularly update the DOM
    very accurately is what makes Vue.js 3 a highly performant framework, since it
    doesn’t have to traverse whole branches of virtual DOM nodes!
  prefs: []
  type: TYPE_NORMAL
- en: Let’s use the list that we have as input for our next step, where we’ll look
    at sorting.
  prefs: []
  type: TYPE_NORMAL
- en: Sorting the list
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We’re now perfectly capable of showing variables in the template. There are
    cases, however, when you have a need for more advanced expressions, such as, in
    our example, the requirement of sorting the list. For variables that have no side
    effects and include reactive data, you can use the Vue.js `computed` function.
  prefs: []
  type: TYPE_NORMAL
- en: Typically, you would use `computed` for filtering data, format expressions,
    displaying calculations, or Boolean conditionals. Let’s apply it to sort the list
    with completed items at the bottom.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we’ll import `computed` to the `TodoList` component. We can add it to
    the import where we also import the `ref` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'const sortedList = computed(() =>    [...listItems.value].sort((a, b) => (a.checked
    ? 1 : 0) - (b.checked ? 1 : 0))'
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'const setToStorage = (items: Item[]): void => {  localStorage.setItem(''list-items'',
    JSON.stringify(items))'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: 'const getFromStorage = (): Item[] | [] => {'
  prefs: []
  type: TYPE_NORMAL
- en: const stored = localStorage.getItem('list-items')
  prefs: []
  type: TYPE_NORMAL
- en: if (stored) {
  prefs: []
  type: TYPE_NORMAL
- en: return JSON.parse(stored)
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: return []
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: import { ref, onMounted, computed } from 'vue'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'const storageItems: Ref<Item[]> = ref([])'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'const initListItems = (): void => {  if (storageItems.value?.length === 0)
    {'
  prefs: []
  type: TYPE_NORMAL
- en: const listItems = [
  prefs: []
  type: TYPE_NORMAL
- en: '{ title: ''Make a todo list app'', checked: true },'
  prefs: []
  type: TYPE_NORMAL
- en: '{ title: ''Predict the weather'', checked: false },'
  prefs: []
  type: TYPE_NORMAL
- en: '{ title: ''Read some comics'', checked: false },'
  prefs: []
  type: TYPE_NORMAL
- en: '{ title: ''Let\''s get cooking'', checked: false },'
  prefs: []
  type: TYPE_NORMAL
- en: '{ title: ''Pump some iron'', checked: false },'
  prefs: []
  type: TYPE_NORMAL
- en: '{ title: ''Track my expenses'', checked: false },'
  prefs: []
  type: TYPE_NORMAL
- en: '{ title: ''Organise a game night'', checked: false },'
  prefs: []
  type: TYPE_NORMAL
- en: '{ title: ''Learn a new language'', checked: false },'
  prefs: []
  type: TYPE_NORMAL
- en: '{ title: ''Publish my work'' }'
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: setToStorage(listItems)
  prefs: []
  type: TYPE_NORMAL
- en: storageItems.value = listItems
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: onMounted(() => {  initListItems()
  prefs: []
  type: TYPE_NORMAL
- en: storageItems.value = getFromStorage()
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'const updateItem = (item: Item): void => {  const updatedItem = findItemInList(item)'
  prefs: []
  type: TYPE_NORMAL
- en: if (updatedItem) {
  prefs: []
  type: TYPE_NORMAL
- en: toggleItemChecked(updatedItem)
  prefs: []
  type: TYPE_NORMAL
- en: setToStorage(storageItems.value)
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: 'const findItemInList = (item: Item): Item | undefined => {'
  prefs: []
  type: TYPE_NORMAL
- en: return storageItems.value.find(
  prefs: []
  type: TYPE_NORMAL
- en: '(itemInList: Item) => itemInList.title === item.title'
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'const sortedList = computed(() =>  [...storageItems.value].sort((a, b) => (a.checked
    ? 1 : 0) - (b.checked ? 1 : 0))'
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
