["```js\n    npm install --save aws-sdk graphql-upload\n    ```", "```js\n    import { graphqlUploadExpress } from 'graphql-upload';\n    ```", "```js\n    case 'graphql':\n      (async () => {\n        await services[name].start();\n        app.use(graphqlUploadExpress());\n        services[name].applyMiddleware({ app });\n      })();\n      break;\n    ```", "```js\n    scalar Upload\n    ```", "```js\n    type File {\n      filename: String!\n      mimetype: String!\n      encoding: String!\n      url: String!\n    }\n    ```", "```js\n    uploadAvatar (\n      file: Upload!\n    ): File @auth\n    ```", "```js\n    import { GraphQLUpload } from 'graphql-upload';\n    import aws from 'aws-sdk';\n    const s3 = new aws.S3({\n      signatureVersion: 'v4',\n      region: 'eu-central-1',\n    });\n    ```", "```js\n    Upload: GraphQLUpload\n    ```", "```js\n    async uploadAvatar(root, { file }, context) {\n      const { createReadStream, filename, mimetype,\n        encoding } = await file;\n      const bucket = 'apollo-book';\n      const params = {\n          Bucket: bucket,\n          Key: context.user.id + '/' + filename,\n          ACL: 'public-read',\n          Body: createReadStream()\n      };\n      const response = await s3.upload(params).promise();\n      return User.update({\n          avatar: response.Location\n      },\n      {\n          where: {\n              id: context.user.id\n          }\n      }).then(() => {\n          return {\n              filename: filename,\n              url: response.Location\n          }\n      });\n    },\n    ```", "```js\nhttps://apollo-book.s3.eu-central-1.amazonaws.com/1/test.png\n```", "```js\nexport AWS_ACCESS_KEY_ID=YOUR_AWS_KEY_ID\nexport AWS_SECRET_ACCESS_KEY=YOUR_AWS_SECRET_KEY\n```", "```js\n    react-modal package offers various dialog options that you can use in many different situations. The react-cropper package is a wrapper package around Cropper.js. The react-dropzone package provides an easy implementation for file drop functionality.\n    ```", "```js\n    import 'cropperjs/dist/cropper.css';\n    ```", "```js\n    npm install --save apollo-upload-client\n    ```", "```js\n    import { createUploadLink } from 'apollo-upload-client';\n    ```", "```js\n    createUploadLink({\n      uri: 'http://localhost:8000/graphql',\n      credentials: 'same-origin',\n    }),\n    ```", "```js\n    import { gql, useMutation } from '@apollo/client';\n    const UPLOAD_AVATAR = gql'\n      mutation uploadAvatar($file: Upload!) {\n        uploadAvatar(file : $file) {\n          filename\n          url\n        }\n      }\n    ';\n    export const getUploadAvatarConfig = () => ({\n      update(cache, { data: { uploadAvatar } }) {\n        console.log(uploadAvatar);\n        if(uploadAvatar && uploadAvatar.url) {\n          cache.modify({\n            fields: {\n              currentUser(user, { readField }) {\n                cache.modify({\n                  id: user,\n                  fields: {\n                    avatar() {\n                      return uploadAvatar.url;\n                    }\n                  }\n                })\n              }\n            }\n          });\n        }\n      }\n    });\n    export const useUploadAvatarMutation = () => useMutation(UPLOAD_AVATAR, getUploadAvatarConfig());\n    ```", "```js\n    import { gql } from '@apollo/client';\n    export const USER_ATTRIBUTES = gql'\n      fragment userAttributes on User {\n        id\n        username\n        avatar\n      }\n    ';\n    ```", "```js\n    import React, { useState, useRef } from 'react';\n    import Modal from 'react-modal';\n    import Cropper from 'react-cropper';\n    import { useDropzone } from 'react-dropzone';\n    import { useUploadAvatarMutation } from '../apollo/mutations/uploadAvatar';\n    Modal.setAppElement('#root');\n    const modalStyle = {\n      content: {\n        width: '400px',\n        height: '450px',\n        top: '50%',\n        left: '50%',\n        right: 'auto',\n        bottom: 'auto',\n        marginRight: '-50%',\n        transform: 'translate(-50%, -50%)'\n      }\n    };\n    ```", "```js\n    function dataURItoBlob(dataURI) {\n      var byteString = atob(dataURI.split(',')[1]);\n      var mimeString = \n        dataURI.split(',')[0].split(':')[1].split(';')[0];\n      var ia = new Uint8Array(byteString.length);\n\n      for (var i = 0; i < byteString.length; i++) {\n        ia[i] = byteString.charCodeAt(i);\n      }\n      const file = new Blob([ia], {type:mimeString});\n      return file;\n    }\n    ```", "```js\n    const AvatarModal = ({ isOpen, showModal }) => {\n      const [file, setFile] = useState(null);\n      const [result, setResult] = useState(null);\n      const [uploadAvatar] = useUploadAvatarMutation();\n      const cropperRef = useRef(null);\n    }\n    ```", "```js\n    const saveAvatar = () => {\n      const resultFile = dataURItoBlob(result);\n      resultFile.name = file.filename;\n      uploadAvatar({variables: { file: resultFile \n        }}).then(() => {\n        showModal();\n      });\n    };\n    const changeImage = () => {\n      setFile(null);\n    };\n    const onDrop = (acceptedFiles) => {\n      const reader = new FileReader();\n      reader.onload = () => {\n        setFile({\n          src: reader.result,\n          filename: acceptedFiles[0].name,\n          filetype: acceptedFiles[0].type,\n          result: reader.result,\n          error: null,\n        });\n      };\n      reader.readAsDataURL(acceptedFiles[0]);\n    };\n    const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop});\n    const onCrop = () => {\n      const imageElement = cropperRef?.current;\n      const cropper = imageElement?.cropper;\n      setResult(cropper.getCroppedCanvas().toDataURL());\n    };\n    ```", "```js\n    return (\n      <Modal\n        isOpen={isOpen}\n        onRequestClose={showModal}\n        contentLabel=\"Change avatar\"\n        style={modalStyle}\n      >\n        {!file &&\n          (<div className=\"drop\" {...getRootProps()}>\n            <input {...getInputProps()} />\n            {isDragActive ? <p>Drop the files here ...</p>\n            : <p>Drag 'n' drop some files here, or click\n            to select files</p>}\n            </div>)\n          }\n          {file && <Cropper ref={cropperRef}\n          src={file.src} style={{ height: 400, width:\n          \"100%\" }} initialAspectRatio={16 / 9}\n          guides={false} crop={onCrop}/>}\n          {file && (\n            <button className=\"cancelUpload\" \n              onClick={changeImage}>Change image</button>\n          )}\n          <button className=\"uploadAvatar\"\n            onClick={saveAvatar}>Save</button>\n        </Modal>\n      )\n    ```", "```js\n    export default AvatarModal\n    ```", "```js\n    import AvatarModal from '../avatarModal';\n    ```", "```js\n    const [isOpen, setIsOpen] = useState(false);\n    const showModal = () => {\n      setIsOpen(!isOpen);\n    }\n    ```", "```js\n    return (\n      <div className=\"user\">\n        <img src={user.avatar} onClick={() => showModal()} />\n        <AvatarModal isOpen={isOpen}\n          showModal={showModal}/>\n        <span>{user.username}</span>\n      </div>\n    );\n    ```"]