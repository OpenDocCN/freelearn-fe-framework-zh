["```js\nfunction simpleWorklet() {\n  \"worklet\";\n  console.log(\"Hello from UI thread\");\n} \n```", "```js\nexpo install react-native-reanimated \n```", "```js\nmodule.exports = function(api) {\n  api.cache(true);\n  return {\n    presets: ['babel-preset-expo'],\n    plugins: ['react-native-reanimated/plugin'],\n  };\n}; \n```", "```js\nexpo start --clear \n```", "```js\nexport const TodoItem = ({ id, title, onPress }) => {\n  return (\n    <Animated.View entering={SlideInLeft}\n      exiting={SlideOutRight}>\n      <TouchableOpacity onPress={() => onPress(id)}\n        style={styles.todoItem}>\n        <Text>{title}</Text>\n      </TouchableOpacity>\n    </Animated.View>\n  );\n}; \n```", "```js\nexport default function App() {\n  const [todoList, setTodoList] = useState([]);\n  const addTask = () => {\n    setTodoList([\n      ...todoList,\n      { id: String(new Date().getTime()), title: \"New task\"\n        },\n    ]);\n  };\n  const deleteTask = (id) => {\n    setTodoList(todoList.filter((todo) => todo.id !== id));\n  }; \n```", "```js\n return (\n    <View style={styles.container}>\n      <View style={{ flex: 1 }}>\n        {todoList.map(({ id, title }) => (\n          <TodoItem key={id} id={id} title={title}\n            onPress={deleteTask} />\n        ))}\n      </View>\n      <Button onPress={addTask} title=\"Add\" />\n    </View>\n  );\n} \n```", "```js\n const radius = useSharedValue(30);\n  const opacity = useSharedValue(1);\n  const scale = useSharedValue(1);\n  const color = useSharedValue(0);\n  const backgroundColor = useDerivedValue(() => {\n    return interpolateColor(color.value, [0, 1], [\"orange\",      \"red\"]);\n     });\n  const animatedStyles = useAnimatedStyle(() => {\n    return {\n      opacity: opacity.value,\n      borderRadius: radius.value,\n      transform: [{ scale: scale.value }],\n      backgroundColor: backgroundColor.value,\n    };\n  }, []); \n```", "```js\n const onPressIn = () => {\n    radius.value = withSpring(20);\n    opacity.value = withSpring(0.7);\n    scale.value = withSpring(0.9);\n  };\n  const onLongPress = () => {\n    scale.value = withSpring(0.8);\n    color.value = withSpring(1);\n  };\n  const onPressOut = () => {\n    radius.value = withSpring(30);\n    opacity.value = withSpring(1);\n    scale.value = withSpring(1, { damping: 50 });\n    color.value = withSpring(0);\n  }; \n```", "```js\n <View style={styles.container}>\n      <Animated.View style={[styles.buttonContainer,\n        animatedStyles]}>\n        <Pressable\n          onPressIn={onPressIn}\n          onPressOut={onPressOut}\n          onLongPress={onLongPress}\n          style={styles.button}\n        >\n          <Text style={styles.buttonText}>Press me</Text>\n        </Pressable>\n      </Animated.View>\n    </View> \n```"]