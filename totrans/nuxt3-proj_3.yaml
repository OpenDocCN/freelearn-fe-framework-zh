- en: '3'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building a Real Estate Listing Project to Grasp Routing, Views, Layouts, and
    Plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Welcome back, developers! As you step into [*Chapter 3*](B19760_03.xhtml#_idTextAnchor055),
    you’re not stepping into unknown territory; you’re entering a more advanced phase
    of your Nuxt 3 journey. If you’ve been with us from the start, you’re already
    familiar with setting up Nuxt 3 projects and integrating Tailwind CSS, among other
    things. This chapter will take your existing knowledge to the next level as we
    dive into a real estate listing project.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll kick things off the way we usually do—by creating a new Nuxt 3 project,
    with Tailwind CSS for styling and Google Fonts for typography. While this is familiar
    ground, the topics we cover will bring new layers of complexity, setting the stage
    for the new concepts that await you.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter promises to be an enlightening experience as it focuses on critical
    aspects of Nuxt 3 that you’ve yet to explore. You’ll get to delve into advanced
    topics such as layouts, routing, and plugins. Along the way, you’ll learn how
    to define default layouts, dig deeper into the Nuxt 3 routing mechanism, and explore
    plugins by adding `Dayjs` for date formatting.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Defining a default layout for the website and overriding it with a 404 page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the home page and exploring TypeScript support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a dynamic listing page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and validating a property details page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a plugin to use `Dayjs` for formatting dates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The code files for this chapter can be found at [https://github.com/PacktPublishing/Nuxt-3-Projects/tree/main/chapter03](https://github.com/PacktPublishing/Nuxt-3-Projects/tree/main/chapter03).
  prefs: []
  type: TYPE_NORMAL
- en: The CiA video for this chapter can be found on [https://packt.link/2oM0A](https://packt.link/2oM0A)
  prefs: []
  type: TYPE_NORMAL
- en: Essential background- understanding Nuxt 3 routing, layouts, and plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before diving into the code, it’s crucial to grasp some key concepts that will
    be integral to this chapter’s real estate listing project:'
  prefs: []
  type: TYPE_NORMAL
- en: '`pages` directory. This eradicates the manual chore of defining routes, while
    still accommodating complex routing scenarios through the `nuxt.config.js` file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<slot />` components to showcase page content. A `layouts/default.vue` file
    is employed by default, but crafting custom layouts and assigning them in your
    page metadata is straightforward.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/plugins` directory are auto-loaded during Nuxt app creation. Plugins can
    be tailored to function only on the client or server side by appending a `.client`
    or `.server` suffix to the filename.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These core concepts provide the necessary backdrop to navigate through this
    chapter’s project adeptly. As you traverse through the examples, you’ll notice
    how these elements collaboratively contribute to a well-structured, functional,
    and adaptable application.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up your real estate listing project in Nuxt 3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we explored the integration of `TailwindCSS` and `@nuxtjs/google-fonts`
    into a Nuxt 3 project. As we embark on creating our new project (let’s name it
    “Homescape”), we’ll employ similar techniques.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let’s create a new project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Upon successful initialization, navigate to the project directory and open
    it with VS Code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Next, we’ll bring in `TailwindCSS` for styling, and `@nuxtjs/google-font` to
    automatically import any Google font.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install them, run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Post-installation, update the `nuxt.config.ts` file to add the module and set
    up Google Fonts configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, let’s generate `tailwind.config.js` at the root of our project with some
    default variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The `tailwind.config.js` file will act as our vessel for custom styling, component
    definition, and theme adjustments, ensuring our utility classes are optimized
    and maintaining a consistent design language throughout our project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigating from our generalized setup into specificity, here’s my preferred
    startup configuration in Tailwind CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Here, we’ve opted for a palette that includes shades of amber, slate, red, and
    yellow. These colors will lend a distinctive character to our real estate listing
    website. For those interested in the other configuration details, such as fonts
    and container settings, refer to [*Chapter 2*](B19760_02.xhtml#_idTextAnchor036),
    where we covered these topics comprehensively.
  prefs: []
  type: TYPE_NORMAL
- en: 'Wrapping up the configuration setup, let’s put our adjustments to the test
    by crafting a simple layout. Navigate to your `app.vue` file and add this to the
    template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the expected output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.1: Homescape – initial page](img/B19760_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.1: Homescape – initial page'
  prefs: []
  type: TYPE_NORMAL
- en: With the initial project created, we are well-prepared to dive into the new
    aspects of our project. Let’s begin by defining the home page with a default layout,
    and tailoring it for the 404 page.
  prefs: []
  type: TYPE_NORMAL
- en: Defining a default layout for the website and overriding it with a 404 page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A well-structured layout is akin to the sturdy frame of a house, offering a
    solid foundation upon which distinct pages can seamlessly reside. It’s where you
    define common elements such as headers and footers just once, and they render
    consistently across your website, bringing a cohesive look and facilitating easier
    navigation for users.
  prefs: []
  type: TYPE_NORMAL
- en: As we transition to the latter part of this section, our focus shifts to handling
    unforeseen situations where a user lands on a non-existent page. We’ll explore
    how to craft a user-friendly 404 page in Nuxt that informs the user of the mishap
    and guides them back to the right path. So, let’s get started!
  prefs: []
  type: TYPE_NORMAL
- en: Defining a default layout
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s begin by creating a new folder called `layouts` in the root directory
    of your project, then create a new file within it named `default.vue`. This file
    will hold the structure shared across all pages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In the layout file, the `<slot />` element is where the content of individual
    pages will be injected.
  prefs: []
  type: TYPE_NORMAL
- en: 'Within the `app.vue` file, we should wrap our template with the `<NuxtLayout>`
    component to define our layout. All the page content will be displayed within
    this component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Now you should be able to see the demo header on the website.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.2: Homescape – with default layout](img/B19760_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.2: Homescape – with default layout'
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll implement the `default.vue` layout file to include three primary sections:
    a header, the main content area, and a footer, along with a newsletters section.
    This layout encapsulates the common structure that all pages in the application
    will inherit.'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s create our header component, which will serve as the primary navigation
    bar for our website.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the BaseHeader component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Initially, we’ll organize our project by creating a new directory called `base`
    within the `components` directory. This `base` directory will house global components
    that aren’t tied to any specific business section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the `base` directory, we create a new file named `Header.vue`. This
    file will hold all the code relevant to our header component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Nuxt facilitates an automatic component discovery mechanism, which is quite
    powerful. In our setup, we’ve placed the `Header.vue` component inside a base
    folder within the `components` directory. Due to Nuxt’s naming convention, this
    component is now accessible as `<base-header />` in our layouts and pages.
  prefs: []
  type: TYPE_NORMAL
- en: The naming convention is quite intuitive – the directory name is prefixed to
    the component name, separated by a hyphen. This not only makes component names
    unique but also groups related components together in a clear and organized manner.
    Moreover, it provides a straightforward way to identify the origin and grouping
    of a component just by its name, which can be a significant aid in a collaborative
    development environment or a large-scale project.
  prefs: []
  type: TYPE_NORMAL
- en: 'This `Header.vue` file will hold all the code relevant to our header component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: We’ve styled the header to be fixed at the top with a border at the bottom,
    employing Tailwind CSS classes for styling. The `navLinks` data property holds
    an array of link objects, which are rendered as navigation links in the template.
  prefs: []
  type: TYPE_NORMAL
- en: As we continue to build our website, we’ll craft a newsletter section and a
    footer component to enhance our web page’s structure and user engagement.
  prefs: []
  type: TYPE_NORMAL
- en: 'Both components will be created inside the `components/base` folder with the
    names `NewslettersSection.vue` and `Footer.vue`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The base-footer component consists of three sections: company name and address,
    listing by category, and additional info with useful links like FAQs, privacy
    policy, and terms of service. The listing by category section will be populated
    later with data fetched statically. The footer also includes a copyright notice,
    signifying the ownership of the website content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: With the individual components created,’it’s time to bring them together within
    our `default.vue` layout file. This layout serves as the structural blueprint
    for our pages, ensuring a consistent design across the website.
  prefs: []
  type: TYPE_NORMAL
- en: 'H’re’s how’we’ve structured our `default.vue` layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.3: Homescape – final default layout](img/B19760_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.3: Homescape – final default layout'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll notice that, currently, the header text is invisible, and the title overlaps
    with the header. However, once we introduce a hero section with a dark background
    and extend it to full height, the page aesthetics will significantly improve.
  prefs: []
  type: TYPE_NORMAL
- en: Having established a solid foundation with our layouts and essential components,
    let’s move on to creating the home page, listing pages, and an error page.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the home page and exploring TypeScript support
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building the home page and listing pages is a pivotal step in our project. It’s
    here that users will start their journey, browsing through various property listings.
    To begin crafting these pages, we need to set up a `pages` directory. This directory
    is essential for housing all our page components.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to the pages directory
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create the home page or “index” page, we need to create a new component
    inside the `pages` directory called `index.vue`, then override the `app.vue` component
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Notice that we used the `<NuxtPage />` component within `NuxtLayout` to render
    the current page component. This way, the structure defined in `app.vue` acts
    as a universal layout, while the content from individual pages gets injected at
    the point where `<NuxtPage />` is placed.
  prefs: []
  type: TYPE_NORMAL
- en: The `pages` directory is quite powerful. The file structure within this directory
    corresponds to the router structure of our application, and every `.vue` file
    becomes a route in our app. For instance, a `pages/about.vue` file automatically
    generates an `/about` route in our application.
  prefs: []
  type: TYPE_NORMAL
- en: Now, with the `pages` directory set up and `app.vue` customized to embrace individual
    pages, we are well on our way to defining the layouts for our home page and listing
    pages.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring TypeScript support
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we set sail on the task of creating pages with various property listings,
    it’s crucial to have a clear understanding and structure of the data we will be
    dealing with. In a real-world scenario, this data would be fetched from an API.
    However, for the scope of this chapter, we will be using static files to represent
    our data, keeping the transition to fetching data from an API smooth and straightforward
    in the upcoming chapters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The data in our application primarily revolves around properties and categories.
    We have three different datasets representing properties: `properties.ts`, `featuredProperties.ts`,
    and `recentlyListedProperties.ts`. Additionally, there’s a `categories.ts` file
    representing different property categories. All these datasets are structured
    in a way that simulates real-world data.'
  prefs: []
  type: TYPE_NORMAL
- en: Now, to ensure consistency and error-free handling of this data across our application,
    employing TypeScript is a wise choice. TypeScript provides a way to define strict
    types for our data, which significantly reduces the potential for bugs and makes
    the code more readable and easier to manage.
  prefs: []
  type: TYPE_NORMAL
- en: 'Nuxt 3 comes with built-in TypeScript support, which is a boon for developers
    keen on type safety. Our first step is to define a `Property` type. Let’s create
    a `types` folder at the root level of our project, and within it, an `index.ts`
    file. In this file, we’ll define our `Property` type as well as the `Category`
    type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: By exporting an empty object and declaring a global object that contains `Property`
    and `Category`, we make these types available globally in our application. This
    approach eliminates the need to import the type in every component. Now Let’s
    talk about best practices for creating components in a Nuxt project.
  prefs: []
  type: TYPE_NORMAL
- en: A note on the component path
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When organizing components in a Nuxt 3 project, we have the flexibility to
    structure our files in a way that best suits our development style and project
    needs. For example, consider the following component path:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'This will create the component within a nested directory, `property`, under
    the `components` root directory, allowing us to group all components related to
    property features in the same folder. Alternatively, we could place the component
    directly under the `components` root directory with a more flattened structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Both approaches enable us to call the component in our templates using the
    same tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: However, I prefer the first method as it helps organize related components together
    in the same folder, making the project structure more manageable, especially as
    the project grows.
  prefs: []
  type: TYPE_NORMAL
- en: We now have a blueprint for the project types and component paths, let’s start
    creating our components!
  prefs: []
  type: TYPE_NORMAL
- en: Create Property and Category Card Components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Begin by creating a folder called `property`. Inside it, create a `Card.vue`
    component that receives `property` as a prop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: In the snippet provided, we used the `Property` type because we’ve already defined
    it globally. Following that, `defineProps` is a utility from Vue.js used in the
    Composition API setup to define the types of our component props. In this instance,
    it specifies that the `property` prop should adhere to the structure outlined
    in the `Property` type.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the same way, we’ll create the `/``components/category/Card.vue` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Now let’s and start implementing the homepage and see how we will use `Property`
    and `Category` components within it.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the home page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We’ll kick off by creating a simple overlay background component inside the
    `base` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: This component will be used as an absolute background in the hero section, as
    well as the error page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, let’s craft the `HeroSection` component, which will serve as a welcoming
    visual for our visitors. This component will be housed within a dedicated home
    page folder, showcasing the organized and modular structure of our application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Following `HeroSection`, we’ll flesh out additional segments of our home page,
    namely the `FeaturedProperties` and `RecentlyListedProperties` sections. These
    sections will pull data from respective static files, rendering property cards
    to display an assortment of properties.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the `FeaturedProperties` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: A similar approach will be taken for `RecentlyListedProperties`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Additionally, we’ll craft a component for each property category and encapsulate
    them within an `ExploreCategories` component, which will also be placed on the
    home page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Each folder under the `components` directory is systematically organized to
    house relevant components, aiding in achieving a clean, well-structured, and manageable
    code base.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: All resources, the entire code base, and the assets utilized in this chapter
    are readily available in the associated repository for your reference and exploration.
  prefs: []
  type: TYPE_NORMAL
- en: 'Having followed through with the outlined steps, at this juncture, your application
    should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.4: Final home page](img/B19760_03_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.4: Final home page'
  prefs: []
  type: TYPE_NORMAL
- en: We’ve done an excellent job constructing our home page. Next, we’ll venture
    into creating the listing pages to further enhance our application’s functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a dynamic listing page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Dynamic routing is a fundamental concept in Nuxt that allows developers to build
    flexible and data-driven routes. Unlike static routes, where each route is predefined
    and fixed, dynamic routes adapt to the data they are provided, enabling a more
    scalable and maintainable routing structure.
  prefs: []
  type: TYPE_NORMAL
- en: In Nuxt, creating dynamic routes is as simple as adding a Vue file in the `pages`
    directory with a special filename. The filename should contain a parameter enclosed
    in square brackets `[]`, which acts as a placeholder for the actual data that
    will be passed to the route. This parameter can then be accessed within the page
    component, providing a means to load and display data based on the route.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, if you have a file named `[slug].vue` in the `pages` directory,
    Nuxt will translate this to a route with a dynamic segment such as `/something`,
    where something is the value of the `slug` parameter. This `slug` parameter can
    be accessed within the page component, enabling the loading and displaying of
    data based on its value.
  prefs: []
  type: TYPE_NORMAL
- en: Now, in our specific example, we will explore how we can leverage this feature
    to create category-based listing pages by defining a `[name].vue` file within
    a `categories` directory under the `pages` directory. This setup will enable us
    to have routes such as `/categories/houses` or `/categories/apartments`, dynamically
    rendering the properties associated with each category.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s discuss the `script` section of our `[``name].vue` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s a step-by-step breakdown of the script:'
  prefs: []
  type: TYPE_NORMAL
- en: We import the `properties` data from our static data file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We employ the `useRoute` composable from Nuxt to access the route parameters.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `categoryName` constant captures the dynamic segment of the route (the category
    name in this case).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We create a computed property, `filteredProperties`, to filter the `properties`
    array based on the category name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Moving on to the template section, it’s designed to exhibit the properties
    filtered by category. If there are properties matching the category, they are
    displayed in a grid layout. If not, a message indicating no properties found is
    displayed, along with a button to return to the home page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The logic here is straightforward:'
  prefs: []
  type: TYPE_NORMAL
- en: We use a `v-if` directive to check if there are any properties for the chosen
    category. If there are, we render a grid of `property-card` components, each receiving
    a `property` object as a prop.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 3.5: Listing categories/Lofts](img/B19760_03_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.5: Listing categories/Lofts'
  prefs: []
  type: TYPE_NORMAL
- en: In the case where no properties match the category `(v-else`), we display a
    message and a button that navigates back to the home page, offering a good user
    experience and a clear path of action when the desired content is not found.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 3.6: Listing invalid category](img/B19760_03_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.6: Listing invalid category'
  prefs: []
  type: TYPE_NORMAL
- en: However, this page doesn’t validate whether the route parameter is exists or
    not. In the next section, we’ll implement and validate the property details page
    and learn how to validate the route parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Creating and validating a property details page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, data validation was not implemented; we merely checked
    whether there were any properties associated with a particular category and displayed
    a message if none were found. However, on the property details page, we’re adding
    an extra layer of validation to ensure the data integrity and user experience
    are upheld.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s create the property details dynamic page. The page should be located at
    `/pages/properties/[id].vue`, allowing dynamic access to individual property pages
    based on the property ID.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s discuss the `script` section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s a breakdown of the script:'
  prefs: []
  type: TYPE_NORMAL
- en: The `definePageMeta` function is utilized within a Nuxt setup to define metadata
    for the page. It’s a utility that allows you to set up various options and hooks
    related to the page lifecycle and behavior. One of the powerful features provided
    by `definePageMeta` is the ability to validate route parameters using the `validate`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: The `validate` method is used to validate route parameters before rendering
    the page. It’s a way to ensure that the incoming route parameters meet certain
    criteria before allowing the page to be rendered. If the `validate` method returns
    false (when the ID does not match any property), Nuxt will automatically redirect
    the user to a 404 error page.
  prefs: []
  type: TYPE_NORMAL
- en: After validation, the script uses the `useRoute` function to obtain the current
    route object. Then, it locates the specific property object within the properties
    data that matches the ID from the route parameters. This property object will
    be utilized within the template to display the details of the selected property.
  prefs: []
  type: TYPE_NORMAL
- en: The template for displaying property details is straightforward as it merely
    exhibits the attributes of the property. You can check it from the related repo.
  prefs: []
  type: TYPE_NORMAL
- en: After implementing the script and template, you can test the setup by accessing
    the page at [http://localhost:3000/properties/6](http://localhost:3000/properties/6).
    This URL should lead you to a page displaying the details of a valid property.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.7: Property details page](img/B19760_03_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.7: Property details page'
  prefs: []
  type: TYPE_NORMAL
- en: However, if you attempt to access a non-existent property, for instance, via
    [http://localhost:3000/properties/6666](http://localhost:3000/properties/6666),
    the application should redirect you to a 404 error page. This behavior ensures
    that users are guided appropriately when they attempt to access content that doesn’t
    exist, thereby enhancing the user experience and maintaining the integrity of
    the application’s data presentation. Now let’s move on to create a custom error
    page.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Custom error page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Handling errors gracefully is crucial for a good user experience. Nuxt provides
    a default error page that gets displayed whenever an error occurs, such as when
    a user navigates to a non-existent route. Initially, if you try to access a wrong
    URL, as we did before, you’ll be greeted by Nuxt’s default error page, which is
    quite generic.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.8: Default error page](img/B19760_03_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.8: Default error page'
  prefs: []
  type: TYPE_NORMAL
- en: Our aim is to override this with a more personalized page that maintains the
    website’s theme. Create a new file named `error.vue` in the root directory of
    your project besides the `app.vue` component. This `error.vue` file will override
    the default error page provided by Nuxt.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s an example of how you might structure the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: You might notice that I’ve created a simple `BaseBtn.vue` component with custom
    css styles in it. You can check the component in the related chapter repo.
  prefs: []
  type: TYPE_NORMAL
- en: By default, this custom error page will catch 404 errors, displaying your personalized
    message whenever a user tries to access a route that doesn’t exist. However, it’s
    noteworthy that, as it stands, this page will show a 404 error even if other types
    of errors occur. We can adjust this behavior later to handle different error types
    accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let’s test it by trying to access a non-existent route:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.9: Custom error.vue](img/B19760_03_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.9: Custom error.vue'
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we’ll create a plugin that uses the `Dayjs` library to
    handle date formatting across our application.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a plugin to use Dasyjs for formatting dates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the most overlooked but crucial parts of any application is the way we
    manage and display times and dates. Typically, JavaScript’s native `Date` object
    can be cumbersome to use for advanced formatting. This is where `Dayjs` comes
    into play. `Dayjs` is a minimalist JavaScript library that provides a straightforward
    way to format, parse, and manipulate dates. Going forward, we’ll replace static
    date rendering in our project with formatted date that shows the relative date
    from the current date using `Dayjs`.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Dayjs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started, install `Dayjs` by running the following command in your project
    directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Setting up the plugin directory and file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Nuxt’s plugin system allows you to run your code before the root Vue.js application
    is instantiated. They are run during the boot-up phase of your application and
    can execute on the client side, server side, or both depending on your configuration.
  prefs: []
  type: TYPE_NORMAL
- en: When you create a new plugin, it’s like adding a new member to your team that
    has specific skills. This team member (the plugin) can do tasks that everyone
    in the project can use. For example, setting up `Dayjs` as a plugin allows you
    to call upon date formatting functionality wherever you need it in your project.
  prefs: []
  type: TYPE_NORMAL
- en: By placing the `dayjs.ts` file in the `plugins` directory, you’re essentially
    telling Nuxt, “Hey, before you start up, make sure you know how to format dates
    using `Dayjs`, because we’re going to need it.” If you haven’t already set up
    a `plugins` directory, create one at the root of your project. Inside this directory,
    create a new file named `dayjs.ts`.
  prefs: []
  type: TYPE_NORMAL
- en: Initializing Dayjs with configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In your newly created `dayjs.ts` file, you’ll need to import `Dayjs` and initialize
    it with the necessary configurations. Once initialized, we’ll use Vue’s `provide`
    method to make the `FromNow` function available throughout the application. This
    capability will enable us to represent dates in a more user-friendly, relative
    format such as “1 day ago” or “2 weeks ago.”
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the code for the plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s a breakdown of the code:'
  prefs: []
  type: TYPE_NORMAL
- en: The plugin begins by importing the `Dayjs` library along with its `relativeTime`
    plugin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We use Nuxt’s `defineNuxtPlugin` method to create the plugin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the plugin, a function called `fromNow` is defined. It takes a date string
    and uses the `Dayjs` `.fromNow()` method to return the relative time difference
    in a human-readable format.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, the `provide` method is used to make this function globally available
    throughout our Nuxt application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the global FromNow function for the property details page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once you’ve successfully created and integrated the `Dayjs` plugin into your
    Nuxt application, the next step is to utilize it in your components or pages.
    Here, we’ll incorporate it into our property details page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Locate the page: `pages\properties\[id].vue`. Below the property description,
    insert the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: The `$fromNow` function is now globally available due to the plugin we created
    earlier. It takes `property.listedDate` as an argument and displays it in a human-readable
    format.
  prefs: []
  type: TYPE_NORMAL
- en: One of the advantages of the prerequisites extenstions that we installed in
    VS Code is that your IDE will recognize the provided helpers in the `plugins`
    directory. This means that you’ll benefit from Intellisense support when you type
    `$fromNow`, with autocomplete suggestions and even parameter hints, making your
    development process more efficient.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.10: plugins provide Intellisense](img/B19760_03_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.10: plugins provide Intellisense'
  prefs: []
  type: TYPE_NORMAL
- en: To sum up, we walked through the process of creating a Nuxt plugin to integrate
    `Dayjs` for date formatting. We then used this globally available `fromNow` function
    for the property details page to display dates in a human-readable format.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we dived into advanced Nuxt 3 features by crafting a real estate
    listing project. We started by setting up a Nuxt 3 project, incorporating Tailwind
    CSS and Google Fonts—basics that we’ve touched on before. We quickly moved on
    to defining a default website layout and learning how to override it for special
    cases, such as a 404 page. TypeScript support had its moment too, as we developed
    the home page. Next, we created a dynamic listing page for displaying properties
    and followed that by building out individual property detail pages. We wrapped
    up by integrating `Dayjs` via a custom plugin for date formatting. Along the way,
    key Nuxt 3 concepts such as routing, layouts, and plugins served as guideposts,
    helping us build a well-rounded application. This chapter aimed to level up your
    Nuxt 3 expertise, making you more than ready for complex projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the upcoming [*Chapter 4*](B19760_04.xhtml#_idTextAnchor080), we’ll shift
    our focus to a new challenge: building a weather dashboard. The chapter will be
    your hands-on guide to understanding state management in a Nuxt application using
    Pinia. It’s not just theory; you’ll be building a practical, real-world application
    where you’ll manage the state of multiple cities and their weather data.'
  prefs: []
  type: TYPE_NORMAL
- en: Practice questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How do you set up a default layout in a Nuxt 3 project?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How do you create an error page?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Does Nuxt support TypeScript in components or props?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How do you create dynamic pages?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How do you validate the dynamic pages and redirect to a 404 page if they’re
    not valid?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is a Nuxt plugin? What are the primary benefits of them?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How do you implement a plugin such as Dayjs for date formatting in Nuxt 3?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Nuxt Routing: [https://nuxt.com/docs/getting-started/routing](https://nuxt.com/docs/getting-started/routing)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Vue plugins: [https://vuejs.org/guide/reusability/plugins](https://vuejs.org/guide/reusability/plugins)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Nuxt pages directory: [https://nuxt.com/docs/guide/directory-structure/pages](https://nuxt.com/docs/guide/directory-structure/pages)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Nuxt layouts directory: [https://nuxt.com/docs/guide/directory-structure/layouts](https://nuxt.com/docs/guide/directory-structure/layouts)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Nuxt plugins directory: [https://nuxt.com/docs/guide/directory-structure/plugins](https://nuxt.com/docs/guide/directory-structure/plugins)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Dayjs documentation: [https://day.js.org/docs/en/installation/installation](https://day.js.org/docs/en/installation/installation)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
