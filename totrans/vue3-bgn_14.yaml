- en: '14'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Advanced Resources for Future Reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you have reached this chapter, there is a high chance I will meet you soon
    within the tech community as a successful Vue.js developer. This book aimed to
    provide you with enough knowledge of the framework to give you a head start in
    your career, and the fact that you persevered until the end of the book highlights
    your determination, which is a key skill to have in the world of tech.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will share useful resources, introduce advanced Vue.js topics,
    and discuss ways to improve your skills as a Vue.js developer.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter is divided into the following sections:'
  prefs: []
  type: TYPE_NORMAL
- en: Available tools and resources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is left for Vue.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Contribute back to the community
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s look back at what we have achieved
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you should have gained a good understanding of what
    you have achieved, and you will have learned about the resources available for
    you to continue your learning beyond this book. Within this chapter, we are also
    going to introduce further topics that were too advanced to cover at this stage,
    but they are useful as learning materials to continue your training.
  prefs: []
  type: TYPE_NORMAL
- en: Available tools and resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Vue.js and its ecosystem, just like other frontend technologies, are affected
    by continuous changes and updates that help it stay relevant and improve its features.
    In this section, we will learn how to keep informed with the latest news within
    the Vue.js community.
  prefs: []
  type: TYPE_NORMAL
- en: We will introduce newsletters, websites, community members, and more. Keeping
    informed within a fast-paced industry such as JavaScript is vital for your career.
    In fact, during your day-to-day job, you will usually work on the current or previous
    versions of software or library, and this will not expose you to the latest features
    or improvements included in future releases.
  prefs: []
  type: TYPE_NORMAL
- en: Not being able to use upcoming releases in production is normal, and it is vital
    for you to find a different way to keep yourself informed about all the new trends
    and features. To do so, we are going to discuss different resources that will
    help you keep up to date.
  prefs: []
  type: TYPE_NORMAL
- en: Vue.js documentation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We could not start this section without mentioning the official documentation.
    Vue.js’ documentation ([https://vuejs.org/](https://vuejs.org/)) is always up
    to date and well defined and it should be your go-to place to see information
    about new features or changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The website offers lots of interesting areas, such as the example pages and
    the tutorial, but the following links should be bookmarked and used during your
    day-to-day work:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Vue Blog** ([https://blog.vuejs.org/](https://blog.vuejs.org/)): Access the
    latest news about new releases and upcoming changes. This is the first place where
    you will hear news about the content and information of new releases.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The Vue.js API cheatsheet** ([https://vuejs.org/api/](https://vuejs.org/api/)):
    A one-pager with a shortcut to all the Vue.js APIs. This will be invaluable at
    the start of your career. As a developer, you are not expected to remember everything,
    but to know what exists and how to easily access it, and this page just does that.
    It provides you with the information you need with just one click!'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Vue Playground** ([https://play.vuejs.org/](https://play.vuejs.org/)): This
    may not provide you with new info, but it is extremely useful for trying new things
    without needing to set up a full environment. The link is also sharable, with
    no need to sign up or authenticate.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Vue Discord** ([https://discord.com/invite/vue](https://discord.com/invite/vue)):
    What better way to learn than by being part of the actual Vue.js community? You
    can join the official Discord chat and join over 10,000 people, including core
    members and library maintainers. The Discord channel includes many chats that
    cover the main framework and its libraries. The chats are very active and are
    moderated by the actual Vue.js core team.'
  prefs: []
  type: TYPE_NORMAL
- en: Newsletter
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Vue.js’ official documentation is a really great place to find any information
    that you may need or require, but it will require you to go to the site to get
    your information. In today’s world, we expect information to be delivered directly
    to our inbox, and what better way to receive information than by subscribing to
    some newsletters?
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a list of Vue.js-specific newsletters that I suggest you subscribe
    to:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Weekly Vue** **News**: [https://weekly-vue.news/](https://weekly-vue.news/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Vue.js** **Developers**: [https://vuejsdevelopers.com/newsletter/](https://vuejsdevelopers.com/newsletter/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Both newsletters provide great content and up-to-date information on the Vue.js
    ecosystem, and they are free. These newsletters are delivered once a month and
    are perfect for a weekend read.
  prefs: []
  type: TYPE_NORMAL
- en: If you have time to read each individual post shared you should surely do so,
    but if you do not, I suggest you take the time to at least scan through the names
    of the posts, as they can provide you with important information, such as a major
    release or a breaking change.
  prefs: []
  type: TYPE_NORMAL
- en: Community members
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is quite hard to be a developer without being part of a social media platform.
    I am personally very active on X ([x.com](http://x.com)) under the username of
    `@zelig880`. In this section, I am going to highlight a couple of important community
    members that you should personally follow on your social media of choice.
  prefs: []
  type: TYPE_NORMAL
- en: These people are what makes Vue.js unique. They help the community grow by sharing
    their knowledge at conferences, being active members of the core repositories,
    and by being active library maintainers.
  prefs: []
  type: TYPE_NORMAL
- en: 'I am going to put each X username next to the name to make your search on the
    web easy, because some people may have very common names:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@youyuxi`): Evan is the Vue.js community member of excellence, not only because
    he is the creator of the framework, but also because of his active involvement
    within the community. Evan is extremely active at conferences and on social media,
    and he is the first to share upcoming news.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@antfu7`): Anthony is behind many libraries in Vue.js, including **VueUse**
    and **Vitest**. Anthony not only creates amazing libraries, but he also likes
    to experiment with new things, so his timeline is always full of nice ideas and
    creations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@posva`): Eduardo is the creator of Pinia and an active member of the Vue
    ecosystem. Eduardo travels the world to speak at various Vue.js conferences around
    the globe.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@danielcroe`): Daniel is a Nuxt.js core team member and a very active conference
    speaker. Daniel also likes to stream his work. Watching an experienced person
    such as Daniel trying to complete a task and, more importantly, debug issues online
    is a fantastic way to learn.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@_jessicasachs`): Jessica has worked at many companies, including Cypress,
    and is an active conference speaker.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I could continue to add more amazing members of the community, but I think this
    list is great for you to get started. Following these people will provide you
    with good insights and updates within the framework ecosystem.
  prefs: []
  type: TYPE_NORMAL
- en: Request For Comments – RFC
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete this section, we will share something a little more advanced, but
    it still helps you to feel part of the community: **Request for Comments** (**RFCs**).
    Vue.js is the only major framework not being backed by a tech giant. Being independent
    gives it the flexibility to make choices based on the community and not to please
    shareholders (I know that most frameworks are not for profit, but their decisions
    are still made behind closed doors).'
  prefs: []
  type: TYPE_NORMAL
- en: If you were to ask Evan You if he is the owner of Vue.js, he would say no, and
    he would clarify that Vue is owned by its community. After years in the ecosystem,
    I can confirm that this is not only something that he says, but it is the way
    he and the rest of the core members build the framework.
  prefs: []
  type: TYPE_NORMAL
- en: With all its major releases, Vue.js actively uses RFCs to share ideas and changes
    in its core engine. This repository has seen many conversations, some extremely
    lively, but most importantly has shown the openness of the core team to help.
  prefs: []
  type: TYPE_NORMAL
- en: The repository, including all the RFCs, can be found at [https://github.com/vuejs/rfcs](https://github.com/vuejs/rfcs).
  prefs: []
  type: TYPE_NORMAL
- en: I do not expect you to look at the repository daily, but it is very beneficial
    to look at the comments and discussions when a new topic is shared in newsletters
    or by a community member.
  prefs: []
  type: TYPE_NORMAL
- en: For most developers, the conversation and code shared in these RFCs can be quite
    advanced, but reading through the comments can help you grasp how people use the
    framework and help you grow in the process.
  prefs: []
  type: TYPE_NORMAL
- en: This was the last topic for this section, in which we shared different ways
    in which you can keep active within the Vue.js ecosystem, we discussed the usefulness
    of the official documentation, discussed how to receive information by subscribing
    to up-to-date newsletters. We then had a section on community members and introduced
    a few important people who should be followed to be the first to hear about news
    and updates on the framework. Lastly, we discussed RFCs and learned how they can
    give you a glimpse into the future of the framework.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we are going to learn what else is left for us to learn
    in Vue.js and what other topics you may encounter in your journey as a Vue.js
    developer.
  prefs: []
  type: TYPE_NORMAL
- en: What is left for Vue.js?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, we have covered many different topics and learned enough about
    Vue.js to be able to handle your future tasks or projects. But we have just learned
    about the core features of the framework, and there are still some advanced topics
    that you may encounter in the future of your development journey.
  prefs: []
  type: TYPE_NORMAL
- en: These topics are no less important than the ones you have already covered, but
    they are secondary because they come after the basics have been learned and mastered.
    In this section, we are not going into the details of each of the topics, but
    just give a short introduction.
  prefs: []
  type: TYPE_NORMAL
- en: The idea behind this section is to provide you with a basic understanding of
    many topics that you may have to learn in the future as you progress your career
    as a Vue.js developer. Some of these topics are quite advanced, while others may
    just be needed in special use cases.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to break the topics into sections: Miscellaneous, Core, Pinia,
    and Vue-router features. Let’s start first by looking at what topics we would
    have had to learn to make our Companion App production-ready.'
  prefs: []
  type: TYPE_NORMAL
- en: Miscellaneous
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following topics would have been necessary for the application to be in
    a production-ready state, but are too advanced for someone who is just starting
    to work on the framework.
  prefs: []
  type: TYPE_NORMAL
- en: The list includes big topics, such as authentication, that could have entire
    books devoted to them. The reason why we are going to cover these topics is not
    to make you go and learn about them right away, but for you to be aware of their
    existence and learn about them when the time comes for you to implement such features.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see what we have missed in our application:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Authentication**: An application such as the Companion App could never be
    completed until we have set up authentication. Luckily for us, there are many
    services, such as **Auth0**, **Supabase**, and **AWS Cognito**. These tools have
    great documentation and starter guides. Using an authentication provider is great
    not only because it saves you development time, but also because hosting usernames
    and passwords in your servers is a security risk and a complicated task that you
    should avoid at the start of your career.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Environment variables**: In our application, we have set variables such as
    tokens and URLs directly in the application, but this is not correct. What we
    should have done was use environment variables to store these values securely
    away from the repository. Vite provides a simple way to define environment variables
    ([https://vitejs.dev/guide/env-and-mode](https://vitejs.dev/guide/env-and-mode)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Logging/bug reporting**: An application should never go into production without
    good logging. Creating a bug-free application is a myth, and there is always a
    possibility that your user will run into trouble. Most of today’s hosting environments
    provide logging out of the box, but I prefer to use tools such as **Sentry** that
    help you quickly find the issues in your application, saving you time and money.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CI/CD**: This term stands for **Continuous Integration/Continuous Delivery**.
    It aims to streamline and accelerate the software development life cycle. Before
    promoting an application to a production state, you may want to set up an automatic
    pipeline that quickly delivers your code into production. Luckily for you, there
    are also services such as **Netlify**, **Vercel**, and **AWS amplify** that offer
    ready solutions for this.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Component library**: At first glance, creating components may seem like a
    simple task, but this is not true. A fully fledged component library can take
    thousands of hours and it is not feasible for most developers. Using an existing
    component library such as **Vuetify** ([https://vuetifyjs.com/](https://vuetifyjs.com/))
    or **Quasar** ([https://quasar.dev/](https://quasar.dev/)) can speed up our development
    and help us focus on what matters the most: the application’s logic. If you are
    searching for a specific component, you can search for it on vuecomponents.com,
    that is an active list of available components within the Vue.js ecosystem.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Core features
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It is now time to cover Vue.js’ core features that could be of use in future
    tasks. Just like everything else within the Vue.js ecosystem, these core features
    are well documented and can be learned from the official Vue.js documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<script>` tags of a **SFC** (**Single File Components**), but the reasoning
    behind it and the way you use it may require some further learning. The best way
    to learn about composables is to find some composable that you can add and use
    in your application, and there’s no better place than **VueUse**. This is a list
    of hundreds of composables created and maintained by Anthony Fu and many other
    active contributors. Adding this to your project will not only speed up your development,
    but also help you fully understand how composables work and what problems they
    solve. As an added bonus, VueUse is open source and their code is readily available
    from the website.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<component :is="componentName" />` to conditionally render a table or a list,
    or to change an `<input>` to a `<textarea>`, depending on the user preference.
    Just like other topics in this section, this built-in component solves a very
    specific problem.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scoped Slot**: Scoped slot is a very advanced topic. It’s rare you’ll ever
    need it except in specific situations. Scoped slots solve a very specific problem,
    but unfortunately not the easiest to use or learn. Remember their existence, and
    if you are ever trying to achieve something with slots and cannot do so, search
    for them as they will probably be the solution to your problem! But as I said,
    avoid them for now and ask a senior developer to help you if you need to .'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<Transition>` that helps us mix the power of CSS animation with the flexibility
    of Vue.js templating power such as `v-if`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Teleport**: Do not worry, we are not going to start talking about science
    fiction. Teleport is another built-in component from Vue.js that allows you to
    “teleport” a Vue.js component into a different node of the DOM that lives outside
    of the Vue.js application. This component solves specific problems where the logical
    placement of a component may not match its visual placement. A common use case
    for this is a dialog box, where the modal button and component would live within
    the same component (logical placement), while the visual of the dialog itself
    should not be nested within the DOM but higher up in the tree.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The list of advanced components and techniques that we just shared is just the
    tip of the iceberg. Vue.js has still lots more to offer and many advanced topics
    that you will discover during your career.
  prefs: []
  type: TYPE_NORMAL
- en: Pinia’s features
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In [*Chapter 11*](B21130_11.xhtml#_idTextAnchor153), we introduced state management
    using the official library, Pinia. In this section, we will share a couple of
    advanced topics that we have not seen so far in this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'Just like we previously mentioned, these are good topics to know, but they
    are not essential to learn at the very start of your journey. Let’s see what else
    Pinia has to offer:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$Patch`: The biggest feature of Vue.js is its reactivity system. As we saw
    in the previous chapter, Vue’s reactivity is also extended with Pinia, which provides
    a store that is sharp to respond to changes. To ensure that your application is
    performant and that the reactivity does not turn into a negative effect, Pinia
    provides a method called `store.$patch`. This is used to modify multiple store
    entries at the same time. This method, on top of accepting a partial state object,
    also accepts a method that can be used to update complex parts of the store, such
    as arrays or nested objects, and ensure it all happens in a single state change.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$reset()`: Another method available within the Pinia store is called `$reset()`.
    This method allows you to restore the state of a store to its initial state. This
    is extremely useful for dynamic forms and other interactivity that would require
    you to clean up the store after the complete execution of an action. Calling this
    method just returns the state object to its initial value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$subscribe`: Of the Pinia methods that we are covering in this section, this
    is probably the most advanced one. Pinia exposes two different methods to subscribe
    to part of the store. The first is the `$subscribe` method. This allows you to
    watch for a Pinia store change. The second is called `$onAction`, and it is used
    to listen to Pinia’s actions. Subscribing to a Pinia store with these two methods
    is not an everyday task, and it is usually used to solve specific problems.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After Pinia, it is time to look at the vue-router and complete the last part
    of this section.
  prefs: []
  type: TYPE_NORMAL
- en: Vue-router features
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Just like Pinia, we introduced vue-router back in [*Chapter 10*](B21130_10.xhtml#_idTextAnchor135)
    and learned how to implement the basic router features within our Companion App.
    In this section, just like we did in the previous sections, we are going to introduce
    advanced technique offered by the router library:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Lazy loading routes**: The first feature we are going to share is **lazy
    loading routes**. Vue-router allows you to specify a route to be loaded asynchronously.
    Loading routes asynchronously will improve the performance of our application
    by reducing the size of the JavaScript bundle our visitors have to download initially
    and loading the routes on demand.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Guards**: Router guards allow vue-router to “guard” user navigation by either
    redirecting or canceling navigation. Router guards are useful for enforcing role-based
    navigation or authentication. With router guards, you can run logic before or
    after each navigation, allowing you to take full control of what the user is allowed
    to see.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Active link**: Requiring the ability to show an active state within a main
    navigation or a site is common practice. Vue-router simplifies this by providing
    us with active link classes. These are automatically assigned to router links
    that match the current URL fully or partially.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<RouterView>` using a single outlet, but with named views we can provide different
    named sections of our layout. We could use this to define a layout with a sidebar
    and a main body and swap the sidebar depending on the route we are in.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More information about the features we just discussed can be found in the official
    vue-router documentation at [https://router.vuejs.org/guide/](https://router.vuejs.org/guide/).
  prefs: []
  type: TYPE_NORMAL
- en: Contribute back to the community
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout this book, you have heard how amazing the Vue.js community is and
    seen first-hand the great work that the core team and the package maintainers
    do. The Vue.js framework is well documented and well maintained, the development
    experience is well defined, and the same applies to core-maintained packages such
    as vue-router and Pinia, but also external ones such as VeeValidate and many more
    within the ecosystem.
  prefs: []
  type: TYPE_NORMAL
- en: This level of consistency does not come for free, and there is a lot of work
    that goes on behind the scenes to ensure that the community feels accepted and
    supported. This work is at times done by developers who, due to the nature of
    open source, do not earn a wage for their contribution.
  prefs: []
  type: TYPE_NORMAL
- en: After reading this book, you have become an integrated part of the Vue.js community,
    and you should try your best to contribute back to the community and help maintain
    it. Doing so will not only support the ecosystem and future developers, but it
    will also help you grow.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see the different ways in which a community member can get involved in
    the community:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Documentation**: If you are not new to open source, you have probably heard
    people asking for help with documentation many times before. This is mainly because
    it is truly the most important and easier action that can be taken by developer
    to contribute back to the open source community. As a new member of the Vue.js
    community and first-time user of the technology, you will be able to assess what
    documentation is well written and what may need to be improved. All Vue.js documentation
    is open source, so if you find something that needs fixing, create a PR.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reproduce bug report**: When I first started to learn Vue.js, this was one
    of the main sources of learning material for me. In fact, there are plenty of
    bugs that are raised within the core framework and its libraries, and quite a
    few that are not accompanied by reproducible code or have an incorrect reproduction.
    Trying to reproduce a bug that has been shared is a very good way to learn more
    about Vue.js. These issues can be found in the main repositories with the label
    **need** **repro** ([https://github.com/vuejs/vue/labels/need%20repro](https://github.com/vuejs/vue/labels/need%20repro)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Host meetups**: There is no better way to help Vue.js grow than by hosting
    a local meetup. Hosting a meetup may not be for everyone, but if you have the
    right personality and interest, it can be extremely rewarding. You will not only
    gain popularity within the industry, but you will also learn a ton as you will
    meet other people within the Vue community and also hear about them during your
    events.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Be an active Discord member**: In the first section of this chapter, we mentioned
    Discord as a way to keep yourself informed within the community. In this section,
    we mention Discord again as a way for you to contribute to the community. You
    may not be able to help straight away, but as you gain some knowledge, you should
    try and help triage some of the questions and discussions shared in the chat.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Donate**: If you are starting your development career now, this may not be
    something that you can afford, but as you grow into your career you should consider
    it. Vue.js does not have a huge company backing it, and most of the core maintainers’
    wages are made up of small donations made by people like me and you. Every small
    donation helps.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No matter how you do it, what matters the most is that you try to give back
    to this amazing community and become an active part of it. In the next and last
    section of this chapter and book, we are going to summarize what we have achieved
    within the course of this book.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look back at what we’ve achieved
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have reached the very end of this book, and you are ready to go and experience
    Vue.js on your own. When learning new technologies, like you did in this book,
    it does not come easy, and it is possible that you will need to go back and revisit
    some of the topics that we covered during the course of the book.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we are going to have a quick recap of what we have learned
    and what we can accomplish with it. Going over a topic multiple times will not
    only help you memorize it, but it will also support you in understanding its meaning
    and therefore allow you to apply it to different use cases.
  prefs: []
  type: TYPE_NORMAL
- en: All about Vue.js
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We started the book by learning about Vue.js and, most importantly, about its
    reactivity system. Across different frameworks, Vue.js’ reactivity is very powerful,
    and understanding it is a must if you want to improve your skills.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we learned about Vue.js lifecycles. The framework works on a well-defined
    cycle, and learning about it is essential to enable you to create performant applications.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we completed the section about Vue.js by learning the structure of
    a Vue.js component also known as a **Single File Component** (**SFC**). We learned
    about its composition and used it extensively in the book.
  prefs: []
  type: TYPE_NORMAL
- en: From the basics and beyond
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With the help of our Companion App, we have learned how to turn static HTML
    into a dynamic Vue.js component. We learned the basics of the framework by introducing
    string interpolation, Refs, and R`eactive`.
  prefs: []
  type: TYPE_NORMAL
- en: We then continued to increase the complexity of our application by introducing
    some of the Vue.js built-in directives. With features such as `v-if` and `v-for`,
    we were able to increase the amount of functionality offered by our components,
    still being able to write elegant components.
  prefs: []
  type: TYPE_NORMAL
- en: Last, we introduced `computed` and `methods`. These gave us the ability to add
    logic to our components.
  prefs: []
  type: TYPE_NORMAL
- en: With the knowledge learned so far, we could turn a very static website into
    a dynamic and powerful web application that would outclass simple static HTML
    sites.
  prefs: []
  type: TYPE_NORMAL
- en: From component to components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: From [*Chapter 6*](B21130_06.xhtml#_idTextAnchor074) onward, we started to expand
    our learning from a single component to multiple ones. We did so by introducing
    props and events. This allowed us to create components that could speak and depend
    on each other.
  prefs: []
  type: TYPE_NORMAL
- en: With these extra topics, we also had a chance to re-introduce and use Vue.js
    lifecycles, which we learned about at the start of the book.
  prefs: []
  type: TYPE_NORMAL
- en: To finish it off, we started to connect all the different topics we’d covered
    up to this stage by loading data asynchronously. To do so, we had to use methods,
    lifecycles, events, Refs, and props.
  prefs: []
  type: TYPE_NORMAL
- en: At the end of this section, which concluded with [*Chapter 7*](B21130_07.xhtml#_idTextAnchor088),
    we concluded the foundation of Vue.js.
  prefs: []
  type: TYPE_NORMAL
- en: Vue.js ecosystem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After the basics of Vue.js, it was time to move on and introduce important topics
    such as tests, routers, and state management and move away from the core framework.
  prefs: []
  type: TYPE_NORMAL
- en: In the chapters that followed the basic topics, we first learned how to write
    unit and E2E tests in our applications with Cypress and Vitest.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we introduced two libraries maintained by the Vue core team members:
    Pinia and vue-router. With Pinia, we introduced the notion of state management
    and refactored our Companion App to use Pinia to support its state, while vue-router
    was used to implement a routing system and transform our single application into
    a complex application with multiple pages and nested routes.'
  prefs: []
  type: TYPE_NORMAL
- en: After routes and state, it was time to add some user interactivity by learning
    how to manage forms. We did so by introducing the notion of two-way binding with
    V-Model and then discussed how using an external library such as VeeValidate could
    help us develop complex and well-structured forms.
  prefs: []
  type: TYPE_NORMAL
- en: Last, we stepped away from coding and learned how to use the Vue.js devtools
    extension to help us develop and debug our Vue.js applications.
  prefs: []
  type: TYPE_NORMAL
- en: Just the tip of the iceberg
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Along with the books, we have discussed possible exercises and learning that
    you could undertake to improve your understanding of the various topics.
  prefs: []
  type: TYPE_NORMAL
- en: The information shared within the book and the exercises provided were just
    the tip of the iceberg. To fully understand how Vue.js works and be prolific with
    it, you will have to continue to practice and use what you have learned in this
    book.
  prefs: []
  type: TYPE_NORMAL
- en: 'What I suggest you do is keep practicing, maybe by setting specific daily involvement
    goals or by joining communities such as #100daysofcode. You can practice by creating
    very small proofs of concept using Vue.js Playground to test your knowledge or
    replicate a small part of existing applications with all their knowledge and interactivity
    to push your understanding. After you feel like you have gained enough understanding
    of the foundations of Vue.js and its ecosystem, it would be a good idea to try
    and clone an existing web application. This is an extremely useful practice that
    can help you focus on the practical part of learning Vue.js without the need to
    come up with an app idea from scratch. A few examples of applications that could
    be replicated are social media platforms, news platforms, and weather apps. They
    provide a good level of interactivity and offer free APIs and resources.'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After 14 chapters aimed at improving your skills as a Vue.js developer, we have
    finally reached the end of this book. Completing this book is probably associated
    with the beginning of your career in Vue.js.
  prefs: []
  type: TYPE_NORMAL
- en: What you have learned in this book should be enough to start your career, but
    it is not going to be enough on its own. What is left for you now is true dedication
    and consistency in trying to apply everything you have learned here to a real-world
    project. As you do so, you may find yourself going back and revisiting a chapter
    or section or reading further to deepen your knowledge (always start your research
    with the Vue.js official documentation).
  prefs: []
  type: TYPE_NORMAL
- en: Vue.js is a fantastic framework, and I can assure you that you have made a good
    choice. As we mentioned time and time again, what makes Vue.js unique is not just
    its code and features, but the full ecosystem and community built around it.
  prefs: []
  type: TYPE_NORMAL
- en: Finding a good way to engage with the community will help you stay motivated
    and engaged, but, most importantly, interacting with other Vue.js developers can
    help you overcome issues and obstacles that you will face throughout your career.
  prefs: []
  type: TYPE_NORMAL
- en: All Vue.js core libraries and its ecosystem are built on top of the framework’s
    core logic. This not only makes things familiar as you move between libraries,
    but it also means that mastering the framework’s core foundation will help you
    understand the whole ecosystem. I have had the pleasure of meeting many Vue.js
    developers, and the trait that made the most senior developers stand out was their
    understanding of Vue.js to its core. This does not need you to learn the actual
    code base, but just try to really focus and understand the topics covered in the
    first two chapters, such as **reactivity** and **lifecycles**. Vue.js reactivity
    will help you understand when things update and why, while the lifecycles will
    provide an understanding of how the framework re-renders and the flow that it
    follows when doing so. I usually like to compare development to a dance. There
    are different steps, and you may not know them all at the very start, but what
    matters the most is that you know how to listen to music and move with it. The
    rest will come as you keep practicing. Learning the foundation of Vue.js is the
    same as being able to listen to music, and knowing it well will make the rest
    of your journey easier.
  prefs: []
  type: TYPE_NORMAL
- en: At this stage, I can just wish you all the best in your future and hope that
    Vue.js turns out to be a good choice for your career.
  prefs: []
  type: TYPE_NORMAL
