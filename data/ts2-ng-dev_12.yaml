- en: Testing and Debugging
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试和调试
- en: 'Testing is crucial to building production-ready applications. In unit tests,
    we test a component independent of external sources to make sure it works as expected.
    Angular 2 has testing capabilities bundled with it out of the box. In this chapter,
    we will take a look at performing unit test on the following elements:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 测试对于构建可投入生产的应用程序至关重要。在单元测试中，我们独立于外部来源测试组件，以确保其按预期工作。Angular 2自带了测试功能。在本章中，我们将查看对以下元素执行单元测试：
- en: Components
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组件
- en: Services
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务
- en: Pipes
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管道
- en: Directives
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指令
- en: Angular 2 testing tools
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Angular 2测试工具
- en: 'Some of the tools that aid testing in Angular 2 are as follows:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在Angular 2中用于辅助测试的一些工具如下：
- en: Jasmine
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 茉莉花
- en: Karma
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Karma
- en: Protractor
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Protractor
- en: Angular 2 testing platform
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular 2测试平台
- en: Let's take a deeper look at each one of them.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更深入地了解每一个。
- en: Jasmine
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 茉莉花
- en: Jasmine is an open source testing framework. It uses behavior-driven notation
    that brings about improved testing.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Jasmine是一个开源的测试框架。它使用行为驱动的符号，带来了改进的测试。
- en: Main concepts of Jasmine
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 茉莉花的主要概念
- en: 'Before we dig into so practical testing cases, here are some Jasmine concepts
    you should know:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入实际测试案例之前，这里有一些您应该了解的Jasmine概念：
- en: '**Suites**: These are written in and described by the `describe` blocks. They
    appear in the form of functions.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**套件**：这些是由`describe`块编写和描述的。它们以函数的形式出现。'
- en: '**Spec definitions**: `it (string, function)` functions. The body of this function
    holds the actual assertions.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**规范定义**：`it（string，function）`函数。此函数的主体包含实际的断言。'
- en: '**Expectations**: These are assertions that evaluate to a Boolean value. This
    is used to see if an input is equal to the expected value.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**期望**：这些是评估为布尔值的断言。这用于查看输入是否等于预期值。'
- en: '**Matchers**:  These are helpers for common assertions, for example, `toB0`(expected),
    `toEqual` (expected).'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**匹配器**：这些是常见断言的辅助工具，例如，`toBe`（expected），`toEqual`（expected）。'
- en: Karma
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Karma
- en: Karma is a JavaScript test runner created by the Angular team. Karma can be
    a part of the continuous integration processes for a project as well as a part
    of its development.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Karma是由Angular团队创建的JavaScript测试运行器。Karma可以成为项目的持续集成过程的一部分，也可以成为其开发的一部分。
- en: Protractor
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Protractor
- en: Protractor is an end-to-end test framework for Angular applications. With Protractor,
    you can set up expectations and test against our assumptions. As the name implies,
    end-to-end tests not only ensure that the system works by itself but also validates
    its functionality with external systems. They explore the application as the end
    user experiences it.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Protractor是用于Angular应用的端到端测试框架。使用Protractor，您可以设置期望并根据我们的假设进行测试。顾名思义，端到端测试不仅确保系统自身正常工作，还验证其与外部系统的功能。它们探索应用程序的最终用户体验。
- en: Angular testing platform
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Angular测试平台
- en: Angular testing platform is used to test the interaction of classes with Angular
    and the DOM. Angular testing platform gives us liberty to examine an instance
    of a class without any dependence on Angular or injected values.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Angular测试平台用于测试类与Angular和DOM的交互。Angular测试平台使我们能够检查类的实例，而不依赖于Angular或注入的值。
- en: In this chapter, we will be focusing on Jasmine and Karma for testing.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将专注于Jasmine和Karma进行测试。
- en: When a new project is created using Angular-CLI, the `e2e` folder containing
    the end-to-end tests using Protractor is also created, along with the `karma.conf.js`and
    `protractor.conf.js` files, which are the configuration files for Karma and Protractor
    tests.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用Angular-CLI创建新项目时，将创建包含使用Protractor的端到端测试的`e2e`文件夹，以及`karma.conf.js`和`protractor.conf.js`文件，这些是Karma和Protractor测试的配置文件。
- en: Using Karma (with Jasmine)
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Karma（与Jasmine一起）
- en: With Karma, you can test your code while running your application because Karma
    creates a browser environment for testing. Besides your browser, you can also
    test your code in other devices, such as phones and tablets.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Karma，您可以在运行应用程序时测试您的代码，因为Karma为测试创建了一个浏览器环境。除了您的浏览器，您还可以在其他设备上测试您的代码，比如手机和平板电脑。
- en: Jasmine is a behavior-driven development framework for testing the JavaScript
    code. Being dependency free, Jasmine doesn't require a DOM and is often used together
    with Karma. We will now proceed to create a new project and test its elements.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Jasmine是用于测试JavaScript代码的行为驱动开发框架。Jasmine无需依赖，不需要DOM，并经常与Karma一起使用。我们现在将继续创建一个新项目并测试其元素。
- en: Creating a new project
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个新项目
- en: 'We will create a new project named `Angular-test` with the following command:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用以下命令创建一个名为`Angular-test`的新项目：
- en: '[PRE0]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Installing the Karma CLI
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Karma CLI
- en: 'To install the Karma CLI, enter the following command:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装Karma CLI，请输入以下命令：
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Our test will be executed in a `.spec.ts`file. Create a new test file (`sampletest.spec.ts`)
    in the `./app/` folder and copy the following:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的测试将在`.spec.ts`文件中执行。在`./app/`文件夹中创建一个新的测试文件（`sampletest.spec.ts`）并复制以下内容：
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the preceding code, we first write a sample test to showcase the main concepts
    in Jamine. We create a test suite, define our test suite, and write the expectations.
    In the sample test, we do a simple check to see that `true` is the same as `true`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们首先编写一个示例测试来展示Jamine中的主要概念。我们创建一个测试套件，定义我们的测试套件，并编写期望。在示例测试中，我们进行了一个简单的检查，看看`true`是否与`true`相同。
- en: 'We also write a simple test for `AppComponent`. We expect the component to
    have a `hello`property that is equal to `Hello, World`. Let''s ensure that the
    test passes by updating `app.component.ts`:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还为`AppComponent`编写了一个简单的测试。我们期望该组件具有一个`hello`属性，其值等于`Hello, World`。让我们通过更新`app.component.ts`来确保测试通过：
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We have satisfied Karma's configuration by creating the file with the `.spec.ts` extension.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 通过创建带有`.spec.ts`扩展名的文件，我们满足了Karma的配置要求。
- en: You can test several components as well. For example, when you create new components
    through Angular CLI, it automatically creates the test files (`.spec.ts`) for
    the components, which do nothing but test whether the components are working correctly
    together with the other components. For Angular, the convention is to have a `.spec.ts`
    file for each `.ts` file. The files are run using the Jasmine JavaScript test
    framework through the Karma task runner when you use the `ng test` command.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以测试多个组件。例如，当您通过Angular CLI创建新组件时，它会自动为组件创建测试文件（`.spec.ts`），这些文件只是测试组件是否与其他组件正确配合工作。对于Angular来说，惯例是为每个`.ts`文件都有一个`.spec.ts`文件。当您使用`ng
    test`命令时，这些文件将通过Karma任务运行器使用Jasmine JavaScript测试框架运行。
- en: Configuring Karma
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置Karma
- en: 'In order to configure our Karma, we need to update the `karma.conf.js`file.
    The default one has the following content:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 为了配置我们的Karma，我们需要更新`karma.conf.js`文件。默认文件的内容如下：
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Here, we are showing that the PhantomJS browser will be used; Jasmine testing
    framework and Webpack will be used for bundling the files.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们展示了将使用PhantomJS浏览器；将使用Jasmine测试框架和Webpack进行文件捆绑。
- en: Testing the components
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试组件
- en: Components are the centerpiece of Angular. They are the nucleus around which
    the rest of the framework is built. We'll explore what a component is, why it
    is important, and how to test it.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 组件是Angular的核心。它们是整个框架构建的核心。我们将探讨组件是什么，为什么它很重要，以及如何测试它。
- en: Our testing strategy revolves around verifying the correctness of the properties
    and methods of the classes that make up the components.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的测试策略围绕验证组件的属性和方法的正确性展开。
- en: When writing unit tests for components, we initialize the component and inject
    any dependencies manually rather than bootstrapping the application.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在为组件编写单元测试时，我们手动初始化组件并注入任何依赖项，而不是启动应用程序。
- en: The `TestBed` function will be used for testing the component, which is the
    main entry to all of Angular's testing interface. It will enable us to create
    our components for use in running unit tests.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`TestBed`函数将用于测试组件，这是所有Angular测试接口的主要入口。它将使我们能够创建我们的组件以用于运行单元测试。'
- en: '`TestBed` is the primary API for writing unit tests for Angular applications
    and libraries.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`TestBed`是为Angular应用程序和库编写单元测试的主要API。'
- en: 'Create a new component named `sample`:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为`sample`的新组件：
- en: '[PRE5]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This automatically generates the `.ts`and `.spec.ts`files. We will also add
    some tests to the generated `.spec.ts` file to get a hang of how the testing works:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这将自动生成`.ts`和`.spec.ts`文件。我们还将在生成的`.spec.ts`文件中添加一些测试，以了解测试的工作原理：
- en: '[PRE6]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here is the updated test spec:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这是更新后的测试规范：
- en: '[PRE7]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `createComponent` method in `TestBed` creates an instance of the component.
    These tests tell Angular when to perform change detection through `fixture.detectChanges()`
    (which we received from `createComponent`). `TestBed.createComponent`, by default,
    doesn't trigger the change detection. This is why specific parts in our test won't
    show the changes on the DOM.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`TestBed`中的`createComponent`方法创建组件的实例。这些测试告诉Angular何时通过`fixture.detectChanges()`（我们从`createComponent`中获得）执行变更检测。默认情况下，`TestBed.createComponent`不会触发变更检测。这就是为什么我们测试中的特定部分不会在DOM上显示更改。'
- en: 'Making use of `ComponentFixtureAutoDetect` from `@angular/core/testing` enables
    you to apply auto detection globally:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 利用`@angular/core/testing`中的`ComponentFixtureAutoDetect`可以全局应用自动检测：
- en: '[PRE8]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Testing services
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试服务
- en: 'Let''s create a sample service. Our service has only one method that returns
    an array of the available users for the application:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个示例服务。我们的服务只有一个方法，返回应用程序可用用户的数组：
- en: '[PRE9]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We instantiate the service using the `beforeEach` method. This is a good practice
    even if we only have one spec. We are checking each individual user and the total
    count:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`beforeEach`方法实例化服务。即使我们只有一个规范，这也是一个好习惯。我们正在检查每个单独的用户和总数：
- en: '[PRE10]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Testing using HTTP
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用HTTP进行测试
- en: 'Let''s start by creating a `users.serviceHttp.ts` file:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先创建一个`users.serviceHttp.ts`文件：
- en: '[PRE11]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In this case it uses `http.get()` to fetch the data from a JSON file. We then
    used `Observable.map()` to transform the response into the final result using
    `json()`.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，它使用`http.get()`从JSON文件中获取数据。然后我们使用`Observable.map()`使用`json()`将响应转换为最终结果。
- en: 'The difference that exists between this test and the previous one is the use
    of an asynchronous test:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这个测试与之前的测试之间的区别在于使用了异步测试：
- en: '[PRE12]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Testing using MockBackend
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用MockBackend进行测试
- en: 'A more sensible approach is to replace HTTP calls with a MockBackend. For doing
    this, we can use the `beforeEach()`method. This will allow us to mock our responses
    and avoid hitting the real backend, thereby boosting our tests:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 一个更明智的方法是用MockBackend替换HTTP调用。为此，我们可以使用`beforeEach()`方法。这将允许我们模拟我们的响应并避免访问真实的后端，从而提高我们的测试：
- en: '[PRE13]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We made our mocked response. So, when we finally make the call to our service,
    it gets the expected results.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们制作了模拟响应。因此，当我们最终调用我们的服务时，它会得到预期的结果。
- en: Testing a directive
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试一个指令
- en: The directive decorator in Angular is used to decorate a class that has the
    responsibility of extending components in the DOM, based on the defined methods
    and logic.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在Angular中，指令装饰器用于装饰一个负责根据定义的方法和逻辑扩展DOM中组件的类。
- en: 'Take this directive that changes the background, for example:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 以更改背景的指令为例：
- en: '[PRE14]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We will be making use of an attribute directive, `logClicks`, which logs the
    number of clicks on the host element.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用一个属性指令`logClicks`，它记录宿主元素上的点击次数。
- en: 'Let''s create a `container` component. This will be our host, reproducing the
    events emitted by our directive:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个`container`组件。这将是我们的宿主，重现我们指令发出的事件：
- en: '[PRE15]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Here is the test spec:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是测试规范：
- en: '[PRE16]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The `beforeEach` method is used to separate the logic for creating the component
    from the tests. DOM API is recommended and is used to trigger the click on the
    container.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`beforeEach`方法用于将创建组件的逻辑与测试分开。建议使用DOM API来触发容器上的点击。'
- en: Testing a pipe
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试管道
- en: 'Pipes in Angular are functions that can transform input data into a user-readable
    format. Here is an example of a custom pipe called `capitalise` in our `src` folder,
    using the standard `String.toUpperCase()`. This is just an example; Angular already
    has its own pipe for capitalization:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Angular中的管道是可以将输入数据转换为用户可读格式的函数。以下是我们`src`文件夹中一个名为`capitalise`的自定义管道的示例，使用了标准的`String.toUpperCase()`。这只是一个例子；Angular已经有了自己的管道来进行大写转换：
- en: '[PRE17]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The `capitalise.pipe.spec.ts` file will be as follows:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`capitalise.pipe.spec.ts`文件将如下所示：'
- en: '[PRE18]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Debugging
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试
- en: Augury is a Chrome extension for debugging Angular applications, just like Batarang
    was used for debugging Angular 1 apps. Once installed, the extension is seen as
    a dev tool plugin that has features for testing out your Angular app's behavior.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Augury是用于调试Angular应用程序的Chrome扩展，就像Batarang用于调试Angular 1应用程序一样。安装后，该扩展被视为具有测试Angular应用程序行为功能的开发工具插件。
- en: Augury
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Augury
- en: 'Augury inspects and visualizes the component tree with different properties
    of one or more components. Install the Augury tools from the Augury Chrome extension
    page, ([https://chrome.google.com/webstore/detail/augury/elgalmkoelokbchhkhacckoklkejnhcd](https://chrome.google.com/webstore/detail/augury/elgalmkoelokbchhkhacckoklkejnhcd))
    and click on the ADD TO CHROME button. Once the installation is completed, the
    following steps need to be taken in order to work with Augury:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: Augury检查和可视化一个或多个组件的不同属性的组件树。从Augury Chrome扩展页面安装Augury工具([https://chrome.google.com/webstore/detail/augury/elgalmkoelokbchhkhacckoklkejnhcd](https://chrome.google.com/webstore/detail/augury/elgalmkoelokbchhkhacckoklkejnhcd))，然后单击“添加到Chrome”按钮。安装完成后，需要按照以下步骤才能使用Augury：
- en: Use *Ctrl* + *Shift* + *I* to open the Chrome Developer Tools window.
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用*Ctrl* + *Shift* + *I*打开Chrome开发者工具窗口。
- en: Click on Augury to open the tool. It displays menu options such as Component
    Tree, Router Tree, and NgModules.
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单击Augury打开工具。它显示菜单选项，如组件树、路由器树和NgModules。
- en: The Augury icon can be seen in the top-right corner of your browser once it
    is installed.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装完成，您可以在浏览器的右上角看到Augury图标。
- en: Open it and you will see a list of currently loaded components in your application,
    sorted by their hierarchy. You can also see where they are located in the DOM.
    Any change made to a component will also be shown.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 打开后，您将看到当前加载的组件列表，按其层次结构排序。您还可以看到它们在DOM中的位置。对组件所做的任何更改也将显示出来。
- en: 'With this, it becomes easier for developers to get an insight on how their
    apps are performing and where the problems and bugs could be originating from:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，开发人员可以更容易地了解他们的应用程序的性能以及问题和错误可能来自哪里：
- en: '![](assets/17bb4831-72e8-4616-a777-c4bb6fc873da.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/17bb4831-72e8-4616-a777-c4bb6fc873da.png)'
- en: Augury features
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Augury功能
- en: Let's look at some of the Augury features in detail.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细看一些Augury功能。
- en: Component tree
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组件树
- en: 'This is the first view that is visible, which shows the loaded components belonging
    to the application:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这是可见的第一个视图，显示了属于应用程序的加载组件：
- en: '**![](assets/e58b5b39-947e-488f-ae74-58e24c697d4c.png)**'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '**![](assets/e58b5b39-947e-488f-ae74-58e24c697d4c.png)**'
- en: 'The component tree displays a hierarchical relationship of the components.
    More information about a component can also be shown by selecting each component:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 组件树显示了组件之间的分层关系。通过选择每个组件，还可以显示有关组件的更多信息：
- en: '**![](assets/1ad9bd8c-856a-4eff-83d2-b40511d3c783.png)**'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '**![](assets/1ad9bd8c-856a-4eff-83d2-b40511d3c783.png)**'
- en: Router tree
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 路由器树
- en: 'The router tree displays information on how every component in your application
    tree is routed. It does this in a hierarchical order:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 路由器树以分层顺序显示应用程序树中每个组件的路由信息：
- en: '![](assets/b88681df-420b-4e8e-ab85-bb7422aea80a.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b88681df-420b-4e8e-ab85-bb7422aea80a.png)'
- en: Source map
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 源映射
- en: It is noteworthy that the TypeScript code will show whether a source map file
    exists. In production, if no source map is found, only the compiled JavaScript
    code will be displayed, which may also be minified and difficult to read.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，TypeScript代码将显示源映射文件是否存在。在生产环境中，如果找不到源映射，将仅显示编译后的JavaScript代码，这可能也是经过缩小处理的，难以阅读。
- en: 'Clicking on Inject Graph will display the dependency of components and services:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 单击“注入图形”将显示组件和服务的依赖关系：
- en: '**![](assets/f9aaa886-20ea-4461-9cba-d00607c8b449.png)**'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '**![](assets/f9aaa886-20ea-4461-9cba-d00607c8b449.png)**'
- en: It should be noted that for the Augury debugging to work, the application has
    to be set to the development mode.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，要使Augury调试工作，应用程序必须设置为开发模式。
- en: Summary
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: It is important to do unit tests because they run faster and we'll be able to
    get feedback faster. A good advantage of testing is that it helps against regressions
    (the changes that break existing code).
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 进行单元测试很重要，因为它们运行更快，我们将能够更快地获得反馈。测试的一个很大优势是它有助于防止回归（破坏现有代码的更改）。
- en: Debugging helps us identify and remove errors from our code. With Augury, developers
    can have visuals of the application through component trees and visual debugging
    tools. This makes debugging easier.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 调试帮助我们识别和从代码中删除错误。使用Augury，开发人员可以通过组件树和可视化调试工具看到应用程序的可视化效果。这使得调试更容易。
