["```js\nconst rootEl = document.getElementById('root')\nReactDOM.render(<App />, rootEl)\n```", "```js\n<div class=\"slider\" value=\"3\">loading…</div>\n<div cla\"s=\"sli\"er\" val\"e\"\"5\">loading...</div>\n```", "```js\n  const elements = document.querySelectorA'l('.sli'er')\n  elements.forEach(el => {\n    const value = el.getAttribu'e('va'ue')\n    ReactDOM.render(<Slider value={value} />, el)\n  })\n```", "```js\nconst { render } = require('react-dom')\n```", "```js\nconst { createElement, useState } = require('react')\nconst Slider = () => {\n  const [value] = useState(0)\n  ...\n}\n```", "```js\nfunction abc(v) {\n}\n```", "```js\nconst abc = v => {  \n}\n```", "```js\narr.map(v => v * 2)\n```", "```js\nsetCount(v => v + 1)\n```", "```js\nsetCount(function (v) {\n  return v + 1\n})\n```", "```js\nconst fn = a => b => a + b\n```", "```js\nconst fn = (a) => {\n  return (b) => {\n    return a + b\n  }\n}\n```", "```js\nfn()\nfunction fn() {\n}\n```", "```js\nfn()\nconst fn = () => {\n}\n```", "```js\nconst a = [1, 2, 3, 4, 5]\nconst b = [...a, 6]\n```", "```js\nconst a = { first: 'John', last: 'Doe' }\nconst b = { ...a, age: 23 }\n```", "```js\nconst App = ({ title, ...props }) => {\n  return <div {...props}>Hello</div>\n}j\n```", "```js\nfunction abc(a, b, ...rest) {  \n}\nabc(a, b, 1)     // rest = [1]\nabc(a, b, 1, 2)  // rest = [1, 2]\n```", "```js\nconst first = \"John\"\nconst last = \"Doe\"\nconst name = { first, last }\n```", "```js\nconst name = { first: first, last: last }\n```", "```js\nconst onClick = () => {\n  const first = \"John\"\n  const name = { first }\n}\n```", "```js\nconst name = e.target.name\nconst value = e.target.value\nreturn { [name]: value }\n```", "```js\nreturn { name: value }\n```", "```js\nreturn { first: value }\n```", "```js\n  obj[name] = value\n```", "```js\n'This is a string'\n```", "```js\n'\nThis \nis\na \nstring\n'\n```", "```js\nconst what = \"This\"\nconst str = '\n${what}\nis \na\nstring\n'\n```", "```js\nconst n = 3\nconst str = '${n}'\nconst url = 'http://foo.org/bar?id=${n}'\n```", "```js\nconst color = 'red'\nconst Button = css'\n  display: inline-block;\n  color: ${color};\n'\n```", "```js\nfunction image(strings) {\n  return '<img src=\"img/${strings[0]\" />'\n}\nconst s = image'\n  http://google.com\n'\n```", "```js\nconst arr = [1, 2, 3]\nconst [a, b] = arr\n```", "```js\nconst a = arr[0]\nconst b = arr[1]\n```", "```js\nconst name = { first: 'John', last: 'Doe' }\nconst { first, last } = name\n```", "```js\nconst first = name.first\nconst last = name.last\n```", "```js\nconst name = { first: 'John' }\nconst { second } = name\n```", "```js\nconst { first: firstName } = name\n```", "```js\nconst firstName = name.first\n```", "```js\nconst { first } = { ...name, last }\n```", "```js\nconst temp = Object.assign({}, name)\ntemp.last = last\nconst first = temp.first\n```", "```js\nfunction abc() {\n  let a = 1\n  if (true) {\n    const b = 2\n    for (let i = 1; i < 3; i++) {\n      ...\n    }\n  }\n}\n```", "```js\nlet x = 5\nx = 6            // valid\nconst n = \"abc\"\nn = \"def\"        // compiler error\n```", "```js\nlet obj = { a: 1, b: 2 }\nconst obj = { a: 1, b: 2 }\n```", "```js\nconst obj = {}\nobj = {}      // compiler error\nobj.key = ''  // valid\n```", "```js\nconst arr = []\narr = []      // compiler error\narr.push('A') // valid\n```", "```js\nlet obj = {}\nlet arr = []\n```", "```js\nconst Title = () => <div>Hello World</div>\nexport default Title\n```", "```js\nimport Title from './Title'\nconst App = () => <Title />\n```", "```js\nconst Title = () => <div>Hello World</div>\nexport default Title\nconst TitleType = \"Component\"\nexport { TitleType }\n```", "```js\nimport Title, { TitleType } from './Title'\n```", "```js\nconst fn1 = () => {}\nconst fn2 = () => {}\nexport { fn1, fn2 }\n```", "```js\nImport { fn1 as aliasFn1 } from './fns'\n// we can use aliasFn1\n```", "```js\nobj['name'] = 3\n```", "```js\nconst Name = Symbol('name')\nobj[Name] = 3\n```", "```js\nconst Name = Symbol('name')\nobj[Name] = 4\n```", "```js\nSymbol('name') !== Symbol('name')\n```", "```js\nSymbol.for('name') === Symbol.for('name')\n```", "```js\nconst Name = Symbol.for('name')\nobj[Name] = 4\n```", "```js\nh1 {\n  color: red;\n}\n```", "```js\nconst Title = () => {\n  return <h1 className=\"title\">Hello</h1>\n}\n```", "```js\nconst Title = () => {\n  return <h1 style={{ color: \"red\" }}>Hello</h1>\n}\n```", "```js\nconst css = '\n  h1 { color: red; }\n'\n```", "```js\nconst Title = () => (\n  <>\n    <h1>Hello</h1>\n    <style jsx>{'\n      h1 { color: red; }\n    '}</style>  \n  </>\n)\n```", "```js\nimport css from 'styled-jsx/css'\nexport default css'\n  h1 {\n    color: red; \n  }\n'\n```", "```js\nimport titleStyle from '../titleStyle'\nconst Title = () => (\n  <>\n    <h1>Hello</h1>\n    <style jsx>{titleStyle}</style>  \n  </>\n)\n```", "```js\nconst Child = () => <span>World</span>\nconst Title = () => (\n  <>\n    <h1>Hello <Child /></h1>\n    <style jsx>{'\n      span { color: green; }\n    '}\n  </>\n}\n```", "```js\nconst Child = () => <span>World</span>\nconst Title = () => (\n  <>\n    <h1>Hello <Child /></h1>\n    <style jsx global>{'\n      h1 { color: red; }\n      span { color: green; }\n    '}\n    </style>  \n  </>\n)\n```", "```js\nimport styled from 'styled-components'\nconst TitleStyle = styled.h1'\n  color: red;\n'\nconst Title = () => {\n  return (\n    <TitleStyle>\n      Hello World\n    </TitleStyle>\n  )\n}\n```", "```js\nconst TitleStyle = styled.h1'\n  color: red;\n  span { color: green; }\n'\nconst Child = () => <span>World</span>\nconst Title = () => {\n  return (\n    <TitleStyle>\n      Hello <Child />\n    </TitleStyle>\n  )\n}\n```", "```js\nconst fontSize = (props) => \n  props.big ? '3em' : '1.5em'\nconst TitleStyle = styled.h1'\n  font-size: ${fontSize};\n'\nconst Title = ({ big }) => {\n  return (\n    <TitleStyle big={big}>\n      Hello World!\n    </TitleStyle>\n  )\n}\n```", "```js\n<div id=\"root\">loading...</div>\n```", "```js\n  return <h1 title=\"Title\">Hello World</h1>\n```", "```js\n  return React.createElement(\n    'h1', { title: \"Title\" }, \"Hello World\"\n  )\n```", "```js\nconst Title = ({ title }) => {\n  const [count] = useState(0)\n  return React.createElement(\n    'h1', { title, count }, \"Hello World\"\n  )\n}\n```", "```js\n// code below wouldn't work\nconst Title = () => {\n  return React.createElement(\n    'h1', { class: \"title\" }, \"Hello World\"\n  )\n}\n```", "```js\n  return (\n    <h1>\n      <span>\n        Hello World\n      </span>\n    </h1>\n  )\n```", "```js\n  return React.createElement(\n    'h1', null, React.createElement(\n      'span', null, \"Hello World\"\n    )\n  )\n```", "```js\n  return (\n    <ul>\n      {['Apple', 'Orange'].map(v => <li>{v}</li>)}\n    </ul>\n  )\n```", "```js\n  return React.createElement(\n    'ul',\n    null,\n    ['apple', 'orange'].map((v) =>\n      React.createElement('li', null, v)\n    )\n  )\n```", "```js\n  return React.createElement(\n    'ul',\n    null,\n    React.createElement('li', null, 'apple'),\n    React.createElement('li', null, 'orange')\n  )\n```", "```js\nconst Child = () => <h1>Hello World</h1>\nconst Title = () => {\n  return <Child />\n}\n```", "```js\nconst Child = () =>\n  React.createElement(\"h1\", null, \"Hello World\")\nconst Title = () => React.createElement(Child, null)\n```", "```js\nconst Child1 = () => <h1>Hello</h1>\nconst Child2 = () => <h1>World</h1>\nconst Title = ({ flag }) => {\n  const Child = flag ? Child1 : Child2\n  return <Child />\n}\n```", "```js\nconst Child1 = () => React.createElement(\n  \"h1\", null, \"Hello\"\n)\nconst Child2 = () => React.createElement(\n  \"h1\", null, \"World\"\n)\nconst Title = ({ flag }) => {\n  const Child = flag ? Child1 : Child2\n  return React.createElement(Child, null)\n}\n```", "```js\n{\n  $$typeof: Symbol.for('react.element'),\n  type: type,\n  props: props,\n}\n```", "```js\nimport { memo } from 'react'\nconst App = memo(() => {\n  return (\n    <Provider value={3}>\n      <>\n        <div>One</div>\n        <div>Second</div>\n      </>\n    </Provider>\n  )\n})\n```"]