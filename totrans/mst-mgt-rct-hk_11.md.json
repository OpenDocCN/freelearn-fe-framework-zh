["```js\nconst Counter1 = () => {\n  const [count, setCount] = useState(0); // [1]\n  const inc = () => setCount((c) => c + 1);\n  return <>{count} <button onClick={inc}>+1</button></>;\n};\nconst Counter2 = () => {\n  const [count, setCount] = useState(0);\n  const inc = () => setCount((c) => c + 1);\n  return <>{count} <button onClick={inc}>+1</button></>;\n};\nconst App = () => (\n  <>\n    <div><Counter1 /></div>\n    <div><Counter2 /></div>\n  </>\n);\n```", "```js\nconst CountContext = createContext();\nconst CountProvider = ({ children }) => (\n  <CountContext.Provider value={useState(0)}>\n    {children}\n  </CountContext.Provider>\n);\n```", "```js\nconst Counter1 = () => {\n  const [count, setCount] = useContext(CountContext);\n  const inc = () => setCount((c) => c + 1);\n  return <>{count} <button onClick={inc}>+1</button></>;\n};\nconst Counter2 = () => {\n  const [count, setCount] = useContext(CountContext);\n  const inc = () => setCount((c) => c + 1);\n  return <>{count} <button onClick={inc}>+1</button></>;\n};\n```", "```js\nconst App = () => (\n  <CountProvider>\n    <div><Counter1 /></div>\n    <div><Counter2 /></div>\n  </CountProvider>\n);\n```", "```js\nimport { atom, useAtom } from \"jotai\";\n```", "```js\nconst countAtom = atom(0);\n```", "```js\nconst Counter1 = () => {\n  const [count, setCount] = useAtom(countAtom);\n  const inc = () => setCount((c) => c + 1);\n  return <>{count} <button onClick={inc}>+1</button></>;\n};\nconst Counter2 = () => {\n  const [count, setCount] = useAtom(countAtom);\n  const inc = () => setCount((c) => c + 1);\n  return <>{count} <button onClick={inc}>+1</button></>;\n};\n```", "```js\nconst App = () => (\n  <>\n    <div><Counter1 /></div>\n    <div><Counter2 /></div>\n  </>\n);\n```", "```js\nconst TextContext = createContext();\nconst TextProvider = ({ children }) => (\n  <TextContext.Provider value={useState(\"\")}>\n    {children}\n  </TextContext.Provider>\n);\nconst App = () => (\n  <TextProvider>\n    ...\n  </TextProvider>\n);\n// When you use it in a component\n  const [text, setText] = useContext(TextContext);\n```", "```js\nconst textAtom = atom(\"\");\n// When you use it in a component\n  const [text, setText] = useAtom(textAtom);\n```", "```js\nconst personStore = createStore({\n  firstName: \"React\",\n  lastName: \"Hooks\",\n  age: 3,\n});\n```", "```js\nconst selectFirstName = (state) => state.firstName;\nconst selectLastName = (state) => state.lastName;\nconst PersonComponent = () => {\n  const firstName =\n    useStoreSelector(store, selectFirstName);\n  const lastName = useStoreSelector(store, selectLastName);\n  return <>{firstName} {lastName}</>;\n};\n```", "```js\nconst firstNameAtom = atom(\"React\");\nconst lastNameAtom = atom(\"Hooks\");\nconst ageAtom = atom(3);\n```", "```js\nconst PersonComponent = () => {\n  const [firstName] = useAtom(firstNameAtom);\n  const [lastName] = useAtom(lastNameAtom);\n  return <>{firstName} {lastName}</>;\n};\n```", "```js\nconst personAtom = atom((get) => ({\n  firstName: get(firstNameAtom),\n  lastName: get(lastNameAtom),\n  age: get(ageAtom),\n}));\n```", "```js\nconst PersonComponent = () => {\n  const person = useAtom(personAtom);\n  return <>{person.firstName} {person.lastName}</>;\n};\n```", "```js\nconst fullNameAtom = atom((get) => ({\n  firstName: get(firstNameAtom),\n  lastName: get(lastNameAtom),\n}));\n```", "```js\nconst PersonComponent = () => {\n  const person = useAtom(fullNameAtom);\n  return <>{person.firstName} {person.lastName}</>;\n};\n```", "```js\nconst identity = (x) => x;\nconst PersonComponent = () => {\n  const person = useStoreSelector(store, identity);\n  return <>{person.firstName} {person.lastName}</>;\n};\n```", "```js\nconst selectFullName = (state) => ({\n  firstName: state.firstName,\n  lastName: state.lastName,\n});\nconst PersonComponent = () => {\n  const person = useStoreSelector(store, selectFullName);\n  return <>{person.firstName} {person.lastName}</>;\n};\n```", "```js\nconst count1Atom = atom(0);\nconst count2Atom = atom(0);\n```", "```js\nconst Counter = ({ countAtom }) => {\n  const [count, setCount] = useAtom(countAtom);\n  const inc = () => setCount((c) => c + 1);\n  return <>{count} <button onClick={inc}>+1</button></>;\n};\n```", "```js\nconst totalAtom = atom(\n  (get) => get(count1Atom) + get(count2Atom)\n);\n```", "```js\nconst Total = () => {\n  const [total] = useAtom(totalAtom);\n  return <>{total}</>;\n};\n```", "```js\nconst App = () => (\n  <>\n    (<Counter countAtom={count1Atom} />)\n    +\n    (<Counter countAtom={count2Atom} />)\n    =\n    <Total />  \n  </>\n);\n```", "```js\nconst countAtom = atom(0);\n```", "```js\nimport { atom, useAtom, Provider } from \"jotai\";\n```", "```js\nconst Counter = ({ countAtom }) => {\n  const [count, setCount] = useAtom(countAtom);\n  const inc = () => setCount((c) => c + 1);\n  return <>{count} <button onClick={inc}>+1</button></>;\n};\n```", "```js\nconst App = () => (\n  <>\n    <Provider>\n      <h1>First Provider</h1>\n      <div><Counter /></div>\n      <div><Counter /></div>\n    </Provider>\n    <Provider>\n      <h1>Second Provider</h1>\n      <div><Counter /></div>\n      <div><Counter /></div>\n    </Provider>\n  </>\n);\n```", "```js\nconst doubledCountAtom = atom(\n  (get) => get(countAtom) * 2\n);\n```", "```js\ntype Todo = {\n  id: string;\n  title: string;\n  done: boolean;\n};\n```", "```js\nconst todosAtom = atom<Todo[]>([]);\n```", "```js\nconst TodoItem = ({\n  todo,\n  removeTodo,\n  toggleTodo,\n}: {\n  todo: Todo;\n  removeTodo: (id: string) => void;\n  toggleTodo: (id: string) => void;\n}) => {\n  return (\n    <div>\n      <input\n        type=\"checkbox\"\n        checked={todo.done}\n        onChange={() => toggleTodo(todo.id)}\n      />\n      <span\n        style={{\n          textDecoration:\n            todo.done ? \"line-through\" : \"none\",\n        }}\n      >\n        {todo.title}\n      </span>\n      <button\n        onClick={() => removeTodo(todo.id)}\n      >Delete</button>\n    </div>\n  );\n};\n```", "```js\nconst MemoedTodoItem = memo(TodoItem);\n```", "```js\nconst TodoList = () => {\n  const [todos, setTodos] = useAtom(todosAtom);\n  const removeTodo = useCallback((id: string) => setTodos(\n    (prev) => prev.filter((item) => item.id !== id)\n  ), [setTodos]);\n  const toggleTodo = useCallback((id: string) => setTodos(\n    (prev) => prev.map((item) =>\n      item.id === id ? { ...item, done: !item.done } : item\n    )\n  ), [setTodos]);\n  return (\n    <div>\n      {todos.map((todo) => (\n        <MemoedTodoItem\n          key={todo.id}\n          todo={todo}\n          removeTodo={removeTodo}\n          toggleTodo={toggleTodo}\n        />\n      ))}\n    </div>\n  );\n};\n```", "```js\nconst NewTodo = () => {\n  const [, setTodos] = useAtom(todosAtom);\n  const [text, setText] = useState(\"\");\n  const onClick = () => {\n    setTodos((prev) => [\n      ...prev,\n      { id: nanoid(), title: text, done: false },\n    ]);\n    setText(\"\");\n  };\n  return (\n    <div>\n      <input\n        value={text}\n        onChange={(e) => setText(e.target.value)}\n      />\n      <button onClick={onClick} disabled={!text}>\n        Add\n      </button>\n    </div>\n  );\n};\n```", "```js\nconst App = () => (\n  <>\n    <TodoList />\n    <NewTodo />\n  </>\n);\n```", "```js\ntype Todo = {\n  title: string;\n  done: boolean;\n};\n```", "```js\ntype TodoAtom = PrimitiveAtom<Todo>;\n```", "```js\nconst todoAtomsAtom = atom<TodoAtom[]>([]);\n```", "```js\nconst TodoItem = ({\n  todoAtom,\n  remove,\n}: {\n  todoAtom: TodoAtom;\n  remove: (todoAtom: TodoAtom) => void;\n}) => {\n  const [todo, setTodo] = useAtom(todoAtom);\n  return (\n    <div>\n      <input\n        type=\"checkbox\"\n        checked={todo.done}\n        onChange={() => setTodo(\n          (prev) => ({ ...prev, done: !prev.done })\n        )}\n      />\n      <span\n        style={{\n          textDecoration: \n            todo.done ? \"line-through\" : \"none\",\n        }}\n      >\n        {todo.title}\n      </span>\n      <button onClick={() => remove(todoAtom)}>\n        Delete\n      </button>\n    </div>\n  );\n};\nconst MemoedTodoItem = memo(TodoItem);\n```", "```js\nconst TodoList = () => {\n  const [todoAtoms, setTodoAtoms] =\n    useAtom(todoAtomsAtom);\n  const remove = useCallback(\n    (todoAtom: TodoAtom) => setTodoAtoms(\n      (prev) => prev.filter((item) => item !== todoAtom)\n    ),\n    [setTodoAtoms]\n  );\n  return (\n    <div>\n      {todoAtoms.map((todoAtom) => (\n        <MemoedTodoItem\n          key={`${todoAtom}`}\n          todoAtom={todoAtom}\n          remove={remove}\n        />\n      ))}\n    </div>\n  );\n};\n```", "```js\nconst NewTodo = () => {\n  const [, setTodoAtoms] = useAtom(todoAtomsAtom);\n  const [text, setText] = useState(\"\");\n  const onClick = () => {\n    setTodoAtoms((prev) => [\n      ...prev,\n      atom<Todo>({ title: text, done: false }),\n    ]);\n    setText(\"\");\n  };\n  return (\n    <div>\n      <input\n        value={text}\n        onChange={(e) => setText(e.target.value)}\n      />\n      <button onClick={onClick} disabled={!text}>\n        Add\n      </button>\n    </div>\n  );\n};\n```", "```js\nconst App = () => (\n  <>\n    <TodoList />\n    <NewTodo />\n  </>\n);\n```", "```js\nconst countAtom = atom(0);\nconst doubledCountAtom = atom(\n  (get) => get(countAtom) * 2\n);\n```", "```js\nconst doubledCountAtom = atom(\n  (get) => get(countAtom) * 2,\n  (get, set, arg) => set(countAtom, arg / 2)\n);\n```", "```js\nconst anotherCountAtom = atom(\n  (get) => get(countAtom),\n  (get, set, arg) => {\n    const nextCount = typeof arg === 'function' ?\n      arg(get(countAtom)) : arg\n    set(countAtom, nextCount)\n    console.log('set count', nextCount)\n  )\n);\n```", "```js\nconst countAtom = count(0);\nconst incrementCountAtom(\n  null,\n  (get, set, arg) => set(countAtom, (c) => c + 1)\n);\n```", "```js\nconst IncrementButton = () => {\n  const [, incrementCount] = useAtom(incrementCountAtom);\n  return <button onClick={incrementCount}>Click</button>;\n};\n```", "```js\nconst countAtom = atom(0);\ncountAtom.onMount = (setCount) => {\n  console.log(\"count atom starts to be used\");\n  const onUnmount = () => {\n    console.log(\"count atom ends to be used\");\n  };\n  return onUnmount;\n};\n```"]