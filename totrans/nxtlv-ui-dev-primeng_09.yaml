- en: '9'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Customizing PrimeNG Components with Theming
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Every application has its own unique identity, and its visual appeal plays a
    significant role in defining that identity. While functionality is crucial, the
    look and feel of an application can significantly influence user experience. PrimeNG
    offers a robust theming system that allows you to tailor the appearance of components,
    ensuring that the application not only works well but also looks the part.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will explore the process of customizing the appearance
    of PrimeNG components in Angular applications using theming. By mastering those
    techniques, you will gain the ability to tailor the visual presentation of PrimeNG
    components to align with the application’s unique brand and design requirements.
  prefs: []
  type: TYPE_NORMAL
- en: We will also delve into various topics such as working with pre-built themes,
    creating custom themes, leveraging the Theme Designer tool, and overriding component
    styles. You will discover the power and flexibility of theming in PrimeNG and
    learn how to achieve a cohesive and personalized user interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'The chapter will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing PrimeNG theming
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with pre-built themes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating your own custom themes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overriding component styles and other tips
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter contains various working code samples on PrimeNG theming. You
    can find the related source code in the `chapter-09` folder of the following GitHub
    repository: [https://github.com/PacktPublishing/Next-Level-UI-Development-with-PrimeNG/tree/main/apps/chapter-09](https://github.com/PacktPublishing/Next-Level-UI-Development-with-PrimeNG/tree/main/apps/chapter-09).'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing PrimeNG theming
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Theming** plays a crucial role in creating visually appealing and consistent
    user interfaces, allowing you to customize the appearance of components to match
    the application’s branding and design requirements. PrimeNG offers a comprehensive
    theming system that empowers you to create personalized and cohesive user interfaces.'
  prefs: []
  type: TYPE_NORMAL
- en: PrimeNG theming isn’t just about changing colors or fonts, though. It involves
    modifying various aspects of the component’s appearance, such as colors, typography,
    spacing, and other design elements. PrimeNG provides a wide range of tools, resources,
    and guidelines to facilitate the theming process, enabling developers to create
    unique and visually appealing user interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: 'PrimeNG theming is used in various scenarios, depending on the specific requirements
    of the application. Here are a few common use cases where PrimeNG theming proves
    valuable:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Branding and customization**: When you need to align the appearance of PrimeNG
    components with your application’s branding guidelines, theming allows you to
    create a consistent and personalized look and feel.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Application-specific design**: In some cases, the default styles of PrimeNG
    components may not align with the specific design requirements of your application.
    Theming enables you to modify the appearance of components to match your application’s
    visual design language, ensuring a cohesive and harmonious user interface.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Consistent styling**: When building large-scale applications with multiple
    developers or teams, theming ensures consistency in the visual styles across different
    components. By adhering to a unified theming approach, you can maintain a coherent
    user experience throughout the application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Having grasped the foundational knowledge of PrimeNG theming, it’s time to delve
    into the practical aspects. One of the quickest ways to kickstart your theming
    journey is by leveraging PrimeNG’s vast array of pre-built themes, which we’ll
    explore next.
  prefs: []
  type: TYPE_NORMAL
- en: Working with pre-built themes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PrimeNG **Pre-Built Themes** are a collection of predefined style sheets that
    define the visual appearance of PrimeNG components. These themes are based on
    popular design frameworks such as Bootstrap and Material Design, and they come
    with a wide range of color schemes and variations. Each theme provides consistent
    styling for all PrimeNG components, ensuring a cohesive and polished look for
    your application.
  prefs: []
  type: TYPE_NORMAL
- en: The pre-built themes are shipped with PrimeNG as part of the `npm` distribution,
    are easily importable, and can be applied to your application with a few simple
    steps. These themes are also highly customizable, allowing you to tweak the colors,
    fonts, and other visual properties according to your project’s requirements.
  prefs: []
  type: TYPE_NORMAL
- en: When to use PrimeNG pre-built themes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'While customization offers a unique identity, there are scenarios where pre-built
    themes can really save the day:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Rapid prototyping**: When you’re in the initial stages of application development
    and need a quick design to visualize the functionality'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Consistent design language**: For projects where a consistent design across
    multiple applications or modules is essential'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reduced development time**: When the project timeline is tight, and there’s
    no room for extensive design iterations'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Example of PrimeNG pre-built themes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In previous chapters, we had a chance to work with PrimeNG theming. In this
    chapter, let’s refresh our minds on how to integrate PrimeNG theming into our
    Angular application.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use a pre-built theme, it’s as simple as importing it into your project.
    Let’s see how:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the PrimeNG Built-in Themes ([https://primeng.org/theming#builtinthemes](https://primeng.org/theming#builtinthemes))
    and pick a theme that resonates with your project’s vibe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once you’ve chosen a theme, integrate it into your project. For instance, if
    you’ve selected the `lara-light-blue` theme, add the following lines to `styles.scss`
    or `styles.css`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This import statement ensures that the styles defined in the `lara-light-blue`
    theme are applied to your application. Once the theme is imported, all PrimeNG
    components will automatically adopt the styling defined by the theme.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, you can start using PrimeNG components in your application, such as the
    `p-button`, `p-card`, and `p-table` components. These components will inherit
    the styles defined by the pre-built theme, giving them a consistent and visually
    appealing appearance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Your applications might have custom fonts or stylings. Always ensure that the
    theme’s CSS is loaded after the default PrimeNG CSS to ensure the theme styles
    take precedence.
  prefs: []
  type: TYPE_NORMAL
- en: We have explored the convenience of PrimeNG’s pre-built themes, which offer
    a wide selection of visually appealing styles out of the box. Now, let’s dive
    into the topic of switching themes, where we’ll learn how to seamlessly switch
    between different PrimeNG themes to suit our application’s design requirements
    and preferences.
  prefs: []
  type: TYPE_NORMAL
- en: Switching themes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the key advantages of PrimeNG pre-built themes is that you can switch
    between different themes on the fly. This feature allows users of your application
    to choose their preferred theme, providing them with a personalized and customizable
    experience.
  prefs: []
  type: TYPE_NORMAL
- en: To switch themes, you typically need to replace the theme CSS file reference
    in your project. For instance, if you are currently using the `lara-blue-light`
    theme and wish to switch to the `bootstrap4-light-purple` theme, you’d replace
    the CSS file reference in your `index.html` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a step-by-step guide on how to do it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to switch themes, you need to have all your themes ready in the `assets`
    folder. You can find a full list of the built-in PrimeNG themes under the `node_modules/primeng/resources/themes`
    folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.1 – PrimeNG built-in themes](img/B18805_09_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.1 – PrimeNG built-in themes
  prefs: []
  type: TYPE_NORMAL
- en: 'After that, you can copy the themes that you want to use in your application
    to your `assets` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.2 – Copied built-in themes](img/B18805_09_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.2 – Copied built-in themes
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, I copied four built-in themes to our application: `bootstrap4-light-blue`,
    `lara-light-blue`, `md-dark-indigo`, and `viva-dark`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add your default theme reference to `index.html`. So, instead of having your
    default in the `style.scss` file, you will have it in the `index.html` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this code, we added a reference to the `lara-light-blue` theme with the `theme-link`
    ID.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, it’s time to add switch-theme functionality to our component. Here is
    the code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let’s break down the code:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`<div class="flex align-items-center" *ngFor="let theme of themes">`: This
    code iterates over the `themes` array using the `ngFor` directive. For each theme
    in the array, it creates a radio button input using the `p-radioButton` component.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`themes = [...]`: This defines the `themes` array, which contains objects representing
    different themes. Each theme object has a `name` property that represents the
    display name of the theme and a `value` property that represents the unique identifier
    of the theme.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`selectedTheme`: This indicates the initially selected theme value.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`changeTheme() {...}`: This method is called when a radio button is clicked.
    It retrieves the `link` element with the `theme-link` ID. After that, it will
    update the `href` attribute of the `link` element to point to the CSS file of
    the selected theme.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s take a look at the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.3 – Switching themes](img/B18805_09_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.3 – Switching themes
  prefs: []
  type: TYPE_NORMAL
- en: We have set up a theme switcher that allows users to select a theme using radio
    buttons. When a radio button is clicked, we will be able to switch to the desired
    theme. You can see that on the left we’re using the `Lara Light Blue` theme, and
    on the right, we’re using `Bootstrap4 Light Purple`, which will give a different
    experience to our users.
  prefs: []
  type: TYPE_NORMAL
- en: In general, working with pre-built themes in PrimeNG provides you with a convenient
    and efficient way to style applications. In the next section, we will explore
    the process of creating custom themes in PrimeNG, empowering you to craft a truly
    personalized and distinctive user experience.
  prefs: []
  type: TYPE_NORMAL
- en: Creating your own custom themes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While PrimeNG offers plenty of pre-built themes, there might be situations where
    you want a unique look and feel that aligns more closely with your brand or specific
    design requirements. That’s where custom themes come into play. These themes allow
    you to tailor the appearance of PrimeNG components to your exact specifications.
  prefs: []
  type: TYPE_NORMAL
- en: What are PrimeNG custom themes?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A **custom theme** in PrimeNG is essentially a set of CSS styles that override
    the default styles of PrimeNG components. By creating a custom theme, you have
    the flexibility to define colors, fonts, spacings, and other design elements that
    match your brand’s identity or the specific design language of your project.
  prefs: []
  type: TYPE_NORMAL
- en: When are PrimeNG custom themes used?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Custom themes are particularly beneficial in the following situations:'
  prefs: []
  type: TYPE_NORMAL
- en: You’re building a branded application where the visual identity needs to be
    consistent with other digital assets of your brand
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The pre-built themes don’t align with the specific design requirements of your
    project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You’re aiming for a unique user interface that stands out from typical applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There’s a need to adhere to specific accessibility guidelines that might not
    be covered by the default themes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to create PrimeNG custom themes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Creating a custom theme might sound daunting, but with PrimeNG’s structure,
    it’s quite straightforward. You have three alternatives to choose from, each offering
    its own advantages and flexibility. Let’s delve into each option:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Visual Editor**: The Visual Editor is a user-friendly tool provided by PrimeNG
    that allows you to visually customize and style your theme'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Command-line Sass compilation**: If you prefer a more hands-on approach,
    you can choose to compile your theme using the command-line Sass tool'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Embedding SCSS files in your project**: The third alternative involves embedding
    the SCSS files directly within your project’s directory structure'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: As of the book's release, the Visual Editor is currently disabled. However,
    there is good news - the PrimeTek team has made the decision to open-source the
    Designer, making it freely available to use. The anticipated release for this
    exciting development is scheduled for Q1 2024\. For the most up-to-date information,
    please visit the official PrimeTek website.
  prefs: []
  type: TYPE_NORMAL
- en: In all three options, it is crucial to import the generated theme file into
    your project. This ensures that the customized theme is properly applied to the
    PrimeNG components, allowing you to enjoy the benefits of your personalized visual
    style.
  prefs: []
  type: TYPE_NORMAL
- en: Choose the option that aligns best with your preferences and project requirements,
    and embark on the journey of creating a unique and visually appealing theme for
    your PrimeNG-powered application.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a custom theme via the Visual Editor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The world of theming in PrimeNG has been revolutionized with the introduction
    of the **Visual Editor**. No longer do you need to dive deep into lines of Sass
    or CSS to get the perfect look for your components. With the Visual Editor, creating
    a custom theme is as intuitive as dragging a slider or picking a color from a
    palette.
  prefs: []
  type: TYPE_NORMAL
- en: With its intuitive interface, you can modify various aspects of the theme, such
    as colors, typography, spacing, and more. The Visual Editor provides real-time
    previews, making it easy to see the changes as you customize your theme. Once
    you are satisfied with the modifications, you can export the theme file, which
    can be directly imported into your project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Creating a custom theme with the Visual Editor is a breeze. Here’s a step-by-step
    guide:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the PrimeNG theming page and launch the Visual Editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start with a pre-built theme that’s closest to your desired look. This serves
    as a foundation upon which you can make further customizations. In this example,
    I will choose the `lara-light` theme.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.4 – Choose a base theme](img/B18805_09_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.4 – Choose a base theme
  prefs: []
  type: TYPE_NORMAL
- en: Use the Visual Editor’s intuitive controls to adjust colors, fonts, and other
    design elements. As you make changes, you’ll see a real-time preview of how components
    look.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.5 – Customize your theme](img/B18805_09_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.5 – Customize your theme
  prefs: []
  type: TYPE_NORMAL
- en: On the left panel, you have the ability to modify the base theme. There are
    plenty of options for you to customize.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing this book, the current Visual Editor is deemed to be
    in a legacy state. A new advanced UI-based Theme Designer will be released soon.
  prefs: []
  type: TYPE_NORMAL
- en: Once satisfied with your custom theme, simply export it. The Visual Editor will
    generate all the necessary CSS files for you.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.6 – Download your custom theme](img/B18805_09_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.6 – Download your custom theme
  prefs: []
  type: TYPE_NORMAL
- en: After finishing your customization, you can start to download your custom theme
    by clicking on the `Download` folder with the name `theme.css`.
  prefs: []
  type: TYPE_NORMAL
- en: After downloading the exported files, you can start to include them in your
    Angular project. Make sure they’re loaded after the default PrimeNG styles to
    ensure your customizations take precedence.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you only have one theme in your app, you can just put it in the `styles.scss`
    file or in `index.html`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here is the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.7 – Apply your custom theme](img/B18805_09_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.7 – Apply your custom theme
  prefs: []
  type: TYPE_NORMAL
- en: Now, your application has the desired look and feel of your custom theme.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a custom theme via Sass compilation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The second method, using Sass compilation, gives you full control over the theme
    customization process. You can manually edit the theme’s SCSS files, adjusting
    variables to achieve the desired visual style. Once you have made the necessary
    modifications, you can use the command-line Sass compiler to generate the CSS
    output. The compiled CSS file can then be imported into your project, ensuring
    that your custom theme is applied to the PrimeNG components.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is how we do it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Clone the `primeng-sass-theme` repository from GitHub:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install the NPM packages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After installing the necessary packages, we can find all of the SCSS files
    under the `themes` | `mytheme` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.8 – mytheme folder](img/B18805_09_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.8 – mytheme folder
  prefs: []
  type: TYPE_NORMAL
- en: 'Under the `mytheme` folder, you have a few options to customize your custom
    theme:'
  prefs: []
  type: TYPE_NORMAL
- en: '`variables`: You can customize the CSS variables under this folder, changing
    the button background, primary text color, border radius, and so on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`_extension.scss`: Update this file if you want to override the component designs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`_font.scss`: This is where you can define a custom font for your project'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`theme.scss`: This file imports theme files, along with the `theme-base` folder,
    in order to combine everything'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After making changes to your custom theme, compile your changes by running
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can see that, after compiling, we created a `theme.css` file under the `mytheme`
    folder, which now can be added to our project.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a custom theme by embedding SCSS files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This third approach allows you to integrate the theme customization seamlessly
    into your existing build environment. By placing the theme SCSS files in a designated
    location within your project, such as the `assets` or `styles` folder, you can
    leverage your build tools to automatically compile the SCSS files into CSS during
    the build process.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Copy the `mytheme` and `theme-base` folder to our `assets` folder. This option
    grants you the flexibility to incorporate the Angular CLI default process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.9 – mytheme in the Angular project](img/B18805_09_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.9 – mytheme in the Angular project
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, all we need to do is import `theme.scss` from `mytheme` to `styles.scss`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Finally, when we modify anything under `mytheme`, the Angular CLI will handle
    the compilation for us naturally without any manual work.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the journey of mastering PrimeNG theming, we’ve seen the power and flexibility
    of creating custom theme methods, making theme customization a straightforward
    and enjoyable process. Let’s now shift our focus to overriding component styles
    and other advanced styling techniques to truly make our UIs stand out.
  prefs: []
  type: TYPE_NORMAL
- en: Overriding component styles and other tips
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While PrimeNG offers plenty of themes and customization options, there will
    always be scenarios where we need to tweak certain styles to fit our application’s
    unique requirements. This section will guide you through the process of overriding
    component styles and share some additional tips and tricks to enhance your theming
    experience.
  prefs: []
  type: TYPE_NORMAL
- en: How to override component styles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Overriding component styles in PrimeNG is similar to styling any other Angular
    component. The key is to understand the structure of the component you’re trying
    to style and use specific CSS selectors. Here is how we do it:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Inspect the component**: Before you can override a style, you need to know
    what you’re targeting. Use your browser’s developer tools to inspect the component
    and understand its structure. Here is an example of inspecting the browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.10 – Browser inspection example](img/B18805_09_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.10 – Browser inspection example
  prefs: []
  type: TYPE_NORMAL
- en: In the screenshot provided, you can observe the detailed HTML element structure
    of the **Panels** menu located on the left side.
  prefs: []
  type: TYPE_NORMAL
- en: '`p-menuitem-link-active` class, allowing you to selectively apply CSS styling
    to it.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`styles.scss` in order to apply styles to your component. For example, in order
    to apply underline to the active router link, you can add the following CSS to
    `style.scss`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`::ng-deep` pseudo-class ensures that styles penetrate into child components.
    This is especially useful when trying to style the inner parts of a PrimeNG component.
    Here’s an example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this example, we can override the style of the PrimeNG button in our component,
    which makes it easier to locate and maintain. The changes only apply a different
    color and background color to our button, differentiating it from other buttons
    in your app.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The Angular team decided to deprecate `::ng-deep` in future versions of Angular,
    so please use it sparingly. You can find more information about this at [https://angular.io/guide/component-styles#deprecated-deep--and-ng-deep](https://angular.io/guide/component-styles#deprecated-deep--and-ng-deep).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Avoid using `!important`. While it might be tempting to use `!important` to
    force a style, it’s a practice we should avoid. It makes future changes harder
    and can lead to unpredictable results.
  prefs: []
  type: TYPE_NORMAL
- en: Using PrimeNG common utils
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PrimeNG **Utils** are a set of utility classes provided by PrimeNG to help
    you with common styling tasks. These utility classes offer a quick way to apply
    specific styles or behaviors to elements without having to write custom CSS. Here’s
    a brief overview of some of the PrimeNG utils:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.11 – Common PrimeNG util classes](img/B18805_09_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.11 – Common PrimeNG util classes
  prefs: []
  type: TYPE_NORMAL
- en: Working with PrimeNG CSS variables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In modern web development, CSS variables (also known as CSS custom properties)
    have become a powerful tool for creating more flexible and maintainable style
    sheets. PrimeNG harnesses this power by providing a comprehensive set of CSS variables
    that define colors, making it easier for you to customize the application’s theme.
  prefs: []
  type: TYPE_NORMAL
- en: PrimeNG’s color system is built around a set of predefined CSS variables. These
    variables represent a wide range of colors, from primary and secondary colors
    to various shades and tints. By leveraging these variables, you can ensure consistent
    color usage across your application and easily tweak the appearance as needed.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, PrimeNG defines primary colors such as `--primary-color` and primary
    color text such as `--primary-color-text`. These are just the tip of the iceberg,
    as there are variables for text color, surface, and highlight, among others.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: For a full list of color variables, please visit [https://primeng.org/colors](https://primeng.org/colors).
  prefs: []
  type: TYPE_NORMAL
- en: Using these color variables is straightforward. Instead of hardcoding color
    values in your styles, you reference the PrimeNG color variables. This not only
    ensures consistency but also makes future color changes a breeze.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s a simple example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: In the code, the button’s background color is set to PrimeNG’s `--primary-color`,
    and the border radius is set to `--border-radius`. If you ever decide to change
    the primary color or border radius in the future, the button’s appearance will
    automatically update, without any need to modify the `.``my-custom-button` styles.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing PrimeNG color variables
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One of the major advantages of CSS variables is the ability to be overridden.
    If you wish to customize the default colors provided by PrimeNG, you can easily
    do so by redefining the variables in your styles.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, here’s how to change the primary color:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: By setting this at the root level, you effectively change the primary color
    across all components and elements that use the `--``primary-color` variable.
  prefs: []
  type: TYPE_NORMAL
- en: Other tips and tricks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we will get to know some valuable tips, techniques, and best
    practices that will be helpful when working with theming:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Global styles**: If you want to apply styles globally across your application,
    you can define them in a global CSS file and include it in your application. This
    way, you can customize common elements such as typography, colors, and layout.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Stay up to date**: PrimeNG is actively developed. New versions might introduce
    changes. Always check the documentation and update your styles accordingly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Use a base theme**: When starting a new project, consider using one of the
    pre-built themes as a base. It gives you a solid foundation, and you can then
    override specific parts as needed. You can check the list of built-in themes at
    [https://primeng.org/theming#builtinthemes](https://primeng.org/theming#builtinthemes).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`theme-base`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'From the code, you can see that the button utilizes the `$buttonHoverBorderColor`
    variable on the border color when the button is hovered over. This variable is
    declared in `variables/_button.scss` under `mytheme`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When updating the value of `$buttonHoverBorderColor` under `_button.scss`, it
    will reflect in all components that utilize this `$buttonHoverBorderColor` variable,
    such as the button hover state.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'The provided button component variable examples are just a small subset. For
    more information and comprehensive code associated with the buttons, you can check
    out the following links: [https://github.com/primefaces/primeng-sass-theme/blob/main/theme-base/components/button/_button.scss](https://github.com/primefaces/primeng-sass-theme/blob/main/theme-base/components/button/_button.scss)
    and [https://github.com/primefaces/primeng-sass-theme/blob/main/themes/mytheme/variables/_button.scss](https://github.com/primefaces/primeng-sass-theme/blob/main/themes/mytheme/variables/_button.scss).'
  prefs: []
  type: TYPE_NORMAL
- en: '**Test across browsers**: Always test your styles across different browsers
    to ensure consistency. Some components might have browser-specific styles.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In short, the most important thing is to stay updated with the changes from
    the PrimeNG and Angular teams. It will be beneficial if we can utilize the latest
    practices to improve our applications. Now, let’s summarize the key points we
    covered throughout this chapter and reflect on the essential takeaways.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout this chapter, we delved deep into the world of PrimeNG theming, embarking
    on a journey that took us from understanding the basics of PrimeNG theming to
    mastering the art of customizing components to fit our unique needs.
  prefs: []
  type: TYPE_NORMAL
- en: We began by introducing the concept of PrimeNG theming, emphasizing its significance
    in creating cohesive and visually appealing Angular applications. By leveraging
    PrimeNG’s theming capabilities, we can ensure a consistent look and feel across
    our applications, enhancing the user experience.
  prefs: []
  type: TYPE_NORMAL
- en: We then explored the vast array of pre-built themes provided by PrimeNG. These
    themes, ranging from light to dark and everything in between, offer a quick and
    easy way to give our applications a professional appearance without the need for
    extensive customization. Venturing beyond the pre-built options, we learned how
    to craft our own custom themes using the visual editor. This powerful tool allows
    us to tweak every aspect of our application’s appearance, ensuring it aligns perfectly
    with our brand or desired aesthetic.
  prefs: []
  type: TYPE_NORMAL
- en: As we progressed, we discussed the importance of overriding component styles
    and the utility classes provided by PrimeNG. These tools give us the flexibility
    to fine-tune our application’s appearance, ensuring every detail is just right.
    Theming isn’t just about making an application “look pretty.” It’s about creating
    a consistent, intuitive, and engaging user experience. By understanding and effectively
    utilizing PrimeNG’s theming capabilities, we can craft applications that not only
    look stunning but also resonate with our target audience. This knowledge empowers
    us to elevate our applications, setting them apart in a crowded marketplace.
  prefs: []
  type: TYPE_NORMAL
- en: As we transition to the next chapter, we’ll shift our focus to performance optimization
    techniques. Here, we’ll uncover strategies and best practices to ensure our Angular
    applications run smoothly and efficiently. With the foundation of theming now
    solidly under our belt, we’re ready to tackle the intricacies of performance and
    scalability.
  prefs: []
  type: TYPE_NORMAL
