- en: Chapter 5. jQuery File Uploader
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 5 章 jQuery 文件上传器
- en: It's now possible to create a fully featured file upload widget with nothing
    but a few of the latest HTML5 APIs and jQuery. We can easily add support for advanced
    features such as multiple uploads, and a drag-and-drop interface, and with just
    a little help from jQuery UI we can also add engaging UI features such as detailed
    file information and progress feedback.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以仅使用一些最新的 HTML5 API 和 jQuery 创建一个功能齐全的文件上传小部件。我们可以轻松添加对高级功能的支持，例如多个上传和拖放界面，而且只需稍微借助
    jQuery UI，我们还可以添加引人入胜的 UI 功能，例如详细的文件信息和进度反馈。
- en: Mission Briefing
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 任务简报
- en: In this project we'll build an advanced multifile upload widget using the HTML5
    file API to provide the core behavior, and using jQuery and jQuery UI to build
    an attractive and engaging interface that visitors will find a pleasure to use.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本项目中，我们将使用 HTML5 文件 API 提供核心行为构建一个高级多文件上传小部件，并使用 jQuery 和 jQuery UI 构建一个引人入胜的界面，访问者将乐于使用。
- en: We'll build the widget as a jQuery plugin because it's the kind of thing that
    we'd probably like to be encapsulated so that we can drop it into numerous pages
    and have it work with just a little configuration, instead of having to build
    a custom solution every time we require this functionality.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将构建小部件作为 jQuery 插件，因为这是我们可能想要封装的东西，这样我们就可以将其放入许多页面中，并且只需进行一些配置即可使其工作，而不是每次都需要构建自定义解决方案。
- en: Why Is It Awesome?
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么很棒？
- en: jQuery provides some great features that make writing reusable plugins a breeze.
    Over the course of this project we'll see just how easy it is to package up specific
    functionality and a mechanism for generating all of the necessary mark-up and
    adding all of the required types of behaviors.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 提供了一些出色的功能，使编写可重复使用的插件变得轻而易举。在本项目中，我们将看到打包特定功能和生成所有必要标记以及添加所有所需类型行为的机制是多么容易。
- en: Handling file uploads on the client side gives us a lot of opportunity for adding
    experience enhancing features, including information about each file selected
    for upload, and a rich progress indicator that keeps the visitor informed about
    how long the upload is likely to take.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在客户端处理文件上传为我们提供了许多增强体验功能的机会，包括有关每个选择的上传文件的信息，以及一个丰富的进度指示器，使访问者了解上传可能需要多长时间。
- en: We can also allow the visitor to cancel the upload while it is in progress,
    or remove previously selected files before the upload begins. These kinds of features
    just aren't available using purely server-side techniques for handling file uploads.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以允许访问者在上传过程中取消上传，或在上传开始之前删除先前选择的文件。这些功能纯粹使用服务器端技术处理文件上传是不可用的。
- en: 'At the end of this project we''ll have produced the following widget:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在此项目结束时，我们将制作以下小部件：
- en: '![Why Is It Awesome?](img/9106OS_05_01.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![为什么很棒？](img/9106OS_05_01.jpg)'
- en: Your Hotshot Objectives
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你的热门目标
- en: 'To arrive at the completed project, we''ll need to complete the following tasks:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成项目，我们需要完成以下任务：
- en: Creating the page and plugin wrapper
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建页面和插件包装器
- en: Generating the underlying markup
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成基础标记
- en: Adding event handlers for receiving files to upload
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加接收要上传文件的事件处理程序
- en: Displaying the list of selected files
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示所选文件列表
- en: Removing files from the upload list
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从上传列表中删除文件
- en: Adding a jQuery UI progress indicator
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加 jQuery UI 进度指示器
- en: Uploading the selected files
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上传所选文件
- en: Reporting success and tidying up
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 报告成功并整理工作
- en: Mission Checklist
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 任务清单
- en: Like in some of our previous projects, as well as using jQuery, we'll also be
    using jQuery UI in this project. The copy of jQuery UI we downloaded at the start
    of the book should already contain all of the widgets we require.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们以前的一些项目一样，除了使用 jQuery，我们还将在本项目中使用 jQuery UI。我们在书的开头下载的 jQuery UI 副本应该已经包含我们需要的所有小部件。
- en: Like in the previous project, we'll also need to use a web server for this project,
    which means running the page using a proper `http://` URL and not a `file:///`
    URL. See the previous project for information on compatible web servers.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 像以前的项目一样，我们还需要在此项目中使用 Web 服务器，这意味着使用正确的 `http://` URL 运行页面，而不是 `file:///` URL。有关兼容的
    Web 服务器信息，请参阅以前的项目。
- en: Creating the page and plugin wrapper
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建页面和插件包装器
- en: In this task we'll create the page that links to the required resources, as
    well as add the wrapper that our plugin will live within.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在此任务中，我们将创建链接到所需资源的页面，并添加我们的插件将驻留在其中的包装器。
- en: Prepare for Lift Off
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为起飞做准备
- en: At this point we should create the different files we'll need for this project.
    First, save a new copy of our template file in the main project folder and call
    it `uploader.html`. We'll also need a new style sheet, which should be saved in
    the `css` folder as `uploader.css`, and a new JavaScript file, which should be
    saved in the `js` folder as `uploader.js`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们应该创建这个项目所需的不同文件。首先，在主项目文件夹中保存一个模板文件的新副本，并将其命名为 `uploader.html`。我们还需要一个新的样式表，应该保存在
    `css` 文件夹中，命名为 `uploader.css`，以及一个新的 JavaScript 文件，应该保存在 `js` 文件夹中，命名为 `uploader.js`。
- en: 'The new page should link to the jQuery UI style sheet so that we get the styling
    required by the Progressbar widget, and also the style sheet for this project
    in the `<head>` of the page, directly after the existing link to `common.css`:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 新页面应链接到 jQuery UI 样式表，以便获取进度条小部件所需的样式，并且在页面的 `<head>` 中，直接在现有的对 `common.css`
    的链接之后，添加该项目的样式表：
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We''ll also need to link to jQuery UI and the JavaScript file for this example.
    We should add both of these script files directly after the existing `<script>`
    element for jQuery:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要链接到 jQuery UI 和此示例的 JavaScript 文件。我们应该在现有的用于 jQuery 的 `<script>` 元素之后直接添加这两个脚本文件：
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Engage Thrusters
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动推进器
- en: 'All our plugin will require is a container that the widget can render the required
    markup into. In the `<body>` of the page, before the `<script>` elements linking
    to the different JavaScript resources, add the following code:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的插件只需要一个容器，小部件就可以将所需的标记渲染到其中。在页面的 `<body>` 中，在链接到不同 JavaScript 资源的 `<script>`
    元素之前，添加以下代码：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'As well as linking to the script file that contains the code for our plugin,
    we''ll also need to call the plugin in order to initialize it. Directly after
    the existing `<script>` elements, add the following code:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 除了链接到包含我们的插件代码的脚本文件之外，我们还需要调用插件以初始化它。在现有的 `<script>` 元素之后，直接添加以下代码：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The plugin''s wrapper is a simple construct that we''ll use to initialize the
    widget. In `uploader.js`, add the following code:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 插件的包装器是一个简单的结构，我们将用它来初始化小部件。在 `uploader.js` 中，添加以下代码：
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Objective Complete - Mini Debriefing
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 目标完成 - 迷你简报
- en: When building jQuery plugins, the best thing we can do is make our plugins easy
    to use. Depending on what the plugin is for, it is best to have as few prerequisites
    as possible so if a complex markup structure is required by the plugin, it is
    usually best to have the plugin render the markup it needs, rather than making
    the users of the plugin try to add all of the required elements.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 构建 jQuery 插件时，我们能做的最好的事情就是使我们的插件易于使用。根据插件的用途，最好尽可能少地有先决条件，因此，如果插件需要复杂的标记结构，通常最好让插件渲染它需要的标记，而不是让插件的用户尝试添加所有必需的元素。
- en: In light of this, we'll write our plugin so that all it requires on the page
    is a simple container that the plugin can render the markup into. We added this
    container to the page and gave it an `id` attribute for easy selecting.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于此，我们将编写我们的插件，使得页面上只需要一个简单的容器，插件就可以将标记渲染到其中。我们在页面上添加了这个容器，并为其添加了一个 `id` 属性以便于选择。
- en: Developers using our plugin will need a way to invoke it. jQuery plugins extend
    the `jQuery` object with additional methods and our plugin will add a new method
    to jQuery called `up()`, which is called like any other jQuery method name – on
    a set of elements that have been selected by jQuery.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 使用我们的插件的开发人员将需要一种调用它的方法。jQuery 插件通过向 `jQuery` 对象添加附加方法来扩展 `jQuery` 对象，我们的插件将向
    jQuery 添加一个名为 `up()` 的新方法，该方法像任何其他 jQuery 方法名称一样被调用 - 在被 jQuery 选择的一组元素上。
- en: The extra `<script>` element we add to the bottom of the `<body>` element calls
    our plugin method in order to invoke the plugin, which is how someone using our
    plugin would invoke it.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 `<body>` 元素底部添加的额外 `<script>` 元素调用了我们的插件方法，以调用插件，这就是使用我们的插件的人会调用它的方式。
- en: In our script file, we start out with a semicolon and an immediately-invoked
    anonymous function. The semi-colon supports the modular nature of jQuery plugins
    and protects our plugin from other plugins that don't stop execution correctly.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的脚本文件中，我们以一个分号和一个立即调用的匿名函数开始。分号支持 jQuery 插件的模块化特性，并保护我们的插件免受其他不正确停止执行的插件的影响。
- en: If another plugin in use on the page didn't end its final statement or expression
    with a semi-colon, and we didn't start our plugin with a semi-colon, it could
    produce script errors that prevented our plugin working.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果页面上另一个插件的最后一条语句或表达式没有以分号结束，而我们的插件又没有以分号开始，就可能导致脚本错误，从而阻止我们的插件正常工作。
- en: We use an anonymous function as a wrapper for our plugin and invoke it immediately
    with an extra set of parentheses after the function body. We can also ensure that
    our plugin works with jQuery's `noConflict()` method by locally scoping the `$`
    character within our plugin and passing the `jQuery` object into the anonymous
    function as an argument.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用一个匿名函数作为我们插件的包装器，并立即在函数体之后用一组额外的括号调用它。我们还可以通过在我们的插件中局部范围限定`$`字符并将`jQuery`对象传递给匿名函数作为参数，确保我们的插件与jQuery的`noConflict()`方法一起工作。
- en: Within the anonymous function we first define an object literal called `defaults`
    that will be used as a configuration object for our plugin. This object contains
    another object called `strings`, which is where we store all of the different
    bits of text that are displayed in various elements.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在匿名函数内部，我们首先定义一个称为`defaults`的对象字面量，该对象将用作我们插件的配置对象。该对象包含另一个称为`strings`的对象，其中我们存储了在各种元素中显示的所有不同文本部分。
- en: The reason for using a configuration object for text strings is to make our
    plugin easy to localize, making it easier for non-English speaking developers
    to use. Making plugins as flexible as possible is a good way of making the plugin
    more appealing.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使我们的插件易于本地化，我们使用配置对象来处理文本字符串，这样非英语母语的开发者就可以更容易地使用。尽可能使插件灵活是增加插件吸引力的一个好方法。
- en: After the `defaults` object we define a constructor function that will generate
    instances of our widget. The plugin is called Up and we capitalize the first letter
    of its name because this is the general convention for functions that should be
    invoked using the `new` keyword.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在`defaults`对象之后，我们定义了一个构造函数，该函数将生成我们的小部件的实例。插件称为Up，我们将其名称的第一个字母大写，因为这是应该使用`new`关键字调用的函数的一般约定。
- en: The constructor function can accept two arguments; the first is a jQuery element
    or collection of elements and the second a configuration object defined by the
    developer using our plugin.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 构造函数可以接受两个参数；第一个是一个jQuery元素或元素集合，第二个是由使用我们的插件的开发者定义的配置对象。
- en: Within the constructor function we first attach some members to the instance.
    The first is called `config` and will contain the object returned by jQuery's
    `extend()` method, which is used to merge two objects together, and unlike most
    jQuery methods, it's called on the `jQuery` object itself rather that a collection
    of HTML elements.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在构造函数内部，我们首先向实例附加一些成员。第一个成员叫做`config`，它将包含由jQuery的`extend()`方法返回的对象，该方法用于合并两个对象，与大多数jQuery方法不同，它是在`jQuery`对象本身上而不是HTML元素集合上调用的。
- en: It takes four arguments; the first argument instructs the `extend()` method
    to deep-copy the object being merged into the jQuery object, which we need to
    do because the `defaults` object contains other objects.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 它接受四个参数；第一个参数指示`extend()`方法深复制要合并到jQuery对象中的对象，这是我们需要做的，因为`defaults`对象包含其他对象。
- en: The second argument is an empty object; any other objects will be merged together
    and their own properties added to this object. This is the object that the method
    will return. If we didn't pass in an empty object, the first object passed into
    the method would be returned instead.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个参数是一个空对象；任何其他对象都将被合并在一起，并将它们自己的属性添加到此对象中。这是方法将返回的对象。如果我们没有传递一个空对象，那么方法中传递的第一个对象将被返回。
- en: The next two arguments are the objects we are going to merge. These are the
    `defaults` object that we defined a moment ago, and the `opts` object that may
    be passed to the constructor when it is invoked.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的两个参数是我们要合并的对象。这些是我们刚刚定义的`defaults`对象和在调用构造函数时可能传递的`opts`对象。
- en: This means that if a developer wishes to pass in a configuration object, they
    can overwrite the values that we've defined in the `defaults` object. The properties
    not overwritten with this configuration object will be set to the default values
    instead.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着如果开发者希望传递一个配置对象，他们可以覆盖我们在`defaults`对象中定义的值。未使用此配置对象覆盖的属性将被设置为默认值。
- en: We also store a reference to the element, or collection of elements, as a member
    of the instance as well so that we can easily operate on the elements in other
    parts of our code.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将对元素或元素集合的引用作为实例的成员存储，以便我们可以在代码的其他部分轻松操作这些元素。
- en: Lastly we add a couple of empty arrays that will be used to store the list of
    files to upload and the XHR requests in progress. We'll see how these properties
    are used later in the project, so don't worry too much about them now.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们添加了一对空数组，用于存储要上传的文件列表和进行中的XHR请求。我们将在项目的后期看到这些属性如何使用，所以现在不用太担心它们。
- en: jQuery provides the `fn` object as a shortcut to its prototype, which is how
    we extend jQuery with our plugin method. In this case the method is called `up()`
    and is the method we invoked using the `<script>` element at the bottom of `uploader.html`.
    We specify that the method may accept a single argument, which is an object containing
    the configuration options that someone using our plugin may wish to provide.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery提供了`fn`对象作为其原型的快捷方式，这是我们如何用我们的插件方法扩展jQuery的。在这种情况下，该方法被称为`up()`，并且是我们在`uploader.html`底部使用`<script>`元素调用的方法。我们指定该方法可能接受一个参数，该参数是包含插件使用者可能想要提供的配置选项的对象。
- en: Within the method, we first create a new instance of the uploader using the
    `new` keyword in conjunction with our constructor function. We pass the constructor
    function the element (or collection of elements) that the method is called on,
    and the `options` object.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在方法内部，我们首先使用`new`关键字与我们的构造函数结合创建了一个上传器的新实例。我们将构造函数传递给方法所调用的元素（或元素集合）和`options`对象。
- en: Lastly we returned `this` from the method. Inside a method added to jQuery's
    prototype, the `this` object refers to the jQuery collection. It's very important
    to return the collection of elements that the method was called on in order to
    preserve chaining.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 最后我们从方法中返回了`this`。 在添加到jQuery原型的方法中，`this`对象指的是jQuery集合。非常重要的是，为了保持链接，返回调用方法的元素集合。
- en: Classified Intel
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 机密情报
- en: Chaining is an inherent feature of jQuery that developers using it have come
    to expect. It is important that developers' expectations are met with regard to
    the style of programming they use. People using our plugin will expect to be able
    to add additional jQuery methods after calling our plugin's method.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 链接是jQuery的一个固有特性，使用它的开发人员来期望。重要的是满足开发人员对他们使用的编程样式的期望。使用我们的插件的人们希望在调用我们的插件方法后能够添加额外的jQuery方法。
- en: 'Now that we are returning the collection of elements by returning the `this`
    object, developers can do things like this:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们通过返回`this`对象返回元素集合，开发人员可以做这样的事情：
- en: '[PRE5]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: So that's a simple example of what's possible, but it should illustrate why
    it is important to always return `this` from a plugin.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这是一个简单的示例，但它应该说明为什么从插件中始终返回`this`是重要的。
- en: Generating the underlying markup
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成底层标记
- en: In this task, we'll add an initialization method to our plugin which will generate
    the required markup that the widget requires.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个任务中，我们将向我们的插件添加一个初始化方法，该方法将生成小部件所需的标记。
- en: Engage Thrusters
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动推进器
- en: 'First of all we should add the following code directly after the `Up()` constructor
    function in `uploader.js`:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们应该直接在`uploader.js`中`Up()`构造函数之后添加以下代码：
- en: '[PRE6]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We also need to call this new `init()` method. Change the method added to jQuery''s
    `fn` object so that it appears as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要调用这个新的`init()`方法。修改添加到jQuery的`fn`对象的方法，使其如下所示：
- en: '[PRE7]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We can also add the CSS for the markup generated by the plugin. In `uploader.css`,
    add the following styling:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以在插件生成的标记中添加CSS。在`uploader.css`中，添加以下样式：
- en: '[PRE8]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Objective Complete - Mini Debriefing
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 完成目标 - 迷你总结
- en: We can add an `init()` method that takes care of creating and injecting the
    markup that the widget is built from by adding it to our constructor's `prototype`.
    All objects created by the constructor will inherit the method.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过将其添加到构造函数的`prototype`中来添加一个`init()`方法，该方法负责创建和注入小部件所构建的标记。构造函数创建的所有对象都将继承该方法。
- en: We first store the `this` object, which inside our `init()` method still refers
    to the jQuery collection of elements, so that we can easily refer to it inside
    event handlers, which we'll add in the next task.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先存储了`this`对象，该对象在我们的`init()`方法中仍然指的是元素的jQuery集合，以便我们可以在下一个任务中轻松地在事件处理程序中引用它。
- en: We also locally scope the `strings` property to make resolution slightly faster,
    as we refer to this property frequently in order to add the visible text strings
    to the widget's visible UI.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将`strings`属性本地化作用域，以使解析稍微更快，因为我们经常引用此属性以将可见的文本字符串添加到小部件的可见UI中。
- en: Next we create the new HTML elements and store each of them in variables. This
    means that we can create the container and append all of the required elements
    to it while it's still in memory, and then inject the entire widget into the page's
    DOM in one go, instead of repeatedly modifying the DOM and adding the elements
    one by one.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们创建新的 HTML 元素并将它们存储在变量中。这意味着我们可以创建容器并将所有所需元素附加到其中，而它仍然在内存中，并且然后将整个小部件一次性注入到页面的
    DOM 中，而不是重复地修改 DOM 并逐个添加元素。
- en: The outer container for the widget is an `<article>` element which has a class
    name for easy styling. The HTML5 specification describes an `<article>` as a self-contained
    interactive widget, so I feel this is the perfect container for our widget. Although
    equally as relevant, the `<article>` is not restricted to what we would traditionally
    describe as an "article" – for example, a blog/news post or an editorial style
    piece.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 小部件的外部容器是一个 `<article>` 元素，它具有一个易于样式化的类名。HTML5 规范描述了 `<article>` 作为一个独立的交互式小部件，所以我觉得这是我们小部件的完美容器。虽然同样相关，但
    `<article>` 并不局限于我们传统上描述的“文章” - 例如，博客/新闻文章或编辑样式的文章。
- en: We have a `<header>` element to contain the main heading for the widget, within
    which we use a standard `<h1>`. We also use two `<h2>` elements inside the widget
    to show the different sections (the drag-and-drop area, and the more traditional
    file `<input>`).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个 `<header>` 元素来包含小部件的主标题，在其中我们使用一个标准的 `<h1>`。我们还在小部件内部使用两个 `<h2>` 元素来显示不同的部分（拖放区域和更传统的文件
    `<input>`）。
- en: The `<input>` element has a `type` attribute of `file` and is also given the
    `multiple` attribute, using jQuery's `prop()` method, so that multiple files can
    be uploaded in supporting browsers. Current versions of IE (9 and below) do not
    support this attribute.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`<input>` 元素具有 `type` 属性为 `file`，并且还给定了 `multiple` 属性，使用 jQuery 的 `prop()`
    方法，以便在支持的浏览器中上传多个文件。目前的 IE 版本（9 及以下）不支持此属性。'
- en: We also add an `<a>` element directly after the `<input>`, which we'll use to
    open the Open dialog used to select the files to upload. The problem with the
    standard `file` type `<input>`, is that there is no standard!
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还在 `<input>` 之后直接添加了一个 `<a>` 元素，我们将用它来打开用于选择要上传的文件的打开对话框。标准的 `file` 类型 `<input>`
    的问题在于没有标准！
- en: Almost every browser implements the `file` type `<input>` differently, with
    some browsers showing an `<input>` as well as a `<button>` and some browsers just
    showing a `<button>` and some text. It's also impossible to style the `<input>`
    or `<button>` generated by the control as these are part of the **shadow DOM**.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎每个浏览器都以不同的方式实现 `file` 类型的 `<input>`，一些浏览器显示一个 `<input>` 以及一个 `<button>`，而一些浏览器只显示一个
    `<button>` 和一些文本。还不可能对由控件生成的 `<input>` 或 `<button>` 进行样式设置，因为它们是 **shadow DOM**
    的一部分。
- en: Note
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For more information on what the shadow DOM is, see [http://glazkov.com/2011/01/14/what-the-heck-is-shadow-dom/](http://glazkov.com/2011/01/14/what-the-heck-is-shadow-dom/).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 有关影子 DOM 的更多信息，请参见 [http://glazkov.com/2011/01/14/what-the-heck-is-shadow-dom/](http://glazkov.com/2011/01/14/what-the-heck-is-shadow-dom/)。
- en: To get around these cross-browser differences, we'll hide the `<input>` with
    CSS and use the `<a>` element, styled to appear like an attractive button, to
    open the dialog.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这些跨浏览器的差异，我们将用 CSS 隐藏 `<input>`，并使用 `<a>` 元素，样式化为一个吸引人的按钮，来打开对话框。
- en: We also add an empty `<div>` element that we'll use to list the selected files
    and display some information about each one, followed by another `<a>` element
    that will be styled like a button. This button will be used to initiate the upload.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还添加了一个空的 `<div>` 元素，我们将用它来列出所选文件并显示每个文件的一些信息，然后是另一个 `<a>` 元素，它将被样式化为按钮。这个按钮将用于启动上传。
- en: We used the standard jQuery 1.4+ syntax for creating new HTML elements and supplied
    a configuration object for most of the elements we created. Most elements are
    given a class name and some also get text or HTML content. The class names we
    use are all scoped with a sensible prefix so as to avoid potential conflicts with
    existing styles already used on the page.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了标准的 jQuery 1.4+ 语法来创建新的 HTML 元素，并为大多数我们创建的元素提供了配置对象。大多数元素都给定了一个类名，有些还会获得文本或
    HTML 内容。我们使用的类名都受到合理前缀的限制，以避免与页面上已使用的现有样式潜在冲突。
- en: The CSS we added is mostly just for presentation. The important aspects are
    that we hide the standard file `<input>`, and give the drop target a fixed size
    so that files can easily be dropped on it.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加的 CSS 主要是用于呈现。重要的方面是我们隐藏了标准的文件 `<input>`，并且给了拖放目标一个固定大小，以便文件可以轻松地放置在上面。
- en: At this point we should be able to run the page in a browser (via a web server)
    and see the basic elements and layout of the plugin. The page should appear as
    in the first screenshot of this project.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们应该能够在浏览器中运行页面（通过 web 服务器），并查看插件的基本元素和布局。页面应该与该项目的第一个截图中的样子一样。
- en: Adding event handlers for receiving files to upload
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加接收要上传文件的事件处理程序
- en: We can use the `init()` method that we added in the last task to attach the
    event handlers that our widget will need to handle files being selected for upload.
    This may happen either when files are dropped onto the drop target, or when they
    are selected using the button.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用我们在上一个任务中添加的 `init()` 方法来附加小部件将需要处理的文件被选择上传的事件处理程序。这可能发生在文件被拖放到拖放目标上，或者使用按钮选择它们时。
- en: Engage Thrusters
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动推进器
- en: 'Directly after appending the new HTML elements to the container at the end
    of the `init()` method in `uploader.js` (but still within the `init()` method),
    add the following code:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在`uploader.js`中的`init()`方法中向容器附加新的 HTML 元素之后（但仍在`init()`方法内部），添加以下代码：
- en: '[PRE9]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Objective Complete - Mini Debriefing
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 目标完成 - 迷你总结
- en: We first use jQuery's `on()` method, in event-delegation mode, to attach an
    event handler to the outer container of the widget. We specify the `click` event
    as the first argument, and a selector that matches our button with the class name
    `up-choose` as the second argument.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先使用 jQuery 的 `on()` 方法，在事件委托模式下，将事件处理程序附加到小部件的外部容器上。我们将 `click` 事件指定为第一个参数，并将匹配我们带有类名
    `up-choose` 的按钮的选择器指定为第二个参数。
- en: Within the handler function passed to `on()` as the third argument, we first
    prevent the default behavior of the browser using JavaScript's `preventDefault()`,
    and then trigger a `click` event for the hidden `<input>` element used to select
    the files to upload. This will cause the File dialog to open in the browser and
    allow files to be selected.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在传递给 `on()` 的处理程序函数内部，我们首先使用 JavaScript 的 `preventDefault()` 阻止浏览器的默认行为，然后触发一个用于选择要上传的文件的隐藏`<input>`元素的`click`事件。这将导致文件对话框在浏览器中打开，允许选择文件。
- en: We then attached another event handler. This time we are looking for either
    the `drop`, `dragover`, or `change` events. The `drop` event will be triggered
    when files are dropped onto the drop zone, the `dragover` event will be triggered
    while files are held over the drop zone, and the `change` event will be triggered
    if files are removed.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们附加了另一个事件处理程序。这次我们正在寻找`drop`、`dragover`或`change`事件。当文件被拖放到拖放区域时，将触发`drop`事件；当文件被悬停在拖放区域上时，将触发`dragover`事件；如果文件被移除，将触发`change`事件。
- en: All of these events will bubble up from either the drop zone (the `<article>`
    with the class name `up`) or the hidden `<input>` and will pass through the outer
    container of the widget, to which the event handler is bound.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些事件将从拖放区域（带有类名`up`的`<article>`）或隐藏的`<input>`中冒泡，并通过绑定事件处理程序的小部件的外部容器传递。
- en: Within this handler function we first check whether it's the `dragover` event;
    if it is, we again prevent the default behavior of the browser using `preventDefault()`
    and `stopPropagation()`. We also need to `return false` from this branch of the
    conditional.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个处理程序函数内部，我们首先检查它是否是`dragover`事件；如果是，我们再次使用`preventDefault()`和`stopPropagation()`阻止浏览器的默认行为。我们还需要从条件的这个分支返回`false`。
- en: The next branch of the `if` checks whether the event that triggered the handler
    was the `drop` event. If it was we still need to use `preventDefault()` and `stopPropagation()`,
    but this time we can also get the list of selected files using the event object
    that jQuery creates and passes to the handler function, and store them in a property
    on the widget instance.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`if`的下一个分支检查触发处理程序的事件是否是`drop`事件。如果是，我们仍然需要使用`preventDefault()`和`stopPropagation()`，但这次我们还可以使用
    jQuery 创建和传递给处理程序函数的事件对象获取所选文件的列表，并将它们存储在小部件实例的属性中。'
- en: If neither of these conditions is `true`, we get the list of files from the
    `<input>` element instead.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这两个条件都不为`true`，我们就从`<input>`元素中获取文件列表。
- en: The property we need is part of the `originalEvent` object that jQuery packages
    into its own event object. We can then get the `files` property from the `dataTransfer`
    object. If the event was the `change` event instead, we can just get the `files`
    property of the hidden `<input>`.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要的属性是 jQuery 封装到自己的事件对象中的`originalEvent`对象的一部分。然后，我们可以从`dataTransfer`对象中获取`files`属性。如果事件是`change`事件，我们只需获取隐藏的`<input>`的`files`属性。
- en: Whichever method is used, the collection of files selected for upload is stored
    on the instance of the widget under the `files` property. This is just a temporary
    property, which will get overwritten each time new files are selected, unlike
    the widget's `filelist` array, which will store all the files for an upload.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 无论使用哪种方法，用于上传的文件集合都存储在小部件实例的 `files` 属性下。这只是一个临时属性，每次选择新文件时都会被覆盖，不像小部件的 `filelist`
    数组，它将存储所有文件以进行上传。
- en: Lastly we call the `handleFiles()` method. We'll add this method to the widget's
    `prototype` in the next task so once this has been done, we'll be able to call
    the method here without running into problems.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 最后我们调用 `handleFiles()` 方法。在下一个任务中，我们将把这个方法添加到小部件的 `prototype` 中，所以一旦完成了这个任务，我们就能在这里调用这个方法而不会遇到问题。
- en: Combining the two events and detecting which event occurred in this way is much
    better than attaching to separate event handlers. It means that we don't need
    two separate handler functions that both do essentially the same thing, and regardless
    of whether files are selected with the button and standard dialog, or by dropping
    files onto the drop target, we can still get the list of files.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 将两个事件组合起来，并以这种方式检测发生的事件要比附加到单独的事件处理程序要好得多。这意味着我们不需要两个分开的处理程序函数，它们都本质上做同样的事情，并且无论是用按钮和标准对话框选择文件，还是通过将文件拖放到拖放目标中选择文件，我们仍然可以获取文件列表。
- en: As this point we should be able to either drop files onto the drop zone, or
    click the button and select files using the dialog. However, a script error will
    be thrown because we haven't yet added the `handleFiles()` method of our plugin.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们应该能够将文件拖放到拖放区域，或者点击按钮并使用对话框选择文件。然而，会抛出一个脚本错误，因为我们还没有添加我们插件的 `handleFiles()`
    方法。
- en: Displaying the list of selected files
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示已选文件列表
- en: In this task we can populate the `<div>` we created in order to display the
    list of files that have been selected for upload. We'll build a table where each
    row in the table lists a single file with information such as the filename and
    type.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个任务中，我们可以填充我们创建的 `<div>`，以显示已选择用于上传的文件列表。我们将构建一个表格，在表格中，每一行列出一个文件，包括文件名和类型等信息。
- en: Engage Thrusters
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动推进器
- en: 'Directly after the `init()` method in `uploader.js`, add the following code:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `uploader.js` 中的 `init()` 方法之后，添加以下代码：
- en: '[PRE10]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We can also add some additional CSS for the new markup we''ve created. Add
    the following code to the bottom of `upload.css`:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以为我们创建的新标记添加一些额外的 CSS。将以下代码添加到 `upload.css` 的底部：
- en: '[PRE11]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Objective Complete - Mini Debriefing
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 目标完成 - 迷你总结
- en: We started out by adding the `handleFiles()` method to the widget's `prototype`,
    making the method call `widget.handleFiles()` that we added at the end of the
    last task work. It was added in exactly the same way as the `init()` method earlier,
    and just like inside `init()`, the `this` object points to the instance of the
    widget inside `handleFiles()`. This makes the element on the page, the configuration
    options, and the selected file list easy to access.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们开始时将 `handleFiles()` 方法添加到小部件的 `prototype` 中，使得我们在上一个任务的最后添加的方法调用 `widget.handleFiles()`
    起作用。它的添加方式与之前的 `init()` 方法完全相同，并且就像在 `init()` 内部一样，`this` 对象指向了小部件实例内部。这使得在页面上的元素、配置选项和选定文件列表都易于访问。
- en: Inside the method, we first created a series of variables. Like in the `init()`
    method we create a local variable called widget that stores the `this` object.
    We won't be adding any event handlers to this method so we don't absolutely have
    to do this, but we do access the object several times so it makes sense to cache
    it in a variable.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在方法内部，我们首先创建了一系列变量。就像在 `init()` 方法中一样，我们创建了一个名为 widget 的局部变量，用于存储 `this` 对象。虽然我们不会向这个方法添加任何事件处理程序，所以我们并不一定非要这样做，但我们确实多次访问对象，所以把它缓存在一个变量中是有道理的。
- en: We also cache the selected files container using `widget.el` – don't forget
    that `el` already refers to the jQuery-wrapped instance of the outer widget container,
    so we can call jQuery methods, such as `find()` directly on it without rewrapping
    it.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还使用 `widget.el` 缓存了选定的文件容器 - 不要忘记 `el` 已经引用了外部小部件容器的 jQuery 封装实例，所以我们可以直接在其上调用
    jQuery 方法，如 `find()`，而无需重新封装它。
- en: Next we create a series of new DOM elements ready for them to be cloned inside
    loops. This is a much better way of creating elements, especially inside loops,
    and avoids having to continually create new jQuery objects.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们创建了一系列新的 DOM 元素，准备在循环内克隆它们。这是一种更好的创建元素的方法，特别是在循环内部，避免了不断创建新的 jQuery 对象。
- en: We also define a variable called `table`, but we don't initialize it straight
    away. Instead we use the `if` conditional to check whether the container already
    contains a `<table>` element by checking if jQuery's `find("table")` returns a
    collection that has `length`.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还定义了一个名为`table`的变量，但我们并没有立即初始化它。相反，我们使用`if`条件来检查容器是否已经包含了一个`<table>`元素，通过检查jQuery的`find("table")`是否返回一个具有`length`的集合。
- en: If `length` is equal to `false`, we know that no `<table>` elements were selected
    so we initialize the `table` variable with a new `<table>` element created with
    jQuery. We then create a header row for the `<table>` which we'll use to add headings
    for each of the columns in the new table.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`length`等于`false`，我们知道没有选择任何`<table>`元素，因此我们使用jQuery创建了一个新的`<table>`元素，并将其赋给`table`变量。然后，我们为`<table>`创建了一个标题行，用于为新表的每一列添加标题。
- en: At this point the `<table>` element only exists in memory, so we can add the
    new row to it without modifying the DOM of the page. We also cache a reference
    to the `tableHeadings` property of the `strings` object used in our configuration
    object.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，`<table>`元素只存在于内存中，因此我们可以将新行添加到其中，而不会修改页面的DOM。我们还缓存了我们配置对象中使用的`strings`对象的`tableHeadings`属性的引用。
- en: We then use jQuery's `each()` utility to create all of the `<td>` elements used
    as the table headings. As well as being able to call `each()` on a collection
    of elements selected from the page, we can also call `each()` on the jQuery object
    in order to iterate a pure JavaScript array or object.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用jQuery的`each()`实用工具来创建用作表标题的所有`<td>`元素。除了能够在从页面选中的元素集合上调用`each()`之外，我们还可以调用`each()`在jQuery对象上，以便迭代一个纯JavaScript数组或对象。
- en: The `each()` method accepts the array or object to iterate. In this case it's
    an array, so the iteration function called for each item in the array receives
    the index of the current item and the value of the current item as arguments.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '`each()`方法接受要迭代的数组或对象。在这种情况下，它是一个数组，因此对数组中的每个项目调用的迭代函数接收到当前项目的索引和当前项目的值作为参数。'
- en: Inside the iterator, we first create a new string that we can use as a class
    name. The word `class` is a **reserved word** in JavaScript, so we call our variable
    `cs` instead. To create the class name, we just convert the current string to
    lowercase using JavaScript's `toLowerCase()` function, and then remove any empty
    spaces using JavaScript's `replace()` function.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在迭代器内部，我们首先创建一个可以用作类名的新字符串。`class`这个词在JavaScript中是一个**保留字**，因此我们改用`cs`作为变量名。为了创建类名，我们只需使用JavaScript的`toLowerCase()`函数将当前字符串转换为小写，然后使用JavaScript的`replace()`函数删除任何空格。
- en: Note
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For a complete list of the reserved words in JavaScript, see the MDN documentation
    at [https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Reserved_Words](https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Reserved_Words).
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 有关JavaScript中保留字的完整列表，请参阅MDN文档[https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Reserved_Words](https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Reserved_Words)。
- en: The `replace()` function takes the regular expression to match as the first
    argument, and the replacement string as the second argument. We could use the
    string `" "` as the first argument instead, but then only the first blank space
    would be removed, whereas using a regular expression with the `g` flag allows
    us to remove all spaces.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '`replace()`函数将正则表达式作为第一个参数匹配，将替换字符串作为第二个参数。我们可以使用字符串`" "`作为第一个参数，但那样只会删除第一个空格，而使用带有`g`标志的正则表达式允许我们移除所有空格。'
- en: We then create a new `<td>` element by cloning one of the elements we created
    and stored in a variable at the start of the task. We give it a general class
    name for styling purposes, and the unique class name that we just created so that
    each column can be styled independently if required, and then append it straight
    to the header row that we created a moment ago.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们通过克隆在任务开始时创建并存储在变量中的元素之一来创建一个新的`<td>`元素。我们为了样式的目的给它一个通用的类名，以及我们刚刚创建的唯一类名，这样每一列都可以在需要时独立样式化，然后将它直接添加到我们刚刚创建的标题行中。
- en: We then check whether we're iterating the last item in the array by testing
    whether the current index is equal to the `length` of the array minus 1\. If it
    is the last item, we add a clear all link by cloning the `<a>` element we created
    and cached at the start of the task.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们通过检查当前索引是否等于数组长度减1来检查我们是否迭代了数组中的最后一项。如果是最后一项，我们通过克隆我们在任务开始时创建和缓存的`<a>`元素来添加一个清除所有链接。
- en: We set the text of the new `<td>` element to the value of the current array
    item and add the `up-remove-all` class for styling purposes so that we can filter
    events dispatched by it. We can also use jQuery's `attr()` method to set a `colspan`
    attribute of `2` to this `<td>`. The new `<a>` element is then added as the HTML
    content of the new `<td>` element.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将新`<td>`元素的文本设置为当前数组项的值，并添加`up-remove-all`类以进行样式设置，以便我们可以过滤由它分发的事件。我们还可以使用jQuery的`attr()`方法将`colspan`属性设置为`2`到这个`<td>`。然后，新的`<a>`元素被添加为新的`<td>`元素的HTML内容。
- en: If it's not the last item in the array we simply set the text content of the
    new `<td>` element to the value of the current array item.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 如果它不是数组中的最后一个项目，我们只需将新`<td>`元素的文本内容设置为当前数组项的值。
- en: This is all done in the first branch of the outer `if` statement which occurs
    when the table does not exist. If the container does already contain a `<table>`
    element, we still initialize the table variable by selecting the `<table>` from
    the page.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些都是在外部`if`语句的第一个分支中完成的，当表不存在时发生。如果容器已经包含`<table>`元素，我们仍然通过选择页面上的`<table>`来初始化表变量。
- en: Don't forget that the `handleFiles()` method we're inside will be invoked once
    files have been selected, so now we need to build a new row in the table for each
    of the files that were selected.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记，我们所在的`handleFiles()`方法将在选择文件后被调用，所以现在我们需要为每个选择的文件在表中构建一行新行。
- en: Again we use jQuery's `each()` method, this time to iterate the collection of
    stored files in the widget's `files` property. For each file that was selected
    (either by dropping onto the drop zone, or using the button) we first create a
    new `<tr>` by cloning our `row` variable.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 再次使用jQuery的`each()`方法，这次是为了迭代小部件的`files`属性中存储的文件集合。对于每个选择的文件（通过拖放到拖放区域或使用按钮），我们首先通过克隆我们的`row`变量创建一个新的`<tr>`。
- en: We then split the `name` property of the current file on the `.` character.
    We store the extension of the file by getting the last item in the array created
    by the `split()` function.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们在当前文件的`name`属性上使用`.`字符进行分割。通过获取`split()`函数创建的数组中的最后一个项目，我们存储文件的扩展名。
- en: At this point we also create a delete link, which can be used to remove an individual
    file from the list of files to upload, by cloning the `<a>` element we created
    at the start of the task. It is given the text `x` and the class name `up-remove`.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们还创建一个删除链接，可以用来从要上传的文件列表中删除单个文件，方法是克隆我们在任务开始时创建的`<a>`元素。它被赋予文本`x`和类名`up-remove`。
- en: Next we create a series of new `<td>` elements by cloning the cached `<td>`
    in the `cell` variable again. The first `<td>` is given a generic class name of
    `icon`, and the extension for the current file so that we can add an icon for
    the different file types that can be uploaded, and append it to the new row.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们通过再次克隆缓存的`cell`变量中的`<td>`来创建一系列新的`<td>`元素。第一个`<td>`被赋予一个通用的类名`icon`，以及当前文件的扩展名，这样我们就可以为可以上传的不同文件类型添加图标，并将其附加到新行上。
- en: The second `<td>` element displays the name of the file. The third `<td>` element
    shows the size of the file in kilobytes. If we knew that large files were likely
    to be uploaded, we could instead convert to megabytes, but for the purpose of
    this project, kilobytes will be sufficient.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个`<td>`元素显示文件的名称。第三个`<td>`元素显示文件的大小（以千字节为单位）。如果我们知道可能上传大文件，我们可以转换为兆字节，但对于这个项目的目的，千字节就足够了。
- en: The fourth `<td>` element has the new delete link added to it using jQuery's
    `html()` method and the last `<td>` element has an empty `<div>` element added
    to it which we'll use for the jQuery UI Progressbar widget.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 第四个`<td>`元素使用jQuery的`html()`方法添加了新的删除链接，最后一个`<td>`元素添加了一个空的`<div>`元素，我们将使用它来放置jQuery
    UI进度条小部件。
- en: Once the new cells have been created and appended to the new row, the new row
    itself is appended to the table. We can also add the current file to our `fileList`
    array ready to be uploaded.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦新单元格被创建并附加到新行上，新行本身就被附加到表中。我们还可以将当前文件添加到我们的`fileList`数组中，准备上传。
- en: Lastly we need to check once more whether the selected files container already
    has a `<table>` element inside it. It if doesn't, we append the new `<table>`
    we have just built to the container. If it does contain the `<table>` already,
    the new rows will already have been added to it.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要再次检查所选文件容器是否已经包含一个`<table>`元素。如果没有，我们将新建的`<table>`追加到容器中。如果它已经包含`<table>`，新行将已经添加到其中。
- en: The CSS we added in this part was purely presentational. One thing I've done
    is to add some classes so that an icon can be shown for different file types that
    might be selected for upload. I've only added a few as an example; the ones you
    actually require would depend on the type of files that you expected your users
    to upload. A generic icon is also created for types that do not match the selectors
    we've added.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这一部分添加的 CSS 纯粹是为了呈现。我做的一件事是添加一些类，以便显示可能选择上传的不同文件类型的图标。我只是添加了一些作为示例；您实际需要的会取决于您期望用户上传的文件类型。还为与我们添加的选择器不匹配的类型创建了通用图标。
- en: Note
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The icons used in this example are part of the Farm Fresh icon pack. I've renamed
    the files for conciseness and can be found in the code download accompanying this
    book. The icons are available at Fat Cow web hosting at ([http://www.fatcow.com/free-icons](http://www.fatcow.com/free-icons)).
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例中使用的图标属于 Farm Fresh 图标包。我已经为了简洁性而重命名了这些文件，并且可以在本书附带的代码下载中找到。这些图标可以在 Fat Cow
    网络主机上获得 ([http://www.fatcow.com/free-icons](http://www.fatcow.com/free-icons))。
- en: 'At this point we should be able to run the page in a browser, select some files
    to upload, and see the new `<table>` we have just created:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们应该能够在浏览器中运行页面，选择一些文件进行上传，并看到我们刚刚创建的新`<table>`：
- en: '![Objective Complete - Mini Debriefing](img/9106OS_05_02.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![完成目标 - 小型总结](img/9106OS_05_02.jpg)'
- en: Classified Intel
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 机密情报
- en: We manually created the elements needed to display the list of selected files
    in this example. Another way to do it would be to use a templating engine, such
    as jsRender or Dust.js, instead. This would have the benefit of being faster and
    more efficient than our manual creation, would keep our plugin code simpler and
    more concise, and the file smaller.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们手动创建了显示所选文件列表所需的元素。另一种方法是使用模板引擎，比如 jsRender 或 Dust.js。这样做的好处是比我们手动创建更快更高效，能够使我们的插件代码更简单更简洁，文件也更小。
- en: Of course, it would add another dependency to our plugin because we'd have to
    include the templating engine itself, as well as a precompiled template stored
    in a JavaScript file. We aren't creating that many elements in this example, so
    it's probably not worth adding another dependency. When many elements need to
    be created, the cost of adding a dependency is outweighed by the efficiency it
    adds.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这将给我们的插件增加另一个依赖，因为我们需要包含模板引擎本身，以及一个存储在 JavaScript 文件中的预编译模板。在这个例子中，我们并没有创建太多元素，所以可能不值得再添加另一个依赖。当需要创建许多元素时，添加依赖的成本被它增加的效率所抵消。
- en: This is the kind of thing that needs to be considered on a case-by-case basis
    when writing a jQuery plugin.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 写 jQuery 插件时，这种事情需要根据具体情况逐案考虑。
- en: Removing files from the upload list
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从上传列表中移除文件
- en: In this task we'll add the event handlers that will make the **Remove** and
    **Remove all** links in the new file list work. We can attach the event handlers
    in the same place that we added other event handlers earlier to keep things organized.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个任务中，我们将添加事件处理程序，使新文件列表中的**删除**和**全部删除**链接起作用。我们可以将事件处理程序附加到我们之前添加其他事件处理程序的地方，以保持事情的井然有序。
- en: Engage Thrusters
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动推进器
- en: 'In `upload.js`, within the widget''s `init()` method and directly after the
    existing calls to jQuery''s `on()` method, add the following new code:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在`upload.js`中，在小部件的`init()`方法中，并且直接在现有的 jQuery `on()`方法调用之后，添加以下新代码：
- en: '[PRE12]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Objective Complete - Mini Debriefing
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 完成目标 - 小型总结
- en: We use jQuery's `on()` method to add a `click` event again. We attach it to
    the outer container of the widget as we have our other events, and this time we
    filter the events based on the selector `td a` as the event will only originate
    from `<a>` elements inside `<td>` elements.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 jQuery 的`on()`方法再次添加了一个`click`事件。我们将它附加到小部件的外部容器，就像我们添加其他事件一样，这次我们根据选择器`td
    a`过滤事件，因为事件只会源自`<td>`元素内的`<a>`元素。
- en: Inside the event handler we first prevent the default behavior of the browser
    because we don't want the link to be followed. We then define a simple helper
    function that removes the `<table>` element from the widget, removes the value
    of the file `<input>`, and clears the `fileList` array.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在事件处理程序内，我们首先阻止浏览器的默认行为，因为我们不希望跟随链接。然后，我们定义了一个简单的帮助函数，从小部件中移除`<table>`元素，清除文件`<input>`的值，并清除`fileList`数组。
- en: We need to clear the `<input>` because otherwise if we selected some files and
    then removed them from the list of files, we wouldn't be able to then reselect
    the same group of files. It's a bit of a fringe case, but this simple little trick
    allows it to work so we may as well include it.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要清除`<input>`，否则如果我们选择了一些文件，然后将它们从文件列表中移除，我们将无法重新选择相同的一组文件。这是一个边缘情况，但这个简单的小技巧可以让它起作用，所以我们也可以包含它。
- en: Next we check what the `className` property of the element that triggered the
    event is. We can see this property using the target property of the `originalEvent`
    object that is included in the jQuery event object which is passed to our handler
    function. We could also use the `srcElement` property of the jQuery event object,
    but this does not work in current versions of Firefox.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们检查触发事件的元素的`className`属性是什么。我们可以使用传递给处理程序函数的jQuery事件对象中包含的`originalEvent`对象的`target`属性来查看此属性。我们还可以使用jQuery事件对象的`srcElement`属性，但这在当前版本的Firefox中不起作用。
- en: When the `className` property matches `up-remove-all`, we simply call our `removeAll()`
    helper function to remove the `<table>` element and clear the `<input>` and `fileList`
    array.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 当`className`属性匹配`up-remove-all`时，我们简单地调用我们的`removeAll()`辅助函数来移除`<table>`元素并清除`<input>`和`fileList`数组。
- en: If the `className` property doesn't match the **Remove all** link, we have to
    remove just the row of the `<table>` element that contains the `<a>` that was
    clicked. We first cache a reference to the `<a>` that triggered the event, which
    is set to `this` inside our handler function.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`className`属性与**全部移除**链接不匹配，我们必须仅移除包含被点击的`<a>`的`<table>`元素的行。我们首先缓存触发事件的`<a>`的引用，这在处理程序函数内部被设置为`this`。
- en: We also define a variable called `removed`, which we'll initialize with a value
    shortly. Lastly we store the `filename` of the file that the row we are about
    to remove represents.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还定义了一个名为`removed`的变量，我们将很快初始化一个值。最后，我们存储了我们将要移除的行所代表的文件的`filename`。
- en: Once we've set our variables, the first thing we do is remove the row that we
    can get using jQuery's `closest()` method, which finds the first parent element
    that matches the selector passed to the method.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们设置了变量，我们首先要做的是移除我们可以使用jQuery的`closest()`方法找到的行，该方法找到与传递给该方法的选择器匹配的第一个父元素。
- en: We then use jQuery's `each()` method to iterate the `fileList` array. For each
    item in the array, we compare the item's `name` property with the `filename` variable
    we just initialized. If the two match, we set the `index` number, which is passed
    automatically to the iterator function by jQuery, to our `removed` variable.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们使用jQuery的`each()`方法来迭代`fileList`数组。对于数组中的每个项目，我们将项目的`name`属性与我们刚初始化的`filename`变量进行比较。如果两者匹配，我们将`index`号（由jQuery自动传递给迭代器函数）设置为我们的`removed`变量。
- en: Once the `each()` method has finished, we can use JavaScript's `splice()` function
    to remove the file the current `<tr>` represented. The `splice()` function takes
    two arguments (it can take more but we don't need them here), where the first
    argument is the index of the item to begin removing at, and the second argument
    is the number of items to remove.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦`each()`方法完成，我们就可以使用JavaScript的`splice()`函数来移除当前`<tr>`所代表的文件。`splice()`函数接受两个参数（它可以接受更多，但我们这里不需要），第一个参数是要开始移除的项目的索引，第二个参数是要移除的项目数。
- en: Lastly, we check whether the `<table>` element has more than one row left in
    it. If it only has one row left, this will be the header row so we know that all
    files have been removed. We can therefore call our `removeAll()` helper function
    to tidy up and reset everything.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们检查`<table>`元素是否还有多于一行的行。如果只剩下一行，这将是标题行，所以我们知道所有文件都已删除。因此，我们可以调用我们的`removeAll()`辅助函数来整理并重置一切。
- en: Now when we've added files to the upload list, we should then be able to remove
    individual files using the inline **x** buttons, or clear the list using the **Remove
    all** link.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 现在当我们已经将文件添加到上传列表中时，我们应该能够使用内联**x**按钮逐个删除文件，或者使用**全部移除**链接清除列表。
- en: Adding a jQuery UI progress indicator
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加一个jQuery UI进度指示器
- en: In this task we'll add the elements and initialization code required by the
    jQuery UI Progressbar widget. The widget won't actually do anything yet because
    we won't be actually uploading anything until the next task, but we need to wire
    everything up ready.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个任务中，我们将添加jQuery UI进度条小部件所需的元素和初始化代码。小部件实际上还不会执行任何操作，因为在下一个任务中我们不会上传任何东西，但我们需要连接好一切准备就绪。
- en: Engage Thrusters
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动推进器
- en: We'll add an `initProgress()` method to our widget's prototype to select the
    `<div>` elements that we added to the `<table>` element and convert them into
    Progressbar widgets. We can also add the method that will be used to update the
    Progressbars.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将向小部件的原型添加一个`initProgress()`方法，用于选择我们添加到`<table>`元素中的`<div>`元素，并将它们转换为进度条小部件。我们还可以添加用于更新进度条的方法。
- en: 'Directly after the `handleFiles()` method, add the following code:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在`handleFiles()`方法之后，直接添加以下代码：
- en: '[PRE13]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Next, we''ll need to call this method after new rows have been added to `<table>`.
    Add the following call to our new method right at the end of the `handleFiles()`
    method:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要在向`<table>`添加新行后调用此方法。在`handleFiles()`方法的末尾直接添加以下调用：
- en: '[PRE14]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now we can add the code that updates the Progressbar. Add the following code
    directly after the `initProgress()` method we just added:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以添加更新进度条的代码了。在我们刚刚添加的`initProgress()`方法后面直接添加以下代码：
- en: '[PRE15]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We also need a tiny bit of CSS for the new progress bars. Add the following
    code to the end of `uploader.css`:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要为新的进度条添加一点 CSS。将以下代码添加到`uploader.css`的末尾：
- en: '[PRE16]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Objective Complete - Mini Debriefing
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 目标完成 - 迷你总结
- en: This was a shorter task than some of those we've covered in this project so
    far, but no less important. We added the new method in the same way that we've
    added most of the functionality for our plugin.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 这个任务比我们到目前为止在项目中涵盖的一些任务更短，但同样重要。我们添加了新方法的方式与为插件添加大部分功能的方式相同。
- en: Inside the method we first select all `<div>` elements with the class name `up-progress`.
    Don't forget that we can access the widget's container element using `this.el`
    and as it's a jQuery object already we can call jQuery methods, such as `find()`
    on it.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个方法中，我们首先选择所有类名为`up-progress`的`<div>`元素。不要忘记我们可以使用`this.el`访问小部件的容器元素，并且作为
    jQuery 对象，我们可以在其上调用 jQuery 方法，比如`find()`。
- en: We then iterate each element in the selection using jQuery's `each()` method.
    We're using the standard `each()` method in this task, where the current element
    in the collection is set to `this` inside the iterator function.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用jQuery的`each()`方法遍历选择中的每个元素。在此任务中，我们使用标准的`each()`方法，其中集合中的当前元素在迭代函数中设置为`this`。
- en: In the iterator function we first cache the current element. We then check whether
    it has the jQuery UI class name `ui-progressbar` and if it doesn't, we convert
    the element into a Progressbar using the jQuery UI method `progressbar()`.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在迭代函数中，我们首先缓存当前元素。然后我们检查它是否具有 jQuery UI 类名`ui-progressbar`，如果没有，我们将使用 jQuery
    UI 方法`progressbar()`将元素转换为进度条。
- en: Doing it this way means that the progress bar will always be created, whether
    it is the initial set of files being selected for uploading, or additional files
    that are being added to an existing `<table>`.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做意味着无论是选择要上传的初始文件集，还是将其他文件添加到现有的`<table>`中，进度条都将始终被创建。
- en: We also added a call to the new `initProgress()` method at the end of the `handleFiles()`
    method, which is called whenever new files are selected for upload.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在`handleFiles()`方法末尾，我们还添加了对新的`initProgress()`方法的调用，每当选择新文件上传时都会调用该方法。
- en: Next we added the `handleProgress()` method, which we'll bind to an event in
    the next task. This method will be passed two arguments, the first is the event
    object and the second is an already-wrapped jQuery object representing an individual
    Progressbar.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们添加了`handleProgress()`方法，我们将在下一个任务中将其绑定到一个事件。该方法将传递两个参数，第一个是事件对象，第二个是一个已包装的
    jQuery 对象，表示一个单独的进度条。
- en: Within the method, we first calculate how much of the file has been uploaded.
    We can determine this by dividing the loaded property of the event object by the
    total property, and then dividing by 100 to give us the percentage of the file
    that has been uploaded so far.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在方法中，我们首先计算已上传文件的比例。我们可以通过将事件对象的`loaded`属性除以`total`属性得出，然后除以100得出迄今为止已上传文件的百分比。
- en: The `loaded` and `total` properties are special properties that are added to
    the event object when the progress event is fired by the browser.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '`loaded`和`total`属性是特殊属性，当浏览器触发进度事件时会将它们添加到事件对象中。'
- en: Once we have the percentage, we can call the `value` method of the Progressbar
    widget in order to set the value to the percentage. This is a jQuery UI method
    and so is called in a special way. Rather than calling `value()` directly, we
    instead call the `progressbar()` method, and pass the name of the method to invoke,
    `value`, as the first argument. All jQuery UI methods are called in this way.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了百分比，我们就可以调用进度条小部件的`value`方法，以便将值设置为百分比。这是一个 jQuery UI 方法，因此以特殊的方式调用。我们不直接调用`value()`，而是调用`progressbar()`方法，并将要调用的方法的名称`value`作为第一个参数传递。所有
    jQuery UI 方法都是以这种方式调用的。
- en: Lastly, we added a little presentational CSS just to tweak the default styling
    provided by the default jQuery UI theme in use. When we add files to be uploaded
    now, we should see an empty Progressbar after each file in the `<table>`.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们添加了一些漂亮的 CSS 样式，以微调默认的 jQuery UI 主题提供的默认样式。现在，当我们添加要上传的文件时，我们应该在`<table>`中的每个文件后看到一个空的进度条。
- en: Uploading the selected files
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 正在上传所选文件
- en: We now have a list of files attached to the instance of our plugin ready to
    be uploaded. In this task we'll do just that and upload the files asynchronously
    using jQuery. This behavior will be tied to the **Upload files** button that we
    added to the markup generated by the plugin.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们有了附加到我们插件实例的文件列表，准备好上传。在这个任务中，我们将做到这一点，并使用 jQuery 异步上传文件。此行为将与我们添加到插件生成的标记中的**上传文件**按钮相关联。
- en: We can also use this task to update our Progressbars with the current progress
    of each file being uploaded.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用此任务来更新我们的进度条，显示每个正在上传的文件的当前进度。
- en: Engage Thrusters
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动推进器
- en: 'As this is another event handler, we''ll add it in the `init()` method along
    with all of the other event handlers so that they''re all kept in one place. Add
    the following code at the end of the `init()` method, after the existing event
    handlers:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这是另一个事件处理程序，我们将在`init()`方法中添加它，以及所有其他事件处理程序，以便它们都保持在一个地方。在现有的事件处理程序之后，在`init()`方法的末尾添加以下代码：
- en: '[PRE17]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Next add the new `uploadFiles()` method. This can go after the progress-related
    methods that we added in the last task:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，添加新的`uploadFiles()`方法。这可以在我们在上一个任务中添加的与进度相关的方法之后进行：
- en: '[PRE18]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Objective Complete - Mini Debriefing
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 完成目标 - 迷你总结
- en: Within our `uploadFiles()` method, we first store a reference to the widget
    as we have in some of the other methods we've added. We also store a reference
    to the **Upload files** button.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`uploadFiles()`方法中，我们首先存储对小部件的引用，就像我们在添加的其他一些方法中所做的那样。我们还存储对**上传文件**按钮的引用。
- en: The next thing to do is to check that the button doesn't have class name of
    `disabled`. If it does have this class name, it means that an upload has already
    been initiated for the selected files so we want to avoid making a duplicate request.
    If the button doesn't have the `disabled` class, it means that this is the first
    time the button has been clicked. So to prevent duplicate requests we then add
    the class `disabled`.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来要做的是检查按钮是否没有`disabled`类名。如果它确实具有此类名，这意味着已为所选文件启动了上传，因此我们希望避免重复请求。如果按钮没有`disabled`类，则意味着这是第一次单击按钮。因此，为了防止重复请求，我们随后添加`disabled`类。
- en: Next we iterate over the list of files that we've collected and which is stored
    in the widget instance's `fileList` property. For each file in the array we first
    create a new `FormData` object.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们遍历我们收集到的文件列表，该列表存储在小部件实例的`fileList`属性中。对于数组中的每个文件，我们首先创建一个新的`FormData`对象。
- en: '`FormData` is a part of the new XMLHttpRequest (XHR) level 2 specification
    which allows us to dynamically create a `<form>` element and submit that form
    asynchronously using XHR.'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '`FormData`是新的 XMLHttpRequest (XHR) level 2 规范的一部分，它允许我们动态创建一个`<form>`元素，并使用
    XHR 异步提交该表单。'
- en: Once we've created a new `FormData` object, we also store a reference to the
    Progressbar widget associated with the current file. We then use the FormData's
    `append()` method to append the current file to the new `FormData` object so that
    the file is encoded and sent to the server.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们创建了一个新的`FormData`对象，我们还会存储与当前文件关联的进度条小部件的引用。然后，我们使用`FormData`的`append()`方法将当前文件附加到新的`FormData`对象中，以便将文件编码并发送到服务器。
- en: Next we post the current `FormData` object to the server using jQuery's `ajax()`
    method. The `ajax()` method will return the `jqXHR` object for the request. This
    is a special version of the XHR object that jQuery enhances with additional methods
    and properties. We need to store this `jqXHR` object so that we can use it a little
    later on.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们使用 jQuery 的`ajax()`方法将当前的`FormData`对象发布到服务器。`ajax()`方法将返回请求的`jqXHR`对象。这是
    jQuery 增强了额外方法和属性的 XHR 对象的特殊版本。我们需要存储这个`jqXHR`对象，以便稍后使用。
- en: We'll look at exactly how it's used in the next task, but for now just understand
    that the `jqXHR` object returned by the `ajax()` method is pushed into the `allXHR`
    array that we stored as a member on the widget instance right at the start of
    the project.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一个任务中详细介绍它的使用方式，但现在只需了解`ajax()`方法返回的`jqXHR`对象被推送到我们在项目开始时存储为小部件实例成员的`allXHR`数组中即可。
- en: The `ajax()` method accepts a configuration object as an argument which allows
    us to control how the request is made. We set the request to `POST` using the
    `type` option, and specify the URL to post to using the `url` option. We add the
    `FormData` object as the payload of the request using the data option and set
    the `contentType` and `processData` options to `false`.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '`ajax()`方法接受一个配置对象作为参数，允许我们控制请求的方式。我们使用`type`选项将请求设置为`POST`，并使用`url`选项指定要发布到的
    URL。我们使用 data 选项将`FormData`对象添加为请求的有效载荷，并将`contentType`和`processData`选项设置为`false`。'
- en: If we don't set the `contentType` option to `false`, jQuery will try to guess
    which content type should be used for the request, which it may or may not do
    correctly, meaning some uploads will work and some will fail, seemingly for no
    apparent reason. The `content-type` of the request will be set to `multipart/form-data`
    by default as we are using `FormData` which have files appended to them.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们不将`contentType`选项设置为`false`，jQuery 将尝试猜测应该使用哪种内容类型进行请求，这可能正确也可能不正确，这意味着一些上传将正常工作，而另一些上传将失败，看起来毫无明显原因。请求的`content-type`将默认设置为`multipart/form-data`，因为我们使用的是附加有文件的`FormData`。
- en: Setting the `processData` option to `false` will ensure that jQuery doesn't
    try to transform the file into a URL-encoded query string.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 将`processData`选项设置为`false`将确保 jQuery 不会尝试将文件转换为 URL 编码的查询字符串。
- en: We need to modify the underlying XHR object used to make the request, so that
    we can attach our handler function to the progress event. The handler must be
    bound to the event before the request is made and the only way to do that currently
    is using the `xhr` option.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要修改用于发出请求的基础 XHR 对象，以便我们可以将处理程序函数附加到进度事件上。在请求发出之前，必须将处理程序绑定到事件上，目前唯一的方法是使用`xhr`选项。
- en: The option takes a callback function which we can use to modify the original
    XHR object and then return it for the request to be made. Inside the callback,
    we first store the original XHR object, which we can get from jQuery's `ajaxSettings`
    object.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 该选项接受一个回调函数，我们可以使用它来修改原始的 XHR 对象，然后返回给请求。在回调函数中，我们首先存储原始的 XHR 对象，可以从 jQuery
    的`ajaxSettings`对象中获取它。
- en: We then check whether the object has an `upload` property, and if it does we
    set an anonymous function as the value of `onprogress`. Within this function,
    we simply call the `handleProgress()` method of our widget that we added in the
    last task, passing it the progress event object and the Progressbar widget that
    we stored at the start of this task.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们检查对象是否具有`upload`属性，如果有，我们将匿名函数设置为`onprogress`的值。在此函数中，我们只需调用我们在上一个任务中添加的小部件的`handleProgress()`方法，将进度事件对象和我们在本任务开始处存储的
    Progressbar 小部件传递给它。
- en: Reporting success and tidying up
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 报告成功并整理
- en: In this task we need to show when each file has finished uploading. We also
    need to clear the `<table>` from the widget and re-enable the upload button once
    all of the uploads have completed.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在此任务中，我们需要显示每个文件何时完成上传。我们还需要清除小部件中的`<table>`，并在所有上传完成后重新启用上传按钮。
- en: Engage Thrusters
  id: totrans-220
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动推进器
- en: 'We can show when each individual file has completed uploading using jQuery''s
    `done()` method, which we can chain after the `ajax()` method that we added in
    the last task:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 jQuery 的`done()`方法显示每个单独文件上传完成的时间，我们可以在上一个任务中添加的`ajax()`方法之后链接此方法：
- en: '[PRE19]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'In order to tidy up following the uploads, we can make use of jQuery''s `when()`
    method. We should add the following code directly after the `each()` method in
    `uploadFiles()`:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在上传后进行整理，我们可以利用 jQuery 的`when()`方法。我们应该在`uploadFiles()`方法中的`each()`方法之后直接添加以下代码：
- en: '[PRE20]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Objective Complete - Mini Debriefing
  id: totrans-225
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 目标完成 - 迷你总结
- en: Because jQuery's `ajax()` method returns a `jqXHR` object, and because this
    object is a special object called a **promise object**, we can call certain jQuery
    methods on it. The `done()` method is used to execute code when the request completes
    successfully.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 因为 jQuery 的 `ajax()` 方法返回一个 `jqXHR` 对象，而且因为这个对象是一个称为**promise 对象**的特殊对象，我们可以在其上调用某些
    jQuery 方法。`done()` 方法用于在请求成功完成时执行代码。
- en: Note
  id: totrans-227
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You may be more used to using jQuery's `success()` method to handle successful
    AJAX requests, or the `error()` or `complete()` methods. These methods have been
    removed from the library in version 1.9, so we should use their replacements `done()`,
    `fail()`, and `always()` instead.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能更习惯于使用 jQuery 的 `success()` 方法来处理成功的 AJAX 请求，或者 `error()` 或 `complete()`
    方法。这些方法在版本 1.9 中已从库中移除，因此我们应该使用它们的替代品 `done()`、`fail()` 和 `always()`。
- en: Within this function all we need to do is remove the clear button and the Progressbar
    widget for the file that has just finished uploading. We can find the elements
    that need to be removed easily by navigating to them from the current Progressbar
    widget.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个函数中，我们只需要移除清除按钮和刚刚完成上传的文件的进度条小部件。我们可以通过从当前进度条小部件导航到它们来轻松找到需要移除的元素。
- en: We stored a reference to each individual Progressbar in the last task and because
    the `done()` method is chained to the `ajax()` method, we can still access this
    element using the variable after the request has completed.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在上一个任务中存储了每个单独的进度条的引用，并且因为 `done()` 方法链接到了 `ajax()` 方法，所以在请求完成后仍然可以使用这个变量访问这个元素。
- en: Notice that there appears to be an extra closing bracket at the end of the `done()`
    method. The reason for this is because it's still within the `push()` method that
    we added in an earlier task. It's critical that the `done()` method is added to
    the correct place – it must be chained to the `ajax()` method inside the `push()`
    method.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在 `done()` 方法的末尾似乎有一个额外的闭合括号。这是因为它仍然位于我们在先前任务中添加的 `push()` 方法内部。关键是 `done()`
    方法被添加到正确的位置——它必须链接到 `push()` 方法内部的 `ajax()` 方法。
- en: Once these elements have been removed, we add a simple message that says the
    file has finished uploading.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦这些元素被移除，我们添加一个简单的消息，表示文件已完成上传。
- en: We also need to remove the `<table>` element from the page once all the requests
    have been completed. It was for this reason that we stored all of the `jqXHR`
    objects generated when uploading the files in the last task. We can use jQuery's
    `when()` method to do this.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦所有请求都完成，我们还需要从页面中移除 `<table>` 元素。这就是我们在上一个任务中上传文件时存储了所有生成的 `jqXHR` 对象的原因。我们可以使用
    jQuery 的 `when()` 方法来做到这一点。
- en: The `when()` method can accept a series of promise objects and returns when
    they have all been resolved. However, this method doesn't accept an array, which
    is why we call it using JavaScript's `apply()` method instead of calling it normally.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '`when()` 方法可以接受一系列 promise 对象，并在它们全部解决时返回。然而，这个方法不接受数组，这就是为什么我们使用 JavaScript
    的 `apply()` 方法调用它，而不是正常调用它。'
- en: We can again use the `done()` method to add a callback function to be invoked
    once the `when()` method has returned. Within this callback, all we do is remove
    the `<table>` element showing the files that were uploaded and re-enable the upload
    button by removing the `disabled` class.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以再次使用 `done()` 方法来添加一个回调函数，一旦 `when()` 方法返回，就会调用该回调函数。在这个回调中，我们所做的就是移除显示已上传文件的
    `<table>` 元素，并通过移除 `disabled` 类重新启用上传按钮。
- en: 'This is all we need to do to actually upload the file or files that were selected
    and receive progress feedback on each file individually, as shown in the following
    screenshot:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们实际上需要做的，上传所选文件并分别接收每个文件的进度反馈，如下面的截图所示：
- en: '![Objective Complete - Mini Debriefing](img/9106OS_05_03.jpg)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![目标完成 - 迷你简报](img/9106OS_05_03.jpg)'
- en: Tip
  id: totrans-238
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Viewing the example file**'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '**查看示例文件**'
- en: To see this project in action you'll need to view the page we've created using
    a web server (using `http://localhost` on your own computer). It won't work if
    you open the file by double-clicking on it in Explorer or Finder.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看此项目的运行情况，您需要使用 Web 服务器查看我们创建的页面（在您自己的计算机上使用 `http://localhost`）。如果您在资源管理器或查找器中双击打开文件，它将无法正常工作。
- en: Mission Accomplished
  id: totrans-241
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 任务完成
- en: We've made it to the end of the project. At this point we should have an uploader
    plugin that is easy to use and provides rich features in supporting browsers such
    as multiple files, file information, an editable upload list, and upload progress
    reports.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了项目。在这一点上，我们应该有一个易于使用并在支持的浏览器中提供丰富功能的上传插件，例如多个文件、文件信息、可编辑的上传列表和上传进度报告。
- en: Tip
  id: totrans-243
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Not all browsers are able to use the features that this widget is built to exploit.
    The Opera browser for example, sees programmatically triggering the file dialog
    box as a security risk and so does not allow it.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有浏览器都能使用此小部件旨在利用的功能。例如，Opera 浏览器认为通过程序触发文件对话框存在安全风险，因此不允许它。
- en: Also, legacy versions of Internet Explorer (anything prior to version 10) will
    not be able to handle this code at all.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Internet Explorer 的旧版本（任何版本10之前的版本）根本无法处理此代码。
- en: Supporting incompatible or legacy browsers is beyond the scope of this example,
    but it would be relatively straight forward to add a fallback that made use of
    some other technology, such as Flash, in order to provide support for some of
    the behavior our plugin demonstrates.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 支持不兼容或遗留浏览器超出了此示例的范围，但添加一个备用方案是相对直接的，可以利用其他技术，比如 Flash，以支持我们的插件所展示的部分行为。
- en: Or there are a range of older jQuery plugins that make use of `<iframe>` elements
    to simulate uploading files via AJAX. Instead of focusing on what isn't supported,
    I've chosen to focus on what *can* be done in supporting browsers.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 或者有一系列旧的 jQuery 插件，利用 `<iframe>` 元素来模拟通过 AJAX 上传文件。我选择关注支持的浏览器可以做什么，而不是专注于不支持的功能。
- en: You Ready To Go Gung HO? A Hotshot Challenge
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你准备好大干一场了吗？挑战高手
- en: By uploading the files individually, we were able to add an event handler to
    monitor the progress of the files being uploaded. This also opens up of the possibility
    of aborting the upload of individual files.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 通过逐个上传文件，我们能够添加一个事件处理程序来监视正在上传的文件的进度。这也打开了取消上传单个文件的可能性。
- en: For this challenge why not see if you can add a mechanism for canceling the
    upload of a file. We already have the remove button which is used to remove files
    before they are uploaded. These could easily be updated so that they cancelled
    the upload if the upload is in progress.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个挑战，为什么不试试看能否添加一个取消上传文件的机制。我们已经有了用于在上传之前删除文件的移除按钮。这些按钮可以很容易地更新，以便在上传进行中取消上传。
- en: A handler for the abort event can be added to the XHR object in the same way
    as the progress event handler was attached, so it should be easily achievable.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 可以像附加进度事件处理程序一样向 XHR 对象添加取消事件的处理程序，因此这应该很容易实现。
