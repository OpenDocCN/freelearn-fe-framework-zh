["```js\nnpm -v\n```", "```js\nnpm install npm@latest -g\n```", "```js\n    added 325 packages, and audited 326 packages in 24s\n    ```", "```js\ngit init\necho \"node_modules\" > .gitignore\ngit add .\ngit commit -m \"Blank project with Jest dependency\"\n```", "```js\nnpm install --save react react-dom\n```", "```js\nnpm install --save-dev @babel/preset-env @babel/preset-react\nnpm install --save-dev @babel/plugin-transform-runtime\nnpm install --save @babel/runtime\n```", "```js\n{\n  \"presets\": [\"@babel/env\", \"@babel/react\"],\n  \"plugins\": [\"@babel/transform-runtime\"]\n}\n```", "```js\n{\n  customer: {\n    firstName: \"Ashley\",\n    lastName: \"Jones\",\n    phoneNumber: \"(123) 555-0123\"\n  },\n  stylist: \"Jay Speares\",\n  startsAt: \"2019-02-02 09:30\",\n  service: \"Cut\",\n  notes: \"\"\n}\n```", "```js\n    mkdir test\n    touch test/Appointment.test.js\n    ```", "```js\n    describe(\"Appointment\", () => {\n    });\n    ```", "```js\nNo tests found, exiting with code 1\nRun with `--passWithNoTests` to exit with code 0\n```", "```js\ndescribe(\"Appointment\", () => {\n  it(\"renders the customer first name\", () => {\n  });\n});\n```", "```js\nPASS test/Appointment.test.js\n  Appointment\n    ✓ renders the customer first name (1ms)\n```", "```js\nit(\"renders the customer first name\", () => {\n  expect(document.body.textContent).toContain(\"Ashley\");\n});\n```", "```js\nFAIL  test/Appointment.test.js\n  Appointment\n    ✕ renders the customer first name (1 ms)\n  ● Appointment › renders the customer first name\n    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.\n    Consider using the \"jsdom\" test environment.\n    ReferenceError: document is not defined\n      1 | describe(\"Appointment\", () => {\n      2 |   it(\"renders the customer first name\", () => {\n    > 3 |     expect(document.body.textContent).toContain(\"Ashley\");\n        |            ^\n      4 |   });\n      5 | })\n      6 |\n      at Object.<anonymous> (test/Appointment.test.js:3:12)\n```", "```js\nnpm install --save-dev jest-environment-jsdom\n```", "```js\n{\n  ...,\n  \"jest\": {\n    \"testEnvironment\": \"jsdom\"\n  }\n}\n```", "```js\nFAIL test/Appointment.test.js\n  Appointment\n    ✕ renders the customer first name (10ms)\n  ● Appointment › renders the customer first name\n    expect(received).toContain(expected)\n    Expected substring: \"Ashley\"\n    Received string:    \"\"\n      1 | describe(\"Appointment\", () => {\n      2 |   it(\"renders the customer first name\", () => {\n    > 3 |     expect(document.body.textContent).toContain(\"Ashley\");\n        |                                       ^\n      4 |   });\n      5 | });\n      6 |\n      at Object.toContain (test/Appointment.test.js:3:39)\n```", "```js\nReactDOM.createRoot(container).render(component);\n```", "```js\nit(\"renders the customer first name\", () => {\n  const component = ???\n  const container = ???\n  ReactDOM.createRoot(container).render(component);\n  expect(document.body.textContent).toContain(\"Ashley\");\n});\n```", "```js\n const customer = { firstName: \"Ashley\" };\n const component = <Appointment customer={customer} />;\n```", "```js\nconst container = document.createElement(\"div\");\n```", "```js\ndocument.body.appendChild(container);\n```", "```js\n    it(\"renders the customer first name\", () => {\n      const customer = { firstName: \"Ashley\" };\n      const component = (\n        <Appointment customer={customer} />\n      );\n      const container = document.createElement(\"div\");\n      document.body.appendChild(container);\n      ReactDOM.createRoot(container).render(component);\n      expect(document.body.textContent).toContain(\n        \"Ashley\"\n      );\n    });\n    ```", "```js\n    import React from \"react\";\n    import ReactDOM from \"react-dom/client\";\n    ```", "```js\n    ReferenceError: Appointment is not defined\n        5 |   it(\"renders the customer first name\", () => {\n        6 |     const customer = { firstName: \"Ashley\" };\n     >  7 |     const component = (\n        8 |       <Appointment customer={customer} />               \n          |        ^\n        9 |     );\n    ```", "```js\n    import { Appointment } from \"../src/Appointment\";\n    ```", "```js\n    Cannot find module '../src/Appointment' from 'Appointment.test.js'\n    ```", "```js\n    mkdir src\n    touch src/Appointment.js\n    ```", "```js\n    export const Appointment = () => {};\n    ```", "```js\n● Appointment › renders the customer first name\n   expect(received).toContain(expected)\n   Expected substring: \"Ashley\"\n   Received string:    \"\"\n     12 |     ReactDOM.createRoot(...).render(component);\n     13 |\n   > 14 |     expect(document.body.textContent).toContain(\n        |                                       ^\n     15 |       \"Ashley\"\n     16 |     );\n     17 |   });\n     at Object.<anonymous> (test/Appointment.test.js:14:39)\n```", "```js\nexport const Appointment = () => \"Ashley\";\n```", "```js\n● Appointment › renders the customer first name\n    expect(received).toContain(expected)\n    Expected substring: \"Ashley\"\n    Received string:    \"\"\n      12 |     ReactDOM.createRoot(...).render(component);\n      13 |\n    > 14 |     expect(document.body.textContent).toContain(\n      15 |                                       ^\n      16 |       \"Ashley\"\n      17 |     );\n         |   });\n```", "```js\n    import { act } from \"react-dom/test-utils\";\n    ```", "```js\n    act(() => \n    ReactDOM.createRoot(container).render(component)\n    );\n    ```", "```js\n    > jest\n      console.error\n        Warning: The current testing environment is not configured to support act(...)\n          at printWarning (node_modules/react-dom/cjs/react-dom.development.js:86:30)\n    ```", "```js\n    {\n      ...,\n      \"jest\": {\n        \"testEnvironment\": \"jsdom\",\n        \"globals\": {\n          \"IS_REACT_ACT_ENVIRONMENT\": true\n        }\n      }\n    }\n    ```", "```js\n    > jest\n     PASS  test/Appointment.test.js\n      Appointment\n    ✓ renders the customer first name (13 ms)\n    Test Suites: 1 passed, 1 total\n    Tests:       1 passed, 1 total\n    Snapshots:   0 total\n    Time:        1.355 s\n    Ran all test suites.\n    ```", "```js\n    it(\"renders another customer first name\", () => {\n      const customer = { firstName: \"Jordan\" };\n      const component = (\n        <Appointment customer={customer} />\n      );\n      const container = document.createElement(\"div\");\n      document.body.appendChild(container);\n      act(() => \n        ReactDOM.createRoot(container).render(component)\n      );\n      expect(document.body.textContent).toContain(\n        \"Jordan\"\n      );\n    });\n    ```", "```js\n    FAIL test/Appointment.test.js\n      Appointment\n    ✓ renders the customer first name (18ms)\n    ✕ renders another customer first name (8ms)\n    ● Appointment › renders another customer first name\n        expect(received).toContain(expected)\n        Expected substring: \"Jordan\"\n        Received string:    \"AshleyAshley\"\n    ```", "```js\ndocument.body.replaceChildren(container);\n```", "```js\n    it.skip(\"renders another customer first name\", () => {\n      ...\n    });\n    ```", "```js\n    PASS test/Appointment.test.js\n      Appointment\n    ✓ renders the customer first name (19ms)\n    ○ skipped 1 test\n    Test Suites: 1 passed, 1 total\n    Tests: 1 skipped, 1 passed, 2 total\n    ```", "```js\n    it(\"renders the customer first name\", () => {\n      const customer = { firstName: \"Ashley\" };\n      const component = (\n        <Appointment customer={customer} />\n      );\n      const container = document.createElement(\"div\");\n      document.body.replaceChildren(container);\n      ReactDOM.createRoot(container).render(component);\n      expect(document.body.textContent).toContain(\n        \"Ashley\"\n      );\n    });\n    ```", "```js\n    it(\"renders another customer first name\", () => {\n      const customer = { firstName: \"Jordan\" };\n      const component = (\n        <Appointment customer={customer} />\n      );\n      const container = document.createElement(\"div\");\n      document.body.replaceChildren(container);\n      act(() => \n        ReactDOM.createRoot(container).render(component)\n      );\n      expect(document.body.textContent).toContain(\n        \"Jordan\"\n      );\n    });\n    ```", "```js\n    FAIL test/Appointment.test.js\n      Appointment\n    ✓ renders the customer first name (18ms)\n    ✕ renders another customer first name (8ms)\n    ● Appointment › renders another customer first name\n        expect(received).toContain(expected)\n        Expected substring: \"Jordan\"\n        Received string:    \"Ashley\"\n    ```", "```js\n    export const Appointment = ({ customer }) => (\n      <div>{customer.firstName}</div>\n    );\n    ```", "```js\n    PASS test/Appointment.test.js\n     Appointment\n    ✓ renders the customer first name (21ms)\n    ✓ renders another customer first name (2ms)\n    ```", "```js\n    let container;\n    ```", "```js\n    beforeEach(() => {\n      container = document.createElement(\"div\");\n      document.body.replaceChildren(container);\n    });\n    ```", "```js\n    const render = component =>\n      act(() => \n        ReactDOM.createRoot(container).render(component)\n      );\n    ```", "```js\n    render(<Appointment customer={customer} />);\n    ```", "```js\n    it(\"renders the customer first name\", () => {\n      const customer = { firstName: \"Ashley\" };\n      render(<Appointment customer={customer} />);\n      expect(document.body.textContent).toContain(\n        \"Ashley\"\n      );\n    });\n    ```", "```js\nit(\"renders the customer first name\", () => {\n  const customer = { firstName: \"Ashley\" };\n  render(<Appointment customer={customer} />);\n  expect(document.body.textContent).toContain(\"Ashley\");\n});\n```"]