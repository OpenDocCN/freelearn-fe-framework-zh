- en: '8'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '8'
- en: Testing and What to Test in Vue.js 3
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Vue.js 3 中的测试及其测试内容
- en: In the previous chapter, you learned the nitty-gritty details of the steps involved
    in dockerizing your Vue.js 3 project. In addition, you learned about the best
    practices and industry standards to dockerize an enterprise Vue.js 3 web application.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，你学习了将你的 Vue.js 3 项目 docker 化的详细步骤。此外，你还学习了将企业级 Vue.js 3 网络应用程序 docker
    化的最佳实践和行业标准。
- en: In this chapter, you will explore the concept of software testing. You will
    learn what to test from an array of available components and methods. In addition,
    you will learn about best practices and industry standards related to testing
    libraries and how to integrate them with Vue.js 3.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将探索软件测试的概念。你将学习从一系列可用的组件和方法中要测试什么。此外，你还将了解与测试库相关的最佳实践和行业标准，以及如何将它们与 Vue.js
    3 集成。
- en: 'We will cover the following key topics in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下关键主题：
- en: Overview of testing
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试概述
- en: Testing in software engineering
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 软件工程中的测试
- en: What to test
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要测试什么
- en: Testing a basic Vue.js 3 app
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试基本的 Vue.js 3 应用程序
- en: Component testing in Vue.js 3
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vue.js 3 的组件测试
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To get started with this chapter, I recommend you read through [*Chapter 7*](B17237_07.xhtml#_idTextAnchor230),
    *Dockerizing a Vue 3 App*, first, where we took a more practical approach by dockerizing
    a full stack web application using Docker Compose. We will be using the application
    a lot in this chapter to learn about Vue.js 3 enterprise testing.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始本章的学习，我建议你首先阅读 *第 7 章*，*Dockerizing a Vue 3 App*，在那里我们通过使用 Docker Compose
    docker 化了一个全栈网络应用程序，采取了一种更实际的方法。在本章中，我们将大量使用该应用程序来学习 Vue.js 3 企业级测试。
- en: All the code files for this chapter can be found at [https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications/tree/chapter-8](https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications/tree/chapter-8).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的所有代码文件可以在 [https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications/tree/chapter-8](https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications/tree/chapter-8)
    找到。
- en: Overview of testing
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试概述
- en: Anyone who has studied computer science should be familiar with the concept
    of SDLC. If you are not aware, **SDLC** stands for **software development** **life
    cycle**.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 任何学习过计算机科学的人都应该熟悉 SDLC 的概念。如果你不知道，**SDLC** 代表 **软件开发生命周期**。
- en: 'Synopsys ([https://www.synopsys.com/glossary/what-is-sdlc.html](https://www.synopsys.com/glossary/what-is-sdlc.html))
    provides the following definition:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Synopsys ([https://www.synopsys.com/glossary/what-is-sdlc.html](https://www.synopsys.com/glossary/what-is-sdlc.html))
    提供以下定义：
- en: Software Development Life Cycle (SDLC) is a structured process that enables
    the production of high-quality, low-cost software, in the shortest possible production
    time. The goal of the SDLC is to produce superior software that meets and exceeds
    all customer expectations and demands.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 软件开发生命周期（SDLC）是一个结构化的过程，它能够在尽可能短的生产时间内生产出高质量、低成本软件。SDLC 的目标是生产出满足并超越所有客户期望和需求的优秀软件。
- en: If you explore the SDLC further, you’ll see that it defines and outlines eight
    detailed plans with stages or phases that quality and enterprise-level software
    must pass through to produce software that meets and exceeds all customer expectations
    and demands.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你进一步探索 SDLC，你会发现它定义并概述了八个详细计划，包括阶段或阶段，这些阶段或阶段是质量和企业级软件必须通过的，以生产出满足并超越所有客户期望和需求的软件。
- en: Each stage is crucial, including planning, coding, building, and testing. However,
    the testing phase is particularly important, especially when you need to build
    a bug- or defect-free enterprise-level application.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 每个阶段都至关重要，包括规划、编码、构建和测试。然而，测试阶段尤为重要，尤其是在你需要构建一个无错误或缺陷的企业级应用程序时。
- en: To elaborate further, the testing phase evaluates the created software against
    any bugs, any potential errors, and the requirements of the software from the
    planning phase.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进一步阐述，测试阶段评估创建的软件与任何错误、任何潜在错误以及从规划阶段开始的软件需求。
- en: Next, we will see what we mean by software testing.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将了解我们所说的软件测试是什么意思。
- en: What is software testing?
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是软件测试？
- en: Software testing is the method of checking whether the software in production
    matches the expected requirements and, most importantly, whether it is defect
    free. The method used to carry out software testing differs depending on the organization.
    However, the method is divided into manual and automated processes.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 软件测试是检查生产中的软件是否符合预期需求的方法，最重要的是，它是否无缺陷。执行软件测试所使用的方法因组织而异。然而，方法被分为手动和自动化过程。
- en: Individuals and organizations will have different names for software testing.
    It can also be categorized as whitebox or blackbox testing. However, the end result
    of any approach is always the same, which is identifying errors, gaps, or missing
    requirements in contrast to actual requirements.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 个人和组织对软件测试有不同的称呼。它也可以被归类为白盒测试或黑盒测试。然而，任何方法的最终结果总是相同的，即识别与实际需求相比的错误、差距或缺失的需求。
- en: Blackbox testing involves testing a system without knowing the internal workings
    of the system, while whitebox testing is an approach of testing that allows the
    tester to inspect and verify the internal workings of the system.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 黑盒测试涉及在不了解系统内部工作原理的情况下测试系统，而白盒测试是一种允许测试人员检查和验证系统内部工作原理的测试方法。
- en: Regardless of the names, terms, or categories used when referring to software
    testing, in simple terms, software testing means the verification of the **Application
    Under Test** (**AUT**), and it’s a critical and crucial stage in producing high-quality
    enterprise-level software.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 无论在提及软件测试时使用什么名称、术语或类别，简单来说，软件测试就是验证**被测试的应用程序**（**AUT**），这是生产高质量企业级软件的关键和关键阶段。
- en: In the next section, we will go through the importance of software testing.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将讨论软件测试的重要性。
- en: Why software testing is important
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么软件测试很重要
- en: The need to incorporate software testing into your application development pipeline
    cannot be overemphasized. It is as important as the planning and development phases
    in the SDLC. In fact, without a proper software testing strategy, it is likely
    that the end product of the software under development will be filled with bugs,
    errors, and unmet software requirements.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 将软件测试纳入您的应用程序开发流程中的必要性不容忽视。它和SDLC（软件开发生命周期）中的规划和开发阶段一样重要。实际上，如果没有适当的软件测试策略，开发中的软件最终产品很可能充满缺陷、错误和未满足的软件需求。
- en: Software testing is important because software bugs could be expensive and also
    very dangerous to businesses, and organizations at large. Over the years, there
    have been numerous examples of potential software bugs and monetary losses.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 软件测试之所以重要，是因为软件缺陷可能代价高昂，对企业和整个组织来说也非常危险。多年来，有许多潜在的软件缺陷和货币损失的事例。
- en: For instance, in April 2015, the Bloomberg terminal in London crashed due to
    a software glitch that affected more than 300,000 traders in financial markets.
    It forced the UK government to postpone a 3 billion pound debt sale, according
    to The Guardian ([https://www.theguardian.com/business/2015/apr/17/uk-halts-bond-sale-bloomberg-terminals-crash-worldwide](https://www.theguardian.com/business/2015/apr/17/uk-halts-bond-sale-bloomberg-terminals-crash-worldwide)).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，2015年4月，伦敦的彭博终端因软件故障而崩溃，影响了超过30万金融市场交易员。据《卫报》([https://www.theguardian.com/business/2015/apr/17/uk-halts-bond-sale-bloomberg-terminals-crash-worldwide](https://www.theguardian.com/business/2015/apr/17/uk-halts-bond-sale-bloomberg-terminals-crash-worldwide))报道，这迫使英国政府推迟了30亿英镑的债务销售。
- en: Also, according to Windows Report ([https://windowsreport.com/windows-10-vulnerability/](https://windowsreport.com/windows-10-vulnerability/)),
    there was a vulnerability in Windows 10 that enabled users to escape from security
    sandboxes through a flaw in the win32k system.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，根据Windows报告([https://windowsreport.com/windows-10-vulnerability/](https://windowsreport.com/windows-10-vulnerability/))，Windows
    10存在一个漏洞，允许用户通过win32k系统中的漏洞逃离安全沙箱。
- en: There have been many vulnerability reports on different malicious attempts on
    businesses that have impacted revenue or monetary value, of which some could be
    avoided with proper software testing. This indicates that software testing is
    a very important stage in the SDLC.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 已有许多关于不同恶意攻击商业活动导致收入或货币价值受损的漏洞报告，其中一些可以通过适当的软件测试避免。这表明软件测试是SDLC（软件开发生命周期）中非常重要的一个阶段。
- en: Though software testing costs money, I’m sure you will agree with me that the
    cost is nothing compared to the millions per year in development and support companies
    would have to spend if they don’t have a good testing technique and QA processes
    in place.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然软件测试需要资金，但我相信您会同意我的观点，与如果没有良好的测试技术和QA流程，开发和支持公司每年要花费的数百万美元相比，这个成本微不足道。
- en: 'In addition, having early software testing in place uncovers problems before
    the products go to market. Early testing also uncovers different defects, including
    but not limited to the following:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在产品上市之前进行早期软件测试可以揭示问题。早期测试还可以揭示不同的缺陷，包括但不限于以下内容：
- en: Architectural flaws
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 架构缺陷
- en: Poor design decisions
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计决策不当
- en: Invalid or incorrect functionality
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无效或不正确的功能
- en: Security vulnerabilities
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全漏洞
- en: Scalability issues
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可扩展性问题
- en: Having proper testing processes in place along the software development pipeline
    improves software reliability and means high-quality applications are delivered
    with few errors. In the next section, we will further explore the benefits of
    software testing.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件开发流程中实施适当的测试流程可以提高软件可靠性，意味着高质量的应用程序在错误很少的情况下交付。在下一节中，我们将进一步探讨软件测试的好处。
- en: The benefits of software testing
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 软件测试的好处
- en: 'In the previous section, we explained why enterprise applications need to include
    testing in their development pipeline. In this section, we will explore the benefits
    of having a proper software testing process. We will go through the following
    points in detail:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们解释了为什么企业应用需要在他们的开发流程中包含测试。在本节中，我们将探讨拥有适当的软件测试流程的好处。我们将详细讨论以下点：
- en: Helps in saving money
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 帮助节省资金
- en: Satisfaction of customers
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 满足客户需求
- en: Enhancing the development pipeline
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增强开发流程
- en: Quality of product
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 产品质量
- en: Security
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全性
- en: Helps in saving money
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 帮助节省资金
- en: Launching buggy software to market can end up being more expensive than creating
    the entire software. As stated previously, there have been many cases of company’s
    monetary value reducing due to software defects and error-prone software.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 将有缺陷的软件推向市场可能比创建整个软件更昂贵。如前所述，由于软件缺陷和易出错的软件，许多公司的货币价值已经减少。
- en: This problem can be curtailed to some extent if there is a proper software testing
    process built into the development pipeline to detect and rectify these errors
    before moving on to the next stage of the pipeline.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在开发流程中构建适当的软件测试过程来检测和纠正这些错误，那么这个问题可以在一定程度上得到缓解。
- en: Satisfaction of customers
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 满足客户需求
- en: For users of your enterprise application to be satisfied, the software must
    work properly and in accordance with the requirements.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让您的企业应用用户满意，软件必须正常工作，并符合要求。
- en: Therefore, before launching the software to market, an acceptance test must
    be conducted to ensure that the product works in accordance with the requirements
    and also to get a sense of how users will access and use the product day to day.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在将软件推向市场之前，必须进行验收测试，以确保产品符合要求，并了解用户将如何日常访问和使用产品。
- en: While in the testing phase, if any issues or bugs are detected, the software
    under test can easily be moved back to the development stage instead of finding
    out about the problems in the production stage where real users are interacting
    with the application.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试阶段，如果发现任何问题或错误，测试中的软件可以轻松地退回到开发阶段，而不是在生产阶段发现问题，那时真实用户正在与应用程序交互。
- en: Enhancing the development pipeline
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 增强开发流程
- en: Including software testing in the development pipeline creates an enhanced development
    pipeline. Also, it is an industry-standard practice to include software testing.
    In addition, it is simpler for developers to fix errors in the development stage
    than in the production stage.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 将软件测试纳入开发流程可以创建一个增强的开发流程。此外，将软件测试纳入流程是行业标准做法。另外，开发者修复开发阶段的错误比在生产阶段修复要简单。
- en: Thus, incorporating the software testing process in the development pipeline
    reduces the risk of launching error-prone software to market and enhances the
    development pipeline.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，将软件测试过程纳入开发流程可以降低将存在缺陷的软件推向市场的风险，并增强开发流程。
- en: Quality of product
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 产品质量
- en: When the quality of the product drops, the company might lose customers, resulting
    in a loss of revenue. However, one of the attributes of low-quality software is
    an untested and error-prone software application.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 当产品质量下降时，公司可能会失去客户，从而导致收入损失。然而，低质量软件的一个属性是未经测试且易于出现错误的软件应用程序。
- en: Furthermore, if there is a proper software testing process built into the development
    pipeline, most errors, bugs, and defects will be detected and fixed before production,
    thereby producing quality software.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果将适当的软件测试流程集成到开发管道中，大多数错误、缺陷和缺陷将在生产前被发现和修复，从而生产出高质量的软件。
- en: Security
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安全性
- en: According to OWASP ([https://owasp.org/www-project-top-ten/](https://owasp.org/www-project-top-ten/)),
    security should be an integral part of every software. Not considering it could
    result in a reduction in the monetary value of the business.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 根据OWASP（[https://owasp.org/www-project-top-ten/](https://owasp.org/www-project-top-ten/)），安全性应该是每个软件的组成部分。不考虑它可能会导致企业货币价值的降低。
- en: Software testing is one way to detect security loopholes and fix them in the
    development stage. If a product has undergone testing, the user can be assured
    that they are receiving a reliable product. They will be assured that their personal
    details are safe. Users can receive products that are more likely to be free from
    vulnerabilities with the aid of software testing.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 软件测试是检测安全漏洞并在开发阶段修复它们的一种方法。如果一个产品经过测试，用户可以确信他们正在接收一个可靠的产品。他们可以确信他们的个人信息是安全的。借助软件测试，用户可以接收到更可能没有漏洞的产品。
- en: In this subsection, we covered some benefits you can derive from implementing
    software testing into your pipeline when building enterprise-ready applications.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在本小节中，我们介绍了一些您可以从将软件测试实施到构建企业级应用程序的管道中获得的益处。
- en: In the next section, we will explore the different types of testing and different
    strategies you can integrate into your development pipeline.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨不同的测试类型以及您可以集成到您的开发管道中的不同策略。
- en: Testing in software engineering
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 软件工程中的测试
- en: As stated in the previous section, software testing is an integral part of the
    SDLC, and therefore, according to ANSI/IEEE 1059, testing in software engineering
    is a method of evaluating the software under test to discover whether it meets
    the requirements, as well as whether it is error, bug, and defect free.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，软件测试是SDLC（软件开发生命周期）的一个组成部分，因此，根据ANSI/IEEE 1059，软件工程中的测试是评估待测试软件以确定其是否满足要求，以及是否没有错误、缺陷和缺陷的方法。
- en: The process involves evaluating the features of the software under test for
    requirements in terms of any missing requirements, bugs or errors, security, reliability,
    and performance.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 该过程涉及评估待测试软件的功能，以检查任何缺失的需求、错误或错误、安全性、可靠性和性能。
- en: In this section, we explored the benefits of testing and why software testing
    is important, and in the next section, we will understand different types of software
    testing. We will explore what to test and how to write basic unit and integration
    tests.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们探讨了测试的好处以及为什么软件测试很重要，在下一节中，我们将了解不同类型的软件测试。我们将探讨要测试什么以及如何编写基本的单元和集成测试。
- en: Types of software testing
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 软件测试类型
- en: Software testing has been given different names. There are over 150 types of
    software testing according to Guru99 ([https://www.guru99.com/types-of-software-testing.html](https://www.guru99.com/types-of-software-testing.html)).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 软件测试有不同的名称。根据Guru99，有超过150种软件测试类型（[https://www.guru99.com/types-of-software-testing.html](https://www.guru99.com/types-of-software-testing.html)）。
- en: 'However, we are going to classify software testing into two main categories
    and then explore each of the categories and the different types within them. The
    following are the two main categories:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们将软件测试分为两大类，然后探索每一类及其中的不同类型。以下两大类是：
- en: Functional software testing
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 功能性软件测试
- en: Performance software testing (non-functional)
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 性能软件测试（非功能性）
- en: 'The following figure shows the high-level classification of software testing
    types:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了软件测试类型的高级分类：
- en: '![Figure 8.1 – A high-level classification of software testing (source: softwaretestinghelp)](img/Figure_8.01_B17237.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![图8.1 – 软件测试的高级分类（来源：softwaretestinghelp）](img/Figure_8.01_B17237.jpg)'
- en: 'Figure 8.1 – A high-level classification of software testing (source: softwaretestinghelp)'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.1 – 软件测试的高级分类（来源：softwaretestinghelp）
- en: 'You can explore more about the different categories of software testing on
    Youtube. However, we will only focus on three main categories of functional software
    testing, as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在YouTube上了解更多关于不同软件测试类别的信息。然而，我们将只关注以下三个主要的功能软件测试类别：
- en: Unit testing
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单元测试
- en: Integration testing
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成测试
- en: End-to-end testing
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 端到端测试
- en: Unit testing
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 单元测试
- en: This basic approach to software testing is carried out by a programmer to test
    the unit or smallest part of the program. It helps developers to know whether
    individual units of code are working properly or not.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这种基本的软件测试方法由程序员执行，以测试程序的单位或最小部分。这有助于开发者了解单个代码单元是否正常工作。
- en: Integration testing
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 集成测试
- en: This type of testing focuses on the construction and design of the software.
    You need to see whether the integrated units are working without errors or not.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型的测试侧重于软件的构建和设计。您需要查看集成单元是否在没有错误的情况下工作。
- en: End-to-end testing
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 端到端测试
- en: End-to-end testing is a methodology that assesses the working order of a complex
    product in a start-to-finish process.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 端到端测试是一种评估复杂产品从开始到结束的工作顺序的方法论。
- en: In the coming chapters, we will focus on exploring these different types of
    testing individually. Nevertheless, you can explore more than 150 different types
    of software testing from Guru99 ([https://www.guru99.com/types-of-software-testing.html](https://www.guru99.com/types-of-software-testing.html)).
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将专注于单独探索这些不同类型的测试。然而，您可以从Guru99（[https://www.guru99.com/types-of-software-testing.html](https://www.guru99.com/types-of-software-testing.html)）探索超过150种不同的软件测试类型。
- en: In summary, now that we know how important software testing is and the different
    types of software testing, how do we know what to test in a large enterprise application?
    In the next section, we are going to explore what to test and how to integrate
    a testing pipeline into the development workflow.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，既然我们知道软件测试的重要性以及不同的软件测试类型，我们如何知道在一个大型企业应用程序中要测试什么？在下一节中，我们将探讨要测试什么以及如何将测试管道集成到开发工作流程中。
- en: What to test
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 要测试什么
- en: A popular question among software teams is *what should we test and what should
    we not test?* In this section, we will explore the different things you should
    and shouldn’t test when considering software tests.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件团队中，一个常见的问题是*我们应该测试什么，不应该测试什么？*在本节中，我们将探讨在考虑软件测试时，您应该测试和不应该测试的不同事项。
- en: We will first explore different test strategies to employ when integrating software
    testing into your development workflow.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先探讨在将软件测试集成到您的开发工作流程时可以采用的不同测试策略。
- en: Testing strategy
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试策略
- en: The best testing strategy to implement in your enterprise application is the
    combination of normal (manual) testing and automated testing. In addition, normal
    testing should be done more extensively by the **Quality Assurance** (**QA**)
    team.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的企业应用程序中实施的最佳测试策略是正常（手动）测试和自动化测试的结合。此外，正常测试应由**质量保证**（**QA**）团队更广泛地进行。
- en: To explain this further, when automated testing is written and implemented successfully,
    we usually program it to look for fundamental errors and edge cases that may not
    properly assimilate how a real customer will interact with the application.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进一步解释，当自动化测试被成功编写和实施时，我们通常编程它来查找基本错误和边缘情况，这些错误和边缘情况可能没有正确地吸收真实客户如何与应用程序交互。
- en: What you should test
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 您应该测试的内容
- en: As much as software testing is important to the efficiency of an enterprise-ready
    application, knowing what to test is paramount so that developers don’t waste
    time testing the wrong things.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 软件测试对于企业级应用程序的效率至关重要，了解要测试什么至关重要，这样开发者就不会浪费时间测试错误的事情。
- en: 'The following is a list of some of the things you can look for when testing
    your enterprise project for errors, bugs, and defects:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在测试您的企业项目以查找错误、缺陷和缺陷时可以查找的一些事项列表：
- en: '**Passed parameters**: The collection of parameters or arguments passed into
    the method or function to make sure that it has not changed. In some cases, the
    data type of the parameter remains the same.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**传递的参数**：确保方法或函数没有改变而传递的参数或参数集合。在某些情况下，参数的数据类型保持不变。'
- en: '**Algorithm engines**: Every method has a purpose, and the purpose is implemented
    using logic or an algorithm. Your test case should test the algorithm to make
    sure it’s correct and it results in the right output based on the input into the
    method.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**算法引擎**：每个方法都有一个目的，这个目的是通过逻辑或算法实现的。你的测试用例应该测试算法，以确保它是正确的，并且根据方法输入产生正确的输出。'
- en: '**Simple database queries checking predicates**: If your job as a developer
    is related to queries and manipulating databases, you really want to test your
    database queries to make sure it performs the right manipulation and queries.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简单的数据库查询检查谓词**：如果你的工作作为开发者与查询和操作数据库相关，你真的需要测试你的数据库查询以确保它执行正确的操作和查询。'
- en: '**Utility methods**: Utility methods are helpers in your project that are created
    for a specific task. They are usually used when you need to do stuff that does
    not need an instance of a class. This set of methods needs to be tested properly
    to ensure it produces the correct output when used.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实用方法**：实用方法是项目中的辅助工具，为特定任务创建。它们通常在你需要执行不需要类实例的任务时使用。这一组方法需要得到适当的测试，以确保在使用时产生正确的输出。'
- en: '**Testing less critical codes:** Test the edge cases of a few unusually complex
    pieces of code that you think will probably have errors. Additionally, carry out
    edge-case tests of less critical code whenever someone has time to kill.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试不那么关键的代码**：测试一些你认为可能存在错误的异常复杂代码的边缘情况。此外，当有人有时间时，对不那么关键的代码进行边缘情况测试。'
- en: The preceding are a few things you can consider for your test cases. However,
    it is important to note that writing tests and having 100% code coverage do not
    necessarily mean that your code is bug free. In the next section, we will explore
    things you should not test in your project.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 上述是一些你可以考虑用于测试用例的内容。然而，重要的是要注意，编写测试和拥有100%的代码覆盖率并不一定意味着你的代码没有错误。在下一节中，我们将探讨在你的项目中不应该测试的内容。
- en: What you should not test
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你不应该测试的内容
- en: 'The following are the things that you should not be testing in your project:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在你的项目中不应该测试的内容：
- en: Constructors or properties (if they just return variables). Test them only if
    they contain validations.
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构造函数或属性（如果它们只是返回变量）。只有当它们包含验证时才测试它们。
- en: Methods that call another public method.
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调用另一个公共方法的函数。
- en: If the code needs to interact with other deployed systems, then an integration
    test should be used.
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果代码需要与其他已部署的系统交互，则应使用集成测试。
- en: Configurations such as constants, read-only fields, configs, and enumerations.
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如常量、只读字段、配置和枚举之类的配置。
- en: You should not test POJO classes or models; rather, you can test each of the
    methods inside the class.
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你不应该测试POJO类或模型；相反，你可以测试类中的每个方法。
- en: In summary, we have explored the software testing strategy, what to test, and
    what you should not test to help you understand the relevance of software testing
    in your enterprise application. In the next section, we will explore how to test
    a basic Vue.js application.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，我们已经探讨了软件测试策略，测试什么，以及你不应该测试什么，以帮助你理解软件测试在你企业应用中的相关性。在下一节中，我们将探讨如何测试一个基本的Vue.js应用。
- en: Testing a basic Vue.js 3 app
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试基本的Vue.js 3应用
- en: In the previous chapter, we created a Pinterest application using Strapi for
    the backend and Vue.js 3 for the frontend.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们使用Strapi作为后端和Vue.js 3作为前端创建了一个Pinterest应用程序。
- en: Previously, we added internationalization, structured the project, and built
    out a complete Pinterest clone. In this section, we will continue by using the
    official project we created for this book to set up software testing, resulting
    in a full-blown enterprise-ready Pinterest clone application.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 之前，我们添加了国际化，结构化了项目，并构建了一个完整的Pinterest克隆。在本节中，我们将继续使用为本书创建的官方项目来设置软件测试，从而得到一个完整的、企业级就绪的Pinterest克隆应用程序。
- en: You can clone the project from this repository, [https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications](https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications),
    to jump right in.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从这个仓库克隆项目，[https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications](https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications)，直接开始。
- en: Creating a test folder
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建测试文件夹
- en: It is always confusing knowing where to add your test files and folder when
    it comes to creating enterprise applications. There are two methods for structuring
    your test files depending on the approach you used for your enterprise project.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到创建企业应用程序时，知道在哪里添加你的测试文件和文件夹总是令人困惑。根据你在企业项目中使用的方法，有两种结构测试文件的方法。
- en: Method 1 – adding test files inside each component
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 方法 1 – 在每个组件内添加测试文件
- en: First, you can create a specific test file inside each of the `component` folders.
    For instance, inside the `component` folder in our Vue.js 3 project, we will create
    a folder for each component and move the files of each component into the folder,
    including the test file for each component.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你可以在每个 `component` 文件夹内创建一个特定的测试文件。例如，在我们的 Vue.js 3 项目中，我们将在每个组件文件夹内创建一个文件夹，并将每个组件的文件移动到该文件夹中，包括每个组件的测试文件。
- en: 'The following figure shows an example of how we could arrange our component
    folder to accommodate our testing files and other files related to a particular
    component:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了我们可以如何安排我们的组件文件夹以容纳我们的测试文件和其他与特定组件相关的文件：
- en: '![Figure 8.2 – A screenshot showing our component structure](img/Figure_8.02_B17237.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.2 – 展示我们的组件结构的屏幕截图](img/Figure_8.02_B17237.jpg)'
- en: Figure 8.2 – A screenshot showing our component structure
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.2 – 展示我们的组件结构的屏幕截图
- en: In the preceding figure, you can see how you can add any files related to any
    of the components. For example, if you want to add an end-to-end testing or integration
    testing file for each component, you just create the file within each specific
    component folder.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的图中，你可以看到如何添加与任何组件相关的任何文件。例如，如果你想为每个组件添加端到端测试或集成测试文件，你只需在每个特定的组件文件夹内创建该文件即可。
- en: Also, because of the structure of our practice project and the introduction
    of the atomic pattern, we can easily see how many files will be created in each
    component. The same goes for different areas we will be testing throughout the
    project.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，由于我们的实践项目结构和原子模式的引入，我们可以轻松地看到每个组件将创建多少文件。同样，这也适用于项目中的不同测试区域。
- en: However, we can use the next method to arrange everything related to testing
    in a separate folder and create all the files and folders inside the specific
    `tests` folder.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们可以使用下一个方法来将所有与测试相关的内容安排在单独的文件夹中，并在特定的 `tests` 文件夹内创建所有文件和文件夹。
- en: Method 2 – creating a tests folder
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 方法 2 – 创建测试文件夹
- en: In this section, we will create a folder inside the `src` folder called `tests`,
    which will contain every file and folder related to testing and test configurations.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将在 `src` 文件夹内创建一个名为 `tests` 的文件夹，该文件夹将包含所有与测试和测试配置相关的文件和文件夹。
- en: 'The following figure shows the folder structure for implementing testing with
    this method:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了使用此方法实现测试的文件夹结构：
- en: '![Figure 8.3 – A screenshot of the folder structure](img/Figure_8.03_B17237.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.3 – 实现测试的文件夹结构屏幕截图](img/Figure_8.03_B17237.jpg)'
- en: Figure 8.3 – A screenshot of the folder structure
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.3 – 实现测试的文件夹结构屏幕截图
- en: This method has a single folder that contains all the files and folders related
    to testing, including all the configurations. It is a central place and single
    point of truth for all your software testing files and folders. You can arrange
    this folder in a different structure as per your use case.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法有一个包含所有与测试相关的文件和文件夹（包括所有配置）的单个文件夹。它是所有软件测试文件和文件夹的中心位置和单一事实来源。你可以根据你的用例以不同的结构安排此文件夹。
- en: Furthermore, the method of structuring your test folder or files and folders
    related to testing does not matter. What matters the most is implementing software
    testing properly and knowing exactly what to test to avoid production bugs and
    errors.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你的测试文件夹或与测试相关的文件和文件夹的结构方法并不重要。最重要的是正确实施软件测试，并确切知道要测试什么，以避免生产中的错误和故障。
- en: We will use the second method in this demo in writing some basic unit tests
    to demonstrate. This is because we don’t want the testing files to be scattered
    across different folders since we are using the atomic pattern.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个演示中，我们将使用第二种方法来编写一些基本的单元测试以进行演示。这是因为我们不希望测试文件分散在不同的文件夹中，因为我们正在使用原子模式。
- en: Writing a basic unit test
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写基本的单元测试
- en: First, we will start by installing the new testing library for Vue.js 3\. Since
    we are using Vite in the project, we will also install the Vitest library for
    our test runner. You can read more about the new Vue.js 3 test library at [https://vitest.dev/guide/](https://vitest.dev/guide/).
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将开始安装 Vue.js 3 的新测试库。由于我们在项目中使用 Vite，我们还将安装 Vitest 库作为我们的测试运行器。你可以在 [https://vitest.dev/guide/](https://vitest.dev/guide/)
    上了解更多关于新 Vue.js 3 测试库的信息。
- en: Installing the test library
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装测试库
- en: 'Vitest is a blazing-fast unit test framework powered by Vite. Install the library
    by using any of these commands:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: Vitest 是由 Vite 驱动的闪电般的单元测试框架。使用以下任何命令安装库：
- en: '[PRE0]bash'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE0]bash'
- en: with npm
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 npm
- en: npm install -D vitest
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: npm install -D vitest
- en: or with yarn
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 或者使用 yarn
- en: yarn add -D vitest
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: yarn add -D vitest
- en: or with pnpm
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 或者使用 pnpm
- en: pnpm add -D vitest
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: pnpm add -D vitest
- en: '[PRE1]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now that we have our testing library set up, let’s create a simple helper file
    to test our configuration.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置了测试库，让我们创建一个简单的辅助文件来测试我们的配置。
- en: Creating a helper file
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建辅助文件
- en: 'For our demonstration, we will create a helper file inside the `src/helpers`
    folder and add a simple function to increment a value. The following snippet shows
    the code example we have added to the newly created file:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的演示中，我们将在 `src/helpers` 文件夹内创建一个辅助文件，并添加一个简单的增加值的函数。以下代码片段显示了添加到新创建的文件中的代码示例：
- en: '[PRE2]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The increment function written previously increments a value by `1` until the
    max value is reached. If the max value is reached, it simply returns the current
    value. Next, let’s write a basic unit test for it.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 之前编写的增量函数通过增加 `1` 来增加一个值，直到达到最大值。如果达到最大值，它将简单地返回当前值。接下来，让我们为它编写一个基本的单元测试。
- en: Writing a basic test
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编写基本测试
- en: 'In this section, we will write a simple unit test for this function. You can
    follow this by writing unit tests for all the functions and methods of your enterprise
    project:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将为这个函数编写一个简单的单元测试。你可以在此基础上为你的企业项目中的所有函数和方法编写单元测试：
- en: '[PRE3]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We will explore unit testing in depth in the next chapter.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一章深入探讨单元测试。
- en: 'Let’s walk through the preceding code together and understand the nitty-gritty
    details of it:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们一起来分析前面的代码，并理解它的细节：
- en: '**Step 1: Adding the** **required packages**'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**步骤 1：添加** **所需的包**'
- en: 'First, we need the `vitest` package and the `helper` file to test. Next, we
    use the exported functions to create a `describe` block, and so on:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要 `vitest` 包和 `helper` 文件来测试。接下来，我们使用导出的函数创建一个 `describe` 块，等等：
- en: '[PRE4]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `describe` block is used to group related test cases, as demonstrated in
    the preceding code snippet.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '`describe` 块用于将相关的测试案例分组，如前一个代码片段所示。'
- en: '**Step 2: Using the** **it function**'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**步骤 2：使用** **it 函数**'
- en: 'Next, we use the `it` function to test specific use cases of our function.
    For instance, we test to make sure the number actually increases by `1` each time
    the function is called:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们使用 `it` 函数来测试我们函数的特定用例。例如，我们测试确保每次调用函数时数字实际上增加 `1`：
- en: '[PRE5]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Step 3: Using the** **except function**'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**步骤 3：使用** **except 函数**'
- en: Lastly, the `expect` function is used to test the use case. You pass in a value
    and expect the value to be equal to another value, as shown in the example.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`expect` 函数用于测试用例。你传入一个值并期望该值等于另一个值，如示例所示。
- en: You can access different methods ([https://vitest.dev/api/#expect](https://vitest.dev/api/#expect))
    from the `expect` object aside from the `toBe()` function.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 `toBe()` 函数外，你还可以从 `expect` 对象访问不同的方法（[https://vitest.dev/api/#expect](https://vitest.dev/api/#expect)）。
- en: In the next section, we will cover the process of running your test with Vitest
    and creating your first component/integration testing examples.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将介绍使用 Vitest 运行测试以及创建你的第一个组件/集成测试示例的过程。
- en: Running a test with Vitest
  id: totrans-168
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 Vitest 运行测试
- en: 'We will now run the test to see whether it passes or not. Type the following
    command into your root terminal:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将运行测试以查看它是否通过。在你的根终端中输入以下命令：
- en: '[PRE6]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If your test is successful, you should see that the three cases passed, as
    shown in the following figure:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的测试成功，你应该会看到三个案例都通过了，如下面的图所示：
- en: '![Figure 8.4 – A screenshot showing the test result](img/Figure_8.04_B17237.jpg)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.4 – 显示测试结果的截图](img/Figure_8.04_B17237.jpg)'
- en: Figure 8.4 – A screenshot showing the test result
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.4 – 显示测试结果的截图
- en: In this section, we have demonstrated how to configure and structure software
    testing with Vue.js 3 using the latest Vitest testing library for Vue.js 3\. We
    have also learned how to write a basic unit test. In the next section, we will
    learn how to create basic component-based testing.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们展示了如何使用 Vue.js 3 的最新 Vitest 测试库配置和构建软件测试。我们还学习了如何编写基本的单元测试。在下一节中，我们将学习如何创建基于组件的基本测试。
- en: Component testing in Vue.js 3
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Vue.js 3 中的组件测试
- en: In Vue.js, components are the main building block of the UI and refer to a single
    unit of the application that is shareable, testable, and reusable. Therefore,
    component testing sits between unit testing and end-to-end testing. It can also
    be referred to as integration testing.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Vue.js 中，组件是 UI 的主要构建块，指的是应用中可共享、可测试和可重用的单个单元。因此，组件测试位于单元测试和端到端测试之间。它也可以被称为集成测试。
- en: In the previous chapters, where we integrated atomic patterns using Storybook,
    we discussed creating component stories and how to create them. If you created
    stories for all your components and configured them to work properly as demonstrated,
    then you will have already implemented component testing using Storybook stories.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，我们使用 Storybook 集成原子模式时，我们讨论了创建组件故事以及如何创建它们。如果您为所有组件创建了故事，并配置它们按演示正常工作，那么您已经使用
    Storybook 故事实现了组件测试。
- en: However, [*Chapter 10*](B17237_10.xhtml#_idTextAnchor363), *Integrating Testing
    in Vue.js 3* is dedicated to exploring component testing. Nevertheless, we will
    briefly illustrate in this chapter how to implement simple component-based testing
    to aid our understanding of the next chapters.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，[第 10 章](B17237_10.xhtml#_idTextAnchor363)，“在 Vue.js 3 中集成测试”专门探讨了组件测试。尽管如此，我们将在本章中简要说明如何实现简单的基于组件的测试，以帮助我们理解下一章。
- en: Writing a basic component test
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写基本的组件测试
- en: We will start by installing the new testing library for Vue.js 3\. Since we
    are using Vite in the project, we will also install the Vitest library for our
    test runner. You can read more about the new Vue.js 3 test library ([https://vuejs.org/guide/scaling-up/testing.html](https://vuejs.org/guide/scaling-up/testing.html)).
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先安装 Vue.js 3 的新测试库。由于我们在项目中使用 Vite，我们还将安装 Vitest 库作为我们的测试运行器。您可以阅读更多关于新
    Vue.js 3 测试库的信息（[https://vuejs.org/guide/scaling-up/testing.html](https://vuejs.org/guide/scaling-up/testing.html)）。
- en: Installing the test library
  id: totrans-181
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装测试库
- en: 'As of the time of writing, `@testing-library/vue` ([https://github.com/testing-library/vue-testing-library](https://github.com/testing-library/vue-testing-library))
    is recommended for component testing, and we will install it in our example. Run
    the following command to install it:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 截至撰写本文时，`@testing-library/vue` ([https://github.com/testing-library/vue-testing-library](https://github.com/testing-library/vue-testing-library))
    被推荐用于组件测试，我们将在示例中安装它。运行以下命令来安装它：
- en: '[PRE7]bash'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE7]bash'
- en: npm install -D vitest happy-dom @testing-library/vue
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: npm install -D vitest happy-dom @testing-library/vue
- en: '[PRE8]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Next, open the `vite.config.js` file and add the following configuration:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，打开 `vite.config.js` 文件并添加以下配置：
- en: '[PRE9]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This configuration should allow us to run both unit and component tests at the
    same time. Next, let’s create a simple component test.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 此配置应允许我们同时运行单元测试和组件测试。接下来，让我们创建一个简单的组件测试。
- en: Creating a basic component test
  id: totrans-189
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建基本的组件测试
- en: 'Here is a simple component test snippet to demonstrate the process:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个简单的组件测试代码片段，用于演示过程：
- en: '[PRE10]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The test simply renders `Button` with a custom label value and also checks whether
    we can retrieve the custom label added during the rendering process.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 测试简单地渲染带有自定义标签值的 `Button`，并检查我们是否可以在渲染过程中检索到添加的自定义标签。
- en: Running the test
  id: totrans-193
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行测试
- en: 'Running the test will result in four passed test cases, including the unit
    test we created earlier:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 运行测试将导致四个通过测试案例，包括我们之前创建的单元测试：
- en: '![Figure 8.5 – A screenshot showing the final test result with integration
    testing](img/Figure_8.05_B17237.jpg)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.5 – 一个显示集成测试最终测试结果的截图](img/Figure_8.05_B17237.jpg)'
- en: Figure 8.5 – A screenshot showing the final test result with integration testing
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.5 – 一个显示集成测试最终测试结果的截图
- en: In this section, we have demonstrated how to configure and structure component
    testing, also known as integration testing, with Vue.js 3 using the latest Vitest
    testing library for Vue.js 3\. We have also written basic component tests to help
    us understand the process. In the next chapters, we will look in-depth at the
    different types of testing we can perform when building enterprise projects with
    Vue.js 3.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们展示了如何使用最新的 Vitest 测试库配置和构建 Vue.js 3 的组件测试，也称为集成测试。我们还编写了基本的组件测试，以帮助我们理解这个过程。在接下来的章节中，我们将深入探讨在构建
    Vue.js 3 企业项目时可以执行的不同类型的测试。
- en: 'You can clone the latest repository for this chapter here: [https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications/tree/chapter-8](https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications/tree/chapter-8).'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在此处克隆本章的最新仓库：[https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications/tree/chapter-8](https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications/tree/chapter-8)。
- en: Summary
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter dove deeper into the concept of software testing to deliver scalable,
    high-performing, and bug-free applications. We also explored what to test from
    an array of available components and methods. In addition, we utilized our knowledge
    of software testing to create basic unit and component test cases in Vue.js 3
    using Vitest.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 本章深入探讨了软件测试的概念，以交付可扩展、高性能且无错误的软件应用。我们还探讨了从一系列可用组件和方法中应该测试什么。此外，我们还利用我们对软件测试的知识，在
    Vue.js 3 中使用 Vitest 创建基本的单元和组件测试用例。
- en: In the next chapter, we will explore everything related to unit testing. We
    will learn how to unit test a Vue.js 3 component and the component and page methods.
    We will also learn about unit testing tools such as Vitest and use them to effectively
    unit test an enterprise project.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨与单元测试相关的所有内容。我们将学习如何对 Vue.js 3 组件及其页面方法进行单元测试。我们还将了解单元测试工具，如 Vitest，并使用它们有效地对企业项目进行单元测试。
