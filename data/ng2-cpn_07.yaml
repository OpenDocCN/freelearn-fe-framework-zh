- en: Chapter 7. Putting It All Together
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章。将一切放在一起
- en: It's time to take everything we have learned about components and put it into
    practice. In this chapter, we will build useful components. We will also learn
    about Angular 2 change detection and the component life cycle.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候把我们学到的关于组件的一切付诸实践了。在本章中，我们将构建有用的组件。我们还将学习关于Angular 2变化检测和组件生命周期的知识。
- en: 'The following are the topics that we will cover:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们将要涵盖的主题：
- en: Resetting the development environment
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重置开发环境
- en: Building a simple accordion component
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建一个简单的手风琴组件
- en: Extending the accordion component tree
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展手风琴组件树
- en: Extending hooking to the component life cycle events
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展钩子到组件生命周期事件
- en: Preparing our development environment
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备我们的开发环境
- en: It's time to create a new project with `angular-cli` as described in [Chapter
    2](part0020.xhtml#aid-J2B81 "Chapter 2. Setting Up an Angular 2 Development Environment
    with angular-cli"), *Setting Up an Angular 2 Development Environment with angular-cli*.
    We will create a new directory called `components` to contain all the components
    we will implement in this chapter.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候使用`angular-cli`创建一个新项目了，就像[第2章](part0020.xhtml#aid-J2B81 "第2章。使用angular-cli设置Angular
    2开发环境")中描述的那样，*使用angular-cli设置Angular 2开发环境*。我们将创建一个名为`components`的新目录，用于包含本章中将要实现的所有组件。
- en: 'We will later create two other subdirectories in this chapter, `accordion`
    and `user-info`, when implementing the corresponding components:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在实现相应组件时，我们将在本章中创建另外两个子目录，`accordion`和`user-info`：
- en: '![Preparing our development environment](../Images/image00108.jpeg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![准备我们的开发环境](../Images/image00108.jpeg)'
- en: 'The last thing before starting to build our new components is to clean up our
    root component. Open `index.ts` and clean it as follows:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始构建新组件之前的最后一件事是清理我们的根组件。打开`index.ts`并进行如下清理：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Open your browser and make sure that the component has rendered without any
    errors:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 打开浏览器，确保组件已经渲染而没有任何错误：
- en: '![Preparing our development environment](../Images/image00109.jpeg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![准备我们的开发环境](../Images/image00109.jpeg)'
- en: Now we are ready to start developing our new components.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备开始开发我们的新组件了。
- en: The accordion component
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 手风琴组件
- en: 'The first component that we are going to build will be an `accordion` component.
    The accordion is composed from two components: the accordion wrapper and an accordion
    tab. Let''s start implementing the `accordion` tab first.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要构建的第一个组件将是一个`accordion`组件。手风琴由两个组件组成：手风琴包装器和手风琴标签。让我们先开始实现`accordion`标签。
- en: 'Inside the components directory, create a new directory called `accordion`.
    Inside it, create the `accordion-tab.ts` file, and paste the following code:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在components目录中，创建一个名为`accordion`的新目录。在其中，创建`accordion-tab.ts`文件，并粘贴以下代码：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The component decorator is straightforward. We throw some CSS and a template
    that includes a `<ng-content>` tag to use an insertion point for the accordion
    tab content.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 组件装饰器很简单。我们添加了一些CSS和一个包含`<ng-content>`标签的模板，用于手风琴标签内容的插入点。
- en: 'To test it, let''s render the `accordion-tab` file. Open `app.component.ts`
    and update the code:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试它，让我们渲染`accordion-tab`文件。打开`app.component.ts`并更新代码：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Don''t forget to add the `AccordionTab` class to the declarations attribute
    of the root module. This operation will be required for all custom components
    implemented in this chapter. Open the `app.module.ts` file and update it as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记将`AccordionTab`类添加到根模块的declarations属性中。这个操作对于本章中实现的所有自定义组件都是必需的。打开`app.module.ts`文件并进行如下更新：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now, let''s open the browser to make sure that the component is rendered as
    expected:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们打开浏览器，确保组件按预期渲染：
- en: '![The accordion component](../Images/image00110.jpeg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![手风琴组件](../Images/image00110.jpeg)'
- en: 'Next, let''s implement the toggle action of `accordion-tab`. Open `accordion-tab.ts`
    and update the template and the `Component` class:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们实现`accordion-tab`的切换动作。打开`accordion-tab.ts`并更新模板和`Component`类：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We bind a method to the click event of the title that toggles a Boolean, which
    trigger the `ngIf` directive. We covered that in the previous two chapters. To
    test our component, let''s put some dummy content in the other tabs. Open `app.component.ts`
    and update the template as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将一个方法绑定到标题的点击事件，这个方法切换一个布尔值，触发`ngIf`指令。我们在前两章中已经讨论过这个。为了测试我们的组件，让我们在其他标签中放一些虚拟内容。打开`app.component.ts`并按照以下方式更新模板：
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now, we can open the browser and test our component. When we click on a tab
    title, the corresponding content is toggled. But the tabs should work together.
    Only one tab can be extended. To achieve this, we can wrap the `accordion-tab`
    component with a component that implements this logic.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以打开浏览器测试我们的组件。当我们点击标签标题时，相应的内容会切换。但是标签应该一起工作。只有一个标签可以展开。为了实现这一点，我们可以用一个实现这个逻辑的组件包装`accordion-tab`组件。
- en: 'Before we do it, we need to make sure that each of the objects in the `users`
    array that we get from the server (`users.json` in our case) has a unique `id`.
    Open `users.json` and make sure it is similar to the following:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们这样做之前，我们需要确保从服务器获取的`users`数组中的每个对象（在我们的情况下是`users.json`）都有一个唯一的`id`。打开`users.json`并确保它类似于以下内容：
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now, create a new file called `accordion.ts` inside the `accordion` folder
    and let''s lay down the basic implementation:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在`accordion`文件夹内创建一个名为`accordion.ts`的新文件，让我们先制定基本实现：
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We used the HTTP service to pull the user's data from a static JSON, and we
    iterate over the `users` array—repeating the accordion-tab component. On each
    `accordion-tab` component, we bind a method to a click event and bind dynamic
    data to the properties. We are also using the `json` pipe fill some content inside
    the accordion tabs.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用HTTP服务从静态JSON中获取用户数据，并遍历`users`数组——重复手风琴标签组件。在每个`accordion-tab`组件上，我们绑定一个方法到点击事件，并将动态数据绑定到属性上。我们还使用`json`管道在手风琴标签内填充一些内容。
- en: The logic for selecting an active tab is very easy to implement inside the `Component`
    class.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 选择活动标签的逻辑在`Component`类中非常容易实现。
- en: 'Next, we need to refactor the `accordion-tab` and define its input and output
    interface:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要重构`accordion-tab`并定义它的输入和输出接口：
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The simple accordion is now ready. We used almost everything we have learned
    to craft this widget. Note that we didn''t have to write a lot of code. Angular''s
    built-in directives and binding system did all the heavy lifting for us. To test
    it in the browser, open `app.component.ts` and render the `<accordion>` component:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 简单的手风琴现在已经准备好了。我们几乎使用了我们学到的所有知识来制作这个小部件。请注意，我们不需要写很多代码。Angular的内置指令和绑定系统为我们做了大部分的工作。要在浏览器中测试它，打开`app.component.ts`并渲染`<accordion>`组件：
- en: '[PRE9]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Open the browser and check the result. Each time we click on an accordion tab,
    it is the only one that gets extended:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 打开浏览器并检查结果。每次点击手风琴标签时，只有一个标签会展开：
- en: '![The accordion component](../Images/image00111.jpeg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![手风琴组件](../Images/image00111.jpeg)'
- en: 'Before we move forward, let''s make the accordion extended only when clicking
    its `title`, and the whole `tab`. For this, we will emit a custom event when clicking
    on the title and then bind to this event from the parent component, which is the
    accordion:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，让手风琴只在点击它的`标题`和整个`标签`时展开。为此，我们将在点击标题时发出自定义事件，然后从父组件（即手风琴）绑定到这个事件：
- en: '[PRE10]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'That''s it for the `accordion-tab` component. Let''s move to the `accordion`
    component and bind to this event:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是`accordion-tab`组件。让我们转到`accordion`组件并绑定到这个事件：
- en: '[PRE11]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now we can render the accordion component and see the results. In `app.component.ts''`
    include the following:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以渲染手风琴组件并查看结果。在`app.component.ts`中包括以下内容：
- en: '[PRE12]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Open the browser and check the results. The accordion works as expected.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 打开浏览器并检查结果。手风琴按预期工作。
- en: Extending the accordion component tree
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩展手风琴组件树
- en: 'Let''s add another component to our accordion tree. Instead of rendering raw
    JSON as a tab content, let''s reuse the user information component that we built
    on in [Chapter 4](part0031.xhtml#aid-TI1E1 "Chapter 4. Building a Basic Component"),
    *Building a Basic Component*, and [Chapter 5](part0038.xhtml#aid-147LC1 "Chapter 5. Building
    Dynamic Components"), *Building Dynamic Components*. For this, just create a `user-info`
    subdirectory in the `components` directory and copy the corresponding TypeScript
    files into this directory. The only file we need to refactor is `accordion.ts`:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们向手风琴树中添加另一个组件。不要将原始JSON呈现为选项卡内容，而是重用我们在[第4章](part0031.xhtml#aid-TI1E1 "第4章。构建基本组件")和[第5章](part0038.xhtml#aid-147LC1
    "第5章。构建动态组件")中构建的用户信息组件。为此，只需在`components`目录中创建一个`user-info`子目录，并将相应的TypeScript文件复制到该目录中。我们需要重构的唯一文件是`accordion.ts`：
- en: '[PRE13]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: All we needed to do is to import the user info component, declare it in the
    component metadata, and use it in our template, binding the `user` variable to
    the `User` property that the component expects.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所需要做的就是导入用户信息组件，在组件元数据中声明它，并在我们的模板中使用它，将`user`变量绑定到组件期望的`User`属性。
- en: The component life cycle
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组件生命周期
- en: 'Component instances have a life cycle that we can hook into. Currently, our
    mini application contains four components: `App`, `accordion`, `accordion-tab`,
    and `user-info`, but a typical Angular application will contain tens of component
    trees that Angular will create, update, and destroy during our application''s
    lifetime.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 组件实例有一个我们可以连接到的生命周期。目前，我们的迷你应用程序包含四个组件：`App`、`accordion`、`accordion-tab`和`user-info`，但一个典型的Angular应用程序将包含数十个组件树，Angular将在应用程序的生命周期内创建、更新和销毁这些组件。
- en: 'For demo purposes, we will simulate a server call that returns other data.
    For this, create a file called `other-users.json` inside the `server` directory
    and paste this code into it:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示目的，我们将模拟一个返回其他数据的服务器调用。为此，在`server`目录中创建一个名为`other-users.json`的文件，并将以下代码粘贴到其中：
- en: '[PRE14]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'On the accordion component template, we will add a button that will fetch this
    new data and implement the `fetchData` method on the `Component` class:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在手风琴组件模板上，我们将添加一个按钮，该按钮将获取新数据，并在`Component`类上实现`fetchData`方法：
- en: '[PRE15]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Now, each time we click on the button, the user's data is updated and the accordion
    re-rendered. Open the browser, click on the button, and watch the accordion data
    change.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，每次点击按钮时，用户数据都会更新，手风琴会重新渲染。打开浏览器，点击按钮，观察手风琴数据的变化。
- en: Life cycle event interfaces
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生命周期事件接口
- en: In order to run our own logic on each one of the component life cycle events,
    we need to implement the desired method that corresponds to the event we want
    to react to. Each one of those events is published as a TypeScript interface,
    which we can implement in our component class. The use of TypeScript interfaces
    is optional and won't affect our application in any way at all. You can learn
    about TypeScript interfaces from the documentation on the TypeScript website at
    [http://www.typescriptlang.org/docs/handbook/interfaces.html](http://www.typescriptlang.org/docs/handbook/interfaces.html).
    We won't use this in our code examples.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在每个组件生命周期事件上运行我们自己的逻辑，我们需要实现与我们想要做出反应的事件相对应的所需方法。这些事件中的每一个都被发布为一个TypeScript接口，我们可以在我们的组件类中实现它。使用TypeScript接口是可选的，不会以任何方式影响我们的应用程序。您可以从TypeScript网站上的文档中了解有关TypeScript接口的信息[http://www.typescriptlang.org/docs/handbook/interfaces.html](http://www.typescriptlang.org/docs/handbook/interfaces.html)。我们不会在我们的代码示例中使用这个。
- en: OnInit and OnDestroy
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OnInit and OnDestroy
- en: The simplest, most straightforward, and most easy-to-understand life cycle event
    hooks are `onInit` and `onDestroy`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单、最直接、最易于理解的生命周期事件钩子是`onInit`和`onDestroy`。
- en: 'The `ngOnInit` method is called after the component data-bound properties have
    been checked for the first time, and `ngOnDestroy` will be called right before
    the component instance is destroyed by Angular. In our component hierarchy, we
    will implement both of these methods on the `user-info` class:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`ngOnInit`方法在组件数据绑定属性首次检查后被调用，`ngOnDestroy`将在组件实例被Angular销毁之前被调用。在我们的组件层次结构中，我们将在`user-info`类上实现这两种方法：'
- en: '[PRE16]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now, open the browser and make sure the console is visible. You should see
    four logs that indicate that each of the user components have been initialized:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，打开浏览器，确保控制台可见。您应该看到四个日志，指示每个用户组件已被初始化：
- en: '![OnInit and OnDestroy](../Images/image00112.jpeg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![OnInit and OnDestroy](../Images/image00112.jpeg)'
- en: 'Now, click on the button to pull new data from the server. You should see four
    logs for each user information component that have been destroyed, and three logs
    for the new components that are created for the new data:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，点击按钮从服务器拉取新数据。您应该看到每个已被销毁的用户信息组件的四个日志，并为新数据创建的新组件的三个日志：
- en: '![OnInit and OnDestroy](../Images/image00113.jpeg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![OnInit and OnDestroy](../Images/image00113.jpeg)'
- en: The `OnInit` method is a good place to run code after the components have been
    initialized (data bounded properties have been resolved), and before one of the
    child components has been initialized. `OnDestroy` is a good place for cleanup
    or persistence code for the component's state just before it is ripped from the
    DOM.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`OnInit`方法是在组件初始化后（数据绑定属性已解析）和一个子组件初始化之前运行代码的好地方。`OnDestroy`是在组件从DOM中移除之前进行清理或持久化代码的好地方。'
- en: OnChanges
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OnChanges
- en: '`OnChanges` has a method named `ngOnChanges` that will be called after all
    the data-binding properties have been checked. Angular passes a `change` object
    that contains a key named after the property that changed, and an instance of
    a `SimpleChange` object. The `SimpleChange` object contains the previous value
    and the current value. Let''s implement this method in our `user-info` component:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`OnChanges`有一个名为`ngOnChanges`的方法，它将在检查所有数据绑定属性后被调用。Angular传递一个包含以更改的属性命名的键和一个`SimpleChange`对象实例的`change`对象。`SimpleChange`对象包含先前的值和当前的值。让我们在我们的`user-info`组件中实现这个方法：'
- en: '[PRE17]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In the browser console, we will see four logs:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器控制台中，我们将看到四个日志：
- en: '![OnChanges](../Images/image00114.jpeg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![OnChanges](../Images/image00114.jpeg)'
- en: If you are familiar with Angular 1.x, you can think of the `OnChange` method
    as a `$scope.$watch` function. It will be called any time the data changes, and
    contains both the new and the old values.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您熟悉Angular 1.x，您可以将`OnChange`方法视为`$scope.$watch`函数。它将在数据更改时被调用，并包含新值和旧值。
- en: Other life cycle events
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他生命周期事件
- en: 'Besides the `init`, `changes`, and `destroy` events, we can hook four more
    component life cycle events:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`init`、`changes`和`destroy`事件之外，我们还可以挂接四个组件生命周期事件：
- en: '`AfterContentInit`: This is called after the component''s content is fully
    initialized'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AfterContentInit`：在组件的内容完全初始化后调用'
- en: '`AfterContentChecked`: This is called after each time the component is checked'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AfterContentChecked`：在每次组件被检查后调用'
- en: '`AfterViewInit`: This is called after the component''s view has initialized'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AfterViewInit`：在组件的视图初始化后调用'
- en: '`AfterViewChecked`: This is called after the component''s view has been checked'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AfterViewChecked`：在组件的视图被检查后调用'
- en: Each of them can be implemented in the same way as the previous examples.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 它们每一个都可以像之前的例子一样实现。
- en: Summary
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Through this chapter, we took everything we have learned so far about components
    and built a useful accordion widget that is composed of four components. An Angular
    2 application is a collection of dynamic components that communicate with each
    other using properties as an input, and events as output. We can hook into each
    important life cycle of a component, for example, when a component is initialized
    or destroyed, and run our own logic.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本章，我们将迄今为止学到的关于组件的一切都应用到了一个有用的手风琴小部件中，该小部件由四个组件组成。Angular 2应用程序是一组动态组件，它们使用属性作为输入，使用事件作为输出来相互通信。我们可以挂接到组件的每个重要生命周期，例如，当组件被初始化或销毁时，并运行我们自己的逻辑。
