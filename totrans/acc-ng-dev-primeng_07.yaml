- en: '*Chapter 11*: Migrating Your Angular Application from View Engine to Ivy'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Several Angular feature releases are published every year. Updating our Angular
    application requires knowledge of the Angular update process, especially when
    migrating from Angular View Engine to Angular Ivy as there are many differences,
    most of which are managed by automated Angular migrations.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will learn about the steps required to update an Angular
    application, following the *Angular Update Guide's* instructions, how to manage
    Angular's third-party dependencies, the most useful parameters for the `ng update`
    command, how the most important automated Angular Ivy migrations change our applications,
    and how both automated and manual recommended but optional Angular Ivy migrations
    are applied.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Learning the Angular update process
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performing automated Angular Ivy migrations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performing manual Angular Ivy migrations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The migrations discussed in this chapter apply to applications at or higher
    than the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Angular Ivy version 12.1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TypeScript version 4.2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make sure you have a recent version of Angular CLI installed globally so that
    you can run the `ng update` command from a terminal.
  prefs: []
  type: TYPE_NORMAL
- en: Learning the Angular update process
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Angular CLI gives us a structured approach to update Angular-specific parts
    of our application. One type of Angular schematics is **migration**, which modifies
    our application code to comply with breaking changes. Major and minor version
    releases of Angular often come with migration schematics.
  prefs: []
  type: TYPE_NORMAL
- en: It is recommended to follow the update process, one major version release at
    a time. For example, if our application is currently using Angular View Engine
    version 8.2, we update it to Angular Ivy version 9.1 and verify that all aspects
    are behaving as expected before we take the next step to update from Angular version
    9.1 to version 10.2, and so on until we reach the Angular release version we have
    planned to update to.
  prefs: []
  type: TYPE_NORMAL
- en: The fewer update steps we perform at a time, the easier it is to identify what
    went wrong when something did not go as planned.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will first learn about the Angular Update Guide, an official
    web app listing step-by-step instructions. After that, we will discuss Angular's
    third-party dependencies and how their releases affect our Angular application.
  prefs: []
  type: TYPE_NORMAL
- en: The Angular Update Guide
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An important tool for the Angular update process is the Angular Update Guide.
    Located at [https://update.angular.io](https://update.angular.io), this web app
    presents step-by-step instructions for updating our Angular application.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use the Angular Update Guide, we first choose the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Which Angular version we are currently using
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Which Angular version we want to update to
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The complexity of our application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Whether our application is a hybrid AngularJS and Angular application using
    `ngUpgrade`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Whether we are using Angular Material
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Even if we are in a hurry, we should select **Advanced** as our **App complexity**
    and go through all available instructions to make sure we do not miss any recommended
    migration steps.
  prefs: []
  type: TYPE_NORMAL
- en: 'After choosing the option that matches our application, we are presented with
    a checklist of instructions, divided into the following sections:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Before updating**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**During the update**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**After the update**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is not always clear what makes a difference regarding whether an instruction
    is listed in the **During the update** or **After the update** sections. For a
    pleasant update process, we make sure to follow the instructions in the **Before
    updating** section before we follow the instructions in the **During the update**
    section.
  prefs: []
  type: TYPE_NORMAL
- en: The instructions in the **During the update** section must be followed in the
    order they are listed in because update and migration commands often depend on
    each other.
  prefs: []
  type: TYPE_NORMAL
- en: The instructions in the `ng update` command but are not listed in the Angular
    Update Guide. Similarly, some recommended automated and manual migrations are
    listed in the Angular documentation but not in the Angular Update Guide.
  prefs: []
  type: TYPE_NORMAL
- en: Managing Angular dependencies
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Outside of official Angular packages, Angular only has a few dependencies.
    The following package dependencies are listed in Angular''s `package.json` files:'
  prefs: []
  type: TYPE_NORMAL
- en: '**RxJS**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**tslib**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Zone.js**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Historically, the versions of these package dependencies are managed by the
    Angular update process. However, migrations for breaking changes are not always
    available. For example, RxJS has no migrations planned for updating from version
    6.x to version 7.x.
  prefs: []
  type: TYPE_NORMAL
- en: Zone.js
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At the time of writing, Zone.js is still in a prerelease version. Every minor
    prerelease version contains breaking changes. Typically, migrations are not necessary
    for our Angular application because we do not use Zone.js directly. Instead, the
    `NgZone` API wraps Zone.js.
  prefs: []
  type: TYPE_NORMAL
- en: However, we import Zone.js in several of our application files, and Zone.js
    version 0.11.1 changes its import paths. Angular version 11 offers an automated
    migration to update Zone.js.
  prefs: []
  type: TYPE_NORMAL
- en: TypeScript
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: TypeScript does not follow semantic versioning. Every minor release version
    contains breaking changes. No automated migrations are available for TypeScript
    so if our application outputs compilation errors after updating Angular, we must
    refer to the *Breaking Changes* section of TypeScript's official announcement
    blog post.
  prefs: []
  type: TYPE_NORMAL
- en: RxJS
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The RxJS versions officially supported by Angular can be read by inspecting
    the `dependencies` property of the `@angular/core` `package.json` file. Angular
    versions 9.0–10.0 officially support RxJS versions 6.5 and 6.6 while Angular versions
    10.1–12.1 only have official support for RxJS version 6.6\. Angular version 12.2
    has opt-in support for RxJS version 7.0 and later minor versions.
  prefs: []
  type: TYPE_NORMAL
- en: Node.js
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Angular CLI usually has official support for two major versions of Node.js.
    Unstable (odd) major version Node.js releases are not officially supported by
    Angular CLI. Angular CLI versions 9.0–11.2 have official support for Node.js 10.13
    and 12.11 or later minor versions. Angular version 12 removes support for Node.js
    10 but adds official support for Node.js 14.15 or later minor versions in addition
    to Node.js 12.14 or later minor versions.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we learned about the Angular Update Guide and how to manage
    Angular's dependencies. In the next section, we will learn about the `ng update`
    command and automated Angular Ivy migrations.
  prefs: []
  type: TYPE_NORMAL
- en: Performing automated Angular Ivy migrations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Angular CLI supports automated migrations for both Angular framework packages
    and third-party Angular libraries. In this section, we will learn how to make
    the most out of the `ng update` command. Finally, we will discuss important automated
    Angular Ivy migrations.
  prefs: []
  type: TYPE_NORMAL
- en: Making the most of the ng update command
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `ng update` command is used to update Angular-specific package dependencies,
    both Angular framework packages and third-party Angular libraries. The `ng update`
    command looks for automated migrations in the package bundle when updating to
    the specified package version.
  prefs: []
  type: TYPE_NORMAL
- en: 'To update Angular, the following command can be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This will update all the main Angular framework packages to the latest version
    as well as performing their automated migrations. Angular CLI is responsible for
    workspace migrations while the Angular Core package is responsible for migrations
    to Angular's runtime packages.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the *Learning the Angular update process* section, we recommended only updating
    one major version at a time. To specify, for example, Angular version 9, use the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This will update the main Angular framework packages to the latest version 9
    patch versions.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is possible to perform each migration in a separate commit by specifying
    the `--create-commits` parameter, as shown in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This option is recommended as it makes it easier to inspect the changes related
    to each migration or use Git to cherry-pick the automated migrations we want,
    or even revert a migration's changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we choose to revert or omit a migration through Git cherry-picking, we usually
    want to perform the migration manually. Alternatively, we can rerun a specific
    migration using the following command format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: We find the name of the migration in the message of the Git commits that are
    created when specifying the `--create-commits` parameter.
  prefs: []
  type: TYPE_NORMAL
- en: 'In some cases, optional migrations are available. For example, Angular version
    12 introduces an optional automated migration for making the `production` build
    configuration the default:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: As for when to run the main `ng update` command, we follow the Angular Update
    Guide's instructions as described in the *Learning the Angular update process*
    section.
  prefs: []
  type: TYPE_NORMAL
- en: For every migration run by the `ng update` command, we see a list of files affected
    by the migration – if any – before `Migration completed` is displayed.
  prefs: []
  type: TYPE_NORMAL
- en: Some migrations refer to a web page describing the migration. For example, why
    the change is needed in addition to code snippets with examples of code before
    and after running the migration. This is excellent information to review the changes
    made by the automated migration or to perform the migration steps manually.
  prefs: []
  type: TYPE_NORMAL
- en: Reviewing automated Angular Ivy migrations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's review some of the most important automated Angular Ivy migrations to
    understand their importance.
  prefs: []
  type: TYPE_NORMAL
- en: Angular workspace version 9 migration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Named `workspace-version-9`, this migration modifies build configurations so
    that the `aot` option is set to `true`, even in the default development build
    configuration. In fact, if we generate a new Angular Ivy workspace or application
    using Angular CLI 12, there is no `aot` option specified because its value is
    `true` by default.
  prefs: []
  type: TYPE_NORMAL
- en: This migration also changes the `include` property of `tsconfig.app.json` files
    to match the `"src/**/*.d.ts"` pattern.
  prefs: []
  type: TYPE_NORMAL
- en: Lazy loading syntax migration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This migration, named `lazy-loading-syntax`, changes string-based lazy loaded
    route paths to use dynamic `import` statements instead. For example, look at the
    following route configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'It is changed to the following by the migration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The string-based lazy loading route syntax is deprecated and must be avoided.
  prefs: []
  type: TYPE_NORMAL
- en: Static flag migration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Be careful with this migration named `migration-v9-dynamic-queries`. In Angular
    version 8, the required `static` option is added to `ViewChild` and `ContentChild`
    queries. In Angular version 9, the `static` option is made optional, defaulting
    to `false`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following Angular version 9 component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'In Angular View Engine version 7, before the static `option` was available,
    its view query properties would start out like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'After migrating to Angular View Engine version 8, we have the following view
    query properties because the `static` option is required:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'As you might be able to see, the Angular version 8 *static query migration*
    is good at guessing the best option for view query and content query properties.
    Queries for items nested in embedded views such as that created by a structural
    directive are converted to dynamic queries, that is, `{ static: false }.`'
  prefs: []
  type: TYPE_NORMAL
- en: 'When we migrate to Angular Ivy version 9, the `static` option is optional but
    defaults to `false`, so we have the following view query properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Dynamic queries automatically have the `static` option removed by the Angular
    version 9 *static flag migration*.
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: Query lists are not affected by the historic changes covered by this section
    because query lists are always dynamic.
  prefs: []
  type: TYPE_NORMAL
- en: Before migrating to Angular Ivy version 9, make sure to review your content
    and view queries. Refer to the *Static query migration guide* and *Dynamic queries
    flag migration* guides, which are still available in the Angular documentation
    at [https://angular.io/guide/static-query-migration](https://angular.io/guide/static-query-migration)
    and [https://angular.io/guide/migration-dynamic-flag](https://angular.io/guide/migration-dynamic-flag),
    respectively, as of Angular version 12.2.
  prefs: []
  type: TYPE_NORMAL
- en: async to waitForAsync migration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This migration, named `migration-v11-wait-for-async`, renames the `async` testing
    callback wrapper to `waitForAsync` to avoid confusion with `async`-`await`. The
    new name better explains what happens when we wrap a test case callback in this
    testing function.
  prefs: []
  type: TYPE_NORMAL
- en: '`waitForAsync` waits for all microtasks and macrotasks to finish before completing
    the wrapped test case. This is somewhat like injecting Jasmine and Jest''s `done`
    callback parameter and calling it after the final asynchronous side effect in
    a test case.'
  prefs: []
  type: TYPE_NORMAL
- en: Missing @Injectable and incomplete provider definition migration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This automated Angular version 9 migration named `migration-v9-missing-injectable`
    makes the following types of code changes:'
  prefs: []
  type: TYPE_NORMAL
- en: An `@Injectable` decorator is added to classes that are registered using class-based
    module providers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Incomplete Angular View Engine module providers are turned into value providers
    for the `undefined` value.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A class-based module provider can have one of the following formats:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: If `DashboardService` or `HttpWeatherService` do not have `Injectable` decorators
    applied, this migration adds an `Injectable` decorator to their class definitions.
  prefs: []
  type: TYPE_NORMAL
- en: 'A module provider using the following format is evaluated differently by Angular
    View Engine and Angular Ivy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Angular View Engine evaluates the provider as the following value provider:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Angular Ivy evaluates the provider as the following class provider:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that the preceding class provider is equivalent to the following class
    provider shorthand:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Because of that difference between provider evaluation, this migration changes
    incomplete Angular View Engine providers to value providers specifying the `undefined`
    value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Review all providers with the `useValue: undefined` part after this migration
    is run. This is most likely not the intent of our application.'
  prefs: []
  type: TYPE_NORMAL
- en: Optional migration to update Angular CLI workspace configurations to production
    mode by default
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Angular CLI version 12 generates project build configurations with `production`
    being the default configuration. The result of this is that we do not have to
    specify the `--configuration=production` parameter to the `ng build` command.
  prefs: []
  type: TYPE_NORMAL
- en: However, existing projects are not automatically migrated to use the production
    configuration by default. Use the optional migration named `production-by-default`
    to migrate existing projects to this new default setting. This is done primarily
    using the `defaultConfiguration` setting introduced by Angular version 12.
  prefs: []
  type: TYPE_NORMAL
- en: These are some of the most noteworthy, automated migrations to be aware of when
    updating from Angular View Engine to Angular Ivy. In the next section, we will
    discuss optional manual migrations to make sure our Angular Ivy application is
    in its best possible shape.
  prefs: []
  type: TYPE_NORMAL
- en: Performing manual Angular Ivy migrations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will walk through optional migrations that put our application
    on track for future Angular versions. We will discuss fine-tuning initial navigation,
    optimizing change detection with `NgZone`, and improving the type safety of our
    unit tests.
  prefs: []
  type: TYPE_NORMAL
- en: Managing initial navigation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following legacy values for the `initialNavigation` option for `RouterModule.forRoot`
    are removed by Angular Ivy version 11:'
  prefs: []
  type: TYPE_NORMAL
- en: '`true`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`false`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''legacy_enabled''`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''legacy_disabled''`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Angular Ivy version 11 also deprecates the `''enabled''` value but introduces
    the following new values:'
  prefs: []
  type: TYPE_NORMAL
- en: '`''enabledBlocking''`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''enabledNonBlocking''` (default)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''enabledBlocking''` is equivalent to `''enabled''` and is recommended for
    server-side rendering using Angular Universal. This value starts the initial navigation
    process before Angular creates an instance of the root component of our application
    but blocks bootstrapping of the root component until the initial navigation completes.'
  prefs: []
  type: TYPE_NORMAL
- en: The default `'enabledNonBlocking'` value starts the initial navigation after
    Angular has created an instance of the root component of our application but allows
    the root component to be bootstrapped before the initial navigation completes.
    This behavior is like the `true` value, which has now been removed.
  prefs: []
  type: TYPE_NORMAL
- en: '`''disabled''` is the third available, non-deprecated value. It disables the
    initial navigation process and defers to our application code to perform it by
    using the `Location` and `Router` services. This value should only be used for
    advanced use cases.'
  prefs: []
  type: TYPE_NORMAL
- en: Optimizing change detection by configuring NgZone
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we call the `PlatformRef#bootstrapModule` method—usually in our application's
    main file—we can specify both compiler and bootstrap options. Bootstrap options
    are not listed in the Angular documentation as of Angular version 12.2\. However,
    inline documentation is available.
  prefs: []
  type: TYPE_NORMAL
- en: 'Other than the traditional `ngZone` option, which allows us to disable `NgZone`
    entirely, the following two options are added by Angular Ivy:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ngZoneEventCoalescing`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ngZoneRunCoalescing`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They both accept a Boolean value that defaults to `false`. Both options optimize
    change detection for specific use cases by turning multiple change detection cycle
    requests in the same VM turn into a single operation, scheduled using an animation
    frame to synchronize change detection with the current frame rate.
  prefs: []
  type: TYPE_NORMAL
- en: Event coalescing (`ngZoneEventCoalsecing`) refers to native DOM event bubbling.
    For example, if multiple click event handlers are triggered by a single user click,
    change detection is only triggered once.
  prefs: []
  type: TYPE_NORMAL
- en: '`ngZoneRunCoalescing` manages the `NgZone#run` method being called multiple
    times in the same VM turn.'
  prefs: []
  type: TYPE_NORMAL
- en: It is a good default to enable both these options because they increase performance.
    However, they might change our application's behavior in certain edge cases, causing
    for example the *NG0100* error, `ExpressionChangedAfterItHasBeenCheckedError`,
    to be thrown in Angular development mode.
  prefs: []
  type: TYPE_NORMAL
- en: Because of this, take special care when enabling these bootstrap settings for
    our application.
  prefs: []
  type: TYPE_NORMAL
- en: Improving unit test type safety with TestBed.inject
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Angular Ivy introduces the static `TestBed.inject` method, which is a strongly
    typed method that replaces the weakly typed static `TestBed.get` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `TestBed.get` method returns a value of type `any`. In the following example,
    we see how this forces us to specify a type of annotation to the variable we store
    the returned dependency in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'When migrating to `TestBed.inject`, we can often omit the type annotation,
    as shown in the following equivalent code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'If the provided type is different from the provider token, we now must cast
    the returned dependency to `unknown` before casting it to the registered type,
    as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: It is worth noting that `TestBed.inject` is also stricter than `TestBed.get`
    in that it only accepts a provider token arguments of type `Type<T> | AbstractType<T>
    | InjectionToken<T>`, that is, a concrete class, an abstract class, or a dependency
    injection token.
  prefs: []
  type: TYPE_NORMAL
- en: This is different from `TestBed.get`, which supports a provider token of type
    `any`, for example a string, a number, or a symbol.
  prefs: []
  type: TYPE_NORMAL
- en: Avoid provider tokens that are not supported by `TestBed.inject` as they have
    been deprecated since Angular version 4, like the weakly typed `Injector#get`
    signature used for resolving dependencies at runtime.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed the Angular update process, including the *Angular
    Update Guide,* the `ng update` command, and managing Angular's third-party dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: We learned how to review certain important automated Angular Ivy migrations
    by going through simple code examples.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we considered several optional migrations, both automated and manual
    Angular Ivy migrations. We learned how to fine-tune the Angular router's initial
    navigation based on our application platform.
  prefs: []
  type: TYPE_NORMAL
- en: After that, we discussed two undocumented configuration settings for `NgZone`
    that optimize change detection by coalescing multiple requested change detection
    cycles into one for certain native events and use cases.
  prefs: []
  type: TYPE_NORMAL
- en: The final manual migration we discussed improves type safety in our unit tests
    by using the strongly typed static `TestBed.inject` method instead of the deprecated
    static `TestBed.get` method.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will explore the impact and limitations of the Angular
    Ahead-of-Time compiler, which is the default for applications in Angular Ivy.
  prefs: []
  type: TYPE_NORMAL
