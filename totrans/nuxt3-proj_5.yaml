- en: '5'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '5'
- en: Building a Personal Posts Space and Implementing Authentication
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建个人帖子空间并实现身份验证
- en: 'In this chapter of our Nuxt 3 guide, we focus on a hands-on project: building
    a personal space for users to post content, integrated with secure authentication.
    This chapter bridges the gap between frontend development using Vue and Nuxt and
    backend functionality provided by **Supabase**.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的 Nuxt 3 指南的本章中，我们专注于一个实战项目：为用户构建一个可以发布内容的个人空间，并集成安全的身份验证。本章架起了使用 Vue 和 Nuxt
    进行前端开发与由 **Supabase** 提供的后端功能之间的桥梁。
- en: We start by setting up **Supabase**, a backend service that simplifies user
    authentication. This foundation is crucial for our application’s security. Next,
    we integrate this service with Nuxt 3, ensuring that our frontend and backend
    communicate smoothly.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先设置 **Supabase**，这是一个简化用户身份验证的后端服务。这个基础对我们应用程序的安全性至关重要。接下来，我们将此服务与 Nuxt 3
    集成，确保我们的前端和后端能够顺畅通信。
- en: Our journey then moves to the user interface. We will design easy-to-use login
    and registration forms. This section is about making forms that look good and
    work well, using Nuxt UI and TailwindCSS.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们的旅程转向用户界面。我们将设计易于使用的登录和注册表单。本节是关于制作既美观又实用的表单，使用 Nuxt UI 和 TailwindCSS。
- en: The next part is about creating a secure login system. We will cover important
    security topics, like token-based authentication, to keep user data safe.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个部分是关于创建一个安全的登录系统。我们将涵盖重要的安全主题，如基于令牌的身份验证，以确保用户数据安全。
- en: The chapter concludes by teaching how to let users create and manage their own
    posts. This will give users a personal area in the application to share their
    thoughts.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章通过教授用户如何创建和管理自己的帖子来结束。这将使用户在应用程序中拥有一个个人区域来分享他们的想法。
- en: This chapter is a practical guide to combining frontend design with backend
    technology, making a secure, user-friendly web application. Let’s dive in!
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章是结合前端设计和后端技术的实用指南，打造一个安全、用户友好的网络应用程序。让我们深入探讨！
- en: 'In this chapter we’re going to cover the following main topics:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Setting Up Initial Supabase Project For User Authentication
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为用户身份验证设置初始 Supabase 项目
- en: Integrating Nuxt 3 with Supabase
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 Nuxt 3 与 Supabase 集成
- en: Designing Authentication UI and Validating Inputs
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计身份验证 UI 和验证输入
- en: Setting Up User Authentication with Supabase
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Supabase 设置用户身份验证
- en: Creating and Managing Personal User Posts
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和管理个人用户帖子
- en: Technical requirements
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The code files for this chapter can be found at [https://github.com/PacktPublishing/Nuxt-3-Projects/tree/main/chapter05](https://github.com/PacktPublishing/Nuxt-3-Projects/tree/main/chapter05)
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码文件可以在[https://github.com/PacktPublishing/Nuxt-3-Projects/tree/main/chapter05](https://github.com/PacktPublishing/Nuxt-3-Projects/tree/main/chapter05)找到
- en: The CiA video for this chapter can be found on [https://packt.link/AYK8X](https://packt.link/AYK8X)
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的 CiA 视频可以在[https://packt.link/AYK8X](https://packt.link/AYK8X)找到
- en: 'Essential Background: What is Supabase?'
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 必要背景：什么是 Supabase？
- en: Before we jump into the hands-on development of our project, it’s important
    to familiarize ourselves with Supabase and its capabilities, setting a strong
    groundwork for what we’re about to build.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们着手开发我们的项目之前，熟悉 Supabase 及其功能非常重要，这为我们即将构建的内容打下坚实的基础。
- en: '*Supabase Overview:* Supabase is an open-source Firebase alternative, offering
    a suite of tools to handle backend needs like databases, authentication, and real-time
    subscriptions. It uses PostgreSQL by default.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Supabase 概述:* Supabase 是一个开源的 Firebase 替代品，提供了一套处理后端需求（如数据库、身份验证和实时订阅）的工具。它默认使用
    PostgreSQL。'
- en: '*Database Management:* At its core, Supabase offers database services, allowing
    you to create, read, update, and delete data efficiently. We’ll use this feature
    to work on create user posts, update them, and delete them.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*数据库管理:* 在其核心，Supabase 提供数据库服务，允许您高效地创建、读取、更新和删除数据。我们将使用此功能来处理创建用户帖子、更新它们以及删除它们。'
- en: '*User Authentication:* It simplifies the process of managing users, handling
    everything from registration to login, and securing user data. Supabase supports
    various authentication methods, including email/password and third-party logins
    like Google or GitHub.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*用户身份验证:* 它简化了用户管理的过程，从注册到登录，以及保护用户数据。Supabase 支持多种身份验证方法，包括电子邮件/密码和第三方登录，如
    Google 或 GitHub。'
- en: '*Important Links:*'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '*重要链接:*'
- en: 'Before we start, here are some essential resources from Supabase that we’ll
    be using extensively. These links provide direct access to various tools within
    the Supabase platform. Each link corresponds to a specific page of the Supabase
    dashboard we will interact with:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始之前，这里有一些来自 Supabase 的基本资源，我们将广泛使用。这些链接提供了直接访问 Supabase 平台内各种工具的途径。每个链接都对应于我们将与之交互的
    Supabase 仪表板的一个特定页面：
- en: '**SQL** **Editor**: [https://supabase.com/dashboard/project/_/sql](https://supabase.com/dashboard/project/_/sql)'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SQL** **编辑器**：[https://supabase.com/dashboard/project/_/sql](https://supabase.com/dashboard/project/_/sql)'
- en: '**Table** **Editor**: [https://supabase.com/dashboard/project/_/editor](https://supabase.com/dashboard/project/_/editor%0D)'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**表格** **编辑器**：[https://supabase.com/dashboard/project/_/editor](https://supabase.com/dashboard/project/_/editor%0D)'
- en: '**API** **Settings:** [https://supabase.com/dashboard/project/_/settings/api](https://supabase.com/dashboard/project/_/settings/api)'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**API** **设置**：[https://supabase.com/dashboard/project/_/settings/api](https://supabase.com/dashboard/project/_/settings/api)'
- en: '**Auth** **Providors:** [https://supabase.com/dashboard/project/_/auth/providers](https://supabase.com/dashboard/project/_/auth/providers)'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**认证** **提供者**：[https://supabase.com/dashboard/project/_/auth/providers](https://supabase.com/dashboard/project/_/auth/providers)'
- en: 'These links are your direct line to the tools we’ll employ throughout this
    chapter. Now let’s proceed to the foundational step: setting up a new Supabase
    project.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这些链接是您通往我们将在本章中使用的工具的直接途径。现在让我们继续到基础步骤：设置一个新的 Supabase 项目。
- en: Setting Up Initial Supabase Project For User Authentication
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为用户身份验证设置初始 Supabase 项目
- en: To start building our Nuxt 3 application, the first thing we need to do is to
    initialize a new Supabase project to set up our database and API.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始构建我们的 Nuxt 3 应用程序，我们首先需要初始化一个新的 Supabase 项目，以设置我们的数据库和 API。
- en: 'After creating a new Supabase Account, Navigate to: [https://supabase.com/dashboard/projects](https://supabase.com/dashboard/projects)
    and hit `My Space`. After entering your project name and a secure database password,
    Supabase will start setting up your new database.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建新的 Supabase 账户后，导航到：[https://supabase.com/dashboard/projects](https://supabase.com/dashboard/projects)
    并点击 `我的空间`。在输入项目名称和安全的数据库密码后，Supabase 将开始设置您的新数据库。
- en: Setting Up the Database Schema
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置数据库模式
- en: Let’s prepare the database schema. In the Supabase Dashboard, head to the `profiles`
    table connected to user authentication and includes a trigger to automatically
    generate profile entries when new users sign up.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们准备数据库模式。在 Supabase 仪表板中，转到与用户身份验证连接的 `profiles` 表，并包括一个触发器，当新用户注册时自动生成资料条目。
- en: '![Figure 5.1: Supabase User Management Starter](img/B19760_05_1.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.1：Supabase 用户管理入门](img/B19760_05_1.jpg)'
- en: 'Figure 5.1: Supabase User Management Starter'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.1：Supabase 用户管理入门
- en: You’ll find a pre-written query. Click **Run** to execute it and establish our
    initial table. Alternatively, you could write a custom query to build the database,
    but since our focus is on integrating with Nuxt, we’ll skip this step.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 您会找到一个预先编写的查询。点击 **运行** 执行它并建立我们的初始表。或者，您也可以编写一个自定义查询来构建数据库，但由于我们的重点是集成 Nuxt，我们将跳过这一步。
- en: 'Now, move to the `profile` created through the “User Management Starter.” Let’s
    proceed to create a `posts` table and this time we’ll create it using Supabase
    UI. click the “create new Table” button, name it `posts`, and configure the Columns
    as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，转到通过“用户管理入门”创建的 `profile`。让我们继续创建一个 `posts` 表，这次我们将使用 Supabase UI 来创建它。点击“创建新表”按钮，将其命名为
    `posts`，并按以下配置列：
- en: '![Figure 5.2: posts table columns schema](img/B19760_05_2.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.2：posts 表格列模式](img/B19760_05_2.jpg)'
- en: 'Figure 5.2: posts table columns schema'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.2：posts 表格列模式
- en: 'Here is the overview:'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这里是概述：
- en: The system automatically adds `id,` `created_at` columns.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统自动添加 `id`、`created_at` 列。
- en: We’ve added a required `title` column.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们添加了一个必需的 `title` 列。
- en: There’s also a `content` column, which is optional. You can make it nullable
    by toggling the option in the configuration menu.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 还有一个可选的 `content` 列。您可以通过在配置菜单中切换选项使其为可空。
- en: '`author_id` serves as a foreign key linking to the user profile. Clicking on
    the link displays its current settings, including the reference table and column.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`author_id` 作为外键链接到用户资料。点击链接将显示其当前设置，包括引用表和列。'
- en: '![Figure 5.3: author_id foreign key](img/B19760_05_3.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.3：author_id 外键](img/B19760_05_3.jpg)'
- en: 'Figure 5.3: author_id foreign key'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.3：author_id 外键
- en: With your database tables ready, the next step is to get the API keys. These
    keys let your application talk to the Supabase API. Find the `project url`, and
    `anon` key from this page.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的数据库表准备就绪后，下一步是获取 API 密钥。这些密钥让您的应用程序能够与 Supabase API 通信。从该页面找到“项目 URL”和“anon”密钥。
- en: Finally, Supabase enables email confirmation by default, so that the users will
    need to confirm their email address before signing in for the first time. For
    Testing purposes, we’ll disable this feature by navigating to **Auth Providors**
    page, locate the email provider setting, then toggle the “Confirm Email” switch
    to off.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，Supabase 默认启用电子邮件确认功能，因此用户在首次登录前需要确认他们的电子邮件地址。为了测试目的，我们将通过导航到 **认证提供者** 页面，找到电子邮件提供者设置，然后关闭“确认电子邮件”开关来禁用此功能。
- en: '![Figure 5.4: disabling confirm email option](img/B19760_05_4.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.4：禁用确认电子邮件选项](img/B19760_05_4.jpg)'
- en: 'Figure 5.4: disabling confirm email option'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.4：禁用确认电子邮件选项
- en: With our Supabase setup complete, we now turn to integrating it with Nuxt 3\.
    In the following section, we’ll create a new Nuxt application and integrate it
    with Supabse using a module called “`@nuxtjs/supabase`”
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成 Supabase 设置后，我们现在转向将其与 Nuxt 3 集成。在下一节中，我们将创建一个新的 Nuxt 应用程序，并使用名为 “`@nuxtjs/supabase`”
    的模块将其与 Supabase 集成。
- en: Integrating Nuxt 3 with Supabase
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 Nuxt 3 与 Supabase 集成
- en: With our Supabase setup now in place, it’s time to turn our attention to how
    we can seamlessly integrate this backend with our Nuxt 3 application
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置了 Supabase，是时候关注如何无缝地将这个后端与我们的 Nuxt 3 应用程序集成。
- en: Creating a New Nuxt 3 Project with Supabase Integration
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Supabase 集成创建新的 Nuxt 3 项目
- en: 'Start by creating a new Nuxt 3 project. Open your terminal and run:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建一个新的 Nuxt 3 项目。打开你的终端并运行：
- en: '[PRE0]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, create a `.env` file in your project root and add your Supabase URL and
    anon key:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在项目根目录中创建一个 `.env` 文件，并添加您的 Supabase URL 和 anon 密钥：
- en: '[PRE1]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Replace `"YOUR_SUPABASE_URL"` and `"YOUR_SUPABASE_ANON_KEY"` with the actual
    values you copied from your Supabase project.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `"YOUR_SUPABASE_URL"` 和 `"YOUR_SUPABASE_ANON_KEY"` 替换为您从 Supabase 项目中复制的实际值。
- en: Overriding Authentication Routes
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 覆盖认证路由
- en: In the default configuration, Supabase uses the `/login` route for user login
    and automatically redirects unauthenticated (or anonymous) users to this route.
    However, to tailor our application’s navigation flow and URL structure, we can
    configure these authentication routes in Nuxt 3.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在默认配置中，Supabase 使用 `/login` 路由进行用户登录，并自动将未认证（或匿名）用户重定向到该路由。然而，为了定制我们应用程序的导航流程和
    URL 结构，我们可以在 Nuxt 3 中配置这些认证路由。
- en: 'To customize the behavior of our authentication routes, we need to make adjustments
    in the `nuxt.config.ts` file. Specifically, by adding `supabase` object with configuration
    as follows:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 要自定义认证路由的行为，我们需要在 `nuxt.config.ts` 文件中进行调整。具体来说，通过添加配置如下所示的 `supabase` 对象：
- en: '[PRE2]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Let’s discuss every change:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们讨论每一个更改：
- en: We’ve changed the default login route from `/login` to `/auth/login`
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们已将默认登录路由从 `/login` 更改为 `/auth/login`
- en: '`callback` option is left empty. This is because callback handling is often
    associated with third-party providers, which we’re not covering at this stage.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`callback` 选项留空。这是因为回调处理通常与第三方提供者相关联，而我们目前不涉及这一阶段。'
- en: '`exclude` option is set to `[''/auth/*'']`. This pattern means all routes under
    the `/auth/` path, like `/auth/login` and `/auth/signup`, are accessible to anonymous
    users. This setup is advantageous, especially when planning to expand our authentication
    pages in the future (e.g., adding password reset or recovery pages) without needing
    to update the exclude option each time.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`exclude` 选项设置为 `[''/auth/*'']`。这个模式意味着 `/auth/` 路径下的所有路由，如 `/auth/login` 和
    `/auth/signup`，都对匿名用户可访问。这种设置特别有利，尤其是在计划将来扩展我们的认证页面（例如，添加密码重置或恢复页面）时，无需每次都更新排除选项。'
- en: By configuring these settings, we ensure that our application’s authentication
    flow is both user-friendly and scalable, ready to accommodate additional features
    as our project grows.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 通过配置这些设置，我们确保我们的应用程序认证流程既用户友好又可扩展，准备好随着项目的增长而容纳更多功能。
- en: With our authentication routes now customized, let’s move on to designing the
    user interface for authentication and implementing input validation.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经自定义了认证路由，接下来让我们设计认证的用户界面并实现输入验证。
- en: Authentication UI and Validating Inputs
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 认证 UI 和验证输入
- en: To enhance the user experience of our authentication process, we’ll first install
    and configure some essential modules for our Nuxt 3 project.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 为了增强我们认证过程的用户体验，我们首先将为我们的 Nuxt 3 项目安装和配置一些必要的模块。
- en: Installing Required Modules
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装所需模块
- en: 'Open your terminal and install `@nuxtjs/google-fonts` as usual, and `@nuxt/ui`
    as we learned in the previous chapter:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 打开你的终端，像往常一样安装 `@nuxtjs/google-fonts`，以及我们在上一章中学到的 `@nuxt/ui`：
- en: '[PRE3]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'These commands will add Google Fonts and Nuxt UI to our project. Next, we need
    to update our `nuxt.config.ts` to include these modules and set some additional
    configurations:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这些命令将添加 Google Fonts 和 Nuxt UI 到我们的项目中。接下来，我们需要更新我们的 `nuxt.config.ts` 以包括这些模块并设置一些额外的配置：
- en: '[PRE4]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Here, the `app` configuration sets the title of our application to “My Space.”
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`app` 配置将我们应用程序的标题设置为“我的空间。”
- en: 'To further tailor our UI, create an `app.config.ts` file to update Nuxt UI’s
    primary color and set default properties for Nuxt UI components:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进一步定制我们的 UI，创建一个 `app.config.ts` 文件来更新 Nuxt UI 的主颜色并设置 Nuxt UI 组件的默认属性：
- en: '[PRE5]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As with previous chapters, don’t forget to include the `tailwind.config.ts`
    in your project. This file is crucial for customizing TailwindCSS to fit the styling
    needs of our application.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 与前几章一样，别忘了在你的项目中包含 `tailwind.config.ts`。此文件对于定制 TailwindCSS 以满足我们应用程序的样式需求至关重要。
- en: Our next task is to create effective layouts for the login and signup pages.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们下一个任务是创建登录和注册页面的有效布局。
- en: Setting Up Auth Pages
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置认证页面
- en: Create empty layout `default.vue` in the `/layouts` directory. This layout will
    be utilized later in the project.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `/layouts` 目录中创建一个空的布局 `default.vue`。这个布局将在项目中的后续部分被使用。
- en: '[PRE6]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In the same directory, create `auth.vue` layout. This layout will be specifically
    used for authentication-related pages like login and signup:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在相同的目录中创建 `auth.vue` 布局。这个布局将专门用于与登录和注册等认证相关的页面：
- en: '[PRE7]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This layout divides the screen into two columns on medium and larger screens,
    with one column for an image (provided in the repository) and the other for the
    form.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 此布局在中等和更大屏幕上将屏幕分为两列，一列用于图像（由存储库提供），另一列用于表单。
- en: 'Next, Override the `app.vue` to specify that we’ll be using layouts and pages:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，覆盖 `app.vue` 以指定我们将使用布局和页面：
- en: '[PRE8]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Then, create a `/pages/auth/` directory and add a `login.vue` page inside it.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在 `/pages/auth/` 目录中创建一个 `login.vue` 页面。
- en: '[PRE9]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The page Begin with a simple card layout that includes a title and a navigation
    link to the signup page. Then we’ll use Nuxt UI components like `UForm`, `UFormGroup`,
    and `UInput` for the form elements, which are pre-styled and help in input validation:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 页面以一个简单的卡片布局开始，包括标题和导航链接到注册页面。然后我们将使用 Nuxt UI 组件如 `UForm`、`UFormGroup` 和 `UInput`
    为表单元素，这些组件预先样式化并有助于输入验证：
- en: '[PRE10]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `icon="i-heroicons-at-symbol"` in Nuxt UI represents an icon from the Heroicons
    collection. Following the pattern `i-{collection_name}-{icon_name}`, it is easy
    to connect any icon collection from [https://icones.js.org/](https://icones.js.org/%20)
    into Nuxt UI.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Nuxt UI 中的 `icon="i-heroicons-at-symbol"` 代表 Heroicons 收集中的图标。按照 `i-{collection_name}-{icon_name}`
    的模式，它很容易将任何图标集合从 [https://icones.js.org/](https://icones.js.org/%20) 连接到 Nuxt
    UI。
- en: 'Finally, define the layout and set up the reactive state for user data:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，定义布局并为用户数据设置响应式状态：
- en: '[PRE11]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'You should now see a layout for the login page like this:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在应该看到一个像这样的登录页面布局：
- en: '![0Figure 5.5: Login Page Layout](img/B19760_05_5.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![0图 5.5：登录页面布局](img/B19760_05_5.jpg)'
- en: '0Figure 5.5: Login Page Layout'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 0图 5.5：登录页面布局
- en: 'In a similar way, create `signup.vue` page that contains an extra field called
    for password confirmation:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 以类似的方式，创建包含额外字段（密码确认）的 `signup.vue` 页面：
- en: '[PRE12]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'And don’t forget to add it to `user` ref:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 并且别忘了将其添加到 `user` 引用：
- en: '[PRE13]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Now that we have our authentication UI in place, let’s enhance it with input
    validation using **Joi**
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置了认证 UI，让我们使用 **Joi** 来增强输入验证：
- en: Using Joi for Input Validation
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Joi 进行输入验证
- en: 'The `UForm` component in Nuxt UI offers a powerful feature through its `schema`
    prop. This prop allows you to integrate a validation schema from libraries like
    **Joi** or **Yup**, providing a way to enforce specific validation rules on your
    form’s state. For our example, we’ll utilize **Joi** to create our validation
    schemas. You can read more about Joi from the official website: [https://joi.dev/api/](https://joi.dev/api/%0D)'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: Nuxt UI 中的 `UForm` 组件通过其 `schema` 属性提供强大的功能。此属性允许您从像 **Joi** 或 **Yup** 这样的库中集成验证模式，为您的表单状态提供强制特定验证规则的方式。在我们的示例中，我们将使用
    **Joi** 创建我们的验证模式。您可以从官方网站了解更多关于 Joi 的信息：[https://joi.dev/api/](https://joi.dev/api/%0D)
- en: 'Begin by adding Joi to your project:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 首先向你的项目中添加 Joi：
- en: '[PRE14]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Then in the `login.vue` script, Define a Joi validation schema for the login
    form:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在 `login.vue` 脚本中，定义登录表单的 Joi 验证模式：
- en: '[PRE15]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This schema ensures that the email is a valid email and filled out. Also, we
    ensure that the password is at least 6 characters long. We used `{ tlds: false
    }` to disable the built-it TLD Validation from Joi. In order to Implement the
    schema in the form component. We have to adjust it as follows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '此模式确保电子邮件是有效的电子邮件并已填写。我们还确保密码至少有 6 个字符长。我们使用了 `{ tlds: false }` 来禁用 Joi 内置的
    TLD 验证。为了在表单组件中实现该模式，我们必须将其调整如下：'
- en: '[PRE16]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The `schema` prop validates the `user` state according to the defined Joi schema.
    Try testing the validation by leaving the email input field empty and moving focus
    away. An error message should appear beneath the input field:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`schema` 属性根据定义的 Joi 模式验证 `user` 状态。通过将电子邮件输入字段留空并移开焦点来测试验证。应该在输入字段下方出现错误消息：'
- en: '![Figure 5.6: input validation with Joi and Nuxt UI](img/B19760_05_6.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.6：使用 Joi 和 Nuxt UI 进行输入验证](img/B19760_05_6.jpg)'
- en: 'Figure 5.6: input validation with Joi and Nuxt UI'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.6：使用 Joi 和 Nuxt UI 进行输入验证
- en: 'The signup page will have a similar validation for email and password. Additionally,
    we’ll add a complex validation for password confirmation:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 注册页面将对电子邮件和密码进行类似的验证。此外，我们还将添加一个复杂的密码确认验证：
- en: '[PRE17]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Here, the `passwordConfirm` field uses `Joi.ref(''password'')` to ensure it
    matches the password field. The `` .messages({ ''any.only'': \passwords don''t
    match` })` `` part customizes the error message, making it clear and user-friendly.
    When the passwords don’t match.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '在这里，`passwordConfirm` 字段使用 `Joi.ref(''password'')` 确保它与密码字段匹配。` .messages({
    ''any.only'': ''passwords don''t match'' })` 部分自定义了错误消息，使其清晰且用户友好。当密码不匹配时。'
- en: With our input validation set up, the next step is to integrate Supabase’s login
    and signup functions.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的输入验证设置完成后，下一步是集成 Supabase 的登录和注册功能。
- en: Setting Up User Authentication with Supabase
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 Supabase 用户认证
- en: Now, let’s focus on integrating Supabase’s authentication capabilities, using
    their straightforward login and signup functions to manage user access in our
    application.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们专注于集成 Supabase 的认证功能，使用他们直接的登录和注册功能来管理我们应用程序的用户访问。
- en: The `useSupabaseClient` composable in Nuxt 3 is a gateway to the Supabase API,
    facilitating seamless communication between your Vue application and the Supabase
    services. Powered by `supabase-js`, it provides access to the Supabase client,
    which is initialized using the `SUPABASE_KEY` from your .env file. This client
    connects to the database.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: Nuxt 3 中的 `useSupabaseClient` 组合式是访问 Supabase API 的网关，它促进了您的 Vue 应用程序与 Supabase
    服务之间的无缝通信。由 `supabase-js` 驱动，它提供了对 Supabase 客户端的访问，该客户端使用 `.env` 文件中的 `SUPABASE_KEY`
    初始化。此客户端连接到数据库。
- en: Creating the Signup Function
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建注册函数
- en: 'Inside `signup.vue` script, get a Supabase instance using:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `signup.vue` 脚本内部，使用以下方式获取 Supabase 实例：
- en: '[PRE18]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This instance will be used to make requests to Supabase, particularly for user
    authentication functions like `signup`, and `signInWithPassword`.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 此实例将用于向 Supabase 发送请求，特别是用于用户认证功能，如 `signup` 和 `signInWithPassword`。
- en: 'Next create an `onSubmit` function to handle the signup process:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来创建一个 `onSubmit` 函数来处理注册过程：
- en: '[PRE19]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Here is the code breakdown:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是代码分解：
- en: Sets `loading` to `true`, indicating the start of an asynchronous operation.
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 `loading` 设置为 `true`，表示异步操作的开始。
- en: Calls the `signUp` method from the Supabase authentication API. This is where
    we interact with Supabase to register a new user, extracting email and password
    from `user` ref.
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 Supabase 认证 API 调用 `signUp` 方法。这是我们与 Supabase 交互以注册新用户的地方，从 `user` 引用中提取电子邮件和密码。
- en: Checks if there’s an error from the Supabase signup process, throws it to be
    caught in the catch block.
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查 Supabase 注册过程中是否有错误，将其抛出到 `catch` 块中。
- en: Logs any error that occurs during the signup process (for testing).
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 记录注册过程中发生的任何错误（用于测试）。
- en: Setting loading back to false
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将加载状态重置为 false
- en: This function effectively manages the signup process, interacting with Supabase’s
    authentication API to register users. It handles the entire flow from sending
    the request to processing responses and errors.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数有效地管理注册过程，与 Supabase 的认证 API 交互以注册用户。它处理从发送请求到处理响应和错误的整个流程。
- en: 'To test error handling, temporarily remove the `schema` prop from `UForm` and
    try submitting an empty form. an error response should be printed in the devtools
    console:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试错误处理，暂时从 `UForm` 中移除 `schema` 属性，并尝试提交一个空表单。应该在开发工具控制台中打印出错误响应：
- en: '![Figure 5.7: Supabase Signup Error](img/B19760_05_7.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.7：Supabase 注册错误](img/B19760_05_7.jpg)'
- en: 'Figure 5.7: Supabase Signup Error'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.7：Supabase 注册错误
- en: Continuing from where we left off in the signup process, let’s enhance our error
    handling by introducing Nuxt UI Notifications. These notifications provide a more
    user-friendly way to display messages, such as errors, in a toast notification
    format.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 从我们离开的注册过程继续，让我们通过引入 Nuxt UI 通知来增强错误处理。这些通知以更用户友好的方式显示消息，如错误，以提示通知格式。
- en: 'Include the `UNotifications` component in your `app.vue`. This is a global
    setup, allowing you to display notifications anywhere in your app:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的 `app.vue` 中包含 `UNotifications` 组件。这是一个全局设置，允许你在应用的任何位置显示通知：
- en: <template>
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '`<template>`'
- en: '[PRE20]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The `useToast` composable from Nuxt UI allows you to easily add toast notifications
    to your application. We can get a toaster instance by adding the following line
    to `signup.vue` script:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: Nuxt UI 的 `useToast` 组合式允许你轻松地将提示通知添加到你的应用程序中。我们可以在 `signup.vue` 脚本中添加以下行来获取吐司实例：
- en: '[PRE21]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now let’s modify the `catch` block of your signup function to use this composable
    for displaying error messages:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们修改注册函数的 `catch` 块以使用此组合式来显示错误消息：
- en: '[PRE22]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Here, `toast.add` is used to display a toast notification. We set the color
    to ‘red’, indicating that it’s an error message. Try submitting an empty form
    to trigger a validation error. You should see a red toast notification displaying
    the error message:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，使用 `toast.add` 显示提示通知。我们将颜色设置为‘红色’，表示这是一个错误消息。尝试提交一个空表单以触发验证错误。你应该会看到一个显示错误消息的红色提示通知：
- en: '![Figure 5.8: Nuxt UNotification component](img/B19760_05_8.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.8：Nuxt UNotification 组件](img/B19760_05_8.jpg)'
- en: 'Figure 5.8: Nuxt UNotification component'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.8：Nuxt UNotification 组件
- en: This visual feedback is immediate and clear, making it easier for users to understand
    and react to errors.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 这种视觉反馈是即时且清晰的，使用户更容易理解和反应错误。
- en: 'Continuing with our signup functionality, let’s add a success toast notification
    and set up navigation to the homepage upon successful signup. In the `onSubmit`
    function, update the try block to sign in the user using Supabase after successful
    registration:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 继续我们的注册功能，让我们添加一个成功提示通知，并在成功注册后设置导航到主页。在 `onSubmit` 函数中，更新 try 块以在成功注册后使用 Supabase
    登录用户：
- en: '[PRE23]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Don’t forget to revert the `schema` prop in the `UForm` to enable validation
    again.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记将 `UForm` 中的 `schema` 属性重置以再次启用验证。
- en: 'It’s time for testing! First, create a simple `index.vue` page that contains
    the following:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候进行测试了！首先，创建一个简单的 `index.vue` 页面，包含以下内容：
- en: '[PRE24]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Upon filling correct information and achieving a successful signup, a welcome
    toast should be shown, and you should be redirected to the homepage:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在填写正确信息并成功注册后，应显示欢迎提示，并将你重定向到主页：
- en: '![Figure 5.9: index page](img/B19760_05_9.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.9：首页](img/B19760_05_9.jpg)'
- en: 'Figure 5.9: index page'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.9：首页
- en: To ensure that the authentication flow is working, open `http://localhost:3000/`
    in a private window. You should be automatically redirected to`'auth/login/` due
    to Nuxt Supabase’s built-in middleware, which checks user authentication status.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保身份验证流程正常工作，在私密窗口中打开 `http://localhost:3000/`。由于 Nuxt Supabase 内置的中间件检查用户身份验证状态，你应该会自动重定向到
    `'auth/login/'`。
- en: 'Now that our signup functionality is in place, let’s focus on implementing
    the login process. The method for logging in is similar to the signup, but we’ll
    be using Supabase’s `signInWithPassword` method. In your `login.vue` page, define
    the `onSubmit` function specifically for the login process:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置了注册功能，让我们专注于实现登录过程。登录的方法与注册类似，但我们将使用 Supabase 的 `signInWithPassword`
    方法。在你的 `login.vue` 页面中，定义一个专门用于登录过程的 `onSubmit` 函数：
- en: '[PRE25]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This function attempts to log in the user using their email and password. Upon
    successful login, the user is greeted with a success toast and redirected to the
    homepage.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数尝试使用用户的电子邮件和密码登录用户。在成功登录后，用户会看到一个成功提示并重定向到主页。
- en: 'Link the `onSubmit` function to the `UForm` in your login page:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `onSubmit` 函数链接到你的登录页面中的 `UForm`：
- en: '[PRE26]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: By implementing this login functionality, we’ve ensured that users can access
    their accounts securely and conveniently. The process is straightforward, making
    the login experience smooth and efficient. Next, we’ll delve into how users can
    create, view, and manage their own posts within our application, making it a truly
    interactive and personal space.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 通过实现此登录功能，我们确保用户可以安全方便地访问他们的账户。整个过程简单明了，使登录体验流畅高效。接下来，我们将深入了解用户如何在我们的应用程序中创建、查看和管理他们自己的帖子，使其成为一个真正互动和个性化的空间。
- en: Creating and Managing Personal User Posts
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和管理个人用户帖子
- en: 'In this section, we turn our attention to enabling users to create and manage
    their posts. To ensure this works smoothly, we need to set up specific rules in
    our database table: `posts` using Supabase’s Row-Level Security (RLS) policies.'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将注意力转向启用用户创建和管理他们的帖子。为了确保这可以顺利运行，我们需要在我们的数据库表 `posts` 中使用 Supabase 的行级安全（RLS）策略设置特定的规则。
- en: RLS policies in Supabase are like rules for your database. They help control
    who can see or change data in the database. For our app, we’ll use these policies
    to make sure users can only access their own posts.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: Supabase 中的 RLS 策略就像是数据库的规则。它们有助于控制谁可以查看或更改数据库中的数据。对于我们的应用程序，我们将使用这些策略来确保用户只能访问他们自己的帖子。
- en: Adding RLS Policy for the ‘Posts’ Table
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为“帖子”表添加 RLS 策略
- en: 'Open Supabase policies page: . This is where you can control who accesses what
    in your database. Choose the `posts` table and start making a new policy:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 Supabase 策略页面：。这是您可以控制谁访问数据库中的什么内容的页面。选择 `posts` 表并开始创建一个新的策略：
- en: Name it something clear like “Personal Posts Management”.
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命名一个清晰明了的名称，例如“个人帖子管理”。
- en: Choose “ALL” for operations so users can read, add, update, and delete their
    posts.
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于操作选择“全部”，以便用户可以读取、添加、更新和删除他们的帖子。
- en: For ‘Target Roles’, pick “authenticated” so only logged-in users can use this
    policy.
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于“目标角色”，选择“已认证”以便只有登录用户可以使用此策略。
- en: Add the `(auth.uid() = author_id)` expression to both **using** and **with check**
    expression. This ensures users can only view and interact with posts they’ve created,
    maintaining strict user-specific access for both viewing and modifying content.
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 `(auth.uid() = author_id)` 表达式添加到 **using** 和 **with check** 表达式中。这确保用户只能查看和交互他们创建的帖子，保持对查看和修改内容的严格用户特定访问。
- en: 'The Policy details should be like this:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 策略详情应如下所示：
- en: '![Figure 5.10: posts table RLS policy](img/B19760_05_10.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.10：帖子表 RLS 策略](img/B19760_05_10.jpg)'
- en: 'Figure 5.10: posts table RLS policy'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.10：帖子表 RLS 策略
- en: With our RLS policies in place for the `posts` table, let’s now delve into how
    we can use Supabase’s API to manage these posts within our application.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `posts` 表上设置了我们的 RLS 策略后，现在让我们深入了解如何使用 Supabase 的 API 来管理应用程序中的这些帖子。
- en: Using Supabase API for Post Management
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Supabase API 进行帖子管理
- en: '`useSupabaseClient` in Nuxt 3 opens up a straightforward path to interact with
    our database. It’s our go-to for executing operations on the `posts` table.'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Nuxt 3 中使用 `useSupabaseClient` 可以直接与我们的数据库交互。它是我们在 `posts` 表上执行操作的首选。
- en: 'Your project’s specific API documentation on Supabase gives detailed insights
    into possible queries. For a hands-on look, visit:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 您的项目在 Supabase 上的特定 API 文档提供了可能的查询的详细见解。为了实际查看，请访问：
- en: 'With a simple command like:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 使用简单的命令：
- en: '[PRE27]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'we can fetch an array of user-specific posts, thanks to the RLS policies ensuring
    each user sees only their content. To create or update a post, we can use `upsert`:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以获取一个用户特定的帖子数组，多亏了 RLS 策略确保每个用户只能看到他们的内容。要创建或更新帖子，我们可以使用 `upsert`：
- en: '[PRE28]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This function elegantly handles both new post insertions and updates to existing
    posts, checking against unique identifiers to decide the appropriate action.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数优雅地处理了新帖子插入和现有帖子更新的操作，通过检查唯一标识符来决定适当的操作。
- en: 'Finally, for deleting posts, the combination of the `delete` method and the
    `eq` filter ensures we precisely target and remove the intended post:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，对于删除帖子，`delete` 方法与 `eq` 过滤器的组合确保我们精确地定位并删除预期的帖子：
- en: '[PRE29]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: This targeted approach reinforces the control users have over their posts, aligning
    with the security measures we’ve implemented.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 这种有针对性的方法加强了用户对其帖子的控制，与我们实施的安全措施相一致。
- en: let’s move on to developing a user interface for creating and updating post
    information.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续开发用于创建和更新帖子信息的用户界面。
- en: Building the Post Information Page
  id: totrans-191
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建帖子信息页面
- en: 'Begin by setting up a dynamic route in your Nuxt application. Create a file
    named `[id].vue` inside the `/pages/posts/` directory. This dynamic route, represented
    by `[id]`, will allow the page to handle different scenarios based on the URL:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在您的 Nuxt 应用程序中设置一个动态路由。在 `/pages/posts/` 目录中创建一个名为 `[id].vue` 的文件。这个由 `[id]`
    表示的动态路由将允许页面根据 URL 处理不同的场景：
- en: When the `[id]` in the route is set to `create`, we know the user is looking
    to create a new post.
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当路由中的 `[id]` 设置为 `create` 时，我们知道用户正在尝试创建一个新的帖子。
- en: If `[id]` is an actual post ID, it indicates the user intends to view or edit
    an existing post. In this case, we’ll use this ID to fetch the relevant post data.
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 `[id]` 是实际的帖子 ID，则表示用户打算查看或编辑现有的帖子。在这种情况下，我们将使用此 ID 来获取相关的帖子数据。
- en: This approach gives us a flexible and efficient way to handle both new post
    creation and the editing of existing posts, all within a single, dynamic interface.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法为我们提供了一种灵活且高效的方式来处理新帖子的创建和现有帖子的编辑，所有这些都在一个动态界面上完成。
- en: 'Inside the template: create a simple layout:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在模板内部：创建一个简单的布局：
- en: '[PRE30]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'And the form will be as follows:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 表单将如下所示：
- en: '[PRE31]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Under the Form, add a small error button for post deletion:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在表单下添加一个用于帖子删除的小错误按钮：
- en: '[PRE32]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'In the script part of our page, we set up the state and validation schema for
    our post:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们页面的脚本部分，我们设置了帖子状态和验证模式：
- en: '[PRE33]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Here’s the breakdown:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是分解：
- en: '`useSupabaseUser()` provides the information of the logged-in user.'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`useSupabaseUser()` 提供了已登录用户的信息。'
- en: '`post` holds the data for the `title`, `content`, and `author_id.`'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`post` 包含 `title`、`content` 和 `author_id` 的数据。'
- en: The `schema` defines the necessary fields and their validation rules.
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema` 定义了必要的字段及其验证规则。'
- en: The `.unknown(true)` part lets the form handle additional fields like `id` and
    `created_at` without validation errors.
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.unknown(true)` 部分允许表单处理额外的字段，如 `id` 和 `created_at` 而不产生验证错误。'
- en: 'As we continue in building our script block by block, let’s add:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们逐步构建脚本块的同时，让我们添加：
- en: '[PRE34]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: We captured the current route details, essential for determining the post ID
    and the mode (create or edit). Then we extracted the post ID from the route parameters.
    Finally, we used `editMode` to determine if the user is in edit mode (editing
    an existing post) or create mode (creating a new post).
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 我们捕获了当前路由详情，这对于确定帖子 ID 和模式（创建或编辑）至关重要。然后我们从路由参数中提取帖子 ID。最后，我们使用 `editMode` 来确定用户是否处于编辑模式（编辑现有帖子）或创建模式（创建新帖子）。
- en: Now let’s handle Data Fetching with `useLazyAsyncData`. Nuxt provides a great
    composable to perform data-fetching in a browser or server environment called,
    `useAsyncData`. It fetches data before rendering the page, ideal for server-side
    rendering where data must be present initially. `useLazyAsyncData`, in contrast,
    starts page rendering immediately and loads data in the background, enhancing
    user experience by reducing wait times, especially useful for non-critical data
    like loading posts in our application.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用 `useLazyAsyncData` 处理数据获取。Nuxt 提供了一个很好的可组合函数，用于在浏览器或服务器环境中执行数据获取，称为
    `useAsyncData`。它在渲染页面之前获取数据，对于服务器端渲染（数据最初必须存在）来说很理想。相比之下，`useLazyAsyncData` 立即开始页面渲染并在后台加载数据，通过减少等待时间来增强用户体验，这对于加载我们应用程序中的非关键数据（如帖子）特别有用。
- en: '[PRE35]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: In this case, if the user is in edit mode, the script fetches the specific post
    data from Supabase and populates the form for editing. It checks the post ID against
    the database and retrieves the corresponding post details. Otherwise, the `post`
    ref will remain empty.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，如果用户处于编辑模式，脚本将从 Supabase 获取特定的帖子数据并填充编辑表单。它将帖子 ID 与数据库进行比对并检索相应的帖子详情。否则，`post`
    引用将保持为空。
- en: 'Let’s examine the `onSubmit` function, which handles both creating and updating
    posts:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查 `onSubmit` 函数，它处理创建和更新帖子：
- en: '[PRE36]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Here’s the breakdown:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是分解：
- en: The function performs an `upsert` operation, which either updates an existing
    post or creates new one based on the post’s ID. (create if the ID is undefined,
    update otherwise)
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数执行 `upsert` 操作，根据帖子的 ID 更新现有帖子或创建新帖子。（如果 ID 未定义则创建，否则更新）
- en: Error handling is implemented to catch and display any issues that arise during
    the `upsert` process.
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误处理已实现，以捕获和显示在 `upsert` 过程中出现的任何问题。
- en: Success feedback is provided through toast notifications, differentiating between
    post creation and updating.
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 成功反馈通过 toast 通知提供，区分帖子创建和更新。
- en: Finally, the function navigates the user back to the homepage.
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，函数将用户导航回主页。
- en: 'Now, let’s look at the `deletePost` function. Similar to `onSubmit,` this function
    includes error handling and user feedback via toast notifications. but the supabase
    method will be:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看 `deletePost` 函数。与 `onSubmit` 类似，这个函数包括错误处理和通过 toast 通知的用户反馈，但 Supabase
    方法将是：
- en: '[PRE37]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'If you navigate to: , you should see this page:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你导航到：，你应该看到这个页面：
- en: '![Figure 5.11: project information page](img/B19760_05_11.jpg)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.11：项目信息页面](img/B19760_05_11.jpg)'
- en: 'Figure 5.11: project information page'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.11：项目信息页面
- en: 'Enhancing the user navigation within our application, we’ll introduce a navigation
    component to the `default` layout:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用程序中增强用户导航，我们将在 `default` 布局中引入导航组件：
- en: '[PRE38]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'This navigation bar features to parts: the left side for the brand logo or
    name linked to the homepage, and the right side with a button for creating new
    posts.'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 这个导航栏有两个部分：左侧用于品牌标志或名称链接到主页，右侧有一个创建新帖子的按钮。
- en: Moving forward, Let’s build post listing page!
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们构建帖子列表页面！
- en: Displaying User Posts
  id: totrans-231
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 显示用户帖子
- en: 'As we move into the final stretch of our application development, we’ll update
    the homepage to lists all the posts created by the use. Update the script section
    in `index.vue` as follows:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们进入应用程序开发的最后阶段时，我们将更新主页以列出用户创建的所有帖子。按照以下方式更新`index.vue`中的脚本部分：
- en: '[PRE39]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: The script uses `useSupabaseClient` to access the Supabase API and fetch posts.
    `useLazyAsyncData` is utilized to load the posts asynchronously. It ensures that
    the page navigation happens immediately, with post data loading in the background.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 该脚本使用`useSupabaseClient`来访问Supabase API并获取帖子。`useLazyAsyncData`被用来异步加载帖子。它确保页面导航立即发生，而帖子数据在后台加载。
- en: 'Update the page template:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 更新页面模板：
- en: '[PRE40]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The template contains a container holds the title “My Posts” and a loop that
    renders each post using the `post-card` component. So, Let’s create the `PostCard.vue`
    component inside `components` folder:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 模板包含一个容器，标题为“我的帖子”，并使用`post-card`组件渲染每个帖子。因此，让我们在`components`文件夹内创建`PostCard.vue`组件：
- en: '[PRE41]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Each `post-card` component presents the post’s title, content, and creation
    date. The use of `dayjs` to format the date adds a human-friendly touch to the
    date. A `nuxt-link` wraps the card, enabling easy navigation to the detailed view
    or edit page of each post.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 每个`post-card`组件展示帖子的标题、内容和创建日期。使用`dayjs`格式化日期为人类友好的格式，增加了日期的亲和力。一个`nuxt-link`包裹了卡片，使得轻松导航到每个帖子的详细视图或编辑页面。
- en: With our post listing and individual postcard components in place, users should
    now see all the posts they’ve created. Clicking on a post navigates to its detailed
    page, where the content can be viewed, updated, or deleted seamlessly.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的帖子列表和单个帖子卡片组件就绪后，用户现在应该能看到他们创建的所有帖子。点击帖子将导航到其详细页面，在那里内容可以无缝查看、更新或删除。
- en: Summary
  id: totrans-241
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Voilà! We’ve successfully created a dynamic and user-friendly space for personal
    post management within our application. We started with establishing a secure
    user authentication system. Our focus then shifted to enabling users to create,
    edit, and delete posts, with each step validated using Joi for ensuring data integrity.
    These features, backed by Supabase’s Row-Level Security policies and API, guaranteed
    secure and user-specific interactions.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: Voilà！我们已经成功地在我们的应用程序中创建了一个动态且用户友好的个人帖子管理系统。我们首先建立了一个安全用户认证系统。然后，我们的重点转向了使用户能够创建、编辑和删除帖子，每个步骤都使用Joi进行验证以确保数据完整性。这些功能由Supabase的行级安全策略和API支持，保证了安全和用户特定的交互。
- en: In the upcoming chapter, we’ll enhance a recipe sharing site using Nuxt 3, with
    a specific focus on SEO optimization. We’ll dive into techniques such as metadata
    configuration, structured data implementation, image optimization, SEO-friendly
    URL creation, and sitemap generation. These steps aim to elevate the site’s search
    engine presence and attract more organic traffic.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将使用Nuxt 3增强一个食谱分享网站，重点关注SEO优化。我们将深入研究技术，如元数据配置、结构化数据实施、图像优化、SEO友好URL创建和网站地图生成。这些步骤旨在提升网站的搜索引擎存在感，吸引更多有机流量。
- en: Practice Questions
  id: totrans-244
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实践问题
- en: Explain the process of creating a new Supabase project for a Nuxt 3 application.
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解释为Nuxt 3应用程序创建新Supabase项目的流程。
- en: Describe the purpose of Row-Level Security (RLS) in Supabase and how it’s implemented.
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述Supabase中行级安全（RLS）的目的及其实现方式。
- en: What are the benefits of `useSupabaseClient` composable?
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`useSupabaseClient`组合式函数的好处是什么？'
- en: What is the difference between `useAsyncData` and `useLazyAsyncData` in Nuxt,
    and when would you use each?
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`useAsyncData`和`useLazyAsyncData`在Nuxt中的区别是什么？何时使用哪一个？'
- en: How do you validate user input in a form using Joi & NuxtUI?
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用Joi和NuxtUI在表单中验证用户输入？
- en: How to handle Supabase errors?
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何处理Supabase错误？
- en: How to sign in with password using Supabase?
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用Supabase通过密码登录？
- en: How to delete a record in a table with Supabase?
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用Supabase在表中删除记录？
- en: Explain how to use the `upsert` method in Supabase for post management.
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解释如何在Supabase中使用`upsert`方法进行帖子管理。
- en: Further Reading
  id: totrans-254
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Supabase: [https://supabase.com/](https://supabase.com/%0D)'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Supabase: [https://supabase.com/](https://supabase.com/%0D)'
- en: 'Nuxt UI Forms: [https://ui.nuxt.com/forms/form](https://ui.nuxt.com/forms/form%0D)'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Nuxt UI表单：[https://ui.nuxt.com/forms/form](https://ui.nuxt.com/forms/form%0D)
- en: 'RLS in Supabase: [https://supabase.com/docs/guides/auth/row-level-security](https://supabase.com/docs/guides/auth/row-level-security)'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Supabase 中的 RLS（行级安全）：[https://supabase.com/docs/guides/auth/row-level-security](https://supabase.com/docs/guides/auth/row-level-security)
- en: 'Joi Validation: [https://joi.dev/](https://joi.dev/)'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Joi 验证：[https://joi.dev/](https://joi.dev/)
- en: 'Build User Management Website using Nuxt 3 and Supabase: [https://supabase.com/docs/guides/getting-started/tutorials/with-nuxt-3](https://supabase.com/docs/guides/getting-started/tutorials/with-nuxt-3)'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Nuxt 3 和 Supabase 构建用户管理网站：[https://supabase.com/docs/guides/getting-started/tutorials/with-nuxt-3](https://supabase.com/docs/guides/getting-started/tutorials/with-nuxt-3)
- en: 'Nuxt Supabase Module: [https://supabase.nuxtjs.org/](https://supabase.nuxtjs.org/)'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Nuxt Supabase 模块：[https://supabase.nuxtjs.org/](https://supabase.nuxtjs.org/)
