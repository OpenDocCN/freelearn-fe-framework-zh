- en: Unit Testing in Reason
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The subject of testing in a typed language such as Reason is a somewhat controversial
    topic. Some believe that a good test suite diminishes the need for a type system.
    On the other hand, some value a type system much more than their test suite. These
    differences in opinion can lead to some pretty heated debates.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, types and tests are not mutually exclusive. We can have types *and*
    tests. Perhaps Cheng Lou, one of Reason's core team members, said it best.
  prefs: []
  type: TYPE_NORMAL
- en: 'Tests. That''s an easy one, right? Types kill a category of tests—not all of
    the tests. And this is a discussion that people don''t appreciate enough. They
    all pit tests against types. The point is: if you have types, and you *add* tests,
    your tests will be able to express much more with less energy. You don''t need
    to assert on invalid input anymore. You can assert on something more important.
    Tests can be there if you want; you''re just saying much more with them.'
  prefs: []
  type: TYPE_NORMAL
- en: '- Cheng Lou'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can watch Cheng Lou''s talk at React Conf 2017 on the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://youtu.be/_0T5OSSzxms](https://youtu.be/_0T5OSSzxms)'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll set up Jest, the popular JavaScript testing framework,
    via the `bs-jest` BuckleScript bindings. We will do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Learn how to set up `bs-jest` with both the `es6` and `commonjs` module formats
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unit-test a Reason function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See how writing tests can help us improve our code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To follow along, clone this book''s GitHub repository and start from `Chapter08/app-start` using
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Testing with Jest
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Jest, also created by Facebook, is arguably one of the most popular JavaScript
    testing frameworks. If you're familiar with React, you're likely also familiar
    with Jest. Therefore, we'll skip the formal introduction and get started with
    using Jest in Reason.
  prefs: []
  type: TYPE_NORMAL
- en: Installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Just like any other package, we start with the **Reason Package Index** (or
    **Redex**, for short).
  prefs: []
  type: TYPE_NORMAL
- en: 'Reason Package Index:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://redex.github.io/](https://redex.github.io/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Typing in `jest` reveals the `bs-jest` bindings to Jest. Following the installation
    instructions for `bs-jest`, we first install `bs-jest` with npm:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we let BuckleScript know about this dev dependency by including it in
    `bsconfig.json`. Notice that the key is `"bs-dev-dependencies"` and not `"bs-dependencies"`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Since `bs-jest` lists `jest` as a dependency, npm will install `jest` as well,
    and we don't need to include `jest` as a direct dependency of our application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s now create a `__tests__` directory as a sibling of the `src` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'And tell BuckleScript to look for this directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Lastly, we''ll update our `test` script in `package.json` to use Jest:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Our first test
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s create our first test in `__tests__/First_test.re` with something simple
    for now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Running `npm test` now fails with the following error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The problem here is that Jest cannot directly understand the ES Module format. Remember
    that we''ve configured BuckleScript to use ES modules via the following configuration
    (see [Chapter 2](4e4e3057-fca6-4c81-b6a7-05575aeeace3.xhtml), *Setting Up a Development
    Environment*):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'One way to resolve this issue is to configure BuckleScript to use the `"commonjs"`
    module format instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll then also need to update webpack''s `entry` field:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, running `npm test` results in a test that passes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, if we want to keep using the ES module format, we need to make
    sure Jest runs the `*test.bs.js` files through Babel first. To do this, we''ll
    need to follow the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install both `babel-jest` and `babel-preset-env`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the corresponding Babel configuration in `.babelrc`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Ensure that Jest runs certain third-party dependencies within `node_modules`
    through Babel. Jest excludes running anything in `node_modules` through Babel
    by default for performance reasons. We can override this behavior by providing
    a custom Jest configuration in `package.json`. Here, we''ll tell Jest to only
    ignore third-party dependencies that don''t match `/node_modules/glennsl*`, `/node_modules/bs-platform*`,
    and so on:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, running `npm test` works with the ES Module format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Testing business logic
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s write a test that verifies we''re able to get the right customer by
    its `id`. In `Customer.re`, there is a function called `getCustomer` that accepts
    an array of `customers`, and imperatively gets the `id` by calling `getId`. The
    `getId` function accepts a `pathname` that exists outside the scope of `getCustomer`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Right away, we notice that this is less than ideal. It would be much better
    if `getCustomer` accepted an array of `customers` *and* an `id`, and focused on
    getting the customer by their `id`. Otherwise, it will be harder to write a test
    *just* for `getCustomer`.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, we refactor `getCustomer` to also accept an `id`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Now, we can more easily write the test. Follow the compiler errors to ensure
    that you've replaced `getCustomer` with `getCustomerById`. For the `id` argument,
    pass in `getId(pathname)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s rename our test to `__tests__/Customers_test.re` and include the following
    test:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Running this test (via `npm test`) with our existing code results in the following
    error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The reason for the error is that `Customers.re` makes a call to `localStorage`
    at the top level.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Since Jest runs in Node.js, we don''t have access to browser APIs. To resolve
    this issue, we can wrap this call in a function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: And we can call this `getCustomers` function within `initialState`. This will
    allow us to avoid the call to `localStorage` from within Jest.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s update `Customer.re` to move the array of customers into the state:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'After these changes, our test succeeds:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Reflecting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned the basics of setting up `bs-jest` with both the
    CommonJS and ES Module formats. We also learned that unit testing can help force
    us to write better code because, for the most part, code that is easier to test
    is also better. We refactored `getCustomer` to `getCustomerById`, and moved the
    array of customers into that component's state.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since we''ve written our unit tests in Reason, the compiler checks our tests
    as well. For example, if `Customer_test.re` uses `getCustomer` and we change `getCustomerById` to
    `getCustomer` in `Customer.re`, we get a compile time error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: This means that we're also not able to write certain unit tests. For example,
    if we wanted to test [Chapter 5](86a6dec1-1340-4c6c-bdfa-95138e0d471b.xhtml), *Effective
    ML* codes, where we used the type system to guarantee that an invoice wouldn't
    be discounted twice, the test wouldn't even compile. How lovely.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since Reason's reach is so broad, there are so many different ways to approach
    learning it. This book has focused on learning Reason from the perspective of
    a frontend developer. We've taken skills and concepts that we're already familiar
    with (such as building web applications with ReactJS) and explored how we would
    do the same with Reason. While on this journey, we learned about Reason's type
    system, its toolchain, and its ecosystem.
  prefs: []
  type: TYPE_NORMAL
- en: I believe the future of Reason is bright. Many of the skills we've learned are
    directly transferable to targeting a native platform. Reason's frontend story
    is currently more polished than its native story, but it's already possible to
    compile to both web and native. And it's only going to get better from here. There
    have already been huge improvements from when I first started using Reason, and
    I'm so excited to see what the future holds.
  prefs: []
  type: TYPE_NORMAL
- en: Hopefully this book has piqued your interest in Reason, OCaml, and the ML family
    of languages in general. Reason's type system has seen decades of engineering.
    As a result, there is a lot that this book hasn't covered, and I'm still learning
    myself. However, you should by now have a solid foundation on which to continue
    your learning. I encourage you to learn publicly by writing asking questions on
    the Discord channel, writing blog posts, mentoring others, sharing your journey
    in meetups, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Thank you very much for making it this far, and see you on the Discord channel!
  prefs: []
  type: TYPE_NORMAL
- en: 'Reason Discord channel:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://discord.gg/reasonml](https://discord.gg/reasonml)'
  prefs: []
  type: TYPE_NORMAL
