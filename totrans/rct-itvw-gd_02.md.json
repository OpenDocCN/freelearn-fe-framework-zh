["```js\nconst myElement = <h1>This is my first JSX code</h1>\nReactDOM.render(myElement, document.getElementById\n  ('root'));\n```", "```js\nconst myElement = React.createElement('h1', {},\n  'This is my React element without JSX code!');\nReactDOM.render(myElement, document.getElementById\n  ('root'));\n```", "```js\n    function User({ message }) {\n        return <h1>{`Hello, ${message}`}</h1>;\n      }\n      export default User;\n    ```", "```js\n     class User extends React.Component {\n      render() {\n        return <h1>{`Hello, ${this.props.message}`} </h1>;\n      }\n     }\n     export default User;\n    ```", "```js\nReact.createElement(type, {props}, children);\n```", "```js\nconst element = React.createElement(\"div\",\n  { id: \"signout-container\" },\nReact.createElement(\"button\", {id: \"signout-btn\"},\n  \"Sign Out\")\n);\n```", "```js\n{\n  type: 'div',\n  props: {\n  children: {\n    type: 'button',\n    props:  {\n      children: 'SignOut'\n      id: 'signout-btn'\n    }\n  },\n    id: 'signout-container'\n  }\n}\n```", "```js\nconst signoutElement = <div id=\"signout-container\">\n  <button id=\"signout-btn\">SignOut</button>\n    <div>;\n```", "```js\nconst SignOut = ({handleSignOut}) => (\n  <div id=\"signout-container\">\n    <button id=\"signout-btn\" onClick={ handleSignOut}>\n      SignOut\n    </button>\n  <div>\n)\n```", "```js\nimport { memo, useState } from 'react';\nconst UserProfile = memo(function UserProfile\n  ({ name, age }) {\n  return (<>\n           <p>Name:{name}</p>\n           <p>Age: {age}</p>\n         </>);\n});\nexport default function UserEnquiryForm() {\n  const [name, setName] = useState('');\n  const [age, setAge] = useState(0);\n  const [email, setEmail] = useState('');\n  return (\n    <>\n      <label>\n        Name: <input value={name} onChange=\n          {e => setName(e.target.value)} />\n      </label>\n      <label>\n        Age: <input value={age} onChange=\n          {e => setAge(e.target.value)} />\n      </label>\n        <label>\n        Email: <input value={email} onChange=\n          {e => setEmail(e.target.value)} />\n      </label>\n      <hr/>\n      <UserProfile name={name} age={age}/>\n    </>\n  );\n}\n```", "```js\nconst withHigherOrderComponent = (OriginalComponent) => (props) => <OriginalComponent {...props} />;\n```", "```js\nfunction Author() {\n         return posts.map(post =>\n                 <Fragment key={ post.id}>\n                       <Post title={post.text} body={post.body} />\n                       <Date date= {post.date} />\n                 </Fragment>\n    );\n}\n```", "```js\nimport React from 'react';\nfunction App() {\nreturn (\n    < >\n        <Employee name=\"John\" age=\"30\" department=\"Manufacturing\"></\n          Employee>\n        <Employee name=\"Malcolm\" age=\"35\" department=\"Engineering\" ></\n          Employee>\n        <Employee name=\"Luther\" department=\"Finance\"></Employee>\n    </ >\n);\n}\nfunction Employee(props) {\nreturn (\n    < >\n        <span>Name: {props.name} </span>\n        <span>Age: {props.age} </span>\n        <span>Department: {props.department} </span>\n    </ >\n)\n}\nEmployee.defaultProps = {\n    name: \"Jack\",\n    age: \"45\",\n    department: \"HR\"\n}\nexport default App; \n```", "```js\nfunction Employee({name, age, department}) {\nreturn (\n    <>\n        <span>Name: {name} </span>\n        <span>Age: {age} </span>\n        <span>Department: {department} </span>\n    </>\n)\n}\n```", "```js\nimport React, { useState } from \"react\";\nfunction User() {\n  const [message, setMessage] = useState\n    (\"Welcome to React world\");\n  return (\n    <>\n      <h1>{message}</h1>\n    </>\n  );\n}\n```", "```js\nclass User extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      message: \"Welcome to React world\",\n    };\n  }\n  render() {\n    return (\n      <>\n        <h1>{this.state.message}</h1>\n      </>\n    );\n  }\n}\n```", "```js\nimport { useState } from 'react';\nexport default function MultiState() {\n  const [count, setCount] = useState(0);\n  const [message, setMessage] = useState('Batching');\n  console.log('Application re-rendered');\n  const handleAsyncFetch = () => {\n    fetch(https://jsonplaceholder.typicode.com/todos/1\n      ).then(() => {\n        // trigger only one(1) re-render due to\n           Automatic Batching\n        setCount(count +1);\n        setMessage('Automatic batching');\n      });\n  }\n  return (\n    <>\n      <h1>{count}</h1>\n      <button onClick={handleAsyncFetch}>\n        Click Me!</button>\n    </>\n  )\n}\n```", "```js\n  const handleAddTodo = (todoName) => {\n    flushSync(() => {\n      setTodos([...todos, { id: uuid(), task: todoName }]);\n    });\n    todoListRef.current.scrollTop = todoListRef.\n      current.scrollHeight;\n  };\n```", "```js\nfunction WeatherReport() {\n  const [weather, setWeather] = useState({\n    temperature: 26,\n    city: \"Singapore\",\n  });\n  const handleWeatherChange = (e) => {\n    if (e.target.name === \"temperature\") {\n      weather.temperature = e.target.value;\n    }\n    if (e.target.name === \"city\") {\n      weather.city = e.target.value;\n    }\n  };\n  return (\n    <>\n      <label>\n        Temparature:\n        <input value={weather.temperature} onChange=\n          {handleWeatherChange} />\n      </label>\n      <label>\n        City:\n        <input value={weather.city} onChange={handleWeatherChange} />\n      </label>\n      <div>\n        Report:\n        <span>{weather.temperature}</span>\n        <span>{weather.city}</span>\n      </div>\n    </>\n  );\n}\n```", "```js\nhandleWeatherChange(e) {\n    setWeather({\n        ...weather,\n        [e.target.name]: e.target.value\n    })\n}\n```", "```js\n{\n    name: 'Tom',\n    age: 35,\n    address: {\n        country: 'United States',\n        state: 'Texas',\n        postalCode: 73301\n    }\n}\n```", "```js\n    const updatedAddress = { ...user.address,\n      postalCode: 75015 };\n    const updatedUser = { ...user, address:\n      updatedAddress };\n    setUser(updatedUser);\n    ```", "```js\n    setUser({\n      ...user,\n      address: {\n        ...user.address,\n        postalCode: 75015\n      }\n    });\n    ```", "```js\nsetUser(user => {\n  user.address.postalCode = 75015;\n});\n```", "```js\nWarning: Each child in an array or iterator\n         should have a unique \"key\" prop\n```", "```js\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nfunction TodoItem(props) {\n    const { item: todo } = props;\n    return <li>{todo.id}: {todo.message}</li>;\n}\nfunction TodoList(props) {\n    const { todos: list } = props;\n    const updatedTodos = list.map((todo) => {\n        return <TodoItem key={todo.id} item={todo} />;\n    });\n    return <ul>{updatedTodos}</ul>;\n}\nconst devTodoItems = [{id: 1, message:\"Write a component\"}, {id:2, message:\"Test it\"}, {id:3, message:\"Publish the component\"}]; \nReactDOM.render( \n    <TodoList todos={ devTodoItems } />, \n    document.getElementById(\"root\") \n);  \n```", "```js\nfunction Search() {\n  handleInputChange(e) {\n      // 'e' represents synthetic event\n      const nativeEvent = e.nativeEvent;\n      e.stopPropogation();\n      e.preventDefault();\n      // Code goes here..\n  }\n  return <input onChange={handleInputChange} />\n}\n```", "```js\n    <button onclick=\"handleSingUp()\">SingUp</button>\n    <button onClick={handleSignUp}>SingUp</button>\n    ```", "```js\n    <form onsubmit=\"console.log('The form has been\n      submitted.'); return false\">\n          <input type=\"text\" name=\"name\" />\n          <input type=\"password\" name=\"password\" />\n          <button type=\"submit\">Login</button>\n    </form>\n    ```", "```js\n    function Login() {  \n        function handleSubmit(e) { \n            e.preventDefault(); \n            console.log('You submitted Login form.'); \n        }  \n\n        return (\n            <form onsubmit=\"handleSubmit\"> \n                <input type=\"text\" name=\"name\" /> \n                <input type=\"password\" name=\"password\" /> \n                <button type=\"submit\">Login</button> \n            </form>\n        )   \n    } \n    ```", "```js\n    <button onclick=\"handleSingUp()\">\n    However, in React, you just need to specify the method name inside the curly braces (`{}`) of the event attribute's value.\n    ```", "```js\n    class User extends Component { \n        constructor(props) { \n          super(props); \n          this.handleUserDetails = this.handleUserDetails.\n            bind(this); \n        } \n\n        handleUserDetails() { \n          console.log(\"Show User details\"); \n        } \n\n        render() { \n          return <button onClick={this.handleUserDetails}>Profile</\n            button>; \n        } \n\n    } \n    ```", "```js\n    class User extends Component {\n      handleUserDetails = () => {\n        console.log(\"Show User details\");\n      }\n      render() {\n        return <button onClick={this.handleUserDetails}>Profile</\n          button>; \n      }\n    }\n    ```", "```js\n    handleUserDetails() { \n        console.log(\"Show User details\"); \n    } \n    render() { \n        return <button onClick={() => this.handleUserDetails()}>\n          Profile</button>; \n    } \n    ```", "```js\nfunction CitySearch() { \n    return ( \n       <div> \n        <h2>Find city:</h2> \n        <form> \n            <span> \n                City: \n            </span>\n            <input onChange={handleCitySearch} /> \n        </form> \n       </div> \n    ) \n }\n```", "```js\nimport {useRef, useEffimport {useRef, useEffect} from 'react'; \nexport default function SignUpForm() { \n  const inputRef = useRef(null); \n  useEffect(() => { \n    inputRef.current.focus(); \n  }, []) \n  return ( \n    <> \n      <input type=\"email\" ref={inputRef} /> \n      <button> \n        Verify Email \n      </button> \n    </> \n  ); \n} \n```", "```js\n     //Text selection \n    const hasInputText = inputRef.current.value.length > 0; \n    if (hasInputText) { \n        inputRef.current.select(); \n    } \n    // Audio controls \n    const playAudio = () => { \n        audioRef.current.play(); \n    }; \n    const pauseAudio = () => { \n        audioRef.current.pause(); \n    }; \n    ```", "```js\n      function handleScroll() {\n        const block = blockRef.current;\n        const { y } = block.getBoundingClientRect();\n        const blockBackgroundColor = y <= 0 ?\n          'white' : 'black';\n        setBackground(blockBackgroundColor);\n      }\n    ```", "```js\nimport { forwardRef } from 'react';\nconst MySignInButton = forwardRef(function  MySignInButton(props, ref) {\n  const { label, ...otherProps } = props;\n  return (\n    <label>\n      {label}\n      <button {...otherProps} ref={ref} />\n    </label>\n  );\n});\n```", "```js\n    // userContext.js\n    import { createContext } from 'react'; \n    export const UserContext = createContext('Jonathan'); \n    ```", "```js\n    import { UserContext } from './userContext'; \n    function App() { \n      const value = 'Michael'; \n      return ( \n        <Context.Provider value={value}> \n          <MyParentComponent /> \n        </Context.Provider> \n      ); \n    } \n    ```", "```js\n    import { useContext } from 'react'; \n    import { UserContext } from './context'; \n    function MyChildComponent() { \n      const currentUser = useContext(UserContext); \n      return <span>{currentUser}</span>; \n    } \n    ```"]