["```js\n[\n  {\n    \"id\": \"1\",\n    \"title\": \"React Hooks\",\n    \"content\": \"The greatest thing since sliced bread!\",\n    \"author\": \"Daniel Bugl\",\n    \"featured\": false\n  },\n  {\n    \"id\": \"2\",\n    \"title\": \"Using React Fragments\",\n    \"content\": \"Keeping the DOM tree clean!\",\n    \"author\": \"Daniel Bugl\",\n    \"featured\": false\n  },\n  {\n    \"id\": \"3\",\n    \"title\": \"React Context\",\n    \"content\": \"Manage global state with ease!\",\n    \"author\": \"Daniel Bugl\",\n    \"featured\": true\n  }\n] \n```", "```js\n[\n  {\n    \"id\": \"1\",\n    \"username\": \"Daniel Bugl\",\n    \"password\": \"hunter2\"\n  }\n] \n```", "```js\n    $ cp -R Chapter05_2 Chapter06_1 \n    ```", "```js\n    {\n      \"posts\": [\n        {\n          \"id\": \"1\",\n          \"title\": \"React Hooks\",\n          \"content\": \"The greatest thing since sliced bread!\",\n          \"author\": \"Daniel Bugl\",\n          \"featured\": false\n        },\n        {\n          \"id\": \"2\",\n          \"title\": \"Using React Fragments\",\n          \"content\": \"Keeping the DOM tree clean!\",\n          \"author\": \"Daniel Bugl\",\n          \"featured\": false\n        },\n        {\n          \"id\": \"3\",\n          \"title\": \"React Context\",\n          \"content\": \"Manage global state with ease!\",\n          \"author\": \"Daniel Bugl\",\n          \"featured\": true\n        }\n      ],\n      \"users\": [\n        {\n          \"id\": \"1\",\n          \"username\": \"Daniel Bugl\",\n          \"password\": \"hunter2\"\n        }\n      ]\n    } \n    ```", "```js\n    $ npm install --save-exact json-server@1.0.0-beta.3 \n    ```", "```js\n    $ npx json-server server/db.json \n    ```", "```js\nGET    /posts\nGET    /posts/:id\nPOST   /posts\nPUT    /posts/:id\nPATCH  /posts/:id\nDELETE /posts/:id \n```", "```js\n     \"scripts\": {\n    **\"dev:server\"****:** **\"json-server server/db.json --port 5174\"****,** \n    ```", "```js\n     \"scripts\": {\n        \"dev:server\": \"json-server server/db.json --port 5174\",\n        \"dev**:client**\": \"vite\", \n    ```", "```js\n    $ npm install --save-dev --save-exact concurrently@9.1.2 \n    ```", "```js\n     \"scripts\": {\n    **\"dev\"****:** **\"concurrently \\\"npm run dev:server\\\" \\\"npm run dev:client\\\"\"****,** \n    ```", "```js\n    $ npm run dev \n    ```", "```js\n    export default defineConfig({\n      plugins: [react()],\n      resolve: {\n        alias: [\n          { find: '@', replacement: path.resolve(import.meta.dirname, 'src') },\n        ],\n      },\n    **server****: {**\n    **proxy****: {**\n    **'/api'****: {** \n    ```", "```js\n    **target****:** **'http://localhost:5174'****,**\n    **rewrite****:** **(****path****) =>** **path.****replace****(****/^\\/api/****,** **''****),**\n     **},**\n     **},**\n     **},**\n    }) \n    ```", "```js\n    $ npm run dev \n    ```", "```js\n    $ cp -R Chapter06_1 Chapter06_2 \n    ```", "```js\n    export function postsReducer(state, action) {\n      switch (action.type) {\n        case 'CREATE_POST':\n          return [action.post, ...state]\n    **case****'FETCH_POSTS'****:**\n    **return** **action.****posts**\n    default:\n          throw new Error('Unknown action type')\n      }\n    } \n    ```", "```js\n    import { useState, useReducer**, useEffect** } from 'react' \n    ```", "```js\n    export function App() {\n      const [posts, dispatch] = useReducer(postsReducer, **[]**)\n      const [username, setUsername] = useState('') \n    ```", "```js\n     useEffect(() => { \n    ```", "```js\n     fetch('/api/posts') \n    ```", "```js\n     .then((response) => response.json()) \n    ```", "```js\n     .then((posts) => dispatch({ type: 'FETCH_POSTS', posts })) \n    ```", "```js\n     }, []) \n    ```", "```js\n     const featuredPosts = posts.filter((post) => post.featured).reverse()\n      const regularPosts = posts.filter((post) => !post.featured).reverse() \n    ```", "```js\n     <PostList posts={**regularPosts**} /> \n    ```", "```js\n    $ npm run dev \n    ```", "```js\nfunction doSomething() {\n  // ...\n} \n```", "```js\n() => {\n  // ...\n} \n```", "```js\nasync function doSomething() {\n  // ...\n} \n```", "```js\nasync () => {\n  // ...\n} \n```", "```js\nfunction fetchPosts() {\n  return fetch('/api/posts')\n    .then((response) => response.json())\n} \n```", "```js\nasync function fetchPosts() {\n  const response = await fetch('/api/posts')\n  const posts = await response.json()\n  return posts\n} \n```", "```js\n useEffect(() => {\n    async function fetchPosts() {\n      const response = await fetch('/api/posts')\n      const posts = await response.json()\n      dispatch({ type: 'FETCH_POSTS', posts })\n    }\n    void fetchPosts()\n  }, []) \n```", "```js\n     **async** function handleSubmit(e) { \n    ```", "```js\n     e.preventDefault()\n        const form = e.target\n    const title = form.elements.title.value\n    const content = form.elements.content.value\n    const newPost = { title, content, author: username**,** **featured****:** **false** }\n    **const** **response =** **await****fetch****(****'/api/posts'****, {** \n    ```", "```js\n     method: 'POST',\n          headers: { 'Content-Type': 'application/json' }, \n    ```", "```js\n     body: JSON.stringify(newPost),\n        }) \n    ```", "```js\n     if (!response.ok) {\n          throw new Error('Unable to create post')\n        } \n    ```", "```js\n     dispatch({ type: 'CREATE_POST', post: newPost })\n        form.reset()\n      } \n    ```", "```js\n    $ cp -R Chapter06_2 Chapter06_3 \n    ```", "```js\n    $ npm install --save-exact @tanstack/react-query@5.66.7 \n    ```", "```js\n    $ npm install --save-dev --save-exact @tanstack/eslint-plugin-query@5.66.1 \n    ```", "```js\n    import pluginQuery from '@tanstack/eslint-plugin-query' \n    ```", "```js\n    export default [\n     **...pluginQuery.****configs****[****'flat/recommended'****],**\n      { ignores: ['dist'] }, \n    ```", "```js\n    import { QueryClient } from '@tanstack/react-query'\n    export const queryClient = new QueryClient() \n    ```", "```js\n    import { useState**, useReducer, useEffect** } from 'react'\n    **import** **{ postsReducer }** **from****'./reducers.js'** \n    ```", "```js\nimport { QueryClientProvider } from '@tanstack/react-query'\nimport { queryClient } from './api.js' \n```", "```js\n    export function App() {\n    **const** **[posts, dispatch] =** **useReducer****(postsReducer, [])**\n    const [username, setUsername] = useState('')\n    **useEffect****(****() =>** **{**\n    **fetch****(****'/api/posts'****)**\n     **.****then****(****(****response****) =>** **response.****json****())**\n     **.****then****(****(****posts****) =>****dispatch****({** **type****:** **'FETCH_POSTS'****, posts }))**\n     **}, [])**\n    **const** **featuredPosts = posts.****filter****(****(****post****) =>** **post.****featured****).****reverse****()**\n    **const** **regularPosts = posts.****filter****(****(****post****)****=>** **!post.****featured****).****reverse****()** \n    ```", "```js\n     return (\n    **<****QueryClientProvider****client****=****{queryClient}****>**\n    <UserContext.Provider value={[username, setUsername]}>\n           â€¦\n          </UserContext.Provider>\n    **</****QueryClientProvider****>**\n      )\n    } \n    ```", "```js\n     {username && **<****CreatePost** **/>**} \n    ```", "```js\n    export async function fetchPosts({ featured }) { \n    ```", "```js\n     const res = await fetch(`/api/posts?featured=${featured}`) \n    ```", "```js\n     return await res.json()\n    } \n    ```", "```js\n    import { useQuery } from '@tanstack/react-query'\n    import { fetchPosts } from '@/api.js'\n    import { PostList } from './PostList.jsx' \n    ```", "```js\n    export function PostFeed({ featured = false }) { \n    ```", "```js\n     const { data, isLoading } = useQuery({ \n    ```", "```js\n     queryKey: ['posts', featured], \n    ```", "```js\n     queryFn: () => fetchPosts({ featured }),\n      }) \n    ```", "```js\n     if (isLoading) {\n        return <div>Loading posts...</div>\n      } \n    ```", "```js\n     if (!data) {\n        return <div>Could not load posts!</div>\n      } \n    ```", "```js\n     return <PostList posts={data} />\n    } \n    ```", "```js\n    import { PostList } from './components/post/PostList.jsx' \n    ```", "```js\nimport { PostFeed } from './components/post/PostFeed.jsx' \n```", "```js\n     <hr />\n                <ThemeContext.Provider value={{ primaryColor: 'salmon' }}>\n    **<****PostFeed****featured** **/>**\n    </ThemeContext.Provider>\n    **<****PostFeed** **/>** \n    ```", "```js\n    export async function createPost(post) { \n    ```", "```js\n     const res = await fetch('/api/posts', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(post),\n      }) \n    ```", "```js\n     if (!res.ok) {\n        throw new Error('Unable to create post')\n      } \n    ```", "```js\n     return await res.json()\n    } \n    ```", "```js\n    import { useMutation } from '@tanstack/react-query'\n    import { createPost, queryClient } from '@/api.js' \n    ```", "```js\n    export function CreatePost(**{ dispatch }**) { \n    ```", "```js\n     const createPostMutation = useMutation({\n        mutationFn: createPost, \n    ```", "```js\n     onSuccess: () => {\n          queryClient.invalidateQueries(['posts'])\n        },\n      }) \n    ```", "```js\n     async function handleSubmit(e) {\n        e.preventDefault()\n        const form = e.target\n    const title = form.elements.title.value\n    const content = form.elements.content.value\n    const newPost = { title, content, author: username, featured: false } \n    ```", "```js\n     createPostMutation.mutate(newPost, {\n          onSuccess: () => form.reset()\n        })\n      } \n    ```", "```js\n     <input\n            type='submit'\n            value='Create'\n     **disabled={createPostMutation.****isPending****}**\n          /> \n    ```", "```js\n     **{createPostMutation.****isError** **&& (**\n    **<****div****style****=****{{****color:** **'****red****' }}>**\n     **{createPostMutation.error.toString()}**\n    **</****div****>**\n     **)}**\n        </form> \n    ```", "```js\n    $ cp -R Chapter06_3 Chapter06_4 \n    ```", "```js\n    import { useState**,** **Suspense** } from 'react' \n    ```", "```js\n     **<****Suspense** **fallback={****<****strong****>****Loading posts...****</****strong****>****}>**\n    <ThemeContext.Provider value={{ primaryColor: 'salmon' }}>\n    <PostFeed featured />\n    </ThemeContext.Provider>\n    <PostFeed />\n     **</****Suspense****>** \n    ```", "```js\n    import { use**Suspense**Query } from '@tanstack/react-query' \n    ```", "```js\n    export function PostFeed({ featured = false }) {\n      const **{ data }** = use**Suspense**Query({ \n    ```", "```js\n     if (isLoading) {\n        return <div>Loading posts...</div>\n      }\n      if (!data) {\n        return <div>Could not load posts!</div>\n      } \n    ```", "```js\n    $ npm run dev \n    ```", "```js\n    $ npm install --save-exact react-error-boundary@5.0.0 \n    ```", "```js\n    export function FetchErrorNotice({ resetErrorBoundary }) { \n    ```", "```js\n     return (\n        <div>\n    <strong>There was an error fetching data.</strong>\n    <br />\n    <button onClick={resetErrorBoundary}>Try again</button>\n    </div>\n      )\n    } \n    ```", "```js\n    **import** **{** **ErrorBoundary** **}** **from****'react-error-boundary'**\n    import {\n      QueryClientProvider,\n    **QueryErrorResetBoundary****,**\n    } from '@tanstack/react-query'\n    **import** **{** **FetchErrorNotice** **}** **from****'./FetchErrorNotice.jsx'** \n    ```", "```js\n     **<****QueryErrorResetBoundary****>**\n     **{****(****{ reset }****) =>** **(**\n    **<****ErrorBoundary**\n    **onReset****=****{reset}**\n    **fallbackRender****=****{FetchErrorNotice}**\n     **>**\n    <Suspense fallback={<strong>Loading posts...</strong>}>\n                        <ThemeContext.Provider value={{ primaryColor: 'salmon' }}>\n    <PostFeed featured />\n    </ThemeContext.Provider>\n    <PostFeed />\n    </Suspense>\n    **</****ErrorBoundary****>**\n     **)}**\n     **</****QueryErrorResetBoundary****>** \n    ```", "```js\n    $ npm run dev:client \n    ```", "```js\n    $ npm run dev:server \n    ```"]