["```js\nnpm install --save-dev mocha chai @babel/polyfill request\n```", "```js\n\"test\": \"mocha --exit test/ --require babel-hook --require @babel/polyfill --recursive\"\n```", "```js\nrequire(\"@babel/register\")({\n  \"plugins\": [\n    \"require-context-hook\"\n  ],\n  \"presets\": [\"@babel/env\",\"@babel/react\"]\n});\n```", "```js\nconst assert = require('assert');\nconst request = require('request');\nconst expect = require('chai').expect;\nconst should = require('chai').should();\ndescribe('Graphbook application test', function() {\n  it('renders and serves the index page', function(done) {\n    request('http://localhost:8000', function(err, res,\n      body) {\n      should.not.exist(err);\n      should.exist(res);\n      expect(res.statusCode).to.be.equal(200);\n      assert.ok(body.indexOf('<html') !== -1);\n      done(err);\n    });\n  });\n});\n```", "```js\nrequire('babel-plugin-require-context-hook/register')();\n```", "```js\nvar app;\nthis.timeout(50000);\nbefore(function(done) {\n  app = require('../src/server').default;\n  app.on(\"listening\", function() {\n    done();\n  });\n});\n```", "```js\nexport default server;\n```", "```js\nafter(function(done) {\n  app.close(done);\n});\n```", "```js\ndescribe('404', function() {\n  it('redirects the user when not matching path is found',\n    function(done) {\n    request({\n      url: 'http://localhost:8000/path/to/404',\n    }, function(err, res, body) {\n      should.not.exist(err);\n      should.exist(res);\n      expect(res.statusCode).to.be.equal(200);\n      assert.ok(res.req.path === '/');\n      assert.ok(body.indexOf('<html') !== -1);\n      assert.ok(body.indexOf('class=\"authModal\"') !== -1);\n      done(err);\n    });\n  });\n});\n```", "```js\ndescribe('authentication', function() {\n  it('redirects the user when not logged in', \n    function(done) {\n    request({\n      url: 'http://localhost:8000/app',\n    }, function(err, res, body) {\n      should.not.exist(err);\n      should.exist(res);\n      expect(res.statusCode).to.be.equal(200);\n      assert.ok(res.req.path === '/');\n      assert.ok(body.indexOf('<html') !== -1);\n      assert.ok(body.indexOf('class=\"authModal\"') !== -1);\n      done(err);\n    });\n  });\n});\n```", "```js\nvar authToken;\n```", "```js\nit('allows the user to sign up', function(done) {\n  const json = {\n    operationName: null,\n    query: \"mutation signup($username: String!, $email : \n      String!, \n    $password : String!) { signup(username: $username,\n      email: $email,   \n    password : $password) { token }}\",\n    variables: {\n      \"email\": \"mocha@test.com\",\n      \"username\": \"mochatest\",\n      \"password\": \"123456789\"\n    }\n  };\n  request.post({\n    url: 'http://localhost:8000/graphql',\n    json: json,\n  }, function(err, res, body) {\n    should.not.exist(err);\n    should.exist(res);\n    expect(res.statusCode).to.be.equal(200);\n    body.should.be.an('object');\n    body.should.have.property('data');\n    authToken = body.data.signup.token;\n    done(err);\n  });\n});\n```", "```js\nit('allows the user to query all chats', function(done) {\n  const json = {\n    operationName: null,\n    query: \"query {chats {id users {id avatar username}}}\",\n    variables: {}\n  };\n  request.post({\n    url: 'http://localhost:8000/graphql',\n    headers: {\n      'Authorization': authToken\n    },\n    json: json,\n  }, function(err, res, body) {\n    should.not.exist(err);\n    should.exist(res);\n    expect(res.statusCode).to.be.equal(200);\n    body.should.be.an('object');\n    body.should.have.property('data');\n     body.data.should.have.property(\n       'chats').with.lengthOf(0);\n    done(err);\n  });\n});\n```", "```js\nnpm install --save-dev enzyme @wojtekmaj/enzyme-adapter-react-17ignore-styles jsdom isomorphic-fetch\n```", "```js\nrequire('isomorphic-fetch');\nimport React from 'react';\nimport { configure, mount } from 'enzyme';\nimport Adapter from @wojtekmaj/enzyme-adapter-react-17';\nconfigure({ adapter: new Adapter() });\nimport register from 'ignore-styles';\nregister(['.css', '.sass', '.scss']);\n```", "```js\nconst { JSDOM } = require('jsdom');\nconst dom = new JSDOM('<!doctype html><html><body></body>\n  </html>', { url: 'http://graphbook.test' });\nconst { window } = dom;\nglobal.window = window;\nglobal.document = window.document;\n```", "```js\nimport { ApolloClient, InMemoryCache, from } from '@apollo/client';\nimport { createUploadLink } from 'apollo-upload-client';\nimport App from '../src/server/ssr';\n```", "```js\ndescribe('frontend', function() {\n  it('renders and switches to the login or register form', \n  function(done) {\n    const httpLink = createUploadLink({\n      uri: 'http://localhost:8000/graphql',\n      credentials: 'same-origin',\n    });\n    const client = new ApolloClient({\n      link: from([\n        httpLink\n      ]),\n      cache: new InMemoryCache()\n    });\n  });\n});\n```", "```js\nclass Graphbook extends React.Component {\n  render() {\n    return(\n      <App client={client} context={{}} loggedIn={false}\n        location= {\"/\"}/>\n    )\n  }\n}\n```", "```js\n    const wrapper = mount(<Graphbook />);\n    ```", "```js\n    expect(wrapper.html()).to.contain('<a>Want to sign up? Click here</a>');\n    ```", "```js\n    wrapper.find('LoginRegisterForm').find('a').simulate('click');\n    ```", "```js\n    expect(wrapper.html()).to.contain('<a>Want to login?\n      Click here</a>');\n    done();\n    ```", "```js\nit('renders the current user in the top bar', function(done) {\n  const AuthLink = (operation, next) => {\n    operation.setContext(context => ({\n        ...context,\n        headers: {\n            ...context.headers,\n            Authorization: authToken\n        },\n    }));\n    return next(operation);\n  };\n  const httpLink = createUploadLink({\n    uri: 'http://localhost:8000/graphql',\n    credentials: 'same-origin',\n  });\n  const client = new ApolloClient({\n    link: from([\n      AuthLink,\n      httpLink\n    ]),\n    cache: new InMemoryCache()\n  });\n  class Graphbook extends React.Component {\n    render() {\n      return(\n        <App client={client} context={{}} loggedIn={true}\n          location= {\"/app\"}/>\n      )\n    }\n  }\n  const wrapper = mount(<Graphbook />);\n  setTimeout(function() {\n    expect(wrapper.html()).to.contain(\n     '<div class=\"user\"><img>\n     <span>mochatest</span></div>');\n    done();\n  },2000);\n});\n```"]