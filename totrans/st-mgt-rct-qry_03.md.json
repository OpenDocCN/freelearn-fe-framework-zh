["```js\nnpm i @tanstack/react-query\n```", "```js\nyarn add @tanstack/react-query\n```", "```js\npnpm add @tanstack/react-query\n```", "```js\n<script src=\"img/index.production.js\"></script>\n```", "```js\nimport {\n QueryClient,\n} from '@tanstack/react-query'\nconst queryClient = new QueryClient()\n```", "```js\nimport { QueryCache } from '@tanstack/react-query'\nconst queryCache = new QueryCache({\n onError: error => {\n  // do something on error\n },\n onSuccess: data => {\n  // do something on success\n }\n})\n```", "```js\nimport { MutationCache } from '@tanstack/react-query'\nconst mutationCache = new MutationCache({\n onError: error => {\n  // do something on error\n },\n onSuccess: data => {\n  // do something on success\n },\n onMutate: newData => {\n  // do something before the mutation\n },\n})\n```", "```js\nconst queryClient = new QueryClient({\n mutationCache,\n queryCache\n})\n```", "```js\nconst logger = {\n   log: (...args) => {\n     // here you call your custom log function\n   },\n   warn: (...args) => {\n     // here you call your custom warn function\n   },\n   error: (...args) => {\n     // here you call your custom error function\n   },\n };\n```", "```js\nconst queryClient = new QueryClient({\n logger\n})\n```", "```js\nconst defaultOptions = {\n   queries: {\n     staleTime: Infinity,\n   },\n };\n```", "```js\nconst queryClient = new QueryClient({\n defaultOptions\n})\n```", "```js\nimport {\n QueryClient,\n QueryClientProvider,\n} from '@tanstack/react-query'\n// Create a client\nconst queryClient = new QueryClient()\nconst App = () => {\n return (\n   <QueryClientProvider client={queryClient}>\n     <Counter />\n   </QueryClientProvider>\n )\n}\n```", "```js\n    npm i @tanstack/react-query-devtools\n    ```", "```js\n    yarn add @tanstack/react-query-devtools\n    ```", "```js\n    pnpm add @tanstack/react-query-devtools\n    ```", "```js\nimport { ReactQueryDevtools } from '@tanstack/\n  react-query-devtools'\n```", "```js\n   <QueryClientProvider client={queryClient}>\n     <ReactQueryDevtools initialIsOpen={false} />\n     <Counter />\n   </QueryClientProvider>\n```", "```js\nimport { ReactQueryDevtoolsPanel } from '@tanstack/\n  react-query-devtools'\n```", "```js\n   <QueryClientProvider client={queryClient}>\n     <ReactQueryDevtoolsPanel />\n     <Counter />\n   </QueryClientProvider>\n```", "```js\nconst ReactQueryDevtoolsProduction = React.lazy(() =>\n  import('@tanstack/react-query-devtools/build/lib/\n    index.prod.js').then(\n    (d) => ({\n      default: d.ReactQueryDevtools,\n    }),\n  ),\n)\n```", "```js\nconst ReactQueryDevtoolsProduction = React.lazy(() =>\n  import('@tanstack/react-query-devtools/production').then(\n    (d) => ({\n      default: d.ReactQueryDevtools,\n    }),\n  ),\n)\n```", "```js\n<React.Suspense fallback={null}>\n  <ReactQueryDevtoolsProduction />\n</React.Suspense>\n```", "```js\n  const [showDevtools, setShowDevtools] = React.useState\n    (false)\n  React.useEffect(() => {\n    window.toggleDevtools = () => setShowDevtools\n      ((previousState) => !previousState)\n  }, [])\n  return (\n    …\n      {showDevtools && (\n        <React.Suspense fallback={null}>\n          <ReactQueryDevtoolsProduction />\n        </React.Suspense>\n      )}\n    …\n  );\n```"]