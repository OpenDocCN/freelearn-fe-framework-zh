- en: Chapter 2. The CSS Framework and Other Utilities
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 2 章 CSS 框架和其他工具
- en: Added in Version 1.7, the jQuery UI library contains a refreshed CSS framework
    that can be used to effectively and consistently theme each widget available in
    the library. The framework is made up of many helper classes that we can use in
    our own code, even if we aren't using any of the library components.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在 1.7 版中添加，jQuery UI 库包含一个更新的 CSS 框架，可用于有效和一致地为库中提供的每个小部件设置主题。该框架由许多辅助类组成，我们可以在自己的代码中使用，即使我们没有使用库组件。
- en: 'In this chapter we''ll be covering the following subjects:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: The files that make up the framework
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构成框架的文件
- en: How to use the classes exposed by the framework
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用框架提供的类
- en: How to switch themes quickly and easily
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何快速轻松地切换主题
- en: Overriding the theme
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 覆盖主题
- en: Using the position utility
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用位置工具
- en: Working with the files that make up the framework
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理构成框架的文件
- en: There are two locations within the library's structure where the CSS files that
    make the framework reside, depending on which version of the library you choose
    to download.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖于您选择下载的库的版本，库结构中有两个位置存放着构成框架的 CSS 文件。
- en: 'They are as follows:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是它们：
- en: '`css`: This folder holds the complete CSS framework, including the theme that
    was selected when the download package was built. All the necessary CSS has been
    placed in a single, lean and mean stylesheet to minimize the HTTP requests in
    production environments. The CSS file is stored in a folder, named after the theme
    selected on the download builder. This version of the framework will contain styles
    for all the components that were selected in the download builder, so its size
    will vary depending on how much of the library is being used.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`css`: 此文件夹包含完整的 CSS 框架，包括在构建下载包时选择的主题。所有必需的 CSS 已经放置在一个单独的、精简的样式表中，以最小化生产环境中的
    HTTP 请求。CSS 文件存储在一个文件夹中，文件夹的名称取决于下载生成器上选择的主题。该框架的此版本将包含下载生成器中选择的所有组件的样式，因此其大小将根据使用的库的多少而变化。'
- en: '`themes`: Another version of the framework exists within the `development-bundle`
    folder, within which you will find the `themes` folder. Two themes are provided
    in this folder—the base theme, and whichever theme that was selected when the
    library was downloaded. The base theme is a gray, neutral theme that is visually
    identical to the smoothness theme.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`themes`: 框架的另一个版本存在于 `development-bundle` 文件夹中，其中您将找到 `themes` 文件夹。此文件夹中提供了两个主题——基础主题和在下载库时选择的任何主题。基础主题是一个灰色的、中性的主题，与平滑主题在视觉上完全相同。'
- en: 'Within each of these theme folders, are the individual files that make up the
    framework. Each of the different components of the framework is split into its
    own respective files:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个主题文件夹中，都有构成框架的各个文件。框架的不同组件被分割到各自的文件中：
- en: '| Component | Use |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| 组件 | 用途 |'
- en: '| --- | --- |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '|'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '| All the required files for a theme can be linked by using this file in development.
    It consists of the `@import` directives that pull in the `ui.base.css` and the
    `ui.theme.css` files. |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| 在开发中，可以通过使用此文件链接所有主题所需的文件。它包含了 `@import` 指令，引入了 `ui.base.css` 和 `ui.theme.css`
    文件。 |'
- en: '|'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '| This file is used by `ui.all.css`. It also contains `@import` directives
    that pull in the `ui.core.css file`, as well as each of the widget CSS files.
    However, it contains none of the theme styles that control each widget''s appearance.
    |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| 此文件被 `ui.all.css` 使用。它还包含 `@import` 指令，引入 `ui.core.css` 文件以及每个小部件 CSS 文件。但是，它不包含控制每个小部件外观的主题样式。
    |'
- en: '|'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '| This file provides core framework styles, such as the clear-fix helper and
    a generic overlay. |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| 此文件提供核心框架样式，如清除辅助程序和通用覆盖。 |'
- en: '|'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '| These files are the individual source files that control the layout and basic
    appearance of each widget. |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| 这些文件是控制每个小部件布局和基本外观的个别源文件。 |'
- en: '|'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '| This file contains the complete visual theme and targets of all the visual
    elements that make up each widget in the library. |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| 此文件包含库中每个小部件的完整视觉主题和目标的所有视觉元素。 |'
- en: Let's take a look at each of these files in more detail.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地查看每个文件。
- en: jquery.ui.all.css
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jquery.ui.all.css
- en: The `jquery.ui.all.css` file makes use of CSS imports, using the `@import` rule
    to read in two files—the `jquery.ui.base.css` and the `jquery.ui.theme.css` file.
    This is all that is present in the file and all that is needed to implement the
    complete framework and the selected theme.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`jquery.ui.all.css`文件使用 CSS 导入，使用`@import`规则读取两个文件——`jquery.ui.base.css`和`jquery.ui.theme.css`文件。这就是文件中存在的所有内容，以及实现完整框架和选定主题所需的所有内容。'
- en: From the two directives found in this file, we can see the separations between
    the part of the framework that makes the widgets function and the theme that gives
    them their visual appearance.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 从此文件中找到的两个指令中，我们可以看到使小部件功能的框架部分和赋予其视觉外观的主题之间的分隔。
- en: jquery.ui.base.css
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jquery.ui.base.css
- en: The `jquery.ui.base.css` file also consists of only `@import` rules, and imports
    the `jquery.ui.core.css` file along with each of the individual widget CSS files.
    At this point, I should mention that the resizable component has its own framework
    file, along with each of the widgets.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`jquery.ui.base.css`文件还包括仅有的`@import`规则，并且导入了`jquery.ui.core.css`文件以及每个单独的小部件
    CSS 文件。此时，我应该提到可调整大小的组件有自己的框架文件，以及每个小部件。'
- en: jquery.ui.core.css
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jquery.ui.core.css
- en: 'The `jquery.ui.core.css` file provides generic styles for the framework that
    are used by all components. It contains the following classes:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`jquery.ui.core.css`文件为所有组件提供通用样式。它包含以下类：'
- en: '| Class | Use |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| 类 | 用途 |'
- en: '| --- | --- |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `.ui-helper-hidden` | This class hides elements with `display: none`. |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| `.ui-helper-hidden` | 这个类通过`display: none`隐藏元素。 |'
- en: '| `.ui-helper-hidden-accessible` | This class hides elements by clipping them,
    so that the element remains fully accessible. The element is not hidden or positioned
    off-screen at all. |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| `.ui-helper-hidden-accessible` | 这个类通过裁剪元素来隐藏它们，以便元素仍然完全可访问。元素没有被隐藏或定位到屏幕外。|'
- en: '| `.ui-helper-reset` | This is the reset mechanism for jQuery UI (it doesn''t
    use a separate reset stylesheet), which neutralizes the margins, padding, and
    other common default styles applied to common elements by browsers. For an introduction
    to the importance of resetting default browser styling, visit: [http://sixrevisions.com/css/css-tips/css-tip-1-resetting-your-styles-with-css-reset/](http://sixrevisions.com/css/css-tips/css-tip-1-resetting-your-styles-with-css-reset/).
    |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| `.ui-helper-reset` | 这是 jQuery UI 的重置机制（它不使用单独的重置样式表），它中和了浏览器通过通用元素应用的边距、填充和其他常见默认样式。有关重置默认浏览器样式的重要性的介绍，请访问：[http://sixrevisions.com/css/css-tips/css-tip-1-resetting-your-styles-with-css-reset/](http://sixrevisions.com/css/css-tips/css-tip-1-resetting-your-styles-with-css-reset/)。|'
- en: '| `.ui-helper-clearfix` | The `.ui-helper-clearfix` styles are applied to the
    container itself. |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| `.ui-helper-clearfix` | `.ui-helper-clearfix`样式应用于容器本身。|'
- en: '| `.ui-helper-zfix` | The `.ui-helper-zfix` class provides rules that are applied
    to `<iframe>` elements, in order to fix z-index issues when overlays are used.
    |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| `.ui-helper-zfix` | `.ui-helper-zfix`类提供了应用于`<iframe>`元素的规则，以解决使用覆盖时的z-index问题。|'
- en: '| `.ui-state-disabled` | This class sets the cursor to default for disabled
    elements and uses the important directive to ensure that it is not overridden.
    |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| `.ui-state-disabled` | 这个类将禁用元素的光标设置为默认，并使用`important`指令确保它不会被覆盖。|'
- en: '| `.ui-icon` | This rule is the library''s method of replacing the text content
    of an element with a background image. The responsibility of setting the background
    images for the different icons found in the library is delegated to the `jquery.ui.theme.css`
    file. |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| `.ui-icon` | 这条规则是库用背景图替换元素的文本内容的方法。设置库中的不同图标的背景图像的责任被委托给`jquery.ui.theme.css`文件。|'
- en: '| `.ui-widget-overlay` | This class sets the basic style properties of the
    overlay that is applied to the page when dialogs and other modal pop ups are shown.
    As images are used by the overlay, some styles for this class are also found in
    the theme file. |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| `.ui-widget-overlay` | 这个类设置了显示对话框和其他模态弹出窗口时应用于页面的叠加的基本样式属性。由于叠加使用了图像，因此该类的一些样式也在主题文件中找到。|'
- en: The core file lays the foundation for the rest of the framework. We can also
    give these class names to our own elements, to clear floats or hide elements whenever
    we use the library, and especially when building new jQuery UI plugins for consistent
    theming with ThemeRoller.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 核心文件为框架的其余部分奠定了基础。我们还可以将这些类名赋予我们自己的元素，以在使用库时清除浮动或隐藏元素，并且在使用 ThemeRoller 一致主题的情况下构建新的
    jQuery UI 插件时使用。
- en: Explaining the individual component framework files
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解释各个组件框架文件
- en: Each widget in the library, as well as the resizable interaction helper, has
    a framework file that controls the CSS and makes the widget function correctly.
    For example, the tab headings in the tabs widget must be floated left in order
    to display them as tabs. The framework files set this rule. These styles will
    need to be presented when we are overriding the framework in a custom theme.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 库中的每个小部件以及可调整大小的交互助手都有一个控制 CSS 并使小部件正确运行的框架文件。例如，选项卡小部件中的选项卡标题必须向左浮动，以便将它们显示为选项卡。框架文件设置了此规则。当我们在自定义主题中覆盖框架时，这些样式将需要呈现出来。
- en: These files are brief, with each component using the smallest number of rules
    possible for it to function correctly. Generally the files are quite compact (usually
    not more than 15 style rules long). The Datepicker source file is the exception,
    as it requires a large number of rules to function correctly.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这些文件很简短，每个组件使用的规则数量尽可能少，以确保其正确运行。通常，文件非常紧凑（通常不超过15条样式规则）。Datepicker 源文件是个例外，因为它需要大量规则才能正确运行。
- en: jquery.ui.theme.css
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jquery.ui.theme.css
- en: This file will be customized to the theme that was selected or created with
    ThemeRoller.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件将根据使用 ThemeRoller 选择或创建的主题进行自定义。
- en: It sets all of the visual properties (colors, images, and so on) for the different
    elements that make up each widget.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 它设置了构成每个小部件的不同元素的所有视觉属性（颜色、图像等）。
- en: Within the `jquery.ui.theme.css` file, there are many comments that contain
    descriptive labels, enclosed within curly braces. These are called **placeholders**,
    and the CSS styles that precede them are updated by ThemeRoller automatically
    when the theme is generated.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在`jquery.ui.theme.css`文件中，有许多注释，其中包含在大括号中的描述性标签。这些称为**占位符**，当主题生成时，ThemeRoller
    会自动更新它们之前的 CSS 样式。
- en: This is the file that will be generated for the complete theme and it contains
    styles for all the visible parts of each widget when creating or selecting a theme
    using ThemeRoller. When overriding the framework to create a custom theme, it
    is mostly rules in this file that will be overridden.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这是为完整主题生成的文件，其中包含在使用 ThemeRoller 创建或选择主题时创建的每个小部件的所有可见部分的样式。当在自定义主题中覆盖框架时，主要是这个文件中的规则将被覆盖。
- en: Each widget is constructed from a set of common elements. For example, the outer
    container of each widget has the class named `ui-widget`, while any content within
    the widget will be held in a container with the class named `ui-widget-content`.
    It is this consistent layout and classing convention that makes the framework
    so effective.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 每个小部件都是由一组共同的元素构成的。例如，每个小部件的外部容器都具有名为`ui-widget`的类，而小部件内的任何内容都将放在名为`ui-widget-content`的容器中。正是这种一致的布局和分类约定使得该框架如此有效。
- en: Tip
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/supportand](http://www.packtpub.com/supportand)
    register to have the files e-mailed directly to you.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从您在[http://www.packtpub.com](http://www.packtpub.com)的帐户中下载您购买的所有 Packt 书籍的示例代码文件。如果您在其他地方购买了本书，您可以访问[http://www.packtpub.com/supportand](http://www.packtpub.com/supportand)注册，直接将文件发送到您的电子邮件中。
- en: 'This is the biggest stylesheet used by the framework and contains too many
    classes to list here in its entirety (but feel free to open it up at this point
    and take a look through it). The following table lists the different categories
    of classes:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这是框架中使用的最大样式表，其中包含太多类，无法在此完整列出（但现在可以打开它并查看）。以下表格列出了不同类别的类：
- en: '| Category | Use |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| 类别 | 用途 |'
- en: '| --- | --- |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Containers | This category sets style properties for widget, heading, and
    content containers. |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| 容器 | 此类别为小部件、标题和内容容器设置样式属性。 |'
- en: '| Interaction states | These classes set the default, hover, and active states
    for any clickable elements. |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| 交互状态 | 这些类设置了任何可点击元素的默认、悬停和活动状态。 |'
- en: '| Interaction cues | This category applies visual cues to elements including
    highlight, error, disabled, primary, and secondary styles. |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| 交互提示 | 此类别为元素应用了视觉提示，包括高亮、错误、禁用、主要和次要样式。 |'
- en: '| States and images | These classes set the images used for icons displayed
    in the content and heading containers, as well as any clickable elements including
    default, hover, active, highlight, focus, and error states. |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| 状态和图像 | 这些类设置了在内容和标题容器中显示的图标的图片，以及包括默认状态、悬停状态、活动状态、高亮状态、焦点状态和错误状态在内的可点击元素的图像。
    |'
- en: '| Image positioning | All of the icon images used by the theme are stored in
    a single sprite file, and are displayed individually by manipulating the background-position
    properties of the sprite file. This category sets the background positions for
    all individual icons. |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| 图像定位 | 主题中使用的所有图标图像都存储在单个精灵文件中，并通过操作精灵文件的背景位置属性来单独显示它们。这个类别设定了所有个别图标的背景位置。
    |'
- en: '| Corner radius | CSS3 is used to give rounded corners to supporting browsers
    (such as Firefox 3+, Safari 3+, Chrome 1+, Opera 10+, and IE9+). |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| 角半径 | CSS3 用于为支持的浏览器（如 Firefox 3+，Safari 3+，Chrome 1+，Opera 10+ 和 IE9+）提供圆角。
    |'
- en: '| Overlays | The image used for the generic overlay defined in the core CSS
    file is set here, as it is a class that implements a semi-transparent overlay
    over specified elements. |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| 叠加 | 在核心 CSS 文件中定义的通用叠加所使用的图像在这里设置，因为它是一个实现了对指定元素的半透明叠加效果的类。 |'
- en: 'The jQuery UI documentation features an extensive overview of the Theme API
    at: [http://api.jqueryui.com/category/theming/](http://api.jqueryui.com/category/theming/).'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery UI 文档中详细介绍了主题 API：[http://api.jqueryui.com/category/theming/](http://api.jqueryui.com/category/theming/)。
- en: Linking to the required framework files
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 链接到所需的框架文件
- en: 'For rapid theming of all jQuery UI widgets in a development environment, we
    can link to all of the individual files using `jquery.ui.all.css`:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发环境中，为了快速主题化所有 jQuery UI 小部件，我们可以使用`jquery.ui.all.css`链接到所有个别文件：
- en: '[PRE5]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'To use each file individually when testing a component such as the tabs widget,
    for example, we would use the following `<link>` elements:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要在测试选项卡小部件等组件时单独使用每个文件，我们将使用以下`<link>`元素：
- en: '[PRE6]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The CSS resources, when linked to separately, should be added to the HTML page
    in the following order: `core.css`, the widget''s CSS file, and the `theme.css`
    file.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 当单独链接到 CSS 资源时，应按以下顺序将其添加到 HTML 页面中：`core.css`，小部件的 CSS 文件，以及`theme.css`文件。
- en: 'In a production environment, of course, we''d use the super-efficient combined
    file to minimize the number of HTTP requests for CSS files. We need to link to
    the combined `jquery-ui-x.x.x.min.css` stylesheet found in the `css/themename/`
    directory, where x.x.x is the version number of jQuery UI you have downloaded:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，在生产环境中，我们将使用高效的合并文件来最小化对 CSS 文件的 HTTP 请求数量。我们需要链接到合并的`jquery-ui-x.x.x.min.css`样式表，该文件位于`css/themename/`目录中，其中
    x.x.x 是您下载的 jQuery UI 的版本号：
- en: '[PRE7]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: For easier coding and convenience, we'll be linking to the `development-bundle/themes/base/jquery.ui.all.css`
    file in all our examples. If you have unpacked the library as shown in the previous
    chapter, along with the `css`, `development-bundle`, and `js` folders, then the
    previous path to the CSS file will be correct. If you are using a different structure,
    please alter the path to the CSS file accordingly.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更轻松地编码和方便起见，在我们的所有示例中，我们将链接到`development-bundle/themes/base/jquery.ui.all.css`文件。如果您按照上一章节所示解压了库，那么与`css`，`development-bundle`和`js`文件夹一起，先前的
    CSS 文件路径将是正确的。如果您使用不同的结构，请相应地修改 CSS 文件的路径。
- en: Tip
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Creating the examples from this book**'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**创建本书的示例**'
- en: Throughout this book, you will note that we make reference to saving files in
    the `jqueryui` folder; you may wish to put a subfolder in for each chapter, so
    that the code is stored separately from other chapters. This is reflected in the
    code download that accompanies this book.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，您会注意到我们提到将文件保存在`jqueryui`文件夹中；您可能希望为每个章节创建一个子文件夹，以便代码可以与其他章节分开存储。这在本书附带的代码下载中有所体现。
- en: Using the framework classes
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用框架类
- en: Along with using the framework while we're implementing official jQuery UI widgets,
    we can also use it when we're deploying our own custom plugins.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在实现官方 jQuery UI 小部件的同时，我们还可以在部署自定义插件时使用它。
- en: Working with containers
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与容器一起工作
- en: Containers are recommended because it means that widgets or plugins that we
    write will be ThemeRoller-ready and easier for end-developers to theme and customize.
    Let's look at how easy it is to use the framework with our own elements.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 推荐使用容器，因为这意味着我们编写的小部件或插件将准备好ThemeRoller，并且更容易为最终开发人员提供主题和定制。让我们看看用我们自己的元素使用框架有多容易。
- en: 'In your text editor, create a new file and add the following code:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在文本编辑器中，创建一个新文件并添加以下代码：
- en: '[PRE8]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Save this page as `containers.html` within the `jqueryui` project folder that
    we created in [Chapter 1](ch01.html "Chapter 1. Introducing jQuery UI"), *Introducing
    jQuery UI*, when we unpacked the library. We're linking to the `jquery.ui.all.css`
    file from the base development theme in the library. If we were building a more
    complex widget, we'd probably want to link to the `jquery.ui.core.css` file as
    well.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 将此页面保存为`containers.html`，放在我们在[第1章](ch01.html "第1章. 介绍 jQuery UI")创建的`jqueryui`项目文件夹中，*介绍
    jQuery UI*，当我们解压缩库时。我们正在从库中的基本开发主题中链接到`jquery.ui.all.css`文件。如果我们要构建更复杂的小部件，我们可能也想链接到`jquery.ui.core.css`文件。
- en: Working with this file when creating widgets or plugins is essential, because
    it lets us verify that the class names we give our containers will pick up the
    appropriate styling, and reassures us that they will be ThemeRoller-ready. Any
    style that we need to apply ourselves would go into a separate stylesheet, just
    as each widget from the library has its own custom stylesheet.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建小部件或插件时，使用此文件非常重要，因为它可以让我们验证我们为容器提供的类名是否会获取适当的样式，并向我们保证它们将准备好供ThemeRoller使用。我们需要自己应用的任何样式都将放入单独的样式表中，就像库中的每个小部件都有自己的自定义样式表一样。
- en: We use only a couple of elements in this example. Our outer container is given
    the class name `ui-widget`.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们只使用了几个元素。我们的外部容器被赋予了类名`ui-widget`。
- en: 'Within the outer container, we have two other containers. One is the `ui-widget-heading`
    container and the other is the `ui-widget-content` container. We also give these
    elements variants of the corner-rounding classes: `ui-corner-top` and `ui-corner-bottom`,
    respectively.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在外部容器内部，我们有两个其他容器。一个是`ui-widget-heading`容器，另一个是`ui-widget-content`容器。我们还为这些元素提供了圆角类的变体：分别是`ui-corner-top`和`ui-corner-bottom`。
- en: Inside the header and content containers, we just have a couple of appropriate
    elements that we might want to put in, such as `<h2>` in the header and `<p>`
    in the content element. These elements will inherit some rules from their respective
    containers, but are not styled directly by the theme file.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在标题和内容容器内部，我们只有一些适当的元素，我们可能想要放入其中，比如标题中的`<h2>`和内容元素中的`<p>`。这些元素将继承一些规则，来自各自的容器，但不会直接由主题文件进行样式设置。
- en: 'When we view this basic page in a browser, we should see that our two container
    elements pick up the styles from the theme file as shown in the following screenshot:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在浏览器中查看这个基本页面时，我们应该看到我们的两个容器元素从主题文件中获取样式，如下面的屏幕截图所示：
- en: '![Working with containers](img/2209OS_02_01.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![使用容器](img/2209OS_02_01.jpg)'
- en: Using interactions
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用交互
- en: 'Let''s look at some more of the framework classes in action. In `containers.html`,
    remove the markup with the `<body>` tags, and add the following:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看框架类的更多实际操作。在`containers.html`中，删除带有`<body>`标签的标记，并添加以下内容：
- en: '[PRE9]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Let''s also alter the title too so it reflects what we are creating in the
    code—remove the existing `<title>`, and replace it with the following:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也要修改标题，以便反映我们在代码中正在创建的内容——删除现有的`<title>`，并替换为以下内容：
- en: '[PRE10]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Save this file as `interactions.html` in the `jqueryui` project folder. We've
    defined two clickable elements in these examples, which are comprised of a container
    `<div>` and an `<a>` element. Both containers are given the class names `ui-state-default`
    and `ui-corner-all`, but the first is also given the selected state `ui-state-active`.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 将此文件保存为`interactions.html`，放在`jqueryui`项目文件夹中。在这些示例中，我们定义了两个可点击元素，它们由一个容器`<div>`和一个`<a>`元素组成。两个容器都被赋予了类名`ui-state-default`和`ui-corner-all`，但第一个还被赋予了选定状态`ui-state-active`。
- en: 'This will give our clickable elements the following appearance:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使我们的可点击元素呈现如下外观：
- en: '![Using interactions](img/2209OS_02_02.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![使用交互](img/2209OS_02_02.jpg)'
- en: 'The CSS framework doesn''t provide styles on the `:hover` CSS pseudo-class.
    Instead it applies a set of styles using a class name, which is added using JavaScript.
    To see this in action before the closing `</body>` tag, add the following code:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: CSS框架不提供对`:hover` CSS伪类的样式。相反，它使用一个类名应用一组样式，该类名是使用JavaScript添加的。在闭合`</body>`标签之前，添加以下代码以查看其效果：
- en: '[PRE11]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Save this variation of the previous example file as `interactionsHovers.html`.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 将此前一个示例文件的变体保存为`interactionsHovers.html`。
- en: Note
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The version number of jQuery will change as the library continues to evolve;
    we've used Version 2.03 throughout this book. You should replace it with whichever
    version you've downloaded, if it is different.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery的版本号将随着库的不断发展而更改；我们在本书中始终使用版本2.03。如果版本不同，请将其替换为您下载的版本。
- en: 'Our simple script adds the `ui-state-hover` class name to a clickable element
    when the mouse pointer moves on to it, and then removes it when the mouse pointer
    moves off. When we run the page in a browser and hover over the second clickable
    element, we should see the `ui-state-hover` styles:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们简单的脚本将`ui-state-hover`类名称添加到可点击元素上，当鼠标指针移动到上面时，然后当鼠标指针移开时将其移除。当我们在浏览器中运行页面并悬停在第二个可点击元素上时，我们应该看到`ui-state-hover`样式：
- en: '![Using interactions](img/2209OS_02_03.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![使用交互](img/2209OS_02_03.jpg)'
- en: Adding icons
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加图标
- en: 'The framework also provides a series of images that we can use as icons. Change
    the contents of the ui-widget container in `interactionsHovers.html` so that it
    appears as follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 框架还提供了一系列可用作图标的图像。更改`interactionsHovers.html`中的ui-widget容器的内容，使其如下所示：
- en: '[PRE12]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Save this as `icons.html` in the `jqueryui` directory. In this example, our
    nested `<div>` elements, which have the classes `ui-icon` and `ui-icon-circle-plus`,
    are given the correct icon from a sprite file:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 将此保存为`icons.html`在`jqueryui`目录中。在这个示例中，我们的嵌套`<div>`元素，其具有`ui-icon`和`ui-icon-circle-plus`类，从精灵文件中获得了正确的图标：
- en: '![Adding icons](img/2209OS_02_04.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![添加图标](img/2209OS_02_04.jpg)'
- en: Note
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you are not already familiar with how sprites work, then it is worth reading
    about this technique—have a look at [http://nerdwith.me/news/css-sprites-for-beginners/](http://nerdwith.me/news/css-sprites-for-beginners/)
    for an example of how to create sprite images. If you need to create sprite images,
    then the CSS Sprites Generator at [http://csssprites.com/](http://csssprites.com/)
    is a good site to use.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还不熟悉精灵是如何工作的，那么值得了解一下这种技术——请参阅[http://nerdwith.me/news/css-sprites-for-beginners/](http://nerdwith.me/news/css-sprites-for-beginners/)，了解如何创建精灵图像的示例。如果您需要创建精灵图像，那么[http://csssprites.com/](http://csssprites.com/)的CSS
    Sprites生成器是一个很好的网站。
- en: As you can see, the `ui-state-active` icon differs slightly from the `ui-state-default`
    icon (as well as the `ui-state-hover` icon). We haven't positioned the icons at
    all in this example, because this would necessitate the creation of a new stylesheet.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，`ui-state-active`图标与`ui-state-default`图标（以及`ui-state-hover`图标）略有不同。在此示例中，我们没有定位图标，因为这将需要创建一个新的样式表。
- en: The point of this example is to see how the icons can be automatically added
    using the class names from the framework, without having to add any extra CSS
    styling by default.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 本示例的重点是查看如何使用框架的类名称自动添加图标，而无需默认添加任何额外的CSS样式。
- en: Note
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'If we wanted to adjust the positioning, we could have overridden the `.existing
    .ui-icon` class by adding an extra style, such as `span.ui-icon { float: left;
    }`, which would reposition the icons to the left of the text in each `<span>`.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '如果我们想要调整定位，我们可以通过添加额外的样式来覆盖`.existing .ui-icon`类，例如`span.ui-icon { float: left;
    }`，这将将图标重新定位到每个`<span>`中文本的左侧。'
- en: Examining the icons in detail
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 详细检查图标
- en: Now that we have seen some of the icons in use, let's take a look at how you
    can use them in more detail.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到一些图标的使用，让我们更详细地了解如何使用它们。
- en: The icons come in the form of a sprite image, which we download as part of the
    theme. In the main `css` folder in the library, you will find more than one theme
    folders. Depending on how many you need to download; each theme library contains
    a number of sprite images that are used by jQuery UI to produce the icons, such
    as the ones we've seen in the previous example.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 图标以精灵图的形式呈现，作为主题的一部分进行下载。在库中的主要`css`文件夹中，您会发现不止一个主题文件夹。根据您需要下载的数量，每个主题库都包含多个由jQuery
    UI使用的精灵图像，用于生成图标，例如我们在前面示例中看到的那些。
- en: 'When viewing the image sprites containing our icons, they will look something
    as follows:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 查看包含我们图标的图像精灵，它们将看起来像下面这样：
- en: '![Examining the icons in detail](img/2209OS_02_05.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![仔细检查图标](img/2209OS_02_05.jpg)'
- en: 'If we examine the code within a DOM inspector such as Firebug, you will find
    at least two styles are added, such as:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们检查DOM检查器（如Firebug）中的代码，您将发现至少添加了两种样式，例如：
- en: '[PRE15]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The format of the icon CSS will usually follow `.ui-icon-{icon type}-{icon sub
    description}-{direction}`; it should be noted that a third class will be added
    if you are using the `icon` option within widgets, such as the accordion.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图标 CSS 的格式通常遵循`.ui-icon-{图标类型}-{图标子描述}-{方向}`；应该注意，如果你在小部件中使用`icon`选项，例如手风琴，则会添加第三个类。
- en: Each icon element is given a base class of `.ui-icon`, which will set dimensions
    of the icon to a 16 px square block, hides inner text, and sets the background
    image with the chosen sprite image. The background sprite image used will depend
    on its parent container; for example a `ui-icon` element within a `ui-state-default`
    container will get colored according to the `ui-state-default`'s icon color.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 每个图标元素都被赋予一个基本类`.ui-icon`，它将图标的尺寸设置为 16 像素的方块，隐藏内部文本，并使用选择的精灵图像设置背景图像。使用的背景精灵图像将取决于其父容器；例如，在`ui-state-default`容器中的`ui-icon`元素将根据`ui-state-default`的图标颜色进行着色。
- en: Adding custom icons
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加自定义图标
- en: Adding icons to widgets does not need to be limited to those within the library.
    It is possible to use your own custom icons.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 向小部件添加图标不必局限于库中的图标。你可以使用自定义图标。
- en: To do this, we have two options—you can reference individual files, or use similar
    image sprites; the latter is preferable, particularly if you use multiple custom
    icons, as the sprite that contains them will be cached once loaded.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，我们有两个选项——你可以引用单个文件，或者使用类似的图像精灵；后者更可取，特别是如果你使用多个自定义图标，因为包含它们的精灵在加载后将被缓存。
- en: Tip
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: You can see a full list of icons available within the core jQuery UI library,
    along with their icon class names, at [http://api.jqueryui.com/theming/icons/](http://api.jqueryui.com/theming/icons/).
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 [http://api.jqueryui.com/theming/icons/](http://api.jqueryui.com/theming/icons/)
    上看到核心 jQuery UI 库中提供的所有图标及其图标类名的完整列表。
- en: 'To reference the icons, you will need to add your own custom style, which overrides
    the `.ui-icon` class—this is to ensure that jQuery UI doesn''t try to apply its
    own styles that cancel out your own. An example of such a custom class would look
    something as follows:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 为了引用这些图标，你需要添加你自己的自定义样式，覆盖`.ui-icon`类——这是为了确保 jQuery UI 不会尝试应用取消你自己样式的样式。这样一个自定义类的示例如下所示：
- en: '[PRE16]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We can then apply our new style to our chosen widget, as illustrated using
    this example of a jQuery UI Button:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将新样式应用到我们选择的小部件中，就像使用 jQuery UI 按钮的示例所示：
- en: '[PRE17]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: As long as the icon is of the right format, and is correctly referenced in our
    code, then we are free to add whichever icons we desire; it is worth researching
    options online, as there will be plenty of icons available for use, such as the
    Font Awesome library at [http://fortawesome.github.io/Font-Awesome/icons/](http://fortawesome.github.io/Font-Awesome/icons/),
    or IcoMoon, which you can download from [http://icomoon.io/](http://icomoon.io/).
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 只要图标格式正确，并且在我们的代码中正确引用，那么我们可以自由地添加任何我们想要的图标；值得在线上搜索选项，因为会有大量可供使用的图标，例如 [http://fortawesome.github.io/Font-Awesome/icons/](http://fortawesome.github.io/Font-Awesome/icons/)
    上的 Font Awesome 库，或者可以从 [http://icomoon.io/](http://icomoon.io/) 下载的 IcoMoon。
- en: Tip
  id: totrans-145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Why does my icon appear on a new line?**'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '**为什么我的图标会出现在新行上？**'
- en: 'In some instances, you may find that your icon appears on a new line above
    or below the text in your widget, as illustrated in our icons example earlier
    in this chapter. The reason for this is the `display: block` attribute in the
    `.ui-icon` class:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '在某些情况下，你可能会发现你的图标出现在小部件中的文本上方或下方的新行中，就像本章早些时候的图标示例所示。这是由于`.ui-icon`类中的`display:
    block`属性造成的：'
- en: '`.ui-icon { display: block; text-indent: -99999px; overflow: hidden; background-repeat:
    no-repeat; }`To get around it, you can use a float attribute, and set it to show
    the icon on the left, right, or center as appropriate.'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，你可以使用浮动属性，并将其设置为适当的左、右或中心位置来显示图标。
- en: Using custom icons – a note
  id: totrans-149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用自定义图标 - 一则说明
- en: If you decide to use custom icons, then there is nothing that will prevent you
    from doing so, this could open up a wealth of possibilities! You do need to note
    that using custom icons requires the use of two classes—the `base .ui-icon`, followed
    by your own custom class. This is to ensure the icons display correctly, and prevent
    jQuery UI from trying to override your own icon.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你决定使用自定义图标，那么没有任何东西会阻止你这样做，这将打开大量的可能性！你需要注意的是，使用自定义图标需要使用两个类——`base .ui-icon`，然后是你自己的自定义类。这是为了确保图标显示正确，并防止
    jQuery UI 尝试覆盖你自己的图标。
- en: There is a risk that using your own icons may conflict with styles within the
    framework, if care is not taken in ensuring that the icons are of the right dimensions;
    it is strongly recommended that you look carefully through the existing icon library
    that is provided, as the jQuery UI team may have already converted something that
    could be of use. Alternatively a look online could help too; custom themes have
    been written for jQuery UI, and you may find one that contains the icon(s) you
    need.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不注意确保图标的尺寸正确，使用自己的图标可能会与框架内的样式冲突；强烈建议您仔细查看提供的现有图标库，因为jQuery UI团队可能已经转换了一些可能有用的内容。另外，线上搜索也可能会有帮助；为jQuery
    UI编写了自定义主题，您可能会找到包含您需要的图标的主题。
- en: Interaction cues
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 交互提示
- en: 'Another set of classes we can use is the interaction cues. We will look at
    another example using these. In a new page in your text editor, add the following
    code. This will create a form example, where we can see the cues in action:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 另一组我们可以使用的类是交互提示。我们将看另一个使用这些的例子。在文本编辑器中的新页面中，添加以下代码。这将创建一个表单示例，我们可以在其中看到提示的作用：
- en: '[PRE18]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Save this file as `cues.html` in the `jqueryui` folder. This time we link to
    a custom file, `jquery.ui.form.css` that we'll create in a moment.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 将此文件保存为`cues.html`，放在`jqueryui`文件夹中。这次我们链接到一个自定义文件，`jquery.ui.form.css`，我们马上就会创建它。
- en: On the page, we have the outer widget container, with the class names `ui-form`
    and `ui-widget`. The `ui-form` class will be used to pick up our custom styles
    from the `jquery.ui.form.css` stylesheet. Within the widget, we have `ui-widget-header`
    and `ui-widget-content` containers.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在页面上，我们有外部小部件容器，具有`ui-form`和`ui-widget`类名。`ui-form`类将用于从`jquery.ui.form.css`样式表中选取我们的自定义样式。在小部件内部，我们有`ui-widget-header`和`ui-widget-content`容器。
- en: Within the content section, we've got a `<form>` with a single row of elements,
    a `<label>` element followed by a `<div>` element that has the `ui-state-error`
    and `ui-corner-all` class names hardcoded to it.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在内容部分，我们有一个带有一行元素的`<form>`，一个`<label>`元素，后面跟着一个`<div>`元素，其中硬编码了`ui-state-error`和`ui-corner-all`类名。
- en: Within this `<div>` element, we have a standard `<input>`, a `<div>` with the
    `ui-icon`, and `ui-icon-alert` classes added, along with a `<p>` element with
    the `ui-state-error-text` class name added to it. Because the `<form>` will have
    child elements that are floated due to styles we will add in `jquery.ui.form.css`,
    we can make use of the `ui-helper-clearfix` class to clear the floats, which we
    add as a class name.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个`<div>`元素内部，我们有一个标准的`<input>`，一个带有`ui-icon`和`ui-icon-alert`类的`<div>`，以及一个添加了`ui-state-error-text`类名的`<p>`元素。因为`<form>`将有由于我们将在`jquery.ui.form.css`中添加的样式而浮动的子元素，所以我们可以利用`ui-helper-clearfix`类来清除浮动，我们将其添加为一个类名。
- en: 'We should now create the custom `jquery.ui.form.css` stylesheet. In a new file
    in your text editor, add the following code:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们应该创建自定义的`jquery.ui.form.css`样式表。在文本编辑器中的新文件中，添加以下代码：
- en: '[PRE19]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Within our `jqueryui` project folder, there is a folder called `css` that is
    used to store the single-file production version of the framework. All of the
    CSS files we create throughout the book will also be saved in here for convenience.
    Save this file as `jquery.ui.form.css` in the `css` folder.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`jqueryui`项目文件夹中，有一个名为`css`的文件夹，用于存储框架的单文件生产版本。我们在本书中创建的所有CSS文件也将保存在这里以方便使用。将此文件保存为`jquery.ui.form.css`，放在`css`文件夹中。
- en: 'Imagine we have more forms of elements and a submit button. By adding the `ui-state-error`
    class to the `<div>` element, we can use the error classes for form validation,
    which upon an unsuccessful submission would show the icon and text. The following
    screenshot shows how the page should look:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 想象我们有更多的表单元素和一个提交按钮。通过将`ui-state-error`类添加到`<div>`元素，我们可以使用表单验证的错误类，如果提交不成功，将显示图标和文本。以下截图显示页面应该是什么样子的：
- en: '![Interaction cues](img/2209OS_02_06.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![交互提示](img/2209OS_02_06.jpg)'
- en: Switching themes quickly and easily
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 快速轻松地切换主题
- en: Once we have developed content using the base theme, we may decide to change
    the theme to something that fits in better with our overall site theme; thankfully,
    the CSS framework makes switching themes a painless task. Looking at the previous
    example, all we need to do to change the skin of the widget is choose a new theme
    using ThemeRoller (available at [http://www.jqueryui.com/themeroller](http://www.jqueryui.com/themeroller)),
    and then download the new theme. We can download the new theme by selecting all
    of the components in the download builder and clicking on **Download** to obtain
    the theme.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们使用基本主题开发了内容，我们可能会决定将主题更改为与我们整体网站主题更好地匹配的主题；幸运的是，CSS框架使更换主题变得轻松。看看之前的例子，要改变小部件的外观只需选择一个新的主题使用ThemeRoller（可在[http://www.jqueryui.com/themeroller](http://www.jqueryui.com/themeroller)获得），然后下载新主题。我们可以通过在下载构建器中选择所有组件并单击**下载**来下载新主题以获取新主题。
- en: 'Within the downloaded archive, there will be a directory with the name of the
    chosen theme, such as **redmond**. We drag the `theme` folder out of the archive
    into the `development-bundle\themes` folder and link the new theme file from our
    page, giving our form a completely new look as shown in the following screenshot:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在下载的存档中，会有一个以所选主题命名的目录，比如**redmond**。我们将`theme`文件夹从存档中拖到`development-bundle\themes`文件夹中，并从我们的页面链接新的主题文件，使我们的表单呈现出全新的外观，如下面的截图所示：
- en: '![Switching themes quickly and easily](img/2209OS_02_07.jpg)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![快速轻松地切换主题](img/2209OS_02_07.jpg)'
- en: The theme I used to obtain this screenshot is redmond. This uses various shades
    of blue, either for the background or normal text; selected options, such as tab
    headings or selected items in a widget will appear either in orange text or with
    an orange background. We'll be using this theme, or themes of our own creation
    for the remainder of the book.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 我用来获得这个截图的主题是redmond。这个主题使用了各种蓝色的色调，要么是作为背景要么是作为普通文本；选定的选项，比如选项卡标题或小部件中选定的项目将以橙色文本或橙色背景显示。在本书的剩余部分中，我们将使用这个主题，或者我们自己创建的主题。
- en: Overriding the theme
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 覆盖主题
- en: Using the ThemeRoller gallery and customization tools, we can generate an extraordinary
    number of unique themes. But there may be times when we need a deeper level of
    customization than we are able to reach using ThemeRoller; in this situation we
    have two options.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 使用ThemeRoller画廊和自定义工具，我们可以生成大量独特的主题。但有时候我们可能需要比使用ThemeRoller能够达到的更深层次的定制化；在这种情况下，我们有两个选择。
- en: We can either create a complete theme file from scratch by ourselves, or we
    can create an additional stylesheet that overrides only those rules in the `jquery.ui.theme.css`
    file that we need. The latter is probably the easiest method and results in having
    to write less code.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以要么自己从头创建完整的主题文件，要么创建一个额外的样式表，只覆盖我们需要的`jquery.ui.theme.css`文件中的规则。后者可能是最简单的方法，并且需要编写的代码更少。
- en: 'We''ll now take a look at this aspect of theming. Switch back to the base theme
    in `<head>` of `cues.html`, if you changed it for the previous example. Save the
    page as `cuesOverridden.html` and then create the following new stylesheet:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将看一下主题的这个方面。如果你已经为之前的示例更改了基本主题，请切换回`cues.html`的`<head>`中的基本主题。将页面保存为`cuesOverridden.html`，然后创建以下新样式表：
- en: '[PRE20]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Save this as `overrides.css` in the `css` folder. In this stylesheet we''re
    mostly overriding rules from the `jquery.ui.theme.css` file. These are simple
    styles and we''re just changing colors, backgrounds, and borders. Link to this
    stylesheet by adding the following line of code below the other stylesheet in
    `cuesOverridden.html`:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 将其保存为`overrides.css`放在`css`文件夹中。在这个样式表中，我们主要是覆盖了`jquery.ui.theme.css`文件中的规则。这些是简单的样式，我们只是改变了颜色、背景和边框。通过在`cuesOverridden.html`的其他样式表下面添加以下代码行来链接到这个样式表：
- en: '[PRE21]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Our humble form should now appear as in the following screenshot:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 我们谦逊的表单现在应该呈现如下截图中所示：
- en: '![Overriding the theme](img/2209OS_02_08.jpg)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![覆盖主题](img/2209OS_02_08.jpg)'
- en: 'As long as our stylesheet appears after the `theme` file, and that we match
    or exceed the specificity of the selectors used in the `jquery.ui.theme.css` file,
    our rules will take precedence. A long discussion on CSS selector weight is beyond
    the scope of this book. However, a brief explanation of specificity may be beneficial
    as it is the key to overriding the selected theme. CSS specificity refers to how
    specific a CSS selector is—the more specific it is, the more weight it will have,
    and will subsequently override other rules that are applied to the element being
    targeted by other selectors. For example, consider the following selectors:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 只要我们的样式表出现在`theme`文件之后，并且我们的选择器特异性匹配或超过了`jquery.ui.theme.css`文件中使用的选择器，我们的规则就会优先。对
    CSS 选择器权重的长时间讨论超出了本书的范围。但是，简要解释特异性可能是有益的，因为它是覆盖所选主题的关键。CSS 特异性指的是 CSS 选择器的特异性程度——它越具体，权重就越大，随后将覆盖其他选择器应用于其他选择器所针对的元素的规则。例如，考虑以下选择器：
- en: '[PRE22]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The first selector is more specific than the second selector, because it not
    only uses the class name of the element being targeted, but also the ID of its
    parent container. It will therefore override the second selector, regardless of
    whether the second selector appears after it.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个选择器比第二个选择器更具体，因为它不仅使用了目标元素的类名，还使用了其父容器的 ID。因此，它将覆盖第二个选择器，无论第二个选择器是否在其之后出现。
- en: Note
  id: totrans-181
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you would like to learn more about CSS specificity, then there are lots of
    good articles on the Internet. As a start, you might like to look at [http://designshack.net/articles/css/what-the-heck-is-css-specificity/](http://designshack.net/articles/css/what-the-heck-is-css-specificity/),
    or [http://reference.sitepoint.com/ css/specificity](http://reference.sitepoint.com/
    css/specificity). Alternatively, you may like to work through Chris Coyier's example,
    at [http://css-tricks.com/specifics-on-css-specificity/](http://css-tricks.com/specifics-on-css-specificity/).
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想了解更多关于 CSS 特异性的信息，那么互联网上有许多优秀的文章。作为一个开始，您可能想看看 [http://designshack.net/articles/css/what-the-heck-is-css-specificity/](http://designshack.net/articles/css/what-the-heck-is-css-specificity/)，或者
    [http://reference.sitepoint.com/ css/specificity](http://reference.sitepoint.com/
    css/specificity)。或者，您可能想完成克里斯·科耶的示例，网址是 [http://css-tricks.com/specifics-on-css-specificity/](http://css-tricks.com/specifics-on-css-specificity/)。
- en: In this example, we have full control over the elements that we're skinning.
    But when working with any widgets from the library or with plugins authored by
    third parties, a lot of markup could be generated automatically, which we have
    no control over (without hacking the actual library files themselves).
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们完全控制了我们正在修饰的元素。但是，当与库中的任何小部件或由第三方编写的插件一起工作时，可能会自动生成大量标记，我们无法控制（除非修改实际的库文件本身）。
- en: 'Therefore, we may need to rely on overriding styles in this way. All we need
    to do to find which styles to override is open up the `jquery.ui.theme.css` file
    in a text editor and take a look at the selectors used there. Failing to do that,
    we can use Firebug''s CSS viewer to see the rules that we need to override as
    in the following example:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可能需要依赖这种方式来覆盖样式。我们只需在文本编辑器中打开`jquery.ui.theme.css`文件并查看其中使用的选择器即可找到要覆盖的样式。如果未能做到这一点，我们可以使用
    Firebug 的 CSS 查看器来查看我们需要覆盖的规则，就像下面的示例一样：
- en: '![Overriding the theme](img/2209OS_02_09.jpg)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![覆盖主题](img/2209OS_02_09.jpg)'
- en: Tip
  id: totrans-186
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**DOM Explorers**'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '**DOM 探查器**'
- en: All modern browsers have DOM explorers and CSS inspectors like Firebug that
    can be used to see the order in which CSS rules are being applied. Using the browser's
    CSS inspector is usually the most convenient way of checking CSS order.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 所有现代浏览器都有像 Firebug 这样的 DOM 探查器和 CSS 检查器，可以用来查看 CSS 规则应用的顺序。使用浏览器的 CSS 检查器通常是检查
    CSS 顺序的最方便方式。
- en: The position utility
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定位实用工具
- en: The position utility is a powerful stand-alone utility that is used to position
    any element relative to the window, the document, a specific element, or the mouse
    pointer. It is unique among library components, in that it doesn't require `jquery.ui.core.js`
    or `jquery.effects.core.js` as dependencies.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 定位实用工具是一个强大的独立工具，用于将任何元素相对于窗口、文档、特定元素或鼠标指针定位。它在库组件中是独一无二的，因为它不需要`jquery.ui.core.js`或`jquery.effects.core.js`作为依赖项。
- en: 'It exposes no unique or custom methods (other than the `position()` method),
    and fires no events, but it does come with a series of configuration options that
    allow us to use it. These options are listed in the following table:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 它不公开任何独特或自定义的方法（除了`position()`方法），也不触发任何事件，但它确实提供了一系列配置选项，让我们可以使用它。这些选项在下表中列出：
- en: '| Option | Format | Used to |'
  id: totrans-192
  prefs: []
  type: TYPE_TB
  zh: '| 选项 | 格式 | 用于 |'
- en: '| --- | --- | --- |'
  id: totrans-193
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| at | string | Specify the edges of the element that is being positioned against.
    Formatted as, for example, left bottom. |'
  id: totrans-194
  prefs: []
  type: TYPE_TB
  zh: '| at | 字符串 | 指定要对齐的定位元素的边缘。格式为，例如，left bottom。 |'
- en: '| collision | string | Move the positioned element to an alternative position
    when the positioned element overflows its container. |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
  zh: '| collision | 字符串 | 当定位元素溢出其容器时，将定位元素移动到替代位置。 |'
- en: '| my | string | Specify the edges of the element being positioned that are
    expected to be aligned to the element being positioned against, for example right
    top. |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
  zh: '| my | 字符串 | 指定预期与要定位的元素对齐的定位元素的边缘，例如 right top。 |'
- en: '| of | selector, jQuery, object, eventobject | Specify the element to position
    against the positioned element. When a selector or jQuery object is provided,
    the first matched element is used. When an event object is provided, the pageX
    and pageY properties are used |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
  zh: '| of | 选择器，jQuery，对象，事件对象 | 指定相对于定位元素的元素。当提供选择器或 jQuery 对象时，使用第一个匹配的元素。当提供事件对象时，使用
    pageX 和 pageY 属性 |'
- en: '| using | function | Accepts a function, which actually positions the positioned
    element. This function receives an object containing the top and left values of
    the new position. |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
  zh: '| using | 函数 | 接受一个函数，实际上定位定位元素。该函数接收一个包含新位置的 top 和 left 值的对象。 |'
- en: Using the position utility
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用位置实用程序
- en: 'Using the position utility is easy. Let''s look at a few examples; create the
    following page in your text editor:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 使用位置实用程序非常简单。让我们看几个例子；在您的文本编辑器中创建以下页面：
- en: '[PRE23]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Save this as `position.html`. We also use a very basic stylesheet in this example,
    consisting of the following styles:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 将此保存为`position.html`。在这个例子中，我们还使用了一个非常基本的样式表，其中包含以下样式：
- en: '[PRE24]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Save this file in the `css` folder as `position.css`. The element that we are
    positioning against, as well as the element that we are positioning itself, can
    be set to either relative, absolute, or static positioning, without affecting
    how the positioned element behaves. If the element we are positioning against
    is moved using its top, left, bottom, or right style properties, the element we
    are positioning will take account of this and still work correctly.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 将此文件保存在`css`文件夹中，命名为`position.css`。我们正在定位的元素以及我们自身的定位元素可以设置为相对、绝对或静态定位，而不会影响定位元素的行为。如果我们要定位的元素使用其
    top、left、bottom 或 right 样式属性移动，我们要定位的元素将考虑到这一点，并且仍然可以正常工作。
- en: 'On the page we just have two `<div>` elements: one is what we will be positioning
    against, and the other is the actual element we will be positioning. jQuery itself
    is a requirement so we link to that within the `<head>` element, and we also link
    to the position utility''s source file. As I mentioned earlier, we don''t need
    to link to the `jquery.ui.core.js` file when using position by itself.'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在页面上，我们只有两个`<div>`元素：一个是我们要定位的元素，另一个是我们要定位的实际元素。jQuery 本身是一个要求，所以我们在`<head>`元素中链接到它，并且我们还链接到位置实用程序的源文件。正如我之前提到的，当单独使用位置时，我们不需要链接到`jquery.ui.core.js`文件。
- en: 'The minimum configuration we can use, as we have in this example, is to set
    the `of` option, against which we use to specify the element we are positioning.
    When we set just this one option, the element we are positioning is placed exactly
    in the center of the element we are positioning against, as shown in the following
    screenshot:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用的最小配置，就像我们在这个例子中所做的那样，就是设置`of`选项，以指定我们要定位的元素。当我们只设置了这一个选项时，我们要定位的元素会被放置在我们要定位的元素的正中央，如下面的截图所示：
- en: '![Using the position utility](img/2209OS_02_10.jpg)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![使用位置实用程序](img/2209OS_02_10.jpg)'
- en: This alone is incredibly useful as the element is not only centered horizontally,
    but vertically too.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 这本身就非常有用，因为元素不仅在水平方向上居中，而且在垂直方向上也是如此。
- en: 'By using the `my` and `at` properties as well, we can place any edge of the
    positioned element against any edge of the element we are positioning against.
    Change the code within the outer function so that it appears as follows (new/altered
    code is shown in bold):'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用`my`和`at`属性，我们还可以将定位元素的任何边缘放置在我们正在定位的元素的任何边缘上。更改外部函数中的代码，使其显示如下（新/更改的代码以粗体显示）：
- en: '[PRE25]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The following screenshot shows the output of this code:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了此代码的输出：
- en: '![Using the position utility](img/2209OS_02_11.jpg)'
  id: totrans-212
  prefs: []
  type: TYPE_IMG
  zh: '![使用定位实用程序](img/2209OS_02_11.jpg)'
- en: The `my` option refers to the element that is being positioned. The first part
    of the string, which is supplied as the value of this option, is the horizontal
    axis, and can be set to left, center, or right. The second part is the vertical
    axis, and can be set to top, center, or bottom.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '`my`选项指的是正在定位的元素。该选项的值作为字符串的第一部分被提供，它是水平轴，可以设置为左、中或右。第二部分是垂直轴，可以设置为顶部、中部或底部。'
- en: The `at` option refers to the horizontal and vertical edges of the element being
    positioned against. It also accepts a string in the same format as the `my` configuration
    option.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '`at`选项指的是正在定位的元素的水平和垂直边缘。它还接受与`my`配置选项相同格式的字符串。'
- en: Explaining collision avoidance
  id: totrans-215
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解释碰撞避免
- en: The position utility has a built-in collision detection system to prevent the
    element that is being positioned from overflowing the viewport. There are two
    different options that we can use to set what happens when a collision is detected.
    The default is `flip`, which causes the element to flip and align the opposite
    edges of those configured.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 定位实用程序具有内置的碰撞检测系统，以防止正在定位的元素溢出视口。我们可以使用两种不同的选项来设置检测到碰撞时发生的情况。默认值为`flip`，这会导致元素翻转并将其对齐到已配置的相反边缘。
- en: For example, if we position a `<div>` element's right edge to align to the left
    edge of another element, it will be flipped to have its right edge aligned to
    the positioning element's right edge instead, if it overflows the viewport.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们将一个`<div>`元素的右边缘定位到另一个元素的左边缘，如果它溢出了视口，它将被翻转，使其右边缘与定位元素的右边缘对齐。
- en: 'Change the configuration in `position.html` to the following:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 将`position.html`中的配置更改为以下内容：
- en: '[PRE26]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'This would result in the following positioning:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 这将导致以下定位：
- en: '![Explaining collision avoidance](img/2209OS_02_12.jpg)'
  id: totrans-221
  prefs: []
  type: TYPE_IMG
  zh: '![解释碰撞避免](img/2209OS_02_12.jpg)'
- en: 'The other mode of collision avoidance is `fit`, which will honor the configured
    positioning as much as possible, but adjust the element''s positioning, so that
    it stays within the viewport. Configure the collision option as follows:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 碰撞避免的另一种模式是`fit`，它会尽可能尊重配置的定位，但调整元素的定位，使其保持在视口内。将碰撞选项配置如下：
- en: '[PRE27]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Save this file as `positionFit.html`. This time, the element is positioned
    as close as possible to its intended position:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 将此文件保存为`positionFit.html`。这次，元素被尽可能地定位到其预期位置：
- en: '![Explaining collision avoidance](img/2209OS_02_13.jpg)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![解释碰撞避免](img/2209OS_02_13.jpg)'
- en: Tip
  id: totrans-226
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: We can also set the value of the `collision` option to `none` to disable collision
    detection entirely, and allow the positioned element to overflow the viewport.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以将`collision`选项的值设置为`none`，以完全禁用碰撞检测，并允许定位元素溢出视口。
- en: Positioning with a function
  id: totrans-228
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用函数进行定位
- en: 'We can set the `using` option to a function, and position the positioned element
    manually. Change the configuration so that it appears as follows:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将`using`选项设置为一个函数，并手动定位被定位的元素。更改配置，使其显示如下：
- en: '[PRE28]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Save this change as `positionFunction.html`. We supply an anonymous function
    as the value of the `using` option. This function is passed as a single argument
    that is an object containing the properties top and left, which correspond to
    the values that the element we are positioning should be given.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 将此更改保存为`positionFunction.html`。我们将一个匿名函数作为`using`选项的值提供。此函数作为单个参数传递，该参数是一个包含属性top和left的对象，这些属性对应于我们正在定位的元素应该具有的值。
- en: As you can see from this code, we still need to position the element manually,
    but the function allows us to do any preprocessing of the element that may be
    required. Within the function, the `this` object is set to the element being positioned.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 如你从这段代码中所见，我们仍然需要手动定位元素，但该函数允许我们对可能需要的元素进行任何预处理。在函数内部，`this`对象被设置为被定位的元素。
- en: Using the position widget in a real-world example
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在实际示例中使用定位小部件
- en: So far, we've considered the theory behind using the position widget; before
    moving on to look at the widget factory, let us take a moment to consider how
    we can use the position widget in a real-world scenario.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经考虑了使用位置小部件的理论；在转向查看小部件工厂之前，让我们花点时间考虑一下如何在实际情况中使用位置小部件。
- en: A perfect example comes in the shape of jQuery UI's Dialog widget, configured
    to work as a modal dialog. Here we can use the position widget to place the dialog
    box on the page in relation to the button's current location.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 一个完美的例子是jQuery UI的对话框小部件，配置为作为模态对话框运行。在这里，我们可以使用位置小部件将对话框放置在页面上，相对于按钮当前的位置。
- en: 'To see how, add the following code to a new file in your text editor:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解如何做，请将以下代码添加到文本编辑器中的新文件中：
- en: '[PRE29]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'We need some markup, so add the following code in between the `<body>` tags:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一些标记，因此请在`<body>`标签之间添加以下代码：
- en: '[PRE30]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Finally, in order to tie it together and make it work, add the following script
    as the last entry before the closing `</head>` tag:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，为了将其整合并使其正常工作，请在关闭`</head>`标签之前添加以下脚本作为最后一个条目：
- en: '[PRE31]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'If we preview this in a browser, you''ll see that we can''t do anything with
    the text in the background when clicking on the button:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在浏览器中预览这个页面，你会发现当点击按钮时，我们无法对背景中的文本进行任何操作：
- en: '![Using the position widget in a real-world example](img/2209OS_02_14.jpg)'
  id: totrans-243
  prefs: []
  type: TYPE_IMG
  zh: '![在实际例子中使用位置小部件](img/2209OS_02_14.jpg)'
- en: Here, we've instigated a UI dialog, and configured it to work as a modal; autopen
    has been set to `false`, so that the dialog doesn't show when displaying the page.
    We've then created a simple click handler to show the dialog on the click of a
    button; this is followed by a call to the position widget, where we set the `my`
    and `at` attributes, to correctly display the dialog in relation to the current
    position of the button.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们启动了一个UI对话框，并将其配置为作为模态对话框运行；`autopen`已设置为`false`，以便在显示页面时不显示对话框。然后，我们创建了一个简单的点击处理程序，在按钮点击时显示对话框；然后调用位置小部件，其中我们设置了`my`和`at`属性，以正确显示对话框相对于按钮的当前位置。
- en: The widget factory
  id: totrans-245
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 小部件工厂
- en: Another tool within the jQuery UI library is the widget factory, which was introduced
    in Version 1.8 of jQuery UI, and has since undergone some important changes. This
    splits the functionality that allows widgets to be easily created into a separate
    and standalone utility file. This is the `jquery.ui.widget.js` file, and we can
    use it to create our very own jQuery UI plugins with ease. Like jQuery itself,
    which provides the `fn.extend()` method for easily creating plugins, jQuery UI
    also provides mechanisms to make plugin creation easier, and to ensure that the
    common API functionality is retained in new plugins. We will cover the Widget
    Factory in more detail in a separate chapter that can be downloaded with the book.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery UI库中的另一个工具是小部件工厂，它是在jQuery UI 1.8版中引入的，并且此后已经经历了一些重要变化。它将允许轻松创建小部件的功能分割成一个单独且独立的实用程序文件。这就是`jquery.ui.widget.js`文件，我们可以使用它轻松创建我们自己的jQuery
    UI插件。就像jQuery本身提供`fn.extend()`方法轻松创建插件一样，jQuery UI也提供了使插件创建更容易的机制，并确保在新插件中保留常见API功能。我们将在本书的一个单独章节中更详细地介绍小部件工厂，该章节可以下载。
- en: Summary
  id: totrans-247
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we've seen how the CSS framework consistently styles each of
    the library components. We've looked at the files that make it and how they work
    together to provide the complete look-and-feel of the widgets. We also saw how
    tightly integrated the ThemeRoller application is with the framework, and that
    it is easy to install or change a theme using ThemeRoller. We also looked at how
    we can override the theme file if we require a radical customization of a widget
    that we cannot obtain with ThemeRoller alone.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到了CSS框架如何一致地为每个库组件设置样式。我们查看了组成它的文件以及它们如何共同工作以提供完整的外观和感觉。我们还看到了ThemeRoller应用程序与框架的紧密集成程度，并且很容易使用ThemeRoller安装或更改主题。我们还看到了如果需要对无法仅通过ThemeRoller获得的小部件进行根本性自定义，我们如何可以覆盖主题文件。
- en: The chapter also covered building our own widgets or plugins in a way that is
    compatible with and can make use of the framework, as well as to ensure that our
    creations are ThemeRoller ready. We can also make use of the helper classes provided
    by the framework, such as the `ui-helper-clearfix` class, to quickly implement
    common CSS solutions.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 该章节还介绍了如何构建与框架兼容并可以利用框架的自定义小部件或插件，以及确保我们的创建可以使用ThemeRoller。我们还可以利用框架提供的助手类，例如`ui-helper-clearfix`类，来快速实现常见的CSS解决方案。
- en: We also looked at the position utility, which allows us to align any edge of
    one element with any edge of another element, giving us a powerful and flexible
    way of positioning elements that we create or manipulate.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还研究了位置实用工具，它允许我们将一个元素的任何边与另一个元素的任何边对齐，为我们提供了一个强大而灵活的定位元素的方式，无论是创建还是操作元素。
- en: In the next chapter, we'll move on to start looking at the widgets provided
    by the library, starting with the tabs widget.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将开始查看库提供的小部件，从标签小部件开始。
