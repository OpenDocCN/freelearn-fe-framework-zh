- en: Stability Patterns
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 稳定性模式
- en: Stability is one of the cornerstones of software engineering. No matter what,
    you must expect the worst from your environment and your users and be prepared
    for it. Your Angular applications should be able to operate in a degraded mode
    when your backend is burning and smoothly recover when it comes back online.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 稳定性是软件工程的基石之一。无论如何，你都必须对你的环境和用户做最坏的打算，并做好准备。当你的后端处于燃烧状态时，你的Angular应用程序应该能够在降级模式下运行，并在其恢复在线时平稳恢复。
- en: 'In this chapter, we will learn about stability patterns and anti-patterns,
    such as the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习稳定性模式和反模式，例如以下内容：
- en: Timeouts
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 超时
- en: Circuit breaker
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 断路器
- en: Factory
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工厂
- en: Memento
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 纪念品
- en: The prototype and reusable pool
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 原型和可重用池
- en: Timeouts
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 超时
- en: In the previous chapters, we experimented with API services with the intent
    of consuming APIs of any type of content that were created by our hypothetical
    backend. If I had to share a one-liner about what I learned during my online adventures,
    it would be *don't trust anybody...especially not yourself*. What I mean by that
    is that you can never trust an API to work as expected, even if it is your own
    API. You should always expect everything that can go wrong to, well, go wrong.
    One of the less harmful things that can happen when trying to communicate with
    your backend is that it won't respond. While this one-way communication is harmless
    for your Angular applications, it is most frustrating for your users. In this
    recipe, we will learn how to implement timeouts in our external call and how to
    react to unresponsive APIs.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，我们尝试了使用API服务，目的是消费由我们假设的后端创建的任何类型的内容的API。如果我不得不分享我在网上冒险中学到的一句话，那就是*不要相信任何人...尤其不要相信自己*。我的意思是，你永远不能相信API会按预期工作，即使是你自己的API。你应该始终期望一切可能出错的事情都会出错。在尝试与后端通信时可能发生的一件较不严重的事情是它不会响应。虽然这种单向通信对你的Angular应用程序是无害的，但对你的用户来说是最令人沮丧的。在这个配方中，我们将学习如何在我们的外部调用中实现超时，以及如何对不响应的API做出反应。
- en: 'Fortunately, there is a very simple way to prevent our user from getting frustrated
    about unresponsive APIs: timeouts. A timeout is a simple defense mechanism that
    allows your application to wait a fixed amount of time and not a millisecond more.
    Let''s create a new project to test it out:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，有一种非常简单的方法可以防止我们的用户对不响应的API感到沮丧：超时。超时是一种简单的防御机制，允许你的应用程序等待固定的时间，而不是一毫秒更多。让我们创建一个新的项目来测试一下：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This will create a new project and a service called `API`. At first glance,
    there is not much to look at:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个新的项目和一个名为`API`的服务。乍一看，没有什么可看的：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We will need to add the `HttpClient` component in`app.module.ts` as follows:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在`app.module.ts`中添加`HttpClient`组件如下：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Then, we want to inject the `HttpClient` component into our API service client
    in order to have access to its methods:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们希望将`HttpClient`组件注入到我们的API服务客户端中，以便可以访问其方法：
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We will add a new method in our `APIService` that simply makes an `http.get`
    to the GitHub repository that contains the code for this book( [https://github.com/MathieuNls/Angular-Design-Patterns-and-Best-Practices](https://github.com/MathieuNls/Angular-Design-Patterns-and-Best-Practices)):'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在我们的`APIService`中添加一个新的方法，简单地对包含本书代码的GitHub存储库进行`http.get`（[https://github.com/MathieuNls/Angular-Design-Patterns-and-Best-Practices](https://github.com/MathieuNls/Angular-Design-Patterns-and-Best-Practices)）：
- en: '[PRE4]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This is followed by an injection of `ApiService` and a call to the new `getURL`
    method in the `AppComponent`:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是对`ApiService`的注入，并在`AppComponent`中调用新的`getURL`方法：
- en: '[PRE5]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, if we were to execute this, we would have a gracious HTTP response, and
    the HTML of the web page would be printed out in the console. The problem, however,
    is that we have no countermeasure in place in the case that [github.com](http://www.github.com)
    is down and does not respond:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们执行这个操作，我们将得到一个优雅的HTTP响应，并且网页的HTML将被打印到控制台中。然而，问题在于，如果[github.com](http://www.github.com)宕机并且没有响应，我们没有采取任何对策：
- en: '[PRE6]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In this version of the `getURL` function, we must first declare a timeout variable
    that will contain a NodeJS timeout. Then, instead of performing a regular `HTTP.get`,
    we will subscribe to the response. Finally, after the subscription to the result,
    we assign the timeout variable with the `setTimeout` function. We use this function
    to unsubscribe from the response after 1,000 ms. Consequently, we only wait one
    second for the `http` reply. If the reply does not arrive within that time, we
    automatically unsubscribe and allow our application to continue. Of course, our
    users will have to be warned in some way that the operation was unsuccessful.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个版本的`getURL`函数中，我们必须首先声明一个超时变量，该变量将包含一个NodeJS超时。然后，我们将订阅响应，而不是执行常规的`HTTP.get`。最后，在订阅结果后，我们使用`setTimeout`函数为超时变量赋值。我们使用这个函数在1,000毫秒后取消订阅响应。因此，我们只等待1秒钟的`http`回复。如果回复在这段时间内没有到达，我们将自动取消订阅并允许我们的应用程序继续。当然，我们的用户必须以某种方式被警告操作失败。
- en: Circuit breaker
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 断路器
- en: The timeout pattern we implemented in the previous section is efficient at protecting
    the patience of our users and, ultimately, our Angular application. However, in
    the case that the API is not responding because something went wrong on the server
    side, let's say 80% of your server is down and the remaining 20% is trying to
    manage the load, your clients will most likely repeatedly retry the action that
    timed out. Consequently, this puts even more stress on our dying backend infrastructure.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在上一节中实现的超时模式有效地保护了用户的耐心，最终也保护了我们的Angular应用程序。然而，如果API没有响应是因为服务器端出了问题，比如你的服务器80%宕机，剩下的20%在尝试管理负载，你的客户很可能会反复重试超时的操作。因此，这会给我们濒临崩溃的后端基础设施带来更大的压力。
- en: A circuit is an automatic device for stopping the flow of the current in an
    electric circuit as a safety measure. Circuit breakers are used to detect failures
    and encapsulate the logic of preventing a failure from reoccurring constantly
    (during maintenance, temporary external system failure, or unexpected system difficulties).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 电路是一种自动装置，用于作为安全措施停止电路中的电流流动。断路器用于检测故障并封装防止故障不断发生的逻辑（在维护期间、临时外部系统故障或意外系统困难期间）。
- en: 'Concretely, within the framework of an Angular app, a circuit breaker will
    prevent the client from performing API requests when there are too many failures.
    After a given amount of time, the circuit will allow some of the queries to go
    through and consume the API. If these queries return without any problems, then
    the circuit will close itself and allow all the requests to go through:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，在Angular应用程序的框架内，断路器将在出现太多故障时阻止客户端执行API请求。在一定时间后，电路将允许一些查询通过并使用API。如果这些查询没有任何问题返回，那么电路将关闭自身并允许所有请求通过：
- en: '![](assets/c2200dc4-5325-466a-837a-2c4a731d5d4e.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c2200dc4-5325-466a-837a-2c4a731d5d4e.png)'
- en: In the preceding diagram, we can see how the circuit breaker operates. All requests
    go through the circuit breaker, and if the supplier answers the requests in time,
    the circuit stays closed. When problems start to occur, the circuit breaker notices,
    and if enough requests timeout, then the circuit opens and prevents requests from
    going through.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在上图中，我们可以看到断路器是如何运作的。所有请求都经过断路器，如果供应商及时回应请求，断路器保持关闭状态。当问题开始出现时，断路器会注意到，如果足够多的请求超时，那么断路器就会打开，阻止请求通过。
- en: 'Finally, after a given amount of time, the circuit breaker tries to resend
    requests to the supplier:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在给定的时间后，断路器尝试重新发送请求给供应商：
- en: '![](assets/ba406e26-efc0-4531-ab10-e3aafad6bade.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ba406e26-efc0-4531-ab10-e3aafad6bade.png)'
- en: 'From an implementation point of view, we will need the `ApiStatus` and `Call`
    classes, which are responsible for keeping track of the call we make to diverse
    APIs:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 从实现的角度来看，我们需要`ApiStatus`和`Call`类，它们负责跟踪我们对不同API的调用。
- en: '[PRE7]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `APIStatus` contains the statistics for the on root api. We take into account
    that we might use several APIs in our application. Each API has to be linked to
    its own circuit breaker. First, we have the `lastFail` variable, which contains
    the date at which the last call to this API failed. Then, we have a `calls` array
    that contains all the calls made to a given API. In addition to the constructor
    that defines the URL property, we have the `failPercentage` function. This function
    is responsible for computing the percentage of calls that failed within the `timeWindows`
    time. To do this, we iterate over all the calls in a reverse chronological order
    until we reach `Date.now()` – `timeWindow` or the end of the `calls` array. Within
    the `while` loop, we increment two number variables called `success and fail`
    with regard to the status of the current call. At the end, we return the percentage
    of failed calls. This percentage will be used to determine the status of the circuit
    breaker.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`APIStatus`包含了根API的统计信息。我们要考虑到我们的应用程序可能会使用多个API。每个API都必须与自己的断路器相连。首先，我们有`lastFail`变量，其中包含了上次调用此API失败的日期。然后，我们有一个`calls`数组，其中包含了对给定API的所有调用。除了定义URL属性的构造函数之外，我们还有`failPercentage`函数。这个函数负责计算在`timeWindows`时间内失败的调用百分比。为了做到这一点，我们以相反的时间顺序迭代所有的调用，直到达到`Date.now()`
    - `timeWindow`或`calls`数组的末尾。在`while`循环内，我们根据当前调用的状态递增两个名为`success`和`fail`的数字变量。最后，我们返回失败调用的百分比。这个百分比将用于确定断路器的状态。'
- en: 'The `Call` class is rather simple:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`Call`类非常简单：'
- en: '[PRE8]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'It only contains two properties: time and status. We are now ready to implement
    an API client for our *Angular* app that implements a circuit breaker. First,
    we have to create the class:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 它只包含两个属性：时间和状态。现在，我们准备为我们的*Angular*应用程序实现一个实现断路器的API客户端。首先，我们必须创建这个类：
- en: '[PRE9]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Then, we have to add the property for `ApiwithBreakerService`:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们必须为`ApiwithBreakerService`添加属性：
- en: '[PRE10]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: These properties will allow us to implement the circuit breaker pattern. First,
    we have a map of `string`, an `ApiStatus` that is used to store the API status
    of many APIs. Then, we have `failPercentage`, which defines how many calls can
    fail, as a percentage, before we open the circuit. The `timeWindow` variable defines
    the amount of time that is used to compute`failPercentage`. Here, we have a maximum
    of 20% of calls that can fail within a 24-hour window before we open this circuit
    and prevent other calls from being made. Finally, we have `timeToRetry`, which
    states how long we have to wait before trying to reclose the circuit.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这些属性将允许我们实现断路器模式。首先，我们有一个`string`和`ApiStatus`的映射，用于存储许多API的API状态。然后，我们有`failPercentage`，它定义了在打开电路之前有多少调用可以失败，作为百分比。`timeWindow`变量定义了用于计算`failPercentage`的时间量。在这里，我们在24小时窗口内最多可以有20%的调用失败，然后我们打开这个电路并阻止其他调用。最后，我们有`timeToRetry`，它规定了在尝试重新关闭电路之前我们需要等待多长时间。
- en: 'Here is the modified `getURL` function from the timeout section:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是来自超时部分的修改后的`getURL`函数：
- en: '[PRE11]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We kept the same core functionalities from the previous section with the timeout,
    but we embedded it in an `if` statement:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们保留了前一部分中的超时的核心功能，但将其嵌入到了一个`if`语句中：
- en: '[PRE12]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The `if` statement checks if the circuit is closed or if we are ready to retry
    on an open circuit.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`if`语句检查电路是否关闭，或者我们是否准备在打开的电路上重试。'
- en: 'We also added calls to the `addCall` function:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还添加了对`addCall`函数的调用：
- en: '[PRE13]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The `addCall` function adds a new call to an `ApiStatus` that's stored inside
    the `apis` map. It also updates the `lastFail` properties of the `ApiStatus` instance
    if the call was unsuccessful.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`addCall`函数将一个新的调用添加到存储在`apis`映射内的`ApiStatus`中。如果调用不成功，它还会更新`ApiStatus`实例的`lastFail`属性。'
- en: 'What remains are the `readyToRetry` and `isClosed` functions:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 剩下的是`readyToRetry`和`isClosed`函数：
- en: '[PRE14]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In the `readyToRetry` function, we simply check that the latest fail is older
    than the time it is now minus`timeToRetry`. In the `isClosed` function, we check
    if the percentage of failed calls during the time window is greater than the maximum
    allowed. Here is the complete implementation:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在`readyToRetry`函数中，我们只需检查最新的失败是否比现在减去`timeToRetry`的时间早。在`isClosed`函数中，我们检查在时间窗口内失败调用的百分比是否大于允许的最大值。以下是完整的实现：
- en: '[PRE15]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Note that we have two helper functions that do not directly participate in the
    implementation of the circuit patterns, only extracting the root URL of a call
    in order to compute a shared status by root APIs. Thanks to these helper functions,
    we can have [http://someapi.com/users](http://someapi.com/users) and [http://someapi.com/sales](http://someapi.com/sales)
    share the same status while [http://anotherapi.com/someCall](http://anotherapi.com/someCall)
    has its own separated `ApiStatus`.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们有两个辅助函数，它们并不直接参与电路模式的实现，只是提取调用的根URL，以便通过根API计算共享状态。由于这些辅助函数，我们可以使[http://someapi.com/users](http://someapi.com/users)和[http://someapi.com/sales](http://someapi.com/sales)共享相同的状态，而[http://anotherapi.com/someCall](http://anotherapi.com/someCall)则有其自己分离的`ApiStatus`。
- en: The timeout and the circuit breaker patterns work in parallel in order to reduce
    self-denial. Self-denial is the art of dooming your backend servers yourself.
    This tends to happen when you have an application behaving improperly and making
    thousands of calls per second to your backend architecture.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 超时和断路器模式并行工作，以减少自我否认。自我否认是自己毁灭后端服务器的艺术。当您的应用程序表现不当并且每秒向后端架构发出数千次调用时，这种情况往往会发生。
- en: Factory
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工厂
- en: 'Let''s assume that we have a `User` class with two private variables: `lastName:string`
    and `firstName:string`. In addition, this simple class proposes that the `hello`
    method prints `"Hi I am", this.firstName, this.lastName`:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个`User`类，有两个私有变量：`lastName:string`和`firstName:string`。此外，这个简单的类提供了`hello`方法，打印`"Hi
    I am", this.firstName, this.lastName`：
- en: '[PRE17]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now, consider that we receive users through a JSON API. It will more than likely
    look something like this:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，考虑我们通过JSON API接收用户。它很可能看起来像这样：
- en: '[PRE18]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'With the following snippet, we can create a `User`:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 通过以下代码片段，我们可以创建一个`User`：
- en: '[PRE19]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Up until now, the TypeScript compiler hasn''t complained, and it executes smoothly.
    It works because the parse method returns `any` (for example, the TypeScript equivalent
    of the Java object). Sure enough, we can convert the `any into User`. However,
    `userFromJSONAPI.hello();` will yield the following:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，TypeScript编译器还没有抱怨，并且它执行得很顺利。这是因为`parse`方法返回`any`（例如，Java对象的TypeScript等价物）。当然，我们可以将`any`转换为`User`。然而，`userFromJSONAPI.hello();`将产生以下结果：
- en: '[PRE20]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Why? Well, the left-hand side of assignation is defined as `User`, sure, but
    it'll be erased when we transpile it to JavaScript.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么？嗯，赋值的左侧被定义为`User`，但当我们将其转译为JavaScript时，它将被抹去。
- en: 'The type-safe TypeScript way to do it would be as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在TypeScript中进行类型安全的方式如下：
- en: '[PRE21]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Interestingly enough, the `typeof` function won't help you either. In both cases,
    it'll display `Object` instead of `User`, as the very concept of `User` doesn't
    exist in JavaScript.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，`typeof`函数也无法帮助你。在这两种情况下，它都会显示`Object`而不是`User`，因为`User`的概念在JavaScript中根本不存在。
- en: While the direct type-safe approach works, it isn't very expansible nor reusable.
    Indeed, the `map` callback method would have to be duplicated everywhere you receive
    a JSON `user`. The most convenient way to do that is through the `Factory` pattern.
    A `Factory` is used for objects without exposing the instantiation logic to the
    client.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然直接的类型安全方法有效，但它并不是非常可扩展或可重用的。事实上，每当你接收一个JSON `user`时，`map`回调方法都必须在各处重复。最方便的方法是通过`Factory`模式来做到这一点。`Factory`用于创建对象，而不将实例化逻辑暴露给客户端。
- en: 'If we were to have a `factory` to create a user, it would look like this:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们要创建一个用户的`factory`，它会像这样：
- en: '[PRE22]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Here, we have a static method named `buildUser` that receives a JSON object
    and takes all the required value inside the JSON object to invoke, with the right
    attributes, a hypothetical `User` constructor. The method is static, like all
    the methods of such a factory. Indeed, we don't need to save any states or instance-bound
    variables in a factory; we only encapsulate away the gruesome creation of users.
    Note that your factory will likely be shared for the rest of your POTOs.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们有一个名为`buildUser`的静态方法，它接收一个JSON对象，并从JSON对象中获取所有必需的值，以调用一个假想的`User`构造函数。该方法是静态的，就像工厂的所有方法一样。事实上，在工厂中我们不需要保存任何状态或实例绑定的变量；我们只需要封装用户的创建过程。请注意，你的工厂可能会在你的POTOs的其余部分中共享。
- en: Memento
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 备忘录
- en: The memento pattern is a really  useful pattern in the context of Angular. In
    Angular-powered applications, we use and overuse two ways binding between domain
    models such as `User` or `Movie`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 备忘录模式在Angular的上下文中是一个非常有用的模式。在由Angular驱动的应用程序中，我们经常过度使用两种方式绑定领域模型，比如`User`或`Movie`。
- en: 'Let''s consider two components, one named `Dashboard` and the other one named
    `EditMovie`. On the `Dashboard` component, you have a list of movies displayed
    in the context of our IMDb-like application. The view of such a dashboard could
    look like this:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑两个组件，一个名为`Dashboard`，另一个名为`EditMovie`。在`Dashboard`组件上，你有一个电影列表，显示在我们的类似IMDb的应用程序的上下文中。这样的仪表板视图可能如下所示：
- en: '[PRE23]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This simple view owns a `ngFor` directive that iterates over the list of movies
    contained in a model. Then, for each movie, it displays two `p` elements containing
    the title and the release year, respectively.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这个简单的视图拥有一个“ngFor”指令，它遍历模型中包含的电影列表。然后，对于每部电影，它分别显示包含标题和发行年份的两个“p”元素。
- en: 'Now, the `EditMovie` components access one of the movies on the `model.movies`
    array and allow the user to edit it:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，“EditMovie”组件访问“model.movies”数组中的一部电影，并允许用户对其进行编辑：
- en: '[PRE24]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Thanks to the two ways binding used here, the modifications performed on the
    movie title and year will directly impact the dashboard. As you can see, we have
    a `cancel` button here. While the user might expect that the modification is synchronized
    in `real time`*,* he also expects that the cancel button/link cancels the modifications
    that have been done on the movie.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢在这里使用的双向绑定，对电影标题和年份的修改将直接影响仪表板。正如你所看到的，我们这里有一个“取消”按钮。虽然用户可能期望修改是“实时”同步的，但他也期望取消按钮/链接可以取消对电影所做的修改。
- en: 'That is where the Memento pattern comes into play. This pattern allows performing
    undo operations on objects. It can be implemented in many ways, but the simplest
    one is to go with cloning. Using cloning, we can store one version of our object,
    at a given moment, and, if need be, get back to it. Let''s enhance our `Movie`
    object from the `prototype` pattern as follows:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是备忘录模式发挥作用的地方。这种模式允许在对象上执行撤消操作。它可以以许多种方式实现，但最简单的方式是使用克隆。使用克隆，我们可以在给定时刻存储对象的一个版本，并且在需要时返回到它。让我们按照以下方式增强我们的“Movie”对象从“原型”模式：
- en: '[PRE25]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: In this new version, we added the `restore(movie:Movie)` method, which takes
    a `Movie` as an argument and affects the local attributes to the values of the
    received movie.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个新版本中，我们添加了“restore(movie:Movie)”方法，它以“Movie”作为参数，并将本地属性影响到接收到的电影的值。
- en: 'Then, in practice, the constructor of our `EditMovie` component could look
    like this:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在实践中，我们的“EditMovie”组件的构造函数可能如下所示：
- en: '[PRE26]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: What's interesting is that you are not limited to one memento over time, as
    you can have as many as you want.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，你不限于随时间只有一个备忘录，你可以有任意多个。
- en: Summary
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we saw patterns that aim to improve the stability of our Angular
    applications. It is worth noting that most of the aim, in fact, is for protecting
    our backend infrastructures from overheating. Indeed, the timeout and the circuit
    breaker, when combined, allow us to give our backends a break while they come
    back online. In addition, the memento and the reusable pool aim to keep the client-side
    information we could have re-requested from the backend if we were not to store
    them.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到的模式旨在提高我们的Angular应用程序的稳定性。值得注意的是，事实上，大部分目的是为了保护我们的后端基础设施免受过热。事实上，当超时和断路器结合在一起时，它们可以让我们的后端得到休息，同时它们重新上线。此外，备忘录和可重用池旨在保留我们可能已经从后端重新请求的客户端信息，如果我们不存储它们的话。
- en: In the next chapter, we will cover performance patterns and best practices to
    improve the speed at which our application operates.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍性能模式和改进应用程序运行速度的最佳实践。
