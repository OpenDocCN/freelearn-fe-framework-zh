["```js\nimport { Directive, Input } from '@angular/core';\nimport { NG_ASYNC_VALIDATORS, FormControl } from '@angular/forms';\n\n@Directive({\n  selector: '[abeRemoteValidator][ngModel]',\n  providers: [{ provide: NG_ASYNC_VALIDATORS, useExisting: RemoteValidatorDirective, multi: true }]\n})\nexport class RemoteValidatorDirective {\n\n  @Input() abeRemoteValidator: string;\n  @Input() validateFunction: (value: string) => Promise<boolean>;\n\n  validate(control: FormControl): { [key: string]: any } {\n    const value: string = control.value;\n    return this.validateFunction(value).then((result: boolean) => {\n      if (result) {\n        return null;\n      }\n      else {\n        const error: any = {};\n        error[this.abeRemoteValidator] = true;\n        return error;\n      }\n    });\n  }\n} \n```", "```js\n providers:[{ provide: NG_ASYNC_VALIDATORS, useExisting: RemoteValidatorDirective,  multi: true }] \n```", "```js\n<input type=\"text\" name=\"workoutName\" ... \n abeRemoteValidator=\"workoutname\"[validateFunction]=\"validateWorkoutName\"> \n```", "```js\n<label *ngIf=\"name.control.hasError('workoutname')\" class=\"alert alert-danger validation-message\">A workout with this name already exists.</label> \n```", "```js\nvalidateWorkoutName = (name: string): Promise<boolean> => {\n    if (this.workoutName === name) { return Promise.resolve(true); }\n    return this.workoutService.getWorkout(name).toPromise()\n      .then((workout: WorkoutPlan) => {\n        return !workout;\n      }, error => {\n        return true;\n      });\n  }  \n```", "```js\nimport { WorkoutService }  from \"../../core/workout.service\"; \n... \nconstructor(... , private workoutService: WorkoutService) { \n```", "```js\nprivate workoutName: string;\nqueryParamsSub: Subscription\n```", "```js\nthis.queryParamsSub = this.route.params.subscribe(params => this.workoutName = params['id']); \n```", "```js\nthis.queryParamsSub.unsubscribe();\n```", "```js\nreturn this.validationFunction(value).then((result: boolean) => { ... }); \n```", "```js\nfunction WorkoutComponent(...) { \n var _this = this; \n  ... \n  this.validateWorkoutName = function (name) { \n if (_this.workoutName === name) \n      return Promise.resolve(true); \n```", "```js\n<input type=\"text\" name=\"workoutName\" #name=\"ngModel\"  class=\"form-control\" id=\"workout-name\" ... [(ngModel)]=\"workout.name\" required> \n... \n<label *ngIf=\"name.control.hasError('required') && (name.touched || submitted)\" class=\"alert alert-danger\">Name is required</label>  \n```", "```js\nng generate directive busy-indicator\n```", "```js\nconstructor(private model: NgModel) { }\n```", "```js\n<input... name=\"workoutName\" #name=\"ngModel\" [(ngModel)]=\"workout.name\" ...>\n```", "```js\n<input type=\"text\" name=\"workoutName\" ... abeBusyIndicator> \n```", "```js\n<div abeBusyIndicator></div> \n<input type=\"text\" abeBusyIndicator> \n```", "```js\n<input type=\"text\" name=\"workoutName1\" a2beBusyIndicator> \n```", "```js\n EXCEPTION: No provider for NgModel! (BusyIndicatorDirective -> NgModel)\n```", "```js\nconstructor(@Optional() private model: NgModel) { } \n```", "```js\nselector: `[abeBusyIndicator][ngModel]` \n```", "```js\nprivate subscriptions: Array<any> = []; \nngAfterViewInit(): void {\n    this.subscriptions.push(\n      this.model.control.statusChanges.subscribe((status: any) => {\n        if (this.model.control.pending) {\n          this.renderer.setElementStyle(this.element.nativeElement, 'border-width', '3px');\n          this.renderer.setElementStyle(this.element.nativeElement, 'border-color', 'gray');\n        }\n        else {\n          this.renderer.setElementStyle(this.element.nativeElement, 'border-width', null);\n          this.renderer.setElementStyle(this.element.nativeElement, 'border-color', null);\n        }\n      }));\n  }  \n```", "```js\nconstructor(private model: NgModel,  \n private element: ElementRef, private renderer: Renderer) { }\n```", "```js\nngOnDestroy() { \n    this.subscriptions.forEach((s) => s.unsubscribe()); \n} \n```", "```js\nthis.element.nativeElement.style.borderWidth=\"3px\"; \n```", "```js\nthis.renderer.setElementStyle( \n             this.element.nativeElement, \"border-width\", \"3px\"); \n```", "```js\n@HostBinding(\"readOnly\") get busy() {return this.isbusy}; \n```", "```js\n@HostBinding(\"attr.disabled\") get canEdit(): string  \n  { return !this.isAdmin ? \"disabled\" : null }; \n```", "```js\n@HostBinding('class.valid')  \n   get valid { return this.control.valid; } \n```", "```js\n@HostBinding(\"style.borderWidth\")  \n   get focus(): string { return this.focus?\"3px\": \"1px\"}; \n```", "```js\n@Directive({ selector: 'button, div, span, input' }) \nclass ClickTracker { \n  @HostListener('click', ['$event.target']) \n  onClick(element: any) { \n    console.log(\"button\", element, \"was clicked\"); \n  } \n} \n```", "```js\n@Directive({ selector: 'workout-runner' }) \nclass WorkoutTracker { \n  @HostListener('workoutStarted', ['$event']) \n  onWorkoutStarted(workout: any) { \n    console.log(\"Workout has started!\"); \n  } \n} \n```", "```js\nimport {Directive, HostBinding} from '@angular/core'; \nimport {NgModel} from '@angular/forms'; \n\n@Directive({ selector: `[abeBusyIndicator][ngModel]`}) \nexport class BusyIndicatorDirective {\n  private get validating(): boolean {\n    return this.model.control != null && this.model.control.pending;\n  }\n  @HostBinding('style.borderWidth') get controlBorderWidth():\n        string { return this.validating ? '3px' : null; }\n  @HostBinding('style.borderColor') get controlBorderColor():\n        string { return this.validating ? 'gray' : null; }\n\n  constructor(private model: NgModel) { }\n}\n\n```", "```js\n<input type=\"text\" name=\"workoutName\" ... \n[style.borderColor]=\"name.control.pending ? 'gray' : null\" [style.borderWidth]=\"name.control.pending ? '3px' : null\">\n```", "```js\nconstructor(private model: NgModel ...) { } \n```", "```js\n<div relation=\"grand-parent\" acquaintance=\"jack\"> \n    <div relation=\"parent\"> \n <div relation=\"me\" consumer> \n        <div relation=\"child-1\"> \n          <div relation=\"grandchild-1\"></div> \n        </div> \n        <div relation=\"child-2\"></div> \n      </div> \n    </div> \n</div> \n```", "```js\nvariable:DirectiveType \n```", "```js\nconstructor(private me:Relation ... \n```", "```js\nconstructor(..., @Host() private myAcquaintance:Acquaintance  \n```", "```js\n@SkipSelf() private myParent:Relation \n```", "```js\n@ContentChildren(Relation) private children:QueryList<Relation>; \n```", "```js\n@ContentChildren(Relation, {descendants: true}) private \nallDescendents:QueryList<Relation>; \n```", "```js\nng generate component ajax-button -is\n```", "```js\nexport class AjaxButtonComponent implements OnInit { \n  busy: boolean = null; \n  @Input() execute: any; \n  @Input() parameter: any; \n} \n```", "```js\n<button [attr.disabled]=\"busy\" class=\"btn btn-primary\"> \n    <span [hidden]=\"!busy\">\n        <div class=\"ion-md-cloud-upload spin\"></div>\n    </span>\n    <span>Save</span> \n</button> \n```", "```js\n@HostListener('click', ['$event'])\nonClick(event: any) {\n    const result: any = this.execute(this.parameter);\n    if (result instanceof Promise) {\n      this.busy = true;\n      result.then(\n        () => { this.busy = null; },\n        (error: any) => { this.busy = null; });\n    }\n}\n```", "```js\n    const result: any = this.execute(this.parameter); \n```", "```js\n<abe-ajax-button [execute]=\"save\" [parameter]=\"f\"></abe-ajax-button> \n```", "```js\nsave = (formWorkout: any): Promise<Object | WorkoutPlan> => {\n    this.submitted = true;\n    if (!formWorkout.valid) { return; }\n    const savePromise = this.workoutBuilderService.save().toPromise();\n\n    savePromise.then(\n      result => this.router.navigate(['/builder/workouts']),\n      err => console.error(err)\n    );\n    return savePromise;\n  } \n```", "```js\n<ajax-button [execute]=\"save\" [parameter]=\"f\"></ajax-button> \n```", "```js\n<ajax-button [execute]=\"save\" [parameter]=\"f\">Save Me!</ajax-button> \n```", "```js\n<button [attr.disabled]=\"busy\" class=\"btn btn-primary\"> \n    <span [hidden]=\"!busy\"> \n        <ng-content select=\"[data-animator]\"></ng-content> \n   </span> \n <ng-content select=\"[data-content]\"></ng-content> \n</button>\n```", "```js\n<ajax-button [execute]=\"save\" [parameter]=\"f\">\n    <div class=\"ion-md-cloud-upload spin\" data-animator></div>\n <span data-content>Save</span>\n</ajax-button> \n```", "```js\n<audio #ticks=\"MyAudio\" loop src=\"img/tick10s.mp3\"></audio>\n<audio #nextUp=\"MyAudio\" src=\"img/nextup.mp3\"></audio>\n<audio #nextUpExercise=\"MyAudio\" [src]=\"'/assets/audio/' + nextupSound\"></audio>\n// Some other audio elements \n```", "```js\n@ViewChild('ticks') private _ticks: MyAudioDirective; \n@ViewChild('nextUp') private _nextUp: MyAudioDirective; \n@ViewChild('nextUpExercise') private _nextUpExercise: MyAudioDirective; \n```", "```js\n@Component({ \n  selector: 'my-audio', \n  template: '<audio ...></audio>', \n}) \nexport class MyAudioComponent { \n  ... \n} \n```", "```js\n<my-audio #ticks loop  \n  src=\"img/tick10s.mp3\"></my-audio> \n```", "```js\n@ViewChildren(directiveType) children: QueryList<directiveType>; \n```", "```js\n@ViewChildren(MyAudioDirectives) private all: QueryList<MyAudioDirectives>; \n```", "```js\n @ViewChildren('ticks, nextUp, nextUpExercise, halfway, aboutToComplete') private all: QueryList<MyAudioDirective>; \n```", "```js\n@ViewChildren(MyAudioDirective) private all: QueryList<MyAudioDirective>; \n```", "```js\n<div *ngFor=\"let audioData of allAudios\"> \n  <audio [src]=\"audioData.url\"></audio> \n</div> \n```", "```js\n@ContentChild('spinner') spinner:ElementRef; \n@ContentChild('text') text:ElementRef; \n```", "```js\n<div class=\"ion-md-cloud-upload spin\" data-animator #spinner></div>\n<span data-content #text>Save</span>\n```", "```js\n<ajax-button> \n    <busy-spinner></busy-spinner> \n    ... \n</ajax-button> \n```", "```js\n@ContentChild(BusySpinner) spinner: BusySpinner; \n```", "```js\nproviders:[WorkoutHistoryTracker, LocalStorage] \n```", "```js\nproviders: [ExerciseBuilderService, ...  \n WorkoutBuilderService]);\n```", "```js\n@Component({ \n    template: `...` \n providers:[ WorkoutBuilderService ] \n}) \nexport class WorkoutBuilderComponent { \n```", "```js\n@Directive({ \n  selector: '[myDirective]', \n}) \nexport class MyDirective { \n  constructor(service:MyService) { } \n  ... \n} \n```", "```js\n@Component({ \n  selector: 'ajax-button', \n  template:` <button [attr.disabled]=\"busy\" ... \n myDirective> \n                ... \n             <button>` \n providers:[MyService], \n... \n```", "```js\n<div class=\"ion-md-cloud-upload spin\" data-animator myDirective></div>\n```", "```js\nviewProviders:[MyService]\n```", "```js\n@Directive({selector: '[ngIf]'})\nexport class NgIf {\n constructor(private _viewContainer: ViewContainerRef, templateRef: TemplateRef<NgIfContext>) {\n    this._thenTemplateRef = templateRef;\n }\n\n @Input()\n  set ngIf(condition: any) {\n    this._context.$implicit = this._context.ngIf = condition;\n    this._updateView();\n }\n private _updateView() {\n    if (this._context.$implicit) {\n      if (!this._thenViewRef) {\n        this._viewContainer.clear();\n        this._elseViewRef = null;\n        if (this._thenTemplateRef) {\n          this._thenViewRef =\n              this._viewContainer.createEmbeddedView(this._thenTemplateRef, this._context);\n        }\n      }\n    }\n    ...\n}\n```", "```js\n<h3 *ngIf=\"currentExercise.exercise.name=='rest'\"> \n  ... \n</h3> \n```", "```js\n<ng-template [ngIf]=\"currentExercise.exercise.name=='rest'\"> \n  <h3> ... </h3> \n</ng-template> \n```", "```js\n<button *forRoles=\"admin\">Admin Save</button> \n```", "```js\nif(this.loggedInUser.roles.indexOf(this.forRole) >=0){ \n      this.viewContainer.createEmbeddedView(this.templateRef); \n} \nelse { \n      this.viewContainer.clear(); \n}  \n```", "```js\n<button *ngIf=\"loggedInUser.roles.indexOf('admin')>=0\">Admin Save</button> \n```", "```js\nngOnInit() {       \n this.viewContainer.createEmbeddedView(this._templateRef);        \n this.viewContainer.createEmbeddedView(this._templateRef); \n}  \n```", "```js\n<audio src=\"img/nextup.mp3\" controls></audio> \n```", "```js\n@Component({ \n  ... \n  styles:[` \n    button { \n      background: green; \n    }`] \n}) \n```"]