["```js\nrouter.route('/api/media/related/:mediaId')\n        .get(mediaCtrl.listRelated)\n```", "```js\nconst listRelated = async (req, res) => {\n  try {\n    let media = await Media.find({ \"_id\": { \"$ne\": req.media }, \n          \"genre\": req.media.genre})\n      .limit(4)\n      .sort('-views')\n      .populate('postedBy', '_id name')\n      .exec()\n    res.json(media)\n  } catch (err) {\n    return res.status(400).json({\n      error: errorHandler.getErrorMessage(err)\n    })\n  }\n}\n```", "```js\nconst listRelated = async (params, signal) => {\n  try {\n    let response = await fetch('/api/media/related/'+ params.mediaId, {\n    method: 'GET',\n    signal: signal,\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    }\n  })\n      return await response.json()\n  } catch(err) {\n    console.log(err)\n  }\n}\n```", "```js\n{props.media.map((item, i) => { \n    return \n      <span key={i}>... video snapshot ... | ... media details ...</span> \n  })\n}\n```", "```js\n\n<Link to={\"/media/\"+item._id}>\n  <ReactPlayer url={'/api/media/video/'+item._id} \n               width='160px'    \n               height='140px'/>\n</Link>\n```", "```js\n<Typography type=\"title\" color=\"primary\">{item.title}</Typography>\n<Typography type=\"subheading\"> {item.genre} </Typography>\n<Typography component=\"p\">\n        {(new Date(item.created)).toDateString()}\n</Typography>\n<Typography type=\"subheading\">{item.views} views</Typography>\n```", "```js\n<Route path=\"/media/:mediaId\" component={PlayMedia}/>\n```", "```js\nuseEffect(() => {\n     const abortController = new AbortController()\n     const signal = abortController.signal\n\n     read({mediaId: props.match.params.mediaId}, signal).then((data) => {\n         if (data && data.error) {\n             console.log(data.error)\n         } else {\n             setMedia(data)\n         }\n     })\n     return function cleanup(){\n         abortController.abort()\n     }\n}, [props.match.params.mediaId])\n```", "```js\nuseEffect(() => {\n    const abortController = new AbortController()\n    const signal = abortController.signal\n\n    listRelated({\n      mediaId: props.match.params.mediaId}, signal).then((data) => {\n      if (data.error) {\n        console.log(data.error)\n      } else {\n        setRelatedMedia(data)\n      }\n    })\n    return function cleanup(){\n      abortController.abort()\n    }\n}, [props.match.params.mediaId])\n```", "```js\n{relatedMedia.length > 0 && \n      (<RelatedMedia media={relatedMedia}/>)}\n```", "```js\nconst nextUrl = relatedMedia.length > 0\n          ? `/media/${relatedMedia[0]._id}` : ''\n<Media media={media} \n       nextUrl={nextUrl} \n       handleAutoplay={handleAutoplay}/>\n```", "```js\nconst mediaUrl = props.media._id\n          ? `/api/media/video/${props.media._id}`\n          : null\n...\n<MediaPlayer srcUrl={mediaUrl} \n             nextUrl={props.nextUrl} \n             handleAutoplay={props.handleAutoplay}/>\n```", "```js\n  const [playing, setPlaying] = useState(false)\n  const [volume, setVolume] = useState(0.8) \n  const [muted, setMuted] = useState(false)  \n  const [duration, setDuration] = useState(0)\n  const [seeking, setSeeking] = useState(false) \n  const [playbackRate, setPlaybackRate] = useState(1.0) \n  const [loop, setLoop] = useState(false) \n  const [fullscreen, setFullscreen] = useState(false)\n  const [videoError, setVideoError] = useState(false) \n  const [values, setValues] = useState({\n    played: 0, loaded: 0, ended: false\n  })\n```", "```js\n<ReactPlayer\n ref={ref}\n width={fullscreen ? '100%':'inherit'}\n height={fullscreen ? '100%':'inherit'}\n style={fullscreen ? {position:'relative'} : {maxHeight: '500px'}}\n config={{ attributes: { style: { height: '100%', width: '100%'} } }}\n url={props.srcUrl}\n playing={playing}\n loop={loop}\n playbackRate={playbackRate}\n volume={volume}\n muted={muted}\n onEnded={onEnded}\n onError={showVideoError}\n onProgress={onProgress}\n onDuration={onDuration}/>\n```", "```js\nlet playerRef = useRef(null)\nconst ref = player => {\n    playerRef = player\n}\n```", "```js\n  const showVideoError = e => {\n    console.log(e)\n    setVideoError(true)\n  }\n```", "```js\n{videoError && <p className={classes.videoError}>Video Error. Try again later.</p>}\n```", "```js\nuseEffect(() => {\n    setVideoError(false)\n}, [props.srcUrl])\n```", "```js\n<IconButton color=\"primary\" onClick={playPause}>\n    <Icon>{playing ? 'pause': (ended ? 'replay' : 'play_arrow')}</Icon>\n</IconButton>\n```", "```js\nconst playPause = () => {\n    setPlaying(!playing)\n}\n```", "```js\n<IconButton disabled={!props.nextUrl} color=\"primary\">\n    <Link to={props.nextUrl}>\n       <Icon>skip_next</Icon>\n    </Link>\n</IconButton>\n```", "```js\n<IconButton color={loop ? 'primary' : 'default'} \n            onClick={onLoop}>\n    <Icon>loop</Icon>\n</IconButton>\n```", "```js\nconst onLoop = () => {\n    setLoop(!loop)\n}\n```", "```js\nconst onEnded = () => {\n  if(loop){\n    setPlaying(true)\n  } else{\n    setValues({...values, ended: true}) \n    setPlaying(false)\n  }\n}\n```", "```js\n<IconButton color=\"primary\" onClick={toggleMuted}>\n    <Icon> {volume > 0 && !muted && 'volume_up' || \n            muted && 'volume_off' || \n               volume==0 && 'volume_mute'} </Icon>\n</IconButton>\n```", "```js\nconst toggleMuted = () => {\n    setMuted(!muted)\n}\n```", "```js\n<input type=\"range\" \n       min={0} \n       max={1} \n       step='any' \n       value={muted? 0 : volume} \n       onChange={changeVolume}/>\n```", "```js\nconst changeVolume = e => {\n    setVolume(parseFloat(e.target.value))\n}\n```", "```js\n<LinearProgress color=\"primary\" variant=\"buffer\" \n                value={values.played*100} valueBuffer={values.loaded*100} \n                style={{width: '100%'}} \n                classes={{\n                          colorPrimary: classes.primaryColor,\n                          dashedColorPrimary : classes.primaryDashed,\n                          dashed: classes.dashed\n                        }}\n/>\n```", "```js\nconst onProgress = progress => {\n  if (!seeking) {\n    setValues({...values, played: progress.played, loaded: progress.loaded})\n  }\n}\n```", "```js\n<input type=\"range\" min={0} max={1}\n       value={values.played} step='any'\n       onMouseDown={onSeekMouseDown}\n       onChange={onSeekChange}\n       onMouseUp={onSeekMouseUp}\n       style={{ position: 'absolute',\n                width: '100%',\n                top: '-7px',\n                zIndex: '999',\n                '-webkit-appearance': 'none',\n                backgroundColor: 'rgba(0,0,0,0)' }}\n/>\n```", "```js\nconst onSeekMouseDown = e => {\n    setSeeking(true)\n}\n```", "```js\nconst onSeekChange = e => {\n    setValues({...values, played:parseFloat(e.target.value), \n                          ended: parseFloat(e.target.value) >= 1})\n}\n```", "```js\nconst onSeekMouseUp = e => {\n    setSeeking(false)\n    playerRef.seekTo(parseFloat(e.target.value))\n}\n```", "```js\nyarn add screenfull\n```", "```js\nimport screenfull from 'screenfull'\nimport { findDOMNode } from 'react-dom'\n```", "```js\n  useEffect(() => {\n    if (screenfull.enabled) {\n      screenfull.on('change', () => {\n        let fullscreen = screenfull.isFullscreen ? true : false\n        setFullscreen(fullscreen)\n      })\n    }\n  }, [])\n```", "```js\n<IconButton color=\"primary\" onClick={onClickFullscreen}>\n  <Icon>fullscreen</Icon>\n</IconButton>\n```", "```js\n  const onClickFullscreen = () => {\n   screenfull.request(findDOMNode(playerRef))\n  }\n```", "```js\n<time dateTime={`P${Math.round(duration * played)}S`}>\n      {format(duration * played)}\n</time> / \n<time dateTime={`P${Math.round(duration)}S`}>\n    {format(duration)}\n</time>\n```", "```js\n  const onDuration = (duration) => {\n    setDuration(duration)\n  }\n```", "```js\n  const format = (seconds) => {\n    const date = new Date(seconds * 1000)\n    const hh = date.getUTCHours()\n    let mm = date.getUTCMinutes()\n    const ss = ('0' + date.getUTCSeconds()).slice(-2)\n    if (hh) {\n      mm = ('0' + date.getUTCMinutes()).slice(-2)\n      return `${hh}:${mm}:${ss}`\n    }\n    return `${mm}:${ss}`\n  }\n```", "```js\n<FormControlLabel\n      control={\n        <Switch\n          checked={autoPlay}\n          onChange={handleChange}\n          color=\"primary\"\n        />\n      }\n      label={autoPlay ? 'Autoplay ON':'Autoplay OFF'}\n/>\n```", "```js\nconst handleChange = (event) => {\n   setAutoPlay(event.target.checked)\n}\n```", "```js\nconst handleAutoplay = (updateMediaControls) => {\n    let playList = relatedMedia\n    let playMedia = playList[0]\n    if(!autoPlay || playList.length == 0 )\n      return updateMediaControls()\n\n    if(playList.length > 1){\n      playList.shift()\n      setMedia(playMedia)\n      setRelatedMedia(playList)\n    }else{\n      listRelated({\n          mediaId: playMedia._id}).then((data) => {\n            if (data.error) {\n             console.log(data.error)\n            } else {\n              setMedia(playMedia)\n              setRelatedMedia(data)\n            }\n         })\n    }\n}\n```", "```js\n  const onEnded = () => {\n    if(loop){\n      setPlaying(true)\n    } else{\n      props.handleAutoplay(()=>{\n setValues({...values, ended: true}) \n setPlaying(false)\n })\n    }\n  }\n```", "```js\nyarn add react-router-config \n```", "```js\nimport PlayMedia from './media/PlayMedia' \nimport { read } from './media/api-media.js' \nconst routes = [\n  {\n    path: '/media/:mediaId',\n    component: PlayMedia,\n    loadData: (params) => read(params)\n  }\n]\nexport default routes \n```", "```js\nimport { matchRoutes } from 'react-router-config' \nimport routes from './../client/routeConfig' \nconst loadBranchData = (location) => {\n  const branch = matchRoutes(routes, location) \n  const promises = branch.map(({ route, match }) => {\n    return route.loadData\n      ? route.loadData(branch[0].match.params)\n      : Promise.resolve(null)\n  })\n  return Promise.all(promises)\n}\n```", "```js\nyarn add isomorphic-fetch\n```", "```js\nimport 'isomorphic-fetch'\n```", "```js\nserverUrl: process.env.serverUrl || 'http://localhost:3000'\n```", "```js\nimport config from '../../config/config'\nconst read = (params) => {\n  return fetch(config.serverUrl +'/api/media/' + params.mediaId, {\n    method: 'GET'\n  }).then((response) => { ... })\n```", "```js\n...\nloadBranchData(req.url).then(data => {\n       const markup = ReactDOMServer.renderToString(\n        sheets.collect(\n         <StaticRouter location={req.url} context={context}>\n             <ThemeProvider theme={theme}>\n                  <MainRouter data={data}/>\n             </ThemeProvider>\n          </StaticRouter>\n        )\n      )\n       ...\n  }).catch(err => {\n res.status(500).send({\"error\": \"Could not load React view with data\"})\n })\n...\n\n```", "```js\nconst MainRouter = ({data}) => { ... }\n```", "```js\n<Route path=\"/media/:mediaId\" \n       render={(props) => (\n <PlayMedia {...props} data={data} />\n )} \n/>\n```", "```js\nif (props.data && props.data[0] != null) {\n          media = props.data[0]\n          relatedMedia = []\n}\n```"]