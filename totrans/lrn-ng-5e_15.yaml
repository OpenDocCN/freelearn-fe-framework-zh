- en: '15'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Optimizing Application Performance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As developers and technical professionals, we play a crucial role in building
    and deploying Angular applications, ensuring their continued performance and delivering
    a superior user experience. Our efforts are instrumental in the success of our
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: The behavior of a web application and how it performs during runtime are key
    considerations for monitoring and optimization. We should monitor and measure
    application performance in case our application starts to degrade. One of the
    most popular metrics for identifying issues in web applications is **Core Web
    Vitals** ( **CWV** ).
  prefs: []
  type: TYPE_NORMAL
- en: After determining the causes of degradation, we can apply various optimization
    techniques. The Angular framework provides various tools for optimizing Angular
    applications, including **Server-Side Rendering** ( **SSR** ), image optimization,
    and deferred view loading. If we know that the application will be performance
    intensive beforehand, using any of the preceding tools is also highly encouraged
    early in development.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will explore the following Angular concepts regarding optimization:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Core Web Vitals
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rendering SSR applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optimizing image loading
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deferring components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prerendering SSG applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The chapter contains various code samples to walk you through the concept of
    optimizing Angular applications. You can find the related source code in the `ch15`
    folder of the following GitHub repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/Learning-Angular-Fifth-Edition](https://github.com/PacktPublishing/Learning-Angular-Fifth-Edition
    )'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Core Web Vitals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'CWV is a set of metrics that helps us measure the performance of a web application.
    It is part of **Web Vitals** , an initiative led by Google that unifies various
    guides and tools for measuring performance on web pages. Each metric focuses on
    a specific aspect of user experience, including the loading, interactivity, and
    visual stability of a web page:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Largest Contentful Paint** ( **LCP** ): This measures the load speed of a
    web page by calculating how long it takes for the largest element on the page
    to render. A fast LCP value indicates that the page becomes available to the user
    quickly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Interaction to Next Paint** ( **INP** ): This measures the responsiveness
    of a web page by calculating how long it takes to respond to user interactions
    and provide visual feedback. A low INP value indicates that the page responds
    to the user quickly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cumulative Layout Shift** ( **CLS** ): This measures the stability of the
    UI on a web page by calculating how often unwanted layout shifts occur. A layout
    shift usually happens when HTML elements are moved in the DOM due to dynamic or
    asynchronous loading. A low CLS value indicates that the page is visually stable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web Vitals contains additional metrics that contribute to the existing CWV set
    by measuring a wider or more niche area of UX, such as **First Contentful Paint**
    ( **FCP** ) and **Time to First Byte** ( **TTFB** ).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The value of each CWV metric falls into the following categories:'
  prefs: []
  type: TYPE_NORMAL
- en: '**GOOD** (green)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NEEDS IMPROVEMENT** (orange)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**POOR** (red)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can find out more about CWV categories and their thresholds at [https://web.dev/articles/vitals#core-web-vitals](https://web.dev/articles/vitals#core-web-vitals)
    .
  prefs: []
  type: TYPE_NORMAL
- en: 'We can measure CWV in the following ways:'
  prefs: []
  type: TYPE_NORMAL
- en: '**In the field** : We can use tools like **PageSpeed Insights** and **Chrome
    User Experience Report** while the web application runs in production.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Programmatically in JavaScript** : We can use standard web APIs or third-party
    libraries such as **web-vitals** .'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**In the lab** : We can use tools such as **Chrome DevTools** and **Lighthouse**
    while building the web application during development.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In this chapter, we will learn how to use Chrome DevTools to measure the performance
    of our e-shop application:'
  prefs: []
  type: TYPE_NORMAL
- en: Copy the source code from *Chapter 12* , *Introduction to Angular Material*
    , into a new folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command inside the new folder to install package dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following command to start the Angular application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open **Google Chrome** and navigate to `http://localhost:4200` .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Toggle the developer tools and select the **Lighthouse** tab. Lighthouse is
    a tool for measuring various performance aspects of a web page, including CWV.
    Google Chrome has an embedded version of Lighthouse that we can use to benchmark
    our application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Εικόνα που περιέχει κείμενο, στιγμιότυπο οθόνης, λογισμικό, εικονίδιο υπολογιστή  Περιγραφή
    που δημιουργήθηκε αυτόματα](img/B21418_15_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15.1: Lighthouse tab'
  prefs: []
  type: TYPE_NORMAL
- en: On the screen shown in the preceding image, we can generate a Lighthouse performance
    report by selecting various options, including the **Device** and **Categories**
    sections. The **Device** section allows us to specify the environment in which
    we want to measure our application. The **Categories** section allows us to evaluate
    different metrics, including **Performance** , related to CWV.
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the **Desktop** option in the **Device** section, check only the **Performance**
    option in the **Categories** section, and click the **Analyze page load** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![img](img/B21418_15_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15.2: Lighthouse report'
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding image, we can see the individual score from CWV metrics and
    the overall performance score.
  prefs: []
  type: TYPE_NORMAL
- en: The overall performance score is an estimation and may vary depending on the
    capabilities of your computer or any installed browser extensions. It is preferable
    to run the benchmark in **incognito or private** mode to simulate an environment
    closer to a real-world scenario.
  prefs: []
  type: TYPE_NORMAL
- en: In the following sections, we will explore ways to improve the performance score
    by applying Angular best practices. We will start with SSR.
  prefs: []
  type: TYPE_NORMAL
- en: Rendering SSR applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'SSR is a technique in web development that improves application performance
    and security in the following ways:'
  prefs: []
  type: TYPE_NORMAL
- en: It improves the loading performance by rendering the application on the server
    and eliminating the initial HTML content delivered to the client. The server delivers
    the initial HTML to the client, which can parse and load while it waits for the
    JavaScript content to be downloaded.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It improves **Search Engine Optimization** ( **SEO** ) by making the application
    discoverable and indexable by web crawlers. SEO provides meaningful content when
    shared in third-party applications such as social media platforms.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It improves CWV metrics related to loading speed and UI stability, such as LCP,
    FCP, and CLS.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It improves security by adding CSP nonces to Angular applications.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As we saw in *Chapter 1* , *Building Your First Angular Application* , when
    we created a new application using the Angular CLI, it prompted us to enable SSR:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In our case, we have already created an Angular application using the Angular
    CLI. To add SSR in an existing Angular application, run the following command
    in a terminal window inside the Angular CLI workspace:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command will ask us the following question:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Accept the default value, `No` , by pressing *Enter* and the Angular CLI will
    prompt us to install the `@angular/ssr` npm package.
  prefs: []
  type: TYPE_NORMAL
- en: A feature in **Developer Preview** means that it is not ready yet for production
    but you can test it in your development environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'After installation completes, the Angular CLI creates the following files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`main.server.ts` : This is used to bootstrap the application in the server
    using a specific configuration.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`app.config.server.ts` : This contains the configuration for the application
    rendered on the server. It exports a `config` variable, which contains a merged
    version of the client and server application configuration files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`server.ts` : This configures and starts a Node.js **Express** server that
    renders the Angular application on the server. It uses the `CommonEngine` class
    from the `@angular/ssr` package to start the Angular application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Additionally, the command will make the following modifications in the Angular
    CLI workspace:'
  prefs: []
  type: TYPE_NORMAL
- en: It will add the necessary options in the `build` section of the `angular.json`
    file to run the Angular application in SSR and SSG.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It will add the necessary entries in the `files` and `types` property of the
    `tsconfig.app.json` file so that the TypeScript compiler can identify the files
    created for the server.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It will add the necessary scripts and dependencies in the `package.json` file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It will add `provideClientHydration` in the `src\app\app.config.ts` file to
    enable **hydration** in the Angular application. Hydration is the process of restoring
    the server-side-rendered application to the client. We will learn more about hydration
    later in the chapter.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now that we have installed Angular SSR in our application, let’s see how to
    use it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `app.config.ts` file and modify the `import` statement of the `@angular/common/http`
    namespace as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `withFetch` method is used to configure the Angular HTTP client so that
    it uses the native `fetch` API for making requests.
  prefs: []
  type: TYPE_NORMAL
- en: It’s strongly recommended to enable `fetch` for applications that use SSR for
    better performance and compatibility.
  prefs: []
  type: TYPE_NORMAL
- en: 'Pass the `withFetch` method as a parameter in the `provideHttpClient` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following command to build the Angular application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding command generates `browser` and `server` bundles inside the `dist\my-app`
    folder and prerenders static routes. We will learn more about prerendering in
    the *Prerendering SSG applications* section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command to run the SSR application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding command will start the Express server locally at port `4000` and
    serve the SSR application.
  prefs: []
  type: TYPE_NORMAL
- en: Open Google Chrome and navigate to `http://localhost:4000` . You should see
    the e-shop application on the web page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Repeat the process we learned in the previous section to run a performance
    benchmark using Lighthouse. The overall score and CWV metrics should have been
    improved dramatically:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Εικόνα που περιέχει κείμενο, στιγμιότυπο οθόνης, λογισμικό, γραμματοσειρά  Περιγραφή
    που δημιουργήθηκε αυτόματα](img/B21418_15_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15.3: Lighthouse report (SSR)'
  prefs: []
  type: TYPE_NORMAL
- en: The performance of our application has been improved by more than 20% just by
    installing SSR in our Angular application! As we will learn later in the chapter,
    we can apply various Angular techniques to improve performance further more.
  prefs: []
  type: TYPE_NORMAL
- en: Angular SSR is a good fit when we need to fetch data from the server and display
    it statically on a website. However, there are cases where SSR is not beneficial,
    such as when an application is based on data entry and has a lot of user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: In the following section, we will learn how to override SSR or skip it completely
    for certain parts of an Angular application.
  prefs: []
  type: TYPE_NORMAL
- en: Overriding SSR in Angular applications
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Hydration is an important feature enabled by default in Angular SSR applications.
    It improves the overall performance of the application by handling the creation
    of the DOM on the client efficiently. The client can reuse the DOM structure of
    the server-side-rendered application instead of creating it from scratch and forcing
    a UI flicker, which affects CWV metrics such as LCP and CLS. The hydration process
    will fail in the following cases:'
  prefs: []
  type: TYPE_NORMAL
- en: When we try to manipulate the DOM through a native browser API such as `window`
    or `document` either directly or using a third-party library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When our component templates do not have a valid HTML syntax
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We can overcome the preceding problems by applying the following best practices:'
  prefs: []
  type: TYPE_NORMAL
- en: Use Angular APIs to detect the platform on which our application is running
    before interacting with the DOM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Skip hydration for specific Angular components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s see how to use both with an example:'
  prefs: []
  type: TYPE_NORMAL
- en: Run the SSR version of the Angular application, as shown in the previous section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Notice the text that is displayed in the application footer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**- v1.0**'
  prefs: []
  type: TYPE_NORMAL
- en: The copyright information is not displayed correctly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `copyright.directive.ts` file and focus on the `constructor` code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code uses the `nativeElement` property to manipulate the DOM by
    adding a CSS class and setting `textContent` of the HTML element. However, as
    mentioned, the code breaks our application because there is no DOM on the server.
    Let’s fix that!
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `app.component.html` file and add the `ngSkipHydration` attribute
    on the `<mat-toolbar>` element of the `<footer>` HTML tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`ngSkipHydration` is an HTML attribute, not an Angular directive. It can only
    be used in other Angular components, not native HTML elements. It would not work
    if we had added it in the `<footer>` tag instead.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the preceding snippet, the `<mat-toolbar>` component and its child components
    will not be hydrated. This effectively means that Angular will create them from
    scratch when the SSR version of the application is ready.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run step 1 again and observe the output in the application footer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Copyright ©2024 All Rights Reserved - v1.0**'
  prefs: []
  type: TYPE_NORMAL
- en: Skipping hydration should be considered a workaround. We use it temporarily
    in cases where hydration cannot be enabled. It is recommended to refactor your
    code so your application can benefit from hydration capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: 'An alternate and better approach is to refactor our code so that it executes
    client code conditionally:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Modify the `import` statements in the `copyright.directive.ts` file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `PLATFORM_ID` is an `InjectionToken` that indicates the type of platform
    our application is currently running on. The `isPlatformBrowser` function checks
    if a given platform ID is the browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `OnInit` interface to the list of implemented interfaces of the `CopyrightDirective`
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following class properties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Remove the `constructor` and add the following `ngOnInit` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `isPlatformBrowser` function accepts the platform ID as a parameter.
  prefs: []
  type: TYPE_NORMAL
- en: Angular also provides the `isPlatformServer` function, a counterpart of the
    `isPlatformBrowser` function, which checks if the current platform is the server.
  prefs: []
  type: TYPE_NORMAL
- en: Build and run the application in server-side mode to verify that the copyright
    message is still visible.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To sum up, it is recommended that you use Angular SSR throughout your application
    and refactor parts of the application code that must run on the browser. This
    will allow you to reap all the benefits of a server-side-rendered application.
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding section, we showed that adding SSR to an Angular application
    dramatically improves its overall performance score. As we will learn in the following
    section, we can do even better by applying optimization techniques to product
    images.
  prefs: []
  type: TYPE_NORMAL
- en: Optimizing image loading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The product list, which is the landing component of our application, displays
    an image of each product on the list. How images are loaded in an Angular application
    can affect CWV metrics such as LCP and CLS. Our application currently loads images
    as received from the Fake Store API. However, we can use specific Angular artifacts
    to enforce best practices while loading images.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Angular framework provides us with the `NgOptimizedImage` directive, which
    we can attach to `<img>` HTML elements:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `product-list.component.ts` file and import the `NgOptimizedImage`
    class from the `@angular/common` npm package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `NgOptimizedImage` class in the `imports` array of the `@Component`
    decorator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `product-list.component.html` file and replace the binding of the
    `src` property with the `ngSrc` directive:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `ngSrc` directive is insufficient to prevent layout shifts while loading
    the image. We must also set the image size by defining the `width` , `height`
    , or `fill` attributes. In this case, we will use the latter because the size
    of each image is not the same for all products:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the `product-list.component.css` file and add the following CSS styles
    to position the image at the top right of the container:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following command to start the application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Navigate to `http://localhost:4200` and verify that the product list is shown
    correctly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The benefits acquired from using the `NgOptimizedImage` directive are not noticeable
    in the UI at once. The directive works in the background and automatically improves
    the LCP metric of CWV by:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting fetch priority on the `<img>` HTML element
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lazy loading images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting `preconnect` link tags and preload hints in the case of SSR
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating `srcset` attributes for responsive images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Additionally, it helps developers to follow best practices regarding image
    loading, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting the size of the image if it is known beforehand
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loading images through a CDN
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying appropriate warnings in the console window for different metrics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `NgOptimizedImage` directive contains many other features we can enable
    to achieve powerful performance improvements, such as setting up image loaders,
    using placeholders, and defining priority images to load. You can find more information
    at [https://angular.dev/guide/image-optimization](https://angular.dev/guide/image-optimization)
    .
  prefs: []
  type: TYPE_NORMAL
- en: We have already learned about various tools for improving application performance.
    One of the most performant tools is **deferrable views** , which we will learn
    about in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Deferring components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Introducing the new control flow syntax enabled Angular to integrate new primitives
    in the framework, improving the ergonomics, DX, and performance of Angular applications.
    One such primitive is deferrable views, which allow lazily loading an Angular
    component and its dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing deferrable views
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have already learned how to use the Angular router for lazy loading a component
    based on a specific route. Deferrable views provide a new API that supplements
    the preceding one. Combining it with lazy-load routing guarantees the development
    of high-performance and powerful web applications. Deferrable views allow us to
    lazy load a component based on an event or the component state and have the following
    characteristics:'
  prefs: []
  type: TYPE_NORMAL
- en: They are simple to use and easy to reason about the enclosed code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We define them in a declarative way
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They minimize the initial application load and final bundle size, improving
    CWV metrics such as LCP and TTFB
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Each deferrable view is split into a separate chunk, similar to the individual
    chunk files generated by lazy-loaded routes. They consist of the following HTML
    blocks:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@defer` : Indicates the HTML content that will be loaded.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@placeholder` : Indicates the HTML content shown before the `@defer` block
    starts loading. It is particularly useful when the application is loaded over
    a slow network or when we want to avoid UI flickering.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@loading` : Indicates the HTML content that will be visible while the `@defer`
    block is loading.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@error` : Indicates the HTML content shown if an error occurs while the `@defer`
    block is loading.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will learn how to use each block in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Using deferrable blocks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will integrate deferrable views in our e-shop application by creating a
    component that displays a featured product from the Fake Store API that is not
    currently in the product list. Let’s start:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command to create the new component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `products.service.ts` file and add the following method, which gets
    a specific product with ID `20` from the Fake Store API:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `featured.component.ts` file and modify the `import` statements as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify the `imports` array of the `@Component` decorator as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify the `FeaturedComponent` class as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding TypeScript class, we have declared the `product$` observable
    and assigned it to the returned value of the `getFeatured` method from the `ProductsService`
    class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `featured.component.html` file and replace its contents with the following
    HTML code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding snippet, we use the `async` pipe to subscribe to the `product$`
    observable inside the `@if` block. The HTML content of the block displays product
    details as an Angular Material card component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `featured.component.css` file and add the following CSS styles for
    the card and the button components:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The new Angular component is in place. We must add it to the main component
    of the application and use a `@defer` block to load it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `app.component.ts` file and add the following `import` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `FeaturedComponent` class in the `imports` array of the `@Component`
    decorator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `app.component.html` file and add the `<app-featured>` component inside
    the `<main>` HTML tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding snippet, we use the `@defer` block to declare the `<app-featured>`
    component using the self-enclosing tag syntax.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the `ng serve` command to start the application and observe the **Lazy
    chunk files** section in the terminal window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The source code of the featured component is split into a chunk file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to `http://localhost:4200` and observe the new component on the right
    side of the product list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![img](img/B21418_15_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15.4: Featured product'
  prefs: []
  type: TYPE_NORMAL
- en: 'Try to reload the browser, and you will notice a UI flickering while loading
    the featured product. We will use the `@placeholder` block to display an outline
    image before the featured component starts loading:'
  prefs: []
  type: TYPE_NORMAL
- en: Copy the `placeholder.png` image from the `public` folder of the GitHub repository
    described in the *Technical requirements* section to the respective folder of
    your workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a `@placeholder` block following the `@defer` block as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `@placeholder` block accepts an optional parameter defining the `minimum`
    time the placeholder will be visible. In this case, we have defined the minimum
    time as `1` second.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the application using the `ng serve` command and verify that the following
    placeholder image is visible for 1 second before the actual content is loaded:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Εικόνα που περιέχει ορθογώνιο παραλληλόγραμμο, στιγμιότυπο οθόνης  Περιγραφή
    που δημιουργήθηκε αυτόματα](img/B21418_15_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15.5: Placeholder image'
  prefs: []
  type: TYPE_NORMAL
- en: 'An alternate approach would be to use the `@loading` block and display a loading
    indicator, such as a spinner, while the featured component is loading:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `app.component.ts` file and add the following `import` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `MatProgressSpinner` class is a spinner component from the Angular Material
    library.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `MatProgressSpinner` class in the `imports` array of the `@Component`
    decorator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `@loading` block in the `app.component.html` file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `@loading` block accepts the same optional parameters as the `@placeholder`
    block. In this case, we show the spinner component for `1` second minimum.
  prefs: []
  type: TYPE_NORMAL
- en: We added the `ngSkipHydration` attribute because the spinner component interacts
    with the browser DOM and cannot be hydrated.
  prefs: []
  type: TYPE_NORMAL
- en: If we run the application using the `ng serve` command, we should see a spinner
    indication for 1 second while the featured component is loading.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `@error` block in deferrable views works similarly to the `@placeholder`
    and `@loading` blocks. The HTML content inside it will be visible when an error
    occurs while loading the `@defer` block contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: As we have seen, the contents of a `@defer` block start loading immediately
    when the component that it belongs to is rendered. However, the deferrable views
    API provides us with ergonomic tools to control when the block will be loaded,
    as we will see in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Loading patterns in @defer blocks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Using **triggers** and **prefetch** mechanisms, we can control how and when
    a `@defer` block will load:'
  prefs: []
  type: TYPE_NORMAL
- en: Triggers define when the block’s contents start loading
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prefetch defines whether Angular will fetch the contents beforehand so that
    they are available when needed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We can define a trigger as an optional parameter inside the `@defer` block
    using the `on` keyword and the name of the trigger:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'The Angular framework contains the following built-in triggers:'
  prefs: []
  type: TYPE_NORMAL
- en: '`viewport` : This will trigger the block when the content enters the browser
    **viewport** , which is the part of the browser that is currently visible.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can learn more about the viewport at [https://developer.mozilla.org/docs/Glossary/Viewport](https://developer.mozilla.org/docs/Glossary/Viewport)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '`interaction` : This will trigger the block when the user interacts with the
    content.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hover` : This will trigger the block when users hover over the area covered
    by the content with their mouse.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`idle` : This will trigger the block when the browser has entered an **idle**
    state, which is the default behavior of deferrable views. The idle state of the
    browser is triggered by the native `requestIdleCallback` API.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can learn more about the idle state at [https://developer.mozilla.org/docs/Web/API/Window/requestIdleCallback](https://developer.mozilla.org/docs/Web/API/Window/requestIdleCallback)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '`immediate` : This will trigger the block when the client renders the page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The difference between not using the block and using it with the `immediate`
    trigger is that we benefit from the code-splitting features of deferrable views
    and deliver less JavaScript to the client.
  prefs: []
  type: TYPE_NORMAL
- en: '`timer` : This will trigger the block after a specified duration. The duration
    is a required parameter of the `timer` function:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding snippet will start loading the featured component after `2` seconds.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We can achieve better loading granularity by combining triggers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: The preceding snippet will load the featured component when the browser is `idle`
    *or* after `2` seconds.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to the built-in triggers, we can create custom triggers by ourselves
    using the `when` keyword. The `when` keyword is followed by an expression that
    evaluates to a boolean:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding snippet, the featured component will be loaded when the `isActive`
    component property is `true` .
  prefs: []
  type: TYPE_NORMAL
- en: 'Triggers in deferrable views are powerful and ergonomic tools that can give
    amazing results in speed and performance. When combined with prefetching, they
    can achieve great performance improvements in Angular applications. Prefetching
    allows us to specify the condition in which we can prefetch a deferrable view
    to be ready when needed. Prefetching supports all built-in triggers of deferrable
    views:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: The preceding snippet will prefetch the content when the browser is `idle` and
    load it after `2` seconds. It can also define when it will prefetch the content
    using the `when` keyword or create custom triggers.
  prefs: []
  type: TYPE_NORMAL
- en: Triggers and prefetching allow us to create sophisticated and complex scenarios
    for loading deferrable views. The versatility that the deferrable views API provides
    makes it a very useful tool in developing highly sophisticated and performant
    Angular applications.
  prefs: []
  type: TYPE_NORMAL
- en: Deferrable views should not be used for content that must be rendered immediately.
  prefs: []
  type: TYPE_NORMAL
- en: In the following section, we will conclude our journey to optimizing application
    performance with Angular SSG.
  prefs: []
  type: TYPE_NORMAL
- en: Prerendering SSG applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SSG or build-time prerendering is the process of creating static generated HTML
    files for an Angular application. It happens by default when we build an Angular
    SSR application using the `ng build` Angular CLI command.
  prefs: []
  type: TYPE_NORMAL
- en: The main benefit of an SSG application is that it does not require round-trip
    times between the server and client for each request. Instead, every page is served
    as static content, eliminating the time it takes to load the application, as measured
    by the TTFB CWV metric.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the *Rendering SSR applications* section, the output of the Angular CLI
    build command included the following message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s see how SSG works and what the preceding output means:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command to build the Angular application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `ng build` command will create the `dist\my-app\browser` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The preceding folder should not be confused with the `browser` folder generated
    when building a non-SSR Angular application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to the `dist\my-app` folder and open the `prerendered-routes.json`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: It lists the application routes that Angular SSG prerendered. It has also created
    one folder and `index.html` file for each route inside the `browser` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Open the `products\index.html` file, and you will see that Angular has added
    all CSS and HTML files, and it has even rendered the product data as fetched from
    the Fake Store API.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To preview how SSG works, run the `ng serve` command to start the application
    and navigate to `http://localhost:4200/products` . The product list loads instantly
    without waiting for the application to fetch data from the Fake Store API.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `ng serve` command serves the SSG version of our application because it
    executes the `ng build` command under the hood. To disable SSG, open the `angular.json`
    file and set the `prerender` property to `false` inside the `build` section.
  prefs: []
  type: TYPE_NORMAL
- en: SSG is enabled by default in Angular SSR applications and can dramatically improve
    their loading time and runtime performance. It can be particularly useful for
    low-end devices with poor performance.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned different ways to optimize and improve the performance
    of an Angular application. We introduced the concept of CWV and how it can affect
    a web application. We explored how to measure and improve CWV metrics using SSR
    and hydration in Angular applications. We also investigated different aspects
    of performance optimizations, such as the `NgOptimizedImage` directive and deferrable
    views. Finally, we saw an overview of SSG in Angular applications.
  prefs: []
  type: TYPE_NORMAL
- en: Our journey with the Angular framework ends with this chapter. However, the
    possibilities of what we can do are endless. The Angular framework is updated
    with new features in each release, giving web developers a powerful tool for everyday
    development. We were delighted to have you on board, and we hope this book has
    helped you to broaden your ideas on what you can achieve with such an excellent
    tool!
  prefs: []
  type: TYPE_NORMAL
- en: Join us on Discord
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Join our community’s Discord space for discussions with the author and other
    readers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/LearningAngular5e](https://packt.link/LearningAngular5e)'
  prefs: []
  type: TYPE_NORMAL
- en: '![img](img/QR_Code1314413148229661500.png)'
  prefs: []
  type: TYPE_IMG
- en: '![img](img/New_Packt_Logo1.png)'
  prefs: []
  type: TYPE_IMG
- en: '[packt.com](https://www.packt.com)'
  prefs: []
  type: TYPE_NORMAL
- en: Subscribe to our online digital library for full access to over 7,000 books
    and videos, as well as industry leading tools to help you plan your personal development
    and advance your career. For more information, please visit our website.
  prefs: []
  type: TYPE_NORMAL
- en: Why Subscribe?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Spend less time learning and more time coding with practical eBooks and Videos
    from over 4,000 industry professionals
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improve your learning with Skill Plans built especially for you
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Get a free eBook or video every month
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fully searchable for easy access to vital information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Copy and paste, print, and bookmark content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At [www.packt.com](https://www.packt.com) , you can also read a collection of
    free technical articles, sign up for a range of free newsletters, and receive
    exclusive discounts and offers on Packt books and eBooks.
  prefs: []
  type: TYPE_NORMAL
- en: Other Books You May Enjoy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you enjoyed this book, you may be interested in these other books by Packt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[![img](img/978-1-80512-553-2.jpg)](https://www.packtpub.com/en-us/product/effective-angular-9781805123002)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Effective Angular**'
  prefs: []
  type: TYPE_NORMAL
- en: Roberto Heckers
  prefs: []
  type: TYPE_NORMAL
- en: 'ISBN: 978-1-80512-553-2'
  prefs: []
  type: TYPE_NORMAL
- en: Create Nx monorepos ready to handle hundreds of Angular applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reduce complexity in Angular with the standalone API, inject function, control
    flow, and Signals
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Effectively manage application state using Signals, RxJS, and NgRx
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build dynamic components with projection, TemplateRef, and defer blocks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Perform end-to-end and unit testing in Angular with Cypress and Jest
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optimize Angular performance, prevent bad practices, and automate deployments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[![img](img/978-1-83508-770-1.jpg)](https://www.packtpub.com/en-us/product/reactive-patterns-with-rxjs-and-angular-signals-9781835083185)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Reactive Patterns with RxJS and Angular Signals**'
  prefs: []
  type: TYPE_NORMAL
- en: Lamis Chebbi
  prefs: []
  type: TYPE_NORMAL
- en: 'ISBN: 978-1-83508-770-1'
  prefs: []
  type: TYPE_NORMAL
- en: Get to grips with RxJS core concepts such as Observables, subjects, and operators
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the marble diagram in reactive patterns
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Delve into stream manipulation, including transforming and combining them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understand memory leak problems using RxJS and best practices to avoid them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build reactive patterns using Angular Signals and RxJS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Explore different testing strategies for RxJS apps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discover multicasting in RxJS and how it can resolve complex problems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build a complete Angular app reactively using the latest features of RxJS and
    Angular
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[![img](img/978-1-80512-712-3.jpg)](https://www.packtpub.com/en-us/product/angular-for-enterprise-applications-9781805125037)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Angular for Enterprise Applications, Third Edition**'
  prefs: []
  type: TYPE_NORMAL
- en: Doguhan Uluca
  prefs: []
  type: TYPE_NORMAL
- en: 'ISBN: 978-1-80512-712-3'
  prefs: []
  type: TYPE_NORMAL
- en: Best practices for architecting and leading enterprise projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Minimalist, value-first approach to delivering web apps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How standalone components, services, providers, modules, lazy loading, and directives
    work in Angular
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manage your app’s data reactivity using Signals or RxJS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: State management for your Angular apps with NgRx
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Angular ecosystem to build and deliver enterprise applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automated testing and CI/CD to deliver high quality apps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authentication and authorization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building role-based access control with REST and GraphQL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Packt is searching for authors like you
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you’re interested in becoming an author for Packt, please visit [authors.packtpub.com](https://authors.packtpub.com)
    and apply today. We have worked with thousands of developers and tech professionals,
    just like you, to help them share their insight with the global tech community.
    You can make a general application, apply for a specific hot topic that we are
    recruiting an author for, or submit your own idea.
  prefs: []
  type: TYPE_NORMAL
- en: Share your thoughts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now you’ve finished *Learning Angular, Fifth Edition* , we’d love to hear your
    thoughts! If you purchased the book from Amazon, please [click here to go straight
    to the Amazon review page](https://packt.link/r/1835087485) for this book and
    share your feedback or leave a review on the site that you purchased it from.
  prefs: []
  type: TYPE_NORMAL
- en: Your review is important to us and the tech community and will help us make
    sure we’re delivering excellent quality content.
  prefs: []
  type: TYPE_NORMAL
