- en: '11'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '11'
- en: Handling Application Errors
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理应用程序错误
- en: Application errors are an integral part of the lifetime of a web application.
    They can occur either during runtime or while developing the application. Possible
    causes of a runtime error are an HTTP request that failed or an incomplete HTML
    form. A web application must handle runtime errors and mitigate unwanted effects
    to ensure a smooth user experience.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序错误是网络应用程序生命周期的一个组成部分。它们可能发生在运行时或开发应用程序期间。运行时错误的可能原因包括失败的 HTTP 请求或不完整的 HTML
    表单。网络应用程序必须处理运行时错误并减轻不良影响，以确保流畅的用户体验。
- en: Development errors usually happen when we do not properly use a programming
    language or framework according to its semantics. In this case, errors may override
    the compiler and surface in the application while running. Development errors
    can be mitigated by following best practices and recommended coding techniques.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 开发错误通常发生在我们没有根据其语义正确使用编程语言或框架的情况下。在这种情况下，错误可能会覆盖编译器并在运行时在应用程序中暴露出来。通过遵循最佳实践和推荐的编码技术可以减轻开发错误。
- en: 'In this chapter, we will learn how to handle different types of errors in an
    Angular application and understand errors from the framework itself. We will explore
    the following concepts in more detail:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何在 Angular 应用程序中处理不同类型的错误，并理解来自框架本身的错误。我们将更详细地探讨以下概念：
- en: Handling runtime errors
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理运行时错误
- en: Demystifying framework errors
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 揭秘框架错误
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The code samples described in this chapter can be found in the `ch11` folder
    of the following GitHub repository:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中描述的代码示例可以在以下 GitHub 仓库的 `ch11` 文件夹中找到：
- en: '[https://www.github.com/PacktPublishing/Learning-Angular-Fifth-Edition](https://www.github.com/PacktPublishing/Learning-Angular-Fifth-Edition
    )'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.github.com/PacktPublishing/Learning-Angular-Fifth-Edition](https://www.github.com/PacktPublishing/Learning-Angular-Fifth-Edition)'
- en: Handling runtime errors
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理运行时错误
- en: 'The most common runtime errors in an Angular application come from the interaction
    with an HTTP API. Entering the wrong login credentials or sending data in the
    wrong format can result in an HTTP error. An Angular application can handle HTTP
    errors in the following ways:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Angular 应用程序中，最常见的运行时错误来自于与 HTTP API 的交互。输入错误的登录凭证或以错误格式发送数据可能导致 HTTP 错误。Angular
    应用程序可以通过以下方式处理 HTTP 错误：
- en: Explicitly during the execution of a particular HTTP request
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在执行特定 HTTP 请求期间显式处理
- en: Globally in the global error handler of the application
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在应用程序的全局错误处理器中全局处理
- en: Centrally using an HTTP interceptor
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 HTTP 拦截器集中处理
- en: In the following section, we will explore how to handle an HTTP error in a specific
    HTTP request.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下部分，我们将探讨如何处理特定 HTTP 请求中的 HTTP 错误。
- en: Catching HTTP request errors
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 捕获 HTTP 请求错误
- en: Handling errors in HTTP requests typically requires manually inspecting the
    information returned in the error response object. RxJS provides the `catchError`
    operator to simplify that. It can catch potential errors when initiating an HTTP
    request with the `pipe` operator.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 处理 HTTP 请求中的错误通常需要手动检查错误响应对象中返回的信息。RxJS 提供了 `catchError` 操作符来简化这个过程。它可以在使用 `pipe`
    操作符发起 HTTP 请求时捕获潜在的错误。
- en: You will need the source code of the Angular application we created in *Chapter
    10* , *Collecting User Data with Forms* , to follow along with the rest of the
    chapter.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 要跟随本章的其余部分，您需要我们在第 10 章 *使用表单收集用户数据* 中创建的 Angular 应用程序的源代码。
- en: 'Let’s see how we could use the `catchError` operator to catch HTTP errors while
    fetching the product list in our application:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们如何使用 `catchError` 操作符来捕获在应用程序中获取产品列表时的 HTTP 错误：
- en: 'Open the `products.service.ts` file and import the `catchError` and `throwError`
    operators from the `rxjs` npm package:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `products.service.ts` 文件，并从 `rxjs` npm 包中导入 `catchError` 和 `throwError` 操作符：
- en: '[PRE0]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Import the `HttpErrorResponse` interface from the `@angular/common/http` namespace:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `@angular/common/http` 命名空间导入 `HttpErrorResponse` 接口：
- en: '[PRE1]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Modify the `getProducts` method accordingly:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改 `getProducts` 方法：
- en: '[PRE2]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The signature of the `catchError` operator contains the actual `HttpErrorResponse`
    object that is returned from the server. After catching the error, we use the
    `throwError` operator, which re-throws the error as an observable.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`catchError` 操作符的签名包含从服务器返回的实际 `HttpErrorResponse` 对象。在捕获错误后，我们使用 `throwError`
    操作符，它将错误重新抛出为一个可观察对象。'
- en: Alternatively, we could have used the `throw` keyword from the standard web
    API methods to throw the error. However the `throwError` method is, most of the
    time, overkill. Please use it accordingly.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以使用标准Web API方法中的`throw`关键字来抛出错误。然而，`throwError`方法通常过于强大。请相应地使用它。
- en: This way, we ensure that the application execution will continue and complete
    without causing a potential memory leak.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，我们确保应用程序执行将继续并完成，而不会造成潜在的内存泄漏。
- en: 'In a real-world scenario, we would probably create a helper method to log the
    error in a more solid tracking system and return something meaningful according
    to the cause of the error:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际场景中，我们可能会创建一个辅助方法来在一个更稳固的跟踪系统中记录错误，并根据错误的原因返回一些有意义的信息：
- en: 'In the same file, `products.service.ts` , import the `HttpStatusCode` enumeration
    from the `@angular/common/http` namespace:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在同一文件`products.service.ts`中，从`@angular/common/http`命名空间导入`HttpStatusCode`枚举：
- en: '[PRE3]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`HttpStatusCode` is an enumeration that contains a list of all HTTP response
    status codes.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`HttpStatusCode`是一个枚举，包含所有HTTP响应状态码的列表。'
- en: 'Create the following method in the `ProductsService` class:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`ProductsService`类中创建以下方法：
- en: '[PRE4]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The preceding method logs a different message in the browser console according
    to the error status. It uses a `switch` statement to differentiate between internal
    server errors and bad requests. For any other errors, it falls back to the `default`
    statement, which logs a generic message in the console.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 上述方法根据错误状态在浏览器控制台中记录不同的消息。它使用`switch`语句来区分内部服务器错误和错误请求。对于其他任何错误，它回退到`default`语句，在控制台中记录一个通用的消息。
- en: 'Refactor the `getProducts` method to use the `handleError` method to catch
    errors:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重构`getProducts`方法以使用`handleError`方法来捕获错误：
- en: '[PRE5]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The `handleError` method currently manages HTTP errors originating only from
    the HTTP response. However, other errors can occur in an Angular application from
    the client side, such as a request that did not reach the server due to a network
    error or an exception thrown in an RxJS operator. To handle any of the previous
    errors, we should add a new `case` statement in the `handleError` method:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当前`handleError`方法仅管理来自HTTP响应的HTTP错误。然而，在Angular应用程序中，其他错误也可能发生，例如由于网络错误而未到达服务器的请求或在RxJS操作符中抛出的异常。为了处理上述任何错误，我们应该在`handleError`方法中添加一个新的`case`语句：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the preceding snippet, an error with a status of `0` indicates that it is
    an error that occurred on the client side of the application.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，状态为`0`的错误表示它是在应用程序客户端发生的错误。
- en: 'Error handling in HTTP requests could be combined with a mechanism that retries
    a given HTTP call a specific amount of times before handling the error. There
    is an RxJS operator for nearly everything, even one for retrying HTTP requests.
    It accepts the number of retries where the particular request has to be executed
    until it completes successfully:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在HTTP请求中处理错误时，可以结合一个机制，在处理错误之前重试特定的HTTP调用特定次数。对于几乎所有事情，RxJS都有一个操作符，甚至有一个用于重试HTTP请求的操作符。它接受重试次数，即特定请求必须执行直到成功完成：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We learned that we use the `catchError` RxJS operator to capture errors. The
    way we handle it depends on the scenario. In our case, we created a `handleError`
    method for all HTTP calls in a service. In a real-world scenario, we would follow
    the same approach of error handling in other Angular services of an application.
    Creating one method for each service would not be convenient and does not scale
    well.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们了解到我们使用`catchError` RxJS操作符来捕获错误。我们处理它的方式取决于场景。在我们的情况下，我们在服务中为所有HTTP调用创建了一个`handleError`方法。在实际场景中，我们会在应用程序的其他Angular服务中遵循相同的错误处理方法。为每个服务创建一个方法可能不方便，并且扩展性不好。
- en: Alternatively, we could utilize the global error handler that Angular provides
    to handle errors in a central place. We will learn how to create a global error
    handler in the next section.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以利用Angular提供的全局错误处理器来在中央位置处理错误。我们将在下一节学习如何创建全局错误处理器。
- en: Creating a global error handler
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建全局错误处理器
- en: The Angular framework provides the `ErrorHandler` class for handling errors
    globally in an Angular application. The default implementation of the `ErrorHandler`
    class prints error messages in the browser console window.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Angular框架提供了`ErrorHandler`类来处理Angular应用程序中的全局错误。`ErrorHandler`类的默认实现将在浏览器控制台窗口中打印错误消息。
- en: 'To create a custom error handler for our application, we need to sub-class
    the `ErrorHandler` class and provide our tailored implementation for error logging:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 要为我们自己的应用程序创建一个自定义错误处理器，我们需要对 `ErrorHandler` 类进行子类化，并提供我们定制的错误记录实现：
- en: Create a file named `app-error-handler.ts` in the `src\app` folder of the Angular
    CLI workspace.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Angular CLI 工作区的 `src\app` 文件夹中创建一个名为 `app-error-handler.ts` 的文件。
- en: 'Open the file and add the following `import` statements:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开文件并添加以下 `import` 语句：
- en: '[PRE8]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Create a TypeScript class that implements the `ErrorHandler` interface:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个实现 `ErrorHandler` 接口的 TypeScript 类：
- en: '[PRE9]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `AppErrorHandler` class must be decorated with the `@Injectable()` decorator
    because we will provide it later in the application configuration file.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`AppErrorHandler` 类必须使用 `@Injectable()` 装饰器进行装饰，因为我们将在应用程序配置文件中稍后提供它。'
- en: 'Implement the `handleError` method from the `ErrorHandler` interface as follows:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式实现 `ErrorHandler` 接口的 `handleError` 方法：
- en: '[PRE10]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In the preceding method, we check if the `error` object contains a `rejection`
    property. Errors originating from the **Zone.js** library, which is responsible
    for the change detection in Angular, encapsulate the actual error inside that
    property.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的方法中，我们检查 `error` 对象是否包含一个 `rejection` 属性。来自负责 Angular 中变更检测的 **Zone.js**
    库的错误，封装了实际的错误在该属性中。
- en: After extracting the error in the `err` variable, we check to see if it is an
    HTTP error using the `HttpErrorResponse` type. This check will eventually catch
    any errors from HTTP calls using the `throwError` RxJS operator. All other errors
    are treated as application errors that occur on the client side.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在从 `err` 变量中提取错误后，我们使用 `HttpErrorResponse` 类型检查它是否是 HTTP 错误。这个检查最终会捕获使用 `throwError`
    RxJS 操作符的任何 HTTP 调用的错误。所有其他错误都被视为客户端发生的应用错误。
- en: 'Open the `app.config.ts` file and import the `ErrorHandler` class from the
    `@angular/core` npm package:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `app.config.ts` 文件，并从 `@angular/core` npm 包中导入 `ErrorHandler` 类：
- en: '[PRE11]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Import the custom error handler we created in the `app-error-handler.ts` file:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `app-error-handler.ts` 文件中导入我们创建的自定义错误处理器：
- en: '[PRE12]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Register the `AppErrorHandler` class as the global error handler of the application
    by adding it to the `providers` array of the `appConfig` variable:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将其添加到 `appConfig` 变量的 `providers` 数组中，将 `AppErrorHandler` 类注册为应用程序的全局错误处理器：
- en: '[PRE13]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'To investigate the behavior of the global application error handler, execute
    the following steps:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 要调查全局应用错误处理器的行为，请执行以下步骤：
- en: Run the `ng serve` command to start the application.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `ng serve` 命令以启动应用程序。
- en: Disconnect your computer from the internet.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 断开您的计算机与互联网的连接。
- en: Navigate to `http://localhost:4200` .
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 `http://localhost:4200` 。
- en: 'Open the browser developer tools and inspect the output of the console window:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开浏览器开发者工具并检查控制台窗口的输出：
- en: '![img](img/B21418_11_01.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![img](img/B21418_11_01.png)'
- en: 'Figure 11.1: Application error'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.1：应用错误
- en: One of the most common HTTP errors in a web enterprise application is the **401
    Unauthorized** response error. We will learn how to handle this specific error
    in the following section.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个网络企业应用中最常见的 HTTP 错误之一是 **401 未授权** 的响应错误。我们将在下一节学习如何处理这个特定的错误。
- en: Responding to the 401 Unauthorized error
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 响应 401 未授权错误
- en: 'The 401 Unauthorized error in an Angular application can occur in the following
    cases:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Angular 应用程序中，401 未授权错误可能发生在以下情况：
- en: The user does not provide the correct credentials while logging in to the application
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户在登录应用程序时没有提供正确的凭据
- en: The authentication token provided when the user logged in to the application
    has expired
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户登录应用程序时提供的身份验证令牌已过期
- en: 'A good place to handle the 401 Unauthorized error is inside an HTTP interceptor
    responsible for authentication. In *Chapter 8* , *Communicating with Data Services
    over HTTP* , we learned how to create an authentication interceptor for passing
    the authorization token to every HTTP request. To handle the 401 Unauthorized
    error, the `auth.interceptor.ts` file could be modified as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 处理 401 未授权错误的好地方是在负责身份验证的 HTTP 拦截器内部。在 *第 8 章* ，*通过 HTTP 与数据服务通信* 中，我们学习了如何创建一个身份验证拦截器，以便将授权令牌传递给每个
    HTTP 请求。为了处理 401 未授权错误，`auth.interceptor.ts` 文件可以修改如下：
- en: '[PRE14]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The interceptor will call the `logout` method of the `AuthService` class when
    a 401 Unauthorized error occurs and return an `EMPTY` observable to stop emitting
    data. It will use the `throwError` operator to bubble the error to the global
    error handler in all other errors. As we have already seen, the global error handler
    will examine the returned error and take action according to the status code.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 当发生401未授权错误时，拦截器将调用`AuthService`类的`logout`方法并返回一个`EMPTY`可观察对象以停止发出数据。它将使用`throwError`运算符将错误冒泡到全局错误处理器中的所有其他错误。正如我们之前看到的，全局错误处理器将检查返回的错误并根据状态码采取行动。
- en: As we saw in the global error handler we created in the previous section, some
    errors are unrelated to the interaction with the HTTP client. There are application
    errors that occur on the client side, and we will learn how to understand them
    in the following section.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在上一节中创建的全局错误处理器中看到的，一些错误与HTTP客户端的交互无关。有一些应用程序错误是在客户端发生的，我们将在下一节中学习如何理解它们。
- en: Demystifying framework errors
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 揭秘框架错误
- en: Application errors that originate on the client side in an Angular application
    can have many causes. One of them is the interaction of our source code with the
    Angular framework. Developers like to try new things and approaches while building
    applications. Sometimes, things will go well but, other times, they may cause
    errors in an application.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在Angular应用程序中，客户端发生的应用程序错误可能有多种原因。其中之一是我们源代码与Angular框架的交互。开发者在构建应用程序时喜欢尝试新事物和方法。有时，一切都会顺利进行，但有时可能会在应用程序中引起错误。
- en: 'The Angular framework provides a mechanism for reporting some of these common
    errors with the following format:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Angular框架提供了一个机制，以以下格式报告一些常见错误：
- en: '[PRE15]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Let’s analyze the preceding error format:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分析前面的错误格式：
- en: '`NG` : Indicates that it is an Angular error to differentiate between other
    errors originating from TypeScript and the browser'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NG`：表示这是一个Angular错误，用于区分来自TypeScript和浏览器的其他错误'
- en: '`W` : A single-digit number that indicates the type of the error. 0 represents
    a runtime error, and all other numbers from 1 to 9 represent a compiler error'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`W`：一个一位数，表示错误的类型。0代表运行时错误，而1到9的所有其他数字代表编译器错误'
- en: '`X` : A single-digit number that indicates the category of the framework runtime
    area, such as change detection, dependency injection, and template'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`X`：一个一位数，表示框架运行区域类别，例如变更检测、依赖注入和模板'
- en: '`YZ` : A two-digit code used to index the specific error'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`YZ`：一个两位数代码，用于索引特定错误'
- en: '`{Error message}` : The actual error message'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`{错误消息}`：实际的错误消息'
- en: '`<Link>` : A link to the Angular documentation that provides more information
    about the specified error'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<链接>`：指向Angular文档的链接，提供有关指定错误的更多信息'
- en: 'Error messages that conform to the preceding format are displayed in the browser
    console as they happen. Let’s see an error example using the `ExpressionChangedAfterChecked`
    error, the most famous error in Angular applications:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 符合上述格式的错误消息将在浏览器控制台发生时显示。让我们通过使用`ExpressionChangedAfterChecked`错误（Angular应用程序中最著名的错误）来查看一个错误示例：
- en: 'Open the `app.component.ts` file and import the `AfterViewInit` artifact from
    the `@angular/core` npm package:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`app.component.ts`文件，从`@angular/core`npm包中导入`AfterViewInit`实体：
- en: '[PRE16]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Add the `AfterViewInit` in the list of implemented interfaces:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`AfterViewInit`添加到实现接口的列表中：
- en: '[PRE17]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Create the following `title` property in the `AppComponent` class:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`AppComponent`类中创建以下`title`属性：
- en: '[PRE18]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Implement the `ngAfterViewInit` method and change the `title` property inside
    the method body:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现`ngAfterViewInit`方法并在方法体内更改`title`属性：
- en: '[PRE19]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Open the `app.component.html` file and bind the `title` property to the `<h2>`
    HTML element:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`app.component.html`文件，将`title`属性绑定到`<h2>`HTML元素：
- en: '[PRE20]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Run the `ng serve` command and navigate to `http://localhost:4200` .
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`ng serve`命令并导航到`http://localhost:4200`。
- en: Initially, everything looks to work correctly. The value of the `title` property
    is displayed on the page correctly.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 初始时，一切看起来都工作正常。`title`属性的值在页面上正确显示。
- en: 'Open the browser developer tools and inspect the console window:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开浏览器开发者工具并检查控制台窗口：
- en: '[PRE21]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The preceding message indicates that changing the value of the `title` property
    caused the error.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的消息表明更改`title`属性的值导致了错误。
- en: Clicking on the [https://angular.dev/errors/NG0100](https://angular.dev/errors/NG0100)
    link will redirect us to the appropriate error guide in the Angular documentation
    for more information. The error guide explains the specific error and describes
    how to fix the problem in our application code.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击[https://angular.dev/errors/NG0100](https://angular.dev/errors/NG0100)链接将带我们转到Angular文档中适当的错误指南，以获取更多信息。错误指南解释了具体的错误，并描述了如何在我们的应用程序代码中修复问题。
- en: When we understand the error messages that originate from the Angular framework,
    we can fix them easily.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们理解了源自Angular框架的错误信息时，我们可以轻松地修复它们。
- en: Summary
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Handling errors during runtime or development is crucial for every Angular application.
    In this chapter, we learned how to handle errors that occur during the runtime
    of an Angular application, such as HTTP or client-side errors. We also learned
    how to understand and fix application errors thrown by the Angular framework.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行时或开发过程中处理错误对于每个Angular应用程序至关重要。在本章中，我们学习了如何在Angular应用程序运行时处理错误，例如HTTP或客户端错误。我们还学习了如何理解和修复由Angular框架抛出的应用程序错误。
- en: In the next chapter, we will learn how to skin our application to look more
    beautiful with the help of Angular Material. Angular Material has many components
    and styles that are ready for you to use in your projects. So, let’s give your
    Angular project the love it deserves.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何在Angular Material的帮助下美化我们的应用程序，使其看起来更美观。Angular Material拥有许多组件和样式，这些组件和样式已经准备好供你在项目中使用。所以，让我们给你的Angular项目带来应有的关爱。
