- en: '9'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '9'
- en: Rapid Development with Next.js, Gatsby, and Remix Frameworks
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Next.js、Gatsby和Remix框架进行快速开发
- en: Developers are continuously searching for tools and frameworks that can speed
    up the development process without compromising the flexibility and resilience
    of their apps in the rapid digital environment of today. Full stack React frameworks
    such as **Next.js**, **Gatsby**, and **Remix** have become crucial participants
    in the contemporary web development environment as the need for seamless user
    experiences and dynamic, data-driven apps keeps rising. This chapter thoroughly
    examines these three formidable frameworks, focusing on their distinctive features,
    advantages, and application use cases.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者持续寻找工具和框架，可以在不牺牲他们在快速数字环境中应用程序的灵活性和弹性的情况下加快开发过程。像**Next.js**、**Gatsby**和**Remix**这样的全栈React框架已成为当代Web开发环境中的关键参与者，因为对无缝用户体验和动态、数据驱动应用程序的需求不断上升。本章将彻底研究这三个强大的框架，重点关注它们的独特功能、优势和用例。
- en: We’ll look at how each framework approaches different technologies such as **server-side
    rendering** (**SSR**), SEO, and creating static sites. These frameworks can be
    used to create blazing-fast, scalable, and highly performant apps, so we will
    see how they do it. Knowing the difference between popular React build tools will
    help us justify our choices for using them when asked at an interview. So, let’s
    continue our learning and see how Next.js, Gatsby, and Remix can revolutionize
    our approach to web development and help us realize our digital goals. By the
    end of the chapter, we should have much better knowledge in this area to help
    us give great answers to interview questions.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将探讨每个框架如何处理不同的技术，例如**服务器端渲染**（**SSR**）、SEO以及创建静态站点。这些框架可以用来创建快速、可扩展且性能极高的应用程序，因此我们将了解它们是如何做到这一点的。了解流行React构建工具之间的区别将帮助我们解释在面试中被问到时为何选择使用它们。那么，让我们继续学习，看看Next.js、Gatsby和Remix如何革新我们的Web开发方法，帮助我们实现数字目标。到本章结束时，我们应该在这个领域拥有更深入的知识，以帮助我们给出出色的面试答案。
- en: 'These are the topics that we will be going through in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将讨论以下主题：
- en: Using React as a full stack framework
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将React用作全栈框架
- en: Static site generation
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 静态站点生成
- en: Server-side rendering
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器端渲染
- en: Adding page metadata
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加页面元数据
- en: SEO best practices
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SEO最佳实践
- en: Using React as a full stack framework
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将React用作全栈框架
- en: Let’s begin our journey by learning about Next.js, Gatsby, and Remix. If you
    are a modern developer then you should be using one of these three build tools
    to develop your React applications. They are recommended in the official React
    documentation, and understanding how they work and when to choose one over the
    other is paramount to putting together excellent interview answers. First, we
    will see what Next.js has to offer us.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过学习Next.js、Gatsby和Remix开始我们的旅程。如果你是一位现代开发者，那么你应该使用这三种构建工具之一来开发你的React应用程序。它们在官方React文档中被推荐，了解它们的工作原理以及何时选择其中一个而不是另一个对于准备出色的面试答案至关重要。首先，我们将看看Next.js能为我们提供什么。
- en: What is Next.js?
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是Next.js？
- en: Next.js is an open source framework for creating contemporary, scalable, and
    high-performance online apps with the help of React. Next.js, developed and maintained
    by **Vercel**, provides a complete collection of capabilities and optimizations
    that make it an excellent choice for both **static site generation** (**SSG**)
    and SSR.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Next.js是一个开源框架，借助React创建现代、可扩展和高性能的在线应用程序。由**Vercel**开发和维护的Next.js提供了一套完整的功能和优化，使其成为**静态站点生成**（**SSG**）和SSR的绝佳选择。
- en: 'Developers who choose to use Next.js for their React projects are blessed with
    a diverse tool that is rich in features. This has made Next.js the best framework
    for building React projects and replaces **Create React App** as the default choice.
    Some of its standout features are shown in the following table:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 选择Next.js作为其React项目开发者的开发者将获得一个功能丰富的多样化工具。这使得Next.js成为构建React项目的最佳框架，并取代了**Create
    React App**成为默认选择。以下表格展示了其一些突出特点：
- en: '| **Features** | **Explanation** |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| **功能** | **说明** |'
- en: '| --- | --- |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| **Code splitting** | It can automatically break the JavaScript code into
    smaller bits, ensuring that users only load the code required for a given page.
    This enhances the web application’s overall speed and loading times. |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| **代码拆分** | 它可以自动将JavaScript代码拆分成更小的块，确保用户只加载给定页面所需的代码。这提高了Web应用程序的整体速度和加载时间。|'
- en: '| **Dynamic importing** | Next.js enables developers to leverage dynamic imports
    to load JavaScript modules and components as needed, reducing the initial bundle
    size and improving speed. |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| **动态导入** | Next.js允许开发者利用动态导入来按需加载JavaScript模块和组件，从而减少初始包大小并提高速度。|'
- en: '| **API routing** | Support for building serverless API endpoints is included,
    so it’s simple to build **RESTful** or **GraphQL** APIs within your online application.
    |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| **API路由** | 包含构建无服务器API端点的支持，因此简单地在您的在线应用程序内构建**RESTful**或**GraphQL**API。|'
- en: '| **File routing** | It uses a file-based routing method that makes it simple
    to add new routes and pages by just adding new files to the `pages` folder. |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| **文件路由** | 它使用基于文件的路由方法，使得只需向`pages`文件夹添加新文件即可轻松添加新路由和页面。|'
- en: '| **Built-in TypeScript** | There is TypeScript support, allowing developers
    to create type-safe code while also benefiting from improved tools and refactoring.
    |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| **内置TypeScript** | 提供TypeScript支持，允许开发者创建类型安全的代码，同时还能受益于改进的工具和重构。|'
- en: '| **Hybrid renders** | With Next.js, we can enable static site creation as
    well as SSR, permitting developers to select the optimal solution for their particular
    situation or even combine both ways inside a single application. |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| **混合渲染** | 使用Next.js，我们可以启用静态站点创建以及SSR，允许开发者根据特定情况选择最佳解决方案，甚至可以在单个应用程序内结合两种方式。|'
- en: '| **Hot reload** | Hot reloading adds dynamic capabilities to a React application’s
    frontend UI. This implies that any changes we make to the application’s code are
    immediately reflected on the web application frontend that the user sees in real
    time. |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| **热重载** | 热重载为React应用程序的前端UI添加了动态功能。这意味着我们对应用程序代码所做的任何更改都会立即反映在用户实时看到的Web应用程序前端上。|'
- en: '| **Built-in support** **for CSS** | Next.js works out of the box with many
    CSS libraries and has the option to configure it with **Tailwind CSS** on setup.
    |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| **内置CSS支持** | Next.js与许多CSS库无缝工作，并在设置时可以选择配置**Tailwind CSS**。|'
- en: 'Table 9.1: Next.js features'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 表9.1：Next.js特性
- en: As a whole, Next.js is a strong and adaptable framework that can handle a variety
    of web development requirements, from SSG to the construction of static websites,
    making it an attractive choice for programmers creating efficient online applications.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，Next.js是一个强大且灵活的框架，可以处理各种Web开发需求，从SSG到静态网站的构建，使其成为创建高效在线应用程序的程序员的一个有吸引力的选择。
- en: Now, let’s have a look at Gatsby, which is another popular choice.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看Gatsby，这是另一个流行的选择。
- en: What is Gatsby?
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Gatsby是什么？
- en: Gatsby is a free and open source static site generator based on React for creating
    contemporary, high-performance web apps and static websites. Gatsby uses GraphQL,
    an API query language, to retrieve data from many sources and integrate it with
    your React components throughout the build process to produce static HTML, CSS,
    and JavaScript files. The end result is a website that is lightning-fast, SEO-friendly,
    and well optimized.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Gatsby是一个基于React的免费开源静态站点生成器，用于创建现代、高性能的Web应用和静态网站。Gatsby使用GraphQL，一种API查询语言，从多个来源检索数据，并在构建过程中将其与React组件集成，以生成静态HTML、CSS和JavaScript文件。最终结果是网站速度快、SEO友好且优化良好。
- en: It shares a few similarities with Next.js. However, it does differ in a few
    key areas. For starters, it is powered by GraphQL and it can also be used as a
    headless **content management system** (**CMS**). A CMS with a headless CMS separates
    the presentation layer, where the content is displayed, from the backend, where
    content is maintained. It distinguishes between knowledge and display. This allows
    for the reusing and rearranging of material across different digital media platforms.
    Basically, it is the equivalent of developing a WordPress website, but in this
    case, it is built for JavaScript developers, so we get access to the full suite
    of features.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 它与Next.js有一些相似之处。然而，它在一些关键领域有所不同。首先，它由GraphQL驱动，也可以用作无头**内容管理系统**（**CMS**）。无头CMS将展示层（内容展示的地方）与后端（内容维护的地方）分开。它区分了知识和展示。这允许在不同数字媒体平台上重用和重新排列材料。基本上，它相当于开发一个WordPress网站，但在这个案例中，它是为JavaScript开发者构建的，因此我们可以访问完整的特性集。
- en: 'We can have a look at some of the unique features that make Gatsby a great
    React build tool:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以查看一些独特的特性，这些特性使Gatsby成为一个出色的React构建工具：
- en: '| **Features** | **Explanation** |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| **特性** | **说明** |'
- en: '| --- | --- |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| **GraphQL integration** | Gatsby leverages GraphQL to build a uniform and
    flexible data layer, allowing developers to retrieve data from a variety of sources,
    including Markdown files, CMSs, APIs, and databases, and utilize it through their
    React components. |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| **GraphQL集成** | Gatsby利用GraphQL构建一个统一和灵活的数据层，允许开发者从Markdown文件、CMS、API和数据库等多种来源检索数据，并通过他们的React组件使用它。
    |'
- en: '| **Plugin library** | It features an extensive library of plugins that let
    programmers customize its capabilities, integrate it with multiple services, and
    tailor the development process to their own requirements. |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| **插件库** | 它拥有一个广泛的插件库，让程序员能够自定义其功能，将其与多种服务集成，并根据自身需求调整开发过程。 |'
- en: '| **Progressive web** **app (PWA)** | PWAs can be simply created by Gatsby-generated
    websites, enabling capabilities such as offline access, quick launching, and app-like
    performance on phones and tablets. |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| **渐进式网络** **应用（PWA**） | 通过Gatsby生成的网站可以轻松创建PWA，使其能够在手机和平板电脑上实现离线访问、快速启动和类似应用程序的性能。
    |'
- en: '| **Performance enhancements** | To guarantee rapid loading times and an effortless
    user experience, Gatsby automatically performs several speed optimizations such
    as code splitting, inlining crucial CSS, and lazy-loading of pictures. |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| **性能提升** | 为了保证快速加载时间和无障碍的用户体验，Gatsby自动执行多种速度优化，例如代码拆分、内联关键CSS和图片的懒加载。 |'
- en: '| **Versatile** **hosting choices** | The framework works nicely with a variety
    of hosting systems and provides continuous deployment, ensuring that it’s simple
    to set up and maintain your website. |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| **多才多艺的** **托管选择** | 该框架与各种托管系统配合良好，提供持续部署，确保网站设置和维护简单。 |'
- en: 'Table 9.2: Gatsby features'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 表9.2：Gatsby特性
- en: Gatsby is a strong and adaptable framework for creating rapid, SEO-friendly,
    and thoroughly optimized React and GraphQL web apps and static web pages. Because
    of its emphasis on speed, developer satisfaction, and flexibility, it is a favored
    option for programmers and enterprises.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Gatsby是一个强大且灵活的框架，用于创建快速、SEO友好和彻底优化的React和GraphQL网络应用程序和静态网页。由于其注重速度、开发者满意度和灵活性，它成为程序员和企业的首选选项。
- en: Finally, let’s see what our final option, the Remix framework, is capable of
    doing and how its capabilities and features match up with the previous two options.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们看看我们的最终选择，Remix框架，它能做什么，以及其功能和特性如何与前两种选项相匹配。
- en: What is Remix?
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是Remix？
- en: 'Remix is a cutting-edge web framework that uses React. Remix, which was built
    by the creators of **React Router**, seeks to deliver a fantastic user experience
    for developers while emphasizing the significance of web basics and best practices.
    Just like Next.js and Gatsby, the Remix framework also has a wide array of qualities
    that make it a great option when considering a starting point for your React projects.
    Remix has quite a lot of features, including the ones highlighted in the following
    table:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Remix是一个使用React的尖端网络框架。由**React Router**的创建者构建的Remix，旨在为开发者提供出色的用户体验，同时强调网络基础和最佳实践的重要性。就像Next.js和Gatsby一样，Remix框架也拥有众多特性，使其成为考虑React项目起点时的优秀选择。Remix具有许多功能，包括以下表格中突出显示的功能：
- en: '| **Features** | **Explanation** |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| **特性** | **说明** |'
- en: '| **Flexibility** | Remix is built to interact with a variety of backend technologies,
    server systems, and data sources of information, which makes it an ideal choice
    for programmers who work on a variety of applications. |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| **灵活性** | Remix旨在与各种后端技术、服务器系统和信息数据源交互，这使得它成为在多种应用程序上工作的程序员的理想选择。 |'
- en: '| **Nested routes** | It is an easy-to-use and robust nested routing framework
    that allows you to design complicated and multilevel structures while maintaining
    the state and scroll location throughout browsing. |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| **嵌套路由** | 它是一个易于使用且强大的嵌套路由框架，允许你在浏览过程中保持状态和滚动位置的同时，设计复杂的多级结构。 |'
- en: '| **Rendering outputs** | The framework features SSR, SSG, and **client-side
    rendering (CSR)**, allowing programmers to select the best rendering technique
    for a particular use case or even blend multiple ways inside one application.
    |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| **渲染输出** | 该框架具有SSR、SSG和**客户端渲染（CSR**）功能，允许程序员为特定用例选择最佳的渲染技术，甚至在一个应用程序内混合多种方式。
    |'
- en: '| **Web standards** | Because of its reliance on internet standards and its
    emphasis on the significance of exploiting browser-native technologies, it has
    enhanced speed and ease of use when using features such as the **Fetch** API,
    other HTML methods, and browser navigation. |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| **Web标准** | 由于其依赖于互联网标准，并强调利用浏览器原生技术的意义，它在使用**Fetch** API、其他HTML方法以及浏览器导航等特性时，提高了速度和易用性。|'
- en: '| **Data-fetching improvements** | Users can access the Remix “loader” methods,
    which provide a distinctive information-fetching strategy, enabling programmers
    to retrieve information from the server or client side, ensuring fast processing
    of data and rapid page transitions. |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| **数据获取改进** | 用户可以访问Remix的“loader”方法，这些方法提供了一种独特的信息获取策略，使程序员能够从服务器或客户端获取信息，确保数据的快速处理和快速页面转换。|'
- en: 'Table 9.3: Remix features'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 表9.3：Remix特性
- en: In a nutshell, Remix is a strong and adaptable web framework for creating high-performance,
    feature-rich React apps. It distinguishes itself from other frameworks by focusing
    on web principles, best practices, and developer experience, making it an enticing
    alternative for developers wanting to build modern online apps. These features
    make it developer friendly, and the documentation is easy to understand.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，Remix是一个强大且灵活的Web框架，用于创建高性能、功能丰富的React应用。它通过专注于Web原则、最佳实践和开发者体验，与其他框架区分开来，成为想要构建现代在线应用的开发者的一个有吸引力的替代品。这些特性使其对开发者友好，文档也易于理解。
- en: Now, moving on to the next section, we will learn about SSG, which is a popular
    tool for web developers to swiftly and effectively design websites. All of the
    frameworks we are discussing use it for builds.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们进入下一节，我们将学习关于SSG的内容，这是一个流行的工具，可以帮助网络开发者快速有效地设计网站。我们讨论的所有框架都使用它来进行构建。
- en: Static site generation
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 静态站点生成
- en: It’s now time for us to learn about SSG and why it’s so important. We will present
    an overview of static site creation, the way it works, and the reason why it has
    become so popular among millions of developers worldwide. With this technology,
    you will be able to rapidly develop stunning sites without having to be concerned
    about installing complicated server settings or handling obtrusive backend operations.
    Let’s do it.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是我们学习SSG以及为什么它如此重要的时候了。我们将概述静态站点创建的过程、它的工作原理以及为什么它在全球数百万开发者中变得如此受欢迎。有了这项技术，你将能够快速开发令人惊叹的网站，而无需担心安装复杂的服务器设置或处理烦人的后端操作。让我们行动起来吧。
- en: Why should you care about SSG?
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你为什么应该关注SSG？
- en: It’s a popular approach to developing websites, and for good reason. Instead
    of depending on a server to produce site content on the fly each time a user demands
    a page, static site creation pre-builds all required files and sends them through
    a user’s computer as soon as a page is requested. This leads to speedier load
    times and overall better performance. Static sites are also easier and less expensive
    to host because there is no dynamic material to handle. So, whether you’re a developer
    trying to streamline your workflow or a company owner looking to increase the
    performance and accessibility of your site, static site creation is absolutely
    something to think about.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种流行的网站开发方法，原因很好。不是依赖于服务器在用户每次请求页面时即时生成站点内容，静态站点创建预先构建所有必需的文件，并在用户请求页面时通过用户的计算机发送。这导致加载时间更快，整体性能更好。静态站点也更容易且成本更低，因为没有动态内容需要处理。因此，无论是试图简化工作流程的开发者，还是希望提高网站性能和可访问性的公司所有者，静态站点创建绝对是一件值得考虑的事情。
- en: What are the advantages of using a static site generator?
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用静态站点生成器的优势有哪些？
- en: For developers aiming to simplify and improve their processes, static site generators
    are game changers. Static site generators, which do not rely on a database or
    server-side scripting, tend to be dependable even under tremendous traffic, making
    them an excellent choice for both corporations and individuals. Additionally,
    with the flexibility of a large choice of themes, developers can keep total control
    over the aesthetic of their website while benefiting from the performance of a
    static site. With advantages such as performance, security, and personalization,
    it’s no surprise that static site generators are gaining favor.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 对于旨在简化并改进其流程的开发者来说，静态站点生成器是变革性的。不依赖于数据库或服务器端脚本的静态站点生成器，即使在巨大流量下也往往很可靠，这使得它们成为企业和个人都极佳的选择。此外，凭借大量主题的灵活性，开发者可以在享受静态站点性能的同时，完全控制其网站的美观。凭借性能、安全性和个性化等优势，静态站点生成器越来越受欢迎也就不足为奇了。
- en: Using a static site generator leads to further advantages and better maintenance.
    Let’s now understand how these can make our applications safer and more robust.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 使用静态站点生成器可以带来更多优势并改善维护。现在让我们了解这些如何使我们的应用程序更安全、更健壮。
- en: Why are speed and performance so good in static websites?
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么静态网站的速度和性能如此之好？
- en: 'Static site generators are tools that assist with the creation of static websites
    through the transformation of source files (such as Markdown or templates) into
    static HTML, CSS, and JavaScript files. They are well known for outperforming
    dynamic websites in terms of speed and performance for many different reasons
    that we are going to learn about now:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 静态站点生成器是帮助通过将源文件（如Markdown或模板）转换为静态HTML、CSS和JavaScript文件来创建静态网站的工具。它们因在速度和性能方面优于动态网站而闻名，以下是我们将要了解的许多原因：
- en: '**On-demand page content**: In contrast to dynamic websites, which construct
    pages on the spot according to every request, static site generators pre-build
    all pages throughout the build process. When a user requests a page, the website’s
    server can just send the already created HTML file, making it quicker.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**按需页面内容**：与动态网站不同，动态网站根据每个请求即时构建页面，而静态站点生成器在整个构建过程中预先构建所有页面。当用户请求页面时，网站的服务器只需发送已创建的HTML文件，这使得加载更快。'
- en: '**Caches static files**: **Content delivery networks** (**CDNs**) and websites
    can readily cache static files. CDNs can keep replicas of static files on hosts
    all around the globe, enabling users to view material from a location near them.
    This decreases latency and speeds up loading times.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缓存静态文件**：**内容分发网络**（**CDNs**）和网站可以轻松缓存静态文件。CDNs可以在全球各地的主机上保留静态文件的副本，使用户能够从附近的位置查看内容。这减少了延迟并加快了加载时间。'
- en: '**Data compression**: Static site generators frequently contain tools for minimizing
    and compressing assets such as HTML, CSS, and JavaScript. This decreases file
    sizes, resulting in quicker transmission and loading times.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据压缩**：静态站点生成器通常包含用于最小化和压缩资产（如HTML、CSS和JavaScript）的工具。这减少了文件大小，从而加快了传输和加载时间。'
- en: '**Decreased web page loading times**: Because the web pages are pre-built,
    the computer running them does not have to spend time performing server-side code
    or searching databases. This minimizes system strain and enables the computer
    to process additional requests at the same time.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**减少网页加载时间**：由于网页是预先构建的，运行它们的计算机不需要花费时间执行服务器端代码或搜索数据库。这减少了系统压力，并使计算机能够同时处理更多请求。'
- en: '**Robust security settings**: Given that static internet pages do not have
    databases or server-side programming, they are less susceptible to attacks such
    as **SQL injection** and **cross-site scripting** (**XSS**). This can boost performance
    immediately by lowering the chances of the website being hacked and dragged down
    by criminal activity.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**强大的安全设置**：由于静态网页没有数据库或服务器端编程，它们不太容易受到如**SQL注入**和**跨站脚本**（**XSS**）等攻击。这可以通过降低网站被黑客攻击和被犯罪活动拖垮的机会来立即提高性能。'
- en: So, basically, static site generators provide various advantages to website
    developers, including faster performance, improved security, and simpler maintenance
    and upgrading. It is critical to be aware of the most common static site generators
    on the market, as well as the step-by-step instructions for installing a static
    site generator.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，基本上，静态站点生成器为网站开发者提供了各种优势，包括更快的性能、改进的安全性、以及更简单的维护和升级。了解市场上最常见的静态站点生成器以及安装静态站点生成器的逐步说明至关重要。
- en: Knowing the best practices for configuring a static site generator is also useful
    in ensuring that your brand’s website functions properly from the start. Finally,
    as with all computer users, it is critical to track your static website on a regular
    basis to maintain constant peak performance and to detect any possible dangers.
    Using a static site generator is a good option for people who want to take their
    website-building skills to the next level.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 了解配置静态站点生成器的最佳实践也有助于确保您的品牌网站从一开始就能正常工作。最后，就像所有计算机用户一样，定期跟踪您的静态网站对于保持持续的最佳性能和检测任何可能的危险至关重要。对于想要将他们的网站构建技能提升到下一个层次的人来说，使用静态站点生成器是一个不错的选择。
- en: With our knowledge in this area boosted, let’s move on to SSR so that we are
    also able to talk about this topic in depth when asked about it.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个领域我们的知识得到提升后，让我们继续学习SSR，这样当我们被问到时，也能深入讨论这个话题。
- en: Server-side rendering
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务器端渲染
- en: 'In this section, we’ll look at one of the most efficient and successful methods
    for creating fast-loading web pages: SSR. Using SSR techniques ensures that the
    website loads swiftly and looks good on all devices. We will discuss what it implies,
    how it works, why it is essential, and the benefits of employing this strategy
    over other ones.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨创建快速加载网页最有效和最成功的方法之一：SSR。使用SSR技术确保网站快速加载且在各种设备上看起来都很好。我们将讨论它意味着什么，它是如何工作的，为什么它很重要，以及采用这种策略而不是其他策略的好处。
- en: Then, with the aforementioned information, we will learn how it becomes much
    easier to improve our site’s user experience and have greater control over loading
    times so our users can access material more quickly and without interruption.
    When we are done with this chapter, we will have all the knowledge we need to
    explain what SSR is. Now, let’s answer some of the biggest questions about SSR.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，根据上述信息，我们将学习如何使提高我们网站的用户体验和更好地控制加载时间变得容易得多，这样我们的用户就可以更快且不间断地访问材料。当我们完成这一章时，我们将拥有解释SSR所需的所有知识。现在，让我们回答一些关于SSR的最大问题。
- en: What is SSR and why is it important?
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是SSR以及为什么它很重要？
- en: Websites must load as quickly as possible. This is where SSR enters the picture.
    The process of producing a web page on the server side before delivering it to
    the client’s browser is known as SSR. This significantly speeds up the process
    because the server could provide a pre-populated HTML file to the browser, instead
    of waiting for the browser to request the necessary assets and construct the HTML
    file itself.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 网站必须尽可能快地加载。这就是SSR登场的地方。在将网页发送到客户端浏览器之前，在服务器端生成网页的过程称为SSR。这大大加快了过程，因为服务器可以向浏览器提供一个预先填充的HTML文件，而不是等待浏览器请求必要的资源并自己构建HTML文件。
- en: This not only enhances the user experience but also provides major SEO benefits,
    because search engines can crawl server-side-rendered material more readily than
    client-side-generated content. In brief, SSR is an important strategy for assuring
    faster load times and improved search engine exposure.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这不仅提升了用户体验，还提供了主要的SEO优势，因为搜索引擎可以比客户端生成的内容更容易地抓取服务器端渲染的内容。简而言之，SSR是确保更快加载时间和提高搜索引擎曝光率的重要策略。
- en: How does SSR work? The fundamentals of SSR page loading
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SSR是如何工作的？SSR页面加载的基本原理
- en: SSR is a method that can significantly enhance a website’s speed and user experience.
    SSR is a means of rendering a web page on the server before transmitting it to
    the client (browser). When a user requests a page, the server creates the HTML,
    populates it with basic data, and returns it to the client as a pre-rendered page.
    This strategy greatly decreases the amount of time it requires to load a website
    and enables quicker CSR. SSR, in basic terms, gives a quicker, more efficient,
    and more intuitive experience by generating a page with preliminary material on
    the server.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: SSR是一种可以显著提升网站速度和用户体验的方法。SSR是一种在将网页传输到客户端（浏览器）之前在服务器上渲染网页的方法。当用户请求一个页面时，服务器创建HTML，填充基本数据，并将其作为预渲染的页面返回给客户端。这种策略大大减少了加载网站所需的时间，并使得CSR（客户端渲染）更快。在基本术语中，SSR通过在服务器上生成带有初步内容的页面，提供了一个更快、更高效、更直观的体验。
- en: What are the advantages of SSR?
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SSR有哪些优点？
- en: One of the most crucial elements for websites right now is their loading speed.
    Nobody likes waiting for a website to load, which is where SSR comes in. SSR enables
    the server to build a website’s HTML code before it is transmitted to the browser,
    resulting in quicker loading times, enhanced SEO, and greater user accessibility.
    Additionally, SSR can aid in the prevention of frequent difficulties, such as
    content loading before it’s ready (which may lead to broken designs) and content
    moving around the screen. This results in a smoother user experience. Overall,
    the benefits of SSR make it an essential component in the development of successful
    and efficient websites.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 目前网站最重要的一个要素就是它们的加载速度。没有人喜欢等待网站加载，这就是SSR发挥作用的地方。SSR允许服务器在将HTML代码传输到浏览器之前构建网站，从而实现更快的加载时间、增强的SEO和更高的用户可访问性。此外，SSR还可以帮助预防一些常见问题，如内容在准备好之前加载（可能导致设计损坏）和内容在屏幕上移动。这导致了更流畅的用户体验。总的来说，SSR的好处使其成为成功和高效网站开发的一个关键组成部分。
- en: 'When utilized in web applications, SSR offers various benefits. Among these
    many advantages, we can find many reasons why it is seeing such high usage these
    days. Let’s learn more:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 当在Web应用程序中使用时，SSR（服务器端渲染）提供了各种好处。在这些许多优点中，我们可以找到许多原因来解释为什么它现在如此广泛地被使用。让我们深入了解：
- en: '**Strong SEO**: Because the final programming files are created on the server
    before being transmitted to the client’s web browser, search engines can simply
    scan and index server-rendered content. This helps search engines comprehend and
    rate your website, increasing its prominence in the search results.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**强大的SEO（搜索引擎优化）**：因为最终编程文件是在传输到客户端的Web浏览器之前在服务器上创建的，所以搜索引擎可以简单地扫描和索引服务器端渲染的内容。这有助于搜索引擎理解并评估你的网站，从而提高其在搜索结果中的突出度。'
- en: '**Dynamic data**: SSR is appropriate for apps that demand regular updates or
    that require clients to see personalized content. Because the content is created
    on the server, it is able to be readily changed or customized depending on input
    from users, cookies, or additional factors without requiring the whole website
    to be rebuilt.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**动态数据**：SSR适用于需要定期更新或需要客户端查看个性化内容的App。由于内容是在服务器上创建的，它可以根据用户的输入、cookies或其他因素轻松更改或定制，而无需重建整个网站。'
- en: '**Fast loading times**: When compared to CSR, SSR can give quicker initial
    page load times because the browser obtains completely rendered HTML content from
    the server, removing the requirement to wait on JavaScript to load and run before
    showing the content on the screen. This can lead to improved user perception of
    website performance.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**快速加载时间**：与CSR相比，SSR可以提供更快的初始页面加载时间，因为浏览器从服务器获得完全渲染的HTML内容，无需等待JavaScript加载和运行后才在屏幕上显示内容。这可以提高用户对网站性能的感知。'
- en: '**Web browser legacy support**: With SSR, we can improve support for outdated
    browsers and devices with restricted JavaScript capabilities. As the data is displayed
    on the server, regardless of whether certain JavaScript capabilities are available
    or not, these browsers can view them.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Web浏览器兼容性**：使用SSR，我们可以改善对过时浏览器和具有受限JavaScript功能的设备的支持。由于数据是在服务器上显示的，无论某些JavaScript功能是否可用，这些浏览器都可以查看它们。'
- en: With SSR, we gain a lot of advantages, but we also need to take into account
    how SSR can have a detrimental effect on our applications. Next, we will see what
    the disadvantages are and learn whether they are dealbreakers.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 使用SSR，我们获得了许多好处，但我们也需要考虑SSR如何对我们的应用程序产生不利影响。接下来，我们将看到这些缺点，并学习它们是否是决定性的。
- en: What are the disadvantages of SSR?
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SSR有哪些缺点？
- en: 'Although SSR has advantages such as increased SEO and faster beginning load
    times, it also has some drawbacks. Let’s take a look at some of these drawbacks:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然SSR具有增加SEO和加快初始加载时间等优势，但它也有一些缺点。让我们来看看其中的一些缺点：
- en: '**Application server requirements**: To display and transmit the content, SSR
    depends on the server. If the server is experiencing latency or is down, this
    can lead to problems because the whole website could become unreachable or load
    slowly.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用服务器需求**：为了显示和传输内容，SSR依赖于服务器。如果服务器出现延迟或宕机，这可能会导致问题，因为整个网站可能会变得无法访问或加载缓慢。'
- en: '**More complex architecture**: The application architecture becomes more complicated
    when SSR is implemented because server-side programming and administration are
    needed. Debugging and upkeep could become more difficult as a result, while development
    time might go up.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更复杂的架构**：实施SSR时，应用架构变得更加复杂，因为需要服务器端编程和管理。因此，调试和维护可能会变得更加困难，而开发时间可能会增加。'
- en: '**Caching issues**: Compared to static files, dynamic material produced by
    SSR is frequently harder to adequately cache. As a result, caching’s performance
    advantages might be diminished, and the workload of servers can escalate.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缓存问题**：与静态文件相比，SSR产生的动态内容通常更难以充分缓存。因此，缓存性能的优势可能会降低，服务器的负载可能会增加。'
- en: '**Decreased server efficiency**: SSR will raise server load and CPU use, particularly
    on sites with heavy traffic, because it necessitates the server rendering the
    pages for each request. As a result, there may be a demand for more robust and
    pricey infrastructure for servers and longer turnaround times.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务器效率降低**：SSR会增加服务器负载和CPU使用，尤其是在流量大的网站上，因为它需要服务器为每个请求渲染页面。因此，可能需要更强大且昂贵的服务器基础设施，以及更长的周转时间。'
- en: Regardless of these drawbacks, SSR can still be a useful option in some circumstances,
    such as if SEO is a necessity or if dynamic material has to be displayed rapidly.
    Before selecting a rendering strategy, it is crucial to analyze the benefits and
    drawbacks and consider the specific needs of your project.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管有这些缺点，但在某些情况下，SSR仍然是一个有用的选择，例如，如果SEO是必需的，或者必须快速显示动态内容。在选择渲染策略之前，分析利弊并考虑项目的具体需求至关重要。
- en: Remaining on topic, let’s now segue into the subject of SEO, which is related
    to page metadata. This will give us answers to the interview question on how we
    can improve the SEO for our applications and websites.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 保持主题，现在让我们转向与页面元数据相关的SEO主题，这将为我们提供关于如何改进应用程序和网站的SEO的面试问题的答案。
- en: Adding page metadata
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加页面元数据
- en: Adding page information to enhance SEO does not have to be challenging. Once
    we have gone through this section, we should be able to grasp and talk about the
    fundamentals of increasing a website’s visibility via the use of SSG and other
    techniques. As soon as we grasp the principles, it becomes so much easier to develop
    pages, giving us the real-world experience needed for coming up with answers to
    questions on creating better SEO.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 为了增强SEO而添加页面信息并不一定具有挑战性。一旦我们通过了这一章节，我们应该能够掌握并讨论如何通过使用SSG和其他技术来提高网站可见性的基础知识。一旦我们掌握了这些原则，开发页面就会变得容易得多，这为我们提供了在现实世界中提出关于如何创建更好的SEO问题的答案所需的经验。
- en: What is page metadata and why is it important for SEO?
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 页面元数据是什么？为什么它对SEO很重要？
- en: In order to increase traffic to your website, SEO is essential. Page metadata
    is possibly one of the most crucial components of a good SEO strategy, but there
    are many more. Title tags, meta descriptions, and keywords are examples of metadata,
    which is information that characterizes the content of a web page. The material
    on your website might be better understood by search engines and made more interesting
    to potential visitors by optimizing your metadata. In simple terms, page metadata
    functions as a roadmap for both visitors and search engines, making it a crucial
    part of any SEO plan.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 为了增加网站流量，SEO是必不可少的。页面元数据可能是良好SEO策略中最关键的部分之一，但还有更多。标题标签、元描述和关键词是元数据的例子，这是描述网页内容的信息。通过优化元数据，可以使搜索引擎更好地理解您网站上的内容，并使潜在访客更加感兴趣。简单来说，页面元数据既是访客也是搜索引擎的路线图，因此它是任何SEO计划的关键部分。
- en: What types of page metadata can be used for SSG?
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对于SSG，可以使用哪些类型的页面元数据？
- en: Understanding the significance of page information is essential for creating
    static sites. In principle, metadata is information about information, and it
    aids search engines in understanding the purpose of your website. Title tags,
    meta descriptions, and alt text are just a few examples of the several kinds of
    information that are regularly used on a website. The words that show in your
    web browser’s tab are called title tags, and meta descriptions give a one-sentence
    overview of the contents of the page. Images are frequently accurately classified
    by search engines when they include descriptive alt text. You can boost the search
    engine ranking of your website and make a guarantee that what you publish is correctly
    indexed by including these various sorts of metadata.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 理解页面信息的重要性对于创建静态网站至关重要。原则上，元数据是关于信息的信息，它帮助搜索引擎理解您网站的目的。标题标签、元描述和alt文本只是经常在网站上使用的几种信息类型。显示在您的网络浏览器标签中的文字被称为标题标签，元描述则给出对页面内容的简短概述。当图片包含描述性的alt文本时，搜索引擎通常会准确地对其进行分类。通过包含这些不同类型的元数据，您可以提高您网站的搜索引擎排名，并确保您发布的内容被正确索引。
- en: To make it clear how much of an impact metadata can have, we are going to learn
    about some popular types. We will now learn about meta titles, meta descriptions,
    meta viewports, meta robots, meta authors, meta language, and open graph tags.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 为了清楚地了解元数据可以产生多大的影响，我们将学习一些流行的类型。现在我们将学习元标题、元描述、元视口、元机器人、元语言和开放图标签。
- en: What is a meta title?
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 什么是元标题？
- en: Any website’s SEO plan has to include title tags. Make sure they appropriately
    represent the content on each page, because they are the first thing that search
    engines such as Google notice when they crawl your website. In addition to essential
    keywords, title tags should be clear, comprehensible, and interesting. Your search
    engine rankings can be enhanced, and the number of clicks can be increased with
    a well-written title tag. So, whether you’re developing a new website or optimizing
    an existing one, pay special attention to your title tags and make sure they’re
    successful in drawing attention to your website.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 任何网站的SEO计划都必须包括标题标签。确保它们适当地代表每个页面的内容，因为当搜索引擎如谷歌爬取您的网站时，它们首先注意到的是标题标签。除了关键词之外，标题标签应该是清晰、易懂且有趣的。一个写得好的标题标签可以提高您的搜索引擎排名，并增加点击量。因此，无论您是在开发新网站还是优化现有网站，都要特别注意您的标题标签，并确保它们能够成功地吸引人们对您网站的注意。
- en: 'We can see what that looks like in an example:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在一个例子中看到它的样子：
- en: '[PRE0]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The title tag basically describes a website page.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 标题标签基本上描述了一个网站页面。
- en: What are meta descriptions?
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 什么是元描述？
- en: Meta descriptions are now a crucial component of website optimization in the
    ever-changing world of SEO. These text excerpts offer an ideal chance to persuade
    potential customers to visit your website. Standing out from the crowd is accomplished
    by creating an engaging meta description that uses your chosen keywords. Meta
    descriptions can help your website’s overall search engine rankings, so it’s not
    only about gaining clicks. Spend some time creating a clear, direct meta description
    that appropriately summarizes your content and draws visitors who are looking
    for the things you are able to provide.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 元描述现在是SEO（搜索引擎优化）领域中不断变化的网站优化的重要组成部分。这些文本摘录为说服潜在客户访问您的网站提供了理想的机会。通过创建一个引人入胜的元描述，使用您选择的关键词，可以脱颖而出。元描述可以帮助提高您网站的整体搜索引擎排名，所以它不仅仅是关于获得点击量。花些时间创建一个清晰、直接的元描述，适当地总结您的内容，吸引那些寻找您能提供的东西的访客。
- en: 'Here’s an example of it in action:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个实际应用的例子：
- en: '[PRE1]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The content of this tag gives a summary of the web page’s content.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这个标签的内容给出了网页内容的摘要。
- en: What is a meta viewport?
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 什么是元视口？
- en: A meta viewport is a form of metadata element that is used in a web page’s HTML
    code to manage the layout and scaling of the website’s content on multiple devices,
    particularly mobile devices with various screen sizes and resolutions. The meta
    viewport tag is critical to rendering a website responsive and easy to use on
    phones, tablets, and other mobile devices.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 元视口是一种元数据元素，用于网页的HTML代码中，以管理网站内容在多个设备上的布局和缩放，尤其是具有各种屏幕尺寸和分辨率的移动设备。元视口标签对于在手机、平板电脑和其他移动设备上渲染响应式和易于使用的网站至关重要。
- en: 'Here is an example of a meta viewport:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个元视口的例子：
- en: '[PRE2]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This code tells the browser how to control the width of the page and to give
    it a scale of 1, which is useful when viewed on mobile devices. It helps the page
    to display better on mobile and these options enable a website to adjust and be
    responsive.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码告诉浏览器如何控制页面的宽度，并给它一个1的比例尺，这在移动设备上查看时很有用。它有助于页面在移动设备上显示得更好，这些选项使网站能够调整并具有响应性。
- en: What are meta robots?
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 元机器人是什么？
- en: Meta robots are a form of metadata element that is used in a web page’s HTML
    code to guide search engine crawlers (also known as robots, spiders, or bots)
    on how to index or follow links on a website. Website administrators can regulate
    the behavior of search engine crawlers when they view their website’s pages with
    the use of meta robot tags, which helps to optimize indexing and avoid potential
    SEO concerns.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 元机器人是一种元数据元素，用于网页的HTML代码中，以指导搜索引擎爬虫（也称为机器人、蜘蛛或爬虫）如何索引或跟踪网站上的链接。网站管理员可以通过使用元机器人标签来调节搜索引擎爬虫在查看其网站页面时的行为，这有助于优化索引并避免潜在的SEO问题。
- en: 'Let’s see an example of it:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一个例子：
- en: '[PRE3]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In this example, the `noindex` value instructs the crawler not to index this
    page, meaning it won’t show up in search results, while the `nofollow` value instructs
    the crawler not to follow any links from this page.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`noindex`值指示爬虫不要索引此页面，这意味着它不会出现在搜索结果中，而`nofollow`值指示爬虫不要跟踪此页面上的任何链接。
- en: What are meta authors?
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 元作者是什么？
- en: The meta author tag is a form of metadata element that is used in a web page’s
    HTML code to denote the writer or creator of the material on the website. This
    tag is not directly connected to SEO, but it can give useful details about the
    individual or organization that manages the written material on a website’s page
    to users or search engines.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 元作者标签是一种元数据元素，用于网页的HTML代码中，以表示网站材料的作者或创作者。这个标签并不直接与搜索引擎优化（SEO）相关联，但它可以向用户或搜索引擎提供有关管理网站页面上书面材料的个人或组织的有用细节。
- en: 'Let’s see an example of what this looks like:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一个例子，看看它是什么样子：
- en: '[PRE4]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This tells everyone looking at the HTML that Sarah Thomas created the web page.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这告诉所有查看HTML的人，Sarah Thomas创建了该网页。
- en: What is a meta language?
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 元语言是什么？
- en: The meta language tag, commonly referred to as the *Content-Language* meta tag,
    is a form of metadata element that specifies the principal language of a home
    page’s information in the HTML code. This tag assists search engines, web browsers,
    and other online services in understanding the content’s language, which might
    be important for searching, interpreting, and accessibility.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 元语言标签，通常被称为*内容语言*元标签，是一种元数据元素，用于在HTML代码中指定主页信息的主体语言。此标签有助于搜索引擎、网络浏览器和其他在线服务理解内容语言，这对于搜索、解释和可访问性可能很重要。
- en: 'We can see what that looks like in this code example:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在以下代码示例中看到它的样子：
- en: '[PRE5]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The HTML element in this example uses the `lang="en"` property to specify that
    the entire HTML page is written in English. The `<meta http-equiv="Content-Language"
    content="en-us">` tag further states that the content is written in American English.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，HTML元素使用`lang="en"`属性来指定整个HTML页面是用英语编写的。《meta http-equiv="Content-Language"
    content="en-us">`标签进一步说明内容是用美式英语编写的。
- en: What are open graph tags?
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 开放图标签是什么？
- en: Open graph tags are responsible for making links on social media platforms look
    more visually appealing than others. You can decide how links to your website
    appear on social networking sites such as Facebook, Twitter/X, and LinkedIn, among
    others, by using open graph tags, which are HTML code snippets. You can customize
    the picture, title, and description that appears when someone shares the link
    by using open graph tags on your website. As a result, you have the ability to
    provide your audience with a more interesting and aesthetically appealing link
    preview, which can eventually result in increased interaction and clickthrough
    rates. So, think about using it if you want your website to stand out on social
    networking sites.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 开放图标签负责使社交媒体平台上的链接比其他链接更具视觉吸引力。您可以通过使用开放图标签来决定您的网站链接在Facebook、Twitter/X、LinkedIn等社交网络上的显示方式，这些开放图标签是HTML代码片段。您可以通过在网站上使用开放图标签来定制当有人分享链接时出现的图片、标题和描述，从而提供更有趣和更具美感的链接预览，这最终可能导致互动和点击率的增加。所以，如果您想让您的网站在社交网络上脱颖而出，请考虑使用它。
- en: 'We can see an open graph tag example in the code here:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在代码中看到一个开放图标签的例子：
- en: '[PRE6]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This code demonstrates the use of open graph tags using examples from Twitter/X
    and Facebook.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码演示了使用Twitter/X和Facebook的示例来使用开放图标签。
- en: Now that we have a better understanding of the usage of these tags, another
    important area that we should be aware of is website auditing. This is where we
    essentially run tests on our web page to test its SEO capability with those meta
    tags that we learned about, which are going to give us a much higher website score.
    The **Lighthouse** Chrome extension is a very popular choice for website auditing.
    Let’s learn about it now.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对这些标签的用法有了更好的理解，另一个我们应该注意的重要领域是网站审计。这就是我们基本上在我们的网页上运行测试，以测试其使用我们所学到的元标签的SEO能力，这将给我们带来更高的网站评分。**Lighthouse**
    Chrome扩展是网站审计的一个非常受欢迎的选择。现在让我们来了解一下它。
- en: How can we use the Lighthouse extension to audit our website?
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 我们如何使用Lighthouse扩展来审计我们的网站？
- en: Lighthouse is an open source, automated tool for enhancing web app performance,
    quality, and accuracy. Lighthouse audits a page by running a series of tests against
    it and then generating a report on how effectively the page performed. Based on
    the results, you can take advantage of the failed tests to determine what you
    need to do to enhance your app.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: Lighthouse是一个开源的自动化工具，用于提升Web应用的性能、质量和准确性。Lighthouse通过对该页面运行一系列测试，然后生成一份关于页面如何有效执行的报告来审计页面。根据结果，你可以利用失败的测试来确定你需要做什么来提升你的应用。
- en: In the next section, we will be learning about SEO best practices, where we
    will get even more valuable knowledge that will be useful when it comes to deploying
    a real-world application online.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习SEO最佳实践，我们将获得更多有价值的知识，这些知识在部署在线实际应用时将非常有用。
- en: SEO best practices
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SEO最佳实践
- en: 'SEO is the process of improving a website’s ranking in search engine results
    by optimizing its content, structure, and other aspects. So, we should be implementing
    SEO best practices that can assist our website in ranking better in search engine
    results. By doing this, it increases our chances of being able to attract more
    organic visitors and improve its overall online visibility. There are many ways
    we can accomplish this and some of them are listed as follows:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: SEO是通过优化网站的内容、结构和其它方面来提高网站在搜索引擎结果中的排名的过程。因此，我们应该实施可以帮助我们的网站在搜索引擎结果中排名更好的SEO最佳实践。通过这样做，它增加了我们吸引更多有机访问者和提高其整体在线可见性的机会。我们可以通过许多方式实现这一点，其中一些方法如下列所示：
- en: '| **Strategy** | **Description** |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| **策略** | **描述** |'
- en: '| **Meta tags** | Create distinct and captivating meta titles and descriptions
    for each page. Because these are the snippets that appear in search engine results,
    they should be accurate representations of the material. |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '| **元标签** | 为每个页面创建独特且吸引人的元标题和描述。因为这些是出现在搜索引擎结果中的片段，它们应该是内容的准确描述。|'
- en: '| **Page** **load speed** | Optimize the loading speed of your website to create
    a better user experience and improve search engine results. Compress pictures,
    reduce code, and make use of browser caching. |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| **页面** **加载速度** | 优化你网站的加载速度，以创造更好的用户体验并改善搜索引擎结果。压缩图片、减少代码并利用浏览器缓存。|'
- en: '| **URL structure** | Use descriptive, easy-to-read URLs that indicate the
    theme of the item. Avoid using long, complicated URLs with extraneous arguments.
    |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| **URL结构** | 使用描述性、易于阅读的URL，以表明项目的主题。避免使用长、复杂的URL，其中包含多余的参数。|'
- en: '| **Good content** | Create relevant, insightful, and entertaining content
    that speaks to your target audience’s requirements. The writing should be correctly
    written, understandable, and related to the subject or keywords. |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| **优质内容** | 创建相关、有洞察力和娱乐性的内容，以满足目标受众的需求。写作应正确无误、易于理解，并与主题或关键词相关。|'
- en: '| **Mobile optimization** | Websites tend to get high traffic from mobile users,
    even higher than that from desktop users. As mobile compatibility is a ranking
    criterion for search engines, make sure that the site is responsive and mobile-friendly.
    An excellent mobile experience increases user interest and their subsequent return.
    |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| **移动优化** | 网站往往从移动用户那里获得高流量，甚至比桌面用户还高。由于移动兼容性是搜索引擎的排名标准之一，请确保网站是响应式和移动友好的。优秀的移动体验会增加用户兴趣并促使他们再次访问。|'
- en: '| **Great UI** **and UX** | Focus on giving an enjoyable user experience by
    making navigation simple, calls to action obvious, and material organized properly.
    |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| **优秀的UI** **和UX** | 通过简化导航、使行动号召明显以及合理组织材料，专注于提供愉悦的用户体验。|'
- en: '| **Security certificate** | Install an SSL certificate on your website to
    ensure data encryption and to improve your search engine ranking. HTTPS is a ranking
    indication for Google. |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| **安全证书** | 在您的网站上安装SSL证书以确保数据加密并提高搜索引擎排名。HTTPS是Google的排名指标。|'
- en: 'Table 9.4: SEO best practices'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 表9.4：SEO最佳实践
- en: We have successfully reached the end of this chapter and learned a great deal
    about the differences between the different metadata types. We will now be able
    to apply what we have learned when working on our React projects and when under
    interview conditions, as this knowledge will always be useful.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经成功完成了本章，并学到了很多关于不同元数据类型差异的知识。现在，我们将在我们的React项目中以及面试条件下应用所学到的知识，因为这种知识始终是有用的。
- en: Summary
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter has offered a thorough examination of Next.js, Gatsby, and Remix,
    three potent, full stack React frameworks. We have gotten a greater grasp of how
    these technologies can be used to expedite the web development process and easily
    construct dynamic, data-driven apps by exploring their special features and use
    cases. We have covered key topics in contemporary web development along the way,
    including the creation of static sites, SSR, and the addition of page information
    for SEO. We have paved the way for wise decision-making when picking the best
    tool for a certain project by analyzing the benefits and drawbacks of each framework.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 本章对Next.js、Gatsby和Remix这三个强大的全栈React框架进行了全面考察。我们更深入地了解了这些技术如何通过探索其特殊功能和用例来加速网络开发过程，并轻松构建动态、数据驱动的应用程序。我们在路上涵盖了当代网络开发的关键主题，包括创建静态网站、SSR以及为SEO添加页面信息。通过分析每个框架的优缺点，我们为选择特定项目的最佳工具铺平了道路。
- en: Next.js, Gatsby, and Remix provide us with different choices for developing
    React applications. We have looked at the differences between all three of them,
    which gives us good interview answers because we can compare these differences
    and give a valid reason for why we would choose one over the other in our projects.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: Next.js、Gatsby和Remix为我们提供了开发React应用程序的不同选择。我们已经探讨了这三者的区别，这为我们提供了良好的面试答案，因为我们能够比较这些区别，并给出为什么在项目中会选择其中一个而不是另一个的有效理由。
- en: Throughout this chapter, we have covered useful information that has encouraged
    us to learn more about these frameworks and their strengths to ace interviews
    and stand out in an increasingly crowded market. The road to mastering Next.js,
    Gatsby, and Remix is only getting started, and there are countless opportunities
    for development and creativity. The ultimate potential of these technologies resides
    in your imagination, inventiveness, and resolve to push the limits of what is
    feasible in the field of web development as you continue to study and explore.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们涵盖了有用的信息，这些信息鼓励我们更多地了解这些框架及其优势，以便在竞争激烈的面试市场中脱颖而出。掌握Next.js、Gatsby和Remix的道路才刚刚开始，有无数的发展和创新机会。这些技术的最终潜力在于你的想象力、创造力和决心，在你继续学习和探索的过程中，推动网络开发领域的可行性极限。
- en: In the next chapter, we will learn how to crack real-world programming tasks.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何破解现实世界的编程任务。
- en: 'Part 4: Hands-On with Programming Tasks'
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四部分：编程任务实践
- en: In this part, you will learn about how to crack the coding tasks given in the
    interview process at a high level in a stipulated time. We will also get useful
    tips and recommendations before deep-diving into the projects. Then, we will build
    two React applications to showcase your programming skills – one app is based
    on Redux and styled-components along with the Firebase backend, and another app
    is based on the Next.js toolkit, GraphQL, and SWR using the REST API.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在本部分，你将学习如何在规定的时间内以高级别破解面试过程中的编码任务。在深入项目之前，我们还将获得有用的提示和建议。然后，我们将构建两个React应用程序来展示你的编程技能——一个应用程序基于Redux、styled-components以及Firebase后端，另一个应用程序基于Next.js工具包、GraphQL和SWR，使用REST
    API。
- en: 'This part has the following chapters:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分包含以下章节：
- en: '[*Chapter 10*](B18603_10.xhtml#_idTextAnchor297), *Cracking Any Real-World
    Programming Task*'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第10章*](B18603_10.xhtml#_idTextAnchor297), *破解任何现实世界的编程任务*'
- en: '[*Chapter 11*](B18603_11.xhtml#_idTextAnchor316), *Building an App Based on
    React, Redux, Styled Components, and the Firebase Backend*'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第11章*](B18603_11.xhtml#_idTextAnchor316), *基于React、Redux、Styled Components和Firebase后端的App构建*'
- en: '[*Chapter 12*](B18603_12.xhtml#_idTextAnchor339), *Building an App Based on
    the Next.js Toolkit, Authentication, SWR, GraphQL, and Deployment*'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第12章*](B18603_12.xhtml#_idTextAnchor339)，*基于Next.js工具包构建应用、身份验证、SWR、GraphQL和部署*'
