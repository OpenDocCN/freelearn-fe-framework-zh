- en: Polish with SASS
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 SASS 进行抛光
- en: After covering some under the hood plumbing improvements with ngrx state management
    in the previous chapter,  it's finally time to polish this app to improve it's
    overall look and feel. The timing of styling is completely up to your flow of
    development, and oftentimes, we like to polish as we go. In this book, we chose
    to avoid intermixing polishing via CSS with feature development to keep the concepts
    more focused. However, now that we're here, we couldn't be more excited about
    getting that nice look on our app.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中介绍了一些底层管道改进和 ngrx 状态管理之后，现在终于到了抛光此应用以改善其整体外观和感觉的时候了。样式的时机完全取决于您的发展流程，而且我们通常喜欢边走边抛光。在这本书中，我们选择避免将
    CSS 抛光与功能开发混合，以保持概念更加集中。然而，现在我们已经到了这里，我们无法更兴奋地看到我们的应用获得那个漂亮的外观。
- en: Since standard CSS can become burdensome to maintain as styling grows, we will
    integrate SASS for help. In fact, we will utilize a community plugin developed
    by the man who helped come up with the NativeScript brand name itself, Todd Anglin.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 由于标准 CSS 随着样式的增长而变得难以维护，我们将集成 SASS 以提供帮助。实际上，我们将利用由帮助提出 NativeScript 品牌名称的那个人，Todd
    Anglin，开发的社区插件。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Integrating SASS into your app
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 SASS 集成到您的应用中
- en: Best practices when building the core theme's SASS setup
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建核心主题 SASS 设置的最佳实践
- en: Building a scalable styling setup to maximize style reuse across iOS and Android
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建可扩展的样式设置，以最大化 iOS 和 Android 之间的样式重用
- en: Using font icons, such as *Font Awesome*, using the nativescript-ngx-fonticon
    plugin
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用字体图标，例如 *Font Awesome*，使用 nativescript-ngx-fonticon 插件
- en: Polishing with SASS
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 SASS 进行抛光
- en: SASS is the most mature, stable, and powerful professional grade CSS extension
    language in the world... Sass is an extension of CSS that adds power and elegance
    to the basic language. It allows you to use variables, nested rules, mixins, inline
    imports, and more, all with a fully CSS-compatible syntax. SASS helps keep large
    stylesheets well-organized and get small stylesheets up and running.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: SASS 是世界上最成熟、最稳定、功能最强大的专业级 CSS 扩展语言... Sass 是 CSS 的扩展，它为基本语言增添了力量和优雅。它允许您使用变量、嵌套规则、混入、内联导入等，所有这些都具有完全兼容
    CSS 的语法。SASS 有助于保持大型样式表的良好组织，并使小型样式表快速运行。
- en: http://sass-lang.com/documentation/file.SASS_REFERENCE.html
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://sass-lang.com/documentation/file.SASS_REFERENCE.html](http://sass-lang.com/documentation/file.SASS_REFERENCE.html)'
- en: Sounds good? You bet.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 听起来不错？当然。
- en: 'We will first want to install a community plugin published by Todd Anglin:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先想要安装由 Todd Anglin 发布的社区插件：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This plugin will set up a hook that will autocompile your SASS to CSS before
    building your app, so you don't need to worry about installing any other build
    tools.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 此插件将设置一个钩子，在构建您的应用之前自动将 SASS 编译为 CSS，因此您无需担心安装任何其他构建工具。
- en: We now want to organize our SASS source files in a particular way that will
    lend itself to ease of maintenance for not only shared styles between iOS and
    Android, but also easily allow platform-specific tweaks/overrides. The core theme
    installed by default (`nativescript-theme-core`) ships with a complete set of
    SASS source files, which are already organized to help you build your custom SASS
    on top of it easily.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们希望以特定的方式组织我们的 SASS 源文件，这样不仅有助于维护 iOS 和 Android 之间的共享样式，而且还可以轻松地进行平台特定的调整/覆盖。默认安装的核心主题（`nativescript-theme-core`）附带了一套完整的
    SASS 源文件，这些文件已经组织得很好，可以帮助您轻松地在它之上构建自定义 SASS。
- en: 'Let''s start by renaming the following:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从重命名以下内容开始：
- en: '`app.ios.css` to `app.ios.**scss**`'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app.ios.css` 改为 `app.ios.**scss**`'
- en: '`app.android.css` to `app.android.**scss**`'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app.android.css` 改为 `app.android.**scss**`'
- en: 'Then for the contents of `app.ios.scss`:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 然后对于 `app.ios.scss` 的内容：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'And for `app.android.scss`:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 `app.android.scss`：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Okay, now, let''s create that `style` folder with the various partial SASS
    import files to aid our setup, starting with the variables:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在，让我们创建那个 `style` 文件夹，包含各种部分 SASS 导入文件，以帮助我们设置，从变量开始：
- en: '`style/_variables.scss`:'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`style/_variables.scss`：'
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: There are actually many different skins/colors you could base your app's style
    sheets on. Check out the following section of the docs to see what's available: [http://docs.nativescript.org/ui/theme#color-schemes](http://docs.nativescript.org/ui/theme#color-schemes).
    For our app, we will base our colors off the *dark* skin.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，您可以根据许多不同的皮肤/颜色来构建您应用的样式表。查看以下文档部分以了解可用内容：[http://docs.nativescript.org/ui/theme#color-schemes](http://docs.nativescript.org/ui/theme#color-schemes)。对于我们的应用，我们将基于
    *dark* 皮肤来设置我们的颜色。
- en: 'Now, create the common shared SASS file, which is where the bulk of the shared
    styles will go. In fact, we will take everything we had defined in the `common.css`
    file and place them here (thereafter, removing the `common.css` file we had before):'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，创建一个公共共享的 SASS 文件，这是共享样式的大部分内容将放置的地方。实际上，我们将把在 `common.css` 文件中定义的所有内容都放在这里（之后，删除我们之前拥有的
    `common.css` 文件）：
- en: '`style/_common.scss`:'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`style/_common.scss`：'
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This uses our variables file we just created, which enables us to provide our
    own baseline variables from the core theme with our own custom tweaks to the color.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这使用了我们刚刚创建的变量文件，它使我们能够提供从核心主题中提供的自己的基线变量以及我们对颜色的自定义调整。
- en: 'Now, create the Android override file in case we need it:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，创建 Android 覆盖文件以备不时之需：
- en: '`styles/_android-overrides.scss`:'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`styles/_android-overrides.scss`：'
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This imports the Android overrides from the core theme while still allowing
    us to apply our own custom overrides if needed.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这将导入核心主题的 Android 覆盖，同时仍然允许我们在需要时应用我们自己的自定义覆盖。
- en: 'We can now do the same for iOS:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以为 iOS 做同样的事情：
- en: '`styles/_ios-overrides.scss`:'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`styles/_ios-overrides.scss`：'
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Lastly, we can now convert any component-specific `.css` files to `**.scss**`.
    We had one component using its own defined styles, `record.component.css`. Just
    rename it to `**.scss**`. The NativeScript SASS plugin will autocompile any nested
    `.scss` files it finds.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们现在可以将任何特定组件的 `.css` 文件转换为 `**.scss**`。我们有一个组件使用它自己的定义样式，`record.component.css`。只需将其重命名为
    `**.scss**`。NativeScript SASS 插件会自动编译它找到的任何嵌套 `.scss` 文件。
- en: 'There are two more things you may want to do:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能还想做两件事：
- en: Ignore all `*.css` files from git in addition to hiding `.css` and `.js` files
    in your IDE.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 除了在您的 IDE 中隐藏 `.css` 和 `.js` 文件外，还要忽略所有 `*.css` 文件从 git 中。
- en: You don't want to end up with merge conflicts in the future with other developers
    since your `.css` files will all be generated fresh via the SASS compilation each
    time you build the app.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你不希望在未来与其他开发人员发生合并冲突，因为你的 `.css` 文件将在每次构建应用时通过 SASS 编译新生成。
- en: 'Add the following to your `.gitignore` file:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下内容添加到您的 `.gitignore` 文件中：
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Then, to hide `.js` and `.css` files in VS Code, we could do this:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，为了在 VS Code 中隐藏 `.js` 和 `.css` 文件，我们可以这样做：
- en: '[PRE8]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Here''s a screenshot of what the structure should look like now:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是现在结构应该看起来像的截图：
- en: '![](img/00048.jpeg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![图片 00048](img/00048.jpeg)'
- en: Using font icons with the nativescript-ngx-fonticon plugin
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 nativescript-ngx-fonticon 插件使用字体图标
- en: It sure would be nice to swap all those boring label buttons out with nice crisp
    icons, so let's do that. NativeScript provides support for custom font icons out
    of the box using Unicode values on text attributes on buttons, labels, and much
    more. However, with Angular, we can take advantage of another nifty plugin, which
    will provide a nice Pipe allowing us to use the font names for ease of use and
    clarity.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 真的很好，我们可以用漂亮的清晰图标替换所有那些无聊的标签按钮，让我们来做这件事。NativeScript 提供了使用按钮、标签和更多文本属性上的 Unicode
    值来支持自定义字体图标的功能。然而，使用 Angular，我们可以利用另一个巧妙的插件，它将提供一个很好的 Pipe，允许我们使用字体名称以提高使用便利性和清晰度。
- en: 'Install the following plugin:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 安装以下插件：
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: For this app, we will use the versatile font-awesome icons, so let's download
    that package here from the official site: [http://fontawesome.io/](http://fontawesome.io/).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个应用，我们将使用多功能的 font-awesome 图标，所以让我们从这里从官方网站下载这个包：[http://fontawesome.io/](http://fontawesome.io/)。
- en: 'Inside of it, we will find the font files and the css we will need. We want
    to first copy the `fontawesome-webfont.ttf` file into a `new fonts` folder we
    will create in the `app` folder. NativeScript will look for any custom font files
    in that folder when it builds the app:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在其中，我们将找到所需的字体文件和 css。我们首先将 `fontawesome-webfont.ttf` 文件复制到我们在 `app` 文件夹中创建的
    `new fonts` 文件夹中。NativeScript 在构建应用时会查找该文件夹中的任何自定义字体文件：
- en: '![](img/00049.jpeg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![图片 00049](img/00049.jpeg)'
- en: We now want to copy the `css/font-awesome.css` file into our app folder as well.
    We can either place it in the root of the folder or in a subfolder. We will create
    an `assets` folder to house this and potentially other similar items in the future.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们想要将 `css/font-awesome.css` 文件也复制到我们的应用文件夹中。我们可以将其放置在文件夹的根目录或子文件夹中。我们将创建一个
    `assets` 文件夹来存放这个文件以及未来可能的其他类似项目。
- en: 'However, we need to modify this `.css` file slightly. The `nativescript-ngx-fonticon`
    plugin only works with the font class names and doesn''t need any of the utility
    classes font-awesome provides. So, we will need to modify it to remove a lot of
    what was at the top to look like this instead:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们需要稍微修改这个 `.css` 文件。`nativescript-ngx-fonticon` 插件只与字体类名一起工作，不需要字体Awesome提供的任何实用类。因此，我们需要修改它，移除顶部的大量内容，使其看起来像这样：
- en: '![](img/00050.jpeg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00050.jpeg)'
- en: You can learn more about this in the following video: [https://www.youtube.com/watch?v=qb2sk0XXQDw](https://www.youtube.com/watch?v=qb2sk0XXQDw).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在以下视频中了解更多信息：[https://www.youtube.com/watch?v=qb2sk0XXQDw](https://www.youtube.com/watch?v=qb2sk0XXQDw)。
- en: 'We also set up git to ignore all `*.css` files previously; however, we don''t
    want to ignore the following file:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还设置了git忽略所有 `*.css` 文件；然而，我们不想忽略以下文件：
- en: '[PRE10]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, we are ready to set up the plugin. Since this should be part of the core
    setup of our app, we will modify `app/modules/core/core.module` with our plugin
    configuration:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们准备设置插件。由于这应该是我们应用核心设置的一部分，我们将使用我们的插件配置修改 `app/modules/core/core.module`：
- en: '[PRE11]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Since the module relies on the `TNSFontIconService`, let's modify our root component
    to inject it, making sure that Angular's DI instantiates the singleton for us
    to use app-wide.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 由于该模块依赖于 `TNSFontIconService`，让我们修改我们的根组件以注入它，确保Angular的DI为我们实例化单例以供应用全局使用。
- en: '`app/app.component.ts`:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`app/app.component.ts`：'
- en: '[PRE12]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Next, we want to make sure that the `fonticon` pipe is accessible to any of
    our view components, so let''s import and export the module from our `SharedModule`
    at `app/modules/shared/shared.module.ts`:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们想要确保 `fonticon` 管道对任何我们的视图组件都是可访问的，所以让我们从我们的 `SharedModule` 在 `app/modules/shared/shared.module.ts`
    中导入和导出模块：
- en: '[PRE13]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Lastly, we will need a class to designate which components should be used from
    font-awesome to render themselves. Since this class will be shared across iOS/Android,
    modify `app/style/_common.scss` with the following:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要一个类来指定哪些组件应该使用字体Awesome来渲染自己。由于这个类将在iOS/Android之间共享，修改 `app/style/_common.scss`
    如下：
- en: '[PRE14]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The reason we define two font families is because of the differences between
    iOS and Android. Android uses the name of the file for the font-family (in this
    case, `fontawesome-webfont.ttf`). Whereas iOS uses the actual name of the font;
    examples can be found at [https://github.com/FortAwesome/Font-Awesome/blob/master/css/font-awesome.css#L8](https://github.com/FortAwesome/Font-Awesome/blob/master/css/font-awesome.css#L8).
    You *could* rename the font filename to `FontAwesome.ttf` to use just `font-family:
    FontAwesome` if you wanted. You can learn more at [http://fluentreports.com/blog/?p=176](http://fluentreports.com/blog/?p=176).'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '我们定义两个字体家族的原因是iOS和Android之间的差异。Android使用文件的名称作为字体家族的名称（在本例中为 `fontawesome-webfont.ttf`）。而iOS使用实际的字体名称；示例可以在
    [https://github.com/FortAwesome/Font-Awesome/blob/master/css/font-awesome.css#L8](https://github.com/FortAwesome/Font-Awesome/blob/master/css/font-awesome.css#L8)
    找到。如果你想要，你可以将字体文件名重命名为 `FontAwesome.ttf` 以使用 `font-family: FontAwesome`。你可以在 [http://fluentreports.com/blog/?p=176](http://fluentreports.com/blog/?p=176)
    了解更多。'
- en: 'Now, let''s try out this new ability to render icons in our app. Open `app/modules/mixer/components/mix-list.component.html`:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们尝试在我们的应用中渲染图标的新功能。打开 `app/modules/mixer/components/mix-list.component.html`：
- en: '[PRE15]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Let''s also tweak the background color of our `ListView` to be black for now.
    We can even use predefined variables from the core theme now with SASS in `app/style/_common.scss`:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们还将调整 `ListView` 的背景颜色为黑色。现在我们甚至可以使用核心主题中的预定义变量，使用SASS在 `app/style/_common.scss`
    中：
- en: '[PRE16]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '![](img/00051.jpeg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00051.jpeg)'
- en: Our composition listing view is now starting to look pretty decent.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的内容列表视图现在开始看起来相当不错。
- en: 'Let''s keep going and add some icons to our track listing view in `app/modules/player/components/track-list/track-list.component.html`:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续并添加一些图标到我们的曲目列表视图 `app/modules/player/components/track-list/track-list.component.html`：
- en: '[PRE17]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: We are swapping out the Switch we had with a Label designed to toggle two different
    icons instead. We are also taking advantage of the core theme's handy color classes
    like c-ruby.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在用设计用来切换两个不同图标的标签替换我们之前的开关。我们还利用了核心主题的便捷颜色类，如 c-ruby。
- en: 'We can also improve our custom `ActionBar` template with some icons:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过添加一些图标来改进我们的自定义 `ActionBar` 模板：
- en: '[PRE18]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We can now style up the player controls at `app/modules/player/components/player-controls/player-controls.component.html`:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以美化 `app/modules/player/components/player-controls/player-controls.component.html`
    中的播放器控件：
- en: '[PRE19]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We will take advantage of more helper classes from the core theme. The `c-white`
    class turns our icon white, and `t-30` sets the `font-size: 30`. The latter is
    short for `text-30`, and the other `color-white`.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '我们将利用核心主题中的更多辅助类。`c-white`类将我们的图标变为白色，而`t-30`设置`font-size: 30`。后者是`text-30`的简称，其他还有`color-white`。'
- en: 'Let''s take a look:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看：
- en: '![](img/00052.jpeg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00052.jpeg)'
- en: 'It''s amazing how some styling polish can really bring out the personality
    of your app. Let''s crack out the brush one more time on our record view at `app/modules/recorder/components/record.component.html`:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 真是令人惊叹，一些简单的样式润色就能真正展现你应用的个性。让我们再次拿起画笔，在我们的`app/modules/recorder/components/record.component.html`记录视图中进行润色：
- en: '[PRE20]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We can adjust our component class to handle the `recordBtn` and `playBtn` now:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以调整我们的组件类来处理`recordBtn`和`playBtn`了：
- en: '[PRE21]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Then, to paint everything into place, we can add this to our `app/modules/recorder/components/record.component.scss`:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，为了将一切画到位，我们可以在`app/modules/recorder/components/record.component.scss`中添加以下内容：
- en: '[PRE22]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'With this polish, we now have the following screenshot:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 经过这次润色，我们现在有了以下截图：
- en: '![](img/00053.jpeg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00053.jpeg)'
- en: Finishing touches
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 收尾工作
- en: 'Let''s use color to finalize our initial app style. It''s time to change the
    base color used in the `ActionBar` to provide the overall feeling we want with
    the app. Let''s start by defining a few variables in `app/style/_variables.scss`:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用颜色来最终确定我们的初始应用样式。是时候改变`ActionBar`中使用的基色，以提供我们想要的整个应用的感觉了。让我们首先在`app/style/_variables.scss`中定义几个变量：
- en: '[PRE23]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'With those few changes, we have given our app a different (objectively sleeker)
    vibe:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些小小的改动，我们给我们的应用带来了不同的（从客观上来说更流畅）感觉：
- en: '![](img/00054.jpeg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00054.jpeg)'
- en: Summary
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we were finally able to add some nice polishing touches to
    the app's look and feel. We were able to install the `nativescript-dev-sass` plugin,
    which adds a compilation step to build our CSS while maintaining a clean approach
    to styling. Knowing how best to take advantage of the core theme's SASS with proper
    file organization is key to gaining a flexible base to work with. Take the concepts
    presented in this chapter and let us know how they helped you achieve the styling
    goals you are after; we would love to hear about it!
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们终于能够给应用的外观和感觉添加一些漂亮的润色。我们能够安装`nativescript-dev-sass`插件，它添加了一个编译步骤来构建我们的CSS，同时保持对样式的整洁方法。了解如何通过适当的文件组织来最佳地利用核心主题的SASS是获得灵活基础的关键。请将本章中提出的概念告诉我们，看看它们是如何帮助您实现所追求的样式目标的；我们非常乐意听到您的反馈！
- en: We also took a look at how to work with the `nativescript-ngx-fonticon` plugin
    to utilize font icons throughout our app. This helped clean up clunky textual
    labels with concise iconic visuals.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还查看了一下如何使用`nativescript-ngx-fonticon`插件在我们的应用中利用字体图标。这有助于清理那些笨重的文本标签，并用简洁的图标视觉来替代。
- en: In the next chapter, we will take a look at how to unit test several key features
    to future proof our app's codebase against new feature integrations, which might
    introduce regressions. Testing to the rescue!
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨如何对几个关键特性进行单元测试，以保护我们的应用代码库免受新功能集成的影响，这些集成可能会引入回归。测试来拯救！
