- en: Exercising MERN Skills with an Online Marketplace
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With more business being conducted over the internet than ever before, the ability
    to buy and sell in an online marketplace setting has become a core requirement
    for many web platforms. In this and the next two chapters, we will utilize the
    MERN stack technologies to develop an online marketplace application complete
    with features that enable users to buy and sell.
  prefs: []
  type: TYPE_NORMAL
- en: We will build out everything from simple to advanced features for this application,
    starting in this chapter with a reiteration of the full-stack development lessons
    learned in previous chapters to set up a base for the marketplace platform. We
    will be extending the MERN skeleton application with support for seller accounts
    and shops with products, to incrementally integrate marketplace functionalities such
    as product search and suggestions. By the end of this chapter, you will have a
    better grasp of how to extend, integrate, and combine the different aspects of
    full-stack implementations to add complex features to your applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will start building the online marketplace by covering
    the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing the MERN Marketplace app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Users with seller accounts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding shops to the marketplace
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding products to shops
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Searching for products by name and category
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing the MERN Marketplace app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The MERN Marketplace application will allow users to become sellers, who can
    manage multiple shops and add the products they want to sell in each shop. Users
    who visit MERN Marketplace will be able to search for and browse products they
    want to buy and add products to their shopping cart to place an order. The resulting
    marketplace application will look as pictured in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5b37e049-33ed-46e7-818c-dffdde8444de.png)'
  prefs: []
  type: TYPE_IMG
- en: The code for the complete MERN Marketplace application is available on GitHub
    at [https://github.com/PacktPublishing/Full-Stack-React-Projects-Second-Edition/tree/master/Chapter07%20and%2008/mern-marketplace](https://github.com/PacktPublishing/Full-Stack-React-Projects-Second-Edition/tree/master/Chapter07%20and%2008/mern-marketplace).
    The implementations discussed in this and the next chapter can be accessed in
    the shop-cart-order-pay branch of the repository. You can clone this code and
    run the application as you go through the code explanations for the rest of this
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will extend the MERN skeleton to build a simple version
    of the online marketplace, starting with the following features:'
  prefs: []
  type: TYPE_NORMAL
- en: Users with seller accounts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shop management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Product management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Product search by name and category
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The views needed for these features related to seller accounts, shops, and
    products will be developed by extending and modifying the existing React components in
    the MERN skeleton application. The component tree pictured next shows all the
    custom React components that make up the MERN Marketplace frontend developed in
    this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/77ecbd46-3384-4646-b9c4-091c10d0de6c.png)'
  prefs: []
  type: TYPE_IMG
- en: We will add new React components to implement views for managing shops and products as
    well as browsing and searching for products. We will also modify existing components
    such as the EditProfile, Menu, and Home components to develop the skeleton code
    into a marketplace application as we build out the different features in the rest
    of the chapter. These marketplace features will depend on the user's ability to
    update their accounts into seller accounts. In the next section, we will begin
    building the MERN Marketplace application by updating the existing user implementation
    to enable seller account features.
  prefs: []
  type: TYPE_NORMAL
- en: Allowing users to be sellers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Any user with an account on the MERN Marketplace application will have the
    option to update their accounts to seller accounts by making changes to their
    profiles. We will add this option to convert to a seller account in the <q>Edit
    Profile</q> page, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/de5922cb-2463-4326-8285-5896ae0dedc8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A user with an active seller account will be allowed to create and manage their
    own shops, where they can manage products. Regular users will not have access
    to a seller dashboard, whereas users with active seller accounts will see a link
    to their dashboard on the menu as MY SHOPS. The following screenshot shows how
    the menu looks to a regular user in contrast to a user with an active seller account:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a4970b51-3707-4888-ab58-45b8c68f8d8b.png)'
  prefs: []
  type: TYPE_IMG
- en: To add this seller account feature, we need to update the user model, the Edit
    Profile view and add a MY SHOPS link to the menu that will only be visible to
    sellers, as discussed in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the user model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We need to store additional detail about each user to determine whether a user
    is an active seller or not. We will update the user model that we developed in
    [Chapter 3](a9dedbd8-baf6-4ec8-b766-0b370227fbe4.xhtml), *Building a Backend with
    MongoDB, Express, and Node*, to add a `seller` value that will be set to `false`
    by default to represent regular users and can additionally be set to `true` to
    represent users who are also sellers. We will update the existing user schema
    to add this `seller` field with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/models/user.model.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This `seller` value for each user must be sent to the client with the user
    details received on successful sign-in, so the view can be rendered accordingly
    to show information relevant to the seller. We will update the response sent back
    in the `signin` controller method to add this detail, as highlighted in the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/controllers/auth.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Using this `seller` field value, we can render the frontend based on authorizations
    permitted only to seller accounts. Before rendering views based on seller authorizations,
    we first need to implement the option to activate seller account features in the `EditProfile` view,
    as discussed in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the Edit Profile view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A signed-in user will see a toggle in the Edit Profile view, allowing them
    to either activate or deactivate the seller feature. We will update the `EditProfile`
    component to add a `Material-UI` `Switch` component in `FormControlLabel`, as
    shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/user/EditProfile.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Any changes to the switch will be set to the value of the `seller` in state
    by calling the `handleCheck` method. The `handleCheck` method is implemented as
    shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/user/EditProfile.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'When the form to edit profile details is submitted, the `seller` value is also
    added to details sent in the update to the server, as highlighted in the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/user/EditProfile.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: On successful update, the user details stored in `sessionStorage` for auth purposes
    should also be updated. The `auth.updateUser` method is called to do this `sessionStorage`
    update. The implementation for the `auth.updateUser` method was discussed in *Updating
    the Edit Profile view* section of [Chapter 6](c58ac055-5a1e-4bf4-b8a6-c9b311cf267a.xhtml),
    *Building a Web-Based Classroom Application*.
  prefs: []
  type: TYPE_NORMAL
- en: Once the updated `seller` value is available in the frontend, we can use it
    to render the interface accordingly. In the next section, we will see how to render
    the menu differently based on whether the user viewing the application has an
    active seller account.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the menu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the frontend of the marketplace application, we can render different options
    based on whether the user currently browsing the application has an active seller
    account. In this section, we will add the code to conditionally display a link
    to *MY SHOPS* on the navigation bar, which will only be visible to the signed-in
    users who have active seller accounts.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will update the `Menu` component within the previous code so that it only
    renders when a user is signed in, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/core/Menu.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This *MY SHOPS *link on the navigation bar will take users with active seller
    accounts to the seller dashboard view where they can manage the shops they own
    on the marketplace.
  prefs: []
  type: TYPE_NORMAL
- en: With these updates to the user implementation, it is now possible for users
    on the marketplace to update their regular accounts to seller accounts, and we
    can begin incorporating features that will allow these sellers to add shops to
    the marketplace. We will see how to do this in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Adding shops to the marketplace
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sellers on MERN Marketplace can create shops and add products to each shop.
    To store the shop data and enable shop management, we will implement a Mongoose
    Schema for shops, backend APIs to access and modify the shop data, and frontend
    views for both the shop owner and buyers browsing through the marketplace.
  prefs: []
  type: TYPE_NORMAL
- en: In the following sections, we will build out the shop module in the application
    by first defining the shop model for storing shop data in the database, then implementing
    the backend APIs and frontend views for the shop-related features including creating
    new shops, listing all shops, listing shops by owner, displaying a single shop,
    editing shops, and deleting shops from the application.
  prefs: []
  type: TYPE_NORMAL
- en: Defining a Shop model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will implement a Mongoose model to define a Shop model for storing the details
    of each shop. This model will be defined in `server/models/shop.model.js`, and
    the implementation will be similar to other Mongoose model implementations covered
    in previous chapters, like the Course model defined in [Chapter 6](c58ac055-5a1e-4bf4-b8a6-c9b311cf267a.xhtml),
    *Building a Web-Based Classroom Application*. The Shop schema in this model will
    have simple fields to store shop details, along with a logo image, and a reference
    to the user who owns the shop. The code blocks defining the shop fields are given
    in the following list with explanations:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Shop name and description**: The `name` and `description` fields will be
    string types, with `name` as a required field:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '**Shop logo image**: The `image` field will store the logo image file uploaded
    by the user as data in the MongoDB database:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '**Shop owner**: The `owner` field will reference the user who creates the shop:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '***Created at* and *updated at* times**: The `created` and `updated` fields
    will be `Date` types, with `created` generated when a new shop is added, and `updated`
    changed when any shop details are modified:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The fields added in this schema definition will enable us to implement the shop-related
    features in MERN Marketplace.  In the next section, we will start developing these
    features by implementing the full-stack slice that will allow sellers to create
    new shops.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new shop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In MERN Marketplace, a user who is signed in and has an active seller account
    will be able to create new shops. To implement this feature, in the following
    sections we will add a create shop API in the backend, along with a way to fetch
    this API in the frontend, and a create new shop form view that takes user input
    for shop fields.
  prefs: []
  type: TYPE_NORMAL
- en: The create shop API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For the implementation of the create shop API that will allow creating new
    shops in the database, we will first add a `POST` route, as shown in the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/routes/shop.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: A `POST` request to this route at `/api/shops/by/:userId` will first ensure
    the requesting user is signed in and is also the authorized owner, in other words,
    it is the same user associated with the `:userId` specified in the route param.
  prefs: []
  type: TYPE_NORMAL
- en: 'To process the `:userId` param and retrieve the associated user from the database,
    we will utilize the `userByID` method in the user controller. We will add the
    following to the `Shop` routes in `shop.routes.js`, so the user is available in
    the `request` object as `profile`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/routes/shop.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The `shop.routes.js` file containing the shop routes will be very similar to
    the `user.routes` file. To load these new shop routes in the Express app, we need
    to mount the shop routes in `express.js` as shown in the following code, as we
    did for the auth and user routes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/express.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The request to the create shop route will also verify that the current user
    is a seller before creating a new shop with the shop data passed in the request. We
    will update the user controller to add the `isSeller` method, which will ensure
    that the current user is actually a seller. The `isSeller` method is defined as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/controllers/user.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The `create` method in the shop controller, which is invoked after a seller
    is verified, uses the `formidable` node module to parse the multipart request
    that may contain an image file uploaded by the user for the shop logo. If there
    is a file, `formidable` will store it temporarily in the filesystem, and we will
    read it using the `fs` module to retrieve the filetype and data to store it in
    the `image` field in the shop document. The `create` controller method will look
    as shown in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/controllers/shop.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The logo image file for the shop is uploaded by the user and stored in MongoDB
    as data. Then, in order to be shown in the views, it is retrieved from the database
    as an image file at a separate `GET` API. The `GET` API is set up as an Express
    route at `/api/shops/logo/:shopId`, which gets the image data from MongoDB and
    sends it as a file in the response. The implementation steps for file upload, storage,
    and retrieval are outlined in detail in the *Upload profile photo* section of Chapter
    5, *Starting with a Simple Social Media Application*.
  prefs: []
  type: TYPE_NORMAL
- en: This create shop API endpoint can now be used in the frontend to make a `POST`
    request. Next, we will add a `fetch` method on the client side to make this request
    from the application's client interface.
  prefs: []
  type: TYPE_NORMAL
- en: Fetching the create API in the view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the frontend, to make a request to this create API, we will set up a `fetch`
    method on the client side to make a `POST` request to the API route and pass it
    the multipart form data containing details of the new shop. This `fetch` method
    will be defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/shop/api-shop.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: We will use this method in the create new shop form view, implemented in the
    next section, to send the user-entered shop details to the backend.
  prefs: []
  type: TYPE_NORMAL
- en: The NewShop component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Sellers in the marketplace application will interact with a form view to enter
    details of a new shop and create the new shop. We will render this form in the
    `NewShop` component, which will allow a seller to create a shop by entering a
    name and description, and uploading a logo image file from their local filesystem,
    as pictured in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e7d9a06a-023f-470c-bd8d-a6bf34ab6634.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We will implement this form in a React component named `NewShop`. For the view,
    we will first add the file upload elements using a Material-UI button and an HTML5
    file input element, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/shop/NewShop.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we add the name and description form fields with the `TextField` components,
    as shown next:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/shop/NewShop.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'These form field changes will be tracked with the `handleChange` method when
    a user interacts with the input fields to enter values. The `handleChange` function
    will be defined as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/shop/NewShop.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The `handleChange` method updates the state with the new values, including the
    name of the image file, should one be uploaded by the user.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, you can complete this form view by adding a submit button that when
    clicked, should send the form data to the server. We will define a `clickSubmit`
    method, as shown next, which will be called when the submit button is clicked
    by the user:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/shop/NewShop.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'This `clickSubmit` function will take the input values and populate `shopData`,
    which is a `FormData` object that ensures the data is stored in the correct format
    needed for the `multipart/form-data` encoding type. Then the `create` fetch method
    is called to create the new shop in the backend with this form data. On successful
    shop creation, the user is redirected back to the `MyShops` view with the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/shop/NewShop.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The `NewShop` component can only be viewed by a signed-in user who is also
    a seller. So we will add a `PrivateRoute` in the `MainRouter` component, as shown
    in the following code block, that will render this form only for authenticated
    users at `/seller/shop/new`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/MainRouter.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: This link can be added to any of the view components that may be accessed by
    the seller, for example in a view where a seller manages their shops in the marketplace.
    Now that it is possible to add new shops in the marketplace, in the next section
    we will discuss the implementations to fetch and list these shops from the database
    in the backend to the application views in the frontend.
  prefs: []
  type: TYPE_NORMAL
- en: Listing shops
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In MERN Marketplace, regular users will be able to browse through a list of
    all the shops on the platform, and each shop owner will manage a list of their
    own shops. In the following sections, we will implement the full-stack slices
    for retrieving and displaying two different lists of shops – a list of all the
    shops, and the list of shops owned by a specific user.
  prefs: []
  type: TYPE_NORMAL
- en: Listing all shops
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Any user browsing through the marketplace will be able to see a list of all
    the shops on the marketplace. In order to implement this feature, we will have
    to query the `shops` collection to retrieve all the shops in the database and
    display it in a view to the end user. We achieve this by adding a full-stack slice
    with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A backend API to retrieve the list of shops
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `fetch` method in the frontend to make a request to the API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A React component to display the list of shops
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The shops list API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the backend, we will define an API to retrieve all the shops from the database,
    so the shops in the marketplace can be listed in the frontend. This API will accept
    a request from the client to query the `shops` collection and return the resulting
    shop documents in the response. First, we will add a route to retrieve all the
    shops stored in the database when the server receives a `GET` request at `''/api/shops''`.
    This route is declared as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/routes/shop.routes.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'A `GET` request received at this route will invoke the `list` controller method,
    which will query the `shops` collection in the database to return all the shops.
    The `list` method is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/controllers/shop.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: This method will return all the shops in the database in response to the requesting
    client. Next, we will see how to make a request to this shop list API from the
    client side.
  prefs: []
  type: TYPE_NORMAL
- en: Fetch all shops for the view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to use the shop list API in the frontend, we will define a `fetch`
    method that can be used by React components to load this list of shops. The `list` method
    on the client side will use `fetch` to make a `GET` request to the API, as shown
    in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/shop/api-shop.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: As we will see in the next section, this `list` method can be used in the React
    component to display the list of shops.
  prefs: []
  type: TYPE_NORMAL
- en: The Shops component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the `Shops` component, we will render the list of shops in a Material-UI
    `List`, after fetching the data from the server and setting the data in a state
    to be displayed as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/28ad986e-83a7-4eab-aac2-6835cd66fec8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To implement this component, we first need to fetch and render the list of
    shops. We will make the fetch API call in the `useEffect` hook, and set the received
    `shops` array in the state, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/shop/Shops.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `Shops` component view, this retrieved `shops` array is iterated over
    using `map`, with each shop''s data rendered in the view in a Material-UI `ListItem`,
    and each `ListItem` is also linked to the individual shop''s view, as shown in
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/shop/Shops.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Shops` component will be accessed by the end user at `/shops/all`, which
    is set up with React Router and declared in `MainRouter.js` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/MainRouter.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Adding this link to any view in the application will redirect the user to a
    view displaying all the shops in the marketplace. Next, we will similarly implement
    the feature to list the shops owned by a specific user.
  prefs: []
  type: TYPE_NORMAL
- en: Listing shops by owner
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Authorized sellers on the marketplace will see a list of the shops they created,
    which they can manage by editing or deleting any shop on the list. In order to
    implement this feature, we will have to query the shops'' collection to retrieve
    all the shops with the same owner and display it only to the authorized owner
    of the shops. We achieve this by adding a full-stack slice with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A backend API that ensures the requesting user is authorized and retrieves the
    relevant list of shops
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `fetch` method in the frontend to make a request to this API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A React component to display the list of shops to the authorized user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The shops by owner API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will implement an API in the backend to return the list of shops of a specific
    owner, so it can be rendered in the frontend for the end user. We will start by adding
    a route in the backend to retrieve all the shops created by a given user when
    the server receives a `GET` request at `/api/shops/by/:userId`. This route is
    declared as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/routes/shop.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'A `GET` request to this route will first ensure the requesting user is signed
    in and is also the authorized owner, before invoking the `listByOwner` controller
    method in `shop.controller.js`. This method will query the `Shop` collection in
    the database to get the matching shops. This `listByOwner` method is defined as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/controllers/shop.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: In the query to the Shop collection, we find all the shops where the `owner`
    field matches the user-specified with the `userId` param, then populate the referenced
    user's ID and name in the `owner` field, and return the resulting shops in an
    array in the response to the client. Next, we will see how to make a request to
    this API from the client side.
  prefs: []
  type: TYPE_NORMAL
- en: Fetch all shops owned by a user for the view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the frontend, to fetch the shops for a specific user using this list by
    owner API, we will add a `fetch` method that takes the signed-in user''s credentials
    to make a `GET` request to the API route with the specific user ID passed in the
    URL. This `fetch` method is defined as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/shop/api-shop.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: The shops returned in the response from the server using this method can be
    rendered in a React component to display the shops to the authorized user, as
    discussed in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: The MyShops component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `MyShops` component is similar to the `Shops` component. It fetches the
    list of shops owned by the current user, and renders each shop in a `ListItem`,
    as pictured in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b3cdc2c2-1081-41c0-b549-a56521a2954c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Additionally, each shop has an `edit` and a `delete` option, unlike the list
    of items in `Shops`. The implementation for the `MyShops` component is the same
    as `Shops`, except for these edit and delete buttons, which are added as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/shop/MyShops.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Edit` button links to an <q>Edit Shop</q> view, whereas the `DeleteShop`
    component, which is discussed later in the chapter, handles the delete action.
    The `DeleteShop` component updates the list by calling the `removeShop` method
    passed from `MyShops`. This `removeShop` method allows us to update the state
    with the modified list of shops for the current user and is defined in the `MyShops`
    component, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/shop/MyShops.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The `MyShops` component can only be viewed by a signed-in user who is also
    a seller. So we will add a `PrivateRoute` in the `MainRouter` component, which
    will render this component only for authenticated users at `/seller/shops`, as
    shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/MainRouter.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: In the marketplace application, we add this link to the navigation menu to redirect
    a signed-in seller to the view where they can manage the shops they own by editing
    or deleting a shop. Before adding the ability to edit or delete shops, next we
    will look into how to retrieve a single shop from the backend and display it to
    the end user.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying a shop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Any users visiting MERN Marketplace will be able to browse through each individual
    shop. In the following sections, we will implement the individual shop view by
    adding a read shop API to the backend, a way to call this API from the frontend,
    and the React component that will display the shop details in the view.
  prefs: []
  type: TYPE_NORMAL
- en: The read a shop API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to implement the read shop API in the backend, we will start by adding
    a `GET` route that queries the `Shop` collection with an ID and returns the shop
    in the response. The route is declared along with a route parameter handler, as
    shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/routes/shop.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'The`:shopId` param in the route URL will invoke the `shopByID` controller method,
    which is similar to the `userByID` controller method. It retrieves the shop from
    the database and attaches it to the request object to be used in the `next` method.
    The `shopByID` method is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/controllers/shop.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'The shop object queried from the database will also contain the name and ID
    details of the owner, as we specified in the `populate()` method. The `read` controller
    method then returns this shop object in response to the client. The `read` controller
    method is defined as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/controllers/shop.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: We are removing the image field before sending the response since images will
    be retrieved as files in separate routes. With this API ready in the backend,
    you can now add the implementation to call it in the frontend by adding a `fetch`
    method in `api-shop.js`, similar to other fetch methods already added for other
    API implementations. We will use the `fetch` method to call the read shop API
    in the React component that will render the shop details, as discussed in the
    next section.
  prefs: []
  type: TYPE_NORMAL
- en: The Shop component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `Shop` component will render the shop details and also a list of products
    in the specified shop using a product list component, which will be discussed
    in the *Products* section. The completed single `Shop` view will look as pictured
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5576ec5c-cc59-498c-bb56-cea81e1bcb12.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To implement this `Shop` component, we will first retrieve the shop details
    with a fetch call to the read API in a `useEffect` hook, and set the received
    values to state, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/shop/Shop.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: This `useEffect` hook will only run when the `shopId` changes in the route params.
  prefs: []
  type: TYPE_NORMAL
- en: 'The retrieved shop data is set to state and rendered in the view to display
    the shop''s name, logo, and description with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/shop/Shop.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'The `logoUrl` points to the route from where the logo image can be retrieved
    from the database (if the image exists), and it''s defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/shop/Shop.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Shop` component will be accessed in the browser at the `/shops/:shopId` route,
    which is defined in `MainRouter` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/MainRouter.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: This route can be used in any component to link to a specific shop, and this
    link will take the user to the corresponding `Shop` view with the shop details
    loaded. In the next section, we will add the ability to allow the shop owners
    to edit these shop details.
  prefs: []
  type: TYPE_NORMAL
- en: Editing a shop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Authorized sellers in the application will be able to update the shops they
    have already added to the marketplace. To implement this capability, we will have
    to create a backend API that allows the update operation on a given shop after
    ensuring that the requesting user is authenticated and authorized. Then this updated
    API needs to be called from the frontend with the changed details of the shop.
    In the following sections, we will build this backend API and the React component
    to allow sellers to make changes to their shops.
  prefs: []
  type: TYPE_NORMAL
- en: The edit shop API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the backend, we will need an API that allows updating an existing shop in
    the database if the user making the request is the authorized seller of the given
    shop. We will first declare the PUT route that accepts the update request from
    the client as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/routes/shop.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'A PUT request received at the `/api/shops/:shopId` route first checks if the
    signed-in user is the owner of the shop associated with the `shopId` provided
    in the URL using the `isOwner` controller method, which is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/controllers/shop.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: In this method, if the user is found to be authorized, the `update` controller
    is invoked with a call to `next()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `update` controller method will use the `formidable` and `fs` modules as
    in the `create` controller method discussed earlier, to parse the form data and
    update the existing shop in the database. The `update` method in the shop controllers is
    defined as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/controllers/shop.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: To use this update API in the frontend, you will need to define a `fetch` method
    that takes the shop ID, user auth credentials, and the updated shop details to
    make the fetch call to this update shop API, as we have done for other API implementations
    including the create shop API in the *Creating a new shop* section.
  prefs: []
  type: TYPE_NORMAL
- en: We now have a shop update API that can be used in the frontend to update the
    details of a shop. We will use this in the `EditShop` component, which is discussed
    next.
  prefs: []
  type: TYPE_NORMAL
- en: The EditShop component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `EditShop` component will show a form similar to the create new shop form,
    pre-populated with the existing shop details. This component will also show a
    list of the products in this shop, to be discussed in the *Products* section.
    The completed Edit Shop view is pictured in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/18bbcae5-8299-4b14-a40f-f69bd2e35523.png)'
  prefs: []
  type: TYPE_IMG
- en: The form part of this view for editing shop details is similar to the form in
    the `NewShop` component, with the same form fields and a `formData` object that
    holds the multipart form data to be sent with the `update` `fetch` method. In
    contrast to the `NewShop` component, in this component, we will need to utilize
    the read shop API to fetch the given shop's details in an `useEffect` hook and
    pre-populate the form fields. You can combine the implementations discussed for
    the `NewShop` component and `Shop` component to complete the `EditShop` component.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `EditShop` component will only be accessible by authorized shop owners.
    So we will add a `PrivateRoute` in the `MainRouter` component as shown next, which
    will render this component only for authenticated users at `/seller/shop/edit/:shopId`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/MainRouter.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: This link is added with an edit icon for each shop in the `MyShops` component,
    allowing a seller to access the edit page for each of their shops. In the `MyShops`
    view, sellers are also able to delete their shops, as implemented in the next
    section.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting a shop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As a part of managing the shops they own, authorized sellers will have the option
    to delete any of their own shops. In order to allow a seller to remove a shop
    from the marketplace, in the following sections, first we will define a backend
    API for shop deletion from the database, and then implement a React component
    that makes use of this API when the user interacts with the frontend to perform
    this deletion.
  prefs: []
  type: TYPE_NORMAL
- en: The delete shop API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to delete a shop from the database, we will implement a delete shop
    API in the backend, which will accept a DELETE request from the client at `/api/shops/:shopId`.
    We will add the `DELETE` route for this API as shown in the following code, which
    will allow an authorized seller to delete one of their own shops:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/routes/shop.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'When a DELETE request is received at this route, if the `isOwner` method confirms
    that the signed-in user is the owner of the shop, then the `remove` controller
    method deletes the shop specified by the `shopId` in the param. The `remove` method
    is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/controllers/shop.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: This `remove` method simply deletes the shop document that corresponds to the
    provided ID from the `Shops` collection in the database. To access this backend
    API in the frontend, you will also need a `fetch` method with this route, similar
    to other API implementations. The `fetch` method will need to take the shop ID
    and current user's auth credentials then call the delete shop API with these values.
  prefs: []
  type: TYPE_NORMAL
- en: The `fetch` method will be used when the user performs the delete operation
    by clicking a button in the frontend interface. In the next section, we will discuss
    a React component called `DeleteShop`, where this delete shop action will be performed
    by the user.
  prefs: []
  type: TYPE_NORMAL
- en: The DeleteShop component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `DeleteShop` component is added to the `MyShops` component for each shop
    in the list. It takes the `shop` object and a `onRemove` method as props from
    `MyShops`. This component is basically a button that, when clicked, opens a `Dialog`
    component asking the user to confirm the delete action, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/be1cb170-87e7-481a-be9b-90862d50edd8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The implementation of the `DeleteShop` component is similar to the `DeleteUser`
    component discussed in [Chapter 4,](6f2ca10a-8079-4e3a-9d42-a3db8e85b9d9.xhtml) *Adding
    a React Frontend to Complete MERN*. Instead of a user ID, the `DeleteShop` component
    will take the `shop` object and `onRemove` function definition from the `MyShops` component
    as props when it is added to `MyShops`, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/shop/MyShops.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: With this implementation, authorized sellers will be able to remove a shop that
    they own from the marketplace.
  prefs: []
  type: TYPE_NORMAL
- en: We have implemented the shop module for the marketplace by first defining the
    Shop model for storing shop data, and then integrating the backend APIs and frontend
    views to be able to perform CRUD operations on shops from the application. These
    shop features, with the ability to create new shops, display a shop, edit and
    delete shops, will allow both buyers and sellers to interact with the shops in
    the marketplace. The shops will also have products, discussed next, which the
    owners will manage and the buyers will be able to browse through, with an option
    to add products to their cart.
  prefs: []
  type: TYPE_NORMAL
- en: Adding products to shops
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Products are the most crucial aspect of a marketplace application. In the MERN
    Marketplace, sellers can manage products in their shops, and visitors can search
    for and browse products. While we will implement the features to allow authorized
    sellers to add, modify, and delete products from their shops, we will also incorporate
    features to list products in ways that are meaningful to the end user. In the
    application, we will retrieve and display products by a specific shop, products
    related to a given product, and the latest products added to the marketplace. In
    the following sections, we will build out the product module incorporating these
    features by first defining a product model for storing product data in the database,
    and then implementing the backend APIs and frontend views for the product-related
    features including adding new products to a shop, rendering different lists of
    products, displaying a single product, editing products, and deleting products.
  prefs: []
  type: TYPE_NORMAL
- en: Defining a Product model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Products will be stored in a product collection in the database. To implement
    this, we will add a Mongoose model to define a Product model for storing the details
    of each product. This model will be defined in `server/models/product.model.js`,
    and the implementation will be similar to other Mongoose model implementations
    covered in previous chapters, like the Course model defined in [Chapter 6](c58ac055-5a1e-4bf4-b8a6-c9b311cf267a.xhtml), *Building
    a Web-Based Classroom Application*.
  prefs: []
  type: TYPE_NORMAL
- en: 'For MERN Marketplace, we will keep the product schema simple with support for
    fields such as product `name`, `description`, `image`, `category`, `quantity`,
    `price`, `created at`, `updated at`, and a reference to the shop. The code defining
    the product fields in the product schema are given in the following list, along
    with explanations:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Product name and description**: The `name` and `description` fields will
    be `String` types, with `name` as a `required` field:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '**Product image**: The `image` field will store an image file to be uploaded
    by the user as data in the MongoDB database:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '**Product category**: The `category` value will allow grouping products of
    the same type together:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '**Product quantity**: The `quantity` field will represent the amount available
    for selling in the shop:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: '**Product price**: The `price` field will hold the unit price this product
    will cost the buyer:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '**Product shop**: The `shop` field will reference the shop to which the product
    was added:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: '**Created and updated at times**: The `created` and `updated` fields will be
    `Date` types, with `created` generated when a new product is added, and the `updated`
    time changed when the product''s details are modified:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: The fields in this schema definition will enable us to implement the product-related
    features in MERN Marketplace. To begin the implementation of these features, in
    the next section, we will implement the full-stack slice that will allow sellers
    to add new products to their existing shops in the marketplace.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new product
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sellers in MERN Marketplace will be able to add new products to the shops they
    own on the platform. To implement this feature, in the following sections we will
    add a create product API in the backend, along with a way to fetch this API in
    the frontend, and a create new product form view that takes user input for product
    fields.
  prefs: []
  type: TYPE_NORMAL
- en: The create product API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will add a backend API that will let authorized shop owners save new products
    to the database with a `POST` request from the client side. In order to implement
    this create product API in the backend, we will first add a route at `/api/products/by/:shopId`,
    which accepts a `POST` request containing the product data. Sending a request
    to this route will create a new product associated with the shop identified by
    the `:shopId` param. This create product API route is declared as shown in the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/routes/product.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'The `product.routes.js` file containing this route declaration will be very
    similar to the `shop.routes.js` file, and to load these new routes in the Express
    app, we need to mount the product routes in `express.js`, as shown next:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/express.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'The code to handle a request to the create product API route will first check
    that the current user is the owner of the shop to which the new product will be
    added before creating the new product in the database. This API utilizes the `shopByID` and `isOwner` methods
    from the shop controller to process the `:shopId` param and to verify that the
    current user is the shop owner, before invoking the `create` controller method. The
    `create` method is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/controllers/product.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: This `create` method, in the product controller, uses the `formidable` node
    module to parse the multipart request that may contain an image file uploaded
    by the user along with the product fields. The parsed data is then saved to the
    Products collection as a new product.
  prefs: []
  type: TYPE_NORMAL
- en: In the frontend, to use this create product API, you will also need to set up
    a `fetch` method in `client/product/api-product.js` to make a `POST` request to
    the create API by passing the multipart form data from the view. This `fetch`
    method can then be utilized in the React component, which takes the product details
    from the user and sends the request to create a new product. The implementation
    of this form-based React component to create new products is discussed in the
    next section.
  prefs: []
  type: TYPE_NORMAL
- en: The NewProduct component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'An authorized seller who already has a shop created in the marketplace will
    see a form view for adding new products to the shop. We will implement this form
    view in a React component named `NewProduct`. The `NewProduct` component will
    be similar to the `NewShop` component. It will contain a form that allows a seller
    to create a product by entering a name, description, category, quantity, and price,
    and to upload a product image file from their local filesystem, as pictured in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a6dcfa2a-ed05-40c5-90c2-01538f736a4b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `NewProduct` component can be implemented almost exactly the same as the
    `NewShop` component, with the exception of retrieving the shop ID from the frontend
    route URL that will render the `NewProduct` component. This component will load
    at a route that is associated with a specific shop, so only signed-in users who
    are sellers can add a product to a shop they own. To define this route, we add
    a `PrivateRoute` in the `MainRouter` component as shown next, which will render
    this form only for authorized users at the URL `/seller/:shopId/products/new`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/MainRouter.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: Adding this link for a specific shop to any view in the frontend will render
    the `NewProduct` component for the signed-in user. In this view, the users will
    be able to fill out the new product details in the form and then save the product
    to the database in the backend, only if they are the authorized owner of the given
    shop. Next, we will look into the implementations for retrieving and displaying
    these products on different lists.
  prefs: []
  type: TYPE_NORMAL
- en: Listing products
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In MERN Marketplace, products will be presented to users in multiple ways. The
    two main distinctions will be in the way products are listed for sellers and the
    way they are listed for buyers. In the following sections, we will see how to
    list products in a shop for both sellers and buyers, then also discuss how to
    list product suggestions for buyers, featuring products that are related to a
    specific product, along with the latest products added to the marketplace.
  prefs: []
  type: TYPE_NORMAL
- en: Listing by shop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Visitors to the marketplace will browse products in each shop, and sellers will
    manage a list of products in each of their shops. Both these features will share
    the same backend API that will retrieve all the products for a specific shop but
    will be rendered differently for the two types of users. In the following sections,
    first, we will implement the backend API for fetching the products in a specific
    shop. Then, we will use the API in two different React components to render the
    list of products to the seller of the shop in one component, and to the buyers
    in another component.
  prefs: []
  type: TYPE_NORMAL
- en: The products by shop API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to implement the backend API to retrieve products from a specific
    shop in the database, we will set up a `GET` route at `/api/products/by/:shopId`,
    as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/routes/product.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'The `listByShop` controller method executed in response to this request will
    query the Product collection to return the products matching the given shop''s
    reference. The `listByShop` method is defined as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/controllers/product.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Each product in the resulting products array will contain the name and ID details
    of the associated shop, and we will omit the `image` field since images can be
    retrieved via separate API routes.
  prefs: []
  type: TYPE_NORMAL
- en: In the frontend, to fetch the products in a specific shop using this API to
    list by shop, we will also need to add a `fetch` method in `api-product.js`, similar
    to our other API implementations. Then, the `fetch` method can be called in any
    React component to render the products, for example, to display products in a
    shop to all buyers, as discussed in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Products component for buyers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will build a `Products` component, mainly for displaying the products to
    visitors who may buy the products. We can reuse this component across the application
    to render different product lists relevant to the buyer. It will receive the product
    list as props from a parent component that displays a list of products. A rendered
    Products view may look as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ab101983-f154-4f96-bc60-6509979c0896.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the marketplace application, the list of products in a shop will be displayed
    to the user in an individual `Shop` view. So this `Products` component is added
    to the `Shop` component and given the list of relevant products as props, as shown
    next:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/shop/Shop.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: The `searched` prop relays whether this list is a result of a product search,
    so appropriate messages can be rendered.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Shop` component, we need to add a call to the `listByShop` fetch method
    in a `useEffect` hook to retrieve the relevant products and set it to state, as
    shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/shop/Shop.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `Products` component, if the product list sent in the props contains
    products, the list is iterated over and the relevant details of each product are
    rendered in a Material-UI `GridListTile`, with a link to the individual product
    view and an `AddToCart` component (the implementation for which is discussed in
    [Chapter 8](7514f26d-29e1-46e2-ac46-7515b2c3a6d0.xhtml), *Extending the Marketplace
    for Orders and Payments*. The code to render the list of products is added as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/product/Products.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: If the `products` array sent in the props is found to be empty, and this was
    a result of a search action by the user, we render an appropriate message to inform
    the user that no products were found.
  prefs: []
  type: TYPE_NORMAL
- en: This `Products` component can be used to render different lists of products
    for buyers, including products in a shop, products by category, and products in
    search results. In the next section, we will implement a `MyProducts` component
    that will render a list of products only for shop owners, giving them a different
    set of interaction options.
  prefs: []
  type: TYPE_NORMAL
- en: MyProducts component for shop owners
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In contrast to the `Products` component, the `MyProducts` component in `client/product/MyProducts.js`
    is only for displaying products to sellers so they can manage the products in
    each shop they own and will be displayed to the end user as pictured in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e9532c67-1d7a-4a33-bcf3-1633f80b84d0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `MyProducts` component is added to the `EditShop` view as shown in the
    following code, so sellers can manage a shop and its contents in one place. It
    is provided with the shop''s ID in a prop so that relevant products can be fetched:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/shop/EditShop.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'In `MyProducts`, the relevant products are first loaded in a state with an
    `useEffect` hook using the `listByShop` fetch method, as shown in the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/product/MyProducts.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: This list of products is then iterated over with each product rendered in the `ListItem` components
    along with edit and delete options, similar to the `MyShops` list view. The edit
    button links to the Edit Product view. The `DeleteProduct` component handles the
    delete action, and reloads the list by calling an `onRemove` method passed from
    `MyProducts` to update the state with the updated list of products for the current
    shop.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `removeProduct` method, defined in `MyProducts`, is provided as the `onRemove`
    prop to the `DeleteProduct` component. The `removeProduct` method is defined as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/product/MyProducts.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'Then it is passed as a prop to the `DeleteProduct` component when it is added
    to `MyProducts` as shown next:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/product/MyProducts.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: Implementing a separate `MyProducts` component this way gives the shop owner
    the ability to see the list of products in their shop with the option to edit
    and delete each. In the next section, we will complete the implementation for
    retrieving different types of product lists from the backend and rendering them
    as product suggestions for buyers in the frontend.
  prefs: []
  type: TYPE_NORMAL
- en: Listing product suggestions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Visitors to MERN Marketplace will see product suggestions, such as the latest
    products added to the marketplace and products related to the product they are
    currently viewing. In the following sections, we will first look at the implementation
    of the backend APIs for retrieving the latest products and a list of products
    related to a given product, and then implement a React component called Suggestions
    to render these lists of products.
  prefs: []
  type: TYPE_NORMAL
- en: Latest products
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'On the home page of the MERN Marketplace, we will display five of the latest
    products added to the marketplace. To fetch the latest products, we will set up
    a backend API that will receive a `GET` request at `/api/products/latest`, as
    shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/routes/product.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'A `GET` request received at this route will invoke the `listLatest` controller
    method. This method will find all products, sort the list of products in the database
    with the `created` date field from newest to oldest, and return the first five
    from the sorted list in the response. This `listLatest` controller method is defined
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/controllers/product.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: To use this API in the frontend, you will also need to set up a corresponding
    `fetch` method in `api-product.js` for this latest products API, similar to other
    API implementations. This retrieved list will then be rendered in the `Suggestions`
    component to be added to the home page. Next, we will discuss a similar API for
    retrieving a list of related products.
  prefs: []
  type: TYPE_NORMAL
- en: Related products
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In each individual product view, we will show five related products as suggestions.
    To retrieve these related products, we will set up a backend API that accepts
    a request at `/api/products/related`, as shown in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/routes/product.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'The`:productId` param in the route URL route will call the `productByID` controller
    method, which is similar to the `shopByID` controller method, and retrieves the
    product from the database and attaches it to the request object to be used in
    the `next` method. The `productByID` controller method is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/controllers/product.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the product is retrieved, the `listRelated` controller method is invoked.
    This method queries the `Product` collection in the database to find other products
    with the same category as the given product, excluding the given product, and
    returns the first five products in the resulting list. This `listRelated` controller
    method is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/controllers/product.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: In order to utilize this related products API in the frontend, we will set up
    a corresponding `fetch` method in `api-product.js`. The `fetch` method will be
    called in the `Product` component with the product ID to populate the `Suggestions`
    component rendered in the product view. We will look at the implementation of
    this `Suggestions` component in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: The Suggestions component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `Suggestions` component will be rendered on the home page and on an individual
    product page to show the latest products and related products, respectively. Once
    rendered, the `Suggestions` component may look as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e32fbd8f-3a5c-4a2d-9415-c8d5ae3915a4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This component will receive the relevant list of products from the parent component
    as props, along with a title for the list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: In the `Suggestions` component, the received list is iterated over and individual
    products are rendered with relevant details, a link to the individual product
    page, and an `AddToCart` component, as shown in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/product/Suggestions.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: This `Suggestions` component can be reused to render any list of products to
    buyers, and in this section, we have discussed how to retrieve and display two
    different lists of products. Each product in the lists is linked to a view that
    will render details of the individual product. In the next section, we will look
    at the implementation of reading and displaying a single product to the end user.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying a product
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Visitors to the MERN Marketplace will be able to view more details of each product
    in a separate view. In the following sections, we will implement a backend API
    to retrieve a single product from the database and then use it in the frontend
    to render the single product in a React component.
  prefs: []
  type: TYPE_NORMAL
- en: Read a product API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the backend, we will add an API with a `GET` route that queries the Products
    collection with an ID and returns the product in the response. The route will
    be declared as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/routes/product.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'The`:productId` param in the URL invokes the `productByID` controller method,
    which retrieves the product from the database and appends it to the request object.
    The product in the request object is used by the `read` controller method to respond
    to the `GET` request. The read controller method is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/controllers/product.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: To use this read product API in the frontend, we will need to add a `fetch`
    method in `client/product/api-product.js`, similar to other API implementations.
    Then this `fetch` method can be used in the React component, which will render
    the individual product details, as discussed in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Product component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will add a React component named `Product` to render the individual product
    details, along with an add to cart option. In this single product view, we will
    also show a list of related products, as pictured in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a73d395e-7600-4c12-92ac-955d2496864e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `Product` component can be accessed in the browser at the `/product/:productID`
    route, which is defined in `MainRouter` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/MainRouter.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'The product details and the related product list data will be fetched by calling
    the relevant APIs with `useEffect` hooks using the `productId` specified in the
    route param, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/product/Product.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: In the first `useEffect` hook, we call the `read`  API to retrieve the specified
    product and set it to state. In the second hook, we call the `listRelated` API
    to get the list of related products and set it to the state to be passed as a
    prop to a `Suggestions` component added in the product view.
  prefs: []
  type: TYPE_NORMAL
- en: 'The product details part of the component displays relevant information about
    the product and an `AddToCart` component in a Material-UI `Card` component, as
    shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/product/Product.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Suggestions` component is added in the `Product` view with the related
    list data passed as a prop, as shown next:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/product/Product.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: With this view complete, visitors to the marketplace application will be able
    to find out more about a specific product as well as explore other similar products.
    In the next section, we will discuss how to add the ability for shop owners to
    edit and delete the products they added to the marketplace.
  prefs: []
  type: TYPE_NORMAL
- en: Editing and deleting a product
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Implementations to edit and delete products in the application are similar to
    editing and deleting shops, as covered in the previous sections, *Editing a shop*
    and *Deleting a shop*. These functionalities will require the corresponding APIs
    in the backend, fetch methods in the frontend, and React component views with
    forms and actions. In the following sections, we will highlight the frontend view,
    route, and backend API endpoints for editing and deleting a product from the marketplace.
  prefs: []
  type: TYPE_NORMAL
- en: Edit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The edit functionality is very similar to the create product functionality we
    implemented earlier. The `EditProduct` form component, which can be implemented
    to render a form that allows product detail modification, will also only be accessible
    by verified sellers at `/seller/:shopId/:productId/edit`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To restrict access to this view, we can add a `PrivateRoute` in `MainRouter`
    to declare the route to the `EditProduct` view as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/MainRouter.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'The `EditProduct` component contains the same form as `NewProduct`, but with
    populated values of the product retrieved using the read product API. On form
    submit, it uses a `fetch` method to send multipart form data with a PUT request
    to the edit product API in the backend at `/api/products/by/:shopId`. This backend
    route declaration for the edit product API will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/routes/product.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: The `update` controller method is invoked when an authorized user sends a PUT
    request to this API. It is similar to the product `create` method and the shop
    `update` method. It handles the multipart form data using `formidable` and extends
    the product details to save the updates to the database.
  prefs: []
  type: TYPE_NORMAL
- en: This implementation of an edit product form view integrated with an update API
    in the backend will allow shop owners to modify the details of products in their
    shops. Next, we will look at the highlights for integrating product deletion functionality
    to the application.
  prefs: []
  type: TYPE_NORMAL
- en: Delete
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to implement the delete product functionality, we can implement a `DeleteProduct`
    component similar to the `DeleteShop` component, and add it to the `MyProducts`
    component for each product in the list. It can take the `product` object, `shopID`,
    and an `onRemove` method as a prop from `MyProducts`, as discussed in the *MyProducts
    component for shop owners* section.
  prefs: []
  type: TYPE_NORMAL
- en: 'The component will function the same as `DeleteShop`, opening a dialog for
    confirmation on button-click and then, when the delete intent is confirmed by
    the user, calling the `fetch` method for delete, which makes the DELETE request
    to the server at `/api/product/:shopId/:productId`. This backend API for deleting
    a product from the database will be declared as follows with the other product
    routes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/routes/product.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: The `remove` controller method will be invoked if an authorized user makes the
    DELETE request to this API, and it will delete the specified product from the
    database, like the `remove` controller method for shops.
  prefs: []
  type: TYPE_NORMAL
- en: We started the implementation of the product-related features for the marketplace
    in this section by first defining a schema for storing product details and then
    discussing the full-stack slices for creating, listing, reading, updating, and
    deleting products in the application. In the next section, we will look into how
    to allow users in the marketplace to search for products in varied ways, so they
    can easily find the products they are looking for.
  prefs: []
  type: TYPE_NORMAL
- en: Searching for products with name and category
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In MERN Marketplace, visitors will be able to search for specific products by
    name and also in a specific category. In the following sections, we will discuss
    how this search functionality can be added by first looking at backend APIs that
    will retrieve the distinct categories from the Products collection, and perform
    the search query against the products stored. Then, we will discuss different
    cases for utilizing these APIs, such as a view to perform the search action and
    a view for displaying products by categories.
  prefs: []
  type: TYPE_NORMAL
- en: The categories API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To allow users to select a specific category to search in, we will first set
    up an API that retrieves all the distinct categories present in the Products collection
    in the database. A `GET` request to `/api/products/categories` will return an
    array of unique categories, and this route is declared as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/routes/product.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'The `listCategories` controller method queries the Products collection with
    a `distinct` call against the `category` field, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/controllers/product.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: This categories API can be used in the frontend with a corresponding `fetch`
    method to retrieve the array of distinct categories and displayed in the view.
    This can be paired with a search API to allow users to search for products by
    its name in a specific category. In the next section, we will discuss this search
    API.
  prefs: []
  type: TYPE_NORMAL
- en: The search products API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can define a search products API that will take a `GET` request at `/api/products?search=value&category=value`,
    with query parameters in the URL to query the Products collection with the provided
    search text and category values. The route for this search API will be defined
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/routes/product.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: 'The `list` controller method will first process the query parameters in the
    request, then find products in the given category, if any, with names that partially
    match with the provided search text. This `list` method is defined as shown in
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/controllers/product.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: The resulting products returned against the provided query parameters in the
    request are populated with shop details and downsized by removing the image field
    value, before being sent back in the response. To use this API in the frontend
    to perform a product search, we will need a `fetch` method that can construct
    the query parameters in the request URL, as discussed in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Fetch search results for the view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To utilize this search API in the frontend, we will set up a method that constructs
    the URL with query parameters and calls a fetch to make a request to the search
    product API. This `fetch` method will be defined as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/product/api-product.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: In order to construct the query parameters in the correct format, we will use
    the `query-string` node module, which will help stringify the params object into
    a query string that can be attached to the request route URL. The keys and values
    in this params object will be defined by the React component where we call this
    `list` method. Next, we will look at the `Search` component, which will utilize
    this method to enable the end user to search for products in the marketplace.
  prefs: []
  type: TYPE_NORMAL
- en: The Search component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first use case for applying the categories API and search API together
    to perform a search action is in the `Search` component. This component, once
    implemented and functional, will render as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0c9b6d9c-46d2-4394-b9ec-ae4007260df1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This `Search` component provides the user with a simple form containing a search
    input text field and a dropdown of the category options received from a parent
    component that will retrieve the list using the distinct categories API. The code
    to render this search form view will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/product/Search.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the user enters a search text and hits *Enter*, we will make a call to
    the `search` method. To detect that the *Enter* key was pressed, we use the `onKeyDown`
    attribute on the `TextField` and define the `enterKey` handler method as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/product/Search.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: 'The `search` method makes a call to the search API using the `list` fetch method,
    providing it with the necessary search query parameters and values. This `search`
    method is defined as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/product/Search.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: 'In this method, the query parameters provided to the `list` method are the
    search text value, if any, and the selected category value. Then the results array
    received from the backend is set to the values in state and passed as a prop to
    the `Products` component, as shown next, to render the matching products underneath
    the search form:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/product/Search.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: This search view gives visitors a useful tool to look for the specific product
    they want among many that may be stored in the database for the complete marketplace.
    In the next section, we will look at another simple use case for utilizing the
    categories and search APIs in the frontend.
  prefs: []
  type: TYPE_NORMAL
- en: The Categories component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `Categories` component is the second use case for the distinct categories
    and search APIs. For this component, we first fetch the list of categories in
    a parent component and send it as props to display the categories to the user,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e0cdf37a-d434-45ff-9d28-ef6f24f8f4f7.png)'
  prefs: []
  type: TYPE_IMG
- en: When the user selects a category in the displayed list, a call is made to the
    Search API with just a category value, and the backend returns all the products
    in the selected category. The returned products are then rendered in a `Products`
    component. This can be a simple way to combine these APIs and display meaningful
    products to buyers browsing through the marketplace.
  prefs: []
  type: TYPE_NORMAL
- en: In this first version of the MERN Marketplace, users can become sellers to create
    shops and add products, and visitors can browse shops and search for products,
    while the application also suggests products to the visitors.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we started building an online marketplace application using
    the MERN stack. The MERN skeleton was extended to allow users to have active seller
    accounts, so they can create shops and add products to each shop with the intention
    to sell to other users. We also explored how to utilize the stack to implement
    features such as product browsing, searching, and suggestions for regular users
    who are interesting in buying.
  prefs: []
  type: TYPE_NORMAL
- en: While going through the implementations in this chapter, we explored how to
    lay down the foundations with full-stack implementations to be able to combine
    and extend interesting features such as search and suggestions. You can apply
    these same approaches while building out other full-stack applications that may
    require these features.
  prefs: []
  type: TYPE_NORMAL
- en: Even with these features incorporated, a marketplace application is still incomplete
    without a shopping cart for checkout, order management, and payment processing.
    In the next chapter, we will grow our marketplace application to add these advanced
    features and learn more about how the MERN stack can be used to implement these
    core aspects of an e-commerce application.
  prefs: []
  type: TYPE_NORMAL
