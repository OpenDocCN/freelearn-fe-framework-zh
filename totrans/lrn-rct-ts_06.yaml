- en: '6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '6'
- en: Routing with React Router
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 React Router 进行路由
- en: 'In this chapter, we will build a simple app implementing the following pages:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将构建一个简单的应用程序，实现以下页面：
- en: A home page that welcomes the user
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 欢迎用户的首页
- en: A products list page that lists all the products
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列出所有产品的产品列表页面
- en: A product page that provides details about a particular product
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个提供特定产品详细信息的产品页面
- en: An admin page for privileged users
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 专为特权用户设计的管理员页面
- en: This will all be managed using a library called **React Router**.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这一切都将使用名为 **React Router** 的库来管理。
- en: Through this, we will learn how to implement static links from the products
    list to the product page and implement route parameters on the product page for
    the product ID. We will also learn about form navigation and query parameters
    when it comes to the search feature of our app.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，我们将学习如何从产品列表到产品页面实现静态链接，并在产品页面上实现产品 ID 的路由参数。我们还将了解在应用程序的搜索功能中关于表单导航和查询参数的内容。
- en: Finally, the chapter will end with how to lazily load code for a page to improve
    performance.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，本章将介绍如何懒加载页面代码以提高性能。
- en: 'So, in this chapter, we will cover the following topics:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在本章中，我们将涵盖以下主题：
- en: Introducing React Router
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍 React Router
- en: Declaring routes
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 声明路由
- en: Creating navigation
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建导航
- en: Using nested routes
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用嵌套路由
- en: Using route parameters
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用路由参数
- en: Creating an error page
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建错误页面
- en: Using index routes
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用索引路由
- en: Using search parameters
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用搜索参数
- en: Navigating programmatically
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编程导航
- en: Using form navigation
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用表单导航
- en: Implementing lazy loading
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现懒加载
- en: Technical requirements
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'We will use the following technologies in this chapter:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用以下技术：
- en: '**Browser**: A modern browser such as Google Chrome'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**浏览器**：一个现代浏览器，如 Google Chrome'
- en: '**Node.js** and **npm**: You can install them from [https://nodejs.org/en/download/](https://nodejs.org/en/download/)'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Node.js** 和 **npm**：您可以从 [https://nodejs.org/en/download/](https://nodejs.org/en/download/)
    安装它们。'
- en: '**Visual Studio Code**: You can install it from [https://code.visualstudio.com/](https://code.visualstudio.com/)'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Visual Studio Code**: 您可以从 [https://code.visualstudio.com/](https://code.visualstudio.com/)
    安装它。'
- en: All the code snippets in this chapter can be found online at [https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/tree/main/Chapter6](https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/tree/main/Chapter6).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中所有的代码片段都可以在网上找到，地址为 [https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/tree/main/Chapter6](https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/tree/main/Chapter6)。
- en: Introducing React Router
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍 React Router
- en: In this section, we start by creating a new React project for the app before
    understanding what React Router is and how to install it.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们在了解 React Router 是什么以及如何安装它之前，首先创建一个新的 React 项目用于应用程序。
- en: Creating the project
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建项目
- en: We will develop the app locally using Visual Studio Code, which requires a new
    Create React App-based project setup. We have covered this several times, so we
    will not cover the steps in this chapter – instead, see [*Chapter 3*](B19051_03.xhtml#_idTextAnchor072),
    *Setting Up React and TypeScript*. Create the project for the app with a name
    of your choice.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 Visual Studio Code 在本地开发应用程序，这需要一个基于 Create React App 的新项目设置。我们已经多次介绍过这一点，所以在本章中我们将不介绍步骤——相反，请参阅
    [*第 3 章*](B19051_03.xhtml#_idTextAnchor072)，*设置 React 和 TypeScript*。创建一个具有您选择的名称的应用程序项目。
- en: We will style the app with Tailwind CSS. We covered how to install and configure
    Tailwind in Create React App in [*Chapter 5*](B19051_05.xhtml#_idTextAnchor127),
    *Approaches to Styling Frontends*, so after you have created the React and TypeScript
    project for the app, install and configure Tailwind.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 Tailwind CSS 来设计应用程序。我们已经在 [*第 5 章*](B19051_05.xhtml#_idTextAnchor127)，*前端设计方法*
    中介绍了如何安装和配置 Tailwind，因此您创建了 React 和 TypeScript 项目后，请安装并配置 Tailwind。
- en: Understanding React Router
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解 React Router
- en: As the name suggests, React Router is a routing library for React apps. A router
    is responsible for selecting what to show in the app for a requested path. For
    example, React Router is responsible for determining what components to render
    when a path of `/products/6` is requested. For any app containing multiple pages,
    a router is essential, and React Router has been a popular router library for
    React for many years.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如其名所示，React Router 是 React 应用程序的路由库。路由器负责选择在应用程序中显示的内容。例如，当请求 `/products/6`
    路径时，React Router 负责确定要渲染哪些组件。对于包含多个页面的任何应用程序，路由器都是必不可少的，并且 React Router 已经是许多年
    React 的流行路由库。
- en: Installing React Router
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 React Router
- en: 'React Router is in a package called `react-router-dom`. Install this in the
    project using the following command in the terminal:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: React Router 包含在一个名为 `react-router-dom` 的包中。使用以下终端命令在项目中安装它：
- en: '[PRE0]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: TypeScript types are included in `react-router-dom`, so there is no need for
    a separate installation.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript 类型包含在 `react-router-dom` 中，因此不需要单独安装。
- en: Next, we will create a page in the app and declare a route that shows it.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将在应用中创建一个页面并声明一个显示该页面的路由。
- en: Declaring routes
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 声明路由
- en: We will start this section by creating a page component that lists the app’s
    products. We will then learn how to create a router and declare routes using React
    Router’s `createBrowserRouter` function.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从这个部分开始创建一个列出应用产品的页面组件。然后我们将学习如何使用 React Router 的 `createBrowserRouter` 函数创建路由器并声明路由。
- en: Creating the products list page
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建产品列表页面
- en: 'The products list page component will contain the list of the React tools in
    the app. Carry out the following steps to create this:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 产品列表页面组件将包含应用中所有 React 工具的列表。按照以下步骤创建：
- en: We will start by creating the data source for the page. First, create a folder
    called `data` in the `src` folder and then a file called `products.ts` within
    `data`.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先创建页面的数据源。首先，在 `src` 文件夹中创建一个名为 `data` 的文件夹，然后在 `data` 文件夹中创建一个名为 `products.ts`
    的文件。
- en: 'Add the following content into `products.ts` (you can copy and paste it from
    the GitHub repository at [https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/blob/main/Chapter6/src/data/products.ts](https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/blob/main/Chapter6/src/data/products.ts)):'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下内容添加到 `products.ts` 中（您可以从 GitHub 仓库 [https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/blob/main/Chapter6/src/data/products.ts](https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/blob/main/Chapter6/src/data/products.ts)
    复制并粘贴）：
- en: '[PRE1]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: This is a list of all the React tools in the app held in a JavaScript array.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个包含应用中所有 React 工具的 JavaScript 数组列表。
- en: Note
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Usually, this kind of data is on a server somewhere, but this adds complexity
    beyond the scope of this chapter. We cover how to interact with server data in
    detail in [*Chapter 9*](B19051_09.xhtml#_idTextAnchor220), *Interacting with RESTful
    APIs*, including how to do this efficiently with React Router.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，这类数据位于某个服务器上，但这超出了本章的范围。我们将在 [*第 9 章*](B19051_09.xhtml#_idTextAnchor220)，*与
    RESTful API 交互* 中详细介绍如何与服务器数据交互，包括如何使用 React Router 高效地完成此操作。
- en: We will create the products list page component now. First, create a folder
    for all the page components in the `src` folder called `pages`. Next, create a
    file called `ProductsPage.tsx` in the `pages` folder for the products list page
    component.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将创建产品列表页面组件。首先，在 `src` 文件夹中创建一个名为 `pages` 的文件夹，用于存放所有页面组件。接下来，在 `pages`
    文件夹中创建一个名为 `ProductsPage.tsx` 的文件，用于产品列表页面组件。
- en: 'Add the following `import` statement into `ProductsPage.tsx` to import the
    products we just created:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下 `import` 语句添加到 `ProductsPage.tsx` 中以导入我们刚刚创建的产品：
- en: '[PRE40]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Next, start to create the `ProductsPage` component by outputting a heading
    for the page:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，开始创建 `ProductsPage` 组件，输出页面的标题：
- en: '[PRE41]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: This uses Tailwind classes to make the heading large, bold, gray, and horizontally
    centered.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这使用 Tailwind 类使标题变大、加粗、灰色并水平居中。
- en: 'Next, add the list of the products in the JSX:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在 JSX 中添加产品列表：
- en: '[PRE50]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: The Tailwind classes remove the bullet points, margin, and padding from the
    unordered list element, and make the list items gray.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: Tailwind 类从无序列表元素中移除了项目符号、边距和填充，并将列表项设置为灰色。
- en: Notice that we use the products array `map` function to iterate over each product
    and return a `li` element. Using `Array.map` is common practice for JSX looping
    logic.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们使用产品数组 `map` 函数遍历每个产品并返回一个 `li` 元素。使用 `Array.map` 是 JSX 循环逻辑的常见做法。
- en: Notice the `key` prop on the list item elements. React requires this on elements
    in a loop to update the corresponding DOM elements efficiently. The value of the
    `key` prop must be unique and stable within the array, so we have used the product
    ID.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 注意列表项元素上的 `key` 属性。React 需要在循环中的元素上使用此属性以有效地更新相应的 DOM 元素。`key` 属性的值必须在数组中是唯一的且稳定的，所以我们使用了产品
    ID。
- en: That completes the product page for now. This page won’t show in the app yet
    because it isn’t part of its component tree – we need to declare it as a page
    using React Router, which we’ll do next.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 目前这完成了产品页面的创建。这个页面在应用中还没有显示，因为它不是其组件树的一部分——我们需要使用 React Router 声明它，我们将在下一步中这样做。
- en: Understanding React Router’s router
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解 React Router 的路由器
- en: A router in React Router is a component that tracks the browser’s URL and performs
    navigation. Several routers are available in React Router, and the one recommended
    for web applications is called a `createBrowserRouter` function creates a browser
    router.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: React Router 中的路由是一个跟踪浏览器 URL 并执行导航的组件。React Router 中有几个路由器可用，推荐用于 Web 应用程序的是名为
    `createBrowserRouter` 的函数，它创建一个浏览器路由器。
- en: '`createBrowserRouter` requires an argument containing all the **routes** in
    the application. A route contains a path and what component to render when the
    app’s browser address matches that path. The following code snippet creates a
    router with two routes:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`createBrowserRouter` 需要一个包含应用程序中所有 **路由** 的参数。一个路由包含一个路径和当应用程序的浏览器地址匹配该路径时要渲染的组件。以下代码片段创建了一个具有两个路由的路由器：'
- en: '[PRE62]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: When the path is `/some-page`, the `SomePage` component will be rendered. When
    the path is `/another-page`, the `AnotherPage` component will be rendered.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 当路径是 `/some-page` 时，将渲染 `SomePage` 组件。当路径是 `/another-page` 时，将渲染 `AnotherPage`
    组件。
- en: 'The router returned by `createBrowserRouter` is passed to a `RouterProvider`
    component and placed high up in the React component tree, as shown here:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`createBrowserRouter` 返回的路由器被传递给一个 `RouterProvider` 组件，并放置在 React 组件树的较高位置，如下所示：'
- en: '[PRE63]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Now that we are starting to understand React Router’s router, we will use it
    in our project.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们开始理解 React Router 的路由器，我们将在我们的项目中使用它。
- en: Declaring the products route
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 声明产品路由
- en: 'We will declare the products list page in the app using `createBrowserRouter`
    and `RouterProvider`. Carry out the following steps:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在应用中使用 `createBrowserRouter` 和 `RouterProvider` 声明产品列表页面。执行以下步骤：
- en: 'We will create our own component to hold all the route definitions. Create
    a file called `Routes.tsx` in the `src` folder containing the following `import`
    statements:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将创建自己的组件来包含所有的路由定义。在 `src` 文件夹中创建一个名为 `Routes.tsx` 的文件，包含以下 `import` 语句：
- en: '[PRE64]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: We have imported `createBrowserRouter` and `RouterProvider` from React Router.
    We have also imported `ProductsPage`, which we’ll render in a `products` route
    next.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已从 React Router 中导入了 `createBrowserRouter` 和 `RouterProvider`。我们还导入了 `ProductsPage`，我们将在下一个
    `products` 路由中渲染它。
- en: 'Add the following component underneath the `import` statements to define the
    router with a `products` route:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `import` 语句下方添加以下组件，以定义具有 `products` 路由的路由器：
- en: '[PRE69]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: So, the `ProductsPage` component will be rendered when the path is `/products`.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当路径是 `/products` 时，将渲染 `ProductsPage` 组件。
- en: 'Still in `Routes.tsx`, create a component called `Routes` under the router
    as follows:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仍然在 `Routes.tsx` 中，在路由器下创建一个名为 `Routes` 的组件，如下所示：
- en: '[PRE75]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: This component wraps `RouterProvider` with the router passed into it.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 此组件将 `RouterProvider` 包装起来，并将路由传递给它。
- en: 'Open the `index.tsx` file and add an `import` statement for the `Routes` component
    we just created beneath the other `import` statements:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `index.tsx` 文件，在其他的 `import` 语句下方添加我们刚刚创建的 `Routes` 组件的 `import` 语句：
- en: '[PRE78]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'Render `Routes` instead of `App` as the top-level component as follows:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `Routes` 而不是 `App` 作为顶级组件渲染，如下所示：
- en: '[PRE79]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[PRE80]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[PRE81]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[PRE82]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '[PRE83]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE83]'
- en: This causes the `products` route we defined to be part of the component tree.
    This means the products list page will be rendered in the app when the path is
    `/products`.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得我们定义的 `products` 路由成为组件树的一部分。这意味着当路径是 `/products` 时，产品列表页面将在应用中渲染。
- en: Remove the `import` statement for the `App` component, as this is not needed
    at the moment.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除对 `App` 组件的 `import` 语句，因为目前不需要它。
- en: Run the app using `npm start`.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `npm start` 运行应用。
- en: 'An error screen appears explaining that the current route isn’t found:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 出现一个错误屏幕，解释说当前路由未找到：
- en: '![Figure 6.1 – React Router’s standard error page](img/B19051_06_01.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![图6.1 – React Router的标准错误页面](img/B19051_06_01.jpg)'
- en: Figure 6.1 – React Router’s standard error page
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.1 – React Router的标准错误页面
- en: The error page is from React Router. As the error message suggests, we can provide
    our own error screen, which we will do later in this chapter.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 错误页面来自 React Router。正如错误消息所建议的，我们可以提供自己的错误屏幕，我们将在本章的后面做到这一点。
- en: Change the browser URL to `http://localhost:3000/products`.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将浏览器 URL 更改为 `http://localhost:3000/products`。
- en: 'You will see the products list page component rendered as follows:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到产品列表页面组件按以下方式渲染：
- en: '![Figure 6.2 – Products list page](img/B19051_06_02.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![图6.2 – 产品列表页面](img/B19051_06_02.jpg)'
- en: Figure 6.2 – Products list page
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.2 – 产品列表页面
- en: This confirms that the `products` route is working nicely. Keep the app running
    as we recap and move to the next section.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 这确认了 `products` 路由运行良好。在我们回顾并进入下一节之前，保持应用运行。
- en: 'Here’s a recap of what we have learned in this section:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们回顾一下我们学到了什么：
- en: In a web app, routes in React Router are defined using `createBrowserRouter`
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Web 应用程序中，React Router 使用 `createBrowserRouter` 定义路由。
- en: Each route has a path and a component to render when the browser’s URL matches
    that path
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个路由都有一个路径和一个组件，当浏览器的 URL 与该路径匹配时，将渲染该组件。
- en: The router returned from `createBrowserRouter` is passed into a `RouterProvider`
    component, which should be placed high up in the component tree
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 `createBrowserRouter` 返回的路由器被传递给一个 `RouterProvider` 组件，该组件应放置在组件树的高层。
- en: 'For more information on `createBrowserRouter`, see the following link in the
    React Router documentation: [https://reactrouter.com/en/main/routers/create-browser-router](https://reactrouter.com/en/main/routers/create-browser-router).
    For more information on `RouterProvider`, see the following link in the React
    Router documentation: [https://reactrouter.com/en/main/routers/router-provider](https://reactrouter.com/en/main/routers/router-provider).'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 `createBrowserRouter` 的更多信息，请参阅 React Router 文档中的以下链接：[https://reactrouter.com/en/main/routers/create-browser-router](https://reactrouter.com/en/main/routers/create-browser-router)。关于
    `RouterProvider` 的更多信息，请参阅 React Router 文档中的以下链接：[https://reactrouter.com/en/main/routers/router-provider](https://reactrouter.com/en/main/routers/router-provider)。
- en: Next, we will learn about React Router components that can perform navigation.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将学习关于可以执行导航的 React Router 组件。
- en: Creating navigation
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建导航
- en: React Router comes with components called `Link` and `NavLink`, which provide
    navigation. In this section, we will create a navigation bar at the top of the
    app containing the `Link` component from React Router. We will then swap `Link`
    for the `NavLink` component and understand the difference between the two components.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: React Router 附带名为 `Link` 和 `NavLink` 的组件，它们提供导航。在本节中，我们将在应用程序顶部创建一个包含 React
    Router 的 `Link` 组件的导航栏。然后我们将用 `NavLink` 组件替换 `Link`，并了解两个组件之间的区别。
- en: Using the Link component
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Link 组件
- en: 'Carry out the following steps to create an app header containing React Router’s
    `Link` component:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以创建包含 React Router 的 `Link` 组件的应用程序头部：
- en: 'Start by creating a file for the app header called `Header.tsx` in the `src`
    folder containing the following `import` statements:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在 `src` 文件夹中创建一个名为 `Header.tsx` 的应用程序头部文件，包含以下 `import` 语句：
- en: '[PRE84]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '[PRE85]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE85]'
- en: We have imported the `Link` component from React Router.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已从 React Router 中导入了 `Link` 组件。
- en: We have also imported the React logo because we will include this in the app
    header with the navigation options.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还导入了 React 标志，因为我们将在应用程序头部包含导航选项。
- en: 'Create the `Header` component as follows:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `Header` 组件如下所示：
- en: '[PRE86]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '[PRE87]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '[PRE88]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '[PRE90]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '[PRE91]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '[PRE92]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '[PRE93]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '[PRE94]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[PRE95]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '[PRE96]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '[PRE97]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '[PRE98]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE98]'
- en: The component contains a `header` element containing the React logo, the app
    title, and an empty `nav` element. We have used Tailwind classes to make the header
    gray with the logo and title horizontally centered.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 该组件包含一个包含 React 标志、应用程序标题和一个空 `nav` 元素的 `header` 元素。我们使用了 Tailwind 类来使头部灰色，并将标志和标题水平居中。
- en: 'Now, create a link inside the `nav` element:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在 `nav` 元素内部创建一个链接：
- en: '[PRE99]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '[PRE100]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '[PRE101]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '[PRE102]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '[PRE103]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '[PRE104]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '[PRE105]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '[PRE106]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE106]'
- en: The `Link` component has a `to` prop that defines the path to navigate to. The
    text to display can be specified in the `Link` content.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '`Link` 组件有一个 `to` 属性，它定义了要导航到的路径。要显示的文本可以在 `Link` 内容中指定。'
- en: 'Open `Routes.tsx` and add an import statement for the `Header` component we
    just created:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `Routes.tsx` 并为刚刚创建的 `Header` 组件添加一个导入语句：
- en: '[PRE107]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE107]'
- en: 'In the `router` definition, add a root path that renders the `Header` component
    as follows:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `router` 定义中，添加一个渲染 `Header` 组件的根路径，如下所示：
- en: '[PRE108]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[PRE109]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '[PRE110]'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '[PRE111]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '[PRE112]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '[PRE113]'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '[PRE114]'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '[PRE115]'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '[PRE116]'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE116]'
- en: '[PRE117]'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE117]'
- en: What we have just done isn’t ideal because the `Header` component needs to show
    on all routes and not just the root route. However, it will allow us to explore
    React Router’s `Link` component. We will tidy this up in the *Using nested* *routes*
    section.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚所做的不太理想，因为 `Header` 组件需要在所有路由上显示，而不仅仅是根路由。然而，它将允许我们探索 React Router 的 `Link`
    组件。我们将在 *使用嵌套* *路由* 部分中整理这个问题。
- en: 'In the running app, change the browser address to the root of the app. The
    new app header appears, containing the **Products** link:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在运行中的应用程序中，将浏览器地址更改为应用程序的根目录。新的应用程序头部出现，包含 **产品** 链接：
- en: '![Figure 6.3 – App header](img/B19051_06_03.jpg)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.3 – 应用程序头部](img/B19051_06_03.jpg)'
- en: Figure 6.3 – App header
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.3 – 应用程序头部
- en: 'Now, inspect the app header elements using the browser’s DevTools:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用浏览器的 DevTools 检查应用程序头部元素：
- en: '![Figure 6.4 – Header component inspection](img/B19051_06_04.jpg)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.4 – 头部组件检查](img/B19051_06_04.jpg)'
- en: Figure 6.4 – Header component inspection
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.4 – 头部组件检查
- en: We can see that the `Link` component is rendered as an HTML anchor element.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到 `Link` 组件被渲染为一个 HTML 锚元素。
- en: Select the **Network** tab in DevTools and clear any existing requests that
    are shown. Click on the **Products** link in the app header. The browser will
    navigate to the products list page.
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 DevTools 中选择 **网络** 选项卡并清除任何显示的现有请求。点击应用头部中的 **产品** 链接。浏览器将导航到产品列表页面。
- en: 'Notice that a network request wasn’t made for the products list page. This
    is because React Router overrides the anchor element’s default behavior with client-side
    navigation:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，没有为产品列表页面发起网络请求。这是因为 React Router 使用客户端导航覆盖了锚元素的默认行为：
- en: '![Figure 6.5 – Client-side navigation](img/B19051_06_05.jpg)'
  id: totrans-232
  prefs: []
  type: TYPE_IMG
  zh: '![图6.5 – 客户端导航](img/B19051_06_05.jpg)'
- en: Figure 6.5 – Client-side navigation
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.5 – 客户端导航
- en: Finally, notice that the app header disappears on the products list page, which
    is not what we want. We will resolve this in the *Using nested* *routes* section.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，请注意，在产品列表页面上应用头部消失了，这不是我们想要的效果。我们将在 *使用嵌套* *路由* 部分解决这个问题。
- en: Keep the app running as we move to the next section.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们进入下一个部分之前，保持应用运行。
- en: The navigation is working well but it would be nice if the **Products** link
    had a different style when the products list page was active. We will make this
    improvement next.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 导航工作得很好，但如果在产品列表页面活动时，**产品**链接有不同的样式会更好。我们将在下一个改进中实现这一点。
- en: Using the NavLink component
  id: totrans-237
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 NavLink 组件
- en: React Router’s `NavLink` is like a `Link` element but allows it to be styled
    differently when active. This is really handy for a navigation bar.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: React Router 的 `NavLink` 类似于 `Link` 元素，但允许它在活动时以不同的方式样式化。这对于导航栏来说非常方便。
- en: 'Carry out the following steps to replace `Link` with `NavLink` in the app header:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以在应用头部将 `Link` 替换为 `NavLink`：
- en: 'Open `Header.tsx` and change the `Link` references to `NavLink`:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `Header.tsx` 并将 `Link` 引用更改为 `NavLink`：
- en: '[PRE118]'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '[PRE119]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE119]'
- en: '[PRE120]'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE120]'
- en: '[PRE121]'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '[PRE122]'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '[PRE123]'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE123]'
- en: '[PRE124]'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '[PRE125]'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '[PRE126]'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE126]'
- en: '[PRE127]'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE127]'
- en: '[PRE128]'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE128]'
- en: '[PRE129]'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE129]'
- en: '[PRE130]'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE130]'
- en: '[PRE131]'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE131]'
- en: '[PRE132]'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE132]'
- en: '[PRE133]'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE133]'
- en: '[PRE134]'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE134]'
- en: The app header will look and behave exactly the same at the moment.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，应用头部看起来和表现完全相同。
- en: 'The `className` prop on the `NavLink` component accepts a function that can
    be used to conditionally style it, depending on whether its page is active. Update
    the `className` attribute to the following:'
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`NavLink` 组件上的 `className` 属性接受一个函数，可以根据页面是否处于活动状态有条件地样式化它。将 `className` 属性更新为以下内容：'
- en: '[PRE135]'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE135]'
- en: '[PRE136]'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE136]'
- en: '[PRE137]'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE137]'
- en: '[PRE138]'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE138]'
- en: '[PRE139]'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE139]'
- en: '[PRE140]'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE140]'
- en: '[PRE141]'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE141]'
- en: '[PRE142]'
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE142]'
- en: '[PRE143]'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE143]'
- en: '[PRE144]'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE144]'
- en: The function takes in a parameter, `isActive`, for defining whether the link’s
    page is active. We’ve added a bottom border to the link if it is active.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数接受一个参数 `isActive`，用于定义链接的页面是否处于活动状态。如果链接处于活动状态，我们已为其添加了底部边框。
- en: We can’t see the impact of this change just yet, because the **Products** link
    doesn’t appear on the products list page yet. We will resolve this in the next
    section.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 我们目前还看不到这个更改的影响，因为 **产品** 链接还没有出现在产品列表页面上。我们将在下一个部分解决这个问题。
- en: That completes the app header and our exploration of the `NavLink` component.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 这样就完成了应用头部以及我们对 `NavLink` 组件的探索。
- en: To recap, `NavLink` is great for main app navigation when we want to highlight
    an active link, and `Link` is great for all the other links in our app.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，`NavLink` 在我们想要突出显示活动链接时非常适合用于主应用导航，而 `Link` 则非常适合我们应用中的其他所有链接。
- en: 'For more information on the `Link` component, see the following link: [https://reactrouter.com/en/main/components/link](https://reactrouter.com/en/main/components/link).
    For more information on the `NavLink` component, see the following link: [https://reactrouter.com/en/main/components/nav-link](https://reactrouter.com/en/main/components/nav-link).'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 `Link` 组件的更多信息，请参阅以下链接：[https://reactrouter.com/en/main/components/link](https://reactrouter.com/en/main/components/link)。有关
    `NavLink` 组件的更多信息，请参阅以下链接：[https://reactrouter.com/en/main/components/nav-link](https://reactrouter.com/en/main/components/nav-link)。
- en: Next, we will learn about nested routes.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将学习嵌套路由。
- en: Using nested routes
  id: totrans-276
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用嵌套路由
- en: In this section, we will cover **nested routes** and the situations in which
    they are useful, before using a nested route in our app. The nested route will
    also resolve the disappearing app header problem we experienced in the previous
    sections.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍 **嵌套路由** 以及它们有用的场景，然后在我们的应用中使用嵌套路由。嵌套路由还将解决我们在前几节中遇到的应用头部消失的问题。
- en: Understanding nested routes
  id: totrans-278
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解嵌套路由
- en: 'A nested route allows a segment of a route to render a component. For example,
    the following mock-up is commonly implemented using nested routes:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 嵌套路由允许路由的一部分渲染组件。例如，以下模拟通常使用嵌套路由实现：
- en: '![Figure 6.6 – Use case for nested routes](img/B19051_06_06.jpg)'
  id: totrans-280
  prefs: []
  type: TYPE_IMG
  zh: '![图6.6 – 嵌套路由的使用案例](img/B19051_06_06.jpg)'
- en: Figure 6.6 – Use case for nested routes
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.6 – 嵌套路由的使用案例
- en: The mock-up displays information about a customer. The path determines the active
    tab – in the mockup, `/customers/1234/history`.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟显示有关客户的信息。路径确定活动标签页 – 在模拟中，`/customers/1234/history`。
- en: A `Customer` component could render the shell of this screen, including the
    customer’s name, picture, and tab headings. The component that renders the tab
    contents could be decoupled from the `Customer` component and coupled to the path
    instead.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 一个`Customer`组件可以渲染这个屏幕的壳体，包括客户的姓名、图片和标签页标题。渲染标签页内容的组件可以与`Customer`组件解耦，并与路径耦合。
- en: 'This feature is referred to as *nested routes* because `Route` components are
    nested inside each other. Here’s what the routes for the mock-up could be:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 这个特性被称为*嵌套路由*，因为`Route`组件嵌套在彼此内部。以下是模拟路由的示例：
- en: '[PRE145]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: This nested approach to defining routes makes them easy to read and understand,
    as you can see in the preceding code snippet.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 这种定义路由的嵌套方法使得它们易于阅读和理解，正如您在前面的代码片段中所看到的。
- en: 'A critical part of nested routes is where child components are rendered in
    their parent. In the preceding code snippet, where would the `CustomerProfile`
    component be rendered in the `Customer` component? The solution is React Router’s
    `Outlet` component. Here’s an example of `Outlet` in the `Customer` component
    from the mock-up:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 嵌套路由的一个关键部分是子组件在父组件中的渲染位置。在前面的代码片段中，`CustomerProfile`组件将在`Customer`组件中渲染在哪里？解决方案是React
    Router的`Outlet`组件。以下是从模拟中`Customer`组件的`Outlet`组件示例：
- en: '[PRE146]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: So, in this example, the `CustomerProfile` component would be rendered after
    the navigation options in the `Customer` component. Notice that the `Customer`
    component is decoupled from the nested content. This means new tabs can be added
    to the customer page without changing the `Customer` component. This is another
    benefit of nested routes.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在这个例子中，`CustomerProfile`组件将在`Customer`组件的导航选项之后渲染。请注意，`Customer`组件与嵌套内容解耦。这意味着可以在不更改`Customer`组件的情况下向客户页面添加新标签页。这是嵌套路由的另一个好处。
- en: Next, we will use a nested route within our app.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将在我们的应用中使用嵌套路由。
- en: Using nested routes in the app
  id: totrans-291
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在应用中使用嵌套路由
- en: 'In our app, we will use the `App` component for the app’s shell, which renders
    the root path. We will then nest the products list page within this:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用中，我们将使用`App`组件作为应用的壳体，它渲染根路径。然后我们将产品列表页面嵌套在这个组件中：
- en: 'Open `App.tsx` and replace all the existing content with the following:'
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`App.tsx`，将所有现有内容替换为以下内容：
- en: '[PRE147]'
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE147]'
- en: '[PRE148]'
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE148]'
- en: '[PRE149]'
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE149]'
- en: '[PRE150]'
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE150]'
- en: '[PRE151]'
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE151]'
- en: '[PRE152]'
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE152]'
- en: '[PRE153]'
  id: totrans-300
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE153]'
- en: '[PRE154]'
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE154]'
- en: '[PRE155]'
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE155]'
- en: '[PRE156]'
  id: totrans-303
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE156]'
- en: The component renders the app header with nested content underneath it.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 该组件渲染应用头部，并在其下方渲染嵌套内容。
- en: Note
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The empty JSX elements, `<>` and `</>`, are **React fragments**. React fragments
    are not added to the DOM and are used as a workaround to React components only
    being able to return a single element, so they are a way of returning multiple
    elements in a React component that keeps React happy.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 空的JSX元素`<>`和`</>`是**React片段**。React片段不会添加到DOM中，并且作为React组件只能返回单个元素的解决方案，因此它们是在React组件中返回多个元素的一种方式，同时保持React的愉悦。
- en: 'Open `Routes.tsx`, import the `App` component we just modified, and remove
    the `import` component for `Header`:'
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Routes.tsx`，导入我们刚刚修改的`App`组件，并移除对`Header`组件的`import`：
- en: '[PRE157]'
  id: totrans-308
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE157]'
- en: '[PRE158]'
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE158]'
- en: '[PRE159]'
  id: totrans-310
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE159]'
- en: '[PRE160]'
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE160]'
- en: '[PRE161]'
  id: totrans-312
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE161]'
- en: '[PRE162]'
  id: totrans-313
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE162]'
- en: 'Update the `router` definition as follows:'
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`router`定义如下：
- en: '[PRE163]'
  id: totrans-315
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE163]'
- en: '[PRE164]'
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE164]'
- en: '[PRE165]'
  id: totrans-317
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE165]'
- en: '[PRE166]'
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE166]'
- en: '[PRE167]'
  id: totrans-319
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE167]'
- en: '[PRE168]'
  id: totrans-320
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE168]'
- en: '[PRE169]'
  id: totrans-321
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE169]'
- en: '[PRE170]'
  id: totrans-322
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE170]'
- en: '[PRE171]'
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE171]'
- en: '[PRE172]'
  id: totrans-324
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE172]'
- en: '[PRE173]'
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE173]'
- en: '[PRE174]'
  id: totrans-326
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE174]'
- en: The products list page is now nested inside the `App` component.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 产品列表页面现在嵌套在`App`组件内部。
- en: 'If you return to the running app, you will see that the app header now appears
    on the products list page. You will also see the **Products** link underlined
    because it is an active link:'
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您回到运行中的应用，您将看到应用头部现在出现在产品列表页面上。您还会看到下划线的**产品**链接，因为它是一个活动链接：
- en: '![Figure 6.7 – App header on the products list page](img/B19051_06_07.jpg)'
  id: totrans-329
  prefs: []
  type: TYPE_IMG
  zh: '![图6.7 – 产品列表页面的应用头部](img/B19051_06_07.jpg)'
- en: Figure 6.7 – App header on the products list page
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.7 – 产品列表页面的应用头部
- en: To recap, nested routes allow components to be rendered for different path segments.
    An `Outlet` component is to render nested content within a parent component.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，嵌套路由允许为不同的路径段渲染组件。`Outlet`组件用于在父组件内渲染嵌套内容。
- en: 'For more information on the `Outlet` component, see the following link: [https://reactrouter.com/en/main/components/outlet](https://reactrouter.com/en/main/components/outlet).'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于`Outlet`组件的信息，请参阅以下链接：[https://reactrouter.com/en/main/components/outlet](https://reactrouter.com/en/main/components/outlet)。
- en: Next, we will learn about route parameters.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将学习路由参数。
- en: Using route parameters
  id: totrans-334
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用路由参数
- en: In this section, we will understand **route parameters** and how they are useful
    before using a route parameter in our app.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将了解**路由参数**及其在应用中使用路由参数之前如何有用。
- en: Understanding route parameters
  id: totrans-336
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解路由参数
- en: A route parameter is a segment in the path that varies. The value of the variable
    segment is available to components so that they can render something conditionally.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 路由参数是路径中的一个可变段。变量段的值对组件可用，以便它们可以条件性地渲染某些内容。
- en: 'In the following path, `1234` is the ID of a customer: `/customers/1234/`.'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下路径中，`1234` 是一个客户的 ID：`/customers/1234/`。
- en: 'This can be defined as a route parameter in a route as follows:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以如下定义为一个路由参数：
- en: '[PRE175]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE175]'
- en: A colon (`:`) followed by a name defines a route parameter. It is up to us to
    choose a parameter name that makes sense, so the `:id` segment in the path is
    the route parameter definition in the preceding route.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 一个冒号 (`:`) 后跟一个名称定义了一个路由参数。选择一个有意义的参数名称取决于我们，所以路径中的 `:id` 段是前面路由中的路由参数定义。
- en: 'Multiple route parameters can be used in a path as follows:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在路径中使用多个路由参数，如下所示：
- en: '[PRE176]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE176]'
- en: Route parameter names obviously have to be unique within a path.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 路由参数名称显然必须在路径中是唯一的。
- en: 'Route parameters are available to components using React Router’s `useParams`
    hook. The following code snippet is an example of how the `customerId` and `taskId`
    route parameter values could be obtained:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 路由参数通过 React Router 的 `useParams` 钩子对组件可用。以下代码片段是一个示例，说明了如何获取 `customerId` 和
    `taskId` 路由参数的值：
- en: '[PRE177]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE177]'
- en: 'As we can see from the code snippet, `useParams` has a generic argument that
    defines the type for the parameters. The `type` definition for the preceding code
    snippet is as follows:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 从代码片段中我们可以看到，`useParams` 有一个泛型参数，它定义了参数的类型。前面代码片段的 `type` 定义如下：
- en: '[PRE178]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE178]'
- en: It is important to note that the route parameter values are always strings because
    they are extracted from paths, which are strings.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，路由参数的值始终是字符串，因为它们是从路径中提取的，而路径是字符串。
- en: Now that we understand route parameters, we will use a route parameter in our
    app.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了路由参数，我们将在我们的应用中使用一个路由参数。
- en: Using route parameters in the app
  id: totrans-351
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在应用中使用路由参数
- en: 'We will add a product page to our app to show the description and price of
    each product. The path to the page will have a route parameter for the product
    ID. Carry out the following steps to implement the product page:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在我们的应用中添加一个产品页面来显示每个产品的描述和价格。页面的路径将包含一个用于产品 ID 的路由参数。执行以下步骤以实现产品页面：
- en: 'We will start by creating the product page. In the `src/pages` folder, create
    a file called `ProductPage.tsx` with the following `import` statements:'
  id: totrans-353
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先创建产品页面。在 `src/pages` 文件夹中，创建一个名为 `ProductPage.tsx` 的文件，并包含以下 `import` 语句：
- en: '[PRE179]'
  id: totrans-354
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE179]'
- en: '[PRE180]'
  id: totrans-355
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE180]'
- en: We have imported the `useParams` hook from React Router, which will allow us
    to get the value of an `id` route parameter – the product’s ID. We have also imported
    the `products` array.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已从 React Router 中导入了 `useParams` 钩子，这将允许我们获取 `id` 路由参数的值——即产品的 ID。我们还导入了 `products`
    数组。
- en: 'Start creating the `ProductPage` component as follows:'
  id: totrans-357
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式开始创建 `ProductPage` 组件：
- en: '[PRE181]'
  id: totrans-358
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE181]'
- en: '[PRE182]'
  id: totrans-359
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE182]'
- en: '[PRE183]'
  id: totrans-360
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE183]'
- en: '[PRE184]'
  id: totrans-361
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE184]'
- en: '[PRE185]'
  id: totrans-362
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE185]'
- en: '[PRE186]'
  id: totrans-363
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE186]'
- en: '[PRE187]'
  id: totrans-364
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE187]'
- en: '[PRE188]'
  id: totrans-365
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE188]'
- en: We use the `useParams` hook to obtain the `id` route parameter and turn it into
    an integer if it has a value.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `useParams` 钩子获取 `id` 路由参数，如果它有值，则将其转换为整数。
- en: 'Now, add a variable that is assigned to the product with the ID from the route
    parameter:'
  id: totrans-367
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，添加一个变量，将其分配给具有路由参数中 ID 的产品：
- en: '[PRE189]'
  id: totrans-368
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE189]'
- en: '[PRE190]'
  id: totrans-369
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE190]'
- en: '[PRE191]'
  id: totrans-370
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE191]'
- en: '[PRE192]'
  id: totrans-371
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE192]'
- en: '[PRE193]'
  id: totrans-372
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE193]'
- en: '[PRE194]'
  id: totrans-373
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE194]'
- en: '[PRE195]'
  id: totrans-374
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE195]'
- en: '[PRE196]'
  id: totrans-375
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE196]'
- en: 'Return the product information from the `product` variable in the JSX:'
  id: totrans-376
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 JSX 中从 `product` 变量返回产品信息：
- en: '[PRE197]'
  id: totrans-377
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE197]'
- en: '[PRE198]'
  id: totrans-378
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE198]'
- en: '[PRE199]'
  id: totrans-379
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE199]'
- en: '[PRE200]'
  id: totrans-380
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE200]'
- en: '[PRE201]'
  id: totrans-381
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE201]'
- en: '[PRE202]'
  id: totrans-382
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE202]'
- en: '[PRE203]'
  id: totrans-383
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE203]'
- en: '[PRE204]'
  id: totrans-384
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE204]'
- en: '[PRE205]'
  id: totrans-385
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE205]'
- en: '[PRE206]'
  id: totrans-386
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE206]'
- en: '[PRE207]'
  id: totrans-387
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE207]'
- en: '[PRE208]'
  id: totrans-388
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE208]'
- en: '[PRE209]'
  id: totrans-389
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE209]'
- en: '[PRE210]'
  id: totrans-390
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE210]'
- en: '[PRE211]'
  id: totrans-391
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE211]'
- en: '[PRE212]'
  id: totrans-392
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE212]'
- en: '[PRE213]'
  id: totrans-393
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE213]'
- en: '[PRE214]'
  id: totrans-394
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE214]'
- en: '[PRE215]'
  id: totrans-395
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE215]'
- en: '[PRE216]'
  id: totrans-396
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE216]'
- en: '[PRE217]'
  id: totrans-397
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE217]'
- en: '[PRE218]'
  id: totrans-398
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE218]'
- en: '[PRE219]'
  id: totrans-399
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE219]'
- en: '[PRE220]'
  id: totrans-400
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE220]'
- en: '[PRE221]'
  id: totrans-401
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE221]'
- en: '[PRE222]'
  id: totrans-402
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE222]'
- en: '[PRE223]'
  id: totrans-403
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE223]'
- en: '`Unknown product` is returned if the product can’t be found. Its name, description,
    and price are returned if the product is found. We use JavaScript’s `Intl.NumberFormat`
    function to nicely format the price.'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 如果找不到产品，将返回 `Unknown product`。如果找到产品，将返回其名称、描述和价格。我们使用 JavaScript 的 `Intl.NumberFormat`
    函数来格式化价格。
- en: That completes the product page.
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 这样就完成了产品页面的创建。
- en: 'The next task is to add the route for the product page. Open `Routes.tsx` and
    add an `import` statement for the product page:'
  id: totrans-406
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一个任务是添加产品页面的路由。打开 `Routes.tsx` 并为产品页面添加一个 `import` 语句：
- en: '[PRE224]'
  id: totrans-407
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE224]'
- en: 'Add the following highlighted route for the product page:'
  id: totrans-408
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为产品页面添加以下突出显示的路由：
- en: '[PRE225]'
  id: totrans-409
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE225]'
- en: '[PRE226]'
  id: totrans-410
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE226]'
- en: '[PRE227]'
  id: totrans-411
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE227]'
- en: '[PRE228]'
  id: totrans-412
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE228]'
- en: '[PRE229]'
  id: totrans-413
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE229]'
- en: '[PRE230]'
  id: totrans-414
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE230]'
- en: '[PRE231]'
  id: totrans-415
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE231]'
- en: '[PRE232]'
  id: totrans-416
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE232]'
- en: '[PRE233]'
  id: totrans-417
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE233]'
- en: '[PRE234]'
  id: totrans-418
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE234]'
- en: '[PRE235]'
  id: totrans-419
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE235]'
- en: '[PRE236]'
  id: totrans-420
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE236]'
- en: '[PRE237]'
  id: totrans-421
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE237]'
- en: '[PRE238]'
  id: totrans-422
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE238]'
- en: '[PRE239]'
  id: totrans-423
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE239]'
- en: '[PRE240]'
  id: totrans-424
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE240]'
- en: So, the `/products/2` path should return a product page for React Redux.
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`/products/2` 路径应该返回一个 React Redux 的产品页面。
- en: 'In the running app, change the browser URL to [http://localhost:3000/products/2](http://localhost:3000/products/2).
    The React Redux product should show up:'
  id: totrans-426
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在运行的应用中，将浏览器 URL 更改为 [http://localhost:3000/products/2](http://localhost:3000/products/2)。React
    Redux 产品应该显示出来：
- en: '![Figure 6.8 – The product page](img/B19051_06_08.jpg)'
  id: totrans-427
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.8 – 产品页面](img/B19051_06_08.jpg)'
- en: Figure 6.8 – The product page
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.8 – 产品页面
- en: 'The last task in this section is to turn the products list on the products
    list page into links that open the relevant product page. Open `ProductsPage.tsx`
    and import the `Link` component from React Router:'
  id: totrans-429
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 本节的最后一个任务是将在产品列表页面上的产品列表转换为打开相关产品页面的链接。打开 `ProductsPage.tsx` 并从 React Router
    中导入 `Link` 组件：
- en: '[PRE241]'
  id: totrans-430
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE241]'
- en: 'Add a `Link` component around the product name in the JSX:'
  id: totrans-431
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 JSX 中的产品名称周围添加一个 `Link` 组件：
- en: '[PRE242]'
  id: totrans-432
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE242]'
- en: '[PRE243]'
  id: totrans-433
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE243]'
- en: '[PRE244]'
  id: totrans-434
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE244]'
- en: '[PRE245]'
  id: totrans-435
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE245]'
- en: '[PRE246]'
  id: totrans-436
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE246]'
- en: '[PRE247]'
  id: totrans-437
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE247]'
- en: '[PRE248]'
  id: totrans-438
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE248]'
- en: '[PRE249]'
  id: totrans-439
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE249]'
- en: '[PRE250]'
  id: totrans-440
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE250]'
- en: '[PRE251]'
  id: totrans-441
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE251]'
- en: '[PRE252]'
  id: totrans-442
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE252]'
- en: '[PRE253]'
  id: totrans-443
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE253]'
- en: Link paths are relative to the component’s path. Given that the component path
    is `/products`, we set the link path to the product ID, which should match the
    `product` route.
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 链接路径相对于组件的路径。鉴于组件路径是 `/products`，我们将链接路径设置为产品 ID，它应该与 `product` 路由匹配。
- en: 'Return to the running app and go to the products list page. Hover over the
    products and you will now see that they are links:'
  id: totrans-445
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回正在运行的应用程序并转到产品列表页面。将鼠标悬停在产品上，你现在会看到它们是链接：
- en: '![Figure 6.9 – Product list links](img/B19051_06_09.jpg)'
  id: totrans-446
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.9 – 产品列表链接](img/B19051_06_09.jpg)'
- en: Figure 6.9 – Product list links
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.9 – 产品列表链接
- en: Click one of the products and the relevant product page will appear.
  id: totrans-448
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击其中一个产品，将显示相关产品页面。
- en: 'That completes this section on route parameters. Here’s a quick recap:'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 这完成了关于路由参数的这一部分。以下是一个快速回顾：
- en: A route parameter is a varying segment in a path defined using a colon followed
    by the parameter name
  id: totrans-450
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 路由参数是在路径中定义的可变段，使用冒号后跟参数名称表示
- en: Route parameters can be accessed using React Router’s `useParams` hook
  id: totrans-451
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以使用 React Router 的 `useParams` 钩子访问路由参数
- en: 'For more information on the `useParams` hook, see the following link in the
    React Router documentation: [https://reactrouter.com/en/main/hooks/use-params](https://reactrouter.com/en/main/hooks/use-params).'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 `useParams` 钩子的更多信息，请参阅 React Router 文档中的以下链接：[https://reactrouter.com/en/main/hooks/use-params](https://reactrouter.com/en/main/hooks/use-params)。
- en: Remember React Router’s error page we experienced in the *Declaring routes*
    section? Next, we will learn how to customize that error page.
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 记得我们在*声明路由*部分遇到的 React Router 的错误页面吗？接下来，我们将学习如何自定义该错误页面。
- en: Creating an error page
  id: totrans-454
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建错误页面
- en: In this section, we will understand how error pages work in React Router before
    implementing one in our app.
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将了解 React Router 中的错误页面是如何工作的，然后再在我们的应用程序中实现一个。
- en: Understanding error pages
  id: totrans-456
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解错误页面
- en: 'Currently, a React Router built-in error page is shown when an error occurs.
    We can check this by entering an invalid path in the running app:'
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，当发生错误时，会显示一个 React Router 内置的错误页面。我们可以通过在运行的应用程序中输入一个无效路径来检查这一点：
- en: '![Figure 6.10 – Standard React Router error page](img/B19051_06_10.jpg)'
  id: totrans-458
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.10 – 标准的 React Router 错误页面](img/B19051_06_10.jpg)'
- en: Figure 6.10 – Standard React Router error page
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.10 – 标准的 React Router 错误页面
- en: An error is raised because no matching routes are found in the router. The *404
    Not Found* message on the error page confirms this.
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 由于在路由器中找不到匹配的路由，因此引发了一个错误。错误页面上的 *404 未找到* 消息证实了这一点。
- en: This standard error page isn’t ideal because the information is targeted at
    a developer rather than a real user. Also, the app header isn’t shown, so users
    can’t easily navigate to a page that does exist.
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 这个标准的错误页面并不理想，因为信息是针对开发者而不是真实用户。此外，应用头部没有显示，因此用户无法轻松导航到确实存在的页面。
- en: 'As the error message suggests, an `errorElement` prop can be used on a route
    to override the standard error page. The following is an example of a custom error
    page defined for a customer’s route; if any error occurs on this route, the `CustomersErrorPage`
    component will be rendered:'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 正如错误消息所暗示的，可以在路由上使用 `errorElement` 属性来覆盖标准错误页面。以下是一个为客户的路由定义的自定义错误页面的示例；如果此路由上发生任何错误，将渲染
    `CustomersErrorPage` 组件：
- en: '[PRE254]'
  id: totrans-463
  prefs: []
  type: TYPE_PRE
  zh: '[PRE254]'
- en: Now that we have started understanding error pages in React Router, we will
    implement one in our app.
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经开始了解 React Router 中的错误页面，我们将在我们的应用程序中实现一个。
- en: Adding an error page
  id: totrans-465
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加错误页面
- en: 'Carry out the steps below to create an error page in the app:'
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以在应用程序中创建一个错误页面：
- en: 'First, create a new page called `ErrorPage.tsx` in the `src/pages` folder with
    the following content:'
  id: totrans-467
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在 `src/pages` 文件夹中创建一个名为 `ErrorPage.tsx` 的新页面，内容如下：
- en: '[PRE255]'
  id: totrans-468
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE255]'
- en: '[PRE256]'
  id: totrans-469
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE256]'
- en: '[PRE257]'
  id: totrans-470
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE257]'
- en: '[PRE258]'
  id: totrans-471
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE258]'
- en: '[PRE259]'
  id: totrans-472
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE259]'
- en: '[PRE260]'
  id: totrans-473
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE260]'
- en: '[PRE261]'
  id: totrans-474
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE261]'
- en: '[PRE262]'
  id: totrans-475
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE262]'
- en: '[PRE263]'
  id: totrans-476
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE263]'
- en: '[PRE264]'
  id: totrans-477
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE264]'
- en: '[PRE265]'
  id: totrans-478
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE265]'
- en: '[PRE266]'
  id: totrans-479
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE266]'
- en: '[PRE267]'
  id: totrans-480
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE267]'
- en: The component simply returns the app header with a *Sorry, an error has occurred*
    message underneath.
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 该组件简单地返回应用头部，并在下面显示一个 *抱歉，发生了错误* 的消息。
- en: 'Open `Routes.tsx` and add an `import` statement for the error page:'
  id: totrans-482
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `Routes.tsx` 并为错误页面添加一个 `import` 语句：
- en: '[PRE268]'
  id: totrans-483
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE268]'
- en: 'Specify the error page on the root route as follows:'
  id: totrans-484
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按如下方式在根路由上指定错误页面：
- en: '[PRE269]'
  id: totrans-485
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE269]'
- en: '[PRE270]'
  id: totrans-486
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE270]'
- en: '[PRE271]'
  id: totrans-487
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE271]'
- en: '[PRE272]'
  id: totrans-488
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE272]'
- en: '[PRE273]'
  id: totrans-489
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE273]'
- en: '[PRE274]'
  id: totrans-490
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE274]'
- en: '[PRE275]'
  id: totrans-491
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE275]'
- en: '[PRE276]'
  id: totrans-492
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE276]'
- en: Specifying the error page on the root route means that it will show if any routes
    have errors.
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: 在根路由上指定错误页面意味着如果有任何路由有错误，它将会显示。
- en: 'Switch back to the running app and change the browser URL to [http://localhost:3000/invalid](http://localhost:3000/invalid).
    The error page will be shown:'
  id: totrans-494
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换回运行中的应用，并将浏览器 URL 更改为 [http://localhost:3000/invalid](http://localhost:3000/invalid)。将显示错误页面：
- en: '![Figure 6.11 – Error page](img/B19051_06_11.jpg)'
  id: totrans-495
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.11 – 错误页面](img/B19051_06_11.jpg)'
- en: Figure 6.11 – Error page
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.11 – 错误页面
- en: 'This is a good start, but we can improve it by providing the user with more
    information, which we can get from React Router’s `useRouteError` hook. Open `ErrorPage.tsx`
    again and add an `import` statement for `useRouteError`:'
  id: totrans-497
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是一个好的开始，但我们可以通过提供用户更多从 React Router 的 `useRouteError` 钩子中获取的信息来改进它。再次打开 `ErrorPage.tsx`
    并添加 `useRouteError` 的 `import` 语句：
- en: '[PRE277]'
  id: totrans-498
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE277]'
- en: 'Assign the error to an `error` variable before the component’s `return` statement
    using `useRouteError`:'
  id: totrans-499
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在组件的 `return` 语句之前使用 `useRouteError` 将错误分配给 `error` 变量：
- en: '[PRE278]'
  id: totrans-500
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE278]'
- en: '[PRE279]'
  id: totrans-501
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE279]'
- en: '[PRE280]'
  id: totrans-502
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE280]'
- en: '[PRE281]'
  id: totrans-503
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE281]'
- en: 'The `error` variable is of the `unknown` type – you can verify this by hovering
    over it. We can use a type predicate function to allow TypeScript to narrow it
    to something we can work with. Add the following type predicate function beneath
    the component:'
  id: totrans-504
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`error` 变量是 `unknown` 类型 – 你可以通过悬停在其上验证这一点。我们可以使用类型谓词函数来允许 TypeScript 将其缩小到我们可以处理的内容。在组件下方添加以下类型谓词函数：'
- en: '[PRE282]'
  id: totrans-505
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE282]'
- en: '[PRE283]'
  id: totrans-506
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE283]'
- en: '[PRE284]'
  id: totrans-507
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE284]'
- en: The function checks whether the error object has a `statusText` property and
    if so, gives it a type with this property.
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数检查错误对象是否有 `statusText` 属性，如果有，则给它赋予具有此属性的类型。
- en: 'We can now use this function to render the information in the `statusText`
    property:'
  id: totrans-509
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在可以使用这个函数来渲染 `statusText` 属性中的信息：
- en: '[PRE285]'
  id: totrans-510
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE285]'
- en: '[PRE286]'
  id: totrans-511
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE286]'
- en: '[PRE287]'
  id: totrans-512
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE287]'
- en: '[PRE288]'
  id: totrans-513
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE288]'
- en: '[PRE289]'
  id: totrans-514
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE289]'
- en: '[PRE290]'
  id: totrans-515
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE290]'
- en: '[PRE291]'
  id: totrans-516
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE291]'
- en: '[PRE292]'
  id: totrans-517
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE292]'
- en: '[PRE293]'
  id: totrans-518
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE293]'
- en: '[PRE294]'
  id: totrans-519
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE294]'
- en: '[PRE295]'
  id: totrans-520
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE295]'
- en: '[PRE296]'
  id: totrans-521
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE296]'
- en: '[PRE297]'
  id: totrans-522
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE297]'
- en: '[PRE298]'
  id: totrans-523
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE298]'
- en: '[PRE299]'
  id: totrans-524
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE299]'
- en: 'In the running app, the information about the error appears on the error page
    as an invalid path:'
  id: totrans-525
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在运行中的应用中，错误信息以无效路径的形式显示在错误页面上：
- en: '![Figure 6.12 – Error page containing information about the error](img/B19051_06_12.jpg)'
  id: totrans-526
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.12 – 包含错误信息的错误页面](img/B19051_06_12.jpg)'
- en: Figure 6.12 – Error page containing information about the error
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.12 – 包含错误信息的错误页面](img/B19051_06_12.jpg)'
- en: That completes this section on error pages. The key point is to use an `errorElement`
    prop on a route to catch and display errors. Specific error information can be
    obtained using the `useRouteError` hook.
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: 这就完成了关于错误页面的本节内容。关键点是使用路由上的 `errorElement` 属性来捕获和显示错误。可以通过 `useRouteError` 钩子获取特定的错误信息。
- en: 'For more information on `errorElement`, see the following link: [https://reactrouter.com/en/main/route/error-element](https://reactrouter.com/en/main/route/error-element).
    For more information on the `useRouteError` hook, see the following link: [https://reactrouter.com/en/main/hooks/use-route-error](https://reactrouter.com/en/main/hooks/use-route-error).'
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于 `errorElement` 的信息，请参阅以下链接：[https://reactrouter.com/en/main/route/error-element](https://reactrouter.com/en/main/route/error-element)。更多关于
    `useRouteError` 钩子的信息，请参阅以下链接：[https://reactrouter.com/en/main/hooks/use-route-error](https://reactrouter.com/en/main/hooks/use-route-error)。
- en: Next, we will learn about index routes.
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将学习关于索引路由的内容。
- en: Using index routes
  id: totrans-531
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用索引路由
- en: Currently, the app’s root path displays nothing other than the header. In this
    section, we will learn about index routes to display a nice welcome message in
    the root path.
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，应用的根路径除了标题外不显示任何内容。在本节中，我们将学习索引路由，以便在根路径上显示一个友好的欢迎信息。
- en: Understanding index routes
  id: totrans-533
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解索引路由
- en: 'An `index` Boolean property, as in the following example:'
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 `index` 布尔属性，如下例所示：
- en: '[PRE300]'
  id: totrans-535
  prefs: []
  type: TYPE_PRE
  zh: '[PRE300]'
- en: Next, we will add a home page using an index route in our app.
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将使用索引路由在我们的应用中添加一个首页。
- en: Using an index route in the app
  id: totrans-537
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在应用中使用索引路由
- en: 'Carry out the following steps to add a home page using an index route in our
    app:'
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤，在我们的应用中使用索引路由添加一个首页：
- en: 'Create a new file in the `src/pages` folder called `HomePage.tsx` with the
    following content:'
  id: totrans-539
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `src/pages` 文件夹中创建一个名为 `HomePage.tsx` 的新文件，内容如下：
- en: '[PRE301]'
  id: totrans-540
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE301]'
- en: '[PRE302]'
  id: totrans-541
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE302]'
- en: '[PRE303]'
  id: totrans-542
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE303]'
- en: '[PRE304]'
  id: totrans-543
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE304]'
- en: '[PRE305]'
  id: totrans-544
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE305]'
- en: '[PRE306]'
  id: totrans-545
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE306]'
- en: '[PRE307]'
  id: totrans-546
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE307]'
- en: The page displays a welcome message.
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: 页面显示一个欢迎信息。
- en: 'Open `Routes.tsx` and import the home page we just created:'
  id: totrans-548
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `Routes.tsx` 并导入我们刚刚创建的首页：
- en: '[PRE308]'
  id: totrans-549
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE308]'
- en: 'Add the home page as an index page for the root path as follows:'
  id: totrans-550
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按如下方式将首页作为根路径的索引页面添加：
- en: '[PRE309]'
  id: totrans-551
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE309]'
- en: '[PRE310]'
  id: totrans-552
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE310]'
- en: '[PRE311]'
  id: totrans-553
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE311]'
- en: '[PRE312]'
  id: totrans-554
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE312]'
- en: '[PRE313]'
  id: totrans-555
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE313]'
- en: '[PRE314]'
  id: totrans-556
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE314]'
- en: '[PRE315]'
  id: totrans-557
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE315]'
- en: '[PRE316]'
  id: totrans-558
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE316]'
- en: '[PRE317]'
  id: totrans-559
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE317]'
- en: '[PRE318]'
  id: totrans-560
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE318]'
- en: '[PRE319]'
  id: totrans-561
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE319]'
- en: '[PRE320]'
  id: totrans-562
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE320]'
- en: '[PRE321]'
  id: totrans-563
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE321]'
- en: '[PRE322]'
  id: totrans-564
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE322]'
- en: 'We will add links to the logo and app title in the header to go to the home
    page. Open `Header.tsx` and import the `Link` component from React Router:'
  id: totrans-565
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将在标题中添加到标志和应用程序标题的链接，以便跳转到首页。打开 `Header.tsx` 并从 React Router 导入 `Link` 组件：
- en: '[PRE323]'
  id: totrans-566
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE323]'
- en: 'Wrap links to the root page around the logo and title as follows:'
  id: totrans-567
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按如下方式将根页面的链接包裹在标志和标题周围：
- en: '[PRE324]'
  id: totrans-568
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE324]'
- en: '[PRE325]'
  id: totrans-569
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE325]'
- en: '[PRE326]'
  id: totrans-570
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE326]'
- en: '[PRE327]'
  id: totrans-571
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE327]'
- en: '[PRE328]'
  id: totrans-572
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE328]'
- en: '[PRE329]'
  id: totrans-573
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE329]'
- en: '[PRE330]'
  id: totrans-574
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE330]'
- en: '[PRE331]'
  id: totrans-575
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE331]'
- en: '[PRE332]'
  id: totrans-576
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE332]'
- en: '[PRE333]'
  id: totrans-577
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE333]'
- en: '[PRE334]'
  id: totrans-578
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE334]'
- en: 'In the running app, click the app title to go to the root page, and you will
    see the welcome message displayed:'
  id: totrans-579
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在运行的应用程序中，点击应用程序标题将转到根页面，您将看到显示的欢迎信息：
- en: '![Figure 6.13 – Welcome page](img/B19051_06_13.jpg)'
  id: totrans-580
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.13 – 欢迎页面](img/B19051_06_13.jpg)'
- en: Figure 6.13 – Welcome page
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.13 – 欢迎页面
- en: That completes this section on index routes.
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: 这完成了关于索引路由本节的介绍。
- en: To recap, an index route is a default child route and is defined using an `index`
    Boolean property.
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾一下，索引路由是一个默认子路由，它使用一个 `index` 布尔属性定义。
- en: 'For more information on index routes, see the following link: [https://reactrouter.com/en/main/route/route#index](https://reactrouter.com/en/main/route/route#index).'
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于索引路由的信息，请参阅以下链接：[https://reactrouter.com/en/main/route/route#index](https://reactrouter.com/en/main/route/route#index)。
- en: Next, we will learn about search parameters.
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将学习搜索参数。
- en: Using search parameters
  id: totrans-586
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用搜索参数
- en: In this section, we will learn about search parameters in React Router and use
    them to implement a search feature in the app.
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习 React Router 中的搜索参数，并使用它们在应用程序中实现搜索功能。
- en: Understanding search parameters
  id: totrans-588
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解搜索参数
- en: '`?` character and separated by the `&` character. Search parameters are sometimes
    referred to as `type` and `when` are search parameters: `https://somewhere.com/?type=sometype&when=recent`.'
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: '`?` 字符和 `&` 字符分隔。搜索参数有时被称为 `type` 和 `when`，它们是搜索参数：`https://somewhere.com/?type=sometype&when=recent`。'
- en: 'React Router has a hook that returns functions for getting and setting search
    parameters called `useSearchParams`:'
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: React Router 有一个钩子，它返回用于获取和设置搜索参数的函数，称为 `useSearchParams`：
- en: '[PRE335]'
  id: totrans-591
  prefs: []
  type: TYPE_PRE
  zh: '[PRE335]'
- en: '`searchParams` is a JavaScript `URLSearchParams` object. There is a `get` method
    on `URLSearchParams`, which can be used to get the value of a search parameter.
    The following example gets the value of a search parameter called `type`:'
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
  zh: '`searchParams` 是一个 JavaScript 的 `URLSearchParams` 对象。在 `URLSearchParams` 上有一个
    `get` 方法，可以用来获取搜索参数的值。以下示例获取了一个名为 `type` 的搜索参数的值：'
- en: '[PRE336]'
  id: totrans-593
  prefs: []
  type: TYPE_PRE
  zh: '[PRE336]'
- en: '`setSearchParams` is a function used to set search parameter values. The function
    parameter is an object as in the following example:'
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
  zh: '`setSearchParams` 是一个用于设置搜索参数值的函数。函数参数是一个对象，如下例所示：'
- en: '[PRE337]'
  id: totrans-595
  prefs: []
  type: TYPE_PRE
  zh: '[PRE337]'
- en: Next, we will add search functionality to our app.
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将向我们的应用程序添加搜索功能。
- en: Adding search functionality to the app
  id: totrans-597
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向应用程序添加搜索功能
- en: 'We will add a search box to the header of the app. Submitting a search will
    take the user to the products list page and list a filtered set of products matching
    the search criteria. Carry out the following steps:'
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在应用程序的页眉中添加一个搜索框。提交搜索将用户带到产品列表页面，并列出符合搜索条件的产品集合。执行以下步骤：
- en: 'Open `Header.tsx` and add `useSearchParams` to the React Router import. Also,
    add an `import` statement for the `FormEvent` type from React:'
  id: totrans-599
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `Header.tsx` 文件，并将 `useSearchParams` 添加到 React Router 的导入中。同时，添加一个从 React
    导入 `FormEvent` 类型的 `import` 语句：
- en: '[PRE338]'
  id: totrans-600
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE338]'
- en: '[PRE339]'
  id: totrans-601
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE339]'
- en: '[PRE340]'
  id: totrans-602
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE340]'
- en: '[PRE341]'
  id: totrans-603
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE341]'
- en: '[PRE342]'
  id: totrans-604
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE342]'
- en: '[PRE343]'
  id: totrans-605
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE343]'
- en: 'Use the `useSearchParams` hook to destructure functions to get and set search
    parameters before the `return` statement:'
  id: totrans-606
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `useSearchParams` 钩子解构函数以在 `return` 语句之前获取和设置搜索参数：
- en: '[PRE344]'
  id: totrans-607
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE344]'
- en: '[PRE345]'
  id: totrans-608
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE345]'
- en: '[PRE346]'
  id: totrans-609
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE346]'
- en: '[PRE347]'
  id: totrans-610
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE347]'
- en: 'Add the following search form above the logo:'
  id: totrans-611
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在标志上方添加以下搜索表单：
- en: '[PRE348]'
  id: totrans-612
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE348]'
- en: '[PRE349]'
  id: totrans-613
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE349]'
- en: '[PRE350]'
  id: totrans-614
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE350]'
- en: '[PRE351]'
  id: totrans-615
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE351]'
- en: '[PRE352]'
  id: totrans-616
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE352]'
- en: '[PRE353]'
  id: totrans-617
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE353]'
- en: '[PRE354]'
  id: totrans-618
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE354]'
- en: '[PRE355]'
  id: totrans-619
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE355]'
- en: '[PRE356]'
  id: totrans-620
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE356]'
- en: '[PRE357]'
  id: totrans-621
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE357]'
- en: '[PRE358]'
  id: totrans-622
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE358]'
- en: '[PRE359]'
  id: totrans-623
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE359]'
- en: '[PRE360]'
  id: totrans-624
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE360]'
- en: '[PRE361]'
  id: totrans-625
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE361]'
- en: '[PRE362]'
  id: totrans-626
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE362]'
- en: '[PRE363]'
  id: totrans-627
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE363]'
- en: '[PRE364]'
  id: totrans-628
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE364]'
- en: '[PRE365]'
  id: totrans-629
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE365]'
- en: The form contains a search box with its default value as the value of a `search`
    parameter. `searchParams.get` returns `null` if the parameter doesn’t exist, so
    a `??`) is used to set the search box’s default value to an empty string in this
    case.
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
  zh: 表单包含一个搜索框，其默认值是 `search` 参数的值。`searchParams.get` 如果参数不存在，则返回 `null`，因此在这种情况下使用
    `??` 将搜索框的默认值设置为空字符串。
- en: Note
  id: totrans-631
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'The `??`) returns the right operand if the left operand is `null` or `undefined`;
    otherwise, it returns the left operand. For more information, see the following
    link: [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing).'
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
  zh: '`??` 运算符如果左操作数是 `null` 或 `undefined`，则返回右操作数；否则，返回左操作数。更多信息，请参阅以下链接：[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing)。'
- en: The form submission calls a `handleSearchSubmit` function, which we’ll implement
    in the next step.
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
  zh: 表单提交会调用一个 `handleSearchSubmit` 函数，我们将在下一步实现它。
- en: 'Add a `handleSearchSubmit` function as follows, just above the `return` statement:'
  id: totrans-634
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `return` 语句上方添加一个 `handleSearchSubmit` 函数，如下所示：
- en: '[PRE366]'
  id: totrans-635
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE366]'
- en: '[PRE367]'
  id: totrans-636
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE367]'
- en: '[PRE368]'
  id: totrans-637
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE368]'
- en: '[PRE369]'
  id: totrans-638
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE369]'
- en: '[PRE370]'
  id: totrans-639
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE370]'
- en: '[PRE371]'
  id: totrans-640
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE371]'
- en: '[PRE372]'
  id: totrans-641
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE372]'
- en: '[PRE373]'
  id: totrans-642
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE373]'
- en: '[PRE374]'
  id: totrans-643
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE374]'
- en: '[PRE375]'
  id: totrans-644
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE375]'
- en: The submit handler parameter is typed using `FormEvent`. `FormEvent` is a generic
    type that takes in the type of the element, which is `HTMLFormElement` for a form
    submit handler.
  id: totrans-645
  prefs: []
  type: TYPE_NORMAL
  zh: 提交处理程序参数使用 `FormEvent` 类型进行类型化。`FormEvent` 是一个泛型类型，它接受元素的类型，对于表单提交处理程序，这个类型是
    `HTMLFormElement`。
- en: We use the `preventDefault` method on submit handler parameters to prevent the
    form from being submitted to the server because we handle all the logic in this
    function.
  id: totrans-646
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在提交处理器的参数上使用 `preventDefault` 方法来防止表单被提交到服务器，因为我们在这个函数中处理所有逻辑。
- en: We use the JavaScript `FormData` interface to get the value of the search field.
    Then, we use a type assertion to set the type of the search field value to a string.
  id: totrans-647
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 JavaScript `FormData` 接口获取搜索字段的值。然后，我们使用类型断言将搜索字段值的类型设置为字符串。
- en: The last line of code in the submit handler sets the value of the search parameter.
    This will update the browser’s URL to have this search parameter.
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
  zh: 提交处理器的最后一行代码设置了搜索参数的值。这将更新浏览器的 URL 以包含此搜索参数。
- en: Note
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: We will learn a lot more about forms in React in [*Chapter 7*](B19051_07.xhtml#_idTextAnchor188),
    *Working* *with Forms*.
  id: totrans-650
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在 [*第 7 章*](B19051_07.xhtml#_idTextAnchor188) *与表单一起工作* 中学习更多关于 React 中表单的知识。
- en: 'Now, we need to filter the products list with the value of the search parameter.
    Open `ProductsPage.tsx` and add `useSearchParams` to the `import` statement:'
  id: totrans-651
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要根据搜索参数的值过滤产品列表。打开 `ProductsPage.tsx` 并将 `useSearchParams` 添加到 `import`
    语句中：
- en: '[PRE376]'
  id: totrans-652
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE376]'
- en: 'At the top of the `ProductsPage` component, destructure `searchParams` from
    `useSearchParams` as follows:'
  id: totrans-653
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `ProductsPage` 组件的顶部，按照以下方式从 `useSearchParams` 中解构 `searchParams`：
- en: '[PRE377]'
  id: totrans-654
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE377]'
- en: '[PRE378]'
  id: totrans-655
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE378]'
- en: '[PRE379]'
  id: totrans-656
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE379]'
- en: '[PRE380]'
  id: totrans-657
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE380]'
- en: 'Add the following function just before the `return` statement to filter the
    products list by the search value:'
  id: totrans-658
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `return` 语句之前添加以下函数以通过搜索值过滤产品列表：
- en: '[PRE381]'
  id: totrans-659
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE381]'
- en: '[PRE382]'
  id: totrans-660
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE382]'
- en: '[PRE383]'
  id: totrans-661
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE383]'
- en: '[PRE384]'
  id: totrans-662
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE384]'
- en: '[PRE385]'
  id: totrans-663
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE385]'
- en: '[PRE386]'
  id: totrans-664
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE386]'
- en: '[PRE387]'
  id: totrans-665
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE387]'
- en: '[PRE388]'
  id: totrans-666
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE388]'
- en: '[PRE389]'
  id: totrans-667
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE389]'
- en: '[PRE390]'
  id: totrans-668
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE390]'
- en: '[PRE391]'
  id: totrans-669
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE391]'
- en: '[PRE392]'
  id: totrans-670
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE392]'
- en: '[PRE393]'
  id: totrans-671
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE393]'
- en: '[PRE394]'
  id: totrans-672
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE394]'
- en: '[PRE395]'
  id: totrans-673
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE395]'
- en: The function starts by getting the value of the `search` parameter. The full
    product list is returned if there is no search parameter or if the value is an
    empty string. Otherwise, the product list is filtered using the array’s `filter`
    function, checking that the search value is contained within the product name
    irrespective of the case.
  id: totrans-674
  prefs: []
  type: TYPE_NORMAL
  zh: 函数首先获取 `search` 参数的值。如果没有搜索参数或值为空字符串，则返回完整的产品列表。否则，使用数组的 `filter` 函数过滤产品列表，检查搜索值是否包含在产品名称中，不考虑大小写。
- en: 'Use the function we just created in the JSX to output the filtered products.
    Replace the reference to `products` with a call to `getFilteredProducts` as follows:'
  id: totrans-675
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 JSX 中使用我们刚刚创建的函数来输出过滤后的产品。将 `products` 的引用替换为对 `getFilteredProducts` 的调用，如下所示：
- en: '[PRE396]'
  id: totrans-676
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE396]'
- en: '[PRE397]'
  id: totrans-677
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE397]'
- en: '[PRE398]'
  id: totrans-678
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE398]'
- en: '[PRE399]'
  id: totrans-679
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE399]'
- en: '[PRE400]'
  id: totrans-680
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE400]'
- en: '[PRE401]'
  id: totrans-681
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE401]'
- en: '[PRE402]'
  id: totrans-682
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE402]'
- en: '[PRE403]'
  id: totrans-683
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE403]'
- en: '[PRE404]'
  id: totrans-684
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE404]'
- en: '[PRE405]'
  id: totrans-685
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE405]'
- en: '[PRE406]'
  id: totrans-686
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE406]'
- en: '[PRE407]'
  id: totrans-687
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE407]'
- en: '[PRE408]'
  id: totrans-688
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE408]'
- en: '[PRE409]'
  id: totrans-689
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE409]'
- en: '[PRE410]'
  id: totrans-690
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE410]'
- en: In the running app, whilst on the home page, enter some search criteria in the
    search box and press *Enter* to submit the search.
  id: totrans-691
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在运行中的应用程序中，当在主页上时，在搜索框中输入一些搜索条件，然后按 *Enter* 键提交搜索。
- en: 'The search parameter is added to the URL in the browser. However, it doesn’t
    navigate to the products list page. Don’t worry about this because we’ll address
    this issue in the next section:'
  id: totrans-692
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索参数已添加到浏览器中的 URL。然而，它并没有导航到产品列表页面。不用担心这个问题，因为我们在下一节中会解决这个问题：
- en: '![Figure 6.14 – The search parameter added to the URL](img/B19051_06_14.jpg)'
  id: totrans-693
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.14 – 添加到 URL 中的搜索参数](img/B19051_06_14.jpg)'
- en: Figure 6.14 – The search parameter added to the URL
  id: totrans-694
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.14 – 添加到 URL 中的搜索参数
- en: The key point in this section is that the `useSearchParams` hook from React
    Router allows you to set and get URL search parameters. The parameters are also
    structured in a JavaScript `URLSearchParams` object.
  id: totrans-695
  prefs: []
  type: TYPE_NORMAL
  zh: 本节的关键点是，React Router 的 `useSearchParams` 钩子允许你设置和获取 URL 搜索参数。这些参数也以 JavaScript
    `URLSearchParams` 对象的结构进行组织。
- en: 'For more information on the `useSearchParams` hook, see the following link
    in the React Router documentation: [https://reactrouter.com/en/main/hooks/use-search-params](https://reactrouter.com/en/main/hooks/use-search-params).
    More information on `URLSearchParams` is available at [https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams).'
  id: totrans-696
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 `useSearchParams` 钩子的更多信息，请参阅 React Router 文档中的以下链接：[https://reactrouter.com/en/main/hooks/use-search-params](https://reactrouter.com/en/main/hooks/use-search-params)。有关
    `URLSearchParams` 的更多信息，请参阅 [https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams)。
- en: Next, we will explore another React Router hook that enables programmatic navigation.
  id: totrans-697
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将探索另一个允许程序化导航的 React Router 钩子。
- en: Navigating programmatically
  id: totrans-698
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 程序化导航
- en: 'React Router’s `Link` and `NavLink` components allow declarative navigation.
    However, sometimes we must navigate imperatively – in fact, this would be useful
    for the search feature in our app to navigate to the products list page. In this
    section, we will learn how to programmatically navigate with React Router and
    use this to complete the app’s search feature. Carry out the following steps:'
  id: totrans-699
  prefs: []
  type: TYPE_NORMAL
  zh: React Router 的 `Link` 和 `NavLink` 组件允许声明式导航。然而，有时我们必须强制导航 – 实际上，这对于我们应用程序中的搜索功能导航到产品列表页面非常有用。在本节中，我们将学习如何使用
    React Router 进行编程式导航，并使用它来完成应用程序的搜索功能。执行以下步骤：
- en: 'Open `Header.tsx` and add import the `useNavigate` hook from React Router:'
  id: totrans-700
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `Header.tsx` 并从 React Router 中导入 `useNavigate` 钩子：
- en: '[PRE411]'
  id: totrans-701
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE411]'
- en: '[PRE412]'
  id: totrans-702
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE412]'
- en: '[PRE413]'
  id: totrans-703
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE413]'
- en: '[PRE414]'
  id: totrans-704
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE414]'
- en: '[PRE415]'
  id: totrans-705
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE415]'
- en: '[PRE416]'
  id: totrans-706
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE416]'
- en: The `useNavigate` hook returns a function we can use to perform programmatic
    navigation.
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
  zh: '`useNavigate` 钩子返回一个我们可以用来执行编程式导航的函数。'
- en: 'Invoke `useNavigate` after the call to the `useSearchParams` hook. Assign the
    result to a variable called `navigate`:'
  id: totrans-708
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在调用 `useSearchParams` 钩子之后调用 `useNavigate`。将结果分配给名为 `navigate` 的变量：
- en: '[PRE417]'
  id: totrans-709
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE417]'
- en: '[PRE418]'
  id: totrans-710
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE418]'
- en: '[PRE419]'
  id: totrans-711
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE419]'
- en: '[PRE420]'
  id: totrans-712
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE420]'
- en: '[PRE421]'
  id: totrans-713
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE421]'
- en: The `navigate` variable is a function that can be used to navigate. It takes
    in an argument for the path to navigate to.
  id: totrans-714
  prefs: []
  type: TYPE_NORMAL
  zh: '`navigate` 变量是一个可以用于导航的函数。它接受一个参数，用于指定要导航到的路径。'
- en: 'In `handleSearchSubmit`, replace the `setSearchParams` call with a call to
    `navigate` to go to the products list page with the relevant search parameter:'
  id: totrans-715
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `handleSearchSubmit` 中，将 `setSearchParams` 调用替换为 `navigate` 调用，以便使用相关搜索参数跳转到产品列表页面：
- en: '[PRE422]'
  id: totrans-716
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE422]'
- en: '[PRE423]'
  id: totrans-717
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE423]'
- en: '[PRE424]'
  id: totrans-718
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE424]'
- en: '[PRE425]'
  id: totrans-719
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE425]'
- en: '[PRE426]'
  id: totrans-720
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE426]'
- en: '[PRE427]'
  id: totrans-721
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE427]'
- en: 'We no longer need `setSearchParams` because the setting of the search parameter
    is included in the navigation path, so remove this from the `useSearchParams`
    call:'
  id: totrans-722
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们不再需要 `setSearchParams`，因为搜索参数的设置已包含在导航路径中，因此从 `useSearchParams` 调用中删除此部分：
- en: '[PRE428]'
  id: totrans-723
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE428]'
- en: In the running app, enter some search criteria in the search box and press *Enter*
    to submit the search.
  id: totrans-724
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在运行的应用程序中，在搜索框中输入一些搜索条件，然后按 *Enter* 键提交搜索。
- en: 'The search parameter is used to navigate to the products list page. When the
    products list page appears, the correctly filtered products are shown:'
  id: totrans-725
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索参数用于跳转到产品列表页面。当产品列表页面出现时，将显示正确筛选的产品：
- en: '![Figure 6.15 – Products list page with filter products](img/B19051_06_15.jpg)'
  id: totrans-726
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.15 – 带筛选产品的产品列表页面](img/B19051_06_15.jpg)'
- en: Figure 6.15 – Products list page with filter products
  id: totrans-727
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.15 – 带筛选产品的产品列表页面
- en: So, programmatic navigation is achieved using the `useNavigate` hook. This returns
    a function that can navigate to the path passed into it.
  id: totrans-728
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，编程式导航是通过使用 `useNavigate` 钩子实现的。这返回一个函数，可以导航到传递给它的路径。
- en: 'For more information on the `useNavigate` hook, see the following link in the
    React Router documentation: [https://reactrouter.com/en/main/hooks/use-navigate](https://reactrouter.com/en/main/hooks/use-navigate).'
  id: totrans-729
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 `useNavigate` 钩子的更多信息，请参阅 React Router 文档中的以下链接：[https://reactrouter.com/en/main/hooks/use-navigate](https://reactrouter.com/en/main/hooks/use-navigate)。
- en: Next, we will refactor the search form’s navigation to use React Router’s `Form`
    component.
  id: totrans-730
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将重构搜索表单的导航，以使用 React Router 的 `Form` 组件。
- en: Using form navigation
  id: totrans-731
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用表单导航
- en: 'In this section, we will use React Router’s `Form` component to navigate to
    the products list page when the search criteria are submitted. `Form` is a wrapper
    around the HTML `form` element that handles the form submission on the client
    side. This will replace the use of `useNavigate` and simplify the code. Carry
    out the following steps:'
  id: totrans-732
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用 React Router 的 `Form` 组件在提交搜索条件时导航到产品列表页面。`Form` 是 HTML `form` 元素的包装器，它处理客户端的表单提交。这将取代
    `useNavigate` 的使用并简化代码。执行以下步骤：
- en: 'In `Header.tsx`, start by removing `useNavigate` from `import` for the React
    Router and replace it with the `Form` component:'
  id: totrans-733
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Header.tsx` 中，首先从 React Router 的 `import` 中删除 `useNavigate`，并用 `Form` 组件替换它：
- en: '[PRE429]'
  id: totrans-734
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE429]'
- en: '[PRE430]'
  id: totrans-735
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE430]'
- en: '[PRE431]'
  id: totrans-736
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE431]'
- en: '[PRE432]'
  id: totrans-737
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE432]'
- en: '[PRE433]'
  id: totrans-738
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE433]'
- en: '[PRE434]'
  id: totrans-739
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE434]'
- en: 'In the JSX, replace the `form` element with React Router’s `Form` component:'
  id: totrans-740
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 JSX 中，将 `form` 元素替换为 React Router 的 `Form` 组件：
- en: '[PRE435]'
  id: totrans-741
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE435]'
- en: '[PRE436]'
  id: totrans-742
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE436]'
- en: '[PRE437]'
  id: totrans-743
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE437]'
- en: '[PRE438]'
  id: totrans-744
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE438]'
- en: '[PRE439]'
  id: totrans-745
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE439]'
- en: '[PRE440]'
  id: totrans-746
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE440]'
- en: 'In the `Form` element in the JSX, remove the `onSubmit` handler. Replace this
    with the following `action` attribute so that the form is sent to the `products`
    route:'
  id: totrans-747
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 JSX 中的 `Form` 元素中，删除 `onSubmit` 处理程序。用以下 `action` 属性替换，以便将表单发送到 `products`
    路由：
- en: '[PRE441]'
  id: totrans-748
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE441]'
- en: '[PRE442]'
  id: totrans-749
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE442]'
- en: '[PRE443]'
  id: totrans-750
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE443]'
- en: '[PRE444]'
  id: totrans-751
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE444]'
- en: '[PRE445]'
  id: totrans-752
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE445]'
- en: '[PRE446]'
  id: totrans-753
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE446]'
- en: React Router’s form submission mimics how a native `form` element submits to
    a server path. However, React Router submits the form to a client-side route instead.
    In addition, `Form` mimics an HTTP `GET` request by default, so a `search` parameter
    will automatically be added to the URL.
  id: totrans-754
  prefs: []
  type: TYPE_NORMAL
  zh: React Router 的表单提交模仿了原生 `form` 元素提交到服务器路径的方式。然而，React Router 将表单提交到客户端路由。此外，`Form`
    默认模仿 HTTP `GET` 请求，因此 URL 将自动添加 `search` 参数。
- en: 'The remaining tasks are to remove the following code:'
  id: totrans-755
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 剩余的任务是删除以下代码：
- en: Remove the React import statement because `FormEvent` is redundant now
  id: totrans-756
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除React导入语句，因为`FormEvent`现在是多余的
- en: Remove the call to `useNavigate` because this is no longer required
  id: totrans-757
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除对`useNavigate`的调用，因为现在不再需要它了
- en: Remove the `handleSearchSubmit` function because this is no longer required
  id: totrans-758
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除`handleSearchSubmit`函数，因为现在不再需要它了
- en: In the running app, enter some search criteria in the search box and press *Enter*
    to submit the search. This will work as it did before.
  id: totrans-759
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在运行中的应用中，在搜索框中输入一些搜索条件，然后按*Enter*键提交搜索。这将像之前一样工作。
- en: That has simplified the code quite a bit!
  id: totrans-760
  prefs: []
  type: TYPE_NORMAL
  zh: 这大大简化了代码！
- en: We will learn more about React Router’s `Form` component in [*Chapter 7*](B19051_07.xhtml#_idTextAnchor188)
    and [*Chapter 9*](B19051_09.xhtml#_idTextAnchor220). The key takeaway from this
    section is that `Form` wraps the HTML `form` element, handling form submission
    on the client.
  id: totrans-761
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[*第7章*](B19051_07.xhtml#_idTextAnchor188)和[*第9章*](B19051_09.xhtml#_idTextAnchor220)中学习更多关于React
    Router的`Form`组件。本节的关键要点是`Form`包装了HTML的`form`元素，并在客户端处理表单提交。
- en: 'For more information on `Form`, see the following link in the React Router
    documentation: [https://reactrouter.com/en/main/components/form](https://reactrouter.com/en/main/components/form).'
  id: totrans-762
  prefs: []
  type: TYPE_NORMAL
  zh: 关于`Form`的更多信息，请参阅React Router文档中的以下链接：[https://reactrouter.com/en/main/components/form](https://reactrouter.com/en/main/components/form)。
- en: Next, we will learn about a type of performance optimization that can be applied
    to large pages in the app.
  id: totrans-763
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将学习一种可以应用于应用中大型页面的性能优化类型。
- en: Implementing lazy loading
  id: totrans-764
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现懒加载
- en: Currently, all the JavaScript for our app is loaded when the app first loads.
    This can be problematic in large apps. In this section, we will learn how to only
    load the JavaScript for components when their route becomes active. This pattern
    is often referred to as **lazy loading**. In our app, we will create a lazily
    loaded admin page.
  id: totrans-765
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们应用中的所有JavaScript代码都是在应用首次加载时一起加载的。这在大型应用中可能会出现问题。在本节中，我们将学习如何在组件的路由变为活动状态时才加载其JavaScript代码。这种模式通常被称为**懒加载**。在我们的应用中，我们将创建一个懒加载的管理员页面。
- en: Understanding React lazy loading
  id: totrans-766
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解React懒加载
- en: By default, all React components are bundled together and loaded when the app
    first loads. This is inefficient for large apps – particularly when a user does
    not use many components. Lazily loading React components addresses this issue
    because lazy components aren’t included in the initial bundle that is loaded;
    instead, their JavaScript is fetched and loaded when rendered.
  id: totrans-767
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，所有React组件都会被打包在一起，并在应用首次加载时一起加载。这对大型应用来说效率不高——尤其是当用户不使用很多组件时。懒加载React组件解决了这个问题，因为懒加载组件不包括在初始加载的包中；相反，它们的JavaScript代码在渲染时才会被获取和加载。
- en: 'There are two main steps to lazy loading React components. First, the component
    must be dynamically imported as follows:'
  id: totrans-768
  prefs: []
  type: TYPE_NORMAL
  zh: 懒加载React组件主要有两个步骤。首先，组件必须按照以下方式动态导入：
- en: '[PRE447]'
  id: totrans-769
  prefs: []
  type: TYPE_PRE
  zh: '[PRE447]'
- en: In the code block, `lazy` is a function from React that enables the imported
    component to be lazily loaded. Note that the lazy page must be a default export
    – lazy loading doesn’t work with named exports.
  id: totrans-770
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码块中，`lazy`是React中的一个函数，它使得导入的组件可以懒加载。请注意，懒加载的页面必须是默认导出——懒加载不适用于命名导出。
- en: Webpack can then split the JavaScript for `LazyPage` into a separate bundle.
    Note that this separate bundle will include any child components of `LazyPage`.
  id: totrans-771
  prefs: []
  type: TYPE_NORMAL
  zh: Webpack可以将`LazyPage`的JavaScript代码分割成单独的包。请注意，这个单独的包将包括`LazyPage`的任何子组件。
- en: 'The second step is to render the lazy component inside React’s `Suspense` component
    as follows:'
  id: totrans-772
  prefs: []
  type: TYPE_NORMAL
  zh: 第二步是在React的`Suspense`组件内部按照以下方式渲染懒加载组件：
- en: '[PRE448]'
  id: totrans-773
  prefs: []
  type: TYPE_PRE
  zh: '[PRE448]'
- en: The `Suspense` component’s `fallback` prop can be set to an element to render
    while the lazy page is being fetched.
  id: totrans-774
  prefs: []
  type: TYPE_NORMAL
  zh: '`Suspense`组件的`fallback`属性可以被设置为在懒加载页面正在获取时渲染的元素。'
- en: Next, we will create a lazy admin page in our app.
  id: totrans-775
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将在我们的应用中创建一个懒加载管理员页面。
- en: Adding a lazy admin page to the app
  id: totrans-776
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将懒加载管理员页面添加到应用中
- en: 'Carry out the following steps to add a lazy admin page to our app:'
  id: totrans-777
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以将懒加载管理员页面添加到我们的应用中：
- en: 'Create a file called `AdminPage.tsx` in the `src/pages` folder with the following
    content:'
  id: totrans-778
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/pages`文件夹中创建一个名为`AdminPage.tsx`的文件，并包含以下内容：
- en: '[PRE449]'
  id: totrans-779
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE449]'
- en: '[PRE450]'
  id: totrans-780
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE450]'
- en: '[PRE451]'
  id: totrans-781
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE451]'
- en: '[PRE452]'
  id: totrans-782
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE452]'
- en: '[PRE453]'
  id: totrans-783
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE453]'
- en: '[PRE454]'
  id: totrans-784
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE454]'
- en: '[PRE455]'
  id: totrans-785
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE455]'
- en: '[PRE456]'
  id: totrans-786
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE456]'
- en: '[PRE457]'
  id: totrans-787
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE457]'
- en: '[PRE458]'
  id: totrans-788
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE458]'
- en: The page is very small, so it is not a great use case for lazy loading. However,
    its simplicity will allow us to focus on how to implement lazy loading.
  id: totrans-789
  prefs: []
  type: TYPE_NORMAL
  zh: 该页面非常小，因此它不是懒加载的一个很好的用例。然而，它的简单性将使我们能够专注于如何实现懒加载。
- en: 'Open `Routes.tsx` and import `lazy` and `Suspense` from React:'
  id: totrans-790
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Routes.tsx`并从React中导入`lazy`和`Suspense`：
- en: '[PRE459]'
  id: totrans-791
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE459]'
- en: 'Import the admin page as follows (it is important that this comes after all
    the other `import` statements):'
  id: totrans-792
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按如下方式导入管理员页面（这一点很重要，即它必须出现在所有其他`import`语句之后）：
- en: '[PRE460]'
  id: totrans-793
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE460]'
- en: 'Add the `admin` route as follows:'
  id: totrans-794
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按如下方式添加`admin`路由：
- en: '[PRE461]'
  id: totrans-795
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE461]'
- en: '[PRE462]'
  id: totrans-796
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE462]'
- en: '[PRE463]'
  id: totrans-797
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE463]'
- en: '[PRE464]'
  id: totrans-798
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE464]'
- en: '[PRE465]'
  id: totrans-799
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE465]'
- en: '[PRE466]'
  id: totrans-800
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE466]'
- en: '[PRE467]'
  id: totrans-801
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE467]'
- en: '[PRE468]'
  id: totrans-802
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE468]'
- en: '[PRE469]'
  id: totrans-803
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE469]'
- en: '[PRE470]'
  id: totrans-804
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE470]'
- en: '[PRE471]'
  id: totrans-805
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE471]'
- en: '[PRE472]'
  id: totrans-806
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE472]'
- en: '[PRE473]'
  id: totrans-807
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE473]'
- en: '[PRE474]'
  id: totrans-808
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE474]'
- en: '[PRE475]'
  id: totrans-809
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE475]'
- en: '[PRE476]'
  id: totrans-810
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE476]'
- en: '[PRE477]'
  id: totrans-811
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE477]'
- en: '[PRE478]'
  id: totrans-812
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE478]'
- en: '[PRE479]'
  id: totrans-813
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE479]'
- en: '[PRE480]'
  id: totrans-814
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE480]'
- en: '[PRE481]'
  id: totrans-815
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE481]'
- en: '[PRE482]'
  id: totrans-816
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE482]'
- en: '[PRE483]'
  id: totrans-817
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE483]'
- en: '[PRE484]'
  id: totrans-818
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE484]'
- en: The path to the admin page is `/admin`. A loading indicator will render as the
    admin page’s JavaScript is fetched.
  id: totrans-819
  prefs: []
  type: TYPE_NORMAL
  zh: 管理员页面的路径是`/admin`。当管理员页面的JavaScript被获取时，将渲染一个加载指示器。
- en: 'Open `Header.tsx` and add a link to the admin page after the `Products` link
    as follows:'
  id: totrans-820
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Header.tsx`并在`Products`链接之后添加管理员页面的链接，如下所示：
- en: '[PRE485]'
  id: totrans-821
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE485]'
- en: '[PRE486]'
  id: totrans-822
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE486]'
- en: '[PRE487]'
  id: totrans-823
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE487]'
- en: '[PRE488]'
  id: totrans-824
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE488]'
- en: '[PRE489]'
  id: totrans-825
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE489]'
- en: '[PRE490]'
  id: totrans-826
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE490]'
- en: '[PRE491]'
  id: totrans-827
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE491]'
- en: '[PRE492]'
  id: totrans-828
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE492]'
- en: '[PRE493]'
  id: totrans-829
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE493]'
- en: '[PRE494]'
  id: totrans-830
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE494]'
- en: '[PRE495]'
  id: totrans-831
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE495]'
- en: '[PRE496]'
  id: totrans-832
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE496]'
- en: '[PRE497]'
  id: totrans-833
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE497]'
- en: '[PRE498]'
  id: totrans-834
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE498]'
- en: '[PRE499]'
  id: totrans-835
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE499]'
- en: 'In the running app, open the browser DevTools and go to the **Network** tab
    and clear out any existing requests. Slow down the connection by selecting **Slow
    3G** from the **No** **throttling** menu:'
  id: totrans-836
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在跑步应用中，打开浏览器开发者工具并转到**网络**标签，清除任何现有请求。通过从**无** **限制**菜单中选择**慢3G**来降低连接速度：
- en: '![Figure 6.16 – Setting a slow connection](img/B19051_06_16.jpg)'
  id: totrans-837
  prefs: []
  type: TYPE_IMG
  zh: '![图6.16 – 设置慢速连接](img/B19051_06_16.jpg)'
- en: Figure 6.16 – Setting a slow connection
  id: totrans-838
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.16 – 设置慢速连接
- en: 'Now, click on the **Admin** link in the header. The loading indicator appears
    because the JavaScript for the admin page is being downloaded:'
  id: totrans-839
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击页眉中的**管理员**链接。加载指示器出现，因为管理员页面的JavaScript正在下载：
- en: '![Figure 6.17 – The loading indicator](img/B19051_06_17.jpg)'
  id: totrans-840
  prefs: []
  type: TYPE_IMG
  zh: '![图6.17 – 加载指示器](img/B19051_06_17.jpg)'
- en: Figure 6.17 – The loading indicator
  id: totrans-841
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.17 – 加载指示器
- en: 'After the admin page has been downloaded, it will render in the browser. If
    you look at the **Network** tab in DevTools, you will see confirmation of the
    admin page bundle being lazily loaded:'
  id: totrans-842
  prefs: []
  type: TYPE_NORMAL
  zh: 在管理员页面下载完成后，它将在浏览器中渲染。如果你查看DevTools中的**网络**标签，你会看到管理员页面包正在懒加载的确认信息：
- en: '![Figure 6.18 – Admin page download](img/B19051_06_18.jpg)'
  id: totrans-843
  prefs: []
  type: TYPE_IMG
  zh: '![图6.18 – 管理员页面下载](img/B19051_06_18.jpg)'
- en: Figure 6.18 – Admin page download
  id: totrans-844
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.18 – 管理员页面下载
- en: That completes this section on lazily loading React components. In summary,
    lazily loading React components is achieved by dynamically importing the component
    file and rendering the component inside a `Suspense` component.
  id: totrans-845
  prefs: []
  type: TYPE_NORMAL
  zh: 这完成了关于懒加载React组件的部分。总之，通过动态导入组件文件并在`Suspense`组件内渲染组件来实现React组件的懒加载。
- en: 'For more information on lazily loading React components, see the following
    link in the React documentation: [https://reactjs.org/docs/code-splitting.html](https://reactjs.org/docs/code-splitting.html).'
  id: totrans-846
  prefs: []
  type: TYPE_NORMAL
  zh: 关于懒加载React组件的更多信息，请参阅React文档中的以下链接：[https://reactjs.org/docs/code-splitting.html](https://reactjs.org/docs/code-splitting.html)。
- en: That also completes this chapter. Next, we will recap what we have learned about
    React Router.
  id: totrans-847
  prefs: []
  type: TYPE_NORMAL
  zh: 这也完成了本章的内容。接下来，我们将回顾我们关于React Router所学的知识。
- en: Summary
  id: totrans-848
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: React Router gives us a comprehensive set of components and hooks for managing
    the navigation between pages in our app. We used `createBrowserRouter` to define
    all our web app’s routes. A route contains a path and a component to render when
    the path matches the browser URL. We used an `errorElement` prop for a route to
    render a custom error page in our app.
  id: totrans-849
  prefs: []
  type: TYPE_NORMAL
  zh: React Router为我们提供了一套全面的组件和钩子，用于管理我们应用中页面之间的导航。我们使用`createBrowserRouter`来定义我们所有Web应用的路线。一个路由包含一个路径和一个组件，当路径与浏览器URL匹配时，将渲染该组件。我们使用`errorElement`属性为路由渲染一个自定义错误页面。
- en: We used nested routes to allow the `App` component to render the app shell and
    page components within it. We used React Router’s `Outlet` component inside the
    `App` component to render page content. We also used an index route on the root
    route to render a welcome message.
  id: totrans-850
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用嵌套路由允许`App`组件渲染应用外壳和其中的页面组件。我们在`App`组件内部使用React Router的`Outlet`组件来渲染页面内容。我们还使用根路由上的索引路由来渲染欢迎信息。
- en: We used React Router’s `NavLink` component to render navigation links that are
    highlighted when their route is active. The `Link` component is great for other
    links that have static styling requirements – we used this for product links on
    the product list. We used React Router’s `Form` component to navigate to the products
    list page when the search form is submitted.
  id: totrans-851
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用React Router的`NavLink`组件来渲染导航链接，当它们的路由处于活动状态时会被突出显示。`Link`组件非常适合具有静态样式要求的其他链接
    – 我们将其用于产品列表上的产品链接。我们使用React Router的`Form`组件在提交搜索表单时导航到产品列表页面。
- en: Route parameters and search parameters allow parameters to be passed into components
    so that they can render dynamic content. `useParams` gives access to route parameters,
    and `useSearchParams` provides access to search parameters.
  id: totrans-852
  prefs: []
  type: TYPE_NORMAL
  zh: 路由参数和查询参数允许将参数传递到组件中，以便它们可以渲染动态内容。`useParams`提供了访问路由参数的权限，而`useSearchParams`提供了访问查询参数的权限。
- en: React components can be lazily loaded to increase startup performance. This
    is achieved by dynamically importing the component file and rendering the component
    inside a `Suspense` component.
  id: totrans-853
  prefs: []
  type: TYPE_NORMAL
  zh: React 组件可以懒加载以提高启动性能。这是通过动态导入组件文件并在 `Suspense` 组件内部渲染组件来实现的。
- en: In the next chapter, we will learn all about forms in React.
  id: totrans-854
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习所有关于 React 中的表单知识。
- en: Questions
  id: totrans-855
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'Let’s test our knowledge of React Router with the following questions:'
  id: totrans-856
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过以下问题来测试我们对 React Router 的知识：
- en: 'We have declared the following routes in an app:'
  id: totrans-857
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在应用中声明了以下路由：
- en: '[PRE500]'
  id: totrans-858
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE500]'
- en: '[PRE501]'
  id: totrans-859
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE501]'
- en: '[PRE502]'
  id: totrans-860
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE502]'
- en: '[PRE503]'
  id: totrans-861
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE503]'
- en: '[PRE504]'
  id: totrans-862
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE504]'
- en: '[PRE505]'
  id: totrans-863
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE505]'
- en: '[PRE506]'
  id: totrans-864
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE506]'
- en: '[PRE507]'
  id: totrans-865
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE507]'
- en: '[PRE508]'
  id: totrans-866
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE508]'
- en: '[PRE509]'
  id: totrans-867
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE509]'
- en: What component will render when the path is `/customers`?
  id: totrans-868
  prefs: []
  type: TYPE_NORMAL
  zh: 当路径是 `/customers` 时，哪个组件将会渲染？
- en: What component will render when the path is `/products`?
  id: totrans-869
  prefs: []
  type: TYPE_NORMAL
  zh: 当路径是 `/products` 时，哪个组件将会渲染？
- en: What would the path be in a route that could handle a `/customers/37` path?
    `37` is a customer ID and could vary.
  id: totrans-870
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在一个可以处理 `/customers/37` 路径的路由中，路径会是什么？`37` 是一个客户 ID，可能会变化。
- en: 'The routes for a `settings` page are defined as follows:'
  id: totrans-871
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个 `settings` 页面的路由如下定义：
- en: '[PRE510]'
  id: totrans-872
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE510]'
- en: '[PRE511]'
  id: totrans-873
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE511]'
- en: '[PRE512]'
  id: totrans-874
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE512]'
- en: '[PRE513]'
  id: totrans-875
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE513]'
- en: '[PRE514]'
  id: totrans-876
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE514]'
- en: '[PRE515]'
  id: totrans-877
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE515]'
- en: '[PRE516]'
  id: totrans-878
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE516]'
- en: '[PRE517]'
  id: totrans-879
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE517]'
- en: The settings page has `/settings/general` and `/settings/dangerous`, respectively.
    However, when these paths are requested, no tab content is shown on the settings
    page – so, what could we have forgotten to add in the `SettingsPage` component?
  id: totrans-880
  prefs: []
  type: TYPE_NORMAL
  zh: 设置页面有 `/settings/general` 和 `/settings/dangerous`，分别。然而，当请求这些路径时，设置页面没有显示任何标签内容——那么，我们在
    `SettingsPage` 组件中可能遗漏了什么？
- en: We are implementing a navigation bar in an app. When clicking on a navigation
    item, the app should navigate to the relevant page. Which React Router component
    should we use to render the navigational items? `Link` or `NavLink`?
  id: totrans-881
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们正在实现一个应用中的导航栏。当点击导航项时，应用应该导航到相关页面。我们应该使用哪个 React Router 组件来渲染导航项？`Link` 还是
    `NavLink`？
- en: 'A route is defined as follows:'
  id: totrans-882
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 路由如下定义：
- en: '[PRE518]'
  id: totrans-883
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE518]'
- en: 'Inside the `UserPage` component, the following code is used to get the user
    `id` information from the browser URL:'
  id: totrans-884
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `UserPage` 组件内部，以下代码用于从浏览器 URL 获取用户 `id` 信息：
- en: '[PRE519]'
  id: totrans-885
  prefs: []
  type: TYPE_PRE
  zh: '[PRE519]'
- en: However, `id` is always `undefined`. What is the problem?
  id: totrans-886
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，`id` 总是 `undefined`。问题是什么？
- en: 'The following URL contains an example of a search parameter on a `customers`
    page:'
  id: totrans-887
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下 URL 包含一个在 `customers` 页面上的搜索参数示例：
- en: '`/``customers/?search=cool company`'
  id: totrans-888
  prefs: []
  type: TYPE_NORMAL
  zh: '`/``customers/?search=cool company`'
- en: 'However, an error occurs in the following implementation:'
  id: totrans-889
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，以下实现中出现了错误：
- en: '[PRE520]'
  id: totrans-890
  prefs: []
  type: TYPE_PRE
  zh: '[PRE520]'
- en: What is the problem?
  id: totrans-891
  prefs: []
  type: TYPE_NORMAL
  zh: 问题是什么？
- en: 'A React component is lazily loaded as follows:'
  id: totrans-892
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个 React 组件如下所示进行懒加载：
- en: '[PRE521]'
  id: totrans-893
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE521]'
- en: '[PRE522]'
  id: totrans-894
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE522]'
- en: '[PRE523]'
  id: totrans-895
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE523]'
- en: '[PRE524]'
  id: totrans-896
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE524]'
- en: '[PRE525]'
  id: totrans-897
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE525]'
- en: '[PRE526]'
  id: totrans-898
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE526]'
- en: '[PRE527]'
  id: totrans-899
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE527]'
- en: '[PRE528]'
  id: totrans-900
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE528]'
- en: '[PRE529]'
  id: totrans-901
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE529]'
- en: However, React throws an error. What is the problem?
  id: totrans-902
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，React 抛出了一个错误。问题是什么？
- en: Answers
  id: totrans-903
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 答案
- en: '`CustomersPage` will render when the path is `/customers`.'
  id: totrans-904
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当路径是 `/customers` 时，`CustomersPage` 将会渲染。
- en: '`ErrorPage` will render when the path is `/products`.'
  id: totrans-905
  prefs: []
  type: TYPE_NORMAL
  zh: 当路径是 `/products` 时，`ErrorPage` 将会渲染。
- en: The path could be `path="customers/:customerId"`.
  id: totrans-906
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 路径可以是 `path="customers/:customerId"`。
- en: It is likely that the `Outlet` component has not been added to `SettingsPage`.
  id: totrans-907
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 很可能是因为 `Outlet` 组件没有被添加到 `SettingsPage` 中。
- en: Both will work, but `NavLink` is better because it enables items to be styled
    when active.
  id: totrans-908
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这两个都可以工作，但 `NavLink` 更好，因为它允许在活动状态下对项目进行样式化。
- en: 'The route parameter referenced should be `userId`:'
  id: totrans-909
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 引用的路由参数应该是 `userId`：
- en: '[PRE530]'
  id: totrans-910
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE530]'
- en: '[PRE531]'
  id: totrans-911
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE531]'
- en: 'Hooks must be called at the top level of function components. Also, the `useSearchParams`
    hook doesn’t directly have a `get` method. Here’s the corrected code:'
  id: totrans-912
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 钩子必须在函数组件的最顶层调用。此外，`useSearchParams` 钩子没有直接的 `get` 方法。以下是修正后的代码：
- en: '[PRE532]'
  id: totrans-913
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE532]'
- en: '[PRE533]'
  id: totrans-914
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE533]'
- en: '[PRE534]'
  id: totrans-915
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE534]'
- en: '[PRE535]'
  id: totrans-916
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE535]'
- en: '[PRE536]'
  id: totrans-917
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE536]'
- en: 'The lazy component must be nested inside a `Suspense` component as follows:'
  id: totrans-918
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 懒加载的组件必须嵌套在 `Suspense` 组件内部，如下所示：
- en: '[PRE537]'
  id: totrans-919
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE537]'
- en: '[PRE538]'
  id: totrans-920
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE538]'
- en: '[PRE539]'
  id: totrans-921
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE539]'
- en: '[PRE540]'
  id: totrans-922
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE540]'
- en: '[PRE541]'
  id: totrans-923
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE541]'
- en: '[PRE542]'
  id: totrans-924
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE542]'
- en: '[PRE543]'
  id: totrans-925
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE543]'
- en: '[PRE544]'
  id: totrans-926
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE544]'
