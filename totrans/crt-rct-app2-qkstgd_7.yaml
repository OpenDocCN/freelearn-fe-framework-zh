- en: Building Progressive Web Applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The beauty of building a modern web application is being able to take advantage
    of functionalities such as a **Progressive Web App** (**PWA**)! But they can be
    a little complicated to work with. As always, the Create React App project makes
    a lot of this easier for us, but this time carries some significant caveats that
    we'll need to think about.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Examining PWAs and what they add
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning how to configure our Create React App project into a custom PWA
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modifying and tuning the `manifest` file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring service workers, their life cycle, and how to use them with Create
    React App
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring the caveats of using Create React App to build a PWA
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding and building PWAs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PWAs are one of those features that sounds amazingly cool but it's surprisingly
    complicated to understand the when, why, and how of building them. Let's spend
    a little bit of time demystifying them and helping you understand why they are
    such a powerful (and appreciated) inclusion in our Create React App projects and
    how we can get started using them!
  prefs: []
  type: TYPE_NORMAL
- en: What is a PWA?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's talk a little bit about what a PWA is, because there is unfortunately
    a lot of misinformation and confusion about precisely what a PWA does!
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s a short, maybe slightly unhelpful, version of what a PWA does; it''s
    simply a website that does the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Only uses `HTTPS`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds a JSON manifest (a web app manifest) file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Has a Service Worker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While yes, a PWA must have those behaviors, it's still difficult to understand
    what a PWA is or what it gives you in the long run. For example, does that tell
    you anything about what it does in different browsers? With different window sizes?
    What about how accessible it is, or how it functions when the internet is slow
    or non-existent?
  prefs: []
  type: TYPE_NORMAL
- en: How do we define a PWA?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A PWA, for us, is a React application that would be installable/runnable on
    a mobile device or desktop. Essentially, it''s just your app, but with capabilities
    that make it a little more advanced, a little more effective, and a little more
    resilient to poor/no internet. A PWA accomplishes these via a few tenets, tricks,
    and requirements that we''d want to follow:'
  prefs: []
  type: TYPE_NORMAL
- en: The app must be usable by mobile and desktop-users alike
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The app must operate over `HTTPS`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The app must implement a web app JSON `manifest` file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The app must implement a Service Worker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, the first one is a design question. Did you make your design responsive?
    If so, congratulations, you built the first step toward having a PWA! The next
    one is also more of an implementation question that''s maybe not as relevant to
    us here: when you deploy your app to production, did you make it `HTTPS` only?
    I hope the answer to this is yes, of course, but it''s still a good question to
    ask!'
  prefs: []
  type: TYPE_NORMAL
- en: The next two, though, are things we can do as part of our Create React App project,
    and we'll make those the focus of this chapter!
  prefs: []
  type: TYPE_NORMAL
- en: Building a PWA in Create React App
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If we want to start building out a PWA in Create React App, as mentioned earlier,
    we need to start implementing against those two requirements that we laid out.
    We''ll start off with the simplest problem to solve: implementing a `manifest`
    file for our PWA!'
  prefs: []
  type: TYPE_NORMAL
- en: Starting with our manifest file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Okay, so I identified the two items that we need to build to make this all
    happen: the JSON `manifest` file and the service worker! Easy, right? Actually,
    it''s even easier than that. You see, Create React App will populate a JSON `manifest`
    file for us as part of our project creation by default! That means we have already
    completed this step! Let''s celebrate, go home, and kick off our shoes, because
    we''re all done now, right?'
  prefs: []
  type: TYPE_NORMAL
- en: 'Well, sort of. We should take a look at that default `manifest` file because
    it''s very unlikely that we want our fancy `TodoList` project to be called `"Create
    React App Sample"`. Let''s take a look at the `manifest` file, located in `public/manifest.json`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Some of these keys are pretty self-explanatory or at least have a little bit
    of information that you can infer from them as to what they accomplish. Some of
    the other keys, though, might be a little stranger. For example, what does `"start_url"`
    mean? What are the different options we can pick for display? What's a `"theme_color"`
    or `"background_color"`? Aren't those just decided by the CSS of our application?
  prefs: []
  type: TYPE_NORMAL
- en: Not quite. In fact, let's dive super deep into this world of JSON `manifest`
    files and turn it into something more useful!
  prefs: []
  type: TYPE_NORMAL
- en: Viewing our manifest file in action with Chrome
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, to be able to test this, we should have something where we can verify
    the results of our changes. We''ll start off with Chrome, where if you go into
    the Developer tools section, you can navigate to the Application tab and be brought
    right to the Service Workers section! Let''s take a look at what it all looks
    like for our application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ae72d45d-31f2-44e6-a50a-1e759a59907e.png)'
  prefs: []
  type: TYPE_IMG
- en: Exploring the manifest file options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Having a `manifest` file with no explanation of what the different keys and
    options mean is not very helpful, so let's take a deeper dive, key by key, into
    each of the configuration options available to us and some of the possible values
    we could use for each.
  prefs: []
  type: TYPE_NORMAL
- en: name and short_name
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first key we have is `short_name`. This is a shorter version of the name
    that might be displayed when, for example, the title can only display a smaller
    bit of text than the full app or site name. The counterpart to this is `name`,
    which is the full name of your application. A good example of this might be something
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: icons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The next key to look at is the `"icons"` key, which is a list of sub-objects,
    each of which has three keys. This contains a list of icons that the PWA should
    use, whether it's for display on someone's desktop, someone's phone home screen,
    or something else. Each `"icon"` object should contain an `"src"`, which is a
    link to the image file that will be your icon. Next, you have the `"type"` key,
    which should tell the PWA what type of image file you're working with. For example,
    if you're using a `.png` file, you would list `"image/png"` here as the type.
    Finally, we have the `"sizes"` key, which tells the PWA the size of the icon.
    For best results, you should have at least a `"512x512"` and a `"192x192"` icon.
    The PWA will take care of scaling things down where necessary.
  prefs: []
  type: TYPE_NORMAL
- en: start_url
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `start_url` key is used to tell the application at what point it should
    start in your application in relation to your server. While we''re not using it
    for anything as we have a single page, no route app, that might be different in
    a much larger application, so you might just want the `start_url` key to be something
    indicating where you want them to start off from. Another option would be to add
    a query string on to the end of `url`, such as a tracking link. An example of
    that would be something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: background_color
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is the color used when a splash screen is displayed any time the application
    is first launched. This is similar to when you launch an application from your
    phone for the first time; that little page that pops up temporarily while the
    app loads is the splash screen, and this would be the background of that. This
    can either be a color name, like you'd use in CSS, or it can be a hex value for
    a color.
  prefs: []
  type: TYPE_NORMAL
- en: display
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`display` affects the browser''s UI when the application is launched. There
    are ways to make the application full-screen, to hide some of the UI elements,
    and so on. Here are the possible options, with their explanations:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `Value` | Description. |'
  prefs: []
  type: TYPE_TB
- en: '| `browser` | A normal web browser experience. |'
  prefs: []
  type: TYPE_TB
- en: '| `fullscreen` | No browser UI, and takes up the entire display. |'
  prefs: []
  type: TYPE_TB
- en: '| `standalone` | Makes the web app look like a native application. It will
    run in its own window and hides a lot of the browser UI to make it look and feel
    more native. |'
  prefs: []
  type: TYPE_TB
- en: For our example, we'll be using `standalone` as our setting for display!
  prefs: []
  type: TYPE_NORMAL
- en: orientation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you want to make your application in the landscape orientation, you would
    specify it here. Otherwise you would leave this option missing from your `manifest`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: scope
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Scope helps to determine where the PWA in your site lies and where it doesn't.
    This prevents your PWA from trying to load things outside where your PWA runs. `start_url`
    must be located inside your scope for it to work properly! This is optional, and
    in our case we'll be leaving it out.
  prefs: []
  type: TYPE_NORMAL
- en: theme_color
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This sets the color of the tool bar, again to make it feel and look a little
    more native. If we specify a meta theme color, we'd set this to be the same as
    that specification. Much like background color, this can either be a color name,
    like you'd use in CSS, or it can be a hex value for a color.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing our manifest file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we''re experts on `manifest` files, let''s customize our manifest
    file! We''re going to change a few things here and there, but we won''t make any
    major changes. For the purposes of this book, we''re not going to worry about
    working with the images, so we''ll leave those be for now. Let''s take a look
    at how we''ve set up the `manifest` file in `public/manifest.json`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: So we've set our `short_name` and `name` keys to match the actual application.
    We've left the `icons` key alone completely since we don't really need to do much
    of anything with that anyway.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we've changed `start_url` to just be `"/"`, since we're working under
    the assumption that this application is the only thing running on its domain.
    We've set the `display` to `standalone`, since we want our application to have
    the ability to be added to someone's home screen and be recognized as a true PWA.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we set the theme color to `#343a40`, which matches the color of the
    nav bar and will give a more seamless look and feel to the PWA. We also set the
    `background_color` key, which is for our splash screen, to `#a5a5f5`, which is
    the color of our normal `Todo` items!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you think back to the explanation of keys, you''ll remember we also need
    to change our meta theme tag in our `public/index.html` file, so we''ll open that
    up and quickly make that change:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'And that''s it! Our `manifest` file has been customized! If we did it all correctly,
    we should be able to verify the changes again in our Chrome Developer tools:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bb4b9aad-125c-4881-a485-016633b4a808.png)'
  prefs: []
  type: TYPE_IMG
- en: Hooking up Service Workers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The other necessary component to having a working PWA for our application is
    to build out a Service Worker. Service Workers are another one of those components
    in PWAs that are not super well-understood, depending on who you ask, and their
    utility is also not immediately clear. We'll spend a little bit of time exploring
    and understanding Service Workers, even though the actual amount of work we need
    to do to implement Service Workers for our PWA is incredibly minimal (maybe even
    less work than our `manifest` file)!
  prefs: []
  type: TYPE_NORMAL
- en: What is a Service Worker?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Service Workers are defined as a script that your browser runs behind the scenes,
    separate from the main browser threads. It can intercept network requests, interact
    with a cache (either storing or retrieving information from a cache), or listen
    to and deliver push messages. This carries a couple of caveats, too. It is fully
    asynchronous, so that means anything that requires synchronous operations, such
    as **XMLHttpRequest** (**XHR**) or operating with **localStorage**, cannot be
    used inside the Service Worker code. It can also do some other neat tricks, such
    as receiving push messages even when the app itself is not active, allowing you
    to display notifications to the user even when the app is not open!
  prefs: []
  type: TYPE_NORMAL
- en: Since it can intercept network requests and store/retrieve information from
    a server, it can also operate when offline, which allows your application to start
    up and be used immediately, and progressively fetch updates or update periodically
    in the background from the server!
  prefs: []
  type: TYPE_NORMAL
- en: The Service Worker life cycle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The life cycle for a Service Worker is pretty simple. There are three main
    stages:'
  prefs: []
  type: TYPE_NORMAL
- en: Registration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Activation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each of these stages are pretty self-explanatory.
  prefs: []
  type: TYPE_NORMAL
- en: '**Registration** is the process of letting the browser know where the Service
    Worker is located and how to install it into the background. The code for registration
    may look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '**Installation** is the process that happens after the Service Worker has been
    registered, and only happens if the Service Worker either hasn''t already been
    installed, or the Service Worker has changed since the last time.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In a `service-worker.js` file, you''d add something like this to be able to
    listen to this `event`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, **Activation** is the step that happens after all of the other steps
    have completed. The Service Worker has been registered and then installed, so
    now it''s time for the service worker to start doing its thing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: How can we use a Service Worker in our app?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So, how do we use a Service Worker in our application? Well, it''s simple to
    do with Create React App, but there is a major caveat: you can''t configure the
    Create React App default generated `service-worker.js` file without ejecting your
    project, unfortunately! Not all is lost, however; you can still take advantage
    of some of the highlights of PWAs and service workers by using the default Create
    React App-generated Service Worker.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable this, hop over into `src/index.js`, and, at the final line, change
    the Service Worker `unregister()` call to `register()` instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'And now we''re opting in to our Service Worker! Next, to actually see the results,
    you''ll need to run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll create a *Production* build (We''ll cover this in greater detail in
    [Chapter 8](f657a8b7-93c3-412c-871d-8f3f56604a58.xhtml), *Getting Your App Ready
    for Production*). You''ll see some output that we''ll want to follow as part of
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'As per the instructions, we''ll install **serve** globally, and run the command
    as instructed. When we run this, we should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'We will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/40e02f22-cc31-4d5b-8d70-19786046e80b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now open up `http://localhost:5000` in your local browser and you''ll be able
    to see, again in the Chrome Developer tools, the Service Worker up and running
    for your application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/77b20199-b619-49f7-925b-a981b91c24e0.png)'
  prefs: []
  type: TYPE_IMG
- en: Note that the rule of requiring `HTTPS` for Service Workers and PWAs is not
    in effect when you're running it on `localhost`!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Hopefully, we've explored at least enough of Progressive Web Apps that they
    have at least been partially demystified! A lot of the confusion and trouble with
    building PWAs tends to stem from the fact that there's not always a good starting
    point for building one. To get the value out of PWAs, you have to have a PWA,
    but to build a PWA you typically need to demonstrate the value of them! What a
    whirlwind!
  prefs: []
  type: TYPE_NORMAL
- en: 'Create React App limits us a little bit in how we can implement Service Workers,
    which admittedly limits the functionality and usefulness of our PWA. It doesn''t
    hamstring us, by any means, but doing fun tricks with pre-caching networks and
    API responses, and loading up our application instantly, even if the browser doing
    the loading is offline in the first place. That being said, it''s like many other
    things in Create React App: an amazing stepping stone and a great way to get moving
    with PWAs in the future!'
  prefs: []
  type: TYPE_NORMAL
- en: In the next and final chapter, we'll tie up a few loose ends with our project
    and talk a little bit about production builds and ejecting out of Create React
    App! We'll look at how to take our code and get it into production. We'll also
    discuss importing some other major libraries into our Create React App project,
    such as Redux!
  prefs: []
  type: TYPE_NORMAL
