- en: '1'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Getting Started with Vue.js 3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we start learning how to develop enterprise-ready applications with Vue.js
    3, you need to understand Vue 3 and the different features it is bundled with
    to help you navigate through building scalable and enterprise-ready applications.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will cover the essential aspects of Vue 3 that will directly
    influence how we develop an enterprise application with Vue.js 3\. This background
    information will put you in a better position to grasp the terms and concepts
    of Vue 3 and help you understand how to build and scale an enterprise-ready application.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following key topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Overview of Vue.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing Vue.js 3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building your first Vue.js 3 app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once you’ve worked through each of these topics, you will be ready to get started
    with building your first enterprise-ready Vue.js 3 application.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To get started, we recommend that you have a basic knowledge of JavaScript with
    Node.js installed on your computer and must have built projects using Vue.js before.
  prefs: []
  type: TYPE_NORMAL
- en: Overview of Vue.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Vue.js is an open source progressive JavaScript frontend web framework used
    to develop interactive frontend web interfaces. It is a very popular and simplified
    JavaScript framework that focuses on the view layer of web development. It can
    be easily integrated into big and enterprise web development projects.
  prefs: []
  type: TYPE_NORMAL
- en: Vue.js is a framework that opens the door for developers to create and manage
    large and scalable projects with ease, as the code structure and development environment
    are developer-friendly.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will introduce you to the wonders of Vue 3 and the Composition
    API.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Vue.js 3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The official Vue.js 3 version was released in September 2020 with highly documented,
    highly readable, well-structured resources to help you start using Vue 3\. Evan
    You in his article *The process: Making Vue 3* ([https://increment.com/frontend/making-vue-3/](https://increment.com/frontend/making-vue-3/))
    mentioned that one of the key reasons for the rewrite was to leverage a new language
    feature, *Proxy*.'
  prefs: []
  type: TYPE_NORMAL
- en: Proxy allows the framework to intercept operations on objects. A core feature
    of Vue is the ability to listen to changes made to the user-defined state and
    reactively update the DOM. In Vue 3, using the Proxy feature is the key to resolving
    the reactivity-related issues in Vue 2.
  prefs: []
  type: TYPE_NORMAL
- en: Most importantly, Vue 3 was completely rewritten in TypeScript and has all the
    advantages of a modern framework that come with using TypeScript.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will explore some of the features and improvements that
    resonate with building an enterprise application and, most importantly, the new
    Composition API.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Vue 3 performance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tree-shaking support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Composition API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These topics give you a glimpse at the features of Vue.js 3 and we will start
    with what we are already familiar with in Vue in this book.
  prefs: []
  type: TYPE_NORMAL
- en: Vue 3 performance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The performance increase in Vue 3 is excellent for enterprise applications because
    any lag in the core framework can result in a loss of funds given the gigantic
    nature of an enterprise project.
  prefs: []
  type: TYPE_NORMAL
- en: Vue 3 has sped up performance by 55% compared to previous versions. Also, the
    updates are up to 133% faster, which is excellent for developing and testing large
    enterprise projects before deployment. Also, memory usage is reduced by 54%, cutting
    down computing costs drastically on enterprise projects.
  prefs: []
  type: TYPE_NORMAL
- en: Tree-shaking support
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Tree-shaking is the process of eliminating dead, useless, or unused code, which
    drastically decreases the build size of an application if you compare this to
    an enterprise application with thousands of files and—sometimes unknowingly—unused
    files that can lead to a bloated and heavy project.
  prefs: []
  type: TYPE_NORMAL
- en: Vue 3 supports tree-shaking right out of the box, eliminating unused files and
    code, thereby decreasing the build size and increasing the project’s performance.
  prefs: []
  type: TYPE_NORMAL
- en: The Composition API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Composition API is an entirely new addition and the most significant change
    to Vue 3\. It requires relearning the concepts and total discarding the Options
    API used in Vue 2\. While the Composition API advances, the previous Options API
    will continue to be supported. In this book, we use the Composition API because
    of the readability and performance improvements that come with it.
  prefs: []
  type: TYPE_NORMAL
- en: Why the Composition API?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When building a simple application, the component-based architecture alone has
    proven to be the best approach to developing such an application where individual
    components can be reused to improve maintainability and flexibility.
  prefs: []
  type: TYPE_NORMAL
- en: However, when building enterprise-ready applications with hundreds of components,
    from collective experience, it is proven that component-based architecture alone
    might not be enough, especially when your application is getting big but sharing
    and reusing code even within components becomes very important, and thus the introduction
    of the Composition API.
  prefs: []
  type: TYPE_NORMAL
- en: Code example
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let’s imagine we are building an enterprise to-do application with unique features
    such as filters and search capabilities. Using the Options API, we will approach
    this project using the traditional `data`, `computed`, and `watch` methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code block shows how to create and manage a Vue component using
    the Options API from Vue 2:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding component handles many responsibilities, as you can see in the
    following points:'
  prefs: []
  type: TYPE_NORMAL
- en: Getting the `Todo` repository from an external API and refreshing it on user
    changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Searching the `Todo` repository using the `searchQuery` string
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Filtering the `Todo` repository using the `filters` object
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Organizing your component’s logic as in the previous example works perfectly,
    but at the same time poses a huge challenge to readability and maintainability
    for larger and enterprise projects with bigger components’ logic.
  prefs: []
  type: TYPE_NORMAL
- en: Wouldn’t it be perfect if we could collocate code related to the same logical
    concern? That’s exactly what the Composition API enables us to do.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s rewrite the same component using the Composition API to see the improvement
    and readability benefits gained by using it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The Composition API is a great addition, especially for developing enterprise-ready
    applications. We can move the `computed`, `mounted`, and `watch` lifecycle hooks
    into a standalone composition function and import it into the script with `setup`,
    making it readable, flexible, and maintainable. To learn more about the Composition
    API, visit the official documentation ([https://v3.vuejs.org/guide/composition-api-introduction.html#why-composition-api](https://v3.vuejs.org/guide/composition-api-introduction.html#why-composition-api)),
    which is outside the scope of this book.
  prefs: []
  type: TYPE_NORMAL
- en: So far, we have covered an overview of Vue 3 and the newly introduced features
    of Vue that are handy for building enterprise-ready and scalable production-grade
    applications. We have also covered the basics of the Composition API to foster
    your understanding of building your modern enterprise application with Vue 3.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will put your knowledge to the test by learning how
    to build your first Vue 3 application using Vite as the build tool.
  prefs: []
  type: TYPE_NORMAL
- en: According to the official documentation ([https://vitejs.dev/guide/](https://vitejs.dev/guide/)),
    Vite is a build tool that aims to provide a faster and leaner development experience
    for modern web projects. It is based on Rollup, and it’s configured to support
    most sensible defaults for modern JavaScript frameworks.
  prefs: []
  type: TYPE_NORMAL
- en: Building your first Vue.js 3 app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Vue.js can be integrated into projects in multiple ways depending on the requirements
    because it is incrementally adaptable.
  prefs: []
  type: TYPE_NORMAL
- en: We will create a completely blank new Vue 3 project, or you can use the migration
    guide ([https://v3.vuejs.org/guide/migration/migration-build.html#overview](https://v3.vuejs.org/guide/migration/migration-build.html#overview))
    to migrate your Vue 2 project to Vue to follow along.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we are going to cover how to build our Vue 3 application using
    the Vite **command-line** **interface** (**CLI**).
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Vue 3 app with Vite
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To create our first Vue 3 application, we will use the recommended **Vite**
    web development tool. Vite is a web development build tool that allows for lightning-fast
    code serving due to its native ES Module import approach.
  prefs: []
  type: TYPE_NORMAL
- en: In this book, we will be building an enterprise-ready Pinterest clone project,
    and all the backend data management of the project will be developed and hosted
    with **Strapi**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type along with these simple commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding commands will create a `pinterest-app-clone` folder with Vue
    3 installed and set up properly. Once done, open your favorite browser and access
    the web page with `localhost:3000`. This is what the web page will look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.1 – A screenshot of the newly installed Vue 3](img/Figure_1.01_B17237.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.1 – A screenshot of the newly installed Vue 3
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we explored Vue 3, the Composition API, and how to get started
    building your first application with Vue 3\. In the next section, we will learn
    about the Strapi CMS that we will use for data and content management.
  prefs: []
  type: TYPE_NORMAL
- en: What is the Strapi CMS?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Strapi is an open source headless CMS based on Node.js that is used to develop
    and manage content or data using RESTful APIs and GraphQL.
  prefs: []
  type: TYPE_NORMAL
- en: With Strapi, we can scaffold our API faster and consume the content via APIs
    using any HTTP client or GraphQL-enabled frontend.
  prefs: []
  type: TYPE_NORMAL
- en: Scaffolding a Strapi project
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Scaffolding a new Strapi project is very simple and works precisely like installing
    a new frontend framework. Follow these steps to scaffold a new Strapi project:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run either of the following commands and test them out in your default browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding command will scaffold a new Strapi project in the directory you
    specified.
  prefs: []
  type: TYPE_NORMAL
- en: Next, run `yarn build` to build your app and, lastly, `yarn develop` to run
    the new project if it doesn’t start automatically.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `yarn develop` command will open a new tab with a page to register your
    new admin of the system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.2 – The registration page](img/Figure_1.02_B17237.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.2 – The registration page
  prefs: []
  type: TYPE_NORMAL
- en: Go ahead and fill out the form and click on the **Submit** button to create
    a new admin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As we progress in this book, we will customize our Strapi backend instance to
    reflect Pinterest data modeling.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter started with an overview of Vue.js and why Vue.js can be used to
    develop enterprise-ready applications. We discussed the latest release of Vue.js
    and how it improves the performance aspect of the framework by introducing a tree-shaking
    feature right out of the box. We then introduced the Composition API, a Vue 3
    feature that improves the readability, maintainability, and scalability of Vue
    3 for building and deploying enterprise applications. We also looked at creating
    our first Vue 3 application using Vite and the fundamental reasons for using Vite
    instead of the other available options.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we introduced the Strapi CMS, the backend stack and a headless CMS
    for building and modeling backend applications and APIs. With Strapi, we will
    only focus on building and scaling our enterprise frontend Pinterest-clone application
    using Vue 3 while the Strapi CMS handles the backend.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will dive deeper into using Vuex, Vue Router, and Axios
    to build an enterprise-ready app. You will learn how to properly utilize these
    libraries to develop large-scale applications with maintainability and scalability,
    and by the end of the chapter, you will have learned how to set up your backend
    with Strapi and connect it to Vue 3.
  prefs: []
  type: TYPE_NORMAL
