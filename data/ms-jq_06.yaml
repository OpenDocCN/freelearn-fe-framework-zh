- en: Chapter 6. Animating in jQuery
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第六章 在 jQuery 中进行动画
- en: Hands up who like a static website? Thought not, animating a website gives it
    life; overdoing it can be disastrous!
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 举手喜欢静态网站的人？想不到吧，为网站添加动画效果能赋予其生命；但过度使用可能会带来灾难性的后果！
- en: 'Two common effects we frequently use to help breathe life into any website
    are AJAX and animation; we covered the former in detail back in the previous chapter.
    In this chapter, we''ll take a look at when to use jQuery over CSS (or vice versa),
    how to manage queues better, and how to implement some slick custom animation
    effects. You''ll also see how you can easily create some useful custom-easing
    effects, as a basis for converting them to CSS equivalents at some point in the
    future. In this chapter, we''ll cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们经常用来为网站注入生命力的两个常见效果是 AJAX 和动画；我们在前一章节详细介绍了前者。在本章中，我们将探讨何时使用 jQuery 而不是 CSS（或反之），如何更好地管理队列，以及如何实现一些漂亮的自定义动画效果。您还将看到如何轻松创建一些有用的自定义缓动效果，作为将来转换为
    CSS 等效的基础。在本章中，我们将涵盖以下主题：
- en: When to use CSS over jQuery
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 何时使用 CSS 而不是 jQuery
- en: Managing or avoiding the jQuery animation queue
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理或避免 jQuery 动画队列
- en: Designing custom animations
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计自定义动画
- en: Implementing some custom animations
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现一些自定义动画
- en: Animating in a responsive website
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在响应式网站中进行动画
- en: Ready to make a start? Let's go…
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好开始了吗？让我们开始吧……
- en: Choosing CSS or jQuery
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择 CSS 还是 jQuery
- en: Let's start this topic with a question.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从一个问题开始这个话题。
- en: Take a look at the Dia do Baralho site, hosted at [http://www.diadobaralho.com.br](http://www.diadobaralho.com.br)
    - how many of you think the animations you see there, were created using just
    jQuery?
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 看一看 Dia do Baralho 网站，托管在 [http://www.diadobaralho.com.br](http://www.diadobaralho.com.br)
    - 你们中有多少人认为你在那里看到的动画是仅使用 jQuery 创建的？
- en: 'If you thought yes, then sorry to disappoint you; the answer is actually no!
    If you look closely at the source, you will find instances where a mix of both
    CSS3 animations and jQuery have been used. Now, you might be thinking: why are
    we talking about CSS3 animations when this book is about mastering jQuery?'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您认为是的话，那么很抱歉让您失望了；实际上答案是不是！如果您仔细查看源代码，您会发现有些地方同时使用了 CSS3 动画和 jQuery。现在，您可能会想：为什么我们在谈论掌握
    jQuery 的书籍时要讨论 CSS3 动画呢？
- en: 'There''s a good reason for this; remember when I mentioned, earlier in the
    book, that any individual with the right skills can write jQuery? The difference
    between an average coder and a good developer is this: why will I use jQuery?
    Now, this might sound as though I''ve really lost my marbles, but I haven''t.
    Let me explain what I mean, as follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这是有道理的；还记得我之前在书中提到过的，拥有正确技能的任何个体都可以编写 jQuery 吗？普通编码人员和优秀开发人员的区别在于：为什么我会使用 jQuery？现在，这听起来可能让人觉得我疯了，但我没有。让我解释一下我的意思，如下所示：
- en: A CSS3 animation does not have any dependency on an external library; given
    that jQuery still weighs in at a good size, one less resource request is always
    a good thing!
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSS3 动画不依赖于外部库；考虑到 jQuery 仍然有一定的大小，少一个资源请求总是一件好事！
- en: For light, simple animations, there is no benefit in referencing jQuery when
    CSS3 animations are sufficient. Despite the need to provide vendor-prefixed versions
    of the same statements (and excluding the use of jQuery), the amount of code required
    is likely to be smaller than that required if jQuery is used.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于简单轻量的动画，如果 CSS3 动画足够，引用 jQuery 是没有好处的。尽管需要提供相同语句的供应商前缀版本（并且不使用 jQuery），但所需的代码量可能比使用
    jQuery 少。
- en: 'There is a performance impact in using jQuery, which makes using CSS animations
    all the more tempting, for several reasons:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 jQuery 会有性能影响，这使得使用 CSS 动画更加诱人，原因有几个：
- en: The library was never designed to be a performant animation engine; it's code
    base has to serve many purposes, which can lead to layout thrashing
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个库从来没有被设计成一个高性能的动画引擎；它的代码库必须服务于许多目的，这可能导致布局抖动。
- en: jQuery's memory consumption often means that we have garbage collections take
    place, which can lead to the momentary freezing of animations
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: jQuery 的内存消耗通常意味着我们需要进行垃圾收集，这可能会导致动画短暂冻结
- en: jQuery uses `setInterval` instead of `requestAnimationFrame` to manage animations
    (although this is due to a change in a forthcoming version of jQuery)
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: jQuery 使用 `setInterval` 而不是 `requestAnimationFrame` 来管理动画（尽管这是由于即将推出的 jQuery
    版本的更改）
- en: 'There are an equal number of reasons why we should prefer to use jQuery; even
    though it has its limitations as a library, there are occasions where we may need
    to use jQuery in place of native CSS3 animations, as stated here:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 同样有许多理由支持我们使用 jQuery；尽管它作为一个库有其局限性，但在某些情况下，我们可能需要在原生 CSS3 动画的位置使用 jQuery，如下所述：
- en: CSS animations are taxing on GPUs, which can result in stuttering and banding
    when the browser is under load—this is particularly prevalent in mobile devices.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSS 动画对 GPU 负荷较大，在浏览器负载较高时可能会导致卡顿和色带效应——这在移动设备上尤为普遍。
- en: Note
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: There is a useful discussion about the impact of hardware acceleration and CSS3
    at [http://css-tricks.com/myth-busting-css-animations-vs-javascript/](http://css-tricks.com/myth-busting-css-animations-vs-javascript/).
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关硬件加速和 CSS3 的影响的讨论，请访问[http://css-tricks.com/myth-busting-css-animations-vs-javascript/](http://css-tricks.com/myth-busting-css-animations-vs-javascript/)。
- en: Most browsers support CSS3 animations with the exception of IE9 or below; for
    this, jQuery must be used.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大多数浏览器都支持 CSS3 动画，但 IE9 或更低版本除外；对于这种情况，必须使用 jQuery。
- en: CSS3 animations are not (yet) as flexible as their jQuery equivalents—they are
    evolving all the time, so there will come a point when the two become very similar.
    For example, we cannot use different eases in keyframes when working with CSS3;
    the same ease must be applied to the whole keyframe.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSS3 动画目前（还）不及 jQuery 的灵活——它们一直在不断发展，因此总会有一天两者变得非常相似。例如，在使用 CSS3 时，我们不能在关键帧中使用不同的缓动方式；整个关键帧必须应用相同的缓动方式。
- en: The key point here is that we have the freedom to choose; in fact, as noted
    by the developer David Walsh, it is more sensible to use CSS3 animations when
    we need nothing more than simple state changes. His argument is based on being
    able to retain animation logic within style sheets and reducing bloat on pages
    from multiple JavaScript libraries.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的关键点是，我们有自由选择的权利；事实上，正如开发者 David Walsh 所指出的，当我们只需要简单的状态更改时，使用 CSS3 动画更为明智。他的论点是基于能够在样式表中保留动画逻辑，并从多个
    JavaScript 库中减少页面的臃肿。
- en: The proviso though is that if your needs are more complex, then jQuery is the
    way forward; developer Julian Shapiro argues that using animation libraries maintains
    the performance of each animation and keeps our workflow manageable.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 但要注意，如果您的需求更复杂，则 jQuery 是前进的道路；开发者 Julian Shapiro 认为，使用动画库可以保持每个动画的性能，并使我们的工作流程易于管理。
- en: Note
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To see the effects of animating multiple objects using JavaScript or CSS, head
    over to [http://css3.bradshawenterprises.com/blog/jquery-vs-css3-transitions/](http://css3.bradshawenterprises.com/blog/jquery-vs-css3-transitions/),
    which shows a very enlightening demo!
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看使用 JavaScript 或 CSS 对多个对象进行动画效果的效果，请转到[http://css3.bradshawenterprises.com/blog/jquery-vs-css3-transitions/](http://css3.bradshawenterprises.com/blog/jquery-vs-css3-transitions/)，该网站展示了一个非常启发性的演示！
- en: As long as we are careful with our CSS, for simple, self-contained state animations,
    a smarter move is to use native CSS3 and to not always rely on using jQuery as
    the answer to all our needs.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 只要我们在使用 CSS 方面小心谨慎，对于简单的、自包含的状态动画，更明智的做法是使用原生 CSS3，而不总是依赖 jQuery 来解决我们所有的需求。
- en: 'As an aside, it is worth noting that a relatively new API is being considered:
    the Web Animations API. This API is aimed at creating animations using JavaScript,
    that run as efficiently as native CSS3 animations. This is worth looking out for,
    given the inherent issues we have with using jQuery; support is limited to Chrome
    and Opera only at the time of writing.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便提一句，值得注意的是，有一个相对较新的 API 正在考虑中：Web Animations API。该 API 旨在使用 JavaScript 创建效率与原生
    CSS3 动画相同的动画。鉴于我们在使用 jQuery 时存在的固有问题，这值得关注；截至撰写本文时，该 API 的支持仅限于 Chrome 和 Opera。
- en: Tip
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: For details of the support of the Web Animations API, check out the Can I use
    website at [http://caniuse.com/#search=Web%20animation](http://caniuse.com/#search=Web%20animation);
    there is also a useful tutorial posted at [http://updates.html5rocks.com/2014/05/Web-Animations---element-animate-is-now-in-Chrome-36](http://updates.html5rocks.com/2014/05/Web-Animations---element-animate-is-now-in-Chrome-36)—this
    is for Chrome only though!
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解 Web Animations API 的支持细节，请查看 [Can I use 网站](http://caniuse.com/#search=Web%20animation)；[http://updates.html5rocks.com/2014/05/Web-Animations---element-animate-is-now-in-Chrome-36](http://updates.html5rocks.com/2014/05/Web-Animations---element-animate-is-now-in-Chrome-36)
    上也发布了一篇有用的教程——不过这只适用于 Chrome！
- en: 'Enough of theory, let''s do some coding! Assuming that we need to use jQuery
    for our animation projects, there is one key issue that is likely to floor developers:
    rapid cycling through queued animations that can be set for any feature that uses
    animation. Let''s delve in to see what this means and what we can do to reduce
    or get rid of the issue.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 足够的理论，让我们进行一些编码！假设我们需要使用 jQuery 来进行我们的动画项目，那么一个主要的问题很可能会困扰开发者：在任何使用动画的功能中设置了可以设置的排队动画的快速循环。让我们深入了解一下这意味着什么，以及我们可以采取什么措施来减少或消除这个问题。
- en: Controlling the jQuery animation queue
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制 jQuery 动画队列
- en: 'If you have spent any time developing with jQuery, there is no doubt that you
    will come across a key issue when working with animations: how many times have
    you seen a browser cycle through multiple queued animations when you switch to
    another browser window and back again?'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你花费了一些时间使用 jQuery 进行开发，毫无疑问，当你在处理动画时，你会遇到一个关键问题：当你切换到另一个浏览器窗口然后再切换回来时，你看到浏览器循环执行多个排队的动画多少次？
- en: 'I can bet that the answer is quite a few times; the key to this issue boils
    down to jQuery queuing all the animations it has been asked to perform. If too
    many initiations take place, then jQuery''s animation queue becomes confused and
    hence it seems to go crazy! Let''s take a look at the issue in action before working
    through a simple fix for the problem:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我敢打赌，答案是相当多次；这个问题的关键在于 jQuery 排队执行所有被要求执行的动画。如果发生了太多的初始化，那么 jQuery 的动画队列就会混乱，因此它似乎会变得疯狂！在解决问题之前，让我们先看看问题是如何出现的：
- en: Start by extracting the `blockedqueue.html` and `blockedqueue.css` files from
    the code download that accompanies this book—they will provide some simple markup
    to illustrate our queuing issue.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从附带本书的代码下载中提取 `blockedqueue.html` 和 `blockedqueue.css` 文件，它们将提供一些简单的标记以说明我们的排队问题。
- en: 'In a text editor, add the following to a new file, saving it as `blockedqueue.js`
    in the `js` subfolder of our project area:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文本编辑器中，将以下内容添加到一个新文件中，并将其保存为我们项目区域的 `js` 子文件夹中的 `blockedqueue.js`：
- en: '[PRE0]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If we run our demo now, then when we repeatedly move the mouse over each bar,
    we can see all of them increase or decrease in quick succession, with the next
    bar changing before the previous one has finished animating, as shown here:![Controlling
    the jQuery animation queue](img/image00382.jpeg)
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们现在运行我们的演示，那么当我们重复将鼠标移动到每个条形图上时，我们可以看到它们全部快速地增加或减少，下一个条形图在前一个动画完成之前就会改变，如下图所示：![控制
    jQuery 动画队列](img/image00382.jpeg)
- en: Clearly, this behavior isn't desired; had this demo been automated and set to
    work in conjunction with `requestAnimationFrame` (which we will cover later in
    [Chapter 9](part0080.xhtml#aid-2C9D01 "Chapter 9. Using the Web Performance APIs"),
    *Using the Web Performance APIs*), then we would have seen a frenzied rush of
    animations being completed when we switch away from a tab and go back to the original.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，这种行为是不希望出现的；如果这个演示被自动化并与 `requestAnimationFrame` 结合使用（我们稍后会在[第 9 章](part0080.xhtml#aid-2C9D01
    "Chapter 9. Using the Web Performance APIs")中介绍，*使用 Web 性能 API*），那么当我们切换到一个标签并返回到原来的标签时，我们会看到一系列动画被完成。
- en: Fixing the problem
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决问题
- en: 'How do we fix this issue? It''s really simple; all we need to do is add the
    `.stop()` method in our statement chain; this will clear the preceding animation
    before starting the next. Let''s take a look and see what this means in practice
    by performing the following steps:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何解决这个问题？很简单；我们只需要在语句链中添加 `.stop()` 方法；这将在开始下一个动画之前清除前面的动画。让我们看看这在实践中意味着什么，通过执行以下步骤：
- en: 'In a copy of the `blockedqueue.html` file, go ahead and modify the `<head>`
    section as shown here:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `blockedqueue.html` 文件的副本中，按照以下方式修改 `<head>` 部分：
- en: '[PRE1]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We need to slightly change the markup in the body of our demo, so alter the
    code as highlighted:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要在演示的主体中稍微更改标记，所以按照以下代码进行修改：
- en: '[PRE2]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Save this as `unblockqueue.html`. In a new file, add the following code and
    then save it as `unblockedqueue.js` in the `js` subfolder of our project area.
    This contains the modified markup, with the addition of `.stop()`:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其保存为 `unblockqueue.html`。在一个新文件中，添加以下代码，然后将其保存为我们项目区域的 `js` 子文件夹中的 `unblockedqueue.js`。这包含了修改后的标记，以及添加了
    `.stop()`：
- en: '[PRE3]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If we run the demo now and then rapidly move over each of the bars in turn,
    we should see that the bars will increase and decrease in turn, but the next one
    will not change until the preceding bar has returned to its original size, as
    shown here:![Fixing the problem](img/image00383.jpeg)
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们现在运行演示，然后快速地依次移动到每个条形图上，我们应该看到条形图会依次增加和减少，但是下一个条形图在前一个条形图返回到原始大小之前不会改变，如下所示：![解决问题](img/image00383.jpeg)
- en: Hopefully, you will agree that adding `.stop()` has made a significant improvement
    to our code—adding `.stop()` will terminate the previous animation but queue the
    next one, ready for action.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 希望您同意添加`.stop()`已经显著改善了我们的代码——添加`.stop()`将终止前一个动画但排队下一个动画，准备就绪。
- en: Making the transition even smoother
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 让过渡更加顺畅
- en: 'We can go one step further. A closer look at the attributes available for `.stop()`
    shows that we can use `clearQueue` and `jumpToEnd` to stop running animations
    on matched elements, making for even cleaner transitions, as shown in the following
    figure:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以进一步。仔细查看`.stop()`可用的属性，我们可以使用`clearQueue`和`jumpToEnd`在匹配的元素上停止运行动画，从而产生更干净的过渡，如下图所示：
- en: '![Making the transition even smoother](img/image00384.jpeg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![让过渡更加顺畅](img/image00384.jpeg)'
- en: Tip
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: For more information about using `.stop()`, please refer to the main jQuery
    documentation at [http://api.jquery.com/stop/](http://api.jquery.com/stop/).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 有关使用`.stop()`的更多信息，请参阅主要的 jQuery 文档 [http://api.jquery.com/stop/](http://api.jquery.com/stop/)。
- en: 'Let''s alter our jQuery code to see what this means in practice by performing
    the following steps:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们修改我们的 jQuery 代码，看看这在实践中意味着什么，通过执行以下步骤：
- en: 'Go back to the `unblockedqueue.js` file and then alter the code as shown here:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到`unblockedqueue.js`文件，然后按如下所示修改代码：
- en: '[PRE4]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Save your work and then preview the results of the demo in a browser. If all
    went well, you should see no change in the bars themselves but the animation effect
    will appear smoother when you hover over each bar.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存您的工作，然后在浏览器中预览演示的结果。如果一切顺利，您应该看不到条形图本身的任何变化，但当您将鼠标悬停在每个条形图上时，动画效果会更加顺畅。
- en: At this stage, we should have an animation that still works but with a smoother
    transition—it is worth noting that this trick will only work with animations.
    If your projects use other function queues, then these will need to be cleared
    using `.clearQueue()` instead.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，我们应该有一个仍然工作但过渡更加顺畅的动画——值得注意的是，这个技巧只适用于动画。如果您的项目使用其他函数队列，则需要使用`.clearQueue()`清除这些队列。
- en: Note
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For a comparison on the different ways of using `.stop()`, it's worth taking
    a look at a demo by Chris Coyier, at [http://css-tricks.com/examples/jQueryStop/](http://css-tricks.com/examples/jQueryStop/)—this
    produces some intriguing effects! A similar explanation is also available at [http://www.2meter3.de/code/hoverFlow/](http://www.2meter3.de/code/hoverFlow/).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 为了比较使用`.stop()`的不同方式，值得看看 Chris Coyier 的演示，网址为 [http://css-tricks.com/examples/jQueryStop/](http://css-tricks.com/examples/jQueryStop/)——这产生了一些有趣的效果！类似的解释也可以在
    [http://www.2meter3.de/code/hoverFlow/](http://www.2meter3.de/code/hoverFlow/)
    找到。
- en: Using a pure CSS solution
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用纯 CSS 解决方案
- en: 'Okay, so we have our animation in jQuery; for a simple animation, what will
    it look like if we used pure CSS instead? Although we can''t replicate the same
    effect as `.stop()`, we can get pretty close. Let''s take a look and see what
    this means in practice, using `unblockedqueue.html` as the basis for our demo:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，所以我们在 jQuery 中有我们的动画；对于一个简单的动画，如果我们改用纯 CSS 会是什么样子呢？虽然我们无法复制`.stop()`的相同效果，但我们可以非常接近。让我们看看这在实践中意味着什么，以`unblockedqueue.html`作为我们演示的基础：
- en: Start by removing the two JavaScript links, one to `unblockqueue.js` and the
    other to jQuery itself.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先移除两个 JavaScript 链接，一个指向`unblockqueue.js`，另一个指向 jQuery 本身。
- en: 'Add the following at the bottom of `blockedqueue.css`—this contains the animation
    style rules required for our demo:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`blockedqueue.css`底部添加以下内容——这包含了我们演示所需的动画样式规则：
- en: '[PRE5]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: At this point, if we preview the results in a browser, we should see no *visible*
    difference in our animated list elements; the real change is seen if we use Google
    Chrome's developer toolbar to monitor the timeline. Let's see what the change
    looks like.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，如果我们在浏览器中预览结果，我们应该看不到动画列表元素的 *可见* 差异；真正的变化可以在使用 Google Chrome 的开发者工具栏监视时间线时看到。让我们看看这种变化是什么样子的。
- en: Fire up Google Chrome. Press *Shift* + *Ctrl* + *I* to bring up the **Developer
    Toolbar** (or *Option* + *Cmd* + *I* for Apple Macs).
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 Google Chrome。按 *Shift* + *Ctrl* + *I* 召唤**开发者工具栏**（或 *Option* + *Cmd* +
    *I* 适用于苹果 Mac）。
- en: Click on the **Timeline** tab and then click on the gray-colored circle immediately
    below the magnifying glass—the circle will turn red in color.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击 **Timeline** 标签，然后单击放大镜下方的灰色圆圈——圆圈将变为红色。
- en: Try hovering over the list items in turn; Chrome will monitor and collect details
    of the actions performed.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 依次将鼠标悬停在列表项上；Chrome 将监视并收集执行的操作的详细信息。
- en: After a couple of minutes, click on the red-colored circle to stop generating
    the profile; you will end up with something that looks like this:![Using a pure
    CSS solution](img/image00385.jpeg)
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 几分钟后，单击红色圆圈以停止生成配置文件；您将得到类似这样的结果：![使用纯 CSS 解决方案](img/image00385.jpeg)
- en: 'We can clearly see that a CSS-only solution barely has an impact on the performance
    of the browser. In comparison, take a look at the same timeline, when we run the
    `unblockedqueue.html` demo:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们清楚地看到，仅 CSS 解决方案几乎不会影响浏览器的性能。相比之下，当我们运行 `unblockedqueue.html` 演示时，看一下相同的时间轴：
- en: '![Using a pure CSS solution](img/image00386.jpeg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![使用纯 CSS 解决方案](img/image00386.jpeg)'
- en: Notice the difference? Although this was a quick, nonscientific test, we can
    clearly see the difference when we look at the detailed numbers.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到区别了吗？虽然这只是一个快速的非科学性测试，但当我们查看详细数字时，我们可以清楚地看到差异。
- en: 'Over a period of approximately 3 seconds, Google Chrome spent 33 ms rendering
    and 48 ms painting when running the CSS-only solution. Running `unblockedqueue.html`
    shows that the numbers almost double: 107 ms for scripting, 78 ms for rendering,
    and 76 ms for painting! This is definitely something to think about…'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在大约3秒的时间内，Google Chrome 在运行仅 CSS 解决方案时花费了33毫秒进行渲染和48毫秒进行绘制。运行 `unblockedqueue.html`
    显示数字几乎翻了一番：脚本107毫秒，渲染78毫秒，绘制76毫秒！这绝对是需要考虑的事情...
- en: Improving jQuery animations
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 改进 jQuery 动画
- en: From the previous section, we can easily see that CSS has a clear advantage
    when being rendered in a browser—this is despite the somewhat unscientific approach
    used in the demo!
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的部分，我们可以很容易地看出，在浏览器中渲染 CSS 时具有明显的优势——尽管演示中使用了某种程度上不科学的方法！
- en: The key point though is that, what we gain with flexibility and all-round browser
    support when using jQuery, we lose in speed—jQuery was never designed to be performant
    when rendering animations.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 但关键点在于，尽管在使用 jQuery 时我们在灵活性和全面的浏览器支持方面获得了一些好处，但我们在速度上失去了——jQuery 从未被设计为在渲染动画时性能良好。
- en: 'To help improve performance, there are a couple of plugin options that you
    can explore:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助提高性能，您可以探索几个插件选项：
- en: '**Velocity.js**: This plugin reengineers `$.animate()` to provide significantly
    faster performance and can be used with or without jQuery; this includes IE8\.
    The plugin can be downloaded from [http://julian.com/research/velocity/](http://julian.com/research/velocity/).
    This also contains some preregistered effects—we will cover more on creating custom-easing
    effects later in this chapter.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Velocity.js**：这个插件对 `$.animate()` 进行了重新设计以提供更快的性能，并且可以与或无需 jQuery 一同使用；这包括
    IE8。该插件可以从 [http://julian.com/research/velocity/](http://julian.com/research/velocity/)
    下载。这还包含了一些预先注册的效果——我们将在本章稍后介绍更多关于创建自定义缓动效果的内容。'
- en: '**jQuery-animate-enhanced**: This plugin detects and reengineers animations
    to use native CSS transitions automatically, for WebKit, Mozilla, and IE10 or
    greater. It can be downloaded from [http://playground.benbarnett.net/jquery-animate-enhanced/](http://playground.benbarnett.net/jquery-animate-enhanced/).'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**jQuery-animate-enhanced**：这个插件会自动检测和重新设计动画，以使用原生的 CSS 过渡效果，适用于 WebKit、Mozilla
    和 IE10 或更高版本。可以从这里下载 [http://playground.benbarnett.net/jquery-animate-enhanced/](http://playground.benbarnett.net/jquery-animate-enhanced/)。'
- en: We can go further and delve into using jQuery to be notified when an animation
    has completed, using the `transitionend` event. While this may not stop the original
    issue with an animation queue build-up, using jQuery will allow you to separate
    animation effects from your jQuery logic.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以进一步探讨使用 jQuery 在动画完成时通知我们的方法，使用 `transitionend` 事件。虽然这可能无法解决动画队列积压的原始问题，但使用
    jQuery 将允许您将动画效果与您的 jQuery 逻辑分开。
- en: Note
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For an interesting article and demo on using `transitionend` (and its vendor-prefixed
    versions), take a look at an article on the Treehouse website, at [http://blog.teamtreehouse.com/using-jquery-to-detect-when-css3-animations-and-transitions-end](http://blog.teamtreehouse.com/using-jquery-to-detect-when-css3-animations-and-transitions-end).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个有趣的文章和演示，关于使用 `transitionend`（及其供应商前缀版本），请查看 Treehouse 网站上的一篇文章，链接在这里 [http://blog.teamtreehouse.com/using-jquery-to-detect-when-css3-animations-and-transitions-end](http://blog.teamtreehouse.com/using-jquery-to-detect-when-css3-animations-and-transitions-end)。
- en: Now that we've seen how we can make our animations smoother, let's move on and
    take a look at how we can generate custom animations; the theory being that we
    can put some of our knowledge to create more complex and interesting animations,
    while at the same time, reduce some of the issues we see with running the queue.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了如何使我们的动画更流畅，让我们继续看看如何生成定制动画；理论是我们可以利用一些知识来创建更复杂和有趣的动画，同时减少我们在运行队列时看到的一些问题。
- en: 'However, before we do so, I want to leave you with two useful tips when it
    comes to improving your animations:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，在这样做之前，我想给你留下两个有用的建议，可以帮助您改善您的动画：
- en: Have a look at [http://blog.teamtreehouse.com/create-smoother-animations-transitions-browser](http://blog.teamtreehouse.com/create-smoother-animations-transitions-browser);
    it explores some of the issues we encounter with animations and transitions and
    how these affect performance
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 看看[http://blog.teamtreehouse.com/create-smoother-animations-transitions-browser](http://blog.teamtreehouse.com/create-smoother-animations-transitions-browser)；它探讨了我们在动画和过渡中遇到的一些问题，以及这些问题如何影响性能。
- en: The article at [http://developer.telerik.com/featured/trimming-jquery-grunt/](http://developer.telerik.com/featured/trimming-jquery-grunt/)
    explores how we can trim our version of jQuery, to remove functionality that is
    not needed (and consequently reduce the load on the server when running animations)
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该文章在[http://developer.telerik.com/featured/trimming-jquery-grunt/](http://developer.
    example.org/jqtrim/)探讨了如何修剪我们的jQuery版本，以去除不需要的功能（因此在运行动画时减少了服务器的负荷）。
- en: Let's take a look at designing these custom animations, beginning with an initial
    look at using easing functions.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始设计这些定制动画，首先看一下如何使用缓动函数。
- en: Introducing easing functions
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍缓动函数
- en: When animating any object or element on a page, we can simply slide it up or
    down or move it from one place to another on the page. These are perfectly valid
    effects, but they lack the realism you might get when opening a drawer, for example.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在页面上动画化任何对象或元素时，我们可以简单地将其上下滑动或从一个地方移动到另一个地方。这些都是完全有效的效果，但缺乏实际感，例如在打开抽屉时可能得到的效果。
- en: Animations don't always move at a constant speed; instead, we might get a little
    bounce back if we were bouncing a ball or a slow down when opening a chest of
    drawers. To achieve this effect, we need to use easing functions, which control
    the rate of change. There are plenty of examples available on the Internet—a great
    place to start is [http://www.easings.net](http://www.easings.net)—or perhaps
    we can watch the effects on sites such as [http://matthewlein.com/ceaser/](http://matthewlein.com/ceaser/).
    Over the next few pages, we're going to explore these in more detail and look
    at tips and tricks that we can use to push our animation skills to a new level.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 动画并不总是以恒定的速度运动；相反，如果我们弹跳一个球或者打开抽屉时会有一些反弹，或者会有一些减速。为了实现这种效果，我们需要使用缓动函数，它们控制变化的速率。在互联网上有很多例子——一个很好的起点是[http://www.easings.net](http://www.easings.net)——或者我们可以观看一些网站上的效果，比如[http://matthewlein.com/ceaser/](http://matthewlein.com/ceaser/)。在接下来的几页中，我们将更详细地探讨这些，并且看一些技巧，可以帮助我们将动画技能推向新的高度。
- en: Designing custom animations
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计定制动画
- en: If you've spent any time developing jQuery code that animates objects or elements
    on a page, you will no doubt have used either the jQuery UI or possibly a plugin,
    such as jQuery Easing, created by George Smith ([http://gsgd.co.uk/sandbox/jquery/easing/](http://gsgd.co.uk/sandbox/jquery/easing/)).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您花费过任何时间开发jQuery代码来动画页面上的对象或元素，无疑您曾使用过jQuery UI或者可能是插件，比如由George Smith创建的jQuery
    Easing（[http://gsgd.co.uk/sandbox/jquery/easing/](http://gsgd.co.uk/sandbox/jquery/easing/)）。
- en: Both are great ways of animating objects on a page, using easing methods such
    as `easeIn()` or `easeOutShine()`. The trouble is that both require the use of
    plugins, which add unnecessary baggage to our code; they are also a very safe
    way of achieving the effect we need. What if I said we don't need either and can
    produce the same effects just by using jQuery itself?
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种方法都是在页面上动画化对象的绝佳方法，使用缓动方法如`easeIn()`或`easeOutShine()`。问题在于两者都需要使用插件，这为我们的代码增添了不必要的负担；它们也是实现我们需要的效果的一种非常安全的方法。如果我说我们两者都不需要，只需使用jQuery本身就可以产生相同的效果呢？
- en: 'Before I go through how to do this, let''s take a look at a working demo that
    shows this in action:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在我介绍如何做到这一点之前，让我们看一个展示这一点的工作演示：
- en: 'Let''s make a start by extracting the relevant files from the code download
    that accompanies this book—for this demo, we will need copies of the following:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们开始吧，从附带本书的代码下载中提取相关文件——对于这个演示，我们将需要以下文件的副本：
- en: '`customanimate.html`: Save this file in the root area of our project folder'
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`customanimate.html`：将此文件保存在项目文件夹的根区域'
- en: '`customanimate.css`: Save this file in the `css` subfolder of our project folder'
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`customanimate.css`：将此文件保存在项目文件夹的`css`子文件夹中'
- en: '`customanimate.js`: Save this file in the `js` subfolder of our project folder'
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`customanimate.js`：将此文件保存在项目文件夹的`js`子文件夹中'
- en: Open the Sans font; save this in the `font` folder of our project folder; alternatively,
    the font is available at [http://www.fontsquirrel.com/fonts/open-sans](http://www.fontsquirrel.com/fonts/open-sans).
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 打开 Sans 字体；将其保存在项目文件夹的`font`文件夹中；或者，该字体可以在[http://www.fontsquirrel.com/fonts/open-sans](http://www.fontsquirrel.com/fonts/open-sans)获取。
- en: If you preview the `customanimate.html` file in a browser and then run the demo,
    you should see something akin to this screenshot, where the `<div>` tag is partway
    through running the animation:![Designing custom animations](img/image00387.jpeg)
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你在浏览器中预览`customanimate.html`文件，然后运行演示，你应该会看到类似于这个屏幕截图的东西，其中`<div>`标签正在运行动画的中途：![设计自定义动画](img/image00387.jpeg)
- en: So, what happened here? Well, we've used nothing more earth-shattering than
    a standard `.animate()` to increase the size of and move the `<div>` tag to its
    new location.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，这里发生了什么？嗯，我们所用的不过是一个标准的`.animate()`，用来增加`<div>`标签的大小并将其移动到新位置。
- en: 'There''s nothing new here then, right? Wrong, the "new" bit here is actually
    how we constructed the easing! If you take a look at `customanimate.js`, you will
    find this code:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这里没有什么新鲜的，对吧？错了，这里的“新鲜”之处实际上在于我们如何构建缓动！如果你看一下`customanimate.js`，你会找到这段代码：
- en: '[PRE6]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'All we''ve done is take the math needed to achieve the same effect and wrapped
    it in a jQuery object that extends `$.easing`. We can then reference the new easing
    method within our code, as follows:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所做的就是取得实现相同效果所需的数学，并将其包装在一个扩展了`$.easing`的 jQuery 对象中。然后我们可以在我们的代码中引用新的缓动方法，如下所示：
- en: '[PRE7]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This opens up lots of possibilities; we can then replace the custom-easing
    function with our own creation. A trawl of the Internet threw up lots of possibilities,
    such as these two examples:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这打开了很多可能性；然后我们可以用我们自己的创意替换自定义的缓动函数。在互联网上搜罗了很多可能性，比如这两个例子：
- en: '[PRE8]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: To really get stuck into understanding how easing functions work is outside
    the scope of this book—if you are interested in the math behind it, then there
    are several sites on the Internet that explain this in greater detail.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 要真正深入了解缓动函数是如何工作的，超出了本书的范围——如果你对其背后的数学感兴趣，那么互联网上有几个网站可以更详细地解释这个问题。
- en: Note
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Two examples of how to work with easing functions include [http://upshots.org/actionscript/jsas-understanding-easing](http://upshots.org/actionscript/jsas-understanding-easing)
    and [http://www.brianwald.com/journal/creating-custom-jquery-easing-animations](http://www.brianwald.com/journal/creating-custom-jquery-easing-animations)—note
    that they do make for dry reading though!
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 两个使用缓动函数的示例包括[http://upshots.org/actionscript/jsas-understanding-easing](http://upshots.org/actionscript/jsas-understanding-easing)和[http://www.brianwald.com/journal/creating-custom-jquery-easing-animations](http://www.brianwald.com/journal/creating-custom-jquery-easing-animations)—注意，它们看起来确实有点枯燥！
- en: Suffice to say that the best source for the easing functions is the source code
    for jQuery, where we can view each of the calculations required and use these
    as a basis for creating our own easing effects.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，获得缓动函数的最佳来源是 jQuery 的源代码，我们可以查看每个所需的计算，并将其用作创建自己的缓动效果的基础。
- en: This is all well and good; it's a great way to achieve good animations without
    producing complex code that is difficult to understand or debug. But…you know
    me; I think we can still do better. How? That's easy, what if we can replicate
    some of the easing effects we might see in CSS transitions in jQuery?
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这一切都很好；这是一个很好的方式来实现良好的动画，而不会产生难以理解或调试的复杂代码。但是……你知道的，我认为我们仍然可以做得更好。怎么做？很简单，如果我们能够在
    jQuery 中复制一些我们可能在 CSS 过渡中看到的缓动效果呢？
- en: Converting to use with jQuery
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 转换为与 jQuery 一起使用
- en: At this point, you probably think I really have lost it now; CSS transitions
    use Bezier curves, which are not supported when working with jQuery's `animate()`
    method. So, how can we achieve the same effect?
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，你可能认为我现在真的疯了；CSS 过渡使用贝塞尔曲线，当与 jQuery 的`animate()`方法一起使用时不受支持。那么，我们如何实现相同的效果呢？
- en: 'The answer lies, as always, with a plugin—granted, this goes against what we''ve
    talked about in the previous demo though! However, there is a difference: this
    plugin weighs in at 0.8 KB when compressed; this is significantly smaller than
    using the jQuery UI or the Easing plugin.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 答案总是在一个插件之中—尽管这与我们在以前的演示中所讨论的有所不同！然而，存在一个区别：这个插件在压缩后的大小为0.8 KB；这明显比使用jQuery
    UI或Easing插件要小得多。
- en: 'The plugin that we''re going to use is the Bez plugin by Robert Grey, available
    at [https://github.com/rdallasgray/bez](https://github.com/rdallasgray/bez); this
    will allow us to use cubic-bezier values, such as `0.23, 1, 0.32, 1`, which is
    the equivalent of `easeOutQuint`. Let''s take a look at this in action:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们打算使用的插件是Robert Grey开发的Bez插件，网址为[https://github.com/rdallasgray/bez](https://github.com/rdallasgray/bez)；这将使我们能够使用三次贝塞尔的值，比如`0.23,
    1, 0.32, 1`，这相当于`easeOutQuint`。让我们看看它的效果：
- en: We first need to download and install the Bez plugin—we can download it from
    GitHub at [https://github.com/rdallasgray/bez](https://github.com/rdallasgray/bez);
    add a reference to it from within `customanimate.html`, immediately underneath
    the link to jQuery.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先需要下载并安装Bez插件—可以从GitHub上下载，网址为[https://github.com/rdallasgray/bez](https://github.com/rdallasgray/bez)；然后将其引用于`customanimate.html`，就在对jQuery的引用下面。
- en: 'Next, open up a copy of `customanimate.js`; go ahead and alter this line as
    shown, which replaces the `easeInBackCustom` action we used earlier:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，打开一份`customanimate.js`的副本；然后按照下面显示的方式更改这一行，替换我们之前使用的`easeInBackCustom`动作：
- en: '[PRE9]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Save both the files; if you preview the results in a browser, you will see a
    different action when running the demo as compared to what you saw in the previous
    example.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 保存这两个文件；如果您在浏览器中预览结果，您将看到与前面示例中所见不同的操作。
- en: 'So, how did we get here? The trick behind this is a combination of the plugin
    and the easings.net website. Using `easeOutQuint` as our example easing, if we
    first visit [http://easings.net/#easeOutQuint](http://easings.net/#easeOutQuint),
    we can see the cubic-bezier values required to produce our effect: `0.86, 0, 0.07,
    1`. All we need to do is insert this into a call to the Bez plugin and we are
    all set:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们是如何做到这一点的呢？这背后的诀窍是结合插件和easings.net网站。以`easeOutQuint`作为我们的示例缓动效果，如果我们首先访问[http://easings.net/#easeOutQuint](http://easings.net/#easeOutQuint)，我们可以看到产生我们效果所需的三次贝塞尔值：`0.86,
    0, 0.07, 1`。我们所需要做的就是将它们插入到对Bez插件的调用中，就完成了：
- en: '[PRE10]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'If, however, we want to create our own cubic-bezier effect, then we can use
    [cubic-bezier.com](http://cubic-bezier.com) to create our effect; this will give
    us the values we need to use, as shown in the following screenshot:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要创建自己的三次贝塞尔效果，我们可以使用[cubic-bezier.com](http://cubic-bezier.com)来创建我们的效果；这将给我们提供需要使用的数值，如下面的截图所示：
- en: '![Converting to use with jQuery](img/image00388.jpeg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![转换为jQuery使用](img/image00388.jpeg)'
- en: We can then plug these into our object call in exactly the same way as we did
    in the previous example. The beauty of using this method is that we have an easy
    route to convert the animations to CSS3 equivalents, should we later decide to
    reduce our usage of jQuery at some point in the future.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以像在上一个例子中那样将这些值插入到我们的对象调用中。使用这种方法的美妙之处在于，以后如果我们决定减少对jQuery的使用，我们可以轻松地将动画转换为CSS3的等效动画。
- en: Note
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To learn more about the theory behind Bezier curves, take a look at the Wikipedia
    article available at [http://en.wikipedia.org/wiki/B%C3%A9zier_curve](http://en.wikipedia.org/wiki/B%C3%A9zier_curve).
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多有关贝塞尔曲线背后理论的知识，请参阅维基百科上的文章，网址为[http://en.wikipedia.org/wiki/B%C3%A9zier_curve](http://en.wikipedia.org/wiki/B%C3%A9zier_curve)。
- en: 'Okay, so we''ve covered how to create our own animation-easing functions; what
    if we wanted to use effects available from existing libraries? No problem, there
    are some good examples available on the Internet, which include the following:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，所以我们已经学会了如何创建自己的动画缓动函数；如果我们想要使用现有库中可用的效果该怎么办？没问题，互联网上有一些很好的示例，包括以下内容：
- en: '[http://daneden.github.io/animate.css/](http://daneden.github.io/animate.css/):
    This is the home of the Animate.css library; we can reproduce the effects within
    this library using the `jQuery.Keyframes` plugin available at [https://github.com/jQueryKeyframes/jQuery.Keyframes](https://github.com/jQueryKeyframes/jQuery.Keyframes).'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://daneden.github.io/animate.css/](http://daneden.github.io/animate.css/)：这是Animate.css库的主页；我们可以使用[https://github.com/jQueryKeyframes/jQuery.Keyframes](https://github.com/jQueryKeyframes/jQuery.Keyframes)上提供的`jQuery.Keyframes`插件来复制此库中的效果。'
- en: '[https://github.com/yckart/jquery-custom-animations](https://github.com/yckart/jquery-custom-animations):
    This library contains a number of different effects, created in a style similar
    to the jQuery UI; this can be dropped in and the effects can be referenced in
    a similar fashion to the *Designing custom animations* demo from earlier in this
    chapter.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/yckart/jquery-custom-animations](https://github.com/yckart/jquery-custom-animations)：这个库包含了许多不同的效果，以类似于
    jQuery UI 的风格创建；可以轻松使用并以类似于本章前面 *设计自定义动画* 演示中的方式引用效果。'
- en: '[https://github.com/ThrivingKings/animo.js](https://github.com/ThrivingKings/animo.js):
    Animo.JS takes a different approach; instead of using jQuery''s `animate()` function,
    it uses its own `animo()` method to animate objects. It uses the effects from
    the `Animate.css` library, created by Dan Eden—although one might argue whether
    it is worth the extra overhead, it is nonetheless worth a look as a possible source
    of animations for your projects.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/ThrivingKings/animo.js](https://github.com/ThrivingKings/animo.js)：Animo.JS
    采用了不同的方法；它不使用 jQuery 的 `animate()` 函数，而是使用自己的 `animo()` 方法来对对象进行动画处理。它使用了 `Animate.css`
    库中的效果，该库由 Dan Eden 创建——虽然有人可能会争论是否值得额外开销，但它仍然值得一看，可能是你项目中动画的可能来源之一。'
- en: '[http://lvivski.com/anima/](http://lvivski.com/anima/): It''s worth taking
    a look at this library carefully; the source code contains a number of cubic-bezier
    values within the `easings.js` source file. These can be easily lifted into your
    own code projects if desired or can provide inspiration for your own examples,
    perhaps.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://lvivski.com/anima/](http://lvivski.com/anima/)：值得仔细查看这个库；源代码中包含了 `easings.js`
    源文件中的许多三次贝塞尔值。如果需要的话，这些可以轻松地移植到你自己的代码项目中，或者可以为你自己的示例提供灵感。'
- en: It's time to put some of the animation concepts we've covered to good use; let's
    move on and take a look at some of the examples of using animation in our own
    projects.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候将我们所学到的动画概念投入到实践中了；让我们继续，看看如何在我们自己的项目中使用动画的一些例子。
- en: Implementing some custom animations
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现一些自定义动画
- en: Throughout this chapter, we've explored the use of jQuery to animate objects
    and seen how this can be compared with CSS-based animations; we've also looked
    at creating some custom-easing patterns that control how the elements are moved
    on screen.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了使用 jQuery 对对象进行动画处理，并看到了这与基于 CSS 的动画的比较；我们还看到了如何创建一些自定义的缓动模式，以控制元素在屏幕上的移动方式。
- en: Enough of the theory, let's get stuck into some practical uses! Over the next
    few pages, we're going to take a look at some examples of animating elements;
    we will include some examples for responsive sites, as this is a popular topic,
    with the rise in the use of mobile devices to access content on the Internet.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 够了解理论，让我们深入一些实际应用吧！在接下来的几页中，我们将看一些元素动画的例子；我们将包括一些响应式网站的示例，因为这是一个热门话题，随着移动设备用于访问互联网内容的增加。
- en: Let's make a start, with a look at animating a simple element, in the form of
    some buttons—watch out for the twist at the end of the demo!
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧，看看如何对一个简单的元素进行动画处理，以按钮的形式——注意演示结束时的转折！
- en: Animating rollover buttons
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对按钮进行动画处理
- en: The humble button must be one of the most important elements on any website;
    buttons come in all shapes and sizes, and can be created from the standard `<button>`
    HTML element, or by the use of an `<input>` field.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 谦逊的按钮必须是任何网站上最重要的元素之一；按钮有各种形状和大小，并且可以通过标准的 `<button>` HTML 元素或使用 `<input>` 字段创建。
- en: In this demo, we're going to use jQuery to not only slide in and slide out the
    button icons, but also to rotate them at the same time. But hold on—we all know
    that jQuery doesn't support the rotating of elements, right?
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个演示中，我们将使用 jQuery 不仅来滑入和滑出按钮图标，还将同时旋转它们。但是等等——我们都知道 jQuery 不支持元素的旋转，对吗？
- en: We could can use plugins such as QTransform ([https://github.com/puppybits/QTransform](https://github.com/puppybits/QTransform))
    or even jQuery Animate Enhanced ([http://playground.benbarnett.net/jquery-animate-enhanced/](http://playground.benbarnett.net/jquery-animate-enhanced/)),
    but this has an overhead—let's take a different route. Instead, we'll use a monkey
    patch to directly retrofit support; to prove that it works, we'll update a **Codrops**
    demo, which had the original version of the rolling buttons on its site, to use
    jQuery 2.1 instead.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用插件，例如QTransform（[https://github.com/puppybits/QTransform](https://github.com/puppybits/QTransform)），甚至是jQuery
    Animate Enhanced（[http://playground.benbarnett.net/jquery-animate-enhanced/](http://playground.benbarnett.net/jquery-animate-enhanced/)），但这样会增加负担，我们采用不同的方式。相反，我们将使用Monkey
    Patch直接改造支持；为了证明它有效，我们将更新**Codrops**演示，该演示在其网站上有原始版本的滚动按钮，现在将使用jQuery 2.1。
- en: Note
  id: totrans-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The original version of this demo is available at [http://tympanus.net/codrops/2010/04/30/rocking-and-rolling-rounded-menu-with-jquery/](http://tympanus.net/codrops/2010/04/30/rocking-and-rolling-rounded-menu-with-jquery/).
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 此演示的原始版本可在[http://tympanus.net/codrops/2010/04/30/rocking-and-rolling-rounded-menu-with-jquery/](http://tympanus.net/codrops/2010/04/30/rocking-and-rolling-rounded-menu-with-jquery/)找到。
- en: 'Let''s take a look at the demo:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看演示：
- en: 'Extract the relevant files from the code download that accompanies this book;
    for this demo, we will need the following files:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从本书附带的代码下载中提取相关文件；对于此演示，我们需要以下文件：
- en: '`rollingbuttons.html`: Save this file in the root subfolder of your project
    area'
  id: totrans-151
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rollingbuttons.html`：将此文件保存在项目区域的根子文件夹中'
- en: '`style.css`: Save this file in the `css` subfolder of your project area'
  id: totrans-152
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`style.css`：将此文件保存在项目区域的`css`子文件夹中'
- en: '`jquery-animate-css-rotate-scale.js`: Save this file in the `js` subfolder
    of your project area'
  id: totrans-153
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jquery-animate-css-rotate-scale.js`：将此文件保存在项目区域的`js`子文件夹中'
- en: '`rollingbuttons.js`: Save this file in the `js` subfolder of your project area'
  id: totrans-154
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rollingbuttons.js`：将此文件保存在项目区域的`js`子文件夹中'
- en: '`img`: Copy this folder to the project area'
  id: totrans-155
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`img`：将此文件夹复制到项目区域'
- en: Note
  id: totrans-156
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The original version of this monkey patch is available at [http://www.zachstronaut.com/posts/2009/08/07/jquery-animate-css-rotate-scale.html](http://www.zachstronaut.com/posts/2009/08/07/jquery-animate-css-rotate-scale.html);
    it was developed for jQuery 1.3.1+, but I have not seen any adverse effects when
    I used it with jQuery 2.1.
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此Monkey Patch的原始版本可在[http://www.zachstronaut.com/posts/2009/08/07/jquery-animate-css-rotate-scale.html](http://www.zachstronaut.com/posts/2009/08/07/jquery-animate-css-rotate-scale.html)找到；它是为jQuery
    1.3.1+开发的，但是当我将其与jQuery 2.1一起使用时，我没有看到任何不良影响。
- en: Run the demo in a browser and then try hovering over one or more buttons. If
    all is working OK, then we will see the green-colored icon image start to spin
    out to the left while the gray background expands to form a long pill, with the
    links held within, as shown here:![Animating rollover buttons](img/image00389.jpeg)
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中运行演示，然后尝试悬停在一个或多个按钮上。如果一切运行正常，我们将看到绿色图标图像开始向左旋转，而灰色背景扩展形成一个长的药片，其中包含链接，如下图所示：![Animating
    rollover buttons](img/image00389.jpeg)
- en: Exploring the code in more detail
  id: totrans-159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更详细地探索代码
- en: This demo produces a nifty effect as well as acts as a space saver; the information
    is only exposed when visitors need to view it and is hidden at all other times.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 此演示产生了一个巧妙的效果，同时还节省了空间；访问者只有在需要查看信息时才会暴露，而在其他时间都是隐藏的。
- en: 'If we delve into the code in more detail though, it reveals an interesting
    concept: jQuery does not offer native support for the use of rotating elements
    when using `.animate()`, as mentioned at the start of this demo.'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果我们更仔细地查看代码，就会发现一个有趣的概念：jQuery在使用`.animate()`时不提供旋转元素的本地支持，就像在此演示开始时提到的那样。
- en: So, how are we going to get around this? We can use a plugin, but instead, we're
    using a monkey patch (created by the developer Zachary Johnson) to retrofit support
    to jQuery. It's worth noting that there is always a risk in using patches (as
    outlined in [Chapter 2](part0021.xhtml#aid-K0RQ1 "Chapter 2. Customizing jQuery"),
    *Customizing jQuery*), but in this instance, it seems that despite the update
    to using jQuery 2.1, there are no noticeable ill-effects.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们怎样才能解决这个问题呢？我们可以使用插件，但相反，我们使用一个Monkey Patch（由开发者Zachary Johnson创建）来给jQuery添加支持。值得注意的是，使用补丁总是有风险的（如[第2章](part0021.xhtml#aid-K0RQ1
    "Chapter 2. Customizing jQuery")所述，“自定义jQuery”），但在这种情况下，尽管更新到了jQuery 2.1，似乎没有明显的不良影响。
- en: 'If you want to see the difference when the patch is being used, activate a
    DOM Inspector, such as Firebug, before running the demo. Hover over one of the
    icons; you should see something akin to this screenshot:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想看到在使用补丁时的差异，请在运行演示之前激活DOM检查器，如Firebug。将鼠标悬停在其中一个图标上，你应该会看到类似于这张截图的东西：
- en: '![Exploring the code in more detail](img/image00390.jpeg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![更详细地探索代码](img/image00390.jpeg)'
- en: If you want more in-depth details on how `matrix()` works, then visit the notes
    on Mozilla's site, at [https://developer.mozilla.org/en-US/docs/Web/CSS/transform](https://developer.mozilla.org/en-US/docs/Web/CSS/transform).
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想深入了解`matrix()`的工作原理，请访问Mozilla的笔记，网址为[https://developer.mozilla.org/en-US/docs/Web/CSS/transform](https://developer.mozilla.org/en-US/docs/Web/CSS/transform)。
- en: Let's move on and take a look at our next animation example. I'm sure you've
    used an overlay in some form or other, but we're going to take a look at an overlay
    that takes a whole new approach and does away with the gray mask that is typical
    with most overlays.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续并查看我们的下一个动画示例。我相信你以某种形式使用过覆盖层，但我们将看一个采用全新方法且摒弃了大多数覆盖层中典型的灰色遮罩的覆盖层。
- en: Animating an overlay effect
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动画覆盖效果
- en: If you've spent any time visiting websites on the Internet, you will no doubt
    have come across ones that use some form of overlay, right?
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在互联网上浏览网站花费了一些时间，你肯定会遇到一些使用某种形式覆盖层的网站，对吧？
- en: 'You know the drill: they first black out the screen with a semitransparent
    overlay and then begin to display an enlarged version of an image or video. It''s
    a typical effect found on thousands of sites worldwide and can be very effective
    if put to good use.'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 你知道这套流程：它们首先用半透明的覆盖层将屏幕变黑，然后开始显示图像或视频的放大版本。这是在全球数千个网站上找到的典型效果，如果使用得当，可以非常有效。
- en: 'However, you know me better than this; I like to take things further! What
    if we break the tradition and have an overlay that doesn''t show an image but
    shows an all-over display? Intrigued? Let''s take a look at what I mean in action:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，你比这更了解我；我喜欢将事情推向更深层次！如果我们打破传统，做一个不显示图像但显示全屏展示的覆盖层，会怎么样？感兴趣吗？让我们看看我指的是什么：
- en: '![Animating an overlay effect](img/image00391.jpeg)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![动画覆盖效果](img/image00391.jpeg)'
- en: For this demo, we're going to run a version of the overlay effect, shown at
    [http://tympanus.net/Tutorials/ExpandingOverlayEffect/](http://tympanus.net/Tutorials/ExpandingOverlayEffect/).
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个演示，我们将运行覆盖效果的一个版本，显示在[http://tympanus.net/Tutorials/ExpandingOverlayEffect/](http://tympanus.net/Tutorials/ExpandingOverlayEffect/)。
- en: 'Let''s start by extracting the following files from the code download that
    accompanies this book; save them in the relevant folders within your project area:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从与本书附带的代码下载中提取以下文件开始；将它们保存在项目区域内的相应文件夹中：
- en: '`jquery.min.js`: Save this file in the `js` subfolder of your project area'
  id: totrans-174
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jquery.min.js`: 将此文件保存在项目区域的`js`子文件夹中'
- en: '`fittext.js`: Save this file in the `js` subfolder of your project area'
  id: totrans-175
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fittext.js`：将此文件保存在项目区域的`js`子文件夹中'
- en: '`boxgrid.js`: Save this file in the `js` subfolder of your project area'
  id: totrans-176
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boxgrid.js`：将此文件保存在项目区域的`js`子文件夹中'
- en: '`default.css`, `component.css`, and `climacons.css`: Save these files in the
    `css` subfolder of your project area'
  id: totrans-177
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default.css`、`component.css`和`climacons.css`：将这些文件保存在项目区域的`css`子文件夹中'
- en: '`overlayeffect.html`: Save this file in the root of your project area'
  id: totrans-178
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`overlayeffect.html`：将此文件保存在项目区域的根目录中'
- en: Run `overlayeffect.html` and then try clicking on one of the colored boxes.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`overlayeffect.html`然后尝试点击其中一个彩色框。
- en: Notice what happens? It displays an overlay effect as you expected, but this
    one covers the entire browser window and does not have the mask effect that is
    frequently displayed with the more traditional overlay effects.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 注意发生了什么？它显示了一个覆盖效果，就像你期望的那样，但这个效果覆盖了整个浏览器窗口，并且没有常见的传统覆盖效果中经常显示的遮罩效果。
- en: In this demo, we've used a mix of HTML to produce our initial grid; the `fittext.js`
    plugin is used to help ensure that the text (and consequently the overlay) is
    resized to fill the screen; the overlay effect is produced using the `boxgrid.js`
    plugin from within our code.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个演示中，我们使用了一些HTML来生成我们的初始网格；`fittext.js`插件用于帮助确保文本（因此是覆盖层）被调整大小以填充屏幕；覆盖效果是使用我们的代码内的`boxgrid.js`插件产生的。
- en: The magic happens in `boxgrid.js`—this contains the `jquery.debouncedresize.js`
    plugin by Louis Remi; although this is 2 years old; it still works perfectly well
    within modern browsers. You can download the original plugin from [https://github.com/louisremi/jquery-smartresize/blob/master/jquery.debouncedresize.js](https://github.com/louisremi/jquery-smartresize/blob/master/jquery.debouncedresize.js).
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 魔法发生在`boxgrid.js`中——这包含了由Louis Remi开发的`jquery.debouncedresize.js`插件；尽管这已经有2年历史了；但在现代浏览器中仍然完美运行。您可以从[https://github.com/louisremi/jquery-smartresize/blob/master/jquery.debouncedresize.js](https://github.com/louisremi/jquery-smartresize/blob/master/jquery.debouncedresize.js)下载原始插件。
- en: Let's change focus and move on to take a look at how you can equally apply jQuery
    animation to responsive websites. In the first of two demos, you'll see how to
    apply a mix of CSS3, jQuery, and `history.pushState` in order to create some pleasing
    transition effects that can turn a multiple-page site into what appears to be
    a single page application.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们改变焦点，继续看一看如何将jQuery动画应用于响应式网站。在两个演示中的第一个中，您将看到如何结合使用CSS3、jQuery和`history.pushState`来创建一些令人愉悦的转换效果，这些效果可以将一个多页面站点转变为一个看似是单页面应用程序。
- en: Animating in a responsive website
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在响应式网站中进行动画处理
- en: How often have you visited a site only to find out that you have to wait for
    ages between each page load? Sounds familiar?
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 您有多少次访问了一个站点，结果发现您必须在每个页面加载之间等待很长时间？听起来熟悉吗？
- en: Our expectations of page transitions have changed over the last few years—the
    clunky side effects of elements rearranging on a page will not suffice; we expect
    more from a website. JavaScript-based **Single Page Application** (**SPA**) frameworks
    are often seen as the answer, but at the expense of having to use obtrusive code.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 过去几年来，我们对页面转换的期望已经发生了变化——页面上元素重新排列的笨拙副作用已经不够了；我们对网站有了更多期望。基于JavaScript的**单页面应用程序**（**SPA**）框架通常被视为答案，但是要以使用冗长的代码为代价。
- en: We can do much better than this. We can introduce smoothState.js, a useful plugin
    created by Miguel Ángel Pérez, that allows us to add transitions to make the whole
    experience smoother and more enjoyable for visitors. In this example, we're going
    to use a modified version of the demo provided by the plugin's author; some of
    the code has been reorganized and cleaned up from the original.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以做得比这更好。我们可以介绍smoothState.js，这是由Miguel Ángel Pérez创建的一个有用的插件，它允许我们添加转换效果，使整个体验对访问者更加平滑和愉快。在这个示例中，我们将使用插件作者提供的演示的修改版本；一些代码已经从原始代码中重新组织和清理。
- en: 'Let''s take a look at the plugin in action and see how it can make for a much
    smoother experience. To do this, perform the following steps:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看插件的实际效果，并看看它如何使体验更加流畅。要做到这一点，请执行以下步骤：
- en: 'From the code download that accompanies this book, extract copies of the following
    files:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从附带本书的代码下载中，提取以下文件的副本：
- en: '`smoothstate.html` and `smoothstate.css`: Save these files in the root area
    and `css` subfolder of your project folder, respectively.'
  id: totrans-190
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`smoothstate.html`和`smoothstate.css`：将这些文件分别保存在您项目文件夹的根目录和`css`子文件夹中。'
- en: '`jquery.smoothstate.js`: Save this in the `js` subfolder of your project area;
    the latest version can be downloaded from [https://github.com/miguel-perez/jquery.smoothState.js](https://github.com/miguel-perez/jquery.smoothState.js).'
  id: totrans-191
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jquery.smoothstate.js`：将其保存在项目区域的`js`子文件夹中；最新版本可从[https://github.com/miguel-perez/jquery.smoothState.js](https://github.com/miguel-perez/jquery.smoothState.js)下载。'
- en: '`jquery.min.js`: Save this in the `js` subfolder of your project area.'
  id: totrans-192
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jquery.min.js`：将其保存在项目区域的`js`子文件夹中。'
- en: '`animate.css`: Save this in the `css` subfolder of your project area; the latest
    version is available at [http://daneden.github.io/animate.css/](http://daneden.github.io/animate.css/).'
  id: totrans-193
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`animate.css`：将其保存在项目区域的`css`子文件夹中；最新版本可在[http://daneden.github.io/animate.css/](http://daneden.github.io/animate.css/)下载。'
- en: 'The Roboto font: A copy of the two fonts used are in the code download that
    accompanies this book. Alternatively, they can be downloaded from the Font Squirrel
    website, at [http://www.fontsquirrel.com/fonts/roboto](http://www.fontsquirrel.com/fonts/roboto).
    We only need to select the WOFF font; we will use the light and regular versions
    of the font in our demo.'
  id: totrans-194
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Roboto字体：使用的两种字体的副本在附带本书的代码下载中。或者，它们可以从Font Squirrel网站下载，网址为[http://www.fontsquirrel.com/fonts/roboto](http://www.fontsquirrel.com/fonts/roboto)。我们只需要选择WOFF字体；我们将在演示中使用字体的轻和常规版本。
- en: Run the `smoothstate.html` file in a browser; try clicking on the middle link
    of the three and see what happens. Notice how it displays the next page, which
    is `transitions.html`. Instead of the pause we frequently get when loading new
    pages, smoothState.js treats the site as if it were a SPA, or single page application.
    You should see a very simple page display, as shown in this screenshot:![Animating
    in a responsive website](img/image00392.jpeg)
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中运行`smoothstate.html`文件；尝试点击三个链接中的中间链接，看看会发生什么。注意它如何显示下一个页面，即`transitions.html`。smoothState.js将网站视为单页面应用程序，而不是加载新页面时经常出现的暂停。您应该看到一个非常简单的页面显示，如下图所示：![在响应式网站中进行动画处理](img/image00392.jpeg)
- en: Traditionally, when faced with this issue, many might resort to an SPA framework
    in order to fix the issue and improve the transition appearance. Using this approach
    will work, but at the expense of the benefits gained from using unobtrusive code.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上，面对这个问题时，许多人可能会诉诸于SPA框架，以解决问题并改善过渡外观。采用这种方法确实有效，但会以使用不显眼代码获得的好处为代价。
- en: Instead, we can use a mix of jQuery, CSS3, `history.pushState()`, and progressive
    enhancement to achieve the same effect, resulting in a better experience for our
    end users.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，我们可以使用jQuery、CSS3、`history.pushState()`和渐进增强的混合来实现相同的效果，从而为我们的最终用户带来更好的体验。
- en: Note
  id: totrans-198
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It's worth taking a look at the website documentation, available at [http://weblinc.github.io/jquery.smoothState.js/index.html](http://weblinc.github.io/jquery.smoothState.js/index.html).
    There is a useful tutorial on the CSS-Tricks website, at [https://css-tricks.com/add-page-transitions-css-smoothstate-js/](https://css-tricks.com/add-page-transitions-css-smoothstate-js/).
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 值得一提的是，可以查看网站文档，位于[http://weblinc.github.io/jquery.smoothState.js/index.html](http://weblinc.github.io/jquery.smoothState.js/index.html)。在CSS-Tricks网站上有一个有用的教程，位于[https://css-tricks.com/add-page-transitions-css-smoothstate-js/](https://css-tricks.com/add-page-transitions-css-smoothstate-js/)。
- en: Maintaining a good user experience should always be at the forefront of any
    developer's mind—this is more important when working with responsive sites. A
    key part of this should be to monitor the performance of our animations, in order
    to ensure that we get a good balance of user experience against the demand on
    our servers.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 维护良好的用户体验应始终是任何开发人员心中的首要任务——在处理响应式网站时，这更为重要。其中一个关键部分应该是监控我们动画的性能，以确保我们在用户体验和对服务器的需求之间取得良好的平衡。
- en: There are a few tricks that we can use to help with performance when it comes
    to using jQuery-based animations on responsive sites. Let's take a look at some
    of the issues and how we can either mitigate or resolve them.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理基于jQuery的动画在响应式网站上使用时，我们可以使用一些技巧来帮助提高性能。让我们来看看其中的一些问题以及我们如何缓解或解决它们。
- en: Considering animation performance on responsive sites
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 考虑响应式网站上的动画性能
- en: In this modern age of accessing the Internet from any device, the emphasis on
    user experience is more critical than ever—this is not helped when jQuery is used.
    Acting as the lowest common denominator, it helps to simplify working with content
    (particularly for complex animations) but is not optimized for their use.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个可以从任何设备访问互联网的现代时代，对用户体验的重视比以往任何时候都更为关键——使用jQuery并不会帮助这一点。作为最低公共分母，它有助于简化处理内容（特别是复杂动画），但并不为其使用进行了优化。
- en: 'There are a few issues that we will come across when animating content using
    jQuery—we''ve covered some of them earlier in the chapter, in *Choosing CSS or
    jQuery*; they apply equally to responsive sites. In addition, there are other
    considerations we need to be aware of, which include the following:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用jQuery进行内容动画时，我们会遇到一些问题——我们在本章早些时候已经讨论过其中一些，在*选择CSS还是jQuery*中介绍过；它们同样适用于响应式网站。此外，还有其他一些需要我们注意的问题，包括以下内容：
- en: Animations that use jQuery will consume a lot of resources; this coupled with
    content that might not suit a mobile environment (due to its volume) will create
    a slow experience on desktops. This will be even worse on laptops and mobile devices!
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用jQuery的动画将消耗大量资源；再加上可能不适合移动环境的内容（由于其量），将导致桌面体验缓慢。在笔记本电脑和移动设备上情况会更糟！
- en: End users on a mobile device are frequently only interested in getting the information
    they need; animations may make a site look good but are often not optimized for
    mobile devices and are likely to slow access and result in the browser crashing.
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移动设备上的最终用户通常只对获取所需信息感兴趣；动画可能使网站看起来很好，但通常不针对移动设备进行优化，并且可能会减慢访问速度并导致浏览器崩溃。
- en: jQuery's garbage collection process is frequently known to cause issues; its
    use of `setInterval()` in place of `requestAnimationFrame()` will result in high
    frame rates, making for an experience that is likely to stutter and show a high
    rate of frame dropouts.
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: jQuery的垃圾收集进程经常会导致问题；它使用`setInterval()`而不是`requestAnimationFrame()`会导致高帧率，使得体验可能会出现卡顿和高帧丢失率。
- en: Tip
  id: totrans-208
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: At the time of writing, there are plans to replace `setInterval` (and `clearInterval`)
    in jQuery with `requestAnimationFrame` (with `clearAnimationFrame`).
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在撰写本文时，有计划使用`requestAnimationFrame`（及`clearAnimationFrame`）替换jQuery中的`setInterval`（及`clearInterval`）。
- en: If we are using animations—both jQuery or plain CSS—then on some platforms,
    we frequently need to enable hardware acceleration. While this can help with performance
    on mobile devices, it can also lead to flickering if hardware-accelerated elements
    overlap with other elements that are not hardware-accelerated. We will touch on
    how to enable 3D rendering later in this chapter, in the *Improving the appearance
    of animations* section.
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我们使用动画——无论是jQuery还是纯CSS——在一些平台上，我们经常需要启用硬件加速。虽然这可以提高移动设备的性能，但也可能导致闪烁，如果硬件加速的元素与不是硬件加速的其他元素重叠。在本章稍后的*改善动画外观*部分，我们将介绍如何启用3D渲染。
- en: jQuery's `.animate` increments the element's `style` attribute on every animation
    frame; this forces the browser to recalculate the layout and leads to continual
    refreshes. This is particularly acute on responsive sites, where each element
    needs to be redrawn each time the screen is resized; this will place additional
    demands on server resources and impact performance. If desired, plugins such as
    jQuery Timer Tools ([https://github.com/lolmaus/jquery.timer-tools](https://github.com/lolmaus/jquery.timer-tools))
    can be used to throttle back or delay actions so that they are only executed when
    necessary, or multiple repetitive calls are effectively merged into one single
    execution.
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: jQuery的`.animate`在每帧动画都会增加元素的`style`属性；这会迫使浏览器重新计算布局，导致持续刷新。这在响应式网站上尤为严重，每个元素需要在屏幕调整大小时重新绘制；这会对服务器资源产生额外的需求并影响性能。如果需要的话，可以使用jQuery
    Timer Tools ([https://github.com/lolmaus/jquery.timer-tools](https://github.com/lolmaus/jquery.timer-tools))等插件来限制或延迟操作，这样它们只会在必要时执行，或者多次重复调用能够被有效地合并成一次执行。
- en: 'If the display state of elements is changed (using `display`... or `display:
    none`), then this has the effect of adding or removing elements from the DOM.
    This can have an impact on performance, if your DOM is heavy with lots of elements.'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '如果改变元素的显示状态（使用`display`...或`display: none`），那么这会导致向DOM添加或移除元素。如果您的DOM中有大量的元素，则这可能会对性能产生影响。'
- en: Using jQuery leaves inline styles in the DOM that have very high specificity
    and that will override our well-maintained CSS. This is a big issue if the viewport
    is resized and triggers different breakpoints.
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用jQuery会在DOM中留下特异性很高的内联样式，这样会覆盖我们精心维护的CSS。如果视口被调整大小并触发了不同的断点，这是一个大问题。
- en: Note
  id: totrans-214
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: CSS specificity is where the browser decides which property values are most
    relevant to the elements and are applied as a result—check out [https://css-tricks.com/specifics-on-css-specificity/](https://css-tricks.com/specifics-on-css-specificity/)
    for more details.
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: CSS特异性是浏览器决定哪些属性值对元素最相关并作为结果应用的地方——查看[https://css-tricks.com/specifics-on-css-specificity/](https://css-tricks.com/specifics-on-css-specificity/)了解更多细节。
- en: As an aside, we lose the separation of concerns (or defining separate sections
    for our code) as styles are defined in JavaScript files.
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 顺便说一句，在编写JavaScript文件时，我们丢失了关注点的分离（或者为我们的代码定义独立的部分）。
- en: 'Is it possible to reduce or remove these issues? Yes, but it''s likely to require
    some sacrifices; these will depend on what your requirements are and the target
    devices that need to be supported. Let''s take a moment to consider where we can
    make changes:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 有可能减少或解决这些问题吗？有可能，但这可能需要一些牺牲；这将取决于您的需求是什么以及需要支持的目标设备。让我们花点时间考虑我们可以做出哪些改变：
- en: Consider the use of CSS over jQuery where practical, at least for mobile sites;
    most browsers (with the exception of Opera Mini) support CSS keywords such as
    `translate` or `transform`. As they are native to the browser, this removes the
    reliance on the extra code being referenced, resulting in the resources and bandwidth
    usage being saved.
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在实际情况下，考虑在移动网站中使用CSS来取代jQuery；大多数浏览器（除了Opera Mini）支持CSS关键字，如`translate`或`transform`。由于它们是浏览器的本机支持，这消除了对引用额外代码的依赖，从而节省了资源和带宽的使用。
- en: If animation isn't possible using jQuery or the effort required outweighs the
    benefits gained, then consider the use of a plugin such as Velocity.js (available
    from [https://github.com/julianshapiro/velocity](https://github.com/julianshapiro/velocity)),
    as this has been optimized to animate content.
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果使用 jQuery 无法实现动画效果，或者所需的工作量超过了所获得的收益，则考虑使用插件，如 Velocity.js（可从[https://github.com/julianshapiro/velocity](https://github.com/julianshapiro/velocity)获取），因为该插件已经优化了对内容进行动画处理。
- en: Note
  id: totrans-220
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It's worth noting that discussions are being held to integrate Velocity.js into
    jQuery—for more details, see [https://github.com/jquery/jquery/issues/2053](https://github.com/jquery/jquery/issues/2053).
    There is also a post that is worth reading at [http://www.smashingmagazine.com/2014/09/04/animating-without-jquery/](http://www.smashingmagazine.com/2014/09/04/animating-without-jquery/),
    which discusses the use of Velocity in more detail.
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 值得注意的是，正在讨论将 Velocity.js 集成到 jQuery 中——有关更多详细信息，请参阅[https://github.com/jquery/jquery/issues/2053](https://github.com/jquery/jquery/issues/2053)。也有一篇帖子值得阅读，详细讨论了
    Velocity 的使用情况，请参见[http://www.smashingmagazine.com/2014/09/04/animating-without-jquery/](http://www.smashingmagazine.com/2014/09/04/animating-without-jquery/)。
- en: A better alternative is to use the jQuery.Animate-Enhanced plugin or the animate
    helper from jQuery++; both will convert animations to use CSS3 equivalents by
    default, where supported.
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更好的选择是使用 jQuery.Animate-Enhanced 插件或 jQuery++ 中的 animate 助手；两者都会默认将动画转换为使用 CSS3
    等效果，在支持的情况下。
- en: So, how do we handle animation requests on a responsive site when working with
    jQuery? There are several ways of doing this; let's explore this key question
    in more detail.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，在使用 jQuery 处理响应式网站上的动画请求时，我们该如何做呢？有几种方法可以做到这一点；让我们更详细地探讨这个关键问题。
- en: Handling animation requests on a responsive site
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理响应式网站上的动画请求
- en: 'The best route to animate content within a responsive site when working with
    jQuery might actually seem a little perverse: don''t use jQuery unless you absolutely
    have to! At this point, you may think I have completely lost the plot, but here
    are a few good reasons for this:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 jQuery 处理响应式网站内的内容动画时，最好的方法可能似乎有点反常：除非绝对必要，否则不要使用 jQuery！此时，您可能认为我完全疯了，但以下是一些很好的理由：
- en: jQuery is not optimized for animation; the line of demarcation between styles
    in the style sheet, HTML, and JavaScript will start to blur, which means that
    we lose control over how our content is styled.
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: jQuery 不是为动画效果进行优化的；样式表、HTML 和 JavaScript 之间的分界线将开始模糊，这意味着我们失去了对内容样式的控制。
- en: Animation doesn't work well on mobile devices when done with jQuery; to improve
    performance, additional CSS styling has to be used.
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在移动设备上，使用 jQuery 进行动画效果不佳；为了提高性能，必须使用额外的 CSS 样式。
- en: We lose control over which rules are applied to specific elements due to CSS
    specificity—keeping styles within the CSS style sheet means that we can retain
    control.
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于 CSS 的特异性，我们失去了对特定元素应用哪些规则的控制——将样式保持在 CSS 样式表中意味着我们可以保留控制。
- en: jQuery animations are resource-hungry by default. On a simple site, this will
    have a minimal impact, but on larger sites, the impact will be significantly higher.
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认情况下，jQuery 动画会消耗资源。在简单的网站上，这将产生很小的影响，但在较大的网站上，影响将显著更大。
- en: A bonus of using a pure CSS approach is that it allows you to make use of CSS
    preprocessors, such as **Syntactically Awesome Stylesheets** (**SASS**) or Less,
    to handle media queries. This form of shorthand CSS allows you to be more efficient
    at writing styles while still maintaining the final desired output.
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用纯 CSS 方法的一个额外好处是它允许您使用 CSS 预处理器，如**SASS**或 Less，来处理媒体查询。这种缩写 CSS 可以让您更有效地编写样式，同时仍保持最终期望的输出。
- en: 'With this in mind, let''s take a look at a few pointers that we can use to
    handle animation requests on responsive sites:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个想法，让我们来看看我们可以用来处理响应式网站上动画请求的一些指针：
- en: Think mobile first. If you're using CSS, then work on the basis of the smallest
    screen you want to accommodate first and then add additional media queries to
    handle changes to the layout when viewed on increasingly larger devices. Consider
    the use of a CSS Media Queries boilerplate, such as the one created by developer
    Paul Lund at [http://www.paulund.co.uk/boilerplate-css-media-queries](http://www.paulund.co.uk/boilerplate-css-media-queries);
    we can then insert animation rules within each of the appropriate breakpoints.
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先考虑移动端。如果你正在使用 CSS，那么首先基于最小的屏幕进行布局，然后添加额外的媒体查询来处理在越来越大的设备上查看时布局的变化。考虑使用 CSS
    媒体查询样板，比如由开发者 Paul Lund 在[http://www.paulund.co.uk/boilerplate-css-media-queries](http://www.paulund.co.uk/boilerplate-css-media-queries)创建的样板；然后我们可以在适当的断点内插入动画规则。
- en: Avoid the use of the `.css` statement in your jQuery code, but use the `.addClass()`
    or `.removeClass()` methods instead—this allows you to maintain a separation of
    concerns, with a clear demarcation between the content and presentational layers.
    A good example of how this can be used (for those who are not sure) is given at
    the Animation Cheat Sheet site by Justin Aguilar, at [http://www.justinaguilar.com/animations/](http://www.justinaguilar.com/animations/).
    This produces a variety of different animations, all of which can be added using
    `.addClass()`.
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免在你的 jQuery 代码中使用`.css`语句，而是使用`.addClass()`或`.removeClass()`方法—这样可以保持内容和表现层之间的清晰分隔。如何使用这个的一个很好的例子（对于那些不确定的人）可以在
    Justin Aguilar 的 Animation Cheat Sheet 网站上找到，网址为[http://www.justinaguilar.com/animations/](http://www.justinaguilar.com/animations/)。这会产生各种不同的动画，所有这些都可以使用`.addClass()`添加。
- en: Work on the basis of using prefix-free versions of attributes in your code and
    then use an autoprefixer to add any vendor prefixes automatically, as needed.
    This becomes a cinch when using something to the likes of Grunt and a plugin,
    such as grunt-autoprefixer.
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于在代码中使用无前缀版本的属性，并使用自动添加任何供应商前缀的自动添加器。当使用 Grunt 和插件（例如 grunt-autoprefixer）时，这变得非常简单。
- en: Consider making use of the jQuery.Animate-Enhanced plugin (available at [https://github.com/benbarnett/jQuery-Animate-Enhanced](https://github.com/benbarnett/jQuery-Animate-Enhanced))
    where possible. Although it is a few years old, it still works with the current
    versions of jQuery; it extends `$.animate()` to detect transitions and replaces
    them with CSS equivalents.
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑尽可能使用 jQuery.Animate-Enhanced 插件（可在[https://github.com/benbarnett/jQuery-Animate-Enhanced](https://github.com/benbarnett/jQuery-Animate-Enhanced)获取）。虽然它有几年历史了，但仍然可以与当前版本的
    jQuery 一起使用；它将`$.animate()`扩展为检测转换并用 CSS 等效项替换它们。
- en: Tip
  id: totrans-236
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Another plugin that is worth taking a look at is Animsition, available at [http://git.blivesta.com/animsition](http://git.blivesta.com/animsition).
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 值得一看的另一个插件是 Animsition，可在[http://git.blivesta.com/animsition](http://git.blivesta.com/animsition)获取。
- en: The trick here is to not rely on its use as a permanent part of the site but
    as a tool for replacing the existing jQuery animations with CSS equivalent styles.
    The more you can shift to using CSS, the less impact there will be on your pages,
    as demands for server resources will be reduced.
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关键在于不要将其视为网站的永久部分，而是将其视为用 CSS 等效样式替换现有 jQuery 动画的工具。你能够转向使用 CSS 的越多，对页面的影响就越小，因为对服务器资源的需求将会减少。
- en: Keep a close eye on [http://www.caniuse.com](http://www.caniuse.com). Although
    browser support for CSS3 transformations and transitions is very good, there are
    still a couple of instances where WebKit prefixes have to be used, namely for
    Safari and iOS Safari (mobile).
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 时刻关注[http://www.caniuse.com](http://www.caniuse.com)。虽然浏览器对 CSS3 转换和过渡的支持非常好，但仍然有一些情况需要使用
    WebKit 前缀，即适用于 Safari 和 iOS Safari（移动端）。
- en: Make use of `requestAnimationFrame` (and `clearAnimationFrame`) where possible
    within your animations. This will help conserve resources when animations are
    not visible. This will require the use of jQuery, but as we should aim to keep
    this for the most complex animations, the impact of using the library will be
    reduced.
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽可能在你的动画中使用`requestAnimationFrame`（和`clearAnimationFrame`）。这将有助于在动画不可见时保护资源。这将需要使用
    jQuery，但由于我们应该将其保留用于最复杂的动画，因此使用库的影响将会减小。
- en: Take a look at sites such as [http://cssanimate.com/](http://cssanimate.com/)—these
    allow you to generate complex keyframe-based animations that can be dropped into
    your existing code. If you have concerns that the existing content can't be animated,
    then it is possible that this site will help remove some of your doubt.
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 看一看诸如 [http://cssanimate.com/](http://cssanimate.com/) 这样的网站 —— 这些网站可以生成复杂的基于关键帧的动画，可以直接嵌入到您现有的代码中。如果您担心现有内容无法进行动画处理，那么这个网站可能会帮助您消除一些疑虑。
- en: 'Ask yourself this question: "If my animation is really complex, is it going
    to be effective?" Animations can be visually stunning if done well, but this does
    not mean that they need to be complex. Often, simple and well thought out animations
    work better than their complex, resource-hungry equivalents.'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 问问自己这个问题：“如果我的动画真的很复杂，它是否会有效？”如果动画做得好，它们可以视觉上令人惊叹，但这并不意味着它们必须复杂。通常，简单而经过深思熟虑的动画效果比它们的复杂、资源消耗大的等效效果更好。
- en: The important point to consider here is that using jQuery to animate content
    should not be completely discounted; with browser support for CSS animations continually
    evolving, it makes a strong case for using the latter as the basis for most animations.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 这里需要考虑的重要一点是，使用 jQuery 来执行动画不应完全被排除在外；随着浏览器对 CSS 动画的支持不断发展，这更支持了以后大多数动画的基础是使用
    CSS。
- en: The jQuery Team is conscious that jQuery was never designed for the efficient
    animating of content. There are ongoing discussions, at the time of writing this
    book, around the introduction of a version of Velocity.js; in principle, this
    will likely improve the effectiveness of using jQuery to animate content, but
    this is some way off becoming reality!
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 团队意识到 jQuery 从未被设计用于高效地对内容进行动画处理。在撰写本书时，关于引入 Velocity.js 版本的讨论仍在进行中；原则上，这可能会改善使用
    jQuery 来对内容进行动画处理的效果，但这距离成为现实还有很长的路要走！
- en: In the meantime, we should give careful consideration to the balance of jQuery
    versus CSS animation that is used, and aim to remove jQuery animations being used
    if CSS animations can be used in their place.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 与此同时，我们应该仔细考虑所使用的 jQuery 与 CSS 动画之间的平衡，并且如果可以使用 CSS 动画的话，就应该避免使用 jQuery 动画。
- en: Note
  id: totrans-246
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To help prove a point, Chris Coyier produced a CodePen example of how a reasonably
    simple site can be made responsive and can contain CSS-based animations, which
    you can view at [http://codepen.io/chriscoyier/pen/tynas](http://codepen.io/chriscoyier/pen/tynas).
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 为了证明一点，Chris Coyier 制作了一个 CodePen 示例，展示了一个相当简单的网站如何实现响应式并包含基于 CSS 的动画效果，您可以在
    [http://codepen.io/chriscoyier/pen/tynas](http://codepen.io/chriscoyier/pen/tynas)
    上查看。
- en: Okay, let's move on. We'll stay with the theme of animating, but this time we'll
    look at how we can achieve this on mobile devices. There are some considerations
    we need to be aware of; let's take a look at these in more detail.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们继续。我们将继续讨论动画主题，但这次我们将看看如何在移动设备上实现动画效果。我们需要注意一些问题；让我们更详细地看看这些。
- en: Animating content for mobile devices
  id: totrans-249
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为移动设备创建动画内容
- en: So far, we've considered the use of jQuery to animate content on responsive
    sites, but what about the mobile platform? There has been a significant increase
    in the use of non-desktop devices (such as laptops and smartphones) to view content.
    This brings some additional considerations that we need to make in order to make
    the most of performance on mobile devices.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经考虑了使用 jQuery 在响应式网站上对内容进行动画处理，但是移动平台呢？越来越多的非台式设备（如笔记本电脑和智能手机）用于查看内容。这带来了一些额外的考虑因素，我们需要考虑如何在移动设备上获得最佳性能。
- en: Animating on a mobile platform is less about writing code but more about deciding
    which technologies to use; in most cases, simply writing jQuery code will work,
    but it won't be as effective as it should be.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 在移动平台上进行动画处理与编写代码关系不大，更多的是关于决定使用哪些技术；在大多数情况下，简单地编写 jQuery 代码就可以工作，但效果可能不如预期的那么好。
- en: The secret behind getting the best experience is in the use of the smartphone's
    **GPU** or **Graphics Processing Unit**; to do this, we can offload standard jQuery
    animations (which are slower) by enabling 3D rendering.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 获得最佳体验的秘诀在于使用智能手机的**GPU**或**图形处理单元**；为此，我们可以通过启用 3D 渲染来卸载标准的 jQuery 动画（速度较慢）。
- en: Tip
  id: totrans-253
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Although this browser should work on all desktop and mobile devices, you will
    get best results in a WebKit-based browser, such as Google Chrome.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然此浏览器应该在所有台式机和移动设备上都能正常工作，但在基于 WebKit 的浏览器（例如 Google Chrome）中，您将获得最佳效果。
- en: 'Let''s explore this in more detail with a simple example, which has 3D rendering
    enabled:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个启用了3D渲染的简单示例来更详细地探讨一下：
- en: For this demo, we need three files. Go ahead and extract `mobileanimate.html`,
    `mobileanimate.css`, and `jquery.min.js` from the code download and save them
    in the relevant folders in your project area.
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于这个演示，我们需要三个文件。从代码下载中提取`mobileanimate.html`、`mobileanimate.css`和`jquery.min.js`，并将它们保存在项目区域的相应文件夹中。
- en: 'In a new file, add the following code. It handles the animation of our drop-down
    box. We''ll go through it in detail, beginning with the assignment of a number
    of variables needed for our code:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在一个新文件中，添加以下代码。它处理我们的下拉框的动画。我们将逐步详细介绍它，首先是为我们的代码分配所需变量的数量：
- en: '[PRE11]'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Next up comes the initial check that adds the `accordion_css3_support` class
    to the `ul` object, if the browser supports CSS3 transforms:'
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来是初始检查，如果浏览器支持CSS3变换，则在`ul`对象中添加`accordion_css3_support`类：
- en: '[PRE12]'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The magic happens in this event handler. If CSS3 transitions are not supported,
    then the drop-down will use the `slideToggle` method to open or close; otherwise,
    it will use a CSS3 transform instead:'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个事件处理程序发生了神奇的事情。如果不支持CSS3过渡效果，则下拉框将使用`slideToggle`方法来打开或关闭；否则，它将使用CSS3变换：
- en: '[PRE13]'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Save the file as `mobileanimate.js`. If all went well, you will see a styled
    drop-down box ready to be opened, as shown here:![Animating content for mobile
    devices](img/image00393.jpeg)
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件保存为`mobileanimate.js`。如果一切顺利，你将看到一个样式化的下拉框准备好打开，如下所示：![为移动设备动画内容](img/image00393.jpeg)
- en: Try clicking on the drop-down arrow. At face value, it will appear that our
    drop-down is no different from any other; it expands and contracts in the same
    way as any other drop-down box. In reality, our code uses two important tricks
    to help manage animations; let's take a moment to go through the significance
    of both when working with jQuery.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试点击下拉箭头。乍看之下，我们的下拉框似乎与其他任何下拉框没有区别；它以与任何其他下拉框相同的方式展开和收缩。实际上，我们的代码使用了两个重要的技巧来帮助管理动画；让我们花点时间来了解在使用jQuery时两者的重要性。
- en: Improving the appearance of animations
  id: totrans-265
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 改善动画外观
- en: 'If we take a closer look at the code, there are two points of interest for
    us; the first is in the jQuery code:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们仔细看代码，我们对两个地方感兴趣；第一个在jQuery代码中：
- en: '[PRE14]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The second is shown in two places in the CSS style sheet:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个在CSS样式表中两个地方显示：
- en: '[PRE15]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '"Why are these important?," I hear you ask. The answer is easy. In most cases,
    we will probably use the `slideToggle()` event handler. There''s nothing wrong
    in this, except that the animation is not hardware-accelerated (and will also
    need you to convert it to CSS) and hence isn''t going to make the best use of
    the platform''s capabilities. In addition, it blurs the line between code and
    styles; it makes it harder to debug styles if we have them both in the code and
    in a style sheet.'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: “为什么这些重要呢？”，我听到你问。答案很简单。在大多数情况下，我们可能会使用`slideToggle()`事件处理程序。这没有什么不对，除了动画不是硬件加速的（还需要你将其转换为CSS），因此不会充分利用平台的功能。此外，它模糊了代码和样式之间的界线；如果我们既在代码中又在样式表中拥有它们，那么在调试样式时就更难了。
- en: A better alternative is to work out whether the browser supports CSS3 transforms
    (or similar) and to apply a new class that we can style within the style sheet.
    If the browser doesn't support transforms, then we simply fall back to using the
    `slideToggle()` method in jQuery instead. The benefit of the former is that CSS
    styles will reduce the resources required to run the animation and help conserve
    resources.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 更好的选择是先弄清楚浏览器是否支持CSS3变换（或类似的功能），然后应用一个新的类，我们可以在样式表中进行样式设计。如果浏览器不支持变换，则我们简单地回退到在jQuery中使用`slideToggle()`方法。前者的好处是CSS样式将减少运行动画所需的资源，并有助于节省资源。
- en: Tip
  id: totrans-272
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If jQuery must still be used, then it is worth testing the value set for `jQuery.fx.interval`—try
    somewhere around 12 fps to see whether this helps improve performance; more details
    are available in the main documentation at [http://api.jquery.com/jquery.fx.interval/](http://api.jquery.com/jquery.fx.interval/).
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 如果还必须使用jQuery，则值得测试设置给`jQuery.fx.interval`的值——尝试大约12fps左右，看看是否有助于提高性能；更多细节请参阅主文档[http://api.jquery.com/jquery.fx.interval/](http://api.jquery.com/jquery.fx.interval/)。
- en: 'The second point of interest is perhaps a little less obvious; if we apply
    the transform `translate3d(0,0,0)` to any CSS rule that contains animations, then
    this is enough to enable 3D rendering and allows the browser to give a smooth
    experience, by offloading animations to the GPU. In some browsers (such as Google
    Chrome), we might get instances of flickering; we may need to add the following
    line of code to remove the unwanted flicker:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个值得关注的点可能显得不太明显；如果我们对包含动画的任何CSS规则应用变换`translate3d(0,0,0)`，那么这足以启用3D渲染，并允许浏览器通过将动画卸载到GPU上来提供流畅的体验。在某些浏览器（如Google
    Chrome）中，我们可能会遇到闪烁的情况；我们可能需要添加以下代码来消除不需要的闪烁：
- en: '[PRE16]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'It is also possible that `translate3d(x, y, z)` doesn''t enable hardware acceleration
    for some platforms (such as iOS 6); we can use `–webkit-transform: translate (0)`
    instead.'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '也有可能`translate3d(x, y, z)`不能为某些平台（如iOS 6）启用硬件加速；我们可以改用`–webkit-transform: translate
    (0)`。'
- en: Ultimately, while there may be instances where we need (or prefer) to use jQuery
    to animate content, thought should be given as to whether it is really the right
    tool and whether CSS animations can be used in its place.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，虽然可能有些情况下我们需要（或更喜欢）使用jQuery来动画内容，但应考虑是否它真的是正确的工具，以及是否可以使用CSS动画来替代它。
- en: A good example of this is shown at JSFiddle ([http://jsfiddle.net/ezanker/Ry6rb/1/](http://jsfiddle.net/ezanker/Ry6rb/1/)),
    which uses the Animate.css library from Dan Eden to handle the animations, leaving
    jQuery as a dependency for jQuery Mobile that is used in the demo. Granted, the
    version of jQuery is a little old, but the principle is still very sound!
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 一个很好的例子是在JSFiddle（[http://jsfiddle.net/ezanker/Ry6rb/1/](http://jsfiddle.net/ezanker/Ry6rb/1/)）上展示的，它使用了来自Dan
    Eden的Animate.css库来处理动画，将jQuery作为jQuery Mobile的依赖项留给了演示中使用的版本。诚然，jQuery的版本有点旧，但原理仍然非常合理！
- en: Tip
  id: totrans-279
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The Treehouse team posted a good blog entry that explores the science of how
    animations and transitions affect performance, which is worth a read; you can
    find it at [http://blog.teamtreehouse.com/create-smoother-animations-transitions-browser](http://blog.teamtreehouse.com/create-smoother-animations-transitions-browser).
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: Treehouse团队发布了一篇探讨动画和过渡如何影响性能的好博文，值得一读；你可以在[http://blog.teamtreehouse.com/create-smoother-animations-transitions-browser](http://blog.teamtreehouse.com/create-smoother-animations-transitions-browser)找到它。
- en: Let's change focus and move on. Hands up if you've visited a site with a parallax
    scrolling effect? Parallax…scrolling…Not sure what it's all about? No problem,
    over the next few pages, we're going to take a look at what has become one of
    the hottest techniques in web design but can equally backfire if it is not properly
    implemented in our projects.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们转移焦点，继续前进吧。有多少人访问过具有视差滚动效果的网站？视差…滚动…不确定这到底是什么？没问题，在接下来的几页中，我们将看看这是如何成为网页设计中最热门的技术之一的，但如果在我们的项目中没有正确实现它，同样也可能适得其反。
- en: Implementing responsive parallax scrolling
  id: totrans-282
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现响应式视差滚动
- en: What is parallax scrolling all about? Put simply, it involves moving the background
    at a slower rate than the foreground to create a 3D effect while you scroll down
    the page.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 视差滚动到底是什么？简单来说，它涉及在向下滚动页面时，以比前景更慢的速度移动背景，以创建三维效果。
- en: Originally created by Ian Coyle for Nike back in 2011, parallax scrolling is
    a popular technique to use. It can provide a subtle element of depth but can be
    equally overwhelming if you don't use it properly!
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 最初由Ian Coyle于2011年为耐克创建，视差滚动是一种流行的技术。它可以提供微妙的深度元素，但如果不正确使用，同样也可能会让人感到不知所措！
- en: To get a flavor of what is possible, take a look at the article on the Creative
    Bloq website, at [http://www.creativebloq.com/web-design/parallax-scrolling-1131762](http://www.creativebloq.com/web-design/parallax-scrolling-1131762).
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 想要了解可能性的话，可以看看Creative Bloq网站上的文章，链接为[http://www.creativebloq.com/web-design/parallax-scrolling-1131762](http://www.creativebloq.com/web-design/parallax-scrolling-1131762)。
- en: There are dozens of parallax scrolling plugins available, such as the parallax.js
    plugin from PixelCog (at [http://pixelcog.github.io/parallax.js/](http://pixelcog.github.io/parallax.js/))
    or Stellar.js by Mark Dalgleish, available at [http://markdalgleish.com/projects/stellar.js/](http://markdalgleish.com/projects/stellar.js/).
    Arguably, the most well-known plugin is Skrollr, which can be downloaded from
    [https://github.com/Prinzhorn/skrollr](https://github.com/Prinzhorn/skrollr)—this
    will form the basis of our next demo.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 目前已经有数十款视差滚动插件可用，比如来自 PixelCog 的 parallax.js 插件（位于[http://pixelcog.github.io/parallax.js/](http://pixelcog.github.io/parallax.js/)）或
    Mark Dalgleish 的 Stellar.js 可以在[http://markdalgleish.com/projects/stellar.js/](http://markdalgleish.com/projects/stellar.js/)找到。可以说，最著名的插件是
    Skrollr，可以从[https://github.com/Prinzhorn/skrollr](https://github.com/Prinzhorn/skrollr)下载——这将构成我们下一个演示的基础。
- en: Building a parallax scrolling page
  id: totrans-287
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建一个视差滚动页面
- en: If you spend any time to research on the Internet, you will no doubt come across
    lots of tutorials that cover adding a parallax scrolling effect to a site. Over
    the next few pages, we'll use a tutorial by the Australian frontend developer,
    Petr Tichy, as a basis for our next exercise. After all, there is no sense in
    trying to reinvent the wheel, right?
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在网上花时间做一些研究，毫无疑问你会看到很多关于如何给网站添加视差滚动效果的教程。在接下来的几页中，我们将以澳大利亚前端开发者 Petr Tichy
    的教程为基础，进行我们的下一个练习。毕竟，试图重复造轮子是没有意义的，对吧？
- en: Note
  id: totrans-289
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The original tutorial can be viewed at [https://ihatetomatoes.net/how-to-create-a-parallax-scrolling-website/](https://ihatetomatoes.net/how-to-create-a-parallax-scrolling-website/).
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 这个原始教程可以查看：[https://ihatetomatoes.net/how-to-create-a-parallax-scrolling-website/](https://ihatetomatoes.net/how-to-create-a-parallax-scrolling-website/)。
- en: 'Our next demo will use the well-known Skrollr library (available at [https://github.com/Prinzhorn/skrollr](https://github.com/Prinzhorn/skrollr))
    to construct a simple page that scrolls through five images, but we''ll also use
    a number of effects to control how the images scroll down the page:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的下一个演示将使用广为人知的 Skrollr 库（位于[https://github.com/Prinzhorn/skrollr](https://github.com/Prinzhorn/skrollr)）来构建一个简单的页面，其中可以滚动查看五张图片，同时还将使用一些效果来控制图片在页面上的滚动方式：
- en: '![Building a parallax scrolling page](img/image00394.jpeg)'
  id: totrans-292
  prefs: []
  type: TYPE_IMG
  zh: '![构建视差滚动页面](img/image00394.jpeg)'
- en: 'Now that we''ve seen what our demo will produce, let''s get stuck in by performing
    the following steps:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到我们的演示将会产生的效果，接下来让我们按照以下步骤来实施：
- en: We'll begin by extracting the `parallax` folder from a copy of the code download
    that accompanies this book; save the entire folder to your project area.
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将从本书附带的代码下载中提取`parallax`文件夹，并将整个文件夹保存到你的项目区域。
- en: 'We need a couple of additional plugins for our demo to work, so go ahead and
    download the following:'
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的演示需要一些额外的插件才能工作，所以去下载以下插件：
- en: '**ImagesLoaded**: [https://raw.githubusercontent.com/desandro/imagesloaded/master/imagesloaded.pkgd.js](https://raw.githubusercontent.com/desandro/imagesloaded/master/imagesloaded.pkgd.js);
    save the file as `imagesloaded.js`'
  id: totrans-296
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ImagesLoaded**：[https://raw.githubusercontent.com/desandro/imagesloaded/master/imagesloaded.pkgd.js](https://raw.githubusercontent.com/desandro/imagesloaded/master/imagesloaded.pkgd.js)；把文件保存为`imagesloaded.js`'
- en: '**Skrollr**: [https://raw.githubusercontent.com/Prinzhorn/skrollr/master/src/skrollr.js](https://raw.githubusercontent.com/Prinzhorn/skrollr/master/src/skrollr.js)'
  id: totrans-297
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Skrollr**：[https://raw.githubusercontent.com/Prinzhorn/skrollr/master/src/skrollr.js](https://raw.githubusercontent.com/Prinzhorn/skrollr/master/src/skrollr.js)'
- en: '**ViewPortSize**: [https://github.com/tysonmatanich/viewportSize](https://github.com/tysonmatanich/viewportSize)'
  id: totrans-298
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ViewPortSize**：[https://github.com/tysonmatanich/viewportSize](https://github.com/tysonmatanich/viewportSize)'
- en: Save all of these plugins in the `js` subfolder within the `parallax` folder.
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 把全部这些插件都保存在 `parallax` 文件夹中的 `js` 子文件夹中。
- en: 'In a new file, add the following code; this handles the initialization of the
    Skrollr plugin. Let''s go through it in detail, beginning with a `ready` DOM statement
    that sets up a number of variables and then preloads the images using the ImagesLoaded
    plugin before resizing them and fading in each section:'
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在一个新文件中，添加以下代码；这个代码处理 Skrollr 插件的初始化。让我们详细地介绍一下，从设置一系列变量以及使用 ImagesLoaded 插件预加载图像开始，然后调整它们的大小并在每个部分淡入：
- en: '[PRE17]'
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Immediately below the DOM function and before the closing brackets, add the
    following code. This handles the resizing of each of the slides to the appropriate
    window height or to a minimum height of `550px`, whichever is greater:'
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 DOM 函数下面、闭合括号前，添加以下代码。这个代码处理每个幻灯片的调整大小，使其适应窗口高度或至少`550px`的最小高度，以确保更佳的显示：
- en: '[PRE18]'
  id: totrans-303
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: If all is well, when you preview the results, images will cross from one to
    another when we scroll up or down, as shown in this screenshot:![Building a parallax
    scrolling page](img/image00394.jpeg)
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果一切顺利，当您预览结果时，图像将在我们向上或向下滚动时从一个图像交叉到另一个图像，如此屏幕截图所示：![构建视差滚动页面](img/image00394.jpeg)
- en: Parallax scrolling as a technique can produce some really stunning effects when
    used well. For some great examples, take a look at Costa Coffee's site, at [http://www.costa.co.uk](http://www.costa.co.uk),
    or Sony's Be Moved site, at [http://www.sony.com/be-moved/](http://www.sony.com/be-moved/).
    It's hard to believe that such original designs are based on parallax scrolling!
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 视差滚动作为一种技术，当使用得当时可以产生一些真正令人惊叹的效果。一些很好的例子，请参阅 Costa Coffee 的网站，网址为[http://www.costa.co.uk](http://www.costa.co.uk)，或
    Sony 的 Be Moved 网站，网址为[http://www.sony.com/be-moved/](http://www.sony.com/be-moved/)。很难相信这样原创的设计是基于视差滚动的！
- en: Tip
  id: totrans-306
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Take a look at one of Petr's tutorials on how to make parallax scrolling responsive,
    at [https://ihatetomatoes.net/make-parallax-website-responsive/](https://ihatetomatoes.net/make-parallax-website-responsive/).
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 查看彼得的一个关于如何使视差滚动响应式的教程，网址为[https://ihatetomatoes.net/make-parallax-website-responsive/](https://ihatetomatoes.net/make-parallax-website-responsive/)。
- en: Considering the implications of parallax scrolling
  id: totrans-308
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 考虑视差滚动的影响
- en: 'Although it may be hard to believe that such beautiful sites can be created
    using parallax scrolling, this must be tempered with a warning: this technique
    does not come without its issues. Granted, most (if not all) can be overcome with
    some care and attention; nevertheless, these issues can trip up any designer if
    care is not taken over the design and implementation. Let''s explore some of these
    issues in more detail:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管很难相信使用视差滚动可以创建如此漂亮的网站，但必须提出警告：这种技术并不是没有问题的。当然，大多数（如果不是全部）问题都可以通过一些注意和关注来解决；然而，如果在设计和实施过程中不注意，这些问题可能会使任何设计师遇到困难。让我们更详细地探讨一些这些问题：
- en: The biggest killer is that parallax scrolling is not SEO-friendly by default.
    There are techniques available to get around this, such as jQuery or multiple
    pages, but they will impact analytics or server resources. The digital marketing
    strategist Carla Dawson has written an excellent article that discusses the merits
    of these workarounds, which is available at [http://moz.com/blog/parallax-scrolling-websites-and-seo-a-collection-of-solutions-and-examples](http://moz.com/blog/parallax-scrolling-websites-and-seo-a-collection-of-solutions-and-examples)—it
    is worth a read!
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最大的问题是，视差滚动默认情况下不友好于SEO。有一些可用的技术可以解决这个问题，例如jQuery或多个页面，但它们会影响分析或服务器资源。数字营销策略师卡拉·道森撰写了一篇关于这些解决方案的优点的优秀文章，可在[http://moz.com/blog/parallax-scrolling-websites-and-seo-a-collection-of-solutions-and-examples](http://moz.com/blog/parallax-scrolling-websites-and-seo-a-collection-of-solutions-and-examples)找到——值得一读！
- en: Parallax scrolling will (naturally) require visitors to scroll; the key here
    is to ensure that we are not creating single pages that scroll for too long. This
    might have an impact on performance for mobile users and put visitors off.
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视差滚动（自然地）需要访客滚动；关键在于确保我们不要创建滚动时间过长的单个页面。这可能会影响移动用户的性能并使访客失去兴趣。
- en: The use of jQuery to create effects based on this technique can itself be a
    drawback; jQuery will have an impact on page loading times, as the position of
    each element on the page has to be calculated. We can mitigate against this to
    a degree, by customizing our copy of jQuery using the techniques we covered back
    in [Chapter 1](part0014.xhtml#aid-DB7S1 "Chapter 1. Installing jQuery"), *Installing
    jQuery*, but there will always be an element of reduced performance when using
    the library.
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 jQuery 来创建基于这种技术的效果本身就可能是一个缺点；jQuery会影响页面加载时间，因为必须计算页面上每个元素的位置。我们可以通过使用我们在[第一章](part0014.xhtml#aid-DB7S1
    "第一章。安装jQuery")中介绍的技术来自定义我们的jQuery的副本来在一定程度上减轻这种影响，但在使用库时性能总会有所降低。
- en: Parallax scrolling can reveal a number of usability issues. The layout can appear
    haphazard to end users, if the balance of visual appeal against content and ease
    of access is not even. Parallax scrolling will be suitable instances where you
    might expect visitors to browse your site once, or for a company to show case
    what they can do—it can be harmful for those situations where you are pitching
    for a product or business.
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视差滚动可能会揭示许多可用性问题。如果视觉吸引力与内容和易访问性的平衡不均匀，布局对最终用户可能显得杂乱无章。在某些情况下，视差滚动将是合适的选择，例如你可能希望访客仅浏览您的网站一次，或者为公司展示他们的能力。但在你为产品或业务做推介的情况下，这可能会产生负面影响。
- en: 'In a number of cases, you will find that parallax scrolling doesn''t work on
    mobile devices; this is largely due to how animations are executed at the end,
    which breaks parallax scrolling. Attempts have been made to work around this,
    with varying levels of success. The following are a couple of examples of successful
    attempts:'
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在许多情况下，您会发现视差滚动在移动设备上无效；这主要是由于动画在最后执行时会破坏视差滚动。已经尝试解决此问题，但成功的程度各不相同。以下是一些成功尝试的例子：
- en: Using the Stellar.js jQuery parallax plugin, which is available at [http://markdalgleish.com/projects/stellar.js/](http://markdalgleish.com/projects/stellar.js/);
    this in tandem with the Scrollability plugin, from [http://joehewitt.github.com/scrollability/](http://joehewitt.github.com/scrollability/),
    can be used to produce a touch-friendly parallax scrolling effect. The plugin
    works both in desktop and mobile browsers, so consideration should be given to
    checking for touch support and switching methods, as appropriate. The plugin author
    Mark Dalgleish explains how to achieve this using iScroll.js at [http://markdalgleish.com/presentations/embracingtouch/](http://markdalgleish.com/presentations/embracingtouch/).
  id: totrans-315
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Stellar.js jQuery视差插件，可在[http://markdalgleish.com/projects/stellar.js/](http://markdalgleish.com/projects/stellar.js/)获取；搭配Scrollability插件，可在[http://joehewitt.github.com/scrollability/](http://joehewitt.github.com/scrollability/)获取，可实现触摸友好的视差滚动效果。该插件在桌面和移动浏览器中都适用，因此应该考虑检查触摸支持并根据情况切换方法。插件作者Mark
    Dalgleish通过[http://markdalgleish.com/presentations/embracingtouch/](http://markdalgleish.com/presentations/embracingtouch/)解释了如何使用iScroll.js来实现这一点。
- en: A pure CSS version by Keith Clark is available at [http://codepen.io/keithclark/pen/JycFw](http://codepen.io/keithclark/pen/JycFw)—he
    explains the principles used in detail on his site, at [http://keithclark.co.uk/articles/pure-css-parallax-websites/](http://keithclark.co.uk/articles/pure-css-parallax-websites/).
  id: totrans-316
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Keith Clark提供了一个纯CSS版本，可在[http://codepen.io/keithclark/pen/JycFw](http://codepen.io/keithclark/pen/JycFw)获取——他在自己的网站上[http://keithclark.co.uk/articles/pure-css-parallax-websites/](http://keithclark.co.uk/articles/pure-css-parallax-websites/)详细解释了所使用的原理。
- en: The key message for parallax scrolling is to not rush in; it's true that there
    are some sites that have managed to create some stunning examples of parallax
    scrolling, but a lot of thought and planning will have gone into building the
    example so that it is performant, caters to SEOs, and still presents a usable
    experience to the visitor.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 视差滚动的关键信息是不要仓促行事；的确有一些站点成功地创建了一些令人惊叹的视差滚动示例，但在构建示例时必须经过深思熟虑的规划和规划，以便性能好，满足SEO的要求，并为访问者呈现可用的体验。
- en: Summary
  id: totrans-318
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Animating content within projects can be very satisfying if done well; this
    relies on us not just using the right code but also deciding whether jQuery is
    the right tool or whether CSS animations will be preferable for our needs. We've
    covered a lot over the last few pages, so let's take a moment to recap what we
    learned.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 如果做得好，项目中的内容动画会非常令人满意；这不仅取决于我们使用正确的代码，还要决定jQuery是否是正确的工具，或者CSS动画是否更适合我们的需求。在过去的几页中，我们涵盖了很多内容，让我们花一点时间来回顾一下我们学到了什么。
- en: We kicked off with a discussion on the merits of using jQuery or CSS and when
    it might be preferable to use one instead of the other; we saw some of the benefits
    of using CSS and that circumstances may dictate the use of jQuery.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 我们以讨论使用jQuery或CSS的优点开始，并讨论了在何时使用其中一种而不是另一种以及使用CSS的好处，情况可能决定使用jQuery。
- en: We then moved on to take a look at the classic issue that besets jQuery developers
    at some point in their lives, namely controlling the animation queue; we saw how
    to implement a quick and dirty fix, with subsequent improvements to reduce or
    eliminate the issue.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们开始讨论了困扰jQuery开发人员的经典问题，即控制动画队列；我们看到了如何实施一个快速而简单的修复方法，并随后改进以减少或消除这个问题。
- en: Next up came a discussion on the use of easing functions; we saw how easy it
    is to not just rely on tried and tested sources such as the jQuery UI but also
    to develop simple actions that extend core jQuery. We took a look at building
    our own custom-easing functions followed by converting those that we might see
    in CSS to jQuery equivalents.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来讨论了使用缓动函数的问题；我们看到不仅可以依赖于诸如jQuery UI之类的经过验证的源，还可以开发扩展核心jQuery的简单动作。我们看了一下如何构建我们自己的自定义缓动函数，然后将我们可能在CSS中看到的函数转换为jQuery等效函数。
- en: We then rounded out the chapter with a look at some animation examples in the
    form of animating buttons, implementing an overlay effect with a twist and animating
    content on a responsive site.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 接着，我们通过一些动画示例来结束本章，例如对按钮进行动画处理，实现带有特效的覆盖效果以及在响应式网站上对内容进行动画处理。
- en: In the next chapter, we're going to take a look at advanced event handling.
    In most cases, people use `.on()` or `.off()`, but as we'll see, this only scratches
    the surface of what is possible with jQuery.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入研究高级事件处理。在大多数情况下，人们使用`.on()`或`.off()`，但正如我们将看到的，这只是 jQuery 可能性的冰山一角。
