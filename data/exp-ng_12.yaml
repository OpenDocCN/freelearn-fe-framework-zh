- en: Implementing Angular Services
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现Angular服务
- en: Services play a vital role in any Angular application. We may design our own
    Angular services by taking full advantage of the many built-in services in Angular.
    In this chapter, we will discuss how to do both, so that you have an idea of how
    to create as well as manage Angular services.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 服务在任何Angular应用程序中都扮演着重要的角色。我们可以通过充分利用Angular中的许多内置服务来设计我们自己的Angular服务。在本章中，我们将讨论如何做到这一点，以便您了解如何创建和管理Angular服务。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Why use a service or factory?
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么要使用服务或工厂？
- en: Creating a service
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建服务
- en: Accessing data from components using service
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用服务从组件中访问数据
- en: Creating an asynchronous service
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建异步服务
- en: Why use a service or factory?
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么要使用服务或工厂？
- en: We have discussed One-way Data Binding, Two-way Data Binding, and data sharing
    between components. We may have very clear views defined and uncluttered components
    implemented, but the business logic and data fetching/storing logic has got to
    be there somewhere. Building great Angular apps comes from making the most out
    of the built-in services. The Angular framework includes services to help you
    with networking, caching, logging, promises, and so on.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论了单向数据绑定、双向数据绑定以及组件之间的数据共享。我们可能已经定义了非常清晰的视图并实现了整洁的组件，但是业务逻辑和数据获取/存储逻辑必须存在于某个地方。构建出色的Angular应用程序来自于充分利用内置服务。Angular框架包括帮助您进行网络、缓存、日志记录、承诺等方面的服务。
- en: Writing our own services or factories helps to achieve reusability in code and
    enables us to share the application-specific logic across the application blocks,
    such as components, directives, and so on. Organizing the application-specific
    logic into services or factories leads to cleaner, better-defined components,
    and helps you to organize your project with more maintainable code.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 编写我们自己的服务或工厂有助于实现代码的可重用性，并使我们能够在应用程序块（如组件、指令等）之间共享特定于应用程序的逻辑。将特定于应用程序的逻辑组织到服务或工厂中会导致更清晰、更明确定义的组件，并帮助您以更易维护的代码组织项目。
- en: 'In AngularJS, we implement services or factories for this purpose. The services
    are invoked using a new keyword at runtime such as a constructor function. The
    following code snippet shows the AngularJS code of a service implementation:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在AngularJS中，我们为此目的实现服务或工厂。服务是在运行时使用new关键字调用的，比如构造函数。以下代码片段显示了服务实现的AngularJS代码：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `MovieService` function can be injected into any controller that needs to
    fetch the list of movies from the API.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`MovieService`函数可以注入到任何需要从API获取电影列表的控制器中。'
- en: 'The same feature can be implemented using a factory in Angular with additional
    capabilities. A factory is one type of design pattern that deals with creating
    objects. We can return new classes, functions, or closures from a factory. Similar
    to a service, a factory can also be injected into a controller. The following
    code snippet shows the AngularJS code of a factory implementation:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在Angular中，可以使用工厂来实现相同的功能，并具有额外的功能。工厂是处理创建对象的一种设计模式。我们可以从工厂返回新的类、函数或闭包。与服务类似，工厂也可以注入到控制器中。以下代码片段显示了工厂实现的AngularJS代码：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Both a service and a factory can be injected into a controller, and the `getMovieList`
    function can be called as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 服务和工厂都可以注入到控制器中，并且可以调用`getMovieList`函数，如下所示：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Though a factory is flexible, a service is the best choice to make the migration
    to ES6 easier. When using a service, a constructor function in ES5 can be smoothly
    replaced with ES6 classes during the migration process to ES6\. We can rewrite
    the `MovieService` service in ES6 as follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然工厂是灵活的，但服务是使迁移到ES6更容易的最佳选择。使用服务时，ES5中的构造函数可以在迁移到ES6的过程中顺利替换为ES6类。我们可以将`MovieService`服务重写为ES6如下：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Services are user-defined classes that solve specific purposes, and can be
    injected into the component. Angular recommends that you have only view-specific
    codes in components that enrich the UI/UX in your Angular application. Components
    are the consumers of services where they serve as the source of application data
    and the library of business logic. Keeping the components clean and injecting
    the service enables us to test the components against a mock service:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 服务是用户定义的类，用于解决特定目的，并可以注入到组件中。Angular建议在组件中只包含与视图相关的代码，以丰富Angular应用程序中的UI/UX。组件是服务的消费者，它们作为应用程序数据的来源和业务逻辑的库。保持组件清晰并注入服务使我们能够针对模拟服务测试组件：
- en: '![](assets/d92acc85-6515-4c4a-a88e-afef782f2756.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d92acc85-6515-4c4a-a88e-afef782f2756.png)'
- en: Creating a service
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个服务
- en: 'Application-specific or business logic functions, such as persisting application
    data, logging the errors, file storage, and so on, should be delegated to services,
    and the components should consume the respective services to deal with the appropriate
    business or application-specific logics:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序特定或业务逻辑函数，如持久化应用程序数据、记录错误、文件存储等，应该委托给服务，组件应该消费相应的服务来处理适当的业务或应用程序特定逻辑：
- en: '![](assets/25fc7ba0-69e9-40cd-bb64-6a8f875e116e.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/25fc7ba0-69e9-40cd-bb64-6a8f875e116e.png)'
- en: Let us create a simple service called `BookService` that deals with fetching
    the collection of books available in the source. The source may be data returned
    from a web API service or a JSON file.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个简单的名为`BookService`的服务，处理获取源中可用的书籍集合。源可以是从Web API服务返回的数据或JSON文件。
- en: 'First, let us create a `Book` model to persist the domain object value. The
    code snippet of a `Book` class is shown here:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们创建一个`Book`模型来持久化领域对象值。下面显示了`Book`类的代码片段：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The preceding code snippet shows a TypeScript class for `Book`, with properties
    such as `id`, `title`, `author`, and `publisher`. Now let us create a service
    named `BookService` that handles operations related to `Book`:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码片段显示了一个`Book`的TypeScript类，其中包括`id`、`title`、`author`和`publisher`等属性。现在让我们创建一个名为`BookService`的服务，处理与`Book`相关的操作：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Here, we first imported the `Book` model class. Then, we defined the `BookService`
    class with a `getBooks` method that returns the collection of books.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们首先导入了`Book`模型类。然后，我们定义了`BookService`类，其中包含一个`getBooks`方法，返回书籍的集合。
- en: 'Now we need a component to inject the `BookService` and consume. Let us create
    a `BookListComponent` that retrieves the list of books by calling a method, `getBooks`,
    from `BookService`. The following code snippet shows the `BookListComponent` class:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要一个组件来注入`BookService`并消费。让我们创建一个`BookListComponent`，通过调用`BookService`的`getBooks`方法来检索书籍列表。以下代码片段显示了`BookListComponent`类：
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Here, we started with importing `Component` and `OnInit` from `@angular/core`
    and then we imported the `Book` model class and the `BookService` class. Then
    we annotated the `BookListComponent` class with the `@Component` attribute, along
    with the metadata information, such as the selector and template. The `BookListComponent`
    class is defined with a `books` variable of `Book` array and a constructor that
    is injected with `BookService`. Note that the `BookListComponent` implements the
    `OnInit` life cycle hook, and it calls the `getBooks` method from the `BookService`
    class by using the instance of the `BookService` that is injected into the constructor.
    The list of books returned by `getBooks` is assigned to the `books` variable of
    the `BookListComponent` class.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们首先从`@angular/core`中导入`Component`和`OnInit`，然后导入`Book`模型类和`BookService`类。然后我们用`@Component`属性对`BookListComponent`类进行了注释，以及选择器和模板等元数据信息。`BookListComponent`类定义了一个`Book`数组的`books`变量和一个构造函数，它被注入了`BookService`。请注意，`BookListComponent`实现了`OnInit`生命周期钩子，并且它通过使用注入到构造函数中的`BookService`实例来调用`BookService`类的`getBooks`方法。`getBooks`返回的书籍列表被赋给了`BookListComponent`类的`books`变量。
- en: Now let us create a root component, `AppComponent`. Pass the `BookListComponent`
    as a directive and `BookService` as a provider. The following is the code snippet
    of `AppComponent:`
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们创建一个根组件`AppComponent`。将`BookListComponent`作为指令传递，并将`BookService`作为提供者。以下是`AppComponent`的代码片段：
- en: '[PRE7]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Here, we started with importing `Component` from `@angular/core`, `BookListComponent`
    and `BookService`. Then we annotated the `AppComponent` with the `@Component`
    attribute, along with metadata such as the selector and template. Note that we
    have a special HTML tag `<book-list/>` in the template. Somewhere, we need to
    instruct Angular to initialize `BooklistComponent` and render the view accordingly.
    We also need to inform Angular that `AppComponent` is the root component by bootstrapping
    it. We can achieve this by creating an `entrypoint` for our Angular application.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们首先从`@angular/core`中导入`Component`，`BookListComponent`和`BookService`。然后我们用`@Component`属性对`AppComponent`进行了注释，以及选择器和模板等元数据。请注意，模板中有一个特殊的HTML标签`<book-list/>`。在某个地方，我们需要指示Angular初始化`BooklistComponent`并相应地渲染视图。我们还需要告诉Angular，`AppComponent`是根组件，通过引导它来实现这一点。我们可以通过为我们的Angular应用程序创建一个`入口点`来实现这一点。
- en: 'Create a class named `AppModule` and annotate it with `NgModule` (`app.module.ts`).
    This instructs the Angular module that this class is the `entrypoint` of the application.
    A code snippet of `AppModule` is given here:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为`AppModule`的类，并用`NgModule`进行注释（`app.module.ts`）。这指示Angular模块，这个类是应用程序的`入口点`。这里给出了`AppModule`的代码片段：
- en: '[PRE8]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Here, we started by importing `NgModule` from the Angular core. Then we imported
    the `BrowserModule` from the Angular platform browser, as our application runs
    on a web browser. Then we imported the application components, such as `AppComponent`
    which is a bootstrapped root component, and the `BooklistComponent`, imported
    and added in declarations. Not that the `AppModule` is decorated with `NgModule`,
    along with the metadata, such as imports, declarations, and bootstrap, respectively.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们首先从Angular核心中导入`NgModule`。然后我们从Angular平台浏览器中导入`BrowserModule`，因为我们的应用程序在Web浏览器上运行。然后我们导入应用程序组件，比如`AppComponent`，它是一个引导根组件，以及`BooklistComponent`，导入并添加到声明中。请注意，`AppModule`被装饰为`NgModule`，同时具有元数据，如导入、声明和引导。
- en: 'Now let us create an `index.html` page with the following code snippet:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们创建一个`index.html`页面，其中包含以下代码片段：
- en: '[PRE9]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Here, we have not referred any necessary libraries from `node_modules` as they
    will be loaded by Webpack. Webpack is a tool used to bundle resources and serve
    them from a server to a browser. Webpack is a recommended alternative to systemJS.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们没有引用任何必要的库来自`node_modules`，因为它们将由Webpack加载。Webpack是一个用于捆绑资源并从服务器提供给浏览器的工具。Webpack是systemJS的推荐替代方案。
- en: Accessing data from components using services
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用服务从组件中访问数据
- en: As the Angular application evolves, we keep introducing more components, and
    these components will be dealing with the core data of the application. As a result,
    we may end up writing repetitive code to access the data. However, we can avoid
    writing redundant code by introducing reusable data services. The component that
    is in need of the data can be injected with the data service, and that can be
    used to access the data. In this way, we can reuse logic, write less code, and
    have more separation in designing our components.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 随着Angular应用程序的发展，我们不断引入更多的组件，这些组件将处理应用程序的核心数据。因此，我们可能会写重复的代码来访问数据。然而，我们可以通过引入可重用的数据服务来避免编写冗余的代码。需要数据的组件可以注入数据服务，并且可以用来访问数据。通过这种方式，我们可以重用逻辑，编写更少的代码，并在设计组件时有更多的分离。
- en: We will use the Angular `HttpModule`, which is shipped as an `npm` package.
    In order to use `HttpModule` in our application, we need to import `HttpModule`
    from `@Angular/http` and the HTTP service should be injected into the constructor
    of the controller or the application service.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Angular的`HttpModule`，它作为一个`npm`包进行发布。为了在我们的应用程序中使用`HttpModule`，我们需要从`@Angular/http`导入`HttpModule`，并且HTTP服务应该被注入到控制器或应用程序服务的构造函数中。
- en: Implementing services
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实施服务
- en: An application may share data between components. Consider a movie database
    application, where a `Movies` list or a single `Movie` object will be shared across
    the components. We need a service to serve the `Movies` list or a single `Movie`
    object as and when requested by any components.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序可以在组件之间共享数据。考虑一个电影数据库应用程序，其中`Movies`列表或单个`Movie`对象将在组件之间共享。我们需要一个服务来在任何组件请求时提供`Movies`列表或单个`Movie`对象。
- en: 'First, let us create a movie service using Angular CLI. Execute the following
    command in the command prompt to generate boilerplate code for `movie.service`:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们使用Angular CLI创建一个电影服务。在命令提示符中执行以下命令以生成`movie.service`的样板代码：
- en: '[PRE11]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Here, the Angular CLI has created two files, namely `movie.service.ts` and
    `movie.service.spec.ts`. The boilerplate code of the `movie.service.ts` generated
    is shown here:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，Angular CLI创建了两个文件，即`movie.service.ts`和`movie.service.spec.ts`。生成的`movie.service.ts`的样板代码如下所示：
- en: '[PRE12]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Note that the `MovieService` class is decorated with the `@Injectable` attribute
    to facilitate a Dependency Injection to instantiate and inject this service into
    any component that is in need of it. We made this `Injectable` function available
    by importing it from the Angular core.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`MovieService`类被装饰为`@Injectable`属性，以便依赖注入来实例化并将此服务注入到任何需要它的组件中。我们通过从Angular核心导入它，使这个`Injectable`函数可用。
- en: 'Moving on, we need to add the `getMovies` function to the `MovieService` generated.
    Introduce the `getMovies()` function to the `MovieService` class as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要向生成的`MovieService`添加`getMovies`函数。将`getMovies()`函数引入到`MovieService`类中如下：
- en: '[PRE13]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Note that we have given the return type as void for now, but we need to change
    it when we move on to further implementation.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们现在将返回类型设置为void，但是当我们进行进一步实现时，我们需要进行更改。
- en: 'We need to introduce a domain model, `Movie`, to represent a movie across the
    application. Let us generate a boilerplate code for the `Movie` class using Angular
    CLI as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要引入一个领域模型，`Movie`，来表示整个应用程序中的电影。让我们使用Angular CLI生成`Movie`类的样板代码如下：
- en: '[PRE14]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Here, this command has created two files, namely `movie.ts` and `movie.spec.ts`.
    Actually, while in domain mode, we may not write any test methods to assert it,
    so you can safely delete `movie.spec.ts`. The code snippet of the `movie.ts` generated
    is shown here:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，这个命令创建了两个文件，分别是`movie.ts`和`movie.spec.ts`。实际上，在领域模式下，我们可能不会编写任何测试方法来断言它，所以你可以安全地删除`movie.spec.ts`。生成的`movie.ts`的代码片段如下所示：
- en: '[PRE15]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Let us add a few properties to make it represent the characteristics of a movie.
    The code for that is given here:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加一些属性来使其代表电影的特征。代码如下所示：
- en: '[PRE16]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We have the domain model in place. Now let us update the return type of the
    `getMovies()` function in `MovieService` as follows:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经准备好领域模型。现在让我们更新`MovieService`中`getMovies()`函数的返回类型如下：
- en: '[PRE17]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The complete code snippet of `MovieService` is given here:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`MovieService`的完整代码片段如下所示：'
- en: '[PRE18]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Here, the `getMovies()` function returns the collection of movies of type `Movie[]`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`getMovies()`函数返回类型为`Movie[]`的电影集合。
- en: Consuming the service
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 消费服务
- en: 'We have `MovieService` ready to be consumed. Let us consume it in a component.
    Using Angular CLI, we will create a component by executing the following command:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经准备好消费`MovieService`。让我们在一个组件中消费它。使用Angular CLI，我们将通过执行以下命令来创建一个组件：
- en: '[PRE19]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This creates four files, namely `movie.component.ts`, `movie.component.html`,
    `movie.component.css`, and `movie.component.spec.ts`. The code snippet of the
    `movie.component.ts` file is shown here:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建四个文件，分别是`movie.component.ts`、`movie.component.html`、`movie.component.css`和`movie.component.spec.ts`。`movie.component.ts`文件的代码片段如下所示：
- en: '[PRE20]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The `MovieComponent` is decorated with the `@Component` decorator, along with
    the metadata, such as selector, `templateUrl`, and `styleUrls`. The `MovieService`
    will be hooked under the `ngOnInit` method. Let us proceed with modifying `MovieComponent`
    to consume `MovieService`.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`MovieComponent`被`@Component`装饰器修饰，以及元数据，比如选择器、`templateUrl`和`styleUrls`。`MovieService`将被挂钩在`ngOnInit`方法下。让我们继续修改`MovieComponent`来消费`MovieService`。'
- en: 'First things first; we need to import `MovieService` to our component `MovieComponent`.
    This import statement provides a reference to `MovieService` in `MovieComponent`.
    But to consume `MovieService`, we need to create the instance of `MovieService`.
    How do we do it? In a standard way, we can instantiate `MovieService` as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要将`MovieService`导入到我们的组件`MovieComponent`中。这个导入语句为`MovieComponent`提供了对`MovieService`的引用。但是要消费`MovieService`，我们需要创建`MovieService`的实例。我们该如何做呢？在标准方式中，我们可以实例化`MovieService`如下：
- en: '[PRE21]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The code snippet of `MovieComponent` after importing `MovieService` and instantiating
    `MovieService` in the `OnInit` life cycle hook method is shown here:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在`OnInit`生命周期钩子方法中导入`MovieService`并实例化`MovieService`后的`MovieComponent`的代码片段如下所示：
- en: '[PRE22]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Here, when the `OnInit` event is fired, `MovieService` gets instantiated, and
    the collection of movies will be retrieved by calling the `getMovies()` function.
    The movies list will be assigned to the `movies` properties of `MovieComponent`
    for further consumption in the template.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，当`OnInit`事件被触发时，`MovieService`被实例化，并且通过调用`getMovies()`函数来检索电影集合。电影列表将被分配给`MovieComponent`的`movies`属性，以便在模板中进一步使用。
- en: Creating an asynchronous service
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个异步服务
- en: We just created a service called `MovieService` that synchronously calls the
    `getMovies()` method to retrieve the collection of movies. As we are consuming
    an external source, such as a web API, to retrieve the collection of movies, our
    application has to wait until the server responds with the list of movies, as
    the `getMovies` function is synchronous.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚创建了一个名为`MovieService`的服务，它同步调用`getMovies()`方法来检索电影集合。由于我们正在消费外部来源，比如Web
    API，来检索电影集合，我们的应用程序必须等待服务器响应电影列表，因为`getMovies`函数是同步的。
- en: So we need to implement an asynchronous mechanism to retrieve the collection
    of movies. In such way, we can avoid making our application wait until the web
    API responds with the collection of movies. We can achieve this by using promises.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们需要实现一种异步机制来检索电影集合。通过这种方式，我们可以避免使我们的应用程序等待Web API响应电影集合。我们可以通过使用Promise来实现这一点。
- en: What is a Promise?
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是Promise？
- en: A **Promise** is a sincere assurance that an action will be performed. It calls
    back a function when the server responds with the result. We request an asynchronous
    service with a callback function to perform some operation and the service calls
    our callback function with either the result or with the error. You can read more
    about promises in [Chapter 7](8eacfd6f-0cc3-49d5-9c85-f823dad66ad6.xhtml), *Asynchronous
    Programming Using Observables*.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '**Promise**是一个真诚的保证，表示将执行某个操作。当服务器响应结果时，它会回调一个函数。我们请求一个异步服务，并使用回调函数执行某些操作，服务会用结果或错误调用我们的回调函数。您可以在[第7章](8eacfd6f-0cc3-49d5-9c85-f823dad66ad6.xhtml)中了解更多关于Promise的内容，*使用可观察对象进行异步编程*。'
- en: Using a Promise in a service
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在服务中使用Promise
- en: 'Let us update the `getMovies` function in `MovieService` to return a resolved
    `Promise` as follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更新`MovieService`中的`getMovies`函数，以返回一个已解决的`Promise`，如下所示：
- en: '[PRE23]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Note that we return the collection of movies as a resolved `Promise` from the
    `getMovies` function. Now we need to modify the code that assigns the collection
    of movies to the movies property in `MovieComponent`.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们从`getMovies`函数中返回电影集合作为已解决的`Promise`。现在我们需要修改将电影集合分配给`MovieComponent`中的movies属性的代码。
- en: 'The existing code in `MovieComponent` assigns `Promise` to the `movies` property
    instead of the collection of movies, as the `getMovies` in `MovieService` returns
    the resolved `Promise` now. So let us modify the code of the `ngOnInit` event
    as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`MovieComponent`中的现有代码将`Promise`分配给`movies`属性，而不是电影集合，因为`MovieService`中的`getMovies`现在返回已解决的`Promise`。因此，让我们修改`ngOnInit`事件的代码如下：'
- en: '[PRE24]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: We provide our callback function to the `then` method of `Promise`, so the chain
    function `then` in `getMovies` has the command to assign the collection of movies
    returned from the web API to the property of `MovieComponent`, `this.movies`.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将我们的回调函数提供给`Promise`的`then`方法，所以`getMovies`中的链式函数`then`有命令将从Web API返回的电影集合分配给`MovieComponent`的属性`this.movies`。
- en: Here, the application will not wait until the `MovieService` returns the collection
    of movies. The `movies` property gets the list of movies assigned from the callback
    function.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，应用程序不会等待`MovieService`返回电影集合。`movies`属性从回调函数中获取分配的电影列表。
- en: Summary
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Cool! This brings us to the end of the chapter. We learned about the importance
    and advantages of implementing services in our application. We also learned about
    how to consume services in components.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 很酷！这就是本章的结束。我们了解了在应用程序中实现服务的重要性和优势。我们还学习了如何在组件中使用服务。
- en: However, instantiating `MovieService` directly is a bad approach. Components
    need not know how to instantiate the services; their only purpose is to know how
    to consume the services. Services also enable the components to tightly couple
    with the type of `MovieServices` and their way of instantiating. This is unacceptable;
    the components should be loosely coupled as far as possible.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，直接实例化`MovieService`是一个不好的方法。组件不需要知道如何实例化服务；它们的唯一目的是知道如何使用服务。服务还使组件能够与`MovieServices`的类型和它们的实例化方式紧密耦合。这是不可接受的；组件应尽可能松散耦合。
- en: In the next chapter, we will discuss injecting services into components using
    Dependency Injections, which enable us to have loosely coupled components.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论使用依赖注入将服务注入到组件中，这样我们就可以拥有松散耦合的组件。
