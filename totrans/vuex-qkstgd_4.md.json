["```js\ntest # test folder\n├── test_file.spec.js # a test file\n└── ...\nsrc # app main folder\n├── index.html\n├── main.js\n├── api\n│ └── ... # abstractions for making API requests\n├── components\n│ ├── App.vue\n│ └── ...\n└── store\n    ├──index.js #here we assemble modules and export the store\n    ├── actions.js # root actions\n    ├── mutations.js # root mutations\n    └── modules\n        ├── module_a.js # a module\n        └── module_b.js # another module\n```", "```js\n<!-- src/index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Packt: Vuex condensed EveryNote</title>\n</head>\n<body>\n<div id=\"app\"></div>\n</body>\n</html>\n```", "```js\n// src/main.js\nimport Vue from 'vue';\nimport App from './components/App.vue';\nimport store from './store';\n\nnew Vue({\n el: '#app',\n store,\n render: h => h(App),\n});\n\n```", "```js\n// src/store/index.js\nimport Vuex from 'vuex';\nimport Vue from 'vue';\n\nVue.use(Vuex); \nconst debug = process.env.NODE_ENV !== 'production';\nconst store = new Vuex.Store({\n state: {},\n strict: debug,\n});\n\nexport default store;\n\n```", "```js\n// src/components/App.vue\n<template>\n <div class=\"app\">EveryNote app</div>\n</template>\n<script>\n export default {};\n</script>\n<style>\n .app {\n font-family: \"Times New Roman\", Times, serif;\n background-image: url(\"background.jpeg\");\n }\n</style>\n```", "```js\nTo-do:\nShow all notes*\nCreate new notes\nUpdate an existing note\nDelete a note\nSave notes to LocalStorage\n\nExtra:\nSearch among notes\nPin a note\n\nDone:\n```", "```js\n// test/store/store.spec.js\nimport store from '../../src/store';\n\ndescribe('EveryNote main store', () => {\n  it('should have a list of notes', () => {\n    expect(Array.isArray(store.state.noteList)).toBe(true);\n  });\n});\n\n```", "```js\n// src/store/index.js\n\nimport ...\n// ...\nconst store = new Vuex.Store({\n  state: {\n    noteList: [],\n  },\n  strict: debug,\n});\n...\n```", "```js\n// test/components/NoteList.spec.js\nimport Vue from 'vue';\nimport Vuex from 'vuex';\nimport NoteList from '../../src/components/NoteList.vue';\n\ndescribe('NoteList.vue', () => {\n  let store;\n  let noteList;\n\n  function newNoteListCmp() {\n    const Constructor = Vue.extend(NoteList);\n    return new Constructor({\n      store,\n    }).$mount();\n  }\n\n  beforeEach(() => {\n    Vue.use(Vuex);\n\n    noteList = [];\n    store = new Vuex.Store({\n      state: { noteList },\n    });\n  });\n\n  it('should expose store.noteList', () => {\n    const noteListCmp = newNoteListCmp();\n\n    expect(noteListCmp.notes).toBe(noteList);\n  });\n\n  it('should cycle through noteList', () => {\n    noteList.push({});\n    noteList.push({});\n\n    const noteListCmp = newNoteListCmp();\n\n    const contents =\n      noteListCmp.$el.querySelectorAll('.content');\n    expect(contents.length).toBe(2);\n  });\n\n  it('should render notes inside noteList', () => {\n    const title = 'Note title';\n    const content = 'Note content';\n    noteList.push({ title, content });\n\n    const noteListCmp = newNoteListCmp();\n\n    const { $el } = noteListCmp;\n    const titleEl = $el.querySelector('.title');\n    const contentEl = $el.querySelector('.content');\n    expect(titleEl.textContent).toBe(title);\n    expect(contentEl.textContent).toBe(content);\n  });\n});\n```", "```js\n// src/components/NoteList.vue\n<template>\n  <div class=\"container\">\n    <div v-for=\"note in notes\">\n      <div class=\"title\">{{note.title}}</div>\n      <div class=\"content\">{{note.content}}</div>\n    </div>\n  </div>\n</template>\n<script>\n  import { mapState } from 'vuex';\n\n  export default {\n    computed: mapState({\n      notes: 'noteList',\n    }),\n  };\n</script>\n<style>\n</style>\n```", "```js\n// src/store/index.js\nimport Vuex from 'vuex';\nimport Vue from 'vue';\n\nVue.use(Vuex);\n\nconst debug = process.env.NODE_ENV !== 'production';\nconst store = new Vuex.Store({\n  state: {\n    noteList: [\n { title: 'title A', content: 'content 1' },\n { title: 'title B', content: 'content 2' },\n    ],\n  },\n  strict: debug,\n});\n\nexport default store;\n```", "```js\n// src/components/App.vue\n<template>\n  <div class=\"app\">\n    <div>EveryNote app</div>\n    <note-list></note-list>\n  </div>\n</template>\n<script>\n  import NoteList from './NoteList.vue';\n\n  export default {\n    components: {\n      NoteList,\n    },\n  };\n</script>\n<style>\n  .app {\n    font-family: \"Times New Roman\", Times, serif;\n    background-image: url(\"background.jpeg\");\n  }\n</style>\n```", "```js\ngit checkout step-1_note-list\n```", "```js\nTo-do:\nCreate new notes*\n- NoteEditor component\n- Update current note mutation\n- Add note to noteList mutation\n- Add note action\n\nUpdate an existing note\nDelete a note\nSave notes to LocalStorage\n\nExtra:\nSearch among notes\nPin a note\n\nDone:\nShow all notes\n  - Add note list to the store\n  - Note list vue component\n  -- Add a temporary note list to the store\n```", "```js\n// test/store/store.spec.js\nimport store from '../../src/store';\n\ndescribe('EveryNote main store', () => {\n  it('should have a list of notes', () => {\n    expect(Array.isArray(store.state.noteList)).toBe(true);\n  });\n\n  it('should have currentNote property', () => {\n    const { state } = store;\n    expect(state.currentNote.title).not.toBe(undefined);\n    expect(state.currentNote.content).not.toBe(undefined);\n  });\n});\n```", "```js\n// src/store/index.js\n\n//...\n\nconst store = new Vuex.Store({\n  state: {\n    noteList: [\n      { title: 'title A', content: 'content 1' },\n      { title: 'title B', content: 'content 2' },\n    ],\n    currentNote: { title: '', content: '' },\n  },\n  mutations,\n  strict: debug,\n});\n\n```", "```js\n// test/store/mutations.spec.js\nimport { mutations, types } from '../../src/store/mutations';\n\ndescribe('EveryNote root mutations', () => {\n  it('should update current note', () => {\n    const updateCurrentNote\n      = mutations[types.UPDATE_CURRENT_NOTE];\n    const state = { currentNote: { title: '', content: '' } };\n    const newNote = { title: 'title', content: 'some text' };\n\n    updateCurrentNote(state, newNote);\n\n    expect(state.currentNote).toEqual(newNote);\n  });\n});\n```", "```js\n// src/store/mutations.js\nexport const types = {\n  UPDATE_CURRENT_NOTE: 'UPDATE_CURRENT_NOTE',\n};\n\nexport const mutations = {\n  [types.UPDATE_CURRENT_NOTE](state, { title, content }) {\n state.currentNote = { title, content };\n },\n};\n\n```", "```js\n// test/components/NoteEditor.spec.js\nimport Vue from 'vue';\nimport Vuex from 'vuex';\nimport NoteEditor from '../../src/components/NoteEditor.vue';\nimport { types, mutations } from '../../src/store/mutations';\nimport actions from '../../src/store/actions';\n\nconst { UPDATE_CURRENT_NOTE } = types;\ndescribe('NoteEditor component', () => {\n  let store;\n  let currentNote;\n\n  function newNoteEditorCmp() {\n    const Constructor = Vue.extend(NoteEditor);\n    store = new Vuex.Store({\n            state: { currentNote, noteList: [] },\n      mutations,\n      actions,\n    });\n    return new Constructor({\n      store,\n    }).$mount();\n  }\n\n  beforeEach(() => {\n    Vue.use(Vuex);\n    currentNote = { title: 'title', content: 'content' };\n  });\n\n  it('should expose currentNote.content as content', () => {\n    const editorCmp = newNoteEditorCmp();\n\n    expect(editorCmp.content).toBe(currentNote.content);\n  });\n\n  it('should expose currentNote.content setter', () => {\n    const editorCmp = newNoteEditorCmp();\n    store.commit = jasmine.createSpy('commit spy');\n    const newContent = 'A new content';\n\n    editorCmp.content = newContent;\n\n    const expected = {\n      title: currentNote.title,\n      content: newContent,\n    };\n    expect(store.commit)\n      .toHaveBeenCalledWith(UPDATE_CURRENT_NOTE, expected);\n  });\n\n  it('should expose currentNote.title as title', () => {\n    const editorCmp = newNoteEditorCmp();\n\n    expect(editorCmp.title).toBe(currentNote.title);\n  });\n\n  it('should expose currentNote.title setter', () => {\n    const editorCmp = newNoteEditorCmp();\n    store.commit = jasmine.createSpy('commit spy');\n    const newTitle = 'A new title';\n\n    editorCmp.title = newTitle;\n\n    const expected = {\n      title: newTitle,\n      content: currentNote.content,\n    };\n    expect(store.commit)\n      .toHaveBeenCalledWith(UPDATE_CURRENT_NOTE, expected);\n  });\n\n  it('should render current note inside the editor', () => {\n    const editorCmp = newNoteEditorCmp();\n\n    const { $el } = editorCmp;\n    const contentEl = $el.querySelector('.content');\n    const titleEl = $el.querySelector('.title');\n    expect(contentEl.value).toBe(currentNote.content);\n    expect(titleEl.value).toBe(currentNote.title);\n  });\n});\n```", "```js\n// src/components/NoteEditor.vue\n<template>\n  <div>\n    <input v-model=\"title\" type=\"text\" class=\"title\"/>\n    <input v-model=\"content\" type=\"text\" class=\"content\"/>\n  </div>\n</template>\n<script>\n  import { types } from '../store/mutations';\n\n  const { UPDATE_CURRENT_NOTE } = types;\n  export default {\n    computed: {\n      content: {\n        get() {\n          return this.$store.state.currentNote.content;\n        },\n        set(value) {\n          const newContent = {\n            title: this.title,\n            content: value,\n          };\n          this.$store.commit(UPDATE_CURRENT_NOTE, newContent);\n        },\n      },\n      title: {\n        get() {\n          return this.$store.state.currentNote.title;\n        },\n        set(value) {\n          const newContent = {\n            title: value,\n            content: this.content,\n          };\n          this.$store.commit(UPDATE_CURRENT_NOTE, newContent);\n        },\n      },\n    },\n  };\n</script>\n<style></style>\n```", "```js\n// test/store/mutations.spec.js\nimport { mutations, types } from '../../src/store/mutations';\n\ndescribe('EveryNote root mutations', () => {\n  it('should update current note', () => {\n    // ...\n  });\n\n  it('should add a note to noteList', () => {\n    const ADD_NOTE = mutations[types.ADD_NOTE];\n    const state = { noteList: [] };\n    const newNote = { title: 'title', content: 'some text' };\n\n    ADD_NOTE(state, newNote);\n\n    expect(state.noteList['0']).toBe(newNote);\n  });\n});\n```", "```js\n// src/store/mutations.js\nexport const types = {\n  UPDATE_CURRENT_NOTE: 'UPDATE_CURRENT_NOTE',\n  ADD_NOTE: 'ADD_NOTE',\n};\n\nexport const mutations = {\n  [types.UPDATE_CURRENT_NOTE](state, { title, content }) {\n    state.currentNote = { title, content };\n  },\n  [types.ADD_NOTE](state, aNote) {\n state.noteList.push(aNote);\n },\n};\n```", "```js\n// test/store/actions.spec.js\n\nimport actions from '../../src/store/actions';\nimport { types } from '../../src/store/mutations';\n\ndescribe('EveryNote root actions', () => {\n  it('should have addNote action', () => {\n    const { addNote } = actions;\n    const mockContext = {\n      commit: jasmine.createSpy('commit'),\n    };\n    const aNote = {};\n\n    addNote(mockContext, aNote);\n\n    expect(mockContext.commit)\n      .toHaveBeenCalledWith(types.ADD_NOTE, aNote);\n  });\n});\n```", "```js\n// src/store/actions\nimport { types } from './mutations';\n\nexport default {\n  addNote({ commit }, aNote) {\n commit(types.ADD_NOTE, aNote);\n  },\n};\n\n```", "```js\n// test/components/NoteEditor.spec.js\nimport // ...\n\nconst { UPDATE_CURRENT_NOTE } = types;\ndescribe('NoteEditor component', () => {\n  let store;\n  let currentNote;\n\n  function newNoteEditorCmp() {\n    // ...\n  }\n\n  // ...\n\n  it('should have addNote method', () => {\n    const editorCmp = newNoteEditorCmp();\n    spyOn(store, 'dispatch');\n\n    editorCmp.addNote();\n\n    expect(store.dispatch)\n      .toHaveBeenCalledWith('addNote', currentNote);\n  });\n\n  it('should not add empty notes', () => {\n    const editorCmp = newNoteEditorCmp();\n    spyOn(store, 'dispatch');\n    currentNote.title = '';\n    currentNote.content = '';\n\n    editorCmp.addNote();\n\n    expect(store.dispatch).not.toHaveBeenCalled();\n  });\n\n  it('should reset title and content on addNote', () => {\n    const editorCmp = newNoteEditorCmp();\n\n    editorCmp.addNote();\n\n    expect(editorCmp.title).toBe('');\n    expect(editorCmp.content).toBe('');\n  });\n});\n```", "```js\n// src/components/NoteEditor.vue\n<template>\n  <div>\n    <input v-model=\"title\" type=\"text\" class=\"title\"\n           placeholder=\"title\"/>\n    <input v-model=\"content\" type=\"text\" class=\"content\"\n           placeholder=\"content\"/>\n    <button @click=\"addNote\">Add note</button>\n  </div>\n</template>\n<script>\n  import { types } from '../store/mutations';\n\n  const { UPDATE_CURRENT_NOTE } = types;\n  export default {\n    computed: {\n      content: {\n        // ...\n      },\n      title: {\n        // ...\n      },\n    },\n    methods: {\n      addNote() {\n        if (this.title !== '' || this.content !== '') {\n          const newNote = {\n            title: this.title,\n            content: this.content,\n          };\n\n          this.$store.dispatch('addNote', newNote);\n        }\n        this.title = '';\n        this.content = '';\n      },\n    },\n  };\n</script>\n```", "```js\n// src/store/index.js\nimport // ...\nimport actions from './actions';\n\n// ...\n\nconst store = new Vuex.Store({\n  state: { // ... },\n  mutations,\n  actions,\n  strict: debug,\n});\n```", "```js\n// src/components/App.vue\n<template>\n  <div class=\"app\">\n    <div>EveryNote app</div>\n <note-editor></note-editor>\n    <note-list></note-list>\n  </div>\n</template>\n<script>\n  import NoteList from './NoteList.vue';\n  import NoteEditor from './NoteEditor.vue';\n\n  export default {\n    components: {\n      NoteList,\n      NoteEditor,\n    },\n  };\n</script>\n<style>\n    // ...\n</style>\n```", "```js\ngit checkout step-2_create-notes\n```", "```js\nTo-do:\nDelete a note*\n- delete action\n- delete mutation\n- create Note component and use it in NoteList component\n\nUpdate an existing note\nSave notes to LocalStorage\n\nExtra:\nSearch among notes\nPin a note\n\nDone:\nShow all notes\nCreate new notes\n```", "```js\n// test/store/mutations.spec.js\nimport { mutations, types } from '../../src/store/mutations';\n\ndescribe('EveryNote root mutations', () => {\n   // ...\n\n  it('should delete a note', () => {\n    const DELETE_NOTE = mutations[types.DELETE_NOTE];\n    const aNote = {};\n    const state = { noteList: [aNote] };\n\n    DELETE_NOTE(state, aNote);\n\n    expect(state.noteList.length).toBe(0);\n  });\n\n  it('should NOT delete a note if not inside noteList', ()=>{\n    const DELETE_NOTE = mutations[types.DELETE_NOTE];\n    const aNote = {};\n    const state = { noteList: [aNote] };\n    const anotherNote = {};\n\n    DELETE_NOTE(state, anotherNote);\n\n    expect(state.noteList.length).toBe(1);\n  });\n});\n```", "```js\n// src/store/mutations.js\nexport const types = {\n  UPDATE_CURRENT_NOTE: 'UPDATE_CURRENT_NOTE',\n  ADD_NOTE: 'ADD_NOTE',\n  DELETE_NOTE: 'DELETE_NOTE',\n};\n\nexport const mutations = {\n  // ...\n [types.DELETE_NOTE](state, aNote) {\n    const index = state.noteList.indexOf(aNote);\n    if (index >= 0) {\n      state.noteList.splice(index, 1);\n    }\n  },\n};\n\n```", "```js\n// test/store/actions.spec.js\nimport actions from '../../src/store/actions';\nimport { types } from '../../src/store/mutations';\n\ndescribe('EveryNote root actions', () => {\n  // ..\n  it('should have deleteNote action', () => {\n    const { deleteNote } = actions;\n    const mockContext = {\n      commit: jasmine.createSpy('commit'),\n    };\n    const aNote = {};\n\n    deleteNote(mockContext, aNote);\n\n    expect(mockContext.commit)\n      .toHaveBeenCalledWith(types.DELETE_NOTE, aNote);\n  });\n});\n```", "```js\n// src/store/actions\nimport { types } from './mutations';\n\nexport default {\n  // ...\n  deleteNote({ commit }, aNote) {\n    commit(types.DELETE_NOTE, aNote);\n  },\n};\n\n```", "```js\n// src/components/NoteList.vue\n<template>\n  <div class=\"container\">\n    <note v-for=\"(note, i) in notes\" :note=\"note\" :key=\"i\">\n </note>\n  </div>\n</template>\n<script>\n  // ...\n</script>\n<style scoped>\n  // ...\n```", "```js\n// test/components/Note.spec.js\nimport Vue from 'vue';\nimport Vuex from 'vuex';\nimport Note from '../../src/components/Note.vue';\n\ndescribe('Note.vue', () => {\n  let note;\n  let store;\n  beforeEach(() => {\n    Vue.use(Vuex);\n    note = { title: 'title', content: 'content' };\n  });\n\n  function newNoteCmp() {\n    const Constructor = Vue.extend(Note);\n    store = new Vuex.Store({\n      state: {},\n    });\n    return new Constructor({\n      propsData: { note },\n      store,\n    }).$mount();\n  }\n\n  it('should render a note', () => {\n    const { title, content } = note;\n\n    const noteCmp = newNoteCmp();\n\n    const { $el } = noteCmp;\n    const titleEl = $el.querySelector('.title');\n    const contentEl = $el.querySelector('.content');\n    expect(titleEl.textContent.trim()).toBe(title);\n    expect(contentEl.textContent.trim()).toBe(content);\n  });\n});\n```", "```js\n// src/components/Note.vue\n<template>\n<div class=\"note\">\n    <div class=\"title\">{{note.title}}</div>\n    <div class=\"content\" v-text=\"note.content\"></div>\n  </div>\n</template>\n<script>\n  export default {\n    props: ['note'],\n  };\n</script>\n<style scoped>\n  /* ... */\n</style>\n```", "```js\n// test/components/Note.spec.js\nimport Vue from 'vue';\nimport Vuex from 'vuex';\nimport Note from '../../src/components/Note.vue';\n\ndescribe('Note.vue', () => {\n  let note;\n  let store;\n  beforeEach(() => {\n    Vue.use(Vuex);\n    note = { title: 'title', content: 'content' };\n  });\n\n  function newNoteCmp() {\n   // ...\n  }\n\n  it('should render a note', () => {\n    // ...\n  });\n\n  it('should emit deleteNote on delete tap', () => {\n    const noteCmp = newNoteCmp();\n    spyOn(store, 'dispatch');\n\n    noteCmp.onDelete();\n\n    expect(store.dispatch)\n      .toHaveBeenCalledWith('deleteNote', note);\n  });\n});\n```", "```js\n// src/components/Note.vue\n<template>\n  <div class=\"note\">\n    <div class=\"title\">{{note.title}}</div>\n    <div class=\"content\" v-text=\"note.content\">\n    </div>\n    <div class=\"icons\">\n <img class=\"delete\" src=\"img/delete.svg\"\n           @click=\"onDelete\"/>\n    </div>\n  </div>\n</template>\n<script>\n  export default {\n    props: ['note'],\n    methods: {\n      onDelete() {\n this.$store.dispatch('deleteNote', this.note);\n      },\n    },\n  };\n</script>\n<style scoped>\n  // ...\n</style>\n```", "```js\ngit checkout step-3_delete-notes\n```", "```js\nTo-do:\nUpdate an existing note*\n- re-use NoteEditor with an existing note\n\nConsiderations:\n- NoteList could be refactored into a dumb component\n\nSave notes to LocalStorage\n\nExtra:\nSearch among notes\nPin a note\n\nDone:\nShow all notes\nCreate new notes\nDelete a note\n```", "```js\n// test/components/NoteEditor.spec.js\nimport Vue from 'vue';\nimport NoteEditor from '../../src/components/NoteEditor.vue';\n\ndescribe('NoteEditor component', () => {\n  let note;\n\n  function newNoteEditorCmp() {\n    const Constructor = Vue.extend(NoteEditor);\n    return new Constructor({\n      propsData: { note },\n    }).$mount();\n  }\n\n  beforeEach(() => {\n    note = { title: 'title', content: 'content' };\n  });\n\n  it('should init title and content to note prop', () => {\n    const editorCmp = newNoteEditorCmp();\n\n    expect(editorCmp.title).not.toBe(undefined);\n    expect(editorCmp.title).toBe(note.title);\n    expect(editorCmp.content).not.toBe(undefined);\n    expect(editorCmp.content).toBe(note.content);\n  });\n\n  it('should have onEditDone method ' +\n    'that emits the edited note', () => {\n    const editorCmp = newNoteEditorCmp();\n    spyOn(editorCmp, '$emit');\n    const newNote = { title: 'a', content: 'b' };\n\n    editorCmp.title = newNote.title;\n    editorCmp.content = newNote.content;\n    editorCmp.onEditDone();\n\n    expect(editorCmp.$emit)\n      .toHaveBeenCalledWith('editDone', newNote);\n  });\n\n  it('should not emit empty notes', () => {\n    note.title = '';\n    note.content = '';\n    const editorCmp = newNoteEditorCmp();\n    spyOn(editorCmp, '$emit');\n\n    editorCmp.onEditDone();\n\n    expect(editorCmp.$emit).not.toHaveBeenCalled();\n  });\n\n  it('should reset title, content after onEditDone', () => {\n    const editorCmp = newNoteEditorCmp();\n\n    editorCmp.onEditDone();\n\n    expect(editorCmp.title).toBe('');\n    expect(editorCmp.content).toBe('');\n  });\n});\n\n```", "```js\n// src/components/NoteEditor.vue\n<template>\n  <div class=\"container\">\n    <div class=\"centered\">\n      <input v-model=\"title\" type=\"text\" class=\"title\"\n             placeholder=\"title\"/><br>\n      <textarea v-model=\"content\" class=\"content\"\n                rows=\"3\" placeholder=\"content\"></textarea><br>\n      <div class=\"buttons\">\n        <button @click=\"onEditDone\" class=\"done\">Done</button>\n      </div>\n    </div>\n  </div>\n</template>\n<script>\n  export default {\n    props: ['note'],\n    data() {\n return {\n title: this.note.title,\n content: this.note.content,\n };\n    },\n    methods: {\n      onEditDone() {\n        if (this.title !== '' || this.content !== '') {\n          this.$emit('editDone', {\n            title: this.title,\n            content: this.content,\n          });\n        }\n        this.title = '';\n        this.content = '';\n      },\n    },\n  };\n</script>\n<style scoped>\n  // ...\n</style>\n```", "```js\n// test/components/App.spec.js\nimport Vue from 'vue';\nimport Vuex from 'vuex';\nimport App from '../../src/components/App.vue';\n\ndescribe('App.vue', () => {\n  let store;\n  let noteList;\n  let currentNote;\n\n  function newAppCmp() {\n    const Constructor = Vue.extend(App);\n    store = new Vuex.Store({\n      state: { currentNote, noteList },\n    });\n\n    return new Constructor({\n      store,\n    }).$mount();\n  }\n\n  beforeEach(() => {\n    Vue.use(Vuex);\n    noteList = [];\n    currentNote = { title: '', content: '' };\n  });\n\n  it('should update store.currentNote ' +\n    'on onAddDone event', () => {\n    const app = newAppCmp();\n    spyOn(app.$store, 'dispatch');\n    const aNote = {};\n\n    app.onAddDone(aNote);\n\n    expect(app.$store.dispatch)\n      .toHaveBeenCalledWith('addNote', aNote);\n  });\n});\n\n```", "```js\n// src/components/App.vue\n<template>\n  <div class=\"app\">\n    <div class=\"header\">EveryNote</div>\n    <div class=\"body\">\n <note-editor :note=\"$store.state.currentNote\"\n                   @editDone=\"onAddDone\"/>\n      <note-list/>\n    </div>\n  </div>\n</template>\n<script>\n  import NoteList from './NoteList.vue';\n  import NoteEditor from './NoteEditor.vue';\n\n  export default {\n    components: {\n      NoteList,\n      NoteEditor,\n    },\n    methods: {\n      onAddDone(note) {\n this.$store.dispatch('addNote', note);\n      },\n    },\n  };\n</script>\n<style scoped>\n  // ...\n</style>\n```", "```js\n// src/store/actions\nimport { types } from './mutations';\n\nexport default {\n  addNote({ commit }, aNote) {\n    commit(types.ADD_NOTE, aNote);\n  },\n  deleteNote({ commit }, aNote) {\n    commit(types.DELETE_NOTE, aNote);\n  },\n  editNote({ commit }, aNote) {\n commit(types.EDIT_NOTE, aNote);\n },\n updateNote({ commit }, aNote) {\n commit(types.UPDATE_NOTE, aNote);\n },\n};\n```", "```js\n// src/store/mutations.js\nexport const types = {\n  UPDATE_CURRENT_NOTE: 'UPDATE_CURRENT_NOTE',\n  ADD_NOTE: 'ADD_NOTE',\n  DELETE_NOTE: 'DELETE_NOTE',\n  EDIT_NOTE: 'EDIT_NOTE',\n UPDATE_NOTE: 'UPDATE_NOTE',\n};\n\nexport const mutations = {\n  // ...\n  [types.EDIT_NOTE](state, aNote) {\n    const index = state.noteList.indexOf(aNote);\n    if (index >= 0) {\n      state.editIndex = index;\n      state.editNote = state.noteList[index];\n    }\n  },\n  [types.UPDATE_NOTE](state, aNote) {\n    const index = state.editIndex;\n    if (index >= 0) {\n      state.editNote = null;\n      state.noteList.splice(index, 1, aNote);\n      state.editIndex = -1;\n    }\n  },\n};\n```", "```js\n// src/components/Note.ue\n<template>\n  <div class=\"note\">\n    <div class=\"title\">{{note.title}}</div>\n    <div class=\"content\"\n         style=\"white-space: pre-line;\" v-text=\"note.content\">\n    </div>\n    <div class=\"icons\">\n      <img class=\"edit\" src=\"img/edit.svg\"\n @click=\"onEdit\"/>\n      <img class=\"delete\" src=\"img/delete.svg\"\n           @click=\"onDelete\"/>\n    </div>\n  </div>\n</template>\n<script>\n  export default {\n    props: ['note'],\n    methods: {\n      onDelete() {\n        this.$store.dispatch('deleteNote', this.note);\n      },\n      onEdit() {\n this.$store.dispatch('editNote', this.note);\n },\n    },\n  };\n</script>\n<style scoped>\n  // ...\n</style>\n```", "```js\n// src/components/App.vue\n<template>\n  <div class=\"app\">\n    <div class=\"header\">EveryNote</div>\n    <div class=\"body\">\n      <note-editor :note=\"$store.state.currentNote\"\n                   @editDone=\"onAddDone\"/>\n      <note-list/>\n    </div>\n    <div class=\"overlay\" v-if=\"$store.state.editNote\">\n <note-editor class=\"note-editor\" @editDone=\"onEditDone\"\n :note=\"$store.state.editNote\"/>\n </div>\n  </div>\n</template>\n<script>\n  import NoteList from './NoteList.vue';\n  import NoteEditor from './NoteEditor.vue';\n\n  export default {\n    components: {\n      NoteList,\n      NoteEditor,\n    },\n    methods: {\n      onAddDone(note) {\n        this.$store.dispatch('addNote', note);\n      },\n      onEditDone(note) {\n this.$store.dispatch('updateNote', note);\n },\n    },\n  };\n</script>\n<style scoped>\n  // ...\n</style>\n```", "```js\ngit checkout step-4_edit-notes\n```", "```js\nTo-do:\nSave notes to LocalStorage\n\nConsiderations:\n- NoteList could be refactored into a dumb component\n\nExtra:\nSearch among notes\nPin a note\n\nDone:\nShow all notes\nCreate new notes\nDelete a note\nUpdate an existing note\n```", "```js\n// test/store/actions.spec.js\nimport actions from '../../src/store/actions';\nimport { types } from '../../src/store/mutations';\nimport api from '../../src/api/api-mock';\n\ndescribe('EveryNote root actions', () => {\n  // ...\n\n  it('should have loadNotesFromServer action', (done) => {\n    const { loadNotesFromServer } = actions;\n    const mockContext = {\n      commit: jasmine.createSpy('commit'),\n    };\n    const aNote = {};\n    spyOn(api, 'fetchAllNotes').and.returnValue(Promise.resolve([aNote]));\n\n    loadNotesFromServer(mockContext).then(() => {\n      expect(mockContext.commit)\n        .toHaveBeenCalledWith(types.ADD_NOTE, aNote);\n      done();\n    });\n  });\n});\n```", "```js\n// src/store/actions.js\nimport { types } from './mutations';\nimport api from '../api/api-mock';\n\nexport default {\n  // ...\n  loadNotesFromServer({ commit }) {\n    return api.fetchAllNotes().then((notes) => {\n      notes.forEach(note => commit(types.ADD_NOTE, note));\n    });\n  },\n};\n\n```", "```js\n// src/components/App.vue\n<template>\n  // ..\n</template>\n<script>\n  import NoteList from './NoteList.vue';\n  import NoteEditor from './NoteEditor.vue';\n\n  export default {\n    created() {\n this.$store.dispatch('loadNotesFromServer');\n    },\n    components: {\n      NoteList,\n      NoteEditor,\n    },\n    methods: {\n     // ...\n    },\n  };\n</script>\n<style scoped>\n // ...\n</style>\n```", "```js\n// src/api/api-mock.js\nexport default {\n  fetchAllNotes() {\n    return Promise.resolve([\n      { title: 'title A', content: 'content 1' },\n      { title: 'title B', content: 'content 2' },\n    ]);\n  },\n};\n\n```", "```js\ngit checkout step-5_remote-mock-server\n```"]