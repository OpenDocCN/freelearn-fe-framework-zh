- en: '*Chapter 2*: Creating a Portfolio in React with Reusable Components and Routing'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第二章*: 使用可重用组件和路由创建 React 个人作品集'
- en: Do you already feel familiar with React's core concepts after completing the
    first chapter? Great! This chapter will be no problem for you! If not, don't worry
    – most of the concepts you came across in the previous chapter will be repeated.
    However, if you want to get more experience with Webpack and Babel, it's recommended
    that you try creating the project in [*Chapter 1*](B17390_01_Final_NM_ePub.xhtml#_idTextAnchor013),
    *Creating a Single-Page Application in React*, again since this chapter won't
    be covering those topics.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 完成第一章后，你是否已经熟悉了 React 的核心概念？太好了！本章对你来说将不成问题！如果不熟悉，别担心——你在上一章中遇到的大多数概念都会被重复。然而，如果你想更多地了解
    Webpack 和 Babel，建议你再次尝试在 [*第一章*](B17390_01_Final_NM_ePub.xhtml#_idTextAnchor013)
    中创建项目，即 *创建 React 单页应用程序*，因为本章不会涉及这些主题。
- en: In this chapter, you'll work with **Create React App**, a starter kit created
    by the React core team to get you started with React quickly. It will make the
    configuration of module bundlers and compilers such as Webpack and Babel unnecessary,
    as this will be taken care of by the Create React App package. This means you
    can focus on building your portfolio application, which reuses React components
    and has routing. Besides that, we'll be adding routing using react-router v6,
    which is the leading library for routing in React.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将使用 **Create React App**，这是 React 核心团队创建的一个启动工具，可以帮助你快速开始使用 React。它将使模块打包器和编译器（如
    Webpack 和 Babel）的配置变得不必要，因为 Create React App 包会处理这些。这意味着你可以专注于构建你的个人作品集应用程序，该应用程序重用
    React 组件并具有路由。除此之外，我们还将使用 react-router v6 添加路由，这是 React 中路由的领先库。
- en: 'Alongside setting up Create React App, the following topics will be covered
    in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置 Create React App 的同时，本章将涵盖以下主题：
- en: Creating a new project with Create React App
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Create React App 创建新项目
- en: Building reusable React components
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建可重用 React 组件
- en: Routing with react-router
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 react-router 进行路由
- en: Can't wait? Let's go!
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 等不及了？让我们开始吧！
- en: Project overview
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目概述
- en: In this chapter, we will create an application with React that makes use of
    reusable React components and styling using Create React App and `styled-components`.
    The application will use data that is fetched from the public GitHub API.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用 Create React App 和 `styled-components` 创建一个应用程序，该应用程序利用可重用的 React
    组件和样式。该应用程序将使用从公共 GitHub API 获取的数据。
- en: The build time is 1.5–2 hours.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 构建时间约为 1.5-2 小时。
- en: Getting started
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入门
- en: 'The project you''ll create in this chapter will use the public API from GitHub,
    which you can find at [https://docs.github.com/en/rest](https://docs.github.com/en/rest).
    To use this API, you need to have a GitHub account, since you''ll want to retrieve
    information from a GitHub user account. If you don''t have a GitHub account yet,
    you can create one on the GitHub website. The complete source code for this application
    can also be found on GitHub: [https://github.com/PacktPublishing/React-Projects-Second-Edition/tree/main/Chapter02](https://github.com/PacktPublishing/React-Projects-Second-Edition/tree/main/Chapter02).'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中你将创建的项目将使用来自 GitHub 的公共 API，你可以在 [https://docs.github.com/en/rest](https://docs.github.com/en/rest)
    找到这些 API。要使用此 API，你需要有一个 GitHub 账户，因为你将需要从 GitHub 用户账户中检索信息。如果你还没有 GitHub 账户，你可以在
    GitHub 网站上创建一个。此应用程序的完整源代码也可以在 GitHub 上找到：[https://github.com/PacktPublishing/React-Projects-Second-Edition/tree/main/Chapter02](https://github.com/PacktPublishing/React-Projects-Second-Edition/tree/main/Chapter02)。
- en: Creating a portfolio in React
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 React 创建个人作品集
- en: In this section, we will learn how to create a new React project using Create
    React App and add reusable React components and routing with `react-router`.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何使用 Create React App 创建一个新的 React 项目，并使用 `react-router` 添加可重用的 React
    组件和路由。
- en: Creating a portfolio with Create React App
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Create React App 创建个人作品集
- en: Having to configure Webpack and Babel every time we create a new React project
    can be quite time-consuming. Also, the settings for every project can change,
    and it becomes hard to manage all of these configurations when we want to add
    new features to our project.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 每次创建新的 React 项目时都需要配置 Webpack 和 Babel，这可能会非常耗时。此外，每个项目的设置都可能发生变化，当我们想要向项目中添加新功能时，管理所有这些配置会变得很困难。
- en: Therefore, the React core team introduced a starter kit known as Create React
    App, which is currently at version 5\. By using Create React App, we no longer
    have to worry about managing compile and build configurations, even when newer
    versions of React are released, which means we can focus on coding instead of
    configurations.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，React 核心团队引入了一个名为 Create React App 的启动工具包，目前版本为 5。通过使用 Create React App，我们不再需要担心管理编译和构建配置，即使
    React 发布了新版本也是如此，这意味着我们可以专注于编码而不是配置。
- en: This section will show us how to create a React application with Create React
    App.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将向我们展示如何使用 Create React App 创建一个 React 应用程序。
- en: Before anything else, let's see how to install Create React App.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在做任何事情之前，让我们看看如何安装 Create React App。
- en: Installing Create React App
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Create React App
- en: 'Create React App doesn''t have to be installed globally. Instead, we can use
    `npx`, a tool that comes preinstalled with npm (v5.2.0 or higher) and simplifies
    the way that we execute `npm` packages:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Create React App 不必全局安装。相反，我们可以使用 `npx`，这是一个与 npm（v5.2.0 或更高版本）预安装的工具，它简化了我们执行
    `npm` 包的方式：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This will start the installation process for Create React App, which can take
    several minutes, depending on your hardware. Although we're only executing one
    command, the installer for Create React App will install the packages we need
    to run our React application. Therefore, it will install `react`, `react-dom`,
    and `react-scripts`, where the last package includes all the configurations for
    compiling, running, and building React applications.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这将启动 Create React App 的安装过程，这可能需要几分钟，具体取决于您的硬件。尽管我们只执行了一个命令，但 Create React App
    的安装程序将安装我们运行 React 应用程序所需的包。因此，它将安装 `react`、`react-dom` 和 `react-scripts`，最后一个包包含了编译、运行和构建
    React 应用程序的配置。
- en: 'If we move into the project''s root directory, which is named after our project
    name, we will see that it has the following structure:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们进入项目的根目录，该目录以我们的项目名称命名，我们会看到它具有以下结构：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Not all files that were created by Create React App are listed; instead, only
    the ones used in this chapter are listed.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有由 Create React App 创建的文件都被列出；相反，只有本章中使用的文件被列出。
- en: This structure looks a lot like the one we set up in the first chapter, although
    there are some slight differences. The `public` directory includes all the files
    that shouldn't be included in the compile and build process, and the files inside
    this directory are the only files that can be directly used inside the `index.html`
    file.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这种结构看起来与我们第一章节中设置的结构非常相似，尽管有一些细微的差别。`public` 目录包含了所有不应该包含在编译和构建过程中的文件，而这个目录内的文件是唯一可以直接在
    `index.html` 文件中使用的文件。
- en: In the other directory, called `src`, we will find all the files that will be
    compiled and built when we execute any of the scripts inside the `package.json`
    file. There is a component called `App`, which is defined by the `App.js`, `App.test.js`,
    and `App.css` files, and a file called `index.js`, which is the entry point for
    Create React App.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在另一个名为 `src` 的目录中，我们将找到在执行 `package.json` 文件中任何脚本时将被编译和构建的所有文件。有一个名为 `App` 的组件，它由
    `App.js`、`App.test.js` 和 `App.css` 文件定义，还有一个名为 `index.js` 的文件，它是 Create React
    App 的入口点。
- en: 'If we open the `package.json` file, we''ll see that four scripts have been
    defined: `start`, `build`, `test`, and `eject`. Since the last two aren''t handled
    at this point, we can ignore these two scripts for now. To be able to open the
    project in the browser, we can simply type the following command into the command
    line, which runs `package react-scripts` in development mode:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们打开 `package.json` 文件，我们会看到已经定义了四个脚本：`start`、`build`、`test` 和 `eject`。由于最后两个在此阶段尚未处理，我们可以暂时忽略这两个脚本。为了能够在浏览器中打开项目，我们只需在命令行中输入以下命令，这将以开发模式运行
    `package react-scripts`：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Instead of `npm start`, we can also run `yarn start`, as using Yarn is recommended
    by Create React App.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 `npm start`，我们还可以运行 `yarn start`，因为 Create React App 推荐使用 Yarn。
- en: 'If we visit [http://localhost:3000/](http://localhost:3000/), the default Create
    React App page will look as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们访问 [http://localhost:3000/](http://localhost:3000/)，默认的 Create React App
    页面将如下所示：
- en: '![Figure 2.1 – The default Create React App boilerplate'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.1 – 默认的 Create React App 模板'
- en: '](img/Figure_2.1_B17390.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.1_B17390.jpg)'
- en: Figure 2.1 – The default Create React App boilerplate
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.1 – 默认的 Create React App 模板
- en: Since `react-scripts` supports hot reloading by default, any changes we make
    to the code will result in a page reload. If we run the build script, a new directory
    called `build` will be created in the project's root directory, where the minified
    bundle of our application can be found.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`react-scripts`默认支持热重载，我们对代码所做的任何更改都将导致页面重新加载。如果我们运行构建脚本，项目根目录中将会创建一个名为`build`的新目录，其中可以找到我们应用程序的压缩包。
- en: With the basic installation of Create React App in place, we will start looking
    at creating the components for our project and styling them.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在Create React App的基本安装完成后，我们将开始创建我们项目的组件并对它们进行样式设计。
- en: Building reusable React components
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建可重用的React组件
- en: Creating React components with JSX was briefly discussed in the previous chapter,
    but in this chapter, we'll explore this topic further by creating components that
    we can reuse throughout our application. First, let's look at how to structure
    our application, which builds upon the contents of the previous chapter.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中简要讨论了使用JSX创建React组件，但在这章中，我们将通过创建可以在整个应用程序中重用的组件来进一步探讨这个主题。首先，让我们看看如何构建我们的应用程序，这是基于上一章的内容。
- en: Structuring our application
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建应用程序结构
- en: 'Our project still consists of only one component, which doesn''t make it very
    reusable. To begin, we''ll need to structure our application in the same way that
    we did in the first chapter. This means that we need to split up the `App` component
    into multiple smaller components. If we look at the source code for this component
    in `App.js`, we''ll see that there''s already a CSS `header` element in the `return`
    function. Let''s change that `header` element into a React component:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的项目仍然只包含一个组件，这并不使其非常可重用。为了开始，我们需要以与第一章相同的方式构建我们的应用程序。这意味着我们需要将`App`组件拆分成多个更小的组件。如果我们查看`App.js`中此组件的源代码，我们会看到在`return`函数中已经有一个CSS
    `header`元素。让我们将这个`header`元素改为React组件：
- en: 'First, create a new file called `Header.css` inside a new directory called
    `components` within `src` and copy the styling for `classNames`, `App-header`,
    `App-logo`, and `App-link` into it:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在`src`目录下的`components`新目录中创建一个名为`Header.css`的新文件，并将`classNames`、`App-header`、`App-logo`和`App-link`的样式复制到其中：
- en: '[PRE3]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now, create a file called `Header.js` inside this directory. This file should
    return the same content as the `<header>` element:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在这个目录中创建一个名为`Header.js`的文件。此文件应返回与`<header>`元素相同的内容：
- en: '[PRE4]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Import this `Header` component inside your `App` component and add it to the
    `return` function:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的`App`组件中导入此`Header`组件并将其添加到`return`函数中：
- en: '[PRE5]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The styles for the header need to be deleted from `App.css`. This file should
    only contain the following style definitions:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 需要从`App.css`中删除标题的样式。此文件应只包含以下样式定义：
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'When we visit our project in the browser again, we''ll see an error saying
    that the value for the logo is undefined. This is because the new `Header` component
    can''t reach the `logo` constant that''s been defined inside the `App` component.
    From what we learned in the first chapter, we know that this `logo` constant should
    be added as a prop to the `Header` component so that it can be displayed. Let''s
    do this now:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们再次在浏览器中访问我们的项目时，我们会看到一个错误，表明logo的值未定义。这是因为新的`Header`组件无法访问在`App`组件内部定义的`logo`常量。根据我们在第一章中学到的知识，我们知道这个`logo`常量应该作为属性添加到`Header`组件中，以便它可以显示。现在让我们这样做：
- en: 'Send the `logo` constant as a prop to the `Header` component in `src/App.js`:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`logo`常量作为属性发送到`src/App.js`中的`Header`组件：
- en: '[PRE7]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Get the `logo` prop so that it can be used by the `img` element as an `src`
    attribute in `src/components/Header.js`:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取`logo`属性，以便可以在`src/components/Header.js`中的`img`元素作为`src`属性使用：
- en: '[PRE8]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Here, we won''t see any visible changes when we open the project in the browser.
    But if we open up the React Developer Tools, we will see that the project is now
    divided into an `App` component and a `Header` component. This component receives
    the `logo` prop in the form of a `.svg` file, as shown in the following screenshot:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，当我们用浏览器打开项目时，我们不会看到任何可见的变化。但如果我们打开React开发者工具，我们会看到项目现在被分为一个`App`组件和一个`Header`组件。此组件以`.svg`文件的形式接收`logo`属性，如下面的截图所示：
- en: '![Figure 2.2 – The React Developer Tools'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 2.2 – The React Developer Tools]'
- en: '](img/Figure_2.2_B17390.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_2.2_B17390.jpg]'
- en: Figure 2.2 – The React Developer Tools
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 2.2 – The React Developer Tools]'
- en: The `Header` component is still divided into multiple elements that can be split
    into separate components. Looking at the `img` and `p` elements, they look pretty
    simple already. However, the `a` element looks more complicated and takes attributes
    such as `url`, `title`, and `className`. To change this `a` element into a component
    we can reuse, it needs to be moved to a different location in our project.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`Header`组件仍然被分割成多个元素，这些元素可以被分割成单独的组件。观察`img`和`p`元素，它们看起来已经很简单了。然而，`a`元素看起来更复杂，并具有诸如`url`、`title`和`className`等属性。为了将这个`a`元素转换成一个可重用的组件，我们需要将其移动到我们项目的不同位置。'
- en: 'To do this, create a new file called `Link.js` inside the `components` directory.
    This file should return the same `a` element that we''ve already got inside our
    `Header` component. Also, we can send both `url` and `title` to this component
    as a prop. Let''s do this now:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，在`components`目录中创建一个名为`Link.js`的新文件。此文件应该返回我们在`Header`组件中已经得到的相同的`a`元素。此外，我们还可以将`url`和`title`作为属性发送到这个组件。现在让我们这样做：
- en: 'Delete the styling for the `App-link` class from `src/components/Header.css`
    and place this inside a file called `Link.css`:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`src/components/Header.css`中删除`App-link`类的样式，并将其放置在一个名为`Link.css`的文件中：
- en: '[PRE9]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Create a new component called `Link` that takes the `url` and `title` props.
    This component adds these props as attributes to the `<a>` element in `src/components`
    `/Link.js`:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`Link`的新组件，该组件接受`url`和`title`属性。此组件将这些属性作为属性添加到`src/components/Link.js`中的`<a>`元素：
- en: '[PRE10]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Import this `Link` component and place it inside the `Header` component in
    `src/components/Header.js`:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/components/Header.js`中导入此`Link`组件并将其放置在`Header`组件内部：
- en: '[PRE11]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Our code should now look like the following, meaning that we''ve successfully
    split the `App` component into different files in the `components` directory.
    Also, the `logo.svg` file can be moved to a new directory called `assets`:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在的代码应该看起来像以下这样，这意味着我们已经成功将`App`组件分割成`components`目录中的不同文件。此外，`logo.svg`文件可以被移动到一个名为`assets`的新目录：
- en: '[PRE12]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Don''t forget to also change the `import` statement in the `src/App.js` file,
    where the `logo.svg` file is imported as a component:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不要忘记也更改`src/App.js`文件中的`import`语句，其中`logo.svg`文件被导入为一个组件：
- en: '[PRE13]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: However, if we take a look at the project in the browser, no visible changes
    are present. In the React Developer Tools, however, the structure of our application
    has already taken shape. The `App` component is shown as the parent component
    in the component tree, while the `Header` component is a child component that
    has `Link` as a child.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果我们查看浏览器中的项目，则没有明显的更改。然而，在React开发者工具中，我们应用程序的结构已经形成。`App`组件在组件树中显示为父组件，而`Header`组件是一个子组件，它将`Link`作为子组件。
- en: In the next part of this section, we'll add more components to the component
    tree of this application and make these reusable throughout the application.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节的下一部分，我们将向此应用程序的组件树中添加更多组件，并使它们在整个应用程序中可重用。
- en: Reusing components in React
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在React中重用组件
- en: The project we're building in this chapter is a portfolio page; it will show
    our public information and a list of public repositories. Therefore, we need to
    fetch the official GitHub REST API (v3) and pull information from two endpoints.
    Fetching data is something we did in the first chapter, but this time, the information
    won't come from a local JSON file. The method to retrieve the information is almost
    the same. We'll use the `fetch` API to do this.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中我们正在构建的项目是一个个人作品集页面；它将展示我们的公开信息和公开仓库列表。因此，我们需要获取官方GitHub REST API（v3）并从两个端点获取信息。在第一章中，我们已经执行了数据获取操作，但这次信息不会来自本地JSON文件。获取信息的方法几乎相同。我们将使用`fetch`
    API来完成此操作。
- en: 'We can retrieve our public GitHub information from GitHub by executing the
    following command (replace `username` at the end of the bold section of code with
    your own username):'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过执行以下命令从GitHub获取我们的公开GitHub信息（将代码加粗部分的末尾的`username`替换为你的用户名）：
- en: '[PRE14]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Note
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you don't have a GitHub profile or haven't filled out all the necessary information,
    you can also use the `octocat` username. This is the username of the GitHub `mascotte`
    and is already filled with sample data.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有GitHub个人资料或者还没有填写所有必要的信息，你也可以使用`octocat`用户名。这是GitHub的吉祥物用户名，并且已经填充了示例数据。
- en: 'This request will return the following output:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 此请求将返回以下输出：
- en: '[PRE15]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Multiple fields in the JSON output are highlighted, since these are the fields
    we'll use in the application. These are `avatar_url`, `html_url`, `repos_url`,
    `name`, `company`, `location`, `email`, and `bio`, where the value of the `repos_url`
    field is actually another API endpoint that we need to call to retrieve all the
    repositories of this user. This is something we'll do later in this chapter.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: JSON输出中的多个字段被突出显示，因为这些是我们将在应用程序中使用的字段。这些是`avatar_url`、`html_url`、`repos_url`、`name`、`company`、`location`、`email`和`bio`，其中`repos_url`字段的值实际上是我们需要调用的另一个API端点，以检索此用户的全部仓库。这是我们将在本章后面完成的事情。
- en: 'Since we want to display this result in the application, we need to do the
    following:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们想在应用程序中显示这个结果，我们需要做以下事情：
- en: 'To retrieve this public information from GitHub, create a new component called
    `Profile` inside a new directory called `pages`. This directory will hold all
    the components that represent a page in our application later on. In this file,
    add the following code to `src/pages/Profile.js`:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要从GitHub检索这些公开信息，请在新的目录`pages`中创建一个名为`Profile`的新组件。这个目录将持有代表我们应用程序中页面的所有组件。在这个文件中，将以下代码添加到`src/pages/Profile.js`：
- en: '[PRE16]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This new component imports two Hooks from React, which are used to handle state
    management and life cycles. We've already used a `useState` Hook in the previous
    chapter, and it's used to create a state for `loading` and `profile`. Inside the
    second Hook, which is the `useEffect` Hook, we do the asynchronous data fetching
    from the GitHub API. No result has been rendered yet, since we still need to create
    new components to display the data.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这个新组件从React中导入了两个Hooks，用于处理状态管理和生命周期。我们在上一章中已经使用了`useState` Hook，用于创建`loading`和`profile`的状态。在第二个Hook中，即`useEffect`
    Hook中，我们从GitHub API进行异步数据获取。由于我们还需要创建新的组件来显示数据，因此还没有渲染任何结果。
- en: 'Now, import this new component into the `App` component and pass the `userName`
    prop to it. If you don''t have a GitHub account, you can use the username `octocat`:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将这个新组件导入到`App`组件中，并将`userName`属性传递给它。如果您没有GitHub账户，可以使用用户名`octocat`：
- en: '[PRE17]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'A quick look at the browser where our project is running shows that this new
    `Profile` component isn''t visible yet. This is because the `Header.css` file
    has a `height` attribute with a `view-height` value of `100`, meaning that the
    component will take up the entire height of the page. To change this, open the
    `src/components/Header.css` file and change the following highlighted lines:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 快速查看运行我们项目的浏览器，我们可以看到这个新的`Profile`组件目前还不可见。这是因为`Header.css`文件中有一个`height`属性，其`view-height`值为`100`，这意味着该组件将占用页面的整个高度。要更改这一点，请打开`src/components/Header.css`文件，并更改以下突出显示的行：
- en: '[PRE18]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'There should be enough free space on our page to display the `Profile` component,
    so we can open the `scr/pages/Profile.js` file once more and display the `avatar_url`,
    `html_url`, `repos_url`, `name`, `company`, `location`, `email`, and `bio` fields
    that were returned by the GitHub API:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 页面上应该有足够的空间来显示`Profile`组件，因此我们可以再次打开`scr/pages/Profile.js`文件，并显示GitHub API返回的`avatar_url`、`html_url`、`repos_url`、`name`、`company`、`location`、`email`和`bio`字段：
- en: '[PRE19]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Once we've saved this file and visited our project in the browser, we will see
    a bullet list of the GitHub information being displayed.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 保存此文件并访问浏览器中的项目后，我们将看到GitHub信息的子弹列表正在显示。
- en: 'Since this doesn''t look very pretty and the header doesn''t match the content
    of the page, let''s make some changes to the `styling` files for these two components:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这看起来不太美观，并且标题与页面内容不匹配，让我们对这两个组件的`styling`文件做一些更改：
- en: 'Change the code for the `Header` component so that it will display a different
    title for the page. Also, the `Link` component can be deleted from here, as we''ll
    be using it in a `Profile` component later on:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更改`Header`组件的代码，使其显示页面不同的标题。此外，可以删除此处的`Link`组件，因为我们将在后面的`Profile`组件中使用它：
- en: '[PRE20]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Before changing the styling of the `Profile` component, we first need to create
    a CSS file that will hold the styling rules for the component. To do so, create
    the `Profile.css` file in the `pages` directory and add the following content:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在更改`Profile`组件的样式之前，我们首先需要创建一个CSS文件，该文件将包含组件的样式规则。为此，在`pages`目录中创建`Profile.css`文件，并添加以下内容：
- en: '[PRE21]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'In `src/pages/Profile.js`, we need to import this file to apply the styling.
    Remember the `Link` component we created previously? We also import this file,
    as it will be used to create a link to our profile and a list of repositories
    on the GitHub website:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `src/pages/Profile.js` 中，我们需要导入此文件以应用样式。还记得我们之前创建的 `Link` 组件吗？我们也导入此文件，因为它将被用于创建链接到我们的个人资料和
    GitHub 网站上的仓库列表：
- en: '[PRE22]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'In the `return` statement, we''ll add the `classNames` function that we defined
    in the styling and separate the avatar image from the bullet list. By doing that,
    we also need to wrap the bullet list with an extra `div`:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `return` 语句中，我们将添加我们在样式定义中定义的 `classNames` 函数，并将头像图像与项目符号列表分开。通过这样做，我们还需要将项目符号列表包裹在一个额外的
    `div` 中：
- en: '[PRE23]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Finally, we can see that the application is starting to look like a portfolio
    page loading your GitHub information, including your avatar and a list of the
    public information. This results in an application that looks similar to what''s
    shown in the following screenshot:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以看到应用程序开始看起来像一个加载你的 GitHub 信息的投资组合页面，包括你的头像和公共信息列表。这导致了一个看起来类似于以下截图的应用程序：
- en: '![Figure 2.3 – Our styled portfolio application'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.3 – 我们定制的投资组合应用程序'
- en: '](img/Figure_2.3_B17390.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.3_B17390.jpg)'
- en: Figure 2.3 – Our styled portfolio application
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.3 – 我们定制的投资组合应用程序
- en: 'If we take a look at the code in the `Profile` component, we''ll see that there
    is a lot of duplicate code, so we need to transform the list that''s displaying
    our public information into a separate component. Let''s get started:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查看 `Profile` 组件中的代码，我们会看到有很多重复的代码，因此我们需要将显示我们公共信息的列表转换为一个单独的组件。让我们开始吧：
- en: 'Create a new file called `List.js` inside the `components` directory, which
    will take a prop called `items`:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `components` 目录内创建一个名为 `List.js` 的新文件，它将接受一个名为 `items` 的属性：
- en: '[PRE24]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'In the `Profile` component, we can import this new `List` component. A new
    variable called `items` should be created, which is an array containing all the
    items we want to display inside this list:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Profile` 组件中，我们可以导入这个新的 `List` 组件。应该创建一个名为 `items` 的新变量，它是一个包含我们想要在此列表中显示的所有项目的数组：
- en: '[PRE25]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'This will be sent as a prop to the `List` component, so these items can be
    rendered from that component instead. This means that you can remove the `ul`
    element and all the `li` elements inside:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将作为属性发送到 `List` 组件，因此这些项目可以从该组件中渲染。这意味着你可以删除 `ul` 元素以及其中所有的 `li` 元素：
- en: '[PRE26]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: You can see that for the list item with the `html_url` and `repos_url` fields,
    we'll be sending the `Link` component as a value instead of the value that was
    returned from the GitHub API. In React, you can also send complete components
    as a prop to a different component, as props can be anything.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，对于具有 `html_url` 和 `repos_url` 字段的列表项，我们将发送 `Link` 组件作为值，而不是从 GitHub API
    返回的值。在 React 中，你还可以将完整的组件作为属性发送给不同的组件，因为属性可以是任何东西。
- en: 'In the `List` component, we can now map over the `items` prop and return the
    list items:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `List` 组件中，我们现在可以遍历 `items` 属性并返回列表项：
- en: '[PRE27]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The styling is inherited from the `Profile` component, as the `List` component
    is a child component. To structure your application better, you can move the styling
    for the list of information to a separate `List.css` file and import it inside
    the `List` component.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 样式是从 `Profile` 组件继承的，因为 `List` 组件是一个子组件。为了更好地结构化你的应用程序，你可以将信息列表的样式移动到一个单独的 `List.css`
    文件中，并在 `List` 组件内导入它。
- en: Assuming we executed the preceding steps correctly, your application shouldn't
    have changed aesthetically. However, if we take a look at the React Developer
    Tools, we will see that some changes have been made to the component tree.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们正确执行了前面的步骤，你的应用程序在美学上不应该发生变化。然而，如果我们查看 React 开发者工具，我们会看到组件树已经发生了一些变化。
- en: In the next section, we'll add routing with `react-router` and display repositories
    that are linked to our GitHub account.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将添加使用 `react-router` 的路由，并显示与我们的 GitHub 账户链接的仓库。
- en: Routing with react-router
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 react-router 进行路由
- en: '`react-router` v6 is the most popular library in React for routing, and it
    supports lots of features to help you get the most out of it. With this library,
    you can add declarative routing to a React application, just by adding components.
    These components can be divided into three types: router components, route matching
    components, and navigation components.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`react-router` v6 是 React 中最受欢迎的路由库，它支持许多功能，可以帮助你充分利用它。使用这个库，你只需添加组件即可向 React
    应用程序添加声明式路由。这些组件可以分为三种类型：路由组件、路由匹配组件和导航组件。'
- en: 'Setting up routing with `react-router` consists of multiple steps:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `react-router` 设置路由包括多个步骤：
- en: 'To use these components, you need to install the `react-router` web package,
    called `react-router-dom`, by executing the following:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使用这些组件，你需要通过执行以下命令安装 `react-router` 网络包，称为 `react-router-dom`：
- en: '[PRE28]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'After installing `react-router-dom`, the next step is to import the routing
    and route matching components from this package into the container component of
    your application. In this case, that is the `App` component, which is inside the
    src directory:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在安装 `react-router-dom` 之后，下一步是将此包中的路由和路由匹配组件导入到应用程序的容器组件中。在这种情况下，是 `App` 组件，它位于
    src 目录中：
- en: '[PRE29]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The actual routes must be added to the `return` statement of this component,
    where all of the route matching components (`Route`) must be wrapped in a routing
    component, called `Router`. When your URL matches a route defined in any of the
    iterations of `Route`, this component will render the React component that passed
    as a child:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实际的路由必须添加到此组件的 `return` 语句中，其中所有路由匹配组件（`Route`）都必须包裹在一个名为 `Router` 的路由组件中。当你的
    URL 与 `Route` 的任何迭代定义的路由匹配时，此组件将渲染作为子组件传递的 React 组件：
- en: '[PRE30]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: If you now visit the project in the browser again at `http://localhost:3000`,
    the `Profile` component will be rendered.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你现在再次在浏览器中访问 `http://localhost:3000` 上的项目，将渲染 `Profile` 组件。
- en: 'Besides our GitHub profile, we also want to showcase the projects we''ve been
    working on. Let''s add a new route to the application, which will render all the
    repositories of our GitHub account:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 除了我们的 GitHub 个人资料外，我们还想展示我们一直在工作的项目。让我们向应用程序添加一个新的路由，该路由将渲染我们 GitHub 账户的所有仓库：
- en: 'This new component will use the endpoint to get all your repositories, which
    you can try out by executing the following command (replace `username` at the
    end of the bold section of code with your own username):'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个新组件将使用端点来获取所有你的仓库，你可以通过执行以下命令来尝试（将粗体部分代码末尾的 `username` 替换为你自己的用户名）：
- en: '[PRE31]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The output of calling this endpoint will look something like this:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 调用此端点的输出将类似于以下内容：
- en: '[PRE32]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: As you can see from the preceding sample response, the repositories data is
    an array with objects. We'll be using the preceding highlighted fields to display
    our repositories on the `/projects` route.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一个示例响应所示，仓库数据是一个包含对象的数组。我们将使用前面突出显示的字段来在 `/projects` 路由上显示我们的仓库。
- en: 'First, we need to create a new component called `Projects` in the `pages` directory.
    This component will have almost the same logic for state management and data fetching
    as the `Profile` component, but it will call a different endpoint to get the repositories
    instead:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要在 `pages` 目录中创建一个新的组件，命名为 `Projects`。这个组件将具有与 `Profile` 组件几乎相同的逻辑用于状态管理和数据获取，但它将调用不同的端点来获取仓库：
- en: '[PRE33]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'After putting the information from the endpoint to the local state variable
    projects, we''ll use the same `List` component to render the information about
    the repositories:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在将端点的信息放入本地状态变量 projects 之后，我们将使用相同的 `List` 组件来渲染关于仓库的信息：
- en: '[PRE34]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'To have this component render when we visit the `/profile` route, we need to
    add it to the `App` component using a `Route` component:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在访问 `/profile` 路由时渲染此组件，我们需要使用 `Route` 组件将其添加到 `App` 组件中：
- en: '[PRE35]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The `Profile` component will now only be rendered if you visit the `/` route,
    and the `Projects` component when you visit the `/projects` route. No component
    will be rendered besides the `Header` component if you visit any other route.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，`Profile` 组件只有在访问 `/` 路由时才会渲染，而 `Projects` 组件在访问 `/projects` 路由时渲染。如果你访问任何其他路由，除了
    `Header` 组件外，不会渲染任何组件。
- en: Note
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: You can set a component that will be displayed when no route can be matched
    by passing `*` as a path to the `Route` component.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过将 `*` 作为路径传递给 `Route` 组件来设置一个组件，当没有路由可以匹配时将显示该组件。
- en: 'Although we have two routes set up, the only way to visit these routes is by
    changing the URL in the browser. With `react-router`, we can also create dynamic
    links to visit these routes from any component. In our `Header` component, we
    can add a navigation bar that renders links to these routes:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们已经设置了两个路由，但访问这些路由的唯一方法是通过在浏览器中更改 URL。使用 `react-router`，我们还可以创建动态链接，从任何组件访问这些路由。在我们的
    `Header` 组件中，我们可以添加一个导航栏，渲染指向这些路由的链接：
- en: '[PRE36]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: As we already have a `Link` component defined ourselves, we're importing the
    `Link` component from `react-router-dom` as `RouterLink`. This will prevent confusion
    if you make any changes later on, or when you're using an autocomplete feature
    in your IDE.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已自行定义了 `Link` 组件，因此我们将从 `react-router-dom` 中导入 `Link` 组件作为 `RouterLink`。这将防止您在以后进行更改时或在使用
    IDE 中的自动完成功能时产生混淆。
- en: 'Finally, we can add some styling to `Header.css` so that the links to our routes
    are displayed nicely:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以在 `Header.css` 中添加一些样式，以便我们的路由链接显示得更好：
- en: '[PRE37]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'If you now visit the application in the browser at `http://localhost:3000/projects`,
    it should look something like the following screenshot. Clicking on the links
    in the header will navigate you between the two different routes:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您现在在浏览器中访问应用程序的 `http://localhost:3000/projects`，它应该看起来像以下截图。点击页眉中的链接将在两个不同的路由之间导航：
- en: '![Figure 2.4 – The Projects route in our application](img/Figure_2.4_B17390.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.4 – 应用程序中的项目路由](img/Figure_2.4_B17390.jpg)'
- en: Figure 2.4 – The Projects route in our application
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.4 – 应用程序中的项目路由
- en: 'With these routes in place, even more routes can be added to the `router` component.
    A logical one is having a route for individual projects, which has an extra parameter
    that specifies which projects should be displayed. Therefore, we have a new component
    called the `ProjectDetailpages` directory, which contains the logic for fetching
    an individual repository from GitHub API. This component is rendered when the
    path matches `/projects/:name`, where `name` stands for the name of the repository
    that is clicked on on the projects page:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些路由设置到位后，还可以向 `router` 组件添加更多路由。一个合理的做法是为单个项目添加一个路由，该路由有一个额外的参数，用于指定应显示哪些项目。因此，我们有一个名为
    `ProjectDetailpages` 的新组件目录，其中包含从 GitHub API 获取单个仓库的逻辑。当路径匹配 `/projects/:name`
    时，该组件会被渲染，其中 `name` 代表在项目页面点击的项目名称：
- en: 'This route uses a new component in a file called `ProjectDetail.js`, which
    is similar to the `Projects` component. You can also create this file in the `pages`
    directory, except that it will be fetching data from the [https://api.github.com/repos/userName/repo](https://api.github.com/repos/userName/repo)
    endpoint, where `userName` and `repo` should be replaced with your own username
    and the name of the repository that you want to display:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此路由使用一个名为 `ProjectDetail.js` 的文件中的新组件，该组件与 `Projects` 组件类似。您也可以在 `pages` 目录中创建此文件，但将是从
    [https://api.github.com/repos/userName/repo](https://api.github.com/repos/userName/repo)
    端点获取数据，其中 `userName` 和 `repo` 应替换为您自己的用户名和您想要显示的仓库名称：
- en: '[PRE38]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: In the preceding section, you can see how the data is retrieved from the GitHub
    API, using both your username and the name of the repository. The name of the
    repository comes from the `useParams` Hook from `react-router-dom`, which gets
    the `name` variable from the URL for you.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，您可以看到如何使用您的用户名和仓库名称从 GitHub API 获取数据。仓库名称来自 `react-router-dom` 的 `useParams`
    钩子，该钩子为您从 URL 获取 `name` 变量。
- en: 'With the repository data retrieved from GitHub, you can create the `items`
    variable that is used to render information about this project using the `List`
    component that we also used in the previous routes. The fields that are added
    to items are coming from GitHub and can also be seen in the response of the `https://api.github.com/users/username/repos`
    endpoint that we inspected previously. Also, the name of the repository is listed
    previously:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过从 GitHub 获取的仓库数据，您可以使用我们在之前的路由中也使用过的 `List` 组件创建 `items` 变量，以渲染有关此项目的信息。添加到
    `items` 中的字段来自 GitHub，也可以在我们之前检查的 `https://api.github.com/users/username/repos`
    端点的响应中看到。此外，仓库名称之前也已列出：
- en: '[PRE39]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: To render this component on the `/projects/:name` route, we need to add this
    component within the `Router` component inside `App.js:`
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在 `/projects/:name` 路由上渲染此组件，我们需要在 `App.js` 中的 `Router` 组件内添加此组件：
- en: '[PRE40]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'You can already navigate to this route by changing the URL in the browser,
    but you also want to add a link to this page in the `Projects` component. Therefore,
    you need to make changes that will import `RouterLink` from `react-router-dom`
    and use it instead of your own `Link` component:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以通过更改浏览器中的 URL 来导航到此路由，但您还希望在 `Projects` 组件中添加到该页面的链接。因此，您需要做出更改，以导入 `RouterLink`
    从 `react-router-dom` 并使用它来代替您自己的 `Link` 组件：
- en: '[PRE41]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: If you now visit the `http://localhost:3000/projects` page in the browser, you
    can click on the projects and move on to a new page that shows all the information
    for a specific project.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你现在在浏览器中访问`http://localhost:3000/projects`页面，你可以点击项目，进入一个新页面，该页面显示了特定项目的所有信息。
- en: With these last changes, you've created a portfolio application that uses `react-router`
    for dynamic routing.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些最后的更改，你已经创建了一个使用`react-router`进行动态路由的资料库应用。
- en: Summary
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you used Create React App to create your starter project for
    a React application, which comes with an initial configuration for libraries such
    as Babel and Webpack. By doing this, you don't have to configure these libraries
    yourself and worry about how your React code will run in the browser. We've looked
    into building reusable components in this chapter and learned how to add dynamic
    routing with `react-router`. With this library, you can create applications that
    have tons of routes, and you're able to use changes in the URL to change what
    is displayed inside your application.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你使用了Create React App来创建你的React应用的起始项目，该应用附带了对Babel和Webpack等库的初始配置。通过这样做，你不必自己配置这些库，也不必担心你的React代码如何在浏览器中运行。我们已经探讨了如何构建可重用组件，并学习了如何使用`react-router`添加动态路由。使用这个库，你可以创建具有大量路由的应用程序，并且能够使用URL的变化来更改应用程序内部显示的内容。
- en: The upcoming chapters will all feature projects that are created with Create
    React App or other zero-config libraries, meaning that these projects don't require
    you to make changes to Webpack or Babel.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的章节都将展示使用Create React App或其他零配置库创建的项目，这意味着这些项目不需要你对Webpack或Babel进行任何更改。
- en: In the next chapter, we will build upon this chapter by creating a dynamic project
    management board with React that uses styled-components for styling and reuses
    logic with custom Hooks.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将通过使用React创建一个动态的项目管理板来构建本章内容，该板使用styled-components进行样式设计，并通过自定义Hooks重用逻辑。
- en: Further reading
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Using npx: [https://medium.com/@maybekatz/introducing-npx-an-npm-package-runner-55f7d4bd282b](mailto:https://medium.com/@maybekatz/introducing-npx-an-npm-package-runner-55f7d4bd282b)'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '使用npx: [https://medium.com/@maybekatz/introducing-npx-an-npm-package-runner-55f7d4bd282b](mailto:https://medium.com/@maybekatz/introducing-npx-an-npm-package-runner-55f7d4bd282b)'
- en: 'Create React App: [https://create-react-app.dev/](https://create-react-app.dev/)'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Create React App: [https://create-react-app.dev/](https://create-react-app.dev/)'
- en: 'React Router: [https://reactrouter.com/web/guides/quick-start](https://reactrouter.com/web/guides/quick-start)'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'React Router: [https://reactrouter.com/web/guides/quick-start](https://reactrouter.com/web/guides/quick-start)'
