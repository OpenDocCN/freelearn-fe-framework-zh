- en: '*Chapter 7*: An Introduction to lottie-react-native'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will be introduced to `lottie-react-native`, a library
    that allows us to render Lottie animations in our React Native apps. We will learn
    about its history, current state, and documentation to make sure we get the most
    out of the library. It is an open source library that''s distributed as an `npm`
    package and can be found at the following links:'
  prefs: []
  type: TYPE_NORMAL
- en: '**GitHub**: [https://GitHub.com/lottie-react-native/lottie-react-native](https://GitHub.com/lottie-react-native/lottie-react-native)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NPM**: [https://www.npmjs.com/package/lottie-react-native](https://www.npmjs.com/package/lottie-react-native)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: How did `lottie-react-native` come into being?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is `lottie-react-native`?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why are we not using Animated or Reanimated?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The basics of `lottie-react-native`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How did lottie-react-native come into being?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: React Native was released in 2015 due to Facebook's need to speed up their mobile
    development teams, with the vision of releasing dozens of new apps and improving
    their current apps in shorter and more effective development cycles. Some may
    say React Native's number one strength is its multiplatform development capabilities
    (*learn once, write anywhere*), but there are also other benefits, such as reusing
    proven libraries and tools that have been living in the web development world
    for a long time – longer than iOS and Android have been around.
  prefs: []
  type: TYPE_NORMAL
- en: Attracted by this promise, Airbnb spun up a team to investigate whether they
    could copy Facebook based on their multiplatform reuse strategy using React Native.
    Their conclusion was not only that the Airbnb mobile team could benefit from this
    strategy, but that they could reuse their vast knowledge of the web and create
    multi-disciplinary teams to build new features on the web, Android, and iOS immediately
    by reusing a large portion of code.
  prefs: []
  type: TYPE_NORMAL
- en: 'The result of their investigation included large architectural decisions, such
    as how React Native should be integrated into existing apps, how to keep the performance
    standards they had, and how to integrate their tooling into the new framework
    they would be deploying into their native apps. One such tool was their beloved
    animation library: Lottie.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Airbnb already had web, Android, and iOS open source libraries for Lottie (lottie):'
  prefs: []
  type: TYPE_NORMAL
- en: '**Web**: [https://GitHub.com/airbnb/lottie-web](https://GitHub.com/airbnb/lottie-web)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Android**: [https://GitHub.com/airbnb/lottie-android](https://GitHub.com/airbnb/lottie-android)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**iOS**: [https://GitHub.com/airbnb/lottie-ios](https://GitHub.com/airbnb/lottie-ios)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All of them were well maintained and served Airbnb's needs, but adding React
    Native into the mix meant they would need a specific library that could be used
    not only by them but also by the thousands of developers who were already building
    the Lottie community.
  prefs: []
  type: TYPE_NORMAL
- en: 'The requirements were clear: they needed a tool that could render Lottie animations
    in React Native code in the same manner they were being rendered in iOS or Android
    apps. This endeavor included performance and feature requirements. The outcome
    was a fully-featured open source library that could easily be integrated into
    all sorts of apps built on React Native.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For this task, a small team of iOS, Android, and web developers were put together
    to successfully release `lottie-react-native` on their public GitHub repository
    in early 2017: [https://GitHub.com/lottie-react-native/lottie-react-native](https://GitHub.com/lottie-react-native/lottie-react-native).'
  prefs: []
  type: TYPE_NORMAL
- en: In 2018, Airbnb reevaluated its investment in React Native and decided they
    would be stopping their involvement with Facebook's project and withdrawing all
    their React Native code from their apps. This decision was explained in a series
    of blog posts revolving around issues related to the complexity of maintaining
    three large code bases (iOS, Android, and React Native) that needed hard coordination
    for a team that was not proficient in React Native.
  prefs: []
  type: TYPE_NORMAL
- en: React Native has come a long way since that day but this meant that Airbnb,
    a large promotor, stopped contributing to this technology, including their involvement
    with `lottie-react-native`. The library was not left on its own, though. Some
    of the owners of `lottie-react-native` looked for maintainers within the community
    and finally transferred the project to the top active contributors at that time
    (`emilioicai` and `lelandrichardson` at GitHub).
  prefs: []
  type: TYPE_NORMAL
- en: What is lottie-react-native?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`lottie-react-native` is a project that''s composed of two main parts:'
  prefs: []
  type: TYPE_NORMAL
- en: The open source project, which is hosted on GitHub. All development, improvement
    requests, issue reporting, and code hosting happens here. It's the center of the
    development community and helps update and improve the library as a whole.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `npm` package, where all the new downloadable versions of the library are
    hosted. Usually, developers would use this npm repository to include `lottie-react-native`
    in their React Native projects.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lottie-react-native` has a hard dependency on `lottie-ios` and `lottie-android`
    and serves as a wrapper for those two libraries, in which heavy load happens.
    In fact, in most of React Native''s native packages, `lottie-react-native` works
    by receiving data from the JavaScript side and then transforming and sending that
    data to the native libraries (`lottie-ios` and `lottie-android`).'
  prefs: []
  type: TYPE_NORMAL
- en: In 2021, `lottie-react-native` became one of the most popular libraries in the
    React Native ecosystem. It has more than 14,500 stars on GitHub and, even without
    Airbnb's involvement, keeps receiving several releases per year.
  prefs: []
  type: TYPE_NORMAL
- en: '`lottie-react-native` has become the go-to library when it comes to rendering
    complex animations in React Native by keeping up with new releases of `lottie-ios`
    and `lottie-android`, all while following changes in React Native closely so that
    it can easily be integrated with new versions of `lottie-ios` and `lottie-android`.'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we know what `lottie-react-native` is and what its dependencies are,
    let's learn why we should use it for our React Native apps.
  prefs: []
  type: TYPE_NORMAL
- en: Why are we not using Animated or Reanimated?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A common question for React Native beginners is which library they should use
    for displaying animations on their apps. After a quick search, three different
    ways of doing so arise: the Animated API, Reanimated, or `lottie-react-native`.'
  prefs: []
  type: TYPE_NORMAL
- en: Animated and Reanimated are not technologies that compete `lottie-react-native`
    as they serve different purposes. Both Animated and Reanimated excel in animating
    React and native components on iOS and Android, but they are based on transforming
    mobile UI components (for example, Text, Containers, Views, or Lists). This means
    they are not designed to create complex animations or visual icons, which designers
    can do with Adobe After Effects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at an example of what Animated/Reanimated can do versus what Lottie
    is capable of:'
  prefs: []
  type: TYPE_NORMAL
- en: '**What Lottie does easily**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.1 – Typical lottie-react-native animation'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17930_07_01.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.1 – Typical lottie-react-native animation
  prefs: []
  type: TYPE_NORMAL
- en: '**What Animated and Reanimated do well**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.2 – Typical Animated/Reanimated animation'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17930_07_02.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.2 – Typical Animated/Reanimated animation
  prefs: []
  type: TYPE_NORMAL
- en: It may be complex to understand the difference, but as a general idea, developers
    should note that Lottie is useful for displaying complex animations in which different
    shapes are in play. These kinds of animations are usually created by designers
    and frames, timing, and UI layers are important parts of them.
  prefs: []
  type: TYPE_NORMAL
- en: Animated and Reanimated should be used for animating views, containers, or platform-specific
    components, as shown in the preceding diagram.
  prefs: []
  type: TYPE_NORMAL
- en: So far, we've learned when and why to use `lottie-react-native` in our apps.
    Now, let's learn the ins and outs of the `lottie-react-native` project itself.
  prefs: []
  type: TYPE_NORMAL
- en: The basics of lottie-react-native
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we'll learn how `lottie-react-native` is structured as a project.
    This will give us the full picture and allow us to get the most out of the resources
    that are available for developers so that we can integrate Lottie animations into
    our React Native projects.
  prefs: []
  type: TYPE_NORMAL
- en: The open source project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The easiest way to become acquainted with `lottie-react-native` is by going
    to its GitHub repository ([https://github.com/lottie-react-native/lottie-react-native](https://github.com/lottie-react-native/lottie-react-native)).
    There, developers can read about its API, request fixes for specific issues, send
    pieces of code to be incorporated into the code base via **Pull Requests** (**PRs**),
    or just browse the code to understand how the library works.
  prefs: []
  type: TYPE_NORMAL
- en: Since 2018, this project is maintained by a sole maintainer, but new releases
    come out regularly to incorporate bug fixes, changes in React Native, and changes
    in `lottie-ios` or `lottie-android`.
  prefs: []
  type: TYPE_NORMAL
- en: In the `README.md` file, developers can find a basic explanation of how to integrate
    and use the library. Besides this explanation, a couple of code samples ([https://github.com/lottie-react-native/lottie-react-native/tree/master/example](https://github.com/lottie-react-native/lottie-react-native/tree/master/example))
    are provided to help developers understand how `lottie-react-native` can or should
    be used with ease.
  prefs: []
  type: TYPE_NORMAL
- en: Alongside those samples, there is a small API reference that shows the most
    common properties and methods that are used for displaying Lottie animations on
    React Native apps. Finally, the `README.md` file also shows a couple of examples
    of Lottie animations, which can be downloaded from LottieFiles, and a couple of
    lines about how to get more information.
  prefs: []
  type: TYPE_NORMAL
- en: An important point to keep in mind when using `lottie-react-native` is versioning,
    since different versions of React Native only work with specific versions of `lottie-react-native`
    (the different versions will be shown shortly). The main reason for this is how
    the build system works.
  prefs: []
  type: TYPE_NORMAL
- en: 'Besides the `README.md` file, other pieces of documentation can be found in
    the repository:'
  prefs: []
  type: TYPE_NORMAL
- en: The API documentation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The TypeScript disclaimer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A list of supported After Effects features on every supported platform
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `examples` folder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Besides this documentation, the `lottie-ios`, or `lottie-android` come out.
  prefs: []
  type: TYPE_NORMAL
- en: The `lottie-react-native` community is very active in terms of submitting PRs,
    and new functionality or bug fixes can usually be found there before they are
    officially released on the npm repository through a new version of `lottie-react-native`.
    Here, you can also find interesting conversations revolving around specific features
    or problems that would not fit as well in the `lottie-react-native` project's
    documentation.
  prefs: []
  type: TYPE_NORMAL
- en: 'New users can create new PRs from their own forks. The following requirements
    are what all users can expect if they wish their PRs to be merged into the master
    branch:'
  prefs: []
  type: TYPE_NORMAL
- en: Documentation must be provided
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An example must be added to the `examples` folder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The PR template must be fulfilled properly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All issues and comments must be addressed in the PR thread
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once a PR has been merged into the master branch, the maintainers will prepare
    a release, depending on the urgency and the timings of the repository. Users can
    expect their changes to be released as a patch – either a minor or major version.
  prefs: []
  type: TYPE_NORMAL
- en: The repository changelog ([https://github.com/lottie-react-native/lottie-react-native/blob/master/CHANGELOG.md](https://github.com/lottie-react-native/lottie-react-native/blob/master/CHANGELOG.md))
    is the best place to learn about what features are released in every version.
    There's also a releases page ([https://github.com/lottie-react-native/lottie-react-native/releases](https://github.com/lottie-react-native/lottie-react-native/releases))
    that users can check out to understand how the library is evolving.
  prefs: []
  type: TYPE_NORMAL
- en: On average, new releases of `lottie-react-native` are being made available every
    2 and a half months.
  prefs: []
  type: TYPE_NORMAL
- en: Platforms
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'React Native was designed to be multiplatform and not limited to iOS and Android
    only, which projects such as `react-native-web` and `react-native-windows` prove.
    `lottie-react-native` follows the same principles and is designed to be run on
    any platform React Native runs on. However, as of 2021, only two platforms are
    fully supported: iOS and Android. Windows support is slowly being added thanks
    to the efforts of a team from Microsoft and Flirc TV that is pushing commits to
    the project to make sure the library catches up.'
  prefs: []
  type: TYPE_NORMAL
- en: In the case of iOS and macOS, `lottie-react-native` needs `lottie-ios` to run.
    This dependency is explicit and `lottie-ios` needs to be installed separately
    due to a legacy issue from when an Airbnb team (mostly composed of native iOS
    developers) decided to use this kind of dependency instead of doing it implicitly.
    In any case, this doesn't affect `lottie-react-native` in any way other than developers
    having to install `lottie-ios` separately and making sure the right version of
    this library is installed.
  prefs: []
  type: TYPE_NORMAL
- en: Since this is a library that runs native code, `lottie-ios` is installed as
    a pod and requires developers to run `pod install` the first time `lottie-react-native`
    and `lottie-ios` are installed.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, `lottie-android` is automatically managed by Gradle, who
    detects it is a dependency of `lottie-react-native`. Then, the right version is
    always installed automatically.
  prefs: []
  type: TYPE_NORMAL
- en: 'Both platforms use the same API but there are minor differences between the
    platforms:'
  prefs: []
  type: TYPE_NORMAL
- en: '`lottie-ios` is written in Swift and a bridging header might be needed for
    it to work properly on iOS ([https://github.com/lottie-react-native/lottie-react-native/issues/739#issuecomment-883591123](https://github.com/lottie-react-native/lottie-react-native/issues/739#issuecomment-883591123)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you need external assets for your animations, Android requires them to be
    put in a folder. Your Lottie component should include the `imageAssetsFolder`
    prop, which allows you to specify the URL where that folder can be found.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developers can specify whether they want hardware acceleration on Android by
    using the `renderMode` prop.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Caching can be activated on Android through the `cacheComposition` prop.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows support was added with version 4.0.0 of `lottie-react-native` but it
    is still under experimentation and should be used with caution.
  prefs: []
  type: TYPE_NORMAL
- en: Versions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`lottie-react-native` has largely evolved to accommodate new versions of React
    Native, `lottie-ios`, and `lottie-android`. All these versions are available through
    the npm repository.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Developers should consider that newer versions include performance improvements
    and bug fixes, so it is always recommended to use the latest version that''s available
    in the npm repository. However, working on specific versions of React Native may
    require developers to install a specific version of `lottie-react-native`. The
    following table shows the compatibility list:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17930_07_01_Table.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The npm package
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This library can be found in the npm repository as `lottie-react-native` ([https://www.npmjs.com/package/lottie-react-native](https://www.npmjs.com/package/lottie-react-native)),
    and all its versions and documentation can be downloaded from [https://www.npmjs.com/](https://www.npmjs.com/).
    Here, users can also find the package's dependencies (the `lottie-react-native`
    as a dependency (the **Dependants** tab).
  prefs: []
  type: TYPE_NORMAL
- en: Both Yarn and npm can be used to install the package, as we will learn in the
    next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned that `lottie-react-native` is a great alternative
    for displaying complex animations in our React Native apps. Serving as a wrapper
    for `lottie-ios` and `lottie-android`, `lottie-react-native` can easily be found
    as an npm package, as well as an open source repository on GitHub. Its documentation
    can be edited and accessed through regular GitHub PR mechanisms.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have a better understanding of the theory surrounding the library,
    it's time to move toward a more practical approach. In the next chapter, we will
    install and use the `lottie-react-native` library to start rendering our Lottie
    animations in our Android or iOS applications, which have been built on React
    Native.
  prefs: []
  type: TYPE_NORMAL
