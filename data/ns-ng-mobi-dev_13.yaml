- en: Integration Testing with Appium
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Appium进行集成测试
- en: In the preceding chapter, we explored how to do unit testing, but unit testing
    doesn't allow you to test whether the button used in your app still actually runs
    a function, or what happens when the user swipes left. For that, we will need
    application testing or end-to-end testing. Well, let's start learning end-to-end
    testing; this is where testing can get complicated and fun.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一章中，我们探讨了如何进行单元测试，但单元测试并不能让你测试按钮在你的应用中是否仍然实际运行函数，或者用户向左滑动时会发生什么。为此，我们需要应用程序测试或端到端测试。好吧，让我们开始学习端到端测试；这是测试变得复杂和有趣的地方。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Appium testing framework
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Appium测试框架
- en: Writing MochaJS, ChaiJS, and ShouldJS tests
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写MochaJS、ChaiJS和ShouldJS测试
- en: How to find and interact with elements on the screen
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何查找并与屏幕上的元素交互
- en: How to run the tests
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何运行测试
- en: Travis and GitHub integration
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Travis和GitHub集成
- en: Integration testing
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集成测试
- en: There are several full application frameworks out there, but we will show you
    how to use Appium ([http://appium.io](http://appium.io)). Appium is an awesome
    open source application testing framework. Appium supports both iOS and Android,
    which makes it a perfect fit for doing all our on-device testing. You want to
    start creating tests to test your basic flow through your application, and even
    create more complicated tests that test alternate flows through your app.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个完整的应用程序框架，但我们将向您展示如何使用Appium（[http://appium.io](http://appium.io)）。Appium是一个很棒的开源应用程序测试框架。Appium支持iOS和Android，这使它非常适合进行所有的设备测试。您想要开始创建测试，以测试应用程序中的基本流程，甚至创建更复杂的测试，以测试应用程序中的替代流程。
- en: 'Let''s get it installed first; run the following command:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先安装它；运行以下命令：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The preceding command installs Appium, the Appium communication driver **WD** ([http://admc.io/wd/](http://admc.io/wd/)),
    and the **NativeScript driver** ([https://github.com/NativeScript/nativescript-dev-appium](https://github.com/NativeScript/nativescript-dev-appium)).
    The WD driver is what communicates with Appium and the NativeScript driver. The
    `nativescript-dev-appium` is the driver that interacts with WD and your test code.
    In reality, the NativeScript driver is a very thin wrapper around the WD driver
    and just facilitates some configuration and then exposes the WD driver to your
    application. So interaction commands will be found in the WD documentation.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令安装了Appium、Appium通信驱动**WD**（[http://admc.io/wd/](http://admc.io/wd/)）和**NativeScript驱动**（[https://github.com/NativeScript/nativescript-dev-appium](https://github.com/NativeScript/nativescript-dev-appium)）。WD驱动是与Appium和NativeScript驱动进行通信的东西。`nativescript-dev-appium`是与WD和您的测试代码进行交互的驱动程序。实际上，NativeScript驱动只是WD驱动的一个非常薄的包装器，它只是简化了一些配置，然后将WD驱动暴露给您的应用程序。因此，交互命令将在WD文档中找到。
- en: Application/Integration testing takes a bit more work, as you have to programmatically
    run it as a normal user would interact with your app. So, you have to do things,
    such as find the button element, then perform `button.tap()`. So, your tests might
    be a bit verbose, but this allows you to test any, and all, functionalities. The
    down side is that this is a lot more time-consuming to run and takes more maintenance
    work when you change screens. However, the payoff is that when you add code, it
    verifies that your app still runs properly on each screen automatically, and you
    can test it on multiple devices and resolutions, once again automatically.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序/集成测试需要更多的工作，因为你必须以编程方式运行它，就像普通用户与你的应用程序交互一样。因此，你必须做一些事情，比如找到按钮元素，然后执行`button.tap()`。因此，你的测试可能会有点冗长，但这样可以测试任何和所有功能。不利的一面是这需要更多的时间来运行，并且在更改屏幕时需要更多的维护工作。然而，好处是当你添加代码时，它会自动验证你的应用程序在每个屏幕上是否仍然正常运行，并且你可以在多台设备和分辨率上进行测试，同样也是自动的。
- en: After installation, you will have a brand new `e2e-tests` folder in your root
    folder of your application. This folder is where all your end-to-end test files
    will live. Now, one thing that you need to know is that the Appium NativeScript
    driver uses the MochaJS test framework ([https://mochajs.org/](https://mochajs.org/)).
    The Mocha testing framework is similar to the Jasmine framework, which we discussed
    in the preceding chapter. It uses the same `describe` and `it` functions for the
    start of the tests, just like Jasmine. In addition, it uses the Chai ([http://chaijs.com/](http://chaijs.com/))
    and ShouldJS ([https://github.com/shouldjs/should.js](https://github.com/shouldjs/should.js))
    testing frameworks that work hand in hand with the Mocha test framework and the
    WD driver.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 安装后，你的根文件夹中将会有一个全新的`e2e-tests`文件夹。这个文件夹是你所有端到端测试文件的存放地。现在，你需要知道的一件事是，Appium
    NativeScript驱动程序使用MochaJS测试框架（[https://mochajs.org/](https://mochajs.org/)）。Mocha测试框架类似于我们在前一章讨论过的Jasmine框架。它使用相同的`describe`和`it`函数来开始测试，就像Jasmine一样。此外，它还使用了与Mocha测试框架和WD驱动程序紧密配合的Chai（[http://chaijs.com/](http://chaijs.com/)）和ShouldJS（[https://github.com/shouldjs/should.js](https://github.com/shouldjs/should.js)）测试框架。
- en: Another thing to note is that all these are designed around pure JavaScript.
    You can get typings for Mocha, Should, and Chai, but for the NativeScript Appium
    driver or WD driver, typings don't exist. You can use TypeScript, but it is awkward,
    as commands are not just WD-based commands but chained through mocha. TypeScript
    gets easily confused as to what context you are in. So, mostly the Appium tests
    are created in pure JavaScript rather than in TypeScript. However, feel free to
    use TypeScript if you want; just make sure that you run `tsc` to build the `JS`
    files before you run the tests.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 另一件事需要注意的是，所有这些都是围绕纯JavaScript设计的。你可以为Mocha、Should和Chai获取类型，但对于NativeScript
    Appium驱动程序或WD驱动程序，类型不存在。你可以使用TypeScript，但这有点尴尬，因为命令不仅仅是基于WD的命令，而是通过mocha链接在一起。TypeScript很容易混淆你所在的上下文。因此，大多数Appium测试是用纯JavaScript而不是TypeScript创建的。但是，如果你愿意，可以自由使用TypeScript；只需确保在运行测试之前运行`tsc`来构建`JS`文件。
- en: Configuration
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置
- en: 'One more setup step that you will need to do is to create an `appium.capabilities.json`
    file in the root folder of your project. This is basically a configuration file
    that you can use to configure the emulator that you need to run any of your tests
    on. The file is documented on the Appium site but to get you up and running quickly
    you can use the paired-down file which we use as follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要做的另一个设置步骤是在项目的根文件夹中创建一个`appium.capabilities.json`文件。这基本上是一个配置文件，你可以用它来配置你需要在任何测试上运行的模拟器。该文件在Appium网站上有文档，但为了让你快速上手，你可以使用我们使用的简化文件，如下所示：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We've simplified it and removed all other emulator entries to save space. However
    you give each emulator entry a key-- you tell Appium using the key the emulator
    configuration that you will be running. This example file shows two configurations.
    The first one is an Android 4.4 device, and the second one is an iOS simulator
    (iPhone 6 runs iOS 10). You can have as many configurations as you want in this
    file. When you run Appium, you can tell it which device you will target, using
    the `--runType=KEY` parameter.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经简化了它，并删除了所有其他模拟器条目以节省空间。但是，您可以为每个模拟器条目分配一个键--您可以告诉Appium使用该键来运行模拟器配置。此示例文件显示了两个配置。第一个是Android
    4.4设备，第二个是iOS模拟器（iPhone 6运行iOS 10）。您可以在此文件中拥有任意数量的配置。运行Appium时，您可以使用`--runType=KEY`参数告诉它要定位哪个设备。
- en: Creating a test
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建测试
- en: 'Let''s start our journey and create a new test file: `list.test.js`. This file
    will test our mix-list screen. The screen''s HTML (`/app/modules/mixer/components/mix-list.component.html`)
    looks like this:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始我们的旅程，创建一个新的测试文件：`list.test.js`。此文件将测试我们的混合列表屏幕。屏幕的HTML（`/app/modules/mixer/components/mix-list.component.html`）如下所示：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We've included the code here so that you can see easily how we made the test
    with the details provided on the screen.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里包含了代码，以便您可以轻松地看到我们如何使用屏幕上提供的细节进行测试。
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We need to include the NativeScript Appium driver in our JavaScript test code;
    this is what is used to actually communicate and set up the Mocha, ShouldJS, WD,
    Appium, and Chia to be able to work properly. The following line alone is required
    for your usage:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在JavaScript测试代码中包含NativeScript Appium驱动程序；这是用于实际通信和设置Mocha、ShouldJS、WD、Appium和Chia以正常工作的内容。仅需要以下一行代码来使用：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'As the comments in the source code mention, it is critical that you give enough
    time to start up Appium and the application in your emulator. So, out personal
    default is `100,000`; you can play with this number, but this is the maximum amount
    of time it will wait before it will declare the tests a failure. Having a larger
    value means that you give your emulator and Appium more time to actually start
    running. Appium gives you its startup output quickly, but when it goes to actually
    initialize the test and driver, that process takes a lot of time. Once the test
    starts to run, it runs very fast:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 正如源代码中的注释所提到的，非常重要的是给Appium和模拟器启动足够的时间。因此，我们的个人默认值是`100,000`；您可以尝试不同的数字，但这是它在宣布测试失败之前等待的最长时间。具有较大值意味着您为模拟器和Appium提供更多时间来实际运行。Appium会快速提供启动输出，但当它实际上初始化测试和驱动程序时，该过程需要很长时间。一旦测试开始运行，它将非常快速：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'It is also very important to initialize and create the driver before your tests
    are run. This driver is global throughout your tests. So, we will declare it globally
    in the `describe` function and then initialize it with the Mocha `before` function
    that runs before any tests are run:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行测试之前，初始化和创建驱动程序非常重要。这个驱动程序在整个测试过程中是全局的。因此，我们将在`describe`函数中全局声明它，然后使用Mocha的`before`函数在运行任何测试之前初始化它。
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We also add a Mocha after function to shut down the driver when we are all
    done. It is very important to ensure that any time you are working with the driver
    that you properly return it. Almost every single test piece is actually a promise
    underneath it. If you forget to return the promise, the testing harness will get
    royally mixed up and may run tests out of order and even close the driver before
    the tests are completed. So, always return the promise:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还添加了一个Mocha after函数，在完成所有操作时关闭驱动程序。确保在使用驱动程序时，始终正确返回它非常重要。实际上，几乎每个测试片段都是一个promise。如果忘记返回promise，测试工具将会混乱，并可能按顺序运行测试，甚至在测试完成之前关闭驱动程序。因此，始终返回promise：
- en: '[PRE7]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `it` function is used just like we did in Jasmine--you are describing a
    test you plan on running so that you can find it if the test fails. Again, we
    return the promise chain; it is very important that you don't forget to do this.
    The driver variable is what gives us the different functionality when dealing
    with the emulators. So, the documentation for the functionality is in the WD repository,
    but I will give you a quick overview to get you going.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`it` 函数的使用方式与我们在 Jasmine 中所做的一样 - 你正在描述一个你计划运行的测试，以便在测试失败时找到它。同样，我们返回 promise
    链；非常重要的是，你不要忘记这样做。driver 变量是在处理模拟器时给我们不同功能的东西。因此，功能的文档在 WD 存储库中，但我会给你一个快速概述让你开始。'
- en: '`.elementByXPath` and `.elementById` are really the only two functions that
    work well to properly find elements with NativeScript . However there is also
    a `.waitForElementByXPath` and `.waitForElementById` which both wait for the elements
    to show up. If you look at the documentation, you will observe a lot of `elementByXXX`
    commands, but Appium was designed for a browser, and NativeScript is not a browser.
    That is why, only some commands that have been emulated in the nativescript-dev-appium
    driver work to find elements in the NativeScript DOM.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`.elementByXPath` 和 `.elementById` 真的是唯一两个能够很好地正确找到 NativeScript 元素的函数。然而，还有一个
    `.waitForElementByXPath` 和 `.waitForElementById`，它们都等待元素显示出来。如果你查看文档，你会发现很多 `elementByXXX`
    命令，但 Appium 是为浏览器设计的，而 NativeScript 不是浏览器。这就是为什么，只有一些在 nativescript-dev-appium
    驱动中被模拟的命令才能在 NativeScript DOM 中找到元素。'
- en: 'So our test says find an element by XPath. XPath allows you to drill into your
    DOM and find components any level deep and also subcomponents of other components.
    So, if you do something like `/GridLayout/StackLayout/Label`, it will find a `Label`
    that is a child of a `StackLayout`, which is a child of a `GridLayout`. Using
    `*//*` will mean that you can find that element at any level in the DOM. Finally
    the `nsAppium.getXPathElement` is a method which was added to the official NativeScript
    driver by Nathanael Anderson to allow us to make the XPath tests cross-platform.
    In all reality, what you are passing to the XPath function is the real native
    name of the object. For example, a button on Android is a `android.widget.Button` or
    it could be a `UIAButton` or a `XCUIElementTypeButton` on iOS. So because you
    don''t want to hardcode `getByElementXPath("android.widget.Button")`, this helper
    function translates the NativeScript `Button` to the proper underlying OS element
    that NativeScript actually uses when it creates a button in NativeScript. If,
    in the future, you add a plugin that uses an element that the `getXPathElement`
    doesn''t know about, you can still use the real name of the element for those
    tests:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们的测试说通过 XPath 找到一个元素。XPath 允许你深入到你的 DOM 中并找到任何级别的组件，也可以找到其他组件的子组件。因此，如果你做类似
    `/GridLayout/StackLayout/Label` 的事情，它会找到一个 `Label`，它是 `StackLayout` 的子级，而 `StackLayout`
    是 `GridLayout` 的子级。使用 `*//*` 将意味着你可以在 DOM 中的任何级别找到该元素。最后，`nsAppium.getXPathElement`
    是一个方法，由 Nathanael Anderson 添加到官方 NativeScript 驱动中，允许我们进行跨平台的 XPath 测试。实际上，你传递给
    XPath 函数的是对象的真实本地名称。例如，Android 上的按钮是 `android.widget.Button`，或者在 iOS 上可能是 `UIAButton`
    或 `XCUIElementTypeButton`。因此，因为你不想硬编码 `getByElementXPath("android.widget.Button")`，这个辅助函数将
    NativeScript 的 `Button` 转换为 NativeScript 在创建按钮时实际使用的底层操作系统元素。如果将来添加一个使用 `getXPathElement`
    不知道的元素的插件，你仍然可以使用这些测试的真实元素名称。
- en: '[PRE8]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '`.text()` is a function that Appium driver exposes to get the text value of
    the elements it finds. The `.should.eventually.exist.equal` is a Mocha and Should
    code. We are basically making sure that once this item is found, it actually matches
    the Unicode value of F067, which in Font-Awesome is the Plus character (fa-plus).
    Once it exists, we are happy--the test either succeeds or fails, depending on
    whether we break the screen or the screen continues to be the way we expect it.
    In addition, after the `**.equal**`, we could have chained more commands, such
    as `.tap()`, to fire the button if we wanted.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`.text()`是Appium驱动程序公开的函数，用于获取它找到的元素的文本值。`.should.eventually.exist.equal`是Mocha和Should代码。我们基本上是确保一旦找到这个项目，它实际上与F067的Unicode值匹配，在Font-Awesome中是加号字符（fa-plus）。一旦存在，我们就很高兴——测试要么成功，要么失败，这取决于我们是打破屏幕还是屏幕继续保持我们期望的方式。此外，在`.equal`之后，我们可以链接更多命令，比如`.tap()`，以触发按钮，如果我们想要的话。'
- en: 'Okay, let''s look at the next test that runs:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们看一下接下来运行的下一个测试：
- en: '[PRE9]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This test searches the screen to show the `Demo` ListView item. We are looking
    for a NativeScript Label (that is, `nsAppium.getXPathElement`) anywhere in the
    NativeScript DOM (that is, `*//*`) that contains the text value of Demo in it.
    (that is, `[@text=''Demo'']`). This element should eventually exist, and once
    it does exist, it calls the `tap()` function. Now, if you look at the source code,
    you will see the following:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这个测试搜索屏幕以显示`Demo`的`ListView`项。我们正在寻找一个包含Demo文本值的NativeScript标签（即`nsAppium.getXPathElement`）在NativeScript
    DOM中的任何位置（即`*//*`）（即`[@text='Demo']`）。这个元素应该最终存在，一旦存在，就调用`tap()`函数。现在，如果你看源代码，你会看到以下内容：
- en: '[PRE10]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: So, it will run the select function when the `tap` is fired. The `select` function
    ends up ultimately loading the `/app/modules/player/components/track-list/track-list.component.html`
    file, which is used to display the composition of that mixer item on the screen.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，当`tap`被触发时，它将运行`select`函数。`select`函数最终加载`/app/modules/player/components/track-list/track-list.component.html`文件，用于在屏幕上显示该混音器项目的组成。
- en: All the tests are executed sequentially, and the state of the app is preserved
    from one test to another. This means that tests are not independent like we are
    used to when writing unit-tests.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的测试都是按顺序执行的，并且应用程序的状态从一个测试保持到另一个测试。这意味着测试不像我们写单元测试时那样是独立的。
- en: 'The next test we will verify is that the `Demo` Label actually switches screens
    in the next test after we tap on it:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们将验证的测试是在我们点击后`Demo`标签实际上切换屏幕的下一个测试：
- en: '[PRE11]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'So, now that we are on a new screen, we will verify that the `ListView` contains
    a Label with the name of `Drums`. This test just verifies that the screen actually
    changed when we tapped on the `Demo` Label in the prior test. We could have verified
    the text value but really if it exists, we are good. So, let''s look at the next
    test:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，现在我们在一个新的屏幕上，我们将验证`ListView`是否包含一个名为`Drums`的标签。这个测试只是验证当我们在上一个测试中点击`Demo`标签时屏幕实际上是否发生了变化。我们本来可以验证文本值，但如果它存在，我们就没问题了。所以，让我们看看下一个测试：
- en: '[PRE12]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Our final example test shows chaining. We search the Label that has the volume
    control symbol. Then, once it exists, we tap on it. Then, we verify that the text
    actually became the volume off symbol. The `f028` is the Font Awesome Unicode
    value for `fa-volume-up`, and the `f026` is the Font Awesome Unicode value for
    `fa-volume-off`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的最后一个示例测试展示了链接。我们搜索具有音量控制符号的标签。然后，一旦它存在，我们点击它。然后，我们验证文本实际上变成了关闭音量符号。`f028`是`fa-volume-up`的Font
    Awesome Unicode值，`f026`是`fa-volume-off`的Font Awesome Unicode值。
- en: 'So now that you have this really cool test, you want to launch your emulator.
    The emulator should be already running. You also should ensure that you have the
    latest version of the application on the device. Then, to run the test, simply
    type the following command:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 所以现在你有了这个非常酷的测试，你想要启动你的模拟器。模拟器应该已经在运行。你还应该确保你的设备上有最新版本的应用程序。然后，要运行测试，只需输入以下命令：
- en: '[PRE13]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Ensure that you put in which run type configuration you are going to use, and
    you should see something like this after a few minutes:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你输入你将要使用的运行类型配置，并且几分钟后你应该会看到类似这样的东西：
- en: '![](../images/00058.jpeg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00058.jpeg)'
- en: Remember that Appium end-to-end tests take a while to start, so if it looks
    like it is frozen for a while, don't panic and quit it. It may take 24 seconds
    for the first test, seconds for each additional test. The first test has all the
    time in it. It is normal for Appium to take a long time to start the driver and
    the application on the emulator. This delay normally occurs after you see the
    first couple of lines of text printed, as shown in the preceding screen, so, have
    some patience.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，Appium的端到端测试需要一段时间才能启动，所以如果它看起来冻结了一段时间，不要惊慌并退出。第一个测试可能需要24秒，每个额外的测试需要几秒。第一个测试包含了所有的时间。Appium在启动驱动程序和模拟器上的应用程序时需要很长时间是正常的。这种延迟通常发生在你看到前几行文本打印出来之后，就像前面的屏幕显示的那样，所以，请耐心等待。
- en: More Appium testing
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多的Appium测试
- en: 'I wanted to include one more test (not used in this application) that I have
    written in the past for a different project since this will give you an idea of
    just how powerful Appium can be:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我想要包括另一个测试（在这个应用程序中没有使用）我以前为一个不同的项目编写过，因为这将让你了解Appium有多么强大：
- en: '[PRE14]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The first thing you might note is that I did not return the promise chain. That
    is because this example shows how to use the asynchronous support of `it`. For
    an async support, you can use a promise or make the function coming into `it`
    have a `done` callback function. When Mocha detects a callback function in the
    `it`, it will run your `it` tests in the async mode and doesn't need the promise
    to let it know that it can resume with the next test. Sometimes, you may just
    want to maintain full control or you may be calling code that requires async callbacks.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能注意到的第一件事是，我没有返回promise链。这是因为这个例子展示了如何使用`it`的异步支持。对于异步支持，你可以使用promise或者让传入`it`的函数有一个`done`回调函数。当Mocha检测到`it`中的回调函数时，它将以异步模式运行你的`it`测试，并且不需要promise来让它知道可以继续进行下一个测试。有时，你可能只想保持完全控制，或者你可能正在调用需要异步回调的代码。
- en: This test looks for a `EditText` element that contains `Enter your name`. Then,
    it actually types *Testing* into it using the `sendKeys`. Next, it asks for the
    `text` out of the field and uses the `then` part of the promise to check the value
    against the hardcoded testing. When it is all finished, it calls the `done` function.
    If you pass the `done` function an `Error` object, then it knows that the test
    failed. So, you can see in the `if` statement that we passed a `new Error` and
    that we put the `done` function in the `catch` part of the `then` statement.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这个测试查找包含`输入你的名字`的`EditText`元素。然后，它使用`sendKeys`实际输入*Testing*。接下来，它要求从字段中获取`text`，并使用promise的`then`部分来检查该值是否与硬编码的testing相匹配。当所有的操作都完成时，它调用`done`函数。如果你向`done`函数传递一个`Error`对象，那么它就知道测试失败了。所以，你可以在`if`语句中看到我们传递了一个`new
    Error`，并且我们将`done`函数放在`then`语句的`catch`部分。
- en: We have barely scratched the surface of what you can do with Appium, Should,
    Mocha, and Chia. You can control pretty much all aspects of the application as
    if you were manually doing each step. Initially, in your development, manually
    testing is a lot faster. However, as you start to build up end-to-end tests, each
    time you make changes, you can check whether the app still works properly, and
    you do not have to sit in front of multiple devices for any amount of time--you
    just start the tests and see the results later.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只是触及了Appium、Should、Mocha和Chia可以做的一小部分。您几乎可以控制应用程序的所有方面，就好像您手动执行每个步骤一样。最初，在您的开发中，手动测试速度要快得多。然而，当您开始构建端到端的测试时，每次进行更改时，您都可以检查应用程序是否仍然正常工作，而无需花费大量时间坐在多个设备前--您只需开始测试，稍后查看结果。
- en: Automated testing
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动化测试
- en: One more thing that you should note is that the more automated you make your
    testing, the more likely you are to use it and gain from its benefits. If you
    constantly have to manually run the test, you are likely to get annoyed and stop
    running them. So automating this is critical in our opinion. Since there are many
    books written on this subject we are just going to give you a couple of pointers
    that you can research and then move forward.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该注意的另一件事是，您使测试自动化程度越高，您就越有可能使用它并从中获益。如果您不断地手动运行测试，您很可能会感到恼火并停止运行它们。因此，在我们看来，自动化这一点至关重要。由于有许多关于这个主题的书籍，我们只会给您一些指针，让您可以进行研究，然后继续前进。
- en: Most source control systems allow you to create hooks. With these hooks, you
    can create a commit hook so that on check-in of any new code, your testing frameworks
    will run. These hooks are normally pretty simple to create as they are simple
    scripts that just run each time a commit is made.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数源代码控制系统都允许您创建钩子。通过这些钩子，您可以创建一个提交钩子，以便在检入任何新代码时运行您的测试框架。这些钩子通常很容易创建，因为它们只是简单的脚本，每次提交时都会运行。
- en: In addition, if you are using GitHub, there are sites such as Travis that you
    can tie into easily without having to do any hook changes.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果您正在使用GitHub，有一些网站（如Travis）可以轻松地与之集成，而无需进行任何钩子更改。
- en: GitHub and Travis integration
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GitHub和Travis集成
- en: 'Here is how you can do some integration with GitHub and Travis; this will allow
    your NativeScript Testing framework, which we discussed in the preceding chapter,
    to automatically run your tests on each change or pull request. Create a new `.travis.yml`
    file in the very root of your GitHub repository. This file should look like this:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是如何与GitHub和Travis进行一些集成；这将允许我们在前一章中讨论的NativeScript测试框架自动在每次更改或拉取请求时运行您的测试。在GitHub存储库的根目录中创建一个新的`.travis.yml`文件。此文件应如下所示：
- en: '[PRE15]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This basically configures Travis to start an Android emulator; it waits for
    the emulator to start and then runs the `npm` commands. You can learn what these
    `npm` commands do from your `package.json`.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，这配置了Travis启动Android模拟器；它等待模拟器启动，然后运行`npm`命令。您可以从您的`package.json`中了解这些`npm`命令的作用。
- en: 'So, in your root application, that is, the package.json file of your app, you
    want to add the following keys:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在您的根应用程序中，也就是您的应用程序的package.json文件中，您需要添加以下键：
- en: '[PRE16]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: With these two changes, Travis will automatically test every single pull request
    to your repository, which then means that you can code, and Travis will continually
    do all your unit testing.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这两个更改，Travis将自动测试您存储库中的每个拉取请求，这意味着您可以编写代码，Travis将持续进行所有单元测试。
- en: 'In addition, you can change the preceding Travis configuration file to add
    Appium to be installed and run also just by doing the following:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您可以更改前面的Travis配置文件，以添加Appium的安装和运行，只需执行以下操作：
- en: Adding the Appium dependencies to your main `package.json` dependencies.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将Appium依赖项添加到您的主`package.json`依赖项中。
- en: Adding to the root of your project a `appium.capabilities.json` that has a `travisAndroid`
    key.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在项目的根目录中添加一个具有`travisAndroid`键的`appium.capabilities.json`。
- en: Adding the `&& npm run appium --runType=travisAndroid` to your `travistest` key
    in the `package.json` file.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`package.json`文件中的`travistest`键中添加`&& npm run appium --runType=travisAndroid`。
- en: GitHub already has the integration with Travis built-in, so it is simple to
    document and get it running. If you use Gitlabs, you can use the Gitlabs CI system
    to do testing. In addition, you can use the repository hooks to use a wide number
    of other continuous integration services that are available. Finally, you can
    also develop your own.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub已经内置了与Travis的集成，因此很容易进行文档化并运行。如果您使用Gitlabs，可以使用Gitlabs CI系统进行测试。此外，您还可以使用存储库钩子来使用许多其他可用的持续集成服务。最后，您还可以开发自己的持续集成服务。
- en: Summary
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we covered how to install and run Appium, how to build complete
    end-to-end tests and how to use the testing frameworks to test your screens fully.
    In addition, we covered how important it is to automate the running of the unit
    testing and Appium, and one way you can do so is using Travis and GitHub.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了如何安装和运行Appium，如何构建完整的端到端测试以及如何使用测试框架全面测试您的屏幕。此外，我们还介绍了自动运行单元测试和Appium的重要性，而您可以使用Travis和GitHub来实现这一点。
- en: Now hang on tight--we will make a quick turn and start discussing how to deploy
    and use Webpack to optimize your builds for release.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在紧紧抓住——我们将快速转向并开始讨论如何部署和使用Webpack来优化您的发布构建。
