- en: '5'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '5'
- en: The Composition API
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组合式 API
- en: In the previous chapter, we learned how to establish data communication between
    nesting components using props, refs, and slots.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了如何使用 props、refs 和 slots 在嵌套组件之间建立数据通信。
- en: This chapter will introduce us to a new and scalable approach to writing components
    with the `setup()` lifecycle hook – the Composition API. By the end of the chapter,
    you will be able to write isolated composables (or custom hooks) to reuse in multiple
    components by using the Composition API with the `setup()` method, and build a
    scalable component system for your Vue project beyond the classic Options API.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将介绍一种新的可扩展方法，即使用 `setup()` 生命周期钩子编写组件——组合式 API。到本章结束时，您将能够使用 `setup()` 方法结合组合式
    API 编写独立的可组合函数（或自定义钩子），以便在多个组件中重用，并构建一个超越经典 Options API 的可扩展组件系统。
- en: 'This chapter covers the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了以下主题：
- en: Creating components with the `setup()` lifecycle method
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `setup()` 生命周期方法创建组件
- en: Working with data
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理数据
- en: Understanding composable lifecycle functions
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解可组合生命周期函数
- en: Creating your composable (custom hook)
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建您的可组合函数（自定义钩子）
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: In this chapter, you need to set up a basic Vue project following the instructions
    in [*Chapter 1*](B18645_01.xhtml#_idTextAnchor015), *Starting Your First Vue Project*.
    Creating a single file Vue component is recommended to practice the examples and
    concepts mentioned easily.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您需要按照[*第一章*](B18645_01.xhtml#_idTextAnchor015)中*开始您的第一个 Vue 项目*的说明设置一个基本的
    Vue 项目。建议创建一个单文件 Vue 组件来练习本章中提到的示例和概念。
- en: 'You can find this chapter’s source code here: [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter05](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter05).'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在此处找到本章的源代码：[https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter05](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter05)。
- en: Creating components with the setup() lifecycle method
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 setup() 生命周期方法创建组件
- en: Starting from Vue 3.x, the Vue team has introduced the Composition API as a
    new way to compose Vue components within the `setup()` lifecycle method. As mentioned
    in [*Chapter 1*](B18645_01.xhtml#_idTextAnchor015), *Starting Your First Vue Project*,
    `setup()` is the first hook the Vue engine will run in a component’s lifecycle
    before the `beforeCreate()` hook. At this point, Vue hasn’t defined a component
    instance or any component data.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Vue 3.x 版本开始，Vue 团队引入了组合式 API 作为在 `setup()` 生命周期方法内组合 Vue 组件的新方法。如[*第一章*](B18645_01.xhtml#_idTextAnchor015)中所述，*开始您的第一个
    Vue 项目*，`setup()` 是 Vue 引擎在组件生命周期中运行 `beforeCreate()` 钩子之前运行的第一个钩子。在这个时候，Vue 还未定义组件实例或任何组件数据。
- en: This lifecycle method runs once before the initialization and creation of a
    component and is part of the Options API. The Vue team has dedicated `setup()`
    to working with Composition API and any custom hooks (composables) written with
    the Composition API as an alternative approach to creating reactive components
    besides the Options API.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这个生命周期方法在组件的初始化和创建之前运行一次，是 Options API 的一部分。Vue 团队将 `setup()` 专门用于与组合式 API 和使用组合式
    API 编写的任何自定义钩子（可组合函数）一起工作，作为创建响应式组件的替代方法，除了 Options API 之外。
- en: 'You can start using the `setup()` method with the following syntax:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下语法开始使用 `setup()` 方法：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`Setup()` accepts two arguments, which are as follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`Setup()` 接受两个参数，如下所示：'
- en: '`props`: All the reactive props data is passed to the component from its parent.
    You need to declare the props using the `props` field in the Options API as usual.
    Note that you shouldn’t de-structure the `props` object to avoid losing the reactivity
    for the de-structured field.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`props`: 所有响应式属性数据都是从父组件传递给组件的。您需要像往常一样使用 Options API 中的 `props` 字段声明属性。请注意，您不应该解构
    `props` 对象，以避免丢失解构字段的响应性。'
- en: '`context`: These are all the non-reactive fields for the component, such as
    `attrs`, `slots`, `emit`, and `expose`.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`context`: 这些是组件的所有非响应式字段，例如 `attrs`、`slots`、`emit` 和 `expose`。'
- en: '`setup()` returns an object containing the component’s internal reactive/static
    data state, its methods, or a render function.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`setup()` 返回一个包含组件内部响应/静态数据状态、方法或渲染函数的对象。'
- en: 'The equivalent version of `setup()` without the Options API is `<script setup>`.
    The Vue engine will compile the code defined within the `<script setup>` section
    into the appropriate code block inside `setup()`, as seen in the following example:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 没有Options API的`setup()`的等效版本是`<script setup>`。Vue引擎将编译`<script setup>`部分中定义的代码，将其编译成`setup()`内部适当代码块，如下面的示例所示：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The preceding code is equal to the following using `setup()`:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码等同于使用`setup()`的以下代码：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In both preceding examples, we define an internal data state – `message` – for
    our component. We then can display `message` in the `<template>` section as required.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的两个示例中，我们为我们的组件定义了一个内部数据状态`message`。然后我们可以在`<template>`部分按需显示`message`。
- en: 'With `<script setup>`, if you need to use the `props` parameter, you need to
    import `defineProps()` from the `vue` package and define the props within the
    `<script setup>` section, as shown in the following example:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`<script setup>`，如果你需要使用`props`参数，你需要从`vue`包中导入`defineProps()`，并在`<script
    setup>`部分定义props，如下面的示例所示：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the preceding example, `userName` is now available in the template section
    as the component’s data props. You can also do something similar with `defineEmits()`
    for all the custom events of a component, `useSlots()` and `useAttrs()` for the
    component’s `slots`, and `attrs` when using `<script setup>` instead of the `setup()`
    method.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，`userName`现在在模板部分作为组件的数据属性可用。你还可以使用`defineEmits()`对所有组件的自定义事件做类似处理，使用`useSlots()`和`useAttrs()`处理组件的`slots`，以及使用`attrs`在`<script
    setup>`而不是`setup()`方法时。
- en: Next, let’s create our first component with the `setup()` method.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们使用`setup()`方法创建我们的第一个组件。
- en: Exercise 5.01 – creating a greeting component with setup()
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习5.01 – 使用setup()创建问候组件
- en: In this exercise, we will create a component that renders a pre-defined greeting
    message using `setup()`, and then rewrite it using `<``script setup>`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将创建一个组件，使用`setup()`渲染一个预定义的问候消息，然后使用`<script setup>`重写它。
- en: To access the code file for this exercise, refer to [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter05/Exercise5.01](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter05/Exercise5.01).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问此练习的代码文件，请参阅[https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter05/Exercise5.01](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter05/Exercise5.01)。
- en: 'Follow the given steps to complete this exercise:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤完成此练习：
- en: 'Use the application generated by `npm init vue@3` as a starting point, or within
    the root folder of the code repository, navigate into the `Chapter05/Exercise5.01`
    folder by using the following commands in order:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以`npm init vue@3`生成的应用程序作为起点，或者在你的代码仓库的根目录下，使用以下命令按顺序导航到`Chapter05/Exercise5.01`文件夹：
- en: '[PRE4]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Open the exercise project in VS Code (by using the `code .` command within the
    project directory) or your preferred IDE.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在VS Code中打开练习项目（在项目目录中使用`code .`命令）或使用你喜欢的IDE。
- en: Create a new file named `Greeting.vue` in the `./``src/components` directory.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`./src/components`目录下创建一个名为`Greeting.vue`的新文件。
- en: 'Start by scaffolding the component with empty `template` and `script` tags:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，使用空的`template`和`script`标签搭建组件：
- en: '[PRE6]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Next, we will implement the logic of our `setup()` method, which will return
    an internal data state, `greeting`, with a static value of `"Hello"`, and another
    internal data state, `who`, with a static value of `"John"`:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将实现`setup()`方法的逻辑，该方法将返回一个内部数据状态`greeting`，其静态值为`"Hello"`，以及另一个内部数据状态`who`，其静态值为`"John"`：
- en: '[PRE12]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'In the `template` section, let’s display the values of `greeting` and `who`
    as shown in the following code block:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`template`部分，让我们显示`greeting`和`who`的值，如下面的代码块所示：
- en: '[PRE21]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Run the application using the following command:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令运行应用程序：
- en: '[PRE24]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'You will see the following when visiting your app in the browser:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你在浏览器中访问你的应用时，你会看到以下内容：
- en: '[PRE25]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Add the `setup` attribute to your `<``script>` tag:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`setup`属性添加到你的`<script>`标签中：
- en: '[PRE26]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Then, change the content within the `script` tag to the following:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，将`script`标签内的内容更改为以下内容：
- en: '[PRE29]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The output of the browser should stay the same:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览器的输出应该保持不变：
- en: '[PRE33]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Next, we will explore how we can combine `setup()` and the render function,
    `h()`, from the Composition API to create a component.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将探讨如何将`setup()`和Composition API中的渲染函数`h()`结合起来创建一个组件。
- en: Creating a component with setup() and h()
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用setup()和h()创建组件
- en: 'In many scenarios where you need to render a static functional component or
    a static component structure based on the context and props received, using `h()`
    and `setup()` can be helpful. The `h()` function syntax is as follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多需要根据接收到的上下文和属性渲染静态功能性组件或静态组件结构的场景中，使用`h()`和`setup()`可能会有所帮助。`h()`函数的语法如下：
- en: '[PRE34]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '`h()` receives the following parameters:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`h()`函数接收以下参数：'
- en: A string representing a DOM element (`'div'`, for instance) or a Vue component.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表示DOM元素（例如`'div'`）或Vue组件的字符串。
- en: The props to pass to the created component node, including native properties
    and attributes, such as `class`, `style`, and so on, and event listeners. This
    parameter is optional.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要传递给创建的组件节点的属性，包括原生属性和属性，例如`class`、`style`等，以及事件监听器。此参数是可选的。
- en: The array of children for the component or object of the slot functions. This
    parameter is also optional.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组件或插槽函数的子元素数组。此参数也是可选的。
- en: 'Instead of returning the object containing a static internal data state and
    using the `template` section, `setup()` will return a function that returns the
    component node created by the `h()` function based on the parameters received.
    In the following example, we render a `div` element containing a `"Hello World"`
    `message` in `blue`:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 与返回包含静态内部数据状态的对象并使用`template`部分不同，`setup()`将返回一个函数，该函数返回由`h()`函数根据接收到的参数创建的组件节点。在以下示例中，我们渲染一个包含蓝色`"Hello
    World"`消息的`div`元素：
- en: '[PRE35]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'And the browser will output as follows:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器将输出如下：
- en: '![Figure 5.1 – Hello World text in blue color](img/B18645_05_01.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![图5.1 – 蓝色字体的“Hello World”文本](img/B18645_05_01.jpg)'
- en: Figure 5.1 – Hello World text in blue color
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.1 – 蓝色字体的“Hello World”文本
- en: In the next exercise, we will practice creating a static component with `setup()`
    and `h()` based on the props received.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个练习中，我们将练习根据接收到的属性使用`setup()`和`h()`创建静态组件。
- en: Exercise 5.02 – creating a dynamic greeting component with the setup() and h()
    functions
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习5.02 – 使用setup()和h()函数创建动态问候组件
- en: This exercise will create a component that renders a pre-defined greeting message
    depending on the props received, using `setup()` and `h()`.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 此练习将创建一个组件，根据接收到的属性渲染预定义的问候消息，使用`setup()`和`h()`。
- en: To access the code file for this exercise, refer to [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter05/Exercise5.02](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter05/Exercise5.02).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问此练习的代码文件，请参阅[https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter05/Exercise5.02](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter05/Exercise5.02)。
- en: 'Follow the given steps to complete this exercise:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤完成此练习：
- en: 'Use the application generated by `npm init vue@3` as a starting point, or within
    the root folder of the code repository, navigate into the `Chapter05/Exercise5.02`
    folder by using the following commands in order:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用由`npm init vue@3`生成的应用程序作为起点，或者在使用以下命令的代码仓库根目录中，导航到`Chapter05/Exercise5.02`文件夹：
- en: '[PRE36]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Open the exercise project in VS Code (by using the `code .` command within the
    project directory) or your preferred IDE.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在VS Code中打开练习项目（在项目目录中使用`code .`命令）或使用你喜欢的IDE。
- en: Create a new file named `Greeting.vue` in the `./``src/components` directory.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`./src/components`目录下创建一个名为`Greeting.vue`的新文件。
- en: 'Start by scaffolding the component with empty `template` and `script` tags:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先使用空的`template`和`script`标签搭建组件：
- en: '[PRE38]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Next, define the acceptable props for `Greeting` using the `props` field, with
    two string props – `greeting` and `who` – as shown in the following code block:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，使用`props`字段定义`Greeting`的可接受属性，包括两个字符串属性`greeting`和`who`，如下所示：
- en: '[PRE44]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'We import the `h()` function from the `vue` package and implement `setup()`
    to return a render function that renders a `div` element that displays `greeting`
    and `who`, as follows:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们从`vue`包中导入`h()`函数，并实现`setup()`以返回一个渲染函数，该函数渲染一个显示`greeting`和`who`的`div`元素，如下所示：
- en: '[PRE47]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Open the `src/App.vue` file and import the `Greeting` component from `./src/components/Greeting.vue`
    into the `script` section:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`src/App.vue`文件，并将`Greeting`组件从`./src/components/Greeting.vue`导入到`script`部分：
- en: '[PRE54]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'We can use `Greeting` in the template:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以在模板中使用`Greeting`：
- en: '[PRE57]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Run the application using the following command:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令运行应用程序：
- en: '[PRE62]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'You will see the following when visiting your app in the browser:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你在浏览器中访问你的应用时，你会看到以下内容：
- en: '[PRE63]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Within `setup()`, we want to check whether the parent passes the values for
    `greeting` or `who` or not:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`setup()`内部，我们想要检查父组件是否传递了`greeting`或`who`的值：
- en: '[PRE64]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Based on the result, we will render a `div` element that displays the full
    message if there are values for both `greeting` and `who`, or a `div` element
    displaying an error message – `"There is not enough information to display"` –
    in `red` otherwise:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据结果，我们将渲染一个`div`元素，如果`greeting`和`who`都有值，则显示完整的信息，否则在红色中显示错误信息 – `"There is
    not enough information to display"`。
- en: '[PRE65]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'In the parent component (`App.vue`), let’s remove `greeting` value:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在父组件（`App.vue`）中，让我们移除`greeting`值：
- en: '[PRE74]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'The browser will now display the following message:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览器现在将显示以下信息：
- en: '![Figure 5.2 – Error message when one of the props does not have value](img/B18645_05_02.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![图5.2 – 当一个prop没有值时的错误信息](img/B18645_05_02.jpg)'
- en: Figure 5.2 – Error message when one of the props does not have value
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.2 – 当一个prop没有值时的错误信息
- en: That’s it. You have now learned how to combine `setup()` and `h()` to compose
    a dynamic component based on its props. Next, we will explore how we can use different
    Composition APIs, such as `ref()`, `reactive()`, and `computed()`, to create a
    reactive data state for our component.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样。你现在已经学会了如何结合`setup()`和`h()`来根据其props组合动态组件。接下来，我们将探讨如何使用不同的Composition API，如`ref()`、`reactive()`和`computed()`，为我们的组件创建响应式数据状态。
- en: Note
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: We will use `<script setup>` from now on for readability and code convenience.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 从现在起，我们将使用`<script setup>`以提高可读性和代码便捷性。
- en: Working with data
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据处理
- en: In the Options API, we use the `data()` method to initialize a component’s local
    state. By default, all the data properties received from `data()` are reactive,
    which can be overkill in many scenarios. Vue has introduced the `ref()` and `reactive()`
    functions, which allow us to decide which local states should be reactive and
    which shouldn’t be.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在Options API中，我们使用`data()`方法来初始化组件的本地状态。默认情况下，从`data()`接收的所有数据属性都是响应式的，这在许多场景中可能是多余的。Vue引入了`ref()`和`reactive()`函数，允许我们决定哪些本地状态应该是响应式的，哪些不应该。
- en: Setting a reactive local state with ref()
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用`ref()`设置响应式本地状态
- en: '`ref()` is a function that accepts a single input parameter as the reactive
    data’s initial value and returns a reference object for the created reactive data
    state. We call this reference object a `ref` object. To start using `ref()`, you
    first need to import it from the `vue` package.'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '`ref()`是一个函数，它接受一个输入参数作为响应式数据的初始值，并返回一个用于创建响应式数据状态的引用对象。我们称这个引用对象为`ref`对象。要开始使用`ref()`，你首先需要从`vue`包中导入它。'
- en: 'For example, we can create a reactive data called `isLightOn`, which accepts
    `false` as its initial value as follows:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以创建一个名为`isLightOn`的响应式数据，其初始值为`false`，如下所示：
- en: '[PRE79]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'In the `template` section, you can access the value of `isLightOn` in the same
    way as before, as shown in the following code block:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在`template`部分，你可以像以前一样访问`isLightOn`的值，如下面的代码块所示：
- en: '[PRE80]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'However, within the `<script setup>` section of the `setup()` method, if you
    want to access the value of `isLightOn`, you need to use `isLightOn.value` instead
    of direct access, like in `template`. In the following example, we will create
    a component’s method, `toggle`, that will output the value of `isLightOn` to the
    console:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在`setup()`方法的`<script setup>`部分中，如果你想访问`isLightOn`的值，你需要使用`isLightOn.value`而不是直接访问，就像在`template`中那样。在下面的示例中，我们将创建一个组件的方法，`toggle`，该方法将`isLightOn`的值输出到控制台：
- en: '[PRE81]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'In the `template` section, let’s add a `button` element that triggers this
    method upon the user’s click:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在`template`部分，让我们添加一个`button`元素，当用户点击时触发此方法：
- en: '[PRE82]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'Upon the button being clicked, the console outputs the value of `isLightOn`,
    which has the initial value of `false`, as seen in the following screenshot:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 当按钮被点击时，控制台输出`isLightOn`的值，其初始值为`false`，如下面的截图所示：
- en: '![Figure 5.3 – Console output of the light status](img/B18645_05_03.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![图5.3 – 当一个prop没有值时的错误信息](img/B18645_05_03.jpg)'
- en: Figure 5.3 – Console output of the light status
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.3 – 灯光状态的控制台输出
- en: 'Note that here if you output `isLightOn` and not `isLightOn.value`, the console
    outputs the `ref` object created by Vue as follows:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在这里，如果你输出`isLightOn`而不是`isLightOn.value`，控制台将输出Vue创建的`ref`对象，如下所示：
- en: '![Figure 5.4 – Console output of the ref object for isLightOn](img/B18645_05_04.jpg)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![图5.4 – `isLightOn`的`ref`对象的控制台输出](img/B18645_05_04.jpg)'
- en: Figure 5.4 – Console output of the ref object for isLightOn
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.4 – `isLightOn`的`ref`对象的控制台输出
- en: '`isLightOn` is reactive and mutable, which means you can set its value directly
    using the `.value` field. We will modify the `toggle()` method to toggle the value
    of `isLightOn` instead. The code will become the following:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '`isLightOn`是响应式和可变的，这意味着你可以直接使用`.value`字段设置其值。我们将修改`toggle()`方法来切换`isLightOn`的值。代码将变为以下内容：'
- en: '[PRE83]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'Now, whenever the user clicks on the `isLightOn` will update its value, and
    Vue will update the component accordingly, as seen in the following screenshot:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，每当用户点击`isLightOn`时，它将更新其值，Vue将相应地更新组件，如图所示：
- en: '![Figure 5.5 – Light status updates to true upon Toggle being clicked](img/B18645_05_05.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![图5.5 – 点击切换后灯光状态更新为true](img/B18645_05_05.jpg)'
- en: Figure 5.5 – Light status updates to true upon Toggle being clicked
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.5 – 点击切换后灯光状态更新为true
- en: '`ref()` is generally sufficient to create a reactive state for any data types,
    including primitive (`boolean`, `number`, `string`, and so on) and object types.
    However, for an object type, using `ref()` means that Vue will make the desired
    data object and its nested properties reactive and mutable. For example, we declare
    a reactive object, `livingRoomLight`, with `ref()` as shown in the following code
    block:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '`ref()`通常足以创建任何数据类型的响应式状态，包括原始类型（`boolean`、`number`、`string`等）和对象类型。然而，对于对象类型，使用`ref()`意味着Vue将使所需的数据对象及其嵌套属性响应式和可变。例如，我们使用`ref()`声明一个响应式对象`livingRoomLight`，如下面的代码块所示：'
- en: '[PRE84]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'Then, we add two methods, one to modify its single property – `status` – and
    the second to replace the whole object with a new one, as shown in the following
    code block:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们添加两个方法，一个用于修改其单个属性`status`，另一个用于用新对象替换整个对象，如下面的代码块所示：
- en: '[PRE85]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'In the `template` section, let’s display the details of `livingRoomLight`,
    as follows:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在`template`部分，让我们显示`livingRoomLight`的详细信息，如下所示：
- en: '[PRE86]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'When a user clicks on `lightRoomLight` now becomes the `Kitchen` light with
    different details, as shown in the following figure:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击`lightRoomLight`时，现在它变成了具有不同细节的`Kitchen`灯，如图所示：
- en: '![Figure 5.6 – Light name changed to Kitchen after clicking on Replace](img/B18645_05_06.jpg)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![图5.6 – 点击替换后灯光名称更改为Kitchen](img/B18645_05_06.jpg)'
- en: Figure 5.6 – Light name changed to Kitchen after clicking on Replace
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.6 – 点击替换后灯光名称更改为Kitchen
- en: Unfortunately, this mechanism of making the object and its nested properties
    reactive can lead to unwanted bugs and potential performance issues, especially
    for reactive objects with a complex hierarchy of nested properties.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，这种使对象及其嵌套属性响应式的机制可能会导致不希望出现的错误和潜在的性能问题，尤其是在具有复杂嵌套属性层次结构的响应式对象中。
- en: In a scenario in which you only want to modify the whole object’s value (replacing
    it with a new object) but not its nested properties, we suggest you use `shallowRef()`.
    In a scenario in which you only need to modify the object’s nested properties
    (such as elements of an array object and each element’s fields), you should use
    `reactive()` instead. We will take a look at the `reactive()` function next.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个场景中，你只想修改整个对象的价值（用新对象替换它），而不修改其嵌套属性，我们建议你使用`shallowRef()`。在一个场景中，你只需要修改对象的嵌套属性（例如数组对象的元素及其字段），你应该使用`reactive()`。我们将在下一节中查看`reactive()`函数。
- en: Setting a reactive local state with reactive()
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用`reactive()`设置响应式局部状态
- en: Like `ref()`, the `reactive()` function returns a reference to a reactive object
    based on the initial value passed to it. Unlike `ref()`, `reactive()` only accepts
    object-type input parameters and returns a reference object whose value can be
    accessed directly without needing a `.``value` field.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 与`ref()`类似，`reactive()`函数返回一个基于传递给它的初始值的响应式对象的引用。与`ref()`不同，`reactive()`只接受对象类型的输入参数，并返回一个可以直接访问其值的引用对象，无需使用`.value`字段。
- en: 'The following example shows how we define a reactive array of `books`, and
    a reactive book object, `newBook`, for the `BookList` component:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例展示了我们如何为`BookList`组件定义一个响应式数组`books`和一个响应式对象`newBook`：
- en: '[PRE87]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'In `template`, we define a `fieldset` element that contains several `input`
    fields, each bound to an area of the `newBook` data using `v-model`, and a `button`
    element, `Add`, as follows:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在`template`中，我们定义一个包含多个`input`字段的`fieldset`元素，每个字段都使用`v-model`绑定到`newBook`数据的一个区域，以及一个`button`元素`Add`，如下所示：
- en: '[PRE88]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'The browser will display the following layout:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器将显示以下布局：
- en: '![Figure 5.7 – Filling in the details of the new book before adding](img/B18645_05_07.jpg)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![图5.7 – 在添加之前填写新书的详细信息](img/B18645_05_07.jpg)'
- en: Figure 5.7 – Filling in the details of the new book before adding
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.7 – 在添加之前填写新书的详细信息
- en: 'We need to implement the `addBook` method, which will add a new book to the
    `books` list based on the information from `newBook` and clear up the properties
    of `newBook`, as in the following code:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要实现 `addBook` 方法，该方法将根据 `newBook` 中的信息将新书添加到 `books` 列表，并清除 `newBook` 的属性，如下所示：
- en: '[PRE89]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: Note that here, we don’t push `newBook` directly to `books` but rather clone
    its properties to the new object using the spread literal, `…`, instead. `reactive()`
    only creates a proxy version of the original object passed to it. Hence, if you
    don’t clone `newBook` before adding it to `books`, any changes made to its properties
    later will also be reflected in the element added to the `books` list.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在这里，我们不是直接将 `newBook` 推送到 `books`，而是使用扩展字面量 `…` 将其属性克隆到新对象中。`reactive()`
    只创建传递给它的原始对象的代理版本。因此，如果您在将其添加到 `books` 列表之前不克隆 `newBook`，则对其属性所做的任何更改都将反映在添加到
    `books` 列表中的元素中。
- en: 'Now, after filling in a new book’s details, open your browser’s developer tools,
    and in the `setup` section, as shown in the following figure:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在填写完新书的详细信息后，打开您的浏览器开发者工具，在 `setup` 部分中，如图所示：
- en: '![Figure 5.8 – The component’s setup section in Vue Devtools](img/B18645_05_08.jpg)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.8 – Vue Devtools 中的组件设置部分](img/B18645_05_08.jpg)'
- en: Figure 5.8 – The component’s setup section in Vue Devtools
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.8 – Vue Devtools 中的组件设置部分
- en: 'All the reactive data created with `reactive()` will have the `Reactive` text
    indicator (for `ref()`, it will be the `Ref` indicator). Once you click on the
    `books` array updated with the new values, while `newBook` is reset to its original
    value in Devtools, as shown in *Figure 5**.8*:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `reactive()` 创建的所有反应性数据都将带有 `Reactive` 文本指示器（对于 `ref()`，它将是 `Ref` 指示器）。一旦您点击更新了新值的
    `books` 数组，而 `newBook` 在 Devtools 中重置到其原始值，如图 *图 5.8* 所示：
- en: '![Figure 5.9 – How the array of books looks after adding a new book](img/B18645_05_09.jpg)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.9 – 添加新书后书籍数组的外观](img/B18645_05_09.jpg)'
- en: Figure 5.9 – How the array of books looks after adding a new book
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.9 – 添加新书后书籍数组的外观
- en: You can also use `shallowReactive()` to limit the reactivity mechanism to apply
    only to the root’s properties and not their descendants. By doing so, you can
    avoid performance issues caused by too many reactive fields within a complex data
    object.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用 `shallowReactive()` 来限制反应机制仅应用于根属性，而不包括其子属性。通过这样做，您可以避免在复杂数据对象中由于太多反应字段而引起的性能问题。
- en: At this point, we have learned how to use `ref()` and `reactive()` to define
    reactive data depending on its type and use cases. Next, we are going to apply
    what we learned to write a reactive component using these two functions.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经学习了如何使用 `ref()` 和 `reactive()` 根据其类型和用例定义反应性数据。接下来，我们将应用所学知识，使用这两个函数编写一个反应性组件。
- en: Exercise 5.03 – binding a component with ref() and reactive()
  id: totrans-209
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 5.03 – 使用 ref() 和 reactive() 绑定组件
- en: In this exercise, you will use `ref()` to define a search box for blogs, and
    `reactive()` to define different reactive blog lists, in which you can favorite
    a blog.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在此练习中，您将使用 `ref()` 定义博客的搜索框，并使用 `reactive()` 定义不同的反应性博客列表，在其中您可以收藏博客。
- en: To access the code for this exercise, refer to [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter05/Exercise5.03](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter05/Exercise5.03).
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问此练习的代码，请参阅 [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter05/Exercise5.03](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter05/Exercise5.03)。
- en: 'We are going to implement a component that receives the user’s first name and
    last name and accepts multi-lingual input, and displays the user’s full name and
    the number of languages received accordingly by performing the following steps:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将实现一个组件，该组件接收用户的姓氏和名字，并接受多语言输入，并根据接收到的语言数量显示用户的完整姓名，以下是执行以下步骤：
- en: 'Use the application generated by `npm init vue@3` as a starting point, or within
    the root folder of the code repository, navigate into the `Chapter05/Exercise5.03`
    folder by using the following commands in order:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用由 `npm init vue@3` 生成的应用程序作为起点，或者在使用以下命令进入代码仓库的根目录中的 `Chapter05/Exercise5.03`
    文件夹：
- en: '[PRE90]'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '[PRE91]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE91]'
- en: Open the exercise project in VS Code (by using the `code .` command within the
    project directory), or your preferred IDE.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 VS Code 中打开练习项目（在项目目录中使用 `code .` 命令），或使用您首选的 IDE。
- en: Let’s create a new Vue component called `BlogGallery` by adding the `BlogGallery.vue`
    file to the `./``src/components/` folder.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在`./src/components/`文件夹中添加一个名为`BlogGallery.vue`的新Vue组件文件。
- en: 'Open `BlogGallery.vue` and let’s create the code block structure for the Vue
    component as follows:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`BlogGallery.vue`，让我们为Vue组件创建以下代码块结构：
- en: '[PRE92]'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '[PRE93]'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '[PRE94]'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[PRE95]'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE95]'
- en: 'Within the `<script setup>` section, we define our reactive data – `searchTerm`
    – for the search input with an empty string as its initial value using `ref()`:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`<script setup>`部分中，我们使用`ref()`定义我们的响应式数据`searchTerm`，用于搜索输入，其初始值为空字符串：
- en: '[PRE96]'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '[PRE97]'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE97]'
- en: 'We will define our reactive blog list – `blogs` – with each item containing
    `title`, `description`, `author`, and `isFavorite` fields as follows:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将定义我们的响应式博客列表`blogs`，其中每个项目包含`title`、`description`、`author`和`isFavorite`字段，如下所示：
- en: '[PRE98]'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '[PRE99]'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '[PRE100]'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '[PRE101]'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '[PRE102]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '[PRE103]'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '[PRE104]'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '[PRE105]'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '[PRE106]'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE106]'
- en: '[PRE107]'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '[PRE108]'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[PRE109]'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '[PRE110]'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '[PRE111]'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '[PRE112]'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '[PRE113]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '[PRE114]'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '[PRE115]'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '[PRE116]'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE116]'
- en: '[PRE117]'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '[PRE118]'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '[PRE119]'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE119]'
- en: '[PRE120]'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE120]'
- en: '[PRE121]'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '[PRE122]'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '[PRE123]'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE123]'
- en: '[PRE124]'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '[PRE125]'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '[PRE126]'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE126]'
- en: '[PRE127]'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE127]'
- en: '[PRE128]'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE128]'
- en: 'In the `<template>` section, we will bind `searchTerm` to an input field with
    a `placeholder` element of `"Search by blog''s title"`, and a `label` element
    of `What are you searching for?`, as shown in the following code block:'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`<template>`部分，我们将`searchTerm`绑定到一个带有`placeholder`元素`"Search by blog's title"`和`label`元素`What
    are you searching for?`的输入字段，如下面的代码块所示：
- en: '[PRE129]'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE129]'
- en: '[PRE130]'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE130]'
- en: '[PRE131]'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE131]'
- en: '[PRE132]'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE132]'
- en: '[PRE133]'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE133]'
- en: '[PRE134]'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE134]'
- en: '[PRE135]'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE135]'
- en: '[PRE136]'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE136]'
- en: 'Then, we add a `<ul>` element, use `v-for` to iterate through `blogs`, and
    render a list of `<li>` elements. Each `<li>` element contains `<article>`, in
    which there is `<h3>` for the title, `<h4>` for the author’s name, `<p>` for description,
    and a `<button>` element for adding the blog to your favorites:'
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们添加一个`<ul>`元素，使用`v-for`遍历`blogs`，并渲染一个`<li>`元素列表。每个`<li>`元素包含`<article>`，其中包含标题的`<h3>`，作者名称的`<h4>`，描述的`<p>`，以及添加博客到收藏的`<button>`元素：
- en: '[PRE137]'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE137]'
- en: '[PRE138]'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE138]'
- en: '[PRE139]'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE139]'
- en: '[PRE140]'
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE140]'
- en: '[PRE141]'
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE141]'
- en: '[PRE142]'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE142]'
- en: '[PRE143]'
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE143]'
- en: '[PRE144]'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE144]'
- en: '[PRE145]'
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE145]'
- en: '[PRE146]'
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE146]'
- en: 'Navigate back to the `<script setup>` section, where we will add the implementation
    for a `toggleFavorite()` method, which receives `index` and toggles the `blogs[index].isFavorite`
    value:'
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到`<script setup>`部分，我们将添加`toggleFavorite()`方法的实现，该方法接收`index`并切换`blogs[index].isFavorite`的值：
- en: '[PRE147]'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE147]'
- en: '[PRE148]'
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE148]'
- en: '[PRE149]'
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE149]'
- en: 'Go back to the `<template>` section. We will bind the `toggleFavorite()` method
    to the `button` element created and change its name according to the status of
    `isFavorite`:'
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到`<template>`部分。我们将把`toggleFavorite()`方法绑定到创建的`button`元素上，并根据`isFavorite`的状态更改其名称：
- en: '[PRE150]'
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE150]'
- en: '[PRE151]'
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE151]'
- en: '[PRE152]'
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE152]'
- en: '[PRE153]'
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE153]'
- en: '[PRE154]'
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE154]'
- en: '[PRE155]'
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE155]'
- en: 'We need to filter the blogs according to `searchTerm`, so let’s add another
    method to return a sorted list – `getFilteredBlogs()` – which will produce a filtered
    array of blogs according to the blog titles, as follows:'
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要根据`searchTerm`过滤博客，因此让我们添加另一个方法来返回一个排序后的列表——`getFilteredBlogs()`——它将根据博客标题生成一个过滤后的博客数组，如下所示：
- en: '[PRE156]'
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE156]'
- en: '[PRE157]'
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE157]'
- en: '[PRE158]'
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE158]'
- en: '[PRE159]'
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE159]'
- en: '[PRE160]'
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE160]'
- en: '[PRE161]'
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE161]'
- en: '[PRE162]'
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE162]'
- en: 'Then, in the `template` section, replace `blogs` in the `v-for` iteration with
    `getFilteredBlogs()`, as seen in the following code block:'
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在`template`部分，将`v-for`迭代中的`blogs`替换为`getFilteredBlogs()`，如下面的代码块所示：
- en: '[PRE163]'
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE163]'
- en: 'We need to add some basic CSS styling to make our component prettier, as follows:'
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要添加一些基本的CSS样式来使我们的组件更美观，如下所示：
- en: '[PRE164]'
  id: totrans-300
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE164]'
- en: '[PRE165]'
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE165]'
- en: '[PRE166]'
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE166]'
- en: '[PRE167]'
  id: totrans-303
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE167]'
- en: '[PRE168]'
  id: totrans-304
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE168]'
- en: '[PRE169]'
  id: totrans-305
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE169]'
- en: '[PRE170]'
  id: totrans-306
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE170]'
- en: '[PRE171]'
  id: totrans-307
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE171]'
- en: '[PRE172]'
  id: totrans-308
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE172]'
- en: '[PRE173]'
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE173]'
- en: '[PRE174]'
  id: totrans-310
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE174]'
- en: '[PRE175]'
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE175]'
- en: '[PRE176]'
  id: totrans-312
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE176]'
- en: '[PRE177]'
  id: totrans-313
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE177]'
- en: '[PRE178]'
  id: totrans-314
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE178]'
- en: '[PRE179]'
  id: totrans-315
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE179]'
- en: '[PRE180]'
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE180]'
- en: 'Now, in `App.vue`, import the `BlogGallery` component into `<``script setup>`:'
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在`App.vue`中，将`BlogGallery`组件导入到`<script setup>`中：
- en: '[PRE181]'
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE181]'
- en: '[PRE182]'
  id: totrans-319
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE182]'
- en: '[PRE183]'
  id: totrans-320
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE183]'
- en: 'Render `BlogGallery` in the `template` section:'
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`template`部分渲染`BlogGallery`：
- en: '[PRE184]'
  id: totrans-322
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE184]'
- en: '[PRE185]'
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE185]'
- en: '[PRE186]'
  id: totrans-324
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE186]'
- en: 'Finally, run the application using the following command:'
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，使用以下命令运行应用程序：
- en: '[PRE187]'
  id: totrans-326
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE187]'
- en: 'Go to the browser. You will see the list displayed and a search box with an
    empty value, as in the following screenshot:'
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开浏览器。你会看到显示的列表和一个空值的搜索框，如下面的截图所示：
- en: '![Figure 5.10 – How BlogGallery looks in the browser](img/B18645_05_10.jpg)'
  id: totrans-328
  prefs: []
  type: TYPE_IMG
  zh: '![图5.10 – BlogGallery在浏览器中的外观](img/B18645_05_10.jpg)'
- en: Figure 5.10 – How BlogGallery looks in the browser
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.10 – BlogGallery在浏览器中的外观
- en: 'When typing in a search term, the application will display the filtered list
    accordingly, as shown in the following screenshot:'
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当输入搜索词时，应用程序将相应地显示过滤后的列表，如下面的截图所示：
- en: '![Figure 5.11 – Only filtered blogs are displayed according to the user’s input](img/B18645_05_11.jpg)'
  id: totrans-331
  prefs: []
  type: TYPE_IMG
  zh: '![图5.11 – 根据用户输入仅显示过滤后的博客](img/B18645_05_11.jpg)'
- en: Figure 5.11 – Only filtered blogs are displayed according to the user’s input
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.11 – 根据用户输入仅显示过滤后的博客
- en: With the preceding exercise, you have learned how to define reactive data for
    a component using `ref()` and `reactive()`.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 通过前面的练习，你已经学会了如何使用`ref()`和`reactive()`为组件定义响应式数据。
- en: In theory, you can use `ref()` and `reactive()` together to create new reactive
    data from other reactive data. However, we strongly recommend not doing so due
    to the performance complications of the wrapping/unwrapping reactivity mechanism
    in Vue. For this kind of scenario, you should use the `computed()` function, which
    we will explore next.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 理论上，你可以使用 `ref()` 和 `reactive()` 一起从其他响应式数据创建新的响应式数据。然而，我们强烈建议不要这样做，因为 Vue 中包装/解包响应式机制的性能问题。对于这种场景，你应该使用
    `computed()` 函数，我们将在下一节中探讨。
- en: Computing a reactive state from another local state with computed()
  id: totrans-335
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 computed() 从另一个本地状态计算响应式状态
- en: 'Like `computed()` in the Options API, `computed()` is for creating new reactive
    data based on other reactive data for a component. It accepts a function that
    returns the reactive data value as its first parameter. It will return a read-only
    and cached reference object:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Options API 中的 `computed()` 类似，`computed()` 是用于为组件创建基于其他响应式数据的新响应式数据。它接受一个函数作为其第一个参数，该函数返回响应式数据值。它将返回一个只读且缓存的引用对象：
- en: '[PRE188]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE188]'
- en: 'Unlike reference objects returned from `reactive()` and `ref()`, we can’t directly
    reassign their value. In the following example, we will compute a filtered version
    of a given `books` array using `computed()`, according to the matching term, `vue`:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `reactive()` 和 `ref()` 返回的引用对象不同，我们无法直接重新分配它们的值。在以下示例中，我们将使用 `computed()`
    计算给定 `books` 数组的过滤版本，根据匹配项 `vue`：
- en: '[PRE189]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE189]'
- en: 'And in `template`, we will display `filteredBooks` using the following code:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `template` 中，我们将使用以下代码显示 `filteredBooks`：
- en: '[PRE190]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE190]'
- en: 'In the browser, you will see only three books displayed as shown in the following
    figure:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中，你将只看到以下图中显示的三本书：
- en: '![Figure 5.12 – List of books filtered by the vue term](img/B18645_05_12.jpg)'
  id: totrans-343
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.12 – 根据 vue 术语过滤的书籍列表](img/B18645_05_12.jpg)'
- en: Figure 5.12 – List of books filtered by the vue term
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.12 – 根据 vue 术语过滤的书籍列表
- en: 'Whenever there is any change to the `books` list or the search term used for
    filtering, Vue automatically updates and caches the value calculated for `filteredBooks`
    for display accordingly. In the `filteredBooks` displayed as part of the `setup`
    section, with the `Computed` text indicator as shown in *Figure 5**.12*:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 无论何时 `books` 列表或用于过滤的搜索词有任何变化，Vue 都会自动更新并缓存计算出的 `filteredBooks` 值以相应地显示。在 `filteredBooks`
    显示为 `setup` 部分的一部分，如 *图 5.12* 中所示，带有 `Computed` 文本指示器：
- en: '![Figure 5.13 – How filteredBooks looks in the Vue tab](img/B18645_05_13.png)'
  id: totrans-346
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.13 – Vue 选项卡中 filteredBooks 的外观](img/B18645_05_13.png)'
- en: Figure 5.13 – How filteredBooks looks in the Vue tab
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.13 – Vue 选项卡中 filteredBooks 的外观
- en: Generally, `computed()` works in the same way as the `compute` properties in
    the Options API ([*Chapter 2*](B18645_02.xhtml#_idTextAnchor074), *Working with
    Data*). Computed data is a valuable Vue feature that allows developers to create
    reusable and readable code. You can also make the computed data writable by passing
    an object with a setter and getter to `computed()` instead of a function. However,
    we do not recommend doing so as general good Vue practice.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，`computed()` 的工作方式与 Options API 中的 `compute` 属性相同 ([*第 2 章*](B18645_02.xhtml#_idTextAnchor074)，*处理数据*)。计算数据是
    Vue 的一个有价值的功能，允许开发者创建可重用和可读的代码。你还可以通过将具有设置器和获取器的对象传递给 `computed()` 而不是函数来使计算数据可写。然而，我们不建议这样做，因为这不符合一般的
    Vue 实践。
- en: Next, we will practice implementing complex computed data for a Vue component
    using `computed()`.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将练习使用 `computed()` 为 Vue 组件实现复杂计算数据。
- en: Exercise 5.04 – implementing computed data with computed()
  id: totrans-350
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 5.04 – 使用 computed() 实现计算数据
- en: In this exercise, you will use `computed()` to define the complex reactive data
    based on the existing one.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 在此练习中，你将使用 `computed()` 定义基于现有数据的复杂响应式数据。
- en: To access the code for this exercise, refer to [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter05/Exercise5.04](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter05/Exercise5.04).
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问此练习的代码，请参阅 [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter05/Exercise5.04](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter05/Exercise5.04)。
- en: 'We are going to implement a component that receives the user’s first name and
    last name and accepts multi-lingual input and displays the user’s full name and
    the number of languages received accordingly by performing the following steps:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将实现一个组件，该组件接收用户的姓氏和名字，并接受多语言输入，通过执行以下步骤相应地显示用户的完整姓名和接收到的语言数量：
- en: 'Use the application generated by `npm init vue@3` as a starting point, or within
    the root folder of the code repository, navigate into the `Chapter05/Exercise5.04`
    folder by using the following commands in order:'
  id: totrans-354
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE191]'
  id: totrans-355
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE191]'
- en: '[PRE192]'
  id: totrans-356
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE192]'
- en: Open the exercise project in VS Code (by using the `code .` command within the
    project directory) or your preferred IDE.
  id: totrans-357
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let’s create a new Vue component called `UserInput` by adding the `UserInput.vue`
    file to the `./``src/components/` folder.
  id: totrans-358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open `UserInput.vue` and let create the code block structure for the Vue component,
    as follows:'
  id: totrans-359
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE193]'
  id: totrans-360
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE193]'
- en: '[PRE194]'
  id: totrans-361
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE194]'
- en: '[PRE195]'
  id: totrans-362
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE195]'
- en: '[PRE196]'
  id: totrans-363
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE196]'
- en: '[PRE197]'
  id: totrans-364
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE197]'
- en: '[PRE198]'
  id: totrans-365
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE198]'
- en: 'In `<template>`, create an `input` field for the first name, and use `v-model`
    to bind `firstName` to this field:'
  id: totrans-366
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE199]'
  id: totrans-367
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE199]'
- en: 'Create a second input field for the last name, and use `v-model` to bind the
    `lastName` data prop to this field:'
  id: totrans-368
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE200]'
  id: totrans-369
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE200]'
- en: 'Create another input field for languages, only we will bind the *Enter keyup*
    event to a method called `addToLanguageList` this time, as shown in the following
    code block:'
  id: totrans-370
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE201]'
  id: totrans-371
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE201]'
- en: '[PRE202]'
  id: totrans-372
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE202]'
- en: '[PRE203]'
  id: totrans-373
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE203]'
- en: 'In `<script setup>`, define `lastName`, `firstName`, and `languages` as reactive
    using `ref()` and `reactive()`, as follows:'
  id: totrans-374
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE204]'
  id: totrans-375
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE204]'
- en: '[PRE205]'
  id: totrans-376
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE205]'
- en: '[PRE206]'
  id: totrans-377
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE206]'
- en: '[PRE207]'
  id: totrans-378
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE207]'
- en: '[PRE208]'
  id: totrans-379
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE208]'
- en: '[PRE209]'
  id: totrans-380
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE209]'
- en: 'Then, declare the `addToLanguageList` method, which receives an event and adds
    the event target’s value to the language list if it is not empty:'
  id: totrans-381
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE210]'
  id: totrans-382
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE210]'
- en: '[PRE211]'
  id: totrans-383
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE211]'
- en: '[PRE212]'
  id: totrans-384
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE212]'
- en: '[PRE213]'
  id: totrans-385
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE213]'
- en: '[PRE214]'
  id: totrans-386
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE214]'
- en: 'Import `computed()` from the `vue` package:'
  id: totrans-387
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE215]'
  id: totrans-388
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE215]'
- en: 'Create a computed data variable called `fullName`:'
  id: totrans-389
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE216]'
  id: totrans-390
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE216]'
- en: '[PRE217]'
  id: totrans-391
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE217]'
- en: '[PRE218]'
  id: totrans-392
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE218]'
- en: 'Then, create another computed variable called `numberOfLanguages`, as follows:'
  id: totrans-393
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE219]'
  id: totrans-394
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE219]'
- en: 'Underneath your `input` fields, output the computed data using the `h3` tag:'
  id: totrans-395
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE220]'
  id: totrans-396
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE220]'
- en: 'Add another `<p>` element, which will display the number of languages next
    to the list of languages received, as shown in the following code block:'
  id: totrans-397
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE221]'
  id: totrans-398
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE221]'
- en: '[PRE222]'
  id: totrans-399
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE222]'
- en: '[PRE223]'
  id: totrans-400
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE223]'
- en: '[PRE224]'
  id: totrans-401
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE224]'
- en: 'We also add some basic scoped CSS styles to make the component prettier:'
  id: totrans-402
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE225]'
  id: totrans-403
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE225]'
- en: '[PRE226]'
  id: totrans-404
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE226]'
- en: '[PRE227]'
  id: totrans-405
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE227]'
- en: '[PRE228]'
  id: totrans-406
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE228]'
- en: '[PRE229]'
  id: totrans-407
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE229]'
- en: '[PRE230]'
  id: totrans-408
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE230]'
- en: '[PRE231]'
  id: totrans-409
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE231]'
- en: '[PRE232]'
  id: totrans-410
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE232]'
- en: '[PRE233]'
  id: totrans-411
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE233]'
- en: '[PRE234]'
  id: totrans-412
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE234]'
- en: '[PRE235]'
  id: totrans-413
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE235]'
- en: '[PRE236]'
  id: totrans-414
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE236]'
- en: '[PRE237]'
  id: totrans-415
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE237]'
- en: '[PRE238]'
  id: totrans-416
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE238]'
- en: 'Finally, run the application using the following command:'
  id: totrans-417
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE239]'
  id: totrans-418
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE239]'
- en: 'Upon visiting `http://localhost:3000` in the browser and keying in `Maya` for
    the first name, `Shavin` for the last name, and adding several languages (JavaScript,
    C++, and so on), the page will generate the following output:'
  id: totrans-419
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.14 – Output of the computed data will show the full name and list
    of languages](img/B18645_05_14.jpg)'
  id: totrans-420
  prefs: []
  type: TYPE_IMG
- en: Figure 5.14 – Output of the computed data will show the full name and list of
    languages
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
- en: This exercise demonstrates how we can use `computed()` to define combined reactive
    data properties such as the first name and last name into a single output variable
    with `fullName` and calculate the number of languages reactively, which can be
    reused within the component.
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will learn about using the `watch()` function from the Composition
    API to define our watchers.
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
- en: Using watchers with watch()
  id: totrans-424
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In [*Chapter 2*](B18645_02.xhtml#_idTextAnchor074), *Working with Data*, we
    learned about watchers and how to enable watchers on data properties with the
    `watch` property from the Options API. The Composition API introduces the `watch()`
    function with the same context and slightly different syntax, as shown in the
    following code block:'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE240]'
  id: totrans-426
  prefs: []
  type: TYPE_PRE
  zh: '[PRE240]'
- en: '`watch()` accepts three parameters, including the following:'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
- en: '`source` as a single target data object or getter function (which returns the
    data’s value) to watch, or an array of targets.'
  id: totrans-428
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`handler` is the function that Vue executes whenever `source` changes. The
    handler function receives `newValue` and `oldValue` as its source’s next value
    and previous value respectively. It also accepts the third argument as its side-effect
    cleanup method. Vue will trigger this clean-up function before the next handler
    is invoked – if any are.'
  id: totrans-429
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`options` are the additional configurations for the watcher, including the
    following:'
  id: totrans-430
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Two `boolean` flags: `deep` (whether Vue should watch over the nested properties
    of the source) and `immediate` (whether to invoke the handler immediately after
    the component is mounted).'
  id: totrans-431
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`flush` as the execution order for the handler (`pre`, `post`, or `sync`).
    By default, Vue executes the handler in the `pre` order (before updating).'
  id: totrans-432
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Two debugging callbacks, `onTrack` and `onTrigger`, for development mode.
  id: totrans-433
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following example demonstrates how we can add a watcher manually to `searchTerm`:'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE241]'
  id: totrans-435
  prefs: []
  type: TYPE_PRE
  zh: '[PRE241]'
- en: 'Vue will passively observe the changes in `searchTerm` and invoke the handler
    of `searchTermWatcher` accordingly. In the browser’s console log, you will see
    the following records when changing the value of `searchTerm` in the input field:'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.15 – The output logs whenever searchTerm changes in value](img/B18645_05_15.jpg)'
  id: totrans-437
  prefs: []
  type: TYPE_IMG
- en: Figure 5.15 – The output logs whenever searchTerm changes in value
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
- en: 'Unlike the `watch` property from the Options API, the `watch()` method returns
    a stopper function to stop the watcher whenever you no longer need to observe
    the target data. Also, in a scenario in which you explicitly wish to watch a nested
    data property, you can define the target source as a getter function that returns
    that specific data property. For example, if you wanted to watch the `description`
    property of a `book` data object, you would need the following code using the
    `watch` property from the Options API:'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE242]'
  id: totrans-440
  prefs: []
  type: TYPE_PRE
  zh: '[PRE242]'
- en: 'With `watch()`, you only need to set a getter that returns `book.description`
    instead, as shown in the following code block:'
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE243]'
  id: totrans-442
  prefs: []
  type: TYPE_PRE
  zh: '[PRE243]'
- en: By specifying the exact target data that you want to observe, Vue will not trigger
    the watcher’s handler on the whole data object, avoiding undesired performance
    overhead.
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s practice using a watcher in the next exercise.
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 5.05 – using watchers to set new values
  id: totrans-445
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this exercise, you will use watcher arguments to watch for changes to data
    properties, and then use this watcher to set variables via a method.
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
- en: You can find the complete code for this exercise at [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter05/Exercise5.05](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter05/Exercise5.05).
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
- en: 'We create a Vue component that displays the shop watcher’s price before and
    after the discount, with an option to update the discount price, by following
    the given instructions:'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the application generated by `npm init vue@3` as a starting point, or within
    the root folder of the code repository, navigate into the `Chapter05/Exercise5.05`
    folder by using the following commands in order:'
  id: totrans-449
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE244]'
  id: totrans-450
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE244]'
- en: '[PRE245]'
  id: totrans-451
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE245]'
- en: Open the exercise project in VS Code (by using the `code .` command within the
    project directory), or your preferred IDE.
  id: totrans-452
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let’s create a new Vue component called `PizzaItem` by adding the `PizzaItem.vue`
    file to the `./``src/components/` folder.
  id: totrans-453
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open `PizzaItem.vue` and let’s create the code block structure for the Vue
    component, as follows:'
  id: totrans-454
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE246]'
  id: totrans-455
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE246]'
- en: '[PRE247]'
  id: totrans-456
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE247]'
- en: '[PRE248]'
  id: totrans-457
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE248]'
- en: '[PRE249]'
  id: totrans-458
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE249]'
- en: '[PRE250]'
  id: totrans-459
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE250]'
- en: '[PRE251]'
  id: totrans-460
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE251]'
- en: 'Set up the document by adding `discount`, `pizza`, and `newPrice` objects:'
  id: totrans-461
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE252]'
  id: totrans-462
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE252]'
- en: '[PRE253]'
  id: totrans-463
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE253]'
- en: '[PRE254]'
  id: totrans-464
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE254]'
- en: '[PRE255]'
  id: totrans-465
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE255]'
- en: '[PRE256]'
  id: totrans-466
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE256]'
- en: '[PRE257]'
  id: totrans-467
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE257]'
- en: 'We want to listen for changes to the `discount` property by using the `watch()`
    function imported from the `vue` package. Upon `discount` changing, we manually
    recalculate the value for `newPrice` as follows:'
  id: totrans-468
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE258]'
  id: totrans-469
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE258]'
- en: '[PRE259]'
  id: totrans-470
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE259]'
- en: '[PRE260]'
  id: totrans-471
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE260]'
- en: '[PRE261]'
  id: totrans-472
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE261]'
- en: '[PRE262]'
  id: totrans-473
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE262]'
- en: '[PRE263]'
  id: totrans-474
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE263]'
- en: '[PRE264]'
  id: totrans-475
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE264]'
- en: '[PRE265]'
  id: totrans-476
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE265]'
- en: '[PRE266]'
  id: totrans-477
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE266]'
- en: '[PRE267]'
  id: totrans-478
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE267]'
- en: Notice that here, we set `immediate` to `true` so that Vue triggers this handler
    immediately after mounting the component and updates `newPrice` with the correct
    value.
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let’s add a component method called `updateDiscount`. Inside the method,
    set the `oldDiscount` data prop to `this.discount +` `5`:'
  id: totrans-480
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE268]'
  id: totrans-481
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE268]'
- en: '[PRE269]'
  id: totrans-482
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE269]'
- en: '[PRE270]'
  id: totrans-483
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE270]'
- en: 'In the `template` section, we will display `pizza.name`, `discount`, the old
    price, and the new price for the pizza after `discount` has been applied, as follows:'
  id: totrans-484
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE271]'
  id: totrans-485
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE271]'
- en: '[PRE272]'
  id: totrans-486
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE272]'
- en: '[PRE273]'
  id: totrans-487
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE273]'
- en: '[PRE274]'
  id: totrans-488
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE274]'
- en: '[PRE275]'
  id: totrans-489
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE275]'
- en: '[PRE276]'
  id: totrans-490
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE276]'
- en: '[PRE277]'
  id: totrans-491
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE277]'
- en: '[PRE278]'
  id: totrans-492
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE278]'
- en: '[PRE279]'
  id: totrans-493
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE279]'
- en: '[PRE280]'
  id: totrans-494
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE280]'
- en: 'Then, bind the `updateDiscount` method to a `button` element using `@click`:'
  id: totrans-495
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE281]'
  id: totrans-496
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE281]'
- en: '[PRE282]'
  id: totrans-497
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE282]'
- en: '[PRE283]'
  id: totrans-498
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE283]'
- en: Whenever a user clicks on the preceding button, Vue will trigger `updateDiscount()`
    to increase the `discount` value, hence invoking the handler to update the `newPrice`
    value accordingly.
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s add some CSS styling to make it pretty:'
  id: totrans-500
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE284]'
  id: totrans-501
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE284]'
- en: '[PRE285]'
  id: totrans-502
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE285]'
- en: '[PRE286]'
  id: totrans-503
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE286]'
- en: '[PRE287]'
  id: totrans-504
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE287]'
- en: '[PRE288]'
  id: totrans-505
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE288]'
- en: '[PRE289]'
  id: totrans-506
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE289]'
- en: '[PRE290]'
  id: totrans-507
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE290]'
- en: '[PRE291]'
  id: totrans-508
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE291]'
- en: '[PRE292]'
  id: totrans-509
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE292]'
- en: '[PRE293]'
  id: totrans-510
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE293]'
- en: '[PRE294]'
  id: totrans-511
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE294]'
- en: '[PRE295]'
  id: totrans-512
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE295]'
- en: '[PRE296]'
  id: totrans-513
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE296]'
- en: '[PRE297]'
  id: totrans-514
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE297]'
- en: '[PRE298]'
  id: totrans-515
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE298]'
- en: '[PRE299]'
  id: totrans-516
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE299]'
- en: '[PRE300]'
  id: totrans-517
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE300]'
- en: '[PRE301]'
  id: totrans-518
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE301]'
- en: '[PRE302]'
  id: totrans-519
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE302]'
- en: '[PRE303]'
  id: totrans-520
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE303]'
- en: '[PRE304]'
  id: totrans-521
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE304]'
- en: '[PRE305]'
  id: totrans-522
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE305]'
- en: '[PRE306]'
  id: totrans-523
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE306]'
- en: '[PRE307]'
  id: totrans-524
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE307]'
- en: '[PRE308]'
  id: totrans-525
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE308]'
- en: '[PRE309]'
  id: totrans-526
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE309]'
- en: 'In `App.vue`, import the component into `<setup script>` and render it in `template`
    as follows:'
  id: totrans-527
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE310]'
  id: totrans-528
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE310]'
- en: '[PRE311]'
  id: totrans-529
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE311]'
- en: '[PRE312]'
  id: totrans-530
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE312]'
- en: '[PRE313]'
  id: totrans-531
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE313]'
- en: '[PRE314]'
  id: totrans-532
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE314]'
- en: '[PRE315]'
  id: totrans-533
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE315]'
- en: 'Finally, run the application using the following command:'
  id: totrans-534
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE316]'
  id: totrans-535
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE316]'
- en: 'Upon visiting `http://localhost:3000` in the browser, the output of the preceding
    command will be as follows:'
  id: totrans-536
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.16 – An example output of the pizza sales](img/B18645_05_16.jpg)'
  id: totrans-537
  prefs: []
  type: TYPE_IMG
- en: Figure 5.16 – An example output of the pizza sales
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s add a watcher explicitly for the `pizza.price` field, and perform
    the same recalculation of `newPrice`, as shown in the following code block:'
  id: totrans-539
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE317]'
  id: totrans-540
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE317]'
- en: '[PRE318]'
  id: totrans-541
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE318]'
- en: '[PRE319]'
  id: totrans-542
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE319]'
- en: '[PRE320]'
  id: totrans-543
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE320]'
- en: '[PRE321]'
  id: totrans-544
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE321]'
- en: '[PRE322]'
  id: totrans-545
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE322]'
- en: '[PRE323]'
  id: totrans-546
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE323]'
- en: 'We also add another method called `increasePrice()` to increase the pizza’s
    price whenever triggered:'
  id: totrans-547
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE324]'
  id: totrans-548
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE324]'
- en: '[PRE325]'
  id: totrans-549
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE325]'
- en: '[PRE326]'
  id: totrans-550
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE326]'
- en: 'In the `template` section, we add another button to allow users to click to
    increase the pizza’s price, hence updating the new discounted price accordingly:'
  id: totrans-551
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE327]'
  id: totrans-552
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE327]'
- en: '[PRE328]'
  id: totrans-553
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE328]'
- en: '[PRE329]'
  id: totrans-554
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE329]'
- en: 'In the `style` section, we also add a different `background` color for the
    preceding button:'
  id: totrans-555
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE330]'
  id: totrans-556
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE330]'
- en: '[PRE331]'
  id: totrans-557
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE331]'
- en: '[PRE332]'
  id: totrans-558
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE332]'
- en: 'Navigate back to the main browser’s screen, and now you will see the updated
    layout with an additional button, as shown in the following screenshot:'
  id: totrans-559
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.17 – Pizza sales with the option to modify the price](img/B18645_05_17.jpg)'
  id: totrans-560
  prefs: []
  type: TYPE_IMG
- en: Figure 5.17 – Pizza sales with the option to modify the price
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
- en: 'Upon clicking on the **Increase the price!** button, you will see the price
    and the discounted price change, as in the following screenshot:'
  id: totrans-562
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.18 – The prices changed after clicking on the Increase the price!
    button](img/B18645_05_18.jpg)'
  id: totrans-563
  prefs: []
  type: TYPE_IMG
- en: Figure 5.18 – The prices changed after clicking on the Increase the price! button
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, we explored how we can use `watch()` within `<script setup>`
    to dynamically observe and manipulate data when changes are applied.
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
- en: The next section will explore how we can use the lifecycle functions from the
    Composition API to set up the lifecycle hooks.
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
- en: Understanding composable lifecycle functions
  id: totrans-567
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [*Chapter 1*](B18645_01.xhtml#_idTextAnchor015), *Starting* *Your First Vue
    Project*, we learned about the component’s lifecycle and its available hooks in
    Vue’s Options API. In the Composition API, these lifecycle hooks are now available
    as standalone functions and need to be imported from the `vue` package before
    use.
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
- en: Generally, the lifecycle functions in the Composition API are similar to the
    ones from the Options API, with a prefix of `on`. For example, `beforeMount()`
    in the Options API is `onBeforeMount()` in the Composition API, and so on.
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the list of available lifecycle functions from the Composition
    API, ready to use within the `setup()` method or `<``script setup>`:'
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
- en: '`onBeforeMount()`: Before the first render of the component'
  id: totrans-571
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onMounted()`: After rendering and mounting the component to the DOM'
  id: totrans-572
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onBeforeUpdate()`: After starting the component’s update process, but before
    the actual rendering of the updated component'
  id: totrans-573
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onUpdated()`: After rendering the updated component'
  id: totrans-574
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onBeforeMount()`: Before the process of unmounting the component starts'
  id: totrans-575
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onUnmounted()`: After the component’s instance has been destroyed'
  id: totrans-576
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since we use `setup()` or `<script setup>` to define the component’s data and
    internal logic in combination with other Composition API, there is no need for
    equivalent versions of `created()` and `beforeCreate()` from the Options API.
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
- en: All the lifecycle methods from the Composition API receive a callback function
    as their arguments. Vue will invoke this callback function whenever applied.
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
- en: Let’s do an exercise to learn how to use these lifecycle methods in your Vue
    component.
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 5.06 – using the lifecycle functions to control the data flow
  id: totrans-580
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this exercise, we will learn how and when to use Vue’s lifecycle hooks, and
    when they are triggered by using JavaScript alerts. By the end of the exercise,
    we will understand and be able to use multiple lifecycle functions from the Composition
    API.
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
- en: To access the code file for this exercise, refer to [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter05/Exercise5.06](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter05/Exercise5.06).
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
- en: 'We will build a list of different elements, demonstrating how to add different
    quantities to a cart. Then, we will display the updated cart’s total value in
    a currency format by performing the following:'
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the application generated by `npm init vue@3` as a starting point, or within
    the root folder of the code repository, navigate into the `Chapter05/Exercise5.06`
    folder by using the following commands in order:'
  id: totrans-584
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE333]'
  id: totrans-585
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE333]'
- en: '[PRE334]'
  id: totrans-586
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE334]'
- en: 'Run the application using the following command:'
  id: totrans-587
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE335]'
  id: totrans-588
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE335]'
- en: Open the exercise project in VS Code (by using the `code .` command within the
    project directory) or your preferred IDE.
  id: totrans-589
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new Vue component file named `Exercise5-06.vue` under the `src/components`
    directory.
  id: totrans-590
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside `Exercise5-06.vue`, we will start by creating an array of data to iterate
    through in a `list` element, set the key to `n`, and output the value, `{{item}}`,
    inside of the `<li>` element using curly braces:'
  id: totrans-591
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE336]'
  id: totrans-592
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE336]'
- en: '[PRE337]'
  id: totrans-593
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE337]'
- en: '[PRE338]'
  id: totrans-594
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE338]'
- en: '[PRE339]'
  id: totrans-595
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE339]'
- en: '[PRE340]'
  id: totrans-596
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE340]'
- en: '[PRE341]'
  id: totrans-597
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE341]'
- en: '[PRE342]'
  id: totrans-598
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE342]'
- en: '[PRE343]'
  id: totrans-599
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE343]'
- en: '[PRE344]'
  id: totrans-600
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE344]'
- en: '[PRE345]'
  id: totrans-601
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE345]'
- en: '[PRE346]'
  id: totrans-602
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE346]'
- en: '[PRE347]'
  id: totrans-603
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE347]'
- en: '[PRE348]'
  id: totrans-604
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE348]'
- en: '[PRE349]'
  id: totrans-605
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE349]'
- en: '[PRE350]'
  id: totrans-606
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE350]'
- en: '[PRE351]'
  id: totrans-607
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE351]'
- en: '[PRE352]'
  id: totrans-608
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE352]'
- en: '[PRE353]'
  id: totrans-609
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE353]'
- en: '[PRE354]'
  id: totrans-610
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE354]'
- en: '[PRE355]'
  id: totrans-611
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE355]'
- en: '[PRE356]'
  id: totrans-612
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE356]'
- en: '[PRE357]'
  id: totrans-613
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE357]'
- en: 'Import all the lifecycle functions from the `vue` package, as shown in the
    following code block:'
  id: totrans-614
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE358]'
  id: totrans-615
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE358]'
- en: '[PRE359]'
  id: totrans-616
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE359]'
- en: '[PRE360]'
  id: totrans-617
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE360]'
- en: '[PRE361]'
  id: totrans-618
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE361]'
- en: '[PRE362]'
  id: totrans-619
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE362]'
- en: '[PRE363]'
  id: totrans-620
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE363]'
- en: '[PRE364]'
  id: totrans-621
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE364]'
- en: '[PRE365]'
  id: totrans-622
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE365]'
- en: '[PRE366]'
  id: totrans-623
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE366]'
- en: 'Define the callbacks for `onBeforeMount()` and `onMounted()` to trigger an
    alert displaying the relevant message:'
  id: totrans-624
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE367]'
  id: totrans-625
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE367]'
- en: '[PRE368]'
  id: totrans-626
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE368]'
- en: '[PRE369]'
  id: totrans-627
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE369]'
- en: '[PRE370]'
  id: totrans-628
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE370]'
- en: '[PRE371]'
  id: totrans-629
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE371]'
- en: '[PRE372]'
  id: totrans-630
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE372]'
- en: 'When you refresh your browser, you should also see these alerts before you
    see your list load on the page:'
  id: totrans-631
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.19 – Observing the onBeforeMount() hook alert](img/B18645_05_19.jpg)'
  id: totrans-632
  prefs: []
  type: TYPE_IMG
- en: Figure 5.19 – Observing the onBeforeMount() hook alert
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot displays the `onMounted()` hook alert after the `onBeforeMount()`
    hook:'
  id: totrans-634
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.20 – Observing the onMounted() hook alert after the onBeforeMount()
    hook](img/B18645_05_20.jpg)'
  id: totrans-635
  prefs: []
  type: TYPE_IMG
- en: Figure 5.20 – Observing the onMounted() hook alert after the onBeforeMount()
    hook
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a new `button` element inside your `<li>` element that renders the `item`
    output. Use a `@click` directive to bind this button to a method called `deleteItem`
    and pass the `item` value as an argument:'
  id: totrans-637
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE373]'
  id: totrans-638
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE373]'
- en: '[PRE374]'
  id: totrans-639
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE374]'
- en: '[PRE375]'
  id: totrans-640
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE375]'
- en: '[PRE376]'
  id: totrans-641
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE376]'
- en: '[PRE377]'
  id: totrans-642
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE377]'
- en: '[PRE378]'
  id: totrans-643
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE378]'
- en: '[PRE379]'
  id: totrans-644
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE379]'
- en: '[PRE380]'
  id: totrans-645
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE380]'
- en: '[PRE381]'
  id: totrans-646
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE381]'
- en: '[PRE382]'
  id: totrans-647
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE382]'
- en: '[PRE383]'
  id: totrans-648
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE383]'
- en: '[PRE384]'
  id: totrans-649
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE384]'
- en: 'Add a method called `deleteItem` into a `methods` object above your hooks to
    pass `value` as an argument and filter out items from the `list` array based on
    this value. Then, replace the existing list with the new list:'
  id: totrans-650
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE385]'
  id: totrans-651
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE385]'
- en: '[PRE386]'
  id: totrans-652
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE386]'
- en: '[PRE387]'
  id: totrans-653
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE387]'
- en: '[PRE388]'
  id: totrans-654
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE388]'
- en: 'Add `onBeforeUpdate()` and `onUpdated()` and set an alert inside them:'
  id: totrans-655
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE389]'
  id: totrans-656
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE389]'
- en: '[PRE390]'
  id: totrans-657
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE390]'
- en: '[PRE391]'
  id: totrans-658
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE391]'
- en: '[PRE392]'
  id: totrans-659
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE392]'
- en: '[PRE393]'
  id: totrans-660
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE393]'
- en: '[PRE394]'
  id: totrans-661
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE394]'
- en: '[PRE395]'
  id: totrans-662
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE395]'
- en: '[PRE396]'
  id: totrans-663
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE396]'
- en: '[PRE397]'
  id: totrans-664
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE397]'
- en: '[PRE398]'
  id: totrans-665
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE398]'
- en: 'When you delete a list item by clicking on the `onBeforeUpdated()` will trigger
    the handler:'
  id: totrans-666
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.21 – onBeforeCreated is called first after clicking on any Delete
    button](img/B18645_05_21.jpg)'
  id: totrans-667
  prefs: []
  type: TYPE_IMG
- en: Figure 5.21 – onBeforeCreated is called first after clicking on any Delete button
  id: totrans-668
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, `onUpdated` is triggered as shown in the following screenshot:'
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.22 – onUpdated is called when the Vue engine finishes updating the
    component](img/B18645_05_22.jpg)'
  id: totrans-670
  prefs: []
  type: TYPE_IMG
- en: Figure 5.22 – onUpdated is called when the Vue engine finishes updating the
    component
  id: totrans-671
  prefs: []
  type: TYPE_NORMAL
- en: 'Continue adding `onBeforeUnmount()` and `onUnmounted()` to the component options
    as function properties. Set an alert inside these hooks so that you can see when
    they are triggered:'
  id: totrans-672
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE399]'
  id: totrans-673
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE399]'
- en: '[PRE400]'
  id: totrans-674
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE400]'
- en: '[PRE401]'
  id: totrans-675
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE401]'
- en: '[PRE402]'
  id: totrans-676
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE402]'
- en: '[PRE403]'
  id: totrans-677
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE403]'
- en: '[PRE404]'
  id: totrans-678
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE404]'
- en: '[PRE405]'
  id: totrans-679
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE405]'
- en: '[PRE406]'
  id: totrans-680
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE406]'
- en: 'Add a new string to your `list` array – for example, `testing` `unmounted hooks`:'
  id: totrans-681
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE407]'
  id: totrans-682
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE407]'
- en: '[PRE408]'
  id: totrans-683
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE408]'
- en: '[PRE409]'
  id: totrans-684
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE409]'
- en: '[PRE410]'
  id: totrans-685
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE410]'
- en: '[PRE411]'
  id: totrans-686
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE411]'
- en: '[PRE412]'
  id: totrans-687
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE412]'
- en: '[PRE413]'
  id: totrans-688
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE413]'
- en: '[PRE414]'
  id: totrans-689
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE414]'
- en: '[PRE415]'
  id: totrans-690
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE415]'
- en: '[PRE416]'
  id: totrans-691
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE416]'
- en: '[PRE417]'
  id: totrans-692
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE417]'
- en: 'You should see the unmount alerts according to this order: `onBeforeUnmount`
    – `onBeforeMount` – `onUnmounted` – `onMounted`. An example output screen displaying
    an alert for `onBeforeUnmount` is shown in the following figure:'
  id: totrans-693
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.23 – Alert displaying when a component is about to be unmounted](img/B18645_05_23.jpg)'
  id: totrans-694
  prefs: []
  type: TYPE_IMG
- en: Figure 5.23 – Alert displaying when a component is about to be unmounted
  id: totrans-695
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will discuss how we can use the available methods from the Composition
    API and create our custom composable (or custom hook) to control the state of
    the component dynamically.
  id: totrans-696
  prefs: []
  type: TYPE_NORMAL
- en: Creating your composable (custom hook)
  id: totrans-697
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In many scenarios, we want to group some components’ logic into reusable code
    blocks for other components that share similar functionalities. In Vue 2.x, we
    use mixins to achieve this goal. However, mixins are not the best practical solution,
    and they can create code complexity due to the order of merging and invoking overlapping
    data and lifecycle hooks.
  id: totrans-698
  prefs: []
  type: TYPE_NORMAL
- en: Starting from Vue 3.0, you can use the Composition API to divide the common
    data logic into small and isolated composables, using them to create a scoped
    data control in different components and return the created data if there is any.
    A composable is a regular JavaScript function that uses Composition API methods
    and performs data state management internally.
  id: totrans-699
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started, we create a new JavaScript (`.js`) file, which exports a function
    acting as the composable. In the following example, we create a `useMessages`
    composable, which returns a list of `messages` and some methods to modify the
    messages accordingly:'
  id: totrans-700
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE418]'
  id: totrans-701
  prefs: []
  type: TYPE_PRE
  zh: '[PRE418]'
- en: 'To use `useMessages()` in your component, you can import it into the component’s
    `<script setup>` section, and retrieve the relevant data, as follows:'
  id: totrans-702
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE419]'
  id: totrans-703
  prefs: []
  type: TYPE_PRE
  zh: '[PRE419]'
- en: 'Then, we can use `messages`, `deleteMessage` and `addMessage` returned from
    the composable in the component as its local data and methods, as shown in the
    following code block:'
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE420]'
  id: totrans-705
  prefs: []
  type: TYPE_PRE
  zh: '[PRE420]'
- en: Since `messages`, `deleteMessage`, and `addMessage` are declared within the
    `useMessages()` function, every execution of `useMessages` returns different data
    instances, keeping the reactive data defined by the composable isolated and relevant
    only to the component that consumes it. With composables, components share logic,
    not data. You can also compose a new composable based on another composable, not
    only the Composition API.
  id: totrans-706
  prefs: []
  type: TYPE_NORMAL
- en: That’s it – you have learned how to create a simple composable with the Composition
    API. Next, let’s apply what we learned so far about the Composition API and create
    our first composable.
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 5.07 – creating your first composable
  id: totrans-708
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this exercise, you will create a composable that will retrieve data from
    an external API, and return the data, the loading/error status of the request,
    and a search composable that we can reuse for different components.
  id: totrans-709
  prefs: []
  type: TYPE_NORMAL
- en: You can find the complete code for this exercise on [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter05/Exercise5.07](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter05/Exercise5.07).
  id: totrans-710
  prefs: []
  type: TYPE_NORMAL
- en: 'We will create a composable that fetches movies from an external source and
    another one that allows you to search through the list of movies by following
    the given instructions:'
  id: totrans-711
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the application generated by `npm init vue@3` as a starting point, or within
    the root folder of the code repository, navigate into the `Chapter05/Exercise5.07`
    folder by using the following commands in order:'
  id: totrans-712
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE421]'
  id: totrans-713
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE421]'
- en: '[PRE422]'
  id: totrans-714
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE422]'
- en: Open the exercise project in VS Code (by using the `code .` command within the
    project directory), or your preferred IDE.
  id: totrans-715
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let’s create a new composable called `useMovies` by adding `useMovies.js` to
    the `./``src/composables` folder.
  id: totrans-716
  prefs: []
  type: TYPE_NORMAL
- en: 'Within `useMovies.js`, we will add the following code to export the composable
    as a module for use in other files:'
  id: totrans-717
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE423]'
  id: totrans-718
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE423]'
- en: '[PRE424]'
  id: totrans-719
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE424]'
- en: '[PRE425]'
  id: totrans-720
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE425]'
- en: '[PRE426]'
  id: totrans-721
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE426]'
- en: 'We define the reactive data for the composable, such as `movies`, `isLoading`,
    and `error`, using `ref()` with the appropriate initial values:'
  id: totrans-722
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE427]'
  id: totrans-723
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE427]'
- en: '[PRE428]'
  id: totrans-724
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE428]'
- en: '[PRE429]'
  id: totrans-725
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE429]'
- en: '[PRE430]'
  id: totrans-726
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE430]'
- en: '[PRE431]'
  id: totrans-727
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE431]'
- en: '[PRE432]'
  id: totrans-728
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE432]'
- en: '[PRE433]'
  id: totrans-729
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE433]'
- en: 'Then, we will import the `onBeforeMount()` method and start fetching the movies
    from `https://swapi/dev/api/films` using the `fetch()` method, as shown in the
    following code block:'
  id: totrans-730
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE434]'
  id: totrans-731
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE434]'
- en: '[PRE435]'
  id: totrans-732
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE435]'
- en: '[PRE436]'
  id: totrans-733
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE436]'
- en: '[PRE437]'
  id: totrans-734
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE437]'
- en: '[PRE438]'
  id: totrans-735
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE438]'
- en: '[PRE439]'
  id: totrans-736
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE439]'
- en: '[PRE440]'
  id: totrans-737
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE440]'
- en: '[PRE441]'
  id: totrans-738
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE441]'
- en: '[PRE442]'
  id: totrans-739
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE442]'
- en: '[PRE443]'
  id: totrans-740
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE443]'
- en: '[PRE444]'
  id: totrans-741
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE444]'
- en: '[PRE445]'
  id: totrans-742
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE445]'
- en: '[PRE446]'
  id: totrans-743
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE446]'
- en: '[PRE447]'
  id: totrans-744
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE447]'
- en: '[PRE448]'
  id: totrans-745
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE448]'
- en: '[PRE449]'
  id: totrans-746
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE449]'
- en: '[PRE450]'
  id: totrans-747
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE450]'
- en: '[PRE451]'
  id: totrans-748
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE451]'
- en: 'We also need to reset the `isLoading` value to indicate the fetching status
    and assign the value to `error` if any error has occurred:'
  id: totrans-749
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE452]'
  id: totrans-750
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE452]'
- en: '[PRE453]'
  id: totrans-751
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE453]'
- en: '[PRE454]'
  id: totrans-752
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE454]'
- en: '[PRE455]'
  id: totrans-753
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE455]'
- en: '[PRE456]'
  id: totrans-754
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE456]'
- en: '[PRE457]'
  id: totrans-755
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE457]'
- en: '[PRE458]'
  id: totrans-756
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE458]'
- en: '[PRE459]'
  id: totrans-757
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE459]'
- en: '[PRE460]'
  id: totrans-758
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE460]'
- en: '[PRE461]'
  id: totrans-759
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE461]'
- en: '[PRE462]'
  id: totrans-760
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE462]'
- en: 'We return the reactive data so that other Vue components can use it:'
  id: totrans-761
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE463]'
  id: totrans-762
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE463]'
- en: '[PRE464]'
  id: totrans-763
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE464]'
- en: '[PRE465]'
  id: totrans-764
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE465]'
- en: '[PRE466]'
  id: totrans-765
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE466]'
- en: '[PRE467]'
  id: totrans-766
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE467]'
- en: '[PRE468]'
  id: totrans-767
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE468]'
- en: '[PRE469]'
  id: totrans-768
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE469]'
- en: '[PRE470]'
  id: totrans-769
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE470]'
- en: 'Next, create a new Vue component called `Movies` by adding the `Movies.vue`
    file to the `./src/components/` folder with the following code:'
  id: totrans-770
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE471]'
  id: totrans-771
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE471]'
- en: '[PRE472]'
  id: totrans-772
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE472]'
- en: '[PRE473]'
  id: totrans-773
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE473]'
- en: '[PRE474]'
  id: totrans-774
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE474]'
- en: 'In the `script` section, we will import `useMovies` and use its return data
    – `movies`, `isLoading`, and `error`:'
  id: totrans-775
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE475]'
  id: totrans-776
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE475]'
- en: '[PRE476]'
  id: totrans-777
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE476]'
- en: '[PRE477]'
  id: totrans-778
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE477]'
- en: '[PRE478]'
  id: totrans-779
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE478]'
- en: 'In the `template` section, we will display the loading state, error state,
    and the list of movies according to the statuses of `isLoading` and `error` using
    `v-if`:'
  id: totrans-780
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE479]'
  id: totrans-781
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE479]'
- en: '[PRE480]'
  id: totrans-782
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE480]'
- en: '[PRE481]'
  id: totrans-783
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE481]'
- en: '[PRE482]'
  id: totrans-784
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE482]'
- en: '[PRE483]'
  id: totrans-785
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE483]'
- en: '[PRE484]'
  id: totrans-786
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE484]'
- en: '[PRE485]'
  id: totrans-787
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE485]'
- en: '[PRE486]'
  id: totrans-788
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE486]'
- en: '[PRE487]'
  id: totrans-789
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE487]'
- en: '[PRE488]'
  id: totrans-790
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE488]'
- en: '[PRE489]'
  id: totrans-791
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE489]'
- en: '[PRE490]'
  id: totrans-792
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE490]'
- en: '[PRE491]'
  id: totrans-793
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE491]'
- en: '[PRE492]'
  id: totrans-794
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE492]'
- en: '[PRE493]'
  id: totrans-795
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE493]'
- en: '[PRE494]'
  id: totrans-796
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE494]'
- en: '[PRE495]'
  id: totrans-797
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE495]'
- en: '[PRE496]'
  id: totrans-798
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE496]'
- en: '[PRE497]'
  id: totrans-799
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE497]'
- en: '[PRE498]'
  id: totrans-800
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE498]'
- en: '[PRE499]'
  id: totrans-801
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE499]'
- en: '[PRE500]'
  id: totrans-802
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE500]'
- en: 'Navigate to the browser and you will see the following output when the component
    loads the movies:'
  id: totrans-803
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.24 – The loading state when fetching movies](img/B18645_05_24.jpg)'
  id: totrans-804
  prefs: []
  type: TYPE_IMG
- en: Figure 5.24 – The loading state when fetching movies
  id: totrans-805
  prefs: []
  type: TYPE_NORMAL
- en: 'After the component finishes fetching them, Vue automatically updates the view
    to display the list of movies, as shown in the following figure:'
  id: totrans-806
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.25 – The list of movies after fetching happens successfully](img/B18645_05_25.jpg)'
  id: totrans-807
  prefs: []
  type: TYPE_IMG
- en: Figure 5.25 – The list of movies after fetching happens successfully
  id: totrans-808
  prefs: []
  type: TYPE_NORMAL
- en: 'If an error is encountered, the component displays an error state, as shown
    in the following example output:'
  id: totrans-809
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.26 – Error state during fetching](img/B18645_05_26.jpg)'
  id: totrans-810
  prefs: []
  type: TYPE_IMG
- en: Figure 5.26 – Error state during fetching
  id: totrans-811
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will add another composable that gives the component the ability to
    search – `useSearch()` in `./src/composables/useSearch.js`.
  id: totrans-812
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This `useSearch()` composable receives a list of `items`, and a list of filters
    available for filtering with the default filter, `title`. The composable returns
    `searchTerm` for storing the input for searching, and the filtered array of items:'
  id: totrans-813
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE501]'
  id: totrans-814
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE501]'
- en: '[PRE502]'
  id: totrans-815
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE502]'
- en: '[PRE503]'
  id: totrans-816
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE503]'
- en: '[PRE504]'
  id: totrans-817
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE504]'
- en: '[PRE505]'
  id: totrans-818
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE505]'
- en: '[PRE506]'
  id: totrans-819
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE506]'
- en: '[PRE507]'
  id: totrans-820
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE507]'
- en: '[PRE508]'
  id: totrans-821
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE508]'
- en: '[PRE509]'
  id: totrans-822
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE509]'
- en: '[PRE510]'
  id: totrans-823
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE510]'
- en: '[PRE511]'
  id: totrans-824
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE511]'
- en: '[PRE512]'
  id: totrans-825
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE512]'
- en: '[PRE513]'
  id: totrans-826
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE513]'
- en: '[PRE514]'
  id: totrans-827
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE514]'
- en: '[PRE515]'
  id: totrans-828
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE515]'
- en: '[PRE516]'
  id: totrans-829
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE516]'
- en: '[PRE517]'
  id: totrans-830
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE517]'
- en: 'Go back to `Movies.vue`. In the `script` section, we import `useSearch` and
    execute it to get `searchTerm` and filtered array of `filteredMovies` to use in
    our component:'
  id: totrans-831
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE518]'
  id: totrans-832
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE518]'
- en: '[PRE519]'
  id: totrans-833
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE519]'
- en: '[PRE520]'
  id: totrans-834
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE520]'
- en: '[PRE521]'
  id: totrans-835
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE521]'
- en: '[PRE522]'
  id: totrans-836
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE522]'
- en: '[PRE523]'
  id: totrans-837
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE523]'
- en: '[PRE524]'
  id: totrans-838
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE524]'
- en: '[PRE525]'
  id: totrans-839
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE525]'
- en: 'In the `template` section, we add an input field that binds to `searchTerm`
    using `v-model` and replaces `movies` in the `v-for` iteration with `filteredMovies`:'
  id: totrans-840
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE526]'
  id: totrans-841
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE526]'
- en: '[PRE527]'
  id: totrans-842
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE527]'
- en: '[PRE528]'
  id: totrans-843
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE528]'
- en: '[PRE529]'
  id: totrans-844
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE529]'
- en: '[PRE530]'
  id: totrans-845
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE530]'
- en: '[PRE531]'
  id: totrans-846
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE531]'
- en: '[PRE532]'
  id: totrans-847
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE532]'
- en: '[PRE533]'
  id: totrans-848
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE533]'
- en: '[PRE534]'
  id: totrans-849
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE534]'
- en: '[PRE535]'
  id: totrans-850
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE535]'
- en: '[PRE536]'
  id: totrans-851
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE536]'
- en: '[PRE537]'
  id: totrans-852
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE537]'
- en: '[PRE538]'
  id: totrans-853
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE538]'
- en: 'Navigate back to the browser. Now, you can load the movie list and start searching
    for the movie by title, as shown in the following screenshot:'
  id: totrans-854
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.27 – Filtered movies by titles containing the word hope](img/B18645_05_27.jpg)'
  id: totrans-855
  prefs: []
  type: TYPE_IMG
- en: Figure 5.27 – Filtered movies by titles containing the word hope
  id: totrans-856
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, you can extend the search composable created to support a list
    of filters as input selection from the users, or re-format the fields of received
    movies to be friendlier for your application. In this exercise, we observed how
    we can create standalone and reusable logic for different use cases in a component
    with the Composition API, such as the ability to search. We also see how composables
    make our code cleaner and more organized.
  id: totrans-857
  prefs: []
  type: TYPE_NORMAL
- en: Activity 5.01 – creating a BlogView component with the Composition API
  id: totrans-858
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To access the code file for this activity, refer to [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter05/Activity5.01](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter05/Activity5.01)
  id: totrans-859
  prefs: []
  type: TYPE_NORMAL
- en: This activity aims to leverage your knowledge in combining different Composition
    APIs with components’ props and events to create a view in which the user can
    see a list of blogs and add or remove any blog item.
  id: totrans-860
  prefs: []
  type: TYPE_NORMAL
- en: This activity will require the use of a headless CMS, Contentful. The access
    keys and endpoints are listed in the solution.
  id: totrans-861
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to complete this activity:'
  id: totrans-862
  prefs: []
  type: TYPE_NORMAL
- en: Create a new Vue project with Vite.
  id: totrans-863
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install the `contentful` dependency into your project.
  id: totrans-864
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create another composable, `useListAction`, which receives a list of `items`,
    and returns the following:'
  id: totrans-865
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`addItem`: Adds a new item to the given list'
  id: totrans-866
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`deleteItem`: Deletes an item based on its ID'
  id: totrans-867
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a `useBlogs` composable, which will fetch `blogs` from Contentful and
    use `useListActions()` to get the actions for the fetched `blogs`.
  id: totrans-868
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Define `useBlogs` to return the `blogs` list, a `loading` status, an `error`
    for the fetch status, and the `addItem` and `deleteItem` actions received from
    `useListActions`. The returned `blogs` should be an array of blog items with the
    following fields: `title`, `description`, `heroImage`, `publishDate`, and `id`
    (a slug).'
  id: totrans-869
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `useSearch` composable, which receives a list of `items`, and returns
    the following:'
  id: totrans-870
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`searchTerm`: The search value.'
  id: totrans-871
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`filters`: A list of fields to filter based on the user’s choice. By default,
    it’s `title`.'
  id: totrans-872
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`filteredItems`: The filtered list of the given items.'
  id: totrans-873
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a `BlogEditor` component that displays several `input` fields for the
    `title` field, the author’s name, the blog’s `id` field, `textarea` for the blog’s
    content, and a `button` element for saving the blog. When this button is clicked,
    `BlogEditor` emits an `addNewItem` event with the new blog’s details as the payload
    and resets the fields.
  id: totrans-874
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a `Blogs` component that receives a list of `blogs`, an `isLoading` flag,
    and an `error` object as its props and then renders the state of the component
    according to `isLoading` and `error` and the details of each blog item on the
    UI when applicable.
  id: totrans-875
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In `Blogs`, use `useSearch()` on the list of `blogs` received as props and display
    a search `input` field to allow users to filter the blogs according to `title`.
  id: totrans-876
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Replace the original list iterations with the filtered list of blogs.
  id: totrans-877
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We then add `fieldset` containing two `input` fields of the `checkbox` type,
    each binding to the array of `filters`. The two `input` fields will also have
    corresponding labels of `title` and `description` respectively.
  id: totrans-878
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a `button` element to each row of the blog rendered in the blog list, with
    a **Remove** label.
  id: totrans-879
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Also, define an `emit` event, `deleteBlog`, for `Blogs`.
  id: totrans-880
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On clicking on the `deleteBlog` event with the `id` value of the blog item as
    its payload.
  id: totrans-881
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a `BlogView` component that renders `BlogEditor` and `Blogs`.
  id: totrans-882
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In `BlogView`, create a toggle flag, `showEditor`, which will display `BlogEditor`
    if `true`. Otherwise, the component will display an `showEditor` value when clicked
    on.
  id: totrans-883
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`BlogView` will use `useBlogs()` and pass the data received from this composable
    (`blogs`, `isLoading`, `error,` and `deleteItem`) as props and events to `Blogs`.
    You should bind `deleteItem` to the `deleteBlog` custom event of `Blogs`.'
  id: totrans-884
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`BlogView` also binds the `addItem` method returned from `useBlogs()` to the
    `addNewItem` event of `BlogEditor`.'
  id: totrans-885
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add some CSS styling to the components accordingly.
  id: totrans-886
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The expected outcome is as follows:'
  id: totrans-887
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.28 – Output when there aren’t blogs to display and the user hasn’t
    clicked on Add new blog](img/B18645_05_28.jpg)'
  id: totrans-888
  prefs: []
  type: TYPE_IMG
- en: Figure 5.28 – Output when there aren’t blogs to display and the user hasn’t
    clicked on Add new blog
  id: totrans-889
  prefs: []
  type: TYPE_NORMAL
- en: 'When a user clicks on **Add new blog**, the editor will appear as follows:'
  id: totrans-890
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.29 – Blog editor in action](img/B18645_05_29.jpg)'
  id: totrans-891
  prefs: []
  type: TYPE_IMG
- en: Figure 5.29 – Blog editor in action
  id: totrans-892
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-893
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout this chapter, we learned about composing components using the Composition
    API and the `setup()` lifecycle hooks (or `<script setup>`) as an alternative
    to the Options API. We also learned how to use different Composition functions
    to create watchers and lifecycle callbacks to control our components’ local states.
  id: totrans-894
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we learned how to create our custom composable function based on the
    Composition API and other composables, making our components more organized and
    readable in groups of similar logic.
  id: totrans-895
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will explore how we can create global components using
    plugins and mixins and compose dynamic components.
  id: totrans-896
  prefs: []
  type: TYPE_NORMAL
