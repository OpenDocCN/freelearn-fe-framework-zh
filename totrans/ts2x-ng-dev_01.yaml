- en: From Loose Types to Strict Types
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从松散类型到严格类型
- en: '*JavaScript is loosely typed.* It''s worth repeating, *JavaScript is loosely
    typed*. Notice how the sentence is passive--we cannot categorically hold someone
    responsible for the loose-type nature of JavaScript just as we can''t do so for
    other famous glitches of JavaScript.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '*JavaScript 是松散类型的*。这是值得重复的，*JavaScript 是松散类型的*。注意句子是如何被动的——我们不能明确地责怪某人对 JavaScript
    松散类型特性的贡献，就像我们不能对 JavaScript 的其他著名缺陷这样做一样。'
- en: A detailed discussion on what loose-types and loosely typed languages are will
    help aid your understanding of the problem that we plan to solve with this book.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 对松散类型和松散类型语言进行详细讨论将有助于你理解我们计划用这本书解决的问题。
- en: When a programming language is loosely typed, it means that the data passed
    around using variables, functions, or whatever member applicable to the language
    does *not* have a defined type. A variable *x* could be declared, but the kind
    of data it holds is never certain. Loosely typed languages are contrary to strongly
    typed languages, which enforce that every declared member must strictly define
    what sort of data it can hold.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 当一种编程语言是松散类型的，这意味着使用变量、函数或适用于该语言的任何成员传递的数据没有定义的类型。变量 `x` 可以被声明，但它所持有的数据类型永远是不确定的。松散类型语言与严格类型语言相反，后者强制要求每个声明的成员必须严格定义它可以存储的数据类型。
- en: 'These types are categorized into:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这些类型被分为：
- en: Strings
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符串
- en: Numbers (int, float, and so on.)
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数字（int、float 等。）
- en: Data structures (arrays, lists, objects, maps, and so on.)
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据结构（数组、列表、对象、映射等。）
- en: Boolean (true and false)
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 布尔值（true 和 false）
- en: JavaScript, PHP, Perl, Ruby, and so on, are all examples of loosely typed languages.
    Java, C, C#, are examples of strongly typed languages.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript、PHP、Perl、Ruby 等，都是松散类型语言的例子。Java、C、C# 是严格类型语言的例子。
- en: In loosely typed languages, a member may be initially defined as a string. Down
    the line, this member could end up storing a number, a boolean, or even a data
    structure. This instability leads us to the implications of loosely typed languages.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在松散类型语言中，一个成员最初可能被定义为字符串。随后，这个成员可能最终存储数字、布尔值，甚至数据结构。这种不稳定性导致了松散类型语言的含义。
- en: Term definitions
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 术语定义
- en: 'Before we keep moving, it would be nice to define the common jargon you may
    have met or will meet with in the course of understanding loose and strict types:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续前进之前，定义一下你在理解松散和严格类型的过程中可能遇到或将会遇到的常见术语会很好：
- en: '**Members**: These are the features of a language that describe how the data
    is stored and manipulated. Variables, functions, properties, classes, interfaces,
    and so on, are all examples of the possible members a language can have.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**成员**：这些是描述数据存储和操作方式的编程语言特性。变量、函数、属性、类、接口等，都是语言可能拥有的可能成员的例子。'
- en: '**Declared versus defined versus assigned**: When a variable is initialized
    with no value, it is said to be *declared*. When it is declared and has a type,
    it is said to be *defined*. When the variable has a value, whether typed or not,
    it is *assigned*.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**声明、定义与赋值**：当一个变量没有初始化值时，它被称为*声明*。当它被声明并具有类型时，它被称为*定义*。当变量有值，无论是有意还是无意，它被称为*赋值*。'
- en: '**Types**: These are used to categorize the data based on how they are parsed
    and manipulated. For example, numbers, strings, booleans, arrays, and so on.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**类型**：这些用于根据数据的解析和操作方式对数据进行分类。例如，数字、字符串、布尔值、数组等。'
- en: '**Values**: The data assigned to a given member is known as the member''s value.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**值**：分配给特定成员的数据称为该成员的值。'
- en: Implications of loose types
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 松散类型的含义
- en: 'Let''s start out with an example to show how loosely typed languages behave:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用一个例子来展示松散类型语言的行为：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The variable `x`was initially declared and assigned a string value, `Hello`.
    The same `x` got re-assigned to a numeric value, `1`. Nothing went wrong; the
    code was interpreted and when we logged the value to the console, it logged the
    latest value of `x`, which is `1`.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 变量 `x`最初被声明并分配了一个字符串值，`Hello`。相同的`x`被重新分配为一个数值，`1`。没有出错；代码被解释，当我们将其值记录到控制台时，记录的是`x`的最新值，即`1`。
- en: 'This is not just a string-number thing; the same thing applies to every other
    type, including complex data structures:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这不仅仅是字符串和数字的事情；同样的事情适用于其他所有类型，包括复杂的数据结构：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The important thing to note here is not that the *values* are changing. Rather,
    it's the fact that both values and *types* are changing. The change in the type
    does not affect the execution. Everything works fine, and we have our expected
    result in the console.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这里需要注意的重要事情不是*值*在变化。而是*值和类型*都在变化。类型的变化不会影响执行。一切正常，我们在控制台中得到了预期的结果。
- en: 'The function parameters and return types are not left out either. You can have
    a function signature that accepts a string parameter, but JavaScript will keep
    silent when you, or any other developer, pass in a number while calling the function:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 函数的参数和返回类型也不会被忽略。你可以有一个接受字符串参数的函数签名，但当你或任何其他开发者调用函数时传入一个数字，JavaScript会保持沉默：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If you're coming from a strong-type background and have no previous experience
    with loosely typed languages, the preceding example must feel weird. This is because
    in strongly typed languages, it's hard to change the type of the particular member
    (variables, functions, and so on).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你来自强类型背景，并且没有使用弱类型语言的先前经验，前面的例子可能感觉很不寻常。这是因为，在强类型语言中，改变特定成员（变量、函数等）的类型是很困难的。
- en: So, what is the implication to take note of? The obvious implication is that
    the members that are loosely typed are inconsistent. Therefore, their value types
    can change, and this is something that you, the developer, will need to watch
    out for. There are challenges in doing so; let's talk about them.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们应该注意什么含义呢？明显的含义是，那些弱类型的成员是不一致的。因此，它们的值类型可能会变化，这是你需要作为开发者留意的。这样做会带来挑战；让我们来谈谈这些挑战。
- en: The problem
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Loose types are tricky. At first glance, they appear to be all nice and flexible
    to work with--flexibility, as in giving you the freedom to change types anytime
    and anywhere, without the interpreter screaming errors like other strongly typed
    languages do. Just like any other form of freedom, this one also comes with a
    price.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 弱类型很棘手。乍一看，它们看起来都很不错，很灵活，易于处理——灵活性，意味着你可以随时随地方便地更改类型，而不会像其他强类型语言那样让解释器发出错误。就像任何其他形式的自由一样，这种自由也有代价。
- en: 'The major problem is inconsistency. It is very easy to forget the original
    type for a member. This could lead you to handling, say, a string as if it were
    still a string when its value is now Boolean. Let''s see an example:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 主要问题是缺乏一致性。很容易忘记成员的原始类型。这可能会导致你错误地处理字符串，就像它仍然是字符串一样，而它的值现在是布尔值。让我们看看一个例子：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the preceding example, we have a function that greets the users based on
    their usernames. Before it does the greeting, it first reverses the username.
    We can call the function by passing in a username string.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们有一个根据用户名问候用户的函数。在它进行问候之前，它首先反转用户名。我们可以通过传入一个用户名字符串来调用这个函数。
- en: 'What happens when we pass in a Boolean or some other type that does not have
    a `split` method? Let''s check it out:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们传入布尔值或其他没有`split`方法的类型时，会发生什么？让我们来看看：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The first log output, which prints the greeting with a string, comes out fine.
    But the second attempt fails because we passed in a Boolean. In as much as *everything*
    in JavaScript is an object, a Boolean does not have a `split` method. The image
    ahead shows a clear output of the preceding example:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个日志输出，打印带有字符串的问候语，输出正常。但第二次尝试失败了，因为我们传入了一个布尔值。在JavaScript中，*一切*都是对象，布尔值没有`split`方法。前面的图片显示了前面例子的清晰输出：
- en: '![](img/a942f086-3e4c-43e5-abca-0f09ed2fec74.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a942f086-3e4c-43e5-abca-0f09ed2fec74.jpg)'
- en: Yes, you might be thinking that you're the author of this code; why would you
    pass in a Boolean when you designed the function to receive a string? Remember
    that a majority of the code that we write in our lifetime is not maintained by
    us, but by our colleagues.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，你可能正在想，你是这段代码的作者；当你设计函数接收字符串时，为什么你会传入一个布尔值？记住，我们一生中写的绝大多数代码不是由我们自己维护，而是由我们的同事来维护。
- en: When another developer picks up `greetUser` and decides to use the function
    as an API without digging the code's source or documentation, there is a high
    possibility that he/she won't pass in the right value type. This is because *he/**she
    is blind*. Nothing tells him/her what is right and what is not. Even the name
    of the function is not obvious enough to make her pass in a string.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当另一位开发者接手`greetUser`函数并决定将其作为API使用，而没有深入查看代码的源代码或文档时，他/她很可能不会传入正确的值类型。这是因为*他/她处于盲目状态*。没有任何东西告诉他/她什么是正确的，什么是不正确的。甚至函数的名字也不够明显，以至于她无法传入一个字符串。
- en: JavaScript evolved. This evolution was not just experienced internally but was
    also seen in its vast community. The community came up with best practices on
    tackling the challenges of the loose-type nature of JavaScript.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript经历了演变。这种演变不仅体现在其内部，也体现在其庞大的社区中。社区提出了应对JavaScript松散类型特性的挑战的最佳实践。
- en: Mitigating loose-type problems
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 缓解松散类型问题
- en: JavaScript does not have any native obvious solution to the problems that loose
    types bring to the table. Rather, we can use all forms of manual checks using
    JavaScript's conditions to see whether the value in question is still of the intended
    type.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript没有针对松散类型带来的问题的原生明显解决方案。相反，我们可以使用JavaScript的所有形式的条件检查来查看所讨论的值是否仍然是预期的类型。
- en: We are going to have a look at some examples where manual checks are applied
    in order to retain the integrity of the value types.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将查看一些示例，在这些示例中，手动检查被应用以保持值类型的完整性。
- en: The popular saying that *Everything is an Object* in JavaScript is not entirely
    true ([https://blog.simpleblend.net/is-everything-in-javascript-an-object/](https://blog.simpleblend.net/is-everything-in-javascript-an-object/)).
    There are *Objects* and there are *Primitives*. Strings, numbers, Boolean, null,
    undefined, are primitives but are handled as objects only during computation.
    That's why you can call something like `.trim()` on a string. Objects, arrays,
    dates, and regular expressions are valid objects. It's mind-troubling to say that
    an object is an object, but that is JavaScript for you.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 流行说法“在JavaScript中，*一切都是对象*”并不完全正确([https://blog.simpleblend.net/is-everything-in-javascript-an-object/](https://blog.simpleblend.net/is-everything-in-javascript-an-object/))。有*对象*和*原始值*。字符串、数字、布尔值、null、undefined是原始值，但在计算过程中被当作对象处理。这就是为什么你可以在字符串上调用像`.trim()`这样的方法。对象、数组、日期和正则表达式是有效的对象。说一个对象是对象，但那是JavaScript的特点。
- en: The typeof operator
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`typeof`运算符'
- en: 'The `typeof` operator is used to check the type of a given operand. You can
    use the operator to control the harm of loose types. Let''s see some examples:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`typeof`运算符用于检查给定操作数的类型。你可以使用这个运算符来控制松散类型的危害。让我们看看一些例子：'
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Rather than waiting for the system to tell us that we''re wrong when an invalid
    type is passed in, we catch the error as early as possible and throw a custom
    and more friendly error, as shown in the following screenshot:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是等待系统告诉我们传入无效类型时我们错了，我们尽早捕获错误并抛出一个自定义且更友好的错误，如下面的截图所示：
- en: '![](img/2486fb07-13a0-43b5-acdc-5f21028a041b.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2486fb07-13a0-43b5-acdc-5f21028a041b.jpg)'
- en: 'The `typeof` operator returns a string, which represents the value''s type.
    The `typeof` operator is not entirely perfect and should only be used when you
    are sure about how it works. See the following issue:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`typeof`运算符返回一个字符串，表示值的类型。`typeof`运算符并不完全完美，并且只有在你知道它如何工作的情况下才应该使用。请看以下问题：'
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You may have expected an error to be thrown when the function was called with
    an array for the second time. Instead, the program got past the check and executed
    `user.name` before realizing that it is undefined. Why did it get past this check?
    Remember that an array is an object. Therefore, we need something more specific
    to catch the check. Date and regex could have passed the check as well, even though
    that may not have been the intent.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能预期当函数第二次用数组作为参数调用时会抛出错误。相反，程序通过了检查并在意识到`user.name`是未定义之前执行了`user.name`。为什么它通过了这个检查？记住，数组是一个对象。因此，我们需要更具体的东西来捕获这个检查。日期和正则表达式也可以通过这个检查，尽管这可能不是预期的意图。
- en: The toString method
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`toString`方法'
- en: 'The `toString` method is prototypically inherited by all the objects and wrapped
    objects (primitives). When you call this method on them, it returns a string token
    of the type. See the following examples:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`toString`方法被所有对象和包装对象（原始值）原型继承。当你调用此方法时，它返回一个表示类型的字符串标记。请看以下示例：'
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now you can use this to check the types, as shown by Todd Motto ([https://toddmotto.com/understanding-javascript-types-and-reliable-type-checking/#true-object-types](https://toddmotto.com/understanding-javascript-types-and-reliable-type-checking/#true-object-types)):'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以使用这个方法来检查类型，如Todd Motto([https://toddmotto.com/understanding-javascript-types-and-reliable-type-checking/#true-object-types](https://toddmotto.com/understanding-javascript-types-and-reliable-type-checking/#true-object-types))所示：
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: What the preceding example does is check the part of the string returned by
    the `toString` method to determine its type.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的示例所做的检查是检查由`toString`方法返回的字符串部分以确定其类型。
- en: Final Note
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最后的注意事项
- en: The examples we saw previously are just an overkill for a simple type check.
    If JavaScript had strict type features, we wouldn't have gone through this stress.
    In fact, this chapter would never have existed.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前看到的例子对于一个简单的类型检查来说已经过度了。如果JavaScript有严格的类型特性，我们就不会经历这样的压力。实际上，这一章可能根本就不会存在。
- en: 'Imagine that JavaScript could do this:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下JavaScript可以这样做：
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We wouldn't have gone through all that type checking hell because the compiler
    (as well as the editors) would have thrown errors when it encountered type inconsistency.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会经历所有那些类型检查的痛苦，因为编译器（以及编辑器）在遇到类型不一致时都会抛出错误。
- en: This is where TypeScript comes in. Luckily, with TypeScript, we can write code
    that looks like the preceding one, and we can have it transpiled to JavaScript.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是TypeScript发挥作用的地方。幸运的是，有了TypeScript，我们可以编写看起来像前面那样的代码，并且我们可以将其转换为JavaScript。
- en: Summary
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Throughout this book, we will be talking about TypeScript for building not just
    JavaScript apps but also Angular apps. Angular is a JavaScript framework; therefore,
    it will be characterized with the discussed limitations unless mitigated with
    TypeScript.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在整本书中，我们将讨论TypeScript，不仅用于构建JavaScript应用程序，也用于构建Angular应用程序。Angular是一个JavaScript框架；因此，除非通过TypeScript缓解，否则它将具有讨论的限制。
- en: Now that you know the problem at hand, buckle up while we dig Angular with the
    possible solutions that TypeScript provides.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 既然你已经知道了当前的问题，那么在我们深入探讨Angular以及TypeScript提供的可能解决方案时，请系好安全带。
- en: 'So far, so good! We have been able to discuss the following concerns to help
    us move forward:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，一切顺利！我们已经能够讨论以下问题，以帮助我们前进：
- en: Understanding loose types
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解弱类型
- en: Differences between loose types and strict types
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 弱类型和严格类型之间的区别
- en: Challenges of loosely typed programming languages, including JavaScript
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 弱类型编程语言的挑战，包括JavaScript
- en: Mitigating the effects of loose types
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缓解弱类型的影响
