["```js\nexport function App() {\n  return (\n    <ColorsProvider>\n      <ColoredButton />\n    </ColorsProvider>\n  );\n}\n```", "```js\nimport defaultColors from \"defaultColors\";\nexport const ColorContext = React.createContext();\nexport function ColorsProvider(props) {\n  const [colors, setColors] = \n      useState(defaultColors.light);\n  const toggleColors = () => {\n      setColors((curColors) =>\n          curColors === defaultColors.dark ? \n              defaultColors.light : defaultColors.dark\n    );\n  };\n  const value = {\n    colors: colors,\n    toggleColors: toggleColors\n  };\n  return <ColorContext.Provider value={value} {...props} />;\n} \n```", "```js\nfunction ColoredButton(props) {\n  return (\n    <ColorContext.Consumer>\n      {({ colors, toggleColors }) => {\n          return (\n              <Pressable\n                  onPress={toggleColors}\n               style={{\n                  backgroundColor: colors ? \n                  colors.background : \n                  defaultColors.background\n            }}\n          >\n            <Text\n                style={{\n                    color: colors ? colors.foreground : \n                    defaultColors.foreground\n              }}\n            >\n              Toggle Colors\n            </Text>\n          </Pressable>\n        );\n      }}\n    </ColorContext.Consumer>\n  );\n}\n```", "```js\nfunction ColoredButton(props) {\nconst {colors, toggleColors} = React.useContext(ColorContext);\n  return (\n          <Pressable\n              onPress={toggleColors}\n```", "```js\nexport function UserProvider(props: any) {\n  const [name, setName] = useState<string>('John');\n  const [favs, setFavs] = useState<{[favId: number]: \n      IMovie}>({});\n  const addFav = (fav: IMovie): void => {\n      if (!favs[fav.id]) {\n          const _favs = {...favs};\n          _favs[fav.id] = fav;\n          setFavs(_favs);\n      }\n  };\n  const removeFav = (favId: number): void => {\n      if (favs[favId]) {\n          const _favs = {...favs};\n          delete _favs[favId];\n          setFavs(_favs);\n      }\n  };\n  const value = {\n      name, favs, addFav, removeFav,\n  };\n  return <UserContext.Provider value={value} {...props} />;\n}\n```", "```js\nexport function useUser() {\n  const context = React.useContext(UserContext);\n  const {name, favs, addFav, removeFav} = context;\n  const addFavById = (favId: number): void => {\n      const movie = getMovieById(favId);\n      if (!movie) {\n          return;\n      }\n      addFav(movie);\n  };\n  const getFavsAsArray = (): IMovie[] => {\n      return Object.values(favs);\n  };\n  const isFav = (favId: number): boolean => {\n    return !!favs[favId];\n  };\n    return {\n        name, favs, getFavsAsArray, removeFav, addFavById, \n        isFav,\n    };\n}\n```", "```js\nconst Movie = (props: MovieProps) => { \n  const {isFav, addFavById, removeFav} = useUser();\n  const _isFav = isFav(props.route.params.movie.id);\n  ...\n```", "```js\n<Pressable\n  style={styles.pressableContainer}\n  onPress={\n      _isFav\n      ? () => removeFav(props.route.params.movie.id)\n      : () => addFavById(props.route.params.movie.id)\n  }>\n  <Text style={styles.pressableText}>\n    {_isFav ? '👎 Remove from favs' : '👍 Add to favs'}\n  </Text>\n</Pressable>\n```", "```js\nconst Genre = (props: GenreProps) => {\n  const [movies, setMovies] = useState<IMovie[]>([]);\n  const {isMovieFav} = useUser();\n  ...\n```", "```js\n  return (\n    <ScrollContainer>\n      {movies.map(movie => (\n          <Pressable\n            {isMovieFav(movie.id) ? (\n              <Text style={styles.movieTitleFav}>👍</Text>\n              ) : undefined}\n            <Text style={styles.movieTitle}>{movie.title}\n                </Text>\n          </Pressable>\n        ))}\n    </ScrollContainer>\n  );\n```", "```js\nconst User = (props: UserProps) => {\n  const {getMovieFavsAsArray} = useUser();\n  const _movieFavsArray = getMovieFavsAsArray();\n  return (\n    <ScrollContainer>\n      {_movieFavsArray.map(movie => {\n        return (\n          <Pressable>\n            <Text style={styles.movieTitle}>{movie.title}\n                </Text>\n          </Pressable>\n        );\n      })}\n    </ScrollContainer>\n  );\n}; \n```", "```js\n  useEffect(() => {\n    AsyncStorage.getItem('HYDRATE::FAVORITE_MOVIES').then\n        (value => {\n            if (value) {\n                setFavs(JSON.parse(value));\n           }\n      });\n  }, []);\n   useEffect(() => {\n     if (favs !== {}) {\n         AsyncStorage.setItem('HYDRATE::FAVORITE_MOVIES', \n             JSON.stringify(favs));\n     }\n  }, [favs]);\n```", "```js\nconst Home = (props: HomeProps) => {\n  const {name} = useUser();\n  ...\n  console.log('re-render home');\n  return (\n    <ScrollContainer>\n      <Text style={styles.welcome}>Hello {name}</Text>\n  ...\n```", "```js\nexport const useUserStore = create<IUser & UserStoreFunctions>((set, get) => ({\n  name: 'John',\n  favs: {},\n  addFavById: (favId: number) => {\n    const _favs = {...get().favs};\n    if (!_favs[favId]) {\n      const movie = getMovieById(favId);\n      if (movie) {\n        _favs[favId] = movie;\n        set({favs: _favs});\n      }\n    }\n  },\n  removeFav: (favId: number) => {\n    const _favs = {...get().favs};\n    if (_favs[favId]) {\n      delete _favs[favId];\n      set({favs: _favs});\n    }\n  },\n}));\n```", "```js\nconst Movie = (props: MovieProps) => {\n  const [addFavById, favs, removeFav] = useUserStore(state \n      => [\n          state.addFavById,\n          state.favs,\n          state.removeFav,\n         ], shallow);\n  const _isFav = favs[props.route.params.movie.id];\n  ...\n```", "```js\nconst Home = (props: HomeProps) => {\n  const name = useUserStore(state => state.name);\n  console.log('rerender home');\n  ...\n```", "```js\nexport const APIConstants: {\n  API_URL: string;\n  API_KEY: string;\n     } = {\n         API_URL: 'https://api.themoviedb.org/3/',\n         API_KEY: '<put your api key here - never do that  \n             in production>',\n};\n```", "```js\nconst createFullAPIPath: (path: string) => string = path => {\n  return (\n    APIConstants.API_URL + path +\n        (path.includes('?') ? '&' : '?') +\n        'api_key=' + APIConstants.API_KEY\n   );\n};\nasync function makeAPICall<T>(path: string): Promise<T> {\n  console.log(createFullAPIPath(path));\n  const response = await fetch(createFullAPIPath(path));\n  return response.json() as Promise<T>;\n}\n```", "```js\nconst getGenres = async (): Promise<Array<IGenre>> => {\n  let data: Array<IGenre> = [];\n  try {\n    const apiResponse = await makeAPICall<{genres: Array\n        <IGenre>}>('genre/movie/list',\n        );\n    data = apiResponse.genres;\n  } catch (e) {\n        console.log(e);\n    }\n  return data;\n};\n```", "```js\n  useEffect(() => {\n    const fetchData = async () => {\n      setGenres(await getGenres());\n    };\n    fetchData();\n  }, []); \n```"]