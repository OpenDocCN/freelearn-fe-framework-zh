- en: '7'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building an SSR Application for a GitHub Portfolio Using Angular
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A typical Angular application follows the **Single-Page Application (SPA)**
    approach, where each page is created in the DOM of the browser while the user
    interacts with the application. A web server hosts the application and serves
    only the main page, usually called `index.html`, at application startup.
  prefs: []
  type: TYPE_NORMAL
- en: '**Server-Side Rendering (SSR)** is a technique that follows an entirely different
    approach for application rendering than SPA. It uses the server to prerender pages
    when the user requests them at runtime. Rendering content on the server dramatically
    enhances the performance of a web application and improves its **Search Engine
    Optimization (SEO)** capabilities. To perform SSR in an Angular application, we
    use a library called **Angular Universal**.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will learn how to benefit from Angular Universal by building
    a portfolio application using the **GitHub API**. We will cover the following
    topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Building an Angular application with the GitHub API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating Angular Universal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prerendering content during build
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enhancing SEO capabilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Essential background theory and context
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'An Angular application consists of several pages created dynamically in the
    DOM of the browser by the Angular framework while we use the application. Angular
    Universal enables the Angular framework to create these pages on the server statically
    during application runtime. In other words, it can create a fully static version
    of an Angular application that can run even without needing to have JavaScript
    enabled. Prerendering an application on the server has the following advantages:'
  prefs: []
  type: TYPE_NORMAL
- en: It allows web crawlers to index the application and make it discoverable and
    linkable on social media websites.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It makes the application usable on mobile and other low-performant devices that
    cannot afford to execute JavaScript on their side.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It improves the user experience by loading the first page quickly and, at the
    same time, loading the actual client page in the background (**First Contentful
    Paint (FCP)**).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The GitHub API is an HTTP REST API for interacting with GitHub data. It can
    be used publicly or privately using an authentication mechanism provided out of
    the box.
  prefs: []
  type: TYPE_NORMAL
- en: Unauthorized requests to the GitHub API are limited to 60 requests per hour.
    For an overview of the available authentication methods, you can find more details
    at [https://docs.github.com/en/rest/overview/authenticating-to-the-rest-api](https://docs.github.com/en/rest/overview/authenticating-to-the-rest-api).
  prefs: []
  type: TYPE_NORMAL
- en: We use the built-in HTTP client available in the `@angular/common/http` npm
    package to communicate over HTTP in Angular. Interacting with HTTP in SSR applications
    may result in duplicated HTTP requests due to the page prerendering at the FCP.
    However, Angular Universal can overcome this type of duplication using a mechanism
    called **TransferState**.
  prefs: []
  type: TYPE_NORMAL
- en: Project overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this project, we will build a portfolio application for our GitHub user profile.
    We will initially use the Angular CLI to scaffold an Angular application that
    interacts with the GitHub API. We will learn how to use the GitHub API and fetch
    user-specific data. We will also use the **Bootstrap CSS** library to style our
    application and create a beautiful user interface.
  prefs: []
  type: TYPE_NORMAL
- en: After creating our Angular application, we will turn it into a server-side-rendered
    application using Angular Universal. We will see how to install and configure
    Angular Universal, and we will learn how to prerender it during build time.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we will configure our application to render using SEO in the most popular
    social platforms correctly. The following diagram depicts an architectural overview
    of the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18465_07_01.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.1 – Project architecture
  prefs: []
  type: TYPE_NORMAL
- en: 'Build time: 2 hours'
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following prerequisites and software tools are required to complete this
    project:'
  prefs: []
  type: TYPE_NORMAL
- en: '**GitHub account**: A valid GitHub user account.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Angular CLI**: A CLI for Angular that you can find at [https://angular.io/cli](https://angular.io/cli).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GitHub material**: The related code for this chapter can be found in the
    `Chapter07` folder at [https://github.com/PacktPublishing/Angular-Projects-Third-Edition](https://github.com/PacktPublishing/Angular-Projects-Third-Edition).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building an Angular application with the GitHub API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'GitHub contains an API that we can use to fetch various information about the
    profile of a GitHub user. The Angular application we are building will communicate
    with the GitHub API and display a brief portfolio for our GitHub profile. Our
    application will consist of the following features:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Dashboard**: This will be the landing page of the application, and it will
    display a summary of our GitHub profile.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Info**: This will display personal information about us.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Repositories**: This will display a list of our *public* repositories.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Organizations**: This will display a list of GitHub organizations of which
    we are members.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The resulting output of each feature that is displayed in the screenshots of
    this chapter will be different according to your GitHub profile.
  prefs: []
  type: TYPE_NORMAL
- en: The dashboard will be the main page of the application, and it will contain
    all the other features. We will learn how to build the dashboard page in the following
    section.
  prefs: []
  type: TYPE_NORMAL
- en: Building the dashboard
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before we can start creating the main features of our application, we need
    to scaffold and configure an Angular application by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command will use the `ng new` command of the Angular CLI, passing
    the following options:'
  prefs: []
  type: TYPE_NORMAL
- en: '`gh-portfolio`: The name of the Angular application that we want to create'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--routing=false`: Disables routing because our application will consist of
    a single page'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--style=scss`: Configures the Angular application to use the SCSS stylesheet
    format when working with CSS styles'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We will use the Bootstrap CSS library for styling our portfolio application.
    Let’s see how to install and configure it in the Angular CLI application that
    we have just created:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the following `npm` command to install the Bootstrap CSS library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `src\styles.scss` file and import the Bootstrap SCSS stylesheet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `styles.scss` file contains CSS styles that are applied globally to the
    application. The `@import` CSS rule accepts the absolute path of a stylesheet
    file we want to load.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When we import a stylesheet format using the `@import` rule, we omit the extension
    of the file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Execute the following command to install **Bootstrap Icons**, a free and open-source
    icon library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Bootstrap Icons can be used in various formats, such as SVG or font. In this
    project, we are going to use the latter.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Import the font icon format of the Bootstrap Icons library into the `styles.scss`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We have already created the Angular application and added the necessary artifacts
    for styling it. We are now ready to start creating the main page of our Angular
    application:'
  prefs: []
  type: TYPE_NORMAL
- en: Download an Angular logo of your choice from the **press kit** of the official
    Angular documentation at [https://angular.io/presskit](https://angular.io/presskit).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the downloaded logo file into the `src\assets` folder of the Angular CLI
    workspace. The `assets` folder is used for static files such as images, fonts,
    and JSON files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `app.component.ts` file and create a `username` property in the `AppComponent`
    class that holds your GitHub login as a value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `app.component.html` file and replace its content with the following
    HTML template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding template, we define the header of our application. It contains
    an anchor element that links to our GitHub profile. We have also added the GitHub
    icon using the `bi-github` class from the Bootstrap Icons set.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Insert the following HTML snippet after the header of the application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `app.component.scss` file and add the following CSS styles for the
    header and the content of our application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run `ng serve` to start the application and navigate to `http://localhost:4200`.
    The header of the application should look like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.2 – Application header](img/B18465_07_02.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.2 – Application header
  prefs: []
  type: TYPE_NORMAL
- en: The main page of our portfolio application is now ready. It contains a header
    and an empty container element for adding the main features. In the following
    section, we will start building the *personal information* feature of our application.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying personal information
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first feature of our application will be to display personal information
    from our GitHub profile, such as the full name, the profile photo, and some social
    media links. Before creating the feature, we first need to configure our application
    so that it can communicate with the GitHub API:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the main module of the application, the `app.module.ts` file, and add
    the `HttpClientModule` class to the `imports` array of the `@NgModule` decorator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `HttpClientModule` class is the main Angular module of the built-in HTTP
    library that exports all the necessary services for interacting with an HTTP resource.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a new Angular service using the following Angular CLI command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `github.service.ts` file and inject the `HttpClient` service into
    the `constructor` of the `GithubService` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `HttpClient` class is an Angular service of the built-in HTTP client that
    provides all the primary methods for interacting with HTTP, such as **GET**, **POST**,
    and **PUT**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following properties in the `GithubService` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Make sure that you set the value of the `username` property to your GitHub login.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Modify the `app.component.ts` file so that it uses the `username` property
    from `GithubService`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'All interaction between our application and the GitHub API will be delegated
    to `GithubService`. Now, let’s focus on building our feature:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the following command of the Angular CLI to create a new Angular component
    for our feature:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a `user` interface to define the data model of our component using the
    following Angular CLI command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `user.ts` file and add the following properties to the `User` interface:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `github.service.ts` file and add the following `import` statements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new method to get the details of our profile from the GitHub API:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `personal-info.component.ts` file and modify the `import` statements
    accordingly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inject `GithubService` into the `constructor` of the `PersonalInfoComponent`
    class and create a component property to get the result of the `getUser` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `personal-info.component.html` file and replace its content with the
    following HTML template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding template, we use the `async` pipe because the `user$` property
    is an observable, and we need to subscribe to it to get its values. The main advantage
    of the `async` pipe is that it unsubscribes from the observable automatically
    when a component is destroyed, avoiding potential memory leaks.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We also create the `user` alias for the observable to reference it easily in
    various locations around the component template.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `app.component.html` file and add the `<app-personal-info>` component
    to the element with the `col-sm-3` class selector:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If we run `ng serve` to preview the application, we should see the personal
    information panel on the left side of the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.3 – Personal information](img/B18465_07_03.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.3 – Personal information
  prefs: []
  type: TYPE_NORMAL
- en: The first feature of our portfolio application is now complete. It displays
    the personal information of our GitHub profile along with a short bio and some
    social network links. In the next section, we will build the *repositories* feature
    of our application.
  prefs: []
  type: TYPE_NORMAL
- en: Listing user repositories
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The GitHub user profile contains a list of repositories the user owns, called
    **sources**, and another list of repositories that contribute, called **forks**.
  prefs: []
  type: TYPE_NORMAL
- en: The repositories feature of our application will only display the source repositories.
  prefs: []
  type: TYPE_NORMAL
- en: 'The *repositories* and *organizations* features will have a similar user interface.
    Thus, we need to create a component for both features:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the following command of the Angular CLI to create a new component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `panel.component.ts` file and define two input properties using the
    `@Input` decorator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `panel.component.html` file and replace its content with the following
    HTML template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The panel component is a Bootstrap card element that consists of a header and
    a body. The header uses the `caption` and `icon` input properties to display text
    with an icon. The body uses the `<ng-content>` Angular component to define a placeholder
    where the content from our features will be displayed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We can now start using the panel component to create our feature:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create an interface for representing the data model of a GitHub repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `repository.ts` file and add the following properties in the `Repository`
    interface:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `github.service.ts` file and import the `Repository` interface:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, it is time for some refactoring in our service. The URL we will use for
    getting repositories is similar to that of the `getUser` method. Extract the URL
    of that method in a property of the `GithubService` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new method to fetch repositories of the current GitHub user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now that we have created the prerequisites for fetching the user repositories
    from the GitHub API, we can start building the component that will display those
    repositories:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the following command to create a new Angular component using the Angular
    CLI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `repositories.component.ts` file and modify the `import` statements
    accordingly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inject `GithubService` into the `constructor` of the `RepositoriesComponent`
    class and create a component property to get the result of the `getRepos` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding class, we use the `pipe` RxJS operator to combine the observable
    returned from the `getRepos` method with the `map` operator to filter out `fork`
    repositories and get only sources. Filtering is accomplished using the standard
    `filter` method for arrays.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `repositories.component.html` file and replace its content with the
    following HTML template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding template, we wrap the main content of the component inside
    the `<app-panel>` component and set the `caption` and `icon` properties for the
    header.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Our component iterates over the `repos$` observable and displays the `name`
    and the `description` of each repository. The name is an anchor element that points
    to the actual GitHub URL of the repository.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following list immediately after the element with the `card-body` class
    selector:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `app.component.html` file and add the `<app-repositories>` component
    in the first HTML element with the `col-12 col-sm-12` class selector:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run `ng serve` to preview the application, and you should see the new panel
    next to the *personal information* feature:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.4 – Repositories](img/B18465_07_04.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.4 – Repositories
  prefs: []
  type: TYPE_NORMAL
- en: The second feature of our application has been completed. It displays a list
    of public repositories that exist in our GitHub profile. Our application now also
    features a panel component that we can use to build the organizations feature
    of our application in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Visualizing the organization membership
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A GitHub user can be a member of a GitHub organization. Our application will
    display a list of user organizations and additional information about each.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start building our organization list:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create an interface to define the properties of an organization:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `organization.ts` file and add the following properties in the `Organization`
    interface:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `github.service.ts` file and import the `Organization` interface:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new method to get organizations of the current GitHub user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Execute the following command to create an Angular component for our feature:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `organizations.component.ts` file and modify the `import` statements
    accordingly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inject `GithubService` into the `constructor` of the `OrganizationsComponent`
    class and set the result of its `getOrganizations` method to an observable component
    property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `organizations.component.html` file and replace its content with the
    following HTML template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding HTML template, we place the main content of our component inside
    the `<app-panel>` component, passing an appropriate `caption` and `icon`. We display
    the `login` and `description` of each organization. Each organization is wrapped
    in an anchor element that points to the GitHub page of the organization.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `organizations.component.scss` file and add the following CSS styles
    for the organization logos:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `app.component.html` file and add the `<app-organizations>` component
    in the second element with the `col-12 col-sm-12` class selector:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run `ng` `serve` to start the application, and you should see the organization
    list under the *repositories* feature:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.5 – Organizations](img/B18465_07_05.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.5 – Organizations
  prefs: []
  type: TYPE_NORMAL
- en: 'Our application now features a complete portfolio for the profile of a GitHub
    user. It displays the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Personal information, a short biography, and social media links
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A list of public user repositories that contains links to each one for more
    information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A list of organizations where the user is a member with links to each one for
    further details
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next section, we will learn how to integrate Angular Universal and render
    our application on the server.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating Angular Universal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Angular Universal is an Angular library that enables an Angular CLI application
    to be rendered on the server. An SSR application increases the loading speed of
    an Angular application and improves the loading of the first page.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install Angular Universal in an existing Angular CLI application, we will
    use the following command of the Angular CLI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: The previous command uses the `ng add` command of the Angular CLI to install
    the `@nguniversal/express-engine` npm package. The `@nguniversal/express-engine`
    package is the heart of the Angular Universal library and consists of a **Node.js
    Express** web server at its core.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we execute the preceding command to install Angular Universal, we are
    not only installing the library but also modifying our Angular CLI workspace with
    the following files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`angular.json`: This creates new entries in the `architect` section to build
    and enable our Angular Universal application. One of these entries is the `server`
    property, which is responsible for building our application with SSR. It outputs
    the generated bundle into a separate `server` folder inside the standard output
    folder of the Angular CLI application:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The original application bundle is now generated into the `browser` folder inside
    the standard output folder of the Angular CLI application, as described in the
    `outputPath` property of the `build` section.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Thus, an Angular Universal application generates two versions of the same Angular
    application, one for the server and another for the browser.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`package.json`: This adds all the necessary npm dependencies and creates a
    handful set of npm `scripts` to start building with Angular Universal:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Scripts that contain the `:ssr` suffix are related to building and serving the
    Angular Universal application. The `prerender` script will create a prerendered
    version of an Angular application during build time. We will learn about the `prerender`
    script in the *Prerendering content during build* section.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`server.ts`: This contains the Node.js Express application that will host the
    server-side-rendered version of our portfolio application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`main.server.ts`: This is the main entry point of our Angular Universal application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`app.server.module.ts`: This is the main application module of the server-side-rendered
    application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tsconfig.server.json`: This is the TypeScript configuration for our Angular
    Universal application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Global JavaScript objects such as `window` and `document` are unavailable when
    rendering an Angular application in the server because there is no browser. Angular
    provides abstraction APIs for some objects, such as the `DOCUMENT` injection token.
    If you need to enable them conditionally, you can inject the `PLATFORM_ID` token
    and use the `isPlatformServer` or `isPlatformBrowser` methods from the `@angular/common`
    npm package to check on which platform your application is currently running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now run our GitHub portfolio application on the server using the following
    `npm` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: To preview your GitHub portfolio application on the server, open your browser
    at `http://localhost:4200`.
  prefs: []
  type: TYPE_NORMAL
- en: 'You should typically see the application as it was before. So, what have we
    gained here? Angular Universal applications do not reveal their full potential
    when running on a development machine with a powerful processor and a lot of memory.
    Instead, we need to run and preview them in real-world cases like a slow network.
    We can use Google Chrome developer tools to emulate a slow network in a development
    environment:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the Google Chrome browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Toggle the developer tools and select the **Network** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Slow 3G** option from the **Throttling** dropdown.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `http://localhost:4200` in the address bar of your browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The server first loads a static version of your application to display to the
    user until the actual Angular application loads in the background. When fully
    loaded in the background, Angular Universal will switch to the complete application.
  prefs: []
  type: TYPE_NORMAL
- en: In the following section, we will investigate how to improve the loading speed
    of our application even more, using prerendering.
  prefs: []
  type: TYPE_NORMAL
- en: Prerendering content during build
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `package.json` file of our Angular CLI workspace contains the `prerender`
    npm script, which we can use to improve the first loading of our application.
    The script runs the `prerender` command from the `architect` section of the `angular.json`
    configuration file and prerenders the content of our application during build
    time. Let’s see the effect that prerendering will have on our GitHub portfolio
    application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the following `npm` command to generate a prerendered version of the
    application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding command will output a production bundle of the application into
    the `dist\gh-portfolio\browser` folder.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Navigate to the `dist\gh-portfolio\browser` folder and you should see two HTML
    files, the `index.html` and `index.original.html` files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `index.original.html` file and locate the `<app-root>` HTML element.
    This is the main component of our Angular application, where Angular will render
    the content of our application in the browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `index.html` file now and look again at the `<app-root>` element.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The main component is not empty this time. Angular Universal has made all HTTP
    requests to the GitHub API and prefetched the content of our application during
    runtime. All component templates and styles have been prerendered in the main
    HTML file, meaning we can view our application on a browser even without JavaScript
    enabled!
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Execute the following command to start the prerendered version of our GitHub
    portfolio application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding command will start a Node.js Express server that hosts our application
    at `http://localhost:4000`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Disable JavaScript from the settings of your browser and navigate to `http://localhost:4000`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Our GitHub portfolio application remains fully operational without having JavaScript
    enabled. The main page of the application is also rendered instantly without having
    the user wait for the application to load.
  prefs: []
  type: TYPE_NORMAL
- en: 'The previous scenario is a perfect fit for users who cannot afford to enable
    JavaScript on their devices. But what happens when a user with JavaScript enabled
    uses the same prerendered version of the application? Let’s learn more about that:'
  prefs: []
  type: TYPE_NORMAL
- en: Enable JavaScript in your browser and toggle the developer tools.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to `http://localhost:4000`. Nothing different seems to happen at first
    sight. Nevertheless, the application loads instantly due to the prerendered content.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inspect the **Network** tab, and you will notice the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.6 – Network tab (Google Chrome)](img/B18465_07_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.6 – Network tab (Google Chrome)
  prefs: []
  type: TYPE_NORMAL
- en: Our application initiates all HTTP requests to the GitHub API as if it were
    rendered from a browser. It duplicates all HTTP requests the application needs,
    even if data has already been prerendered on the HTML page. Why is that?
  prefs: []
  type: TYPE_NORMAL
- en: The application makes one HTTP request for the browser-rendered version and
    another for the SSR application because both versions have a different state.
    We can prevent the previous behavior by sharing the state between the server and
    the browser. More specifically, we can transfer the state of the server to the
    browser using a special-purpose Angular module of the Angular Universal library
    called `TransferHttpCacheModule`.
  prefs: []
  type: TYPE_NORMAL
- en: If we use `TransferHttpCacheModule`, the server will cache responses from the
    GitHub API, and the browser will use the cache instead of initiating a new request.
    `TransferHttpCacheModule` solves the problem by installing an **HTTP interceptor**
    in the Angular application that ignores HTTP requests that have been handled by
    the server initially.
  prefs: []
  type: TYPE_NORMAL
- en: An HTTP interceptor is an Angular service that intercepts HTTP requests and
    responses originating from the built-in HTTP client of the Angular framework.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install `TransferHttpCacheModule` in our GitHub portfolio application, follow
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the main module file of the Angular application, `app.module.ts`, and
    import `TransferHttpCacheModule` from the `@nguniversal/common` npm package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `TransferHttpCacheModule` class to the `imports` array of the `@NgModule`
    decorator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Execute the following command to prerender your application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following command to start your prerendered application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you preview the portfolio application and inspect the **Network** tab of
    your browser, you will notice that it does not make additional HTTP requests.
    `TransferHttpCacheModule` intercepted all HTTP requests and stored them in the
    **TransferState** store of our application. TransferState is a key-value store
    that can be transferred from the server to the browser. The browser version of
    the application can later read the HTTP responses directly from the store without
    making an extra call.
  prefs: []
  type: TYPE_NORMAL
- en: We now have a fully prerendered version of our GitHub portfolio. But how can
    we optimize it further to share it on a social media platform? We will learn more
    about SEO optimization techniques in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Enhancing SEO capabilities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SEO optimizes a website to be correctly indexed by a **web crawler**. A web
    crawler is special-purpose software on most search engines and can identify and
    index websites so that they are easily discoverable and linkable through their
    platforms.
  prefs: []
  type: TYPE_NORMAL
- en: Angular Universal does a great job of SEO by prerendering content during build
    time. Some web crawlers cannot execute JavaScript and build the dynamic content
    of an Angular application. Prerendering with Angular Universal eliminates the
    need for JavaScript, thus allowing web crawlers to do their best to identify the
    web application.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also help SEO by defining several tags in the `<head>` element of the
    main `index.html` file of an Angular application, such as `title`, `viewport`,
    and `charset`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: You can find a list of available tags at [https://developer.mozilla.org/docs/Web/HTML/Element/meta/name](https://developer.mozilla.org/docs/Web/HTML/Element/meta/name).
  prefs: []
  type: TYPE_NORMAL
- en: 'However, setting a tag in the `index.html` file is inadequate, especially when
    an Angular application has routing enabled and contains several routes. The Angular
    framework provides a couple of handy services that we can use to set tags programmatically.
    First, let’s see how to set the title tag in our application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `app.component.ts` file and add the following `import` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inject the `Title` service into the `constructor` of the `AppComponent` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Call the `setTitle` method of the `titleService` variable in the `ngOnInit`
    method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run `npm run dev:ssr` to preview the application, and you should see the title
    in the browser tab:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.7 – Browser tab title](img/B18465_07_07.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.7 – Browser tab title
  prefs: []
  type: TYPE_NORMAL
- en: 'Similar to the `Title` service, we can use the `Meta` service to set meta tags
    for our application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `app.component.ts` file and import `Meta` from the `@angular/platform-browser`
    npm package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inject the `Meta` service into the `constructor` of the `AppComponent` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the `addTags` method of the `meta` variable to add some meta tags to the
    `ngOnInit` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding code, we added two meta tags. The first one sets the `description`
    that contains the username of the current GitHub profile. The second one sets
    the `author` tag to be the same as the username of the GitHub profile.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Run `npm run dev:ssr` to start the application and navigate to `http://localhost:4200`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use your browser to inspect the page, and you should see the following meta
    tags in the **<head>** element of the page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.8 – Application head element](img/B18465_07_08.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.8 – Application head element
  prefs: []
  type: TYPE_NORMAL
- en: Each popular social platform, such as Twitter, Facebook, and LinkedIn, requires
    its own meta tags so that the URL of an SSR application can be correctly displayed
    on their platforms.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this project, we built a portfolio application for our GitHub profile. Initially,
    we learned how to interact with the GitHub API in a new Angular application. We
    also used Bootstrap CSS and Bootstrap Icons to provide a beautiful user interface
    for our portfolio application.
  prefs: []
  type: TYPE_NORMAL
- en: We then saw how to convert our Angular application into an SSR application using
    Angular Universal. We learned how to benefit from prerendering content when users
    have low-end and slow-performing devices and some of the potential pitfalls of
    this technique.
  prefs: []
  type: TYPE_NORMAL
- en: We used some of the available SEO techniques that the Angular framework offers
    to improve the discoverability of our application.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn about the monorepo architecture and how we
    can manage the state of an Angular application.
  prefs: []
  type: TYPE_NORMAL
- en: Practice questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let’s take a look at a few practice questions:'
  prefs: []
  type: TYPE_NORMAL
- en: How do we subscribe to an observable in the template of a component?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What command do we use to install Angular Universal?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can we differentiate programmatically between browser and server platforms?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What command generates a prerendered version of an SSR application?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What Angular module do we use to transfer the state from the server to the browser?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What Angular service do we use to set the title of an Angular application?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What Angular service do we use to set meta tags in an Angular application?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are some links to build upon what we learned in the chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Angular Univeral guide: [https://angular.io/guide/universal](https://angular.io/guide/universal)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'GitHub REST API: [https://docs.github.com/rest](https://docs.github.com/rest)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bootstrap CSS: [https://getbootstrap.com](https://getbootstrap.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bootstrap Icons: [https://icons.getbootstrap.com](https://icons.getbootstrap.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Angular HTTP guide: [https://angular.io/guide/http](https://angular.io/guide/http)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TransferHttpCacheModule`: [https://github.com/angular/universal/blob/master/docs/transfer-http.md](https://github.com/angular/universal/blob/master/docs/transfer-http.md)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
