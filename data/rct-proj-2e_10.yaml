- en: '*Chapter 10*: Creating a Virtual Reality Application with React and Three.js'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第 10 章*：使用 React 和 Three.js 创建虚拟现实应用程序'
- en: You're almost there—only one more chapter to go and then you can call yourself
    a React expert that has experienced React on every platform. Throughout this book,
    you've built nine applications with React and React Native. In this final chapter,
    we won't be creating a web or mobile application, but a **Virtual Reality** (**VR**)
    application with React and **three.js**. With three.js, you can create dynamic
    2D, 3D, and VR experiences using JavaScript, and with the use of another library
    apply it within React. Although VR is still an emerging technology, the best use
    cases for VR are, for example, retail stores that want their customers to experience
    their stores or games online.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 您几乎完成了——只需再有一章，您就可以自称是一个在所有平台上都经历过 React 的 React 专家。在整个本书中，您已经使用 React 和 React
    Native 构建了九个应用程序。在本章的最后一章中，我们不会创建一个 Web 或移动应用程序，而是一个 **虚拟现实**（**VR**）应用程序，使用 React
    和 **three.js**。使用 three.js，您可以使用 JavaScript 创建动态的 2D、3D 和 VR 体验，并通过使用另一个库将其应用于
    React。尽管 VR 仍然是一种新兴技术，但 VR 的最佳用例，例如，零售店希望让客户体验他们的商店或在线游戏。
- en: In this chapter, you'll explore the very basics of what's possible with React
    together with three.js and how it relates to React. The application you will build
    will be able to render 360-degree panorama images and use state management to
    render between screens. Animated 3D objects will also be displayed by combining
    React and three.js with other libraries.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将探索使用 React 和 three.js 可以实现的基本功能，以及它与 React 的关系。您将构建的应用程序将能够渲染 360 度全景图像，并使用状态管理在屏幕之间进行渲染。通过结合
    React 和 three.js 以及其他库，还将显示动画 3D 对象。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Getting started with three.js
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始使用 three.js
- en: Creating a panorama viewer with React and three.js
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 React 和 three.js 创建全景查看器
- en: Animating 3D objects
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动画 3D 对象
- en: Project overview
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目概述
- en: In this chapter, you will build a VR application with React and three.js that
    uses principles from both JavaScript and React. Both 2D panorama images and 3D
    objects will be added to this application, and the project can be run in the browser
    using Create React App.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将使用 React 和 three.js 构建一个 VR 应用程序，该应用程序结合了 JavaScript 和 React 的原则。该应用程序将添加
    2D 全景图像和 3D 对象，并且可以使用 Create React App 在浏览器中运行该项目。
- en: The build time is 1.5 hours.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 构建时间为 1.5 小时。
- en: Getting started
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始
- en: The application for this chapter will be built from scratch and uses assets
    that can be found on GitHub at [https://github.com/PacktPublishing/React-Projects-Second-Edition/tree/main/Chapter10-assets](https://github.com/PacktPublishing/React-Projects-Second-Edition/tree/main/Chapter10-assets).
    These assets should be downloaded to your computer so that you can use them later
    on in this chapter. The complete code for this chapter can be found on GitHub
    at [https://github.com/PacktPublishing/React-Projects-Second-Edition/tree/main/Chapter10](https://github.com/PacktPublishing/React-Projects-Second-Edition/tree/main/Chapter10).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的应用程序将从头开始构建，并使用可在 GitHub 上找到的资产 [https://github.com/PacktPublishing/React-Projects-Second-Edition/tree/main/Chapter10-assets](https://github.com/PacktPublishing/React-Projects-Second-Edition/tree/main/Chapter10-assets)。应将这些资产下载到您的计算机上，以便您可以在本章的后续部分使用它们。本章的完整代码可在
    GitHub 上找到 [https://github.com/PacktPublishing/React-Projects-Second-Edition/tree/main/Chapter10](https://github.com/PacktPublishing/React-Projects-Second-Edition/tree/main/Chapter10)。
- en: Creating a VR application with React and Three.js
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 React 和 Three.js 创建 VR 应用程序
- en: You can write 2D and 3D VR applications in React by combining it with other
    libraries. Previously, you could write VR applications in React directly with
    React 360\. But due to the emergence of other popular libraries, such as three.js,
    which is based on JavaScript, its development was discontinued. Three.js allows
    you to create applications with both 2D and 3D UI components without having to
    deal with complex setups for mobile or VR devices, which is similar to how React
    works.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过与其他库结合使用 React 来编写 2D 和 3D VR 应用程序。以前，您可以直接使用 React 360 在 React 中编写 VR
    应用程序。但由于其他流行库的出现，例如基于 JavaScript 的 three.js，其开发已被停止。Three.js 允许您创建具有 2D 和 3D UI
    组件的应用程序，而无需处理移动或 VR 设备的复杂设置，这与 React 的工作方式类似。
- en: To render both 2D and 3D in browsers, three.js uses **WebGL**, which is a JavaScript
    API that runs directly in the browser. It's supported by all recent versions of
    popular browsers, such as Chrome, Firefox, and Microsoft Edge.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在浏览器中渲染 2D 和 3D，three.js 使用 **WebGL**，这是一个在浏览器中直接运行的 JavaScript API。它被所有流行的浏览器最新版本所支持，例如
    Chrome、Firefox 和 Microsoft Edge。
- en: Getting started with Three.js
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开始使用 Three.js
- en: Three.js is based on JavaScript and can be used together with React using a
    different library called `@react-three/fiber`, which is a React renderer for three.js
    that creates a link between the two.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Three.js 是基于 JavaScript 开发的，并且可以使用名为 `@react-three/fiber` 的不同库与 React 一起使用，这是一个为
    three.js 设计的 React 渲染器，它建立了两者之间的联系。
- en: 'As we already did for our previous React applications that render in the browser,
    we can use Create React App as the starting point for this application. To get
    started with building 2D and 3D applications in React with three.js, we first
    need to create a new project with Create React App:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在之前的浏览器中渲染的 React 应用程序中所做的那样，我们可以使用 Create React App 作为此应用的起点。要开始使用 three.js
    在 React 中构建 2D 和 3D 应用程序，我们首先需要使用 Create React App 创建一个新的项目：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Secondly, we need to install both three.js and `@react-three/fiber` from npm:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，我们需要从 npm 安装 three.js 和 `@react-three/fiber`：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We don''t need any extra dependencies or configuration as Create React App
    already has the right configuration out of the box. If we move into the project''s
    root directory, which is named after our project name, we will see that it has
    the following structure:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不需要任何额外的依赖项或配置，因为 Create React App 已经提供了正确的配置。如果我们进入项目根目录，该目录以我们的项目名称命名，我们会看到它具有以下结构：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Not all files that were created by Create React App are mentioned above; instead,
    only the ones used in this chapter are listed.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有由 Create React App 创建的文件都在上面提到；相反，这里只列出了本章中使用的文件。
- en: Creating 3D objects with Three.js
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Three.js 创建 3D 对象
- en: The base for the application has now been created with Create React App, and
    we've also installed three.js together with `@react-three/fiber`. This last library
    lets us render three.js elements as components inside React and makes multiple
    Hooks available to make changes. This way, we can use three.js in the same declarative
    and predictive way that we're already used to from learning React. There is no
    additional overhead incurred by using this library instead of three.js directly,
    as components are rendered outside the render loop of React.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Create React App 创建的应用程序基础已经建立，并且我们已经安装了 three.js 以及 `@react-three/fiber`。这个最后的库允许我们在
    React 中将 three.js 元素作为组件渲染，并提供了多个 Hooks 来进行更改。这样，我们就可以以我们已从学习 React 中熟悉的声明性和预测性方式使用
    three.js。与直接使用 three.js 相比，使用此库不会产生额外的开销，因为组件是在 React 的渲染循环之外渲染的。
- en: 'To create 3D objects in React with three.js, we need to take the following
    steps:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 React 中使用 three.js 创建 3D 对象，我们需要采取以下步骤：
- en: 'Replace the contents of `src/App.js` with the following, so that it will return
    a `Canvas` component from `@react-three/fiber`:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `src/App.js` 的内容替换为以下内容，以便它从 `@react-three/fiber` 返回一个 `Canvas` 组件：
- en: '[PRE3]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This code adds a `Canvas` component, which is important when we want to render
    three.js elements in React for multiple reasons. With the `Canvas` component,
    both a `Canvas` component will render our three.js components and elements outside
    of the DOM and automatically handles resizing.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码添加了一个 `Canvas` 组件，这在我们要在 React 中渲染 three.js 元素时非常重要。有了 `Canvas` 组件，它将渲染我们的
    three.js 组件和元素，并且位于 DOM 之外，并自动处理调整大小。
- en: 'The `Canvas` component will be resized to fit the `div` element it''s rendered
    in, so you can control its size by changing the width and height of `#canvas-container`
    in CSS. This can be done by replacing the contents of `src/App.css` with the following:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Canvas` 组件将被调整大小以适应其渲染的 `div` 元素，因此您可以通过更改 CSS 中 `#canvas-container` 的宽度和高度来控制其大小。这可以通过用以下内容替换
    `src/App.css` 中的内容来完成：'
- en: '[PRE4]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To render something on the `Canvas`, we need to add a mesh element to this
    file, for which we don''t need to import anything. The same as we can add `div`
    or any other elements in React, three.js elements will be treated as JSX elements
    automatically when placed inside a `Canvas` from `@react-three/fiber`:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在 `Canvas` 上渲染内容，我们需要向此文件添加一个网格元素，我们不需要导入任何内容。就像我们可以在 React 中添加 `div` 或其他任何元素一样，当
    three.js 元素放置在 `@react-three/fiber` 的 `Canvas` 中时，它们将被自动视为 JSX 元素：
- en: '[PRE5]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This will render a small gray square using the `boxGeometry` element from three.js
    but has no additional features yet. Also, the square we have now is quite small.
    By adding the `scale` prop to the `mesh` element, we can increase the size of
    this element:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将使用 three.js 的 `boxGeometry` 元素渲染一个小灰色方块，但目前还没有其他功能。此外，我们现在拥有的方块相当小。通过向 `mesh`
    元素添加 `scale` 属性，我们可以增加此元素的大小：
- en: '[PRE6]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To give the element some color, we first need to add a `meshStandardMaterial`
    with a `color` prop within our mesh element, and add another element called `ambientLight`.
    This element will add light to the component to make the color of the `boxGeometry`
    visible. On this `ambientLight` element, we can configure how bright the light
    must shine using the `intensity` prop:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了给元素添加一些颜色，我们首先需要在mesh元素内添加一个带有`color` prop的`meshStandardMaterial`，并添加另一个名为`ambientLight`的元素。此元素将为组件添加光照，使`boxGeometry`的颜色可见。在这个`ambientLight`元素上，我们可以使用`intensity`
    prop来配置光必须有多亮：
- en: '[PRE7]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In our application, we can now see a blue square being rendered instead of a
    gray one. You can see the effect of the `ambientLight` element by changing the
    intensity to see the square getting lighter or darker depending on the value of
    the intensity.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用程序中，我们现在可以看到一个蓝色方块被渲染，而不是灰色方块。你可以通过改变`ambientLight`元素的强度来看到效果，根据强度的值，方块会变亮或变暗。
- en: 'Having a 2D square is cool, but with three.js, we can also build 3D components.
    For this, we need to make some changes to the component to interact with three.js
    directly outside of React to prevent performance issues. To make the element 3D,
    make the following changes:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个2D方块很酷，但使用three.js，我们还可以构建3D组件。为此，我们需要对组件进行一些修改，以便直接在React之外与three.js交互，以防止性能问题。为了使元素成为3D，需要进行以下更改：
- en: 'Let''s create a separate component for the `boxGeometry` element, so we can
    separate concerns and make it reusable. We can do this in a new file called `Box.js`
    under a new directory called `components` in our `src` directory:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们为`boxGeometry`元素创建一个单独的组件，这样我们就可以分离关注点并使其可重用。我们可以在`src`目录下的一个名为`components`的新目录中创建一个名为`Box.js`的新文件来完成此操作：
- en: '[PRE8]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We need to add a `ref` to the `mesh` so we can get access to it outside the
    scope of React, and alter it using three.js:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要给`mesh`添加一个`ref`，这样我们就可以在React的作用域之外访问它，并使用three.js来修改它：
- en: '[PRE9]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Altering the `mesh` element with three.js can be done by changing the values
    of the `mesh` that we can now access using the `ref`. These alterations must be
    done within a `useFrame` Hook from `@react-three/fiber`, which is triggered on
    every frame render by three.js. When a new frame is rendered, we can slightly
    alter the rotation of the mesh making it rotate:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用three.js修改`mesh`元素可以通过更改我们现在可以通过`ref`访问的`mesh`的值来完成。这些更改必须在`@react-three/fiber`的`useFrame`
    Hook内完成，该Hook由three.js在每一帧渲染时触发。当渲染新帧时，我们可以稍微改变网格的旋转，使其旋转：
- en: '[PRE10]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In the `src/App.js` file, we need to replace the `boxGeometry` element with
    this new component to make it visible in the application:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/App.js`文件中，我们需要将`boxGeometry`元素替换为这个新组件，以便在应用程序中使其可见：
- en: '[PRE11]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Finally, we need to add two more light elements to highlight that we''re rendering
    a 3D element, which are the `spotLight` and `pointLight` elements:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们需要添加两个额外的光源元素来突出显示我们正在渲染3D元素，这些是`spotLight`和`pointLight`元素：
- en: '[PRE12]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'By opening the application in the browser, you can now see a blue square box
    that is being rotated in 3D:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在浏览器中打开应用程序，你现在可以看到一个正在3D中旋转的蓝色方块：
- en: Figure 10.1 – Rendering a 3D element with Three.js
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.1 – 使用Three.js渲染3D元素
- en: 'Something else that we can do with three.js is control the `Canvas` using our
    mouse. The `Box` component is now rotating on every frame render, but we could
    also control the rotation of the entire `Canvas` using three.js. The `Canvas`
    component already sets up a camera that we can control using the `OrbitControls`
    component from three.js. To do this for our application, we need to do the following:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用three.js做的一些其他事情是使用我们的鼠标控制`Canvas`。现在`Box`组件在每一帧渲染时都会旋转，但我们可以使用three.js控制整个`Canvas`的旋转。`Canvas`组件已经设置了一个相机，我们可以使用three.js中的`OrbitControls`组件来控制它。为了在我们的应用程序中实现这一点，我们需要做以下操作：
- en: 'Disable the rotation of the `Box` component by adding a prop called `rotate`,
    which can be either `true` or `false`. If no value is provided, the default value
    will be `false`, meaning the `Box` component isn''t rotating:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过添加一个名为`rotate`的prop来禁用`Box`组件的旋转，该prop可以是`true`或`false`。如果没有提供值，默认值将是`false`，这意味着`Box`组件不会旋转：
- en: '[PRE13]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'From the `src/App.js` file, we don''t need to set this prop as we don''t want
    the `Box` component to rotate. Instead, we will create a new component in the
    `src/components/Controls.js` file to control the rotation of the entire `Canvas`
    and thereby the camera of the application. To do this, we need to add the following
    content to this file:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`src/App.js`文件中，我们不需要设置这个属性，因为我们不希望`Box`组件旋转。相反，我们将在`src/components/Controls.js`文件中创建一个新的组件来控制整个`Canvas`的旋转，从而控制应用程序的相机。为此，我们需要将以下内容添加到这个文件中：
- en: '[PRE14]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This will create the `Controls` component and use the `OrbitControls` component
    from three.js as its base. From the `useThree` Hook, it will take the `camera`
    and `gl` from three.js, where the first one is the view perspective and the second
    one is the render for WebGL. In the `useEffect` Hook, the `OrbitControls` component
    will be created and also cleaned up with the `dispose` method when it's no longer
    needed.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建`Controls`组件，并使用three.js中的`OrbitControls`组件作为其基础。从`useThree`钩子中，它将获取three.js中的`camera`和`gl`，其中第一个是视图视角，第二个是WebGL的渲染。在`useEffect`钩子中，`OrbitControls`组件将被创建，并在不再需要时使用`dispose`方法进行清理。
- en: 'We need to import this new `Controls` component in the `src/App.js` file and
    place it inside the `Canvas` component:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要在`src/App.js`文件中导入这个新的`Controls`组件，并将其放置在`Canvas`组件内部：
- en: '[PRE15]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'With the previous change, we could already rotate the `Box` component while
    clicking and dragging around this component from the browser. To make this experience
    smoother, we can add a minimum and maximum control distance to this component
    in `src/components/Box.js`:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过之前的更改，我们可以在点击并拖动浏览器中的此组件时旋转`Box`组件。为了使这个体验更流畅，我们可以在`src/components/Box.js`中为此组件添加一个最小和最大控制距离：
- en: '[PRE16]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Finally, we can allow the `Controls` component, for example, to zoom or pan.
    This can be done by setting the following values:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们可以允许`Controls`组件，例如，进行缩放或平移。这可以通过设置以下值来完成：
- en: '[PRE17]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: After adding these last two values, you can rotate, zoom, and pan the `Box`
    component in 3D from the browser with three.js and React. In the next section
    of this chapter, we'll be rendering 360-degree panorama images to interact with
    as well.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 添加这两个值后，你可以使用three.js和React在浏览器中旋转、缩放和平移`Box`组件。在下一节中，我们将渲染360度全景图像以便与之交互。
- en: Rendering 360-degree panorama images
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 渲染360度全景图像
- en: The application is using a default background that is displayed for the scene,
    but it's also possible to dynamically change the background of our scene. For
    this application, we want our scene background to be either 360 degrees or in
    3D. Online images can be found on numerous stock photo websites that meet the
    requirements.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序正在使用一个默认的背景，用于显示场景，但也可以动态地更改场景的背景。对于这个应用程序，我们希望场景的背景是360度或3D。符合要求的在线图片可以在众多股票照片网站上找到。
- en: 'In this book''s GitHub repository, you can find a selection of assets for this
    chapter under the `chapter-10-assets` directory, including two 360-degree panorama
    images. You need to download both the `beach.jpeg` and `mountain.jpeg` files and
    place them in the `public` directory of the application. The file structure for
    this chapter will therefore become the following:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书的GitHub仓库中，你可以在`chapter-10-assets`目录下找到本章的资产选择，包括两张360度全景图像。你需要下载`beach.jpeg`和`mountain.jpeg`这两个文件，并将它们放置在应用程序的`public`目录中。因此，本章的文件结构将如下所示：
- en: '[PRE18]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: After we've added the 360-degree panorama images to the project, we can proceed
    by rendering them in the background of our scene on the `Canvas`. Using components
    and Hooks from both three.js and `@react-three/fiber`, we can create a 360-degree
    view in which we can also render the 3D object that we created in the previous
    section of this chapter.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们将360度全景图像添加到项目中后，我们可以通过在场景的`Canvas`背景中渲染它们来继续操作。使用来自three.js和`@react-three/fiber`的组件和钩子，我们可以创建一个360度视图，在其中我们还可以渲染本章前一部分创建的3D对象。
- en: 'To add a 360-degree background, we need to follow a couple of steps:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加360度背景，我们需要遵循几个步骤：
- en: 'Create a new file called `Panorama.js` in the `components` directory in the
    `src` file of the project. In this file, the setup to create a new mesh with the
    360-degree image as a texture is added. First, we need to import the dependencies:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目的`src`文件中的`components`目录下创建一个名为`Panorama.js`的新文件。在这个文件中，添加了使用360度图像作为纹理创建新网格的设置。首先，我们需要导入依赖项：
- en: '[PRE19]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Below the imports, we need to define the backgrounds that we want to use for
    this application:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在导入之后，我们需要定义我们想要为这个应用程序使用的背景：
- en: '[PRE20]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'At the bottom of this file, the actual `Panorama` component must be created,
    which uses a Hook from `@react-three/fiber` and returns a `mesh` element from
    three.js with two other three.js elements:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此文件的底部，必须创建实际的`Panorama`组件，它使用`@react-three/fiber`的钩子，并返回一个来自three.js的`mesh`元素以及两个其他three.js元素：
- en: '[PRE21]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The `useLoader` Hook takes the `THREE.TextureLoader` and the background image
    to create an object that can be used by `meshBasicMaterial` as a texture. It will
    use the first entry of the `backgrounds` array, something we can make dynamic
    later on. The `sphereBufferGeometry` defines our 360-degree view within our scene
    on the `Canvas`.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`useLoader`钩子使用`THREE.TextureLoader`和背景图像来创建一个可以被`meshBasicMaterial`用作纹理的对象。它将使用`backgrounds`数组的第一个条目，这是我们稍后可以使其动态化的内容。`sphereBufferGeometry`定义了我们场景中的360度视图，在`Canvas`上。'
- en: 'This new `Panorama` component must be imported in `src/App.js` so it can be
    rendered. Make sure to render this component within a `Suspense` component from
    React, as it''s a dynamic component due to the usage of the `useLoader` Hook:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个新的`Panorama`组件必须在`src/App.js`中导入，以便它可以被渲染。确保在React的`Suspense`组件内渲染此组件，因为它是一个动态组件，这是由于使用了`useLoader`钩子：
- en: '[PRE22]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'You can now open the application in the browser again to see how the 360-degree
    panorama is rendered, also with our previously created 3D object:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以再次在浏览器中打开应用程序，看看360度全景图像是如何渲染的，也包括我们之前创建的3D对象：
- en: '![Figure 10.2 – Rendering a 360-degree panorama image](img/Figure_10.2_B17390.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![图10.2 – 渲染360度全景图像](img/Figure_10.2_B17390.jpg)'
- en: Figure 10.2 – Rendering a 360-degree panorama image
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.2 – 渲染360度全景图像
- en: Note
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you try zooming in and out of the 360-degree panorama images, you'll notice
    that only the `Box` component is changing its size. The background images are
    set to cover the full background and are not in 3D.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你尝试放大和缩小360度全景图像，你会注意到只有`Box`组件的大小在改变。背景图像被设置为覆盖整个背景，并且不在3D中。
- en: Besides rendering a 360-degree panorama image, we can also make this interactive.
    By adding more three.js elements and using React, we can let the user change the
    background image by clicking on, for example, the 3D box.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 除了渲染360度全景图像外，我们还可以使其具有交互性。通过添加更多的three.js元素和使用React，我们可以让用户通过点击，例如3D盒子来更改背景图像。
- en: 'To change the backgrounds, we need to combine three.js with React and use local
    state management to keep track of which 360-degree panorama image should be rendered.
    Three.js elements rendered by `@react-three/fiber` can also handle `onClick` events
    to make them clickable components. Let''s implement this:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改背景，我们需要将three.js与React结合使用，并使用本地状态管理来跟踪应该渲染哪个360度全景图像。由`@react-three/fiber`渲染的three.js元素也可以处理`onClick`事件，使其成为可点击的组件。让我们来实现这个：
- en: 'In the `src/components/Panorama.js` file, we need to import the `useState`
    Hook from React, and create a local state variable with it:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/components/Panorama.js`文件中，我们需要从React导入`useState`钩子，并使用它创建一个局部状态变量：
- en: '[PRE23]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Based on the value for `activeBackground`, we can select the 360-degree panorama
    image that should be rendered as the background. The `id` field of the `backgrounds`
    array is used to match the local state variable to the correct background:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据`activeBackground`的值，我们可以选择应该作为背景渲染的360度全景图像。`backgrounds`数组的`id`字段用于将本地状态变量与正确的背景匹配：
- en: '[PRE24]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'In the return statement of this `Panorama` component, we need to wrap the returned
    `mesh` element in a `group` element. This `group` element lets three.js return
    multiple interactive elements at once:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个`Panorama`组件的返回语句中，我们需要将返回的`mesh`元素包裹在一个`group`元素中。这个`group`元素允许three.js一次返回多个交互元素：
- en: '[PRE25]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'In this `group` element, we can add another clickable `group` element with
    the `onClick` event that will update the value for `activeBackground` when clicked
    on: // ...And add the `group` element with the `onClick` event, which will update
    the value for `activeBackground` when clicked on:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个`group`元素中，我们可以添加另一个带有`onClick`事件的可点击的`group`元素，当点击时将更新`activeBackground`的值：//
    ...添加带有`onClick`事件的`group`元素，当点击时将更新`activeBackground`的值：
- en: '[PRE26]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'To prevent the `Box` component from being rendered multiple times, we need
    to remove it from the `src/App.js` file:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了防止`Box`组件被多次渲染，我们需要将其从`src/App.js`文件中移除：
- en: '[PRE27]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: From our application, you can now change the 360-degree panorama image that
    is being rendered by clicking on the 3D square. We can improve the user experience
    more by making the `mesh` element interactive, for example, when the user hovers
    over the `Box`.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 从我们的应用程序中，你现在可以通过点击3D正方形来更改正在渲染的360度全景图像。我们可以通过使`mesh`元素交互式来进一步提高用户体验，例如，当用户悬停在`Box`上时。
- en: 'In the `src/components/Box.js` file, we can add a local state variable to check
    whether the component is `hovered`, which is triggered from the `mesh` element:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/components/Box.js`文件中，我们可以添加一个本地状态变量来检查组件是否被`hovered`，这由`mesh`元素触发：
- en: '[PRE28]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'When the local state variable `hovered` is `true`, we want the `color` prop
    on the `meshStandardMaterial` element to change to a different color:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当本地状态变量`hovered`为`true`时，我们希望`meshStandardMaterial`元素的`color`属性改变为不同的颜色：
- en: '[PRE29]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'If you now open the application on `http://localhost:3000`, you can see the
    `Box` component changes from blue to purple when hovered over. Clicking on it
    will render a different 360-degree panorama image, which is the beach:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你现在打开`http://localhost:3000`上的应用程序，你可以看到当鼠标悬停在`Box`组件上时，它会从蓝色变为紫色。点击它将渲染一个不同的360度全景图像，即海滩：
- en: '![Figure 10.3 – Hovering over and clicking on 3D elements'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.3 – 悬停在3D元素上并点击'
- en: '](img/Figure_10.3_B17390.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_10.3_B17390.jpg]'
- en: Figure 10.3 – Hovering over and clicking on 3D elements
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.3 – 悬停在3D元素上并点击
- en: Besides rendering 360-degree backgrounds and creating interactive 3D components,
    we can also import external 3D objects in React with three.js and animate them.
    This will be shown in the next section, by adding `react-spring` to our application.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 除了渲染360度背景和创建交互式3D组件外，我们还可以使用three.js在React中导入外部3D对象并对其动画化。这将在下一节中展示，通过向我们的应用程序添加`react-spring`。
- en: Animating 3D objects
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动画3D对象
- en: So far, all the components you've added in this chapter that were created with
    three.js didn't have animations. With three.js, you can also import external 3D
    objects and animate components with `react-spring`. This library works similar
    to the Animated API that we used for React Native earlier in this book.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你在这个章节中添加的所有使用three.js创建的组件都没有动画。使用three.js，你还可以导入外部3D对象，并使用`react-spring`动画化组件。这个库的工作方式与我们在本书早期用于React
    Native的Animated API类似。
- en: Importing 3D objects
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 导入3D对象
- en: Before getting into animating 3D objects in React, let's import an external
    3D object with three.js first. Three.js can import multiple file formats for 3D
    objects, including `.obj`, `.gltf`, and `.glb`. These file formats are the most
    common ones for creating 3D objects that can be used in other programs. For this
    chapter, we'll be using a `.glb` file with a 3D version of the Ingenuity Mars
    Helicopter from NASA. This file can be found in the repository for this book in
    the `chapter-10-assets` directory, and you can place it in the `public` directory
    next to the 360-degree panorama images that you downloaded in the previous section.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在React中开始动画化3D对象之前，让我们首先使用three.js导入一个外部3D对象。Three.js可以导入多种3D对象的文件格式，包括`.obj`、`.gltf`和`.glb`。这些文件格式是创建可用于其他程序的3D对象中最常见的格式。对于本章，我们将使用一个包含NASA
    Ingenuity火星直升机的3D版本的`.glb`文件。这个文件可以在本书的`chapter-10-assets`目录中的仓库中找到，并且你可以将它放在你之前在上一节下载的360度全景图像旁边的`public`目录中。
- en: 'Both `.gltf` and `.glb` files can be loaded into three.js with `GLTFLoader`,
    which can load GLTF objects. GLTF is one of the most popular formats for 3D objects,
    also called the `public` directory can be imported into a component, in a new
    file called `Helicopter.js` in the `components` directory:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`.gltf`和`.glb`文件都可以使用`GLTFLoader`加载到three.js中，它可以加载GLTF对象。GLTF是3D对象中最受欢迎的格式之一，也可以将`public`目录导入到`components`目录中的一个新的文件`Helicopter.js`中：'
- en: '[PRE30]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: This component again uses the `useLoader` Hook from `@react-three/fiber`, and
    also imports the `GLTFLoader` that it needs to render the 3D GLTF object. A primitive
    element with the GLTF object is returned within a `group` element that has a custom
    position.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这个组件再次使用了来自`@react-three/fiber`的`useLoader`钩子，并且也导入了它需要的`GLTFLoader`来渲染3D GLTF对象。一个包含GLTF对象的原始元素被返回在具有自定义位置的`group`元素中：
- en: 'In `src/App.js`, we can return this new `Helicopter` component from within
    a `Suspense` component, as the `useLoader` Hook makes this a dynamic component:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在`src/App.js`中，我们可以在`Suspense`组件内部返回这个新的`Helicopter`组件，因为`useLoader`钩子使它成为一个动态组件：
- en: '[PRE31]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'This will add the Ingenuity Mars Helicopter from NASA to our application, rendered
    in a position close to our 3D box. You can see what this looks like in the following
    screenshot:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把美国国家航空航天局（NASA）的 Ingenuity Mars Helicopter 添加到我们的应用程序中，渲染在一个接近我们的 3D 盒子的位置。你可以在下面的屏幕截图中看到它的样子：
- en: '![Figure 10.4 – Rendering an external 3D object with three.js'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.4 – 使用 three.js 渲染外部 3D 对象'
- en: '](img/Figure_10.4_B17390.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.4](img/Figure_10.4_B17390.jpg)'
- en: Figure 10.4 – Rendering an external 3D object with three.js
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.4 – 使用 three.js 渲染外部 3D 对象
- en: In the next part of this section, we'll animate this 3D object using a popular
    React library called `react-spring`.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节的下一部分，我们将使用一个流行的 React 库 `react-spring` 来动画化这个 3D 对象。
- en: Animating 3D objects with React
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 React 动画化 3D 对象
- en: In a previous chapter of this book, we animated components in React Native with
    the Animated API. For web-based React applications, we can use another library
    for this, which is `react-spring`. Using this library, we can add animations to,
    for example, rotate, move, or fade components in and out of a frame. As has been
    the case in other examples of using React, this library provides Hooks to add
    these interactions.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的前一章中，我们使用 Animated API 在 React Native 中动画化组件。对于基于 Web 的 React 应用程序，我们可以使用另一个库来完成这项工作，这个库是
    `react-spring`。使用这个库，我们可以添加动画，例如旋转、移动或淡入淡出组件。正如在其他使用 React 的例子中一样，这个库提供了 Hooks
    来添加这些交互。
- en: 'There is a special library from `react-spring` that works well with `@react-three/fiber`,
    which we can install from npm:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`react-spring` 有一个与 `@react-three/fiber` 协作良好的特殊库，我们可以从 npm 中安装它：'
- en: '[PRE32]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'After the installation is complete, we can import the `useSpring` Hook and
    the `animated` element from this library in our `Helicopter` component in `src/components/Helicopter.js`:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，我们可以在 `src/components/Helicopter.js` 中的 `Helicopter` 组件中导入 `useSpring`
    钩子和 `animated` 元素：
- en: '[PRE33]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'We can pass the configuration for our animation to the `useSpring` Hook, so
    it will create the props we can pass to the element that we want to animate:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将动画配置传递给 `useSpring` 钩子，这样它就会创建我们可以传递给想要动画化的元素的属性：
- en: '[PRE34]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: The object with our animation configuration describes that we want to change
    the `position` prop of our 3D object. The starting position is described and the
    different positions it should also move to. This animation will also be looped.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的动画配置对象描述了我们要改变 3D 对象的 `position` 属性。描述了起始位置以及它应该移动到的不同位置。这个动画也将循环播放。
- en: 'The animated element from `react-spring` can then be used to extend the `group`
    element from three.js that is wrapping our 3D object. This `group` element will
    become an animated element that also takes the props that were created by the
    `useSpring` Hook:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以使用来自 `react-spring` 的动画元素来扩展 three.js 中的 `group` 元素，该元素包裹着我们的 3D 对象。这个
    `group` 元素将变成一个动画元素，并接受由 `useSpring` 钩子创建的属性：
- en: '[PRE35]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Now, when you open the application, the helicopter will be moving around in
    different positions on the 360-degree panorama image.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当你打开应用程序时，直升机将在 360 度全景图像的不同位置移动。
- en: Summary
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this final chapter, you've combined all of the knowledge you have gathered
    from this book to create a VR application with React. We were able to do this
    by combining it with three.js, which is a JavaScript library for creating 3D applications.
    The project we created in this chapter serves a different and more niche use case
    than the other React projects in this book. It has basic animations, as well as
    a 3D helicopter object that flies away into the distance.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的最后，你将本书中积累的所有知识结合起来，使用 React 创建了一个 VR 应用程序。我们能够做到这一点，是通过将其与 three.js 结合，这是一个用于创建
    3D 应用的 JavaScript 库。本章中创建的项目与其他本书中的 React 项目相比，具有不同的和更专业的用途。它具有基本的动画，以及一个飞向远方的
    3D 直升机对象。
- en: With this final chapter, you've completed all 10 chapters of this book and have
    created 10 projects with React and React Native. Now, you have a solid understanding
    of everything that you can do with React and how to use it across different platforms.
    While React and React Native are already mature libraries, new features are added
    continuously. Even as you finish reading this book, there will probably be new
    features you can check out. My main advice would be to never stop learning and
    keep a close eye on the documentation whenever a new feature is announced.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '通过本章，你已经完成了这本书的所有 10 章，并使用 React 和 React Native 创建了 10 个项目。现在，你对可以使用 React
    做什么以及如何在不同的平台上使用它有了坚实的理解。虽然 React 和 React Native 已经是成熟的库，但新功能仍在持续添加。即使你在阅读这本书的过程中，也可能会有新的功能可以探索。我的主要建议是永远不要停止学习，并在新功能宣布时密切关注文档。 '
- en: Further reading
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Three.js: [https://threejs.org/](https://threejs.org/)'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Three.js：[https://threejs.org/](https://threejs.org/)
- en: '@react-three/fiber: [https://docs.pmnd.rs/react-three-fiber/getting-started/introduction](https://docs.pmnd.rs/react-three-fiber/getting-started/introduction)'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '@react-three/fiber：[https://docs.pmnd.rs/react-three-fiber/getting-started/introduction](https://docs.pmnd.rs/react-three-fiber/getting-started/introduction)'
- en: 'NASA 3D images: [https://mars.nasa.gov/3d/images/](https://mars.nasa.gov/3d/images/)'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NASA 3D 图像：[https://mars.nasa.gov/3d/images/](https://mars.nasa.gov/3d/images/)
- en: '![Figure 10.1 – Rendering a 3D element with Three.js](img/Figure_10.1_B17390.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.1 – 使用 Three.js 渲染 3D 元素](img/Figure_10.1_B17390.png)'
