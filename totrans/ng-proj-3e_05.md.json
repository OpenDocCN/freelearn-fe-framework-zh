["```js\nng new my-editor --defaults \n```", "```js\n    npm install ngx-wig \n    ```", "```js\n    import { NgModule } from '@angular/core';\n    import { BrowserModule } from '@angular/platform-browser';\n    **import** **{** **NgxWigModule** **}** **from****'****ngx-wig'****;**\n    import { AppComponent } from './app.component';\n    @NgModule({\n      declarations: [\n        AppComponent\n      ],\n      imports: [\n        BrowserModule,\n        **NgxWigModule**\n      ],\n      providers: [],\n      bootstrap: [AppComponent]\n    })\n    export class AppModule { } \n    ```", "```js\n    ng generate component editor \n    ```", "```js\n    <ngx-wig placeholder=\"Enter your content\"></ngx-wig> \n    ```", "```js\n    <app-editor></app-editor> \n    ```", "```js\n    html, body {\n      margin: 0;\n      width: 100%;\n      height: 100%;\n    }\n    .ng-wig, .nw-editor-container, .nw-editor  {\n      display: flex !important;\n      flex-direction: column;\n      height: 100% !important;\n      overflow: hidden;\n    } \n    ```", "```js\nnpm install -D electron \n```", "```js\n    import { app, BrowserWindow } from 'electron';\n    function createWindow () {\n      const mainWindow = new BrowserWindow({\n        width: 800,\n        height: 600\n      });\n      mainWindow.loadFile('index.html');\n    }\n    app.whenReady().then(() => {\n      createWindow();\n    }); \n    ```", "```js\n    {\n      \"extends\": \"../../tsconfig.json\",\n      \"compilerOptions\": {\n        \"importHelpers\": false\n      },\n      \"include\": [\n        \"**/*.ts\"\n      ]\n    } \n    ```", "```js\n    npm install -D webpack-cli \n    ```", "```js\n    npm install -D ts-loader \n    ```", "```js\nconst path = require('path');\nconst src = path.join(process.cwd(), 'src', 'electron');\nmodule.exports = {\n  mode: 'development',\n  devtool: 'source-map',\n  entry: path.join(src, 'main.ts'),\n  output: {\n    path: path.join(process.cwd(), 'dist', 'my-editor'),\n    filename: 'shell.js'\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.ts$/,\n        loader: 'ts-loader',\n        options: {\n          configFile: path.join(src, 'tsconfig.json')\n        }\n      }\n    ]\n  },\n  target: 'electron-main'\n}; \n```", "```js\n    npm install -D concurrently \n    ```", "```js\n    \"scripts\": {\n      \"ng\": \"ng\",\n      \"start\": \"ng serve\",\n      \"build\": \"ng build\",\n      \"watch\": \"ng build --watch --configuration development\",\n      \"test\": \"ng test\",\n      **\"start:desktop\"****:****\"concurrently \\\"ng build --delete-output-path=false --watch\\\" \\\"webpack --watch\\\"\"**\n    **}** \n    ```", "```js\nnpm run start:desktop \n```", "```js\n    function createWindow () {\n      const mainWindow = new BrowserWindow({\n        width: 800,\n        height: 600,\n        **webPreferences****: {**\n    **nodeIntegration****:** **true****,**\n    **contextIsolation****:** **false**\n     **}**\n      });\n      mainWindow.loadFile('index.html');\n    } \n    ```", "```js\n    npm install ngx-electronyzer \n    ```", "```js\n    ng generate service editor \n    ```", "```js\n    import { Injectable } from '@angular/core';\n    **import** **{** **ElectronService** **}** **from****'ngx-electronyzer'****;**\n    @Injectable({\n      providedIn: 'root'\n    })\n    export class EditorService {\n      constructor(**private** **electronService: ElectronService**) { }\n    } \n    ```", "```js\n    getContent(): Promise<string> {\n      return this.electronService.ipcRenderer.invoke('getContent');\n    } \n    ```", "```js\n    setContent(content: string) {\n      this.electronService.ipcRenderer.invoke('setContent', content);\n    } \n    ```", "```js\n    import { Component, **OnInit** } from '@angular/core';\n    **import** **{** **EditorService** **}** **from****'../editor.service'****;**\n    @Component({\n      selector: 'app-editor',\n      templateUrl: './editor.component.html',\n      styleUrls: ['./editor.component.css']\n    })\n    export class EditorComponent **implements****OnInit** {\n      **myContent =** **''****;**\n    **constructor****(****private** **editorService: EditorService****) {}**\n    } \n    ```", "```js\n    ngOnInit(): void {\n      this.getContent();\n    }\n    private async getContent() {\n      this.myContent = await this.editorService.getContent();\n    } \n    ```", "```js\n    saveContent(content: string) {\n      this.editorService.setContent(content);\n    } \n    ```", "```js\n    <ngx-wig placeholder=\"Enter your content\" **[****ngModel****]=****\"myContent\"** **(****contentChange****)=****\"saveContent($event)\"**></ngx-wig> \n    ```", "```js\n    import { NgModule } from '@angular/core';\n    import { BrowserModule } from '@angular/platform-browser';\n    **import** **{** **FormsModule** **}** **from****'@angular/forms'****;**\n    import { NgxWigModule } from 'ngx-wig';\n    import { AppComponent } from './app.component';\n    import { EditorComponent } from './editor/editor.component';\n    @NgModule({\n      declarations: [\n        AppComponent,\n        EditorComponent\n      ],\n      imports: [\n        BrowserModule,\n        NgxWigModule,\n        **FormsModule**\n      ],\n      providers: [],\n      bootstrap: [AppComponent]\n    })\n    export class AppModule { } \n    ```", "```js\n    import { app, BrowserWindow, **ipcMain** } from 'electron';\n    **import** ***** **as** **fs** **from****'fs'****;**\n    **import** ***** **as** **path** **from****'path'****;** \n    ```", "```js\n    const contentFile = path.join(app.getPath('userData'), 'content.html'); \n    ```", "```js\n    ipcMain.handle('getContent', () => {\n      if (fs.existsSync(contentFile)) {\n        const result = fs.readFileSync(contentFile);\n        return result.toString();\n      }\n      return '';\n    }); \n    ```", "```js\n    ipcMain.handle('setContent', ({}, content: string) => {\n      fs.writeFileSync(contentFile, content);\n    }); \n    writeFileSync method of the fs library to write the value of the content property in the file.\n    ```", "```js\n    const path = require('path');\n    const baseConfig = require('./webpack.config');\n    module.exports = {\n      ...baseConfig,\n      mode: 'development',\n      devtool: 'source-map',\n      output: {\n        path: path.join(process.cwd(), 'dist', 'my-editor'),\n        filename: 'shell.js'\n      }\n    }; \n    ```", "```js\n    \"start:desktop\": \"concurrently \\\"ng build --delete-output-path=false --watch\\\" \\\"webpack **--config webpack.dev.config.js** --watch\\\"\" \n    ```", "```js\n    const path = require('path');\n    const baseConfig = require('./webpack.config');\n    module.exports = {\n      ...baseConfig,\n      output: {\n        path: path.join(process.cwd(), 'dist', 'my-editor'),\n        filename: 'main.js'\n      }\n    }; \n    ```", "```js\n    \"scripts\": {\n      \"ng\": \"ng\",\n      \"start\": \"ng serve\",\n      \"build\": \"ng build\",\n      \"watch\": \"ng build --watch --configuration development\",\n      \"test\": \"ng test\",\n      \"start:desktop\": \"concurrently \\\"ng build --delete-output-path=false --watch\\\" \\\"webpack --config webpack.dev.config.js --watch\\\"\",\n      **\"build:electron\"****:** **\"ng build && webpack --config webpack.prod.config.js\"**\n    } \n    ```", "```js\n    npm install -D electron-packager \n    ```", "```js\n    \"scripts\": {\n      \"ng\": \"ng\",\n      \"start\": \"ng serve\",\n      \"build\": \"ng build\",\n      \"watch\": \"ng build --watch --configuration development\",\n      \"test\": \"ng test\",\n      \"start:desktop\": \"concurrently \\\"ng build --delete-output-path=false --watch\\\" \\\"webpack --config webpack.dev.config.js --watch\\\"\",\n      \"build:electron\": \"ng build && webpack --config webpack.prod.config.js\",\n      **\"package\"****:****\"electron-packager dist/my-editor --out=dist --asar\"**\n    } \n    ```", "```js\n    {\n      \"name\": \"my-editor\",\n      \"main\": \"main.js\"\n    } \n    ```", "```js\n    const path = require('path');\n    const baseConfig = require('./webpack.config');\n    **const****CopyWebpackPlugin** **=** **require****(****'copy-webpack-plugin'****);**\n    module.exports = {\n      ...baseConfig,\n      output: {\n        path: path.join(process.cwd(), 'dist', 'my-editor'),\n        filename: 'main.js'\n      },\n    **plugins****: [**\n    **new****CopyWebpackPlugin****({**\n    **patterns****: [**\n     **{**\n    **context****: path.****join****(process.****cwd****(),** **'src'****,**\n    **'electron'****),**\n    **from****:** **'****package.json'**\n     **}**\n     **]**\n     **})**\n     **]**\n    }; \n    ```", "```js\n    npm run build:electron \n    ```", "```js\n    npm run package \n    ```"]