["```js\npost: () => Relay.QL \n  fragment on Articles { \n    title, \n    content \n  } \n\n```", "```js\nSELECT title, content FROM Articles \n\n```", "```js\nconst articlesLength = await falcorModel. \n  getValue('articles.length'). \n  then((length) => length); \n\nconst articles = await falcorModel. \n  get(['articles', {from: 0, to: articlesLength-1}, \n   ['_id','articleTitle', 'articleContent']]).  \n  then((articlesResponse) => articlesResponse.json.articles); \n\n```", "```js\n// this code is already in the codebase \nconst falcor = require('falcor'); \nconst FalcorDataSource = require('falcor-http-datasource'); \n\nconst model = new falcor.Model({ \n  source: new FalcorDataSource('/model.json') \n}); \nexport default model; \n\n```", "```js\nimport falcor from 'falcor'; \nimport FalcorDataSource from 'falcor-http-datasource'; \n\nclass PublishingAppDataSource extends FalcorDataSource { \n  onBeforeRequest ( config ) { \n    const token = localStorage.token; \n    const username = localStorage.username; \n    const role = localStorage.role; \n\n    if (token && username && role) { \n      config.headers['token'] = token; \n      config.headers['username'] = username; \n      config.headers['role'] = role; \n    } \n  } \n} \n\nconst model = new falcor.Model({ \n  source: new PublishingAppDataSource('/model.json') \n}); \nexport default model; \n\nextends keyword from ECMAScript6 shows an example of where the simplicity of the class syntax shines. Extending the FalcorDataSource means that PublishingAppDataSource inherits everything that the FalcorDataSource has and it makes the onBeforeRequest method have our custom behavior (by mutating config.headers). The onBeforeRequest method is checking the configuration mutated by us before our xhr instance is created. This helps us modify the XMLHttpRequest with a token, username, and role--in case our app's user logs out in the meantime, we can send that information to the backend.\n```", "```js\n// this shall be already in your codebase \napp.use('/model.json', falcorExpress.dataSourceRoute((req, res) \n => { \n  return new falcorRouter(routes); \n})); \n\n```", "```js\napp.use('/model.json', falcorExpress.dataSourceRoute((req, res) \n => { \n  return new falcorRouter( \n      [] \n        .concat(routes(req, res)) \n    ); \n})); \n\n```", "```js\n// this code is already in your codebase: \nconst PublishingAppRoutes = [ \n    ...sessionRoutes, \n  { \n  route: 'articles.length', \n    get: () => { \n      return Article.count({}, function(err, count) { \n        return count; \n      }).then ((articlesCountInDB) => { \n        return { \n          path: ['articles', 'length'], \n          value: articlesCountInDB \n        } \n      }) \n  } \n}, \n//  \n// ...... There is more code between, it has been truncated in \n //order to save space \n// \nexport default PublishingAppRoutes;  \n\n```", "```js\nimport configMongoose from './configMongoose'; \nimport sessionRoutes from './routesSession'; \nimport jsonGraph from 'falcor-json-graph'; \nimport jwt from 'jsonwebtoken'; \nimport jwtSecret from './configSecret'; \n\nlet $atom = jsonGraph.atom; // this will be explained later \n                            //in the chapter \nconst Article = configMongoose.Article; \n\n```", "```js\nexport default ( req, res ) => { \n  let { token, role, username } = req.headers; \n  let userDetailsToHash = username+role; \n  let authSignToken = jwt.sign(userDetailsToHash, \n   jwtSecret.secret); \n  let isAuthorized = authSignToken === token; \n  let sessionObject = {isAuthorized, role, username}; \n\n  console.info(&grave;The ${username} is authorized === &grave;, \n   isAuthorized); \n\n  const PublishingAppRoutes = [ \n      ...sessionRoutes, \n    { \n    route: 'articles.length', \n      get: () => { \n        return Article.count({}, function(err, count) { \n          return count; \n        }).then ((articlesCountInDB) => { \n          return { \n            path: ['articles', 'length'], \n            value: articlesCountInDB \n          } \n        }) \n    } \n  }]; \n\n  return PublishingAppRoutes; \n} \n\n```", "```js\n { \n    route: \n     'articles[{integers}][\"_id\",\"articleTitle\",\"articleContent\"]', \n    get: (pathSet) => { \n      const articlesIndex = pathSet[1]; \n\n      return Article.find({}, function(err, articlesDocs) { \n        return articlesDocs; \n      }).then ((articlesArrayFromDB) => { \n        let results = []; \n        articlesIndex.forEach((index) => { \n          const singleArticleObject = \n           articlesArrayFromDB[index].toObject(); \n\n          const falcorSingleArticleResult = { \n            path: ['articles', index], \n            value: singleArticleObject \n          }; \n\n          results.push(falcorSingleArticleResult); \n        }); \n        return results; \n      }) \n    } \n  } \n\n```", "```js\n{ $type: 'ref', value: ['articlesById', 'STRING_ARTICLE_ID_HERE'] } \n\n```", "```js\n// wait, this is just an example, don't code this here: \nimport jsonGraph from 'falcor-json-graph'; \nlet $ref = jsonGraph.ref; \n// now you can use $ref([x, y]) function \n\n```", "```js\nnpm i --save falcor-json-graph@1.1.7 \n\n```", "```js\n// this is just explanation example, don't write this here \n// we assume that _id comes from MongoDB \n[ \n  { \n    _id: '987654', \n    articleTitle: 'Lorem ipsum - article one', \n    articleContent: 'Here goes the content of the article' \n  }, \n  { \n    _id: '123456', \n    articleTitle: 'Lorem ipsum - article two', \n    articleContent: 'Sky is the limit, the content goes here.' \n  } \n] \n\n```", "```js\n// JSON envelope is an array of two $refs  \n// The following is an example, don't write it \n[ \n  $ref([ articlesById,'987654' ]), \n  $ref([ articlesById,'123456' ]) \n] \n\n```", "```js\n// JSON envelope is an array of two $refs (other notation than \n //above, but the same end effect) \n[ \n  { $type: 'ref', value: ['articlesById', '987654'] }, \n  { $type: 'ref', value: ['articlesById', '123456'] } \n] \n\n```", "```js\n// this is just explanatory example code: \nlet cache = { \n  articles: [ \n    { \n        id: 987654, \n        articleTitle: 'Lorem ipsum - article one', \n        articleContent: 'Here goes the content of the article' \n        numberOfLikes: 0 \n    }, \n    { \n        id: 123456, \n        articleTitle: 'Lorem ipsum - article two from backend', \n        articleContent: 'Sky is the limit, the content goes \n         here.', \n        numberOfLikes: 0 \n    } \n  ], \n  recentlyVisitedArticles: [ \n    { \n        id: 123456, \n        articleTitle: 'Lorem ipsum - article two from backend', \n        articleContent: 'Sky is the limit, the content goes \n         here.', \n        numberOfLikes: 0 \n    } \n  ] \n}; \n\n```", "```js\nlet cache = { \n  articlesById: { \n    987654: { \n        _id: 987654, \n        articleTitle: 'Lorem ipsum - article one', \n        articleContent: 'Here goes the content of the article' \n        numberOfLikes: 0 \n    }, \n    123456: { \n        _id: 123456, \n        articleTitle: 'Lorem ipsum - article two from backend', \n        articleContent: 'Sky is the limit, the content goes \n         here.', \n        numberOfLikes: 0 \n    } \n  }, \n  articles: [ \n    { $type: 'ref', value: ['articlesById', '987654'] }, \n    { $type: 'ref', value: ['articlesById', '123456'] } \n  ], \n  recentlyVisitedArticles: [ \n    { $type: 'ref', value: ['articlesById', '123456'] } \n  ] \n}; \n\n```", "```js\n// example of ref, don't write it yet: \nlet articleRef = $ref(['articlesById', currentMongoID]); \n\n```", "```js\n// this is old codebase, you already shall have it: \nimport mongoose from 'mongoose'; \n\nconst conf = { \n  hostname: process.env.MONGO_HOSTNAME || 'localhost', \n  port: process.env.MONGO_PORT || 27017, \n  env: process.env.MONGO_ENV || 'local', \n}; \n\nmongoose.connect(&grave;mongodb://${conf.hostname}:${conf.port}/ \n ${conf.env}&grave;); \n\nconst articleSchema = { \n  articleTitle:String, \n  articleContent:String \n} \n\n```", "```js\nimport mongoose from 'mongoose'; \nconst Schema = mongoose.Schema; \n\nconst conf = { \n  hostname: process.env.MONGO_HOSTNAME || 'localhost', \n  port: process.env.MONGO_PORT || 27017, \n  env: process.env.MONGO_ENV || 'local', \n}; \n\nmongoose.connect(&grave;mongodb://${conf.hostname}:${conf.port}/ \n ${conf.env}&grave;); \n\nconst articleSchema = new Schema({ \n    articleTitle:String, \n    articleContent:String, \n    articleContentJSON: Object \n  },  \n  {  \n    minimize: false  \n  } \n); \n\n```", "```js\nimport configMongoose from './configMongoose'; \nimport sessionRoutes from './routesSession'; \nimport jsonGraph from 'falcor-json-graph'; // this is new \nimport jwt from 'jsonwebtoken'; \nimport jwtSecret from './configSecret'; \n\nlet $ref = jsonGraph.ref; // this is new \nlet $atom = jsonGraph.atom; // this is new \nconst Article = configMongoose.Article; \n\njsonGraph from 'falcor-json-graph'; and then add let $ref = jsonGraph.ref; and let $atom = jsonGraph.atom.\n```", "```js\n { \n    route: 'articlesById[{keys}][\"_id\",\"articleTitle\", \n     \"articleContent\",\"articleContentJSON\"]', \n      get: function(pathSet) { \n      let articlesIDs = pathSet[1]; \n      return Article.find({ \n            '_id': { $in: articlesIDs} \n        }, function(err, articlesDocs) { \n          return articlesDocs; \n        }).then ((articlesArrayFromDB) => { \n          let results = []; \n\n          articlesArrayFromDB.map((articleObject) => { \n            let articleResObj = articleObject.toObject(); \n            let currentIdString = String(articleResObj['_id']); \n\n            if (typeof articleResObj.articleContentJSON !== \n             'undefined') { \n              articleResObj.articleContentJSON = \n               $atom(articleResObj.articleContentJSON); \n            } \n\n            results.push({ \n              path: ['articlesById', currentIdString], \n              value: articleResObj \n            }); \n          }); \n          return results; \n        }); \n    } \n  }, \n\n```", "```js\n// just an example: \n[ \n  { $type: 'ref', value: ['articlesById', '123456'] }, \n  { $type: 'ref', value: ['articlesById', '987654'] } \n] \n\n```", "```js\n['articlesById', ['123456', '987654']] \n\n```", "```js\n['123456', '987654'] \n\n```", "```js\n// this is already in your codebase: \nreturn Article.find({ \n            '_id': { $in: articlesIDs} \n        }, function(err, articlesDocs) { \n\n```", "```js\n// this already is in your codebase: \narticlesArrayFromDB.map((articleObject) => { \n\n```", "```js\n// this already is in your codebase: \nlet articleResObj = articleObject.toObject(); \nlet currentIdString = String(articleResObj['_id']); \n\nif (typeof articleResObj.articleContentJSON !== 'undefined') { \n  articleResObj.articleContentJSON = \n   $atom(articleResObj.articleContentJSON); \n} \n\nresults.push({ \n  path: ['articlesById', currentIdString], \n  value: articleResObj \n}); \n\n```", "```js\n// this already is in your codebase: \nif (typeof articleResObj.articleContentJSON !== 'undefined') { \n  articleResObj.articleContentJSON = \n   $atom(articleResObj.articleContentJSON); \n} \n\n```", "```js\nUncaught MaxRetryExceededError: The allowed number of retries \nhave been exceeded. \n\n```", "```js\n// this already shall be in your codebase: \n  { \n    route: \n     'articles[{integers}][\"_id\",\"articleTitle\",\"articleContent\"]', \n    get: (pathSet) => { \n      const articlesIndex = pathSet[1]; \n\n      return Article.find({}, function(err, articlesDocs) { \n        return articlesDocs; \n      }).then ((articlesArrayFromDB) => { \n        let results = []; \n        articlesIndex.forEach((index) => { \n          const singleArticleObject = \n           articlesArrayFromDB[index].toObject(); \n\n          const falcorSingleArticleResult = { \n            path: ['articles', index], \n            value: singleArticleObject \n          }; \n\n          results.push(falcorSingleArticleResult); \n        }); \n        return results; \n      }) \n    } \n  } \n\n```", "```js\n { \n    route: 'articles[{integers}]', \n    get: (pathSet) => { \n      const articlesIndex = pathSet[1]; \n\n      return Article.find({}, '_id', function(err, articlesDocs) { \n        return articlesDocs; \n      }).then ((articlesArrayFromDB) => { \n        let results = []; \n        articlesIndex.forEach((index) => { \n          let currentMongoID = \n           String(articlesArrayFromDB[index]['_id']); \n          let articleRef = $ref(['articlesById', currentMongoID]); \n\n          const falcorSingleArticleResult = { \n            path: ['articles', index], \n            value: articleRef \n          }; \n\n          results.push(falcorSingleArticleResult); \n        }); \n        return results; \n      }) \n    } \n  }, \n\n```", "```js\n// this is already in your codebase: \nlet currentMongoID = String(articlesArrayFromDB[index]['_id']); \nlet articleRef = $ref(['articlesById', currentMongoID]); \n\n```", "```js\n// old version \nconst singleArticleObject = articlesArrayFromDB[index].toObject(); \n\nconst falcorSingleArticleResult = { \n  path: ['articles', index], \n  value: singleArticleObject \n}; \n\n```", "```js\n// new improved version \nlet articleRef = $ref(['articlesById', currentMongoID]); \n\nconst falcorSingleArticleResult = { \n  path: ['articles', index], \n  value: articleRef \n}; \n\n```", "```js\n { \n    route: 'articles.add', \n    call: (callPath, args) => { \n      const newArticleObj = args[0]; \n      var article = new Article(newArticleObj); \n\n      return article.save(function (err, data) { \n        if (err) { \n          console.info('ERROR', err); \n          return err; \n        } \n        else { \n          return data; \n        } \n      }).then ((data) => { \n        return Article.count({}, function(err, count) { \n        }).then((count) => { \n          return { count, data }; \n        }); \n      }).then ((res) => { \n        // \n        // we will add more stuff here in a moment, below \n        // \n        return results; \n      }); \n    } \n  } \n\n```", "```js\nreturn article.save(function (err, data) { \n\n```", "```js\nreturn Article.count({}, function(err, count) { \n\n```", "```js\n// \n// we will add more stuff here in a moment, below \n// \n\n```", "```js\n let newArticleDetail = res.data.toObject(); \n let newArticleID = String(newArticleDetail['_id']); \n let NewArticleRef = $ref(['articlesById', newArticleID]); \n let results = [ \n   { \n     path: ['articles', res.count-1], \n     value: NewArticleRef \n   }, \n   { \n     path: ['articles', 'newArticleID'], \n     value: newArticleID \n   }, \n   { \n     path: ['articles', 'length'], \n     value: res.count \n   } \n ]; \n return results; \n\nnewArticleDetail details here. Next, we take the new ID with newArticleID and make sure that it's a string. After all that, we define a new $ref sentinel with let NewArticleRef = $ref(['articlesById', newArticleID]);.\n```", "```js\nget(['articles', {from: 0, to: articlesLength-1}, ['_id','articleTitle', 'articleContent']]). \n\n```", "```js\nget(['articles', {from: 0, to: articlesLength-1}, ['_id','articleTitle', 'articleContent', 'articleContentJSON']]).  \n\n```", "```js\n// this is old function to replace: \n  _articleSubmit() { \n    let newArticle = { \n      articleTitle: this.state.title, \n      articleContent: this.state.htmlContent, \n      articleContentJSON: this.state.contentJSON \n    } \n\n    let newArticleID = 'MOCKEDRandomid' + Math.floor(Math.random() *    \n    10000); \n\n    newArticle['_id'] = newArticleID; \n    this.props.articleActions.pushNewArticle(newArticle); \n    this.setState({ newArticleID: newArticleID}); \n  } \n\n```", "```js\n async _articleSubmit() { \n    let newArticle = { \n      articleTitle: this.state.title, \n      articleContent: this.state.htmlContent, \n      articleContentJSON: this.state.contentJSON \n    } \n\n    let newArticleID = await falcorModel \n      .call( \n            'articles.add', \n            [newArticle] \n          ). \n      then((result) => { \n        return falcorModel.getValue( \n            ['articles', 'newArticleID'] \n          ).then((articleID) => { \n            return articleID; \n          }); \n      }); \n\n    newArticle['_id'] = newArticleID; \n    this.props.articleActions.pushNewArticle(newArticle); \n    this.setState({ newArticleID: newArticleID}); \n  } \n\n```", "```js\nimport falcorModel from '../../falcorModel.js'; \n\n```", "```js\n// this already is in your codebase: \nlet newArticleID = await falcorModel \n  .call( \n        'articles.add', \n        [newArticle] \n      ). \n  then((result) => { \n    return falcorModel.getValue( \n        ['articles', 'newArticleID'] \n      ).then((articleID) => { \n        return articleID; \n      }); \n  }); \n\n```", "```js\n// this already is in your codebase: \nreturn falcorModel.getValue( \n        ['articles', 'newArticleID'] \n      ).then((articleID) => { \n        return articleID; \n      }); \n\n```", "```js\nnewArticle['_id'] = newArticleID; \nthis.props.articleActions.pushNewArticle(newArticle); \nthis.setState({ newArticleID: newArticleID}); \n\n```", "```js\n// this already is in your codebase (just an example) \n    { \n    route: 'articles.length', \n      get: () => { \n        return Article.count({}, function(err, count) { \n          return count; \n        }).then ((articlesCountInDB) => { \n          return { \n            path: ['articles', 'length'], \n            value: articlesCountInDB \n          } \n        }) \n    } \n  },  \n\n```", "```js\n     get: () => { \n        return Article.count({}, function(err, count) { \n          return count; \n        }).then ((articlesCountInDB) => { \n          return [ \n            { \n              path: ['articles', 'length'], \n              value: articlesCountInDB \n            } \n          ] \n        }) \n    } \n\n```", "```js\n// this is already in your codebase \nlet results = []; \n\narticlesArrayFromDB.map((articleObject) => { \n  let articleResObj = articleObject.toObject(); \n  let currentIdString = String(articleResObj['_id']); \n\n  if (typeof articleResObj.articleContentJSON !== 'undefined') { \n    articleResObj.articleContentJSON = \n     $atom(articleResObj.articleContentJSON); \n  } \n  // pushing multiple routes \n  results.push({ \n    path: ['articlesById', currentIdString], \n    value: articleResObj \n  }); \n}); \nreturn results; // returning array of routes' objects \n\n```", "```js\n { \n  route: 'articles.update', \n  call: async (callPath, args) =>  \n    { \n      let updatedArticle = args[0]; \n      let articleID = String(updatedArticle._id); \n      let article = new Article(updatedArticle); \n      article.isNew = false; \n\n      return article.save(function (err, data) { \n        if (err) { \n          console.info('ERROR', err); \n          return err; \n        } \n      }).then ((res) => { \n        return [ \n          { \n            path: ['articlesById', articleID], \n            value: updatedArticle \n          }, \n          { \n            path: ['articlesById', articleID], \n            invalidate: true \n          } \n        ]; \n      }); \n    } \n  }, \n\n```", "```js\n{\"error\":{\"name\":\"MongoError\",\"code\":11000,\"err\":\"insertDocument \n :: caused by :: 11000 E11000 duplicate key error index: \n staging.articles.$_id _ dup key: { : \n ObjectId('1515b34ed65022ec234b5c5f') }\"}} \n\n```", "```js\n// this is already in your code base: \nreturn [ \n  { \n    path: ['articlesById', articleID], \n    value: updatedArticle \n  }, \n  { \n    path: ['articlesById', articleID], \n    invalidate: true \n  } \n]; \n\n```", "```js\n { \n  route: 'articles.delete', \n  call: (callPath, args) =>  \n    { \n      const toDeleteArticleId = args[0]; \n      return Article.find({ _id: toDeleteArticleId }). \n       remove((err) => { \n        if (err) { \n          console.info('ERROR', err); \n          return err; \n        } \n      }).then((res) => { \n        return [ \n          { \n            path: ['articlesById', toDeleteArticleId], \n            invalidate: true \n          } \n        ] \n      }); \n    } \n  } \n\n```", "```js\n// this is old already in your codebase: \n  _articleEditSubmit() { \n    let currentArticleID = this.state.editedArticleID; \n    let editedArticle = { \n      _id: currentArticleID, \n      articleTitle: this.state.title, \n      articleContent: this.state.htmlContent, \n      articleContentJSON: this.state.contentJSON \n    } \n\n    this.props.articleActions.editArticle(editedArticle); \n    this.setState({ articleEditSuccess: true }); \n  } \n\n```", "```js\n async _articleEditSubmit() { \n    let currentArticleID = this.state.editedArticleID; \n    let editedArticle = { \n      _id: currentArticleID, \n      articleTitle: this.state.title, \n      articleContent: this.state.htmlContent, \n      articleContentJSON: this.state.contentJSON \n    } \n\n    let editResults = await falcorModel \n      .call( \n            ['articles', 'update'], \n            [editedArticle] \n          ). \n      then((result) => { \n        return result; \n      }); \n\n    this.props.articleActions.editArticle(editedArticle); \n    this.setState({ articleEditSuccess: true }); \n  } \n\n```", "```js\n// old version \n  _handleDeletion() { \n    let articleID = this.state.editedArticleID; \n    this.props.articleActions.deleteArticle(articleID); \n\n    this.setState({ \n      openDelete: false \n    }); \n    this.props.history.pushState(null, '/dashboard'); \n  } \n\n```", "```js\n async _handleDeletion() { \n    let articleID = this.state.editedArticleID; \n\n    let deletetionResults = await falcorModel \n      .call( \n            ['articles', 'delete'], \n            [articleID] \n          ). \n      then((result) => { \n        return result; \n      }); \n\n    this.props.articleActions.deleteArticle(articleID); \n    this.setState({ \n      openDelete: false \n    }); \n    this.props.history.pushState(null, '/dashboard'); \n  } \n\n```", "```js\nimport AppBar from 'material-ui/lib/app-bar'; \nimport Snackbar from 'material-ui/lib/snackbar'; \n\n```", "```js\nlet errorFuncUtil =  (errMsg, errPath) => { \n} \nexport { errorFuncUtil as errorFunc }; \n\n```", "```js\n// old constructor \nconstructor(props) { \n  super(props); \n} \n\n```", "```js\nconstructor(props) { \n  super(props); \n    this.state = { \n      errorValue: null \n    } \n\n  if (typeof window !== 'undefined') { \n    errorFuncUtil = this.handleFalcorErrors.bind(this); \n  } \n\n} \n\n```", "```js\nhandleFalcorErrors(errMsg, errPath) { \n  let errorValue = &grave;Error: ${errMsg} (path ${JSON.stringify(errPath)})&grave; \n  this.setState({errorValue}); \n} \n\n```", "```js\n render () { \n    let errorSnackbarJSX = null; \n    if (this.state.errorValue) { \n      errorSnackbarJSX = <Snackbar \n        open={true} \n        message={this.state.errorValue} \n        autoHideDuration={8000} \n        onRequestClose={ () => console.log('You can add custom \n         onClose code') } />; \n    } \n\n    const buttonStyle = { \n      margin: 5 \n    }; \n    const homeIconStyle = { \n      margin: 5, \n      paddingTop: 5 \n    }; \n\n    let menuLinksJSX; \n    let userIsLoggedIn = typeof localStorage !== 'undefined' && \n     localStorage.token && this.props.routes[1].name !== 'logout'; \n\n    if (userIsLoggedIn) { \n      menuLinksJSX = ( \n  <span> \n        <Link to='/dashboard'> \n     <RaisedButton label='Dashboard' style={buttonStyle}  /> \n  </Link>  \n        <Link to='/logout'> \n     <RaisedButton label='Logout' style={buttonStyle}  /> \n  </Link>  \n      </span>); \n    } else { \n      menuLinksJSX = ( \n  <span> \n          <Link to='/register'> \n      <RaisedButton label='Register' style={buttonStyle}  /> \n  </Link>  \n        <Link to='/login'> \n    <RaisedButton label='Login' style={buttonStyle}  /> \n  </Link>  \n      </span>); \n    } \n\n    let homePageButtonJSX = ( \n    <Link to='/'> \n        <RaisedButton label={<ActionHome />} \n         style={homeIconStyle}  /> \n      </Link>); \n    return ( \n\n        <div> \n          {errorSnackbarJSX} \n          <AppBar \n            title='Publishing App' \n            iconElementLeft={homePageButtonJSX} \n            iconElementRight={menuLinksJSX} /> \n            <br/> \n            {this.props.children} \n        </div> \n\n    ); \n  } \n\n```", "```js\nlet errorSnackbarJSX = null; \nif (this.state.errorValue) { \n  errorSnackbarJSX = <Snackbar \n    open={true} \n    message={this.state.errorValue} \n    autoHideDuration={8000} />; \n} \n\nerroSnackbarJSX and the following:\n```", "```js\n  <div> \n    {errorSnackbarJSX} \n    <AppBar \n      title='Publishing App' \n      iconElementLeft={homePageButtonJSX} \n      iconElementRight={menuLinksJSX} /> \n      <br/> \n      {this.props.children} \n  </div> \n\n```", "```js\n// already in your codebase, old code: \nimport falcor from 'falcor'; \nimport FalcorDataSource from 'falcor-http-datasource'; \n\nclass PublishingAppDataSource extends FalcorDataSource { \n  onBeforeRequest ( config ) { \n    const token = localStorage.token; \n    const username = localStorage.username; \n    const role = localStorage.role; \n\n    if (token && username && role) { \n      config.headers['token'] = token; \n      config.headers['username'] = username; \n      config.headers['role'] = role; \n    } \n  } \n} \n\nconst model = new falcor.Model({ \n  source: new PublishingAppDataSource('/model.json') \n}); \nexport default model; \n\n```", "```js\nimport falcor from 'falcor'; \nimport FalcorDataSource from 'falcor-http-datasource'; \nimport {errorFunc} from './layouts/CoreLayout'; \n\nclass PublishingAppDataSource extends FalcorDataSource { \n  onBeforeRequest ( config ) { \n    const token = localStorage.token; \n    const username = localStorage.username; \n    const role = localStorage.role; \n\n    if (token && username && role) { \n      config.headers['token'] = token; \n      config.headers['username'] = username; \n      config.headers['role'] = role; \n    } \n  } \n} \n\nlet falcorOptions = { \n  source: new PublishingAppDataSource('/model.json'),    \n  errorSelector: function(path, error) { \n    errorFunc(error.value, path); \n    error.$expires = -1000 * 60 * 2; \n    return error; \n  }  \n}; \n\nconst model = new falcor.Model(falcorOptions); \nexport default model; \n\n```", "```js\nimport {errorFunc} from './layouts/CoreLayout'; \n\n```", "```js\nimport configMongoose from './configMongoose'; \nimport sessionRoutes from './routesSession'; \nimport jsonGraph from 'falcor-json-graph'; \nimport jwt from 'jsonwebtoken'; \nimport jwtSecret from './configSecret'; \n\nlet $ref = jsonGraph.ref; \nlet $atom = jsonGraph.atom; \nlet $error = jsonGraph.error; \nconst Article = configMongoose.Article; \n\n```", "```js\n { \n    route: 'articles[{integers}]', \n    get: (pathSet) => { \n      const articlesIndex = pathSet[1]; \n\n      return { \n        path: ['articles'], \n        value: $error('auth error') \n      } \n\n      return Article.find({}, '_id', function(err, articlesDocs) { \n        return articlesDocs; \n      }).then ((articlesArrayFromDB) => { \n        let results = []; \n        articlesIndex.forEach((index) => { \n          let currentMongoID = \n           String(articlesArrayFromDB[index]['_id']); \n          let articleRef = $ref(['articlesById', currentMongoID]); \n\n          const falcorSingleArticleResult = { \n            path: ['articles', index], \n            value: articleRef \n          }; \n\n          results.push(falcorSingleArticleResult); \n        }); \n        return results; \n      }) \n    } \n  }, \n\n```", "```js\n$ mongod   \n\n```", "```js\n$ npm start  \n\n```", "```js\n { \n    route: 'articles[{integers}]', \n    get: (pathSet) => { \n      const articlesIndex = pathSet[1]; \n\n      return { \n        path: ['articles'], \n        value: $error('auth error') \n      } \n      return Article.find({}, '_id', function(err, articlesDocs) { \n\n```", "```js\n { \n    route: 'articles[{integers}]', \n    get: (pathSet) => { \n      const articlesIndex = pathSet[1]; \n      return Article.find({}, '_id', function(err, articlesDocs) { \n\n```", "```js\n// this already is in your codebase: \nexport default ( req, res ) => { \n  let { token, role, username } = req.headers; \n  let userDetailsToHash = username+role; \n  let authSignToken = jwt.sign(userDetailsToHash, jwtSecret.secret); \n  let isAuthorized = authSignToken === token; \n  let sessionObject = {isAuthorized, role, username}; \n  console.info(&grave;The ${username} is authorized === &grave;, isAuthorized); \n\n```", "```js\n// this is example of falcor-router $errors, don't write it: \nif (isAuthorized === false) { \n  return { \n    path: ['HERE_GOES_THE_REAL_FALCOR_PATH'], \n    value: $error('auth error') \n  } \n} elseif(role !== 'editor') { \n  return { \n    path: ['HERE_GOES_THE_REAL_FALCOR_PATH'], \n    value: $error('you must be an editor in order \n     to perform this action') \n  } \n} \n\n```", "```js\nroute: 'articles.add', \n\n```", "```js\n// this is already in your codebase, old code: \n  { \n    route: 'articles.add', \n    call: (callPath, args) => { \n      const newArticleObj = args[0]; \n      var article = new Article(newArticleObj); \n\n      return article.save(function (err, data) { \n        if (err) { \n          console.info('ERROR', err); \n          return err; \n        } \n        else { \n          return data; \n        } \n      }).then ((data) => { \n// code has been striped out from here for the sake of brevity, \n nothing changes below \n\n```", "```js\n { \n    route: 'articles.add', \n    call: (callPath, args) => { \n      if (sessionObject.isAuthorized === false) { \n        return { \n          path: ['articles'], \n          value: $error('auth error') \n        } \n      } else if(sessionObject.role !== 'editor' && \n       sessionObject.role !== 'admin') { \n        return { \n          path: ['articles'], \n          value: $error('you must be an editor \n           in order to perform this action') \n        } \n      } \n\n      const newArticleObj = args[0]; \n      var article = new Article(newArticleObj); \n\n      return article.save(function (err, data) { \n        if (err) { \n          console.info('ERROR', err); \n          return err; \n        } \n        else { \n          return data; \n        } \n      }).then ((data) => { \n// code has been striped out from here for \n //the sake of brevity, nothing changes below \n\n```", "```js\nroute: 'articles.update', \n\n```", "```js\n// this is already in your codebase, old code: \n  { \n  route: 'articles.update', \n  call: async (callPath, args) =>  \n    { \n      const updatedArticle = args[0]; \n      let articleID = String(updatedArticle._id); \n      let article = new Article(updatedArticle); \n      article.isNew = false; \n\n      return article.save(function (err, data) { \n        if (err) { \n          console.info('ERROR', err); \n          return err; \n        } \n      }).then ((res) => { \n// code has been striped out from here for the \n //sake of brevity, nothing changes below \n\n```", "```js\n { \n  route: 'articles.update', \n  call: async (callPath, args) =>  \n    { \n      if (sessionObject.isAuthorized === false) { \n        return { \n          path: ['articles'], \n          value: $error('auth error') \n        } \n      } else if(sessionObject.role !== 'editor' && \n       sessionObject.role !== 'admin') { \n        return { \n          path: ['articles'], \n          value: $error('you must be an editor \n           in order to perform this action') \n        } \n      } \n\n      const updatedArticle = args[0]; \n      let articleID = String(updatedArticle._id); \n      let article = new Article(updatedArticle); \n      article.isNew = false; \n\n      return article.save(function (err, data) { \n        if (err) { \n          console.info('ERROR', err); \n          return err; \n        } \n      }).then ((res) => { \n// code has been striped out from here \n //for the sake of brevity, nothing changes below \n\narticles delete: \nroute: 'articles.delete', \n\n```", "```js\n// this is already in your codebase, old code: \n\n  { \n  route: 'articles.delete', \n  call: (callPath, args) =>  \n    { \n      let toDeleteArticleId = args[0]; \n      return Article.find({ _id: toDeleteArticleId }).remove((err) => { \n        if (err) { \n          console.info('ERROR', err); \n          return err; \n        } \n      }).then((res) => { \n// code has been striped out from here \n //for the sake of brevity, nothing changes below \n\n```", "```js\n { \n  route: 'articles.delete', \n  call: (callPath, args) =>  \n    { \n\n      if (sessionObject.isAuthorized === false) { \n        return { \n          path: ['articles'], \n          value: $error('auth error') \n        } \n      } else if(sessionObject.role !== 'editor' && \n       sessionObject.role !== 'admin') { \n        return { \n          path: ['articles'], \n          value: $error('you must be an \n           editor in order to perform this action') \n        } \n      } \n\n      let toDeleteArticleId = args[0]; \n      return Article.find({ _id: toDeleteArticleId }).remove((err) => { \n        if (err) { \n          console.info('ERROR', err); \n          return err; \n        } \n      }).then((res) => { \n// code has been striped out from here \n //for the sake of brevity, nothing below changes \n\n```"]