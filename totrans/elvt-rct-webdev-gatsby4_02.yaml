- en: '*Chapter 1*: An Overview of Gatsby.js for the Uninitiated'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, we will take your existing React knowledge and supplement it with
    Gatsby.js (which we will refer to as Gatsby from now on) to create performant
    and accessible static sites. I hope to give you the tools you need to create better
    websites using Gatsby and get you to join the static site revolution. So, *happy
    hacking!*
  prefs: []
  type: TYPE_NORMAL
- en: This chapter starts with a brief historical look at the static web and why Gatsby
    was created. Then, we'll think about what Gatsby is and how it builds on React.
    Next, we'll go through some of the use cases of Gatsby and identify Gatsby's competitors.
    Finally, we'll set up a basic Gatsby project, having created our first few pages.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: A brief history of the static web
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is Gatsby?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gatsby use cases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gatsby's competitors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The code present in this chapter can be found at [https://github.com/PacktPublishing/Elevating-React-Web-Development-with-Gatsby-4/tree/main/Chapter01](https://github.com/PacktPublishing/Elevating-React-Web-Development-with-Gatsby-4/tree/main/Chapter01).
  prefs: []
  type: TYPE_NORMAL
- en: A brief history of the static web
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Static sites have been around nearly as long as the internet itself. They are
    the original blueprint for any website – **HyperText Markup Language** (**HTML**),
    **Cascading Style Sheets** (**CSS**), and **JavaScript** (**JS**). In the 1990s,
    HTML was the only publishing mechanism for the web. To get content on the internet,
    you would have to create a static HTML file and expose it to the internet via
    a server. If you wanted to modify one of your web pages, you would need to change
    its corresponding HTML file directly.
  prefs: []
  type: TYPE_NORMAL
- en: While learning HTML is part of primary education these days, back in the 1990s,
    it was a novel skill to understand and write the language. Creating or editing
    content was costly, as you would require someone with this skill set for every
    modification. Luckily, **Content Management Systems** (**CMSes**) (WordPress,
    Drupal, and so on) soon swooped in to allow non-technical users to control a webpage's
    design and content. It also gave users the ability to store and manage files via
    a user interface. CMSs continue to be utilized today with increasing popularity.
    The number of websites using a CMS has risen from 23.6% to 63% in the last decade.
    Over 75 million sites use WordPress today – that's 30% of the web!
  prefs: []
  type: TYPE_NORMAL
- en: At an almost identical pace, frontend frameworks and libraries have gained notoriety.
    Building single-page applications became commonplace. Today, the most dominant
    UI library in the JS world is Facebook's React.js, which is a small library with
    a handful of functions but some big ideas – a virtual DOM, **JavaScript Syntax
    Extension** (**JSX**), and componentization. There is no denying how much impact
    React has had on web development. In 2020, 80% of JS developers had used it, and
    70% of JS developers said they would use it again.
  prefs: []
  type: TYPE_NORMAL
- en: Frontend frameworks have entirely changed how developers approach web development,
    giving them the flexibility to focus on functionality over content and drastically
    speeding up their workflows. But you're only as fast as your slowest team member.
    The clunky nature of CMS platforms was revealed when developers started to employ
    these frameworks and integrate them with CMSs. Traditional CMS workflows made
    use of databases and environments that frontend frameworks had removed from the
    equation. Combining this with CMS security and bottleneck issues led to the rebirth
    of static sites.
  prefs: []
  type: TYPE_NORMAL
- en: Kyle Mathews, the founder of Gatsby, was a catalyst for this trend. He noticed
    that the expectations on website accessibility and performance increased dramatically.
    He observed apps investing millions of dollars in user experience. There is no
    denying that the disparity between a 2005 and 2015 website was significant. In
    a competitive environment such as the web, you have to have a product that can
    stand out. Mathews took a step back, identified gaps in existing tooling, and
    asked what the ideal product might be. This research is what led him to create
    Gatsby.
  prefs: []
  type: TYPE_NORMAL
- en: It's almost poetic that we have gone full circle and returned to static content
    because there is no beating it when it comes to speed and performance.
  prefs: []
  type: TYPE_NORMAL
- en: What is Gatsby?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Gatsby is a free, open source static site generator that harnesses React. Static
    site generators are software applications that create static pages from a template
    or component and supplement them with content from a source. Static site generators
    are an alternative to a more traditional database-driven CMS, such as WordPress.
    In these conventional systems, content is managed and stored in a database. When
    the server receives a particular URL request, the server retrieves data from the
    database, mixes it with a template file, and generates an HTML page as its response.
    Generating HTML on demand can be a time-consuming process and can leave the user
    twiddling their thumbs or, worse, leaving your site. Bounce rates (the percentage
    of visitors to a particular website who navigate away from the site after viewing
    only one page) hover below 10% for websites that take less than 3 seconds to load,
    but the number jumps to 24% for a 4-second load time and 38% for a 5-second load
    time.
  prefs: []
  type: TYPE_NORMAL
- en: Static site generators like Gatsby, on the other hand, generate pages during
    a build process. During this process, Gatsby brings in data to its GraphQL layer,
    where it can be queried in pages and templates. The requested data is then stored
    in JSON and accessed by the built pages, which are composed of HTML, JS, and CSS
    files. A user can deploy these generated pages to a server. When it receives a
    request, the server responds with predetermined, static, rendered HTML. As these
    static pages are generated at build time, they eliminate the latency that databases
    would introduce. You can even do away with web servers altogether and have your
    site served via a CDN pointing to a storage medium, such as an AWS **Simple Storage
    Service** (**S3**) bucket. The difference is striking; web experiences built with
    Gatsby are lightning fast, as nothing can be faster than sending static content.
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: A static site can contain dynamic and exciting experiences! It is a common misconception
    that "static" means the site is stationary. This could not be further from the
    truth. The word "static" only refers to the manner in which files are retrieved
    by a client.
  prefs: []
  type: TYPE_NORMAL
- en: While Gatsby is known for static site generation, recent versions also include
    server-side and deferred static generation, rendering functionality for when static
    generation is not enough.
  prefs: []
  type: TYPE_NORMAL
- en: Aside from creating a blazing-fast user experience, Gatsby also has a focus
    on developer experience. As we learn and build, I'm sure you will start to recognize
    how easy it is to use. The way it achieves this can be broken down into four steps.
  prefs: []
  type: TYPE_NORMAL
- en: Community
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Gatsby has an incredibly supportive community backing. At the time of writing,
    over 3,600 people have contributed to the Gatsby repository. This is further amplified
    by the plugin ecosystem surrounding Gatsby; the community has created more than
    2,000+ plugins that abstract complex functionality that other developers may wish
    to use in their own projects. These plugins are distributed as packages stored
    on a JS repository, such as **NPM**, that can be added to your project in a few
    lines. They can extend your site by sourcing content, transforming data, creating
    pages, or theming your application.
  prefs: []
  type: TYPE_NORMAL
- en: Sourcing content from anywhere
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Every day, the amount of data we need to combine to create experiences is rising.
    In traditional React applications, managing multiple sources of data could become
    a nightmare. Storing, massaging, merging, and querying data all require complex
    solutions that struggle to scale.
  prefs: []
  type: TYPE_NORMAL
- en: Gatsby does this differently. Whether you are sourcing data from a CMS, real-time
    database, or even a custom **Application Programming Interface** (**API**), you
    can merge all of this data into a unified data layer. The Gatsby community is
    constantly contributing source plugins to allow you to ingest data from your favorite
    sources with ease. Nine times out of ten, you won't need to write a single line
    of code to source your data, but for the times when you do, we will be covering
    plugin creation in [*Chapter 10*](B15983_10_ePub_RK.xhtml#_idTextAnchor141), *Creating
    Gatsby Plugins*.
  prefs: []
  type: TYPE_NORMAL
- en: Once ingested into this data layer, we can explore and query all our sources
    of data in one place using a uniform data layer. Using the power of GraphQL, we
    can query our data in the same way when rendering pages regardless of their source.
    The GraphQL layer is transitory and doesn't exist after the application has been
    built, so doesn't affect the size of your production site. If GraphQL is something
    new to you, don't worry – I will be explaining how it works in [*Chapter 3*](B15983_03_ePub_RK.xhtml#_idTextAnchor057),
    *Sourcing and Querying Data (from Anywhere!)*.
  prefs: []
  type: TYPE_NORMAL
- en: Building tooling you already know
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Often when we approach new technologies, we are faced with a steep learning
    curve as we understand new syntax and ways of thinking. In Gatsby, we build on
    your existing knowledge of React instead of starting from scratch. Underpinning
    all of our code is the same React component model many of you already know. You
    should feel pretty confident from the beginning, as the code should look familiar,
    and if you're not, Gatsby can also help you learn React from a more "content-driven"
    approach.
  prefs: []
  type: TYPE_NORMAL
- en: Supercharging web performance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As web developers, we can spend considerable time tinkering with websites to
    squeeze every ounce out of their performance. Sometimes, this can take as long,
    if not longer, than building the design. Also, performance gains can sometimes
    be undone instantly by a change to the site design outside of your control. It's
    because of this that some large organizations have dedicated teams to improve
    site performance. But it doesn't have to be this way! As we start to build together,
    you will see that load times go from seconds to milliseconds, and your site will
    feel far more responsive than a conventional React app. Gatsby has plenty of tricks
    up its sleeve that improve performance, some of which we will touch on at the
    end of this chapter. It also turns your site into a **Progressive Web App** (**PWA**)
    with just a few lines of code – if that's not cool, I don't know what is!
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: An essential distinction between Gatsby and React is that Gatsby is a "framework,"
    not a "library." When using a library, you control your application flow; you
    call it when you need it. When using a framework, however, there is an inversion
    of control. Frameworks command that you adhere to a particular flow and layout
    defined by them. Working within a framework can often be seen as a benefit, as
    any developer familiar with the framework will know where to find relevant files
    and code.
  prefs: []
  type: TYPE_NORMAL
- en: I hope you are beginning to see some of the great reasons why Gatsby is such
    a powerful tool. Let's now see it in action.
  prefs: []
  type: TYPE_NORMAL
- en: Gatsby use cases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You might be starting to realize that Gatsby could have applications across
    many different kinds of websites. Since Gatsby's v1 launch in 2017, the framework
    has been used in a multitude of different ways by companies both big and small.
    Here, I want to highlight some examples of use cases where Gatsby excels and suggest
    why companies may have chosen Gatsby for these sites.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: While reading about these example sites here is great, I highly encourage you
    to visit them via your own device. One of Gatsby's best features is the speed
    of the sites it creates, and it is essential to experience this for yourself to
    understand the benefit.
  prefs: []
  type: TYPE_NORMAL
- en: Documentation sites
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Documentation sites are a perfect use case for Gatsby as their content is primarily,
    if not entirely, static. Their content does not shift often either, with pages
    needing infrequent updates. Their static nature means that we can generate all
    page routes during the build process and load them onto a CDN, meaning that when
    a page is requested, the request is near-instant. It is for this reason that you
    see sites such as the official React documentation ([https://reactjs.org](https://reactjs.org))
    being made with Gatsby:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.1 – The React documentation website'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15983_01_01.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.1 – The React documentation website
  prefs: []
  type: TYPE_NORMAL
- en: Due to the infrequent nature of updates to documentation pages, you can automate
    the build and deployment of your site as and when changes to documentation are
    made. With GitHub integrations or webhooks, you can get your documentation site
    to redeploy each change to a master branch or on a daily basis, for example. We
    will be exploring how to create these kinds of processes in [*Chapter 9*](B15983_09_ePub_RK.xhtml#_idTextAnchor127),
    *Deployment and Hosting*.
  prefs: []
  type: TYPE_NORMAL
- en: Online courses
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Online courses often have a unique structure – the majority of their content
    is in static learning modules, but they also require a small quantity of authenticated
    routes for logged-in user experiences.
  prefs: []
  type: TYPE_NORMAL
- en: 'Websites such as *DesignCode.io* ([https://designcode.io/courses](https://designcode.io/courses))
    utilize Gatsby for their static content, meaning their static pages are incredibly
    performant, and they then render authenticated routes on the client. While this
    does increase bundle size, as they need to ship more JS, the benefit of the fast
    static pages far outweighs the cost of heavier authenticated pages:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.2 – The DesignCode.io website'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15983_01_02.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.2 – The DesignCode.io website
  prefs: []
  type: TYPE_NORMAL
- en: One of the most popular sources of data for Gatsby is MDX. MDX is a powerful
    format that allows you to write JSX within Markdown. Why is it awesome? Because
    you can include React components alongside documentation with no hassle at all.
    React components can be far more interactive and dynamic than text, and as a result,
    it is a powerful format to create online courses on, as you can create content
    that is more enticing for the user. Perhaps a more interactive course is a more
    memorable one? We will be diving into MDX in detail in [*Chapter 3*](B15983_03_ePub_RK.xhtml#_idTextAnchor057),
    *Sourcing and Querying Data (from Anywhere!)*.
  prefs: []
  type: TYPE_NORMAL
- en: SaaS products
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When selling **Software as a Service** (**SaaS**) online, your website''s performance
    can be considered a reflection of your product''s performance. As a result, having
    a clunky website can be the difference between your product being a success or
    not. As mentioned previously, this is an example where you could go down a rabbit
    hole to improve your site''s performance. Companies such as *Skupos* ([https://www.skupos.com/](https://www.skupos.com/))
    use Gatsby to get more performance benefits for free. Gatsby also works wonders
    for **Search Engine Optimization** (**SEO**). As pages are prerendered, all your
    page content is available to web crawlers such as Googlebot to navigate to your
    site. The speed and SEO improvements help their product''s website stand out and
    give the user confidence that they know what they are doing when it comes to technology:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.3 – The Skupos website'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15983_01_03.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.3 – The Skupos website
  prefs: []
  type: TYPE_NORMAL
- en: '*Skupos* also supplement their site pages with metadata and alt-text, which
    further aids web crawlers in understanding site content. The more web crawlers
    understand your site''s content, the better your search engine ranking will be.'
  prefs: []
  type: TYPE_NORMAL
- en: Design agencies and photo-heavy sites
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In cases where your work is more visual, your site often needs to make use of
    large quantities of high-resolution images. We've all visited a website and felt
    like we were transported back to the dial-up days as we've waited for large image
    files to load. This common mistake is often amplified further by a large amount
    of cumulative layout shift that happens when loading images. Gracefully handling
    the image's loading state to avoid this can be a headache.
  prefs: []
  type: TYPE_NORMAL
- en: 'Gatsby performs magic for images within its application. It utilizes the `sharp`
    library ([https://github.com/lovell/sharp](https://github.com/lovell/sharp)) under
    the hood to convert your large images into smaller web-friendly sizes. When your
    website loads, it will first load in a smaller resolution version before blurring
    up to the maximum resolution required. This results in no layout shift and a far
    less "jumpy" experience for your site visitor. A great example of this is on the
    *Call Bruno Creative Agency* ([https://www.callbruno.com/en/reelevant](https://www.callbruno.com/en/reelevant))
    website developed with Gatsby:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.4 – The Call Bruno Creative Agency website'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15983_01_04.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.4 – The Call Bruno Creative Agency website
  prefs: []
  type: TYPE_NORMAL
- en: They use lots of imagery across their project pages, but the image load does
    not take you out of the experience. We will get into detail on handling images
    in [*Chapter 5*](B15983_05_ePub_RK.xhtml#_idTextAnchor080), *Working with Images*.
  prefs: []
  type: TYPE_NORMAL
- en: By exploring these sites, we can see examples across industries where Gatsby
    is helping companies get ahead of their competition.
  prefs: []
  type: TYPE_NORMAL
- en: Gatsby's competitors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While this book focuses on Gatsby, it is crucial to understand that it is not
    the only React static site generator on the market. The competitor most often
    uttered in the same breath is Next.js.
  prefs: []
  type: TYPE_NORMAL
- en: Until recently, the key difference between Next.js and Gatsby was server-side
    rendering. Like Gatsby, a Next.js application can be hosted statically, but it
    also used to be able to server render pages where Gatsby could not. Instead of
    deploying a static build, a server is deployed to handle requests. When a page
    is requested, the server builds that page and caches it before sending it to the
    user. This means that subsequent requests to the resource are faster than the
    first call. As of version 4, Gatsby can have all of its pages prebuilt statically
    or it can create a hybrid build – a mixture of static and server-side rendered
    content. We will discuss this more in [*Chapter 9*](B15983_09_ePub_RK.xhtml#_idTextAnchor127),
    *Deployment and Hosting*.
  prefs: []
  type: TYPE_NORMAL
- en: One major drawback to Next.js is its data security. When building Gatsby sites
    as static builds, data is only taken from the source at build time, and as the
    content is static, it is secure. Next.js keeps data stored on the server and,
    as such, it is easier to exploit. Next.js commonly requires more initialization
    if you wish to set it up via a server or using databases. This also means that
    there is more maintenance required in Next.js applications. Both Next.js and Gatsby
    have additional utilities to help with the handling of images. Gatsby, however,
    can make images more performant on statically rendered pages, while Next cannot.
  prefs: []
  type: TYPE_NORMAL
- en: The good news is that all static site generators follow a similar process. *The
    skills and mentality you learn in this book are easily transferable to a different
    generator in the future should you decide you want to make the switch.*
  prefs: []
  type: TYPE_NORMAL
- en: Now that we understand where Gatsby excels, let's start creating our first Gatsby
    project.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to help you put into practice what you're learning, we will be building
    a project together. Throughout this book, we will be working to build a personal
    portfolio, something that every developer needs and therefore something I think
    will be relevant for most readers. The portfolio will contain blog pages to aid
    your learning in public, project pages to demonstrate your work, a stats page
    showcasing interesting metrics on your site, as well as many more features that
    will help your portfolio stand out from the crowd.
  prefs: []
  type: TYPE_NORMAL
- en: Throughout this book, you will be faced with options. We will discuss different
    implementations for styling your site, as well as data sources you may want to
    implement. This should give you the flexibility to align it with your current
    knowledge. Alternatively, you can throw yourself in the deep end – the choice
    is up to you. Everywhere there is a choice, I will also provide my personal recommendation
    for what might be best if you can't decide.
  prefs: []
  type: TYPE_NORMAL
- en: 'To see a finished version of the portfolio we will be building, visit this
    link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://elevating-react-with-gatsby.sld.codes/](https://elevating-react-with-gatsby.sld.codes/)'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Refer to the code repository ([https://github.com/PacktPublishing/Elevating-React-Web-Development-with-Gatsby-4](https://github.com/PacktPublishing/Elevating-React-Web-Development-with-Gatsby-4))
    that accompanies this book if you're struggling at any point. It includes a copy
    of the project as it should appear after every chapter.
  prefs: []
  type: TYPE_NORMAL
- en: To start using Gatsby, we need to ensure we have a few prerequisite tools set
    up on our machines. Most of these prerequisites are most likely already on your
    device if you are a React developer, although I would still encourage you to read
    through this list, as some of your tools may need an update.
  prefs: []
  type: TYPE_NORMAL
- en: Node.js version 14.15.0+
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As of version 4.0, Gatsby supports all Node.js versions greater than 14.15.0\.
    You can quickly check if you have Node.js installed by opening up a terminal window
    and typing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: If you have Node.js installed, this should print a version number. However,
    if you receive an error, you can download Node.js by navigating to the Node.js
    website ([https://nodejs.org](https://nodejs.org)). Node.js comes bundled with
    `npm`, a package repository, package manager, and command-line tool that we will
    be using to install Gatsby.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: You're most likely already using Node.js, and some of your pre-existing projects
    may require a different version than the requirements specified here. If you need
    to manage multiple versions of Node.js on the same device, you should check out
    the **Node.js Version Manager** (**NVM**)([https://github.com/nvm-sh/nvm](https://github.com/nvm-sh/nvm)).
    It gives you access to valuable commands, including installing new versions and
    switching between minor and major versions of Node.js.
  prefs: []
  type: TYPE_NORMAL
- en: Gatsby command-line interface
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Gatsby **Command-Line Interface** (**CLI**) is a tool built by the core
    Gatsby team; it allows you to perform standard functions, such as creating new
    Gatsby projects, setting up local development servers, and building your production
    site. Although you can use it on a per-project basis, it is far more common to
    install the CLI globally so that you can use its features across multiple Gatsby
    projects without having to install it as a package in each project – got to save
    that hard-drive space!
  prefs: []
  type: TYPE_NORMAL
- en: 'To install the CLI globally, `npm install` it with the global flag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'To verify its installation, open up a terminal window and type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: If running this provides a list of commands and does not error out, then you're
    good to go.
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: Throughout this book, I use `npm` as my package manager. If you prefer Yarn,
    you can use the Yarn equivalent commands.
  prefs: []
  type: TYPE_NORMAL
- en: Directory and package setup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here, we will begin to create the files and folders we need to start our project,
    as well as install necessary dependencies such as React and Gatsby.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, create a folder to house our project. You can call it whatever you like.
    Throughout this book, I will refer to this folder as the `root` folder of the
    application. Open a terminal and navigate to your `root` folder. Initialize a
    new package in this folder by running the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'With the package now initialized, let''s install React and Gatsby:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Open your `root` folder in your favorite `package.json`, `package-lock.json`,
    and a `node-modules` folder. Opening your `package.json`, you should see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, you can see that this file now contains references
    to the dependencies we have just installed.
  prefs: []
  type: TYPE_NORMAL
- en: Development scripts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s start by modifying `package.json` so that it contains some useful scripts
    that will speed up our development process:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s break down these scripts:'
  prefs: []
  type: TYPE_NORMAL
- en: '`build`: Runs the Gatsby CLI''s `build` command. This creates a compiled, production-ready
    build of our site. We will learn more about this in [*Chapter 9*](B15983_09_ePub_RK.xhtml#_idTextAnchor127),
    *Deployment and Hosting*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`develop`: Runs the Gatsby CLI''s `develop` command. We will review it in detail
    in the next section, *Creating your first few pages*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`start`: The `start` script redirects to the `develop` script. This is in place
    as it is common to start packages with a `start` script.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`serve`: Runs the Gatsby CLI''s `serve` command to serve up a Gatsby `build`
    folder. This is a useful way to review a production build.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`clean`: The `clean` script utilizes the Gatsby CLI''s `clean` command. This
    deletes the local Gatsby cache and any build data. It will be rebuilt with the
    next `develop` or `build` command.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'All of these scripts can be run from the `root` folder with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Simply replace `script-name` with the name of the script you would like to run.
  prefs: []
  type: TYPE_NORMAL
- en: You'll notice the absence of a test script. Don't worry – we will get into how
    to test a Gatsby application in [*Chapter 7*](B15983_07_ePub_RK.xhtml#_idTextAnchor105),
    *Testing and Auditing Your Site*.
  prefs: []
  type: TYPE_NORMAL
- en: Framework files and folders
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As mentioned, Gatsby is a framework. Frameworks require certain files to exist
    in order to work. Let's set up our project with the files and folders where Gatsby
    expects to find them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `gatsby-config.js` file in your `root` directory and add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: As the name might suggest, the `gatsby-config.js` file is the core configuration
    file for Gatsby. We will be coming back to this file frequently as we build out
    our project. By the time we are done with it, it will be full of plugins, metadata,
    styling, and even offline support.
  prefs: []
  type: TYPE_NORMAL
- en: Create `gatsby-browser.js` and `gatsby-node.js` files in your `root` directory.
    Both of these files can be left blank for now. The `gatsby-browser.js` file contains
    any code we would like to run on the client's browser. In the next chapter, we
    will be using this file to add styles to our website. The `gatsby-node.js` file
    contains code we would like to run during the process of building our site.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, create an `src` folder in your `root` directory. This folder will contain
    the majority of our development work, much like in a traditional React application.
    Pages we create and components we define will all be contained within this folder.
  prefs: []
  type: TYPE_NORMAL
- en: Before we go any further, let's make sure we have our version control tracking
    the right files.
  prefs: []
  type: TYPE_NORMAL
- en: Using version control
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'I suspect many of you would like to use version control while you build out
    your Gatsby site. To ensure Git tracks only the files that matter, create a `.gitignore`
    file and add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: These lines stop our dependencies, Gatsby builds, and cache folders from being
    tracked.
  prefs: []
  type: TYPE_NORMAL
- en: Creating your first few pages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We now have all the underlying code we need set up to allow us to start creating
    pages. In this section, we will create a three-page website using Gatsby. It's
    important to note that this is a basic example purely designed to solidify your
    understanding of how Gatsby works before we worry about styling and additional
    functionality.
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to your `src` directory and create a new folder called `pages`. Any
    JS files we create within the `pages` folder will be treated as a route by Gatsby.
    This also applies to subfolders within the `pages` folder. There is, however,
    one exception – files called `index.js` are treated as the root of their directory.
    Let''s make sense of this with a few examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '`src/pages/index.js` will map to [yourwebsite.com](https://yourwebsite.com).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`src/pages/about.js` will map to [yourwebsite.com/about](https://yourwebsite.com/about).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`src/pages/blog/my-first-post.js` will map to [yourwebsite.com/docs/my-first-post](https://yourwebsite.com/docs/my-first-post).
    While we won''t be setting up a page at this URL now, we will start using routes
    such as this one in [*Chapter 3*](B15983_03_ePub_RK.xhtml#_idTextAnchor057), *Sourcing
    and Querying Data (from Anywhere!)*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`src/pages/404.js` will map to any page that does not resolve on [yourwebsite.com](https://yourwebsite.com).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Important Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Any React components you place in the `pages` folder will become navigable routes
    on your site. As such, it is best to separate your components from your pages.
    A common pattern is to create a `components` folder that sits next to your `pages`
    folder in the `src` directory and import components you want to use in your pages.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The index page
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Create an `index.js` file in your `pages` folder. As the index of the `pages`
    folder, this will become the landing of your website. We can now populate this
    file with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The contents of this file should look familiar; it's just a simple stateless
    ReactJS component.
  prefs: []
  type: TYPE_NORMAL
- en: 'We could have also defined it as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Both examples will output the exact same result, so it's just personal preference.
  prefs: []
  type: TYPE_NORMAL
- en: The about page
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In a similar fashion, we can create an `about` page. Here, you have a choice
    – you can either create this page at `src/pages/about.js` or at `src/pages/about/index.js`.
    The question I always ask myself when deciding which option to go with is whether
    the page will have sub-pages. In the case of an `about` page, I think it''s unlikely
    to contain any sub-pages, so I will opt for `src/pages/about.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Here, we have defined another simple React component containing a heading and
    paragraph to create our `about` page.
  prefs: []
  type: TYPE_NORMAL
- en: The 404 page
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Gatsby expects to find a `404.js` file in your `pages` directory. This page
    is special. It contains the page that will be shown when Gatsby cannot find a
    page that was requested. I am sure you have come across "Page not found" pages
    before. Without this page, on requesting a non-existent route, the browser will
    not find any resource and show a browser error to the user. While the `404` page
    is another form of displaying the same error, by creating this page, we can manage
    the error ourselves. We can link to working pages on our site or even suggest
    the page they might have been trying to visit (more on this in [*Chapter 3*](B15983_03_ePub_RK.xhtml#_idTextAnchor057),
    *Sourcing and Querying Data (from Anywhere!)*).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create our `404` page now in `src/pages/404.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: You should be starting to see a pattern. Creating pages is as simple as defining
    React components – something you should be familiar with already.
  prefs: []
  type: TYPE_NORMAL
- en: Trying the develop command
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'At this point, you''ve actually already created a fully working website. Congratulations!
    To test it out, open a terminal at your `root` directory and run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'As you will recall from our `package.json`, this will run the `gatsby develop`
    command. This will take a few seconds to run, but you should then see some terminal
    output that looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'You can now open a browser of your choice and navigate to `http://localhost:8000/`,
    and you should be greeted with something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.5 – The landing page preview'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15983_01_05.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.5 – The landing page preview
  prefs: []
  type: TYPE_NORMAL
- en: This is the rendered version of our `index.js` page component. You can modify
    the URL in your browser to `http://localhost:8000/about` to see your `about` page
    and `http://localhost:8000/404` to see your `404` page. You can also see your
    `404` page in development by navigating to any invalid route and pressing the
    **Preview custom 404 page** button.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: If you don't want to manually navigate to the browser and type in the URL, you
    can modify our scripts by appending the `gatsby develop` command with the `-o`
    option. This instructs Gatsby to open your default browser and navigate to the
    site automatically when you run the `develop` command.
  prefs: []
  type: TYPE_NORMAL
- en: gatsby develop in detail
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Running `gatsby develop` starts the Gatsby development server. This might be
    a little confusing, as we have previously mentioned how a Gatsby site is delivered
    as static content, but it's actually there to speed up your development process.
  prefs: []
  type: TYPE_NORMAL
- en: Imagine your site contains 10,000 pages; building the entirety of your site
    every time you make a small change to one page would take a long time. To get
    around this in development, Gatsby uses a Node.js server to build only what you
    need as and when it's requested. Due to it building on demand, it can negatively
    affect the performance of a page and *you should never test performance on a page
    in development for this reason*.
  prefs: []
  type: TYPE_NORMAL
- en: Once the server is up, you can continue to edit your code without rerunning
    the command. The development server supports hot reloading, a concept that should
    be familiar to you.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `develop` command has a number of built-in options that allow you to customize
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-H, --host`: Allows you to modify the host'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-p, --port`: Allows you to modify the port Gatsby runs on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-o, --open`: Opens your project in the browser'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-S, --https`: Turns on HTTPS'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can view your site on any device connected to the same network by using
    the host option. This can be useful when you want to compare how your site behaves
    on mobile browsers with that of a desktop experience. To achieve this, run the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'If the command is successful, you will see a subtle difference in the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The `develop` command has added a URL for testing on your network. Typing this
    into a browser on any device connected to the same network will render your site.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting your pages
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that you have multiple pages, you may want to navigate between them. There
    are two different ways of achieving this – with the Gatsby Link component or via
    programmatic navigation. To some of you, these components and functions may sound
    familiar; this is because Gatsby wraps the `reach-router` ([https://reach.tech/router](https://reach.tech/router))
    library for navigation. For those who haven't used `reach-router` before, the
    library comes with support for server-side rendering and routing accessibility
    functionality built in. Gatsby has built on and enhanced this functionality to
    meet its high standards for user accessibility, ensuring a great website experience
    regardless of who you are.
  prefs: []
  type: TYPE_NORMAL
- en: The Gatsby Link component
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: It's important to use the Gatsby `<Link/>` component as a replacement for the
    `<a/>` tag whenever you are linking to a page that is internal. The `<Link/>`
    component works just like an `<a/>` tag, with one important distinction – it enables
    prefetching. Prefetching is the act of loading a resource before it is required.
    This means that when the resource is requested, the time waiting for that resource
    is decreased. By prefetching the links on your page, your next click navigates
    to content that is already loaded and is therefore practically instant. This is
    particularly noticeable on mobile devices in areas with reduced network conditions
    that would normally have a delay when loading pages.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first place you could add a `Link` component is to your `404` page. It''s
    common for these pages to have a button that says something like "Take me home"
    that, when clicked, navigates to the landing page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: As you can see in the preceding code block, the `Link` component has a prop
    called `to`; this needs to be passed to the page that you want to navigate to
    relative to the root of your website. By passing the `"/"` prop, Gatsby will navigate
    to the root of your website.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also add a link to the `about` page from the `index` page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: You can see here that we instead pass `"/about"` to the `to` prop in the `<Link/>`
    component; this will navigate to our previously created `about` page.
  prefs: []
  type: TYPE_NORMAL
- en: Programmatic navigation
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Occasionally, you may need to trigger navigation with something other than
    a click. Perhaps you need to navigate as a result of a `fetch` request, or when
    a user submits a form. You can achieve this behavior by making use of the Gatsby
    `navigate` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Like the `<Link/>` component, the `navigate` function will only work for navigating
    to internal pages.
  prefs: []
  type: TYPE_NORMAL
- en: We now have a basic Gatsby site set up with the ability to navigate between
    pages.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I appreciate that most of the content in this chapter has been theoretical,
    but it's important to understand the "why" as well as the "how." In this chapter,
    we have cemented the baseline knowledge of what Gatsby is and grasped the guiding
    principles we will be using in further chapters to build our website. We've seen
    examples of where Gatsby is being used and the benefits it can bring. We discussed
    what dependencies you need and how to initialize Gatsby projects. We have also
    set up a complete basic Gatsby project and created the first few pages of our
    website. We then used the built-in Gatsby components and functions to link our
    pages together.
  prefs: []
  type: TYPE_NORMAL
- en: We will be referencing the theory we've outlined in this chapter throughout
    this book, but for now, let's turn our focus to styling our web application. In
    the next chapter, we will identify various different styling methodologies and
    make an informed choice about which one you should use for your project.
  prefs: []
  type: TYPE_NORMAL
