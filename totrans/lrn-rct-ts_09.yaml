- en: '9'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Interacting with RESTful APIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will build a page that lists blog posts fetched from a REST
    API, as well as also a form to submit blog posts to the REST API. Through this,
    we will learn about various approaches to interacting with a REST API from a React
    component.
  prefs: []
  type: TYPE_NORMAL
- en: The first approach will be using React’s `useEffect` hook with the browser’s
    `fetch` function. As part of this process, we learn how to use a type assertion
    function to strongly type the data from a REST API. We will then use the data
    loading capability of **React Router** and experience its benefits. After that,
    we will move on to use a popular library called **React Query** and experience
    its benefits, before using React Query and React Router together to get the best
    of both these libraries.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, in this chapter, we’ll cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Getting set up
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the effect hook with fetch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Posting data with fetch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using React Router
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using React Query
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using React Router with React Query
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will use the following technologies in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Node.js** and **npm**: You can install them from [https://nodejs.org/en/download/](https://nodejs.org/en/download/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Visual Studio Code**: You can install it from [https://code.visualstudio.com/](https://code.visualstudio.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All the code snippets in this chapter can be found online at [https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/tree/main/Chapter9](https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/tree/main/Chapter9).
  prefs: []
  type: TYPE_NORMAL
- en: Creating the project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will start by creating the project for the app we will build.
    We will then create a REST API for the app to consume.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will develop the app using Visual Studio Code and require a new Create React
    App-based project setup. We’ve previously covered this several times, so we will
    not cover the steps in this chapter – instead, see [*Chapter 3*](B19051_03.xhtml#_idTextAnchor072),
    *Setting Up React* *and TypeScript*.
  prefs: []
  type: TYPE_NORMAL
- en: We will style the app with Tailwind CSS. We have previously covered how to install
    and configure Tailwind in Create React App in [*Chapter 5*](B19051_05.xhtml#_idTextAnchor127),
    *Approaches to Styling Frontends*. So, after you have created the React and TypeScript
    project, install and configure Tailwind.
  prefs: []
  type: TYPE_NORMAL
- en: We will use React Router to load data, so see [*Chapter 6*](B19051_06.xhtml#_idTextAnchor151),
    *Routing with React Router,* for information on how to do this.
  prefs: []
  type: TYPE_NORMAL
- en: We will use `@tailwindcss/forms` plugin to style the form. See [*Chapter 7*](B19051_07.xhtml#_idTextAnchor188),
    *Working with Forms,* for a reminder of how to implement these.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the component structure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The app will be a single page containing a form for adding new posts above
    a list of all the existing posts. The app will be structured into the following
    components:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.1 – App component structure](img/B19051_09_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.1 – App component structure
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s a description of these components:'
  prefs: []
  type: TYPE_NORMAL
- en: '`PostsPage` will render the whole page by referencing the `NewPostForm` and
    `PostsLists` components. It will also interact with the REST API.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NewPostForm` will render a form that allows a user to enter a new blog post.
    This will use the `ValidationError` component to render validation error messages.
    The `ValidationError` component will be the same as the one created in [*Chapter
    7*](B19051_07.xhtml#_idTextAnchor188).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PostsList` will render the list of blog posts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Right, now we know the component structure, let’s create the REST API.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a REST API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will create a REST API using a tool called **JSON Server**, which allows
    a REST API to be quickly created. Install JSON Server by running the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We then define the data behind the API in a JSON file. Create a file called
    `db.json` in the root of the project containing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The preceding JSON means that the data behind the API will initially contain
    two blog posts (this code snippet can be copied from [https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/blob/main/Chapter9/useEffect-fetch/db.json](https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/blob/main/Chapter9/useEffect-fetch/db.json)).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we need to define an npm script to start the JSON server and handle requests.
    Open `package.json` and add a script called `server` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The script starts the JSON server and watches the JSON file we just created.
    We have specified that the API runs on port `3001` so that it doesn’t clash with
    the app running on port `3000`. We have also slowed down the API responses by
    adding a 2-second delay, which will help us see when data is being fetched from
    the React app.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a terminal, start the API by running the script we just created, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'After a few seconds, the API starts. To check that the API is working correctly,
    open a browser and enter the following address: `http://localhost:3001/posts`.
    The blog post data should appear in the browser as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.2 – Blog posts REST API](img/B19051_09_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.2 – Blog posts REST API
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information on JSON Server, see the following link: [https://github.com/typicode/json-server](https://github.com/typicode/json-server).'
  prefs: []
  type: TYPE_NORMAL
- en: Now that the project is set up with a REST API, keeping the API running, next,
    we will learn how to interact with the REST API using `useEffect`.
  prefs: []
  type: TYPE_NORMAL
- en: Using the effect hook with fetch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will create a page that lists the blog posts returned from
    the REST API we just created. We will use the browser’s `fetch` function and React’s
    `useEffect` hook to interact with the REST API.
  prefs: []
  type: TYPE_NORMAL
- en: Getting blog posts using fetch
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will start by creating a function that gets blog posts from the REST API
    using the browser’s `fetch` function; we will store the API URL in an environment
    variable. To do this, carry out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The same URL will be used to get, as well as save, new blog posts to the REST
    API. We will store this URL in an environment variable. So, create a file called
    `.env` in the root of the project containing this variable, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This environment variable is injected into the code at build time and can be
    accessed by code using `process.env.REACT_APP_API_URL`. Environment variables
    in Create React App projects must be prefixed with `React_APP_`. For more information
    on environment variables, see the following link: [https://create-react-app.dev/docs/adding-custom-environment-variables/](https://create-react-app.dev/docs/adding-custom-environment-variables/).'
  prefs: []
  type: TYPE_NORMAL
- en: Now, create a folder called `posts` in the `src` folder for all the files for
    the blog post feature.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `getPosts.ts` in the `posts` folder. In this file, add
    the following function that gets the blog posts:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `fetch` function has an argument for the URL to the REST API. We have used
    the `REACT_APP_API_URL` environment variable to specify this URL. Environment
    variable values can be `undefined`, but we know this isn’t the case, so we have
    added a `!`) after it.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: A not null assertion operator is a special operator in TypeScript. It is used
    to inform the TypeScript compiler that the expression before it can’t be `null`
    or `undefined`.
  prefs: []
  type: TYPE_NORMAL
- en: '`fetch` returns a `Response` object and we call its `json` method to get the
    response body in JSON format. The `json` method is asynchronous, so we need to
    `await` it.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information on `fetch`, see the following link: [https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).'
  prefs: []
  type: TYPE_NORMAL
- en: That completes an initial version of `getPosts`. However, the return value type
    from `getPosts` is currently `any`, which means no type checking will occur on
    it. We will improve this next.
  prefs: []
  type: TYPE_NORMAL
- en: Strongly typing response data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In [*Chapter 2*](B19051_02.xhtml#_idTextAnchor044), *Introducing TypeScript*,
    we learned how to make unknown data strongly typed using the `unknown` type and
    type predicates. We will use the `unknown` type with a slightly different TypeScript
    feature called a `getPosts` function. Carry out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a type assertion to the JSON response so that the `body` variable has a
    type of `unknown`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, add the following type assertion function beneath `getPosts`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Notice the return type annotation: `asserts postsData is PostData[]`. This
    is called an `postsData` parameter is of the `PostData[]` type if no error occurs
    in the function execution.'
  prefs: []
  type: TYPE_NORMAL
- en: Don’t worry about the compile error where `PostData` is referenced – we will
    create the `PostData` type in *s**tep 8*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s carry on with the implementation of `assertIsPosts`. It will be a series
    of checks on the `postsData` parameter and it will throw an exception if a check
    fails. Start the implementation by checking that `postsData` is an array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let’s do a check on the array items to see whether they have an `id` property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We loop around all the posts using the array’s `forEach` method. Inside the
    loop, we check that the `id` property exists using the `in` operator. We also
    check that the `id` value is of the `number` type using the `typeof` operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can do similar checks for the `title` and `description` properties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: That completes the implementation of the type assertion function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Moving back to `getPosts`, add a call to the `assert` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `body` variable will now be of the `PostData[]` type after a successful
    call to `assertIsPosts`. You can hover over the `body` variable in the return
    statement to confirm this.
  prefs: []
  type: TYPE_NORMAL
- en: 'The final steps are to add the `PostData` type. Add an import statement at
    the top of `getPosts.ts` as follows to import `PostData`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The file will still have compile errors because the `types` file doesn’t exist
    yet – we’ll do this in the next step.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a file called `types.ts` in the `posts` folder with the following definition
    for the `PostData` type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This type represents a blog post from the REST API.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we have a strongly typed function that gets blog posts from the REST API.
    Next, we will create a React component that lists the blog posts.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a blog posts list component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will create a React component that takes in the blog post data and renders
    it in a list. Carry out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file called `PostsList.tsx` in the `posts` folder with the following
    import statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, start to implement the component as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The component has a prop called `posts` that will contain the blog posts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, render the blog posts in an unordered list, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE86]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE87]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE88]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE89]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE90]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE91]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE92]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE93]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE94]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE95]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The Tailwind CSS classes add gray lines between the blog posts with bold titles.
  prefs: []
  type: TYPE_NORMAL
- en: That completes the `PostsList` component. Next, we will create a page component
    that references the `PostsList` component.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a blog posts page component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will create a blog posts page component that gets blog post data using the
    `getPosts` function and renders it using the `PostsList` component we just created.
    Carry out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file called `PostsPage.tsx` in the `posts` folder components with
    the following import statements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE97]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE98]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE99]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We have imported the `getPosts` function, the `PostList` component, and the
    `PostData` type we created in the last section. We have also imported the `useState`
    and `useEffect` hooks from React. We will use React state to store the blog posts
    and use `useEffect` to call `getPosts` when the page component is mounted.
  prefs: []
  type: TYPE_NORMAL
- en: 'Start the implementation of the page component by defining the state for the
    blog posts and whether they are being fetched:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE101]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE102]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE103]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, call the `getPosts` function using the `useEffect` hook as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE105]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE106]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE107]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE108]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE109]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE110]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE111]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE112]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE113]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE114]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE115]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE116]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE117]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE118]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We use the older promise syntax when calling `getPosts` because the newer `async`/`await`
    syntax can’t be directly used within `useEffect`.
  prefs: []
  type: TYPE_NORMAL
- en: If the `PostsPage` component is unmounted while the call to `getPosts` is still
    in progress, the setting of the `data` and `isLoading` state variables will result
    in an error. For this reason, we have used a `cancel` flag to ensure that the
    component is still mounted when the `data` and `isLoading` state variables are
    set.
  prefs: []
  type: TYPE_NORMAL
- en: We have also specified an empty array as the effect dependencies so that the
    effect only runs when the component is mounted.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a loading indicator while the data is being fetched after the call to `useEffect`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE120]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE121]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE122]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE123]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE124]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE125]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE126]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE127]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE128]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE129]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The Tailwind CSS classes position the loading indicator horizontally in the
    center of the page with a bit of margin above it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, render a page title and the posts list after the conditional loading
    indicator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE131]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE132]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE133]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE134]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE135]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE136]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE137]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE138]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE139]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE140]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE141]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE142]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE143]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE144]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE145]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The Tailwind CSS classes position the list in the center of the page with a
    bit of margin above. A large **Posts** title is also rendered above the list in
    a dark gray color.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, open `App.tsx` and replace its contents with the following so that it
    renders the page component we just created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE146]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE147]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE148]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE149]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE150]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the app by running `npm start` in a new terminal separate from the one
    running the REST API. The loading indicator will appear briefly as the data is
    being fetched:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.3 – Loading indicator](img/B19051_09_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.3 – Loading indicator
  prefs: []
  type: TYPE_NORMAL
- en: 'The blog post list will then appear as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.4 – Blog posts list](img/B19051_09_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.4 – Blog posts list
  prefs: []
  type: TYPE_NORMAL
- en: That completes this version of the `PostsPage` component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the key points we learned in this section on interacting with HTTP
    `GET` requests in a REST API using `fetch` and `useEffect`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`fetch` will make the actual HTTP request that has the REST API’s URL as a
    parameter'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A type assertion function can be used to strongly type response data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`useEffect` can trigger the `fetch` call when the component that holds the
    data in state is mounted'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A flag can be used inside `useEffect` to check that the component hasn’t been
    unmounted during the HTTP request before the data state is set
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Still keeping the app and REST API running, in the next section, we will learn
    how to post data to a REST API using `fetch`.
  prefs: []
  type: TYPE_NORMAL
- en: Posting data with fetch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will create a form that submits a new blog post to our REST
    API. We will create a function that uses `fetch` to post to the REST API. That
    function will be called in the form’s submit handler.
  prefs: []
  type: TYPE_NORMAL
- en: Creating new blog posts using fetch
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will start by creating the function that sends a new blog post to the REST
    API. This will use the browser’s `fetch` function, but this time, using an HTTP
    `POST` request. Carry out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will start by opening `types.ts` in the `posts` folder and adding the following
    two types:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE151]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE152]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE153]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE154]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE155]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE156]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE157]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The first type represents a new blog post, and the second type represents the
    data from the API when the blog post is successfully saved.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file called `savePost.ts` in the `posts` folder and add the following
    import statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE158]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We have also imported the types we just created.
  prefs: []
  type: TYPE_NORMAL
- en: 'Start to implement the `savePost` function as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE159]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE160]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE161]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE162]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE163]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE164]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE165]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE166]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE167]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE168]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE169]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE170]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE171]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE172]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `savePost` function has a parameter, `newPostData`, containing the title
    and description for the new blog post, and sends it to the REST API using `fetch`.
    A second argument has been specified in the `fetch` call to specify that an HTTP
    `POST` request should be used and that the new blog post data should be included
    in the request body. The request body has also been declared as being in JSON
    format.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, strongly type the response body as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE173]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE174]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE175]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE176]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE177]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We set the response body as having the `unknown` type and then use a type assertion
    function to give it a specific type. This will raise a compile error until we
    implement `assertIsSavedPost` in *step 6*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finish the implementation of `savePost` by merging the blog post ID from the
    response with the blog post title and description supplied to the function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE178]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE179]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE180]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE181]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: So, the object returned from the function will be a new blog post with the ID
    from the REST API.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last step is to implement the type assertion function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE182]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE183]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE184]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE185]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE186]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE187]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE188]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE189]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE190]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE191]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The function checks whether the response data contains a numeric `id` property,
    and if it does, it asserts that the data is of the `SavedPostData` type.
  prefs: []
  type: TYPE_NORMAL
- en: That completes the implementation of the `savePost` function. Next, we will
    add a form component that allows the user to enter new blog posts.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a blog post form component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will create a component that contains a form that captures a new blog post.
    When the form is submitted, it will call the `savePost` function we just created.
  prefs: []
  type: TYPE_NORMAL
- en: We will use React Hook Form to implement the form along with a `ValidationError`
    component. We covered React Hook Form and the `ValidationError` component in detail
    in [*Chapter 7*](B19051_07.xhtml#_idTextAnchor188), so the implementation steps
    won’t be covered in much detail.
  prefs: []
  type: TYPE_NORMAL
- en: 'Carry out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will start by creating a `ValidationError` component that will render form
    validation errors. Create a file called `ValidationError.tsx` in the `posts` folder
    with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE192]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE193]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE194]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE195]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE196]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE197]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE198]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE199]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE200]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE201]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE202]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE203]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE204]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE205]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new file in the `posts` folder called `NewPostForm.tsx`. This will
    contain a form to capture the title and description for a new blog post. Add the
    following import statements to the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE206]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE207]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE208]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start to implement the form component as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE209]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE210]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE211]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE212]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE213]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The component has a prop for saving a new blog post so that the interaction
    with the REST API can be handled outside of this form component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, destructure the `register` and `handleSubmit` functions and useful state
    variables from React Hook Form’s `useForm` hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE214]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE215]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE216]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE217]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE218]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE219]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE220]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE221]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE222]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE223]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We pass the type for the new post data into the `useForm` hook so it knows the
    shape of the data to capture.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a variable for the field container style and a function for the editor
    style:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE224]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE225]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE226]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE227]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE228]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE229]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE230]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE231]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE232]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Render `title` and `description` fields in a `form` element as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE233]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE234]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE235]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE236]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE237]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE238]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE239]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE240]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE241]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE242]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE243]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE244]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE245]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE246]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE247]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE248]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE249]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE250]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE251]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE252]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE253]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE254]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE255]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE256]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE257]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE258]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE259]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE260]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE261]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE262]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE263]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE264]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE265]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE266]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Lastly, render a `Save` button and the success message:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE267]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE268]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE269]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE270]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE271]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE272]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE273]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE274]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE275]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE276]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE277]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE278]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE279]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE280]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE281]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE282]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE283]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE284]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE285]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE286]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE287]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE288]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE289]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE290]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE291]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: That completes the implementation of the `NewPostForm` component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now open `PostPage.tsx` and import the `NewPostForm` component and the `savePost`
    function we created earlier. Also, import the `NewPostData` type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE292]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE293]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE294]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE295]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE296]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE297]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `PostPage` JSX, add the `NewPostForm` form above the `PostsList`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE298]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE299]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE300]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE301]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE302]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the save handler function just below the effect that gets blog posts:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE303]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE304]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE305]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE306]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE307]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE308]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE309]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The hander calls `savePost` with the data from the form. After the post has
    been saved, it is added to the start of the `posts` array.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the running app, the new blog post form will appear above the blog post
    list, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.5 – New blog post form above the posts list](img/B19051_09_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.5 – New blog post form above the posts list
  prefs: []
  type: TYPE_NORMAL
- en: Fill in the form with a new blog post and press the **Save** button. The new
    post should appear at the top of the list after a couple of seconds.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.6 – New blog post added to posts list](img/B19051_09_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.6 – New blog post added to posts list
  prefs: []
  type: TYPE_NORMAL
- en: That completes the implementation of the form and its integration into the blog
    posts page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are a couple of key points we learned in this section on posting data
    with `fetch`:'
  prefs: []
  type: TYPE_NORMAL
- en: The second parameter in the `fetch` function allows the HTTP method to be specified.
    In this section, we used this parameter to make an HTTP `POST` request.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second parameter in `fetch` also allows the request body to be supplied.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once again, keeping the app and REST API running, in the next section, we will
    use React Router’s data-fetching capabilities to simplify our data-fetching code.
  prefs: []
  type: TYPE_NORMAL
- en: Using React Router
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will learn about how React Router can integrate with the
    data-fetching process. We will use this knowledge to simplify the code that fetches
    blog posts in our app.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding React Router data loading
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'React Router data loading is similar to React Router forms, which we learned
    about in [*Chapter 7*](B19051_07.xhtml#_idTextAnchor188). Instead of defining
    an action that handles form submission, we define a `some-page` route:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE310]'
  prefs: []
  type: TYPE_PRE
- en: 'React Router calls the loader to get the data before it renders the component
    defined on the route. The data is then available in the component via a `useLoaderData`
    hook:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE311]'
  prefs: []
  type: TYPE_PRE
- en: This approach is efficient as the route component is only rendered once because
    the data is available on the first render.
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information on React Router loaders, see the following link: [https://reactrouter.com/en/main/route/loader](https://reactrouter.com/en/main/route/loader).
    For more information on the `useLoaderData` hook, see the following link: [https://reactrouter.com/en/main/hooks/use-loader-data](https://reactrouter.com/en/main/hooks/use-loader-data).'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we are starting to understand data loading in React Router, we will
    use this in our app.
  prefs: []
  type: TYPE_NORMAL
- en: Using React Router for data loading
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Carry out the following steps to use a React Router data loader in our app:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `App.tsx` and add the following import statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE312]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE313]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE314]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE315]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Also, import the `getPosts` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE316]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`getPosts` will be the loader function.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following router definition above the `App` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE317]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE318]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE319]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE320]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE321]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE322]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE323]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `App` component, replace `PostsPage` with `RouterProvider`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE324]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE325]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE326]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open `PostsPage.tsx` and remove the React import statement, as this is no longer
    required in this component.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Also, add `assertIsPosts` to the `getPosts` import statement and remove `getPosts`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE327]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We will eventually need `assertIsPosts` to type the data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Still in `PostsPage.tsx`, add the following import statement for a hook in
    React Router that allows us to access the loader data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE328]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Inside the `PostsPage` component, remove the `isLoading` and `posts` state definitions.
    These won’t be needed because we will get the data from React Router without having
    to do any waiting.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove the call to `useEffect` that currently gets the data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Remove the second line of the `handleSave` function that sets the `posts` state.
    `handleSave` should now read as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE329]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE330]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE331]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Remove the loading indicator as well.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now at the top of the `PostsPage` component, make a call to `useLoaderData`
    and assign the result to a `posts` variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE332]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE333]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE334]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE335]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Unfortunately, `posts` is of the `unknown` type, so there is a type error where
    it is passed to the `PostsLists` component. Use the `assertsIsPosts` function
    to type the data with `PostData[]`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE336]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE337]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The type errors are now resolved.
  prefs: []
  type: TYPE_NORMAL
- en: Note that `PostData` from the `types` import statement is unused. Leave it intact
    because we will use this again in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: The running app should look and behave similarly to how it previously did. One
    thing you may notice is that when a new blog post is added using the form, it
    doesn’t appear in the list – you have to manually refresh the page for it to appear.
    This will be resolved when we use React Query later in this chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Notice how much code we just removed – this indicates that the code is much
    simpler now. Another benefit of using React Router to load the data is that `PostsPage`
    isn’t re-rendered after the data is fetched – the data is fetched before `PostsPage`
    is rendered.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will improve the user experience of the data-fetching process.
  prefs: []
  type: TYPE_NORMAL
- en: Deferred React Router data fetching
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If the data-fetching process is slow, there will be a noticeable delay before
    a component is rendered by React Router. Fortunately, there is a solution to this
    using React Router’s `defer` function and `Await` component, along with React’s
    `Suspense` component. Carry out the following steps to add these to our app:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by opening `App.tsx` and add the `defer` function to the React Router
    import statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE338]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE339]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE340]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE341]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE342]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the `loader` function as follows in the route definition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE343]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE344]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE345]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE346]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE347]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE348]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE349]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: React Router’s `defer` function takes in an object of promised data. The property
    name in the object is a unique key for the data, which is `posts` in our case.
    The value is the function that fetches the data, which is `getPosts` in our case.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that we don’t await `getPosts` because we want the loader to complete
    and `PostsPage` to immediately render.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `PostsPage.tsx` and add an import statement for React’s `Suspense` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE350]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `Await` component to the React Router import statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE351]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the component, update the call to `useLoaderData` to assign the result to
    a `data` variable instead of `posts`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE352]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The shape of the loader data is a little different now – it will be an object
    containing a `posts` property containing the blog posts. The blog posts also won’t
    immediately be there as they previously were – the `data.posts` property will
    contain a promise for the blog posts instead.
  prefs: []
  type: TYPE_NORMAL
- en: Also, remove the call to `assertIsPosts` – we will use this later in *step 9*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `data` variable is of the `unknown` type, so add a type assertion function
    beneath the component that can be used to strongly type it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE353]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE354]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE355]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE356]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE357]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE358]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE359]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE360]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE361]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE362]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE363]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE364]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE365]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE366]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE367]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE368]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The type assertion function checks that the `data` parameter is an object containing
    a `posts` property.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can now use the assertion function to type the `data` variable in the component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE369]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE370]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the JSX, wrap `Suspense` and `Await` around `PostsList` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE371]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE372]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE373]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE374]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE375]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE376]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE377]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE378]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`Suspense` and `Await` work together to only render `PostsLists` when the data
    has been fetched. We use `Suspense` to render a `assertIsPosts` to ensure that
    `posts` is typed correctly.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the running app, you will now notice the **Fetching…** message when the
    page loads:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.7 – Fetching message during data fetching](img/B19051_09_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.7 – Fetching message during data fetching
  prefs: []
  type: TYPE_NORMAL
- en: Stop the app from running by pressing *Ctrl* + *C* in the terminal that is running
    the app but keep the API running.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The great thing about this solution is that a re-render still doesn’t occur
    when `PostsPage` is rendered because of the use of `Suspense` and `Await`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will now quickly recap what we have learned with React Router’s data-fetching
    capabilities:'
  prefs: []
  type: TYPE_NORMAL
- en: React Router’s `loader` allows us to efficiently load fetched data into a route
    component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: React Router’s `defer` allows the route component not to be blocked from rendering
    the component while data is being fetched
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: React Router’s `useLoaderData` hook allows a component to access a route’s loader
    data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: React’s `Suspense` and React Router’s `Await` allow a component to render while
    data is still being fetched
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For more information on deferred data in React Router, see the following link:
    [https://reactrouter.com/en/main/guides/deferred](https://reactrouter.com/en/main/guides/deferred).'
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will use another popular library for managing server
    data to further improve the user experience.
  prefs: []
  type: TYPE_NORMAL
- en: Using React Query
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: React Query is a popular library for interacting with REST APIs. The key thing
    it does is manage the state surrounding REST API calls. One thing that it does
    that React Router doesn’t is that it maintains a cache of the fetched data, which
    improves the perceived performance of an app.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will refactor the app to use React Query rather than React
    Router’s loader capability. We will then refactor the app again to use both React
    Query and React Router’s loader to get the best of both these worlds.
  prefs: []
  type: TYPE_NORMAL
- en: Installing React Query
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Our first job is to install React Query, which we can do by running the following
    command in a terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE379]'
  prefs: []
  type: TYPE_PRE
- en: This library includes TypeScript types, so no additional package is required
    to be installed.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the React Query provider
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'React Query requires a provider component in the component tree above the components
    that need access to the data it manages. Eventually, React Query will hold the
    blog post data in our app. Carry out the following steps to add the React Query
    provider component to the `App` component:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `App.tsx` and add the following import statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE380]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE381]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE382]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE383]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`QueryClient` provides access to the data. `QueryClientProvider` is the provider
    component we need to place in the component tree.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Wrap `QueryClientProvider` around `RouterProvider` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE384]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE385]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE386]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE387]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE388]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE389]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE390]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE391]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE392]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`QueryClientProvider` requires an instance of `QueryClient` to be passed into
    it, so we create this instance outside of the `App` component. We place the `queryClient`
    variable above the router definition because we will eventually use it in the
    router definition.'
  prefs: []
  type: TYPE_NORMAL
- en: The `PostsPage` component now has access to React Query. Next, we will use React
    Query in `PostsPage`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting data using React Query
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'React Query refers to a request to fetch data as a `useQuery` hook to carry
    out this. We will use React Query’s `useQuery` hook in the `PostsPage` component
    to call the `getPosts` function and store the data it returns. This will temporarily
    replace the use of React Router’s loader. Carry out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import `useQuery` from React Query:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE393]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add `getPosts` to the `getPosts` import statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE394]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We will eventually use `getPosts` to fetch data and store it within React Query.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `PostPage` component, comment out the `data` variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE395]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE396]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We are commenting these lines out rather than removing them because we will
    use them again in the next section when we use React Router and React Query together.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, add a call to `useQuery` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE397]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE398]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE399]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE400]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE401]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE402]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE403]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE404]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE405]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE406]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The first argument passed to `useQuery` is a unique key for the data. This is
    because React Query can store many datasets and uses the key to identify each
    one. The key is an array containing the name given to the data in our case. However,
    the key array could include things like the ID of a particular record we want
    to fetch or a page number if we want to only fetch a page of records.
  prefs: []
  type: TYPE_NORMAL
- en: The second argument passed to `useQuery` is the fetching function, which is
    our existing `getPosts` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have destructured the following state variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '`isLoading` – Whether the component is being loaded for the first time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`isFetching` – Whether the fetching function is being called. React Query will
    refetch data when it thinks it is stale. We will experience refetching later when
    we play with the app.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`data` – The data that has been fetched. We have aliased this `posts` variable
    to match the previous `posts` state value. Keeping the same name minimizes the
    changes required in the rest of the component.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'There are other useful state variables that can be destructured from `useQuery`.
    An example is `isError`, which indicates whether the `fetch` function errored.
    See the following link for more information: [https://tanstack.com/query/v4/docs/reference/useQuery](https://tanstack.com/query/v4/docs/reference/useQuery).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a loading indicator above the return statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE407]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE408]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE409]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE410]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE411]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE412]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE413]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE414]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The check for the `posts` state being `undefined` means that the TypeScript
    compiler knows that `posts` isn’t `undefined` when referenced in the JSX.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the JSX, comment out `Suspense` and its children:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE415]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE416]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE417]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE418]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE419]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE420]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE421]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE422]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE423]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE424]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE425]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE426]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE427]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE428]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We have commented this block out rather than removing it because we will revert
    to it in the next section when we use React Router and React Query together.
  prefs: []
  type: TYPE_NORMAL
- en: 'When data is being fetched, display a fetching indicator and render the blog
    posts when the data has been fetched:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE429]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE430]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE431]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE432]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE433]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE434]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE435]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE436]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE437]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE438]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the app by running `npm start` in the terminal. The blog post page will
    appear the same as it did before. A technical difference is that the `PostsPage`
    is re-rendered after the data has been fetched.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Leave the browser window and set the focus to a different window, such as your
    code editor. Now, set your focus back on the browser window and notice that the
    fetching indicator appears for a split second:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.8 – Fetching indicator when data is refetched](img/B19051_09_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.8 – Fetching indicator when data is refetched
  prefs: []
  type: TYPE_NORMAL
- en: 'This is because React Query, by default, assumes that data is stale when the
    browser regains focus. For more information on this behavior, see the following
    link in the React Query documentation: [https://tanstack.com/query/v4/docs/guides/window-focus-refetching](https://tanstack.com/query/v4/docs/guides/window-focus-refetching).'
  prefs: []
  type: TYPE_NORMAL
- en: 'A great feature of React Query is that it maintains a cache of the data. This
    allows us to render components with data from the cache while fresh data is being
    fetched. To experience this, in the `PostsPage` JSX, remove the `isFetching` condition
    for when `PostsList` is rendered:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE439]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: So, `PostsList` will now render even if the data is stale.
  prefs: []
  type: TYPE_NORMAL
- en: In the running app, press *F5* to refresh the page. Then, leave the browser
    window and set the focus to a different window. Set your focus back on the browser
    window and notice that no fetching indicator appears and the blog posts list remains
    intact.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Repeat the previous step but this time, observe the **Network** tab in the
    browser’s DevTools. Notice that a second network request is made when the app
    is refocused:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.9 – Two API requests for blog posts](img/B19051_09_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.9 – Two API requests for blog posts
  prefs: []
  type: TYPE_NORMAL
- en: So, React Query seamlessly allows the component to render the old data and re-renders
    it with the new data after it has been fetched.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will continue to refactor the posts page to use React Query when a
    new blog post is sent to the API.
  prefs: []
  type: TYPE_NORMAL
- en: Updating data using React Query
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'React Query can update data using a feature called `useMutation` hook. Carry
    out the following steps in `PostsPage.tsx` to change the saving of a new blog
    post to use a React Query mutation:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the React Query import as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE440]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE441]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE442]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE443]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE444]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `useMutation` hook allows us to carry out a mutation. The `useQueryClient`
    hook will enable us to get the instance of `queryClient` that the component is
    using and access and update the cached data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a call to `useMutation` after the call to `useQuery` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE445]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE446]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE447]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE448]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE449]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE450]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We pass `useMutation` the function that performs the REST API HTTP `POST` request.
    We destructure the `mutate` function from the return value of `useMutation`, which
    we will use in *step 4* to trigger the mutation.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'There are other useful state variables that can be destructured from `useMutation`.
    An example is `isError`, which indicates whether the `fetch` function errored.
    See the following link for more information: [https://tanstack.com/query/v4/docs/reference/useMutation](https://tanstack.com/query/v4/docs/reference/useMutation).'
  prefs: []
  type: TYPE_NORMAL
- en: 'When the mutation has successfully been completed, we want to update the `posts`
    cache to contain the new blog post. Make the following highlighted changes to
    implement this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE451]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE452]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE453]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE454]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE455]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE456]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE457]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE458]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE459]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE460]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE461]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE462]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE463]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE464]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE465]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The second argument on `useMutation` allows the mutation to be configured. The
    `onSuccess` configuration option is a function called when the mutation has been
    successfully completed.
  prefs: []
  type: TYPE_NORMAL
- en: '`useQueryClient` returns the query client that the component is using. This
    query client has a method called `setQueryData`, which allows the cached data
    to be updated. `setQueryData` has arguments for the key of the cached data and
    the new copy of data to be cached.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can trigger the mutation when the new post is saved by calling the destructured
    `mutate` function in the `onSave` prop on the `NewPostForm` JSX element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE466]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, we can remove the `handleSave` function because this is now redundant.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The imported `NewPostData` type can be removed as well. This type’s import
    statement should now be as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE467]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the running app, if you enter and save a new blog post, it will appear in
    the list as in the previous implementation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.10 – New blog post added to posts list](img/B19051_09_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.10 – New blog post added to posts list
  prefs: []
  type: TYPE_NORMAL
- en: 'That completes the refactoring of saving new blog posts to use a React Query
    mutation. That also completes this section on React Query – here’s a recap of
    the key points:'
  prefs: []
  type: TYPE_NORMAL
- en: React Query is a popular library that manages data from a backend API in a cache,
    helping to improve performance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: React Query doesn’t actually make the HTTP requests – the browser’s `fetch`
    function can be used to do this
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: React Query’s `QueryClientProvider` component needs to be placed high in the
    component tree above where backend data is needed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: React Query’s `useQuery` hook allows data to be fetched and cached in state
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: React Query’s `useMutation` hook allows data to be updated
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For more information on React Query, visit the library’s documentation site:
    [https://tanstack.com/query](https://tanstack.com/query).'
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will learn how to integrate React Query into React Router’s data-fetching
    capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Using React Router with React Query
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have experienced the benefits of both React Router and React Query
    data fetching. React Router reduces the number of re-renders, while React Query
    provides a client-side cache of the data. In this section, we will use these libraries
    together in our app so that it has both these benefits.
  prefs: []
  type: TYPE_NORMAL
- en: 'Carry out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by opening `App.tsx` and change the loader function on the route definition
    to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE468]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE469]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE470]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE471]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE472]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE473]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE474]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE475]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE476]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE477]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE478]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE479]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE480]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE481]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE482]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE483]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE484]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE485]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE486]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE487]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Inside the loader, we use React Query’s `getQueryData` function on the query
    client to get the existing data from its cache. If there is cached data, it is
    returned; otherwise, the data is fetched, deferred, and added to the cache.
  prefs: []
  type: TYPE_NORMAL
- en: Open `PostsPage.tsx` and remove the use of React Query’s `useQuery` because
    the React Router loader manages the data loading process now.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove the `getPosts` function from the `getPosts` import statement because
    this is used in the React Router loader now.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Also, remove the loading indicator because we will revert to using React Suspense
    in *step 6*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The data will be retrieved using React Router’s `useLoaderData` hook again,
    so uncomment those two lines of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE488]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE489]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE490]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE491]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE492]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE493]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE494]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Also, reinstate the use of `Suspense` and `Await` in the JSX. The JSX should
    be as follows now:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE495]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE496]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE497]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE498]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE499]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE500]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE501]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE502]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE503]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE504]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE505]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE506]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE507]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE508]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The running app will appear and display the blog posts just as before, but a
    second render of `PostsPage` will no longer occur when the app is first loaded.
    However, after adding a new blog post using the form, it doesn’t appear in the
    list. We will resolve this in the next step.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After the new blog post has been saved, we need to cause the route component
    to re-render in order to get the latest data. We can do this by causing the router
    to navigate to the page we are already on, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE509]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE510]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE511]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE512]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE513]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE514]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE515]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE516]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE517]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE518]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE519]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE520]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE521]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE522]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE523]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE524]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE525]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE526]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE527]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE528]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE529]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE530]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE531]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE532]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE533]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE534]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We perform the navigation after the blog post has been saved and added to the
    cache. This means the route’s loader will execute and populate its data from the
    cache. `PostsPage` will then be rendered with `useLoaderData` returning the up-to-date
    data.
  prefs: []
  type: TYPE_NORMAL
- en: 'That completes this final revision of the app and this section on using React
    Router with React Query. By integrating these two libraries, we get the following
    key benefits of each library:'
  prefs: []
  type: TYPE_NORMAL
- en: React Router’s data loader prevents an unnecessary re-render when data is loaded
    onto a page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: React Query’s cache prevents unnecessary calls to the REST API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The way these two libraries integrate is to get and set data in the React Query
    cache, in the React Router loader.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we used the browser’s `fetch` function to make HTTP `GET` and
    `POST` requests. The request’s URL is the first argument on the `fetch` function.
    The second argument on `fetch` allows the request options to be specified, such
    as the HTTP method and body.
  prefs: []
  type: TYPE_NORMAL
- en: A type assertion function can be used to strongly type the data in the response
    body of an HTTP request. The function takes in the data having an `unknown` type.
    The function then carries out checks to validate the type of data and throws an
    error if it is invalid. If no errors occur, the asserted type for the data is
    specified in the functions assertion signature.
  prefs: []
  type: TYPE_NORMAL
- en: React’s `useEffect` hook can be used to execute a call to fetch data from a
    backend API and store the data in the state when the component is mounted. A flag
    can be used inside `useEffect` to ensure the component is still mounted after
    the HTTP request before the data state is set.
  prefs: []
  type: TYPE_NORMAL
- en: React Query and React Router replace the use of `useEffect` and `useState` in
    the data-fetching process and simplify our code. React Router’s loader function
    allows data to be fetched and passed into the component route removing an unnecessary
    re-render. React Query contains a cache that can be used in components to render
    data optimistically while up-to-date data is being fetched. React Query also contains
    a `useMutation` hook to enable data to be updated.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will cover how to interact with GraphQL APIs.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Answer the following questions to check what you have learned in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following effect attempts to fetch data from a REST API and store it in
    the state:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE535]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE536]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE537]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE538]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE539]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: What are the problems with this implementation?
  prefs: []
  type: TYPE_NORMAL
- en: 'The following fetching function returns an array of first names:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE540]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE541]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE542]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE543]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE544]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: However, the return type of the function is `any`. So, how can we improve the
    implementation to have a return type of `string[]`?
  prefs: []
  type: TYPE_NORMAL
- en: In the `fetch` function argument, what should be specified in the `method` option
    for it to make an HTTP `PUT` request?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE545]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE546]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE547]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE548]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How do you specify a bearer token in an HTTP `Authorization` header when making
    an HTTP request to a protected resource using `fetch`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A component uses React Query’s `useQuery` to fetch data but the component errors
    with the following error:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Uncaught Error: No QueryClient set, use QueryClientProvider to** **set one**'
  prefs: []
  type: TYPE_NORMAL
- en: What do you think the problem is?
  prefs: []
  type: TYPE_NORMAL
- en: What state variable can be destructured from React Query’s `useMutation` to
    determine whether the HTTP request has returned an error?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Answers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are two problems with the implementation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`useEffect` doesn’t support top-level `async`/`await`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If the component is umounted during the HTTP request, an error will occur when
    the `data` state is set
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is an implementation with those issues resolved:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE549]'
  prefs: []
  type: TYPE_PRE
- en: 'An `assert` function can be used on the response body object as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE550]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE551]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE552]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE553]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE554]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE555]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE556]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE557]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE558]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE559]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE560]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE561]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE562]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE563]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE564]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE565]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE566]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE567]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE568]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE569]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE570]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The method option should be `''PUT''`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE571]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE572]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE573]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE574]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `headers.Authorization` option can be used to specify a bearer token when
    making an HTTP request to a protected resource using `fetch`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE575]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE576]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE577]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE578]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE579]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE580]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The problem is that React Query’s `QueryClientProvider` hasn’t been placed above
    the component using `useQuery` in the component tree.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `isError` state variable can be destructured from React Query’s `useMutation`
    to determine whether the HTTP request has returned an error. Alternatively, the
    `status` state variable can be checked for a value of `'error'`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
