- en: Chapter 9. Angular 2 Directives
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章。Angular 2指令
- en: Throughout this book, we learned how to craft Angular 2 components. Before we
    end our journey, it's important to understand that Angular 2 didn't kill the concept
    of directives. As a matter of fact, a component *is* a directive. In this chapter,
    we will introduce Angular 2 directives and how to use them.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在整本书中，我们学习了如何制作Angular 2组件。在结束我们的旅程之前，了解Angular 2并没有淘汰指令的概念是很重要的。事实上，组件*就是*指令。在本章中，我们将介绍Angular
    2指令以及如何使用它们。
- en: 'The following are the topics that we will cover:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们将要涵盖的主题：
- en: The difference between components and directives in Angular 2
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular 2中组件和指令的区别
- en: Angular 2 directive types
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular 2指令类型
- en: How to build a simple attribute directive
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何构建一个简单的属性指令
- en: How to build a simple structural directive
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何构建一个简单的结构指令
- en: Components and directives in Angular 2
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Angular 2中的组件和指令
- en: Up until now, we have built components. But components do not replace the directives
    that we are familiar with from Angular 1\. If you are not familiar with Angular
    1 directives, don't worry, we will explain the difference in a minute.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经构建了组件。但是组件并没有取代我们从Angular 1中熟悉的指令。如果您不熟悉Angular 1指令，不用担心，我们将在一分钟内解释区别。
- en: 'Let''s start by defining what a directive is in Angular terminology: a directive
    is a custom attribute or an element that extends HTML tags by adding custom behavior.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先定义在Angular术语中指令是什么：指令是一个自定义属性或元素，通过添加自定义行为来扩展HTML标签。
- en: 'In Angular 2, we have three types of directive: component directive, attribute
    directive, and structural directive. We are already familiar with components,
    so let''s define the other types:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在Angular 2中，我们有三种类型的指令：组件指令，属性指令和结构指令。我们已经熟悉了组件，所以让我们定义其他类型：
- en: '**Attribute directive**: This changes the appearance or behavior of an element.
    One example for this can be the NgStyle directive from Angular core.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**属性指令**：这改变了元素的外观或行为。其中一个例子是Angular核心中的NgStyle指令。'
- en: '**Structural directive**: This manipulates the DOM, just like NgFor and NgSwitch
    from the Angular core.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**结构指令**：这操纵DOM，就像Angular核心中的NgFor和NgSwitch一样。'
- en: Directives as opposed to components, do not require a template, and usually
    define a selector as an attribute.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 与组件相反，指令不需要模板，并通常将选择器定义为属性。
- en: Preparing our development environment
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备我们的开发环境
- en: 'Like for previous chapters, let''s create a new project as explained in [Chapter
    2](part0020.xhtml#aid-J2B81 "Chapter 2. Setting Up an Angular 2 Development Environment
    with angular-cli"), *Setting Up an Angular 2 Development Environment with angular-cli*.
    You can also remove all the existing folders and remove all the unnecessary code
    from `app.component.ts`:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 就像前几章一样，让我们创建一个新项目，如[第2章](part0020.xhtml#aid-J2B81 "第2章。使用angular-cli设置Angular
    2开发环境")中所述，*使用angular-cli设置Angular 2开发环境*。您还可以删除所有现有文件夹，并从`app.component.ts`中删除所有不必要的代码：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The basic attribute directive
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本属性指令
- en: 'Let''s begin by creating a new file for our directive named `text-marker.ts`.
    Inside it, paste the following code:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始创建一个名为`text-marker.ts`的新指令文件。在其中，粘贴以下代码：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: To create a directive, we need to import the `Directive` decorator function
    from Angular core. We will also need two more classes named `ElementRef` and `Renderer`
    to manipulate the element. They are injected to our directive class from its constructor.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个指令，我们需要从Angular核心导入`Directive`装饰器函数。我们还需要另外两个名为`ElementRef`和`Renderer`的类来操纵元素。它们从构造函数中注入到我们的指令类中。
- en: This directive will add styling to the element and decorate the text with an
    underline.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 该指令将为元素添加样式，并用下划线装饰文本。
- en: 'Let''s test this directive by applying it on our `app component` template.
    Open `index.ts` and add the following code:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过将其应用于我们的`app组件`模板来测试这个指令。打开`index.ts`并添加以下代码：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Don''t forget to add the `TextMarker` class to the `declarations` attribute
    of the root module. This operation will be required for all custom components
    and directives implemented in this chapter. Open the `app.module.ts` file and
    update it as described here:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记将`TextMarker`类添加到根模块的`declarations`属性中。这个操作对本章中实现的所有自定义组件和指令都是必需的。打开`app.module.ts`文件并按照这里描述的更新它：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Open the browser and inspect the result:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 打开浏览器并检查结果：
- en: '![The basic attribute directive](../Images/image00119.jpeg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![基本属性指令](../Images/image00119.jpeg)'
- en: ElementRef and Renderer
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ElementRef和Renderer
- en: Attribute directives intend to add behavior to an element. For this, we need
    to gain access to the element itself. In Angular 2, direct access to a DOM element
    is considered to be bad practice. Angular keeps the code separated from the view
    layer by introducing an abstraction layer.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 属性指令旨在为元素添加行为。为此，我们需要访问元素本身。在Angular 2中，直接访问DOM元素被认为是不良实践。Angular通过引入一个抽象层将代码与视图层分离。
- en: To reference the element, we use `ElementRef`, which is the class that represents
    the type of element of the platform we are running on. In our case, it's the browser
    DOM. The `ElementRef` class has the ability to reveal the native element that
    it wraps, but we won't need it. Instead, we will use another class named `Renderer`
    and pass the `ElementRef` instance to it. `Renderer` is a class that exposes methods
    for manipulating the element, without specifying which type of element it is.
    This mechanism keeps our code decoupled from the element's implementation.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 为了引用元素，我们使用`ElementRef`，它是代表我们正在运行的平台的元素类型的类。在我们的情况下，它是浏览器DOM。`ElementRef`类具有揭示它包装的原生元素的能力，但我们不需要它。相反，我们将使用另一个名为`Renderer`的类，并将`ElementRef`实例传递给它。`Renderer`是一个公开用于操作元素的方法的类，而不指定它是哪种类型的元素。这种机制使我们的代码与元素的实现保持解耦。
- en: Reacting to events from the host element
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对来自宿主元素的事件做出反应
- en: 'An attribute directive applies on an element. If we want to react to the events
    that this element fires, we can use the `HostListener` decorator on some methods
    of the `Directive` class. In the following example, our directive will listen
    to mouse events from the element and change the style in response:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 属性指令适用于一个元素。如果我们想要对这个元素触发的事件做出反应，我们可以在`Directive`类的一些方法上使用`HostListener`装饰器。在下面的例子中，我们的指令将监听来自元素的鼠标事件并做出响应地改变样式：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now, the style will be applied and removed each time the mouse enters and leaves
    the element that *host* the attribute directive.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，每次鼠标进入和离开*承载*属性指令的元素时，样式都会被应用和移除。
- en: Passing properties to the directive
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将属性传递给指令
- en: We can also pass configuration into the directive by using properties. Just
    like components, directives can declare inputs. Let's refactor our `Directive`
    class to fetch and apply a text color from a property
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过使用属性将配置传递给指令。就像组件一样，指令可以声明输入。让我们重构我们的`Directive`类以从属性中获取并应用文本颜色
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'By using the `Input` decorator, we can accept the value of the property (in
    our case, it is `text-marker`) and use it inside our directive class. Now we can
    pass the color that we want to use. Open `app.component.ts` and try the following
    code:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用`Input`装饰器，我们可以接受属性的值（在我们的例子中是`text-marker`）并在指令类内部使用它。现在我们可以传递我们想要使用的颜色。打开`app.component.ts`并尝试以下代码：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now, each time the mouse enters the `h1` element, the text should be colored
    in red and decorated with an underline:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，每次鼠标进入`h1`元素时，文本应该被着色为红色并带有下划线：
- en: '![Passing properties to the directive](../Images/image00120.jpeg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![将属性传递给指令](../Images/image00120.jpeg)'
- en: The basic structural directive
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本结构指令
- en: As we mentioned at the beginning of this chapter, the third type of directive
    is called structural directives, and as the name suggests, those directives are
    meant to manipulate the element that they applied on. Angular core includes several
    directives that manipulate the DOM, such as `ngIf`, `ngFor`, and `ngSwitch`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在本章开头提到的，第三种指令类型称为结构指令，顾名思义，这些指令旨在操作它们所应用的元素。Angular核心包括几个操作DOM的指令，如`ngIf`、`ngFor`和`ngSwitch`。
- en: For our example, we will implement our own `ngIf` directive that behaves just
    like the original one.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的示例，我们将实现自己的`ngIf`指令，其行为与原始指令完全相同。
- en: 'First, create a new file named `only-if.ts` and let''s define the basic structure
    for our directive:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建一个名为`only-if.ts`的新文件，让我们为指令定义基本结构：
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The structural directives begin their lives just like an attribute directive.
    We import the `@Directive` decorator from the Angular core and declare the selector
    as an attribute.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 结构指令的生命周期开始时就像属性指令一样。我们从Angular核心导入`@Directive`装饰器，并将选择器声明为属性。
- en: 'Next, we will need to access the template, and we will need some kinds of container
    so we can attach or remove views. For this, we will need to inject `TemplateRef`
    and `ViewContainerRef`:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要访问模板，并且我们需要一些容器类型，以便我们可以附加或移除视图。为此，我们需要注入`TemplateRef`和`ViewContainerRef`：
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Our directive, just like the Angular `ngIf`, needs to receive a Boolean from
    its caller that represents the condition on which the content will be shown or
    removed. For this, we will declare an input for this condition and make use of
    `ViewContainerRef` and `TemplateRef`:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的指令，就像Angular的`ngIf`一样，需要从其调用者那里接收一个布尔值，表示内容将显示或移除的条件。为此，我们将为此条件声明一个输入，并利用`ViewContainerRef`和`TemplateRef`：
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Let''s make use of this directive. Open `app.component.ts` and paste the following
    code:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用这个指令。打开`app.component.ts`并粘贴以下代码：
- en: '[PRE10]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Don't forget to add the `OnlyIf` class to the `declarations` attribute of the
    root module.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记将`OnlyIf`类添加到根模块的`declarations`属性中。
- en: 'Let''s explore what''s going on: when we use the asterisk (`*`) to call our
    directive, Angular creates a `<template>` tag behind the scenes. Inside our directive,
    we can get a reference for this template through the `TemplateRef` class. Then,
    we can use the `ViewContainerRef` class, which represents a `container` so that
    we can embed a view into it, to create or clear a view from the content of the
    template.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来探究一下：当我们使用星号（`*`）来调用我们的指令时，Angular在幕后创建了一个`<template>`标签。在我们的指令内部，我们可以通过`TemplateRef`类获取对此模板的引用。然后，我们可以使用`ViewContainerRef`类，它代表一个`容器`，以便我们可以将视图嵌入其中，或者从模板的内容中创建或清除视图。
- en: Summary
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In Angular 2, there are three types of directive: component directive, attribute
    directive, and structural directive. Throughout this chapter, we got a quick introduction
    to them and learned how to build simple directives. Directives can do much more,
    but that''s beyond the scope of this book.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在Angular 2中，有三种类型的指令：组件指令、属性指令和结构指令。在本章中，我们对它们进行了简要介绍，并学习了如何构建简单的指令。指令可以做更多的事情，但这超出了本书的范围。
