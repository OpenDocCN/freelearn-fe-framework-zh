- en: Chapter 1. Creating the Base Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一章 创建基础应用程序
- en: The Angular application we will build is a list of posts you regularly see in
    a social app such as Twitter. Each of these posts is posted by a user and we can
    click through to the user's profile to show all the posts made by the profile.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将构建的 Angular 应用程序是一个列表，你通常在像 Twitter 这样的社交应用程序中看到这些帖子。每个帖子都是由用户发布的，我们可以点击到用户的个人资料以显示该个人资料发布的所有帖子。
- en: We will intentionally keep the application simple as the book is meant to focus
    on the technology rather than the functionality of the app. Although the app is
    simple, we will develop it using all the best practices of Angular development.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 由于本书旨在关注技术而非应用程序的功能，我们将故意保持应用程序简单。尽管应用程序很简单，但我们将使用 Angular 开发的所有最佳实践来开发它。
- en: Web applications built with Angular can be optimized for search engines (SEO).
    Building support for SEO in apps means that search engines can read and understand
    the pages, and that the pages have dynamic data that is specifically aimed at
    search engines (meta tags). This increases the visibility of your app, giving
    higher search rankings and more links, resulting in more revenues for you or your
    client. Angular provides built-in features that can be leveraged to ensure apps
    enjoy maximum visibility on the web.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Angular 构建的 Web 应用程序可以针对搜索引擎优化（SEO）。在应用程序中构建 SEO 支持意味着搜索引擎可以读取和理解页面，并且页面具有针对搜索引擎的动态数据（元标签）。这增加了应用程序的可见性，提高了搜索排名和链接数量，从而为您或您的客户带来更多收入。Angular
    提供了可以利用的内置功能，以确保应用程序在网络上享有最大的可见性。
- en: Lesson Objectives
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 课程目标
- en: 'In this lesson, you will:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本课中，你将：
- en: Install Angular CLI
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Angular CLI
- en: Create an Angular application
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 Angular 应用程序
- en: Create the base UI of the application
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建应用程序的基本 UI
- en: Create the header and footer of our application
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建应用程序的页眉和页脚
- en: Server-Side and Client-Side Rendering
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务器端和客户端渲染
- en: When we talk about server-side rendering of websites, we are generally referring
    to an application or website that uses a programming language that runs on a server.
    On this server, the web pages are created (rendered) and the output of that rendering
    (the HTML) is sent to the browser, where it can be displayed directly.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们谈论网站的客户端渲染时，我们通常指的是使用在服务器上运行的编程语言的应用程序或网站。在这个服务器上，网页被创建（渲染），渲染的输出（HTML）被发送到浏览器，在那里可以直接显示。
- en: Note
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The code bundle for this book is hosted on GitHub at [https://github.com/TrainingByPackt/Beginning-Server-Side-Application-Development-with-Angular](https://github.com/TrainingByPackt/Beginning-Server-Side-Application-Development-with-Angular)
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本书代码包托管在 GitHub 上，网址为 [https://github.com/TrainingByPackt/Beginning-Server-Side-Application-Development-with-Angular](https://github.com/TrainingByPackt/Beginning-Server-Side-Application-Development-with-Angular)
- en: When we talk about client-side rendering, we are generally referring to an application
    or website that uses JavaScript running in the browser to display (render) the
    pages. There is often a single page that is downloaded, with a JavaScript file
    that builds up the actual page (hence the term *single-page application*).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们谈论客户端渲染时，我们通常指的是使用在浏览器中运行的 JavaScript 来显示（渲染）网页的应用程序或网站。通常有一个页面被下载，包含一个 JavaScript
    文件，该文件构建实际的页面（因此称为 *单页应用程序*）。
- en: Installing Angular CLI
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Angular CLI
- en: Angular CLI is the officially supported tool for creating and developing Angular
    applications. It is an open source project that is maintained by the Angular team
    and is the recommended way to develop Angular applications.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Angular CLI 是创建和开发 Angular 应用程序的官方支持工具。它是一个由 Angular 团队维护的开源项目，并且是开发 Angular
    应用程序的推荐方式。
- en: 'Angular CLI offers the following functionality:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Angular CLI 提供以下功能：
- en: Create a new application
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建新的应用程序
- en: Run the application in development mode
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以开发模式运行应用程序
- en: Generate code using the best practices from the Angular team
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Angular 团队的最佳实践生成代码
- en: Run unit tests and end-to-end tests
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行单元测试和端到端测试
- en: Create a production-ready build
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建生产就绪的构建
- en: 'One of the main benefits of using Angular CLI is that you don''t need to configure
    any build tools. It''s all abstracted away and available through one handy command:
    `ng`.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Angular CLI 的主要好处之一是您不需要配置任何构建工具。所有这些都被抽象化并通过一个便捷的命令 `ng` 提供使用。
- en: Throughout the book, we will be using the `ng` command for creating the app,
    generating the code, running the application in development mode, and creating
    builds.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在整本书中，我们将使用 `ng` 命令来创建应用程序、生成代码、以开发模式运行应用程序以及创建构建。
- en: Note
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For more information about Angular CLI, refer to the project page on GitHub
    ([https://github.com/angular/angular-cli](https://github.com/angular/angular-cli))
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 Angular CLI 的更多信息，请参阅 GitHub 上的项目页面 ([https://github.com/angular/angular-cli](https://github.com/angular/angular-cli))
- en: 'To install Angular CLI on your machine, perform the following steps:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 要在您的机器上安装 Angular CLI，请执行以下步骤：
- en: Open your terminal.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的终端。
- en: 'Run the following command:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE0]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Once the installation is finished without any errors, make sure that the `ng`
    command works as expected by running the following command:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦安装完成且没有错误，请确保 `ng` 命令按预期工作，运行以下命令：
- en: '[PRE1]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Verify that the output is similar to the output shown here:![Installing Angular
    CLI](img/1.1.jpg)
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证输出是否与这里显示的输出相似：![安装 Angular CLI](img/1.1.jpg)
- en: In this section, we have installed Angular CLI. We can start building our application!
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们已经安装了 Angular CLI。我们可以开始构建我们的应用程序！
- en: Generating a New Application
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成新的应用程序
- en: Now that we have installed and configured Angular CLI, we can start generating
    our new application.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装并配置了 Angular CLI，我们可以开始生成我们的新应用程序。
- en: 'Running the `ng new` command will do the following:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 `ng new` 命令将执行以下操作：
- en: Create a folder called `angular-social`
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个名为 `angular-social` 的文件夹
- en: Create a new basic application inside this folder
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在此文件夹内创建一个新的基本应用程序
- en: Add a routing module (because the `--routing` flag is passed in)
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加一个路由模块（因为传递了 `--routing` 标志）
- en: Run `npm install` inside this folder to install the dependencies
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在此文件夹内运行 `npm install` 以安装依赖项
- en: Run `git init` to initialize a new Git repository
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行 `git init` 以初始化一个新的 Git 仓库
- en: Creating a New Application
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建新的应用程序
- en: 'To create a new application, perform the following steps:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建新的应用程序，请执行以下步骤：
- en: 'Open your terminal and navigate to the directory where you want to work on
    your application:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的终端并导航到您想要工作于应用程序的目录：
- en: '[PRE2]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Once inside your workspace directory, invoke the `ng` command as follows:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦进入工作区目录，按照以下方式调用 `ng` 命令：
- en: '[PRE3]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The output of this command will be similar to the following:![Creating a New
    Application](img/1.2.jpg)
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此命令的输出将类似于以下内容：![创建新的应用程序](img/1.2.jpg)
- en: 'Let''s have a look at the folders that are created after running this command:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看运行此命令后创建的文件夹：
- en: '`src`: This folder contains the source files for our application'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src`：此文件夹包含我们应用程序的源文件'
- en: '`src/app/`: This folder contains the application files'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src/app/`：此文件夹包含应用程序文件'
- en: '`src/assets/`: This folder contains the static assets we can use in our application
    (such as images)'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src/assets/`：此文件夹包含我们可以在应用程序中使用的静态资源（例如图片）'
- en: '`src/environments/`: This folder contains the definition of the default environments
    of our application'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src/environments/`：此文件夹包含我们应用程序默认环境的定义'
- en: '`e2e`: This folder contains the end-to-end tests for our application'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`e2e`：此文件夹包含我们应用程序的端到端测试'
- en: Serving the Application
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行应用程序
- en: 'To serve the application, perform the following steps:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行应用程序，请执行以下步骤：
- en: 'When the installation is finished, we can open our terminal and enter the working
    directory:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，我们可以打开终端并进入工作目录：
- en: '[PRE4]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Run the `ng serve` command to start the development server:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `ng serve` 命令以启动开发服务器：
- en: '[PRE5]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The output of the command will be as follows:'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 命令的输出将如下所示：
- en: '![Serving the Application](img/1.3.jpg)'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![运行应用程序](img/1.3.jpg)'
- en: Viewing Your Application
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查看您的应用程序
- en: 'To view your application, perform the following steps:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看您的应用程序，请执行以下步骤：
- en: Open your browser and navigate to `http://localhost:4200/`.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的浏览器并导航到 `http://localhost:4200/`。
- en: You should be greeted with a default page that says **Welcome to app!**:![Viewing
    Your Application](img/1.4.jpg)
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该会看到一个默认页面，上面写着 **欢迎使用 app**！![查看应用程序](img/1.4.jpg)
- en: In this section, we have created a basic application using Angular CLI and viewed
    the same in the browser.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们使用 Angular CLI 创建了一个基本应用程序，并在浏览器中查看了它。
- en: Setting Defaults for Angular CLI
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 Angular CLI 的默认值
- en: Angular CLI works great out of the box and the default setup delivers a nice
    configuration to work with. But in addition to having some sane defaults, it is
    also very configurable.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Angular CLI 默认情况下工作得很好，默认设置提供了一个很好的配置来工作。但除了有一些合理的默认设置外，它也非常可配置。
- en: In this book, we will take the opportunity to configure our Angular CLI defaults
    so it behaves a little bit differently.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将利用这个机会来配置 Angular CLI 的默认设置，使其表现得略有不同。
- en: The things we are going to change all have to do with how we generate (or scaffold)
    our code.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要更改的所有内容都与我们的代码生成（或脚手架）方式有关。
- en: When scaffolding components, the default Angular CLI settings will create the
    HTML template and style sheet in a separate file.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建组件时，默认的 Angular CLI 设置将在单独的文件中创建 HTML 模板和样式表。
- en: In order to keep all component content in one file, we will configure Angular
    CLI to generate inline templates and styles.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将所有组件内容保持在单个文件中，我们将配置 Angular CLI 以生成内联模板和样式。
- en: The advantage of keeping all the component content in one file is that you can
    work on templates, styles, and the actual component code in a single place without
    having to switch files.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有组件内容保持在单个文件中的优点是，你可以在一个地方工作于模板、样式和实际的组件代码，而无需切换文件。
- en: Configuring Global Defaults
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置全局默认值
- en: 'In your terminal, run the following commands to globally configure the defaults:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的终端中，运行以下命令以全局配置默认值：
- en: '[PRE6]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'When we run the `git diff` command, we see that these settings are stored in
    the `.angular-cli.json` file in our application:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行 `git diff` 命令时，我们会看到这些设置存储在我们的应用程序的 `.angular-cli.json` 文件中：
- en: '![Configuring Global Defaults](img/1.6.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![配置全局默认值](img/1.6.jpg)'
- en: In this section, we have configured Angular CLI to generate inline styles and
    templates.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们已经配置了 Angular CLI 以生成内联样式和模板。
- en: Configuring Global Styles
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置全局样式
- en: The default generated Angular application does not have any styling.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 默认生成的 Angular 应用程序没有任何样式。
- en: Angular does not dictate anything in terms of style, so in your own projects,
    you can use any other style framework, such as Angular Material, Foundation, Semantic
    UI, or one of the many others. Alternatively, you can create your own styles from
    scratch to get a unique look and feel.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Angular 在样式方面没有规定任何内容，所以在你自己的项目中，你可以使用任何其他的样式框架，例如 Angular Material、Foundation、Semantic
    UI 或许多其他之一。或者，你可以从头开始创建自己的样式，以获得独特的视觉和感觉。
- en: For this book, though, we will stick to Bootstrap 4 and Font Awesome as they're
    widely used and they provide a great style with a minimal amount of added code.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，对于这本书，我们将坚持使用 Bootstrap 4 和 Font Awesome，因为它们被广泛使用，并且它们以最少的代码提供了很好的样式。
- en: Linking to the Style Sheets in global styles.css
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在全局样式.css 中链接到样式表
- en: As discussed in the previous section, our application comes with a global style
    sheet, `src/styles.css`.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们的应用程序附带一个全局样式表，`src/styles.css`。
- en: In this style sheet, we will use the `@import` command to link to Bootstrap
    and Font Awesome. This will instruct Angular to download the files and apply the
    style to your application globally.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个样式表中，我们将使用 `@import` 命令来链接到 Bootstrap 和 Font Awesome。这将指示 Angular 下载文件并将样式应用于应用程序的全局范围。
- en: Adding Bootstrap and Font Awesome
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加 Bootstrap 和 Font Awesome
- en: Open the `src/styles.css` file in your editor.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的编辑器中打开 `src/styles.css` 文件。
- en: 'Add the following two lines at the end of the file:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件的末尾添加以下两行：
- en: '[PRE7]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Refresh the app in the browser.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中刷新应用程序。
- en: 'As you can see, the font of the application was updated to a sans-serif font
    as that''s the Bootstrap default:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，应用程序的字体已更新为无衬线字体，因为这是 Bootstrap 的默认设置：
- en: '![Adding global stylesstyles, linking toBootstrap and Font Awesome](img/1.8.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![添加全局样式，链接到 Bootstrap 和 Font Awesome](img/1.8.jpg)'
- en: Showing an Icon on the Page
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在页面上显示图标
- en: 'Open the `src/app.component.html` file and replace the content with the following:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `src/app.component.html` 文件，并将其内容替换为以下内容：
- en: '[PRE8]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'When the app refreshes in your browser, you should see the thumbs up icon in
    the center of the page:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用程序在浏览器中刷新时，你应该在页面中心看到点赞图标：
- en: '![Showing anglobal stylesstyles, linking to Icon on the Page](img/1.10.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![显示全局样式，链接到页面上显示的图标](img/1.10.jpg)'
- en: Note
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For a list of all available icons, you can refer to the *Font Awesome Cheatsheet*
    ([http://fontawesome.io/cheatsheet/](http://fontawesome.io/cheatsheet/)).
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 对于所有可用图标列表，你可以参考 *Font Awesome 快速参考* ([http://fontawesome.io/cheatsheet/](http://fontawesome.io/cheatsheet/))。
- en: For an overview of all available Bootstrap styles, you can refer to the Bootstrap
    4 documentation ([https://getbootstrap.com/docs/4.0/getting-started/introduction/](https://getbootstrap.com/docs/4.0/getting-started/introduction/)).
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 对于所有可用的 Bootstrap 样式的概述，你可以参考 Bootstrap 4 文档 ([https://getbootstrap.com/docs/4.0/getting-started/introduction/](https://getbootstrap.com/docs/4.0/getting-started/introduction/))。
- en: In this section, we have set up Bootstrap and Font Awesome as the style frameworks
    for our app. This will enable us to have a different font style than what Angular
    CLI provides. We can now start creating our UI components.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们已经将 Bootstrap 和 Font Awesome 设置为我们的应用程序的样式框架。这将使我们能够拥有与 Angular CLI 提供的不同的字体样式。现在我们可以开始创建我们的
    UI 组件了。
- en: Creating UI Modules and Components
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 UI 模块和组件
- en: One of the great things about working with Angular is that it promotes building
    your applications in a modular and componentized way.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Angular 一起工作的一个优点是它促进了以模块化和组件化的方式构建应用程序。
- en: In Angular, an `NgModule` (or simply `Module`) is a way to group your application
    into logical blocks of functionality.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Angular 中，`NgModule`（或简称 `Module`）是将您的应用程序分组为功能逻辑块的一种方式。
- en: A `Module` is a TypeScript class with the `@NgModule` decorator. In the decorator,
    we define how Angular compiles and runs the code inside the module.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`Module` 是一个带有 `@NgModule` 装饰器的 TypeScript 类。在装饰器中，我们定义 Angular 如何编译和运行模块内的代码。'
- en: In this lesson, we are going to build a module that groups together all the
    components we want to use in our user interface.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在本课中，我们将构建一个模块，将我们想要在用户界面中使用的所有组件组合在一起。
- en: 'We will add a `LayoutComponent` that consists of our `HeaderComponent` and
    `FooterComponent`, and in-between those, we will define the space where our application
    code will be displayed using the `RouterOutlet` component:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将添加一个由 `HeaderComponent` 和 `FooterComponent` 组成的 `LayoutComponent`，并在它们之间定义一个空间，用于显示我们的应用程序代码，使用
    `RouterOutlet` 组件：
- en: '![Creating UI Modules and Components](img/1.11.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![创建 UI 模块和组件](img/1.11.jpg)'
- en: Creating the UiModule
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 UiModule
- en: In this section, we will generate the `UiModule` using the `ng` command and
    import the `UiModule` in the `AppModule`.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用 `ng` 命令生成 `UiModule` 并在 `AppModule` 中导入 `UiModule`。
- en: Using the `ng generate` command, we can generate or scaffold out all sorts of
    code that can be used in our Angular application.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `ng generate` 命令，我们可以生成或构建出所有可用于 Angular 应用程序的代码。
- en: We will use the `ng generate module` command to generate our `UiModule`.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 `ng generate module` 命令来生成我们的 `UiModule`。
- en: 'This command has one required parameter, which is the name. In our application,
    we will call this module `ui`:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令有一个必需的参数，即名称。在我们的应用程序中，我们将此模块称为 `ui`：
- en: Open your terminal and navigate to the project directory.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的终端并导航到项目目录。
- en: 'Run the following command from inside the project directory:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从项目目录中运行以下命令：
- en: '[PRE9]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'As you can see from the output of the command, our `UiModule` is generated
    in the new folder `src/app/ui`:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如您从命令输出中看到的那样，我们的 `UiModule` 在新的文件夹 `src/app/ui` 中生成：
- en: '![Creating the UiModule](img/1.12.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![创建 UiModule](img/1.12.jpg)'
- en: 'When we take a look at this file, we can see what an empty Angular module looks
    like:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们查看此文件时，我们可以看到空 Angular 模块的模样：
- en: '[PRE10]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Importing Our UiModule
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 导入我们的 UiModule
- en: Now that our `UiModule` is created, we need to import it from our `AppModule`.
    That way, we can use the code inside the `UiModule` from other code that lives
    inside the `AppModule:`
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的 `UiModule` 已创建，我们需要从 `AppModule` 中导入它。这样，我们就可以从 `AppModule` 内部的其他代码中使用
    `UiModule` 内的代码：
- en: Open the project in your editor.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的编辑器中打开项目。
- en: Open the `src/app/app.module.ts` file.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `src/app/app.module.ts` 文件。
- en: 'Add the `import` statement on top of the file:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件顶部添加 `import` 语句：
- en: '[PRE11]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Add a reference to `UiModule` in the `imports` array inside the `NgModule`
    decorator:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `NgModule` 装饰器内的 `imports` 数组中添加对 `UiModule` 的引用：
- en: '[PRE12]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '![Importing Our UiModule](img/1.13.jpg)'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![导入我们的 UiModule](img/1.13.jpg)'
- en: Our `UiModule` is now created and imported in our `AppModule`, which makes it
    ready to use.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 `UiModule` 现已创建并导入到 `AppModule` 中，这使得它准备好使用。
- en: Let's go ahead and create our first component inside the `UiModule`, and make
    it display in our app!
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续在 `UiModule` 中创建我们的第一个组件，并使其在我们的应用中显示！
- en: Displaying the Current Route
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 显示当前路由
- en: When building our app, we will heavily lean on Angular's router to tie all of
    our modules and components together.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建我们的应用时，我们将大量依赖 Angular 的路由器来将所有模块和组件连接起来。
- en: 'Because we will build all the functionality in modules, we will use our main
    `AppComponent` only to display the current route. To make this work, we will need
    to update the `AppComponent` template and make sure we define the `router-outlet`:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将所有功能构建在模块中，因此我们只使用主要的 `AppComponent` 来显示当前路由。为了使这生效，我们需要更新 `AppComponent`
    模板并确保定义了 `router-outlet`：
- en: Open the project in your editor.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的编辑器中打开项目。
- en: Open the `src/app/app.component.html` file.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `src/app/app.component.html` 文件。
- en: 'Remove all of the content and add the following HTML:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除所有内容并添加以下 HTML：
- en: '[PRE13]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: After refreshing the app in our browser, we should see a blank page. This is
    because we don't have any routes set up and thus there is no way the Angular app
    knows what to display. Let's move to the next section to create our basic layout!
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中刷新应用程序后，我们应该看到一个空白页。这是因为我们没有设置任何路由，因此Angular应用程序不知道要显示什么。让我们进入下一节创建我们的基本布局！
- en: Creating the LayoutComponent
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建LayoutComponent
- en: In this section, we will use `ng generate` to create the `LayoutComponent` inside
    the `UiModule` and add the `LayoutComponent` to the `AppRoutingModule` so it gets
    displayed.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用`ng generate`在`UiModule`内部创建`LayoutComponent`，并将其添加到`AppRoutingModule`中以便显示。
- en: The `LayoutComponent` is the main template of our application. Its function
    is to glue together the `HeaderComponent` and the `FooterComponent` and show the
    actual application pages in-between those two.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '`LayoutComponent`是应用程序的主要模板。其功能是将`HeaderComponent`和`FooterComponent`粘合在一起，并在两者之间显示实际的应用程序页面。'
- en: Now we will be using the `ng generate` command to create our `LayoutComponent`.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用`ng generate`命令创建我们的`LayoutComponent`。
- en: Open your terminal and navigate to the project directory.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的终端并导航到项目目录。
- en: 'Run the following command from inside the project directory:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目目录中运行以下命令：
- en: '[PRE14]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'When we look at the output, we see that our component was created in the new
    `src/app/ui/components` directory:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们查看输出时，我们看到我们的组件已在新`src/app/ui/components`目录中创建：
- en: '![Creating the LayoutComponent](img/1.15.jpg)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![创建LayoutComponent](img/1.15.jpg)'
- en: The last line of our output shows us that our `UiModule` was updated.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们输出的最后一行显示我们的`UiModule`已被更新。
- en: When we open our `UiModule` in our editor, we see that it added an `import`
    for our `LayoutComponent` and added it to the `declarations` array in the `NgModule`
    decorator.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在编辑器中打开我们的`UiModule`时，我们看到它为我们的`LayoutComponent`添加了一个`import`，并将其添加到`NgModule`装饰器中的`declarations`数组中。
- en: 'The `declarations` array *declares* the existence of components in a module
    so Angular knows that they exist and can be used:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '`declarations`数组*声明*了一个模块中组件的存在，这样Angular就知道它们存在并且可以被使用：'
- en: '[PRE15]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Adding a New Route
  id: totrans-156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加新路由
- en: As described earlier in this section, we will use our `LayoutComponent` as the
    base for the whole application. It will display our header, footer, and an outlet
    to show our actual application screens.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 如本节前面所述，我们将使用我们的`LayoutComponent`作为整个应用程序的基础。它将显示我们的页眉、页脚，并在两者之间显示实际的应用程序屏幕。
- en: 'We will leverage Angular''s built-in routing mechanism to do this. We will
    do this by adding a new route to the `routing` array, and reference the `LayoutComponent`
    in this route''s component:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将利用Angular的内置路由机制来完成这个任务。我们将通过向`routing`数组中添加一个新的路由，并在该路由的组件中引用`LayoutComponent`来实现：
- en: Open the `src/app/app-routing.module.ts` file.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`src/app/app-routing.module.ts`文件。
- en: 'Add an `import` to the list of imports on the top of the file:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件顶部添加一个`import`：
- en: '[PRE16]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Inside the empty array that is assigned to the `routes` property, we add a new
    object literal.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在分配给`routes`属性的空数组中，我们添加一个新的对象字面量。
- en: Add the `path` property and set its value to an empty string `''`.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`path`属性并将其值设置为空字符串`''`。
- en: 'Add the `component` property and set its value to the reference `LayoutComponent`
    that we just imported. The line of code that we add to our `routes` array is as
    follows:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`component`属性并将其值设置为刚刚导入的引用`LayoutComponent`。我们添加到`routes`数组中的代码行如下：
- en: '[PRE17]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'For reference, the complete file should look like this:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 为了参考，完整的文件应该看起来像这样：
- en: '[PRE18]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'When our application refreshes, we should see the text **layout works!**:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们的应用程序刷新时，我们应该看到文本**布局工作！**：
- en: '![Adding a New Route](img/1.18.jpg)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![添加新路由](img/1.18.jpg)'
- en: Building Our Layout
  id: totrans-170
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构建我们的布局
- en: 'Let''s get rid of this default text and start building our actual layout:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们去掉这个默认文本，开始构建我们的实际布局：
- en: Open the `src/app/ui/layout/layout.component.ts` file.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`src/app/ui/layout/layout.component.ts`文件。
- en: Get rid of the contents of the `template` property.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 去掉`template`属性的內容。
- en: 'Add the following contents to the empty `template` string:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下内容添加到空的`template`字符串中：
- en: '[PRE19]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: When we save our file, we see that our browser outputs a blank page.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们保存文件时，我们看到浏览器输出一个空白页。
- en: 'Looking in the **Console** tab from Chrome Developer Tools, we see that we
    have an error stating **Template parse errors: ''router-outlet'' is not a known
    element**:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 从Chrome开发者工具的**控制台**标签页查看，我们看到有一个错误指出**模板解析错误：'router-outlet' 不是一个已知元素**：
- en: '![Building Our Layout](img/1.20.jpg)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![构建我们的布局](img/1.20.jpg)'
- en: In order to make Angular aware of how to render the `router-outlet`, we need
    to import the `RouterModule:`
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让Angular知道如何渲染`router-outlet`，我们需要导入`RouterModule`：
- en: Open the `src/app/ui/ui.module.ts` file.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`src/app/ui/ui.module.ts`文件。
- en: 'Add an `import` statement to the list of imports on the top of the file:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件的顶部导入列表中添加一个`import`语句：
- en: '[PRE20]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Add a reference to the `RouterModule` inside the `imports` array in the `NgModule`
    decorator.![Building Our Layout](img/1.21.jpg)
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`NgModule`装饰器的`imports`数组中添加对`RouterModule`的引用。![构建我们的布局](img/1.21.jpg)
- en: 'When we now save the file, we should see the placeholders for our header and
    footer, with some white space in-between and the router error is now gone from
    our console:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们现在保存文件时，我们应该看到页眉和页脚的占位符，中间有一些空白，并且控制台中的路由错误现在已消失：
- en: '![Building Our Layout](img/1.22.jpg)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![构建我们的布局](img/1.22.jpg)'
- en: Now that that's done, let's add some content to the placeholders!
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 现在已经完成，让我们向占位符添加一些内容！
- en: Creating the HeaderComponent
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建HeaderComponent
- en: In this section, we will use `ng generate` to create the `HeaderComponent` inside
    the `UiModule`, reference the `HeaderComponent` from our `LayoutComponent` so
    it gets displayed, and implement the navigation bar with a dynamic title and items.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用`ng generate`在`UiModule`中创建`HeaderComponent`，从我们的`LayoutComponent`引用`HeaderComponent`以便显示，并实现具有动态标题和项目的导航栏。
- en: 'We will be using the `ng generate` command to create our `HeaderComponent`:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`ng generate`命令来创建我们的`HeaderComponent`：
- en: Open your terminal and navigate to the project directory.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端并导航到项目目录。
- en: 'Run the following command from inside the project directory:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目目录内运行以下命令：
- en: '[PRE21]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'When we look at the output, we see that our component was created in the new
    `src/app/ui/header` directory and that our `UiModule` was updated, just as we
    would expect after having done the same for our `LayoutComponent`:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们查看输出时，我们看到我们的组件已在新`src/app/ui/header`目录中创建，并且我们的`UiModule`已更新，正如我们预期的那样，在我们为`LayoutComponent`执行了相同的操作之后：
- en: '![Creating the HeaderComponent](img/1.23.jpg)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![创建HeaderComponent](img/1.23.jpg)'
- en: Updating the LayoutComponent to Reference Our New HeaderComponent
  id: totrans-195
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更新LayoutComponent以引用我们的新HeaderComponent
- en: 'Now, we will update the `LayoutComponent` so that it references our new `HeaderComponent`
    instead of our `app-header` placeholder:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将更新`LayoutComponent`，使其引用我们新的`HeaderComponent`而不是`app-header`占位符：
- en: Open the `src/app/ui/components/layout/layout.component.ts` file.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`src/app/ui/components/layout/layout.component.ts`文件。
- en: 'Find the `app-header` placeholder and replace it with the following tag:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到`app-header`占位符并将其替换为以下标签：
- en: '[PRE22]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'When we see our application refresh in our browser, we see that we now have
    the string **header works!** instead of the placeholder:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在浏览器中看到我们的应用程序刷新时，我们看到现在我们有了字符串**header works!**而不是占位符：
- en: '![Updating theHeaderComponentcreating LayoutComponent to Reference Our New
    HeaderComponent](img/1.25.jpg)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![更新HeaderComponent创建LayoutComponent以引用我们的新HeaderComponent](img/1.25.jpg)'
- en: We can now start implementing our actual header so that our pages finally start
    to look like an app!
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以开始实现实际的页眉，这样我们的页面最终开始看起来像是一个应用了！
- en: Creating the Actual Header
  id: totrans-203
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建实际的页眉
- en: Now we will create the actual header. We will define three class properties,
    a string property for the application logo and title, and an array of objects
    that represent the links we want to display in our header.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将创建实际的页眉。我们将定义三个类属性，一个字符串属性用于应用程序的标志和标题，以及一个表示我们想要在页眉中显示的链接的对象数组。
- en: In the template, we will create a Bootstrap navbar consisting of a `nav` element
    with some styles, a link with our logo and title, and the actual navigation links.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在模板中，我们将创建一个Bootstrap导航栏，包括一个带有一些样式的`nav`元素，一个带有我们的标志和标题的链接，以及实际的导航链接。
- en: Note
  id: totrans-206
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'More information on how to use the navbar can be found here: [https://getbootstrap.com/docs/4.0/components/navbar/](https://getbootstrap.com/docs/4.0/components/navbar/)'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 关于如何使用导航栏的更多信息，请参阅此处：[https://getbootstrap.com/docs/4.0/components/navbar/](https://getbootstrap.com/docs/4.0/components/navbar/)
- en: Download the file from [https://angular.io/assets/images/logos/angular/angular.svg](https://angular.io/assets/images/logos/angular/angular.svg)
    and store it as `src/assets/logo.svg`.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[https://angular.io/assets/images/logos/angular/angular.svg](https://angular.io/assets/images/logos/angular/angular.svg)下载文件并将其存储为`src/assets/logo.svg`。
- en: Open the `src/app/ui/components/header/header.component.ts` file.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`src/app/ui/components/header/header.component.ts`文件。
- en: 'Inside the `component` class, we add three new properties:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`component`类内部，我们添加三个新属性：
- en: '[PRE23]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Replace the contents of the `template` property with the following markup:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`template`属性的内容替换为以下标记：
- en: '[PRE24]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'When we save this file and check in our browser, we finally see the first real
    part of the application being displayed. Things will move quickly from now on:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们保存此文件并在浏览器中检查时，我们终于看到了应用程序的第一个真实部分被显示出来。从现在开始，事情将会迅速发展：
- en: '![Creating the Actual Header](img/1.27.jpg)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![创建实际的页眉](img/1.27.jpg)'
- en: Let's apply the knowledge we have gained in this section to build the `FooterComponent`.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将本节中获得的知识应用到构建 `FooterComponent` 上。
- en: Creating the FooterComponent
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 FooterComponent
- en: In this section, we will use `ng generate` to create the `FooterComponent` inside
    the `UiModule`, reference the `FooterComponent` from our `LayoutComponent` so
    it gets displayed, and implement the footer and add a small copyright message.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用 `ng generate` 命令在 `UiModule` 中创建 `FooterComponent`，从我们的 `LayoutComponent`
    中引用 `FooterComponent` 以显示它，并实现页脚并添加一条简短的版权信息。
- en: 'We will be using the `ng generate` command to create our `FooterComponent`:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 `ng generate` 命令创建我们的 `FooterComponent`：
- en: Open your terminal and navigate to the project directory.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端并导航到项目目录。
- en: 'Run the following command from inside the project directory:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从项目目录中运行以下命令：
- en: '[PRE25]'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'When we look at the output, we see that our component got created in the new
    `src/app/ui/footer` directory and that our `UiModule` was updated, similar to
    what happened in the previous sections:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们查看输出时，我们看到我们的组件在新的 `src/app/ui/footer` 目录中创建，并且 `UiModule` 被更新，类似于前几节中发生的情况：
- en: '![Creating the FooterComponent](img/1.28.jpg)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
  zh: '![创建 FooterComponent](img/1.28.jpg)'
- en: Updating the LayoutComponent to Reference Our New FooterComponent
  id: totrans-225
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更新 LayoutComponent 以引用新的 FooterComponent
- en: 'We will update the `LayoutComponent` so that it references our new `FooterComponent`
    instead of our `app-footer` placeholder:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将更新 `LayoutComponent` 以引用我们新的 `FooterComponent` 而不是 `app-footer` 占位符：
- en: Open the `src/app/ui/components/layout/layout.component.ts` file.
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `src/app/ui/components/layout/layout.component.ts` 文件。
- en: 'Find the `app-footer` placeholder and replace it with the following tag:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到 `app-footer` 占位符并将其替换为以下标签：
- en: '[PRE26]'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Just like with our header, we see after refreshing our application that we
    now have the string **footer works!** instead of the placeholder:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们的页眉一样，刷新我们的应用程序后，我们现在看到的是字符串 **页脚工作！** 而不是占位符：
- en: '![Updating the LayoutComponent to Reference Our New FooterComponent](img/1.30.jpg)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![更新 LayoutComponent 以引用新的 FooterComponent](img/1.30.jpg)'
- en: The last step is to implement the footer and our base layout is done!
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是实现页脚，我们的基本布局就完成了！
- en: Creating the Actual Footer
  id: totrans-233
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建实际的页脚
- en: Now we will create the actual footer. We will define two class properties, a
    string property for the name of the developer, and the year.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将创建实际的页脚。我们将定义两个类属性，一个字符串属性用于开发者的名字，以及年份。
- en: 'In the template, we will create another Bootstrap navbar consisting of a `nav`
    element with some styles and the copyright message that uses both string properties
    we defined in our component class:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在模板中，我们将创建另一个 Bootstrap 导航栏，它包含一个带有一些样式和版权信息的 `nav` 元素，该信息使用了我们在组件类中定义的字符串属性：
- en: Open the `src/app/ui/components/footer/footer.component.ts` file.
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `src/app/ui/components/footer/footer.component.ts` 文件。
- en: 'Inside the `component` class, add the following property. Don''t forget to
    update the two placeholders with the right data:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `component` 类中，添加以下属性。别忘了用正确的数据更新两个占位符：
- en: '[PRE27]'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Get rid of the contents of the `template` property.
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除 `template` 属性的内容。
- en: 'Replace the contents of the `template` property with the following markup:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `template` 属性的内容替换为以下标记：
- en: '[PRE28]'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'When we save this file and check in our browser, we finally see that the footer
    is being rendered:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们保存此文件并在浏览器中检查时，我们终于看到页脚正在被渲染：
- en: '![Creating the Actual Footer](img/1.32.jpg)'
  id: totrans-243
  prefs: []
  type: TYPE_IMG
  zh: '![创建实际的页脚](img/1.32.jpg)'
- en: We are done with our layout! In this section, we've built our header and footer
    components. We've also built our layout component and created a `UiModule`. Let's
    get to building our actual application logic.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了我们的布局！在本节中，我们构建了页眉和页脚组件。我们还构建了布局组件并创建了一个 `UiModule`。让我们开始构建实际的应用程序逻辑。
- en: Summary
  id: totrans-245
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this lesson, we installed Angular CLI and created the Angular application.
    We set a few default settings and configured our global styles with Bootstrap
    and Font Awesome. We then created the basic UI and layout of our app. Finally,
    we implemented a header and a footer in our app.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 在本课中，我们安装了 Angular CLI 并创建了 Angular 应用程序。我们设置了一些默认设置，并使用 Bootstrap 和 Font Awesome
    配置了我们的全局样式。然后我们创建了应用程序的基本 UI 和布局。最后，我们在应用程序中实现了页眉和页脚。
- en: In the next lesson, we will create the application module and components.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一课中，我们将创建应用程序模块和组件。
