["```js\n    npm run serve ng-tdf \n    ```", "```js\n    ...\n    import { FormsModule } from '@angular/forms';\n    ...\n    @Component({\n      ...,\n      imports: [CommonModule, FormsModule, VcLogsComponent]\n    })\n    export class VersionControlComponent  {...} \n    ```", "```js\n    <form #versionForm=\"ngForm\">\n    <div class=\"form-group mb-4\">\n    <label for=\"versionNumber\">Version Number</label>\n    <input [(ngModel)]=\"versionInput\" name=\"version\"\n    type=\"text\" class=\"form-control my-2 text-center\"\n    id=\"versionNumber\" aria-describedby=\"versionHelp\"\n    placeholder=\"Enter version number\">\n        ...\n      </div>\n      ...\n    </form> \n    ```", "```js\n    ...\n    import { FormsModule, **NgForm** } from '@angular/forms';\n    ...\n    export class VersionControlComponent  {\n      ...\n      **formSubmit****(****form****:** **NgForm****) {**\n    **this****.versionName = form.controls[****'version'****].value;**\n    **}**\n    } \n    ```", "```js\n    <form #versionForm=\"ngForm\"\n      (ngSubmit)=\"formSubmit(versionForm)\">\n      ...\n    </form>\n    <app-vc-logs [vName]=\"versionName\"></app-vc-logs> \n    ```", "```js\n    export class VersionControlComponent  {\n      ...\n      formSubmit(form: NgForm) {\n        if (!form.valid) {\n          return;\n        }\n        this.versionName = form.controls['version'].value;\n      }\n    } \n    ```", "```js\n    <form #versionForm=\"ngForm\" (ngSubmit)=\"formSubmit(versionForm)\">\n    <div class=\"form-group mb-4\">\n    <label for=\"versionNumber\">Version Number</label>\n    <input [(ngModel)]=\"versionInput\" pattern=\"(\n    [0-9]+)\\.([0-9]+)\\.([0-9]+)\" required name=\"version\"\n    type=\"text\" class=\"form-control my-2 text-center\"\n    id=\"versionNumber\" aria-describedby=\"versionHelp\"\n    placeholder=\"Enter version number\">\n        ...\n      </div>\n    <button type=\"submit\" class=\"btn btn-primary\">Submit</button>\n    </form> \n    ```", "```js\n    <form #versionForm=\"ngForm\" (ngSubmit)=\"formSubmit(versionForm)\">\n    <div class=\"form-group mb-4\">\n    <label for=\"versionNumber\">Version Number</label>\n    <input [(ngModel)]=\"versionInput\" pattern=\"(\n          [0-9]+)\\.([0-9]+)\\.([0-9]+)\" required name=\"version\"\n      type=\"text\" class=\"form-control my-2 text-center\"\n      id=\"versionNumber\" aria-describedby=\"versionHelp\"\n      placeholder=\"Enter version number\">\n    <small id=\"versionHelp\" class=\"form-text text-muted\n          block mt-6\">Use semantic versioning (x.x.x)</small>\n    <small class=\"error block\" *ngIf=\"versionForm.submitted\n          && versionForm.controls['version'].errors?\n          .['required']\">\n          Version number is required\n        </small>\n    <small class=\"error block\"*ngIf=\"versionForm.submitted\n          && versionForm.controls['version']\n          .errors?.['pattern']\">\n          Version number does not match the pattern (x.x.x)\n        </small>\n    </div>\n    <button type=\"submit\" class=\"btn btn-\n    primary\">Submit</button>\n    </form>\n    <app-vc-logs [vName]=\"versionName\"></app-vc-logs> \n    ```", "```js\n    npm run serve ng-reactive-forms \n    ```", "```js\n    ...\n    import { ReactiveFormsModule } from '@angular/forms';\n    ...\n    @Component({\n      ...,\n      imports: [CommonModule, VcLogsComponent,\n      ReactiveFormsModule]\n    })\n    export class VersionControlComponent  {...} \n    ```", "```js\n    import { CommonModule } from '@angular/common';\n    import { Component } from '@angular/core';\n    **import** **{**\n    **FormControl****,**\n    **FormGroup****,**\n    **ReactiveFormsModule****,**\n    **Validators****,**\n    **}** **from****'@angular/forms'****;**\n    ... \n    ```", "```js\n    @Component({...})\n    export class VersionControlComponent {\n      versionInput = '';\n      versionName = '0.0.0';\n      **versionPattern =** **'([0-9]+)\\.([0-9]+)\\.([0-9]+)'****;**\n    **versionForm =** **new****FormGroup****({**\n    **version****:** **new** **FormControl****(****''****, [**\n    **Validators****.required,**\n    **Validators****.****pattern****(****this****.****versionPattern),**\n    **]),**\n    **});**\n    } \n    ```", "```js\n    <form **[****formGroup****]=****\"versionForm\"**>\n      ...\n    </form> \n    ```", "```js\n    <form [formGroup]=\"versionForm\">\n    <div class=\"form-group mb-4\">\n    <label for=\"versionNumber\">Version Number</label>\n    <input **formControlName****=****\"version\"** name=\"version\"\n      type=\"text\" class=\"form-control my-2 text-center\"\n      id=\"versionNumber\" aria-describedby=\"versionHelp\"\n      placeholder=\"Enter version number\">\n        ...\n      </div>\n      ...\n    </form>\n    ... \n    ```", "```js\n    <form\n      [formGroup]=\"versionForm\"\n     **(****ngSubmit****)=****\"formSubmit(versionForm)\"**>\n      ...\n    </form> \n    ```", "```js\n    ...\n    @Component({...})\n    export class VersionControlComponent {\n      ...\n      **formSubmit****(****form****:** **FormGroup****) {**\n    **if** **(!form.****valid****) {**\n    **return****;**\n    **}**\n    **this****.****versionName** **= form.****controls****[****'version'****].****value****;**\n    **}**\n    } \n    ```", "```js\n    <form [formGroup]=\"versionForm\" (ngSubmit)=\"formSubmit(versionForm)\">\n    <div class=\"form-group mb-4\">\n    <label for=\"versionNumber\">Version Number</label>\n        ...\n        <small class=\"error block\" *******ngIf****=****\"versionForm.dirty &&**\n    **versionForm.controls.version.errors?.['required']\"**>\n          Version number is required\n        </small>\n    <small class=\"error block\" *******ngIf****=****\"versionForm.dirty &&**\n    **versionForm.controls.version.errors?.['pattern']\"**>\n          Version number does not match the pattern (x.x.x)\n        </small>\n    </div>\n    <button type=\"submit\" class=\"btn btn-\n    primary\">Submit</button>\n    </form>\n    <app-vc-logs [vName]=\"versionName\"></app-vc-logs> \n    ```", "```js\nValidators.required\nValidators.pattern \n```", "```js\n    npm run serve ng-testing-forms with-server \n    ```", "```js\n    npm run test ng-testing-forms \n    ```", "```js\n    ...\n    describe('VersionControlTdfComponent', () => {\n      ...\n      it('should create', () => {...});\n      **it****(****'should submit the form with valid version'****,** **() =>** **{**\n    **component.****versionForm****.****controls****[****'version'****]**\n    **.****setValue****(****'2.2.4'****);**\n    **fixture.****debugElement****.****nativeElement****.****querySelector****(****'button'****).****click****();**\n    **expect****(component.****versionName****).****toBe****(****'2.2.4'****);**\n    **});** \n    ```", "```js\n    it('should show required error', () => {\n        component.versionForm.controls['version']\n          .setValue('2.2.4');\n        fixture.detectChanges();\n        component.versionForm.controls['version'].setValue('');\n        fixture.detectChanges();\n        fixture.debugElement.nativeElement\n     .querySelector('button').click();\n        fixture.detectChanges();\n        expect(component.versionName).toBe('0.0.0');\n        expect(\n          fixture.debugElement.nativeElement\n            .querySelector('.error')\n            .textContent.trim()\n        ).toBe('Version number is required');\n      }); \n    ```", "```js\n    it('should show pattern error', () => {\n        component.versionForm.controls['version']\n          .setValue('2.2.4');\n        fixture.detectChanges();\n        component.versionForm.controls['version']\n          .setValue('invalid input');\n        fixture.detectChanges();\n        fixture.debugElement.nativeElement\n     .querySelector('button').click();\n        fixture.detectChanges();\n        expect(component.versionName).toBe('0.0.0');\n        expect(\n          fixture.debugElement.nativeElement\n            .querySelector('.error')\n            .textContent.trim()\n        ).toBe('Version number does not match the pattern (x.x.x)');\n      }); \n    ```", "```js\n    import { provideHttpClient } from '@angular/common/http';\n    import { ComponentFixture, TestBed } from '@angular/core/testing';\n    **import** **{** **of** **}** **from****'rxjs/internal/observable/of'****;**\n    **import** **{** **FormValidationService** **}** **from****'../../form-validation.service'****;**\n    import { VersionControlRfAsyncComponent } from './version-control-rf-async.component';\n    **const****FormValidationServiceMock** **= {**\n    **versionValidator****() {**\n    **return****() =>****of****(****null****);**\n    **},**\n    **};** \n    ```", "```js\n    ...\n    describe('VersionControlRfAsyncComponent', () => {\n     ...\n      beforeEach(async () => {\n        await TestBed.configureTestingModule({\n          imports: [VersionControlRfAsyncComponent],\n          providers: [\n            provideHttpClient(),\n            **{**\n    **provide****:** **FormValidationService****,**\n    **useValue****:** **FormValidationServiceMock****,**\n    **},**\n          ],\n        }).compileComponents();\n        ...\n      });\n    }); \n    ```", "```js\n    ...\n    **import** **{** **AbstractControl** **}** **from****'@angular/forms'****;**\n    import { of } from 'rxjs/internal/observable/of';\n    import { FormValidationService } from '../../form-validation.service';\n    import { VersionControlRfAsyncComponent } from './version-control-rf-async.component';\n    const FormValidationServiceMock = {\n      versionValidator(**control****:** **AbstractControl**) {\n        return () => {\n          **if** **(control.****value** **===** **'invalid input'****) {**\n    **return****of****({** **pattern****:** **true** **});**\n    **}**\n    return of(null);\n        };\n      }}; \n    ```", "```js\n    npm run serve ng-rf-async-validator with-server \n    ```", "```js\n    ...\n    export class VersionService {\n      ...\n      **validateVersion****(****version****:** **string****):** **Observable****<{** **error****:**\n    **string** **}> {**\n    **return****this****.****http****.****get****<{** **error****:** **string** **}>(**\n    **`****${****this****.apiBaseUrl}****/validate?val=****${version}****`**\n    **);**\n    **}**\n    submitVersion(version: string): Observable<{ success:\n      boolean }> {...);\n      }\n    } \n    ```", "```js\n    import { HttpClient } from '@angular/common/http';\n    import { Injectable, inject } from '@angular/core';\n    import { Observable } from 'rxjs/internal/Observable';\n    **import** **{** **AbstractControl****,** **AsyncValidatorFn****,** **ValidationErrors** **}** **from****'@angular/forms'****;**\n    **import** **{ timer, switchMap, map }** **from****'rxjs'****;**\n    ...\n    export class VersionService {\n      ...\n\n    **versionValidator****():** **AsyncValidatorFn** **{**\n    **return** **(****control****:** **AbstractControl****):** **Observable****<**\n    **ValidationErrors** **|** **null** **> => {**\n    **return****timer****(****500****).****pipe****(**\n    **switchMap****(****() =>****this****.****validateVersion****(**\n    **control.****value****)),**\n    **map****(****(****{ error }****) =>** **{**\n    **const****errors****:** **ValidationErrors** **= {};**\n    **if** **(error ===** **null****) {**\n    **return****null****;**\n    **}**\n    **errors[error] =** **true****;**\n    **return** **errors;**\n    **})**\n    **);**\n    **};**\n    **}**\n      ...\n    } \n    ```", "```js\n    import { Component, **OnInit**, **inject** } from '@angular/core';\n    ...\n    export class VersionControlComponent **implements****OnInit** {\n      ...\n      **ngOnInit****() {**\n    **this****.****versionForm****.****controls****.****version****.****setAsyncValidators****(**\n    **this****.****versionService****.****versionValidator****()**\n    **);**\n    **}**\n    formSubmit(form: FormGroup) {...}\n    } \n    ```", "```js\n    npm run serve ng-form-arrays \n    ```", "```js\n    ...\n    import { FormBuilder, ReactiveFormsModule, Validators, **FormGroup**, **FormControl** } from '@angular/forms';\n    ...\n    export class PortfolioFormComponent {\n      fb = inject(FormBuilder);\n      portfolioForm = this.fb.group({\n        name: ['', Validators.required],\n        bio: [''],\n        **projects****:** **this****.****fb****.****array****<**\n    **FormGroup****<{**\n    **label****:** **FormControl****<****string** **|** **null****>;**\n    **url****:** **FormControl****<****string** **|** **null****>;**\n    **}>**\n    **>([]),**\n      })\n      **get****projectsFormArr****() {**\n    **return****this****.****portfolioForm****.****controls****.****projects****;**\n    **}**\n      ...\n    } \n    ```", "```js\n    <div class=\"flex gap-4 items-center flex-col md:flex-row\">\n    <form **[****formGroup****]=****\"portfolioForm\"** class=\"flex-1 w-full\n        md:w-auto\">\n    <section>...</section>\n        ...\n        <section **formArrayName****=****\"projects\"**>\n    <label class=\"text-sm\">Projects</label>\n    <fieldset class=\"flex gap-4 mb-4 justify-between\" \n            ***ngFor****=****\"let projectControl of**\n    **projectsFormArr.controls; trackBy: trackByFn\"**\n    **[****formGroup****]=****\"projectControl\"****>**\n    <input **formControlName****=****\"label\"** **type=\"text\"**\n      class=\"form-control\" placeholder=\"Enter label\">\n    <input **formControlName****=****\"ur****l\" type=\"url**\"\n      class=\"form-control\" placeholder=\"Enter URL\">\n    </fieldset>\n    </section>\n    </form>\n      ...\n    </div> \n    ```", "```js\n    import { Component, **OnInit**, inject } from '@angular/core';\n    ...\n    export class PortfolioFormComponent**implements****OnInit** {\n      ...\n      **ngOnInit****():** **void** **{**\n    **this****.****addNewProject****();**\n    **}**\n    **addNewProject****() {**\n    **this****.****projectsFormArr****.****push****(**\n    **this****.****fb****.****group****({**\n    **label****: [****''****,** **Validators****.****required****],**\n    **url****: [****''****,** **Validators****.****required****]**\n    **})**\n    **)**\n    **}**\n    **...**\n    } \n    ```", "```js\n    <section formArrayName=\"projects\">\n    <label class=\"text-sm\">Projects</label>\n    <fieldset [formGroup]=\"projectControl\" class=\"flex\n            gap-4 mb-4 justify-between\" *ngFor=\"let\n            projectControl of projectsFormArr.controls;\n     **let isLast = last;** trackBy: trackByFn\">\n            ...\n            <input formControlName=\"url\" type=\"url\" class=\"form-\n              control\" placeholder=\"Enter URL\">\n    **<****button****type****=****\"button\"** **[****style.visibility****]=****\"isLast**\n    **? 'visible' : 'hidden'\"**\n    **(****click****)=****\"addNewProject()\"****>****+****</****button****>**\n    </fieldset>\n    </section> \n    ```", "```js\n    ...\n    export class PortfolioFormComponent implements OnInit {\n      ...\n      addNewProject() {...}\n      **removeProject****(****index****:** **number****) {**\n    **this****.****projectsFormArr****.****removeAt****(index);**\n    **}**\n      ...\n    } \n    ```", "```js\n    <section formArrayName=\"projects\">\n    <label class=\"text-sm\">Projects</label>\n    <fieldset [formGroup]=\"projectControl\" class=\"flex\n            gap-4 mb-4 justify-between\" *ngFor=\"let\n            projectControl of projectsFormArr.controls; let\n            isLast = last; **let i = index;** trackBy: trackByFn\">\n    <input formControlName=\"label\" type=\"text\"\n      class=\"form-control\" placeholder=\"Enter label\">\n    <input formControlName=\"url\" type=\"url\" class=\"form-\n              control\" placeholder=\"Enter URL\">\n    **<****button****type****=****\"button\"** **[****hidden****]=****\"****isLast\"**\n    **(****click****)=****\"removeProject(i)\"****>****-****</****button****>**\n    <button type=\"button\" [style.visibility]=\"isLast ?\n              'visible' : 'hidden'\" [hidden]=\"!isLast\"\n      (click)=\"addNewProject()\">+</button>\n    </fieldset>\n    </section> \n    ```", "```js\n    npm run serve ng-form-cva \n    ```", "```js\n    cd start && nx g c rating --directory apps/chapter08/ng-form-cva/src/app/components/rating \n    ```", "```js\n    <div class=\"rating\">\n    <div class=\"rating__star\" [ngClass]=\"{\n          'rating__star--active':\n            (!isMouseOver && value >= star) ||\n            (isMouseOver && hoveredRating >= star),\n            '!cursor-default': disabled\n        }\" (mouseenter)=\"onRatingMouseEnter(star)\"\n      (mouseleave)=\"onRatingMouseLeave()\"\n             (click)=\"selectRating(star)\"\n        *ngFor=\"let star of [1, 2, 3, 4, 5]; let i = index\">\n    <span class=\"material-symbols-outlined\">\n          star\n        </span>\n    </div>\n    </div> \n    ```", "```js\n    .rating {\n      display: flex;\n      margin-bottom: 10px;\n      &__star {\n        cursor: pointer;\n        color: grey;\n        padding: 0 6px;\n        &:first-child {\n          padding-left: 0;\n        }\n        &:last-child {\n          padding-right: 0;\n        }\n        &--active {\n          color: orange;\n        }\n      }\n    } \n    ```", "```js\n    /* eslint-disable @typescript-eslint/no-empty-function */\n    import { CommonModule } from '@angular/common';\n    import { Component } from '@angular/core';\n    @Component({\n      ...\n      standalone: true,\n      imports: [CommonModule]\n    })\n    export class RatingComponent {\n      value = 2;\n      hoveredRating = 2;\n      isMouseOver = false;\n      onRatingMouseEnter(rating: number) {\n        this.hoveredRating = rating;\n        this.isMouseOver = true;\n      }\n      onRatingMouseLeave() {\n        this.hoveredRating = 0;\n        this.isMouseOver = false;\n      }\n      selectRating(rating: number) {\n        this.value = rating;\n      }\n    } \n    ```", "```js\n    ...\n    **import** **{** **RatingComponent** **}** **from****'../components/rating/rating.component'****;**\n    @Component({\n      selector: 'app-home',\n      templateUrl: './home.component.html',\n      styleUrls: ['./home.component.scss'],\n      standalone: true,\n      imports: [CommonModule, ReactiveFormsModule,\n      **RatingComponent**]\n    })\n    export class HomeComponent {\n      ...\n    } \n    ```", "```js\n    <div class=\"home\">\n    <div class=\"review-container\">\n        ...\n        <form class=\"input-container\" [formGroup]=\"reviewForm\"\n      (ngSubmit)=\"submitReview(reviewForm)\">\n    <div class=\"mb-3\">\n    <label for=\"ratingInput\" class=\"form-\n              label\">Rating</label>\n    **<****app-rating****formControlName****=****\"rating\"****></****app-rating****>**\n    </div>\n    <div class=\"mb-3\">\n            ...\n          </div>\n    <button id=\"submitBtn\" [disabled]=\"reviewForm.\n            invalid\" class=\"btn btn-dark\" type=\"submit\">\n           Submit</button>\n    </form>\n    </div>\n    </div> \n    ```", "```js\n    **/* eslint-disable @typescript-eslint/no-empty-function */**\n    import { CommonModule } from '@angular/common';\n    import { Component } from '@angular/core';\n    **import** **{** **ControlValueAccessor** **}** **from****'@angular/forms'****;**\n    @Component({...})\n    export class RatingComponent**implements****ControlValueAccessor** {\n      ...\n      isMouseOver = false;\n      **onChange****:** **any** **=** **() =>** **{ };**\n    **onTouched****:** **any** **=** **() =>** **{ };**\n      ...\n      **registerOnChange****(****fn****:** **any****){**\n    **this****.****onChange** **= fn;**\n    **}**\n    **registerOnTouched****(****fn****:** **any****) {**\n    **this****.****onTouched** **= fn;**\n    **}**\n    } \n    ```", "```js\n    ...\n    import { Component, **Input** } from '@angular/core';\n    ...\n    export class RatingComponent implements ControlValueAccessor {\n      ...\n      isMouseOver = false;\n      **disabled =** **false****;**\n      ...\n      **setDisabledState****(****isDisabled****:** **boolean****):** **void** **{**\n    **this****.****disabled** **= isDisabled;**\n    **}**\n    **writeValue****(****value****:** **number****) {**\n    **this****.****value** **= value;**\n    **}**\n    } \n    ```", "```js\n    ...\n    @Component({...})\n    export class RatingComponent implements OnInit, ControlValueAccessor {\n      ...\n      isMouseOver = false;\n      disabled = **true**;\n      ...\n      onRatingMouseEnter(rating: number) {\n        **if** **(****this****.****disabled****)** **return****;**\n    this.hoveredRating = rating;\n        this.isMouseOver = true;\n      }\n      ...\n      selectRating(rating: number) {\n        **if** **(****this****.****disabled****)** **return****;**\n    this.value = rating;\n      }\n      ...\n    } \n    ```", "```js\n    ...\n    export class RatingComponent implements ControlValueAccessor {\n      ...\n      @Input() disabled = **false**;\n      constructor() { }\n      ...\n      selectRating(rating: number) {\n        if (this.disabled) return;\n        this.value = rating;\n        this.onTouched();\n        **this****.****onChange****(rating);**\n      }\n      ...\n    } \n    ```", "```js\n    import { Component, **forwardRef**, Input, OnInit } from '@angular/core';\n    import { ControlValueAccessor**,** **NG_VALUE_ACCESSOR** } from '@angular/forms';\n    @Component({\n      ...\n      imports: [CommonModule],\n      **providers****: [{**\n    **provide****:** **NG_VALUE_ACCESSOR****,**\n    **useExisting****:** **forwardRef****(****() =>****RatingComponent****),**\n    **multi****:** **true**\n    **}]**\n    })\n    ... \n    ```", "```js\nonChange: any = () => { };\nonTouched: any = () => { }; \n```", "```js\nregisterOnChange(fn: any){\n  **this****.****onChange** **= fn;**\n}\nregisterOnTouched(fn: any) {\n  **this****.****onTouched** **= fn;**\n} \n```", "```js\nselectRating(rating: number) {\n  if (this.disabled) return;\n  this.value = rating;\n  **this****.****onChange****(rating);**\n} \n```", "```js\nwriteValue(value: number) {\n  **this****.****value** **= value;**\n} \n```", "```js\n@Component({\n  ...\n  **providers****: [{**\n**provide****:** **NG_VALUE_ACCESSOR****,**\n**useExisting****:** **forwardRef****(****() =>****RatingComponent****),**\n**multi****:** **true**\n **}]**\n}) \n```", "```js\n<app-rating **formControlName****=****\"rating\"**></app-rating> \n```"]