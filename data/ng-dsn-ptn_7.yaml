- en: Operation Patterns
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作模式
- en: 'In this final chapter, we will focus on patterns to improve the operation of
    enterprise-scale Angular applications. While the previous chapters focused on
    stability, performance, and navigation, it might all fall apart if we cannot operate
    our apps smoothly. While operating your apps, there are several desirable things
    to consider, such as:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在这最后一章中，我们将专注于改进企业规模的Angular应用程序的操作模式。虽然前几章侧重于稳定性、性能和导航，但如果我们无法顺利操作我们的应用程序，这一切可能都会崩溃。在操作应用程序时，有几个值得考虑的理想情况，例如：
- en: Transparency
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 透明度
- en: Logging
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日志记录
- en: Diagnostics
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 诊断
- en: Now, operations strategies and patterns for backend applications can be easier
    to implement. While backend applications can run in different flavors of containers,
    virtual machines, or even barebones, it is easier to operate them compared to
    frontend applications. Indeed, you can register ongoing procedures, CPU usage,
    Ram usage, disk usage, and so on, and you can do this because, directly or indirectly
    (via your service provider), you have access to these servers. For frontend applications,
    these statistics are still desirable. Let's imagine that we have a frontend application
    written in Angular that performs well in all regards during our testing, but fails
    while live. Why would this happen? Well, for example, if you develop Angular applications
    that are consuming locally deployed APIs, you will have to take into consideration
    that your users suffer network latencies. These latencies could make your application
    misbehave.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，后端应用的操作策略和模式可以更容易实现。虽然后端应用可以在不同类型的容器、虚拟机甚至裸机中运行，但与前端应用相比，操作它们更容易。事实上，您可以注册正在进行的程序、CPU使用率、内存使用率、磁盘使用率等，这是因为您直接或间接（通过您的服务提供商）可以访问这些服务器。对于前端应用程序，这些统计数据仍然是可取的。假设我们有一个用Angular编写的前端应用程序，在测试期间在各个方面表现良好，但在实际运行时失败。为什么会发生这种情况呢？例如，如果您开发的Angular应用程序正在使用本地部署的API，您必须考虑到您的用户遭受网络延迟。这些延迟可能导致您的应用程序表现异常。
- en: General health metrics
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通用健康指标
- en: 'The first action we can take towards the observability of our Angular application
    is to monitor some general health metrics. General health metrics that we will
    be working with are divided into a few categories. First, we have two metrics
    coming from the Angular profiler:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以采取的第一步行动是监视一些通用健康指标，以实现我们的Angular应用程序的可观察性。我们将要处理的通用健康指标分为几类。首先，我们有两个来自Angular分析器的指标：
- en: '`msPerTick`: The average `ms` it took per tick. A tick can be considered a
    refresh operation or repaint. In other words, the number of milliseconds it takes
    to repaint all your variables.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`msPerTick`：每个滴答所需的平均`ms`。滴答可以被视为刷新操作或重绘。换句话说，重新绘制所有变量所需的毫秒数。'
- en: '`numTicks`: The number of elapsed ticks.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numTicks`：经过的滴答数。'
- en: 'Other kinds of metrics we collect are related to the client workstation:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们收集的其他类型的指标与客户端工作站相关：
- en: '`core`: The number of logical cores'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`core`：逻辑核心数'
- en: '`appVersion`: The browser used'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`appVersion`：所使用的浏览器'
- en: 'We can also extract information about the connection:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以提取有关连接的信息：
- en: '`cnxDownlink`: Downlink connection speed'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cnxDownlink`：下行连接速度'
- en: '`cnxEffectiveType`: The connection type'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cnxEffectiveType`：连接类型'
- en: 'Finally, the last set of metrics deals with the heap size of JavaScript itself:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，最后一组指标涉及JavaScript堆本身的大小：
- en: '`jsHeapSizeLimit`: The max size of the heap.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jsHeapSizeLimit`：堆的最大大小。'
- en: '`totalJSHeapSize`: This is the current size of the JavaScript heap, including
    free space not occupied by any JavaScript objects. This means that `usedJsHeapSize`
    cannot be greater than `totalJsHeapSize`.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`totalJSHeapSize`：这是JavaScript堆的当前大小，包括未被任何JavaScript对象占用的空闲空间。这意味着`usedJsHeapSize`不能大于`totalJsHeapSize`。'
- en: '`usedJSHeapSize`: Total amount of memory being used by JavaScript objects including
    V8 internal objects.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`usedJSHeapSize`：JavaScript对象使用的内存总量，包括V8内部对象。'
- en: In order to collect these metrics, we will create a dedicated Angular service.
    This service will be in charge of accessing the right variables, assembling them
    into a perfect object, and sending them back to our infrastructure with an API
    post.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 为了收集这些指标，我们将创建一个专门的Angular服务。该服务将负责访问正确的变量，将它们组装成一个完美的对象，并通过API post将它们发送回我们的基础设施。
- en: 'The first set of metrics is accessible via the Angular profiler. The profiler
    is injecting a variable named `ng` that is accessible via your browser command
    line. Most tools that can be used to monitor Angular application performances
    are used while developing them. In order to access this, we can use the `window`
    variable and grab it like so:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 第一组指标可以通过Angular分析器访问。分析器注入了一个名为`ng`的变量，可以通过浏览器命令行访问。大多数用于监视Angular应用程序性能的工具都是在开发过程中使用的。为了访问这些工具，我们可以使用`window`变量并像这样抓取它：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Then, we have access to the `timeChangeDetection` method, which provides us
    with the `msPerTick` and `numTicks` metrics.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以访问`timeChangeDetection`方法，该方法为我们提供了`msPerTick`和`numTicks`指标。
- en: 'Within a method, this translates to the following:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个方法中，这可以转化为以下内容：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Another useful variable that can be found in any JavaScript application is the
    navigator. The navigator variable, as its name suggests, exposes information about
    the browser used by our users. `window.navigator.hardwareConcurrency` and `window.navigator.appVersion`
    give us the number of logical cores and the app version, respectively.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何JavaScript应用程序中都可以找到的另一个有用的变量是navigator。navigator变量暴露了有关用户使用的浏览器的信息。`window.navigator.hardwareConcurrency`和`window.navigator.appVersion`分别给出了逻辑核心数和应用程序版本。
- en: While the previously mentioned variables are accessible on any browser capable
    of running an *Angular* app, the rest of the metrics are, at the time of writing,
    only available on Chrome. If our users use something other than Chrome, then we
    will not have access to these metrics. Chrome, however, is still the most used
    browser, and there is no sign that this will change anytime soon. Consequently,
    for a large portion of our user base, we will be able to retrieve them.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然前面提到的变量可以在任何能够运行*Angular*应用程序的浏览器上访问，但在撰写本文时，其余的指标只在Chrome上可用。如果我们的用户使用的不是Chrome，那么我们将无法访问这些指标。然而，Chrome仍然是最常用的浏览器，目前没有迹象表明这种情况会很快改变。因此，对于我们的大部分用户群，我们将能够检索到这些指标。
- en: 'The next batch of metrics are the ones related to the memory performances of
    our applications: `jsHeapSizeLimit`, `totalJSHeapSize`, and `usedJSHeapSize`.
    On Chrome, they are properties of the `window.performance["memory"]` object. For
    other browsers, however, we need to provide a polyfill:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 下一批指标与我们应用程序的内存性能有关：`jsHeapSizeLimit`、`totalJSHeapSize`和`usedJSHeapSize`。在Chrome上，它们是`window.performance["memory"]`对象的属性。然而，在其他浏览器上，我们需要提供一个polyfill：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the preceding code, we check for the existence of the `memory` object. If
    the object exists, we assign it to the local `memory` variable. If the object
    does not exist, we provide a trivial polyfill that has 0-valued metrics.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们检查了`memory`对象是否存在。如果对象存在，我们将其赋值给本地的`memory`变量。如果对象不存在，我们提供一个简单的polyfill，其中指标的值为0。
- en: 'The last set of metrics are the ones related to the connection of our user.
    Like the memory object, it is only accessible on Chrome. We will use the same
    technique as before:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一组指标与用户连接有关。与内存对象一样，它只能在Chrome上访问。我们将使用与之前相同的技术：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Here is the implementation of the `Monitor` service with the gathering of the
    metrics inside the `metric` method. At the end of the method, we send the metrics
    to an API endpoint:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`Monitor`服务的实现，其中在`metric`方法中收集指标。在方法结束时，我们将指标发送到API端点：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Here is an example of the variables within the `perf` object:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`perf`对象中的变量的示例：
- en: '`msPerTick`: 0.0022148688576149405'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`msPerTick`: 0.0022148688576149405'
- en: '`numTicks`: 225747'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numTicks`: 225747'
- en: '`core`: 12'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`core`: 12'
- en: '`appVersion`: `5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537....L, like
    Gecko) Chrome/66.0.3359.139 Safari/537.36" jsHeapSizeLimit: 2190000000, ...}appVersion:
    "5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.139
    Safari/537.36`'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`appVersion`: `5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537....L, like
    Gecko) Chrome/66.0.3359.139 Safari/537.36" jsHeapSizeLimit: 2190000000, ...}appVersion:
    "5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.139
    Safari/537.36`'
- en: '`cnxDownlink`: 10'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cnxDownlink`: 10'
- en: '`cnxEffectiveType`: `4g`'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cnxEffectiveType`: `4g`'
- en: '`core`: 12'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`core`: 12'
- en: '`jsHeapSizeLimit`: 2190000000'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jsHeapSizeLimit`: 2190000000'
- en: '`msPerTick`: 0.0022148688576149405'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`msPerTick`: 0.0022148688576149405'
- en: '`numTicks`: 225747'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numTicks`: 225747'
- en: '`totalJSHeapSize`: 64000000'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`totalJSHeapSize`: 64000000'
- en: '`usedJSHeapSize`: 56800000'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`usedJSHeapSize`: 56800000'
- en: On the server side, these metrics can be fed into an ELK stack or something
    similar of your choosing and enhance the observability of your application.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务器端，这些指标可以被馈送到ELK堆栈或您选择的类似堆栈中，并增强您的应用程序的可观察性。
- en: Specific metrics
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 特定指标
- en: 'In addition to the metric we looked at earlier, we can add a method in our
    service so that we are able to send specific metrics, like so:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 除了我们之前查看的指标，我们可以在我们的服务中添加一个方法，以便我们能够发送特定的指标，如下所示：
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Error reporting
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 错误报告
- en: 'Another way to enhance the transparency and observability of your application
    is to report each and every JavaScript error that occurs on the client side. Doing
    so is relatively simple in JavaScript; you simply need to attach a callback function
    to the `window.onerror` event, as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 增强应用程序的透明度和可观察性的另一种方法是报告在客户端发生的每一个JavaScript错误。在JavaScript中，这样做相对简单；你只需要将一个回调函数附加到`window.onerror`事件上，如下所示：
- en: '[PRE6]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This will simply create an alert each time an error occurs. With Angular, however,
    you cannot use the same simple technique—not because it is complicated, but because
    it requires the creation of the `ne` class. This new class will implement the
    Angular error handler interface like so:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这将简单地在每次发生错误时创建一个警报。然而，使用Angular时，你不能使用相同的简单技术——不是因为它很复杂，而是因为它需要创建`ne`类。这个新类将实现Angular错误处理程序接口，如下所示：
- en: '[PRE7]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We will continue to improve upon the `monitor` service so that it can also
    be our `ErrorHandler`:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将继续改进`monitor`服务，以便它也可以成为我们的`ErrorHandler`：
- en: '[PRE8]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Then, these errors can be fed to your `ELK` stack or even plugged in directly
    to your Slack channel, as we do at [Toolwatch.io](http://www.toolwatch.io):'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，这些错误可以被馈送到您的`ELK`堆栈，甚至直接插入到您的Slack频道中，就像我们在[Toolwatch.io](http://www.toolwatch.io)中所做的那样：
- en: '![](assets/bc5e08d9-3cf7-4eba-96b8-46d75956f9dd.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/bc5e08d9-3cf7-4eba-96b8-46d75956f9dd.png)'
- en: 'For this error handler to be used in place of Angular''s default one, you need
    to provide it when declaring your modules:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用这个错误处理程序来替代Angular的默认错误处理程序，你需要在声明模块时提供它：
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Method metrics with AOP
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用AOP的方法指标
- en: 'As of now, we only managed to monitor our system with specific moments: calls
    to metrics, metrics, and errors occurring. A sure way to monitor everything in
    our application is to use **AOP** (**Aspect-oriented programming**) within our
    *Angular* apps. AOP is not a new technique, but it isn''t widely used in the JavaScript
    ecosystem. AOP consists of defining aspects. Aspects are subprograms that are
    associated with specified pieces of our application. Aspects are woven into methods
    at compilation time and are executed before and/or after the method they are woven
    into. In the case of Angular-based applications, the method will be woven at transpilation
    from TypeScript to JavaScript. Weaving an aspect to a method in vanilla JavaScript
    is simple. Consider the following example:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们只能在特定时刻监控我们的系统：调用度量、度量和发生的错误。在我们的应用程序中监控所有内容的一种可靠方法是在*Angular*应用程序中使用**AOP**（**面向方面的编程**）。AOP并不是一种新技术，但在JavaScript生态系统中并不广泛使用。AOP包括定义方面。方面是与我们应用程序的指定部分相关联的子程序。方面在编译时编织到方法中，并在编织到的方法之前和/或之后执行。在基于Angular的应用程序中，该方法将在从TypeScript到JavaScript的转译时编织。在纯JavaScript中将方面编织到方法是很简单的。考虑以下示例：
- en: '[PRE10]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In this snippet, we declare three functions: `myBeforeAspect`, `myFunc`, and
    `myAfterAspect`. After their respective declarations, we create the `oldFunc`
    variable and assign it to `myFunc`. Then, we replace the implementation of `myFunc`
    with a new implementation. In this new implementation, we call `myBeforeAspect`
    and `myAfterAspect` in addition to `oldFunc`. This is a simple way of doing aspects
    in JavaScript. We have behaviors that have been added to the call of `myFunc`
    without breaking our internal API. Indeed, if in another part of the program we
    called the `myFunc` function, then our program would still be valid and would
    execute as if nothing had changed. In addition, we can continue to add other aspects
    to the augmented function.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个片段中，我们声明了三个函数：`myBeforeAspect`，`myFunc`和`myAfterAspect`。在它们各自的声明之后，我们创建了`oldFunc`变量，并将其赋值为`myFunc`。然后，我们用新的实现替换了`myFunc`的实现。在这个新的实现中，除了`oldFunc`之外，我们还调用了`myBeforeAspect`和`myAfterAspect`。这是在JavaScript中实现方面的一种简单方法。我们已经添加了行为到`myFunc`的调用中，而不会破坏我们的内部API。实际上，如果在程序的另一个部分中调用了`myFunc`函数，那么我们的程序仍然是有效的，并且会执行得就像没有改变一样。此外，我们还可以继续向增强函数添加其他方面。
- en: 'This is also achievable in Angular-flavored TypeScript:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在Angular-flavored TypeScript中也可以实现这一点：
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Here, our constructor wove two aspects into the `click` method. The `click`
    method will execute its behavior in addition to that of the aspect. In the HTML,
    nothing about the AOP transpires:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们的构造函数将两个方面编织到`click`方法中。`click`方法将执行其行为，以及方面的行为。在HTML中，AOP的任何内容都不会显现出来：
- en: '[PRE12]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Now, we could apply this technique manually to all our methods, and call the
    `metric` method of our monitoring service. Fortunately, various libraries exist
    that can handle this for us. The best one to date is called `aspect.js` ([https://github.com/mgechev/aspect.js](https://github.com/mgechev/aspect.js)).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以手动将这种技术应用到所有的方法上，并调用我们监控服务的`metric`方法。幸运的是，存在各种库可以为我们处理这个问题。到目前为止，最好的一个叫做`aspect.js`（[https://github.com/mgechev/aspect.js](https://github.com/mgechev/aspect.js)）。
- en: '`aspect.js` leverages the decorator pattern of ECMAScript 2016.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`aspect.js`利用了ECMAScript 2016的装饰器模式。'
- en: 'We can install it using `npm install aspect.js -save`, and then we can define
    an aspect like so:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`npm install aspect.js -save`来安装它，然后我们可以定义一个类似这样的方面：
- en: '[PRE13]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In this aspect, we have several parts. First, we have the `@afterMethod` method
    which takes a `classNamePattern` and a `methodNamePattern`. These patterns are
    regular expressions and are used to define which classes and methods are woven
    into that particular aspect. Then, in `invokeAfterMethod`, we define the behavior
    we want to apply. In this method, we simply log the method that was called and
    the argument values with which said method was invoked.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在这方面，我们有几个部分。首先，我们有一个`@afterMethod`方法，它接受一个`classNamePattern`和一个`methodNamePattern`。这些模式是正则表达式，用于定义编织到特定方面的哪些类和方法。然后，在`invokeAfterMethod`中，我们定义要应用的行为。在这个方法中，我们只是记录调用的方法以及调用该方法的参数值。
- en: We repeat this operation with `@beforeMethod`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`@beforeMethod`重复这个操作。
- en: If we were to keep things like this, the log would be printed out on the client
    side. If we want to get hold of these logs, we will have to modify our `Monitor`
    service once again.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们保持这样的情况，日志将在客户端打印出来。如果我们想获得这些日志，我们将不得不再次修改我们的`Monitor`服务。
- en: 'We will add a static method called `log` and a static `HTTP` client. These
    are static because we will likely weave components that do not receive an injection
    of the `Monitor` service. This way, all services, with or without injection, will
    be able to send their logs:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将添加一个名为`log`的静态方法和一个静态的`HTTP`客户端。这些是静态的，因为我们可能会编织不接收`Monitor`服务注入的组件。这样，所有服务，无论是否注入，都将能够发送它们的日志：
- en: '[PRE14]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In the constructor of the `Monitor` service, we populate the static client.
    This will be done as soon as our applications boot up and the services are singleton.
    Consequently, we do this only once.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Monitor`服务的构造函数中，我们填充了静态客户端。这将在我们的应用程序启动并且服务是单例时完成。因此，我们只做一次。
- en: 'Here is the complete implementation of the `Monitor` service:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`Monitor`服务的完整实现：
- en: '[PRE15]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The aspect can be modified to call the new static method:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 该方面可以修改为调用新的静态方法：
- en: '[PRE16]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In addition to `className`, `methodName`, and `args`, we can populate the meta
    variable of each component with the `@Wove` syntax, as shown in the following
    code:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`className`，`methodName`和`args`之外，我们可以使用`@Wove`语法填充每个组件的元变量，如下面的代码所示：
- en: '[PRE17]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: An interesting use case of the custom meta variables is to use them to store
    the execution time of each method, as the meta variable value is carried from
    the before to the after method.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义元变量的一个有趣用例是使用它们来存储每个方法的执行时间，因为元变量值从before方法传递到after方法。
- en: 'Consequently, we could have a variable called `startTime` in our `@Wove` annotation
    and use it like this:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以在我们的`@Wove`注释中有一个名为`startTime`的变量，并像这样使用它：
- en: '[PRE18]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Now, we have another aspect that will be woven into our class, which will measure
    its execution time and report it with the `metric` method of`MonitorService`.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们有另一个方面将被编织到我们的类中，它将测量其执行时间并使用`MonitorService`的`metric`方法报告它。
- en: Summary
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Operating Angular applications can be complex, because it is relatively hard
    to observe our applications when they are running. While observing backend applications
    is straightforward, because we have access to the running environment, the techniques
    we are used to cannot be applied directly. In this chapter, we saw how to have
    an Angular application monitor itself by using collection performance metrics,
    custom metrics, and logs, and applied all of this automatically by using aspect-oriented
    programming.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 操作Angular应用程序可能很复杂，因为在运行时观察我们的应用程序相对困难。虽然观察后端应用程序很简单，因为我们可以访问运行环境，但我们习惯使用的技术不能直接应用。在本章中，我们看到了如何通过使用收集性能指标、自定义指标和日志，并通过面向方面的编程自动应用所有这些来使Angular应用程序监视自身。
- en: While the techniques exposed in this chapter can provide 100% observability
    of your applications, they have also some drawbacks. Indeed, if your applications
    are popular, you will be overcharging your backend infrastructure not only to
    serve your pages and answer your API calls, but to accepts logs and metrics. Another
    drawback is that ill-intentioned people could feed you bad metrics via your APIs
    and provide you with a biased picture of what is currently happening within your
    live applications.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然本章介绍的技术可以提供对应用程序的100%可观察性，但它们也有一些缺点。实际上，如果您的应用程序很受欢迎，您将不仅需要为您的页面提供服务并回答您的API调用，还需要接受日志和指标，这将过度消耗您的后端基础设施。另一个缺点是，恶意的人可能会通过您的API向您提供错误的指标，并为您提供关于当前正在发生的实时应用程序情况的偏见图片。
- en: These drawbacks can be addressed by only monitoring a subset of your clients.
    For example, you could activate logging and tracing for only 5% of your clients
    based on a randomly generated number. In addition, you could verify the authenticity
    of the users that want to send you metrics by providing CSRF tokens for each request.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这些缺点可以通过仅监视客户端的子集来解决。例如，您可以根据随机生成的数字仅为5%的客户端激活日志记录和跟踪。此外，您可以通过为每个请求提供CSRF令牌来验证希望向您发送指标的用户的真实性。
