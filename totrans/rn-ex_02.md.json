["```js\nimport React, { Component } from 'react'; \nimport { \n  NavigatorIOS, \n  Text \n} from 'react-native'; \n\nexport default class ExampleNavigation extends Component { \n  render () { \n    return ( \n      <NavigatorIOS \n        initialRoute={{ \n          component: TasksList, \n          title: 'Tasks' \n        }} \n        style={ styles.container } \n      /> \n ); \n  } \n} \n\n```", "```js\n|Tasks \n|__android \n|__app \n|____components \n|______EditTask \n|______TasksList \n|______TasksListCell \n|__ios \n|__node_modules \n|__... \n\n```", "```js\n// Tasks/app/components/EditTask/index.js \n\nimport React, { Component } from 'react'; \n\nimport { \n  Text, \n  View \n} from 'react-native'; \n\nimport styles from './styles'; \n\nexport default class EditTask extends Component { \n  render () { \n    return ( \n      <View style={ styles.editTaskContainer }> \n        <Text style={ styles.editTaskText }>Editing Task</Text> \n      </View> \n    ); \n  } \n} \n\n```", "```js\n// Tasks/app/components/EditTask/styles.js \n\nimport { Navigator, StyleSheet } from 'react-native'; \n\nconst styles = StyleSheet.create({ \n  editTaskContainer: { \n    flex: 1, \n    paddingTop: Navigator.NavigationBar.Styles.General.TotalNavHeight \n  }, \n  editTaskText: { \n    fontSize: 36 \n  } \n}) \n\nexport default styles; \n\n```", "```js\n// Tasks/app/components/TasksList/index.js \n\n... \nimport EditTask from '../EditTask'; \n... \nexport default class TasksList extends Component { \n  ... \n  render () { \n    ... \n    return ( \n      <View style={ styles.container }> \n        ... \n        <ListView \n          ... \n          automaticallyAdjustContentInsets={ false } \n          style={ styles.listView } \n        /> \n      </View> \n    ); \n  } \n\n```", "```js\n  ... \n  _editTask (rowData) { \n    this.props.navigator.push({ \n      component: EditTask, \n      title: 'Edit' \n    }); \n  } \n\n```", "```js\n  _renderRowData (rowData, rowID) { \n    return ( \n      <TasksListCell \n        ... \n        onLongPress={ () => this._editTask() } \n      /> \n    ) \n  } \n  ... \n} \n\n```", "```js\n// Tasks/app/components/TasksList/styles.js \n\nimport { Navigator, StyleSheet } from 'react-native'; \n\nconst styles = StyleSheet.create({ \n  container: { \n    ... \n    paddingTop: Navigator.NavigationBar.Styles.General.TotalNavHeight \n... \n}); \n\nexport default styles; \n\n```", "```js\n// Tasks/app/components/EditTask/index.js \n\n... \nimport { \n  DatePickerIOS, \n  ... \n} from 'react-native';  \n...  \nexport default class EditTask extends Component { \n  constructor (props) { \n    super (props); \n\n    this.state = { \n      date: new Date() \n    } \n  } \n\n```", "```js\n  render () { \n    return ( \n      <View style={ styles.editTaskContainer }> \n        <DatePickerIOS \n          date={ this.state.date } \n          onDateChange={ (date) => this._onDateChange(date) } \n          style={ styles.datePicker } \n        /> \n      </View> \n    ); \n  } \n\n```", "```js\n  _onDateChange (date) { \n    this.setState({ \n      date \n    }); \n  } \n} \n\n```", "```js\n|Tasks \n|__android \n|__app \n|____EditTask \n|____ExpandableCell \n|____TasksList \n|____TasksListCell \n|__ios \n|__... \n\n```", "```js\n// Tasks/app/components/ExpandableCell/index.js \n\nimport React, { Component, PropTypes } from 'react'; \n\nimport { \n  LayoutAnimation, \n  Text, \n  TouchableHighlight, \n  View \n} from 'react-native'; \n\nimport styles from './styles'; \n\nexport default class ExpandableCell extends Component {\n\n```", "```js\n  static propTypes = { \n    title: PropTypes.string.isRequired \n  } \n\n```", "```js\n  constructor (props) { \n    super (props); \n\n    this.state = { \n      expanded: false \n    } \n  } \n\n```", "```js\n  componentWillUpdate () { \n    LayoutAnimation.linear(); \n  } \n\n```", "```js\n  render () { \n    return ( \n      <View style={ styles.expandableCellContainer }> \n        <View> \n          <TouchableHighlight \n            onPress={ () => this._expandCell() } \n            underlayColor={ '#D3D3D3' } \n          > \n\n```", "```js\n            <Text style={ styles.visibleContent }>\n            { this.props.title}</Text> \n          </TouchableHighlight> \n        </View> \n        <View style={ [styles.hiddenContent, \n        this.state.expanded ? {} : {maxHeight: 0}]}> \n\n```", "```js\n          { this.props.children } \n        </View> \n      </View> \n    ) \n  }\n\n```", "```js\n  _expandCell () { \n    this.setState({ \n      expanded: !this.state.expanded \n    }); \n  } \n} \n\n```", "```js\n// Tasks/app/components/ExpandableCell/styles.js \n\nimport { StyleSheet } from 'react-native'; \n\nconst styles = StyleSheet.create({ \n  expandableCellContainer: { \n    flex: 1, \n    padding: 10, \n    paddingTop: 0 \n  }, \n  hiddenContent: { \n    overflow: 'hidden' \n  }, \n  visibleContent: { \n    fontSize: 24 \n  } \n}) \n\n```", "```js\n// Tasks/app/components/EditTask/index.js \n\n... \nimport ExpandableCell from '../ExpandableCell'; \n\nexport default class EditTask extends Component { \n  ... \n\n```", "```js\nrender () { \n    return ( \n      <View style={ styles.editTaskContainer }> \n        <ExpandableCell title={ 'Due On' }> \n\n```", "```js\n          <DatePickerIOS \n            ... \n          /> \n\n        </ExpandableCell> \n      </View> \n    ); \n  } \n  ... \n} \n\n```", "```js\n// Tasks/app/components/EditTask/index.js \n\n... \nimport moment from 'moment'; \n... \nexport default class EditTask extends Component { \n  ...  \n  render () { \n const noDueDateTitle = 'Set Reminder'; \n    const dueDateSetTitle = 'Due On ' + this.state.formattedDate; \n\n```", "```js\nreturn ( \n      <View style={ styles.editTaskContainer }> \n        <ExpandableCell \n          title={ this.state.dateSelected ? \n          dueDateSetTitle : noDueDateTitle }> \n\n```", "```js\n          ... \n        </ExpandableCell> \n      </View> \n    ); \n  } \n\n  _formatDate (date) { \n    return moment(date).format('lll'); \n  } \n\n```", "```js\nnpm install --save moment      \n\n```", "```js\nDec 25, 2016 12:01 AM \n\n```", "```js\n  _onDateChange (date) { \n    this.setState({ \n      ... \n      dateSelected: true, \n      formattedDate: this._formatDate(date) \n    }); \n  } \n} \n\n```", "```js\n<DatePickerIOS \n  date={ this.state.date } \n  onDateChange={ (date) => this._onDateChange(date) } \n  onLayout={ (event) => this._getComponentDimensions(event) } \n  style={ styles.datePicker }  \n/> \n\n```", "```js\nevent: { \n  nativeEvent: { \n    layout: { \n      x: //some number \n      y: //some number \n      width: //some number \n      height: //some number \n    } \n  } \n} \n\n```", "```js\n<Button \n  color={ 'blue' } \n  disabled={ this.state.buttonDisabled } \n  onPress={ () => alert('Submit button pressed') } \n  title={ 'Submit' }  \n/> \n\n```", "```js\n// Tasks/app/components/EditTask/index.js \n\n... \nimport { \n  Button, \n  ... \n} from 'react-native'; \n... \nexport default class EditTask extends Component { \n  constructor (props) { \n    ... \n    this.state = { \n      ... \n      expanded: false \n    } \n  } \n\n  render () { \n    ... \n    return ( \n      <View style={ styles.editTaskContainer }> \n        <View style={ [styles.expandableCellContainer,\n        { maxHeight: this.state.expanded ? \n        this.state.datePickerHeight : 40 }]}> \n\n```", "```js\n          <ExpandableCell \n            ... \n            expanded={ this.state.expanded } \n            onPress={ () => this._onExpand() } \n          > \n\n```", "```js\n            <DatePickerIOS \n              ... \n              onLayout={ (event) => this._getDatePickerHeight(event) } \n            /> \n          </ExpandableCell> \n        </View>\n\n```", "```js\n        <View style={ styles.clearDateButtonContainer }> \n          <Button \n            color={ '#B44743' } \n            disabled={ this.state.dateSelected ? false : true } \n            onPress={ () => this._clearDate() } \n            title={ 'Clear Date' } \n          /> \n        </View> \n      </View> \n    ); \n  } \n\n```", "```js\n  _clearDate () { \n    this.setState({ \n      dateSelected: false \n    }); \n  } \n\n```", "```js\n  _getDatePickerHeight (event) { \n    this.setState({ \n      datePickerHeight: event.nativeEvent.layout.width \n    }); \n  } \n\n  _onExpand () { \n    this.setState({ \n      expanded: !this.state.expanded \n    }); \n  } \n} \n\n```", "```js\n// Tasks/app/components/EditTask/styles.js \n\nimport { Navigator, StyleSheet } from 'react-native'; \n\nconst styles = StyleSheet.create({ \n  ... \n  clearDateButtonContainer: { \n    flex: 1 \n  } \n}) \n\nexport default styles; \n\n```", "```js\n<Switch \n  onValueChange={ (value) =? this.setState({ toggled: value })} \n  value={ this.state.toggled } \n/> \n\n```", "```js\n// Tasks/app/components/TasksList/index.js \n\n...  \nexport default class TasksList extends Component { \n  ... \n  _editTask (rowData) { \n    this.props.navigator.push({ \n      ... \n      passProps: { \n        completed: rowData.completed, \n        due: rowData.due, \n        formattedDate: rowData.formattedDate, \n        text: rowData.text \n      }, \n      ... \n    }); \n  } \n  ... \n} \n\n```", "```js\n// Tasks/app/components/EditTask/index.js \n\nimport React, { Component, PropTypes } from 'react'; \n... \nimport { \n  ... \n  Switch, \n  TextInput, \n  ... \n} from 'react-native'; \n... \nexport default class EditTask extends Component { \n  static propTypes = { \n    completed: PropTypes.bool.isRequired, \n    due: PropTypes.string, \n    formattedDate: PropTypes.string, \n    text: PropTypes.string.isRequired \n  } \n\n  constructor (props) { \n    super (props); \n\n    this.state = { \n      completed: this.props.completed, \n      date: new Date(this.props.due), \n      expanded: false, \n      text: this.props.text \n    } \n  } \n\n```", "```js\n  render () { \n    ... \n    return ( \n      <View style={ styles.editTaskContainer }> \n        <View> \n          <TextInput \n            autoCorrect={ false } \n            onChangeText={ (text) => this._changeTextInputValue(text) } \n            returnKeyType={ 'done' } \n            style={ styles.textInput } \n            value={ this.state.text } \n          /> \n        </View> \n\n```", "```js\n        ... \n        <View style={ styles.switchContainer } > \n          <Text style={ styles.switchText } > \n            Completed \n          </Text> \n          <Switch \n            onValueChange={ (value) => this._onSwitchToggle(value) } \n            value={ this.state.completed } \n          /> \n        </View> \n        ... \n      </View> \n    ); \n  } \n\n```", "```js\n  _changeTextInputValue (text) { \n    this.setState({ \n      text \n    }); \n  } \n  ...  \n  _onSwitchToggle (completed) { \n    this.setState({ \n      completed \n    }); \n  } \n} \n\n```", "```js\n// Tasks/app/components/EditTask/styles.js \n\nimport { Navigator, StyleSheet } from 'react-native'; \n\nconst styles = StyleSheet.create({ \n  ... \n  switchContainer: { \n    flex: 1, \n    flexDirection: 'row', \n    justifyContent: 'space-between', \n    maxHeight: 50, \n    padding: 10 \n  }, \n  switchText: { \n    fontSize: 16 \n  }, \n  textInput: { \n    borderColor: 'gray', \n    borderWidth: 1, \n    height: 40, \n    margin: 10, \n    padding: 10 \n  } \n}) \n\nexport default styles; \n\n```", "```js\n// Tasks/app/components/TasksList/index.js \n\n... \nexport default class TasksList extends Component { \n  constructor (props) { \n    ... \n    this.state = { \n      currentEditedTaskObject: undefined, \n      ... \n    }; \n  } \n  ... \n  _completeTask (rowID) { \n    const singleUpdatedTask = { \n      ...this.state.listOfTasks[rowID], \n      completed: !this.state.listOfTasks[rowID].completed \n    }; \n\n    this._saveAndUpdateSelectedTask(singleUpdatedTask, rowID); \n  } \n\n```", "```js\n  _editTask (rowData, rowID) { \n    this.setState({ \n      currentEditedTaskObject: rowData \n    }); \n\n```", "```js\n    this.props.navigator.push({ \n      ... \n      onRightButtonPress: () => this._saveCurrentEditedTask(rowID), \n      rightButtonTitle: 'Save', \n\n```", "```js\n      passProps: { \n        changeTaskCompletionStatus: (status) =>\n        this._updateCurrentEditedTaskObject('completed', status), \n        changeTaskDueDate: (date, formattedDate) => \n        this._updateCurrentEditedTaskDueDate\n        (date, formattedDate), \n        changeTaskName: (name) => \n        this._updateCurrentEditedTaskObject('text', name), \n        clearTaskDueDate: () => \n        this._updateCurrentEditedTaskDueDate(undefined, undefined), \n      } \n    }); \n  } \n\n```", "```js\n  _renderRowData (rowData, rowID) { \n    return ( \n      <TasksListCell \n        ... \n        onLongPress={ () => this._editTask(rowData, rowID) } \n        ... \n      /> \n    ) \n  } \n\n```", "```js\n  async _saveAndUpdateSelectedTask (newTaskObject, rowID) { \n    const listOfTasks = this.state.listOfTasks.slice(); \n    listOfTasks[rowID] = newTaskObject; \n\n    await AsyncStorage.setItem('listOfTasks', \n    JSON.stringify(listOfTasks)); \n\n    this._updateList(); \n  } \n\n```", "```js\n_saveCurrentEditedTask (rowID) { \nthis._saveAndUpdateSelectedTask(this.state.currentEditedTaskObject,\nrowID); \n  this.props.navigator.pop(); \n} \n\n```", "```js\n  _updateCurrentEditedTaskDueDate (date, formattedDate) { \n    this._updateCurrentEditedTaskObject ('due', date); \n    this._updateCurrentEditedTaskObject ('formattedDate', \n    formattedDate); \n  } \n\n```", "```js\n  _updateCurrentEditedTaskObject (key, value) { \n    let newTaskObject = Object.assign({}, \n    this.state.currentEditedTaskObject); \n\n    newTaskObject[key] = value; \n\n    this.setState({ \n      currentEditedTaskObject: newTaskObject \n    }); \n  } \n  ... \n} \n\n```", "```js\n// Tasks/app/components/EditTask/index.js \n\n... \nexport default class EditTask extends Component { \n  static propTypes = { \n    changeTaskCompletionStatus: PropTypes.func.isRequired, \n    changeTaskDueDate: PropTypes.func.isRequired, \n    changeTaskName: PropTypes.func.isRequired, \n    clearTaskDueDate: PropTypes.func.isRequired, \n    ... \n  } \n\n```", "```js\n  ... \n  render () { \n    ... \n        const dueDateSetTitle = 'Due On ' + \n        this.state.formattedDate || this.props.formattedDate;\n    ... \n  } \n\n  _changeTextInputValue (text) { \n    ...  \n    this.props.changeTaskName(text); \n  } \n\n  _clearDate () { \n    ...  \n    this.props.clearTaskDueDate(); \n  } \n  ... \n  _onDateChange (date) { \n    ...  \n    this.props.changeTaskDueDate(date, formattedDate); \n  } \n  ... \n  _onSwitchToggle (completed) { \n    ...  \n    this.props.changeTaskCompletionStatus(completed); \n  } \n} \n\n```", "```js\n// Tasks/app/components/TasksListCell/index.js \n\n... \nimport styles from './styles'; \n\n```", "```js\nexport default class TasksListCell extends Component { \n  static propTypes = { \n    ... \n    formattedDate: PropTypes.string, \n  } \n\n... \n  render () { \n    ... \n    return ( \n      <View style={ styles.tasksListCellContainer }> \n        <TouchableHighlight \n          ... \n        > \n          <View style={ styles.tasksListCellTextRow }> \n            <Text style={ [styles.taskNameText, \n            { textDecorationLine: isCompleted }] }> \n              { this.props.text } \n            </Text>\n\n```", "```js\n            <Text style={ styles.dueDateText }> \n              { this._getDueDate() } \n            </Text> \n          </View> \n        </TouchableHighlight> \n      </View> \n    ) \n  } \n\n_getDueDate () { \n    if (this.props.formattedDate && !this.props.completed) { \n      return 'Due ' + this.props.formattedDate; \n    } \n\n    return ''; \n  } \n} \n\n```", "```js\n// Tasks/app/components/TasksListCell/styles.js \n\nimport { StyleSheet } from 'react-native'; \n\nconst styles = StyleSheet.create({ \n  dueDateText: { \n    color: 'red', \n    flex: 1, \n    fontSize: 12, \n    paddingTop: 0, \n    textAlign: 'right' \n  }, \n  taskNameText: { \n    fontSize: 20 \n  }, \n  tasksListCellContainer: { \n    flex: 1 \n  }, \n  tasksListCellTextRow: { \n    flex: 1 \n  } \n}); \n\nexport default styles;  \n\n```", "```js\n// Tasks/android/local.properties \n\nsdk.dir = /Users/USERNAME/Library/Android/sdk \n\n```", "```js\nexport default class Tasks extends Component { \n  render () { \n    const routes = [ \n      { title: 'First Component', index: 0 }, \n      { title: 'Second Component', index: 1 } \n    ]; \n\n```", "```js\n    return ( \n      <Navigator \n        initialRoute={{ index: 0 }} \n        renderScene={ (routes, navigator) => \n        this._renderScene(routes, navigator) } /> \n    ) \n  } \n\n```", "```js\n    _renderScene (route, navigator) { \n      if (route.index === 0) { \n        return ( \n          <FirstComponent \n            title={ route.title } \n            navigator={ navigator } /> \n        ) \n    } \n\n    if (route.index === 1) { \n      return ( \n        <SecondComponent \n         navigator={ navigator } \n         details={ route.passProps.details } /> \n      ) \n    } \n  } \n} \n\n```", "```js\n  _renderAndroidNavigatorView () { \n    this.props.navigator.push({ \n      index: 1, \n      passProps: { \n        greeting: 'Hello World' \n      } \n    }); \n  } \n\n```", "```js\n// index.android.js\n\nimport React, { Component } from 'react'; \nimport { \n  AppRegistry, \n  Navigator, \n} from 'react-native'; \n\nimport TasksList from './app/components/TasksList'; \nimport EditTask from './app/components/EditTask'; \n\nclass Tasks extends Component { \n\n  render () { \n    const routes = [ \n      { title: 'Tasks', index: 0 }, \n      { title: 'Edit Task', index: 1 } \n    ]; \n\n```", "```js\n    return ( \n      <Navigator \n        initialRoute={{ index: 0}} \n        renderScene={ (routes, navigator) =>\n        this._renderScene(routes, navigator) }/> \n    ); \n  } \n\n```", "```js\n  _renderScene (route, navigator) { \n    if (route.index === 0) { \n      return ( \n        <TasksList \n          title={ route.title } \n          navigator={ navigator } /> \n      ) \n    } \n\n```", "```js\n    if (route.index === 1) { \n      return ( \n        <EditTask \n          navigator={ navigator } \n          route={ route } \n          changeTaskCompletionStatus={ \n          route.passProps.changeTaskCompletionStatus } \n          changeTaskDueDate={ route.passProps.changeTaskDueDate } \n          changeTaskName={ route.passProps.changeTaskName } \n          completed={ route.passProps.completed } \n          due={ route.passProps.due } \n          formattedDate={ route.passProps.formattedDate } \n          text={ route.passProps.text } \n        /> \n      ) \n    } \n  } \n} \n\nAppRegistry.registerComponent('Tasks', () => Tasks); \n\n```", "```js\nimport { Platform } from 'react-native';  \n\n```", "```js\n  _platformConditional () { \n    if (Platform.OS === 'ios') { \n      doSomething(); \n    } \n\n    if (Platform.OS === 'android') { \n      doSomethingElse(); \n    } \n  } \n\n```", "```js\n// Tasks/app/components/TasksList/index.js \n\n... \nimport { \n  ... \n  Platform, \n  ... \n} from 'react-native'; \n\n```", "```js\n... \nexport default class TasksList extends Component { \n  ... \n  render () { \n  ... \n    return ( \n      <View style={ styles.container }> \n        <TextInput \n          ... \n          style={ Platform.os === 'IOS' ? styles.textInput :\n          styles.androidTextInput } \n          ... \n        /> \n        ... \n      </View> \n    ); \n  } \n\n```", "```js\n  _editTask (rowData, rowID) { \n    ...  \n    if (Platform.OS === 'ios') { \n      return this._renderIOSEditTaskComponent(rowID); \n    } \n\n    return this._renderAndroidEditTaskComponent(rowID); \n  } \n\n  _renderAndroidEditTaskComponent (rowID) { \n    this.props.navigator.push({ \n      index: 1, \n      passProps: { \n        changeTaskCompletionStatus: (status) => \n        this._updateCurrentEditedTaskObject('completed', status), \n        changeTaskDueDate: (date, formattedDate) =>\n        this._updateCurrentEditedTaskDueDate(date, formattedDate), \n        changeTaskName: (name) => \n        this._updateCurrentEditedTaskObject('text', name), \n        clearTaskDueDate: () => \n        this._updateCurrentEditedTaskDueDate(undefined, undefined), \n        completed: this.state.currentEditedTaskObject.completed, \n        due: this.state.currentEditedTaskObject.due, \n        formattedDate: \n        this.state.currentEditedTaskObject.formattedDate, \n        text: this.state.currentEditedTaskObject.text \n      } \n    }) \n  } \n\n```", "```js\n  _renderIOSEditTaskComponent (rowID) { \n    this.props.navigator.push({ \n      ... \n    }); \n  } \n  ... \n} \n\n```", "```js\n// Tasks/app/components/EditTask/styles.js \n\n... \nconst styles = StyleSheet.create({ \n  androidTextInput: { \n    height: 40, \n    margin: 10, \n    padding: 10 \n  }, \n  ... \n}); \n\n```", "```js\nasync renderDatePicker () { \n  const { action, year, month, day } = await DatePickerAndroid.open({ \n    date: new Date() \n  }); \n\n  if (action === DatePickerAndroid.dismissedAction) { \n    return; \n  } \n\n  // do something with the year, month, and day here \n} \n\n```", "```js\n// Tasks/app/components/EditTask/index.android.js \n\n... \nimport { \n  ... \n  DatePickerAndroid, \n  TimePickerAndroid, \n} from 'react-native'; \n... \n\n```", "```js\nexport default class EditTask extends Component { \n  ... \n\n```", "```js\n  render () { \n    ... \n    return ( \n      <View style={ styles.editTaskContainer }> \n        ... \n        <View style={ styles.androidButtonContainer }> \n          <Button \n            color={ '#80B546' } \n            title={ this.state.dateSelected ? dueDateSetTitle : \n            noDueDateTitle } \n            onPress={ () => this._showAndroidDatePicker() } \n          /> \n        </View> \n\n```", "```js\n        <View style={ styles.androidButtonContainer }> \n\n        </View> \n      </View> \n    ); \n  }\n\n```", "```js\n  async _showAndroidDatePicker () { \n    const options = { \n      date: this.state.date \n    }; \n\n    const { action, year, month, day } = await \n    DatePickerAndroid.open(options); \n\n    if (action === DatePickerAndroid.dismissedAction) { \n      return; \n    } \n\n    this.setState({ \n      day, \n      month, \n      year \n    }); \n\n    this._showAndroidTimePicker(); \n  } \n\n```", "```js\n  async _showAndroidTimePicker () { \n    const { action, minute, hour } = await TimePickerAndroid.open(); \n\n    if (action === TimePickerAndroid.dismissedAction) { \n      return; \n    } \n\n    this.setState({ \n      hour, \n      minute \n    }); \n\n    this._onDateChange(); \n  } \n\n```", "```js\n  ... \n  _onDateChange () { \n    const date = new Date(this.state.year, this.state.month, \n    this.state.day, this.state.hour, this.state.minute); \n    ... \n  }\n  ... \n} \n\n```", "```js\n// Tasks/app/components/EditTask/styles.js \n\n... \nconst styles = StyleSheet.create({ \n  androidButtonContainer: { \n    flex: 1, \n    maxHeight: 60, \n    margin: 10 \n  }, \n  ... \n  textInput: { \n    height: 40, \n    margin: 10, \n    padding: 10 \n  } \n}); \n\n```", "```js\n// index.android.js\n\n... \nclass Tasks extends Component { \n  ... \n  _renderScene (route, navigator) { \n    ... \n    if (route.index === 1) { \n      return ( \n        <EditTask \n          ... \n          saveCurrentEditedTask={ route.passProps\n          .saveCurrentEditedTask } \n          ... \n        /> \n      ) \n    } \n  } \n} \n\n```", "```js\n// Tasks/app/components/TasksList/index.js \n\n... \nexport default class TasksList extends Component { \n  ... \n  _renderAndroidEditTaskComponent (rowID) { \n    this.props.navigator.push({ \n      ... \n      passProps: { \n        ... \n        saveCurrentEditedTask: () => \n        this._saveCurrentEditedTask(rowID), \n        ... \n      } \n    }) \n  } \n  ... \n} \n\n```", "```js\n// Tasks/app/components/EditTask/index.android.js \n\n... \nexport default class EditTask extends Component { \n  static propTypes = { \n    ... \n    saveCurrentEditedTask: PropTypes.func.isRequired, \n    ... \n  } \n\n  render () { \n    ... \n    return ( \n      <View style={ styles.editTaskContainer }> \n        ... \n        <View style={ styles.saveButton }> \n          <Button \n            color={ '#4E92B5' } \n            onPress={ () => this.props.saveCurrentEditedTask() } \n            title={ 'Save Task' } \n          /> \n        </View> \n      </View> \n    ); \n  } \n  ... \n} \n\n```", "```js\n// Tasks/app/components/EditTask/styles.js \n\nimport { Navigator, StyleSheet } from 'react-native'; \n\nconst styles = StyleSheet.create({ \n  ... \n  saveButton: { \n    flex: 1, \n    marginTop: 20, \n    maxHeight: 70, \n  }, \n  ... \n}); \n\n```", "```js\n// Tasks/app/components/EditTask/index.android.js \n\n... \nimport { \n  BackAndroid, \n  ... \n} from 'react-native'; \n... \nexport default class EditTask extends Component { \n  ... \n  componentWillMount () { \n    BackAndroid.addEventListener('hardwareButtonPress', () => \n    this._backButtonPress()); \n  } \n\n```", "```js\n  componentWillUnmount () { \n    BackAndroid.removeEventListener('hardwareButtonPress', () => \n    this._backButtonPress()) \n  } \n\n```", "```js\n  ... \n  _backButtonPress () { \n    this.props.navigator.pop(); \n    return true; \n  } \n  ... \n} \n\n```"]