["```js\n    $ cp -R ch6 ch7\n    ```", "```js\n    $ npm run dev\n    ```", "```js\n    $ cd backend\n    $ npm run dev\n    ```", "```js\n    $ npm install -g serve\n    ```", "```js\n    $ npm run build\n    ```", "```js\n    $ serve dist/\n    ```", "```js\n    $ npm install express@4.18.2 dotenv@16.3.1\n    ```", "```js\n      \"env\": {\n        \"browser\": true,\n        \"node\": true\n      },\n    ```", "```js\n    import fs from 'fs'\n    import path from 'path'\n    import { fileURLToPath } from 'url'\n    import express from 'express'\n    import dotenv from 'dotenv'\n    dotenv.config()\n    ```", "```js\n    const __dirname = path.dirname(fileURLToPath(import.meta.url))\n    ```", "```js\n    async function createDevServer() {\n    ```", "```js\n      const app = express()\n    ```", "```js\n      const vite = await (\n        await import('vite')\n      ).createServer({\n        server: { middlewareMode: true },\n        appType: 'custom',\n      })\n      app.use(vite.middlewares)\n    ```", "```js\n      app.use('*', async (req, res, next) => {\n        try {\n          const templateHtml = fs.readFileSync(\n            path.resolve(__dirname, 'index.html'),\n            'utf-8',\n          )\n    ```", "```js\n          const template = await vite.transformIndexHtml(\n            req.originalUrl,\n            templateHtml\n          )\n    ```", "```js\n          const { render } = await vite.ssrLoadModule('/src/entry-server.jsx')\n    ```", "```js\n          const appHtml = await render()\n    ```", "```js\n          const html = template.replace(`<!--ssr-outlet-->`, appHtml)\n    ```", "```js\n          res.status(200).set({ 'Content-Type': 'text/html' }).end(html)\n    ```", "```js\n        } catch (e) {\n          vite.ssrFixStacktrace(e)\n          next(e)\n        }\n      })\n      return app\n    }\n    ```", "```js\n    const app = await createDevServer()\n    app.listen(process.env.PORT, () =>\n      console.log(\n        `ssr dev server running on http://localhost:${process.env.PORT}`,\n      ),\n    )\n    ```", "```js\n    VITE_BACKEND_URL=\"http://localhost:3001/api/v1\"\n    PORT=5173\n    ```", "```js\n    import ReactDOMServer from 'react-dom/server\n    import { App } from './App.jsx'\n    ```", "```js\n    export async function render() {\n      return ReactDOMServer.renderToString(\n        <App />,\n      )\n    }\n    ```", "```js\n    ReactDOM.hydrateRoot(\n      document.getElementById('root'),\n      <React.StrictMode>\n        <App />\n      </React.StrictMode>,\n    )\n    ```", "```js\n        <div id=\"root\"><!--ssr-outlet--></div>\n    ```", "```js\n        <script type=\"module\" src=\"/src/entry-client.jsx\"></script>\n    ```", "```js\n        \"dev\": \"node server\",\n    ```", "```js\n        \"build\": \"npm run build:client && npm run build:server\",\n        \"build:client\": \"vite build --outDir dist/client\",\n        \"build:server\": \"vite build --outDir dist/server --ssr src/entry-server.jsx\",\n    ```", "```js\n    import { QueryClient, QueryClientProvider } from '@tanstack/react-query'\n    import { createBrowserRouter, RouterProvider } from 'react-router-dom'\n    import { AuthContextProvider } from './contexts/AuthContext.jsx'\n    import { Blog } from './pages/Blog.jsx'\n    import { Signup } from './pages/Signup.jsx'\n    import { Login } from './pages/Login.jsx'\n    ```", "```js\n    import PropTypes from 'prop-types'\n    ```", "```js\n    const router = createBrowserRouter([\n      {\n        path: '/',\n        element: <Blog />,\n      },\n      {\n        path: '/signup',\n        element: <Signup />,\n      },\n      {\n        path: '/login',\n        element: <Login />,\n      },\n    ])\n    ```", "```js\n    export function App({ children }) {\n      return (\n        <QueryClientProvider client={queryClient}>\n          <AuthContextProvider>\n            {children}\n    </AuthContextProvider>\n        </QueryClientProvider>\n      )\n    }\n    ```", "```js\n    App.propTypes = {\n      children: PropTypes.element.isRequired,\n    }\n    ```", "```js\n    import { Blog } from './pages/Blog.jsx'\n    import { Signup } from './pages/Signup.jsx'\n    import { Login } from './pages/Login.jsx'\n    ```", "```js\n    export const routes = [\n      {\n        path: '/',\n        element: <Blog />,\n      },\n      {\n        path: '/signup',\n        element: <Signup />,\n      },\n      {\n        path: '/login',\n        element: <Login />,\n      },\n    ]\n    ```", "```js\n    import React from 'react'\n    import ReactDOM from 'react-dom/client'\n    import { createBrowserRouter, RouterProvider } from 'react-router-dom'\n    import { App } from './App.jsx'\n    import { routes } from './routes.jsx'\n    ```", "```js\n    const router = createBrowserRouter(routes)\n    ```", "```js\n    ReactDOM.hydrateRoot(\n      document.getElementById('root'),\n      <React.StrictMode>\n        <App>\n          <RouterProvider router={router} />\n        </App>\n      </React.StrictMode>,\n    )\n    ```", "```js\n    export function createFetchRequest(req) {\n    ```", "```js\n      const origin = `${req.protocol}://${req.get('host')}`\n      const url = new URL(req.originalUrl || req.url, origin)\n    ```", "```js\n      const controller = new AbortController()\n      req.on('close', () => controller.abort())\n    ```", "```js\n      const headers = new Headers()\n      for (const [key, values] of Object.entries(req.headers)) {\n        if (!values) continue\n        if (Array.isArray(values)) {\n          for (const value of values) {\n            headers.append(key, value)\n          }\n        } else {\n          headers.set(key, values)\n        }\n      }\n    ```", "```js\n      const init = {\n        method: req.method,\n        headers,\n        signal: controller.signal,\n      }\n    ```", "```js\n      if (req.method !== 'GET' && req.method !== 'HEAD') {\n        init.body = req.body\n      }\n    ```", "```js\n      return new Request(url.href, init)\n    }\n    ```", "```js\n    import ReactDOMServer from 'react-dom/server'\n    import {\n      createStaticHandler,\n      createStaticRouter,\n      StaticRouterProvider,\n    } from 'react-router-dom/server'\n    import { App } from './App.jsx'\n    import { routes } from './routes.jsx'\n    import { createFetchRequest } from './request.js'\n    ```", "```js\n    const handler = createStaticHandler(routes)\n    ```", "```js\n    export async function render(req) {\n      const fetchRequest = createFetchRequest(req)\n    ```", "```js\n      const context = await handler.query(fetchRequest)\n    ```", "```js\n      const router = createStaticRouter(handler.dataRoutes, context)\n    ```", "```js\n      return ReactDOMServer.renderToString(\n        <App>\n          <StaticRouterProvider router={router} context={context} />\n        </App>,\n      )\n    }\n    ```", "```js\n          const appHtml = await render(req)\n    ```", "```js\n    $ npm run dev\n    ```", "```js\n    $ cd backend\n    $ npm run dev\n    ```", "```js\n    import { useLoaderData } from 'react-router-dom'\n    import { Blog } from './pages/Blog.jsx'\n    import { Signup } from './pages/Signup.jsx'\n    import { Login } from './pages/Login.jsx'\n    import { getPosts } from './api/posts.js'\n    ```", "```js\n    export const routes = [\n      {\n        path: '/',\n        loader: getPosts,\n        Component() {\n          const posts = useLoaderData()\n          return <Blog initialData={posts} />\n        },\n      },\n    ```", "```js\n    import PropTypes from 'prop-types'\n    ```", "```js\n    export function Blog({ initialData }) {\n    ```", "```js\n      const postsQuery = useQuery({\n        queryKey: ['posts', { author, sortBy, sortOrder }],\n        queryFn: () => getPosts({ author, sortBy, sortOrder }),\n        initialData,\n      })\n    ```", "```js\n    Blog.propTypes = {\n      initialData: PropTypes.shape(PostList.propTypes.posts),\n    }\n    ```", "```js\n    import { QueryClient, dehydrate, HydrationBoundary } from '@tanstack/react-query'\n    ```", "```js\n    import { getUserInfo } from './api/users.js'\n    ```", "```js\n      {\n        path: '/',\n        loader: async () => {\n          const queryClient = new QueryClient()\n    ```", "```js\n          const author = ''\n          const sortBy = 'createdAt'\n          const sortOrder = 'descending'\n          const posts = await getPosts({ author, sortBy, sortOrder })\n    ```", "```js\n          await queryClient.prefetchQuery({\n            queryKey: ['posts', { author, sortBy, sortOrder }],\n            queryFn: () => posts,\n          })\n    ```", "```js\n          const uniqueAuthors = posts\n            .map((post) => post.author)\n            .filter((value, index, array) => array.indexOf(value) === index)\n    ```", "```js\n          for (const userId of uniqueAuthors) {\n            await queryClient.prefetchQuery({\n              queryKey: ['users', userId],\n              queryFn: () => getUserInfo(userId),\n            })\n          }\n    ```", "```js\n          return dehydrate(queryClient)\n        },\n    ```", "```js\n        Component() {\n          const dehydratedState = useLoaderData()\n          return (\n            <HydrationBoundary state={dehydratedState}>\n              <Blog />\n            </HydrationBoundary>\n          )\n        },\n      },\n    ```", "```js\n    import PropTypes from 'prop-types'\n    ```", "```js\n    export function Blog({ initialData }) {\n    ```", "```js\n      const postsQuery = useQuery({\n        queryKey: ['posts', { author, sortBy, sortOrder }],\n        queryFn: () => getPosts({ author, sortBy, sortOrder }),\n        initialData,\n      })\n    ```", "```js\n    Blog.propTypes = {\n      initialData: PropTypes.shape(PostList.propTypes),\n    }\n    ```", "```js\n    $ npm run dev\n    ```", "```js\n    $ npm install compression@1.7.4\n    ```", "```js\n    async function createProdServer() {\n    ```", "```js\n      const app = express()\n      app.use((await import('compression')).default())\n      app.use(\n        (await import('serve-static')).default(\n          path.resolve(__dirname, 'dist/client'),\n          {\n            index: false,\n          },\n        ),\n      )\n    ```", "```js\n      app.use('*', async (req, res, next) => {\n        try {\n          let template = fs.readFileSync(\n            path.resolve(__dirname, 'dist/client/index.html'),\n            'utf-8',\n          )\n    ```", "```js\n          const render = (await import('./dist/server/entry-server.js')).render\n    ```", "```js\n          const appHtml = await render(req)\n          const html = template.replace(`<!--ssr-outlet-->`, appHtml)\n          res.status(200).set({ 'Content-Type': 'text/html' }).end(html)\n    ```", "```js\n        } catch (e) {\n          next(e)\n        }\n      })\n      return app\n    }\n    ```", "```js\n    if (process.env.NODE_ENV === 'production') {\n      const app = await createProdServer()\n      app.listen(process.env.PORT, () =>\n        console.log(\n          `ssr production server running on http://localhost:${process.env.PORT}`,\n        ),\n      )\n    } else {\n      const app = await createDevServer()\n      app.listen(process.env.PORT, () =>\n        console.log(\n          `ssr dev server running on http://localhost:${process.env.PORT}`,\n        ),\n      )\n    }\n    ```", "```js\n    $ npm install cross-env@7.0.3\n    ```", "```js\n        \"start\": \"cross-env NODE_ENV=production node server\",\n    ```", "```js\n    $ npm run build\n    $ npm start\n    ```"]