["```js\nheader.payload.signature\n```", "```js\n{\n  \"alg\": \"HS256\",\n  \"typ\": \"JWT\"\n}\n```", "```js\n{\n  \"sub\": \"1234567890\",\n  \"name\": \"Daniel Bugl\",\n  \"admin\": true\n}\n```", "```js\nHMACSHA256(\n  base64UrlEncode(header) + \".\" + base64UrlEncode(payload),\n  secret\n)\n```", "```js\nAuthorization: Bearer <token>\n```", "```js\n    $ cp -R ch5 ch6\n    ```", "```js\n    import mongoose, { Schema } from 'mongoose'\n    const userSchema = new Schema({\n    ```", "```js\n      username: { type: String, required: true, unique: true },\n      password: { type: String, required: true },\n    })\n    ```", "```js\n    export const User = mongoose.model('user', userSchema)\n    ```", "```js\n        author: ObjectId, with a reference to the user model, and made author required (as you will need to be logged in to create a post after we add an authenticated route later in this chapter).Making `author` required means that the unit tests will need to be adjusted, but doing so is left as an exercise for you.\n    ```", "```js\n    $ cd backend\n    $ npm install bcrypt@5.1.1\n    ```", "```js\n    import bcrypt from 'bcrypt'\n    import { User } from '../db/models/user.js'\n    ```", "```js\n    export async function createUser({ username, password }) {\n    ```", "```js\n      const hashedPassword = await bcrypt.hash(password, 10)\n    ```", "```js\n      const user = new User({ username, password: hashedPassword })\n      return await user.save()\n    }\n    ```", "```js\n    import { createUser } from '../services/users.js'\n    ```", "```js\n    export function userRoutes(app) {\n      app.post('/api/v1/user/signup', async (req, res) => {\n        try {\n          const user = await createUser(req.body)\n          return res.status(201).json({ username: user.username })\n        } catch (err) {\n          return res.status(400).json({\n            error: 'failed to create the user, does the username already exist?'\n          })\n        }\n      })\n    }\n    ```", "```js\n    import { postRoutes } from './routes/posts.js'\n    import { userRoutes } from './routes/users.js'\n    ```", "```js\n    postRoutes(app)\n    userRoutes(app)\n    ```", "```js\n    $ cd backend \n    $ npm run dev\n    ```", "```js\n    const res = await fetch('http://localhost:3001/api/v1/user/signup', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ username: 'dan', password: 'hunter2' })\n    })\n    console.log(await res.json())\n    ```", "```js\n    $ cd backend\n    $ npm install jsonwebtoken@9.0.2\n    ```", "```js\n    import jwt from 'jsonwebtoken'\n    ```", "```js\n    export async function loginUser({ username, password }) {\n    ```", "```js\n      const user = await User.findOne({ username })\n      if (!user) {\n        throw new Error('invalid username!')\n      }\n    ```", "```js\n      const isPasswordCorrect = await bcrypt.compare(password, user.password)\n      if (!isPasswordCorrect) {\n        throw new Error('invalid password!')\n      }\n    ```", "```js\n      const token = jwt.sign({ sub: user._id }, process.env.JWT_SECRET, {\n        expiresIn: '24h',\n      })\n    ```", "```js\n      return token\n    }\n    ```", "```js\n    JWT_SECRET=replace-with-random-secret\n    ```", "```js\n    JWT_SECRET=replace-with-random-secret\n    ```", "```js\n    import { createUser, loginUser } from '../services/users.js'\n    ```", "```js\n      app.post('/api/v1/user/login', async (req, res) => {\n        try {\n          const token = await loginUser(req.body)\n          return res.status(200).send({ token })\n        } catch (err) {\n          return res.status(400).send({\n            error: 'login failed, did you enter the correct username/password?'\n          })\n        }\n      })\n    ```", "```js\n    const res = await fetch('http://localhost:3001/api/v1/user/login', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ username: 'dan', password: 'hunter2' })\n    })\n    console.log(await res.json())\n    ```", "```js\n    $ cd backend\n    $ npm install express-jwt@8.4.1\n    ```", "```js\n    import { expressjwt } from 'express-jwt'\n    ```", "```js\n    export const requireAuth = expressjwt({\n      secret: () => process.env.JWT_SECRET,\n      algorithms: ['HS256'],\n    })\n    ```", "```js\n    import { requireAuth } from '../middleware/jwt.js'\n    ```", "```js\n      app.post('/api/v1/posts', requireAuth, async (req, res) => {\n    ```", "```js\n      app.patch('/api/v1/posts/:id', requireAuth, async (req, res) => {\n    ```", "```js\n      app.delete('/api/v1/posts/:id', requireAuth, async (req, res) => {\n    ```", "```js\n    const res = await fetch('http://localhost:3001/api/v1/posts', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ title: 'Test Post' })\n    })\n    console.log(await res.json())\n    ```", "```js\n    export async function createPost(userId, { title, author, contents, tags }) {\n    ```", "```js\n      const post = new Post({ title, author: userId, contents, tags })\n    ```", "```js\n    export async function updatePost(userId, postId, { title, author, contents, tags }) {\n      return await Post.findOneAndUpdate(\n        { _id: postId, author: userId },\n        { $set: { title, author, contents, tags } },\n        { new: true },\n      )\n    }\n    export async function deletePost(userId, postId) {\n      return await Post.deleteOne({ _id: postId, author: userId })\n    }\n    ```", "```js\n        const post = await createPost(req.auth.sub, req.body)\n    ```", "```js\n        const post = await updatePost(req.auth.sub, req.params.id, req.body)\n    ```", "```js\n        const { deletedCount } = await deletePost(req.auth.sub, req.params.id)\n    ```", "```js\n    const res = await fetch('http://localhost:3001/api/v1/posts', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer <TOKEN>'\n        },\n        body: JSON.stringify({ title: 'Test Post' })\n    })\n    console.log(await res.json())\n    ```", "```js\n    $ npm install react-router-dom@6.21.0\n    ```", "```js\n    import { createBrowserRouter, RouterProvider } from 'react-router-dom'\n    ```", "```js\n    const router = createBrowserRouter([\n      {\n        path: '/',\n        element: <Blog />,\n      },\n    ])\n    ```", "```js\n    export function App() {\n      return (\n        <QueryClientProvider client={queryClient}>\n          <RouterProvider router={router} />\n        </QueryClientProvider>\n      )\n    }\n    ```", "```js\n    $ npm run dev\n    ```", "```js\n    import { Blog } from './pages/Blog.jsx'\n    ```", "```js\n    export const signup = async ({ username, password }) => {\n      const res = await fetch(`${import.meta.env.VITE_BACKEND_URL}/user/signup`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ username, password }),\n      })\n      if (!res.ok) throw new Error('failed to sign up')\n      return await res.json()\n    }\n    ```", "```js\n    import { useState } from 'react'\n    import { useMutation } from '@tanstack/react-query'\n    import { useNavigate } from 'react-router-dom'\n    import { signup } from '../api/users.js'\n    export function Signup() {\n    ```", "```js\n      const [username, setUsername] = useState('')\n      const [password, setPassword] = useState('')\n    ```", "```js\n      const navigate = useNavigate()\n    ```", "```js\n      const signupMutation = useMutation({\n        mutationFn: () => signup({ username, password }),\n        onSuccess: () => navigate('/login'),\n        onError: () => alert('failed to sign up!'),\n      })\n    ```", "```js\n      const handleSubmit = (e) => {\n        e.preventDefault()\n        signupMutation.mutate()\n      }\n    ```", "```js\n      return (\n        <form onSubmit={handleSubmit}>\n          <div>\n            <label htmlFor='create-username'>Username: </label>\n            <input\n              type='text'\n              name='create-username'\n              id='create-username'\n              value={username}\n              onChange={(e) => setUsername(e.target.value)}\n            />\n          </div>\n          <br />\n          <div>\n            <label htmlFor='create-password'>Password: </label>\n            <input\n              type='password'\n              name='create-password'\n              id='create-password'\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n            />\n          </div>\n          <br />\n          <input\n            type='submit'\n            value={signupMutation.isPending ? 'Signing up...' : 'Sign Up'}\n            disabled={!username || !password || signupMutation.isPending}\n          />\n        </form>\n      )\n    }\n    ```", "```js\n    import { Signup } from './pages/Signup.jsx'\n    ```", "```js\n    const router = createBrowserRouter([\n      {\n        path: '/',\n        element: <Blog />,\n      },\n      {\n        path: '/signup',\n        element: <Signup />,\n      },\n    ])\n    ```", "```js\n    import { Link } from 'react-router-dom'\n    ```", "```js\n    export function Header() {\n      return (\n        <div>\n          <Link to='/signup'>Sign Up</Link>\n        </div>\n      )\n    }\n    ```", "```js\n    import { Header } from '../components/Header.jsx'\n    ```", "```js\n      return (\n        <div style={{ padding: 8 }}>\n          <Header />\n          <br />\n          <hr />\n          <br />\n          <CreatePost />\n    ```", "```js\n    import { useNavigate, Link } from 'react-router-dom'\n    ```", "```js\n      return (\n        <form onSubmit={handleSubmit}>\n          <Link to='/'>Back to main page</Link>\n          <hr />\n          <br />\n    ```", "```js\n    import { createContext, useState, useContext } from 'react'\n    import PropTypes from 'prop-types'\n    ```", "```js\n    export const AuthContext = createContext({\n      token: null,\n      setToken: () => {},\n    })\n    ```", "```js\n    export const AuthContextProvider = ({ children }) => {\n      const [token, setToken] = useState(null)\n      return (\n        <AuthContext.Provider value={{ token, setToken }}>\n          {children}\n        </AuthContext.Provider>\n      )\n    }\n    AuthContextProvider.propTypes = {\n      children: PropTypes.element.isRequired,\n    }\n    ```", "```js\n    export function useAuth() {\n      const { token, setToken } = useContext(AuthContext)\n      return [token, setToken]\n    }\n    ```", "```js\n    import { AuthContextProvider } from './contexts/AuthContext.jsx'\n    ```", "```js\n          <AuthContextProvider>\n            <RouterProvider router={router} />\n          </AuthContextProvider>\n    ```", "```js\n    export const login = async ({ username, password }) => {\n      const res = await fetch(`${import.meta.env.VITE_BACKEND_URL}/user/login`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ username, password }),\n      })\n      if (!res.ok) throw new Error('failed to login')\n      return await res.json()\n    }\n    ```", "```js\n    import { login } from '../api/users.js'\n    import { useAuth } from '../contexts/AuthContext.jsx'\n    export function Login() {\n    ```", "```js\n      const [, setToken] = useAuth()\n      const loginMutation = useMutation({\n        mutationFn: () => login({ username, password }),\n        onSuccess: (data) => {\n          setToken(data.token)\n          navigate('/')\n        },\n        onError: () => alert('failed to login!'),\n      })\n      const handleSubmit = (e) => {\n        e.preventDefault()\n        loginMutation.mutate()\n      }\n    ```", "```js\n          <input\n            type='submit'\n            value={loginMutation.isPending ? 'Logging in...' : 'Log In'}\n            disabled={!username || !password || loginMutation.isPending}\n          />\n    ```", "```js\n    import { Login } from './pages/Login.jsx'\n    ```", "```js\n      {\n        path: '/login',\n        element: <Login />,\n      },\n    ```", "```js\n    $ npm install jwt-decode@4.0.0\n    ```", "```js\n    import { jwtDecode } from 'jwt-decode'\n    import { useAuth } from '../contexts/AuthContext.jsx'\n    ```", "```js\n    export function Header() {\n      const [token, setToken] = useAuth()\n    ```", "```js\n      if (token) {\n        const { sub } = jwtDecode(token)\n        return (\n          <div>\n            Logged in as <b>{sub}</b>\n    ```", "```js\n            <br />\n            <button onClick={() => setToken(null)}>Logout</button>\n          </div>\n        )\n      }\n    ```", "```js\n      return (\n        <div>\n          <Link to='/login'>Log In</Link> | <Link to='/signup'>Sign Up</Link>\n        </div>\n      )\n    ```", "```js\n    export async function getUserInfoById(userId) {\n      try {\n        const user = await User.findById(userId)\n        if (!user) return { username: userId }\n        return { username: user.username }\n      } catch (err) {\n        return { username: userId }\n      }\n    }\n    ```", "```js\n    import { createUser, loginUser, getUserInfoById } from '../services/users.js'\n    ```", "```js\n      app.get('/api/v1/users/:id', async (req, res) => {\n        const userInfo = await getUserInfoById(req.params.id)\n        return res.status(200).send(userInfo)\n      })\n    ```", "```js\n    import { User } from '../db/models/user.js'\n    ```", "```js\n    export async function listPostsByAuthor(authorUsername, options) {\n      const user = await User.findOne({ username: authorUsername })\n      if (!user) return []\n      return await listPosts({ author: user._id }, options)\n    }\n    ```", "```js\n    export const getUserInfo = async (id) => {\n      const res = await fetch(`${import.meta.env.VITE_BACKEND_URL}/users/${id}`, {\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' },\n      })\n      return await res.json()\n    }\n    ```", "```js\n    import { useQuery } from '@tanstack/react-query'\n    import PropTypes from 'prop-types'\n    import { getUserInfo } from '../api/users.js'\n    ```", "```js\n    export function User({ id }) {\n      const userInfoQuery = useQuery({\n        queryKey: ['users', id],\n        queryFn: () => getUserInfo(id),\n      })\n      const userInfo = userInfoQuery.data ?? {}\n    ```", "```js\n      return <strong>{userInfo?.username ?? id}</strong>\n    }\n    ```", "```js\n    User.propTypes = {\n      id: PropTypes.string.isRequired,\n    }\n    ```", "```js\n    import { User } from './User.jsx'\n    ```", "```js\n            Logged in as <User id={sub} />\n    ```", "```js\n    import { User } from './User.jsx'\n    ```", "```js\n              Written by <User id={author} />\n    ```", "```js\n    export const createPost = async (token, post) => {\n      const res = await fetch(`${import.meta.env.VITE_BACKEND_URL}/posts`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n         Authorization: `Bearer ${token}`,\n        },\n        body: JSON.stringify(post),\n      })\n      return await res.json()\n    }\n    ```", "```js\n    import { useAuth } from '../contexts/AuthContext.jsx'\n    ```", "```js\n    export function CreatePost() {\n      const [token] = useAuth()\n    ```", "```js\n      const [author, setAuthor] = useState('')\n    ```", "```js\n         mutationFn: () => createPost(token, { title, author, contents }),\n    ```", "```js\n      if (!token) return <div>Please log in to create new posts.</div>\n      return (\n        <form onSubmit={handleSubmit}>\n    ```", "```js\n          <br />\n          <div>\n            <label htmlFor='create-author'>Author: </label>\n            <input\n              type='text'\n              name='create-author'\n              id='create-author'\n              value={author}\n              onChange={(e) => setAuthor(e.target.value)}\n            />\n          </div>\n    ```"]