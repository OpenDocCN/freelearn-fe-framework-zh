- en: Chapter 8. Mock Object Pattern
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 8 章。模拟对象模式
- en: In this chapter we will showcase the Mock Object Pattern, a pattern to facilitate
    the development of applications without actually being part of the final implementation.
    We will learn how to design, create and use this industry-standard design pattern
    in order to coordinate and complete the development of multi-part jQuery applications
    faster. We will analyze the characteristics that a proper Mock Object should have
    and understand how they can be used as representative use cases and even as test
    cases for our code.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，我们将展示模拟对象模式，这是一种促进应用程序开发的模式，而不实际成为最终实现的一部分。我们将学习如何设计、创建和使用这种行业标准的设计模式，以便更快地协调和完成多部分
    jQuery 应用程序的开发。我们将分析一个合适的模拟对象应该具有的特征，并了解它们如何被用作代表性用例，甚至是我们代码的测试用例。
- en: We will see how good application architecture makes it easier for us to use
    Mock Objects & Services by matching individual parts of the application, and also
    realize the benefits of using them during development. By the end of this chapter,
    we will be able to create Mock Objects & Services to accelerate the implementation
    of our application and also to get a sense of the overall functionality long before
    all of its parts are completed.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到良好的应用程序架构如何使我们更容易使用模拟对象和服务，通过匹配应用程序的各个部分，并且意识到在开发过程中使用它们的好处。到本章结束时，我们将能够创建模拟对象和服务，以加速我们应用程序的实现，并且在所有部分完成之前就对其整体功能有所了解。
- en: 'In this chapter, we shall:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将：
- en: Introduce the Mock Object and Mock Service Patterns
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍模拟对象和模拟服务模式
- en: Analyze the characteristics that Mock Objects & Services should have
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分析模拟对象和服务应该具有的特征
- en: Understand why they fit better with applications with good architecture
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解为什么它们与具有良好架构的应用程序更匹配
- en: Learn how to use them in jQuery applications as a way to drive the development
    and accelerate it
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何在 jQuery 应用程序中使用它们作为推动开发并加速开发的一种方式
- en: Introducing the Mock Object Pattern
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍模拟对象模式
- en: The key concept of the Mock Object Pattern is in creating and using a dummy
    object that simulates the behavior of a more complex object that is (or will be)
    part of an implementation. The Mock Object should have the same API as the actual
    (or real) object, return similar results using the same data structures, and also
    operate in a similar manner with regards to how its methods alter its exposed
    state (the properties).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟对象模式的关键概念在于创建和使用一个模拟行为更复杂的对象的虚拟对象，该对象是（或将成为）实现的一部分。模拟对象应该具有与实际（或真实）对象相同的 API，使用相同的数据结构返回类似的结果，并且在其方法如何改变其公开状态（属性）方面操作方式相似。
- en: Mock Objects are usually created during the early development phases of an application.
    Their primary use case is to enable us to proceed with the development of a Module,
    even if it depends on others that have not yet been implemented. Mock Objects
    can also be described as prototypes of the data exchanged between the different
    parts of the implementation, acting like contracts between the developers and
    easing the parallel development of interdependent modules.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟对象通常在应用程序的早期开发阶段创建。它们的主要用途是使我们能够继续开发一个模块，即使它依赖于尚未实现的其他模块。模拟对象也可以被描述为实现之间交换的数据的原型，起着开发人员之间的契约作用，并且促进了相互依赖模块的并行开发。
- en: Tip
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: In the same way that the principles of the Module Pattern decouple the implementations
    of the different parts of an application, creating and using Mock Objects and
    Mock Services decouples their development.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 就像模块模式的原则解耦了应用程序不同部分的实现一样，创建和使用模拟对象和模拟服务也解耦了它们的开发。
- en: Creating Mock Objects for every Module before starting their implementation
    clearly defines the data structures and APIs that will be used by the application,
    removing any misconceptions and enabling us to detect insufficiencies in the proposed
    APIs.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始实施每个模块之前为其创建模拟对象清晰地定义了应用程序将使用的数据结构和 API，消除了任何误解，并使我们能够检测到所提供的 API 中的不足。
- en: Tip
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Defining the data structures that are required to describe a problem before
    starting the actual implementation allows us to focus on the needs of the application
    and get an idea of its overall complexity and structure.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始实际实现之前定义描述问题所需的数据结构，使我们能够专注于应用程序的需求，并了解其整体复杂性和结构。
- en: You can always test any part of your implementation after any code change by
    using the Mock Objects that were created for the original implementation. You
    can be sure that the original use case still works by using the Mock Objects on
    the modified methods. This is very useful when the modified implementation is
    a part of a use case involving several stages.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用为原始实现创建的 Mock 对象，您可以在任何代码更改后始终测试实现的任何部分。通过在修改后的方法上使用 Mock 对象，您可以确保原始用例仍然有效。当修改后的实现是涉及多阶段的用例的一部分时，这非常有用。
- en: Mock Objects are especially useful for tracing errors if the implementation
    of a Module has changed and caused the rest of the application to misbehave. By
    using the existing Mock Objects, we can easily identify the Module that diverged
    from the original specification. Moreover, the same Mock Objects can be used as
    the basis for high quality test cases since they often contain more realistic
    sample data, something especially useful if your team is following a Test Driven
    Development (TDD) paradigm.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果模块的实现发生变化并导致应用程序其他部分表现异常，Mock 对象尤其有用，可以用于追踪错误。通过使用现有的 Mock 对象，我们可以轻松识别与原始规范不符的模块。此外，相同的
    Mock 对象可用作高质量测试用例的基础，因为它们通常包含更真实的样本数据，特别适用于团队遵循测试驱动开发（TDD）范例。
- en: Note
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'In Test Driven Development (TDD), the developer firstly defines a test case
    for a use case or a new feature that needs to be added and then proceeds with
    its implementation by trying to satisfy the created test case. For more information,
    you can visit: [https://www.packtpub.com/books/content/overview-tdd](https://www.packtpub.com/books/content/overview-tdd).'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试驱动开发（TDD）中，开发人员首先为需要添加的用例或新功能定义测试用例，然后通过尝试满足所创建的测试用例来实施。更多信息，请访问：[https://www.packtpub.com/books/content/overview-tdd](https://www.packtpub.com/books/content/overview-tdd)。
- en: 'The Mock Object Pattern is commonly used among frontend web developers to decouple
    the client-side development from the web services that the backend will expose.
    That has led to witty comments such as:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Mock 对象模式通常被前端网络开发人员用于将客户端开发与后端将公开的网络服务解耦。因此，导致了一些风趣的评论，比如：
- en: '"The web service will always be late & change suddenly, so use a Mock instead."'
  id: totrans-21
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “网络服务总是拖延并突然改变，所以使用 Mock 代替。”
- en: 'Summarizing all of this, the main reasons to create Mock Objects and Services
    include:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 总结所有这些，创建 Mock 对象和服务的主要原因包括：
- en: The actual object or service is not yet implemented.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实际对象或服务尚未实现。
- en: The actual object is difficult to set up for a specific use case.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实际对象难以为特定用例设置。
- en: We need to emulate a rare or non-deterministic behavior.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们需要模拟罕见或非确定性的行为。
- en: The actual object behaves in a way that is hard to reproduce, such as network
    errors or UI events.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实际对象的行为难以复现，比如网络错误或 UI 事件。
- en: Using Mock Objects in jQuery applications
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 jQuery 应用程序中使用 Mock 对象
- en: 'In order to demonstrate how the Mock Object Pattern can be used during the
    development of a multi-part application, we will extend the dashboard example,
    as we saw in [Chapter 4](part0026_split_000.html#OPEK1-e8d3cd3d052d4ee0b4673af57a64ddef
    "Chapter 4. Divide and Conquer with the Module Pattern"), *Divide and Conquer
    with the Module Pattern*, in order to present thumbnails of YouTube videos from
    web developing conferences. The video references are grouped into four predefined
    categories and the related buttons will be displayed based on the current category
    selection, as illustrated below:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 为了展示 Mock 对象模式在开发多部分应用程序时的用法，我们将扩展仪表板示例，如我们在[第 4 章](part0026_split_000.html#OPEK1-e8d3cd3d052d4ee0b4673af57a64ddef
    "第 4 章. 用模块模式进行分而治之") *用模块模式进行分而治之*中看到的，以显示来自网络开发会议的 YouTube 视频的缩略图。视频引用被分为四个预定义类别，并根据当前的类别选择显示相关按钮，如下所示：
- en: '![Using Mock Objects in jQuery applications](img/00031.jpeg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![在 jQuery 应用程序中使用 Mock 对象](img/00031.jpeg)'
- en: 'The changes that need to be introduced to the HTML and the CSS are minimal.
    The only extra CSS that is needed for the above implementation, when compared
    to the existing implementation from [Chapter 4](part0026_split_000.html#OPEK1-e8d3cd3d052d4ee0b4673af57a64ddef
    "Chapter 4. Divide and Conquer with the Module Pattern"), *Divide and Conquer
    with the Module Pattern*, is related to the width of the thumbnails:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 需要引入到 HTML 和 CSS 中的更改是最小的。与[第 4 章](part0026_split_000.html#OPEK1-e8d3cd3d052d4ee0b4673af57a64ddef
    "第 4 章. 用模块模式进行分而治之") *用模块模式进行分而治之*现有实现相比，上述实现唯一需要额外的 CSS 是与缩略图宽度相关的：
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The change in the HTML is intended to organize the `<button>` elements of each
    category. This change will make our implementation more straightforward since
    the categories and their items are no longer statically defined in the HTML but
    are instead created dynamically, driven by the available data.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: HTML中的变化旨在组织每个类别的`<button>`元素。这个变化将使我们的实现更加直观，因为类别及其项不再在HTML中静态定义，而是动态创建，由可用数据驱动。
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the above piece of HTML, the `<div>` element with the `dashboardCategoriesList`
    CSS class, will be used as a container for the grouped buttons of the different
    video categories. After covering the UI elements, let's now move on to the analysis
    of the JavaScript implementation.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的HTML片段中，带有`dashboardCategoriesList` CSS类的`<div>`元素将被用作不同视频类别的分组按钮的容器。在涵盖了UI元素后，让我们现在转向JavaScript实现的分析。
- en: Defining the actual service requirements
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义实际服务需求
- en: The video references to be displayed in our dashboard could be retrieved from
    various sources. For example, you could make a direct call to YouTube's client-side
    API or an AJAX call to a backend web service . In all of the above cases, it is
    considered a good practice to abstract this data retrieval mechanism into a separate
    module, following the code structuring recommendations of the previous chapters.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的仪表板中显示的视频引用可以从各种来源检索到。例如，您可以直接调用YouTube的客户端API或通过后端Web服务进行AJAX调用。在所有上述情况下，将此数据检索机制抽象为一个单独的模块被认为是一种良好的实践，遵循前几章的代码结构建议。
- en: For this reason, we need to add an extra module to the existing implementation.
    This will be a service, responsible for providing the methods that will allow
    us to retrieve the most relevant videos from each category and load information
    for each video individually. This will be achieved by using the `searchVideos()`
    and `getVideo()` methods respectively.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这个原因，我们需要向现有实现添加一个额外的模块。这将是一个服务，负责提供允许我们从每个类别中检索最相关视频并单独加载每个视频信息的方法。这将通过分别使用`searchVideos()`和`getVideo()`方法来实现。
- en: 'As we have already said, one of the most important phases of each implementation,
    especially in case of parallel development, is the analysis and definition of
    the data structures to be used. Since our dashboard will be using the YouTube
    API, we need to create some sample data which follow its data structure rules.
    After inspecting the API, we end up with a sub-set of the fields that are required
    for our dashboard, and can proceed to create a JSON object with mock data to demonstrate
    the used data structure:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们已经提到的，每个实现的一个最重要的阶段，尤其是在并行开发的情况下，是对要使用的数据结构进行分析和定义。由于我们的仪表板将使用YouTube API，我们需要创建一些遵循其数据结构规则的示例数据。在检查了API之后，我们得到了一组需要用于我们的仪表板的字段的子集，并且可以继续创建一个具有模拟数据的JSON对象来演示所使用的数据结构：
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'For more information about the YouTube API, you can visit: [https://developers.google.com/youtube/v3/getting-started](https://developers.google.com/youtube/v3/getting-started).'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 有关YouTube API的更多信息，请访问：[https://developers.google.com/youtube/v3/getting-started](https://developers.google.com/youtube/v3/getting-started)。
- en: 'Our service provides two core methods, one for searching for videos in a specified
    category and one for retrieving information about a specific video. The structure
    of the sample object is used for the search method to retrieve a set of relevant
    items, while the method for retrieving information for a single video uses the
    data structure of each individual item. The resulting implementation for the video
    information retrieval is in a separate module named `videoService`, which will
    be available on the `dashboard.videoService` namespace, and our HTML would contain
    a `<script>` reference like the following:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的服务提供两种核心方法，一种用于在指定类别中搜索视频，另一种用于检索特定视频的信息。用于搜索方法的示例对象结构用于检索一组相关项目，而用于检索单个视频信息的方法使用每个单独项目的数据结构。生成的视频信息检索实现位于名为`videoService`的单独模块中，该模块将在`dashboard.videoService`命名空间上可用，我们的HTML将包含类似以下的`<script>`引用：
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Implementing a Mock Service
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现模拟服务
- en: Changing the `<script>` references of the service implementation with the Mock
    Service and vice versa should leave us with a working application, helping us
    progress and test the rest of the implementation before the actual implementation
    of the video service is finished. As a result, the Mock Service needs to use the
    same `dashboard.videoService` namespace, but its implementation should be in a
    differently named file such as `dashboard.videoservicemock.js` that simply adds
    the "mock" suffix.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 改变服务实现的`<script>`引用与模拟服务之间的相互转换应该使我们得到一个可工作的应用程序，帮助我们在实际视频服务实现完成之前进展和测试其他实现。因此，模拟服务需要使用相同的`dashboard.videoService`命名空间，但其实现应该在一个名为`dashboard.videoservicemock.js`的不同命名的文件中，它简单地添加了“mock”后缀。
- en: As we have already mentioned, it is a good practice to place all our mock data
    under a single variable. Moreover, if there are a lot of Mocked Objects, it is
    common to place them in a different file altogether, with a nested namespace.
    In our case, the file with the mock data is named `dashboard.videoservicemock.mockdata.js`
    and its namespace is `dashboard.videoService.mockData`, while exposing the `searches`
    and `videos` properties that will be used by the two core methods of our Mock
    Service.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们先前提到的，将所有的模拟数据放在一个单独的变量下是一个很好的做法。此外，如果有很多模拟对象，通常会将它们放在一个完全不同的文件中，带有嵌套的命名空间。在我们的案例中，包含模拟数据的文件名为`dashboard.videoservicemock.mockdata.js`，其命名空间为`dashboard.videoService.mockData`，同时公开了`searches`和`videos`属性，这些属性将被我们的模拟服务的两个核心方法使用。
- en: 'Even though the implementations of Mock Services should be simple, they have
    their own complexity since they need to provide the same methods as the target
    implementations, accept the same arguments, and look as if they are operating
    in the exact same way. For example, in our case, the video retrieval service needs
    to be asynchronous and its implementation needs to return Promises:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 即使模拟服务的实现应该简单，它们也有自己的复杂性，因为它们需要提供与目标实现相同的方法，接受相同的参数，并且看起来好像它们是以完全相同的方式操作的。例如，在我们的案例中，视频检索服务需要是异步的，其实现需要返回Promises：
- en: '[PRE4]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As shown in the Mock Service implementation above, the `searchVideos()` and
    `getVideo()` methods, are iterating over the arrays with the mock data and return
    a Promise that is either Resolved with an appropriate Mock Object or Rejected
    when such an object is not found. Finally, you can see below the code for the
    sub-module containing the Mock Objects, following the data structure that we described
    earlier. Note that we store the Mock Objects of all categories in the `allVideos`
    property in order to make searching with the mock `getVideo()` method simpler.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如上面模拟服务的实现所示，`searchVideos()`和`getVideo()`方法正在遍历带有模拟数据的数组，并返回一个Promise，该Promise在找到合适的模拟对象时被解析，或者在未找到这样的对象时被拒绝。最后，你可以在下面看到包含模拟对象的子模块的代码，遵循了我们先前描述的数据结构。注意，我们将所有类别的模拟对象都存储在`allVideos`属性中，以便通过模拟的`getVideo()`方法更简单地进行搜索。
- en: '[PRE5]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Experimenting with the implementation of some Mock Services will get you familiar
    with their common implementation patterns in a very short period of time. Beyond
    that, you will be able to easily create Mock Objects and Services, helping you
    design the APIs of your applications, try them out by using the mocks and finally
    settle on the best matching methods and data structures for each use case.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 通过对一些模拟服务实现的实验，你将在很短的时间内熟悉它们的常见实现模式。除此之外，你将能够轻松地创建模拟对象和服务，帮助你设计应用程序的API，通过使用模拟测试它们，最终确定每个用例的最佳匹配方法和数据结构。
- en: Tip
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Using the jQuery Mockjax library**'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用jQuery Mockjax库**'
- en: The Mockjax jQuery Plugin library (available at [https://github.com/jakerella/jquery-mockjax](https://github.com/jakerella/jquery-mockjax))
    focuses on providing a simple way of mocking or simulating AJAX requests and responses.
    This reduces the code needed to fully implement your own Mock Services, if all
    that you need is to intercept an AJAX request to a web service and return a Mock
    Object instead.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery Mockjax插件库（可在[https://github.com/jakerella/jquery-mockjax](https://github.com/jakerella/jquery-mockjax)）专注于提供一种简单的方法来模拟或模拟AJAX请求和响应。如果你所需要的只是拦截对Web服务的AJAX请求并返回模拟对象，那么这将减少你完全实现自己的模拟服务所需的代码量。
- en: Using the Mock Service
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用模拟服务
- en: 'In order to add the functionality that we described earlier to the existing
    dashboard implementation, we need to introduce some changes to the `categories`
    and the `informationBox` modules, adding the code that will consume the methods
    of our service. As a representative example of using the newly created Mock Service,
    let''s take a look at the implementation of the `openNew()` method, in the `informationBox`
    module:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 为了向现有的仪表板实现添加我们之前描述的功能，我们需要对`categories`和`informationBox`模块进行一些更改，添加将使用我们服务的方法的代码。作为使用新创建的
    Mock 服务的典型示例，让我们看一下`informationBox`模块中`openNew()`方法的实现：
- en: '[PRE6]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This method initially opens a new information box with a **Loading...** label
    as its content and uses the `dashboard.videoService.getVideo()` method to retrieve
    the details of the requested video asynchronously. Finally, when the returned
    Promise gets resolved, it replaces the **Loading...** label with an anchor containing
    the thumbnail of the video.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法首先以**加载中...**标签作为其内容打开一个新的信息框，并使用`dashboard.videoService.getVideo()`方法异步检索请求的视频的详细信息。最后，当返回的
    Promise 得到解析时，将**加载中...**标签替换为包含视频缩略图的锚。
- en: Summary
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned how to design, create and use Mock Objects and Mock
    Services in our applications. We analyzed the characteristics that Mock Objects
    should have and understood how they can be used as representative use cases. We
    are now able to use Mock Objects & Services to accelerate the implementation of
    our applications and get a better sense of its overall functionality, long before
    all of its individual parts are completed.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们学习了如何设计、创建和使用我们应用程序中的 Mock 对象和 Mock 服务。我们分析了 Mock 对象应具有的特征，并理解了它们如何作为典型用例来使用。我们现在能够使用
    Mock 对象和服务来加速我们应用程序的实现，并在其所有单个部分完成之前更好地了解其整体功能。
- en: In the next chapter, we will be introduced to client-side templating and learn
    how to generate complex HTML structures in the browser from readable templates
    efficiently. We will get an introduction to `Underscore.js` and `Handlebars.js`,
    analyze their conventions, evaluate their features and find which one better suits
    our taste.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍客户端模板化，并学习如何从可读模板在浏览器中高效生成复杂的 HTML 结构。我们将介绍`Underscore.js`和`Handlebars.js`，分析它们的约定，评估它们的特性，并找出哪一个更适合我们的口味。
