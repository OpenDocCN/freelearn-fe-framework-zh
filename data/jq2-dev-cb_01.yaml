- en: Chapter 1. Document Object Model Manipulation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章. 文档对象模型操作
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Selecting elements
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择元素
- en: Finding and selecting sibling elements
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找和选择兄弟元素
- en: Creating DOM elements
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 DOM 元素
- en: Inserting content into an element
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将内容插入元素中
- en: Modifying the DOM element properties
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改 DOM 元素属性
- en: Adding and removing CSS classes to dynamically change their style
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加和删除 CSS 类以动态更改其样式
- en: Enabling and disabling buttons by changing their properties
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过更改其属性来启用和禁用按钮
- en: Updating an image within a page
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在页面中更新图像
- en: Populating list elements
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 填充列表元素
- en: Understanding pagination
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解分页
- en: Removing DOM elements
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除 DOM 元素
- en: Re-using DOM elements
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重复使用 DOM 元素
- en: Introduction
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: This chapter looks at the fundamental principles of jQuery—finding, selecting,
    and manipulating DOM elements. jQuery makes it easy for JavaScript developers
    to select single or multiple HTML page elements using a variety of methods.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了 jQuery 的基本原理—查找、选择和操作 DOM 元素。jQuery 让 JavaScript 开发人员可以使用各种方法轻松选择单个或多个
    HTML 页面元素。
- en: Once the developer has selected these elements, jQuery provides the ability
    to manipulate each of these elements in order to create a richer user experience
    through attribute modifications such as style, disabled, and class.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦开发人员选择了这些元素，jQuery 提供了操作每个元素的能力，以通过属性修改（如样式、禁用和类）创建更丰富的用户体验。
- en: Selecting elements
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择元素
- en: There are many ways in which you can use jQuery to select DOM elements. We will
    explore the main methods here. For developers familiar with CSS, it is possible
    to use the same syntax when selecting elements with jQuery (that is, `#content`,
    `.content`, and so on).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多种方法可以使用 jQuery 来选择 DOM 元素。我们将在这里探讨主要方法。对于熟悉 CSS 的开发人员，可以在使用 jQuery 选择元素时使用相同的语法（即
    `#content`，`.content` 等）。
- en: Getting ready
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Open a blank HTML document within your text editor or IDE of choice. Ensure
    that you have the latest version of jQuery downloaded and is easily accessible
    for inclusion into this HTML document. When creating new HTML files within this
    chapter, ensure that they are all within the same directory as the jQuery library
    file, making it easy to include into the HTML document.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在您选择的文本编辑器或 IDE 中打开一个空白的 HTML 文档。确保您已经下载了最新版本的 jQuery，并且可以轻松地包含到此 HTML 文档中。在本章中创建新的
    HTML 文件时，请确保它们都位于与 jQuery 库文件相同的目录中，这样就可以轻松地包含到 HTML 文档中。
- en: How to do it…
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'To understand how you can use jQuery to select a variety of DOM elements, perform
    each of the following recipe steps:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解如何使用 jQuery 选择各种 DOM 元素，请执行以下每个配方步骤：
- en: 'Create a web page using the following HTML and JavaScript code:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下 HTML 和 JavaScript 代码创建一个网页：
- en: '[PRE0]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: To select any of these elements, use the jQuery's `$()` function. We can use
    this function in conjunction with an identifier or CSS selector for an element
    we would like to select; for example, its HTML tag `li` and ID `#content` or a
    class `.content`.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '要选择其中任何元素，请使用 jQuery 的 `$()` 函数。我们可以将此函数与要选择的元素的标识符或 CSS 选择器结合使用；例如，其 HTML
    标签 `li` 和 ID `#content` 或类 `.content`。 '
- en: Tip
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从您在 [http://www.packtpub.com](http://www.packtpub.com) 购买的所有 Packt 图书中下载示例代码文件。如果您在其他地方购买了本书，您可以访问
    [http://www.packtpub.com/support](http://www.packtpub.com/support) 并注册，将文件直接通过电子邮件发送给您。
- en: How it works…
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: The simplest method of selecting a DOM element is by its ID. We know that all
    IDs within a HTML document should be unique; therefore, by selecting an element
    with its ID, you will be selecting a single element.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 选择 DOM 元素的最简单方法是通过其 ID。我们知道 HTML 文档中的所有 ID 应该是唯一的；因此，通过使用其 ID 选择元素，您将选择一个单独的元素。
- en: 'In reference to the preceding HTML document, if you wanted to select `<div>`,
    which has an ID `content`, you can use the following jQuery code to select it:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 关于前面的 HTML 文档，如果您想要选择具有 ID `content` 的 `<div>`，则可以使用以下 jQuery 代码来选择它：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This would make the DOM element available within the `content` variable. More
    on what this means is covered later in the chapter.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使 DOM 元素在 `content` 变量中可用。关于这意味着什么的更多内容在本章后面进行讨论。
- en: Note
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Any code within `$(function(){ });` will be automatically executed by jQuery
    when the page is loaded.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在`$(function(){ });`中的任何代码将在页面加载时由jQuery自动执行。
- en: 'We can also select elements in the same way using their class. The code is
    very similar to the preceding example, except that we use the class prefix (`.`)
    instead of the ID prefix (`#`), illustrated as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以以相同的方式通过它们的类选择元素。 代码与前面的示例非常相似，唯一不同的是我们使用类前缀（`.`）而不是ID前缀（`＃`），如下所示：
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Not only can we select elements based on some identifier we specify (that is,
    class or ID), but we can also select elements based on their tag name. If you
    wanted to select all the `li` elements within a page, you would use `$(''li'')`,
    illustrated as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不仅可以根据我们指定的标识符（如类或ID）选择元素，还可以根据它们的标签名称选择元素。 如果您想选择页面中的所有`li`元素，您将使用`$('li')`，如下所示：
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The preceding example uses the jQuery selector to select all the list elements
    within the page. To demonstrate that `listelements` now contains multiple elements,
    we loop through these and output some information to the console.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的示例使用jQuery选择器来选择页面中的所有列表元素。 为了证明`listelements`现在包含多个元素，我们遍历这些元素，并在控制台输出一些信息。
- en: Note
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '`.each()` is a jQuery function. Learn more about its uses in [Chapter 3](ch03.html
    "Chapter 3. Loading and Manipulating Dynamic Content with AJAX and JSON"), *Loading
    and Manipulating Dynamic Content with AJAX and JSON*.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`.each()` 是一个 jQuery 函数。 在[第3章](ch03.html "第3章。使用AJAX和JSON加载和操作动态内容") *使用AJAX和JSON加载和操作动态内容*中学习更多关于它的用法。'
- en: 'The console output for the preceding example is as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 前面示例的控制台输出如下：
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can access the JavaScript console in various ways depending on your choice
    of browser:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以根据所选浏览器的不同方式来访问JavaScript控制台：
- en: '**Chrome**: *Ctrl* + *Shift* + *J* (**Mac**: *command* + *option* + *J*)'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Chrome**：*Ctrl* + *Shift* + *J*（**Mac**：*command* + *option* + *J*）'
- en: '**Internet Explorer**: *F12*'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**互联网浏览器**：*F12*'
- en: '**Firefox**: *Ctrl* + *Shift* + *K*'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Firefox**：*Ctrl* + *Shift* + *K*'
- en: There's more…
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容…
- en: It is also possible to select elements based on other properties such as their
    `rel` or `disabled` attributes.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以根据其他属性（如`rel`或`disabled`属性）选择元素。
- en: 'The following code shows us how we can select an anchor element that has a
    `rel` attribute of `nofollow`:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码向我们展示了如何选择具有`rel`属性为`nofollow`的锚元素：
- en: '[PRE5]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: See also
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '*Finding and selecting sibling elements*'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*查找和选择兄弟元素*'
- en: Finding and selecting sibling elements
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查找和选择兄弟元素
- en: You may not always know the specific element that you need to select. You may
    only know its parent, and therefore, you will need to search through the elements
    within the parent in order to find the specific element that you are looking for.
    This recipe will show you how to find elements through their parents in various
    ways.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能并不总是知道需要选择的具体元素。 您可能只知道其父级，因此，您将需要搜索父级中的元素，以找到您要查找的特定元素。 本示例将向您展示不同的方式通过它们的父级查找元素。
- en: Getting ready
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Open your text editor or IDE with the latest version of jQuery, ready to be
    included into the HTML page that you will create as part of this recipe.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 打开您的文本编辑器或IDE，其中包含最新版本的jQuery，并准备被包含在您将作为本示例的一部分创建的HTML页面中。
- en: How to do it…
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'To learn the various ways in which jQuery can help you to search for DOM elements
    based on a parent element, perform each of the following steps:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解jQuery可以帮助您根据父元素搜索DOM元素的各种方式，请执行以下每个步骤：
- en: 'Create a web page with the following HTML and JavaScript code:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建包含以下HTML和JavaScript代码的网页：
- en: '[PRE6]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This code uses multiple class names in the same way as you would use them with
    CSS to select child elements from HTML. Alternatively, you can use jQuery's `find()`
    function on a parent element to search within.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这段代码使用了多个类名，就像在CSS中选择HTML子元素一样。 或者，您可以在父元素上使用jQuery的`find()`函数进行搜索。
- en: How it works…
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: The simplest way to select a child element based on its parent is by using the
    same selectors as you would in CSS (that is, `.classname` `.anotherclass`). Having
    said this, you do not always know the exact location of the sibling element you
    are looking for. If this is the case, we can use the useful jQuery's `find()`
    function. jQuery's `find()` function will search within the specified parent element
    for the sibling element that you are looking for.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 选择子元素最简单的方法是使用与 CSS 中相同的选择器（即 `.classname` `.anotherclass`）。 需要注意的是，你不总是知道要查找的同级元素的确切位置。
    如果是这种情况，我们可以使用有用的 jQuery 的 `find()` 函数。 jQuery 的 `find()` 函数将在指定的父元素内查找你要查找的同级元素。
- en: 'Based on the HTML within the *How to do it…* section, the following JavaScript
    illustrates how you can access a child element directly in the same manner as
    you would in CSS:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 基于*“如何做”*部分内的 HTML，以下 JavaScript 演示了如何直接访问子元素，方法就像在 CSS 中那样：
- en: '[PRE7]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This would make the DOM element available within the `content` variable. More
    on what this means is covered later in the chapter.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使 DOM 元素在 `content` 变量内可用。 更多关于这个意思的内容将在本章后面讨论。
- en: 'To find a child element without knowing its exact location, we can use the
    following JavaScript to locate the anchor within the `<div class="grandchild">`
    element:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 要查找不知道确切位置的子元素，我们可以使用以下 JavaScript 来定位 `<div class="grandchild">` 元素内的锚点：
- en: '[PRE8]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Note that you only need to specify the parent selector and the element you are
    looking for. The `find()` method simply traverses the DOM based on the specified
    parent element until it either finds the element you are looking for or runs out
    of elements to check against. You can use ID and class names within the `find()`
    method as well as HTML notations.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，你只需指定父选择器和要查找的元素。`find()` 方法简单地基于指定的父元素遍历 DOM，直到找到你要查找的元素或没有元素可以检查为止。 你也可以在
    `find()` 方法中使用 ID 和类名以及 HTML 标记。
- en: There's more…
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: You can also use CSS3 selectors such as `:first-child` and `:last-child` within
    `$()` to help you select the required DOM element.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以在 `$()` 内使用 CSS3 选择器，如 `:first-child` 和 `:last-child` 来帮助你选择所需的 DOM 元素。
- en: See also
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '*Selecting elements*'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*选择元素*'
- en: Creating DOM elements
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 DOM 元素
- en: To create rich and interactive user interfaces, we need to be able to dynamically
    add DOM elements to a web page. Elements may need to be added to a web page based
    on user interaction or another event such as page load.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建丰富且交互式的用户界面，我们需要能够动态向网页添加 DOM 元素。 元素可能需要基于用户交互或其他事件（如页面加载）而添加到网页。
- en: Getting ready
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, you are going to need another blank HTML file. Create a new
    HTML file named `recipe-3.html` within the same directory as the one used for
    the previous recipe's files.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个步骤，你需要另一个空白的 HTML 文件。 在与前一个食谱文件相同的目录内创建一个名为 `recipe-3.html` 的新 HTML 文件。
- en: How to do it…
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Learn how to create DOM elements with jQuery by performing the following steps:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 学习如何通过以下步骤使用 jQuery 创建 DOM 元素：
- en: 'Add the following HTML code to your `recipe-3.html` file in order to create
    a basic HTML page with an unordered list and include the jQuery library:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下 HTML 代码添加到你的 `recipe-3.html` 文件中，以创建一个带有无序列表并包含 jQuery 库的基本 HTML 页面：
- en: '[PRE9]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Add the following JavaScript within the script tags in the head of the HTML
    document. The following JavaScript code will add two buttons to the DOM after
    the `#myList` element utilizes jQuery''s `after()` and `insertAfter()` functions:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '将以下 JavaScript 添加到 HTML 文档头部的脚本标签内。 以下 JavaScript 代码将使用 jQuery 的 `after()`
    和 `insertAfter()` 函数在 `#myList` 元素之后向 DOM 添加两个按钮： '
- en: '[PRE10]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: How it works…
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: To dynamically add DOM elements to any part of the document, we can use the
    `append()`, `addAfter()`, `after()`, `addBefore()`, and `before()`functions of
    jQuery. The functions `after()` and `insertAfter()` essentially perform the same
    action; the difference lies in the order in which the expressions are specified.
    This is the same for `insertBefore()` and `before()`.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 要动态向文档的任何部分添加 DOM 元素，我们可以使用 jQuery 的 `append()`、`addAfter()`、`after()`、`addBefore()`
    和 `before()` 函数。`after()` 和 `insertAfter()` 函数本质上执行相同的操作；不同之处在于指定表达式的顺序。 `insertBefore()`
    和 `before()` 也是一样。
- en: 'Based on the HTML file in the *How to do it...* section, the following JavaScript
    will add two button elements after the unordered list element:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 基于*“如何做”*部分的 HTML 文件，以下 JavaScript 将在无序列表元素之后添加两个按钮元素：
- en: '[PRE11]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Once the preceding JavaScript has been executed, the HTML rendered in the browser
    should be modified as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦执行了前面的 JavaScript，浏览器中呈现的 HTML 将被修改如下：
- en: '[PRE12]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Note that even though the second button was added last, it is first in the HTML.
    This is because we have specified that the button should be inserted after the
    unordered list element. Both `.before()` and `.insertBefore()` jQuery methods
    work exactly in the same way, except that the button elements would be above the
    unordered list element.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，即使第二个按钮是最后添加的，它也是 HTML 中的第一个。这是因为我们已经指定了按钮应该在无序列表元素之后插入。`.before()` 和 `.insertBefore()`
    方法的工作原理完全相同，唯一的区别是按钮元素会位于无序列表元素之上。
- en: 'A common requirement of dynamic web pages and web applications is to be able
    to add new items to a list. This is best achieved using the `.append()` function:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 动态网页和 Web 应用程序的一个常见需求是能够向列表中添加新项目。最佳方法是使用 `.append()` 函数：
- en: '[PRE13]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This JavaScript will add the new list item with the text `List Item 4` to the
    bottom of the `#myList` unordered list element. Alternatively, the `prepend()`
    function could be used to insert the list item at the top of the list.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 此 JavaScript 将向 `#myList` 无序列表元素底部添加带有文本 `List Item 4` 的新列表项。或者，也可以使用 `prepend()`
    函数将列表项插入列表顶部。
- en: There's more…
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: jQuery provides developers with many ways to add, append, insert, and update
    elements into the DOM that could not be demonstrated within a single recipe. Ensure
    that you are aware of the alternatives by reading the jQuery documentation.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 为开发者提供了许多向 DOM 中添加、追加、插入和更新元素的方式，这在单个示例中无法演示完全。通过阅读 jQuery 文档，确保你了解了替代方法。
- en: See also
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '*Inserting content into an element*'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*向元素插入内容*'
- en: '*Removing DOM elements*'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*移除 DOM 元素*'
- en: '*Re-using DOM elements*'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*重用 DOM 元素*'
- en: Inserting content into an element
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向元素插入内容
- en: Interactive and dynamic web applications and websites not only require the web
    developer to be able to create DOM elements but also require the developer to
    be able to add dynamic content. This is easily achievable with another set of
    jQuery functions.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 交互式和动态的 Web 应用程序和网站不仅要求 Web 开发者能够创建 DOM 元素，还要求开发者能够添加动态内容。这可以通过另一组 jQuery 函数轻松实现。
- en: Getting ready
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a blank HTML document named `recipe-4.html`, and ensure that you have
    the latest version of jQuery available to be included within this HTML document.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为 `recipe-4.html` 的空白 HTML 文档，并确保你可以在该 HTML 文档中包含最新版本的 jQuery。
- en: How to do it…
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到…
- en: 'Learn how to dynamically add content into the DOM by performing each of the
    following steps:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 通过执行以下每个步骤学习如何将内容动态添加到 DOM 中：
- en: 'Add the following code to your newly created HTML document, which will create
    a simple HTML web page:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到你新创建的 HTML 文档中，这将创建一个简单的 HTML 网页：
- en: '[PRE14]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Insert the following JavaScript code within the script tags in the document
    head. This code will inject different HTML content and elements into the DOM at
    various points.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文档头部的脚本标签中插入以下 JavaScript 代码。此代码将在各个点将不同的 HTML 内容和元素注入到 DOM 中。
- en: '[PRE15]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: How it works…
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The quickest way to add content to an element is to use the `html()` function.
    By providing this function with a string as an argument, it will replace the selected
    element's current DOM contents with the provided string. If no string is provided,
    this function will return the element's DOM contents formatted as an HTML string.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 向元素添加内容的最快方法是使用 `html()` 函数。通过将字符串作为参数提供给该函数，它将用提供的字符串替换所选元素的当前 DOM 内容。如果没有提供字符串，则该函数将返回元素的
    DOM 内容格式化为 HTML 字符串。
- en: Besides replacing the content of an element, we can also use `append()` and
    `prepend()` to add additional content at the end and at the beginning of the current
    content, respectively. Additionally, we have other functions available such as
    `text()`, which will decode any HTML before it inserts the string within the element.
    The `text()` function is typically used for text areas for this reason.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 除了替换元素的内容之外，我们还可以使用 `append()` 和 `prepend()` 分别在当前内容的末尾和开头添加附加内容。此外，我们还有其他可用的函数，例如
    `text()`，它将在插入元素之前解码任何 HTML。出于这个原因，`text()` 函数通常用于文本区域。
- en: 'Based on the HTML provided in the previous section, we can alter the content
    of the `#container` element using the jQuery functions previously discussed as
    follows:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 基于前一节提供的 HTML，我们可以使用之前讨论过的 jQuery 函数来修改 `#container` 元素的内容，如下所示：
- en: '[PRE16]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'After each of these functions has been executed, the HTML file rendered by
    the browser will be transformed, which is illustrated as follows:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行了这些函数之后，浏览器渲染的 HTML 文件将会被转换，如下所示：
- en: '[PRE17]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: See also
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '*Creating DOM elements*'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建 DOM 元素*'
- en: Modifying the DOM element properties
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改 DOM 元素属性
- en: We can use jQuery to dynamically modify element properties such as class, style,
    and disabled, which means that it is possible to visually alter and change the
    function of a range of HTML elements.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 jQuery 动态修改元素属性，如类、样式和禁用，这意味着可以视觉上改变和改变一系列 HTML 元素的功能。
- en: Getting ready
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Once again, this recipe requires an additional blank HTML document. Create a
    file named `recipe-5.html`, and have it open and ready for editing.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 再次说明，此配方需要额外的空白 HTML 文档。创建一个名为 `recipe-5.html` 的文件，并准备好打开并进行编辑。
- en: How to do it…
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现…
- en: 'Learn how to alter the properties of the DOM element by performing each of
    the following steps:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 学习如何通过执行以下每个步骤来更改 DOM 元素的属性：
- en: 'Add the following HTML code to your blank `recipe-5.html` file in order to
    create a basic HTML page with two types of inputs:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下 HTML 代码添加到你的空白 `recipe-5.html` 文件中，以创建一个带有两种类型输入的基本 HTML 页面：
- en: '[PRE18]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Within the preceding HTML code, add the following JavaScript code inside the
    script tags to disable the input, modify its value, and check the checkbox:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在上述 HTML 代码中，将以下 JavaScript 代码添加到 script 标签内，以禁用输入、修改其值并选中复选框：
- en: '[PRE19]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: How it works…
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: jQuery provides us with a `prop()` function that will either retrieve the specified
    property if no value is specified, or if a value is provided, it will alter the
    specified property on the selected element. This can be used to change property
    values such as `checked` on a checkbox or the `disabled` property on a text input.
    We could use the `prop()` function to alter the value of a text input; however,
    it is preferable to use the `val()` function that is available specifically for
    this task.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 提供了一个 `prop()` 函数，如果没有指定值，则会检索指定的属性，如果提供了值，则会修改所选元素上的指定属性。这可以用来更改诸如复选框上的
    `checked` 或文本输入上的 `disabled` 属性值。我们可以使用 `prop()` 函数来修改文本输入的值；但是，最好使用专门用于此任务的 `val()`
    函数。
- en: 'Typically, this would be done based on a user-triggered event, but to illustrate
    this as simply as possible, the following JavaScript does so on page load:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，这将根据用户触发的事件来完成，但为了尽可能简单地说明这一点，以下 JavaScript 在页面加载时执行此操作：
- en: '[PRE20]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This JavaScript will check each input within the page that is of the type `checkbox`.
    Similarly, we can alter the disabled state of a text input with only a few modifications:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 此 JavaScript 将检查页面中的每个类型为 `checkbox` 的输入。类似地，我们可以仅通过少量修改来更改文本输入的禁用状态：
- en: '[PRE21]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We can also use the `val()` function to add some text to each of these text
    inputs using the following JavaScript:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用 `val()` 函数来使用以下 JavaScript 向每个文本输入添加一些文本：
- en: '[PRE22]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Often, you can chain functions with jQuery. You can achieve the previous two
    actions by using both the functions inline (that is, `$('input[type="text"]').prop('disabled',
    true).val("This is a new Value!");`), and they will be executed in turn.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，你可以使用 jQuery 来链式调用函数。你可以通过内联使用这两个函数（即，`$('input[type="text"]').prop('disabled',
    true).val("This is a new Value!");`）来实现前面两个操作，并且它们会依次执行。
- en: See also
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '*Enabling and disabling buttons by changing their properties*'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*通过更改它们的属性启用和禁用按钮*'
- en: '*Adding and removing CSS classes to dynamically change their style*'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*添加和删除 CSS 类以动态更改它们的样式*'
- en: Adding and removing CSS classes to dynamically change their style
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加和删除 CSS 类以动态更改它们的样式
- en: jQuery comes bundled with class manipulation functions in order to allow developers
    to easily alter the style of any HTML element.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 随附了类操作函数，以便允许开发人员轻松更改任何 HTML 元素的样式。
- en: Getting ready
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'For element style changes to be of any use, we first need to declare some styles
    within an HTML document. The following HTML code has a range of styles and elements
    that we can work with to illustrate this functionality of jQuery:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 要使元素样式更改有用，我们首先需要在 HTML 文档中声明一些样式。以下 HTML 代码具有一系列我们可以使用的样式和元素，以说明 jQuery 的此功能：
- en: '[PRE23]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Within this HTML code, we have three buttons with their own unique IDs. We
    also have a paragraph with an ID. There are three CSS classes defined: `green`,
    `red`, and `yellow`. With jQuery, we can listen for the click of either of these
    buttons and then dynamically apply one of these classes to the paragraph element.'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在此 HTML 代码中，我们有三个具有各自唯一 ID 的按钮。我们还有一个具有 ID 的段落。定义了三个 CSS 类：`green`、`red` 和 `yellow`。通过
    jQuery，我们可以监听其中任一按钮的点击，然后动态地将其中一个类应用到段落元素上。
- en: 'If you save this HTML file and open it within a browser, you should have the
    following web page:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您保存此 HTML 文件并在浏览器中打开它，您应该会看到以下网页：
- en: '![Getting ready](img/0896OS_01_01.jpg)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![准备工作](img/0896OS_01_01.jpg)'
- en: How to do it…
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Add the following JavaScript code within the script tags in the HTML page you
    have just created:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您刚创建的 HTML 页面的脚本标签中添加以下 JavaScript 代码：
- en: '[PRE24]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Opening the HTML document in your browser will now allow you to change the `#sometext`
    paragraph style by selecting either of the three available buttons.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中打开 HTML 文档现在将允许您通过选择三个可用按钮中的任意一个来更改 `#sometext` 段落的样式。
- en: How it works…
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: jQuery allows us to attach a click event handler to any element by using the
    `click()` function. We can then execute a set of code of our choice by passing
    a function as an argument to the `click()` method. To add a class to an element,
    we can use the `addClass()` function and provide the class name as a string argument.
    This function will add the specified class name to the selected element.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 允许我们通过使用 `click()` 函数将点击事件处理程序附加到任何元素。然后，我们可以通过将函数作为参数传递给 `click()` 方法来执行我们选择的一组代码。要向元素添加类，我们可以使用
    `addClass()` 函数，并将类名作为字符串参数提供。此函数将指定的类名添加到所选元素中。
- en: jQuery also provides us with a `removeClass()` function. This allows us to either
    remove a specific class from an element by providing `removeClass()` with a string,
    or when a string is not provided, it will remove all the classes from the selected
    element. We will need to use this in order to prevent multiple classes being added
    to the paragraph element when either of the buttons has been clicked more than
    once.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 还为我们提供了 `removeClass()` 函数。这使我们可以通过向 `removeClass()` 提供一个字符串来从元素中删除特定的类，或者当没有提供字符串时，它将从所选元素中删除所有类。我们将需要使用此功能，以防止当任一按钮被多次点击时多个类被添加到段落元素中。
- en: 'The following screenshot illustrates this web page after the **Yellow** button
    has been clicked:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图展示了点击**黄色**按钮后此网页的情况：
- en: '![How it works…](img/0896OS_01_02.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理…](img/0896OS_01_02.jpg)'
- en: See also
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '*Modifying the DOM element properties*'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*修改 DOM 元素属性*'
- en: '*Enabling and disabling buttons by changing their properties*'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*通过更改其属性来启用和禁用按钮*'
- en: Enabling and disabling buttons by changing their properties
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过更改其属性来启用和禁用按钮
- en: The ability to dynamically enable and disable buttons is particularly useful
    for situations such as saving data to a web server. In order to prevent a user
    from making multiple save requests while the request is being made and the client
    is waiting for a response, you can dynamically disable the save button. Once the
    client has received a response from the web server, you can re-enable the save
    button.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 动态启用和禁用按钮的能力在诸如将数据保存到 Web 服务器之类的情况下特别有用。为了防止用户在请求正在进行并且客户端正在等待响应时进行多次保存请求，您可以动态禁用保存按钮。一旦客户端从
    Web 服务器接收到响应，您可以重新启用保存按钮。
- en: This functionality can also be very effective in simple situations, such as
    enabling the search button when the user has inputted a search term. This makes
    it clear to the user that they cannot search unless a term has been entered.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在简单情况下，例如在用户输入搜索词之后启用搜索按钮，此功能也可能非常有效。这使用户清楚地知道，除非已输入搜索词，否则他们无法搜索。
- en: Getting ready
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a blank HTML document named `recipe-7.html`, and have it open and ready
    for editing.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为 `recipe-7.html` 的空白 HTML 文档，并准备好进行编辑。
- en: How to do it…
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'The following HTML code creates a web page with a search input and a search
    button, which is disabled by default. Add the following code to `recipe-7.html`:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下 HTML 代码创建了一个带有搜索输入和搜索按钮的网页，默认情况下搜索按钮被禁用。将以下代码添加到 `recipe-7.html` 中：
- en: '[PRE25]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Saving and opening this HTML in a browser should provide you with a very simple
    web page having a single input and a disabled button as illustrated in the following
    screenshot:![How to do it…](img/0896OS_01_03.jpg)
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并在浏览器中打开此 HTML 将为您提供一个非常简单的网页，其中只有一个输入和一个已禁用的按钮，如下截图所示：![如何做…](img/0896OS_01_03.jpg)
- en: 'Add the following JavaScript within the script tags in the head section of
    the HTML document created previously:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在先前创建的 HTML 文档的 head 部分的 script 标签中添加以下 JavaScript：
- en: '[PRE26]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Opening this page within a web browser will provide you with an input and a
    disabled search button until you enter some text into the search input. When text
    is entered into the search input and the length of the text is greater than two
    characters, the search button will become available.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在网络浏览器中打开这个页面将会给你一个输入框和一个禁用的搜索按钮，直到你在搜索输入框中输入一些文本。当文本输入到搜索框中，并且文本长度大于两个字符时，搜索按钮将变为可用状态。
- en: How it works…
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: Our aim is to enable the search button once there has been some text inputted
    into the search input by the user. To do this, we need to attach a `.keyup()`
    event handler to the search input. This will allow us to execute some code while
    the user is inputting some text. By providing a function as an argument to the
    `keyup()` function, we can then check the inputted data. If the input data has
    a length of two or more characters (as a search less than three characters would
    be a little ambiguous), we can enable the search button.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目标是一旦用户在搜索输入框中输入了一些文本，就启用搜索按钮。为此，我们需要将 `.keyup()` 事件处理程序附加到搜索输入框上。这将允许我们在用户输入文本时执行一些代码。通过将一个函数作为`keyup()`函数的参数提供，我们可以检查输入的数据。如果输入的数据长度为两个或更多字符（因为少于三个字符的搜索可能会有些模糊），我们可以启用搜索按钮。
- en: 'Using the following JavaScript, we are able to listen for data input, check
    the input length, and depending on this, enable or disable the search button:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下 JavaScript，我们能够监听数据输入，检查输入长度，并根据此来启用或禁用搜索按钮：
- en: '[PRE27]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: First of all, we attach the `keyup` event to the search input using `$('#search-input').keyup();`,
    referencing its ID. Then, within the callback function, we are able to check the
    length of the currently inputted text using `$(this)`, which refers to the element
    to which we have attached the `keyup` event. The `val()` function then gets the
    inputted text, and we can use the `length` property to find its length. Using
    an `if`/`else` statement, we can decide if the search button needs to be enabled
    or disabled.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们使用 `$('#search-input').keyup();` 将`keyup`事件附加到搜索输入框上，引用其 ID。然后，在回调函数中，我们能够使用
    `$(this)` 来检查当前输入文本的长度，它指的是我们附加`keyup`事件的元素。`val()` 函数然后获取输入的文本，我们可以使用 `length`
    属性来获取其长度。使用 `if`/`else` 语句，我们可以决定搜索按钮是否需要启用或禁用。
- en: To enable or disable the search button, we use jQuery's `prop()` function and
    set the disabled property to either `true` or `false`.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用或禁用搜索按钮，我们使用 jQuery 的 `prop()` 函数，并将 disabled 属性设置为 `true` 或 `false`。
- en: See also
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: '*Modifying the DOM element properties*'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*修改 DOM 元素属性*'
- en: '*Adding and removing CSS classes to dynamically change their style*'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*添加和删除 CSS 类以动态更改它们的样式*'
- en: Updating an image within a page
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新页面内的图片
- en: jQuery allows the developer to dynamically change images on a web page. This
    recipe will show you how to do this and also show you how to use a timestamp in
    order to prevent the browser from using a cached image, which can often be a problem
    when swapping images dynamically in this way.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 允许开发者在网页上动态更改图片。这个配方将向你展示如何做到这一点，并且还会向你展示如何使用时间戳来防止浏览器使用缓存的图片，这在动态交换图片时经常会遇到问题。
- en: Getting ready
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, you are going to need four different images. Ensure that you
    have four small images named `black.png`, `red.png`, `blue.png`, and `green.png`
    available.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，你需要四张不同的图片。确保你有四张小图片，分别命名为`black.png`、`red.png`、`blue.png`和`green.png`。
- en: How to do it…
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'To understand how jQuery can be used to change an image, complete each of the
    following steps:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解如何使用 jQuery 来更改图片，完成以下每个步骤：
- en: 'Create a file named `recipe-8.html` within an easily accessible directory,
    and add the following HTML code to this file:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在一个易于访问的目录中创建一个名为`recipe-8.html`的文件，并在其中添加以下 HTML 代码：
- en: '[PRE28]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Within the directory where the `recipe-8.html` file is created, create another
    directory called `images` and within this, add four images given as follows:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在创建`recipe-8.html`文件的目录中，创建另一个名为`images`的目录，在其中添加以下四个图片：
- en: '`black.png`'
  id: totrans-194
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`black.png`'
- en: '`red.png`'
  id: totrans-195
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`red.png`'
- en: '`blue.png`'
  id: totrans-196
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`blue.png`'
- en: '`green.png`'
  id: totrans-197
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`green.png`'
- en: 'Add the following JavaScript within the `<script></script>` tags of `recipe-8.html`:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在`recipe-8.html`的 `<script></script>` 标签中添加以下 JavaScript： '
- en: '[PRE29]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Opening this web page within a browser will allow you to change the source of
    the displayed image from the default `black.png` to another source depending on
    which button is clicked.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中打开此网页将允许您根据点击的按钮来更改显示图像的源，从默认的 `black.png` 更改为另一个源。
- en: How it works…
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何运作…
- en: 'To change the source of an image, we can use jQuery''s `prop()` function and
    specify the new image name for the `src` property. To do this, when either of
    the buttons created using our HTML code are clicked, a click event handler is
    attached for each button using `.click()`, referencing the buttons'' IDs, and
    then within the `click()` callback function,`.prop()` is executed with the appropriate
    image source specified, shown as follows:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改图像的源，我们可以使用 jQuery 的 `prop()` 函数并为 `src` 属性指定新的图像名称。为此，当我们使用我们的 HTML 代码创建的按钮之一被点击时，使用
    `.click()` 为每个按钮附加点击事件处理程序，引用按钮的 ID，然后在 `click()` 回调函数中执行`.prop()` 并指定适当的图像源，如下所示：
- en: '[PRE30]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: There's more...
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: This recipe illustrates the way a jQuery developer can easily change an image's
    source using a very simple example. A more realistic situation where this implementation
    will be used is within a web application where an image can be uploaded, for example,
    when a user chooses their avatar.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例说明了 jQuery 开发人员如何使用一个非常简单的例子轻松更改图像源的方式。在这种实现中更有可能被使用的是在 Web 应用程序中，例如当用户选择他们的头像时可以上传图像的情况。
- en: Traditionally, a user will be presented with a preview of their current avatar
    and then be able to choose an image from their computer to upload. Using AJAX,
    the web page can send this new image to the server; the server can then process
    and save this image and respond to the client web page. The web page, using jQuery's
    `prop()` method, can then update the current preview with the newly uploaded image
    and create a seamless transition without the need for the page to be refreshed
    in order to display the new image.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上，用户将被呈现其当前头像的预览，然后能够从计算机中选择要上传的图像。使用 AJAX，网页可以将这个新图像发送到服务器；然后服务器可以处理并保存这个图像并响应客户端网页。然后，网页可以使用
    jQuery 的 `prop()` 方法更新当前预览与新上传的图像，并创建一个无需刷新页面就能显示新图像的无缝过渡。
- en: A problem occurs when the server uses the same filename for the new image as
    the old one. This is often the case when a user can only have one avatar; for
    the sake of simplicity, the avatar image is then saved using the user's unique
    ID (for example, `123.png`).
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 当服务器使用与旧图像相同的文件名时，就会出现问题。这在用户只能拥有一个头像的情况下经常发生；为了简单起见，头像图像会使用用户的唯一ID保存（例如，`123.png`）。
- en: 'When the server responds to the client with the new image filename, as the
    filename is the same, the browser will think that it is the same image. This may
    cause the browser to use the cached version of the avatar image, which will be
    the old image. To prevent this from happening, we can prepend a timestamp onto
    the image''s filename. This will make the browser treat the image as new and force
    it to load the new image. We can modify the previous JavaScript to achieve the
    following:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 当服务器用新的图像文件名响应客户端时，由于文件名相同，浏览器会认为它是同一图像。这可能会导致浏览器使用头像图像的缓存版本，这将是旧图像。为了防止这种情况发生，我们可以在图像文件名前添加一个时间戳。这将使浏览器将图像视为新图像，并强制它加载新图像。我们可以修改上述
    JavaScript 以实现以下内容：
- en: '[PRE31]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Using JavaScript''s `new Date()` method, we create a new date that will be
    equal to the current date and time equal to the current time in milliseconds.
    We then use `.getTime()` to return a timestamp in milliseconds. When the source
    is updated, it will look as follows:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 JavaScript 的 `new Date()` 方法，我们创建一个新的日期，该日期将等于当前时间并且时间等于当前时间的毫秒数。然后我们使用 `.getTime()`
    返回毫秒级的时间戳。当源被更新时，它将如下所示：
- en: '[PRE32]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: This code will force the browser to reload the image using the newly specified
    source, provided the user does not update their image within the same millisecond
    (practically impossible).
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码将强制浏览器使用新指定的源重新加载图像，前提是用户在同一毫秒内没有更新他们的图像（实际上是不可能的）。
- en: Populating list elements
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 填充列表元素
- en: List elements are commonly used around the Web; they can be used to display
    search results, menus, and navigational items to name a few. Thanks to CSS, they
    no longer need to be boring, and it is possible to style list elements to make
    your data beautiful.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 列表元素在 Web 上经常使用；它们可以用于显示搜索结果、菜单和导航项等。由于 CSS 的存在，它们不再需要单调，可以通过样式化列表元素使您的数据更加美观。
- en: With jQuery, it is possible to populate a list element dynamically. This can
    be done directly from a JavaScript array via an AJAX response, with data from
    a web server or some other source.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 使用jQuery，可以动态填充列表元素。这可以直接从JavaScript数组通过AJAX响应、从Web服务器或其他来源获取的数据中完成。
- en: Getting ready
  id: totrans-216
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a blank HTML document named `recipe-9.html`, and ensure that it is saved
    to a location where the latest version of jQuery can be included.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为`recipe-9.html`的空白HTML文档，并确保它保存在可以包含最新版本jQuery的位置。
- en: How to do it…
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Learn how to dynamically populate a list with jQuery by performing each of
    the following recipes:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 通过执行以下每个步骤，学习如何使用jQuery动态填充列表：
- en: 'In order to demonstrate how you can use jQuery to populate a list element,
    we will create a JavaScript array of objects. Add the following HTML and JavaScript
    code to `recipe-9.html`, which you have just created:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了演示如何使用jQuery填充列表元素，我们将创建一个对象的JavaScript数组。在刚刚创建的`recipe-9.html`中添加以下HTML和JavaScript代码：
- en: '[PRE33]'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Note
  id: totrans-222
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注
- en: At the top of our JavaScript code, we have created an array of objects which
    includes a set of names. We are going to use this array to populate the list element
    `#namelist` within the HTML code.
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在我们的JavaScript代码顶部，我们已经创建了一个包含一组名称的对象数组。我们将使用这个数组来填充HTML代码中的列表元素`#namelist`。
- en: Add the following JavaScript within `$(function(){});`, just under the JavaScript
    array. This JavaScript will use the objects within the JavaScript array we created
    in the *Getting ready* section to populate the list element on our page.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`$(function(){})`中添加以下JavaScript代码，就在JavaScript数组的下面。此JavaScript将使用我们在*准备工作*部分中创建的JavaScript数组中的对象来填充页面上的列表元素。
- en: '[PRE34]'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: How it works…
  id: totrans-226
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: We use jQuery's `$.each()` function to loop through each of the JavaScript objects
    within the `names` array. Then, for each of these objects, we can create a `<li>`
    element and insert the values of the `id`, `firstname`, and `lastname` variables.
    Finally, we can use the jQuery `append()` function to append the list element
    to the end of the unordered list.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用jQuery的`$.each()`函数来循环遍历`names`数组中的每个JavaScript对象。然后，对于这些对象中的每一个，我们可以创建一个`<li>`元素，并插入`id`、`firstname`和`lastname`变量的值。最后，我们可以使用jQuery的`append()`函数将列表元素追加到无序列表的末尾。
- en: 'Within the `$.each()` function, the first parameter is the array we wish to
    iterate through and the second parameter is the function we wish to execute for
    each of the objects within the `names` array. The specified function also has
    two arguments: `index` and `obj`. The `index` argument will contain the current
    array index of the JavaScript object, and the `obj` variable will contain the
    actual JavaScript object. Both these variables are available within the specified
    callback function.'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在`$.each()`函数中，第一个参数是我们希望迭代的数组，第二个参数是我们希望对`names`数组中的每个对象执行的函数。指定的函数也有两个参数：`index`和`obj`。`index`参数将包含JavaScript对象的当前数组索引，`obj`变量将包含实际的JavaScript对象。这两个变量在指定的回调函数中都是可用的。
- en: We are then able to reference `obj.propertyName` (replace `propertyName` with
    a property of the object) in order to access specific parts of the object we wish
    to use. By doing this, we construct a string and pass it to the `append()` function,
    which then appends it to the specified `#nameslist` unordered list.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 接着，我们可以引用`obj.propertyName`（用对象的属性替换`propertyName`）来访问我们希望使用的对象的特定部分。通过这样做，我们构造一个字符串并将其传递给`append()`函数，然后将其追加到指定的`#nameslist`无序列表中。
- en: 'Open the HTML page within the browser, and you should see the list populated
    with the names from the JavaScript array, illustrated as follows:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中打开HTML页面，你应该看到列表中填充了JavaScript数组中的名称，如下所示：
- en: '![How it works…](img/0896OS_01_04.jpg)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理…](img/0896OS_01_04.jpg)'
- en: See also
  id: totrans-232
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '*Creating DOM elements*'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建DOM元素*'
- en: '*Re-using DOM elements*'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*重用DOM元素*'
- en: Understanding pagination
  id: totrans-235
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解分页
- en: Pagination is the act of collating large amounts of data and presenting it to
    the user in small, easy-to-read sections or pages.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 分页是整理大量数据并将其呈现给用户的行为，分成小的、易于阅读的部分或页面。
- en: With a combination of jQuery, JavaScript functions, and event handlers, we are
    able to easily collate and present data to the user in pages.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 结合jQuery、JavaScript函数和事件处理程序，我们能够轻松地整理并以页面的形式呈现数据给用户。
- en: Getting ready
  id: totrans-238
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To create a paginated set of data, we first need some data to paginate and
    then a location to place the paginated data. Use the following code to create
    an HTML page:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建分页数据集，首先我们需要一些要分页的数据，然后是放置分页数据的位置。使用以下代码创建一个 HTML 页面：
- en: '[PRE35]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Within the JavaScript in this page, we have declared a large array of objects
    named `animals`, which represents a set of animals. Below this array, we have
    declared four more variables, which we will require in order to paginate the `animals`
    array:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 在此页面的 JavaScript 中，我们声明了一个名为 `animals` 的大数组对象，表示一组动物。在该数组下面，我们声明了四个更多的变量，这些变量是我们分页
    `animals` 数组所需的：
- en: '`pageSize`: This indicates the amount of results we wish to be held on a single
    page'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pageSize`：这表示我们希望在单个页面上保留的结果数量'
- en: '`currentPage`: This indicates the current page that is being displayed'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`currentPage`：这表示正在显示的当前页面'
- en: '`pagedResults`: This indicates an array that contains a section of the `animals`
    array, which represents the page'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pagedResults`：这表示一个包含 `animals` 数组部分的数组，代表页面'
- en: '`totalResults`: This indicates the number of objects within the `animals` array;
    in this case, `12`'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`totalResults`：这表示 `animals` 数组中的对象数量；在这种情况下，为 `12`'
- en: How to do it…
  id: totrans-246
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'To create a dynamic list with pages, perform each of the following steps:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建带有分页的动态列表，请执行以下每个步骤：
- en: 'Directly after `$(function(){});` but still within the `<script></script>`
    tags, add the following JavaScript function:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就在 `$(function(){});` 之后但仍然在 `<script></script>` 标签内，添加以下 JavaScript 函数：
- en: '[PRE36]'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Add the following JavaScript within `$(function(){});` in the preceding HTML
    page:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在前述 HTML 页面中的 `$(function(){});` 中添加以下 JavaScript：
- en: '[PRE37]'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: How it works…
  id: totrans-252
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: Although pagination can seem quite complicated, in principle, it is simple.
    We will need to use jQuery's `click()` function to listen for click events on
    the next and previous buttons. When these buttons are pressed, the `currentPage`
    variable is either incremented or decremented based on which button is clicked.
    After this, the `updateList()` function takes the `currentPage` value, works out
    which section of data it needs to use from the `animals` array, populates the
    `pagedResults` array with this data, and then loads these results into the HTML
    list element, `#list`.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管分页可能看起来相当复杂，但原理上很简单。我们需要使用 jQuery 的 `click()` 函数来监听下一页和上一页按钮的点击事件。当按下这些按钮时，根据点击的按钮，`currentPage`
    变量要么递增要么递减。之后，`updateList()` 函数获取 `currentPage` 值，计算需要从 `animals` 数组中使用哪个数据部分，用这些数据填充
    `pagedResults` 数组，然后将这些结果加载到 HTML 列表元素 `#list` 中。
- en: Additionally, we will need to disable the next or previous buttons depending
    on which page the user is currently viewing. If they are currently viewing the
    first page, the previous button can be disabled using jQuery's `prop()` function
    to set its `disabled` property to `true`. If the user is viewing the last page
    (which our function can work out using the `totalResults`, `currentPage`, and
    `pageSize` variables), we need to disable the next button.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，我们需要根据用户当前所在的页面禁用下一页或上一页按钮。如果他们当前正在查看第一页，我们可以使用 jQuery 的 `prop()` 函数将其 `disabled`
    属性设置为 `true` 来禁用上一页按钮。如果用户正在查看最后一页（我们的函数可以使用 `totalResults`、`currentPage` 和 `pageSize`
    变量来计算出来），我们需要禁用下一页按钮。
- en: '[PRE38]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: To expand on the well-commented code, the first thing we do is call a function
    named `updateList()`, which we will look at a little later in this recipe.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 为了扩展这个有详细注释的代码，我们首先调用一个名为 `updateList()` 的函数，稍后我们会在这个教程中详细介绍它。
- en: Note
  id: totrans-257
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Remember that any code within `$(function(){});` is executed on page load.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，`$(function(){});` 中的任何代码都会在页面加载时执行。
- en: Next, we attach a click event handler to the next button by passing a callback
    function as an argument. For this event function, we are able to specify some
    code to be executed every time the next button is clicked. The code we specify
    increments the `currentPage` variable by `1`. If there is another page of data
    available, it works this out by forming the `((currentPage * pageSize) <= totalResults)`
    condition as part of the `if` statement.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们通过将回调函数作为参数传递给下一页按钮来附加点击事件处理程序。对于此事件函数，我们能够指定每次点击下一页按钮时要执行的一些代码。我们指定的代码通过
    `1` 递增 `currentPage` 变量。如果还有其他页面的数据可用，它会通过形成 `((currentPage * pageSize) <= totalResults)`
    条件作为 `if` 语句的一部分来计算这一点。
- en: Finally, as a part of this click function, we call the previously mentioned
    `updateList()` function.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在此点击函数的一部分中，我们调用先前提到的 `updateList()` 函数。
- en: We apply the same logic to the previous button also, except that we are decrementing
    the `currentPage` value if the current page is greater than one; hence, there
    is a page to go back to.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也对上一页按钮应用相同的逻辑，只是如果当前页面大于一，我们会递减 `currentPage` 值；因此，有一页可以返回。
- en: 'Below `$(function(){});` but still within the `<script></script>` tags, add
    the following JavaScript function to your HTML page:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `$(function(){});` 下面但仍在 `<script></script>` 标签内，向您的 HTML 页面添加以下 JavaScript
    函数：
- en: '[PRE39]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: To maintain good practices, the code is well-commented once again. The first
    action that this function performs is calculating which section of the `animals`
    array it needs to use. Once it has calculated the start and end values, which
    are index values for the `animals` array (for example, `0` to `4` for page one),
    it uses JavaScript's `slice()` function to copy this data from the `animals` array
    to the `pagedResults` array.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持良好的实践，再次对代码进行了充分注释。此函数执行的第一个操作是计算它需要使用 `animals` 数组的哪个部分。一旦计算出起始和结束值（例如，页面一的索引值为
    `0` 到 `4`），它就会使用 JavaScript 的 `slice()` 函数将此数据从 `animals` 数组复制到 `pagedResults`
    数组中。
- en: Note
  id: totrans-265
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Be careful to not use the similar, JavaScript''s `.splice()` function as this
    will actually remove the data from the `animals` array as well as copy it to the
    `pagedResults` array. Additionally, `slice()` takes two arguments: the first is
    a zero-indexed number stating the start location of the array (that is, `0` is
    the beginning), and the second argument is not the location within the array but
    the number of elements from the starting point.'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 要小心不要使用类似的 JavaScript 的 `.splice()` 函数，因为这实际上会从 `animals` 数组中删除数据，并将其复制到 `pagedResults`
    数组中。另外，`slice()` 接受两个参数：第一个是从数组开始位置开始的零索引数（即，`0` 表示开始），第二个参数不是数组中的位置，而是从起始点开始的元素数量。
- en: With the required results stored in the `pagedResults` array, it uses jQuery's
    `empty()` function to empty the unordered list, `#list`, of any data. This is
    to prepare the list for repopulation. Otherwise, when the next or previous button
    is clicked and the `updateList()` function is run, the results will just get appended
    to the end of the current list and not replaced.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 使用所需结果存储在 `pagedResults` 数组中，它使用 jQuery 的 `empty()` 函数来清空无序列表 `#list` 中的任何数据。这是为了准备重新填充列表。否则，当单击下一个或上一个按钮并运行
    `updateList()` 函数时，结果将仅附加到当前列表的末尾而不是替换。
- en: The next section of code is to determine if the next and previous buttons need
    to be either disabled or enabled. We can work out whether the previous buttons
    need to be disabled by putting the condition `(currentPage <= 1)`, which simply
    checks to see if the current page is less than or equal to one; if it is, we need
    to disable the previous button; otherwise, we need to enable it. This is done
    using jQuery's `prop()` function, which allows us to manipulate the properties
    on selected elements; here, we change the `disabled` property to either `true`
    or `false`. We can determine whether we need to disable the next button using
    `((currentPage * pageSize) >= totalResults)`, which calculates whether there are
    enough objects within the `animals` array to create the next page; if there are
    not, we disable the button, but if there are, we enable it.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的下一部分是确定下一个和上一个按钮是否需要禁用或启用。我们可以通过放置条件 `(currentPage <= 1)` 来计算是否需要禁用上一页按钮，该条件简单地检查当前页面是否小于或等于一；如果是，则需要禁用上一页按钮；否则，需要启用。这是使用
    jQuery 的 `prop()` 函数完成的，该函数允许我们操作所选元素的属性；在这里，我们将 `disabled` 属性更改为 `true` 或 `false`。我们可以通过
    `((currentPage * pageSize) >= totalResults)` 来确定是否需要禁用下一个按钮，该条件计算出 `animals` 数组中是否有足够的对象来创建下一页；如果没有，我们禁用按钮，但如果有，我们启用它。
- en: Finally, we use jQuery's `$.each()` function to iterate through each of the
    objects within the `pagedResults` array and append a list element with the data
    from each object to the unordered list on the page.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们使用 jQuery 的 `$.each()` 函数遍历 `pagedResults` 数组中的每个对象，并将每个对象的数据附加到页面上的无序列表中的列表元素。
- en: 'If you open the HTML page within the browser, you should see a similar page
    to the one illustrated as follows:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在浏览器中打开 HTML 页面，您应该看到与以下示例类似的页面：
- en: '![How it works…](img/0896OS_01_05.jpg)'
  id: totrans-271
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/0896OS_01_05.jpg)'
- en: On page load, the list is populated with the first page of results, as `currentPage`
    is set to `1` and the `updateList()` function is also set to run on page load,
    which disables the previous button.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 在页面加载时，列表会填充为第一页的结果，因为 `currentPage` 设置为 `1`，并且 `updateList()` 函数也设置为在页面加载时运行，这会禁用上一页按钮。
- en: Removing DOM elements
  id: totrans-273
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除 DOM 元素
- en: jQuery makes it easy for the developer to completely remove DOM elements, which
    is often useful when creating rich user interfaces. Having the ability to remove
    elements is useful in situations where your interface represents some information
    from a database, and it provides a way for the user to delete database items.
    If this UI is using AJAX to send the delete request to the web server, you will
    need to reflect the delete action on the client side and remove the element representing
    the database item.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 使开发人员可以轻松完全删除 DOM 元素，在创建丰富的用户界面时通常很有用。删除元素的能力在您的界面表示来自数据库的一些信息，并为用户提供删除数据库项目的方式时非常有用。如果此
    UI 使用 AJAX 将删除请求发送到 Web 服务器，则需要在客户端反映删除操作并删除表示数据库项目的元素。
- en: Getting ready
  id: totrans-275
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a blank HTML document, and save it as `recipe-11.html` to an easily accessible
    location on your computer.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个空白的 HTML 文档，并将其保存为 `recipe-11.html`，放在您的计算机上易于访问的位置。
- en: How to do it…
  id: totrans-277
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Understand how to remove DOM elements using jQuery by performing each of the
    following steps:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 学习如何使用 jQuery 删除 DOM 元素，执行以下每个步骤：
- en: 'Add the following HTML code to the `recipe-11.html` page you have just created:'
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下 HTML 代码添加到您刚刚创建的 `recipe-11.html` 页面中：
- en: '[PRE40]'
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Within the `<script></script>` tags of the previous HTML document, add the
    following JavaScript code:'
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在前一个 HTML 文档的 `<script></script>` 标记中，添加以下 JavaScript 代码：
- en: '[PRE41]'
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Open the HTML document in a browser and click on the remove button to remove
    the selected list item.
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中打开 HTML 文档，并单击删除按钮以删除所选的列表项。
- en: How it works…
  id: totrans-284
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: jQuery provides us with a `remove()` function, which will remove the selected
    element from the DOM. In a situation as the one mentioned previously, you would
    have a list of items that represent the records within the database. Each of these
    list items would provide a remove button, allowing the user to delete the selected
    item.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 为我们提供了一个 `remove()` 函数，它将从 DOM 中删除所选元素。在前面提到的情况下，您会有一个列表，其中包含表示数据库中记录的项目。每个列表项都会提供一个删除按钮，允许用户删除所选项目。
- en: In a real-world situation, this delete button would make an AJAX request to
    a web server, wait for the response, and then remove the selected element on the
    client side. To keep this recipe simple, we will just be looking at the JavaScript
    code to remove the element on the client side and will not be working with AJAX.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际情况下，此删除按钮将向 Web 服务器发出 AJAX 请求，等待响应，然后在客户端上删除所选元素。为了保持本示例简单，我们将只查看在客户端上删除元素的
    JavaScript 代码，而不使用 AJAX。
- en: Note
  id: totrans-287
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '[Chapter 3](ch03.html "Chapter 3. Loading and Manipulating Dynamic Content
    with AJAX and JSON"), *Loading and Manipulating Dynamic Content with AJAX and
    JSON*, contains a wealth of AJAX recipes.'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '[第 3 章](ch03.html "第 3 章。使用 AJAX 和 JSON 加载和操作动态内容")，《使用 AJAX 和 JSON 加载和操作动态内容》，包含丰富的
    AJAX 配方。'
- en: We can use jQuery's `click()` function to listen for a click event on one of
    the delete buttons. Then, we can use `$(this).parent()` to select the `<li>` element
    we wish to delete, because the delete button is a sibling of this list element.
    We can then use the `remove()` method with no arguments to remove the selected
    list element.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 jQuery 的 `click()` 函数来监听一个删除按钮的点击事件。然后，我们可以使用 `$(this).parent()` 来选择我们要删除的
    `<li>` 元素，因为删除按钮是这个列表元素的兄弟元素。然后，我们可以使用不带参数的 `remove()` 方法来删除所选的列表元素。
- en: See also
  id: totrans-290
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '*Creating DOM elements*'
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建 DOM 元素*'
- en: '*Re-using DOM elements*'
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*重用 DOM 元素*'
- en: Re-using DOM elements
  id: totrans-293
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重用 DOM 元素
- en: When using jQuery to dynamically create elements such as list items, divisions,
    and input, it can be useful to be able to re-use these elements without having
    to rewrite them within JavaScript. Instead, it may be beneficial to copy the elements
    and just modify the sections you wish to change.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 jQuery 动态创建诸如列表项、部分和输入等元素时，能够重用这些元素而无需在 JavaScript 中重新编写它们可能非常有用。相反，复制这些元素并仅修改您希望更改的部分可能更有利。
- en: Getting ready
  id: totrans-295
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Using the text editor of your choice, create a blank HTML document named `recipe-12.html`,
    which is within a location that has easy access to the latest version of jQuery.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 使用您选择的文本编辑器，在易于访问最新版本 jQuery 的位置中创建一个名为 `recipe-12.html` 的空白 HTML 文档。
- en: How to do it…
  id: totrans-297
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Learn how to re-use DOM elements by performing each of the following recipe
    steps:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 学习如何通过执行以下每个步骤来重用 DOM 元素：
- en: 'Within the `recipe-12.html` page you have just created, add the following HTML,
    CSS, and JavaScript code:'
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你刚创建的`recipe-12.html`页面中，添加以下 HTML、CSS 和 JavaScript 代码：
- en: '[PRE42]'
  id: totrans-300
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Within the HTML page you created from the preceding code, add the following
    JavaScript within `$(function(){});`:'
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你从上述代码中创建的 HTML 页面中，在`$(function(){});`中添加以下 JavaScript：
- en: '[PRE43]'
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: If you open your newly created web page within a browser, you should be provided
    with a populated list element that matches the objects within the JavaScript array
    `animals`.
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你在浏览器中打开你刚创建的网页，你应该会看到一个已填充的列表元素，它与 JavaScript 数组`animals`中的对象相匹配。
- en: How it works…
  id: totrans-304
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: By using jQuery's `$.each()` method, we are able to iterate through each of
    the objects within the JavaScript `animals` array. Then, for each of the JavaScript
    objects, we clone the first element in the unordered list using `$('#animal-list
    li').first().clone();` and store it within the `listTemplate` variable. This variable
    now holds a copy of the first list element within the unordered list `#animal-list`.
    We can now manipulate this element as we would do with any other DOM element.
    We are able to use jQuery's `find()` function to locate the span elements with
    the `.name` and `.type` class names. We can then alter their content to match
    the current object's name and type values. Next, we remove the previous styles
    on the cloned element with `removeClass()` (not providing an argument will remove
    all current classes without having to specify each one of them), and add the style
    that is specified within the JavaScript object using the `addClass()` function
    that jQuery provides us with. Finally, we can append the modified HTML element
    to the end of the list using `append()`.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用 jQuery 的`$.each()`方法，我们能够遍历 JavaScript 数组`animals`中的每个对象。然后，对于 JavaScript
    对象中的每个对象，我们使用`$('#animal-list li').first().clone();`克隆无序列表中的第一个元素，并将其存储在`listTemplate`变量中。现在，该变量包含了无序列表`#animal-list`中的第一个列表元素的副本。我们现在可以像处理任何其他
    DOM 元素一样操作此元素。我们可以使用 jQuery 的`find()`函数来定位带有`.name`和`.type`类名的 span 元素。然后，我们可以更改它们的内容以匹配当前对象的名称和类型值。接下来，我们使用`removeClass()`（不提供参数将删除所有当前类，而不必指定每个类）从克隆的元素中删除先前的样式，并使用
    jQuery 提供的`addClass()`函数添加 JavaScript 对象中指定的样式。最后，我们可以使用`append()`将修改后的 HTML 元素附加到列表的末尾。
- en: See also
  id: totrans-306
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '*Removing DOM elements*'
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*删除 DOM 元素*'
- en: '*Creating DOM elements*'
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建 DOM 元素*'
