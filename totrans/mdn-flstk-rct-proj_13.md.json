["```js\n    $ cp -R ch9 ch10\n    ```", "```js\n    import mongoose, { Schema } from 'mongoose'\n    const eventsSchema = new Schema(\n      {\n        post: { type: Schema.Types.ObjectId, ref: 'post', required: true },\n    ```", "```js\n        session: { type: String, required: true },\n        action: { type: String, required: true },\n        date: { type: Date, required: true },\n      },\n      { timestamps: true },\n    )\n    ```", "```js\n    export const Event = mongoose.model('events', eventsSchema)\n    ```", "```js\n    $ cd backend/\n    $ npm install uuid@9.0.1\n    ```", "```js\n    import { v4 as uuidv4 } from 'uuid'\n    import { Event } from '../db/models/event.js'\n    export async function trackEvent({\n      postId,\n      action,\n      session = uuidv4(),\n      date = Date.now(),\n    }) {\n      const event = new Event({ post: postId, action, session, date })\n      return await event.save()\n    }\n    ```", "```js\n    import { trackEvent } from '../services/events.js'\n    import { getPostById } from '../services/posts.js'\n    ```", "```js\n    export function eventRoutes(app) {\n      app.post('/api/v1/events', async (req, res) => {\n        try {\n          const { postId, session, action } = req.body\n    ```", "```js\n          const post = await getPostById(postId)\n          if (post === null) return res.status(400).end()\n    ```", "```js\n          const event = await trackEvent({ postId, session, action })\n          return res.json({ session: event.session })\n        } catch (err) {\n          console.error('error tracking action', err)\n          return res.status(500).end()\n        }\n      })\n    }\n    ```", "```js\n    import { eventRoutes } from './routes/events.js'\n    ```", "```js\n    postRoutes(app)\n    userRoutes(app)\n    eventRoutes(app)\n    ```", "```js\n    $ cd backend/\n    $ npm run dev\n    ```", "```js\n    export const postTrackEvent = (event) =>\n      fetch(`${import.meta.env.VITE_BACKEND_URL}/events`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(event),\n      }).then((res) => res.json())\n    ```", "```js\n    import { useEffect, useState } from 'react'\n    import { useQuery, useMutation } from '@tanstack/react-query'\n    ```", "```js\n    import { postTrackEvent } from '../api/events.js'\n    ```", "```js\n      const [session, setSession] = useState()\n      const trackEventMutation = useMutation({\n        mutationFn: (action) => postTrackEvent({ postId, action, session }),\n        onSuccess: (data) => setSession(data?.session),\n      })\n    ```", "```js\n      useEffect(() => {\n        let timeout = setTimeout(() => {\n          trackEventMutation.mutate('startView')\n          timeout = null\n        }, 1000)\n        return () => {\n          if (timeout) clearTimeout(timeout)\n          else trackEventMutation.mutate('endView')\n        }\n      }, [])\n    ```", "```js\n    ch10 folder, not inside the backend folder.\n    ```", "```js\n    DATABASE_URL=mongodb://localhost:27017/blog-simulated\n    ```", "```js\n    import dotenv from 'dotenv'\n    dotenv.config()\n    import { initDatabase } from './src/db/init.js'\n    import { Post } from './src/db/models/post.js'\n    import { User } from './src/db/models/user.js'\n    import { Event } from './src/db/models/event.js'\n    import { createUser } from './src/services/users.js'\n    import { createPost } from './src/services/posts.js'\n    import { trackEvent } from './src/services/events.js'\n    ```", "```js\n    const simulationStart = Date.now() - 1000 * 60 * 60 * 24 * 30\n    const simulationEnd = Date.now()\n    ```", "```js\n    const simulatedUsers = 5\n    const simulatedPosts = 10\n    const simulatedViews = 10000\n    ```", "```js\n    async function simulateEvents() {\n      const connection = await initDatabase()\n    ```", "```js\n      await User.deleteMany({})\n      const createdUsers = await Promise.all(\n        Array(simulatedUsers)\n          .fill(null)\n          .map(\n            async (_, u) =>\n              await createUser({\n                username: `user-${u}`,\n                password: `password-${u}`,\n              }),\n          ),\n      )\n      console.log(`created ${createdUsers.length} users`)\n    ```", "```js\n      await Post.deleteMany({})\n      const createdPosts = await Promise.all(\n        Array(simulatedPosts)\n          .fill(null)\n          .map(async (_, p) => {\n            const randomUser =\n              createdUsers[Math.floor(Math.random() * simulatedUsers)]\n            return await createPost(randomUser._id, {\n              title: `Test Post ${p}`,\n              contents: `This is a test post ${p}`,\n            })\n          }),\n      )\n      console.log(`created ${createdPosts.length} posts`)\n    ```", "```js\n      await Event.deleteMany({})\n      const createdViews = await Promise.all(\n        Array(simulatedViews)\n          .fill(null)\n          .map(async () => {\n            const randomPost =\n              createdPosts[Math.floor(Math.random() * simulatedPosts)]\n    ```", "```js\n            const sessionStart =\n              simulationStart + Math.random() * (simulationEnd - simulationStart)\n    ```", "```js\n            const sessionEnd =\n              sessionStart + 1000 * Math.floor(Math.random() * 60 * 5)\n    ```", "```js\n            const event = await trackEvent({\n              postId: randomPost._id,\n              action: 'startView',\n              date: new Date(sessionStart),\n            })\n    ```", "```js\n            await trackEvent({\n              postId: randomPost._id,\n              session: event.session,\n              action: 'endView',\n              date: new Date(sessionEnd),\n            })\n          }),\n      )\n      console.log(`successfully simulated ${createdViews.length} views`)\n    ```", "```js\n      await connection.disconnect()\n    }\n    simulateEvents()\n    ```", "```js\n    $ cd backend/\n    $ node simulateEvents.js\n    ```", "```js\n    /* global use, db */\n    ```", "```js\n    use('blog-simulated')\n    ```", "```js\n    db.getCollection('events').aggregate([\n    ```", "```js\n      {\n        $match: { action: 'startView' },\n      },\n    ```", "```js\n      {\n        $group: {\n          _id: '$post',\n          views: { $count: {} },\n        },\n      },\n    ])\n    ```", "```js\n    /* global use, db */\n    use('blog-simulated')\n    db.getCollection('events').aggregate([\n    ```", "```js\n      {\n        $match: { action: 'startView' },\n      },\n    ```", "```js\n      {\n        $project: {\n          post: '$post',\n          day: { $dateTrunc: { date: '$date', unit: 'day' } },\n        },\n      },\n    ```", "```js\n      {\n        $group: {\n          _id: { post: '$post', day: '$day' },\n          views: { $count: {} },\n        },\n      },\n    ])\n    ```", "```js\n    /* global use, db */\n    use('blog-simulated')\n    db.getCollection('events').aggregate([\n      {\n        $project: {\n          session: '$session',\n          startDate: {\n            $cond: [{ $eq: ['$action', 'startView'] }, '$date', undefined],\n          },\n          endDate: { $cond: [{ $eq: ['$action', 'endView'] }, '$date', undefined] },\n        },\n      },\n    ```", "```js\n      {\n        $group: {\n          _id: '$session',\n          startDate: { $min: '$startDate' },\n          endDate: { $max: '$endDate' },\n        },\n      },\n    ```", "```js\n      {\n        $project: {\n          session: '$_id',\n          duration: { $subtract: ['$endDate', '$startDate'] },\n        },\n      },\n    ])\n    ```", "```js\n    export async function getTotalViews(postId) {\n      return {\n        views: await Event.countDocuments({ post: postId, action: 'startView' }),\n      }\n    }\n    ```", "```js\n    export async function getDailyViews(postId) {\n      return await Event.aggregate([\n        {\n          $match: {\n            post: postId,\n            action: 'startView',\n          },\n        },\n    ```", "```js\n        {\n          $group: {\n            _id: {\n              $dateTrunc: { date: '$date', unit: 'day' },\n            },\n            views: { $count: {} },\n          },\n        },\n    ```", "```js\n        {\n          $sort: { _id: 1 },\n        },\n      ])\n    }\n    ```", "```js\n    export async function getDailyDurations(postId) {\n      return await Event.aggregate([\n        {\n          $match: {\n            post: postId,\n          },\n        },\n    ```", "```js\n        {\n          $project: {\n            session: '$session',\n            startDate: {\n              $cond: [{ $eq: ['$action', 'startView'] }, '$date', undefined],\n            },\n            endDate: {\n              $cond: [{ $eq: ['$action', 'endView'] }, '$date', undefined],\n            },\n          },\n        },\n        {\n          $group: {\n            _id: '$session',\n            startDate: { $min: '$startDate' },\n            endDate: { $max: '$endDate' },\n          },\n        },\n    ```", "```js\n        {\n          $project: {\n            day: { $dateTrunc: { date: '$startDate', unit: 'day' } },\n            duration: { $subtract: ['$endDate', '$startDate'] },\n          },\n        },\n    ```", "```js\n        {\n          $group: {\n            _id: '$day',\n            averageDuration: { $avg: '$duration' },\n          },\n        },\n    ```", "```js\n        {\n          $sort: { _id: 1 },\n        },\n      ])\n    }\n    ```", "```js\n    import {\n      trackEvent,\n      getTotalViews,\n      getDailyViews,\n      getDailyDurations,\n    } from '../services/events.js'\n    ```", "```js\n      app.get('/api/v1/events/totalViews/:postId', async (req, res) => {\n        try {\n          const { postId } = req.params\n          const post = await getPostById(postId)\n          if (post === null) return res.status(400).end()\n          const stats = await getTotalViews(post._id)\n          return res.json(stats)\n        } catch (err) {\n          console.error('error getting stats', err)\n          return res.status(500).end()\n        }\n      })\n    ```", "```js\n      app.get('/api/v1/events/dailyViews/:postId', async (req, res) => {\n        try {\n          const { postId } = req.params\n          const post = await getPostById(postId)\n          if (post === null) return res.status(400).end()\n          const stats = await getDailyViews(post._id)\n          return res.json(stats)\n        } catch (err) {\n          console.error('error getting stats', err)\n          return res.status(500).end()\n        }\n      })\n    ```", "```js\n      app.get('/api/v1/events/dailyDurations/:postId', async (req, res) => {\n        try {\n          const { postId } = req.params\n          const post = await getPostById(postId)\n          if (post === null) return res.status(400).end()\n          const stats = await getDailyDurations(post._id)\n          return res.json(stats)\n        } catch (err) {\n          console.error('error getting stats', err)\n          return res.status(500).end()\n        }\n      })\n    ```", "```js\n    export const getTotalViews = (postId) =>\n      fetch(`${import.meta.env.VITE_BACKEND_URL}/events/totalViews/${postId}`).then(\n        (res) => res.json(),\n      )\n    export const getDailyViews = (postId) =>\n      fetch(`${import.meta.env.VITE_BACKEND_URL}/events/dailyViews/${postId}`).then(\n        (res) => res.json(),\n      )\n    export const getDailyDurations = (postId) =>\n      fetch(\n        `${import.meta.env.VITE_BACKEND_URL}/events/dailyDurations/${postId}`,\n      ).then((res) => res.json())\n    ```", "```js\n    import { useQuery } from '@tanstack/react-query'\n    import PropTypes from 'prop-types'\n    import {\n      getTotalViews,\n      getDailyViews,\n      getDailyDurations,\n    } from '../api/events.js'\n    ```", "```js\n    export function PostStats({ postId }) {\n      const totalViews = useQuery({\n        queryKey: ['totalViews', postId],\n        queryFn: () => getTotalViews(postId),\n      })\n      const dailyViews = useQuery({\n        queryKey: ['dailyViews', postId],\n        queryFn: () => getDailyViews(postId),\n      })\n      const dailyDurations = useQuery({\n        queryKey: ['dailyDurations', postId],\n        queryFn: () => getDailyDurations(postId),\n      })\n    ```", "```js\n      if (\n        totalViews.isLoading ||\n        dailyViews.isLoading ||\n        dailyDurations.isLoading\n      ) {\n        return <div>loading stats...</div>\n      }\n    ```", "```js\n      return (\n        <div>\n          <b>{totalViews.data?.views} total views</b>\n          <pre>{JSON.stringify(dailyViews.data)}</pre>\n          <pre>{JSON.stringify(dailyDurations.data)}</pre>\n        </div>\n      )\n    }\n    ```", "```js\n    PostStats.propTypes = {\n      postId: PropTypes.string.isRequired,\n    }\n    ```", "```js\n    import { PostStats } from '../components/PostStats.jsx'\n    ```", "```js\n          {post ? (\n            <div>\n              <Post {...post} fullPost />\n              <hr />\n              <PostStats postId={postId} />\n            </div>\n          ) : (\n            `Post with id ${postId} not found.`\n          )}\n        </div>\n      )\n    }\n    ```", "```js\n    $ npm install victory@36.9.1\n    ```", "```js\n    import {\n      VictoryChart,\n      VictoryTooltip,\n      VictoryBar,\n      VictoryLine,\n      VictoryVoronoiContainer,\n    } from 'victory'\n    ```", "```js\n      return (\n        <div>\n          <b>{totalViews.data?.views} total views</b>\n          <div style={{ width: 512 }}>\n            <h3>Daily Views</h3>\n    VictoryChart component is a wrapper, used to combine all elements of a Victory chart. We set domainPadding to 16 pixels, which is a padding inside of the graph. It makes sure that the lines and bar charts do not stick to the edges of the graph, making it look slightly better.\n    ```", "```js\n              <VictoryBar\n                labelComponent={<VictoryTooltip />}\n    ```", "```js\n                data={dailyViews.data?.map((d) => ({\n    ```", "```js\n                  x: new Date(d._id),\n                  y: d.views,\n    ```", "```js\n                  label: `${new Date(d._id).toLocaleDateString()}: ${d.views} views`,\n                }))}\n              />\n            </VictoryChart>\n          </div>\n        </div>\n      )\n    }\n    ```", "```js\n            </VictoryChart>\n          </div>\n          <div style={{ width: 512 }}>\n            <h4>Daily Average Viewing Duration</h4>\n            <VictoryChart\n              domainPadding={16}\n    ```", "```js\n              containerComponent={\n                <VictoryVoronoiContainer\n                  voronoiDimension='x'\n    ```", "```js\n                  labels={({ datum }) =>\n                    `${datum.x.toLocaleDateString()}: ${datum.y.toFixed(2)} minutes`\n                  }\n    ```", "```js\n                  labelComponent={<VictoryTooltip />}\n                />\n              }\n            >\n    ```", "```js\n              <VictoryLine\n                data={dailyDurations.data?.map((d) => ({\n                  x: new Date(d._id),\n                  y: d.averageDuration / (60 * 1000),\n                }))}\n              />\n            </VictoryChart>\n          </div>\n        </div>\n      )\n    }\n    ```"]