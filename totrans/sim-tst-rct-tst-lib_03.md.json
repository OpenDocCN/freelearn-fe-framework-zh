["```js\n  const handleLikeVote = () => dispatch({ type: 'LIKE' })\n  const handleDislikeVote = () => dispatch({ type: \n    'DISLIKE' })\n  return (\n    <div className=\"h1\">\n      <h5>Note: You are not allowed to change your vote \n         once selected!</h5>\n      <button\n        onClick={handleLikeVote}\n        disabled={hasVoted}\n        style={clickedLike ? { background: 'green' } : \n          null}\n      >\n        <img src={thumbsUp} alt=\"thumbs up\" />\n      </button>\n```", "```js\nimport { fireEvent, render, screen } from '@testing-library/react'\nimport Vote from './Vote'\ntest('increases total likes by one', () => {\n  render(<Vote totalGlobalLikes={10} />)\n```", "```js\nexpect(screen.getByText(/10/i)).toBeInTheDocument()\n  fireEvent.click(screen.getByRole('button', { name: \n    /thumbs up/i }))\n  expect(screen.getByText(11).toBeInTheDocument()\n  expect(screen.getByRole('button', { name: /thumbs up/i \n    })).toHaveStyle(\n    'background: green'\n  )\n})\n```", "```js\nnpm install --save-dev @testing-library/user-event\n```", "```js\nimport { render, screen } from '@testing-library/react'\nimport user from '@testing-library/user-event'\nimport Vote from './Vote'\ntest('increases total likes by one', () => {\n  render(<Vote totalGlobalLikes={10} />)\n  expect(screen.getByText(/10/i)).toBeInTheDocument()\n  user.click(screen.getByRole('button', { name: /thumbs \n     up/i }))\n  expect(screen.getByText(/11/i)).toBeInTheDocument()\n  expect(screen.getByRole('button', { name: /thumbs up/i \n    })).toHaveStyle(\n    'background: green'\n  )\n})\n```", "```js\ntest('A user can only vote once', () => {\n  render(<Vote totalGlobalLikes={10} />)\n  const thumbsUpBtn = screen.getByRole('button', { name: \n    /thumbs up/i })\n  const thumbsDownBtn = screen.getByRole('button', { name: \n    /thumbs down/i })\n  expect(screen.getByText(/10/i)).toBeInTheDocument()\n  user.click(thumbsUpBtn)\n  user.click(thumbsUpBtn)\n  expect(screen.getByText(/11/i)).toBeInTheDocument()\n  user.click(thumbsDownBtn)\n  expect(screen.getByText(/11/i)).toBeInTheDocument()\n})\n```", "```js\ntest('decreases total likes by one', () => {\n  render(<Vote totalGlobalLikes={10} />)\n  expect(screen.getByText(/10/i)).toBeInTheDocument()\n  user.click(screen.getByRole('button', { name: /thumbs \n    down/i }))\n  expect(screen.getByText(/9/i)).toBeInTheDocument()\n  expect(screen.getByRole('button', { name: /thumbs down/i \n    })).toHaveStyle(\n    'background: red'\n  )\n})\n```", "```js\nimport { render, screen } from '@testing-library/react'\nimport user from '@testing-library/user-event'\nimport EmployeeEmail from './EmployeeEmail'\ntest('it accepts a username and displays to the screen', ()\n  => {\n  render(<EmployeeEmail />)\n  const input = screen.getByRole('textbox', { name: /enter \n    your name/i })\n  user.type(input, 'jane doe')\n  expect(screen.getByText(/jane.doe@software-\n    plus.com/i)).toBeInTheDocument()\n})\n```", "```js\n      <button\n        onClick={voteLike}\n        disabled={hasVoted}\n        style={clickedLike ? { background: 'green' } : \n          null}\n      >\n        <img src={thumbsUp} alt=\"thumbs up\" />\n      </button>\n      <div>{totalLikes}</div>\n      <button\n        onClick={voteDislike}\n        disabled={hasVoted}\n        style={clickedDislike ? { background: 'red' } : \n          null}\n      >\n        <img src={thumbsDown} alt=\"thumbs down\" />\n      </button>\n```", "```js\nconst VoteBtn = props => {\n  return (\n    <button onClick={props.handleVote} \n      disabled={props.hasVoted}>\n      <img src={props.imgSrc} alt={props.altText} />\n    </button>\n  )\n}\n```", "```js\nimport { render, screen } from '@testing-library/react'\nimport user from '@testing-library/user-event'\nimport thumbsUp from './images/thumbs-up.svg'\nimport VoteBtn from './VoteBtn'\ntest('invokes handleVote', () => {\n  const mockHandleVote = jest.fn()\n  render(\n    <VoteBtn\n      handleVote={mockHandleVote}\n      hasVoted={false}\n      imgSrc={thumbsUp}\n      altText=\"vote like\"\n    />\n  )\n```", "```js\n  user.click(screen.getByRole('button', { name: /vote \n    like/i }))\n  expect(mockHandleVote).toHaveBeenCalled()\n  expect(mockHandleVote).toHaveBeenCalledTimes(1)\n})\n```", "```js\nconst fetchDrinks = async drinkQuery => {\n  const response = await fetch(\n    `https://www.thecocktaildb.com/api/json/v1/1/search.php?s=$\n  {drinkQuery}`\n  )\n  const data = await response.json()\n  return data.drinks\n}\nexport default fetchDrinks\n```", "```js\n<form onSubmit={handleDrinkQuery}>\n  <input\n    placeholder='search for a drink...'\n    type='search'\n    value={drinkQuery}\n    onChange={(event) => setDrinkQuery(event.target.value)}\n  />\n  <button type='submit'>Search</button>\n</form>\n```", "```js\n{drinks && <div>{drinkResults()}</div>}\n```", "```js\n{!drinks && <h5> No drinks found </h5>}\n```", "```js\n{error && <h5> Service unavailable </h5>\n```", "```js\nnpm install msw --save-dev\n```", "```js\nimport { rest } from 'msw'\nexport const handlers = [\n  rest.get(\n    'https://www.thecocktaildb.com/api/json/v1/1/search.php',\n    (req, res, ctx) => {\n      return res(\n        ctx.status(200),\n        ctx.json({\n          drinks: [\n            {\n              idDrink: 1,\n              strDrinkThumb: './images/thumbs-down.svg',\n              strDrink: 'test drink',\n              strInstructions: 'test instructions',\n              strIngredient1: 'test ingredient'\n            }\n          ]\n```", "```js\nimport { setupServer } from 'msw/node'\nimport { handlers } from './handlers'\nexport const mockServer = setupServer(...handlers)\n```", "```js\nimport { render, screen} from '@testing-library/react'\nimport user from '@testing-library/user-event'\nimport DrinkSearch from './DrinkSearch'\nimport { mockServer } from './mocks/server.js'\n```", "```js\nbeforeAll(() => mockServer.listen())\nafterEach(() => mockServer.resetHandlers())\nafterAll(() => mockServer.close())\n```", "```js\ntest('renders mock drink data, async () => {\n  render(<DrinkSearch />)\n  const searchInput = screen.getByRole('searchbox')\n  user.type(searchInput, 'vodka, {enter}')\n```", "```js\n  expect(\n    await screen.findByRole('img', { name: /test drink/i })\n  ).toBeInTheDocument()\n  expect(\n    screen.getByRole('heading', { name: /test drink/i })\n  ).toBeInTheDocument()\n  expect(screen.getByText(/test \n    ingredient/i)).toBeInTheDocument()\n  expect(screen.getByText(/test \n    instructions/i)).toBeInTheDocument()\n})\n```", "```js\ntest('renders no drink results', async () => {\n  mockServer.use(\n    rest.get(\n      'https://www.thecocktaildb.com/api/json/v1/1/search.php',\n      (req, res, ctx) => {\n        return res(\n          ctx.status(200),\n          ctx.json({\n            drinks: null\n          })\n        )\n      }\n    )\n  )\n```", "```js\n      render(<DrinkSearch />)\n  const searchInput = screen.getByRole('searchbox')\n  user.type(searchInput, 'vodka, {enter}')\n  expect(\n    await screen.findByRole('heading', { name: / no \n      drinks found /i })\n  ).toBeInTheDocument()\n})\n```", "```js\ntest('renders service unavailable', async () => {\n  mockServer.use(\n    rest.get(\n      'https://www.thecocktaildb.com/api/json/v1/1/search.php',\n      (req, res, ctx) => {\n        return res(ctx.status(503))\n      }\n    )\n  )\n```", "```js\nrender(<DrinkSearch />)\nconst searchInput = screen.getByRole('searchbox');\nuser.type(searchInput, 'vodka, {enter}');\nexpect(\n  await screen.findByRole('heading', { name: /Service     unavailable/i })\n).toBeInTheDocument()\n```", "```js\ntest('prevents GET request when search input empty', async \n  () => {\n  render(<DrinkSearch />)\n  const searchInput = screen.getByRole('searchbox')\n  user.type(searchInput, '{enter}')\n  expect(screen.queryByRole('heading')).not.toBeInTheDocument()\n})\n```", "```js\nnpx msw init public/\n```", "```js\nimport { rest, setupWorker } from 'msw'\nconst drinks = [\n  {\n    idDrink: '11457',\n    strDrink: 'Gin Fizz',\n    strInstructions:\n      'Shake all ingredients with ice cubes, except soda \n       water. Pour into glass. Top with soda water.',\n    strDrinkThumb:\n         'https://www.thecocktaildb.com/images/media/drink/\n           drtihp1606768397.jpg',\n    strIngredient1: 'Gin',\n    strIngredient2: 'Lemon',\n    strIngredient3: 'Powdered sugar',\n    strIngredient4: 'Carbonated water'\n  },\n\n]\n```", "```js\nexport const worker = setupWorker(\n  rest.get(\n    'https://www.thecocktaildb.com/api/json/v1/1/search.php',\n    (req, res, ctx) => {\n      return res(\n        ctx.status(200),\n        ctx.json({\n          drinks\n        })\n      )\n    }\n  )\n)\n```", "```js\nif (process.env.NODE_ENV === 'development') {\n  const { worker } = require('./mocks/browser')\n  worker.start()\n}\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n```", "```js\n  test('given image and vote status, renders button to \n    screen', () => {\n    const stubHandleVote = jest.fn()\n    const stubAltText = 'vote like'\n    render(\n      <VoteBtn\n        handleVote={stubHandleVote}\n        hasVoted={false}\n        imgSrc={stubThumbsUp}\n        altText={stubAltText}\n      />\n    )\n    const image = screen.getByRole('img', { name: \n      stubAltText })\n    const button = screen.getByRole('button', { name: \n      stubAltText })\n```", "```js\n    expect(image).toBeInTheDocument()\n    expect(button).toBeInTheDocument()\n    expect(button).toBeEnabled()\n  })\n```", "```js\nconst VoteBtn = props => {\n  return null\n}\nexport default VoteBtn\n```", "```js\nconst VoteBtn = props => {\n  return (\n    <button disabled={props.hasVoted}>\n      <img src={props.imgSrc} alt={props.altText} />\n    </button>\n  )\n}\nexport default VoteBtn\n```", "```js\n  test('given clicked button, invokes handleVote', () => {\n    const mockHandleVote = jest.fn()\n    render(\n      <VoteBtn\n        handleVote={mockHandleVote}\n        hasVoted={false}\n        imgSrc={stubThumbsUp}\n        altText=\"vote like\"\n      />\n    )\n```", "```js\n    user.click(screen.getByRole('button', { name: /vote\n      like/i }))\n    expect(mockHandleVote).toHaveBeenCalled()\n    expect(mockHandleVote).toHaveBeenCalledTimes(1)\n  })\n```", "```js\n    <button onClick={props.handleVote} disabled={props.        hasVoted}>\n```", "```js\n  test('given submitted form, invokes handleRegister', () \n    => {\n    const mockHandleRegister = jest.fn()\n    const mockValues = {\n      email: 'john@mail.com',\n      password: '123'\n    }\n    render(<Register handleRegister={mockHandleRegister} />)\n```", "```js\nuser.type(screen.getByLabelText('Email Address'), \n  mockValues.email)\nuser.type(screen.getByLabelText('Create Password'), \n  mockValues.password)\nuser.click(screen.getByRole('button', { name: /submit/i }))\n```", "```js\n    expect(mockHandleRegister).toHaveBeenCalledTimes(1)\n    expect(mockHandleRegister).toHaveBeenCalledWith({\n      email: mockValues.email,\n      password: mockValues.password\n    })\n  })\n```", "```js\nexport default class Register extends React.Component {\n  render() {\n    return null\n  }\n}\n```", "```js\n  state = {\n    email: '',\n    password: ''\n  }\n  handleChange = event => {\n    const { id, value } = event.target\n    this.setState(prevState => {\n      return {\n        ...prevState,\n        [id]: value\n      }\n    })\n  }\n```", "```js\n      <main>\n        <h1>Register here</h1>\n        <form>\n          <div>\n            <label htmlFor='email'>Email Address</label>\n            <input\n              value={this.state.email}\n              onChange={this.handleChange}\n              type='email'\n              id='email'\n            />\n          </div>\n```", "```js\n          <div>\n            <label htmlFor='password'>Create Password\n              </label>\n            <input\n              value={this.state.password}\n              onChange={this.handleChange}\n              type='password'\n              id='password'\n            />\n          </div>\n          <button type='submit'>Submit</button>\n        </form>\n      </main>\n```", "```js\n  handleSubmit = event => {\n    event.preventDefault()\n    this.props.handleRegister(this.state)\n  }\n```", "```js\n        <form onSubmit={this.handleSubmit}>\n```", "```js\nconst Register = props => {\n  const [values, setValues] = React.useState({\n    email: '',\n    password: ''\n  })\n```", "```js\n const handleChange = event => {\n   const { id, value } = event.target\n   setValues({ ...values, [id]: value })\n }\n const handleSubmit = event => {\n   event.preventDefault()\n   props.handleRegister(values)\n }\n```", "```js\n<main className=\"m-3 d-flex flex-column\">\n      <h1>Register here</h1>\n      <form onSubmit={handleSubmit}>\n        <div>\n          <label htmlFor=\"email\">Email Address</label>\n          <input\n            value={values.email}\n            onChange={handleChange}\n// the rest of the component code ...   \n```"]