["```js\ndescribe(\"A sample test suite to test jasmine assertion\", function() {  \n   // .. implemented code block \n}); \n\n```", "```js\ndescribe(\"A sample test suite to test jasmine assertion\", function() { \n    var a; \n    it(\"Title for a spec\", function() { \n        // .. implemented code block \n    }); \n}); \n\n```", "```js\ndescribe(\"A sample test suite to test jasmine assertion\", function() {  \n    var a, b; \n    it(\"Title for a spec\", function() { \n        var a = true; \n        expect(a).toBe(true); \n        expect(b).not.toBe(true); \n    }); \n}); \n\n```", "```js\ndescribe(\"A sample test suite to test jasmine assertion\", function() { \n    var a=0;    \n    beforeEach(function() { \n        a +=1; \n    }); \n    afterEach(function() { \n        a =0; \n    }); \n    it(\"Title for a spec 1\", function() { \n        expect(a).toEqual(1); \n    }); \n    it(\"Title for a spec 2\", function() { \n        expect(a).toEqual(1); \n        expect(a).not.toEqual(0); \n    }); \n}); \n\n```", "```js\ndescribe(\"A sample test suite to test jasmine assertion\", function() { \n    var myObj, a, fetchA; \n    beforeEach(function() { \n        myObj = { \n            setA: function(value) { \n                a = value; \n            }, \n            getA: function(value) { \n                return a; \n            }, \n        }; \n        spyOn(myObj, \"getA\").and.returnValue(789); \n        myObj.setA(123); \n        fetchA = myObj.getA(); \n    }); \n\n    it(\"tracks that the spy was called\", function() { \n         expect(myObj.getA).toHaveBeenCalled(); \n    }); \n    it(\"should not affect other functions\", function() { \n        expect(a).toEqual(123); \n    }); \n    it(\"when called returns the requested value\", function() { \n        expect(fetchA).toEqual(789); \n    }); \n}); \n\n```", "```js\nSpecRunner.html: \n<!DOCTYPE HTML> \n<html> \n<head> \n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"> \n    <title>Jasmine Spec Runner v2.4.1</title> \n    <link rel=\"shortcut icon\" type=\"image/png\" href=\"lib/jasmine-2.4.1/jasmine_favicon.jpg\"> \n    <link rel=\"stylesheet\" type=\"text/css\" href=\"lib/jasmine-2.4.1/jasmine.css\"> \n\n    <script type=\"text/javascript\" src=\"img/jasmine.js\"></script> \n    <script type=\"text/javascript\" src=\"img/jasmine-html.js\"></script> \n    <script type=\"text/javascript\" src=\"img/boot.js\"></script> \n    <!-- include source files here... --> \n    <script type=\"text/javascript\" src=\"img/mySource.js\"></script> \n    <!-- include spec files here... --> \n    <script type=\"text/javascript\" src=\"img/mySpec.js\"></script> \n</head> \n<body> \n</body> \n</html> \n\nsrc/mySource.js: \nvar a, \nmyObj = { \n    setA: function(value) { \n        a = value; \n    }, \n    getA: function(value) { \n        return a; \n    }, \n}; \n\nSpec/mySpec.js: \ndescribe(\"A sample test suite to test jasmine assertion\", function() { \n    var fetchA; \n    beforeEach(function() { \n        spyOn(myObj, \"getA\").and.returnValue(789); \n        myObj.setA(123); \n        fetchA = myObj.getA(); \n    }); \n\n    it(\"tracks that the spy was called\", function() { \n         expect(myObj.getA).toHaveBeenCalled(); \n    }); \n    it(\"should not affect other functions\", function() { \n        expect(a).toEqual(123); \n    }); \n    it(\"when called returns the requested value\", function() { \n        expect(fetchA).toEqual(789); \n    }); \n}); \n\n```", "```js\nsrc/unit-tests.html: \n\n<!DOCTYPE html> \n<html> \n<head> \n    <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8\"> \n    <title>NG2 App Unit Tests</title> \n    <link rel=\"stylesheet\" href=\"node_modules/jasmine-core/lib/jasmine-core/jasmine.css\"> \n    <script src=\"img/jasmine.js\"></script> \n    <script src=\"img/jasmine-html.js\"></script> \n    <script src=\"img/boot.js\"></script> \n    <script src=\"img/mysource.js\"></script> \n    <script src=\"img/my.spec.js\"></script> \n\n</head> \n<body> \n</body> \n</html> \n\napp/mysource.ts: \nexport class Source { \n    // ...  \n} \n\nsrc/my.spec.ts: \ndescribe('1st tests', () => { \n    it('true is true', () => expect(true).toEqual(true)); \n\n    it('null is not the same thing as undefined', \n        () => expect(null).not.toEqual(undefined) \n    ); \n}); \n\n```"]