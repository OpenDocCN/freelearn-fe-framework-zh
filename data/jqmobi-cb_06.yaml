- en: Chapter 6. List Views
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 6 章. 列表视图
- en: 'In this chapter we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中我们将涵盖：
- en: Using inset and non-inset lists
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用嵌入式和非嵌入式列表
- en: Creating a custom numbered list
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义编号列表
- en: Using a nested list
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用嵌套列表
- en: Using a read-only nested list
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用只读的嵌套列表
- en: Formatting content in a list
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 格式化列表中的内容
- en: Using a split button list
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用分隔按钮列表
- en: Using image icons
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用图标
- en: Creating a custom search filter
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义搜索过滤器
- en: Modifying a list with JavaScript
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用 JavaScript 修改列表
- en: Introduction
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: 'A simple list in jQuery Mobile is created using the following code:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 通过以下代码创建 jQuery Mobile 中的简单列表：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The previous code is a regular HTML unordered list to which you add the attribute
    `data-role='listview'`. The framework now enhances the list, styles it, and makes
    it mobile friendly. It adds a right arrow for the anchor elements and when you
    tap any of the list items, the page in the link is loaded into the DOM and opened
    using AJAX transition when possible.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码是一个普通的 HTML 无序列表，你可以在其中添加属性`data-role='listview'`。框架现在可以增强、美化并移动端友好地呈现该列表。它为锚点元素添加了右箭头，并且当你点击列表中的任何项目时，链接的页面会被加载到
    DOM 中，并在可能时使用 AJAX 过渡打开。
- en: Using inset and non-inset lists
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用嵌入式和非嵌入式列表
- en: An **inset list** is a list embedded within a container (a page or form or another
    list). This recipe shows you how to create inset and non-inset lists. The recipe
    also highlights what you need to take care while using non-inset lists with other
    form controls.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**嵌入式列表**是嵌入在容器（页面、表单或其他列表）中的列表。本教程向你展示了如何创建嵌入式和非嵌入式列表，并强调了在使用非嵌入式列表与其他表单控件时需要注意的事项。'
- en: Getting ready
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Copy the full code of this recipe from the `code/06/inset-list` sources folder.
    This code can be launched using the URL `http://localhost:8080/06/inset-list/main.html`.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 从`code/06/inset-list`源文件夹中复制本教程的完整代码。该代码可通过以下URL启动：`http://localhost:8080/06/inset-list/main.html`。
- en: How to do it...
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'Create `main.html` with three lists and a few buttons as shown in the following
    code:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按如下代码在`main.html`中创建三个列表和几个按钮：
- en: '[PRE1]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: How it works...
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In the code, the first list is an inset list and the other two are non-inset
    lists. You can create an inset list by adding the attribute `data-inset='true'`
    to a list. This styles the list with rounded corners and gives it a nice margin
    of `15px` on all four sides. If you place buttons or any other form controls next
    to inset lists, the layout is automatically adjusted.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码中，第一个列表是嵌入式列表，其他两个是非嵌入式列表。你可以通过在列表中添加属性`data-inset='true'`来创建嵌入式列表。这样可以使列表的四周都有`15px`的美化边距。如果你将按钮或其他形式控件放在嵌入式列表旁边，布局会自动调整。
- en: The next list in the code is a non-inset list and it does not have the `data-inset`
    attribute. The framework adds a padding of `-15px` to this list and stretches
    it to fill the entire width of the screen. If you place buttons or any other form
    controls next to this list, the controls will overlap each other due to the negative
    padding. This list has rectangular corners.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 代码中的下一个列表是非嵌入式列表，没有`data-inset`属性。框架会给该列表加上`-15px`的填充，让它拉伸至整个屏幕宽度。如果你将按钮或其他表单控件放在该列表旁边，由于负填充，这些控件会重叠在一起。该列表具有矩形角落。
- en: 'The third list in the code is also a non-inset list. But the overlapping of
    controls is handled here by using the attribute `style=''margin: 15px''`. This
    adds a margin of `15px` to the list and negates the default padding. The three
    lists are displayed as shown in the following screenshot:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '代码中的第三个列表也是非嵌入式列表。但这里通过使用属性`style=''margin: 15px''`来处理控件重叠的问题。这样可以为列表增加`15px`的边距，并抵消默认填充。三个列表显示如下截图所示：'
- en: '![How it works...](img/7225_06_01.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/7225_06_01.jpg)'
- en: Note
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Add an additional margin when you use non-inset lists with other form controls
    to avoid overlapping of the controls.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用非嵌入式列表与其他表单控件时，添加额外的边距以避免控件重叠。
- en: There's more...
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'You can configure the framework to use inset lists by default in your app.
    You can do this by setting the `inset` option of the `listview` plugin to `true`
    and bind this to the `mobileinit` event as shown in the following code:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以配置框架在你的应用中默认使用嵌入式列表。通过在`listview`插件的`mobileinit`事件中将`inset`选项设置为`true`来实现这一点，如下代码所示：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Setting the listview theme
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置列表视图主题
- en: 'You can use the `data-theme` attribute and set a theme to the list as shown
    in the following code. The list uses swatch `e` in the following code:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`data-theme`属性并像以下代码中所示为列表设置主题。以下代码中列表使用`e`色块：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Setting the theme on list items
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置列表项主题
- en: You can use the `data-theme` attribute with each list item and set different
    themes. The following code sets swatch `e` to the list item **Item 1**, whereas,
    the list item **Item 2** will use swatch `d`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 `data-theme` 属性并为每个列表项设置不同的主题。以下代码将 swatch `e` 设置给列表项 **Item 1**，而列表项 **Item
    2** 将使用 swatch `d`。
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Creating a custom numbered list
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义编号列表
- en: A **numbered list** by default uses decimals in jQuery Mobile. The framework
    uses CSS to add the numbering. JavaScript is used where CSS cannot be used. This
    recipe shows you how to add alphabet numbering to your list using JavaScript.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，**有序列表** 在 jQuery Mobile 中使用十进制数。框架使用 CSS 添加编号。JavaScript 用于无法使用 CSS 的地方。本示例向您展示如何使用
    JavaScript 为列表添加字母编号。
- en: Getting ready
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Copy the full code of this recipe from the `code/06/custom-numbered-list` sources
    folder. This code can be launched using the URL `http://localhost:8080/06/custom-numbered-list/main.html`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 从 `code/06/custom-numbered-list` 源文件夹中复制此示例的全部代码。可以使用 URL `http://localhost:8080/06/custom-numbered-list/main.html`
    启动此代码。
- en: How to do it...
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'In `main.html`, create an ordered and an unordered list as shown in the following
    code:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `main.html` 中，按照以下代码创建一个有序列表和一个无序列表：
- en: '[PRE5]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Add the following script to add alphabet numbering to the unordered list:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下脚本以为无序列表添加字母编号：
- en: '[PRE6]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How it works...
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: The first list in the code is an ordered list and uses decimal numbers by default.
    The next list with `id='alphalist'` is an unordered list. Add the given script
    to the page container or the `<head>` section of `main.html`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 代码中的第一个列表是一个有序列表，默认情况下使用十进制数。接下来的列表具有 `id='alphalist'`，是一个无序列表。将给定的脚本添加到页面容器或
    `main.html` 的 `<head>` 部分。
- en: 'In the script, bind the `pageinit` event to a function that injects the alphabet
    numbering. In this function, call the jQuery `find(''li'')` method to fetch all
    the list items in the list. Loop through each of these items using the jQuery
    `each()` method. In the callback function of `each()`, get the current text of
    the list item using `$(this).html()` and prefix the alphabet (with `normal` font
    weight) to this text. Set this new string (`str`) to the list item by using `$(this).html(str)`.
    Finally increment the alphabet in the loop by using the `charCodeAt()` and `fromCharCode()`
    JavaScript methods. When the page is shown, the two lists are now displayed as
    in the following screenshot:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在脚本中，将 `pageinit` 事件绑定到一个函数，该函数注入字母编号。在这个函数中，使用 jQuery 的 `find('li')` 方法获取列表中的所有列表项。使用
    jQuery 的 `each()` 方法循环遍历每个列表项。在 `each()` 的回调函数中，使用 `$(this).html()` 获取列表项的当前文本，并在此文本前添加字母（使用
    `normal` 字体重量）。通过使用 `$(this).html(str)` 将这个新字符串（`str`）设置给列表项。最后，通过使用 JavaScript
    的 `charCodeAt()` 和 `fromCharCode()` 方法在循环中增加字母。当页面显示时，两个列表现在显示如下截图中所示：
- en: '![How it works...](img/7225_06_02.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理…](img/7225_06_02.jpg)'
- en: There's more...
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容…
- en: You can create any type of numbered lists (such as Roman numerals, small or
    upper case alphabets, bullets and so on) using JavaScript. But you will have to
    ensure that you handle all the scenarios with these lists (for example, handling
    the item numbering of nested lists).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 JavaScript 创建任何类型的编号列表（例如罗马数字、小写或大写字母、项目符号等）。但是，您必须确保处理这些列表的所有情况（例如，处理嵌套列表的项目编号）。
- en: Using a nested list
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用嵌套列表
- en: A **Nested List** is a list that is embedded within the list item of another
    list. A right arrow icon is shown by default on the list item and when you click
    on it, the framework opens a separate sub page to display the nested list. The
    sub page shown uses theme `b` by default for the page header. The framework can
    handle nesting to n-levels. This recipe shows you how to use nested lists and
    also how to fetch the child pages of the nested list using JavaScript.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**嵌套列表** 是一个嵌套在另一个列表项中的列表。默认情况下，列表项上显示右箭头图标，当您点击它时，框架会打开一个单独的子页面来显示嵌套列表。默认情况下，显示的子页面使用主题
    `b` 作为页面标题。框架可以处理到 n 级的嵌套。本示例向您展示如何使用嵌套列表，并且还向您展示如何使用 JavaScript 获取嵌套列表的子页面。'
- en: Getting ready
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Copy the full code of this recipe from the `code/06/nested-list` sources folder.
    This code can be launched using the URL `http://localhost:8080/06/nested-list/main.html`.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 从 `code/06/nested-list` 源文件夹中复制此示例的全部代码。可以使用 URL `http://localhost:8080/06/nested-list/main.html`
    启动此代码。
- en: How to do it...
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: In `main.html`, add the following code to create a list of authors. Add nested
    lists with book names to some of the authors.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `main.html` 中，添加以下代码以创建作者列表。将书名添加到某些作者的嵌套列表中。
- en: '[PRE7]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Add the following script to fetch the child pages of the nested list:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下脚本以获取嵌套列表的子页面：
- en: '[PRE8]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: How it works...
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In the code, add author names as list items with anchor links. Add nested lists
    with book names for the authors **Rabindranath Tagore** and **William Shakespeare**.
    The author **H.G. Wells** does not have a nested list.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码中，使用作者姓名作为带有锚链接的列表项添加作者**拉宾德拉纳特·泰戈尔**和**威廉·莎士比亚**的书名的嵌套列表。作者**H.G.威尔斯**没有嵌套列表。
- en: Add the given script to the page container or the `<head>` tag in `main.html`.
    In the script bind the `pageinit` event to an event handler to call the `childPages`
    method of the **listview plugin** . Iterate through the array of child pages using
    the jQuery `each()` method. In the callback function of `each()`, get the header
    text of the sub pages using the jQuery `find()` method. Find the header div that
    has the attribute `class='ui-title'`. Concatenate this text to a string and once
    all the author sub pages are fetched, set this string as the content of the empty
    `'nestedlists'` div. This will display the list of authors who have a nested list
    of books. The author **H.G. Wells** does not have a nested list and is not shown.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 将给定的脚本添加到页面容器或`main.html`中的`<head>`标签中。在脚本中，将`pageinit`事件绑定到事件处理程序以调用**listview插件**的`childPages`方法。使用jQuery的`each()`方法遍历子页面数组。在`each()`的回调函数中，使用jQuery的`find()`方法获取子页面的标题文本。查找具有属性`class='ui-title'`的标题div。将此文本连接到字符串中，一旦获取了所有作者子页面，将此字符串设置为空的`'nestedlists'`
    div的内容。这将显示具有书籍嵌套列表的作者列表。作者**H.G.威尔斯**没有嵌套列表，不会显示。
- en: '![How it works...](img/7225_06_03.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/7225_06_03.jpg)'
- en: The nested lists are embedded after the anchor link `<a>` tag inside the list
    item `<li>` tag in a list. When you click on this list item, it opens the sub
    page as shown in the following screenshot. The anchor link text is set as the
    header of the sub page and the header uses theme `b` by default.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 嵌套列表嵌入在列表项`<li>`标签中的锚链接`<a>`标签之后。当您单击此列表项时，它会打开子页面，如以下屏幕截图所示。锚链接文本被设置为子页面的标题，并且标题默认使用主题`b`。
- en: '![How it works...](img/7225_06_04.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/7225_06_04.jpg)'
- en: There's more...
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: You will notice the difference in the theme of the sub page compared to the
    main page. The main page uses theme `a` for the page content and header. It uses
    theme `b` for the list. The sub page header is set to theme `b` by default. Since
    the nested list used the `data-theme='a'` attribute, the entire sub page, including
    the nested list, is themed with swatch `a`. This might not be ideal while using
    nested lists in your app. Refer to the recipe *Theming a nested list* in [Chapter
    10](ch10.html "Chapter 10. The Theme Framework"), *The Theme Framework* on how
    to theme a nested list properly.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 您将注意到与主页面相比，子页面的主题差异。主页面使用主题`a`作为页面内容和标题的主题。它使用主题`b`作为列表的主题。子页面标题默认设置为主题`b`。由于嵌套列表使用了`data-theme='a'`属性，因此整个子页面，包括嵌套列表，都使用样式`a`。在您的应用程序中使用嵌套列表时，这可能不是理想的情况。请参阅[第
    10 章](ch10.html "第 10 章。主题框架")中的 *主题化嵌套列表* 示例，*主题框架*，了解如何正确设置嵌套列表的主题。
- en: Theming the header of the sub page of a nested list
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 主题化嵌套列表的子页面标题
- en: 'As seen in this recipe, by default the header of the sub page of a nested list
    is set to swatch `b`. You can use the attribute `data-header-theme` as shown in
    the following code to set the header theme of the sub page:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如本示例所示，默认情况下，嵌套列表的子页面标题设置为样式`b`。您可以使用以下代码中显示的`data-header-theme`属性来设置子页面的标题主题：
- en: '[PRE9]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Configuring the header theme option of a list view
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置列表视图的标题主题选项
- en: 'You can configure the default header theme of nested lists across your app
    by setting the `headerTheme` option of the `listview` plugin. The following code
    sets this to theme `a` and binds it to the `mobileinit` event:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过设置`listview`插件的`headerTheme`选项来配置应用程序中嵌套列表的默认标题主题。以下代码将其设置为主题`a`并绑定到`mobileinit`事件：
- en: '[PRE10]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: See also
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Using a read-only nested list* recipe
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用只读嵌套列表* 示例'
- en: The *Theming a nested list* recipe in [Chapter 10](ch10.html "Chapter 10. The
    Theme Framework"), *The Theme Framework*
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第 10 章](ch10.html "第 10 章。主题框架")中的 *主题化嵌套列表* 示例，*主题框架*'
- en: Using a read-only nested list
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用只读嵌套列表
- en: A **read-only list** is a list that contains non interactive items or items
    that do not have anchor links in them. The framework styles read-only items differently
    compared to the regular items. The read-only items have a lighter or paler shade
    of the theme color and they also have a smaller size as the user is not expected
    to tap on them.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '**只读列表**是包含非交互式项目或不包含锚链接的项目的列表。框架将只读项目与常规项目样式不同。只读项目具有主题颜色较浅的颜色，并且它们的大小也较小，因为预期用户不会点击它们。'
- en: This recipe shows you how to create a read-only nested list and also use **Options**
    to configure list views. It also shows you how to display a nested list as an
    inset list.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方演示了如何创建只读嵌套列表，并使用**选项**配置列表视图。它还演示了如何将嵌套列表显示为插入式列表。
- en: Getting ready
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Copy the full code of this recipe from the `code/06/read-only-list` sources
    folder. This code can be launched using the URL `http://localhost:8080/06/read-only-list/main.html`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 从`code/06/read-only-list`源文件夹复制此配方的完整代码。可以使用 URL `http://localhost:8080/06/read-only-list/main.html`
    启动此代码。
- en: How to do it...
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它的操作方法...
- en: In `main.html`, add the following code to create a list of authors. Add nested
    lists with book names to some of the authors.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`main.html`中，添加以下代码以创建作者列表。为一些作者添加嵌套的书名列表。
- en: '[PRE11]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Add the following script to the page to configure the list view options:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '将以下脚本添加到页面以配置列表视图选项:'
- en: '[PRE12]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: How it works...
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In the code, add author names as list items without any anchor links. Add nested
    lists with books for authors **Rabindranath Tagore** and **William Shakespeare**.
    Author **H.G. Wells** does not have a nested list. Author **Mark Twain** has an
    anchor link. The list uses theme `e`, that is, a yellow color. Items that do not
    have nested lists or anchor links are displayed in a lighter shade and a smaller
    font. Items with nested lists or with anchor links are displayed in a regular
    color and have a bigger font.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码中，将作者名字作为无锚链接的列表项添加。为**拉宾德拉纳特·泰戈尔**和**威廉·莎士比亚**添加嵌套书籍列表。作者**H.G.威尔斯**没有嵌套列表。作者**马克·吐温**有一个锚链接。该列表使用主题`e`，即黄色。没有嵌套列表或锚链接的项目以浅一些的色调和较小的字体显示。具有嵌套列表或锚链接的项目以常规颜色显示，并具有更大的字体。
- en: '![How it works...](img/7225_06_05.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/7225_06_05.jpg)'
- en: 'Add the previous script to the page or the `<head>` tag of `main.html` as shown
    in the code. The script configures the default options of the `listview` plugin.
    In this recipe, the `theme`, `headerTheme`, and `inset` options are configured.
    Use the `headerTheme` option to set the theme of the sub page header to `a` as
    shown in the previous code. Now when you click the list item **Rabindranath Tagore**,
    the sub page is opened for the nested list. The nested list with the header theme
    `a` is displayed as shown in the following screenshot:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '将上述脚本添加到页面或`main.html`的`<head>`标签中，如代码所示。该脚本配置了`listview`插件的默认选项。在此配方中，配置了`theme`，`headerTheme`和`inset`选项。使用`headerTheme`选项将子页面头的主题设置为`a`，如上面的代码所示。现在，当您单击列表项**拉宾德拉纳特·泰戈尔**时，嵌套列表的子页面将打开。具有头部主题`a`的嵌套列表如下图所示:'
- en: '![How it works...](img/7225_06_06.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/7225_06_06.jpg)'
- en: There's more...
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: There may be instances when you want to display the nested list as an inset
    list. You can do this by wrapping the inner list within a `<div>` tag. The framework
    now will not create a sub page for the nested list.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，您可能想要将嵌套列表显示为插入式列表。您可以通过将内部列表包装在`<div>`标签中来实现这一点。框架现在不会为嵌套列表创建子页面。
- en: Note
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注
- en: Calling the `childPages` method on the `listview` plugin will not return the
    lists that are embedded with the `<div>` tag.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在`listview`插件上调用`childPages`方法将不返回嵌入了`<div>`标签的列表。
- en: The list of books of **William Shakespeare** are embedded within the `<div>`
    tag in this recipe and so a nested list is not created.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '**威廉·莎士比亚**的书籍列表在此配方中嵌入在`<div>`标签中，因此没有创建嵌套列表。'
- en: Note
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注
- en: Using inset nested lists will stretch your list vertically and the user will
    have to scroll the page to view all the contents. So use them selectively.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 使用插入嵌套列表会使您的列表垂直拉伸，用户将不得不滚动页面以查看所有内容。因此，请有选择地使用它们。
- en: See also
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Using a nested list* recipe
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用嵌套列表* 配方'
- en: The *Theming a nested list* recipe in [Chapter 10](ch10.html "Chapter 10. The
    Theme Framework"), *The Theme Framework*
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第 10 章](ch10.html "第 10 章。主题框架")中的 *主题化嵌套列表* 配方, *主题框架*'
- en: Formatting content in a list
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在列表中格式化内容
- en: This recipe shows you how to format text in a list item. It also shows you how
    to use collapsible items and **count bubbles** within the list item.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方向你展示了如何在列表项中格式化文本。它还向你展示了如何使用可折叠项目和**计数气泡**在列表项中。
- en: Getting ready
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Copy the full code of this recipe from the `code/06/format-content` sources
    folder. This code can be launched using the URL `http://localhost:8080/06/format-content/main.html`.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 从`code/06/format-content`源文件夹中复制此配方的完整代码。可以使用URL `http://localhost:8080/06/format-content/main.html`启动此代码。
- en: How to do it...
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 怎么做...
- en: 'In `main.html`, add the following code to create a list of modes of transport:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`main.html`中，添加以下代码以创建一个交通方式列表：
- en: '[PRE13]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Add the following script to the page to configure the list view options:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下脚本添加到页面以配置列表视图选项：
- en: '[PRE14]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: How it works...
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Add the three modes of transport as list items as shown in the previous code.
    Add a collapsible block with `data-role='collapsible'` to each of the list items.
    Add a heading text to each of the collapsible block and create a list with different
    vehicle types as its content. Add a string with the style set to `class='ui-li-aside'`.
    This creates a string and positions it on the top right corner of the list item.
    Finally, add the number of vehicles listed and set its style to a **count bubble**
    by using `class='ui-li-count'`. Do this for each of the list items.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 将上一个代码中显示的三种交通方式作为列表项添加。为每个列表项添加一个`data-role='collapsible'`的可折叠块。为每个可折叠块添加一个标题文本，并创建一个带有不同车辆类型的列表作为其内容。添加一个样式设置为`class='ui-li-aside'`的字符串。这将创建一个字符串，并将其位置设置在列表项的右上角。最后，通过使用`class='ui-li-count'`将所列车辆的数量设置为**计数气泡**的样式。对每个列表项都这样做。
- en: 'Add the script shown in the code to the page or the `<head>` tag of `main.html`
    to configure the default values for list options `theme`, `inset`, and `countTheme`.
    The list is now displayed as shown in the following screenshot:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 将代码中显示的脚本添加到页面或`main.html`的`<head>`标签中，以配置列表选项`theme`，`inset`和`countTheme`的默认值。现在列表显示如下所示：
- en: '![How it works...](img/7225_06_07.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/7225_06_07.jpg)'
- en: 'The following image shows the list with one collapsible block expanded:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图片显示了展开了一个可折叠块的列表：
- en: '![How it works...](img/7225_06_08.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/7225_06_08.jpg)'
- en: There's more...
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'You can theme the count bubble using the option `countTheme` as already mentioned
    in this recipe. You can also set the attribute `data-count-theme` on the list
    as shown in the following code:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`countTheme`选项对计数气泡进行主题设置，如本配方中已提到的。您还可以在列表上设置属性`data-count-theme`，如下面的代码所示：
- en: '[PRE15]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Using form controls in a list item
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在列表项中使用表单控件
- en: This recipe shows you how to add a collapsible content with a list to a list
    item. You can also add any form control to a list item as shown in the following
    code. The framework enhances the form control by adding the required padding and
    margins within the list item and makes the form control tap friendly.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方向你展示了如何向列表项添加具有列表的可折叠内容。您还可以像下面的代码中所示向列表项添加任何表单控件。框架通过在列表项内添加所需的填充和边距来增强表单控件，并使表单控件更易于点击。
- en: '[PRE16]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: See also
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 请参阅
- en: The *Using a split button list* recipe
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用分隔按钮列表*配方'
- en: Using a split button list
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用分隔按钮列表
- en: A **split button list** is a list that provides two different actions for the
    same list item. This is created by adding two anchor links to a list item. The
    framework then automatically converts the list item to a split button. Any image
    added to the first link gets scaled down to a thumbnail with a size of `80 x 80px`.
    The second link is replaced with an icon called the **split icon** and is positioned
    at the right-hand side corner of the split button. This recipe shows you how to
    create a split button list to display images in a list.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '**分隔按钮列表**是一个为同一列表项提供两种不同操作的列表。这是通过向列表项添加两个锚链接来创建的。然后，框架会自动将列表项转换为分隔按钮。添加到第一个链接的任何图像都会缩小为`80
    x 80px`大小的缩略图。第二个链接将替换为一个称为**分隔图标**的图标，并位于分隔按钮的右上角。这个配方向你展示了如何创建一个分隔按钮列表来显示列表中的图像。'
- en: Getting ready
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Copy the full code of this recipe from the `code/06/split-button-list` sources
    folder. This code can be launched using the URL `http://localhost:8080/06/split-button-list/main.html`.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 从`code/06/split-button-list`源文件夹中复制此配方的完整代码。可以使用URL `http://localhost:8080/06/split-button-list/main.html`启动此代码。
- en: How to do it...
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 怎么做...
- en: 'Create `main.html` as a multi-page template app. Add a split button list in
    the `#main` page as shown in the following code:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`main.html`作为多页面模板应用程序创建。在`#main`页面中添加一个分隔按钮列表，如下面的代码所示：
- en: '[PRE17]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Add the `#viewphoto` page that will be opened on tapping the left part of the
    split button.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加将在点击拆分按钮左侧时打开的`#viewphoto`页面。
- en: '[PRE18]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Add the `#download` page that will be opened on tapping the split icon.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加将在点击拆分图标时打开的`#download`页面。
- en: '[PRE19]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: How it works...
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Add list items to the list in the `#main` page as shown in the previous code.
    Each list item has two links and both the links are opened as dialogs by setting
    the `data-rel='dialog'` attribute. Point the first link to the `#viewphoto` page.
    Add an image pointing to the photo and add a formatted description to the anchor
    link text. Depending on the size of the thumbnail image, you can add padding to
    the image as shown in the previous code.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在`#main`页面的列表中添加列表项，如前面的代码所示。每个列表项都有两个链接，通过设置`data-rel='dialog'`属性，这两个链接都会作为对话框打开。将第一个链接指向`#viewphoto`页面。添加指向照片的图像，并为锚链接文本添加格式化描述。根据缩略图像的大小，您可以像前面的代码所示添加填充。
- en: 'Point the second link to the `#download` page. The second link is automatically
    converted to a split icon. The right arrow is used by default for the split icon.
    You can configure this by using the `data-split-icon` attribute on the list view.
    Use the `data-split-theme` attribute to theme the split icon. The split button
    list is displayed as shown in the following screenshot:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 将第二个链接指向`#download`页面。第二个链接会自动转换为拆分图标。默认情况下，拆分图标使用右箭头。您可以通过在列表视图上使用`data-split-icon`属性来配置这一点。使用`data-split-theme`属性对拆分图标进行主题设置。拆分按钮列表显示如下图所示：
- en: '![How it works...](img/7225_06_09.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/7225_06_09.jpg)'
- en: 'Tapping on the photo image or the left button in the list item opens the **Photo
    View** dialog as shown in the following screenshot:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 点击照片图像或列表项中的左按钮会打开**照片查看**对话框，如下图所示：
- en: '![How it works...](img/7225_06_10.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/7225_06_10.jpg)'
- en: 'Tapping on the split icon opens the **Download** dialog as shown in the following
    screenshot:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 点击拆分图标会打开**下载**对话框，如下图所示：
- en: '![How it works...](img/7225_06_11.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/7225_06_11.jpg)'
- en: There's more...
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多信息...
- en: To display the photo image in the `#viewphoto` dialog you will have to write
    some JavaScript code to handle the `pagechange` event. This is covered in the
    recipe *Using changePage() to change a page* in [Chapter 9](ch09.html "Chapter 9. Methods
    and Utilities"), *Methods and Utilities*.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 要在`#viewphoto`对话框中显示照片图像，您将需要编写一些JavaScript代码来处理`pagechange`事件。此在[第9章](ch09.html
    "第9章。方法和实用程序") *方法和实用程序*中的 *使用changePage()更改页面* 配方中有所介绍。
- en: Configuring the split button list using listview options
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用listview选项配置拆分按钮列表
- en: 'You can configure the default values for the split icon and the split icon
    theme using the `splitTheme` and `splitIcon` options of the `listview` plugin
    and bind it to the `mobileinit` event. The following code sets the star icon and
    theme `e` as default values for the list view options:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`listview`插件的`splitTheme`和`splitIcon`选项配置拆分图标和拆分图标主题的默认值，并将其绑定到`mobileinit`事件。以下代码将星形图标和主题`e`设置为列表视图选项的默认值：
- en: '[PRE20]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: See also
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: The *Formatting content in a list* recipe
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在列表中格式化内容* 配方'
- en: The *Using image icons* recipe
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用图像图标*配方'
- en: The *Using changePage( )to change a page* recipe in [Chapter 9](ch09.html "Chapter 9. Methods
    and Utilities"), *Methods and Utilities*
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第9章](ch09.html "第9章。方法和实用程序") *方法和实用程序* 中的 *使用changePage( )更改页面* 配方'
- en: Using image icons
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用图像图标
- en: The jQuery Mobile framework adds an icon to the right-hand side of an interactive
    list item (a list item having a link). You can also add an icon to the list item
    text and the framework sizes this icon to fit within `40 x 40px`. This recipe
    shows you how to display icons with list items.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery Mobile框架将图标添加到交互式列表项（具有链接的列表项）的右侧。您还可以将图标添加到列表项文本中，框架会将此图标大小调整为`40 x
    40px`。此配方向您展示如何在列表项中显示图标。
- en: Getting ready
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Copy the full code of this recipe from the `code/06/list-icons` sources folder.
    This code can be launched using the URL `http://localhost:8080/06/list-icons/main.html`.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 从`code/06/list-icons`源文件夹中复制此配方的完整代码。可以使用URL `http://localhost:8080/06/list-icons/main.html`
    启动此代码。
- en: How to do it...
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'In `main.html`, add a list with list items as shown in the following code:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`main.html`中，添加一个包含如下代码的列表：
- en: '[PRE21]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: How it works...
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'Add an image to each of the list items in the list within the anchor link of
    the list item. Set the attribute `class=''ui-li-icon''` to this image element.
    This instructs the framework to style the image as an icon and the image is automatically
    scaled down to fit inside the list item. You can set the required margin to the
    text so that it gets displayed correctly after adjusting for the image size. The
    list is displayed as shown in the following screenshot:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在列表项的锚链接中为每个列表项添加图像。将 `class='ui-li-icon'` 属性设置为此图像元素。这会指示框架将图像样式化为图标，并且图像会自动缩小以适应列表项内。您可以设置所需的边距以便文本在调整图像大小后正确显示。列表显示如下截图所示：
- en: '![How it works...](img/7225_06_12.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/7225_06_12.jpg)'
- en: There's more...
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: For an interactive list item, that is, an item with a link, the framework adds
    a right arrow icon by default at the right-hand side of the list item. This can
    be changed by using the `data-icon` attribute on the list item. The code in this
    recipe uses the `star` icon for the list item.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 对于具有链接的交互式列表项，默认情况下，框架会在列表项的右侧添加一个右箭头图标。可以使用列表项上的 `data-icon` 属性进行更改。本步骤中的代码使用
    `star` 图标作为列表项。
- en: See also
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Formatting content in a list* recipe
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在列表中格式化内容* 的步骤'
- en: The *Using a split button list* recipe
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用分割按钮列表* 的步骤'
- en: Creating a custom search filter
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义搜索过滤器
- en: When a **List Search Filter** is used, the framework runs through the list items
    and displays the items that match the filter text. Alternate text can also be
    used with the search filter. The list item text is ignored when alternate text
    is used. The search is a generic match and any occurrence of the search value
    within the text is displayed in the result.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 **列表搜索过滤器** 时，框架会遍历列表项并显示与过滤文本匹配的项。备用文本也可以与搜索过滤器一起使用。当使用备用文本时，将忽略列表项文本。搜索是一种通用匹配，文本中的任何出现都将显示在结果中。
- en: This recipe shows you how to use a search filter that can search both the list
    item text and alternate text. It also shows you how to configure search filters
    and also how to implement a custom search callback function that uses a custom
    search logic.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 本步骤向您展示如何使用可以同时搜索列表项文本和备用文本的搜索过滤器。它还向您展示了如何配置搜索过滤器，以及如何实现使用自定义搜索逻辑的自定义搜索回调函数。
- en: Getting ready
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Copy the full code of this recipe from the `code/06/custom-search` sources folder.
    This code can be launched using the URL `http://localhost:8080/06/custom-search/main.html`.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 从 `code/06/custom-search` 源文件夹复制此步骤的完整代码。可以使用 URL `http://localhost:8080/06/custom-search/main.html`
    启动此代码。
- en: How to do it...
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: In `main.html`, create the following list of Mobile platforms. The list items
    also contain the OS manufacturer names in the attribute `data-filtertext`.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `main.html` 中，创建以下移动平台列表。列表项还包含属性 `data-filtertext` 中的操作系统制造商名称。
- en: '[PRE22]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Add the following script to the page to configure the default list options:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下脚本添加到页面以配置默认列表选项：
- en: '[PRE23]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The following code snippet includes the list item text in the search text:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码片段包含搜索文本中的列表项文本：
- en: '[PRE24]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The custom search callback is defined as in the following code:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 自定义搜索回调定义如下代码：
- en: '[PRE25]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: How it works...
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In `main.html`, create a list with `id='oslist'.` Add list items for the various
    Mobile OS platforms as shown in the code. Create list items with the attribute
    `data-role='list-divider'` and separate the list items as **Open Source** and
    **Closed**. Add the OS manufacturer name as alternate search text by using the
    `data-filtertext` attribute.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `main.html` 中，创建一个带有 `id='oslist'` 的列表。按照代码所示为各种移动操作系统平台添加列表项。使用属性 `data-role='list-divider'`
    创建列表项，并将列表项分为 **开源** 和 **闭源**。使用 `data-filtertext` 属性将操作系统制造商名称作为备用搜索文本。
- en: Add the given script to the page or the `<head>` tag of `main.html`. Set the
    various list view configuration options like `theme='e'` and `inset='true'`. This
    is a **read-only list** and the list items are shaded with a light yellow color.
    Use the `dividerTheme='e'` option to theme the list divider items. The list divider
    items are styled with a darker shade by the framework.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 将给定的脚本添加到页面或 `main.html` 的 `<head>` 标签中。设置各种列表视图配置选项，如 `theme='e'` 和 `inset='true'`。这是一个
    **只读列表**，列表项着以浅黄色阴影。使用 `dividerTheme='e'` 选项来对列表分隔符项进行主题化。列表分隔符项由框架以较深色调样式化。
- en: 'Next, add the `filter=''true''` and `filterTheme=''e''` options to add a search
    filter to the list and theme it with swatch `e`. Use the `filterPlaceholder` option
    to specify a custom text for the search filter text control (the default is ''`Filter
    Items...`''). Finally set a custom search call back function by setting the option
    `filterCallback=customFilter`. The list is displayed as shown in the following
    screenshot:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，添加 `filter='true'` 和 `filterTheme='e'` 选项，为列表添加搜索过滤器，并使用 `e` 主题对其进行主题化。使用
    `filterPlaceholder` 选项指定搜索过滤器文本控件的自定义文本（默认为 '`Filter Items...`'）。最后，通过设置选项 `filterCallback=customFilter`
    设置自定义搜索回调函数。列表显示如下所示：
- en: '![How it works...](img/7225_06_13.jpg)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/7225_06_13.jpg)'
- en: The default search function in a list matches any occurrence of the search string
    in the text. To override this, define the custom filter callback as shown in the
    previous code. The function accepts two parameters, `text` and `searchValue` .
    Create a regular expression to search for the occurrence of the `searchValue`
    at the start of the word in the given text. The occurrence of the search value
    in between a word is ignored. The regular expression is matched with the text
    using the `match()` method. The `i` parameter makes it case insensitive.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 列表中的默认搜索功能匹配文本中搜索字符串的任何出现。要覆盖此行为，请按照前面的代码所示定义自定义过滤器回调。该函数接受两个参数，`text` 和 `searchValue`。创建一个正则表达式来搜索给定文本中单词开头处的
    `searchValue` 出现。忽略单词之间的搜索值出现。使用 `match()` 方法将正则表达式与文本进行匹配。参数 `i` 使其大小写不敏感。
- en: 'If the `filtertext` attribute is used with a list item, the default search
    uses only this text and ignores the list item text. To use both the list item
    text and the filter text, add a `pageinit` event handler as shown in the previous
    code. In this function, find each list item using the jQuery `find(''li).each()`
    method and in the callback of `each()`, fetch the list item text and add it to
    the filter text. This will not have any visible impact on the list item. But the
    list item text is now part of the filter text and is thus available for the search
    filter. So a search for **a** will list **Android** and **iOS** (the filtertext
    has the value **Apple**). But this will not list **Symbian** or **Bada** which
    contain **a** in between words as seen in the following screenshot:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用 `filtertext` 属性与列表项，那么默认搜索仅使用此文本，忽略列表项文本。要同时使用列表项文本和过滤文本，请添加 `pageinit`
    事件处理程序，如前面的代码所示。在此函数中，使用 jQuery `find('li).each()` 方法找到每个列表项，并在 `each()` 的回调中，获取列表项文本并将其添加到过滤文本中。这不会对列表项产生任何可见影响。但是列表项文本现在是过滤文本的一部分，因此可供搜索过滤器使用。因此，搜索
    **a** 将列出 **Android** 和 **iOS**（filtertext 的值为 **Apple**）。但这不会列出 **Symbian** 或
    **Bada**，因为它们的单词中间包含 **a**，如下屏幕截图所示：
- en: '![How it works...](img/7225_06_14.jpg)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/7225_06_14.jpg)'
- en: 'If you search for **Bo** it shortlists only **Boot2Gecko** as seen in the following
    screenshot:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 如果搜索 **Bo**，则仅将 **Boot2Gecko** 作为候选项，如下屏幕截图所示：
- en: '![How it works...](img/7225_06_15.jpg)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/7225_06_15.jpg)'
- en: There's more...
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The search callback function returns a Boolean value and this indicates if the
    text should be hidden by the search filter. So the search filter callback should
    return `false` for all matching elements. Unmatched text elements return `true`
    and get hidden by the search filter.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索回调函数返回一个布尔值，指示是否应通过搜索过滤器隐藏文本。因此，搜索过滤器回调应为所有匹配元素返回 `false`。不匹配的文本元素返回 `true`，并由搜索过滤器隐藏。
- en: Using data-attribute to configure list divider themes
  id: totrans-196
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用数据属性配置列表分隔主题
- en: 'The recipe uses the `dividerTheme` option to theme the list divider item. You
    can also use the `data-divider-theme` attribute as shown in the following code:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 该示例使用 `dividerTheme` 选项对列表分隔项进行主题化。您还可以使用 `data-divider-theme` 属性，如下面的代码所示：
- en: '[PRE26]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Using data-attribute to configure list search filters
  id: totrans-199
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用数据属性配置列表搜索过滤器
- en: 'The recipe shows you how to use the `filter`, `filterTheme` and `filterPlaceholder`
    options to configure the list view. These can also be set using the `data-filter`,
    `data-filter-theme`, and `data-filter-placeholder` attributes as shown in the
    following code:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 该示例向您展示如何使用 `filter`、`filterTheme` 和 `filterPlaceholder` 选项来配置列表视图。这些选项也可以使用
    `data-filter`、`data-filter-theme` 和 `data-filter-placeholder` 属性进行设置，如下面的代码所示：
- en: '[PRE27]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Modifying a list with JavaScript
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 JavaScript 修改列表
- en: You can use JavaScript to dynamically modify a list and its contents. This recipe
    shows you how to use JavaScript to add or remove list items in a read-only list.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 JavaScript 动态修改列表及其内容。本示例向您展示如何使用 JavaScript 在只读列表中添加或删除列表项。
- en: Getting ready
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Copy the full code of this recipe from the `code/06/scripting-lists` sources
    folder. This code can be launched using the URL `http://localhost:8080/06/scripting-lists/main.html`.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 从 `code/06/scripting-lists` 源文件夹复制此配方的完整代码。此代码可以使用网址 `http://localhost:8080/06/scripting-lists/main.html`
    运行。
- en: How to do it...
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'In `main.html`, add the following code to create an empty list in a layout
    grid:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `main.html` 中，添加以下代码以在布局网格中创建一个空列表：
- en: '[PRE28]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Add the following script to dynamically add or remove list items:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下脚本以动态添加或删除列表项：
- en: '[PRE29]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: How it works...
  id: totrans-211
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Add a two column layout grid to `main.html` using the attribute `class='ui-grid-b'`
    on a `fieldset` container. Add an empty list with `id='numlist'` to the first
    column. Add two buttons with the IDs `addBtn` and `removeBtn` to the second column.
    On clicking these buttons, list items are dynamically updated to the empty list
    in the first column.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `main.html` 中使用 `class='ui-grid-b'` 属性在 `fieldset` 容器上添加一个两列布局网格。在第一列中添加一个空列表，其
    `id='numlist'`。在第二列中添加两个按钮，ID 分别为 `addBtn` 和 `removeBtn`。单击这些按钮时，列表项会动态更新到第一列的空列表中。
- en: Add the given script to the page or the `<head>` section of `main.html`. In
    the script, create an event handler for the `pagecreate` event which gets fired
    before the page is fully initialized. Here, add an event handler for the `create`
    event of the `listview` element. When the `listview` element is created, this
    event is fired. In its callback function, bind the `click` event of the `addBtn`
    and `removeBtn` buttons as shown in the previous code.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 将给定的脚本添加到页面或 `main.html` 的 `<head>` 部分。在脚本中，为 `pagecreate` 事件创建一个事件处理程序，在页面完全初始化之前触发。在此处，为
    `listview` 元素的 `create` 事件添加一个事件处理程序。当创建 `listview` 元素时，将触发此事件。在其回调函数中，绑定 `addBtn`
    和 `removeBtn` 按钮的 `click` 事件，如前述代码所示。
- en: The `addBtn`, when pressed, adds a list item to the list. The list item text
    is kept in memory and incremented on adding new elements. The `removeBtn` when
    pressed, fetches the most recent list item element that was added by calling the
    jQuery `find('li').last()` method. This last element is removed by calling the
    `remove()` method. Call the `refresh()` method on the **listview plugin** after
    any modification to update the list.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 按下 `addBtn` 时，将一个列表项添加到列表中。列表项文本保存在内存中，并在添加新元素时递增。按下 `removeBtn` 时，通过调用 jQuery
    的 `find('li').last()` 方法获取最近添加的列表项元素。通过调用 `remove()` 方法移除此最后一个元素。在对列表进行任何修改后，调用
    **listview 插件** 上的 `refresh()` 方法来更新列表。
- en: 'When the app is started, the display looks like the following screenshot with
    an empty list:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 当启动应用时，显示如下截图所示，其中包含一个空列表：
- en: '![How it works...](img/7225_06_16.jpg)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
  zh: '![它的工作原理...](img/7225_06_16.jpg)'
- en: 'Pressing the **Add** button adds new list items to the list, as in the following
    screenshot:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 按下**添加**按钮会向列表中添加新的列表项，如下面的截图所示：
- en: '![How it works...](img/7225_06_17.jpg)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![它的工作原理...](img/7225_06_17.jpg)'
- en: Pressing the **Remove** button removes the recently added list item.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 按下**删除**按钮会删除最近添加的列表项。
- en: '![How it works...](img/7225_06_18.jpg)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![它的工作原理...](img/7225_06_18.jpg)'
- en: There's more...
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: As mentioned in this recipe, you have to call the `refresh()` method on the
    **listview plugin** after any modification. On adding new list items or on removing
    list items, the `refresh()` method triggers an update of the list and applies
    the necessary styles and enhancements on the list items.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 正如此配方中所述，您必须在对列表进行任何修改后调用 **listview 插件** 上的 `refresh()` 方法。在添加新列表项或删除列表项时，`refresh()`
    方法会触发列表的更新，并在列表项上应用必要的样式和增强效果。
- en: '[PRE30]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
