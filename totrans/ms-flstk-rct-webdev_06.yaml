- en: AWS S3 for Image Upload and Wrapping Up Key Application Features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Currently we have an app that works but is missing some key features. Our focus
    for this chapter will include the following feature implementations/improvements:'
  prefs: []
  type: TYPE_NORMAL
- en: Opening a new AWS account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating **Identity and Access Management** (**IAM**) for your AWS account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up an AWS S3 bucket
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding the ability to upload a photo for an article (add and edit article covers)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding the ability to set up a title, subtitle, and "overlay subtitle" (on the
    add/edit article views)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Articles on the dashboard currently have HTML in the content; we need to improve
    that:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00053.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We need to finish this stuff. After we are done with these improvements, we
    will do some refactoring.
  prefs: []
  type: TYPE_NORMAL
- en: AWS S3 - an introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Amazon's AWS S3 is a simple storage service for static assets such as images
    on Amazon's servers. It helps you host safe, secure, and highly scalable objects
    (as images) in the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: This approach of storing static assets online is quite convenient and easy--this
    is why we will use it throughout our book.
  prefs: []
  type: TYPE_NORMAL
- en: We will use it in our application, as it gives us many scalability features
    that wouldn't be so easy to access when hosting image assets on our own Node.js
    server.
  prefs: []
  type: TYPE_NORMAL
- en: In general, Node.js shouldn't be used for hosting assets larger than what we
    use it for now. Don't even think of implementing an image-upload mechanism (not
    recommended at all) on the Node.js server--we will employ Amazon's services for
    that.
  prefs: []
  type: TYPE_NORMAL
- en: Generating keys (access key ID and secret key)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we start adding a new S3 bucket, we need to generate keys for our AWS
    account (`accessKeyId` and `secretAccessKey`).
  prefs: []
  type: TYPE_NORMAL
- en: 'An example set of details that we will need to keep in our Node.js app is as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: What is a bucket in Amazon S3? A **bucket** is a kind of namespace for files
    that you have in Amazon S3\. You can have several buckets associated with different
    projects. As you can see, our next steps will be creating the `accessKeyId` and
    `secretAccessKey` associated with your `accountDefine` and `bucketKey` (kind of
    a namespace for the pictures for our articles). Define a region where you want
    to keep the files physically. If your project has a target specified for a location,
    it will speed up the loading of images and, in general, limit the latency because
    an image will be hosted closer to the client/user of our publishing application.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create an AWS account, go to [https://aws.amazon.com/](https://aws.amazon.com/):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00054.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Create an account or sign in to your account:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00055.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The next step is to create the IAM, described in detail in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: '**Regarding AWS creation** After you create an account for a certain region,
    if you want to create an S3 bucket, you need to choose the same region your account
    is assigned to; otherwise, you may have problems while setting up S3 in the following
    pages.'
  prefs: []
  type: TYPE_NORMAL
- en: IAM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s prepare our new `accessKeyId` and `secretAccessKey`. You need to visit
    the IAM page in your Amazon console. You can find it in the Services list:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00056.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The IAM page looks like this ([https://console.aws.amazon.com/iam/home?#home](https://console.aws.amazon.com/iam/home?#home)):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00057.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Go to IAM Resources | Users:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00058.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'On the next page, you will see a button; click on it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00059.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'After clicking, you will see a form. Fill it in with at least one user, as
    in this screenshot (the screenshots are giving you the exact steps that you must
    accomplish, even if AWS''s UX has been changed in the meantime):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00060.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'After clicking on the Create button, copy the keys to a safe place (we will
    use them in a moment):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00061.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Do not forget to copy the keys (access key ID and secret access key). You will
    learn where to put them in the code in order to use S3 services later in the book.
    Of course, the ones in the screenshot aren't active. They are only examples; you
    need to have your own.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up S3 permissions for the user
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The last thing is to add AmazonS3FullAccess permissions with the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the Permissions tab:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00062.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on Attach Policy and choose AmazonS3FullAccessAfter. After attaching
    it, it will be listed as in the following example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00063.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now we'll move on to creating a new bucket for the image files.
  prefs: []
  type: TYPE_NORMAL
- en: 'You are done with the keys and you have granted the S3 policy for the keys;
    now, we need to prepare the bucket that will keep the images. First of all, you
    need to go to the AWS console main page, which looks as follows ([https://console.aws.amazon.com/console/home](https://console.aws.amazon.com/console/home)):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00064.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You will see something like AWS Services SHOW ALL SERVICES (alternatively,
    find it from the Services list the same way as IAM):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00065.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on S3 - Scalable Storage in the Cloud (as in the previous screenshot).
    After that, you will see a view similar to this (I have six buckets; you will
    have zero when you have a new account):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00066.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In that bucket, we will keep the static images of our articles (you will learn
    how exactly in the coming pages).
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a bucket by clicking on the Create Bucket button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00067.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Choose thepublishing-app name (or another that works for you).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00068.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In the screenshot, we have chosen Frankfurt. But if, for example, when you create
    an account and your URL shows `"?region=us-west-2"`, then choose Oregon. It's
    important to create the S3 bucket in the region that you have assigned your account
    to.
  prefs: []
  type: TYPE_NORMAL
- en: 'After the bucket has been created, click on it from the bucket list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00069.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The empty bucket with the publishing-app name will look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00070.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'When you are in this view, the URL in the browser tells you the exact region
    and bucket (so you can use it later when performing configuration on the backend):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The last thing is to make sure that the CORS configuration for the publishing-app
    bucket is correct. Click on the Properties tab in that view, and you will get
    a detailed view of it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00071.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, click on the Add CORS button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00072.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'After that, paste the following into the text area  (the following is the cross-origin
    resource sharing definition; it defines a way for the Pub app which is loaded
    in one domain to interact with resources in a different domain within the AWS
    services):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'It will now look like the following example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00073.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Click on the Save button. After all the steps are done, we can start with coding
    the image upload feature.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Coding the image upload feature in the AddArticleView
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before you are able to continue, you need to have your access details for your
    S3 bucket that you created in the previous pages. `AWS_ACCESS_KEY_ID` comes from
    a previous subsection, where we created a user while being in that view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00074.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: '`AWS_SECRET_ACCESS_KEY` is the same as the AWS access key (as you can already
    guess by the name itself). `AWS_BUCKET_NAME` is the name of your bucket (in our
    book, we''ve called it publishing-app). For `AWS_REGION_NAME`, we will use `eu-central-1`.'
  prefs: []
  type: TYPE_NORMAL
- en: The easiest way to find `AWS_BUCKET_NAME` and `AWS_REGION_NAME` is to look at
    the URL while you are in that view (described in the previous subsection).
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00075.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Check the browser''s URL in that view: `https://console.aws.amazon.com/s3/home?region=eu-central-1#&bucket=publishing-app&prefix=`'
  prefs: []
  type: TYPE_NORMAL
- en: The region and bucket names are clearly in that URL (I want to make this very
    clear as your region and bucket name can be different, depending on where you
    live).
  prefs: []
  type: TYPE_NORMAL
- en: Also, make sure that your CORS are set up correctly and your permissions/attach
    policy is done exactly as described above. Otherwise, you can have problems with
    everything described in the following subsections.
  prefs: []
  type: TYPE_NORMAL
- en: Environment variables in Node.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will pass all four parameters (`AWS_ACCESS_KEY_ID`, `AWS_SECRET_ACCESS_KEY`,
    `AWS_BUCKET_NAME`, and `AWS_REGION_NAME`) via the node's environment variables.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s install a node library that will create environment variables
    from a file so that we will be able to use them within our localhost:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: What are these environment variables? In general, we will use them to pass the
    variables of some sensitive data to the app--we are talking here specifically
    about AWS secret keys and MongoDB's login/password information for the current
    environment setup (if it is development or production).
  prefs: []
  type: TYPE_NORMAL
- en: 'You can read those environment variables via accessing them, like in the following
    examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'In our local development environment, we will keep that information in the
    server''s directory, so do this from your command prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'You have created a `server/.env` file; the next step is to put content in it
    (from this file, the `node-env-file` will read the environment variables when
    our app is running):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, you can see the structure of a node''s environment file. Each new line
    comes with a key and value. There, you need to paste the keys you created while
    reading this chapter. Replace those values with your own: `*_*_ACCESS_KEY_HERE_*_`
    and `_*_SECRET_KEY_HERE_**_`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'After you have created the `server/.env` file, install the required dependency
    that will abstract the whole gig with the image upload; use `npm` for this when
    in the project''s directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The `react-s3-uploader` component works quite well for our use case, and it
    abstracts the `aws-sdk` features for us quite well. The main point here is that
    we need to have configured the `.env` file well (with the correct variables) and
    the `react-s3-uploader` will do the job at the backend and frontend for us (as
    you will see soon).
  prefs: []
  type: TYPE_NORMAL
- en: Improving our Mongoose article schema
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We need to improve the schema, so we will have a place in our article collection
    for storing the URL of an image. Edit the old article schema:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Change it to the new, improved version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we have introduced the `articlePicUrl` with a default value
    of `/static/placeholder.png`. Now, we will be able to save an article with a picture's
    URL variable in the article's object.
  prefs: []
  type: TYPE_NORMAL
- en: If you forgot to update the Mongoose model, then it won't let you save that
    value into the database.
  prefs: []
  type: TYPE_NORMAL
- en: Adding routes for S3's upload
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We need to import one new library into the `server/server.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll end up with something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: I'm putting all this here so you can make sure that your `server/server.js`
    file matches this.
  prefs: []
  type: TYPE_NORMAL
- en: 'One more thing to do is to modify the `server/index.js` file. Find this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Change it to the following improved version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Just for clarification, `env(__dirname + '/.env');` is telling us the location
    of the `.env` file in our structure (you can find from `console.log` that the
    `__dirname` variable is a system location of a server's file--this must match
    the real `.env` file's location so it can be found by the system).
  prefs: []
  type: TYPE_NORMAL
- en: 'The next part is to add this to our `server/server.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: As you can see here, we have started using the environment variable that we
    defined in the `server/.env` file. For me, the `process.env.AWS_BUCKET_NAME` is
    equal to `publishing-app`, but if you have defined it differently, then it will
    retrieve another value from `server/.env` (thanks to the `env` express middleware
    that we just defined).
  prefs: []
  type: TYPE_NORMAL
- en: Based on that backend configuration (environment variables and setting up `s3router`
    with `import s3router from 'react-s3-uploader/s3router'`), we will be able to
    use the AWS S3 bucket. We need to prepare the frontend, which first will be implemented
    on the add-an-article view.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the ImgUploader component on the frontend
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will create a dump component called `ImgUploader`. This component will use
    the `react-s3-uploader` library, which does the job of abstracting the upload
    to Amazon S3\. On a callback, you receive `information:onProgress`, and you can
    find the progress in percent with that callback, so a user can see the status
    of an `uploadonError`. This callback is fired when an error `occursonFinish`:
    this callback sends us back the location of a file that has been uploaded to S3.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You will learn more details further in the chapter; let''s create a file first:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'You have created the `src/components/articles/ImgUploader.js` file, and the
    next step is to prepare the imports. So to the top of the `ImgUploader` file,
    add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: As you can see here, we have initiated the `ImgUploader` component with `div`
    that returns a temporary placeholder in the `render` function.
  prefs: []
  type: TYPE_NORMAL
- en: We have also prepared `propTypes` with a required property called `updateImgUrl`.
    This will be a callback function that will send a final, uploaded image's location
    (which has to be saved in the database--we will use this `updateImgUrl` props
    in a moment).
  prefs: []
  type: TYPE_NORMAL
- en: 'In the state of that `ImgUploader` component, we have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: In these variables, we will store all the states of our components, depending
    on the current status and `props.articlePicUrl`, and we'll send the URL details
    up to the `AddArticleView` component (we will do it later in the chapter, after
    finishing the `ImgUploader` component).
  prefs: []
  type: TYPE_NORMAL
- en: Wrapping up the ImgUploader component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The next step is to improve the `uploadFinished` function in our `ImgUploader`,
    so find the old empty function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace it with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the `uploadDetails.filename` variable comes from the `ReactS3Uploader`
    component, which we have imported on top of the `ImgUploader` file. After a successful
    upload, we set the `uploadProgress` back to `null`, set the details of our upload,
    and send back the details via the callback using `this.props.updateImgUrl(articlePicUrl)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to improve our `render` function in `ImgUploader`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'This render is incomplete, but let''s describe what we have added so far. The
    code is simply all about getting information about `uploadProgress` via `this.state`
    (the first `if` statement). The `else if(this.state.articlePicUrl)` is all about
    rendering the image after the upload is complete. Okay, but where we will get
    that information? Here is the rest:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The `uploaderJSX` variable is the exact same as our `react-s3-uploader` library.
    As you can see from the code, for progress, we set the state with `uploadProgress:
    { progressInPercent, uploadStatusText }` and we set up `uploadError: null` (in
    case the user receives an error message). On error, we set the state, so we can
    tell the user. On finish, we run the `uploadFinished` function, which was described
    in detail previously.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The complete `render` function of `ImgUploader` will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, this is the whole render of `ImgUploader`. We use an inline-styled
    `Paper` component (from `material-ui`), so the whole thing will look better to
    an article's end user/editor.
  prefs: []
  type: TYPE_NORMAL
- en: AddArticleView improvements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We need to add the `ImgUploader` component to `AddArticleView`; first, we need
    to import it into the `src/views/articles/AddArticleView.js` file, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, in the constructor of `AddArticleView`, find this old code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Change it to the following improved version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we have bound this to the `updateImgUrl` function and added
    a new state variable called `articlePicUrl` (by default, we will point to `/static/placeholder.png`
    in case a user doesn't choose a cover).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s improve the functions of this component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Change this code to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, we have added `articlePicUrl: this.state.articlePicUrl` to
    the `newArticle` object. We have also introduced a new function called `updateImgUrl`,
    which is simply a callback that sets a new state with the `articlePicUrl` variable
    (in `this.state.articlePicUrl`, we keep the image URL of the current article that
    is going to be saved to the database).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The only thing to improve in `src/views/articles/AddArticleView.js` is our
    current render. Here is the old one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to improve this code using `ImgUploader`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: You can see that we use the properties for sending down the current `articlePicUrl`
    (this will be handy later and also give us the default `placeholder.png` location)
    and the callback to update the `img` URL, called `updateImgUrl`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you visit `http://localhost:3000/add-article`, you will see a new image
    picker between the WYSIWYG box and the SUBMIT ARTICLE button (check the screenshot):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00076.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Of course, if you followed all the instructions correctly, after clicking on
    Choose File, you will be able to upload a new image to the S3 bucket, and the
    image in the thumbnail will be replaced, as in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00077.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, we can upload an image. The next step is to unmock viewing them
    so we can see that our article has a dog on the cover (and the dog's image comes
    from our article collection in the DB).
  prefs: []
  type: TYPE_NORMAL
- en: Some remaining tweaks for PublishingApp, ArticleCard, and DashboardView
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can add an article. We need to unmock the image URLs in our views so we can
    see the real URL from the database (instead mocked in an `img src` property).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start with `src/layouts/PublishingApp.js` and improve the old `_fetch`
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace this code with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we have started to fetch `articlePicUrl` via the `falcorModel.get`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step, also in the `PublishingApp` file, is to improve the `render`
    function, so you need to improve the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Add to it a new property, which will pass down the image URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we are passing the fetched `articlePicUrl` to the `ArticleCard`
    component.
  prefs: []
  type: TYPE_NORMAL
- en: Improving the ArticleCard component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After we pass the `articlePicUrl` variable via properties, we need to improve
    the following (`src/components/ArticleCard.js`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Change it to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: At the beginning of `render`, we use `let articlePicUrl = this.props.articlePicUrl
    || '/static/placeholder.png';`, and later, we use that in our image's JSX (`img
    src={articlePicUrl} height='190'`).
  prefs: []
  type: TYPE_NORMAL
- en: 'After these two changes, you can see the article with a real cover, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00078.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Improving the DashboardView component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s improve the dashboard with the cover, so in `src/views/DashboardView.js`,
    find the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace it with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we have replaced the mocked placeholder with a real cover photo,
    so on our articles dashboard (which is available after login) we will find real
    images in the thumbnails.
  prefs: []
  type: TYPE_NORMAL
- en: Editing an article's cover photo
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Regarding the article''s photo, we need to make some improvements in the `src/views/articles/EditArticleView.js`
    file, such as importing `ImgUploader`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'After you have imported `ImgUploader`, improve the constructor of `EditArticleView`.
    Find the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace it with the new, improved constructor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we have bound this to the new `updateImgUrl` function (which
    will be the `ImgUploader` callback), and we create a new default state for the
    `articlePicUrl`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to improve the current `_fetchArticleData` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace it with the following improved code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Here, we have added to an initial fetch some new `this.setState` variables,
    such as `articlePicUrl`, `contentJSON`, and `htmlContent`. The article fetch is
    here because we need to set up a cover in the `ImgUploader` of a current image
    that might potentially be changed. The `contentJSON` and `htmlContent` is here
    in case the user doesn't edit anything in the WYSIWYG editor and we need to have
    a default value from the database (otherwise, the edit button would save empty
    values into the database and break the whole editing experience).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s improve the `_articleEditSubmit` function. This is the old code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Change to the following improved version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'The next step is to add a new function to the `EditArticleView` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'The last step in order to finish the article-editing cover is to improve the
    old render:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace it with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we have added `ImgUploader` and styled it exactly the same way
    as in `AddArticleView`. The rest of `ImgUploader` does the job for us in order
    to allow our users to edit article photos.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00079.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In this screenshot, you can see how the edit view should look after all the
    recent improvements.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the ability to add/edit the title and subtitle of an article
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In general, we shall improve the article''s model in the `server/configMongoose.js`
    file. Start by finding the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace it with the improved code, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we have added a lot of required properties in our model; this
    will affect the ability to save incomplete objects, so in general, our model will
    be more consistent throughout the life of our publishing app.
  prefs: []
  type: TYPE_NORMAL
- en: We have also added a new property to our model called `articleSubTitle`, which
    we will be using later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: AddArticleView improvements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In general, we will add two `DefaultInput` components (title and subtitle),
    and the whole form will be using `formsy-react`, so in `src/views/articles/AddArticleView.js`,
    add new imports:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'The next step is to improve `async _articleSubmit`, so change the old code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace it with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we have added `articleModel` in the `_articleSubmit` arguments;
    this will come from `formsy-react`, the same way we implemented it in the `LoginView`
    and `RegisterView`. We have also added the `articleSubTitle` property to the `newArticle`
    object.
  prefs: []
  type: TYPE_NORMAL
- en: 'The old `render` function return looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Change it to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Based on the changes in the Mongoose config and in the `AddArticleView` component,
    you are now able to add a title and subtitle to a new article, as in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00080.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We're still missing the ability to edit the title and subtitle, so let's implement
    that now.
  prefs: []
  type: TYPE_NORMAL
- en: Ability to edit an article title and subtitle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Go to the `src/views/articles/EditArticleView.js` file and add new imports
    (in a similar way to the `add` view):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Improve the old `_articleEditSubmit` function from the current version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Change it to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, we do the same thing as in the `AddArticleView`, so you should
    be familiar with it. The last thing to do is update `render` so that we are able
    to input the title and subtitle that will be sent as a callback to `_articleEditSubmit`
    with data in the `articleModel`. The old return in the `render` function is as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'The new improved return in the `render` function is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: We are doing the same thing here as we did in the `AddArticleView`. We are introducing
    `Formsy.Form`, which is calling back the article's title and subtitle when a user
    hits the submit button (SUBMIT EDITION).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of how it should look:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00081.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: ArticleCard and PublishingApp improvements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Improve the `render` function in `ArticleCard` so it will also show the subtitle
    (currently, it''s mocked). The `src/components/ArticleCard.js` file''s old content
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s change this to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we have defined a new `subTitle` variable and have then used
    it in the `CardHeader` and `CardMedia` components, so now it will show the subtitle
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another thing to do is to make the `PublishingApp` also fetch the subtitle
    that has been introduced in the chapter, so we need to improve the following old
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace it with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we have started `falcorModel.get` with the `articleSubTitle`
    property.
  prefs: []
  type: TYPE_NORMAL
- en: 'Of course, we need to pass this `subTitle` property to the `ArticleCard` component
    in the `PublishingApp` class''s `render` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'In the end, we will get the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'After all these changes on the main page, you can find an edited article with
    the title, subtitle, cover photo, and content (created by our WYSIWYG editor):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00082.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Dashboard improvement (now we can strip the remaining HTML)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The last step in this chapter is to improve the dashboard. It will string the
    HTML from the props in order to make a better look and feel when a user will browse
    our application. Find the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace it with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, we simply strip the HTML tags from the HTML so that we will
    get better `secondaryText` without the HTML markup, as in this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00083.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have implemented all of the features that are within the book's scope. The
    next step is to start working on the deployment of this application.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to improve your coding skills, it's a good idea to implement some
    features completely on your own. These are some ideas for features that are still
    missing from our publishing app.
  prefs: []
  type: TYPE_NORMAL
- en: We could have a separate link to a certain article so you can share it with
    a friend. This could be useful if you want to create a human-readable unique slug
    associated with a certain article in the database. So, instead of linking to something
    such as [http://reactjs.space/570b6e26ae357d391c6ebc1d](http://reactjs.space/570b6e26ae357d391c6ebc1d)
    (`reactjs.space` is a domain that we will use on our production server), a user
    can share a link such as [http://reactjs.space/an-article-about-a-dog](http://reactjs.space/an-article-about-a-dog).
  prefs: []
  type: TYPE_NORMAL
- en: There could be a way to associate an article with the editor who posted it.
    Currently, it's mocked. You can unmock it.
  prefs: []
  type: TYPE_NORMAL
- en: A user can't change their user details while they are logged in--this could
    be a good way to practice more full-stack development.
  prefs: []
  type: TYPE_NORMAL
- en: A user can't set up their avatar's image--you can add this feature in a similar
    way to how we implemented the image cover.
  prefs: []
  type: TYPE_NORMAL
- en: Create a more robust Draft.JS WYSIWYG editor with plugins. Robust plugins are
    easy to implement for mentions, stickers, emoji, hashtags, undo/redo, and more.
    Visit [https://www.draft-js-plugins.com/](https://www.draft-js-plugins.com/) for
    more details about them. Implement one or two that you like the most.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will start deploying our MongoDB instance online using
    [www.mLab.com](http://www.mLab.com), which is a Database-as-a-Service provider
    and helps us build scalable MongoDB nodes with ease.
  prefs: []
  type: TYPE_NORMAL
- en: Let's start with the deployment fun!
  prefs: []
  type: TYPE_NORMAL
