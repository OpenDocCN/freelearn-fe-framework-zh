["```js\nconst aFunctionWrittenByOthers = () => {}\n```", "```js\nconst aFunction = () => {\n  aFunctionWrittenByOthers()\n  ...\n}\n```", "```js\nconst useUsername = (initialFirst, initialLast) {\n  const [firstName, setFirstname] = useState(initialFirst)\n  const [lastName, setLastname] = useState(initialLast)\n  const fullname = firstName + ' ' + lastName \n  return { fullname, setFirstname, setLastname }\n}\n```", "```js\nconst Title = () => {\n  const { fullname } = useUsername('John', 'Doe')\n  ...\n}\n```", "```js\nconst useNotAHook = (a) => {\n  return a\n}\nconst Title = () => {\n  return useNotAHook()\n}\n```", "```js\nconst useValue = (v) => {\n  const [value] = useState(v)\n  return value\n}\n```", "```js\nconst useToggle = (initialStatus = false) => {\n  const [status, setStatus] = useState(initialStatus)    \n  const toggle = () => {\n    dispatch(status => !status)\n  )    \n  return [status, toggle]\n}\n```", "```js\n    const toggle = (newStatus) => () => {\n      if (newStatus === undefined) {\n        setState(status => !status)\n      } else {\n        setState(newStatus)\n      }\n    }\n```", "```js\nconst toggle = (newStatus) => {\n      return () => {\n        …\n      }\n    }\n```", "```js\nConst Avatar = ({ src, username }) => {\n  const [error, onError] = useToggle()\n  return (\n    <AvatarStyle>\n      {error ? (\n        <div>{username}</div>\n      ) : (\n        <img\n          src={src}\n          alt={username}\n          onError={onError()}\n        />\n      )}\n    </AvatarStyle>\n  )\n}\n```", "```js\nconst Tooltip = ({ children, tooltip }) => {\n  const [entered, onEntered] = useToggle()\n  return (\n    <TooltipStyle>\n      <div\n        onMouseEnter={onEntered(true)}\n        onMouseLeave={onEntered(false)}\n      >\n        {children}\n      </div>\n      {entered && (\n        <div className=\"__tooltip\">\n          {tooltip}\n        </div>\n      )}\n    </TooltipStyle>\n  )\n```", "```js\nconst useWindow = (size = 0) => {\n  const [width, setWidth] = useState(0) \n  useEffect(() => {\n    function handleResize() {\n      setWidth(window.innerWidth)\n    }    \n    handleResize()    \n    window.addEventListener(\"resize\", handleResize)\n    return () => { \n      window.removeEventListener(\"resize\", handleResize)\n    }\n  }, [setWidth])  \n  return [width, width > size]\n}\n```", "```js\nconst Greeting = () => {\n  const [, wide] = useWindow(600)\n  return <h1>{wide ? \"Hello World\" : \"Hello\"}</h1>\n}\n```", "```js\nconst Header = () => {\n  const [, wide] = useWindow(725)\n  return wide ? <HeaderWide /> : <HeaderMini />\n}\n```", "```js\nconst useAsync = (\n  asyncFunc, \n  initialParams = {},\n  immediate = true\n) => {\n  ...\n  return { execute, loading, data }\n}\n```", "```js\nconst fn = ({ id }) => {\n  return fetch('/anAPIResource/${id}')\n    .then(res => res.json())\n}\n```", "```js\n  const [loading, setLoading] = useState(immediate)\n  const [data, setData] = useState(null)\n  const mountedRef = useRef(true)\n```", "```js\n  const execute = params => {\n    setLoading(true)\n    return asyncFunc({\n      ...initialParams,\n      ...params\n    }).then(res => {\n      if (!mountedRef.current) return null\n      setData(res)\n      setLoading(false)\n      return res\n    })\n  }\n```", "```js\n  const execute = useMemo(() => params => {\n    setLoading(true)\n    return …  \n  }, [asyncFunc, setData, setLoading])\n```", "```js\n  useEffect(() => {\n    if (immediate) {\n      execute(initialParams)\n    }\n  }, [immediate, execute])\n```", "```js\n  useEffect(() => {\n    return () => {\n      mountedRef.current = false\n    }\n  }, [mountedRef])\n```", "```js\nconst fn = () => fetch(\"google.com\")\nconst Title = () => {\n  const { data, loading } = useAsync(fn)\n  if (loading) return 'loading ...'\n  if (!data) return null \n  return <div>loaded</div>\n}\n```", "```js\n  if (loading) return 'loading ...'\n```", "```js\n  const spinner = <Spinner >  \n  …\n  if (loading) return spinner\n```", "```js\n  if (!data) return null\n```", "```js\nconst fn = ({ id }) => fetch('google.com/${id}')\nconst Title = () => {\n  const {\n    execute, data, loading\n  } = useAsync(fn, {}, false)  \n  const onClick = id => () => {\n    execute({ id })\n  }  \n  if (loading) return 'loading ...'  \n  return data ? <h1>{data}</h1> : (\n    <button onClick={onClick(3)}>Load 3</button>\n  )\n}\n```", "```js\nconst useDebounced = (oldState, duration) => {\n  const [state, dispatch] = useState(oldState)\n  const invokeRef = useRef(null) \n  useEffect(() => {\n    invokeRef.current = setTimeout(() => {\n      dispatch(oldState)\n    }, duration)   \n    return () => {\n      clearTimeout(invokeRef.current)\n    }\n  }, [oldState, duration]) \n  return state\n}\n```", "```js\nconst Title = () => {\n  const [text, setText] = useState('')\n  const query = useDebounced(text, 300)\n  const matched = useMemo(() => {\n    return fruites.filter(v => v.includes(query))\n  }, [query]) \n  const onChange = e => {\n    const t = e.target.value\n    setText(t)\n  }\n  return (\n    <>\n      <input value={text} onChange={onChange} />\n      {matched.join(',')}\n    </>\n  )\n}\n```", "```js\n  const query = useDebounced(text, 300)\n```", "```js\nfunction useClickOutside(ref, handler) {\n  useEffect(() => {\n    const evt = e => {\n      if (!ref.current) return \n      if (!ref.current.contains(e.target)) {\n        handler && handler()\n      }\n    }  \n    window.addEventListener(\"mousedown\", evt)      \n    return () => {\n      window.removeEventListener(\"mousedown\", evt)\n    }\n  }, [ref, handler])\n}\n```", "```js\nconst Menu = ({ on, dismiss }) => {\n  const ref= useRef()\n  useClickOutside(ref, toggle(false))   \n  if (!on) return null\n  return (\n    <ul ref={ref}>\n      <li>Home</li>\n      <li>Price</li>\n      <li>Product</li>\n      <li>Support</li>\n      <li>About</li>\n    </ul>\n  )\n}\n```", "```js\nconst App = () => {\n  const [on, toggle] = useToggle(true)  \n  return (\n    <Menu\n      on={on}\n      dismiss={toggle(false)}\n    </>\n  )\n}\n```", "```js\nconst [state, dispatchState] = useState(0)\n```", "```js\nconst [state, setState] = useState(0)\n```", "```js\nfunction useCurrent(initialState) {\n  const [obj, setObj] = useState({ state: initialState })  \n  const dispatch = newState => {\n    if (obj.state !== newState) {\n      obj.state = newState\n      setObj({ …obj })\n    }\n  }  \n  const getState = () => obj.state\n  return [getState, dispatch]\n}\n```", "```js\nconst Title = () => {\n  const [getCount, setCount] = useCurrent(0)  \n  const onClick = () => {\n    setTimeout(() => {\n      setCount(getCount() + 1)\n    }, 3000)\n  } \n  return <button onClick={onClick}>{getCount()}</button>\n}\n```", "```js\n  const p = useProxy({ count: 0, text: '' })\n```", "```js\n  p.count++\n  p.text = 'Hello World'\n```", "```js\nconst useProxy = (initialObj) => {\n  const [,dispatch] = useState(initialObj)  \n  const [obj] = useState(new Proxy(initialObj, {\n    get: function() {\n      return Reflect.get(...arguments)\n    },\n    set: function(obj, prop, value) { \n      if (obj[prop] !== value) {\n        obj[prop] = value\n        dispatch({ ...obj })\n      }\n      return true\n    }    \n  })) \n  return obj\n}\n```", "```js\n      set: function(obj, prop, value) {        \n        if (obj[prop] !== value) {\n          obj[prop] = value\n          dispatch({ ...obj })\n        }\n        return true\n      }\n```", "```js\nconst useProxy = (initialObj) => {\n  ...\n  const mountRef = useRef(true)\n  useEffect(() => {\n    return () => {\n      mountRef.current = false\n    }\n  })  \n  ...\n}\n```", "```js\n      set: function(obj, prop, value) { \n        if (!mountedRef.current) return false\n        ...\n      }\n```", "```js\nconst Form = () => {\n  const form = useProxy({ count: 0, text: '' })\n```", "```js\n  const onClick = () => { ++form.count }\n  return(\n    <div>\n      <h1>Count: { form.count }</h1>  \n      <button onClick={onClick}>Increment</button>\n    </div>\n  )\n```", "```js\n  form.count += 1\n  from.count = form.count + 1\n```", "```js\nconst Text = (({ form }) => {\n  const onChange = e => {\n    form.text = e.target.value\n  }  \n  return (\n    <input\n      value={form.text}\n      onChange={onChange} \n    />\n  )\n})\nconst Form = () => {\n  const form = useProxy({ count: 0, text: '' })  \n  return(\n    <div>\n      <Text form={form} />\n    </div>\n  )\n}\n```"]