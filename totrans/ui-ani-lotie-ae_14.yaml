- en: '*Chapter 11*: Any Questions? lottie-react-native FAQs'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第11章*：有什么问题？lottie-react-native常见问题解答'
- en: 'Even with all the information contained in this book, some questions may arise
    when using Lottie-based animations in our React Native apps. In this chapter,
    we will go over some of the most commonly asked questions by developers when it
    comes to `lottie-react-native` usage. For convenience, the following is the list
    of questions and issues you will find in the following pages:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 即使这本书包含了所有信息，在使用基于Lottie的动画时，也可能会出现一些问题。在本章中，我们将讨论开发者在使用`lottie-react-native`时最常问的一些问题。为了方便，以下是在接下来的页面中你将找到的问题和问题的列表：
- en: I added an effect in my animation, but it's not rendered in the app.
  id: totrans-2
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我在我的动画中添加了一个效果，但在应用中未渲染。
- en: The animation is not rendered at all in my app.
  id: totrans-3
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我的应用中，动画根本未渲染。
- en: The animation looks stretched.
  id: totrans-4
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 动画看起来被拉伸了。
- en: How can I pause an animation?
  id: totrans-5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我该如何暂停动画？
- en: How can I reverse an animation?
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我该如何反转动画？
- en: My animation is rendered on an iOS device but not on an Android device.
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我的动画在iOS设备上渲染，但在Android设备上没有渲染。
- en: My animation is rendered on an Android device but not on an iOS device.
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我的动画在Android设备上渲染，但在iOS设备上没有渲染。
- en: My app is not building after installing `lottie-react-native`.
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装`lottie-react-native`后，我的应用无法构建。
- en: Some frames are not showing in my animation.
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一些帧在我的动画中没有显示。
- en: My animation is showing the wrong colors or no colors at all.
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我的动画显示的颜色不正确，或者完全没有颜色。
- en: How can I use my Lottie animation as a splash screen?
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我该如何将我的Lottie动画用作启动画面？
- en: There are images missing in my animation.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我的动画中缺少图像。
- en: How can I center my animation in the app?
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我该如何在应用中居中动画？
- en: How can I play my animation a set number of times?
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我该如何播放我的动画指定次数？
- en: My animation has a low playback performance.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我的动画播放性能较低。
- en: How can I change the colors of my animation programmatically?
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我该如何通过编程方式更改动画的颜色？
- en: How can I use a remote Lottie animation file in my app?
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我如何在应用中使用远程的Lottie动画文件？
- en: My app is crashing on Android.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我的Android应用崩溃了。
- en: An error shows on my app – **Cycle dependencies between targets**.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我的应用中显示了一个错误 – **目标之间的循环依赖**。
- en: 'An error shows on my app – **Gradle 7: unable to resolve class MavenDeployment**.'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我的应用中显示了一个错误 – **Gradle 7：无法解析类 MavenDeployment**。
- en: 1\. I added an effect to my animation but it's not rendered in the app
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1. 我在我的动画中添加了一个效果，但在应用中未渲染
- en: There are a number of effects in Adobe After Effects that are not supported
    on certain platforms. When this kind of error happens, it's best to go to the
    list of supported effects in Lottie's documentation at [https://github.com/airbnb/lottie/blob/master/supported-features.md](https://github.com/airbnb/lottie/blob/master/supported-features.md).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在Adobe After Effects中，有一些效果在特定平台上不受支持。当出现此类错误时，最好查看Lottie文档中支持的特性列表，网址为[https://github.com/airbnb/lottie/blob/master/supported-features.md](https://github.com/airbnb/lottie/blob/master/supported-features.md)。
- en: Take into account that this list may change over time, as Lottie is being constantly
    improved. As the list shows, the same effect may show on a specific platform but
    might be missing on a different one.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这个列表可能会随着时间的推移而变化，因为Lottie正在不断改进。正如列表所示，同一个效果可能在特定平台上显示，但在另一个平台上可能缺失。
- en: The most common approaches for these cases are to remake the animation, remove
    the selected effect, or create a different animation for the failing platform,
    as there is no programmatic solution for this problem.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这些情况，最常见的方法是重新制作动画，移除选定的效果，或者为失败的平台创建不同的动画，因为没有程序性的解决方案来解决这个问题。
- en: 2\. The animation is not rendered at all in my app
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2. 在我的应用中，动画根本未渲染
- en: 'Check that the JSON file containing the animation is placed within the React
    Native app project folder structure and is reachable through an `import/require`
    statement in the component in which the animation should be rendering. To test
    this, you can `console.log` the contents of the JSON file; if they log as `undefined`,
    it means that the file was not reachable by the component:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 请检查包含动画的JSON文件是否放置在React Native应用项目结构中，并且可以通过动画应渲染的组件中的`import/require`语句访问。为了测试这一点，你可以`console.log`
    JSON文件的内容；如果它们显示为`undefined`，则表示文件无法被组件访问：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In this case, you might want to move the JSON file to a different folder or
    try with a different JSON file, as it's possible the file was damaged or inconsistent.
    Using a JSON linter can help to identify and fix this kind of issue.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，你可能需要将JSON文件移动到不同的文件夹，或者尝试使用不同的JSON文件，因为文件可能已损坏或不一致。使用JSON检查器可以帮助识别和修复此类问题。
- en: 3\. The animation looks stretched
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3. 动画看起来被拉伸
- en: '`LottieView` inherits its size behavior from the standard React Native `View`
    component, and therefore, it can be changed through the style property on its
    containing parent. If the image size looks wrong, try first explicitly changing
    the parent''s size:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`LottieView` 继承了标准 React Native `View` 组件的大小行为，因此，可以通过其包含父元素上的样式属性来更改它。如果图像大小看起来不正确，请首先尝试显式更改父元素的大小：'
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'If that didn''t work, try changing `width` or `height` explicitly in the `LottieView`
    component:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这不起作用，请尝试在 `LottieView` 组件中显式更改 `width` 或 `height`：
- en: '[PRE9]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Parent-relative sizes (percentages) can also be used in both approaches. Always
    be aware of the parent size, as many issues can be fixed by making sure the parent
    size is correct. Also, take into consideration using the `flex` property if needed.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在两种方法中也可以使用父元素相对大小（百分比）。始终注意父元素的大小，因为许多问题可以通过确保父元素大小正确来解决。此外，如果需要，请考虑使用 `flex`
    属性。
- en: 4\. How can I pause an animation?
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4. 我该如何暂停动画？
- en: 'There are several approaches to this issue:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种方法可以解决这个问题：
- en: If you are using the declarative approach in your code, you can use the `speed`
    prop on `LottieView`, as setting it to `0` will stop the animation.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你正在使用代码中的声明式方法，你可以在 `LottieView` 上使用 `speed` 属性，将其设置为 `0` 将停止动画。
- en: If you are using the imperative API, you can use the `pause()` method on the
    animation reference, which will immediately stop your animation playback. Conversely,
    the `play()` method will restart the playback whenever you need it.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你正在使用命令式 API，你可以在动画引用上使用 `pause()` 方法，这将立即停止你的动画播放。相反，`play()` 方法将在你需要时重新启动播放。
- en: 5\. How can I reverse an animation?
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5. 我该如何反转动画？
- en: 'The simplest approach to achieve reverse playback is to use the `speed` prop
    on the `LottieView` component, as negative values will make the animation play
    backward. If you want to play the animation in reverse but at its original speed,
    you need to set the `speed` prop to `–1`, but you can also play it at double speed
    by setting it to `–2` or half-speed by changing it to `–0.5`:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 实现反向播放的最简单方法是在 `LottieView` 组件上使用 `speed` 属性，因为负值会使动画反向播放。如果你想以原始速度反向播放动画，需要将
    `speed` 属性设置为 `-1`，但你也可以将其设置为 `-2` 以实现双倍速度播放，或者将其更改为 `-0.5` 以实现半速播放：
- en: '[PRE15]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'If you are using the animated API to control the progress of your animation,
    you can use methods such as `Animated.timing`, and make sure you are passing descending
    values:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用动画 API 来控制动画的进度，你可以使用如 `Animated.timing` 等方法，并确保你传递的是递减的值：
- en: '[PRE19]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 6\. My animation is rendered on an iOS device but not on an Android device
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6. 我的动画在 iOS 设备上渲染，但在 Android 设备上不渲染
- en: The newest versions of `lottie-react-native` can only be used on AndroidX projects.
    This means that if your app hasn't been migrated to AndroidX ([https://developer.android.com/jetpack/androidx](https://developer.android.com/jetpack/androidx)),
    it won't be able to display any Lottie animations.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`lottie-react-native` 的新版本只能在 AndroidX 项目中使用。这意味着如果你的应用尚未迁移到 AndroidX ([https://developer.android.com/jetpack/androidx](https://developer.android.com/jetpack/androidx))，它将无法显示任何
    Lottie 动画。'
- en: 'In this case, you can try older versions of `lottie-react-native`. For example,
    try running the following:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，你可以尝试 `lottie-react-native` 的旧版本。例如，尝试运行以下命令：
- en: '[PRE39]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Take into account that for these cases, the API might be different or some extra
    installation steps might be required. Always check the version-specific documentation
    when using older versions of `lottie-react-native`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到这些情况，API 可能不同，或者可能需要一些额外的安装步骤。始终在使用 `lottie-react-native` 的旧版本时检查版本特定的文档。
- en: 7\. My animation is rendered on an Android device but not on an iOS device
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 7. 我的动画在 Android 设备上渲染，但在 iOS 设备上不渲染
- en: '`lottie-react-native` requires some extra installation steps for it to work
    properly:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`lottie-react-native` 需要一些额外的安装步骤才能正常工作：'
- en: Remember to install the `lottie-ios` peer dependency by running `yarn add lottie-ios`.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 记得通过运行 `yarn add lottie-ios` 来安装 `lottie-ios` 依赖项。
- en: Remember to run `pod install` in the `ios` folder from your React Native project.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 记得从你的 React Native 项目的 `ios` 文件夹中运行 `pod install`。
- en: 8\. My app won't build on iOS after installing lottie-react-native
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 8. 安装 lottie-react-native 后，我的应用在 iOS 上无法构建
- en: 'The most common building issue for `lottie-react-native` in iOS has to do with
    the lack of support for React Native projects with Swift libraries. In this case,
    you need to create a Swift bridging header in order to get your app ready for
    Swift libraries:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在iOS中，`lottie-react-native`最常见的构建问题与对Swift库的React Native项目的支持不足有关。在这种情况下，您需要创建一个Swift桥接头，以便使您的应用为Swift库做好准备：
- en: 'Add a new file through the Xcode menu: **File** | **New** | **File**:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过Xcode菜单添加新文件：**文件** | **新建** | **文件**：
- en: '![Figure 11.1 – Create a new file in your Xcode project'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '![图11.1 – 在您的Xcode项目中创建一个新文件'
- en: '](img/B17930_11_01.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17930_11_01.jpg)'
- en: Figure 11.1 – Create a new file in your Xcode project
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.1 – 在您的Xcode项目中创建一个新文件
- en: 'Select **Swift File**:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**Swift文件**：
- en: '![Figure 11.2 – Select Swift as the file type'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '![图11.2 – 选择Swift作为文件类型'
- en: '](img/B17930_11_02.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17930_11_02.jpg)'
- en: Figure 11.2 – Select Swift as the file type
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.2 – 选择Swift作为文件类型
- en: 'Click on **Create Bridging Header**:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建桥接头**：
- en: '![Figure 11.3 – Confirm the creation of the bridging header'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '![图11.3 – 确认创建桥接头'
- en: '](img/B17930_11_03.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17930_11_03.jpg)'
- en: Figure 11.3 – Confirm the creation of the bridging header
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.3 – 确认创建桥接头
- en: You may need to rebuild your project for the changes to take effect. Once this
    is done, `lottie-react-native` should be ready to display your animation on iOS.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能需要重新构建项目以使更改生效。一旦完成，`lottie-react-native`应该准备好在iOS上显示您的动画。
- en: 9\. Some frames are not showing in my animation
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 9. 我的动画中有些帧没有显示
- en: Older versions of Lottie have rendering issues and won't work properly with
    newer versions of Android and iOS. To fix this kind of issue, make sure you have
    the most adequate `lottie-react-native` version for the platform version you are
    running your app in.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: Lottie的旧版本存在渲染问题，并且无法与新版本的Android和iOS正确工作。要修复此类问题，请确保您有适用于您正在运行的平台的最新`lottie-react-native`版本。
- en: You can find a list of available versions for `lottie-react-native` in the `projects`
    repository ([https://github.com/lottie-react-native/lottie-react-native](https://github.com/lottie-react-native/lottie-react-native))
    or the npm site ([https://www.npmjs.com/package/lottie-react-native](https://www.npmjs.com/package/lottie-react-native)).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`projects`存储库（[https://github.com/lottie-react-native/lottie-react-native](https://github.com/lottie-react-native/lottie-react-native)）或npm网站上找到`lottie-react-native`的可用版本列表（[https://www.npmjs.com/package/lottie-react-native](https://www.npmjs.com/package/lottie-react-native)）。
- en: 10\. My animation is showing the wrong colors or no colors at all
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 10. 我的动画显示的颜色错误或完全没有颜色
- en: This is often not a problem with `lottie-react-native` but with the way `Bodymovin`
    exports colors. You may still be able to fix this problem by manually going through
    your JSON file and manually modifying them.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这通常不是`lottie-react-native`的问题，而是`Bodymovin`导出颜色的方式。您可能仍然可以通过手动浏览您的JSON文件并手动修改它们来解决这个问题。
- en: Layer colors in the JSON file usually are defined by the key named `"sc"`, so
    you can search for that key and change the hex value for the color you want to
    change. For example, if you expect a red color but you are getting a white one,
    you can search for `"sc":"#ffffff"` and replace it with `"sc":"#ff0000"`.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: JSON文件中的层颜色通常由名为`"sc"`的键定义，因此您可以搜索该键并更改您想要更改的颜色十六进制值。例如，如果您期望红色但得到的是白色，您可以搜索`"sc":"#ffffff"`并将其替换为`"sc":"#ff0000"`。
- en: Take into account that there might be more than one layer with that color defined,
    so you might need to do trial and error until you find the exact layer you need
    to change.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，可能存在多个层定义了该颜色，因此您可能需要尝试错误直到找到您需要更改的确切层。
- en: 11\. How can I use my Lottie animation as a splash screen?
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 11. 我如何将我的Lottie动画用作启动画面？
- en: 'Showing a Lottie animation on an app startup is a nice user experience that
    is becoming more and more popular as mobile apps become more sophisticated. A
    common approach is to load the animation as the main screen, have a state variable
    that changes once the animation is finished, and change to the real main screen
    immediately after most of the initial data has been loaded:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用启动时显示Lottie动画是一种很好的用户体验，随着移动应用的日益复杂化，这种做法变得越来越受欢迎。一种常见的方法是将动画作为主屏幕加载，有一个状态变量在动画完成后改变，并在大多数初始数据加载完毕后立即切换到真实的主屏幕：
- en: '[PRE40]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: If we want to display a Lottie animation as a splash screen, we need to put
    this component as the initial one, so the first thing that the app does is to
    load this animation. Note how we call `loadAppData()` when the component is mounted
    to start loading the initial data, before the component shows that data to the
    user.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想将Lottie动画作为启动屏幕显示，我们需要将此组件作为初始组件，这样应用首先加载的就是这个动画。注意我们如何在组件挂载时调用`loadAppData()`来开始加载数据，在组件向用户显示数据之前。
- en: 12\. There are images missing in my animation
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 12. 我的动画中缺少图像
- en: 'If you created your animation with external assets (images), you need to add
    those images into your app and let `lottie-react-native` know where those images
    can be found. This is done at a native level and requires some configuration,
    as explained in [*Chapter 9*](B17930_09_ePub.xhtml#_idTextAnchor167), *Let’s Do
    Some Magic: Integrating Your First Lottie Animation*, in the section named *Using
    Lottie files with assets*.'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用外部资源（图像）创建了动画，您需要将这些图像添加到您的应用中，并让`lottie-react-native`知道这些图像的位置。这需要在本地级别完成，并需要一些配置，如在第9章[*“让我们做一些魔法：集成您的第一个Lottie动画”*](B17930_09_ePub.xhtml#_idTextAnchor167)中所述，在名为*“使用带有资源的Lottie文件”*的部分中解释。
- en: 'Make sure that you do the following:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您执行以下操作：
- en: Add those images into the project's folder structure.
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将这些图像添加到项目的文件夹结构中。
- en: Configure your project in a way that makes those files accessible through code.
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以一种使这些文件可以通过代码访问的方式配置您的项目。
- en: Pass the `imageAssetsFolder` property to the `LottieView` component with the
    right relative route to the folder containing those assets.
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`imageAssetsFolder`属性传递给`LottieView`组件，并使用正确的相对路径指向包含这些资源的文件夹。
- en: 13\. How can I center my animation in the app?
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 13. 我如何在应用中居中动画？
- en: '`LottieView` component inherits its layout behavior from the standard `View`
    component in React Native, and therefore, centering should be done in the same
    way we would center `View` in React Native. This can be done by either using the
    `alignSelf: ''center''` key on the `style` property for the `LottieView` component
    or making sure that the parent component has the correct size and uses `alignItems:
    ''center''` in its `style` property.'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`LottieView`组件从React Native的标准`View`组件继承其布局行为，因此居中应该以我们在React Native中居中`View`的方式来进行。这可以通过在`LottieView`组件的`style`属性上使用`alignSelf:
    ''center''`键，或者确保父组件具有正确的大小并在其`style`属性中使用`alignItems: ''center''`来实现。'
- en: If this approach didn't work, we should make sure the parent component has the
    right size, as most of the alignment problems derive from that issue.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这种方法不起作用，我们应该确保父组件具有正确的大小，因为大多数对齐问题都源于此问题。
- en: 14\. How can I play my animation a set number of times?
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 14. 我如何播放动画指定次数？
- en: 'The easiest approach would be to use the imperative API and adjust the `play()`
    method and the `onAnimationFinish` prop repeat that plays the animation when its
    playback is finished:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的方法是使用命令式API，调整`play()`方法和`onAnimationFinish`属性重复播放动画，当播放结束时播放动画：
- en: '[PRE64]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '[PRE79]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[PRE80]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[PRE81]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[PRE82]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '[PRE83]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '[PRE84]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '[PRE85]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '[PRE86]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: The key in this piece of code is how `onAnimationFinish` is used to repeat the
    animation, controlling the number of times through a state variable (`numPlaybacks`)
    and a constant maximum number of repetitions (`maxNumPlaybacks`).
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码的关键在于如何使用`onAnimationFinish`来重复动画，通过状态变量（`numPlaybacks`）和常数最大重复次数（`maxNumPlaybacks`）来控制重复次数。
- en: 15\. My animation has a low playback performance
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 15. 我的动画播放性能较低
- en: As mobile operating systems evolve, they use different graphic rendering techniques.
    Lottie adapts to those changes by releasing new versions periodically that improve
    the performance of the animations rendered. It's important to always use the latest
    version of `lottie-react-native` because it may contain performance improvements
    based on the latest rendering engines for Android and iOS devices.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 随着移动操作系统的不断发展，它们采用了不同的图形渲染技术。Lottie通过定期发布新版本来适应这些变化，这些新版本可以提升渲染动画的性能。始终使用`lottie-react-native`的最新版本非常重要，因为它可能包含基于Android和iOS设备最新渲染引擎的性能改进。
- en: React Native also offers an out-of-the-box performance improvement for the animated
    API by accepting the `useNativeDriver` parameter, which leverages the native capabilities
    of some UI components. Using this parameter may help when using `Animated` combined
    with `lottie-react-native`.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: React Native通过接受`useNativeDriver`参数，为动画API提供了一种开箱即用的性能改进，该参数利用了一些UI组件的本地能力。使用此参数可能有助于在使用`Animated`和`lottie-react-native`结合时。
- en: If you want to ensure that you are using the latest version of `lottie-react-native`,
    make sure you check the README documentation in the `lottie-react-native` repository,
    following its installation guidelines.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想确保您正在使用`lottie-react-native`的最新版本，请确保您检查`lottie-react-native`存储库中的README文档，并遵循其安装指南。
- en: 16\. How can I change the colors of my animation programmatically?
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 16. 我如何以编程方式更改动画的颜色？
- en: '`lottie-react-native` allows developers to use the `colorFilters` property
    in any `LottieView` component with the intention of changing the colors for specific
    layers in an animation. The names for those layers are defined in After Effects
    and stored in the exported JSON Lottie file, such as in the following code block:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '`lottie-react-native`允许开发者在任何`LottieView`组件中使用`colorFilters`属性，目的是更改动画中特定层的颜色。这些层的名称在After
    Effects中定义，并存储在导出的JSON Lottie文件中，如下面的代码块所示：'
- en: '[PRE87]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '[PRE88]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '[PRE90]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '[PRE91]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '[PRE92]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '[PRE93]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '[PRE94]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[PRE95]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '[PRE96]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '[PRE97]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '[PRE98]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '[PRE99]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '[PRE100]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '[PRE101]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '[PRE102]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '[PRE103]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '[PRE104]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '[PRE105]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '[PRE106]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: '[PRE107]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '[PRE108]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[PRE109]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '[PRE110]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '[PRE111]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '[PRE112]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: In this example, we are changing the colors for two layers named `border` and
    `bar` to be fully red.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将名为`border`和`bar`的两个层的颜色更改为全红色。
- en: 17\. How can I use a remote Lottie animation file in my app?
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 17. 我如何在应用中使用远程Lottie动画文件？
- en: 'The simplest approach would be to use `fetch()` to download the JSON file,
    parse it, and set it in a state variable so that it can be used as a `source`
    prop in a `LottieView` container:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的方法是使用`fetch()`下载JSON文件，解析它，并将其设置在状态变量中，以便它可以作为`LottieView`容器中的`source`属性使用：
- en: '[PRE113]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '[PRE114]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '[PRE115]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '[PRE116]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: '[PRE117]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '[PRE118]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '[PRE119]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: '[PRE120]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: '[PRE121]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '[PRE122]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '[PRE123]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: '[PRE124]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '[PRE125]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '[PRE126]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: '[PRE127]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: '[PRE128]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: '[PRE129]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: '[PRE130]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: '[PRE131]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: '[PRE132]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: '[PRE133]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: '[PRE134]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: '[PRE135]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: '[PRE136]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: If this approach is followed, it's important to control the `LottieView` component
    until the animation is fully downloaded (`animation && <LottieView`).
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 如果遵循此方法，重要的是在动画完全下载之前控制`LottieView`组件（`animation && <LottieView`）。
- en: 18\. My app is crashing on Android
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 18. 我的Android应用崩溃了
- en: 'Several users have reported crashes on Android due to errors. The latest versions
    of React Native have refined this process, and updating these should fix the issue,
    but if this is not a possibility, you can manually link the required libraries
    as follows:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 有几位用户报告说，由于错误，在Android上应用崩溃。React Native的最新版本已经改进了这一过程，更新这些版本应该可以解决问题，但如果这不是一个可行的方案，您可以按照以下步骤手动链接所需的库：
- en: On your `android/app/src/main/java/<YourAppName>/MainApplication.java`, add
    `import com.airbnb.android.react.lottie.LottiePackage;` at the top.
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的`android/app/src/main/java/<YourAppName>/MainApplication.java`中，在顶部添加`import
    com.airbnb.android.react.lottie.LottiePackage;`。
- en: In the same file, add `packages.add(new LottiePackage());` under `List<ReactPackage>
    getPackages()`.
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在同一文件中，在`List<ReactPackage> getPackages()`下添加`packages.add(new LottiePackage());`。
- en: On your `android/app/build.gradle`, add `implementation project(':lottie-react-native')`
    inside the dependencies section.
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的`android/app/build.gradle`中，在依赖关系部分添加`implementation project(':lottie-react-native')`。
- en: On your `android/settings.gradle`, add `include ':lottie-react-native'`.
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的`android/settings.gradle`中添加`include ':lottie-react-native'`。
- en: Right after the line you just added, add `project(':lottie-react-native').projectDir
    = new File(rootProject.projectDir, '../node_modules/lottie-react-native/src/android')`.
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您刚刚添加的行之后，添加`project(':lottie-react-native').projectDir = new File(rootProject.projectDir,
    '../node_modules/lottie-react-native/src/android')`。
- en: Now, you should rebuild your app and find it is not crashing anymore.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您应该重新构建您的应用，并发现它不再崩溃。
- en: 19\. An error shows on my app – Cycle dependencies between targets
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 19. 我的app上显示了一个错误 – 目标之间的循环依赖
- en: This is a common error among React Native developers when having to deal with
    native code in iOS. The problem is related to changes in the dependencies tree
    that ended up rearranging which library depends on another. Therefore, the easiest
    solution is to reset the dependencies tree in our iOS project, ensuring that we
    end up with a clean dependency chain.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在iOS中处理原生代码时React Native开发者常见的错误。问题是与依赖关系树的变化有关，最终导致重新排列了哪个库依赖于另一个库。因此，最简单的解决方案是在我们的iOS项目中重置依赖关系树，确保我们最终得到一个干净的依赖链。
- en: To achieve this, we can clean our `builds` folder by pressing *Command* + *Shift*
    + *K* on Xcode and then rebuilding the app, by pressing the `yarn ios` on the
    command line while being in the `project` folder.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现这一点，我们可以在Xcode中按*Command* + *Shift* + *K*清理`builds`文件夹，然后在`project`文件夹中按命令行中的`yarn
    ios`重新构建应用。
- en: 20\. An error shows on my app – Execution failed for task ':lottie-react-native:compileDebugJavaWithJavac'
  id: totrans-243
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 20. 我的app上显示了一个错误 – 执行任务`:lottie-react-native:compileDebugJavaWithJavac'失败
- en: 'This error may arise after updating to a newer version of React Native and
    running the app on an Android device for the first time. Sometimes, just cleaning
    the `builds` folder fixes this problem, but there are two other approaches that
    may fix it if cleaning didn''t do the trick:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 这种错误可能在更新到 React Native 的新版本并在 Android 设备上首次运行应用后出现。有时，只需清理 `builds` 文件夹就能解决这个问题，但如果清理不起作用，还有两种其他方法可能修复它：
- en: Migrate your app to AndroidX by adding `android.useAndroidX=true` and `android.enableJetifier=true`
    to your `gradle.properties` file and running `npx jetifier` immediately afterward.
    This prepares your app to include the AndroidX-based libraries.
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过将 `android.useAndroidX=true` 和 `android.enableJetifier=true` 添加到您的 `gradle.properties`
    文件，并立即运行 `npx jetifier` 来将您的应用迁移到 AndroidX。这将使您的应用准备好包含基于 AndroidX 的库。
- en: Make sure you are using JDK v8 instead of a newer version (Android Studio may
    install newer versions). You can follow the environment setup instructions on
    the React Native website ([https://reactnative.dev/docs/environment-setup](https://reactnative.dev/docs/environment-setup))
    and configure that version of Java as your default one in your shell configuration
    file.
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保您正在使用 JDK v8 而不是较新版本（Android Studio 可能会安装较新版本）。您可以在 React Native 网站上的环境设置说明（[https://reactnative.dev/docs/environment-setup](https://reactnative.dev/docs/environment-setup)）中找到，并在您的
    shell 配置文件中将该版本的 Java 配置为默认版本。
- en: Summary
  id: totrans-247
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Thank you for reading through this final chapter, in which we presented the
    most common questions and issues reported when working with `lottie-react-native`.
    There are many other infrequently asked questions that can be found in the `lottie-react-native`
    repository issues ([https://github.com/lottie-react-native/lottie-react-native/issues](https://github.com/lottie-react-native/lottie-react-native/issues))
    and on Stack Overflow, so make sure that you turn to those resources if you find
    yourself in need of more specific answers.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢您阅读完这一章，其中我们介绍了在处理 `lottie-react-native` 时报告的最常见问题和疑问。还有许多其他不常被问到的问题可以在 `lottie-react-native`
    仓库的问题（[https://github.com/lottie-react-native/lottie-react-native/issues](https://github.com/lottie-react-native/lottie-react-native/issues)）和
    Stack Overflow 上找到，所以如果您需要更具体的答案，请确保您转向那些资源。
- en: 20\. An error shows on my app – Execution failed for task ':lottie-react-native:compileDebugJavaWithJavac'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 20. 我的 app 上显示了一个错误 – 执行任务 ':lottie-react-native:compileDebugJavaWithJavac'
    失败
