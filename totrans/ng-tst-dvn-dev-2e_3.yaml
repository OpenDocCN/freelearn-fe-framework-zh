- en: Chapter 3. The Karma Way
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 3 章。Karma 的方式
- en: JavaScript testing has hit the mainstream, thanks to Karma. Karma makes it seamless
    to test JavaScript. Angular was created around testing.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 多亏了 Karma，JavaScript 测试已经进入主流，Karma 使得测试 JavaScript 变得无缝。Angular 是围绕测试创建的。
- en: 'In this chapter, we will learn a few things about Karma, including the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将了解一些关于 Karma 的内容，包括以下内容：
- en: The origin of Karma
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Karma 的起源
- en: Why and how Karma will work with an Angular project
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么以及 Karma 如何与 Angular 项目协同工作
- en: The Karma configuration and implementation with an Angular project
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Angular 项目进行 Karma 配置和实现
- en: An overview of **Travis CI**
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Travis CI** 概述'
- en: The birth of Karma
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Karma 的诞生
- en: When picking up a new tool, it is important to understand where it comes from
    and why it is built. This section will give us a background of the origin of Karma.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 当选择一个新的工具时，了解它的来源和为什么被构建是很重要的。本节将为我们提供 Karma 起源的背景。
- en: The Karma difference
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Karma 的差异
- en: Karma was created by Vojta Jína. The project was originally called **Testacular**.
    In Vojtech Jína's thesis, he discusses the design, purpose, and implementation
    of Karma.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Karma 是由 Vojta Jína 创建的。该项目最初被称为 **Testacular**。在 Vojtech Jína 的论文中，他讨论了 Karma
    的设计、目的和实现。
- en: 'In his thesis (*JavasScript Test Runner*, [https://github.com/karma-runner/karma/raw/master/thesis.pdf](https://github.com/karma-runner/karma/raw/master/thesis.pdf)),
    he describes Karma as follows:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在他的论文（*JavasScript Test Runner*，[https://github.com/karma-runner/karma/raw/master/thesis.pdf](https://github.com/karma-runner/karma/raw/master/thesis.pdf)）中，他这样描述
    Karma：
- en: '*"...a test runner that helps web application developers to be more productive
    and effective by making automated testing simpler and faster. In fact, I have
    a much higher ambition and this thesis is only a part of it - I want to promote
    Test Driven Development (TDD) as "the" way to develop web applications, because
    I believe it is the most effective way to develop high quality software."*'
  id: totrans-12
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*“...一个帮助 Web 应用程序开发者通过简化自动化测试并使其更快来提高生产力和效率的测试运行器。实际上，我有一个更高的抱负，这篇论文只是其中的一部分——我想推广测试驱动开发（TDD）作为“唯一”的
    Web 应用程序开发方式，因为我相信这是开发高质量软件最有效的方式。”*'
- en: Karma has the ability to easily and automatically run JavaScript unit tests
    on real browsers. Traditionally, tests were run by launching a browser manually
    and checking for results by continually clicking on the refresh button. This method
    was awkward and often resulted in developers limiting the number of tests that
    were written.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Karma 具有在真实浏览器上轻松自动运行 JavaScript 单元测试的能力。传统上，测试是通过手动启动浏览器并不断点击刷新按钮来检查结果的。这种方法很笨拙，并且往往导致开发者限制编写的测试数量。
- en: With Karma, a developer can write a test in almost any standard test framework,
    choose a browser to run against, set the files to watch for changes, and bam!
    We have continuous automated testing. We have to simply check the output window
    for failed or passed tests.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Karma，开发者几乎可以在任何标准测试框架中编写测试，选择要运行的浏览器，设置要监控变化的文件，然后！我们就有了持续自动测试。我们只需简单地检查输出窗口以查看失败的或通过的测试。
- en: The importance of combining Karma and Angular
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结合 Karma 和 Angular 的重要性
- en: Karma was built for AngularJS. Before Karma, there was a lack of automated testing
    tools for web-based JavaScript developers.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Karma 是为 AngularJS 构建的。在 Karma 之前，基于 Web 的 JavaScript 开发者缺乏自动化测试工具。
- en: Remember that Karma is a test runner, not a test framework. Its job is to run
    tests and report which tests will pass or fail. Why is this helpful? A test framework
    is where you will write your tests. Apart from doing this, you will need to be
    focused on running the tests easily and seeing the results. Karma easily runs
    tests across several different browsers. It also has some other features, such
    as file watching, which will be discussed in detail later in the book.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，Karma 是一个测试运行器，而不是测试框架。它的任务是运行测试并报告哪些测试会通过或失败。这有什么帮助？测试框架是您编写测试的地方。除了做这件事，您还需要专注于轻松运行测试并查看结果。Karma
    可以轻松地在多个不同的浏览器上运行测试。它还有一些其他功能，如文件监控，这些将在本书的后面部分详细讨论。
- en: Installing Karma
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Karma
- en: It's time to start using Karma. Installations and applications are constantly
    changing. The following guide is intended to be brief; you can go to the Karma
    website at [http://karma-runner.github.io/](http://karma-runner.github.io/) and
    find the latest instructions there.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候开始使用 Karma 了。安装和应用程序不断变化。以下指南旨在简明扼要；您可以访问 Karma 网站 [http://karma-runner.github.io/](http://karma-runner.github.io/)
    并在那里找到最新的说明。
- en: The main focus of this section will be the specific configuration used in this
    book and not an in-depth installation guide.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 本节的主要重点将是本书中使用的特定配置，而不是深入的安装指南。
- en: Installation prerequisites
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装先决条件
- en: To install Karma, we will need to have Node.js on our computer. Node.js runs
    on Google's V8 engine and allows JavaScript to be run on several operating systems.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 Karma，我们需要在我们的计算机上安装 Node.js。Node.js 在 Google 的 V8 引擎上运行，并允许 JavaScript
    在多个操作系统上运行。
- en: Developers can publish node applications and modules using **NPM** (**Node Package
    Manager**). NPM allows developers to quickly integrate applications and modules
    into their applications.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者可以使用 **NPM**（**Node 包管理器**）发布节点应用程序和模块。NPM 允许开发者快速将应用程序和模块集成到他们的应用程序中。
- en: Karma runs and is installed through the `npm` package; therefore, we need Node.js
    before we can use or install Karma. To install Node.js, go to [http://nodejs.org/](http://nodejs.org/)
    and follow the installation instructions.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Karma 通过 `npm` 包运行和安装；因此，在我们可以使用或安装 Karma 之前，我们需要 Node.js。要安装 Node.js，请访问 [http://nodejs.org/](http://nodejs.org/)
    并遵循安装说明。
- en: 'Once we have Node.js installed, lets type the following command in the Command
    Prompt to install Karma:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们安装了 Node.js，让我们在命令提示符中输入以下命令来安装 Karma：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The preceding command uses `npm` to install Karma globally using `-g`. This
    means that we can use Karma on the Command Prompt by simply typing the following:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令使用 `npm` 通过 `-g` 全局安装 Karma。这意味着我们可以在命令提示符中简单地输入以下内容来使用 Karma：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: By default, installing Karma will install `karma-chrome-launcher` and `karma-jasmine`
    as dependencies. Ensure that these modules are installed globally as well.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，安装 Karma 将安装 `karma-chrome-launcher` 和 `karma-jasmine` 作为依赖项。请确保这些模块也全局安装。
- en: Configuring Karma
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 Karma
- en: 'Karma comes equipped with an automated way to create a configuration file.
    To use the automated way, type the following command:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Karma 配备了自动创建配置文件的方式。要使用自动方式，请输入以下命令：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here is a sample of the options chosen:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是选择的一些选项示例：
- en: '![Configuring Karma](img/image_03_001.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![配置 Karma](img/image_03_001.jpg)'
- en: Customizing Karma's configuration
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义 Karma 的配置
- en: 'The following instructions describe the specific configuration required to
    get Karma running for the project. Customization includes the test framework (Jasmine),
    the browser (Chrome) to test with, and the files to test. To customize the configuration,
    open `karma.conf.js` and perform the following steps:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 以下说明描述了为使 Karma 在项目中运行所需的特定配置。自定义包括测试框架（Jasmine）、用于测试的浏览器（Chrome）以及要测试的文件。要自定义配置，打开
    `karma.conf.js` 并执行以下步骤：
- en: 'Ensure that the enabled framework says `jasmine` using the following code:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码确保启用的框架为 `jasmine`：
- en: '[PRE3]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Configure the `test` directory. Note that the following definition needs to
    include the tests that are required to be run along with any potential dependencies.
    The directory that will hold our tests is `/test/unit/`:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置 `test` 目录。请注意，以下定义需要包括需要运行的测试以及任何潜在的依赖项。将存放我们测试的目录是 `/test/unit/`：
- en: '[PRE4]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Set the test browser to Chrome, as follows. It will then be initialized and
    will run a popup after every test:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将测试浏览器设置为 Chrome，如下所示。然后它将在每次测试后初始化并运行一个弹出窗口：
- en: '[PRE5]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Confirming Karma's installation and configuration
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 确认 Karma 的安装和配置
- en: 'To confirm Karma''s installation and configuration, perform the following steps:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 要确认 Karma 的安装和配置，请执行以下步骤：
- en: 'Run the following command to confirm that Karma starts with no errors:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令以确认 Karma 无错误启动：
- en: '[PRE6]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The output should be something like this:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输出应该是这样的：
- en: '[PRE7]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In addition to this, the output should state that no test files were found:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，输出还应声明没有找到测试文件：
- en: '[PRE8]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The output should do this along with a failed test message:'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出应该这样做，并伴随一个失败的测试消息：
- en: '[PRE9]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Note
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: An important point to note is that we will need to install `jasmine-core` globally
    on the system, or else Karma will not run successfully.
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个需要注意的重要点是，我们需要在系统上全局安装 `jasmine-core`，否则 Karma 将无法成功运行。
- en: 'This is expected as no tests have been created yet . Continue to the next step
    if Karma starts, and we will see our Chrome browser with the following output:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这是预期的，因为没有创建任何测试。如果 Karma 启动，请继续到下一步，我们将看到以下输出的 Chrome 浏览器：
- en: '![Confirming Karma''s installation and configuration](img/image_03_002.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![确认 Karma 的安装和配置](img/image_03_002.jpg)'
- en: Common installation/configuration issues
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 常见的安装/配置问题
- en: 'If the Jasmine or Chrome launcher are missing, perform the following steps:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果缺少 Jasmine 或 Chrome 启动器，请执行以下步骤：
- en: 'When running the test, an error might occur saying **missing Jasmine or Chrome
    Launcher**. If you get this error, type the following command to install the missing
    dependencies:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行测试时，可能会出现错误，表示**缺少Jasmine或Chrome Launcher**。如果你遇到这个错误，请输入以下命令来安装缺少的依赖项：
- en: '[PRE10]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Retry the test and confirm that the errors have been resolved.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重试测试并确认错误已被解决。
- en: 'In some cases, you might not be able to install `npm_modules` globally using
    the `-g` command. This is generally due to permission issues on your computer.
    The following is what you need to do to provide permissions (sudo/administrator):'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在某些情况下，你可能无法使用`-g`命令全局安装`npm_modules`。这通常是由于你的计算机上的权限问题。以下是你需要做的来提供权限（sudo/administrator）：
- en: 'The resolution is to install Karma directly in your project folder. Use the
    same command without `-g` to do this:'
  id: totrans-63
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解决方案是在你的项目文件夹中直接安装Karma。使用不带`-g`的相同命令来完成此操作：
- en: '[PRE11]'
  id: totrans-64
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Run Karma using the relative path:'
  id: totrans-65
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用相对路径运行Karma：
- en: '[PRE12]'
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Now that Karma is installed and running, it's time to put it to use.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在Karma已安装并运行，是时候开始使用了。
- en: Testing with Karma
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Karma进行测试
- en: 'In this section, we will create a test to confirm that Karma is working as
    expected. To do this, perform the following steps:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将创建一个测试来确认Karma按预期工作。为此，执行以下步骤：
- en: 'Create the test directory. In the Karma configuration, tests were defined in
    the following directory:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建测试目录。在Karma配置中，测试定义在以下目录：
- en: '[PRE13]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Go ahead and create the `test/unit` directory.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继续创建`test/unit`目录。
- en: Create a new `firstTest.js` file in the `test/unit` directory.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`test/unit`目录中创建一个新的`firstTest.js`文件。
- en: 'Write the first test as follows:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按如下方式编写第一个测试：
- en: '[PRE14]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The preceding test uses the Jasmine functions and has the following properties:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的测试使用了Jasmine函数，并具有以下属性：
- en: '`describe`: This provides a brief string description of the test suite, the
    things that will be tested.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`describe`：这提供了一个简短的字符串描述测试套件，将要测试的内容。'
- en: '`it`: This provides a brief string of the specific assertion called a test
    spec'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`it`：这提供了一个简短的字符串，表示特定的断言，即测试规范'
- en: '`expect`: This provides a way to assert values'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`expect`：这提供了一种断言值的方法'
- en: '`toBeTruthy`: This is one of the several properties of an expectation that
    can be used to make assertions'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`toBeTruthy`：这是期望的几个属性之一，可以用来进行断言'
- en: This test has no real value other than to confirm the output of a passing test.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 此测试除了确认通过测试的输出外，没有其他实际价值。
- en: 'Bam! Let''s check our console window and see that Karma has executed our test.
    And our command line should say something like this:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 嘭！让我们检查我们的控制台窗口，看看Karma是否已执行我们的测试。并且我们的命令行应该像这样：
- en: '[PRE15]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This output means that Karma automatically recognized that a new file was added.
    The next output should be something like this:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 此输出意味着Karma自动识别到已添加新文件。下一个输出应该是这样的：
- en: '[PRE16]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This means that our test has passed!
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们的测试已经通过！
- en: Confirming the Karma installation
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 确认Karma安装
- en: 'Now, the initial set up and configuration of Karma is complete. Here is a review
    of the steps:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，Karma的初始设置和配置已完成。以下是步骤回顾：
- en: We installed Karma through the `npm` command.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们通过`npm`命令安装了Karma。
- en: We initialized a default configuration through the `karma init` command.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们通过`karma init`命令初始化了一个默认配置。
- en: Next, we configured Karma with Jasmine and a `test/unit` test directory.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们使用Jasmine和`test/unit`测试目录配置了Karma。
- en: We started Karma and confirmed that it could be opened with Chrome.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们启动了Karma并确认它可以与Chrome一起打开。
- en: Then, we added a Jasmine test, `firstTest.js`, to our `test/unit` test directory.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们在`test/unit`测试目录中添加了一个Jasmine测试，`firstTest.js`。
- en: Karma recognized that `firstTest.js` had been added to the test directory.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Karma识别到`firstTest.js`已被添加到测试目录。
- en: Finally, Karma executed our `firstTest.js` and reported our output.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，Karma执行了我们的`firstTest.js`并报告了我们的输出。
- en: With a couple of steps, we were able to see Karma running and executing tests
    automatically. From a TDD perspective, we can focus on moving tests from failing
    to passing without much effort. There is no need to refresh the browser; just
    check the command output window. Keep Karma running and all our tests and files
    will automatically be added and run.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 通过几个步骤，我们能够看到Karma正在运行并自动执行测试。从TDD的角度来看，我们可以专注于将测试从失败转换为通过，而不需要付出太多努力。无需刷新浏览器；只需检查命令输出窗口。保持Karma运行，所有我们的测试和文件将自动添加并运行。
- en: In the subsequent sections, we will see how to apply Karma with a TDD approach.
    If you're okay with Karma so far and want to move on to Protractor, skip to the
    next chapter.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将看到如何使用TDD方法应用Karma。如果你对Karma感到满意并想继续到Protractor，请跳到下一章。
- en: Using Karma with Angular
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Karma与Angular
- en: 'Here, we will walk through a TDD approach to an Angular component. By the end
    of this chapter, we should be able to do the following:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将通过TDD方法来介绍Angular组件。到本章结束时，我们应该能够做到以下几点：
- en: Feel confident about using Karma and its configuration
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对使用Karma及其配置有信心
- en: Understand the basic components of a Jasmine test
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解Jasmine测试的基本组件
- en: Start understanding the integration of a TDD approach in an Angular application
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始理解TDD方法在Angular应用程序中的集成
- en: Getting Angular
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取Angular
- en: Angular installation is not possible via Bower; as it was with Angular1, it
    has to be installed via npm. Bootstrapping the Angular application is not as simple
    as Angular1 because Angular doesn't use plain JavaScript. It uses TypeScript or
    ES6 (ES2015), both of which need to be compiled to plain JavaScript before running
    them.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: Angular的安装不能通过Bower进行；就像Angular1一样，它必须通过npm安装。启动Angular应用程序不像Angular1那样简单，因为Angular不使用纯JavaScript。它使用TypeScript或ES6（ES2015），这两种都需要在运行之前编译成纯JavaScript。
- en: We believe that most of the developer are already aware of the Angular changes
    and how its compilation works. Just a quick recap--we will use TypeScript in our
    Angular example project here as long as Angular recommends that, though there
    is an option to use ES6 instead. We will use the node/npm tsc module to compile
    the TypeScript to plain JavaScript; node/npm will be our CLI tools as well to
    build/start a project and run the test.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们相信大多数开发者已经了解Angular的变化以及其编译方式。快速回顾一下——在我们的Angular示例项目中，我们将使用TypeScript，尽管有使用ES6的选项。我们将使用node/npm
    tsc模块将TypeScript编译成纯JavaScript；node/npm也将是我们的CLI工具，用于构建/启动项目并运行测试。
- en: A basic understanding of node/npm modules is required here, specifically, how
    the npm commands works.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 需要基本了解node/npm模块，特别是npm命令的工作方式。
- en: Angular project
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Angular项目
- en: We will not demonstrate how to install Angular and how to build a project from
    scratch, as the Angular doc site shows that nicely. So, we will get a simple Angular
    project from the Angular teams' example and update that one for our implementation.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将不会演示如何安装Angular以及如何从头开始构建项目，因为Angular文档网站已经很好地展示了这一点。因此，我们将从Angular团队提供的示例中获取一个简单的Angular项目，并更新它以适应我们的实现。
- en: We will clone the `quickstart` project from the Angular GitHub repo and will
    start on that one. Hope we all have `git` installed globally besides the node/npm.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从Angular GitHub仓库克隆`quickstart`项目，并从那个项目开始。希望我们所有人都已经全局安装了`git`，除了node/npm。
- en: '[PRE17]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This will copy the project locally as `angular-karma` and the folder structure
    will look as illustrated:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把项目复制到本地作为`angular-karma`，文件夹结构将如图所示：
- en: '![Angular project](img/image_03_003.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![Angular项目](img/image_03_003.jpg)'
- en: 'Let''s proceed with it and get ready to run:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续进行并准备运行：
- en: '[PRE18]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Here are a couple of steps to get ready with the example project. The `npm install`
    command will install the required modules for the project dependencies that are
    defined in the `package.json` file in the project root.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一些准备示例项目的步骤。`npm install`命令将安装项目根目录中`package.json`文件定义的项目依赖所需的模块。
- en: Then, we will run the project with `npm start`; this script, defined in `package.json`,
    is used to run the project in the local server.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将使用`npm start`运行项目；这个脚本定义在`package.json`中，用于在本地服务器上运行项目。
- en: 'Let''s compile and run the project:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们编译并运行项目：
- en: '[PRE19]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: If all the required dependencies are installed, this command will compile the
    TypeScript to plain JavaScript and will run the project in the local server.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如果所有必需的依赖项都已安装，此命令将编译TypeScript到纯JavaScript，并在本地服务器上运行项目。
- en: 'The project will launch in a browser and will look as follows:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 项目将在浏览器中启动，外观如下：
- en: '![Angular project](img/image_03_004.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![Angular项目](img/image_03_004.jpg)'
- en: If this sample project runs successfully, then we are good to go in the next
    step, where we will add a test spec, which will include Karma, and run those tests
    with the Karma runner.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这个示例项目运行成功，那么我们就可以进入下一步，在那里我们将添加测试规范，这将包括Karma，并使用Karma运行器运行这些测试。
- en: Getting ready
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 准备工作
- en: As we cloned the sample `quickstart` project, it already integrated and configured
    Karma in the project. For the purpose of learning, we would like to integrate
    Karma in the existing project.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们克隆了示例 `quickstart` 项目，该项目已经集成了并配置了 Karma。为了学习目的，我们希望在现有项目中集成 Karma。
- en: To do so, we will have to remove the existing `karma.conf.js` file from the
    project root directory. Also, we will remove the Karma, Jasmine, and related modules
    from `node_modules`.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 要这样做，我们必须从项目根目录中删除现有的 `karma.conf.js` 文件。此外，我们还将从 `node_modules` 中删除 Karma、Jasmine
    和相关模块。
- en: Interestingly, instead of doing it manually, we can easily create the basic
    Karma config file with a simple command. And with that command, it will ask some
    basic questions as we saw in the previous part of this chapter.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，我们不必手动操作，可以轻松地使用一个简单的命令创建基本的 Karma 配置文件。并且使用这个命令时，它将询问一些基本问题，就像我们在本章前面的部分所看到的那样。
- en: Setting up Karma
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置 Karma
- en: To set up Karma in an Angular project, the first job is to create a `karma.conf.js`
    file in the project root directory. This file basically contains some configuration
    in key-value pairs.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Angular 项目中设置 Karma，首要任务是创建一个位于项目根目录的 `karma.conf.js` 文件。这个文件基本上包含了一些键值对形式的配置。
- en: 'Interestingly, instead of doing it manually, we can easily create the basic
    Karma config file with a simple command. And with that command, it will ask some
    basic questions as we saw in the previous part of this chapter:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，我们不必手动操作，可以轻松地使用一个简单的命令创建基本的 Karma 配置文件。并且使用这个命令时，它将询问一些基本问题，就像我们在本章前面的部分所看到的那样：
- en: '[PRE20]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Use the default answers. After `karma.conf.js` has been created in the current
    directory, open the configuration. A few configurations may need to change, mostly
    the one that is the definition of the files for Karma to use.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 使用默认答案。在当前目录中创建 `karma.conf.js` 后，打开配置。可能需要更改一些配置，主要是 Karma 要使用的文件定义。
- en: 'Use the following definition in the `files` section, which defines the files
    required to run the test:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `files` 部分使用以下定义，它定义了运行测试所需的文件：
- en: '[PRE21]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Note
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Here, with the pattern, we have passed two options, `included` and `watched`.
    `included` refers to whether or not we want to include the file with the `<script>`
    tag; here, we will add it via SystemJS, so this is passed as `false`. And `watched`
    refers to whether or not this file will be watched during changes to the file.
    We have set `true`, as we want to watch the changes.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，通过模式，我们传递了两个选项，`included` 和 `watched`。`included` 指的是我们是否想要包含带有 `<script>`
    标签的文件；在这里，我们将通过 SystemJS 添加它，所以这被传递为 `false`。而 `watched` 指的是在文件更改期间是否需要监视这个文件。我们将其设置为
    `true`，因为我们想监视更改。
- en: There seem to be a lot of files added, but these are basic and a must for running
    the test.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 好像添加了很多文件，但这些是基本文件，是运行测试所必需的。
- en: Let's take a closer look at what the files are. In the first chunk, these are
    mostly library files, including SystemJS as a module loader, zonejs as a sync
    handler, RxJS as a reactive library, and the Angular library itself.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更仔细地看看这些文件。在第一部分，这些主要是库文件，包括作为模块加载器的 SystemJS、作为同步处理器的 zonejs、作为响应式库的 RxJS
    以及 Angular 库本身。
- en: Importantly, a new file in the second chunk is `karma-test-shim.js`, which we
    need to use with Karma as the module loader in test suites, that is, use SystemJS
    to load the modules in the Karma test runner. We will look at that file later
    in this section.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是，第二部分中有一个新文件 `karma-test-shim.js`，我们需要将其与 Karma 一起作为测试套件中的模块加载器使用，即使用 SystemJS
    加载 Karma 测试运行器中的模块。我们将在本节稍后查看该文件。
- en: And then, it's all our app source file; we will put test/spec files on the same
    directory as well so that they will load all of our module files, including their
    test/spec files.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，这就是我们的应用程序源文件；我们将在同一目录中放置测试/规范文件，这样它们将加载所有我们的模块文件，包括它们的测试/规范文件。
- en: 'In addition to the files, we may need to change a few more configuration points
    based on requirements, as follows:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 除了文件之外，我们可能还需要根据需求更改一些更多的配置点，如下所示：
- en: '`plugins`: This is required as Karma will use these `npm` modules to perform.
    If we plan to use more `npm` modules, we will need to add them here; for example,
    if we plan to use PhantomJS as our browser, we will need to add `''karma-phantomjs-launcher''`
    in the list:'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`plugins`：这是必需的，因为 Karma 将使用这些 `npm` 模块来执行。如果我们计划使用更多的 `npm` 模块，我们需要在这里添加它们；例如，如果我们计划使用
    PhantomJS 作为我们的浏览器，我们需要在列表中添加 `''karma-phantomjs-launcher''`：'
- en: '[PRE22]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '`frameworks`: This doesn''t need to change for now, as by default it chooses
    Jasmine; however, it will need to be updated if we plan to use other frameworks,
    such as Mocha. In that case, the following option should be updated:'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`frameworks`：目前不需要更改，因为默认情况下它选择 Jasmine；然而，如果我们计划使用其他框架，如 Mocha，则需要更新它。在这种情况下，以下选项应该更新：'
- en: '[PRE23]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '`browsers`: This is useful when we need to run the test in multiple browsers,
    and most of the time, we may need to run the test in PhantomJS, so we can add
    multiple browsers, as shown:'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`browsers`：当我们需要同时在多个浏览器中运行测试时，这很有用，而且大多数时候，我们可能需要在 PhantomJS 中运行测试，因此我们可以添加多个浏览器，如下所示：'
- en: '[PRE24]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: So far, these are the basic changes we need in the `karma.con.js` files.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，这些是我们需要在 `karma.conf.js` 文件中进行的更改。
- en: 'Let''s take a look at our `karma.conf.js` file and see what it looks like:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们的 `karma.conf.js` 文件，看看它看起来是什么样子：
- en: '[PRE25]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Another important file that we added in the files list is `karma-test-shim.js`;
    and as we mentioned earlier, it's needed for us to use SystemJS (the module loader)
    with Karma. We have copied the file from the Angular quick start project and it's
    possible to change this based on the project structure.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在文件列表中添加的另一个重要文件是 `karma-test-shim.js`；正如我们之前提到的，它是我们使用 Karma 与 SystemJS（模块加载器）所需的；我们已经从
    Angular 快速启动项目中复制了该文件，并且根据项目结构，这可能需要做出一些更改。
- en: 'Let''s take a look at our `karma.conf.js` file:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们的 `karma.conf.js` 文件：
- en: '[PRE26]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Testing the Karma runner
  id: totrans-153
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试 Karma 运行器
- en: 'The initial set up of Karma is almost done; we will have to run our test and
    see how it''s coming along. One more step before we run--we have to add the `karma`
    task in the `npm` script to run via the `npm` command. For that, we will have
    to add a task, as `test`, in the script section of the `package.json` file:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: Karma 的初始设置几乎完成；我们将运行我们的测试并看看进展如何。在运行之前，我们还需要做一件事--我们必须在 `npm` 脚本中添加 `karma`
    任务，以便通过 `npm` 命令运行。为此，我们将在 `package.json` 文件的脚本部分添加一个名为 `test` 的任务：
- en: '[PRE27]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'After adding this snippet, we can run the test via `npm`, with `npm test`,
    which works the same way as `karma start`:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 添加此片段后，我们可以通过 `npm` 运行测试，使用 `npm test`，这与 `karma start` 的工作方式相同：
- en: '[PRE28]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: So, finally, we are ready to run our test via Karma. However, oops, we are getting
    some error! It's missing the `jasmine-core` module that is needed to run the test;
    in fact, there could be more modules missing.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，最终，我们准备通过 Karma 运行我们的测试。然而，哎呀，我们遇到了一些错误！缺少了运行测试所需的 `jasmine-core` 模块；实际上，可能还有更多模块缺失。
- en: 'The output with the error looks as follows:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 出现错误的输出如下：
- en: '![Testing the Karma runner](img/image_03_005.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![测试 Karma 运行器](img/image_03_005.jpg)'
- en: Yes, we are indeed missing the modules and these are actually the development
    dependencies in our test suite. We will get to know a bit more about them in the
    following section.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，我们确实缺少了模块，这些实际上是我们的测试套件中的开发依赖项。在下一节中，我们将了解更多关于它们的信息。
- en: Missing dependencies
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 缺少依赖项
- en: 'Though we are building a basic test suite for Angular, we are still missing
    a few required npm modules and these are the development dependencies for our
    test suite, which are as follows:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们正在为 Angular 构建一个基本的测试套件，但我们仍然缺少一些必需的 npm 模块，这些是测试套件的开发依赖项，如下所示：
- en: '`jasmine-core`: This states that Jasmine is our test framework'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jasmine-core`：这表示 Jasmine 是我们的测试框架'
- en: '`karma`: This is the Karma test runner of our test suite'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`karma`：这是我们的测试套件的 Karma 测试运行器'
- en: '`karma-chrome-launcher`: This is required to launch Chrome from Karma, as we
    defined Chrome as our browser in `karma.config`'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`karma-chrome-launcher`：这是从 Karma 启动 Chrome 所必需的，因为我们已在 `karma.config` 中定义
    Chrome 为我们的浏览器'
- en: '`karma-jasmine`: This is the Karma adapter for Jasmine'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`karma-jasmine`：这是 Karma 对 Jasmine 的适配器'
- en: As long as these are the dependencies, we should install these modules and include
    them in `package.json` as well.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 只要这些是依赖项，我们就应该安装这些模块，并将它们包含在 `package.json` 中。
- en: 'We can install all of these together, as shown here:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以像这里显示的那样一起安装所有这些模块：
- en: '[PRE29]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'After successfully installing all the required dependencies, it seems like
     we are done with our configuration process, and we are ready to run `test` again:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功安装所有必需的依赖项后，看起来我们的配置过程已经完成，我们准备再次运行 `test`：
- en: '[PRE30]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The command output should state something like this:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 命令输出应该显示如下：
- en: '[PRE31]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: That is it. Karma is now running for the first Angular application.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 就这些了。Karma 现在正在运行第一个 Angular 应用程序。
- en: Testing with Angular and Karma
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Angular 和 Karma 进行测试
- en: 'The purpose of this first test using Karma is to create a dynamic to-do list.
    This walk-through will follow the TDD steps we discussed in [Chapter 1](ch01.html
    "Chapter 1. Introduction to Test-Driven Development"), *Introduction to Test-Driven
    Development*: test first, make it run, and make it better. This will allow us
    to gain more experience in using TDD with an Angular application.'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Karma进行的第一次测试的目的是创建一个动态待办事项列表。这次演练将遵循我们在[第1章](ch01.html "第1章。测试驱动开发简介")中讨论的TDD步骤，*测试驱动开发简介*：先测试，然后运行，然后改进。这将使我们能够获得更多使用Angular应用程序进行TDD的经验。
- en: A development to-do list
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个开发待办事项列表
- en: Before we start the test, let's set our focus on what needs to be developed
    using a development to-do list. This will allow us to organize our thoughts.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始测试之前，让我们通过一个开发待办事项列表来集中关注需要开发的内容。这将使我们能够组织我们的思想。
- en: 'Here is the to-do list:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 这是待办事项列表：
- en: '**Maintain a list of items**: The example list consists of test, execute, and
    refactor'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**维护项目列表**：示例列表包括测试、执行和重构'
- en: '**Add an item to the list**: The example list after we add the item is test,
    execute, refactor, and repeat'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**向列表中添加一个项目**：在添加项目后，示例列表是测试、执行、重构和重复'
- en: '**Remove an item from the list**: The example list after we add and remove
    the item is test, execute, and refactor'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**从列表中删除一个项目**：在添加和删除项目后，示例列表是测试、执行和重构'
- en: Testing a list of items
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试项目列表
- en: The first development item is to provide us with the ability to have a list
    of items on a component. The next couple of steps will walk us through the TDD
    process of adding the first feature using the TDD life cycle.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 第一项开发任务是提供在组件上拥有项目列表的能力。接下来的几个步骤将引导我们通过TDD生命周期添加第一个功能。
- en: Test first
  id: totrans-186
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 先测试
- en: 'Determining where to start is often the most difficult part. The best way is
    to remember the three **A**s (**Assemble**, **Act**, and **Assert**) and start
    with the base Jasmine template format. The code to do this is as follows:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 确定从哪里开始通常是最难的部分。最好的方法是记住三个**A**（**组装**、**动作**和**断言**）并从基本的Jasmine模板格式开始。执行此操作的代码如下：
- en: '[PRE32]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Let''s look at the explanation:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看解释：
- en: '`describe`: This defines the main feature that we are testing. The string will
    explain the feature in readable terms, and then the function will follow the test.'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`describe`: 这定义了我们正在测试的主要功能。字符串将以可读的术语解释功能，然后函数将跟随测试。'
- en: '`beforeEach`: This is the assemble step. The function defined in this step
    will be executed before every assert. It is best to put the required test setup
    before each test in this function.'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`beforeEach`: 这是一步组装步骤。在这个步骤中定义的函数将在每个断言之前执行。最好在这个函数中在每个测试之前放置所需的测试设置。'
- en: '`it`: This is the act and assert step. In the `it` section, we will perform
    the action being tested, followed by some assertion. The act step doesn''t have
    to go into the `it` function. Depending on the test, it might be more suited in
    the `beforeEach` function.'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`it`: 这是一步动作和断言步骤。在`it`部分，我们将执行正在测试的动作，然后进行一些断言。动作步骤不需要进入`it`函数。根据测试，它可能更适合在`beforeEach`函数中。'
- en: The three As - Assemble, Act, and Assert
  id: totrans-193
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 三个A - 组装、动作和断言
- en: Now that the template is ready, we can start fitting in the pieces. We will
    again follow the three As mantra.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 现在模板已经准备好了，我们可以开始将这些部分拼凑起来。我们还将遵循三个A的咒语。
- en: The following are the two parts of the assemble section.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是组装部分的两个部分。
- en: 'In the first part, we initialize the component and execute the contractor of
    the class using the following code:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一部分，我们使用以下代码初始化组件并执行类的构造函数：
- en: '[PRE33]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Here, we imported some Angular testing APIs, such as `async` and `Testbed`.
    Here, `async` is used to load the required module to Bootstrap the application
    for the test suite, and `TestBed` is the primary API for writing a unit test for
    the Angular API. It has some service to create, compile, and initiate the components
    in the test suite.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们导入了某些Angular测试API，例如`async`和`Testbed`。在这里，`async`用于加载所需的模块以引导应用程序进行测试套件，而`TestBed`是编写Angular
    API单元测试的主要API。它有一些服务用于在测试套件中创建、编译和初始化组件。
- en: We haven't defined the `AppComponent` component, but we will do this after we
    get a failing test.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还没有定义`AppComponent`组件，但我们在得到失败的测试后将会这样做。
- en: 'The second part talks about the `AppComponent` object. The `AppComponent` object
    will contain the list of items on its `this` variable. Add the following code
    to `beforeEach` to get the component object:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 第二部分讨论了`AppComponent`对象。`AppComponent`对象将包含其`this`变量上的项目列表。将以下代码添加到`beforeEach`中，以获取组件对象：
- en: '[PRE34]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'In assert, there are two parts again:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在断言中，又有两个部分：
- en: 'The first assertion is to ensure that the `AppComponent` object has an `items`
    variable defined with three items. The `items` variable will be used to hold the
    list of all the items:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个断言是确保 `AppComponent` 对象有一个名为 `items` 的变量定义，包含三个项目。`items` 变量将用于存储所有项目的列表：
- en: '[PRE35]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The second and third assertions will be used to confirm whether the data in
    the list is correct:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个和第三个断言将用于确认列表中的数据是否正确：
- en: '[PRE36]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: That's it; the first is test, the second is execute, and the third is refactor.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 就这些；第一个是 test，第二个是 execute，第三个是 refactor。
- en: Make it run
  id: totrans-208
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 让它运行
- en: 'The next step in the TDD life cycle is to make the application run and fix
    the code so that the tests pass. Remember, think about the smallest components
    that can be added to make the test pass by proceeding with the following steps:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: TDD 生命周期的下一步是让应用程序运行，并修复代码以便测试通过。记住，通过以下步骤考虑可以添加的最小组件，以使测试通过：
- en: 'Run the Karma test by typing the following command:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过输入以下命令运行 Karma 测试：
- en: '[PRE37]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'If we encounter the `TypeError: app_component_1.AppComponent is not a constructor`
    error, then it can be due to the following:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '如果我们遇到 `TypeError: app_component_1.AppComponent is not a constructor` 错误，那么它可能是因为以下原因：'
- en: The preceding error message is saying that the `AppComponent` object hasn't
    been defined. Since the error message is telling us what is required, this is
    the perfect place to start.
  id: totrans-213
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 前面的错误信息表明 `AppComponent` 对象尚未定义。由于错误信息告诉我们需要什么，这是一个完美的开始点。
- en: 'Add the `AppComponent` class to the `app.component.ts` file, as follows:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `AppComponent` 类添加到 `app.component.ts` 文件中，如下所示：
- en: '[PRE38]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Run the `start` and `test` command again from the `npm` console. We should now
    see a new error. **Error:** `The expected undefined to be defined as follow`
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次从 `npm` 控制台运行 `start` 和 `test` 命令。现在我们应该看到一个新错误。**错误**：`The expected undefined
    to be defined as follow`
- en: 'The new error message is again clear. We can also see that the code has now
    passed up to the point of our assertion at the following point:'
  id: totrans-217
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的错误信息再次清晰。我们还可以看到代码现在已经通过了以下断言点：
- en: '[PRE39]'
  id: totrans-218
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'As there are no items in the object, we need to add one. Update the `app/app.component.ts`
    file as follows:'
  id: totrans-219
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于对象中没有项目，我们需要添加一个。按照以下方式更新 `app/app.component.ts` 文件：
- en: '[PRE40]'
  id: totrans-220
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Let's run the `start` and `test` commands again from the `npm` console. We should
    now see one of the three tests pass! This means that we have successfully used
    TDD and Karma to get our first test to pass. Now, we need to fix the other three.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从 npm 控制台再次运行 `start` 和 `test` 命令。现在我们应该看到三个测试中的一个通过！这意味着我们已经成功使用 TDD 和 Karma
    通过了第一个测试。现在，我们需要修复其他三个。
- en: 'The next error is: `expected 0 to equal 3 `'
  id: totrans-222
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下一个错误是：`expected 0 to equal 3`
- en: 'The error output again describes exactly what needs to happen. We just need
    to initialize the array with the elements test, execute, and run. Let''s go to
    `app/app.component.ts` and add the data to the array initialization:'
  id: totrans-223
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误输出再次准确地描述了需要发生的事情。我们只需要初始化数组，包含元素 test、execute 和 run。让我们转到 `app/app.component.ts`
    并将数据添加到数组初始化中：
- en: '[PRE41]'
  id: totrans-224
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Run the `start` and `test` commands again from the npm console. Excellent!
    The output is in green and states that all the tests have passed. The result component
    and class code from this step are as follows:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次从 npm 控制台运行 `start` 和 `test` 命令。太棒了！输出是绿色的，表示所有测试都已通过。此步骤的结果组件和类代码如下：
- en: '[PRE42]'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Now that the *Make it run* step is complete, we can move on to the next step
    and make it better.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 现在 *让它运行* 步骤已经完成，我们可以继续下一步，让它变得更好。
- en: Make it better
  id: totrans-228
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 让它变得更好
- en: 'Until this point, there was nothing required to directly refactor or that had
    been identified in the development to-do list. A review of the development to-do
    list shows that an item can be crossed out:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，没有直接需要重构的或已在开发待办事项列表中识别出的内容。审查开发待办事项列表显示，可以勾掉一项：
- en: '**View a list of to-do list items**: The example list consists of test, execute,
    and refactor'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**查看待办事项列表项的列表**：示例列表包括 test、execute 和 refactor'
- en: '**Add an item to a to-do-list**: The example list after we add the item will
    consist of test, execute, refactor, and new item'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**向待办事项列表添加一项**：在我们添加项目后，示例列表将包括 test、execute、refactor 和新项目'
- en: 'Next up is the requirement to add a new item to the list. The TDD rhythm will
    be followed again: test first, make it run, and make it better.'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是添加新项目到列表的要求。我们将再次遵循 TDD 节奏：先测试，然后运行，最后改进。
- en: Adding a function to the component class
  id: totrans-233
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向组件类添加一个函数
- en: The next task is to give the class the ability to add items to the object. This
    will require the addition of a method to the object. This walk-through will follow
    the same TDD steps that we followed previously.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个任务是给类添加添加项目到对象的能力。这需要向对象添加一个方法。本指南将遵循我们之前遵循的相同TDD步骤。
- en: Test first
  id: totrans-235
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 先进行测试
- en: 'Instead of creating a new file and duplicating some of the assemble steps,
    the following test will be inserted under the last `it` method. The reason is
    that the same module and controller will be used:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是创建一个新文件并复制一些组装步骤，以下测试将被插入到最后一个`it`方法下。原因是将使用相同的模块和控制器：
- en: '[PRE43]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: The three As - Assemble, Act, and Assert
  id: totrans-238
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 三个A - 组装、行动和断言
- en: 'Now that the template is ready, we can start filling in the gaps using the
    3 As mantra:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 现在模板已经准备好了，我们可以使用3A咒语来填补空白：
- en: '**Assemble**: There is no initialization or setup required as the component
    and object will be inherited.'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**组装**：由于组件和对象将继承，因此不需要初始化或设置。'
- en: '**Act**: Here, we need to act on the `add` method with a new item. We place
    the `act` function into the `beforEach` function. This allows us to repeat the
    same step if/when more tests are added:'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**行动**：在这里，我们需要使用新项目对`add`方法进行操作。我们将`act`函数放入`beforeEach`函数中。这允许我们在添加更多测试时/如果需要重复相同的步骤：'
- en: '[PRE44]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '**Assert**: Here, an item should be added to the list, and then you need to
    confirm that the last item in the array is as expected:'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**断言**：在这里，应该向列表中添加一个项目，然后需要确认数组中的最后一个项目符合预期：'
- en: '[PRE45]'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Make it run
  id: totrans-245
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 让它运行
- en: 'The next step in the TDD life cycle is to make it run. Remember, think about
    the smallest components that can be added to make the test pass, as follows:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: TDD生命周期中的下一步是让它运行。记住，考虑可以添加的最小组件以使测试通过，如下所示：
- en: 'Ensure that Karma is running in our console by typing in the following commands:'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过输入以下命令确保Karma在我们的控制台中运行：
- en: '[PRE46]'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'The first error will state `TypeError: undefined is not a function`.'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '第一个错误将声明`TypeError: undefined is not a function`。'
- en: 'This error refers to the following line of code:'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个错误指的是以下代码行：
- en: '[PRE47]'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'The error is telling us that the `add` method hasn''t been defined. The `add`
    function will need to be added to the `app/app.component.ts` code. The class has
    already been defined, so the `add` function needs to be placed in the class:'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 错误告诉我们`add`方法尚未定义。需要将`add`函数添加到`app/app.component.ts`代码中。类已经定义，因此需要将`add`函数放在类中：
- en: '[PRE48]'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Note how the `add` function doesn't contain any logic. The smallest component
    has been added to get the test to satisfy the error message.
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意`add`函数不包含任何逻辑。已经添加了最小的组件以使测试满足错误信息。
- en: Review the console window for the next error.
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看控制台窗口以获取下一个错误。
- en: Success! All five tests have now passed.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 成功！现在所有五个测试都已通过。
- en: 'The resulting code added to get the tests to pass is as follows:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使测试通过，添加的代码如下：
- en: '[PRE49]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Make it better
  id: totrans-259
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 让它变得更好
- en: The main thing that we need to refactor is that the `add` function still hasn't
    been fully implemented. It contains a hard coded value, and the minute we send
    in a different item into the `add` function, the test will fail.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要重构的主要问题是`add`函数尚未完全实现。它包含一个硬编码的值，一旦我们向`add`函数发送不同的项目，测试就会失败。
- en: 'Keep Karma running so that we can keep passing the tests as changes are made.
    The main issue with the current `add` method is as follows:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 保持Karma运行，以便在做出更改时继续通过测试。当前`add`方法的主要问题如下：
- en: It doesn't accept any parameters
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它不接受任何参数
- en: It doesn't push a parameter onto the list but uses a hardcoded value
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它没有将参数推送到列表中，而是使用硬编码的值
- en: 'The resultant `add` function should now look as follows:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 现在的`add`函数应该看起来如下：
- en: '[PRE50]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Run the `start` and `test` commands again from the `npm` console. Confirm that
    the Karma output still displays `SUCCESS`:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 再次从`npm`控制台运行`start`和`test`命令。确认Karma输出仍然显示`SUCCESS`：
- en: '[PRE51]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Configuring Karma with Travis CI
  id: totrans-268
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置Karma与Travis CI
- en: '**Continuous integration** (**CI**) is a development practice where developers
    need to integrate code into a shared repository. It is run in the automated build
    process with a test when any change happens in the codebase. This detects the
    error early, before it is pushed to production. There are lot of CI services around,
    including Travis CI, Jenkin CI, Circle CI, and so on.'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '**持续集成**（**CI**）是一种开发实践，其中开发人员需要将代码集成到共享仓库中。它在与代码库中的任何更改发生时在自动构建过程中运行，并执行测试。这可以在代码推送到生产之前检测到错误。有许多CI服务，包括Travis
    CI、Jenkins CI、Circle CI等。'
- en: In this section, we will see how we can integrate Karma with Travis.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到如何将Karma与Travis集成。
- en: Travis CI
  id: totrans-271
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Travis CI
- en: Travis CI is a popular hosted continuous integration platform that integrates
    with the GitHub project/repository to automatically run the test with every change
    in the code base of any branch or even with a pull request. It's easy to get the
    integration system just by putting a `.travis.yml` file in the project root with
    some configuration information about the project.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: Travis CI是一个流行的托管持续集成平台，它与GitHub项目/存储库集成，可以自动在代码库的任何分支或甚至每个pull request的更改时运行测试。只需在项目根目录中放置一个包含有关项目配置信息的`.travis.yml`文件，就可以轻松地获得集成系统。
- en: 'So, we may ask, why Travis? There are a few other CI services around. If we
    compare Travis to the other CI services, it has some benefits over the others:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可能会问，为什么是Travis？还有其他一些CI服务。如果我们将Travis与其他CI服务进行比较，它相对于其他服务有一些优势：
- en: It's a hosted service; there is no need to host, install, and configure
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它是一个托管服务；无需托管、安装和配置
- en: It's free and open source
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它是免费且开源的
- en: It has a separate test code for every branch, so it is easy to run a test for
    an individual branch
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它为每个分支都有独立的测试代码，因此很容易为单个分支运行测试
- en: Configuring Travis
  id: totrans-277
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置Travis
- en: As we said, we will have a `.travis.yml` file in our project directory with
    some configuration and information about our project.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所说，我们将在项目目录中有一个`.travis.yml`文件，其中包含一些配置和关于我们项目的信息。
- en: 'Here is what the basic configuration in the YAML file looks like:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是YAML文件中的基本配置看起来像什么：
- en: '**Specify the language**: We have used Node.js here:'
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**指定语言**：我们在这里使用了Node.js：'
- en: '[PRE52]'
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '**Command or script**: This is required to run before or after each build;
    as shown here, this script will set the `git` username every time before running
    the build:'
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**命令或脚本**：这是在每次构建前后必需的；如所示，此脚本将在每次运行构建之前设置`git`用户名：'
- en: '[PRE53]'
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'In the preceding example, we have passed the configuration to run the build
    process in a real browser (Firefox) with a virtual screen, by default, with karma.
    It has run the process in the PhantomJS headless browser. This might come in handy,
    as long as Travis supports the real browser beside PhantomJS:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们通过karma将配置传递给在真实浏览器（Firefox）中运行构建过程，默认使用虚拟屏幕，这已经使用PhantomJS无头浏览器运行了该过程。这可能很有用，只要Travis支持PhantomJS之外的实时浏览器：
- en: '[PRE54]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '**Notifications**: This is required to set the notifications for e-mail and
    chat. Here, we have set `false` for `email`, as we do not want overtime e-mail
    notifications about the builds:'
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通知**：这是设置电子邮件和聊天通知所必需的。在这里，我们将`email`设置为`false`，因为我们不希望收到关于构建的过度电子邮件通知：'
- en: '[PRE55]'
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Setting up the test with Karma
  id: totrans-288
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Karma设置测试
- en: 'As seen earlier, we are guessing that we have the `package.json` file in our
    project root among the npm packages; if not, let''s create a `package.json` file
    over there and add these configuration snips. Here, the first one is a dependency
    of Karma and the second one is to set the required params for the `npm test`,
    as Travis will run this to trigger our test. These will tell Travis how to run
    our test:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们猜测我们的项目根目录中有一个`package.json`文件，其中包含npm包；如果没有，让我们在那里创建一个`package.json`文件并添加这些配置片段。这里，第一个是Karma的依赖项，第二个是为`npm
    test`设置所需的参数，因为Travis将运行此命令来触发我们的测试。这些将告诉Travis如何运行我们的测试：
- en: '[PRE56]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Our initial setup and configuration are ready for testing. We defined the Karma
    dependency, as Travis will run `nmp install` for every suite, and will take the
    necessary steps for adding Karma. And for running the test, it will call the `npm
    test`, and we defined how that test task will run the test. Here, we have set
    the default browser to PhantomJS so that the test will run with it. However, if
    we need to run the test with a different browser, we should define that in the
    `.travis.yml` file with the `before_script` command, as we showed earlier for
    Firefox.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最初的设置和配置已经准备好进行测试。我们定义了Karma依赖项，因为Travis将为每个套件运行`nmp install`，并将采取添加Karma的必要步骤。在运行测试时，它将调用`npm
    test`，我们定义了该测试任务将如何运行测试。在这里，我们已将默认浏览器设置为PhantomJS，以便测试与其一起运行。然而，如果我们需要使用不同的浏览器运行测试，我们应该在`.travis.yml`文件中使用`before_script`命令定义这一点，就像我们之前为Firefox所做的那样。
- en: 'In that case, `npm test` will not run the test with the custom browser; for
    that, we have to do a custom call with the browser name, as follows:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 在那种情况下，`npm test`将不会使用自定义浏览器运行测试；为此，我们必须使用浏览器名称进行自定义调用，如下所示：
- en: '[PRE57]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Self-test questions
  id: totrans-294
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自测问题
- en: 'The following self-test questions will help you further test your knowledge
    of using TDD with AngularJS and Karma:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 以下自我测试问题将帮助你进一步测试你使用AngularJS和Karma进行TDD的知识：
- en: Q1\. How do you use Karma to create a configuration file?
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: Q1. 你如何使用Karma创建一个配置文件？
- en: '`karma config`'
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`karma config`'
- en: '`karma init`'
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`karma init`'
- en: '`karma -config karma.conf.js`'
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`karma -config karma.conf.js`'
- en: Q2\. The Jasmine test method, named `before`, gets executed before every test.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: Q2. Jasmine测试方法，名为`before`，在每次测试之前执行。
- en: 'True'
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正确
- en: 'False'
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 错误
- en: Q3\. Bower is used to install Karma.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: Q3. Bower用于安装Karma。
- en: 'True'
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正确
- en: 'False'
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 错误
- en: Q4\. The 3 As stand for which one of these?
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: Q4. 3A代表以下哪一个？
- en: A group of super heroes
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一群超级英雄
- en: Assemble, Act, and Assert
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 组装、行动和断言
- en: Accept, Approve, and Act
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接受、批准和行动
- en: Summary
  id: totrans-310
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we discussed how Karma became important. We saw how to install,
    configure, and run Karma. Finally, we walked through an Angular example project
    using Karma with TDD.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了Karma如何变得重要。我们看到了如何安装、配置和运行Karma。最后，我们通过一个使用Karma进行TDD的Angular示例项目进行了演示。
- en: In the next chapter, we will learn about end-to-end testing with Protractor.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习使用Protractor进行端到端测试。
