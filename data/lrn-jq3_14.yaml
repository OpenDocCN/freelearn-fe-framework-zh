- en: Appnedix A – Testing JavaScript with QUnit
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录 A – 使用 QUnit 测试 JavaScript
- en: Throughout this book we've written a lot of JavaScript code, and we've seen
    the many ways in which jQuery helps us write this code with relative ease. Yet
    whenever we've added a new feature, we've had to take the extra step of manually
    checking our web page to ensure that everything is working as expected. While
    this process may work for simple tasks, as projects grow in size and complexity,
    manual testing can become quite onerous. New requirements can introduce *regression
    bugs* that break parts of the script that previously worked well. It's far too
    easy to miss these bugs that don't specifically relate to the latest code changes
    because we naturally only test for what we've just done.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们写了很多 JavaScript 代码，我们已经看到了 jQuery 如何帮助我们相对轻松地编写这些代码的许多方式。然而，每当我们添加新功能时，我们都必须额外的手动检查我们的网页，以确保一切如预期般运作。虽然这个过程对于简单的任务可能有效，但随着项目规模和复杂性的增长，手动测试可能变得相当繁琐。新的要求可能引入*回归错误*，破坏先前良好运作的脚本部分。很容易忽略这些与最新代码更改无关的错误，因为我们自然只测试我们刚刚完成的部分。
- en: 'What we need instead is an automated system that runs our tests for us. The
    **QUnit** testing framework is just such a system. While there are many other
    testing frameworks, and they all have their own benefits, we recommend QUnit for
    most jQuery projects because it is written and maintained by the jQuery project.
    In fact, jQuery itself uses QUnit. In this appendix, we will cover:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要的是一个自动化系统来为我们运行测试。**QUnit** 测试框架就是这样一个系统。虽然有许多其他的测试框架，它们都有各自的好处，但我们推荐在大多数
    jQuery 项目中使用 QUnit，因为它是由 jQuery 项目编写和维护的。事实上，jQuery 本身就使用 QUnit。在这个附录中，我们将介绍：
- en: How to set up the QUnit testing framework within a project
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在项目中设置 QUnit 测试框架
- en: Unit test organization to aid in code coverage and maintenance
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单元测试组织以帮助代码覆盖和维护
- en: The various types of tests available with QUnit
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 各种 QUnit 可用的测试类型
- en: Common practices for ensuring that tests are reliable indicators of successful
    code
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保证测试可靠指示成功代码的常见实践
- en: Suggestions for other types of testing beyond what QUnit offers
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对 QUnit 所提供的以外的其他测试类型的建议
- en: Downloading QUnit
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载 QUnit
- en: The QUnit framework can be downloaded from the official QUnit website at [http://qunitjs.com/](http://qunitjs.com/).
    There we can find links to the stable version (currently 2.3.0) as well as a development
    version (qunit-git). Both versions include a style sheet in addition to the JavaScript
    file for formatting the test output.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: QUnit 框架可从官方 QUnit 网站[http://qunitjs.com/](http://qunitjs.com/)下载。在那里，我们可以找到到稳定版本的链接（当前为
    2.3.0）以及开发版本（qunit-git）。这两个版本都包括一个样式表以及用于格式化测试输出的 JavaScript 文件。
- en: Setting up the document
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置文档
- en: Once we have the QUnit files in place, we can set up the test HTML document.
    In a typical project, this file would be named `index.html` and placed in the
    same test subfolder as `qunit.js` and `qunit.css`. For this demonstration, however,
    we'll put it in the parent directory.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们把 QUnit 文件放好，我们就可以设置测试 HTML 文档了。在一个典型的项目中，这个文件通常会命名为 `index.html`，并放在与 `qunit.js`
    和 `qunit.css` 相同的测试子文件夹中。然而，为了演示，我们将把它放在父目录中。
- en: The `<head>` element of the document contains a `<link>` tag for the CSS file
    and `<script>` tags for jQuery, QUnit, the JavaScript we'll be testing (`A.js`),
    and the tests themselves (`listings/A.*.js`). The `<body>` tag consists of two
    main elements for running and displaying the results of the tests.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 文档的 `<head>` 元素包含了一个用于 CSS 文件的 `<link>` 标签和用于 jQuery、QUnit、我们将进行测试的 JavaScript
    文件（`A.js`）以及测试本身（`listings/A.*.js`）的 `<script>` 标签。`<body>` 标签包含了两个主要元素用于运行和显示测试结果。
- en: 'To demonstrate QUnit, we''ll use portions of [Chapter 2](195342ed-f533-42e7-8a8d-f9a3462382b7.xhtml),
    *Selecting Elements*, and [Chapter 6](3a5a790f-4c0a-4b63-bb00-cc38e78309c6.xhtml),
    *Sending Data with Ajax*:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要演示 QUnit，我们将使用[第 2 章](195342ed-f533-42e7-8a8d-f9a3462382b7.xhtml)，*选择元素*，和[第
    6 章](3a5a790f-4c0a-4b63-bb00-cc38e78309c6.xhtml)，*使用 Ajax 发送数据*中的部分内容：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Since [Chapter 2](195342ed-f533-42e7-8a8d-f9a3462382b7.xhtml), *Selecting Elements*,
    code that we'll test depends on the DOM; we want the test markup to match what
    we're using on the actual page. We can simply copy and paste the HTML content
    that we used in [Chapter 2](195342ed-f533-42e7-8a8d-f9a3462382b7.xhtml), *Selecting
    Elements*, which should replace the `<!-- Test Markup Goes Here -->` comment.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 自[第2章](195342ed-f533-42e7-8a8d-f9a3462382b7.xhtml)，*选择元素*之后，我们要测试的代码取决于DOM；我们希望测试标记与我们在实际页面上使用的内容匹配。我们可以简单地复制并粘贴我们在[第2章](195342ed-f533-42e7-8a8d-f9a3462382b7.xhtml)中使用的HTML内容，这将替换`<!--测试标记在这里-->`注释。
- en: Organizing tests
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组织测试
- en: 'QUnit provides two levels of test grouping named after their respective function
    calls: `QUnit.module()` and `QUnit.test()`. The **module** is like a general category
    under which the tests will be run; the test is actually a *set* of tests; the
    function takes a callback in which all of that test''s specific **unit tests**
    are run. We''ll group our tests by the chapter topic and place the code in our
    `test/test.js` file:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: QUnit提供两个级别的测试分组，其名称分别根据其各自的函数调用命名：`QUnit.module()`和`QUnit.test()`。**模块**就像一个将运行测试的一般类别；测试实际上是*一组*测试；该函数取一个回调，在其中运行所有该测试的特定**单元测试**。我们将通过章节主题对我们的测试进行分组，并将代码放在我们的`test/test.js`文件中：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Listing A.1
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 列表A.1
- en: It's not necessary to set up the file with this test structure, but it's good
    to have some overall structure in mind. In addition to the `QUnit.module()` and
    `QUnit.test()` grouping, we have to tell the test how many assertions to expect.
    Since we're just getting organized, we need to tell the test that there aren't
    any assertions yet (`assert.expect(0)`) in order for the tests to run.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 不需要使用此测试结构设置文件，但心中有一些整体结构是很好的。除了`QUnit.module()`和`QUnit.test()`分组外，我们还需要告诉测试要期望多少断言。由于我们只是在组织，我们需要告诉测试尚未有任何断言（`assert.expect(0)`）以便进行测试。
- en: 'Notice that our modules and tests do not need to be placed inside a `$(() =>
    {})` call because QUnit by default waits until the window has loaded before it
    begins running the tests. With this very simple setup, loading the test HTML results
    in a page that looks like this:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们的模块和测试不需要放在`$(() => {})`调用内，因为QUnit默认会等到窗口加载完毕后才开始运行测试。通过这个非常简单的设置，加载测试HTML会导致页面看起来像这样：
- en: '![](img/3145OS_AppB_01.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3145OS_AppB_01.png)'
- en: Note that the module name is light blue and the test name is darker blue. Clicking
    on either one will expand the results of that set of tests, which are collapsed
    by default when all the tests in the set pass. The Ajax module does not appear
    yet because we haven't written any tests for it.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，模块名称为浅蓝色，测试名称为深蓝色。单击任一将展开该组测试的结果，这些结果在通过该组的所有测试时，默认情况下是折叠的。Ajax模块尚未出现，因为我们还没有为其编写任何测试。
- en: Adding and running tests
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加和运行测试
- en: In **test-driven development**, we write tests before writing code. This way,
    we can observe when a test fails, add new code, and then see that the test passes,
    verifying that our change has the intended effect.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在**测试驱动开发**中，我们在编写代码之前编写测试。这样，当测试失败时，我们可以添加新代码，然后看到测试通过，验证我们的更改具有预期效果。
- en: 'Let''s start by testing the child selector that we used in [Chapter 2](195342ed-f533-42e7-8a8d-f9a3462382b7.xhtml),
    *Selecting Elements*, to add a `horizontal` class to all `<li>` elements that
    are children of `<ul id="selected-plays">`:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从测试我们在[第2章](195342ed-f533-42e7-8a8d-f9a3462382b7.xhtml)中使用的子选择器开始，*选择元素*，向所有`<ul
    id="selected-plays">`的子元素`<li>`添加`horizontal`类：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Listing A.2
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 列表A.2
- en: 'We''re testing our ability to select elements on the page, so we use the assert
     `assert.equal()` test to compare the number of top-level `<li>` elements against
    the number `3`. If the two are equal, the test is successful and is added to the
    number of passed tests. If not, the test fails:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在测试我们选择页面上元素的能力，因此我们使用断言 `assert.equal()` 测试来比较顶级`<li>`元素的数量是否等于数字`3`。如果两者相等，测试成功，并添加到通过测试的数量中。如果不相等，则测试失败：
- en: '![](img/Screen-Shot-2017-03-31-at-2.39.49-PM.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Screen-Shot-2017-03-31-at-2.39.49-PM.png)'
- en: 'Of course, the test fails because we have not yet written the code to add the
    `horizontal` class. It is simple to add that code, though. We do so in the main
    script file for the page, which we called `A.js`:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，测试失败了，因为我们还没有编写代码将`horizontal`类添加到元素中。尽管如此，添加该代码非常简单。我们在页面的主脚本文件中执行，我们将其称为`A.js`：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Listing A.3
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 列表A.3
- en: 'When we run the test now, the test passes as expected:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行测试时，测试如预期般通过：
- en: '![](img/Screen-Shot-2017-03-31-at-4.19.27-PM.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Screen-Shot-2017-03-31-at-4.19.27-PM.png)'
- en: 'Now the Selecting: Child Selector test shows 1 in parentheses, indicating that
    the total number of tests is one. We can take the testing a step further now by
    adding a couple of attribute selector tests:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在选择：子选择器测试显示圆括号中的1，表示总测试数为一。 现在我们可以进一步测试，通过添加一些属性选择器测试：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Listing A.4
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: A.4 清单
- en: 'Here we''ve introduced another type of test: `ok()`. This one takes two arguments:
    an expression that should evaluate to `true` if successful, and a description.
    Also note that we''ve moved the local `topLis` variable out of the Child Selector
    test, where it was in *Listing A.2*, and into the module''s `beforeEach()` callback
    function. The `QUnit.module()` function takes an optional second argument, which
    is a plain object that can include a `beforeEach()` and an `afterEach()` function.
    Within these functions, we can use `this` as the shared context for all of a module''s
    tests.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们介绍了另一种类型的测试：`ok()`。 这个函数接受两个参数：一个表达式，如果成功则应评估为 `true`，以及一个描述。 还要注意，我们将本地的
    `topLis` 变量从子选择器测试中移到了*清单 A.2*中，并将其放入模块的`beforeEach()`回调函数中。 `QUnit.module()`
    函数接受一个可选的第二个参数，这是一个普通对象，可以包含一个 `beforeEach()` 和一个 `afterEach()` 函数。 在这些函数内部，我们可以使用`this`作为模块所有测试的共享上下文。
- en: 'Again, the new tests will fail without corresponding working code:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，如果没有相应的工作代码，新测试将失败：
- en: '![](img/Screen-Shot-2017-03-31-at-5.18.31-PM.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Screen-Shot-2017-03-31-at-5.18.31-PM.png)'
- en: Here we can see the difference in test failure output between the `assert.ok()`
    test, which only shows the test's label (a.mailto) and source, and the `assert.equal()`
    test, which also details the expected result (instead of always expecting `true`).
    Because it provides more information for test failures, `assert.equal()` is typically
    preferred over `assert.ok()`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到`assert.ok()`测试和`assert.equal()`测试之间的测试失败输出的差异，`assert.ok()`测试仅显示测试的标签（a.mailto）和源，而`assert.equal()`测试还详细说明了预期的结果（而不总是期望`true`）。
    因为它为测试失败提供了更多信息，通常优先使用`assert.equal()`而不是`assert.ok()`。
- en: 'Let''s include the necessary code:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们包含必要的代码：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Listing A.5
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: A.5 清单
- en: 'The two tests now pass, as we can see by expanding the set:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在两个测试通过了，我们可以通过扩展集来看到：
- en: '![](img/Screen-Shot-2017-03-31-at-5.36.30-PM.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Screen-Shot-2017-03-31-at-5.36.30-PM.png)'
- en: On failure, `assert.equal()` presented more information than `assert.ok()`.
    On success, both tests simply display the label.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在失败时，`assert.equal()` 提供了比`assert.ok()`更多的信息。 成功时，两个测试只显示标签。
- en: Asynchronous testing
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 异步测试
- en: 'Testing asynchronous code such as Ajax requests presents an additional challenge.
    The rest of the tests must pause while the asynchronous test occurs, and then
    they must begin again when it is complete. This type of scenario is by now very
    familiar; we have seen such asynchronous operations in effects queues, Ajax callback
    functions, and promise objects. Asynchronous tests in QUnit are just like the
    regular `QUnit.test()` function except that it will pause the running of tests
    until we resume them with a call to a function created by `assert.async()` function:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 测试异步代码，如 Ajax 请求，提供了额外的挑战。 其余测试必须在异步测试发生时暂停，然后在完成时重新开始。 这种类型的场景现在非常熟悉； 我们在特效队列、Ajax
    回调函数和 promise 对象中看到了这样的异步操作。 QUnit 中的异步测试与常规的 `QUnit.test()` 函数类似，只是它将暂停测试的运行，直到我们使用由
    `assert.async()` 函数创建的函数调用恢复它们：
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Listing A.6
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: A.6 清单
- en: 'Here we''re simply requesting JSON from `a.json` and allowing the tests to
    continue once the request has completed, whether it succeeds or fails, by calling
    `done()` inside the `.always()` callback function. For the actual tests, we''re
    going to check the `textStatus` value to ensure that the request is successful
    and check the value of one of the objects within the response JSON array:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们只是从`a.json`请求 JSON，并且在请求完成后允许测试继续，无论成功与否，都会在`.always()`回调函数内调用`done()`。
    对于实际的测试，我们将检查`textStatus`值以确保请求成功，并检查响应 JSON 数组中一个对象的值：
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Listing A.7
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: A.7 清单
- en: 'For testing the response value, we use yet another test function: `assert.deepEqual()`.
    Normally when two objects are compared, they are considered not equal unless they
    actually refer to the same location in memory. If we want to compare the object''s
    contents instead, `assert.deepEqual()` should be used. This function walks through
    two objects to ensure that they have the same properties and that those properties
    have the same values.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试响应值，我们使用另一个测试函数：`assert.deepEqual()`。通常当比较两个对象时，除非它们实际上指向内存中的相同位置，否则它们被认为不相等。如果我们想要比较对象的内容，应使用
    `assert.deepEqual()`。这个函数会遍历两个对象，确保它们具有相同的属性，并且这些属性具有相同的值。
- en: Other types of tests
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他类型的测试
- en: QUnit comes with a number of other test functions as well. Some, such as `notEqual()`
    and `notDeepEqual()`, are simply the inverses of functions we've used, while others,
    such as `strictEqual()` and `throws()`, have more distinct uses. More information
    about these functions, as well as details and additional examples regarding QUnit
    in general, are available on the QUnit website ([http://qunitjs.com/](http://qunitjs.com/))
    as well as the QUnit API site ([http://api.qunitjs.com/](http://api.qunitjs.com/)).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: QUnit还配备了其他一些测试函数。其中有些函数，比如`notEqual()`和`notDeepEqual()`，只是我们使用的函数的反义，而另一些函数，比如`strictEqual()`和`throws()`，具有更明显的用途。有关这些函数的更多信息，以及有关QUnit的概述和其他示例的详细信息，可以在QUnit网站([http://qunitjs.com/](http://qunitjs.com/))以及QUnit
    API网站([http://api.qunitjs.com/](http://api.qunitjs.com/))上找到。
- en: Practical considerations
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实际考虑
- en: The examples in this appendix have been necessarily simple. In practice, we
    can write tests that ensure the correct operation of quite complicated behaviors.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 本附录中的示例必须是简单的。在实践中，我们可以编写确保相当复杂行为的正确操作的测试。
- en: Ideally, we keep our tests as brief and simple as possible, even when the behaviors
    they are testing are intricate. By writing tests for a few specific scenarios,
    we can be reasonably certain that we are fully testing the behavior, even though
    we do not have a test for every possible set of inputs.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，我们尽量使我们的测试尽可能简洁和简单，即使它们测试的行为很复杂。通过为一些特定的场景编写测试，我们可以相当确定地确保我们完全测试了行为，即使我们并没有针对每一种可能的输入情况编写测试。
- en: However, it is possible that an error is observed in our code even though we
    have written tests for it. When tests pass and yet an error occurs, the correct
    response is not to immediately fix the problem, but rather to first write a new
    test for the behavior that fails. This way, we can not only verify that the problem
    is solved when we correct the code, but also introduce an additional test that
    will help us avoid regressions in the future.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，即使我们已经为其编写了测试，可能会在我们的代码中观察到一个错误。当测试通过但出现错误时，正确的响应不是立即修复问题，而是首先为失败的行为编写一个新的测试。这样，我们不仅可以在纠正代码时验证问题是否解决，还可以引入额外的测试，帮助我们避免将来出现回归问题。
- en: QUnit can be used for **functional testing** in addition to **unit testing**.
    While unit tests are designed to confirm the correct operation of code units (methods
    and functions), functional tests are written to ensure appropriate interface responses
    to user input. For example, in [Chapter 12](0446c068-e7fd-426a-ab8b-0157b1387e1f.xhtml),
    *Advanced DOM Manipulation*, we implemented a table-sorting behavior. We could
    write a unit test for a sorting method, verifying that once the method is called
    the table is sorted. Alternatively, a functional test could simulate a user's
    click on a table heading and then observe the result to check that the table is
    indeed sorted.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: QUnit除了**单元测试**之外，还可以用于**功能测试**。单元测试旨在确认代码单元（方法和函数）的正确运行，而功能测试则旨在确保用户输入的适当接口响应。例如，在[第12章](0446c068-e7fd-426a-ab8b-0157b1387e1f.xhtml)中的*高级DOM操作*中，我们实现了表格排序行为。我们可以为排序方法编写一个单元测试，验证一旦调用方法表格就排序了。另外，功能测试可以模拟用户点击表头，然后观察结果以检查表格是否确实已排序。
- en: Functional testing frameworks that work alongside QUnit, such as dominator.js
    ([http://mwbrooks.github.io/dominator.js/](http://mwbrooks.github.io/dominator.js/))
    and FuncUnit ([http://funcunit.com/](http://funcunit.com/)), can help make writing
    functional tests and simulating events much easier. To further automate tests
    in a variety of browsers, the **Selenium** ([http://seleniumhq.org/](http://seleniumhq.org/))
    suite can be used in conjunction with these frameworks.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 与 QUnit 配合使用的功能测试框架，例如 dominator.js ([http://mwbrooks.github.io/dominator.js/](http://mwbrooks.github.io/dominator.js/))
    和 FuncUnit ([http://funcunit.com/](http://funcunit.com/))，可以帮助更轻松地编写功能测试和模拟事件。为了在各种浏览器中进一步自动化测试，可以将
    **Selenium** ([http://seleniumhq.org/](http://seleniumhq.org/)) 套件与这些框架一起使用。
- en: To ensure consistent results for our tests, we need to work with sample data
    that is reliable and unchanging. When testing jQuery code that is applied to a
    dynamic site, it can be beneficial to capture and store a static version of the
    page to run tests against. This approach also isolates your code's components,
    making it easier to determine whether errors are caused by server-side or browser-side
    code.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保我们的测试结果一致，我们需要使用可靠且不变的样本数据进行工作。当测试应用于动态站点的 jQuery 代码时，捕获和存储页面的静态版本以运行测试可能是有益的。这种方法还可以隔离您的代码组件，使得更容易确定错误是由服务器端代码还是浏览器端代码引起的。
- en: Further reading
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'These considerations are certainly not an exhaustive list. Test-driven development
    is a deep topic, and a short appendix is not enough to cover it fully. Some online
    resources containing more information on the topic include:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这些考虑肯定不是一个详尽的列表。测试驱动开发是一个深入的话题，一个简短的附录是不足以完全涵盖的。一些在线资源包含有关该主题的更多信息，包括：
- en: Introduction to unit testing ([http://qunitjs.com/intro/](http://qunitjs.com/intro/))
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单元测试介绍 ([http://qunitjs.com/intro/](http://qunitjs.com/intro/))。
- en: '*QUnit Cookbook* ([http://qunitjs.com/cookbook/](http://qunitjs.com/cookbook/))'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*QUnit Cookbook* ([http://qunitjs.com/cookbook/](http://qunitjs.com/cookbook/))。'
- en: The *jQuery Test-Driven Development* article by Elijah Manor ([http://msdn.microsoft.com/en-us/scriptjunkie/ff452703.aspx](http://msdn.microsoft.com/en-us/scriptjunkie/ff452703.aspx))
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Elijah Manor 撰写的 *jQuery 测试驱动开发* 文章 ([http://msdn.microsoft.com/en-us/scriptjunkie/ff452703.aspx](http://msdn.microsoft.com/en-us/scriptjunkie/ff452703.aspx))。
- en: The *Unit Testing Best Practices* article by Bob McCune ([http://www.bobmccune.com/2006/12/09/unit-testing-best-practices/](http://www.bobmccune.com/2006/12/09/unit-testing-best-practices/))
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*单元测试最佳实践* 文章由 Bob McCune ([http://www.bobmccune.com/2006/12/09/unit-testing-best-practices/](http://www.bobmccune.com/2006/12/09/unit-testing-best-practices/))
    撰写。'
- en: 'Many books on the topic also exist, such as:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这个主题也有很多书籍，比如：
- en: '*Test Driven Development: By Example,* *Kent Beck *'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*以示例驱动的测试*, *Kent Beck*。'
- en: '*The Addison Wesley Signature Series*'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Addison Wesley Signature Series*'
- en: '*Test-Driven JavaScript Development*, *Christian Johansen*, *Addison Wesley*.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Test-Driven JavaScript Development*, *Christian Johansen*, *Addison Wesley*。'
- en: Summary
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Writing tests with QUnit can be an effective aid in keeping our jQuery code
    clean and maintainable. We've seen just a few ways that we can implement tests
    in a project to ensure that our code is functioning the way we intend it to. By
    testing small, discrete units of code, we can mitigate some of the problems that
    occur when projects become more complex. At the same time, we can more efficiently
    test for regressions throughout a project, saving us valuable programming time.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 QUnit 进行测试可以有效地帮助我们保持 jQuery 代码的清洁和可维护性。我们已经看到了一些在项目中实现测试以确保我们的代码按照我们意图的方式运行的方法。通过测试代码的小、独立单元，我们可以减轻项目变得更复杂时出现的一些问题。同时，我们可以更有效地在整个项目中测试回归，节省宝贵的编程时间。
