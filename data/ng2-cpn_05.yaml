- en: Chapter 5. Building Dynamic Components
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。构建动态组件
- en: Components are data driven by nature. They should be able to render dynamic
    data, respond to user interactions, and react to events.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 组件本质上是数据驱动的。它们应该能够呈现动态数据，响应用户交互，并对事件做出反应。
- en: In this chapter, we will continue where we stopped in [Chapter 4](part0031.xhtml#aid-TI1E1
    "Chapter 4. Building a Basic Component"), *Building a Basic Component*, focusing
    on the component template syntax, and learn how to bind data and events.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将继续在[第4章](part0031.xhtml#aid-TI1E1 "第4章。构建基本组件")中停下来，重点放在组件模板语法上，并学习如何绑定数据和事件。
- en: 'The topics that will be covered are as follows:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 将涵盖的主题如下：
- en: Data interpolation
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据插值
- en: Using core directives
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用核心指令
- en: Properties binding
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 属性绑定
- en: Events bindings
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事件绑定
- en: Two-way bindings
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 双向绑定
- en: Data interpolation
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据插值
- en: 'In [Chapter 3](part0025.xhtml#aid-NQU21 "Chapter 3. The TypeScript Primer"),
    *The TypeScript Primer*, we bound a simple string to the template. If you haven''t
    done it, refer to [Chapter 4](part0031.xhtml#aid-TI1E1 "Chapter 4. Building a
    Basic Component"), *Building a Basic Component*. Let''s overview our app-c`omponent`
    code:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第3章](part0025.xhtml#aid-NQU21 "第3章。TypeScript入门")中，*TypeScript入门*，我们将一个简单的字符串绑定到模板。如果您还没有这样做，请参考[第4章](part0031.xhtml#aid-TI1E1
    "第4章。构建基本组件")，*构建基本组件*。让我们回顾一下我们的app-component代码：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'For now, we will focus on the template. Remove the `encapsulation` and `styles`
    properties from the component decorator to make it more clear and focused. While
    doing this, let''s add a type and a constructor to our class as well:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将专注于模板。从组件装饰器中删除`encapsulation`和`styles`属性，以使其更清晰和专注。在这样做的同时，让我们也给我们的类添加一个类型和一个构造函数：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This is a one-way binding from the data source (the component class in our case)
    to the view (the component template). Angular interpolates the `title` and outputs
    the result between the double curly brace.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这是从数据源（在我们的情况下是组件类）到视图（组件模板）的单向绑定。Angular插值`title`并在双大括号之间输出结果。
- en: 'The double curly braces can only interpolate strings. If we try to bind an
    object, it will not work. In the following example, instead of a `title`, I created
    an object which contains the `title` and inspects the result in the browser:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 双大括号只能插值字符串。如果我们尝试绑定一个对象，它将不起作用。在以下示例中，我创建了一个包含`title`的对象，并在浏览器中检查结果：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here is the output:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '![Data interpolation](../Images/image00107.jpeg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![数据插值](../Images/image00107.jpeg)'
- en: Note
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you can't see the result in the browser, make sure you run the `ng serve`
    command. If you are not sure how to do it, refer to [Chapter 2](part0020.xhtml#aid-J2B81
    "Chapter 2. Setting Up an Angular 2 Development Environment with angular-cli"),
    *Setting Up an Angular 2 Development Environment with angular-cli*.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在浏览器中看不到结果，请确保运行`ng serve`命令。如果您不确定如何操作，请参考[第2章](part0020.xhtml#aid-J2B81
    "第2章。使用angular-cli设置Angular 2开发环境")，*使用angular-cli设置Angular 2开发环境*。
- en: 'We can bind to object properties, just remember that everything will be interpolated
    as a string. The following example will render the `title` properly:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以绑定到对象属性，只需记住一切都将被插值为字符串。以下示例将正确呈现`title`：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'What we write between the curly braces is an angular expression. It means that
    angular evaluates the expression before it is converted into a string. In other
    words, we can put simple logic in our expressions and even bind to a method. Consider
    the following example:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在大括号之间写的是一个angular表达式。这意味着angular在将表达式转换为字符串之前对其进行评估。换句话说，我们可以在表达式中放入简单的逻辑，甚至绑定到一个方法。考虑以下示例：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Inside angular expressions we can''t use the `new` keyword and operators such
    as: `++`, `--`, and `+=`.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在angular表达式中，我们不能使用`new`关键字和运算符，如：`++`，`--`和`+=`。
- en: As a rule of thumb, expressions shouldn't be complex.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，表达式不应该太复杂。
- en: The context of the component template is the component instance. It means that
    you can't access global variables such as `window`, `document`, or `console.log`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 组件模板的上下文是组件实例。这意味着你不能访问全局变量，比如`window`，`document`或`console.log`。
- en: Core directives
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 核心指令
- en: 'If you are familiar with Angular 1.x, you already know what a directive is.
    If not, here is a quick definition: a directive is a custom attribute that adds
    functionality to an element. In Angular, a component is considered to be a special
    case of a directive which contains a template.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你熟悉Angular 1.x，你已经知道指令是什么。如果不熟悉，这里有一个简单的定义：指令是一个自定义属性，为元素添加功能。在Angular中，组件被认为是指令的一种特殊情况，其中包含一个模板。
- en: Angular 2 core includes several directives—NgClass, NgFor, NgIf, NgStyle, NgSwitch,
    NgSwitchWhen, and NgSwitchDefault.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Angular 2核心包括几个指令—NgClass、NgFor、NgIf、NgStyle、NgSwitch、NgSwitchWhen和NgSwitchDefault。
- en: If you are familiar with Angular 1, you already know what these directives can
    do, although the syntax and the underneath implementation have been changed.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你熟悉Angular 1，你已经知道这些指令能做什么，尽管语法和底层实现已经改变。
- en: Those directives aim to help us implement common templating tasks such as DOM
    manipulation.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这些指令旨在帮助我们实现常见的模板任务，比如DOM操作。
- en: 'To be able to use core directives in a component, we need to import the `BrowserModule`
    module into the module where the component fits. This was automatically done by
    angular-cli when generating the application within the `app.module.ts` file:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够在组件中使用核心指令，我们需要将`BrowserModule`模块导入到组件所在的模块中。这是在生成应用程序时由angular-cli自动完成的，在`app.module.ts`文件中：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Let's explore how to use them in our code.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探索如何在我们的代码中使用它们。
- en: NgIf
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NgIf
- en: Just like Angular 1, the NgIf directive will remove or recreate a portion of
    the DOM based on an expression that we passed. The expression should evaluate
    to `true` or `false`.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 就像Angular 1一样，NgIf指令会根据我们传递的表达式来删除或重新创建DOM的一部分。表达式应该评估为`true`或`false`。
- en: 'Here is how we use `ngIf`:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们如何使用`ngIf`：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Don't worry about the asterisk before the `ngIf` attribute, we will discuss
    it in a moment. We assign an expression called `showFullName`, which exists on
    the component class. So, on the component class, we declare a class member called
    `showFullName` of type Boolean and initialize it on the constructor to be `false`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 不要担心`ngIf`属性前的星号，我们将在一会儿讨论它。我们分配了一个名为`showFullName`的表达式，它存在于组件类中。因此，在组件类中，我们声明了一个名为`showFullName`的类型为布尔型的类成员，并在构造函数中将其初始化为`false`。
- en: As a result, the `<h3>` tag will not render to the DOM, and we won't see the
    full name.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`<h3>`标签不会渲染到DOM中，我们也看不到完整的名字。
- en: The asterisk – *
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 星号—*
- en: The asterisk (`*`) before the directive name is a syntactic sugar of Angular
    that hides the use of the `<template>` tag from us. This tag is being used in
    *structural directives*, which is a term that describes a directive that impacts
    the structure of the DOM.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 指令名称前的星号（`*`）是Angular的一种语法糖，它隐藏了我们对`<template>`标签的使用。这个标签被用在*结构指令*中，这是一个描述影响DOM结构的指令的术语。
- en: 'The preceding example can be written like this:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的例子可以这样写：
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: That's what Angular will do behind the scenes, but we don't need to worry when
    using the shorter version of the syntax.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是Angular在幕后所做的，但是在使用语法的较短版本时，我们不需要担心。
- en: NgClass
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NgClass
- en: 'The NgClass directive, just like in Angular 1, conditionally adds and removes
    CSS classes. We pass an expression that can be interpreted in three different
    ways:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: NgClass指令，就像在Angular 1中一样，有条件地添加和删除CSS类。我们传递一个可以以三种不同方式解释的表达式：
- en: A string that contains all the CSS classes that we want to add, delimited by
    space
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个包含我们想要添加的所有CSS类的字符串，以空格分隔
- en: An array of CSS classes to be added
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要添加的CSS类的数组
- en: An object that maps CSS classes to a Boolean value (`true` or `false`)
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将CSS类映射到布尔值（`true`或`false`）的对象
- en: 'Let''s demonstrate the various options to use `ngClass`, start with a string:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们演示使用`ngClass`的各种选项，从一个字符串开始：
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We apply the `ngClass` to the `<h2>` tag and pass a method that we implement
    on the component class. The `getClass()` method returns a string containing a
    string that includes the names of both of the CSS classes we want to append to
    the `<h2>` element. Don't worry about the square brackets that surround the `ngClass`
    directive. We will explain this syntax in a moment.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将`ngClass`应用到`<h2>`标签上，并传递一个我们在组件类中实现的方法。`getClass()`方法返回一个包含我们想要附加到`<h2>`元素的两个CSS类名的字符串。不要担心围绕`ngClass`指令的方括号。我们将在下一刻解释这个语法。
- en: 'We could implement that method in two other ways in order to achieve the same
    result:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以以另外两种方式实现该方法，以达到相同的结果：
- en: 'The first is by returning an array:'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一种方法是通过返回一个数组：
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Returning an object:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个对象：
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The second is by using square brackets `( [ ] )`
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二种方法是使用方括号`（[ ]）`
- en: Tip
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: In Angular 2, we can bind data directly to DOM or directive properties. The
    `ngClass` selector was defined as a property, so if we want to use it, we need
    to use the square brackets syntax. We will see more examples later in this chapter
    when we deal with data bindings.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在Angular 2中，我们可以直接将数据绑定到DOM或指令属性。`ngClass`选择器被定义为一个属性，所以如果我们想使用它，我们需要使用方括号语法。当我们处理数据绑定时，我们将在本章后面看到更多例子。
- en: NgStyle
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NgStyle
- en: 'The `ngStyle` directive will change the inline styles of the element based
    on an expression that evaluates an object. In the following example, we will use
    `ngStyle` to dynamically assign a font size to the title:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`ngStyle`指令将根据评估对象的表达式改变元素的内联样式。在下面的例子中，我们将使用`ngStyle`动态地为标题分配字体大小：'
- en: '[PRE11]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In this example, we created a class member that initializes a property named
    `titleSize` and then uses it to determine the font size style on the `<h1>` tag,
    with `ngStyle`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们创建了一个类成员，初始化了一个名为`titleSize`的属性，然后使用它来确定`<h1>`标签上的字体大小样式，使用`ngStyle`。
- en: NgSwitch
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NgSwitch
- en: 'The NgSwitch directive adds or removes DOM subtrees according to the value
    of the `switch` expression. To effectively use this directive, we used `ngSwitchCase`
    and `ngSwitchDefault` within the `ngSwitch` directive block:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: NgSwitch指令根据`switch`表达式的值添加或删除DOM子树。为了有效地使用这个指令，我们在`ngSwitch`指令块中使用了`ngSwitchCase`和`ngSwitchDefault`：
- en: '[PRE12]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: There are a few things to notice—the `ngSwitch` directive is not a structural
    directive, which means it does not use a `<template>` tag and also does not manipulate
    the DOM tree. This is done by the `ngSwitchCase` and the `ngSwitchDefault` directives.
    So, we use the square brackets when using the `ngSwitch` directive, and the asterisk
    for the rest.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 有几件事情需要注意——`ngSwitch`指令不是一个结构指令，这意味着它不使用`<template>`标签，也不操作DOM树。这是由`ngSwitchCase`和`ngSwitchDefault`指令完成的。因此，当使用`ngSwitch`指令时，我们使用方括号，其余的使用星号。
- en: NgFor
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NgFor
- en: 'The `ngFor` directive creates a new element (instantiates a new template),
    once per item from a collection that it repeats. If you are familiar with Angular
    1, the `ngFor` directive is similar to the `ng-repeat` directive in concept, but
    the underneath implementation and syntax is different:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`ngFor`指令为集合中的每个项目创建一个新元素（实例化一个新模板）。如果你熟悉Angular 1，`ngFor`指令在概念上类似于`ng-repeat`指令，但底层实现和语法是不同的：'
- en: 'In the following example, we are creating a list of colors by repeating each
    element in a string array:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的例子中，我们通过重复字符串数组中的每个元素来创建一个颜色列表：
- en: '[PRE13]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Property bindings
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 属性绑定
- en: 'With Angular 2, we can easily bind to each DOM property. For example, let''s
    bind a value to the `disabled` property of a button and initialize it to be `true`:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Angular 2，我们可以轻松地绑定到每个DOM属性。例如，让我们将一个值绑定到按钮的`disabled`属性，并将其初始化为`true`：
- en: '[PRE14]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This is true to any property. Let''s see another example, this time with an
    input element:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这对任何属性都是适用的。让我们看另一个例子，这次是使用输入元素：
- en: '[PRE15]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Event bindings
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件绑定
- en: 'Up until now, we learned about two kinds of data binding: interpolation (using
    the curly braces) and properties binding. Both of them are considered to be one-way
    data binding from the data source to the view. In real life, our component should
    be able to respond to user events. Luckily, in Angular 2, this is simple as property
    binding.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们学习了两种数据绑定：插值（使用花括号）和属性绑定。它们都被认为是从数据源到视图的单向数据绑定。在现实生活中，我们的组件应该能够响应用户事件。幸运的是，在Angular
    2中，这就像属性绑定一样简单。
- en: 'We can respond to any native DOM event by surrounding it with parentheses and
    assign it to a method on the component class. Let''s see how we can respond to
    the click event on our button. We need to wrap the click event of the button in
    parentheses, and assign a method that will be invoked in return:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过用括号括起来并将其分配给组件类上的方法来响应任何原生DOM事件。让我们看看如何响应按钮上的点击事件。我们需要用括号括起按钮的点击事件，并分配一个将被调用的方法：
- en: '[PRE16]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Let''s use data binding techniques to create a simple toggle component:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用数据绑定技术创建一个简单的切换组件：
- en: '[PRE17]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Two-way bindings
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 双向绑定
- en: We learned how to use one way data bindings using properties and events. Angular
    introduces a third option to use with input controls. This directive is called
    `ngModel`. The syntax can be a little strange, because this directive combines
    property and event bindings together.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学会了如何使用属性和事件进行单向数据绑定。Angular引入了第三个选项来与输入控件一起使用。这个指令叫做`ngModel`。语法可能有点奇怪，因为这个指令将属性和事件绑定在一起。
- en: 'With `ngModel`, we can easily achieve two-way data binding easily. In the following
    example, we will bind username and password inputs to a user object:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`ngModel`，我们可以轻松实现双向数据绑定。在下面的例子中，我们将用户名和密码输入绑定到一个用户对象：
- en: '[PRE18]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Summary
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Throughout this chapter, we transform our static component to a dynamic component
    using core directives and data binding.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们通过核心指令和数据绑定将我们的静态组件转换为动态组件。
- en: Angular 2 keeps the data binding easy, much like Angular 1\. The ability to
    bind data to native DOM properties and events directly is a powerful feature.
    The core directives of Angular 2 includes only a few directives that give us some
    extra functionality that otherwise is hard to achieve.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Angular 2保持了数据绑定的简单性，就像Angular 1一样。直接将数据绑定到原生DOM属性和事件是一个强大的功能。Angular 2的核心指令只包括一些指令，为我们提供了一些额外的功能，否则很难实现。
