["```js\nconst MyComponent = (props) => {\n  return (\n    <div>\n      <h1>{props.title}</h1>\n      <p>{props.description}</p>\n    </div>\n  );\n}; \n```", "```js\nconst MyComponent = ({ title, description }) => {\n  return (\n    <div>\n      <h1>{title}</h1>\n      <p>{description}</p>\n    </div>\n  );\n}; \n```", "```js\nconst MyButton = ({ disabled, text }) => {\n  return <button disabled={disabled}>{text}</button>;\n}; \n```", "```js\nconst MyList = ({ items }) => (\n  <ul>\n    {items.map((i) => (\n      <li key={i}>{i}</li>\n    ))}\n  </ul>\n); \n```", "```js\nimport * as ReactDOM from \"react-dom\";\nimport MyButton from \"./MyButton\";\nimport MyList from \"./MyList\";\nimport MyComponent from \"./MyComponent\";\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nconst appState = {\n  text: \"My Button\",\n  disabled: true,\n  items: [\"First\", \"Second\", \"Third\"],\n};\nfunction render(props) {\n  root.render(\n    <main>\n      <MyComponent\n        title=\"Welcome to My App\"\n        description=\"This is a sample component.\"\n      />\n      <MyButton text={props.text} disabled={props.disabled} />\n      <MyButton text=\"Another Button\" disabled />\n      <MyList items={props.items} />\n    </main>\n  );\n}\nrender(appState);\nsetTimeout(() => {\n  appState.disabled = false;\n  appState.items.push(\"Fourth\");\n  render(appState);\n}, 1000); \n```", "```js\n<MyButton text=\"Another Button\" disabled /> \n```", "```js\nconst MyButton = ({ disabled, text }) => (\n  <button disabled={disabled}>{text}</button>\n);\nMyButton.defaultProps = {\n  disabled: false,\n  text: \"My Button\",\n}; \n```", "```js\nconst MyButton = ({ disabled = false, text = \"My Button\" }) => (\n  <button disabled={disabled}>{text}</button>\n); \n```", "```js\nexport default function App() {\n  const [name] = React.useState(\"Mike\");\n  const [age] = React.useState(32);\n  return (\n    <>\n      <p>My name is {name}</p>\n      <p>My age is {age}</p>\n    </>\n  );\n} \n```", "```js\nfunction App() {\n  const [name, setName] = React.useState(\"Mike\");\n  const [age, setAge] = React.useState(32);\n  return (\n    <>\n      <section>\n        <input value={name} onChange={(e) => setName(e.target.value)} />\n        <p>My name is {name}</p>\n      </section>\n      <section>\n        <input\n          type=\"number\"\n          value={age}\n          onChange={(e) => setAge(e.target.value)}\n        />\n        <p>My age is {age}</p>\n      </section>\n    </>\n  );\n} \n```", "```js\nconst [name, setName] = React.useState(\"Mike\");\nconst [age, setAge] = React.useState(32); \n```", "```js\n<section>\n  <input value={name} onChange={(e) => setName(e.target.value)} />\n  <p>My name is {name}</p>\n</section> \n```", "```js\n<section>\n  <input\n    type=\"number\"\n    value={age}\n    onChange={(e) => setAge(e.target.value)}\n  />\n  <p>My age is {age}</p>\n</section> \n```", "```js\nfunction App() {\n  const [id, setId] = React.useState(\"loading...\");\n  const [name, setName] = React.useState(\"loading...\");\n  const fetchUser = React.useCallback(() => {\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        resolve({ id: 1, name: \"Mike\" });\n      }, 1000);\n    });\n  }, []);\n  React.useEffect(() => {\n    fetchUser().then((user) => {\n      setId(user.id);\n      setName(user.name);\n    });\n  });\n  return (\n    <>\n      <p>ID: {id}</p>\n      <p>Name: {name}</p>\n    </>\n  );\n} \n```", "```js\nconst fetchUser = React.useCallback(() => {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve({ id: 1, name: \"Mike\" });\n    }, 1000);\n  });\n}, []); \n```", "```js\nconst [id, setId] = React.useState(\"loading...\");\nconst [name, setName] = React.useState(\"loading...\");\nReact.useEffect(() => {\n  fetchUser().then((user) => {\n    setId(user.id);\n    setName(user.name);\n  });\n}); \n```", "```js\nimport * as React from \"react\";\nfunction Timer() {\n  const [timer, setTimer] = React.useState(100);\n  React.useEffect(() => {\n    const interval = setInterval(() => {\n      setTimer((prevTimer) => (prevTimer === 0 ? 0 : prevTimer - 1));\n    }, 1000);\n    return () => {\n      clearInterval(interval);\n    };\n  }, []);\n  return <p>Timer: {timer}</p>;\n}\nexport default Timer; \n```", "```js\nReact.useEffect(() => {\n  const interval = setInterval(() => {\n    setTimer((prevTimer) => (prevTimer === 0 ? 0 : prevTimer - 1));\n  }, 1000);\n  return () => {\n    clearInterval(interval);\n  };\n}, []); \n```", "```js\nconst ShowHideTimer = ({ show }) => (show ? <Timer /> : null);\nfunction App() {\n  const [show, setShow] = React.useState(false);\n  return (\n    <>\n      <button onClick={() => setShow(!show)}>\n        {show ? \"Hide Timer\" : \"Show Timer\"}\n      </button>\n      <ShowHideTimer show={show} />\n    </>\n  );\n} \n```", "```js\nconst [resolved, setResolved] = useState(false);\nuseEffect(() => {\n  // ...the effect code...\n  return () => {\n    // ...the cleanup code\n  };\n}, [resolved]); \n```", "```js\nReact.useEffect(() => {\n  fetchUser().then((user) => {\n    setId(user.id);\n    setName(user.name);\n  });\n}, []); \n```", "```js\nimport { createContext } from 'react';\nconst MyContext = createContext(); \n```", "```js\n<MyContext.Provider value={/* shared data */}>\n  {/* Child components */}\n</MyContext.Provider> \n```", "```js\nimport React, { useContext } from 'react';\nconst MyComponent = () => {\n  const value = useContext(MyContext);\n  // Render using the shared data\n}; \n```", "```js\nimport { useMemo } from 'react';\nconst Component = () => {\n  const expensiveResult = useMemo(() => {\n    // Expensive computation\n    return computeExpensiveValue(dependency);\n  }, [dependency]);\n  return <div>{expensiveResult}</div>;\n}; \n```", "```js\nconst MyComponent = () => {\n  return <MyButton onClick={() => console.log(\"click\")} />;\n}; \n```", "```js\nconst MyComponent = () => {\n  const clickHandler = React.useCallback(() => {\n    console.log(\"click\");\n  }, []);\n  return <MyButton onClick={clickHandler} />;\n}; \n```", "```js\nconst Component = () => {\n  const inputRef = useRef();\n  const handleButtonClick = () => {\n    inputRef.current.focus();\n  };\n  return (\n    <div>\n      <input type=\"text\" ref={inputRef} />\n      <button onClick={handleButtonClick}>Focus Input</button>\n    </div>\n  );\n}; \n```"]