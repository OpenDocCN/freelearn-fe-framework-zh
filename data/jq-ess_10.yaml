- en: Chapter 10. Benefiting from the Work of Others with Plugins
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第十章。利用插件充分利用他人的工作
- en: In the previous chapter, we learned how to time our code and then about things
    we can do to improve the performance of our jQuery code. With that out of the
    way, let's turn our attention in the tenth and final chapter about jQuery plugins.
    Plugins hold true to the jQuery motto of write less, do more. They enable you
    to take advantage of the work of others and easily plug their work into your app.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了如何计时我们的代码，然后了解了如何改进我们的 jQuery 代码的性能。完成这些后，让我们把注意力转向第十章，关于 jQuery
    插件的第十章。插件坚持 jQuery 的口号“写得更少，做得更多”。它们使您能够利用他人的工作，并轻松地将他们的工作插入到您的应用程序中。
- en: 'In this chapter, we will learn about jQuery plugins. In the core of jQuery
    is its prototype object. A plugin is an object that extends the jQuery prototype
    object enabling new features in all jQuery objects. jQuery has an officially supported
    set of UI plugins called jQuery UI. There are thousands of free plugins available
    but finding the good ones requires patience and caution. Here are the things we
    will cover in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习关于 jQuery 插件的知识。jQuery 的核心是其原型对象。插件是一个扩展了 jQuery 原型对象的对象，使得所有 jQuery
    对象都能够获得新的功能。jQuery 有一个官方支持的一组 UI 插件，称为 jQuery UI。有数千个免费插件可用，但要找到好的插件需要耐心和谨慎。在本章中，我们将涵盖以下内容：
- en: Finding and installing plugins
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找和安装插件
- en: jQuery UI
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: jQuery UI
- en: Writing your own plugins
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写您自己的插件
- en: Plugin best practices
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插件最佳实践
- en: Finding plugins
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查找插件
- en: If you click on the **Plugins** menu on any of jQuery's websites, you will be
    taken to the jQuery Plugin Register. Although the site does have a lot of plugins,
    they are old and haven't been updated in years. Not to worry, the folks at the
    jQuery Foundation decided that given their limited resources there was no point
    in packaging plugins themselves. The Internet already has a few popular package
    managers; two of the more popular ones are npm and Bower. The jQuery team recommends
    that plugin publishers switch to using npm.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在 jQuery 的任何网站上点击**插件**菜单，你将被带到 jQuery 插件注册页面。虽然该网站确实有很多插件，但它们都很老旧，多年未更新。不用担心，jQuery
    Foundation 的人们决定鉴于他们有限的资源，没有必要自己打包插件。互联网已经有几个流行的包管理器；其中两个比较流行的是 npm 和 Bower。jQuery
    团队建议插件发布者切换到使用 npm。
- en: The Node Package Manager, or npm, was originally just for providing packages
    for the Node.js web framework. But their ease of use and native cross-platform
    ability has led to npm's adoption as a package manager for all manner of applications.
    Many command-line tools, mobile frameworks, and other utility applications are
    implemented as npm modules. It is no wonder that the jQuery team made it the package
    manager of choice for jQuery plugins as well.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Node Package Manager，或者 npm，最初只是为 Node.js web 框架提供包。但它们易于使用和原生跨平台的能力使得 npm 被广泛应用为各种应用程序的包管理器。许多命令行工具、移动框架和其他实用程序应用程序都以
    npm 模块的形式实现。难怪 jQuery 团队将其作为 jQuery 插件的首选包管理器。
- en: Finding jQuery plugins on npm is easy. Simply go to the website at [https://www.npmjs.com/](https://www.npmjs.com/).
    In the search box, enter `jquery-plugin`. At the time of writing, there were more
    than 1,200 jQuery plugins available. Finding plugins is easy; it is harder to
    decide which of the many plugins to use.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 查找 jQuery 插件在 npm 上很容易。只需转到[https://www.npmjs.com/](https://www.npmjs.com/)网站。在搜索框中，输入`jquery-plugin`。在撰写本文时，已有超过
    1200 个 jQuery 插件可用。找到插件很容易；难的是决定使用哪个插件。
- en: Imagine that you are looking for a tooltip plugin. Ignore, for this example,
    that there is a plugin in the jQuery UI library. The first thing you would do
    is enter `jquery-plugin tooltip`" in the npm search bar. What kinds of questions
    should you ask yourself before deciding to use a plugin in your code? The first
    might be is the project actively maintained? Others would include does it have
    passing unit tests? Is the source code clean and well written? Does it have dependencies
    on other plugins? Is there clear documentation with sample code? What kind of
    licensing does it use? Does it have any open issues? If the source code is on
    GitHub, does it have any stars?
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下你正在寻找一个工具提示插件。忽略，以本例为例，jQuery UI 库中是否有插件。你首先要做的事情是在 npm 搜索栏中输入`jquery-plugin
    tooltip`。在决定在你的代码中使用插件之前，你应该问自己哪些问题？首先可能是项目是否正在积极维护？其他问题可能包括它是否具有通过的单元测试？源代码是否干净且写得好？它是否依赖于其他插件？是否有清晰的带有示例代码的文档？它使用何种许可证？是否有任何未解决的问题？如果源代码在
    GitHub 上，是否有任何星标？
- en: Only after you have done your due diligence and are satisfied that it is a quality
    plugin should you use it in your code. The barrier for adding a plugin to npm
    is pretty low, so there are a lot of bad plugins. Some were built poorly, some
    are old and haven't been maintained, and there may even be some malicious ones
    out there.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 只有在你做了尽职调查并确信这是一个高质量的插件后，才应该在你的代码中使用它。向 npm 添加插件的门槛非常低，所以有很多糟糕的插件。有些构建得很差，有些是老旧的且未被维护，甚至可能有一些恶意的。
- en: Tip
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: npm manages packages, not plugins. jQuery plugins are a special kind of npm
    package. Throughout this chapter, I will use the word plugin but I will actually
    be referring to an npm package containing a jQuery plugin.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: npm 管理的是包，而不是插件。jQuery 插件是一种特殊类型的 npm 包。在本章中，我将使用“插件”这个词，但实际上指的是一个包含 jQuery
    插件的 npm 包。
- en: Installing plugins
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装插件
- en: 'You have found a plugin or two that you like, so now what? Installing a plugin
    via npm is also easy but first you need to make sure that you have a `package.json`
    file located in the root of your application. This is a JSON file that is required
    by npm. If you don''t have a `package.json` file, npm will not install your plugin.
    The following is an example of a rather minimalistic `package.json` file:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经找到了一个或两个喜欢的插件，那么接下来呢？通过 npm 安装插件也很容易，但首先你需要确保你的应用程序根目录下有一个 `package.json`
    文件。这是 npm 要求的一个 JSON 文件。如果没有 `package.json` 文件，npm 将不会安装你的插件。以下是一个相当简约的 `package.json`
    文件的示例：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Please note that it is a JSON file and not a JavaScript object. The first field
    is the name of the application. Name is a required field; without it, npm will
    not install a package. If you are creating a plugin and plan to upload it to npm,
    the name must be unique.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意它是一个 JSON 文件，而不是 JavaScript 对象。第一个字段是应用程序的名称。名称是一个必需的字段；如果没有，npm 将不会安装包。如果你正在创建一个插件并计划将其上传到
    npm，那么名称必须是唯一的。
- en: The second field is the version number of the application. It is also required.
    The value placed here is very important when you are creating your own plugins.
    Whether or not to upgrade a plugin is based on the value of this field stored
    in npm when compared to the user's local copy.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个字段是应用程序的版本号。这也是必需的。在创建自己的插件时，放置在这里的值非常重要。是否升级插件是基于 npm 存储的此字段值与用户本地副本进行比较而确定的。
- en: 'The next three fields are not required but will cause warnings to be generated
    if they are missing when installing a plugin. The first is the description field,
    which is a short statement describing the app. Then there is the repository field.
    If there is a valid repository, it will contain a sub-object with two fields:
    type and URL. The type identifies the type of source control used, with values
    like `git` and `svn`. Finally, there is the license field, which is the type of
    software license the plugin is released under. Create a `package.json` file at
    the root of your application.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的三个字段不是必需的，但如果在安装插件时缺少它们，将会生成警告。第一个是描述字段，它是描述应用程序的简短语句。然后是存储库字段。如果存在有效的存储库，它将包含一个子对象，其中包含两个字段：类型和
    URL。类型标识使用的源控制类型，如 `git` 和 `svn`。最后，有许可证字段，它是插件发布的软件许可证类型。在你的应用程序根目录下创建一个 `package.json`
    文件。
- en: Before you can install an npm package, you will need to install Node.js. npm
    is included with Node.js, so head over to [https://nodejs.org/](https://nodejs.org/)
    and download and install the version for your system. Once you have installed
    Node, you will want to upgrade npm. I know that seems strange, but Node and npm
    are on different release cycles and the version of npm included with Node is usually
    out of date.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装 npm 包之前，你需要安装 Node.js。npm 已经包含在 Node.js 中，所以请前往 [https://nodejs.org/](https://nodejs.org/)
    下载并安装适合你系统的版本。安装完 Node 后，你会想要升级 npm。我知道这看起来很奇怪，但 Node 和 npm 是不同的发布周期，Node 自带的
    npm 版本通常已经过时了。
- en: 'To upgrade npm, enter:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要升级 npm，请输入：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'On Mac and Linux systems, you may need to use a `sudo` command. With npm installed
    and upgraded, you are finally ready to install a plugin. Enter the following at
    the terminal or command prompt:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Mac 和 Linux 系统上，你可能需要使用 `sudo` 命令。安装并升级完 npm 后，你终于准备好安装一个插件了。在终端或命令提示符下输入以下内容：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The example `package.json` file showed one more field: dependencies. It is
    a dictionary of key-value pairs. The key is the name of a package that your app
    is dependent upon and the value is normally its version number. This field is
    created for you automatically when you install packages with `--save` appended
    to the end of the command.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 示例`package.json`文件显示了另一个字段：dependencies。这是一个键值对的字典。键是您的应用程序依赖的软件包的名称，而值通常是它的版本号。在安装软件包时，如果在命令的末尾加上`--save`，此字段会自动生成。
- en: 'Care should be taken anytime you use the `sudo` command. It executes the command
    with root privileges. If the command being executed has malicious intents, it
    would be able to do almost anything it wanted. Instead of using the `sudo` command,
    you can set your account as the owner of the directory where npm installs packages:
    /user/local. Simply execute the following command once:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`sudo`命令时需要特别小心。它以root权限执行命令。如果要执行的命令有恶意意图，它可以做几乎任何事。您可以将自己的帐户设置为npm安装软件包的目录（/user/local）的所有者，而不使用`sudo`命令。只需执行以下命令：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This is the change owner (`chown`) command. It sets your account as the owner
    of the `/usr/local directory`. `–R` tells `chown` to recursively walk all of the
    subdirectories making your account their owner as well.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这是更改所有者（`chown`）命令。它会将您的帐户设置为`/usr/local目录`的所有者。`–R`告诉`chown`递归遍历所有子目录，使您的帐户也成为它们的所有者。
- en: Updating a plugin
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新插件
- en: Occasionally, a package that your application depends on will be improved. In
    order to upgrade all of your dependencies, you run the update command without
    specifying a package.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 偶尔，您的应用程序所依赖的软件包将得到改进。为了升级所有依赖项，您可以运行升级命令，而不指定软件包。
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This command will check every package in your `package.json` file and update
    all of the out of date packages. When it is finished, it will also update the
    `package.json` file with the new version numbers.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将检查`package.json`文件中的每个软件包，并更新所有过时的软件包。完成后，它还将使用新的版本号更新`package.json`文件。
- en: If you would prefer to be a bit more surgical in your use of the update command,
    you can supply the name of the package you would like to update.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望对使用更新命令更有针对性一些，可以提供要更新的软件包的名称。
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This command will update only the package specified in the command. If it updates
    the package, it will update its version number in the `package.json` file.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将仅更新命令中指定的软件包。如果更新了软件包，它将在`package.json`文件中更新其版本号。
- en: Uninstalling plugins
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 卸载插件
- en: If you ever need to delete a plugin, use the `uninstall` command. The `uninstall`
    command will delete a package by removing all of its files from `node_modules`
    and updating the `package.json` file. Think carefully before executing this command
    since it can't be undone. If you use the `–save` option, it will also update the
    `package.json` file.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要删除插件，可以使用`uninstall`命令。`uninstall`命令将通过从`node_modules`中删除所有相关文件并更新`package.json`文件来删除一个软件包。在执行此命令之前请三思，因为此操作不可逆转。如果使用`–save`选项，它还将更新`package.json`文件。
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Adding a plugin
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加插件
- en: 'Now that we know how to install, update, and remove npm packages, let''s add
    the popular `m-popup` plugin to our app. It is a plugin that creates lightweight
    and customizable modal popups. You can find it in npm at [https://www.npmjs.com/package/m-popup](https://www.npmjs.com/package/m-popup).
    This is the plugin''s main page, where you will find lots of information about
    the plugin. It usually contains the author''s name, the type of license, coding
    samples, and installation instructions. The installation instructions are usually
    in the upper right-hand corner. To install `m-popup`, enter the command:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道如何安装、更新和移除npm软件包了，让我们为我们的应用程序添加流行的`m-popup`插件。它是一个创建轻量级和可定制模态弹出窗口的插件。您可以在[npm](https://www.npmjs.com/package/m-popup)上找到它。这是插件的主页，您会在这里找到有关插件的大量信息。通常包含作者的姓名、许可证类型、编码示例和安装说明。安装说明通常在右上角。要安装`m-popup`，输入以下命令：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Remember to execute the command from the root directory of your app and please
    note there is no `–g` here. The `–g` option is only used when we are installing
    a package globally, but this is not the case here. When we install plugins locally,
    it is from the root directory of our application where the `package.json` file
    is located.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意从应用程序的根目录执行该命令，并请注意这里没有`–g`。`–g`选项仅在全局安装软件包时使用，但这里不适用。安装插件时，是从位于`package.json`文件的根目录进行操作的。
- en: During installation, npm creates a directory, `node_modules`, if it was not
    present already. Inside of it, another directory will be created, `m-popup`. The
    name of the directory is always the name of the package. This is part of the reason
    why npm packages must have unique names.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装期间，npm 会创建一个目录，`node_modules`，如果之前不存在的话。在其中，将创建另一个目录，`m-popup`。目录的名称始终是包的名称。这也是为什么
    npm 包必须具有唯一名称的部分原因。
- en: The contents of every package is different, so you might need to explore around
    a bit to find the files you need; generally they will be in a directory named
    `dist` or possibly one named `src`. We are looking for the files we need to add
    to our app for the plugin to work. The instructions on the package page will normally
    tell us the names of the files, but not the directory that they are in. In our
    case, we need two files, one CSS and the JS, and both are in the `dist` directory.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 每个包的内容都不同，因此您可能需要四处探索以找到您需要的文件；通常它们将位于名为 `dist` 或可能是名为 `src` 的目录中。我们正在寻找需要添加到我们的应用程序中的插件工作所需的文件。包页面上的说明通常会告诉我们文件的名称，但不会告诉我们它们所在的目录。在我们的情况下，我们需要两个文件，一个
    CSS 和一个 JS，它们都在 `dist` 目录中。
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This code links in m-popup's CSS file and its JavaScript file, then creates
    a CSS class, which sets the width and height for the popup modal. It would be
    better to move the CSS to its own file. Next, we add some HTML to the end of our
    markup just before the script tag.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码链接了 m-popup 的 CSS 文件和其 JavaScript 文件，然后创建了一个 CSS 类，该类设置了弹出模态框的宽度和高度。最好将 CSS
    移动到自己的文件中。接下来，我们在标记的末尾添加了一些 HTML，就在脚本标记之前。
- en: This is the HTML that defines the popup. The class, `mPopup`, also makes the
    markup initially hidden on the page. The plugin defines two sections, header and
    body, represented by the classes `popup-header` and `popup-body`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这是定义弹出窗口的 HTML。类 `mPopup` 还使标记在页面上最初处于隐藏状态。该插件定义了两个部分，标题和正文，分别由类 `popup-header`
    和 `popup-body` 表示。
- en: The code to activate the plugin is pretty simple.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 激活插件的代码非常简单。
- en: The code waits for the document ready event then calls the `init` method. In
    the `init` method, we get a reference to our popup and hook the click event of
    the button. When the button is clicked, we call the `mPopup` method with a string,
    `open`, which is the name of the `popup` method we are calling. To exit the modal,
    click the **close** button in the upper right-hand corner of the modal or anywhere
    on the grayed-out overlay.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 代码等待文档就绪事件，然后调用 `init` 方法。在 `init` 方法中，我们获取对我们的弹出窗口的引用，并钩住按钮的点击事件。当单击按钮时，我们使用字符串
    `open` 调用 `mPopup` 方法，这是我们调用的 `popup` 方法的名称。要退出模态框，请单击模态框右上角的 **close** 按钮或在灰色覆盖层的任何位置。
- en: There is plenty more that this plugin can do. To learn more about it, you should
    read the plugin's package page on npm. You may even want to study its source code.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 此插件还可以执行许多其他操作。要了解更多信息，请阅读 npm 上的插件包页面。您甚至可能想要研究其源代码。
- en: jQuery UI
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: jQuery UI
- en: The jQuery team manages a collection of UI widgets, interactions, effects, and
    themes called jQuery UI. This collection is a collection of plugins. The home
    page for the jQuery UI is [http://jqueryui.com/](http://jqueryui.com/). Let's
    take a quick look at what jQuery UI is and how to use it.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 团队管理着称为 jQuery UI 的一组 UI 小部件、交互、效果和主题。该集合是一组插件。jQuery UI 的主页是 [http://jqueryui.com/](http://jqueryui.com/)。让我们快速了解一下
    jQuery UI 是什么以及如何使用它。
- en: 'jQuery UI is made up of four main components: interactions, widgets, effects,
    and the core. Only the core is required, so the download system allows you pick
    just the components you want in your own customized version.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery UI 由四个主要组件组成：交互（interactions）、小部件（widgets）、效果（effects）和核心（core）。只有核心是必需的，因此下载系统允许您仅选择您想要的组件，以创建自定义版本。
- en: jQuery UI Interactions
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jQuery UI 交互
- en: 'Interactions are a way to make page elements come alive and able to move in
    new ways. For instance, you can make a div, which is draggable and droppable.
    Other interactions are: resizable, selectable, and sortable. Interactions may
    be used either individually or in combination and help you to make your site fluid
    and interactive. And like most of jQuery UI, interactions are easy to use. Let''s
    see how easy:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 交互是使页面元素活跃并能够以新方式移动的方法。例如，您可以使可拖放的 div。其他交互方式包括：可调整大小的、可选择的和可排序的。交互可以单独或组合使用，并帮助您使您的网站流动和交互式。与大多数
    jQuery UI 一样，交互很容易使用。让我们看看有多容易：
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Let's walk through this example and make sure we understand what it is doing.
    In order to use jQuery UI, we include its CSS and JavaScript files. Then we do
    an inline `<style>` to make our divs look like pink boxes.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过这个示例走一遍，并确保我们理解它在做什么。为了使用 jQuery UI，我们包含它的 CSS 和 JavaScript 文件。然后我们对 div
    进行内联 `<style>`，使其看起来像粉色框。
- en: In the body section, we lay out our page, creating four pink boxes inside of
    a container div. Although it is a container div, it will not contain the boxes
    after we drag them around. The boxes are only constrained by the browser window.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在 body 部分，我们布局我们的页面，在一个容器 div 内创建了四个粉色框。尽管它是一个容器 div，在我们拖动它们时，它不会包含这些框。这些框只受浏览器窗口的约束。
- en: In JavaScript, we wait for the document ready event; we call the `init()` method
    then call `draggable` on every div with a class of `box`. When rendered in a browser,
    this example allows you to move the numbered boxes anywhere you like so long as
    it is within the browser's window.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JavaScript 中，我们等待文档就绪事件；我们调用 `init()` 方法，然后对每个类为 `box` 的 div 调用 `draggable`。在浏览器中呈现时，此示例允许您将带编号的框移动到浏览器窗口内的任何位置。
- en: jQuery UI widgets
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jQuery UI 小部件
- en: 'Widgets are interactive and customizable UI elements. jQuery UI comes with
    12 widgets. Unlike HTML elements, all of jQuery UI''s widgets are themeable, meaning
    that they can be styled and colored to match your website''s design. In alphabetical
    order, they are: accordion, autocomplete, button, datepicker, dialog, menu, progressbar,
    selectmenu, slider, spinner, tabs, and tooltip.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 小部件是交互式和可自定义的 UI 元素。jQuery UI 自带 12 个小部件。与 HTML 元素不同，jQuery UI 的所有小部件都可以进行主题化，这意味着它们可以被设计成与您网站的设计相匹配的样式和颜色。按字母顺序排列，它们是：手风琴、自动完成、按钮、日期选择器、对话框、菜单、进度条、选择菜单、滑块、微调器、标签页和工具提示。
- en: One of the nice things about jQuery UI widgets is that, unlike HTML elements,
    they are customizable and themeable. You can make all of the jQuery UI widgets
    match. One possible problem is that not every element has a jQuery UI equivalent.
    One noticeable omission is the input element. But luckily, it isn't difficult
    to take care of this omission yourself.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery UI 小部件的一个好处是，与 HTML 元素不同，它们是可自定义和主题化的。你可以让所有 jQuery UI 小部件匹配。一个可能的问题是，并不是每个元素都有一个
    jQuery UI 的等效物。一个明显的缺失是输入元素。但幸运的是，解决这个遗漏并不困难。
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The preceding code creates three elements. Two jQuery UI elements: the select
    and the button. And it creates an input element. There is no jQuery UI input widget,
    but that isn''t a problem for us. We use the button''s creation method on the
    input. This mostly works except there are a few unpleasant side effects. A button''s
    label is centered, so this makes our input centered as well. Also, a button uses
    a pointer cursor style, but an input normally has a text caret cursor. We fix
    these and a couple of other small issues with a class, "styled-text". In the end,
    we have three styled inputs that all match the theme of our site.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码创建了三个元素。两个 jQuery UI 元素：select 和 button。还创建了一个输入元素。虽然没有 jQuery UI 输入小部件，但这对我们来说不是问题。我们在输入上使用按钮的创建方法。这基本上有效，但有一些不愉快的副作用。按钮的标签居中，所以这也使我们的输入居中。此外，按钮使用指针光标样式，但输入通常具有文本插入符光标。我们用一个类
    "styled-text" 修复这些以及其他几个小问题。最后，我们有三个样式化的输入框，全部与我们网站的主题相匹配。
- en: The jQuery UI widget factory
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jQuery UI 小部件工厂
- en: In the next section, we will write our own jQuery plugin using only jQuery and
    JavaScript, but before we do that let's take a look at another way to write a
    plugin, using the jQuery UI widget factory. Widgets, unlike regular jQuery plugins,
    have a standard structure enforced on them. This is good because it makes them
    easier to write, but on the downside it also means that in order to use them,
    the user must have both jQuery and the jQuery UI core, instead of just having
    jQuery.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将只使用 jQuery 和 JavaScript 编写自己的 jQuery 插件，但在我们这样做之前，让我们看一看另一种编写插件的方法，使用
    jQuery UI 小部件工厂。小部件，与常规的 jQuery 插件不同，对它们强制执行标准结构。这是好的，因为它使它们更容易编写，但缺点是为了使用它们，用户必须同时拥有
    jQuery 和 jQuery UI 核心，而不只是拥有 jQuery。
- en: 'You create widgets by passing them to the widget factory. Widgets are JavaScript
    objects. They must have a property named `_create`, which must be a function.
    This will be the function that is called to instantiate the widget. The `create`
    function is passed a `this` object that has two properties on it: `this.element`
    is a jQuery object pointing to current element. It is also passed `this.options`,
    an object holding all of the current option values. In order to make this clearer,
    let''s look at some code:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 您通过将它们传递给小部件工厂来创建小部件。小部件是JavaScript对象。它们必须有一个名为`_create`的属性，该属性必须是一个函数。这将是用于实例化小部件的函数。`create`函数被传递一个`this`对象，该对象有两个属性：`this.element`是指向当前元素的jQuery对象。它还传递了`this.options`，这是一个保存当前所有选项值的对象。为了让这更清晰些，让我们看一些代码：
- en: '[PRE11]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The program kicks off by waiting for the document ready event. Once it is received,
    it calls its `init` method. We create the widget by calling `$.widget()`, which
    is the widget factory. Inside the object, we must define a `_create()` method.
    The `create` method is called with the this context holding two values: element
    and options. Element is a jQuery object pointing to the current element. It is
    important to note that this is always a single element. Even if the original selector
    referenced multiple elements, the widget factory passes them to us one by one.
    Options contain your widget''s default values, if you created it and the user
    didn''t override them.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 程序通过等待文档准备就绪事件来启动。一旦接收到该事件，它就会调用其`init`方法。我们通过调用`$.widget()`来创建小部件，这是小部件工厂。在对象内部，我们必须定义一个`_create()`方法。`create`方法使用`this`上下文持有两个值：元素和选项。元素是指向当前元素的jQuery对象。重要的是要注意，这始终是单个元素。即使原始选择器引用了多个元素，小部件工厂也会一次将它们传递给我们。选项包含您小部件的默认值，如果您创建了它并且用户没有覆盖它们。
- en: 'A widget may define other methods. Private methods must start with an underscore.
    Private methods are not visible from outside of the widget. Attempting to call
    one will generate an error. Any method lacking an underscore as the first character
    is public. Public methods are invoked in a rather unusual way. The name of the
    method is passed in a string to the widget function, like the following:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 小部件可能定义其他方法。私有方法必须以下划线开头。私有方法在小部件外部不可见。尝试调用私有方法将生成错误。任何方法如果没有下划线作为第一个字符，则为公共方法。公共方法以一种相当不寻常的方式被调用。方法名称以字符串形式传递给小部件函数，如下所示：
- en: '[PRE12]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The widget in the example is a bit on the whimsical side. It replaces the text
    in an element with the phrase `yada yada`. It only does so if the element doesn't
    have any children and has a text function. The user can replace `yada yada` with
    a more personal message. The widget also has a public method name, `len`, which
    will return the length of message rendered.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 示例中的小部件有点儿异想天开。它用短语`yada yada`替换元素中的文本。只有在元素没有任何子元素并且具有文本函数的情况下才会如此操作。用户可以用更个性化的信息替换`yada
    yada`。该小部件还具有一个名为`len`的公共方法，该方法将返回渲染消息的长度。
- en: The widget factory is probably the easiest way to get started writing plugins.
    Having a more rigid structure makes it more Plug and Play than regular plugins,
    which we will look at next.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 小部件工厂可能是编写插件的最简单方法。具有更严格结构的工厂比常规插件更易于安装和使用，我们将在下面看到。
- en: Writing your own plugin
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写自己的插件
- en: If you want to write a plugin that you can share with the whole world, your
    best bet is to create a regular jQuery plugin. It is only a bit more difficult
    than a jQuery UI widget, but it doesn't require jQuery UI, can easily be uploaded
    to npm, and shared with the world. So let's turn our `yada yada` widget into a
    plugin.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想编写一个可以与全世界共享的插件，您最好创建一个常规的jQuery插件。它比jQuery UI小部件稍微复杂一些，但不需要jQuery UI，可以轻松上传到npm，并与世界共享。所以让我们将我们的`yada
    yada`小部件变成一个插件。
- en: Prep work
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Before we can really get going, we need to have a few tools sitting in the
    wings; the first of these is Node.js. If you didn''t install it earlier, you should
    do so now and while you are at it, be sure to update npm. Once you have done that,
    you will need to log in. First, see if npm shows you as logged in:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们真正开始之前，我们需要一些工具等待；其中之一是Node.js。如果之前没有安装它，现在应该这样做，同时要确保更新npm。安装完成后，您需要登录。首先，查看npm是否显示您已登录：
- en: '[PRE13]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'If npm displays your username, you are OK. If not, you will need to add yourself:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果npm显示您的用户名，则说明没问题。如果没有，则需要添加自己：
- en: '[PRE14]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: You will be prompted for a username, password, and e-mail address. The e-mail
    address will be public. Anyone browsing the npm website will be able to see it.
    You should only need to do this once. Your credentials will be stored in a hidden
    file for future reference. With our prep work out of the way, let's make our plugin
    then publish it.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 您将被要求输入用户名、密码和电子邮件地址。电子邮件地址将是公开的。浏览 npm 网站的任何人都将能够看到它。您应该只需要执行一次此操作。您的凭据将存储在一个隐藏文件中以供将来参考。准备工作完成后，让我们制作我们的插件然后发布它。
- en: The plugin
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 插件
- en: The structure of a plugin is very different to that of a jQuery UI widget. First,
    let's see the code then we'll step through it so we can understand what it is
    doing.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 插件的结构与 jQuery UI 小部件的结构非常不同。首先，让我们看看代码，然后我们将逐步进行，以便我们可以理解它在做什么。
- en: '[PRE15]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Plugins generally begin with a semicolon. This is a safety precaution. If the
    plugin is used in a minified website and the file that precedes it forgets to
    add a terminating semicolon, the code in both files will get merged together in
    an unpredictable but bad way. Adding the semicolon fixes this issue if it exists,
    and does no harm if it doesn't.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 插件通常以分号开头。这是一种安全预防措施。如果插件用于被缩小的网站，并且在它之前的文件忘记添加终止分号，那么两个文件中的代码将以不可预测但不好的方式合并在一起。如果存在此问题，则添加分号会修复此问题，如果不存在则不会造成任何伤害。
- en: The entire plugin is wrapped in an IIFE (pronounced "iffy"), which stands for
    Immediately Invoked Function Expression. An IIFE allows us to protect our code
    from whatever environment it is invoke. Nothing outside of the IIFE can affect
    it except through a predetermined interface. The interface in this case is the
    single variable that we pass in, which is the jQuery variable. Please note that
    we spell it out and don't just assume it is assigned to the dollar sign; it might
    not be. By passing it in, we can assign it to the dollar sign for our plugin.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 整个插件都包装在 IIFE（即立即调用的函数表达式）中。IIFE 允许我们保护我们的代码免受调用的任何环境的影响。除了通过预定义的接口之外，IIFE 外部的任何东西都不能影响它。在这种情况下，接口是我们传递的单个变量，即
    jQuery 变量。请注意，我们将其拼写出来，而不仅仅是假设它被分配给美元符号；它可能不是。通过传递它，我们可以将其分配给美元符号，用于我们的插件。
- en: We only use the jQuery variable once, to create our plugin. Traditionally, plugins
    only assign one function to the jQuery prototype. Nothing stops you from doing
    so, but it is considered bad.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只使用一次 jQuery 变量来创建我们的插件。传统上，插件只将一个函数分配给 jQuery 原型。虽然没有什么能阻止你这样做，但这被认为是不好的。
- en: Inside of the actual code of the plugin, we handle our options first. In the
    jQuery UI widget, the framework does the grunt work of merging user options into
    your options. In a plugin, we have to take care of that ourselves. Luckily, we
    can make jQuery do the heavy lifting by using the `$.extend()` method. Here, we
    create our default values then merge the values from the user on top of them.
    The order of the parameters is very important; items are copies right to left.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 插件的实际代码内部，我们首先处理选项。在 jQuery UI 小部件中，框架会做将用户选项合并到您的选项中的繁重工作。在插件中，我们必须自己处理。幸运的是，我们可以通过使用`$.extend()`方法让
    jQuery 来处理繁重的工作。在这里，我们创建我们的默认值，然后将用户的值与它们合并。参数的顺序非常重要；项目从右向左复制。
- en: 'Next, we set up to return the `this` object. If we don''t return `this`, the
    user won''t be able to chain our plugin. The widget factory sent us one element
    at a time to operate on. Unfortunately, we aren''t so lucky with a plugin: we
    have to iterate on our own. Again, we let jQuery do the grunt work. We use the
    `$.each()` method. This method sends us one element at a time. The elements are
    actual DOM elements so we convert them into jQuery objects since the code was
    written initially for them. Most of the rest of the code is pretty much the same
    as it was in the widget.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们设置返回`this`对象。如果我们不返回`this`，用户将无法链式使用我们的插件。小部件工厂每次向我们发送一个元素进行操作。不幸的是，对于插件，我们没有这么幸运：我们必须自己迭代。同样，我们让
    jQuery 来处理繁重的工作。我们使用`$.each()`方法。此方法每次向我们发送一个元素。这些元素是实际的 DOM 元素，因此我们将它们转换为 jQuery
    对象，因为代码最初是为它们编写的。剩下的大部分代码基本上与小部件中的代码相同。
- en: 'The `package.json` file is mandatory, as we''ve mentioned before. The name
    and version number fields are required, but you should feel out as many fields
    as you can. It will help your users to decide if this is the right plugin for
    them. Here is our `package.json` file:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，`package.json`文件是必需的。名称和版本号字段是必需的，但您应尽可能填写更多字段。这将帮助用户决定这是否是适合他们的正确插件。这是我们的`package.json`文件：
- en: '[PRE16]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Besides the required fields we include `description`, `repository`, `license`,
    `author`, `main` so the user will know what the `main` file is, and `keywords`
    so we can be found by people looking for jQuery plugins.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 除了我们包含的必需字段，我们还包括`description`、`repository`、`license`、`author`、`main`，这样用户就可以知道`main`文件是什么，以及`keywords`，这样我们可以被寻找到想要找jQuery插件的人。
- en: 'Now that we have both the code and the `package.json` files, let''s publish
    our work to npm. Keep in mind if you decide to publish this code, I''ve already
    claimed the name `yada-yada`, so you can''t use it. You have to come up with a
    unique name of your own. Navigate to the directory holding your plugin and `package.json`
    files. In order to publish, simply type:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们既有代码又有`package.json`文件，让我们将工作发布到npm。请记住，如果你决定发布此代码，我已经声明了`yada-yada`这个名字，所以你不能使用它。你必须想出一个独特的名字。进入包含你的插件和`package.json`文件的目录。为了发布，只需输入：
- en: '[PRE17]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: If you've done everything right, after a few minutes npm will display your plugin's
    name and version number and that's it. Then go to [https://www.npmjs.com/](https://www.npmjs.com/),
    enter your plugin's name into the search box, and it should show up in the results
    list.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你做得一切正确，在几分钟后npm会显示你插件的名称和版本号，就这样。然后转到[https://www.npmjs.com/](https://www.npmjs.com/)，在搜索框中输入你的插件名称，它应该出现在结果列表中。
- en: Best practices
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 最佳实践
- en: If everything goes well, your plugin may be used by lots of people all over
    the world, so it is really important that it is well written. Here are a few tips
    to help make your plugin all it can be.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，你的插件可能会被世界各地的很多人使用，所以重要的是它是精心编写的。以下是一些提示，可以帮助你的插件发挥全部潜力。
- en: Preserve chaining
  id: totrans-99
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 保留链接
- en: Chaining is one of jQuery's best features. It allows developers to do everything
    they want to a set of elements in one neat package. Every jQuery developer uses
    it, so if you break the chain, they won't like your plugin.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 链接是jQuery最好的特性之一。它允许开发人员以一个整洁的包进行一切操作。每个jQuery开发者都在使用它，所以如果你破坏了链接，他们就不会喜欢你的插件。
- en: Use an IIFE
  id: totrans-101
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用一个IIFE
- en: It is impossible for you to know what kind of environment your plugin will be
    used in. Wrapping the code in an IIFE may seem unnecessary but it helps to keep
    your code from affecting others' code and vice versa.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 你不可能知道你的插件将在什么样的环境中使用。将代码包裹在IIFE中可能看起来是不必要的，但它有助于保持你的代码不影响其他代码，反之亦然。
- en: Add only one function to jQuery
  id: totrans-103
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 在jQuery中只添加一个函数
- en: Your plugin may be the greatest thing since the Swiss Army knife, but you should
    still only use one function. Even though our little example plugin doesn't need
    additional functions, you should only use one. If you need more, do what other
    plugins and pass in the name of the function as a string and call a handler inside
    the plugin.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 你的插件可能是自瑞士军刀以来最了不起的东西，但你还是只能使用一个函数。即使我们的小示例插件不需要额外的函数，你也只能使用一个函数。如果你需要更多的函数，就像其他插件一样，传入函数的名称作为字符串，并在插件内调用处理程序。
- en: Let the user theme it
  id: totrans-105
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 让用户主题化
- en: jQuery is all about customization; your plugin should be too. The example plugin
    allows the user to change the message via options. This concept could be extended
    to include styles and classes. Your plugin may be incredibly useful, but if it
    doesn't match the rest of the user's site, they won't use it.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery非常注重自定义；你的插件也应该是。这个示例插件允许用户通过选项更改消息。这个概念可以扩展到包括样式和类。你的插件可能非常有用，但如果它与用户站点的其余部分不匹配，他们就不会使用它。
- en: Test, test, test
  id: totrans-107
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 测试，测试，测试
- en: Before you send it out into the wild, make sure your plugin is up to the task.
    Test on every browser you can find, think about services like `BrowserStack`,
    and don't forget to ask your friends and colleagues to check it out too.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在将其发布到外部之前，确保你的插件能够胜任任务。在你能找到的每个浏览器上测试，考虑像`BrowserStack`这样的服务，不要忘记请朋友和同事们来试试。
- en: Document it
  id: totrans-109
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 记录它
- en: No developer will use your plugin if they don't understand it. You should document
    it as much as possible. Publish the code somewhere public like GitHub. Add to
    your `package.json` file in order to make your npm page as full as possible. Be
    sure to include example code with as many examples as possible of using the code.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如果开发者无法理解你的插件，他们就不会使用它。你应该尽可能详细地记录它。将代码发布到GitHub之类的公共位置。在你的`package.json`文件中添加内容，以使你的npm页面尽可能完整。一定要包含尽可能多的使用代码示例。
- en: Minify it
  id: totrans-111
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 最小化它
- en: Be like jQuery. It provides both a minified and un-minified version. Developers
    like to examine what's in the un-minified version and use the minified one.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 要像jQuery一样。它提供了压缩和未压缩两个版本。开发者喜欢检查未压缩版本中的内容，并使用压缩版本。
- en: Summary
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Plugins are one of the most popular jQuery features. In this chapter, we learned
    about the switch from plugins being kept at the jQuery Plugin Repository to the
    new way of storing them in npm. Then we learned how to install, update, and remove
    plugins from our application and even what the purpose of the `--save` option.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 插件是最受欢迎的 jQuery 功能之一。在本章中，我们了解了插件从 jQuery 插件存储库切换到新的 npm 存储方式的过程。然后我们学习了如何在我们的应用程序中安装、更新和移除插件，甚至了解了
    `--save` 选项的用途。
- en: From npm, we moved over to jQuery UI, the official support library of UI widgets.
    We learned how to use them and how to create a customize download of only the
    widgets we want.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 从 npm，我们转向了 jQuery UI，这是官方支持的UI小部件库。我们学习了如何使用这些小部件，并创建了一个自定义下载，只包含我们想要的小部件。
- en: The last topic we tackled was how to write our own plugin. We explained each
    of the steps necessary to create a plugin and explained why we should let jQuery
    do most of the heavy lifting. We ended by showing how to upload our plugin to
    npm so that others can benefit from our work.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最后讨论的主题是如何编写我们自己的插件。我们解释了创建插件所需的每个步骤，并解释了为什么我们应该让 jQuery 处理大部分繁重的工作。最后，我们展示了如何将我们的插件上传到
    npm，以便他人可以从我们的工作中受益。
- en: 'We began this book by learning why jQuery was created: to make cross-browser
    web development easier. In [Chapter 2](part0021_split_000.html#K0RQ1-6309aac535bb4c1b83b0d7aa1f605023
    "Chapter 2. jQuery Selectors and Filters"), *jQuery Selectors and Filters* we
    used jQuery''s selectors and filters to find elements on the page then manipulated
    those elements in the following chapter. We''ve used events to make our site interactive
    and animation to make it snazzy. We learned how to get validated form data and
    send it to the server. We learned techniques to write clean and fast code in [Chapter
    8](part0060_split_000.html#1P71O1-6309aac535bb4c1b83b0d7aa1f605023 "Chapter 8. Writing
    Code that You can Read Later"), *Writing Code that You can Read later*, and [Chapter
    9](part0065_split_000.html#1TVKI2-6309aac535bb4c1b83b0d7aa1f605023 "Chapter 9. Faster
    jQuery"), *Faster jQuery*. And we finished things up by learning to use and write
    plugins.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从学习为什么创建 jQuery 开始了这本书：为了让跨浏览器的Web开发更容易。在 [第二章](part0021_split_000.html#K0RQ1-6309aac535bb4c1b83b0d7aa1f605023
    "第二章. jQuery 选择器和过滤器") 中，*jQuery 选择器和过滤器*，我们使用了 jQuery 的选择器和过滤器来找到页面上的元素，然后在接下来的章节中操作了这些元素。我们使用事件使我们的网站变得交互式，并使用动画使其更加华丽。我们学习了如何获取经过验证的表单数据并将其发送到服务器。我们学习了在
    [第八章](part0060_split_000.html#1P71O1-6309aac535bb4c1b83b0d7aa1f605023 "第八章. 编写以后可以阅读的代码")，*编写以后可以阅读的代码*，和
    [第九章](part0065_split_000.html#1TVKI2-6309aac535bb4c1b83b0d7aa1f605023 "第九章. 更快的
    jQuery")，*更快的 jQuery* 中编写干净和快速代码的技巧。最后，我们学习了如何使用和编写插件。
- en: 'jQuery is still an important part of modern web development. Although browsers
    have become more web-standards compliant over the years, jQuery still makes development
    easier. There is one area where jQuery doesn''t help: writing big web apps. Frameworks
    like Angular or Ember or a library like React are much better choices when writing
    large web applications.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 仍然是现代网页开发中的重要组成部分。虽然多年来浏览器在遵循Web标准方面做得更好了，但 jQuery 仍然能让开发变得更简单。唯一一点 jQuery
    无法帮助的是编写大型Web应用程序。在编写大型Web应用程序时，Angular 或 Ember 这样的框架，或者像 React 这样的库是更好的选择。
