- en: Asynchronous Programming Using Observables
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Observable进行异步编程
- en: If we think about it, nothing is instantaneous. Real time is not a thing. Did
    I lose my mind for a second there? Now, you can push a button and feel like it's
    instantaneous, but, the programmer in you knows that it's not. Information has
    been transferred, code executed, databases fetched, and so on. During this time,
    as short or as long as it might be, you have waited. More precisely, your code
    has made your users wait. Wouldn't you rather have a code base built around this
    very notion of asynchronism and which can execute other things while it waits,
    or, at least, warn your users that we are waiting for something to happen? This
    is the idea on which this chapter is based. This chapter helps you to understand
    the concept of asynchronous programming and implementing the same using Observable
    in Angular.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们仔细想想，没有什么是瞬间的。 实时不是一个事物。 我刚才失去了理智吗？ 现在，你可以按下一个按钮，感觉像是瞬间的，但是，在你内心深处，作为程序员的你知道那不是真的。
    信息已经传输，代码已被执行，数据库已被获取，等等。 在这段时间里，无论它是多短还是多长，你都在等待。 更准确地说，你的代码让用户等待。 您宁愿有一个基于异步概念构建的代码库，并且可以在等待时执行其他任务，或者至少警告用户我们正在等待某件事情发生吗？
    这就是这一章的基本思想。 这一章将帮助您理解异步编程的概念，并在Angular中使用Observable实现相同的功能。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将涵盖以下主题：
- en: Observer patterns
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 观察者模式
- en: Asynchronous programming
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 异步编程
- en: HTTP client
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTTP客户端
- en: Subscribing to Observables
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 订阅可观察对象
- en: Promises
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 承诺
- en: Observer patterns
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 观察者模式
- en: The Observable pattern is one that allows an object, called **subject**, to
    keep track of other objects, called **observers**, interested in the subject state.
    When the subject state changes, it notifies its observers about it. The mechanics
    behind this are really simple.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Observable模式允许一个称为**subject**的对象跟踪对其状态感兴趣的其他对象，称为**observers**。 当主题状态改变时，它会通知观察者。
    其背后的机制非常简单。
- en: TypeScript Observable
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TypeScript 可观察对象
- en: Let's take a look at the following `Observer`/`Subject` implementation in pure
    TypeScript (that is no Angular or framework of any kind, just TypeScript).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下纯TypeScript中的以下`Observer`/`Subject`实现（即没有任何Angular或任何框架，只有TypeScript）。
- en: 'First, I defined an `Observer` interface that any concrete implementation will
    have to implement:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我定义了一个`Observer`接口，任何具体实现都必须实现：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This interface only defines the `notify()` method. This method will be called
    by the subject (that is the `Object` being observed by `Observer`) when its state
    changes.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这个接口只定义了`notify()`方法。 当其状态改变时，该方法将被主题（即被`Observer`观察的`Object`）调用。
- en: 'Then, I have an implementation of this interface, named `HumanObserver`:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我有一个名为`HumanObserver`的这个接口的实现：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This implementation leverages the `typescript` property constructor, where
    you can define the property of your class inside the constructor. This notation
    is one hundred percent equivalent to the following, while being shorter:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这个实现利用了`typescript`属性构造函数，其中你可以在构造函数内定义你的类的属性。 这种表示法与以下表示法完全等效，而且更短：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Following the definitions of the `Observer` interface and `HumanObserver`,
    we can move on to the subject. I defined a `Subject` class that manages `observers`.
    This class has three methods: `attachObserver`, `detachObserver`, and `notifyObservers`:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 根据`Observer`接口和`HumanObserver`的定义，我们可以继续进行主题的定义。 我定义了一个管理`observers`的`Subject`类。
    这个类有三个方法：`attachObserver`，`detachObserver`和`notifyObservers`：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `attachObserver` method pushes new observers into the observer's property,
    while the `detachObserver` removes them.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`attachObserver`方法将新的观察者推送到观察者属性中，而`detachObserver`则将它们移除。'
- en: Subject implementations are often found with attach/detach, subscribe/unsubscribe,
    or add/delete prefixes.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 主题实现通常带有附加/分离，订阅/取消订阅或添加/删除前缀。
- en: 'The last method is `notifyObservers`, which iterates over the observers and
    invokes their `notify()` method. The last class allowing us to showcase the `Observable`
    mechanic is `IMDB`, which extends `Subject`. It will notify observers when a movie
    gets added:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个方法是`notifyObservers`，它遍历观察者并调用它们的`notify()`方法。 允许我们展示`Observable`机制的最后一个类是`IMDB`，它扩展了`Subject`。
    当添加电影时，它将通知观察者：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To make the pieces communicate with each other, we have to:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要使各个部分相互通信，我们必须：
- en: Create a `Subject`
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个`Subject`
- en: Create an `Observer`
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个`Observer`
- en: Attach the `Observer` to the `Subject`
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`Observer`附加到`Subject`
- en: Change the state of the `Subject` via the `addMovie` method
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过`addMovie`方法改变`Subject`的状态
- en: 'More concretely, here''s an implementation of the previous list:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 更具体地说，这是先前列表的一个实现：
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: To speed up our development process, we will install `ts-node`. This node package
    will transpile `typescript` files into JavaScript and resolve the dependencies
    between those files.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 为了加快我们的开发流程，我们将安装`ts-node`。这个节点包将把`typescript`文件转换成JavaScript，并解决这些文件之间的依赖关系。
- en: 'To quickly compile and execute `typescript` application, I recommend the excellent
    `ts-node` package. This package will transpile the following commands:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 要快速编译和执行`typescript`应用程序，我推荐使用优秀的`ts-node`包。这个包将转换以下命令：
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The output is `Mathieu Notified`. We can test to detach `mathieu` and add another
    movie:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 输出是`Mathieu Notified`。我们可以测试将`mathieu`分离并添加另一个电影：
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The output is still `Mathieu Notified`, which happens after we add the Jaws
    movie. The second movie addition (that is Die Hard) doesn't trigger a `Mathieu
    Notified` print to the console, as it has been detached.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 输出仍然是`Mathieu Notified`，这发生在我们添加了大白鲨电影之后。第二部电影的添加（也就是《虎胆龙威》）并没有触发控制台打印`Mathieu
    Notified`，因为它已经分离了。
- en: TypeScript Observable with parameters
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 具有参数的TypeScript Observable
- en: 'So, this is a basic implementation of the observer pattern. Nevertheless, it
    is not full-fledged, as `HumanObserver` only knows that something has changed
    in one of the subjects it observes. Consequently, it has to iterate over all of
    the subjects it observes and check their previous state against their current
    state to identify what has changed and where. A better way to go about this would
    be to modify the notify of `Observer`, so it contains more information. For example,
    we could add optional parameters, as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这是观察者模式的一个基本实现。然而，它并不完整，因为`HumanObserver`只知道它观察的主题中出现了一些变化。因此，它必须迭代它所观察到的所有主题，并检查它们的先前状态与当前状态来识别发生了什么变化以及在哪里发生了变化。更好的做法是修改`Observer`的通知，使其包含更多的信息。例如，我们可以添加可选参数，如下：
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `notify()` method now accepts an optional value parameter which characterizes
    the new state of the `Subject` object. We can also receive a reference to the
    `Subject` object itself. This is useful in case the observer observes many subjects.
    In such a case, we need to be able to differentiate them.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`notify（）`方法现在接受一个可选的值参数，该参数表征了`Subject`对象的新状态。我们还可以接收到`Subject`对象本身的引用。如果观察者观察了许多主题，这是很有用的。在这种情况下，我们需要能够区分它们。'
- en: 'Accordingly, we have to change `Subject` and `IMDB` a bit, so they use the
    new `notify`:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们必须稍微改变`Subject`和`IMDB`，使它们使用新的`notify`：
- en: '[PRE9]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Finally, the output is as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，输出如下：
- en: '[PRE10]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This is way more expressive than `Mathieu Notified`.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这比`Mathieu Notified`更有表现力。
- en: Now, when we are used to the `Observer` patterns for asynchronous programming,
    what we really mean is that we ask for something, and we do not want to wait to
    do anything during its processing. Instead, what we do is subscribe to the response
    event to be notified when the response comes.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们习惯于用于异步编程的`Observer`模式时，我们真正的意思是，我们要求某事，并且在其处理过程中我们不想等待去做任何事情。相反，我们订阅响应事件以在响应到达时得到通知。
- en: In the next sections, we will use the same pattern and mechanisms with Angular2.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将使用相同的模式和机制在Angular2中。
- en: The code for this observer implementation is at [http://bit.ly/mastering-angular2-chap7-part1](http://bit.ly/mastering-angular2-chap7-part1).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 此观察者实现的代码位于[http://bit.ly/mastering-angular2-chap7-part1](http://bit.ly/mastering-angular2-chap7-part1)。
- en: Observing HTTP responses
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 观察HTTP响应
- en: In this section, we will build a JSON API returning movies according to search
    parameters. Instead of simply waiting for the HTTP query to complete, we will
    leverage the power of the observer design pattern to let the user know we are
    waiting and, if need be, execute other processes.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将构建一个返回根据搜索参数返回电影的JSON API。我们将利用观察者设计模式的力量，而不是简单地等待HTTP查询完成，让用户知道我们正在等待，并且如果需要的话，执行其他流程。
- en: 'First things first: we need a data source for our IMDB--like application. Building
    and deploying a server-side application able to interpret an HTTP query and send
    the result accordingly is relatively simple nowadays. However, this falls outside
    the scope of this book. Instead, what we will do is fetch a static JSON file hosted
    at [http://bit.ly/mastering-angular2-marvel](http://bit.ly/mastering-angular2-marvel).
    This file contains some of the latest movies of the Marvel Cinematic Universe.
    It contains a JSON array describing fourteen movies as JSON objects. Here is the
    first movie:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 首先要做的是：为我们的 IMDB 类似应用程序准备一个数据源。构建和部署一个能够解释 HTTP 查询并相应地发送结果的服务器端应用程序现在相对简单。然而，这超出了本书的范围。相反，我们将获取托管在[http://bit.ly/mastering-angular2-marvel](http://bit.ly/mastering-angular2-marvel)的静态
    JSON 文件。该文件包含漫威电影宇宙最新电影的一些信息。它包含一个描述十四部电影的 JSON 对象的 JSON 数组。以下是第一部电影：
- en: '[PRE11]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You can find classical information that an IMDB-like application would provide,
    such as release year, running time, and so on. Our goal is to design an asynchronous
    JSON API, making each one of these fields searchable.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以找到类似 IMDB 的应用程序提供的经典信息，例如发行年份、播放时间等。我们的目标是设计一个异步的 JSON API，使这些字段中的每一个都可以搜索。
- en: 'As we are fetching a static JSON file (that is we will not insert, update,
    or delete any elements), acceptable API calls would be the following:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们要获取一个静态的 JSON 文件（也就是说我们不会插入、更新或删除任何元素），可接受的 API 调用将是以下内容：
- en: '[PRE12]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The first call simply fetches the movie with `movie_id: 1`; the second call
    is a more generic one that works in any field. To prevent API consumer from requesting
    fields that don''t exist in our movie, we restrict the `field` values using an
    enumerator defined inside a `Movie` class.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '第一个调用只是获取`movie_id: 1`的电影；第二个调用是一个更通用的调用，在任何字段中都适用。为了防止 API 消费者请求我们电影中不存在的字段，我们使用在`Movie`类内部定义的枚举器限制`field`的值。'
- en: Now, the important part here is the actual return of these calls. Indeed, they
    will trigger an `Observable` mechanism where the caller will attach himself to
    an `Observable` HTTP call. Then, when the HTTP call is complete and the results
    have been filtered according to the query parameter, then, the callee will notify
    the caller about the response. Consequently, the caller does not have to wait
    for the callee (`IMDBAPI`); it will be notified when the request is complete.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这里的重要部分是这些调用的实际返回。事实上，它们将触发一个`Observable`机制，调用方将自己附加到`Observable` HTTP调用上。然后，当HTTP调用完成并根据查询参数过滤结果后，被调用方将通知调用方关于响应。因此，调用方不必等待被调用方（`IMDBAPI`）；它将在请求完成时收到通知。
- en: Implementation
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实施
- en: 'Let''s dive into the implementation. First, we will need to create a new Angular2
    project using the Angular CLI:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入了解实现。首先，我们需要使用 Angular CLI 创建一个新的 Angular2 项目：
- en: '[PRE13]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Then, to make sure everything went well, you can browse to `localhost:4200`
    and see if you got something like the following:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，为了确保一切顺利，您可以浏览到`localhost:4200`并查看是否得到类似以下内容：
- en: '![](img/1a704954-e45e-4d7f-bfc9-f7c42a93c132.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1a704954-e45e-4d7f-bfc9-f7c42a93c132.png)'
- en: 'Next, we will need a model to represent the movie concept. We will generate
    this class using the `ng g class` models/`Movie` command-line. Then, we can add
    a constructor defining all the private fields of the `Movie` models as the same
    as the getters and setters:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要一个代表电影概念的模型。我们将使用命令行`ng g class models/Movie`生成这个类。然后，我们可以添加一个构造函数，定义`Movie`模型的所有私有字段，以及相同的
    getters 和 setters：
- en: '[PRE14]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Here, each field of the movie JSON definition is mapped into a private member
    of the Movie class using the constructor property declaration of `typescript`.
    Also, we override the `toString` method, so it prints every field. In the `toString`
    method, we take advantage of the multi-line string provided by the back tick ([PRE15]
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，电影 JSON 定义的每个字段都使用 `typescript` 的构造函数属性声明映射到 Movie 类的私有成员中。此外，我们重写了`toString`方法，所以它会打印出每个字段。在`toString`方法中，我们利用了反引号提供的多行字符串。
- en: IMDBAPI.fetchOneById(1);
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: IMDBAPI.fetchOneById(1);
- en: IMDBAPI.fetchByFields(MovieFields.release_date, 2015);
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: IMDBAPI.fetchByFields(MovieFields.release_date, 2015);
- en: '[PRE16]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: import { Injectable } from '@angular/core';
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`import { Injectable } from ''@angular/core'';`'
- en: import { Http }  from '@angular/http';
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`import { Http }  from ''@angular/http'';`'
- en: import { Movie, MovieFields } from '../models/movie';
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`import { Movie, MovieFields } from ''../models/movie'';`'
- en: import { Observable } from 'rxjs/Rx';
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`import { Observable } from ''rxjs/Rx'';`'
- en: import 'rxjs/Rx';
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`import ''rxjs/Rx'';`'
- en: '@Injectable()'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`@Injectable()`'
- en: export class IMDBAPIService {
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 导出类 IMDBAPIService {
- en: private moviesUrl:string = "assets/marvel-cinematic-universe.json";
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 私有 moviesUrl:string = "assets/marvel-cinematic-universe.json";
- en: 'constructor(private http: Http) { }'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 'constructor(private http: Http) { }'
- en: /**
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: /**
- en: '* Return an Observable to a Movie matching id'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '* Return an Observable to a Movie matching id'
- en: '* @param  {number}            id'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '* @param  {number}            id'
- en: '* @return {Observable<Movie>}'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '* @return {Observable<Movie>}'
- en: '*/'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '*/'
- en: public fetchOneById(id:number):Observable<Movie>{
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: public fetchOneById(id:number):Observable<Movie>{
- en: console.log('fetchOneById', id);
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: console.log('fetchOneById', id);
- en: return this.http.get(this.moviesUrl)
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: return this.http.get(this.moviesUrl)
- en: /**
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: /**
- en: '* Transforms the result of the http get, which is observable'
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '* Transforms the result of the http get, which is observable'
- en: '* into one observable by item.'
  id: totrans-89
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '* into one observable by item.'
- en: '*/'
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*/'
- en: .flatMap(res => res.json().movies)
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: .flatMap(res => res.json().movies)
- en: /**
  id: totrans-92
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: /**
- en: '* Filters movies by their movie_id'
  id: totrans-93
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '* Filters movies by their movie_id'
- en: '*/'
  id: totrans-94
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*/'
- en: .filter((movie:any)=>{
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: .filter((movie:any)=>{
- en: console.log("filter", movie);
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: console.log("filter", movie);
- en: return (movie.movie_id === id)
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: return (movie.movie_id === id)
- en: '})'
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '})'
- en: /**
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: /**
- en: '* Map the JSON movie item to the Movie Model'
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '* Map the JSON movie item to the Movie Model'
- en: '*/'
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*/'
- en: .map((movie:any) => {
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: .map((movie:any) => {
- en: console.log("map", movie);
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: console.log("map", movie);
- en: return new Movie(
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: return new Movie(
- en: movie.movie_id,
  id: totrans-105
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: movie.movie_id,
- en: movie.title,
  id: totrans-106
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: movie.title,
- en: movie.phase,
  id: totrans-107
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: movie.phase,
- en: movie.category_name,
  id: totrans-108
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: movie.category_name,
- en: movie.release_year,
  id: totrans-109
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: movie.release_year,
- en: movie.running_time,
  id: totrans-110
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: movie.running_time,
- en: movie.rating_name,
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: movie.rating_name,
- en: movie.disc_format_name,
  id: totrans-112
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: movie.disc_format_name,
- en: movie.number_discs,
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: movie.number_discs,
- en: movie.viewing_format_name,
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: movie.viewing_format_name,
- en: movie.aspect_ratio_name,
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: movie.aspect_ratio_name,
- en: movie.status,
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: movie.status,
- en: movie.release_date,
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: movie.release_date,
- en: movie.budget,
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: movie.budget,
- en: movie.gross,
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: movie.gross,
- en: movie.time_stamp
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: movie.time_stamp
- en: );
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: );
- en: '});'
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '});'
- en: '}'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE17]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: import { Injectable } from '@angular/core';
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: import { Injectable } from '@angular/core';
- en: import { Http }  from '@angular/http';
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: import { Http }  from '@angular/http';
- en: import { Movie, MovieFields } from '../models/movie';
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: import { Movie, MovieFields } from '../models/movie';
- en: import { Observable } from 'rxjs/Rx';
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: import { Observable } from 'rxjs/Rx';
- en: import 'rxjs/Rx';
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: import 'rxjs/Rx';
- en: '@Injectable()'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '@Injectable()'
- en: export class IMDBAPIService {
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: export class IMDBAPIService {
- en: private moviesUrl:string = "app/marvel-cinematic-universe.json";
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: private moviesUrl:string = "app/marvel-cinematic-universe.json";
- en: 'constructor(private http: Http) { }'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 'constructor(private http: Http) { }'
- en: '[PRE18]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: movie:Movie = JSON.parse(`{
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: movie:Movie = JSON.parse(`{
- en: '"movie_id" : 1,'
  id: totrans-137
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"movie_id" : 1,'
- en: '"title" : "Iron Man",'
  id: totrans-138
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"title" : "Iron Man",'
- en: '"phase" : "Phase One: Avengers Assembled",'
  id: totrans-139
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"phase" : "Phase One: Avengers Assembled",'
- en: '"category_name" : "Action",'
  id: totrans-140
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"category_name" : "Action",'
- en: '"release_year" : 2015,'
  id: totrans-141
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"release_year" : 2015,'
- en: '"running_time" : 126,'
  id: totrans-142
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"running_time" : 126,'
- en: '"rating_name" : "PG-13",'
  id: totrans-143
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"rating_name" : "PG-13",'
- en: '"disc_format_name" : "Blu-ray",'
  id: totrans-144
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"disc_format_name" : "Blu-ray",'
- en: '"number_discs" : 1,'
  id: totrans-145
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"number_discs" : 1,'
- en: '"viewing_format_name" : "Widescreen",'
  id: totrans-146
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"viewing_format_name" : "Widescreen",'
- en: '"aspect_ratio_name" : " 2.35:1",'
  id: totrans-147
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"aspect_ratio_name" : " 2.35:1",'
- en: '"status" : 1,'
  id: totrans-148
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"status" : 1,'
- en: '"release_date" : "May 2, 2008",'
  id: totrans-149
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"release_date" : "May 2, 2008",'
- en: '"budget" : "140,000,000",'
  id: totrans-150
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"budget" : "140,000,000",'
- en: '"gross" : "318,298,180",'
  id: totrans-151
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"gross" : "318,298,180",'
- en: '"time_stamp" : "2015-05-03"'
  id: totrans-152
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"time_stamp" : "2015-05-03"'
- en: '}`);'
  id: totrans-153
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}`);'
- en: Console.log(movie.movie_id(25));
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: Console.log(movie.movie_id(25));
- en: '[PRE19]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: import { BrowserModule } from '@angular/platform-browser';
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: import { BrowserModule } from '@angular/platform-browser';
- en: import { NgModule } from '@angular/core';
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: import { NgModule } from '@angular/core';
- en: import { FormsModule } from '@angular/forms';
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: import { FormsModule } from '@angular/forms';
- en: import { HttpModule } from '@angular/http';
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: import { HttpModule } from '@angular/http';
- en: import { IMDBAPIService } from './services/imdbapi.service';
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: import { IMDBAPIService } from './services/imdbapi.service';
- en: import { AppComponent } from './app.component';
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: import { AppComponent } from './app.component';
- en: '@NgModule({'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '@NgModule({'
- en: 'declarations: ['
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 'declarations: ['
- en: AppComponent
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: AppComponent
- en: '],'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '],'
- en: 'imports: ['
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 'imports: ['
- en: BrowserModule,
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: BrowserModule,
- en: FormsModule,
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: FormsModule,
- en: HttpModule
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: HttpModule
- en: '],'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '],'
- en: 'providers: [IMDBAPIService],'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 'providers: [IMDBAPIService],'
- en: 'bootstrap: [AppComponent]'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 'bootstrap: [AppComponent]'
- en: '})'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '})'
- en: export class AppModule { }
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: export class AppModule { }
- en: '[PRE20]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: import { Component } from '@angular/core';
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: import { Component } from '@angular/core';
- en: import { IMDBAPIService } from './services/imdbapi.service';
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: import { IMDBAPIService } from './services/imdbapi.service';
- en: import { Movie } from './models/movie';
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: import { Movie } from './models/movie';
- en: '@Component({'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '@Component({'
- en: 'selector: ''app-root'','
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 'selector: ''app-root'','
- en: 'templateUrl: ''./app.component.html'','
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 'templateUrl: ''./app.component.html'','
- en: 'styleUrls: [''./app.component.css'']'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 'styleUrls: [''./app.component.css'']'
- en: '})'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '})'
- en: export class AngularObservableAppComponent {
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: export class AngularObservableAppComponent {
- en: title = 'angular-observable works!';
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: title = 'angular-observable works!';
- en: private movies:Movie[] = []; private error:boolean = false; private finished:boolean
    = false;
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: private movies:Movie[] = []; private error:boolean = false; private finished:boolean
    = false;
- en: constructor(private IMDBAPI:IMDBAPIService){
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: constructor(private IMDBAPI:IMDBAPIService){
- en: this.IMDBAPI.fetchOneById(1).subscribe( value => {this.movies.push(value); console.log("Component",
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: this.IMDBAPI.fetchOneById(1).subscribe( value => {this.movies.push(value); console.log("Component",
- en: value)}, error => this.error = true, () => this.finished = true )  }
  id: totrans-189
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: value)}, error => this.error = true, () => this.finished = true )  }
- en: '}'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE21]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: <h1>
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: <h1>
- en: '{{title}}'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '{{title}}'
- en: </h1>
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: </h1>
- en: <ul>
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: <ul>
- en: <li *ngFor="let movie of movies">{{movie}}</li>
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: <li *ngFor="let movie of movies">{{movie}}</li>
- en: </ul>
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: </ul>
- en: '[PRE22]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: fetchOneById 1
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: fetchOneById 1
- en: :4200/app/services/imdbapi.service.js:30 filter Object
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: :4200/app/services/imdbapi.service.js:30 过滤对象
- en: :4200/app/services/imdbapi.service.js:34 map Object
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: :4200/app/services/imdbapi.service.js:34 映射对象
- en: :4200/app/angular-observable.component.js:21 Component
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: :4200/app/angular-observable.component.js:21 组件
- en: 'Movie_aspect_ratio_name: " 2.35:1"_budget:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 电影宽高比名称：" 2.35:1"_预算：
- en: '"140,000,000"_category_name: "Action"_disc_format_name: "Blu-'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '"140,000,000"_类别名称："动作"_光盘格式名称："蓝光-'
- en: 'ray"_gross: "318,298,180"_movie_id: 1_number_discs: 1_phase: "Phase'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 光盘"总收入："318,298,180"_电影id：1_光盘数量：1_阶段："第
- en: 'One: Avengers Assembled"_rating_name: "PG-13"_release_date: "May 2,'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 一个：复仇者联盟成立"_评分名称："PG-13"_发布日期："5月2日，
- en: '2008"_release_year: 2015_running_time: 126_status: 1_time_stamp:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '2008"_发布年份: 2015_播放时长: 126_状态: 1_时间戳:'
- en: '"2015-05-03"_title: "Iron Man"_viewing_format_name:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '"2015-05-03"_标题："钢铁侠"_查看格式名称：'
- en: '"Widescreen"aspect_ratio_name: (...)budget: (...)category_name:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '"宽屏"宽高比名称：(...)预算：(...)类别名称：'
- en: '(...)disc_format_name: (...)gross: (...)movie_id: (...)number_discs:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: (...)光盘格式名称：(...)总收入：(...)电影id：(...)光盘数量：
- en: '(...)phase: (...)rating_name: (...)release_date: (...)release_year:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: (...)阶段：(...)评分名称：(...)发布日期：(...)发布年份：
- en: '(...)running_time: (...)status: (...)time_stamp: (...)title:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: (...)播放时长：(...)状态：(...)时间戳：(...)标题：
- en: '(...)toString: ()viewing_format_name: (...)__proto__: Object'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: (...)ToString：()查看格式名称：(...)__proto__：对象
- en: :4200/app/services/imdbapi.service.js:30 filter Object
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: :4200/app/services/imdbapi.service.js:30 过滤对象
- en: :4200/app/services/imdbapi.service.js:30 filter Object
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: :4200/app/services/imdbapi.service.js:30 过滤对象
- en: :4200/app/services/imdbapi.service.js:30 filter Object
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: :4200/app/services/imdbapi.service.js:30 过滤对象
- en: :4200/app/services/imdbapi.service.js:30 filter Object
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: :4200/app/services/imdbapi.service.js:30 过滤对象
- en: :4200/app/services/imdbapi.service.js:30 filter Object
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: :4200/app/services/imdbapi.service.js:30 过滤对象
- en: :4200/app/services/imdbapi.service.js:30 filter Object
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: :4200/app/services/imdbapi.service.js:30 过滤对象
- en: :4200/app/services/imdbapi.service.js:30 filter Object
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: :4200/app/services/imdbapi.service.js:30 过滤对象
- en: :4200/app/services/imdbapi.service.js:30 filter Object
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: :4200/app/services/imdbapi.service.js:30 过滤对象
- en: :4200/app/services/imdbapi.service.js:30 filter Object
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: :4200/app/services/imdbapi.service.js:30 过滤对象
- en: :4200/app/services/imdbapi.service.js:30 filter Object
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: :4200/app/services/imdbapi.service.js:30 过滤对象
- en: :4200/app/services/imdbapi.service.js:30 filter Object
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: :4200/app/services/imdbapi.service.js:30 过滤对象
- en: :4200/app/services/imdbapi.service.js:30 filter Object
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: :4200/app/services/imdbapi.service.js:30 过滤对象
- en: :4200/app/services/imdbapi.service.js:30 filter Object
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: :4200/app/services/imdbapi.service.js:30 过滤对象
- en: '[PRE23]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: public fetchByField(field:MovieFields, value:any){
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: public fetchByField(field:电影字段, value:任意){
- en: console.log('fetchByField', field, value);
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: console.log('fetchByField', field, value);
- en: return this.http.get(this.moviesUrl)
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 返回 this.http.get(this.moviesUrl)
- en: .flatMap(res => res.json().movies)
  id: totrans-231
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: .flatMap(res => res.json().movies)
- en: /**
  id: totrans-232
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: /**
- en: '* Filters movies by their field'
  id: totrans-233
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '* 根据它们的字段过滤电影'
- en: '*/'
  id: totrans-234
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*/'
- en: .filter((movie:any)=>{
  id: totrans-235
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: .filter((电影:任意)=>{
- en: console.log("filter", movie);
  id: totrans-236
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: console.log("过滤", 电影);
- en: return (movie[MovieFields[field]] === value)
  id: totrans-237
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回 (电影[电影字段[field]] === value)
- en: '})'
  id: totrans-238
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '})'
- en: /**
  id: totrans-239
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: /**
- en: '* Map the JSON movie item to the Movie Model'
  id: totrans-240
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '* 将JSON电影项目映射到电影模型'
- en: '*/'
  id: totrans-241
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*/'
- en: .map((movie:any) => {
  id: totrans-242
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: .map((电影:任意) => {
- en: console.log("map", movie);
  id: totrans-243
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: console.log("映射", 电影);
- en: return new Movie(
  id: totrans-244
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回新电影(
- en: movie.movie_id,
  id: totrans-245
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 电影电影id,
- en: movie.title,
  id: totrans-246
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 电影标题,
- en: movie.phase,
  id: totrans-247
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 电影阶段,
- en: movie.category_name,
  id: totrans-248
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 电影类别名称,
- en: movie.release_year,
  id: totrans-249
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 电影发布年份,
- en: movie.running_time,
  id: totrans-250
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 电影播放时长,
- en: movie.rating_name,
  id: totrans-251
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 电影评分名称,
- en: movie.disc_format_name,
  id: totrans-252
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 电影光盘格式名称,
- en: movie.number_discs,
  id: totrans-253
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 电影光盘数量,
- en: movie.viewing_format_name,
  id: totrans-254
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 电影查看格式名称，
- en: movie.aspect_ratio_name,
  id: totrans-255
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 电影宽高比名称,
- en: movie.status,
  id: totrans-256
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 电影状态,
- en: movie.release_date,
  id: totrans-257
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 电影发布日期,
- en: movie.budget,
  id: totrans-258
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 电影预算,
- en: movie.gross,
  id: totrans-259
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 电影总收入,
- en: movie.time_stamp
  id: totrans-260
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 电影时间戳
- en: );
  id: totrans-261
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: );
- en: '});'
  id: totrans-262
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '});'
- en: '}'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE24]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: (function (MovieFields) {
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: (function (电影字段) {
- en: MovieFields[MovieFields["movie_id"] = 0] = "movie_id";
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 电影字段[电影字段["电影id"] = 0] = "电影id";
- en: MovieFields[MovieFields["title"] = 1] = "title";
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 电影字段[电影字段["标题"] = 1] = "标题";
- en: MovieFields[MovieFields["phase"] = 2] = "phase";
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 电影字段[电影字段["阶段"] = 2] = "阶段";
- en: MovieFields[MovieFields["category_name"] = 3] = "category_name";
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 电影字段[电影字段["类别名称"] = 3] = "类别名称";
- en: MovieFields[MovieFields["release_year"] = 4] = "release_year";
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 电影字段[电影字段["发布年份"] = 4] = "发布年份";
- en: MovieFields[MovieFields["running_time"] = 5] = "running_time";
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 电影字段[电影字段["播放时长"] = 5] = "播放时长";
- en: MovieFields[MovieFields["rating_name"] = 6] = "rating_name";
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 电影字段[电影字段["评分名称"] = 6] = "评分名称";
- en: MovieFields[MovieFields["disc_format_name"] = 7] =
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 电影字段[电影字段["光盘格式名称"] = 7] =
- en: '"disc_format_name";'
  id: totrans-274
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"光盘格式名称";'
- en: MovieFields[MovieFields["number_discs"] = 8] = "number_discs";
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 电影字段[电影字段["光盘数量"] = 8] = "光盘数量";
- en: MovieFields[MovieFields["viewing_format_name"] = 9] =
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 电影字段[电影字段["查看格式名称"] = 9] =
- en: '"viewing_format_name";'
  id: totrans-277
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"查看格式名称";'
- en: MovieFields[MovieFields["aspect_ratio_name"] = 10] =
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 电影字段[电影字段["宽高比名称"] = 10] =
- en: '"aspect_ratio_name";'
  id: totrans-279
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"aspect_ratio_name";'
- en: MovieFields[MovieFields["status"] = 11] = "status";
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: MovieFields[MovieFields["status"] = 11] = "status";
- en: MovieFields[MovieFields["release_date"] = 12] = "release_date";
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: MovieFields[MovieFields["release_date"] = 12] = "release_date";
- en: MovieFields[MovieFields["budget"] = 13] = "budget";
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: MovieFields[MovieFields["budget"] = 13] = "budget";
- en: MovieFields[MovieFields["gross"] = 14] = "gross";
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: MovieFields[MovieFields["gross"] = 14] = "gross";
- en: MovieFields[MovieFields["time_stamp"] = 15] = "time_stamp";
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: MovieFields[MovieFields["time_stamp"] = 15] = "time_stamp";
- en: '})'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '})'
- en: (exports.MovieFields || (exports.MovieFields = {}));
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: (exports.MovieFields || (exports.MovieFields = {}));
- en: var MovieFields = exports.MovieFields;
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: var MovieFields = exports.MovieFields;
- en: '[PRE25]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: constructor(private IMDBAPI:IMDBAPIService){
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: constructor(private IMDBAPI:IMDBAPIService){
- en: this.IMDBAPI.fetchByField(MovieFields.release_year, 2015).subscribe(
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: this.IMDBAPI.fetchByField(MovieFields.release_year, 2015).subscribe(
- en: value => {this.movies.push(value); console.log("Component",
  id: totrans-291
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: value => {this.movies.push(value); console.log("组件",
- en: value)},
  id: totrans-292
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: value)},
- en: error => this.error = true,
  id: totrans-293
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: error => this.error = true,
- en: () => this.finished = true
  id: totrans-294
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: () => this.finished = true
- en: )
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '}'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE26]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: fetchByField 4 2015
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: fetchByField 4 2015
- en: 'imdbapi.service.js:43 filter Object {movie_id: 1, title: "Iron Man",'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:43 过滤对象 {movie_id: 1, title: "钢铁侠",'
- en: 'phase: "Phase One: Avengers Assembled", category_name: "Action",'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 'phase: "第一阶段:  复仇者联盟组装", category_name: "动作",'
- en: 'release_year: 2015...}'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 'release_year: 2015...}'
- en: 'imdbapi.service.js:47 map Object {movie_id: 1, title: "Iron Man",'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:47 映射对象 {movie_id: 1, title: "钢铁侠",'
- en: 'phase: "Phase One: Avengers Assembled", category_name: "Action",'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 'phase: "第一阶段:  复仇者联盟组装", category_name: "动作",'
- en: 'release_year: 2015...}'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 'release_year: 2015...}'
- en: 'angular-observable.component.js:22 Component Movie {_movie_id: 1,'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 'angular-observable.component.js:22 组件 电影 {_movie_id: 1,'
- en: '_title: "Iron Man", _phase: "Phase One: Avengers Assembled",'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '_title: "钢铁侠", _phase: "第一阶段:  复仇者联盟组装",'
- en: '_category_name: "Action", _release_year: 2015...}'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: '_category_name: "动作", _release_year: 2015...}'
- en: 'imdbapi.service.js:43 filter Object {movie_id: 2, title: "The'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:43 过滤对象 {movie_id: 2, title: "The'
- en: 'Incredible Hulk", phase: "Phase One: Avengers Assembled",'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: '难以置信的绿巨人", phase: "第一阶段:  复仇者联盟组装",'
- en: 'category_name: "Action", release_year: 2008...}'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 'category_name: "动作", release_year: 2008...}'
- en: 'imdbapi.service.js:43 filter Object {movie_id: 3, title: "Iron Man 2",'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:43 过滤对象 {movie_id: 3, title: "钢铁侠 2",'
- en: 'phase: "Phase One: Avengers Assembled", category_name: "Action",'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 'phase: "第一阶段:  复仇者联盟组装", category_name: "动作",'
- en: 'release_year: 2015...}'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 'release_year: 2015...}'
- en: 'imdbapi.service.js:47 map Object {movie_id: 3, title: "Iron Man 2",'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:47 映射对象 {movie_id: 3, title: "钢铁侠 2",'
- en: 'phase: "Phase One: Avengers Assembled", category_name: "Action",'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 'phase: "第一阶段:  复仇者联盟组装", category_name: "动作",'
- en: 'release_year: 2015...}'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 'release_year: 2015...}'
- en: 'angular-observable.component.js:22 Component Movie {_movie_id: 3,'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 'angular-observable.component.js:22 组件 电影 {_movie_id: 3,'
- en: '_title: "Iron Man 2", _phase: "Phase One: Avengers Assembled",'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: '_title: "钢铁侠 2", _phase: "第一阶段:  复仇者联盟组装",'
- en: '_category_name: "Action", _release_year: 2015...}'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: '_category_name: "动作", _release_year: 2015...}'
- en: 'imdbapi.service.js:43 filter Object {movie_id: 4, title: "Thor", phase:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:43 过滤对象 {movie_id: 4, title: "雷神", phase:'
- en: '"Phase One: Avengers Assembled", category_name: "Action",'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '"第一阶段:  复仇者联盟组装", category_name: "动作",'
- en: 'release_year: 2011...}'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 'release_year: 2011...}'
- en: 'imdbapi.service.js:43 filter Object {movie_id: 5, title: "Captain'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:43 过滤对象 {movie_id: 5, title: "Captain'
- en: 'America", phase: "Phase One: Avengers Assembled", category_name:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 'America", phase: "第一阶段:  复仇者联盟组装", category_name:'
- en: '"Action", release_year: 2011...}'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '"动作", release_year: 2011...}'
- en: 'imdbapi.service.js:43 filter Object {movie_id: 6, title: "Avengers,'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:43 过滤对象 {movie_id: 6, title: "复仇者联盟,'
- en: 'The", phase: "Phase One: Avengers Assembled", category_name: "Science'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 'The", phase: "第一阶段:  复仇者联盟组装", category_name: "科幻'
- en: 'Fiction", release_year: 2012...}'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 'Fiction", release_year: 2012...}'
- en: 'imdbapi.service.js:43 filter Object {movie_id: 7, title: "Iron Man 3",'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:43 过滤对象 {movie_id: 7, title: "钢铁侠 3",'
- en: 'phase: "Phase Two", category_name: "Action", release_year: 2015...}'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 'phase: "第二阶段", category_name: "动作", release_year: 2015...}'
- en: 'imdbapi.service.js:47 map Object {movie_id: 7, title: "Iron Man 3",'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:47 映射对象 {movie_id: 7, title: "钢铁侠 3",'
- en: 'phase: "Phase Two", category_name: "Action", release_year: 2015...}'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 'phase: "第二阶段", category_name: "动作", release_year: 2015...}'
- en: 'angular-observable.component.js:22 Component Movie {_movie_id: 7,'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 'angular-observable.component.js:22 组件 电影 {_movie_id: 7,'
- en: '_title: "Iron Man 3", _phase: "Phase Two", _category_name: "Action",'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '_title: "钢铁侠 3", _phase: "第二阶段", _category_name: "动作",'
- en: '_release_year: 2015...}'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: '_release_year: 2015...}'
- en: 'imdbapi.service.js:43 filter Object {movie_id: 8, title: "Thor: The'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:43 过滤对象 {movie_id: 8, title: "雷神: 黑暗世界",'
- en: 'Dark World", phase: "Phase Two", category_name: "Science Fiction",'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: '黑暗世界", phase: "第二阶段", category_name: "科幻",'
- en: 'release_year: 2013...}'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 'release_year: 2013...}'
- en: 'imdbapi.service.js:43 filter Object {movie_id: 9, title: "Captain'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:43 过滤对象 {movie_id: 9, title: "Captain'
- en: 'America: The Winter Soldier", phase: "Phase Two", category_name:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 发布年份："2015..."}
- en: '"Action", release_year: 2014...}'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 派两：复仇者联盟"，类别名称："动作"，发布年份："2014..."}
- en: 'imdbapi.service.js:43 filter Object {movie_id: 10, title: "Guardians of'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:43 过滤对象{电影_ID: 10，标题："银河护卫队"'
- en: 'the Galaxy", phase: "Phase Two", category_name: "Science Fiction",'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 'Fiction", _release_year: 2015...}'
- en: 'release_year: 2014...}'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: let imdbSubscription =
- en: 'imdbapi.service.js:43 filter Object {movie_id: 11, title: "Avengers:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:43filter Object {movie_id: 1, title: "Iron Man",'
- en: 'Age of Ultron", phase: "Phase Two", category_name: "Science Fiction",'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 阶段："第一阶段：复仇者联盟"，类别名称："动作"
- en: 'release_year: 2015...}'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 阶段："第一阶段：复仇者联盟"，类别名称："动作"
- en: 'imdbapi.service.js:47 map Object {movie_id: 11, title: "Avengers: Age'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: imdbSubscription.unsubscribe();
- en: 'of Ultron", phase: "Phase Two", category_name: "Science Fiction",'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: '_title: "复仇者联盟：奥创时代"，_phase: "第二阶段"'
- en: 'release_year: 2015...}'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: 'angular-observable.component.js:22 Component Movie {_movie_id: 11,'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: constructor(private IMDBAPI:IMDBAPIService){
- en: '_title: "Avengers: Age of Ultron", _phase: "Phase Two",'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:43 过滤对象{电影_ID: 12，标题："蚁人"'
- en: '_category_name: "Science Fiction", _release_year: 2015...}'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:43 过滤对象{电影_ID: 11，标题："复仇者联盟'
- en: 'imdbapi.service.js:43 filter Object {movie_id: 12, title: "Ant-Man",'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 'angular-observable.component.js:24 组件电影{_电影ID: 3，'
- en: 'phase: "Phase Two", category_name: "Science Fiction", release_year:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: '"动作"，发布年份："2014..."}'
- en: 2015...}
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:43 过滤对象{电影_ID: 14，标题："奇异博士'
- en: 'imdbapi.service.js:47 map Object {movie_id: 12, title: "Ant-Man",'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: _标题："钢铁侠"，_阶段："第一阶段：复仇者联盟"
- en: 'phase: "Phase Two", category_name: "Science Fiction", release_year:'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 阶段："第二阶段"，类别名称："科幻"，发布年份："2015..."
- en: 2015...}
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: console.log("组件", value)
- en: 'angular-observable.component.js:22 Component Movie {_movie_id: 12,'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: Age of Ultron"，阶段："第二阶段"，类别名称："科幻"
- en: '_title: "Ant-Man", _phase: "Phase Two", _category_name: "Science'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 'America: The Winter Soldier", phase: "Phase Two", category_name:'
- en: 'Fiction", _release_year: 2015...}'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: '_title: "Ant-Man", _phase: "Phase Two", _category_name: "Science'
- en: 'imdbapi.service.js:43 filter Object {movie_id: 13, title: "Captain'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 发布年份："2015..."
- en: 'America: Civil War", phase: "Phase Three", category_name: "Science'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: '"美国队长：内战"，阶段："第三阶段"，类别名称："科学"'
- en: 'Fiction", release_year: 2016...}'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 'category_name: "Action", release_year: 2008...}'
- en: 'imdbapi.service.js:43 filter Object {movie_id: 14, title: "Doctor'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 发布年份："2014..."}
- en: 'Strange", phase: "Phase Two", category_name: "Science Fiction",'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 'angular-observable.component.js:22 组件电影{_电影ID: 11，'
- en: 'release_year: 2016...}'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: value => {
- en: '[PRE27]'
  id: totrans-369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: constructor(private IMDBAPI:IMDBAPIService){
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 发布年份："2015..."}
- en: let imdbSubscription =
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:43 过滤对象{电影_ID: 2，标题："银河护卫队"'
- en: this.IMDBAPI.fetchByField(MovieFields.release_year, 2015).
  id: totrans-372
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: this.movies.push(value);
- en: subscribe(
  id: totrans-373
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 2015..."}
- en: value => {
  id: totrans-374
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: _标题："钢铁侠2"，_阶段："第一阶段：复仇者联盟"
- en: this.movies.push(value);
  id: totrans-375
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 发布年份："2015..."
- en: console.log("Component", value)
  id: totrans-376
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:49 映射对象{电影_ID: 3，标题："钢铁侠2"'
- en: if(this.movies.length > 2){
  id: totrans-377
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 发布年份："2015..."
- en: imdbSubscription.unsubscribe();
  id: totrans-378
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: subscribe(
- en: '}'
  id: totrans-379
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:47 映射对象{电影_ID: 11，标题："复仇者联盟：奥创时代'
- en: '},'
  id: totrans-380
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 阶段："第一阶段：复仇者联盟"，类别名称："动作"
- en: error => this.error = true,
  id: totrans-381
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: _类别名称："动作"，_发布年份："2015..."}
- en: () => this.finished = true
  id: totrans-382
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: error => this.error = true,
- en: );
  id: totrans-383
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'angular-observable.component.js:22 组件电影{_电影ID: 12，'
- en: '}'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 'Fiction", release_year: 2016...}'
- en: '[PRE28]'
  id: totrans-385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: fetchByField 4 2015
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: 'imdbapi.service.js:43filter Object {movie_id: 1, title: "Iron Man",'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 'the Galaxy", phase: "Phase Two", category_name: "Science Fiction",'
- en: 'phase: "Phase One: Avengers Assembled", category_name: "Action",'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 2015..."}
- en: 'release_year: 2015...}'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 'angular-observable.component.js:24 组件电影{_movie_id: 1,'
- en: 'imdbapi.service.js:49 map Object {movie_id: 1, title: "Iron Man",'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: if(this.movies.length > 2){
- en: 'phase: "Phase One: Avengers Assembled", category_name: "Action",'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: Strange"，阶段："第二阶段"，类别名称："科幻"
- en: 'release_year: 2015...}'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:43 过滤对象{电影_ID: 3，标题："钢铁侠2"'
- en: 'angular-observable.component.js:24 Component Movie {_movie_id: 1,'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 阶段："第一阶段：复仇者联盟"，类别名称："动作"
- en: '_title: "Iron Man", _phase: "Phase One: Avengers Assembled",'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '_category_name: "Action", _release_year: 2015...}'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: _类别名称："科幻"，_发布年份："2015..."}
- en: 'imdbapi.service.js:43 filter Object {movie_id: 2, title: "The'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: 'Incredible Hulk", phase: "Phase One: Avengers Assembled",'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: '"神奇的浩克"，阶段："第一阶段：复仇者联盟"'
- en: 'category_name: "Action", release_year: 2008...}'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 'phase: "Phase Two", category_name: "Science Fiction", release_year:'
- en: 'imdbapi.service.js:43 filter Object {movie_id: 3, title: "Iron Man 2",'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 发布年份："2016..."}
- en: 'phase: "Phase One: Avengers Assembled", category_name: "Action",'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:49 映射对象{电影_ID: 1，标题："钢铁侠"'
- en: 'release_year: 2015...}'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:47 映射对象{电影_ID: 12，标题："蚁人"'
- en: 'imdbapi.service.js:49 map Object {movie_id: 3, title: "Iron Man 2",'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: () => this.finished = true
- en: 'phase: "Phase One: Avengers Assembled", category_name: "Action",'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: of Ultron"，阶段："第二阶段"，类别名称："科幻"
- en: 'release_year: 2015...}'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: this.IMDBAPI.fetchByField(MovieFields.release_year, 2015).
- en: 'angular-observable.component.js:24 Component Movie {_movie_id: 3,'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:43 过滤对象{电影_ID: 13，标题："美国队长'
- en: '_title: "Iron Man 2", _phase: "Phase One: Avengers Assembled",'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: fetchByField 4 2015
- en: '_category_name: "Action", _release_year: 2015...}'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: '_category_name: "动作", _release_year: 2015...}'
- en: 'imdbapi.service.js:43 filter Object {movie_id: 4, title: "Thor", phase:'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:43 filter Object {movie_id: 4, title: "雷神", phase:'
- en: '"Phase One: Avengers Assembled", category_name: "Action",'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: '"第一阶段：复仇者联盟", category_name: "动作",'
- en: 'release_year: 2011...}'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 'release_year: 2011...}'
- en: 'imdbapi.service.js:43 filter Object {movie_id: 5, title: "Captain'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:43 filter Object {movie_id: 5, title: "美国队长'
- en: 'America", phase: "Phase One: Avengers Assembled", category_name:'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 'America", phase: "第一阶段：复仇者联盟", category_name:'
- en: '"Action", release_year: 2011...}'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: '"动作", release_year: 2011...}'
- en: 'imdbapi.service.js:43 filter Object {movie_id: 6, title: "Avengers,'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:43 filter Object {movie_id: 6, title: "复仇者联盟'
- en: 'The", phase: "Phase One: Avengers Assembled", category_name: "Science'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 'The", phase: "第一阶段：复仇者联盟", category_name: "科幻'
- en: 'Fiction", release_year: 2012...}'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 'Fiction", release_year: 2012...}'
- en: 'imdbapi.service.js:43 filter Object {movie_id: 7, title: "Iron Man 3",'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:43 filter Object {movie_id: 7, title: "钢铁侠3",'
- en: 'phase: "Phase Two", category_name: "Action", release_year: 2015...}'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 'phase: "第二阶段", category_name: "动作", release_year: 2015...}'
- en: 'imdbapi.service.js:49 map Object {movie_id: 7, title: "Iron Man 3",'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:49 map Object {movie_id: 7, title: "钢铁侠3",'
- en: 'phase: "Phase Two", category_name: "Action", release_year: 2015...}'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 'phase: "第二阶段", category_name: "动作", release_year: 2015...}'
- en: 'angular-observable.component.js:24 Component Movie {_movie_id: 7,'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 'angular-observable.component.js:24 组件 电影 {_movie_id: 7,'
- en: '_title: "Iron Man 3", _phase: "Phase Two", _category_name: "Action",'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: '_title: "钢铁侠3", _phase: "第二阶段", _category_name: "动作",'
- en: '_release_year: 2015...}'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: '_release_year: 2015...}'
- en: '[PRE29]'
  id: totrans-424
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: /** ,
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: /** ,
- en: '* Return a Promise to a Movie matching id'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: '* 返回匹配id的电影的Promise'
- en: '* @param  {number}            id'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: '* @param  {number}            id'
- en: '* @return {Promise<Movie>}'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: '* @return {Promise<Movie>}'
- en: '*/'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: '*/'
- en: public fetchOneById(id:number):Promise<Movie>{
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: public fetchOneById(id:number):Promise<Movie>{
- en: console.log('fecthOneById', id);
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: console.log('fecthOneById', id);
- en: return this.http.get(this.moviesUrl)
  id: totrans-432
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: return this.http.get(this.moviesUrl)
- en: /**
  id: totrans-433
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: /**
- en: '* Transforms the result of the http get, which is observable'
  id: totrans-434
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '* 转换http get的结果，它是observable'
- en: '* into one observable by item.'
  id: totrans-435
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '* 转换成一个observable'
- en: '*/'
  id: totrans-436
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*/'
- en: .flatMap(res => res.json().movies)
  id: totrans-437
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: .flatMap(res => res.json().movies)
- en: /**
  id: totrans-438
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: /**
- en: '* Filters movies by their movie_id'
  id: totrans-439
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '* 通过它们的movie_id来过滤电影'
- en: '*/'
  id: totrans-440
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*/'
- en: .filter((movie:any)=>{
  id: totrans-441
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: .filter((movie:any)=>{
- en: console.log("filter", movie);
  id: totrans-442
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: console.log("filter", movie);
- en: return (movie.movie_id === id)
  id: totrans-443
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: return (movie.movie_id === id)
- en: '})'
  id: totrans-444
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '})'
- en: .toPromise()
  id: totrans-445
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: .toPromise()
- en: /**
  id: totrans-446
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: /**
- en: '* Map the JSON movie item to the Movie Model'
  id: totrans-447
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '* 将JSON电影项映射到电影模型'
- en: '*/'
  id: totrans-448
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*/'
- en: .then((movie:any) => {
  id: totrans-449
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: .then((movie:any) => {
- en: console.log("map", movie);
  id: totrans-450
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: console.log("map", movie);
- en: return new Movie(
  id: totrans-451
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: return new Movie(
- en: movie.movie_id,
  id: totrans-452
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: movie.movie_id,
- en: movie.title,
  id: totrans-453
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: movie.title,
- en: movie.phase,
  id: totrans-454
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: movie.phase,
- en: movie.category_name,
  id: totrans-455
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: movie.category_name,
- en: movie.release_year,
  id: totrans-456
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: movie.release_year,
- en: movie.running_time,
  id: totrans-457
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: movie.running_time,
- en: movie.rating_name,
  id: totrans-458
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: movie.rating_name,
- en: movie.disc_format_name,
  id: totrans-459
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: movie.disc_format_name,
- en: movie.number_discs,
  id: totrans-460
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: movie.number_discs,
- en: movie.viewing_format_name,
  id: totrans-461
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: movie.viewing_format_name,
- en: movie.aspect_ratio_name,
  id: totrans-462
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: movie.aspect_ratio_name,
- en: movie.status,
  id: totrans-463
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: movie.status,
- en: movie.release_date,
  id: totrans-464
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: movie.release_date,
- en: movie.budget,
  id: totrans-465
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: movie.budget,
- en: movie.gross,
  id: totrans-466
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: movie.gross,
- en: movie.time_stamp
  id: totrans-467
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: movie.time_stamp
- en: )
  id: totrans-468
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: )
- en: '});'
  id: totrans-469
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '});'
- en: '}'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE30]'
  id: totrans-471
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: this.IMDBAPI.fetchOneById(1).then(
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: this.IMDBAPI.fetchOneById(1).then(
- en: value => {
  id: totrans-473
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: value => {
- en: this.movies.push(value);
  id: totrans-474
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: this.movies.push(value);
- en: console.log("Component", value)
  id: totrans-475
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: console.log("Component", value)
- en: '},'
  id: totrans-476
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '},'
- en: error => this.error = true
  id: totrans-477
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: error => this.error = true
- en: );
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '[PRE31]'
  id: totrans-479
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'imdbapi.service.js:30 filter Object {movie_id: 2, title: "The'
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:30 filter Object {movie_id: 2, title: "复仇者联盟"'
- en: 'Incredible Hulk", phase: "Phase One: Avengers Assembled",'
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: '狂野的绿巨人", phase: "第一阶段：复仇者联盟",'
- en: 'category_name: "Action", release_year: 2008...}'
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: 'category_name: "动作", release_year: 2008...}'
- en: 'imdbapi.service.js:30 filter Object {movie_id: 3, title: "Iron Man 2",'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:30 filter Object {movie_id: 3, title: "钢铁侠2",'
- en: 'phase: "Phase One: Avengers Assembled", category_name: "Action",'
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: 'phase: "第一阶段：复仇者联盟", category_name: "动作",'
- en: 'release_year: 2015...}'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: 'release_year: 2015...}'
- en: 'imdbapi.service.js:30 filter Object {movie_id: 4, title: "Thor", phase:'
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:30 filter Object {movie_id: 4, title: "雷神", phase:'
- en: '"Phase One: Avengers Assembled", category_name: "Action",'
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: '"第一阶段：复仇者联盟", category_name: "动作",'
- en: 'release_year: 2011...}'
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: 'release_year: 2011...}'
- en: 'imdbapi.service.js:30 filter Object {movie_id: 5, title: "Captain'
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:30 filter Object {movie_id: 5, title: "美国队长"'
- en: 'America", phase: "Phase One: Avengers Assembled", category_name:'
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: 'America", phase: "第一阶段：复仇者联盟", category_name:'
- en: '"Action", release_year: 2011...}'
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: '"动作", release_year: 2011...}'
- en: 'imdbapi.service.js:30 filter Object {movie_id: 6, title: "Avengers,'
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:30 filter Object {movie_id: 6, title: "复仇者联盟'
- en: 'The", phase: "Phase One: Avengers Assembled", category_name: "Science'
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: 'The", phase: "第一阶段：复仇者联盟", category_name: "科幻'
- en: 'Fiction", release_year: 2012...}'
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: 'Fiction", release_year: 2012...}'
- en: 'imdbapi.service.js:30 filter Object {movie_id: 7, title: "Iron Man 3",'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:30 filter Object {movie_id: 7, title: "钢铁侠3",'
- en: 'phase: "Phase Two", category_name: "Action", release_year: 2015...}'
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 'phase: "第二阶段", category_name: "动作", release_year: 2015...}'
- en: 'imdbapi.service.js:30 filter Object {movie_id: 8, title: "Thor: The'
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:30 filter Object {movie_id: 8, title: "Thor: The'
- en: 'Dark World", phase: "Phase Two", category_name: "Science Fiction",'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 'Dark World", phase: "Phase Two", category_name: "Science Fiction",'
- en: 'release_year: 2013...}'
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: 'release_year: 2013...}'
- en: 'imdbapi.service.js:30 filter Object {movie_id: 9, title: "Captain'
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:30 filter Object {movie_id: 9, title: "Captain'
- en: 'America: The Winter Soldier", phase: "Phase Two", category_name:'
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 'America: The Winter Soldier", phase: "Phase Two", category_name:'
- en: '"Action", release_year: 2014...}'
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: '"Action", release_year: 2014...}'
- en: 'imdbapi.service.js:30 filter Object {movie_id: 10, title: "Guardians of'
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:30 filter Object {movie_id: 10, title: "Guardians of'
- en: 'the Galaxy", phase: "Phase Two", category_name: "Science Fiction",'
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: 'the Galaxy", phase: "Phase Two", category_name: "Science Fiction",'
- en: 'release_year: 2014...}'
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 'release_year: 2014...}'
- en: 'imdbapi.service.js:30 filter Object {movie_id: 11, title: "Avengers:'
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:30 filter Object {movie_id: 11, title: "Avengers:'
- en: 'Age of Ultron", phase: "Phase Two", category_name: "Science Fiction",'
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: 'Age of Ultron", phase: "Phase Two", category_name: "Science Fiction",'
- en: 'release_year: 2015...}'
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: 'release_year: 2015...}'
- en: 'imdbapi.service.js:30 filter Object {movie_id: 12, title: "Ant-Man",'
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:30 filter Object {movie_id: 12, title: "Ant-Man",'
- en: 'phase: "Phase Two", category_name: "Science Fiction", release_year:'
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: 'phase: "Phase Two", category_name: "Science Fiction", release_year:'
- en: 2015...}
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: 2015...}
- en: 'imdbapi.service.js:30 filter Object {movie_id: 13, title: "Captain'
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:30 filter Object {movie_id: 13, title: "Captain'
- en: 'America: Civil War", phase: "Phase Three", category_name: "Science'
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 'America: Civil War", phase: "Phase Three", category_name: "Science'
- en: 'Fiction", release_year: 2016...}'
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: 'Fiction", release_year: 2016...}'
- en: 'imdbapi.service.js:30 filter Object {movie_id: 14, title: "Doctor'
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:30 filter Object {movie_id: 14, title: "Doctor'
- en: 'Strange", phase: "Phase Two", category_name: "Science Fiction",'
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: 'Strange", phase: "Phase Two", category_name: "Science Fiction",'
- en: 'release_year: 2016...}'
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: 'release_year: 2016...}'
- en: 'imdbapi.service.js:35 map Object {movie_id: 1, title: "Iron Man",'
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:35 map Object {movie_id: 1, title: "Iron Man",'
- en: 'phase: "Phase One: Avengers Assembled", category_name: "Action",'
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: 'phase: "Phase One: Avengers Assembled", category_name: "Action",'
- en: 'release_year: 2015...}'
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: 'release_year: 2015...}'
- en: 'angular-observable.component.js:23 Component Movie {_movie_id: 1,'
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: 'angular-observable.component.js:23 Component Movie {_movie_id: 1,'
- en: '_title: "Iron Man", _phase: "Phase One: Avengers Assembled",'
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: '_title: "Iron Man", _phase: "Phase One: Avengers Assembled",'
- en: '_category_name: "Action", _release_year: 2015...}'
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: '_category_name: "Action", _release_year: 2015...}'
- en: '[PRE32]'
  id: totrans-524
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: public fetchByField(field:MovieFields, value:any):Promise<Movie[]>{
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: public fetchByField(field:MovieFields, value:any):Promise<Movie[]>{
- en: console.log('fetchByField', field, value);
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: console.log('fetchByField', field, value);
- en: return this.http.get(this.moviesUrl)
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: return this.http.get(this.moviesUrl)
- en: .map(res => res.json().movies.filter(
  id: totrans-528
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: .map(res => res.json().movies.filter(
- en: (movie)=>{
  id: totrans-529
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: (movie)=>{
- en: return (movie[MovieFields[field]] === value)
  id: totrans-530
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: return (movie[MovieFields[field]] === value)
- en: '})'
  id: totrans-531
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '})'
- en: )
  id: totrans-532
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: )
- en: .toPromise()
  id: totrans-533
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: .toPromise()
- en: /**
  id: totrans-534
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: /**
- en: '* Map the JSON movie items to the Movie Model'
  id: totrans-535
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '* Map the JSON movie items to the Movie Model'
- en: '*/'
  id: totrans-536
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*/'
- en: .then((jsonMovies:any[]) => {
  id: totrans-537
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: .then((jsonMovies:any[]) => {
- en: console.log("map", jsonMovies);
  id: totrans-538
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: console.log("map", jsonMovies);
- en: let movies:Movie[] = [];
  id: totrans-539
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: let movies:Movie[] = [];
- en: for (var i = 0; i < jsonMovies.length; i++) {
  id: totrans-540
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: for (var i = 0; i < jsonMovies.length; i++) {
- en: movies.push(
  id: totrans-541
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: movies.push(
- en: new Movie(
  id: totrans-542
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: new Movie(
- en: jsonMovies[i].movie_id,
  id: totrans-543
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: jsonMovies[i].movie_id,
- en: jsonMovies[i].title,
  id: totrans-544
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: jsonMovies[i].title,
- en: jsonMovies[i].phase,
  id: totrans-545
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: jsonMovies[i].phase,
- en: jsonMovies[i].category_name,
  id: totrans-546
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: jsonMovies[i].category_name,
- en: jsonMovies[i].release_year,
  id: totrans-547
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: jsonMovies[i].release_year,
- en: jsonMovies[i].running_time,
  id: totrans-548
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: jsonMovies[i].running_time,
- en: jsonMovies[i].rating_name,
  id: totrans-549
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: jsonMovies[i].rating_name,
- en: jsonMovies[i].disc_format_name,
  id: totrans-550
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: jsonMovies[i].disc_format_name,
- en: jsonMovies[i].number_discs,
  id: totrans-551
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: jsonMovies[i].number_discs,
- en: jsonMovies[i].viewing_format_name,
  id: totrans-552
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: jsonMovies[i].viewing_format_name,
- en: jsonMovies[i].aspect_ratio_name,
  id: totrans-553
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: jsonMovies[i].aspect_ratio_name,
- en: jsonMovies[i].status,
  id: totrans-554
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: jsonMovies[i].status,
- en: jsonMovies[i].release_date,
  id: totrans-555
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: jsonMovies[i].release_date,
- en: jsonMovies[i].budget,
  id: totrans-556
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: jsonMovies[i].budget,
- en: jsonMovies[i].gross,
  id: totrans-557
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: jsonMovies[i].gross,
- en: jsonMovies[i].time_stamp
  id: totrans-558
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: jsonMovies[i].time_stamp
- en: )
  id: totrans-559
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: )
- en: )
  id: totrans-560
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: )
- en: '}'
  id: totrans-561
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: return movies;
  id: totrans-562
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: return movies;
- en: '});'
  id: totrans-563
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '});'
- en: '}'
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE33]'
  id: totrans-565
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: this.IMDBAPI.fetchByField(MovieFields.release_year, 2015).then(
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: this.IMDBAPI.fetchByField(MovieFields.release_year, 2015).then(
- en: value => {
  id: totrans-567
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: value => {
- en: this.movies = value;
  id: totrans-568
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: this.movies = value;
- en: console.log("Component", value)
  id: totrans-569
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: console.log("Component", value)
- en: '},'
  id: totrans-570
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '},'
- en: error => this.error = true
  id: totrans-571
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: error => this.error = true
- en: )
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '[PRE34]'
  id: totrans-573
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: /**
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: /**
- en: '* Private member storing pending promises'
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: '* Private member storing pending promises'
- en: '*/'
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: '*/'
- en: private promises:Promise<Movie[]>[] = [];
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: private promises:Promise<Movie[]>[] = [];
- en: /**
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: /**
- en: '* Register one promise for field/value. Returns this'
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: '* Register one promise for field/value. Returns this'
- en: '* for chaining that is'
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: '* for chaining that is'
- en: '*'
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: '*'
- en: '*  byField(Y, X)'
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: '*  byField(Y, X)'
- en: '* .or(...)'
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: '* .or(...)'
- en: '* .fetch()'
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: '* .fetch()'
- en: '*'
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: '*'
- en: '* @param  {MovieFields} field'
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: '* @param  {MovieFields} field'
- en: '* @param  {any}         value'
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: '* @param  {any}         value'
- en: '* @return {IMDBAPIService}'
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: '* @return {IMDBAPIService}'
- en: '*/'
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: '*/'
- en: public byField(field:MovieFields, value:any):IMDBAPIService{
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: public byField(field:MovieFields, value:any):IMDBAPIService{
- en: this.promises.push(this.fetchByField(field, value));
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
  zh: this.promises.push(this.fetchByField(field, value));
- en: return this;
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
  zh: return this;
- en: '}'
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: /**
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
  zh: /**
- en: '* Convenient method to make the calls more readable, that is'
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: '* 便于使调用更容易阅读的方便方法，即'
- en: '*'
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: '*'
- en: '*  byField(Y, X)'
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
  zh: '*  byField(Y, X)'
- en: '* .or(...)'
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: '* .or(...)'
- en: '* .fetch()'
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
  zh: '* .fetch()'
- en: '*'
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
  zh: '*'
- en: '* instead of'
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: '* instead of'
- en: '*'
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
  zh: '*'
- en: '*  byField(Y, X)'
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
  zh: '*  byField(Y, X)'
- en: '* .byField(...)'
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
  zh: '* .byField(...)'
- en: '* .fetch()'
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
  zh: '* .fetch()'
- en: '*'
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
  zh: '*'
- en: '* @param  {MovieFields} field'
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: '* @param  {MovieFields} field'
- en: '* @param  {any}         value'
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
  zh: '* @param  {any}         value'
- en: '* @return {IMDBAPIService}'
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
  zh: '* @return {IMDBAPIService}'
- en: '*/'
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
  zh: '*/'
- en: public or(field:MovieFields, value:any):IMDBAPIService{
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
  zh: public or(field:MovieFields, value:any):IMDBAPIService{
- en: return this.byField(field, value);
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
  zh: return this.byField(field, value);
- en: '}'
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: /**
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
  zh: /**
- en: '* Join all the promises and return the aggregated result.'
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
  zh: '* 加入所有的promises并返回聚合结果。'
- en: '*'
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
  zh: '*'
- en: '* @return {Promise<Movie[]>}'
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
  zh: '* @return {Promise<Movie[]>}'
- en: '*/'
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
  zh: '*/'
- en: public fetch():Promise<Movie[]>{
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
  zh: public fetch():Promise<Movie[]>{
- en: return Promise.all(this.promises).then((results:any) => {
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
  zh: return Promise.all(this.promises).then((results:any) => {
- en: //result is an array of movie arrays. One array per
  id: totrans-621
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: //result is an array of movie arrays. One array per
- en: //promise. We need to flatten it.
  id: totrans-622
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: //promise. We need to flatten it.
- en: return [].concat.apply([], results);
  id: totrans-623
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: return [].concat.apply([], results);
- en: '});'
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: '}'
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE35]'
  id: totrans-626
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: this.IMDBAPI.byField(MovieFields.release_year, 2015)
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
  zh: this.IMDBAPI.byField(MovieFields.release_year, 2015)
- en: .or(MovieFields.release_year, 2014)
  id: totrans-628
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: .or(MovieFields.release_year, 2014)
- en: .or(MovieFields.phase, "Phase Two")
  id: totrans-629
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: .or(MovieFields.phase, "Phase Two")
- en: .fetch()
  id: totrans-630
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: .fetch()
- en: .then(
  id: totrans-631
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: .then(
- en: value => {
  id: totrans-632
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: value => {
- en: this.movies = value;
  id: totrans-633
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: this.movies = value;
- en: console.log("Component", value)
  id: totrans-634
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: console.log("Component", value)
- en: '},'
  id: totrans-635
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '},'
- en: error => this.error = true
  id: totrans-636
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: error => this.error = true
- en: );
  id: totrans-637
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: );
- en: '```'
  id: totrans-638
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: This is very simple to read and understand while keeping all the asynchronism
    capability of Angular.
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
  zh: 这个非常简单易懂，保持了Angular的所有异步能力。
- en: 'The code for the promises is available here: [http://bit.ly/mastering-angular2-chap7-part3](http://bit.ly/mastering-angular2-chap7-part3).'
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
  zh: 针对promises的代码可在此处找到：[http://bit.ly/mastering-angular2-chap7-part3](http://bit.ly/mastering-angular2-chap7-part3)。
- en: Summary
  id: totrans-641
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Summary
- en: In this chapter, we took advantage of asynchronous programming with Angular
    by using `Observable` and `Promise`.
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章节中，我们利用了Angular的异步编程，使用了`Observable`和`Promise`。
- en: More specifically, we learned how to implement the `Observable` pattern in `typescript`,
    and then took advantage of the Angular framework, while still using the `Observable`
    characteristics.
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
  zh: 更具体地，我们学习了如何在`typescript`中实现`Observable`模式，然后利用了Angular框架，同时仍然使用`Observable`的特性。
- en: Also, we saw how to take advantage of `Promises` in Angular and built a basic,
    yet extensible JSON API for querying the Marvel Cinematic Universe.
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们看到如何在Angular中利用`Promises`，并构建了一个基本但可扩展的用于查询漫威电影宇宙的JSON API。
- en: In the next chapter, we will build upon this example to create advanced forms.
    Indeed, we will create what's required to add, remove, and update movies of the
    Marvel Cinematic Universe. In addition, we will also learn about FormBuilder,
    control groups, and custom validations.
  id: totrans-645
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将在此示例的基础上构建高级表单。实际上，我们将创建添加、删除和更新漫威电影宇宙电影所需的内容。此外，我们还将学习关于FormBuilder，控制组和自定义验证。
