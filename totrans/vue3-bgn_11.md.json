["```js\ngit switch CH11\n```", "```js\nimport { defineStore } from 'pinia'\nexport const useCounterStore = defineStore('counter', {\n  state: () => ({ count: 0, name: 'Eduardo' }),\n  getters: {\n    doubleCount: (state) => state.count * 2,\n  },\n  actions: {\n    increment() {\n      this.count++\n    },\n  },\n})\n```", "```js\nconst counter = useCounterStore();\n```", "```js\ncounter.count\ncounter.name\n```", "```js\ncounter.doubleCount\ncounter.increment()\n```", "```js\n    const closed = ref(false);\n    ```", "```js\n    const toggleSidebar = () => {\n    ```", "```js\n      closed.value = !closed.value;\n    ```", "```js\n      window.localStorage.setItem(\"sidebar\", closed.value);\n    ```", "```js\n    }\n    ```", "```js\n    onBeforeMount( () => {\n    ```", "```js\n      const sidebarState = window.localStorage.getItem(\"sidebar\");\n    ```", "```js\n      closed.value = sidebarState === \"true\";\n    ```", "```js\n    });\n    ```", "```js\nimport { defineStore } from 'pinia'\nexport const useSidebarStore = defineStore('sidebar', {\n  state: () => ({}),\n  getters: {},\n  actions: {},\n})\n```", "```js\nimport { defineStore } from 'pinia'\nexport const useSidebarStore = defineStore('sidebar', {\n  state: () => ({ closed: true }),\n  getters: {},\n  actions: {\n    toggleSidebar() {\n      this.closed = !this.closed\n      localStorage.setItem('sidebar', this.closed)\n    },\n    loadSidebarFromLocalStorage() {\n      const closed = localStorage.getItem('sidebar')\n      this.closed = closed === 'true'\n    }\n  },\n})\n```", "```js\nimport IconRightArrow from '../icons/IconRightArrow.vue'\nimport { useSidebarStore } from '../../stores/sidebar';\nconst currentTime = ref(new Date().toLocaleTimeString());\nconst router = useRouter();\nconst closed = ref(false);\nconst sidebarStore = useSidebarStore();\n```", "```js\nconst toggleSidebar = () => {\n  closed.value = !closed.value;\n  window.localStorage.setItem(\"sidebar\", closed.value);\n}\nconst onUpdateTimeClick = () => {\n  currentTime.value = new Date().toLocaleTimeString();\n};\nconst navigateToPrivacy = (event) => {\n  event.preventDefault();\n  console.log(\"Run a side effect\");\n  router.push(\"privacy\");\n}\nonBeforeMount ( () => {\n  const sidebarState = window.localStorage.getItem(\"sidebar\");\n    closed.value = sidebarState === \"true\";\n  sidebarStore.loadSidebarFromLocalStorage();\n});\n```", "```js\n<template>\n  <aside :class=\"{ 'sidebar__closed': sidebarStore.closed}\">\n    <template v-if=\"sidebarStore.closed\">\n      <IconRightArrow class=\"sidebar__icon\" @click=\"sidebarStore.toggleSidebar\" />\n    </template>\n    <template v-else>\n      <h2>Sidebar</h2>\n      <IconLeftArrow class=\"sidebar__icon\" @click=\"sidebarStore.toggleSidebar\" />\n      <TheButton>Create post</TheButton>\n```", "```js\n<template>\n  <header>\n    <TheLogo />\n    <h1>Companion app</h1>\n    <span>\n      <a href=\"#\">Welcome {{ username }}</a>\n      <IconSettings class=\"icon\" />\n      <IconFullScreen class=\"icon\" @click=\"sidebarStore.toggleSidebar\" />\n    </span>\n  </header>\n</template>\n<script setup>\nimport { ref } from 'vue';\nimport TheLogo from '../atoms/TheLogo.vue';\nimport IconSettings from '../icons/IconSettings.vue';\nimport IconFullScreen from '../icons/IconFullScreen.vue';\nimport { useSidebarStore } from '../../stores/sidebar';\nconst username = ref(\"Zelig880\");\nconst sidebarStore = useSidebarStore();\n</script>\n```", "```js\nstate: () => (\n  { closed: true }\n),\ngetters: {\n  friendlyState(state) {\n    return state.closed ? \"closed\" : \"open\";\n  }\n},\nactions: {\n...\n```", "```js\n<template>\n<header>\n  <TheLogo />\n  <h1>Companion app</h1>\n  <span>\n    <a href=\"#\">Welcome {{ username }}</a>\n    <IconSettings class=\"icon\" />\n    <IconFullScreen class=\"icon\" @click=\"sidebarStore.toggleSidebar\" />\n    <p>Sidebar state: {{ sidebarStore.friendlyState }}</p>\n  </span>\n</header>\n</template>\n<script setup>\nimport { ref } from 'vue';\nimport TheLogo from '../atoms/TheLogo.vue';\nimport IconSettings from '../icons/IconSettings.vue';\nimport IconFullScreen from '../icons/IconFullScreen.vue';\nimport { useSidebarStore } from '../../stores/sidebar';\nconst username = ref(\"Zelig880\");\nconst sidebarStore = useSidebarStore();\n</script>\n```", "```js\nimport { defineStore } from 'pinia'\nexport const usePostsStore = defineStore('posts', {\n  state: () => (\n    { posts: [], page: 0 }\n  ),\n  actions: {\n    fetchPosts(newPage = false) {\n      if(newPage) {\n        this.page++;\n      }\n      const baseUrl = \"https://dummyapi.io/data/v1\";\n      fetch(`${baseUrl}/post?limit=5&page=${this.page}`, {\n        \"headers\": {\n          \"app-id\": \"1234567890\"\n        }\n      })\n        .then( response => response.json())\n        .then( result => {\n          this.posts.push(...result.data);\n        })\n    },\n    removePost(postIndex) {\n      this.posts.splice(postIndex, 1);\n    }\n  },\n})\n```", "```js\n    import { usePostsStore } from '../../stores/posts';\n    ```", "```js\n    import { storeToRefs } from 'pinia'\n    ```", "```js\n    const postsStore = usePostsStore();\n    ```", "```js\n    const { posts } = storeToRefs(postsStore);\n    ```", "```js\n    const { fetchPosts, removePost } = postsStore;\n    ```", "```js\n    watch(\n    ```", "```js\n      posts.value,\n    ```", "```js\n      (newValue) => {\n    ```", "```js\n        if( newValue.length <= 3 ) {\n    ```", "```js\n          fetchPosts(true);\n    ```", "```js\n        }\n    ```", "```js\n      }\n    ```", "```js\n    )\n    ```", "```js\n<template>\n  <SocialPost\n    v-for=\"(post, index) in posts\"\n    :username=\"post.owner.firstName\"\n    :id=\"post.id\"\n    :avatarSrc=\"post.image\"\n    :post=\"post.text\"\n    :likes=\"post.likes\"\n    :key=\"post.id\"\n    @delete=\"removePost(index)\"\n  ></SocialPost>\n</template>\n<script setup>\nimport { watch } from 'vue';\nimport SocialPost from '../molecules/SocialPost.vue'\nimport { usePostsStore } from '../../stores/posts';\nimport { storeToRefs } from 'pinia'\nconst postsStore = usePostsStore();\nconst { posts } = storeToRefs(postsStore);\nconst { fetchPosts, removePost } = postsStore;\nwatch(\n  posts.value,\n  (newValue) => {\n    if( newValue.length <= 3 ) {\n      fetchPosts(true);\n    }\n  }\n)\nfetchPosts();\n</script>\n```", "```js\naddPost(postText) {\n  const post = generatePostStructure(postText);\n  this.posts.unshift(post);\n}\n```", "```js\n<script setup>\nimport TheButton from '../atoms/TheButton.vue';\nimport { usePostsStore } from '../../stores/posts';\nimport { onMounted, ref } from 'vue';\nconst postsStore = usePostsStore();\nconst { addPost } = postsStore;\nconst textareaRef = ref(null);\nconst createPostForm = ref(null);\nconst createPostHandler = (event) => {\n  event.preventDefault();\n  if(createPostForm.value.reportValidity()){\n    addPost(textareaRef.value.value);\n  };\n}\n...\n```"]