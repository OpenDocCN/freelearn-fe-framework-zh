- en: '*Chapter 4*: Building a Server-Side-Rendered Community Feed Using Next.js'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, you've learned how React applications are typically **Single-Page Applications**
    (**SPAs**) and can be kickstarted using Create React App. This means the application
    is rendered on the client side, making it load in the browser when the user visits
    your application. But did you know React also supports **Server-Side Rendering**
    (**SSR**), as you might remember from back in the old days when code only rendered
    from a server?
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you'll learn how to create an application that has components
    dynamically loaded from the server instead of the browser. To enable SSR, we'll
    be using Next.js instead of Create React App. Next.js is a framework for React
    applications and adds additional features to React. If you're interested in **Search
    Engine Optimization** (**SEO**), SSR comes with the advantage that we can add
    metadata to the application so it can be better indexed by search engines.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Next.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Server-side rendering
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SEO in React
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Project overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will create a community feed application using Next.js that
    supports SSR and therefore is loaded from the server rather than the browser.
    Also, the application is optimized for search engines.
  prefs: []
  type: TYPE_NORMAL
- en: The build time is 2 hours.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The complete source code can also be found on GitHub: [https://github.com/PacktPublishing/React-Projects-Second-Edition/tree/main/Chapter04](https://github.com/PacktPublishing/React-Projects-Second-Edition/tree/main/Chapter04).
    Also, this project uses the publicly available Stack Overflow API to fill the
    application with data. This is done by fetching questions that are posted to Stack
    Overflow. More information about this API can be found at: [https://api.stackexchange.com/docs/](https://api.stackexchange.com/docs/).'
  prefs: []
  type: TYPE_NORMAL
- en: Community feed application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, you'll build a community feed application with Next.js that
    supports SSR. Next.js goes beyond the functionalities of Create React App, by
    delivering a framework to build React applications quickly. It has built-in features
    for routing, SEO, SSR, and much more, as you'll learn in this chapter. In this
    community feed, you can see an overview of recent questions on Stack Overflow
    that have the `reactjs` tag, and you can click on them to see more information
    and the answers.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Next.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In previous chapters, we used Create React App to run a React application. Although
    Create React App is a good starting point for most React applications, it doesn't
    support SSR. Luckily, Next.js does offer this feature as it's considered a framework
    for React. In this chapter, we'll be using the latest stable version of Next.js,
    which is version 12.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Next.js
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To set up Next.js, we run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You'll be asked to select a template, which is either the default starter app
    or a template that is created by the community. After selecting the default template,
    the `react`, `react-dom`, and `next` libraries will be installed, among others.
  prefs: []
  type: TYPE_NORMAL
- en: 'After the installation is finished, we can move into the new `chapter-4` directory
    and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This will start the new Next.js application that will become available at `http://localhost:3000`.
    The default starter app will look something like the following application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.1 – The initial Next.js application](img/Figure_4.1_B17390.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.1 – The initial Next.js application
  prefs: []
  type: TYPE_NORMAL
- en: In this application, you can not only see what a Next.js application looks like
    but also find useful links to more sources to learn about Next.js and examples
    of how to deploy it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The application structure for a Next.js project is slightly different from
    how we structured our Create React App in the preceding chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding structure, you can see that there is again a directory called
    `pages` that will contain React components that will serve as a page. But different
    from Create React App, we don't need to set up `react-router` to serve the pages.
    Instead, Next.js automatically renders every component in that directory as a
    page. In this directory, we also find the `hello.js` file in the `api` directory.
    Next.js can also be used to create API endpoints, which we'll explore more in
    [*Chapter 7*](B17390_07_Final_NM_ePub.xhtml#_idTextAnchor090), *Build a Full Stack
    E-Commerce Application with Next.js and GraphQL*. Also, the CSS files for our
    components are put in the `styles` directory, where you'll find the `globals.css`
    file with global styling and `Home.module.css` with styling for a specific component.
  prefs: []
  type: TYPE_NORMAL
- en: Adding styled-components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before we set up the routing, let''s add `styled-components` to the project,
    which we''ve also used in the previous chapters. For this, we need to install
    `styled-components` by running the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This will add the packages to our project so we can use them to create and style
    reusable components.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Next.js uses the `styles` directory to store global and component-specific CSS
    files for styling. As we're using `styled-components` for styling instead, we
    don't have to add any new CSS files to this directory. If you're not using a library
    for styling with CSS-in-JS, you can place both global and component-level styling
    files in the `styles` directory instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'Setting up `styled-components` in Next.js is done slightly differently in comparison
    to Create React App:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In Next.js, a `Document` component wraps the `html`, `body`, and `head` tags
    and runs them through a so-called `renderPage` method to allow for SSR. We need
    to overwrite this `Document` component from a new file called `_document.js` in
    the `pages` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code creates an instance of `ServerStyleSheet`, which `styled-components`
    uses to retrieve any styles found in all the components in our application. This
    is needed to create a stylesheet that can be injected into our server-side-rendered
    application later on. The `sheets.collectStyles` method collects all of the styles
    from our components, while `sheets.getElement()` generates the `style` tag, which
    we'll need to return as a prop called `styles`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To support SSR for `styled-components`, we also need to configure the `next.config.json`
    file in the root of the project. This file needs to hold the following configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'As with Next.js, we don''t have a global entry file for the application. We
    need a different place to add our global styling and components that we want to
    display on all pages, such as a header. These styling and component must be added
    to `_app.js` in our `pages` directory, which returns the component for the page
    that we''re currently visiting and any other component or styling that we return:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding file, we've deleted the line that imports the `styles/globals.css`
    file and replaced it with styling in `styled-components`. This means you can also
    safely delete the `globals.css` file from the `styles` directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'This global styling is now present on all pages that we''ll create later in
    this Next.js application. But for starters, let''s create a `Header` component
    by adding a file called `Header.js` in a new directory called `components`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This component will return a header that will be used on every page, but we
    also need to add it to `_app.js` to be effective:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You'll see what the headers look like in the next section when we add our first
    route to the application.
  prefs: []
  type: TYPE_NORMAL
- en: We've added multiple new files that have global styling with `styled-components`,
    which supports SSR, and also a directory that holds reusable components.
  prefs: []
  type: TYPE_NORMAL
- en: With both Next.js and `styled-components` set up, we are ready to start developing
    with Next.js in the next section of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Routing with Next.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the `react-router` package, we can add declarative routing to any React
    application, but you need to set up components that define which routes you want
    to add. With Next.js, the filesystem is being used for routing, starting at the
    `pages` directory. Every file and directory in `pages` can represent a route.
    You can check this by visiting the project at `http://localhost:3000`, where the
    contents of `index.js` are being rendered.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we, for example, wanted to add the new `/questions` route to the application,
    we''d need to create either a new file called `questions.js` or a directory called
    `questions` with an `index.js` file in `pages`. Let''s go with the second option
    and add the following code to this file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This new route has now become available at `http://localhost:3000/questions`
    where only a title is being rendered. As mentioned in the introduction of this
    chapter, we'll be using the Stack Overflow API to get the data for this application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before retrieving the data from the endpoint, we also need to create a component
    to render this data in. To do so, we need to create a new component that will
    be used to display a question. This new component can be created in a file called
    `Card.js` in the `components` directory with the following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'With this component in place, let''s retrieve the data from the Stack Overflow
    API. From this API, we want to retrieve all the questions that are posted with
    the `reactjs` tag, using the following endpoint:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: You can find more information on this at [https://api.stackexchange.com/docs/questions#order=desc&sort=hot&tagged=reactjs&filter=default&site=stackoverflow&run=true](https://api.stackexchange.com/docs/questions#order=desc&sort=hot&tagged=reactjs&filter=default&site=stackoverflow&run=true).
  prefs: []
  type: TYPE_NORMAL
- en: This returns an array of objects under the `items` field, and from every object,
    we can get information about a question, such as the title and the number of answers.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can retrieve the data from this endpoint and display it on the `/questions`
    route by making some additions to the `index.js` file in the `questions` directory
    in `pages`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to add local state variables to the `Questions` component and
    add a `useEffect` Hook to fetch the data from the Stack Overflow API:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After adding the data fetching logic, we need to add some more code to display
    the fields from the API on our page. We''re passing this data to our `Card` component
    to render it on the page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you now visit the `/questions` route on `http://localhost:3000/questions`,
    you can see that a list of questions is being rendered together with the Header
    component, as you can see in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.2 – Our application with Stack Overflow data](img/Figure_4.2_B17390.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.2 – Our application with Stack Overflow data
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll be handling SSR later, but before that, we need to add routes that support
    parameters. To create a route that supports a parameter, we need to create a file
    created in the same manner as the Questions component. The new route will display
    a specific question, information that we can also get from the Stack Overflow
    API. Again, the filesystem will be leading in creating the route:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a new route with a parameter, we need to create a file called `[id].js`
    inside the `questions` directory. This file has the parameter name inside square
    brackets, and in this file, we can use a Hook from the Next.js routing library
    to get this parameter value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: By visiting `http://localhost:3000/questions/123`, you can see that the parameter
    that we've added has become visible on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `QuestionDetail` component, we can import the `Card` component and we
    can use the Stack Overflow API to fetch data for a specific question. For this,
    we need to add both data fetching logic and elements to render the data to the
    `[id].js` file in the `questions` directory that we created in the previous step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After adding the data fetching logic, the `Card` component can be returned
    with the question information passed to it as props:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The API endpoint that gets a question by its identifier returns an array, as
    it expects multiple IDs at once. Therefore, we need to get the first item that's
    returned by the endpoint as we only provide one ID.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get to a specific question, you need to have the ID of the question. This
    is best done from the `Questions` component where we can import a `Link` component
    from the routing library of Next.js. Every `Link` component needs to wrap a component
    that''s able to do routing, so we''ll add a styled `a` element inside it. Also,
    the elements used to display the questions will be replaced by the `Card` component
    that we created before:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As you might notice when visiting `http://localhost:3000/questions`, the `Card`
    components are now clickable and link to a new page showing the question you've
    just clicked on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we want the basic `/` route to also show the `Questions` component.
    We can do this by importing this component inside `/pages/index.js` and having
    it returned from there:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The application will now return a list of questions on both the `/` and `/questions`
    routes, and is able to display a specific question when you click on any of the
    questions from these routes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.3 – Our application with basic styling and dynamic routes'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.3_B17390.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.3 – Our application with basic styling and dynamic routes
  prefs: []
  type: TYPE_NORMAL
- en: Besides routing using parameters, we can also add routing using a query string
    for features such as pagination. This will be shown in the next part of this section,
    about routing with Next.js.
  prefs: []
  type: TYPE_NORMAL
- en: Handling query strings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Being able to navigate to individual questions is only one piece of the cake
    when you want to add routing to a project, and pagination could be another one.
  prefs: []
  type: TYPE_NORMAL
- en: The Stack Overflow API already has support for pagination, which you can see
    if you look at the API response. The object that is being returned when you call
    the endpoint that is described on https://api.stackexchange.com/docs/questions#order=desc&sort=hot&tagged=reactjs&filter=default&site=stackoverflow&run=true
    has a field called `has_more`. If this field has the `true` value, you can request
    more questions by adding the `page` query string to the API request.
  prefs: []
  type: TYPE_NORMAL
- en: 'Just as we got the parameters from the URL with the `useRouter` Hook from Next.js,
    we can also get the query strings with this Hook. To add pagination to the `Questions`
    component, we need to make the following changes:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Questions` page component in `pages/questions/index.js`, we need to
    import the `useRouter` Hook and get the query strings from the URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `page` constant can then be appended to the endpoint to retrieve the questions
    from the Stack Overflow API:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can test whether this is working by changing the query string for `page`
    to different numbers, such as `http://localhost:3000/questions?page=1` or `http://localhost:3000/questions?page=3`.
    To make the application more user-friendly, let's add pagination buttons to the
    bottom of the page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `Pagination` component inside the `components` directory, which
    holds two `Link` components from Next.js. The component will display a link to
    the previous page if the current page number is above 1 and will also show a link
    to the next page if more pages are available:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We need to import this new `Pagination` component inside the `Questions` page
    component, but we also need to retrieve the value for `hasMore` from the Stack
    Overflow API:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Also, the `Pagination` component must be rendered at the end of the `Questions`
    component. Make sure to also pass the `currentPage` and `hasMore` props to the
    component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we want the user to not be able to navigate to a page that doesn''t
    exist. So, in the `Pagination` component, make the following changes to disable
    the previous or next button if there is no page available:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You have now implemented the parsing of the query string to dynamically change
    the route for your application. With the addition of the `Pagination` component,
    both the `/` and `/questions` routes will look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.4 – The application after adding pagination'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.4_B17390.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.4 – The application after adding pagination
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you'll explore another thing you can do with React in combination
    with Next.js, SRR, which enables you to serve your application from the server
    instead of rendering it at runtime.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling SSR
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using SSR can be helpful if you're building an application that needs to render
    very quickly or when you want certain information to be loaded before the web
    page is visible. Although most search engines are now able to render SPAs, this
    can still be an improvement, for example, if you want users to share your page
    on social media or when you want to enhance the performance of your application.
  prefs: []
  type: TYPE_NORMAL
- en: Fetching data server side with Next.js
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is no standard pattern to enable SSR for your React application, but luckily,
    Next.js supports multiple ways to do data fetching, such as dynamically from the
    client, server side on every request, or statically during build time. The first
    way is what we've done in this chapter so far and in this section, we'll be requesting
    our data server side on every request. For this, the Next.js `getServerSideProps`
    method will be used.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Next.js also offers the `getStaticProps` and `getStaticPaths` methods to generate
    the content of your application statically at build time. This is especially useful
    if your content doesn't change that often and you want to serve your website as
    fast as possible.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the beginning of this chapter, we already set up `styled-components` in
    such a way that it will support SSR, so we just have to alter how we do data fetching
    to enable it for the entire application. Therefore, we need to refactor our `Questions`
    component so that it will get the data from the Stack Overflow API on the server
    side instead of dynamically from the client:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Questions` page component, we no longer have to import the `useState`
    and `useEffect` Hooks to set up state management and data fetching, so these can
    be removed. The `useRouter` Hook from Next.js can also be deleted:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Instead, the `getServerSideProps` method needs to be used to do the data fetching
    on the server side. As the data is then not retrieved by the client, we no longer
    need to set local state variables or life cycles to keep track of changes in the
    data. The data will already be there once we load our React application in the
    browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this method, the value for `page` is retrieved from a constant called `context`,
    which is passed to `getServerSideProps` by Next.js and gets the page from the
    router. Using this value, we can do the data fetching in the same way as we did
    before in the life cycle. Instead of storing the data in local state variables,
    we're now passing it as props to the `Questions` component by returning it from
    the method we created.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our `Questions` page component can use these props to render our list of questions
    in the browser. As the data is retrieved from the server side before passing the
    application to the client, we no longer have to set a loading indicator to wait
    for the data to be fetched:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can check this by going to `http://localhost:3000/questions` and seeing
    that the questions are no longer being retrieved on the client side but on the
    server side. In the **Network** tab, there''s no request made to the Stack Overflow
    API, while the questions are being rendered in the browsers. You can also verify
    this by inspecting the page source:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.5 – SSR application using Next.js'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.5_B17390.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.5 – SSR application using Next.js
  prefs: []
  type: TYPE_NORMAL
- en: 'However, the `Questions` page component is also imported in `pages/index.js`
    and returned there. But opening our main `/` route at `http://localhost:3000/`
    doesn''t show any questions. This is because this file doesn''t have a `getServerSideProps`
    to get the data. Therefore, we need to create this method in `pages/index.js`
    as well and have it return the method that we can import from `pages/questions/index.js`
    so that we don''t have to duplicate the data fetching logic. The `Home` component
    in this file can then get the data from the props and pass it to the `Questions`
    component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: After making this change, both the `/` and `/questions` routes will have SSR
    enabled. Another advantage of SSR is that your application can be discovered by
    search engines more effectively. In the next part of this section, you'll add
    the tags that make your application discoverable by these engines.
  prefs: []
  type: TYPE_NORMAL
- en: Adding head tags for SEO
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Assuming you want your application to be indexed by search engines, you need
    to set head tags for the crawlers to identify the content on your page. This is
    something you want to do dynamically for each route, as each route will have different
    content.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next.js can define the head tags in any component that is rendered by your
    application by importing `Head` from `next/head`. If nested, the lowest definition
    of a `Head` component in the component tree will be used. That''s why we can create
    a `Head` component in our `Header` component for all routes and in each of the
    components that is being rendered on a route:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the `Head` component in the `components/Header.js` file, and create
    a `Head` component that sets `title` and a meta description:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Also, create a `Head` component in `pages/questions/index.js` that only sets
    a title for this route, so it will use the meta description of the `Header` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Do the same for the `pages/questions/[id].js` file, where you can also take
    the title of the question to make the page title more dynamic:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: These head tags will now be used when you're running your application on both
    the server and the client side, making your application more suitable for being
    indexed by search engines, which improves your SEO.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you've learned how to use Next.js as an alternative to Create
    React App. Next.js is a framework to create React applications, without having
    to add configuration for compiling and building your code or to handle features
    such as routing and data fetching. The project you created in this chapter supports
    SSR, as this is built in by Next.js. Also, we've added dynamic head tags to the
    application for SEO purposes.
  prefs: []
  type: TYPE_NORMAL
- en: After completing this chapter, you must already feel like an expert with React!
    The next chapter will take your skill to the next level as you'll learn how to
    handle state management using the context API. With the context API, you can share
    the state and data between multiple components in your application, no matter
    whether they're direct children of the parent component or not.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For more information on Next.js, you can refer to [https://nextjs.org/docs/](https://nextjs.org/docs/).
  prefs: []
  type: TYPE_NORMAL
