- en: Chapter 7. Integrating Native Modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far you've seen that React Native contains a large amount of functionality
    right out of the box. It provides an easy way for you to use a wide variety of
    native features via JavaScript, but sometimes you may need something that isn't
    yet covered by the built-in React Native components. Luckily, React Native is
    fully extensible via Native Modules. Thanks to a very active community, there
    is a growing list of custom components that are filling in the gaps. In this chapter,
    we'll use one of those third-party Native Modules to add camera support to our
    React Notes application.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing the custom React Native camera module using `npm`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a `CameraScreen` and camera component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saving captured images to disk
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying the captured images in the `NoteImageScreen`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding images to notes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our note-taking application is shaping up nicely, but a picture is worth a
    thousand words, so wouldn''t it be nice if we could take a photo and store it
    with a note? Since React Native does not ship with a camera component, we''ll
    need to use a very popular component created by *Lochlan Wansbrough*. The source
    code can be found at: [https://github.com/lwansbrough/react-native-camera](https://github.com/lwansbrough/react-native-camera).'
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, you are most likely familiar with the addition of new screens
    to our navigation. Let''s quickly write the navigation code for the `CameraScreen`
    before we include the Native Module. In the `NavigationBarRouteMapper`, add the
    `camera` route to the `LeftButton` and `Title` attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, in the `ReactNotes` component update the `renderScene` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We pass in another prop called `showCameraButton` to the `NoteScreen`, which
    we will use later to hide the camera button from the android version.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The same `showCameraButton` prop, except of value `false`, should be passed
    from the `renderScene` method for the Android version of ReactNotes: `showCameraButton={false}`.'
  prefs: []
  type: TYPE_NORMAL
- en: Installing react-native-camera on iOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are three steps to install react-native-camera and to include it in our
    `CameraScreen`. From the command line, navigate to the `ReactNotes` directory
    and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'If you take a look at the `node_modules` directory in the `ReactNotes` project
    you''ll see a new directory named `react-native-camera`, which contains both the
    JavaScript and native source code of the module. In the `ios` subdirectory, you''ll
    notice a file called `RCTCamera.xcodeproj`, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing react-native-camera on iOS](img/B05162_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We need to add this file to our Xcode project''s library. In the Xcode project
    navigator, right-click on **Libraries** and choose **Add Files to ReactNotes**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing react-native-camera on iOS](img/B05162_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the Finder window that appears, navigate to **ReactNotes** | **node_modules**
    | **react-native-camera** | **ios**, select **RCTCamera.xcodeproj** and click
    **Add**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing react-native-camera on iOS](img/B05162_07_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Take a look at the **Libraries** folder in the project navigator and you should
    see **RCTCamera.xcodeproj** in the list.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, select **ReactNotes** in the project navigator, click on **Build Phases**
    and expand the **Link Binary With Libraries** section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing react-native-camera on iOS](img/B05162_07_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click the plus sign at the bottom of the **Link Binary with Libraries section**,
    select **libRCTCamera.a** from the list and click **Add**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing react-native-camera on iOS](img/B05162_07_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We're now ready to use the camera component in our application.
  prefs: []
  type: TYPE_NORMAL
- en: Searching for Native Modules
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A brief note before we start using the camera component is how you can find
    these modules on your own. The two best places to look for open source Native
    Modules are either on GitHub ([https://github.com](https://github.com)) or NPM
    ([https://www.npmjs.com](https://www.npmjs.com)). A search on either of these
    sites will give you plenty of third-party modules created by the React Native
    community to use in your projects.
  prefs: []
  type: TYPE_NORMAL
- en: Using the camera component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The hard part is over! Importing the camera module is as simple as including
    any other React component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Using the Camera component is quite simple, as well. Here''s the `render` function
    of the `CameraScreen`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The Camera module exposes a number of props that you can use to customize its
    behavior but most of the default values work well for our purpose. However, you'll
    note that we set the `captureTarget` property to `Camera.constants.CaptureTarget.disk`.
    This setting will place the saved images into a directory on the device that only
    our `ReactNotes` application has access to. The default value for the `captureTarget`
    property is `Camera.constants.CaptureTarget.cameraRoll`, which will put the image
    in the shared location used by the native camera when you're taking pictures.
    Although that will normally be acceptable, at the time of this writing there is
    a bug that prevents ReactNative from loading images from that location.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at the code listing above. Notice that we''ve added child components
    to the camera component. It behaves just like a `View` component; you''re now
    familiar with laying out children using the `Flexbox` attribute. In our example,
    we''ve added a `View` and a `SimpleButton` with an `onPress` handler that will
    capture the image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Recall that we added `ref="cam"` to the camera component declaration; thus,
    allowing us to refer to it in our handler. When we call the `capture()` function,
    we pass in a callback that takes two arguments, `err` (which should be null unless
    the user doesn't permit `ReactNotes` to use the camera) and data, which will include
    the full path to the image once it is saved to disk.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to save the path to the image along with the note, we''ll need to
    pass the data up using `this.props.onPicture(data)`. We''ll need to update our
    top-level `ReactNotes` component, but before we do that, here''s the complete
    code for the `CameraScreen`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Return to `index.ios.js` and add the `onPicture` callback to the `CameraScreen`
    props:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'We''re passing in a callback that takes an `imagePath` and then calls `this.saveNoteImage(imagePath,
    route.note)`. Let''s add that function just above `renderScene`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This function simply takes the `imagePath`, adds it to the note object, and
    passes the modified note to our `updateNote()` function.
  prefs: []
  type: TYPE_NORMAL
- en: Now you can run the application in the simulator, click the **Take Picture**
    button and the screen becomes black! Don't worry, there's nothing wrong with your
    code; the iOS simulator doesn't have access to a camera, so it displays a black
    screen. However, if you click the **Capture** button, an image will be saved to
    your file system and when you return to view the image you'll actually see a white
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: To verify if this works, you can `console.log` the `imagePath`, navigate to
    the image, modify the image, and then return to the `NoteImageScreen` to see your
    changes.
  prefs: []
  type: TYPE_NORMAL
- en: Viewing images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With images, it is important that they are getting saved to the `imagePath`
    attribute correctly, we want to be able to view them again. We will add another
    screen called `NoteImageScreen` that displays the image captured by the camera
    component. In the `App/Components/` directory, create the `NoteImageScreen.js`
    file. Same as before, we are going to include this in the navigation as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: You might notice that in the title code for the `noteImage` route we use another
    ES6 feature known as string interpolation. This allows us to format a string directly
    between the back ticks `` `${variable}` `` with the value of a variable, in this
    case its `route.note.title`.
  prefs: []
  type: TYPE_NORMAL
- en: The image component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Image component is provided by React Native to display images from various
    sources, such as the local disk or over a network. To render our image, all we
    have to do is pass in the `imagePath` from our note to the source prop. In the
    `ImageNoteScreen` add:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we specify an object with an `uri` attribute to pass in the path. You
    can also use a `url` from the internet to render images this way also:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'To require images locally just specify the path to the image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: For more information on the Image component, see the React Native documentation
    at [https://facebook.github.io/react-native/docs/image.html](https://facebook.github.io/react-native/docs/image.html).
  prefs: []
  type: TYPE_NORMAL
- en: Deleting images
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In case the user takes the wrong picture, we need a way to be able to remove
    the image from a note. Similar to the navigation of the `NoteScreen`, we are going
    to `add` a `delete` button to the right-hand side. In the `ReactNotes` component,
    we are going to add the `deleteNoteImage` method to remove the `imagePath` attribute
    from the note:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'This looks similar to our `saveNoteImage` function, except that we are setting
    the value to `null`. Next, to add the button, we once again add the `noteImage`
    attribute to the `RightButton` function in `NavigationBarRouteMapper` and pass
    the `deleteNoteImage` function to the Navigator component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Connecting the final pieces
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have `CameraScreen` and `ImageScreen`, we need to be able to navigate
    to them via the `NoteScreen`. We are going to add a button that will change the
    state based on the `imagePath` of the note. If it does not exist, then we want
    the user to transition to the `CameraScreen` and the `ImageScreen` when it does.
    Visually we are going to place the button in-line with the title input:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Note that if the `showCameraButton` prop is enabled, we render a different button
    to indicate the next step to the user based on the existence of the `imagePath`.
    Each of the corresponding functions on the `SimpleButtons` will push the camera
    or `noteImage` route onto the navigator stack.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`blurInputs` is a function that we defined to disable the focus on the `TextInputs`
    and to hide the keyboard when transitioning to the next screen.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The styles for the button are similar to what we have had before. The main
    difference is the padding around the text:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'We can place the button in the same line as the `TextInput` since the `inputContainer`
    style we defined earlier has a `flexDirection` of row, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Connecting the final pieces](img/B05162_07_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned that even if React Native lacks a feature you need,
    you'll be able to find a Native Module that suits your needs. In our case, we
    need camera support for our note taking the application and we showed you how
    to install a great third-party module via `npm`. We created a new screen for our
    Camera component and wired it up to our note saving mechanism to store the path
    of the image that is captured. We then created a `NoteImage` screen to view the
    captured image and added a way to delete the images we captured.
  prefs: []
  type: TYPE_NORMAL
- en: 'Facebook exposes native device functionality in exactly the same way that react-native-camera
    does. If you''re curious, you can take a look at the very simple vibration module
    that ships with React Native: [https://github.com/facebook/react-native/tree/master/Libraries/Vibration](https://github.com/facebook/react-native/tree/master/Libraries/Vibration).
    Even if you do not consider yourself an Objective-C, Swift, or Java programmer,
    don''t be afraid to try creating a Native Module yourself—you might be surprised
    by how easy it is!'
  prefs: []
  type: TYPE_NORMAL
