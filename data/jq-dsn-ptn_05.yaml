- en: Chapter 5. The Facade Pattern
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第五章 门面模式
- en: In this chapter, we will showcase the **Facade Pattern**, a structural design
    pattern that tries to define a uniform way regarding how developers should create
    abstractions in their code. Initially, we will use this pattern to wrap complex
    APIs and expose simpler ones that focus on the needs of our application. We will
    see how jQuery embraces the concepts of this pattern in its implementation, how
    it achieves encapsulating complex implementations that are integral parts of the
    web developer's tool-belt into easy-to-use API's, and how this plays a critical
    role for its wide adoption.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将展示**门面模式**，一种结构设计模式，试图定义开发人员应如何在其代码中创建抽象的统一方式。最初，我们将使用此模式来包装复杂的 API，并公开专注于我们应用程序需求的简化
    API。我们将看到 jQuery 如何在其实现中采用此模式的概念，它如何将是 Web 开发者工具箱中的重要组成部分的复杂实现封装成易于使用的 API，以及这对其广泛采用的关键作用。
- en: 'In this chapter, we will:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将：
- en: Introduce the Facade Pattern
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍门面模式
- en: Document its key concepts and benefits
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 记录其关键概念和优势
- en: See how jQuery uses it in its implementation
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 看看 jQuery 在其实现中如何使用它
- en: Write an example implementation where Facades are used to completely abstract
    and decouple a third-party library
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写一个示例实现，其中门面被用于完全抽象和解耦第三方库
- en: Introducing the Facade Pattern
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍门面模式
- en: The Facade is a structural software design pattern that deals with how abstractions
    of the various parts of an implementation should be created. The key concept of
    the Facade Pattern is to abstract an existing implementation and provide a simplified
    API that better matches the use cases of the developed application. According
    to most Computer Science bibliographies describing this pattern, a Facade is most
    commonly implemented as a specialized class that is used to segment the implementation
    of an application into smaller pieces of code, while providing an interface that
    completely hides the encapsulated complexity. In the web development world, it
    is also common to use plain objects or functions for the implementation of a Facade,
    taking advantage of the way in which JavaScript treats functions as objects.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 门面模式是一种处理如何创建实现各部分的抽象的结构性软件设计模式。门面模式的关键概念是抽象出现有实现，并提供一个简化的 API，更好地匹配开发应用程序的用例。根据大多数描述此模式的计算机科学参考书目，门面最常见的实现方式是作为一个专门的类，用于将应用程序的实现分割成更小的代码片段，同时提供一个完全隐藏封装的复杂性的接口。在Web开发世界中，还常常使用普通对象或函数来实现门面，利用JavaScript将函数视为对象的方式。
- en: In applications that have a modular structure, like the examples of the previous
    chapter, it is also common to implement Facades as separate modules with their
    own namespace. Moreover, for a larger implementation with very complex parts,
    an approach with multiple levels of Facades can also be followed. Once again,
    the Facades will be implemented as modules and submodules, having the top-level
    Facade orchestrating the methods of its submodules, while providing an API that
    completely hides the complexity of the entire subsystem.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在具有模块化结构的应用程序中，例如上一章的示例，通常还会将门面实现为具有自己命名空间的单独模块。此外，对于具有非常复杂部分的较大实现，也可以采用多级门面的方法。再次，门面将作为模块和子模块实现，顶层门面将编排其子模块的方法，并提供一个完全隐藏整个子系统复杂性的
    API。
- en: The benefits of this pattern
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 此模式的优势
- en: Most of the time, the Facade Pattern is adopted for implementation parts that
    have a relatively high degree of complexity and are used in several places of
    an application, wherein large pieces of code can be replaced with a simple call
    to the created Facade, leading not only to less code repetition, but also helping
    us to increase the readability of the implementation. Since the Facade methods
    are usually named by the higher-level application concepts that they encapsulate,
    the resulting code is also easier to understand. The simplified API that a Facade
    provides through its convenient methods, leads to an implementation that is easier
    to use, understand, and also write unit tests for.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数情况下，门面模式被采用于具有相对高复杂度并在应用程序的多个地方使用的实现部分，其中大量的代码可以被简单调用已创建的门面替换，这不仅减少了代码重复，还有助于增加实现的可读性。由于门面方法通常以它们封装的高级应用概念命名，所以产生的代码也更易于理解。门面通过其方便的方法提供的简化
    API，导致实现更易于使用、理解，也更易于编写单元测试。
- en: '![The benefits of this pattern](img/00020.jpeg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![这种模式的好处](img/00020.jpeg)'
- en: Moreover, having Facades to abstract complex implementations proves its usefulness
    in cases where there is a need to introduce a change to the business logic of
    the implementation. In case a Facade has a well-designed API with a prediction
    for future requirements, such changes can often require modifications just to
    the Facade's code, leaving the rest of the application's implementation untouched
    and following the **Separation of Concerns** principle.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，将复杂实现抽象化为 Facades 在需要改变实现的业务逻辑时证明了其有用性。如果 Facade 具有良好设计的 API，并对未来需求进行了预测，这些更改通常只需要修改
    Facade 的代码，而不会影响应用程序的其余实现，并遵循**关注点分离**原则。
- en: In the same manner, using Facades to abstract the API of a third-party library
    to better match the needs of each application, provides a degree of decoupling
    between our code and the used library. In case the third-party library changes
    its API or needs to be replaced with another one, the different modules of the
    application will not need to be rewritten, since the implementation changes would
    be limited to the wrapper Facade. In this case, all that is needed is to provide
    an equivalent implementation using the new library API while keeping the Facade's
    API intact.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 以同样的方式，使用 Facades 将第三方库的 API 抽象化以更好地匹配每个应用程序的需求，提供了我们的代码与所用库之间的一定程度解耦。如果第三方库更改其
    API 或需要用另一个替换，应用程序的不同模块不需要重新编写，因为实现更改将被限制在包装 Facade 上。在这种情况下，只需要使用新库 API 提供等效实现，同时保持
    Facade 的 API 不变即可。
- en: '![The benefits of this pattern](img/00021.jpeg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![这种模式的好处](img/00021.jpeg)'
- en: 'As an example of orchestrating method calls and using sensible defaults for
    specific use cases, take a look at the following sample implementation:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 作为编排方法调用并为特定用例使用明智默认值的示例，请看以下示例实现：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How it is adopted by jQuery
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何被 jQuery 接受的
- en: A very large part of the jQuery implementation is dedicated to providing simpler,
    shorter, and more convenient-to-use methods for things that the different JavaScript
    APIs already allow us to achieve, but with more lines of code and effort. By taking
    a look at the provided APIs of jQuery, we can distinguish some groups of related
    methods. This grouping can also be seen in the way in which the source code is
    structured, placing methods for related APIs near to each other.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 实现的非常大的部分专门用于为不同的 JavaScript API 已经允许我们实现的事物提供更简单、更短、更方便的方法，但需要更多的代码行数和工作量。通过查看
    jQuery 提供的 API，我们可以区分出一些相关方法的组。这种分组也可以在源代码结构中看到，将相关 API 的方法放置在彼此附近。
- en: Even if the word **Facade** does not appear in jQuery's source code, the use
    of this pattern can be witnessed by the way in which the related methods are defined
    on the exposed jQuery object. Most of the time, the related methods that form
    a group are implemented and defined as properties on an O**bject Literal** and
    then attached to the jQuery object with a single call to the `$.extend()` or the
    `$.fn.extend()` method. As you might remember, from the beginning of this chapter,
    this matches almost exactly with the implementation that Computer Science commonly
    uses to describe how a Facade is implemented, with the exception that, in JavaScript,
    we can create a plain object without needing to first define a class. As a result,
    jQuery itself can be seen as a collection of Facades, where each one independently
    adds great value to the library with the API of convenient methods that it provides.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 即使单词**Facade**在 jQuery 的源代码中没有出现，但通过观察相关方法在公开的 jQuery 对象上的定义方式，可以看出这种模式的使用。大多数情况下，形成一组的相关方法被实现并定义为**对象字面量**的属性，然后通过一次调用`$.extend()`或`$.fn.extend()`方法附加到
    jQuery 对象上。你可能还记得，从本章开始时，这几乎与计算机科学常用来描述如何实现 Facade 的方式完全匹配，唯一的区别在于，在 JavaScript
    中，我们可以创建一个普通对象，而不需要首先定义一个类。因此，jQuery 本身可以被视为一组 Facades，其中每个 Facade 都通过提供便利方法的
    API 独立地为库增添了巨大价值。
- en: Note
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For more information on `$.extend()` and `$.fn.extend()`, you can visit [http://api.jquery.com/jQuery.extend/](http://api.jquery.com/jQuery.extend/)
    and [http://api.jquery.com/jQuery.fn.extend/](http://api.jquery.com/jQuery.fn.extend/).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 欲了解更多关于`$.extend()`和`$.fn.extend()`的信息，您可以访问[http://api.jquery.com/jQuery.extend/](http://api.jquery.com/jQuery.extend/)和[http://api.jquery.com/jQuery.fn.extend/](http://api.jquery.com/jQuery.fn.extend/)。
- en: 'Some of the abstracted API groups that are big parts of the jQuery implementation
    and play a critical role to its adoption are as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery实现中一些承担关键角色并对其采用起到至关重要作用的抽象API组如下：
- en: The DOM Traversal API
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DOM遍历API
- en: The AJAX API
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AJAX API
- en: The DOM Manipulation API
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DOM操作API
- en: The Effects API
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特效API
- en: Also, a great example of how this pattern can be used to provide simplified
    APIs is jQuery's Events API, which provides a variety of convenient methods for
    the most common use cases that are easier to use than the respective plain JavaScript
    APIs.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，一个很好的例子是jQuery的事件API，它提供了各种方便的方法，用于最常见的使用情况，比相应的纯JavaScript API更易于使用。
- en: The jQuery DOM Traversal API
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jQuery DOM遍历API
- en: At the time that jQuery was released, web developers could locate specific DOM
    elements of a page only by using the very limited `getElementById()` and `getElementsByTagName()`
    methods, since other methods, such as `getElementsByClassName()`, were not widely
    supported by the existing browsers. The jQuery team realized how the web development
    could be leveraged if there was a simple API that would ease such DOM traversals,
    which would work the same way across all browsers, be as effective as the familiar
    **CSS Selectors**, and did their best to make such an implementation a reality.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在jQuery发布时，网页开发人员只能使用非常有限的`getElementById()`和`getElementsByTagName()`方法来定位页面的特定DOM元素，因为其他方法，如`getElementsByClassName()`，并未得到现有浏览器的广泛支持。jQuery团队意识到，如果有一个简单的API可以轻松进行这样的DOM遍历，它能够在所有浏览器上以相同的方式工作，像熟悉的**CSS选择器**一样有效，并且尽最大努力使这样的实现成为现实。
- en: The result of this effort is the now famous jQuery DOM Traversal API that is
    exposed through the `$()` function, which played a serious role in the standardization
    of the `querySelectorAll()` method as part of the **Level 2 Selector API**. The
    implementation under the hood uses the methods provided by the **DOM API** and
    counts about 2,135 lines of code in jQuery v2.2.0, while it is even bigger in
    the v1.x versions that needed to support older browsers as well. As we saw in
    this chapter, because of its complexity this implementation is now part of a separate
    stand-alone project that is named **Sizzle**.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这一努力的成果是如今著名的jQuery DOM遍历API，通过`$()`函数公开，它在**Level 2 Selector API**的`querySelectorAll()`方法的标准化中扮演了重要角色。其底层实现使用**DOM
    API**提供的方法，在jQuery v2.2.0中约有2,135行代码，而在需要支持旧版浏览器的v1.x版本中甚至更多。正如我们在本章中所看到的，由于其复杂性，这一实现现在已成为一个名为**Sizzle**的独立项目的一部分。
- en: Note
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注
- en: For more information on Sizzle and the `querySelectorAll()` method, you can
    visit [https://github.com/jquery/sizzle](https://github.com/jquery/sizzle) and
    [https://developer.mozilla.org/en-US/docs/Web/API/document/querySelectorAll](https://developer.mozilla.org/en-US/docs/Web/API/document/querySelectorAll).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Sizzle和`querySelectorAll()`方法的更多信息，请访问[https://github.com/jquery/sizzle](https://github.com/jquery/sizzle)和[https://developer.mozilla.org/en-US/docs/Web/API/document/querySelectorAll](https://developer.mozilla.org/en-US/docs/Web/API/document/querySelectorAll)。
- en: 'Regardless of its complex implementation, the exposed APIs are quite easy to
    use, mostly using simple CSS Selectors as string parameters, making it an excellent
    example of how a Facade can be used to completely hide the complexity of its inner
    workings and expose a convenient API. Since Sizzle''s API is still quite complex,
    the jQuery library actually wraps it with its own API acting as an extra Facade
    level:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管其实现复杂，所公开的API非常易于使用，主要使用简单的CSS选择器作为字符串参数，这使得它成为一个很好的例子，说明外观模式可以完全隐藏其内部工作的复杂性并公开一个方便的API。由于Sizzle的API仍然相当复杂，jQuery库实际上使用自己的API包装它，作为额外的Facade级别：
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The jQuery library first keeps a reference of Sizzle to the internal `jQuery.find()`
    method and then uses it to implement all its exposed DOM Traversal methods, which
    work on Composite Objects such as `$.fn.find()`:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery库首先保留Sizzle对内部`jQuery.find()`方法的引用，然后使用它来实现其所有公开的DOM遍历方法，这些方法适用于像`$.fn.find()`这样的复合对象：
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Finally, the famous `$()` function can actually be invoked in several ways,
    but even when it is invoked with a CSS Selector as a string parameter, it actually
    has an extra level of hidden complexity:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，著名的`$()`函数实际上可以以多种方式调用，但即使使用CSS选择器作为字符串参数调用时，它实际上有一个额外的隐藏复杂性：
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As you can see, in the preceding code, the `$()` is actually creating a new
    object with `$.fn.init()`. Instead of being just an entry point to `$.fn.find()`
    or `jQuery.find()`, it is actually a `Facade` that hides a level of optimization.
    Specifically, it makes jQuery faster by avoiding invoking `$.fn.find()` and Sizzle,
    when simple ID selectors are used by directly invoking the `getElementById()`
    method.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，在上述代码中，`$()`实际上是使用`$.fn.init()`创建一个新对象。它不仅仅是`$.fn.find()`或`jQuery.find()`的入口点，而是一个隐藏了一层优化的门面。具体来说，它通过直接调用`getElementById()`方法，使得jQuery在使用简单的ID选择器时，通过避免调用`$.fn.find()`和Sizzle，而变得更快。
- en: The property access and manipulation API
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 属性访问和操作API
- en: Another very interesting abstraction that follows the principles of the Facade
    Pattern and can be found in jQuery's source, is the `$.fn.prop()` method. Like
    the `$.fn.attr()`, `$.fn.val()`, `$.fn.text()`, and `$.fn.html()`, it belongs
    to a family of methods that is characterized by the fact that each method is both
    a getter and a setter of the related subject. The distinction of the method's
    execution mode is done by inspecting the number of parameters that are passed
    during its invocation. This convenient API allows us to have to remember less
    method signatures and make the setters differ only by one extra parameter. For
    example, `$('#myCheckBox').prop('checked')` will return true or false, based on
    the state of the selected checkbox. On the other hand, `$('#myCheckBox').prop('checked',
    true);` will programmatically check that checkbox for us. In the same concept,
    `$('button').prop('disabled', true);` will disable all the `<button>` elements
    on a page.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循门面模式原则的另一个非常有趣的抽象，可以在jQuery源代码中找到，即`$.fn.prop()`方法。像`$.fn.attr()`、`$.fn.val()`、`$.fn.text()`和`$.fn.html()`一样，它属于一系列既是相应主题的获取器又是设置器的方法。该方法的执行模式的区分是通过检查在调用期间传递的参数数量来完成的。这种方便的API让我们只需记住更少的方法签名，并且使得设置器只需要一个额外的参数来进行区分。例如，`$('#myCheckBox').prop('checked')`将根据所选复选框的状态返回true或false。另一方面，`$('#myCheckBox').prop('checked',
    true);`将对该复选框进行程序化的选中。在同样的概念中，`$('button').prop('disabled', true);`将禁用页面上所有`<button>`元素。
- en: 'The `$.fn.prop()` method does the jQuery Composite Object handling, but the
    actual implementation of the Facade is the internal `jQuery.prop()` method. An
    extra concern that adds complexity to the Facade''s implementation is the fact
    that there are some HTML attributes that have different identifiers for the corresponding
    properties on the DOM elements:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`$.fn.prop()`方法执行jQuery复合对象处理，但Facade的实际实现是内部的`jQuery.prop()`方法。为Facade的实现增加复杂性的一个额外问题是，一些HTML属性在DOM元素上具有与之对应的不同标识符：'
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The first highlighted code area efficiently resolves the property to attribute
    identifier mismatch by using the `propFix` and `propHooks` objects to do the matching.
    The `propFix` object acts like a simple dictionary to match the identifiers, while
    the `propHooks` object holds a function that does the matching in a less-hard-coded
    way, with programmatic testing. This is a generic implementation that can easily
    be extended by adding extra properties to those two objects.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个突出显示的代码区域通过使用`propFix`和`propHooks`对象来高效地解决属性到属性标识符不匹配的问题。`propFix`对象就像一个简单的字典，用于匹配标识符，而`propHooks`对象则保存一个函数，以一种不那么硬编码的方式进行匹配，通过编程化的测试。这是一个通用的实现，可以通过向这两个对象添加额外的属性来轻松扩展。
- en: 'The rest of the highlighted areas are responsible for the getter/setter mode
    of the method. The overall implementation is to perform the following tasks:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 其余突出显示的区域负责方法的获取器/设置器模式。总体实现是执行以下任务：
- en: Check whether a value is passed as an argument and, if the property finds that
    the assignment is successful, do the assignment and return the value.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查是否将值作为参数传递，并且如果属性发现分配成功，则执行分配并返回该值。
- en: Alternatively, if there was no value passed, return the value of the requested
    property if it is retrievable.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 或者，如果没有传递值，则返回可检索的请求属性的值。
- en: Using Facades in our applications
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在我们的应用程序中使用门面
- en: In order to demonstrate how facades can be used both to encapsulate complexity,
    helping us enforce the Separation of Concerns principle, and also abstract third-party
    library APIs into more convenient methods that are application centric, we are
    going to demonstrate a very simple lottery application. Our "Element Lottery"
    application will populate its container with some Lottery Ticket elements that
    will have a unique ID and contain a random number.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示外观如何被用来封装复杂性，帮助我们执行关注点分离原则，并将第三方库的 API 抽象成更方便的应用程序中心化方法，我们将演示一个非常简单的抽奖应用程序。我们的“元素抽奖”应用程序将使用唯一
    ID 填充其容器，并包含随机数的一些抽奖票元素。
- en: '![Using Facades in our applications](img/00022.jpeg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![在我们的应用程序中使用外观](img/00022.jpeg)'
- en: 'The winning ticket will be picked by randomly selecting one of the lottery
    elements, based on a random index among the created unique IDs. The winning number
    will then be announced to be the numeric content of the picked element. Let''s
    see the modules of our application:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 中奖号码将通过随机选择抽奖元素之一，基于创建的唯一 ID 中的随机索引来挑选。然后宣布获胜号码是所选元素的数字内容。让我们看看我们应用程序的模块：
- en: '[PRE5]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The main `elementLottery` module of our application initialized itself right
    after the page was fully loaded. The `add` method is used to populate the lottery
    container element with tickets. It uses the `uidProvider` submodule to generate
    unique identifiers for the ticket elements, keeps track of them on the `elementIDs`
    array, uses the ticket submodule to construct the appropriate HTML code, and finally
    appends the element to the lottery. The `pick` method is used to randomly select
    the winning ticket by randomly selecting one of the generated identifiers, retrieving
    the page element with that ID, and displaying its content inside an alert box
    as the winning result. The `pick` method is triggered by clicking on the button
    that we have added an Observer during the initialization phase:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应用程序的主要 `elementLottery` 模块会在页面完全加载后立即初始化。`add` 方法用于向抽奖容器元素添加票证。它使用 `uidProvider`
    子模块为票证元素生成唯一标识符，并在 `elementIDs` 数组上跟踪它们，使用票证子模块构造适当的 HTML 代码，并最终将元素附加到抽奖中。`pick`
    方法用于通过随机选择生成的标识符之一来随机选择获胜者票证，检索具有该 ID 的页面元素，并在警报框中显示其内容作为获胜结果。`pick` 方法是在初始化阶段添加观察者的按钮点击时触发的：
- en: '[PRE6]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The `ticket` submobule acts as a Facade with a single method that is used to
    encapsulate the generation of a random number and the creation of the HTML code
    that will be used as the ticket. On the other hand, the `uidProvide` submodule
    is a Facade that provides a single get method that encapsulates the way we use
    the `simpleguid` module that we saw in the previous chapters. As a result, we
    can easily change the library that is used to generate unique identifiers and
    the only place that we will have to modify the existing implementation will be
    the `uidProvide` submodule. For example, let''s see how it will look if we decided
    to use the great node-uuid library that generates 128-bit unique identifiers as
    strings of hexadecimal characters:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`ticket` 子模块充当一个外观，具有一个用于封装随机数生成和将用作票证的 HTML 代码的单个方法。另一方面，`uidProvide` 子模块是一个提供单个
    get 方法的外观，封装了我们在前几章节中看到的 `simpleguid` 模块的使用方式。因此，我们可以轻松更改用于生成唯一标识符的库，而我们需要修改现有实现的唯一位置将是
    `uidProvide` 子模块。例如，让我们看看如果我们决定使用生成 128 位唯一标识符的精美 node-uuid 库，它会是什么样子：'
- en: '[PRE7]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For more information on the node-uui library, you can visit [https://github.com/broofa/node-uuid](https://github.com/broofa/node-uuid).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 node-uui 库的更多信息，您可以访问 [https://github.com/broofa/node-uuid](https://github.com/broofa/node-uuid)。
- en: Summary
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned what a Facade actually is. We learned its philosophy
    and the uniform way in which it defines how code abstractions should be created
    so that they are easily understandable and reusable by other developers.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了外观实际上是什么。我们了解了其哲学以及统一定义代码抽象应该如何创建，以便其他开发人员能够轻松理解并重用它们。
- en: Starting from the simplest use cases of this pattern, we learned how to wrap
    a complex API with a Facade and expose a simpler one that is focused on the needs
    of our application and is a better match to its specific use cases. We also saw
    how jQuery embraces the concepts of this pattern in its implementation and how
    providing simple APIs for more basic web-developing techniques, such as DOM Traversals,
    played a critical role for its wide adoption.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 从该模式的最简单用例开始，我们学习了如何使用 Facade 封装复杂的 API，并公开一个更简单的 API，专注于我们应用程序的需求，并更好地匹配其特定的用例。
    我们还看到了 jQuery 如何在其实现中采用了这种模式的概念，以及为更基本的 web 开发技术（如 DOM 遍历）提供简单 API 如何对其广泛采用起到了至关重要的作用。
- en: Now that we have completed our introduction to how the Facade Pattern can be
    used to decouple and abstract parts of an implementation, we can move on to the
    next chapter where we will be introduced to the Builder and Factory Patterns.
    In the next chapter, we will learn how to use these two Creational Design Patterns
    to abstract the process of generating and initializing new objects for specific
    use cases and analyze how their adoption can benefit our implementations.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了对 Facade 模式如何用于解耦和抽象实现的介绍，我们可以继续下一章，在下一章中，我们将介绍 Builder 和 Factory 模式。
    在下一章中，我们将学习如何使用这两种创建型设计模式来抽象生成和初始化新对象的过程，以满足特定用例，并分析它们的采用如何使我们的实现受益。
