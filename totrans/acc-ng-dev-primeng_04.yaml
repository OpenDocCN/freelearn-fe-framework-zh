- en: '*Chapter 8*: Additional Provider Scopes'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter seeks to explain how to use dependency injection scopes to develop
    more lean components and features in Angular Ivy. To explore these features, we
    will learn how to create a non-singleton service and how to reuse dependencies
    across Angular elements.
  prefs: []
  type: TYPE_NORMAL
- en: We will introduce the `any` provider scope by revising the theme service so
    that it can accept specific configurations when used in different scenarios using
    the `any` provider scope and rewiring the schools and course modules to be lazy
    loaded.
  prefs: []
  type: TYPE_NORMAL
- en: We will then wrap up *Part 2, Build a Real-World Application with the Angular
    Ivy Features You Learned* by building a new login element that shows how to share
    information across application boundaries by using the platform provider scope
    for Angular Elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Revisiting the root provider scope
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the any provider scope for a configurable theme service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sharing information across application boundaries using the platform provider
    scope
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Before we dive into the details about the new provider scopes, let's take a
    moment to reflect on the services we have introduced so far using the root provider
    scope.
  prefs: []
  type: TYPE_NORMAL
- en: Revisiting the root provider scope
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So far, we have discussed the following services in the Angular Academy application
    using the root scope provider:'
  prefs: []
  type: TYPE_NORMAL
- en: '`SchoolsService`: Retrieve information about the available schools.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CourseService`: Retrieve information about the course.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ThemeService`: Set and retrieve information about the current theme.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These services have served us well as singletons in the app so far – and marking
    the services for use with `providedIn: ''root''` via the `Injectable` decorator
    makes it pretty easy to use them for the standard use case. If you have been around
    since the early days of Angular, then you might have been accustomed to injecting
    services as dependencies in each specific module – for example, you might have
    been wondering why `SchoolsService` is not listed in the providers array from
    the schools module here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We do not need to insert explicit providers here as we have had tree-shakable
    providers since Angular version 6\. We can now just rely on the `injectable` decorator.
    This makes the Angular modules a bit leaner and easier to configure, and we can
    provide alternative implementations for the service later.
  prefs: []
  type: TYPE_NORMAL
- en: Providing singleton services on the root scope sounds useful in itself (it worked
    well in [*Chapter 6*](B16295_06_ePub_RK.xhtml#_idTextAnchor081), *Using Angular
    Components*). But what if we want to have specific service instances per use case?
    It turns out that we can do that by using the any provider scope for the theme
    service and changing the modules to be lazy loaded instead of the default eager
    loading. Let's dig into the details on how to do that.
  prefs: []
  type: TYPE_NORMAL
- en: Using the any provider scope for a configurable ThemeService
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s use the any provider scope for a configurable `ThemeService` by injecting
    configurable settings depending on the use case for each module that we load:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We introduced the theme service in [*Chapter 5*](B16295_05_ePub_RK.xhtml#_idTextAnchor075)*,
    Using CSS Custom Properties*. Let''s make that configurable by introducing an
    `InjectionToken` instance for the theme:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The theme token holds configuration settings that implement the `ITheme` interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We could then use a `green` theme with these values in `AppModule` via the
    `InjectionToken` token of `theme`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Note that the configured settings will only be the starting values. The user
    can still change them while the system is running.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can inject the theme settings into the injector scope using the theme
    service. When we are using the any provider scope, we can obtain an instance for
    every lazy-loaded module that injects the service. Here is a snippet that shows
    the relevant parts of how to rewire the modules for lazy loading via an app routing
    module and while running the `green` theme in the `AppModule`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Here we provide default settings for `ThemeService` on the application module
    scope. The dependencies for each module would be dynamically loaded from inside
    `AppRoutingModule` like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we need to establish a routing module for each module. As an example,
    the routing module for the course module looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'We already have the settings defined in the `Provider` scope for the app module
    that uses the course module, so there is no need to redefine it here if we want
    the `green` theme for a module. But if we want to use another theme, then we can
    introduce another theme configuration via the `theme` token like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We could then use the `metallic` theme on the lazy-loaded `LoginModule` via
    the platform injector scope like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Since we are lazy loading the login module, we will now create a new instance
    of the theme service – so that the `login` component can use the `metallic` theme
    instead of the `green` theme like the rest of the application. In this way, we
    can use an instance of the theme service to render the toolbar using the `green`
    theme and the `login` component using the `metallic` theme, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.1 –  The login screen. Note that the background here is from the
    metallic theme'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.1_B16295.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.1 – The login screen. Note that the background here is from the metallic
    theme
  prefs: []
  type: TYPE_NORMAL
- en: 'This will be the first screen you see when you start the Angular Academy application.
    Note that the metallic card background is set in the `login.component.scss` file
    using the mechanism you learned about in [*Chapter 5*](B16295_05_ePub_RK.xhtml#_idTextAnchor075)*,
    Using CSS Custom Properties*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The `background` variable will be set in `LoginComponent` like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '`LoginComponent` passes user information from `loginForm` to `AuthService`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Note that we are using a very simple way of obtaining a `login` token for the
    `demo` user with the password `demo` here. This example could be extended to call
    the backend of your choice and submit `LoginEvent` after doing so.
  prefs: []
  type: TYPE_NORMAL
- en: 'The idea is that we can react to `LoginEvent` like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: By now we hope that you have had the chance to play around with the Angular
    Academy application to see how things are wired together. Did you notice that
    you are redirected directly to the course in the Angular Academy application after
    logging in a second time? The first time you log in, you should be given the opportunity
    to choose a school from a map – and then choose a course from the school. When
    you choose a course, this will be stored via the preference service. This preference
    can then be used to redirect users to courses.
  prefs: []
  type: TYPE_NORMAL
- en: The Angular Academy application uses some fairly complex navigation logic that
    is only relevant inside the app – but what if we wanted to share information outside
    of the app? We can do exactly that by using the `platform` provider scope in combination
    with Angular elements.
  prefs: []
  type: TYPE_NORMAL
- en: Sharing information across application boundaries using the platform provider
    scope
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can demonstrate how to share information outside of the app by creating a
    tweet button as an Angular element. This Angular element could be used outside
    of the app as well. Let's dig into the details on how to do that.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will start by adding Angular elements to the app by running the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we include the Twitter widgets SDK within the page like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we can build a tweet hashtag button using a `TweetCourse` component like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The `TweetCourse` component uses `CourseService` with the platform provider
    scope to retrieve data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we register `TweetCourseComponent` as an Angular element like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'It can then be used as a web component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Since `CourseService` is registered on the platform provider scope, we can now
    use it both from within our new `<tweet-course>` Angular element and inside our
    Angular Academy application.
  prefs: []
  type: TYPE_NORMAL
- en: 'We insert the `<tweet-course>` element inside the navigation bar for the desktop
    version of the application like this inside the navigation component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Here you see that the `<tweet-course>` element should be rendered in the sidebar
    if you have chosen a course (if you have a `courseId` instance). It should look
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.2 – Introducing the Tweet #AcceleratingIvy button'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.2_B16295.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.2 – Introducing the Tweet #AcceleratingIvy button'
  prefs: []
  type: TYPE_NORMAL
- en: If you are logged in to Twitter when you press the `#AcceleratingIvy` hashtag.
    If you register another hashtag for your course in the course service, then this
    hashtag will be presented.
  prefs: []
  type: TYPE_NORMAL
- en: Maybe you have other ideas for components that could be used outside of the
    application? Did you notice that we marked `AuthService` as `providedIn:` `'platform'`?
    You could export the `Login` component as an Angular element and update it to
    integrate it into your own application platform to perform single sign-on.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we started by expanding on the usage of the root provider scope
    and introduced the new any and platform provider scopes in the context of the
    Angular Academy application. We then introduced the any provider scope by applying
    lazy loading via `AppRoutingModule`, which allowed us to use a separate theme
    for `LoginModule`. Finally, we saw how to create a Tweet button that can be used
    with the platform provider scope.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will start on Part 3, Upgrade Your View Engine Application
    and Development Workflow to Angular Ivy of the book and look into migrations and
    more practical aspects of using Angular Ivy.
  prefs: []
  type: TYPE_NORMAL
