["```js\n<st c=\"2735\">$ ng g pipe percent â€“skip-import</st>\n```", "```js\n import { PercentPipe } from './percent.pipe'; describe('PercentPipe', () => { it('create an instance', () => {\n    const pipe = new PercentPipe();\n    expect(pipe).toBeTruthy();\n  });\n});\n```", "```js\n it('should format a positive number to a percentage string', () => {\n  const input = 123;\n  const output = new PercentPipe().transform(input);\n  expect(output).toBe('12300%');\n});\n```", "```js\n transform (value: number): string {\n    const formattedValue = value * 100;\n    return formattedValue + '%';\n  }\n```", "```js\n it('should format a negative number to a percentage string', () => {\n  const input = -123;\n  const output = new PercentPipe().transform(input);\n  expect(output).toBe('-12300%');\n});\n```", "```js\n it('should format a decimal number to a percentage string', () => {\n  const input = 123.45;\n  const output = new PercentPipe().transform(input);\n  expect(output).toBe('12345%');\n});\n```", "```js\n it('should return an Error when the value is not a number NaN', () => {\n    const input = NaN;\n    const output = new PercentPipe().transform(input);\n    expect(output).toBe('Error');\n  });\n```", "```js\n if (isNaN(value)) {\n      return 'Error';\n    }\n```", "```js\n transform(value: number): string {\n    if (isNaN(value)) {\n      return 'Error';\n    }\n    const formattedValue = value * 100;\n    return formattedValue + '%';\n  }\n```", "```js\n it('should be valid when all of the fields are filled in correctly', () => {\n  const form = new FormGroup({\n    operand1: new FormControl(123),\n    operand2: new FormControl(456),\n    operator: new FormControl('+'),\n  });\n  expect(form.valid).toBe(true);\n});\n```", "```js\n await TestBed.configureTestingModule({\n    imports: [ReactiveFormsModule],\n  }).compileComponents();\n```", "```js\n it('should be valid when all of the fields are filled in correctly', () => {\n    calculator.calculatorForm.get('operand1')?.setValue(123);    calculator.calculatorForm.get('operand2')?.setValue(456);\n  calculator.calculatorForm.get('operator')?.setValue('+');\nexpect(calculator.calculatorForm.valid).toBe(true);\n});\n```", "```js\n this.calculatorForm = new FormGroup({\n   operand1: new FormControl(null, [Validators.required]),\n   operand2: new FormControl(null, [Validators.required]),\n   operator: new FormControl(null, [Validators.required]),\n});\n```", "```js\n it('should be invalid when one of the field is not filled in correctly', () => {\n    calculator.calculatorForm.get('operand1')?.setValue(123);\n    calculator.calculatorForm.get('operator')?.setValue('+');\n    expect(calculator.calculatorForm.valid).toBe(false);\n  });\n```", "```js\n <form [formGroup]=\"calculatorForm\">\n  <input type=\"number\" formControlName=\"operand1\" />\n  <input type=\"number\" formControlName=\"operand2\" />\n  <select formControlName=\"operator\">\n    <option value=\"+\">+</option>\n    <option value=\"-\">-</option>\n    <option value=\"*\">*</option>\n    <option value=\"/\">/</option>\n  </select>\n  <button (click)=\"calculate()\" [disabled]=\"calculatorForm.invalid\">\n    Calculate\n  </button>\n  <p [colorChange]=\"color\">{{ result | percent }}</p>\n</form>\n```", "```js\n it('should be added when the + operator is selected and the calculate button is clicked', () => {\n    calculator.calculatorForm.get('operand1')?.setValue(2);\n    calculator.calculatorForm.get('operand1')?.setValue(3);\n    calculator.calculatorForm.get('operator')?.setValue('+');\n    calculator.calculate();\n    expect(calculator.result).toBe(5);\n  });\n```", "```js\n it('should subtract when the - operator is selected and the calculate button is clicked', () => {\n    calculator.calculatorForm.get('operand1')?.setValue(2);\n    calculator.calculatorForm.get('operand2')?.setValue(3);\n    calculator.calculatorForm.get('operator')?.setValue('-');\n calculator.calculate();\n expect(calculator.result).toBe(-1);\n});\n```", "```js\n it('should multiply when the * operator is selected and the calculate button is clicked', () => {\n    calculator.calculatorForm.get('operand1')?.setValue(2);\n    calculator.calculatorForm.get('operand2')?.setValue(3);\n    calculator.calculatorForm.get('operator')?.setValue('*');\ncalculator.calculate();\nexpect(calculator.result).toBe(6);\n});\n```", "```js\n it('should divide when the / operator is selected and the calculation button is clicked.', () => {\n    calculator.calculatorForm.get('operand1')?.setValue(3);\n    calculator.calculatorForm.get('operand2')?.setValue(2);\n    calculator.calculatorForm.get('operator')?.setValue('/');\n    calculator.calculate();\n    expect(calculator.result).toBe(1.5);\n  });\n```"]