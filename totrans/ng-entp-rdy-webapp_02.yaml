- en: '2'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Setting Up Your Development Environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter demonstrates how you and your team members can create a consistent
    development environment so that your entire team has the same great web development
    experience – the importance of which is highlighted in the preface of the book.
    It can be tough for beginners to create the right development environment, which
    is essential for a frustration-free development experience. For seasoned developers
    and teams, achieving a consistent and minimal development environment remains
    a challenge. Once achieved, such a development environment helps avoid many IT-related
    issues, including ongoing maintenance, licensing, and upgrade costs.
  prefs: []
  type: TYPE_NORMAL
- en: Instructions on installing GitHub Desktop, Node.js, the Angular CLI, and Docker
    are a useful reference for those from absolute beginners to seasoned teams, along
    with strategies for how to automate and ensure the correct and consistent configuration
    of your development environment.
  prefs: []
  type: TYPE_NORMAL
- en: Feel free to skip this chapter if you already have a robust development environment
    set up; however, beware that some of the environmental assumptions declared in
    this chapter may result in some instructions not working for you in later chapters.
    Come back to this chapter as a reference if you run into issues or need to help
    a colleague, pupil, or friend to set up their development environment. Automated
    installation scripts to set up your development environment can be found at [https://github.com/duluca/web-dev-environment-setup](https://github.com/duluca/web-dev-environment-setup).
  prefs: []
  type: TYPE_NORMAL
- en: To make the most of this book, you should be familiar with JavaScript ES2015+,
    frontend development basics, and RESTful APIs.
  prefs: []
  type: TYPE_NORMAL
- en: The recommended operating systems are Windows 10 Pro v1903+ with PowerShell
    v7+, or macOS Sierra v10.15+ with Terminal (Bash or Oh My Zsh). Most of the suggested
    software in this book also works on Linux systems, but your experience may vary
    depending on your particular setup.
  prefs: []
  type: TYPE_NORMAL
- en: It is standard practice for developers to use Google Chrome 80+ when developing
    web applications. However, you may also use the Chromium-based Microsoft Edge
    browser 80+. You should definitely install the cross-platform PowerShell on Windows
    from [https://github.com/PowerShell/PowerShell/releases](https://github.com/PowerShell/PowerShell/releases),
    which gives you access to chain operators `&&` and `||`. Additionally, get the
    new Windows Terminal from the Microsoft Store for a superior command-line experience
    on Windows.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you are going to learn how to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Work with the CLI package managers Chocolatey and Homebrew to install and update
    software
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use those package managers to install GitHub, Node.js, and other essential programs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use scripting to automate installation using PowerShell or Bash
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generate an Angular application using the Angular CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Achieve a consistent and cross-platform development environment using automated
    tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's start by learning about CLI-based package managers that you can use to
    install your development tools. In the next section, you'll see that using CLI
    tools is a superior method compared to dealing with individual installers. It
    is much easier to automate CLI tools, which makes setup and maintenance tasks
    repeatable and fast.
  prefs: []
  type: TYPE_NORMAL
- en: CLI package managers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Installing software through a **Graphical User Interface** (**GUI**) is slow
    and challenging to automate. As a full-stack developer, whether you're a Windows
    or a Mac user, you must rely on **Command-Line Interface** (**CLI**) package managers
    to efficiently install and configure the software you depend on.
  prefs: []
  type: TYPE_NORMAL
- en: Remember, anything that can be expressed as a CLI command can also be automated.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Chocolatey for Windows
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Chocolatey is a CLI-based package manager for Windows that can be used for
    automated software installation. To install Chocolatey on Windows, you need to
    run an elevated command shell:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch the **Start** menu
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start typing in `PowerShell`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should see **Windows PowerShell Desktop App** as a search result
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on **Windows PowerShell** and select **Run as Administrator**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This triggers a **User Account Control** (**UAC**) warning; select **Yes** to
    continue
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Execute the install command found at [https://chocolatey.org/install](https://chocolatey.org/install)
    in **PowerShell** to install the Chocolatey package manager:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Verify your Chocolatey installation by executing `choco`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should see a similar output to the one shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B14094_02_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.1: Successful installation of Chocolatey'
  prefs: []
  type: TYPE_NORMAL
- en: All subsequent Chocolatey commands must also be executed from an elevated command
    shell. Alternatively, it is possible to install Chocolatey in a non-administrator
    setting that doesn't require an elevated command shell. However, this results
    in a non-standard and less secure development environment, and certain applications
    installed through the tool may still require elevation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Scoop is an alternative to Chocolatey that provides a more Unix-like experience.
    If you prefer Unix-style tools and commands, you can install Scoop at [https://scoop.sh/](https://scoop.sh/)
    or by executing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: For more information on Chocolatey, refer to [https://chocolatey.org/install](https://chocolatey.org/install).
  prefs: []
  type: TYPE_NORMAL
- en: Installing Homebrew for macOS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Homebrew is a CLI-based package manager for macOS that can be used for automated
    software installation. To install Homebrew on macOS, you need to run a command
    shell:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch Spotlight Search with ![](img/B14094_02_001.png) + `Space`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type in `terminal`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Execute the following command in Terminal to install the Homebrew package manager:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Verify your Homebrew installation by executing `brew`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should see a similar output to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B14094_02_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.2: Successful installation of Homebrew'
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable access to additional software, execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: On macOS, if you run into permissions issues while installing brew packages,
    related to chown'ing `/usr/local`, you need to execute the `sudo chown -R $(whoami)
    $(brew --prefix)/*` command. This command reinstates user-level ownership to brew
    packages, which is more secure than broad superuser/`su`-level access.
  prefs: []
  type: TYPE_NORMAL
- en: For more information, check out [https://brew.sh/](https://brew.sh/.).
  prefs: []
  type: TYPE_NORMAL
- en: Installing development tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, you'll install all the development tools you need to start
    developing a web application. Git and GitHub Desktop establish a source code repository
    on your machine and allow you to sync your code with a remote repository. Node.js
    is a JavaScript runtime for your PC and it ships with the **Node Package Manager**
    or **npm**. Npm manages third-party source code including Angular. Visual Studio
    Code is an **Integrated Development Environment** or **IDE**.
  prefs: []
  type: TYPE_NORMAL
- en: To automatically install all of the web development tools required for this
    book, execute the following commands for your OS to configure your environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'On Windows PowerShell, execute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'On MacOS Terminal, execute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: For more information refer to [https://github.com/duluca/web-dev-environment-setup](https://github.com/duluca/web-dev-environment-setup).
  prefs: []
  type: TYPE_NORMAL
- en: Once you install your IDE, you're ready to start development. This section also
    contains instructions to install Docker, a lightweight containerization platform,
    and configure various cloud services. These tools will become relevant in later
    chapters. If you want a quicker start to your Angular adventure, you can skip
    them for now.
  prefs: []
  type: TYPE_NORMAL
- en: Git and GitHub Desktop
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This section aims to establish a best practice Git configuration that''s suitable
    for the broadest audience possible. To make the best use of this section and subsequent
    chapters of this book, I presume you have the following prerequisites fulfilled:'
  prefs: []
  type: TYPE_NORMAL
- en: An understanding of what source code management and Git actually are
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A free account created on [GitHub.com](http://GitHub.com )
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why use GitHub?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are a Git user, the chances are that you also use an online repository,
    such as GitHub, Bitbucket, or GitLab. Each repository has a free tier for open
    source projects, coupled with robust websites with different feature sets, including
    on-premise Enterprise options that you can pay for. GitHub, with 38+ million repositories
    hosted in 2016, is by far the most popular online repository. It is widely considered
    a baseline utility that never goes offline by the community.
  prefs: []
  type: TYPE_NORMAL
- en: Over time, GitHub has added many rich features that have transformed it from
    a mere repository to an online platform. Throughout this book, I'll be referencing
    GitHub features and functionalities so you can leverage its capabilities to transform
    the way you develop, maintain, and release software.
  prefs: []
  type: TYPE_NORMAL
- en: Why use GitHub Desktop?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Git CLI tool is indeed powerful, and you will be just fine if you stick
    to it. However, we full-stack developers are worried about a variety of concerns.
    In a rush to complete the task at hand, you can easily ruin your, and sometimes
    your team's, day by following incorrect or incomplete advice.
  prefs: []
  type: TYPE_NORMAL
- en: 'See the following screenshot for an example of such advice from Stack Overflow
    ([http://stackoverflow.com/questions/1125968/force-git-to-overwrite-local-files-on-pull](http://stackoverflow.com/questions/1125968/force-git-to-overwrite-local-files-on-pull)):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B14094_02_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.3: An example of a command not to run blindly'
  prefs: []
  type: TYPE_NORMAL
- en: If you execute the preceding command, be prepared to lose uncommitted local
    changes. Unfortunately, novice users tend to follow the most straightforward and
    most direct instructions, potentially leading to lost work. If you think your
    past commits are safe, think twice! When it comes to Git, if you can imagine it,
    it can be done through the CLI.
  prefs: []
  type: TYPE_NORMAL
- en: Thankfully, with GitHub, you can protect branches and implement the GitHub workflow,
    which entails branching, committing, merging, updating, and submitting pull requests.
    The protections and the workflow help prevent harmful Git commands from making
    irreversible changes and enable a level of quality control so that your team remains
    productive. Performing all of these actions through the CLI, especially when there
    are merge conflicts, can get complicated and tedious.
  prefs: []
  type: TYPE_NORMAL
- en: Note that Git ships with a CLI tool named Git Bash, which is a Unix-based shell
    that you can use to execute `git` and other commands. Bash is readily available
    on Linux and macOS computers. Windows 10 is rapidly improving its terminal support
    with **Windows Subsystem for Linux** (**WSL**) and alias to Unix commands in PowerShell,
    so the need to use Git Bash on Windows is rapidly disappearing. If you would like
    to learn more about Git Bash see the tutorial at Atlassian's website at [https://www.atlassian.com/git/tutorials/git-bash](https://www.atlassian.com/git/tutorials/git-bash).
  prefs: []
  type: TYPE_NORMAL
- en: For a more in-depth understanding of the benefits and pitfalls of Git and GitHub,
    you can read my 2016 article on the topic at [Bit.ly/InDepthGitHub](http://Bit.ly/InDepthGitHub).
  prefs: []
  type: TYPE_NORMAL
- en: Installing Git and GitHub Desktop
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: GitHub Desktop provides an easy-to-use GUI to execute the GitHub workflow in
    a manner that is consistent across Windows and macOS. Consistency is highly valuable
    when onboarding new or junior team members, or if you're not a frequent contributor
    to the code base. We recommend you install GitHub Desktop 2.2+.
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the installation command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For Windows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For macOS:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Verify your Git installation by executing `git --version` and observe the version
    number returned
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You need to restart your Terminal after the installation of a new CLI tool.
    However, you can avoid relaunching your Terminal and save some time by refreshing
    or sourcing your environment variables. On Windows, execute `refreshenv`; on macOS,
    execute `source ~/.bashrc` or `source ~/.zshrc`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Verify your GitHub Desktop installation by launching the application
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sign in to [https://github.com/](https://github.com/) on GitHub Desktop
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once you have created a repository, you can launch the application from your
    Terminal by executing this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you are already in the correct folder, you can type in the following command
    instead:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: For Windows, on GitHub Desktop launch, if you get stuck on the sign in screen,
    close the application, relaunch it as an administrator, complete the setup, and
    then you may use it normally, without having to launch it as an administrator
    again. For more information, refer to [https://desktop.github.com/](https://desktop.github.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Next, we'll go over several strategies for having a smoother experience with
    Git by properly registering your GitHub credentials.
  prefs: []
  type: TYPE_NORMAL
- en: Using your GitHub credentials in Git
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When you interact with your repository on GitHub, the `git` command is leveraged
    by the tools you're using, like your IDE, to push or pull content. To have a smooth
    experience with Git, it is a good idea to register your GitHub credentials with
    Git properly.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three major strategies to accomplish this:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Configure SSH** – which is the best and most secure way to interact with
    any remote computer system, because no passwords are exchanged. You can follow
    the latest guide from GitHub to configure SSH at [https://help.github.com/articles/connecting-to-github-with-ssh](https://help.github.com/articles/connecting-to-github-with-ssh).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Cache your GitHub password in Git** – sometimes SSH won''t be supported by
    the tool you use, so you may need to cache your password. You can do so by executing
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For Windows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For macOS:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: For further guidance, refer to the GitHub guide at [https://help.github.com/articles/caching-your-github-password-in-git](https://help.github.com/articles/caching-your-github-password-in-git).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Create a personal access token** – this is a strategy that falls in between
    SSH and password usage from a security perspective because SSH keys and tokens
    can be revoked at any time from GitHub, but once your password is leaked or compromised,
    you may lose control of everything.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you're using two-factor authentication, which you absolutely should, then
    instead of caching your password, you need to create a personal access token at
    [https://github.com/settings/tokens](https://github.com/settings/tokens) and use
    the token instead of your password. In *Chapter 3*, *Creating a Basic Angular
    App*, we cover how you can set up a token to work with Visual Studio Code, the
    preferred IDE for this book.
  prefs: []
  type: TYPE_NORMAL
- en: Check out TJ Holowaychuk's git-extras tool, which can provide repo summary,
    changelog population, author commit percentage, and more useful information about
    your repos at [https://github.com/tj/git-extras](https://github.com/tj/git-extras).
  prefs: []
  type: TYPE_NORMAL
- en: Node.js
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This section aims to establish a best practice JavaScript development environment.
    I presume that you have an awareness of the modern JavaScript ecosystem and tools.
    At a minimum, make sure to familiarize yourself with the following resources:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Node.js''s website: [https://nodejs.org](https://nodejs.org )'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Npm''s website: [https://www.npmjs.com](https://www.npmjs.com )'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Angular''s website: [https://angular.io](https://angular.io )'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The legacy AngularJS website: [https://angularjs.org/](https://angularjs.org/
    )'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Yarn''s website: [https://yarnpkg.com](https://yarnpkg.com )'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'React''s website: [https://facebook.github.io/react](https://facebook.github.io/react
    )'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Node.js is JavaScript that runs anywhere. It's an open source project that aims
    to run JavaScript on the server, built on Google Chrome's V8 JavaScript engine.
    In late 2015, Node.js stabilized and announced enterprise-friendly 18-month LTS
    cycles that brought predictability and stability to the platform, paired with
    a more frequently updated, but more experimental, latest branch.
  prefs: []
  type: TYPE_NORMAL
- en: Node also ships bundled with npm, the Node Package Manager, and as of 2018,
    npm is the largest repository of JavaScript packages in the world.
  prefs: []
  type: TYPE_NORMAL
- en: For a more detailed look into Node's history, read my two-part article on Node
    at [Bit.ly/NodeJSHistory](http://Bit.ly/NodeJSHistory).
  prefs: []
  type: TYPE_NORMAL
- en: You may have heard of Yarn and how it's faster or better than npm. As of npm
    5, which ships bundled with Node 8, npm is more feature-rich, easier to use, and
    on par with Yarn in terms of performance. Yarn is published by Facebook, which
    also created React. It must be noted that Yarn relies on the npm repository, so
    whichever tool you use, you get access to the same library of packages.
  prefs: []
  type: TYPE_NORMAL
- en: Existing Node.js installation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you have installed Node.js before, when installing a new version of Node
    using choco or brew, ensure that you read the command outputs carefully. Your
    package manager may return caveats or additional instructions to follow so you
    can successfully complete the installation.
  prefs: []
  type: TYPE_NORMAL
- en: It is also highly likely that your system or folder permissions have been edited
    manually in the past, which may interfere with the frustration-free operation
    of Node. If the following commands do not resolve your issues, use the GUI installer
    from Node's website as a last resort.
  prefs: []
  type: TYPE_NORMAL
- en: To see a list of your global install packages, execute `npm list -g --depth=0`.
    To uninstall a global package, execute `npm uninstall -g package-name`. I would
    recommend that you uninstall all globally installed packages and restart from
    scratch with the suggestions provided in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Regardless, you must take care to uninstall all global tools that were installed
    using `npm -g` previously. With every major Node version, there's a chance that
    native bindings between your tool and Node have been invalidated. Further, global
    tools rapidly fall out of date and project-specific tools quickly go out of sync.
    As a result, installing tools globally is now an anti-pattern that has been replaced
    with better techniques, which are covered in the next section and in the Angular
    CLI section in *Chapter 3*, *Creating a Basic Angular App*.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Node.js
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This book presumes that you're using Node 12.13 or a later version. Odd-numbered
    versions of Node are not meant to be long-lived. 8.x.x, 10.x.x, 12.x.x, and so
    on are okay, but avoid 9.x.x, 11.x.x, and so on, at all costs, as they are meant
    to be experimental.
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the installation command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For Windows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For macOS:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Verify the installation of Node by executing `node -v`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify npm by executing `npm -v`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note that on Windows, you should never upgrade your npm version using npm `install
    -g npm`, as highlighted in *Appendix C*, *Keeping Angular and Tools Evergreen*.
    You can find this appendix online from [https://static.packt-cdn.com/downloads/9781838648800_Appendix_C_Keeping_Angular_and_Tools_Evergreen.pdf](https://static.packt-cdn.com/downloads/9781838648800_Appendix_C_Keeping_Angular_and_Tools_Evergreen.)
    or at [https://expertlysimple.io/stay-evergreen](https://expertlysimple.io/stay-evergreen).
    It is highly recommended that you use the npm-windows-upgrade npm package.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For this book, make sure that you've got npm v.6.12+. Now, let's go over some
    handy npm packages you may want to install globally.
  prefs: []
  type: TYPE_NORMAL
- en: Global npm packages
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The npm repository contains numerous useful and mature CLI commands that are
    often cross-platform. Listed here are the ones I rely on frequently and choose
    to install globally for performance reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: '`npx`: Executes CLI tools by downloading the latest version on-demand or the
    project-specific local `node_modules` folder. Npx ships with npm 5+ and allows
    you to run code generators that frequently update without a global install.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rimraf`: The Unix command `rm -rf` works on Windows as well. It''s very useful
    for deleting the `node_modules` folder, especially when Windows is unable to do
    so due to the nested folder structure.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`npm-check-updates`: Analyzes your project folder and reports on which package
    has newer versions or not, with the option to be able to update all of them if
    you so wish. `ncu` for short.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`n`: A dead easy to tool to switch between versions of Node quickly, without
    having to remember the specific version number, which works on macOS/Linux. For
    Windows, you can use the choco package, `nvs`; both `n` and `nvs` are covered
    in the *Appendix C*, *Keeping Angular and Tools Evergreen*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http-server`: A simple, zero-configuration command-line HTTP server, which
    is a great way to locally test static HTML/CSS pages or even the `dist` folder
    of your Angular or React project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`npm-windows-upgrade`: Necessary to upgrade npm on Windows.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`npkill`: Easily find and remove old and heavy `node_modules` folders and reclaim
    gigabytes of disk space.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can use npm-check-updates to keep all of your global packages up to date
    by executing `ncu -g`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you run into EACCES permissions errors while installing global packages on
    macOS, refer to the guide from npm at [https://docs.npmjs.com/getting-started/fixing-npm-permissions](https://docs.npmjs.com/getting-started/fixing-npm-permissions).
  prefs: []
  type: TYPE_NORMAL
- en: Visual Studio Code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Visual Studio Code** (**VS Code**) is one of the best code editors/IDEs out
    there, built and maintained by Microsoft. It''s free and cross-platform. The remarkable
    thing is that VS Code has the lightning-fast performance of a code editor – think
    NotePad++ or Sublime Text – but the feature set and convenience of costly IDEs
    – think Visual Studio or WebStorm. For JavaScript development, this speed is essential
    and is a tremendous quality-of-life improvement for a developer who frequently
    switches back and forth between different projects. VS Code brings together an
    integrated terminal, easy-to-use extension system, transparent settings, excellent
    search and replace functionalities, and, in my opinion, the best Node.js debugger
    that exists.'
  prefs: []
  type: TYPE_NORMAL
- en: This book does not require you to use VS Code. If you wish to use another IDE
    like WebStorm you may do so. WebStorm is a paid product and delivers a great development
    experience out of the box, whereas VS Code requires a lot of customization. This
    book offers automated scripts to configure VS Code for an optimal Angular development
    experience.
  prefs: []
  type: TYPE_NORMAL
- en: You can find more about WebStorm at https://www.jetbrains.com/webstorm.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Visual Studio Code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For Angular development, this book leverages VS Code v1.42+. I highly recommend
    that you also use the latest version of VS Code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the installation command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For Windows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For macOS:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: One of the best features of VS Code is that you can also launch it from the
    CLI. If you're in a folder that you'd like to be editing, simply execute `code
    .` or a particular file by executing `code ~/.bashrc` or `code readme.md`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Verify the installation by launching VS Code
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to a folder and execute `code`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This opens up a new VS Code window with the **Explorer** displaying the contents
    of the current folder
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For more information, refer to [https://code.visualstudio.com](https://code.visualstudio.com).
  prefs: []
  type: TYPE_NORMAL
- en: With VS Code installed, you're ready to start development. If you want a quicker
    start to your Angular adventure, skip ahead to the Angular CLI section and refer
    back to this section when you need Docker and the tools for various cloud services.
  prefs: []
  type: TYPE_NORMAL
- en: Docker
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Docker is a *lightweight* container virtualization platform with workflows and
    tooling that help manage and deploy applications.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Docker
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To be able to build and run containers, you must first install the Docker execution
    environment on your computer.
  prefs: []
  type: TYPE_NORMAL
- en: Windows support for Docker can be challenging. You must have a PC with a CPU
    that supports virtualization extensions, which is not a guarantee on laptops.
    You must also have a Pro version of Windows with Hyper-V enabled. On the flip
    side, Windows Server has native support for Docker, which is an unprecedented
    amount of support shown by Microsoft toward the industry initiative to adopt Docker
    and containerization.
  prefs: []
  type: TYPE_NORMAL
- en: 'Install Docker by executing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For Windows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For macOS:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Execute `docker -v` to verify the installation
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Cloud services
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Throughout the book, we'll use various cloud providers to perform deployments
    of the apps that you are going to build. Each service ships with a CLI tool that
    facilities the deployment of your app from your Terminal or a **continuous integration**
    (**CI**) environment in the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Vercel Now
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Vercel Now is a cloud platform for static sites and serverless functions. With
    a simple CLI command, you host websites and deploy web services instantly. This
    book leverages a free-tier Vercel Now account.
  prefs: []
  type: TYPE_NORMAL
- en: Create a Vercel Now account at [https://vercel.com](https://vercel.com).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Install the CLI tool by executing:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Verify the installation by executing:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Follow the instructions to complete the login process. You should see a message
    similar to the one that follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: For more information, refer to [https://vercel.com](https://vercel.com).
  prefs: []
  type: TYPE_NORMAL
- en: Google Firebase
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Firebase is Google's cloud platform tailored for hosting mobile and web apps
    with authentication, push notifications, cloud functions, databases, machine learning,
    and analytics support. This book leverages a free-tier Firebase account.
  prefs: []
  type: TYPE_NORMAL
- en: Create a Firebase account at [https://firebase.google.com/](https://firebase.google.com/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Install the CLI tool by executing:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Verify the installation by executing:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Follow the instructions to complete the login process. You should see a message
    similar to the one that follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: For more information, refer to [https://firebase.google.com/](https://firebase.google.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Google Cloud
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Google Cloud is Google's world-class cloud infrastructure for enterprises. This
    book leverages Google Cloud Run for managed container deployments to the cloud. When
    you first sign up, you may receive free credits to use Google Cloud. However,
    this is an optional exercise, as you may incur charges while using this service
    if you forget to tear down your deployment.
  prefs: []
  type: TYPE_NORMAL
- en: Create a Google Cloud account at [https://cloud.google.com/](https://cloud.google.com/
    )
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Execute the installation command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For Windows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you have trouble installing `gcloudsdk` from `choco`, then try `scoop`,
    as mentioned earlier in the chapter. Execute the commands that follow:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For macOS:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Verify the installation by executing `gcloud --version`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Execute `gcloud init` to finish the setup
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For more information, refer to [https://cloud.google.com/run/](https://cloud.google.com/run/).
  prefs: []
  type: TYPE_NORMAL
- en: Amazon Web Services
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Amazon Web Services** (**AWS**) is a globally deployed cloud infrastructure
    provided by Amazon. AWS is a widely popular tool with businesses and governments,
    making it a lucrative service for IT professionals. *Chapter 13*, *Highly Available
    Cloud Infrastructure on AWS*, goes in-depth on how to work with AWS and perform a scalable
    container-based deployment.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the installation command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For Windows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For macOS:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that running the upgrade command on choco and brew ensures that you have
    the latest version of any given tool if they were previously installed on your
    environment.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Verify the installation by executing `aws --version`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For more information, refer to [https://aws.amazon.com/](https://aws.amazon.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Setup automation for Windows and macOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the beginning of the chapter, I proclaimed *anything that can be expressed
    as a CLI command can also be automated*. Throughout the setup process, we have
    ensured that every tool being used was set up and its functionality was verifiable
    through a CLI command. This means we can easily create a PowerShell or bash script
    to string these commands together and ease the task of setting up and verifying
    new environments.
  prefs: []
  type: TYPE_NORMAL
- en: Let's implement rudimentary but effective scripts to help set up your development
    environment.
  prefs: []
  type: TYPE_NORMAL
- en: PowerShell script
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For Windows-based development environments, you need to create a PowerShell
    script.
  prefs: []
  type: TYPE_NORMAL
- en: Create a file named `setup-windows-dev-env.ps1`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Insert the following text, also available at [https://github.com/duluca/web-dev-environment-setup](https://github.com/duluca/web-dev-environment-setup),
    in the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To execute the script, run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Alternatively, you can install and execute the script directly from the PowerShell
    Gallery, located at [https://www.powershellgallery.com](https://www.powershellgallery.com),
    by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: By executing this script, you have successfully set up your development environment
    on Windows.
  prefs: []
  type: TYPE_NORMAL
- en: If you're interested in publishing your own scripts to the PowerShell Gallery
    or generally interested in advancing your PowerShell skills, I suggest you install
    PowerShell Core, a multi-platform version of PowerShell. from [https://github.com/PowerShell/PowerShell](https://github.com/PowerShell/PowerShell).
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's look into how you can achieve a similar setup on Mac.
  prefs: []
  type: TYPE_NORMAL
- en: Bash script
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For Mac-based development environments, you need to create a bash script.
  prefs: []
  type: TYPE_NORMAL
- en: Create a file named `setup-mac-dev-env.sh`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run `chmod a+x setup-mac-dev-env.sh` to make the file executable
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Insert the following text, also available at [https://github.com/duluca/web-dev-environment-setup](https://github.com/duluca/web-dev-environment-setup),
    in the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To execute the script, run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'By executing this script, you have successfully set up your development environment
    on Mac. Here is an example of a more sophisticated install and verify routine,
    where you can check to see if a particular program, like `brew` or `node`, is
    already installed, before attempting to install them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Now, you have a pretty good idea of what it looks like to automate the execution
    of your scripts. The harsh reality is that these scripts do not represent a very
    capable or resilient solution. Scripts can't be executed or managed remotely,
    and they can't quickly recover from errors or survive machine boot cycles. Besides,
    your IT requirements may be above and beyond what is covered here.
  prefs: []
  type: TYPE_NORMAL
- en: If you deal with large teams and have a frequent turnover of staff, an automation
    tool pays dividends handsomely, whereas if you're on your own or part of a smaller,
    stable team, it is overkill. I encourage you to explore tools such as Puppet,
    Chef, Ansible, and Vagrant to help you decide which one best fits your needs or
    whether a simple script is just good enough.
  prefs: []
  type: TYPE_NORMAL
- en: The Angular CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Angular CLI tool, ng, is an official Angular project to ensure that newly
    created Angular applications have a uniform architecture, following the best practices
    perfected by the community over time. This means that any Angular application
    you encounter going forward should have the same general shape.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up your development directory
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Setting up a dedicated `dev` directory is a lifesaver. Since all the data under
    this directory is backed up using GitHub, you can safely configure your antivirus,
    cloud sync, or backup software to ignore it. This helps significantly reduce CPU,
    disk, and network utilization. As a full-stack developer, you're likely to be
    multitasking a lot, so avoiding unnecessary activity has a net positive impact
    on performance, power, and data consumption daily, especially if your development
    environment is a laptop that is resource-starved or you wish to squeeze as much
    battery life as possible when you're on the move.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a `dev` folder directly in the `c:\` drive is very important on Windows.
    Earlier versions of Windows, or rather NTFS, can't handle file paths longer than
    260 characters. This may seem adequate at first, but when you install npm packages
    in a folder structure that is already deep in the hierarchy, the `node_modules`
    folder structure can get deep enough to hit this limit very easily. With npm 3+,
    a new, flatter package installation strategy was introduced, which helps with
    npm-related issues, but being as close to the root folder as possible helps tremendously
    with any tool.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create your `dev` folder using the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: 'For Windows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'For macOS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: In Unix-based operating systems, `~` (pronounced tilde) is a shortcut to the
    current user's home directory, which resides under `/Users/your-user-name`.
  prefs: []
  type: TYPE_NORMAL
- en: Now that your development directory is ready, let's start with generating your
    Angular application.
  prefs: []
  type: TYPE_NORMAL
- en: Generating your Angular application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Angular CLI is an official Angular project to ensure that newly created
    Angular applications have a uniform architecture, following the best practices
    perfected by the community over time. This means that any Angular application
    you encounter going forward should have the same general shape. The Angular CLI
    goes beyond initial code generation; you'll use it frequently to create new components,
    directives, pipes, services, modules, and more. The Angular CLI also helps during
    development, with live-reloading features so that you can quickly see the results
    of your changes. The Angular CLI can also test, lint, and build optimized versions
    of your code for a production release. Furthermore, as new Angular versions are
    released, the Angular CLI helps you upgrade your code by automatically rewriting
    portions of it so that it remains compatible with potential breaking changes.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Angular CLI
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The documentation at [https://angular.io/guide/quickstart](https://angular.io/guide/quickstart
    ) guides you on how to install `@angular/cli` as a global npm package. Do not
    do this. Over time, as the Angular CLI is upgraded, it is a constant irritant
    to have to keep the global and the in-project version in sync. If you don't, the
    tool complains endlessly. Additionally, if you are working on multiple projects,
    you end up with varying versions of the Angular CLI over time. As a result, your
    commands may not return the results you expect or the results your team members
    get.
  prefs: []
  type: TYPE_NORMAL
- en: The strategy detailed in the next section makes the initial configuration of
    your Angular project a bit more complicated than it needs to be; however, you'll
    more than make up for this pain if you have to return to a project a few months
    or a year later. In that case, you could use the version of the tool that you
    last used on the project, instead of some future version that may require upgrades
    that you're not willing to perform. In the next section, you'll use this best
    practice to initialize your Angular app.
  prefs: []
  type: TYPE_NORMAL
- en: Initializing your Angular app
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The main way to initialize your app is by using the Angular CLI. Let''s initialize
    the application for development using `npx`, which is already installed on your
    system from when you installed the latest version of Node LTS, from PowerShell/Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: Under your `dev` folder, execute `npx @angular/cli new local-weather-app`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **No**, when asked **Would you like to add Angular routing?**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **CSS**, when asked **Which stylesheet format would you like to use?**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On your terminal, you should see a success message similar to this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Your project folder—`local-weather-app`—has been initialized as a Git repository
    and scaffolded with the initial file and folder structure, which should look like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: The alias for `@angular/cli` is `ng`. If you were to install the Angular CLI
    globally, you would execute `ng new local-weather-app`, but we didn't do this.
    So, it is essential to remember that, going forward, you execute the `ng` command,
    but this time under the `local-weather-app` directory. The latest version of the
    Angular CLI has been installed under the `node_modules/.bin` directory so that
    you can run `ng` commands such as `npx ng generate component my-new-component`
    and continue working efficiently.
  prefs: []
  type: TYPE_NORMAL
- en: If you are on macOS, you can further improve your development experience by
    implementing shell auto-fallback, which removes the necessity of having to use
    the `npx` command. If an unknown command is found, npx takes over the request.
    If the package already locally exists under `node_modules/.bin`, npx passes along
    your request to the correct binary. So, you can run commands like `ng g c my-new-component`
    as if they're globally installed. Refer to npx's readme on how to set this up,
    at [npmjs.com/package/npx#shell-auto-fallback](http://npmjs.com/package/npx#shell-auto-fallback).
  prefs: []
  type: TYPE_NORMAL
- en: Publishing a Git repository using GitHub Desktop
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'GitHub Desktop allows you to create a new repository directly within the application:'
  prefs: []
  type: TYPE_NORMAL
- en: Open GitHub for Desktop
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**File** | **Add local repository...**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Locate the `local-weather-app` folder by clicking on **Choose...**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Add repository**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note that the Angular CLI already created the first commit for you in the **History**
    tab
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally, click on **Publish repository**, marked in the following screenshot
    as **6**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B14094_02_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.4: GitHub Desktop'
  prefs: []
  type: TYPE_NORMAL
- en: Inspecting and updating package.json
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`Package.json` is the single most important configuration file that you should
    be keenly aware of at all times. Your project''s scripts, runtime, and development
    dependencies are stored in this file.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `package.json` and locate the name and version properties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Rename your app to whatever you wish; I used `localcast-weather`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set your version number to `1.0.0`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`npm` uses semantic versioning (semver), where version number digits represent
    Major.Minor.Patch increments. Semver starts version numbers at `1.0.0` for any
    published API, though it doesn''t prevent `0.x.x` versioning. As the author of
    a web application, the versioning of your app has no real impact on you, outside
    of internal tooling, team, or company communication purposes. However, the versioning
    of your dependencies is critical to the reliability of your application. In summary,
    patch versions should just be bug fixes. Minor versions add functionality without
    breaking the existing features, and major version increments are free to make
    incompatible API changes. However, any update is risky to the tested behavior
    of your application. Therefore, the `package-lock.json` file stores the entire
    dependency tree of your application, so the exact state of your application can
    be replicated by other developers or CI servers. For more information, visit:
    [https://semver.org/](https://semver.org/).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the following code block, observe that the `scripts` property contains a
    collection of helpful starter scripts that you can expand on. The `start` and
    `test` commands are npm defaults, so they can just be executed by `npm start`
    or `npm test`. However, the other commands are custom commands that must be prepended
    with the `run` keyword. For example, in order to build your application, you must
    use `npm run build`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Before the introduction of npx, if you wanted to use the Angular CLI without
    a global install, you would have to run it with `npm run ng -- g c my-new-component`.
    The double-dashes are needed to let npm know where the command-line tool name
    ends and the options begin. For example, in order to start your Angular application
    on a port other than the default `4200`, you need to run `npm start -- --port
    5000`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update your `package.json` file to run your development version of the app
    from a little-used port like `5000` as the new default behavior:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Under the dependencies property, you can observe your runtime dependencies.
    These are libraries that get packaged up alongside your code and shipped to the
    client browser. It''s essential to keep this list to a minimum:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding example, all Angular components are on the same version. As
    you install additional Angular components or upgrade individual ones, it is advisable
    to keep all Angular packages on the same version. This is especially easy to do
    since npm doesn't require the `--save` option anymore to permanently update the
    package version. For example, just executing `npm install @angular/router` is
    sufficient to update the version in `package.json`. This is a positive change
    overall, since what you see in `package.json` matches what is actually installed.
    However, you must be careful, because npm also automatically updates `package-lock.json`,
    which propagates your, potentially unintended, changes to your team members.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your development dependencies are stored under the `devDependencies` property.
    When installing new tools for your project, you must take care to append the command
    with `--save-dev` so that your dependency is correctly categorized. Dev dependencies
    are only used during development and not shipped to the client browser. You should
    familiarize yourself with every single one of these packages and their specific
    purpose. If you are unfamiliar with a package shown as we move on, your best resource
    to learn more about them is [https://www.npmjs.com/](https://www.npmjs.com/):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'The characters in front of the version numbers have specific meanings in semver:'
  prefs: []
  type: TYPE_NORMAL
- en: The tilde, `~`, enables tilde ranges when all three digits of the version number
    are defined, allowing patch version upgrades to be automatically applied
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The up-caret character, `^`, enables caret ranges, allowing minor version upgrades
    to be automatically applied
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A lack of any character signals npm to install that exact version of the library
    on your machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You may notice that major version upgrades aren''t allowed to happen automatically.
    In general, updating packages can be risky. In order to ensure no package is updating
    without your explicit knowledge, you may install exact version packages by using
    npm''s `--save-exact` option. Let''s experiment with this behavior by installing
    an npm package that I published called `dev-norms`, a CLI tool that generates
    a markdown file with sensible default norms for your team to have a conversation
    about, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Under the `local-weather-app` directory, execute `npm install dev-norms --save-dev
    --save-exact`. Note that "`dev-norms`": "`1.7.0`" or similar has been added to
    `package.json` with `package-lock.json` automatically updated to reflect the changes
    accordingly.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the tool is installed, execute `npx dev-norms create`. A file named `dev-norms.md`
    has been created containing the developer norms mentioned previously.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save your changes to `package.json`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Working with stale packages comes with its risks. With npm 6, the `npm audit`
    command has been introduced to make you aware of any vulnerabilities discovered
    in packages you're using. During `npm install`, if you receive any vulnerability
    notices, you may execute `npm audit` to find out details about any potential risk.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you'll commit the changes you have made to Git.
  prefs: []
  type: TYPE_NORMAL
- en: Committing code using VS Code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To commit your changes to Git and then synchronize your commits to GitHub,
    you can use VS Code:'
  prefs: []
  type: TYPE_NORMAL
- en: Switch over to the **Source Control** pane, marked as **1** here:![](img/B14094_02_05.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 2.5: Visual Studio Code Source Control pane'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Enter a commit message in the box marked as **2**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the check-mark icon, marked as **3**, to commit your changes
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, synchronize your changes with your GitHub repository by clicking on
    the refresh icon, marked as **4**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you have two-factor authentication enabled, as you should, GitHub may ask
    for your credentials. In this case, you need to create a personal access token.
    Follow the instructions below to get this done:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to the page [https://github.com/settings/tokens](https://github.com/settings/tokens
    )
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Generate a new token and copy it
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Attempt to re-sync your change within VS Code
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ignore the GitHub authentication window, which presents you with VS Code's credential
    input bar
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter your GitHub username, not your email
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Paste in the token as your password
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The sync should succeed, and subsequent syncs shouldn't prompt for a password
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: See the Git and Github Desktop section earlier in this chapter for a wider discussion
    of the various methods you can use to connect your Git client to GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: Going forward, you can do most Git operations from within VS Code.
  prefs: []
  type: TYPE_NORMAL
- en: Running your Angular app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Run your Angular app to check whether it works. During development, you can
    execute `npm start` through the `ng serve` command; this action transpiles, packages, and
    serves the code on localhost with live-reloading enabled:'
  prefs: []
  type: TYPE_NORMAL
- en: Execute `npm start`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to `http://localhost:5000`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should see a rendered page similar to this:![](img/B14094_02_06.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 2.6: Default Angular CLI landing page'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Stop your application by pressing `Ctrl` + `C` in the integrated terminal
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Congrats! You're ready to start developing your web application. If you ran
    into any trouble during your setup, see the next section on how you can verify
    your code against the sample project on GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: Verifying your code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The most up-to-date versions of the sample code for the book are on GitHub at
    the repository linked following. The repository contains the final and completed
    state of the code. You can verify your progress at the end of a chapter by looking
    for the end-of-chapter snapshot of code under the `projects` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'For *Chapter 2*:'
  prefs: []
  type: TYPE_NORMAL
- en: Clone the repo [https://github.com/duluca/local-weather-app](https://github.com/duluca/local-weather-app
    )
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Execute `npm install` on the root folder to install dependencies
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The code sample for this chapter is under the sub-folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To run the Angular app for this chapter, execute:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To run Angular Unit Tests for this chapter, execute:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Beware that the source code in the book or on GitHub may not always match the
    code generated by Angular CLI. There may also be slight differences in implementation
    between the code in the book and what's on GitHub because the ecosystem is ever
    evolving. It is natural for the sample code to change over time. Also on GitHub,
    expect to find corrections, fixes to support newer versions of libraries, or side-by-side
    implementations of multiple techniques for the reader to observe. The reader is
    only expected to implement the ideal solution recommended in the book. If you
    find errors or have questions, please create an issue or submit a pull request
    on GitHub for the benefit of all readers.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, I'll cover how you can optimize VS Code for Angular for
    the best possible development experience.
  prefs: []
  type: TYPE_NORMAL
- en: Optimizing VS Code for Angular
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is essential to optimize your IDE to have a great development experience.
    If you leverage the automated tools that I present in this section, you can quickly
    configure your IDE and your Angular project with dozens of settings that work
    well together.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring your project automatically
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To quickly apply configuration steps covered in the upcoming chapters, run
    the commands that follow:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the Angular VS Code task:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Apply the Angular VS Code configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install the npm Scripts for the Docker task:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Apply the npm Scripts for Docker configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: These settings are continually tweaked to adapt to the ever-evolving landscape
    of extensions, plugins, Angular, and VS Code. Always make sure to install a fresh
    version of the task by rerunning the install command to get the latest version.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Execute `npm run style:fix`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Execute `npm run lint:fix`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For more information on the mrm tasks, refer to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/expertly-simple/mrm-task-angular-vscode](https://github.com/expertly-simple/mrm-task-angular-vscode)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/expertly-simple/mrm-task-npm-docker](https://github.com/expertly-simple/mrm-task-npm-docker)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/expertly-simple/mrm-task-npm-aws](https://github.com/expertly-simple/mrm-task-npm-aws)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that `mrm-task-npm-aws` sets up npm scripts for AWS ECS, which is used
    in *Chapter 13*, *Highly Available Cloud Infrastructure on AWS*.
  prefs: []
  type: TYPE_NORMAL
- en: You may verify your configuration against the sample projects on GitHub. However,
    note that the configuration pieces will be applied at the root of the repository
    and not under the `projects` folder.
  prefs: []
  type: TYPE_NORMAL
- en: The next three sections cover the settings that were automatically applied previously.
    Feel free to skip ahead and refer back if you have questions.
  prefs: []
  type: TYPE_NORMAL
- en: VS Code auto save
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Saving files all the time can get tedious. You can enable automatic saving
    by doing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Open VS Code
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Toggle the setting under **File** | **Auto Save**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can further customize many aspects of VS Code's behavior by launching **Preferences**.
    The keyboard shortcut to launch **Preferences** is [`Ctrl` + `,`] on Windows and
    [![](img/B14094_02_0011.png) + `,`] on macOS.
  prefs: []
  type: TYPE_NORMAL
- en: IDE settings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can share such settings with your coworkers by creating a `.vscode` folder
    in the root of your project directory and placing a `settings.json` file in it.
    If you commit this file to the repository, everyone will share the same IDE experience.
    Unfortunately, individuals aren't able to override these settings with their local
    preferences, so ensure that shared settings are minimal and are agreed upon as
    a team norm.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the customizations that I use for an optimal, battery-life-conscious
    Angular development experience:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: In later sections, as we add tools that enforce our coding style, be careful
    not to introduce new settings that overlap or contradict each other.
  prefs: []
  type: TYPE_NORMAL
- en: IDE extensions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For a magical development experience with VS Code and Angular, you should install
    the Angular Essentials extension pack created and curated by John Papa. John Papa
    is one of the leading champions and thought leaders in the Angular community.
    He continuously and relentlessly seeks the best possible development experience
    you can attain so that you are more productive and happier as a developer. To
    learn more about Angular Essentials, see this blog post at [https://johnpapa.net/rec-ng-extensions](https://johnpapa.net/rec-ng-extensions)
    and the GitHub repo at [https://github.com/johnpapa/vscode-angular-essentials](https://github.com/johnpapa/vscode-angular-essentials).
  prefs: []
  type: TYPE_NORMAL
- en: I highly recommend you follow John Papa on Twitter at `@john_papa`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similar to settings, you can also share recommended extensions via a JSON file.
    These are the extensions that I use for Angular development:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: VS Code also recommends some extensions for you to install. I would caution
    against installing too many extensions, as these noticeably start slowing down
    the launch performance and optimal operation of VS Code.
  prefs: []
  type: TYPE_NORMAL
- en: The VS Code ecosystem is an ever-evolving, dynamic, and rich ecosystem. As such,
    certain extensions or settings may disappear, stop working, or have bugs in them.
    If you run into any trouble or are simply curious, you can find the latest versions
    of my preferred VS Code configuration files on GitHub at [http://bit.ly/ngCodeSettings](http://bit.ly/ngCodeSettings).
  prefs: []
  type: TYPE_NORMAL
- en: Scripting code styling and linting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can customize the code styling enforcement and code generation behavior
    in VS Code and the Angular CLI. The most crucial goal of automating the enforcement
    of code styling and linting rules is to set common ground between developers.
    If the team can't agree on what styling to follow, a coin toss is better than
    no agreement. Development teams should be focused on code quality and let automated
    tools worry about the indentation of their code, location of brackets, and spaces
    between parentheses. In large teams, any deviation in styling can cause significant
    headaches with merge conflicts. It is highly recommended that you implement mechanisms
    to enforce standards.
  prefs: []
  type: TYPE_NORMAL
- en: 'I prefer StandardJS settings for JavaScript, which codify a minimal approach
    to writing code while maintaining high readability. This means two spaces for
    tabs and no semicolons. In addition to the reduced keystrokes, StandardJS also
    takes less horizontal space, which is especially valuable when your IDE can only
    utilize half of the screen, with the other half taken up by the browser. You can
    read more about StandardJS at: [https://standardjs.com/](https://standardjs.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'With the default settings, your code looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'With StandardJS settings, your code looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: If you don't like this style, it is okay. While I'll be sharing my preferred
    settings following, feel free to tweak them to your liking. The mechanism we implement
    to enforce the rules remains the same regardless.
  prefs: []
  type: TYPE_NORMAL
- en: 'To apply and enforce code styling rules, we use some tools that provide both
    a CLI tool and a VS Code extension:'
  prefs: []
  type: TYPE_NORMAL
- en: Prettier – used to format `.ts` files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ImportSort/SortImports – used to organize TypeScript import statements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Beautify – used to format `.html` files,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TSLint – used as a static code analysis tool to check code readability, maintainability,
    and functionality errors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Our goal is to end up with four scripts:'
  prefs: []
  type: TYPE_NORMAL
- en: '`style` – to check if our code adheres to styling rules'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`style:fix` – to automatically format code files as per styling rules'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`lint` – to check if our code has any linting errors'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`lint:fix` – to automatically fix auto-fixable linting errors'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The style and lint commands would be utilized by our CI server to ensure that
    every team member is adhering to the same coding standards. The `style:fix` and
    `lint:fix` commands would help developers adhere to coding standards with as little
    effort as possible.
  prefs: []
  type: TYPE_NORMAL
- en: These tools are constantly updated. The behavior of these tools may shift over
    time, so keep an eye out and don't hesitate to experiment with adding/removing
    tools to this mixture to achieve the configuration that works for you.
  prefs: []
  type: TYPE_NORMAL
- en: Before we set up our dependencies and configuration files, ensure that all the
    extensions recommended in the IDE extensions section are installed.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring tooling
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can start making the configuration changes by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Make sure the **Prettier – Code formatter**, **TSLint**, **sort-imports**, and
    **Beautify** extensions are installed (already included in `extensions.json` from
    the previous section)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Install the CLI tools by executing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With npm, you can use `i` as an alias for `install` and `-D` instead of the
    more verbose `--save- dev` option. However, if you mistype `-D` as `-d`, you end
    up saving the package as a production dependency.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Edit `package.json` by appending an `importSort` attribute at the end of the
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the `tslint.json` rules for integration with Prettier and `tslint-etc`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a new file to the root of your project, named `.jsbeautifyrc`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a new file to the root of your project, named `.prettierrc`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a new file to the root of your project, named `.prettierignore`. Note that
    this file doesn''t have curly brackets:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now we are done configuring all the tooling necessary to implement our style
    and lint scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing a style checker and fixer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let's implement npm scripts for style and `style:fix` commands. Npm scripts
    are a great way to document CLI scripts that your team needs to execute across
    different platforms and even on a CI server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s add our first script:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `package.json` scripts attribute to add `style` and `style:fix` commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Execute `npm run style` to see the files that do not adhere to styling rules
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Execute `npm run style:fix` to update all your files to the new style
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Observe all the file changes in GitHub Desktop
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Commit your changes
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you utilize inline templates in Angular, the inlined portion of HTML is
    formatted by Prettier instead of Beautify. In most of these cases, your code will
    look good, but if your HTML elements have too many attributes, your code will
    be formatted in a very verbose manner. In order to prevent this from happening,
    you may select the relevant HTML code and run the **Beautify selection** command
    within VS Code. If you add `// prettier-ignore` above the template property, Prettier
    will stop messing up your beautified HTML.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's configure our linting scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing a lint checker and fixer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A `lint` command already exists in `package.json`. We overwrite the existing
    `lint` command with our own and implement an additional `lint:fix` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the new scripts:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `package.json` scripts attribute to replace `lint` and add `lint:fix`
    commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that unlike the style scripts, we're excluding `test.ts` and `polyfills.ts`
    from being linted. These files ship with linting errors; they are unlikely to
    be edited frequently and since they have no bearing on the quality of our code,
    we can safely ignore them.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Execute `npm run lint` to see the files that have linting errors
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Execute `npm run lint:fix` to fix any auto-fixable errors
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If there are further errors, then `Ctrl`/`cmd` + `click` on the files and manually
    fix the errors
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Observe all the file changes in GitHub Desktop
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Commit your changes
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Don't forget to push your changes to your repository!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sometimes, as you type in new code or generate new components using the Angular CLI,
    you may encounter double-quotes or semicolons being underlined with a red squiggly
    line to indicate an issue. We have configured VS Code to automatically format
    files on saving, which happens automatically when the window loses focus. When
    auto-formatting is triggered, the file updates and formatting related errors disappear.
  prefs: []
  type: TYPE_NORMAL
- en: When we cover CI in *Chapter 4*, *Automated Testing, CI, and Release to Production*,
    we are going to run our style and lint checker as part of our pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: Next, configure the ng tool to get the autocomplete functionality in the terminal.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Angular CLI autocomplete
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can get an autocomplete experience in your terminal when using the Angular
    CLI. Execute the appropriate command for your `*nix` environment:'
  prefs: []
  type: TYPE_NORMAL
- en: 'For the bash shell:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For the zsh shell:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For Windows users using the Git bash shell:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next, let's learn about the VS Code Auto Fixer.
  prefs: []
  type: TYPE_NORMAL
- en: VS Code Auto Fixer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Sometimes, a yellow bulb icon appears next to a line of code. This might happen
    because you have typed some code that violates a rule defined in `tslint.json`.
    If you click on the bulb, you will see an action labeled as a **Fix**. You can
    take advantage of these auto-fixers to allow VS Code to fix your code automatically.
    The screenshot that follows shows an example of an **Unnecessary semicolon** issue:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B14094_02_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.7: VS Code Auto Fixer'
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations – you're done setting up your development environment!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you mastered the use of CLI-based package managers for both
    Windows and macOS to speed up and automate the setup of development environments
    for you and your colleagues. You also created your first Angular project and optimized
    its configuration for development using Visual Studio Code. You then implemented
    automated style checkers and fixers to enforce coding standards and styling across
    your team. The lint checker and fixer you implemented will automatically catch
    potential coding errors and maintainability issues.
  prefs: []
  type: TYPE_NORMAL
- en: The automated scripts you have created codify your team norms and document them for
    new and existing members alike. By reducing variance from one developer's environment
    to the next, your team can overcome any individual configuration issue more efficiently
    and remain focused on the execution of the task at hand. With a collective understanding
    of a common environment, no single individual on the team carries the burden of
    having to help troubleshoot everyone else's issues. The same idea applies to the
    shape and style of your code files.
  prefs: []
  type: TYPE_NORMAL
- en: When a team member looks at another team member's code, it looks stylistically
    identical, which makes it easier to troubleshoot and debug an issue. As a result,
    your team is more productive. By leveraging more sophisticated and resilient tools,
    mid-to-large sized organizations can achieve considerable savings in their IT
    budgets.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you're going to learn more about the Angular platform,
    leverage Kanban using GitHub projects and GitHub issues, learn Angular fundamentals
    to build a simple web app with a full-stack architecture in mind, and get introduced
    to reactive programming with RxJS.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The article on Automating the Setup of the Local Developer Machine by Vishwas
    Parameshwarappa is a great place to start for using Vagrant, found at [https://www.vagrantup.com](https://www.vagrantup.com).
    You can find the article at [https://Red-gate.com/simple-talk/sysadmin/general/automating-setup-local-developer-machine](https://Red-gate.com/simple-talk/sysadmin/general/automating-setup-local-developer-machine).
  prefs: []
  type: TYPE_NORMAL
- en: Other tools include Chef, found at [https://www.chef.io/](https://www.chef.io/),
    and Puppet, found at [https://puppet.com](https://puppet.com). Some developers
    prefer to work within Docker containers during coding, found at [https://www.docker.com](https://www.docker.com).
    This is done to isolate different versions of SDKs from each other. Specific development
    tools cannot be scoped to a given folder and must be installed globally or OS-wide,
    making it very difficult to work on multiple projects at the same time. I recommend
    staying away from this type of setup if you can avoid it. In the future, I expect
    such chores are going to be automated by IDEs, as CPU core counts increase, and
    virtualization tech has better hardware acceleration.
  prefs: []
  type: TYPE_NORMAL
- en: We'll leverage Docker a little later in this book, but we'll use it to isolate
    our production software dependencies from their surrounding elements, like our
    local development environment or a server in the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Answer the following questions as best as you can to ensure that you've understood
    the key concepts from this chapter without Googling. Do you need help answering
    the questions? See *Appendix D*, *Self-Assessment Answers* online at [https://static.packt-cdn.com/downloads/9781838648800_Appendix_D_Self-Assessment_Answers.pdf](https://static.packt-cdn.com/downloads/9781838648800_Appendix_D_Self-Assessment_Answers.pdf)
    or visit [https://expertlysimple.io/angular-self-assessment](https://expertlysimple.io/angular-self-assessment).
  prefs: []
  type: TYPE_NORMAL
- en: What are the motivations for using a CLI tool as opposed to a GUI?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For your specific operating system, what is the suggested package manager to
    use?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are some of the benefits of using a package manager?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the benefits of keeping the development environments of the members
    of your development team as similar to one another as possible?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
