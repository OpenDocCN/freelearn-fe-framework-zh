["```js\nvar mark_start = Date.now();\ndoSomething(); \nvar duration = (Date.now() - mark_start);\n```", "```js\nvar mark_start = performance.now();\ndoSomething(); \nvar duration = (performance.now() - mark_start);\n\n```", "```js\nperformance.mark('startTask') \ndoSomething(); \nperformance.mark('endTask');\nperformance.measure('taskDuration','startTask','endTask');\n```", "```js\nperformance.getEntriesByName('taskDuration')\n```", "```js\n// Vibrate for one second\nnavigator.vibrate(1000);\n\n// Vibrate for two seconds, wait one second, \n// then vibrate for two seconds\nnavigator.vibrate([2000, 1000, 2000]);\n\n// Any of these will terminate the vibration early\nnavigator.vibrate();\nnavigator.vibrate(0);\nnavigator.vibrate([]);\n```", "```js\n// Super Mario Theme Intro\nnavigator.vibrate([125,75,125,275,200,275,125,75,125,275,200,600,200,600]);\n// The Darth Vader Themenavigator.vibrate([500,110,500,110,450,110,200,110,170,40,450,110,200,110,170,40,500]);\n\n// James Bond 007\nnavigator.vibrate([200,100,200,275,425,100,200,100,200,275,425,100,75,25,75,125,75,125,75,25,75,125,100,100]); \n```", "```js\ncomponentWillMount() { \n  if(\"battery\" in navigator) {\n    navigator.getBattery().then( (battery)=> {\n      battery.addEventListener('chargingchange',\n        this.onChargingchange);\n\n      battery.addEventListener('levelchange',\n        this.onLevelchange);\n\n      battery.addEventListener('chargingtimechange',\n        this.onChargingtimechange);\n\n      battery.addEventListener('dischargingtimechange',\n        this.onDischargingtimechange);\n    });\n  }\n}\n```", "```js\nonChargingchange(){\n  console.log(\"Battery charging? \" + \n    (navigator.battery.charging ? \"Yes\" : \"No\"));\n},\nonLevelchange() {\n  console.log(\"Battery level: \" + \n    navigator.battery.level * 100 + \"%\");\n},\nonChargingtimechange() {\n  console.log(\"Battery charging time: \" + \n    navigator.battery.chargingTime + \" seconds\");\n},\nonDischargingtimechange() {\n  console.log(\"Battery discharging time: \" + \n    navigator.battery.dischargingTime + \" seconds\");\n}\n```", "```js\ncomponentWillMount(){   \n  document.addEventListener('visibilitychange', \n    this.onVisibilityChange);\n}\n```", "```js\nonVisibilityChange(event){\n    console.log(document.hidden);\n    console.log(document.visibilityState);\n}\n```", "```js\n// Retrieves your current location with all options\nvar options = {\n  enableHighAccuracy: true,\n  timeout: 1000,\n  maximumAge: 0\n};\n\nvar success = (pos) => {\n  var coords = pos.coords;\n  console.log('Your current position is: ' +\n  '\\nLatitude : ' + coords.latitude +\n  '\\nLongitude: ' + coords.longitude +\n  '\\nAccuracy is more or less ' + coords.accuracy + ' meters.'+\n  '\\nLocation detected: '+new Date(pos.timestamp));\n};\n\nvar error = (err) => {\n  console.warn('ERROR(' + err.code + '): ' + err.message);\n};\n\nnavigator.geolocation.getCurrentPosition(success, error, options);\n```", "```js\n// Sets up a basic watcher\nlet watcher=navigator.geolocation.watchPosition(\n  (pos) =>{console.log(pos.coords)}, \n  (err)=> {console.warn('ERROR(' + err.code + '): ' + err.message)}, \n  null);\n\n// Removes the watcher\nnavigator.geolocation.clearWatch(watcher)\n```", "```js\nnpm install --save-dev classnames@2.2.1 react-bootstrap@0.29.3 reflux@0.4.1 url@0.11.0 lodash.pick@3.1.0 lodash.identiy@3.0.0 leaflet@0.7.7\n\n```", "```js\n\"devDependencies\": {\n   \"babel-preset-es2015\": \"^6.3.13\",\n   \"babel-preset-react\": \"^6.3.13\",\n   \"babelify\": \"^7.2.0\",\n   \"browser-sync\": \"^2.10.0\",\n   \"browserify\": \"^13.0.0\",\n   \"browserify-middleware\": \"^7.0.0\",\n   \"classnames\": \"^2.2.1\",\n   \"lodash\": \"^4.11.2\",\n   \"react\": \"^15.0.2\",\n   \"react-bootstrap\": \"^0.29.3\",\n   \"react-dom\": \"^15.0.2\",\n   \"reactify\": \"^1.1.1\",\n   \"reflux\": \"^0.4.1\",\n   \"serve-favicon\": \"^2.3.0\",\n   \"superagent\": \"^1.5.0\",\n   \"url\": \"^0.11.0\",\n   \"watchify\": \"^3.6.1\"\n}\n```", "```js\n<link rel=\"stylesheet\" type=\"text/css\" href=\"//netdna.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css\"/>\n<link rel=\"stylesheet\" \n href=\"//cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/leaflet.css\"/>\n```", "```js\n/** SPINNER **/\n.spinner {\n  width: 40px;\n  height: 40px;\n\n  position: relative;\n  margin: 100px auto;\n}\n\n.double-bounce1, .double-bounce2 {\n  width: 100%;\n  height: 100%;\n  border-radius: 50%;\n  background-color: #333;\n  opacity: 0.6;\n  position: absolute;\n  top: 0;\n  left: 0;\n\n  -webkit-animation: sk-bounce 2.0s infinite ease-in-out;\n  animation: sk-bounce 2.0s infinite ease-in-out;\n}\n\n.double-bounce2 {\n  -webkit-animation-delay: -1.0s;\n  animation-delay: -1.0s;\n}\n\n@-webkit-keyframes sk-bounce {\n  0%, 100% { -webkit-transform: scale(0.0) }\n  50% { -webkit-transform: scale(1.0) }\n}\n\n@keyframes sk-bounce {\n  0%, 100% {\n    transform: scale(0.0);\n    -webkit-transform: scale(0.0);\n  } 50% {\n    transform: scale(1.0);\n    -webkit-transform: scale(1.0);\n  }\n}\n```", "```js\n/** MAPS **/\n.static-map{\n  margin: 20px 0 0 0;\n}\n\n.map-title {\n  color: #DDD;\n  position: absolute;\n  bottom: 10px;\n  margin: 0;\n  padding: 0;\n  left: 35%;\n  font-size: 18px;\n  text-shadow: 3px 3px 8px rgba(200, 200, 200, 1);\n}\n\n.map-button{\n  height: 100px;\n  margin-bottom: 20px;\n}\n\n.map {\n  position: absolute;\n  left: 15px;\n  right: 0;\n  top: 30px;\n  bottom: 0;\n}\n\n.buttonBack {\n  position: absolute;\n  padding: 10px;\n  width:55px;\n  height:60px;\n  top: -80px;\n  right: 25px;\n  z-index: 10;\n}\n\n.buttonMinus {\n  position: absolute;\n  padding: 10px;\n  width:40px;\n  height:60px;\n  top: 25px;\n  right: 25px;\n}\n\n.buttonPlus {\n  position: absolute;\n  padding: 10px;\n  width:40px;\n  height:60px;\n  top: 100px;\n  right: 25px;\n}\n```", "```js\n@media screen and (max-width: 600px) {\n  .container {\n    padding: 0;\n    margin: 0\n  }\n  h1{\n    font-size:18px;\n  }\n  .container-fluid{\n    padding: 0;\n    margin: 0 0 0 20px;\n  }\n  .map-title {\n    left: 15%;\n    z-index:10;\n    top: 20px;\n    color: #666;\n  }\n}\n```", "```js\n'use strict';\nimport config from '../config.json';\nimport utils from 'url';\nconst lodash = {\n  pick: require('lodash.pick'),\n  identity: require('lodash.identity')\n};\nimport request from 'superagent';\n```", "```js\nclass Geo {\n  reverseGeo(coords) {\n    const url = utils.format({\n      protocol: config.openstreetmap.protocol,\n      hostname: config.openstreetmap.host,\n      pathname: config.openstreetmap.path,\n      query: lodash.pick({\n        format: config.openstreetmap.format,\n        zoom: config.openstreetmap.zoom,\n        addressdetails: config.openstreetmap.addressdetails,\n        lat: coords.latitude,\n        lon: coords.longitude\n      }, lodash.identity)\n    });\n\n    const req = request.get(url)\n    .timeout(config.timeout)\n```", "```js\n    const promise = new Promise(function (resolve, reject) {\n      req.end(function (err, res) {\n        if (err) {\n          reject(err);\n        } else if (res.error) {\n          reject(res.error);\n```", "```js\n        }\n        else {\n          try {\n            resolve(res.text);\n          } catch (e) {\n            reject(e);\n          }\n        }\n      });\n    });\n\n    return promise;\n  }\n}\nexport default Geo;\n```", "```js\n{\n  timeout: 10000,\n  \"openstreetmap\": {\n    \"name\": \"OpenStreetMap\",\n    \"protocol\": \"https\",\n    \"host\": \"nominatim.openstreetmap.org\",\n    \"path\": \"reverse\",\n    \"format\": \"json\",\n    \"zoom\": \"18\",\n    \"addressdetails\": \"1\"\n  }\n}\n```", "```js\n'use strict';\n\nimport React from 'react';\nimport { render } from 'react-dom';\nimport { Grid, Row, Col, Button, ButtonGroup,\n  Alert, FormGroup, ControlLabel, FormControl }\n  from 'react-bootstrap';\nimport GeoService from './service/geo';\nconst Geo = new GeoService();\n\nconst App = React.createClass({\n  getInitialState(){\n    return {\n      locationFetched: false,\n      provider: null,\n      providerKey: null,\n      mapType: 'static',\n      lon: false,\n      lat: false,\n      display_name: \"\",\n      address: {},\n      zoom: 8,\n      serviceStatus:{up:true, e:\"\"},\n      alertVisible: false\n    }\n  },\n```", "```js\n  componentDidMount(){\n    if (\"mark\" in performance) performance.mark('fetch_start');\n    this.fetchLocation();\n  },\n```", "```js\n  fetchLocation(){\n    navigator.geolocation.getCurrentPosition(\n      (res)=> {\n        const coords = res.coords;\n        this.setState({\n          lat: coords.latitude,\n          lon: coords.longitude\n        });\n\n        this.fetchReverseGeo(coords);\n      },\n      (err)=> {\n        console.warn(err)\n      },\n      null);\n  },\n```", "```js\n  fetchReverseGeo(coords){\n    Geo.reverseGeo(coords)\n      .then((data)=> {\n        if(data === undefined){\n          this.setState({alertVisible: true})\n        }\n```", "```js\n        else {\n          let json = JSON.parse(data);\n          if (json.error) {\n            this.setState({ alertVisible: true })\n          } else {\n            if (\"mark\" in performance) \n              performance.mark(\"fetch_end\");\n            if (\"measure\" in performance) \n              performance.measure(\"fetch_geo_time\",    \n                \"fetch_start\",\"fetch_end\");\n```", "```js\n            this.setState({\n              address: json.address,\n              display_name: json.display_name,\n              lat: json.lat,\n              lon: json.lon,\n              locationFetched: true\n            });\n\n            if (\"vibrate\" in navigator) navigator.vibrate(500);\n```", "```js\n          }\n        }\n      }).catch((e) => {\n        let message;\n        if( e.message ) message = e.message;\n        else message = e;\n        this.setState({\n          serviceStatus: {\n            up: false,\n            error: message}\n          })\n    });\n  },\n```", "```js\n  renderError(){\n    return (<Row>\n      <Col xs={ 12 }>\n        <h1>Error</h1>\n        Sorry, but I could not serve any content. \n       <br/>Error message: <strong> \n       { this.state.serviceStatus.error }\n       </strong>\n      </Col>\n    </Row>)\n  },\n```", "```js\n  renderBouncingBalls(){\n    return (<Row>\n      <Col xs= { 12 }>\n        <div className = \"spinner\">\n          <div className = \"double-bounce1\"></div>\n          <div className = \"double-bounce2\"></div>\n        </div>\n      </Col>\n    </Row>)\n  },\n```", "```js\n  renderContent(){\n    return (<div>\n      <Row>\n\n        <Col xs = { 12 }>\n          <h1>Your coordinates</h1>\n        </Col>\n\n        <Col xs = { 12 }>\n          <small>Longitude:</small>\n          { \" \" }{ this.state.lon }\n          { \" \" }\n          <small>Latitude:</small>\n          { \" \" }{ this.state.lat }\n          </Col>\n\n          <Col xs={12}>\n            <small>Address: </small>\n```", "```js\n            { this.state.address.county?\n              this.state.address.county + \", \" : \"\" }\n            { this.state.address.state?\n              this.state.address.state + \", \" : \"\" }\n            { this.state.address.country ?\n              this.state.address.country: \"\" }\n            </Col>\n        </Row>\n\n        <Row>\n          <Col xs={12}>\n            {this.state.provider ?\n              this.renderMapView() :\n              this.renderButtons()}\n```", "```js\n            </Col>\n        </Row>\n\n        <Row>\n          <Col xs={12}>\n          {this.state.provider ? <div/> : <div>\n            <h3>Debug information</h3>\n            {this.debugDNSLookup()}\n            {this.debugConnectionLookup()}\n            {this.debugAPIDelay()}\n            {this.debugPageLoadDelay()}\n            {this.debugFetchTime()}\n```", "```js\n            </div>}\n          </Col>\n        </Row>\n     </div>);\n  },\n  debugPageLoadDelay(){\n    return \"timing\" in performance ?\n      <div>Page load delay experienced\n        from page load start to navigation start:{\" \"}\n        {Math.round(((performance.timing.loadEventEnd -\n          performance.timing.navigationStart) / 1000)\n          * 100) / 100} seconds.</div> : <div/>\n  },\n```", "```js\n  debugAPIDelay(){\n    return \"getEntriesByName\" in performance ?\n      (<div>Delay experienced fetching reverse geo\n        (after navigation start):{\" \"}\n        {Math.round((performance.getEntriesByName(\n            \"fetch_geo_time\")[0].duration / 1000) * 100) / 100}\n        {\" seconds\"}.</div>) : <div/>\n  },\n\n  debugFetchTime(){\n    return \"timing\" in performance ?\n      <div>Fetch Time: {performance.timing.responseEnd -\n      performance.timing.fetchStart} ms.</div> : null\n  },\n\n  debugDNSLookup(){\n    return \"timing\" in performance ?\n      <div> DNS lookup: {performance.timing.domainLookupEnd -\n      performance.timing.domainLookupStart} ms.</div> : null\n  },\n\n  debugConnectionLookup(){\n    return \"timing\" in performance ?\n      <div>Connection lookup: {performance.timing.connectEnd -\n      performance.timing.connectStart} ms. </div> : null\n  },\n\n  renderGrid(content){\n    return <Grid>\n      {content}\n      </Grid>\n  },\n\n  render() {\n    if(!this.state.serviceStatus.up){\n      return this.renderGrid(this.renderError());\n```", "```js\n    }\n    else if( !this.state.locationFetched ){\n      return this.renderGrid(this.renderBouncingBalls());\n```", "```js\n    }\n    else {\n      return this.renderGrid(this.renderContent());\n```", "```js\n    }\n  }\n});\n\nrender(\n  <App greeting=\"Chapter 5\"/>,\n  document.getElementById('app')\n);\n```", "```js\n\"google\": {\n  \"name\": \"google\",\n  \"providerKey\": \"\",\n  \"url\": \"http://maps.googleapis.com/maps/api/staticmap\",\n  \"mapType\": \"roadmap\",\n  \"pushpin\": false,\n  \"query\": {\n    \"markerColor\": \"color:purple\",\n    \"markerLabel\": \"label:A\"\n  },\n  \"join\": \"x\"\n},\n\n\"bing\": {\n  \"name\": \"bing\",\n  \"providerKey\": \"\",\n  \"url\": \"https://dev.virtualearth.net/REST/V1/Imagery/Map/Road/\",\n  \"query\": {},\n  \"pushpin\": true,\n  \"join\": \",\"\n},\n\n\"mapQuest\": {\n  \"name\": \"mapQuest\",\n  \"url\": \"https://www.mapquestapi.com/staticmap/v4/getmap\",\n  \"providerKey\": \"\",\n  \"mapType\": \"map\",\n  \"icon\": \"red_1-1\",\n  \"query\": {},\n  \"pushpin\": false\n}\n```", "```js\n'use strict';\n\nimport MapService from './map-service';\n\nconst mapService = new MapService();\n\nexport default class MapFactory {\n  getMap(params) {\n    return mapService.getMap(params);\n  }\n}\n```", "```js\n'use strict';\n\nimport config from '../config.json';\nimport utils from 'url';\n\nexport default class MapService {\n  getMap( params ) {\n    let url;\n    let c = config[ params.provider ];\n    let size = [ params.width, params.height ].join(c.join);\n    let loc = [ params.lat, params.lon ].join(\",\");\n```", "```js\n\n   let markers = Object.keys(c.query).length ? \n      Object.keys(c.query).map((param)=> {\n      return c.query[param];\n    }).reduce((a, b)=> {\n      return [a, b].join(\"|\") + \"|\" + loc;\n    }) : \"\";\n```", "```js\n    let key = c.providerKey ? \"key=\" + c.providerKey : \"\";\n    let maptype = c.mapType ? \"maptype=\" + c.mapType : \"\";\n    let pushpin = c.pushpin ? \"pp=\" + loc + \";4;A\": \"\";\n    if (markers.length) markers = \"markers=\" + markers;\n```", "```js\n    if(params.provider === \"bing\"){\n      url = `${c.url}/${loc}/${params.zoom}?${maptype}&center=${loc}&size=${size}&${pushpin}&${markers}&${key}`;\n    }\n    else {\n      url = `${c.url}?${maptype}&center=${loc}&zoom=${params.zoom}&size=${size}&${pushpin}&${markers}&${key}`;\n    }\n```", "```js\n    return {\n      id: params.id,\n      data: {\n        mapSrc: url\n      }\n    };\n  }\n}\n```", "```js\n'use strict';\n\nimport React from 'react';\nimport { render } from 'react-dom';\nimport { Button } from 'react-bootstrap';\n\nimport Map from '../components/static-map.jsx';\n\nconst StaticMapView = React.createClass({\n  propTypes: {\n    provider: React.PropTypes.string.isRequired,\n    providerKey: React.PropTypes.string,\n    mapType: React.PropTypes.string,\n    lon: React.PropTypes.number.isRequired,\n    lat: React.PropTypes.number.isRequired,\n    display_name: React.PropTypes.string,\n    address: React.PropTypes.object.isRequired\n  },\n  getDefaultProps(){\n    return {\n      provider: 'google',\n      providerKey: '',\n      mapType: 'static',\n      lon: 0,\n      lat: 0,\n      display_name: \"\",\n      address: {}\n    }\n  },\n\n  getInitialState(){\n    return {\n      zoom: 8\n    }\n  },\n\n  lessZoom(){\n    this.setState({\n      zoom: this.state.zoom > 1 ?\n       this.state.zoom -1 : 1\n    });\n  },\n\n  moreZoom(){\n    this.setState({\n      zoom: this.state.zoom < 18 ? \n       this.state.zoom + 1 : 18\n    });\n  },\n\n```", "```js\n getHeightWidth(){\n    const w = window.innerWidth\n      || document.documentElement.clientWidth\n      || document.body.clientWidth;\n\n    const h = window.innerHeight\n      || document.documentElement.clientHeight\n      || document.body.clientHeight;\n    return { w, h };\n  },\n```", "```js\n  render: function () {\n    return (<div>\n      <Button\n        onClick = { this.lessZoom }\n        bsStyle = \"primary\"\n        className = \"buttonMinus\">\n      -</Button>\n      <Button\n        onClick = { this.moreZoom }\n        bsStyle = \"primary\"\n        className = \"buttonPlus\">\n      +</Button>\n      <Button\n        onClick = { this.props.goBack }\n        bsStyle = \"success\"\n        className = \"buttonBack\">\n      Exit</Button>\n```", "```js\n    <div className=\"map-title\" >\n      { this.props.address.road }{ \", \" }\n      { this.props.address.county }\n      </div>\n       <Map provider = { this.props.provider }\n        providerKey = { this.props.providerKey }\n        id = { this.props.provider + \"-map\" }\n        lon = { this.props.lon }\n        lat = { this.props.lat }\n        zoom = { this.state.zoom }\n        height = { this.getHeightWidth().h-150 }\n        width = { this.getHeightWidth().w-150 }\n        />\n        </div>)\n  }\n});\nexport default StaticMapView;\n```", "```js\n'use strict';\n\nimport React from 'react';\nimport MapFactory from '../service/map-factory';\n\nconst factory = new MapFactory();\nconst StaticMap = React.createClass({\n  propTypes: {\n    provider: React.PropTypes.string.isRequired,\n    providerKey: React.PropTypes.string,\n    id: React.PropTypes.string.isRequired,\n    lon: React.PropTypes.string.isRequired,\n    lat: React.PropTypes.string.isRequired,\n    height: React.PropTypes.number.isRequired,\n    width: React.PropTypes.number.isRequired,\n    zoom: React.PropTypes.number\n  },\n\n  getDefaultProps(){\n    return {\n      provider: '',\n      providerKey: '',\n      id: 'map',\n      lat: \"0\",\n      lon: \"0\",\n      height: 0,\n      width: 0,\n      zoom: 8\n    }\n  },\n\n  getLocation () {\n    return factory.getMap({\n      providerKey: this.props.providerKey,\n      provider: this.props.provider,\n      id: this.props.id,\n      lon: this.props.lon,\n      lat: this.props.lat,\n      height: this.props.height,\n      width: this.props.width,\n      zoom: this.props.zoom\n    });\n  },\n\n  render () {\n    const location = this.getLocation();\n```", "```js\n    let mapSrc;\n    let style;\n\n    if (!location.data || !location.data.mapSrc) {\n      return null;\n    }\n\n    mapSrc = location.data.mapSrc;\n\n    style = {\n      width: '100%',\n      height: this.props.height\n    };\n\n    return (\n      <div style = { style } \n        className = \"map-container\">\n        <img style={ style } \n          src={ mapSrc } \n          className = \"static-map\" />\n      </div>\n    );\n  }\n});\nexport default StaticMap;\n```", "```js\n<Row>\n  <Col xs = { 12 }>\n    { this.state.provider ?\n      this.renderMapView() :\n      this.renderButtons() }\n  </Col>\n</Row>\n```", "```js\nrenderButtons(){\n return (<div>\n    <h2>Static maps</h2>\n\n    <ButtonGroup block vertical>\n      <Button \n        className = \"map-button\" \n        bsStyle = \"info\" \n        onClick = { this.setProvider.bind(null,'google','static') }>\n        Open static Google Map for { this.state.address.state }\n        { \", \" } \n        { this.state.address.country }</Button>\n\n      <Button \n        className = \"map-button\" \n        bsStyle = \"info\" \n        onClick = { this.setProvider.bind(null,'bing','static') }>\n        Open Bing map for { this.state.address.state }{ \", \" }\n        { this.state.address.country }</Button>\n\n      <Button \n        className = \"map-button\" \n        bsStyle = \"info\" \n        onClick = { this.setProvider.bind(null,'mapQuest','static') }>\n        Open MapQuest map for { this.state.address.state }{ \", \" }\n        { this.state.address.country }</Button>\n\n    </ButtonGroup>\n  </div>)\n},\n\nsetProvider(provider, mapType){\n  let providerKey = \"\";\n\n  if (hasOwnProperty.call(config[provider], 'providerKey')) {\n    providerKey = config[provider].providerKey;\n  }\n\n  this.setState({\n   provider: provider, \n   providerKey: providerKey, \n   mapType: mapType});\n\n  // provide tactile feedback if vibration is supported\n  if (\"vibrate\" in navigator) navigator.vibrate(50);\n},\n```", "```js\nimport StaticMapView from './views/static-map.jsx';\nimport config from './config.json';\n```", "```js\nrenderMapView(){\n  return (<StaticMapView { ...this.state }\n  goBack={ this.goBack }/>);\n},\n\ngoBack(){\n  this.setState({ provider: null });\n},\n```", "```js\n  validateLongitude(){\n    const val = this.state.lon;\n    if (val > -180 && val <= 180) {\n      return \"success\"\n    } else {\n      return \"error\";\n    }\n  },\n\n```", "```js\nhandleLongitudeChange(event){\n               this.setState({ lon: event.target.value });\n},\n```", "```js\n  validateLatitude(){\n    const val = this.state.lat;\n    if (val > -90 && val <= 90) {\n      return \"success\"\n    } else {\n      return \"error\";\n    }\n  },\n```", "```js\n  handleLatitudeChange(event){\n    this.setState({ lat: event.target.value });\n  },\n\n  handleFetchClick(){\n    this.fetchReverseGeo({\n     latitude: this.state.lat, \n     longitude: this.state.lon\n    });\n  },\n```", "```js\n  handleAlertDismiss() {\n    this.setState({\n     alertVisible: false\n    });\n  },\n\n  handleAlertShow() {\n    this.setState({\n      alertVisible: true\n    });\n  },\n\n  handleSelect(e){\n    switch(e.target.value){\n      case \"london\": \n         this.fetchReverseGeo({\n           latitude: 51.50722, \n           longitude:-0.12750\n      });\n      case \"dublin\": \n          this.fetchReverseGeo({\n            latitude: 53.347205, \n            longitude:-6.259113\n          });\n      case \"barcelona\": \n          this.fetchReverseGeo({\n             latitude: 41.386964, \n             longitude: 2.170036\n          });\n      case \"newyork\": \n          this.fetchReverseGeo({\n             latitude: 40.723189, \n             longitude:-74.003340\n          });\n      case \"tokyo\": \n          this.fetchReverseGeo({\n             latitude: 35.707743, \n             longitude:139.733580\n          });\n      case \"beijing\": \n          this.fetchReverseGeo({\n            latitude: 39.895591, \n            longitude:116.413371\n          });\n    }\n  },\n```", "```js\n<h2>Try a different location</h2>\n<FormGroup>\n  <ControlLabel>Longitude</ControlLabel>\n  <FormControl \n    type=\"text\"\n    onChange={ this.handleLongitudeChange }\n    defaultValue={this.state.lon}\n    placeholder=\"Enter longitude\"\n    label=\"Longitude\"\n    help=\"Longitude measures how far east or west of the prime\n          meridian a place is located. A valid longitude is\n         between -180 and +180 degrees.\"\n    validationState={this.validateLongitude()}\n  />\n  <FormControl.Feedback />\n </FormGroup>\n\n <FormGroup>\n   <ControlLabel>Latitude</ControlLabel>\n   <FormControl type=\"text\"\n     onChange={ this.handleLatitudeChange }\n     defaultValue={this.state.lat}\n     placeholder=\"Enter latitude\"\n     label=\"Latitude\"\n     help=\"Latitude measures how far north or south of the equator\n         a place is located. A valid longitude is between -90 \n         and +90 degrees.\"\n     validationState={this.validateLongitude()}\n   />\n   <FormControl.Feedback />\n </FormGroup>\n\n{this.state.alertVisible ?\n   <Alert bsStyle=\"danger\" \n     onDismiss={this.handleAlertDismiss} \n     dismissAfter={2500}>\n     <h4>Error!</h4>\n\n     <p>Couldn't geocode this coordinates...</p>\n   </Alert> : <div/>}\n```", "```js\n <Button bsStyle=\"primary\"\n         onClick={this.handleFetchClick}>\n   Fetch new geolocation\n </Button>\n\n <p>(note, this will fetch the closest location based on the new\n input values)</p>\n\n<FormGroup>\n       <FormControl \n         componentClass=\"select\"\n         onChange={this.handleSelect}\n         placeholder=\"select location\">\n           <option defaultSelected value=\"\">\n             Choose a location\n           </option>\n           <option value=\"london\">London</option>\n           <option value=\"dublin\">Dublin</option>\n           <option value=\"tokyo\">Tokyo</option>\n           <option value=\"beijing\">Bejing</option>\n           <option value=\"newyork\">New York</option>\n       </FormControl>\n     </FormGroup>\n```", "```js\n'use strict';\n\nimport React from 'react';\nimport {Button} from 'react-bootstrap';\nimport L from 'leaflet';\n\n   L.Icon.Default.imagePath =\n     \" https://reactjsblueprints-chapter5.herokuapp.com/images\";\n\nconst DynamicMapView = React.createClass({\n  propTypes: {\n    createMap: React.PropTypes.func,\n    goBack: React.PropTypes.func.isRequired,\n    center: React.PropTypes.array.isRequired,\n    lon: React.PropTypes.string.isRequired,\n    lat: React.PropTypes.string.isRequired,\n    zoom: React.PropTypes.number\n  },\n map:{},\n  getDefaultProps(){\n    return {\n      center: [0, 0],\n      zoom: 8\n    }\n  },\n  createMap: function (element) {\n    this.map = L.map(element);\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',\n    {attribution: '&copy; <a href=\"http://osm.org/copyright\">\n      OpenStreetMap</a> contributors'}).addTo(this.map);\n    return this.map;\n  },\n```", "```js\n  setupMap: function () {\n    this.map.setView([this.props.lat, this.props.lon], \n    this.props.zoom);\n    this.setMarker(this.props.lat, this.props.lon);\n  },\n```", "```js\n  setMarker(lat,lon){\n    L.marker([lat, lon]).addTo(this.map);\n  },\n  componentDidMount: function () {\n    if (this.props.createMap) {\n      this.map = this.props.createMap(this.refs.map);\n    } else {\n      this.map = this.createMap(this.refs.map);\n    }\n\n    this.setupMap();\n  },\n```", "```js\n  getHeightWidth(){\n    const w = window.innerWidth\n      || document.documentElement.clientWidth\n      || document.body.clientWidth;\n\n    const h = window.innerHeight\n      || document.documentElement.clientHeight\n      || document.body.clientHeight;\n    return { w, h };\n  },\n  render: function () {\n    const style = {\n      width: '95%',\n      height: this.getHeightWidth().h - 200\n    };\n```", "```js\n    return (<div>\n      <Button\n      onClick={this.props.goBack}\n      className=\"buttonBack\">\n      Exit</Button>\n      <div style={style} ref=\"map\" className=\"map\"></div>\n      {navigator.battery ?\n        navigator.battery.level<0.3 ?\n          <div><strong>\n             Note: Your battery is running low \n             ({navigator.battery.level*100}% remaining).\n             You may want to exit to the main menu and \n             use the static maps instead.</strong></div>\n          :<div/>\n        :<div/>\n      }\n```", "```js\n    </div>);\n  }\n});\nexport default DynamicMapView;\n```", "```js\n<h1>Interactive maps</h1>\n<ButtonGroup block vertical>\n  <Button \n    className=\"map-button\" \n    bsStyle=\"primary\"\n    onClick={this.setProvider.bind(null,\n      'openstreetmap','interactive')}>\n      Open interactive Open Street Map for \t\n      {this.state.address.state? this.state.address.state+\", \":\"\"}\n      {this.state.address.country}\n  </Button>\n\n</ButtonGroup>\n```", "```js\nrenderMapView(){\n  return this.state.mapType === 'static' ?\n    (<StaticMapView {...this.state} goBack={this.goBack}/>) :\n    <DynamicMapView {...this.state} goBack={this.goBack}/>;\n},\n```", "```js\nimport DynamicMapView from './views/interactive-map.jsx';\n```"]