- en: '*Chapter 6*: Using Angular Components'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we introduced the Angular Academy application and briefly
    scratched its surface by demonstrating how we can use CSS Custom Properties to
    control theme properties and CSS Grid layouts. In this chapter, we will dig into
    the details of how to implement the application using the new Angular components
    that we introduced in [*Chapter 4*](B16295_04_ePub_RK.xhtml#_idTextAnchor055),
    *Exploring Angular Components Features*.
  prefs: []
  type: TYPE_NORMAL
- en: Note that we will be covering a lot of ground in this chapter, so I recommend
    that you revisit *Chapter 4*, *Exploring Angular Components Features*, if you
    want to learn about Angular components or if you need a refresher. This chapter
    will be about using the new official Angular components and how to wire them together
    in our Angular Academy example application.
  prefs: []
  type: TYPE_NORMAL
- en: 'More specifically, we will be covering the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the Angular Academy application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Showing course videos using the Angular YouTube Player
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the new Clipboard service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding your school using the Angular Google Maps components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you are like us, then you are probably eager to dive into the details on
    how to use the new official Angular components, but let's step back and reflect
    on the Angular Academy application so that we can understand what we are going
    to build.
  prefs: []
  type: TYPE_NORMAL
- en: By starting from the ground up in this way, we hope that you get a more concrete
    understanding of how to use the new components by seeing how to wire them together
    using services and navigation.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the Angular Academy application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first thing you should think about when using components is **what** you
    want the user to be able to accomplish by using the component, as well as what
    data that use case requires, before digging into the details about the component
    you are going to use.
  prefs: []
  type: TYPE_NORMAL
- en: Our primary use case for the Angular Academy application. is to allow tailor-made
    lists of video courses, which will provide the user with a custom list of videos
    and location information for the video's content. To accomplish this, we will
    use the Angular YouTube Player to display videos and select schools via Angular
    Google Maps (for the **how**). It will be the school that creates the course,
    and the course will contain one or more videos that the user will watch.
  prefs: []
  type: TYPE_NORMAL
- en: With the use case in place, we can now give some thought to **what** data we
    will be using, before describing **how** we are going to display or use the data.
    This will make it easier to separate data retrieval and storage from the actual
    usage of the different components. So, let's establish a data model before we
    use the new Angular components.
  prefs: []
  type: TYPE_NORMAL
- en: Establishing a data model
  prefs: []
  type: TYPE_NORMAL
- en: We have many ways to describe data models, but for the sake of brevity, we will
    limit ourselves to simple TypeScript interfaces to describe the models and use
    Angular services to communicate with the backend.
  prefs: []
  type: TYPE_NORMAL
- en: 'The models that we will be using to support our use case are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: School
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Course
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Video
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The list of videos you saw in the previous chapter is related to a Course that
    has been produced by a School. Weâ€™ll start by giving a Course a title, an optional
    description, and a list of videos for the user to watch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The basic information we need for each video is where to access it on YouTube,
    the date it was uploaded, the author who produced it, and an optional description
    of what it is about:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We will attach a name and the latitude and longitude for each school so that
    we can find them on a map:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Additionally, we will describe the courses being offered by the school in the
    `courses` array. Note that the description in the `courses` array will be using
    the Course model as part of the School model. The shared use of the Course interface
    will allow logic to be reused between the Schools and Course components.
  prefs: []
  type: TYPE_NORMAL
- en: Dividing the application into components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, we will divide the app into the following three main modules. These will
    be displayed separately on the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: Course
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Theme
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Schools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Course component will use the layout grid that we introduced in [*Chapter
    5*](B16295_05_ePub_RK.xhtml#_idTextAnchor075), *Using CSS Custom Properties,*
    as well as a Video component that will display YouTube videos via the Angular
    YouTube Player module.
  prefs: []
  type: TYPE_NORMAL
- en: The theme component should also seem familiar to you from [*Chapter 5*](B16295_05_ePub_RK.xhtml#_idTextAnchor075),
    *Using CSS Custom Properties,* where we used it to control the theme settings
    using CSS properties. The theme settings should influence the graphical display
    of the Schools and Course components.
  prefs: []
  type: TYPE_NORMAL
- en: The Schools component will let you find your school via the Angular Google Maps
    component and let you select a course to follow from the chosen school (and redirect
    you to the Course component).
  prefs: []
  type: TYPE_NORMAL
- en: 'Each of the components will be mapped for navigation in `app.module.ts`, like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Note that the Course component will require a parameter for which course to
    display. For simplicity, we will just assume that the user is already logged in,
    has chosen to follow the course with an ID of `1`, and then display this as the
    default route. A later implementation could add a login page and a user model,
    which could redirect the user to the chosen course upon startup (the chosen course
    could, for example, be stored on the user model). We will revisit this in [*Chapter
    8*](B16295_08_ePub_RK.xhtml#_idTextAnchor094), *Additional Provider Scopes*.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have divided the application into components, it is time to start
    thinking about how to include dependencies for these modules.
  prefs: []
  type: TYPE_NORMAL
- en: Including dependencies using modules
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will start by specifying the application as a module that imports the Course,
    Schools, and Theme modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The Course module will include the Video module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The Video module will include the `YouTubePlayerModule` and `ClipboardModule`
    dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, the Schools module will include `GoogleMapsModule`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Did you notice that we only included the specific dependencies where they are
    needed? This way of structuring applications can help you have a clearer overview
    of the dependencies in the application.
  prefs: []
  type: TYPE_NORMAL
- en: Retrieving data using services
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we have specified the example data model and divided the application
    into modules, it is time to specify how we will access data from the components.
    We will use the following Angular services for this:'
  prefs: []
  type: TYPE_NORMAL
- en: '`CourseService`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SchoolsService`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each of the services will be set up to fetch data asynchronously. The main difference
    here will be that `CourseService` will retrieve one Course at a time, while `SchoolsService`
    will retrieve several Schools at a time.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `CourseService` will have a `getCourse` call available to retrieve a single
    course:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The Course model will contain the list of videos for the course to display.
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: We are using mock data here, but this approach should illustrate how you can
    implement asynchronous data retrieval from the server via the `Course` component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, we will introduce `SchoolsService`, which will retrieve the list
    of schools providing courses:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Here, we will return several schools via the `getSchools` call. The idea is
    that each of the returned schools should provide links to one or several courses
    that can be retrieved via `CourseService`. We will illustrate this by providing
    a link to the courses that the school is offering in the Schools component.
  prefs: []
  type: TYPE_NORMAL
- en: Wiring up navigation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For simplicity, we will assume that the user has signed up for a school so that
    we can direct the user to a course in the chosen school. Here, the default link
    will display videos from the course in the chosen school via the default route
    on startup.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will start by setting up the links for the Material Side Navigation container
    in the Navigation component on the left side of the screen, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Here, you can see that the default route, `/`, will have a title of **Watch
    courses** This will be mapped to the Courses component in the route description.
  prefs: []
  type: TYPE_NORMAL
- en: Having established the navigation and the data model and having split the app
    into modules, we can start describing how to use the Angular components in the
    Angular Academy app. We will start by describing how to use the Angular YouTube
    Player to show the course videos.
  prefs: []
  type: TYPE_NORMAL
- en: Showing course videos using the Angular YouTube Player
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we''ll create a separate video component to display videos
    that are attached to a course. For simplicity, we''ll accept the information as
    `@Input` inside the Video component, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This code should be familiar to you from the introduction in [*Chapter 4*](B16295_04_ePub_RK.xhtml#_idTextAnchor055),
    *Exploring Angular Components Features,* where we introduced how to use it. We
    can now write the template for the Video component to display the YouTube videos,
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Do you remember how we used the custom `videoSize` CSS property in the previous
    chapter to tweak the grid column's size? This effort is paying off â€“ we just need
    to refer to the `video` class here (with no direct reference to dynamic sizing
    at all). The reference to the `tile` class lets us manipulate the tile color settings
    using the theme component.
  prefs: []
  type: TYPE_NORMAL
- en: Did you also notice how we introduced the `cdkCopyToClipboard` feature here?
    This feature can be handy in desktop applications when you want to extract data
    from the running application to the clipboard.
  prefs: []
  type: TYPE_NORMAL
- en: 'Having established the Video component, we can now use it from the Course component,
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Note the usage of the `async` pipe operator on `course$`. Here, we are waiting
    for the data to be retrieved so that we can start rendering the video using the
    Video component.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have covered how to display course videos using the Angular YouTube
    Player, we will learn how to find a school using the Angular Google Maps component
    and show how the navigation from the School component to the Course component
    works.
  prefs: []
  type: TYPE_NORMAL
- en: Finding your school using the Angular Google Maps component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Schools component will allow you to find a school via Google Maps by clicking
    a marker where the school has been placed. This will open the **MapInfo** window,
    where you can click on the course that you can watch from school. Clicking on
    this course will lead you to the course overview you saw in the previous chapter.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the Schools component in the Angular Academy application by clicking
    the **Find school** menu entry. This should render the Schools component, where
    you will see the example **Angular Advanced** school.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you open the Schools component in the Angular Academy application, it
    should open with a red default Google Maps marker. If you click it, then your
    display should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.1 â€“ Opening the red Google Maps marker'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.1_B16295.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.1 â€“ Opening the red Google Maps marker
  prefs: []
  type: TYPE_NORMAL
- en: If you click the **Angular Advanced** link in the map information window, you
    will be transferred to the course component with the ID for the **Angular Advanced**
    course as a parameter.
  prefs: []
  type: TYPE_NORMAL
- en: 'We expect the incoming course data on the map info window of the Schools component
    to come from the Schools service as an asynchronous call, as illustrated here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Here, you can see how we opened `MapInfoWindow` when clicking on the map anchor
    point in the `openInfo` call.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will register the `openInfo` call on the `mapClick` function of the Angular
    Google Maps component, and make it open a **MapInfo** window that displays a link
    to the courses being offered by the school:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Note the usage of the async pipe on the `schools$` observable. This will make
    the school data available in the `schools` variable. Combined with `NgIf` on `<ng-container>`,
    you can stop data from being rendered until data is available.
  prefs: []
  type: TYPE_NORMAL
- en: If you have not tried it yet, I recommend that you try clicking your way through
    **Find your school** and clicking the **Angular Advanced** course to find your
    way back to the Course listing.
  prefs: []
  type: TYPE_NORMAL
- en: Did you notice how the Course listing was opened using the course ID that was
    retrieved from the course array in the School data model? In our example application,
    we have registered the `course/:id` route to open the course component with the
    `id` parameter. For now, we will just assume that the user only has a single course
    available and that this course is chosen upon startup. This simple example has
    helped illustrate how the basic flow of the Angular Academy is intended to be.
    In a more realistic scenario, we would allow for the user to log in and have chosen
    courses stored in a session. We will revisit this in [*Chapter 8*](B16295_08_ePub_RK.xhtml#_idTextAnchor094),
    *Additional Provider Scopes*, where we will introduce user login.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we gave you a basic overview of how to use the new Angular
    components by giving you a concrete example with the Angular Academy application.
    The example included a description of how to retrieve data using services and
    how to structure the inclusion of dependencies via Angular modules. In the next
    chapter, we will describe how to use a test-as-a-user approach using Angular Component
    Harnesses.
  prefs: []
  type: TYPE_NORMAL
