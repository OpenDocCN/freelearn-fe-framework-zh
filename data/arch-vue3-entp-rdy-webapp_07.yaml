- en: '7'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '7'
- en: Dockerizing a Vue 3 App
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 Vue 3 应用程序 Docker 化
- en: In the previous chapter, we demonstrated how to build a complete Pinterest clone
    with Vue.js 3, GraphQL, and Strapi for the backend. You also utilized your knowledge
    of GraphQL to develop an enterprise Pinterest clone application. In this chapter,
    you will learn the nitty-gritty details of the steps involved in dockerizing your
    Vue.js 3 project. In addition, you will learn about best practices and industry
    standards to dockerize and deploy an enterprise Vue.js 3 web application. This
    chapter will also take a more practical approach by covering how to dockerize
    a full stack web application and deploy the container to a cloud platform using
    Docker Compose.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们展示了如何使用 Vue.js 3、GraphQL 和 Strapi 后端构建一个完整的 Pinterest 克隆。你还利用了你对 GraphQL
    的知识来开发一个企业级 Pinterest 克隆应用程序。在本章中，你将学习 Docker 化你的 Vue.js 3 项目所涉及的步骤的细节。此外，你还将了解
    Docker 化和部署企业级 Vue.js 3 网络应用程序的最佳实践和行业标准。本章还将通过介绍如何 Docker 化全栈网络应用程序并将其部署到云平台（使用
    Docker Compose）采取更实际的方法。
- en: 'We will cover the following key topics in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下关键主题：
- en: Overview of Docker
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker 概述
- en: Dockerizing the app
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker 化应用程序
- en: Running the app on Docker
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Docker 上运行应用程序
- en: Dockerizing Vue.js 3 and Node.js with Docker Compose
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Docker Compose Docker 化 Vue.js 3 和 Node.js
- en: Running the app on Docker Compose
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Docker Compose 上运行应用程序
- en: By the end of this chapter, you will have learned about best practices and industry
    standards to dockerize and deploy an enterprise Vue.js 3 web application. You
    will also have gained practical experience by dockerizing a full stack web application
    and deploying the container to a cloud platform using Docker Compose.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将了解将企业级 Vue.js 3 网络应用程序 Docker 化和部署的最佳实践和行业标准。你还将通过将全栈网络应用程序 Docker
    化并将其部署到云平台（使用 Docker Compose）获得实践经验。
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To get started with this chapter, I recommend you read through [*Chapter 6*](B17237_06.xhtml#_idTextAnchor192)*,
    Building a Complete Pinterest Clone with GraphQL*, first, where we built a complete
    Pinterest clone using Vue.js 3, GraphQL, and the Strapi CRM for the backend. We
    will be using that application a lot in this chapter to learn about Docker and
    Docker Compose.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始本章，我建议你首先阅读 [*第 6 章*](B17237_06.xhtml#_idTextAnchor192)*，使用 GraphQL 构建 Pinterest
    完整克隆*，在那里我们使用 Vue.js 3、GraphQL 和 Strapi CRM 后端构建了一个完整的 Pinterest 克隆。我们将在本章中大量使用该应用程序来学习
    Docker 和 Docker Compose。
- en: All the code files for this chapter can be found at [https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications/tree/chapter-7](https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications/tree/chapter-7).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的所有代码文件可以在 [https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications/tree/chapter-7](https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications/tree/chapter-7)
    找到。
- en: Overview of Docker
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker 概述
- en: Docker has evolved over the years and knowing how to use it has become one of
    the most critical and in-demand skills for anyone interested in DevOps. Therefore,
    whether you’re a seasoned DevOps engineer or a beginner, you definitely need to
    add Docker to your collection of skills.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 几年来一直在发展，了解如何使用它已经成为对 DevOps 感兴趣的任何人最关键和最受欢迎的技能之一。因此，无论你是经验丰富的 DevOps
    工程师还是初学者，你绝对需要将 Docker 添加到你的技能集合中。
- en: Docker is the new buzzword in the DevOps and container orchestration industry.
    It was created in 2013 and was developed by the parent company, Docker, Inc.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 是 DevOps 和容器编排行业的新热门词汇。它于 2013 年创建，并由其母公司 Docker, Inc. 开发。
- en: Docker can package an application and its dependencies in a virtual container
    that can run on any Linux, Windows, or macOS computer. A container refers to an
    isolated or bundled application with the tools, libraries, and configuration files
    needed to execute the application.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 可以将应用程序及其依赖项打包在一个虚拟容器中，该容器可以在任何 Linux、Windows 或 macOS 计算机上运行。容器是指一个隔离或捆绑的应用程序，其中包含执行应用程序所需的工具、库和配置文件。
- en: One of the benefits of Docker is that it is a toolkit that enables developers
    to build, deploy, run, update, and stop containers using simple commands and work-saving
    automation through a single API across different operating systems and platforms.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 的一个好处是它是一个工具包，使开发者能够通过单个 API 在不同的操作系统和平台上使用简单的命令和工作节省的自动化来构建、部署、运行、更新和停止容器。
- en: This chapter explores everything you need to know about Docker, the different
    unique features of Docker, and why you should consider dockerizing your applications.
    We will also work through creating and setting up your first Docker application.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 本章探讨了您需要了解的所有关于Docker的知识，Docker的不同独特功能，以及为什么您应该考虑将应用程序docker化。我们还将通过创建和设置您的第一个Docker应用程序来操作。
- en: In the next section, we will explore Docker and its benefits to give us insights
    into why we need it in our development pipeline.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨Docker及其优势，以了解为什么我们需要在开发流程中使用它。
- en: What is Docker?
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是Docker？
- en: Docker is an open source platform that allows developers to build, test, and
    deploy applications quickly. Docker achieves this by packaging your application
    in standardized units called containers. These containers have everything the
    software needs to run, including libraries, system tools, code, and a runtime
    environment. It also virtualizes the operating system of the computer on which
    it is installed and running.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Docker是一个开源平台，允许开发者快速构建、测试和部署应用程序。Docker通过将您的应用程序打包成标准化的单元（容器）来实现这一点。这些容器包含软件运行所需的一切，包括库、系统工具、代码和运行时环境。它还虚拟化了安装和运行的计算机的操作系统。
- en: To further explain this, let’s say we have developed two different instances
    of our application, that is, the frontend and the backend.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进一步解释这一点，让我们假设我们已开发了两个不同的应用程序实例，即前端和后端。
- en: The backend is developed with a Node.js stack, including a PostgreSQL database
    and other tools that make the Node.js backend execute properly on your local server.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 后端使用Node.js堆栈开发，包括PostgreSQL数据库和其他使Node.js后端在本地服务器上正确执行的工具。
- en: Next, your frontend is created with Vue.js 3 and the necessary tools and configuration
    that make your Vue.js 3 application run smoothly.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您的前端使用Vue.js 3以及使Vue.js 3应用程序顺利运行的必要工具和配置创建。
- en: 'Here are a couple of problems that might arise when working in a team or individually
    if you aren’t using Docker:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在团队中或个人工作时不使用Docker，可能会出现以下问题：
- en: If a new team member joins, it might be tedious to onboard the member into the
    code base since the member needs to install and configure the correct version
    of the project and download the exact versions of the files required.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果新团队成员加入，由于成员需要安装和配置项目的正确版本以及下载所需文件的精确版本，因此将成员引入代码库可能会很繁琐。
- en: When deploying the application, provisioning different servers for all the services
    used by your application will be a lot of work. For instance, you will have to
    provision different servers for the database, frontend, and backend. You may also
    need to provision different servers for different environments, such as staging,
    testing, and production, or use one server with lots of configurations each time.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在部署应用程序时，为应用程序使用的所有服务配置不同的服务器将是一项大量工作。例如，您将不得不为数据库、前端和后端配置不同的服务器。您可能还需要为不同的环境（如测试、测试和生产）配置不同的服务器，或者每次使用一个配置繁多的服务器。
- en: With Docker, you can solve these problems by configuring, provisioning, and
    packaging all these services with a simple configuration file called a Dockerfile
    or a YAML file to define and run multi-container Docker applications using Docker
    Compose.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Docker，您可以通过配置、提供和打包所有这些服务，使用一个简单的配置文件（Dockerfile或YAML文件）来定义和运行多容器Docker应用程序，从而解决这些问题。
- en: 'To understand how Docker will solve these problems, take a look at the following
    screenshot:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解Docker如何解决这些问题，请查看以下截图：
- en: '![Figure 7.1 – A screenshot of the Docker host and layers (source: freeCodeCamp
    [freecodecamp.org/news/docker-simplified-96639a35ff36/])](img/Figure_7.01_B17237.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![图7.1 – Docker主机和层的截图（来源：freeCodeCamp [freecodecamp.org/news/docker-simplified-96639a35ff36/])](img/Figure_7.01_B17237.jpg)'
- en: 'Figure 7.1 – A screenshot of the Docker host and layers (source: freeCodeCamp
    [freecodecamp.org/news/docker-simplified-96639a35ff36/])'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.1 – Docker主机和层的截图（来源：freeCodeCamp [freecodecamp.org/news/docker-simplified-96639a35ff36/])
- en: The preceding screenshot shows the internal layers and structure of Docker,
    where your application is bundled into containers with all the required resources
    to run smoothly. Additionally, each container uses your shared system resources.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的截图显示了Docker的内部层和结构，其中您的应用程序被打包进容器中，并包含所有运行所需的资源，以确保顺利运行。此外，每个容器都使用您共享的系统资源。
- en: This allows each container to be isolated from the others present on the same
    host. Thus, it allows multiple containers with different application requirements
    and dependencies to run on the same host, as long as they have the same operating
    system requirements.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得每个容器都可以与同一主机上存在的其他容器隔离。因此，只要它们具有相同的操作系统要求，就可以在同一主机上运行具有不同应用需求和依赖关系的多个容器。
- en: Therefore, with Docker, you can run multiple applications as containers and
    use commands and a single configuration file to control everything. In the next
    section, we will carefully examine the benefits of Docker to our development pipeline.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，使用Docker，您可以以容器形式运行多个应用程序，并使用命令和单个配置文件来控制一切。在下一节中，我们将仔细检查Docker对我们开发流程的好处。
- en: The benefits of Docker
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Docker的好处
- en: 'Some of the key benefits of using Docker are listed here:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Docker的一些关键好处如下：
- en: '**Optimized storage system**: Containers are usually a few megabytes in size
    and consume very little disk space. Therefore, a large number of applications
    can be hosted on the same host.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**优化的存储系统**：容器通常只有几兆字节大小，消耗的磁盘空间非常少。因此，可以在同一主机上托管大量应用程序。'
- en: '**Cost-effective**: Docker is less demanding when it comes to the hardware
    required to run it. Therefore, it reduces the cost of acquiring expensive hardware
    for different setups drastically.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**经济高效**：在运行Docker所需的硬件方面，Docker的要求较低。因此，它大大降低了获取不同配置的昂贵硬件的成本。'
- en: '**Robustness**: Docker has a faster boot time as it consumes very little memory
    in comparison to a virtual machine since it does not have an operating system
    installed.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**健壮性**：与虚拟机相比，Docker由于没有安装操作系统，因此消耗的内存非常少，具有更快的启动时间。'
- en: '**Multiple containers**: With the same operating requirements, Docker supports
    multiple applications with different application requirements and dependencies,
    to be hosted together on the same host.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**多个容器**：Docker支持具有相同操作要求的不同应用程序，这些应用程序具有不同的应用需求和依赖关系，可以在同一主机上共同托管。'
- en: These are the benefits of using Docker to manage and ship your enterprise applications.
    Let’s next explore why you should use Docker in your enterprise-level application.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是使用Docker管理和运输企业应用程序的好处。接下来，我们将探讨为什么你应该在企业级应用程序中使用Docker。
- en: Why use Docker
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为什么使用Docker
- en: Docker enables you to publish your code quickly and efficiently. It standardizes
    the operations of an application, allows you to move code seamlessly, and saves
    revenue by improving the utilization of resources.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Docker使您能够快速高效地发布代码。它标准化了应用程序的操作，允许您无缝地移动代码，并通过提高资源利用率来节省收入。
- en: 'Here are some of the reasons you should start using Docker in scalable enterprise
    applications:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在可扩展的企业应用程序中开始使用Docker的一些原因如下：
- en: '**Ship more software faster**: Acc[ording](https://aws.amazon.com/docker/)
    to Amazon ([https://aws.amazon.com/docker/](https://aws.amazon.com/docker/)),
    Docker users ship products 7x faster than non-Docker users. Docker enables you
    to ship isolated services as often as needed. When building enterprise-level and
    scalable applications, features and bug fixes happen in hours, if not minutes.
    Therefore, urgent building, testing, and deployment are needed and Docker comes
    in handy in this area.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**快速运输更多软件**：根据亚马逊([https://aws.amazon.com/docker/](https://aws.amazon.com/docker/))的数据，Docker用户的产品运输速度是非Docker用户的7倍。Docker使您能够根据需要频繁地运输隔离的服务。在构建企业级和可扩展的应用程序时，功能和错误修复可以在数小时甚至数分钟内完成。因此，紧急构建、测试和部署是必需的，而Docker在这一领域非常有用。'
- en: '**Standardize operations**: Docker follows industry-standard application development
    practices. Isolated standardized units called containers make it easy to deploy,
    identify issues, and roll back for remediation.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标准化操作**：Docker遵循行业标准的应用程序开发实践。被称为容器的隔离标准化单元使得部署、识别问题以及进行修复变得容易。'
- en: '**Seamlessly move**: Developers can move applications between different environments
    and systems without worrying about installing any libraries or missing configuration
    files. Docker-based applications can be moved seamlessly from local development
    to a production environment.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**无缝迁移**：开发者可以在不同的环境和系统之间迁移应用程序，无需担心安装任何库或缺少配置文件。基于Docker的应用程序可以无缝地从本地开发迁移到生产环境。'
- en: '**Save money**: Docker-based applications are cost-effective since you can
    run multiple applications on one server in the form of containers. Docker containers
    make it easier to run more code on each server, improving your utilization of
    CPU resources and saving you money.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**节省资金**：基于 Docker 的应用程序具有成本效益，因为您可以在一个服务器上以容器形式运行多个应用程序。Docker 容器使您在每个服务器上运行更多代码变得更容易，从而提高
    CPU 资源的利用率并节省资金。'
- en: Now you know why you should use Docker in your enterprise applications and the
    benefits you can incur from using Docker. With Docker, you can ship products faster
    and more efficiently. When combined with other industry-standard tools, you can
    completely remove the hassle of manual deployment by instead adopting automated
    deployment. In the next section, we are going to explore how to dockerize your
    first application.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您知道了为什么应该在您的企业应用程序中使用 Docker 以及您可以从使用 Docker 中获得的好处。有了 Docker，您可以更快、更有效地交付产品。当与其他行业标准工具结合使用时，您可以通过采用自动化部署而不是手动部署来完全消除手动部署的麻烦。在下一节中，我们将探讨如何
    Docker 化您的第一个应用程序。
- en: Implementing Docker with Vue.js 3
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Vue.js 3 实现 Docker
- en: Docker is an enterprise-ready container platform that enables organizations
    to seamlessly build, share, and run any application, anywhere. Almost all enterprise-level
    companies containerize their applications for faster production workloads so that
    they can deploy anytime, sometimes several times a day.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 是一个企业级容器平台，它使组织能够无缝地构建、共享和运行任何应用程序，无论在何处。几乎所有的企业级公司都将他们的应用程序容器化，以便更快地处理生产负载，这样他们就可以随时部署，有时一天内可以部署几次。
- en: One way to build an enterprise-level application is to dockerize the project
    from the beginning. Therefore, we are going to dockerize the Pinterest Vue.js
    3 app with the Strapi backend we developed in [*Chapter 6*](B17237_06.xhtml#_idTextAnchor192)*,
    Building a Complete Pinterest Clone with GraphQL*, and create a Docker image so
    that we can deploy that image any time or sometimes several times a day.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 构建企业级应用程序的一种方法是从一开始就 Docker 化项目。因此，我们将使用我们在 [*第 6 章*](B17237_06.xhtml#_idTextAnchor192)*，使用
    GraphQL 构建完整的 Pinterest 模拟* 中开发的 Strapi 后端来 Docker 化 Pinterest Vue.js 3 应用程序，并创建一个
    Docker 镜像，以便我们可以在任何时间或有时一天内多次部署该镜像。
- en: Prerequisite
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 前提条件
- en: 'Most importantly, you must download and install Docker in your local development
    system for local testing. You can go to this link to download and install it on
    different operating systems: [https://docs.docker.com/install/](https://docs.docker.com/install/).'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的是，您必须在本地开发系统中下载并安装 Docker 以进行本地测试。您可以通过此链接在不同操作系统上下载和安装它：[https://docs.docker.com/install/](https://docs.docker.com/install/).
- en: Example project
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例项目
- en: 'In [*Chapter 6*](B17237_06.xhtml#_idTextAnchor192)*, Building a Complete Pinterest
    Clone with GraphQL*, we developed a Pinterest clone using Vue.js 3 and Strapi
    for the backend. In this section, we will learn how to dockerize the project from
    scratch. Here is a demo of the application:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [*第 6 章*](B17237_06.xhtml#_idTextAnchor192)*，使用 GraphQL 构建完整的 Pinterest 模拟*
    中，我们使用 Vue.js 3 和 Strapi 作为后端开发了一个 Pinterest 模拟。在本节中，我们将学习如何从头开始 Docker 化项目。以下是应用程序的演示：
- en: '![Figure 7.2 – A screenshot of the Pinterest clone demo](img/Figure_7.02_B17237.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.2 – Pinterest 模拟演示的截图](img/Figure_7.02_B17237.jpg)'
- en: Figure 7.2 – A screenshot of the Pinterest clone demo
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.2 – Pinterest 模拟演示的截图
- en: The application displays images in a masonry grid layout based on the number
    of images we have stored in our Strapi database.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 该应用程序根据我们存储在 Strapi 数据库中的图片数量，以马赛克网格布局显示图片。
- en: The Strapi backend allows you to manage and control the entire backend of the
    application, from adding pins and boards to creating new users.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Strapi 后端允许您管理并控制应用程序的整个后端，从添加图钉和看板到创建新用户。
- en: We will dockerize both the Vue.js 3 Pinterest app and the Strapi backend using
    individual Dockerfiles and multi-stage builds to create efficient Docker images.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用单独的 Dockerfile 和多阶段构建来 Docker 化 Vue.js 3 Pinterest 应用程序和 Strapi 后端，以创建高效的
    Docker 镜像。
- en: Dockerizing the Pinterest app
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Docker 化 Pinterest 应用
- en: We will start by dockerizing the Pinterest Vue.js 3 application. In this multi-stage
    build, building a Vue.js 3 project and putting those static assets in the `dist`
    folder is the first step. So, let’s create a Dockerfile and configure our Vue.js
    3 application.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先将 Pinterest Vue.js 3 应用程序进行 Docker 化。在这个多阶段构建中，构建 Vue.js 3 项目并将那些静态资产放入
    `dist` 文件夹是第一步。因此，让我们创建一个 Dockerfile 并配置我们的 Vue.js 3 应用程序。
- en: 'Create a Dockerfile in the root directory of your Pinterest clone Vue.js 3
    app. If the Strapi backend is still inside the frontend folder as you clone from
    the `Chapter 6` repository ([https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications/tree/chapter-6](https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications/tree/chapter-6)),
    you can create a parent folder and move the Strapi backend folder side by side
    with the frontend folder, as shown in the following screenshot:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的 Pinterest 克隆 Vue.js 3 应用程序的根目录中创建一个 Dockerfile。如果从 `第 6 章` 仓库 ([https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications/tree/chapter-6](https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications/tree/chapter-6))
    克隆时 Strapi 后端仍然位于前端文件夹中，您可以在前端文件夹旁边创建一个父文件夹，并将 Strapi 后端文件夹移动到那里，如下面的截图所示：
- en: '![Figure 7.3 – A screenshot of the current folder structure](img/Figure_7.03_B17237.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.3 – 当前文件夹结构的截图](img/Figure_7.03_B17237.jpg)'
- en: Figure 7.3 – A screenshot of the current folder structure
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.3 – 当前文件夹结构的截图
- en: Moreover, you can clone the completed `Chapter 7` ([https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications/tree/chapter-7](https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications/tree/chapter-7))
    repository from this link, which contains the complete code base.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您还可以从以下链接克隆完成的 `第 7 章` ([https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications/tree/chapter-7](https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications/tree/chapter-7))
    仓库，其中包含完整的代码库。
- en: 'Lastly, let’s explore the configuration file to dockerize the Vue.js 3 enterprise
    application. Open your Dockerfile and add the following code:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们探索配置文件以将 Vue.js 3 企业应用程序 docker 化。打开您的 Dockerfile 并添加以下代码：
- en: '[PRE0]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The code snippet is self-explanatory with the comments explaining every command
    we used in the Dockerfile.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 代码片段自解释，注释解释了我们使用 Dockerfile 中的每个命令。
- en: 'Let’s build the image with the following command:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令构建镜像：
- en: '[PRE1]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Use the official Node.js 14 Alpine image from https://hub.docker.com/_/node.
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用来自 https://hub.docker.com/_/node 的官方 Node.js 14 Alpine 镜像。
- en: Using an image with specific version tags allows deterministic builds.
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用具有特定版本标签的镜像允许确定性构建。
- en: FROM node:14.16.1 AS builder
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: FROM node:14.16.1 AS builder
- en: Create and change to the app directory.
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建并切换到应用程序目录。
- en: WORKDIR /usr/src/backend
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: WORKDIR /usr/src/backend
- en: Copy important root files to the builder image.
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将重要的根文件复制到构建镜像中。
- en: COPY package*.json ./
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: COPY package*.json ./
- en: Install production dependencies.
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装生产依赖项。
- en: RUN npm install
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: RUN npm install
- en: Copy the Backend source to the container image.
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将后端源代码复制到容器镜像中。
- en: COPY . .
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: COPY . .
- en: build app for production with minification
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: build app for production with minification
- en: RUN npm run build
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: RUN npm run build
- en: EXPOSE 1337
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: EXPOSE 1337
- en: Init final image generation.
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 初始化最终镜像生成。
- en: FROM node:14.16.1
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: FROM node:14.16.1
- en: Run the Strapi service on container startup.
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在容器启动时运行 Strapi 服务。
- en: CMD ["npm", "start"]
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: CMD ["npm", "start"]
- en: '[PRE3]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: FROM node:14.15.0
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: FROM node:14.15.0
- en: ARG PACKAGE_PATH=
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: ARG PACKAGE_PATH=
- en: ARG WORKING_DIR=
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: ARG WORKING_DIR=
- en: WORKDIR ${WORKING_DIR}
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: WORKDIR ${WORKING_DIR}
- en: COPY ${PACKAGE_PATH}/package*.json ${WORKING_DIR}
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: COPY ${PACKAGE_PATH}/package*.json ${WORKING_DIR}
- en: RUN npm install --silent
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: RUN npm install --silent
- en: COPY ${PACKAGE_PATH} ${WORKING_DIR}
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: COPY ${PACKAGE_PATH} ${WORKING_DIR}
- en: VOLUME $WORKING_DIR/node_modules
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: VOLUME $WORKING_DIR/node_modules
- en: CMD [ "npm", "start" ]
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: CMD [ "npm", "start" ]
- en: '[PRE6]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: ARG PACKAGE_PATH=
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: ARG PACKAGE_PATH=
- en: ARG WORKING_DIR=
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: ARG WORKING_DIR=
- en: WORKDIR ${WORKING_DIR}
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: WORKDIR ${WORKING_DIR}
- en: '[PRE7]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: COPY ${PACKAGE_PATH}/package*.json ${WORKING_DIR}
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: COPY ${PACKAGE_PATH}/package*.json ${WORKING_DIR}
- en: RUN npm install --silent
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: RUN npm install --silent
- en: COPY ${PACKAGE_PATH} ${WORKING_DIR}
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: COPY ${PACKAGE_PATH} ${WORKING_DIR}
- en: VOLUME $WORKING_DIR/node_modules
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: VOLUME $WORKING_DIR/node_modules
- en: CMD [ "npm", "start" ]
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: CMD [ "npm", "start" ]
- en: '[PRE8]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'version: "3.5"'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 版本： "3.5"
- en: 'services:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '- 服务：'
- en: 'api:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 'api:'
- en: 'build:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 'build:'
- en: 'context: .'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 'context: .'
- en: 'dockerfile: Dockerfile'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 'dockerfile: Dockerfile'
- en: 'args:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 'args:'
- en: 'PACKAGE_PATH: backend'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 'PACKAGE_PATH: backend'
- en: 'WORKING_DIR: /usr/src/'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 'WORKING_DIR: /usr/src/'
- en: 'expose:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 'expose:'
- en: '- 1337'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '- 1337'
- en: 'ports:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 端口：
- en: '- 1337:1337'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '- 1337:1337'
- en: 'environment:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 'environment:'
- en: '- NODE_ENV=development'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '- NODE_ENV=development'
- en: '- HOST=0.0.0.0'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '- HOST=0.0.0.0'
- en: '- PORT=1337'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '- PORT=1337'
- en: '- BASE_URL=http://api:1337'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '- BASE_URL=http://api:1337'
- en: 'env_file:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 'env_file:'
- en: '- ./.env'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '- ./.env'
- en: 'volumes:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 卷：
- en: '- ./backend:/usr/src'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '- ./backend:/usr/src'
- en: 'command: >'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 'command: >'
- en: sh -c "npm install"
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: sh -c "npm install"
- en: 'frontend:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 'frontend:'
- en: 'build:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 'build:'
- en: 'context: .'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 'context: .'
- en: 'dockerfile: Dockerfile'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 'dockerfile: Dockerfile'
- en: 'args:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 'args:'
- en: 'PACKAGE_PATH: frontend'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 'PACKAGE_PATH: frontend'
- en: 'WORKING_DIR: /usr/src/'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 'WORKING_DIR: /usr/src/'
- en: 'expose:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 'expose:'
- en: '- 3000'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '- 3000'
- en: 'ports:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 端口：
- en: '- 3000:3000'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '- 3000:3000'
- en: 'environment:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 环境：
- en: '- APP_ENV=production'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '- APP_ENV=production'
- en: '- APP_BACKEND=http://0.0.0.0:1337/api'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '- APP_BACKEND=http://0.0.0.0:1337/api'
- en: '- NODE_PATH=/usr/src/'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '- NODE_PATH=/usr/src/'
- en: '- APP_TOKEN=eyJhbGciOiJIUzI1NiJ9.c29sb[STRAPI_TOKEN]'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '- APP_TOKEN=eyJhbGciOiJIUzI1NiJ9.c29sb[STRAPI_TOKEN]'
- en: 'env_file:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 'env_file:'
- en: '- ./common.env'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '- ./common.env'
- en: 'volumes:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 'volumes:'
- en: '- ./frontend:/usr/src'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '- ./frontend:/usr/src'
- en: 'depends_on:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 'depends_on:'
- en: '- api'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '- api'
- en: 'command: ["npm", "start"]'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 'command: ["npm", "start"]'
- en: '[PRE9]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'build:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 'build:'
- en: 'context: .'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 'context: .'
- en: 'dockerfile: Dockerfile'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 'dockerfile: Dockerfile'
- en: 'args:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 'args:'
- en: 'PACKAGE_PATH: frontend'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 'PACKAGE_PATH: frontend'
- en: 'WORKING_DIR: /usr/src/'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 'WORKING_DIR: /usr/src/'
- en: '[PRE10]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'expose:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 'expose:'
- en: '- 3000'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '- 3000'
- en: 'ports:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 'ports:'
- en: '- 3000:3000'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '- 3000:3000'
- en: '[PRE11]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'environment:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 'environment:'
- en: '- APP_ENV=production'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '- APP_ENV=production'
- en: '- APP_BACKEND=http://0.0.0.0:1337/api'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '- APP_BACKEND=http://0.0.0.0:1337/api'
- en: '- NODE_PATH=/usr/src/'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '- NODE_PATH=/usr/src/'
- en: '- APP_TOKEN=eyJhbGciOiJIUzI1NiJ9.c29sb[STRAPI_TOKEN]'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '- APP_TOKEN=eyJhbGciOiJIUzI1NiJ9.c29sb[STRAPI_TOKEN]'
- en: 'env_file:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 'env_file:'
- en: '- ./.env'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '- ./.env'
- en: '[PRE12]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'volumes:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 'volumes:'
- en: '- ./frontend:/usr/src'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '- ./frontend:/usr/src'
- en: 'depends_on:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 'depends_on:'
- en: '- api'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '- api'
- en: 'command: ["npm", "start"]'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 'command: ["npm", "start"]'
- en: '```'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Finally, we call the command to execute the project. This same approach is repeated
    for the backend service. In the next section, we are going to learn how to run
    the project using Docker Compose.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们调用命令来执行项目。同样的方法也适用于后端服务。在下一节中，我们将学习如何使用 Docker Compose 运行项目。
- en: Running the app on Docker Compose
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Docker Compose 上运行应用程序
- en: After creating a successful Docker Compose YAML configuration file, let’s run
    our Pinterest clone project using Docker Compose.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功创建 Docker Compose YAML 配置文件后，让我们使用 Docker Compose 运行我们的 Pinterest 模拟项目。
- en: Before you start running the project, make sure to set up and install Docker
    and Docker Compose. Next, type `docker compose up` in your terminal root directory
    to deploy the project. Alternatively, type `docker-compose up` to use Docker Compose
    directly. The application will be served at `http://localhost:3000/`.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始运行项目之前，请确保设置并安装 Docker 和 Docker Compose。接下来，在终端根目录中输入 `docker compose up`
    以部署项目。或者，直接输入 `docker-compose up`。应用程序将在 `http://localhost:3000/` 上提供服务。
- en: 'If everything is properly configured, you should be presented with a full stack
    Pinterest application, as shown in the following screenshot:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切配置正确，你应该会看到一个全栈 Pinterest 应用程序，如下面的截图所示：
- en: '![Figure 7.5 – Preview of Pinterest application demo](img/Figure_7.05_B17237.jpg)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.5 – Pinterest 应用程序演示预览](img/Figure_7.05_B17237.jpg)'
- en: Figure 7.5 – Preview of Pinterest application demo
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.5 – Pinterest 应用程序演示预览
- en: If you are unsure about anything, please refer back to the code base of this
    chapter ([https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications/tree/chapter-7](https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications/tree/chapter-7))
    to see the working and complete project setup.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对任何内容不确定，请参考本章代码库（[https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications/tree/chapter-7](https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications/tree/chapter-7)）以查看工作状态和完整的项目设置。
- en: In this section, we explored how to use Docker Compose to create and manage
    many services using the Dockerfile that we created in the previous section. We
    also learned how to bundle our full stack application, including the frontend,
    backend, and a database, using Docker Compose.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们探讨了如何使用 Docker Compose 创建和管理许多服务，这些服务是我们上一节中创建的 Dockerfile。我们还学习了如何使用
    Docker Compose 打包我们的全栈应用程序，包括前端、后端和数据库。
- en: Summary
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter dove deeper into the nitty-gritty steps involved in dockerizing
    your Vue.js 3 project. In addition, we explored best practices and industry standards
    to dockerize and deploy an enterprise Vue.js 3 web application. We also learned
    how to dockerize a full stack web application using Docker Compose.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 本章深入探讨了将 Vue.js 3 项目 docker 化所涉及的繁琐步骤。此外，我们还探讨了 docker 化和部署企业级 Vue.js 3 网络应用程序的最佳实践和行业标准。我们还学习了如何使用
    Docker Compose docker 化一个全栈网络应用程序。
- en: Using a Dockerfile, we were able to dockerize our Pinterest clone demo application
    so that it can be deployed and managed by other team members or on any cloud provider
    easily. Also, we learned how to bundle and manage a full stack application that
    includes the backend, the frontend, a database service, as well as many more features,
    all in a single file, using Docker Compose.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 Dockerfile，我们能够将我们的 Pinterest 模拟演示应用程序 docker 化，使其可以轻松地由其他团队成员或任何云服务提供商部署和管理。此外，我们还学习了如何使用
    Docker Compose 打包和管理一个包含后端、前端、数据库服务以及更多功能的全栈应用程序，所有这些都在一个文件中。
- en: In the next chapter, you will explore the concept of testing. You will learn
    what to test from an array of available components and methods. In addition, you
    will learn about best practices and industry standards related to testing libraries
    and how to integrate them with Vue.js 3.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将探索测试的概念。你将学习从一系列可用的组件和方法中测试什么。此外，你还将了解与测试库相关的最佳实践和行业标准，以及如何将它们与Vue.js
    3集成。
- en: 'Part 4: Testing Enterprise Vue.js 3 Apps'
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4部分：测试企业级Vue.js 3应用
- en: Testing an enterprise project can be daunting and unnecessarily complex. This
    part will explore everything relating to enterprise testing and what to test precisely
    to eliminate time spent on testing the wrong code.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 测试企业级项目可能会令人感到 daunting 和不必要地复杂。这部分将探讨与企业测试相关的一切，以及精确测试哪些内容以消除在测试错误代码上浪费的时间。
- en: 'This part comprises the following chapters:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分包括以下章节：
- en: '[*Chapter 8*](B17237_08.xhtml#_idTextAnchor266), [*Testing and What to Test
    in*](https://epic.packtpub.services/index.php?module=oss_Chapters&action=DetailView&record=b958045c-cbca-b3c1-9404-61d6c95961a4)
    *Vue.js 3*'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第8章*](B17237_08.xhtml#_idTextAnchor266), [*在Vue.js 3中测试和要测试的内容*](https://epic.packtpub.services/index.php?module=oss_Chapters&action=DetailView&record=b958045c-cbca-b3c1-9404-61d6c95961a4)'
- en: '[*Chapter 9*](B17237_09.xhtml#_idTextAnchor322), [*Best Practices in Unit Testing*](https://epic.packtpub.services/index.php?module=oss_Chapters&action=DetailView&record=b5bd1ffc-0280-c217-aa63-61d6c9ee0198)'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第9章*](B17237_09.xhtml#_idTextAnchor322), [*单元测试的最佳实践*](https://epic.packtpub.services/index.php?module=oss_Chapters&action=DetailView&record=b5bd1ffc-0280-c217-aa63-61d6c9ee0198)'
- en: '[*Chapter 10*](B17237_10.xhtml#_idTextAnchor363), [*Integration Testing in
    Vue.js 3*](https://epic.packtpub.services/index.php?module=oss_Chapters&action=DetailView&record=907b43f6-1d49-47b3-a4ac-63835de51e8f)'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第10章*](B17237_10.xhtml#_idTextAnchor363), [*Vue.js 3中的集成测试*](https://epic.packtpub.services/index.php?module=oss_Chapters&action=DetailView&record=907b43f6-1d49-47b3-a4ac-63835de51e8f)'
- en: '[*Chapter 11*](B17237_11.xhtml#_idTextAnchor420), *Industry Standard End-to-End
    Testing*'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第11章*](B17237_11.xhtml#_idTextAnchor420), *行业标准的端到端测试*'
