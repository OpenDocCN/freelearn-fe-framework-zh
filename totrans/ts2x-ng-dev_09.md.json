["```js\nng generate directive ui-button\n```", "```js\nimport { Directive } from '@angular/core';\n\n@Directive({\n  selector: '[appUiButton]'\n})\nexport class UiButtonDirective {\n  constructor() {}\n}\n```", "```js\n<div class=\"container\">\n  <button>Click!!</button>\n</div>\n```", "```js\n<button appUiButton>Click!!</button>\n```", "```js\nimport { Directive, ElementRef } from '@angular/core';\n\n@Directive({\n  selector: '[appUiButton]'\n})\nexport class UiButtonDirective {\n  constructor(el: ElementRef) {\n\n  }\n}\n```", "```js\nimport { Directive, ElementRef } from '@angular/core';\n\n@Directive({\n  selector: '[appUiButton]'\n})\nexport class UiButtonDirective {\n  constructor(el: ElementRef) {\n    el.nativeElement.style.backgroundColor = '#ff00a6';\n  }\n}\n```", "```js\nimport { Directive, ElementRef } from '@angular/core';\n\n@Directive({\n  selector: '[appUiButton]'\n})\nexport class UiButtonDirective {\n  constructor(el: ElementRef) {\n    Object.assign(el.nativeElement.style, {\n      backgroundColor: '#ff00a6',\n      padding: '7px 15px',\n      fontSize: '16px',\n      color: '#fff',\n      border: 'none',\n      borderRadius: '4px'\n    })\n  }\n}\n```", "```js\nimport { \n  Directive, \n  ElementRef, \n  HostListener } from '@angular/core';\n\n@Directive({\n  selector: '[appUiButton]'\n})\nexport class UiButtonDirective {\n  constructor(private el: ElementRef) {\n    Object.assign(el.nativeElement.style, {\n      backgroundColor: '#ff00a6',\n      ...\n    })\n  }\n\n  @HostListener('mouseenter') onMouseEnter() {\n    this.el.nativeElement.style.backgroundColor = '#000';\n  }\n\n  @HostListener('mouseleave') onMouseLeave() {\n    this.el.nativeElement.style.backgroundColor = '#ff00a6';\n  }\n}\n```", "```js\n<button appUiButton bgColor=\"red\">Click!!</button>\n```", "```js\nimport { \n  Directive, \n  ElementRef, \n  HostListener, \n  Input,\n  OnInit } from '@angular/core';\n\n@Directive({\n  selector: '[appUiButton]'\n})\nexport class UiButtonDirective implements OnInit {\n  @Input() bgColor: string;\n  @Input() hoverBgColor: string;\n  constructor(private el: ElementRef) {}\n\n  ngOnInit() {\n    Object.assign(this.el.nativeElement.style, {\n      backgroundColor: this.bgColor || '#ff00a6',\n      padding: '7px 15px',\n      fontSize: '16px',\n      color: '#fff',\n      border: 'none',\n      borderRadius: '4px'\n    })\n  }\n\n  @HostListener('mouseenter') onMouseEnter() {\n    console.log(this.bgColor);\n    this.el.nativeElement.style.backgroundColor = this.hoverBgColor || '#000';\n  }\n\n  @HostListener('mouseleave') onMouseLeave() {\n    this.el.nativeElement.style.backgroundColor = this.bgColor || '#ff00a6';\n  }\n}\n```", "```js\n<div template=\"ngIf true\">\n  <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Nesciunt non perspiciatis consequatur sapiente provident nemo similique. Minus quo veritatis ratione, quaerat dolores optio facilis dolor nemo, tenetur, obcaecati quibusdam, doloremque.</p>\n</div>\n```", "```js\n<ng-template [ngIf]=\"true\">\n  <div template=\"ngIf true\">\n    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit....</p>\n  </div>\n</ng-template>\n```", "```js\n<div *ngIf=\"true\">\n  <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Nesciunt non perspiciatis consequatur sapiente provident nemo similique.</p>\n</div>\n```", "```js\nng generate directive when\n```", "```js\nimport { \n  Directive, \n  Input, \n  TemplateRef, \n  ViewContainerRef } from '@angular/core';\n\n@Directive({\n  selector: '[appWhen]'\n})\nexport class WhenDirective {\n  constructor(\n    private templateRef: TemplateRef<any>,\n    private viewContainer: ViewContainerRef) { }\n}\n```", "```js\nexport class WhenDirective {\n  private hasView = false;\n\n  constructor(\n    private templateRef: TemplateRef<any>,\n    private viewContainer: ViewContainerRef) { }\n\n  @Input() set appWhen(condition: boolean) {\n    if (condition && !this.hasView) {\n      this.viewContainer.createEmbeddedView(this.templateRef);\n      this.hasView = true;\n    } else if (!condition && this.hasView) {\n      this.viewContainer.clear();\n      this.hasView = false;\n    }\n  }\n}\n```", "```js\nexport class AppComponent {\n  toggle = false;\n  updateToggle() {\n    this.toggle = !this.toggle;\n  }\n}\n```", "```js\n<h3 \n  style=\"text-align:center\" \n  *appWhen=\"toggle\"\n >Hi, cute directive</h3>\n\n<button \n  appUiButton \n  bgColor=\"red\" \n  (click)=\"updateToggle()\"\n>Click!!</button>\n```", "```js\n<div class=\"container\">\n  <h2>{{0.5 | percent}}</h2>\n</div>\n```", "```js\n<div class=\"container\">\n  <h2>{{0.5 | percent}}</h2>\n  <h3>{{'this is uppercase' | uppercase}}</h3>\n</div>\n```", "```js\n<h2>{{50.989 | currency:'EUR':true}}</h2>\n```", "```js\nng generate pipe reverse\n```", "```js\nimport { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'reverse'\n})\nexport class ReversePipe implements PipeTransform {\n\n  transform(value: any, args?: any): any {\n    return value.split('').reverse().join('');\n  }\n\n}\n```", "```js\n<h3>{{'watch me flip' | reverse}}</h3> \n```", "```js\ntransform(value: any, args?: any): any {\n    ...\n}\n```", "```js\nexport class ReversePipe implements PipeTransform {\n\n  transform(value: any, args?: any): any {\n    if(args){\n      return value.split(' ').reverse().join(' ');\n    } else {\n      return value.split('').reverse().join('');\n    }\n  }\n\n}\n```", "```js\n<h2>{{'watch me flip' | reverse:true}}</h2> \n```", "```js\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { UiButtonDirective } from './ui-button.directive';\nimport { WhenDirective } from './when.directive';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    UiButtonDirective,\n    WhenDirective\n  ],\n  imports: [\n    BrowserModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n```", "```js\nexamples:import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { ReversePipe } from './reverse.pipe';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    ReversePipe\n  ],\n  imports: [\n    BrowserModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n```"]