["```js\nexport function sum(a: number, b: number): number {\n  return a + b;\n}\ntest('adds 1 + 2 to equal 3', () => {\n  expect(sum(1, 2)).toBe(3);\n}); \n```", "```js\nnpm install -D vitest \n```", "```js\n{\n  \"scripts\": {\n    \"test\": \"vitest\"\n  }\n} \n```", "```js\nnpm run test \n```", "```js\n\"test:run\": \"vitest run\" \n```", "```js\nexport const squared = (n: number) => n * n \n```", "```js\nimport { expect, test } from 'vitest'\ntest('Squared', () => {\n  expect(squared(2)).toBe(4)\n  expect(squared(4)).toBe(16)\n  expect(squared(25)).toBe(625)\n}) \n```", "```js\n✓ test/basic.test.ts (1)\n   ✓ Squared\n Test Files  1 passed (1)\n      Tests  1 passed (1)\n   Start at  17:39:33\n   Duration  1.14s \n```", "```js\nFAIL  test/basic.test.ts > Squared\nAssertionError: expected 4 to be 5 // Object.is equality\n- Expected\n+ Received\n ❯ eval test/basic.test.ts:13:22\n     11| \n     12| test('Squared', () => {\n     13|   expect(squared(2)).toBe(5);\n       |                      ^\n     14|   expect(squared(4)).toBe(16);\n     15|   expect(squared(25)).toBe(625);\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/1]⎯\n Test Files  1 failed (1)\n      Tests  1 failed (1)\n   Start at  17:41:45\n   Duration  1.15s \n```", "```js\ntest('objects', () => {\n  const obj1 = { a: 1 };\n  const obj2 = { a: 1 };\n  expect(obj1).not.toBe(obj2);\n  expect(obj1).toEqual(obj2);\n}); \n```", "```js\ntest('Array', () => {\n  expect(['1', '2', '3']).toContain('3');\n}); \n```", "```js\nconst selector = (onSelect: (value: string) => void) => {\n  onSelect('1');\n  onSelect('2');\n  onSelect('3');\n}; \n```", "```js\ntest('selector', () => {\n  const onSelect = vi.fn();\n  selector(onSelect);\n  expect(onSelect).toBeCalledTimes(3);\n  expect(onSelect).toHaveBeenLastCalledWith('3');\n}); \n```", "```js\n expect(onSelect).toHaveBeenCalledWith('1');\n  expect(onSelect).toHaveBeenCalledWith('2');\n  expect(onSelect).toHaveBeenCalledWith('3'); \n```", "```js\ntest('spyOn', () => {\n  const cart = {\n    getProducts: () => 10,\n  };\n  const spy = vi.spyOn(cart, 'getProducts');\n  expect(cart.getProducts()).toBe(10);\n  expect(spy).toHaveBeenCalled();\n  expect(spy).toHaveReturnedWith(10);\n}); \n```", "```js\nfunction executeInMinute(func: () => void) {\n  setTimeout(func, 1000 * 60)\n}\nfunction executeEveryMinute(func: () => void) {\n  setInterval(func, 1000 * 60)\n}\nconst mock = vi.fn(() => console.log('done')) \n```", "```js\ndescribe('delayed execution', () => {\n  beforeEach(() => {\n    vi.useFakeTimers()\n  })\n  afterEach(() => {\n    vi.restoreAllMocks()\n  })\n  it('should execute the function', () => {\n    executeInMinute(mock)\n    vi.runAllTimers()\n    expect(mock).toHaveBeenCalledTimes(1)\n  })\n  it('should not execute the function', () => {\n    executeInMinute(mock)\n    vi.advanceTimersByTime(2)\n    expect(mock).not.toHaveBeenCalled()\n  })\n\n  it('should execute every minute', () => {\n    executeEveryMinute(mock)\n    vi.advanceTimersToNextTimer()\n    expect(mock).toHaveBeenCalledTimes(1)\n    vi.advanceTimersToNextTimer()\n    expect(mock).toHaveBeenCalledTimes(2)\n  })\n}) \n```", "```js\ndelayed execution > should execute the function \n```", "```js\ndelayed execution > if should execute the function \n```", "```js\nexport function getSteps() {\n  // SOME NATIVE LOGIC\n  return 100;\n} \n```", "```js\nimport { beforeAll, describe, expect, it, vi } from 'vitest';\nimport { getSteps } from './ios-health-kit';\ndescribe('IOS Health Kit', () => {\n  beforeAll(() => {\n    vi.mock('./ios-health-kit', () => ({\n      getSteps: vi.fn().mockImplementation(() => 2000),\n    }));\n  });\n  it('should return steps', () => {\n    expect(getSteps()).toBe(2000);\n    expect(getSteps).toHaveBeenCalled();\n  });\n}); \n```", "```js\nimport { http, HttpResponse } from 'msw';\nimport { setupServer } from 'msw/node';\nimport { describe, it, expect, beforeAll, afterEach, afterAll } from 'vitest';\nconst server = setupServer(\n  http.get('https://api.github.com/users', () => {\n    return HttpResponse.json({\n      firstName: 'Mikhail',\n      lastName: 'Sakhniuk',\n    });\n  })\n);\ndescribe('Mocked fetch', () => {\n  beforeAll(() => server.listen());\n  afterEach(() => server.resetHandlers());\n  afterAll(() => server.close());\n  it('should returns test data', async () => {\n    const response = await fetch('https://api.github.com/users');\n    expect(response.status).toBe(200);\n    expect(response.statusText).toBe('OK');\n    expect(await response.json()).toEqual({\n      firstName: 'Mikhail',\n      lastName: 'Sakhniuk',\n    });\n  });\n}); \n```", "```js\nnpm install --save-dev \\\n  @testing-library/react \\\n  @testing-library/jest-dom \\\n  vitest \\\n  jsdom \n```", "```js\nimport { expect, afterEach } from 'vitest';\nimport { cleanup } from '@testing-library/react';\nimport * as matchers from \"@testing-library/jest-dom/matchers\";\nexpect.extend(matchers);\nafterEach(() => {\n  cleanup();\n}); \n```", "```js\n test: {\n    globals: true,\n    environment: \"jsdom\",\n    setupFiles: \"./tests/setup.ts\",\n  }, \n```", "```js\nimport type { TestingLibraryMatchers } from \"@testing-library/jest-dom/matchers\";\ndeclare global {\n  namespace jest {\n    interface Matchers<R = void>\n      extends TestingLibraryMatchers<typeof expect.stringContaining, R> {}\n  }\n} \n```", "```js\nexport function App() {\n  return <h1>Hello world</h1>;\n} \n```", "```js\nimport { render, screen } from \"@testing-library/react\";\nimport { describe, it, expect } from \"vitest\";\nimport { App } from \"./App\";\ndescribe(\"App\", () => {\n  it(\"should be in document \", () => {\n    render(<App />);\n    expect(screen.getByText(\"Hello world\")).toBeInTheDocument();\n  });\n}); \n```", "```js\n✓ src/App.test.tsx (1)\n   ✓ App (1)\n     ✓ should be in document\n Test Files  1 passed (1)\n      Tests  1 passed (1)\n   Start at  14:19:01\n   Duration  198ms \n```", "```js\nexport function ClassCheck() {\n  const [clicked, setClicked] = useState(false);\n  return (\n    <button\n      className={clicked ? \"active\" : \"\"}\n      onClick={() => setClicked(true)}\n    >\n      Click me\n    </button>\n  );\n} \n```", "```js\ndescribe(\"ClassCheck\", () => {\n  it(\"should have class active when button was clicked\", () => {\n    render(<ClassCheck />);\n    const button = screen.getByRole(\"button\");\n    expect(button).not.toHaveClass(\"active\");\n    fireEvent.click(button);\n    expect(button).toHaveClass(\"active\");\n  });\n}); \n```", "```js\nexport function Input() {\n  return <input type=\"text\" data-testid=\"userName\" />;\n} \n```", "```js\ndescribe(\"Input\", () => {\n  it(\"should handle change event\", () => {\n    render(<Input />);\n    const input = screen.getByTestId<HTMLInputElement>(\"userName\");\n    fireEvent.change(input, { target: { value: \"Mikhail\" } });\n    expect(input.value).toBe(\"Mikhail\");\n  });\n}); \n```", "```js\nexport function useCounter(initialValue: number = 0) {\n  const [count, setCount] = useState(initialValue);\n  const increment = () => setCount((c) => c + 1);\n  const decrement = () => setCount((c) => c - 1);\n  return { count, increment, decrement };\n} \n```", "```js\ntest(\"useCounter\", () => {\n  const { result } = renderHook(() => useCounter());\n  expect(result.current.count).toBe(0);\n  act(() => {\n    result.current.increment();\n  });\n  expect(result.current.count).toBe(1);\n  act(() => {\n    result.current.decrement();\n  });\n  expect(result.current.count).toBe(0);\n}); \n```", "```js\nAssertionError: expected +0 to be 10 // Object.is equality\n- Expected\n+ Received\n- 10\n+ 0\n ❯ src/useCounter.test.ts:8:32\n      6|   const { result } = renderHook(() => useCounter());\n      7| \n      8|   expect(result.current.count).toBe(10);\n       |                                ^\n      9| \n     10|   act(() => {\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/1]⎯\n Test Files  1 failed (1)\n      Tests  1 failed (1)\n   Start at  14:24:06\n   Duration  200ms \n```"]