- en: Chapter 5. jQuery Animation within WordPress
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。在WordPress中的jQuery动画
- en: We're going to continue to build on our knowledge of jQuery and WordPress while
    delving deeper into animation using jQuery. Animation is one of jQuery's strong
    suites and while you may eschew animation as frivolous or a cheap trick, just
    for "eye candy", it can be very useful when properly implemented.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将继续在jQuery和WordPress的知识基础上深入探讨使用jQuery进行动画处理。动画是jQuery的强项之一，虽然您可能认为动画是轻浮的或者是廉价的技巧，只是为了“眼睛糖果”，但如果正确实现，它确实非常有用。
- en: jQuery animation of CSS properties, colors, and interface elements can ensure
    that users clearly see alert, error, and conformation messages. Animation also
    enables interface objects to fade and slide in and out of view for a better user
    experience. Last but not least, a little "eye candy" certainly never hurt a site's
    interest and popularity level with users.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 通过对CSS属性、颜色和界面元素进行jQuery动画处理，可以确保用户清楚地看到警报、错误和确认消息。动画还使界面对象能够淡入和淡出以获得更好的用户体验。最重要的是，一点点“眼睛糖果”肯定不会影响网站对用户的兴趣和受欢迎程度。
- en: 'In this chapter we will be using animation to:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用动画来实现：
- en: Grab your user's attention and direct it to alerts
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 吸引用户的注意力并将其引导到警报
- en: Save space and animate through a series of rotating sticky posts
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 节省空间并通过一系列旋转的置顶帖子进行动画处理
- en: Create some slick, animated mouse-over effects and easy animated graph charts
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一些流畅的、动画的鼠标悬停效果和简单的动画图表
- en: Let's get started applying useful, high-end animations to our WordPress site.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始将实用的、高端的动画应用到我们的WordPress站点上。
- en: jQuery animation basics
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: jQuery动画基础
- en: 'To start off, we already have a little experience with jQuery animation. Let''s
    refresh: In [Chapter 2](ch02.html "Chapter 2. Working with jQuery in WordPress"),
    *Working with jQuery in WordPress*, in the *Events and effects* section, we learned
    about the following functions: `show(), hide(), fadeIn(), fadeOut(), fadeTo(),
    slideUp(), slideDown()`, and `slideToggle()`. I had also mentioned the `animate()`
    and `stop()` functions.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们已经有一点jQuery动画的经验。让我们回顾一下：在[第2章](ch02.html "第2章。在WordPress中使用jQuery")，*在WordPress中使用jQuery*，在*事件和效果*部分，我们了解了以下函数：`show(),
    hide(), fadeIn(), fadeOut(), fadeTo(), slideUp(), slideDown()`和`slideToggle()`。我还提到了`animate()`和`stop()`函数。
- en: 'We''ve already worked with several of these functions in our previous projects
    in [Chapter 2](ch02.html "Chapter 2. Working with jQuery in WordPress"), *Working
    with jQuery in WordPress*; [Chapter 3](ch03.html "Chapter 3. Digging Deeper: Understanding
    jQuery and WordPress Together"), *Digging Deeper: Understanding jQuery and WordPress
    Together*; and [Chapter 4](ch04.html "Chapter 4. Doing a Lot More with Less: Making
    Use of Plugins for Both jQuery and WordPress"), *Doing a Lot More with Less: Making
    Use of Plugins for Both jQuery and WordPress*, particularly, `show()` and `hide()`,
    as well as `fadeTo()` and `slideToggle()`. As we''ve seen, a very large portion
    of your animation needs are easily met with these shortcut functions, though at
    the same time, limited by them. Let''s now take a closer look at the `animate()`
    function and pick up some fine grain control over our jQuery animations.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在之前的项目中已经使用过几种这些函数，分别是[第2章](ch02.html "第2章。在WordPress中使用jQuery")，*在WordPress中使用jQuery*；[第3章](ch03.html
    "第3章。深入挖掘：理解jQuery和WordPress")，*深入挖掘：理解jQuery和WordPress*；和[第4章](ch04.html "第4章。以更少的工作做更多事情：利用jQuery和WordPress的插件")，*以更少的工作做更多事情：利用jQuery和WordPress的插件*，特别是，`show()`和`hide()`，以及`fadeTo()`和`slideToggle()`。正如我们所看到的，这些快捷函数可以轻松满足您的大部分动画需求，但同时也受到它们的限制。现在让我们更仔细地看一下`animate()`函数，并掌握一些对我们的jQuery动画具有精细控制的方法。
- en: CSS properties made magical
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CSS属性的魔法
- en: The `.animate()` function allows you to animate any *numerical* CSS property.
    Pixels `px` are the understood norm for most numerical property values, but you
    can specify `em` and `%` (percentage) units. Pretty much anything you can place
    in the handy `.css()` function, can be used in the `.animate()` function.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`.animate()`函数允许您对任何*数字*CSS属性进行动画处理。`px`是大多数数字属性值的理解规范，但您可以指定`em`和`%`（百分比）单位。几乎您可以放置在便捷的`.css()`函数中的任何东西，都可以在`.animate()`函数中使用。'
- en: Additionally, rather than numeric values, you can add the shortcut strings `"show",
    "hide"`, and `"toggle"` to any property. They will essentially take the value
    from 0 to 100, or vice versa, or toggle from 0 or 100 to the opposite number for
    you.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您可以将快捷字符串`"show", "hide"`和`"toggle"`添加到任何属性中，而不是数值。它们基本上会将值从0变为100，或者反之，或者从0或100切换到相反的数字。
- en: 'Let''s take a look at a quick example of this clever function. Remember, you''ll
    want to place any jQuery scripts you write inside the document ready function:
    `jQuery(function(){//code here})`; also inside `<script>` tags, so that your jQuery
    will launch when the DOM has finished loading:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速看一下这个聪明函数的一个简单示例。记住，你会想把你编写的任何jQuery脚本放在`document ready` 函数内：`jQuery(function(){//code
    here})`；同样也要放在`<script>` 标签内，这样你的jQuery将在DOM加载完成时启动：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This snippet will animate all `.post p` paragraph tags on the page, increasing
    the font size and adding a border.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码片段将为页面上的所有`.post p`段落标签添加动画效果，增大字体大小并添加边框。
- en: You'll notice that I added a `border` property that does not have a single numeric
    value. You'll also notice that when you test this code on your site, the border
    does not animate in; instead, it just appears at the very end as the animation
    completes. Adding CSS properties that are not basic numeric values (like borders
    or background color, hex values) will not animate, but you can add all CSS properties
    using the `.animate()` function, which will act like the `.css()` function once
    it's *completed* running. This is probably not the best way to add regular CSS
    properties, but if you're animating something anyway, just know you can add other
    non-numeric CSS properties, they just won't animate.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到我添加了一个没有单一数值的`border` 属性。当你在你的网站上测试这段代码时，你还会注意到，边框不会动画显示出来；相反，在动画完成时，它只会在最后一刻出现。添加不是基本数字值的CSS属性（如边框或背景颜色、十六进制值）将不会进行动画处理，但是你可以使用`.animate()`
    函数添加所有CSS属性，一旦完成运行，它将像`.css()` 函数一样运行。这可能不是添加常规CSS属性的最佳方法，但如果你无论如何都要进行动画处理，只要知道你可以添加其他非数值CSS属性，它们只是不会动画显示。
- en: Tip
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Your property doesn''t work?**'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**你的属性不起作用吗？**'
- en: 'You probably noticed this with the `.css()` function as early as [Chapter 2](ch02.html
    "Chapter 2. Working with jQuery in WordPress"), *Working with jQuery in WordPress*
    already, but just in case you didn''t: property names must be **camel cased**
    in order to be used by the `.animate()` and `.css()` function. It''s a bit confusing
    as you''re probably just thinking of them as properties that you''d use in an
    actual CSS stylesheet but you''ll need to specify `paddingBottom` instead of `padding-bottom`
    and `marginRight` not `margin-right`.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能早在[第二章](ch02.html "第二章。在WordPress中使用jQuery") *在WordPress中使用jQuery* 就注意到了这一点，使用`.css()`
    函数时，但以防万一你没有注意到：属性名称必须采用**驼峰命名法**才能被`.animate()` 和`.css()` 函数使用。这可能有点令人困惑，因为你可能只把它们当作在实际CSS样式表中使用的属性，但是你需要指定`paddingBottom`
    而不是`padding-bottom`，`marginRight` 而不是`margin-right`。
- en: Making it colorful
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使它多姿多彩
- en: You probably agree that as cool as the `.animate()` function is, it's not that
    impressive without color (and a little jarring with color that just changes abruptly
    at the end of the animation). You long to cross fade in brilliant color. Who doesn't?
    Unfortunately, the core animate function isn't robust enough to calculate all
    the variances of numbers in a single hex web color, much less between two hex
    colors (let's just say, some serious math is involved). It's much more complicated
    than moving a value anywhere from 0 to 100, or down again.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能同意，尽管`.animate()` 函数很酷，但如果没有颜色（并且颜色突然在动画结束时发生变化，这样会有点刺眼），它并不那么令人印象深刻。你渴望在灿烂的颜色中交叉淡入。谁不希望呢？不幸的是，核心的animate函数并不够强大，无法计算单个十六进制网络颜色中的所有变化，更不用说两个十六进制颜色之间的变化了（让我们只说，这涉及到一些严重的数学问题）。这比从0到100移动一个值，或者再次移动回来要复杂得多。
- en: The good news is, the animate function can be *extended* with the Color plugin.
    The even better news? Yes, this plugin comes bundled with WordPress!
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 好消息是，`animate` 函数可以通过Color插件进行*扩展*。更好的消息？是的，这个插件已经捆绑在WordPress中了！
- en: 'Let''s add this plugin to our theme with the `wp_enqueue_script` like so:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们像这样使用`wp_enqueue_script` 将这个插件添加到我们的主题中：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Tip
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Registering and including a script that only needs to load on a particular
    page?**'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**注册并包含一个只需要在特定页面加载的脚本？**'
- en: 'You''ll recall in [Chapter 2](ch02.html "Chapter 2. Working with jQuery in
    WordPress"), *Working with jQuery in WordPress*, that you can wrap your `wp_enqueue_script()`
    functions in `if` statements that use WordPress'' conditional tags that check
    for what page the site is on: `is_home()`, or `is_front_page()`, or `is_admin()`,
    and so on. Be sure to use these to your advantage to help keep your site running
    as optimized as possible and not unnecessarily slowed down by loading scripts
    that aren''t needed. To find out more about conditional tags, check out their
    use with the Script API in [Chapter 2](ch02.html "Chapter 2. Working with jQuery
    in WordPress"), *Working with jQuery in WordPress*, and the conditional tag quick
    reference in [Chapter 9](apa.html "Appendix A. Appendix: jQuery and WordPress
    Reference Guide"), *jQuery and WordPress Reference*. You can also check out WordPress''
    Codex at [http://codex.wordpress.org/Conditional_Tags](http://codex.wordpress.org/Conditional_Tags).'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第2章](ch02.html "第2章。在WordPress中使用jQuery")中，*在WordPress中使用jQuery*，你会记得，你可以将你的`wp_enqueue_script()`函数包裹在`if`语句中，这些语句使用WordPress的条件标签来检查站点所在的页面：`is_home()`，或`is_front_page()`，或`is_admin()`等等。一定要善用这些条件标签，帮助你的站点尽可能地保持优化，并且不要通过加载不需要的脚本来不必要地减慢网站速度。要了解更多关于条件标签的信息，请查看它们在[第2章](ch02.html
    "第2章。在WordPress中使用jQuery")中与脚本API一起使用的情况，以及在[第9章](apa.html "附录A。附录：jQuery和WordPress参考指南")中的条件标签快速参考，*jQuery和WordPress参考指南*。你也可以查看WordPress的Codex网址：[http://codex.wordpress.org/Conditional_Tags](http://codex.wordpress.org/Conditional_Tags)。
- en: Again, this plugin *extends* the existing `.animate()` function, so there are
    no new properties to learn! Once you've included the Color plugin into your project
    you can animate in background colors to your heart's content.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，这个插件*扩展*了现有的`.animate()`函数，所以没有新的属性需要学习！一旦你将Color插件包含到你的项目中，你就可以随心所欲地动画化背景颜色了。
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You should now see the `.post` paragraphs fade elegantly to a nice, light-blue
    color, as seen in the next screenshot:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你应该看到`.post`段落优雅地淡化成一个漂亮的浅蓝色，就像下一个截图中所示的那样：
- en: '![Making it colorful](img/1742_05_01.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![让它丰富多彩](img/1742_05_01.jpg)'
- en: Taking it easy, with easing control
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 放松一下，用缓动控制
- en: If you're familiar with animation using various video editing tools or Adobe
    Flash, you've probably heard of easing. **Easing** is the control of acceleration
    and deceleration in an animation. It's most common use is to give animations a
    more natural feel, mimicking various properties of physics found in the real world,
    instead of calculated and rigid movement.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你熟悉使用各种视频编辑工具或Adobe Flash进行动画制作，你可能听说过缓动。**缓动**是动画中加速和减速的控制。它最常见的用途是给动画一个更自然的感觉，模仿现实世界中发现的各种物理属性，而不是计算和刚性的运动。
- en: Almost as complicated as animating hex color values, easing applies virtual
    physics properties to the object being animated using various algorithms to control
    the speed of an animation as it starts off and ends. Serious math indeed. jQuery
    comes with a type of built-in easing, so we're saved from having to really think
    about any of it.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎与动画化十六进制颜色值一样复杂，缓动将虚拟物理属性应用于被动画化的对象，使用各种算法来控制动画的速度，使其在开始和结束时加速。这确实是严肃的数学。jQuery带有一种内置的缓动类型，所以我们不必真正考虑其中的任何问题。
- en: jQuery's default easing option is called "swing". Technically, there are two
    options—"linear" and "swing". **Linear easing** simply animates the object along
    its values from point A to point B, like a good programming script should. No
    acceleration or deceleration, so yeah, it is a tad "stiff".
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery的默认缓动选项称为“swing”。从技术上讲，有两个选项——“linear”和“swing”。**线性缓动**简单地沿着从点A到点B的值动画对象，就像一个良好的编程脚本应该做的那样。没有加速或减速，所以是的，它有点“僵硬”。
- en: '**Swing easing** starts off more slowly, gains full speed, and then slows down
    again as the animation completes. jQuery chose swing as the default easing option
    as it looks best in most situations. That''s probably because this is how most
    objects react in our real physical world; heading off a little slower while gaining
    speed, then decelerating and slowing down as they come to rest (provided the object
    didn''t crash into anything while at the maximum speed).'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**Swing缓动**开始时速度较慢，达到最大速度，然后随着动画完成而再次减慢。jQuery选择swing作为默认的缓动选项，因为它在大多数情况下看起来最好。这可能是因为这就是我们现实世界中大多数物体的反应方式；在达到最大速度时稍微缓慢启动，然后在靠近停止时减速和减慢（前提是物体在最大速度时没有撞到任何东西）。'
- en: 'As swing easing is the *default*, let''s take a look at our previous script
    that animates in our post''s paragraph blue background color and see if we can
    detect the difference:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 由于摆动缓动是*默认*的，让我们看看我们之前用来使文章段落背景色动画的脚本，并看看我们能否检测到差异：
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: It's subtle, but a definite difference is there. Linear easing is much more
    rigid.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这是微妙的，但明显的差异在那里。线性缓动更加严格。
- en: Tip
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Advanced easing: There''s a plugin for that!**'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**高级缓动：有一个插件可以做到！**'
- en: 'As you''ve probably guessed, plenty of "mathy" people have figured out all
    sorts of variations in the easing algorithm to mimic all sorts of different physics
    environments and yes, there''s a jQuery plugin for that. While this plugin doesn''t
    come bundled with WordPress, that shouldn''t stop you from downloading and experimenting
    with it. You can download and test out all the available easing options here:
    [http://gsgd.co.uk/sandbox/jquery/easing/](http://gsgd.co.uk/sandbox/jquery/easing/).'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可能猜到的，许多“数学派”的人已经找出了各种各样的缓动算法变体，以模仿各种不同的物理环境，是的，有一个jQuery插件可以做到这一点。虽然这个插件没有与WordPress捆绑在一起，但这不应该阻止你下载并尝试它。你可以在这里下载并测试所有可用的缓动选项：[http://gsgd.co.uk/sandbox/jquery/easing/](http://gsgd.co.uk/sandbox/jquery/easing/)。
- en: The plugin, like the Color plugin, *extends* the `.animate()` function and provides
    you with over 25 easing options, which include some pretty cool options such as
    jswing bounce and elastic, as well as a host of vector easing paths such as circular
    and sine wave.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这个插件，就像Color插件一样，*扩展了* `.animate()` 函数，并为你提供了超过25个缓动选项，其中包括一些非常酷的选项，比如jswing
    bounce和elastic，以及一系列向量缓动路径，如圆形和正弦波。
- en: 'The majority of these options are a bit of overkill for most projects that
    I''ve been on but I do love the elastic and bounce easing options. By the way,
    if you''re one of those "mathy" people I referred to a second ago, you''ll enjoy
    checking out the magic behind the easing algorithms here: [http://www.robertpenner.com/easing/](http://www.robertpenner.com/easing/).'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数项目中这些选项都有点过度了，但我确实喜欢弹性和弹跳的缓动选项。顺便说一下，如果你是我刚才提到的那些“数学派”的人之一，你会喜欢查看这里缓动算法背后的魔力：[http://www.robertpenner.com/easing/](http://www.robertpenner.com/easing/)。
- en: 'Timing is everything: Ordering, delaying, and controlling the animation que'
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 时间把控至关重要：顺序、延迟和控制动画队列
- en: Again, if you're familiar with animation, be it traditional animation, video,
    or multimedia work with Flash, you've probably learned—*timing is everything*.
    The more control you have over the timing and playback of your animations the
    better. Easing, for example, depends on how much time to give the object to animate
    and move. No matter how "smooth" you'd like an object to move, it's going to look
    fairly jerky if you only give it a second or less to get across the screen. Let's
    take a look at the three main ways to get a handle on your timing and playback.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对动画很熟悉，无论是传统动画、视频，还是与Flash进行多媒体工作，你可能已经了解——*时间把控至关重要*。你对动画的时间和播放控制得越多，越好。例如，缓动效果取决于给对象动画和移动多少时间。无论你想让一个对象移动得有多“平滑”，如果你只给它一秒钟或更少的时间来穿过屏幕，它看起来都会相当颠簸。让我们看看掌握时间和播放的三种主要方法。
- en: 'Getting your ducks in row: Chain ''em up'
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 让你的事情井然有序：把它们链接起来
- en: We've discussed chaining functions in previous chapters, and you're most likely
    aware that any events you've chained together in a jQuery statement kick off in
    the order that they were *appended* to the chain. As far as I can tell, and based
    on what the experts say, you can chain to your heart's content as many functions
    as you'd like, infinitely (or until the browser crashes).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在之前的章节中讨论了函数链，你很可能知道你在jQuery语句中链接在一起的任何事件会按照它们被*附加*到链中的顺序启动。据我所知，并根据专家的说法，你可以链接任意多的函数，无限地（或直到浏览器崩溃）。
- en: On the whole, I find laying out jQuery functions in separate lines, with their
    own selector sets, can take up some space, but keeps your jQuery scripts much
    more organized and manageable. Remember, you always start a jQuery statement with
    an initial selector for a wrapper set, but based on additional chained functions
    that can move you around the DOM and take their own selectors, you'll find that
    you can move around and affect the DOM a whole lot just from one statement! Along
    the way, possibly generating some quite magnificent "spaghetti code" that's hard
    to follow and will make any developer who has to work with you hate your guts.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，我发现将 jQuery 函数分布在单独的行中，具有它们自己的选择器集，可能会占用一些空间，但会使您的 jQuery 脚本更有组织和可管理性。请记住，您始终从包装器集的初始选择器开始执行
    jQuery 语句，但基于额外的链式函数，可以使您在 DOM 中移动并获取其自己的选择器，您会发现您可以仅通过一个语句在 DOM 中移动和影响很多。沿途，可能会生成一些相当壮观的“意大利面代码”，很难跟踪，并且会让任何不得不与您合作的开发人员憎恨您的内心。
- en: However, for functions that need to be run on a single initial selector set,
    especially animation functions, I really like jQuery chains as they help keep
    my animation sequences in the order that I want them to kick off, and it's clear
    what wrapper set is going to be affected by the chain.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，对于需要在单个初始选择器集上运行的函数，特别是动画函数，我真的很喜欢 jQuery 链，因为它们有助于保持我的动画序列按照我想要的顺序开始，而且很明确哪个包装器集将受到链的影响。
- en: 'Here''s an example:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个示例：
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now, even initially concise animation chains can get a little complicated.
    That''s OK; unlike some scripting languages, JavaScript and jQuery rely on the
    semi colon ";" as a clear ending statement, not the actual end of the line. So
    you can organize your chains into separate lines so that it''s a little easier
    to follow and edit like so:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，即使最初简明的动画链也可能变得有点复杂。没关系；与一些脚本语言不同，JavaScript 和 jQuery 依赖于分号 ";" 作为清晰的结束语句，而不是实际行的结尾。因此，您可以将链组织成单独的行，以便更容易跟踪和编辑，如下所示：
- en: '[PRE5]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Delay that order!
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 延迟订单！
- en: 'Because timing is everything, I often discover I want a function''s animation
    to complete, and yet, depending on the easing option, especially those that are
    *elastic* or *bounce*, I don''t necessarily want the very next function to kick
    off quite so fast! As of jQuery 1.4, it''s easy to **pause** the chain with the
    `.delay()` function. Let''s place a three second pause in our chain like so:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 因为时间至关重要，我经常发现我希望函数的动画完成，然而，根据缓动选项，特别是*弹性*或*反弹*，我并不一定希望下一个函数就这么快开始！从 jQuery
    1.4 开始，使用`.delay()`函数可以轻松**暂停**链。让我们在我们的链中放置一个三秒的暂停，如下所示：
- en: '[PRE6]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Tip
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Check your jQuery version!** `delay()` **requires 1.4+**'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**检查您的 jQuery 版本！** `delay()` **需要1.4+**'
- en: As soon as this function became available, I've put it to use in all sorts of
    invaluable ways with my jQuery animations. However, if you find the delay function
    is not working for you, you're probably working with version 1.3.2 or older of
    jQuery. The delay function is only available with version 1.4+. You may want to
    go back to [Chapter 2](ch02.html "Chapter 2. Working with jQuery in WordPress"),
    *Working with jQuery in WordPress* and see about registering jQuery from the Google
    CDN or including it directly in your theme.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦此功能可用，我就在我的 jQuery 动画中以各种无价的方式使用它。但是，如果您发现延迟函数不起作用，那么您可能正在使用版本1.3.2或更早的 jQuery。延迟函数仅在版本1.4+中可用。您可能想回到[第二章](ch02.html
    "第二章。在 WordPress 中使用 jQuery")，*在 WordPress 中使用 jQuery*并查看关于从 Google CDN 注册 jQuery
    或直接将其包含在主题中的内容。
- en: Jumping the queue
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 插队
- en: Queues—those irritating lines that ensure everyone or everything in them is
    processed fairly and in the order they arrived. jQuery's animation queue works
    similarly, only processing each object's animation request, in the order it was
    assigned to the object. Sometimes special needs and requirements arrive that shouldn't
    be forced to waste time in the queue.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 队列——这些令人烦恼的队列确保每个人或每件事都按照它们到达的顺序公平处理。jQuery 的动画队列工作方式类似，只处理每个对象的动画请求，按分配给对象的顺序进行处理。有时会出现不应该被迫在队列中浪费时间的特殊需求和要求。
- en: So far, we've seen how the `.animate()` function, in addition to CSS properties,
    can be passed various optional parameters specifying the *duration*, (slow, fast,
    or numerical milliseconds) and the type of *easing* (swing, linear, or plugin
    extended easing).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到`.animate()`函数，除了 CSS 属性之外，还可以传递各种可选参数，指定 *持续时间*（slow、fast 或数字毫秒）和
    *缓动* 类型（swing、linear 或插件扩展缓动）。
- en: The `que` parameter is a **true or false** Boolean that can be set if you don't
    want the animate function to have to wait its turn. For the instances that you'd
    like an object to have several animations to run in parallel with each other,
    like sliding *and fading* at the same time, disabling the `queue` in your animate
    function will do the trick.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`que`参数是一个**真或假**布尔值，如果你不想让动画函数等待其轮到，则可以设置它。对于你希望一个对象同时运行多个动画以与彼此并行的实例，比如同时滑动*和*淡化，禁用`queue`在你的动画函数中将起作用。'
- en: 'In order to set the `queue` option in your code, instead of using the previous
    syntax we''ve been working with, you will have to *wrap* all the other options
    into a more advanced syntax which clearly labels each optional parameter like
    so:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在你的代码中设置`queue`选项，而不是使用我们之前一直在使用的语法，你将不得不*将*所有其他选项包装到更高级的语法中，清楚地标记每个可选参数，像这样：
- en: '[PRE7]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The following screenshot shows the post is fading out *while* changing in height
    at the same time:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了帖子在淡出*同时*同时改变高度：
- en: '![Jumping the queue](img/1742_05_02.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![跳过队列](img/1742_05_02.jpg)'
- en: You can see by the previous screenshot that the code we just wrote fades the
    first `.post` div in *while* it's sliding down. If you change `false` to `true`,
    and reload the page, you'll discover that the first `.post` div slides all the
    way down to `500` pixels high *and then* fades in.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 通过前面的屏幕截图可以看出，我们刚刚编写的代码在下滑时淡化了第一个`.post` div。如果你将`false`改为`true`，然后重新加载页面，你会发现第一个`.post`
    div滑动到`500`像素高度后*然后*淡入。
- en: Stepping to completion
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 完成跳转
- en: The final options that can be passed into the `.animate()` function are `step`
    and `complete`. The `step` parameter allows you to set up an additional function
    that can be called after each step of the animation is complete (sometimes useful
    if you have multiple CSS properties you're animating). The `complete` parameter
    allows you to specify a callback function when the entire animation function has
    been completed. Keep in mind, you can chain multiple animation functions together,
    and the steps with complete parameters are unique to each instance of the animation
    functions that they belong to.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 可以传递到`.animate()`函数的最终选项是`step`和`complete`。`step`参数允许你设置一个额外的函数，在每个动画步骤完成后调用它（有时对于你正在动画化的多个CSS属性很有用）。`complete`参数允许你指定一个回调函数，当整个动画函数完成时调用。请记住，你可以链接多个动画函数，而具有完成参数的步骤是属于它们所属的每个动画函数的唯一实例。
- en: If you have an animation that absolutely should not kick-off until the current
    animation function has completed, the `.delay()` function might not be the best
    way to go. You can use the `step` and `complete` parameters to kick off other
    functions and animations in the exact order you wish.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有一个动画绝对不应该在当前动画函数完成之前启动的情况，`.delay()`函数可能不是最好的方法。你可以使用`step`和`complete`参数按照你希望的确切顺序启动其他函数和动画。
- en: '[PRE8]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The previous code snippet will generate JavaScript alerts at the `.animate()`
    function's completed steps once it's completely finished.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码片段将在`.animate()`函数完全完成后在完成的步骤中生成JavaScript警报。
- en: '![Stepping to completion](img/1742_05_03.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![完成跳转](img/1742_05_03.jpg)'
- en: I've personally never needed to hook into the `step` parameter for a WordPress
    project, but I can see how it could be very useful for hooking into and creating
    a chain of cascading type effects. I have found the complete `parameter` very
    useful for many of my animations.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我个人从未需要钩入WordPress项目的`step`参数，但我可以看出它如何在钩入和创建一系列级联类型效果方面非常有用。我发现完整的`parameter`对我的许多动画非常有用。
- en: Grabbing the user's attention
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 吸引用户的注意力
- en: OK, sample code snippets aside, it's time to get to work! Back in "hypothetical
    land", our previous clients have enthusiastically touted our jQuery solutions
    to a few associates and we now have quite a few requests for help with WordPress
    sites. Let's walk through a few new hypothetical client situations and see if
    we can solve their problems.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，除了示例代码片段，现在是时候开始工作了！回到“假设的世界”，我们的前一些客户热情地向几位同事推荐了我们的jQuery解决方案，现在我们收到了很多有关WordPress网站的帮助请求。让我们看看一些新的假设客户情况，看看我们是否能解决他们的问题。
- en: 'First up: a common way many sites employ "sticky" posts and how to enhance
    them with a little jQuery animation.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 首先：许多网站采用的一种常见方法是“置顶”帖子以及如何利用一点jQuery动画来增强它们。
- en: 'Project: Animating an alert sticky post'
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目：动画提示置顶帖子
- en: Here's a quick and simple one. You've got a client who has a good friend, who
    runs a non-profit educational organization's site, and they need a favor (meaning;
    do this "for free" please).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个快速简单的情况。你有一个客户，他有一个好朋友，经营着一个非营利性教育组织的网站，他们需要一个帮助（意思是：请"免费"做这个，请）。
- en: The organization's after-school care runs on the public school's schedule (as
    many kids are bussed over from different schools). If the public school system
    takes a snow day or some other emergency day, the after-school program also closes
    down. The organization does their best to notify people through their WordPress
    site.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 组织的课后照顾根据公立学校的时间表运行（因为许多孩子是从不同的学校乘坐校车过来的）。如果公立学校系统放假或发生其他紧急情况，课后项目也会关闭。组织尽力通过他们的
    WordPress 站点通知人们。
- en: Despite making it clear to parents that it's their responsibility to check the
    site, or call to find out the center's schedule, there's been a few misunderstandings
    with people who claim that they checked the site but *"didn't see the closing
    alert"*. Apparently, even though they've been making the posts "sticky" so they
    stay at the top, the posts look awfully similar to the rest of the site's content.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管向家长明确表示他们有责任查看网站或致电了解中心的时间表，但是有一些人声称他们查看了网站但 *"没有看到关闭警报"*。显然，即使他们将帖子设置为 "sticky"，使其保持在顶部，但这些帖子看起来与网站的其他内容非常相似。
- en: You're happy to help (especially as they were referred to you by a client with
    well-paying gigs). It helps that this is a really easy fix. First off, you can
    simply add a few `.sticky` styles to their theme's `style.css` file, which makes
    the sticky posts stand out a lot more on the site.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 你很乐意帮忙（特别是因为他们是由一个有高薪工作的客户推荐给你的）。这是一个真正容易解决的问题。首先，你可以简单地在他们主题的 `style.css` 文件中添加几个
    `.sticky` 样式，这样在网站上粘性帖子就会更加突出。
- en: They've made it clear they only use the "sticky" feature for daycare and other
    center alerts that affect the organization's center building being open to the
    public so you decide to do a quick Google search for "creative `commons, public
    domain, alert icon svg"` and download a very nice SVG file from [http://commons.wikimedia.org/wiki/File:Nuvola_apps_important.svg](http://commons.wikimedia.org/wiki/File:Nuvola_apps_important.svg).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 他们明确表示，他们只使用 "sticky" 功能来发布日托和其他影响组织中心建筑对公众开放的警示，因此你决定快速搜索 "creative `commons,
    public domain, alert icon svg`"，并从 [http://commons.wikimedia.org/wiki/File:Nuvola_apps_important.svg](http://commons.wikimedia.org/wiki/File:Nuvola_apps_important.svg)
    下载了一个非常漂亮的 SVG 文件。
- en: Let's open that SVG file into Inkscape and size it down to 48 pixels wide to
    save a transparent `.png` of it (I took the liberty of adding a little blur to
    the shadow, but you may not want to). Name the PNG `sticky-alert.png`.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将 SVG 文件打开到 Inkscape 中，并将其缩小到 48 像素宽以保存一个透明的 `.png` 文件（我冒昧地给阴影加了一点模糊，但你可能不想要）。将
    PNG 命名为 `sticky-alert.png`。
- en: '![Project: Animating an alert sticky post](img/1742_05_04.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![项目：为警示粘性帖子添加动画效果](img/1742_05_04.jpg)'
- en: 'You then add the new `sticky-alert.png` image to their theme''s image directory
    and update the stylesheet at the very bottom *or below* the existing `.sticky`
    class, if one exists, with a few class rules for the `.sticky` calls like so:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你将新的 `sticky-alert.png` 图像添加到他们主题的图像目录，并在样式表的最底部*或下面*已存在的 `.sticky` 类之后，如果存在的话，用一些
    `.sticky` 调用的类规则更新它，如下所示：
- en: '[PRE9]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The following screenshot shows the newly re-styled sticky posts:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了新样式的粘性帖子：
- en: '![Project: Animating an alert sticky post](img/1742_05_05.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![项目：为警示粘性帖子添加动画效果](img/1742_05_05.jpg)'
- en: This is more than good enough. Now anyone going to the site regardless of JavaScript
    being available will certainly notice that. But hey, since you're poking around
    in the theme anyway, and you've decide to register jQuery, the jQuery Color plugin
    from the WordPress bundle, and include a `custom-jquery.js` page to their `header.php`
    file, you might as well add in this nice and simple few lines of code.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这已经足够好了。现在无论是否可用 JavaScript，任何访问站点的人都肯定会注意到。但是，嘿，既然你已经在主题中挖掘了，而且决定注册 jQuery，从
    WordPress 捆绑包中添加 jQuery Color 插件，并将 `custom-jquery.js` 页面包含到他们的 `header.php` 文件中，你也可以加入这几行漂亮而简单的代码。
- en: '[PRE10]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The previous code will fade our sticky posts from light yellow to darker orange,
    and then *repeat* it again for emphasis. The following image shows the post faded
    to darker orange:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码将我们的粘性帖子从浅黄色渐变为较深的橙色，然后再次*重复*以突出显示。以下图像显示了帖子渐变为较深的橙色：
- en: '![Project: Animating an alert sticky post](img/1742_05_06.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![项目：为警示粘性帖子添加动画效果](img/1742_05_06.jpg)'
- en: Again, a bit hard to see the animation in a book, but we just made sure that
    the alert `.sticky` post, upon loading, will fade up to orange (`#ff9900`) and
    back down to the yellow (`#ffffcc`), and then repeat one more time for quite the
    "orange alert" effect.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在书中很难看到动画效果，但我们确保了警报 `.sticky` 帖子在加载时会淡入到橙色 (`#ff9900`)，然后再淡出到黄色 (`#ffffcc`)，然后再重复一次，产生了相当明显的
    "橙色警报" 效果。
- en: The alert posts are very noticeable now and the organization can't thank you
    enough! Which is more than enough for your few minutes worth of work.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在警报帖子非常明显了，组织对你感激不尽！这已经足够补偿你几分钟的工作了。
- en: Creating easy, animated graphs
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建简单、动态的图表
- en: The non-profit organization was so impressed with your alert sticky post solution,
    they've allocated some funds together and have got another request for you. They
    noticed how you fixed up the alert icon using Inkscape and they've asked you how
    much trouble it would be to generate a monthly graph for them for another post
    they put up. The post is their top five stats from their green recycle program.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这个非营利组织对你的警报粘性帖子解决方案印象深刻，他们已经调拨了一些资金，并向你提出了另一个请求。他们注意到你如何使用 Inkscape 修复了警报图标，并询问你为另一个他们发布的帖子生成一个月度图表会有多大麻烦。这篇帖子是关于他们的绿色回收项目的前五个统计数据。
- en: While the bulleted list is super easy for the site administrator to implement,
    people don't really notice or remember the information, so they were thinking
    of posting graphs to the site, but need someone to draw them or generate them
    in some way.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然项目符号列表对网站管理员来说非常容易实施，但人们并不真正注意或记住信息，因此他们正在考虑在网站上发布图表，但需要有人来绘制或以某种方式生成它们。
- en: 'Looking through their site, you notice the editor always consistently formats
    the information posted. All post titles have **"... Monthly Stats"** in them,
    all the information is in bullets, and the percentage number always comes *after*
    a colon "**:**". It is great that the admin has been so consistent. It will make
    it very easy to work out a solution that allows the editor to continue doing what
    they''ve always done. The posts currently look like this:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览他们的网站，你注意到编辑总是一贯地格式化发布的信息。所有的帖子标题都包含 **"... 月度统计"**，所有的信息都是用项目符号列出的，百分比数字始终位于冒号
    "**:**" 之后。管理员一直保持如此一致是很好的。这将使得解决方案的制定变得非常容易，让编辑继续做他们一直以来做的事情。当前的帖子看起来像这样：
- en: '![Creating easy, animated graphs](img/1742_05_07.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![创建简单、动态的图表](img/1742_05_07.jpg)'
- en: You let the admin know as long as he/she continues to consistently format the
    posts in this way, you can write up a jQuery script that will draw the chart for
    them. They almost don't believe you, and are happy to have you proceed.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 你告诉管理员只要他/她继续一贯地格式化帖子，你可以为他们撰写一个 jQuery 脚本来为他们绘制图表。他们几乎不相信你，很高兴让你继续进行。
- en: 'To get started, we''ll need to first make sure we''re targeting the correct
    posts for **Monthly Stats** only. We''ll do this by setting up a jQuery selector
    like so:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，我们首先需要确保我们只针对 **月度统计** 的正确帖子。我们将通过设置一个 jQuery 选择器来实现这一点，如下所示：
- en: '[PRE11]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'As we can see, this little "test" selection grabs all `h2` tags which are inside
    `.posts` that only contain the text "Monthly `Stats"`. We then move along the
    DOM and target the `.entry-content` div and then the **first** `ul` inside that.
    We can see the previous code is properly targeting what we want in these posts
    by changing the background color, as shown in the next screenshot:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，这个小的 "测试" 选择抓取了所有包含 "月度统计" 文本的 `.posts` 内部的 `h2` 标签。然后我们沿着 DOM 移动并定位 `.entry-content`
    div，然后定位其中的 **第一个** `ul`。我们可以通过改变背景颜色来看到先前的代码正确地定位了我们在这些帖子中想要的内容，如下一张截图所示：
- en: '![Creating easy, animated graphs](img/1742_05_08.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![创建简单、动态的图表](img/1742_05_08.jpg)'
- en: Now that we can target the specific posts we want, without changing the theme's
    output or making our client do any work, let's get to work on the rest of the
    graph!
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以针对特定的帖子进行定位，而无需更改主题的输出或让我们的客户做任何工作，让我们开始着手处理剩下的图表吧！
- en: 'First up, because we''ll be loading a background image, and those just load
    a lot nicer from a theme''s stylesheet (it''s easier to target the images), let''s
    use Inkscape again to help us create a basic background about 450 pixels wide
    that shows the progression from "Just getting started" to "Yes!", like so:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，因为我们将加载一个背景图片，而这些图片从主题的样式表中加载起来会更加顺畅（更容易定位图片），让我们再次使用 Inkscape 来帮助我们创建一个基本的背景，大约
    450 像素宽，显示从 "刚刚开始" 到 "Yes!" 的进展，如下所示：
- en: '![Creating easy, animated graphs](img/1742_05_09.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![创建简单、动态的图表](img/1742_05_09.jpg)'
- en: Let's export a PNG of that graphic and add it to the image directory of our
    client's theme. Then, using jQuery, let's dynamically add a class to all our targeted
    `ul:`
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们导出该图形的PNG并将其添加到客户主题的图像目录中。然后，使用jQuery，让我们动态地向所有目标`ul`添加一个类：
- en: '[PRE12]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We can now go into the client''s theme stylesheet, and just as we did for the
    sticky alert posts, create custom CSS rules for our new class. Open up the theme''s
    `style.css` stylesheet and add these rules at the end:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以进入客户主题的样式表，并且就像我们为粘性警报发布的那样，为我们的新类创建自定义CSS规则。打开主题的`style.css`样式表，并在末尾添加以下规则：
- en: '[PRE13]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The first rule adds our new `greenBackground.png` chart image and sets some
    basic properties so that the list items can start accommodating our upcoming jQuery
    additions. The next two rules after that fix specific `.entry-content li` issues
    that the client's theme (in this case, the default theme) places on every `li`
    element inside an `.entry-content` div. We don't want the "little squares" before
    our chart items, and we want the padding on each `li` moved in about `10px` more.
    Again, we only want to affect the `.entry-content` li items if jQuery has added
    our `.greenStats` class so we're sure to add that class name into the CSS rule.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 第一条规则添加了我们的新的`greenBackground.png`图表图像，并设置了一些基本属性，以便列表项可以开始适应我们即将添加的jQuery。接下来的两条规则修复了客户主题（在本例中为默认主题）放置在每个`.entry-content`
    div中的每个`li`元素上的特定`.entry-content li`问题。我们不希望在我们的图表项目之前有“小方块”，我们希望每个`li`的填充再多`10px`。同样，我们只想在jQuery添加了我们的`.greenStats`类时才影响`.entry-content`
    li项，所以务必将该类名添加到CSS规则中。
- en: Now, we're ready for some serious jQuery magic. I hope you've been getting really
    comfortable working with selectors and traversing the DOM until now. We're going
    to have to put a fair amount of that knowledge to work to accomplish the next
    few tasks.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们准备进行一些严肃的jQuery魔术了。我希望你到目前为止已经对选择器和DOM遍历非常熟悉了。我们将不得不运用相当多的这方面的知识来完成接下来的几项任务。
- en: We want to place an `.each()` function item on our targeted `li` and begin manipulating
    the content inside of them.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要在我们的目标`li`上放置一个`.each()`函数项，并开始操纵其中的内容。
- en: 'We''ll start by setting up this jQuery statement:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从设置这个jQuery语句开始：
- en: '[PRE14]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Next, *inside* our `.each()` function, we''ll place code that start''s manipulating
    the HTML and text inside each `li` object. We want to look for the colon ":" and
    use that as a point to wrap a `div` around the number that comes after it. After
    that, we''ll look for the ending `</li>` tag and use that as a point to close
    our `div` that we started. We''ll accomplish this by using the `.text()` and `.replace()`
    functions like so:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在我们的`.each()`函数*内部*，我们将放置一些代码，开始操纵每个`li`对象内部的HTML和文本。我们想要查找冒号“:”，并将其用作在其后的数字周围包装一个`div`的点。之后，我们将寻找结束的`</li>`标签，并使用它作为关闭我们开始的`div`的点。我们将使用`.text()`和`.replace()`函数来实现这一点，代码如下：
- en: '[PRE15]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'That previous code snippet now gives us custom `div` with the class `.nVal`
    that we can start working with. The `.nVal` divs are ultimately going to be the
    "bars" in our green stats graph! Underneath the previous code, we''ll continue
    to flesh-out our `.each()` function with the following code, again *inside* the
    `.each()` function:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码片段现在为我们提供了自定义带有类`.nVal`的`div`，我们可以开始使用它。`.nVal` div最终将成为我们绿色统计图中的“柱形”。在上一个代码下面，我们将继续完善我们的`.each()`函数，并再次在`.each()`函数中*内部*放置以下代码：
- en: '[PRE16]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In the previous code snippet, note that I used the `.delay()` function. That
    function is optional if you're not using jQuery 1.4.2 or a higher library. I just
    think a good half second or so pause to make sure that users notice the animation
    is helpful.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，请注意我使用了`.delay()`函数。如果您没有使用jQuery 1.4.2或更高版本的库，则该函数是可选的。我只是认为，为了确保用户注意到动画，有一个大约半秒的暂停是有帮助的。
- en: We again used the `.text()` function to pull the text from inside the `.nVal`
    divs and use it in a mathematical equation to calculate the `width` of the divs
    with the `.animate()` function. We multiply `nVar` by `3.8` because within our
    chart design, a div width of about 380 pixels wide would be the equivalent of
    100 percent. If your chart has different dimensions, you'd change those accordingly
    to have the chart bars extend out properly.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们再次使用`.text()`函数从`.nVal` div中提取文本，并将其用于数学方程以计算`.animate()`函数中div的`width`。我们将`nVar`乘以`3.8`，因为在我们的图表设计中，大约380像素宽的div相当于100%。如果您的图表尺寸不同，您需要相应地更改这些尺寸，以确保图表柱正确地延伸出去。
- en: 'The result looks great! Here''s our chart animation as it starts off:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 结果看起来很棒！这是我们开始动画的图表：
- en: '![Creating easy, animated graphs](img/1742_05_10.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![创建简单、动画图表](img/1742_05_10.jpg)'
- en: 'And here it is at its completion, a fun visually clear display of the organization''s
    shining greensters:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成时，这就是它的样子，一个有趣、视觉清晰的组织绿色统计图的展示：
- en: '![Creating easy, animated graphs](img/1742_05_11.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![创建简单、动画图表](img/1742_05_11.jpg)'
- en: Delving deeper into animation
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入了解动画
- en: 'Thanks to your animated green stats chart, you''re ready to take on some slightly
    more complicated requests: clients *insisting* on Flash development. As someone
    who got into web development through Flash in the 90s, a request for Flash development
    is no problem. Complain all you want, you have to admit, Flash sure can animate.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 多亏了你的动态绿色统计图表，你已经准备好应对一些稍微复杂的请求了：客户*坚持*要求Flash开发。作为一个在90年代通过Flash进入Web开发的人，Flash开发的请求没有问题。无论你抱怨多么多，你都必须承认，Flash确实可以做动画。
- en: However, Flash does require a plugin and despite being the most popular desktop
    browser plugin out there, it's not always a good way to display core content you
    want to ensure everyone can see, much less essential elements such as site navigation.
    Plus, while it's the most popular plugin for *desktop/laptop browsers*, Flash
    is a "no-go" in Safari Mobile for iPhone and other WebKit-based browsers for most
    SmartPhones.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Flash确实需要一个插件，尽管它是最流行的桌面浏览器插件，但并不总是显示你希望确保每个人都能看到的核心内容的好方法，更不用说像网站导航这样的基本元素了。此外，虽然Flash是最受欢迎的*桌面/笔记本浏览器*插件，但在iPhone的Safari移动版和大多数智能手机的基于WebKit的浏览器中，Flash是“不适用”的。
- en: 'With all the advances of CSS and JavaScript support in browsers these days
    (especially mobile browsers), my first question for Flash requests is always:
    "Sure. First, tell me exactly what you''d like done, and we''ll see". Sure enough,
    our client wants their main navigation panel animated.'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在当今浏览器中，随着CSS和JavaScript在浏览器中的支持不断进步（尤其是移动浏览器），我对Flash请求的第一个问题总是：“好的。首先，告诉我你想要做什么，然后我们再看看。”确实，我们的客户希望他们的主导航面板具有动画效果。
- en: Flash can certainly do this, but then so can jQuery, and when JavaScript is
    not an option, it will elegantly degrade into nicely styled CSS elements and in
    the worst case, with no CSS, the page will load our WordPress theme's clean, semantic
    XHTML into a text-only browser.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: Flash当然可以做到这一点，但jQuery也可以，而当JavaScript不是一个选择时，它会优雅地退化为漂亮的样式化CSS元素，并且在最坏的情况下，没有CSS，页面将加载我们的WordPress主题的干净、语义化的XHTML到纯文本浏览器中。
- en: While there are plenty of ways to serve up Flash content and applications so
    they degrade elegantly into compliant HTML alternatives (and you should *always*
    offer these alternatives when working with the Flash player), why add that extra
    layer of development and complexity if it's not essential? The client doesn't
    need to serve up streaming video, or have custom cartoon characters animated,
    much less want an in-depth, multimedia slathered and mashed up **Rich Interface
    Application** (**RIA**). So, let's leave Flash for what Flash does best and use
    jQuery to enhance what our client's WordPress site already does best.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然有很多种方法来提供Flash内容和应用程序，使它们优雅地退化为符合HTML标准的替代方案（并且当使用Flash播放器时，你应该*总是*提供这些替代方案），但如果这不是必要的，为什么要增加额外的开发和复杂性呢？客户不需要提供流媒体视频，也不需要定制卡通角色动画，更不用说想要一个深度的、多媒体浸润和混搭的**丰富界面应用程序**（**RIA**）。因此，让我们把Flash留给Flash最擅长的事情，并使用jQuery来增强我们客户的WordPress网站已经做得最好的事情。
- en: Luckily, the client is reasonable and willing to see what jQuery can do before
    we resort to Flash. Let's show them what their WordPress site is made of with
    a little jQuery inspiration.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，客户是理性的，并且愿意在我们诉诸Flash之前看看jQuery能做些什么。让我们通过一点jQuery的灵感展示一下他们的WordPress网站是由什么组成的。
- en: 'Project: Creating snazzy navigation'
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目：创建时髦的导航
- en: 'Our Flash-inspired client has a business that recycles and refits materials
    that NASA and other space agencies have junked and sold. They''d like their navigation
    panel to represent this futuristic (and at the same time, retro) feel to their
    users and provide a page navigation that, according to the client: "has a smooth
    animation and our logo/icon rocket as a pointer".'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们受到Flash启发的客户经营着一个回收和翻新NASA和其他空间机构废弃并出售的材料的业务。他们希望他们的导航面板能够向用户展示这种未来主义（同时也是复古）的感觉，并提供一个页面导航，根据客户的说法：“具有流畅的动画和我们的徽标/图标火箭作为指针”。
- en: Let's go ahead and prep the theme so that we can get started. We'll continue
    to use the Default Theme with the Page Navigation CSS changes that we made in
    [Chapter 2](ch02.html "Chapter 2. Working with jQuery in WordPress"), *Working
    with jQuery in WordPress*. We'll be enhancing the navigation with a smooth indent
    and release animation that triggers on hovering on and off the menu items. We'll
    top it off with a cool floating point selector (which also happens to be the site's
    space ship icon).
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续准备主题，以便我们可以开始。我们将继续使用默认主题，并使用我们在[第二章](ch02.html "Chapter 2. Working with
    jQuery in WordPress")中制作的页面导航 CSS 更改，*在 WordPress 中使用 jQuery 工作*。我们将增强导航栏的效果，使其在菜单项上悬停时触发平滑的缩进和释放动画。最后，我们将添加一个酷炫的浮动指针选择器（也是站点的太空飞船图标）。
- en: 'First up, we''ll need to trace the client''s space ship icon used in their
    logo, into a basic silhouette form so that we can create a floating pointer with
    it. Again, this is easily done using Inkscape:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要将客户的标志中使用的太空飞船图标追踪成基本的轮廓形式，以便我们可以创建一个浮动指针。同样，这可以很容易地通过 Inkscape 完成：
- en: '![Project: Creating snazzy navigation](img/1742_05_13.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![项目：创建时髦的导航](img/1742_05_13.jpg)'
- en: 'We''ll take an extra step here and rotate the ship, and since it''s going to
    be a transparent PNG file, add a nice drop shadow and afterburn gloss to give
    it some depth:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们会在这里多做一步，旋转飞船，并且由于它将成为一个透明的 PNG 文件，添加一个漂亮的阴影和光泽效果，使其更有深度：
- en: '![Project: Creating snazzy navigation](img/1742_05_14.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![项目：创建时髦的导航](img/1742_05_14.jpg)'
- en: 'We''ll export this image as a 37 pixel wide transparent `.png`. Next up, we''ll
    need to prep our theme''s stylesheet to accept this background image. We''ll be
    creating a `div` called `#shipSlide` in jQuery to hold the image so our stylesheet
    needs to accommodate that `id` name:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把这张图片导出为一个宽度为 37 像素的透明`.png`文件。接下来，我们需要准备我们主题的样式表以接受这个背景图片。我们将在 jQuery 中创建一个名为`#shipSlide`的`div`来容纳这张图片，因此我们的样式表需要适应那个`id`名称：
- en: '[PRE17]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Note
  id: totrans-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Again, as with many examples in this book, to keep the process concise and
    easy to understand, we''ll be doing things as directly as possible, but not necessarily
    as optimized as possible. In a real-world project you may want to create a separate
    stylesheet for any project like this or wrap your jQuery work into a plugin or
    even in a WordPress plugin using the techniques we covered in [Chapter 3](ch03.html
    "Chapter 3. Digging Deeper: Understanding jQuery and WordPress Together"), *Digging
    Deeper: Understanding jQuery and WordPress Together*. This all depends on how
    flexible and portable you''d like the jQuery enhancement to be afterwards.'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '同样，就像本书中的许多示例一样，为了保持流程简洁易懂，我们将尽可能直接地进行操作，但不一定尽可能优化。在实际项目中，您可能想为此类项目创建一个单独的样式表，或者将您的
    jQuery 工作包装到一个插件中，甚至在 WordPress 插件中使用我们在[第三章](ch03.html "Chapter 3. Digging Deeper:
    Understanding jQuery and WordPress Together")中介绍的技术，*深入了解 jQuery 和 WordPress*。这完全取决于您希望增强的
    jQuery 后续功能有多灵活和可移植。'
- en: 'Now, we''ll get to work in jQuery. As usual, for every project you''ll make
    sure that jQuery is included into the theme, and that you have a `custom-jquery.js`
    file included and set up to work in. Also, for this navigation, we''ll be using
    the Color and Easing plugin. You can register the bundled Color plugin, but you''ll
    need to download and include the custom Easing plugin into your theme manually.
    Get it from: [http://gsgd.co.uk/sandbox/jquery/easing/](http://gsgd.co.uk/sandbox/jquery/easing/).'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将在 jQuery 中开始工作。像往常一样，对于每个项目，您都要确保将 jQuery 包含到主题中，并且已经包含并设置为工作的`custom-jquery.js`文件。此外，对于此导航，我们将使用
    Color 和 Easing 插件。您可以注册捆绑的 Color 插件，但是您需要手动从以下位置下载并包含自定义 Easing 插件到您的主题中。获取地址：[http://gsgd.co.uk/sandbox/jquery/easing/](http://gsgd.co.uk/sandbox/jquery/easing/)。
- en: In our particular default theme, we'll start off with some jQuery to make it
    a little clearer what our nav will do.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们特定的默认主题中，我们将使用一些 jQuery 来使我们的导航条更清晰一些。
- en: 'Our first bit of jQuery looks like this:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一部分 jQuery 看起来像这样：
- en: '[PRE18]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Before I fade the `#shipSlide` div with jQuery''s `.fadeTo()` function, I did
    load it up into the browser to check and make sure the background image was loading
    in from the CSS. The following screenshot shows the ship image loaded in and faded
    by our budding jQuery script:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在我使用 jQuery 的`.fadeTo()`函数淡化`#shipSlide` div 之前，我将其加载到浏览器中检查并确保背景图片是从 CSS 中加载的。下面的截图显示了船图像被我们初步的
    jQuery 脚本加载并淡化：
- en: '![Project: Creating snazzy navigation](img/1742_05_15.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![项目：创建时髦的导航](img/1742_05_15.jpg)'
- en: 'OK, next up, let''s set up a basic animation that pushes the navigation `li.page_item`
    objects in from the left, 35 pixels, relative to where they are. We''ll also then
    target the tags and change their background color. We''ll use the `.hover` function
    to make sure this happens on rollover and rollout of the `li.page_item` objects:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，接下来，让我们设置一个基本动画，将导航`li.page_item`对象从左侧推入35像素，相对于它们的位置。 然后，我们将针对标签，并更改它们的背景颜色。
    我们将使用`.hover`函数确保这发生在`li.page_item`对象的悬停和移出时：
- en: '[PRE19]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Finally, *inside* the first hover function, just *below* the a object''s color
    animation, we''ll add in the following code snippet, which will move the `#shipSlide`
    object to the position of the `li.item_page` (note the bold code only):'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在第一个悬停函数*内*，在a对象的颜色动画的*下方*，我们将添加以下代码片段，它将将`#shipSlide`对象移动到`li.item_page`的位置（注意只有粗体代码）：
- en: '[PRE20]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Here, we've set up a variable we named `position` and also used a function called
    `.position()` to be able to pull an array of information from the `li.page_item`
    objects.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们设置了一个名为`position`的变量，并且还使用了一个名为`.position()`的函数，以便能够从`li.page_item`对象中提取一系列信息。
- en: The `#shipSlide` object's animate function moves the `marginLeft` of the ship
    left to the `position.left` of the `page_item`, minus 175 pixels.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '`#shipSlide`对象的动画函数将船向左移动到`page_item`的`position.left`，减去175个像素的`marginLeft`位置。'
- en: You'll also notice in the previous code snippet's `animate` function that we
    set the `queue` to `false` and that we're using the `easeOutBack` easing method
    that's only available to us because we included the Easing plugin.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，您还会注意到我们将`animate`函数中的`queue`设置为`false`，并且我们正在使用`easeOutBack`缓动方法，这仅因为我们包含了缓动插件。
- en: 'The very last bit of code we need, *below* the `li.page_item .hover()` code
    is another jQuery selection and `.hover()` function, which will fade the `#shipSlide`
    object in and out on hover of the `#mainNav` object. Again, just place this jQuery
    below all the other navigation code:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要的最后一小部分代码，在`li.page_item .hover()`代码的*下方*是另一个jQuery选择和`.hover()`函数，它将在`#mainNav`对象悬停时使`#shipSlide`对象淡入和淡出。同样，将此jQuery放置在所有其他导航代码的下方：
- en: '[PRE21]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The final result looks great, the ship and menu item animation is smooth, and
    the client is very happy with their new snazzy navigation.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 最终结果看起来很棒，船和菜单项目动画流畅，客户对他们新的时髦导航非常满意。
- en: '![Project: Creating snazzy navigation](img/1742_05_16.jpg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![项目：创建时髦导航](img/1742_05_16.jpg)'
- en: 'Project: Creating rotating sticky posts'
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目：创建旋转的置顶帖子
- en: Earlier we discovered that working with WordPress sticky posts is pretty easy!
    That's good to know because our Mr. "I want Flash" client has now requested an
    additional enhancement solution. They are using WordPress sticky posts to make
    site viewers aware of the products that they're featuring. Making the posts sticky
    works great keeping their product mentions up top (usually two to four at a time),
    while their regular news posts and updates flow below the product features.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 早些时候，我们发现使用WordPress的特色帖子非常简单！这很好，因为我们的“我想要Flash”客户现在请求了一个额外的增强解决方案。 他们使用WordPress的特色帖子来让网站观众了解他们正在推广的产品。
    牢记这些帖子的内容，使他们的产品推广置于前列（通常一次两到四篇），而他们的常规新闻帖子和更新则在产品功能下方流动。
- en: However, when they have more than two products to feature, (especially when
    they have three or more products to feature) their current posts get pushed down,
    sometimes way below the fold. They're worried that people just glancing at the
    site from time to time may feel it's stale if they don't take the time to scroll
    down and see the current posts.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，当他们要展示两个以上的产品时（尤其是当他们要展示三个或更多产品时），他们当前的帖子会被推到下面，有时甚至被推到页面底部以下。 他们担心只偶尔瞥一眼网站的人如果不花时间向下滚动并查看当前的帖子，可能会觉得网站过时。
- en: 'They''ve seen plenty of examples of sites that have really cool image rotators
    with slide or cross-fade effects up on top of featured items and they''d like
    to work something like that into their site. They originally thought they''d do
    this in Flash and give up convenience, but since the jQuery navigation panel turned
    out so well, they''d like to create a solution that:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 他们已经看到了许多网站示例，这些网站具有非常酷的图像旋转器，带有幻灯片或交叉淡入淡出效果，位于特色项目的顶部，并且他们想在他们的网站中加入类似的东西。
    他们最初认为他们会在Flash中完成这个过程并放弃方便，但是由于jQuery导航面板效果很好，他们想要创建一个解决方案：
- en: Conserves space, so other posts don't get pushed "below the fold"
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 节省空间，避免将其他帖子推至“折叠”下方
- en: Looks really nice and draws attention to the sticky feature posts
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 看起来非常漂亮，并且引人注目的吸引注意力的特色文章
- en: Means it's still easy for their marketing administrator to implement new featured
    items (as easy as just creating a post and marking it "sticky"!)
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这意味着他们的营销管理员仍然很容易实现新的特色项目（只需要创建一个帖子并将其标记为“置顶”！）
- en: 'This client''s theme already has the sticky post''s CSS changed slightly, in
    that there''s a simple background that makes the posts have a dark gradation as
    well as some font color changes. You''ll find these CSS rules at the bottom of
    their theme''s `style.css` stylesheet:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 这个客户的主题已经稍微改变了置顶帖子的 CSS 样式，在底部的 `style.css` 样式表中，我们可以找到简单的背景，使帖子具有暗色渐变以及一些字体颜色变化。
- en: '[PRE22]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The result looks like this, and you can see how just three sticky posts leave
    NO room for checking out the current posts below those, and leave the user with
    quite a bit of scrolling to do:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 结果看起来像这样，你可以看到只有三个置顶帖子不留任何空间供查看下面的当前帖子，并且使用户需要滚动相当多的距离：
- en: '![Project: Creating rotating sticky posts](img/1742_05_17.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![项目：创建旋转置顶帖子](img/1742_05_17.jpg)'
- en: Essentially, we'll want to collapse these stickies on top of themselves, maybe
    make them a little shorter if possible, hide all of them except the *first* sticky
    post, and then proceed to fade in the remaining posts *over* the first one.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 本质上，我们希望将这些置顶帖子叠在一起，如果可能的话，可能使它们稍微缩短一点，隐藏除了*第一个*置顶帖子之外的所有帖子，然后开始逐渐显示*第一个帖子上方的*其余帖子。
- en: First up, it seems obvious, but again, make sure that you've registered and
    included jQuery into the theme along with the Color and Easing plugins discussed
    earlier. You can include jQuery however you wish, but I'll be using 1.4.2 from
    the WordPress 3.0 bundle as discussed in [Chapter 2](ch02.html "Chapter 2. Working
    with jQuery in WordPress"), *Working with jQuery in WordPress*. And per usual,
    you'll also want to be sure to include a `custom.js` file to the theme so that
    you can keep your jQuery code out of the WordPress `header.php` template (this
    is also covered in [Chapter 2](ch02.html "Chapter 2. Working with jQuery in WordPress"),
    *Working with jQuery in WordPress*).
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，这似乎是显而易见的，但再次确保你已经注册并将 jQuery 与之前讨论过的 Color 和 Easing 插件一起包含到主题中。你可以以任何你想要的方式包含
    jQuery，但我将使用 WordPress 3.0 包中讨论的 1.4.2 版本，正如[第2章](ch02.html "第2章。在 WordPress 中使用
    jQuery")中讨论的那样，*在 WordPress 中使用 jQuery*。另外，你还需要确保在主题中包含一个 `custom.js` 文件，这样你就可以将
    jQuery 代码从 WordPress 的 `header.php` 模板中移出（这也在[第2章](ch02.html "第2章。在 WordPress
    中使用 jQuery")中有所涉及，*在 WordPress 中使用 jQuery*）。
- en: Once jQuery and your plugins are included in the theme, we'll get to work with
    jQuery. Because the site is functional the way it is, and the client is OK with
    this as an alternative view, we'll leave the theme and `style.css` alone and make
    sure *all* our enhancements are done with jQuery.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 jQuery 和你的插件包含在主题中，我们将开始使用 jQuery。因为网站的功能是完全符合要求的，而且客户也接受这种替代视图，我们将保持主题和
    `style.css` 不变，并确保我们所有的增强都是通过 jQuery 完成的。
- en: Note
  id: totrans-180
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Again, the following code may not be the most elegant way to achieve the client's
    goals, but it's written to make sure each step of what's happening is clear.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 再次说明，下面的代码可能不是实现客户目标最优雅的方式，但它是写成的，以确保发生的每一步都是清晰可见的。
- en: 'Let''s start by changing the CSS properties of the sticky posts so that they
    all stack up on top of each other. The easiest way to do this? Make the `.sticky`
    class `position: absolute`. Let''s also go ahead and make the width and the height
    correct and that any overflow is hidden like so:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '让我们首先改变置顶帖子的 CSS 属性，使它们都堆叠在一起。这样做的最简单的方法？将 `.sticky` 类的 `position: absolute`。让我们也确保宽度和高度正确，并且任何溢出都被隐藏，像这样：'
- en: '[PRE23]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Next up, we'll move the `h2` header up a bit and most importantly, as our actual
    posts are *under* the positioned absolute `.sticky` posts, we'll move those down
    so they show up under our soon-to-be-animated sticky posts. We'll also adjust
    the image's right-hand side margin a bit for placement.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将把 `h2` 标题向上移动一点，最重要的是，由于我们实际的帖子是*处于*定位绝对的 `.sticky` 帖子下面，我们将把它们移下来，使它们显示在即将动画化的置顶帖子下面。我们还将调整图片的右侧边距一点以便放置。
- en: '[PRE24]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Pay special attention to the bold jQuery selector in the previous code snippet.
    You can refer to [Chapter 3](ch03.html "Chapter 3. Digging Deeper: Understanding
    jQuery and WordPress Together"), *Digging Deeper: Understanding jQuery and WordPress
    Together* for more on using selectors if you need to refresh your knowledge. Essentially,
    we''re targeting the *first* `.post` div that does *not* have the `.sticky` class
    assigned to it. Nice!'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '特别注意前一个代码片段中粗体的jQuery选择器。如果需要复习选择器的使用方法，你可以参考[第三章](ch03.html "Chapter 3. Digging
    Deeper: Understanding jQuery and WordPress Together")，*深入挖掘：了解jQuery和WordPress*。基本上，我们在定位*第一个*未分配`.sticky`类的`.post`
    div。很好！'
- en: 'The result looks like this:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下所示：
- en: '![Project: Creating rotating sticky posts](img/1742_05_18.jpg)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![项目：创建旋转粘性帖子](img/1742_05_18.jpg)'
- en: 'OK! jQuery has that really nice function we''ve looked at previously called
    `.each`, which will run additional functions on every object in a wrapper set.
    If all we wanted to do was run through each item one time, we could use this bit
    of code:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 好的！jQuery有一个我们之前看过的非常好的函数，叫做`.each`，它将在包装集合中的每个对象上运行附加函数。如果我们只想遍历每个项目一次，我们可以使用这段代码：
- en: '[PRE25]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This looks good! However, once the last `div` has faded in, it stops and doesn't
    continue.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来不错！然而，一旦最后一个`div`淡入，它就停止了，不再继续。
- en: '![Project: Creating rotating sticky posts](img/1742_05_19.jpg)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![项目：创建旋转粘性帖子](img/1742_05_19.jpg)'
- en: Nope, there's no super slick jQuery way to keep the `.each()` function going.
    Yet, an `.each` function is so easy to set up, it's a shame not to leverage them,
    even for "infinite loops".
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 没有，没有超级流畅的jQuery方法来保持`.each()`函数的继续。然而，一个`.each()`函数如此容易设置，不利用它，即使是用于“无限循环”，也是一种遗憾。
- en: 'Now, a quick explanation here: you can do a Google search for `"infinite animation
    loops jquery"`, if you dare, and see that for all ten-thousand-some results, there
    appears to be about that many ways JavaScript developers like to set up repeating,
    or infinite loops, and each developer seems to feel (of course!) that their method
    is the best method available. My preference is to resort to regular JavaScript,
    and use a `setInterval` function and some custom variables set up in a way that
    makes it very easy to leverage my existing jQuery `.each()` statement and functions.'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这里快速解释一下：如果你敢的话，你可以通过谷歌搜索`"infinite animation loops jquery"`，看看约一万条结果中，看起来有大约一万种JavaScript开发人员喜欢设置重复或无限循环的方法，每个开发人员似乎都认为（当然！）他们的方法是可用的最好方法。我更倾向于求助于常规JavaScript，并使用一个`setInterval`函数和一些自定义变量设置的方式，这样可以很容易地利用我的现有jQuery`.each()`语句和函数。
- en: To get started creating our loop, we'll take our existing jQuery statement and
    place it *inside* its own function. You'll need to make sure this function is
    **outside** your main `jQuery(function(){...` document ready function. Otherwise,
    the `setInterval` function will not launch it properly.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始创建我们的循环，我们将采用我们现有的jQuery语句，并将其放置在*自己的*函数内。你需要确保这个函数**位于**你的主要`jQuery(function(){...`文档准备好函数之外。否则，`setInterval`函数将无法正确启动它。
- en: 'Let''s call our new function `loopStickies`. You''ll find it familiar, aside
    from the first statement:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们称之为我们的新函数`loopStickies`。除了第一个语句之外，你会觉得它很熟悉：
- en: '[PRE26]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'OK, that''s just the start, now that we have our `loopStickies` function, located
    *outside* the jQuery document ready function, let''s place the rest of our code,
    back **inside** the `jQuery(function(){...` document ready function. Follow along
    with the comments in bold:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，这只是一个开始，现在我们有了我们的`loopStickies`函数，位于jQuery文档准备好函数之外，让我们将剩下的代码放回**jQuery(function(){...**文档准备好函数内。跟随粗体中的注释：
- en: '[PRE27]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The way this works is, our original jQuery statement and `.each()` function
    runs through each sticky post in the jQuery selection by evoking the `loopStickies`
    function. At the *same time*, the `setInterval` function is kicked off, but because
    we have the `intervalDuration` variable set to calculate our `duration` variable
    times the number of sticky posts, it's not going to kick off for 18 seconds. Just
    in time for our original function to complete! The `setInterval` function will
    take it from there and loop our sticky posts into infinity.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 这个工作原理是，我们的原始jQuery语句和`.each()`函数通过调用`loopStickies`函数在jQuery选择中的每个粘性帖子上运行。*同时*，`setInterval`函数被启动，但由于我们将`intervalDuration`变量设置为计算我们的`duration`变量乘以粘性帖子数量，它将不会在18秒后启动。正好是我们的原始函数完成的时候！`setInterval`函数会接管并将我们的粘性帖子循环到无限远。
- en: OK, let's take a look; we now have a very nice set of sticky posts, holding
    for six seconds and then crossfading to the next post!
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们来看看；我们现在有一组非常好的便签，持续六秒钟，然后淡出到下一个便签！
- en: '![Project: Creating rotating sticky posts](img/1742_05_20.jpg)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![项目：创建旋转便签](img/1742_05_20.jpg)'
- en: 'Putting in a little extra effort: Adding a loop indicator'
  id: totrans-203
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加一点额外的努力：添加循环指示器
- en: The rotating stickies are great! Yet, while the client will only have three
    or four stickies rotating at any given time, it's a good practice to at least
    let a user know about how long a view they're in for should they decide to look
    at all the rotations. Most rotating slide shows have an indicator somewhere to
    let a user know how many panels are going to be displayed and allowing the user
    to navigate around the panels.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 旋转便签非常棒！然而，尽管客户一次只会有三到四个便签在旋转，但至少让用户知道他们要查看所有旋转的时间大致是个好习惯。大多数旋转幻灯片都会在某个地方添加指示器，让用户知道将显示多少个面板，并允许用户在面板之间导航。
- en: 'Let''s see about adding this functionality to our rotating posts. First up,
    we''ll need to create a little interface. Inside our `#stickyRotate` wrapper that
    we created in the previous code, after the last sticky post object, I''ll add
    in a `div` with inline styles. Again, this is not necessarily ideal for a working
    project, but I want to make each step clear. In reality, you''ll probably create
    custom stylesheets or amend the theme you''re working on. At any rate, here''s
    our interaction holder. I''ve placed this code at the bottom of my previous code
    inside the jQuery document ready function:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何将此功能添加到我们的旋转便签中。首先，我们需要创建一个小的界面。在我们之前创建的`#stickyRotate`包装器内，添加在最后一个便签对象后的一个带有内联样式的`div`。再次强调，这对于一个工作项目来说不一定理想，但我想让每一步都清晰明了。实际上，你可能会创建自定义样式表或修改你正在工作的主题。无论如何，这是我们的交互容器。我把这段代码放在了我的前一个代码的底部，在
    jQuery 文档准备好函数内部：
- en: '[PRE28]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'And below that code, we''ll add some more jQuery which will insert numbers
    for each sticky post into the `#stickyNav` div we just created:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 并在那段代码下面，我们将添加一些更多的 jQuery 代码，这些代码将把每个便签的编号插入到我们刚刚创建的`#stickyNav` div中：
- en: '[PRE29]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: This code uses another `each` function, but we only need, and want, it to run
    once, and append the numbers 1 through 3 (or however many sticky posts we have)
    to the `#stickyNav` div.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码使用了另一个`each`函数，但我们只需要，并且希望它运行一次，并将数字1到3（或者我们有多少个便签）附加到`#stickyNav` div中。
- en: 'Last, to really finalize this effect, we''ll need to dip back inside our `loopStickies`
    function. Inside the `.animate` function''s call back function, we''ll add the
    following code that''s in bold:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，为了真正完成这个效果，我们需要回到我们的`loopStickies`函数内部。在`.animate`函数的回调函数内部，我们将添加以下粗体代码：
- en: '[PRE30]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Using the `:eq()` selector in the previous code, we're able to target the corresponding
    number in the interface display and make it stand out compared to the other numbers.
    This allows users to see how many slides there are, and which slide they're on.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中使用`:eq()`选择器，我们能够定位到界面显示中的相应编号，并使其与其他编号突出显示。这样可以让用户看到有多少个幻灯片，以及他们在哪个幻灯片上。
- en: '![Putting in a little extra effort: Adding a loop indicator](img/1742_05_21.jpg)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![添加一点额外的努力：添加循环指示器](img/1742_05_21.jpg)'
- en: Summary
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'You''re now a pro at handling animations with jQuery! From these examples you
    can probably recognize several ways to incorporate further enhancements into your
    WordPress sites. You should now know how to:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在已经是使用 jQuery 处理动画的专家了！通过这些示例，你可能会发现几种方法来进一步增强你的 WordPress 站点。你现在应该知道如何：
- en: Use animation to direct a user's attention to key information
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用动画引导用户注意关键信息
- en: Generate animated bar graphs
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成动画条形图
- en: Create some really slick, animated page navigation
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一些非常流畅、带有动画的页面导航
- en: Develop rotating sticky posts
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发旋转便签
- en: Up next, let's take a look at the jQuery UI plugin and the many ways it can
    benefit a WordPress site.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看 jQuery UI 插件以及它如何使 WordPress 站点受益的许多方法。
