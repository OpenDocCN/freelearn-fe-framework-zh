- en: Chapter 11. Useful Responsive Plugins
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 11 章. 有用的响应式插件
- en: With the constant evolution of technology and trends, there emerge new plugins
    every day, helping more and more in the development of responsive websites. It
    is important to keep yourself updated on them through blogs such as [http://www.smashingmagazine.com/](http://www.smashingmagazine.com/),
    [http://bradfrostweb.com/blog/](http://bradfrostweb.com/blog/), and [http://www.lukew.com/ff/](http://www.lukew.com/ff/).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 随着技术和趋势的不断发展，每天都会出现新的插件，这些插件对于开发响应式网站变得越来越有帮助。通过诸如[http://www.smashingmagazine.com/](http://www.smashingmagazine.com/)、[http://bradfrostweb.com/blog/](http://bradfrostweb.com/blog/)
    和 [http://www.lukew.com/ff/](http://www.lukew.com/ff/)等博客及时了解它们非常重要。
- en: 'In this chapter we will focus on showing different plugins by covering the
    following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将重点介绍不同的插件，涵盖以下主题：
- en: Plugins for website structure such as Columns, Equalize, and Packery
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网站结构的插件，例如 Columns、Equalize 和 Packery
- en: Plugins for menu navigation such as Sidr, EasyResponsiveTabstoAccordion, FlexNav,
    and other miscellaneous plugins
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于菜单导航的插件，例如 Sidr、EasyResponsiveTabstoAccordion、FlexNav 和其他杂项插件
- en: Plugins for website structure
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网站结构的插件
- en: In [Chapter 2](ch02.html "Chapter 2. Designing Responsive Layouts/Grids"), *Designing
    Responsive Layouts/Grids*, we have seen plugins such as Fluid Baseline Grid System,
    1140 Grid, and Foundation 4, which form a development kit that will help us to
    develop websites quickly. We need to keep in mind the objective to create a cohesive
    website and avoid wasting time recreating something that is already done.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第 2 章](ch02.html "第 2 章. 设计响应式布局/网格")中，我们已经看到了 Fluid Baseline Grid System、1140
    Grid 和 Foundation 4 等插件，它们构成了一个开发工具包，将帮助我们快速开发网站。我们需要记住的目标是创建一个连贯的网站，并且避免浪费时间重新创建已经完成的事情。
- en: There are some other additional plugins such as Columns, Equalize, and Packery
    which were not mentioned earlier in order to stay focused on building our website,
    but they are very useful.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些其他的额外插件，例如 Columns、Equalize 和 Packery，之前没有提及，为了集中精力构建我们的网站，但它们非常有用。
- en: Creating simple responsive structures using Columns
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Columns 创建简单的响应式结构
- en: Let's start with the Columns plugin whose objective is to provide a quick creation
    of responsive layouts just as the Grid systems do. Its simplicity makes it lightweight
    and its learning curve is very fast. Columns has an MIT license, and works well
    on IE9 and modern browsers. If you want to use IE8, it will require polyfills
    for HTML5 and media queries.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从 Columns 插件开始，它的目标是提供一种快速创建响应式布局的方式，就像网格系统一样。它的简单性使其轻巧，并且学习曲线非常快。Columns
    使用 MIT 许可证，在 IE9 和现代浏览器上运行良好。如果要使用 IE8，将需要为 HTML5 和媒体查询提供 polyfills。
- en: This plugin is recommended for small websites where we just need a simple and
    quick responsive structure implementation. It does not mean it will not work for
    medium and large websites, but in this case other frameworks may provide more
    diversity of options and solutions that these websites may require.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 此插件建议用于只需要简单且快速的响应式结构实现的小型网站。这并不意味着它不适用于中型和大型网站，但在这种情况下，其他框架可能提供更多的选项和解决方案，这些网站可能需要。
- en: In addition, there is an option to auto-adjust the minimum and maximum values
    for font sizes depending on the screen size.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还有一个选项可以根据屏幕尺寸自动调整字体大小的最小和最大值。
- en: For its implementation, we will need to access the website from [https://github.com/elclanrs/jquery.columns/](https://github.com/elclanrs/jquery.columns/)
    and download the files of this solution.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 实现这个功能，我们需要从[https://github.com/elclanrs/jquery.columns/](https://github.com/elclanrs/jquery.columns/)访问该网站并下载这个解决方案的文件。
- en: 'Then, let''s insert the following code in the `<head>` tag of our DOM:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，让我们将以下代码插入到我们 DOM 的 `<head>` 标签中：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, let''s use this HTML code just as a sample to clarify the plugin usage,
    but feel free to try this plugin on your current HTML structure. Notice that classes
    such as `row-1` and `col` and IDs such as `content-1` and `content-2` will define
    how the structure will look depending on breakpoint:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用这个 HTML 代码作为一个示例来说明插件的使用，但随意尝试在您当前的 HTML 结构上使用这个插件。请注意，类似 `row-1` 和
    `col` 这样的类以及类似 `content-1` 和 `content-2` 这样的 ID 将根据断点定义结构将如何显示：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: By defining the classes, such as `row-2` or `row-4`, we are defining how many
    columns are inside that section and IDs will give more control to display these
    columns differently later.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 通过定义类，例如 `row-2` 或 `row-4`，我们正在定义该部分内有多少列，并且 ID 将在稍后更改这些列的显示时提供更多的控制。
- en: 'Basically, for this example we will use two breakpoints: 480 (standard for
    plugin) and 1024\. At the bottom of DOM (before the `</body>` closing tag), we
    will need to include the jQuery code and the Columns script. Then, we will run
    the plugin by calling the `quickSetup` function and configure the column and breakpoint.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，对于这个例子，我们将使用两个断点：480（插件的标准）和1024。在 DOM 底部（在 `</body>` 结束标签之前），我们需要包含 jQuery
    代码和 Columns 脚本。然后，我们将通过调用 `quickSetup` 函数并配置列和断点来运行插件。
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In this sample, the section `content-2` starts with four columns per row when
    the screen size is higher than 1024\. Then, we set 2 columns per row when the
    screen size is less than 1024 pixels, and 1 column per row when it is less than
    480 pixels.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，当屏幕尺寸大于1024像素时，`content-2` 部分从每行四列开始。然后，当屏幕尺寸小于1024像素时，我们设置每行2列，并且当尺寸小于480像素时，设置每行1列。
- en: 'Let''s see the visual result of the plugin applied to a parent element viewed
    on desktop and tablet screens:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看应用于父元素在桌面和平板电脑屏幕上的插件的可视结果：
- en: '![Creating simple responsive structures using Columns](img/3602OS_11_01.jpg)![Creating
    simple responsive structures using Columns](img/3602OS_11_13.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Columns 创建简单响应式结构](img/3602OS_11_01.jpg)![使用 Columns 创建简单响应式结构](img/3602OS_11_13.jpg)'
- en: Also, the plugin allows you to add columns dynamically. But, to reflect this
    change, it requires to call `$.columns.refresh()` on code after adding it on DOM.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，该插件允许动态添加列。但是，要反映此更改，需要在添加到 DOM 后的代码中调用 `$.columns.refresh()`。
- en: Using Equalize for element dimension adjustment
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Equalize 调整元素尺寸
- en: When customizing the page to look like cards, there is a common problem that
    occurs when loading the dynamic content whose dimensions may vary. We want to
    keep all the items with the same look.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 当将页面自定义为看起来像卡片时，当加载动态内容时可能会出现一个常见问题，即尺寸可能会变化。我们希望保持所有项目的外观相同。
- en: 'If we float to the left of the list item elements, the content of each item
    will influence to breaking the row, and instead the second row that starts from
    left will start indented. So, the problem of undesirable layout card breaking
    will look as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将列表项元素浮动到左侧，则每个项的内容将影响到断行，并且而不是从左侧开始的第二行将开始缩进。因此，不良布局卡片断裂的问题将如下所示：
- en: '![Using Equalize for element dimension adjustment](img/3602OS_11_02.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Equalize 调整元素尺寸](img/3602OS_11_02.jpg)'
- en: Or if we define the same dimensions of all items, we will lose the dynamic dimension.
    Something like that also happens to the width of the elements.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 或者如果我们定义了所有项目的相同尺寸，我们将失去动态尺寸。类似的情况也发生在元素的宽度上。
- en: Equalize is created for equalizing the height or width of elements. It is a
    lightweight and very helpful jQuery plugin that only requires specifying the parent
    ID or class in order to be executed. Basically, it works by calculating the dimension
    of bigger elements and defining it to other ones, avoiding any floating issue.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Equalize 用于使元素的高度或宽度相等。它是一个轻量级且非常有用的 jQuery 插件，只需要指定父元素的 ID 或类即可执行。基本上，它通过计算更大元素的尺寸并将其定义为其他元素来工作，避免了任何浮动问题。
- en: 'Also, it accepts all the following jQuery dimension methods to resize elements:
    `height`, `outerHeight`, `innerHeight`, `width`, `outerWidth`, and `innerWidth`.
    The most used is `height`, which is set to default by plugin.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，它接受所有以下 jQuery 尺寸方法来调整元素的大小：`height`、`outerHeight`、`innerHeight`、`width`、`outerWidth`
    和 `innerWidth`。最常用的是 `height`，它是插件的默认设置。
- en: Let's try to reproduce the same example seen before to see this plugin in action.
    The objective is to implement the Equalize plugin, adjust all items to the same
    dimension of the bigger element, and keep the floating working responsiveness
    with no undesirable breaks.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试重现之前看到的相同例子，以查看这个插件的运行情况。目标是实现 Equalize 插件，调整所有项为较大元素的相同尺寸，并保持浮动工作的响应性，而没有不必要的断点。
- en: 'After downloading it from [https://github.com/tsvensen/equalize.js/](https://github.com/tsvensen/equalize.js/),
    we will start by adding the following HTML code in our source code:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 从 [https://github.com/tsvensen/equalize.js/](https://github.com/tsvensen/equalize.js/)
    下载后，我们将从源代码中添加以下 HTML 代码开始：
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Then, at the bottom of DOM (before the `</body>` closing tag), we will need
    to include the jQuery and Equalize libraries. After that, we will execute the
    scripts for the `equalize-height` ID (parent of `<li>` elements).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在 DOM 底部（在 `</body>` 结束标签之前），我们需要包含 jQuery 和 Equalize 库。之后，我们将执行用于 `equalize-height`
    ID（`<li>` 元素的父元素）的脚本。
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'See the expected in the following figure:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下图中的预期情况：
- en: '![Using Equalize for element dimension adjustment](img/3602OS_11_03.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![使用Equalize进行元素尺寸调整](img/3602OS_11_03.jpg)'
- en: Implementing a card website layout with Packery
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Packery实现卡片网站布局
- en: Packery is a jQuery plugin that uses an algorithm to fill empty gaps on website
    layouts based on cards, adjusting them gracefully. The trend of the layout based
    on cards came with Google+ and is gaining fans around the world.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Packery是一个使用算法在基于卡片的网站布局上填充空白间隙，优雅地调整它们的jQuery插件。基于卡片的布局趋势随Google+而来，正在赢得全球粉丝。
- en: Note
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Packery plugin has a GPL v3 license for non-commercial, personal, or open source.
    If you want to use it on a public website, it will cost $25.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Packery插件有一个针对非商业、个人或开源项目的GPL v3许可证。如果你想在公共网站上使用它，需要支付$25。
- en: Its implementation is not too difficult, as we will see in the following example
    of its usage. But to do it, we need to download it first from [https://github.com/metafizzy/packery](https://github.com/metafizzy/packery).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 它的实现并不太困难，正如我们将在它的使用示例中看到的那样。但是为了做到这一点，我们首先需要从[https://github.com/metafizzy/packery](https://github.com/metafizzy/packery)下载它。
- en: 'Let''s start by creating an empty HTML file. A packaged source file includes
    everything you need to use Packery. So, after downloading, let''s include this
    suggested custom CSS on `<head>` tag to handle the card dimensions better:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建一个空的HTML文件开始。打包的源文件包括了你使用Packery所需的一切。所以，在下载后，让我们在`<head>`标签中包含建议的自定义CSS，以更好地处理卡片的尺寸：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'After that, let''s use this `HTML` code where each item represents a card:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，让我们使用这段`HTML`代码，其中每个项目代表一张卡片：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: At the bottom of DOM (before the `</body>` closing tag), we will need to include
    jQuery and Packery libraries. Also, we will initialize the Packery script informing
    the container ID, the class used for child elements which will be relocated, and
    the desired space between columns (or gutter).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在DOM的底部（在`</body>`结束标签之前），我们需要包含jQuery和Packery库。此外，我们将初始化Packery脚本，告知容器ID，用于重新定位的子元素的类，以及列（或间距）之间所需的空间。
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'And this is the visual result for tablets and desktops:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这是平板电脑和台式机的视觉结果：
- en: '![Implementing a card website layout with Packery](img/3602OS_11_12.jpg)![Implementing
    a card website layout with Packery](img/3602OS_11_04.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![使用Packery实现卡片网站布局](img/3602OS_11_12.jpg)![使用Packery实现卡片网站布局](img/3602OS_11_04.jpg)'
- en: Plugins for menu navigation
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 菜单导航的插件
- en: In [Chapter 3](ch03.html "Chapter 3. Building Responsive Navigation Menu"),
    *Building Responsive Navigation Menu*, we have seen eight different popular menu
    techniques, each one used for its own objective. There is no "jack of all trades"
    menu that works well in all situations, unfortunately.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第3章](ch03.html "第3章。建立响应式导航菜单")*建立响应式导航菜单*中，我们已经看到了八种不同的流行菜单技术，每种都用于自己的目的。不幸的是，没有一种"万金油"菜单可以在所有情况下很好地工作。
- en: In order to always stick together with the progressive user experience, we must
    research how to improve our website as a product, commonly found by using new
    JavaScript/jQuery plugins.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 为了始终与渐进的用户体验紧密相连，我们必须研究如何通过新的JavaScript/jQuery插件来改进我们的网站作为一个产品，常常可以找到。
- en: We will see three complementary plugins that bring small differences in approach
    if compared with plugins we have seen. They are Sidr, EasyResponsiveTabstoAccordion,
    and FlexNav.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到三个补充插件，与我们之前见过的插件相比，它们在方法上带来了一些小的差异。它们是Sidr、EasyResponsiveTabstoAccordion和FlexNav。
- en: Creating a side menu with Sidr
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Sidr创建侧边菜单
- en: Sidr is a jQuery plugin used for creating side menus, which are very common
    on responsive websites. It also allows multiple Sidr menus (on both sides) and
    works with external content as well.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Sidr是一个用于创建侧边菜单的jQuery插件，在响应式网站上非常常见。它还允许多个Sidr菜单（在两侧），以及与外部内容一起使用。
- en: Let's try to implement the following example by creating a standard HTML file
    and adding the CSS file that is included in the plugin and may be downloaded from
    [https://github.com/artberri/sidr](https://github.com/artberri/sidr). We will
    find two options to display the menu in a dark (`jquery.sid` `r.dark.css`) and
    a light way (`jquery.sidr.light.css`). We can use or extend them overriding some
    styles.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试通过创建一个标准的HTML文件，并添加插件中包含的CSS文件来实现以下示例，可以从[https://github.com/artberri/sidr](https://github.com/artberri/sidr)下载。我们会发现两种显示菜单的选项，一种是暗色调（`jquery.sidr.dark.css`），一种是浅色调（`jquery.sidr.light.css`）。我们可以使用它们或扩展它们来覆盖一些样式。
- en: So, after including one of them on the `<head>` tag, we may set the initial
    style which will hide the menu header on screen sizes higher than 767 pixels.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，在`<head>`标签中包含其中一个后，我们可能会设置初始样式，以在屏幕大小高于767像素时隐藏菜单标题。
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, let''s use this HTML code just as a sample to clarify the plugin usage:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用以下 HTML 代码作为示例来说明插件的使用方法：
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: At the bottom of DOM (before the `</body>` closing tag), we will need to include
    the jQuery and Sidr libraries. After that, we will bind the execution of Sidr
    with the menu button which is responsible for opening the side menu.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在 DOM 底部（在 `</body>` 结束标签之前），我们需要包含 jQuery 和 Sidr 库。之后，我们将通过将 Sidr 的执行与负责打开侧边菜单的菜单按钮绑定来绑定
    Sidr 的执行。
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `#sidr-main` ID we have defined will be the ID of the sidebar menu `<div>`,
    and `#navigation` is the ID of the menu we selected to display inside of this
    sidebar.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义的 `#sidr-main` ID 将是侧边栏菜单 `<div>` 的 ID，而 `#navigation` 是我们选择在此侧边栏内显示的菜单的
    ID。
- en: 'In the following screenshot, we will see the result of this implementation.
    After clicking on the **Menu** link, the light-themed menu will appear on screens
    smaller than 767 px (this value was customized by us):'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的截图中，我们将看到此实现的结果。单击**菜单**链接后，将在小于 767 像素的屏幕上显示浅色主题菜单（此值由我们自定义）：
- en: '![Creating a side menu with Sidr](img/3602OS_11_05.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Sidr 创建侧边菜单](img/3602OS_11_05.jpg)'
- en: Knowing about EasyResponsiveTabstoAccordion
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 了解 EasyResponsiveTabstoAccordion
- en: EasyResponsiveTabstoAccordion is a lightweight jQuery plugin which optimizes
    normal, horizontal, or vertical tabs to accordion especially when displayed on
    small devices such as tablets and smartphones.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: EasyResponsiveTabstoAccordion 是一个轻量级的 jQuery 插件，特别是在小型设备（如平板电脑和智能手机）上显示时，可以优化普通、水平或垂直选项卡为手风琴。
- en: The objective of this plugin is to adapt the element according to the screen
    size. Also, it prioritizes the content reading by starting to display the content
    of the first tab followed by others. The effect implemented on this plugin is
    entirely made by using jQuery which helps to provide cross-browser compatibility.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 此插件的目标是根据屏幕尺寸调整元素。此外，它通过首先显示第一个选项卡的内容，然后显示其他选项卡的内容，优先显示内容阅读。此插件实现的效果完全使用 jQuery
    实现，有助于提供跨浏览器兼容性。
- en: 'A better way to understand how it works is by practicing. After downloading
    it from [https://github.com/samsono/Easy-Responsive-Tabs-to-Accordion/](https://github.com/samsono/Easy-Responsive-Tabs-to-Accordion/),
    let''s create a standard HTML document and add the CSS file inside the `<head>`
    tag:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 更好地理解其工作方式的方法是实践。从 [https://github.com/samsono/Easy-Responsive-Tabs-to-Accordion/](https://github.com/samsono/Easy-Responsive-Tabs-to-Accordion/)
    下载后，让我们创建一个标准的 HTML 文档，并将 CSS 文件添加到 `<head>` 标签内：
- en: '[PRE11]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now, we will use the following HTML code just as a sample of tab content:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用以下 HTML 代码作为选项卡内容的样本：
- en: '[PRE12]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Then, at the bottom of DOM (before the `</body>` closing tag), we will need
    to include the `jquery` and `easyResponsiveTabs` libraries. After that, we will
    execute the scripts by informing the ID of our container element:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在 DOM 底部（在 `</body>` 结束标签之前），我们需要包含 `jquery` 和 `easyResponsiveTabs` 库。然后，我们将通过提供容器元素的
    ID 来执行脚本：
- en: '[PRE13]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This is the visual result of the plugin when viewed on smartphones and screen
    sizes more than 768 pixels:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 当在智能手机和屏幕尺寸大于 768 像素时，此插件的可视结果如下：
- en: '![Knowing about EasyResponsiveTabstoAccordion](img/3602OS_11_06.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![了解 EasyResponsiveTabstoAccordion](img/3602OS_11_06.jpg)'
- en: 'There are some optional parameters that would be informed when executing the
    script, such as:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 当执行脚本时，会有一些可选参数需要提供，例如：
- en: '`type: ''default''`: It can be set as `default`, `vertical`, `accordion`'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`type: ''default''`：可以设置为 `default`、`vertical`、`accordion`'
- en: '`width: ''auto''`: It can be set as `auto` or any custom width'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`width: ''auto''`：可以设置为 `auto` 或任何自定义宽度'
- en: '`fit: true`: It helps fit the entire thing in a container'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fit: true`：它有助于将整个内容适配到容器中'
- en: '`closed: false`: It closes the panels on start'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`closed: false`：它在启动时关闭面板'
- en: '`activate: function(){}`: It is a callback function to include some custom
    code which fires when the tab is changed'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`activate: function(){}`：这是一个回调函数，用于包含一些在选项卡更改时触发的自定义代码'
- en: Adding flexibility to your menu with FlexNav
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 FlexNav 为您的菜单增加灵活性
- en: FlexNav is a jQuery plugin that facilitates the creation of complex and responsive
    navigation menus without having to write many lines of code. It has the mobile-first
    approach which can reveal submenus for touchscreens just by tapping the target.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: FlexNav 是一个 jQuery 插件，可以简化复杂且响应式的导航菜单的创建，而无需编写大量代码。它采用了首先适配移动端的方法，只需轻触目标即可在触摸屏上显示子菜单。
- en: In addition to controlling these nested subitems in a device-agnostic way, this
    plugin has improved its accessibility for support navigation by keyboard tab and
    has provided a fallback for old browsers.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 除了以设备无关的方式控制这些嵌套子项之外，该插件还改进了通过键盘 tab 支持导航的可访问性，并为旧浏览器提供了回退。
- en: 'For its implementation you will find the downloadable files from [https://github.com/indyplanets/flexnav](https://github.com/indyplanets/flexnav).
    Starting with a standard HTML document, it is necessary to add this code in the
    `<head>` tag of code including the CSS file:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 有关其实现，您将在 [https://github.com/indyplanets/flexnav](https://github.com/indyplanets/flexnav)
    中找到可下载的文件。从标准 HTML 文档开始，需要在包含 CSS 文件的 `<head>` 标签中添加此代码：
- en: '[PRE14]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now, we will include the following HTML code in a simple unordered list, adding
    in the class and data attributes:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将在简单的无序列表中包含以下 HTML 代码，添加类和数据属性：
- en: '[PRE15]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Then, at the bottom of DOM (before the `</body>` closing tag), we will include
    the jQuery and FlexNav libraries. After that, we will execute the scripts by informing
    the ID or class of the menu element which we want to transform into responsive.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在 DOM 底部（`</body>` 结束标记之前），我们将包含 jQuery 和 FlexNav 库。之后，我们将通过通知要转换为响应式的菜单元素的
    ID 或类来执行脚本。
- en: '[PRE16]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This is a visual sample of what this plugin may offer if viewed on smartphones
    and tablets:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在智能手机和平板电脑上查看时该插件可能提供的视觉示例：
- en: '![Adding flexibility to your menu with FlexNav](img/3602OS_11_07.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![使用 FlexNav 为您的菜单增加灵活性](img/3602OS_11_07.jpg)'
- en: 'It is also possible to inform the plugin of a few options when we are executing
    the script, such as:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们执行脚本时，也可以向插件提供一些选项，例如：
- en: '`''animationSpeed'':''250''`: This sets the speed of animations that accepts
    fast/slow too'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''animationSpeed'':''250''`: 这设置了接受 fast/slow 的动画速度'
- en: '`''transitionOpacity'': true`: This specifies default opacity animation'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''transitionOpacity'': true`: 这指定了默认的不透明度动画'
- en: '`''buttonSelector'': ''.menu-button''`: This specifies the default menu button
    class'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''buttonSelector'': ''.menu-button''`: 这指定了默认菜单按钮类'
- en: '`''hoverIntent'': false`: This is used for hoverIntent plugin only'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''hoverIntent'': false`: 仅用于 hoverIntent 插件'
- en: '`''hoverIntentTimeout'': 150`: This is used for hoverIntent plugin only'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''hoverIntentTimeout'': 150`: 仅用于 hoverIntent 插件'
- en: 'For example:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE17]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Miscellaneous
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 杂项
- en: There is no specific category under which to regroup the following plugins we
    will see. They are SVGeezy, Prefix free, Magnific Popup, Riloadr, and Calendario.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到的以下插件没有特定的类别。它们是 SVGeezy、Prefix free、Magnific Popup、Riloadr 和 Calendario。
- en: SVGeezy
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SVGeezy
- en: SVGeezy is a JavaScript plugin that handles SVG images for browsers such as
    IE8 and earlier and Android 2.3 and earlier. Its working is very simple because
    it only detects SVG images on our website and automatically searches for another
    image (in PNG format for example) as a fallback for it.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: SVGeezy 是一个 JavaScript 插件，用于处理 IE8 及更早版本以及 Android 2.3 及更早版本等浏览器的 SVG 图像。它的工作非常简单，因为它只会在我们的网站上检测到
    SVG 图像，并自动搜索另一种图像（例如 PNG 格式）作为其回退。
- en: The fallback image must have the same filename. The change refers only to the
    file format. Also, it is not necessary to be a PNG file. This format may be specified
    when initializing the script.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 回退图像必须具有相同的文件名。更改仅涉及文件格式。此格式可以在初始化脚本时指定。
- en: If you need support for these old browsers, we will see how to do it. First,
    let's access and download the solution from [https://github.com/benhowdle89/svgeezy](https://github.com/benhowdle89/svgeezy).
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要为这些旧浏览器提供支持，我们将看看如何做。首先，让我们访问并从 [https://github.com/benhowdle89/svgeezy](https://github.com/benhowdle89/svgeezy)
    下载解决方案。
- en: 'Then, create a new standard HTML document and add the SVG image inside the
    `<img>` tag, as follows:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，创建一个新的标准 HTML 文档，并在 `<img>` 标签内添加 SVG 图像，如下所示：
- en: '[PRE18]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Later, at the bottom of DOM (before the `</body>` closing tag), we will include
    the jQuery and SVGeezy libraries. Then, we will execute the plugin by informing
    two parameters:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 稍后，在 DOM 底部（`</body>` 结束标记之前），我们将包含 jQuery 和 SVGeezy 库。然后，我们将通过提供两个参数来执行插件：
- en: The first one defines a classname which we can use if we do not have the SVG
    fallback image or simply do not want to provide a fallback for that specific image.
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个定义了一个类名，如果我们没有 SVG 回退图像或者根本不想为该特定图像提供回退，我们可以使用该类名。
- en: The second one means that the extension of the image will be provided if the
    browser does not support display of SVG images. The PNG extension is the most
    common.
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个意味着如果浏览器不支持显示 SVG 图像，则会提供图像的扩展名。PNG 扩展名是最常见的。
- en: '[PRE19]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Note
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We can also change `nocheck` to `false`, letting the plugin check all images.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以将 `nocheck` 改为 `false`，让插件检查所有图片。
- en: Prefix free
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Prefix free
- en: Prefix free provides us the facility to use only unprefixed CSS properties;
    the plugin adds the current browser's prefix to any CSS code in a background service,
    only when it's necessary. In order to make prefixes code independently, we do
    not need to memorize what properties need prefixes anymore, and it may also avoid
    refactoring the code later only to remove or add new prefixes.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: Prefix free 为我们提供了只使用无前缀的 CSS 属性的便利；插件会在必要时为 CSS 代码添加当前浏览器的前缀，从而使前缀代码独立存在。这样，我们就不需要再记住哪些属性需要前缀了，而且可能还可以避免以后重构代码，只是为了去掉或添加新的前缀。
- en: Note
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This plugin is not necessarily responsive, but since its objective is to give
    more accessibility to the modern browsers, prevent the use of old prefixes and
    do not forget to use them when it is required.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这个插件不一定具有响应性，但是由于它的目标是让现代浏览器更易访问，所以要防止使用旧的前缀，并在需要时不要忘记使用它们。
- en: It is not hard to start using it. First of all let's download it from [https://github.com/LeaVerou/prefixfree](https://github.com/LeaVerou/prefixfree).
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 开始使用它并不难。首先，让我们从 [https://github.com/LeaVerou/prefixfree](https://github.com/LeaVerou/prefixfree)
    下载它。
- en: 'For this example, let''s re-use some HTML you already had and include `prefixfree.js`
    in the `<head>` tag of DOM (right after the CSS files):'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个例子，让我们重新使用一些你已经有的 HTML，并在 DOM 的 `<head>` 标签中包含 `prefixfree.js`：
- en: '[PRE20]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Tip
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The plugin recommends including this in the header in order to minimize the
    blink effect that happens (also known as the FOUC effect).
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这个插件建议将其包含在头部，以减少出现的闪烁效果（也称为 FOUC 效果）。
- en: This is the comparison between before and after, where we may notice how many
    lines of code we have saved.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这是之前和之后的比较，我们可以注意到我们节省了多少行代码。
- en: 'This is how we commonly write a code:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们通常编写代码的方式：
- en: '[PRE21]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'And this one shows, how we could write the same cross-browser code when using
    Prefix free:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这个也显示了，当使用 Prefix free 时，我们如何编写相同跨浏览器的代码：
- en: '[PRE22]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: We saved many lines of code. Incredible, isn't it? Try it on your document and
    check the benefits.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们节省了很多行代码。难以置信，不是吗？在你的文档上试试，看看有哪些好处。
- en: Magnific Popup
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Magnific Popup
- en: 'Magnific Popup is a jQuery plugin used for creating responsive popup windows
    which have multiple uses, such as:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: Magnific Popup 是一个用于创建可响应的弹出窗口的 jQuery 插件，可以有多种用途，比如：
- en: Single image/image gallery displayed in overlay window
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在叠加窗口中显示单个图像/图片库
- en: Popup with video or map
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带视频或地图的弹出窗口
- en: Modal popup
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模态弹出窗口
- en: Dialog with CSS animation
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有 CSS 动画的对话框
- en: It focuses on performance and providing best experience for users with any device.
    Regarding Internet Explorer browsers, Magnific Popups are compatible with Version
    8 and earlier. It achieves it by providing a light and modular solution to be
    downloaded from [http://dimsemenov.com/plugins/magnific-popup/](http://dimsemenov.com/plugins/magnific-popup/)
    and clicking on the **Build tool** link.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 它专注于性能，并为任何设备的用户提供最佳体验。关于 Internet Explorer 浏览器，Magnific Popups 与版本 8 及更早期兼容。它通过提供一个轻量且模块化的解决方案来实现这一点，可以从
    [http://dimsemenov.com/plugins/magnific-popup/](http://dimsemenov.com/plugins/magnific-popup/)
    下载，并点击 **构建工具** 链接。
- en: The use of CSS3 transition instead of JavaScript animations significantly improves
    the performance of animation. Also, this plugin has a kind of extendable microtemplating
    engine that re-uses existing elements responsible to speed up the popup loading
    when using the same pattern of popups (image gallery, for example).
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 CSS3 过渡而不是 JavaScript 动画显著改善了动画的性能。此外，这个插件有一种可扩展的微模板引擎，可以重用现有的元素，从而在使用相同模式的弹出窗口时加快弹出窗口的加载速度（例如图片库）。
- en: 'Let''s try to do this example by practicing it. We will start by creating a
    new standard HTML document. After downloading the solution from [https://github.com/dimsemenov/Magnific-Popup](https://github.com/dimsemenov/Magnific-Popup),
    let''s add the CSS file inside the `<head>` tag. This file is not required for
    its working, but inside of it there are some useful styles responsible for good
    effects:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过实践尝试这个例子。首先，我们将创建一个新的标准 HTML 文档。下载解决方案后，让我们将 CSS 文件添加到 `<head>` 标签中。这个文件不是它的工作所需，但里面有一些有用的样式，负责良好效果：
- en: '[PRE23]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Now, we will add these two links on code displaying a simple image popup and,
    the other one, a video popup.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将在代码中添加这两个链接，显示一个简单的图片弹出窗口和一个视频弹出窗口。
- en: '[PRE24]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Then, at the bottom of DOM (before the `</body>` closing tag), we will need
    to include the `jquery` and `magnificPopup` libraries. After that, we will execute
    the scripts twice and inform the classes (we specified one link previously) for
    each purpose:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在DOM的底部（在`</body>`关闭标签之前），我们需要包含`jquery`和`magnificPopup`库。之后，我们将执行脚本两次，并为每个目的通知类（我们先前指定了一个链接）：
- en: '[PRE25]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The following is the visual of a simple image popup implementation viewed on
    smartphones and tablets:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是在智能手机和平板电脑上查看的简单图像弹出实现的可视化：
- en: '![Magnific Popup](img/3602OS_11_08.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![Magnific Popup](img/3602OS_11_08.jpg)'
- en: There are many usage types which can be seen in detail in the plugin documentation
    at [http://dimsemenov.com/plugins/magnific-popup/documentation.html](http://dimsemenov.com/plugins/magnific-popup/documentation.html).
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在插件文档中可以详细了解到许多使用类型，位于[http://dimsemenov.com/plugins/magnific-popup/documentation.html](http://dimsemenov.com/plugins/magnific-popup/documentation.html)。
- en: Riloadr
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Riloadr
- en: Riloadr is a responsive plugin for image loaders. In this section we will see
    how it works with jQuery, although it is not required because it is framework-independent.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: Riloadr是一个响应式图像加载器插件。在本节中，我们将看到它与jQuery一起使用的工作方式，尽管这并不是必需的，因为它与框架无关。
- en: This plugin is an alternative solution to deliver contextual images in responsive
    layouts which use different image sizes at different resolutions in order to improve
    page load time and user experience.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 该插件是在响应式布局中传送上下文图像的替代解决方案，该布局在不同分辨率下使用不同大小的图像以改善页面加载时间和用户体验。
- en: Riloadr uses the `data-src` and `data-base` attributes in the image tag element
    instead of the common `src` attribute. So, this way we are able to handle the
    image element selecting the best image to be displayed before the browser renders
    the website.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: Riloadr在图像标记元素中使用`data-src`和`data-base`属性，而不是常见的`src`属性。因此，这样我们就能在浏览器渲染网站之前处理图像元素并选择最佳图像进行显示。
- en: 'There are some highlight features that differentiate it from other competitors,
    such as:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些突出的特点使其与其他竞争对手区分开来，例如：
- en: Absolute control on process of image loading
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对图像加载过程的绝对控制
- en: Unlimited breakpoints that may be set by using CSS properties, for example,
    `minWidth`, `maxWidth`, and `minDevicePixelRatio`
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以使用CSS属性（例如，`minWidth`，`maxWidth`和`minDevicePixelRatio`）设置无限断点
- en: Riloadr does not make multiple requests for the same image
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Riloadr不会为相同的图像发出多个请求
- en: You can create different Riloadr objects (named groups) and configure each one
    to your needs
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以创建不同的Riloadr对象（命名组），并根据需要对每个对象进行配置
- en: Bandwidth testing to deliver high-resolution images only if the device has the
    connection fast enough to download it
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带宽测试，只有设备具有足够快的连接才能下载高分辨率图像
- en: 'After downloading it from [https://github.com/tubalmartin/riloadr](https://github.com/tubalmartin/riloadr),
    the recommendation of the plugin is to let CSS and JavaScript files inside the
    `<head>` tag:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 从[https://github.com/tubalmartin/riloadr](https://github.com/tubalmartin/riloadr)下载后，该插件的建议是将CSS和JavaScript文件放在`<head>`标签内：
- en: '[PRE26]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Once the Riloadr is loaded, we may set up its image groups:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦加载了Riloadr，我们可以设置其图像组：
- en: '[PRE27]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Note
  id: totrans-163
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The configuration of `minDevicePixelRatio` is related to the devices that support
    high DPI images and load up the image used for 640 px (with a dimension twice
    as large as normal).
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '`minDevicePixelRatio`的配置与支持高DPI图像的设备有关，并加载用于640像素的图像（尺寸是正常尺寸的两倍）。'
- en: Now, we will just add this `<img>` tag on our HTML code using `data-src` and
    `data-base`.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们只需在 HTML 代码中添加这个`<img>`标签，使用`data-src`和`data-base`。
- en: 'Notice that on `data-base`, we will use `{breakpoint-name}` as a dynamic value
    captured by Riloadr and identify on the breakpoint which has already been defined
    previously. This name may be used as a place to store images by dimensions without
    making a mess:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在`data-base`上，我们将使用`{breakpoint-name}`作为Riloadr捕获的动态值，并在先前定义的断点上标识该值。这个名称可以用作按尺寸存储图像的地方，而不会搞乱：
- en: '[PRE28]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: When rendering the preceding code, the browser will detect the screen size and
    select the correct breakpoint that it fits. Then, it will be replaced by the content
    of the variable name we defined earlier, in this case, 320\. The same thing happens
    if the browser identifies that the content of the variable name is 640, which
    fits better.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染上述代码时，浏览器将检测屏幕大小并选择正确的断点以适合其尺寸。然后，它将被我们之前定义的变量名称的内容替换，本例中为320。如果浏览器识别到变量名称的内容是640，则会发生同样的事情，这更适合。
- en: Note
  id: totrans-169
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If the browser does not support JavaScript or something wrong happens, the `<noscript>`
    tag will display the image we defined.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 如果浏览器不支持 JavaScript 或发生了错误，`<noscript>` 标记将显示我们定义的图像。
- en: 'This following screenshot shows Riloadr in action, displaying images with different
    dimensions being loaded only when it is required by the browser (depending on
    breakpoints of 320 and 640 pixels):'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了 Riloadr 的效果，仅在浏览器需要时加载具有不同尺寸的图像（取决于分辨率为 320 和 640 像素的断点）：
- en: '![Riloadr](img/3602OS_11_09.jpg)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![Riloadr](img/3602OS_11_09.jpg)'
- en: Calendario
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Calendario
- en: Calendario is a jQuery responsive plugin which was built to provide a suitable
    layout for improving a user's interaction with the calendar, keeping the calendar
    structure fluid for easy adaptation to different screens.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: Calendario 是一个 jQuery 响应式插件，旨在提供适合改善用户与日历交互的布局，保持日历结构流动，以便轻松适应不同的屏幕。
- en: On large screens it displays a grid-based layout, while on smaller screens it
    converts it into a stack of the days of the month vertically, facilitating its
    visualization a lot.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在大屏幕上，它显示基于网格的布局，而在较小的屏幕上，它将其转换为垂直的月份天数堆叠，大大简化了其可视化。
- en: Note
  id: totrans-176
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This solution will not work on all browsers yet because some of them do not
    support new CSS properties such as `calc()`. These browsers are Internet Explorer
    8, Opera Mini, and Android Browser.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 这个解决方案目前不适用于所有浏览器，因为其中一些浏览器不支持新的 CSS 属性，比如 `calc()`。这些浏览器包括 Internet Explorer
    8、Opera Mini 和 Android 浏览器。
- en: Calendario is available at [https://github.com/codrops/Calendario](https://github.com/codrops/Calendario).
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: Calendario 可在 [https://github.com/codrops/Calendario](https://github.com/codrops/Calendario)
    获得。
- en: 'Let''s start by adding the CSS file that is included in the plugin:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先添加插件中包含的 CSS 文件：
- en: '[PRE29]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Now, we will include this structured HTML, adding classes and IDs for JavaScript
    handling later:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将包含这个结构化的 HTML，稍后添加类和 ID 以供 JavaScript 处理：
- en: '[PRE30]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Then, at the bottom of DOM (before the `</body>` closing tag), we will need
    to include the jQuery and Calendario libraries. Then, we will initialize the script
    by setting the container ID and will create two useful functions for month navigation
    through the calendar:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在 DOM 的底部（在 `</body>` 结束标记之前），我们将需要包含 jQuery 和 Calendario 库。然后，我们将通过设置容器
    ID 来初始化脚本，并创建两个有用的函数，用于通过日历进行月份导航：
- en: '[PRE31]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The following is a screenshot of this calendar viewed on smartphones/tablets
    and desktops:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在智能手机/平板电脑和桌面上查看此日历的屏幕截图：
- en: '![Calendario](img/3602OS_11_11.jpg)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![Calendario](img/3602OS_11_11.jpg)'
- en: 'And how it may display on desktops:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 以及它在桌面上的显示方式：
- en: '![Calendario](img/3602OS_11_10.jpg)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![Calendario](img/3602OS_11_10.jpg)'
- en: Summary
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have learned about complementary plugins separated by three
    categories which are complementing the previous chapters. For structure plugins,
    we have learned how to use Columns for creating a simple responsive structure,
    Equalize for better distribution of floated element on page, and Packery for creating
    card layout websites. We have also learned different ways to display menus and
    tabs by using Sidr, EasyResponsiveTabstoAccordion, and FlexNav. In the *Miscellaneous*
    section, we have seen how to use SVGeezy, Prefix free, MagnificPopup plugin, Riloadr,
    and Calendario.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了三个类别的补充插件，这些插件补充了前几章的内容。对于结构插件，我们学习了如何使用 Columns 来创建简单的响应式结构，使用 Equalize
    更好地分配页面上浮动元素的位置，以及使用 Packery 来创建卡片布局网站。我们还学习了使用 Sidr、EasyResponsiveTabstoAccordion
    和 FlexNav 来显示菜单和选项卡的不同方法。在 *杂项* 部分，我们看到了如何使用 SVGeezy、Prefix free、MagnificPopup
    插件、Riloadr 和 Calendario。
- en: In the last chapter, we will see different techniques to detect how fast the
    website is loading. The performance topic is extensive, but since effective handling
    of this metric is very important, we will see some techniques to improve the performance
    when creating a responsive website.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一章中，我们将看到不同的技术来检测网站加载速度。性能主题非常广泛，但由于有效处理这一指标非常重要，因此在创建响应式网站时，我们将看到一些提高性能的技术。
