- en: Adding Real-Time Bidding Capabilities to the Marketplace
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向市场添加实时竞价功能
- en: In a world more connected than ever before, instant communication and real-time
    updates are expected behaviors in any application that enables interaction between
    users. Adding real-time features to your application can keep your users engaged,
    and because of that, they will be spending more time on your platform. In this
    chapter, we will learn how to use the MERN stack technologies, along with Socket.IO,
    to easily integrate real-time behavior in a full-stack application. We will do
    this by incorporating an auctioning feature with real-time bidding capabilities in
    the MERN Marketplace application that we developed in [Chapter 7](03fd3b4a-b7fd-4b42-ad7e-5bc34b5612b0.xhtml), *Exercising
    MERN Skills with an Online Marketplace*, and [Chapter 8](03fd3b4a-b7fd-4b42-ad7e-5bc34b5612b0.xhtml), *Extending
    the Marketplace for Orders and Payments*. After going through the implementation
    of this auction and bidding feature, you will know how to utilize sockets in a
    MERN stack application to add real-time features of your choice.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在比以往任何时候都更加紧密联系的世界中，即时通信和实时更新是任何允许用户之间互动的应用程序所期望的行为。向您的应用程序添加实时功能可以使您的用户保持参与，因此他们将在您的平台上花费更多时间。在本章中，我们将学习如何使用
    MERN 堆栈技术以及 Socket.IO，轻松地将实时行为集成到全栈应用程序中。我们将通过在我们在第 7 章“使用在线市场锻炼 MERN 技能”和第 8
    章“扩展市场以支持订单和支付”中开发的 MERN 市场应用程序中集成具有实时竞价功能的拍卖功能来实现这一点。在完成此拍卖和竞价功能的实现后，您将了解如何在
    MERN 堆栈应用程序中利用套接字添加您选择的实时功能。
- en: 'In this chapter, we will extend the online marketplace application by covering
    the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将通过以下主题扩展在线市场应用程序：
- en: Introducing real-time bidding in the MERN Marketplace
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 MERN 市场中引入实时竞价
- en: Adding auctions to the marketplace
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向市场添加拍卖
- en: Displaying the auction view
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示拍卖视图
- en: Implementing real-time bidding with Socket.IO
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Socket.IO 实现实时竞价
- en: Introducing real-time bidding in the MERN Marketplace
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 MERN 市场中引入实时竞价
- en: 'The MERN Marketplace application already allows its users to become sellers
    and maintain shops with products that can be bought by regular users. In this
    chapter, we will extend these functionalities to allow sellers to create auctions
    for items that other users can place bids on in a fixed duration of time. The
    auction view will describe the item for sale and let signed in users place bids
    when the auction is live. Different users can place their own bids, and also see
    other users placing bids in real-time, with the view updating accordingly. The
    completed auction view, with an auction in a live state, will render as follows:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: MERN 市场应用程序已经允许其用户成为卖家并维护有产品可供普通用户购买商店。在本章中，我们将扩展这些功能，允许卖家为其他用户创建在固定时间内可以出价的拍卖物品。拍卖视图将描述待售物品，并允许已登录用户在拍卖进行时进行出价。不同的用户可以放置自己的出价，并实时看到其他用户出价，视图将相应更新。完成的拍卖视图，其中拍卖处于活动状态，将呈现如下：
- en: '![](img/189a06af-d342-43f7-904d-83e8c9bd52cd.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/189a06af-d342-43f7-904d-83e8c9bd52cd.png)'
- en: The code for the complete MERN Marketplace application is available on GitHub
    at [https://github.com/PacktPublishing/Full-Stack-React-Projects-Second-Edition/tree/master/Chapter09/mern-marketplace-bidding](https://github.com/PacktPublishing/Full-Stack-React-Projects-Second-Edition/tree/master/Chapter09/mern-marketplace-bidding). The
    implementations discussed in this chapter can be accessed in the *bidding* branch
    of the repository. You can clone this code and run the application as you go through
    the code explanations in the rest of this chapter.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的 MERN 市场应用代码可在 GitHub 上找到，网址为 [https://github.com/PacktPublishing/Full-Stack-React-Projects-Second-Edition/tree/master/Chapter09/mern-marketplace-bidding](https://github.com/PacktPublishing/Full-Stack-React-Projects-Second-Edition/tree/master/Chapter09/mern-marketplace-bidding)。本章中讨论的实现可以在存储库的
    *bidding* 分支中访问。您可以克隆此代码，并在阅读本章其余部分的代码解释时运行应用程序。
- en: 'The following component tree diagram shows the custom components that make
    up the entire MERN Marketplace frontend, including components for the auction
    and bidding-related features that will be implemented in the rest of this chapter:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 以下组件树图显示了构成整个 MERN 市场前端的所有自定义组件，包括将在本章其余部分实现拍卖和竞价相关功能的组件：
- en: '![](img/3fb0636e-bf13-40b3-afeb-d2f4b2e6a46a.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/3fb0636e-bf13-40b3-afeb-d2f4b2e6a46a.png)'
- en: The features that will be discussed in this chapter modify some of the existing
    components, such as `Profile` and `Menu`, and also add new components, such as `NewAuction`, `MyAuctions`, `Auction`,
    and `Bidding`. In the next section, we will begin extending this online marketplace
    by integrating the option to add auctions to the platform.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将讨论的功能将修改一些现有组件，例如`Profile`和`Menu`，并添加新组件，例如`NewAuction`、`MyAuctions`、`Auction`和`Bidding`。在下一节中，我们将通过集成将拍卖添加到平台的功能来扩展这个在线市场。
- en: Adding auctions to the marketplace
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将拍卖添加到市场
- en: In the MERN Marketplace, we will allow a user who is signed in and has an active
    seller account to create auctions for items that they want other users to place
    bids on. To enable the features of adding and managing auctions, we will need
    to define how to store auction details and implement the full-stack slices that
    will let users create, access and update auctions on the platform. In the following
    sections, we will build out this auction module for the application. First, we
    will define the auction model with a Mongoose Schema for storing details about
    each auction. Then, we will discuss implementations for the backend APIs and frontend
    views that are needed to create new auctions, list auctions that are ongoing,
    created by the same seller and bid on by the same user, and modify existing auctions
    by either editing details of, or deleting an auction from the application.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '在MERN市场，我们将允许已登录并拥有活跃卖家账户的用户为其他用户想要下注的物品创建拍卖。为了启用添加和管理拍卖的功能，我们需要定义如何存储拍卖详情并实现全栈切片，使用户能够在平台上创建、访问和更新拍卖。在以下章节中，我们将为应用程序构建这个拍卖模块。首先，我们将使用Mongoose模式定义拍卖模型，以存储每个拍卖的详情。然后，我们将讨论后端API和前端视图的实现，这些是实现创建新拍卖、列出由同一卖家创建并由同一用户下注的正在进行的拍卖以及通过编辑详情或从应用程序中删除拍卖来修改现有拍卖所需的。 '
- en: Defining an Auction model
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义拍卖模型
- en: 'We will implement a Mongoose model that will define an Auction model for storing
    the details of each auction. This model will be defined in `server/models/auction.model.js`,
    and the implementation will be similar to other Mongoose model implementations
    we''ve covered in previous chapters, such as the Shop model we defined in [Chapter
    7](03fd3b4a-b7fd-4b42-ad7e-5bc34b5612b0.xhtml), *Exercising MERN Skills with an
    Online Marketplace*. The Auction Schema in this model will have fields to store
    auction details such as the name and description of the item being auctioned,
    along with an image and a reference to the seller creating this auction. It will
    also have fields that specify the start and end time for bidding on this auction,
    a starting value for bids, and the list of bids that have been placed for this
    auction. The code for defining these auction fields is as follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将实现一个Mongoose模型，该模型将定义一个用于存储每个拍卖详情的拍卖模型。此模型将在`server/models/auction.model.js`中定义，其实现将与我们在前几章中介绍的其他Mongoose模型实现类似，例如我们在第7章中定义的Shop模型，*使用在线市场锻炼MERN技能*。此模型中的Auction模式将包含存储拍卖详情的字段，例如拍卖物品的名称和描述、图片以及创建此拍卖的卖家引用。它还将包含指定此拍卖下注开始和结束时间的字段、下注的起始值以及为此拍卖已放置的下注列表。定义这些拍卖字段的代码如下：
- en: '**Item name and description**: The auction item name and description fields
    will be string types, with `itemName` as a required field:'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**物品名称和描述**：拍卖物品名称和描述字段将是字符串类型，其中`itemName`为必填字段：'
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Item image**: The `image` field will store the image file representing the
    auction item so that it can be uploaded by the user and stored as data in the
    MongoDB database:'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**项目图片**：`image`字段将存储代表拍卖物品的图片文件，以便用户可以上传并作为数据存储在MongoDB数据库中：'
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Seller**: The `seller` field will reference the user who is creating the
    auction:'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**卖家**：`seller`字段将引用创建拍卖的用户：'
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Created and updated at times**: The `created` and `updated` fields will be `Date` types,
    with `created` generated when a new auction is added, and `updated` changed when
    any auction details are modified:'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建和更新时间**：`created`和`updated`字段将是`Date`类型，其中`created`在添加新拍卖时生成，而`updated`在修改任何拍卖详情时更改：'
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Bidding start time**: The `bidStart` field will be a `Date` type that will
    specify when the auction goes live so that users can start placing bids:'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**拍卖开始时间**：`bidStart`字段将是一个`Date`类型，用于指定拍卖何时开始，以便用户可以开始下注：'
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Bidding end time**: The `bidEnd` field will be a `Date` type that will specify
    when the auction ends, after which the users cannot place bids on this auction:'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**出价结束时间**：`bidEnd`字段将是一个`Date`类型，用于指定拍卖何时结束，之后用户将无法对此拍卖进行出价：'
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Starting bid**: The `startingBid` field will store values of the `Number` type,
    and it will specify the starting price for this auction:'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**起始出价**：`startingBid`字段将存储`Number`类型的值，并指定此次拍卖的起始价格：'
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**List of bids**: The `bids` field will be an array containing details of each
    bid placed against the auction. When we store bids in this array, we will push
    the latest bid to the beginning of the array. Each bid will contain a reference
    to the user placing the bid, the bid amount the user offered, and the timestamp
    when the bid was placed:'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**出价列表**：`bids`字段将是一个包含对拍卖所出每个出价详情的数组。当我们将出价存储在这个数组中时，我们将最新的出价推送到数组的开头。每个出价将包含放置出价的用户的引用、用户提供的出价金额以及出价放置的时间戳：'
- en: '[PRE7]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: These auction-related fields will allow us to implement auction and bidding-related
    features for the MERN Marketplace application. In the next section, we will start
    developing these features by implementing the full-stack slice, which will allow
    sellers to create new auctions.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这些与拍卖相关的字段将使我们能够为MERN Marketplace应用程序实现拍卖和竞标相关功能。在下一节中，我们将通过实现全栈切片来开始开发这些功能，这将允许卖家创建新的拍卖。
- en: Creating a new auction
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建新的拍卖
- en: For a seller to be able to create a new auction on the platform, we will need
    to integrate a full-stack slice that allows the user to fill out a form view in
    the frontend, and then save the entered details to a new auction document in the
    database in the backend. To implement this feature, in the following sections,
    we will add a create auction API in the backend, along with a way to fetch this
    API in the frontend, and a create new auction form view that takes user input
    for auction fields.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使卖家能够在平台上创建新的拍卖，我们需要集成一个全栈切片，允许用户在前端填写表单视图，然后将输入的详细信息保存到后端数据库中的新拍卖文档中。为了实现此功能，在接下来的章节中，我们将在后端添加创建拍卖API，以及在前端获取此API的方法，以及一个创建新拍卖表单视图，该视图接受用户对拍卖字段的输入。
- en: The create auction API
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建拍卖API
- en: For the implementation of the backend API, which will allow us to create a new
    auction in the database, we will declare a POST route, as shown in the following
    code.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现允许我们在数据库中创建新拍卖的后端API，我们将声明一个POST路由，如下面的代码所示。
- en: '`mern-marketplace/server/routes/auction.routes.js`:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/routes/auction.routes.js`:'
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: A POST request to this route at `/api/auctions/by/:userId` will ensure the requesting
    user is signed in and is also authorized. In other words, it is the same user
    associated with the `:userId` specified in the route param. Then, before creating
    the auction, it is checked if this given user is a seller using the `isSeller`
    method that's defined in the user controller methods.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 向`/api/auctions/by/:userId`此路由发送POST请求将确保请求的用户已登录并且也已授权。换句话说，它是与路由参数中指定的`:userId`关联的同一用户。然后，在创建拍卖之前，将使用在用户控制器方法中定义的`isSeller`方法检查此给定用户是否为卖家。
- en: To process the `:userId` parameter and retrieve the associated user from the
    database, we will utilize the `userByID` method from the user controller methods.
    We will add the following to the `Auction` routes in `auction.routes.js` so that
    the user is available in the `request` object as `profile`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理`:userId`参数并从数据库中检索关联的用户，我们将利用用户控制器方法中的`userByID`方法。我们将在`auction.routes.js`中的`Auction`路由中添加以下内容，以便用户在`request`对象中作为`profile`可用。
- en: '`mern-marketplace/server/routes/auction.routes.js`:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/routes/auction.routes.js`:'
- en: '[PRE9]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `auction.routes.js` file, which contains the auction routes, will be very
    similar to the `user.routes` file. To load these new auction routes in the Express
    app, we need to mount the auction routes in `express.js`, as we did for the auth
    and user routes.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 包含拍卖路由的`auction.routes.js`文件将与`user.routes`文件非常相似。为了在Express应用程序中加载这些新的拍卖路由，我们需要在`express.js`中挂载拍卖路由，就像我们为认证和用户路由所做的那样。
- en: '`mern-marketplace/server/express.js`:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/express.js`:'
- en: '[PRE10]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `create` method in the auction controller, which is invoked after a seller
    is verified, uses the `formidable` node module to parse the multipart request
    that may contain an image file uploaded by the user for the item image. If there
    is a file, `formidable` will store it temporarily in the filesystem, and we will
    read it using the `fs` module to retrieve the file type and data so that we can
    store it in the `image` field in the auction document.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在卖家验证后调用的拍卖控制器中的`create`方法，使用`formidable`节点模块解析可能包含用户上传的物品图片的多部分请求。如果有文件，`formidable`将暂时将其存储在文件系统中，我们将使用`fs`模块读取它以检索文件类型和数据，以便我们可以将其存储在拍卖文档的`image`字段中。
- en: The `create` controller method will look as follows.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`create`控制器方法将如下所示。'
- en: '`mern-marketplace/server/controllers/auction.controller.js`:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/controllers/auction.controller.js`:'
- en: '[PRE11]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The item image file for the auction is uploaded by the user and stored in MongoDB
    as data. Then, in order to be shown in the views, it is retrieved from the database
    as an image file at a separate GET API. The GET API is set up as an Express route
    at `/api/auctions/image/:auctionId`, which gets the image data from MongoDB and
    sends it as a file in the response. The implementation steps for file upload, storage,
    and retrieval are outlined in detail in the *Upload profile photo* section in Chapter
    5, *Growing the Skeleton into a Social Media Application*.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 拍卖的物品图片文件由用户上传并存储在MongoDB中作为数据。然后，为了在视图中显示，它作为单独的GET API从数据库中检索出来，作为一个图片文件。这个GET
    API被设置为Express路由在`/api/auctions/image/:auctionId`，它从MongoDB获取图像数据并将其作为文件发送在响应中。文件上传、存储和检索的实现步骤在第五章“将骨架扩展成社交媒体应用”的*上传个人照片*部分中详细说明。
- en: This create auction API endpoint can now be used in the frontend to make a POST
    request. Next, we will add a fetch method on the client-side to make this request
    from the application's client interface.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以在前端使用这个创建拍卖API端点来发起POST请求。接下来，我们将在客户端添加一个fetch方法，从应用程序的客户端界面发起这个请求。
- en: Fetching the create API in the view
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在视图中获取创建API
- en: In the frontend, to make a request to this create API, we will set up a `fetch` method
    on the client-side to make a POST request to the API route and pass it the multipart
    form data containing details of the new auction in the `body`. This fetch method
    will be defined as follows.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在前端，为了向这个创建API发起请求，我们将在客户端设置一个`fetch`方法，向API路由发送POST请求，并在`body`中传递包含新拍卖详情的多部分表单数据。这个fetch方法将定义如下。
- en: '`mern-marketplace/client/auction/api-auction.js`:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/auction/api-auction.js`:'
- en: '[PRE12]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The response that's received from the server will be returned to the component
    calling this fetch method. We will use this method in the new auction form view
    to send the user-entered auction details to the backend and create a new auction
    in the database. In the next section, we will implement this new auction form
    view in a React component.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 从服务器接收到的响应将返回给调用这个fetch方法的组件。我们将使用这个方法在新拍卖表单视图中发送用户输入的拍卖详情到后端并在数据库中创建一个新的拍卖。在下一节中，我们将实现这个新的拍卖表单视图在React组件中。
- en: The NewAuction component
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 新拍卖组件
- en: Sellers in the marketplace application will interact with a form view to enter
    details of a new auction and create the new auction. We will render this form
    in the `NewAuction` component, which will allow a seller to create an auction
    by entering an item name and description, uploading an image file from their local
    filesystem, specifying the starting bid value, and creating date-time values for
    starting and ending bidding on this auction.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 市场应用中的卖家将通过表单视图输入新拍卖的详情并创建新的拍卖。我们将在这个`NewAuction`组件中渲染这个表单，允许卖家通过输入项目名称和描述、从本地文件系统上传图片文件、指定起始出价值以及为这个拍卖的起始和结束出价创建日期时间值来创建拍卖。
- en: 'This form view will render as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这个表单视图将渲染如下：
- en: '![](img/19aea77e-b908-4f59-96a4-9bde18416c82.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/19aea77e-b908-4f59-96a4-9bde18416c82.png)'
- en: The implementation for this `NewAuction` component is similar to other create
    form implementations that we have discussed previously, such as the `NewShop`
    component implementation from [Chapter 7](03fd3b4a-b7fd-4b42-ad7e-5bc34b5612b0.xhtml), *Exercising
    MERN Skills with an Online Marketplace*. The fields that are different in this
    form component are the date-time input options for the auction start and end timings.
    To add these fields, we'll use Material-UI `TextField` components with `type`
    set to `datetime-local`, as shown in the following code.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 `NewAuction` 组件的实现与其他我们之前讨论过的创建表单实现类似，例如来自第 7 章 [03fd3b4a-b7fd-4b42-ad7e-5bc34b5612b0.xhtml]，*使用在线市场锻炼
    MERN 技能* 的 `NewShop` 组件实现。在这个表单组件中不同的字段是拍卖开始和结束时间的日期时间输入选项。为了添加这些字段，我们将使用 Material-UI
    的 `TextField` 组件，并将 `type` 设置为 `datetime-local`，如下面的代码所示。
- en: '`mern-marketplace/client/auction/NewAuction.js`:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/auction/NewAuction.js`:'
- en: '[PRE13]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We also assign default date-time values for these fields in the format expected
    by this input component. We set the default start time to the current date-time
    and the default end time to an hour after the current date-time, as shown here.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还为这些字段分配了默认的日期时间值，格式与该输入组件期望的格式一致。我们将默认开始时间设置为当前日期时间，默认结束时间设置为当前日期时间后一小时，如下所示。
- en: '`mern-marketplace/client/auction/NewAuction.js`:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/auction/NewAuction.js`:'
- en: '[PRE14]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The `TextField` with the type as `datetime-local` takes dates in the format
    `yyyy-mm-ddThh:mm`. So, we define a `getDateString` method that takes a JavaScript
    date object and formats it accordingly. The `getDateString` method is implemented
    as follows.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 类型为 `datetime-local` 的 `TextField` 以 `yyyy-mm-ddThh:mm` 的格式接受日期。因此，我们定义了一个 `getDateString`
    方法，该方法接受一个 JavaScript 日期对象并相应地格式化它。`getDateString` 方法的实现如下。
- en: '`mern-marketplace/client/auction/NewAuction.js`:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/auction/NewAuction.js`:'
- en: '[PRE15]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In order to ensure the user has entered the dates correctly, with the start
    time set to a value before the end time, we need to add a check before submitting
    the form details to the backend. The validation of the date combination can be
    confirmed with the following code.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保用户正确地输入了日期，开始时间设置为早于结束时间的值，我们需要在将表单详情提交到后端之前添加一个检查。日期组合的验证可以通过以下代码确认。
- en: '`mern-marketplace/client/auction/NewAuction.js`:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/auction/NewAuction.js`:'
- en: '[PRE16]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: If the date combination is found to be invalid, then the user will be informed
    and form data will not be sent to the backend.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果发现日期组合无效，则用户将被告知，并且不会将表单数据发送到后端。
- en: This `NewAuction` component can only be viewed by a signed-in user who is also
    a seller. Therefore, we will add a `PrivateRoute` in the `MainRouter` component.
    This will render this form for authenticated users at `/auction/new`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 `NewAuction` 组件只能由登录且也是卖家的用户查看。因此，我们将在 `MainRouter` 组件中添加一个 `PrivateRoute`。这将在这个
    `MainRouter` 组件中为经过身份验证的用户渲染 `/auction/new` 的表单。
- en: '`mern-marketplace/client/MainRouter.js`:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/MainRouter.js`:'
- en: '[PRE17]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This link can be added to any of the view components that may be accessed by
    the seller, for example, in a view where a seller manages their auctions in the
    marketplace. Now that it is possible to add new auctions in the marketplace, in
    the next section, we will discuss how to fetch these auctions from the database
    in the backend so that they can be listed in the views in the frontend.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这个链接可以添加到任何卖家可能访问的视图组件中，例如，在一个卖家在市场中管理他们的拍卖的视图中。现在，在市场中添加新的拍卖成为可能，在下一节中，我们将讨论如何从后端数据库中检索这些拍卖，以便它们可以在前端视图中列出。
- en: Listing auctions
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列出拍卖
- en: 'In the MERN Marketplace application, we will display three different lists
    of auctions to the users. All users browsing through the platform will be able
    to view the currently open auctions, in other words, auctions that are live or
    are going to start at a future date. The sellers will be able to view a list of
    auctions that they created, while signed in users will be able to view the list
    of auctions they placed bids in. The list displaying the open auctions to all
    the users will render as follows, providing a summary of each auction, along with
    an option so that the user can view further details in a separate view:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在 MERN 市场应用中，我们将向用户展示三个不同的拍卖列表。所有浏览平台的用户都将能够查看当前正在进行的拍卖，换句话说，即那些正在直播或将在未来某个日期开始的拍卖。卖家将能够查看他们创建的拍卖列表，而登录用户将能够查看他们投过标的拍卖列表。展示给所有用户的开放拍卖列表将如下渲染，提供每个拍卖的摘要，并有一个选项让用户可以在单独的视图中查看更多详细信息：
- en: '![](img/2f829cd9-fb7b-4971-bb87-2a068bd76d3c.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2f829cd9-fb7b-4971-bb87-2a068bd76d3c.png)'
- en: In the following sections, in order to implement these different auction lists so
    that they're displayed in the application, we will define the three separate backend
    APIs to retrieve open auctions, auctions by a seller, and auctions by a bidder,
    respectively. Then, we will implement a reusable React component that will take
    any list of auctions provided to it as a prop and render it to the view. This
    will allow us to display all three lists of auctions while utilizing the same
    component.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下章节中，为了实现这些不同的拍卖列表以便在应用程序中显示，我们将分别定义三个单独的后端API来检索开放拍卖、卖家拍卖和出价者拍卖。然后，我们将实现一个可重用的React组件，该组件将接受作为属性提供的任何拍卖列表并将其渲染到视图中。这将允许我们在使用相同组件的同时显示所有三个拍卖列表。
- en: The open Auctions API
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开放式拍卖API
- en: To retrieve the list of open auctions from the database, we will define a backend
    API that accepts a GET request and queries the Auction collection to return the
    open auctions that are found in the response. To implement this open auctions
    API, we will declare a route, as shown here.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 为了从数据库中检索开放拍卖的列表，我们将定义一个后端API，该API接受GET请求并查询拍卖集合，以便在响应中返回找到的开放拍卖。为了实现这个开放拍卖API，我们将声明一个路由，如下所示。
- en: '`mern-marketplace/server/routes/auction.routes.js:`'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/routes/auction.routes.js:`'
- en: '[PRE18]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: A GET request that's received at the `/api/auctions` route will invoke the `listOpen`
    controller method, which will query the Auction collection in the database so
    that it returns all the auctions with ending dates greater than the current date.
    The `listOpen` method is defined as follows.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 当在`/api/auctions`路由上接收到GET请求时，将调用`listOpen`控制器方法，该方法将查询数据库中的拍卖集合，以便返回所有截至日期大于当前日期的拍卖。`listOpen`方法定义如下。
- en: '`mern-marketplace/server/controllers/auction.controller.js`:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/controllers/auction.controller.js`: '
- en: '[PRE19]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The auctions that are returned by the query in this `listOpen` method will be
    sorted by the starting date, with auctions that start earlier shown first. These
    auctions will also contain the ID and name details of the seller and each bidder.
    The resulting array of auctions will be sent back in the response to the requesting
    client.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 由`listOpen`方法查询返回的拍卖将按起始日期排序，较早开始的拍卖将首先显示。这些拍卖还将包含卖家的ID和名称详情以及每个出价者的详情。结果拍卖数组将发送回请求客户端的响应。
- en: To fetch this API in the frontend, we will add a corresponding `listOpen` method
    in `api-auction.js`, similar to other API implementations. This fetch method will
    be used in the frontend component that displays the open auctions to the user. Next,
    we will implement another API to list all the auctions that a specific user placed
    bids in.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在前端获取此API，我们将在`api-auction.js`中添加相应的`listOpen`方法，类似于其他API实现。此获取方法将用于在前端组件中显示开放拍卖给用户。接下来，我们将实现另一个API来列出特定用户参与的所有拍卖。
- en: The Auctions by bidder API
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 按出价者拍卖API
- en: To be able to display all the auctions that a given user placed bids in, we
    will define a backend API that accepts a GET request and queries the Auction collection
    so that it returns the relevant auctions in the response. To implement this auctions
    by bidder API, we will declare a route, as shown here.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够显示给定用户参与的所有拍卖，我们将定义一个后端API，该API接受GET请求并查询拍卖集合，以便在响应中返回相关的拍卖。为了实现按出价者拍卖API，我们将声明一个路由，如下所示。
- en: '`mern-marketplace/server/routes/auction.routes.js`'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/routes/auction.routes.js`'
- en: '[PRE20]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: A GET request, when received at the `/api/auctions/bid/:userId` route, will
    invoke the `listByBidder` controller method, which will query the Auction collection
    in the database so that it returns all the auctions that contain bids with a bidder
    matching the user specified by the `userId` parameter in the route. The `listByBidder` method
    is defined as follows.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 当在`/api/auctions/bid/:userId`路由上接收到GET请求时，将调用`listByBidder`控制器方法，该方法将查询数据库中的拍卖集合，以便返回所有包含与路由中指定的`userId`参数匹配的出价者的出价的拍卖。`listByBidder`方法定义如下。
- en: '`mern-marketplace/server/controllers/auction.controller.js`:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/controllers/auction.controller.js`:'
- en: '[PRE21]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This method will return the resulting auctions in response to the requesting
    client, and each auction will also contain the ID and name details of the seller
    and each bidder. To fetch this API in the frontend, we will add a corresponding `listByBidder` method
    in `api-auction.js`, similar to other API implementations. This fetch method will
    be used in the frontend component that displays the auctions related to a specific
    bidder. Next, we will implement an API that will list all the auctions that a
    specific seller created in the marketplace.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法将向请求客户端返回结果拍卖，并且每个拍卖还将包含卖家和每个竞标者的ID和名称详情。为了在前端获取此API，我们将在`api-auction.js`中添加相应的`listByBidder`方法，类似于其他API实现。此获取方法将用于显示与特定竞标者相关的拍卖的前端组件。接下来，我们将实现一个API，该API将列出特定卖家在市场上创建的所有拍卖。
- en: The Auctions by seller API
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 卖家拍卖API
- en: Sellers in the marketplace will see a list of auctions that they created. To
    retrieve these auctions from the database, we will define a backend API that accepts
    a GET request and queries the Auction collection so that it returns the auctions
    by a specific seller. To implement this auctions by seller API, we will declare
    a route, as shown here.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 市场中的卖家将看到他们创建的拍卖列表。为了从数据库中检索这些拍卖，我们将定义一个后端API，该API接受GET请求并查询拍卖集合，以便返回特定卖家的拍卖。为了实现此卖家拍卖API，我们将声明一个路由，如下所示。
- en: '`mern-marketplace/server/routes/auction.routes.js`:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/routes/auction.routes.js`:'
- en: '[PRE22]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: A GET request, when received at the `/api/auctions/by/:userId` route, will invoke
    the `listBySeller` controller method, which will query the Auction collection
    in the database so that it returns all the auctions with sellers matching the
    user specified by the `userId` parameter in the route. The `listBySeller` method
    is defined as follows.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 当在`/api/auctions/by/:userId`路由接收到GET请求时，将调用`listBySeller`控制器方法，该方法将查询数据库中的拍卖集合，以便返回所有与通过路由中`userId`参数指定的用户匹配的卖家拍卖。`listBySeller`方法定义如下。
- en: '`mern-marketplace/server/controllers/auction.controller.js`:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/controllers/auction.controller.js`:'
- en: '[PRE23]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This method will return the auctions for the specified seller in response to
    the requesting client, and each auction will also contain the ID and name details
    of the seller and each bidder.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法将向请求客户端返回指定卖家的拍卖，并且每个拍卖还将包含卖家和每个竞标者的ID和名称详情。
- en: To fetch this API in the frontend, we will add a corresponding `listBySeller` method
    in `api-auction.js`, similar to other API implementations. This fetch method will
    be used in the frontend component that displays the auctions related to a specific
    seller. In the next section, we will look at the implementation of the Auctions
    component, which will take any of these lists of auctions and display it to the
    end user.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在前端获取此API，我们将在`api-auction.js`中添加相应的`listBySeller`方法，类似于其他API实现。此获取方法将用于显示与特定卖家相关的拍卖的前端组件。在下一节中，我们将查看拍卖组件的实现，该组件将接受任何这些拍卖列表并将其显示给最终用户。
- en: The Auctions component
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 拍卖组件
- en: 'The different auction lists in the application will be rendered using a React
    component that takes an array of auction objects as props. We will implement this
    reusable `Auctions` component and add it to the views that will retrieve and display
    either the open auctions, auctions by a bidder, or auctions by a seller. The view
    that retrieves and renders the list of auctions created by a specific seller using
    the `Auctions` component will look as follows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序中的不同拍卖列表将通过一个React组件渲染，该组件接受拍卖对象数组作为属性。我们将实现这个可重用的`Auctions`组件，并将其添加到将检索和显示开放拍卖、竞标者拍卖或卖家拍卖的视图中。使用`Auctions`组件检索和渲染特定卖家创建的拍卖列表的视图将如下所示：
- en: '![](img/0400d64d-72a2-4491-8200-def898660ab8.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0400d64d-72a2-4491-8200-def898660ab8.png)'
- en: The `Auctions` component will iterate over the array of auctions received as
    a prop and display each auction in a Material-UI `ListItem` component, as shown
    in the following code.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`Auctions`组件将遍历作为属性接收的拍卖数组，并在Material-UI `ListItem`组件中显示每个拍卖，如下面的代码所示。'
- en: '`mern-marketplace/client/auction/Auctions.js`:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/auction/Auctions.js`:'
- en: '[PRE24]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: For each auction item, besides displaying some basic auction details, we give
    the users an option to open each auction in a separate link. We also conditionally
    render details such as when an auction will start, whether bidding has started
    or ended, how much time is left, and what the latest bid is. These details of
    each auction's state are determined and rendered with the following code.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个拍卖项目，除了显示一些基本拍卖详情外，我们还为用户提供了一个选项，可以在单独的链接中打开每个拍卖。我们还条件性地渲染了诸如拍卖何时开始、竞标是否已经开始或结束、剩余时间有多少以及最新的出价是多少等详情。每个拍卖状态的这些详情是通过以下代码确定和渲染的。
- en: '`mern-marketplace/client/auction/Auctions.js`:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/auction/Auctions.js`:'
- en: '[PRE25]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: To calculate and render the time left for auctions that have already started,
    we define a `showTimeLeft` method, which takes the end date as an argument and
    uses the `calculateTimeLeft` method to construct the time string rendered in the
    view. The `showTimeLeft` method is defined as follows.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 为了计算和渲染已开始的拍卖的剩余时间，我们定义了一个`showTimeLeft`方法，它接受结束日期作为参数，并使用`calculateTimeLeft`方法来构建在视图中渲染的时间字符串。`showTimeLeft`方法定义如下。
- en: '`mern-marketplace/client/auction/Auctions.js`:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/auction/Auctions.js`:'
- en: '[PRE26]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: This method uses the `calculateTimeLeft` method to determine the breakdown of
    the time left in days, hours, minutes, and seconds.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法使用`calculateTimeLeft`方法来确定剩余时间的日、时、分、秒的分解。
- en: The `calculateTimeLeft` method takes the end date and compares it with the current
    date to calculate the difference and makes a `timeLeft` object that records the
    remaining days, hours, minutes, and seconds, as well as a `timeEnd` state. If
    the time has ended, the `timeEnd` state is set to true. The `calculateTimeLeft` method
    is defined as follows.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '`calculateTimeLeft`方法接受结束日期并与当前日期进行比较，以计算差异并创建一个`timeLeft`对象，该对象记录剩余的天数、小时、分钟和秒，以及一个`timeEnd`状态。如果时间已结束，则将`timeEnd`状态设置为true。`calculateTimeLeft`方法定义如下。'
- en: '`mern-marketplace/client/auction/Auctions.js`:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/auction/Auctions.js`:'
- en: '[PRE27]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: This `Auctions` component, which renders a list of auctions with the details
    and a status of each, can be added to other views that will display different
    auction lists. If the user who's currently viewing an auction list happens to
    be a seller for a given auction in the list, we also want to render the option
    to edit or delete the auction to this user. In the next section, we will learn
    how to incorporate these options to edit or delete an auction from the marketplace.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 此`Auctions`组件渲染了包含每个拍卖的详情和状态的列表，可以添加到其他视图中，以显示不同的拍卖列表。如果当前查看拍卖列表的用户恰好是列表中某个拍卖的卖家，我们还想为此用户渲染编辑或删除拍卖的选项。在下一节中，我们将学习如何将这些选项整合到从市场编辑或删除拍卖中。
- en: Editing and deleting auctions
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编辑和删除拍卖
- en: A seller in the marketplace will be able to manage their auctions by either
    editing or deleting an auction that they've created. The implementations of the
    edit and delete features will require building backend APIs that save changes
    to the database and remove an auction from the collection. These APIs will be
    used in frontend views to allow users to edit auction details using a form and
    initiate delete with a button click. In the following sections, we will learn
    how to add these options conditionally to the auction list and discuss the full-stack
    implementation to complete these edit and delete functions.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 市场中的卖家将能够通过编辑或删除他们创建的拍卖来管理他们的拍卖。编辑和删除功能的实现需要构建后端API，这些API将保存对数据库的更改并从集合中删除一个拍卖。这些API将在前端视图中使用，以允许用户使用表单编辑拍卖详情，并通过按钮点击来启动删除操作。在接下来的章节中，我们将学习如何有条件地将这些选项添加到拍卖列表中，并讨论全栈实现以完成这些编辑和删除功能。
- en: Updating the list view
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新列表视图
- en: We will update the code for the auctions list view to conditionally show the
    edit and delete options to the seller. In the `Auctions` component, which is where
    a list of auctions is iterated over to render each item in `ListItem`, we will
    add two more options in the `ListItemSecondaryAction` component, as shown in the
    following code.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将更新拍卖列表视图的代码，以有条件地显示编辑和删除选项给卖家。在`Auctions`组件中，该组件迭代列表以渲染`ListItem`中的每个项目，我们将在`ListItemSecondaryAction`组件中添加两个额外的选项，如下面的代码所示。
- en: '`mern-marketplace/client/auction/Auctions.js`:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/auction/Auctions.js`:'
- en: '[PRE28]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The link to the edit view and the delete component are rendered conditionally
    if the currently signed in user's ID matches the ID of the auction seller. The
    implementation for the Edit view component and Delete component is similar to
    the `EditShop` component and `DeleteShop` component we discussed in  [Chapter
    7](7514f26d-29e1-46e2-ac46-7515b2c3a6d0.xhtml), *Exercising MERN Skills with an
    Online Marketplace*. These same components will call backend APIs to complete
    the edit and delete actions. We will look at the required backend APIs in the
    next section.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 如果当前登录用户的ID与拍卖卖家的ID匹配，则条件性地渲染编辑视图链接和删除组件。编辑视图组件和删除组件的实现与我们在第7章中讨论的 `EditShop`
    组件和 `DeleteShop` 组件类似，即使用在线市场锻炼MERN技能。这些相同的组件将调用后端API来完成编辑和删除操作。我们将在下一节中查看所需的API。
- en: Edit and delete auction APIs
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编辑和删除拍卖API
- en: To complete the edit auction and delete auction operations initiated by sellers
    from the frontend, we need to have the corresponding APIs in the backend. The
    route for these API endpoints, which will accept the update and delete requests,
    can be declared as follows.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成前端发起的编辑拍卖和删除拍卖操作，我们需要在后端有相应的API。这些API端点的路由，将接受更新和删除请求，可以声明如下。
- en: '`mern-marketplace/server/routes/auction.routes.js:`'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/routes/auction.routes.js`: '
- en: '[PRE29]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The `:auctionId` param in the `/api/auctions/:auctionId` route URL will invoke
    the `auctionByID` controller method, which is similar to the `userByID` controller
    method. It retrieves the auction from the database and attaches it to the request
    object so that it can be used in the `next` method. The `auctionByID` method is
    defined as follows.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '`/api/auctions/:auctionId` 路由URL中的 `:auctionId` 参数将调用 `auctionByID` 控制器方法，该方法与
    `userByID` 控制器方法类似。它从数据库中检索拍卖并将其附加到请求对象中，以便在 `next` 方法中使用。`auctionByID` 方法定义如下。'
- en: '`mern-marketplace/server/controllers/auction.controller.js`:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/controllers/auction.controller.js`:'
- en: '[PRE30]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The auction object that's retrieved from the database will also contain the
    name and ID details of the seller and bidders, as we specified in the `populate()` methods.
    For these API endpoints, the `auction` object is used next to verify that the
    currently signed-in user is the seller who created this given auction by invoking
    the `isSeller` method, which is defined in the auction controller as follows.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 从数据库检索的拍卖对象还将包含卖家和竞标者的名称和ID详细信息，正如我们在 `populate()` 方法中指定的。对于这些API端点，使用 `auction`
    对象来验证当前登录用户是否是创建此特定拍卖的卖家，通过调用在拍卖控制器中定义的 `isSeller` 方法。
- en: '`mern-marketplace/server/controllers/auction.controller.js`:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/controllers/auction.controller.js`:'
- en: '[PRE31]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Once the seller has been verified, the `next` method is invoked to either update
    or delete the auction, depending on whether a PUT or DELETE request was received.
    The controller methods for updating and deleting auctions are similar to the previous
    implementations for update and delete, as we discussed for the edit shop API and
    delete shop API in [Chapter 7](03fd3b4a-b7fd-4b42-ad7e-5bc34b5612b0.xhtml), *Exercising
    MERN Skills with an Online Marketplace*.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦卖家被验证，`next` 方法将被调用以更新或删除拍卖，具体取决于是否收到了PUT或DELETE请求。更新和删除拍卖的控制器方法与我们在第7章中讨论的编辑商店API和删除商店API的先前实现类似，即使用在线市场锻炼MERN技能。这些相同的组件将调用后端API来完成编辑和删除操作。我们将在下一节中查看所需的API。
- en: We have the auction module for the marketplace ready with an Auction model for
    storing auction and bidding data and backend APIs and frontend views for creating
    new auctions, displaying different auction lists, and modifying an existing auction.
    In the next section, we will extend this module further and implement a view for
    individual auctions where, besides learning more about the auction, users will
    also be able to see live bidding updates.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经准备好了市场使用的拍卖模块，包括用于存储拍卖和竞标数据的拍卖模型，以及用于创建新拍卖、显示不同拍卖列表和修改现有拍卖的后端API和前端视图。在下一节中，我们将进一步扩展此模块并实现单个拍卖的视图，用户不仅可以了解更多关于拍卖的信息，还可以看到实时的竞标更新。
- en: Displaying the auction view
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示拍卖视图
- en: The view for displaying a single auction will contain the core functionality
    of the real-time auction and bidding features for the marketplace. Before getting
    into the implementation of real-time bidding, we will set up the full-stack slice
    for retrieving details of a single auction and display these details in a React
    component that will house the auction display, timer, and bidding capabilities.
    In the following sections, we will start by discussing the backend API for fetching
    a single auction. Then, we will look at the implementation of an Auction component,
    which will use this API to retrieve and display the auction details, along with
    the state of the auction. To give users a real-time update of the state of the
    auction, we will also implement a timer in this view to indicate the time left
    until a live auction ends.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 显示单个拍卖的视图将包含市场实时拍卖和竞标功能的核心功能。在进入实时竞标的实现之前，我们将设置一个全栈切片来检索单个拍卖的详细信息，并在一个将包含拍卖显示、计时器和竞标功能的React组件中显示这些详细信息。在接下来的章节中，我们将首先讨论用于获取单个拍卖的后端API。然后，我们将查看Auction组件的实现，该组件将使用此API检索并显示拍卖详情以及拍卖的状态。为了给用户提供拍卖状态的实时更新，我们还将在此视图中实现一个计时器，以指示距离现场拍卖结束的时间。
- en: The read auction API
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读取拍卖API
- en: To display the details of an existing auction in a view of its own, we need
    to add a backend API that will receive a request for the auction from the client
    and return its details in the response. Therefore, we will implement a read auction
    API in the backend that will accept a GET request with a specified auction ID
    and return the corresponding auction document from the `Auction` collection in
    the database. We will start adding this API endpoint by declaring a GET route,
    as shown in the following code.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 要在单独的视图中显示现有拍卖的详细信息，我们需要添加一个后端API，该API将接收来自客户端的拍卖请求并返回其详细信息。因此，我们将在后端实现一个读取拍卖API，该API将接受一个带有指定拍卖ID的GET请求，并从数据库中的`Auction`集合返回相应的拍卖文档。我们将通过声明以下代码中的GET路由来开始添加此API端点。
- en: '`mern-marketplace/server/routes/auction.routes.js`:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/routes/auction.routes.js`:'
- en: '[PRE32]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The `:auctionId` param in the route URL invokes the `auctionByID` controller
    method when a GET request is received at this route. The `auctionByID` controller
    method retrieves the auction from the database and attaches it to the request
    object to be accessed in the `read` controller method, which is called next. The `read` controller
    method, which returns this auction object in response to the client, is defined
    as follows.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 路由URL中的`:auctionId`参数在接收到此路由的GET请求时调用`auctionByID`控制器方法。`auctionByID`控制器方法从数据库中检索拍卖并将其附加到请求对象，以便在`read`控制器方法中访问，该方法随后被调用。返回此拍卖对象以响应客户端的`read`控制器方法定义如下。
- en: '`mern-marketplace/server/controllers/auction.controller.js`:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/controllers/auction.controller.js`:'
- en: '[PRE33]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: We are removing the image field before sending the response, since images will
    be retrieved as files in separate routes. With this API ready in the backend,
    we can now add the implementation to call it in the frontend by adding a fetch
    method in `api-auction.js`, similar to the other fetch methods we've discussed
    for completing API implementations. We will use the fetch method to call the read
    auction API in a React component that will render the retrieved auction details.
    The implementation of this React component is discussed in the next section.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在发送响应之前，我们将移除图像字段，因为图像将通过单独的路由作为文件检索。有了这个后端API就绪，我们现在可以在前端通过在`api-auction.js`中添加一个fetch方法来添加调用它的实现，类似于我们讨论的其他用于完成API实现的fetch方法。我们将使用fetch方法在React组件中调用读取拍卖API，该组件将渲染检索到的拍卖详情。该React组件的实现将在下一节中讨论。
- en: The Auction component
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 拍卖组件
- en: 'We will implement an Auction component to fetch and display the details of
    a single auction to the end user. This view will also have real-time update functionalities
    that will render based on the current state of the auction and on whether the
    user viewing the page is signed in. For example, the following screenshot shows
    how the Auction component renders to a visitor when a given auction has not started
    yet. It only displays the description details of the auction and specifies when
    the auction will start:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将实现一个Auction组件来从后端获取并显示单个拍卖的详细信息给最终用户。此视图还将具有基于拍卖当前状态和查看页面的用户是否已登录的实时更新功能。例如，以下截图显示了当给定拍卖尚未开始时，Auction组件如何渲染给访客。它仅显示拍卖的描述详情并指定拍卖开始的时间：
- en: '![](img/3b1f16e6-a054-48b3-94c3-d170299cc18a.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3b1f16e6-a054-48b3-94c3-d170299cc18a.png)'
- en: The implementation of the `Auction` component will retrieve the auction details
    by calling the read auction API in a `useEffect` hook. This part of the component
    implementation is similar to the `Shop` component we discussed in [Chapter 7](03fd3b4a-b7fd-4b42-ad7e-5bc34b5612b0.xhtml), *Exercising
    MERN Skills with an Online Marketplace*.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '`Auction` 组件的实现将通过调用 `useEffect` 钩子中的读取拍卖 API 来检索拍卖详情。这部分组件实现与我们在第 7 章 [使用在线市场锻炼
    MERN 技能](03fd3b4a-b7fd-4b42-ad7e-5bc34b5612b0.xhtml)中讨论的 `Shop` 组件类似。'
- en: The completed `Auction` component will be accessed in the browser at the `/auction/:auctionId` route,
    which is defined in `MainRouter` as follows.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 完成的 `Auction` 组件将通过浏览器中的 `/auction/:auctionId` 路由访问，该路由在 `MainRouter` 中定义如下。
- en: '`mern-marketplace/client/MainRouter.js`:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/MainRouter.js`:'
- en: '[PRE34]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: This route can be used in any component to link to a specific auction, as we
    did in the auction lists. This link will take the user to the corresponding Auction
    view with the auction details loaded.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 此路由可以用于任何组件来链接到特定的拍卖，就像我们在拍卖列表中所做的那样。此链接将用户带到带有加载的拍卖详情的相应拍卖视图。
- en: In the component view, we will render the auction state by considering the current
    date and the given auction's bidding start and end timings. The code to generate
    these states, which will be shown in the view, can be added as follows.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在组件视图中，我们将通过考虑当前日期和给定拍卖的竞标开始和结束时间来渲染拍卖状态。可以添加以下代码来生成这些状态，这些状态将在视图中显示。
- en: '`mern-marketplace/client/auction/Auction.js`:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/auction/Auction.js`:'
- en: '[PRE35]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: In the preceding code, if the current date is before the `bidStart` date, we
    show a message indicating that the auction has not started yet. If the current
    date is between the `bidStart` and `bidEnd` dates, then the auction is live. If
    the current date is after the `bidEnd` date, then the auction has ended.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，如果当前日期早于 `bidStart` 日期，我们将显示一条消息，表明拍卖尚未开始。如果当前日期在 `bidStart` 和 `bidEnd`
    日期之间，则拍卖正在进行。如果当前日期晚于 `bidEnd` 日期，则拍卖已结束。
- en: The `Auction` component will also conditionally render a timer and a bidding
    section, depending on whether the current user is signed in, and also on the state
    of the auction at the moment. The code to render this part of the view will be
    as follows.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '`Auction` 组件还将根据当前用户是否已登录以及拍卖当前状态，有条件地渲染计时器和竞标部分。渲染这部分视图的代码如下。'
- en: '`mern-marketplace/client/auction/Auction.js`:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/auction/Auction.js`:'
- en: '[PRE36]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: If the current date happens to be after the bid starting time, instead of showing
    the start time, we render the `Timer` component to show the time remaining until
    bidding ends. Then, we show the last bid amount, which will be the first item
    in the auction `bids` array if some bids were already placed. If the current user
    is signed in when the auction is in this state, we also render a `Bidding` component,
    which will allow them to bid and see the bidding history. In the next section,
    we will learn how to implement the Timer component we added in this view to show
    the remaining time for the auction.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 如果当前日期恰好晚于竞标开始时间，我们将显示计时器组件来显示竞标结束前剩余的时间。然后，我们显示最后出价金额，如果已经放置了一些出价，这将是在拍卖 `bids`
    数组中的第一个项目。如果当前用户在拍卖处于此状态时已登录，我们还将渲染一个 `Bidding` 组件，允许他们出价并查看竞标历史。在下一节中，我们将学习如何实现我们在此视图中添加的计时器组件，以显示拍卖剩余时间。
- en: Adding the Timer component
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加计时器组件
- en: 'When the auction is live, we will give the users a real-time update of how
    long they have before bidding ends on this given auction. We will implement a
    `Timer` component and conditionally render it in the `Auction` component to achieve
    this feature. The timer will count down the seconds and show how much time is
    left to the users viewing the live auction. The following screenshot shows what
    the Auction component looks like when it renders a live auction to a user who
    is not signed in yet:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 当拍卖正在进行时，我们将向用户提供关于他们在此特定拍卖中竞标结束前剩余时间的实时更新。我们将实现一个 `Timer` 组件，并在 `Auction` 组件中有条件地渲染它以实现此功能。计时器将倒计时秒数，并显示观看直播拍卖的用户剩余时间。以下截图显示了当
    `Auction` 组件向尚未登录的用户渲染直播拍卖时的外观：
- en: '![](img/c7822370-cdcb-491a-853a-ffc36f126acf.png)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c7822370-cdcb-491a-853a-ffc36f126acf.png)'
- en: The remaining time decreases per second as the user is viewing the live auction.
    We will implement this countdown feature in the `Timer` component, which is added
    to the `Auction` component. The `Auction` component provides it with props containing
    the auction end time value, as well as a function to update the auction view when
    the time ends, as shown in the following code.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户查看实时拍卖时，剩余时间每秒减少。我们将在 `Timer` 组件中实现这个倒计时功能，该组件被添加到 `Auction` 组件中。`Auction`
    组件提供包含拍卖结束时间值的 props，以及一个在时间结束时更新拍卖视图的函数，如下面的代码所示。
- en: '`mern-marketplace/client/auction/Auction.js`:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/auction/Auction.js`:'
- en: '[PRE37]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The `update` function that's provided to the `Timer` component will help set
    the value of the `justEnded` variable from `false` to `true`. This `justEnded`
    value is passed to the `Bidding` component so that it can be used to disable the
    option to place bids when the time ends. The `justEnded` value is initialized
    and the `update` function is defined as follows.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给 `Timer` 组件的 `update` 函数将帮助将 `justEnded` 变量的值从 `false` 设置为 `true`。这个 `justEnded`
    值传递给 `Bidding` 组件，以便在时间结束时禁用下注选项。`justEnded` 值的初始化和 `update` 函数的定义如下。
- en: '`mern-marketplace/client/auction/Auction.js`:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/auction/Auction.js`:'
- en: '[PRE38]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: These props will be used in the `Timer` component to calculate time left and
    to update the view when time is up.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 这些 props 将在 `Timer` 组件中使用，以计算剩余时间并在时间结束时更新视图。
- en: In the `Timer` component definition, we will initialize the `timeLeft` variable
    in the state, using the end time value sent in the props from the `Auction` component,
    as shown in the following code.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Timer` 组件定义中，我们将使用从 `Auction` 组件传入的 props 中的结束时间值初始化 `timeLeft` 变量，如下面的代码所示。
- en: '`mern-marketplace/client/auction/Timer.js`:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/auction/Timer.js`:'
- en: '[PRE39]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: To calculate the time left until the auction ends, we utilize the `calculateTimeLeft`
    method we discussed previously in the *The Auctions component* section of this
    chapter.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 为了计算距离拍卖结束的剩余时间，我们利用本章 *拍卖组件* 部分中讨论过的 `calculateTimeLeft` 方法。
- en: To implement the time countdown functionality,  we will use `setTimeout` in
    a `useEffect` hook in the `Timer` component, as shown in the following code.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现倒计时功能，我们将在 `Timer` 组件的 `useEffect` 钩子中使用 `setTimeout`，如下面的代码所示。
- en: '`mern-marketplace/client/auction/Timer.js`:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/auction/Timer.js`:'
- en: '[PRE40]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: If the time has not ended already, we will use `setTimeout` to update the `timeLeft`
    value after 1 second has passed. This `useEffect` hook will run after every render
    caused by the state update with `setTimeLeft`.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 如果时间还没有结束，我们将使用 `setTimeout` 在 1 秒后更新 `timeLeft` 值。这个 `useEffect` 钩子将在每次由 `setTimeLeft`
    状态更新引起的渲染后运行。
- en: As a result, the `timeLeft` value will keep updating every second until the
    `timeEnd` value is `true`. When the `timeEnd` value does become `true` as the
    time is up, we will execute the `update` function that's sent in the props from
    the `Auctions` component.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`timeLeft` 值将每秒更新，直到 `timeEnd` 值变为 `true`。当 `timeEnd` 值确实变为 `true`，即时间到了，我们将执行从
    `Auctions` 组件传入的 `update` 函数。
- en: To avoid a memory leak and to clean up in the `useEffect` hook, we will use
    `clearTimeout` to stop any pending `setTimeout` calls. To show this updating `timeLeft`
    value, we just need to render it in the view, as shown in the following code.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免内存泄漏并在 `useEffect` 钩子中进行清理，我们将使用 `clearTimeout` 停止任何挂起的 `setTimeout` 调用。为了显示这个更新的
    `timeLeft` 值，我们只需在视图中渲染它，如下面的代码所示。
- en: '`mern-marketplace/client/auction/Timer.js`:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/auction/Timer.js`:'
- en: '[PRE41]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: If there is time left, we render the days, hours, minutes, and seconds remaining
    until the auction ends using the `timeLeft` object. We also indicate the exact
    date and time when the auction ends. If the time is up, we just indicate that
    the auction ended.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 如果还有时间剩余，我们将使用 `timeLeft` 对象渲染距离拍卖结束的剩余天数、小时、分钟和秒。我们还会指出拍卖结束的确切日期和时间。如果时间到了，我们只需指出拍卖已经结束。
- en: In the `Auction` component we've implemented so far, we are able to fetch the
    auction details from the backend and render it along with the state of the auction.
    If an auction is in a live state, we are able to indicate the time left until
    it ends. When an auction is in this live state, users will also be able to place
    bids against the auction and see the bids being placed by other users on the platform
    from within this view in real-time. In the next section, we will discuss how to
    use Socket.IO to integrate this real-time bidding feature for all live auctions
    on the platform.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们迄今为止实现的`Auction`组件中，我们能够从后端获取拍卖详情并将其与拍卖状态一起渲染。如果一个拍卖处于直播状态，我们能够显示剩余时间直到结束。当拍卖处于这种直播状态时，用户也将能够对拍卖进行出价，并实时看到其他用户在平台上的出价。在下一节中，我们将讨论如何使用Socket.IO集成平台所有直播拍卖的实时竞标功能。
- en: Implementing real-time bidding with Socket.IO
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Socket.IO实现实时竞标
- en: Users who are signed in to the marketplace platform will be able to take part
    in live auctions. They will be able to place their bids and get real-time updates
    in the same view while other users on the platform are countering their bids.
    To implement this functionality, we will integrate Socket.IO with our full-stack
    MERN application before implementing the frontend interface to allow users to
    place their bids and see the changing bidding history.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 已登录市场平台的用户将能够参与直播拍卖。他们可以在同一视图中进行出价并获得实时更新，同时看到平台上的其他用户正在对他们的出价进行回应。为了实现这一功能，我们将在实现前端界面以允许用户出价并查看变化的出价历史之前，将Socket.IO集成到我们的全栈MERN应用中。
- en: Integrating Socket.IO
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集成Socket.IO
- en: Socket.IO will allow us to add the real-time bidding feature to auctions in
    the marketplace application. Socket.IO is a JavaScript library with a client-side
    module that runs in the browser and a server-side module that integrates with
    Node.js. Integrating these modules with our MERN-based application will enable
    bidirectional and real-time communication between the clients and the server.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: Socket.IO将允许我们在市场应用中添加实时竞标功能。Socket.IO是一个JavaScript库，包含一个在浏览器中运行的客户端模块和一个与Node.js集成的服务器端模块。将这些模块集成到我们的MERN应用中，将使客户端和服务器之间实现双向和实时通信。
- en: The client-side part of Socket.IO is available as the Node module `socket.io-client`,
    while the server-side part is available as the Node module `socket.io`. You can
    learn more about Socket.IO and try their getting started tutorials at [https://socket.io](https://socket.io).
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: Socket.IO的客户端部分作为Node模块`socket.io-client`提供，而服务器端部分作为Node模块`socket.io`提供。您可以在[https://socket.io](https://socket.io)了解更多关于Socket.IO的信息，并尝试他们的入门教程。
- en: 'Before we can start using `socket.io` in our code, we will install the client
    and server libraries with Yarn by running the following command from the command
    line:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们可以在代码中使用`socket.io`之前，我们将通过在命令行中运行以下命令使用Yarn安装客户端和服务器库：
- en: '[PRE42]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: With the Socket.IO libraries added to the project, we will update our backend
    to integrate Socket.IO with the server code. We need to initialize a new instance
    of `socket.io` using the same HTTP server that we are using for our application.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 将Socket.IO库添加到项目后，我们将更新我们的后端以将Socket.IO集成到服务器代码中。我们需要使用与我们的应用程序相同的HTTP服务器初始化一个新的`socket.io`实例。
- en: In our backend code, we are using Express to start the server. Therefore, we
    will update the code in `server.js` to get a reference to the HTTP server that
    our Express app is using to listen for requests from clients, as shown in the
    following code.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的后端代码中，我们使用Express启动服务器。因此，我们将更新`server.js`中的代码以获取我们的Express应用使用的HTTP服务器引用，如下面的代码所示。
- en: '`mern-marketplace/server/server.js`:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/server.js`:'
- en: '[PRE43]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Then, we will pass the reference for this server to a bidding controller function.
    This `bidding.controller` function will contain the Socket.IO code that's needed
    on the server-side to implement real-time features. The `bidding.controller` function
    will initialize `socket.io` and then listen on the `connection` event for incoming
    socket messages from clients, as shown in the following code.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将把这个服务器的引用传递给一个竞标控制器函数。这个`bidding.controller`函数将包含在服务器端实现实时功能所需的Socket.IO代码。`bidding.controller`函数将初始化`socket.io`，然后监听`connection`事件以接收来自客户端的socket消息，如下面的代码所示。
- en: '`mern-marketplace/server/controllers/bidding.controller.js`:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/controllers/bidding.controller.js`:'
- en: '[PRE44]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: When a new client first connects and then disconnects to the socket connection,
    we will subscribe and unsubscribe the client socket to a given channel. The channel
    will be identified by the auction ID that will be passed in the `data.room` property
    from the client. This way, we will have a different channel or room for each auction.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 当新的客户端首次连接然后断开套接字连接时，我们将订阅和取消订阅客户端套接字到一个给定的频道。该频道将由客户端通过`data.room`属性传递的拍卖ID来识别。这样，我们将为每个拍卖有一个不同的频道或房间。
- en: With this code, the backend is ready to receive communication from clients over
    sockets, and we can now add the Socket.IO integration to our frontend. In the
    frontend, only the auction view – specifically, the bidding section – will be
    using sockets for real-time communication. Therefore, we will only integrate Socket.IO
    in the `Bidding` component that we add to the Auction component in the frontend,
    as shown in the following code.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此代码，后端已准备好接收客户端通过套接字发送的通信，我们现在可以将Socket.IO集成到我们的前端。在前端，只有拍卖视图——特别是投标部分——将使用套接字进行实时通信。因此，我们只将在前端添加到拍卖组件的`Bidding`组件中集成Socket.IO，如下面的代码所示。
- en: '`mern-marketplace/client/auction/Auction.js`:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/auction/Auction.js`:'
- en: '[PRE45]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: The Bidding component takes the `auction` object, the `justEnded` value, and
    an `updateBids` function as props from the Auction component, and uses these in
    the bidding process. To start implementing the Bidding component, we will integrate
    sockets using the Socket.IO client-side library, as shown in the following code.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 投标组件从拍卖组件接收`auction`对象、`justEnded`值和`updateBids`函数作为属性，并在投标过程中使用这些属性。为了开始实现投标组件，我们将使用Socket.IO客户端库集成套接字，如下面的代码所示。
- en: '`mern-marketplace/client/auction/Bidding.js`:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/auction/Bidding.js`:'
- en: '[PRE46]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: In the preceding code, we require the `socket.io-client` library and initialize
    the `socket` for this client. Then, in our `Bidding` component definition, we
    utilize the `useEffect` hook and the initialized `socket` to emit the *auction
    room joining* and *auction room leaving* socket events when the component mounts
    and unmounts, respectively. We pass the current auction's ID as the `data.room` value
    with these emitted socket events.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们引入了`socket.io-client`库并初始化了`socket`为此客户端。然后，在我们的`Bidding`组件定义中，我们使用`useEffect`钩子和初始化的`socket`在组件挂载和卸载时分别发出*auction
    room joining*和*auction room leaving*套接字事件。我们通过这些发出的套接字事件传递当前拍卖的ID作为`data.room`值。
- en: These events will be received by the server socket connection, resulting in
    subscription or unsubscription of the client to the given auction room. Now that
    the clients and the server are able to communicate in real-time over sockets,
    in the next section, we will learn how to use this capability to let users place
    instant bids on the auction.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 这些事件将由服务器套接字连接接收，导致客户端订阅或取消订阅给定的拍卖房间。现在，客户端和服务器能够通过套接字进行实时通信，在下一节中，我们将学习如何使用这种能力让用户对拍卖进行即时投标。
- en: Placing bids
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 放置投标
- en: 'When a user on the platform is signed in and viewing an auction that is currently
    live, they will see an option to place their own bid. This option will be rendered
    within the `Bidding` component, as shown in the following screenshot:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 当平台上的用户登录并查看当前正在进行的拍卖时，他们将看到一个选项来放置自己的投标。此选项将在`Bidding`组件中渲染，如下面的截图所示：
- en: '![](img/c00aa8b9-2ec8-4744-bcae-260ac078a652.png)'
  id: totrans-221
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c00aa8b9-2ec8-4744-bcae-260ac078a652.png)'
- en: To allow users to place their bids, in the following sections, we will add a
    form that lets them enter a value more than the last bid and submit it to the
    server using socket communication. Then, on the server, we will handle this new
    bid that's been sent over the socket so that the changed auction bids can be saved
    in the database and the view can be updated instantly for all connected users
    when the server accepts this bid.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 为了允许用户放置他们的投标，在接下来的章节中，我们将添加一个表单，让他们输入一个高于上一个投标的值，并通过套接字通信将其提交到服务器。然后，在服务器上，我们将处理通过套接字发送的新投标，以便将更改后的拍卖投标保存到数据库中，并在服务器接受此投标时立即更新所有连接用户的视图。
- en: Adding a form to enter a bid
  id: totrans-223
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加投标表单
- en: We will add the form to place a bid for an auction in the `Bidding` component
    that we started building in the previous section. Before we add the form elements
    in the view, we will initialize the `bid` value in the state, add a change handling
    function for the form input, and keep track of the minimum bid amount allowed,
    as shown in the following code.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在上一节开始构建的`Bidding`组件中添加一个用于拍卖竞标的表单。在我们向视图中添加表单元素之前，我们将初始化状态中的`bid`值，为表单输入添加一个变更处理函数，并跟踪允许的最小竞标金额，如下面的代码所示。
- en: '`mern-marketplace/client/auction/Bidding.js`:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/auction/Bidding.js`:'
- en: '[PRE47]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: The minimum bid amount is determined by checking the latest bid placed. If any
    bids were placed, the minimum bid needs to be higher than the latest bid; otherwise,
    it needs to be higher than the starting bid that was set by the auction seller.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 最小竞标金额是通过检查最新放置的竞标来确定的。如果有竞标被放置，最小竞标金额需要高于最新的竞标；否则，它需要高于拍卖卖家设定的起始竞标金额。
- en: The form elements for placing a bid will only render if the current date is
    before the auction end date. We also check if the `justEnded` value is `false` so
    that the form can be hidden when the time ends in real-time as the timer counts
    down to 0\. The form elements will contain an input field, a hint at what minimum
    amount should be entered, and a submit button, which will remain disabled unless
    a valid bid amount is entered. These elements will be added to the `Bidding` component
    view as follows.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 放置竞标的表单元素只有在当前日期早于拍卖结束日期时才会渲染。我们还检查`justEnded`值是否为`false`，以便当计时器倒计时到0时，表单可以实时隐藏。表单元素将包含一个输入字段，提示应输入的最小金额，以及一个提交按钮，除非输入了有效的竞标金额，否则该按钮将保持禁用状态。以下是将这些元素添加到`Bidding`组件视图中的方式。
- en: '`mern-marketplace/client/auction/Bidding.js`:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/auction/Bidding.js`:'
- en: '[PRE48]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'When the user clicks on the submit button, the `placeBid` function will be
    called. In this function, we construct a bid object containing the new bid''s
    details, including the bid amount, bid time, and the bidder''s user reference.
    This new bid is emitted to the server over the socket communication that''s already
    been established for this auction room, as shown in the following code:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击提交按钮时，将调用`placeBid`函数。在这个函数中，我们构建一个包含新竞标详情的竞标对象，包括竞标金额、竞标时间和竞标者的用户引用。这个新的竞标将通过为这个拍卖室已经建立的套接字通信发送到服务器，如下面的代码所示：
- en: '[PRE49]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Once the message has been emitted over the socket, we will empty the input field
    with `setBid('')`. Then, we need to update the bidding controller in the backend
    to receive and handle this new bid message that's been sent from the client. In
    the next section, we will add the socket event handling code to complete this
    process to place a bid.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦消息通过套接字发送出去，我们将使用`setBid('')`清空输入字段。然后，我们需要更新后端中的竞标控制器以接收和处理从客户端发送的这条新的竞标消息。在下一节中，我们将添加套接字事件处理代码以完成放置竞标的整个过程。
- en: Receiving a bid on the server
  id: totrans-234
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务器接收竞标
- en: When a new bid is placed by a user and emitted over a socket connection, it
    will be handled on the server so that it's stored in the corresponding auction
    in the database.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户通过套接字连接放置新的竞标并发出后，它将在服务器上被处理，以便存储在数据库中相应的拍卖中。
- en: In the bidding controller, we will update the socket event handlers in the socket
    connection listener code in order to add a handler for the *new bid* socket message,
    as shown in the following code.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在竞标控制器中，我们将更新套接字连接监听器代码中的套接字事件处理器，以添加一个用于*新竞标*套接字消息的处理程序，如下面的代码所示。
- en: '`mern-marketplace/server/controllers/bidding.controller.js`:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/controllers/bidding.controller.js`:'
- en: '[PRE50]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: In the preceding code, when the socket receives the emitted *new bid* message,
    we use the attached data to update the specified auction with the new bid information
    in a function called `bid`. The bid function is defined as follows.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，当套接字接收到发出的*新竞标*消息时，我们使用附加的数据在名为`bid`的函数中更新指定的拍卖，以包含新的竞标信息。竞标函数定义如下。
- en: '`mern-marketplace/server/controllers/bidding.controller.js`:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/controllers/bidding.controller.js`:'
- en: '[PRE51]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: The bid function takes the new bid details and the auction ID as arguments and
    performs a `findOneAndUpdate` operation on the Auction collection. To find the
    auction to be updated, besides querying with the auction ID, we also ensure that
    the new bid amount is larger than the last bid placed at position `0` of the `bids`
    array in this auction document. If an auction is found that matches the provided
    ID and also meets this condition of the last bid being smaller than the new bid,
    then this auction is updated by pushing the new bid into the first position of
    the `bids` array.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 投标函数接受新的投标详情和拍卖ID作为参数，并在拍卖集合上执行`findOneAndUpdate`操作。为了找到要更新的拍卖，除了使用拍卖ID进行查询外，我们还确保新的投标金额大于此拍卖文档中`bids`数组在位置`0`的最后一个投标。如果找到与提供的ID匹配且满足最后一个投标小于新投标这一条件的拍卖，则通过将新投标推入`bids`数组的第一个位置来更新此拍卖。
- en: After the update to the auction in the database, we emit the *new bid* message
    over the `socket.io` connection to all the clients currently connected to the
    corresponding auction room. On the client-side, we need to capture this message
    in a socket event handler code and update the view with the latest bids. In the
    next section, we will learn how to handle and display this updated list of bids
    for all the clients viewing the live auction.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 在数据库中对拍卖进行更新后，我们通过`socket.io`连接向所有当前连接到相应拍卖房间的客户端发出*新投标*消息。在客户端，我们需要在socket事件处理程序代码中捕获此消息，并使用最新投标更新视图。在下一节中，我们将学习如何处理和显示所有查看实时拍卖的客户端的更新投标列表。
- en: Displaying the changing bidding history
  id: totrans-244
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示变化的投标历史
- en: After a new bid is accepted on the server and stored in the database, the new
    array of bids will be updated in the view for all the clients currently on the
    auctions page. In the following sections, we will extend the `Bidding` component
    so that it handles the updated bids and displays the complete bidding history
    for the given auction.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器接受新的投标并将其存储在数据库后，新的投标数组将在所有当前位于拍卖页面的客户端的视图中更新。在接下来的几节中，我们将扩展`Bidding`组件，使其能够处理更新的投标并显示给定拍卖的完整投标历史。
- en: Updating the view state with a new bid
  id: totrans-246
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用新投标更新视图状态
- en: Once the placed bid has been handled on the server, the updated auction containing
    the modified array of bids is sent to all the clients connected to the auction
    room. To handle this new data on the client-side, we need to update the `Bidding`
    component to add a listener for this specific socket message.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦服务器上处理了放置的投标，包含修改后的投标数组的更新拍卖将被发送到所有连接到拍卖房间的客户端。为了在客户端处理这些新数据，我们需要更新`Bidding`组件以添加对特定socket消息的监听器。
- en: We will use an `useEffect` hook to add this socket listener to the `Bidding`
    component when it loads and renders. We will also remove the listener with `socket.off()`
    in the `useEffect` cleanup when the component unloads. This `useEffect` hook with
    the socket listener for receiving the new bid data will be added as follows.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`useEffect`钩子将此socket监听器添加到`Bidding`组件加载和渲染时。我们还将使用`useEffect`的清理中的`socket.off()`移除监听器。这个带有socket监听器以接收新投标数据的`useEffect`钩子将按以下方式添加。
- en: '`mern-marketplace/client/auction/Bidding.js`:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/auction/Bidding.js`:'
- en: '[PRE52]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'When the new auction with updated bids is received from the server in the socket
    event, we execute the `updateBids` function that was sent as a prop from the `Auction`
    component. The `updateBids` function is defined in the `Auction` component as
    follows:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 当从服务器通过socket事件接收到新的带有更新投标的拍卖时，我们执行作为`Auction`组件属性发送的`updateBids`函数。`updateBids`函数在`Auction`组件中定义如下：
- en: '[PRE53]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: This will update the auction data that was set in the state of the Auction component
    and, as a result, rerender the complete auction view with the updated auction
    data. This view will also include the bidding history table, which we'll discuss
    in the next section.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 这将更新设置在拍卖组件状态中的拍卖数据，并因此使用更新的拍卖数据重新渲染完整的拍卖视图。此视图还将包括投标历史表，我们将在下一节中讨论。
- en: Rendering the bidding history
  id: totrans-254
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 渲染投标历史
- en: 'In the `Bidding` component, we will render a table that displays the details
    of all the bids that were placed for the given auction. This will inform the user
    of the bids that were already placed and are being placed in real-time as they
    are viewing a live auction. The bidding history for an auction will render in
    the view as follows:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Bidding`组件中，我们将渲染一个表格，显示给定拍卖的所有已放置的竞价的详情。这将通知用户已经放置的竞价以及他们正在实时查看直播拍卖时正在放置的竞价。拍卖的竞价历史将在视图中如下渲染：
- en: '![](img/eab51643-f372-448f-886f-02dccfbd046e.png)'
  id: totrans-256
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/eab51643-f372-448f-886f-02dccfbd046e.png)'
- en: 'This bidding history view will basically iterate over the `bids` array for
    the auction and display the bid amount, bid time, and bidder name for each bid
    object that''s found in the array. The code for rendering this table view will
    be added as follows:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 这个竞价历史视图将基本上遍历该拍卖的`bids`数组，并显示每个在数组中找到的竞价对象的竞价金额、竞价时间和竞价者姓名。渲染此表格视图的代码将如下添加：
- en: '[PRE54]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: We added table headers using Material-UI `Grid` components, before iterating
    over the `bids` array to generate the table rows with individual bid details.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用Material-UI `Grid`组件添加了表头，然后在遍历`bids`数组以生成具有单个竞价详情的表格行之前。
- en: When a new bid is placed by any user viewing this auction and the updated auction
    is received in the socket and set to state, this table containing the bidding
    history will update for all its viewers and show the latest bid at the top of
    the table. By doing this, it gives all the users in the auction room a real-time
    update of bidding. With that, we have a complete auction and real-time bidding
    feature integrated with the MERN Marketplace application.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 当任何查看此拍卖的用户提交新的竞价，并且更新的拍卖在socket中接收并设置为状态时，这个包含竞价历史的表格将更新，并显示表格顶部的最新竞价。通过这种方式，它为拍卖室中的所有用户提供了竞价的实时更新。有了这个，我们就将完整的拍卖和实时竞价功能集成到了MERN
    Marketplace应用程序中。
- en: Summary
  id: totrans-261
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we extended the MERN Marketplace application and added an auctioning
    feature with real-time bidding capabilities. We designed an auction model for
    storing auction and bidding details and implemented the full-stack CRUD functionalities
    that allow users to create new auctions, edit and delete auctions, and see different
    lists of auctions, along with individual auctions.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们扩展了MERN Marketplace应用程序，并添加了一个具有实时竞价功能的拍卖特性。我们设计了一个用于存储拍卖和竞价详情的拍卖模型，并实现了全栈CRUD功能，允许用户创建新的拍卖、编辑和删除拍卖，以及查看不同的拍卖列表，包括单个拍卖的详情。
- en: We added an auction view representing a single auction where users can watch
    and participate in the auction. In the view, we calculated and rendered the current
    state of the given auction, along with a countdown timer for live auctions. While
    implementing this timer that counts down seconds, we learned how to use `setTimeout`
    in a React component with the `useEffect` hook.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加了一个表示单个拍卖的拍卖视图，用户可以在此视图中观看并参与拍卖。在视图中，我们计算并渲染了给定拍卖的当前状态，以及直播拍卖的倒计时计时器。在实现这个倒计时秒数计时器时，我们学习了如何在React组件中使用`setTimeout`和`useEffect`钩子。
- en: For each auction, we implemented real-time bidding capabilities using Socket.IO.
    We discussed how to integrate Socket.IO on both the client-side and the server-side
    of the application to establish real-time and bidirectional communication between
    clients and servers. With these approaches for extending the MERN stack to incorporate
    real-time communication functionalities, you can implement even more exciting
    real-time features using sockets in your own full-stack applications.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个拍卖，我们使用了Socket.IO实现了实时竞价功能。我们讨论了如何在应用程序的客户端和服务器端集成Socket.IO，以建立客户端和服务器之间的实时双向通信。通过这些方法扩展MERN堆栈以包含实时通信功能，你可以在自己的全栈应用程序中实现更多令人兴奋的实时功能，使用socket进行。
- en: Using the experiences you've gained here building out the different features
    for the MERN Marketplace application, you can also grow the auctioning feature
    that was covered in this chapter and integrate it with the existing order management
    and payment processing functionalities in this application.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在这里构建MERN Marketplace应用程序的不同功能所获得的经验，你还可以扩展本章中涵盖的拍卖特性，并将其与该应用程序中现有的订单管理和支付处理功能集成。
- en: In the next chapter, we will expand our options with the MERN stack technologies
    by building an expense tracking application with data visualization features by
    extending the MERN skeleton.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将通过扩展MERN骨架构建一个带有数据可视化功能的支出跟踪应用程序，以扩展我们的MERN堆栈技术选项。
