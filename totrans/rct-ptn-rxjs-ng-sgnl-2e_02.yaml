- en: '2'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Walking through Our Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we are one step closer to diving into reactive patterns, but before we
    do, let’s present the app that we are going to build throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: We will start by explaining the technical requirements, followed by a breakdown
    of the app’s interfaces so that you know its user story. Furthermore, we will
    showcase an overview of the application architecture and a visual representation
    of the component tree. By the end of this chapter, we will have all the required
    pieces in place to start implementing our application.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Breaking down our app’s interfaces
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reviewing our app’s architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reviewing our app’s components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Though we are not creating the project in this chapter, you should know the
    requirements for it before going ahead.
  prefs: []
  type: TYPE_NORMAL
- en: We are going to use **Angular** **18** for our frontend, so please make sure
    you follow the prerequisites at [https://angular.dev/tools/cli/setup-local](https://angular.dev/tools/cli/setup-local).
    The prerequisites include the environment setup and the technologies needed in
    order to install and use Angular.
  prefs: []
  type: TYPE_NORMAL
- en: We are also going to be using **Bootstrap** version 5.0.0 ([https://getbootstrap.com/](https://getbootstrap.com/)),
    a toolkit for developing responsive web apps, and version 7.8.1 of **RxJS**.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will also be able to find all of the code to create this project in the
    book’s GitHub repository: [https://github.com/PacktPublishing/Reactive-Patterns-with-RxJS-and-Angular-Signals-Second-Edition](https://github.com/PacktPublishing/Reactive-Patterns-with-RxJS-and-Angular-Signals-Second-Edition).'
  prefs: []
  type: TYPE_NORMAL
- en: Breaking down our app’s interfaces
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As a food junkie, I want the application to be like a recipe book, allowing
    users and home cooks to browse and share delicious food recipes. The main aim
    of the app is to provide inspiration for meals as well as help users do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Share their recipes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pin favorite recipes to easily find them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Distinguish top-rated recipes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Filter out recipes according to some criteria
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The app is composed of six interfaces. Let’s tackle these interfaces one by
    one.
  prefs: []
  type: TYPE_NORMAL
- en: View one – the landing page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first page contains a list of available recipes, sorted according to popularity:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.1 – The landing page view](img/B21180_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.1 – The landing page view
  prefs: []
  type: TYPE_NORMAL
- en: 'In this view, users have the possibility to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Quickly search for a recipe by setting filters according to some criteria (on
    the left-hand side)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clear the list of filters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: View the most popular recipes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rate recipes by clicking on the number of stars
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a recipe to their favorites by clicking on the heart icon
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See a recipe’s details by clicking on it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: View the total number of recipes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: View two – the New Recipe interface
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This page contains a form to create a new recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.2 – The New Recipe view](img/B21180_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.2 – The New Recipe view
  prefs: []
  type: TYPE_NORMAL
- en: 'In this view, users can create a new recipe by clicking on the **New Recipe**
    menu item located at the top right of the page. A form containing details of the
    recipe will be opened to fill out the information and save it. These details include
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Title**: The title of the recipe'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ingredients**: The ingredients required to prepare the recipe'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Image Url**: A good image of the meal prepared'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cooking time**: The time required to cook the meal'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Yield**: The number of people that can be served by this meal'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Prep time**: The time required to prepare the meal'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tags**: Key tags describing the recipe'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Steps**: The steps required to prepare and cook the meal'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: View three – the My Recipes interface
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This page contains a list of recipes created by the user. This screen is reachable
    by clicking on the **My Recipes** menu item located at the top right. Users can
    edit and remove recipes by clicking on the edit and delete icons, respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.3 – The My Recipes view](img/B21180_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.3 – The My Recipes view
  prefs: []
  type: TYPE_NORMAL
- en: View four – the My Favourites interface
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This page contains a list of the user’s favorite recipes, reachable by clicking
    on the **My Favourites** menu item located at the top right:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.4 – The My Favourites view](img/B21180_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.4 – The My Favourites view
  prefs: []
  type: TYPE_NORMAL
- en: View five – the Modify Recipe interface
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While the **New Recipe** interface allows the user to create a new recipe, the
    **Modify Recipe** interface allows the user to edit an existing recipe. This page
    is reachable by clicking the **Edit** button next to each button on the **My Recipes**
    interface, and looks just like *Figure 2**.2*.
  prefs: []
  type: TYPE_NORMAL
- en: View six – the Recipe Details interface
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This page contains all the details of the selected recipe. This screen is reachable
    from the landing page after clicking on a displayed recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.5 – The Recipe Details view](img/B21180_02_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.5 – The Recipe Details view
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have detailed our application’s interfaces, let’s have a look at
    the app’s architecture.
  prefs: []
  type: TYPE_NORMAL
- en: Reviewing our app’s architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The frontend layer of the recipe app will be implemented in Angular 18 and will
    communicate with a RESTful backend based on Node.js.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'Aspects related to the backend are not the subject of this book and will not
    be detailed. You can find a ready-to-use fake backend, named `recipes-book-api`,
    in the GitHub repository: [https://github.com/PacktPublishing/Reactive-Patterns-with-RxJS-for-Angular-17-2nd-Edition](https://github.com/PacktPublishing/Reactive-Patterns-with-RxJS-for-Angular-17-2nd-Edition).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The frontend of the recipe app is pluggable to any RESTful backend. Therefore,
    you can use pretty much any other technology for the backend. All communications
    will be performed through the HttpClient module and will request REST controllers
    in the backend:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.6 – The book of recipes architecture](img/B21180_02_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.6 – The book of recipes architecture
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have the big picture of our target application, let’s break down
    the different Angular components of our app.
  prefs: []
  type: TYPE_NORMAL
- en: Reviewing our app’s components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'An Angular application has a tree structure consisting of all the components
    we create. In the following diagram, you will find the component tree of our recipe
    app, which is important for understanding the anatomy of the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.7 – Components overview](img/B21180_02_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.7 – Components overview
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s break down the components:'
  prefs: []
  type: TYPE_NORMAL
- en: '`AppComponent`: The parent component of the app'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HeaderComponent`: The component representing the header of the app that contains
    the user space, the menu, and the logo'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`HomeComponent`: The component representing the landing page that contains
    `RecipeFilterComponent` and `RecipesListComponent`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`RecipeFilterComponent`: The component representing the filter zone that contains
    the criteria fields and the `RecipesListComponent`: The component containing a
    list of recipes'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`RecipesDetailsComponent`: The component containing the details of one recipe'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`RecipesCreationComponent`: The component containing a form to create a recipe
    with all the required fields'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You now have a better understanding of the components that will make up our
    app.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we explained the features of the recipe application that we
    will be working on, as well as the look and feel of the UIs. We also shed light
    on the app’s architecture and the components that will make it up.
  prefs: []
  type: TYPE_NORMAL
- en: Now that all those aspects are clear, let’s explore our first reactive pattern
    together, which we will cover in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Part 2: A Trip into Reactive Patterns'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this part, you will learn the most used reactive patterns in different real-world
    scenarios such as fetching data from a backend API, handling server errors, filtering
    data, and providing autocompleted search results in a dropdown list. Every reactive
    pattern will be endorsed by an example involving our recipes app.
  prefs: []
  type: TYPE_NORMAL
- en: You will also learn the best practices and pitfalls to avoid and dive into the
    latest Angular features, such as standalone components and the new built-in control
    flow syntax.
  prefs: []
  type: TYPE_NORMAL
- en: 'This part includes the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 3*](B21180_03.xhtml#_idTextAnchor047), *Fetching Data as Streams*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 4*](B21180_04.xhtml#_idTextAnchor071), *Handling Errors Reactively*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B21180_05.xhtml#_idTextAnchor083), *Combining Streams*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B21180_06.xhtml#_idTextAnchor097), *Transforming Streams*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 7*](B21180_07.xhtml#_idTextAnchor107), *Sharing Data between Angular
    Components*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
