["```js\ninterface HTMLTemplateElement : HTMLElement {\n  readonly attribute DocumentFragment content;\n};\n```", "```js\n<!DOCTYPE html>\n<html>\n<head lang=\"en\">\n    <meta charset=\"UTF-8\">\n    <title>\n        Web Component: template support\n    </title>\n</head>\n<body>\n<h1 id=\"message\"></h1>\n<script>\n var isTemplateSupported = function () {\n var template = document.createElement(\"template\");\n return 'content' in template;\n };\n var isSupported = isTemplateSupported(),\n message = document.getElementById(\"message\");\n if (isSupported) {\n message.innerHTML = \"Template element is supported by the browser.\";\n } else {\n message.innerHTML = \"Template element is not supported by the browser.\";\n }\n</script>\n</body>\n</html>\n```", "```js\n<!DOCTYPE html>\n<html>\n<head lang=\"en\">\n    <meta charset=\"UTF-8\">\n    <title>\n        Web Component: A inert template content example.\n    </title>\n</head>\n<body>\n<div id=\"message\"></div>\n<template id=\"aTemplate\">\n <img id=\"profileImage\" src=\"img/c6e6c57a2173fcbf2afdd5fe6786e92f. png\">\n <script>\n alert(\"This is a script.\");\n </script>\n</template>\n<script>\n    (function(){\n        var imageElement = document.getElementById(\"profileImage\"),\n            messageElement = document.getElementById(\"message\");\n        messageElement.innerHTML = \"IMG element \"+imageElement;\n    })();\n</script>\n</body>\n</html>\n```", "```js\n<Node> <target node>.cloneNode(<Boolean parameter>)\n\n```", "```js\n<!DOCTYPE html>\n<html>\n<head lang=\"en\">\n    <meta charset=\"UTF-8\">\n    <title>\n        Web Component: Activating template using cloneNode method\n    </title>\n</head>\n<body>\n<div id=\"container\"></div>\n<template id=\"aTemplate\">\n <h1>Template is activated using cloneNode method.</h1>\n</template>\n<script>\n var aTemplate = document.querySelector(\"#aTemplate\"),\n        container = document.getElementById(\"container\"),\n        templateContent = aTemplate.content,\n        activeContent = templateContent.cloneNode(true);\n    container.appendChild(activeContent);\n</script>\n</body>\n</html>\n```", "```js\n<Node> document.importNode(<target node>,<Boolean parameter>)\n\n```", "```js\n<!DOCTYPE html>\n<html>\n<head lang=\"en\">\n    <meta charset=\"UTF-8\">\n    <title>\n        Web Component: Activating template using importNode method\n    </title>\n</head>\n<body>\n<div id=\"container\"></div>\n<template id=\"aTemplate\">\n <h1>Template is activated using importNode method.</h1>\n</template>\n<script>\n    var aTemplate = document.querySelector(\"#aTemplate\"),\n        container = document.getElementById(\"container\"),\n        templateContent = aTemplate.content,\n        activeContent = document.importNode(templateContent, true);\n    container.appendChild(activeContent);\n</script>\n</body>\n</html>\n```", "```js\n<link rel=\"import\" href=\"fileName.html\">\n\n```", "```js\npartial interface LinkImport {\n    readonly attribute Document? import;\n};\nHTMLLinkElement implements LinkImport;\n```", "```js\n<!DOCTYPE html>\n<html>\n<head lang=\"en\">\n    <meta charset=\"UTF-8\">\n    <title>\n        Web Component: HTML import support\n    </title>\n</head>\n<body>\n<h1 id=\"message\"></h1>\n<script>\n var isImportSupported = function () {\n var link = document.createElement(\"link\");\n return 'import' in link;\n };\n    var isSupported = isImportSupported(),\n            message = document.getElementById(\"message\");\n    if (isSupported) {\n        message.innerHTML = \"Import is supported by the browser.\";\n    } else {\n        message.innerHTML = \"Import is not supported by the browser.\";\n    }\n</script>\n</body>\n</html>\n```", "```js\n<h1>\n      This is from another HTML file document.\n</h1>\n```", "```js\n<!DOCTYPE html>\n<html>\n<head lang=\"en\">\n    <link rel=\"import\" href=\"message.html\">\n</head>\n<body>\n<script>\n    (function(){\n        var externalDocument = document.querySelector('link[rel=\"import\"]').import;\n            headerElement = externalDocument.querySelector('h1')\n document.body.appendChild(headerElement.cloneNode(true));\n    })();\n</script>\n</body>\n</html>\n```", "```js\n<!DOCTYPE html>\n<html>\n<head lang=\"en\">\n    <script async>\n        function handleSuccess(e) {\n            //import load Successful\n var targetLink = e.target,\n externalDocument = targetLink.import;\n headerElement = externalDocument.querySelector('h1'),\n clonedHeaderElement = headerElement.cloneNode(true);\n document.body.appendChild(clonedHeaderElement);\n        }\n        function handleError(e) {\n            //Error in load\n            alert(\"error in import\");\n        }\n    </script>\n    <link rel=\"import\" href=\"message.html\" \n          onload=\"handleSuccess(event)\"\n          onerror=\"handleError(event)\">\n</head>\n<body>\n</body>\n</html>\n```", "```js\n<!DOCTYPE html>\n<html>\n<head lang=\"en\">\n    <meta charset=\"UTF-8\">\n    <title>\n        Web Component: Shadow DOM Feature detection\n    </title>\n</head>\n<body>\n<h1 id=\"message\"></h1>\n<script>\n    var isShadowDOMSupported = function () {\n return \"createShadowRoot\" in document.body;\n };\n    var isSupported = isShadowDOMSupported(),\n        message = document.getElementById(\"message\");\n    if (isSupported) {\n        message.innerHTML = \"Shadow DOM is supported by the browser.\";\n    } else {\n        message.innerHTML = \"Shadow DOM is not supported by the browser.\";\n    }\n</script>\n</body>\n</html>\n```", "```js\ninterface ShadowRoot : DocumentFragment {\n    HTMLElement getElementById(DOMString elementId);\n    NodeList getElementsByClassName(DOMString className);\n    NodeList getElementsByTagName(DOMString tagName);\n    NodeList getElementsByTagNameNS(DOMString? namespace, DOMString localName);\n    Selection? getSelection();\n    Element? elementFromPoint(double x, double y);\n    readonly attribute Element? activeElement;\n    readonly attribute Element host;\n    readonly attribute ShadowRoot? olderShadowRoot;\n    attribute DOMString innerHTML;\n    readonly attribute StyleSheetList styleSheets;\n};\n```", "```js\n<!DOCTYPE html>\n<html>\n<head lang=\"en\">\n    <meta charset=\"UTF-8\">\n    <title>Shadow Root: Method & Properties example</title>\n</head>\n<body>\n    <div id=\"aShadowHost\"></div>\n    <template id=\"selectorTemplate\">\n        <style>\n            :host input{\n                background: lightyellow;\n            }\n            :host .labelClass{\n                color: blue;\n            }\n        </style>\n        <form>\n            <label for=\"nameElement\" class=\"labelClass\">Name</label>\n            <input type=\"text\" id=\"nameElement\"\n                   placeholder=\"Enter your name\"\n                   value=\"Sandeep\" autofocus>\n        </form>\n </template>\n    <script>\n     (function(){\n         var aShadowHost = document.getElementById(\"aShadowHost\"),\n             shadowRoot1 = aShadowHost.createShadowRoot(),\n             shadowRoot2 = aShadowHost.createShadowRoot(),\n             templateContent = document.querySelector('#selectorTemplate').content,\n             templateNodes = document.importNode(templateContent, true);\n         shadowRoot1.innerText =\"inside shadowRoot1\";\n         shadowRoot2.appendChild(templateNodes);\n         shadowRoot2.getElementById(\"nameElement\").select();\n         //Shadow Root Methods\n         console.log(\"getElementById: \",shadowRoot2.getElementById(\"nameElement\"));\n         console.log(\"getElementsByClassName: \",shadowRoot2.getElementsByClassName(\"labelClass\"));\n         console.log(\"getElementsByTagName: \",shadowRoot2.getElementsByTagName(\"label\"));\n         console.log(\"getElementsByTagNameNS: \",shadowRoot2.getElementsByTagNameNS(\"*\",\"label\"));\n         console.log(\"getSelection() Method: \",shadowRoot2.getSelection());\n         console.log(\"elementFromPoint: \",shadowRoot2.elementFromPoint(8,9));\n    //Shadow Root Properties\n         console.log(\"activeElement: \",shadowRoot2.activeElement);\n         console.log(\"host: \",shadowRoot2.host);\n         console.log(\"olderShadowRoot: \",shadowRoot2.olderShadowRoot);\nconsole.log(\"styleSheets: \",shadowRoot2.styleSheets);\n         console.log(\"innerHTML: \",shadowRoot2.innerHTML);\n    })();\n    </script>\n</body>\n</html>\n```", "```js\n<!DOCTYPE html>\n<html>\n<head lang=\"en\">\n    <meta charset=\"UTF-8\">\n    <title>Web Component: custom element support</title>\n</head>\n<body>\n<h1 id=\"message\"></h1>\n<script>\n    var isCustomElementSupported = function () {\n return 'registerElement' in document;\n };\n    var isSupported = isCustomElementSupported(),\n            message = document.getElementById(\"message\");\n    if (isSupported) {\n        message.innerHTML = \"Custom element is supported by the browser.\";\n    } else {\n        message.innerHTML = \"Custom element is not supported by the browser.\";\n    }\n</script>\n</body>\n</html>\n```", "```js\nObject.create(<target prototype> [, propertiesObject]);\n```", "```js\nvar objectPrototype = Object.create(HTMLElement.prototype);\n```", "```js\nObject.defineProperty(<targetObject>, <propertyName>, <propertySettings>);\nObject.defineProperties(<targetObject>, <properties>);\n```", "```js\nvar newObject = Object.create(HTMLElement.prototype);\nObject.defineProperty(newObject, 'title', {\n writable : true\n});\n\n```", "```js\nvar newObject = Object.create(HTMLElement.prototype);\nObject.defineProperties(newObject,  {\n title:{\n writable: true\n },\n country:{\n writable: false,\n value: \"India\"\n }\n});\n\n```", "```js\nvar objectPrototype = Object.create(HTMLElement.prototype);\nobjectPrototype.createdCallback=function(){\n console.log(\"Instance is created\");\n};\n```", "```js\nvar constructor = document.registerElement(<tag-name>,settings);\n```", "```js\nvar objectPrototype = Object.create(HTMLElement.prototype),\n    welcomeElement = document.registerElement(\"welcome-message\",{\n        prototype: objectPrototype\n});\n\n```", "```js\nvar objectPrototype = Object.create(HTMLElement.prototype),\n    italicElement = document.registerElement(\"italic-message\",{\n        prototype: objectPrototype,\n        extends:'i'\n});\n```", "```js\n<welcome-message is=\"i\">\n    Hello world\n</welcome-message>\n```", "```js\n<!DOCTYPE html>\n<html>\n<head lang=\"en\">\n    <meta charset=\"UTF-8\">\n    <title>Web Component: custom element example</title>\n    <script>\n        var objectPrototype = Object.create(HTMLElement.prototype);\n Object.defineProperty(objectPrototype, 'title', {\n writable : true\n });\n objectPrototype.createdCallback=function(){\n this.innerText=this.title;\n };\n var  myNameElement = document.registerElement(\"my-name\",{\n prototype:objectPrototype\n });\n </script>\n</head>\n<body>\n    <my-name title=\"Welcome to custom element 1\"></my-name>\n <br>\n <my-name title=\"Welcome to custom element 2\"></my-name>\n</body>\n</html>\n```", "```js\n<!DOCTYPE html>\n<html>\n<head lang=\"en\">\n    <meta charset=\"UTF-8\">\n    <title>Web Component: content insertion point with select attribute example</title>\n    <template id=\"selectorTemplate\">\n        <style>\n            :host b{\n                margin: 0px 10px;\n            }\n            :host ::content b.fruit{\n                color:green;\n            }\n            :host ::content b.flower{\n                color:orange;\n            }\n        </style>\n        <h1>\n Fruits <content select=\"b.fruit\"></content>.\n </h1>\n <h1>\n Flowers <content select=\"b.flower\"></content>.\n </h1>\n    </template>\n    <script>\n        var objectPrototype = Object.create(HTMLElement.prototype);\n        objectPrototype.createdCallback=function(){\n            var shadow = this.createShadowRoot(),\n                templateContent = document.querySelector('#selectorTemplate').content,\n                templateNodes = document.importNode(templateContent, true);\n            shadow.appendChild(templateNodes);\n        };\n        var myNameElement = document.registerElement(\"selector- component\",{\n            prototype: objectPrototype\n        });\n    </script>\n</head>\n<body>\n <selector-component>\n <b class=\"fruit\">Apple </b>\n <b class=\"flower\">Rose </b>\n <b class=\"fruit\">Orange </b>\n <b class=\"fruit\">Banana </b>\n <b class=\"flower\">Lotus </b>\n <b class=\"fruit\">Grapes </b>\n <b class=\"flower\">Jasmine </b>\n </selector-component>\n</body>\n</html>\n```", "```js\n<!DOCTYPE html>\n<html>\n<head lang=\"en\">\n    <meta charset=\"UTF-8\">\n    <title>>Web Component: shadow insertion point example</title>\n</head>\n<body>\n    <div id=\"aShadowHost\"></div>\n    <template id=\"shadow1Template\">\n        <button>Shadow Root 1 Button</button>\n    </template>\n    <template id=\"shadow2Template\">\n <fieldset>\n <legend>Shadow Root 2</legend>\n <shadow></shadow>\n </fieldset>\n    </template>\n    <script>\n        //Old shadow root\n        var aShadowHost = document.getElementById(\"aShadowHost\"),\n            aShadowRoot1 = aShadowHost.createShadowRoot();\n            templateContent = document.querySelector('#shadow1Template').content,\n            templateNodes = document.importNode(templateContent, true);\n        aShadowRoot1.appendChild(templateNodes);\n        //new shadow root with insertion point for older shadow root\n        var aShadowRoot2 = aShadowHost.createShadowRoot();\n        templateContent = document.querySelector('#shadow2Template').content,\n        templateNodes = document.importNode(templateContent, true);\n        aShadowRoot2.appendChild(templateNodes);\n    </script>\n</body>\n</html>\n```", "```js\n    header-message:unresolved:after {\n       content: 'Registering Element...';\n       color: red;\n    }\n    ```", "```js\n    :host{\n       text-transform: uppercase;\n    }\n    ```", "```js\n    :host ::shadow h1{\n       color: orange;\n    }\n    ```", "```js\n    :host ::content b{\n        color: blue;\n    }\n    ```", "```js\n<!DOCTYPE html>\n<html>\n<head lang=\"en\">\n    <meta charset=\"UTF-8\">\n    <title>Web Component: Unresolved pseudo selector</title>\n    <style>\n        header-element:unresolved{\n visibility: hidden;\n }\n header-element:unresolved:after {\n content: 'Registering Element...';\n color: red;\n visibility: visible;\n }\n    </style>\n    <template id=\"headerTemplate\">\n        <style>\n            :host {\n text-transform: uppercase;\n }\n :host::shadow h1{\n color:orange;\n }\n :host ::content b{\n font-style: italic;\n color:blue;\n }\n        </style>\n        <h1>Hello <content></content></h1>\n    </template>\n    <script>\n        (function(){\n            var objectPrototype = Object.create(HTMLElement.prototype);\n            objectPrototype.createdCallback=function(){\n                var shadow = this.createShadowRoot(),\n                    templateContent = document.querySelector('#headerTemplate').content,\n                    templateNodes = document.importNode(templateContent, true);\n                shadow.appendChild(templateNodes);\n            };\n            window.setTimeout(function(){\n document.registerElement(\"header-element\",{\n prototype:objectPrototype\n });\n }, 3000);\n        })();\n    </script>\n</head>\n<body>\n    <header-element>\n <b>Web Component</b>\n </header-element>\n</body>\n</html>\n```", "```js\n<template id=\"clockTemplate\">\n    <style>\n        :host::shadow .clock {\n            display: inline-flex;\n            justify-content: space-around;\n            background: white;\n            font-size: 8rem;\n            box-shadow: 2px 2px 4px -1px grey;\n            border: 1px solid green;\n            font-family: Helvetica, sans-serif;\n            width: 100%;\n        }\n        :host::shadow .clock .hour,\n :host::shadow .clock .minute,\n :host::shadow .clock .second {\n            color: orange;\n            padding: 1.5rem;\n            text-shadow: 0px 2px black;\n        }\n    </style>\n    <div class=\"clock\">\n <div class=\"hour\">HH</div>\n <div class=\"minute\">MM</div>\n <div class=\"second\">SS</div>\n </div>\n</template>\n\n```", "```js\n<script>\n    (function() {\n        var selfDocument = document.currentScript.ownerDocument,\n            objectPrototype = Object.create(HTMLElement.prototype);\n        objectPrototype.createdCallback = function() {\n            var shadow = this.createShadowRoot(),\n                templateContent = selfDocument.querySelector('#clockTemplate').content,\n                templateNodes = document.importNode(templateContent, true),\n                hourElement = null,\n                minuteElement = null,\n                secondElement = null;\n            shadow.appendChild(templateNodes);\n            hourElement = shadow.querySelector('.hour'),\n                    minuteElement = shadow.querySelector('.minute'),\n                    secondElement = shadow.querySelector('.second');\n            window.setInterval(function() {\n                var date = new Date();\n                hourElement.innerText = date.getHours();\n                minuteElement.innerText = date.getMinutes();\n                secondElement.innerText = date.getSeconds();\n            }, 1000);\n        };\n        var digitalClockElement = document.registerElement(\"digital-clock\", {\n prototype: objectPrototype\n });\n    })();\n</script>\n```", "```js\n<!DOCTYPE html>\n<html>\n<head lang=\"en\">\n    <meta charset=\"UTF-8\">\n    <title>Web Component : digital clock element</title>\n    <link rel=\"import\" href=\"clock-element.html\">\n</head>\n<body>\n    <digital-clock></digital-clock>\n</body>\n</html>\n```", "```js\nlifecycle:{\n  created: function(){\n    // code for created state\n  },\n  inserted: function(){\n    // code for inserted state\n  },\n  removed: function(){\n    // code for removed state\n  },\n  attributeChanged: function(){\n    // code for attributeChanged state\n  }\n}\n```", "```js\nxtag.register('<element-name>', {\n    lifecycle: {\n        created: function() {\n            // code for created state\n        },\n        inserted: function() {\n            // code for inserted state\n        },\n        removed: function() {\n            // code for removed state\n        },\n        attributeChanged: function() {\n            // code for attributeChanged state\n        }\n    },\n    accessors: { \n<property name> : {\n            attribute: {\n                //type and value of the property\n            }\n        }\n    },\n    methods: { \n<method name> : function() {\n            //Code for the method\n        }\n    },\n    events: {\n        '<event type>:delegate(<element>)': function(e) {\n            //Code for event handler\n        }\n    }\n});\n```", "```js\n<!DOCTYPE html>\n<html>\n<head lang=\"en\">\n  <meta charset=\"UTF-8\">\n  <title>Web Component: xTag custom element support</title>\n  <script src=\"x-tag-components.js\"></script>\n  <script>\n (function() {\n xtag.register('italic-string', {\n lifecycle: {\n created: function() {\n this.innerHTML = \"<i style='color:\" + this.textColor + \"'>\" + this.innerHTML + \"</i>\";\n }\n },\n accessors: {\n textColor: {\n attribute: {object: this.textColor}\n }\n },\n methods: {\n changeToRed: function() {\n var italicElement = this.querySelector(\"i\");\n italicElement.style.color = \"red\";\n }\n },\n events: {\n 'click:delegate(i)': function(e) {\n console.log(\"click event is fired.\");\n }\n }\n });})();\n  </script>\n</head>\n<body>\n  <italic-string id=\"iStringComponent\" textColor=\"blue\">\n Click Me\n </italic-string><br>\n <button onclick=\"doColorRed()\">Make Red</button>\n  <script>\n var doColorRed = function() {\n var italicStringElement = document.getElementById(\"iStringComponent\");\n italicStringElement.changeToRed();\n }\n  </script>\n</body>\n</html>\n```"]