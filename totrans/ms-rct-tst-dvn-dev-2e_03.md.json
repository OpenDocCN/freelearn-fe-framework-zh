["```js\nlet container;\nbeforeEach(() => {\n  container = document.createElement(\"div\");\n  document.body.replaceChildren(container);\n});\n```", "```js\n    export let container;\n    export const initializeReactContainer = () => {\n      container = document.createElement(\"div\");\n      document.body.replaceChildren(container);\n    }\n    ```", "```js\n    import {\n      initializeReactContainer,\n      container,\n    } from \"./reactTestExtensions\";\n    ```", "```js\n    beforeEach(() => {\n      initializeReactContainer();\n    });\n    ```", "```js\n    export const render = (component) =>\n      act(() => \n        ReactDOM.createRoot(container).render(component)\n      );\n    ```", "```js\n    import ReactDOM from \"react-dom/client\";\n    import { act } from \"react-dom/test-utils\";\n    ```", "```js\n    import {\n      initializeReactContainer,\n      render,\n    } from \"./reactTestExtensions\";\n    ```", "```js\n    export const click = (element) =>\n      act(() => element.click());\n    ```", "```js\n    import {\n      initializeReactContainer,\n      container,\n      render,\n      click,\n    } from \"./reactTestExtensions\";\n    ```", "```js\n    click(button);\n    ```", "```js\nexpect(appointmentTable()).not.toBeNull();\n```", "```js\nexpect(appointmentTable().textContent).toContain(\"Ashley\");\n```", "```js\nexpect(appointmentTable()).toContainText(\"Ashley\");\n```", "```js\n    import { toContainText } from \"./toContainText\";\n    describe(\"toContainText matcher\", () => {\n      it(\"returns pass is true when text is found in the given DOM element\", () => {\n        const domElement = {\n          textContent: \"text to find\"\n        };\n        const result = toContainText(\n          domElement,\n          \"text to find\"\n        );\n        expect(result.pass).toBe(true);\n      });\n    });\n    ```", "```js\n    export const toContainText = (\n      received,\n      expectedText\n    ) => ({\n      pass: true\n    });\n    ```", "```js\n    it(\"return pass is false when the text is not found in the given DOM element\", () => {\n      const domElement = { textContent: \"\" };\n      const result = toContainText(\n        domElement,\n        \"text to find\"\n      );\n      expect(result.pass).toBe(false);\n    });\n    ```", "```js\n    export const toContainText = (\n      received,\n      expectedText\n    ) => ({\n      pass: received.textContent.includes(expectedText)\n    });\n    ```", "```js\n    it(\"returns a message that contains the source line if no match\", () => {\n      const domElement = { textContent: \"\" };\n      const result = toContainText(\n        domElement,\n        \"text to find\"\n      );\n      expect(\n        stripTerminalColor(result.message())\n      ).toContain(\n        `expect(element).toContainText(\"text to find\")`\n      );\n    });\n    ```", "```js\n    const stripTerminalColor = (text) =>\n        text.replace(/\\x1B\\[\\d+m/g, \"\");\n    ```", "```js\n    import {\n      matcherHint,\n      printExpected,\n    } from \"jest-matcher-utils\";\n    export const toContainText = (\n      received,\n      expectedText\n    ) => {\n      const pass = \n        received.textContent.includes(expectedText);\n      const message = () =>\n        matcherHint(\n          \"toContainText\",\n          \"element\",\n          printExpected(expectedText),\n          { }\n        );\n      return { pass, message };\n    };\n    ```", "```js\n    it(\"returns a message that contains the source line if negated match\", () => {\n      const domElement = { textContent: \"text to find\" };\n      const result = toContainText(\n        domElement,\n        \"text to find\"\n      );\n      expect(\n        stripTerminalColor(result.message())\n      ).toContain(\n        `expect(container).not.toContainText(\"text to find\")`\n      );\n    });\n    ```", "```js\n    ...\n    matcherHint(\n      \"toContainText\",\n      \"element\",\n      printExpected(expectedText),\n      { isNot: pass }\n    );\n    ...\n    ```", "```js\n    it(\"returns a message that contains the actual text\", () => {\n      const domElement = { textContent: \"text to find\" };\n      const result = toContainText(\n        domElement,\n        \"text to find\"\n      );\n      expect(\n        stripTerminalColor(result.message())\n      ).toContain(`Actual text: \"text to find\"`);\n    });\n    ```", "```js\n    import {\n      matcherHint,\n      printExpected,\n      printReceived,\n    } from \"jest-matcher-utils\";\n    export const toContainText = (\n      received,\n      expectedText\n    ) => {\n      const pass = \n        received.textContent.includes(expectedText);\n      const sourceHint = () =>\n        matcherHint(\n          \"toContainText\",\n          \"element\",\n          printExpected(expectedText),\n          { isNot: pass }\n        );\n      const actualTextHint = () =>\n    \"Actual text: \" + \n        printReceived(received.textContent);\n      const message = () =>\n        [sourceHint(), actualTextHint()].join(\"\\n\\n\");\n      return { pass, message };\n    };\n    ```", "```js\n    import {\n      toContainText\n    } from \"./matchers/toContainText\";\n    expect.extend({\n      toContainText,\n    });\n    ```", "```js\n    \"jest\": {\n      ...,\n      \"setupFilesAfterEnv\": [\"./test/domMatchers.js\"]\n    }\n    ```", "```js\nconst listChildren = document.querySelectorAll(\"li\");\nexpect(listChildren[0].textContent).toEqual(\"12:00\");\nexpect(listChildren[1].textContent).toEqual(\"13:00\");\n```", "```js\nexpect(elements(\"li\")[0].textContent).toEqual(\"12:00\");\nexpect(elements(\"li\")[1].textContent).toEqual(\"13:00\");\n```", "```js\nexpect(textOf(elements(\"li\"))).toEqual([\"12:00\", \"13:00\"]);\n```", "```js\n    export const element = (selector) =>\n      document.querySelector(selector);\n    export const elements = (selector) =>\n      Array.from(document.querySelectorAll(selector));\n    export const typesOf = (elements) =>\n      elements.map((element) => element.type);\n    export const textOf = (elements) =>\n      elements.map((element) => element.textContent);\n    ```", "```js\n    import {\n      initializeReactContainer,\n      render,\n      click,\n      element,\n      elements,\n      textOf,\n      typesOf,\n    } from \"./reactTestExtensions\";\n    ```", "```js\n    expect(textOf(elements(\"li\"))).toEqual([\n      \"12:00\", \"13:00\"\n    ]);\n    ```", "```js\n    expect(typesOf(elements(\"li > *\"))).toEqual([\n      \"button\",\n      \"button\",\n    ]);\n    ```", "```js\n    const secondButton = () => elements(\"button\")[1];\n    ```", "```js\n    click(secondButton());\n    expect(secondButton().className).toContain(\"toggled\");\n    ```", "```js\n    expect(element(\"ol\")).not.toBeNull();\n    ```", "```js\nexpect(secondButton().className).toContain(\"toggled\");\n```", "```js\nexpect(secondButton()).toHaveClass(\"toggled\"); \n```", "```js\nexpect(secondButton().className).not.toContain(\"toggled\");\n```"]