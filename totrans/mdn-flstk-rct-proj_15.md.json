["```js\n    $ cp -R ch11 ch12\n    ```", "```js\n    $ npm install @apollo/client@3.9.5 graphql@16.8.1\n    ```", "```js\n    VITE_GRAPHQL_URL=\"http://localhost:3001/graphql\"\n    ```", "```js\n    import { ApolloProvider } from '@apollo/client/react/index.js'\n    import { ApolloClient, InMemoryCache } from '@apollo/client/core/index.js'\n    ```", "```js\n    const apolloClient = new ApolloClient({\n      uri: import.meta.env.VITE_GRAPHQL_URL,\n      cache: new InMemoryCache(),\n    })\n    ```", "```js\n    export function App({ children }) {\n      return (\n        <HelmetProvider>\n          <ApolloProvider client={apolloClient}>\n            <QueryClientProvider client={queryClient}>\n              <AuthContextProvider>{children}</AuthContextProvider>\n            </QueryClientProvider>\n          </ApolloProvider>\n        </HelmetProvider>\n      )\n    }\n    ```", "```js\n    {\n      \"schema\": \"http://localhost:3001/graphql\",\n      \"documents\": \"src/api/graphql/**/*.{js,jsx}\"\n    }\n    ```", "```js\n    $ cd backend/\n    $ npm run dev\n    ```", "```js\n    import { gql } from '@apollo/client/core/index.js'\n    ```", "```js\n    export const GET_POSTS = gql`\n      query getPosts {\n        posts {\n          id\n          title\n          contents\n          tags\n          updatedAt\n          createdAt\n        }\n      }\n    `\n    ```", "```js\n    import { useQuery as useGraphQLQuery } from '@apollo/client/react/index.js'\n    ```", "```js\n    import { GET_POSTS } from '../api/graphql/posts.js'\n    ```", "```js\n    import { useQuery } from '@tanstack/react-query'\n    import { getPosts } from '../api/posts.js'\n    ```", "```js\n      const postsQuery = useQuery({\n        queryKey: ['posts', { author, sortBy, sortOrder }],\n        queryFn: () => getPosts({ author, sortBy, sortOrder }),\n      })\n      const posts = postsQuery.data ?? []\n    ```", "```js\n      const postsQuery = useGraphQLQuery(GET_POSTS)\n      const posts = postsQuery.data?.posts ?? []\n    ```", "```js\n    $ npm run dev\n    ```", "```js\n    export function Post({\n      title,\n      contents,\n      author,\n      id,\n    ```", "```js\n            <Link to={`/posts/${id}/${slug(title)}`}>\n    ```", "```js\n    Post.propTypes = {\n      title: PropTypes.string.isRequired,\n      contents: PropTypes.string,\n      author: PropTypes.string,\n      id: PropTypes.string.isRequired,\n    ```", "```js\n          {post ? (\n            <Post {...post} id={postId} fullPost />\n          ) : (\n            `Post with id ${postId} not found.`\n          )}\n    ```", "```js\n    export const GET_POSTS = gql`\n      query getPosts {\n        posts {\n          author {\n            username\n          }\n    ```", "```js\n    import PropTypes from 'prop-types'\n    export function User({ username }) {\n      return <b>{username}</b>\n    }\n    User.propTypes = {\n      username: PropTypes.string.isRequired,\n    }\n    ```", "```js\n              Written by <User {...author} />\n    ```", "```js\n      author: PropTypes.shape(User.propTypes),\n    ```", "```js\n            <Post {...post} id={postId} src/components/Header.jsx and import the useQuery hook and the getUserInfo API function:\n\n    ```", "```js\n\n    ```", "```js\n    export function Header() {\n      const [token, setToken] = useAuth()\n      const { sub } = token ? jwtDecode(token) : {}\n      const userInfoQuery = useQuery({\n        queryKey: ['users', sub],\n        queryFn: () => getUserInfo(sub),\n        enabled: Boolean(sub),\n      })\n      const userInfo = userInfoQuery.data\n    ```", "```js\n      if (token && userInfo) {\n        return (\n          <nav>\n            Logged in as <User {...userInfo} />\n    ```", "```js\n    export const GET_POSTS = gql`\n      query getPosts($options: PostsOptions) {\n    ```", "```js\n        posts(options: $options) {\n    ```", "```js\n      const postsQuery = useGraphQLQuery(GET_POSTS, {\n        variables: { options: { sortBy, sortOrder } },\n      })\n    ```", "```js\n    export const POST_FIELDS = gql`\n      fragment PostFields on Post {\n        id\n        title\n        contents\n        tags\n        updatedAt\n        createdAt\n        author {\n          username\n        }\n      }\n    `\n    ```", "```js\n    export const GET_POSTS = gql`\n      ${POST_FIELDS}\n      query getPosts($options: PostsOptions) {\n    ```", "```js\n        posts(options: $options) {\n          ...PostFields\n        }\n      }\n    `\n    ```", "```js\n    export const GET_POSTS_BY_AUTHOR = gql`\n      ${POST_FIELDS}\n      query getPostsByAuthor($author: String!, $options: PostsOptions) {\n        postsByAuthor(username: $author, options: $options) {\n          ...PostFields\n        }\n      }\n    `\n    ```", "```js\n    import { GET_POSTS, GET_POSTS_BY_AUTHOR } from '../api/graphql/posts.js'\n    ```", "```js\n      const postsQuery = useGraphQLQuery(author ? GET_POSTS_BY_AUTHOR : GET_POSTS, {\n    ```", "```js\n        variables: { author, options: { sortBy, sortOrder } },\n      })\n    ```", "```js\n      const posts = postsQuery.data?.postsByAuthor ?? postsQuery.data?.posts ?? []\n    ```", "```js\n    import { gql } from '@apollo/client/core/index.js'\n    ```", "```js\n    export const SIGNUP_USER = gql`\n      mutation signupUser($username: String!, $password: String!) {\n        signupUser(username: $username, password: $password) {\n          username\n        }\n      }\n    `\n    ```", "```js\n    import { useMutation as useGraphQLMutation } from '@apollo/client/react/index.js'\n    ```", "```js\n    import { SIGNUP_USER } from '../api/graphql/users.js'\n    ```", "```js\n      const [signupUser, { loading }] = useGraphQLMutation(SIGNUP_USER, {\n        variables: { username, password },\n        onCompleted: () => navigate('/login'),\n        onError: () => alert('failed to sign up!'),\n      })\n    ```", "```js\n      const handleSubmit = (e) => {\n        e.preventDefault()\n        signupUser()\n      }\n    ```", "```js\n          <input\n            type='submit'\n            value={loading ? 'Signing up...' : 'Sign Up'}\n            disabled={!username || !password || loading}\n          />\n    ```", "```js\n    export const LOGIN_USER = gql`\n      mutation loginUser($username: String!, $password: String!) {\n        loginUser(username: $username, password: $password)\n      }\n    `\n    ```", "```js\n    import { useMutation as useGraphQLMutation } from '@apollo/client/react/index.js'\n    import { LOGIN_USER } from '../api/graphql/users.js'\n    ```", "```js\n      const [loginUser, { loading }] = useGraphQLMutation(LOGIN_USER, {\n        variables: { username, password },\n        onCompleted: (data) => {\n          setToken(data.loginUser)\n          navigate('/')\n        },\n        onError: () => alert('failed to login!'),\n      })\n    ```", "```js\n      const handleSubmit = (e) => {\n        e.preventDefault()\n        loginUser()\n      }\n    ```", "```js\n          <input\n            type='submit'\n            value={loading ? 'Logging in...' : 'Log In'}\n            disabled={!username || !password || loading}\n          />\n    ```", "```js\n    export const CREATE_POST = gql`\n      mutation createPost($title: String!, $contents: String, $tags: [String!]) {\n        createPost(title: $title, contents: $contents, tags: $tags) {\n          id\n          title\n        }\n      }\n    `\n    ```", "```js\n    import { useMutation as useGraphQLMutation } from '@apollo/client/react/index.js'\n    ```", "```js\n    import { Link } from 'react-router-dom'\n    import slug from 'slug'\n    ```", "```js\n    import {\n      CREATE_POST,\n      GET_POSTS,\n      GET_POSTS_BY_AUTHOR,\n    } from '../api/graphql/posts.js'\n    ```", "```js\n      const [createPost, { loading, data }] = useGraphQLMutation(CREATE_POST, {\n        variables: { title, contents },\n    ```", "```js\n        context: { headers: { Authorization: `Bearer ${token}` } },\n    ```", "```js\n        refetchQueries: [GET_POSTS, GET_POSTS_BY_AUTHOR],\n      })\n    ```", "```js\n      const handleSubmit = (e) => {\n        e.preventDefault()\n        createPost()\n      }\n    ```", "```js\n          <input\n            type='submit'\n            value={loading ? 'Creating...' : 'Create'}\n            disabled={!title || loading}\n          />\n    ```", "```js\n          {data?.createPost ? (\n            <>\n              <br />\n              Post{' '}\n              <Link\n                to={`/posts/${data.createPost.id}/${slug(data.createPost.title)}`}\n              >\n                {data.createPost.title}\n              </Link>{' '}\n              created successfully!\n            </>\n          ) : null}\n    ```"]