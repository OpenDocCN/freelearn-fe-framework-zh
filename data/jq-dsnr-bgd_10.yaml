- en: Chapter 10. Featuring Content in Carousels and Sliders
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 10. 章 在走廊和幻灯片中显示内容
- en: In addition to slideshows, we can also feature images and text in sliders and
    carousels. One or more slides can be visible at one time and a sliding animation
    is used for transition between the slides. Carousels are ideal for creating a
    featured content slider or for making many images available in a small space.
    We'll take a look at the flexible and customizable jCarousel plugin from Jan Sorgalla
    and how it can be used to create several different types of carousel and slider
    solutions.
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 除了幻灯片秀，我们还可以在滑块和走马灯中展示图像和文本。一次可以显示一个或多个幻灯片，并使用滑动动画在幻灯片之间进行转换。走马灯非常适合创建特色内容滑块或在较小空间内提供许多图像。我们将查看
    Jan Sorgalla 的灵活和可定制的 jCarousel 插件以及如何使用它创建几种不同类型的走马灯和滑块解决方案。
- en: 'In this chapter, we''ll learn the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习以下主题：
- en: Using the jCarousel plugin to create a basic horizontal slider
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 jCarousel 插件创建基本的水平滑块
- en: Creating a vertical news ticker
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建垂直新闻滚动条
- en: Creating a featured content slider with external controls
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建具有外部控件的特色内容滑块
- en: Combining a slideshow with a thumbnail carousel
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将幻灯片秀与缩略图走马灯相结合
- en: Basic jCarousel
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本 jCarousel
- en: Let's first take a look at creating a basic horizontal carousel of image thumbnails.
    The jCarousel plugin includes two different skins, so setting up a basic carousel
    is quick and easy.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先看看如何创建基本的水平图像缩略图走马灯。jCarousel 插件包括两种不同的皮肤，因此设置基本的走马灯非常快速和简单。
- en: 'The following screenshot is a sample of a basic carousel using the tango skin
    that''s included with the plugin:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图是使用该插件附带的 tango 皮肤创建的基本走马灯的示例：
- en: '![Basic jCarousel](img/6709OS_10_img9.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![基本 jCarousel](img/6709OS_10_img9.jpg)'
- en: There are a dozen or so thumbnail images in the carousel. Clicking one of the
    side arrows slides the carousel left or right to reveal the next set.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 走廊中有十几张缩略图图像。单击其中一侧箭头将走廊左右滑动以显示下一组。
- en: Time for action — creating a basic carousel
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行操作 — 创建基本走马灯
- en: 'Follow these steps to set up a basic jCarousel of images:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循以下步骤设置基本的图像 jCarousel：
- en: 'As usual, we''ll get started with our HTML. Set up a basic HTML document and
    associated files and folders just like we did in [Chapter 1](ch01.html "Chapter 1. Designer,
    Meet jQuery"), *Designer, Meet jQuery*. In the body of the HTML document, create
    an unordered list of images. The carousel works best when the images are of uniform
    size. I''ve made my images 200 pixels wide by 150 pixels tall. Here''s what my
    HTML looks like:'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与往常一样，我们将从我们的 HTML 开始。像在 [第 1 章](ch01.html "第 1. 章 设计师，见到 jQuery") 中一样，设置一个基本的
    HTML 文档和相关的文件和文件夹。在 HTML 文档的主体中，创建一个图像的无序列表。当图像具有统一大小时，走马灯效果最佳。我的图像大小为 200 像素宽，150
    像素高。以下是我的 HTML 外观：
- en: '[PRE0]'
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You can see that I''ve assigned an `id` of `thumb-carousel` to my unordered
    list, and that the HTML is simple and straightforward: just a list of images.'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以看到我给无序列表分配了一个 `id` 为 `thumb-carousel`，HTML 简单明了：只是一系列图像的列表。
- en: 'Next, we''ll need to download the jCarousel plugin. The plugin is available
    for download from GitHub here: [https://github.com/jsor/jcarousel](http://https://github.com/jsor/jcarousel).![Time
    for action — creating a basic carousel](img/6709OS_10_img1.jpg)'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要下载 jCarousel 插件。该插件可以从 GitHub 下载：[https://github.com/jsor/jcarousel](http://https://github.com/jsor/jcarousel)。![执行操作
    — 创建基本走马灯](img/6709OS_10_img1.jpg)
- en: To download the plugin, just click on the **ZIP** button.
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要下载插件，只需单击 **ZIP** 按钮。
- en: Next, unzip the folder and have a look inside.![Time for action — creating a
    basic carousel](img/6709OS_10_img2.jpg)
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，解压文件夹并查看其内容。![执行操作 — 创建基本走马灯](img/6709OS_10_img2.jpg)
- en: Inside, we'll find a folder called examples, which contains many examples of
    the jCarousel plugin in action. There's an `index.html` file that contains the
    documentation for the plugin. A `skins` folder contains the two skins that are
    included with the plugin along with the images that those skins require. And finally,
    a `lib` folder contains jQuery, and two copies of the jCarousel plugin—one minified
    and one not.
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在内部，我们会找到一个名为 examples 的文件夹，其中包含许多 jCarousel 插件示例。有一个包含插件文档的 `index.html` 文件。一个
    `skins` 文件夹包含插件附带的两种皮肤以及这些皮肤所需的图像。最后，一个 `lib` 文件夹包含 jQuery，以及 jCarousel 插件的两个副本之一经过压缩的版本。
- en: We're going to use the `tango` skin and the minified version of the plugin.
    Copy `jquery.jcarousel.min.js` to your own `scripts` folder and copy the entire
    `tango` folder to your own `styles` folder.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用 `tango` 样式和插件的压缩版本。将 `jquery.jcarousel.min.js` 复制到你自己的 `scripts` 文件夹，并将整个
    `tango` 文件夹复制到你自己的 `styles` 文件夹。
- en: 'Next, we need to attach the CSS and JavaScript to our HTML file. In the`<head>`
    section of the document, attach the tango skin''s CSS file before your own `styles.css`
    file:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要将 CSS 和 JavaScript 附加到我们的 HTML 文件中。在文档的 `<head>` 部分，将 tango 样式的 CSS
    文件附加在你自己的 `styles.css` 文件之前：
- en: '[PRE1]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: At the bottom of the document, just before the closing`</body>` tag, attach
    the jCarousel plugin file after jQuery and before your own `scripts.js:`
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文档底部，在闭合的 `</body>` 标签之前，在你自己的 `scripts.js` 之后，附加 jCarousel 插件文件：
- en: '[PRE2]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The tango skin for the jCarousel slider is dependent on the `jcarousel-skin-tango`
    class placed on a wrapper for the list. Wrap the list in a `div` tag and give
    the `div` the appropriate class:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: jCarousel 滑块的 tango 样式依赖于放置在列表包装器上的 `jcarousel-skin-tango` 类。用 `div` 标签将列表包装起来，并给
    `div` 添加适当的类：
- en: '[PRE3]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The next thing we''ll do is set up our own JavaScript. Open your `scripts.js`
    file. Call the `ready` method on the document, select the image list, and call
    the `jcarousel()` method:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来我们要做的是设置我们自己的 JavaScript。打开你的 `scripts.js` 文件。在文档上调用 `ready` 方法，选择图像列表，并调用
    `jcarousel()` 方法：
- en: '[PRE4]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'As usual, calling the `jcarousel()` method this way will load the carousel
    with all of the default settings. Refresh the page in the browser and this is
    what you''ll see:'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 像往常一样，以这种方式调用 `jcarousel()` 方法将加载所有默认设置的轮播。在浏览器中刷新页面，你会看到这样的情况：
- en: '![Time for action — creating a basic carousel](img/6709OS_10_img3.jpg)'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![进行操作的时间 — 创建基本的轮播](img/6709OS_10_img3.jpg)'
- en: Not exactly what we had in mind, but clicking the next arrow on the right will
    advance the carousel. Let's take a look at getting some custom settings in place
    so that we can view our complete images as intended.
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不完全是我们想象中的样子，但是点击右侧的下一个箭头会推进轮播。让我们来看看如何设置一些自定义设置，以便按照我们预期查看完整的图像。
- en: 'The CSS for the tango skin assumes that our images are 75 pixels wide by 75
    pixels tall, but that''s not the case with our carousel. We''ll add a few lines
    of CSS to our `styles.css` to adjust the size of our images. First, we''ll specify
    the width and height of a single item:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: tango 样式的 CSS 假设我们的图像宽度为 `75` 像素，高度也为 `75` 像素，但实际上我们的轮播不是这样的。我们将在我们的 `styles.css`
    中添加几行 CSS 来调整图像的大小。首先，我们将指定单个项目的宽度和高度：
- en: '[PRE5]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We''ll also have to adjust the overall size of the carousel''s container and
    clip container:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要调整轮播容器和剪辑容器的整体大小：
- en: '[PRE6]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You might wonder where that 830px-wide measurement came from. Each item is 200
    pixels wide, and there are 10 pixels between each image.
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可能会想知道那个 `830px` 宽度是从哪里来的。每个项目宽度为 `200` 像素，每个图像之间有 `10` 个像素。
- en: 200 + 10 + 200 + 10 + 200 + 10 + 200 = 830
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`200 + 10 + 200 + 10 + 200 + 10 + 200 = 830`'
- en: The total width of images and the gaps between them is 830 pixels.
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图像和它们之间的间隙的总宽度为 `830` 像素。
- en: 'Next, we''ll need to bump the next and previous buttons down a bit since our
    carousel is taller than the default and the buttons appear too high:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要将下一个和上一个按钮往下移一点，因为我们的轮播比默认的要高，而按钮显示得太高了：
- en: '[PRE7]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now the carousel looks just the way we''d like:'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在轮播看起来正是我们想要的样子：
- en: '![Time for action — creating a basic carousel](img/6709OS_10_img4.jpg)'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![进行操作的时间 — 创建基本的轮播](img/6709OS_10_img4.jpg)'
- en: 'Finally, we''ll make a few adjustments to the settings for the jCarousel plugin
    itself. Like many other plugins, we can make customizations by passing a set of
    key/value pairs to the `jcarousel()` method inside a pair of curly braces. First,
    let''s change the `scroll` value to `4` so that four items will scroll each time
    we press the next or previous button. Go back to your `scripts.js` file and add
    the new key/value pair to your script as follows:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将对 jCarousel 插件本身的设置进行一些调整。像许多其他插件一样，我们可以通过在一对花括号内传递一组键/值对给 `jcarousel()`
    方法来进行自定义。首先，让我们将 `scroll` 值更改为 `4`，这样每次按下下一个或上一个按钮时会滚动四个项目。回到你的 `scripts.js` 文件，并将新的键/值对添加到你的脚本中，如下所示：
- en: '[PRE8]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Next, the carousel currently reaches a hard stop at either the beginning or
    the end. Instead, we''ll make the carousel wrap—if the site visitor is viewing
    the last item in the carousel and presses the next button, the carousel will wrap
    back to the beginning. And vice versa if the back button is clicked while viewing
    the first item. We''ll add a `''both''` value for the `wrap` key so that the carousel
    will wrap at either end:'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 接下来，轮播图当前在到达开头或结尾时会硬性停止。相反，我们将使轮播图环绕 —— 如果站点访客正在查看轮播图中的最后一个项目并按下下一个按钮，则轮播图将回到开头。如果在查看第一个项目时单击后退按钮，情况也是如此。我们将为`wrap`键添加一个`'both'`值，以便轮播图将在两端环绕：
- en: '[PRE9]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Refresh the page in the browser and page through the carousel using either the
    next or the previous button or any combination of the two. That's all there is
    to creating a simple carousel with the jCarousel plugin.
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在浏览器中刷新页面，然后使用下一个或上一个按钮或两者的任意组合来翻页轮播图。这就是使用jCarousel插件创建简单轮播图的全部内容。
- en: What just happened?
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We used the jCarousel plugin to create a basic animated image thumbnail carousel.
    We used one of the default skins included with the plugin and made adjustments
    for the size of our content with CSS. A few simple customizations were passed
    to the carousel to make sure it worked just the way we wanted.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用jCarousel插件创建了一个基本的动画图像缩略图轮播图。我们使用插件中包含的一个默认外观，并通过CSS对我们的内容大小进行调整。一些简单的定制被传递给轮播图，以确保它按照我们想要的方式工作。
- en: Animated news ticker
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动画新闻滚动条
- en: A horizontal image carousel is nice, but it has pretty limited use. Luckily,
    the jCarousel plugin is flexible enough to be used for a variety of different
    purposes. In this section, we'll learn how to create an animated news ticker.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 水平图像轮播图很好，但使用范围相当有限。幸运的是，jCarousel插件足够灵活，可以用于各种不同的用途。在本节中，我们将学习如何创建一个动画新闻滚动条。
- en: Time for action — creating an animated news ticker
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 —— 创建动画新闻滚动条
- en: 'Follow these steps to set up a vertical news listing:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤设置垂直新闻列表：
- en: 'First, up, we''ll set up a basic HTML file and associated files and folders
    like we did in [Chapter 1](ch01.html "Chapter 1. Designer, Meet jQuery"), *Designer,
    Meet jQuery*. In the body of the HTML document, create an unordered list of news
    items. Each news item will have an image and a div that contains a headline and
    an excerpt:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将像在[第一章](ch01.html "第1章。设计师，见识jQuery")中所做的那样设置基本的HTML文件和相关文件和文件夹。在HTML文档的正文中，创建一个新闻项目的无序列表。每个新闻项目都将包含一个图片和一个包含标题和摘要的div：
- en: '[PRE10]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: I've created 12 items in total on my list, each with this same structure. Keep
    in mind that each item in the carousel must be of the same width and height.
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我在我的列表中总共创建了12个项目，每个项目都具有相同的结构。请记住，轮播图中的每个项目必须具有相同的宽度和高度。
- en: 'Next up, we''ll open our `styles.css` file and add a few lines of CSS to get
    each news item styled the way we''d like, with the image on the left and the headline
    and excerpt on the right:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将打开我们的`styles.css`文件，并添加一些CSS代码以使每个新闻项目都以我们希望的方式进行样式设置，其中图片在左侧，标题和摘要在右侧：
- en: '[PRE11]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Feel free to add some additional CSS to style the list to suit your own taste.
    If you open the page in a browser, at this point, you can expect to see something
    similar to the following screenshot:'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 随意添加一些额外的CSS来样式化列表以适应您自己的口味。如果您在浏览器中打开页面，此时，您可以期望看到类似以下截图的内容：
- en: '![Time for action — creating an animated news ticker](img/6709OS_10_img5.jpg)'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时间 —— 创建动画新闻滚动条](img/6709OS_10_img5.jpg)'
- en: Just as in our simple carousel example, we'll attach the tango skin CSS in the`<head>`
    section of the document, and the jCarousel plugin script at the bottom of the
    document, between jQuery and our own `scripts.js` file.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正如我们在简单轮播图示例中所做的那样，我们将在文档的`<head>`部分附加tango皮肤的CSS，而在jQuery和我们自己的`scripts.js`文件之间，在文档底部附加jCarousel插件脚本。
- en: Next, open your `scripts.js` file. We'll write our document ready statement,
    select our news ticker, and call the `jcarousel()` method, just like we did in
    the previous example.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，打开您的`scripts.js`文件。我们将编写我们的文档准备语句，选择我们的新闻滚动条，并调用`jcarousel()`方法，就像我们在上一个示例中所做的那样。
- en: '[PRE12]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We''ll pass some customization options to the `jcarousel()` method to adjust
    our carousel to work the way that we''d like. First, it should be vertical rather
    than horizontal, so pass `true` as a value for the `vertical` key:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将一些定制选项传递给`jcarousel()`方法，以调整我们的轮播图以满足我们的需求。首先，它应该是垂直的而不是水平的，所以将`true`作为`vertical`键的值传递进去：
- en: '[PRE13]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We''d also like to scroll only one item at a time:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还希望每次滚动一个项目：
- en: '[PRE14]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'And, we''d like the list of news items to loop endlessly as follows:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 还有，我们希望新闻项目列表可以无限循环，如下所示：
- en: '[PRE15]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We''d like the carousel to automatically advance through the news stories in
    true news-ticker fashion. We''ll advance the carousel every three seconds:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们希望轮播图以真正的新闻滚动条方式自动播放新闻故事。我们将每三秒推进一次轮播图：
- en: '[PRE16]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'And last but not least, we''ll slow the animation down a bit so that it''s
    less jarring in case our site visitor is in the middle of reading when the animation
    is triggered. 600 milliseconds ought to be slow enough:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，我们会将动画速度减慢一点，这样在动画触发时，如果我们的网站访客正在阅读，就不会那么令人不适。600毫秒应该足够慢了：
- en: '[PRE17]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now that we''ve got jCarousel configured just the way we''d like, all that''s
    left to do is customize the appearance of the carousel. We''re currently using
    the default tango skin, which is still assuming our individual items are 75 pixels
    wide by 75 pixels tall. Open your `styles.css` file and we''ll get started by
    adjusting the necessary widths and heights as follows:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在jCarousel已经按我们喜欢的方式配置好了，唯一剩下的就是自定义轮播图的外观了。我们目前使用的是默认的探戈皮肤，它仍然假设我们的单个项目宽度为75像素，高度为75像素。打开你的`styles.css`文件，我们将从调整必要的宽度和高度开始：
- en: '[PRE18]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We''ve set the size of an individual item to 475 pixels wide by 150 pixels
    tall. Then the size of the container and clip container are adjusted to show three
    items. Just as a reminder—since each item in our carousel is 150 pixels tall and
    there are 10 pixels of space between items, we can calculate the height of the
    container as follows:'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们将单个项目的大小设置为475像素宽，150像素高。然后调整容器和裁剪容器的大小以显示三个项目。提醒一下——因为我们的轮播图中每个项目的高度为150像素，项目之间还有10像素的间距，我们可以如下计算容器的高度：
- en: 150 + 10 + 150 + 10 + 150 = 470px
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 150 + 10 + 150 + 10 + 150 = 470像素
- en: We're using heights instead of widths for our calculations since our carousel
    is now vertical rather than horizontal.
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们在计算时使用高度而不是宽度，因为我们的轮播图现在是垂直的，而不是水平的。
- en: 'Next, we''ll adjust the tango style a bit to fit in with my site''s design.
    I''m going to start by replacing the pale blue color scheme of the container with
    an orange color scheme, and adjust the rounded corners to be a bit less round:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将调整探戈风格，以适应我的网站设计。我将从用橙色换掉容器的淡蓝色方案开始，调整圆角使其变得不那么圆滑：
- en: '[PRE19]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now, let''s replace the small blue arrows of the tango skin with a long orange
    bar that spans the full width of our carousel. I''ve created my own arrow graphic
    that I''ll show in the middle of each button:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们将探戈皮肤的小蓝色箭头替换为横跨整个轮播图宽度的长橙色条。我已经创建了自己的箭头图形，我将在每个按钮的中间显示：
- en: '[PRE20]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now, if you refresh the page in the browser, you''ll see that the carousel
    is re-designed a bit with a different color scheme and appearance:'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，如果你在浏览器中刷新页面，你会看到轮播图以不同的颜色方案和外观重新设计了一些：
- en: '![Time for action — creating an animated news ticker](img/6709OS_10_img6.jpg)'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![创建动画新闻滚动条的时间到了](img/6709OS_10_img6.jpg)'
- en: Moving your mouse over the top or bottom bar will lighten the color a bit, and
    clicking a bar will advance the carousel in that direction by one item.
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将鼠标移动到顶部或底部的条上会稍微提亮颜色，点击条将使轮播图朝着那个方向推进一个项目。
- en: What just happened?
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: In this case, we used the jCarousel plugin to create a vertical news ticker.
    Our news ticker automatically advances one item every three seconds. We slowed
    down the animation to make for a smoother reading experience for our site visitors.
    We also saw how we can customize the tango skin's CSS to customize the color scheme
    and appearance of the carousel to fit our site's design. Next up, we'll take a
    look at how we can add some external controls to the carousel.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们使用jCarousel插件创建了一个垂直新闻滚动条。我们的新闻滚动条每三秒自动推进一次项目。我们减慢了动画速度，以便为我们的网站访客提供更流畅的阅读体验。我们还看到了如何自定义探戈皮肤的CSS来适应轮播图的颜色方案和外观，以适应我们网站的设计。接下来，我们将看看如何为轮播图添加一些外部控件。
- en: Have a go hero — design your own carousel
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尝试一下吧——设计您自己的轮播图
- en: Now that you've seen how to customize the appearance and behavior of the jCarousel
    plugin, design your own carousel. It could be horizontal or vertical, contain
    text, images, or a combination of both. Experiment with the settings that the
    jCarousel plugin makes available to you — you'll find them all listed out and
    explained in the plugin's documentation.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经看到如何自定义jCarousel插件的外观和行为，设计你自己的轮播图吧。它可以是水平或垂直的，包含文本、图片或两者的组合。试验一下jCarousel插件提供给你的设置——你会在插件的文档中找到它们的列表和解释。
- en: Featured content slider
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 特色内容滑块
- en: In addition to carousels that show multiple items at one time, jCarousel can
    also be used to build content sliders that show just one item at a time. It's
    also possible to build external controls that add some additional functionality
    to your carousels. Let's take a look at how to create a single-slide featured
    content slider with external pagination controls.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 除了一次显示多个项目的轮播图之外，jCarousel还可以用于构建一次仅显示一个项目的内容滑块。还可以构建外部控制，以为您的轮播图增加一些额外的功能。让我们看看如何创建一个具有外部分页控件的单个幻灯片特色内容滑块。
- en: Time for action — creating a featured content slider
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 — 创建特色内容滑块
- en: We'll get started as usual by setting up our basic HTML file and associated
    files and folders, just like we did in [Chapter 1](ch01.html "Chapter 1. Designer,
    Meet jQuery"),*Designer, Meet jQuery*.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将像往常一样，首先设置我们基本的HTML文件和相关的文件和文件夹，就像我们在[第1章](ch01.html "第1章 设计师，见识jQuery")，《设计师，见识jQuery》中所做的那样。
- en: 'In the body of the HTML document, the HTML markup for our featured content
    slider will be very similar to the HTML we set up for a news ticker. The only
    difference is that I''m replacing the images with larger images since I want images
    to be the main focus of the slider. I''m using images that are 600 pixels wide
    by 400 pixels tall. The following is a sample of the HTML:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在HTML文档的主体中，我们的特色内容滑块的HTML标记将与我们为新闻滚动条设置的HTML非常相似。唯一的区别是我用更大的图片替换了图片，因为我希望图片成为滑块的主要焦点。我使用的图片尺寸为600像素宽，400像素高。以下是HTML的示例：
- en: '[PRE21]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: I have 12 items in total on my list, each marked up just the way you see here.
    Note that I've wrapped my list in a `div` with the class `jcarousel-skin-slider`.
    We'll be using this class to style our list with CSS.
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我的列表总共有12个条目，每个条目的标记就像你在这里看到的那样。注意，我将我的列表包装在一个带有类`jcarousel-skin-slider`的`div`中。我们将使用这个类来使用CSS对我们的列表进行样式设置。
- en: 'Next up, we''ll style our list of items. We''ll overlay the headline and paragraph
    of text on the photo, the header along the top, and the paragraph of text along
    the bottom. The following is the CSS we can use to accomplish that:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将为我们的项目列表设置样式。我们将在照片上叠加标题和文本段落，头部位于顶部，文本段落位于底部。以下是我们可以使用的CSS：
- en: '[PRE22]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Now each item in my list looks similar to the following screenshot:'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，我的列表中的每个项目看起来都类似于以下的屏幕截图：
- en: '![Time for action — creating a featured content slider](img/6709OS_10_img7.jpg)'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时间 — 创建特色内容滑块](img/6709OS_10_img7.jpg)'
- en: I want to draw your attention to a couple of handy CSS tricks I've put to use
    here. First, notice that I've added a small white `text-shadow` to the headline
    and have made the headline text black. Just in case this text happens to overlay
    a dark area of the image, the subtle white outline around the text will help the
    text to stand out. Then, note that I've added two background values for the short
    paragraph of text. The first, a solid black, the second a transparent black color
    denoted with an `rgba` value. The first value is for versions of Internet Explorer
    before IE9\. Those browsers will display a solid black background. Newer and more
    capable browsers will use the second value—the `rgba` value—to display a slightly
    transparent black background behind the text—allowing the image to show through
    a bit while making the text more readable.
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我想要引起你对我在这里使用了一些方便的CSS技巧的注意。首先，请注意我给标题添加了一小段白色的`text-shadow`，并且将标题文本设为黑色。以防这段文本碰巧悬停在图片的黑色区域上，文本周围微妙的白色轮廓将帮助文本更加突出。然后，请注意，我为短段文本添加了两个背景值。第一个是纯黑色，第二个是使用`rgba`值表示的透明黑色。第一个值是针对IE9之前的版本的Internet
    Explorer。这些浏览器将显示纯黑色的背景。更新的和更有能力的浏览器将使用第二个值，`rgba`值，在文本的后面显示略微透明的黑色背景—这样图片可以透过一点，同时使文本更易读。
- en: Now, we'll attach the jCarousel JavaScript at the bottom of the page, between
    jQuery and our `scripts.js` file, just as we've done in the other examples in
    this chapter.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将会在页面底部，在jQuery和我们的`scripts.js`文件之间，附加 jCarousel JavaScript，就像我们在本章其他示例中所做的那样。
- en: '[PRE23]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Now we''re going to write a bit of CSS to customize the appearance of our content
    slider. Open your `styles.css` file and add the following styles:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们要写一些CSS来自定义我们的内容滑块的外观。打开你的`styles.css`文件并添加以下样式：
- en: '[PRE24]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Yep, that's really it. Just a few lines. We'll set the width of an individual
    item, the container, and the clip container to 600 pixels, the same as the width
    of one image. The height of the individual item is also set to 400 pixels, but
    we're going to set the clip container's height to 425 pixels to give us 25 pixels
    to add in some external controls, which we'll be looking at in a minute.
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这就是全部了。只需几行代码。我们将设置单个项目、容器和剪辑容器的宽度为 600 像素，与一个图像的宽度相同。单个项目的高度也设置为 400 像素，但我们将把剪辑容器的高度设置为
    425 像素，以便为我们添加一些外部控件提供 25 像素的空间，稍后我们会看到这些控件。
- en: Now, open up your `scripts.js` file. The first thing we want to do is select
    our list and store it in a variable. This is because we're going to be using the
    list multiple times, and we don't want jQuery to have to query the DOM looking
    for our list each time.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开你的`scripts.js`文件。我们首先要做的是选择我们的列表并将其存储在一个变量中。这是因为我们将多次使用列表，并且我们不希望 jQuery
    每次都要查询 DOM 来查找我们的列表。
- en: '[PRE25]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Next, we''ll set up our document ready statement and call the `jcarousel()`
    method on the slider, and we''ll tell it that we want to scroll one pane at a
    time:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将设置我们的文档就绪语句，并在滑块上调用`jcarousel()`方法，并告诉它我们要一次滚动一个窗格。
- en: '[PRE26]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'We''re going to be adding our own external controls, so we''ll need to remove
    the ones that the `jcarousel()` method creates on its own. Here''s how we can
    do that:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将添加我们自己的外部控件，因此我们需要删除`jcarousel()`方法自己创建的控件。我们可以这样做：
- en: '[PRE27]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The `buttonNextHTML` and `buttonPrevHTML` keys are provided so that you can
    specify your own HTML markup for those buttons. In this case, we're passing `null`
    as the value for both keys which will prevent them from being created.
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 提供了`buttonNextHTML`和`buttonPrevHTML`键，以便您可以为这些按钮指定自己的 HTML 标记。在这种情况下，我们将为这两个键传递`null`作为值，这将阻止它们被创建。
- en: Now we've done the basics to set up our slider. If you look at the page in your
    browser, you'll see the first slide. We haven't yet provided a way to navigate
    to the other slides, so let's jump on that next.
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在我们已经完成了设置幻灯片放映器的基本操作。如果你在浏览器中查看页面，你会看到第一张幻灯片。我们还没有提供导航到其他幻灯片的方法，所以让我们立即解决这个问题。
- en: '![Time for action — creating a featured content slider](img/6709OS_10_img7.jpg)'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时间 —— 创建一个特色内容滑块](img/6709OS_10_img7.jpg)'
- en: Pagination controls
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分页控件
- en: We've set up a basic slider that shows one item at a time, but you've no doubt
    noticed that there isn't a way to get to view any slide other than the first one.
    We removed jCarousel's default next and previous buttons, and we haven't provided
    any alternative yet. Let's add in some pagination controls so our site visitors
    can get to any slide they like.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们设置了一个基本的滑块，一次显示一个项目，但你肯定已经注意到除了第一个之外，没有办法查看任何幻灯片。我们删除了 jCarousel 的默认下一个和上一个按钮，并且我们还没有提供任何替代方法。让我们添加一些分页控件，这样我们的网站访问者就可以查看任何他们喜欢的幻灯片。
- en: Time for action — adding pagination controls
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 —— 添加分页控件
- en: Next, we want to set up the function that will create the next button, previous
    button, and pagination buttons and makes them work.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们要设置一个函数，该函数将创建下一个按钮、上一个按钮和分页按钮，并使它们起作用。
- en: 'The jCarousel plugin provides a key called `initCallback` that will allow us
    to pass in the name of a function that should be called when the carousel is created.
    Let''s get started by creating an empty function and calling it:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: jCarousel 插件提供了一个名为`initCallback`的键，它允许我们传递一个应在轮播创建时调用的函数的名称。让我们通过创建一个空函数并调用它来开始：
- en: '[PRE28]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Whatever actions we write inside of our `carouselInit()` function, it will be
    executed when the carousel is initialized or set up. Since any page numbers and
    previous and next buttons would only be functional if JavaScript is enabled, we
    want to create those buttons dynamically with JavaScript rather than coding them
    in our HTML. Let's take a look at how we can create a list of page links to each
    slide in the slider.
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们在`carouselInit()`函数中写的任何操作都将在轮播初始化或设置时执行。由于只有在启用 JavaScript 时，任何页码、上一个和下一个按钮才会起作用，所以我们想使用
    JavaScript 动态创建这些按钮，而不是在 HTML 中编码它们。让我们看看如何创建一个包含滑块中每个幻灯片的页面链接列表。
- en: 'We''ll get started by getting all of the slides in our slider. Remember that
    our slider is an unordered list and each slide in the slider is an individual
    list item in the list. Since we''ve already saved a reference to the slider itself,
    we can get all the slides inside of it as follows:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将从获取滑块中的所有幻灯片开始。请记住，我们的滑块是一个无序列表，滑块中的每个幻灯片都是列表中的一个单独列表项。由于我们已经保存了对滑块本身的引用，因此我们可以如下获取其中的所有幻灯片：
- en: '[PRE29]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'We''ll use these slides in a moment to create the page numbers. In the meantime
    though, we need a place to put our page numbers, so let''s create a couple of
    containers before the slider so that our pagination will display just above the
    slider. Here''s how we insert two nested`<div>` tags just before the slider:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将在稍后使用这些幻灯片来创建页面数字。但与此同时，我们需要一个放置页面数字的地方，所以让我们在幻灯片之前创建一些容器，这样我们的分页将显示在幻灯片正上方。下面是如何在幻灯片之前插入两个嵌套的`<div>`标签：
- en: '[PRE30]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Next, we''ll need to refer to these two newly created containers a couple of
    times in our code, so we''ll store references to them in variables as shown in
    the following code:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要在我们的代码中几次引用这两个新创建的容器，所以我们将在变量中存储对它们的引用，如下面的代码所示：
- en: '[PRE31]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Now, we''re going to get fancy and create a page number for each slide in the
    slider. The following is the code we''ll add:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们要高级一点，为幻灯片中的每一页创建一个页码。以下是我们要添加的代码：
- en: '[PRE32]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: We're starting with `i = 1`, because the first page number will be 1\. Then
    we're checking to see if `i` is less than or equal to the number of slides (`slides.length`
    is the number of slides). If `i` is less than or equal to the number of slides,
    we're going to increment i by one number—basically we're going to add 1 to `i`
    and `i++` is a JavaScript shortcut way of saying `i = i+1`.
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们从`i = 1`开始，因为第一页的页码将是1。然后我们检查`i`是否小于或等于幻灯片的数量（`slides.length`是幻灯片的数量）。如果`i`小于或等于幻灯片的数量，我们将递增i一个数字——基本上我们将把1添加到`i`上，而`i++`是JavaScript中表示`i
    = i+1`的快捷方式。
- en: Each time through the loop, we're going to append a link to the pages container
    we created. It's a link wrapped around a page number, and i represents our page
    number.
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在每次循环中，我们都将在我们创建的页面容器中附加一个链接。它是围绕页码的链接，i代表我们的页码。
- en: If you refresh the page in a browser at this point, you'll see numbers 1 to
    12 linked above the slideshow. They aren't styled, and clicking on them won't
    do anything, because we haven't set that up yet—that's what we'll do next.
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果此时在浏览器中刷新页面，你将看到链接到幻灯片秀上面的数字1到12。它们没有样式，并且点击它们不会做任何事情，因为我们还没有设置——这就是我们接下来要做的。
- en: '![Time for action — adding pagination controls](img/6709OS_10_img10.jpg)'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![操作时间 — 添加分页控件](img/6709OS_10_img10.jpg)'
- en: 'Next, we want to style the links so that they look the way we''d like. Open
    up your `styles.css` file and add these few lines to the CSS:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们要样式化链接，使它们看起来我们想要的样子。打开你的`styles.css`文件，添加下面几行到 CSS 中：
- en: '[PRE33]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: This sets the height for our slider controls row to the 25 pixels that we allowed
    for it previously. Then we put a green border around each link, which will turn
    to a pink border when the link is hovered over. We adjusted margins and padding
    to get a nicely spaced row of boxes. Finally, we added a `.current` class for
    our links to allow us to mark the currently selected link in dark gray.
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将我们的幻灯片控制行的高度设置为之前允许的25个像素。然后我们在每个链接周围放置了一个绿色边框，当鼠标悬停在链接上时，它会变成粉红色边框。我们调整了边距和填充以获得间隔良好的盒子行。最后，我们为我们的链接添加了一个`.current`类，以便我们能够用深灰色标记当前选择的链接。
- en: '![Time for action — adding pagination controls](img/6709OS_10_img11.jpg)'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![操作时间 — 添加分页控件](img/6709OS_10_img11.jpg)'
- en: 'Okay, we have our page numbers added to our document, so all we have to do
    is make them work. We''ll bind a click function to those links, since we want
    something to happen when our site visitor clicks on the links. We''ll get started
    as follows:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 好的，我们已经将页面数字添加到我们的文档中，所以我们所要做的就是让它们起作用。我们将为这些链接绑定一个点击函数，因为当我们的网站访客点击链接时我们希望发生一些事情。我们将如下开始：
- en: '[PRE34]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: The first thing to do inside our function is to cancel the default action of
    the click so that the browser doesn't try to do its own thing when the links are
    clicked.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 函数内的第一件事是取消点击的默认操作，这样浏览器在点击链接时不会尝试执行自己的操作。
- en: '[PRE35]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The jCarousel plugin offers us a nice way to scroll to a particular slide in
    the slider. It looks as follows:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: jCarousel插件为我们提供了一个很好的方法来滚动到幻灯片中的特定幻灯片。看起来是这样的：
- en: '[PRE36]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The `number`s near the end is where we would pass in which slide we want to
    scroll to. For example, if we wanted to scroll to the sixth slide, we''d say:'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 结尾附近的`number`s是我们将要传递的幻灯片编号。例如，如果我们想滚动到第六张幻灯片，我们会这样说：
- en: '[PRE37]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'In our case, the number slide we want to scroll to is the page number in our
    link. For example, if I click on the following link:'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在我们的情况下，我们要滚动到的数字幻灯片是链接中的页码。例如，如果我点击以下链接：
- en: '[PRE38]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'That means I want to scroll to the third slide in the slider. I can get that
    number by using jQuery''s `text()` method as follows:'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这意味着我想要滚动到幻灯片中的第三张幻灯片。我可以使用jQuery的`text()`方法来获得该数字，如下所示：
- en: '[PRE39]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: If I click on the fourth link, `$(this).text()` will be equal to 4; on the seventh
    link, it will be equal to 7, and so on.
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果我点击第四个链接，`$(this).text()`将等于 4；点击第七个链接，它将等于 7，以此类推。
- en: Refresh the page in the browser, and you'll see that clicking on a numbered
    link will scroll the slider to that slide.
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在浏览器中刷新页面，你会看到点击编号链接会将滑块滚动到该幻灯片。
- en: Clicking on the page numbers, you probably noticed that the current page number
    isn't highlighted in the pagination. We already wrote the CSS to highlight a link
    that has the `current` class—now we just have to be sure we're adding that class
    to the current link. Here's how we'll do that.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击页码时，您可能已经注意到当前页码未在分页中突出显示。我们已经编写了用于突出显示具有`current`类的链接的 CSS —— 现在我们只需确保我们正在向当前链接添加该类即可。以下是我们将如何做到这一点的方法。
- en: '[PRE40]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Now if you refresh the page in the browser, you''ll see that clicking a page
    number applies the `current` class CSS to the link, highlighting it. However,
    clicking a second page number highlights that link in addition to the previous
    link. We have to make sure that we''re removing the class from the old link too.
    Add the following line to take care of that:'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，如果你在浏览器中刷新页面，你会发现点击页码会将`current`类 CSS 应用于链接，突出显示它。然而，点击第二个页码会突出显示该链接以及上一个链接。我们必须确保我们也从旧链接中移除类。添加以下行来处理这个问题：
- en: '[PRE41]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: This line checks all of the links' siblings for any that might have the class
    of current. If it finds any, it removes the class.
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此行检查所有链接的兄弟节点，查找是否有任何具有当前类的链接。如果找到任何一个，就移除该类。
- en: 'Now, we just have to make sure the first link is highlighted when the carousel
    is initialized. The easiest way to do that is to simply click the first link in
    the pagination when the carousel is created, as follows:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们只需确保在轮播初始化时突出显示第一个链接即可。最简单的方法就是在创建轮播时简单地点击分页中的第一个链接，如下所示：
- en: '[PRE42]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Remember that jQuery allows us to chain methods—even though we've got a whole
    function written inside the `bind()` method, we can still chain the next method
    to the end of it. We call the `filter()` method to narrow down the list of links
    to just the first one, then call the `click()` method to fire off the click function
    we just bound to the link.
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 记住，jQuery 允许我们链式调用方法——即使我们在`bind()`方法内写了一个完整的函数，我们仍然可以在其末尾链式调用 next 方法。我们调用`filter()`方法来将链接列表缩减为仅第一个链接，然后调用`click()`方法来触发我们刚刚绑定到链接的点击函数。
- en: Now if you refresh the page in the browser, you'll see that the first link is
    highlighted with our current class CSS.
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，如果你在浏览器中刷新页面，你会看到第一个链接以我们当前类 CSS 突出显示。
- en: '![Time for action — adding pagination controls](img/6709OS_10_img12.jpg)'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时间 —— 添加分页控件](img/6709OS_10_img12.jpg)'
- en: Next and previous buttons
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 下一个和上一个按钮
- en: Now we've got our slider set up and page numbers working, but we also want to
    have simple next and previous buttons to make it easy to flip through the slides
    one at a time. We'll add those at either end of the pagination controls.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置好了幻灯片和页码，但我们还想要简单的下一个和上一个按钮，以便轻松地逐页翻阅幻灯片。我们将在分页控件的两端添加它们。
- en: Time for action — adding next and previous buttons
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 —— 添加下一个和上一个按钮
- en: Now all that's left to add is a next and a previous button.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们只需要添加上一个和下一个按钮即可。
- en: 'We''ll add the previous button at the beginning of the pagination, and the
    next button at the end. Here''s how we can use jQuery to insert those links in
    our document:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将在分页的开头添加上一个按钮，在结尾添加下一个按钮。以下是我们如何使用 jQuery 在文档中插入这些链接的方法：
- en: '[PRE43]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: I've used the `prepend()` method to insert the previous button before the page
    numbers and the `append()` method to insert the next button after the page numbers.
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我已经使用`prepend()`方法将上一个按钮插入到页码之前，并使用`append()`方法将下一个按钮插入到页码之后。
- en: If you refresh the page in the browser, you'll see the next and previous buttons
    show up along with our pagination buttons.
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你在浏览器中刷新页面，你会看到下一个和上一个按钮以及我们的分页按钮显示出来。
- en: '![Time for action — adding next and previous buttons](img/6709OS_10_img13.jpg)'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时间 —— 添加下一个和上一个按钮](img/6709OS_10_img13.jpg)'
- en: However, clicking them won't cause anything to happen—we have to hook up those
    buttons so that they work. Let's start with the next button.
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然而，点击它们不会引起任何事情发生——我们必须连接这些按钮以使它们起作用。我们从下一个按钮开始。
- en: Just like with the pagination buttons, we need to bind a click event. Again,
    the jCarousel plugin provides a nice way for us to advance to the next slide.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就像分页按钮一样，我们需要绑定点击事件。同样，jCarousel 插件为我们提供了一个很好的方法来切换到下一张幻灯片。
- en: '[PRE44]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: We're selecting the next button and binding a click event. We're canceling the
    browser's default action so that the browser doesn't attempt to do anything when
    the link is clicked. Then, all we have to do is call `carousel.next()` and jCarousel
    will take care of advancing to the next slide for us.
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们选择下一个按钮并绑定了一个点击事件。我们取消了浏览器的默认操作，以便在单击链接时浏览器不会尝试执行任何操作。然后，我们所要做的就是调用`carousel.next()`，jCarousel将负责帮我们前进到下一个幻灯片。
- en: Refresh the page in the browser, and you'll see that clicking the next button
    advances the slider by one slide.
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在浏览器中刷新页面，您会发现单击下一个按钮会将滑块向前移动一个幻灯片。
- en: You'll also notice, however, that the currently highlighted page in the pagination
    isn't updated. Let's take a look at how we can take care of that.
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您还会注意到，分页中当前突出显示的页面未更新。让我们看看如何解决这个问题。
- en: 'We''ll get started by finding the currently highlighted page number as follows:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将通过以下方式开始找到当前突出显示的页码：
- en: '[PRE45]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Here we're just looking inside our page numbers to find the one with the `current`
    class.
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我们只是在我们的页码中查找具有`current`类的页码。
- en: 'Next, we''ll remove the `current` class, move to the next page number link,
    and add the `current` class to that one as follows:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将移除`current`类，移动到下一个页面编号链接，并将`current`类添加到该链接中，如下所示：
- en: '[PRE46]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Ah, but not so fast, we only want to do that if there is a next link to go
    to. If there''s not, then we don''t want to do anything at all. If we check `current.next().`
    `length`, we can tell if there''s a next link or not. So, we just have to wrap
    this bit of code in an `if` statement as shown in the following code:'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 啊，但不要那么快，我们只想在有下一个链接要跳转时才这样做。如果没有，那么我们就什么也不想做。如果我们检查`current.next().` `length`，我们就可以判断是否有下一个链接。因此，我们只需将此代码块包装在一个`if`语句中，如下所示的代码所示：
- en: '[PRE47]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Now if you refresh the page in a browser, you'll see that the next button works
    as expected. When we get to the last page, it does nothing, just as we'd expect.
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，如果您在浏览器中刷新页面，您会发现下一个按钮按预期工作。当我们到达最后一页时，它不会做任何事情，正如我们所预期的那样。
- en: 'Now we''ll repeat that whole process with the previous button the function
    is very similar. The following is what it will look like:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将使用与前一个按钮非常相似的函数重复整个过程。以下是它的样子：
- en: '[PRE48]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Here''s what our complete `carouselInit()` function looks like:'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是我们完整的`carouselInit()`函数的样子：
- en: '[PRE49]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Now if you refresh the page in a browser, you'll see that the next and previous
    buttons are both working as expected, along with the page numbers. You can navigate
    to any slide in the slider by using these external controls.
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，如果您在浏览器中刷新页面，您会发现下一个和上一个按钮都按预期工作，连同页面编号。您可以使用这些外部控件导航到幻灯片中的任何幻灯片。
- en: '![Time for action — adding next and previous buttons](img/6709OS_10_img14.jpg)'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![执行操作的时间——添加下一个和上一个按钮](img/6709OS_10_img14.jpg)'
- en: What just happened?
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: We set up jCarousel to display a single slide at a time. We made sure that jCarousel
    was not creating its own next and previous buttons. We used jQuery to add next,
    previous, and pagination buttons to our document, and then used jCarousel's helpful
    methods to control the carousel from these external controls. We made sure the
    currently displayed slide is highlighted in the pagination to make it easy for
    our site visitors to see where they are in the slides.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 我们设置了jCarousel每次显示一个幻灯片。我们确保jCarousel没有创建自己的下一个和上一个按钮。我们使用jQuery向我们的文档添加了下一个、上一个和分页按钮，然后使用jCarousel的有用方法从这些外部控件控制幻灯片。我们确保当前显示的幻灯片在分页中突出显示，以便我们的网站访问者可以轻松地看到他们在幻灯片中的位置。
- en: Carousel slideshow
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 轮播幻灯片
- en: 'Now that we''ve learned how to set up external controls that control the carousel,
    let''s take things the other way as well, and set up our carousel to control a
    slideshow. In this section, we''ll be creating a simple crossfade slideshow that''s
    controlled by a carousel of thumbnail images. The following is a sample of what
    we''ll be creating:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经学会了如何设置控制幻灯片的外部控件，让我们也以相同的方式设置幻灯片来控制幻灯片。在本节中，我们将创建一个简单的交叉淡入淡出幻灯片，由缩略图图像的轮播控制。以下是我们将要创建的示例的样本：
- en: '![Carousel slideshow](img/6709OS_10_img8.jpg)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![轮播幻灯片](img/6709OS_10_img8.jpg)'
- en: Clicking on any of the thumbnails inside the carousel will load up the large
    version of that image in the slideshow area. I've also provided next and previous
    buttons near the slideshow that allow the site visitor to advance one photo at
    a time through the slideshow without having to click individual thumbnails. Let's
    take a look at how to put this together.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 点击轮播内任何缩略图都会在幻灯片区域加载出该图像的大尺寸版本。我也在幻灯片旁边提供了下一个和上一个按钮，让网站访问者可以逐个点击图片而不必单击每个缩略图来通过幻灯片放映中途。让我们看看如何将其放在一起。
- en: Time for action — creating a thumbnail slideshow
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间-创建一个缩略图幻灯片
- en: Setting up the carousel thumbnail slideshow will be the trickiest thing we've
    done with jCarousel yet. But don't worry, we'll take it one step at a time.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 设置轮播缩略图幻灯片将是我们使用 jCarousel 做过的最困难的事情。但不要担心，我们会一步一步来。
- en: 'I bet you can guess how we''re going to get started, can''t you? That''s right,
    by setting up our simple HTML file and associated files and folders, just as we
    did in [Chapter 1](ch01.html "Chapter 1. Designer, Meet jQuery"), *Designer, Meet
    jQuery*. In this case, we want just a simple list of thumbnails that are linked
    to the full-size version of the image. And we''re going to wrap that up in a`<div>`
    for styling purposes. Here''s what my list looks like:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我敢打赌，你能猜到我们要如何开始，对吧？没错，通过设置我们简单的 HTML 文件和相关的文件和文件夹，就像我们在[第 1 章](ch01.html "第1章
    设计师，遇见 jQuery") *设计师，遇见 jQuery*中做的一样。在这种情况下，我们只想要一个简单的缩略图列表，它们链接到图像的全尺寸版本。并且我们将将其包裹在一个`<div>`中进行样式设置。这就是我的列表是什么样子的：
- en: '[PRE50]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: I've got twelve items in my list total, and they're all marked up identically.
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我的列表中总共有十二个项目，并且它们都具有相同的标记。
- en: 'Next, we''ll write the CSS for the carousel. It''s a custom design, so we won''t
    be including one of the stylesheets provided with jCarousel. Open up your `styles.css`
    file and add the following CSS:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将为轮播图编写 CSS。这是一个定制设计，所以我们不会包含 jCarousel 提供的样式表之一。打开你的`styles.css`文件，并添加以下
    CSS：
- en: '[PRE51]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: I've created an image sprite containing the images for my next and previous
    buttons and that's what's being used as the background image for those. The rest
    of this should look familiar—setting up the appropriate sizes for the individual
    items and the carousel itself.
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我已经创建了一个图片精灵，其中包含了我的下一个和上一个按钮的图片，并且这就是它们的背景图片所使用的。其余的部分应该看起来很熟悉 - 为每个项目和轮播图本身设置适当的尺寸。
- en: 'Now, we''ll attach the jCarousel plugin at the bottom of the document, in between
    jQuery and your `scripts.js` file:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将在文档底部，在 jQuery 和你的`scripts.js`文件之间，附加 jCarousel 插件：
- en: '[PRE52]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Open up your `scripts.js` file and we''ll get the JavaScript started by getting
    our thumbnail carousel up and running. Inside a document ready statement, select
    the carousel and call the `jcarousel()` method as follows:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的`scripts.js`文件，我们将通过在文档就绪语句内选择轮播并调用`jcarousel()`方法来启动我们的缩略图轮播。
- en: '[PRE53]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: We've assigned a value of `'circular'` to the `wrap` key—that means the carousel
    will have neither beginning nor end—it will just continuously wrap around as the
    site visitor scrolls through.
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们已经将值`'circular'`分配给了`wrap`键-这意味着轮播没有开始也没有结束-它将在网站访问者滚动时不断地环绕。
- en: The continuous wrapping is nice — our site visitors will be able to click either
    the forward or back carousel buttons no matter where they are, which feels a little
    friendlier than disabled buttons. However, continuous scrolling can make it a
    little more difficult for our site visitors to keep track of where they are in
    the carousel. For that reason, we've set the scroll to `6`, even though our carousel
    is capable of displaying seven images.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 连续包裹很好-我们的网站访问者可以点击向前或向后的轮播按钮，无论他们身在何处，这比禁用按钮更友好一些。然而，连续滚动可能会使我们的网站访问者更难以跟踪他们在轮播中的位置。因此，尽管我们的轮播能够显示七张图片，我们已经将滚动设置为`6`。
- en: Let's say our site visitor is looking at our carousel and there's a photo of
    a gorgeous beach scene in the first slot in the carousel. The site visitor clicks
    the previous button and that gorgeous beach scene slides over to fill the last
    slot in the carousel. Seeing that same image in a new position helps to communicate
    what just happened and ensures our site visitors that they didn't miss anything.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们的网站访问者正在查看我们的轮播，并且在轮播的第一个位置有一张美丽的海滩风景照片。网站访问者点击了上一个按钮，而那美丽的海滩风景照片滑过来填补了轮播的最后一个位置。在新位置看到同一张图片有助于传达刚刚发生的事情，并确保我们的网站访问者没有错过任何事情。
- en: '![Time for action — creating a thumbnail slideshow](img/6709OS_10_img15.jpg)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![行动时间 — 创建缩略图幻灯片](img/6709OS_10_img15.jpg)'
- en: What just happened?
  id: totrans-215
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: We followed steps similar to what we've done in earlier jCarousel examples.
    Set up our HTML, wrote some CSS styles for the carousel, and then used jQuery
    to select the list of thumbs and called the `jCarousel()` method. Now, let's get
    more advanced and add a slideshow to our carousel.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 我们按照了我们在早期jCarousel示例中所做的类似步骤。设置了我们的HTML，为轮播器编写了一些CSS样式，然后使用jQuery选择了缩略图列表，并调用了`jCarousel()`方法。现在，让我们更进一步，向我们的轮播器添加幻灯片。
- en: Slideshow
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 幻灯片
- en: Now that we've got our simple carousel set up and styled the way that we'd like,
    let's dive into adding the crossfade slideshow feature.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置好了我们想要的简单轮播器并对其进行了样式化，让我们深入了解如何添加淡入淡出幻灯片特效。
- en: Time for action — adding the slideshow
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 — 添加幻灯片
- en: The jCarousel plugin has taken care of setting up the carousel for us, but we
    want to get fancy and also add a slideshow area.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: jCarousel插件已经为我们设置了轮播器，但我们想要变得花哨，并且还要添加一个幻灯片区域。
- en: 'We''re on our own here, so we''ll create a separate function for creating the
    slideshow area. Then we''ll call the new function inside our document ready statement:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在独自一人，所以我们将为创建幻灯片区域创建一个单独的函数。然后我们将在我们的文档就绪语句中调用新函数：
- en: '[PRE54]'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'First up, we''ll wrap a container around our thumbnail list to create the slideshow
    area. We find ourselves already in need of referring to the thumbnail list again,
    so let''s store a reference to it in a variable and update the call to the `jcarousel()`
    method as follows:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将在缩略图列表周围包裹一个容器，以创建幻灯片区域。我们发现自己已经需要再次引用缩略图列表，所以让我们将其存储在一个变量中，并更新对`jcarousel()`方法的调用如下：
- en: '[PRE55]'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Next, inside the `slideshowInit()` function, we'll call jQuery's `wrap()` method
    to wrap the list in a`<div>`.
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在`slideshowInit()`函数内部，我们将调用jQuery的`wrap()`方法将列表包裹在一个`<div>`中。
- en: '[PRE56]'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Next, we need to create the actual stage where the full-size images will be
    featured. We also need to create the next and previous buttons. We're going to
    use the `prepend()` method so that these elements are inserted into `stage-wrap
    div` before the thumbs list.
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要创建实际的舞台，全尺寸图像将在其中显示。我们还需要创建下一个和上一个按钮。我们将使用`prepend()`方法，以便这些元素在缩略图列表之前被插入到`stage-wrap
    div`中。
- en: '[PRE57]'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Now, we''ll pop back into our `styles.css` file and add some styles for these
    new elements as follows:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将回到我们的`styles.css`文件，并为这些新元素添加一些样式，如下所示：
- en: '[PRE58]'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: All of our full-size images are the same size, 600x400, so we can set that as
    the width and height of the stage and position the next and previous image buttons
    accordingly. If you view the page in a browser now, you should see a large blank
    area left for the stage and the next and previous image buttons on either side
    of it, all positioned above the thumbnail carousel.
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 所有的全尺寸图像都是相同大小的，600x400，所以我们可以将其设置为舞台的宽度和高度，并相应地定位下一个和上一个图像按钮。如果您现在在浏览器中查看页面，您应该会看到为舞台留下的大空白区域，以及缩略图轮播器上方的下一个和上一个图像按钮，所有这些都位于其上方。
- en: '![Time for action — adding the slideshow](img/6709OS_10_img16.jpg)'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时间 — 添加幻灯片](img/6709OS_10_img16.jpg)'
- en: 'We''ve got a carousel, we''ve got an empty stage, and we''ve got next and previous
    buttons on either side of our stage. Next, we''ll populate the stage with an image
    slideshow. We''ll get started by setting up a variable to refer to the stage and
    setting the `opacity` of the stage to `0` as shown in the following code:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们有一个轮播器，我们有一个空舞台，我们在舞台两侧有下一个和上一个按钮。接下来，我们将用图像幻灯片填充舞台。我们将通过设置一个变量来引用舞台，并将舞台的`opacity`设置为`0`来开始，如下所示的代码：
- en: '[PRE59]'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: We've hidden the stage from view so that we can load the images into it without
    the site visitor seeing the images loading. This lets us have some control over
    how the slideshow appears as it's being created. We're going to keep the stage
    invisible until there's something to see.
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们隐藏了舞台，以便我们可以在不让站点访问者看到图像加载的情况下将图像加载到其中。这让我们能够在创建幻灯片时对其外观有一些控制。在有东西可看之前，我们将保持舞台不可见。
- en: 'Next, we''ll need to get all the links to the full-size images and get ready
    to find the URL for each full-size image as follows:'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要获取所有到全尺寸图像的链接，并准备好查找每个全尺寸图像的URL，如下所示：
- en: '[PRE60]'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: The links to the full-size images are contained in the thumbnail list, which
    we can refer to with the `thumbs` variable. We're just finding all of the links
    in that list and storing them in a variable called `imageLinks`. Next, we're setting
    up an empty container called `src` where we're going to store the url for the
    images. Though for now, we're leaving that container empty. We'll fill it up in
    a moment.
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 全尺寸图像的链接包含在缩略图列表中，我们可以用`thumbs`变量引用它们。我们只是找到该列表中的所有链接，并将它们存储在一个名为`imageLinks`的变量中。接下来，我们设置一个名为`src`的空容器，我们将在其中存储图像的URL。尽管目前，我们将该容器留空。我们稍后会填充它。
- en: We've got 12 links to full-size images. For each link, we need to create a new
    image on the stage. We'll use jQuery's `each()` method to loop through each link
    and create an image.
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们有12个全尺寸图像的链接。对于每个链接，我们需要在舞台上创建一个新图像。我们将使用jQuery的`each()`方法循环遍历每个链接并创建一个图像。
- en: '[PRE61]'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: This is the jQuery way of *saying For each link, do this thing.*
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是jQuery的方式*说对于每个链接，执行此操作*。
- en: 'Next, we''ll create an image for each of the links. First up, we know that
    the `src` attribute of the image is going to equal the `href` attribute of the
    link. In other words, a link as follows:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将为每个链接创建一个图像。首先，我们知道图像的`src`属性将等于链接的`href`属性。换句话说，链接如下所示：
- en: '[PRE62]'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'will be used to create an image as follows:'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将用于创建如下图像：
- en: '[PRE63]'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'So the first thing we''ll do is get that empty `src` variable we created earlier
    and store the URL for the image in it:'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 所以我们要做的第一件事是获取之前创建的空`src`变量，并将图像的URL存储在其中：
- en: '[PRE64]'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Next, we're going to create an image with this `src` attribute. I'm going to
    store my newly created image in a variable called `img:`
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 接下来，我们将使用这个`src`属性创建一个图像。我将把我新创建的图像存储在一个名为`img`的变量中：
- en: '[PRE65]'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: We've set the display of the image to none, to hide all of the images created
    in this way. We've set the `src` attribute of the image to the `src` variable
    that's holding the URL of the image.
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们将图像的显示设置为none，以隐藏以这种方式创建的所有图像。我们已将图像的`src`属性设置为保存图像URL的`src`变量。
- en: Now that the image is created, we'll add it to the stage.
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在图像已创建，我们将其添加到舞台上。
- en: '[PRE66]'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: jQuery's `appendTo()` method lets us append the image to the stage.
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: jQuery的`appendTo()`方法允许我们将图像附加到舞台上。
- en: Now that the stage is full of images, let's go ahead and make it visible again.
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在舞台上充满了图像，让我们继续使其可见。
- en: '[PRE67]'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: Next, we want to show the appropriate image in the stage when one of the thumbnail
    links in the carousel is clicked. If you click the thumbnails now, you'll see
    that it opens the full-size image in the browser, but we want the image to show
    in the stage instead. We just need a way to reference a particular image in the
    stage from an image in the carousel. There are several different ways we could
    go about that there's nearly always multiple ways to get something done. In this
    case, we're going to take advantage of jQuery's `data()` method to store an index
    number in each thumbnail link. I'll then use that index to find and show the appropriate
    image.
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们想要在单击轮播中的缩略图链接时在舞台上显示相应的图像。如果现在单击缩略图，你会发现它会在浏览器中打开全尺寸图像，但我们希望图像显示在舞台上。我们只需要一种方式来从轮播中的图像引用舞台上的特定图像。我们可以通过几种不同的方式来做到这一点，几乎总是有多种方法可以完成某事。在这种情况下，我们将利用jQuery的`data()`方法在每个缩略图链接中存储索引号。然后我将使用该索引来找到并显示适当的图像。
- en: Basically, we're going to number the links in the list. You'd think they'd be
    numbered 1 through 12, but remember that JavaScript counting starts at 0, so the
    thumbnail images will be numbered 0 through 11\. When a thumbnail is clicked,
    we'll get the index number of that thumbnail, find the image on the stage with
    that same index and show it. So if our site visitor clicks thumbnail number 6,
    we'll find image number 6 on the stage and show it.
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 基本上，我们要对列表中的链接进行编号。你可能会认为它们会被编号为1到12，但请记住JavaScript计数从0开始，因此缩略图图像将被编号为0到11。当单击缩略图时，我们将获取该缩略图的索引号，找到舞台上具有相同索引的图像并显示它。所以如果我们的网站访客单击缩略图编号为6，我们将在舞台上找到编号为6的图像并显示它。
- en: 'First up, we have to assign the index numbers to the thumbnails. Inside the
    document ready statement, add a small function to loop through each thumbnail
    and add an index number as follows:'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 首先，我们必须为缩略图分配索引号。在文档就绪声明中，添加一个小函数来循环遍历每个缩略图，并添加索引号，如下所示：
- en: '[PRE68]'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Now that all of the thumbnail links are numbered, we can write a function that
    will find the appropriate image on the stage and show it when the thumbnail is
    clicked. Inside of the `slideshowInit()` function, we''ll bind our function to
    the click event:'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在所有的缩略图链接都已经编号，我们可以编写一个函数，在点击缩略图时找到舞台上适当的图像并显示它。在`slideshowInit()`函数内部，我们将把我们的函数绑定到点击事件上：
- en: '[PRE69]'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: The first thing to do inside our new function is to cancel the browser's default
    behavior. We don't want the link to open the image in the browser, so we'll return
    false.
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的新功能内部要做的第一件事是取消浏览器的默认行为。我们不希望链接在浏览器中打开图像，所以我们会返回false。
- en: '[PRE70]'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Next, we need to get the number that we stored in our link. We''ll use the
    `data()` method again to find the number:'
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要获取我们链接中存储的数字。我们将再次使用`data()`方法来找到这个数字：
- en: '[PRE71]'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: Now, we need to search in the stage for the image with that index number. I'm
    going to store the image in a variable called `nextImage` since it will be the
    next image to show.
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要在舞台上搜索具有该索引号的图像。我将把图像存储在一个名为`nextImage`的变量中，因为它将是要显示的下一个图像。
- en: '[PRE72]'
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: jQuery allows us to find an element by its index number using the `:eq` selector.
    For example, the `$('img:eq(1)')` selector would select the second image in a
    list of images. (Remember, JavaScript counting starts at 0 instead of 1.) In this
    case, I know which number image I want because it's the number stored in the link
    that was just clicked.
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: jQuery允许我们使用`:eq`选择器按索引号查找元素。例如，`$('img:eq(1)')`选择器会选择图像列表中的第二个图像。（记住，JavaScript计数从0开始，而不是从1开始。）在这种情况下，我知道我想要哪个数字图像，因为它是刚刚点击的链接中存储的数字。
- en: Now that we've got the next image, we need to show it. We're going to fade it
    in and add a class of `active` to it.
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经得到了下一个图像，我们需要显示它。我们将淡入它并添加一个`active`类。
- en: '[PRE73]'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: But don't forget that there's already another image visible. We need to find
    that one and fade it out. Since we're adding a class of `active` when the image
    is shown, we can easily find the currently displayed image by looking for the
    one with the class of `active:`
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 但是不要忘记，已经有另一张图像可见。我们需要找到那张图像并将其淡出。由于我们在图像显示时添加了一个`active`类，所以我们可以通过查找具有`active`类的图像轻松找到当前显示的图像：
- en: '[PRE74]'
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: Don't forget that we'll have to be sure to remove that `active` class so that
    only one image will be marked active at a time.
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不要忘记，我们必须确保删除那个`active`类，以便一次只有一个图像被标记为活动状态。
- en: If you refresh the page in the browser now, you'll see that clicking one of
    the thumbnail links in the carousel loads up the corresponding image in the slideshow.
    One image fades out while the next image fades in, in a nice smooth manner. Next,
    we'll get those next and previous buttons working so that we can use them to easily
    flip from one image to the next.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你现在在浏览器中刷新页面，你会看到点击幻灯片缩略图链接中的任意一个会在幻灯片中加载相应的图像。一张图像淡出，而下一张图像以一种流畅的方式淡入。接下来，我们将让下一个和上一个按钮工作起来，这样我们就可以轻松地翻转到下一个图像。
- en: What just happened?
  id: totrans-275
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: Phew! I hope you're still with me because this is a pretty awesome way to present
    a slideshow of images to your site visitors. I hope that you're starting to see
    that sometimes a plugin can be simply a beginning — you can get creative and invent
    your own functionality to layer on top of the default plugin behavior.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 哎呀！希望你还在继续跟着我，因为这是向你的网站访问者展示幻灯片的一种非常棒的方式。希望你开始意识到，有时候插件只是一个开始 — 你可以发挥创造力，发明自己的功能来叠加在默认插件行为之上。
- en: Next and previous buttons
  id: totrans-277
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 下一个和上一个按钮
- en: We're definitely making some nice progress. Clicking the thumbnails loads up
    the full-size version of the image in the slideshow, and we can use the carousel
    controls to scroll through the thumbnails and see them all. Now, let's get the
    next and previous image buttons working.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 我们确实取得了一些不错的进展。点击缩略图会在幻灯片中加载图像的全尺寸版本，我们可以使用幻灯片控件滚动缩略图并查看它们所有。现在，让我们让下一个和上一个图像按钮起作用。
- en: Time for action — activating the Next and Previous Buttons
  id: totrans-279
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 —— 激活下一个和上一个按钮
- en: Next up, we'll get those next and previous buttons around the image working
    so that the site visitor can easily flip through all the images.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将让围绕图像的下一个和上一个按钮工作起来，这样网站访问者可以轻松地翻阅所有的图像。
- en: 'Just like when we hooked up external controls to the carousel in the last example,
    we''ll get started by setting up a callback function for the carousel. We''ll
    call the function `nextPrev` and set it up as follows:'
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就像我们在上一个示例中为幻灯片连接外部控制一样，我们将从设置幻灯片的回调函数开始。我们将函数命名为`nextPrev`并设置如下：
- en: '[PRE75]'
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: Now the `nextPrev` function will be called when the carousel is initialized.
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在`nextPrev`函数将在旋转木马初始化时被调用。
- en: 'Inside the `nextPrev()` function, we''ll select the previous button and bind
    a function to the click event:'
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`nextPrev()`函数内部，我们将选择上一个按钮并绑定一个函数到点击事件：
- en: '[PRE76]'
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: When a site visitor clicks the previous button, we want to show the previous
    image in the slideshow. As usual with JavaScript, there's more than one way to
    go about that. Since we've already got a nice slide switch set up to happen when
    one of the thumbnails in the carousel is clicked, let's just go ahead and re-use
    that.
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当站点访问者点击上一个按钮时，我们希望显示幻灯片秀中的前一幅图像。与JavaScript一般一样，有多种方法可以实现这一点。由于我们已经设置好了一个好用的幻灯片切换功能，当旋转木马中的其中一个缩略图被点击时发生，让我们直接重复使用它。
- en: When our site visitor clicks the previous button, we'll find the previous thumbnail
    in the carousel and click it. That will kick off the image transition and allow
    us to re-use the code we've already written.
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当我们的站点访问者点击上一个按钮时，我们会找到旋转木马中的上一个缩略图并点击它。这将启动图像过渡，并允许我们重复使用我们已经编写的代码。
- en: 'So our first order of business is to find the currently selected thumbnail.
    However, we haven''t made it easy to find the current thumbnail. So let''s go
    back inside our `slideshowInit()` function and add a line of code to add a class
    to the current thumbnail:'
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 因此，我们的首要任务是找到当前选择的缩略图。但是，我们并没有简化找到当前缩略图的方法。因此，让我们回到`slideshowInit()`函数内部，并添加一行代码将一个类添加到当前的缩略图上：
- en: '[PRE77]'
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: Here, we're adding a class of `current` to the `<li>` tag that contains the
    clicked thumbnail. Then we're checking all the siblings to remove the `current`
    class if it exists somewhere else. This ensures that only one item in the carousel
    will have the `current` class at any given time.
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我们给包含点击缩略图的`<li>`标签添加了一个`current`类。然后，我们检查所有兄弟元素，以移除`current`类（如果它存在的话）。这确保了在任何给定时间内，旋转木马中只有一个项目具有`current`类。
- en: 'Now, if you''ll humor me for a minute, we''ll take a sidetrip to the CSS. Since
    we''re adding a class to the current thumbnail, we can make use of that for CSS
    purposes to style the current thumbnail differently than the rest. Let''s reduce
    the opacity of the thumbnails and make the current one 100 percent opaque to make
    it stand out. Open up `styles.css` and add some styles for this as follows:'
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，如果您能给我一个分钟，我们将进行一个旁支到CSS。由于我们正在向当前缩略图添加一个类，我们可以利用CSS来对当前缩略图进行样式设置，使其与其他不同。让我们打开`styles.css`并添加一些样式如下：
- en: '[PRE78]'
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'Back to the JavaScript! Now that we''ve got an easy way to select the current
    thumbnail, we just have to find the one with the `current` class. Inside the `prevNext()`
    function, we can get the current link this way:'
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 回到JavaScript！现在我们有一种简单的方法来选择当前的缩略图，我们只需找到具有`current`类的缩略图即可。在`prevNext()`函数内部，我们可以通过以下方式获取当前链接：
- en: '[PRE79]'
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'Since this is the function attached to the previous button, we''ll need to
    find the previous thumbnail in the list. I''ll use jQuery''s `prev()` method to
    find the previous thumbnail in the carousel:'
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于这是附加到上一个按钮的功能，我们需要找到列表中的上一个缩略图。我将使用jQuery的`prev()`方法在旋转木马中找到上一个缩略图：
- en: '[PRE80]'
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'However, if the current slide is the first one, there isn''t a previous slide
    to go to. In this case, if the site visitor is on the first slide and clicks the
    previous button, I want them to go to the last slide in the list so that it continues
    seamlessly. So, I''ll first check to see if there is a previous slide as follows:'
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然而，如果当前幻灯片是第一张，那就没有上一个幻灯片可供查看。在这种情况下，如果站点访问者在第一张幻灯片上并单击上一个按钮，我希望他们跳转到列表中的最后一张幻灯片，以便无缝续播。因此，我首先要检查是否有上一张幻灯片如下：
- en: '[PRE81]'
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: There are a couple of things to explain here. First, this line, translated into
    English from JavaScript, says *Is there a thumbnail before this one? If there
    is, then that's where we're going. If there's not, then we're heading over to
    the last thumbnail.*
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里有几件事情要解释。首先，这行代码从JavaScript翻译成英语说*这个缩略图之前有一个吗？如果有的话，那就是我们要去的地方。如果没有，那么我们将前往最后一个缩略图。*
- en: '[PRE82]'
  id: totrans-300
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'Here''s how a ternary operator works:'
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下是三元运算符的工作原理：
- en: '[PRE83]'
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE83]'
- en: It starts with the condition that we're checking which is followed by a ?. After
    that, we have the value if that condition is true followed by a :, and the value
    if the condition is false.
  id: totrans-303
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 它以我们正在检查的条件开始，后跟一个？。之后，我们有如果该条件为真，则跟随的值，后跟一个：，以及如果该条件为假则跟随的值。
- en: 'Now that we''ve found the previous slide, all that''s left to do is click the
    link inside as follows:'
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们找到了上一个幻灯片，剩下的就是点击其中的链接如下：
- en: '[PRE84]'
  id: totrans-305
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE84]'
- en: This will fire off the function we've written to change the slide in the browser.
    If you reload the page in the browser at this point and click the previous button
    a few times, you'll see that the image switches just as we'd expect.
  id: totrans-306
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将触发我们编写的在浏览器中更改幻灯片的函数。如果此时在浏览器中重新加载页面，然后点击几次前一个按钮，你会看到图片会像我们预期的那样切换。
- en: However, there's not much going on with the carousel. It's just sitting there.
    And right away the currently selected thumbnail is out of view. If I click the
    previous button once, then scroll the carousel, I can finally see the highlighted
    thumbnail. Ideally, the carousel would update itself to be sure that the current
    thumbnail was always visible.
  id: totrans-307
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 但是，轮播图上并没有太多的事情。它就那么呆在那里。而且马上当前选定的缩略图就看不见了。如果我点击一次前一个按钮，然后滚动轮播图，最终我才能看到高亮的缩略图。理想情况下，轮播图会更新自身，以确保当前缩略图始终可见。
- en: The jCarousel plugin makes it easy for us to scroll to any slide in the carousel.
    We only have to know which one we want to show. A part of the jCarousel's setup
    script also assigns a `jcarouselindex` attribute to each list item in the carousel.
    We can get that number and use it for scrolling purposes. First, let's figure
    out what `jcarouselindex` of the `prevSlide` is, since that's where we want to
    scroll.
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: jCarousel 插件使我们可以轻松地滚动到轮播图中的任何幻灯片。我们只需要知道我们想要显示哪一个。jCarousel 的设置脚本的一部分还为轮播图中的每个列表项分配了一个
    `jcarouselindex` 属性。我们可以获取该数字并将其用于滚动目的。首先，让我们弄清楚 `prevSlide` 的 `jcarouselindex`
    是多少，因为那是我们想要滚动到的位置。
- en: '[PRE85]'
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE85]'
- en: I'm using `parseInt()` to make sure that I get a number instead of a string.
    If I get a string back, it can mess up the scrolling in the carousel.
  id: totrans-310
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我使用`parseInt()`来确保我得到一个数字而不是一个字符串。如果我得到一个字符串，它可能会搞乱轮播图中的滚动。
- en: 'Now, all that''s left to do is scroll to the right thumbnail:'
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，剩下的就是滚动到正确的缩略图：
- en: '[PRE86]'
  id: totrans-312
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'Now if you refresh the page in the browser, you''ll see that clicking the previous
    button updates the carousel—the carousel will scroll so that the currently highlighted
    slide is the first one in the carousel. However, what if I decide I want the currently
    highlighted slide to appear in the middle? Easy! I''ve got seven slides showing.
    If the highlighted slide is in the middle, that means there will be three slides
    before it (and three slides after it). All I have to do is tell the carousel to
    make the slide three before the highlighted slide the first slide visible as follows:'
  id: totrans-313
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，如果你在浏览器中刷新页面，你会看到点击前一个按钮会更新轮播图——轮播图会滚动，以使当前高亮的幻灯片成为轮播图中的第一张。但是，如果我决定希望当前高亮的幻灯片出现在中间呢？很简单！我有七张幻灯片显示。如果高亮的幻灯片在中间，那么在它之前会有三张幻灯片（以及它之后的三张）。我所要做的就是告诉轮播图将高亮幻灯片的前三张幻灯片设为第一张可见的幻灯片，如下所示：
- en: '[PRE87]'
  id: totrans-314
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE87]'
- en: Now, for example, when I click the previous button, if the next slide is slide
    number 5, slide number 2 will be shown first in the carousel, which means slide
    number 5 will be right in the middle of the carousel. Refresh the page in the
    browser and give it a try. Nice, right?
  id: totrans-315
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，例如，当我点击前一个按钮时，如果下一张幻灯片是第 5 张，轮播图将首先显示第 2 张，这意味着第 5 张将出现在轮播图的中间。在浏览器中刷新页面，试一试。很棒，对吧？
- en: All that's left to do is get the next button working as well as the previous
    one. The function is almost identical with a few tweaks made.
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 唯一剩下的就是使下一个按钮像前一个按钮一样工作。函数几乎相同，只需做一些微调。
- en: '[PRE88]'
  id: totrans-317
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE88]'
- en: I'm using the `next()` method instead of the `prev()` method to get the next
    slide rather than the previous one. Aside from that, the function is the same.
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我使用`next()`方法而不是`prev()`方法来获取下一张幻灯片而不是上一张。除此之外，函数是相同的。
- en: Now if you refresh the page in the browser, you'll see that the next and previous
    image buttons both work — they show the correct image in the slideshow and scroll
    the carousel so that the current image is highlighted right in the middle of the
    carousel.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你在浏览器中刷新页面，你会看到下一个和前一个图片按钮都可以使用——它们会显示幻灯片秀中的正确图片，并滚动轮播图，以使当前图片在轮播图的中间高亮显示。
- en: What just happened?
  id: totrans-320
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: We combined some external carousel controls with a slideshow to create a robust
    slideshow/carousel combination. The slideshow can be controlled from the carousel
    — clicking a thumbnail in the carousel will load up the full-size version of the
    image in the slideshow stage. And clicking the next and previous buttons in the
    stage will update the carousel, scrolling it so that the currently highlighted
    thumbnail appears in the middle of the carousel's viewable area.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将一些外部的轮播控制与幻灯片放在一起，创建了一个强大的幻灯片/轮播组合。幻灯片可以从轮播控制——点击轮播中的缩略图将在幻灯片舞台中加载出完整尺寸的图像。并且点击舞台中的下一个和上一个按钮将更新轮播，滚动轮播，以便当前高亮的缩略图出现在轮播的可见区域中间。
- en: We started with some basic HTML, wrote a custom CSS skin for the carousel, and
    called the `jcarousel()` method to get the carousel working. Next, we wrote a
    function to dynamically create the slideshow stage and buttons. Finally, we made
    it all work together with some fancy jQuery footwork.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从一些基本的 HTML 开始，为轮播编写了自定义的 CSS 皮肤，并调用了 `jcarousel()` 方法来使轮播工作。接下来，我们编写了一个函数来动态创建幻灯片舞台和按钮。最后，我们通过一些精巧的
    jQuery 操作使它们都能协同工作。
- en: Summary
  id: totrans-323
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We took a look at using the jCarousel plugin in a variety of situations we created
    a simple horizontal thumbnail carousel, a vertical news ticker, a featured content
    slider with external controls, and finally, a carousel/slideshow combo that really
    showed off the capabilities of the jCarousel plugin. Now you've added another
    powerful tool to your toolbox — the jCarousel plugin is flexible, powerful, and
    can be customized to work in a variety of different situations.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 我们研究了在各种情况下使用 jCarousel 插件的方法，我们创建了一个简单的水平缩略图轮播，一个垂直新闻滚动条，一个带有外部控制的特色内容滑块，最后，一个展示了
    jCarousel 插件功能的轮播/幻灯片组合。现在，你在工具箱中又增加了一个强大的工具——jCarousel 插件是灵活、强大的，并且可以定制以适用于各种不同的情况。
- en: Next up, we'll take a look at creating an interactive data grid.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将看一下创建交互式数据表格。
