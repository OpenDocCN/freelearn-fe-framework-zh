["```js\nimport { signal } from '@angular/core';\nconst name=signal('John Doe');\n```", "```js\nname = signal<string>('John Doe');\n```", "```js\ncurrencies=signal(['EURO', 'DOLLAR', 'Japanese yen', 'Sterling'])\n```", "```js\nfavouriteRecipe=signal<Recipe>({\n  id: 1,\n  title: \"Lemon cake\",\n  prepTime: 10,\n  cookingTime: 35,\n  yield: 10,\n  imageUrl: \"lemon-cake.jpg\"\n})\n```", "```js\nconsole.log(this.name());\nconsole.log(this.favouriteRecipe());\n//console output\nJohn Doe\n{\"id\": 1,\"title\": \"Lemon cake\",\"prepTime\": 10, \"cookingTime\": 35,\"yield\": 10,\"imageUrl\": \"lemon- cake.jpg\" }\n}\n```", "```js\n@for (currency of currencies(); track currency) {\n<option>{{currency}}</option>\n} @empty {\n<div>There are no currencies</div>\n}\n<div>{{favouriteRecipe().title}}</div>\n```", "```js\nname = signal('John Doe');\nconsole.log(this.name());\nthis.name.set('Mary Jane');\nconsole.log(this.name());\n//console output\nJohn Doe\nMary Jane\n```", "```js\nname = signal('John Doe');\nconsole.log(this.name());\nthis.name.update(value=>'Full Name: '+ value);\nconsole.log(this.name());\n//console output\nFull Name: John Doe\n```", "```js\nimport { signal, computed } from '@angular/core';\nconst firstName = signal('John');\nconst lastName = signal('Doe');\nconst fullName = computed(() => `${firstName()} ${lastName()}`);\n```", "```js\n<button (click)=\"update()\">Update</button>\n```", "```js\ncounter = signal(0);\nconstructor() {\n  effect(() => {\n    console.log('The updated value is', this.counter());\n  });\n}\nupdate() {\n  this.counter.update((current) => current + 1);\n}\n```", "```js\nimport { toSignal } from '@angular/core/rxjs-interop';\nvalue$ = of([{ name: 'EURO', id: 1 }]);\nvalueAsSignal = toSignal(this.value$, { initialValue: [] });\nconstructor() {\neffect = effect(() => console.log(this.valueAsSignal()));\n}\n//console output\n{ name: 'EURO', id: 1 }\n```", "```js\nimport { toSignal } from '@angular/core/rxjs-interop';\nvalues$ = of(10, 20, 30);\nthis.values$.subscribe(value=> console.log(value));\n//console output\n10, 20, 30\n```", "```js\nimport { toSignal } from '@angular/core/rxjs-interop';\nvalues$ = of(10, 20, 30);\nvaluesAsSignal = toSignal(this.values$, { initialValue: 0 });\nConstructor() {\n  effect = effect(() =>\n    console.log(this.valuesAsSignal()));\n}\n//console output\n30\n```", "```js\nimport { toSignal } from '@angular/core/rxjs-interop';\n  values$ = of(10, 20, 30).pipe(delay(5));\nvaluesAsSignal = toSignal(this.values$, { initialValue: 0 });\n  effect = effect(() =>\n    console.log(this.valuesAsSignal()));\n//console output\n10, 20, 30\n```", "```js\n  value = new BehaviorSubject(10);\n  constructor() {\n    this.value.asObservable().pipe(tap(x=>console.log(\n      `The value is : ${x}`))).subscribe();\n    this.value.next(20);\n    this.value.next(30);\n}\n//console output\nThe value is : 10\nThe value is : 20\nThe value is : 30\n```", "```js\nvalue = signal(10);\n  constructor() {\n    toObservable(this.value).pipe(tap(x=>console.log(\n      `The value is : ${x}`))).subscribe();\n    this.value.set(20);\n    this.value.set(30);\n}\n//console output\nThe value is : 30\n```", "```js\nexport class RecipesService {\n  recipes$ =\n    this.http.get<Recipe[]>(`${BASE_PATH}/recipes`);\n  constructor(private http: HttpClient) { }\n}\n```", "```js\nexport class RecipesListComponent {\n  recipes$ = this.service.recipes$;\n  constructor(private service: RecipesService) {\n}\n```", "```js\n@if (recipes$ | async; as recipes) {\n// extra code here\n}\n```", "```js\nimport { toSignal } from '@angular/core/rxjs-interop';\nexport class RecipesService {\n  recipes$ =\n    this.http.get<Recipe[]>(`${BASE_PATH}/recipes`);\n  recipes=toSignal(this.recipes$, {initialValue: [] as\n    Recipe[]});\n  constructor(private http: HttpClient) { }\n}\n```", "```js\nexport class RecipesListComponent {\nrecipes = this.service.recipes;\nconstructor(private service: RecipesService) {}}\n```", "```js\n@if (recipes(); as recipes) {\n// extra code here\n}\n```", "```js\nrecipes$.pipe(catchError(() => of([])));\n```", "```js\nobservable$.pipe(\n    catchError((error: HttpErrorResponse) =>of({ status: 'error', description: error })));\n```", "```js\n  recipes = toSignal(this.http.get<Recipe[]>(`${BASE_PATH}/recipes`), { initialValue: [] as Recipe[], rejectErrors:true });\n```", "```js\nexport class GlobalErrorHandler implements ErrorHandler {\n    handleError(error: any): void {\n      alert(error.message);\n    }\n}\n```", "```js\nexport class RecipesService {\n  recipes$ =\n    this.http.get<Recipe[]>(`${BASE_PATH}/recipes`);\n  private filterRecipeSubject = new\n    BehaviorSubject<Recipe>({ title: '' });\n  filterRecipesAction$ =\n    this.filterRecipeSubject.asObservable();\n  constructor(private http: HttpClient) { }\n  updateFilter(criteria: Recipe) {\n    this.filterRecipeSubject.next(criteria);\n  }\n}\n```", "```js\nexport class RecipesListComponent {\n  recipes$ = this.service.recipes$;\n  filterRecipesAction$ = this.service.filterRecipesAction$;\n  filteredRecipes$ = combineLatest([this.recipes$,\n    this.filterRecipesAction$]).pipe(\n    map(([recipes, filter]: [Recipe[], Recipe]) => {\n    const filterTitle = filter?.title?.toLowerCase() ?? '';\n    return recipes.filter(recipe =>\n    recipe.title?.toLowerCase() .includes(filterTitle))\n  })\n  );\n  constructor(private service: RecipesService) {\n}}\n```", "```js\nexport class RecipesService {\n  recipes =\n    toSignal(this.http.get<Recipe[]>(\n    `${BASE_PATH}/recipes`), { initialValue: [] as Recipe[]\n    });\n  filterRecipe = signal({ title: '' } as Recipe);\n  constructor(private http: HttpClient) { }\n  updateFilter(criteria: Recipe) {\n    this.filterRecipe.set(criteria);\n  }}\n```", "```js\nexport class RecipesListComponent {\n  recipes = this.service.recipes;\n  recipesFilter = this.service.filterRecipe;\n  filteredRecipes = computed(() => {\n    const filterTitle =\n      this.recipesFilter()?.title?.toLowerCase() ?? '';\n    return this.recipes().filter(recipe =>\n      recipe.title?.toLowerCase()\n      .includes(filterTitle));\n  })\n  constructor(private service: RecipesService) {\n  }\n}\n```", "```js\n@if (filteredRecipes(); as recipes) {\n    // Extra code here// Extra code here\n}\n```", "```js\nexport class SharedDataService {\nprivate selectedRecipeSubject = new BehaviorSubject<Recipe>({});selectedRecipeAction$ = this.selectedRecipeSubject.asObservable();updateSelectedRecipe(recipe: Recipe) { this.selectedRecipeSubject.next(recipe);\n  }\n}\n```", "```js\nexport class RecipeDetailsComponent {\nconstructor(private sharedService: SharedDataService) { }\nselectedRecipe$ = this.sharedService.selectedRecipeAction$;\n}\n```", "```js\n@if (selectedRecipe$ | async; as recipe) {\n}\n```", "```js\nexport class SharedDataService {\n  selectedRecipe = signal({} as Recipe);\n  updateSelectedRecipe(recipe: Recipe) {\n    this.selectedRecipe.set(recipe);\n  }\n}\n```", "```js\nexport class RecipeDetailsComponent {\n  constructor(private sharedService: SharedDataService) { }\n  selectedRecipe = this.sharedService.selectedRecipe;\n}\n```", "```js\nexport class SharedDataService {\n  selectedRecipeId = signal<number | undefined>(undefined);\n  updateSelectedRecipe(recipeId: number | undefined) {\n    this.selectedRecipeId.set(recipeId);\n  }\n}\n```", "```js\neditRecipe(recipe: Recipe) {\n    this.sharedService.updateSelectedRecipe(recipe.id);\n    this.router.navigate(['/recipes/details']);\n}\n```", "```js\n  recipe$ =\n    toObservable(this.selectedRecipeId).pipe(filter(\n    Boolean), switchMap(id =>\n    this.http.get<Recipe>(`${BASE_PATH}/recipes/${id}`)\n  ));\n```", "```js\nselectedRecipe = toSignal(this.sharedService.recipe$);\n```", "```js\nTypeScript\n@Component({\n  selector: 'app-shipping',\n})\nexport class ShippingComponent {\n  addressLine2 = input<string>();\n  identifier = input(0);\n  addressLine1 = input.required<string>();\n}\n```", "```js\n{{addressLine1()}}\n{{addressLine2()}}\n```", "```js\n< app-shipping addressLine1 =\"2300 Vision Lane\">\n< app-shipping [addressLine1]=\"addressProperty\">\n< app-shipping [label]=\"addressAsSignalProperty()\">\n```", "```js\n  identifier = input(0,{alias: 'id'});\n```", "```js\n  fullAddress = computed(() => `${this.addressLine1()}\n    ${this.addressLine2()}` );\n```", "```js\nconstructor() {\n    effect(() => {\n      console.log(this.identifier());\n    });\n}\n```", "```js\n    identifier = model(0,{alias: 'id'});;\n  constructor() {\n    setInterval(() => {\n      this. identifier.set(\"000524\");\n    }, 4000)\n  }\n```", "```js\n<app-shipping [(id)]=counter></ app-shipping>\n{{counter()}}\n```", "```js\n<app-shipping [(id)]=counter (idChange)=\"updateMessage()\" ></ app-shipping>\n```"]