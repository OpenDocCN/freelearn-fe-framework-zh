- en: Polish with SASS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After covering some under the hood plumbing improvements with ngrx state management
    in the previous chapter,  it's finally time to polish this app to improve it's
    overall look and feel. The timing of styling is completely up to your flow of
    development, and oftentimes, we like to polish as we go. In this book, we chose
    to avoid intermixing polishing via CSS with feature development to keep the concepts
    more focused. However, now that we're here, we couldn't be more excited about
    getting that nice look on our app.
  prefs: []
  type: TYPE_NORMAL
- en: Since standard CSS can become burdensome to maintain as styling grows, we will
    integrate SASS for help. In fact, we will utilize a community plugin developed
    by the man who helped come up with the NativeScript brand name itself, Todd Anglin.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Integrating SASS into your app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Best practices when building the core theme's SASS setup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a scalable styling setup to maximize style reuse across iOS and Android
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using font icons, such as *Font Awesome*, using the nativescript-ngx-fonticon
    plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Polishing with SASS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SASS is the most mature, stable, and powerful professional grade CSS extension
    language in the world... Sass is an extension of CSS that adds power and elegance
    to the basic language. It allows you to use variables, nested rules, mixins, inline
    imports, and more, all with a fully CSS-compatible syntax. SASS helps keep large
    stylesheets well-organized and get small stylesheets up and running.
  prefs: []
  type: TYPE_NORMAL
- en: http://sass-lang.com/documentation/file.SASS_REFERENCE.html
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sounds good? You bet.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will first want to install a community plugin published by Todd Anglin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This plugin will set up a hook that will autocompile your SASS to CSS before
    building your app, so you don't need to worry about installing any other build
    tools.
  prefs: []
  type: TYPE_NORMAL
- en: We now want to organize our SASS source files in a particular way that will
    lend itself to ease of maintenance for not only shared styles between iOS and
    Android, but also easily allow platform-specific tweaks/overrides. The core theme
    installed by default (`nativescript-theme-core`) ships with a complete set of
    SASS source files, which are already organized to help you build your custom SASS
    on top of it easily.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by renaming the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`app.ios.css` to `app.ios.**scss**`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`app.android.css` to `app.android.**scss**`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Then for the contents of `app.ios.scss`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'And for `app.android.scss`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Okay, now, let''s create that `style` folder with the various partial SASS
    import files to aid our setup, starting with the variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '`style/_variables.scss`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: There are actually many different skins/colors you could base your app's style
    sheets on. Check out the following section of the docs to see what's available: [http://docs.nativescript.org/ui/theme#color-schemes](http://docs.nativescript.org/ui/theme#color-schemes).
    For our app, we will base our colors off the *dark* skin.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, create the common shared SASS file, which is where the bulk of the shared
    styles will go. In fact, we will take everything we had defined in the `common.css`
    file and place them here (thereafter, removing the `common.css` file we had before):'
  prefs: []
  type: TYPE_NORMAL
- en: '`style/_common.scss`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This uses our variables file we just created, which enables us to provide our
    own baseline variables from the core theme with our own custom tweaks to the color.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, create the Android override file in case we need it:'
  prefs: []
  type: TYPE_NORMAL
- en: '`styles/_android-overrides.scss`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This imports the Android overrides from the core theme while still allowing
    us to apply our own custom overrides if needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can now do the same for iOS:'
  prefs: []
  type: TYPE_NORMAL
- en: '`styles/_ios-overrides.scss`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Lastly, we can now convert any component-specific `.css` files to `**.scss**`.
    We had one component using its own defined styles, `record.component.css`. Just
    rename it to `**.scss**`. The NativeScript SASS plugin will autocompile any nested
    `.scss` files it finds.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two more things you may want to do:'
  prefs: []
  type: TYPE_NORMAL
- en: Ignore all `*.css` files from git in addition to hiding `.css` and `.js` files
    in your IDE.
  prefs: []
  type: TYPE_NORMAL
- en: You don't want to end up with merge conflicts in the future with other developers
    since your `.css` files will all be generated fresh via the SASS compilation each
    time you build the app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following to your `.gitignore` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, to hide `.js` and `.css` files in VS Code, we could do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s a screenshot of what the structure should look like now:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00048.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Using font icons with the nativescript-ngx-fonticon plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It sure would be nice to swap all those boring label buttons out with nice crisp
    icons, so let's do that. NativeScript provides support for custom font icons out
    of the box using Unicode values on text attributes on buttons, labels, and much
    more. However, with Angular, we can take advantage of another nifty plugin, which
    will provide a nice Pipe allowing us to use the font names for ease of use and
    clarity.
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the following plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: For this app, we will use the versatile font-awesome icons, so let's download
    that package here from the official site: [http://fontawesome.io/](http://fontawesome.io/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside of it, we will find the font files and the css we will need. We want
    to first copy the `fontawesome-webfont.ttf` file into a `new fonts` folder we
    will create in the `app` folder. NativeScript will look for any custom font files
    in that folder when it builds the app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00049.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We now want to copy the `css/font-awesome.css` file into our app folder as well.
    We can either place it in the root of the folder or in a subfolder. We will create
    an `assets` folder to house this and potentially other similar items in the future.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, we need to modify this `.css` file slightly. The `nativescript-ngx-fonticon`
    plugin only works with the font class names and doesn''t need any of the utility
    classes font-awesome provides. So, we will need to modify it to remove a lot of
    what was at the top to look like this instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00050.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You can learn more about this in the following video: [https://www.youtube.com/watch?v=qb2sk0XXQDw](https://www.youtube.com/watch?v=qb2sk0XXQDw).
  prefs: []
  type: TYPE_NORMAL
- en: 'We also set up git to ignore all `*.css` files previously; however, we don''t
    want to ignore the following file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we are ready to set up the plugin. Since this should be part of the core
    setup of our app, we will modify `app/modules/core/core.module` with our plugin
    configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Since the module relies on the `TNSFontIconService`, let's modify our root component
    to inject it, making sure that Angular's DI instantiates the singleton for us
    to use app-wide.
  prefs: []
  type: TYPE_NORMAL
- en: '`app/app.component.ts`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we want to make sure that the `fonticon` pipe is accessible to any of
    our view components, so let''s import and export the module from our `SharedModule`
    at `app/modules/shared/shared.module.ts`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Lastly, we will need a class to designate which components should be used from
    font-awesome to render themselves. Since this class will be shared across iOS/Android,
    modify `app/style/_common.scss` with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The reason we define two font families is because of the differences between
    iOS and Android. Android uses the name of the file for the font-family (in this
    case, `fontawesome-webfont.ttf`). Whereas iOS uses the actual name of the font;
    examples can be found at [https://github.com/FortAwesome/Font-Awesome/blob/master/css/font-awesome.css#L8](https://github.com/FortAwesome/Font-Awesome/blob/master/css/font-awesome.css#L8).
    You *could* rename the font filename to `FontAwesome.ttf` to use just `font-family:
    FontAwesome` if you wanted. You can learn more at [http://fluentreports.com/blog/?p=176](http://fluentreports.com/blog/?p=176).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s try out this new ability to render icons in our app. Open `app/modules/mixer/components/mix-list.component.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s also tweak the background color of our `ListView` to be black for now.
    We can even use predefined variables from the core theme now with SASS in `app/style/_common.scss`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00051.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Our composition listing view is now starting to look pretty decent.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s keep going and add some icons to our track listing view in `app/modules/player/components/track-list/track-list.component.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: We are swapping out the Switch we had with a Label designed to toggle two different
    icons instead. We are also taking advantage of the core theme's handy color classes
    like c-ruby.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also improve our custom `ActionBar` template with some icons:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now style up the player controls at `app/modules/player/components/player-controls/player-controls.component.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'We will take advantage of more helper classes from the core theme. The `c-white`
    class turns our icon white, and `t-30` sets the `font-size: 30`. The latter is
    short for `text-30`, and the other `color-white`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00052.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'It''s amazing how some styling polish can really bring out the personality
    of your app. Let''s crack out the brush one more time on our record view at `app/modules/recorder/components/record.component.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'We can adjust our component class to handle the `recordBtn` and `playBtn` now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, to paint everything into place, we can add this to our `app/modules/recorder/components/record.component.scss`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'With this polish, we now have the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00053.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Finishing touches
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s use color to finalize our initial app style. It''s time to change the
    base color used in the `ActionBar` to provide the overall feeling we want with
    the app. Let''s start by defining a few variables in `app/style/_variables.scss`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'With those few changes, we have given our app a different (objectively sleeker)
    vibe:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00054.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we were finally able to add some nice polishing touches to
    the app's look and feel. We were able to install the `nativescript-dev-sass` plugin,
    which adds a compilation step to build our CSS while maintaining a clean approach
    to styling. Knowing how best to take advantage of the core theme's SASS with proper
    file organization is key to gaining a flexible base to work with. Take the concepts
    presented in this chapter and let us know how they helped you achieve the styling
    goals you are after; we would love to hear about it!
  prefs: []
  type: TYPE_NORMAL
- en: We also took a look at how to work with the `nativescript-ngx-fonticon` plugin
    to utilize font icons throughout our app. This helped clean up clunky textual
    labels with concise iconic visuals.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will take a look at how to unit test several key features
    to future proof our app's codebase against new feature integrations, which might
    introduce regressions. Testing to the rescue!
  prefs: []
  type: TYPE_NORMAL
