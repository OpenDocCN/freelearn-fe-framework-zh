- en: Chapter 8. Events
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 8 章 事件
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Using orientation events
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用方向事件
- en: Using scroll events
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用滚动事件
- en: Using touch events
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用触摸事件
- en: Using virtual mouse events
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用虚拟鼠标事件
- en: Using page initialization events
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用页面初始化事件
- en: Using page load and remove events
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用页面加载和移除事件
- en: Using page change events
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用页面切换事件
- en: Using page transition and animation events
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用页面过渡和动画事件
- en: Using layout events
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用布局事件
- en: Introduction
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: The jQuery Mobile framework provides specific events in addition to the default
    native events for both desktop and mobile platforms. It allows you to bind to
    these events using the jQuery `bind()` or `live()` method, and thus allows you
    to perform custom actions. This chapter shows you how to use the events that are
    available in the jQuery Mobile framework.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery Mobile 框架不仅提供了默认的本机事件，还为桌面和移动平台提供了特定的事件。它允许你使用 jQuery 的 `bind()` 或 `live()`
    方法绑定到这些事件，并允许你执行自定义操作。本章将向您展示如何使用 jQuery Mobile 框架中提供的事件。
- en: Using orientation events
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用方向事件
- en: The jQuery Mobile framework triggers an `orientationchange` event when the orientation
    (**portrait** or **landscape**) of the mobile device is changed. This recipe shows
    you how to use the `orientationchange` event.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当移动设备的方向（**纵向** 或 **横向**）改变时，jQuery Mobile 框架会触发一个 `orientationchange` 事件。这个示例向您展示如何使用
    `orientationchange` 事件。
- en: Getting ready
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Copy the full code of this recipe from the `code/08/orientation` sources folder.
    You can launch this code by using the URL `http://localhost:8080/08/orientation/main.html`
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 从 `code/08/orientation` 源文件夹中复制此示例的完整代码。您可以通过使用 URL `http://localhost:8080/08/orientation/main.html`
    启动此代码。
- en: How to do it...
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'Carry out the following steps:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤：
- en: 'Create `main.html` as follows:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `main.html` 如下所示：
- en: '[PRE0]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Add script to handle the `orientationchange` event in the `<head>` section:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `<head>` 部分添加处理 `orientationchange` 事件的脚本：
- en: '[PRE1]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: How it works...
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Create `main.html` with page content, as shown in the preceding code snippet.
    Add the given script and bind the `orientationchange` event to a callback function.
    Here, set the current orientation of the device to the `h1` header of the page.
    You can get the device orientation by using the `data.orientation` property of
    the callback function.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 `main.html`，其中包含页面内容，如前面的代码片段所示。添加给定的脚本，并将 `orientationchange` 事件绑定到回调函数。在这里，将设备的当前方向设置为页面的
    `h1` 标题。您可以通过回调函数的 `data.orientation` 属性获取设备的方向。
- en: When the page loads, change the orientation of the device; the header text will
    show **portrait** or **landscape** based on the current orientation.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 当页面加载时，改变设备的方向；头部文本将根据当前方向显示 **纵向** 或 **横向**。
- en: There's more...
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多信息...
- en: In platforms where the orientation property is not supported (`$.support.orientation`
    is `false`), or when the `$.mobile.orientationChangeEnabled` global configuration
    is set to `false`, the framework binds the resize event handler to handle the
    orientation change of the device.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在不支持 orientation 属性的平台（`$.support.orientation` 为 `false`）或者 `$.mobile.orientationChangeEnabled`
    全局配置设置为 `false` 时，框架会绑定 resize 事件处理程序来处理设备方向的改变。
- en: The orientationChangeEnabled global configuration
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orientationChangeEnabled 全局配置
- en: You can configure the `$.mobile.orientationChangeEnabled` configuration in the
    `mobileinit` event handler, which gets invoked at the start of your app. This
    must be done before including the `jquery.mobile.js` script.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在应用程序开始时调用的 `mobileinit` 事件处理程序中配置 `$.mobile.orientationChangeEnabled` 配置。这必须在包含
    `jquery.mobile.js` 脚本之前完成。
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Using scroll events
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用滚动事件
- en: When you scroll, the jQuery Mobile framework fires the scrollstart event. When
    you stop scrolling the `scrollstop` event is triggered. This recipe shows you
    how to use these two events.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当您滚动时，jQuery Mobile 框架会触发 scrollstart 事件。当您停止滚动时，会触发 `scrollstop` 事件。这个示例向您展示如何使用这两个事件。
- en: Getting ready
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Copy the full code of this recipe from the `code/08/scroll` sources folder.
    You can launch this code by using the URL `http://localhost:8080/08/scroll/main.html`
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 从 `code/08/scroll` 源文件夹中复制此示例的完整代码。您可以通过使用 URL `http://localhost:8080/08/scroll/main.html`
    启动此代码。
- en: How to do it...
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'Carry out the following steps:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤：
- en: 'Create `main.html` with the page content `div` styled with a large value for
    its height, so that the scroll bars appear:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `main.html`，其中页面内容的 `div` 元素使用一个较大的高度值进行样式设置，以便出现滚动条：
- en: '[PRE3]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Add the following script to the `<head>` section to handle the `scroll` events:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `<head>` 部分添加以下脚本来处理 `scroll` 事件：
- en: '[PRE4]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: How it works...
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Create `main.html` as shown in the preceding code. Add a `div` container with
    a `height` of `1000px` to the page content. This will make the vertical scroll
    bars appear. Now, add the given script to the `<head>` section of the page. Bind
    the `scrollstart` event to a callback function that updates the page header text.
    Similarly bind the `scrollstop` event to a callback function that updates the
    header text. Now, scroll the page holding the vertical scroll bar handle. You
    can see the page header text showing `"Scrolling now..."`, and when you stop or
    pause scrolling, the text is updated to `"Scrolling done!"`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中创建`main.html`。在页面内容中添加一个高度为`1000px`的`div`容器。这将使垂直滚动条出现。现在，在页面的`<head>`部分添加给定的脚本。将`scrollstart`事件绑定到一个回调函数，该函数更新页面头部文本。类似地，将`scrollstop`事件绑定到一个回调函数，该函数更新头部文本。现在，保持垂直滚动条手柄，滚动页面。您可以看到页面头部文本显示为`"正在滚动..."`，当您停止或暂停滚动时，文本更新为`"滚动完成!"`。
- en: There's more...
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: There is an issue as to how the `scrollstart` event works on iOS devices. DOM
    manipulation is not allowed during scroll, and the event gets queued and triggered
    as soon as the scrolling stops. So keep this in mind when you work with scroll
    events on iOS devices. You will have to have to make your changes before scrolling
    starts and not as soon as it starts.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在iOS设备上，`scrollstart`事件的工作方式存在问题。在滚动期间不允许DOM操作，并且事件被排队，一旦滚动停止就会触发。因此，在处理iOS设备上的滚动事件时，请记住这一点。您将不得不在滚动开始之前进行更改，而不是一开始就进行更改。
- en: Using touch events
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用触摸事件
- en: The jQuery Mobile framework provides five touch events. They are the `tap` ,
    `taphold` , `swipe` , `swipeleft` , and `swiperight` events. The tap event is
    fired when you tap the screen. If the tap duration is longer, the `taphold` event
    is fired first and then the `tap` event is fired after you lift your finger. When
    you swipe across the screen, the `swipe` event is fired first and then the `swipeleft`
    or `swiperight` events are fired, based on the direction of your swipe action.
    This recipe shows you how to use these touch events.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery Mobile框架提供了五个触摸事件。它们是`tap`、`taphold`、`swipe`、`swipeleft`和`swiperight`事件。当您点击屏幕时，将触发`tap`事件。如果点击持续时间较长，则首先触发`taphold`事件，然后在您放开手指后触发`tap`事件。当您在屏幕上滑动时，首先触发`swipe`事件，然后根据您滑动的方向触发`swipeleft`或`swiperight`事件。本配方向您展示了如何使用这些触摸事件。
- en: In this recipe, a yellow box is shown where you last tapped the screen. A green
    box is created each time you tap and hold. You can also see how the swipe action
    works by swiping a blue bar to the left or right edge of the screen.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，显示一个黄色框，显示您最后点击屏幕的位置。每次您点击并保持时，都会创建一个绿色框。您还可以通过将蓝色条拉到屏幕的左侧或右侧来查看滑动操作的工作方式。
- en: Getting ready
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Copy the full code of this recipe from the `code/08/touch` sources folder. You
    can launch this code by using the URL `http://localhost:8080/08/touch/main.html`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 从`code/08/touch`源文件夹复制此配方的完整代码。您可以通过使用URL `http://localhost:8080/08/touch/main.html`
    来启动此代码。
- en: How to do it...
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: The steps to be followed are
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 应该遵循的步骤是
- en: 'In `main.html`, define the following styles in the `<head>` tag:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`main.html`中，在`<head>`标签中定义以下样式：
- en: '[PRE5]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Add the page content with two `<div>` tags styled with the blue bar and yellow
    box:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用两个带有蓝色条和黄色框样式的`<div>`标签添加页面内容：
- en: '[PRE6]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Add the following script to the `<head>` section, to handle the `tap` and `taphold`
    events:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`<head>`部分添加以下脚本，以处理`tap`和`taphold`事件：
- en: '[PRE7]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Finally, handle the `swipe`, `swipeleft`, and `swiperight` events:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，处理`swipe`、`swipeleft`和`swiperight`事件：
- en: '[PRE8]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: How it works...
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In `main.html`, add the `style` tag and define the `box`, `yellow`, `green`,
    and `blue` classes. Add an empty `div` tag with `id="movingbox"`, and set the
    attribute `class="box yellow"`. This creates a `60px` wide yellow-colored square.
    Next, add an empty `div` tag with `id="edgebar"`, and set the attribute `class="box
    blue"`. This creates a `60px` `wide blue bar on the edge of the screen as shown
    in the following screenshot. The yellow box is hidden below the blue bar as it
    has a lower `z-index` value.`
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在`main.html`中，添加`style`标签，并定义`box`、`yellow`、`green`和`blue`类。添加一个空的`div`标签，设置属性`id="movingbox"`，并设置属性`class="box
    yellow"`。这将创建一个`60px`宽的黄色方块。接下来，添加一个空的`div`标签，设置属性`id="edgebar"`，并设置属性`class="box
    blue"`。这将在屏幕边缘创建一个`60px`宽的蓝色条，如下面的截图所示。黄色框隐藏在蓝色条下面，因为它具有较低的`z-index`值。
- en: '`![How it works...](img/7225_08_01.jpg)`'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`![它是如何工作的...](img/7225_08_01.jpg)`'
- en: '`Now add the given script to the `<head>` section of `main.html`. Bind each
    of the five touch events to callback functions as shown. If the tap duration is
    long, then it is `taphold`. So, define a Boolean `tapholdflag` to track whether
    the `tap` event was `taphold` or not. Set this to `true` in the `taphold` event
    handler, and clear it after the `tap` event is fired.`'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将给定的脚本添加到`main.html`的`<head>`部分。将五个触摸事件中的每一个绑定到如所示的回调函数。如果触摸持续时间长，则为`taphold`。因此，定义一个布尔值`tapholdflag`来跟踪`tap`事件是否为`taphold`。在`taphold`事件处理程序中将其设置为`true`，并在触发`tap`事件后将其清除。
- en: '`In the callback of the `tap` event, first check if `tapholdflag` is already
    set. If so, then this is a `taphold` event. Create a new green box and call the
    `"` `create"` method as shown. If the `tapholdflag` is `false`, then this is a
    simple tap. Update the new position of the yellow box, and trigger the `"refresh"`
    method. Finally, clear `tapholdflag` and set it to `false`.`'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在`tap`事件的回调中，首先检查` tapholdflag`是否已设置。如果是，则这是一个`taphold`事件。创建一个新的绿色框并调用`"create"`方法，如所示。如果`tapholdflag`为`false`，则这是一个简单的点击。更新黄色框的新位置，并触发`"refresh"`方法。最后，清除`tapholdflag`并将其设置为`false`。
- en: '`You can get the tap location by using the `event.clientX` and `event.clientY`
    parameters. Set these values to the `left` and `top` style attributes of the box
    to update its position. The screen looks similar to the following screenshot after
    a few `tap` and `taphold` events:`'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用`event.clientX`和`event.clientY`参数，可以获取触摸位置。将这些值设置为盒子的`left`和`top`样式属性，以更新其位置。在几次`tap`和`taphold`事件后，屏幕看起来类似于以下截图：
- en: '`![How it works...](img/7225_08_02.jpg)`'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '![它是如何工作的...](img/7225_08_02.jpg)'
- en: '`Now, bind the `swipe` event to a callback function and configure the `swipe`
    event properties as shown in the code. The code shows you how to configure the
    `scrollSupressionThreshold`, `durationThreshold`, `horizontalDistanceThreshold`,
    and `verticalDistanceThreshold` properties.`'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将`swipe`事件绑定到回调函数，并按照代码中所示配置`swipe`事件属性。代码向您展示如何配置`scrollSupressionThreshold`、`durationThreshold`、`horizontalDistanceThreshold`和`verticalDistanceThreshold`属性。
- en: '`Bind the `swipeleft` event to a callback to set the `left` and `top` style
    attributes of the blue bar and call the `"refresh"` method. This will move the
    bar to the left edge of the screen. Similarly, bind the `swiperight` event to
    a callback to set the `right` and `top` style attributes of the blue bar, and
    call `"refresh"`. This will move the bar to the right edge of the screen. Now,
    when you swipe towards the right side of the screen, the bar moves to the right
    edge, as shown in the following screenshot; swipe towards the left side, and the
    bar moves back to the left edge:`'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 将`swipeleft`事件绑定到回调以设置蓝色条的`left`和`top`样式属性，并调用`"refresh"`方法。这将将条移到屏幕的左边缘。类似地，将`swiperight`事件绑定到回调以设置蓝色条的`right`和`top`样式属性，并调用`"refresh"`。这将把条移到屏幕的右边缘。现在，当您向屏幕的右侧滑动时，该条将移动到右边缘，如以下截图所示；向左侧滑动，则该条将移回左边缘：
- en: '`![How it works...](img/7225_08_03.jpg)`'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '![它是如何工作的...](img/7225_08_03.jpg)'
- en: '`There''s more...`'
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: '`In the code, the callback for the `swipe` event shows you how to configure
    the `swipe` event properties. The available configurations are as follows:`'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码中，`swipe`事件的回调向您展示了如何配置`swipe`事件属性。可用的配置如下：
- en: '``scrollSupressionThreshold` (`10px` by default): The swipe distance must be
    more than this value for the event to be fired, else it is a `scroll` event`'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scrollSupressionThreshold`（默认为`10px`）：必须滑动距离超过此值才能触发事件，否则就是`scroll`事件。'
- en: '``durationThreshold` (`1000ms` by default): If the swipe duration is more than
    this value, then the `swipe` event is prevented from being fired`'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`durationThreshold`（默认为`1000ms`）：如果滑动持续时间超过此值，则阻止`swipe`事件的触发。'
- en: '``horizontalDistanceThreshold` (`30px` by default): The horizontal swipe distance
    must be more than this value for the event to be fired`'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`horizontalDistanceThreshold`（默认为`30px`）：水平滑动距离必须超过此值才能触发事件。'
- en: '``verticalDistanceThreshold` (`75px` by default): The vertical swipe distance
    must be less than this value for the event to be fired`'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`verticalDistanceThreshold`（默认为`75px`）：垂直滑动距离必须小于此值才能触发事件。'
- en: '`The tapholdThreshold property`'
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`tapholdThreshold`属性'
- en: '`The `tap` event is fired whenever you tap the screen. If the tap duration
    exceeds a certain value (`750ms` by default), then this is treated as a `taphold`
    event. You can configure this duration by setting the `$.event.special.tap.tapholdThreshold`
    property as follows:`'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`每当您点击屏幕时，将触发 `tap` 事件。如果点击持续时间超过一定值（默认为 `750ms`），则将其视为 `taphold` 事件。您可以通过设置
    `$.event.special.tap.tapholdThreshold` 属性来配置此持续时间，如下所示：`'
- en: '[PRE9]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '`Note`'
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`注意`'
- en: '`The default `tap` event configurations work well for most of the platforms.
    So modify them only if you have a very strong reason to do so.`'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`默认 `tap` 事件配置对大多数平台都很有效。因此，只有在有非常强烈的理由时才修改它们。`'
- en: '`See also`'
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`另请参阅`'
- en: '`The *Using virtual mouse events* recipe`'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`使用虚拟鼠标事件` 示例'
- en: '`# Virtual mouse events'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`# 虚拟鼠标事件'
- en: The jQuery Mobile framework provides virtual `mouse` or `vmouse` events to abstract
    the mouse and touch events.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery Mobile 框架提供虚拟 `mouse` 或 `vmouse` 事件来抽象鼠标和触摸事件。
- en: 'You don''t have to write separate handlers for the touch and mouse events for
    each of the supported platforms or devices. You just have to write the event handlers
    for the `vmouse` events and this will work across various platforms. There are
    seven `vmouse` events supported by the framework: `vmousemove` , `vmouseover`
    , `vmouseout` , `vmousedown` , `vmouseup` , `vclick` , and `vmousecancel` . This
    recipe shows you how to use these `vmouse` events.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 您无需为每个受支持的平台或设备的触摸和鼠标事件编写单独的处理程序。您只需为 `vmouse` 事件编写事件处理程序，它将在各种平台上正常工作。框架支持七个
    `vmouse` 事件：`vmousemove`、`vmouseover`、`vmouseout`、`vmousedown`、`vmouseup`、`vclick`
    和 `vmousecancel`。此示例向您展示如何使用这些 `vmouse` 事件。
- en: Getting ready
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Copy the full code of this recipe from the `code/08/vmouse` sources folder.
    You can launch this code by using the URL `http://localhost:8080/08/vmouse/main.html`.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 从 `code/08/vmouse` 源文件夹中复制此示例的完整代码。您可以通过以下 URL `http://localhost:8080/08/vmouse/main.html`
    启动此代码。
- en: How to do it...
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'The steps to be followed are:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 应遵循以下步骤：
- en: 'Create `main.html` with content having seven `div` tags for the seven `vmouse`
    events, as follows:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建包含七个 `div` 标签的 `main.html`，用于展示七个 `vmouse` 事件，如下所示：
- en: '[PRE10]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Add the following script to the `<head>` section to handle the `vmousemove`,
    `vmouseover`, and `vmouseout` events:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下脚本添加到 `<head>` 部分以处理 `vmousemove`、`vmouseover` 和 `vmouseout` 事件：
- en: '[PRE11]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Next, handle the `vmousedown`, `vmouseup`, and `vclick` events:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，按如下方式处理 `vmousedown`、`vmouseup` 和 `vclick` 事件：
- en: '[PRE12]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Finally, handle the `vmousecancel` event, as follows:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，按如下方式处理 `vmousecancel` 事件：
- en: '[PRE13]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: How it works...
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'Create `main.html`, and add seven empty `divs` to display the event locations
    for each of the seven `vmouse` events. Add the given script and bind the callback
    functions for each of the `vmouse` events, as shown in the `pageinit` event handler.
    Use the `e.clientX` and `e.clientY` values of the event parameter passed to the
    callback function to get the location of the `vmouse` event. When you load the
    page and move the mouse around performing various mouse actions described, the
    screen is displayed as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 `main.html`，并添加七个空的 `divs` 来显示七个 `vmouse` 事件的位置。添加给定的脚本，并绑定每个 `vmouse` 事件的回调函数，如
    `pageinit` 事件处理程序所示。使用传递给回调函数的事件参数的 `e.clientX` 和 `e.clientY` 值来获取 `vmouse` 事件的位置。当您加载页面并执行描述的各种鼠标操作时，屏幕显示如下：
- en: '![How it works...](img/7225_08_04.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/7225_08_04.jpg)'
- en: When the mouse is moved (or on a `touchmove` event), the `vmousemove` event
    is triggered. The `vmouseover` event is triggered when the move action is done
    over an element to which the event is bound. The `vmouseout` event is triggered
    when the `move` action goes out of the element to which the event is bound. In
    the preceding code, the `vmouseout` event is bound to the `h1` header. Move your
    mouse over the header and out of it to see this parameter get updated on the screen.
    The `vmousedown` event is triggered when the mouse is clicked (or on a `touchstart`
    event). The `vmouseup` event follows the `down` event when the click is over (`touchend`
    event). The `vclick` event is triggered along with the `vmousedown` and `vmouseup`
    event on the click or tap action. In the `vmousedown` event handler, you can use
    the `event.which` attribute to find which mouse button was clicked. This value
    is `0` for a `tap` event. You can try and click the different buttons on your
    mouse to see the screen update accordingly. Finally, the `vmousecancel` event
    is triggered when there is a mouse or touch event that is canceled.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 当鼠标移动（或在 `touchmove` 事件上）时，将触发 `vmousemove` 事件。当移动操作在事件绑定的元素上完成时，将触发 `vmouseover`
    事件。当移动操作移出事件绑定的元素时，将触发 `vmouseout` 事件。在上述代码中，`vmouseout` 事件绑定到 `h1` 标题上。将鼠标移动到标题上，然后移出，以查看屏幕上的此参数是否更新。当鼠标点击（或在
    `touchstart` 事件上）时，将触发 `vmousedown` 事件。当点击结束时（`touchend` 事件），`vmouseup` 事件紧随 `down`
    事件。在点击或触摸动作时，将同时触发 `vclick` 事件和 `vmousedown`、`vmouseup` 事件。在 `vmousedown` 事件处理程序中，您可以使用
    `event.which` 属性来查找点击了哪个鼠标按钮。对于 `tap` 事件，此值为 `0`。您可以尝试点击鼠标上的不同按钮，以相应地查看屏幕更新。最后，当存在被取消的鼠标或触摸事件时，将触发
    `vmousecancel` 事件。
- en: There's more...
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'The framework provides the following three configurations for the `vmouse`
    events:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 框架为 `vmouse` 事件提供了以下三个配置：
- en: '`$.vmouse.moveDistanceThreshold` (`10px` by default): If the move is more than
    this value, then it is a `scroll` event. The `vmousecancel` event gets called
    and the `TouchMove` event gets canceled.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$.vmouse.moveDistanceThreshold`（默认为 `10px`）：如果移动超过此值，则为 `scroll` 事件。将调用 `vmousecancel`
    事件并取消 `TouchMove` 事件。'
- en: '`$.vmouse.clickDistanceThreshold` (`10px` by default): If a `vmouse` click
    event was already captured, it is in the block list. Then, all `vmouse` clicks
    less than this distance are ignored.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$.vmouse.clickDistanceThreshold`（默认为 `10px`）：如果已捕获 `vmouse` 点击事件，则它在阻止列表中。然后，所有小于此距离的
    `vmouse` 点击都将被忽略。'
- en: '`$.vmouse.resetTimerDuration` (`1500ms` by default): If the interval between
    `vmouse` clicks is more than this duration, then it is not a touch event. `Scroll`,
    `TouchMove`, and `TouchEnd` events use this. The block list is cleared.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$.vmouse.resetTimerDuration`（默认为 `1500ms`）：如果 `vmouse` 点击之间的间隔大于此持续时间，则不是触摸事件。`Scroll`、`TouchMove`
    和 `TouchEnd` 事件使用此值。阻止列表将被清除。'
- en: Note
  id: totrans-107
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The default `vmouse` configurations work well for most of the platforms. So
    modify them only if you have a very strong reason to do so.
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 默认的 `vmouse` 配置适用于大多数平台。因此，只有在有很强的理由时才修改它们。
- en: Mouse coordinates
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 鼠标坐标
- en: This recipe shows you to use the `event.clientX` and `event.clientY` properties
    to get the mouse coordinates. You can also get the screen and page coordinates
    using the `event.pageX` , `event.pageY`, `screen.pageX`, and `screen.pageY` attributes.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方向您展示如何使用 `event.clientX` 和 `event.clientY` 属性获取鼠标坐标。您还可以使用 `event.pageX`、`event.pageY`、`screen.pageX`
    和 `screen.pageY` 属性获取屏幕和页面坐标。
- en: Using vclick events on touch devices
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在触摸设备上使用 vclick 事件
- en: On touch devices, the `webkit` browsers are known to process click events after
    a lag of about 300ms after the `touchend` event is triggered. This delay could
    result in a different target being selected if the underlying object or background
    were to change within this gap. Another issue would be to match the event with
    the corresponding target due to the time lag; for example, when using `event.preventDefault()`.
    To avoid these issues on touch devices, use the `click` event instead of the `vclick`
    event.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在触摸设备上，`webkit` 浏览器会在触发 `touchend` 事件后大约 300 毫秒的延迟后处理点击事件。如果在此间隙内更改底层对象或背景，则可能选择不同的目标。另一个问题是由于时间延迟而将事件与相应目标匹配；例如，当使用
    `event.preventDefault()` 时。为了避免这些问题，在触摸设备上使用 `click` 事件而不是 `vclick` 事件。
- en: See also
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Using touch events* recipe
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用触摸事件* 配方'
- en: Page initialization events
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 页面初始化事件
- en: The jQuery Mobile framework provides the **page plugin** which automatically
    handles page initialization events. The `pagebeforecreate` event is fired before
    the page is created. The `pagecreate` event is fired after the page is created
    but before the widgets are initialized. The `pageinit` event is fired after the
    complete initialization. This recipe shows you how to use these events.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery Mobile框架提供了**页面插件**，它自动处理页面初始化事件。 `pagebeforecreate`事件在页面创建之前触发。 `pagecreate`事件在页面创建后但在小部件初始化之前触发。
    `pageinit`事件在完全初始化后触发。此示例向您展示如何使用这些事件。
- en: Getting ready
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Copy the full code of this recipe from the `code/08/pageinit` sources folder.
    You can launch this code using the URL `http://localhost:8080/08/pageinit/main.html`
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 从`code/08/pageinit`源文件夹中复制此配方的完整代码。您可以使用URL`http://localhost:8080/08/pageinit/main.html`启动此代码。
- en: How to do it...
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Carry out the following steps:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤：
- en: 'Create `main.html` with three empty `<div>` tags as follows:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`main.html`，其中包含三个空的`<div>`标签，如下所示：
- en: '[PRE14]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Add the following script to the `<head>` section to handle the `pagebeforecreate`
    event:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下脚本添加到`<head>`部分以处理`pagebeforecreate`事件：
- en: '[PRE15]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Next, handle the `pagecreate` event:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，处理`pagecreate`事件：
- en: '[PRE16]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Finally, handle the `pageinit` event:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，处理`pageinit`事件：
- en: '[PRE17]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: How it works...
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In `main.html`, add three empty `divs` to the page content as shown. Add the
    given script to the page. In the script, `str` is an HTML string for creating
    an anchor link with the `data-role="button"` attribute.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在`main.html`中，如下所示将三个空的`divs`添加到页面内容中。将给定的脚本添加到页面中。在脚本中，`str`是一个具有`data-role="button"`属性的创建锚链接的HTML字符串。
- en: Add the callback for the `pagebeforecreate` event, and set `str` to the `div1`
    container. Since the page was not yet created, the button in `div1` is automatically
    initialized and enhanced as seen in the following image.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 添加`pagebeforecreate`事件的回调，并将`str`设置为`div1`容器。由于页面尚未创建，因此`div1`中的按钮会自动初始化和增强，如下图所示。
- en: 'Add the callback for the `pagecreate` event. Select the previous anchor button
    in `div1` using the jQuery `find()` method, and set its `data-icon` attribute.
    Since this change was made after page initialization but before the button was
    initialized, the `star` icon is automatically shown for the `div1` button as shown
    in the following screenshot. Finally, add the callback for the `pageinit` event
    and add `str` to both the `div2` and `div3` containers. At this point, the page
    and widgets are already initialized and enhanced. Adding an anchor link will now
    show it only as a native link without any enhancement for `div2`, as shown in
    the following screenshot. But, for `div3`, find the anchor link and manually call
    the `buttonmarkup` method on the button plugin, and set its icon to `star`. Now
    when you load the page, the link in `div3` gets enhanced as follows:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 添加`pagecreate`事件的回调。使用jQuery的`find()`方法选择`div1`中的前一个锚按钮，并设置其`data-icon`属性。由于此更改是在页面初始化之后但在按钮初始化之前进行的，所以`div1`按钮自动显示为`star`图标，如下图所示。最后，添加`pageinit`事件的回调，并将`str`添加到`div2`和`div3`容器中。此时，页面和小部件已经初始化和增强。现在添加一个锚链接将仅显示为`div2`的原生链接，如下图所示。但是，对于`div3`，找到锚链接，并在按钮插件上手动调用`buttonmarkup`方法，并将其图标设置为`star`。现在当您加载页面时，`div3`中的链接将被增强如下所示：
- en: '![How it works...](img/7225_08_05.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/7225_08_05.jpg)'
- en: There's more...
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: You can trigger `"create"` or `"refresh"` on the plugins to let the jQuery Mobile
    framework enhance the dynamic changes done to the page or the widgets after initialization.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在插件上触发`"create"`或`"refresh"`，以让jQuery Mobile框架增强对页面或小部件进行的动态更改后的初始化。
- en: Page initialization events fire only once
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 页面初始化事件仅触发一次
- en: The page initialization events fire only once. So this is a good place to make
    any specific initializations or to add your custom controls.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 页面初始化事件仅触发一次。因此，这是进行任何特定初始化或添加自定义控件的好地方。
- en: Do not use $(document).ready()
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 不要使用$(document).ready()
- en: The `$(document).ready()` handler only works when the first page is loaded or
    when the DOM is ready for the first time. If you load a page via Ajax, then the
    `ready()` function is not triggered. Whereas, the `pageinit` event is triggered
    whenever a page is created or loaded and initialized. So, this is the best place
    to do post initialization activities in your app.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '`$(document).ready()`处理程序仅在加载第一个页面或DOM首次准备就绪时起作用。如果通过Ajax加载页面，则不会触发`ready()`函数。而`pageinit`事件在页面创建或加载和初始化时触发。因此，这是在应用程序中进行后初始化活动的最佳位置。'
- en: '[PRE18]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Page load and remove events
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 页面加载和移除事件
- en: The jQuery Mobile framework triggers the page load events whenever an external
    page is loaded into the DOM. It fires the `pagebeforeload` event before loading
    the page and then fires either the `pageload` or `pageloadfailed` event based
    on the status of the page load. The `pageremove` event is fired when a page is
    removed from the DOM. This recipe shows you how to use the page load and page
    remove events.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery Mobile框架在将外部页面加载到DOM时会触发页面加载事件。它会在加载页面之前触发`pagebeforeload`事件，然后根据页面加载的状态触发`pageload`或`pageloadfailed`事件。当页面从DOM中移除时会触发`pageremove`事件。本教程向您展示如何使用页面加载和页面移除事件。
- en: Getting ready
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Copy the full code of this recipe from the `code/08/pageload` sources folder.
    You can launch this code using the URL `http://localhost:8080/08/pageload/main.html`.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 从`code/08/pageload`源文件夹中复制此配方的完整代码。您可以使用URL `http://localhost:8080/08/pageload/main.html`启动此代码。
- en: How to do it...
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Carry out the following steps:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤：
- en: 'Create `main.html` with four buttons and an empty `div` element, as shown in
    the following code snippet:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据以下代码片段创建带有四个按钮和一个空的`div`元素的`main.html`：
- en: '[PRE19]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Add the following script to the `<head>` section to handle the `pagebeforeload`
    event:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`<head>`部分添加以下脚本来处理`pagebeforeload`事件：
- en: '[PRE20]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Next, handle the `pageload` event:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，处理`pageload`事件：
- en: '[PRE21]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Next, handle any error with the `pageloadfailed` event:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接着，处理任何`pageloadfailed`事件中的错误：
- en: '[PRE22]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Also handle the `pageremove` event:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同样处理`pageremove`事件：
- en: '[PRE23]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Now, create a dialog with `id="dialog"` as follows:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，按照以下步骤创建带有`id="dialog"`的对话框：
- en: '[PRE24]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Finally, create `page1.html` with a button to go back to `#main`, as shown
    in the following code snippet:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，根据以下代码片段创建带有返回到`#main`按钮的`page1.html`：
- en: '[PRE25]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: How it works...
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In `main.html`, create the `#main` page and add four anchor links with the `data-role="button"`
    and `data-inline="true"` attributes, to create four inline buttons. These links
    point to `page1.html`, `page2.html`, `page3.html`, and `page4.html`. Also add
    an empty `div` container with `id="msgdiv"` to display the messages. Next, add
    a dialog with `id="dialog"` to `main.html`. Finally, create only `page1.html`,
    as shown, with a link to return back to the main page. The other three pages are
    not created. Bind the page load and page remove events to callback functions as
    given in the script. These callback functions have two parameters available. The
    first is the `event` object and the second is the `data` object.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在`main.html`中创建`#main`页面，并添加四个锚链接，带有`data-role="button"`和`data-inline="true"`属性，以创建四个内联按钮。这些链接指向`page1.html`、`page2.html`、`page3.html`和`page4.html`。同时添加一个空的`div`容器，带有`id="msgdiv"`用于显示消息。接着，在`main.html`中添加一个带有`id="dialog"`的对话框。最后，只创建`page1.html`，如下所示，其中包含一个返回主页的链接。其他三个页面不需要创建。将页面加载和页面移除事件绑定到脚本中给出的回调函数。这些回调函数有两个参数可用。第一个是`event`对象，第二个是`data`对象。
- en: In the callback of the `pagebeforeload` event, get the `url`, `absUrl` (absolute
    URL), `dataUrl` (the data URL), and `options.type` properties from the `data`
    object. Display them in the `msgdiv` container. The `options` object is the same
    that gets passed into the `$.mobile.loadPage()` call.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在`pagebeforeload`事件的回调中，从`data`对象中获取`url`、`absUrl`（绝对URL）、`dataUrl`（数据URL）和`options.type`属性。将它们显示在`msgdiv`容器中。`options`对象与传递给`$.mobile.loadPage()`调用的相同。
- en: In the callback of the `pageload` event, get the `xhr.status` (the jQuery `XMLHttpRequest`
    object) and `textStatus` attributes that indicate page load success and display
    them in the `msgdiv` container.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在`pageload`事件的回调中，获取`xhr.status`（jQuery `XMLHttpRequest`对象）和`textStatus`属性，指示页面加载成功，并在`msgdiv`容器中显示它们。
- en: Add the `pageloadfailed` callback function to display the `data.xhr.status`
    and `data.errorThrown` properties on page load error. Finally, add the `pageremove`
    callback function and display a message that the page was removed.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 添加`pageloadfailed`回调函数以在页面加载错误时显示`data.xhr.status`和`data.errorThrown`属性。最后，添加`pageremove`回调函数并显示页面已被移除的消息。
- en: 'Now, when you initially load the app and click on the **Page 1** button to
    open `page1.html`, the `pagebeforeload` event is triggered first, then the `pageload`
    event is fired after the page is fully loaded. Navigate back to the main page
    and this triggers the `pageremove` event. You can see these messages displayed,
    as shown in the following screenshot:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当您首次加载应用程序并点击**页面1**按钮打开`page1.html`时，首先触发`pagebeforeload`事件，然后在完全加载页面之后触发`pageload`事件。返回主页时触发`pageremove`事件。您可以看到下面的屏幕截图中显示的这些消息：
- en: '![How it works...](img/7225_08_06.jpg)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/7225_08_06.jpg)'
- en: 'Next, in the `pagebeforeload` event handler, use a regular expression search
    to check whether the page requested or the `data.url` is `page2.html` (which does
    not exist). Display a custom error message if `page2.html` was requested. Also
    prevent any further action on this request by calling `event.preventDefault()`.
    The `data.deferred.reject()` method must be finally called to reject the deferred
    object reference contained in the data object. Now, when you click on the **Page
    2** button, the `pageloadfailed` event is not triggered, as shown in the following
    screenshot, and the custom error message **ABORTED!!! page2.html does not exist.**
    is displayed:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在`pagebeforeload`事件处理程序中，使用正则表达式搜索来检查所请求的页面或`data.url`是否为`page2.html`（该页面不存在）。如果请求了`page2.html`，则显示自定义错误消息。还通过调用`event.preventDefault()`来阻止对此请求的进一步操作。最后必须调用`data.deferred.reject()`方法来拒绝数据对象中包含的延迟对象引用。现在，当您单击**Page
    2**按钮时，不会触发`pageloadfailed`事件，如下面的屏幕截图所示，而是显示自定义错误消息**ABORTED!!! page2.html不存在。**：
- en: '![How it works...](img/7225_08_07.jpg)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![它的工作原理...](img/7225_08_07.jpg)'
- en: Click on the **Page 3** button; it now tries to load `page3.html`, which is
    not present, and displays an **Error Loading Page** default error message overlaid
    on the current page, as shown in the following screenshot. You can also see the
    messages from the `pageloadfailed` event handler here. There was no custom event
    handling done in this case.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**Page 3**按钮；它现在尝试加载`page3.html`，但是找不到，并显示了默认的**Error Loading Page**错误消息，如下面的屏幕截图所示。您还可以在这里看到`pageloadfailed`事件处理程序的消息。在这种情况下没有进行自定义事件处理。
- en: '![How it works...](img/7225_08_08.jpg)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![它的工作原理...](img/7225_08_08.jpg)'
- en: Finally, add code in the `pagebeforeload` callback function to search for `page4.html`
    in the `data.url` object. If the string was found, redirect the request to load
    the `#dialog` dialog. Also, display a custom message if `page4.html` was requested.
    Now, to prevent the default action on `pagebeforeevent`, call the `event.preventDefault()`
    method. You must also call the `data.deferred.resolve()` method to resolve the
    deferred object reference contained in the `data` object. Then, open the `#dialog`
    page by passing it as the parameter to the `resolve` method, as shown in the code.
    Now, when you click on the **Page 4** button, the custom error dialog popup is
    displayed. When you close the dialog, your custom message **ABORTED!!! error dialog
    shown instead.** is displayed, as shown in the following screenshot. You will
    note that the `pageloadfailed` event callback function did not get called.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在`pagebeforeload`回调函数中添加代码，以搜索`data.url`对象中的`page4.html`。如果找到字符串，则将请求重定向到加载`#dialog`对话框。还如果请求了`page4.html`，则显示自定义消息。现在，要阻止`pagebeforeevent`上的默认操作，请调用`event.preventDefault()`方法。还必须调用`data.deferred.resolve()`方法来解析`data`对象中包含的延迟对象引用。然后，通过将其作为参数传递给`resolve`方法，打开`#dialog`页面，如代码所示。现在，当您单击**Page
    4**按钮时，将显示自定义错误对话框弹出窗口。当关闭对话框时，将显示您的自定义消息**ABORTED!!!显示错误对话框。**，如下面的屏幕截图所示。您会注意到`pageloadfailed`事件回调函数没有被调用。
- en: '![How it works...](img/7225_08_09.jpg)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![它的工作原理...](img/7225_08_09.jpg)'
- en: There's more...
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: If you prevent the default page load events by calling the `event.preventDefault()`
    method, then you must inform the framework to resume processing other `changePage()`
    requests once you are done. You can do this by calling the `reject()` or `resolve()`
    methods on the `data.deferred` object passed to the callback function of the event.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 如果通过调用`event.preventDefault()`方法来阻止默认的页面加载事件，那么在完成后，必须通知框架恢复处理其他`changePage()`请求。您可以通过在事件的回调函数中对传递给`data.deferred`对象调用`reject()`或`resolve()`方法来实现这一点。
- en: See also
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Using loadPage() to load a page* recipe in [Chapter 9](ch09.html "Chapter 9. Methods
    and Utilities"), *Methods and Utilities*
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第9章](ch09.html "第9章。方法和实用程序")*方法和实用程序*中的*使用loadPage()加载页面*中的配方
- en: Page change events
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 页面更改事件
- en: The jQuery Mobile framework triggers page change events whenever a page is loaded
    by the `$.mobile.changePage()` method into the DOM. The `pagebeforechange` event
    is fired first, before the page changes. Then, either the `pagechange` event (on
    success) or the `pagechangefailed` event (on failure) is fired. This recipe shows
    you how to use the page change events.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 每当`$.mobile.changePage()`方法将页面加载到DOM中时，jQuery Mobile框架都会触发页面更改事件。首先触发`pagebeforechange`事件，然后触发`pagechange`事件（成功时）或`pagechangefailed`事件（失败时）。本节介绍如何使用页面更改事件。
- en: Getting ready
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备好了
- en: Copy the full code of this recipe from the `code/08/pagechange` sources folder.
    You can launch this code using the URL `http://localhost:8080/08/pagechange/main.html`.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 从 `code/08/pagechange` 源文件夹中复制此配方的完整代码。你可以使用 `http://localhost:8080/08/pagechange/main.html`
    URL 启动此代码。
- en: How to do it...
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Carry out the following steps:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤：
- en: 'Create `main.html` with two links to open two dialogs and an empty `div` element
    in its page content, as follows:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `main.html`，其中包含两个链接以打开两个对话框，并在其页面内容中包含一个空的 `div` 元素，如下所示：
- en: '[PRE26]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Add the following script to the `<head>` section to handle the `pagebeforechange`
    event:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下脚本添加到 `<head>` 部分以处理 `pagebeforechange` 事件：
- en: '[PRE27]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Next, handle the `pagechange` event:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，处理 `pagechange` 事件：
- en: '[PRE28]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Next, handle any error with the `pagechangefailed` event:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，处理 `pagechangefailed` 事件中的任何错误：
- en: '[PRE29]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Finally, create the `#dialog1` dialog as follows. The second dialog, `#dialog2`,
    is not created.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，按以下方式创建 `#dialog1` 对话框。第二个对话框 `#dialog2` 不会被创建。
- en: '[PRE30]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: How it works...
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In `main.html`, add two anchor links with `data-role="button"` to the content
    of the `#main` page. These links point to the `#dialog1` and `#dialog2` dialogs.
    Also, add an empty `div` container with `id="msgdiv"` to display the messages.
    Finally, add only one dialog with `id="dialog1"` to `main.html`. Add an empty
    `div` container with `id="dialogdiv"` to this dialog. The other dialog is not
    created. Bind the page change events to the callback functions as given in the
    script. These call back functions have two parameters available. The first is
    the `event` object and the second is the `data` object.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `main.html` 中，将两个锚链接添加到 `#main` 页面的内容中，这些链接指向 `#dialog1` 和 `#dialog2` 对话框。还添加一个带有
    `id="msgdiv"` 的空 `div` 容器以显示消息。最后，只向 `main.html` 添加一个带有 `id="dialog1"` 的对话框。将一个空的带有
    `id="dialogdiv"` 的 `div` 容器添加到此对话框中。另一个对话框不会被创建。将页面更改事件绑定到给定的脚本中的回调函数。这些回调函数有两个可用参数。第一个是
    `event` 对象，第二个是 `data` 对象。
- en: In the callback of the `pagebeforechange` event, get the `data.toPage` (target
    page) attribute. This can either be a string or an object. Check if this is an
    object (if it has the `toPage` attribute) and then use the `data.toPage.data-url`
    string. Display the `toPage` message in both the message `div` containers.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `pagebeforechange` 事件的回调中，获取 `data.toPage`（目标页面）属性。这可以是字符串或对象。检查这是否是一个对象（是否具有
    `toPage` 属性），然后使用 `data.toPage.data-url` 字符串。在两个消息 `div` 容器中显示 `toPage` 消息。
- en: In the callback of the `pagechange` event, get the `data.fromPage` (source page)
    attribute. Check again whether this is an object or a string and display the `data.fromPage.data-url`
    string if it is an object in both the message `div` containers. Also, the `data.options`
    object has properties, such as `transition`, that you can use.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `pagechange` 事件的回调中，获取 `data.fromPage`（源页面）属性。再次检查这是对象还是字符串，并在消息 `div` 容器中显示
    `data.fromPage.data-url` 字符串，如果它是一个对象。另外，`data.options` 对象具有属性，例如 `transition`，你可以使用。
- en: 'Finally, in the callback for the `pagechangefailed` event, display a custom
    error message. When the page loads for the first time, you can see the following
    image. The text **main** is shown for **toPage**; there is no **fromPage** here:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在 `pagechangefailed` 事件的回调中，显示自定义错误消息。当页面首次加载时，可以看到以下图像。**main** 文本显示为 **toPage**；这里没有
    **fromPage**：
- en: '![How it works...](img/7225_08_10.jpg)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/7225_08_10.jpg)'
- en: 'Click on the **Dialog 1** button and the following dialog box will be shown.
    The **toPage** value is **dialog1** and **fromPage** is **main**. The transition
    that was used is shown as **pop**, which is the default transition for the dialog:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 单击 **Dialog 1** 按钮，将显示以下对话框。 **toPage** 值是 **dialog1**， **fromPage** 是 **main**。所使用的转换显示为
    **pop**，这是对话框的默认转换：
- en: '![How it works...](img/7225_08_11.jpg)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/7225_08_11.jpg)'
- en: 'Close this dialog box, and the `#main` page opens , which displays a message
    similar to the one shown in the following screenshot. **toPage** is **main** and
    **fromPage** is **dialog1**. The transition used is again shown as **pop**:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭此对话框，然后打开 `#main` 页面，显示与以下截图中显示的消息类似的消息。 **toPage** 是 **main**， **fromPage**
    是 **dialog1**。所使用的转换再次显示为 **pop**：
- en: '![How it works...](img/7225_08_12.jpg)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/7225_08_12.jpg)'
- en: 'Finally, click on **Dialog 2** button; since `#dialog2` does not exist, the
    custom error message **PAGE CHANGE FAILED** is shown, as you can see in the following
    screenshot, from the `pagechangefailed` callback:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，单击 **Dialog 2** 按钮；由于 `#dialog2` 不存在，所以会显示自定义错误消息 **PAGE CHANGE FAILED**，如你在
    `pagechangefailed` 回调中所见：
- en: '![How it works...](img/7225_08_13.jpg)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/7225_08_13.jpg)'
- en: There's more...
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: You can prevent the default page change action by calling the `event.preventDefault()`
    method in the `pagebeforechange` event handler. You can redirect the navigation
    to another page here using the `$.mobile.changePage()` method.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在`pagebeforechange`事件处理程序中调用`event.preventDefault()`方法来阻止默认的页面更改操作。你可以使用`$.mobile.changePage()`方法将导航重定向到另一个页面。
- en: Sequence of pagechange event
  id: totrans-208
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 页面转换事件的顺序
- en: After the `pagebeforechange` event is triggered, the `changePage()` request
    loads the page into the DOM, and then the transition of the page occurs. The `pageshow`
    and `pagehide` events are triggered at this point. Finally, the `pagechange` event
    is fired only after this.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在触发`pagebeforechange`事件后, `changePage()` 请求将页面加载到DOM中，然后页面过渡发生。此刻触发`pageshow`和`pagehide`事件。最后，只有在此之后才会触发`pagechange`事件。
- en: See also
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Using changePage() to change a page* recipe in [Chapter 9](ch09.html "Chapter 9. Methods
    and Utilities"), *Methods and Utilities*
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第九章](ch09.html "第九章. 方法与工具")中的*使用changePage()来更改页面*示例，*方法和工具*'
- en: Page transition and animation events
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 页面过渡和动画事件
- en: 'During page navigation, the current page transitions out and the new active
    page transitions in. Animation is used where supported. The jQuery Mobile framework
    triggers four page transition events during page navigation, which are listed
    as follows:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在页面导航期间，当前页面变换出去，新的活动页面变换进来。在支持的情况下会使用动画效果。jQuery Mobile 框架在页面导航期间会触发四个页面转换事件，如下所示：
- en: '`pagebeforehide`: This event is triggered before the current page is hidden'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pagebeforehide`: 在当前页面隐藏之前触发此事件'
- en: '`pagehide`: This event is fired once the current page is hidden'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pagehide`: 当前页面隐藏后触发此事件'
- en: '`pagebeforeshow`: This event is fired before the new active page is shown'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pagebeforeshow`: 在新的活动页面显示之前触发此事件'
- en: '`pageshow`: This event is triggered once the active page is shown'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pageshow`: 一旦活动页面显示出来就会触发此事件'
- en: You can also access the `animationComplete` plugin to perform custom actions
    as soon as the animation is completed. This recipe shows you how to use the page
    transition events and also how to use the `animationComplete` plugin.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以访问`animationComplete`插件，以便在动画完成后立即执行自定义操作。此示例向你展示如何使用页面过渡事件，以及如何使用`animationComplete`插件。
- en: Getting ready
  id: totrans-219
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Copy the full code of this recipe from the `code/08/transition` sources folder.
    You can launch this code using the URL `http://localhost:8080/08/transition/main.html`.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 从`code/08/transition`源文件夹中复制此示例的完整代码。你可以使用URL`http://localhost:8080/08/transition/main.html`运行此代码。
- en: How to do it...
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Carry out the following steps:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤：
- en: 'Create `main.html`, and add `#main` page with a link to open the `#page` page
    and an empty `div` container, as shown in the following code snippet:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`main.html`，并添加带有指向打开`#page`页面的链接和一个空的`div`容器`#main`页面的代码片段如下所示：
- en: '[PRE31]'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Create the `#page` page, as follows, with a button to go back to `#main` and
    an empty `div` container to display messages:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`#page`页面，包括一个回到`#main`的按钮和一个空的`div`容器来显示消息：
- en: '[PRE32]'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Add the following script to the `<head>` section, to clear the message `div`
    containers whenever a link is clicked:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`<head>`部分添加以下脚本，以便在点击链接时清除消息`div`容器：
- en: '[PRE33]'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Handle the `pagebeforeshow` event:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 处理`pagebeforeshow`事件：
- en: '[PRE34]'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Handle the `pagebeforehide` event:'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 处理`pagebeforehide`事件：
- en: '[PRE35]'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Handle the `pageshow` event:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 处理`pageshow`事件：
- en: '[PRE36]'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Handle the `pagehide` event:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 处理`pagehide`事件：
- en: '[PRE37]'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Add the callback function for the `animationComplete()` method:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`animationComplete()`方法的回调函数：
- en: '[PRE38]'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: How it works...
  id: totrans-239
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Create `main.html` and add an anchor link with `data-role="button"` to the content
    of the `#main` page. This link opens the `#page` page in `main.html`. Create the
    `#page` page, as shown with a link to go back to `#main`. Add empty `#msgdiv`
    and `#pagediv` containers to the pages respectively, to display messages. Bind
    the `click` event of the anchor link in the `pageinit` event handler, and clear
    any previously displayed messages. This callback is triggered whenever you click
    on the links in the app.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`main.html`，并添加一个带有`data-role="button"`的锚链接到`#main`页面的内容。此链接打开`main.html`中的`#page`页面。创建`#page`页面，如下所示，其中包含返回到`#main`的链接。分别向页面添加空的`#msgdiv`和`#pagediv`容器来显示消息。在`pageinit`事件处理程序中绑定锚链接的`click`事件，并清除先前显示的消息。每当你在应用中点击链接时，都会触发此回调。
- en: Now, bind the four page transition events to their callback functions as given
    in the script. These callback functions have two parameters available. The first
    is the `event` object and the second is the `data` object.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，按照脚本中给定的方式将四个页面转换事件绑定到它们的回调函数。这些回调函数有两个可用参数。第一个参数是`event`对象，第二个是`data`对象。
- en: In the callback of the `pagebeforeshow` event, get the `data.prevPage` (previous
    page) object. This can be empty on first load. Check if it is available (if it
    has the `prevPage` attribute) and use the `data.prevPage.data-url` string. Display
    the `prevPage` message in both the message `div` containers. Use similar logic
    in the callback for the `pagehide` event.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 在`pagebeforeshow`事件的回调函数中，获取`data.prevPage`（上一页）对象。第一次加载时可能为空。检查是否可用（是否具有`prevPage`属性），并使用`data.prevPage.data-url`字符串。在消息`div`容器中显示`prevPage`消息。在`pagehide`事件的回调函数中使用类似的逻辑。
- en: Similarly, in the callback of the `pagebeforehide` and `pagehide` events, obtain
    and display the `data.toPage` (source page) property. Finally, invoke the `animationComplete`
    plugin and define the `anim` callback function, as shown in the `pagebeforehide`
    event handler. Write code in the `anim()` function to display a simple **ANIMATION
    DONE!!!** message in both the div containers, as shown.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，在`pagebeforehide`和`pagehide`事件的回调函数中，获取并显示`data.toPage`（源页面）属性。最后，调用`animationComplete`插件，并在`pagebeforehide`事件处理程序中定义`anim`回调函数，如下所示。在`anim()`函数中编写代码，在两个div容器中显示简单的**动画完成!!!**消息。
- en: When the page loads for the first time, you can see the following image with
    the `pagebeforeshow` and `pageshow` event handlers being called. `prevPage` is
    undefined at this point of time.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 当页面首次加载时，您可以看到以下图片，显示了`pagebeforeshow`和`pageshow`事件处理程序被调用。此时`prevPage`是未定义的。
- en: '![How it works...](img/7225_08_14.jpg)'
  id: totrans-245
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/7225_08_14.jpg)'
- en: 'Click on the **Page 1** button to open `#page`. You can see messages from the
    `pagebeforehide` and `pagebeforeshow` event handlers saying that **Current Page**
    is **page** and **Previous Page** is **main**. Then, you can see the **ANIMATION
    DONE!!!** message from the `animationComplete()` callback. The page is visible
    at this point, and the messages from the `pagehide` and `pageshow` events can
    also be seen:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**Page 1**按钮打开`#page`。您可以看到来自`pagebeforehide`和`pagebeforeshow`事件处理程序的消息，即**当前页**是**page**，**上一页**是**main**。然后，您可以看到来自`animationComplete()`回调的**动画完成!!!**消息。此时页面可见，并且还可以看到来自`pagehide`和`pageshow`事件的消息：
- en: '![How it works...](img/7225_08_15.jpg)'
  id: totrans-247
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/7225_08_15.jpg)'
- en: 'Click on the **Go Back** button. Now, `#main` is shown and the messages are
    displayed as before. This time, **Current Page** is **main** and **Previous Page**
    is **page**:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**返回**按钮。现在，`#main`被显示，消息与之前一样显示。这次，**当前页**是**main**，**上一页**是**page**：
- en: '![How it works...](img/7225_08_16.jpg)'
  id: totrans-249
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/7225_08_16.jpg)'
- en: There's more...
  id: totrans-250
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'On first load, the `pagebeforeshow` and `pageshow` event handlers show an empty
    `data.nextPage` object. To display proper values on first load, these two events
    must be bound to their callback functions in the `mobileinit` handler, when the
    page loads and before loading the `jquery.mobile.js` script file, as shown in
    the following code snippet:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次加载时，`pagebeforeshow`和`pageshow`事件处理程序显示一个空的`data.nextPage`对象。为了在第一次加载时显示正确的值，这两个事件必须在`mobileinit`处理程序中绑定到它们的回调函数，即在页面加载之前以及加载`jquery.mobile.js`脚本文件之前，如下面的代码片段所示：
- en: '[PRE39]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: See also
  id: totrans-253
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Configuring the default transitions* recipe in [Chapter 7](ch07.html "Chapter 7. Configurations"),
    *Configurations*
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第7章](ch07.html "第7章. 配置")的*Configuring the default transitions*一节中，*配置*
- en: Using layout events
  id: totrans-255
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用布局事件
- en: Components, such as list views and collapsible blocks, are dynamically resized
    by user interactions. This could cause overlap of controls or positioning issues.
    To prevent this, these components trigger the `updatelayout` event, and the jQuery
    Mobile framework updates the entire document and ensures that all components are
    laid out correctly. This recipe shows you how to use the `updatelayout` event.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 用户交互动态调整大小的组件，例如列表视图和可折叠块，会导致控件重叠或定位问题。为防止此情况发生，这些组件会触发`updatelayout`事件，而jQuery
    Mobile框架会更新整个文档，确保所有组件都正确布局。本文介绍如何使用`updatelayout`事件。
- en: Getting ready
  id: totrans-257
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Copy the full code of this recipe from the `code/08/layout` sources folder.
    You can launch this code by using the URL `http://localhost:8080/08/layout/main.html`.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 从`code/08/layout`源文件夹中复制此配方的所有代码。您可以通过使用URL`http://localhost:8080/08/layout/main.html`来启动此代码。
- en: How to do it...
  id: totrans-259
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何实现的...
- en: 'Carry out the following steps:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤：
- en: 'Create `main.html` with three collapsible blocks and a `<div>` container, as
    shown in the following code snippet:'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码创建 `main.html`，其中包含三个可折叠块和一个 `<div>` 容器，如下面的代码片段所示：
- en: '[PRE40]'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Add the following script to the `<head>` section, to handle the `updatelayout`
    event:'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `<head>` 部分添加以下脚本，来处理 `updatelayout` 事件：
- en: '[PRE41]'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: How it works...
  id: totrans-265
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In `main.html`, add a `div` container with `id="msgdiv"` to the page content.
    Add three collapsible blocks with the `data-collapsed="false"` attribute. Add
    the given script to bind the `pageshow` event (which gets fired on page show),
    to an event handler. Here, bind the `updatelayout` event to a callback function.
    In this callback, use the `event.target.innerHTML` property to get the text of
    the collapsible block on which the `updatelayout` event was called. Display it
    in the `msgdiv` block as shown. Now, when you load the page, the three collapsible
    blocks are seen expanded.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `main.html` 中，向页面内容添加一个 `id="msgdiv"` 的 `div` 容器。添加三个带有 `data-collapsed="false"`
    属性的可折叠块。添加下面给出的脚本来绑定 `pageshow` 事件（在页面显示时触发），指向一个事件处理程序。在这里，把 `updatelayout` 事件绑定到一个回调函数。在这个回调函数中，使用
    `event.target.innerHTML` 属性来获取触发 `updatelayout` 事件的可折叠块的文本。如所示，显示在 `msgdiv` 块中。现在，当加载页面时，这三个可折叠块都是展开的。
- en: 'Click on the first block that says **Tallest Mountain**. You will see it collapse
    and `msgdiv` text being updated to show **updatelayout on: Mt. Everest**, as shown
    in the following screenshot:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 点击第一个块，显示 **最高的山**。你会看到它折叠，并且 `msgdiv` 文本被更新为显示 **更新布局在：珠穆朗玛峰**，如下面的截图所示：
- en: '![How it works...](img/7225_08_17.jpg)'
  id: totrans-268
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/7225_08_17.jpg)'
- en: There's more...
  id: totrans-269
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容...
- en: 'The jQuery Mobile framework updates the layout and adjusts the positions as
    required for most of the scenarios when you add or manipulate components or toggle
    their visibility in your page. You have to trigger the `create` or `refresh` method
    on these elements. But there may be occasions in which the framework does not
    handle the positioning properly when you add or manipulate controls or toggle
    their visibility. In such cases, you can trigger the `updatelayout` event and
    inform the framework to update all components and reposition them. You can do
    this by using the following code:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery Mobile 框架在你在页面中添加或操作组件或切换它们的可见性的情况下，会根据大多数场景动态更新布局并调整位置。你必须在这些元素上触发 `create`
    或 `refresh` 方法。但是在一些情况下，当你添加或操作控件或切换它们的可见性时，框架可能无法正确处理定位。在这种情况下，你可以触发 `updatelayout`
    事件，并告诉框架更新所有组件并重新定位它们。你可以通过以下代码来实现：
- en: '[PRE42]`'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE42]`'
