["```js\nReactDOM.render(\n    <PageAdmin backend=\"ajax\" />,\n    document.querySelector(\".react\")\n);\n```", "```js\nPageEditor.propTypes = {\n    \"id\": React.PropTypes.number.isRequired,\n    \"title\": React.PropTypes.string.isRequired,\n    \"body\": React.PropTypes.string.isRequired,\n    \"onUpdate\": React.PropTypes.func.isRequired,\n    \"onCancel\": React.PropTypes.func.isRequired\n};\n```", "```js\nPageView.propTypes = {\n    \"title\": React.PropTypes.string.isRequired,\n    \"onEdit\": React.PropTypes.func.isRequired,\n    \"onDelete\": React.PropTypes.func.isRequired\n};\n```", "```js\nPage.propTypes = {\n    \"id\": React.PropTypes.number.isRequired,\n    \"onDelete\": React.PropTypes.func.isRequired\n};\n```", "```js\nPageAdmin.propTypes = {\n    \"backend\": function(props, propName, componentName) {\n if (props.backend instanceof Backend) {\n return;\n }\n\n return new Error(\n \"Required prop `backend` is not a `Backend`.\"\n );\n }\n};\n```", "```js\nComponent.propTypes = {\n    \"page\": React.PropTypes.shape({\n \"id\": React.PropTypes.number.isRequired,\n \"title\": React.PropTypes.string.isRequired,\n \"body\": React.PropTypes.string.isRequired\n })\n};\n```", "```js\ndocument.cookie = \"pages=all_the_pages\";\ndocument.cookie = \"current=current_page_id\";\n```", "```js\nvar cookies = {};\n\nfunction readCookie(name) {\n    var chunks = document.cookie.split(\"; \");\n\n    for (var i = chunks.length - 1; i >= 0; i--) {\n        var parts = chunks[i].split(\"=\");\n        cookies[parts[0]] = parts[1];\n    }\n\n    return cookies[name];\n}\n\nexport default readCookie;\n```", "```js\nlocalStorage.setItem(\"pages\", \"all_the_pages\");\n```", "```js\nlocalStorage.getItem(\"pages\");\n```", "```js\nexport default {\n    \"get\": function(key, defaultValue) {\n        var value = window.localStorage.getItem(key);\n\n        var decoded = JSON.parse(value);\n\n        if (decoded) {\n            return decoded;\n        }\n\n        return defaultValue;\n    },\n\n    \"set\": function(key, value) {\n        window.localStorage.setItem(\n            key, JSON.stringify(value)\n        );\n    }\n};\n```", "```js\nimport LocalStore from \"local-store\";\n\nclass Backend {\n    constructor() {\n        this.pages = LocalStore.get(\"pages\", []);\n    }\n\n    getAll() {\n        return this.pages;\n    }\n\n    update(id, property, value) {\n        this.pages = this.pages.map((page) => {\n if (page.id == id) {\n page[property] = value;\n }\n\n return page;\n });\n\n LocalStore.set(\"pages\", this.pages);\n    }\n\n    delete(id) {\n        this.pages = this.pages.filter(\n (page) => page.id !== id\n );\n\n LocalStore.set(\"pages\", this.pages);\n    }\n}\n\nexport default Backend;\n```", "```js\nlocalStorage.setItem(\"pages\", JSON.stringify([\n    {\n       \"id\": 1,\n       \"title\": \"Home\",\n       \"body\": \"...\"\n    },\n    {\n       \"id\": 2,\n       \"title\": \"About Us\",\n       \"body\": \"...\"\n    },\n    {\n       \"id\": 3,\n       \"title\": \"Contact Us\",\n       \"body\": \"...\"\n    },\n    {\n       \"id\": 4,\n       \"title\": \"Products\",\n       \"body\": \"...\"\n    }\n]));\n```", "```js\nonUpdate(id, field, value) {\n    this.props.backend.update(id, field, value);\n\n    this.setState({\n        \"pages\": this.props.backend.getAll()\n    });\n}\n```", "```js\n$ npm install --save eventemitter3\n\n```", "```js\nclass Backend extends EventEmitter {\n    constructor() {\n        super();\n\n        this.pages = LocalStore.get(\"pages\", []);\n    }\n\n    getAll() {\n        return this.pages;\n    }\n\n    update(id, property, value) {\n        // ...update a page\n\n        this.emit(\"update\", this.pages);\n    }\n\n    delete(id) {\n        // ...delete a page\n\n        this.emit(\"update\", this.pages);\n    }\n}\n```", "```js\nconstructor(props) {\n    super(props);\n\n    this.bind(\n        \"onUpdate\",\n        \"onDelete\"\n    );\n\n    this.state = {\n        \"pages\": this.props.backend.getAll()\n    };\n\n    this.props.backend.on(\"update\",\n (pages) => this.setState({pages})\n );\n}\n\nonUpdate(id, field, value) {\n    this.props.backend.update(id, field, value);\n}\n\nonDelete(id) {\n    this.props.backend.delete(id);\n}\n```"]