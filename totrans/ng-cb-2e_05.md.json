["```js\n    npm run serve rx-seq-parallel-http \n    ```", "```js\n    fetchData() {\n        this.loadingData = true;\n        this.swapi.fetchPerson('1').subscribe({\n          next: (person) => {\n              this.person = person;\n              this.person.filmObjects = [];\n              this.person.films.forEach((filmUrl) => {\n                this.swapi.fetchFilm(filmUrl).subscribe({\n                  next: (film) => {\n                    this.person.filmObjects.push(film);\n                    this.loadingData = false;\n                  },\n                  error: (err) => {\n                    console.error('Error while fetching film',\n                      err);\n                  },\n                });\n              });\n          },\n          error: (err) => {\n            console.error('Error while fetching person', err);\n          }\n        });\n      } \n    ```", "```js\n    ...\n    **import** **{ mergeMap,** **of** **}** **from****'****rxjs'****;**\n    ...\n      fetchData() {\n        this.loadingData = true;\n        this.swapi\n          .fetchPerson('1')\n          .pipe(\n            **mergeMap****((person) => {**\n    **const** **personObj = {**\n    **...person,**\n    **filmObjects****: [],**\n    **};**\n    **return** **of****(personObj);**\n    **})**\n    **)**\n          .subscribe({\n            next: (person) => {\n              this.person = person;\n              this.person.films.forEach((filmUrl) => {\n                this.swapi.fetchFilm(filmUrl).subscribe({\n                  next: (film) => {\n                    this.person.filmObjects.push(film);\n                    this.loadingData = false;\n                  },\n                  error: (err) => {\n                    console.error('Error while fetching film', err);\n                  },\n                });\n              });\n            },\n            error: (err) => {\n              console.error('Error while fetching person', err);\n            },\n          });\n      } \n    ```", "```js\n    import { **forkJoin,** mergeMap, of **(//<-- remove of)** } from 'rxjs';\n    ...\n      fetchData() {\n        this.loadingData = true;\n        this.swapi\n          .fetchPerson('1')\n          .pipe(\n            mergeMap((person) => {\n              const personObj = {\n                ...person,\n                filmObjects: [],\n              };\n              this.person = personObj;\n              **return** **forkJoin****(**\n    **this****.person.films.****map****((filmUrl) =>**\n    **this****.swapi****.****fetchFilm****(filmUrl))**\n    **);**\n            }),\n            catchError((err) => {\n              console.error('Error while fetching films', err);\n              alert('Could not get films. Please try again.');\n              return of([]);\n            })\n          )\n          .subscribe({\n            next: (films) => {\n              this.person.filmObjects = films;\n              this.loadingData = false;\n            },\n            error: (err) => {\n              console.error('Error while fetching person', err);\n            },\n          });\n      } \n    ```", "```js\n    npm run serve rx-multiple-streams \n    ```", "```js\n    ...\n    export class HomeComponent implements OnInit {\n      ...\n      ngOnInit() {\n        this.applyChanges();\n      }\n      **listenToInputChanges****() {**\n    **const****controls****:** **AbstractControl****[] = [**\n    **this****.****boxForm****.****controls****.****size****,**\n    **this****.****boxForm****.****controls****.****borderRadius****,**\n    **this****.****boxForm****.****controls****.****textColor****,**\n    **this****.****boxForm****.****controls****.****backgroundColor****,**\n    **];**\n    **}**\n      ...\n    } \n    ```", "```js\n    **import** **{ startWith }** **from****'rxjs'****;**\n    ...\n    export class HomeComponent implements OnInit {\n    ...\n    listenToInputChanges() {\n        const controls: AbstractControl[] = [...];\n        controls.map((control) =>\n          control.valueChanges.pipe(**startWith****(control.value)**)\n        );\n      }\n    } \n    ```", "```js\n    ...\n    import { **Observable**, **combineLatest**, startWith} from 'rxjs';\n    ...\n    export class HomeComponent implements OnInit, OnDestroy {\n      ...\n      **boxStyles$!:** **Observable****<****BoxStyles****>;**\n            ...\n      listenToInputChanges() {\n        **this****.****boxStyles$** **=** **combineLatest****(**\n          controls.map((control) =>\n            control.valueChanges.pipe(startWith(control.value))\n          );\n        **);**\n    **}**\n      ...\n    } \n    ```", "```js\n    import { combineLatest, **map**, Observable, startWith } from 'rxjs';\n    export class HomeComponent implements OnInit {\n      listenToInputChanges() {\n        const controls: AbstractControl[] = [...];\n        this.boxStyles$ = combineLatest(...)**.****pipe****(**\n    **map****(****(****[size, borderRadius, textColor,**\n    **backgroundColor]****) =>** **{**\n    **return** **{** **width****:** **`****${size}****px`****,** **height****:** **`****${size}****px`****,**\n    **backgroundColor****: backgroundColor,**\n    **color****: textColor,**\n    **borderRadius****:** **`****${borderRadius}****px`****,**\n    **};**\n    **})**\n    **);**\n      }\n    } \n    ```", "```js\n    export class HomeComponent implements OnInit {\n      ...\n      ngOnInit() {\n        **this****.****listenToInputChanges****();** **//← Add this call**\n        ...\n        **this****.****applyChanges****();** **//← Remove this call**\n    **}**\n    **...**\n    **setBoxStyles****(****...****) {...}** **//← Remove this method**\n    **applyChanges****() {...}** **//← Remove this method**\n      ...\n    } \n    ```", "```js\n    <div class=\"home\" [formGroup]=\"boxForm\"\n     **(****ngSubmit****)=****\"applyChanges()\"****<!--← Remove this-->**\n      ...\n    </div> \n    ```", "```js\n    <div class=\"row submit-btn-container\" **<!--← Remove this element -->**\n    <button class=\"btn btn-primary\" type=\"submit\" \n        (click)=\"applyChanges()\">Change Styles</button>\n    </div> \n    ```", "```js\n     ...\n      **<****div****class****=****\"row\"** *******ngIf****=****\"boxStyles$ | async as**\n    **boxStyles\"****>**\n    **<****div****class****=****\"box\"** **[****ngStyle****]=****\"boxStyles\"****>**\n    **<****div****class****=****\"box__text\"****>**\n    **Hello World!**\n    **</****div****>**\n    **</****div****>**\n    **</****div****>**\n      ... \n    ```", "```js\n    npm run serve rx-unsubscribing-streams \n    ```", "```js\n    ...\n    export class HomeComponent implements OnInit {\n      ...\n      startStream() {\n        const streamSource = interval(1500);\n        this.subscription = streamSource.subscribe((input) => {\n          this.outputStreamData.push(input);\n          **console****.****log****({ input });**\n        });\n      }\n      stopStream() {...}\n    } \n    ```", "```js\n    import { Component, **OnDestroy** } from '@angular/core';\n    ...\n    @Component({...})\n    export class HomeComponent implements **OnDestroy** {\n      ...\n      startStream() {...}\n      **ngOnDestroy****() {**\n    **this****.****stopStream****();**\n    **}**\n    stopStream() {...}\n    } \n    ```", "```js\nstartStream() {\n    const streamSource = interval(1500);\n    **const** **secondStreamSource =** **interval****(****3000****);**\n**const** **fastestStreamSource =** **interval****(****500****);**\n    streamSource.subscribe((input) => {\n      this.outputStreamData.push(input);\n      **console****.****log****(****'first stream output'****, input);**\n    });\n    **secondStreamSource.****subscribe****(****input** **=>** **{**\n**this****.****outputStreamData****.****push****(input);**\n**console****.****log****(****'second stream output'****, input)**\n**});**\n**fastestStreamSource.****subscribe****(****input** **=>** **{**\n**this****.****outputStreamData****.****push****(input);**\n**console****.****log****(****'fastest stream output'****, input)**\n**});**\n  }\n  stopStream() {\n    **// remove code from here**\n  } \n```", "```js\n    import { Component, OnDestroy } from '@angular/core';\n      ...\n    export class HomeComponent implements OnDestroy {\n      isStreamActive = true;\n      ...\n    } \n    ```", "```js\n    import { Component, OnInit, OnDestroy } from '@angular/core';\n    ...\n    import { interval, Subscription, **takeWhile** } from 'rxjs'; \n    ```", "```js\n    startStream() {\n        ...\n        streamSource\n          **.****pipe****(****takeWhile****(****() =>****this****.****isStreamActive****))**\n          .subscribe(input => {...});\n        secondStreamSource\n          **.****pipe****(****takeWhile****(****() =>****this****.****isStreamActive****))**\n          .subscribe(input => {...});\n        fastestStreamSource\n          **.****pipe****(****takeWhile****(****() =>****this****.****isStreamActive****))**\n          .subscribe(input => {...});\n      } \n    ```", "```js\n     ngOnDestroy() {\n        this.stopStream();\n      }\n      startStream() {\n      **isStreamActive =** **true****;**\n    const streamSource = interval(1500);\n        const secondStreamSource = interval(3000);\n        const fastestStreamSource = interval(500);\n        ...\n      } \n    ```", "```js\n     stopStream() {\n        **this****.****isStreamActive** **=** **false****;**\n      } \n    ```", "```js\n     <div class=\"home\">\n    <div class=\"buttons-container\">\n    <button [disabled]=\"**isStreamActive**\" class=\"btn btn-\n    primary\" (click)=\"startStream()\">Start\n              Stream</button>\n    <button [disabled]=\"**!isStreamActive**\" class=\"btn\n    btn-dark\" (click)=\"stopStream()\">Stop\n              Stream</button>\n    </div>\n          ...\n      </div> \n    ```", "```js\n    npm run serve ng-async-pipe \n    ```", "```js\n    ...\n    import { interval, **Observable**, takeWhile } from 'rxjs';\n    ...\n    export class HomeComponent implements OnDestroy {\n      ...\n      isStreamActive!: boolean;\n      **streamsOutput$!:** **Observable****<****number****>;**\n    constructor() { }\n      ...\n    } \n    ```", "```js\n    ...\n    import { interval, **merge**, **scan**, Observable, takeWhile } from 'rxjs';\n    ...\n    export class HomeComponent implements OnDestroy {\n      ...\n      startStream() {\n        ...\n        const fastestStreamSource = interval(500);\n        **this****.****streamsOutput$** **=** **merge****(**\n    **streamSource,**\n    **secondStreamSource,**\n    **fastestStreamSource**\n    **).****pipe****(**\n    **scan****(****(****acc, next****) =>** **{**\n    **return** **[...acc, next];**\n    **}, []** **as****number****[])**\n    **);**\n      }\n      ...\n    } \n    ```", "```js\n    startStream() {\n        ...\n        this.streamsOutput$ = merge(...).pipe(\n          **takeWhile****(****() =>****this****.****isStreamActive****),**\n    scan((acc, next) => {\n            return [...acc, next];\n          }, [] as number[])\n        **)**\n      } \n    ```", "```js\n     <div class=\"output-stream\">\n    <div class=\"input-stream__item\" *ngFor=\"let item of\n    **streamsOutput$ | async**\">\n            {{item}}\n          </div>\n    </div> \n    ```", "```js\n    import { ..., takeWhile, **tap** } from 'rxjs';\n    startStream() {\n        ...\n        this.streamsOutput$ = merge(...).pipe(\n          takeWhile(...),\n          scan(...)**,**\n    **tap****(****(****output****) =>****console****.****log****(****'output'****, output))**\n        )\n      } \n    ```", "```js\n    npm run serve rx-map-operator \n    ```", "```js\n    ...\n    import { delay, forkJoin, **Observable** } from 'rxjs';\n    import { IFilm, **IPerson** } from './interfaces';\n    ...\n    export class SwapiService {\n      ...\n      **fetchData****(****personId****:** **string****):** **Observable****<{****person****:**\n    **IPerson****}> {**\n    **}**\n    fetchPerson(id: string) {...}\n      fetchPersonFilms(films: string[]) {...}\n    } \n    ```", "```js\n    ...\n    export class SwapiService {\n      ...\n      fetchData(personId: string): Observable<{person: IPerson}> {\n        let personInfo: IPerson;\n        **return****this****.****fetchPerson****(personId)**\n    **.****pipe****(**\n    **mergeMap****(****(****person****) =>** **{**\n    **personInfo = person;**\n    **return****this****.****fetchPersonFilms****(person.****films****);**\n    **})**\n    **)**\n    **}**\n      ...\n    } \n    ```", "```js\n    ...\n    import { delay, forkJoin, **map**, mergeMap, Observable } from 'rxjs';\n    ...\n    export class SwapiService {\n     ...\n      fetchData(personId: string): Observable<{ person: IPerson }> {\n        let personInfo: IPerson;\n        return this.fetchPerson(personId).pipe(\n          mergeMap((person) => {\n            personInfo = person;\n            return this.fetchPersonFilms(person.films);\n          })**,**\n    **map****(****(****films: IFilm[]****) =>** **{**\n    **personInfo.****filmObjects** **= films;**\n    **return** **{**\n    **person****: personInfo,**\n    **};**\n    **})**\n        );\n      }\n      ...\n    } \n    ```", "```js\n    ...\n    export class AppComponent implements OnInit {\n      ...\n      fetchData() {\n        this.loadingData = true;\n        **this****.****swapi****.****fetchData****(****'1'****).****subscribe****(****(****response****) =>** **{**\n    **this****.****appData** **= response;**\n    **this****.****loadingData** **=** **false****;**\n    **});**\n      }\n    } \n    ```", "```js\n    npm run serve rx-switchmap-operato \n    ```", "```js\n    ...\n    import { mergeMap, startWith, takeWhile, **switchMap** } from 'rxjs/operators'; \n    ```", "```js\n    ngOnInit() {\n        ...\n        this.searchForm.controls['username'].valueChanges\n          .pipe(\n            startWith(''),\n            takeWhile(() => this.componentAlive),\n            **switchMap**((query) =>\n    this.userService.searchUsers(query))\n          )\n          .subscribe((users) => {...});\n      } \n    ```", "```js\n    ...\n    import { **debounceTime, ..**.} from 'rxjs/operators';\n    ...\n    export class UsersComponent implements OnInit {\n      ...\n      ngOnInit() {\n        ...\n        this.searchForm.controls['username'].valueChanges\n          .pipe(\n            startWith(''),\n            **debounceTime****(****500****),**\n    takeWhile(() => this.componentAlive),\n            switchMap((query) =>\n    this.userService.searchUsers(query))\n          )\n          .subscribe((users) => {...});\n      }\n    } \n    ```", "```js\n    npm run serve rx-custom-operator \n    ```", "```js\n    import { Observable } from 'rxjs/internal/Observable';\n    import { tap } from 'rxjs/operators';\n    const logWithLabel = <T>(\n      label: string\n    ): ((source$: Observable<T>) => Observable<T>) => {\n      return (source$) => source$.pipe(tap((value) =>\n    console.log(label, value)));\n    };\n    export default logWithLabel; \n    ```", "```js\n    ...\n    **import** **logWithLabel** **from****'../log-with-label'****;**\n    @Component({...})\n    export class HomeComponent {\n      ...\n      startStream() {\n        ...\n        this.streamsOutput$ = merge(...).pipe(\n          takeWhile(...),\n          scan(...),\n          **logWithLabel****(****'stream-output'****)**\n        );\n      }\n      ...\n    } \n    ```", "```js\n    npm run serve rx-retry-http-calls with-server \n    ```", "```js\n    import { of, pipe, throwError } from 'rxjs';\n    import { retry } from 'rxjs/operators';\n    export function retryBackoff(maxTries: number, delay: number) {\n      return pipe(\n        retry({\n          delay: (error, retryCount) => {\n            return retryCount > maxTries ? throwError(() =>\n              error) : of(retryCount);\n          },\n        })\n      );\n    } \n    ```", "```js\n    ...\n    **import** **{ retryBackoff }** **from****'./retry-backoff'****;**\n    ...\n    export class AppComponent implements OnInit {\n      ...\n      ngOnInit(): void {\n        this.isMakingHttpCall = true;\n        this.http\n          .get('http://localhost:3333/api/bad-request')\n          .pipe(\n            **retryBackoff****(****3****,** **300****),**\n    catchError(...)\n          )\n          .subscribe(...);\n      }\n    } \n    ```", "```js\n    import { of, pipe, throwError, **timer** } from 'rxjs';\n    import { **map, mergeMap**, retry } from 'rxjs/operators';\n    export function retryBackoff(maxTries: number, delay: number) {\n      return pipe(\n        retry({\n          delay: (error, retryCount) => {\n            return (\n              retryCount > maxTries ? throwError(() => error) :\n                of(retryCount)\n            )**.****pipe****(**\n    **map****(****(****count****) =>** **count * count),**\n    **mergeMap****(****(****countSq****) =>****timer****(countSq * delay))**\n    **);**\n          },\n        })\n      );\n    } \n    ```"]