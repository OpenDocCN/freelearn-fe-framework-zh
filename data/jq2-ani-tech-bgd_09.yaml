- en: Chapter 9. CSS3 Animations
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章 CSS3动画
- en: '*CSS3 brings many impressive new styles to the web-development arena, and even
    though the specification is far from complete, many aspects of it are being used
    in the latest browsers. Pure-CSS animation may even make it into the specification
    at some point. At the time of writing nearly all modern browsers fully support
    this. However, with a little help from jQuery we can create our own CSS3 animations
    that work with varying degrees of success, across all common browsers, new and
    old.*'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '*CSS3为Web开发带来了许多令人印象深刻的新样式，即使规范还远未完成，它的许多方面已经在最新的浏览器中使用。纯CSS动画甚至可能在某个时点被纳入规范中。在写作时，几乎所有现代浏览器都完全支持这一点。然而，通过一点点jQuery的帮助，我们可以创建自己的CSS3动画，这些动画在各种常见浏览器中都可以有不同程度的成功。*'
- en: 'In this chapter, we''ll be covering the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: The different CSS3 transforms available
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可用的不同CSS3变换
- en: Animating an element's rotation
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对元素旋转进行动画处理
- en: Using the CSS3 transforms matrix
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用CSS3变换矩阵
- en: Animating an element's skew with jQuery
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用jQuery对元素的倾斜进行动画处理
- en: Note
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For further information on CSS3 2D transforms, see the W3C Working Draft specification
    at [http://www.w3.org/TR/css3-transforms/](http://www.w3.org/TR/css3-transforms/).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 关于CSS3 2D变换的更多信息，请参阅W3C工作草案规范[http://www.w3.org/TR/css3-transforms/](http://www.w3.org/TR/css3-transforms/)。
- en: CSS3 2D transforms
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSS3 2D变换
- en: 'CSS3 defines a style property called `transform` which allows us to transform
    targeted elements in a two-dimensional space along the x and y axes. A range of
    transform functions can be supplied as the value of the `transform` property,
    which dictates how the transformation should be applied. The following 2D transform
    functions are defined:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: CSS3定义了一个名为`transform`的样式属性，允许我们在二维空间沿着x和y轴转换目标元素。一系列的变换函数可以作为`transform`属性的值，决定了变换应该如何应用。下面定义了以下2D变换函数：
- en: '| Function | Example usage | Description of the transform |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: 函数 | 例子用法 | 变换描述
- en: '| --- | --- | --- |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `matrix` | `matrix(a, b, c, d, tx, ty)` | It rotates, scales, skews, or translates
    the element according to the combination of the supplied parameters. |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| `matrix` | `matrix(a, b, c, d, tx, ty)` | 它根据提供的参数的组合旋转，缩放，倾斜或平移元素。'
- en: '| `rotate` | `rotate(x)` | It rotates the element with a specified number of
    degree around the transform-origin. By default, the origin should be the center
    of the element. |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| `rotate` | `rotate(x)` | 它围绕变换原点将元素旋转指定角度。默认情况下，原点应该是元素的中心。'
- en: '| `scale` | `scale(x, y)` | It scales the element with the specified number
    of units along the x and y axes. If y is not supplied, it is assumed to be the
    same as x. |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| `scale` | `scale(x, y)` | 它沿着x和y轴方向按指定的单位数进行缩放元素。如果没有给出y，就假定它与x相同。'
- en: '| `scaleX` | `scale(x)` | It scales the element with the specified number of
    units along the x axis. |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| `scaleX` | `scale(x)` | 它沿x轴按指定的单位数进行缩放元素。'
- en: '| `scaleY` | `scale(y)` | It scales the element with the specified number of
    units along the y axis. |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| `scaleY` | `scale(y)` | 它沿y轴按指定的单位数进行缩放元素。'
- en: '| `skew` | `skew(x, y)` | It skews the element with the specified number of
    degree along the x and y axes. If y is not supplied it is assumed to be 0. |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| `skew` | `skew(x, y)` | 它沿着x和y轴以指定的角度倾斜元素。如果没有提供y，则假定为0。'
- en: '| `skewX` | `skew(x)` | It skews the element with the specified number of degree
    along the x axis. |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| `skewX` | `skew(x)` | 它沿x轴沿指定角度倾斜元素。'
- en: '| `skewY` | `skew(y)` | It skews the element with the specified number of degree
    along the y axis. |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| `skewY` | `skew(y)` | 它沿y轴沿指定角度倾斜元素。'
- en: '| `translate` | `translate(x, y)` | It repositions the element with the specified
    number of pixels along the x and y axes. If y is not provided it is assumed to
    be 0. |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| `translate` | `translate(x, y)` | 它将元素沿x和y轴重新定位指定像素。如果没有提供y，假设为0。'
- en: '| `translateX` | `translate(x)` | It repositions the element with the specified
    number of pixels along the x axis. |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| `translateX` | `translate(x)` | 它将元素沿x轴重新定位指定像素。'
- en: '| `translateY` | `translate(y)` | It repositions the element with the specified
    number of pixels along the y axis. |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| `translateY` | `translate(y)` | 它将元素沿y轴重新定位指定像素。'
- en: Understanding the matrix
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解矩阵
- en: All the individual transform functions (`rotate()`, `skew()`, among others)
    can be thought of as shortcuts for a specific matrix transform. Indeed, most browsers
    will apply a matrix behind-the-scenes even when a transform function is provided.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 所有单独的转换函数（`rotate()`，`skew()`等）可以看作是执行特定矩阵转换的快捷方式。实际上，大多数浏览器在提供转换函数时，甚至在幕后都会应用矩阵。
- en: The `matrix` function takes six parameters, and each of the transforms mentioned
    in the previous table can be performed by providing different combinations of
    values for these parameters. Sometimes we can apply several transforms simultaneously
    by using the `matrix` function. Let's look at some quick examples to illustrate
    how the matrix can be used.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`matrix`函数接受六个参数，并且前面表中提到的每种转换都可以通过为这些参数提供不同组合的值来执行。有时我们可以使用`matrix`函数同时应用多个变换。让我们看些快速的示例来说明如何使用矩阵。'
- en: Translate
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 平移
- en: 'Translating an element causes it to move from its original location. Positive
    values translate the element to the right or down the page (depending on the axis),
    and negative values move the element to the left or up the page. For example,
    an element could be moved 100 pixels right along the x axis and 100 pixels down
    along the y axis using the following transformation matrix:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 对元素进行平移会使其从原始位置移动。正值将元素移动到页面的右侧或下方（取决于轴），而负值将元素移动到页面的左侧或上方。例如，可以使用以下变换矩阵使元素在x轴沿右移动100像素，y轴沿下移动100像素：
- en: '```js'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '```js'
- en: 'transform: matrix(1, 0, 0, 1, 100, 100);'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 'transform: matrix(1, 0, 0, 1, 100, 100);'
- en: '```'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'This `matrix` function, equivalent to using the transform function `translate(100px,
    100px)`, would cause the targeted element to appear like the following screenshot:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`matrix`函数等同于使用转换函数`translate(100px, 100px)`，将导致目标元素看起来如下截图：
- en: '![Translate](img/9642OS_09_01.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![平移](img/9642OS_09_01.jpg)'
- en: As we can see in the previous screenshot, the element has moved from its original
    location (upper-left corner of the screen) even though we have not used CSS to
    position the element, which we can see is the case in the DOM Inspector.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前一个截图中看到的，尽管我们没有使用CSS来定位该元素，但该元素已从其原始位置（屏幕左上角）移动，我们可以在DOM Inspector中看到这一情况。
- en: The fifth parameter of the matrix in this example corresponds to the x axis,
    and the sixth parameter to the y axis. Don't worry too much about the first four
    parameters as we will cover these in more detail shortly.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例中矩阵的第五个参数对应x轴，第六个参数对应y轴。不要过于担心前四个参数，因为我们很快就会更详细地讨论这些内容。
- en: Note
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It is of critical importance to note that some browsers, such as Firefox, expect
    these values with the units specified (as in the previous screenshot), while other
    browsers, such as Opera, or those based on the WebKit rendering engine, will expect
    these values without units.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 需要特别注意的是，一些浏览器（如Firefox）期望这些值带有指定的单位（正如前一个截图中），而其他浏览器（如Opera）或基于WebKit渲染引擎的浏览器则希望这些值不带单位。
- en: An element does not need to be positioned in order for it to be translated,
    and the transform does not affect the flow of the document or other elements around
    it. Adjacent elements will position themselves according to an element's original
    location, not its new location following a translation. The translated element's
    content is also translated along with it.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 元素不需要定位才能进行平移，并且转换不会影响文档的流或周围其他元素。相邻元素将根据元素的原始位置而不是其平移后的新位置进行定位。转换后，元素的内容也将被一起平移。
- en: Scale
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 缩放
- en: You may be wondering why we supplied the value 1 as the first and fourth parameters
    in our first matrix code snippet, but 0 as the value of the second and third parameters
    instead of supplying all zeros.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 也许你会想为什么在我们第一个矩阵代码片段中，我们提供了值1作为第一个和第四个参数，但是第二和第三个参数的值却为0，而不提供所有的零值。
- en: 'The reason for this is that, the parameters (the first and fourth) correspond
    to the `scale` transform function, so to retain the transformed element''s original
    size, the `scale` parameters are set to 1\. To double the size of an element (without
    translating its position), we could use the following transformation matrix:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为参数（第一和第四）对应于`scale`转换函数，因此为保留变换后的元素原始大小，`scale`参数被设置为1。要使元素的大小加倍（而不移动其位置），我们可以使用以下变换矩阵：
- en: '```js'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '```js'
- en: 'transform: matrix(2, 0, 0, 2, 0, 0);'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 'transform: matrix(2, 0, 0, 2, 0, 0);'
- en: '```'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'This snippet would be equivalent to using `transform: scale(2, 2)` and would
    cause the targeted element to appear like this:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '此片段相当于使用 `transform: scale(2, 2)`，并会导致目标元素显示如下：'
- en: '![Scale](img/9642OS_09_02.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![缩放](img/9642OS_09_02.jpg)'
- en: In the previous screenshot we can see that the element is now twice its original
    size.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，我们可以看到该元素现在是其原始大小的两倍。
- en: The previous code symmetrically scales the target element along both the x and
    y axes. These values are unitless in all supporting browsers, and the value 0
    cannot be specified. Integers or floating-point numbers may be provided, and the
    scaling may be asymmetrical if necessary.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码会沿着 x 和 y 轴对目标元素进行对称缩放。这些值在所有支持的浏览器中都是无单位的，且不能指定为值 0。可以提供整数或浮点数，并且如果需要可以进行非对称缩放。
- en: An interesting effect of scaling is that, providing negative values cause the
    element to be reversed, and not shrunk, as we may intuitively surmise. So if we
    were to provide `-2` and `-2` as the first and fourth values in the previous code
    snippet, the element would be reflected both vertically and horizontally, as well
    as being made twice its original size. We can even supply a combination of positive
    and negative values for this type of transformation.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 缩放的一个有趣效果是，提供负值会导致元素被反转，而不是像我们直观地推测的那样收缩。因此，如果我们在前面的代码片段中提供 `-2` 和 `-2` 作为第一个和第四个值，那么该元素将在垂直和水平方向上都反射，并且大小将增加两倍。甚至可以为这种类型的转换提供正负值的组合。
- en: 'A reflected element would appear like this:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 反射的元素会显示如下：
- en: '![Scale](img/9642OS_09_03.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![缩放](img/9642OS_09_03.jpg)'
- en: The element is reversed along both its x and y axis, as if it were being viewed
    upside down in a mirror. This could be hugely useful if, for example, we were
    implementing pure-CSS reflections.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 该元素沿其 x 和 y 轴反转，就像在镜子中倒置查看一样。如果，例如，我们正在实现纯 CSS 反射，这可能非常有用。
- en: Skew
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 倾斜
- en: 'The two zero values that correspond to the second and the third parameters
    in the matrix can be used as skew values, with the x axis using the second parameter,
    and the y axis using the third. We could skew an element (without modifying its
    scale or position) using the following matrix transform function:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 与矩阵中第二个和第三个参数对应的两个零值可以用作倾斜值，其中 x 轴使用第二个参数，y 轴使用第三个参数。我们可以使用以下矩阵变换函数对元素进行倾斜（而不修改其比例或位置）：
- en: '```js'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '```js'
- en: 'transform: matrix(1, 1, 0, 1, 0, 0);'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 'transform: matrix(1, 1, 0, 1, 0, 0);'
- en: '```'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'The following screenshot shows a skewed element:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了一个倾斜的元素：
- en: '![Skew](img/9642OS_09_04.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![倾斜](img/9642OS_09_04.jpg)'
- en: The previous screenshot shows an element skewed along the x axis. As with other
    matrix functions, positive values for these parameters cause transformation along
    the right or downwards direction, negative values along the left or upward direction.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的截图显示了一个沿 x 轴倾斜的元素。与其他矩阵函数一样，对这些参数的正值会导致沿右侧或向下的方向转换，负值会导致沿左侧或向上的方向转换。
- en: In the previous snippet, only the x axis has been skewed. A consequence of the
    skew is that the element has grown in size. The bounding box of the transformed
    element has doubled in size from 200 px (the original size of the element) to
    400 px.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的片段中，只有 x 轴被倾斜。倾斜的一个后果是元素增大了。转换后元素的边界框尺寸从 200 px（元素的原始大小）增加到了 400 px。
- en: Regardless of this increase in size however, the flow of the document remains
    unaffected by the transform and just like the other transforms, any content within
    the transformed element also becomes transformed.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管尺寸增加，但文档的流程不受变换的影响，而且与其他变换一样，变换元素内的任何内容也会被转换。
- en: Note
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Transforms have a varying impact on any text contained in the element across
    different browsers, with the text remaining crisp and readable in some browsers
    following a transform, and degrading in other browsers.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在不同的浏览器中，变换对元素中包含的任何文本的影响各不相同，在一些浏览器中，文本在变换后仍然清晰可读，而在其他浏览器中则会降级。
- en: Rotation
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 旋转
- en: To rotate an element using the matrix, we need to use the trigonometric functions
    sine and cosine to calculate the values of the first four parameters. The first
    and the fourth parameters take cosine functions of the angle of rotation, while
    the second and the third parameters are sine and minus-sine functions of the rotation
    respectively.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用矩阵旋转元素，我们需要使用三角函数正弦和余弦来计算前四个参数的值。第一个和第四个参数分别为旋转角度的余弦函数，而第二个和第三个参数分别为旋转的正弦函数和负正弦函数。
- en: Note
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The sine and cosine functions are relatively advanced mathematical constructs
    used to express the different relationships between the sides of triangles and
    the angles of triangles.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 正弦和余弦函数是相对较高级的数学构造，用于表示三角形的边和角之间的不同关系。
- en: While an understanding of their exact nature is not essential to use them (JavaScript
    has built-in functions that will calculate them automatically), a deeper understanding
    of their nature and use will only help when working specifically with rotation.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然精确理解它们的本质对于使用它们并不是必要的（JavaScript有内置函数可以自动计算它们），但深入理解它们的本质和用途在特定处理旋转时会有所帮助。
- en: For a basic introduction, see the Wikipedia article on Trigonometric functions
    at [http://en.wikipedia.org/wiki/Trigonometric_functions](http://en.wikipedia.org/wiki/Trigonometric_functions).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 关于基本介绍，请参阅维基百科对三角函数的文章 [http://en.wikipedia.org/wiki/Trigonometric_functions](http://en.wikipedia.org/wiki/Trigonometric_functions)。
- en: 'To rotate an element by, for example, 37 degrees we would use the following
    transform:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要将一个元素旋转37度，我们将使用以下变换：
- en: '```js'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '```js'
- en: 'transform: matrix(0.7986355, 0.6018150, -0.6018150, 0.7986355, 0, 0);'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 'transform: matrix(0.7986355, 0.6018150, -0.6018150, 0.7986355, 0, 0);'
- en: '```'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Our rotated element should appear like this:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们旋转后的元素应该是这样的：
- en: '![Rotation](img/9642OS_09_05.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![旋转](img/9642OS_09_05.jpg)'
- en: As we can see, the edges of the rotated element appear outside of the viewport.
    Care should be taken to correctly position elements that are to be rotated so
    as to ensure that there is adequate space to display the element in its entirety
    if necessary.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，旋转后元素的边缘超出了视口。应谨慎正确地定位将要旋转的元素，以确保在必要时有足够的空间显示元素的全部内容。
- en: Calculating the sine and cosine functions of the angle of rotation can be easily
    done using a scientific calculator, or of course JavaScript itself programmatically.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过科学计算器轻松计算旋转角度的正弦和余弦函数，或者当然也可以通过JavaScript自行进行编程。
- en: Working with transforms
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理变换
- en: Using the shortcut transform functions such as `rotate()` or `skew()` is easier
    and more convenient than using the matrix. However, this ease of use comes at
    a price—we're limited to using only one of them at a time on a single element.
    If we were to try and use more than one of them in a CSS statement, only the last
    one defined would be applied.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 使用诸如`rotate()`或`skew()`之类的快捷变换函数比使用矩阵更容易更方便。然而，这种易用性是有代价的——我们只能在单个元素上一次使用其中一个。如果我们试图在CSS语句中使用多个，只会应用最后一个定义的。
- en: 'If we need to apply several different transforms to an element, we can use
    the matrix function, depending on which transformations we need to apply. For
    example, we can skew an element, while also translating and scaling it using something
    like the following:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们需要将多个不同的变换应用于一个元素，我们可以使用矩阵函数，具体取决于我们需要应用哪些变换。例如，我们可以倾斜一个元素，同时使用以下方法进行平移和缩放：
- en: '```js'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '```js'
- en: 'transform: matrix(2, -1, 0, 2, 300px, 0);'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 'transform: matrix(2, -1, 0, 2, 300px, 0);'
- en: '```'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: In this example, the element would be skewed along the x axis, doubled in size,
    and moved 300 px to the right. We couldn't rotate the targeted element in the
    previous code snippet at the same time as doing these things.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，元素沿着x轴倾斜，大小加倍，并向右移动300 px。我们无法在上一个代码片段中同时对目标元素进行旋转。
- en: Even if we supply two matrix functions, one for the skew, scale, and translate,
    and a second for the rotation, then only the rotation would be applied. We can
    however rotate and translate, or rotate and scale an element simultaneously using
    a single matrix function.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 即使我们提供两个矩阵函数，一个用于倾斜、缩放和平移，另一个用于旋转，只有旋转会被应用。但是，我们可以使用单个矩阵函数同时旋转和平移，或旋转和缩放一个元素。
- en: Using jQuery and transforms
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用jQuery和变换
- en: We can use jQuery's `css()` method in the setter mode to set the CSS3 transforms
    on selected elements, and we can use it in getter mode to retrieve any transform
    functions set on an element. We just need to ensure that we use the correct vendor
    prefix, such as `–moz-transform` for Firefox, or `-webkit-transform` for WebKit/Blink-based
    browsers. Opera also has its own vendor prefix (for older versions), as do newer
    versions of IE.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用jQuery的`css()`方法在设置器模式下在所选元素上设置CSS3变换，并且我们可以在获取器模式下检索在元素上设置的任何变换函数。我们只需要确保使用正确的供应商前缀，例如`-moz-transform`用于Firefox，或`-webkit-transform`用于WebKit/Blink-based浏览器。Opera也有自己的供应商前缀（对于较旧的版本），新版本的IE也有。
- en: 'One thing to be aware of is that while we can set a specific transform function
    such as `rotate()` on a selected element, we can only get the value of the `style`
    property in its matrix format. Have a look at the following code:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的一件事是，虽然我们可以在选定的元素上设置特定的变换函数，比如 `rotate()`，但我们只能以其矩阵格式获取 `style` 属性的值。看一下下面的代码：
- en: '```js'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '```js'
- en: $("#get").css("-moz-transform", "rotate(30deg)");
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: $("#get").css("-moz-transform", "rotate(30deg)");
- en: $("#get").text($("#get").css("-moz-transform"));
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: $("#get").text($("#get").css("-moz-transform"));
- en: '```'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'This would result in the following:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这将导致以下结果：
- en: '![Using jQuery and transforms](img/9642OS_09_06.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![使用 jQuery 和变换](img/9642OS_09_06.jpg)'
- en: In the previous screenshot, we see that the rotation we applied in the first
    line of code using the `rotate()` transform function is returned with the second
    line of code as a matrix function.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一张屏幕截图中，我们看到我们在第一行代码中应用的 `rotate()` 变换函数在第二行代码中作为矩阵函数返回。
- en: Tip
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**cssHooks**'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '**cssHooks**'
- en: 'It''s important to note that the use of `cssHooks` could help with browser
    compatibility testing on your code for all the various vendor prefixes. More about
    `cssHooks` can be found here: [http://api.jquery.com/jQuery.cssHooks/](http://api.jquery.com/jQuery.cssHooks/).'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，使用 `cssHooks` 可以帮助测试你的代码在各种供应商前缀下的浏览器兼容性。有关 `cssHooks` 的更多信息可以在这里找到：[http://api.jquery.com/jQuery.cssHooks/](http://api.jquery.com/jQuery.cssHooks/)。
- en: 'Also, a great jQuery plugin for `cssHooks` can be found here: [https://github.com/brandonaaron/jquery-cssHooks](https://github.com/brandonaaron/jquery-cssHooks).
    It has some CSS3 2D transforms behavior included. While it is beneficial from
    a learning perspective to create these effects manually, as we do throughout the
    remainder of this chapter, remember to use this file to save your time and effort
    in the future.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你可以在这里找到一个很棒的 jQuery 插件，用于 `cssHooks`：[https://github.com/brandonaaron/jquery-cssHooks](https://github.com/brandonaaron/jquery-cssHooks)。它包含了一些
    CSS3 2D 变换的行为。虽然从学习的角度来看，手动创建这些效果是有益的，正如我们在本章的其余部分中所做的那样，但请记住在将来使用这个文件来节省你的时间和精力。
- en: CSS3 3D transforms
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSS3 3D 变换
- en: All of the transform functions we have looked at so far are two-dimensional,
    operating on just the x and y axes. Transforms that operate in three dimensions,
    along the x, y, and z axes have also been proposed.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们迄今为止看到的所有变换函数都是二维的，仅在 x 和 y 轴上操作。还提出了在 x、y 和 z 轴上操作的三维变换。
- en: '3D equivalents of all of the transform functions exist and usually just take
    an extra parameter, which corresponds to the vector of each dimension, and the
    angle. For example, a 3D rotation could be added using this code:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的变换函数都存在三维等效版本，通常只需要一个额外的参数，对应于每个维度的向量和角度。例如，可以使用以下代码添加 3D 旋转：
- en: '```js'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '```js'
- en: 'transform: rotate3d(0, 1, 0, 30deg);'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 'transform: rotate3d(0, 1, 0, 30deg);'
- en: '```'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: As with 2D transforms, there is an all-encompassing matrix function that allows
    us to implement any of the other transforms and allows us to combine some of them
    together on a single element.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 与 2D 变换一样，有一个包罗万象的矩阵函数，可以让我们实现任何其他变换，并允许我们将其中一些变换组合到单个元素上。
- en: If, like me, you thought the 2D transform matrix, with its six parameters, was
    complex and perhaps a little hard to understand, wait till you start using the
    3D matrix, which has 16 parameters in total!
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果像我一样，你觉得 2D 变换矩阵，具有六个参数，复杂且可能有点难以理解，那等你开始使用总共有 16 个参数的 3D 矩阵时，你就会觉得更复杂了！
- en: At present, 3D transforms are supported in WebKit-based browsers and Firefox
    (with partial support for IE10), so we won't be looking at these in any further
    detail.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，3D 变换在基于 WebKit 的浏览器和 Firefox 中得到支持（对于 IE10 则有部分支持），所以我们不会对这些进行进一步的详细讨论。
- en: Note
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Browser support for CSS3 3D transforms can be found here: [http://caniuse.com/transforms3d](http://caniuse.com/transforms3d).'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 CSS3 3D 变换的浏览器支持可以在这里找到：[http://caniuse.com/transforms3d](http://caniuse.com/transforms3d)。
- en: Animated rotation with jQuery and CSS3
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 jQuery 和 CSS3 进行动画旋转
- en: In this example, we'll set up an animation that rotates an image using the `rotate()`
    transform function. Since this is supported by the majority of common browsers,
    it's actually really easy to implement, and can be a great effect that enhances
    the appearance and behavior of the page it is used on.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将设置一个动画，使用 `rotate()` 变换函数旋转图像。由于这个在大多数常见浏览器中都受支持，所以实际上实现起来非常容易，并且可以成为增强所使用页面的外观和行为的一个很好的效果。
- en: Time for action – animating an element's rotation
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 - 动画化元素的旋转
- en: We'll just be rotating a simple image in this example, so this is the only visible
    element we need in the `<body>` element of the page.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们只会旋转一个简单的图像，因此这是我们需要在页面的`<body>`元素中的唯一可见元素。
- en: 'Add the following `<img>` tag to a fresh copy of the template file:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下`<img>`标签添加到模板文件的新副本中：
- en: '```js'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```js'
- en: <img src="img/color-wheel.png" id="colorWheel">
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <img src="img/color-wheel.png" id="colorWheel">
- en: '```'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```'
- en: At this point we don't even need any styles as everything we need to set can
    be done in the JavaScript which we'll add next.
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这一点上，我们甚至不需要任何样式，因为我们需要设置的所有内容都可以在接下来要添加的 JavaScript 中完成。
- en: 'In the anonymous function at the bottom of the HTML page, add the following
    code:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 HTML 页面底部的匿名函数中，添加以下代码：
- en: '```js'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```js'
- en: var img = $("#colorWheel"),
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: var img = $("#colorWheel"),
- en: offset = img.offset(),
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: offset = img.offset(),
- en: origWidth = img.width(),
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: origWidth = img.width(),
- en: origHeight = img.height(),
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: origHeight = img.height(),
- en: rotateStrings = [
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: rotateStrings = [
- en: '"rotate(",'
  id: totrans-128
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"rotate(",'
- en: 0,
  id: totrans-129
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 0，
- en: '"deg)"'
  id: totrans-130
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"deg)"'
- en: '],'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '],'
- en: getVendor = function() {
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: getVendor = function() {
- en: var prefix = null,
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: var prefix = null，
- en: vendorStrings = {
  id: totrans-134
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: vendorStrings = {
- en: 'pure: "transform",'
  id: totrans-135
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'pure: "transform",'
- en: 'moz: "-moz-transform",'
  id: totrans-136
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'moz: "-moz-transform",'
- en: 'webkit: "-webkit-transform",'
  id: totrans-137
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'webkit: "-webkit-transform",'
- en: 'op: "-o-transform"'
  id: totrans-138
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'op: "-o-transform"'
- en: '};'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '};'
- en: for (props in vendorStrings) {
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: for (props in vendorStrings) {
- en: if(img.css(vendorStrings[props]) === "none") {
  id: totrans-141
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: if(img.css(vendorStrings[props]) === "none") {
- en: prefix = vendorStrings[props];
  id: totrans-142
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: prefix = vendorStrings[props];
- en: '}'
  id: totrans-143
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: if (prefix === null) {
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: if (prefix === null) {
- en: prefix = "filter";
  id: totrans-146
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: prefix = "filter";
- en: img.css({
  id: totrans-147
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: img.css({
- en: 'position: "absolute",'
  id: totrans-148
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'position: "absolute",'
- en: 'filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod=''auto expand'');"'
  id: totrans-149
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod=''auto expand'');"'
- en: '});'
  id: totrans-150
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '});'
- en: '}'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: return prefix;
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: return prefix;
- en: '},'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '},'
- en: vendor = getVendor();
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: vendor = getVendor();
- en: function doRotate() {
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: function doRotate() {
- en: rotateStrings[1]++;
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: rotateStrings[1]++;
- en: if (vendor === "filter") {
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: if (vendor === "filter") {
- en: var rad = rotateStrings[1] * (Math.PI * 2 / 360),
  id: totrans-158
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: var rad = rotateStrings[1] * (Math.PI * 2 / 360),
- en: cos = Math.cos(rad),
  id: totrans-159
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: cos = Math.cos(rad),
- en: sin = Math.sin(rad),
  id: totrans-160
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: sin = Math.sin(rad),
- en: driftX = (img.width() - origWidth) / 2,
  id: totrans-161
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: driftX = (img.width() - origWidth) / 2,
- en: driftY = (img.height() - origHeight) / 2,
  id: totrans-162
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: driftY = (img.height() - origHeight) / 2，
- en: el = img.get(0);
  id: totrans-163
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: el = img.get(0);
- en: img.css({
  id: totrans-164
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: img.css({
- en: 'left: offset.left - driftX,'
  id: totrans-165
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'left: offset.left - driftX,'
- en: 'top: offset.top - driftY'
  id: totrans-166
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'top: offset.top - driftY'
- en: '});'
  id: totrans-167
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '});'
- en: el.filters.item("DXImageTransform.Microsoft.Matrix").M11 = cos;
  id: totrans-168
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: el.filters.item("DXImageTransform.Microsoft.Matrix").M11 = cos;
- en: el.filters.item("DXImageTransform.Microsoft.Matrix").M12 = -sin;
  id: totrans-169
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: el.filters.item("DXImageTransform.Microsoft.Matrix").M12 = -sin;
- en: el.filters.item("DXImageTransform.Microsoft.Matrix").M21 = sin;
  id: totrans-170
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: el.filters.item("DXImageTransform.Microsoft.Matrix").M21 = sin;
- en: el.filters.item("DXImageTransform.Microsoft.Matrix").M22 = cos;
  id: totrans-171
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: el.filters.item("DXImageTransform.Microsoft.Matrix").M22 = cos;
- en: '} else {'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '} else {'
- en: img.css(vendor, rotateStrings.join(""));
  id: totrans-173
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: img.css(vendor, rotateStrings.join(""));
- en: '}'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: setInterval(function() { doRotate() }, 100);
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: setInterval(function() { doRotate() }, 100);
- en: '```'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```'
- en: Save the page as `rotate.html`. If we run the page in a browser now, we should
    see the color wheel slowly spinning around its center.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将页面保存为 `rotate.html`。如果我们现在在浏览器中运行页面，我们应该看到颜色轮围绕其中心缓慢旋转。
- en: '*What just happened?*'
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: The first thing we did was to cache a selector for the image as we'll be referring
    to it several times throughout the code. Note that, this is the only jQuery object
    we created in the whole script, which as we've discussed earlier in the book,
    is great for improving performance.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 我们做的第一件事是缓存图像的选择器，因为我们将在代码中多次引用它。请注意，这是我们在整个脚本中创建的唯一 jQuery 对象，正如我们在本书中之前讨论过的，这对于提高性能非常有帮助。
- en: We also set some other variables at this point including the offset of the image
    (its `absolute` position on the page), its original width and height, and an array
    containing different parts of the CSS property that we'll set in string and integer
    formats.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这一点上还设置了一些其他变量，包括图像的偏移（它在页面上的`absolute`位置），其原始宽度和高度，以及一个包含我们将以字符串和整数格式设置的
    CSS 属性的不同部分的数组。
- en: We also set an inline function (`getVendor()`) as the value of a variable which
    we can use to determine which vendor prefix to use. This function first sets some
    variables which will be used to store the determined vendor prefix and an object
    literal containing all of the different prefixes we want to test for. We also
    include the native `transform` property. Although this isn't yet supported by
    any browser, one day it might be, so this helps future-proof our code.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将内联函数(`getVendor()`)设置为变量的值，我们可以使用它来确定要使用的供应商前缀。这个函数首先设置一些变量，这些变量将用于存储确定的供应商前缀和一个包含我们要测试的所有不同前缀的对象文字。我们还包括原生的
    `transform` 属性。虽然目前还没有任何浏览器支持这一点，但总有一天可能会支持，所以这有助于未来保护我们的代码。
- en: The `doRotate()` function iterates over each property in the object literal
    using a `for...in` loop. Within the loop, we try to read the value of the `transform`
    property using each vendor prefix. An interesting fact is that, each browser will
    report `none` as the value of the prefix it supports, and a falsey value such
    as `false`, `null`, or `undefined` for the prefixes it doesn't support. We can
    use this to reliably determine which browser is in use and therefore which vendor
    prefix we need to use. The correct vendor prefix for whichever browser is in use
    is then saved to the `vendor` variable ready to be returned.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '`doRotate()`函数使用`for...in`循环迭代对象文字中的每个属性。在循环内部，我们尝试使用每个供应商前缀读取`transform`属性的值。一个有趣的事实是，每个浏览器都会报告其支持的前缀的值为`none`，对于它不支持的前缀，会报告一个假值，如`false`、`null`或`undefined`。我们可以使用这个来可靠地确定正在使用哪个浏览器，因此需要使用哪个供应商前缀。然后将正在使用的浏览器的正确供应商前缀保存到`vendor`变量中，以备返回。'
- en: Note
  id: totrans-184
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If none of these tests identify a vendor prefix, then it's likely that the browser
    in use is an older version of Internet Explorer. Again, keep in mind, jQuery 2.0
    does not support IE8 and below.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这些测试都没有识别出供应商前缀，那么可能正在使用的浏览器是较旧版本的Internet Explorer。再次注意，jQuery 2.0不支持IE8及以下版本。
- en: If the vendor variable is still set to null at this point, we set the variable
    to `filter`. In order to programmatically work with the value of the `filter`
    property in IE, `filter` must already be applied to the element, so we also set
    a filter on the element in this part of the code using jQuery's `css()` method
    ready to manipulate later in the code. We also set the `sizing mode` to `auto
    expand` in order to prevent the element from being clipped when the rotate is
    applied.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此时`vendor`变量仍设置为null，则将变量设置为`filter`。为了在IE中以编程方式处理`filter`属性的值，必须已将`filter`应用于元素，因此我们还在代码的此部分使用jQuery的`css()`方法为元素设置了一个过滤器，以备以后在代码中操纵。我们还将`sizing
    mode`设置为`auto expand`，以防止在应用旋转时裁剪元素。
- en: At the end of the function the `prefix` variable is returned containing a string
    of the vendor prefix for the browser currently in use. Directly after the function,
    we set a variable called `vendor` which will contain the value returned by the
    function for easy reference.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 函数结束时，返回包含当前使用的浏览器的供应商前缀的字符串的`prefix`变量。在函数之后，我们设置一个名为`vendor`的变量，该变量将包含函数返回的值，以便轻松引用。
- en: Next, we define a regular function `doRotate()`which will be used to perform
    the actual rotation. The first thing we do in this function is increment the second
    property of our `rotateStrings` array by one.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们定义一个常规函数`doRotate()`，该函数将用于执行实际的旋转。在此函数中，我们首先将`rotateStrings`数组的第二个属性递增1。
- en: 'We then check whether the `vendor` variable equals `filter`. If it does, we
    know that the browser in use is IE and can proceed to determine the values that
    the proprietary `filter` will need. IE allows rotation to be implemented in two
    different ways. We could use the `BasicImage` filter property to rotate the image,
    although that allows us only to set one of four rotation values: `0`, `1`, `2`
    or `3`, which correspond to 0, 90, 180, or 270 degrees. This is simply not flexible
    enough for our needs in this example.'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们检查`vendor`变量是否等于`filter`。如果是，则我们知道正在使用的浏览器是IE，可以继续确定专有的`filter`所需的值。IE允许以两种不同的方式实现旋转。我们可以使用`BasicImage`过滤器属性来旋转图像，尽管这样只能设置四个旋转值之一：`0`、`1`、`2`或`3`，这分别对应于0、90、180或270度。在本示例中，这根本不够灵活。
- en: So, instead we use the `Matrix` filter which gives us much more control over
    the degree of rotation. This is very similar to the CSS3 matrix transform, with
    six parameter values that are combined to generate the different transforms (a
    rotation in this case).
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我们使用`Matrix`过滤器，它让我们对旋转的程度有更多控制。这与CSS3矩阵变换非常相似，有六个参数值，这些值组合起来生成不同的变换（在这种情况下是旋转）。
- en: The parameters that we use in this example are `M11`, `M12`, `M21`, and `M22`
    which map roughly to the first four values in the CSS3 version, with the exception
    that the second and the third values are reversed in Microsoft's vendor prefix
    version.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本示例中使用的参数是`M11`、`M12`、`M21`和`M22`，它们大致映射到CSS3版本的前四个值，但在Microsoft的供应商前缀版本中，第二个值和第三个值被颠倒了。
- en: The values of each of these properties must be computed using the JavaScript
    trigonometry functions, `Math.cos` and `Math.sin`. We set some variables to calculate
    these values. The first variable, `rad`, converts the number of degrees of rotation
    into radians as these are the units required by the `Matrix` filter. The radians
    are calculated by multiplying the current degree of rotation (stored as the second
    item in our `rotateStrings` array) by PI times 2, divided by 360.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 这些属性的值必须使用 JavaScript 的三角函数`Math.cos`和`Math.sin`来计算。我们设置一些变量来计算这些值。第一个变量`rad`将旋转的度数转换为弧度，因为这是`Matrix`过滤器所需的单位。弧度通过将当前旋转度数（存储为`rotateStrings`数组中的第二项）乘以PI乘以2，然后除以360来计算。
- en: An unfortunate problem that occurs in IE when rotating elements is that, the
    rotated element drifts around the page as it is being rotated. This is caused
    by the size of the element's bounding box increasing as the element rotates. The
    rotation does occur around the center of the element, but because IE thinks the
    element has grown, the center of the rotated element is shifted on each rotation.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在 IE 中旋转元素时出现的一个不幸问题是，旋转的元素在旋转过程中在页面上漂移。这是由于元素的边界框随着元素旋转而增大导致的。旋转确实发生在元素的中心周围，但是因为
    IE 认为元素已经增大，所以旋转后的元素中心在每次旋转时都会发生位移。
- en: The `drifX` and `driftY` variables that we set, allow us to determine how far
    the element has shifted so that we can correct it. The shift is worked out by
    comparing the original width and height of the element prior to it being rotated,
    with the new width and height following the rotation.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 我们设置的`drifX`和`driftY`变量允许我们确定元素移动了多远，以便我们可以进行修正。通过比较元素在旋转之前的原始宽度和高度与旋转后的新宽度和高度，可以计算出移位。
- en: We also store the raw `img` element from the jQuery object using jQuery's `get()`
    method with an argument of `0` which returns the actual DOM node instead of a
    jQuery object. The `filter` must be applied to a proper DOM element.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还使用 jQuery 的`get()`方法将 jQuery 对象中的原始`img`元素存储为 DOM 节点，并将参数设置为`0`，这将返回实际的 DOM
    节点而不是 jQuery 对象。`filter`必须应用于正确的 DOM 元素。
- en: Once we've set our variables, we then correct the drift caused by the previous
    rotation using jQuery's `css()` method, and then insert our computed trigonometry
    values into the `Matrix` filter.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们设置了变量，我们就可以使用 jQuery 的`css()`方法来纠正由于上一次旋转引起的漂移，然后将计算得到的三角函数值插入`Matrix`过滤器中。
- en: Finally, if the `vendor` variable equals anything other than `filter`, we can
    simply set the relevant vendor prefix to the items in our `rotateStrings` array.
    We do this by calling JavaScript's `join()` method on the array. This is much
    more efficient than using concatenation to create the string needed for the CSS
    property and as this function will be executed repeatedly, we really need to make
    sure it is as efficient as possible.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果`vendor`变量不等于`filter`，我们可以简单地将相关的供应商前缀设置为我们的`rotateStrings`数组中的项目。我们通过调用
    JavaScript 的`join()`方法来执行此操作。这比使用连接来创建所需的 CSS 属性的字符串要高效得多，因为此函数将被重复执行，我们确实需要确保它尽可能高效。
- en: The last thing we do in our code is start the rotation animation by setting
    an interval that calls our `doRotate()` function every 100 milliseconds. We use
    an anonymous function as the first argument of the `setInterval()` function which
    avoids the need to attach the function to be executed be saved to the `window`
    object.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 我们代码中的最后一件事是通过设置每隔100毫秒调用我们的`doRotate()`函数的间隔来开始旋转动画。我们使用匿名函数作为`setInterval()`函数的第一个参数，这样可以避免将要执行的函数附加到`window`对象上。
- en: Problems with IE
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IE 的问题
- en: 'Besides the fact that IE makes us work twice as hard as any other browser to
    set the element''s rotation, it also presents us with another problem: it totally
    destroys the alpha layer of the PNG we are rotating. Suddenly our nice anti-aliased
    circle-edge becomes jagged and unsightly (view this example in IE to see the issue).'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 IE 让我们比其他任何浏览器都要努力地设置元素的旋转之外，它还给我们带来了另一个问题：它完全破坏了我们正在旋转的 PNG 的 alpha 层。突然间，我们漂亮的反锯齿圆边变得锯齿状且不美观（在
    IE 中查看此示例以查看问题）。
- en: The animation is also slightly jerky in IE, and both this and the inability
    to use PNGs with alpha layers in them could easily be a show-stopper for IE. If
    this was the case, we could easily disable the animation in IE by simply doing
    nothing when the `filter` property is returned by our `getVendor()` function.
    There are some things we could do however, to negate the problems in IE.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '-   IE下的动画也稍显卡顿，同时，使用带有alpha层的PNG可能会成为IE的一个硬伤。如果真是这样，我们可以通过`filter`属性是否返回来轻松地在IE中禁用动画，只需在我们的`getVendor()`函数中什么都不做即可。但是，我们仍然可以做一些事情来抵消IE中的问题。'
- en: For example, we could simply use a PNG with no transparency, which would preserve
    the circle's border in IE (in this example). Or, we could lay another image over
    the top of the image we are rotating to hide the jagged edges.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以简单地使用一个没有透明度的PNG，这将在IE中保留圆形的边框（在本例中）。或者，我们可以将另一张图像覆盖在我们正在旋转的图像的顶部，以隐藏锯齿状的边缘。
- en: Pop quiz – implementing CSS3 rotation
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 突击测验——实现CSS3旋转
- en: Q1\. In this example we used an array in conjunction with the JavaScript `join()`
    method to create the string. Why?
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: Q1\. 在这个例子中，我们使用了一个数组，结合JavaScript的`join()`方法生成了字符串。为什么？
- en: Because it's more fun.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因为这样更有趣。
- en: Because it makes our code look better.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因为它能让我们的代码看起来更好。
- en: Because performance-wise, it's much faster than string concatenation.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因为在性能上，它比字符串连接快得多。
- en: Because otherwise the element won't rotate correctly.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 否则该元素无法正确旋转。
- en: Q2\. To make the animation run correctly in Internet Explorer we had to constantly
    adjust the `top` and `left` style properties of the rotated element in order to
    maintain its position. Why does the drift in IE occur?
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: Q2\. 为了使动画在Internet Explorer中正确运行，我们不断地调整了旋转元素的`top`和`left`样式属性以维持其位置。为什么IE中会出现偏移？
- en: Because the size of the rotated element's bounding box is changed throughout
    the animation. As the rotated element is centered within its bounding box, its
    position changes as the box increases and decreases in size.
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因为旋转元素的边界框在整个动画过程中会发生变化。由于旋转元素位于其边界框的中心位置，因此随着框的增大和减小而其位置也会发生变化。
- en: Because the alpha layer of the PNG was removed.
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因为PNG的alpha层被移除了。
- en: Because the Matrix filter property was used.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因为使用了矩阵滤镜属性。
- en: Because of a bug in IE's implementation of the CSS3 rotate property.
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于IE的CSS3旋转属性存在错误。
- en: Have a go hero – extending CSS3 rotation
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尝试吧——扩展CSS3旋转
- en: The rotation effect can be used in many places, whether animated or not. But
    when animated, as in this example, it makes a very good background as part of
    a larger composition of elements. Used as the background of a semi-transparent
    logo for example, it creates a stunning effect.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 旋转效果可以应用在许多地方，无论是动画还是静态。但是在动画效果中，比如在本例中，作为较大元素组合的一部分的背景效果非常出色。例如，作为半透明logo的背景，它创造了令人惊叹的效果。
- en: Have a go at incorporating the effect into a page and using it as the background
    of another image. You'll also see first-hand how much this can improve the appearance
    of the effect in IE.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在页面中尝试将这种效果融入，并将其用作另一幅图像的背景。此外，您还会第一手看到这在IE中如何改善效果的外观。
- en: Animated skewing
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动态偏移
- en: Just like with the `rotate()` function, we can animate a `skew()` transform
    for creating attractive special effects. In this example, we'll use the `matrix()`
    function for all browsers, not just IE, in order to apply several transforms to
    an element at once.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 就像`rotate()`函数一样，我们可以使用`skew()`变换来创建吸引人的特效动画。在这个例子中，为了在所有浏览器中应用多个变换到一个元素上，我们将使用`matrix()`函数，而不仅仅是IE。
- en: 'The context of this example will be a cover-flow style widget that displays
    images one after the other by animating the images'' skew. The user will be able
    to cycle back and forth through the images using links:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 本例中的上下文将是以cover-flow风格的小部件，通过对图像的倾斜进行动画处理，依次显示图像。用户可以使用链接在图像之间前后循环滚动：
- en: '![Animated skewing](img/9642OS_09_07.jpg)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![动态偏移](img/9642OS_09_07.jpg)'
- en: The previous screenshot shows how the finished widget will appear.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 前一个截图显示了完成的小部件将会如何显示。
- en: Time for action – creating the underlying markup and basic styling
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实战时间——创建基础标记和基本样式
- en: First, we'll look at the HTML that we'll be using in the example and then we'll
    look at the initial styling added to the elements prior to being skewed.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将看一下我们在示例程序中将使用的HTML，然后我们将看一下在被扭曲之前为元素添加的初始样式。
- en: 'Add the following code to the `<body>` element of the template file:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到模板文件的`<body>`元素中：
- en: '```js'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```js'
- en: <div id="viewer">
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <div id="viewer">
- en: <div id="flow">
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <div id="flow">
- en: <img src="img/atreyu.jpg">
  id: totrans-228
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <img src="img/atreyu.jpg">
- en: <img src="img/beatles.jpg">
  id: totrans-229
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <img src="img/beatles.jpg">
- en: <img src="img/blink.jpg">
  id: totrans-230
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <img src="img/blink.jpg">
- en: <img src="img/cold.jpg">
  id: totrans-231
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <img src="img/cold.jpg">
- en: <img src="img/disturbed.jpg">
  id: totrans-232
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <img src="img/disturbed.jpg">
- en: <img src="img/floyd.jpg">
  id: totrans-233
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <img src="img/floyd.jpg">
- en: <img src="img/korn.jpg">
  id: totrans-234
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <img src="img/korn.jpg">
- en: <img src="img/prodigy.jpg">
  id: totrans-235
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <img src="img/prodigy.jpg">
- en: <img src="img/the-birthday-massacre.jpg">
  id: totrans-236
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <img src="img/the-birthday-massacre.jpg">
- en: <img src="img/xx.jpg">
  id: totrans-237
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <img src="img/xx.jpg">
- en: </div>
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: </div>
- en: <ul>
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <ul>
- en: <li id="left"><a href="#" title="Move Left">Left</a></li>
  id: totrans-240
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <li id="left"><a href="#" title="向左移动">左</a></li>
- en: <li id="right"><a href="#" title="Move Right">Right</a></li>
  id: totrans-241
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <li id="right"><a href="#" title="向右移动">右</a></li>
- en: </ul>
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: </ul>
- en: </div>
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: </div>
- en: '```'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```'
- en: 'Save the page as `skew.html`. Next, in a new file add the following code:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将页面保存为`skew.html`。接下来，在一个新文件中添加以下代码：
- en: '```js'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```js'
- en: '#viewer {'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '#viewer {'
- en: width:700px;
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: width:700px;
- en: height:220px;
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: height:220px;
- en: padding:100px 0 30px;
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: padding:100px 0 30px;
- en: margin:auto;
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: margin:auto;
- en: 'border:1px solid #000;'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'border:1px solid #000;'
- en: position:relative;
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: position:relative;
- en: '}'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '#flow:after {'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '#flow:after {'
- en: content:"";
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: content:"";
- en: display:block;
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: display:block;
- en: height:0;
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: height:0;
- en: clear:both;
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: clear:both;
- en: visibility:hidden;
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: visibility:hidden;
- en: '}'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '#flow img {'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '#flow img {'
- en: display:block;
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: display:block;
- en: margin-left:-165px;
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: margin-left:-165px;
- en: position:relative;
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: position:relative;
- en: top:-15px;
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: top:-15px;
- en: left:245px;
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: left:245px;
- en: float:left;
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: float:left;
- en: background-color:#fff;
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: background-color:#fff;
- en: '}'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '#viewer li {'
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '#viewer li {'
- en: list-style-type:none;
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: list-style-type:none;
- en: position:absolute;
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: position:absolute;
- en: bottom:10px;
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: bottom:10px;
- en: '}'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '#left { left:20px; }'
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '#left { left:20px; }'
- en: '#right { right:20px; }'
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '#right { right:20px; }'
- en: '```'
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```'
- en: Save this file in the `css` directory as `skew.css`.
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此文件保存在`css`目录中，命名为`skew.css`。
- en: '*What just happened?*'
  id: totrans-280
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚发生了什么?*'
- en: We're using a simple collection of elements for this example. We used an outer
    container, mostly for positioning purposes so that we can center the widget in
    the viewport and position other elements within it.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 对于此示例，我们使用了一组简单的元素。我们使用了一个外部容器，主要用于定位，以便我们可以在视口中心放置小部件并在其中定位其他元素。
- en: The `<img>` elements are what we will be applying the skew animations to, so
    these are isolated in their own container to make selecting them in the script
    later on easier. We also have a list element containing two links. These will
    be used to trigger the animations.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '`<img>` 元素是我们将应用倾斜动画的元素，因此将它们隔离在自己的容器中，以便以后在脚本中更轻松地选择它们。我们还有一个包含两个链接的列表元素。这些将用于触发动画。'
- en: The CSS is as light as the HTML. We simply position the container, the images,
    and the controls as required for the example. All of the fun CSS3 we'll set and
    manipulate using the script. You should note that this example isn't progressively
    enhanced as this would deviate too far from an already quite large example, as
    we'll see in a moment when we add the JavaScript.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: CSS与HTML一样简洁。我们只需根据示例要求定位容器、图像和控件即可。所有有趣的CSS3效果都将使用脚本进行设置和操作。您应该注意，此示例没有渐进增强，因为这会使其与已经相当大的示例偏离太远，如我们稍后将在添加JavaScript时看到的那样。
- en: Time for action – initializing the widget
  id: totrans-284
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 该行动开始——初始化小部件
- en: 'The first thing we need to do is set up the images ready to have their skew
    manipulated. We can also add the function that will return the correct vendor-specific
    prefix for the transform style property that we used in the last example. In the
    empty function at the bottom of the HTML page, add the following code:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的第一件事是设置好准备进行倾斜操作的图像。我们还可以添加一个函数，该函数将返回我们在上一个示例中使用的transform样式属性的正确供应商特定前缀。在HTML页面底部的空函数中，添加以下代码：
- en: '```js'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '```js'
- en: var viewer = $("#viewer"),
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: var viewer = $("#viewer"),
- en: flow = viewer.find("#flow"),
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: flow = viewer.find("#flow"),
- en: order = flow.children().length,
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: order = flow.children().length,
- en: oneRad = 1 * (Math.PI / 180),
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: oneRad = 1 * (Math.PI / 180),
- en: matrix = ["matrix(", 1, ",", 0, ",", 0, ",", 1, ",","0px,", "0px)"],
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: matrix = ["matrix(", 1, ",", 0, ",", 0, ",", 1, ",","0px,", "0px)"],
- en: msMatrix = "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand')",
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: msMatrix = "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand')",
- en: getVendor = function() {
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: getVendor = function() {
- en: var prefix = null,
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: var prefix = null,
- en: vendorStrings = {
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: vendorStrings = {
- en: 'pure: "transform",'
  id: totrans-296
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'pure: "transform",'
- en: 'moz: "-moz-transform",'
  id: totrans-297
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'moz: "-moz-transform",'
- en: 'webkit: "-webkit-transform",'
  id: totrans-298
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'webkit: "-webkit-transform",'
- en: 'op: "-o-transform"'
  id: totrans-299
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'op: "-o-transform"'
- en: '};'
  id: totrans-300
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '};'
- en: for (props in vendorStrings) {
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: for (props in vendorStrings) {
- en: if(flow.css(vendorStrings[props]) === "none") {
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: if(flow.css(vendorStrings[props]) === "none") {
- en: prefix = vendorStrings[props];
  id: totrans-303
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: prefix = vendorStrings[props];
- en: '}'
  id: totrans-304
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-305
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: if (prefix === null) {
  id: totrans-306
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: if (prefix === null) {
- en: prefix = "filter";
  id: totrans-307
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: prefix = "filter";
- en: '}'
  id: totrans-308
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: return prefix;
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回前缀;
- en: '},'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: vendor = getVendor(),
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: vendor = getVendor(),
- en: 'property = (vendor !== "filter") ? matrix.join("") : msMatrix;'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 'property = (vendor !== "filter") ? matrix.join("") : msMatrix;'
- en: flow.children().eq(0).addClass("flat").css(vendor, property).css("zIndex", order
    + 1);
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: flow.children().eq(0).addClass("flat").css(vendor, property).css("zIndex", order
    + 1);
- en: flow.children().not(":first").each(function(i) {
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: flow.children().not(":first").each(function(i) {
- en: el = flow.children().eq(i + 1);
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: el = flow.children().eq(i + 1);
- en: matrix[1] = 0.7;
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: matrix[1] = 0.7;
- en: matrix[3] = -30 * oneRad;
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: matrix[3] = -30 * oneRad;
- en: matrix[5] = -10 * oneRad;
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: matrix[5] = -10 * oneRad;
- en: matrix[7] = 0.7;
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: matrix[7] = 0.7;
- en: 'matrix[9] = (vendor === "-moz-transform") ? "90px," : "90,";'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 'matrix[9] = (vendor === "-moz-transform") ? "90px," : "90,";'
- en: 'matrix[10] = (vendor === "-moz-transform") ? "-30px)" : "-30)";'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 'matrix[10] = (vendor === "-moz-transform") ? "-30px)" : "-30)";'
- en: if (vendor !== "filter") {
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: if (vendor !== "filter") {
- en: el.addClass("skew-right").css(vendor, matrix.join("")).css("zIndex", order);
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: el.addClass("skew-right").css(vendor, matrix.join("")).css("zIndex", order);
- en: '} else {'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: '} else {'
- en: el.addClass("skew-right").css(vendor, msMatrix).css({
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: el.addClass("skew-right").css(vendor, msMatrix).css({
- en: 'zIndex: order,'
  id: totrans-326
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'zIndex: order,'
- en: 'top: -30,'
  id: totrans-327
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'top: -30,'
- en: 'left: 270,'
  id: totrans-328
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'left: 270,'
- en: 'width: 140,'
  id: totrans-329
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'width: 140,'
- en: 'height: 140,'
  id: totrans-330
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'height: 140,'
- en: 'marginLeft: -100'
  id: totrans-331
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'marginLeft: -100'
- en: '});'
  id: totrans-332
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '});'
- en: el.get(0).filters.item("DXImageTransform.Microsoft.Matrix").M11 = 1;
  id: totrans-333
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: el.get(0).filters.item("DXImageTransform.Microsoft.Matrix").M11 = 1;
- en: el.get(0).filters.item("DXImageTransform.Microsoft.Matrix").M12 = matrix[5];
  id: totrans-334
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: el.get(0).filters.item("DXImageTransform.Microsoft.Matrix").M12 = matrix[5];
- en: el.get(0).filters.item("DXImageTransform.Microsoft.Matrix").M21 = matrix[3];
  id: totrans-335
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: el.get(0).filters.item("DXImageTransform.Microsoft.Matrix").M21 = matrix[3];
- en: el.get(0).filters.item("DXImageTransform.Microsoft.Matrix").M22 = 1;
  id: totrans-336
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: el.get(0).filters.item("DXImageTransform.Microsoft.Matrix").M22 = 1;
- en: '}'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: order--;
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: order--;
- en: '});'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: matrix[3] = 0;
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: matrix[3] = 0;
- en: matrix[5] = 0;
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: matrix[5] = 0;
- en: '```'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: '*What just happened?*'
  id: totrans-343
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: In the first part of the script we initialize our variables. If you've wondered
    why we always initialize our variables at the top of functions, the reason is
    because of a phenomenon called Hoisting. This is where the variables initialized
    in functions get "hoisted" to the top of the function and can contain results
    that we aren't expecting.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 在脚本的第一部分，我们初始化了变量。如果你曾经想知道为什么我们总是在函数顶部初始化变量，原因是因为一个称为 Hoisting 的现象。这是指函数中初始化的变量被“提升”到函数顶部，并且可以包含我们没有预期到的结果。
- en: Note
  id: totrans-345
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can learn more about JavaScript Hoisting at: [http://thecomputersarewinning.com/post/a-dangerous-example-of-javascript-hoisting/](http://thecomputersarewinning.com/post/a-dangerous-example-of-javascript-hoisting/).'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下网址了解更多关于 JavaScript Hoisting 的信息：[http://thecomputersarewinning.com/post/a-dangerous-example-of-javascript-hoisting/](http://thecomputersarewinning.com/post/a-dangerous-example-of-javascript-hoisting/)。
- en: The first variable we create is a cached selector for the outer container of
    our widget. This is the one and only jQuery object we create in this entire example.
    Some of the code we'll add is quite intensive in places, so keeping the number
    of jQuery objects we create to a bare minimum is essential for performance reasons.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建的第一个变量是我们小部件外部容器的缓存选择器。这是我们在整个示例中创建的唯一一个 jQuery 对象。我们将添加的一些代码在某些地方非常耗费资源，因此为了性能原因，保持我们创建的
    jQuery 对象数量尽可能少是至关重要的。
- en: Next we use the original jQuery object and the `find()` jQuery method to cache
    a selector for the `flow` element (the direct parent of the image elements that
    will be skewed) as we'll need to access or manipulate this element several times
    as well.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们使用原始的 jQuery 对象和 `find()` jQuery 方法来缓存 `flow` 元素的选择器（图像元素的直接父元素，将被扭曲），因为我们需要多次访问或操作此元素。
- en: Then we store the number of image elements in the widget using the `length`
    property of a jQuery object containing the child elements of the flow element.
    We also store the result of converting one degree to one radian so that we can
    easily convert from one unit to another throughout the script without repeatedly
    performing the same calculation. Both the CSS3 transform `matrix` and IE's `matrix`
    filter can accept radians so that makes them a convenient unit to work with.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用包含 `flow` 元素子元素的 jQuery 对象的 `length` 属性存储小部件中图像元素的数量。我们还存储了将一度转换为一弧度的结果，以便我们可以在整个脚本中轻松地从一种单位转换到另一种单位，而无需重复执行相同的计算。CSS3
    变换 `matrix` 和 IE 的 `matrix` 滤镜都可以接受弧度作为单位，因此这使它们成为方便的工作单位。
- en: We then create our matrix array and Microsoft's `matrix` property as a string.
    The array includes all of the individual properties as array items, including
    the required commas as strings. The reason we include the commas in our array
    is that we can call the `join()` JavaScript function on the array later without
    specifying a separator and without having to worry about removing the unnecessary
    commas it would insert incorrectly.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们创建了我们的矩阵数组和Microsoft的`matrix`属性作为字符串。该数组包括所有单独的属性作为数组项，包括必需的逗号作为字符串。我们在数组中包含逗号的原因是，我们可以稍后调用数组上的`join()`
    JavaScript函数，而不指定分隔符，也不必担心它会错误地插入不必要的逗号。
- en: Next we add the `getVendor()` function that we used in the previous example.
    This is a convenient way to ensure that correct prefix is used when we apply the
    skew styling. We won't cover this function in detail as we have already looked
    at it earlier in the chapter (in the *Time for action – animating an element's
    rotation* section). Again, we call the function straight away after defining it
    and store the result in a variable for later use.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们添加了在上一个示例中使用的`getVendor()`函数。这是一种方便的方式，可以确保在应用倾斜样式时使用正确的前缀。我们不会详细介绍此函数，因为我们在本章的早些时候已经看过它了（在*动手操作——动画化元素旋转*部分）。再次强调，我们在定义函数后立即调用该函数，并将结果存储在变量中以供以后使用。
- en: The last variable we create will hold a string containing either the CSS3 matrix
    function with all the required parameters, or it will contain IE's `matrix` property
    in its most basic form with only the `sizingMethod` parameter defined. If you
    remember from the previous example, IE can only manipulate the matrix property
    after it has been initially set.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建的最后一个变量将保存一个字符串，其中包含CSS3矩阵函数和所有所需参数，或者它将包含IE的`matrix`属性在其最基本形式下只定义了`sizingMethod`参数。如果您还记得前面的示例，IE只能在初始设置后才能操作矩阵属性。
- en: At this point we can move on to prepare the first image. We select the first
    image using jQuery's `eq()` method, passing in `0` as the index of the element
    we are interested in. We set a class name of `flat` on the first image so that
    we can easily select it later, and also give it a higher `z-index` than the other
    images so that it is visible in its entirety. Next we loop through the remaining
    images using jQuery's `each()` method.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 在此时，我们可以继续准备第一张图片。我们使用jQuery的`eq()`方法选择第一张图片，将`0`作为我们感兴趣的元素的索引传递进去。我们在第一张图片上设置一个类名为`flat`，这样我们就可以很容易地后续选择它，并且还将其`z-index`设置得比其他图片高，以便完全可见。接下来，我们使用jQuery的`each()`方法循环遍历剩余的图片。
- en: The anonymous function we pass to the method accepts the parameter `i` which
    is the index of the current iteration. This in turn will allow us to select each
    element one after the other on each iteration of the loop. The first thing we
    do in the function is cache a reference to the current `<img>` element using the
    index as an argument for the `eq()` method. We add 1 to the index value to avoid
    selecting the first image.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 我们传递给方法的匿名函数接受参数`i`，这是当前迭代的索引。这反过来将允许我们在循环的每次迭代中依次选择每个元素。函数中我们做的第一件事是使用索引作为`eq()`方法的参数缓存对当前`<img>`元素的引用。我们将索引值加1以避免选择第一张图片。
- en: In the next block of code we set some of the items in our `matrix` array. We
    set the scale parameters (items 1 and 7 in the array) to 0.7 so that the skewed
    images are reduced in size slightly and we set the skew parameters (items 3 and
    5 in the array) to the radian equivalent of -30 and -10 degrees respectively.
    This will skew the images slightly up and to the right.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一段代码中，我们设置了`matrix`数组中的一些项目。我们将比例参数（数组中的第1和第7项）设置为0.7，以便略微缩小倾斜的图像，将倾斜参数（数组中的第3和第5项）设置为相应的-30和-10度的弧度。这将略微向上和向右倾斜图像。
- en: We also set the translate parameters (items 9 and 10 in the array) to position
    the skewed elements correctly so that they stack up horizontally. If the browser
    in use is Firefox we have to use `px` in the value for the translate properties,
    but with other browsers the values should be unitless. We use a ternary condition
    to check the `vendor` variable (this will contain the vendor prefix for the current
    browser) and set the value accordingly.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还设置了平移参数（数组中的第9和第10项），以便正确定位倾斜的元素，使它们水平堆叠。如果使用的浏览器是Firefox，我们必须在平移属性的值中使用`px`，但是对于其他浏览器，值应该是无单位的。我们使用三元条件来检查`vendor`变量（这将包含当前浏览器的供应商前缀）并相应地设置值。
- en: Once we've set our array items we then check whether the browser in use is not
    IE and provided it isn't, we apply the skew to the current element. We also set
    the `z-index` of the current element using the `order` variable which is set to
    the length of the number of images. Doing this makes the current element the top-most
    image.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 设置完数组项目后，我们检查当前浏览器是否不是IE，并且只要不是，就将倾斜应用于当前元素。我们还使用设置为图像数量的长度的`order`变量设置当前元素的`z-index`。这样做可以使当前元素成为顶部图像。
- en: If the browser in use is IE, we apply the Microsoft `matrix` and set some different
    CSS on the images. The translate parameters don't work in IE, so we position the
    images using jQuery instead. Skewing the elements in IE also causes the elements
    to increase in size, so we have to drastically reduce their dimensions which we
    also do with jQuery.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 如果正在使用的浏览器是IE，我们将应用微软`matrix`并在图像上设置一些不同的CSS。在IE中，translate参数不起作用，因此我们使用jQuery来定位图像。在IE中将元素倾斜也会导致元素增大，因此我们必须大幅减少它们的尺寸，这也是我们用jQuery做的。
- en: On each iteration of the loop we reduce the value of this variable by one. The
    `z-index` of each element will therefore get progressively lower as we process
    each image.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 在循环的每次迭代中，我们将该变量的值减一。因此，每个元素的`z-index`会随着我们处理每个图像而逐渐降低。
- en: Once we have set the required CSS styles, we then skew the elements by manipulating
    the proprietary Microsoft `matrix` filters. Remember, these properties can only
    be manipulated on actual DOM elements, not jQuery objects, so we retrieve the
    raw element using jQuery's `get()` method with the index as 0.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 设置所需的CSS样式后，我们通过操作专有的微软`matrix`滤镜来倾斜元素。请记住，这些属性只能在实际的DOM元素上操作，而不能在jQuery对象上操作，因此我们使用jQuery的`get()`方法通过索引为0检索原始元素。
- en: After the `each()` loop has finished, we reset the third and fifth parameters
    in the `matrix` array. This is because we will use the array again several times,
    so each time we should use the default values for the parameters.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: '`each()`循环完成后，我们重新设置了`matrix`数组中的第三和第五个参数。这是因为我们将多次使用该数组，因此每次都应使用参数的默认值。'
- en: Time for action – animating an element's skew
  id: totrans-362
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 - 动画元素的倾斜
- en: 'Now we''ll add a function that will skew the elements to the left. The function
    will have to be applied to two elements: to the flat or non-skewed element, as
    well as to the one before it (to the right in this case). The function to animate
    the skew from right to left is as follows and should be placed below the `matrix[5]
    = 0;` line:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将添加一个函数，用于将元素向左倾斜。该函数必须应用于两个元素：于平坦或非倾斜元素，以及在其之前的一个元素（在本例中为右侧）。用于从右向左动画倾斜的函数如下，并应放置在`matrix[5]
    = 0;`行下方：
- en: '```js'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: function skewRTL() {
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: function skewRTL() {
- en: var flat = flow.find(".flat").css("zIndex", order + 1),
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: var flat = flow.find(".flat").css("zIndex", order + 1),
- en: preFlat = flat.next(),
  id: totrans-367
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: preFlat = flat.next(),
- en: flatMatrix = matrix.slice(0),
  id: totrans-368
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: flatMatrix = matrix.slice(0),
- en: preMatrix = matrix.slice(0),
  id: totrans-369
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: preMatrix = matrix.slice(0),
- en: flatDims = 200,
  id: totrans-370
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: flatDims = 200,
- en: preDims = 170,
  id: totrans-371
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: preDims = 170,
- en: skew = function() {
  id: totrans-372
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 倾斜 = function() {
- en: if (preFlat.length) {
  id: totrans-373
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果(preFlat.length) {
- en: if (flatMatrix[3] <= 30 * oneRad && flatMatrix[5] <= 10 * oneRad) {
  id: totrans-374
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: if (flatMatrix[3] <= 30 * oneRad && flatMatrix[5] <= 10 * oneRad) {
- en: var flatTranslateX = parseInt(flatMatrix[9].split("p")[0], 10),
  id: totrans-375
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: var flatTranslateX = parseInt(flatMatrix[9].split("p")[0], 10),
- en: flatTranslateY = parseInt(flatMatrix[10].split("p")[0], 10),
  id: totrans-376
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: flatTranslateY = parseInt(flatMatrix[10].split("p")[0], 10),
- en: preTranslateX = parseInt(preMatrix[9].split("p")[0], 10),
  id: totrans-377
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: preTranslateX = parseInt(preMatrix[9].split("p")[0], 10),
- en: preTranslateY = parseInt(preMatrix[10].split("p")[0], 10);
  id: totrans-378
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: preTranslateY = parseInt(preMatrix[10].split("p")[0], 10);
- en: flatMatrix[1] = flatMatrix[1] - 0.001;
  id: totrans-379
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: flatMatrix[1] = flatMatrix[1] - 0.001;
- en: flatMatrix[3] = flatMatrix[3] + oneRad;
  id: totrans-380
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: flatMatrix[3] = flatMatrix[3] + oneRad;
- en: flatMatrix[5] = flatMatrix[5] + (oneRad / 3);
  id: totrans-381
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: flatMatrix[5] = flatMatrix[5] + (oneRad / 3);
- en: flatMatrix[7] = flatMatrix[7] - 0.001;
  id: totrans-382
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: flatMatrix[7] = flatMatrix[7] - 0.001;
- en: preMatrix[1] = preMatrix[1] + 0.01;
  id: totrans-383
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: preMatrix[1] = preMatrix[1] + 0.01;
- en: preMatrix[3] = preMatrix[3] + oneRad;
  id: totrans-384
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: preMatrix[3] = preMatrix[3] + oneRad;
- en: preMatrix[5] = preMatrix[5] + (oneRad / 3);
  id: totrans-385
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: preMatrix[5] = preMatrix[5] + (oneRad / 3);
- en: preMatrix[7] = preMatrix[7] + 0.01;
  id: totrans-386
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: preMatrix[7] = preMatrix[7] + 0.01;
- en: 'flatMatrix[9] = (vendor === "-moz-transform") ? flatTranslateX - 6 + "px,"
    : flatTranslateX - 6 + ",";'
  id: totrans-387
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'flatMatrix[9] = (vendor === "-moz-transform") ? flatTranslateX - 6 + "px,"
    : flatTranslateX - 6 + ",";'
- en: 'preMatrix[9] = (vendor === "-moz-transform") ? preTranslateX - 3 + "px," :
    preTranslateX - 3 + ",";'
  id: totrans-388
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'preMatrix[9] = (vendor === "-moz-transform") ? preTranslateX - 3 + "px," :
    preTranslateX - 3 + ",";'
- en: 'preMatrix[10] = (vendor === "-moz-transform") ? preTranslateY + 1 + "px)" :
    preTranslateY + 1 + ")";'
  id: totrans-389
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'preMatrix[10] = (vendor === "-moz-transform") ? preTranslateY + 1 + "px)" :
    preTranslateY + 1 + ")";'
- en: if (vendor !== "filter") {
  id: totrans-390
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: if (vendor !== "filter") {
- en: flat.css(vendor, flatMatrix.join(""));
  id: totrans-391
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: flat.css(vendor, flatMatrix.join(""));
- en: preFlat.css(vendor, preMatrix.join(""));
  id: totrans-392
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: preFlat.css(vendor, preMatrix.join(""));
- en: '} else {'
  id: totrans-393
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '} else {'
- en: flat.get(0).filters.item("DXImageTransform.Microsoft.Matrix").M12 = flatMatrix[5];
  id: totrans-394
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: flat.get(0).filters.item("DXImageTransform.Microsoft.Matrix").M12 = flatMatrix[5];
- en: flat.get(0).filters.item("DXImageTransform.Microsoft.Matrix").M21 = flatMatrix[3];
  id: totrans-395
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: flat.get(0).filters.item("DXImageTransform.Microsoft.Matrix").M21 = flatMatrix[3];
- en: preFlat.get(0).filters.item("DXImageTransform.Microsoft.Matrix").M12 = preMatrix[5];
  id: totrans-396
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: preFlat.get(0).filters.item("DXImageTransform.Microsoft.Matrix").M12 = preMatrix[5];
- en: preFlat.get(0).filters.item("DXImageTransform.Microsoft.Matrix").M21 = preMatrix[3];
  id: totrans-397
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: preFlat.get(0).filters.item("DXImageTransform.Microsoft.Matrix").M21 = preMatrix[3];
- en: flatDims = flatDims - 2;
  id: totrans-398
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: flatDims = flatDims - 2;
- en: preDims = preDims + 0.5;
  id: totrans-399
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: preDims = preDims + 0.5;
- en: flat.css({
  id: totrans-400
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: flat.css({
- en: 'width: flatDims,'
  id: totrans-401
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'width: flatDims,'
- en: 'height: flatDims'
  id: totrans-402
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'height: flatDims'
- en: '});'
  id: totrans-403
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '});'
- en: preFlat.css({
  id: totrans-404
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: preFlat.css({
- en: 'width: preDims,'
  id: totrans-405
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'width: preDims,'
- en: 'height: preDims'
  id: totrans-406
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'height: preDims'
- en: '});'
  id: totrans-407
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '});'
- en: '}'
  id: totrans-408
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '} else {'
  id: totrans-409
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '} else {'
- en: clearInterval(flatInterval);
  id: totrans-410
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: clearInterval(flatInterval);
- en: if (vendor !== "filter") {
  id: totrans-411
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: if (vendor !== "filter") {
- en: preMatrix[3] = 0;
  id: totrans-412
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: preMatrix[3] = 0;
- en: preMatrix[5] = 0;
  id: totrans-413
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: preMatrix[5] = 0;
- en: preFlat.css(vendor, preMatrix.join(""));
  id: totrans-414
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: preFlat.css(vendor, preMatrix.join(""));
- en: '} else {'
  id: totrans-415
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '} else {'
- en: flat.css({
  id: totrans-416
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: flat.css({
- en: 'top: -30,'
  id: totrans-417
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'top: -30,'
- en: 'left: 260'
  id: totrans-418
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'left: 260'
- en: '});'
  id: totrans-419
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '});'
- en: '}'
  id: totrans-420
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: flat.prev().css("zIndex", "");
  id: totrans-421
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: flat.prev().css("zIndex", "");
- en: flat.removeClass("flat").css("zIndex", "");
  id: totrans-422
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: flat.removeClass("flat").css("zIndex", "");
- en: preFlat.addClass("flat");
  id: totrans-423
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: preFlat.addClass("flat");
- en: '}'
  id: totrans-424
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '} else {'
  id: totrans-425
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '} else {'
- en: clearInterval(flatInterval);
  id: totrans-426
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: clearInterval(flatInterval);
- en: flat.css("zIndex", order + 1);
  id: totrans-427
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: flat.css("zIndex", order + 1);
- en: '}'
  id: totrans-428
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '};'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: preMatrix[3] = -30 * oneRad;
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: preMatrix[3] = -30 * oneRad;
- en: preMatrix[5] = -10 * oneRad;
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: preMatrix[5] = -10 * oneRad;
- en: if(!flatInterval) {
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: if(!flatInterval) {
- en: var flatInterval = setInterval(function() { skew() }, 1);
  id: totrans-433
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: var flatInterval = setInterval(function() { skew() }, 1);
- en: '}'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '};'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '```'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: '*What just happened?*'
  id: totrans-437
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: The first thing we did in our function is we set the variables used by the function.
    We cached a reference to the current element that has the `flat` class and also
    set this element's `z-index` to be one higher than any of the other images to
    ensure it is always on top of the other images.
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在函数中做的第一件事是设置函数使用的变量。我们缓存了具有`flat`类的当前元素的引用，并将该元素的`z-index`设置为比任何其他图像高一级，以确保它始终位于其他图像的顶部。
- en: We also cached a reference to the next image after the `flat` image. In this
    function, this will be the image to the right of the un-skewed image. We then
    made two copies of the original `matrix` array, one for the `flat` element and
    one for the `preFlat` element. To copy an array, all we did is use JavaScript's
    `slice()` method with an index of zero.
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还缓存了`flat`图像后面的下一个图像的引用。在这个函数中，这将是未变形图像右侧的图像。然后，我们复制了原始的`matrix`数组的两个副本，一个是`flat`元素的副本，一个是`preFlat`元素的副本。要复制一个数组，我们只需使用JavaScript的`slice()`方法并指定索引为零。
- en: The next two variables we created are the initial dimensions of the `flat` and
    `preFlat` images. These variables are only used by IE, but because of hoisting,
    we need to define them here and not in an IE-specific code block later in the
    function.
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建的下两个变量是`flat`和`preFlat`图像的初始尺寸。这些变量只在IE中使用，但由于变量提升，我们需要在这里定义它们，而不是在函数的后面的IE特定代码块中定义它们。
- en: Next we defined an inline function called `skew()` which we'll repeatedly call
    in order to produce the actual animation. Within this function we first checked
    that there is an element after the `flat` element by checking that the `preFlat`
    object has a length. If the length is equal to zero (that is if it does not have
    length), we simply clear any intervals that may exist, and make sure that the
    `flat` element is at the top of the z-index stack. If the `preFlat` object does
    have a length however, we then check that the current `skewX` property is less
    than or equal to the radian equivalent of 30 degrees, and that the `skewY` property
    is less than or equal to the radian equivalent of 10 degrees (we can work this
    out by multiplying 30 or 10 respectively by our stored figure for 1 radian). The
    current skew properties for the `flat` image are currently stored in items the
    third and fifth items in the `flatMatrix` array.
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们定义了一个名为`skew()`的内联函数，我们将重复调用该函数以产生实际的动画。在这个函数中，我们首先检查`flat`元素后面是否有元素，方法是通过检查`preFlat`对象是否有长度。如果长度等于零（即长度为零），我们简单地清除可能存在的任何间隔，并确保`flat`元素位于z-index堆栈的顶部。然而，如果`preFlat`对象确实有长度，则我们检查当前的`skewX`属性是否小于或等于30度的弧度等价值，并且`skewY`属性是否小于或等于10度的弧度等价值（我们可以通过将30或10分别乘以我们存储的1弧度的数字来计算得到）。当前的`flat`图像的倾斜属性当前存储在`flatMatrix`数组的第三个和第五个项目中。
- en: Provided both conditions are true, we can proceed with the animation. Part of
    the animation involves translating the `flat` and `preFlat` images so that along
    with skewing, the images move as well (we'll also resize them, but we'll come
    to that in a moment).
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 如果两个条件都为真，则可以继续执行动画。动画的一部分涉及翻译`flat`和`preFlat`图像，以便随着倾斜，图像也随之移动（我们还会调整它们的大小，但稍后再谈）。
- en: In order to translate the images correctly we need to get their current translation,
    which we do first of all by defining four new variables and populating them with
    the current translation values from the two matrix arrays. These figures need
    to be numerical so we use JavaScript's `parseInt` and `split()` functions to break
    the strings apart and convert the digits to integers.
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 为了正确地翻译图像，我们需要获取它们当前的翻译，我们首先定义四个新变量，并用来自两个矩阵数组的当前翻译值填充它们。这些数字需要是数字的，所以我们使用JavaScript的`parseInt`和`split()`函数来拆分字符串并将数字转换为整数。
- en: Next we needed to update our two matrix arrays with the new values. The right-to-left
    function will incrementally update the values in the `flatMatrix` and `preMatrix`
    arrays, and then apply the arrays to the element. So the animation will consist
    of rapid updates to each transform parameter.
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要用新值更新我们的两个矩阵数组。从右到左的函数将逐步更新`flatMatrix`和`preMatrix`数组中的值，然后将数组应用到元素上。因此，动画将由对每个变换参数的快速更新组成。
- en: The `flat` image also needs to be skewed as it is translated, so we increase
    the `skewX` and `skewY` parameters by one radian and a third of one radian respectively.
    Remember, in order to skew an element to the left and up directions, the skew
    parameters should be positive so we increase the values of items 3 and 5 of the
    `flatMatrix` array on each pass of the function.
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: '`flat`图像在翻译时也需要被倾斜，所以我们分别将`skewX`和`skewY`参数增加一个弧度和三分之一的一个弧度。记住，为了使元素向左和向上倾斜，倾斜参数应为正值，所以我们在每次函数通过时增加`flatMatrix`数组的项3和5的值。'
- en: The `flat` image starts off larger than the skewed images so we need to reduce
    array items 1 and 7 slightly, each time the function runs. The `skew()` function
    will be called 30 times; so to reduce the scale of the flat image so that it finishes
    the correct size, we reduce the scale parameters by `0.001` on each pass of the
    function.
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: '`flat`图像比倾斜的图像开始时要大，所以每次函数运行时我们需要稍微减少数组项1和7。`skew()`函数将被调用30次；所以为了减小`flat`图像的比例，使其最终达到正确的大小，我们在每次函数通过时将比例参数减小`0.001`。'
- en: The values we want are 30 degrees of the skew on the x axis, and 10 degrees
    of the skew on the y axis. 10 is one third of 30 which is why we increase the
    `skewY` parameter by one radian divided by three.
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要的值是x轴上的30度倾斜和y轴上的10度倾斜。10是30的三分之一，这就是为什么我们通过一个弧度除以三来增加`skewY`参数。
- en: I mentioned earlier that in Firefox the translate parameters need a unit, such
    as `px`, but other browsers are unitless for these values. We use a JavaScript
    ternary conditional to check the `vendor` string and if it equals the Firefox
    vendor prefix (`-moz-transform`), we add `px` to the value. The flat image only
    needs to be translated on the x axis and it needs to move left by 6 pixels, so
    we update array item 9 with a value that is six less than its current value.
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 我之前提到在Firefox中，翻译参数需要单位，如`px`，但其他浏览器的这些值是无单位的。我们使用JavaScript的三元条件运算符来检查`vendor`字符串，如果它等于Firefox的供应商前缀（`-moz-transform`），我们将`px`添加到值中。平坦图像只需要在x轴上翻译，并且需要向左移动6个像素，所以我们更新数组项9的值，该值比其当前值小6。
- en: We also have to update the `preFlat` image so that it goes from being skewed
    to the right to being flat. We also have to increase the size of the `preFlat`
    image as they start out smaller. Similarly, we updated the relevant array items
    in the `preMatrix` so that over the course of 30 iterations of the `skew()` function
    they end up at the right values. The `preFlat` image also needs to be translated,
    but this time along both the `x` and y axes.
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还必须更新`preFlat`图像，使其从向右倾斜变为平坦。我们还必须增加`preFlat`图像的大小，因为它们起初较小。同样，我们更新了`preMatrix`中的相关数组项，以便在`skew()`函数的30次迭代过程中它们最终达到正确的值。`preFlat`图像还需要被平移，但这次沿着`x`和`y`轴。
- en: Next we checked the vendor string once more and as long as it isn't `filter`
    (IE), we apply the transform to the `flat` and `preFlat` image by joining the
    array. If it is IE, we have to do a little more work to apply the transformation.
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们再次检查vendor string，只要不是`filter`（IE），我们通过连接数组将变换应用到`flat`和`preFlat`图像。如果是IE，我们需要做更多的工作来应用变换。
- en: We applied each of the relevant `Matrix` properties, `M12` and `M21,` on the
    `flat` and `preFlat` images. We used jQuery's `get()` method with an index of
    `0` to obtain the actual DOM element once more. We also reduced the size of the
    `flat` image, and increased the size of the `preFlat` image using our `flatDims`
    and `preDims` variables that we initialized earlier and then we used jQuery's
    `css()` method to apply the new sizes.
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`flat`和`preFlat`图像上应用了每个相关的`Matrix`属性，`M12`和`M21`。我们再次使用了jQuery的`get()`方法，并使用`0`索引获取实际的DOM元素。我们还使用我们之前初始化的`flatDims`和`preDims`变量，缩小了`flat`图像的大小，同时增加了`preFlat`图像的大小，然后我们使用jQuery的`css()`方法应用了新的尺寸。
- en: IE's `Matrix` property helpfully ignores the scaling parameters when the `sizingMethod`
    is set to `auto` `expand`, but this property must be set to prevent the images
    from being clipped. This is why we fallback to jQuery's `css()` method.
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: IE的`Matrix`属性在`sizingMethod`设置为`auto expand`时会忽略缩放参数，但必须设置该属性以防止图像被裁剪。这就是为什么我们要返回到jQuery的`css()`方法。
- en: Unusually, we were able to set fractional pixel sizes when using IE, which is
    fortunate as it allows us to set the size of the images in the correct order for
    them to end up at the right size when the animation ends.
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 令人意外的是，我们在IE中能够设置分数像素大小，这很幸运，因为它允许我们按正确的顺序设置图像的大小，使它们在动画结束时以正确的尺寸结束。
- en: We then come to the last part of the `skewRTL()` function before we start our
    animation. This block of code is executed once at the end of the animation when
    the third and fifth items in our `flatMatrix` array are greater than 30 and 10
    respectively.
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们来到`skewRTL()`函数的最后一部分，在我们的`flatMatrix`数组中的第三和第五项大于30和10时执行此代码块。
- en: First we cleared the intervals so that the skew is not animated further. We
    then check the vendor string once more, and as long as it isn't `filter`, we reset
    the skew on the flat element to `0` (on both the x and y axes).
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 首先我们清除间隔，以便扭曲不再进行动画。然后我们再次检查vendor string，只要不是`filter`，我们将`flat`元素的扭曲重置为`0`（在x轴和y轴上都是）。
- en: This is needed because for some reason, the `preFlat` image doesn't quite go
    back to exact zero. I assume this is because JavaScript's `Math` functions do
    not allow the number to have enough decimal places to be entirely accurate. The
    image is only slightly off however, so this sudden switch to `0` at the end of
    the animation is not noticeable.
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为由于某种原因，`preFlat`图像并没有完全回到零。我认为这是因为JavaScript的`Math`函数不允许数字有足够的小数位数来完全精确。然而，图像只是稍微偏离，因此在动画结束时对`0`的突然切换并不会被注意到。
- en: Unfortunately, translating an element at the same time as skewing it does not
    seem possible in IE. What happens is that IE applies the new skew, but fails to
    apply the new position until the skew animation has finished, so the element is
    skewed and then moved in two separate steps. It doesn't look too great, so instead,
    after the skew animation is complete, we simply reposition the flat element without
    animating it.
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，在IE中似乎不可能同时进行元素的平移和扭曲。IE会应用新的扭曲，但直到扭曲动画结束时才应用新的位置，因此元素会以两个单独的步骤进行扭曲然后移动。这看起来不太好看，因此在扭曲动画完成后，我们简单地重新定位`flat`元素而不进行动画。
- en: After correcting the skew or the position, we remove the `z-index` from the
    flat element (which has now been skewed to the left) and remove the class name
    `flat` from it, and then add the class name `flat` to the `preFlat` element.
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 在修正了扭曲或位置后，我们将`flat`元素的`z-index`删除（现在它已经向左扭曲），并将其class name从`flat`删除，并给`preFlat`元素添加class
    name `flat`。
- en: At this point the flat image has been skewed to the left, resized and translated,
    and the `preFlat` image has been skewed back to zero, resized and translated.
    Both the `flat` and `preFlat` images are transformed together at the same time,
    which is why the function is as large as it is.
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，`flat`图像已经被扭曲到左侧，调整了大小和平移，`preFlat`图像已经扭曲回零，调整了大小和平移。`flat`和`preFlat`图像同时进行了变换，这就是为什么函数会如此庞大。
- en: Right at the end of the `skewRTL()` function, defined after the `skew()` function
    that will be repeatedly called by the `setInterval()` function, we initialize
    the third and fifth values in the `preMatrix` array so that the array will contain
    the correct skew for the initial state of the element. When we create the array
    by copying the original `matrix` array used when the widget is initialized, these
    items will both be set to `0`.
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 在`skewRTL()`函数的最后，该函数在`skew()`函数之后定义，`skew()`函数将由`setInterval()`函数重复调用，我们初始化了`preMatrix`数组中的第三个和第五个值，以便数组包含元素的初始状态的正确倾斜。当我们通过复制初始化小部件时使用的原始`matrix`数组创建数组时，这些项目都将设置为`0`。
- en: Before calling the `setInterval()` function on the two images to be skewed,
    we first check that an interval doesn't already exist. This stops the widget from
    breaking if the link is repeatedly clicked by the visitor. The element will be
    skewed more than once if the link is clicked several times in rapid succession,
    but the widget will continue to function and the page will not throw errors.
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 在对需要倾斜的两个图像调用`setInterval()`函数之前，我们首先检查是否已存在间隔。这样可以防止访问者重复点击链接导致小部件崩溃。如果访问者连续点击几次链接，该元素将会倾斜多次，但是小部件将继续正常工作，页面不会抛出错误。
- en: Time for action – skewing an element from left to right
  id: totrans-462
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 - 将元素从左边倾斜到右边
- en: 'We can now add the function that skews an element from left to flat and from
    flat to right. This function is very similar to the function we just looked at.
    The changes in the code have been highlighted in the following code:'
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以添加一个函数，用于将元素从左倾斜到平的状态，再从平到右倾斜。这个函数与我们刚刚看到的函数非常相似。代码中的变化已在以下代码中突出显示：
- en: '```js'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: '```js'
- en: function skewLTR() {
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: function skewLTR() {
- en: var flat = flow.find(".flat"),
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: var flat = flow.find(".flat"),
- en: preFlat = flat.prev(),
  id: totrans-467
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: preFlat = flat.prev(),
- en: flatMatrix = matrix.slice(0),
  id: totrans-468
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: flatMatrix = matrix.slice(0),
- en: preMatrix = matrix.slice(0),
  id: totrans-469
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: preMatrix = matrix.slice(0),
- en: flatDims = 200,
  id: totrans-470
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: flatDims = 200,
- en: preDims = 170,
  id: totrans-471
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: preDims = 170,
- en: skew = function() {
  id: totrans-472
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 倾斜 = function() {
- en: if (preFlat.length) {
  id: totrans-473
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: if (preFlat.length) {
- en: if (flatMatrix[3] >= -30 * oneRad && flatMatrix[5] >=-10 * oneRad) {
  id: totrans-474
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: if (flatMatrix[3] >= -30 * oneRad && flatMatrix[5] >=-10 * oneRad) {
- en: var preTranslateX = parseInt(preMatrix[9].split("p")[0], 10),
  id: totrans-475
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: var preTranslateX = parseInt(preMatrix[9].split("p")[0], 10),
- en: preTranslateY = parseInt(preMatrix[10].split("p")[0], 10);
  id: totrans-476
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: preTranslateY = parseInt(preMatrix[10].split("p")[0], 10);
- en: flatMatrix[1] = flatMatrix[1] - 0.001;
  id: totrans-477
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: flatMatrix[1] = flatMatrix[1] - 0.001;
- en: flatMatrix[3] = flatMatrix[3] - oneRad;
  id: totrans-478
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: flatMatrix[3] = flatMatrix[3] - oneRad;
- en: flatMatrix[5] = flatMatrix[5] - (oneRad / 3);
  id: totrans-479
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: flatMatrix[5] = flatMatrix[5] - (oneRad / 3);
- en: flatMatrix[7] = flatMatrix[7] - 0.001;
  id: totrans-480
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: flatMatrix[7] = flatMatrix[7] - 0.001;
- en: preMatrix[1] = preMatrix[1] + 0.01;
  id: totrans-481
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: preMatrix[1] = preMatrix[1] + 0.01;
- en: preMatrix[3] = preMatrix[3] - oneRad;
  id: totrans-482
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: preMatrix[3] = preMatrix[3] - oneRad;
- en: preMatrix[5] = preMatrix[5] - (oneRad / 3);
  id: totrans-483
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: preMatrix[5] = preMatrix[5] - (oneRad / 3);
- en: preMatrix[7] = preMatrix[7] + 0.01;
  id: totrans-484
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: preMatrix[7] = preMatrix[7] + 0.01;
- en: 'preMatrix[9] = (vendor === "-moz-transform") ? preTranslateX + 3 + "px," :
    preTranslateX + 3 + ",";'
  id: totrans-485
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'preMatrix[9] = (vendor === "-moz-transform") ? preTranslateX + 3 + "px," :
    preTranslateX + 3 + ",";'
- en: 'preMatrix[10] = (vendor === "-moz-transform") ? preTranslateY + 1 + "px)" :
    preTranslateY + 1 + ")";'
  id: totrans-486
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'preMatrix[10] = (vendor === "-moz-transform") ? preTranslateY + 1 + "px)" :
    preTranslateY + 1 + ")";'
- en: if (vendor !== "filter") {
  id: totrans-487
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: if (vendor !== "filter") {
- en: flat.css(vendor, flatMatrix.join(""));
  id: totrans-488
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: flat.css(vendor, flatMatrix.join(""));
- en: preFlat.css(vendor, preMatrix.join(""));
  id: totrans-489
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: preFlat.css(vendor, preMatrix.join(""));
- en: '} else {'
  id: totrans-490
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '} else {'
- en: flat.get(0).filters.item("DXImageTransform.Microsoft.Matrix").M12 = flatMatrix[5];
  id: totrans-491
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: flat.get(0).filters.item("DXImageTransform.Microsoft.Matrix").M12 = flatMatrix[5];
- en: flat.get(0).filters.item("DXImageTransform.Microsoft.Matrix").M21 = flatMatrix[3];
  id: totrans-492
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: flat.get(0).filters.item("DXImageTransform.Microsoft.Matrix").M21 = flatMatrix[3];
- en: preFlat.get(0).filters.item("DXImageTransform.Microsoft.Matrix").M12 = preMatrix[5];
  id: totrans-493
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: preFlat.get(0).filters.item("DXImageTransform.Microsoft.Matrix").M12 = preMatrix[5];
- en: preFlat.get(0).filters.item("DXImageTransform.Microsoft.Matrix").M21 = preMatrix[3];
  id: totrans-494
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: preFlat.get(0).filters.item("DXImageTransform.Microsoft.Matrix").M21 = preMatrix[3];
- en: flatDims = flatDims - 1.5;
  id: totrans-495
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: flatDims = flatDims - 1.5;
- en: preDims = preDims + 1.5;
  id: totrans-496
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: preDims = preDims + 1.5;
- en: flat.css({
  id: totrans-497
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: flat.css({
- en: 'width: flatDims,'
  id: totrans-498
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'width: flatDims,'
- en: 'height: flatDims'
  id: totrans-499
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'height: flatDims'
- en: '});'
  id: totrans-500
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '});'
- en: preFlat.css({
  id: totrans-501
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: preFlat.css({
- en: 'width: preDims,'
  id: totrans-502
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'width: preDims,'
- en: 'height: preDims'
  id: totrans-503
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'height: preDims'
- en: '});'
  id: totrans-504
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '});'
- en: '}'
  id: totrans-505
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '} else {'
  id: totrans-506
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '} else {'
- en: clearInterval(flatInterval);
  id: totrans-507
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: clearInterval(flatInterval);
- en: clearInterval(preInterval);
  id: totrans-508
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: clearInterval(preInterval);
- en: if (vendor !== "filter") {
  id: totrans-509
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: if (vendor !== "filter") {
- en: preMatrix[3] = 0;
  id: totrans-510
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: preMatrix[3] = 0;
- en: preMatrix[5] = 0;
  id: totrans-511
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: preMatrix[5] = 0;
- en: preFlat.css(vendor, preMatrix.join(""));
  id: totrans-512
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: preFlat.css(vendor, preMatrix.join(""));
- en: '}'
  id: totrans-513
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: flat.removeClass("flat").css("zIndex", parseInt(flat.next().css("zIndex")) +
    1);
  id: totrans-514
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: flat.removeClass("flat").css("zIndex", parseInt(flat.next().css("zIndex")) +
    1);
- en: preFlat.addClass("flat").css("zIndex", order + 1);
  id: totrans-515
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: preFlat.addClass("flat").css("zIndex", order + 1);
- en: '}'
  id: totrans-516
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '} else {'
  id: totrans-517
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '} else {'
- en: clearInterval(flatInterval);
  id: totrans-518
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: clearInterval(flatInterval);
- en: clearInterval(preInterval);
  id: totrans-519
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: clearInterval(preInterval);
- en: flat.css("zIndex", order + 1);
  id: totrans-520
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: flat.css("zIndex", order + 1);
- en: '}'
  id: totrans-521
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '};'
  id: totrans-522
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '};'
- en: order = flow.children().length;
  id: totrans-523
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: order = flow.children().length;
- en: preMatrix[3] = 30 * oneRad;
  id: totrans-524
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: preMatrix[3] = 30 * oneRad;
- en: preMatrix[5] = 10 * oneRad;
  id: totrans-525
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: preMatrix[5] = 10 * oneRad;
- en: 'preMatrix[9] = (vendor === "-moz-transform") ? "-90px," : "-90,";'
  id: totrans-526
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'preMatrix[9] = (vendor === "-moz-transform") ? "-90px," : "-90,";'
- en: preMatrix[10] = (vendor === "-moz-transform") ? "-30px," :"-30,";
  id: totrans-527
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: preMatrix[10] = (vendor === "-moz-transform") ? "-30px," :"-30,";
- en: if(!flatInterval) {
  id: totrans-528
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: if(!flatInterval) {
- en: var flatInterval = setInterval(function() { skew() }, 1),
  id: totrans-529
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: var flatInterval = setInterval(function() { skew() }, 1),
- en: preInterval = setInterval(function() { skew() }, 1);
  id: totrans-530
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: preInterval = setInterval(function() { skew() }, 1);
- en: '}'
  id: totrans-531
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '};'
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '```'
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: '*What just happened?*'
  id: totrans-534
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: We won't cover the whole function in its entirety as it's very similar to what
    we have discussed before, but let's take a moment to look at what differs in this
    function. First, instead of selecting the next image to the right of the `flat`
    element, we select the one to the left of it using jQuery's `prev()` method instead
    of `next()`.
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会完全覆盖整个函数，因为它与我们之前讨论的非常相似，但让我们花点时间看看这个函数有什么不同。首先，我们不是选择`flat`元素右侧的下一个图像，而是使用jQuery的`prev()`方法选择它左侧的图像，而不是`next()`。
- en: When updating the skew on our `flat` and `preFlat` elements, we are skewing
    the element the opposite way. To skew an element to the right, we need to use
    a minus figure so instead of going from `0` to `30` or from `-30` to `0`, we are
    going the opposite way, from `30` to `0` or `0` to `-30`, so we subtract the radian
    equivalent of 1 degree instead of adding it.
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: 当更新我们的`flat`和`preFlat`元素的斜率时，我们将元素斜向相反方向。要将元素斜向右移动，我们需要使用负数，因此我们不是从`0`到`30`或从`-30`到`0`，而是反向操作，从`30`到`0`或`0`到`-30`，因此我们减去1度的弧度值而不是加上它。
- en: We are also translating to the right instead of the left, so instead of removing
    3 pixels each time to move the image left we add 3 pixels to move it to the right.
    We also provide different values for the dimensions variables used by IE.
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将向右平移而不是向左，因此我们不是每次从图像左侧删除3个像素以向左移动图像，而是添加3个像素以将其向右移动。我们还为IE使用的维度变量提供不同的值。
- en: This time when we set the `z-index` of the element that was previously flat,
    we add `1` to the z-index of the next element (to the right) to make sure it is
    higher than this element. However, we can't use our length variable (`order`)
    from earlier or it will be at the same `z-index` as the `flat` element, but will
    appear above it as it comes after the element in the DOM.
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: 这次当我们设置以前是平的元素的`z-index`时，我们将`1`添加到下一个元素（向右）的`z-index`中，以确保它比此元素更高。但是，我们不能使用之前的长度变量（`order`），否则它将与`flat`元素具有相同的`z-index`，但会出现在其上面，因为它在DOM中在元素之后。
- en: The final difference is that when we initialize the third and fifth items in
    our array, we are specifying the current skew to the left and not the right, so
    these items are set to the radian equivalent of 30 and 10 degrees instead of -30
    and -10.
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个区别是，当我们初始化数组中的第三个和第五个项目时，我们指定了向左而不是向右的当前斜率，因此这些项目设置为相当于30和10度的弧度，而不是-30和-10。
- en: Time for action – wiring up the controls
  id: totrans-540
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——连接控件
- en: 'All that''s left to do is add the event handlers to the left and right links
    at the bottom of the widget so that the different images can be viewed. After
    the two skew functions, add the following code:'
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: 剩下的事情就是在小部件底部的左右链接上添加事件处理程序，以便查看不同的图像。在两个斜率函数之后，添加以下代码：
- en: '```js'
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: '```js'
- en: viewer.find("#left a").click(function(e) {
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: viewer.find("#left a").click(function(e) {
- en: e.preventDefault();
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: e.preventDefault();
- en: skewRTL();
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: skewRTL();
- en: '});'
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: viewer.find("#right a").click(function(e) {
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: viewer.find("#right a").click(function(e) {
- en: e.preventDefault();
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: e.preventDefault();
- en: skewLTR();
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: skewLTR();
- en: '});'
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: '```'
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: '*What just happened?*'
  id: totrans-552
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: All we do is add a click handler to each link which prevents the link from being
    followed with `preventDefault` and then call the relevant skew function. The example
    should now be fully working in all common browsers, although the effect is handled
    rather badly by IE in general with slower, more sluggish animations, less accurate
    skewing, jittery, and uncontrollable movements.
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所做的一切就是为每个链接添加一个点击处理程序，该处理程序使用`preventDefault`阻止链接被跟随，然后调用相关的斜率函数。现在，该示例应在所有常见浏览器中完全工作，尽管IE一般处理效果较差，动画速度较慢，斜率不太准确，抖动且难以控制。
- en: One point to note is that there is a difference between the full and minified
    versions of the jQuery source file which causes older versions of IE to throw
    errors when the minified version is used, but not when the un-minified version
    is used.
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的一点是，当使用 jQuery 源文件的完整版本和压缩版本时，存在差异，这会导致旧版本的 IE 在使用压缩版本时抛出错误，但在使用未压缩版本时不会抛出错误。
- en: Have a go hero – extending matrix animation
  id: totrans-555
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 有一个尝试的英雄 – 扩展矩阵动画
- en: It would definitely be beneficial to build this example so that it incorporates
    progressive enhancement. Work on an alternative, accessible layout that works
    with the scripting disabled, and then convert the widget into the format used
    in this example.
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: 建议构建这个例子，以便它包含渐进增强。开发一个替代的、可访问的布局，在禁用脚本时工作，并将小部件转换为本示例中使用的格式。
- en: You could also work on a more suitable fallback for IE, in which the example
    uses a simpler image viewer, perhaps one of those looked at earlier in the book.
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以为 IE 开发一个更合适的备用方案，在这个例子中使用一个更简单的图像查看器，也许是在书中早些时候看过的那些之一。
- en: Pop quiz – using the matrix
  id: totrans-558
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 快速测验 – 使用矩阵
- en: Q1\. The CSS3 matrix transform function is useful in which situation?
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: Q1\. CSS3 矩阵变换函数在哪种情况下有用？
- en: When we want to work in radians instead of degrees.
  id: totrans-560
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们想要使用弧度而不是度数时。
- en: When we need to animate a transform function.
  id: totrans-561
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们需要动画化一个变换函数时。
- en: When we want to apply more than one transform function to an element.
  id: totrans-562
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们想要将多个变换函数应用到一个元素时。
- en: When coding for Internet Explorer.
  id: totrans-563
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写 Internet Explorer 代码时。
- en: Q2\. In the transform function `matrix(a, b, c, d, e, f)`, which parameters
    refer to the element's translation?
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: Q2\. 在变换函数 `matrix(a, b, c, d, e, f)` 中，哪些参数指的是元素的平移？
- en: '`a` and `b`'
  id: totrans-565
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`a` 和 `b`'
- en: '`a` and `d`'
  id: totrans-566
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`a` 和 `d`'
- en: '`b` and `c`'
  id: totrans-567
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`b` 和 `c`'
- en: '`e` and `f`'
  id: totrans-568
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`e` 和 `f`'
- en: Summary
  id: totrans-569
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this chapter we looked at CSS3 transform style properties in detail, covering
    some of the different transform functions, including:'
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们详细讨论了 CSS3 变换样式属性，涵盖了一些不同的变换函数，包括：
- en: '`matrix`'
  id: totrans-571
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`matrix`'
- en: '`rotate`'
  id: totrans-572
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rotate`'
- en: '`scale`'
  id: totrans-573
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scale`'
- en: '`scaleX`'
  id: totrans-574
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scaleX`'
- en: '`scaleY`'
  id: totrans-575
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scaleY`'
- en: '`skew`'
  id: totrans-576
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`skew`'
- en: '`skewX`'
  id: totrans-577
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`skewX`'
- en: '`skewY`'
  id: totrans-578
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`skewY`'
- en: '`translate`'
  id: totrans-579
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`translate`'
- en: '`translateX`'
  id: totrans-580
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`translateX`'
- en: '`translateY`'
  id: totrans-581
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`translateY`'
- en: 'We learned a lot about the CSS3 `matrix` property in this chapter, as well
    as how to make use of it with jQuery. Specifically, we learned the following:'
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本章中学到了很多关于 CSS3 的 `matrix` 属性，以及如何与 jQuery 结合使用它。具体来说，我们学到了以下内容：
- en: We first saw the different values that these functions take and the effects
    that they have on elements they are applied to. We also saw that in order to animate
    these styles, we can use simple native JavaScript intervals or timeouts to continuously
    adjust the function parameters, or apply them in a rapid sequence. We learned
    that, in most cases these transform functions can only be applied to elements
    individually, we also saw that only the last transform function that is defined
    is applied to the elements. The matrix function however allows us to apply several
    of the functions to a single element.
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先看到了这些函数接受的不同值，以及它们对应用于的元素产生的效果。我们还看到，为了对这些样式进行动画处理，我们可以使用简单的本地 JavaScript
    定时器或超时来连续调整函数参数，或者以快速的顺序应用它们。我们了解到，在大多数情况下，这些变换函数只能单独应用到元素上，我们还看到，只有最后一个定义的变换函数才会应用到元素上。然而，矩阵函数允许我们将多个函数应用到单个元素上。
- en: We learned that we can't rotate and skew a single element, but we can rotate,
    scale, and translate an element, or skew, scale, and translate it if we wish.
    Browser support for CSS3 transforms is very good, with only very minor differences
    between most browsers.
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学到了我们不能旋转和倾斜单个元素，但是我们可以旋转、缩放和平移一个元素，或者如果愿意，倾斜、缩放和平移它。CSS3 变换的浏览器支持非常好，在大多数浏览器之间只有非常小的差异。
- en: We observed that although we can't use the transform functions in jQuery's `animate()`
    method, we can easily create our own animations manually, and we can use them
    with other methods, such as the `css()` method. Don't forget to use `cssHooks`
    (see the previous tip) to achieve this kind of functionality too.
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们不能在 jQuery 的 `animate()` 方法中使用转换函数，但我们可以轻松地手动创建自己的动画，并且可以将它们与其他方法一起使用，比如
    `css()` 方法。不要忘记使用 `cssHooks`（参见前面的提示）来实现这种功能。
- en: In the next and final chapter of the book, we'll take a look at a new HTML5
    element that allows us pixel-perfect control over an area on the page—the `<canvas>`
    element—and how it can be used to create interactive animations.
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的下一章，也是最后一章中，我们将介绍一个新的 HTML5 元素，它允许我们对页面上的区域进行像素级的控制—`<canvas>` 元素—以及它如何用于创建交互式动画。
