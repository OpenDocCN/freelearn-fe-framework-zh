- en: Themes - Centralize the Look and Feel of Your App
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here''s what you''ll learn in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the palette
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Comparing light and dark themes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizing typography
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nesting themes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding component theme settings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Material-UI applications all share a common look and feel—to an extent. This
    doesn't mean that your banking application is going to look and feel the same
    as my music library application just because we're both using the same library.
    The common aspect is that both apps follow Material Design principles. I'm not
    going to go into depth on Material Design here, because there are ample resources
    out there that do a much better job than I could ever hope to do. Instead, I want
    to focus on the fact that Material-UI applications can be themed with a high degree
    of flexibility, and without the need to sacrifice the principles of Material Design.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the palette
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first place most people start when building a new Material-UI theme is
    with the color palette. Color palettes can be very complex with a lot of moving
    parts: Material-UI themes are no exception, but Material-UI hides a lot of the
    complexity. Your focus is on the color intentions of the theme while Material-UI
    uses these color intentions to compute other colors where necessary. Taken straight
    from the Material-UI theme documentation, the intentions are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Primary: Used to represent primary interface elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Secondary: Used to represent secondary interface elements'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Error: Used to represent interface elements that the user should be made aware
    of'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s build a new theme that sets color intentions using the built-in color
    objects of Material-UI. To help tweak your theme, this example uses Hue and Shade
    Storybook controls:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/527ddd1a-9f26-42d7-a4f2-2226b9c58e96.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The three color intentions are represented as tabs across the top. The PRIMARY
    intention is currently selected and it has a Hue selector and a Shade number range.
    Each intention has the same controls. The Hue selector is populated with the same
    colors available to `import` from Material-UI:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/22decf7e-fc90-4fa4-9367-4675f02a155e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here''s the source that uses these Storybook controls to build a new theme
    and render some `Button` and `Typography` components:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what you''ll see when you first load the screen with the DEFAULT theme
    values selected:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d38b9f3c-a82a-4669-90c0-ecaf6c41e45f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s change the DEFAULT theme color intentions, starting with PRIMARY:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d1698a92-ca19-4128-ab0c-335b3b26cadd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The Primary Hue is now Cyan with a shade value of 300\. Next, we''ll change
    the SECONDARY intention:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/135e854c-93e2-497d-9679-e3f28192c68d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The Secondary Hue is now Teal with a shade value of 100\. Lastly, we''ll change
    the ERROR intention:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bc682ae0-3090-4698-ac5d-1f48392f256c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The Error Hue is still Red for this theme, but slightly lighter with a shade
    value of 400\. Here''s what the end result looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4673d3a3-7f56-4016-a4bb-50daec3fd194.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Material-UI has core `hues` that can be imported and can help you with building
    your theme:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You don''t have to `import` every hue—this is done here because of the Storybook
    controls that dynamically change the color palette values. Each color value that
    is imported is an object indexed by the shade value, such as 500, for example.
    The values are colors expressed in hex, such as `#fffffff`, for example. When
    using a color expressed in hex, you have to pass it to the `main` property when
    creating your `theme`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The properties `primaryHue`, `primaryShade`, and so on, are the values set by
    the Storybook controls. The `MuiThemeProvider` component is how the `theme` is
    actually applied to your Material-UI components. It doesn't have to be the root
    component of your app, but any Material-UI components that depend on theme styles
    (`Button`, `Typography`, and so on) need to be children of this component.
  prefs: []
  type: TYPE_NORMAL
- en: The `createMuiTheme()` function is called every time the `main` application
    component in this example is rendered. In practice, this shouldn't happen. Instead,
    the theme is created once and passed to the `MuiThemeProvider` component. The
    reason this is happening here, is so that the theme updates when you change the
    color values using the Storybook controls.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Material-UI `theme` documentation: [https://material-ui.com/customization/themes/](https://material-ui.com/customization/themes/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Material-UI `color` documentation: [https://material-ui.com/style/color/](https://material-ui.com/style/color/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Comparing light and dark themes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The color palette of a theme takes a `type` property value that can be either
    light or dark. By default, themes are light. Changing the theme to dark does not
    change the other palette values of your theme (`primary`, `secondary`, `error`).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s create a dark theme and a light theme. Both themes will use the same
    color values for the intentions (`primary`, `secondary`, `error`). The example
    will use a Storybook control to change themes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/da95173a-cf63-4d63-b7a1-74319fa35dc7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here''s the source that uses this value to choose between a `light` and `dark`
    theme and apply it to the Material-UI components:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the dialog that you''ll see when the screen first loads:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/65f4ed52-17e7-4f33-968f-6ca6778dee06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here''s the same dialog with the theme type changed to dark:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a4efe99f-c01c-4aaf-b9e3-823cc701091c.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When the `palette.type` theme value changes from `light` to `dark`, the following
    palette values change:'
  prefs: []
  type: TYPE_NORMAL
- en: '`palette.text`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`palette.divider`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`palette.background`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`palette.action`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s take a look at the two themes used in this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: These two themes are the same except for the `palette.type` value. Whenever
    you change this value, new color values are computed for the theme. For example,
    the new text color that you see in the dialog isn't static—it's a color that's
    computed by Material-UI in order to provide the optimal contrast between the text
    color and the background color.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Material-UI `theme` documentation: [https://material-ui.com/customization/themes/](https://material-ui.com/customization/themes/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizing typography
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The preferred `typeface` for Material-UI themes is **Roboto**. This is by no
    means the only option, and, indeed, you can install new typefaces and use them
    in your custom Material-UI theme.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s install a couple of new `typeface` packages so that they''re available
    for use in your application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, you can add a Storybook control for the example that allows you to switch
    themes, and, as a result, switch fonts:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/98f2724a-ca11-414e-bf93-b878734c1cdd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here''s what the `Dialog` component looks like when you first load the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/638d424a-aeeb-4af3-bb77-39a3c36a000a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here''s what the `Dialog` component looks like when you change the font type
    to Exo:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1b814caa-f092-4af1-83b3-7d440db6970b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Lastly, here''s what the `Dialog` component looks like when you change the
    font type to Ubuntu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ab64a07f-f22d-4fe6-af18-6b182e9fce45.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The two typefaces that are used in this example are imported:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In practice, you'll only `import` the font that your active theme uses, to reduce
    the size of your build. The `roboto` font that's used all throughout the examples
    in this book is imported by the Storybook `index` file, since this font is the
    default theme font and used in every example in this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that you''ve imported the typefaces, you''ve made the font family names
    available to the theme:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Note that, in the `exo` and `ubuntu` themes, `roboto` is still used as part
    of the font family, since it's the preferred font for Material-UI; it makes a
    good fallback.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Material-UI `theme` documentation: [https://material-ui.com/customization/themes/](https://material-ui.com/customization/themes/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nesting themes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By nesting `MuiThemeProvider` components, you can compose multiple themes that
    handle different aspects of a theme into a single theme that's suitable for use
    in your application.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s say that you have a theme that sets the color palette and another theme
    that changes the border radius. You can merge both themes by nesting the `MuiThemeProvider`
    components. Here''s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what you''ll see when the screen loads:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6354e717-fc52-4dc7-ad31-480485efcfb4.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `Blue` theme applies the color palette `theme` settings, while the `Rounded`
    theme changes the `borderRadius` settings. Both themes are applied to the `Dialog`
    component—you can see the blue primary button, and the round corners are even
    more round. Let''s take a closer look at the `Rounded` theme:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Instead of being an object, `Rounded` is a function that returns a `theme` object.
    When you pass a function to the `theme` property of `MuiThemeProvider`, a `theme`
    argument is passed. This is the outer `theme`, or, in this example, the `Blue`
    theme. The `theme` is extended by applying the `spread` operator to the `theme`
    argument, and then passing additional `theme` values to `createMuiTheme()`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Material-UI `theme` documentation: [https://material-ui.com/customization/themes/](https://material-ui.com/customization/themes/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding component theme settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Themes** can override styles that are specific to component types, such as
    buttons or drawers. This is useful when you need to apply a style change to every
    instance of the component in the app. In other words, the style is part of the
    overall theme, but it applies to just one type of component instead of the color
    palette for example, which applies to almost every Material-UI component.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s say that you want the title and the actions of `Dialog` components centered.
    Since you want the same style applied for every `Dialog` component in your app,
    the `theme` is the right place to override this setting. Here''s how to do it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what the custom dialog looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9d3790cc-f409-4c12-ad45-ddb69c43067b.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s take a closer look at the `overrides` section of the theme:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The `MuiDialogTitle` key corresponds to the `DialogTitle` component, while the
    `MuiDialogActions` key corresponds to the `DialogActions` component. The `root`
    key used in both objects is the name of the rule. In more complex components,
    you can use these keys to target specific parts of the component. The API documentation
    for each component spells out each of these style rule names that you can target.
    Then, it's a matter of overriding or providing new styles. The `textAlign` property
    isn't set by default on the `DialogTitle` component, so you're adding it. The
    `justifyContent` is set to the right of the `DialogActions` component, which means
    that you're overriding an existing value.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Theme override documentation: [https://material-ui.com/customization/overrides/](https://material-ui.com/customization/overrides/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
