["```js\n? Which *type* of application would you like to create? Monolithic application (recommended for simple projects)\n? What is the base name of your application? jhreact\n? What is your default Java package name? com.jhipsterbook.demo\n? Do you want to use the JHipster Registry to configure, monitor and scale your application? No\n? Which *type* of authentication would you like to use? JWT authentication (stateless, with a token)\n? Which *type* of database would you like to use? SQL (H2, MySQL, MariaDB, PostgreSQL, Oracle, MSSQL)\n? Which *production* database would you like to use? MySQL\n? Which *development* database would you like to use? H2 with disk-based persistence\n? Do you want to use the Spring cache abstraction? Yes, with the Ehcache implementation (local cache, for a single node)\n? Do you want to use Hibernate 2nd level cache? Yes\n? Would you like to use Maven or Gradle for building the backend? Maven\n? Which other technologies would you like to use? \n? Which *Framework* would you like to use for the client? [BETA] React\n? Would you like to enable *SASS* support using the LibSass stylesheet preprocessor? No\n? Would you like to enable internationalization support? Yes\n? Please choose the native language of the application English\n? Please choose additional languages to install Chinese (Simplified)\n? Besides JUnit and Karma, which testing frameworks would you like to use? \n? Would you like to install other generators from the JHipster Marketplace? No\n```", "```js\n2018-03-04 16:37:48.096 INFO 4730 --- [ restartedMain] com.jhipsterbook.demo.JhreactApp : \n----------------------------------------------------------\n Application 'jhreact' is running! Access URLs:\n Local: http://localhost:8080\n External: http://192.168.2.7:8080\n Profile(s): [swagger, dev]\n----------------------------------------------------------\n```", "```js\nconst element = <div><strong>Hello there</strong></div>\n```", "```js\nexport class Home extends React.Component<IHomeProp, IHomeState> {\n  ...\n}\n\nconst mapStateToProps = storeState => ({\n  account: storeState.authentication.account,\n  isAuthenticated: storeState.authentication.isAuthenticated\n});\nconst mapDispatchToProps = { getSession };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\n```", "```js\nconst Routes = () => (\n  <div className=\"view-routes\">\n    <Route exact path=\"/\" component={Home} />\n    <Route path=\"/login\" component={Login} />\n    <Route path=\"/logout\" component={Logout} />\n    <Route path=\"/register\" component={Register} />\n    <Route path=\"/activate/:key?\" component={Activate} />\n    <Route path=\"/reset/request\" component={PasswordResetInit} />\n    <Route path=\"/reset/finish/:key?\" component={PasswordResetFinish} />\n    <PrivateRoute path=\"/admin\" component={Admin} />\n    <PrivateRoute path=\"/account\" component={Account} />\n    <Route path=\"**\" component={Entities} />\n  </div>\n);\n\nexport default Routes;\n```", "```js\nexport const getRoles = () => ({\n  type: ACTION_TYPES.FETCH_ROLES,\n  payload: axios.get(`${apiUrl}/authorities`)\n});\n```", "```js\n<Modal isOpen={this.props.showModal} toggle={handleClose} backdrop=\"static\" id=\"login-page\">\n  <AvForm onSubmit={this.handleSubmit}>\n    <ModalHeader toggle={handleClose} id=\"login-title\">\n      ...\n    </ModalHeader>\n    <ModalBody>\n      <div className=\"row\">\n        ...\n        <div className=\"col-md-12\">\n          <AvField\n            name=\"username\"\n            label={...}\n            placeholder={...}\n            required\n            errorMessage=\"Username cannot be empty!\"\n          />\n          ...\n        </div>\n      </div>\n      <Alert color=\"warning\">\n        ...\n      </Alert>\n      ...\n    </ModalBody>\n    <ModalFooter>\n      ...\n    </ModalFooter>\n  </AvForm>\n</Modal>\n```", "```js\n...\nconst devTools = process.env.NODE_ENV === 'development' ? <DevTools /> : null;\nconst store = initStore();\nregisterLocales(store);\n\nconst actions = bindActionCreators({ clearAuthentication }, store.dispatch);\nsetupAxiosInterceptors(\n  () => actions.clearAuthentication('login.error.unauthorized')\n);\n\nconst rootEl = document.getElementById('root');\nconst render = Component =>\n  ReactDOM.render(\n    <AppContainer>\n      <Provider store={store}>\n        <div>\n          ...\n          {devTools}\n          <Component />\n        </div>\n      </Provider>\n    </AppContainer>,\n    rootEl\n  );\n\nrender(AppComponent);\n...\n```", "```js\n...\nexport class App extends React.Component<IAppProps> {\n  componentDidMount() {\n    this.props.getSession();\n  }\n\n  handleLogout = () => {\n    this.props.logout();\n  };\n\n  render() {\n    const paddingTop = '60px';\n    return (\n      <Router>\n        <div className=\"app-container\" style={{ paddingTop }}>\n          <Header\n            ...\n          />\n          <div className=\"container-fluid view-container\" id=\"app-view-container\">\n            <Card className=\"jh-card\">\n              <AppRoutes />\n            </Card>\n            <Footer />\n          </div>\n          <ModalContainer />\n        </div>\n      </Router>\n    );\n  }\n}\n...\n```", "```js\nconst defaultMiddlewares = [\n  thunkMiddleware,\n  errorMiddleware,\n  notificationMiddleware,\n  promiseMiddleware(),\n  loadingBarMiddleware(),\n  loggerMiddleware\n];\n```", "```js\n...\n\nexport const ACTION_TYPES = {\n  LOGIN: 'authentication/LOGIN',\n  ...\n};\n\nconst initialState = {\n  ...\n};\n\n// Reducer\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case REQUEST(ACTION_TYPES.LOGIN):\n    case REQUEST(ACTION_TYPES.GET_SESSION):\n      return {\n        ...state,\n        loading: true\n      };\n    case FAILURE(ACTION_TYPES.LOGIN):\n      return {\n        ...initialState,\n        errorMessage: action.payload,\n        showModalLogin: true,\n        loginError: true\n      };\n    ...\n    case SUCCESS(ACTION_TYPES.LOGIN):\n      return {\n        ...state,\n        loading: false,\n        loginError: false,\n        showModalLogin: false,\n        loginSuccess: true\n      };\n    ...\n    default:\n      return state;\n  }\n};\n...\nexport const login = \n  (username, password, rememberMe = false) => async (dispatch, getState) => {\n  const result = await dispatch({\n    type: ACTION_TYPES.LOGIN,\n    payload: axios.post('/api/authenticate', { username, password, rememberMe })\n  });\n  const bearerToken = result.value.headers.authorization;\n  if (bearerToken && bearerToken.slice(0, 7) === 'Bearer ') {\n    const jwt = bearerToken.slice(7, bearerToken.length);\n    if (rememberMe) {\n      Storage.local.set('jhi-authenticationToken', jwt);\n    } else {\n      Storage.session.set('jhi-authenticationToken', jwt);\n    }\n  }\n  dispatch(getSession());\n};\n...\n```", "```js\nUsing JHipster version installed globally\nExecuting jhipster:entity employee\nOptions:\n\nThe entity employee is being created.\n\n...\n\n================= Employee =================\nFields\nname (String) required\nage (Integer)\ndob (Instant)\n\nRelationships\nuser (User) one-to-one\n\n? Do you want to use separate service class for your business logic? No, the REST controller should use the repository directly\n? Do you want pagination on your entity? No\n```", "```js\n   src/main/webapp/app/entities/employee/employee-delete-dialog.tsx\n   src/main/webapp/app/entities/employee/employee-detail.tsx\n   src/main/webapp/app/entities/employee/employee-dialog.tsx\n   src/main/webapp/app/entities/employee/employee.tsx\n   src/main/webapp/app/entities/employee/employee.reducer.ts\n   src/main/webapp/app/shared/model/employee.model.ts\n   src/main/webapp/app/entities/employee/index.tsx\n```", "```js\n    <Switch>\n      <Route exact path={match.url} component={Employee} />\n      <ModalRoute exact parentPath={match.url} path={`${match.url}/new`} \n        component={EmployeeDialog} />\n      <ModalRoute exact parentPath={match.url} path={`${match.url}/:id/delete`} \n        component={EmployeeDeleteDialog} />\n      <ModalRoute exact parentPath={match.url} path={`${match.url}/:id/edit`} \n        component={EmployeeDialog} />\n      <Route exact path={`${match.url}/:id`} component={EmployeeDetail} />\n    </Switch>\n```", "```js\n...\nexport const ACTION_TYPES = {\n  ...\n  CREATE_EMPLOYEE: 'employee/CREATE_EMPLOYEE',\n  ...\n};\n\nconst initialState = {\n  ...\n};\n\n// Reducer\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    ...\n    case REQUEST(ACTION_TYPES.CREATE_EMPLOYEE):\n    ...\n      return {\n        ...\n      };\n    ...\n    case FAILURE(ACTION_TYPES.CREATE_EMPLOYEE):\n    ...\n      return {\n        ...\n      };\n    ...\n    case SUCCESS(ACTION_TYPES.CREATE_EMPLOYEE):\n    case SUCCESS(ACTION_TYPES.UPDATE_EMPLOYEE):\n      return {\n        ...\n      };\n    ...\n    default:\n      return state;\n  }\n};\n\nconst apiUrl = SERVER_API_URL + '/api/employees';\n...\n\nexport const createEntity: ICrudPutAction = entity => async dispatch => {\n  const result = await dispatch({\n    type: ACTION_TYPES.CREATE_EMPLOYEE,\n    meta: {\n      successMessage: messages.DATA_CREATE_SUCCESS_ALERT,\n      errorMessage: messages.DATA_UPDATE_ERROR_ALERT\n    },\n    payload: axios.post(apiUrl, entity)\n  });\n  dispatch(getEntities());\n  return result;\n};\n...\n```", "```js\n...\nexport interface IEmployeeProps {\n  getEntities: ICrudGetAllAction;\n  employees: any[];\n  getusers: ICrudGetAllAction;\n  match: any;\n}\n\nexport class Employee extends React.Component<IEmployeeProps> {\n  componentDidMount() {\n    this.props.getEntities();\n    this.props.getusers();\n  }\n\n  render() {\n    ...\n  }\n}\n\nconst mapStateToProps = storeState => ({\n  employees: storeState.employee.entities\n});\n\nconst mapDispatchToProps = { getusers, getEntities };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Employee);\n```"]