- en: Chapter 4. Building Custom Scrollbars
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 4 章。构建自定义滚动条
- en: A common strategy for dealing with pages that have a lot of content is to hide
    some of the content until the site visitor wants or needs it. There are many approaches
    to this — you could use tabs, accordions, lightboxes, or the focus of this chapter,
    scrollable areas.
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 处理具有大量内容的页面的常见策略是隐藏一些内容，直到站点访问者希望或需要它。有许多方法可以做到这一点 —— 您可以使用选项卡、手风琴、灯箱，或者本章重点，可滚动区域。
- en: Scrollable areas are easy for site visitors to understand and use, but they
    often get ignored because some operating systems have unsightly scrollbars that
    ruin the aesthetics of your carefully-tuned design. Browsers offer few, if any,
    options for customizing the appearance of scrollbars, and no official means of
    doing so has ever been included in any HTML or CSS specification.
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 可滚动区域易于站点访问者理解和使用，但它们经常被忽视，因为一些操作系统有难看的滚动条，这会破坏您精心调整的设计美感。浏览器几乎没有提供用于自定义滚动条外观的选项，也从未在任何
    HTML 或 CSS 规范中包含官方手段。
- en: Some designers have turned to Flash to create custom scrollbars, and I'm sure
    you've come across samples of these Flash scrollbars online more often than not,
    they're unwieldy and break common conventions for dealing with scrollable areas.
    For example, you're rarely able to use your mouse's scrollwheel to scroll through
    a Flash scrollable area.
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 一些设计师已经转向 Flash 来创建自定义滚动条，我相信你一定遇到过这些 Flash 滚动条的示例，往往它们笨拙且违反处理可滚动区域的常规惯例。例如，您很少能够使用鼠标的滚轮来滚动
    Flash 可滚动区域。
- en: 'In this chapter, we''ll learn:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '在本章中，我们将学习： '
- en: How to download and use jQuery plugins to do even more with jQuery
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何下载和使用 jQuery 插件，以便更多地使用 jQuery
- en: How to use a plugin's built-in customization options to customize how a plugin
    works
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用插件的内置定制选项来定制插件的工作方式
- en: How to use CSS to customize a plugin even further
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用 CSS 进一步定制插件
- en: How to set up custom-designed scrollbars that work just as your site visitors
    expect
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何设置自定义设计的滚动条，使其与您的站点访问者的期望一样工作
- en: How to use the jScrollPane plugin to smoothly scroll between different bits
    of content in our scrollable area
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用 jScrollPane 插件在我们的可滚动区域之间平滑滚动到不同的内容部分
- en: Designer, meet plugins
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计师，认识一下插件
- en: We've already talked about how programmers solve the same problems over and
    over again. It's these common tasks that jQuery simplifies so that we can accomplish
    these tasks with a minimum amount of code. But what about the tasks that are only
    somewhat common, like the desire for beautiful custom scrollbars that work?
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经谈过程序员如何一次又一次地解决相同的问题。正是这些常见的任务，jQuery 简化了我们能够用最少的代码完成这些任务。但是对于一些仅仅是有些常见的任务，比如想要漂亮的自定义滚动条，如何解决呢？
- en: That's where the jQuery community becomes important. Developers in the jQuery
    community are able to write code that extends the functionality of jQuery to simplify
    tasks that are only somewhat common. These bits of code are called **Plugins**
    and they are used in conjunction with the jQuery library to make coding complex
    interactions, widgets, and effects as simple as using the features already built
    into jQuery.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是 jQuery 社区变得重要的地方。jQuery 社区的开发人员能够编写代码，扩展 jQuery 的功能，简化一些常见的任务。这些代码片段称为**插件**，它们与
    jQuery 库一起使用，使编写复杂的交互、小部件和效果就像使用 jQuery 已经内置的功能一样简单。
- en: You'll find a library of hundreds of jQuery plugins on the official jQuery site.
    In addition to those, there are literally thousands more available from sites
    across the Web for just about any task you want to accomplish.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在官方 jQuery 网站上，您会找到数百个 jQuery 插件的库。除此之外，还有数千个来自 Web 上各个站点的插件，几乎可以完成您想要完成的任何任务。
- en: To create custom scrollbars, we'll be using *Kelvin Luck's* jScrollPane plugin.
    You'll learn how to install the plugin on your page and how to configure the CSS
    and options to make your scrollbars look and work the way you want.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建自定义滚动条，我们将使用*Kelvin Luck*的 jScrollPane 插件。您将学习如何在您的页面上安装插件以及如何配置 CSS 和选项，使您的滚动条看起来和工作方式符合您的要求。
- en: Choosing a plugin
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择插件
- en: Recently, the jQuery team has started supporting a small number of official
    jQuery plugins, and you can use those confidently, knowing that they have the
    same level of expertise, documentation, and support behind them that jQuery itself
    has. All other jQuery plugins are provided by various members of the jQuery community,
    and those authors are solely responsible for documentation and support for their
    own plugins. Writing and providing jQuery plugins is a bit of a free-for-all,
    and sadly you will come across a fair number of jQuery plugins which are poorly
    documented, poorly supported, and even worse, poorly written. What kinds of things
    should you, as a newcomer to jQuery, look for when choosing a plugin?
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 最近，jQuery团队已经开始支持一小部分官方jQuery插件，你可以放心使用这些插件，因为它们具有与jQuery本身相同水平的专业知识、文档和支持。所有其他jQuery插件都是由jQuery社区的各个成员提供的，这些作者对其自己的插件负有文档和支持的责任。撰写和提供jQuery插件有点像自由竞争，遗憾的是，你会发现一大堆文档质量差、支持不够好，甚至更糟糕，编写得很差的jQuery插件。作为一个新手jQuery用户，选择插件时应该寻找哪些特征呢？
- en: '*A recent update to the plugin*. Frequent updates mean that a plugin is well-supported
    and that the author is keeping the plugin up to date as jQuery and browsers evolve.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*插件的最新更新*。频繁的更新意味着插件得到了良好的支持，作者也在保持插件随着jQuery和浏览器的演变而更新。'
- en: '*Thorough and easy-to-understand documentation*. Before attempting to download
    and use a plugin, take a look through the plugin''s documentation and make sure
    you understand how to implement the plugin and how to use any options the plugin
    makes available to you.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*彻底易懂的文档*。在尝试下载和使用插件之前，请浏览插件的文档，并确保您了解如何实现插件以及如何使用插件提供给您的任何选项。'
- en: '*Browser support*. Great plugins generally have the same browser support as
    the jQuery library itself.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*浏览器支持*。优秀的插件一般具有与jQuery库本身相同的浏览器支持。'
- en: '*Working demo*. Most plugin authors will offer one or more working demos of
    their plugin in action. Check out the demo(s) in as many different browsers as
    possible to be sure the plugin works as advertised.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*工作演示*。大多数插件作者都会提供一个或多个插件的工作演示。尽可能在不同的浏览器中查看演示，以确保插件如广告所述的那样工作。'
- en: '*Reviews and ratings*. You won''t find reviews and ratings for all plugins,
    but if you can find some, they can be helpful indicators of the quality and reliability
    of the plugin.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*评论和评分*。并非所有插件都有评论和评分，但如果你能找到一些，它们可以是插件质量和可靠性的有用指标。'
- en: Setting up some scrollable HTML
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置一些可滚动的HTML
- en: Let's take a look at how to set up a simple HTML page that contains a scrollable
    area. Once we've got that out of the way, we'll look at how to replace the default
    scrollbars with custom ones.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何设置一个包含可滚动区域的简单HTML页面。一旦我们完成了这个，我们将看看如何用自定义的滚动条替换默认的滚动条。
- en: Time for action — scrollable HTML
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 —— 可滚动HTML
- en: 'Follow these steps to set up a simple HTML page with a scrollable area:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤设置一个包含可滚动区域的简单HTML页面：
- en: 'We''ll start off with setting up a basic HTML page and associated files and
    folders, just like we did in [Chapter 1](ch01.html "Chapter 1. Designer, Meet
    jQuery"), *Designer, Meet jQuery*. We need to have an area of content that''s
    large enough to scroll, so we''ll add several paragraphs of text to the body of
    the HTML document:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将从设置一个基本的HTML页面和相关的文件和文件夹开始，就像我们在[Chapter 1](ch01.html "Chapter 1. Designer,
    Meet jQuery")中所做的那样，*设计师，遇见jQuery*。我们需要有一个足够大的内容区域来滚动，所以我们将在HTML文档的正文部分添加几段文本：
- en: '[PRE0]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: I have not included it all, but I have included five long paragraphs of lorem
    ipsum text on my page to add some length and give us something to scroll. In case
    you're not aware, lorem ipsum is simply dummy filler text. You can generate some
    random lorem ipsum text for yourself to fill your page at [http://lipsum.com.](http://lipsum.com)
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我没有包含所有内容，但我在我的页面上包含了五段长的lorem ipsum文本，以增加页面的长度，并为我们提供一些可滚动的内容。如果你不知道，lorem
    ipsum只是一种虚拟的填充文本。你可以在[http://lipsum.com](http://lipsum.com)上生成一些随机的lorem ipsum文本来填充你的页面。
- en: Now, we need to make our text scroll. To do that, I'm going to wrap all those
    paragraphs of lorem ipsum in a `div` and then use CSS to set a height on the `div`
    and set the `overflow` to `auto:`
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要使我们的文本滚动。为了做到这一点，我要将所有那些lorem ipsum的段落包裹在一个`div`中，然后使用CSS在`div`上设置高度，将`overflow`设置为`auto`：
- en: '[PRE1]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Next, open your empty `styles.css` file, and add this bit of CSS to make our
    text area scrollable:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，打开你的空的`styles.css`文件，添加下面的CSS来实现我们的文本区域可以滚动：
- en: '[PRE2]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Feel free to add some additional CSS to style your text any way you'd like.
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 随意添加一些额外的CSS来自定义您的文本样式。
- en: 'Now, when I view my page in a browser, I''ll see that the browser has added
    some (ugly) scrollbars for my text:'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，当我在浏览器中查看我的页面时，我会看到浏览器已经为我的文本添加了一些（丑陋的）滚动条：
- en: '![Time for action — scrollable HTML](img/6709OS_04_img1.jpg)'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![实践时间—可滚动的HTML](img/6709OS_04_img1.jpg)'
- en: Adding custom scrollbars
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加自定义滚动条
- en: In most cases, the appearance of the scrollbars is determined by the operating
    system your site visitor is using instead of their browser. So it doesn't matter
    if you're using Firefox, Safari, Chrome, or some other browser on a Mac — you'll
    always see those trademark shiny blue scrollbars. On a PC, you'll always see chunky
    squarish scrollbars in whatever color scheme you've set in your Windows options.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，滚动条的外观是由您的网站访问者所使用的操作系统决定的，而不是他们的浏览器。所以，无论您在Mac上使用Firefox、Safari、Chrome还是其他浏览器，您总是会看到那些标志性的闪亮蓝色滚动条。在PC上，无论您在Windows选项中设置了什么颜色方案，您总是会看到那些笨拙的方形滚动条。
- en: Time for action — simple custom scrollbars
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实践时间—简单自定义滚动条
- en: You can see that the operating system's default scrollbars stick out like a
    sore thumb in the middle of our nicely designed page. Let's fix that, shall we?
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 您会发现操作系统的默认滚动条在我们精美设计的页面中格外突兀。让我们来解决这个问题，好吗？
- en: First, we've got to get our hands on the plugin we'd like to use to create our
    custom scrollbars. Head over to [http://jscrollpane.kelvinluck.com/](http://jscrollpane.kelvinluck.com/)
    and click on the **Download** link in the navigation menu:![Time for action —
    simple custom scrollbars](img/6709OS_04_img2.jpg)
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们要找到要使用的插件来创建自定义滚动条。前往[http://jscrollpane.kelvinluck.com/](http://jscrollpane.kelvinluck.com/)，点击导航菜单中的**下载**链接：![实践时间—简单自定义滚动条](img/6709OS_04_img2.jpg)
- en: This will jump you down to the **Download** section of the site, where you'll
    see Kelvin Luck is using Github to host his code. Github is a social coding hub
    — a sort of Facebook for developers — where the main focus is on writing, sharing,
    and discussing code. Hosting jQuery plugins and other open source code projects
    with Github is becoming more and more common these days as Github offers developers
    an easy way to share and collaborate on their code with others.
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将带您跳转到站点的**下载**部分，在那里您会看到Kelvin Luck正在使用Github来托管他的代码。Github是一个社交编程中心—一种面向开发者的Facebook—主要集中在撰写、分享和讨论代码。如今，使用Github来托管jQuery插件和其他开源代码项目变得越来越普遍，因为Github为开发者提供了一个简单的方式来与他人分享和合作他们的代码。
- en: Don't worry — downloading a plugin from Github is simple. I'll walk you through
    it.
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 别担心—从Github下载插件很简单。我会带你一步步完成。
- en: First, click the Github link on *Kelvin Luck's* site:![Time for action — simple
    custom scrollbars](img/6709OS_04_img3.jpg)
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在*Kelvin Luck*的网站上点击Github链接：![实践时间—简单自定义滚动条](img/6709OS_04_img3.jpg)
- en: That will take you to the jScrollPane project's home page on Github. On the
    right side of the page, you'll see a **Downloads** button:![Time for action —
    simple custom scrollbars](img/6709OS_04_img4.jpg)
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将带您进入jScrollPane项目在Github上的主页。在页面的右侧，您会看到一个**下载**按钮：![实践时间—简单自定义滚动条](img/6709OS_04_img4.jpg)
- en: After you click on the **Downloads** button, you'll get a modal dialog window
    showing all the available download packages for the project. Keep it simple, just
    click on the **Download .zip** button to get the latest version:![Time for action
    — simple custom scrollbars](img/6709OS_04_img5.jpg)
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下载**按钮后，会弹出模态对话框，显示项目的所有可用下载包。简单明了，只需点击**下载 .zip**按钮即可获取最新版本：![实践时间—简单自定义滚动条](img/6709OS_04_img5.jpg)
- en: The ZIP download will kick off automatically. Once it's done, we're done at
    Github. I told you it was easy. Now, let's unzip the package and see what's inside.![Time
    for action — simple custom scrollbars](img/6709OS_04_img6.jpg)
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: ZIP下载将自动开始。一旦完成，在Github完成。我告诉过你，这很简单。现在，让我们解压这个包并看看里面有什么。![实践时间—简单自定义滚动条](img/6709OS_04_img6.jpg)
- en: Wow! That's a lot of files! What are we supposed to do with all of these?
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 哇！这么多文件！我们应该怎么处理这些文件？
- en: It looks a little scary and confusing, but most of these files are examples
    and documentation about how to use the plugin. All we need to do is find the JavaScript
    files that make up the plugin. We'll find those inside the `script` folder.
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 看上去有点吓人和混乱，但这些文件大部分都是关于如何使用插件的示例和文档。我们只需要找到组成插件的JavaScript文件。我们将在`script`文件夹中找到它们。
- en: '![Time for action — simple custom scrollbars](img/6709OS_04_img7.jpg)'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![实践时间—简单自定义滚动条](img/6709OS_04_img7.jpg)'
- en: Inside the `script` folder, we'll find more like what we expected. Let's figure
    out what these files are.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`script`文件夹内，我们将找到更多我们期望的内容。让我们弄清楚这些文件是什么。
- en: '`demo.js` is sample code. It''s what *Kelvin Luck* used to put together the
    assorted demos in the zip file. It might be useful to look at for examples if
    we get stuck, but we don''t need it for our own project.'
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`demo.js`是示例代码。这是*凯尔文·拉克*用来组合压缩文件中各种演示的内容。如果我们卡住了，看看示例可能会有用，但我们不需要它来进行我们自己的项目。'
- en: '`jquery.jscrollpane.js` is the source code for the jScrollPane plugin. If we
    wanted to modify the way the plugin works or dig through the source code, we could
    use this file, but we''re not expert coders just yet, so we can leave this one
    alone for now. Why does the filename begin with `jquery.?` It''s a common practice
    to add the `jquery`. in front of the file name to mark it as a jQuery plugin.
    It can make finding the jQuery plugins much easier in large projects that could
    be using a dozen or more jQuery plugins along with other JavaScript files.'
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jquery.jscrollpane.js`是 jScrollPane 插件的源代码。如果我们想要修改插件的工作方式或深入研究源代码，我们可以使用这个文件，但我们现在还不是专家级的程序员，所以我们可以暂时不管它。为什么文件名以`jquery.`开头？将`jquery.`添加到文件名前面以标记为
    jQuery 插件是一种常见做法。在使用了十几个或更多 jQuery 插件以及其他 JavaScript 文件的大型项目中，这样可以更容易地找到 jQuery
    插件。 '
- en: '`jquery.jscrollpane.min.js` is the compressed version of the plugin. It''s
    the same code as `jquery.jscrollpane.js` except it''s been minified. That just
    means all the extra spaces, tabs, and so on have been removed to make the file
    smaller—and you can see that it was pretty effective. The minified file is only
    16 KB as opposed to 45 KB for the regular file. We won''t be able to read this
    file easily if we open it, but that''s fine. We don''t need to be able to read
    it, and it''s more important that we serve up the smallest files possible to our
    site visitors.'
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jquery.jscrollpane.min.js`是插件的压缩版本。它和`jquery.jscrollpane.js`是相同的代码，只是进行了压缩。这意味着所有额外的空格、制表符等都被移除，使文件更小——你可以看到效果相当不错。压缩后的文件只有
    16 KB，而常规文件则为 45 KB。如果我们打开它，我们将无法轻松地阅读此文件，但这没关系。我们不需要能够阅读它，更重要的是我们要为我们的站点访问者提供尽可能小的文件。'
- en: '`jquery.mousewheel.js` is the other plugin that we''ll be using for our custom
    scrollbars. It''s the plugin that will let our mouse''s scrollwheel work just
    as it should in our scrollable areas'
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jquery.mousewheel.js`是我们将用于自定义滚动条的另一个插件。它是一个让我们的鼠标滚轮在可滚动区域中正常工作的插件。'
- en: '`mwheelintent.js` is yet another plugin. Looking through *Kelvin Luck''s* documentation,
    we see that this plugin is used for making sure our scrollable areas work as we
    expect when we nest scrollable areas inside one another. We won''t be needing
    that for now.'
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mwheelintent.js`是另一个插件。浏览 *凯尔文·拉克* 的文档，我们发现这个插件用于确保当我们将可滚动区域嵌套在彼此内时，它们的工作方式与我们期望的一样。但现在我们不需要它。'
- en: Copy `jquery.jscrollpane.min.js` and `jquery.mousewheel.js` and put them in
    your `scripts` folder inside your own project, right next to the `jquery.js` file.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制`jquery.jscrollpane.min.js`和`jquery.mousewheel.js`并将它们放在你的`scripts`文件夹内，紧挨着`jquery.js`文件。
- en: 'Next, we need to include these two files in our page, just like we did with
    jQuery. Go down to the bottom of your page, and attach the new files between the
    jQuery`<script>` tag and your own`<script>` tag:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要像之前引入 jQuery 一样，在我们的页面中包含这两个文件。滚动到页面底部，在 jQuery 的`<script>`标签和你自己的`<script>`标签之间附加新文件：
- en: '[PRE3]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Tip
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Anytime you are using jQuery plugins, you want to make sure that you put your`<script>`
    tags in the correct order. The jQuery`<script>` tag should always be first, any
    plugins will come next. And finally any script that you're writing that's using
    jQuery or the plugins will come last. This is because the browser will load these
    scripts in the order we specify. The plugin files need to be loaded after jQuery
    because they are using the jQuery library and rely on it being available before
    they can work. In JavaScript-speak, we call this a dependency. The plugin code
    is dependent on jQuery. And in turn, our own code is dependent on both the plugin
    code and the jQuery library itself, so it needs to be loaded after those are available.
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 每当你使用 jQuery 插件时，你要确保你的`<script>`标签的顺序是正确的。jQuery 的`<script>`标签应始终排在第一位，任何插件将紧随其后。最后是任何使用
    jQuery 或插件的脚本。这是因为浏览器将按照我们指定的顺序加载这些脚本。插件文件需要在 jQuery 之后加载，因为它们正在使用 jQuery 库，并依赖于它在可用之前工作。在
    JavaScript 中，我们称之为依赖关系。插件代码依赖于 jQuery。反过来，我们自己的代码依赖于插件代码和 jQuery 库本身，因此需要在这些可用后加载。
- en: In this case, we have an additional dependency that we need to be aware of.
    The jScrollPane plugin is dependent on the MouseWheel plugin. For this reason,
    we need to make sure that we load up the MouseWheel plugin first, and then the
    jScrollPane plugin. If you ever have problems getting jQuery or a plugin to work,
    it's a good idea to check your script order — a missing or out-of-order dependency
    is often to blame.
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这种情况下，我们有一个额外的依赖项需要注意。jScrollPane 插件依赖于 MouseWheel 插件。因此，我们需要确保首先加载 MouseWheel
    插件，然后加载 jScrollPane 插件。如果您遇到了 jQuery 或插件无法工作的问题，检查您的脚本顺序是个好主意 —— 缺少或顺序错误的依赖关系通常是原因。
- en: We're almost ready to get our scrollbars set up, but there's one more file that
    we'll need to include. The jScrollPane plugin actually works by hiding the browser's
    native scrollbars and constructing replacements from ordinary `<div>s` and `<span>s`.
    That means we'll need some CSS to style those `<div>s` and `<span>s` to look like
    a scrollbar. Later on, we'll look at how we can write our own CSS to make our
    scrollbars look any way we want, but for now, we'll use the CSS that Kelvin Luck
    has supplied with his plugin to keep things simple.
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们几乎准备好设置滚动条了，但还有一个文件我们需要包含。jScrollPane 插件实际上通过隐藏浏览器的原生滚动条并从普通的`<div>`和`<span>`构建替代品来工作。这意味着我们需要一些
    CSS 来样式化那些`<div>`和`<span>`，使它们看起来像滚动条。稍后，我们将看看如何编写我们自己的 CSS 来使我们的滚动条看起来任何我们想要的样子，但现在，我们将使用
    Kelvin Luck 提供的 CSS 来保持简单。
- en: 'Go back into the files we downloaded from Github and find the `style` folder.
    Inside the folder, you''ll find two files: `demo.css` and `jquery.jscrollpane.css`.
    Just like with the script files, the `demo.css` file is special code that was
    written just for the examples, but `jquery.jscrollpane.css` is the file that will
    style our scrollbars. Copy that file to your own `styles` folder and then inside
    the`<head>` section of your document, attach the new stylesheet before your own
    `styles.css` file:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 回到我们从 Github 下载的文件中，找到`style`文件夹。在文件夹内，你会找到两个文件：`demo.css`和`jquery.jscrollpane.css`。就像脚本文件一样，`demo.css`是专门为示例编写的特殊代码，但`jquery.jscrollpane.css`是将为我们的滚动条设置样式的文件。将该文件复制到您自己的`styles`文件夹中，然后在文档的`<head>`部分，在您自己的`styles.css`文件之前附加新样式表：
- en: '[PRE4]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Phew! We''ve done a lot of work already, but we still need to add our custom
    scrollbars to our page. No worries, in true jQuery style, it''s just a couple
    of lines of code. Open up your `scripts.js` file and add this bit of code:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哎呀！我们已经做了很多工作，但我们仍然需要将我们的自定义滚动条添加到我们的页面中。别担心，在真正的 jQuery 风格中，这只是几行代码。打开您的`scripts.js`文件，添加以下代码：
- en: '[PRE5]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now, if you refresh the page, you'll see our scrollable area now has a jScrollPane-style
    scrollbar.
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，如果您刷新页面，您将看到我们的可滚动区域现在有一个 jScrollPane 风格的滚动条。
- en: '![Time for action — simple custom scrollbars](img/6709OS_04_img8.jpg)'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![操作时间 —— 简单自定义滚动条](img/6709OS_04_img8.jpg)'
- en: What just happened?
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: Let's pick that last bit of code apart to understand what's happening there.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解最后一段代码，以理解发生了什么。
- en: 'We''re already familiar with this:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经熟悉了这个：
- en: '[PRE6]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'That''s the ready method of the jQuery object being called on the document.
    That means that we''ll run our code as soon as the document is ready. As usual,
    we''ve told jQuery what should happen as soon as the document is ready by passing
    a function to this method:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在文档上调用的 jQuery 对象的 ready 方法。这意味着我们将在文档准备就绪时运行我们的代码。像往常一样，我们通过向该方法传递一个函数来告诉
    jQuery 在文档准备就绪时应该发生什么：
- en: '[PRE7]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'So the only really new thing we have to look at is the line of code we wrote
    inside the function:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们要看的唯一真正新的东西就是我们写在函数内的代码行：
- en: '[PRE8]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: But even this we can understand at least a bit. We know that `$('#scrolling')`
    will select the item on the page with the `id` of scrolling. Remember, we wrapped`<div
    id="scrolling"></div>` around the paragraphs of text that we wanted to scroll.
    Then we used a couple lines of CSS to limit the height of the `#scrolling div`
    and show the browser's scrollbar.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 但即使这一点我们也能理解至少一点。我们知道`$('#scrolling')`将选择页面上`id`为 scrolling 的项目。记住，我们在我们想要滚动的文本段落周围包裹了`<div
    id="scrolling"></div>`。然后我们使用了一些 CSS 来限制`#scrolling div`的高度并显示浏览器的滚动条。
- en: Then we can see that we're calling the `jScrollPane()` method. Most jQuery plugins
    will work this way — by adding a new method that you can call. How do you know
    what the new method is named? You'll usually find it in the documentation for
    the plugin. jScrollPane is exceptionally well documented with piles of examples
    for you to pick apart, learn from, and modify.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以看到我们正在调用 `jScrollPane()` 方法。大多数 jQuery 插件都是这样工作的 —— 通过添加一个你可以调用的新方法。你如何知道新方法的名称是什么？你通常会在插件的文档中找到它。jScrollPane
    文档详尽，提供了大量的示例供你学习和修改。
- en: Adding arrow controls
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加箭头控件
- en: Okay, now that we've got the basics of using plugins under our belts, now we
    can take a look at how we can take it further.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在我们已经掌握了使用插件的基础知识，现在我们可以看看如何进一步使用它。
- en: Time for action — adding up and down arrows
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 —— 添加上下箭头
- en: Let's add top and bottom buttons to our scrollbars so our scrollbars look and
    behave more like native scrollbars.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们给我们的滚动条添加上下按钮，这样我们的滚动条看起来和行为更像原生的滚动条。
- en: 'Let''s go back to that line of code in our `scripts.js` file where we called
    the `jScrollPane()` method to create the custom scrollbars:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们回到我们的 `scripts.js` 文件中调用 `jScrollPane()` 方法创建自定义滚动条的那行代码：
- en: '[PRE9]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Remember how we could pass things to methods and functions by putting them
    inside the parentheses? We had the following example:'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 记得我们如何通过将它们放在括号里传递给方法和函数的吗？我们有以下例子：
- en: '[PRE10]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: where we wanted to say that the dog was eating bacon. So, in JavaScript-speak
    we passed bacon to the eat method of the dog.
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们想说狗在吃培根。所以，在 JavaScript 中，我们向狗的 eat 方法传递了培根。
- en: 'Well, in this case, we can pass a set of options to the `jScrollPane` method
    to control how our scrollbars look and act. We want to show the top and bottom
    arrows on our scrollbars, and we can do that by setting the `showArrows` option
    to true. We just have to make a simple modification to our line of code as follows:'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 好吧，在这种情况下，我们可以向 `jScrollPane` 方法传递一组选项，以控制我们的滚动条的外观和行为。我们想在我们的滚动条上显示顶部和底部箭头，我们可以通过将
    `showArrows` 选项设置为 true 来实现。我们只需要对我们的代码做一个简单的修改：
- en: '[PRE11]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Now when you refresh the page, you'll see boxes at the top and bottom of your
    scrollbars, just where top and bottom arrows would appear.![Time for action —
    adding up and down arrows](img/6709_04_img10.jpg)
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在当你刷新页面时，你会看到顶部和底部的滚动条上有方框，就像顶部和底部箭头会出现的地方一样。![行动时间 —— 添加上下箭头](img/6709_04_img10.jpg)
- en: If you click on these boxes, you'll see that they behave just like the up and
    down arrows on a regular scrollbar. They're just a little plain — we can style
    those up with some CSS to look any way we'd like.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你点击这些框，你会发现它们的行为就像普通滚动条上的上下箭头一样。它们只是有点朴素 — 我们可以用一些 CSS 来为它们增加样式，让它们看起来任何我们想要的样子。
- en: What just happened?
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We set the `showArrows` option of the `jScrollPane` method to `true`. There's
    a rather long list of advanced options available with this plugin, but luckily,
    we don't have to learn or know them all to be able to make good use of it.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将 `jScrollPane` 方法的 `showArrows` 选项设置为 `true`。这个插件提供了一长串高级选项，但幸运的是，我们不需要学习或了解它们全部才能充分利用它。
- en: How do we know that there's a `showArrows` option? We'll find it in the documentation
    for the plugin. Once you get better at understanding JavaScript and jQuery, you'll
    be able to read the plugin files themselves to see what options and methods the
    plugin is providing for you.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们怎么知道有一个 `showArrows` 选项？我们会在插件的文档中找到它。一旦你更加了解 JavaScript 和 jQuery，你就能够阅读插件文件本身，查看插件为你提供的选项和方法。
- en: 'To pass one option to a method, you''ll wrap it in curly braces. Then you''ll
    type the name of the option you''re setting (in this case, `showArrows)`, then
    a colon, and then the value that you''re setting the option to (in this case,
    `true` to show the arrows). Just like we did before:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 要向方法传递一个选项，你需要用花括号括起来。然后你会输入你要设置的选项的名称（在本例中为`showArrows`)，然后是一个冒号，然后是你要设置选项的值（在本例中为`true`表示显示箭头）。就像我们之前所做的一样：
- en: '[PRE12]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'If you want to pass more than one option to a method, you''ll do everything
    the same, except you''ll need to put a comma between the options. For example,
    if I wanted to add a little breathing room between my text and the scrollbar,
    I could do that by setting a value for the `verticalGutter` option:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想向一个方法传递多个选项，你需要做的一切都一样，只是在选项之间需要用逗号隔开。例如，如果我想在我的文本和滚动条之间添加一点间距，我可以通过为 `verticalGutter`
    选项设置一个值来实现：
- en: '[PRE13]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now, you can see that if I were setting a dozen or more options, this line
    of code would get long and hard to read. For that reason, it''s common practice
    to break options out onto separate lines as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以看到，如果我设置了十几个或更多选项，这行代码会变得又长又难读。因此，将选项分开放在单独的行上是常见的做法，如下所示：
- en: '[PRE14]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: You can see that the content and order are the same, only this example is easier
    for a human being to read and understand. A computer doesn't care one way or the
    other.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到内容和顺序是相同的，只是这个例子更容易被人读到和理解。计算机无论如何都不会在意。
- en: Tip
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Be careful not to add an extra comma after the last option/value pair. Most
    browsers will handle that error gracefully, but Internet Explorer will throw an
    error and your JavaScript won't work.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 注意不要在最后一个选项/值对之后添加额外的逗号。大多数浏览器会优雅地处理这个错误，但是Internet Explorer会抛出错误，您的JavaScript将无法工作。
- en: Customizing the Scrollbar Style
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义滚动条样式
- en: Now we've got top and bottom buttons on our scrollbars, so let's make them look
    just the way we want. We can do this by writing our own CSS to style the scrollbars.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的滚动条上有了顶部和底部按钮，让我们将它们的外观调整得正好符合我们的要求。我们可以编写自己的CSS样式来设置滚动条的外观。
- en: If you've spent any time at all debugging CSS, then you already know about the
    tools available to you in your favorite browser to do so. Just in case you haven't,
    I highly recommend you take a look at the Firebug extension for Firefox, or the
    developer tools built into Opera, Chrome, Safari, and IE9\. A quick Google search
    for 'your browser *developer tools tutorial'* should yield plenty of results where
    you can learn how to take advantage of what these tools have to offer.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您花了一些时间来调试CSS，那么您肯定已经知道您喜欢的浏览器中为您提供的调试工具。以防您还不知道，我强烈建议您看看Firefox的Firebug扩展，或者Opera、Chrome、Safari和IE9内置的开发工具。通过快速的谷歌搜索“您的浏览器
    *开发者工具教程*”应该能够获得很多教程，让您学会如何充分利用这些工具所提供的便利。
- en: If you're using an older version of IE, then take a look at the **Debug Bar**
    program available as an extension to IE that will be helpful for troubleshooting
    problems with CSS. It is free for personal use.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的是IE的旧版本，那么看看**Debug Bar**能帮助您调试CSS问题的IE扩展程序。这个扩展程序可以免费个人使用。
- en: 'I tend to use Google Chrome when I''m developing new pages. To access the developer
    tools in Chrome, click the wrench icon at the far right of the toolbar, then select
    **Tools** | **Developer Tools**. Here''s an example of the CSS information I can
    get by using the built-in tools:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我在开发新页面时倾向于使用Google Chrome。要访问Chrome中的开发者工具，请单击工具栏最右侧的扳手图标，然后选择**工具** | **开发者工具**。这是使用内置工具可以得到的CSS信息的一个例子：
- en: '![Customizing the Scrollbar Style](img/6709OS_04_img9.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![自定义滚动条样式](img/6709OS_04_img9.jpg)'
- en: On the left, you can see the DOM for my document — all the HTML elements that
    make up the document tree. I can interact with it — each node can be expanded
    or collapsed to show or hide the elements that are nested inside. In this case,
    the highlighted element is the container for our jScrollPane scrollbar.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在左侧，您可以看到我的文档的DOM —— 构成文档树的所有HTML元素。我可以与之交互 —— 每个节点都可以被展开或折叠，以显示或隐藏嵌套在内的元素。在这种情况下，高亮显示的元素是我们jScrollPane滚动条的容器。
- en: On the right, I can see the CSS that applies to the element I've selected on
    the left. I can also see which file that particular CSS appears in, and on what
    line. In this case, most of the CSS that's styling my scrollbar container can
    be found on line 20 of the `jquery.jscrollpane.css` file.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在右侧，我可以看到应用于左侧已选择元素的CSS。我还可以看到特定CSS出现在哪个文件中，以及在哪一行。在这种情况下，大部分样式我的滚动条容器的CSS可以在`jquery.jscrollpane.css`文件的第20行找到。
- en: Digging into the DOM and CSS this way is a quick and easy way to figure out
    which lines of CSS we need to modify to get the appearance that we want.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式深入DOM和CSS很快且容易地找出我们需要修改的CSS行，以满足我们所需的外观。
- en: We have a couple of options for customizing the CSS for the scrollbars. Either
    we can modify the `jquery.jscrollpane.css` file directly, or we can copy those
    styles to our own stylesheet and make the changes there. It's a matter of personal
    preference, but if you opt to modify the `jquery.jscrollpane.css` file directly,
    as I'm going to do here, then I highly recommend you to make a separate copy of
    it to keep so that you can refer to it or easily restore it without having to
    re-download it again.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有几种选项来定制滚动条的 CSS。我们可以直接修改`jquery.jscrollpane.css`文件，也可以将这些样式复制到我们自己的样式表中进行更改。这是个人喜好的问题，但如果你选择直接修改`jquery.jscrollpane.css`文件，就像我在这里做的那样，那么我强烈建议你制作一个单独的副本以供参考，这样你就可以在不重新下载的情况下轻松地恢复它。
- en: Time for action — adding our own styles
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——添加我们自己的样式
- en: Open `jquery.jscrollpane.css`. Around line 56, you'll find the CSS that styles
    `.jspTrack`. This is the track for our scrollbar the background area you might
    say. The default style for it is a pale lavender color.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`jquery.jscrollpane.css`。大约在第 56 行附近，你会找到为`.jspTrack`样式化的 CSS。这是我们滚动条的轨道，也可以说是背景区域。它的默认样式是淡紫色。
- en: '[PRE15]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We don''t want to mess with the position, since our scrollbar is relying on
    that to work correctly, but you can feel free to change the background color to
    any color, gradient, or image you''d like. I''m going to make mine pale pink:'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们不想动位置，因为我们的滚动条依赖于它来正确工作，但你可以随意将背景颜色改为任何你喜欢的颜色、渐变或图片。我会选择淡粉色：
- en: '[PRE16]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Next, I'll tackle the top and bottom buttons. I have not only a default style,
    but also a disabled style. For example, when the scroll area is all the way to
    the top the top button is disabled since I can't possibly scroll any higher. If
    I examine the buttons with my developer tools, I can also see that there's an
    additional class name on the buttons that's not styled in the default CSS — the
    top button has a class of `jspArrowUp` and the bottom button has a class of `jspArrowDown`.
    That will let me set a different style for the up and down buttons — I'm going
    to use an image of an upward pointing arrow as a background for the top arrow,
    and a downward-pointing arrow for the bottom button to make their function clear
    to my site visitors.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我将处理顶部和底部按钮。我不仅有一个默认样式，还有一个禁用样式。例如，当滚动区域完全位于顶部时，顶部按钮被禁用，因为我不可能再向上滚动了。如果我用开发者工具检查按钮，我还可以看到按钮上有一个额外的类名，在默认
    CSS 中没有样式化——顶部按钮有一个类名为`jspArrowUp`，底部按钮有一个类名为`jspArrowDown`。这将让我为上下按钮设置不同的样式——我将使用向上指向箭头的图片作为顶部箭头的背景，使用向下指向箭头作为底部按钮的背景，以便让我的网站访客清楚地了解它们的功能。
- en: 'Here''s my CSS for styling those:'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是我用来样式化它们的 CSS：
- en: '[PRE17]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: What just happened?
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: Now when you refresh the browser, you can see that the scrollbars are styled
    pink — just the way I wanted them. We modified the CSS that was supplied by the
    plugin developer to make the scrollbars appear just the way we wanted. We were
    able to use the developer tools built into our browser to target the file and
    line numbers of the code that needed to be updated to change the appearance of
    the scrollbars.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 现在刷新浏览器，你会看到滚动条被样式化成了粉色——就像我想要的那样。我们修改了插件开发者提供的 CSS，使滚动条的外观符合我们的要求。我们能够使用浏览器内置的开发者工具来定位需要更新的代码的文件和行号，以改变滚动条的外观。
- en: Have a go hero — style the scrollbars the way you want
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 试试吧，勇士——按照你想要的样式设计滚动条
- en: Now, you might not care for bright pink scrollbars, and you might think my example
    is a little bit plain, and you'd be right. But you can get creative with background
    colors, gradients, images, rounded corners, and more, to style your scrollbars
    just the way you'd like. You can mimic the scrollbars of your favorite operating
    system so that all of your site visitors see them the way you like, or you can
    create an entirely new style. Experiment with the CSS to create your own scrollbar
    style.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，也许你不喜欢鲜艳的粉红色滚动条，你可能会觉得我的示例有点平淡，你是对的。但是你可以创造性地使用背景颜色、渐变、图片、圆角等来设计你喜欢的滚动条样式。你可以模仿你喜欢的操作系统的滚动条，让你的所有网站访客都能看到你喜欢的样式，或者你可以创建一个全新的样式。尝试使用
    CSS 来创建自己的滚动条样式。
- en: Smooth scrolling
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 平滑滚动
- en: 'jScrollPane is a mature and full-featured plugin. If you poke through the examples
    and documentation, you''ll find all kinds of fun options to play with. I''ll walk
    you through setting up one of my favorites: animated scrolling inside the scrollable
    area.'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: jScrollPane是一个成熟且功能齐全的插件。如果你浏览示例和文档，你会发现各种有趣的选项可供使用。我将带你设置其中一个我最喜欢的功能：可滚动区域内的动画滚动。
- en: Time for action — setting up smooth scrolling
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 —— 设置平滑滚动
- en: 'You could place any kind of content you''d like inside a scrollable area —
    a list of news stories, a gallery of photos, or a long article with several sections,
    headings, and subheadings, for example. Here''s how you can set up a control to
    smoothly scroll from one section to another:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将任何类型的内容放在可滚动区域内——新闻故事列表、照片画廊，或者是一篇包含几个部分、标题和副标题的长文章。下面是如何设置控件以平滑滚动到另一节的方法：
- en: 'The first thing we''ll need to do is assign an ID to each of our paragraphs.
    I have five paragraphs of lorem ipsum in my scrollable area, so I''m going to
    assign them `ids` of `para1, para2, para3, para4`, and `para5`. You can choose
    whatever `ids` you like, but keep in mind that an `id` cannot begin with a number.
    So now my code looks like this (I''ve truncated the text to save space):'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要做的第一件事是为我们的每个段落分配一个ID。我在可滚动区域中有五个lorem ipsum段落，所以我将它们分配为`para1, para2, para3,
    para4`和`para5`的`ids`。你可以选择任何你喜欢的`ids`，但请记住，`id`不能以数字开头。所以现在我的代码看起来像这样（我已经截断了文本以节省空间）：
- en: '[PRE18]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now, let''s add in some internal links above our scrollable area to jump to
    each of these paragraphs. After the heading and before the scrollable area, add
    the following code:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们在可滚动区域上方添加一些内部链接，以跳转到每个段落。在标题之后和可滚动区域之前，添加以下代码：
- en: '[PRE19]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'If we have JavaScript disabled, these links work; they will scroll the scrollable
    area down to the paragraph in question making it visible to our site visitor.
    But we want them to work with our fancy custom scrollbars. So we just have to
    pass a new option to our jScrollPane method:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们禁用了 JavaScript，这些链接也可以工作；它们会将可滚动区域滚动到相关的段落，使其对我们的网站访客可见。但我们希望它们与我们的花哨自定义滚动条一起工作。因此，我们只需向jScrollPane方法传递一个新选项：
- en: '[PRE20]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This new option is to keep the browser from attempting its default behavior
    when the internal links are clicked. Refresh the page, and try out the links to
    the paragraphs.
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个新选项是为了阻止浏览器在点击内部链接时尝试其默认行为。刷新页面，然后尝试点击段落的链接。
- en: 'It works, but it''s not exactly pretty, and it can be a little disconcerting
    when that scrollable area jumps suddenly like that — our site visitor might not
    realize exactly what''s happened. Let''s make it obvious by smoothly animating
    that jump to the different paragraphs. All we have to do is add another option
    to our code:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它可以运行，但并不完美，当可滚动区域突然跳动时可能会让人感到不安——我们的网站访客可能不会完全意识到发生了什么。让我们通过平滑地动画化跳转到不同的段落来明显地展现出来。我们只需在代码中添加另一个选项：
- en: '[PRE21]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Now, when you refresh the page and click the paragraph links, you'll see that
    the scrollable area smoothly scrolls to the proper paragraph. It's easy to understand
    what's happening and where you are on the page and in the scrollable area.
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，当你刷新页面并点击段落链接时，你会发现可滚动区域平滑滚动到正确的段落。很容易理解发生了什么，你在页面上和可滚动区域中的位置。
- en: What just happened?
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We took advantage of one of the features of the jScrollPane plugin and made
    smooth scrolling to any bit of content inside our scrollable container possible.
    The options and values available to us are all documented in the plugin's documentation
    and examples. You can see how easy it was to customize this plugin to add this
    nice bit of behavior, thanks to the plugin author's hard work in making tough
    stuff easy for us.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们利用了jScrollPane插件的一个功能，并使得在可滚动容器内平滑滚动到任何内容成为可能。我们可以使用的选项和值都在插件的文档和示例中有所说明。由于插件作者在使艰难的事情变得容易方面的努力工作，你可以看到我们有多么容易地定制了这个插件来添加这种良好的行为。
- en: Summary
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Phew! This was quite a chapter. We learned about jQuery plugins, how to use
    them, and how to use the options they make available to customize them. We learned
    about dependencies and inserting multiple scripts into our file in the correct
    order. We used Kelvin Luck's excellent jScrollPane plugin to replace our boring
    operating system scrollbars with fancy custom ones of our own design. And the
    bonus is, they work just like browser scrollbars our site visitors can click on
    the track, on the up and down buttons, they can drag the handle, or they can use
    their mousewheel to navigate up and down the scrollable areas we've set up. It's
    a win for both aesthetics and usability.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 哦，这一章真是够繁重的。我们学到了关于 jQuery 插件的知识，如何使用它们，以及如何使用它们提供的选项来定制它们。我们了解了依赖关系，并按正确的顺序将多个脚本插入到我们的文件中。我们使用了
    Kelvin Luck 的出色 jScrollPane 插件，将我们无聊的操作系统滚动条替换为我们自己设计的花哨的自定义滚动条。而且，好处是，它们的工作方式与浏览器的滚动条完全相同，我们的网站访问者可以点击轨道，点击上下按钮，他们可以拖动手柄，或者使用鼠标滚轮在我们设置的可滚动区域上下导航。这既提升了美观性又提高了可用性。
- en: Finally, we learned how to smoothly scroll to an anchor inside the scrollable
    area this allows our site visitors to easily get to individual bits of content
    inside the scrollable area, and communicates what's happening clearly.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们学会了如何在可滚动区域内平稳滚动至锚点，这样我们的网站访问者就可以轻松地进入可滚动区域内的各个内容片段，并清楚地传达了正在发生的事情。
- en: Next up, we'll take a look at overriding the browser's default tooltips with
    nicely designed tooltips of our own and we'll learn how to make them work even
    harder for us by adding extra content.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将看看如何用我们自己设计的漂亮工具提示覆盖浏览器的默认工具提示，并学习如何通过添加额外内容使它们更加有效。
