["```js\nimport React, { useState, useRef } from 'react';\nimport { gql, useQuery, useMutation } from '@apollo/client';\nconst ADD_POST = gql'\n  mutation addPost($post : PostInput!) {\n    addPost(post : $post) {\n      id\n      text\n      user {\n        username\n        avatar\n      }\n    }\n  }\n';\nconst Feed = () => {\n  const textArea = useRef(null)\n  const [addPost] = useMutation(ADD_POST);\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    addPost({ variables: { post: { text: \n      textArea.current.value } } });\n  };\n  return (\n    <div className=\"container\">\n      <div className=\"postForm\">\n        <form onSubmit={handleSubmit}>\n          <textarea ref={textArea} placeholder=\"Write your\n            custom post!\"/>\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n      </div>\n    </div>\n  )\n}\nexport default Feed\n```", "```js\nmkdir src/client/components\n```", "```js\ntouch src/client/components/loading.js\n```", "```js\nimport React from 'react';\nexport default ({color, size}) => {\n  var style = {\n    backgroundColor: '#6ca6fd',\n    width: 40,\n    height: 40,\n  };\n  if(typeof color !== typeof undefined) {\n    style.color = color;\n  }\n  if(typeof size !== typeof undefined) {\n    style.width = size;\n    style.height = size;\n  }\n  return <div className=\"bouncer\" style={style}></div>\n}\n```", "```js\n.bouncer {\n  margin: 20px auto;\n  border-radius: 100%; \n  -webkit-animation: bounce 1.0s infinite ease-in-out;\n  animation: bounce 1.0s infinite ease-in-out;\n}\n@-webkit-keyframes bounce {\n  0% {\n    -webkit-transform: scale(0)\n  }\n  100% {\n    -webkit-transform: scale(1.0);\n    opacity: 0;\n  }\n}\n@keyframes bounce {\n  0% { \n    -webkit-transform: scale(0);\n    transform: scale(0);\n  }\n  100% {\n    -webkit-transform: scale(1.0);\n    transform: scale(1.0);\n    opacity: 0;\n  }\n}\n```", "```js\nimport Loading from './components/loading';\n```", "```js\nif (loading) return <Loading />;\n```", "```js\nconst [shouldRender, setShouldRender] = useState(false);\nreturn (\n  <div className=\"conditional\">\n    {(shouldRender === true) && (\n      <p>Successful conditional rendering!</p>\n    )}\n  </div>\n)\n```", "```js\nimport React from 'react';\nexport default ({ children }) => {\n  return (\n    <div className=\"error message\">\n      {children}\n    </div>\n  );\n}\n```", "```js\nif (error) return <Error><p>{error.message}</p></Error>;\n```", "```js\n.message {\n  margin: 20px auto;\n  padding: 5px;\n  max-width: 400px;\n}\n.error.message {\n  border-radius: 5px;\n  background-color: #FFF7F5;\n  border: 1px solid #FF9566;\n  width: 100%;\n}\n```", "```js\nmkdir src/client/components/post\n```", "```js\nimport React from 'react';\nexport default ({post}) => {\n  return (\n    <div className=\"header\">\n      <img src={post.user.avatar} />\n      <div>\n        <h2>{post.user.username}</h2>\n      </div>\n    </div>\n  );\n}\n```", "```js\nimport React from 'react';\nexport default ({post}) => \n  <p className=\"content\">\n    {post.text}\n  </p>\n```", "```js\nimport React from 'react';\nimport PostHeader from './header';\nimport PostContent from './content';\nconst Post = ({ post }) => {\n  return (\n    <div className={\"post \" + (post.id < 0 ? \"optimistic\": \n      \"\")}>\n      <PostHeader post={post}/>\n      <PostContent post={post}/>\n    </div>\n  )\n}\nexport default Post\n```", "```js\nimport Post from './components/post';\n```", "```js\n<Post key={post.id} post={post} />\n```", "```js\n    mkdir src/client/apollo/queries\n    mkdir src/client/apollo/fragments\n    ```", "```js\n    import { gql } from '@apollo/client';\n    export const USER_ATTRIBUTES = gql'\n      fragment userAttributes on User {\n        username\n        avatar\n      }\n    ';\n    ```", "```js\n    import { gql } from '@apollo/client';\n    import { USER_ATTRIBUTES } from '../fragments/userAttributes';\n    export const GET_POSTS = gql'\n      query postsFeed($page: Int, $limit: Int) {\n        postsFeed(page: $page, limit: $limit) {\n          posts {\n            id\n            text\n            user {\n              ...userAttributes\n            }\n          }\n        }\n      }\n      ${USER_ATTRIBUTES}\n    ';\n    ```", "```js\n    import { GET_POSTS } from './apollo/queries/getPosts';\n    ```", "```js\n    mkdir src/client/apollo/mutations\n    ```", "```js\n    import { gql } from '@apollo/client';\n    import { USER_ATTRIBUTES } from '../fragments/userAttributes';\n    export const ADD_POST = gql'\n      mutation addPost($post : PostInput!) {\n        addPost(post : $post) {\n          id\n          text\n          user {\n            ...userAttributes\n          }\n        }\n      }\n      ${USER_ATTRIBUTES}\n    ';\n    ```", "```js\n    import { ADD_POST } from './apollo/mutations/addPost';\n    ```", "```js\n    export const getAddPostConfig = (postContent) => ({\n      optimisticResponse: {\n        __typename: \"mutation\",\n        addPost: {\n          __typename: \"Post\",\n          text: postContent,\n          id: -1,\n          user: {\n            __typename: \"User\",\n            username: \"Loading...\",\n            avatar: \"/public/loading.gif\"\n          }\n        }\n      },\n      update(cache, { data: { addPost } }) {\n        cache.modify({\n          fields: {\n            postsFeed(existingPostsFeed) {\n              const { posts: existingPosts } =\n                existingPostsFeed;\n              const newPostRef = cache.writeFragment({\n                data: addPost,\n                fragment: gql'\n                  fragment NewPost on Post {\n                    id\n                    type\n                  }\n                '\n              });\n              return {\n                ...existingPostsFeed,\n                posts: [newPostRef, ...existingPosts]\n              };\n            }\n          }\n        });\n      }\n    });\n    ```", "```js\n    import { ADD_POST, getAddPostConfig } from './apollo/mutations/addPost';\n    ```", "```js\n    const [addPost] = useMutation(ADD_POST, getAddPostConfig(postContent));\n    ```", "```js\n    export const useAddPostMutation = (postContent) => useMutation(ADD_POST, getAddPostConfig(postContent));\n    ```", "```js\n    import { useAddPostMutation } from './apollo/mutations/addPost';\n    ```", "```js\n    const [addPost] = useAddPostMutation(postContent);\n    ```", "```js\nnpm i --save @fortawesome/fontawesome-svg-core @fortawesome/free-solid-svg-icons @fortawesome/free-brands-svg-icons @fortawesome/react-fontawesome\n```", "```js\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faAngleDown } from '@fortawesome/free-solid-svg-icons';\nlibrary.add(faAngleDown);\n```", "```js\nimport './components/fontawesome';\n```", "```js\nmkdir src/client/components/helpers\n```", "```js\nimport React, { useState, useRef, useEffect } from 'react';\nexport default ({ trigger, children }) => {\n  const [show, setShow] = useState(false);\n  const wrapperRef = useRef(null);\n  useOutsideClick(wrapperRef);\n  function useOutsideClick(ref) {\n    useEffect(() => {\n      function handleClickOutside(event) {\n        if (ref.current &&\n            !ref.current.contains(event.target)) {\n          setShow(false);\n        }\n      }\n      document.addEventListener(\"mousedown\", \n        handleClickOutside);\n      return () => {\n        document.removeEventListener(\"mousedown\",\n          handleClickOutside);\n      };\n    }, [ref]);\n  }\n  return(\n    <div className=\"dropdown\">\n      <div>\n        <div className=\"trigger\" onClick={() => \n          setShow(!show)}>\n          {trigger}\n        </div>\n        <div ref={wrapperRef}>\n          { show &&\n            <div className=\"content\">\n              {children}\n            </div>\n          }\n        </div>\n      </div>\n    </div>\n  )\n}\n```", "```js\n    type Response {\n      success: Boolean\n    }\n    deletePost (\n      postId: Int!\n    ): Response\n    ```", "```js\n    deletePost(root, { postId }, context) {\n      return Post.destroy({\n        where: {\n          id: postId\n        }\n      }).then(function(rows){\n        if(rows === 1){\n          logger.log({\n            level: 'info',\n            message: 'Post ' + postId + 'was deleted',\n          });\n          return {\n            success: true\n          };\n        }\n        return {\n          success: false\n        };\n      }, function(err){\n        logger.log({\n          level: 'error',\n          message: err.message,\n        });\n      });\n    },\n    ```", "```js\n    import { gql } from '@apollo/client';\n    import { useMutation } from '@apollo/client';\n    ```", "```js\n    export const DELETE_POST = gql'\n      mutation deletePost($postId : Int!) {\n        deletePost(postId : $postId) {\n          success\n        }\n      }\n    ';\n    ```", "```js\n    export const getDeletePostConfig = (postId) => ({\n      update(cache, { data: { deletePost: { success } } })\n        {\n        if(success) {\n          cache.modify({\n            fields: {\n              postsFeed(postsFeed, { readField }) {\n                return {\n                  ...postsFeed,\n                  posts: postsFeed.posts.filter(postRef =>\n                    postId !== readField('id', postRef))\n                }\n              }\n            }\n          });\n        }\n      }\n    });\n    ```", "```js\n    export const useDeletePostMutation = (postId) => useMutation(DELETE_POST, getDeletePostConfig(postId));\n    ```", "```js\n    import Dropdown from '../helpers/dropdown';\n    import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n    import { useDeletePostMutation } from '../../apollo/mutations/deletePost';\n    ```", "```js\n    const [deletePost] = useDeletePostMutation(post.id);\n    ```", "```js\n    <Dropdown trigger={<FontAwesomeIcon icon=\"angle-down\" />}>\n      <button onClick={() => deletePost({ variables: {\n        postId: post.id }})}>Delete</button>\n    </Dropdown>\n    ```", "```js\ntype UsersSearch {\n  users: [User]\n}\nusersSearch(page: Int, limit: Int, text: String!): UsersSearch\n```", "```js\nusersSearch(root, { page, limit, text }, context) {\n  if(text.length < 3) {\n    return {\n      users: []\n    };\n  }\n  var skip = 0;\n  if(page && limit) {\n    skip = page * limit;\n  }\n  var query = {\n    order: [['createdAt', 'DESC']],\n    offset: skip,\n  };\n  if(limit) {\n    query.limit = limit;\n  }\n  query.where = {\n    username: {\n      [Op.like]: '%' + text + '%'\n    }\n  };\n  return {\n    users: User.findAll(query)\n  };\n},\n```", "```js\nimport Sequelize from 'sequelize';\nconst Op = Sequelize.Op;\n```", "```js\n    import { gql } from '@apollo/client';\n    import { USER_ATTRIBUTES } from '../fragments/userAttributes';\n    import { useQuery } from '@apollo/client';\n    export const GET_USERS = gql'\n      query usersSearch($page: Int, $limit: Int, $text:\n        String!) {\n        usersSearch(page: $page, limit: $limit, text:\n          $text) {\n          users {\n            id\n            ...userAttributes\n          }\n        }\n      }\n      ${USER_ATTRIBUTES}\n    ';\n    export const getUserSearchConfig = (text) => ({ variables: { page: 0, limit: 5, text }, skip: text.length < 3})\n    export const useUserSearchQuery = (text) => useQuery(GET_USERS, getUserSearchConfig(text))\n    ```", "```js\n    import React from 'react';\n    import SearchBar from './search';\n    const Bar = () => {\n      return (\n        <div className=\"topbar\">\n          <div className=\"inner\">\n            <SearchBar/>\n          </div>\n        </div>\n      );\n    }\n    export default Bar\n    ```", "```js\n    import React, { useState } from 'react';\n    import { useUserSearchQuery } from '../../apollo/queries/searchQuery';\n    import SearchList from './searchList';\n    const SearchBar = () => {\n      const [text, setText] = useState('');\n      const { loading, error, data } =\n        useUserSearchQuery(text);\n      const changeText = (event) => {\n        setText(event.target.value);\n      }\n      return (\n        <div className=\"search\">\n          <input type=\"text\" onChange={changeText} \n            value={text}\n          />\n          {!loading && !error && data && (\n            <SearchList data={data}/>\n          )}\n        </div>\n      );\n    }\n    export default SearchBar\n    ```", "```js\n    import React, { useState, useEffect } from 'react';\n    const SearchList = ({ data: { usersSearch: { users }}}) => {\n      const [show, setShowList] = useState(false);\n      const handleShow = (show) => {\n        if(show) {\n          document.addEventListener('click',\n            handleShow.bind(null, !show), true);\n        } else {\n          document.removeEventListener('click',\n            handleShow.bind(null, !show), true);\n        }\n        setShowList(show);\n      }\n      const showList = (users) => {\n        if(users.length) {\n          handleShow(true);\n        } else {\n          handleShow(false);\n        }\n      }\n      useEffect(() => {\n        showList(users);\n      }, [users]);\n      useEffect(() => {\n        return () => {\n          document.removeEventListener('click',\n            handleShow.bind(null, !show), true);\n        }\n      });\n      return (\n        show &&\n          <div className=\"result\">\n            {users.map((user, i) =>\n              <div key={user.id} className=\"user\">\n                <img src={user.avatar} />\n                <span>{user.username}</span>\n              </div>\n            )}\n          </div>\n      )\n    }\n    export default SearchList\n    ```", "```js\n    import React, { createContext } from 'react';\n    const { Provider, Consumer } = createContext();\n    ```", "```js\n    export const UserProvider = ({ children }) => {\n      const user = {\n        username: \"Test User\",\n        avatar: \"/uploads/avatar1.png\"\n      };\n      return (\n        <Provider value={user}>\n          {children}\n        </Provider>\n      );\n    }\n    ```", "```js\n    export const UserConsumer = ({ children }) => {\n      return (\n        <Consumer>\n          {user => React.Children.map(children,\n            function(child){\n            return React.cloneElement(child, { user });\n          })}\n        </Consumer>\n      )\n    }\n    ```", "```js\nimport { UserProvider } from './components/context/user';\n```", "```js\n<UserProvider>\n  <Bar />\n  <Feed />\n  <Chats />\n</UserProvider>\n```", "```js\nimport React from 'react';\nconst UserBar = ({ user }) => {\n  if(!user) return null;\n  return (\n    <div className=\"user\">\n      <img src={user.avatar} />\n      <span>{user.username}</span>\n    </div>\n  );\n}\nexport default UserBar\n```", "```js\n<UserConsumer>\n  <UserBar />\n</UserConsumer>\n```", "```js\nimport UserBar from './user';\nimport { UserConsumer } from '../context/user';\n```", "```js\nimport React from 'react';\nimport { ApolloConsumer } from '@apollo/client';\nexport const UserConsumer = ({ children }) => {\n  return (\n    <ApolloConsumer>\n      {client => {\n        // Use client.readQuery to get the current logged \n        // in user.\n        const user = {\n          username: \"Test User\",\n          avatar: \"/uploads/avatar1.png\"\n        };\n        return React.Children.map(children,\n          function(child){\n          return React.cloneElement(child, { user });\n        });\n      }}\n    </ApolloConsumer>\n  )\n}\n```", "```js\n    npm install --save-dev react-styleguidist\n    ```", "```js\nconst path = require('path')\nmodule.exports = {\n  components: 'src/client/components/**/*.js',\n  require: [\n    path.join(__dirname, 'assets/css/style.css')\n  ],\n  webpackConfig: require('./webpack.client.config')\n}\n```", "```js\nnpx styleguidist build\n```", "```js\nnpx styleguidist server\n```", "```js\nnpm install --save prop-types\n```", "```js\nimport PropTypes from 'prop-types';\n```", "```js\nPost.propTypes = {\n  /** Object containing the complete post. */\n  post: PropTypes.object.isRequired,\n}\n```", "```js\nPost.propTypes = {\n  /** Object containing the complete post. */\n  post: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    text: PropTypes.string.isRequired,\n    user: PropTypes.shape({\n      avatar: PropTypes.string.isRequired,\n      username: PropTypes.string.isRequired,\n    }).isRequired\n  }).isRequired,\n}\n```", "```js\nPost example:\n'''js\n  const post = {\n    id: 3,\n    text: \"This is a test post!\",\n    user: {\n      avatar: \"/uploads/avatar1.png\",\n      username: \"Test User\"\n    }\n  };\n  <Post key={post.id} post={post} />\n'''\n```", "```js\n    mkdir src/client/styleguide/\n    ```", "```js\n    import React from 'react';\n    import client from '../apollo';\n    import { ApolloProvider } from '@apollo/client/react';\n    const Wrapper = ({ children }) => {\n      return (\n        <ApolloProvider client={client}>\n          {children}\n        </ApolloProvider>\n      );\n    }\n    export default Wrapper\n    ```", "```js\n    styleguideComponents: {\n         Wrapper: path.join(__dirname,\n           'src/client/styleguide/Wrapper')\n    },\n    ```"]