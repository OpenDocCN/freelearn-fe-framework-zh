["```js\ngit clone https://github.com/PacktPublishing/ReasonML-Quick-Start-Guide.git\ncd ReasonML-Quick-Start-Guide\ncd Chapter07/app-start\nnpm install\n```", "```js\n/* bsconfig.json */\n...\n\"sources\": {\n  \"dir\": \"src\",\n  \"subdirs\": true\n},\n...\n```", "```js\n/* Router.re */\nlet routes = [\n  ...\n  {href: \"/customers\", title: \"Customer List\", component: <CustomerList />}\n  ...\n];\n```", "```js\n/* Router.re */\nlet routes = [\n  ...\n  {href: \"/customers/create\", title: \"Create Customer\", component: <Customer />,},\n  {href: \"/customers/:id\", title: \"Update Customer\", component: <Customer />}\n  ...\n];\n```", "```js\n/* App.re */\nrender: self =>\n  ...\n  <ul>\n    <li>\n      <NavLink href=\"/customers\">\n        {ReasonReact.string(\"Customers\")}\n      </NavLink>\n    </li>\n  ...\n```", "```js\n/* CustomerType.re */\ntype address = {\n  street: string,\n  city: string,\n  state: string,\n  zip: string,\n};\n\ntype t = {\n  id: int,\n  name: string,\n  address,\n  phone: string,\n  email: string,\n};\n```", "```js\nlet component = ReasonReact.statelessComponent(\"CustomerList\");\n\nlet customers: array(CustomerType.t) = [\n  {\n    id: 1,\n    name: \"Christina Langworth\",\n    address: {\n      street: \"81 Casey Stravenue\",\n      city: \"Beattyview\",\n      state: \"TX\",\n      zip: \"57918\",\n    },\n    phone: \"877-549-1362\",\n    email: \"Christina.Langworth@gmail.com\",\n  },\n  ...\n];\n\nmodule Styles = {\n  open Css;\n\n  let list =\n    style([\n      ...\n    ]);\n};\n\nlet make = _children => {\n  ...component,\n  render: _self =>\n    <div>\n      <ul className=Styles.list>\n        {\n          ReasonReact.array(\n            Belt.Array.map(customers, customer =>\n              <li key={string_of_int(customer.id)}>\n                <Link href={\"/customers/\" ++ string_of_int(customer.id)}>\n                  <p> {ReasonReact.string(customer.name)} </p>\n                  <p> {ReasonReact.string(customer.address.street)} </p>\n                  <p> {ReasonReact.string(customer.phone)} </p>\n                  <p> {ReasonReact.string(customer.email)} </p>\n                </Link>\n              </li>\n            )\n          )\n        }\n      </ul>\n    </div>,\n};\n```", "```js\n/* Customer.re */\n[@bs.val] external pathname: string = \"window.location.pathname\";\n\ntype mode =\n  | Create\n  | Update;\n\ntype state = {\n  mode,\n  customer: CustomerType.t,\n};\n\ntype action =\n  | Save(ReactEvent.Form.t);\n\nlet component = ReasonReact.reducerComponent(\"Customer\");\n```", "```js\n/* Customer.re */\nmodule Styles = {\n  open Css;\n\n  let form =\n    style([\n      ...\n    ]);\n};\nChapter07/app-end/src/customers/Customer.re:\n```", "```js\n/* Customer.re */\nlet customers: array(CustomerType.t) = [|\n  {\n    id: 1,\n    name: \"Christina Langworth\",\n    address: {\n      street: \"81 Casey Stravenue\",\n      city: \"Beattyview\",\n      state: \"TX\",\n      zip: \"57918\",\n    },\n    phone: \"877-549-1362\",\n    email: \"Christina.Langworth@gmail.com\",\n  },\n  ...\n|];\n```", "```js\nlet getId = pathname =>\n  try (Js.String.replaceByRe([%bs.re \"/\\\\D/g\"], \"\", pathname)->int_of_string) {\n  | _ => (-1)\n  };\n\nlet getCustomer = customers => {\n  let id = getId(pathname);\n  customers |> Js.Array.find(customer => customer.CustomerType.id == id);\n};\n\nlet getDefault = customers: CustomerType.t => {\n  id: Belt.Array.length(customers) + 1,\n  name: \"\",\n  address: {\n    street: \"\",\n    city: \"\",\n    state: \"\",\n    zip: \"\",\n  },\n  phone: \"\",\n  email: \"\",\n};\n```", "```js\nlet make = _children => {\n  ...component,\n  initialState: () => {\n    let mode = Js.String.includes(\"create\", pathname) ? Create : Update;\n    {\n      mode,\n      customer:\n        switch (mode) {\n        | Create => getDefault(customers)\n        | Update =>\n          Belt.Option.getWithDefault(\n            getCustomer(customers),\n            getDefault(customers),\n          )\n        },\n    };\n  },\n  reducer: (action, state) =>\n    switch (action) {\n    | Save(event) =>\n      ReactEvent.Form.preventDefault(event);\n      ReasonReact.Update(state);\n    },\n  render: self =>\n    <form\n      className=Styles.form\n      onSubmit={\n        event => {\n          ReactEvent.Form.persist(event);\n          self.send(Save(event));\n        }\n      }>\n      <label>\n        {ReasonReact.string(\"Name\")}\n        <input type_=\"text\" defaultValue={self.state.customer.name} />\n      </label>\n      <label>\n        {ReasonReact.string(\"Street Address\")}\n        <input\n          type_=\"text\"\n          defaultValue={self.state.customer.address.street}\n        />\n      </label>\n      <label>\n        {ReasonReact.string(\"City\")}\n        <input type_=\"text\" defaultValue={self.state.customer.address.city} />\n      </label>\n      <label>\n        {ReasonReact.string(\"State\")}\n        <input type_=\"text\" defaultValue={self.state.customer.address.state} />\n      </label>\n      <label>\n        {ReasonReact.string(\"Zip\")}\n        <input type_=\"text\" defaultValue={self.state.customer.address.zip} />\n      </label>\n      <label>\n        {ReasonReact.string(\"Phone\")}\n        <input type_=\"text\" defaultValue={self.state.customer.phone} />\n      </label>\n      <label>\n        {ReasonReact.string(\"Email\")}\n        <input type_=\"text\" defaultValue={self.state.customer.email} />\n      </label>\n      <input\n        type_=\"submit\"\n        value={\n          switch (self.state.mode) {\n          | Create => \"Create\"\n          | Update => \"Update\"\n          }\n        }\n      />\n    </form>,\n};\n```", "```js\n[@bs.val] [@bs.scope \"localStorage\"] external getItem: string => string = \"\";\n[@bs.val] [@bs.scope \"localStorage\"]\nexternal setItem: (string, string) => unit = \"\";\n```", "```js\ntype tagged_t =\n  | JSONFalse\n  | JSONTrue\n  | JSONNull\n  | JSONString(string)\n  | JSONNumber(float)\n  | JSONObject(Js_dict.t(t))\n  | JSONArray(array(t));\n```", "```js\nlet unvalidated = DataPureReason.getItem(\"customers\");\n```", "```js\nlet validated =\n  try (Js.Json.parseExn(unvalidated)) {\n  | _ => failwith(\"Error parsing JSON string\")\n  };\n```", "```js\n[\n  {\n    \"id\": 1,\n    \"name\": \"Christina Langworth\",\n    \"address\": {\n      \"street\": \"81 Casey Stravenue\",\n      \"city\": \"Beattyview\",\n      \"state\": \"TX\",\n      \"zip\": \"57918\"\n    },\n    \"phone\": \"877-549-1362\",\n    \"email\": \"Christina.Langworth@gmail.com\"\n  },\n  {\n    \"id\": 2,\n    \"name\": \"Victor Tillman\",\n    \"address\": {\n      \"street\": \"2811 Toby Gardens\",\n      \"city\": \"West Enrique\",\n      \"state\": \"NV\",\n      \"zip\": \"40465\"\n    },\n    \"phone\": \"(502) 091-2292\",\n    \"email\": \"Victor.Tillman30@gmail.com\"\n  }\n]\n```", "```js\nswitch (Js.Json.classify(validated)) {\n| Js.Json.JSONArray(array) =>\n  Belt.Array.map(array, customer => ...)\n| _ => failwith(\"Expected an array\")\n};\n```", "```js\nswitch (Js.Json.classify(validated)) {\n| Js.Json.JSONArray(array) =>\n  Belt.Array.map(array, customer => parseCustomer(customer))\n| _ => failwith(\"Expected an array\")\n};\n\nlet parseCustomer = json =>\n  switch (Js.Json.classify(json)) {\n  | Js.Json.JSONObject(json) => (\n      ...\n    )\n  | _ => failwith(\"Expected an object\")\n  };\n```", "```js\nlet parseCustomer = json =>\n  switch (Js.Json.classify(json)) {\n  | Js.Json.JSONObject(json) => (\n      {\n        id: ...,\n        name: ...,\n        address: ...,\n        phone: ...,\n        email: ...,\n      }: CustomerType.t\n    )\n  | _ => failwith(\"Expected an object\")\n  };\n```", "```js\nlet parseCustomer = json =>\n  switch (Js.Json.classify(json)) {\n  | Js.Json.JSONObject(json) => (\n      {\n        id:\n          switch (Js.Dict.get(json, \"id\")) {\n          | Some(id) =>\n            switch (Js.Json.classify(id)) {\n            | Js.Json.JSONNumber(id) => int_of_float(id)\n            | _ => failwith(\"Field 'id' should be a number\")\n            }\n          | None => failwith(\"Missing field: id\")\n          },\n        name:\n          switch (Js.Dict.get(json, \"name\")) {\n          | Some(name) =>\n            switch (Js.Json.classify(name)) {\n            | Js.Json.JSONString(name) => name\n            | _ => failwith(\"Field 'name' should be a string\")\n            }\n          | None => failwith(\"Missing field: name\")\n          },\n        address:\n          switch (Js.Dict.get(json, \"address\")) {\n          | Some(address) =>\n            switch (Js.Json.classify(address)) {\n            | Js.Json.JSONObject(address) => {\n                street:\n                  switch (Js.Dict.get(address, \"street\")) {\n                  | Some(street) =>\n                    switch (Js.Json.classify(street)) {\n                    | Js.Json.JSONString(street) => street\n                    | _ => failwith(\"Field 'street' should be a string\")\n                    }\n                  | None => failwith(\"Missing field: street\")\n                  },\n                city: ...,\n                state: ...,\n                zip: ...,\n              }\n            | _ => failwith(\"Field 'address' should be a object\")\n            }\n          | None => failwith(\"Missing field: address\")\n          },\n        phone: ...,\n        email: ...,\n      }: CustomerType.t\n    )\n  | _ => failwith(\"Expected an object\")\n  };\n```", "```js\nlet customers =\n  DataBsJson.(parse(getItem(\"customers\")));\n```", "```js\n/* DataPureReason.rei */\nlet parse: string => array(CustomerType.t);\nlet toJson: array(CustomerType.t) => string;\n```", "```js\n/* DataPureReason.re */\nlet customerToJson = (customer: CustomerType.t) => {\n  let id = customer.id;\n  let name = customer.name;\n  let street = customer.address.street;\n  let city = customer.address.city;\n  let state = customer.address.state;\n  let zip = customer.address.zip;\n  let phone = customer.phone;\n  let email = customer.email;\n\n  {j|\n    {\n      \"id\": $id,\n      \"name\": \"$name\",\n      \"address\": {\n        \"street\": \"$street\",\n        \"city\": \"$city\",\n        \"state\": \"$state\",\n        \"zip\": \"$zip\"\n      },\n      \"phone\": \"$phone\",\n      \"email\": \"$email\"\n    }\n  |j};\n};\n\nlet toJson = (customers: array(CustomerType.t)) =>\n  Belt.Array.map(customers, customer => customerToJson(customer))\n  ->Belt.Array.reduce(\"[\", (acc, customer) => acc ++ customer ++ \",\")\n  ->Js.String.replaceByRe([%bs.re \"/,$/\"], \"\", _)\n  ++ \"]\"\n     ->Js.String.split(\"/n\", _)\n     ->Js.Array.map(line => Js.String.trim(line), _)\n     ->Js.Array.joinWith(\"\", _);\n```", "```js\nreducer: (action, state) =>\n  switch (action) {\n  | Save(event) =>\n    let getInputValue: string => string = [%raw\n      (selector => \"return document.querySelector(selector).value\")\n    ];\n    ReactEvent.Form.preventDefault(event);\n    ReasonReact.UpdateWithSideEffects(\n      {\n        ...state,\n        customer: {\n          id: state.customer.id,\n          name: getInputValue(\"input[name=name]\"),\n          address: {\n            street: getInputValue(\"input[name=street]\"),\n            city: getInputValue(\"input[name=city]\"),\n            state: getInputValue(\"input[name=state]\"),\n            zip: getInputValue(\"input[name=zip]\"),\n          },\n          phone: getInputValue(\"input[name=phone]\"),\n          email: getInputValue(\"input[name=email]\"),\n        },\n      },\n      (\n        self => {\n          let customers =\n            switch (self.state.mode) {\n            | Create =>\n              Belt.Array.concat(customers, [|self.state.customer|])\n            | Update =>\n              Belt.Array.setExn(\n                customers,\n                Js.Array.findIndex(\n                  customer =>\n                    customer.CustomerType.id == self.state.customer.id,\n                  customers,\n                ),\n                self.state.customer,\n              );\n              customers;\n            };\n\n          let json = customers->DataPureReason.toJson;\n          DataPureReason.setItem(\"customers\", json);\n        }\n      ),\n    );\n  },\n```", "```js\n/* DataBsJson.rei */\n[@bs.val] [@bs.scope \"localStorage\"] external getItem: string => string = \"\";\n[@bs.val] [@bs.scope \"localStorage\"]\nexternal setItem: (string, string) => unit = \"\";\n\nlet parse: string => array(CustomerType.t);\nlet toJson: array(CustomerType.t) => string;\n```", "```js\nlet parse = json =>\n  json |> Json.parseOrRaise |> Json.Decode.array(customerDecoder);\n```", "```js\nlet customerDecoder = json =>\n  Json.Decode.(\n    (\n      {\n        id: json |> field(\"id\", int),\n        name: json |> field(\"name\", string),\n        address: json |> field(\"address\", addressDecoder),\n        phone: json |> field(\"phone\", string),\n        email: json |> field(\"email\", string),\n      }: CustomerType.t\n    )\n  );\n```", "```js\nlet addressDecoder = json =>\n  Json.Decode.(\n    (\n      {\n        street: json |> field(\"street\", string),\n        city: json |> field(\"city\", string),\n        state: json |> field(\"state\", string),\n        zip: json |> field(\"zip\", string),\n      }: CustomerType.address\n    )\n  );\n```", "```js\nlet toJson = (customers: array(CustomerType.t)) =>\n  customers->Belt.Array.map(customer =>\n    Json.Encode.(\n      object_([\n        (\"id\", int(customer.id)),\n        (\"name\", string(customer.name)),\n        (\n          \"address\",\n          object_([\n            (\"street\", string(customer.address.street)),\n            (\"city\", string(customer.address.city)),\n            (\"state\", string(customer.address.state)),\n            (\"zip\", string(customer.address.zip)),\n          ]),\n        ),\n        (\"phone\", string(customer.phone)),\n        (\"email\", string(customer.email)),\n      ])\n    )\n  )\n  |> Json.Encode.jsonArray\n  |> Json.stringify;\n```"]