- en: '3'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Magic of Dependency Injection in Angular
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter is all about the magic of **Dependency Injection** (**DI**) in
    Angular. Here, you’ll learn some detailed information about the concept of DI
    in Angular. DI is the process that Angular uses to inject different dependencies
    into components, directives, and services. You’ll work with several examples,
    using services and providers to get some hands-on experience that you can utilize
    in your later Angular projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’re going to cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Using Angular DI tokens
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optional dependencies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a singleton service using `providedIn`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a singleton service using `forRoot()`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Providing alternate classes against the same DI token
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dynamic configurations using value providers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For the recipes in this chapter, ensure your setup is complete as per the ''Technical
    Requirements'' in the ''Angular-Cookbook-2E'' GitHub repository. For setup details,
    visit: [https://github.com/PacktPublishing/Angular-Cookbook-2E/tree/main/docs/technical-requirements.md](https://github.com/PacktPublishing/Angular-Cookbook-2E/tree/main/docs/technical-requirements.md).
    The starter code for this chapter is located at [https://github.com/PacktPublishing/Angular-Cookbook-2E/tree/main/start/apps/chapter03](https://github.com/PacktPublishing/Angular-Cookbook-2E/tree/main/start/apps/chapter03).'
  prefs: []
  type: TYPE_NORMAL
- en: Using Angular DI tokens
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you’ll learn how to create a basic DI token. We will create
    it for a regular TypeScript class, to be used as an Angular service using DI.
    We have a class named `Jokes` in our application, which is used in the `AppComponent`
    by manually creating a new instance of the class. This makes our code tightly
    coupled and hard to test, since the `AppComponent` class directly uses the `Jokes`
    class.
  prefs: []
  type: TYPE_NORMAL
- en: In other words, when running the tests for the `App` component, we now rely
    on the `Jokes` class, and if something changes in that class, our test will break.
    Since Angular is all about **DI** and **services**, we’ll use a DI token to use
    the `Jokes` class as an Angular service. We’ll use the `InjectionToken` method
    to create a DI token, and then the `@Inject` decorator to enable us to use the
    class in our service.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The app that we are going to work with resides in `start/apps/chapter03/ng-di-token`
    inside the cloned repository:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the code repository in your code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the terminal, navigate to the code repository directory, and run the following
    command to serve the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This should open the app in a new browser tab, and you should see the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B18469_03_01.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 3.1: The ng-di-token app running on http://localhost:4200'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that we have the app running, we can move on to the steps for the recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The app we have right now shows a greeting message to a random user that has
    been retrieved from a TypeScript class, named `Jokes`. We create an instance of
    the `Jokes` class in the `AppComponent` class by using the statement `jokes =
    new Jokes();`. However, Angular has a built-in way of using classes as services
    using DI. So instead of using it as a class, we will use it as an Angular service
    using DI. We will start by creating an `InjectionToken` for our `Jokes` class,
    and then we will inject it into our `AppComponent` class. Perform these steps
    to follow along:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll create an `InjectionToken` in the `jokes.class.ts` file. We will name
    the token `''Jokes''`, using a new `InjectionToken` instance. Finally, we will
    export this token from the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we’ll use the `inject` method from the `@angular/core` package and the
    `JOKES` token from the `jokes.class.ts` file in order to use the class, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: And that is it. You should see the app works the same as before. The only difference
    is that instead of instantiating the instance of the `Jokes` class manually ourselves,
    we are relying on the injection token to instantiate it. This not only comes with
    the ease of not having to create instances, but if the `Jokes` class uses other
    classes as dependencies via Angular DI and any of those are missing, we will get
    the appropriate errors to fix the issues. As a result, we have a more robust architecture
    of our services and components, which ensures the dependencies are met before
    our application is run/built. Now that we know the recipe, let us take a closer
    look at how it works.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Angular does not recognize regular TypeScript classes as injectables. However,
    we can create our own injection tokens and use the `inject` method from the `@angular/core`
    package to inject the relevant classes and values wherever necessary. Angular
    recognizes these tokens behind the scenes and finds their corresponding definition,
    which is usually in the form of a `factory` function. Notice that we are using
    `providedIn: ''root''` within the token definition. This means there will be only
    one instance of the class in the entire application.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: DI in Angular ([https://angular.io/guide/dependency-injection](https://angular.io/guide/dependency-injection))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`InjectionToken` documentation ([https://angular.io/api/core/InjectionToken](https://angular.io/api/core/InjectionToken))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optional dependencies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Optional dependencies in Angular are powerful when you use or configure a dependency
    that may or may not exist or has not been provided within an Angular application.
    In this recipe, we will learn how to use the `@Optional` decorator to configure
    optional dependencies in our components and services. We will work with `LoggerService`
    and ensure our components do not break if they have not already been provided
    with the `LoggerService`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The app that we are going to work with resides in `start/apps/chapter03/ng-optional-dependencies`
    inside the cloned repository:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the code repository in your code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the terminal, navigate to the code repository directory, and run the following
    command to serve the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This should open the app in a new browser tab, and you should see the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B18469_03_02.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 3.2: The ng-optional-dependencies app running on http://localhost:4200'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that we have the app running, we can move on to the steps for the recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We’ll have an app containing a `LoggerService`, which is provided using `providedIn:
    ''root''` as its injectable configuration. We’ll see what happens when we don’t
    provide this service anywhere. Then, we’ll identify and fix the issues using the
    `@Optional` decorator. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: First, let’s run the app, enter a new version number, `0.0.1`, and hit the **Submit**
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This will result in the logs being saved in `localStorage` via `LoggerService`.
    Open **Chrome Dev Tools**, navigate to **Application**, select **Local Storage**,
    and then click on `http://localhost:4200`. You will see the key `vc_logs_ng_od`
    with log values, as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B18469_03_03.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 3.3: The logs are saved in localStorage for http://localhost:4200'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let’s try to remove the configuration provided in the `@Injectable` decorator
    for `LoggerService`, in the `logger.service.ts` file. The change should be as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will result in Angular not being able to recognize it and throwing an
    error in the console, as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B18469_03_04.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 3.4: An error reflecting that Angular doesn’t recognize the LoggerService'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We can now use the `@Optional` decorator to mark the dependency as optional.
    Let’s import it from the `@angular/core` package and use the decorator in the
    constructor of `VcLogsComponent`, in the `vc-logs.component.ts` file, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Great! Now, if you refresh the app and view the console, there should be a different
    error. Yay, progress!
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*Figure 3.5* shows that we have a new error because we’re trying to call the
    `this.logger.log()` statement inside the `ngOnChanges` method.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B18469_03_05.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 3.5: An error detailing that this.logger is essentially null now'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To fix this issue, we can either decide not to log anything at all, or we can
    fall back to the `console.*` methods if `LoggerService` is not provided. The code
    falls back to the `console.*` method is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let’s also update the ngOnChanges block to use this log (getter) function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, if you update the version and hit **Submit**, you should see the logs on
    the console, as follows:![](img/B18469_03_06.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 3.6: The logs being printed on the console as a fallback to LoggerService
    not being provided'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Great! We’ve finished the recipe, and everything looks great. Please refer to
    the next section to understand how it works.
  prefs: []
  type: TYPE_NORMAL
- en: How it works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `@Optional` decorator is a special one from the `@angular/core` package,
    which allows you to mark a dependency as optional. Behind the scenes, when used
    in the constructor method of a class with a dependency, Angular will provide the
    value as `null` when the dependency doesn’t exist or is not provided to the app.
    Since we remove the configuration object from the `@Injectable()` decorator from
    the `LoggerService` class, it isn’t provided in Angular for DI. As a result, our
    `@Optional()` decorator makes it `null` when injected and doesn’t cause Angular
    to throw the `NullInjectorError` shown in *Figure 3.4*. In *step 4*, we create
    a `log` getter function in our component’s class `VcLogsComponent`, so we can
    use the `LoggerService`''s method named `log` when the service is provided; and
    `console.log` otherwise. Then, in the following steps, we just use the `log` method
    we created. If you go back to the `logger.service.ts` file and provide the service
    as `providedIn: ''root''` again, you won’t see any console logs now and will see
    that now the app uses the service, i.e., the `LoggerService` that uses the `localStorage`.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Optional dependencies in Angular ([https://angular.io/guide/dependency-injection#optional-dependencies](https://angular.io/guide/dependency-injection#optional-dependencies))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hierarchical injectors in Angular ([https://angular.io/guide/hierarchical-dependency-injection](https://angular.io/guide/hierarchical-dependency-injection))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a singleton service using providedIn
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, you’ll learn several tips on how to ensure your Angular service
    is being used as a singleton. This means that there will only be one instance
    of your service in the entire application. We’ll use a couple of techniques, including
    the `providedIn: ''root''` statement, making sure we only provide the service
    once in the entire app by using the `@Optional()` and `@SkipSelf()` decorators.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The app that we are going to work with resides in `start/apps/chapter03/ng-singleton-service`
    inside the cloned repository:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the code repository in your code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the terminal, navigate to the code repository directory, and run the following
    command to serve the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This should open the app in a new browser tab, and you should see the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B18469_03_07.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 3.7: The ng-singleton-service app running on http://localhost:4200'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that we have the app running, we can move on to the steps for the recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The problem with the app is that if you add or remove any notifications, the
    count on the bell icon in the header does not change. That’s due to us having
    multiple instances of `NotificationsService` provided in the `AppModule` and `HomeModule`
    classes. Please refer to the following steps to ensure we only have a single instance
    of the service in the app:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use `providedIn: ''root''` for the `NotificationService` to tell Angular
    that it is only provided in the root module, and it should only have one instance
    in the entire app. So, let’s go to `notifications.service.ts` and pass `providedIn:
    ''root''` in the `@Injectable` decorator parameters, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Great! Now, even if you refresh and try adding or removing notifications, you’ll
    still see that the count in the header doesn’t change. *“But why is this, Ahsan?”*
    Well, I’m glad you asked. It’s because we’re still providing the service in `AppModule`
    as well as in `HomeModule` classes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'First, let’s remove `NotificationsService` from the `providers` array in `app.module.ts`,
    as highlighted in the following code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we’ll remove `NotificationsService` from `home.module.ts`, as highlighted
    in the following code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Awesome! Now, you should be able to see the count in the header change according
    to whether you add/remove notifications. However, what happens if someone still
    provides it in another lazily loaded module by mistake?
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let’s put `NotificationsService` back in the `home.module.ts` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Boom! We don’t have any errors on the console or during compile time. However,
    we do have the issue of the count not updating in the header. So, how do we alert
    the developers if they make such a mistake?
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In order to alert the developer about potential duplicate providers, we will
    use the `@SkipSelf` decorator from the `@angular/core` package in our `NotificationsService`,
    and throw an error to notify and modify `NotificationsService`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With the previous step now complete, you’ll notice that we have a problem,
    which is that we have failed to provide `NotificationsService` to our app. You
    should see this in the console:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B18469_03_08.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 3.8: An error detailing that NotificationsService can’t be injected
    into NotificationsService'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The reason for this is that `NotificationsService` is now a dependency of `NotificationsService`
    itself. This can’t work as it has not already been resolved by Angular. To fix
    this, we’ll also use the `@Optional()` decorator in the next step.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'All right – now, we’ll use the `@Optional()` decorator in `notifications.service.ts,`
    which is in the constructor for the dependency alongside the `@SkipSelf` decorator.
    The code should appear as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We have now fixed the `NotificationsService` -> `NotificationsService` dependency
    issue. You should see the proper error for the `NotificationsService` being provided
    multiple times in the console, as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B18469_03_09.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 3.9: An error detailing that NotificationsService is already provided
    in the app'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, we’ll safely remove the provided `NotificationsService` from the `providers`
    array in the `home.module.ts` file, as shown in *step 3*, and check whether the
    app is working correctly
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Bam! We now have a singleton service using the `providedIn` strategy. In the
    next section, let’s discuss how it works.
  prefs: []
  type: TYPE_NORMAL
- en: How it works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Whenever we try to inject a service somewhere, by default, it tries to find
    a service inside the associated module of where you’re injecting the service.
    When we use `providedIn: ''root''` to declare a service, whenever the service
    is injected anywhere in the app, Angular knows that it simply must find the service
    definition in the root scope, instead of trying to find it in the feature modules
    or anywhere else.'
  prefs: []
  type: TYPE_NORMAL
- en: 'However, you must make sure that the service is only provided once in the entire
    application. If you provide it in multiple modules, then even with `providedIn:
    ''root''`, you’ll have multiple instances of the service. To avoid providing a
    service in multiple modules or multiple places in the app, we can use the `@SkipSelf()`
    decorator with the `@Optional()` decorator in the services’ constructor to check
    whether the service has already been provided in the app.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Hierarchical DI in Angular ([https://angular.io/guide/hierarchical-dependency-injection](https://angular.io/guide/hierarchical-dependency-injection))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a singleton service using forRoot()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you’ll learn how to use `ModuleWithProviders` and the `forRoot()`
    statement to ensure your Angular service is used as a singleton in the entire
    app. We’ll start with an app that has multiple instances of `NotificationsService`,
    and we’ll implement the necessary code to make sure we end up with a single instance
    of the service in our application.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The app that we are going to work with resides in `start/apps/chapter03/ng-singleton-service-forroot`,
    inside the cloned repository:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the code repository in your code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the Terminal, navigate to the code repository directory, and run the following
    command to serve the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This should open the app in a new browser tab, and you should see the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B18469_03_10.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 3.10: The ng-singleton-service-forroot app running on http://localhost:4200'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that we have the app running, in the next section, we can move on to the
    steps for the recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to make sure you only have a singleton service in the app with the
    `forRoot` method, you need to understand how `ModuleWithProviders` and the `static
    forRoot()` method are created and implemented. Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we’ll make sure that the service has its own module. In many Angular
    applications, you’ll probably see `CoreModule` where the services are provided
    (given we’re not using the `providedIn: ''root''` syntax for some reason). To
    begin, we’ll create a module, named `ServicesModule`, using the following command
    from the project root:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let’s create a static method `forRoot()` inside the `ServicesModule` class
    in the `services.module.ts` file. We’ll name the method `forRoot` and return a
    `ModuleWithProviders` object that contains the `NotificationsService`, provided
    in the `providers` array, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, we’ll remove the `NotificationsService` from the `app.module.ts` file’s
    `providers` array and include `ServicesModule` in the `app.module.ts` file. In
    particular, we’ll add `ServicesModule` in the `imports` array using the `forRoot()`
    method, as highlighted in the following code block.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This is because it injects `ServicesModule` with the providers in `AppModule`,
    for instance, with the `NotificationsService` being provided, as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You’ll notice that when adding/removing notifications, the count in the header
    still doesn’t change. This is because we’re still providing the `NotificationsService`
    in the `home.module.ts` file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We’ll remove the `NotificationsService` from the `providers` array in the `home.module.ts`
    file, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Great job. Now that we have finished the recipe, in the next section, let’s
    discuss how it works.
  prefs: []
  type: TYPE_NORMAL
- en: How it works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`ModuleWithProviders` acts as a wrapper for an `NgModule`, bundling it with
    a `providers` array. It’s used to configure an `NgModule` along with its providers,
    ensuring that when the module is imported elsewhere, it brings along its providers,
    too. In our `ServicesModule`, we’ve created a `forRoot` method that returns a
    `ModuleWithProviders`. It includes our `NotificationsService`, which allows us
    to have a single instance of this service throughout the app, avoiding multiple
    instances that would normally occur if `NotificationsService` was provided in
    the `providers` array of `ServicesModule` and imported into various modules. Therefore,
    to ensure a single instance, `ServicesModule` should be imported using the `ModuleWithProviders`
    approach, not in the standard way. That is why when using the `ModuleWithProviders`
    approach, we don’t import the `ServicesModule` in the regular way, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Instead, we import it using the `forRoot` method which ensures the `NotificationService`
    is only provided once in the entire app as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Now that you understand how the recipe works, see the next section for some
    useful links.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `ModuleWithProviders` Angular documentation ([https://angular.io/api/core/ModuleWithProviders](https://angular.io/api/core/ModuleWithProviders))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `ModuleWithProviders` migration documentation ([https://angular.io/guide/migration-module-with-providers%20](https://angular.io/guide/migration-module-with-providers%20))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Providing alternate classes against the same DI Token
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you’ll learn how to provide two different services to the app
    using **Aliased class providers**. This is extremely helpful in complex applications
    where you need to narrow down the implementation of the service/class for some
    components/modules, that is, providing different classes against the same DI token
    to have a polymorphic behavior. Additionally, aliasing is used in component/service
    unit tests to mock the dependent service’s actual implementation so that we don’t
    rely on it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The app that we are going to work with resides in `start/apps/chapter03/ng-aliased-class-providers`,
    inside the cloned repository:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the code repository in your code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the Terminal, navigate to the code repository directory, and run the following
    command to serve the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This should open the app in a new browser tab, and you should see the app as
    shown in *Figure 3.11*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on the **Login as Admin** button. You should see something similar to
    the following screenshot:![](img/B18469_03_11.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 3.11: The ng-aliased-class-providers app running on http://localhost:4200'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that we have the app running, let’s move to the next section to follow the
    steps for the recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have a standalone component named `BucketComponent`, which is being used
    in both the admin and employee components. `BucketComponent` uses `BucketService`
    behind the scenes to add/remove items from and to a bucket. For the employee,
    we’ll restrict the ability to remove an item by providing an `aliased` class provider
    and a replacement of `BucketService` named `EmployeeBucketService`. This is so
    that we can override the remove item functionality. Perform the following steps
    to get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll start by creating `EmployeeBucketService` within the `employee` folder.
    Run the following command from the workspace root:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we’ll extend `EmployeeBucketService` from `BucketService` so that we
    get all the goodness of the `BucketService` class. Let’s modify the code as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will now override the `removeItem` method to display a simple `alert`, mentioning
    that the employees can’t remove items from the bucket. Your code should appear
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'As a final step, we need to provide the `aliased` class provider to the `employee.component.ts`
    file, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you now log in as an employee in the app and try to remove an item, you’ll
    see an alert pop up, which says `Employees cannot delete items`.
  prefs: []
  type: TYPE_NORMAL
- en: How it works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When we inject a service into a component, Angular tries to find that component
    inside the component/module we’ve provided the dependency for and then by moving
    up the hierarchy of components and modules. Our `BucketService` is provided in
    `''root''`, using the `providedIn: ''root''` syntax. Therefore, it resides at
    the top of the hierarchy. However, since, in this recipe, we use an `aliased`
    class provider in the `EmployeeComponent` class against the DI token `BucketService`,
    when Angular searches for `BucketService` for the `EmployeeComponent`, it quickly
    finds the `EmployeeBucketService` against the token in the `EmployeeComponent`
    and stops there – i.e., it doesn’t reach the “root” to get the actual `BucketService`.
    This is what we intended.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: DI in Angular ([https://angular.io/guide/dependency-injection](https://angular.io/guide/dependency-injection))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hierarchical injectors in Angular ([https://angular.io/guide/hierarchical-dependency-injection](https://angular.io/guide/hierarchical-dependency-injection))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dynamic configurations using value providers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you’ll learn how to use value providers in Angular to provide
    constants and config values to your app. We’ll start with the same example from
    the previous recipe, which involves `EmployeeComponent` and `AdminComponent` using
    the `BucketComponent` to manage a bucket of fruits. We will restrict the `EmployeeComponent`
    from deleting items from the bucket by using the configuration with a value provider.
    As a result, the employees won’t even see the **Delete** button.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The app that we are going to work with resides in `start/apps/chapter03/ng-value-providers`
    inside the cloned repository:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the code repository in your code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the terminal, navigate to the code repository directory, and run the following
    command to serve the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This should open the app in a new browser tab, and you should see the app as
    shown in *Figure 3.12*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on the **Login as Admin** button. You should see something like the following
    screenshot:![](img/B18469_03_12.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 3.12: The ng-value-providers app running on http://localhost:4200'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that you see the app running, let’s look at the next section to follow the
    recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have a standalone component named `BucketComponent`, which is being used
    in both the admin and employee components. `BucketComponent` uses `BucketService`
    behind the scenes to add/remove items from and to a bucket. For the employee,
    we’ll restrict the ability to remove an item by providing a value provider. This
    is so that we can override the remove item functionality. Let’s begin with the
    following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we’ll start by creating the value provider with `InjectionToken` within
    a new file, named `app-config.ts`, in the root of the project. The code should
    appear as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Before we can actually use this `AppConfig` constant in our `BucketComponent`,
    we need to register it to the `AppModule` so that when we inject this in the `BucketComponent`,
    the value of the provider is resolved.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let’s add the provider to the `app.module.ts` file, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, the app knows about the `AppConfig` constants. The next step is to use
    this constant in `BucketComponent`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We’ll use the `inject` method to inject it inside the `BucketComponent` class,
    in the `bucket/bucket.component.ts` file, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Great! The constant has been injected. Now, if you refresh the app, you shouldn’t
    get any errors. The next step is to use the `canDeleteItems` property from `config`
    in `BucketComponent` to show/hide the `delete` button.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, we’ll add an `*ngIf` directive in the `bucket/ bucket.component.html`
    file to only show the `delete` button if the value of `appConfig.canDeleteItems`
    is `true`. Update the element with the `fruites__item__delete-icon` class, as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can test whether everything works by setting the `AppConfig` constant’s
    `canDeleteItems` property to `false`. Note that the **Delete** button is now hidden
    for both the admin and employee. Once tested, set the value of `canDeleteItems`
    back to `true` again.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, we have everything set up. Let’s add a new constant so that we can hide
    the **Delete** button for the employee only.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let’s create an employee configuration object now. We’ll create an `employee.config.ts`
    file inside the `employee` folder, and we will add the following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we’ll provide this `EmployeeConfig` constant to the `EmployeeComponent`
    for the same `APP_CONFIG` injection token. The code in the `employee.component.ts`
    file should look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: And we’re done! The recipe is now complete. You can see that the **Delete**
    button is visible to the admin but hidden for the employee. It’s all thanks to
    the magic of value providers.
  prefs: []
  type: TYPE_NORMAL
- en: How it works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we inject a token into a component, Angular tries to find the resolved
    value of the token in the injected place and then by moving up the hierarchy of
    components and modules. We provided the `EmployeeConfig` object against the `APP_CONFIG`
    token in the `EmployeeComponent` class. When Angular tries to resolve the token’s
    value for `BucketComponent`, it finds it early as `EmployeeConfig`, within the
    `EmployeeComponent` instead of the value provided in the `AppModule` as `AppConfig`.
    Therefore, Angular stops right there and doesn’t reach `AppModule`. This is amazing,
    as we can now have a global configuration and override the configuration within
    nested modules/components.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: DI in Angular ([https://angular.io/guide/dependency-injection](https://angular.io/guide/dependency-injection))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hierarchical injectors in Angular ([https://angular.io/guide/hierarchical-dependency-injection](https://angular.io/guide/hierarchical-dependency-injection))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn more on Discord
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To join the Discord community for this book – where you can share feedback,
    ask questions to the author, and learn about new releases – follow the QR code
    below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/AngularCookbook2e](Chapter_3.xhtml)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/QR_Code1388317275422265.png)'
  prefs: []
  type: TYPE_IMG
