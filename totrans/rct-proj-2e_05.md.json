["```js\nchapter-5-initial\n  |- /node_modules\n  |- /public\n  |- /src\n    |- /components\n       |- /Button\n          |- Button.js\n       |- /FormItem\n          |- FormItem.js\n       |- /Header\n          |- Header.js\n       |- /NavBar\n          |- NavBar.js\n       |- /ListItem\n          |- ListItem.js\n    |- /hooks\n       |- useDataFetching.js\n    |- /pages\n       |- ListDetail.js\n       |- ListForm.js\n       |- Lists.js\n    |- App.js\n    |- index.js\n  package.json\n```", "```js\n    import { createContext } from 'react';\n    import useDataFetching from \n      '../hooks/useDataFetching';\n    export const ListsContext = createContext();\n    export const ListsContextProvider = ({ children }) => {\n      const [loading, error, data] = useDataFetching(\n        'https://my-json-server.typicode.com/\n         PacktPublishing/React-Projects-Second-Edition/\n         lists',\n      );\n\n      return (\n        <ListsContext.Provider value=\n          {{ lists: data, loading, error }}>\n          {children}\n        </ListsContext.Provider>\n      );\n    };\n    export default ListsContext;\n    ```", "```js\n    import styled, { createGlobalStyle } from \n        'styled-components';\n    import { Route, Routes, BrowserRouter } from \n        'react-router-dom';\n    + import { ListsContextProvider } from \n        './context/ListsContext';\n      // ...\n    function App() { \n        return (\n          <>\n           <GlobalStyle />\n           <AppWrapper>\n             <BrowserRouter>\n               <Header />\n    +          <ListsContextProvider>\n                 <Routes>\n                   // ...\n                 </Routes>\n    +          </ListsContextProvider>\n             </BrowserRouter>\n           </AppWrapper>\n         </>\n       );\n      }\n      export default App;\n    ```", "```js\n    + import { useContext } from 'react';\n      import styled from 'styled-components';\n      import { Link, useNavigate } from \n        'react-router-dom';\n    - import useDataFetching from\n        '../hooks/useDataFetching';\n      import NavBar from '../components/NavBar/NavBar';\n    + import ListsContext from '../context/ListsContext';\n      // ...\n      const Lists = () => {\n        let navigate = useNavigate();\n    -   const [loading, error, data] =\n          useDataFetching('https://my-json-server.\n          typicode.com/PacktPublishing/React-Projects-\n          Second-Edition/lists');\n    +   const { loading, error, lists } = \n          useContext(ListsContext);\n      return (\n              <>\n            {navigate && <NavBar title='Your Lists' />}\n            <ListWrapper>\n              {loading || error ? (\n                <span>{error || 'Loading...'}</span>\n              ) : (\n    -           data.map((list) => (\n    +           lists.map((list) => (\n                  <ListLink key={list.id} \n                   to={`list/${list.id}`}>\n                    // ...\n    ```", "```js\n    import { createContext } from 'react';\n    import useDataFetching from \n      '../hooks/useDataFetching';\n    export const ItemsContext = createContext();\n    export const ItemsContextProvider = ({ children }) => {\n      const [loading, error, data] = useDataFetching(\n        'https://my-json-server.typicode.com/\n         PacktPublishing/React-Projects-Second-\n         Edition/items',\n      );\n      return (\n        <ItemsContext.Provider value=\n          {{ items: data, loading, error }}>\n          {children}\n        </ItemsContext.Provider>\n      );\n    };\n    export default ItemsContext;\n    ```", "```js\n      // ...\n      import { ListsContextProvider } from \n        './context/ListsContext';\n    + import { ItemsContextProvider } from \n        './context/ItemsContext';\n      // ...\n\n      function App() { \n        return (\n          <>\n            <GlobalStyle />\n            <AppWrapper>\n              <BrowserRouter>\n                <Header />\n                <ListsContextProvider>\n    +             <ItemsContextProvider>\n                    <Routes>\n                      // ...\n                    </Routes>\n    +             </ItemsContextProvider>\n                </ListsContextProvider>\n              </BrowserRouter>\n            </AppWrapper>\n          </>\n        );\n      }\n      export default App;\n    ```", "```js\n    - import { useState, useEffect } from 'react';\n    + import { useState, useEffect, useContext } from \n        'react';\n      import styled from 'styled-components';\n      import { useNavigate, useParams } from \n        'react-router-dom';\n    - import useDataFetching from \n        '../hooks/useDataFetching';\n      import NavBar from '../components/NavBar/NavBar';\n      import ListItem from\n        '../components/ListItem/ListItem';\n    + import ItemsContext from '../context/ItemsContext';\n      // ...\n      function ListDetail() {\n        let navigate = useNavigate();\n        const { listId } = useParams();\n    -   const [loading, error, data] =\n          useDataFetching('https://my-json-server.\n          typicode.com/PacktPublishing/React-Projects-\n          Second-Edition/items/');\n    +   const { loading, error, items: data } = \n          useContext(ItemsContext);\n        // ...\n    ```", "```js\n    - import { createContext } from 'react';\n    - import useDataFetching from \n        '../hooks/useDataFetching';\n    + import { createContext, useCallback, useState } from\n        'react';\n      export const ItemsContext = createContext();\n      export const ItemsContextProvider = ({ children }) \n        => {\n    -   const [loading, error, data] =\n          useDataFetching('https://my-json-server.\n          typicode.com/PacktPublishing/React-Projects-\n          Second-Edition/items);\n    +   const [loading, setLoading] = useState(true);\n    +   const [items, setItems] = useState([]);\n    +   const [error, setError] = useState('');\n        // ...\n    ```", "```js\n        // ...\n        const [error, setError] = useState('');\n    +   const fetchItems = useCallback(async (listId) => {\n    +     try {\n    +       const data = await fetch(`https://my-json-\n              server.typicode.com/PacktPublishing/\n              React-Projects-Second-Edition/lists/\n              ${listId}/items`);\n    +       const result = await data.json();\n    +       if (result) {\n    +         setItems(result);\n    +         setLoading(false);\n    +       }\n    +     } catch (e) {\n    +       setLoading(false);\n    +       setError(e.message);\n    +     }\n    +   }, [])\n        return (\n    -     <ItemsContext.Provider value={{ data: items,\n            loading, error }}>\n    +     <ItemsContext.Provider value={{ items, loading,\n            error, fetchItems }}>\n          // ...\n    ```", "```js\n    - import { useState, useEffect, useContext } from\n       'react';\n    + import { useEffect, useContext } from 'react';\n      import styled from 'styled-components';\n      // ...\n      function ListDetail() {\n        let navigate = useNavigate();\n        const { listId } = useParams();\n    -   const { loading, error, items: data } =\n          useContext(ItemsContext);\n    +   const { loading, error, items, fetchItems } = \n          useContext(ItemsContext);\n    -   const [items, setItems] = useState([]);\n    -   useEffect(() => {\n    -     data && listId && setItems(data.filter((item) =>\n            item.listId === parseInt(listId)));\n    -   }, [data, listId]);\n    +   useEffect(() => {\n    +     listId && !items.length && fetchItems(listId);\n    +   }, [fetchItems, items, listId]);\n        return (\n          // ...\n    ```", "```js\n    - import { createContext } from 'react';\n    + import { createContext, useCallback, useReducer }\n        from 'react';\n      const ListsContext = createContext();\n    + const initialState = {\n    +   lists: [],\n    +   loading: true,\n    +   error: '',\n    + };\n      // ...\n    ```", "```js\n      import { createContext, useReducer } from 'react';\n      const ListsContext = createContext();\n      // ...\n    + const reducer = (state, action) => {\n    +   switch (action.type) {\n    +     case 'GET_LISTS_SUCCESS':\n    +       return {\n    +         ...state,\n    +         lists: action.payload,\n    +         loading: false,\n    +       };\n    +     case 'GET_LISTS_ERROR':\n    +       return {\n    +         ...state,\n    +         lists: [],\n    +         loading: false,\n    +         error: action.payload,\n    +       };\n    +     default:\n    +       return state;\n    +   }\n    + };\n\n      export const ListsContextProvider = ({ children }) => {\n        // ...\n    ```", "```js\n      // ...\n    const ListsContextProvider = ({ children }) => { \n    -   const [loading, error, data] =\n          useDataFetching('https://my-json-server.\n          typicode.com/PacktPublishing/React-Projects-\n          Second-Edition/lists');\n    +   const [state, dispatch] = \n          useReducer(reducer, initialState);\n      // ...\n    ```", "```js\n      // ...\n      export const ListsContextProvider = ({ children })\n        => {\n        const [state, dispatch] = \n          useReducer(reducer, initialState);\n    +   const fetchLists = useCallback(async () => {\n    +     try {\n    +       const data = await fetch(`https://my-json-\n              server.typicode.com/PacktPublishing/React-\n              Projects-Second-Edition/lists`);\n    +       const result = await data.json();\n    +       if (result) {\n    +         dispatch({ type: 'GET_LISTS_SUCCESS', \n                         payload: result });\n    +       }\n    +     } catch (e) {\n    +       dispatch({ type: 'GET_LISTS_ERROR', \n              payload: e.message });\n    +     }\n    +   }, [])\n      return (\n        // ...\n    ```", "```js\n        // ...\n        return (\n    -     <ListsContext.Provider value=\n            {{ loading, error, data: lists }}>\n    +     <ListsContext.Provider value=\n            {{ ...state, fetchLists }}>\n            {children}\n          </ListsContext.Provider>\n        );\n      };\n      export default ListsContext;\n    ```", "```js\n    - import { useContext } from 'react';\n    + import { useContext, useEffect } from 'react';\n      import styled from 'styled-components';\n      import { Link, useNavigate } from \n        'react-router-dom';\n      import NavBar from '../components/NavBar/NavBar';\n      import ListsContext from '../context/ListsContext';\n      // ...\n      function Lists() {\n        let navigate = useNavigate();\n\n    -   const { loading, error, lists } =\n          useContext(ListsContext);\n    +   const { loading, error, lists, fetchLists } = \n          useContext(ListsContext);\n    +   useEffect(() => {\n    +     !lists.length && fetchLists()\n    +   }, [fetchLists, lists])\n        return (\n          // ...\n    ```", "```js\n    - import { createContext, useState } from 'react';\n    + import { createContext, useReducer } from 'react';\n      export const ItemsContext = createContext();\n    + const initialState = {\n    +   items: [],\n    +   loading: true,\n    +   error: '',\n    + };\n    + const reducer = (state, action) => {\n    +   switch (action.type) {\n    +     case 'GET_ITEMS_SUCCESS':\n    +       return {\n    +         ...state,\n    +         items: action.payload,\n    +         loading: false,\n    +       };\n    +     case 'GET_ITEMS_ERROR':\n    +       return {\n    +         ...state,\n    +         items: [],\n    +         loading: false,\n    +         error: action.payload,\n    +       };\n    +     default:\n    +       return state;\n    +   }\n    + };\n      export const ItemsContextProvider = \n        ({ children }) => {\n        // ...\n    ```", "```js\n      // ...\n      export const ItemsContextProvider =\n        ({ children }) => {\n    -   const [loading, setLoading] = useState(true);\n    -   const [items, setItems] = useState([]);\n    -   const [error, setError] = useState('');\n    +   const [state, dispatch] =\n          useReducer(reducer, initialState);\n      const fetchItems = useCallback(async (listId) => {\n        try {\n          const data = await fetch(`https://my-json-\n            server.typicode.com/PacktPublishing/React-\n            Projects-Second-Edition/lists/${listId}/\n            items`);\n          const result = await data.json();\n          if (result) {\n    -       setItems(result);\n    -       setLoading(false);\n    +       dispatch({ type: 'GET_ITEMS_SUCCESS', \n               payload: result });\n          }\n        } catch (e) {\n    -     setLoading(false);\n    -     setError(e.message);\n    +     dispatch({ type: 'GET_ITEMS_ERROR', \n            payload: e.message });\n        }\n      }, [])\n      return (\n        // ...\n    ```", "```js\n        // ...\n        return (\n    -     <ItemsContext.Provider value={{ items, loading, \n            error, fetchItems }}>\n    +     <ItemsContext.Provider value=\n            {{ ...state, fetchItems }}>\n            {children}\n          </ItemsContext.Provider>\n        );\n      };\n      export default ItemsContext;\n    ```", "```js\n      import { createContext, useReducer } from 'react';\n      export const ListsContext = createContext();\n      const initialState = {\n        lists: [],\n    +   list: {},\n        loading: true,\n        error: '',\n      };\n      const reducer = (state, action) => {\n        // ...\n    ```", "```js\n      // ...\n      const reducer = (state, action) => {\n        switch (action.type) {\n          case 'GET_LISTS_SUCCESS':\n             // ...\n          case 'GET_LISTS_ERROR':\n            // ...\n    +     case 'GET_LIST_SUCCESS':\n    +       return {\n    +         ...state,\n    +         list: action.payload,\n    +         loading: false,\n    +       };\n    +     case 'GET_LIST_ERROR':\n    +       return {\n    +         ...state,\n    +         list: {},\n    +         loading: false,\n    +         error: action.payload,\n    +       };\n          default:\n            return state;\n        }\n      };\n      export const ListsContextProvider = \n        ({ children }) => {\n        // ...\n    ```", "```js\n      // ...\n    +   const fetchList = useCallback(async (listId) => {\n    +     try {\n    +       const data = await fetch(`https://my-json-\n              server.typicode.com/PacktPublishing/React-\n              Projects-Second-Edition/lists/${listId}`);\n    +       const result = await data.json();\n    +       if (result) {\n    +         dispatch({ type: 'GET_LIST_SUCCESS',\n                payload: result });\n    +       }\n    +     } catch (e) {\n    +       dispatch({ type: 'GET_LIST_ERROR', \n              payload: e.message });\n    +     }\n    +   }, [])\n        return (\n    -     <ListsContext.Provider value=\n            {{ ...state, fetchLists }}>\n    +     <ListsContext.Provider value=\n            {{ ...state, fetchLists, fetchList }}>\n            {children}\n          </ListsContext.Provider>\n        );\n      };\n      export default ListsContext;\n    ```", "```js\n      import { useEffect, useCallback, useContext } from\n        'react';\n      import styled from 'styled-components';\n      import { useNavigate, useParams } from \n        'react-router-dom';\n      import NavBar from '../components/NavBar/NavBar';\n      import ListItem from\n        '../components/ListItem/ListItem';\n      import ItemsContext from '../context/ItemsContext';\n    + import ListsContext from '../context/ListsContext';\n      // ...\n      function ListDetail() {\n        let navigate = useNavigate();\n        const { listId } = useParams();\n        const { loading, error, items, fetchItems } = \n          useContext(ItemsContext);\n    +   const { list, fetchList } = \n          useContext(ListsContext);\n        useEffect(() => {\n          listId && !items.length && fetchItems(listId);\n        }, [fetchItems, items, listId]);\n    +   useEffect(() => {\n    +     listId && fetchList(listId);\n    +   }, [fetchList, listId]);\n        return (\n          <>\n            {navigate && (\n              <NavBar\n                goBack={() => navigate(-1)}\n                openForm={() =>\n                  navigate(`/list/${listId}/new`)}\n    +           title={list && list.title}\n              />\n            )}\n            // ...\n    ```", "```js\n      // ... \n      const reducer = (state, action) => {\n        switch (action.type) {\n          // ...   \n    +     case 'ADD_ITEM_SUCCESS':\n    +       return {\n    +         ...state,\n    +         items: [...state.items, action.payload],\n    +         loading: false,\n    +       };\n          default:\n            return state;\n        }\n      };\n      export const ItemsContextProvider = \n        ({ children }) => {\n        // ...\n    ```", "```js\n      // ...  \n    items, so this data is available from the Consumer.\n    ```", "```js\n    + import { useState, useContext } from 'react';\n      import styled from 'styled-components';\n      import { useNavigate, useParams } from \n       'react-router-dom';\n      import NavBar from '../components/NavBar/NavBar';\n      import FormItem from \n        '../components/FormItem/FormItem';\n      import Button from '../components/Button/Button';\n    + import ItemsContext from '../context/ItemsContext';\n      // ...\n      function ListForm() {\n        let navigate = useNavigate();\n        const { listId } = useParams();\n    +   const [title, setTitle] = useState('');\n    +   const [quantity, setQuantity] = useState('');\n    +   const [price, setPrice] = useState('');\n        return (\n          // ...   \n    ```", "```js\n         // ...\n         return (\n           <>\n             {navigate && <NavBar goBack={() => \n               navigate(-1)} title={`Add Item`} />}\n             <FormWrapper>\n               <form>\n                 <FormItem\n                   id='title'\n                   label='Title'\n                   placeholder='Insert title'\n    +              value={title}\n    +              handleOnChange={(e) =>\n                     setTitle(e.currentTarget.value)}\n                 />\n                 <FormItem\n                   id='quantity'\n                   label='Quantity'\n                   type='number'\n                   placeholder='0'\n    +              value={quantity}\n    +              handleOnChange={(e) =>\n                     setQuantity(e.currentTarget.value)}\n                 />\n                 <FormItem\n                   id='price'\n                   label='Price'\n                   type='number'\n                   placeholder='0.00'\n    +              value={price}\n    +              handleOnChange={(e) => \n                     setPrice(e.currentTarget.value)}\n                 />\n                 <SubmitButton>Add Item</SubmitButton>\n               </form>\n             </FormWrapper>\n           </>\n         );\n      };\n      export default Form;\n    ```", "```js\n      // ...\n    + const { addItem } = useContext(ItemsContext);\n    + function onSubmit(e) {\n    +   e.preventDefault();\n    +   if (title && quantity && price) {\n    +     addItem({\n    +       title,\n    +       quantity,\n    +       price,\n    +       listId,\n    +     });\n    +   }\n    +   navigate(`/list/${listId}`);\n    + }\n      return (\n        <>\n          {navigate && <NavBar goBack={() =>\n            navigate(-1)} title={`Add Item`} />}\n          <FormWrapper>\n    -       <form>\n    +       <form onSubmit={onSubmit}>\n              // ...\n    ```", "```js\n    import { ListsContextProvider } from './ListsContext';\n    import { ItemsContextProvider } from './ItemsContext';\n    const AppContext = ({ children }) => {\n      return (\n        <ListsContextProvider>\n          <ItemsContextProvider>{children}\n          </ItemsContextProvider>\n        </ListsContextProvider>\n      );\n    };\n    export default AppContext;\n    ```", "```js\n      import styled, { createGlobalStyle } from \n        'styled-components';\n      import { Route, Routes, BrowserRouter } from \n        'react-router-dom';\n      import Header from './components/Header/Header';\n      import Lists from './pages/Lists';\n      import ListDetail from './pages/ListDetail';\n      import ListForm from './pages/ListForm';\n    - import { ListsContextProvider } from \n        './context/ListsContext';\n    - import { ItemsContextProvider } from\n        './context/ItemsContext';\n    + import AppContext from './context/AppContext';\n      // ...\n      function App() { \n        return (\n          <>\n            <GlobalStyle />\n            <AppWrapper>\n              <BrowserRouter>\n                <Header />\n    +           <AppContext>\n    -           <ListsContextProvider>\n    -             <ItemsContextProvider>\n                    <Routes>\n                      // ...\n                    </Routes>\n    -             </ItemsContextProvider>\n    -           </ListsContextProvider>\n    +           </AppContext>\n              </BrowserRouter>\n            </AppWrapper>\n          </>\n        );\n      }\n      export default App;\n    ```", "```js\n+ import { Suspense, lazy } from 'react';\n  import styled, { createGlobalStyle } from \n    'styled-components';\n  import { Route, Routes, BrowserRouter} from \n    'react-router-dom';\n  import Header from './components/Header/Header';\n- import Lists from './pages/Lists';\n- import ListDetail from './pages/ListDetail';\n- import ListForm from './pages/ListForm';\n  import AppContext from './context/AppContext';\n+ const Lists = lazy(() => import('./pages/Lists'));\n+ const ListDetail = lazy(() =>\n    import('./pages/ListDetail'));\n+ const ListForm = lazy(() => import('./pages/ListForm'));\n  // ...\n\n  function App() {\n    // ...\n```", "```js\n  // ...\n  function App() {\n    return (\n      <>\n        <GlobalStyle />\n        <AppWrapper>\n          <BrowserRouter>\n            <Header />\n+           <Suspense fallback={<div>Loading...</div>}>\n              <AppContext>\n                // ...\n              </AppContext>\n+           </Suspense>\n          </BrowserRouter>\n        </AppWrapper>\n      </>\n    );\n  }\n  export default App;\n```", "```js\n  // ...\n- const Lists = lazy(() => import('./pages/Lists'));\n- const ListDetail = lazy(() =>\n    import'./pages/ListDetail'));\n- const ListForm = lazy(() => import('./pages/ListForm'));\n+ const Lists = lazy(() => import(/* webpackChunkName:\n    \"Lists\" */ './pages/Lists'));\n+ const ListDetail = lazy(() => import(/* webpackChunkName:\n    \"ListDetail\" */ './pages/ListDetail'));\n+ const ListForm = lazy(() => import(/* webpackChunkName: \n    \"ListForm\" */ './pages/ListForm'));\n  function App() {\n    // ...\n```"]