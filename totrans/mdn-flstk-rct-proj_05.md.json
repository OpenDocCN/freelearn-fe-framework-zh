["```js\n    $ cp -R ch2 ch3\n    ```", "```js\n      \"env\": {\n        \"node\": true,\n        \"es6\": true\n      },\n    ```", "```js\n      \"extends\": [\n        \"eslint:recommended\",\n        \"plugin:react/recommended\",\n        \"plugin:react/jsx-runtime\",\n        \"plugin:jsx-a11y/recommended\",\n        \"prettier\"\n      ],\n      \"settings\": {\n        \"react\": {\n          \"version\": \"detect\"\n        }\n      },\n      \"overrides\": [\n        {\n          \"files\": [\"*.js\", \"*.jsx\"]\n        }\n      ]\n    ```", "```js\n    dist/\n    vite.config.js\n    ```", "```js\n    $ npm uninstall --save react react-dom\n    $ npm uninstall --save-dev vite @types/react \\\n      @types/react-dom @vitejs/plugin-react \\\n      eslint-plugin-jsx-a11y eslint-plugin-react\n    ```", "```js\n      \"scripts\": {\n        \"dev\": \"vite\",\n        \"build\": \"vite build\",\n        \"lint\": \"eslint src\",\n        \"preview\": \"vite preview\",\n        \"prepare\": \"husky install\"\n      },\n    ```", "```js\n    $ npm install mongoose@8.0.2\n    ```", "```js\n    import mongoose from 'mongoose'\n    ```", "```js\n    export function initDatabase() {\n    ```", "```js\n      const DATABASE_URL = 'mongodb://localhost:27017/blog'\n    ```", "```js\n      mongoose.connection.on('open', () => {\n        console.info('successfully connected to database:', DATABASE_URL)\n      })\n    ```", "```js\n      const connection = mongoose.connect(DATABASE_URL)\n      return connection\n    }\n    ```", "```js\n    import { initDatabase } from './db/init.js'\n    initDatabase()\n    ```", "```js\n    $ node src/example.js\n    ```", "```js\n    import mongoose, { Schema } from 'mongoose'\n    ```", "```js\n    const postSchema = new Schema({\n    ```", "```js\n      title: { type: String, required: true },\n      author: String,\n      contents: String,\n    ```", "```js\n      tags: [String],\n    })\n    ```", "```js\n    export const Post = mongoose.model('post', postSchema)\n    ```", "```js\n    import { initDatabase } from './db/init.js'\n    import { Post } from './db/models/post.js'\n    ```", "```js\n    await initDatabase()\n    ```", "```js\n    const post = new Post({\n      title: 'Hello Mongoose!',\n      author: 'Daniel Bugl',\n      contents: 'This post is stored in a MongoDB database using Mongoose.',\n      tags: ['mongoose', 'mongodb'],\n    })\n    ```", "```js\n    await post.save()\n    ```", "```js\n    const posts = await Post.find()\n    console.log(posts)\n    ```", "```js\n    $ node src/example.js\n    ```", "```js\n    const postSchema = new Schema(\n      {\n        title: String,\n        author: String,\n        contents: String,\n        tags: [String],\n      },\n      { timestamps: true },\n    )\n    ```", "```js\n    $ node src/example.js\n    ```", "```js\n    const createdPost = await post.save()\n    await Post.findByIdAndUpdate(createdPost._id, {\n      $set: { title: 'Hello again, Mongoose!' },\n    })\n    ```", "```js\n    $ node src/example.js\n    ```", "```js\n    $ npm install --save-dev jest@29.7.0 \\\n    mongodb-memory-server library allows us to spin up a fresh instance of a MongoDB database, storing data only in memory, so that we can run our tests on a fresh database instance.\n    ```", "```js\n    import { MongoMemoryServer } from 'mongodb-memory-server'\n    ```", "```js\n    export default async function globalSetup() {\n      const instance = await MongoMemoryServer.create({\n    ```", "```js\n        binary: {\n          version: '6.0.4',\n        },\n      })\n    ```", "```js\n      global.__MONGOINSTANCE = instance\n    ```", "```js\n      process.env.DATABASE_URL = instance.getUri()\n    }\n    ```", "```js\n    export function initDatabase() {\n      const DATABASE_URL = process.env.DATABASE_URL\n    ```", "```js\n    export default async function globalTeardown() {\n      await global.__MONGOINSTANCE.stop()\n    }\n    ```", "```js\n    import mongoose from 'mongoose'\n    import { beforeAll, afterAll } from '@jest/globals'\n    import { initDatabase } from '../db/init.js'\n    beforeAll(async () => {\n      await initDatabase()\n    })\n    afterAll(async () => {\n      await mongoose.disconnect()\n    })\n    ```", "```js\n    {\n      \"testEnvironment\": \"node\",\n    ```", "```js\n      \"globalSetup\": \"<rootDir>/src/test/globalSetup.js\",\n      \"globalTeardown\": \"<rootDir>/src/test/globalTeardown.js\",\n      \"setupFilesAfterEnv\": [\"<rootDir>/src/test/setupFileAfterEnv.js\"]\n    }\n    ```", "```js\n      \"scripts\": {\n        \"test\": \"NODE_OPTIONS=--experimental-vm-modules jest\",\n        \"lint\": \"eslint src\",\n        \"prepare\": \"husky install\"\n      },\n    ```", "```js\n    $ npm test\n    ```", "```js\n    import { Post } from '../db/models/post.js'\n    ```", "```js\n    export async function createPost({ title, author, contents, tags }) {\n      const post = new Post({ title, author, contents, tags })\n      return await post.save()\n    }\n    ```", "```js\n    import mongoose from 'mongoose'\n    import { describe, expect, test } from '@jest/globals'\n    ```", "```js\n    import { createPost } from '../services/posts.js'\n    import { Post } from '../db/models/post.js'\n    ```", "```js\n    describe('creating posts', () => {\n    ```", "```js\n      test('with all parameters should succeed', async () => {\n    ```", "```js\n        const post = {\n          title: 'Hello Mongoose!',\n          author: 'Daniel Bugl',\n          contents: 'This post is stored in a MongoDB database using Mongoose.',\n          tags: ['mongoose', 'mongodb'],\n        }\n        const createdPost = await createPost(post)\n    ```", "```js\n        expect(createdPost._id).toBeInstanceOf(mongoose.Types.ObjectId)\n    ```", "```js\n        const foundPost = await Post.findById(createdPost._id)\n    ```", "```js\n        expect(foundPost).toEqual(expect.objectContaining(post))\n        expect(foundPost.createdAt).toBeInstanceOf(Date)\n        expect(foundPost.updatedAt).toBeInstanceOf(Date)\n      })\n    ```", "```js\n      test('without title should fail', async () => {\n        const post = {\n          author: 'Daniel Bugl',\n          contents: 'Post with no title',\n          tags: ['empty'],\n        }\n    ```", "```js\n        try {\n          await createPost(post)\n         } catch (err) {\n          expect(err).toBeInstanceOf(mongoose.Error.ValidationError)\n          expect(err.message).toContain('`title` is required')\n        }\n      })\n    ```", "```js\n      test('with minimal parameters should succeed', async () => {\n        const post = {\n          title: 'Only a title',\n        }\n        const createdPost = await createPost(post)\n        expect(createdPost._id).toBeInstanceOf(mongoose.Types.ObjectId)\n      })\n    })\n    ```", "```js\n    $ npm test\n    ```", "```js\n    async function listPosts(\n      query = {},\n      { sortBy = 'createdAt', sortOrder = 'descending' } = {},\n    ) {\n    ```", "```js\n      return await Post.find(query).sort({ [sortBy]: sortOrder })\n    }\n    ```", "```js\n    export async function listAllPosts(options) {\n      return await listPosts({}, options)\n    }\n    ```", "```js\n    export async function listPostsByAuthor(author, options) {\n      return await listPosts({ author }, options)\n    }\n    ```", "```js\n    export async function listPostsByTag(tags, options) {\n      return await listPosts({ tags }, options)\n    }\n    ```", "```js\n    import { describe, expect, test, beforeEach } from '@jest/globals'\n    import { createPost,\n             listAllPosts,\n             listPostsByAuthor,\n             listPostsByTag,\n    } from '../services/posts.js'\n    ```", "```js\n    const samplePosts = [\n      { title: 'Learning Redux', author: 'Daniel Bugl', tags: ['redux'] },\n      { title: 'Learn React Hooks', author: 'Daniel Bugl', tags: ['react'] },\n      {\n        title: 'Full-Stack React Projects',\n        author: 'Daniel Bugl',\n        tags: ['react', 'nodejs'],\n      },\n      { title: 'Guide to TypeScript' },\n    ]\n    ```", "```js\n    let createdSamplePosts = []\n    beforeEach(async () => {\n      await Post.deleteMany({})\n      createdSamplePosts = []\n      for (const post of samplePosts) {\n        const createdPost = new Post(post)\n        createdSamplePosts.push(await createdPost.save())\n      }\n    })\n    ```", "```js\n    describe('listing posts', () => {\n      test('should return all posts', async () => {\n        const posts = await listAllPosts()\n        expect(posts.length).toEqual(createdSamplePosts.length)\n      })\n    ```", "```js\n      test('should return posts sorted by creation date descending by default', async () => {\n        const posts = await listAllPosts()\n        const sortedSamplePosts = createdSamplePosts.sort(\n          (a, b) => b.createdAt - a.createdAt,\n        )\n        expect(posts.map((post) => post.createdAt)).toEqual(\n          sortedSamplePosts.map((post) => post.createdAt),\n        )\n      })\n    ```", "```js\n      test('should take into account provided sorting options', async () => {\n        const posts = await listAllPosts({\n          sortBy: 'updatedAt',\n          sortOrder: 'ascending',\n        })\n        const sortedSamplePosts = createdSamplePosts.sort(\n          (a, b) => a.updatedAt - b.updatedAt,\n        )\n        expect(posts.map((post) => post.updatedAt)).toEqual(\n          sortedSamplePosts.map((post) => post.updatedAt),\n        )\n      })\n    ```", "```js\n      test('should be able to filter posts by author', async () => {\n        const posts = await listPostsByAuthor('Daniel Bugl')\n        expect(posts.length).toBe(3)\n      })\n    ```", "```js\n      test('should be able to filter posts by tag', async () => {\n        const posts = await listPostsByTag('nodejs')\n        expect(posts.length).toBe(1)\n      })\n    })\n    ```", "```js\n    $ npm test\n    ```", "```js\n    export async function getPostById(postId) {\n      return await Post.findById(postId)\n    }\n    ```", "```js\n    export async function updatePost(postId, { title, author, contents, tags }) {\n      return await Post.findOneAndUpdate(\n        { _id: postId },\n        { $set: { title, author, contents, tags } },\n        { new: true },\n      )\n    }\n    ```", "```js\n    export async function deletePost(postId) {\n      return await Post.deleteOne({ _id: postId })\n    }\n    ```", "```js\n      getPostById,\n    } from '../services/posts.js'\n    ```", "```js\n    describe('getting a post', () => {\n      test('should return the full post', async () => {\n        const post = await getPostById(createdSamplePosts[0]._id)\n        expect(post.toObject()).toEqual(createdSamplePosts[0].toObject())\n      })\n      test('should fail if the id does not exist', async () => {\n        const post = await getPostById('000000000000000000000000')\n        expect(post).toEqual(null)\n      })\n    })\n    ```", "```js\n      updatePost,\n    } from '../services/posts.js'\n    ```", "```js\n    describe('updating posts', () => {\n      test('should update the specified property', async () => {\n        await updatePost(createdSamplePosts[0]._id, {\n          author: 'Test Author',\n        })\n        const updatedPost = await Post.findById(createdSamplePosts[0]._id)\n        expect(updatedPost.author).toEqual('Test Author')\n      })\n      test('should not update other properties', async () => {\n        await updatePost(createdSamplePosts[0]._id, {\n          author: 'Test Author',\n        })\n        const updatedPost = await Post.findById(createdSamplePosts[0]._id)\n        expect(updatedPost.title).toEqual('Learning Redux')\n      })\n    ```", "```js\n      test('should update the updatedAt timestamp', async () => {\n        await updatePost(createdSamplePosts[0]._id, {\n          author: 'Test Author',\n        })\n        const updatedPost = await Post.findById(createdSamplePosts[0]._id)\n        expect(updatedPost.updatedAt.getTime()).toBeGreaterThan(\n            createdSamplePosts[0].updatedAt.getTime(),\n          )\n      })\n    ```", "```js\n      test('should fail if the id does not exist', async () => {\n        const post = await updatePost('000000000000000000000000', {\n          author: 'Test Author',\n        })\n        expect(post).toEqual(null)\n      })\n    })\n    ```", "```js\n      deletePost,\n    } from '../services/posts.js'\n    ```", "```js\n    describe('deleting posts', () => {\n      test('should remove the post from the database', async () => {\n        const result = await deletePost(createdSamplePosts[0]._id)\n        expect(result.deletedCount).toEqual(1)\n        const deletedPost = await Post.findById(createdSamplePosts[0]._id)\n        expect(deletedPost).toEqual(null)\n      })\n      test('should fail if the id does not exist', async () => {\n        const result = await deletePost('000000000000000000000000')\n        expect(result.deletedCount).toEqual(0)\n      })\n    })\n    ```", "```js\n    $ npm test\n    ```", "```js\n    $ npm install express@4.18.2\n    ```", "```js\n    import express from 'express'\n    ```", "```js\n    const app = express()\n    ```", "```js\n    app.get('/', (req, res) => {\n      res.send('Hello from Express!')\n    })\n    ```", "```js\n    export { app }\n    ```", "```js\n    import { app } from './app.js'\n    ```", "```js\n    const PORT = 3000\n    app.listen(PORT)\n    console.info(`express server running on http://localhost:${PORT}`)\n    ```", "```js\n      \"scripts\": {\n        \"start\": \"node src/index.js\",\n    ```", "```js\n    $ npm start\n    ```", "```js\n    $ npm install dotenv@16.3.1\n    ```", "```js\n    import dotenv from 'dotenv'\n    dotenv.config()\n    ```", "```js\n    const PORT = process.env.PORT\n    ```", "```js\n    import { initDatabase } from './db/init.js'\n    ```", "```js\n    try {\n    await initDatabase()\n    const PORT = process.env.PORT\n      app.listen(PORT)\n      console.info(`express server running on http://localhost:${PORT}`)\n    } catch (err) {\n      console.error('error connecting to database:', err)\n    }\n    ```", "```js\n    PORT=3000\n    DATABASE_URL=mongodb://localhost:27017/blog\n    ```", "```js\n    .env\n    ```", "```js\n    $ npm start\n    ```", "```js\n    $ npm install –save-dev nodemon@3.0.2\n    ```", "```js\n    {\n      \"watch\": [\"./src\", \".env\", \"package-lock.json\"]\n    }\n    ```", "```js\n      \"scripts\": {\n        \"dev\": \"nodemon src/index.js\",\n    ```", "```js\n    $ npm run dev\n    ```", "```js\n    PORT=3001\n    DATABASE_URL=mongodb://localhost:27017/blog\n    ```", "```js\n    PORT=3001\n    ```", "```js\n    import {\n      listAllPosts,\n      listPostsByAuthor,\n      listPostsByTag,\n      getPostById,\n    } from '../services/posts.js'\n    ```", "```js\n    export function postsRoutes(app) {\n    ```", "```js\n      app.get('/api/v1/posts', async (req, res) => {\n    ```", "```js\n        const { sortBy, sortOrder, author, tag } = req.query\n        const options = { sortBy, sortOrder }\n    ```", "```js\n        try {\n    ```", "```js\n          if (author && tag) {\n            return res\n              .status(400)\n              .json({ error: 'query by either author or tag, not both' })\n    ```", "```js\n          } else if (author) {\n            return res.json(await listPostsByAuthor(author, options))\n          } else if (tag) {\n            return res.json(await listPostsByTag(tag, options))\n          } else {\n            return res.json(await listAllPosts(options))\n          }\n        } catch (err) {\n          console.error('error listing posts', err)\n          return res.status(500).end()\n        }\n      })\n    ```", "```js\n      app.get('/api/v1/posts/:id', async (req, res) => {\n    ```", "```js\n        const { id } = req.params\n        try {\n          const post = await getPostById(id)\n    ```", "```js\n          if (post === null) return res.status(404).end()\n          return res.json(post)\n        } catch (err) {\n          console.error('error getting post', err)\n          return res.status(500).end()\n        }\n      })\n    }\n    ```", "```js\n    import { postsRoutes } from './routes/posts.js'\n    ```", "```js\n    const app = express()\n    postsRoutes(app)\n    ```", "```js\n    $ npm install body-parser@1.20.2\n    ```", "```js\n    import bodyParser from 'body-parser'\n    ```", "```js\n    const app = express()\n    app.use(bodyParser.json())\n    ```", "```js\n      createPost,\n      updatePost,\n      deletePost,\n    } from '../services/posts.js'\n    ```", "```js\n      app.post('/api/v1/posts', async (req, res) => {\n        try {\n          const post = await createPost(req.body)\n          return res.json(post)\n        } catch (err) {\n          console.error('error creating post', err)\n          return res.status(500).end()\n        }\n      })\n    ```", "```js\n      app.patch('/api/v1/posts/:id', async (req, res) => {\n        try {\n          const post = await updatePost(req.params.id, req.body)\n          return res.json(post)\n        } catch (err) {\n          console.error('error updating post', err)\n          return res.status(500).end()\n        }\n      })\n    ```", "```js\n      app.delete('/api/v1/posts/:id', async (req, res) => {\n        try {\n          const { deletedCount } = await deletePost(req.params.id)\n          if (deletedCount === 0) return res.sendStatus(404)\n          return res.status(204).end()\n        } catch (err) {\n          console.error('error deleting post', err)\n          return res.status(500).end()\n        }\n      })\n    ```", "```js\n    $ npm install cors@2.8.5\n    ```", "```js\n    import cors from 'cors'\n    ```", "```js\n    const app = express()\n    app.use(cors())\n    app.use(bodyParser.json())\n    ```", "```js\n    fetch('http://localhost:3001/api/v1/posts')\n      .then(res => res.json())\n      .then(console.log)\n    ```", "```js\n    fetch('http://localhost:3001/api/v1/posts', {\n        headers: { 'Content-Type': 'application/json' },\n        method: 'POST',\n        body: JSON.stringify({ title: 'Test Post' })\n    })\n      .then(res => res.json())\n      .then(console.log)\n    ```", "```js\n    fetch('http://localhost:3001/api/v1/posts/642a8b15950196ee8b3437b2', {\n        headers: { 'Content-Type': 'application/json' },\n        method: 'PATCH',\n        body: JSON.stringify({ title: 'Test Post Changed' })\n    })\n      .then(res => res.json())\n      .then(console.log)\n    ```", "```js\n    fetch('http://localhost:3001/api/v1/posts/642a8b15950196ee8b3437b2', {\n        method: 'DELETE',\n    })\n      .then(res => res.status)\n      .then(console.log)\n    ```", "```js\n    fetch('http://localhost:3001/api/v1/posts/642a8b15950196ee8b3437b2')\n      .then(res => res.status)\n      .then(console.log)\n    ```"]