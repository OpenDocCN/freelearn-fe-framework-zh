["```js\n    npm install -g @babel/core @babel/node \n    ```", "```js\n    babel source.js -o output.js \n    ```", "```js\n    npm install -g @babel/preset-env @babel/preset-react \n    ```", "```js\n    {\n      \"presets\": [\n        \"@babel/preset-env\",\n        \"@babel/preset-react\"\n      ]\n    } \n    ```", "```js\n_jsx('div', {}) \n```", "```js\n<div /> \n```", "```js\n_jsx('button', {}) \n```", "```js\n_jsx(Button, {}) \n```", "```js\n<img src=\"img/logo.png\" alt=\"Cabañas San Pancho\" /> \n```", "```js\n_jsx(\"img\", { \n  src: \"https://www.ranchosanpancho.com/images/logo.png\", \n  alt: \"Cabañas San Pancho\" \n}) \n```", "```js\n<a href=\"https://ranchosanpancho.com\">Click me!</a> \n```", "```js\n_jsx( \n  \"a\", \n  { href: \"https://ranchosanpancho.com\" }, \n  \"Click me!\" \n) \n```", "```js\n<div> \n  <a href=\"https://ranchosanpancho.com\">Click me!</a> \n</div> \n```", "```js\n_jsx( \n  \"div\", \n  null, \n  _jsx( \n    \"a\", \n    { href: \"https://ranchosanpancho.com\" }, \n    \"Click me!\" \n  ) \n) \n```", "```js\n<div> \n  Hello, {variable}. \n  I'm a {() => console.log('Function')}. \n</div> \n```", "```js\n<a href={someFunction()}>Click me!</a> \n```", "```js\n<label className=\"awesome-label\" htmlFor=\"name\" /> \n```", "```js\n<div style={{ backgroundColor: 'red' }} /> \n```", "```js\nconst styles = {\n  backgroundColor: 'red'\n} \n<div style={styles} /> \n```", "```js\n<div />\n<div /> \n```", "```js\nAdjacent JSX elements must be wrapped in an enclosing tag. \n```", "```js\n<div> \n  <div /> \n  <div /> \n</div> \n```", "```js\nreturn [\n  <li key=\"1\">First item</li>, \n  <li key=\"2\">Second item</li>, \n  <li key=\"3\">Third item</li>\n] \n```", "```js\nreturn 'Hello World!' \n```", "```js\nimport { Fragment } from 'react'\nreturn ( \n  <Fragment>\n    <h1>An h1 heading</h1> \n    Some text here. \n    <h2>An h2 heading</h2> \n    More text here.\n    Even more text here.\n  </Fragment>\n) \n```", "```js\nreturn ( \n  <>\n    <ComponentA />\n    <ComponentB />\n    <ComponentC />\n  </>\n) \n```", "```js\n<div> \n  <span>My</span> \n  name is \n  <span>Carlos</span> \n</div> \n```", "```js\n<div> \n  <span>My</span> \n  {' '}\n  name is\n  {' '} \n  <span>Carlos</span> \n</div> \n```", "```js\n<button disabled /> \n_jsx(\"button\", { disabled: true }) \n```", "```js\n<button disabled={false} /> \n_jsx(\"button\", { disabled: false }) \n```", "```js\nconst attrs = { \n  id: 'myId',\n  className: 'myClass'\n}\nreturn <div {...attrs} /> \n```", "```js\nvar attrs = { \n  id: 'myId',\n  className: 'myClass'\n} \nreturn _jsx('div', attrs) \n```", "```js\nconst name = 'Carlos'\nconst age = 35\nconst message = `Hello, my name is ${name} and I am ${age} years old.`\nconsole.log(message) \n```", "```js\nHello, my name is Carlos and I am 35 years old. \n```", "```js\n<div> \n  <Header /> \n  <div> \n    <Main content={...} /> \n  </div> \n</div> \n```", "```js\n<div><Header /><div><Main content={...} /></div></div> \n```", "```js\n<div> \n  <Alert>{message}</Alert> \n  <Button>Close</Button> \n</div> \n```", "```js\nreturn <div /> \n```", "```js\nreturn \n  <div /> \n```", "```js\nreturn\n_jsx(\"div\", null) \n```", "```js\nreturn ( \n  <div /> \n) \n```", "```js\n<button \n  foo=\"bar\" \n  veryLongPropertyName=\"baz\" \n  onSomething={this.handleSomething} \n/> \n```", "```js\nlet button\n\nif (isLoggedIn) { \n  button = <LogoutButton />\n} \n\nreturn <div>{button}</div> \n```", "```js\n<div> \n  {isLoggedIn && <LoginButton />} \n</div> \n```", "```js\nlet button\nif (isLoggedIn) { \n  button = <LogoutButton />\n} else { \n  button = <LoginButton />\n} \n\nreturn <div>{button}</div> \n```", "```js\n<div> \n  {isLoggedIn ? <LogoutButton /> : <LoginButton />} \n</div> \n```", "```js\n<button [...]> \n  {isFetching ? 'Loading...' : 'Load More'} \n</button> \n```", "```js\n<div>\n  {dataIsReady && (isAdmin || userHasPermissions) && \n    <SecretData />\n  }\n</div> \n```", "```js\nconst MyComponent = ({ dataIsReady, isAdmin, userHasPermissions }) => {\n  const canShowSecretData = () => { \n    return dataIsReady && (isAdmin || userHasPermissions)\n  } \n\n  return (\n    <div> \n      {canShowSecretData() && <SecretData />} \n    </div>\n  )\n} \n```", "```js\nconst MyComponent = ({ currency, value }) => {\n     const getPrice = () => { \n    return `${currency}${value}`\n  }\n\n  return <div>{getPrice()}</div>\n} \n```", "```js\nimport React, { FC, ReactElement } from 'react'\ninterface Props {\n  children: ReactElement | string\n  isTrue?: Boolean\n  isFalse?: Boolean\n}\nconst RenderIf: FC<Props> = ({ children, isTrue, isFalse }) => {\n  if (isTrue === true) {\n    return <>{children}</>\n  }\n  if (isFalse === false) {\n    return <>{children}</>\n  }\n  return null\n}\nexport default RenderIf \n```", "```js\nimport RenderIf from './RenderIf'\nconst MyComponent = ({ dataIsReady, isAdmin, userHasPermissions }) => {  \n  return (\n    <div> \n      <RenderIf isTrue={dataIsReady && (isAdmin || userHasPermissions)}>\n        <SecretData />\n      </RenderIf> \n    </div>\n  )\n} \n```", "```js\n<ul> \n  {users.map(user => <li>{user.name}</li>)} \n</ul> \n```", "```js\nconst renderUserMenu = () => { \n  // JSX for user menu \n} \n\nconst renderAdminMenu = () => { \n  // JSX for admin menu \n} \n\nreturn ( \n  <div> \n    <h1>Welcome back!</h1> \n    {userExists && renderUserMenu()} \n    {userIsAdmin && renderAdminMenu()} \n  </div> \n) \n```", "```js\nroot = true\n[*]\nindent_style = space \nindent_size = 2\nend_of_line = lf\ncharset = utf-8 \ntrim_trailing_whitespace = true \ninsert_final_newline = true\n[*.html] \nindent_size = 4\n[*.css] \nindent_size = 4\n[*.md]\ntrim_trailing_whitespace = false \n```", "```js\n{\n  \"editor.defaultFormatter\": \"esbenp.prettier-vscode\",\n  \"editor.formatOnSave\": true\n} \n```", "```js\n{\n  \"arrowParens\": \"avoid\",\n  \"bracketSpacing\": true,\n  \"jsxSingleQuote\": false,\n  \"printWidth\": 100,\n  \"quoteProps\": \"as-needed\",\n  \"semi\": false,\n  \"singleQuote\": true,\n  \"tabWidth\": 2,\n  \"trailingComma\": \"none\",\n  \"useTabs\": false\n} \n```", "```js\nnpm install -g eslint eslint-config-airbnb eslint-config-prettier eslint-plugin-import eslint-plugin-jsx-a11y eslint-plugin-prettier eslint-plugin-react \n```", "```js\neslint source.ts \n```", "```js\n{\n  \"parser\": \"@typescript-eslint/parser\",\n  \"plugins\": [\"@typescript-eslint\", \"prettier\"],\n  \"extends\": [\n    \"airbnb\",\n    \"eslint:recommended\",\n    \"plugin:@typescript-eslint/eslint-recommended\",\n    \"plugin:@typescript-eslint/recommended\",\n    \"plugin:prettier/recommended\"\n  ],\n  \"settings\": {\n    \"import/extensions\": [\".js\", \".jsx\", \".ts\", \".tsx\"],\n    \"import/parsers\": {\n      \"@typescript-eslint/parser\": [\".ts\", \".tsx\"]\n    },\n    \"import/resolver\": {\n      \"node\": {\n        \"extensions\": [\".js\", \".jsx\", \".ts\", \".tsx\"]\n      }\n    }\n  },\n  \"rules\": {\n    \"semi\": [2, \"never\"]\n  }\n} \n```", "```js\nconst foo = 'bar'; \n```", "```js\nExtra semicolon (semi) \n```", "```js\n\"rules\": {\n    \"semi\": [2, \"never\"],\n    \"@typescript-eslint/class-name-casing\": \"off\",\n    \"@typescript-eslint/interface-name-prefix\": \"off\",\n    \"@typescript-eslint/member-delimiter-style\": \"off\",\n    \"@typescript-eslint/no-var-requires\": \"off\",\n    \"@typescript-eslint/ban-ts-ignore\": \"off\",\n    \"@typescript-eslint/no-use-before-define\": \"off\",\n    \"@typescript-eslint/ban-ts-comment\": \"off\",\n    \"@typescript-eslint/explicit-module-boundary-types\": \"off\",\n    \"no-restricted-syntax\": \"off\",\n    \"no-use-before-define\": \"off\",\n    \"import/extensions\": \"off\",\n    \"import/prefer-default-export\": \"off\",\n    \"max-len\": [\n      \"error\",\n      {\n        \"code\": 100,\n        \"tabWidth\": 2\n      }\n    ],\n    \"no-param-reassign\": \"off\",\n    \"no-underscore-dangle\": \"off\",\n    \"react/jsx-filename-extension\": [\n      1,\n      {\n        \"extensions\": [\".tsx\"]\n      }\n    ],\n    \"import/no-unresolved\": \"off\",\n    \"consistent-return\": \"off\",\n    \"jsx-a11y/anchor-is-valid\": \"off\",\n    \"sx-a11y/click-events-have-key-events\": \"off\",\n    \"jsx-a11y/no-noninteractive-element-interactions\": \"off\",\n    \"jsx-a11y/click-events-have-key-events\": \"off\",\n    \"jsx-a11y/no-static-element-interactions\": \"off\",\n    \"react/jsx-props-no-spreading\": \"off\",\n    \"jsx-a11y/label-has-associated-control\": \"off\",\n    \"react/jsx-one-expression-per-line\": \"off\",\n    \"no-prototype-builtins\": \"off\",\n    \"no-nested-ternary\": \"off\",\n    \"prettier/prettier\": [\n      \"error\",\n      {\n        \"endOfLine\": \"auto\"\n      }\n    ]\n  } \n```", "```js\nnpm install --save-dev husky \n```", "```js\n npm pkg set scripts.prepare=\"husky install\"\n  npm run prepare \n```", "```js\n npx husky add .husky/pre-commit \"npm run lint\"\n  git add .husky/pre-commit \n```", "```js\n git commit -m \"Keep calm and commit\"\n  # `npm run lint` will run every time you commit \n```", "```js\nconst add = (x, y) => x + y\nconst log = fn => (...args) => { \n  return fn(...args)\n}\nconst logAdd = log(add) \n```", "```js\nconst add = (x, y) => x + y \n```", "```js\nlet x = 0\nconst add = y => (x = x + y) \n```", "```js\nconst add3 = arr => arr.push(3)\nconst myArr = [1, 2]\nadd3(myArr); // [1, 2, 3]\nadd3(myArr); // [1, 2, 3, 3] \n```", "```js\nconst add3 = arr => arr.concat(3)\nconst myArr = [1, 2]\nconst result1 = add3(myArr) // [1, 2, 3]\nconst result2 = add3(myArr) // [1, 2, 3] \n```", "```js\nconst add = (x, y) => x + y \n```", "```js\nconst add = x => y => x + y \n```", "```js\nconst add1 = add(1)\nadd1(2); // 3\nadd1(3); // 4 \n```", "```js\nconst add = (x, y) => x + y\nconst square = x => x * x \n```", "```js\nconst addAndSquare = (x, y) => square(add(x, y)) \n```"]