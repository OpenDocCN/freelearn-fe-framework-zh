["```js\nlet count = 0;\n```", "```js\nlet state = {\n  count: 0,\n};\n```", "```js\nexport const getState = () => state;\nexport const setState = (nextState) => {\n  state = nextState;\n};\n```", "```js\nexport const setState = (nextState) => {\n  state = typeof nextState === 'function'\n    ? nextState(state) : nextState;\n};\n```", "```js\nsetState((prevState) => ({\n  ...prevState,\n  count: prevState.count + 1\n}));\n```", "```js\nexport const createContainer = (initialState) => {\n  let state = initialState;\n  const getState = () => state;\n  const setState = (nextState) => {\n    state = typeof nextState === 'function'\n      ? nextState(state) : nextState;\n  };\n  return { getState, setState };\n};\n```", "```js\nimport { createContainer } from '...';\nconst { getState, setState } = createContainer({\n  count: 0\n});\n```", "```js\nlet count = 0;\nconst Component1 = () => {\n  const inc = () => {\n    count += 1;\n  }\n  return (\n    <div>{count} <button onClick={inc}>+1</button></div>\n  );\n};\n```", "```js\nlet count = 0;\nconst Component1 = () => {\n  const [state, setState] = useState(count);\n  const inc = () => {\n    count += 1;\n    setState(count);\n  }\n  return (\n    <div>{state} <button onClick={inc}>+1</button></div>\n  );\n};\n```", "```js\nconst Component2 = () => {\n  const [state, setState] = useState(count);\n  const inc2 = () => {\n    count += 2;\n    setState(count);\n  }\n  return (\n    <div>{state} <button onClick={inc2}>+2</button></div>\n  );\n};\n```", "```js\nlet count = 0;\nconst setStateFunctions =\n  new Set<(count: number) => void>();\nconst Component1 = () => {\n  const [state, setState] = useState(count);\n  useEffect(() => {\n    setStateFunctions.add(setState);\n    return () => { setStateFunctions.delete(setState); };\n  }, []);\n  const inc = () => {\n    count += 1;\n    setStateFunctions.forEach((fn) => {\n      fn(count);\n    });\n  }\n  return (\n    <div>{state} <button onClick={inc}>+1</button></div>\n  );\n};\n```", "```js\nconst Component2 = () => {\n  const [state, setState] = useState(count);\n  useEffect(() => {\n    setStateFunctions.add(setState);\n    return () => { setStateFunctions.delete(setState); };\n  }, []);\n  const inc2 = () => {\n    count += 2;\n    setStateFunctions.forEach((fn) => {\n      fn(count);\n    });\n  }\n  return (\n    <div>{state} <button onClick={inc2}>+2</button></div>\n  );\n};\n```", "```js\nconst unsubscribe = store.subscribe(() => {\n  console.log('store is updated');\n});\n```", "```js\ntype Store<T> = {\n  getState: () => T;\n  setState: (action: T | ((prev: T) => T)) => void;\n  subscribe: (callback: () => void) => () => void;\n};\n\nconst createStore = <T extends unknown>(\n  initialState: T\n): Store<T> => {\n  let state = initialState;\n  const callbacks = new Set<() => void>();\n  const getState = () => state;\n  const setState = (nextState: T | ((prev: T) => T)) => {\n    state =\n      typeof nextState === \"function\"\n        ? (nextState as (prev: T) => T)(state)\n        : nextState;\n    callbacks.forEach((callback) => callback());\n  };\n  const subscribe = (callback: () => void) => {\n    callbacks.add(callback);\n    return () => {\n      callbacks.delete(callback);\n    };\n  };\n  return { getState, setState, subscribe };\n}; \n```", "```js\nimport { createStore } from '...';\nconst store = createStore({ count: 0 });\nconsole.log(store.getState());\nstore.setState({ count: 1 });\nstore.subscribe(...);\n```", "```js\nconst useStore = (store) => {\n  const [state, setState] = useState(store.getState());\n  useEffect(() => {\n    const unsubscribe = store.subscribe(() => {\n      setState(store.getState());\n    });\n    setState(store.getState()); // [1]\n    return unsubscribe;\n  }, [store]);\n  return [state, store.setState];\n};\n```", "```js\nconst Component1 = () => {                            \n  const [state, setState] = useStore(store);  \n  const inc = () => {\n    setState((prev) => ({                       \n      ...prev,\n      count: prev.count + 1,                   \n    }));                    \n  };              \n  return (                       \n    <div>\n      {state.count} <button onClick={inc}>+1</button>\n    </div>                                 \n  );               \n};\n```", "```js\nconst Component2 = () => {\n  const [state, setState] = useStore(store);\n  const inc2 = () => {\n    setState((prev) => ({\n      ...prev,\n      count: prev.count + 2,\n    }));\n  };\n  return (\n    <div>\n      {state.count} <button onClick={inc2}>+2</button>\n    </div>\n  );\n};\n```", "```js\nconst App = () => (\n  <>\n    <Component1 />\n    <Component2 />\n  </>\n);\n```", "```js\nconst store = createStore({ count1: 0, count2: 0 });\n```", "```js\nconst useStoreSelector = <T, S>(\n  store: Store<T>,\n  selector: (state: T) => S\n) => {\n  const [state, setState] =\n    useState(() => selector(store.getState()));\n  useEffect(() => {\n    const unsubscribe = store.subscribe(() => {\n      setState(selector(store.getState()));\n    });\n    setState(selector(store.getState()));\n    return unsubscribe;\n  }, [store, selector]);\n  return state;\n};\n```", "```js\nconst Component1 = () => {\n  const state = useStoreSelector(\n    store,\n    useCallback((state) => state.count1, []),\n  );\n  const inc = () => {\n    store.setState((prev) => ({\n      ...prev,\n      count1: prev.count1 + 1,\n    }));\n  };\n  return (\n    <div>\n      count1: {state} <button onClick={inc}>+1</button>\n    </div>\n  );\n};\n```", "```js\nconst selectCount2 = (\n  state: ReturnType<typeof store.getState>\n) => state.count2;\nconst Component2 = () => {\n  const state = useStoreSelector(store, selectCount2);\n  const inc = () => {\n    store.setState((prev) => ({\n      ...prev,\n      count2: prev.count2 + 1,\n    }));\n  };\n  return (\n    <div>\n      count2: {state} <button onClick={inc}>+1</button>\n    </div>\n  );\n};\n```", "```js\nconst App = () => (\n  <>\n    <Component1 />\n    <Component1 />\n    <Component2 />\n    <Component2 />\n  </>\n);\n```", "```js\nconst useStoreSelector = (store, selector) => useSubscription(\n  useMemo(() => ({\n    getCurrentValue: () => selector(store.getState()),\n    subscribe: store.subscribe,\n  }), [store, selector])\n);\n```", "```js\nconst Component1 = () => {\n  const state = useSubscription(useMemo(() => ({\n    getCurrentValue: () => store.getState().count1,\n    subscribe: store.subscribe,\n  }), []));\n  const inc = () => {\n    store.setState((prev) => ({\n      ...prev,\n      count1: prev.count1 + 1,\n    }));\n  };\n  return (\n    <div>\n      count1: {state} <button onClick={inc}>+1</button>\n    </div>\n  );\n};\n```"]