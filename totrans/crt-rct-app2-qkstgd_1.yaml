- en: Introducing Create React App 2
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍 Create React App 2
- en: This book will be a guide on how to effectively use **Create React App** 2 (**CRA**)
    to create a new React project and build the web project of your dreams! We will
    cover many topics, including how to install Create React App, the project structure
    you get by default, and how to add code and libraries to your project. We will
    explore everything you'll need to be able to build complex, modern web applications
    using the latest and greatest of the most common React project configurations
    and compilations.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本书将指导你如何有效地使用 **Create React App** 2 (**CRA**) 来创建一个新的 React 项目并构建你梦想中的网络项目！我们将涵盖许多主题，包括如何安装
    Create React App、默认获得的项目结构，以及如何将代码和库添加到你的项目中。我们将探索你构建复杂、现代网络应用所需的一切，包括最新的最常见 React
    项目配置和编译。
- en: To be able to do this however, we first need to take a little time to talk about
    the project itself, its humble beginnings, and what problems it is ultimately
    attempting to solve. By understanding the history and the intention, we can better
    understand how to take full advantage of the toolset we are provided and also
    understand where and why limitations exist.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，要能够做到这一点，我们首先需要花一点时间来谈谈项目本身，它的谦逊起点，以及它最终试图解决的问题。通过了解历史和意图，我们可以更好地理解如何充分利用我们提供的工具集，并了解限制存在的位置和原因。
- en: In this chapter, we'll discuss what Create React App is and what it brings to
    the table. By the time you're done with this chapter, you'll understand why Create
    React App is so important and how it helps the developer get more done in less
    time overall. We'll also discuss what topics the book will cover, the format itself,
    and how to best follow along.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论 Create React App 是什么以及它带来了什么。当你完成本章时，你会理解为什么 Create React App 如此重要，以及它是如何帮助开发者以更短的时间完成更多工作的。我们还将讨论本书将涵盖哪些主题，其格式本身，以及如何最好地跟随。
- en: 'In this chapter we will be looking at the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨以下主题：
- en: Starting a new Create React App project
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动一个新的 Create React App 项目
- en: The commands for starting and stopping your server
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动和停止你的服务器的命令
- en: The commands for running tests
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行测试的命令
- en: The commands for creating production-ready builds
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建生产就绪构建的命令
- en: The commands for exiting the Create React App confines to further tune and configure
    your project
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 退出 Create React App 的命令仅限于进一步调整和配置你的项目
- en: What is Create React App?
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是 Create React App？
- en: A lot of different programming languages, tools, and frameworks have a number
    of different ways to jumpstart development for their particular toolset. Sometimes
    this requires downloading a bunch of libraries, or getting started with a pre-built
    binary file or compressed archive for the right architecture, operating system,
    or other configurations. Sometimes it has a nice pre-built pathway to get started
    in a way that minimizes frustration but potentially limits available options.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 许多不同的编程语言、工具和框架都有许多不同的方式来启动它们特定工具集的开发。有时这需要下载大量的库，或者使用为正确架构、操作系统或其他配置预构建的二进制文件或压缩存档开始。有时它有一个很好的预构建路径来开始，这样可以最大限度地减少挫折，但可能限制了可用的选项。
- en: The trouble, however, is that with a lot of JavaScript frameworks, there was
    not a similar option. Getting started using any particular framework or technology
    was actually a markedly difficult problem to solve, due to differing combinations
    of every person's skill set, operating system, and task.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，问题在于，对于许多 JavaScript 框架来说，并没有类似的选项。使用任何特定的框架或技术实际上是一个明显难以解决的问题，因为每个人的技能组合、操作系统和任务都有所不同。
- en: Create React App is JavaScript 's answer to the *getting started* toolset that
    did not exist in any particularly approachable way. Generally speaking, to get
    started with a project, you'd have to learn a large number of supporting technologies
    and techniques before you could really get moving. You'd have to know a configuration
    framework, such as Babel, Webpack, Brunch, or Gulp. As well, you would have to
    know how to get a project structure going in JavaScript. After you've figured
    everything else out, you'd have to learn how to set up a development server that
    auto-reloads changes on the fly. After all of that, you still have to figure out
    how to set up your testing framework, React, and any additional libraries you
    want.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Create React App是JavaScript对那些不存在于任何特别易于接触方式中的**入门**工具集的回应。一般来说，要开始一个项目，你必须在真正开始之前学习大量的支持技术和技巧。你必须了解配置框架，如Babel、Webpack、Brunch或Gulp。此外，你还必须知道如何在JavaScript中建立项目结构。在你弄清楚所有其他事情之后，你必须学习如何设置一个开发服务器，该服务器可以自动重新加载更改。在所有这些之后，你仍然需要弄清楚如何设置你的测试框架、React以及你想要的任何附加库。
- en: This ends up being a huge amount of effort, and that's just to get started.
    It's compounded by the fact that every single piece of framework and configuration
    that you're developing expertise with might not transfer into your next job!
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这最终会变成一大堆工作，而这只是入门。由于你正在开发的每一个框架和配置可能都不会转移到你的下一份工作中，所以这个问题会变得更加复杂！
- en: 'Instead, Create React App aims to do something different: make configuration
    and setup a one-step process. This allows you to focus on getting started and
    building your application earlier, and worry about the more in-depth portions
    of work later. You can focus more time on writing your code and less time on configuring
    a great development environment. Your environment in a Create React App application
    will already be a great development environment, and that''s a fantastic removal
    of barriers and obstacles for developers, both new and seasoned!'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，Create React App旨在做些不同的事情：将配置和设置变成一个一步到位的过程。这让你可以更早地开始并构建你的应用程序，而不用担心更深入的工作部分。你可以把更多的时间花在编写代码上，而不是在配置一个出色的开发环境上。在你的Create
    React App应用程序中，环境本身就是一个出色的开发环境，这对新人和有经验的开发者来说都是一个巨大的障碍和障碍的消除！
- en: The **Command-line interface** (**CLI**) tool provides a great development environment
    that encourages rapid iteration and test-driven techniques. We have a lot of the
    configuration and specific libraries figured out for us so we don't have to do
    that legwork. Moreover, you're never locked in to any choices you make. The Create
    React App team included an **eject** option that pulls the entirety of the application
    you've been developing and turns it into a standard webpack or babel build, for
    example, that can be plugged into anything compatible with **Node Package Manager**
    (**NPM**). You don't have to be worried about having to duplicate a huge amount
    of effort to transfer your code from Create React App to your own project or a
    specific environment configuration and setup at your job; you can just make something
    that transfers nicely, safely, and cleanly. You can even tweak the configuration
    at this step (after ejection) and further make this application your own!
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**命令行界面**（**CLI**）工具提供了一个极佳的开发环境，鼓励快速迭代和测试驱动技术。我们有很多配置和特定库的问题已经为我们解决了，所以我们不必做这些基础工作。此外，你永远不会被你做出的任何选择所束缚。Create
    React App 团队包含了一个**eject**选项，它将你正在开发的应用程序的全部内容提取出来，并将其转换为标准的webpack或babel构建，例如，可以与**Node包管理器**（**NPM**）兼容。你不必担心需要重复大量工作来将你的代码从Create
    React App转移到自己的项目或工作环境中的特定配置和设置；你只需创建一些可以安全、干净、顺利转移的东西。你甚至可以在这一步（eject之后）调整配置，并进一步使这个应用程序成为你自己的！'
- en: What is the history of Create React App?
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Create React App的历史是什么？
- en: To better understand where Create React App succeeds, we have to understand
    where the JavaScript development world started. We need to see the warts of the
    system to know why certain things were fixed and how they were fixed. Let's talk
    a little bit about the history of JavaScript development and some of the main
    issues that developers were running into frequently!
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解Create React App的成功之处，我们必须了解JavaScript开发世界的起点。我们需要看到系统的瑕疵，以了解为什么某些事情被修复以及如何被修复。让我们简单谈谈JavaScript开发的历史以及开发者经常遇到的一些主要问题！
- en: The early days of JavaScript development
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaScript开发的早期
- en: To start, you need to dive back into the past of dealing with JavaScript code
    in the frontend. For a long time, you would end up with these JavaScript files
    that you'd just download off of a **content delivery network** (**CDN**) somewhere,
    throw into your frontend code, write a bunch of extra JavaScript code in front
    of that, and call it a day.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要回顾一下在前端处理JavaScript代码的过去。长期以来，你可能会下载一些来自某个**内容分发网络**（**CDN**）的JavaScript文件，将它们扔到你的前端代码中，然后在前面写一大堆额外的JavaScript代码，然后就算完成了。
- en: 'This was nice in the sense that you had your dependencies locked down to whatever
    version you downloaded and stuck on the server, and whatever you deployed was
    pretty easy to develop against because all of the dependencies were already there
    and ready to go. Unfortunately, it introduced a ton of problems in many other
    ways. For one, you would run into issues constantly where one of the libraries
    you downloaded was completely incompatible with a specific version of one of the
    specific versions of another library, and often that was a complex and difficult
    process. The way most people solved that problem was divided into a few camps:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方式在某种程度上是不错的，因为你的依赖项被锁定到了你下载的版本，并固定在服务器上，所以你部署的内容开发起来相对容易，因为所有依赖项都已经存在并准备好使用。不幸的是，它以许多其他方式引入了大量问题。首先，你可能会不断遇到问题，其中一个你下载的库与另一个特定库的特定版本完全不兼容，而且这通常是一个复杂且困难的过程。大多数人解决这个问题的方法被分为几个阵营：
- en: Going through and finding all of the incompatibilities and fixing them
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 逐一检查并修复所有不兼容性
- en: Writing complex glue code that would make the libraries behave together by wrapping
    one of the libraries and providing a means for the two libraries to work together
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写复杂的粘合代码，通过包装其中一个库并提供两个库协同工作的手段，使这些库能够一起工作
- en: Downloading a different version of the library just for another library and
    storing them separately, resulting in giant JavaScript bundles when you load the
    web page because you're probably downloading two to three different versions of
    something, such as jQuery
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只为另一个库下载不同版本的库并将它们分别存储，当加载网页时导致巨大的JavaScript包，因为你可能正在下载两到三个不同版本的某个东西，比如jQuery
- en: Yes, that last bullet point is a real thing that real developers did! You can
    probably see why this is something developers tried to move away from as soon
    as they could.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，最后一个要点是一个真实存在的事情，真正的开发者确实这么做了！你可能明白为什么开发者们尽可能快地想要摆脱这种做法。
- en: The bundle era
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 压缩包时代
- en: To solve this problem, it was important to solve the dependency problem in general.
    The move toward Node.js-based tools, such as `npm`, helped significantly, because
    now your dependencies would be pulled from a centralized location and versioning
    became a first-class citizen of JavaScript development, which was fantastic!
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，解决依赖性问题至关重要。转向基于Node.js的工具，如`npm`，对此有很大帮助，因为现在你的依赖项将从一个集中位置拉取，版本控制成为JavaScript开发的头等公民，这真是太棒了！
- en: What was less fantastic, however, was when you needed to apply this problem
    to browser code and rich web applications. Often, this meant an intricate dance
    of understanding what libraries were required for which projects. If you wanted
    to use React with JSX (we'll talk more about this later), as well as the latest
    JavaScript syntax, you needed to know exactly what versions of React and Babel
    to include. You'd also need to understand which Babel plugins you'd need to have
    to support your use of whatever draft of JavaScript syntax.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，当你需要将这个问题应用到浏览器代码和富Web应用中时，情况就不那么美妙了。通常，这意味着你需要理解哪些库适用于哪些项目。如果你想使用React与JSX（我们稍后会详细讨论这个话题），以及最新的JavaScript语法，你需要确切知道要包含React和Babel的哪些版本。你还需要了解你需要哪些Babel插件来支持你使用的JavaScript语法的任何草案。
- en: Do you want to use some CSS transformers or any other language help, such as
    TypeScript or Flow, in your React project? If so, building and configuring your
    project becomes markedly more difficult, and we haven't even gotten to the problem
    of getting this code put together to be used on the browser! Now you needed to
    have a wide breadth of knowledge just to get your project started, and a wide
    depth of knowledge for knowing how to set up and configure something such as Webpack,
    Bundler, Grunt, Gulp, or Brunch!
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你想在你的React项目中使用一些CSS转换器或其他任何语言帮助，比如TypeScript或Flow吗？如果是这样，构建和配置你的项目就会变得明显更加困难，而且我们还没有涉及到如何将这段代码组合起来以便在浏览器上使用的问题！现在，你只需要开始一个项目，就需要有广泛的知识面，而对于如何设置和配置像Webpack、Bundler、Grunt、Gulp或Brunch这样的东西，则需要深入的知识！
- en: This is the point of development that we were in before the prevalence of command-line
    tools and configuration utilities, so let's dive into that by talking about what
    problems Create React App solves!
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们之前在命令行工具和配置实用程序普及之前的发展阶段，所以让我们通过讨论Create React App解决的问题来深入了解这一点！
- en: What problems does CRA solve?
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CRA解决了哪些问题？
- en: Create React App is designed to solve the problem of needing to understand a
    large number of different tools, scripts, configuration utilities, configuration
    languages, and file types just to get started developing. So now this isn't a
    problem you need to solve when you're advanced in your project and learning. And
    it isn't a problem you need to solve when you're an expert and trying to optimize
    your bundle to minimize what the end user needs to download when they want to
    use your fancy web application!
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Create React App旨在解决在开始开发时需要理解大量不同的工具、脚本、配置实用程序、配置语言和文件类型的问题。所以现在，这并不是在你项目高级阶段和学习时需要解决的问题。这也不是在你成为专家并试图优化包以最小化最终用户在想要使用你的花哨Web应用时需要下载的内容时需要解决的问题！
- en: 'Remember, the problem we''re talking about here is not one that the experts
    are solving alone: this problem existed at all skill levels of development and
    for every person. What''s worse, these problems were duplicated every time you
    started a new project. As developers, we hate duplicating and wasting effort,
    so the Create React App team set out to remove these speed bumps!'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，我们在这里讨论的问题不是专家独自解决的问题：这个问题存在于所有技能水平的发展中，对每个人来说都是如此。更糟糕的是，每次你开始一个新的项目时，这些问题都会重复出现。作为开发者，我们讨厌重复和浪费精力，所以Create
    React App团队着手消除这些障碍！
- en: Create React App allows you to get started at any skill level, at any level
    of comfort and familiarity with JavaScript and its ecosystem. You can start a
    project and get everything you need, including testing tools and frameworks, with
    a single command-line tool.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Create React App允许你在任何技能水平、任何舒适度和熟悉JavaScript及其生态系统的水平上开始。你可以通过单个命令行工具启动一个项目，并获取你需要的所有东西，包括测试工具和框架。
- en: It is not laziness. It is *efficiency*.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不是懒惰。这是*效率*。
- en: It is not oversimplification. It is *removing barriers*.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不是过度简化。这是*消除障碍*。
- en: Installing prerequisites for Create React App
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Create React App的先决条件
- en: 'First and foremost, you''ll need to have `npm` installed on the computer that
    you''re working on. Without that, there''s no way to install the prerequisite
    libraries and projects. You can download Node and `npm` for your project at [https://nodejs.org](https://nodejs.org),
    then perform the following steps:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 首先也是最重要的，你需要在你的工作电脑上安装`npm`。没有这个，就无法安装先决条件的库和项目。你可以在[https://nodejs.org](https://nodejs.org)下载Node和`npm`用于你的项目，然后执行以下步骤：
- en: Find the appropriate installer package for your computer and operating system
    for Node and NPM at [https://nodejs.org](https://nodejs.org) and follow the instructions
    provided by the installer.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在[https://nodejs.org](https://nodejs.org)找到适合你的电脑和操作系统的Node和NPM的适当安装程序包，并遵循安装程序提供的说明。
- en: Install an appropriate code editor or **Interactive Development Environment**
    (**IDE**). I've had the best experiences with Visual Studio Code, so that gets
    my personal recommendation, but you can use anything you're comfortable with!
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装一个合适的代码编辑器或**交互式开发环境**（**IDE**）。我在Visual Studio Code上有了最好的体验，所以这是我的个人推荐，但你可以使用任何你感到舒适的东西！
- en: Once you've installed Node and `npm` (if you haven't already), you're ready
    to go!
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你安装了Node和`npm`（如果你还没有的话），你就可以开始了！
- en: Now that everything is set up, working, and installed to the version that we
    need, we can start iterating! One of the fastest ways to learn a project is to
    start building it and iterating on it as we learn more, so we're going to do exactly
    that.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在一切都已经设置好、运行正常，并且安装到了我们需要的版本，我们可以开始迭代了！学习一个项目的最快方式之一就是在我们学习的过程中开始构建它并对其进行迭代，所以我们将这样做。
- en: Creating our first Create React App project
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建我们的第一个 Create React App 项目
- en: You should begin by picking a primary `Development` directory that you want
    all of your development work for this book to take place in. Wherever that directory
    is (I'm always a fan of a `Development` directory somewhere in my `home` folder
    or `Documents` folder), you'll then create a new project. This will be a throwaway
    project, since we're going to instead focus on playing around with Create React
    App and getting comfortable with starting from a blank project. Let's create a
    new project, which we will call `homepage`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该首先选择一个主要的`开发`目录，您希望所有关于这本书的开发工作都发生在这个目录中。无论这个目录在哪里（我总是喜欢在我的`home`文件夹或`Documents`文件夹中的某个地方创建一个`开发`目录），然后您将创建一个新的项目。这将是一个一次性项目，因为我们将专注于尝试使用
    Create React App 并熟悉从空白项目开始。让我们创建一个新的项目，我们将称之为`homepage`。
- en: 'For this throwaway project, we''ll pretend we''re writing a fancy `homepage`
    replacement. You can actually pick whatever sort of project you want, but we will
    be throwing this preliminary project away after this chapter. After you build
    your project, you should see the following output:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个一次性项目，我们将假装我们正在编写一个花哨的`homepage`替代品。您实际上可以选择任何类型的项目，但我们将在这个章节之后丢弃这个初步项目。在您构建项目后，您应该看到以下输出：
- en: '[PRE0]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Those instructions that we see after successfully creating a project are critical
    to our workflow in Create React App. By default, there are four main commands
    (and a large number of options) bundled into Create React App. Also, if you are
    using `npm` instead of Yarn, note that a lot of the comments and output in the
    Create React App CLI help pages refer to Yarn primarily. Now, these commands (`start`,
    `build`, `test`, and `eject`) are relatively self-explanatory, but it is still
    important to dive a little further and learn a bit more about them.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功创建项目后，我们看到的那些说明对于我们在 Create React App 中的工作流程至关重要。默认情况下，Create React App 中捆绑了四个主要命令（以及大量选项）。如果您使用的是`npm`而不是
    Yarn，请注意，Create React App CLI 帮助页面中的许多注释和输出主要指的是 Yarn。现在，这些命令（`start`、`build`、`test`和`eject`）相对容易理解，但仍然很重要，要进一步深入了解它们。
- en: A quick look at the options of CRA
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 快速查看 CRA 的选项
- en: Before we can dive into building out the app of our dreams with Create React
    App, we'll have to start by analyzing each of the commands that come with Create
    React App and what each of them do, plus when to use each command!
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们能够使用 Create React App 构建我们梦想中的应用程序之前，我们必须首先分析 Create React App 中的每个命令以及它们各自的功能，以及何时使用每个命令！
- en: 'Each of the commands corresponds with a specific part of the software development
    life cycle: building the application, running a development server, running the
    tests, and deep customization and configuration. Let''s explore each of the commands
    in greater detail!'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 每个命令都与软件开发生命周期的特定部分相对应：构建应用程序、运行开发服务器、运行测试以及深度定制和配置。让我们更详细地探索每个命令。
- en: The yarn start command
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Yarn start 命令
- en: The function of this command is to *start the development server*.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令的功能是*启动开发服务器*。
- en: Running `start` on your Create React App project will bring your project from
    code to your web browser. That is to say, it will take your project's code and
    compile everything together. From there, it will load a development server with
    a default starter template. The other nice thing about this is that it will actually
    pick up any changes you make to any code (assuming you save that code), so you
    don't have to constantly play the game of make a change, save the file, restart
    the server, refresh the browser; instead, you will have instant feedback for any
    of the changes that you make.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的 Create React App 项目上运行`start`会将您的项目从代码转换到您的网页浏览器。也就是说，它将编译项目的所有代码。从那里，它将加载一个带有默认起始模板的开发服务器。关于这一点，还有另一个好处是，它实际上会捕捉到您对任何代码所做的任何更改（假设您保存了这些代码），因此您不必不断地进行更改、保存文件、重新启动服务器、刷新浏览器；相反，您将对所做的任何更改立即获得反馈。
- en: 'Starting off with a completely fresh Create React App project and running `start`
    will yield the following:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 从一个完全全新的 Create React App 项目开始，并运行`start`将产生以下结果：
- en: '![](img/c2af6bbe-e33c-4d31-b4d2-55a984c78e2e.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c2af6bbe-e33c-4d31-b4d2-55a984c78e2e.png)'
- en: The yarn build command
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: yarn build 命令
- en: The function of this command is that it *bundles the app into static files for
    production*.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令的功能是将应用程序打包成用于生产的静态文件*。
- en: Running `build` takes the application and turns it into something more production-ready.
    What does that mean? Well, if you're already pretty comfortable with what tools
    such as webpack and brunch do in terms of turning them into production sites,
    you basically already know what this accomplishes. If, on the other hand, this
    all sounds incredibly confusing to you, I'm going to take a little bit of time
    and explain it in slightly less vague terms.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 `build` 将应用程序转换成更适用于生产的版本。这意味着什么？好吧，如果你已经对 webpack 和 brunch 等工具如何将它们转换为生产网站相当熟悉，那么你基本上已经知道这能完成什么。另一方面，如果你觉得这一切都极其令人困惑，我将花一点时间，用稍微不那么模糊的术语来解释它。
- en: Essentially, most browsers can't handle code written for Create React App projects
    just by default. There is a lot of work that needs to be done in taking the code
    and translating it into something that makes more sense for the browsers, ensuring
    that it doesn't need to rely on help to interpret everything. From there, the
    code is also minified! It shrinks things down by renaming functions and variables,
    removing white space where it can, and doing small optimizations here and there
    until the code is reduced to a very clean and usable version. Everything is compressed
    and the file is condensed down as much as it possibly can to reduce the download
    time (which is important if you're targeting a mobile audience that may not have
    great internet speed).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 从本质上讲，大多数浏览器默认情况下无法处理为 Create React App 项目编写的代码。需要对代码进行大量工作，将其转换为对浏览器更有意义的形式，确保它不需要依赖帮助来解释一切。然后，代码还会被压缩！通过重命名函数和变量、尽可能删除空白，以及在这里和那里进行一些小的优化，直到代码被缩减到一个非常干净且可用的版本。所有内容都被压缩，文件尽可能缩小，以减少下载时间（如果你针对的是可能没有良好互联网速度的移动受众，这一点很重要）。
- en: Minified means exactly what it sounds like. It is the condensing of code into
    much smaller values, making it unreadable to humans but highly digestible for
    computers!
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 压缩的意思就是听起来那样。它是将代码压缩成更小的值，使人类难以阅读，但对计算机来说却非常易于消化！
- en: The yarn test command
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: yarn test 命令
- en: This function *starts the test runner*.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数*启动测试运行器*。
- en: 'Running `test` does exactly what you''d expect it to do: runs all of your tests
    for your application. By default, when you spin up a new project with Create React
    App, your project will include many extra tools that should all be ready for you
    to start hacking away at the tests. This is especially helpful if you choose to
    approach a more test-driven development approach to your project, something that
    can be incredibly useful in a frontend development world.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 `test` 正如你所期望的那样：运行你应用程序的所有测试。默认情况下，当你使用 Create React App 启动一个新项目时，你的项目将包括许多额外的工具，所有这些工具都应该准备好让你开始测试。如果你选择以更测试驱动的方式处理项目，这特别有用，在前端开发世界中这可能非常有用。
- en: 'The first time you run `test`, you should see some output on your screen that
    may look a little like this:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次运行 `test` 时，你应该在屏幕上看到一些输出，可能看起来有点像这样：
- en: '[PRE1]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Even better than all of this being built and provided to you is all of the options
    and additional tools that you get along the way for this! Getting a test framework
    set up and running consistently in your application can be a major pain in the
    neck, so having this figured out for you makes your life a thousand times easier.
    On top of all of this, the test watcher that comes with Create React App projects
    will also watch and live-reload on changes made to any related files, similar
    to the `start` command.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 不仅如此，所有这些构建和提供给你的选项和附加工具都非常好！在应用程序中设置测试框架并使其持续运行可能会非常痛苦，所以这一切都为你解决，让你的生活变得容易一千倍。除此之外，Create
    React App 项目附带的测试监视器还会监视并实时重新加载对任何相关文件所做的更改，类似于 `start` 命令。
- en: 'These are just the defaults. It''s worth taking a look at some of the extra
    commands that come along with our test watcher:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这些只是默认设置。值得看看一些与我们的测试监视器一起提供的额外命令：
- en: '`Press a to run all tests`: Like the command says, if you press *A* in that
    window, it will just decide to run every single test in your project from zero
    and output the results. Use this if you need it and need to verify a fully-green
    test suite at any time.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`按a键运行所有测试`：正如命令所说，如果你在那个窗口按*A*键，它就会决定从零开始运行你项目中所有的单个测试，并输出结果。当你需要它并需要在任何时间验证一个完全绿色的测试套件时，请使用此功能。'
- en: '`Press f to run only failed tests`: I speak from personal experience when I
    say setting something such as this up in the past was an absolutely dreaded task.
    This is great when you''re taking an approach of *red, green, refactor* in your
    project and want only the tests that failed last time and are just trying to get
    those to pass. You can use this as part of your development methodology to slowly
    clear away the cruft of your application''s failing tests until you''re back to
    all of them passing!'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`按f键只运行失败的测试`：当我提到过去设置这样的东西时，我是在个人经验的基础上说的，这是一项绝对令人讨厌的任务。当你采取*红色、绿色、重构*的项目方法，只想运行上次失败的测试，并试图让这些测试通过时，这真是太好了。你可以将此作为你的开发方法的一部分，逐渐清除应用程序失败测试的冗余，直到所有测试都通过！'
- en: '**Red, green, refactor**: This refers to a common pattern of development where
    you write your tests first with the intention of them failing, then write the
    minimum amount of code to make them pass, then refactor the code until they break
    again, and repeat the cycle. While this is usually used in an interview context
    instead of real-world development, the process itself is very much a real-world
    process.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**红色、绿色、重构**：这指的是一种常见的开发模式，你首先编写测试，目的是让它们失败，然后编写最少的代码让它们通过，然后重构代码直到它们再次失败，然后重复这个循环。虽然这通常在面试环境中而不是实际开发中使用，但这个过程本身是一个非常现实的过程。'
- en: '`Press p to filter by a filename regex pattern`: This is a very cool bit of
    functionality. Let''s say you modified some code that affected all functionality
    related to users, but you have a giant test suite and don''t want to test the
    entire thing. You could instead target all user code by hitting *P*, and then
    typing in `user` and seeing what tests run.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`按p键通过文件名正则表达式模式过滤`：这是一个非常酷的功能。假设你修改了一些代码，影响了所有与用户相关的功能，但你有一个巨大的测试套件，不想测试整个套件。你可以通过按*P*键来针对所有用户代码，然后输入`user`并查看哪些测试运行。'
- en: '`Press t to filter by a test name regex pattern`: Similar to the previous option,
    but this goes a step further by looking at what your tests are named (more on
    this in a later chapter) and runs tests based on those descriptions instead of
    by the filenames the tests are located in.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`按t键通过测试名称正则表达式模式过滤`：类似于前面的选项，但它更进一步，通过查看你的测试是如何命名的（更多内容将在后面的章节中介绍），并根据这些描述而不是测试文件所在的文件名来运行测试。'
- en: '`Press q to quit watch mode`: There is not much to explain here; this will
    quit the test watcher.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`按q键退出监视模式`：这里没有太多要解释的；这将退出测试监视器。'
- en: '`Press Enter to trigger a test run`: Pressing *Enter* will just redo whatever
    your last test was, which is very helpful when you''re using one of the regex
    pattern options but don''t want to have to retype the pattern every single time.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`按Enter键触发测试运行`：按下*Enter*键将重新运行你最后的测试，这在使用正则表达式选项时非常有帮助，但你不想每次都重新输入模式。'
- en: The yarn eject command
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: yarn eject命令
- en: Removes Create React App scripts and preset configurations and copies build
    dependencies, configuration files, and scripts into the app directory. If you
    do this, you can't go back to using Create React App on your project!
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 移除Create React App脚本和预设配置，并将构建依赖项、配置文件和脚本复制到应用目录中。如果你这样做，你就不能回到在你的项目中使用Create
    React App了！
- en: For this one, it is worth taking a look at what the documentation says for this
    command. In layman's terms, this turns your project from a Create React App project,
    turns it into a Webpack configuration, and removes a lot of details of Create
    React App and the React Scripts project that essentially hides some of the details
    from you. A similar concept would be buying a computer pre-built versus assembling
    it yourself (or reassembling it). You may start off wanting everything all put
    together for you, but maybe some day you'll want to add some more RAM or replace
    the video card, at which point you'll have to open up what was previously a black
    box to enable you to configure things further!
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个命令，值得看看文档中对此的说明。用通俗易懂的话来说，这个命令将你的项目从Create React App项目转换成Webpack配置，并移除了很多Create
    React App和React Scripts项目的细节，这些细节实际上隐藏了一些信息。一个类似的概念是购买预装好的电脑与自行组装（或重新组装）电脑。你可能一开始希望所有东西都为你准备好，但也许有一天你会想要添加更多的RAM或更换显卡，这时你将不得不打开之前是黑盒的部分，以便进一步配置！
- en: This is also something you might do if you need to go outside of the confines
    of the default project structure and configuration that you get from a base project.
    This will allow you to turn it back into a standard Webpack project and add new
    libraries, change the defaults and baseline details, or go even further and swap
    out other core components.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要超出从基础项目获得的标准项目结构和配置的局限，你可能会这样做。这将允许你将其转换成标准的Webpack项目，添加新的库，更改默认和基线细节，或者更进一步，替换其他核心组件。
- en: Let's explore the created project
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让我们探索创建的项目
- en: Finally, we should take a little time to see what precisely gets created and
    thrown into your project.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们应该花一点时间看看究竟创建了什么，并将其放入你的项目中。
- en: Create React App will start off by generating a README for your project called
    `README.md`. This is a markdown-formatted file that tells other people how to
    use your project effectively (or, if you're like me, it reminds you a few months
    down the line how to use all of the tools and tricks you've implemented in the
    project down the line).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Create React App将为你的项目生成一个名为`README.md`的README文件。这是一个Markdown格式的文件，告诉其他人如何有效地使用你的项目（或者，如果你像我一样，几个月后会提醒你如何使用项目中实施的所有工具和技巧）。
- en: 'You will also get a **favicon**, which is that little icon that shows up next
    to your website path in the address bar, and is used for any bookmarks to your
    application down the line. Next, we have the public or `index.html` file, which
    is the primary workhorse that includes all of your fancy React code, and more
    importantly, tells the web browser where to render your React application to;
    in our case, we have a `div` element that acts as the main target for React to
    render to. The source of the file is, by default, as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 你还会得到一个**favicon**，这是显示在地址栏中你的网站路径旁边的小图标，并且用于后续对应用程序的任何书签。接下来，我们有公共的或`index.html`文件，这是主要的执行文件，包含了你所有的花哨的React代码，更重要的是，它告诉网络浏览器在哪里渲染你的React应用程序；在我们的例子中，我们有一个`div`元素，它作为React渲染的主要目标。文件的来源默认如下：
- en: '[PRE2]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'I mentioned a `div` element that acted as the main React render target: the
    `div` with an `id` of `root` acts as our primary render target and is the critical
    component to make your application function. Remove this and your application
    will not render correctly in the browser anymore! Following that, there is the
    `package.json` manifest file. This stores all of the dependencies that your project
    uses, plus some of the metadata used to describe your project (which might include
    the name, the version, the description, or some other pieces of metadata). We
    also have a `yarn.lock` file if you''re using Yarn, which locks down the list
    of libraries and dependencies that your project is using in a way that prevents
    your project from randomly breaking when one of those libraries updates.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我提到了一个作为主要React渲染目标的`div`元素：具有`id`为`root`的`div`元素作为我们的主要渲染目标，是使你的应用程序正常工作的关键组件。移除它后，你的应用程序在浏览器中将无法正确渲染！接下来是`package.json`清单文件。它存储了你的项目使用的所有依赖项，以及一些用于描述项目的元数据（可能包括名称、版本、描述或其他元数据）。如果你使用Yarn，我们还有一个`yarn.lock`文件，它以防止项目在某个库更新时随机崩溃的方式锁定项目使用的库和依赖项列表。
- en: All of your project's dependencies, libraries, and things that make it tick
    behind the scenes live in the `node_modules` directory. This also brings us into
    the `src` directory, which is arguably the most important directory in our entire
    project structure! It is where all of the work that we're going to be doing—all
    of the source code—will live.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 您项目的所有依赖项、库以及使项目在幕后运作的东西都位于`node_modules`目录中。这也带我们进入了`src`目录，这可以说是我们整个项目结构中最重要的目录！它将存放我们即将进行的所有工作——所有源代码。
- en: Inside of that directory, we have our `index.js` file, which handles our main
    render call for React, supported by a package called `ReactDOM`. This takes in
    our `App.js` component, which is our primary root-level component, and tells React
    where that needs to get rendered to back in that `index.html` file I showed you
    earlier.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在该目录内，我们有`index.js`文件，它处理React的主要渲染调用，由名为`ReactDOM`的包支持。这个包接收我们的`App.js`组件，这是我们主要的根级组件，并告诉React将其渲染到之前向您展示的`index.html`文件中。
- en: We also get a little bit of style by default with an `index.css` file. This
    is the base-level style sheet that our project will use and we'll be configuring
    on top of.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还默认获得一些样式，通过`index.css`文件。这是我们的项目将使用的基级样式表，我们将在其基础上进行配置。
- en: In terms of our non-test code, `App.js` is the final component that we get through
    Create React App by default. What is in there is not particularly important to
    us, because we're just going to remove all of the code in that file and start
    over anyways! `App.css` stores the style sheet for that component, which allows
    us to make sure that any style included for each component can be stored and configured
    independently of each other. We're also given the React logo in the form of a
    **Scalable Vector Graphics** (**SVG**) file, which is the React logo (`logo.svg`).
    We don't need that, so feel free to delete it!
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的非测试代码方面，`App.js`是通过Create React App默认得到的最终组件。里面的内容对我们来说并不特别重要，因为我们只是会删除该文件中的所有代码，然后从头开始！`App.css`存储该组件的样式表，这使我们能够确保每个组件包含的任何样式都可以独立存储和配置。我们还以**可缩放矢量图形**（**SVG**）文件的形式提供了React标志，即React标志（`logo.svg`）。我们不需要它，所以请随意删除它！
- en: '`serverWorker.js` is a file that tells our app how to exist/function as a service
    worker for a **Progressive Web App**, but we''ll dive into this in a later chapter
    where we focus specifically on progressive web applications!'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`serverWorker.js`是一个文件，它告诉我们的应用如何作为一个**渐进式Web应用**的服务工作者存在/工作，但我们将在这个章节的后面深入探讨，届时我们将专注于渐进式Web应用！'
- en: Finally, we have the only pre-built test for us. The `App.test.js` file contains
    the suite (not a suite, I suppose, since it's only one test, but it will become
    a suite over time) of tests just for our `App.js` component. That's it! That's
    the default project structure for our Create React App project!
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们有一个为我们预构建的测试。`App.test.js`文件包含针对我们的`App.js`组件的测试套件（我想不是套件，因为它只有一个测试，但随着时间的推移，它将变成套件）。这就是全部！这就是我们的Create
    React App项目的默认项目结构！
- en: Adding code to our project
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向我们的项目中添加代码
- en: One of the easiest ways to understand the default project structure is to actually
    get in there and start messing around with things, so let's do precisely that!
    We'll delete some of the default code that comes with our project and start building
    things up ourselves to get a good feel for how the project should be structured
    and learn how each file interacts for when we start playing around and changing
    the file structure!
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 理解默认项目结构的最简单方法之一就是实际进入其中并开始尝试修改，所以让我们这么做！我们将删除项目附带的一些默认代码，并自己构建一些内容，以获得项目应该如何结构化的良好感觉，并学习每个文件如何交互，以便我们在开始玩耍和更改文件结构时了解这些。
- en: Creating our first component
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建我们的第一个组件
- en: 'To create our first component, follow these steps:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建我们的第一个组件，请按照以下步骤操作：
- en: Open up the newly-created project in your favorite text editor, and run the
    `start` command in that project as well to bring up the browser window to see
    the results of any changes we make along the way.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您最喜欢的文本编辑器中打开新创建的项目，并在该项目中运行`start`命令，以便打开浏览器窗口查看我们沿途所做的任何更改的结果。
- en: 'Let''s do something all developers love to do: delete old code!'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们做所有开发者都爱做的事情：删除旧代码！
- en: Once in the code, we can work through the main primary ways to work with React
    in the latest JavaScript syntax changes that are included in Babel. Given that,
    let's take a look at the ways to work with React classes. We can either use functions,
    or we can use classes to introduce React code to our code base. We'll start off
    with just using functions and over time incorporate classes as well, and we'll
    discuss how, when, and why to choose each along the way. Granted, either creation
    method requires React regardless of the implementation method, so we need to actually
    import it at the start of our code.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦代码中有了，我们可以通过 Babel 中包含的最新 JavaScript 语法变化来了解与 React 交互的主要方法。鉴于这一点，让我们看看与 React
    类交互的方法。我们可以使用函数，或者我们可以使用类将 React 代码引入我们的代码库。我们将从仅使用函数开始，随着时间的推移，也将引入类，并且我们将讨论如何、何时以及为什么选择每种方法。当然，无论实现方法如何，都需要
    React，因此我们需要在代码的开始处实际导入它。
- en: 'At the very top of the `App.js` file, we''re going to add our `import` statement:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `App.js` 文件的顶部，我们将添加我们的 `导入` 语句：
- en: '[PRE3]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This line tells JavaScript that we want to `import` the React library, and that
    we can find the React class from the `react npm` library (Create React App obviously
    already included that for us). This gives our code the React support that we need,
    plus it adds support for JSX templates, and everything else we need to be able
    to write base-level JavaScript !
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行代码告诉 JavaScript 我们想要 `导入` React 库，并且我们可以从 `react npm` 库（Create React App
    显然已经为我们包含了它）中找到 React 类。这为我们提供了所需的 React 支持，并且还增加了对 JSX 模板的支持，以及我们编写基础级 JavaScript
    所需要的一切！
- en: 'With our imports out of the way, let''s write up our first bit of code:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在处理完导入之后，让我们编写我们的第一段代码：
- en: '[PRE4]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Here, we're diving a little further into some new JavaScript syntax that you
    may not be used to if you're coming from the older JavaScript world. The previous
    line is responsible for creating something called a constant function, which limits
    our ability to redefine or modify the `App` function after the fact. This function
    that we're writing doesn't take any arguments and always returns the same thing.
    This is a functional component, so we need to write the `return` statement to
    return out a JSX template that tells React how to render our React component to
    the browser. We also make sure to tell React that our main component should have
    a CSS class name called `App`.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将进一步探讨一些新的 JavaScript 语法，如果你来自较旧的 JavaScript 世界，你可能不太熟悉。上一行负责创建一个称为常量函数的东西，这限制了我们在事后重新定义或修改
    `App` 函数的能力。我们正在编写的这个函数不接受任何参数，并且总是返回相同的内容。这是一个函数组件，因此我们需要编写 `return` 语句来返回一个
    JSX 模板，告诉 React 如何将我们的 React 组件渲染到浏览器中。我们还确保告诉 React，我们的主要组件应该有一个名为 `App` 的 CSS
    类名。
- en: The `className`, not `class`! Class is a reserved keyword in JavaScript , so
    that's why React needs this one little gotcha!
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`className` 而不是 `class`！在 JavaScript 中，`class` 是一个保留关键字，这就是为什么 React 需要这个小陷阱！'
- en: 'At the end of this code, we''ll need to add an `export` statement to enable
    other files (such as our `index.js` file, specifically) to be able to import the
    right modules into our code base:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这段代码的末尾，我们需要添加一个 `export` 语句，以便其他文件（例如我们的 `index.js` 文件，具体来说）能够将正确的模块导入到我们的代码库中：
- en: '[PRE5]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Our end result is that when our browser refreshes, we should see Homepage! pop
    up on the screen!
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最终的结果是，当我们的浏览器刷新时，我们应该在屏幕上看到 Homepage! 弹出！
- en: Wait, what is JSX?
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 等等，什么是 JSX？
- en: You may not know what JSX is, but if you do, feel free to skip this. Otherwise,
    I'm going to provide a very quick summary for you!
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能不知道 JSX 是什么，但如果你知道，请随意跳过。否则，我将为你提供一个非常快速的总结！
- en: To put it simply, JSX is just a mixture of JavaScript and HTML that functions
    essentially as a templating language. This is a bit of a simplified explanation;
    JSX is actually some smart syntax wrappers around calls to `React.createElement`,
    but put together in a way that more closely resembles HTML. This way, we can write
    interface code that is incredibly similar to HTML, which allows developers, designers,
    and others to work with our code (assuming they're already comfortable working
    with HTML), but we also get access to a few extra features since it is a JavaScript
    -based templating language.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 简单来说，JSX 就是 JavaScript 和 HTML 的混合，本质上是一个模板语言。这是一个简化的解释；JSX 实际上是围绕 `React.createElement`
    调用的智能语法包装器，但以更接近 HTML 的方式组合在一起。这样，我们可以编写与 HTML 极其相似的界面代码，这使得开发人员、设计师和其他人可以与我们的代码一起工作（假设他们已经熟悉
    HTML），但我们也可以访问一些额外的功能，因为它是基于 JavaScript 的模板语言。
- en: The first bit of functionality that we get is that we can actually embed any
    JavaScript statements inside of any JSX by wrapping it in curly brackets! A gotcha
    to this, though, is that we need to remember that JSX is JavaScript first, and
    as a result there are some words and syntax here and there are are reserved (class
    being the prime example of this), so there are specific variations you'll need
    to use when writing JSX (such as `className`).
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们获得的第一项功能是，我们实际上可以在任何 JSX 中嵌入任何 JavaScript 语句，只需将其包裹在花括号中！不过，需要注意的是，我们需要记住
    JSX 是 JavaScript，因此这里有一些单词和语法是保留的（类是这个例子中的主要例子），所以在编写 JSX 时需要使用特定的变体（例如 `className`）。
- en: Embedding style sheets in our component
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在我们的组件中嵌入样式表
- en: 'Working with React and creating these nice browser-based interfaces is great,
    but without any kind of styling in place, the whole thing is going to look pretty
    plain overall. The good news is that Create React App also provides you a nice
    framework for cleaning up your interfaces as well! Right now, since we deleted
    a bunch of code, we currently should have an entirely blank `App.css` file. We''ll
    need to head back to the `App.js` file and add the following line to the top to
    make sure it includes our new `App` component style sheet:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 React 和创建这些基于浏览器的界面很棒，但没有任何样式，整体看起来会很单调。好消息是 Create React App 也为你提供了一个很好的框架来清理你的界面！目前，由于我们删除了大量代码，我们目前应该有一个完全空的
    `App.css` 文件。我们需要回到 `App.js` 文件，并在顶部添加以下行以确保它包含我们的新 `App` 组件样式表：
- en: '[PRE6]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This will tell React to make sure the `App` style sheet is included as part
    of our component''s style sheet. If `App.css` remains empty, though, that won''t
    amount to much, so let''s also change our default style sheet to something a little
    more interesting:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这将告诉 React 确保将 `App` 样式表包含为组件样式表的一部分。如果 `App.css` 保持为空，那么这不会产生太大影响，所以让我们也将我们的默认样式表更改为更有趣的内容：
- en: '[PRE7]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Save the file, head back to your browser window, and you should see something
    similar to the following:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 保存文件，回到你的浏览器窗口，你应该会看到以下类似的内容：
- en: '![](img/7834d285-0bed-490b-862f-655b5e0bb8c9.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/7834d285-0bed-490b-862f-655b5e0bb8c9.png)'
- en: 'Okay, we have some code that functions now, and that''s a good place to start
    in our application, so we''ll hop over to `index.js` and quickly figure out precisely
    how the component gets into the browser. Open up `src/index.js`:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们现在有一些可以工作的代码，这是我们在应用程序中开始的好地方，所以我们将跳转到 `index.js` 并快速弄清楚组件是如何进入浏览器的。打开
    `src/index.js`：
- en: '[PRE8]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: At this point, we've seen `import React` already. The previous line imports
    `ReactDOM` (which houses the main `render()` function) that we need to be able
    tell React what component to render, and where to render it to! This comes out
    of the separate `react-dom npm` module.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到了 `import React`。上一行导入 `ReactDOM`（其中包含主要的 `render()` 函数），我们需要它来告诉
    React 要渲染哪个组件，以及在哪里渲染它！这来自于独立的 `react-dom npm` 模块。
- en: After that, we have another style sheet included, this time being `index.css`.
    This will function as our global, baseline CSS file. After that, we `import` our
    `App` component (remember our `export` statement that we wrote earlier?) with `import
    App from './App'`. Note that we can leave the `.js` off completely, and that we
    include a dot and a slash in front of the name of the file; this tells Node that
    we're importing something from our local file system and not from an NPM module
    instead! `App.js` lives as a `local` file inside of our `src` directory, so the
    local include suffices.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们还包括了另一个样式表，这次是 `index.css`。这将成为我们的全局、基线 CSS 文件。之后，我们使用 `import` 语句导入 `App`
    组件（记得我们之前写的 `export` 语句？）使用 `import App from './App'`。注意，我们可以完全省略 `.js` 扩展名，并在文件名前包含一个点和斜杠；这告诉
    Node 我们正在从本地文件系统导入，而不是从 NPM 模块导入！`App.js` 作为 `local` 文件位于我们的 `src` 目录中，所以本地包含就足够了。
- en: We end with a new line, `import registerServiceWorker` from `./registerServiceWorker`,
    which allows us access to implementing service workers for progressive web apps
    in our Create React App. Progressive web applications are a bit outside of the
    scope of this tutorial series.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们以一个新的行结束，`import registerServiceWorker from './registerServiceWorker'`，这允许我们访问在
    Create React App 中实现渐进式网络应用的 Service Workers。渐进式网络应用略超出了本教程系列的范畴。
- en: '`render()` is a function call that takes two simple arguments:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`render()` 是一个函数调用，它接受两个简单的参数：'
- en: Which component to render
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要渲染哪个组件
- en: Where to render that component
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在哪里渲染该组件
- en: 'Since our component name was imported as `App`, and because we''re using JSX,
    we can treat `App` like an HTML tag:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的组件名称被导入为 `App`，并且因为我们使用 JSX，我们可以将 `App` 当作一个 HTML 标签来处理：
- en: '[PRE9]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Remember, all tags in JSX need to be closed, whether via shorthand syntax such
    as in the preceding example or longer syntax such as following:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，所有 JSX 中的标签都需要关闭，无论是通过简写语法，如前面的示例，还是通过较长的语法，如下所示：
- en: '[PRE10]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The final piece to our rendering puzzle is that we need to figure out where
    in the DOM the React component is that we need to render to, through the `document.getElementById('root')` line.
    This tells JavaScript that it needs to find an element on the page with an `id`
    of `root`, which will end up being our rendering target!
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们渲染难题的最后一部分是我们需要确定 React 组件需要渲染到的 DOM 中的位置，通过 `document.getElementById('root')`
    这一行。这告诉 JavaScript 需要在页面上找到一个具有 `id` 为 `root` 的元素，这最终将成为我们的渲染目标！
- en: There we are! We have an admittedly basic, yet still a full start, application
    in React that we wrote in almost no time at all, and we had no stress or headaches
    trying to set up our development server, figure out which libraries we needed,
    make the code and browser window auto-reload, or, well, you get the idea.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！我们承认这是一个基础但完整的 React 应用程序，我们几乎在没有任何时间的情况下就写出来了，而且在设置开发服务器、确定我们需要哪些库、使代码和浏览器窗口自动重新加载，或者，嗯，你懂的，我们都没有压力或头痛。
- en: Seriously, what more can a developer ask for?
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 严肃地说，开发者还能要求什么更多呢？
- en: Looking forward – what will we do?
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 展望未来——我们将做什么？
- en: What more can we ask for? Well, a lot, actually! In the next chapters, we'll
    go more into depth as we get comfortable with the development workflows afforded
    to us through Create React App. Let's explore the plan for this project that we're
    going to be building (since the **hello-world** application was just an opportunity
    for us to play around with things and won't be our final project going forward).
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还能要求什么更多？实际上，还有很多！在接下来的章节中，我们将随着对 Create React App 提供的开发工作流程的熟悉，更深入地探讨。让我们探索我们将要构建的这个项目的计划（因为“hello-world”应用程序只是让我们有机会玩玩，而且不会成为我们未来的最终项目）。
- en: The project plan
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目计划
- en: Over the course of this book, we will build an application entirely using Create
    React App, encompassing a number of common modern React development techniques,
    methods, and best practices. We will spend time exploring the different libraries
    that are available and how to best utilize them in our Create React App project
    and with minimal effort too! We'll build a project that will take advantage of
    the very best of modern JavaScript development, taking advantage of the latest
    features of Babel and React. We'll use the most recent syntax changes in JavaScript
    to their full effect! We will make sure our application is fully tested and bulletproof,
    keep it beautiful with CSS modules and **Syntactically Awesome Style Sheets** (**SASS**),
    and even simulate the backend server so that we won't even need a separate backend
    server just to do development!
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的整个过程中，我们将使用 Create React App 完全构建一个应用程序，涵盖许多常见的现代 React 开发技术、方法和最佳实践。我们将花时间探索可用的不同库，以及如何在我们的
    Create React App 项目中最佳地利用它们，而且还要尽可能少花力气！我们将构建一个项目，将充分利用现代 JavaScript 开发的最佳之处，利用
    Babel 和 React 的最新功能。我们将利用 JavaScript 中最新的语法变化来发挥其全部作用！我们将确保我们的应用程序经过全面测试且坚不可摧，使用
    CSS 模块和 **Syntactically Awesome Style Sheets**（**SASS**）保持其美观，甚至模拟后端服务器，这样我们甚至不需要一个单独的后端服务器来开发！
- en: Finally, we'll explore how to make our application work online or offline through
    service workers, and then top off our application by getting it production-ready,
    and making our application minimized, clean, and deployable!
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将探索如何通过服务工作者使我们的应用程序能够在在线或离线状态下工作，然后通过使其生产就绪来完善我们的应用程序，使其最小化、整洁且可部署！
- en: Summary
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we explored the options that are made available to us when
    we're starting up a Create React App project. We also spent a good amount of time
    exploring the history of frontend development before Create React App, and even
    got a little bit of time to sit and put together a nice little starter application
    as an exercise in exploring the default project structure.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了在启动 Create React App 项目时我们所拥有的选项。我们还花了很多时间探索了 Create React App 之前的前端开发历史，甚至抽出一些时间坐下来，通过探索默认项目结构来构建一个漂亮的小型入门级应用程序。
- en: You should now feel much more comfortable with Create React App, the default
    project structure, and the language constructs that will enable us to get more
    work done in the later chapters, so without any further ado, let's charge ahead
    and start building a more complex application, which will serve as the basis for
    each chapter for the rest of our project.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在应该对 Create React App 的默认项目结构和将使我们能够在后续章节中完成更多工作的语言结构感到更加舒适，所以无需多言，让我们奋勇前进，开始构建一个更复杂的应用程序，这将成为我们项目剩余部分每个章节的基础。
