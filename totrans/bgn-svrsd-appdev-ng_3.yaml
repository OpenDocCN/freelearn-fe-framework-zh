- en: Chapter 3. Server-Side Rendering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How does a normal app render?
  prefs: []
  type: TYPE_NORMAL
- en: Let's first take a look at how a normal Angular application without server-side
    rendering behaves.
  prefs: []
  type: TYPE_NORMAL
- en: When we start our server in development mode, using `ng serve,` and we use the
    **View Source** option in our browser to check the source, we see that the only
    thing that gets rendered is the output from our `src/index.html` file, with a
    few scripts appended at the bottom.
  prefs: []
  type: TYPE_NORMAL
- en: 'These scripts will be downloaded by the browser and after they have been downloaded
    and executed, the application will display:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Server-Side Rendering](img/2.1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: While this works in some situations, in others this can become problematic.
    If the user of your app is on a slow connection or slow device, it will take time
    to load and parse the scripts, and during that waiting time, the user sees a blank
    page.
  prefs: []
  type: TYPE_NORMAL
- en: Another issue is that most search engines and social media sites will only read
    the initial *payload* of our website and will not download and execute our client-side
    JavaScript files.
  prefs: []
  type: TYPE_NORMAL
- en: These are the things that will be fixed in this lesson. After we have added
    server-side rendering, we will add support for dynamic metadata and page titles.
    This makes sure that any server-side rendered page has proper metadata, which
    will make these social pages rich in content and will make sure that search engines
    can index the pages properly.
  prefs: []
  type: TYPE_NORMAL
- en: To get the actual loading times, use the status bar of the **Network** tab in
    Chrome Developer Tools.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'One way to experience a slow connection on a normal Chrome browser is to open
    Chrome Developer Tools, go to the **Network** tab, and change the network speed
    from **Online** to **Slow 3G**. When you load the page served by the server, you
    will get an idea of how long it takes for a slow connection to load the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Server-Side Rendering](img/3.21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Lesson Objectives
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this lesson, you will:'
  prefs: []
  type: TYPE_NORMAL
- en: Add server-side rendering to the application that we built in the previous lesson
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add Angular Universal to our application and configure a second app in our Angular
    CLI config
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implement a web server to host our app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add dynamic metadata to our application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating the Server App
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since Angular CLI version 1.6, there has been a generator for adding support
    for Angular Universal. It does this by adding a second app to the Angular CLI
    config, `.angular-cli.json`.
  prefs: []
  type: TYPE_NORMAL
- en: We will refer to this new app as our *server app*, and the one we worked with
    in the previous lesson will be called our *browser app*.
  prefs: []
  type: TYPE_NORMAL
- en: So, what are the differences between the browser and server apps?
  prefs: []
  type: TYPE_NORMAL
- en: Both load another platform which behaves differently.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The browser app uses code splitting, which builds the app in various smaller
    files. This improves load times in the browser. The server builds the app without
    code splitting as there are no benefits to do this on the server.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The browser app loads a greater number of polyfills. These are small JavaScript
    libraries that add functionality to the browser, if the browser does not support
    them yet. This is not needed for the server.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s explore in some more detail what happens when we run the generator:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Generating the Server App](img/2.3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Running this generator will change a few things in the current app:'
  prefs: []
  type: TYPE_NORMAL
- en: It will add a second app to the `apps` array in `.angular-cli.json.`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It will add a dependency for the `@angular/platform-server` package.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It will update `AppModule` and change the `BrowserModule` import.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It will change the way the browser app gets bootstrapped in `src/main.ts.`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Additionally, it creates some new files:'
  prefs: []
  type: TYPE_NORMAL
- en: It generates a new file `src/app/app.server.module.ts` with the `AppServerModule`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `src/main.server.ts` file is created, which exports the `AppServerModule`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A TypeScript config file for the server app is generated in `src/tsconfig.server.json`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As stated above, we have new dependencies in `package.json`. This means we need
    to run `npm install` to make sure the dependencies get installed.
  prefs: []
  type: TYPE_NORMAL
- en: Generating the Angular Universal Application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will create the server app and install the missing dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the terminal in the project directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the generator to add the Universal app. The command is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install the dependencies that were added to `package.json`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Making Our Apps Consistent
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will make some small changes to both the browser app and the server app
    so that they are more consistent:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the terminal in the project directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command to update the `outDir` of the server app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following command to update the `outDir` of the browser app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following command to update the `name` of the browser app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following command to update the `platform` of the browser app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Making Our Apps Consistent](img/2.4.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'The changes will be reflected in `.angular-cli.json`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Making Our Apps Consistent](img/2.5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We've now installed the required dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we have created a new server app in addition to the browser
    app we already had. Let's move on to adding support for Angular Universal in our
    application.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Dependencies for the Server App
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to get our server app working correctly, we need to make sure we load
    two of Angular''s dependencies: `zone.js` and `reflect-metadata`.'
  prefs: []
  type: TYPE_NORMAL
- en: Our browser app loads these dependencies using `polyfills.ts`, and for the server
    app, we will add them to `src/main.server.ts`.
  prefs: []
  type: TYPE_NORMAL
- en: Another dependency that we need to add is the `ModuleMapLoaderModule`. This
    is a third-party module that is needed to make Angular Universal apps work with
    lazy loading.
  prefs: []
  type: TYPE_NORMAL
- en: We will import two dependencies in `src/main.server.ts` so that they are imported
    when the `AppServerModule` is loaded.
  prefs: []
  type: TYPE_NORMAL
- en: 'Additionally, we will enable production mode, just like it''s done for the
    browser app in `src/main.ts`:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the newly created file `src/main.server.ts`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the imports at the top of the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Conditionally enable production mode, depending on the environment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Let's move on to adding this new application to our Angular CLI configuration!
  prefs: []
  type: TYPE_NORMAL
- en: Adding the Server App to Our Angular CLI Configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open a terminal inside the project directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command to install the dependency:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the `src/app/app.server.module.ts` file in your editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following `import` at the top of the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a reference to the imported module to the `imports` array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this section, we added the required dependencies and added the server app
    to our configuration. In the next section, let's explore run scripts and add them
    to our application.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Run Scripts to package.json
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have added a second application to our Angular CLI config, we need
    to make sure we can easily build both applications without having to memorize
    the exact commands.
  prefs: []
  type: TYPE_NORMAL
- en: In order to do so, we will leverage the so-called npm scripts. These scripts
    are used to define operations that can be performed on our application. Examples
    of these operations are building the application, running tests, and deploying
    the application to a staging or production environment.
  prefs: []
  type: TYPE_NORMAL
- en: We can define our npm scripts in the `scripts` section of the `package.json`
    file in the root of our project.
  prefs: []
  type: TYPE_NORMAL
- en: Here, we will add three scripts called `build`, `build:browser`, and `build:server`,
    where the first script will invoke the other two.
  prefs: []
  type: TYPE_NORMAL
- en: This gives us the flexibility to run the two commands at once, or run them independently
    if we like.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get an idea of how these scripts work, consider the following flow:'
  prefs: []
  type: TYPE_NORMAL
- en: The `npm run build` command will first run `npm run build:browser`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When that command is finished, it will run `npm run build:server`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The order in which we run the `build:browser` and `build:server` scripts is
    irrelevant; the scripts are fully independent.
  prefs: []
  type: TYPE_NORMAL
- en: Adding npm Scripts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will add some npm scripts to our `package.json` so we can easily create
    builds for our application:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `package.json` file from the root of our project in the editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Locate the `scripts` object and remove the existing `build` property.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following keys to the `scripts` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Testing the Builds of Both Apps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will test the builds of both the browser and server applications:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a terminal inside the project directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command to build the browser application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Testing the Builds of Both Apps](img/2.6.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Run the following command to build the server application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Testing the Builds of Both Apps](img/2.7.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: If both commands execute without any error messages, we can continue with our
    next step, which is implementing a small web server to host our application.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing a Web Server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that both our applications can be built, we can move on to creating a simple
    server to host our applications.
  prefs: []
  type: TYPE_NORMAL
- en: In order to do this, we will create a simple Node.js server based on Express.js.
  prefs: []
  type: TYPE_NORMAL
- en: We will define our server in a TypeScript file called `server.ts` and run this
    file using the `ts-node` binary that we will install.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The current implementation of Angular Universal depends on Node.js as it is
    implemented in JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: It is possible to run Angular Universal apps using other servers, such as ASP.NET,
    although under the hood the ASP.NET server will invoke a Node.js process to handle
    the Angular Universal part.
  prefs: []
  type: TYPE_NORMAL
- en: 'An example repository of how to run Angular Universal can be found here: [https://github.com/MarkPieszak/aspnetcore-angular2-universal](https://github.com/MarkPieszak/aspnetcore-angular2-universal).'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Server Dependencies
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will install the `ts-node` binary that we will use to execute our server
    file. Additionally, we will install the rendering engine that will be used by
    Express.js to load our Angular Universal app:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a terminal inside the project directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command to install `ts-node`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Installing Server Dependencies](img/2.8.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Creating the server.ts File
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will implement our `server.ts` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this file, we will define our Express.js server and configure it so it can
    render and serve our server app:'
  prefs: []
  type: TYPE_NORMAL
- en: In your editor, create a new file called `server.ts` in the project root.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following `import` statements at the top of the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define the constants that we will use in the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define the `html` view engine. This will let Express.js know which function
    it uses to render HTML files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define the rest of the Express.js defaults. We set our default view engine
    to `html`, the engine we defined in the previous step. Next, we set the root directory
    for our views to reference our `staticRoot`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With the following Express.js defaults, we define that we want to statically
    serve all other files than of type `html`, and that the default route (`*`) is
    to render the `index.html` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start the server and log a message with the host and port:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Adding the npm Script to package.json
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will update `package.json` and add a script to start our server:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `package.json` file in the root of our project in the editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Locate the `scripts` object and remove the existing `start` property.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following key to the `scripts` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Starting the Server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will build and start our app, and test whether it works!
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the complete build using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start the Node.js server using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Starting the Server](img/2.9.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Navigate to the server-side rendered build at: `http://localhost:8080`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify that the application works.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the Chrome menu, go to **View** | **Developer Tools** | **View Source**
    and verify that the application output gets rendered.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this section, we ran our app on a server built using Express.js. The next
    step is to add dynamic metadata, which will help our app become more SEO-friendly.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Dynamic Metadata
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that our pages can be rendered using server-side rendering, we can introduce
    new functionality to enhance the appearance of our app.
  prefs: []
  type: TYPE_NORMAL
- en: At the moment, our app will still only display the default title set in `src/index.html`
    and we won't have any other HTML meta tags added.
  prefs: []
  type: TYPE_NORMAL
- en: To enhance the SEO friendliness of our page, and to make sure there is valuable
    information in our social preview, we want to address this.
  prefs: []
  type: TYPE_NORMAL
- en: Luckily, Angular comes with the `Meta` and `Title` classes, which allow us to
    add dynamic titles and metadata to our pages.
  prefs: []
  type: TYPE_NORMAL
- en: When combined with server-side rendering, the metadata and page title will make
    sure that the pages that are indexed by the search engine have the proper meta
    tags set in the document header, and thus increase findability.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will add a service that allows us to define this data, and
    we will update our container components to call in that service after the data
    is loaded from our resolvers.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the UiService
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open a terminal inside the project directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command to generate the `UiService` and register it in the
    `UiModule`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Creating the UiService](img/2.10.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Open the `src/app/ui/services/ui.service.ts` file in your editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following lines to the class definition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Import `Title` and `Meta` from `@angular/platform-browser`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inject `private title: Title` and `private meta: Meta` in the constructor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a class method called `setMetaData` that takes in a property `config`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code to the body of the `setMetaData` property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Our `UiService` is now ready to be used. We will start by adding it to the components
    in our next section.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Metadata to PostsComponent and ProfileComponent
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will add the metadata to the `PostsComponent`:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `src/app/posts/container/posts/posts.component.ts` file in your editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `UiService` and the `map` operator from `rxjs`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside the constructor, inject `private uiService: UiService`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a class method called `setMetadata()` that accepts a `posts` property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following to the `setMetaData` method. In this method, we will construct
    the dynamic metadata that we will pass to our `setMetaData` method in the `UiService`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the first `map` statement in the `ngOnInit` method to the following
    code. This will pass the data we get from the API through the method we defined
    above:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we will add the metadata to the `ProfileComponent`:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `src/app/posts/container/profile/profile.component.ts` file in your
    editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `UiService` and the `map` operator from `rxjs`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside the constructor, inject `private uiService: UiService`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a class method called `setMetadata()` that accepts a property `profile`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following to the `setMetaData` method. In this method, we will construct
    the dynamic metadata that we will pass to our `setMetaData` method in the `UiService`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the `ngOnInit` method to the following code. This will pass the data
    we get from the API through the method we defined above:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When you now browse through the application, you should see the title of the
    page update, depending on the page you are visiting.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use the **Element Inspector** in Chrome Developer Tools to verify that
    the metadata is being added to the rendered components:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding Metadata to PostsComponent and ProfileComponent](img/2.11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In this section, we have added metadata to our `PostsComponent` and `ProfileComponent`.
    We also created a UiService that allows us to define this data.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this lesson, we have added server-side rendering to our application. We started
    by generating the server app and adding its dependencies. We then added scripts
    to our `package.json` file, before implementing a web server in Express.js. Lastly,
    we saw how to add dynamic metadata to our pages.
  prefs: []
  type: TYPE_NORMAL
- en: In the next lesson, we'll configure service workers for our application.
  prefs: []
  type: TYPE_NORMAL
