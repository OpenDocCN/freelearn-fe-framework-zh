- en: '12'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '12'
- en: Working with Internationalization and Localization
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用国际化与本地化进行操作
- en: In the digital age, applications are accessed by users from every corner of
    the world. Catering to a global audience requires more than just translating content;
    it’s about providing a seamless user experience that respects cultural nuances
    and user preferences. Ensuring that your application speaks the user’s language,
    both literally and figuratively, can significantly enhance user satisfaction and
    engagement.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在数字时代，应用程序被来自世界各地的用户访问。为了满足全球受众的需求，不仅仅是翻译内容；它还涉及到提供无缝的用户体验，尊重文化细微差别和用户偏好。确保您的应用程序在字面意义上和比喻意义上都能使用户的语言，可以显著提高用户满意度和参与度。
- en: So, throughout this chapter, our primary objective is to equip you with the
    knowledge and tools necessary to make your applications universally accessible
    and user-friendly. We’ll do this by deeply exploring the realms of internationalization
    and localization, guiding you through the process of making your Angular applications
    globally friendly with the aid of PrimeNG components. By the end of this chapter,
    you’ll be adept at configuring language support, ensuring your application resonates
    with users irrespective of their geographical or cultural background.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在本章中，我们的主要目标是为您提供必要的知识和工具，使您的应用程序具有普遍的可用性和用户友好性。我们将通过深入探讨国际化与本地化的领域，指导您使用
    PrimeNG 组件使您的 Angular 应用程序成为全球友好的。到本章结束时，您将能够熟练配置语言支持，确保您的应用程序无论用户的地理或文化背景如何，都能引起用户的共鸣。
- en: 'The chapter will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Introducing internationalization and localization
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍国际化与本地化
- en: Exploring popular internationalization libraries for Angular
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索 Angular 的流行国际化库
- en: Working with ngx-translate for internationalization
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 ngx-translate 进行国际化
- en: Working with PrimeNG Locale
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 PrimeNG Locale 进行操作
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'This chapter contains various working code samples on internationalization
    and localization. You can find the related source code in the `chapter-12` folder
    of the following GitHub repository: [https://github.com/PacktPublishing/Next-Level-UI-Development-with-PrimeNG/tree/main/apps/chapter-12](https://github.com/PacktPublishing/Next-Level-UI-Development-with-PrimeNG/tree/main/apps/chapter-12).'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章包含各种关于国际化和本地化的工作代码示例。您可以在以下 GitHub 仓库的 `chapter-12` 文件夹中找到相关源代码：[https://github.com/PacktPublishing/Next-Level-UI-Development-with-PrimeNG/tree/main/apps/chapter-12](https://github.com/PacktPublishing/Next-Level-UI-Development-with-PrimeNG/tree/main/apps/chapter-12)。
- en: Introducing internationalization and localization
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍国际化与本地化
- en: In the realm of global web development, ensuring that applications cater to
    a worldwide audience is paramount. This is where **internationalization** (**i18n**)
    and **localization** (**l10n**) come into play, especially in the context of **Angular**
    applications.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在全球网络开发领域，确保应用程序满足全球受众的需求至关重要。这就是**国际化**（**i18n**）和**本地化**（**l10n**）发挥作用的地方，尤其是在**Angular**应用程序的背景下。
- en: Introducing internationalization (i18n) in Angular applications
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Angular 应用程序中介绍国际化（i18n）
- en: Internationalization, often abbreviated as i18n (because there are 18 letters
    between the ‘i’ and the ‘n’), is the process of designing and preparing your application
    to be usable in different languages. For instance, i18n requires considering language
    and cultural variations during product design, including the use of **Unicode**
    character encoding, avoiding hardcoded text, and allowing sufficient room for
    text expansion.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 国际化，通常缩写为 i18n（因为“i”和“n”之间有 18 个字母），是将您的应用程序设计并准备为在不同语言中使用的过程。例如，i18n 需要在产品设计时考虑语言和文化差异，包括使用**Unicode**字符编码、避免硬编码文本，并允许足够的文本扩展空间。
- en: Note
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Unicode provides universal character encoding, which means that each character
    is assigned a unique code point regardless of the platform, language, or application.
    It ensures that software can handle and display text from different languages
    and scripts, making applications accessible and usable across diverse linguistic
    and cultural contexts. You can read more at [https://unicode.org](https://unicode.org).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Unicode 提供了通用的字符编码，这意味着每个字符都被分配了一个唯一的代码点，无论平台、语言还是应用程序。它确保软件可以处理和显示不同语言和脚本中的文本，使应用程序在多样化的语言和文化环境中可访问和可用。您可以在[https://unicode.org](https://unicode.org)了解更多信息。
- en: There are a plethora of Angular libraries that can support this, allowing you
    to define translations for the content and switch between them seamlessly. We
    will look at these libraries shortly.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多 Angular 库可以支持这一点，允许你定义内容翻译并在它们之间无缝切换。我们很快就会看看这些库。
- en: Understanding the role of localization (l10n) in creating multi-lingual experiences
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解本地化（l10n）在创建多语言体验中的作用
- en: Localization, abbreviated as l10n (as there are 10 letters between ‘l’ and ‘n’),
    is the subsequent step after i18n. It involves adapting the internationalized
    application for a specific region or language by adding locale-specific translations
    and adjusting formats. In essence, while i18n is about making an application translatable,
    l10n is about doing the actual translation and adaptation.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 本地化，简称为 l10n（因为“l”和“n”之间有10个字母），是 i18n 的后续步骤。它涉及通过添加特定区域或语言的本地化翻译和调整格式来适应国际化的应用程序。本质上，虽然
    i18n 是关于使应用程序可翻译的，但 l10n 是关于实际翻译和适应的。
- en: In Angular, once the translations are provided, the application can be compiled
    with these translations to produce a version of the application for a specific
    language or locale.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Angular 中，一旦提供了翻译，就可以使用这些翻译来编译应用程序，以生成特定语言或地区的应用程序版本。
- en: Challenges and considerations for designing internationally friendly applications
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设计国际化友好应用程序的挑战和考虑因素
- en: 'Creating an application that resonates with a global audience is not without
    its challenges:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个能够引起全球受众共鸣的应用程序并非没有挑战：
- en: '**Text expansion**: Some languages might have longer translations for the same
    content. For example, in English, “I’m happy” can be translated as “*Tôi đang
    cảm thấy hạnh phúc*” in Vietnamese; this can cause the UI layout to be affected
    if not properly handled.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文本扩展**：某些语言可能对相同内容的翻译更长。例如，在英语中，“I’m happy”可以翻译成越南语的“*Tôi đang cảm thấy hạnh
    phúc*”；如果不妥善处理，这可能会影响UI布局。'
- en: '**Right-to-left languages**: Languages, such as Arabic or Hebrew, are written
    from right to left, which can require significant layout adjustments. For example,
    the menu items that were originally on the left side need to be moved to the right
    side in Arabic.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**从右到左的语言**：如阿拉伯语或希伯来语这样的语言是从右到左书写的，这可能需要重大的布局调整。例如，原本在左侧的菜单项需要移动到右侧在阿拉伯语中。'
- en: '**Cultural nuances**: Colors, symbols, and images might have different cultural
    connotations in different regions. For example, a thumbs-up gesture is commonly
    used to indicate approval in Western cultures, but it can be offensive or inappropriate
    in some other countries.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文化细微差别**：颜色、符号和图像在不同地区可能有不同的文化含义。例如，竖起大拇指的手势在西方文化中通常用来表示赞同，但在一些其他国家可能会被视为冒犯或不恰当。'
- en: '**Date, time, and number formats**: Different regions have different formats
    for displaying dates, times, and numbers. For example, in the United States, the
    date format is typically “mm/dd/yyyy”, whereas in many European countries, it’s
    “dd/mm/yyyy”.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日期、时间和数字格式**：不同地区显示日期、时间和数字的格式不同。例如，在美国，日期格式通常是“mm/dd/yyyy”，而在许多欧洲国家，则是“dd/mm/yyyy”。'
- en: '**Translation management**: Managing translations efficiently can be challenging,
    especially in large-scale applications with numerous text strings. For instance,
    using translation management systems can provide features, such as translation
    memory, where previously translated phrases are stored and reused, reducing the
    effort and time required for translating repetitive content.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**翻译管理**：有效地管理翻译可能具有挑战性，尤其是在具有大量文本字符串的大规模应用程序中。例如，使用翻译管理系统可以提供诸如翻译记忆等特性，其中以前翻译的短语被存储和重复使用，从而减少翻译重复内容所需的时间和精力。'
- en: Important note
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Always be aware of cultural nuances; what’s acceptable or neutral in one culture
    might be offensive in another.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 总是注意文化细微差别；在一个文化中可以接受或中性的东西，在另一个文化中可能就是冒犯的。
- en: When working with Angular, it’s beneficial to be aware of these challenges from
    the outset. By doing so, you can design your application in a way that minimizes
    potential issues when adding support for new languages or regions.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 Angular 时，一开始就了解这些挑战是有益的。通过这样做，你可以设计你的应用程序，以最小化在添加对新语言或地区支持时可能出现的潜在问题。
- en: Exploring popular internationalization libraries for Angular
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索 Angular 的流行国际化库
- en: i18n is a crucial aspect of building Angular applications that cater to a global
    audience. Fortunately, there are several reliable i18n libraries available for
    Angular that simplify the process of translating and localizing applications.
    In this section, we will explore some popular i18n libraries for Angular, including
    `@angular/localize`, `ngx-translate`, `@ngneat/transloco`, and `angular-i18next`.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: i18n 是构建面向全球受众的 Angular 应用程序的关键方面。幸运的是，有几个可靠的 i18n 库可供 Angular 使用，它们简化了翻译和本地化的过程。在本节中，我们将探讨一些流行的
    Angular i18n 库，包括 `@angular/localize`、`ngx-translate`、`@ngneat/transloco` 和 `angular-i18next`。
- en: 'Here are the current stats of those libraries from NPM trends:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是这些库在 NPM 趋势中的当前统计信息：
- en: '![Figure 12.1 - Angular i18n library stats from NPM trends](img/B18805_12_01.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.1 - 来自 NPM 趋势的 Angular i18n 库统计信息](img/B18805_12_01.jpg)'
- en: Figure 12.1 - Angular i18n library stats from NPM trends
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.1 - 来自 NPM 趋势的 Angular i18n 库统计信息
- en: From the trend, it is evident that `@angular/localize` and `ngx-translate` are
    the prominent players with approximately 500,000 downloads per day, whereas `@ngneat/transloco`
    receives around 100,000 downloads per day and `angular-i18next` about 13,000 downloads
    per day. The latest updates also have been made to `@angular/localize` and `@ngneat/transloco`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 从趋势来看，`@angular/localize` 和 `ngx-translate` 是主要玩家，每天大约有 50 万次下载，而 `@ngneat/transloco`
    大约有 10 万次下载，`angular-i18next` 大约有 1.3 万次下载。最新的更新也已经对 `@angular/localize` 和 `@ngneat/transloco`
    进行了。
- en: Important note
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Considering security-related vulnerabilities and updates is a crucial aspect
    when selecting a third-party library. You can assess these factors by referring
    to [https://snyk.io/advisor](https://snyk.io/advisor).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑与第三方库相关的安全漏洞和更新是选择第三方库时的关键方面。您可以通过参考 [https://snyk.io/advisor](https://snyk.io/advisor)
    来评估这些因素。
- en: Let’s compare their features, discuss their pros and cons, and provide recommendations
    for different scenarios.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们比较它们的特性，讨论它们的优缺点，并提供不同场景下的推荐。
- en: '@angular/localize'
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '@angular/localize'
- en: '`@angular/localize` leverages Angular’s compiler to extract and replace translatable
    text in templates. Here are some key features:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`@angular/localize` 利用 Angular 的编译器从模板中提取和替换可翻译文本。以下是其主要特性：'
- en: '`@angular/localize` performs translation during the build process by statically
    analyzing templates. This approach allows for efficient translations and eliminates
    the need for runtime translation libraries.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@angular/localize` 通过静态分析模板在构建过程中执行翻译。这种方法允许高效翻译并消除了对运行时翻译库的需求。'
- en: '`ng extract-i18n`) that extracts translatable text from the application’s templates
    and generates translation files. These files can then be translated by language
    experts.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ng extract-i18n`) 从应用程序的模板中提取可翻译文本并生成翻译文件。这些文件随后可以被语言专家进行翻译。'
- en: '`@angular/localize` supports pluralization and gender agreement by providing
    special syntax in template expressions. This allows for accurate translations
    in various linguistic contexts.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@angular/localize` 通过在模板表达式中提供特殊语法支持复数和性别一致。这允许在不同语言环境中进行准确的翻译。'
- en: 'There are some disadvantages, though:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管有一些缺点：
- en: Requires a compilation step during the build process, which may increase build
    times for larger applications
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在构建过程中需要编译步骤，这可能会增加大型应用程序的构建时间
- en: Has limited support for dynamic content translation and runtime language switching
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对动态内容翻译和运行时语言切换的支持有限
- en: In general, `@angular/localize` is suitable for projects where efficient translation
    during the build process is a priority and dynamic translation or runtime language
    switching is not a requirement.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，`@angular/localize` 适用于在构建过程中优先考虑高效翻译且不需要动态翻译或运行时语言切换的项目。
- en: ngx-translate
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ngx-translate
- en: '**ngx-translate** ([https://github.com/ngx-translate/core](https://github.com/ngx-translate/core))
    is a popular third-party i18n library for Angular, providing a flexible and feature-rich
    solution for translating Angular applications. Here are some notable features:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**ngx-translate** ([https://github.com/ngx-translate/core](https://github.com/ngx-translate/core))
    是一个流行的 Angular 第三方 i18n 库，为 Angular 应用提供灵活且功能丰富的翻译解决方案。以下是其一些显著特性：'
- en: '`ngx-translate` performs translations at runtime, allowing for dynamic language
    switching and on-the-fly translation updates.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ngx-translate` 在运行时执行翻译，允许动态语言切换和即时翻译更新。'
- en: '**Translation loading**: Translations can be loaded from various sources, including
    JSON files, APIs, and even inline definitions. This flexibility makes it easy
    to integrate with different translation management systems.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**翻译加载**：翻译可以从各种来源加载，包括JSON文件、API甚至内联定义。这种灵活性使得与不同的翻译管理系统集成变得容易。'
- en: '`ngx-translate` supports pluralization and variable substitution in translations,
    providing rich language-specific functionalities.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ngx-translate` 支持翻译中的复数形式和变量替换，提供了丰富的语言特定功能。'
- en: 'Here are some disadvantages:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些缺点：
- en: Splitting translations doesn’t work well, and the setup is complicated
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分割翻译效果不佳，设置复杂
- en: Loading a translation at runtime may result in the **flash of content** (**FOC**)
    effect, where translations are loaded and applied, potentially causing a momentary
    visual flash
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在运行时加载翻译可能会导致**内容闪烁**（**FOC**）效果，即翻译被加载并应用，可能会造成瞬间的视觉闪烁
- en: In general, `ngx-translate` is suitable for projects that require dynamic translation
    updates, runtime language switching, and flexible translation loading.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，`ngx-translate`适用于需要动态翻译更新、运行时语言切换和灵活翻译加载的工程。
- en: '@ngneat/transloco'
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '@ngneat/transloco'
- en: '**@ngneat/transloco** ([https://ngneat.github.io/transloco](https://ngneat.github.io/transloco))
    is a relatively new i18n library for Angular that aims to provide a flexible and
    scalable approach to translations. It offers unique features and a modern approach
    to i18n. Here are its key features:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**@ngneat/transloco** ([https://ngneat.github.io/transloco](https://ngneat.github.io/transloco))
    是一个相对较新的Angular国际化库，旨在提供灵活且可扩展的翻译方法。它提供了独特的功能和现代的i18n方法。以下是它的主要特性：'
- en: '`@ngneat/transloco` supports the lazy loading of translation files, allowing
    for the optimized loading of translations. This is particularly beneficial for
    large applications with a significant number of translatable texts.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@ngneat/transloco` 支持翻译文件的懒加载，允许优化翻译的加载。这对于具有大量可翻译文本的大型应用程序尤其有益。'
- en: '`@ngneat/transloco` allows for scoping translations to specific components
    or modules. This feature is useful when different parts of an application require
    different translation sets.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@ngneat/transloco` 允许将翻译范围限定到特定的组件或模块。当应用程序的不同部分需要不同的翻译集时，这个特性非常有用。'
- en: '`@ngneat/transloco` provides support for in-line translations, allowing developers
    to define translations directly in the template. This feature simplifies the translation
    process and reduces the need for separate translation files.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@ngneat/transloco` 提供了对内联翻译的支持，允许开发者直接在模板中定义翻译。这个特性简化了翻译过程，减少了单独翻译文件的需求。'
- en: 'There’s just one main disadvantage:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 只有一个主要缺点：
- en: It is a less popular library with a smaller community compared to other established
    i18n libraries. Since it has a smaller community, there may be fewer available
    resources, tutorials, and examples to help developers get started and troubleshoot
    issues.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与其他成熟的i18n库相比，它是一个不太受欢迎的库，社区规模较小。由于社区规模较小，可能可用的资源、教程和示例较少，这可能会帮助开发者入门和解决问题。
- en: In general, `@ngneat/transloco` is suitable for projects that require the lazy
    loading of translations, scoped translations, and a modern approach to i18n.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，`@ngneat/transloco`适用于需要懒加载翻译、范围翻译和现代国际化（i18n）方法的工程。
- en: angular-i18next
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: angular-i18next
- en: '`angular-i18next` ([https://github.com/Romanchuk/angular-i18next](https://github.com/Romanchuk/angular-i18next))
    is an integration library that combines the powerful `i18next` library with Angular.
    `i18next` is a widely used i18n library in the JavaScript ecosystem. Here are
    some notable features of `angular-i18next`:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`angular-i18next` ([https://github.com/Romanchuk/angular-i18next](https://github.com/Romanchuk/angular-i18next))
    是一个集成库，它将强大的 `i18next` 库与Angular结合。`i18next` 是JavaScript生态系统中广泛使用的i18n库。以下是 `angular-i18next`
    的一些显著特性：'
- en: '`angular-i18next` leverages the extensive feature set of `i18next`, including
    support for interpolation, pluralization, context, and much more.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`angular-i18next` 利用 `i18next` 的广泛功能集，包括对插值、复数形式、上下文等的支持。'
- en: '**Flexible translation sources**: Translations can be loaded from various sources,
    such as JSON, XHR, or even from a backend API. This flexibility makes it easy
    to integrate with different translation management systems.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**灵活的翻译来源**：翻译可以从各种来源加载，如JSON、XHR甚至后端API。这种灵活性使得与不同的翻译管理系统集成变得容易。'
- en: '`angular-i18next` provides additional l10n features, such as date and number
    formatting, that can be beneficial in certain scenarios.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`angular-i18next`提供了额外的l10n功能，例如日期和数字格式化，这在某些场景中可能很有益。'
- en: 'Here are some disadvantages:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些缺点：
- en: Requires familiarity with both Angular and `i18next`
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要熟悉Angular和`i18next`
- en: It is complicated, with a huge bundle size compared to the others
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它很复杂，与其它相比，捆绑包大小很大
- en: In general, `angular-i18next` is suitable for projects that require extensive
    i18n features, flexibility in translation loading, and additional l10n functionalities.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，`angular-i18next`适用于需要广泛i18n功能、翻译加载灵活性和额外l10n功能的工程项目。
- en: Important note
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: It’s important to note that these comparisons and recommendations are not exhaustive,
    and the suitability of a library may vary depending on specific project requirements
    and constraints. You should carefully evaluate the features, trade-offs, and community
    support of each library before making a decision.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，这些比较和建议并不全面，一个库的适用性可能因具体项目需求和限制而异。在做出决定之前，您应该仔细评估每个库的功能、权衡和社区支持。
- en: In the upcoming section, we will explore i18n using the `ngx-translate` library,
    which is also prominently featured on the official PrimeNG website.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将使用`ngx-translate`库探索i18n，该库也在官方PrimeNG网站上突出展示。
- en: Working with ngx-translate for internationalization
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用ngx-translate进行国际化工作
- en: By building upon the previous section, `ngx-translate` offers a simple and adaptable
    method for translating Angular applications. In this section, we will delve into
    the steps of integrating ngx-translate into an Angular application and provide
    valuable insights and strategies for maximizing productivity with ngx-translate.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节的基础上，`ngx-translate`提供了一个简单且可适应的方法来翻译Angular应用程序。在本节中，我们将深入了解将ngx-translate集成到Angular应用程序中的步骤，并提供有关如何最大化使用ngx-translate生产力的宝贵见解和策略。
- en: Integrating ngx-translate into an Angular application
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将ngx-translate集成到Angular应用程序中
- en: 'To get started with `ngx-translate`, follow these steps to integrate it into
    your Angular application:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用`ngx-translate`，请按照以下步骤将其集成到您的Angular应用程序中：
- en: 'First, install the `ngx-translate` library. Open a terminal and navigate to
    your Angular project’s root directory. Then, run the following command to install
    `ngx-translate`:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，安装`ngx-translate`库。打开终端并导航到您的Angular项目的根目录。然后，运行以下命令来安装`ngx-translate`：
- en: '[PRE0]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This command will install the `core` and `http-loader` package for initializing
    and loading the translation from the files using `HttpClient`.
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此命令将安装`core`和`http-loader`包，用于使用`HttpClient`初始化和加载翻译文件。
- en: 'In your Angular application, open the `app.config.ts` file and import the necessary
    modules and configurations from `ngx-translate`:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的Angular应用程序中，打开`app.config.ts`文件，并从`ngx-translate`导入必要的模块和配置：
- en: '[PRE1]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The provided code is responsible for configuring and providing translation
    functionality using `ngx-translate` in an Angular application. Let’s break it
    down to understand its purpose:'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 提供的代码负责在Angular应用程序中使用`ngx-translate`配置和提供翻译功能。让我们分解它以了解其目的：
- en: '`export function HttpLoaderFactory() {...}`: This code exports a factory function
    called `HttpLoaderFactory`. This function is used to create an instance of the
    `TranslateHttpLoader` class, which is responsible for loading translation files
    using the HTTP protocol from the `/assets/i18n/[lang].json` file (in this case,
    lang is `en`). It takes an instance of the `HttpClient` class as a parameter and
    returns a new `TranslateHttpLoader` instance.'
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`export function HttpLoaderFactory() {...}`：此代码导出一个名为`HttpLoaderFactory`的工厂函数。此函数用于创建`TranslateHttpLoader`类的实例，该类负责使用HTTP协议从`/assets/i18n/[lang].json`文件（在这种情况下，lang是`en`）加载翻译文件。它接受`HttpClient`类的实例作为参数，并返回一个新的`TranslateHttpLoader`实例。'
- en: '`export const provideTranslation =` `()...`: This function returns the result
    of calling `makeEnvironmentProviders`, which is a utility function provided by
    Angular for generating providers. This function imports the providers from the
    `TranslateModule.forRoot({...})` method, which is responsible for configuring
    the `ngx-translate` module at the application level with the following configuration:'
  id: totrans-89
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`export const provideTranslation =` `()...`：此函数返回调用`makeEnvironmentProviders`的结果，这是一个由Angular提供的实用函数，用于生成提供者。此函数从`TranslateModule.forRoot({...})`方法导入提供者，该方法负责在应用级别配置`ngx-translate`模块，以下为配置：'
- en: '`defaultLanguage:` `''en''`: This option indicates that English is the default
    language. For larger projects, it’s advisable to adopt the `<language>-<REGION>`
    pattern, e.g., `en-US` (English (United States)) or `en-CA` (English (Canada)).
    As a company expands, there might be a requirement to accommodate similar languages
    with variations in different regions.'
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`defaultLanguage:` `''en''`：此选项表示英语是默认语言。对于较大的项目，建议采用`<language>-<REGION>`模式，例如`en-US`（美国英语）或`en-CA`（加拿大英语）。随着公司的扩张，可能需要满足不同地区相似语言的变体。'
- en: '`loader:` `{...}`: This property sets the provide property to `TranslateLoader`,
    indicating that the `TranslateLoader` class is used for translation loading. The
    `useFactory` property is set to `HttpLoaderFactory`, which is the factory function
    defined earlier. The `deps` property specifies the dependencies required by the
    factory function, in this case, `HttpClient`.'
  id: totrans-91
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`loader:` `{...}`：此属性将提供属性设置为`TranslateLoader`，表示使用`TranslateLoader`类进行翻译加载。`useFactory`属性设置为`HttpLoaderFactory`，这是之前定义的工厂函数。`deps`属性指定了工厂函数所需的依赖项，在这种情况下是`HttpClient`。'
- en: '`export const appConfig...`: The `provideHttpClient()` and `provideTranslation()`
    providers are added to the application’s dependency injection system, making `HttpClient`
    and the translation functionality available throughout the application.'
  id: totrans-92
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`export const appConfig...`：将`provideHttpClient()`和`provideTranslation()`提供者添加到应用程序的依赖注入系统中，使`HttpClient`和翻译功能在整个应用程序中可用。'
- en: Create translation files for each supported language. For example, create a
    `en.json` file for English translations and a `vi.json` file for Vietnamese translations.
    Place these files in an appropriate directory, such as `src/assets/i18n/`.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为每种支持的语言创建翻译文件。例如，为英文翻译创建一个`en.json`文件，为越南文翻译创建一个`vi.json`文件。将这些文件放置在适当的目录中，例如`src/assets/i18n/`。
- en: 'The translation files should follow a key-value structure, where the keys represent
    the translation keys, and the values represent the translated text. Here is an
    example:'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 翻译文件应遵循键值结构，其中键代表翻译键，值代表翻译文本。以下是一个示例：
- en: '[PRE2]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, you can use the `translate` pipe to translate text in your Angular templates.
    Simply add the `translate` pipe to the text you want to translate, passing the
    translation key as an argument. Here is an example:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您可以使用`translate`管道将文本翻译到您的Angular模板中。只需将`translate`管道添加到您想要翻译的文本中，并将翻译键作为参数传递。以下是一个示例：
- en: '[PRE3]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: By importing the `TranslateModule`, you will have access to the `translate`
    pipe, which will replace the translation keys with the corresponding translated
    text.
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过导入`TranslateModule`，您将能够访问`translate`管道，该管道将替换翻译键为相应的翻译文本。
- en: 'Let’s have a look at the result:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看结果：
- en: '![Figure 12.2 – Example of English translation using ngx-translate](img/B18805_12_02.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![图12.2 – 使用 ngx-translate 的英文翻译示例](img/B18805_12_02.jpg)'
- en: Figure 12.2 – Example of English translation using ngx-translate
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.2 – 使用 ngx-translate 的英文翻译示例
- en: From the image, we can see that the `translate` pipe is working correctly. The
    `greeting` key now becomes `Hello!` from the `en.json` file.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 从图像中，我们可以看到`translate`管道正在正确工作。`greeting`键现在从`en.json`文件变为`Hello!`。
- en: Tips and tricks for working with ngx-translate
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 ngx-translate 的技巧和窍门
- en: 'To work effectively with `ngx-translate`, consider the following tips and tricks:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 要有效地使用`ngx-translate`，请考虑以下技巧和窍门：
- en: Language switching
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 语言切换
- en: '`ngx-translate` provides a convenient method for switching between different
    languages at runtime. You can achieve this by using the “use” method of `TranslateService`.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`ngx-translate`提供了一个方便的方法在运行时切换不同的语言。您可以通过使用`TranslateService`的“use”方法来实现这一点。'
- en: 'Take the following `LanguageComponent` as an example:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 以以下`LanguageComponent`为例：
- en: '[PRE4]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The provided code is a shared component that represents a language selector
    dropdown using PrimeNG’s `DropdownModule` and ngx-translate’s `TranslateService`.
    Let’s break it down more:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 提供的代码是一个共享组件，它使用PrimeNG的`DropdownModule`和ngx-translate的`TranslateService`来表示语言选择下拉菜单。让我们更详细地分析一下：
- en: '`<p-dropdown ... />`: This code uses PrimeNG’s `p-dropdown` component to render
    a dropdown list. The options property is bound to the `languages` array, which
    contains an array of language objects. The `optionLabel` property specifies the
    property to use as the `label` for each option, and the `optionValue` property
    specifies the property to use as the `value` for each option. The `(onChange)`
    event binding calls the `switchLanguage()` method when the dropdown selection
    changes, passing the `event` object.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<p-dropdown ... />`：此代码使用 PrimeNG 的 `p-dropdown` 组件来渲染下拉列表。选项属性绑定到 `languages`
    数组，该数组包含语言对象数组。`optionLabel` 属性指定用于每个选项的 `label` 属性，而 `optionValue` 属性指定用于每个选项的
    `value` 属性。`(onChange)` 事件绑定在更改下拉选择时调用 `switchLanguage()` 方法，并传递 `event` 对象。'
- en: '`switchLanguage(event) {...}`: This method is called when the dropdown selection
    changes. It receives the `event` object of type `DropdownChangeEvent` and uses
    `translationService` to switch the active language to the selected value from
    the dropdown menu.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`switchLanguage(event) {...}`：当下拉选择更改时调用此方法。它接收类型为 `DropdownChangeEvent` 的
    `event` 对象，并使用 `translationService` 将活动语言切换到下拉菜单中选择的值。'
- en: 'Here is the result:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这是结果：
- en: '![Figure 12.3 – Switch language to Vietnamese](img/B18805_12_03.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![图12.3 – 切换语言为越南语](img/B18805_12_03.jpg)'
- en: Figure 12.3 – Switch language to Vietnamese
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.3 – 切换语言为越南语
- en: From the image, you can see that when we switch the language from English to
    Vietnamese, the application dynamically loads the `vi.json` file containing the
    translated Vietnamese version. Consequently, the changes are promptly reflected
    at runtime.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 从图像中，您可以看到当我们从英语切换到越南语时，应用程序动态加载包含翻译的越南语版本的 `vi.json` 文件。因此，更改在运行时得到及时反映。
- en: Lazy loading
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 懒加载
- en: '`ngx-translate` provides a useful feature called lazy loading, which allows
    translations to be loaded on-demand when they are needed. This feature is particularly
    beneficial for large applications with multiple languages, as it helps optimize
    the initial loading time by only loading translations when they are required.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`ngx-translate` 提供了一个有用的功能，称为懒加载，允许在需要时按需加载翻译。此功能对于具有多种语言的大型应用程序特别有益，因为它通过仅在需要时加载翻译来帮助优化初始加载时间。'
- en: 'To enable lazy loading in `ngx-translate`, you need to modify the translation
    loader configuration. Instead of loading all translation files upfront, you can
    set up the loader to load translations dynamically as they are requested. Here
    is an example of the translation files:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 `ngx-translate` 中启用懒加载，您需要修改翻译加载器配置。而不是预先加载所有翻译文件，您可以设置加载器动态加载请求的翻译。以下是一个翻译文件的示例：
- en: '![Figure 12.4 – Reorganize translation files](img/B18805_12_04.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![图12.4 – 重新组织翻译文件](img/B18805_12_04.jpg)'
- en: Figure 12.4 – Reorganize translation files
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.4 – 重新组织翻译文件
- en: Based on the image, we transfer all the translation content located at the root
    level to the `assets/i18n/main` directory. As for the translation files for the
    lazy-loaded components, we can store them in a separate path, such as `assets/i18n/lazy`,
    which will be loaded as needed.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 根据图像，我们将位于根级别的所有翻译内容转移到 `assets/i18n/main` 目录。至于懒加载组件的翻译文件，我们可以将它们存储在单独的路径中，例如
    `assets/i18n/lazy`，这将按需加载。
- en: 'Here is the updated code for our main translation loader:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们的主要翻译加载器的更新代码：
- en: '[PRE5]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You can see that the path for loading the translation files changed from `./assets/i18n`
    to `./assets/i18n/main`.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到，加载翻译文件的路径已从 `./assets/i18n` 更改为 `./assets/i18n/main`。
- en: 'After that, we create the translation configuration for the lazy loading components:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们为懒加载组件创建翻译配置：
- en: '[PRE6]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In the code snippet, the configuration for lazy loading translation is the
    same as the main configuration (`translation.provider.ts`). However, there are
    some differences:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码片段中，懒加载翻译的配置与主配置（`translation.provider.ts`）相同。但是，有一些区别：
- en: '`function HttpLoaderFactory(http: HttpClient) { ... }`: The function returns
    a new instance of `TranslateHttpLoader`, configured to load translation files
    from the `''./assets/i18n/lazy/''` directory with a `.json` file extension.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`function HttpLoaderFactory(http: HttpClient) { ... }`：该函数返回一个配置为从 `''./assets/i18n/lazy/''`
    目录加载具有 `.json` 文件扩展名的翻译文件的 `TranslateHttpLoader` 的新实例。'
- en: '`TranslateModule.forChild({..})`: This function is for the lazy load module/route.
    It takes an `options` object containing various configuration properties:'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TranslateModule.forChild({..})`：此函数用于懒加载模块/路由。它接受一个包含各种配置属性的 `options` 对象：'
- en: '`isolate: true`: This indicates that the translations should be isolated for
    the lazy-loaded module, meaning they won’t be shared with other modules'
  id: totrans-130
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`isolate: true`: 这表示翻译应该为懒加载的模块隔离，这意味着它们不会与其他模块共享'
- en: '`useFactory: HttpLoaderFactory`: This specifies the translation loaders that
    will load the translation files from `HttpLoaderFactory` configuration'
  id: totrans-131
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`useFactory: HttpLoaderFactory`: 这指定了将加载翻译文件的翻译加载器，这些文件来自`HttpLoaderFactory`配置'
- en: '`providers: [provideLazyTranslation()]`: This specifies an array of providers
    for this route. In this case, it includes the result of calling the `provideLazyTranslation()`
    function, which will trigger the lazy loading translations process, as explained
    in the previous code explanation.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`providers: [provideLazyTranslation()]`: 这指定了此路由的提供者数组。在这种情况下，它包括调用`provideLazyTranslation()`函数的结果，这将触发懒加载翻译过程，如前一个代码解释中所述。'
- en: 'Let’s have a look at the result:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看结果：
- en: '![Figure 12.5 – Lazy load translation](img/B18805_12_05.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![图12.5 – 懒加载翻译](img/B18805_12_05.jpg)'
- en: Figure 12.5 – Lazy load translation
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.5 – 懒加载翻译
- en: Now, in the image, you’ll observe the application’s loading behavior. Upon the
    initial load, the translation file (labeled `ngx-lazy-translate` route, the application
    will dynamically load the translation file specific to that route (labeled **2**)
    and correctly display the translated values.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在图片中，你会观察到应用程序的加载行为。在初始加载时，翻译文件（标记为`ngx-lazy-translate`路由），应用程序将动态加载特定于该路由的翻译文件（标记为**2**）并正确显示翻译的值。
- en: Right-to-left languages
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从右到左的语言
- en: In **right-to-left** (**RTL**) languages, the layout of the user interface is
    mirrored in comparison to **left-to-right** (**LTR**) languages. This includes
    the reversal of the order of elements, such as text, buttons, and navigation.
    The primary goal is to align content to the right side of the screen, creating
    a natural flow for RTL readers.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在**从右到左**（**RTL**）语言中，用户界面的布局与**从左到右**（**LTR**）语言相比是镜像的。这包括元素顺序的颠倒，如文本、按钮和导航。主要目标是使内容对齐到屏幕的右侧，为RTL读者创造自然的流动。
- en: 'When working with an i18n library, a common practice is to set the direction
    of the text after switching the language. Here is the example code:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用i18n库时，一个常见的做法是在切换语言后设置文本的方向。以下是一个示例代码：
- en: '[PRE7]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The provided code represents a method that updates the HTML tag attributes of
    the document according to the specified language parameter. By default, the text
    direction is left-to-right (`ltr`). However, if the language is changed to Arabic
    (`ar`), the code will update the text direction to right-to-left (`rtl`) for the
    body element, and the `lang` attribute for the `html` element will also be changed
    to `ar`.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 提供的代码代表一个方法，该方法根据指定的语言参数更新文档的HTML标签属性。默认情况下，文本方向是左到右（`ltr`）。然而，如果语言更改为阿拉伯语（`ar`），代码将更新body元素的文本方向为从右到左（`rtl`），并且`html`元素的`lang`属性也将更改为`ar`。
- en: 'Let’s have a look at the result:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看结果：
- en: '![Figure 12.6 – Right-to-left languages](img/B18805_12_06.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![图12.6 – 从右到左的语言](img/B18805_12_06.jpg)'
- en: Figure 12.6 – Right-to-left languages
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.6 – 从右到左的语言
- en: From the image, you can see that after we switch the language to Arabic (`ar`),
    the layout is shifted from left to right to right to left.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 从图片中，你可以看到当我们把语言切换到阿拉伯语（`ar`）后，布局从左到右变为从右到左。
- en: In conclusion, by utilizing ngx-translate, you can easily handle multi-language
    support and dynamically switch between the different language versions of their
    applications. Now, let’s transition to exploring **PrimeNG Locale**, another essential
    tool for configuring and customizing l10n settings for PrimeNG components.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，通过使用ngx-translate，你可以轻松处理多语言支持并在不同语言版本之间动态切换。现在，让我们过渡到探索**PrimeNG Locale**，这是配置和自定义PrimeNG组件l10n设置的另一个重要工具。
- en: Working with PrimeNG Locale
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与PrimeNG Locale一起工作
- en: PrimeNG Locale is a feature provided by PrimeNG that enables you to configure
    and customize the l10n settings for its components. It allows you to define the
    locale-specific configurations, such as language, date format, time format, and
    number format. By utilizing PrimeNG Locale, you can ensure your application caters
    to the needs of users from different regions and cultures.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: PrimeNG Locale是PrimeNG提供的一个功能，它允许你配置和自定义其组件的l10n设置。它允许你定义特定于区域的配置，如语言、日期格式、时间格式和数字格式。通过使用PrimeNG
    Locale，你可以确保你的应用程序满足来自不同地区和文化的用户的需求。
- en: To utilize PrimeNG Locale, it is necessary to comprehend the configuration and
    application process within your Angular project. By default, PrimeNG only includes
    English translations for the locale. To localize PrimeNG components, manually
    updating the translations is required.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用PrimeNG Locale，有必要理解在Angular项目中配置和应用的过程。默认情况下，PrimeNG仅包含英文翻译的区域设置。要本地化PrimeNG组件，需要手动更新翻译。
- en: 'For example, the following are locale options along with their corresponding
    translations for the PrimeNG `Calendar` component:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下是与PrimeNG `Calendar`组件对应的区域设置选项及其翻译：
- en: '![Figure 12.7 – Example of translation for calendar component](img/B18805_12_07.jpg)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![图12.7 – 日历组件翻译示例](img/B18805_12_07.jpg)'
- en: Figure 12.7 – Example of translation for calendar component
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.7 – 日历组件翻译示例
- en: 'Based on the code, it is clear that PrimeNG incorporates these wordings for
    English translation within the `Calendar` component. This indicates that upon
    opening the `Calendar` component, you will observe the relevant text displayed:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 根据代码，很明显PrimeNG在`Calendar`组件中包含了这些英文翻译的措辞。这意味着在打开`Calendar`组件时，你会看到相关的文本显示：
- en: '![Figure 12.8 – Calendar component in English](img/B18805_12_08.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![图12.8 – 英文中的日历组件](img/B18805_12_08.jpg)'
- en: Figure 12.8 – Calendar component in English
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.8 – 英文中的日历组件
- en: After opening the date picker, you can observe that the month and day come from
    the `monthNames` and `dayNamesMin` options.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在打开日期选择器后，你可以观察到月份和日期来自`monthNames`和`dayNamesMin`选项。
- en: Important note
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: PrimeNG also provides a community-supported `PrimeLocale` repository ([https://github.com/primefaces/primelocale](https://github.com/primefaces/primelocale))
    that you utilize or contribute to the translation content.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: PrimeNG还提供了一个社区支持的`PrimeLocale`仓库（[https://github.com/primefaces/primelocale](https://github.com/primefaces/primelocale)），你可以使用或为其翻译内容做出贡献。
- en: 'Now, let’s take an example of how to add the translation to the PrimeNG `Calendar`
    component:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们通过一个例子来看看如何将翻译添加到PrimeNG的`Calendar`组件中：
- en: 'To incorporate translated versions of the locale options from PrimeNG, you
    have two options: either engage a translator to provide the translations or retrieve
    them from the `PrimeLocale` repository. As an illustration, here is the translated
    version (*Figure 12**.7*) of the locale options in Vietnamese obtained from `PrimeLocale`:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要整合PrimeNG的区域设置选项的翻译版本，你有两种选择：要么雇佣翻译人员提供翻译，要么从`PrimeLocale`仓库中检索。以下是从`PrimeLocale`获得的越南文翻译版本（*图12**.7*）的区域设置选项：
- en: '[PRE8]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'After that, we put it into our translation file:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将它放入我们的翻译文件中：
- en: '[PRE9]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Make sure that those translations are under the `primeng` key in the translation
    file.
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保这些翻译位于翻译文件中的`primeng`键下。
- en: 'Finally, when switching languages, we need to extract the translated content
    and set the global translation via `PrimeNGConfig`. Here is the example code:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在切换语言时，我们需要通过`PrimeNGConfig`提取翻译内容并设置全局翻译。以下是一个示例代码：
- en: '[PRE10]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Let’s have a look at the result:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看结果：
- en: '![Figure 12.9 – Example of calendar in Vietnamese](img/B18805_12_09.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![图12.9 – 越南文中的日历示例](img/B18805_12_09.jpg)'
- en: Figure 12.9 – Example of calendar in Vietnamese
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.9 – 越南文中的日历示例
- en: From the image, you can see that after switching the language option from English
    to Vietnamese, the PrimeNG `Calendar` will also have its translations updated.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 从图片中，你可以看到在将语言选项从英文切换到越南文后，PrimeNG的`Calendar`组件也会更新其翻译。
- en: To wrap up, working with PrimeNG Locale empowers you to seamlessly handle l10n
    in Angular applications. By leveraging PrimeNG’s features, developers can easily
    configure language settings, customize date and time formats, and format numbers
    according to locale-specific conventions. The ability to adapt applications to
    different regions and cultures ensures a more inclusive and user-friendly experience.
    As we conclude this chapter, it is valuable to pause and recap the main points
    covered in our summary section.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，使用PrimeNG Locale使你能够在Angular应用程序中无缝处理本地化。通过利用PrimeNG的功能，开发者可以轻松配置语言设置，自定义日期和时间格式，并根据区域特定约定格式化数字。使应用程序适应不同地区和文化的能力确保了更包容和用户友好的体验。在我们总结这一章时，暂停并回顾总结部分中的主要观点是非常有价值的。
- en: Summary
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Throughout this chapter, we’ve embarked on a journey through the realms of i18n
    and l10n within the Angular framework, focusing on how PrimeNG components can
    be leveraged to create applications that resonate with a global audience. We’ve
    delved into the intricacies of adapting applications to various locales, ensuring
    that every user experiences the application in a way that feels native to them.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们踏上了 Angular 框架中 i18n 和 l10n 领域的旅程，重点关注如何利用 PrimeNG 组件创建与全球受众产生共鸣的应用程序。我们深入研究了适应各种地区的应用细节，确保每位用户都能以对他们来说感觉自然的方式体验应用程序。
- en: We’ve uncovered the significance of i18n and l10n, understanding that while
    they are closely related, they serve distinct purposes. i18n is the process of
    designing a software application so that it can be adapted to various languages
    and regions without engineering changes. l10n, on the other hand, is the process
    of adapting internationalized software for a specific region or language by adding
    locale-specific components and translating text.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 我们揭示了 i18n 和 l10n 的重要性，理解到虽然它们密切相关，但它们服务于不同的目的。i18n 是设计软件应用程序的过程，以便它可以适应各种语言和地区，而无需进行工程更改。另一方面，l10n
    是通过添加特定地区的组件和翻译文本，将国际化软件适应特定地区或语言的过程。
- en: We discussed the different options for i18n in Angular and showcased the ngx-translate
    library as a powerful tool for managing translations in Angular applications.
    Additionally, we explored PrimeNG Locale and its configuration process for achieving
    effective l10n.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讨论了 Angular 中 i18n 的不同选项，并展示了 ngx-translate 库作为管理 Angular 应用程序翻译的强大工具。此外，我们还探讨了
    PrimeNG Locale 及其配置过程，以实现有效的 l10n。
- en: Moving forward, in the next chapter, we will shift our focus to testing and
    debugging PrimeNG components. Testing is a critical aspect of application development
    as it ensures the reliability and stability of your codebase. We will explore
    various testing techniques and learn how to effectively debug PrimeNG components
    to identify and resolve issues.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将把重点转向测试和调试 PrimeNG 组件。测试是应用程序开发的关键方面，因为它确保了代码库的可靠性和稳定性。我们将探讨各种测试技术，并学习如何有效地调试
    PrimeNG 组件以识别和解决问题。
