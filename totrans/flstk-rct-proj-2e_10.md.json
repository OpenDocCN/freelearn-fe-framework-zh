["```js\nseller: {\n    type: Boolean,\n    default: false\n}\n```", "```js\n...\nreturn res.json({\n      token,\n      user: {\n        _id: user._id,\n        name: user.name,\n        email: user.email,\n        seller: user.seller\n      }\n    })\n...\n} \n```", "```js\n<Typography variant=\"subtitle1\" className={classes.subheading}>\n   Seller Account\n</Typography>\n<FormControlLabel\n     control={<Switch\n                checked={values.seller}\n                onChange={handleCheck}\n             />}\n     label={values.seller? 'Active' : 'Inactive'}\n/>\n```", "```js\nconst handleCheck = (event, checked) => {\n    setValues({...values, 'seller': checked})\n} \n```", "```js\nconst clickSubmit = () => {\n    const jwt = auth.isAuthenticated() \n    const user = {\n      name: values.name || undefined,\n      email: values.email || undefined,\n      password: values.password || undefined,\n      seller: values.seller || undefined\n    }\n    update({\n      userId: match.params.userId\n    }, {\n      t: jwt.token\n    }, user).then((data) => {\n      if (data && data.error) {\n        setValues({...values, error: data.error})\n      } else {\n        auth.updateUser(data, ()=>{\n setValues({...values, userId: data._id, redirectToProfile: true})\n })\n      }\n    })\n  }\n```", "```js\n{auth.isAuthenticated().user.seller && \n  (<Link to=\"/seller/shops\">\n  <Button color = {isPartActive(history, \"/seller/\")}> My Shops </Button>\n   </Link>)\n}\n```", "```js\nname: { \n    type: String, \n    trim: true, \n    required: 'Name is required' \n},\ndescription: { \n    type: String, \n    trim: true \n},\n```", "```js\nimage: { \n    data: Buffer, \n    contentType: String \n},\n```", "```js\nowner: {\n    type: mongoose.Schema.ObjectId, \n    ref: 'User'\n}\n```", "```js\nupdated: Date,\ncreated: { \n    type: Date, \n    default: Date.now \n},\n```", "```js\nrouter.route('/api/shops/by/:userId')\n    .post(authCtrl.requireSignin, authCtrl.hasAuthorization, \n           userCtrl.isSeller, shopCtrl.create)\n```", "```js\nrouter.param('userId', userCtrl.userByID) \n```", "```js\napp.use('/', shopRoutes)\n```", "```js\nconst isSeller = (req, res, next) => {\n  const isSeller = req.profile && req.profile.seller\n  if (!isSeller) {\n    return res.status('403').json({\n      error: \"User is not a seller\"\n    })\n  }\n  next()\n}\n```", "```js\nconst create = (req, res, next) => {\n  let form = new formidable.IncomingForm()\n  form.keepExtensions = true\n  form.parse(req, (err, fields, files) => {\n    if (err) {\n      res.status(400).json({\n        message: \"Image could not be uploaded\"\n      })\n    }\n    let shop = new Shop(fields)\n    shop.owner= req.profile\n    if(files.image){\n      shop.image.data = fs.readFileSync(files.image.path)\n      shop.image.contentType = files.image.type\n    }\n    shop.save((err, result) => {\n      if (err) {\n        return res.status(400).json({\n          error: errorHandler.getErrorMessage(err)\n        })\n      }\n      res.status(200).json(result)\n    })\n  })\n}\n```", "```js\nconst create = (params, credentials, shop) => {\n  return fetch('/api/shops/by/'+ params.userId, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Bearer ' + credentials.t\n      },\n      body: shop\n    })\n    .then((response) => {\n      return response.json()\n    }).catch((err) => console.log(err))\n}\n```", "```js\n<input accept=\"image/*\" onChange={handleChange('image')} \n       id=\"icon-button-file\"\n       style={display:'none'} type=\"file\" />\n<label htmlFor=\"icon-button-file\">\n   <Button variant=\"contained\" color=\"secondary\" component=\"span\">\n      Upload Logo <FileUpload/>\n   </Button>\n</label> \n<span>{values.image ? values.image.name : ''}</span>\n\n```", "```js\n<TextField \n    id=\"name\" \n    label=\"Name\" \n    value={values.name} \n    onChange={handleChange('name')}/> <br/>\n<TextField \n    id=\"multiline-flexible\" \n    label=\"Description\"\n    multiline rows=\"2\" \n    value={values.description}\n    onChange={handleChange('description')}/>\n```", "```js\nconst handleChange = name => event => {\n    const value = name === 'image'\n      ? event.target.files[0]\n      : event.target.value\n    setValues({ ...values, [name]: value })\n}\n```", "```js\nconst clickSubmit = () => {\n    const jwt = auth.isAuthenticated()\n    let shopData = new FormData()\n    values.name && shopData.append('name', values.name)\n    values.description && shopData.append('description', values.description)\n    values.image && shopData.append('image', values.image)\n    create({\n      userId: jwt.user._id\n    }, {\n      t: jwt.token\n    }, shopData).then((data) => {\n      if (data.error) {\n        setValues({...values, error: data.error})\n      } else {\n        setValues({...values, error: '', redirect: true})\n      }\n    })\n}\n```", "```js\nif (values.redirect) {\n      return (<Redirect to={'/seller/shops'}/>)\n}\n```", "```js\n<PrivateRoute path=\"/seller/shop/new\" component={NewShop}/>\n```", "```js\nrouter.route('/api/shops')\n    .get(shopCtrl.list)\n```", "```js\nconst list = async (req, res) => {\n  try {\n    let shops = await Shop.find()\n    res.json(shops)\n  } catch (err){\n    return res.status(400).json({\n      error: errorHandler.getErrorMessage(err)\n    })\n  }\n}\n```", "```js\nconst list = async (signal) => {\n  try {\n    let response = await fetch('/api/shops', {\n      method: 'GET',\n      signal: signal\n    })\n    return response.json()\n  }catch(err) {\n    console.log(err)\n  }\n}\n```", "```js\nexport default function Shops(){\n  const [shops, setShops] = useState([])\n\n  useEffect(() => {\n    const abortController = new AbortController()\n    const signal = abortController.signal\n    list(signal).then((data) => {\n      if (!data.error) {\n        setShops(data)\n      }\n    })\n    return function cleanup(){\n      abortController.abort()\n    }\n\n  }, [])\n...\n}\n```", "```js\n{shops.map((shop, i) => {\n     return <Link to={\"/shops/\"+shop._id} key={i}>\n              <Divider/>\n              <ListItem button>\n                 <ListItemAvatar>\n                    <Avatar src={'/api/shops/logo/'+shop._id+\"?\" + new Date().getTime()}/>\n                 </ListItemAvatar>\n                 <div className={classes.details}>\n                    <Typography type=\"headline\" \n                        component=\"h2\" color=\"primary\">\n                      {shop.name}\n                    </Typography>\n                    <Typography type=\"subheading\" component=\"h4\">\n                      {shop.description}\n                    </Typography>\n                 </div>\n              </ListItem>\n              <Divider/>\n             </Link>\n})}\n```", "```js\n <Route path=\"/shops/all\" component={Shops}/>\n```", "```js\nrouter.route('/api/shops/by/:userId')\n    .get(authCtrl.requireSignin, authCtrl.hasAuthorization, shopCtrl.listByOwner)\n```", "```js\nconst listByOwner = async (req, res) => {\n   try {\n     let shops = await Shop.find({owner: req.profile._id}).populate('owner', '_id name')\n     res.json(shops)\n   } catch (err){\n     return res.status(400).json({\n         error: errorHandler.getErrorMessage(err)\n     })\n   }\n}\n```", "```js\nconst listByOwner = async (params, credentials, signal) => {\n  try {\n    let response = await fetch('/api/shops/by/'+params.userId, {\n      method: 'GET',\n      signal: signal,\n      headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Bearer ' + credentials.t\n      }\n    })\n    return response.json()\n  } catch(err){\n    console.log(err)\n  }\n}\n```", "```js\n<ListItemSecondaryAction>\n   <Link to={\"/seller/shop/edit/\" + shop._id}>\n       <IconButton aria-label=\"Edit\" color=\"primary\">\n             <Edit/>\n       </IconButton>\n   </Link>\n   <DeleteShop shop={shop} onRemove={removeShop}/>\n</ListItemSecondaryAction>\n```", "```js\nconst removeShop = (shop) => {\n    const updatedShops = [...shops]\n    const index = updatedShops.indexOf(shop)\n    updatedShops.splice(index, 1)\n    setShops(updatedShops)\n}\n```", "```js\n<PrivateRoute path=\"/seller/shops\" component={MyShops}/>\n```", "```js\nrouter.route('/api/shop/:shopId')\n    .get(shopCtrl.read)\nrouter.param('shopId', shopCtrl.shopByID)\n```", "```js\nconst shopByID = async (req, res, next, id) => {\n  try {\n    let shop = await Shop.findById(id).populate('owner', '_id name').exec()\n    if (!shop)\n      return res.status('400').json({\n        error: \"Shop not found\"\n      })\n    req.shop = shop\n    next()\n  } catch (err) {\n    return res.status('400').json({\n      error: \"Could not retrieve shop\"\n    })\n  }\n}\n```", "```js\nconst read = (req, res) => {\n  req.shop.image = undefined\n  return res.json(req.shop)\n}\n```", "```js\nexport default function Shop({match}) {\n  const [shop, setShop] = useState('')\n  const [error, setError] = useState('')\n\n  useEffect(() => {\n    const abortController = new AbortController()\n    const signal = abortController.signal\n\n    read({\n      shopId: match.params.shopId\n    }, signal).then((data) => {\n      if (data.error) {\n        setError(data.error)\n      } else {\n        setShop(data)\n      }\n    })\n    return function cleanup(){\n      abortController.abort()\n    }\n\n  }, [match.params.shopId])\n...\n}\n```", "```js\n<CardContent>\n  <Typography type=\"headline\" component=\"h2\">\n    {shop.name}\n  </Typography><br/>\n  <Avatar src={logoUrl}/><br/>\n  <Typography type=\"subheading\" component=\"h2\">\n    {shop.description}\n  </Typography><br/>\n</CardContent>\n```", "```js\nconst logoUrl = shop._id\n          ? `/api/shops/logo/${shop._id}?${new Date().getTime()}`\n          : '/api/shops/defaultphoto'\n```", "```js\n<Route path=\"/shops/:shopId\" component={Shop}/>\n```", "```js\nrouter.route('/api/shops/:shopId')\n    .put(authCtrl.requireSignin, shopCtrl.isOwner, shopCtrl.update)\n```", "```js\nconst isOwner = (req, res, next) => {\n  const isOwner = req.shop && req.auth \n                           && req.shop.owner._id == req.auth._id\n  if(!isOwner){\n    return res.status('403').json({\n      error: \"User is not authorized\"\n    })\n  }\n  next()\n}\n```", "```js\nconst update = (req, res) => {\n  let form = new formidable.IncomingForm()\n  form.keepExtensions = true\n  form.parse(req, async (err, fields, files) => {\n    if (err) {\n      res.status(400).json({\n        message: \"Photo could not be uploaded\"\n      })\n    }\n    let shop = req.shop\n    shop = extend(shop, fields)\n    shop.updated = Date.now()\n    if(files.image){\n      shop.image.data = fs.readFileSync(files.image.path)\n      shop.image.contentType = files.image.type\n    }\n    try {\n      let result = await shop.save()\n      res.json(result)\n    } catch (err){\n      return res.status(400).json({\n        error: errorHandler.getErrorMessage(err)\n      })\n    }\n  })\n}\n```", "```js\n<PrivateRoute path=\"/seller/shop/edit/:shopId\" component={EditShop}/>\n```", "```js\nrouter.route('/api/shops/:shopId')\n    .delete(authCtrl.requireSignin, shopCtrl.isOwner, shopCtrl.remove)\n```", "```js\nconst remove = async (req, res) => {\n  try {\n    let shop = req.shop\n    let deletedShop = shop.remove()\n    res.json(deletedShop)\n  } catch (err) {\n    return res.status(400).json({\n      error: errorHandler.getErrorMessage(err)\n    })\n  } \n}\n```", "```js\n<DeleteShop shop={shop} onRemove={removeShop}/>\n```", "```js\nname: { \n    type: String, \n    trim: true, \n    required: 'Name is required' \n},\ndescription: { \n    type: String, \n    trim: true \n},\n```", "```js\nimage: { \n    data: Buffer, \n    contentType: String \n},\n```", "```js\ncategory: { \n    type: String \n},\n```", "```js\nquantity: { \n    type: Number, \n    required: \"Quantity is required\" \n},\n```", "```js\nprice: { \n    type: Number, \n    required: \"Price is required\" \n},\n```", "```js\nshop: {\n    type: mongoose.Schema.ObjectId, \n    ref: 'Shop'\n}\n```", "```js\nupdated: Date,\ncreated: { \n    type: Date, \n    default: Date.now \n},\n```", "```js\nrouter.route('/api/products/by/:shopId')\n  .post(authCtrl.requireSignin, shopCtrl.isOwner, productCtrl.create)\nrouter.param('shopId', shopCtrl.shopByID)\n```", "```js\napp.use('/', productRoutes)\n```", "```js\nconst create = (req, res, next) => {\n  let form = new formidable.IncomingForm()\n  form.keepExtensions = true\n  form.parse(req, async (err, fields, files) => {\n    if (err) {\n      return res.status(400).json({\n        message: \"Image could not be uploaded\"\n      })\n    }\n    let product = new Product(fields)\n    product.shop= req.shop\n    if(files.image){\n      product.image.data = fs.readFileSync(files.image.path)\n      product.image.contentType = files.image.type\n    }\n    try {\n      let result = await product.save()\n      res.json(result)\n    } catch (err){\n      return res.status(400).json({\n        error: errorHandler.getErrorMessage(err)\n      })\n    }\n  })\n}\n```", "```js\n<PrivateRoute path=\"/seller/:shopId/products/new\" component={NewProduct}/>\n```", "```js\nrouter.route('/api/products/by/:shopId')\n    .get(productCtrl.listByShop)\n```", "```js\nconst listByShop = async (req, res) => {\n  try {\n    let products = await Product.find({shop: req.shop._id})\n                          .populate('shop', '_id name').select('-image')\n    res.json(products)\n  } catch (err) {\n    return res.status(400).json({\n      error: errorHandler.getErrorMessage(err)\n    })\n  }\n}\n```", "```js\n<Products products={products} searched={false}/></Card>\n```", "```js\nuseEffect(() => {\n    const abortController = new AbortController()\n    const signal = abortController.signal\n\n    listByShop({\n      shopId: match.params.shopId\n    }, signal).then((data)=>{\n      if (data.error) {\n        setError(data.error)\n      } else {\n        setProducts(data)\n      }\n    })\n\n    return function cleanup(){\n      abortController.abort()\n    }\n}, [match.params.shopId])\n\n```", "```js\n{props.products.length > 0 ?\n    (<div>\n       <GridList cellHeight={200} cols={3}>\n           {props.products.map((product, i) => (\n            <GridListTile key={i}>\n              <Link to={\"/product/\"+product._id}>\n                <img src={'/api/product/image/'+product._id}\n                     alt={product.name} />\n              </Link>\n              <GridListTileBar\n                title={<Link to={\"/product/\"+product._id}>\n                    {product.name}</Link>}\n                subtitle={<span>$ {product.price} </span>}\n                actionIcon={\n                  <AddToCart item={product}/>\n                }\n              />\n            </GridListTile>))\n           }\n       </GridList>\n    </div>) : props.searched && (<Typography component=\"h4\">\n                                    No products found! :(</Typography>)}\n```", "```js\n<MyProducts shopId={match.params.shopId}/>\n```", "```js\nexport default function MyProducts (props){\n  const [products, setProducts] = useState([])\n  useEffect(() => {\n    const abortController = new AbortController()\n    const signal = abortController.signal\n    listByShop({\n      shopId: props.shopId\n    }, signal).then((data)=>{\n      if (data.error) {\n        console.log(data.error)\n      } else {\n        setProducts(data)\n      }\n    })\n    return function cleanup(){\n      abortController.abort()\n    }\n  }, [])\n...\n}\n\n```", "```js\nconst removeProduct = (product) => {\n    const updatedProducts = [...products]\n    const index = updatedProducts.indexOf(product)\n    updatedProducts.splice(index, 1)\n    setProducts(updatedProducts)\n}   \n\n```", "```js\n<DeleteProduct\n       product={product}\n       shopId={props.shopId}\n       onRemove={removeProduct}/>\n```", "```js\nrouter.route('/api/products/latest')\n      .get(productCtrl.listLatest)\n```", "```js\nconst listLatest = async (req, res) => {\n  try {\n    let products = await Product.find({}).sort('-created')\n         .limit(5).populate('shop', '_id name').exec()\n    res.json(products)\n  } catch (err){\n    return res.status(400).json({\n      error: errorHandler.getErrorMessage(err)\n    })\n  }\n}\n```", "```js\nrouter.route('/api/products/related/:productId')\n              .get(productCtrl.listRelated)\nrouter.param('productId', productCtrl.productByID)\n```", "```js\nconst productByID = async (req, res, next, id) => {\n  try {\n    let product = await Product.findById(id)\n       .populate('shop', '_id  name').exec()\n    if (!product)\n      return res.status('400').json({\n        error: \"Product not found\"\n      })\n    req.product = product\n    next()\n  } catch (err) {\n    return res.status('400').json({\n      error: \"Could not retrieve product\"\n    })\n  }\n}\n```", "```js\nconst listRelated = async (req, res) => {\n  try{\n    let products = await Product.find({ \"_id\": { \"$ne\": req.product }, \n         \"category\": req.product.category})\n             .limit(5).populate('shop', '_id name').exec()\n    res.json(products)\n  } catch (err){\n    return res.status(400).json({\n      error: errorHandler.getErrorMessage(err)\n    })\n  }\n}\n```", "```js\n<Suggestions  products={suggestions} title={suggestionTitle}/>\n```", "```js\n<Typography type=\"title\"> {props.title} </Typography>\n{props.products.map((item, i) => { \n  return <span key={i}> \n           <Card>\n             <CardMedia image={'/api/product/image/'+item._id} \n                        title={item.name}/>\n                <CardContent>\n                   <Link to={'/product/'+item._id}>\n                     <Typography type=\"title\" component=\"h3\">\n                    {item.name}</Typography>\n                   </Link>\n                   <Link to={'/shops/'+item.shop._id}>\n                     <Typography type=\"subheading\">\n                        <Icon>shopping_basket</Icon> {item.shop.name}\n                     </Typography>\n                   </Link>\n                   <Typography component=\"p\">\n                      Added on {(new \n                     Date(item.created)).toDateString()}\n                   </Typography>\n                </CardContent>\n                <Typography type=\"subheading\" component=\"h3\">$ \n                 {item.price}</Typography>\n                <Link to={'/product/'+item._id}>\n                  <IconButton color=\"secondary\" dense=\"dense\">\n                    <ViewIcon className={classes.iconButton}/>\n                  </IconButton>\n                </Link>\n                <AddToCart item={item}/>\n           </Card>\n         </span>})}\n```", "```js\nrouter.route('/api/products/:productId')\n      .get(productCtrl.read) \n```", "```js\nconst read = (req, res) => {\n  req.product.image = undefined\n  return res.json(req.product)\n}\n```", "```js\n<Route path=\"/product/:productId\" component={Product}/>\n```", "```js\nexport default function Product ({match}) {\n  const [product, setProduct] = useState({shop:{}})\n  const [suggestions, setSuggestions] = useState([])\n  const [error, setError] = useState('')\n    useEffect(() => {\n      const abortController = new AbortController()\n      const signal = abortController.signal\n\n      read({productId: match.params.productId}, signal).then((data) => {\n        if (data.error) {\n          setError(data.error)\n        } else {\n          setProduct(data)\n        }\n      })\n    return function cleanup(){\n      abortController.abort()\n    }\n  }, [match.params.productId])\n\n  useEffect(() => {\n    const abortController = new AbortController()\n    const signal = abortController.signal\n\n        listRelated({\n          productId: match.params.productId}, signal).then((data) => {\n          if (data.error) {\n            setError(data.error)\n          } else {\n            setSuggestions(data)\n          }\n        })\n  return function cleanup(){\n    abortController.abort()\n  }\n}, [match.params.productId])\n```", "```js\n<Card>\n  <CardHeader\n    action={<AddToCart cartStyle={classes.addCart} \n    item={product}/>}\n    title={product.name}\n    subheader={product.quantity > 0? 'In Stock': 'Out of   \n   Stock'}\n  />\n  <CardMedia image={imageUrl} title={product.name}/>\n  <Typography component=\"p\" variant=\"subtitle1\">\n    {product.description}<br/>\n    $ {product.price}\n    <Link to={'/shops/'+product.shop._id}>\n      <Icon>shopping_basket</Icon> {product.shop.name}\n    </Link>\n  </Typography>\n</Card>\n```", "```js\n<Suggestions products={suggestions} title='Related Products'/>\n```", "```js\n<PrivateRoute path=\"/seller/:shopId/:productId/edit\" component={EditProduct}/>\n```", "```js\nrouter.route('/api/product/:shopId/:productId')\n      .put(authCtrl.requireSignin, shopCtrl.isOwner, productCtrl.update)\n```", "```js\nrouter.route('/api/product/:shopId/:productId')\n      .delete(authCtrl.requireSignin, shopCtrl.isOwner, productCtrl.remove)\n```", "```js\nrouter.route('/api/products/categories')\n      .get(productCtrl.listCategories)\n```", "```js\nconst listCategories = async (req, res) => {\n  try {\n    let products = await Product.distinct('category',{})\n    res.json(products)\n  } catch (err){\n    return res.status(400).json({\n      error: errorHandler.getErrorMessage(err)\n    })\n  }\n}\n```", "```js\nrouter.route('/api/products')\n      .get(productCtrl.list)\n```", "```js\nconst list = async (req, res) => {\n  const query = {}\n  if(req.query.search)\n    query.name = {'$regex': req.query.search, '$options': \"i\"}\n  if(req.query.category && req.query.category != 'All')\n    query.category = req.query.category\n  try {\n    let products = await Product.find(query)\n                                .populate('shop', '_id name')\n                                .select('-image').exec()\n    res.json(products)\n  } catch (err){\n    return res.status(400).json({\n      error: errorHandler.getErrorMessage(err)\n    })\n  }\n}\n```", "```js\nimport queryString from 'query-string'\nconst list = (params) => {\n  const query = queryString.stringify(params)\n  return fetch('/api/products?'+query, {\n    method: 'GET',\n  }).then(response => {\n    return response.json()\n  }).catch((err) => console.log(err))\n}\n```", "```js\n<TextField id=\"select-category\" select label=\"Select category\" value={category}\n     onChange={handleChange('category')}\n     selectProps={{ MenuProps: { className: classes.menu, } }}>\n  <MenuItem value=\"All\"> All </MenuItem>\n  {props.categories.map(option => (\n    <MenuItem key={option} value={option}> {option} </MenuItem>\n        ))}\n</TextField>\n<TextField id=\"search\" label=\"Search products\" type=\"search\" onKeyDown={enterKey}\n     onChange={handleChange('search')}\n/>\n<Button raised onClick={search}> Search </Button>\n```", "```js\nconst enterKey = (event) => {\n   if(event.keyCode == 13){\n     event.preventDefault()\n     search()\n   }\n}\n```", "```js\nconst search = () => {\n    if(values.search){\n      list({\n        search: values.search || undefined, category: values.category\n      }).then((data) => {\n        if (data.error) {\n          console.log(data.error)\n        } else {\n          setValues({...values, results: data, searched:true})\n        }\n      })\n    }\n}\n```", "```js\n<Products products={results} searched={searched}/>\n```"]