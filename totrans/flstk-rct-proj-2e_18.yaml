- en: Making the VR Game Dynamic using MERN
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 MERN 使 VR 游戏动态化
- en: In this chapter, we will extend the **MongoDB**, **Express.js**, **React.js**,
    **and Node.js** (**MERN**) skeleton application to build the MERN VR Game application,
    and use it to convert the static React 360 game developed in the previous chapter
    into a dynamic game. We will achieve this by replacing the sample game data with
    game details fetched directly from the database. We will use the MERN stack technologies
    to implement a game model and **Create, Read, Update, and Delete** (**CRUD**)
    **application programming interfaces** (**APIs**) in the backend, which will allow
    storage and retrieval of games, and frontend views, which will allow users to
    make their own games besides playing any of the games on the platform in their
    browser. We will update and integrate the game developed with React 360 into the
    game platform developed with MERN technologies. After completing these implementations
    and integration, you will be able to design and build your own full-stack web
    applications with dynamic VR features.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将扩展 **MongoDB**、**Express.js**、**React.js**、**和 Node.js**（**MERN**）骨架应用程序以构建
    MERN VR Game 应用程序，并使用它将上一章开发的静态 React 360 游戏转换为动态游戏。我们将通过用从数据库直接获取的游戏详情替换示例游戏数据来实现这一点。我们将使用
    MERN 栈技术在后端实现游戏模型和 **创建、读取、更新和删除**（**CRUD**）**应用程序编程接口**（**APIs**），这将允许存储和检索游戏，以及前端视图，这将允许用户在浏览器中创建自己的游戏，同时还可以玩平台上任何游戏。我们将更新并将使用
    React 360 开发的游戏集成到使用 MERN 技术开发的游戏平台中。完成这些实现和集成后，您将能够设计和构建具有动态 VR 功能的全栈 Web 应用程序。
- en: 'To make MERN VR Game a complete and dynamic game application, we will implement
    the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使 MERN VR Game 成为完整且动态的游戏应用程序，我们将实现以下功能：
- en: A game model schema to store game details in MongoDB
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于在 MongoDB 中存储游戏详情的游戏模型模式
- en: APIs for game CRUD operations
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 游戏 CRUD 操作的 API
- en: React views for creating, editing, listing, and deleting games
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于创建、编辑、列出和删除游戏的 React 视图
- en: Updating the React 360 game to fetch data with the API
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 API 更新 React 360 游戏以获取数据
- en: Loading the VR game with dynamic game data
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用动态游戏数据加载 VR 游戏
- en: Introducing the dynamic MERN VR Game application
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍动态 MERN VR Game 应用程序
- en: 'Throughout this chapter, we will develop the MERN VR Game application with
    MERN-stack technologies. On this platform, registered users will be able to make
    and modify their own games by providing an equirectangular image for the game
    world, and the VR object resources, including transform property values for each
    object to be placed in the game world. Any visitor to the application will be
    able to browse through all the games added by the makers and play any game, to
    find and collect the 3D objects in the game world that are relevant to the clue
    or description of each game. When a registered user signs into the application,
    they will see a home page with all the games listed and an option to make their
    own game, as pictured in the following screenshot:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用 MERN-stack 技术开发 MERN VR Game 应用程序。在这个平台上，注册用户可以通过提供游戏世界的等距图像以及放置在游戏世界中的每个对象的变换属性值来创建和修改自己的游戏。任何访问应用程序的访客都可以浏览所有由制作者添加的游戏，并玩任何游戏，以找到和收集与每个游戏线索或描述相关的游戏世界中的
    3D 对象。当注册用户登录应用程序时，他们将看到一个包含所有游戏列表的主页，以及创建自己游戏的选项，如下面的截图所示：
- en: '![](img/ad11f43c-0c43-4c0e-997a-f2cdbc62a86f.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ad11f43c-0c43-4c0e-997a-f2cdbc62a86f.png)'
- en: The code for the complete MERN VR Game application is available on GitHub at [https://github.com/PacktPublishing/Full-Stack-React-Projects-Second-Edition/tree/master/Chapter14/mern-vrgame](https://github.com/PacktPublishing/Full-Stack-React-Projects-Second-Edition/tree/master/Chapter14/mern-vrgame). You
    can clone this code and run the application as you go through the code explanations
    for the rest of this chapter.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的 MERN VR Game 应用程序的代码可在 GitHub 上找到，网址为 [https://github.com/PacktPublishing/Full-Stack-React-Projects-Second-Edition/tree/master/Chapter14/mern-vrgame](https://github.com/PacktPublishing/Full-Stack-React-Projects-Second-Edition/tree/master/Chapter14/mern-vrgame)。您可以在阅读本章其余部分的代码解释时克隆此代码并运行应用程序。
- en: 'The views needed for the MERN VR Game application will be developed by extending
    and modifying the existing React components in the MERN skeleton application. The
    component tree pictured in the following screenshot shows all the custom React
    components that make up the MERN VR Game frontend developed in this chapter:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: MERN VR Game 应用程序所需的视图将通过扩展和修改 MERN 骨架应用程序中现有的 React 组件来开发。以下截图所示的组件树显示了本章开发的
    MERN VR Game 前端的所有自定义 React 组件：
- en: '![](img/dc786562-af28-45cf-a355-457b1f6919e2.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/dc786562-af28-45cf-a355-457b1f6919e2.png)'
- en: We will add new React components related to creating, editing, and listing VR
    games, and will also modify existing components such as the `Profile`, `Menu`,
    and `Home` components as we build out the features of the MERN VR Game application
    in the rest of the chapter. The core features in this game platform depend on
    the capability to store specific details of each game. In the next section, we
    will begin implementing the MERN VR Game application by defining a game model
    for storing details of each game.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将添加与创建、编辑和列出 VR 游戏相关的新的 React 组件，并且随着我们在本章的其余部分构建 MERN VR 游戏应用程序的功能，我们还将修改现有的组件，如`Profile`、`Menu`和`Home`组件。在这个游戏平台的核心功能依赖于存储每个游戏特定细节的能力。在下一节中，我们将通过定义存储每个游戏详细信息的游戏模型来开始实现
    MERN VR 游戏应用程序。
- en: Defining a Game model
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义游戏模型
- en: In order to store details of each game in the platform, we will implement a
    Mongoose model to define a Game model, and the implementation will be similar
    to other Mongoose model implementations covered in previous chapters, such as
    the Course model defined in [Chapter 6](c58ac055-5a1e-4bf4-b8a6-c9b311cf267a.xhtml),
    *Building a Web-Based Classroom Application*. In [Chapter 13](4f633dd6-f392-490d-b3a6-eb5430b58ec8.xhtml),
    *Developing a Web-Based VR Game*, the *Game data structure* section laid out the
    details needed for each game in order to implement the scavenger-hunt features
    defined for the gameplay.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在平台上存储每场比赛的详细信息，我们将实现一个 Mongoose 模型来定义一个游戏模型，其实现方式将与之前章节中介绍的其他 Mongoose 模型实现类似，例如在[第
    6 章](c58ac055-5a1e-4bf4-b8a6-c9b311cf267a.xhtml)，*构建基于 Web 的课堂应用程序*中定义的课程模型。在[第
    13 章](4f633dd6-f392-490d-b3a6-eb5430b58ec8.xhtml)，*开发基于 Web 的 VR 游戏*中，*游戏数据结构*部分详细说明了实现游戏玩法中定义的寻宝功能所需的每个游戏的详细信息。
- en: We will design the game schema based on these specific details about the game,
    its VR objects, and also a reference to the game maker. In the following sections,
    we will discuss the specifics of the game schema, the sub-schema for storing individual
    VR objects that will be a part of the game, and the validation check to ensure
    a minimum number of VR objects are placed in the game.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将根据这些关于游戏、其 VR 物体以及游戏制作者的具体细节来设计游戏模式。在以下章节中，我们将讨论游戏模式的细节，存储游戏中将作为一部分的单独 VR
    物体的子模式，以及确保在游戏中放置的最小 VR 物体数量的验证检查。
- en: Exploring the game schema
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索游戏模式
- en: 'The game schema, which defines the game model with a structure for the game
    data, will specify the fields to store details about each game. These details
    will include a game name; a link for the game world image file, text description,
    or clue; arrays containing details of 3D objects in the game, timestamps indicating
    when the game was created or updated; and a reference to the user who created
    the game. The schema for the game model will be defined in `server/models/game.model.js`, and
    the code defining these game fields is given in the following list, with explanations:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏模式，它定义了游戏数据结构，将指定存储每个游戏详细信息的字段。这些详细信息将包括游戏名称；游戏世界图像文件、文本描述或线索的链接；包含游戏中 3D
    物体详细信息的数组；表示游戏创建或更新的时间戳；以及创建游戏的用户的引用。游戏模型的模式将在`server/models/game.model.js`中定义，以下列表中给出了定义这些游戏字段的代码，并附有说明：
- en: '**Game name**: The `name` field will store a title for the game. It is declared
    to be a `String` type and will be a required field:'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**游戏名称**：`name`字段将存储游戏的标题。它被声明为`String`类型，并且是一个必填字段：'
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**World image URL**: The `world` field will contain the URL pointing to the
    equirectangular image that makes up the 3D world of the game. It is declared to
    be a `String` type and will be a required fielde:'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**世界图像 URL**：`world`字段将包含指向构成游戏 3D 世界的等经圆图像的 URL。它被声明为`String`类型，并且是一个必填字段：'
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Clue text**: The `clue` field will store text of `String` type to give a
    description of the game or clues about how to complete the game:'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**线索文本**：`clue`字段将存储`String`类型的文本，以描述游戏或提供完成游戏的线索：'
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Collectable and other VR objects**: The `answerObjects` field will be an
    array containing details of the VR objects to be added to the game as collectable objects,
    whereas the `wrongObjects` field will be an array with VR objects that cannot
    be collected in the game. Objects in these arrays will be defined in a separate
    VR object schema, as discussed in the next section:'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可收集和其他 VR 对象**：`answerObjects` 字段将是一个包含要添加到游戏中的可收集 VR 对象详细信息的数组，而 `wrongObjects`
    字段将是一个包含游戏中不能收集的 VR 对象的数组。这些数组中的对象将在下一节中讨论的单独 VR 对象模式中定义：'
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Created at and updated at times**: The `created` and `updated` fields will
    be `Date` types, with `created` generated when a new game is added, and `updated`
    changed when any game details are modified:'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建时间和更新时间**：`created` 和 `updated` 字段为 `Date` 类型，`created` 在添加新游戏时生成，`updated`
    在修改任何游戏详细信息时更改：'
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Game maker**: The `maker` field will be a reference to the user who made
    the game:'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**游戏制作者**：`maker` 字段将是创建游戏的用户的引用：'
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: These fields added in the game schema definition will capture details of each
    game on the platform and allow us to implement the game-related features in the
    MERN VR Game application. The VR objects to be stored in the `answerObjects` and
    `wrongObjects` arrays in the game schema will hold details of each VR object to
    be placed in the game world. In the next section, we will explore the schema defining
    the details to be stored for each VR object.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在游戏模式定义中添加的这些字段将捕获平台上每个游戏的详细信息，并允许我们在 MERN VR 游戏应用程序中实现游戏相关功能。在游戏模式中的 `answerObjects`
    和 `wrongObjects` 数组中存储的 VR 对象将包含放置在游戏世界中的每个 VR 对象的详细信息。在下一节中，我们将探讨定义每个 VR 对象存储详细信息的模式。
- en: Specifying the VR object schema
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 指定 VR 对象模式
- en: The `answerObjects` and `wrongObjects` fields already defined in the game schema
    will both be arrays of VR object documents. These documents will represent the
    VR objects that are a part of the game. We will define the VR object Mongoose
    schema for these documents separately, with fields for storing the URLs of the
    **object** (**OBJ**) file and **Material Template Library** (**MTL**) file, along
    with the React 360 transform values, the scale value, and color value for each
    VR object.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏模式中已定义的 `answerObjects` 和 `wrongObjects` 字段都将包含 VR 对象文档的数组。这些文档将代表游戏中的 VR
    对象。我们将为这些文档单独定义 VR 对象 Mongoose 模式，其中包含用于存储 **对象**（**OBJ**）文件和 **材质模板库**（**MTL**）文件
    URL 的字段，以及 React 360 变换值、每个 VR 对象的缩放值和颜色值。
- en: 'The schema for the VR object will also be defined in `server/models/game.model.js`, and
    the code defining these fields is given in the following list, with explanations:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: VR 对象的模式也将定义在 `server/models/game.model.js` 中，定义这些字段的代码如下列表所示，并附有说明：
- en: '**OBJ and MTL file URLs**: The `objUrl` and `mtlUrl` fields will store the
    links to the OBJ and MTL files representing the 3D object data. These fields will
    be of `String` type and are required fields for storing a VR object:'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**OBJ 和 MTL 文件 URL**：`objUrl` 和 `mtlUrl` 字段将存储表示 3D 对象数据的 OBJ 和 MTL 文件的链接。这些字段为
    `String` 类型，是存储 VR 对象的必需字段：'
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**Translation transform values**: The `translateX`, `translateY`, and `translateZ` fields
    will hold the position values of the VR object in 3D space. These fields will
    be of `Number` type, and the default value for each will be `0`:'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**平移变换值**：`translateX`、`translateY` 和 `translateZ` 字段将包含 VR 对象在 3D 空间中的位置值。这些字段为
    `Number` 类型，每个字段的默认值均为 `0`：'
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**Rotation transform values**: The `rotateX`, `rotateY`, and `rotateZ` fields
    will hold the orientation values of the VR object in 3D space. These fields will
    be of `Number` type, and the default value for each will be `0`:'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**旋转变换值**：`rotateX`、`rotateY` 和 `rotateZ` 字段将包含 VR 对象在 3D 空间中的方向值。这些字段为 `Number`
    类型，每个字段的默认值均为 `0`：'
- en: '[PRE8]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '**Scale**: The `scale` field will represent the relative size appearance of
    the VR object. This field will be of `Number` type, and the default value will
    be `1`:'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缩放**：`scale` 字段将表示 VR 对象的相对大小外观。此字段为 `Number` 类型，默认值为 `1`：'
- en: '[PRE9]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '**Color**: The `color` field will specify the default color of the object if
    it is not provided in the MTL file. This field will be of `String` type, and the
    default value will be `white`:'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**颜色**：如果 MTL 文件中没有提供，`color` 字段将指定对象的默认颜色。此字段为 `String` 类型，默认值为 `white`：'
- en: '[PRE10]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: These fields in the VR object schema represent a VR object to be added to the
    game world. When a new game document is saved to the database, the `answerObjects`
    and `wrongObjects` arrays will be populated with `VRObject` documents that adhere
    to this schema definition. When a user is creating a new game using this Game
    model with the defined game and VR object schemas, we want to ensure the user
    adds at least one VR object to each array in the game data. In the next section,
    we will take a look at how to add this validation check to the Game model.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: VR对象模式中的这些字段代表要添加到游戏世界中的VR对象。当新的游戏文档保存到数据库时，`answerObjects`和`wrongObjects`数组将填充符合此模式定义的`VRObject`文档。当用户使用定义的游戏和VR对象模式创建新游戏时，我们希望确保用户至少在每个游戏数据数组中添加一个VR对象。在下一节中，我们将探讨如何将此验证检查添加到游戏模型中。
- en: Validating array length in the game schema
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在游戏模式中验证数组长度
- en: In the game schema defining the Game model, we have two arrays for adding VR
    objects to the game. These `answerObjects` and `wrongObjects` arrays in a game
    document must contain at least one VR object in each array when a game is being
    saved in the game collection. To add this validation for a minimum array length
    to the game schema, we will add the following custom validation checks to the
    `answerObjects` and `wrongObjects` paths in the `GameSchema` defined with Mongoose.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在定义游戏模型的游戏模式中，我们有两个数组用于向游戏中添加VR对象。当游戏在游戏集合中保存时，这些在游戏文档中的`answerObjects`和`wrongObjects`数组必须每个数组至少包含一个VR对象。为了将最小数组长度验证添加到游戏模式中，我们将向使用Mongoose定义的`GameSchema`中的`answerObjects`和`wrongObjects`路径添加以下自定义验证检查。
- en: 'We will use `validate` to add the array length validation for the `answerObjects`
    field, as shown in the following code:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`validate`为`answerObjects`字段添加数组长度验证，如下面的代码所示：
- en: '`mern-vrgame/server/models/game.model.js`:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/server/models/game.model.js`:'
- en: '[PRE11]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In this validation check, if the array length is found to be `0`, we throw a
    validation error message indicating that at least one object must be added to
    the array, before saving the game document in the database.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在此验证检查中，如果发现数组长度为`0`，我们将抛出一个验证错误消息，指出在将游戏文档保存到数据库之前，至少必须向数组中添加一个对象。
- en: 'The same validation code is also added for the `wrongObjects` field, as shown
    in the following code:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 相同的验证代码也添加到`wrongObjects`字段，如下面的代码所示：
- en: '`mern-vrgame/server/models/game.model.js`:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/server/models/game.model.js`:'
- en: '[PRE12]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: These checks run every time a game is to be saved in the database and help ensure
    the game is made with at least two VR objects, including one object that can be
    collected and another object that cannot be collected. These schema definitions
    and validations used for defining the Game model will allow a game database for
    the application to be maintained. This game collection will cater to all the requirements
    for developing a dynamic VR game according to the specifications of the MERN VR
    Game application. In order to allow users to access the game collection, for both
    making their own games and retrieving games made by others, we need to implement
    corresponding CRUD APIs in the backend. In the next section, we will implement
    these CRUD APIs that will allow users to create, read, list, update, and delete
    games from the application.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这些检查会在每次要将游戏保存到数据库时运行，并有助于确保游戏至少包含两个VR对象，包括一个可收集的对象和一个不可收集的对象。用于定义游戏模型的这些模式定义和验证将允许维护应用程序的游戏数据库。为了允许用户访问游戏集合，无论是制作自己的游戏还是检索他人的游戏，我们需要在后端实现相应的CRUD
    API。在下一节中，我们将实现这些CRUD API，这将使用户能够从应用程序中创建、读取、列出、更新和删除游戏。
- en: Implementing game CRUD APIs
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现游戏CRUD API
- en: In order to build a game platform that allows VR games to be made, managed,
    and accessed, we need to extend the backend to accept requests that enable game
    data manipulation in the database. To make these features possible, the backend
    in the MERN VR Game application will expose a set of CRUD APIs for creating, editing,
    reading, listing, and deleting games from the database, which can be used in the
    frontend of the application with fetch calls, including in the React 360 game
    implementation. In the following sections, we will implement these CRUD API endpoints
    in the backend, along with the corresponding `fetch` methods that will be deployed
    in the frontend to use these APIs.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 为了构建一个允许制作、管理和访问 VR 游戏的游戏平台，我们需要扩展后端以接受允许在数据库中操作游戏数据的请求。为了使这些功能成为可能，MERN VR
    Game 应用程序的后端将公开一组 CRUD API，用于在数据库中创建、编辑、读取、列出和删除游戏，这些 API 可以在应用程序的前端使用 `fetch`
    调用中使用，包括在 React 360 游戏实现中。在接下来的章节中，我们将在后端实现这些 CRUD API 端点，以及将在前端部署以使用这些 API 的相应
    `fetch` 方法。
- en: Creating a new game
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个新的游戏
- en: 'A user who is signed in to the application will be able to create new games
    in the database with the create game API endpoint. For the implementation of this
    API in the backend, we will first declare a `POST` route at `/api/games/by/:userId`,
    as shown in the following code:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 已登录应用程序的用户将能够通过创建游戏 API 端点在数据库中创建新游戏。对于在后端实现此 API，我们首先在 `/api/games/by/:userId`
    上声明一个 `POST` 路由，如下所示：
- en: '`mern-vrgame/server/routes/game.routes.js`:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/server/routes/game.routes.js`:'
- en: '[PRE13]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: A `POST` request to this route will process the `:userId` param, verify that the
    current user is signed in, and then create a new game with the game data passed
    in the request.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 向此路由发送 `POST` 请求将处理 `:userId` 参数，验证当前用户是否已登录，然后使用请求中传递的游戏数据创建一个新游戏。
- en: 'The `game.routes.js` file containing this route declaration will be very similar
    to the `user.routes` file, and to load these new routes in the Express app, we
    need to mount the game routes in `express.js`, just as we did for the auth and
    user routes. The game routes can be mounted in the Express app by adding the following
    line of code:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 包含此路由声明的 `game.routes.js` 文件将与 `user.routes` 文件非常相似，为了在 Express 应用中加载这些新路由，我们需要在
    `express.js` 中挂载游戏路由，就像我们为认证和用户路由所做的那样。可以通过添加以下代码行将游戏路由挂载到 Express 应用中：
- en: '`mern-vrgame/server/express.js`:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/server/express.js`'
- en: '[PRE14]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This will make the declared game routes available for receiving requests when
    the server is running.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使声明的游戏路由在服务器运行时能够接收请求。
- en: 'After a request is received by this create game API, to process the `:userId` param
    and retrieve the associated user from the database we will utilize the `userByID` method
    from the user controller. We will also add the following code to the game routes,
    so the user is available in the `request` object:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在接收到创建游戏 API 的请求后，为了处理 `:userId` 参数并从数据库检索相关用户，我们将利用用户控制器中的 `userByID` 方法。我们还将添加以下代码到游戏路由中，以便用户在
    `request` 对象中可用：
- en: '`mern-vrgame/server/routes/game.routes.js`:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/server/routes/game.routes.js`:'
- en: '[PRE15]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Once the user authentication is verified after receiving the `POST` request
    containing the game data in the body, the `create` controller method is invoked
    next, to add the new game to the database. This `create` controller method is
    defined as shown in the following code:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在接收到包含游戏数据的 `POST` 请求并验证用户身份验证后，将调用 `create` 控制器方法，将新游戏添加到数据库中。此 `create` 控制器方法定义如下所示：
- en: '`mern-vrgame/server/controllers/game.controller.js`'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/server/controllers/game.controller.js`'
- en: '[PRE16]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In this `create` method, a new game document is created according to the game
    model and the data passed in the request body from the client side. Then, this
    document is saved in the Game collection after the user reference is set as the
    game maker.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在此 `create` 方法中，根据游戏模型和客户端请求体中传递的数据创建一个新的游戏文档。然后，在用户引用设置为游戏制作者后，将此文档保存到游戏集合中。
- en: 'On the frontend, we will add a corresponding `fetch` method in `api-game.js`
    to make a `POST` request to the create game API by passing the form data collected
    from the signed-in user. This `fetch` method is defined as shown in the following
    code:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在前端，我们将在 `api-game.js` 中添加一个相应的 `fetch` 方法，通过传递从已登录用户收集的表单数据向创建游戏 API 发送 `POST`
    请求。此 `fetch` 方法定义如下所示：
- en: '`mern-vrgame/client/game/api-game.js`'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/client/game/api-game.js`'
- en: '[PRE17]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This `fetch` method will be used in the frontend and provided the new game data
    with the user credentials needed to make the `POST` request to the create game
    API. The response from the `fetch` method will tell the user if the game was created
    successfully.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 `fetch` 方法将在前端使用，并提供创建游戏API所需的用户凭证以进行 `POST` 请求。`fetch` 方法的响应将告诉用户游戏是否成功创建。
- en: This create game API endpoint is ready to be used in a form view that can collect
    the new game details from the user, so new games can be added to the database.
    In the next section, we will implement an API endpoint that will retrieve the
    games already added to the database.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这个创建游戏API端点是准备好的，可以在一个表单视图中使用，它可以收集用户的新游戏详情，因此可以将新游戏添加到数据库中。在下一节中，我们将实现一个API端点，该端点将检索已添加到数据库中的游戏。
- en: Listing all games
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列出所有游戏
- en: 'In the MERN VR Game application, it will be possible to retrieve a list of
    all the games in the Game collection from the database using a list games API
    in the backend. We will implement this API endpoint in the backend by adding a
    `GET` route to the game routes, as shown in the following code:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在 MERN VR Game 应用程序中，将可以使用后端中的列表游戏API从数据库中检索 Game 集合中的所有游戏列表。我们将通过向游戏路由添加一个
    `GET` 路由来实现这个API端点，如下面的代码所示：
- en: '`mern-vrgame/server/routes/game.routes.js`:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/server/routes/game.routes.js`:'
- en: '[PRE18]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: A `GET` request to `/api/games` will execute the `list` controller method, which will
    query the Game collection in the database, to return all the games in the response
    to the client.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 对 `/api/games` 的 `GET` 请求将执行 `list` 控制器方法，该方法将查询数据库中的 Game 集合，以在客户端响应中返回所有游戏。
- en: 'This `list` controller method will be defined as follows:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 `list` 控制器方法将定义如下：
- en: '`mern-vrgame/server/controllers/game.controller.js`:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/server/controllers/game.controller.js`:'
- en: '[PRE19]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In this method, the results retrieved by the query to the Game collection are
    sorted by the date of creation, with the latest games listed first. Each game
    in the list will also populate the name and ID of the user who created it. The
    resulting list of sorted games is returned in the response to the requesting client.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在此方法中，查询 Game 集合检索到的结果将按创建日期排序，最新游戏排在前面。列表中的每个游戏也将填充创建它的用户的名字和ID。排序后的游戏列表将作为响应返回给请求客户端。
- en: 'In the frontend, to fetch the games using this list API, we will set up a corresponding `fetch`
    method in `api-game.js`, as shown in the following code:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在前端，要使用此列表API获取游戏，我们将在 `api-game.js` 中设置相应的 `fetch` 方法，如下面的代码所示：
- en: '`mern-vrgame/client/game/api-game.js`:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/client/game/api-game.js`:'
- en: '[PRE20]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This `fetch` method can be used in any frontend interface to make a call to
    the list games API. The `fetch` will make a `GET` request to the API and receive
    the list of games in the response, which can be rendered in the interface. In
    the next section, we will implement another listing API that will only return
    the games made by a specific user.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 `fetch` 方法可以在任何前端界面中使用，以调用列表游戏API。`fetch` 将向API发出 `GET` 请求，并在响应中接收游戏列表，这可以在界面中渲染。在下一节中，我们将实现另一个仅返回特定用户制作的游戏的列表API。
- en: Listing games by the maker
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 按制作者列出游戏
- en: 'In the MERN VR Game application, it will also be possible to retrieve a list
    of games made by a specific user. To implement this, we will add another API endpoint
    in the backend that accepts a `GET` request at the `/api/games/by/:userId` route.
    This route will be declared with the other game routes, as shown in the following
    code:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在 MERN VR Game 应用程序中，还可以检索由特定用户制作的游戏列表。为了实现这一点，我们将在后端添加另一个API端点，该端点接受在 `/api/games/by/:userId`
    路由上的 `GET` 请求。此路由将与其他游戏路由一起声明，如下面的代码所示：
- en: '`mern-vrgame/server/routes/game.routes.js`:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/server/routes/game.routes.js`:'
- en: '[PRE21]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'A `GET` request received at this route will invoke the `listByMaker` controller
    method, which will query the Game collection in the database to get the matching
    games. The `listByMaker` controller method will be defined as follows:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在此路由收到的 `GET` 请求将调用 `listByMaker` 控制器方法，该方法将查询数据库中的 Game 集合以获取匹配的游戏。`listByMaker`
    控制器方法将定义如下：
- en: '`mern-vrgame/server/controllers/game.controller.js`:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/server/controllers/game.controller.js`:'
- en: '[PRE22]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: In the query to the Game collection in this method, we find all the games where
    the `maker` field matches the user specified in the `userId` route parameter.
    The retrieved games will contain the maker name and ID and will be returned in
    the response to the requesting client.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在此方法中对游戏集合的查询中，我们找到所有 `maker` 字段与 `userId` 路由参数中指定的用户匹配的游戏。检索到的游戏将包含制造商的名称和
    ID，并将作为响应返回给请求客户端。
- en: 'In the frontend, to fetch the games for a specific user with this list by the
    maker API, we will add a corresponding `fetch` method in `api-game.js`, as shown
    in the following code:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在前端，为了通过制造商 API 使用此列表获取特定用户的游戏，我们将在 `api-game.js` 中添加相应的 `fetch` 方法，如下所示：
- en: '`mern-vrgame/client/game/api-game.js`:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/client/game/api-game.js`:'
- en: '[PRE23]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This `fetch` method can be invoked in the frontend interface with the user ID
    to make a call to the list games by the maker API. The `fetch` method will make
    a `GET` request to the API and receive the list of games made by the user specified
    in the URL. In the next section, we will implement a similar `GET` API to retrieve details
    of an individual game.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 此 `fetch` 方法可以在前端界面中使用用户 ID 调用由制造商 API 列出的游戏。`fetch` 方法将对 API 发出 `GET` 请求并接收由
    URL 中指定的用户创建的游戏列表。在下一节中，我们将实现一个类似的 `GET` API 来检索单个游戏的详细信息。
- en: Loading a game
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加载游戏
- en: 'In the backend of the MERN VR Game application, we will expose an API that
    will retrieve the details of an individual game, specified by its ID in the game
    collection. To achieve this, we can add a `GET` API that queries the Game collection
    with an ID and returns the corresponding game document in the response. We will
    start implementing this API to fetch a single game by declaring a route that accepts
    a `GET` request at `''/api/game/:gameId''`, as shown in the following code:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在 MERN VR Game 应用程序的后端，我们将公开一个 API，该 API 将检索游戏集合中指定 ID 的单个游戏的详细信息。为了实现这一点，我们可以添加一个
    `GET` API，该 API 查询 `Game` 集合并返回响应中的相应游戏文档。我们将开始实现此 API 以通过声明接受在 `'/api/game/:gameId'`
    处的 `GET` 请求的路由来获取单个游戏，如下所示：
- en: '`mern-vrgame/server/routes/game.routes.js`:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/server/routes/game.routes.js`:'
- en: '[PRE24]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'When a request is received at this route, the `:gameId` param in the route
    URL will be processed first to retrieve the individual game from the database.
    So, we will also add the following to the game routes:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 当接收到此路由的请求时，路由 URL 中的 `:gameId` 参数将首先被处理以从数据库中检索单个游戏。因此，我们还将以下内容添加到游戏路由中：
- en: '[PRE25]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The presence of the `:gameId` param in the route will invoke the `gameByID`
    controller method, which is similar to the `userByID` controller method. It will
    retrieve the game from the database and attach it to the `request` object to be
    used in the `next` method. This `gameByID` controller method is defined as shown
    in the following code:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 路由中存在 `:gameId` 参数将触发 `gameByID` 控制器方法，该方法与 `userByID` 控制器方法类似。它将从数据库中检索游戏并将其附加到
    `request` 对象中，以便在 `next` 方法中使用。此 `gameByID` 控制器方法定义如下所示：
- en: '`mern-vrgame/server/controllers/game.controller.js`:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/server/controllers/game.controller.js`:'
- en: '[PRE26]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The game queried from the database will also contain the name and ID details
    of the maker, as specified in the `populate()` method. The `next` method—in this
    case, the `read` controller method—simply returns this retrieved game in response
    to the client. This `read` controller method is defined as follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 从数据库查询到的游戏还将包含制造商的名称和 ID 详细信息，如 `populate()` 方法中指定的。在此情况下，`next` 方法——即 `read`
    控制器方法——简单地返回检索到的游戏作为对客户端的响应。此 `read` 控制器方法定义如下：
- en: '`mern-vrgame/server/controllers/game.controller.js`:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/server/controllers/game.controller.js`:'
- en: '[PRE27]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'This API to read a single game''s details will be used to load a game in the
    React 360 implementation of the game world. We can call this API in the frontend
    code using a `fetch` method, to retrieve the details of an individual game according
    to its ID. A corresponding `fetch` method can be defined to call this game API,
    as shown in the following code:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 此读取单个游戏详细信息的 API 将用于在 React 360 游戏世界的实现中加载游戏。我们可以在前端代码中使用 `fetch` 方法调用此 API，根据其
    ID 检索单个游戏的详细信息。可以定义一个相应的 `fetch` 方法来调用此游戏 API，如下所示：
- en: '`mern-vrgame/client/game/api-game.js`:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/client/game/api-game.js`:'
- en: '[PRE28]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This `read` method will take the game ID in the `params` and make a `GET` request
    to the API, using a `fetch` method.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 此 `read` 方法将获取 `params` 中的游戏 ID 并使用 `fetch` 方法向 API 发出 `GET` 请求。
- en: This API for loading a single game will be used for the React views fetching
    a game detail and also the React 360 game view, which will render the game interface
    in the MERN VR Game application. In the next section, we will implement the API
    that will allow makers to update the games they already created on the platform.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 此用于加载单个游戏的API将被用于React视图获取游戏详情以及React 360游戏视图，该视图将在MERN VR游戏应用中渲染游戏界面。在下节中，我们将实现允许制作者更新他们在平台上已创建的游戏的API。
- en: Editing a game
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编辑游戏
- en: 'Authorized users who are signed in—and also the maker of a specific game—will
    be able to edit the details of that game in the database. To enable this feature,
    we will implement an edit game API in the backend. We will add a `PUT` route that
    allows an authorized user to edit one of their games. The route will be declared
    as follows:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 已登录的授权用户以及特定游戏的制作者将能够编辑该游戏在数据库中的详细信息。为了启用此功能，我们将在后端实现一个编辑游戏的API。我们将添加一个`PUT`路由，允许授权用户编辑他们自己的其中一个游戏。该路由声明如下：
- en: '`mern-vrgame/server/routes/game.routes.js`:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/server/routes/game.routes.js`:'
- en: '[PRE29]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: A `PUT` request to `'/api/games/:gameId'` will first execute the `gameByID`
    controller method to retrieve the specific game's details. The `requireSignin`
    auth controller method will also be called to ensure the current user is signed
    in. Then, the `isMaker` controller method will determine whether the current user
    is the maker of this specific game, before finally running the game `update` controller
    method to modify the game in the database.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 对`'/api/games/:gameId'`的`PUT`请求将首先执行`gameByID`控制器方法以检索特定游戏的详细信息。`requireSignin`认证控制器方法也将被调用以确保当前用户已登录。然后，`isMaker`控制器方法将确定当前用户是否是此特定游戏的制作者，最后运行游戏`update`控制器方法以在数据库中修改游戏。
- en: 'The `isMaker` controller method ensures that the signed-in user is actually
    the maker of the game being edited, and it is defined as shown in the following
    code:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '`isMaker`控制器方法确保已登录的用户实际上是正在编辑的游戏的制作者，并且它定义如下所示：'
- en: '`mern-vrgame/server/controllers/game.controller.js`:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/server/controllers/game.controller.js`:'
- en: '[PRE30]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'If the `isMaker` condition is not met, that means the currently signed-in user
    is not the maker of the game being edited, and an authorization error is returned
    in the response. But if the condition is met, the `next` method is invoked instead.
    In this case, the update controller method is the `next` method, and it saves
    the changes to the game in the database. This update method is defined as shown
    in the following code:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`isMaker`条件不满足，这意味着当前登录的用户不是正在编辑的游戏的制作者，并且响应中返回授权错误。但如果条件满足，则调用`next`方法。在这种情况下，`update`控制器方法是`next`方法，它将更改保存到数据库中的游戏。此更新方法定义如下所示：
- en: '`mern-vrgame/server/controllers/game.controller.js`:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/server/controllers/game.controller.js`:'
- en: '[PRE31]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: This `update` method will take the existing game details and the form data received
    in the request body to merge the changes and save the updated game to the Game
    collection in the database.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 此`update`方法将接受现有的游戏详情和请求体中接收到的表单数据以合并更改，并将更新后的游戏保存到数据库中的Game集合。
- en: 'This edit game API can be called in the frontend view using a `fetch` method
    that takes the changes as form data and sends it with the request to the backend,
    along with user credentials. The corresponding `fetch` method is defined as shown
    in the following code:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 此编辑游戏API可以通过前端视图使用一个`fetch`方法调用，该方法将更改作为表单数据发送到后端，并随请求一起发送用户凭据。相应的`fetch`方法定义如下所示：
- en: '`mern-vrgame/client/game/api-game.js`:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/client/game/api-game.js`:'
- en: '[PRE32]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: This method makes the `PUT` request to the edit game API, providing the changes
    to the game in the request body, the current user's credentials in the request
    header, and the ID of the game to be edited in the route URL. This method can
    be used in the frontend, which renders a form allowing users to update the game
    details. In the next section, we will implement another API in the backend that
    will allow authorized users to delete the games that they created on the platform.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法向编辑游戏API发出`PUT`请求，在请求体中提供游戏的更改，在请求头中提供当前用户的凭据，并在路由URL中提供要编辑的游戏的ID。此方法可以在前端使用，它渲染一个表单，允许用户更新游戏详情。在下节中，我们将在后端实现另一个API，允许授权用户删除他们在平台上创建的游戏。
- en: Deleting a game
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除游戏
- en: 'An authenticated and authorized user will be able to delete any of the games
    they created on the application. To enable this feature, we will implement a delete
    game API in the backend. We will start by adding a `DELETE` route that allows
    an authorized maker to delete one of their own games, as shown in the following
    code:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 经过认证和授权的用户将能够删除他们在应用程序中创建的任何游戏。为了启用此功能，我们将在后端实现一个删除游戏的API。我们将首先添加一个`DELETE`路由，允许授权的制作者删除他们自己的游戏，如下面的代码所示：
- en: '`mern-vrgame/server/routes/game.routes.js`:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/server/routes/game.routes.js`:'
- en: '[PRE33]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The flow of the controller method execution on the server, after receiving the
    `DELETE` request at `api/games/:gameId`, will be similar to the edit game API,
    with the final call made to the `remove` controller method instead of `update`.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务器上接收到`api/games/:gameId`的`DELETE`请求后，控制器方法执行的流程将与编辑游戏API类似，最终调用的是`remove`控制器方法而不是`update`。
- en: 'The `remove` controller method deletes the specified game from the database
    when a `DELETE` request is received at `/api/games/:gameId`, and it has been verified
    that the current user is the original maker of the given game. The `remove` controller
    method is defined as shown in the following code:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 当接收到`/api/games/:gameId`的`DELETE`请求，并且已经验证当前用户是给定游戏的原始制作者时，`remove`控制器方法会从数据库中删除指定的游戏。`remove`控制器方法定义如下所示：
- en: '`mern-vrgame/server/controllers/game.controller.js`:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/server/controllers/game.controller.js`:'
- en: '[PRE34]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: This `remove` method permanently deletes the specified game from the game collection
    in the database.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`remove`方法会永久地从数据库中的游戏集合中删除指定的游戏。
- en: 'To use this API from the frontend, we will add a corresponding `remove` method
    in `api-game.js` to make a fetch request to the delete game API. This `fetch`
    method is defined as follows:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 为了从前端使用此API，我们将在`api-game.js`中添加相应的`remove`方法，以向删除游戏API发送fetch请求。此`fetch`方法定义如下：
- en: '`mern-vrgame/client/game/api-game.js`:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/client/game/api-game.js`:'
- en: '[PRE35]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: This method uses `fetch` to make a `DELETE` request to the delete game API.
    It takes the game ID in the `params` and the user credentials that are needed
    by the API endpoint in the backend to check if this current user is the authorized
    maker of the specified game. If the request is successful and the corresponding
    game is removed from the database, a success message is returned in the response.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法使用`fetch`向删除游戏API发送`DELETE`请求。它接受`params`中的游戏ID以及后端API端点需要的用户凭据，以检查当前用户是否是指定游戏的授权制作者。如果请求成功并且相应的游戏已从数据库中删除，则响应中返回成功消息。
- en: With these game CRUD APIs functional in the backend, we are ready to implement
    the frontend that will use these APIs to allow users to create new games, list
    the games, modify existing games, and load a single game in the React 360 game
    view. We can start building out this frontend in the next section, starting with
    the React views for creating and editing games in the application.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在后端这些游戏CRUD API功能实现后，我们准备实现前端，该前端将使用这些API允许用户创建新游戏、列出游戏、修改现有游戏以及在React 360游戏视图中加载单个游戏。我们可以在下一节开始构建这个前端，从创建和编辑应用程序中游戏的React视图开始。
- en: Adding a form for creating and editing games
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加创建和编辑游戏的表单
- en: Users registered on the MERN VR Game application will be able to make new games
    and modify these games from views on the application. To implement these views,
    we will add React components that allow users to compose and modify the game details
    and VR object details for each game. As the form for creating new and editing
    existing games will have similar form fields for composing game details and VR
    object details, we will make reusable components that can be used both for creating
    and editing purposes. In the following sections, we will discuss the form views
    for creating a new game and editing an existing game, and the implementation of
    the common form components in these views.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在MERN VR游戏应用程序上注册的用户将能够创建新游戏并从应用程序的视图中修改这些游戏。为了实现这些视图，我们将添加React组件，允许用户为每个游戏组合和修改游戏详情以及VR对象详情。由于创建新游戏和编辑现有游戏的表单将具有类似的表单字段来组合游戏详情和VR对象详情，我们将创建可重用的组件，这些组件可以用于创建和编辑目的。在以下章节中，我们将讨论创建新游戏和编辑现有游戏的表单视图，以及在这些视图中实现通用表单组件。
- en: Making a new game
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建新游戏
- en: When any user signs into the application, they will be given the option to make
    their own VR game. They will see a MAKE GAME link on the menu that will navigate
    them to a form where they can fill in the game details to create a new game on
    the platform. In the following sections, we will update the frontend code to add
    this link on the menu and implement the `NewGame` component, which will contain
    the form to create a new game.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 当任何用户登录到应用程序时，他们将被提供创建自己的VR游戏的选择。他们将在菜单中看到一个“创建游戏”链接，该链接将引导他们到一个表单，他们可以在其中填写游戏详情以在平台上创建新游戏。在接下来的部分中，我们将更新前端代码以在菜单上添加此链接并实现`NewGame`组件，该组件将包含创建新游戏的表单。
- en: Updating the menu
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新菜单
- en: 'We will update the navigation menu in the application to add the MAKE GAME
    button, which will appear conditionally based on whether the user is signed in,
    and redirect the user to a view containing the form to create a new game. The MAKE
    GAME button will render on the menu, as shown in the following screenshot:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将更新应用程序中的导航菜单以添加“创建游戏”按钮，该按钮将根据用户是否已登录而条件显示，并将用户重定向到包含创建新游戏表单的视图。`创建游戏`按钮将显示在菜单中，如下面的截图所示：
- en: '![](img/47caf224-ac99-45ab-8338-4adccd1d6fcf.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/47caf224-ac99-45ab-8338-4adccd1d6fcf.png)'
- en: 'To add this button to the `Menu` component, we will use a `Link` component
    with the route for the `NewGame` component containing the form. To make it render
    conditionally, we will place it right before the MY PROFILE link shown in the
    preceding screenshot, in the section that renders only when the user is authenticated.
    The button code will be added as shown in the following code:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 要将此按钮添加到`Menu`组件，我们将使用一个`Link`组件，其中包含指向`NewGame`组件的表单的路由。为了使其条件渲染，我们将将其放置在先前的截图所示的“我的个人资料”链接之前，在仅当用户已认证时渲染的章节中。按钮代码将按以下代码所示添加：
- en: '`mern-vrgame/client/core/Menu.js`:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/client/core/Menu.js`:'
- en: '[PRE36]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: This will show the MAKE GAME option to signed-in users, and they can click on
    it to be redirected to the `/game/new` route containing the form view for making
    a new game on the platform. In the next section, we will look at the component
    that will render this form.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 这将向已登录用户显示“创建游戏”选项，他们可以点击它以重定向到包含在平台上创建新游戏表单视图的`/game/new`路由。在下一节中，我们将查看将渲染此表单的组件。
- en: The NewGame component
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 新游戏组件
- en: 'We will implement the form view for creating a new game in the `NewGame` React
    component. This form view will allow users to fill out the fields for a single
    game. The `NewGame` component will render these form elements corresponding to
    the game details, including VR object details, as shown in the following screenshot:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在`NewGame`React组件中实现创建新游戏的表单视图。此表单视图将允许用户填写单个游戏的字段。`NewGame`组件将渲染与游戏详情相对应的这些表单元素，包括VR对象详情，如下面的截图所示：
- en: '![](img/1d4ce768-afba-404d-bef4-74944d75344b.png)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1d4ce768-afba-404d-bef4-74944d75344b.png)'
- en: The `NewGame` component will use the `GameForm` component, which will contain
    all the rendered form fields, to compose this new game form. The `GameForm` component
    will be a reusable component that we will use in both the create and edit forms.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '`NewGame`组件将使用`GameForm`组件，该组件将包含所有渲染的表单字段，以组成这个新游戏表单。`GameForm`组件将是一个可重用组件，我们将在创建和编辑表单中使用它。'
- en: 'When added to the `NewGame` component, it takes an `onSubmit` method as a prop,
    along with any server-returned error messages, as shown in the following code:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 当添加到`NewGame`组件时，它将一个`onSubmit`方法作为属性，以及任何服务器返回的错误消息，如下面的代码所示：
- en: '`mern-vrgame/client/game/NewGame.js`:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/client/game/NewGame.js`:'
- en: '[PRE37]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The method passed in the `onSubmit` prop will be executed when the user submits
    the form. The `clickSubmit` method passed in this case is defined in the `NewGame`
    component. It uses the create game `fetch` method from `api-game.js` to make a
    `POST` request to the create game API with the game form data and user details.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给`onSubmit`属性的函数将在用户提交表单时执行。在这种情况下传递的`clickSubmit`方法是在`NewGame`组件中定义的。它使用`api-game.js`中的创建游戏`fetch`方法向创建游戏API发送带有游戏表单数据和用户详情的`POST`请求。
- en: 'This `clickSubmit` method is defined as shown in the following code:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 此`clickSubmit`方法定义如下所示：
- en: '`mern-vrgame/client/game/NewGame.js`:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/client/game/NewGame.js`:'
- en: '[PRE38]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: If the user makes an error while entering the game details in the form, the
    backend sends back an error message when this `clickSubmit` method is called on
    form submission. If there are no errors and the game is successfully created in
    the database, the user is redirected to another view.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户在表单中输入游戏详情时出错，当在表单提交时调用此`clickSubmit`方法时，后端会发送错误消息。如果没有错误并且游戏在数据库中成功创建，用户将被重定向到另一个视图。
- en: 'To load this `NewGame` component at a specified URL and only for authenticated
    users, we will add a `PrivateRoute` in `MainRouter`, as shown in the following
    code:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在指定的URL加载此`NewGame`组件并且仅对认证用户，我们将在`MainRouter`中添加一个`PrivateRoute`，如下面的代码所示：
- en: '`mern-vrgame/client/MainRouter.js`:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/client/MainRouter.js`:'
- en: '[PRE39]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: This will make the `NewGame` component load in the browser at the `/game/new` path
    when an authenticated user is accessing it. In the next section, we will see a
    similar implementation for rendering the same form to edit an existing game from
    the database.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使得当认证用户访问时，`NewGame`组件将在浏览器的`/game/new`路径上加载。在下一节中，我们将看到类似的实现，用于从数据库中编辑现有游戏并渲染相同的表单。
- en: Editing the game
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编辑游戏
- en: Users will be able to edit the games they made on the platform using a form
    similar to the form for creating new games. We will implement this edit game view
    in the `EditGame` component, which will render the game form fields pre-populated
    with the existing game's details. We will look at the implementation of this `EditGame`
    component in the following section.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 用户将能够使用与创建新游戏表单类似的表单编辑他们在平台上创建的游戏。我们将在`EditGame`组件中实现此编辑游戏视图，该组件将渲染预填充现有游戏详情的游戏表单字段。我们将在下一节中查看此`EditGame`组件的实现。
- en: The EditGame component
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: The EditGame component
- en: 'Just as in the `NewGame` component, the `EditGame` component will also use
    the `GameForm` component to render the form elements. But in this form, the fields
    will load the current values of the game to be edited, and users will be able
    to update these values, as pictured in the following screenshot:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 正如`NewGame`组件中一样，`EditGame`组件也将使用`GameForm`组件来渲染表单元素。但在这个表单中，字段将加载要编辑的游戏的当前值，并且用户将能够更新这些值，如下面的截图所示：
- en: '![](img/15fb097c-8223-4dee-ad46-79565b28ace1.png)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![](img/15fb097c-8223-4dee-ad46-79565b28ace1.png)'
- en: 'In the case of this `EditGame` component, the `GameForm` will take the given
    game''s ID as a prop so that it can fetch the game details, in addition to the
    `onSubmit` method and server-generated error message, if any. The `GameForm` component
    will be added to the `EditGame` component with these props, as follows:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在此`EditGame`组件的情况下，`GameForm`将接受给定的游戏ID作为属性，以便它可以获取游戏详情，除了`onSubmit`方法和可能的服务器生成的错误消息。`GameForm`组件将带有这些属性添加到`EditGame`组件中，如下所示：
- en: '`mern-vrgame/client/game/EditGame.js`:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/client/game/EditGame.js`:'
- en: '[PRE40]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The `clickSubmit` method for the edit form will use the update game `fetch`
    method in `api-game.js` to make a `PUT` request to the edit game API with the
    form data and user details. The `clickSubmit` method for this edit form submission
    will be defined as shown in the following code:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑表单的`clickSubmit`方法将使用`api-game.js`中的更新游戏`fetch`方法向编辑游戏API发送带有表单数据和用户详情的`PUT`请求。此编辑表单提交的`clickSubmit`方法将定义如下面的代码所示：
- en: '`mern-vrgame/client/game/EditGame.js`:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/client/game/EditGame.js`:'
- en: '[PRE41]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: If the user makes an error while modifying the game details in the form, the
    backend sends back an error message when this `clickSubmit` method is called on
    form submission. If there are no errors and the game is successfully updated in
    the database, the user is redirected to another view.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户在表单中修改游戏详情时出错，当在表单提交时调用此`clickSubmit`方法时，后端会发送错误消息。如果没有错误并且游戏在数据库中成功更新，用户将被重定向到另一个视图。
- en: 'To load this `EditGame` component at a specified URL and only for authenticated
    users, we will add a `PrivateRoute` in `MainRouter`, as shown in the following
    code:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在指定的URL加载此`EditGame`组件并且仅对认证用户，我们将在`MainRouter`中添加一个`PrivateRoute`，如下面的代码所示：
- en: '`mern-vrgame/client/MainRouter.js`:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/client/MainRouter.js`:'
- en: '[PRE42]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: The `EditGame` component will load in the browser at the `/game/edit/:gameId` path
    when an authenticated user is accessing it. Both this `EditGame` component and
    the `NewGame` component use the `GameForm` component to render the form elements
    that allow users to add the details of a game. In the next section, we will discuss
    the implementation of this reusable `GameForm` component.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 当认证用户访问时，`EditGame` 组件将在浏览器中的 `/game/edit/:gameId` 路径上加载。这个 `EditGame` 组件和 `NewGame`
    组件都使用 `GameForm` 组件来渲染允许用户添加游戏详情的表单元素。在下一节中，我们将讨论这个可重用的 `GameForm` 组件的实现。
- en: Implementing the GameForm component
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现 GameForm 组件
- en: 'The `GameForm` component is used in both the `NewGame` and `EditGame` components,
    and it contains the elements that allow users to enter game details and VR object
    details for a single game. It may start with a blank game object or load an existing
    game. To begin the implementation of this component, we will first initialize
    a blank game object in the component state, as shown in the following code:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '`GameForm` 组件在 `NewGame` 和 `EditGame` 组件中都被使用，它包含了允许用户输入单个游戏的游戏详情和VR对象详情的元素。它可能从一个空白的游戏对象开始，或者加载一个现有的游戏。为了开始实现这个组件，我们首先在组件状态中初始化一个空白的游戏对象，如下面的代码所示：'
- en: '`mern-vrgame/client/game/GameForm.js`:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/client/game/GameForm.js`:'
- en: '[PRE43]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'If the `GameForm` component receives a `gameId` prop from the parent component—such
    as from the `EditGame` component—then it will use the load game API to retrieve
    the game''s details and set it to the state, to be rendered in the form view.
    We will make this API call in an `useEffect` hook, as shown in the following code:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `GameForm` 组件从父组件（例如从 `EditGame` 组件）接收到 `gameId` 属性——那么它将使用加载游戏API来检索游戏的详情并将其设置到状态中，以便在表单视图中渲染。我们将在下面的代码中调用这个API，如下所示：
- en: '`mern-vrgame/client/game/GameForm.js`:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/client/game/GameForm.js`:'
- en: '[PRE44]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: In the `userEffect` hook, we first check if the props received from the parent
    component contain a `gameId` prop, and then use the value to make the load game
    API call. If the API call returns an error, we set the error to the state; otherwise,
    we set the retrieved game to the state. With this code, we will have the initial
    values for the game details initialized accordingly, to be used in the form view.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `useEffect` 钩子中，我们首先检查从父组件接收到的属性中是否包含 `gameId` 属性，然后使用该值来调用加载游戏API。如果API调用返回错误，我们将错误设置到状态中；否则，我们将检索到的游戏设置到状态中。通过这段代码，我们将根据初始值初始化游戏详情，以便在表单视图中使用。
- en: 'The form view part in the `GameForm` component will essentially have two parts:
    one part that takes simple game details—such as name, world image link, and clue
    text—as input, and a second part that allows users to add a variable number of
    VR objects to either the answer objects array or the wrong objects array. In the
    following sections, we will look at the implementations of these two parts that
    will make up the game details form view.'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '`GameForm` 组件中的表单视图部分基本上有两个部分：一部分用于输入简单的游戏详情（如名称、世界图像链接和线索文本），另一部分允许用户将可变数量的VR对象添加到答案对象数组或错误对象数组中。在接下来的几节中，我们将查看这两个部分的实现，它们将构成游戏详情表单视图。'
- en: Inputting simple game details
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 输入简单的游戏详情
- en: 'While creating or editing a game, users will first see the form elements for
    the simpler details of the game, such as name, world image URL, and the clue text. This
    form section with the simple game details will mostly be text input elements added
    using the Material-UI `TextField` component, with a change handling method passed
    to the `onChange` handler. We will build out this section in the `GameForm` component,
    which is implemented in `mern-vrgame/client/game/GameForm.js`, with the following
    elements, as shown in the associated code:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建或编辑游戏时，用户首先会看到游戏简单详情的表单元素，例如名称、世界图像URL和线索文本。这个包含简单游戏详情的表单部分将主要是使用 Material-UI
    `TextField` 组件添加的文本输入元素，并通过 `onChange` 处理器传递一个更改处理方法。我们将在 `GameForm` 组件中构建这个部分，该组件在
    `mern-vrgame/client/game/GameForm.js` 中实现，如下所示的相关代码：
- en: '**Form title**: The form title will be either `New Game` or `Edit Game`, depending
    on whether an existing game ID is passed as a prop to `GameForm` from the parent
    component to which it is added, as shown in the following code:'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**表单标题**：表单标题将根据是否将现有的游戏ID作为属性从父组件传递给 `GameForm` 来决定，如下面的代码所示：'
- en: '[PRE45]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '**Game world image input**:We will render the background image URL in an `img`
    element at the very top of the form to show users the image they added as the
    game world image URL. The image URL input will be taken in a `TextField` component
    below the rendered image, as shown in the following code:'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**游戏世界图像输入**：我们将在表单最顶部的`img`元素中渲染背景图像URL，以向用户显示他们添加的游戏世界图像URL。图像URL输入将在渲染的图像下方的`TextField`组件中获取，如下面的代码所示：'
- en: '[PRE46]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '**Game name**: The game name will be added in a single `TextField` of the default `text` type,
    as shown in the following code:'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**游戏名称**：游戏名称将被添加到默认的`text`类型的单个`TextField`中，如下面的代码所示：'
- en: '[PRE47]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '**Clue text:** The clue text will be added to a multiline `TextField` component, as
    shown in the following code:'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**线索文本**：线索文本将被添加到一个多行`TextField`组件中，如下面的代码所示：'
- en: '[PRE48]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'In these form elements added to the `GameForm` component, the input fields
    also take an `onChange` handler function, which is defined as `handleChange`.
    This `handleChange` method will update the game values in the state whenever a
    user changes a value in an input element. The `handleChange` method is defined
    as follows:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在添加到`GameForm`组件的这些表单元素中，输入字段也接受一个`onChange`处理函数，该函数被定义为`handleChange`。这个`handleChange`方法会在用户更改输入元素中的值时更新状态中的游戏值。`handleChange`方法定义如下：
- en: '`mern-vrgame/client/game/GameForm.js`:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/client/game/GameForm.js`:'
- en: '[PRE49]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: In this method, based on the specific field value being changed, we update the
    corresponding attribute in the game object in the state. This captures the values
    entered by the user as simple details for their VR game. The form will also give
    the option to define arrays of VR objects that will also be a part of the game.
    In the next section, we will look at the form implementation that will allow users
    to manipulate arrays of VR objects.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个方法中，根据被更改的具体字段值，我们更新状态中游戏对象的相应属性。这捕捉了用户输入的值作为他们VR游戏的简单细节。表单还将提供定义将作为游戏一部分的VR对象数组的选项。在下一节中，我们将查看允许用户操作VR对象数组的表单实现。
- en: Modifying arrays of VR objects
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改VR对象数组
- en: 'Users will be able to define a dynamic number of VR objects in two different
    arrays for each game. In order to allow users to modify these arrays of `answerObjects`
    and `wrongObjects` that they wish to add to their VR game, `GameForm` will iterate
    through each array and render a VR object form component for each object. With
    this, it will become possible to add, remove, and modify VR objects from the `GameForm`
    component, as pictured in the following screenshot:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 用户将能够为每个游戏定义两个不同数组中的动态数量的VR对象。为了允许用户修改他们希望添加到VR游戏中的`answerObjects`和`wrongObjects`数组，`GameForm`将遍历每个数组，并为每个对象渲染一个VR对象表单组件。这样，它将使从`GameForm`组件中添加、删除和修改VR对象成为可能，如下面的截图所示：
- en: '![](img/8a9c4597-e610-4e84-a023-b409b333feef.png)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8a9c4597-e610-4e84-a023-b409b333feef.png)'
- en: In the following sections, we will add these array manipulation functionalities
    in the  `GameForm` component. We will start by rendering each item in the VR object
    arrays and incorporate an option to add a new item or remove an existing item
    from an array. Then, since each item in an array will essentially be a form to
    enter VR object details, we will also discuss how to handle the input changes
    made within each item from the `GameForm` component.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下几节中，我们将在`GameForm`组件中添加这些数组操作功能。我们首先将渲染VR对象数组中的每个项目，并包含添加新项目或从数组中删除现有项目的选项。然后，由于数组中的每个项目本质上都是一个输入VR对象细节的表单，我们还将讨论如何处理在`GameForm`组件中每个项目内进行的输入更改。
- en: Iterating and rendering the object details form
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 迭代和渲染对象详情表单
- en: We will add the form interface seen in the previous section with Material-UI
    `ExpansionPanel` components to create a modifiable list of VR objects for each
    type of VR object array in the given game.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将添加上一节中看到的表单界面，使用Material-UI `ExpansionPanel`组件来创建给定游戏中每种VR对象数组类型的可修改的VR对象列表。
- en: 'Inside the nested `ExpansionPanelDetails` component, we will iterate through
    the `answerObjects` array or the `wrongObjects` array to render a `VRObjectForm`
    component for each VR object, as shown in the following code:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 在嵌套的`ExpansionPanelDetails`组件内部，我们将遍历`answerObjects`数组或`wrongObjects`数组，为每个VR对象渲染一个`VRObjectForm`组件，如下面的代码所示：
- en: '`mern-vrgame/client/game/GameForm.js`:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/client/game/GameForm.js`:'
- en: '[PRE50]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: To render each object in the array, we use a `VRObjectForm` component. We will
    look at the specific implementation of the `VRObjectForm` component later in the
    chapter. While adding `VRObjectForm` in this code, we pass the single `vrObject`
    item as a prop, along with the current `index` in the array, the type of the array,
    and two methods for updating the state in `GameForm` when the array details are
    modified by changing details or deleting an object from within the `VRObjectForm`
    component. This will render a form for each VR object in the arrays associated
    with the game in the `GameForm` component. In the next section, we will see the
    implementation for including an option to add new objects to these arrays.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '为了渲染数组中的每个对象，我们使用`VRObjectForm`组件。我们将在本章的后面部分查看`VRObjectForm`组件的具体实现。在添加`VRObjectForm`到这段代码时，我们传递单个`vrObject`项目作为属性，以及数组中的当前`index`、数组的类型，以及两个方法，用于在`GameForm`中通过更改详细信息或从`VRObjectForm`组件内部删除对象来修改数组详细信息时更新状态。这将渲染一个表单，用于在`GameForm`组件中与游戏关联的数组中的每个VR对象。在下一节中，我们将看到包括将这些数组中添加新对象选项的实现。 '
- en: Adding a new object to the array
  id: totrans-228
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向数组中添加新对象
- en: 'For each array rendered in the game form, we will add a button that will let
    users push new VR objects to the given array. This button to add an object will
    render a new `VRObjectForm` component to take the details of a new VR object.
    We will add this button to the `ExpansionPanelDetails` component after the iteration
    code, as shown in the following code:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 对于游戏表单中渲染的每个数组，我们将添加一个按钮，允许用户将新的VR对象推送到给定的数组。添加对象的此按钮将渲染一个新的`VRObjectForm`组件以获取新VR对象的详细信息。我们将在迭代代码之后将此按钮添加到`ExpansionPanelDetails`组件中，如下所示：
- en: '`mern-vrgame/client/game/GameForm.js`:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/client/game/GameForm.js`:'
- en: '[PRE51]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'This ADD OBJECT button will render at the end of each list of VR object forms.
    When clicked on, it will add a new blank VR object form by invoking the `addObject`
    method. This `addObject` method will be defined as follows:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 此添加对象按钮将渲染在每个VR对象表单列表的末尾。当点击时，它将通过调用`addObject`方法添加一个新的空白VR对象表单。此`addObject`方法将如下定义：
- en: '`mern-vrgame/client/game/GameForm.js`:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/client/game/GameForm.js`:'
- en: '[PRE52]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: The `addObject` method is passed the array type so we know which array the user
    wants to add the new object to. In this method, we will just add an empty object
    to the array being iterated, so an empty form is rendered in its place, which
    users can fill out to enter new object details. In the next section, we will see
    how to let users remove one of these items from a list of VR object forms.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '`addObject`方法传递了数组类型，因此我们知道用户想要将新对象添加到哪个数组。在此方法中，我们只需将一个空对象添加到正在迭代的数组中，这样就会在它的位置渲染一个空表单，用户可以填写以输入新对象的详细信息。在下一节中，我们将看到如何让用户从VR对象表单列表中删除这些项目之一。'
- en: Removing an object from the array
  id: totrans-236
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从数组中删除对象
- en: Each of the items rendered in the list of VR object forms can also be removed
    from the list by the user. The `VRObjectForm` component displaying an item will
    contain a delete option, which will remove the object from the given array.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: VR对象表单列表中渲染的每个项目也可以由用户删除。显示项目的`VRObjectForm`组件将包含一个删除选项，这将从给定的数组中删除对象。
- en: 'To implement the remove item functionality for this DELETE button, we will
    pass a `removeObject` method as a prop to the `VRObjectForm` component from the
    parent `GameForm` component. This method will allow the array to be updated in
    the parent component''s state when a user clicks DELETE on a specific `VRObjectForm`.
    This `removeObject` method will be defined as shown in the following code:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现此删除按钮的删除项功能，我们将一个`removeObject`方法作为属性传递给从父组件`GameForm`组件的`VRObjectForm`组件。此方法将允许在用户在特定的`VRObjectForm`上点击DELETE时，更新父组件的状态中的数组。此`removeObject`方法将按照以下代码所示定义：
- en: '`mern-vrgame/client/game/GameForm.js`:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/client/game/GameForm.js`:'
- en: '[PRE53]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: In this method, the VR object corresponding to the item clicked will be removed
    by slicing at the given `index` from the array with the specified array `type`.
    This updated object array in the game will be reflected in the view when it is
    set in the state, with the deleted VR object removed from the form view. In the
    next section, we will look at how to handle changes to the details of a VR object
    when the user updates values in a VR object form, which is rendered according
    to items in the VR object arrays.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 在此方法中，将根据指定的 `index` 从具有指定 `type` 的数组中切片，移除对应于点击项的 VR 对象。当在状态中设置时，此更新后的对象数组将在游戏中反映出来，删除的
    VR 对象将从表单视图中移除。在下一节中，我们将探讨当用户在 VR 对象表单中更新值时如何处理 VR 对象详情的更改，该表单是根据 VR 对象数组中的项渲染的。
- en: Handling the object detail change
  id: totrans-242
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理对象详情更改
- en: 'The details of any VR object in the game will be updated when the user changes
    input values in any of the fields in the corresponding VR object form. To register
    this update, the `GameForm` that houses the forms for the VR objects will pass
    the `handleObjectChange` method to the `VRObjectForm` component, which will render
    the VR object form. This `handleObjectChange` method will be defined as follows:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户在相应的 VR 对象表单中的任何字段更改输入值时，游戏中的任何 VR 对象的详情都将被更新。为了注册此更新，包含 VR 对象表单的 `GameForm`
    将 `handleObjectChange` 方法传递给 `VRObjectForm` 组件，该组件将渲染 VR 对象表单。此 `handleObjectChange`
    方法将定义如下：
- en: '`mern-vrgame/client/game/GameForm.js`:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/client/game/GameForm.js`:'
- en: '[PRE54]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: This `handleObjectChange` method will be used in the `VRObjectFrom` component
    to capture the changed input's value and update the corresponding field of the
    VR object at the specified `index` in the array of the given `type`, so it is
    reflected in the game object stored in the state in `GameForm`.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 `handleObjectChange` 方法将在 `VRObjectFrom` 组件中使用，以捕获更改后的输入值并更新给定 `type` 的数组中指定
    `index` 的 VR 对象的相应字段，因此它反映在 `GameForm` 中的游戏对象状态中。
- en: The `GameForm` component renders the form elements for modifying the details
    of a game, including the lists of VR objects. Using this form, users can add,
    modify, and delete VR objects in the lists. The lists render each item in a VR
    object form that the users can use to compose the details of the object. In the
    next section, we will implement the React component that renders this VR object
    form for each VR object in the game.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '`GameForm` 组件用于渲染修改游戏详情的表单元素，包括 VR 对象列表。使用此表单，用户可以在列表中添加、修改和删除 VR 对象。列表以 VR
    对象表单的形式渲染每个项，用户可以使用它来组合对象的详情。在下一节中，我们将实现渲染游戏中每个 VR 对象的 VR 对象表单的 React 组件。'
- en: The VRObjectForm component
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: VRObjectForm 组件
- en: 'We will implement the `VRObjectForm` component to render the input fields for
    modifying an individual VR object''s details, which are added to the `answerObjects`
    and `wrongObjects` arrays of the game in the `GameForm` component. The `VRObjectForm`
    component will render a form, as pictured in the following screenshot:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将实现 `VRObjectForm` 组件以渲染用于修改单个 VR 对象详情的输入字段，这些字段被添加到 `GameForm` 组件中的 `answerObjects`
    和 `wrongObjects` 数组中。`VRObjectForm` 组件将渲染一个表单，如下面的截图所示：
- en: '![](img/8bc1b0fb-6fa8-4f4f-a7f2-628662e64951.png)'
  id: totrans-250
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8bc1b0fb-6fa8-4f4f-a7f2-628662e64951.png)'
- en: 'To begin implementation of this `VRObjectForm` component containing a VR object
    form, we will start by initializing the blank details of a VR object in the component''s
    state with a `useState` hook, as shown in the following code:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始实现包含 VR 对象表单的 `VRObjectForm` 组件，我们将在组件的状态中使用 `useState` 钩子初始化 VR 对象的空白详情，如下面的代码所示：
- en: '`mern-vrgame/client/game/VRObjectForm.js`:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/client/game/VRObjectForm.js`:'
- en: '[PRE55]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'These details correspond to the schema defined for storing a VR object. When
    a `VRObjectForm` component is added to the `GameForm` component, it may receive
    an empty VR object or a VR object populated with details, depending on whether
    an empty form or a form with details of an existing object is being rendered.
    In the case that an existing VR object is passed as a prop, we will set the details
    of this object in the component state using an `useEffect` hook, as shown in the
    following code:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 这些详情对应于存储 VR 对象定义的架构。当 `VRObjectForm` 组件被添加到 `GameForm` 组件时，它可能接收一个空的 VR 对象或一个填充了详情的
    VR 对象，具体取决于是否正在渲染空表单或具有现有对象详情的表单。如果传递了现有的 VR 对象作为 prop，我们将使用 `useEffect` 钩子将此对象的详情设置在组件状态中，如下面的代码所示：
- en: '`mern-vrgame/client/game/VRObjectForm.js`:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/client/game/VRObjectForm.js`:'
- en: '[PRE56]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'In this `useEffect` hook, if the `vrObject` value passed in the prop is not
    an empty object, we set the details of the received VR object in the state. These
    values will be used in the input fields that make up the VR object form. We will
    add the input fields corresponding to a VR object''s details, in the view of `VRObjectForm` using
    Material-UI `TextField` components, as shown in the code explained with the following
    list:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 在此`useEffect`钩子中，如果通过prop传入的`vrObject`值不是一个空对象，我们将设置接收到的VR对象的详细信息到状态中。这些值将用于组成VR对象表单的输入字段。我们将使用Material-UI
    `TextField`组件在`VRObjectForm`视图的视图中添加与VR对象详情对应的输入字段，如下面的代码和以下列表所示：
- en: '**3D object file input**: The OBJ and MTL file links will be collected for
    each VR object as text input using the `TextField` components, as shown in the
    following code:'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**3D对象文件输入**：每个VR对象的OBJ和MTL文件链接将通过`TextField`组件以文本输入的形式收集，如下面的代码所示：'
- en: '[PRE57]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '**Translate value input**: The translate values of the VR object across the
    x, y, and z axes will be input in the `TextField` components of the `number` type,
    as shown in the following code:'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**翻译值输入**：VR对象在x、y和z轴上的翻译值将通过`number`类型的`TextField`组件输入，如下面的代码所示：'
- en: '[PRE58]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '**Rotate value input**: The rotation values of the VR object around the x,
    y, and z axes will be input in the `TextField` components of the `number` type,
    as shown in the following code:'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**旋转值输入**：VR对象围绕x、y和z轴的旋转值将通过`number`类型的`TextField`组件输入，如下面的代码所示：'
- en: '[PRE59]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '**Scale value input**: The scale value for the VR object will be input in a
    `TextField` component of the `number` type, as shown in the following code:'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缩放值输入**：VR对象的缩放值将通过`TextField`组件的`number`类型输入，如下面的代码所示：'
- en: '[PRE60]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '**Object color input**: The color value for the VR object will be input in
    a `TextField` component of the `text` type, as shown in the following code:'
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对象颜色输入**：VR对象的颜色值将通过`text`类型的`TextField`组件输入，如下面的代码所示：'
- en: '[PRE61]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'These input fields will allow the user to set the details of a VR object in
    a game. When any of these VR object details are changed in these input fields
    by the user, the `handleChange` method will be invoked. This `handleChange` method
    will be defined as shown in the following code:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 这些输入字段将允许用户在游戏中设置VR对象的详细信息。当用户在这些输入字段中更改任何VR对象详细信息时，将调用`handleChange`方法。此`handleChange`方法将定义如下所示，代码如下：
- en: '`mern-vrgame/client/game/VRObjectForm.js`:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/client/game/VRObjectForm.js`:'
- en: '[PRE62]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: This `handleChange` method will update the corresponding value in the state
    of the `VRObjectForm` component, and use the `handleUpdate` method passed as a
    prop from `GameForm` to update the VR object in the `GameForm` state with the
    changed value for the specific object detail.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 此`handleChange`方法将更新`VRObjectForm`组件状态中的相应值，并使用从`GameForm`作为prop传递的`handleUpdate`方法来更新`GameForm`状态中的VR对象，以特定对象详情的更改值。
- en: 'The `VRObjectForm` will also contain a DELETE button that will execute the `removeObject` method
    received in the `GameForm` as a prop, which will allow the given object to be
    removed from the list in the game. This delete button will be added to the view
    with the following code:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '`VRObjectForm`还将包含一个DELETE按钮，该按钮将执行在`GameForm`中作为prop接收的`removeObject`方法，这将允许从游戏列表中移除指定的对象。此删除按钮将按以下代码添加到视图中：'
- en: '`mern-vrgame/client/game/VRObjectForm.js`:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/client/game/VRObjectForm.js`:'
- en: '[PRE63]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: The `removeObject` method will take the value of the object array type and the
    array index position, to remove the given object from the relevant VR object array
    in the `GameForm` component's state.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '`removeObject`方法将接受对象数组类型和数组索引位置值，以从`GameForm`组件的状态中的相关VR对象数组中移除指定的对象。'
- en: With these implementations, the forms for creating and editing games are in
    place, complete with VR object input forms for arrays of varying sizes. We used
    reusable components to compose the form elements needed for creating and editing
    games, along with adding the capability for modifying arrays of VR objects in
    a game. Any registered user can use these forms to add and edit game details on
    the MERN VR Game application. In the next section, we will discuss the implementation
    of the views that will render different lists of games on the platform.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些实现，创建和编辑游戏的表单已经就绪，包括不同大小的VR对象输入表单。我们使用了可重用组件来组合创建和编辑游戏所需的形式元素，并添加了修改游戏中VR对象数组的
    capability。任何注册用户都可以使用这些表单在MERN VR游戏应用程序中添加和编辑游戏详情。在下文中，我们将讨论实现视图，该视图将在平台上渲染不同的游戏列表。
- en: Adding the game list views
  id: totrans-277
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加游戏列表视图
- en: Visitors to MERN VR Game will access the games on the application from lists
    rendered on the home page and individual user profiles. The home page will list
    all the games on the application, and the games by a specific maker will be listed
    on their user profile page. These list views will iterate through game data fetched
    using the backend APIs for listing games, and render details of each game in a
    reusable React component.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 访问 MERN VR 游戏的访客将从主页和单个用户个人资料中渲染的列表访问应用程序中的游戏。主页将列出应用程序上的所有游戏，特定制作者的游戏将列在其用户个人资料页面上。这些列表视图将通过使用后端
    API 列出游戏来迭代游戏数据，并在可重用的 React 组件中渲染每个游戏的详细信息。
- en: In the following sections, we will discuss the implementation for rendering
    all games and games only by a specific maker, using a reusable component for rendering
    each game on the list.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下章节中，我们将讨论使用可重用组件渲染列表中所有游戏以及仅由特定制作者的游戏的实现。
- en: Rendering lists of games
  id: totrans-280
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 渲染游戏列表
- en: 'We will render all the games available on the platform on the home page of
    the application. To implement this feature, the `Home` component will first fetch
    the list of all the games from the game collection in the database using the list
    game API. We will achieve this in an `useEffect` hook in the `Home` component,
    as shown in the following code:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在应用程序的主页上渲染平台上可用的所有游戏。为了实现此功能，`Home` 组件将首先使用列表游戏 API 从数据库中的游戏集合中获取所有游戏的列表。我们将在
    `Home` 组件中的 `useEffect` 钩子中实现这一点，如下所示：
- en: '`mern-vrgame/client/core/Home.js`:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/client/core/Home.js`:'
- en: '[PRE64]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'The list of games retrieved from the server in this `useEffect` hook will be
    set to the state and iterated over to render a `GameDetail` component for each
    game in the list, as shown in the following code:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 在此 `useEffect` 钩子中从服务器检索到的游戏列表将设置到状态中，并遍历以渲染列表中的每个游戏的 `GameDetail` 组件，如下所示：
- en: '`mern-vrgame/client/core/Home.js`:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/client/core/Home.js`:'
- en: '[PRE65]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'The `GameDetail` component, which will be implemented as a reusable component
    that renders details of a single game, will be passed the game details and a `updateGames`
    method. The `updateGames` method will allow the game list in the `Home` component
    to be updated if any of the games on the list are deleted by the maker. The `updateGames` method
    is defined as shown in the following code:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '`GameDetail` 组件将被实现为一个可重用的组件，用于渲染单个游戏的详细信息。它将传递游戏细节和 `updateGames` 方法。`updateGames`
    方法将允许在列表上的任何游戏被制作者删除时更新 `Home` 组件中的游戏列表。`updateGames` 方法定义如下所示：'
- en: '`mern-vrgame/client/core/Home.js`:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/client/core/Home.js`:'
- en: '[PRE66]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'The `updateGames` method will update the list rendered in the `Home` component
    by slicing the specified game from the array of games. This method will be invoked
    when a user deletes their game using the EDIT and DELETE options rendered conditionally
    in the `GameDetail` component for the maker of the game, as pictured in the following
    screenshot of games listed in the home page of the application:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: '`updateGames` 方法将通过从游戏数组中切割指定的游戏来更新 `Home` 组件中渲染的游戏列表。当用户使用 `GameDetail` 组件中条件渲染的
    `EDIT` 和 `DELETE` 选项删除他们的游戏时，将调用此方法，如下图中所示的应用程序主页上的游戏列表截图：'
- en: '![](img/1c483d30-7b85-4772-b4ba-76bfe87b7022.png)'
  id: totrans-291
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1c483d30-7b85-4772-b4ba-76bfe87b7022.png)'
- en: 'We can render a similar list view in the user profile page, showing only the
    games made by the corresponding user, as pictured in the following screenshot:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在用户个人资料页面上渲染类似的列表视图，仅显示相应用户制作的游戏，如下图中所示：
- en: '![](img/4f4bd176-f9b7-497f-9136-ee64919a021f.png)'
  id: totrans-293
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4f4bd176-f9b7-497f-9136-ee64919a021f.png)'
- en: Similar to the implementation steps in the `Home` component, in this `Profile`
    component, we can fetch the list of games by the given user with a call to the
    associated list games by the maker API in an `useEffect` hook. With the retrieved
    list of games set in the state, we can iterate over it to render each game in
    a `GameDetail` component, as discussed earlier, for rendering all games on the
    home page. In the next section, we will discuss the implementation of this `GameDetail`
    component that will render the details of a single game.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `Home` 组件中的实现步骤类似，在这个 `Profile` 组件中，我们可以通过调用相关的制作者列表游戏 API，在 `useEffect` 钩子中获取给定用户的游戏列表。在状态中设置检索到的游戏列表后，我们可以遍历它，在
    `GameDetail` 组件中渲染每个游戏，正如之前讨论的那样，用于在主页上渲染所有游戏。在下文中，我们将讨论此 `GameDetail` 组件的实现，该组件将渲染单个游戏的详细信息。
- en: The GameDetail component
  id: totrans-295
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 游戏详情组件
- en: 'We will implement the `GameDetail` component to render individual games in
    any game list view in the application. This `GameDetail` component takes the game
    object as a prop, and renders the details of the game, along with a PLAY GAME
    button that links to the VR game view, as pictured in the following screenshot:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在应用程序中的任何游戏列表视图中实现`GameDetail`组件以渲染单个游戏。这个`GameDetail`组件接受游戏对象作为属性，并渲染游戏的详细信息，包括一个链接到VR游戏视图的“玩游戏”按钮，如下面的截图所示：
- en: '![](img/8eba3c66-44fe-4242-8a58-671e20588f89.png)'
  id: totrans-297
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8eba3c66-44fe-4242-8a58-671e20588f89.png)'
- en: This component will also conditionally render EDIT and DELETE buttons if the
    current user is the maker of the game.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 如果当前用户是游戏的制作者，此组件将条件性地渲染“编辑”和“删除”按钮。
- en: 'In the view code of the `GameDetail` component, we will first add the game
    details—such as the name, world image, clue text, and maker name—to give users
    an overview of the game. We will use Material-UI components to compose the interface
    with these details, as shown in the following code:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 在`GameDetail`组件的视图代码中，我们首先添加游戏详情——如名称、世界图像、线索文本和制作者名称——以使用户对游戏有一个概述。我们将使用Material-UI组件将这些详情组合成界面，如下面的代码所示：
- en: '`mern-vrgame/client/game/GameDetail.js`:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/client/game/GameDetail.js`:'
- en: '[PRE67]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: This code will render the game world image, game name, maker name, and clue
    text for the game passed in the props.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码将渲染传入属性的游戏世界图像、游戏名称、制作者名称和线索文本。
- en: 'The PLAY GAME button rendered in the `GameDetail` component will simply be
    a button wrapped in an HTML link element that points to the route that opens the
    React 360-generated `index.html` file (implementation for this route on the server
    is discussed in the *Playing the VR game* section). This PLAY GAME link is added
    to the `GameDetail` component, as follows:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 在`GameDetail`组件中渲染的“玩游戏”按钮将简单地是一个包裹在HTML链接元素中的按钮，该链接指向打开React 360生成的`index.html`文件的路径（服务器上此路径的实现将在*玩VR游戏*部分讨论）。这个“玩游戏”链接添加到`GameDetail`组件中，如下所示：
- en: '`mern-vrgame/client/game/GameDetail.js`:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/client/game/GameDetail.js`:'
- en: '[PRE68]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: The route to the game view takes the game ID as a query parameter. We set `target='_self'` on
    the link so React Router skips transitioning to the next state and lets the browser
    handle this link. What this will do is allow the browser to directly make the
    request to the server at this route when the link is clicked, and render the `index.html`
    file sent by the server in response to this request, allowing the user to start
    playing the rendered VR game immediately.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏视图的路径使用游戏ID作为查询参数。我们在链接上设置了`target='_self'`，这样React Router就会跳过转到下一个状态，让浏览器处理这个链接。这样做将允许浏览器在点击链接时直接向服务器发送请求，并渲染服务器对此请求发送的`index.html`文件，使用户能够立即开始玩渲染的VR游戏。
- en: 'In the final section of the `GameDetail` component, we will conditionally show EDIT
    and DELETE options only if the currently signed-in user is also the maker of the
    game being rendered. We will add these options with the following code:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 在`GameDetail`组件的最后部分，我们将条件性地显示“编辑”和“删除”选项，仅当当前登录的用户也是渲染的游戏的制作者时。我们将使用以下代码添加这些选项：
- en: '`mern-vrgame/client/game/GameDetail.js`:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/client/game/GameDetail.js`:'
- en: '[PRE69]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: After ensuring the current user is actually authenticated, we check if the user
    ID of the signed-in user matches the maker ID in the game. Then, accordingly,
    we render the EDIT button linking to the edit form view, and the DELETE option
    with a `DeleteGame` component.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 在确保当前用户确实认证后，我们检查已登录用户的用户ID是否与游戏中的制作者ID匹配。然后，相应地，我们渲染链接到编辑表单视图的“编辑”按钮，以及带有`DeleteGame`组件的“删除”选项。
- en: The implementation of this `DeleteGame` component is similar to the `DeleteShop`
    component discussed in [Chapter 7](03fd3b4a-b7fd-4b42-ad7e-5bc34b5612b0.xhtml), *Exercising
    MERN Skills with an Online Marketplace*. Instead of a shop, the `DeleteGame` component
    will take the game to be deleted and the `updateGames` function definition received
    from the parent component as props. After this implementation is integrated, the
    maker of a game will be able to remove the game from the platform.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`DeleteGame`组件的实现与第7章中讨论的`DeleteShop`组件类似，*使用在线市场锻炼MERN技能*。不同于商店，`DeleteGame`组件将接受要删除的游戏和从父组件接收的`updateGames`函数定义作为属性。在集成此实现后，游戏的制作者将能够从平台上删除游戏。
- en: Users visiting the MERN VR Game application can browse through the list of games
    rendered in these views and select to play a game by clicking the PLAY GAME link
    rendered in the corresponding `GameDetail` component. In the next section, we
    will see how to update the server to handle a request to play a game.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 访问MERN VR游戏应用的用户可以浏览在这些视图中渲染的游戏列表，并通过点击相应的`GameDetail`组件中渲染的“播放游戏”链接来选择播放游戏。在下一节中，我们将看到如何更新服务器以处理播放游戏的请求。
- en: Playing the VR game
  id: totrans-313
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 播放VR游戏
- en: 'Users on the MERN VR Game application will be able to open and play any of
    the VR games from within the application. To enable this, we will add an API on
    the server that renders the `index.html` file, which was generated with React
    360, as discussed in the previous chapter, [Chapter 13](4f633dd6-f392-490d-b3a6-eb5430b58ec8.xhtml), *Developing
    a Web-Based VR Game*. This API on the backend will receive a `GET` request at
    the following path:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: MERN VR游戏应用的用户将能够打开并播放应用内的任何VR游戏。为了实现这一点，我们将在服务器上添加一个API，该API渲染由React 360生成的`index.html`文件，如前一章所述，[第13章](4f633dd6-f392-490d-b3a6-eb5430b58ec8.xhtml)，*开发基于Web的VR游戏*。此后端API将在以下路径接收一个`GET`请求：
- en: '[PRE70]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: This path takes a `game ID` value as a query parameter. The `game ID` in this
    URL will be used in the React 360 code, as elaborated on later in the chapter,
    to fetch the game's details using the load game API. In the following section,
    we will look at the implementation of the backend API that will handle this `GET`
    request to start playing a game when the user clicks on the PLAY GAME button.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 此路径将一个`游戏ID`值作为查询参数。此URL中的`游戏ID`将在本章后面详细说明的React 360代码中使用，用于通过加载游戏API获取游戏详情。在下一节中，我们将查看实现后端API的过程，该API将处理用户点击“播放游戏”按钮时开始的“GET”请求。
- en: Implementing the API to render the VR game view
  id: totrans-317
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现渲染VR游戏视图的API
- en: In order to implement the API that will render the VR game in the browser, we
    will add a route in the backend that will receive a `GET` request and open the `index.html`
    page from React 360.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现将在浏览器中渲染VR游戏的API，我们将在后端添加一个路由，该路由将接收一个`GET`请求并打开React 360的`index.html`页面。
- en: 'This route will be declared in `game.routes.js` with the other game routes,
    as follows:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 此路由将在`game.routes.js`中声明，与其他游戏路由一起，如下所示：
- en: '`mern-vrgame/server/routes/game.routes.js`:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/server/routes/game.routes.js`:'
- en: '[PRE71]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'A `GET` request received at this route will execute the `playGame` controller
    method, which will return the `index.html` page in response to the incoming request.
    The `playGame` controller method will be defined as shown in the following code:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 在此路由接收到的`GET`请求将执行`playGame`控制器方法，该方法将返回响应请求的`index.html`页面。`playGame`控制器方法将定义如下代码：
- en: '`mern-vrgame/server/controllers/game.controller.js`:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/server/controllers/game.controller.js`:'
- en: '[PRE72]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: The `playGame` controller method will simply send the `index.html` page placed
    in the `/server/vr/` folder to the requesting client.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '`playGame`控制器方法将简单地发送放置在`/server/vr/`文件夹中的`index.html`页面给请求客户端。'
- en: In the browser, this will render the React 360 game code, which needs to fetch
    the game details from the database using the load game API and render the game
    world, along with the VR objects that the user can interact with. In the next
    section, we will see how the game view we built previously with React 360 needs
    to be updated to load these game details dynamically.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中，这将渲染React 360游戏代码，该代码需要使用加载游戏API从数据库中获取游戏详情，并渲染游戏世界，以及用户可以与之交互的VR对象。在下一节中，我们将看到我们之前用React
    360构建的游戏视图需要如何更新以动态加载这些游戏详情。
- en: Updating the game code in React 360
  id: totrans-327
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新React 360中的游戏代码
- en: With the game backend all set up in the MERN application, we can update the
    React 360 project code we developed in [Chapter 13](4f633dd6-f392-490d-b3a6-eb5430b58ec8.xhtml), *Developing
    a Web-Based VR Game*, to make it render games directly from the game collection
    in the database.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 在MERN应用中设置好游戏后端后，我们可以更新我们在[第13章](4f633dd6-f392-490d-b3a6-eb5430b58ec8.xhtml)，*开发基于Web的VR游戏*中开发的React
    360项目代码，使其能够直接从数据库中的游戏集合中渲染游戏。
- en: We will use the game ID in the link that opens the React 360 application to
    fetch game details, using the load game API from within the React 360 code. Then,
    we will set this retrieved game data to the state so that the game loads details
    from the database instead of the static sample data we used in [Chapter 13](4f633dd6-f392-490d-b3a6-eb5430b58ec8.xhtml), *Developing
    a Web-Based VR Game*. Once the code is updated, we can bundle it again and place
    the compiled files in the MERN application before trying out the integration,
    as discussed in the following sections.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用在打开 React 360 应用程序的链接中的游戏 ID 来获取游戏详情，使用 React 360 代码内的加载游戏 API。然后，我们将检索到的游戏数据设置为状态，以便游戏从数据库加载详情，而不是我们在
    [第 13 章](4f633dd6-f392-490d-b3a6-eb5430b58ec8.xhtml)，“开发基于 Web 的 VR 游戏” 中使用的静态示例数据。一旦代码更新，我们再次捆绑它，并将编译的文件放置在
    MERN 应用程序中，然后尝试集成，如以下几节所述。
- en: Getting the game ID from a link
  id: totrans-330
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从链接中获取游戏 ID
- en: 'In order to render the VR game based on the game the user chose to play from
    the MERN VR Game application, we need to retrieve the corresponding game ID from
    the link that loads the VR game view. In the `index.js` file of the React 360
    project folder, we will update the `componentDidMount` method to first retrieve
    the game ID from the incoming URL, and then make a fetch call to the load game
    API, as shown in the following code:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 为了根据用户在 MERN VR 游戏应用程序中选择要玩的游戏渲染 VR 游戏，我们需要从加载 VR 游戏视图的链接中检索相应的游戏 ID。在 React
    360 项目文件夹的 `index.js` 文件中，我们将更新 `componentDidMount` 方法，首先从传入的 URL 中检索游戏 ID，然后对加载游戏
    API 进行获取调用，如下面的代码所示：
- en: '`/MERNVR/index.js`:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '`/MERNVR/index.js`:'
- en: '[PRE73]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '`Location.search` gives us access to the query string in the incoming URL that
    loads `index.html`. The retrieved query string is `split` to get the `gameId` value
    from the `id` query parameter attached in the URL. We use this `gameId` value
    to fetch the game details with the load game API on the backend and set it to
    the state for the game and `vrObjects` values. To be able to use the load game
    API in the React 360 project, we will define a corresponding `fetch` method in
    the project, as discussed in the next section.'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '`Location.search` 允许我们访问加载 `index.html` 的传入 URL 中的查询字符串。检索到的查询字符串被 `split`
    以从 URL 中附加的 `id` 查询参数中获取 `gameId` 值。我们使用这个 `gameId` 值从后端的加载游戏 API 获取游戏详情，并将其设置为游戏和
    `vrObjects` 的状态值。为了能够在 React 360 项目中使用加载游戏 API，我们将在项目中定义一个相应的 `fetch` 方法，如下一节所述。'
- en: Fetching the game data with the load game API
  id: totrans-335
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用加载游戏 API 获取游戏数据
- en: 'We want to fetch the game data from within the React 360 code. In the React
    360 project folder, we will add an `api-game.js` file that will contain a `read`
    fetch method that makes a call to the load game API on the server using the provided
    game ID. This `fetch` method will be defined as follows:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望在 React 360 代码内部获取游戏数据。在 React 360 项目文件夹中，我们将添加一个 `api-game.js` 文件，该文件将包含一个
    `read` 获取方法，该方法使用提供的游戏 ID 调用服务器上的加载游戏 API。这个 `fetch` 方法将定义如下：
- en: '`/MERNVR/api-game.js`:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: '`/MERNVR/api-game.js`:'
- en: '[PRE74]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: This `fetch` method receives the game ID in the `params` and makes the API call
    to retrieve the corresponding game from the database. It is used in `componentDidMount`
    of the React 360 entry component, which is defined in the `index.js` file, to
    retrieve the game details, as discussed in the previous section.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 `fetch` 方法接收 `params` 中的游戏 ID 并对数据库中的相应游戏进行 API 调用。它用于 React 360 入口组件的 `componentDidMount`
    中，该组件定义在 `index.js` 文件中，用于检索游戏详情，如前所述。
- en: This updated React 360 code is available in the branch named `dynamic-game-second-edition` on
    the GitHub repository at [github.com/shamahoque/MERNVR/tree/dynamic-game-second-edition](https://github.com/shamahoque/MERNVR/tree/dynamic-game-second-edition).
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 此更新后的 React 360 代码可在 GitHub 仓库的 `dynamic-game-second-edition` 分支上找到，网址为 [github.com/shamahoque/MERNVR/tree/dynamic-game-second-edition](https://github.com/shamahoque/MERNVR/tree/dynamic-game-second-edition)。
- en: With the React 360 code updated and capable of retrieving and rendering game
    details based on the game ID specified in the incoming URL, we can bundle and
    integrate this updated code with the MERN VR Game application, as discussed in
    the next section.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 在更新 React 360 代码并能够根据传入 URL 中指定的游戏 ID 获取和渲染游戏详情后，我们可以将此更新代码捆绑并集成到 MERN VR 游戏应用程序中，如下一节所述。
- en: Bundling and integrating the updated code
  id: totrans-342
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 捆绑和集成更新后的代码
- en: With the React 360 code updated to fetch and render game details dynamically
    from the server, we can bundle this code using the provided bundle script and
    place the newly compiled files in the `dist` folder of the MERN VR Game project
    directory.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 当React 360代码更新为从服务器动态获取和渲染游戏详细信息时，我们可以使用提供的捆绑脚本来捆绑此代码，并将新编译的文件放置在MERN VR游戏项目目录的`dist`文件夹中。
- en: 'To bundle the React 360 code from the command line, go to the React 360 `MERNVR`
    project folder and run the following code:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 要从命令行捆绑React 360代码，请转到React 360 `MERNVR`项目文件夹并运行以下代码：
- en: '[PRE75]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: This will generate the `client.bundle.js` and `index.bundle.js` bundle files
    in the `build/` folder with the updated React 360 code. These files, along with
    the `index.html` file and `static_assets` folders, need to be added to the MERN
    VR Game application code, as discussed in [Chapter 13](4f633dd6-f392-490d-b3a6-eb5430b58ec8.xhtml), *Developing
    a Web-Based VR Game*, to integrate the latest VR game code.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在`build/`文件夹中生成带有更新后的React 360代码的`client.bundle.js`和`index.bundle.js`捆绑文件。这些文件，连同`index.html`文件和`static_assets`文件夹，需要添加到MERN
    VR游戏应用程序代码中，正如在第13章[4f633dd6-f392-490d-b3a6-eb5430b58ec8.xhtml]“开发基于Web的VR游戏”中讨论的那样，以集成最新的VR游戏代码。
- en: With this integration completed, if we run the MERN VR Game application and
    click the PLAY GAME link on any of the games, it should open up the game view
    with the details of the specific game rendered in the VR scene, and allow interaction
    with the VR objects, as specified in the gameplay.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此集成后，如果我们运行MERN VR游戏应用程序并点击任何游戏中的PLAY GAME链接，它应该会打开游戏视图，在VR场景中渲染特定游戏的详细信息，并允许与VR对象进行交互，如游戏玩法中指定的。
- en: Summary
  id: totrans-348
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we integrated the capabilities of the MERN stack technologies
    with React 360 to develop a dynamic VR game application for the web.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将MERN堆栈技术的功能与React 360集成，以开发一个用于Web的动态VR游戏应用程序。
- en: We extended the MERN skeleton application to build a working backend that stores
    VR game details and allows us to make API calls to manipulate these details. We
    added React views that let users modify games and browse through the games, with
    the option to launch and play the VR game at a specified route rendered directly
    by the server.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 我们扩展了MERN骨架应用程序，构建了一个可工作的后端，用于存储VR游戏详细信息，并允许我们通过API调用来操作这些详细信息。我们添加了React视图，让用户可以修改游戏并浏览游戏，有选项在由服务器直接渲染的指定路由上启动和玩VR游戏。
- en: Finally, we updated the React 360 project code to pass data between the MERN
    application and the VR game view, by retrieving query parameters from the incoming
    URL, and using fetch to retrieve data with the game API.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们通过从传入的URL中检索查询参数并使用fetch通过游戏API检索数据，更新了React 360项目代码，以便在MERN应用程序和VR游戏视图中传递数据。
- en: This integration of the React 360 code with the MERN stack application produced
    a fully functioning and dynamic web-based VR game application, demonstrating how
    MERN stack technologies can be used and extended to create unique user experiences.
    You can apply the capabilities revealed here to build your own VR-infused full-stack
    web applications.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 将React 360代码与MERN堆栈应用程序集成产生了功能齐全且动态的基于Web的VR游戏应用程序，展示了如何使用和扩展MERN堆栈技术来创建独特的用户体验。您可以将这里揭示的能力应用于构建自己的VR增强全栈Web应用程序。
- en: In the next chapter, we will reflect on the full-stack MERN applications built
    in this book, discussing not just the best practices that were followed but also
    the scope for improvements and further development.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将回顾本书中构建的全栈MERN应用程序，讨论不仅遵循的最佳实践，还有改进和进一步发展的空间。
