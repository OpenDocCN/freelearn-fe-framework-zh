- en: Chapter 11. React Tools
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章。React工具
- en: In the previous chapter, we learned how to use Animation add-on and CSS transition.
    We have also explored different events and studied how to easily enhance our application
    in order to create stunning effects using animations.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了如何使用动画插件和CSS过渡。我们还探索了不同的事件，并研究了如何通过动画轻松增强我们的应用程序，以创建令人惊叹的效果。
- en: In this chapter, we will look at various tools in the React ecosystem, which
    are useful in the whole lifetime of an application—the development, debugging,
    and build tools. We will see how these tools make developing React applications
    a beautiful experience.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨React生态系统中的各种工具，这些工具在整个应用程序的生命周期中都有用——开发、调试和构建工具。我们将看到这些工具如何使开发React应用程序成为一种美好的体验。
- en: 'We will study the following tools in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将研究以下工具：
- en: Babel
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Babel
- en: ESLint
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ESLint
- en: React Developer Tools
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: React开发者工具
- en: Webpack
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Webpack
- en: Hot reloading using Webpack
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Webpack进行热重载
- en: Mike and Shawn had some free time before starting their next project. They decided
    to spend this time in learning more about various tools that they had used so
    far in their React projects for development, testing, and bundling the apps.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 迈克和肖恩在开始他们的下一个项目之前有一些空闲时间。他们决定利用这段时间学习更多关于他们在React项目中迄今为止使用的各种工具，这些工具用于开发、测试和打包应用程序。
- en: Development tools
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发工具
- en: '"Shawn, today I would like to discuss about the tools that we have used until
    now while building our React apps today. React is a very small library, which
    does one thing right—rendering the UI. However, we had to use a lot of other tools
    with React throughout our journey until now. Today is the day to discuss everything
    about them." said Mike.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '"肖恩，今天我想讨论一下我们在今天构建React应用程序过程中所使用的工具。React是一个非常小的库，它做了一件事情做得很好——渲染UI。然而，在我们迄今为止的旅程中，我们不得不使用很多其他工具与React一起使用。今天是我们讨论所有这些工具的一天。"
    迈克说。'
- en: '"Awesome, Mike! I am ready as always. Let''s get rolling." exclaimed Shawn.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '"太棒了，迈克！我总是准备好了。让我们开始吧。" 肖恩兴奋地说。'
- en: Using Babel for ES6 and JSX
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Babel进行ES6和JSX
- en: '"Shawn, we have used ES6 or ES2015 code since the beginning. We are also very
    bullish about using JSX. Sometimes, we have also used ES7 code, such as the function
    `bind` operator in our latest Cats Pinterest project."'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '"肖恩，我们从一开始就使用了ES6或ES2015代码。我们也非常看好使用JSX。有时，我们也使用了ES7代码，比如我们最新的Cats Pinterest项目中函数`bind`操作符。"'
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '"Yes, Mike. I loved the conciseness of these new features." said Shawn.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '"是的，迈克。我喜欢这些新功能的简洁性。" 肖恩说。'
- en: '"However, current browsers still don''t understand the ES6 or ES7 code that
    we have written. We use Babel to transform this code in ES5 JavaScript, which
    current browsers can run. It allows us to use the JavaScript syntax from the future
    today. Babel also has JSX support, therefore, it is very handy to use with React."
    explained Mike.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '"然而，当前的浏览器仍然不理解我们编写的ES6或ES7代码。我们使用Babel将这些代码转换为ES5 JavaScript，这样当前的浏览器就可以运行。它允许我们今天使用未来的JavaScript语法。Babel还支持JSX，因此它与React一起使用非常方便。"
    迈克解释说。'
- en: '"Babel is very modular and comes with a plugin architecture. It has plugins
    for different ES6/ES7 syntaxes. Generally, we want to use React specific and ES6
    specific plugins. Babel groups such common plugins into something called **presets**.
    Babel has various plugins for ES6, React, as well as different stages of future
    language proposals."'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '"Babel非常模块化，并带有插件架构。它为不同的ES6/ES7语法提供了插件。通常，我们希望使用特定于React和特定于ES6的插件。Babel将这些常见插件组合成称为**预设**的东西。Babel为ES6、React以及未来的语言提案的不同阶段提供了各种插件。"'
- en: '"We are mostly interested in using the ES2015 and React presets, which comprise
    of all the plugins related to ES6 and React. Occasionally, we do need some of
    the advanced features, such as the ES7 function bind syntax, so we need to configure
    it separately. In such cases, we use the individual plugins directly, as we used
    `transform-function-bind` for the function `bind` syntax."'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '"我们主要对使用ES2015和React预设感兴趣，这些预设包含所有与ES6和React相关的插件。偶尔，我们确实需要一些高级功能，例如ES7函数绑定语法，因此我们需要单独配置它。在这种情况下，我们直接使用单个插件，就像我们使用`transform-function-bind`来处理`bind`函数语法一样。"
    迈克解释说。'
- en: Note
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: All of these presets and plugins come in their own npm packages. Babel is built
    this way—a small core and a giant plugin architecture with a lot of configuration
    options around it.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些预设和插件都有自己的npm包。Babel就是这样构建的——一个小型核心和庞大的插件架构，周围有许多配置选项。
- en: '"Therefore, we will have to install all of these packages separately."'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '"因此，我们将不得不分别安装所有这些包。"'
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '"Got it. I have also seen some Babel related configuration in our Webpack configuration."
    said Shawn.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '"Yes. Though Babel allows us to convert files from the command line, we do
    not want to convert each and every file manually. Therefore, we have configured
    Webpack in such a way that it will convert our ES6/ES7 code using Babel before
    starting the app. It uses babel-loader package. Let''s discuss it in detail when
    we discuss webpack later today," said Mike.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We are using Babel version 6 throughout this book. Check out more details about
    Babel at [http://babeljs.io/](http://babeljs.io/).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: ESLint
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '"Shawn, you have seen my commits related to linting in our projects, right?"'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '"Yes. I used to get annoyed at these small little changes initially, but then
    I got used to them." said Mike.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '"**Linting** is very important, especially if we want to maintain the code
    quality across different projects. Fortunately, linting React projects is very
    easy with ESLint. It also supports ES6 syntax and JSX so that we can also lint
    our next generation code." informed Mike.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '"We are using eslint-plugin-react and babel-eslint npm packages to lint ES6
    and React code. We have also globally installed the ESLint npm package."'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Check [http://eslint.org/docs/user-guide/getting-started](http://eslint.org/docs/user-guide/getting-started)
    for details about getting started with ESLint.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '"Mike, I also see that you have added lint command under scripts in `package.json`."
    added Shawn.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '"Yes, Shawn. It is common to miss a few things here and there in a big project.
    Having a command to lint the project helps us in finding such things. We need
    the eslint, eslint-babel, and eslint-plugin-react packages to use ESLint within
    our code. Therefore, we need to install it before trying to run this command."'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '"We are also using some standard configuration options for ESLint. These options
    are present in the `.eslintrc` file of our project. We define the rules that we
    want to check with ESLint in this file. We also enable ES6 feature that we want
    ESLint to whitelist. Otherwise, it will raise linting errors for such code as
    it natively only supports ES5\. We also specify that ESLint should use babel-eslint
    as parser so that ES6 code will be parsed by ESLint properly."'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '"We are all set now. Go ahead and run it on our Pinterest project and fix remaining
    linting issues." informed Mike.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '"Ah, it complained about a missing space. Let me fix it quickly."'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '"Perfect, Shawn!"'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: ESLint can also be integrated with your text editor. Check [http://eslint.org/docs/user-guide/integrations.html](http://eslint.org/docs/user-guide/integrations.html)
    for more details.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: React Dev Tools
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"Shawn, React is excellent at improving the developer experience. They have
    released react-dev-tools to help us in debugging our apps. React developer tools
    are Chrome and Firefox add-ons, which make debugging React apps fun."'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '"Once you install the add-on, you will then see a **React** tab in the browser
    console while running a React app. An interesting thing is that this tab is also
    shown for websites that use React in production too, for example, Facebook."'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: “一旦安装了插件，你将在运行 React 应用的浏览器控制台中看到一个 **React** 选项卡。有趣的是，这个选项卡也会显示在生产中使用 React
    的网站上，例如，Facebook。”
- en: '![React Dev Tools](img/4730_11_01.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![React 开发工具](img/4730_11_01.jpg)'
- en: '"Once we click on the **React** tab, it shows all the components in our app."'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: “一旦我们点击 **React** 选项卡，它就会显示我们应用中的所有组件。”
- en: '![React Dev Tools](img/4730_11_02.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![React 开发工具](img/4730_11_02.jpg)'
- en: '"Shawn, as you may have noticed, we can see all our components on the left-hand
    side pane. On the right-hand side, we see props and state of the component selected
    in the left pane. Therefore, we can inspect UI state at any point of time. We
    don''t need to add `console.log` statements to see what is happening with our
    components."'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: “肖恩，正如你可能注意到的，我们可以在左侧面板中看到所有的组件。在右侧，我们看到左侧面板中选择的组件的属性和状态。因此，我们可以在任何时间点检查 UI
    状态。我们不需要添加 `console.log` 语句来查看我们的组件发生了什么。”
- en: '"More than this, it provides us with a temporary variable—**$r**. The selected
    component from the console is available as **$r** in the console."'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: “不仅如此，它还为我们提供了一个临时变量——**$r**。控制台中的所选组件在控制台中可用为 **$r**。”
- en: '![React Dev Tools](img/4730_11_03.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![React 开发工具](img/4730_11_03.jpg)'
- en: '"Let''s try to see what **$r** gives us in the console so that we can debug
    the selected component directly in console."'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: “让我们看看控制台中的 **$r** 能给我们带来什么，这样我们就可以直接在控制台中调试所选组件。”
- en: '![React Dev Tools](img/4730_11_04.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![React 开发工具](img/4730_11_04.jpg)'
- en: '"It also allows us to scroll to the selected component in the UI to see the
    actual source code of the component. It can also show all components of a specific
    type."'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: “它还允许我们滚动到 UI 中的所选组件，以查看组件的实际源代码。它还可以显示特定类型的所有组件。”
- en: '![React Dev Tools](img/4730_11_05.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![React 开发工具](img/4730_11_05.jpg)'
- en: '"So Shawn, what do you think about these dev tools?" asked Mike.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: “肖恩，你对这些开发工具有什么看法？”迈克问道。
- en: '"I am very impressed. This is really nice! I will use them in each and every
    React project from now onwards." Shawn was very excited on seeing the power of
    React dev tools.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: “我非常印象深刻。这真的很棒！从现在开始，我将在每一个 React 项目中使用它们。”肖恩对看到 React 开发工具的力量感到非常兴奋。
- en: Note
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Check [https://github.com/facebook/react-devtools](https://github.com/facebook/react-devtools)
    for more details on React dev tools.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 查看更多关于 React 开发工具的详细信息：[https://github.com/facebook/react-devtools](https://github.com/facebook/react-devtools)
- en: Build tools
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建工具
- en: '"Shawn, the build system is arguably the first thing that we should care about
    when creating a new web application. It is not only a tool for running scripts,
    but in the JavaScript world, it usually shapes the basic structure of our application."'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: “肖恩，当创建新的 Web 应用程序时，构建系统可能是我们首先应该关心的事情。它不仅是一个运行脚本的工具，在 JavaScript 世界中，它通常塑造我们应用程序的基本结构。”
- en: 'The following responsibilities should be performed by a build system:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 以下责任应由构建系统执行：
- en: External dependencies as well internal dependencies should be managed
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 外部依赖以及内部依赖都应该被管理
- en: It should run compilers/preprocessors
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它应该运行编译器/预处理器
- en: It should optimize assets for production
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它应该优化生产环境中的资源
- en: The development web server, browser reloader, and file watcher should be run
    by it
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发服务器、浏览器重新加载器和文件监视器应该由它运行
- en: '"There are a lot of different tools such as Grunt, Gulp, and Browserify, which
    can be used as part of our build system. Each tool has its own advantages and
    disadvantages. However, we have decided to go with Webpack in our projects." said
    Mike.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: “有很多不同的工具，如 Grunt、Gulp 和 Browserify，可以用作我们构建系统的一部分。每个工具都有其自身的优缺点。然而，我们已经决定在我们的项目中使用
    Webpack。”迈克说道。
- en: What is Webpack?
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是 Webpack？
- en: '"Webpack is a module bundler. It bundles our JavaScript with its dependencies
    into a single package."'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: “Webpack 是一个模块打包器。它将我们的 JavaScript 及其依赖项打包成一个单独的包。”
- en: '"Unlike Browserify and other tools, Webpack also bundles other assets such
    as CSS, fonts, and images. It supports CommonJS module syntax, which is very common
    in node.js and npm packages. Therefore, it makes things easier as we don''t need
    to use another package managers for frontend assets. We can just use npm and share
    the dependencies between server-side code and front-end code. It is also smart
    enough to load dependencies in the correct order so that we don''t need to worry
    about ordering explicit and implicit dependencies."'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '"与Browserify和其他工具不同，Webpack还可以捆绑其他资源，如CSS、字体和图像。它支持CommonJS模块语法，这在node.js和npm包中非常常见。因此，它使事情变得更容易，因为我们不需要使用另一个包管理器来处理前端资源。我们可以只使用npm，并在服务器端代码和前端代码之间共享依赖项。它还足够智能，能够按正确顺序加载依赖项，这样我们就不需要担心显式和隐式依赖项的顺序。"（内联代码不需要翻译）'
- en: '"As a result, Webpack alone can perform the task of Browserify as well as other
    build tools such as Grunt and Gulp."'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '"因此，Webpack本身就可以执行Browserify以及其他构建工具如Grunt和Gulp的任务。"（内联代码不需要翻译）'
- en: Note
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Note（内联代码不需要翻译）
- en: This section will not cover every aspect of Webpack. However, we will discuss
    how to use Webpack effectively with React.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '"本节不会涵盖Webpack的所有方面。然而，我们将讨论如何有效地使用Webpack与React结合。"（内联代码不需要翻译）'
- en: Webpack configuration
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Webpack configuration（内联代码不需要翻译）
- en: '"Shawn, in a typical React app, we use ES6 code and JSX in our components.
    We also use frontend assets within the same component to make it more portable.
    Therefore, our Webpack configuration must handle the all these aspects correctly."
    explained Mike.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '"肖恩，在一个典型的React应用中，我们在组件中使用ES6代码和JSX。我们还在同一个组件中使用前端资源，使其更易于携带。因此，我们的Webpack配置必须正确处理所有这些方面。"
    迈克解释道。'
- en: '"Let''s take an example of our Pinterest app and see how Webpack is configured
    to run it."'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '"让我们以我们的Pinterest应用为例，看看Webpack是如何配置来运行它的。"（内联代码不需要翻译）'
- en: '"First of all, we need to inform Webpack about the entry point of our app.
    In our case, it is the `index.js` file, which mounts the `App` component in the
    DOM."'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '"首先，我们需要通知Webpack关于我们应用的入口点。在我们的例子中，它是`index.js`文件，它将`App`组件挂载到DOM中。"（内联代码不需要翻译）'
- en: '[PRE7]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '"Therefore, we mention the entry point as `src/index.js` in the `webpack.config.js`.
    file."'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '"因此，我们在`webpack.config.js`文件中提到入口点为`src/index.js`。"（内联代码不需要翻译）'
- en: '[PRE8]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '"Secondly, we need to inform Webpack where to put the generated bundled code
    from our source. This is done by adding a config for output."'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '"其次，我们需要通知Webpack将生成的捆绑代码放在哪里。这是通过添加一个输出配置来完成的。"（内联代码不需要翻译）'
- en: '[PRE9]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '"The output option tells Webpack to write the complied files in the current
    directory''s dist folder. The name of the file will be `bundle.js`. We can see
    the output of `bundle.js` by running the `webpack` command."'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '"输出选项告诉Webpack将编译后的文件写入当前目录的dist文件夹。文件名将是`bundle.js`。我们可以通过运行`webpack`命令来查看`bundle.js`的输出。"（内联代码不需要翻译）'
- en: '[PRE10]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '"This will create a `dist/bundle.js` file with all the compiled code."'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '"这将创建一个包含所有编译代码的`dist/bundle.js`文件。"（内联代码不需要翻译）'
- en: '"The `publicPath` specifies the public URL address of the output files, when
    referenced in a browser. This is the path that we use in our `index.html` file,
    which will be served by the web server to the users."'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '"The `publicPath` specifies the public URL address of the output files, when
    referenced in a browser. This is the path that we use in our `index.html` file,
    which will be served by the web server to the users."（内联代码不需要翻译）'
- en: '[PRE11]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Loaders
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Loaders（内联代码不需要翻译）
- en: '"After this, we have to specify different loaders to transform our JSX, ES6
    code, and other assets properly. Loaders are transformations that are applied
    to a resource file of your app. They are functions (running in node.js) that take
    the source of a resource file as the parameter and return the new source. We use
    `babel-loader` for our ES6 and JSX code."'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '"之后，我们必须指定不同的加载器来正确转换我们的JSX、ES6代码和其他资源。加载器是对你的应用资源文件应用的一种转换。它们是运行在node.js中的函数，它们将资源文件的源作为参数，并返回新的源。我们使用`babel-loader`来处理我们的ES6和JSX代码。"（内联代码不需要翻译）'
- en: '[PRE12]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '"We have installed the `babel-loader` package via npm and included it in `package.json`.
    After this, we have specified it in our Webpack configuration. The test option
    matches the files with the given regex. The given loader parses these files. Therefore,
    `babel-loader` will compile `.jsx` and `.js` files from our source files in the
    `src` directory specified by the `include` option. We also specify that `babel-loader`
    should use es2015 and react presets as well as function-bind transformer plugin
    so that Babel will be able to parse all of our code properly."'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '"我们通过npm安装了`babel-loader`包，并将其包含在`package.json`中。之后，我们在Webpack配置中指定了它。测试选项匹配给定的正则表达式。给定的加载器解析这些文件。因此，`babel-loader`将编译`src`目录中由`include`选项指定的源文件中的`.jsx`和`.js`文件。我们还指定`babel-loader`应使用es2015和react预设以及function-bind转换器插件，这样Babel就能正确解析我们所有的代码。"（内联代码不需要翻译）'
- en: '"For other type of assets such as CSS, fonts, and images, we use their own
    loaders."'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '"对于其他类型的资产，如CSS、字体和图像，我们使用它们自己的加载器。"'
- en: '[PRE13]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '"All of these loaders come in their own npm packages. We have to install npm
    packages for `style-loader`, `css-loader`, `url-loader`, and `file-loader` and
    update `package.json`."'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '"所有这些加载器都包含在其自己的npm包中。我们必须为`style-loader`、`css-loader`、`url-loader`和`file-loader`安装npm包，并更新`package.json`。"'
- en: Note
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Check [https://webpack.github.io/docs/using-loaders.html](https://webpack.github.io/docs/using-loaders.html)
    for more details about using and configuring loaders.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 查阅[https://webpack.github.io/docs/using-loaders.html](https://webpack.github.io/docs/using-loaders.html)以获取有关使用和配置加载器的更多详细信息。
- en: Hot module replacement
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 热模块替换
- en: '"Shawn, one of the coolest features of Webpack is **Hot Module Replacement**
    (**HMR**). This means that whenever we modify a component and save the file, Webpack
    will replace the module on the page without reloading the browser and losing component
    state." informed Mike.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '"肖恩，Webpack最酷的特性之一是**热模块替换**（**HMR**）。这意味着每次我们修改一个组件并保存文件时，Webpack都会在不重新加载浏览器和丢失组件状态的情况下替换页面上的模块。"迈克告知。'
- en: '"Wow! That sounds very impressive." exclaimed Shawn.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '"哇！这听起来非常令人印象深刻。"肖恩惊呼。'
- en: '"To get hot reloading working, we have to use the excellent react-hot-loader
    package and webpack-dev-server. The webpack-dev-server package saves us from running
    Webpack repeatedly for every file change before starting the server. It will run
    the app for us using the `config` options provided in `webpack.config.js`. The
    key point in setting up webpack-dev-server is configuring it for hot reloading.
    It can be done by adding a `hot: true config` option."'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '"为了使热重载工作，我们必须使用出色的react-hot-loader包和webpack-dev-server。webpack-dev-server包在启动服务器之前，每次文件更改之前都无需重复运行Webpack，它会为我们使用`webpack.config.js`中提供的`config`选项运行应用。设置webpack-dev-server的关键点是配置它以启用热重载。这可以通过添加`hot:
    true`配置选项来完成。"'
- en: '[PRE14]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '"This will make sure that webpack-dev-server will start on localhost port `9000`,
    with hot reloading enabled. It will also use all the configuration that we defined
    in `webpack.config.js`." said Mike.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '"这将确保webpack-dev-server将在localhost端口`9000`上启动，并启用热重载。它还将使用我们在`webpack.config.js`中定义的所有配置。"迈克说。'
- en: '"We will have to modify our `package.json` to run the `server.js` script."'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '"我们将必须修改我们的`package.json`以运行`server.js`脚本。"'
- en: '[PRE15]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '"This will make sure that the `npm start` command will run the `webpack-dev-server`.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '"这将确保`npm start`命令将运行`webpack-dev-server`。"'
- en: '"We also have to make some changes in our Webpack configuration in order to
    make hot reloading work. We have to configure the entry option to include dev
    server and hot reloading server."'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '"我们还需要在我们的Webpack配置中进行一些更改，以便使热重载工作。我们必须配置入口选项以包含开发服务器和热重载服务器。"'
- en: '[PRE16]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '"Next up, we need to inform Webpack to use hot-loader with other loaders that
    we have already added."'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '"接下来，我们需要通知Webpack使用hot-loader与我们已经添加的其他加载器。"'
- en: '[PRE17]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '"Finally, the hot module replacement plugin from Webpack has to be included
    in the plugins section of the config."'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '"最后，Webpack的热模块替换插件必须包含在配置的插件部分。"'
- en: '[PRE18]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '"The final Webpack configuration looks like this"'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '"最终的Webpack配置看起来像这样"'
- en: '[PRE19]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '"Now if we start the app using `npm start`, then it will use hot-reloader with
    webpack-dev-server. Shawn, try changing some code and check whether the code gets
    updated in the browser without refreshing the page. Magic!!" explained Mike.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '"现在如果我们使用`npm start`启动应用，那么它将使用webpack-dev-server的热重载器。肖恩，尝试更改一些代码并检查代码是否在浏览器中更新而无需刷新页面。魔法！！"迈克解释说。'
- en: '"Great, Mike. Yeah, it really works. All hail Webpack and hot reloading!"'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '"太好了，迈克。是的，它确实有效。万岁Webpack和热重载！"'
- en: Summary
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned about various tools from the React ecosystem—development,
    testing, and production tools that we have used in various stages of our app development.
    We discussed Babel, the JavaScript transpiler, to convert our next generation
    JavaScript code to ES5\. We also saw how to use ESLint and React dev tools that
    make React development easy. In the end, we saw how Webpack can be used with React
    with its powerful loaders and configuration options. We saw how these tools can
    make developing React apps a beautiful experience.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了React生态系统中的各种工具——开发、测试和生产工具，我们在应用开发的各个阶段都使用了这些工具。我们讨论了Babel，JavaScript转译器，将我们的下一代JavaScript代码转换为ES5。我们还看到了如何使用ESLint和React开发者工具使React开发变得容易。最后，我们看到了如何使用Webpack及其强大的加载器和配置选项与React一起使用。我们看到了这些工具如何使开发React应用成为一种美好的体验。"
- en: In the next chapter, we are going to dive deep into Flux as an architecture.
    We have seen how problems arise during data sharing across components. We will
    see how to overcome them using Flux.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入探讨Flux作为架构的应用。我们已了解到在组件间共享数据时会出现问题。我们将学习如何使用Flux来克服这些问题。
