- en: Running the App on iOS and Android
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在iOS和Android上运行应用
- en: There are a couple of ways to build, run, and start working with NativeScript
    applications.  We will cover command-line tools, as they are currently the most
    supported method, and the best way to do anything with any NativeScript project.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种方法可以构建、运行和开始使用NativeScript应用。我们将介绍命令行工具，因为它们是目前最支持的方法，也是处理任何NativeScript项目的最佳方式。
- en: To simplify things for our understanding, we will work through the commands
    that we will use frequently first, then we will cover the rest of the commands
    that aren't as frequently used. So, let's begin and work through the commands
    that you will want to know.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化我们的理解，我们将首先介绍我们将经常使用的命令，然后我们将介绍其他不那么常用的命令。所以，让我们开始，并介绍您想要了解的命令。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: How to run an application
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何运行应用
- en: How to start the Debugger
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何启动调试器
- en: How to build an application for deployment
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何构建用于部署的应用
- en: How to start the testing framework
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何启动测试框架
- en: How to run a NativeScript diagnostic
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何运行NativeScript诊断
- en: All about Android Keystores
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有关于Android密钥库的内容
- en: Taking command…
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接收命令……
- en: The first command we will cover is the one you will use every time you
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要介绍的第一条命令是您每次都会使用的
- en: start your app. To make things simpler, I will use `<platform>` to mean iOS,
    Android, or--when it is finally supported--Windows.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 启动您的应用。为了使事情更简单，我将使用`<platform>`来表示iOS、Android，或者当它最终得到支持时，Windows。
- en: tns run <platform>
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: tns run <platform>
- en: The `tns run <platform>` command will automatically build your app and sync
    it up to the devices and emulators. It will do all the heavy-lifting to try and
    make your app be in a running state on the device, and then it will launch the
    app. This command has changed over the years and has now become a fairly smart
    command that will automatically make certain choices to simplify your development
    life. One of the cool features of this command is that it will sync your application
    to all running and connected devices. If you have five different devices hooked
    up, all five of them will receive the changes. This only works per each platform,
    but you can run `tns run ios` in one and `tns run android` in another command
    window, and then any changes will automatically be synced to all devices connected
    to your machine. As you may imagine, this is very useful during the testing and
    cleaning up phase to make sure that everything continues to look good on different
    phones and tablets. If you have no physical devices hooked up to your computer,
    it will automatically launch an emulator for you.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`tns run <platform>`命令将自动构建您的应用并将其同步到设备和模拟器。它将完成所有繁重的工作，尝试使您的应用在设备上运行，然后启动应用。这个命令在多年中已经发生了变化，现在已经成为一个相当智能的命令，会自动做出某些选择以简化您的发展生活。这个命令的一个酷炫功能是它会将您的应用同步到所有正在运行和连接的设备。如果您连接了五台不同的设备，所有这五台设备都会接收到更改。这仅适用于每个平台，但您可以在一个命令窗口中运行`tns
    run ios`，在另一个命令窗口中运行`tns run android`，然后任何更改都将自动同步到连接到您的机器的所有设备。正如您可能想象的那样，这在测试和清理阶段非常有用，以确保在不同手机和平板电脑上一切看起来都很好。如果您没有将物理设备连接到您的计算机，它将自动为您启动一个模拟器。
- en: Normally, since the app already exists on the devices, it will just do a quick
    live sync of the changed files. This is a very fast process, as it just transfers
    all the changes in your files from your own `app` folder to all the connected
    devices, and then starts the app.  This process is, in the majority of situations,
    a really good thing. However, `tns run <platform>` will not always automatically
    detect any changes to your `node_modules` folder, for example, when you upgrade
    a plugin. If this is the case, you will need to cancel the current running `tns
    run` and then start a new `tns run`. Occasionally, the `tns run` will still believe
    that all it needs to do is sync, whereas the reality is that it should have to
    rebuild the app.  In this case, you will want to use the handy-dandy `--clean`
    option.  This is very important for times when the device does not seems to pick
    up any of your changes. The `tns run <platform> --clean` command will normally
    force the app to be rebuilt; however, if `--clean` fails to rebuild, then check
    out the `tns build` command described later in the chapter. There are a couple
    of other command parameters that aren't used much, but you might need them for
    a specific situation. The `--justlaunch` will start the app and do nothing else;
     `--no-watch` will disable live syncing, and finally `--device <device id>` will
    force the app to be installed only on a specific device. You can view which devices
    are available for the installation of the app by running `tns devices`.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，由于应用已经存在于设备上，它只会快速同步已更改的文件。这是一个非常快速的过程，因为它只是将你的文件中的所有更改从你的`app`文件夹传输到所有连接的设备，然后启动应用。这个过程在大多数情况下是非常好的。然而，`tns
    run <平台>`并不会总是自动检测到你的`node_modules`文件夹中的任何更改，例如，当你升级插件时。如果出现这种情况，你需要取消当前正在运行的`tns
    run`，然后启动一个新的`tns run`。偶尔，`tns run`仍然认为它只需要同步，而实际上它应该需要重新构建应用。在这种情况下，你将想要使用方便的`--clean`选项。这在设备似乎没有检测到任何更改的时候非常重要。`tns
    run <平台> --clean`命令通常将强制应用重新构建；然而，如果`--clean`无法重新构建，那么请查看本章后面描述的`tns build`命令。还有一些其他命令参数使用得不多，但你可能需要它们来处理特定情况。`--justlaunch`将启动应用而不做其他任何事情；`--no-watch`将禁用实时同步，最后`--device
    <设备ID>`将强制应用仅安装到特定的设备上。你可以通过运行`tns devices`来查看哪些设备可用于安装应用。
- en: tns debug <platform>
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: tns debug <平台>
- en: 'The next command we will discuss is `tns debug <platform>`; this will allow
    you to use the debug tools to test your application. This works in a similar way
    to the `tns run` command; however, instead of it just running your app, it will
    debug it. The debugger will use the standard Chrome development tools, which enables
    you to step through the code: break points, call stacks, and console logs. This
    command will give you a URL, which you can use to open in Chrome. In iOS specifically,
    you should run `tns debug ios --chrome` to get the URL for chrome-devtools. The
    following is an example of debugging Android via the Chrome debugger:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来要讨论的命令是`tns debug <平台>`；这将允许你使用调试工具测试你的应用。这与`tns run`命令类似；然而，它不是运行你的应用，而是调试它。调试器将使用标准的Chrome开发工具，这使你能够逐步执行代码：断点、调用栈和控制台日志。此命令将提供一个URL，你可以使用它来在Chrome中打开。在iOS特定情况下，你应该运行`tns
    debug ios --chrome`以获取chrome-devtools的URL。以下是通过Chrome调试器调试Android的示例：
- en: '![](img/00029.jpeg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00029.jpeg)'
- en: Some of the same `tns run` parameters are valid here, such as `--no-watch`,
    `--device`, and `--clean`. In addition to those commands, several other commands
    are available, for example, `--debug-brk`, which is used to make the app break
    at the start of the application so that you can easily set breakpoints before
    continuing the start up process. `--start` and `--stop` allow you to attach and
    detach from an already running application.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 一些与`tns run`相同的参数在这里也是有效的，例如`--no-watch`、`--device`和`--clean`。除了这些命令之外，还有一些其他命令可用，例如`--debug-brk`，它用于使应用在应用启动时中断，这样你就可以在启动过程继续之前轻松设置断点。`--start`和`--stop`允许你附加和从已运行的应用中分离。
- en: Don't forget that if you are currently using the debugger, JavaScript has the
    cool `debugger;` command, which will force an attached debugger to break just
    as though you had a breakpoint set.  This can be used to put a break anywhere
    in your code, and it is ignored if a debugger is not attached to your program.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记，如果你目前正在使用调试器，JavaScript 有一个酷炫的`debugger;`命令，它将强制附加的调试器中断，就像你设置了断点一样。这可以用来在代码的任何地方设置断点，如果没有附加调试器，则会被忽略。
- en: tns build <platform>
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: tns build <平台>
- en: The next command you will need to be aware of is `tns build <platform>`; this
    command fully builds a new app from scratch.  Now, the primary use for this command
    is when you want to build a debug or release version of the app you are going
    to give to somebody else to test or to upload it to one of the stores. However,
    it can also be used to force a fully clean build of the application, if the `tns
    run` version of your app is in a weird state--this will do a full rebuild. If
    you don't include the `--release` flag, the build will be the default debug build.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要了解的下一个命令是 `tns build <platform>`；这个命令会从头开始完全构建一个新的应用程序。现在，这个命令的主要用途是在你想要构建一个调试或发布版本的应用程序，以便将其提供给其他人进行测试或上传到某个商店时使用。然而，它也可以用来强制进行应用程序的完全清洁构建，如果你的应用程序的
    `tns run` 版本处于一种奇怪的状态--这将进行完全重建。如果你不包含 `--release` 标志，构建将是默认的调试构建。
- en: On iOS, you will use `--for-device`, which will make the app compile for a real
    device rather than an emulator. Remember that you need to have signing keys from
    Apple to do a proper release build.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在iOS上，你将使用 `--for-device`，这将使应用程序为真实设备而不是模拟器进行编译。记住，你需要从苹果那里获得签名密钥才能进行适当的发布构建。
- en: 'On Android, when you use `--release`, you will need to include all of the following
    `--key-store-*` parameters; these are required to sign in to your Android application:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android上，当你使用 `--release` 时，你需要包含以下所有 `--key-store-*` 参数；这些参数是用于对你的Android应用程序进行签名所必需的：
- en: '| `--key-store-path` | Where your key store file is located. |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| `--key-store-path` | 你的密钥库文件所在的位置。|'
- en: '| `--key-store-password` | Your password to read any of the data in your keystore.
    |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| `--key-store-password` | 读取你的密钥库中任何数据的密码。|'
- en: '| `--key-store-alias` | The alias for this app. So, inside your keystore, you
    may have `AA` as the alias, which in your mind equals AwesomeApp. I prefer to
    make the alias the same as the full name of the app, but this is your choice.
    |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| `--key-store-alias` | 这个应用程序的别名。因此，在你的密钥库中，你可能将 `AA` 作为别名，在你的心中它等于AwesomeApp。我更喜欢将别名设置为应用程序的完整名称，但这完全取决于你。|'
- en: '| `--key-store-alias-password` | This is the password required to read the
    actual signing key assigned to the alias you just set. |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| `--key-store-alias-password` | 这是读取你刚刚设置的别名所分配的实际签名密钥所需的密码。|'
- en: Since keystores can be confusing to deal with, we will stray from the path slightly
    here and discuss how to actually create a keystore. This is normally only a one-time
    thing, that you will need to do for each Android application you want to release.
    This is also not something you need to worry about for iOS applications, as Apple
    provides you the signing keys, and they fully control them.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 由于密钥库的处理可能会让人困惑，我们在这里将稍微偏离路径，讨论如何实际创建一个密钥库。这通常只是一件一次性的事情，你需要为每个你想要发布的Android应用程序执行。对于iOS应用程序，你不需要担心这个问题，因为苹果为你提供了签名密钥，并且完全控制它们。
- en: Android Keystores
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android密钥库
- en: On Android, you create your own application signing keys. As such, this key
    is used for the entire life of your application--by entire, I mean you use the
    same key to release every version of your application. This key is what links
    version 1.0 to v1.1 to v2.0\. Without using the same key, the application will
    be considered a totally different application.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android上，你将创建自己的应用程序签名密钥。因此，这个密钥将用于你应用程序的整个生命周期--这里的整个是指你使用相同的密钥发布你应用程序的每个版本。这个密钥是将版本1.0链接到v1.1再到v2.0的东西。如果不使用相同的密钥，应用程序将被视为一个完全不同的应用程序。
- en: The reason there are two passwords is that your keystore can actually contain
    an unlimited number of keys, and so, each key in the keystore has its own password.
    Anyone who has access to this key can pretend to be you. This is helpful for building
    servers, but not so helpful if you lose them. You cannot change the key at a later
    time, so making backups of your keystore is extremely important.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 之所以有两个密码，是因为你的密钥库实际上可以包含无限数量的密钥，因此，密钥库中的每个密钥都有自己的密码。任何有权访问这个密钥的人都可以假装成你。这对于构建服务器是有帮助的，但如果你丢失了它们，那就不是那么有帮助了。你无法在以后更改密钥，因此备份你的密钥库文件非常重要。
- en: Without your keystore, you will never be able to release a new version of the
    exact same application name, meaning that anyone using the older version will
    not see that you have an updated version. So, again, it is critical that you back
    up your keystore file.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 没有你的密钥库，你永远无法发布具有相同应用程序名称的新版本，这意味着使用旧版本的用户将看不到你有一个更新版本。因此，再次强调，备份你的密钥库文件是至关重要的。
- en: Creating a new keystore
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建新的密钥库
- en: '[PRE0]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You provide a path to the file you want to save into the `keystore_name`, and
    for the `alias_name` you put the actual key name for which I normally use the
    application name; So, you type the following:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 你提供一个路径，将文件保存到`keystore_name`中，对于`alias_name`，你使用实际的关键名称，我通常使用应用程序名称；所以你输入以下内容：
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then, you will see the following:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你会看到以下内容：
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You now have a keystore for your application.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在已经有了你应用程序的keystore。
- en: Android Google Play Fingerprints
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android Google Play指纹
- en: 'If you use Google Play services, you might have to give them your Android application
    key fingerprint. To get your key fingerprint, you can use the following commands:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用Google Play服务，你可能需要提供你的Android应用程序密钥指纹。要获取你的密钥指纹，你可以使用以下命令：
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You should see something like this:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会看到类似以下的内容：
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note that in addition to ensuring that you keep a good back up of your keystores,
    if you ever sell your application to another vendor, having separate keystores
    per application makes the transfer a lot easier and safer for you. If you use
    the same keystore and/or alias, it makes it difficult for you to separate out
    who gets what. So, for the sake of simplicity, I personally recommend that you
    have a separate keystore and alias per application. I normally keep the keystore
    in with the app and under version control. Since both opening and accessing an
    alias are password protected, you are fine unless you choose your passwords poorly.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，除了确保你备份好你的keystore外，如果你将来要将应用程序卖给其他供应商，为每个应用程序使用单独的keystore会使转移过程更容易也更安全。如果你使用相同的keystore和/或别名，将很难区分谁得到了什么。所以，为了简单起见，我建议你为每个应用程序使用单独的keystore和别名。我通常将keystore与app一起保存在版本控制中。由于打开和访问别名都需要密码保护，除非你选择了糟糕的密码，否则你不会有问题。
- en: Back in command
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回到命令行
- en: Now that we've taken took a side trip to deal with Android keystores, we will
    dive deeper into more of the tns commands that you only use occasionally here
    and there. The first of these is the tns plugin.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经偏离了处理Android keystore的路径，我们将更深入地探讨你偶尔会用到的一些tns命令。这些命令中的第一个是tns plugin。
- en: The tns plugin command
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: tns plugin命令
- en: 'This one is actually quite important, but it is only used when you want to
    deal with plugins. The most common version of this command is just `tns plugin
    add <name>`. So, for example, if you want to install a plugin called *NativeScript-Dom*,
    you will perform `tns plugin add nativescript-dom`, and it will automatically
    install the code for this plugin to be used in your application.  To remove this
    plugin, you would type `tns plugin remove nativescript-dom`. We also have `tns
    plugin update nativescript-dom` to remove the plugin and download and install
    the newest version of the plugin. Finally, running `tns plugin` alone will give
    you a list of plugins and their versions that you have installed:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这个功能实际上非常重要，但只有在你想处理插件时才会使用。这个命令最常见的版本就是`tns plugin add <name>`。例如，如果你想安装一个名为*NativeScript-Dom*的插件，你将执行`tns
    plugin add nativescript-dom`，它将自动安装这个插件的相关代码以便在你的应用程序中使用。要移除这个插件，你可以输入`tns plugin
    remove nativescript-dom`。我们还有`tns plugin update nativescript-dom`来移除插件并下载安装插件的新版本。最后，单独运行`tns
    plugin`将列出你已安装的插件及其版本：
- en: '![](img/00030.jpeg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00030.jpeg)'
- en: 'However, to be honest, if I need this information I''m looking for outdated
    plugins, and so your better bet is to type `npm outdated` and let `npm` give you
    the list of outdated plugins and the current versions:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，说实话，如果我真的需要这个信息，我正在寻找过时的插件，所以你更好的选择是输入`npm outdated`，让`npm`为你列出过时的插件及其当前版本：
- en: '![](img/00031.jpeg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00031.jpeg)'
- en: If you have outdated plugins, then you can use the `tns plugin update` command
    to upgrade them.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有一些过时的插件，你可以使用`tns plugin update`命令来升级它们。
- en: The tns install <dev_plugin> command
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: tns install <dev_plugin>命令
- en: This one isn't used very much, but it is useful when you need it, as it allows
    you to install development plugins, such as webpack, typescript, coffee script,
    or SASS support. So, if you decide that you want to use *webpack*, you can type
    `tns install webpack`, and it will install the webpack support so that you can
    webpack your application.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这个功能并不常用，但在你需要的时候很有用，因为它允许你安装开发插件，例如webpack、typescript、coffee script或SASS支持。所以，如果你决定要使用*webpack*，你可以输入`tns
    install webpack`，它将安装webpack支持，以便你可以使用webpack来构建你的应用程序。
- en: The tns create <project_name> command
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: tns create <project_name>命令
- en: This command is what we use to create a new project. This will create a new
    directory and install all the platform-independent code required to build a new
    app. The important parameters for this are `--ng`, which tells it to use the Angular
    template (which is what we are using in this book--without `--ng`, you get the
    plain JS template) and the `--appid`, which allows you to set your full app name.
    So, `tns create AwesomeApp --ng --appid com.mastertechapps.awesomeapp` will create
    a new Angular app in the `AwesomeApp` directory with the app ID, `com.mastertechapps.awesomeapp`.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令是我们用来创建新项目的。这将创建一个新的目录并安装构建新应用所需的所有平台无关代码。这个命令的重要参数是 `--ng`，它告诉它使用 Angular
    模板（这正是我们在本书中使用的内容--如果没有 `--ng`，你将得到纯 JS 模板）和 `--appid`，它允许你设置你的完整应用名称。所以，`tns
    create AwesomeApp --ng --appid com.mastertechapps.awesomeapp` 将在 `AwesomeApp`
    目录中创建一个新的 Angular 应用，应用 ID 为 `com.mastertechapps.awesomeapp`。
- en: The tns info command
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: tns info 命令
- en: 'Another useful command for checking the state of the main NativeScript component
    is `tns info`; this command will actually check your main NativeScript parts and
    tell you whether anything is out of date:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 检查主 NativeScript 组件状态的另一个有用命令是 `tns info`；这个命令实际上会检查你的主 NativeScript 部件，并告诉你是否有任何内容过时：
- en: '![](img/00032.jpeg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00032.jpeg)'
- en: As you can see from the preceding example, there is a newer version of the NativeScript
    command-line and I don't have the `ios` runtime installed.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如前例所示，NativeScript 命令行有一个更新的版本，我没有安装 `ios` 运行时。
- en: The tns platform [add|remove|clean|upgrade] <platform> command
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: tns platform [add|remove|clean|upgrade] <platform> 命令
- en: You can use the `tns platform` [`add`|`remove`|`clean`|`upgrade`] `<platform>`
    command to install, remove, or update the platform modules just like plugins.
    These are the `tns-android` and `tns-ios` modules you see listed in the prior
    `tns info` command. The application actually needs these platform-specific modules
    to be installed. By default, when you perform a `tns run`, it will automatically
    install them if they are missing. Occasionally, if the application refuses to
    build, you can use `tns platform clean <platform>`, and it will automatically
    uninstall and then re-install the platform which will reset the build process.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `tns platform` [`add`|`remove`|`clean`|`upgrade`] `<platform>` 命令来安装、删除或更新平台模块，就像插件一样。这些就是你在之前的
    `tns info` 命令中看到的 `tns-android` 和 `tns-ios` 模块。应用程序实际上需要安装这些特定平台的模块。默认情况下，当你执行
    `tns run` 时，如果它们缺失，它将自动安装。偶尔，如果应用程序拒绝构建，你可以使用 `tns platform clean <platform>`，它将自动卸载并重新安装平台，这将重置构建过程。
- en: Note that when you do a `tns platform clean/remove/update`, these will totally
    delete the `platforms/<platform>` folder.  If you have made any manual changes
    to the files in this folder (which is not recommended), those changes will be
    deleted.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，当你执行 `tns platform clean/remove/update` 时，这些操作将完全删除 `platforms/<platform>`
    文件夹。如果你对这个文件夹中的文件进行了任何手动更改（这不被推荐），这些更改将被删除。
- en: The tns test <platform> command
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: tns test <platform> 命令
- en: The `tns test <platform>` command allows you to install and/or start the testing
    framework. We will cover testing in more depth in later chapters, however, for
    the sake of completeness, we will cover the command in this section. `tns test
    init` will initialize the testing system; you will do this once per application.
    It will ask you to select a testing framework and then install your chosen testing
    framework. `tns test <platform>` will start the testing on that specific platform.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`tns test <platform>` 命令允许你安装和/或启动测试框架。我们将在后面的章节中更深入地介绍测试，然而，为了完整性，我们将在本节中介绍这个命令。`tns
    test init` 将初始化测试系统；你将为每个应用程序做一次。它将要求你选择一个测试框架，然后安装你选择的测试框架。`tns test <platform>`
    将在该特定平台上启动测试。'
- en: The tns device command
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: tns device 命令
- en: 'If you specifically need to target a device, using the `tns device` command
    will give you a list of the devices that are installed and connected to your computer.
    This will allow you to use the `--device <deviceid>` parameter on the `tns run/debug`
    commands:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要特别针对设备，使用 `tns device` 命令将给你一个已安装并连接到你的计算机的设备列表。这将允许你在 `tns run/debug`
    命令中使用 `--device <deviceid>` 参数：
- en: '![](img/00033.jpeg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00033.jpeg)'
- en: The tns doctor command
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: tns doctor 命令
- en: The `tns doctor` command checks your environment for common issues. It will
    attempt to detect whether everything is installed and configured correctly. It
    mostly works, but occasionally it will fail and state something is broken even
    when everything actually works. However, it provides a very good first indication
    of what might be wrong if your `tns run/build/debug` no longer works.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`tns doctor` 命令检查您的环境是否存在常见问题。它将尝试检测是否所有内容都已正确安装和配置。它通常可以正常工作，但偶尔会失败，并指出某些东西出了问题，即使实际上一切正常。然而，它提供了非常好的第一个迹象，如果您的
    `tns run/build/debug` 不再工作，可能会出什么问题。'
- en: The tns help command
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TNS 帮助命令
- en: If you totally forget what we have written here, you can execute `tns help` which
    will give you an overview of the different commands. Some of the parameters may
    not be listed but at this point, they do exist. In newer versions, newer parameters
    and commands may be added to `tns`, and this is the easiest way to find out about
    them.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您完全忘记了我们在这里写的内容，您可以执行 `tns help`，这将为您提供不同命令的概述。一些参数可能没有列出，但在此阶段，它们确实存在。在新版本中，新的参数和命令可能会添加到
    `tns` 中，这是了解它们的最简单方法。
- en: If, for some reason, your app does not seem to be updating properly, the easiest
    way to fix this is to uninstall the app from the device. Then, try and do a `tns
    build <platform>`, then `tns run <platform>`.  If that fails to fix it, then uninstall
    the app again, do a `tns platform clean <platform>`, and then do your `tns run`.
    Occasionally, the platform may get in a weird state, and resetting it is the only
    way to fix the problem.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果由于某种原因，您的应用程序似乎没有正确更新，最简单的方法是从设备中卸载应用程序。然后，尝试执行 `tns build <platform>`，然后
    `tns run <platform>`。如果这不能解决问题，则再次卸载应用程序，执行 `tns platform clean <platform>`，然后执行您的
    `tns run`。偶尔，平台可能会进入奇怪的状态，重置它是解决问题的唯一方法。
- en: TNS command-line cheatsheet
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TNS 命令行速查表
- en: '| **Command-line** | **Description** |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| **命令行** | **描述** |'
- en: '| `tns --version` | This returns the version of the NativeScript command. If
    you are running an older version, then you can use npm to upgrade your NativeScript
    command like this: `npm install -g nativescript`. |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| `tns --version` | 这将返回 NativeScript 命令的版本。如果您正在运行较旧版本，则可以使用 npm 升级您的 NativeScript
    命令，如下所示：`npm install -g nativescript`。|'
- en: '| `tns create <your project name>` | This creates a brand new project.The following
    are its parameters: `--ng` and `--appid`. |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| `tns create <your project name>` | 这将创建一个全新的项目。以下是其参数：`--ng` 和 `--appid`。|'
- en: '| `tns platform add <platform>` | This adds a target platform to your project.
    |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| `tns platform add <platform>` | 这会将一个目标平台添加到您的项目中。|'
- en: '| `tns platform clean <platform>` | This command is normally not needed, but
    if you are messing with the platform directory and your platform, you can remove
    and then add it back. Note that this deletes the entire platform directory. So,
    if you have made any specific customizations to your Android manifest or iOS Xcode
    project file, you should back them up before running the clean command. |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| `tns platform clean <platform>` | 此命令通常不需要，但如果您正在修改平台目录和平台，您可以删除并重新添加它。请注意，这将删除整个平台目录。因此，如果您对
    Android 清单或 iOS Xcode 项目文件进行了任何特定的自定义，请在运行清理命令之前备份它们。|'
- en: '| `tns platform update <platform>` | This is actually a pretty important command. 
    NativeScript is still a very active project that is under a lot of development.
    This command upgrades your platform code to the latest version, which typically
    eliminates bugs and adds lots of new features. Note that this should be done alongside
    an upgrade of the common JavaScript libraries, as most of the time they are in
    sync with each other. |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| `tns platform update <platform>` | 这实际上是一个非常重要的命令。NativeScript 仍然是一个非常活跃的项目，正在经历大量的开发。此命令将您的平台代码升级到最新版本，这通常消除了错误并添加了许多新功能。请注意，这应该与通用
    JavaScript 库的升级一起进行，因为它们通常彼此同步。|'
- en: '| `tns build <platform>` | This builds the application for that platform using
    theparameters: `--release`, `--for-device`, and `--key-store-*`. |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| `tns build <platform>` | 这将使用参数 `--release`、`--for-device` 和 `--key-store-*`
    为该平台构建应用程序。|'
- en: '| `tns deploy <platform>` | This builds and deploys the application to a physical
    or virtual device for that platform. |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| `tns deploy <platform>` | 这将为该平台构建和部署应用程序到物理或虚拟设备。|'
- en: '| `tns run <platform>` | This builds, deploys, and starts the application on
    a physical device or an emulator. This is the command that you will use the majority
    of the time to run your application and check out the changes. Its parameters
    are `--clean`, `--no-watch`, and `--justlaunch`. |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| `tns run <平台>` | 这将在物理设备或模拟器上构建、部署并启动应用程序。这是你将大多数时间用来运行应用程序和检查更改的命令。它的参数是
    `--clean`、`--no-watch` 和 `--justlaunch`。 |'
- en: '| `tns debug <platform>` | This builds, deploys and then starts the application
    on a physical device or an emulator in debug mode.  This is probably the second
    most used command. Its parameters are `--clean`, `--no-watch`, `--dbg-break`,
    and `--start`. |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| `tns debug <平台>` | 这将在调试模式下构建、部署并在物理设备或模拟器上启动应用程序。这可能是第二常用的命令。它的参数是 `--clean`、`--no-watch`、`--dbg-break`
    和 `--start`。 |'
- en: '| `tns plugin add <plugin>` | This allows you to add a third-party plugin or
    component. These plugins can be entirely JavaScript-based code, or they might
    also contain a compilation from the Java or Objective-C library. |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| `tns plugin add <插件>` | 这允许你添加第三方插件或组件。这些插件可以是完全基于 JavaScript 的代码，或者也可能包含从
    Java 或 Objective-C 库编译的内容。 |'
- en: '| `tns doctor` | This allows you to run diagnostic checks on your environment
    if NativeScript does not appear to be working. |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| `tns doctor` | 这允许你在 NativeScript 似乎无法正常工作时对你的环境运行诊断检查。 |'
- en: '| `tns devices` | This shows a list of connected devices for use with the `--device`
    command. |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| `tns devices` | 这显示了用于与 `--device` 命令一起使用的连接设备列表。 |'
- en: '| `tns install <dev plugin>` | This will install a development plugin (that
    is, webpack, typescript, and so on). |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| `tns install <开发插件>` | 这将安装一个开发插件（即 webpack、typescript 等）。 |'
- en: '| `tns test [ init &#124; <platform> ]` | This allows you to create or run
    any tests for your application. Using init will initialize the test framework
    for the application.  Then, you can type the platform to run the tests on that
    platform. |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| `tns test [ init &#124; <平台> ]` | 这允许你为你的应用程序创建或运行任何测试。使用 init 将初始化应用程序的测试框架。然后，你可以输入平台来在该平台上运行测试。
    |'
- en: Summary
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Now that you have an idea of the power of a command line, all you really need
    to remember is `tns debug ios` and `tns run android`; these will be your constant
    friends in our adventure. Throw in a couple of `tns plugin add` commands and then
    wrap up the application when finally finished with a `tns build`, and you are
    golden**.** However, don't forget about the rest of the commands; they all serve
    a purpose. Some of them are rarely used, but some of them are extremely helpful
    when you need them.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了命令行的强大功能，你真正需要记住的就是 `tns debug ios` 和 `tns run android`；这些将成为我们冒险中的忠实伙伴。再添加几个
    `tns plugin add` 命令，然后在最终完成时使用 `tns build` 来封装应用程序，你就成功了**。**然而，不要忘记其他命令；它们都各有用途。其中一些很少使用，但有些在你需要时非常有帮助。
- en: In [Chapter 7](part0092.html#2NNJO0-289fe2426d594f99a90e4363b2c9c34d), *Building
    the multi-track Player*, we will start exploring how to actually access the Native
    platform and integrate with plugins.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第7章](part0092.html#2NNJO0-289fe2426d594f99a90e4363b2c9c34d) *构建多轨播放器* 中，我们将开始探索如何实际访问原生平台并与插件集成。
