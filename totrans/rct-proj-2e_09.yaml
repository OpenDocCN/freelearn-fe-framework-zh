- en: '*Chapter 9*: Building a Full-Stack Social Media Application with React Native
    and Expo'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most of the projects that you've created in this book focused on displaying
    data and making it possible to navigate between pages. When we created our first
    mobile application with React Native, animations were one of the focus points,
    which is a must-have when creating a mobile application. In this chapter, we'll
    be exploring a big advantage of mobile applications, namely the ability to use
    the camera (or camera roll) from the phone.
  prefs: []
  type: TYPE_NORMAL
- en: The application we'll be creating in this chapter will follow the same patterns
    for data-heavy applications as in previous chapters. React techniques such as
    Context and Hooks are used to get data from a local API that also supports authentication,
    while React Navigation is used again to create a more advanced routing setup.
    Also, Expo is used to post images to a social feed by using the camera of the
    mobile device the application is running on.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Advanced routing with authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the camera with React Native and Expo
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Differences in styling for iOS and Android
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Project overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will build a mobile social media application that is using
    a local API to request and add posts to the social feed, including using the camera
    on the mobile device. Advanced routing with authentication is added using the
    local API and React Navigation, while Expo is used for access to the camera (roll).
  prefs: []
  type: TYPE_NORMAL
- en: The build time is 2 hours.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This chapter is using React Native version 0.64.3 and Expo SDK version 44\.
    As React Native and Expo are updated frequently, make sure that you're working
    with these versions to ensure the patterns described in this chapter are behaving
    as expected.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The project that we''ll create in this chapter builds upon an initial version
    that you can find on GitHub: [https://github.com/PacktPublishing/React-Projects-Second-Edition/tree/main/Chapter09-initial](https://github.com/PacktPublishing/React-Projects-Second-Edition/tree/main/Chapter09-initial).
    The complete source code can also be found on GitHub: [https://github.com/PacktPublishing/React-Projects-Second-Edition/tree/main/Chapter09](https://github.com/PacktPublishing/React-Projects-Second-Edition/tree/main/Chapter09).'
  prefs: []
  type: TYPE_NORMAL
- en: You need to have the Expo Go application installed on a mobile iOS or Android
    device to run the project on a physical device. Once you've downloaded the application,
    you need to create an Expo account to make the development process smoother. Make
    sure to store your account details somewhere safe, as you need these later on
    in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, you can install either Xcode or Android Studio on your computer
    to run the application on a virtual device:'
  prefs: []
  type: TYPE_NORMAL
- en: '**For iOS**: Information on how to set up your local machine to run the iOS
    simulator can be found here: [https://docs.expo.io/workflow/ios-simulator/](https://docs.expo.io/workflow/ios-simulator/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**For Android**: Information on how to set up your local machine to run the
    emulator from Android Studio can be found here: [https://docs.expo.io/workflow/android-studio-emulator/](https://docs.expo.io/workflow/android-studio-emulator/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: It's **highly recommended** to use the Expo client application to run the project
    from this chapter on a physical device. Receiving notifications is currently only
    supported on physical devices, and running the project on either the iOS simulator
    or Android Studio emulator will result in error messages.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Checking out the initial project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For this chapter, an initial application has been created with Expo using their
    CLI, as you learned in the previous chapter. To get started, you''ll need to run
    the following command in this chapter''s directory to install all of the dependencies
    and start both the server and application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This command will start Expo after installing the dependencies, and it gives
    you the ability to start your project from either the terminal or your browser.
    In the terminal, you can now either use the QR code to open the application on
    your mobile device or open the application in a simulator. In the browser, the
    Expo DevTools will be opened, which also lets you scan the QR code with your phone
    using the camera or the Expo Go application.
  prefs: []
  type: TYPE_NORMAL
- en: 'The local API from which to get the data for our application was created using
    JSON Server. We''ve already used this library before, as we used the `db.json`
    file in this repository. For this project, we have a separate `db.json` file in
    the directory for this chapter, which is loaded by the `server.js` file to create
    a local API. The local API can be started by running the following command in
    a separate terminal tab or window:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This spins up a server at `http://localhost:3000/api/` with, for example, the
    `http://localhost:3000/api/posts` endpoint, which returns an array of posts. However,
    when building mobile applications, you cannot use a `localhost` address (or any
    other address without HTTPS) for security reasons. To be able to use this endpoint
    in the React Native application, you need to find the local IP address of your
    machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'To find your local IP address, you''ll need to do the following depending on
    your operating system:'
  prefs: []
  type: TYPE_NORMAL
- en: '**For Windows**: Open the terminal (or Command Prompt) and run this command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will return a list like the one you see in the following screenshot with
    data from your local machine. In this list, you need to look for the **IPv4 Address**
    field:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.1 – Finding a local IP address in Windows'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.01_B17390.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.1 – Finding a local IP address in Windows
  prefs: []
  type: TYPE_NORMAL
- en: '**For macOS**: Open the Terminal and run this command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After running this command, the local IPv4 address of your machine gets returned,
    which looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The local IP address can be used as an alternative for `localhost`, which you
    can try by visiting the following page: `http://192.168.1.107/api/posts`. Make
    sure to replace the IP address with your own.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Our application for this chapter has already been set up and needs to know
    what URL to use for the local API. Configuration in Expo can be stored in `app.json`,
    but also in `app.config.js` if you want to store specific configuration environment
    variables. In this file, you can add the following configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding `app.config.js` file, you need to replace `LOCAL_IP_ADDRESS`
    with your own IP address that you acquired from your machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use this environment variable in our code, we use the `expo-constants` library.
    This has already been installed in the initial application for this chapter, and
    an example of how to get `apiUrl` from `app.config.js` can be seen in the `context/PostsContext.js`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The `apiUrl` constant is now used to fetch the following local API. No matter
    whether you''ve opened the application from a virtual or physical device, the
    initial application at this point should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.2 – The initial application](img/Figure_9.02_B17390.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.2 – The initial application
  prefs: []
  type: TYPE_NORMAL
- en: The `screens` directory for the initial application consists of five screens,
    which are `Posts`, `PostDetail`, `PostForm`, `Profile`, and `Login`. The `Posts`
    screen will be the initial screen that is loaded and shows a list of posts on
    which you can tap to continue to the `PostDetail` screen. For now, the `PostForm`,
    `Profile`, and `Login` screens aren't visible yet, as we'll add advanced routing
    and authentication later on in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The project structure from this React Native app is as follows, where the structure
    is similar to the projects you''ve created before in this book:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In the `assets` directory, you can find the images that are used as the application
    icon on the home screen once you've installed this application on your mobile
    device, and the image that will serve as the splash screen, which is displayed
    when you start the application. The `App.js` file is the actual entry point of
    your application and all of the components for this application are located in
    the `screens` and `components` directories. You can also find a directory called
    `context`. This directory has all the state management components for this application.
  prefs: []
  type: TYPE_NORMAL
- en: '**Note**'
  prefs: []
  type: TYPE_NORMAL
- en: If you get an error when loading the application on your local device or emulator
    stating `app.config.js`. Also, the server must be running in a separate terminal
    tab.
  prefs: []
  type: TYPE_NORMAL
- en: Configurations for your application, for example, the App Store, are placed
    in `app.json`, while `babel.config.js` holds specific Babel configurations. As
    mentioned earlier, the `app.config.js` file holds the configuration for the URL
    to the local API. There are also two files that are needed to create the local
    API. These are `db.json` and `server.js`, as described previously in this section.
  prefs: []
  type: TYPE_NORMAL
- en: Building a full-stack social media application with React Native and Expo
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The application that you're going to build in this chapter will use a local
    API to retrieve and mutate data that is available in the application. This application
    will display data from a social media feed, lets you add new posts containing
    images, and allows you to respond to these social media posts.
  prefs: []
  type: TYPE_NORMAL
- en: Advanced routing with authentication
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We've already learned how to add routing to a React Native application using
    React Navigation. The routing we added was using a stack navigator, which doesn't
    have a way to display some sort of menu or navigation bar with all the routes.
    In this section, we'll be adding a tab navigator using React Navigation to display
    a tab bar at the bottom of the application. Later on, we'll also be adding an
    authentication flow.
  prefs: []
  type: TYPE_NORMAL
- en: Adding bottom tabs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bottom tabs are common on applications for iOS, but less popular on Android
    applications. In the final section of this chapter, we'll learn more about the
    styling differences between iOS and Android. But first, we'll focus on adding
    bottom tabs to our application.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add a tab navigator, we need to complete the following actions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'React Navigation has a separate library to create a tab navigator, which we
    need to install from npm:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When the installation of `@react-navigation/bottom-tabs` is complete, make sure
    to restart Expo using the `npm start` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `App.js` file, all the routes for this application are listed, and we
    need to import the method to create a tab:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The tab navigator can be created using the `createBottomTabNavigator` method.
    These screens for the navigator must be created in a separate component inside
    the `App.js` file, where the `Posts`, `PostForm`, and `Profile` screens will be
    added to it. These screens will later become available in the bottom tabs. It''s
    important to pass the option to not show the header, as the title of the screen
    will be rendered by the parent navigator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To render the navigator in the application, we need to add it to the `return`
    statement inside the `App` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When you now navigate to any of the screens using the tab navigator, you see
    that the title in the header is always `Home` component is rendered, that on its
    own end renders the different screens. We can force the header title to be that
    of the tab that is active by using `getFocusedRouteNameFromRoute` from React Navigation
    in the `options` prop for the home screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The bottom tabs can also have an icon and a custom color when active. For this,
    we can alter the `screenOptions` and of the tab navigator. The icons for the tab
    can be imported from `@expo/vector-icons`, which is already included in Expo:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we can also change the labels of the tabs, for example, for the `PostForm`
    screen that displays the form to add a new post:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With these changes, the application now has routing with both a stack navigator
    and a tab navigator, and should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.3 – The application with bottom tabs'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.03_B17390.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.3 – The application with bottom tabs
  prefs: []
  type: TYPE_NORMAL
- en: We're now able to reach almost all the screens, with only the `Login` screen
    still hidden. This screen is added to the stack navigator and should be displayed
    when the user isn't authenticated. In the next part of this section, we'll add
    the authentication flow to handle this.
  prefs: []
  type: TYPE_NORMAL
- en: Authentication flow
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For authentication in frontend applications, most of the time, **JSON Web Tokens**
    (**JWTs**) are used, which are encrypted tokens that can easily be used to share
    user information with a backend. The JWT will be returned by the backend when
    the user is successfully authenticated and often, this token will have an expiration
    date. With every request that the user should be authenticated for, the token
    should be sent so that the backend server can determine whether the user is authenticated
    and allowed to take this action. Although JWTs can be used for authentication
    since they're encrypted, no private information should be added to them since
    the tokens should only be used to authenticate the user. Private information can
    only be sent from the server when a document with the correct JWT has been sent.
  prefs: []
  type: TYPE_NORMAL
- en: 'The mobile application we''re building in this chapter is only using `GET`
    requests to retrieve posts, but the local API also supports `POST` requests. But
    to send `POST` requests, we need to be authenticated, meaning we need to retrieve
    a token that we can send along with our request to the API. For this, we can use
    the `api/login` endpoint of the API:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Login` component can be used to log in but isn''t displayed at the moment.
    To display this component, we need to change the logic in the stack navigator
    in `App.js`. Instead of having the `App` component return the stack navigator,
    we need to create a new component in this file called `Navigator`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The preceding code block can be deleted from `App` and replaced by this new
    `Navigator` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We also need to check the value for the token in the `Navigator` component,
    as we don''t want to include the home screen when there is no token provided.
    The logic to log in is already present in the `UserContext` in the `context/UserContext.js`
    file and from the `Navigator` component, you can get the `user` object from this
    context:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we can get the `user` object from the context and add the logic to return
    the `Login` screen only when no token is present:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you now refresh the application, you can see the `Login` component being
    displayed. You can log in with a username and password combination, which is `test`
    for both values. After logging in, we want to navigate to the home screen, for
    which we need to make a change in `screens/Login.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When the value for `token` in the `user` object in the context changes, the
    user will now be navigated to the home screen. This can be shown by logging in
    with a username and password combination, which is `test` for both values. If
    you put in an incorrect value, you''ll see an error message, as visible here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.4 – Handling authentication](img/Figure_9.04_B17390.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.4 – Handling authentication
  prefs: []
  type: TYPE_NORMAL
- en: The token, however, isn't persisted as the context gets restored when you reload
    the application. For web applications, we could have used `localStorage` or `sessionStorage`.
    But for mobile applications, you'd need to use the `AsyncStorage` library from
    React Native to have persistent storage on both iOS and Android. On iOS, it will
    use native code blocks to give you the global persistent storage that `AsyncStorage`
    offers, while on devices running Android, either RocksDB- or SQLite-based storage
    will be used.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: For more complex usages, it's recommended to use an abstraction layer on top
    of `AsyncStorage` as encryption isn't supported out of the box. Also, the use
    of a key-value system can give you performance issues if you want to store a lot
    of information for your application using `AsyncStorage`. Both iOS and Android
    will have set limitations on the amount of storage each application can use.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add the persistence of the user token, we need to install the correct library
    from Expo and make changes to the context:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can install `AsyncStorage` from Expo by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To persist, the `AsyncStorage` token can be imported in the `UserContext` in
    the `context/UserContext.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the same file, it can be used to store the token in `AsyncStorage` after
    adding it to the context:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now that the token is persisted after it''s retrieved from the local API, it
    can also be retrieved from `AsyncStorage`. Therefore, we need to create a new
    function that retrieves the token and adds it to the context:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, this function needs to be called from `App.js` when the application
    first renders. That way, you''ll get the token once the application starts or
    is refreshed and the authentication is persisted:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The token is now persisted after logging in once, the application will skip
    the `Login` screen when it''s loaded, and there is a token present in `AsyncStorage`.
    However, as the token is persisted, we also need a way to log out and remove the
    token. In the `context/UserContext.js` file, the `logoutUser` function must be
    altered:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When you now go to the `Profile` screen and click the `AsyncStorage` and the
    application state, we need to navigate the user back to the `Login` screen. Navigating
    between different nested navigators is demonstrated in the next part of this section.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: To reload the application in Expo Go, you can shake the device when you're using
    an iOS or Android phone. By shaking the device, a menu with an option to reload
    the application will appear. In this menu, you must also select to enable **Fast
    refresh** to refresh the application automatically when you make changes to the
    code.
  prefs: []
  type: TYPE_NORMAL
- en: Navigating between nested routes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In React Navigation, we can nest different navigators, such as the stack navigator
    that renders when the application starts and shows either the `Login` screen or
    the tab navigator. From a nested navigator, it isn''t possible to navigate to
    the parent navigator directly, as the `navigation` object for parent navigators
    cannot be accessed. But luckily, we can use a `ref` to create a reference to the
    "highest" possible navigator. From this reference, we could then access the `navigation`
    object, which we otherwise would have accessed using the `useNavigation` Hook.
    To do this for our application, we need to change the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file called `routing.js` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This `navigationRef` can be imported in `App.js` and attached to the `NavigationContainer`
    in the `App` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `navigation` object for the stack navigator that contains the `Login` screen
    can now be accessed using this `ref` from the `Profile` screen in `screens/Profile.js`.
    Using the `reset` method, we can reset the entire `navigation` object and navigate
    to the `Login` screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With the authentication of the user handled, we can continue to add the functionalities
    to create a new post with an image in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Using the camera with React Native and Expo
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Next to displaying the posts that were already added to the local API, you can
    also add a post yourself using a `POST` request and send text and an image as
    variables. Uploading images to your React Native application can be done by either
    using the camera to take an image or selecting an image from your camera roll.
    For both use cases, there are APIs available from React Native and Expo, or numerous
    packages that are installable from npm. For this project, you'll use the `ImagePicker`
    API from Expo, which combines these functionalities into just one component.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add the feature to create new posts to your social media application, the
    following changes need to be made to create the new screen to add the post:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to install a library from Expo that allows us to access the camera
    roll on any device:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To use the camera roll, we need to request the `CAMERA_ROLL` permissions from
    the device, using the `ImagePicker` library we import in the `screens/PostForm.js`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This `uploadImage` function must then be added to the `TouchableOpacity` component
    in this same file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When you now press the button to add the post on this screen, a popup asking
    to give Expo Go permission to access your camera roll will be displayed. Also,
    note that on this page, we're not using a `View` component to wrap the screen
    but a `KeyboardAvoidingView` component. This makes sure that the components on
    this screen won't be hidden behind the keyboard when you're typing something.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can't ask the user for permission a second time; instead, you'd need to
    manually grant the permission to the camera roll. To set this permission again,
    you should go to the settings screen on iOS and select the Expo application. On
    the next screen, you're able to add permission to access the camera.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'When the user has granted permission to access the camera roll, you can call
    the `ImagePicker` API from Expo to open the camera roll. This is again an asynchronous
    function that takes some configuration fields, such as the aspect ratio. If the
    user has selected an image, the `ImagePicker` API will return an object containing
    the field URI, which is the URL to the image on the user''s device:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'As the URL to the image is now stored in the local state to the `imageUrl`
    constant, you can display this URL in an `Image` component. This `Image` component
    takes `imageUrl` as the value for the source and has been set to use a 100% `width`
    and `height`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With these changes, the `AddPost` screen should look something like the following
    screenshots, which were taken from a device running iOS. There might be slight
    differences in the appearance of this screen if you''re using the Android Studio
    emulator or a device that runs Android:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.5 – Using the camera roll'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.05_B17390.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.5 – Using the camera roll
  prefs: []
  type: TYPE_NORMAL
- en: These changes will make it possible to select a photo from your camera roll,
    but your users should also be able to upload an entirely new photo by using their
    camera. With the `ImagePicker` API from Expo, you can handle both scenarios, as
    this component also has a `launchCameraAsync` method. This asynchronous function
    will launch the camera and return it the same way as it returns a URL to the image
    from the camera roll.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add the functionality to directly use the camera on the user''s device to
    upload an image, you can make the following changes:'
  prefs: []
  type: TYPE_NORMAL
- en: 'When the user clicks on the image placeholder, the image roll will be opened
    by default. But you also want to give the user the option to use their camera.
    Therefore, a selection must be made between using the camera or the camera roll
    for uploading the image, which is a perfect use case for implementing an `ActionSheet`
    component. React Native and Expo both have an `ActionSheet` component; it''s advisable
    to use the one from Expo as it will use the native `UIActionSheet` component on
    iOS and a JavaScript implementation for Android:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After this, we need to import `ActionSheetProvider` from `@expo/react-native-action-sheet`
    in our `App.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We wrap the navigator that contains the `PostForm` screen in this same file
    so that we can use the Hook to create the action sheet in that screen component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `screens/PostForm.js` file, we can now import the Hook to create the
    action sheet from `@expo/react-native-action-sheet`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To add the action sheet, a function to open this `ActionSheet` must be added,
    and by using the `showActionSheetWithOptions` prop and the options, `ActionSheet`
    should be constructed. The options are `Camera`, `Camera roll`, and `Cancel`,
    and based on the index of the button that gets pressed, a different function should
    be called:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When the `buttonIndex` is 0, the function to ask for permission to access the
    camera roll and select an image from it is called, but we also need a function
    to ask for camera permission and use the camera:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, the `openActionSheet` function to open the action sheet must be attached
    to the `TouchableOpacity` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Pressing the image placeholder will now open up the action sheet to select
    whether you want to use the camera roll or the camera for the image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.6 – The action sheet on iOS](img/Figure_9.06_B17390.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.6 – The action sheet on iOS
  prefs: []
  type: TYPE_NORMAL
- en: Your post and image will now be displayed at the top of the `Posts` screen,
    meaning you've added the post successfully. In the final section of this chapter,
    we'll be exploring differences in styling between iOS and Android for this application.
  prefs: []
  type: TYPE_NORMAL
- en: Differences in styling for iOS and Android
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When styling your application, you might want to have different styling rules
    for iOS and Android, for example, to match the styling of the Android operating
    system better. There are multiple ways to apply different styling rules to different
    platforms; one of them is by using the `Platform` module, which can be imported
    from React Native.
  prefs: []
  type: TYPE_NORMAL
- en: 'This module has already been used in parts of this application, but let''s
    have a closer look at its workings by adding different icons to the tabs in the
    navigator tab depending on the operating system of the device:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `App.js`, we''ve already imported the `FontAwesome` icons from Expo, but
    for Android, we want to import `MaterialIcons` so they can be displayed instead.
    Also, we need to import `Platform` from React Native:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With the `Platform` module, you can check whether your mobile device is running
    iOS or Android by checking whether the value of `Platform.OS` is `ios` or `android`.
    The module must be used in the tab navigator, where we can make the distinction
    between the two platforms:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will replace the `FontAwesome` icons on Android with `MaterialIcons`.
    This icon library uses different names for the icons, so we also need to make
    the following change:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When you're running the application on a mobile device with Android, the navigator
    tab will display the icons based on Material Design. If you're using an Apple
    device, it will display different icons; you can change the `Platform.OS === 'ios'`
    condition to `Platform.OS === 'android'` to add the Material Design icons to iOS
    instead. If you don't see any changes yet, try reloading the application on your
    device.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also use the `Platform` module directly inside a `StyleSheet`, for example,
    to change the color of the `Button` component in our application. By default,
    our `Button` component has a blue background color, but let''s change it to purple
    on Android. In `components/Button.js`, we need to import the `Platform` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We use the `select` method inside the creation of `StyleSheet`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Another component that can be styled differently between iOS and Android is
    the `PostItem` component. As mentioned before, there are multiple ways to do this;
    besides using the `Platform` module, you can also use platform-specific file extensions.
    Any file that has the `*.ios.js` or `*.android.js` extension will only be rendered
    on the platform specified in the extension. You can not only apply different styling
    rules but also have changes in functionality on different platforms:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Rename the current `components/PostItem.js` file `components/PostItem.android.js`,
    and create a new file called `components/PostItem.ios.js` with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will change the order of the title and the image of a post on iOS, showing
    the title above the image. Also, we need to add the following styling to the end
    of this file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Instead of a border around this component on iOS, we want to display a shadow.
    To add this shadow, we need to alter the styles for the component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we also need to change the dimensions of the image as we added a margin
    to the `container` style:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will have the following result on iOS and Android, where the border has
    been replaced by a shadow:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.7 – Differences in styling on iOS and Android](img/Figure_9.07_B17390.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.7 – Differences in styling on iOS and Android
  prefs: []
  type: TYPE_NORMAL
- en: Depending on your type of phone you can also rename this file from `components/PostItem.ios.js`
    to `components/PostItem.android.js` to see the same changes on Android.
  prefs: []
  type: TYPE_NORMAL
- en: That's it. With these final changes, you've created a React Native application
    that will run on both Android and iOS devices and has differences in styling between
    these two platforms.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you've created a mobile social media application with React
    Native and Expo that uses a local API to send and receive data as well for authentication.
    To handle authentication, multiple types of navigators are combined. We've learned
    how to use the camera and the camera roll of a mobile device, after getting the
    permissions to use them. Also, the differences in styling between iOS and Android
    were explained.
  prefs: []
  type: TYPE_NORMAL
- en: In completing this social media application, you've completed the final React
    Native chapter of this book and are now ready to start the very last chapter.
    In the last chapter, you'll be exploring another use case of React, which is VR.
    By combining React with Three.js, you can create 360-degree 2D and 3D experiences
    by writing React components.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Expo camera: [https://docs.expo.io/versions/latest/sdk/camera/](https://docs.expo.io/versions/latest/sdk/camera/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Platform-specific code: [https://reactnative.dev/docs/platform-specific-code](https://reactnative.dev/docs/platform-specific-code)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
