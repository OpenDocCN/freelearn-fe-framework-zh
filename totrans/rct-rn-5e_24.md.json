["```js\nfunction Input(props: InputProps) {\n  return (\n    <View style={styles.textInputContainer}>\n      <Text style={styles.textInputLabel}>{props.label}</Text>\n      <TextInput style={styles.textInput} {...props} />\n    </View>\n  );\n} \n```", "```js\nexport default function CollectingTextInput() {\n  const [changedText, setChangedText] = useState(\"\");\n  const [submittedText, setSubmittedText] = useState(\"\");\n  return (\n    <View style={styles.container}>\n      <Input label=\"Basic Text Input:\" />\n      <Input label=\"Password Input:\" secureTextEntry />\n      <Input label=\"Return Key:\" returnKeyType=\"search\" />\n      <Input label=\"Placeholder Text:\" placeholder=\"Search\" />\n      <Input\n        label=\"Input Events:\"\n        onChangeText={(e) => {\n          setChangedText(e);\n        }}\n        onSubmitEditing={(e) => {\n          setSubmittedText(e.nativeEvent.text);\n        }}\n        onFocus={() => {\n          setChangedText(\"\");\n          setSubmittedText(\"\");\n        }}\n      />\n      <Text>Changed: {changedText}</Text>\n      <Text>Submitted: {submittedText}</Text>\n    </View>\n  );\n} \n```", "```js\nnpx expo install @react-native-picker/picker \n```", "```js\nexport default function Select(props: SelectProps) {\n  return (\n    <View style={styles.pickerHeight}>\n      <View style={styles.pickerContainer}>\n        <Text style={styles.pickerLabel}>{props.label}</Text>\n        <Picker style={styles.picker} {...props}>\n          {props.items.map((i) => (\n            <Picker.Item key={i.label} {...i} />\n          ))}\n        </Picker>\n      </View>\n    </View>\n  );\n} \n```", "```js\nexport default function Select(props: SelectProps) {\n  return (\n    <View>\n      <Text style={styles.pickerLabel}>{props.label}</Text>\n      <Picker {...props}>\n        {props.items.map((i) => (\n          <Picker.Item key={i.label} {...i} />\n        ))}\n      </Picker>\n    </View>\n  );\n} \n```", "```js\ncontainer: {\n    flex: 1,\n    flexDirection: \"column\",\n    backgroundColor: \"ghostwhite\",\n    justifyContent: \"center\",\n  },\n  pickersBlock: {\n    flex: 2,\n    flexDirection: \"row\",\n    justifyContent: \"space-around\",\n    alignItems: \"center\",\n  },\n  pickerHeight: {\n    height: 250,\n  }, \n```", "```js\n pickerContainer: {\n    flex: 1,\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    backgroundColor: \"white\",\n    padding: 6,\n    height: 240,\n  },\n  pickerLabel: {\n    fontSize: 14,\n    fontWeight: \"bold\",\n  },\n  picker: {\n    width: 150,\n    backgroundColor: \"white\",\n  },\n  selection: {\n    flex: 1,\n    textAlign: \"center\",\n  }, \n```", "```js\nconst sizes = [\n  { label: \"\", value: null },\n  { label: \"S\", value: \"S\" },\n  { label: \"M\", value: \"M\" },\n  { label: \"L\", value: \"L\" },\n  { label: \"XL\", value: \"XL\" },\n];\nconst garments = [\n  { label: \"\", value: null, sizes: [\"S\", \"M\", \"L\", \"XL\"] },\n  { label: \"Socks\", value: 1, sizes: [\"S\", \"L\"] },\n  { label: \"Shirt\", value: 2, sizes: [\"M\", \"XL\"] },\n  { label: \"Pants\", value: 3, sizes: [\"S\", \"L\"] },\n  { label: \"Hat\", value: 4, sizes: [\"M\", \"XL\"] },\n]; \n```", "```js\nexport default function SelectingOptions() {\n  const [availableGarments, setAvailableGarments] = useState<typeof garments>(\n    []\n  );\n  const [selectedSize, setSelectedSize] = useState<string | null>(null);\n  const [selectedGarment, setSelectedGarment] = useState<number | null>(null); \n```", "```js\n <View style={styles.container}>\n      <View style={styles.pickersBlock}>\n        <Select\n          label=\"Size\"\n          items={sizes}\n          selectedValue={selectedSize}\n          onValueChange={(size: string) => {\n            setSelectedSize(size);\n            setSelectedGarment(null);\n            setAvailableGarments(\n              garments.filter((i) => i.sizes.includes(size))\n            );\n          }}\n        />\n        <Select\n          label=\"Garment\"\n          items={availableGarments}\n          selectedValue={selectedGarment}\n          onValueChange={(garment: number) => {\n            setSelectedGarment(garment);\n          }}\n        />\n      </View>\n      <Text style={styles.selection}>{selectedSize && selectedGarment && `${selectedSize} ${garments.find((i) => i.value === selectedGarment)?.label}`}</Text>\n    </View> \n```", "```js\ntype CustomSwitchProps = SwitchProps & {\n  label: string;\n};\nexport default function CustomSwitch(props: CustomSwitchProps) {\n  return (\n    <View style={styles.customSwitch}>\n      <Text>{props.label}</Text>\n      <Switch {...props} />\n    </View>\n  );\n} \n```", "```js\nexport default function TogglingOnAndOff() {\n  const [first, setFirst] = useState(false);\n  const [second, setSecond] = useState(false);\n  return (\n    <View style={styles.container}>\n      <Switch\n        label=\"Disable Next Switch\"\n        value={first}\n        disabled={second}\n        onValueChange={setFirst}\n      />\n      <Switch\n        label=\"Disable Previous Switch\"\n        value={second}\n        disabled={first}\n        onValueChange={setSecond}\n      />\n    </View>\n  );\n} \n```", "```js\nnpx expo install @react-native-community/datetimepicker \n```", "```js\nexport default function DatePicker(props: DatePickerProps) {\n  return (\n    <View style={styles.datePickerContainer}>\n      <Text style={styles.datePickerLabel}>{props.label}</Text>\n      <DateTimePicker\n        mode=\"date\"\n        display=\"spinner\"\n        value={props.value}\n        onChange={(event, date) => {\n          if (date) {\n            props.onChange(date);\n          }\n        }}\n      />\n    </View>\n  );\n} \n```", "```js\nexport default function DatePicker({label, value, onChange }: DatePickerProps) {\n  return (\n    <View style={styles.datePickerContainer}>\n      <Text style={styles.datePickerLabel}>{label}</Text>\n      <Text\n        onPress={() => {\n          DateTimePickerAndroid.open({\n            value: value,\n            mode: \"date\",\n            onChange: (event, date) => {\n              if (event.type === \"set\" && date) {\n                onChange(date);\n              }\n            },\n          });\n        }}\n      >\n        {value.toLocaleDateString()}\n      </Text>\n    </View>\n  );\n} \n```", "```js\nexport default function CollectingDateTimeInput() {\n  const [date, setDate] = useState(new Date());\n  const [time, setTime] = useState(new Date());\n  return (\n    <View style={styles.container}>\n      <DatePicker\n        label=\"Pick a date, any date:\"\n        value={date}\n        onChange={setDate}\n      />\n      <TimePicker\n        label=\"Pick a time, any time:\"\n        value={time}\n        onChange={setTime}\n      />\n    </View>\n  );\n} \n```"]