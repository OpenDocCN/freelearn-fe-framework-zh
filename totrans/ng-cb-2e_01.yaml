- en: '1'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Winning Component Communication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you’ll master component communication in Angular. You’ll learn
    different techniques to establish communication between components and will learn
    which technique is suitable in which situation. You’ll also learn about the new
    Signals API, which is stable since Angular v17, in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the recipes we’re going to cover in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Component communication using component **@Input** and **@Output** properties
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Component communication using services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using setters for intercepting input property changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using **ngOnChanges** to intercept input property changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing a child component in a parent template via template variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing a child component in a parent component class using **ViewChild**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Standalone components and passing data through route params
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Component communication using signals
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For the recipes in this chapter, ensure your setup is complete as per the ''Technical
    Requirements'' in the ''Angular-Cookbook-2E'' GitHub repository. For setup details,
    visit: [https://github.com/PacktPublishing/Angular-Cookbook-2E/tree/main/docs/technical-requirements.md](https://github.com/PacktPublishing/Angular-Cookbook-2E/tree/main/docs/technical-requirements.md).
    The starter code for this chapter is located at [https://github.com/PacktPublishing/Angular-Cookbook-2E/tree/main/start/apps/chapter01](https://github.com/PacktPublishing/Angular-Cookbook-2E/tree/main/start/apps/chapter01).'
  prefs: []
  type: TYPE_NORMAL
- en: Component communication using component @Input and @Output properties
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You’ll start with an app with a parent component and two child components. You’ll
    then use Angular `@Input` and `@Output` decorators to establish communication
    between them using attributes and **EventEmitter**(s). The flow of the communication
    is shown in *Figure 1.1*.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18469_01_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.1: Communication flow using @Input() and @Output() properties'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The app that we are going to work with resides in `start/apps/chapter01/cc-inputs-outputs`
    inside the cloned repository:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the code repository in your code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the terminal, navigate to the code repository directory, and run the following
    command to serve the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This should open the app in a new browser tab, and you should see the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B18469_01_02.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 1.2: The cc-inputs-outputs app running on http://localhost:4200'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'So far, we have an app with `AppComponent`, `NotificationsButtonComponent`,
    and `NotificationsManagerComponent`. While `AppComponent` is the parent of the
    other two components mentioned, there is absolutely no component communication
    between them to sync the notification count value among both components. Let’s
    establish the appropriate communication between them using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll move the `notificationsCount` variable from `NotificationsManagerComponent`
    to the `AppComponent`. To do so, create a `notificationsCount` property in `app.component.ts`
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, convert the `notificationsCount` property in `notifications-manager.component.ts`
    to `@Input()`, rename it to `count`, and replace its usages as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update `notifications-manager.component.html` to use `count` instead of `notificationsCount`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, pass the `notificationsCount` property from `app.component.html` to the
    `<app-notifications-manager>` element as an input:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You could now test whether the value is being correctly passed from `app.component.html`
    to `app-notifications-manager` by assigning the value of `notificationsCount`
    in `app.component.ts` as `10`. You’ll see that in `NotificationsManagerComponent`,
    the initial value shown will be `10`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, create an `@Input()` in `notifications-button.component.ts` named `count`
    as well:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Pass `notificationsCount` to `<app-notifications-button>` as well from `app.component.html`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the `count` input in `notifications-button.component.html` with the notification
    bell icon:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You should now see the value `10` for the notification bell icon count as well.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Right now, if you change the count by adding/removing notifications from `NotificationsManagerComponent`,
    the count on the notification bell icon won’t change.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To communicate the change from `NotificationsManagerComponent` to `NotificationsButtonComponent`,
    we’ll use an Angular `@Output()` property now. Use `@Output` and `@EventEmitter`
    from `''@angular/core''` inside `notifications-manager.component.ts`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we’ll listen in `app.component.html` for the previously emitted event
    from `NotificationsManagerComponent` and update the `notificationsCount` property
    accordingly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Since we’ve listened to the `countChanged` event previously and called the
    `updateNotificationsCount` method, we need to create this method in `app.component.ts`
    and update the value of the `notificationsCount` property accordingly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to communicate between components using `@Input()` and `@Output()`
    properties, the data flow will always go *from* the **child components** *to*
    the **parent component via output event emitters** (`@Output()`), **and from the
    parent component to the child component via input bindings** (`@Input()`). In
    general, when two sibling components have to communicate, one of them has to use
    an output emitter to pass the value to the parent, which can then provide the
    new (updated) value *as an input* to the other child components. So, `NotificationsManagerComponent`
    emits the `countChanged` event. `AppComponent` (being the parent component) listens
    for the event and updates the value of `notificationsCount`, which automatically
    updates the `count` property in `NotificationsButtonComponent` because `notificationsCount`
    is being passed as the `@Input()` count to `NotificationsButtonComponent`. *Figure
    1.3* shows the entire process:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18469_01_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.3: How component communication works with inputs and outputs'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: How do Angular components communicate? [https://www.thirdrocktechkno.com/blog/how-angular-components-communicate](https://www.thirdrocktechkno.com/blog/how-angular-components-communicate)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Component Communication in Angular* by Dhananjay Kumar: [https://www.youtube.com/watch?v=I8Z8g9APaDY](https://www.youtube.com/watch?v=I8Z8g9APaDY)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Component communication using services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you’ll start with an app with a parent component and a child
    component. You’ll then use an Angular service to establish communication between
    them. We’re going to use `BehaviorSubject` and `Observable` streams to communicate
    between components and the service.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The project for this recipe resides in `start/apps/chapter01/cc-services`:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the project in Visual Studio Code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the terminal, navigate to the code repository directory, and run the following
    command to serve the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This should open the app in a new browser tab, and you should see the app as
    follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B18469_01_04.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 1.4: The cc-services app running on http://localhost:4200'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Similar to the previous recipe, we have an app with `AppComponent`, `NotificationsButtonComponent`,
    and `NotificationsManagerComponent`. `AppComponent` is the parent of the other
    two components mentioned previously, and we need to establish the appropriate
    communication between them using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'From the terminal, make sure you are at the root of the workspace, and create
    a new service called `NotificationsService` by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a `BehaviorSubject` named `count$` inside `notifications.service.ts`
    and initialize it with `0` (a `BehaviorSubject` requires an initial value):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Rename the `notificationsCount` property in `notifications-manager.component.ts`
    to `notificationsCount$` and assign the services’s `count$` property to it as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify the functions with the `NotificationsManagerComponent` to update the
    `Behavior Subject` value as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the `notificationsCount$` Observable in `notifications-manager.component.html`
    with the `async` pipe to show its value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, similarly inject `NotificationsService` in `notifications-button.component.ts`,
    create an Observable named `notificationsCount$` inside `NotificationsButtonComponent`,
    and assign the service’s `count$` Observable to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the `notificationsCount$` Observable in `notifications-button.component.html`
    with the `async` pipe:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you refresh the app now, you should be able to see the value `0` for both
    the notifications manager component and the notifications button component.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Change the initial value for the `count BehaviorSubject` to `10` and see whether
    that reflects in both components:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`BehaviorSubject` is a special type of **Observable** that requires an initial
    value and can be used by many subscribers. In this recipe, we create a `BehaviorSubject`
    to store the value of the notifications count.'
  prefs: []
  type: TYPE_NORMAL
- en: Once we have created the `BehaviorSubject` named `count$`, we inject `NotificationsService`
    in our components using the (fairly new) `inject` function and assign the `count$`
    property of the service to a property of the components. This allows us to work
    with the `BehaviorSubject` in both the `NotificationsButtonComponent` and the
    `NotificationsManagerComponent`.
  prefs: []
  type: TYPE_NORMAL
- en: Then we use the `notificationsCount$` property in the templates of both above-mentioned
    functions to be able to render the count value. Notice that we use the **async**
    pipe in the templates. This helps Angular to let the template subscribe to the
    `BehaviorSubject` when the component is rendered and to unsubscribe automatically
    when the component is destroyed.
  prefs: []
  type: TYPE_NORMAL
- en: To update the value of the `BehaviorSubject`, we use its `next` method by providing
    the new value to be set. As soon as the value of `count$` is updated, the components
    rerender the new value, thanks to RxJS and Angular’s change detection.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18469_01_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.5: How component communication works using an Angular service'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Subjects from RxJS’s official documentation: [https://www.learnrxjs.io/learn-rxjs/subjects](https://www.learnrxjs.io/learn-rxjs/subjects)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`BehaviorSubject` versus **Observable** on Stack Overflow: [https://stackoverflow.com/a/40231605](https://stackoverflow.com/a/40231605)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using setters for intercepting input property changes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to intercept changes in an `@Input` passed
    from a parent component and how to perform some action on this event. We’ll intercept
    the `vName` input passed from the `VersionControlComponent` parent component to
    the `VcLogsComponent` child component. We’ll use *setters* to generate a log whenever
    the value of `vName` changes and will show those logs in the child component.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The project for this recipe resides in `start/apps/chapter01/cc-setters`:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the project in Visual Studio Code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the terminal, navigate to the code repository directory, and run the following
    command to serve the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This should open the app in a new browser tab, and you should see the app as
    follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B18469_01_06.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 1.6: The cc-setters app running on http://localhost:4200'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We’ll first create a `logs` array in `VcLogsComponent` as follows to store
    all the logs that we’ll display later using our template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let’s modify the HTML template so we can show the logs. Modify the `vc-logs.component.html`
    file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following screenshot shows the app with the logs container:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B18469_01_07.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 1.7: The cc-setters app with logs container'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, we’ll convert the `@Input()` in `vc-logs.component.ts` to use a *getter*
    and *setter* so we can intercept the input changes. To do that, we’ll also create
    an internal property named `_vName`. The code should look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify the `setter` to create some logs now. We’ll push a new log to the `logs`
    array whenever the value of `vName` changes. For the first time, we’ll push a
    log saying `''initial version is x.x.x''`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, every time we change the version name, we need to show a different message
    saying `''version changed to x.x.x''`. *Figure 1.8* shows the final output. To
    make the required changes, let’s modify the `vName` setter as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following screenshot shows the final output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B18469_01_08.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 1.8: Final output using the setter'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: JavaScript has `getters` as functions that return a dynamically computed value.
    It also has `setters` as functions that execute some logic when the targeted property
    changes. Angular uses TypeScript, which is a superset of JavaScript and Angular’s
    `@Input()` properties can also use `getters` and `setters` since they’re basically
    properties of the provided class.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18469_01_09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.9: Diagram explaining the flow of data in the cc-setters app'
  prefs: []
  type: TYPE_NORMAL
- en: For this recipe, we use a getter and a setter for our input named `vName` so
    whenever the input changes, we use the setter function to push the new version
    to the logs list. Then we use the `logs` array in the template to render the list
    of logs on the view.
  prefs: []
  type: TYPE_NORMAL
- en: It is always a good idea to use a private variable/property along with the property
    using getters and setters. This is so that we can modify the private property
    in our component and the template only accesses the public property using the
    getter.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Angular’s official docs for setters: [https://angular.io/guide/component-interaction#intercept-input-property-changes-with-a-setter](https://angular.io/guide/component-interaction#intercept-input-property-changes-with-a-setter)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Mozilla’s official docs for a getter function: [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Mozilla’s official docs for a setter function: [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using ngOnChanges to intercept input property changes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you’ll learn how to use `ngOnChanges` to intercept changes using
    the `SimpleChanges` API. We’ll listen to a `vName` input passed from the `VersionControlComponent`
    parent component to the `VcLogsComponent` child component.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The app that we are going to work with resides in `start/apps/chapter01/cc-ng-on-changes`
    inside the cloned repository:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the code repository in your code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the terminal, navigate to the code repository directory, and run the following
    command to serve the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This should open the app in a new browser tab, and you should see the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B18469_01_10.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 1.10: The cc-ng-on-changes app running on http://localhost:4200'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We’ll first create a logs array in `VcLogsComponent` as follows to store all
    the logs that we’ll display later using our template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let’s create the HTML for where we’ll show the logs. Let’s add the `logs` container
    and log items using the following code to `vc-logs.component.html`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following screenshot shows the app with the `logs` container:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B18469_01_11.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 1.11: The cc-ng-on-changes app with logs container'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, let’s implement `ngOnChanges` using simple changes in `VcLogsComponent`
    as follows in the `vc-logs.component.ts` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We now can add a log for the initial value of the `vName` input saying `''initial
    version is x.x.x''`. We do this by checking whether it is the initial value using
    the `isFirstChange` method as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let’s handle the case where we update the version after the initial value is
    assigned. For that, we’ll add another log that says `''version changed to x.x.x''`
    using an `else` condition, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following screenshot shows the final output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B18469_01_12.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 1.12: Final output using ngOnChanges'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`ngOnChanges` is one of the many **lifecycle hooks** that Angular provides
    out of the box. It triggers even before the `ngOnInit` hook. So, you get the *initial
    values* in the first call and the *updated values* later on. Whenever any of the
    inputs change, the `ngOnChanges` callback is triggered with `SimpleChanges`. And
    in the changes, for each `@Input()`, you can get the previous value, the current
    value, and a *Boolean* representing whether this is the first change to the input
    (that is, the initial value). When we update the value of the `vName` input in
    the parent, `ngOnChanges` gets called with the updated value. Then, based on the
    situation, we add an appropriate log into our `logs` array and display it on the
    UI.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18469_01_13.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.13: How ngOnChanges pushes the new version to the logs array'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Angular lifecycle hooks: [https://angular.io/guide/lifecycle-hooks](https://angular.io/guide/lifecycle-hooks)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Using change detection hooks with `ngOnChanges`: [https://angular.io/guide/lifecycle-hooks#using-change-detection-hooks](https://angular.io/guide/lifecycle-hooks#using-change-detection-hooks)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SimpleChanges** API reference: [https://angular.io/api/core/SimpleChanges](https://angular.io/api/core/SimpleChanges
    )'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing a child component in a parent template via template variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you’ll learn how to use **Angular template reference variables**
    to access a child component in the parent component’s template. You’ll start with
    an app having `AppComponent` as the parent component and `GalleryComponent` as
    the child component. You’ll then create a template variable for the child component
    in the parent’s template to access it and perform some actions in the component
    class.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The app that we are going to work with resides in `start/apps/chapter01/cc-template-vars`
    inside the cloned repository:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the code repository in your code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the terminal, navigate to the code repository directory, and run the following
    command to serve the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This should open the app in a new browser tab, and you should see the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B18469_01_14.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 1.14: The cc-template-vars app running on http://localhost:4200'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the buttons at the top to see the respective console logs. This shows
    that we have click handlers already bound to the buttons.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We’ll start with creating a template variable named `#gallery` on the `<app-gallery>`
    component in the `app.component.html` file, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify the `addNewPicture` and `removeFirstPicture` methods in `app.component.ts`
    to accept an argument named `gallery`. This is so that we can pass the template
    variable `#gallery` to them from `app.component.html` when we click the buttons.
    The code should look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let’s pass the `#gallery` template variable from `app.component.html`
    to the click handlers for both buttons as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![](img/B18469_01_15.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 1.15: Console log on clicking the Add Picture button'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We can now implement the code for adding a new picture. For this, we’ll access
    `GalleryComponent` class’s `generateImage` method and add a new item to the `pictures`
    array as the first element. The code is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For removing the first item from the array, we’ll use the JavaScript array
    class’s `shift` method on the `pictures` array in the `GalleryComponent` class.
    The code looks as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A **template reference variable** is often a reference to a DOM element within
    a template. It can also refer to a component or directive in Angular (source:
    [https://angular.io/guide/template-reference-variables](https://angular.io/guide/template-reference-variables)).'
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we create a reference (variable) to the gallery component in
    our `app.component.html` by putting it on the `<app-gallery>` tag. And that tag
    is an Angular component in this case. After referencing it with the variable in
    our template, we pass the reference (template variable) to the functions in our
    component as the function arguments.
  prefs: []
  type: TYPE_NORMAL
- en: We then access the properties and the methods of `GalleryComponent` by using
    the passed template variable. You can see that we are able to add and remove items
    from the `pictures` array that resides in `GalleryComponent` directly from `AppComponent`
    – i.e., we’re accessing the `GalleryComponent`'s properties and methods from the
    parent (`App`) component.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Angular template variables: [https://angular.io/guide/template-reference-variables](https://angular.io/guide/template-reference-variables)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Angular template statements: [https://angular.io/guide/template-statements](https://angular.io/guide/template-statements)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing a child component in a parent component class using ViewChild
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you’ll learn how to use the `ViewChild` decorator to access
    a child component in a parent component’s class. You’ll start with an app that
    has `AppComponent` as the parent component and `GalleryComponent` as the child
    component. You’ll then create a `ViewChild` for the child component in the parent’s
    component class to access it and perform some actions.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The project that we are going to work with resides in `chapter01/start_here/cc-view-child`
    inside the cloned repository:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the code repository in your code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the terminal, navigate to the code repository directory, and run the following
    command to serve the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This should open the app in a new browser tab, and you should see something
    like the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B18469_01_16.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 1.16: The cc-view-child app running on http://localhost:4200'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the buttons at the top to see the respective console logs.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We’ll start with importing `GalleryComponent` into our `app.component.ts` file
    so we can create a `ViewChild` for it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To handle adding new pictures, we will use the gallery `ViewChild` in the `addNewPicture`
    method inside `AppComponent`. We will add a new picture to the top of that array
    using the `generateImage` method of `GalleryComponent`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To handle removing pictures, we’ll add the logic to the `removeFirstPicture`
    method inside the `AppComponent` class. We’ll use the `Array.prototype.shift`
    method on the `pictures` array to remove the first element as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`ViewChild()` is a decorator that Angular provides to access child components
    used in the template of a parent component. It configures a **view query** for
    the Angular change detector. The change detector tries to find the first element
    matching the query and assigns it to the property associated with the `ViewChild()`
    decorator. In our recipe, we create a `ViewChild` by providing `GalleryComponent`
    as the query parameter, that is, `ViewChild(GalleryComponent)`. This allows the
    Angular change detector to find the `<app-gallery>` element inside the `app.component.html`
    template, and then it assigns it to the `gallery` property within the `AppComponent`
    class. It is important to define the `gallery` property’s type as `GalleryComponent`
    so we can easily use that in the component later with all the TypeScript magic.'
  prefs: []
  type: TYPE_NORMAL
- en: The view query is executed after the `ngOnInit` lifecycle hook and before the
    `ngAfterViewInit` hook.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Angular `ViewChild`: [https://angular.io/api/core/ViewChild](https://angular.io/api/core/ViewChild)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Array’s shift method: [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Standalone components and passing data through route params
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we’ll learn how to work with **standalone components** and how
    to pass some data using route parameters to other components. Note that this is
    not limited to standalone components and can be achieved with regular components
    as well. The app’s starter code gives us a list view of some users. Our task is
    to implement the `details` view using the route parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The project that we are going to work with resides in `start/apps/cc-standalone-components`
    inside the cloned repository:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the code repository in your code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the terminal, navigate to the code repository directory, and run the following
    command to serve the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should be able to see the app as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B18469_01_17.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 1.17: Users list is shown for the app cc-standalone-components'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create the `UserDetails` component/page where we will see individual user’s
    details later. Run the following command to create it from the project root:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If asked, choose the `@nx/angular:component` `schematics` and choose the “As
    provided” action.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We’re now going to create a route for the `UserDetailsComponent`. Update the
    `app.routes.ts` file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now add `RouterModule` as an import in the `UsersComponent` as follows in the
    `users.component.ts` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a `routerLink` for each user item in the users list in `users.component.html`
    to navigate to the user details page, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `RouterModule` in the imports of the `UserDetailsComponent` class in
    the file `user-details.component.ts`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the `UserDetailsComponent` further to create an **Observable** to keep
    the currently displayed user data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now create a `constructor` function to get the `uuid` from the route parameters
    and to get and set the currently displayed user data as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, let’s update the template of the `UserDetailsComponent` in the `user-details.component.html`
    file to show the user as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![](img/B18469_01_18.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 1.18: User Details paging showing the currently selected user information'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The application’s starter template contained a `UsersComponent` configured to
    be shown on the home route (**/**). We first create the `UserDetailsComponent`
    using the Nx CLI command `nx g c user-details --standalone --directory apps/chapter01/cc-standalone-components/src/app/user-details`.
    Notice that this uses `--standalone` to let Angular know that we need a standalone
    component. We also use `--directory apps/chapter01/cc-standalone-components/src/app/user-details`;
    since we’re working with an Nx repository, we need to specify which exact directory
    we’re creating the component in.
  prefs: []
  type: TYPE_NORMAL
- en: Then we add the route for the `UserDetailsComponent` in the `app.routes.ts`
    file. Notice that we use `':uuid'` as the path for this route. This would result
    in an example route `http://localhost:4200/abc123` showing the component, and
    the value of `uuid` becomes `abc123` as the route parameter. We then import the
    `RouterModule` in both `UserDetailsComponent` and `UsersComponent` classes in
    the decorator metadata. If you’ve worked with Angular before, you may be thinking
    that this usually is imported in an `NgModule`. Well, you’re right. But since
    these are standalone components, they need to have their own imports handled since
    they’re not part of any `NgModule` themselves.
  prefs: []
  type: TYPE_NORMAL
- en: We then add a `routerLink` for each user item on the home route (in the `UsersComponent`
    template) to navigate to the user’s detail page passing the user’s ID as the `uuid`
    parameter. The final step is then to retrieve the `uuid` parameter from the `ActivatedRoute`
    service and to get the desired user using the `uuid` (the ID of the user). You’ll
    notice that we execute the `find` method on the `USERS` array to find the desired
    user by `uuid`.
  prefs: []
  type: TYPE_NORMAL
- en: In the end, we modify the `user-details.component.html` file to update the template
    to show the desired user on the view. Easy peasy!
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Standalone Components - Angular Official: [https://angular.io/guide/standalone-components](https://angular.io/guide/standalone-components)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Getting started with Angular standalone components: [https://www.youtube.com/watch?v=x5PZwb4XurU](https://www.youtube.com/watch?v=x5PZwb4XurU)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Component communication using signals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Signals** are a powerful addition in the Angular ecosystem. They are also
    more efficient than regular Angular class properties because when you change the
    value of a signal, Angular will only notify the components that are subscribed
    to that signal to run the change detection. This can improve the performance of
    your application, especially if there are many components that are subscribed
    to the signal. In this recipe, we will work with Angular Signals to achieve a
    few interesting results. We will show the number of the finished tasks against
    total tasks. And we will show a message when all tasks are completed. Let’s do
    this!'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The app that we are going to work with resides in `start/apps/chapter01/ng-cc-signals`
    inside the cloned repository. Perform the following steps to get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the code repository in your code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the terminal, navigate to the code repository directory, and run the following
    command to serve the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This should open the app a new tab in the browser should see the following
    at `http://localhost:4200`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B18469_01_19.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 1.19: ng-cc-signals app running on http://localhost:4200'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that we have the app running locally, let’s walk through the steps of the
    recipe in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The app which we are working with is a basic *tasks manager* application. However,
    we have two interesting requirements as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: We should be able to see the finished tasks count against the total tasks along
    the **Task Manager** heading *reactively*. That means that any changes to tasks
    should update it automatically.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When all tasks are completed, we should show a message to the user to congratulate
    them.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will create a `type` for the tasks and an `enum` for the filters
    because – *TypeScript for the win*. Create a new file inside the `src/app` folder
    named `task.model.ts`, and add the following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we will create our first signal for the tasks array in the `app.component.ts`
    file. Update it as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `app.component.html` should start crying now because of the change of the
    property to being a signal.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update the `app.component.html` file to use the signal via its getter function
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will implement the ability to toggle a task as completed or incomplete.
    Update the `app.component.ts` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now update the template to bind the click handler on each item to toggle its
    `completed` status. Update `app.component.html` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You should be able to mark the tasks as `completed` or not by clicking the task
    items.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We will now create a `computed` property to keep track of the finished tasks.
    Update the `app.component.ts` file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the template to show the finished tasks count. We will update the `app.component.html`
    file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should be able to see the finished tasks count and the tasks count as shown
    in the following figure:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B18469_01_20.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 1.20: Finished tasks count being displayed'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We will now add the ability to add a new task. Update the `app.component.ts
    file` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, update the `app.component.html` to bind the `addTask` method to the input
    and the `Add` button as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should be able to create new tasks as shown in the following figure:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B18469_01_21.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 1.21: Creating new tasks in the app'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We will now add the possibility of filtering items by their completed status.
    Let us add a new `signal` and a `computed` property for this in the `app.component.ts`
    file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can now use the `changeFilter` method and the `filteredTasks` computed signal
    in the template to filter the tasks. Update the `app.component.html` file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you now see the application, you can filter the tasks by **All**, **Active**,
    or **Completed**, as shown in the following figure:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B18469_01_22.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 1.22: Filtering tasks in the application by Active'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Finally, we will implement the snack bar. We want to show it whenever the user
    completes all the active tasks. Let us update the `app.component.ts` file first
    to import the `SnackbarComponent` and to create an `effect` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we can update the template to add the snackbar component in the UI. Let
    us update the `app.component.html` file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you now mark all the tasks as completed, you should see the snackbar as
    shown in the following figure:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B18469_01_23.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 1.23: Snackbar displayed on all tasks’ completion using an **effect**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Voila! Just by using the signals, we can create a fully functional (mini) tasks
    manager application in Angular. Now that you know how to work with signals in
    Angular, see the next section to understand how the recipe works.
  prefs: []
  type: TYPE_NORMAL
- en: How it works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Angular core team published a **Request for Comments** (**RFC**) about signals,
    and I was excited. Did I already say that? *I guess yes!* But it is so awesome
    that I had to mention it again. The biggest benefit of signals is the way they
    work with Angular’s change detection. Instead of Angular’s change detection looking
    for changes in the application, signals can notify the Angular change detection
    when something changes.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we started by creating a `type` for the task item and an `enum`
    for the filters. Then we used the `signal` function from `@angular/core` package
    to create a `WritableSignal` of type `Task`. This is because the `signal` function
    returns a `WritableSignal`.
  prefs: []
  type: TYPE_NORMAL
- en: At the time of authoring this book, the `signal` function is exported from the
    `@angular/core` package and signals are still in developer preview. This might
    change with future releases.
  prefs: []
  type: TYPE_NORMAL
- en: When using signals in Angular, the way to get or render the value of a signal
    is to use its getter function, which is just calling the signal as a function.
    In the recipe, you can see that we have `this.tasks()` mentioned at several places.
    We are getting the value of the tasks signal, which is an array of type `Task`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that we also use this signal the same way in our template (`app.component.html`)
    to render the count of total tasks by using `{{tasks().length}}`. And that’s all
    about how you can get the value of a signal. However, to set a signal, we need
    to use the `set` method on the signal itself. Let us observe the `filter` signal
    and the `changeFilter` method as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: Notice that to update the filter signal’s value, we use the statement `this.filter.set(filter)`.
    We could have avoided creating the `changeFilter` method and could have used statements
    like `filter.set(filters.All)` etc, in the `app.component.html` (the template)
    but I find this approach much cleaner and easier to read in both the TypeScript
    and HTML files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Apart from signals, we also used *computed properties*. These are properties
    that depend on one or more signals and will automatically update if any of those
    signals are changed. This is powerful and provides reactivity in the application
    without writing much code. If you mouseover the `finishedTasksCount` (computed)
    property in the `app.component.ts`, you will notice it says:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: This means that computed properties are not writable signals since they are
    computed automatically, and we don’t change them manually.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we worked with an `effect`. An `effect` is a piece of code – technically
    a function that triggers automatically if any of the signals used in the function’s
    code block change. This can be useful for things like making an API call, saving
    stuff to local storage, reporting an analytics event, and logging. If there is
    a side-effect in your code that you need to trigger based on signals, you can
    use an `effect` for it.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you know how the recipe works, see the next section for further reading.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Angular Signals with examples: [https://www.youtube.com/watch?v=IzMzjZXbeQk](https://www.youtube.com/watch?v=IzMzjZXbeQk)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Angular Signals official docs: [https://angular.dev/guide/signals#writable-signals](https://angular.dev/guide/signals#writable-signals)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn more on Discord
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To join the Discord community for this book – where you can share feedback,
    ask questions to the author, and learn about new releases – follow the QR code
    below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/AngularCookbook2e](Chapter_1.xhtml)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/QR_Code1388317275422265.png)'
  prefs: []
  type: TYPE_IMG
