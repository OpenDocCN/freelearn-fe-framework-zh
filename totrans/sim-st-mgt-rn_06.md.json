["```js\nnpm install mobx mobx-state-tree –save\n```", "```js\nnpm install mobx-react-lite –save\n```", "```js\nexpo start\n```", "```js\n// ./models/User.js\nimport { types } from \"mobx-state-tree\"\nexport const User = types.model({\n    name: types.string,\n    loggedIn: types.boolean,\n})\n```", "```js\nname: types.optional(types.string, \"\")\n```", "```js\nname: types.maybe(types.string)\n```", "```js\n// ./models/LikedImages\nimport { types } from \"mobx-state-tree\"\nconst LikedImageItem = types\n    .model({\n        itemId: types.number,\n        authorId: types.number,\n        timeStamp: types.string,\n        url: types.string,\n        likes: types.string,\n        conversations: types.string,\n    })\n```", "```js\nexport const LikedImages = types\n    .model({\n          imageList: types.optional             (types.array(LikedImageItem), []),\n    })\n    .actions(self => ({\n        addLikedImage(newImage) {\n            // will add images here\n        },\n        removeLikedImage(imageToRemove) {\n            // will remove images here\n        },\n    }))\n```", "```js\nimport { types, flow, applySnapshot } from \"mobx-state-tree\"\nimport { LikedImages } from \"./src/models/LikedImages\";\nimport { User } from './src/models/User';\nconst RootStore = types\n    .model({\n        users: User,\n        likedImages: LikedImages\n    })\nexport const store = RootStore.create({\n    users: {},\n    likedImages: {}\n})\n```", "```js\nconst RootStoreContext = React.createContext(null);\nexport const Provider = RootStoreContext.Provider;\nexport function useMst() {\n    const store = useContext(RootStoreContext);\n  if (store === null) {\n      throw new Error(\"Store cannot be null,        please add a context provider\");\n  }\n  return store;\n}\n```", "```js\n// App.js\n//…\nImport { Provider, store } from \"./store.js\"\n//…\nexport default function App() {\n//…\n  return (\n    <SafeAreaProvider>\n      //…\n          <Provider value={store}>\n```", "```js\nimport { useMst } from '../../store';\nexport const ListOfFavorites = ({ navigation }) => {\n  const { likedImages } = useMst();\n  //…\n  return (\n    //…\n    >\n      <FlatList\n        data={likedImages.imageList}\n        //…\n```", "```js\n// ./store.js\nconst RootStore = types\n    .model({\n        users: User,\n        likedImages: LikedImages\n    })\n    .actions(self => ({\n        async fetchImages() {\n               const response = await fetch(requestBase + \"/                 john_doe/likedImages.json\");\n             const data = await response.json();\n             return data;\n        }\n    }))\n```", "```js\n// ./store.js\nconst RootStore = types\n    //…\n    .actions(self => ({\n        setLikedImages(newImages) {\n            store.likedImages.imageList.replace(newImages)\n        },\n        async fetchImages() {\n               const response = await fetch(requestBase + \"/                 john_doe/likedImages.json\");\n             const data = await response.json();\n             store.setLikedImages(data);\n        }\n    }))\n```", "```js\n// ./store.js\nconst RootStore = types\n    //…\n    .actions(self => ({\n        afterCreate() {\n            self.fetchImages();\n        },\n        //…\n    }))\n```", "```js\n// ./store.js\n import { types, flow, applySnapshot } from \"mobx-state-tree\"\n//…\n    .actions(self => ({\n        afterCreate() {\n            self.fetchImages();\n        },\n        fetchImages: flow(function* fetchImages() {\n              const response = yield fetch(requestBase + \"/                john_doe/likedImages.json\");\n              applySnapshot(self.likedImages.imageList,                yield response.json());\n        })\n```", "```js\n.actions(self => ({\n        addLikedImage(newImage) {\n            self.imageList.unshift(newImage)\n        },\n```", "```js\n// ./surfaces/ImageDetailsModal.js\nexport const ImageDetailsModal = ({ navigation, route }) => {\n  const { likedImages } = useMst();\n//…\n<Pressable\n        onPress={() => {\n            likedImages.addLikedImage(route.params.imageItem)\n        }}\n      >\n```", "```js\n// ./components/ListOfFavorited\nimport { useMst } from '../../store';\nimport { observer } from \"mobx-react-lite\"\nexport const ListOfFavorites = observer(({ navigation }) => {\n  const { likedImages } = useMst();\n```", "```js\nImport { values } from \"mobx\"\n<FlatList\n        data={values(likedImages.imageList)}\n```", "```js\nconst RootStore = types\n //…\n    .views(self => ({\n        getIsImageLiked(itemId) {\n            return values(self.likedImages?.imageList).filter(\n                      (favoritedImg) => favoritedImg.itemId ===                        itemId\n                  ).length > 0;\n        }\n    }))\n```", "```js\n  export const ImageDetailsModal = observer(({ navigation,    route }) => {\n  const { likedImages, getIsImageLiked } = useMst();\n    const isCurrentImageLiked = getIsImageLiked       (route.params.imageItem.itemId)\n```"]