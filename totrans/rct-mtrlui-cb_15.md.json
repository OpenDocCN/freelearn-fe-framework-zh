["```js\nimport React, { Fragment, useState } from 'react';\n\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Snackbar from '@material-ui/core/Snackbar';\n\nexport default function CollectingFormInput() {\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [snackbarOpen, setSnackbarOpen] = useState(false);\n  const [snackbarMessage, setSnackbarMessage] = useState('');\n  const [first, setFirst] = useState('');\n  const [last, setLast] = useState('');\n  const [email, setEmail] = useState('');\n\n  const onDialogOpen = () => {\n    setDialogOpen(true);\n  };\n\n  const onDialogClose = () => {\n    setDialogOpen(false);\n    setFirst('');\n    setLast('');\n    setEmail('');\n  };\n\n  const onSnackbarClose = (e, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setSnackbarOpen(false);\n    setSnackbarMessage('');\n  };\n\n  const onCreate = () => {\n    setSnackbarOpen(true);\n    setSnackbarMessage(`${first} ${last} created`);\n    onDialogClose();\n  };\n\n  return (\n    <Fragment>\n      <Button color=\"primary\" onClick={onDialogOpen}>\n        New User\n      </Button>\n      <Dialog open={dialogOpen} onClose={onDialogClose}>\n        <DialogTitle>New User</DialogTitle>\n        <DialogContent>\n          <TextField\n            autoFocus\n            margin=\"normal\"\n            label=\"First Name\"\n            InputProps={{ name: 'first' }}\n            onChange={e => setFirst(e.target.value)}\n            value={first}\n            fullWidth\n          />\n          <TextField\n            margin=\"normal\"\n            label=\"Last Name\"\n            InputProps={{ name: 'last' }}\n            onChange={e => setLast(e.target.value)}\n            value={last}\n            fullWidth\n          />\n          <TextField\n            margin=\"normal\"\n            label=\"Email Address\"\n            type=\"email\"\n            InputProps={{ name: 'email' }}\n            onChange={e => setEmail(e.target.value)}\n            value={email}\n            fullWidth\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={onDialogClose} color=\"primary\">\n            Cancel\n          </Button>\n          <Button\n            variant=\"contained\"\n            onClick={onCreate}\n            color=\"primary\"\n          >\n            Create\n          </Button>\n        </DialogActions>\n      </Dialog>\n      <Snackbar\n        open={snackbarOpen}\n        message={snackbarMessage}\n        onClose={onSnackbarClose}\n        autoHideDuration={4000}\n      />\n    </Fragment>\n  );\n}\n```", "```js\n<Dialog open={dialogOpen} onClose={onDialogClose}>\n  <DialogTitle>New User</DialogTitle>\n  <DialogContent>\n    <TextField\n      autoFocus\n      margin=\"normal\"\n      label=\"First Name\"\n      InputProps={{ name: 'first' }}\n      onChange={e => setFirst(e.target.value)}\n      value={first}\n      fullWidth\n    />\n    <TextField\n      margin=\"normal\"\n      label=\"Last Name\"\n      InputProps={{ name: 'last' }}\n      onChange={e => setLast(e.target.value)}\n      value={last}\n      fullWidth\n    />\n    <TextField\n      margin=\"normal\"\n      label=\"Email Address\"\n      type=\"email\"\n      InputProps={{ name: 'email' }}\n      onChange={e => setEmail(e.target.value)}\n      value={email}\n      fullWidth\n    />\n  </DialogContent>\n  <DialogActions>\n    <Button onClick={onDialogClose} color=\"primary\">\n      Cancel\n    </Button>\n    <Button\n      variant=\"contained\"\n      onClick={onCreate}\n      color=\"primary\"\n    >\n      Create\n    </Button>\n  </DialogActions>\n</Dialog>\n```", "```js\nconst onDialogOpen = () => {\n  setDialogOpen(true);\n};\n```", "```js\nconst onDialogClose = () => {\n  setDialogOpen(false);\n  setFirst('');\n  setLast('');\n  setEmail('');\n};\n```", "```js\nconst onSnackbarClose = (e, reason) => {\n  if (reason === 'clickaway') {\n    return;\n  }\n\n  setSnackbarOpen(false);\n  setSnackbarMessage('');\n};\n```", "```js\nconst onCreate = () => {\n  setSnackbarOpen(true);\n  setSnackbarMessage(`${first} ${last} created`);\n  onDialogClose();\n};\n```", "```js\nimport React, { Fragment, useState } from 'react';\n\nimport Button from '@material-ui/core/Button';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Dialog from '@material-ui/core/Dialog';\n\nexport default function ConfirmingActions() {\n  const [open, setOpen] = useState(false);\n\n  const onShowConfirm = () => {\n    setOpen(true);\n  };\n\n  const onConfirm = () => {\n    setOpen(false);\n  };\n\n  return (\n    <Fragment>\n      <Button color=\"primary\" onClick={onShowConfirm}>\n        Confirm Action\n      </Button>\n      <Dialog\n        disableBackdropClick\n        disableEscapeKeyDown\n        maxWidth=\"xs\"\n        open={open}\n      >\n        <DialogTitle>Confirm Delete Asset</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Are you sure you want to delete the asset? This action\n            cannot be undone.\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={onDialogClose} color=\"primary\">\n            Cancel\n          </Button>\n          <Button\n            variant=\"contained\"\n            onClick={onConfirm}\n            color=\"primary\"\n          >\n            Confirm\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Fragment>\n  );\n}\n```", "```js\nimport React, { Fragment, useState } from 'react';\n\nimport Button from '@material-ui/core/Button';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Dialog from '@material-ui/core/Dialog';\n\nexport default function ConfirmingActions() {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <Fragment>\n      <Button color=\"primary\" onClick={() => setOpen(true)}>\n        Show Alert\n      </Button>\n      <Dialog open={open}>\n        <DialogContent>\n          <DialogContentText>\n            Disk space critically low. You won't be able to perform\n            any actions until you free up some space by deleting\n            assets.\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button\n            variant=\"contained\"\n            onClick={() => setOpen(false)}\n            color=\"primary\"\n          >\n            Got It\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Fragment>\n  );\n}\n```", "```js\nimport React, { Fragment, useState } from 'react';\n\nimport { makeStyles } from '@material-ui/styles';\nimport Button from '@material-ui/core/Button';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Dialog from '@material-ui/core/Dialog';\nimport Grid from '@material-ui/core/Grid';\n\nimport WarningIcon from '@material-ui/icons/Warning';\nimport CheckIcon from '@material-ui/icons/Check';\n\nconst useStyles = makeStyles(theme => ({\n  rightIcon: {\n    marginLeft: theme.spacing(1)\n  }\n}));\n\nexport default function ConfirmingActions() {\n  const classes = useStyles();\n  const [open, setOpen] = useState(false);\n\n  return (\n    <Fragment>\n      <Button color=\"primary\" onClick={() => setOpen(true)}>\n        Show Alert\n      </Button>\n      <Dialog open={open}>\n        <DialogContent>\n          <Grid container>\n            <Grid item xs={2}>\n              <WarningIcon fontSize=\"large\" color=\"secondary\" />\n            </Grid>\n            <Grid item xs={10}>\n              <DialogContentText>\n                Disk space critically low. You won't be able to\n                perform any actions until you free up some space by\n                deleting assets.\n              </DialogContentText>\n            </Grid>\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button\n            variant=\"contained\"\n            onClick={() => setOpen(false)}\n            color=\"primary\"\n          >\n            Got It\n            <CheckIcon className={classes.rightIcon} />\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Fragment>\n  );\n}\n```", "```js\nimport React, { Fragment, useState } from 'react';\n\nimport { makeStyles } from '@material-ui/styles';\nimport Button from '@material-ui/core/Button';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Dialog from '@material-ui/core/Dialog';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\n\nconst useStyles = makeStyles(theme => ({\n  dialog: { minHeight: 200 },\n  select: { width: '100%' }\n}));\n\nconst fetchItems = () =>\n  new Promise(resolve => {\n    setTimeout(() => {\n      resolve([\n        { id: 1, name: 'Item 1' },\n        { id: 2, name: 'Item 2' },\n        { id: 3, name: 'Item 3' }\n      ]);\n    }, 3000);\n  });\n\nconst MaybeLinearProgress = ({ loading, ...props }) =>\n  loading ? <LinearProgress {...props} /> : null;\n\nconst MaybeSelect = ({ loading, ...props }) =>\n  loading ? null : <Select {...props} />;\n\nexport default function APIIntegration() {\n  const classes = useStyles();\n  const [open, setOpen] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [items, setItems] = useState([]);\n  const [selected, setSelected] = useState('');\n\n  const onShowItems = () => {\n    setOpen(true);\n    setLoading(true);\n\n    fetchItems().then(items => {\n      setLoading(false);\n      setItems(items);\n    });\n  };\n\n  const onClose = () => {\n    setOpen(false);\n  };\n\n  const onSelect = e => {\n    setSelected(e.target.value);\n  };\n\n  return (\n    <Fragment>\n      <Button color=\"primary\" onClick={onShowItems}>\n        Select Item\n      </Button>\n      <Dialog\n        open={open}\n        classes={{ paper: classes.dialog }}\n        maxWidth=\"xs\"\n        fullWidth\n      >\n        <DialogTitle>Select Item</DialogTitle>\n        <DialogContent>\n          <MaybeLinearProgress loading={loading} />\n          <MaybeSelect\n            value={selected}\n            onChange={onSelect}\n            className={classes.select}\n            loading={loading}\n          >\n            <MenuItem value=\"\">\n              <em>None</em>\n            </MenuItem>\n            {items.map(item => (\n              <MenuItem key={item.id} index={item.id} value={item.id}>\n                {item.name}\n              </MenuItem>\n            ))}\n          </MaybeSelect>\n        </DialogContent>\n        <DialogActions>\n          <Button\n            disabled={loading}\n            onClick={onClose}\n            color=\"primary\"\n          >\n            Cancel\n          </Button>\n          <Button\n            disabled={loading}\n            variant=\"contained\"\n            onClick={onClose}\n            color=\"primary\"\n          >\n            Select\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Fragment>\n  );\n}\n```", "```js\nconst fetchItems = () =>\n  new Promise(resolve => {\n    setTimeout(() => {\n      resolve([\n        { id: 1, name: 'Item 1' },\n        { id: 2, name: 'Item 2' },\n        { id: 3, name: 'Item 3' }\n      ]);\n    }, 3000);\n  });\n```", "```js\nconst MaybeLinearProgress = ({ loading, ...props }) =>\n  loading ? <LinearProgress {...props} /> : null;\n\nconst MaybeSelect = ({ loading, ...props }) =>\n  loading ? null : <Select {...props} />;\n```", "```js\nconst onShowItems = () => {\n  setOpen(true);\n  setLoading(true);\n\n  fetchItems().then(items => {\n    setLoading(false);\n    setItems(items);\n  });\n};\n```", "```js\nimport React, { Fragment, useState } from 'react';\n\nimport { makeStyles } from '@material-ui/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport Slide from '@material-ui/core/Slide';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\n\nimport CloseIcon from '@material-ui/icons/Close';\n\nconst useStyles = makeStyles(theme => ({\n  appBar: {\n    position: 'relative'\n  },\n  flex: {\n    flex: 1\n  }\n}));\n\nconst Transition = props => <Slide direction=\"up\" {...props} />;\n\nconst id = (function*() {\n  let id = 0;\n  while (true) {\n    id += 1;\n    yield id;\n  }\n})();\n\nconst rowData = (name, calories, fat, carbs, protein) => ({\n  id: id.next().value,\n  name,\n  calories,\n  fat,\n  carbs,\n  protein\n});\n\nconst rows = [\n  rowData('Frozen yoghurt', 159, 6.0, 24, 4.0),\n  rowData('Ice cream sandwich', 237, 9.0, 37, 4.3),\n  rowData('Eclair', 262, 16.0, 24, 6.0),\n  rowData('Cupcake', 305, 3.7, 67, 4.3),\n  rowData('Gingerbread', 356, 16.0, 49, 3.9)\n];\n\nexport default function FullScreenDialogs() {\n  const classes = useStyles();\n  const [open, setOpen] = useState(false);\n\n  const onOpen = () => {\n    setOpen(true);\n  };\n\n  const onClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <Fragment>\n      <Button variant=\"outlined\" color=\"primary\" onClick={onOpen}>\n        Export Data\n      </Button>\n      <Dialog\n        fullScreen\n        open={open}\n        onClose={onClose}\n        TransitionComponent={Transition}\n      >\n        <AppBar className={classes.appBar}>\n          <Toolbar>\n            <IconButton\n              color=\"inherit\"\n              onClick={onClose}\n              aria-label=\"Close\"\n            >\n              <CloseIcon />\n            </IconButton>\n            <Typography\n              variant=\"h6\"\n              color=\"inherit\"\n              className={classes.flex}\n            >\n              Export Data\n            </Typography>\n            <Button color=\"inherit\" onClick={onClose}>\n              Export\n            </Button>\n          </Toolbar>\n        </AppBar>\n        <Table className={classes.table}>\n          <TableHead>\n            <TableRow>\n              <TableCell>Dessert (100g serving)</TableCell>\n              <TableCell align=\"right\">Calories</TableCell>\n              <TableCell align=\"right\">Fat (g)</TableCell>\n              <TableCell align=\"right\">Carbs (g)</TableCell>\n              <TableCell align=\"right\">Protein (g)</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows.map(row => (\n              <TableRow key={row.id}>\n                <TableCell component=\"th\" scope=\"row\">\n                  {row.name}\n                </TableCell>\n                <TableCell align=\"right\">{row.calories}</TableCell>\n                <TableCell align=\"right\">{row.fat}</TableCell>\n                <TableCell align=\"right\">{row.carbs}</TableCell>\n                <TableCell align=\"right\">{row.protein}</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </Dialog>\n    </Fragment>\n  );\n}\n```", "```js\n<Dialog\n  fullScreen\n  open={open}\n  onClose={onClose}\n  TransitionComponent={Transition}\n>\n```", "```js\n<AppBar className={classes.appBar}>\n  <Toolbar>\n    <IconButton\n      color=\"inherit\"\n      onClick={onClose}\n      aria-label=\"Close\"\n    >\n      <CloseIcon />\n    </IconButton>\n    <Typography\n      variant=\"h6\"\n      color=\"inherit\"\n      className={classes.flex}\n    >\n      Export Data\n    </Typography>\n    <Button color=\"inherit\" onClick={onClose}>\n      Export\n    </Button>\n  </Toolbar>\n</AppBar>\n```", "```js\nimport React, { Fragment, useState } from 'react';\n\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\n\nconst id = (function*() {\n  let id = 0;\n  while (true) {\n    id += 1;\n    yield id;\n  }\n})();\n\nconst rowData = (name, calories, fat, carbs, protein) => ({\n  id: id.next().value,\n  name,\n  calories,\n  fat,\n  carbs,\n  protein\n});\n\nconst rows = new Array(50)\n  .fill(null)\n  .reduce(\n    result =>\n      result.concat([\n        rowData('Frozen yoghurt', 159, 6.0, 24, 4.0),\n        rowData('Ice cream sandwich', 237, 9.0, 37, 4.3),\n        rowData('Eclair', 262, 16.0, 24, 6.0),\n        rowData('Cupcake', 305, 3.7, 67, 4.3),\n        rowData('Gingerbread', 356, 16.0, 49, 3.9)\n      ]),\n    []\n  );\n\nexport default function FullScreenDialogs() {\n  const [open, setOpen] = useState(false);\n\n  const onOpen = () => {\n    setOpen(true);\n  };\n\n  const onClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <Fragment>\n      <Button variant=\"outlined\" color=\"primary\" onClick={onOpen}>\n        Export Data\n      </Button>\n      <Dialog open={open} onClose={onClose}>\n        <DialogTitle>Desserts</DialogTitle>\n        <DialogContent>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>Dessert (100g serving)</TableCell>\n                <TableCell align=\"right\">Calories</TableCell>\n                <TableCell align=\"right\">Fat (g)</TableCell>\n                <TableCell align=\"right\">Carbs (g)</TableCell>\n                <TableCell align=\"right\">Protein (g)</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {rows.map(row => (\n                <TableRow key={row.id}>\n                  <TableCell component=\"th\" scope=\"row\">\n                    {row.name}\n                  </TableCell>\n                  <TableCell align=\"right\">{row.calories}</TableCell>\n                  <TableCell align=\"right\">{row.fat}</TableCell>\n                  <TableCell align=\"right\">{row.carbs}</TableCell>\n                  <TableCell align=\"right\">{row.protein}</TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={onClose} color=\"primary\">\n            Cancel\n          </Button>\n          <Button\n            variant=\"contained\"\n            onClick={onClose}\n            color=\"primary\"\n          >\n            Export\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Fragment>\n  );\n}\n```"]