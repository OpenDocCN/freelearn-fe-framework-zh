["```js\nconst StaticArticle = () => {\n  return (\n    <article>\n      <h3>Think in components</h3>\n      <p>It's important to change your mindset when coding with \n       React.</p>\n    </article>\n  );\n};\n```", "```js\n<article>\n  <h3>Think in components</h3>\n  <p>It's important to change your mindset when coding with React.</p>\n</article>\n```", "```js\ntype ArticleType = {\n  heading: string;\n  summary: string;\n};\nconst Article = ({ heading, summary }: ArticleType) => {\n  return (\n    <article>\n      <h3>{heading}</h3>\n      <p>{summary}</p>\n    </article>\n  );\n};\n```", "```js\n<Article\n  heading=\"Think in components\"\n  summary=\"It's important to change your mindset when coding with React.\"\n/>\n```", "```js\n<Article\n  heading=\"Define custom hooks\"\n  summary=\"Hooks are a great way to share state logic.\"\n/>\n```", "```js\nconst WeatherApplication = () => {\n  return (\n    <>\n      <Heading title=\"Weather\" />\n      <SearchBox />\n      <Notification />\n      <WeatherList />\n    </>\n  );\n};\n```", "```js\nconst SearchBox = () => {\n  return (\n    <div className=\"search-box\">\n      <input type=\"text\" />\n      <button>Search</button>\n      <div className=\"search-results\" />\n    </div>\n  );\n};\n```", "```js\ntype WeatherType = {\n  cityName: string;\n  temperature: number;\n  weather: string;\n};\nconst Weather = ({ cityName, temperature, weather }: WeatherType) => {\n  return (\n    <div>\n      <span>{cityName}</span>\n      <span>{temperature}</span>\n      <span>{weather}</span>\n    </div>\n  );\n};\n```", "```js\ntype Weather = {\n  main: string;\n  temperature: number;\n}\ntype WeatherType = {\n  name: string;\n  weather: Weather;\n}\nexport function WeatherCard({ name, weather }: WeatherType) {\n  return (\n    <div className={`weather-container ${weather.main}`}>\n      <h3>{name}</h3>\n      <div className=\"details\">\n        <p className=\"temperature\">{weather.temperature}</p>\n        <div className=\"weather\">\n          <span className=\"weather-category\">{weather.main}</span>\n        </div>\n      </div>\n    </div>\n  );\n}\n```", "```js\nconst SearchBox = () => {\n  const [query, setQuery] = useState<string>();\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value;\n    setQuery(value);\n  };\n  return (\n    <div className=\"search-box\">\n      <input type=\"text\" value={query} onChange={handleChange} />\n      <button>Search</button>\n      <div className=\"search-results\">{query}</div>\n    </div>\n  );\n};\n```", "```js\nconst [query, setQuery] = useState<string>(\"\");\n```", "```js\nconst Login = () => {\n  const [username, setUsername] = useState<string>(\"\");\n  const [password, setPassword] = useState<string>(\"\");\n  const [rememberMe, setRememberMe] = useState<boolean>(false);\n  return (\n    <div className=\"login-form\">\n      <div className=\"field\">\n        <input\n          type=\"text\"\n          value={username}\n          onChange={(event) => setUsername(event.target.value)}\n          placeholder=\"Username\"\n        />\n      </div>\n      <div className=\"field\">\n        <input\n          type=\"password\"\n          value={password}\n          onChange={(event) => setPassword(event.target.value)}\n          placeholder=\"Password\"\n        />\n      </div>\n      <div className=\"field\">\n        <label>\n          <input\n            type=\"checkbox\"\n            checked={rememberMe}\n            onChange={(event) => setRememberMe(event.target.checked)}\n          />\n          Remember Me\n        </label>\n      </div>\n      <div className=\"field\">\n        <button>Login</button>\n      </div>\n    </div>\n  );\n};\n```", "```js\nconst ArticleList = () => {\n  const [articles, setArticles] = useState<ArticleType[]>([]);\n  useEffect(() => {\n    const fetchArticles = async () => {\n      fetch(\"/api/articles\")\n        .then((res) => res.json())\n        .then((data) => setArticles(data));\n    };\n    fetchArticles();\n  }, []);\n  return (\n    <div>\n      {articles.map((article) => (\n        <Article heading={article.heading} summary={article.summary} \n         />\n      ))}\n    </div>\n  );\n};\n```", "```js\nconst ArticleDetail = ({ id }: { id: string }) => {\n  const [article, setArticle] = useState<ArticleType>();\n  useEffect(() => {\n    const fetchArticleDetail = async (id: string) => {\n      fetch(`/api/articles/${id}`)\n        .then((res) => res.json())\n        .then((data) => setArticle(data));\n    };\n    fetchArticleDetail(id);\n  }, [id]);\n  return (\n    <div>\n      {article && (\n        <Article heading={article.heading} summary={article.summary} \n         />\n      )}\n    </div>\n  );\n};\n```", "```js\nconst Timer = () => {\n  useEffect(() => {\n    const timerId = setTimeout(() => {\n      console.log(\"time is up\")\n    }, 1000);\n    return () => {\n      clearTimeout(timerId)\n    }\n  }, [])\n  return <div>Hello timer</div>\n}\n```", "```js\nuseEffect(() => {\n  const controller = new AbortController();\n  const signal = controller.signal;\n  const fetchArticleDetail = async (id: string) => {\n    fetch(`/api/articles/${id}`, { signal })\n      .then((res) => res.json())\n      .then((data) => setArticle(data));\n  };\n  fetchArticleDetail(id);\n  return () => {\n    controller.abort();\n  };\n}, [id]);\n```", "```js\nconst memoizedCallback = useCallback(callback, dependencies);\n```", "```js\nconst ArticleEditor = ({ id }: { id: string }) => {\n  const submitChange = useCallback(\n    async (summary: string) => {\n      try {\n        await fetch(`/api/articles/${id}`, {\n          method: \"POST\",\n          body: JSON.stringify({ id, summary }),\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n        });\n      } catch (error) {\n        // handling errors\n      }\n    },\n    [id]\n  );\n  return (\n    <div>\n      <ArticleForm onSubmit={submitChange} />\n    </div>\n  );\n};\n```", "```js\nconst ArticleForm = ({ onSubmit }: { onSubmit: (summary: string) => void }) => {\n  const [summary, setSummary] = useState<string>(\"\");\n  const handleSubmit = (e: FormEvent) => {\n    e.preventDefault();\n    onSubmit(summary);\n  };\n  const handleSummaryChange = useCallback(\n    (event: ChangeEvent<HTMLTextAreaElement>) => {\n      setSummary(event.target.value);\n    },\n    []\n  );\n  return (\n    <form onSubmit={handleSubmit}>\n      <h2>Edit Article</h2>\n      <textarea value={summary} onChange={handleSummaryChange} />\n      <button type=\"submit\">Save</button>\n    </form>\n  );\n};\n```", "```js\nimport React from \"react\";\nexport type ThemeContextType = {\n  theme: \"light\" | \"dark\";\n};\nexport const ThemeContext = React.createContext<ThemeContextType | undefined>(\n  undefined\n);\n```", "```js\nimport React, { useState } from \"react\";\nimport { ThemeContext, ThemeContextType } from \"./ThemeContext\";\nexport const ThemeProvider = ({ children }) => {\n  const [theme, setTheme] = useState<\"light\" | \"dark\">(\"light\");\n  const value: ThemeContextType = { theme };\n  return (\n    <ThemeContext.Provider value={value}>{children}</ThemeContext.Provider>\n  );\n};\n```", "```js\nimport React from \"react\";\nimport { ThemeProvider } from \"./ThemeProvider\";\nimport App from \"./App\";\nconst Root = () => {\n  return (\n    <ThemeProvider>\n      <App />\n    </ThemeProvider>\n  );\n};\nexport default Root;\n```", "```js\nimport React, { useContext } from \"react\";\nimport { ThemeContext } from \"./ThemeContext\";\nconst ThemedComponent = () => {\n  const context = useContext(ThemeContext);\n  const { theme } = context;\n  return <div className={theme}>Current Theme: {theme}</div>;\n};\nexport default ThemedComponent;\n```", "```js\ntype Theme = {\n  theme: \"light\" | \"dark\";\n  toggleTheme: () => void;\n};\nconst ThemeContext = React.createContext<Theme>({\n  theme: \"light\",\n  toggleTheme: () => {},\n});\n```", "```js\nconst ThemeProvider = ({ children }: { children: ReactNode }) => {\n  // default theme is light\n  const [theme, setTheme] = useState<\"light\" | \"dark\">(\"light\");\n  const toggleTheme = useCallback(() => {\n    setTheme((prevTheme) => (prevTheme === \"light\" ? \"dark\" : \"light\"));\n  }, []);\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n```", "```js\nconst Article = ({ heading, summary }: ArticleType) => {\n  const { theme, toggleTheme } = useContext(ThemeContext);\n  return (\n    <article className={theme}>\n      <h3>{heading}</h3>\n      <p>{summary}</p>\n      <button onClick={toggleTheme}>Toggle</button>\n    </article>\n  );\n};\n```", "```js\nimport InteractionContext from \"xui/interaction-context\";\nimport SecurityContext from \"xui/security-context\";\nimport LoggingContext from \"xui/logging-context\";\nconst Application = ({ children }) => {\n  const context = {}; // ... define values for context\n  //... define securityContext\n  //... define loggingContext\n  return (\n    <InteractionContext.Provider value={context}>\n      <SecurityContext.Provider value={securityContext}>\n        <LoggingContext.Provider value={loggingContext}>\n          {children}\n        </LoggingContext.Provider>\n      </SecurityContext.Provider>\n    </InteractionContext.Provider>\n  );\n};\n```"]