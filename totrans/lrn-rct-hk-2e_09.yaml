- en: '7'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '7'
- en: Using Hooks for Handling Forms
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Hooks 处理表单
- en: In the previous chapter, we learned how to use Hooks for Data Fetching and React
    Suspense for showing a fallback while waiting on the data to finish loading.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了如何使用 Hooks 进行数据获取和 React Suspense 在等待数据加载完成时显示回退。
- en: In this chapter, we are going to learn how to use Hooks to handle forms and
    form state in React. We have already implemented a form for the `CreatePost` component
    earlier. However, instead of manually handling the form submission, we can use
    **React Form Actions**, which not only make it easier to deal with form submission,
    but also allow us to use Hooks that access the form state. Additionally, we are
    going to learn about the **Optimistic Hook** to implement optimistic updates,
    that is, showing the preliminary result on the client-side before the server-side
    finishes processing.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何使用 Hooks 来处理 React 中的表单和表单状态。我们之前已经为 `CreatePost` 组件实现了一个表单。然而，我们不是手动处理表单提交，而是可以使用
    **React 表单操作**，这不仅使处理表单提交变得更容易，还允许我们使用访问表单状态的 Hooks。此外，我们还将学习如何使用 **乐观钩子** 来实现乐观更新，即在服务器端完成处理之前，在客户端显示初步结果。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Handling form submission with the **Action State Hook**
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 **Action 状态 Hook** 处理表单提交
- en: Simulating **blocking UI**
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模拟 **阻塞 UI**
- en: Avoiding blocking UI with the **Transition Hook**
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 **过渡钩子** 避免阻塞 UI
- en: Using the **Optimistic Hook** to implement optimistic updates
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 **乐观钩子** 实现乐观更新
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'A fairly recent version of Node.js should already be installed. The Node Package
    Manager (`npm`) also needs to be installed (it should come with Node.js). For
    more information on how to install Node.js, please check out their official website:
    [https://nodejs.org/](https://nodejs.org/).'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 应已安装一个相当新的 Node.js 版本。Node 包管理器 (`npm`) 也需要安装（它应该随 Node.js 一起安装）。有关如何安装 Node.js
    的更多信息，请查看他们的官方网站：[https://nodejs.org/](https://nodejs.org/).
- en: 'We are going to use **Visual Studio Code** (**VS Code**) for the guides in
    this book, but everything should work similarly in any other editor. For more
    information on how to install VS Code, please refer to their official website:
    [https://code.visualstudio.com](https://code.visualstudio.com)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的指南中，我们将使用 **Visual Studio Code** （**VS Code**）进行编写，但任何其他编辑器也应该以类似的方式工作。有关如何安装
    VS Code 的更多信息，请参阅他们的官方网站：[https://code.visualstudio.com](https://code.visualstudio.com)
- en: 'In this book, we use the following versions:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们使用以下版本：
- en: Node.js v22.14.0
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js v22.14.0
- en: '`npm` v10.9.2'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`npm` v10.9.2'
- en: Visual Studio Code v1.97.2
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio Code v1.97.2
- en: The versions mentioned in the preceding list are the ones used in the book.
    While installing a newer version should not be an issue, please note that certain
    steps might work differently on a newer version. If you are having an issue with
    the code and steps provided in this book, please try using the mentioned versions.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 上列出的版本是本书中使用的版本。虽然安装较新版本不应有问题，但请注意，某些步骤在较新版本上可能有所不同。如果您在本书提供的代码和步骤中遇到问题，请尝试使用提到的版本。
- en: 'You can find the code for this chapter on GitHub: [https://github.com/PacktPublishing/Learn-React-Hooks-Second-Edition/tree/main/Chapter07](https://github.com/PacktPublishing/Learn-React-Hooks-Second-Edition/tree/main/Chapter07)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 GitHub 上找到本章的代码：[https://github.com/PacktPublishing/Learn-React-Hooks-Second-Edition/tree/main/Chapter07](https://github.com/PacktPublishing/Learn-React-Hooks-Second-Edition/tree/main/Chapter07)
- en: It is highly recommended that you write the code on your own. Do not simply
    run the code examples that are provided with the book. It is important to write
    the code yourself to be able to learn and understand it properly. However, if
    you run into any issues, you can always refer to the code example.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 强烈建议您自己编写代码。不要简单地运行书中提供的代码示例。自己编写代码对于正确学习和理解代码非常重要。然而，如果您遇到任何问题，您始终可以参考代码示例。
- en: Handling form submission with the Action State Hook
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Action 状态 Hook 处理表单提交
- en: React 19 introduced a new feature called **Form Actions**. As we have seen in
    the previous chapters, performing data mutations in response to user actions is
    a common use case in web applications. Often, these data mutations require making
    an API request and handling the response, which means dealing with loading and
    error states. For example, when we made the `CreatePost` component, we created
    a form that inserts a new post into the database upon submission. In this case,
    **React Query** already helped us out a lot by simplifying loading and error states.
    However, with React Form Actions there is now a native way to deal with these
    states, by using the Action State Hook.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: React 19 引入了一个名为 **Form Actions** 的新功能。正如我们在前面的章节中看到的，在 Web 应用程序中，对用户操作进行数据变更是一个常见的用例。通常，这些数据变更需要发起
    API 请求并处理响应，这意味着要处理加载和错误状态。例如，当我们创建 `CreatePost` 组件时，我们创建了一个表单，在提交时将新帖子插入到数据库中。在这种情况下，**React
    Query** 已经帮助我们很多，通过简化加载和错误状态。然而，使用 React Form Actions 现在有一个原生的方法来处理这些状态，通过使用 Action
    State Hook。
- en: Introducing the Action State Hook
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍 Action State Hook
- en: 'The Action State Hook is defined as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Action State Hook 定义如下：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Let’s break it down a bit to get a better understanding of it. To define an
    Action State Hook, we need to provide at least a function to it as an argument.
    This function will be called when the form is submitted, and has the following
    signature:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们稍微分解一下，以便更好地理解它。要定义一个 Action State Hook，我们需要至少提供一个函数作为参数。这个函数将在表单提交时被调用，并且具有以下签名：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The action function gets the current state of the action as the first argument,
    and the form data (as a `FormData` object) as the second argument. Anything returned
    from the action function will be the new state of the Action State Hook.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 动作函数将动作的当前状态作为第一个参数，将表单数据（作为一个 `FormData` 对象）作为第二个参数。动作函数返回的任何内容都将成为 Action
    State Hook 的新状态。
- en: 'The `FormData` API is a web standard used to represent form fields and their
    values. It can be used to handle form submission and sent over the network, for
    example, using `fetch()`. It is an iterable object (can be iterated over with
    a `for … of` loop) and provides getter and setter functions to access the values.
    More information can be found here: [https://developer.mozilla.org/en-US/docs/Web/API/FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData).'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`FormData` API 是一个用于表示表单字段及其值的 Web 标准。它可以用来处理表单提交并通过网络发送，例如使用 `fetch()`。它是一个可迭代的对象（可以使用
    `for … of` 循环迭代）并提供 getter 和 setter 函数来访问值。更多信息可以在这里找到：[https://developer.mozilla.org/en-US/docs/Web/API/FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData)。'
- en: Additionally, it is possible to provide an `initialState` for the Action State
    Hook.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还可以为 Action State Hook 提供一个 `initialState`。
- en: The Hook then returns the current state of the action, the action itself (to
    be passed to the `<form>` element), and the `isPending` state to check whether
    the action is currently pending (while the `actionFn` is being executed).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 该 Hook 然后返回动作的当前状态，动作本身（将被传递到 `<form>` 元素），以及 `isPending` 状态，以检查动作是否当前正在挂起（当
    `actionFn` 正在执行时）。
- en: Using the Action State Hook
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Action State Hook
- en: 'Now, let’s get started refactoring the `CreatePost` component to use the Action
    State Hook:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们开始重构 `CreatePost` 组件以使用 Action State Hook：
- en: 'Copy the `Chapter06_4` folder to a new `Chapter07_1` folder by executing the
    following command:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行以下命令将 `Chapter06_4` 文件夹复制到新的 `Chapter07_1` 文件夹：
- en: '[PRE2]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Open the new `Chapter07_1` folder in VS Code.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 VS Code 中打开新的 `Chapter07_1` 文件夹。
- en: 'Edit `src/components/post/CreatePost.jsx` and import the `useActionState` function:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑 `src/components/post/CreatePost.jsx` 并导入 `useActionState` 函数：
- en: '[PRE3]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Inside the *CreatePost* component, *remove* the whole `handleSubmit` function.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 *CreatePost* 组件内部，*删除* 整个 `handleSubmit` 函数。
- en: '*Replace* it with the following Action State Hook:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*替换* 为以下 Action State Hook：'
- en: '[PRE4]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In this case, we are going to use the `state` of the action to store an error
    state. If there was an error, we will return it from the action function. Otherwise,
    we return nothing, so the error state is `undefined`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们将使用动作的 `state` 来存储错误状态。如果有错误，我们将从动作函数中返回它。否则，我们返回 nothing，因此错误状态是 `undefined`。
- en: 'Define the action function, as follows:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义动作函数，如下所示：
- en: '[PRE5]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In this case, we are not going to make use of the `currentState` passed to the
    function, but we need to define it anyway as we need the second argument to get
    the `formData`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们不会使用传递给函数的 `currentState`，但我们仍然需要定义它，因为我们需要第二个参数来获取 `formData`。
- en: 'Now, get the title and content from the form by making use of the `FormData`
    API:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，通过使用 `FormData` API 从表单中获取标题和内容：
- en: '[PRE6]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `FormData` API uses the `name` prop to identify input fields.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`FormData` API 使用 `name` 属性来识别输入字段。'
- en: 'Next, create the post object and call the mutation:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建帖子对象并调用突变：
- en: '[PRE7]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Since we now have an `async` function, we can use the `mutateAsync` method from
    the mutation to be able to `await` the response.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们现在有一个 `async` 函数，我们可以使用 mutation 中的 `mutateAsync` 方法来能够 `await` 响应。
- en: 'If there was an error, return it:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果发生错误，则返回它：
- en: '[PRE8]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We do not need to manually reset the form anymore. When using form actions,
    all uncontrolled fields in the form will be reset automatically once the form
    action function completes successfully.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不再需要手动重置表单。当使用表单操作时，一旦表单操作函数成功完成，表单中的所有未受控字段将自动重置。
- en: 'Adjust the `<form>` element to pass the `action` to it instead of an `onSubmit`
    handler:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调整 `<form>` 元素以将 `action` 传递给它而不是 `onSubmit` 处理程序：
- en: '[PRE9]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Adjust the submit button and error message, as follows:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调整提交按钮和错误信息，如下所示：
- en: '[PRE10]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Start the app, as follows:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式启动应用：
- en: '[PRE11]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: On the blog app, log in and create a new post, you will see that it works the
    same way as before, but we are now using the Action State Hook for form submission!
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在博客应用中登录并创建一篇新文章，你会看到它和之前一样工作，但现在我们正在使用 Action State Hook 来处理表单提交！
- en: After learning how to handle form submission with the Action State Hook, let’s
    move on to learning about blocking UI.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在学习如何使用 Action State Hook 处理表单提交之后，让我们继续学习关于阻塞 UI 的内容。
- en: '**Example code**'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例代码**'
- en: The example code for this section can be found in the `Chapter07/Chapter07_1`
    folder. Check the `README.md` file inside the folder for instructions on how to
    set up and run the example.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 本节示例代码可在 `Chapter07/Chapter07_1` 文件夹中找到。请检查文件夹内的 `README.md` 文件，了解如何设置和运行示例。
- en: Simulating blocking UI
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模拟阻塞 UI
- en: 'Before we learn about the Transition Hook, let’s first introduce the problem
    that it attempts to solve: blocking UI. When certain components are computationally
    intensive, rendering them may cause the whole user interface to be unresponsive.
    This can result in a bad user experience, as users cannot do anything else while
    the components are rendering.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们学习关于 Transition Hook 之前，让我们首先介绍它试图解决的问题：阻塞 UI。当某些组件计算密集时，渲染它们可能会导致整个用户界面无响应。这可能会导致糟糕的用户体验，因为用户在组件渲染时无法做任何事情。
- en: We are now going to implement a comment section in our blog to simulate blocking
    UI.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将在我们的博客中实现一个评论部分来模拟阻塞 UI。
- en: Implementing a (purposefully slow) Comment component
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现一个（故意慢的）Comment 组件
- en: We start by implementing a Comment component, which we make slow on purpose
    to simulate a computationally expensive component.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先实现一个 Comment 组件，我们故意让它变慢以模拟计算密集型组件。
- en: 'Let’s get started implementing the Comment component:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始实现 Comment 组件：
- en: 'Copy the `Chapter07_1` folder to a new `Chapter07_2` folder by executing the
    following command:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行以下命令将 `Chapter07_1` 文件夹复制到新的 `Chapter07_2` 文件夹：
- en: '[PRE12]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Open the new `Chapter07_2` folder in VS Code.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 VS Code 中打开新的 `Chapter07_2` 文件夹。
- en: Create a new `src/components/comment/` folder.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的 `src/components/comment/` 文件夹。
- en: 'Create a new `src/components/comment/Comment.jsx` file. Inside it, define and
    export a `Comment` component, which accepts `content` and `author` props:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的 `src/components/comment/Comment.jsx` 文件。在其中，定义并导出一个 `Comment` 组件，该组件接受
    `content` 和 `author` 属性：
- en: '[PRE13]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In the component, we simulate a computationally intensive operation by delaying
    the rendering by 1ms:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在组件中，我们通过延迟渲染 1ms 来模拟计算密集型操作：
- en: '[PRE14]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now, render the comment, as follows:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，按照以下方式渲染评论：
- en: '[PRE15]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Implementing a CommentList component
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现一个 CommentList 组件
- en: 'Now, we are going to implement a CommentList component, which will render 1000
    comments:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将实现一个 CommentList 组件，它将渲染 1000 条评论：
- en: Create a new `src/components/comment/CommentList.jsx` file.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的 `src/components/comment/CommentList.jsx` 文件。
- en: 'Inside it, import the `Comment` component:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在其中，导入 `Comment` 组件：
- en: '[PRE16]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Then, define and export a `CommentList` component, which generates 1000 comments:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，定义并导出一个 `CommentList` 组件，它将生成 1000 条评论：
- en: '[PRE17]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Render the comments:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 渲染评论：
- en: '[PRE18]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Implementing the CommentSection component
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现 CommentSection 组件
- en: Lastly, we are going to implement a `CommentSection` component, which will allow
    us to show/hide comments of a post by pressing a button.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将实现一个 `CommentSection` 组件，它将允许我们通过按按钮来显示/隐藏帖子的评论。
- en: 'Let’s get started implementing the `CommentSection` component:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始实现 `CommentSection` 组件：
- en: Create a new `src/components/comment/CommentSection.jsx` file
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside it, import the `useState` function from React and the `CommentList`
    component:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Next, define and export the `CommentSection` component, in which we define
    a State Hook to toggle the comment list on and off:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Then, define a `handleClick` function which will toggle the comment list:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Render a button and conditionally render the `CommentList` component:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Finally, edit `src/components/post/Post.jsx` and import the `CommentSection`
    component there:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Render it at the end of the post, as follows:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Testing out the simulated blocking UI
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now we can test the comment section and see how it causes the UI to block.
    Follow these steps:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the project, as follows:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Open the frontend in your browser by going to `http://localhost:5173/`
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on one of the **Show comments** buttons.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will see that after pressing the button, the whole UI is unresponsive. Try
    pressing one of the other **Show comments** buttons – it does not work.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As we can see, rendering computationally expensive components can cause the
    whole UI to become unresponsive. To fix this, we need to use Transitions – which
    we are going to learn about in the next section.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: '**Example code**'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: The example code for this section can be found in the `Chapter07/Chapter07_2`
    folder. Check the `README.md` file inside the folder for instructions on how to
    set up and run the example.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: Avoiding blocking UI with the Transition Hook
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Transition Hook lets you handle asynchronous operations by updating state
    without blocking the UI. This is especially useful for rendering computationally
    expensive component trees, such as rendering tabs and their (potentially complex)
    contents, or when making a client-side router. The Transition Hook has the following
    signature:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The `isPending` state can be used to handle the loading state. The `startTransition`
    function allows us to pass a function to start the transition. This function needs
    to be synchronous. While the updates (for example, setting state) triggered inside
    the functions are being executed and their effects on components evaluated, `isPending`
    will be set to `true`. This does not block the UI in any way, so other components
    still behave normally while the transition is executing.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: Using the Transition Hook
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We are now going to use the Transition Hook to avoid blocking the UI when showing
    lots of comments. Let’s get started:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy the `Chapter07_2` folder to a new `Chapter07_3` folder by executing the
    following command:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Open the new `Chapter07_3` folder in VS Code.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit `src/components/comment/CommentSection.jsx` and import the `useTransition`
    function:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Define a Transition Hook, as follows:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'In the `handleClick` function, start a transition:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Transitions have specific use cases and certain limitations. For example, do
    not use Transitions for handling controlled input state, because Transitions are
    non-blocking, but we actually want the input state to update immediately. Additionally,
    inside a Transition, all updates need to be called immediately. While it is generally
    possible to await asynchronous functions in Transitions, it is not possible to
    wait for an asynchronous request to finish *before updating the state* inside
    a Transition. If you need to wait for an asynchronous request before updating
    state, it is better to `await` it in the handler function and then start the Transition
    afterward. For more information, check out the troubleshooting guide on the React
    docs: [https://react.dev/reference/react/useTransition#troubleshooting](https://react.dev/reference/react/useTransition#troubleshooting)'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 转换有特定的用途和限制。例如，不要使用转换来处理受控输入状态，因为转换是非阻塞的，但我们实际上希望输入状态立即更新。此外，在转换内部，所有更新都需要立即调用。虽然通常可以在转换中等待异步函数，但在转换内部等待异步请求完成以更新状态是不可能的。如果您需要在更新状态之前等待异步请求，最好在处理函数中`await`它，然后启动转换。有关更多信息，请参阅React文档上的故障排除指南：[https://react.dev/reference/react/useTransition#troubleshooting](https://react.dev/reference/react/useTransition#troubleshooting)
- en: 'We can now disable the button while the transition is pending:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在可以在转换挂起时禁用按钮：
- en: '[PRE31]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Testing out the non-blocking Transition
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试非阻塞转换
- en: 'Now we can test the comment section and see how it does not block the UI anymore.
    Follow these steps:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以测试评论部分，看看它是否不再阻塞UI。按照以下步骤操作：
- en: 'Run the project, as follows:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下步骤运行项目：
- en: '[PRE32]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Open the frontend in your browser by going to `http://localhost:5173/`
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过访问`http://localhost:5173/`在浏览器中打开前端。
- en: Click on one of the **Show comments** buttons.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击一个**显示评论**按钮。
- en: You will see that after pressing the button, the rest of the UI remains responsive.
    Try pressing one of the other **Show comments** buttons – it works now and triggers
    another Transition!
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您会发现按下按钮后，UI的其余部分仍然保持响应。尝试按下其他**显示评论**按钮之一——现在它工作了，并触发了另一个转换！
- en: As we can see, by using Transitions we can keep the UI responsive while causing
    state updates that render computationally expensive components!
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，通过使用转换，我们可以在造成渲染计算密集型组件的状态更新时保持UI的响应性！
- en: '**Example code**'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例代码**'
- en: The example code for this section can be found in the `Chapter07/Chapter07_3`
    folder. Check the `README.md` file inside the folder for instructions on how to
    set up and run the example.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 本节的示例代码可以在`Chapter07/Chapter07_3`文件夹中找到。请检查文件夹内的`README.md`文件，以获取设置和运行示例的说明。
- en: Using the Optimistic Hook to implement optimistic updates
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用乐观钩子实现乐观更新
- en: 'There are two ways to handle updates/mutations:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 处理更新/变异有两种方式：
- en: Show a loading state and disable certain actions while it is loading
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示加载状态并在加载期间禁用某些操作
- en: Do an optimistic update, which immediately shows the result of the action on
    the client, while the mutation is still pending. Then, update the local state
    from the server state when the mutation finishes.
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进行乐观更新，这立即在客户端显示了操作的成果，而变异仍在进行中。然后，在变异完成后，从服务器状态更新本地状态。
- en: Depending on your use case, one or the other option will be a better fit. Usually,
    optimistic updates are great for *fast-paced* actions, such as a chat app. While
    a loading state without optimistic updates is better for critical actions, such
    as making a bank transfer.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您的使用场景，一个或另一个选项可能更适合。通常，乐观更新非常适合*快节奏*的操作，例如聊天应用。而如果没有乐观更新的加载状态，则更适合关键操作，例如银行转账。
- en: 'The Optimistic Hook has the following signature:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 乐观钩子的签名如下：
- en: '[PRE33]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: As we can see, it accepts a `state` (usually, this is a server state) and an
    `updateFn` function to process the update. Then, it returns an `optimisticState`
    and an `addOptimistic` function, which can be used to optimistically add a new
    item to the state.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，它接受一个`state`（通常这是一个服务器状态）和一个用于处理更新的`updateFn`函数。然后，它返回一个`optimisticState`和一个`addOptimistic`函数，可以用来乐观地添加一个新项目到状态中。
- en: The `updateFn` accepts two arguments, the `currentState` and the `optimisticValue`
    passed to the `addOptimistic` function. It then returns a new optimistic state.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '`updateFn`接受两个参数，即传递给`addOptimistic`函数的`currentState`和`optimisticValue`。然后，它返回一个新的乐观状态。'
- en: Implementing optimistic comment creation
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现乐观评论创建
- en: 'In our case, we are going to implement a way to create new comments using optimistic
    updates. Let’s get started doing it:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的案例中，我们将实现一种使用乐观更新创建新评论的方法。让我们开始做这件事：
- en: 'Copy the `Chapter07_3` folder to a new `Chapter07_4` folder by executing the
    following command:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行以下命令将 `Chapter07_3` 文件夹复制到新的 `Chapter07_4` 文件夹：
- en: '[PRE34]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Open the new `Chapter07_4` folder in VS Code.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 VS Code 中打开新的 `Chapter07_4` 文件夹。
- en: 'Create a new `src/components/comment/CreateComment.jsx` file and import the
    `useContext` function and the `UserContext`:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的 `src/components/comment/CreateComment.jsx` 文件并导入 `useContext` 函数和 `UserContext`：
- en: '[PRE35]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Define the `CreateComment` component, which accepts an `addComment` function:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义 `CreateComment` 组件，它接受一个 `addComment` 函数：
- en: '[PRE36]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Get the `username` of the currently logged in user from the context:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从上下文中获取当前登录用户的 `username`：
- en: '[PRE37]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Define a `submitAction`, which calls the `addComment` function:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个 `submitAction`，它调用 `addComment` 函数：
- en: '[PRE38]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Define a `<form>` and pass the `submitAction` to it:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个 `<form>` 并将其 `submitAction` 传递给它：
- en: '[PRE39]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: As we can see, it is also possible to define Form Actions without using the
    Action State Hook. However, then we only get a simple function to handle form
    submission, without any of the form state handling functionality (such as pending
    and error states).
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，也可以在不使用 Action 状态钩子的情况下定义表单操作。然而，那样我们只能得到一个简单的处理表单提交的函数，而没有任何表单状态处理功能（例如挂起和错误状态）。
- en: 'Edit `src/components/comment/CommentList.jsx` and import the following:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑 `src/components/comment/CommentList.jsx` 并导入以下内容：
- en: '[PRE40]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '*Remove* the following code:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*删除* 以下代码：'
- en: '[PRE41]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Then, define a Context Hook to get the `username` of the currently logged in
    user:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，定义一个上下文钩子来获取当前登录用户的 `username`：
- en: '[PRE42]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Next, define a State Hook to store the comments:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，定义一个状态钩子来存储评论：
- en: '[PRE43]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: To keep this section short and to the point, we only focus on optimistic updates,
    feel free to implement a way to store the comments in the database on your own
    here.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使本节简短并切中要点，我们只关注乐观更新，你可以在这里自行实现将评论存储在数据库中的方法。
- en: 'Now, define the Optimistic Hook:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，定义乐观钩子：
- en: '[PRE44]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'In the update function, we add the comment to the array with a `sending` prop
    set to `true`. We are going to use this prop later to visually distinguish optimistically
    created comments from real comments:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在更新函数中，我们将评论添加到数组中，并将 `sending` 属性设置为 `true`。我们稍后会使用这个属性来在视觉上区分乐观创建的评论和真实评论：
- en: '[PRE45]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: We also defined a temporary ID for the optimistic comments here, which we can
    use later for the `key` prop.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里还定义了一个乐观评论的临时 ID，我们稍后可以用它来作为 `key` 属性。
- en: 'Now, define the `addComment` function, which first adds the comment optimistically,
    then waits for a second, and then adds it to the “database”:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，定义 `addComment` 函数，它首先乐观地添加评论，然后等待一秒钟，然后将它添加到“数据库”中：
- en: '[PRE46]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Render the optimistic comments, as follows:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式渲染乐观评论：
- en: '[PRE47]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'If there are no comments yet, we can show an empty state:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果还没有评论，我们可以显示一个空状态：
- en: '[PRE48]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'If the user is logged in, we allow them to create new comments:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果用户已登录，我们允许他们创建新的评论：
- en: '[PRE49]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Finally, edit `src/components/comment/Comment.jsx` and add the `sending` prop
    to it:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，编辑 `src/components/comment/Comment.jsx` 并向其中添加 `sending` 属性：
- en: '[PRE50]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Then, *remove* the following code from it:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，从其中 *删除* 以下代码：
- en: '[PRE51]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Now, change the color depending on the sending prop, showing optimistically
    inserted comments in a gray color:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，根据发送属性更改颜色，以灰色显示乐观插入的评论：
- en: '[PRE52]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Run the project, as follows:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下步骤运行项目：
- en: '[PRE53]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Open the frontend in your browser by going to `http://localhost:5173/`
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过访问 `http://localhost:5173/` 在浏览器中打开前端。
- en: Log in using the form at the top, then press one of the **Show comments** buttons.
    It should show the **No comments** message.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用顶部的表单登录，然后按下一个 **显示评论** 按钮。它应该显示 **没有评论** 的消息。
- en: Type in a new comment and press **Create**.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入一条新的评论并按 **创建**。
- en: 'You will see the comment being optimistically inserted in gray color at first,
    and then after a second it will appear in black, signifying that the comment has
    been successfully stored in the “database”:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 你会看到评论最初以灰色颜色乐观地插入，然后一秒钟后它将以黑色出现，表示评论已成功存储在“数据库”中：
- en: '![Figure 7.1 – Optimistically inserting a new comment](img/B31327_07_01.png)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.1 – 乐观地插入新评论](img/B31327_07_01.png)'
- en: Figure 7.1 – Optimistically inserting a new comment
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.1 – 乐观地插入新评论
- en: '**Example code**'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例代码**'
- en: The example code for this section can be found in the `Chapter07/Chapter07_4`
    folder. Check the `README.md` file inside the folder for instructions on how to
    set up and run the example.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 本节示例代码可在`Chapter07/Chapter07_4`文件夹中找到。请检查文件夹内的`README.md`文件，了解如何设置和运行示例。
- en: As you can see, the Optimistic Hook is a great way to implement optimistic updates
    and keep your app fast and responsive!
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，乐观Hook是实现乐观更新并保持应用程序快速响应的绝佳方式！
- en: Summary
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, we first learned about handling form submission and states
    using Form Actions and the Action State Hook. Then, we simulated a potential issue
    when dealing with rendering computationally expensive components: Blocking the
    UI. Next, we solved this issue by introducing a Transition Hook to change the
    state in a non-blocking way, allowing the UI to remain responsive while the computationally
    expensive components are rendering. Finally, we learned about implementing optimistic
    updates to show results immediately while waiting for an asynchronous operation
    to finish.'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们首先学习了如何使用表单动作和动作状态Hook处理表单提交和状态。然后，我们模拟了处理渲染计算密集型组件时可能出现的潜在问题：阻塞UI。接下来，我们通过引入转换Hook以非阻塞方式更改状态来解决此问题，允许UI在计算密集型组件渲染时保持响应。最后，我们学习了如何实现乐观更新，以便在等待异步操作完成的同时立即显示结果。
- en: In the next chapter, we are going to learn how to use Hooks to implement client-side
    routing in our blog application.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何使用Hooks在我们的博客应用程序中实现客户端路由。
- en: Questions
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'To recap what we have learned in this chapter, try to answer the following
    questions:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 为了回顾本章学到的内容，尝试回答以下问题：
- en: Which feature can we use to handle form submission in React 19?
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以使用哪个特性来处理React 19中的表单提交？
- en: Which web standard is used for handling form data in React 19?
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在React 19中处理表单数据使用的网络标准是什么？
- en: Which Hook is used to handle different form states?
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个Hook用于处理不同的表单状态？
- en: What is a potential problem that can happen when rendering computationally expensive
    components?
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在渲染计算密集型组件时可能出现的潜在问题是什么？
- en: How do we avoid that problem?
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何避免这个问题？
- en: What are limitations of Transitions?
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转换的限制是什么？
- en: Which Hook can we use to display state on the client before it finished persisting
    to the server?
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以使用哪个Hook在状态完成持久化到服务器之前在客户端显示状态？
- en: Further reading
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'If you are interested in more information about the concepts that we have learned
    in this chapter, take a look at the following links:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对本章学到的概念感兴趣，想了解更多信息，请查看以下链接：
- en: '`FormData` API: [https://developer.mozilla.org/en-US/docs/Web/API/FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData)'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FormData` API：[https://developer.mozilla.org/en-US/docs/Web/API/FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData)'
- en: 'Form submission with React: [https://react.dev/reference/react-dom/components/form](https://react.dev/reference/react-dom/components/form)'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用React进行表单提交：[https://react.dev/reference/react-dom/components/form](https://react.dev/reference/react-dom/components/form)
- en: 'The Action State Hook: [https://react.dev/reference/react/useActionState](https://react.dev/reference/react/useActionState)'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动作状态Hook：[https://react.dev/reference/react/useActionState](https://react.dev/reference/react/useActionState)
- en: 'The Transition Hook: [https://react.dev/reference/react/useTransition](https://react.dev/reference/react/useTransition)'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转换Hook：[https://react.dev/reference/react/useTransition](https://react.dev/reference/react/useTransition)
- en: 'The Optimistic Hook: [https://react.dev/reference/react/useOptimistic](https://react.dev/reference/react/useOptimistic)'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 乐观Hook：[https://react.dev/reference/react/useOptimistic](https://react.dev/reference/react/useOptimistic)
- en: 'More information on optimistic updates: [https://dev.to/_jhohannes/why-your-applications-need-optimistic-updates-3h62](https://dev.to/_jhohannes/why-your-applications-need-optimistic-updates-3h62)'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于乐观更新的更多信息：[https://dev.to/_jhohannes/why-your-applications-need-optimistic-updates-3h62](https://dev.to/_jhohannes/why-your-applications-need-optimistic-updates-3h62)
- en: Learn more on Discord
  id: totrans-226
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Discord上了解更多
- en: 'To join the Discord community for this book – where you can share feedback,
    ask questions to the author, and learn about new releases – follow the QR code
    below:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 要加入本书的Discord社区——在那里你可以分享反馈，向作者提问，了解新版本——请扫描下面的二维码：
- en: '[https://packt.link/wnXT0](Chapter_07.xhtml)'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '[第07章](https://packt.link/wnXT0)'
- en: '![](img/image_%283%29.png)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_%283%29.png)'
