- en: Chapter 4. Working with Forms
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章。与表单一起工作
- en: How many times have you bought products online, from outlets such as Amazon?
    I bet the answer is a fair few times over the years—after all, you can't go into
    a bookstore late at night, peruse the books, and make a choice, without worrying
    about the store's closing time or knowing whether you will find a particular book.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 你有多少次在网上购买产品，比如亚马逊之类的？我打赌多年来你已经做了相当多的次数——毕竟，你不能在深夜去书店，浏览书籍，然后选择一本，而不担心商店的关门时间或者不知道你是否会找到一本特定的书。
- en: Building forms for online sites is arguably one of the key areas where you are
    likely to use jQuery; the key to its success is ensuring that it validates correctly,
    as a part of offering a successful user experience.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在线网站构建表单可能是您可能使用 jQuery 的关键领域之一；其成功的关键在于确保它正确验证，作为提供成功用户体验的一部分。
- en: Throughout this chapter, we're going to go back to the basics a little and delve
    into some of the techniques that we can use to validate forms, using a mix of
    HTML and jQuery validation tricks. You'll also see that creating successful forms
    does not require a lot of complex code, but that the process is equally about
    ensuring that we have considered the form's functionality requirements at the
    same time.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章节中，我们将回到基础知识，并深入探讨一些我们可以使用的技术，使用一些 HTML 和 jQuery 验证技巧来验证表单。您还将看到，创建成功的表单并不需要很多复杂的代码，而是同时确保我们考虑了表单的功能要求。
- en: 'Over the next few pages, we''ll cover a number of topics, as follows:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几页中，我们将涵盖以下几个主题：
- en: Exploring the need for validation
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探讨验证的必要性
- en: Adding form validation using regular expressions
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用正则表达式添加表单验证
- en: Developing a plugin architecture for validation
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发一个验证的插件架构
- en: Creating an advanced contact form using jQuery/AJAX
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 jQuery/AJAX 创建一个高级联系表单
- en: Developing an advanced file upload form using jQuery
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 jQuery 开发高级文件上传表单
- en: Are you ready to get started? Let's get going…before we start though, I recommend
    that you create a project folder. For the purpose of this chapter, I will assume
    that you have done so and that it is called `forms`.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好开始了吗？让我们开始吧……在我们开始之前，我建议你创建一个项目文件夹。为了本章的目的，我假设你已经这样做了，并且它被称为`forms`。
- en: Exploring the need for form validation
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探讨表单验证的必要性
- en: There are different ways to improve the usability of a form, but validation
    is arguably one of the most important facets that we should consider. How many
    times have you visited a site and filled in your details only to be told that
    there is a problem? Sounds familiar, right?
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 有不同的方法可以改进表单的可用性，但验证无疑是我们应该考虑的最重要的方面之一。你有多少次访问一个网站并填写你的详细信息，只是被告知出现了问题？听起来很熟悉，对吧？
- en: 'Validating a form is key to maintaining the consistency of information; the
    form will process the information that has been entered in order to ensure that
    it is correct. Take an example of the following scenarios:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 验证表单对于维护信息的一致性至关重要；表单将处理已输入的信息，以确保其正确性。举个例子，以下是一些情况：
- en: If an e-mail address is entered, let's make sure it has a valid format. The
    e-mail address should include a full stop and contain an `@` symbol somewhere
    in the address.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果输入了电子邮件地址，让我们确保它具有有效的格式。电子邮件地址应包含一个句点，并在地址中的某个地方包含一个`@`符号。
- en: Calling someone? What country are they in? Let's make sure that the phone number
    follows the right format, if we've already set the form to show a specific format
    of the fields for a chosen country.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打电话给某人？他们在哪个国家？如果我们已经设置表单以显示已选择国家的字段的特定格式，让我们确保电话号码遵循正确的格式。
- en: 'I think you get the idea. Now, this might sound as if we''re stating the obvious
    here (and no, I''ve not lost my marbles!), but all too often, form validation
    is left until the last stage of a project. The most common errors are usually
    due to the following reasons:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我想你已经明白了。现在，这可能听起来好像我们在这里说的是显而易见的事情（不，我没有变疯！），但往往情况是，表单验证被留到了项目的最后阶段。最常见的错误通常是由以下原因造成的：
- en: '**Formatting**: This is where an end user has entered illegal characters in
    a field, such as a space in an e-mail address.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**格式化**：这是最终用户在字段中输入非法字符的地方，比如在电子邮件地址中输入空格。'
- en: '**Missing required field**: How many times have you filled out a form, only
    to find that you''ve not entered information in a field that is obligatory?'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缺少必填字段**：你有多少次填写表单，然后发现你没有在必填字段中输入信息？'
- en: '**Matching error**: This crops up when two fields need to match but don''t;
    a classic example is a password or an email field.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**匹配错误**：当两个字段需要匹配但却不匹配时，就会出现这种情况；一个经典的例子是密码或电子邮箱字段。'
- en: At this stage, you're probably thinking that we're going to get stuck with lots
    of jQuery, to produce an all-singing, all-dancing solution, right?
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，你可能会认为我们将被大量的 jQuery 困住，以产生一个全方位的解决方案，对吧？
- en: Wrong! Sorry to disappoint you, but one mantra I always stick to is the **KISS**
    principle, or **Keep It Simple, Stupid**! This is not meant as a reflection on
    anyone, but it is just a way to make our designing lives a little easier. As I've
    mentioned in an earlier chapter, I believe mastering a technology such as jQuery
    is not always about the code we produce!
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 错了！很抱歉让你失望，但我一直坚持的口头禅是**KISS** 原则，或者**保持简单，蠢货**！这并不是对任何人的一种反映，而是为了让我们的设计生活变得更容易一些。正如我在前面的章节中提到的，我相信掌握
    jQuery 这样的技术并不总是关于我们产生的代码！
- en: 'These are the key elements in form validation:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是表单验证的关键元素：
- en: Tell the user that they have a problem on the form
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 告诉用户他们在表单上有问题
- en: Show the user where the problem is
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向用户显示问题所在的地方
- en: Show them an example of what you're expecting to see (such as an e-mail address)
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向他们展示一个你期望看到的例子（比如一个电子邮箱地址）
- en: Over the next few pages, we're going to take a look at how to add validation
    to a form and how we can reduce (or eliminate) the most common errors. We'll also
    work on the use of colors and proximity to help reinforce our messages. However,
    before we can validate, we need something to validate, so let's knock up a quick
    form as a basis for our exercises.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几页中，我们将看看如何向表单添加验证以及如何减少（或消除）最常见的错误。我们还将使用颜色和接近性来帮助加强我们的消息。然而，在我们能够进行验证之前，我们需要一些东西来验证，所以让我们快速创建一个表单作为我们练习的基础。
- en: Creating a basic form
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个基本表单
- en: As with all projects, we need to start somewhere; in this instance, we need
    a form that we can use as a basis for adding validation from the various examples
    given in this chapter.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 与所有项目一样，我们需要从某个地方开始；在这种情况下，我们需要一个可以作为在本章节中给出的各种示例中添加验证的基础的表单。
- en: 'In the code download that accompanies this book, look for and extract the `basicform.html`
    and `basicform.css` files to your project folder; when you run `basicform.html`,
    it will look something similar to this screenshot:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的代码下载中，查找并提取`basicform.html`和`basicform.css`文件到您的项目文件夹；当您运行`basicform.html`时，它将看起来类似于这个屏幕截图：
- en: '![Creating a basic form](img/image00357.jpeg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![Creating a basic form](img/image00357.jpeg)'
- en: 'If we take a look at the markup used, we can see that it isn''t anything new;
    it contains standard HTML5 fields that we will use when creating contact forms,
    such as text fields or text areas:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们看一下使用的标记，我们会发现这并不是什么新鲜事；它包含了我们在创建联系表单时将使用的标准 HTML5 字段，比如文本字段或文本区域：
- en: '[PRE0]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The key thing here though is that our example doesn''t contain any form of
    validation—it leaves us wide open to abuse of the rubbish in, rubbish out, where
    users can enter anything and we receive submitted forms that are—well—rubbish!
    In this instance, when you click on **Submit**, all that you''ll see is this screenshot:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的关键是，我们的例子没有包含任何形式的验证——它让我们完全暴露在垃圾之中，用户可以输入任何东西，我们收到的提交表单会—嗯—是垃圾！在这种情况下，当您点击**提交**时，您将只会看到这个屏幕截图：
- en: '![Creating a basic form](img/image00358.jpeg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![Creating a basic form](img/image00358.jpeg)'
- en: Not great, is it? Most desktop browsers will accept any content if the required
    tag is used without some of the validation—as long as it has something, the form
    will be submitted. The exception to this rule is Safari, which won't display the
    pop-up notice shown in our screenshot.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 不是很好，是吗？大多数桌面浏览器将在使用必填标签时接受任何内容而不进行一些验证，只要有一些东西，表单就会被提交。这个规则的例外是 Safari，它不会显示我们屏幕截图中显示的弹出通知。
- en: I'm sure we can do better, but probably not the way you're expecting to see…intrigued?
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我相信我们能做得更好，但可能不是以你期待的方式…感到好奇吗？
- en: Starting with simple HTML5 validation
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从简单的 HTML5 验证开始
- en: The great thing about form validation is that it can be easy or complex to fix—it
    all depends on the route we take to solve the issues.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 表单验证的好处在于它可以很容易或很复杂地修复—这完全取决于我们解决问题的路线。
- en: 'The key point here is that we *can* use jQuery to provide form validation;
    this is a perfectly adequate solution that will work. However, for the simple
    validation of fields, such as names or e-mail addresses, there is an alternative:
    HTML5 validation, which uses the HTML5 constraint validation API.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的关键是我们*可以*使用 jQuery 来提供表单验证；这是一个完全足够的解决方案，可以正常工作。但是，对于字段的简单验证，比如姓名或电子邮件地址，有一种替代方案：HTML5
    验证，它使用 HTML5 约束验证 API。
- en: Note
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The constraint validation API makes use of HTML5 attributes such as `min`, `step`,
    `pattern`, and `required`; these will work in most browsers, except Safari.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 约束验证 API 使用 HTML5 属性，如`min`、`step`、`pattern`和`required`；这些在大多数浏览器中都可以工作，除了 Safari。
- en: 'Before I explain the logic within this madness, let''s take a quick look at
    how to modify our demo in order to use this form of validation:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在我解释这个疯狂背后的逻辑之前，让我们快速看看如何修改我们的演示，以使用这种形式的验证：
- en: 'Open up a copy of the `basicform.html` file in your usual text editor and then
    look for this line:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你常用的文本编辑器中打开`basicform.html`文件的一个副本，然后查找这一行：
- en: '[PRE1]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We need to add the pattern that will be used as a check for our validation,
    so go ahead and modify the code as indicated:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要添加将用作验证检查的模式，所以继续按照指示修改代码：
- en: '[PRE2]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We can make a similar change to our `email` field in order to introduce HTML5
    validation; first, look for these lines:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以对`email`字段进行类似的更改，以引入 HTML5 验证；首先，查找这些行：
- en: '[PRE3]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Go ahead and modify the code as indicated, to add the HTML validation for `email`:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照指示修改代码，为`email`添加 HTML 验证：
- en: '[PRE4]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Save the file as `basicvalidation.html`; if you preview the results in a browser,
    you can immediately see a change:![Starting with simple HTML5 validation](img/image00359.jpeg)
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件保存为`basicvalidation.html`；如果你在浏览器中预览结果，你会立即看到一个变化：![从简单的 HTML5 验证开始](img/image00359.jpeg)
- en: This is already an improvement; while the text is not very user-friendly, you
    can at least see that the form expects to see a **firstname lastname** format
    and not just a forename, as indicated. A similar change will also appear in **Email**,
    when you press **Submit** to validate your form.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这已经是一个进步了；虽然文本不太用户友好，但至少你可以看到表单期望看到**名字 姓氏**的格式，而不仅仅是名字，如所示。类似的变化也将出现在**电子邮件**中，当你按下**提交**按钮验证表单时。
- en: Tip
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If you look at the code carefully, you may notice that I've switched to using
    the `required="required"` tags, in place of just `required`. Either format will
    work perfectly well—you may find that using the former tag is needed, if any inconsistencies
    appear when you are just using `required` within your browser.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你仔细查看代码，你可能会注意到我已经开始使用`required="required"`标签，代替`required`。任何格式都可以正常工作——如果在你的浏览器中只使用`required`时出现了任何不一致，你可能会发现使用前一种标签是必要的。
- en: Using HTML5 over jQuery
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 HTML5 而不是 jQuery
- en: Now that we have a form that validates the `name` and `email` fields using HTML,
    it's time to make good on my promise and explain the logic in my madness.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一个使用 HTML 验证`name`和`email`字段的表单，是时候兑现我的承诺并解释我疯狂背后的逻辑了。
- en: In some instances, it is often tempting to simply revert to using jQuery in
    order to handle everything. After all, if we're already using jQuery, why reference
    another JavaScript library?
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，通常诱人的做法是简单地回归到使用 jQuery 来处理一切。毕竟，如果我们已经在使用 jQuery，为什么要引用另一个 JavaScript
    库呢？
- en: 'This seems like a logical approach to take, if it weren''t for these two little
    issues:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不是这两个小问题，这似乎是一个合理的方法：
- en: Using jQuery adds an overhead to any site; for simple validation, this can be
    seen as an overkill with little return.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 jQuery 会增加网站的负担；对于简单的验证，这可以被视为一种过度投入，收益甚微。
- en: If JavaScript is turned off, then it may result in either the validation failing
    to operate or errors being displayed on the screen or in the console logs. This
    will affect user experience, as the visitor will struggle to submit a validated
    form, or worse, simply leave the site, which might result in lost sales.
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 JavaScript 被关闭，那么可能会导致验证无法操作或在屏幕上显示错误或在控制台日志中显示错误。这会影响用户体验，因为访问者将很难提交一个经过验证的表单，或者更糟的是，简单地离开网站，这可能会导致销售额损失。
- en: A better approach is to consider the use of HTML5 validation for standard text
    fields and reserve the use of jQuery for more complex validation, as we will see
    later in this chapter. The benefit of this approach is that we will be able to
    complete some limited validation, reduce the reliance on jQuery for standard fields,
    and use it in a more progressive enhancement capacity.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 更好的方法是考虑使用 HTML5 验证来验证标准文本字段，并将 jQuery 的使用保留给更复杂的验证，正如我们将在本章后面看到的那样。这种方法的好处在于，我们将能够完成一些有限的验证，减少对标准字段的
    jQuery 依赖，并以更渐进的增强方式使用它。
- en: With this in mind, let's move on and start taking a look at the use of jQuery
    to enhance our forms further and provide more complex validation checks.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到这一点，让我们继续，开始查看使用 jQuery 来进一步增强我们的表单，并提供更复杂的验证检查。
- en: Using jQuery to validate our forms
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 jQuery 验证我们的表单
- en: 'In some cases, using HTML5 validation will fail if an input type used is not
    supported in that browser; this is the time when we need to revert to using JavaScript,
    or in this case jQuery. For example, date as an input type is not supported in
    IE11, as shown here:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，如果浏览器不支持所使用的输入类型，则使用 HTML5 验证将失败；这是我们需要回到使用 JavaScript 或在本例中使用 jQuery
    的时候。例如，日期作为输入类型在 IE11 中不受支持，如下所示：
- en: '[PRE5]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This is how the preceding code will be rendered:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是上述代码将如何呈现的方式：
- en: '[PRE6]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The trouble is that with the type falling back to text, browsers will not correctly
    validate the field. To get around this, we can implement a check using jQuery—we
    can then start adding some basic validation using jQuery, which will override
    the existing native HTML checks made in the browser.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 麻烦的是，由于类型回退为文本，浏览器将无法正确验证字段。为了解决这个问题，我们可以使用 jQuery 实现一个检查——然后我们可以开始使用 jQuery
    添加一些基本的验证，这些验证将覆盖浏览器中进行的现有本地 HTML 检查。
- en: 'Let''s take a look at how we can achieve some of this in practice, with a simple
    demo, as follows:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看如何在实践中实现其中一些，通过一个简单的演示，如下所示：
- en: Open up a copy of `basicform.html` from the code download that accompanies this
    book.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开本书附带的代码下载中的`basicform.html`的副本。
- en: 'In the `<head>` section, add a link to jQuery along with a link to your validation
    script:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`<head>`部分，添加一个指向 jQuery 的链接以及一个指向您的验证脚本的链接：
- en: '[PRE7]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Save the file as `basicvalidation.html`. In a new file, add the following code—this
    performs a check to ensure that you are only validating the `email` field:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件保存为`basicvalidation.html`。在一个新文件中，添加以下代码——这将执行一个检查，以确保您只验证了`email`字段：
- en: '[PRE8]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Immediately before the closing `}`), let''s add in the first of two functions;
    the first function will add a CSS hook to allow you to style in the event of a
    success or failure:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在关闭`}`之前的位置，让我们加入两个函数中的第一个；第一个函数将添加一个 CSS 钩子，允许您在成功或失败的情况下进行样式设置：
- en: '[PRE9]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The keen-eyed amongst you will spot the addition of two CSS style classes;
    we need to allow this in our style sheet, so go ahead and add these lines of code:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你们中间敏锐的人会注意到添加了两个 CSS 样式类；我们需要在样式表中允许这个，所以继续添加这些代码行：
- en: '[PRE10]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We can now add the section function, which alters the default message shown
    by the browser to show custom text:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以添加部分函数，该函数将更改浏览器显示的默认消息以显示自定义文本：
- en: '[PRE11]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Save the file as `basicvalidation.js`. If you now run the demo in a browser,
    you can see that the text changes to green when you add a valid e-mail address,
    as shown in this screenshot:![Using jQuery to validate our forms](img/image00360.jpeg)
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件保存为`basicvalidation.js`。如果您现在在浏览器中运行演示，您将看到当您添加一个有效的电子邮件地址时，文本会变为绿色，如下图所示：![使用
    jQuery 验证我们的表单](img/image00360.jpeg)
- en: If you refresh your browser session and don't add an e-mail address this time,
    you will get a custom e-mail address error instead of the standard one offered
    by the browser, as shown in the following screenshot:![Using jQuery to validate
    our forms](img/image00361.jpeg)
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您刷新浏览器会话，并且这次不添加电子邮件地址，您将收到一个定制的电子邮件地址错误，而不是浏览器提供的标准错误，如下面的屏幕截图所示：![使用 jQuery
    验证我们的表单](img/image00361.jpeg)
- en: Using a little jQuery in this instance has allowed us to customize the message
    shown—it's a good opportunity to use something a little more user friendly. Note
    that the default messages given with standard HTML5 validation can be easily…improved!
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下使用一点 jQuery 让我们能够自定义显示的消息——这是一个使用更友好的东西的好机会。请注意，默认消息与标准 HTML5 验证一起给出的消息可以很容易地……改进！
- en: Now that you've seen how we can change the message that is displayed, let's
    focus on improving the checks that the form makes. The standard HTML5 validation
    checks won't be enough for all instances; we can improve them by incorporating
    checks using regex checks in our code.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经看到了我们如何改变显示的消息，让我们专注于改进表单所进行的检查。标准的 HTML5 验证检查对于所有情况都不够；我们可以通过在我们的代码中引入正则表达式检查来改进它们。
- en: Validating forms using regex statements
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用正则表达式语句验证表单
- en: So far, you've seen some of the commands that you can use to validate forms
    using jQuery, and how you can limit your checks to specific field types (such
    as e-mail addresses) or override the error message displayed on the screen.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你已经看到了可以使用 jQuery 来验证表单的一些命令，以及如何将你的检查限制在特定的字段类型（如电子邮件地址）上，或者覆盖屏幕上显示的错误消息。
- en: 'The code will fail though, without some form of validation template that we
    can use to check—the keen-eyed amongst you may have noticed this, in our `basicvalidation.html`
    demo:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果我们没有一种可以用来检查的验证模板，代码将失败——你们中的敏锐的人可能已经在我们的`basicvalidation.html`演示中注意到了这一点：
- en: '[PRE12]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The `pattern` variable is used to define a regular expression or a **regex**
    statement. Put simply, these are single-line statements that dictate how we should
    validate any entries in our form. These are not unique to query though; they can
    be equally used with any scripting language, such as PHP or plain JavaScript.
    Let''s take a moment to look at a few examples in order to see how this one works:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`pattern`变量用于定义正则表达式或**regex**语句。简单地说，这些是单行语句，指示我们应该如何验证表单中的任何条目。这些并不是专门用于查询的；它们同样适用于任何脚本语言，比如
    PHP 或纯 JavaScript。让我们花一点时间看一些示例，以了解这个是如何工作的：'
- en: '`[^ @]*`: This statement matches any number of characters that are not an `@`
    sign or a space'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[^ @]*`: 这个语句匹配任意数量的不是`@`符号或空格的字符。'
- en: '`@`: This is a literal'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@`: 这是一个字面值'
- en: '`\.`: This is a literal'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`\.`: 这是一个字面值'
- en: '`[a-zA-Z]`: This statement indicates any letter, either uppercase or lowercase'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[a-zA-Z]`: 这个语句表示任意字母，无论是大写还是小写'
- en: '`[a-zA-Z]{2,}`: This statement indicates any combination of two or more letters'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[a-zA-Z]{2,}`: 这个语句表示两个或更多字母的任意组合。'
- en: If we put this together, the pattern regex translates to an e-mail with any
    set of characters, save for an `@` sign, followed by an `@` sign that is then
    followed by any set of characters except an `@` sign, a period, and finally at
    least two letters.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们把这些放在一起，模式正则表达式转换为一个电子邮件，其中包含任意一组字符，除了一个`@`符号，紧接着是一个`@`符号，然后是任意一组字符，除了一个`@`符号，一个句点，最后至少两个字母。
- en: Okay, enough of theory; let's get coding! We're going to work through a couple
    of examples, starting with a modification to the e-mail validation and then develop
    the code to cover validation for website addresses.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，理论已经够了；让我们开始编码吧！我们将通过一些示例进行工作，首先修改电子邮件验证，然后开发代码以覆盖网站地址的验证。
- en: Creating a regex validation function for e-mails
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个用于电子邮件的正则表达式验证函数
- en: We've already used a regex to validate our `email` address field; while this
    works well, the code can be improved. I'm not a keen fan of including the validation
    check within the event handler; I prefer to hive it off into a separate function.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经使用了一个正则表达式来验证我们的`email`地址字段；虽然这样做效果很好，但代码可以改进。我不喜欢在事件处理程序中包含验证检查；我更喜欢将其分离到一个独立的函数中。
- en: 'Thankfully, this is easy to correct; let''s sort that out now by performing
    the following steps:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，这很容易纠正；让我们现在执行以下步骤来解决这个问题：
- en: 'We''ll start by opening up the `basicvalidation.js` file and adding a helper
    function immediately before the `emailField.on()` event handler:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先打开`basicvalidation.js`文件，并在`emailField.on()`事件处理程序之前立即添加一个辅助函数：
- en: '[PRE13]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This function handles the validation of e-mail addresses; in order to use it,
    we need to modify the `emailField.on()` handler, as follows:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此函数处理电子邮件地址的验证；为了使用它，我们需要修改`emailField.on()`处理程序，如下所示：
- en: '[PRE14]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: If we save our work and then preview it in a browser, we should see no difference
    in the validation process; we can be rest assured that the validation check process
    has now been separated into an independent function.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们保存我们的工作然后在浏览器中预览它，我们应该在验证过程中看不到任何差异；我们可以放心地说，验证检查过程现在已经被分离为一个独立的函数。
- en: Taking it further for URL validation
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进一步进行 URL 验证
- en: 'Using the same principles as those used in the previous example, we can develop
    a similar validation check for the `urlField` field. It''s a simple matter of
    duplicating the two `emailField.on()` event handlers and the `checkEmail` function
    to produce something similar to what is shown in the following screenshot:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 使用与前面示例中使用的相同原理，我们可以为`urlField`字段开发一个类似的验证检查。只需复制两个`emailField.on()`事件处理程序和`checkEmail`函数，就可以产生类似下图所示的东西：
- en: '![Taking it further for URL validation](img/image00362.jpeg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![深入了解 URL 验证](img/image00362.jpeg)'
- en: 'Using the code we''ve already produced, see whether you can create something
    that validates the website URL entry using this regex:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 使用我们已经生成的代码，看看你是否能够创建一个使用这个正则表达式验证网站 URL 输入的东西：
- en: '[PRE15]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'If your code works, it should produce an error message similar to the one shown
    in this screenshot:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的代码工作，它应该产生一个类似于这个截图中显示的错误消息：
- en: '![Taking it further for URL validation](img/image00363.jpeg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![深入了解 URL 验证](img/image00363.jpeg)'
- en: Hopefully, you've managed to use the code we've produced so far—if you're stuck,
    there is a working example in the code download that accompanies this book.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你已经成功使用了我们迄今为止产生的代码——如果你遇到了困难，在附带本书的代码下载中有一个可工作的示例。
- en: 'So, assuming that we have something that works, has anyone spotted problems
    with our code? There are definitely some issues that we need to fix; let''s go
    through them now:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，假设我们有一些可以工作的东西，有人发现我们的代码有问题吗？我们肯定有一些问题需要解决；让我们现在来看看它们：
- en: Notice that the feedback isn't 100 percent dynamic? In order to make our code
    recognize a change from an error to a successful entry, we need to refresh our
    browser window—this is not ideal at all!
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注意，反馈并非百分之百动态？为了使我们的代码能够识别从错误到成功输入的更改，我们需要刷新我们的浏览器窗口——这一点根本不理想！
- en: We're duplicating a lot of code within our jQuery file—architecturally, this
    is bad practice and we can definitely improve on what has been written.
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们在 jQuery 文件中重复了很多代码——从架构上看，这是不好的做法，我们肯定可以改进已经编写的内容。
- en: Instead of duplicating the code, let's completely rework our jQuery into a quick
    plugin; architecturally, this will get rid of some of the unnecessary duplication
    and make it easier for us to extend the functionality with minimal changes. It
    won't be perfect—this is something we will correct later in the chapter—but it
    will produce a more efficient result than our present code.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 与其复制代码，不如彻底重写我们的 jQuery 为一个快速插件；从架构上来说，这将消除一些不必要的重复，并使我们能够以最小的更改扩展功能。它不会完美——这是我们将在本章稍后纠正的东西——但它会产生比我们现有代码更有效的结果。
- en: Building a simple validation plugin
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建一个简单的验证插件
- en: Until now, our examples have been based around individual fields, such as an
    e-mail address or a website URL. The code is heavily duplicated, which makes for
    a bloated and inefficient solution.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们的示例都是基于个别字段的，比如电子邮件地址或网站 URL。代码大量重复，这导致了冗余且效率低下的解决方案。
- en: Instead, let's completely flip our approach and turn our code into a generic
    plugin. We'll use the same core process to validate our code, depending on the
    regex that has been set within the plugin.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，让我们完全改变我们的方法，将我们的代码转换成一个通用插件。我们将使用相同的核心流程来验证我们的代码，这取决于插件中设置的正则表达式。
- en: 'For this next exercise, we''ll use a plugin produced by Cedric Ruiz. Although
    it is a few years old, it illustrates how we can create a single core validation
    process that uses a number of filters to verify the content entered in our form.
    Let''s make a start by performing the following steps:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 对于下一个练习，我们将使用 Cedric Ruiz 制作的一个插件。虽然它已经有几年了，但它说明了我们如何创建一个单一的核心验证过程，该过程使用一些过滤器来验证我们表单中输入的内容。让我们从执行以下步骤开始：
- en: From the code download that accompanies this book, extract copies of the `quickvalidate.html`,
    `info.png`, and `quickvalidate.css` files and save them in your project folder.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从附带本书的代码下载中提取`quickvalidate.html`、`info.png`和`quickvalidate.css`文件的副本，并将它们保存在你的项目文件夹中。
- en: 'Next, we need to create a plugin. In a new file, add the following code, saving
    it as `jquery.quickvalidate.js`, within the `js` subfolder of your project area:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要创建一个插件。在一个新文件中，添加以下代码，并将其保存为`jquery.quickvalidate.js`，保存在项目区域的`js`子文件夹中：
- en: '[PRE16]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'You need to start adding functionality to your plugin, beginning with caching
    the form and the input fields; add this immediately before the `return this` statement
    in your plugin:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你需要开始给你的插件添加功能，从缓存表单和输入字段开始；在你的插件的`return this`语句之前立即添加这个功能：
- en: '[PRE17]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Next up comes the filters that dictate how each field should be validated and
    the error message that should be displayed when validation fails, as shown here:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来是规定每个字段应如何验证以及在验证失败时应显示的错误消息的过滤器，如下所示：
- en: '[PRE18]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We now come to the validation process, which is where the magic happens. Go
    ahead and add the following code, immediately below the filters:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们来到验证过程，这是魔术发生的地方。继续添加以下代码，立即在过滤器下方：
- en: '[PRE19]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'If your code correctly identifies an error, you need to inform the user; otherwise,
    they will be left in the dark as to why the form does not appear to be submitted
    correctly. Let''s fix this now by adding in a function to determine what happens
    if the validation test fails, as follows:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您的代码正确识别出错误，您需要通知用户；否则，他们将不知道为什么表单似乎未正确提交。现在让我们通过添加一个函数来确定如果验证测试失败会发生什么，如下所示：
- en: '[PRE20]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We''ve determined what will happen when the validation process fails but haven''t
    put anything in place to call the function. Let''s fix this now by adding in the
    appropriate call, based on whether the field is marked as being required, as shown
    here:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们已经确定了当验证过程失败时会发生什么，但尚未采取任何措施调用函数。现在让我们通过根据字段是否标记为必填来添加适当的调用来解决此问题，如下所示：
- en: '[PRE21]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'If the content changes in our field, we need to determine whether it is valid
    or invalid; this needs to take place when entering text, so let''s do that now,
    using the `keyup` event handler:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们字段中的内容发生更改，我们需要确定它是有效还是无效；这需要在输入文本时进行，所以现在让我们做这个，使用`keyup`事件处理程序：
- en: '[PRE22]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Finally, we need to prevent submission if errors are found in our form:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，如果在我们的表单中发现错误，我们需要阻止提交：
- en: '[PRE23]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Save your work; if all is well, you should see the form validate when previewing
    the results of your work in a browser:![Building a simple validation plugin](img/image00364.jpeg)
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存您的工作；如果一切正常，当在浏览器中预览工作结果时，您应该会看到表单验证：![构建一个简单的验证插件](img/image00364.jpeg)
- en: At this stage, we have a working plugin, where we've refactored the core validation
    code into a single set of processes that can be applied to each field type (using
    the appropriate filter).
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，我们有一个工作正常的插件，我们已经将核心验证代码重构为一组单一的流程，可以应用于每种字段类型（使用适当的过滤器）。
- en: 'However, we can do better than this; the following are some issues that we
    can address to take our code even further:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们可以做得更好；以下是一些问题，我们可以解决以进一步完善我们的代码：
- en: Although we've refactored the code into a single set of core validation processes,
    the filters still form a part of the core code. While it is easy to expand on
    the different types of filters, we are still limited to either text or password
    field types. Adding any of the standard HTML5 field types, such as `url` or `email`,
    will result in an error, as the pseudo-type is not supported within jQuery.
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虽然我们已经将代码重构为一组单一的核心验证流程，但过滤器仍然是核心代码的一部分。尽管可以轻松扩展不同类型的过滤器，但我们仍然仅限于文本或密码字段类型。添加任何标准的HTML5字段类型，例如`url`或`email`，都会导致错误，因为伪类型不受jQuery支持。
- en: From an architectural perspective, it is preferable to keep the validator filters
    outside the core plugin; this helps to keep the validator lean and free from code
    that isn't required for our purpose.
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从架构的角度来看，最好将验证器过滤器保留在核心插件之外；这有助于保持验证器的简洁，并且不包含我们的目的不需要的代码。
- en: Our code doesn't allow for any features such as localization, setting a maximum
    length, or the validation of form objects, such as checkboxes.
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们的代码不允许任何功能，比如本地化、设置最大长度或验证表单对象，比如复选框。
- en: 'We can spend lots of time developing our plugin so that it takes a more modular
    approach, but is it worth the effort? There are literally dozens of form validation
    plugins available for use; a smarter move will be to use one of these plugins:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以花费大量时间开发我们的插件，使其采用更模块化的方法，但这值得吗？目前有数十个可供使用的表单验证插件；更明智的做法将是使用其中一个插件：
- en: The core validation process is tried and tested, which eliminates the need to
    worry about whether our fields will validate correctly. Developing any form of
    validator plugin that works on more than just a few fields is notoriously tricky
    to get right; after all, what do we look or don't look to validate? Different
    languages? Different formats for postal or zip codes, for example?
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 核心验证流程经过了反复测试，消除了担心我们的字段是否会正确验证的需要。开发任何形式的验证器插件，使其适用于超过几个字段，都是非常棘手的，要做到完全正确；毕竟，我们要验证还是不验证？不同的语言？例如邮政编码或邮政编码的不同格式？
- en: Most plugins will have some form of architecture to allow the addition of custom
    validators, which supplement those included as standard—examples include the use
    of languages, specific number formats, or odd/even numbers. We will make full
    use of this later in this chapter in order to add some custom validators to our
    demo.
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大多数插件都会有某种架构，允许添加自定义验证器，这些验证器补充了作为标准包含的验证器，例如使用语言、特定的数字格式或奇偶数。在本章的后面，我们将充分利用这一点，以向我们的演示添加一些自定义验证器。
- en: Using an existing plugin allows you to concentrate on providing the functionality
    that is specific to your environment and where you can add the most value—after
    all, there is no point in trying to add valid where others have already done the
    work for us, right?
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用现有的插件可以让您专注于提供特定于您的环境的功能，并在您可以添加最大价值的地方添加功能——毕竟，尝试在其他人已经为我们完成工作的地方添加有效性是没有意义的，对吧？
- en: With this in mind, let's move on and take a look at how to use an existing plugin.
    Most plugins nowadays have some form of modular architecture that allows you to
    easily customize it and add additional custom validators; after all, why spend
    time reinventing the wheel, right?
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个想法，让我们继续看看如何使用现有的插件。现在大多数插件都具有某种模块化架构，允许您轻松定制它并添加额外的自定义验证器；毕竟，为什么要浪费时间重新发明轮子呢，对吧？
- en: Developing a plugin architecture for validation
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发验证插件架构
- en: Throughout this chapter, we've worked with a variety of HTML5 and jQuery techniques
    to validate our forms. In the main, they have worked well, but their simplistic
    nature means that we will easily outgrow their usefulness very quickly.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们使用了各种 HTML5 和 jQuery 技术来验证我们的表单。总的来说，它们效果很好，但它们的简单性意味着我们会很快超越它们的有用性。
- en: To really take advantage of all that is possible with form validation, it makes
    sense to move away from simply trying to validate fields to using an existing
    plugin that takes care of the basic validation process and allows you to concentrate
    on customizing it and on ensuring that you provide the right functionality for
    your form.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 要充分利用表单验证的所有可能性，最好不要仅仅尝试验证字段，而是使用现有的插件来处理基本的验证过程，并允许您集中精力进行定制，并确保为您的表单提供正确的功能。
- en: Enter jQuery Form Validator. This plugin, created by Victor Jonsson, has been
    around for a number of years, so it is tried and tested; it also contains the
    modular architecture that we need to customize the checks we will provide within
    our form. Let's take a look at the validator in action.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 输入 jQuery Form Validator。这个插件是由 Victor Jonsson 创建的，已经存在多年，所以经过了测试；它还包含了我们需要定制的模块化架构，以在我们的表单中提供我们将提供的检查。让我们看看验证器的运作方式。
- en: Note
  id: totrans-153
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The original plugin and associated documentation are available at [http://formvalidator.net/](http://formvalidator.net/).
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 原始插件及相关文档可在 [http://formvalidator.net/](http://formvalidator.net/) 上找到。
- en: Creating our basic form
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建我们的基本表单
- en: Before we start to add custom validator plugins to our code, we need a basic
    form to validate. For this, we'll base the markup on a modified version of the
    form created in `basicvalidation.html`, from an earlier section in this chapter.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始向代码添加自定义验证器插件之前，我们需要一个要验证的基本表单。为此，我们将基于本章早期部分中创建的 `basicvalidation.html`
    中的修改版本的表单的标记。
- en: 'Let''s get our basic form working, with standard validation in place. To do
    this, perform the following steps:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先让我们的基本表单工作起来，确保标准验证生效。要做到这一点，请执行以下步骤：
- en: We'll start by extracting copies of the `formvalidator.html` and `formvalidator.css`
    files from the code download that accompanies this book. Save the HTML file in
    the root of your project folder and the CSS file in a `css` subfolder.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将从提取伴随本书的代码下载中的 `formvalidator.html` 和 `formvalidator.css` 文件的副本开始。将 HTML
    文件保存在项目文件夹的根目录中，将 CSS 文件保存在 `css` 子文件夹中。
- en: 'In a new file, add the following lines of code, saving it as `formvalidator.js`
    in a `js` subfolder of your project area:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新文件中，添加以下代码行，并将其保存为 `formvalidator.js`，保存在项目区域的 `js` 子文件夹中：
- en: '[PRE24]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This is all that is needed to get started with the Form Validator plugin; if
    you preview the form in a browser, you should see the following screenshot—if
    you enter a valid name and e-mail address but omit the website URL:![Creating
    our basic form](img/image00365.jpeg)
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这就是开始使用 Form Validator 插件所需的全部内容；如果您在浏览器中预览表单，您应该会看到以下截图——如果您输入了一个有效的名称和电子邮件地址但省略了网站
    URL：![创建我们的基本表单](img/image00365.jpeg)
- en: Now that our form is ready, let's really start developing some of the validators
    used within the form, beginning with a new validator for the `name` field.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的表单已经准备好了，让我们真正开始开发表单内部使用的一些验证器，首先是`name`字段的新验证器。
- en: Creating custom validators
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建自定义验证器
- en: So far, our form has relied on using standard HTML5 techniques to validate it;
    this will work for most requirements, but there is a limit to what it can do.
    Enter jQuery; we can use the power of FormValidator to create our own custom validators
    so that we can tailor them to match our own requirements.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们的表单依赖于使用标准的 HTML5 技术进行验证；这对大多数要求都适用，但它的能力是有限的。接下来是 jQuery；我们可以利用 FormValidator
    的功能创建我们自己的自定义验证器，以满足我们自己的要求。
- en: The key part of creating custom validators is the `$.formutils.addValidator`
    configuration object; FormValidator handles the basic plugin architecture, which
    leaves you to add values by designing the right checks for your form.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 创建自定义验证器的关键部分是 `$.formutils.addValidator` 配置对象；FormValidator 处理了基本的插件架构，这样你就可以通过设计表单的正确检查来添加值。
- en: 'Over the next few pages, we''re going to work through two basic examples:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几页中，我们将通过两个基本示例进行工作：
- en: 'We''ll start by creating our custom validator; in the usual text editor of
    your choice, add the following code:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将从创建自定义验证器开始；在你选择的文本编辑器中，添加以下代码：
- en: '[PRE25]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Save the file as `user_name.js`, within the `js` subfolder of your project
    area. Open up the `formvalidator.js` file that you created in the previous section
    and alter it as shown here:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件保存为`user_name.js`，放在项目区域的`js`子文件夹内。打开之前创建的`formvalidator.js`文件，并根据下面的示例进行修改：
- en: '[PRE26]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Although you''ve added the validation rule to the validator, you need to activate
    it from within your HTML markup, as follows:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 虽然你已经将验证规则添加到验证器中，但你需要在 HTML 标记内部激活它，如下所示：
- en: '[PRE27]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'If all works well, you will see the effects of using your custom validator
    when you preview the form in a browser and press the **Submit** button, as shown
    in the following screenshot:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果一切正常，当你在浏览器中预览表单并点击 **提交** 按钮时，就会看到使用自定义验证器的效果，如下面的截图所示：
- en: '![Creating custom validators](img/image00366.jpeg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![创建自定义验证器](img/image00366.jpeg)'
- en: At this stage, you can simply leave it with this custom validator in place,
    but I think there is scope for more—what about e-mail addresses?
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，你可以简单地将它留在这个自定义验证器的位置，但我认为有更多的空间——比如电子邮件地址？
- en: Standard HTML5 validation will work out if the e-mail address given is in a
    suitable format, such as ensuring that it has an `@` sign, a decimal point after
    the domain name, and that the domain suffix is valid. It won't, however, prevent
    users from submitting forms with certain types of addresses, such as [www.hotmail.com](http://www.hotmail.com)
    (or now [www.outlook.com](http://www.outlook.com)).
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 标准的 HTML5 验证将会检查电子邮件地址是否符合合适的格式，例如确保它包含`@`符号，域名后有一个小数点，以及域名后缀是有效的。然而，它不能阻止用户提交具有某些类型地址的表单，比如[www.hotmail.com](http://www.hotmail.com)（或现在的[www.outlook.com](http://www.outlook.com)）。
- en: At this point, it is worth noting that e-mail validation using regexes can open
    up a minefield of problems, so step carefully and test thoroughly—how do you validate
    against `mail+tag@hotmail.com`, for example? This is a perfectly valid address
    but most regexes will fail…
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 此时值得注意的是使用正则表达式进行电子邮件验证可能会引发一系列问题，所以要谨慎行事并进行彻底的测试——比如如何对`mail+tag@hotmail.com`进行验证？这是一个完全有效的地址，但大多数正则表达式都会失败……
- en: Note
  id: totrans-178
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A useful discussion on why using regexes can actually do more harm than good
    is available at [http://davidcel.is/blog/2012/09/06/stop-validating-email-addresses-with-regex/](http://davidcel.is/blog/2012/09/06/stop-validating-email-addresses-with-regex/).
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 关于为什么使用正则表达式实际上可能带来更多问题的讨论可以在[http://davidcel.is/blog/2012/09/06/stop-validating-email-addresses-with-regex/](http://davidcel.is/blog/2012/09/06/stop-validating-email-addresses-with-regex/)上找到。
- en: 'In our example, we''ll add a simple check to prevent Hotmail, Gmail, or Yahoo!
    e-mail addresses from being used; let''s take a look at how we can do that:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们将添加一个简单的检查来防止使用 Hotmail、Gmail 或 Yahoo! 的电子邮件地址；让我们看看我们如何做到这一点：
- en: 'In a text editor, add the following code to a new file, saving it as `free_email.js`
    within your `js` subfolder:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文本编辑器中，将以下代码添加到一个新文件中，并将其保存为 `free_email.js`，放在 `js` 子文件夹内：
- en: '[PRE28]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Now that your `free_email` validator is in place, you need to call it when
    validating your form; to do this, revert to the `formvalidator.js` file you had
    opened in the previous exercise and amend the code, as shown here:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在你的 `free_email` 验证器已经就位，当验证表单时，你需要调用它；为此，请返回到你在前一个练习中打开的 `formvalidator.js`
    文件，并按照以下示例修改代码：
- en: '[PRE29]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The final step in the exercise is to activate the custom validator from the
    HTML markup—remember how we changed it in the previous exercise? The same principle
    applies here too:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个练习的最后一步是从 HTML 标记中激活自定义验证器——还记得我们在上一个练习中是如何改变它的吗？同样的原理在这里也适用：
- en: '[PRE30]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Save both the `formvalidator.js` and `formvalidator.html` files; if you preview
    the results of your work, you can clearly see your custom message appear if you've
    entered an invalid e-mail address, as shown in the following screenshot:![Creating
    custom validators](img/image00367.jpeg)
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存 `formvalidator.js` 和 `formvalidator.html` 文件；如果你预览你的工作结果，你会清楚地看到，如果你输入了一个无效的电子邮件地址，你的自定义消息会出现，如下面的截图所示：![Creating
    custom validators](img/image00367.jpeg)
- en: Now, the observant amongst you will spot that we're loading one validator at
    a time; I am sure that you are wondering how we can load multiple validators at
    the same time, right?
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你们中间敏锐的人可能会发现我们一次只加载一个验证器；我相信你们肯定想知道如何同时加载多个验证器，对吧？
- en: 'No problem, we already have the validator files in place, so all we need to
    do is modify our validator object so that it loads both the modules. Let''s take
    a quick look at how we can modify our validator object:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 没问题，我们已经就位了验证器文件，所以我们需要做的就是修改我们的验证器对象，使其加载这两个模块。让我们快速看看如何修改我们的验证器对象：
- en: 'Open up a copy of the `formvalidator.js` file and alter the code as shown here:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `formvalidator.js` 文件的副本，并按照这里显示的代码进行修改：
- en: '[PRE31]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: That's all that you need to do. If you save the file and preview the results
    in a browser, you will find that it validates both the `name` and `email` fields,
    as illustrated in the previous two exercises.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是你需要做的一切。如果你保存文件并在浏览器中预览结果，你会发现它会验证 `name` 和 `email` 字段，就像前两个练习中所示的那样。
- en: This opens up a world of opportunities; in our two examples, we've created reasonably
    simple validators but the principles are the same, no matter how complex or simple
    our validators are.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 这为我们打开了一扇机会之门；在我们的两个示例中，我们创建了相当简单的验证器，但原则是相同的，无论我们的验证器有多么复杂或简单。
- en: Note
  id: totrans-194
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you want to learn more about how to create custom validators, then it is
    worth reading the documentation at [http://formvalidator.net/index.html#custom-validators](http://formvalidator.net/index.html#custom-validators).
    We can then combine the basic principles of creating modules with regex examples
    such as those shown at [http://www.sitepoint.com/jquery-basic-regex-selector-examples/](http://www.sitepoint.com/jquery-basic-regex-selector-examples/),
    to create some useful validator checks.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解更多关于如何创建自定义验证器的信息，那么阅读[http://formvalidator.net/index.html#custom-validators](http://formvalidator.net/index.html#custom-validators)中的文档是值得的。然后我们可以结合创建模块的基本原理和正则表达式示例，例如[http://www.sitepoint.com/jquery-basic-regex-selector-examples/](http://www.sitepoint.com/jquery-basic-regex-selector-examples/)中显示的那些，来创建一些有用的验证器检查。
- en: Let's move on and take another look at a useful part of the FormValidator plugin—we
    all don't speak the same language, do we? If we did, life would be boring; instead,
    you should consider localizing your validation messages so that international
    visitors to your site can understand where there is a validation issue and know
    how to fix it.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续看看 FormValidator 插件的另一个有用部分——我们毕竟不都说同样的语言，是吗？如果我们都说同样的语言，生活会很无聊；相反，你应该考虑本地化你的验证消息，这样国际访问者就可以理解何时出现验证问题以及如何解决它。
- en: Localizing our content
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 本地化我们的内容
- en: In this modern age of working online, there may be instances where it will be
    useful to display messages in a different language—for example, if most of your
    visitors speak Dutch, then there will be value in overriding the standard messages,
    with equivalents in the Dutch language.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个现代化的在线工作时代，可能会有一些情况需要以不同的语言显示消息——例如，如果你的大多数访问者说荷兰语，那么用荷兰语的等价物覆盖标准消息将是有价值的。
- en: 'While it requires some careful thought and planning, it is nevertheless very
    easy to add language support; let''s run through how to do so:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管需要一些仔细的思考和规划，但添加语言支持仍然非常容易；让我们看看如何操作：
- en: 'For this exercise, you need to modify the validator object. In the `formvalidator.js`
    file, add this code immediately after the `document.ready()` statement:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于这个练习，你需要修改验证器对象。在 `formvalidator.js` 文件中，在 `document.ready()` 语句之后立即添加以下代码：
- en: '[PRE32]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'We need to reference the change in language, so go ahead and add this configuration
    line to the validator object:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要引用语言的变化，因此，请继续将此配置行添加到验证器对象中：
- en: '[PRE33]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Save the file. If you preview the results in a browser, you can see that the
    error message is now displayed in Dutch, as shown here:![Localizing our content](img/image00368.jpeg)
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件。如果在浏览器中预览结果，你可以看到错误消息现在以荷兰语显示，如下所示：![本地化我们的内容](img/image00368.jpeg)
- en: 'We''re not limited to Dutch; here''s the same code, but with an error message
    in French:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们不限于荷兰语；这里是相同的代码，但是错误消息是法语：
- en: '[PRE34]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: This is a quick and easy way to ensure that visitors to your site understand
    why your form hasn't validated and how they can fix it. It is worth noting though
    that the message set is displayed irrespective of the regional settings on your
    PC or mobile device; it is recommended that you check any analytics logs to confirm
    the region or country your visitors come from before changing the language in
    use on your form's messages.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个快速简单的方法，可以确保访问您网站的访客了解为什么您的表单未经验证以及他们如何修复它。值得注意的是，无论您的 PC 或移动设备的区域设置如何，设置的消息都会显示；建议您在更改表单消息中使用的语言之前检查任何分析日志以确认您的访问者来自哪个地区或国家。
- en: Centralizing our error messages
  id: totrans-208
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 集中我们的错误消息
- en: Before we wrap up development on our form, there is one more piece of functionality
    that we can look at in order to add it to our form.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们结束表单开发之前，还有一个功能可以添加到我们的表单中。
- en: So far, any validation error message that is displayed has been against each
    individual field. This works, but it means that we don't have an immediate way
    of telling which fields may have failed validation. Sure, we can scroll through
    the form, but I'm lazy; why scroll down a long form if we can alter our code to
    display the errors at the top, right?
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，显示的任何验证错误消息都是针对每个单独字段的。这样做可以工作，但意味着我们没有一种立即知道哪些字段可能未通过验证的方法。当然，我们可以滚动浏览表单，但我懒得做这个；如果我们可以修改我们的代码以在顶部显示错误，那为什么还要滚动长表单呢？
- en: 'Absolutely, doing this is a piece of cake with FormValidator; let''s go through
    what is required now:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 绝对，使用 FormValidator 这样做非常简单；现在让我们来看看需要做什么：
- en: 'Open a copy of the `formvalidator.js` file and alter the validator object as
    shown here; we set the `errMessagePosition` property to `top` and the `validatorOnBlur`
    property to `false` in order to display messages at the top of the form:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `formvalidator.js` 文件的副本，并按照此处所示更改验证器对象；我们将 `errMessagePosition` 属性设置为 `top`，将
    `validatorOnBlur` 属性设置为 `false`，以便在表单顶部显示消息：
- en: '[PRE35]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'If you were to run the form now, any error messages that have been set will
    display at the top, but they won''t look pretty. Let''s fix this now, with some
    minor changes to our style sheet:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果现在运行表单，设置的任何错误消息都会显示在顶部，但它们看起来不太好看。现在，让我们通过对样式表进行一些微小的更改来修复这个问题：
- en: '[PRE36]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Now, let's run the form in a browser; if all went well, you will see the errors
    at the top of the form, correctly formatted. The following screenshot shows what
    might appear if you were to not fill out the website URL; note that our code still
    shows the message in Dutch from the previous example:![Centralizing our error
    messages](img/image00369.jpeg)
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们在浏览器中运行表单；如果一切顺利，你将看到顶部的错误已经正确格式化的表单。以下截图显示了如果你不填写网站 URL 会出现什么；请注意，我们的代码仍然显示了前一个示例中的荷兰语消息：![集中我们的错误消息](img/image00369.jpeg)
- en: At this point, we've covered a number of topics related to validation using
    jQuery. We're going to move on and take a look at a couple of example forms in
    action. Before we do so, we need to cover some final tweaks as part of wrapping
    up development.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经涵盖了一些与使用 jQuery 进行验证相关的主题。我们将继续并查看一下几个示例表单的操作。在我们这样做之前，我们需要完成一些最后的调整作为开发的结束部分。
- en: Wrapping up development
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结束开发
- en: When previewing the last exercise, the more observant will have spotted that
    some of the styles appear to be missing. There is a good reason for this; let
    me explain.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在预览最后一个练习时，更加细心的人会注意到一些样式似乎缺失了。这有一个很好的理由；让我解释一下。
- en: 'As a minimum, we can provide messages to indicate success or failure. This
    will work but it isn''t great; a better option is to provide some additional styling
    to really set off our validation:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 作为最低要求，我们可以提供指示成功或失败的消息。这样做是有效的，但不是很好；更好的选择是提供一些额外的样式来真正突出我们的验证：
- en: '![Wrapping up development](img/image00370.jpeg)'
  id: totrans-221
  prefs: []
  type: TYPE_IMG
  zh: '![结束开发](img/image00370.jpeg)'
- en: 'This is easy to do, so let''s make a start by performing the following steps:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 这很容易做到，所以让我们从执行以下步骤开始：
- en: 'Open up the `formvalidator.css` file and add the following lines of code:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`formvalidator.css`文件并添加以下代码行：
- en: '[PRE37]'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: We need to add two icons to the `img` subfolder in our project area—for this,
    I've used the red cross and green tick icons available at [https://www.iconfinder.com/icons/32520/accept_check_good_green_ok_success_tick_valid_validation_vote_yes_icon](https://www.iconfinder.com/icons/32520/accept_check_good_green_ok_success_tick_valid_validation_vote_yes_icon).
    If you want to use different icons, then you may have to adjust the style rules
    accordingly.
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要将两个图标添加到项目区域的`img`子文件夹中——为此，我使用了位于[https://www.iconfinder.com/icons/32520/accept_check_good_green_ok_success_tick_valid_validation_vote_yes_icon](https://www.iconfinder.com/icons/32520/accept_check_good_green_ok_success_tick_valid_validation_vote_yes_icon)的红叉和绿勾图标。如果您想使用不同的图标，则可能需要相应调整样式规则。
- en: Save `formvalidator.css`. If you preview the results in a browser and enter
    details in the form, you should see results similar to the screenshot shown at
    the start of this exercise when you click on **Submit Form**.
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存`formvalidator.css`。如果在浏览器中预览结果并在表单中输入详细信息，则在单击**提交表单**时，您应该看到与本练习开始时显示的屏幕截图类似的结果。
- en: Hopefully, you will agree that this looks much better! There is a copy of `formvalidator.css`
    in the code download that accompanies this book; it contains a few more styles
    within the form that give it the really polished look that we've seen in this
    exercise.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 希望您会同意这看起来好多了！在伴随本书的代码下载中有一个`formvalidator.css`的副本；它包含了在表单中为其赋予非常精致外观的一些额外样式，正如我们在这个练习中所见。
- en: Tip
  id: totrans-228
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If you want to see a working example, which contains the customizations, then
    extract the `formvalidatior-fullexample` JavaScript, CSS, and HTML files from
    the code download and rename them to `formvalidator.js`, `formvalidator.css`,
    and `formvalidator.html`, respectively.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想看到包含自定义内容的工作示例，请从代码下载中提取`formvalidatior-fullexample`JavaScript、CSS 和 HTML
    文件，并将它们分别重命名为`formvalidator.js`、`formvalidator.css`和`formvalidator.html`。
- en: Noting the use of best practices
  id: totrans-230
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 注意最佳实践的使用
- en: In each of our examples, we've set the form to display all the fields at once—a
    key point to consider the user's goals and expectations. What are they trying
    to achieve? Do we really need to display dozens of fields at once? Or, can we
    make the form simpler?
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的每个示例中，我们都将表单设置为一次显示所有字段——考虑到用户的目标和期望是一个关键点。他们试图实现什么？我们真的需要一次显示几十个字段吗？或者，我们可以使表单更简单吗？
- en: Although the focus of this book is naturally on mastering jQuery, it would be
    foolish to simply concentrate on writing code; we must also give some consideration
    to the look and feel of the form and allow any visual or functional considerations
    when building the form and its associated validation.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管本书的重点自然是掌握 jQuery，但仅仅集中于编写代码是愚蠢的；我们还必须在构建表单及其相关验证时考虑一些外观和功能方面的问题。
- en: 'As a small example, it might be worth considering whether we can use CSS to
    blur or focus fields, as and when fields become available. We can achieve this
    using a small amount of CSS to blur or focus those fields, using something similar
    to the following code:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 举一个小例子，值得考虑的是，当字段可用时，我们是否可以使用 CSS 来模糊或聚焦字段。我们可以使用少量 CSS 来模糊或聚焦这些字段，类似于以下代码：
- en: '[PRE38]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The idea here is to fade out those fields where we have entered something and
    focus on those fields that we have yet to complete or are about to complete, as
    shown in the following screenshot:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的想法是淡化我们已输入内容的字段，并将注意力集中在我们尚未完成或即将完成的字段上，如下面的屏幕截图所示：
- en: '![Noting the use of best practices](img/image00371.jpeg)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
  zh: '![注意最佳实践的使用](img/image00371.jpeg)'
- en: 'A small warning: if we are not careful when using this styling, we may appear
    to effectively disable fields, which will kill the whole point of the exercise!
    Let''s change focus now and switch to a key part of form design: what happens
    if some browsers don''t support the CSS styles we''ve used throughout this chapter?'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 一个小警告：如果我们在使用此样式时不小心，可能会导致字段失效，这将破坏练习的整个意义！现在让我们改变焦点，转向表单设计的一个关键部分：如果某些浏览器不支持我们在本章中使用的
    CSS 样式会发生什么？
- en: Providing fallback support
  id: totrans-238
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提供后备支持
- en: Throughout this chapter, we've pushed the boat out in designing forms that will
    work in most modern browsers. There may be instances though when this won't work;
    if we still have to cater to nonsupporting browsers (such as iOS7), then we need
    to provide some form of fallback.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们在设计大多数现代浏览器中可用的表单方面进行了尝试。尽管如此，在某些情况下，这可能不起作用；如果我们仍然必须迎合不支持的浏览器（例如 iOS7），那么我们需要提供某种形式的后备方案。
- en: Thankfully, this isn't too much of an issue if we use something such as a Modernizr
    to provide a graceful degradation by applying the `formvalidation` class on the
    `html` element. We can then use this to provide a graceful fallback if a browser
    doesn't support the use (and styling) of pseudo-selectors, such as `:valid` or
    `:invalid`.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，如果我们使用类似Modernizr这样的工具，在`html`元素上应用`formvalidation`类，以提供一种优雅的降级，那么这不会成为太大的问题。然后，我们可以利用这一点，在浏览器不支持伪选择器（例如`:valid`或`:invalid`）的情况下提供优雅的后备方案。
- en: Tip
  id: totrans-241
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: If you want to use a custom version of Modernizr, which will test for form validation
    support, then go to [http://modernizr.com/download/#-shiv-cssclasses-teststyles-testprop-testallprops-prefixes-domprefixes-forms_validation-load](http://modernizr.com/download/#-shiv-cssclasses-teststyles-testprop-testallprops-prefixes-domprefixes-forms_validation-load).
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想使用自定义版本的Modernizr，该版本将测试表单验证支持，请访问[http://modernizr.com/download/#-shiv-cssclasses-teststyles-testprop-testallprops-prefixes-domprefixes-forms_validation-load](http://modernizr.com/download/#-shiv-cssclasses-teststyles-testprop-testallprops-prefixes-domprefixes-forms_validation-load)。
- en: Enough of the theory, let's have some fun! Over the course of the next couple
    of pages, we're going to have a look at a more complex example, over two exercises.
    It will be based on a simple contact form to which we will add form upload capabilities—although
    beware, as there will be a sting in this tail…!
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 足够的理论了，让我们来点乐子吧！在接下来的几页中，我们将通过两个练习来看一个更复杂的例子。它将基于一个简单的联系表单，我们将在其中添加表单上传功能——尽管请注意，这里会有一个陷阱……！
- en: Creating an advanced contact form using AJAX
  id: totrans-244
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 AJAX 创建一个高级联系表单
- en: In the first part of our complex example, we're going to develop a form that
    allows us to submit some basic details and that allows the confirmation of this
    submission to first appear on a form message panel and later by e-mail.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们复杂示例的第一部分中，我们将开发一个表单，允许我们提交一些基本详细信息，并且允许首先出现在表单消息面板上，然后通过电子邮件进行确认。
- en: 'For this exercise, we will need to avail ourselves of a couple of tools, as
    follows:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本练习，我们将需要使用一些工具，如下所示：
- en: A local web server installed using default settings—options include WAMP (for
    PC; [http://www.wampserver.de/en](http://www.wampserver.de/en)) or MAMP (for Mac;
    [http://www.mamp.info/en/](http://www.mamp.info/en/)). Linux users will most likely
    already have something available as a part of their distribution.
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用默认设置安装的本地 Web 服务器——选项包括 WAMP（适用于 PC；[http://www.wampserver.de/en](http://www.wampserver.de/en)）或
    MAMP（适用于 Mac；[http://www.mamp.info/en/](http://www.mamp.info/en/)）。Linux 用户很可能已经有了作为发行版一部分的某些内容。
- en: The free Test Mail Server tool (for Windows only), available at [http://www.toolheap.com/test-mail-server-tool/](http://www.toolheap.com/test-mail-server-tool/),
    as e-mailing from a local web server can be difficult to set up, so this brilliant
    tool monitors port 25 and provides local e-mailing capabilities. For Mac, you
    can try the instructions provided at [https://discussions.apple.com/docs/DOC-4161](https://discussions.apple.com/docs/DOC-4161);
    Linux users can try following the steps outlined at [http://cnedelcu.blogspot.co.uk/2014/01/how-to-set-up-simple-mail-server-debian-linux.html](http://cnedelcu.blogspot.co.uk/2014/01/how-to-set-up-simple-mail-server-debian-linux.html).
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 免费的 Test Mail Server 工具（仅适用于 Windows），可在[http://www.toolheap.com/test-mail-server-tool/](http://www.toolheap.com/test-mail-server-tool/)获取，因为从本地
    Web 服务器发送电子邮件可能很难设置，所以这个出色的工具会监视端口 25 并提供本地邮件功能。对于 Mac，您可以尝试按照[https://discussions.apple.com/docs/DOC-4161](https://discussions.apple.com/docs/DOC-4161)提供的说明进行操作；Linux
    用户可以尝试按照[http://cnedelcu.blogspot.co.uk/2014/01/how-to-set-up-simple-mail-server-debian-linux.html](http://cnedelcu.blogspot.co.uk/2014/01/how-to-set-up-simple-mail-server-debian-linux.html)中概述的步骤进行操作。
- en: Access to an e-mail package from the PC or laptop that is being used—this is
    required to receive e-mails sent from our demo.
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从正在使用的个人电脑或笔记本电脑上访问电子邮件包——这是接收我们演示发送的电子邮件所必需的。
- en: Tip
  id: totrans-250
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Another possible option, if you prefer to go down the cross-browser route, is
    XAMPP ([https://www.apachefriends.org/index.html](https://www.apachefriends.org/index.html));
    this includes the Mercury Mail Transport option, so the Test Mail Server tool
    isn't required if you are working on Windows.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个可能的选项，如果你更喜欢走跨浏览器的路线，是 XAMPP ([https://www.apachefriends.org/index.html](https://www.apachefriends.org/index.html))；这包括
    Mercury Mail Transport 选项，因此如果你在 Windows 上工作，则不需要 Test Mail Server 工具。
- en: 'Okay, with the tools in place, let''s make a start by performing the following
    steps:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，工具就位了，让我们开始执行以下步骤：
- en: We're going to start by opening up a copy of the code download that accompanies
    this book and extracting the `ajaxform` folder; this contains the markup, styling,
    and assorted files for our demo. We need to save the folder into the web server's
    `WWW` folder, which (for PC) will usually be `C:\wamp\www`.
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将从打开此书附带的代码下载的副本并提取 `ajaxform` 文件夹开始；这包含了我们演示的标记、样式和各种文件。我们需要将该文件夹保存到 Web
    服务器的 `WWW` 文件夹中，对于 PC 来说，通常是 `C:\wamp\www`。
- en: The markup is relatively straightforward and very similar to what we've already
    seen throughout this chapter.
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 标记相对简单，与本章中已经见过的内容非常相似。
- en: 'We need to make one small change to the `mailer.php` file; open it in a text
    editor of your choice and then look for this line:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要对 `mailer.php` 文件进行一个小修改；用你选择的文本编辑器打开它，然后找到这一行：
- en: '[PRE39]'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Change `<ENTER EMAIL HERE>` to a valid e-mail address that you can use in order
    to check whether an e-mail has appeared afterwards.
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `<ENTER EMAIL HERE>` 更改为你可以使用的有效电子邮件地址，以便检查之后是否出现了电子邮件。
- en: 'The magic for this demo happens within the `ajax.js` file, so let''s take a
    look at the file now and begin by setting some variables:'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个演示的魔法发生在 `ajax.js` 文件中，所以现在让我们看看这个文件，并开始设置一些变量：
- en: '[PRE40]'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'We start the real magic here, when the submit button is pressed; we first prevent
    the form from submitting (as it''s the default action) and then serialize the
    form data into a string for submission:'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当提交按钮被按下时，我们开始真正的魔法；首先我们阻止表单提交（因为这是默认操作），然后将表单数据序列化为字符串以便提交：
- en: '[PRE41]'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The core of the AJAX action on this form comes next; this function sets the
    type of request to make, where the content will be sent to and the data to send:'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来是这个表单的 AJAX 操作的核心；这个函数设置请求类型，发送内容的位置以及要发送的数据：
- en: '[PRE42]'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'We then add the two functions to determine what should happen; the first function
    deals with the successful submission of our form:'
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们添加两个函数来确定应该发生什么；第一个函数处理我们表单的成功提交：
- en: '[PRE43]'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Next up comes the function that handles the outcome if form submission fails:'
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 失败提交表单后的处理函数如下：
- en: '[PRE44]'
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Start the Email Tool. If you preview the form in a browser and fill out some
    valid details, you should see this screenshot when you submit it:![Creating an
    advanced contact form using AJAX](img/image00372.jpeg)
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动电子邮件工具。如果你在浏览器中预览表单并填写一些有效的细节，当你提交它时，你应该会看到这个截图：![使用 AJAX 创建高级联系表单](img/image00372.jpeg)
- en: Our form is now in place and able to submit, with the confirmation appearing
    by e-mail within a few moments. We will revisit the use of AJAX within jQuery
    in greater depth in the next chapter; for now, let's move on and continue to develop
    our form.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的表单现在已经就位，并且能够提交，在几秒钟内通过电子邮件确认。我们将在下一章中更深入地重新讨论在 jQuery 中使用 AJAX 的用法；现在，让我们继续开发我们的表单。
- en: Developing an advanced file upload form using jQuery
  id: totrans-270
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 jQuery 开发高级文件上传表单
- en: As one good man said some time ago, *"onwards and upwards!"*, it's time to add
    the second part of our form's functionality, in the form of a file upload option.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 正如一位善良的人不久前所说的那样，*"前进和上升！"*，现在是时候添加我们表单功能的第二部分了，以文件上传选项的形式。
- en: Leaving aside the risks that this can present (such as the uploading of viruses),
    adding a file upload function is relatively straightforward; it requires both
    client- and server-side components to function correctly.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 不考虑这可能带来的风险（如上传病毒），添加文件上传功能相对简单；它需要客户端和服务器端组件才能正常工作。
- en: 'In our example, we''re going to focus more on the client-side functionality;
    for the purpose of the demo, we will upload files to a fake folder stored within
    the project area. To give you an idea of what we will build, here''s a screenshot
    of the completed example:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们将更多地关注客户端功能；为了演示目的，我们将文件上传到项目区域内的一个虚拟文件夹。为了让你了解我们将构建的内容，这是一个完成示例的截图：
- en: '![Developing an advanced file upload form using jQuery](img/image00373.jpeg)'
  id: totrans-274
  prefs: []
  type: TYPE_IMG
  zh: '![使用 jQuery 开发高级文件上传表单](img/image00373.jpeg)'
- en: 'With this in mind, let''s make a start by performing the following steps:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个想法，让我们开始执行以下步骤：
- en: 'In a copy of the `ajaxform.html` file, we need to add some additional links
    to various JavaScript and CSS files; all the additions are available in the code
    download that accompanies this book, as shown here:'
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`ajaxform.html`文件的副本中，我们需要向各种JavaScript和CSS文件添加一些额外的链接；所有这些添加都在随书附带的代码下载中可用，如下所示：
- en: '[PRE45]'
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Next, we need to add some markup to `index.html`; so, in `ajaxform.html`, go
    ahead and first alter the title as shown here:'
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要在`index.html`中添加一些标记；所以，在`ajaxform.html`中，首先按照这里显示的更改标题：
- en: '[PRE46]'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'We now need to add the file upload code; so, immediately after the closing
    `</div>` tag of the message field, add the following code:'
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要添加文件上传代码；所以，在消息字段的结束`</div>`标签之后，立即添加以下代码：
- en: '[PRE47]'
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'We need to make one small change to one of our jQuery files; in `uploadfiles.js`,
    look for the line that begins as follows:'
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要对我们的一个jQuery文件进行一点小小的修改；在`uploadfiles.js`中，找到以下开头的行：
- en: '[PRE48]'
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'To complete our demo, we need two additional files: one is `files.php` and
    the other is `UploadHandler.php`; these will handle the backend upload of files
    and the sending of e-mails. Copies of these files are in the code download that
    accompanies this book.'
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要完成我们的演示，我们需要两个额外的文件：一个是`files.php`，另一个是`UploadHandler.php`；这些文件将处理文件的后端上传和电子邮件的发送。这些文件的副本都在随书附带的代码下载中。
- en: Save all your files. If you preview the results using your local web server,
    then you should see a working form, similar to the first part of this exercise;
    it will now also show your upload form.
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存所有文件。如果使用本地Web服务器预览结果，则应该看到一个可用的表单，类似于此练习的第一部分；现在它还将显示您的上传表单。
- en: Note
  id: totrans-286
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: There is a working version of the demo in the `combined` folder that comes in
    the code download that accompanies this book.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 在随书附带的代码下载中的`combined`文件夹中有一个演示的工作版本。
- en: At this point, we should have a working form. But hold on…has anyone noticed
    something? Hopefully, at this point, you should have noticed that there is little
    or no validation within our form…! "Huh?," I hear you ask. You are absolutely
    right, but as with all good things, there is a reason for this.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们应该有一个可用的表单。但是等等……有没有人注意到什么？希望在这一点上，你应该已经注意到我们的表单中几乎没有验证了……！“嗯？”我听到你问。你完全正确，但是像所有好事一样，这也是有原因的。
- en: I deliberately didn't add any validation here, as I wanted to first concentrate
    on the form's functionality and finally have a small break from validation, given
    how much we've covered over the last few pages.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 我在这里故意没有添加任何验证，因为我想首先集中精力让表单功能正常运行，并最终从验证中小休一下，考虑到我们在过去几页中已经涵盖了很多内容。
- en: It does, however, give you a perfect opportunity (and yes, here comes the sting)—how
    about checking whether you can add validation to the example? I've not provided
    an answer in the code download for this—after all, there is no right or wrong
    answer per se; validation depends on your form's requirements. However, there
    should be enough within this chapter to get you going. I strongly recommend that
    you view the documentation on the main [formvalidator.net](http://formvalidator.net)
    website, as it will help provide more answers!
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这确实为你提供了一个绝佳的机会（是的，这里有个陷阱）——要不要检查一下你是否能为示例添加验证？我在代码下载中没有提供答案——毕竟，并不存在绝对正确或错误的答案；验证取决于你表单的需求。不过，在本章中应该有足够的内容让你开始。我强烈建议你查看主网站[formvalidator.net](http://formvalidator.net)上的文档，因为它会提供更多答案！
- en: Summary
  id: totrans-291
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Phew! We've finally reached the end of our chapter, so let's take a moment to
    review what we've covered so far.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 哦！我们终于到达了本章的末尾，所以让我们花点时间回顾一下我们到目前为止所涵盖的内容。
- en: We kicked off with a look at why form validation is critical and how the key
    point is to keep any solution simple in order to ensure the success of the form.
    We started with a look at simple HTML5 validation before discussing the virtues
    of when to use jQuery in place of standard HTML5 validation.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从为什么表单验证很重要以及关键点是保持任何解决方案简单以确保表单成功开始。我们先看了简单的HTML5验证，然后讨论了何时使用jQuery代替标准HTML5验证的优点。
- en: We then moved on to take a look at simple validation using jQuery before expanding
    this to cover the use of regex statements. Next up came a look at developing a
    quick and dirty validation plugin, before examining the need to maintain a more
    modular architecture to help with extensibility through the use of custom validators.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们开始了解使用 jQuery 进行简单验证，然后扩展到覆盖正则表达式语句的使用。接下来，我们看了一下开发一个快速而肮脏的验证插件，然后审查了保持更模块化架构以帮助通过使用自定义验证器来实现可扩展性的需求。
- en: We switched to using an existing plugin to add validation functionality, as
    this allows us to spend more time on ensuring that we cover our needs rather than
    the simple virtue of being able to validate any content. We also looked at how
    to localize our content and centralize the error messages that are displayed before
    wrapping up development with some additional styling tweaks.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 我们转而使用现有的插件来添加验证功能，因为这样可以让我们花更多时间确保我们满足我们的需求，而不仅仅是能够验证任何内容的简单优点。我们还研究了如何本地化我们的内容，并集中显示错误消息，然后在开发结束前进行了一些额外的样式调整。
- en: We then rounded out the chapter with a note on best practices and providing
    fallback support, before developing the basis of a complex form with the file
    upload functionality as a basis for using some of the techniques provided in this
    chapter for future personal development.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们在章节结尾部分提出了最佳实践和提供备用支持的说明，然后以开发复杂表单的基础作为结束，文件上传功能作为使用本章提供的一些技术进行未来个人发展的基础。
- en: In the next chapter, we're going to expand on a topic that we briefly covered
    during form development; it's time to take a look at that tried and trusted technology
    called AJAX…
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将扩展一个我们在表单开发中简要介绍过的主题；是时候来看看那个经得起考验的技术，叫做 AJAX…
