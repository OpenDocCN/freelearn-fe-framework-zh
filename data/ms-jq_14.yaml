- en: Chapter 14. Testing jQuery
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第14章。测试 jQuery
- en: To test or not to test, that's the question…
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试还是不要测试，这是个问题…
- en: To paraphrase that world-famous detective, the answer to this question should
    be elementary!
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 为了用这位世界著名的侦探的话来说，对于这个问题的答案应该是很简单的！
- en: 'If you''ve spent any time with jQuery, you will no doubt be aware of its unit:
    the need to test code, and that the most popular way is to use its testing library,
    QUnit. Throughout this chapter, we''ll recap how to use it and then look at some
    of the best practices we should use as well as explore how we can really cut down
    our workflow effort, by automating the tests we perform on our code.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你花了一些时间学习 jQuery，你肯定知道它的单元测试的重要性，而且最流行的方法就是使用它的测试库 QUnit。在本章中，我们将回顾如何使用它，然后看一些我们应该使用的最佳实践，以及探讨如何真正减少我们的工作流程，通过自动化我们对代码的测试。
- en: 'In this chapter, we''ll cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Revisiting QUnit
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重新审视 QUnit
- en: Automated testing using NodeJS and RequireJS
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 NodeJS 和 RequireJS 进行自动化测试
- en: Best practices when using QUnit
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 QUnit 时的最佳实践
- en: Are you ready to get stuck in? Let's get started…
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好了吗？让我们开始吧…
- en: Revisiting QUnit
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重新审视 QUnit
- en: Testing any code is vital to the successful construction of any online application
    or site; after all, it goes without saying that we don't want bugs appearing in
    the end result, right?
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 对任何代码进行测试对于成功构建任何在线应用程序或站点至关重要；毕竟，我们不希望在最终结果中出现错误，对吧？
- en: Tests can be performed manually, but there is an increased risk of the human
    factor, where we can't always be sure that the tests were performed 100 percent
    identically. To reduce (or even eliminate) this risk, we can automate tests using
    jQuery's unit testing suite, QUnit. We can, of course, run the QUnit tests manually,
    but the beauty of QUnit is that it can be completely automated, as we will see
    later in this chapter.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 测试可以手动进行，但存在人为因素的增加风险，我们无法始终确定测试是否完全相同。为了减少（甚至消除）这种风险，我们可以使用 jQuery 的单元测试套件
    QUnit 来自动化测试。当然，我们可以手动运行 QUnit 测试，但 QUnit 的美妙之处在于它可以完全自动化，我们将在本章后面看到。
- en: For now, let's take a moment to recap the basics of how to get QUnit installed
    and run some basic tests.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们花一点时间回顾一下如何安装 QUnit 并运行一些基本测试的基础知识。
- en: Installing QUnit
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 QUnit
- en: There are three ways to install QUnit. We can simply include the two links to
    it in our code, using the JavaScript and CSS files available at [https://qunitjs.com](https://qunitjs.com).
    These can be referenced directly, as they are hosted on QUnit's CDN links that
    are provided by MaxCDN.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 QUnit 有三种方式。我们可以简单地在代码中包含两个链接，使用 [https://qunitjs.com](https://qunitjs.com)
    提供的 JavaScript 和 CSS 文件。这些文件可以直接引用，因为它们是托管在由 MaxCDN 提供的 QUnit 的 CDN 链接上。
- en: 'The alternative is to use NodeJS. To do this, we can browse to the NodeJS site
    at [http://www.nodejs.org](http://www.nodejs.org), download the appropriate version
    for our platform, and then run this command on the NodeJS command prompt:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是使用 NodeJS。为此，我们可以浏览到 NodeJS 网站 [http://www.nodejs.org](http://www.nodejs.org)，下载适合我们平台的版本，然后在
    NodeJS 命令提示符上运行以下命令：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We can even use Bower to install QUnit; to do so, we need to first install
    NodeJS and then run this command to install Bower:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们甚至可以使用 Bower 来安装 QUnit；要做到这一点，我们首先需要安装 NodeJS，然后运行以下命令来安装 Bower：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Once Bower is installed, QUnit can then be installed with this command:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装了 Bower，就可以用这个命令安装 QUnit：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: At this stage, we're ready to start creating our automation tests with QUnit.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，我们准备开始用 QUnit 创建我们的自动化测试。
- en: Note
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you want to really push the boat out, you can test the latest committed version
    of QUnit—the links are available at [http://code.jquery.com/qunit/](http://code.jquery.com/qunit/);
    it should be noted that this is not for production use!
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要真正地深入了解，你可以测试最新提交的 QUnit 版本——链接在 [http://code.jquery.com/qunit/](http://code.jquery.com/qunit/)；需要注意的是这不适用于生产环境！
- en: Creating a simple demo
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个简单的演示
- en: 'Now that we have QUnit installed, we''re ready to run a simple test. To prove
    that it''s working, we''re going to modify a simple demo in order to test for
    the number of letters in a textbox and indicate whether it is above or below a
    given limit, as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了 QUnit，我们准备运行一个简单的测试。为了证明它的工作原理，我们将修改一个简单的演示，以便测试文本框中的字母数，并指示它是否超过或低于给定的限制，如下所示：
- en: We'll start by extracting copies of the code required for our demo from the
    code download that accompanies this book; go ahead and extract the `qunit.html`
    file along with the `css` and `js` folders and store these in your project area:![Creating
    a simple demo](img/image00492.jpeg)
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先从附带本书的代码下载中提取我们演示所需的代码副本；请提取 `qunit.html` 文件以及 `css` 和 `js` 文件夹，并将它们存储在项目区域中：![创建一个简单的演示](img/image00492.jpeg)
- en: Tip
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Don't worry about the presence of the `node_modules` folder; we will be creating
    this later in the chapter, when Node is installed.
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不必担心 `node_modules` 文件夹的存在；在后面的章节中，当安装 Node 时，我们将创建它。
- en: 'We now need to modify our test markup, so go ahead and open up `qunit.html`
    and then modify it, as indicated:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要修改我们的测试标记，所以请打开 `qunit.html`，然后按照指示进行修改：
- en: '[PRE3]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Next, open up a text editor of your choice and add the following code, saving
    it as `qunittest.js` in the `js` folder. The first block performs a check on the
    length of the text field and displays a count; it turns the background of that
    count red if it is over the prescribed length of eight characters:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，打开你喜欢的文本编辑器，添加以下代码，并将其保存为 `js` 文件夹中的 `qunittest.js`。第一个代码块对文本字段的长度进行检查，并显示计数；如果超过了规定的八个字符的长度，则将该计数的背景设置为红色：
- en: '[PRE4]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Add these lines of code immediately below the previous block; this calls QUnit
    to test for the length of our text field and displays the results below the letter
    count:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在上一个代码块的下方立即添加以下代码行；这将调用 QUnit 来测试我们的文本字段的长度，并在字母计数下方显示结果：
- en: '[PRE5]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: With the files in place, we're ready to run the tests; go ahead and run `qunit.html`
    in a browser. If all went well, we should see the results of our test, which in
    this instance will show a pass:![Creating a simple demo](img/image00493.jpeg)
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 文件已就绪，我们可以运行测试了；请在浏览器中运行 `qunit.html`。如果一切顺利，我们应该看到我们测试的结果，这种情况下将显示一个通过：![创建一个简单的演示](img/image00493.jpeg)
- en: 'Not every test that we perform in real life will be successful; there will
    be occasions when our tests fail, if we''ve not provided the right values or performed
    a calculation that gives an unexpected result. To see how this looks in QUnit,
    go ahead and add these lines to the `qunittest.js` file, as shown here:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在现实生活中，我们进行的并非每次测试都会成功；如果我们没有提供正确的数值或执行了给出意外结果的计算，就会出现测试失败的情况。要查看在 QUnit 中的效果，请按照以下步骤将这些代码添加到
    `qunittest.js` 文件中，如下所示：
- en: '[PRE6]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now, refresh your browser window; this time around, you should see the tests
    completed but with one failure, as shown in the following screenshot:![Creating
    a simple demo](img/image00494.jpeg)
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，刷新你的浏览器窗口；这一次，你应该看到测试已完成，但有一个失败，如下图所示：![创建一个简单的演示](img/image00494.jpeg)
- en: Note
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: There is a completed version of this example in the code download, in the `completed
    version` folder, which explores the outcome of the tests.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码下载的 `completed version` 文件夹中有这个示例的已完成版本，它探讨了测试的结果。
- en: Although this was designed as a simple demo, it nevertheless highlights how
    easy it is to create simple tests that give the appropriate responses; let's pause
    for a moment to consider what we have covered in this exercise.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这被设计为一个简单的演示，但它仍然突出了创建简单测试并给出适当响应的简易性；让我们暂停片刻，考虑一下我们在这个练习中涵盖了什么。
- en: The key to each test lies in the use of the `assert.ok()` function—this performs
    a simple Boolean check. In our examples, we check whether the text length is 8
    characters or less or 8 characters or more and either show pass or fail depending
    on the outcome. Additionally, we can either ask QUnit to show a standard text
    or override it with a personalized message. This approach should be sufficient
    to get started with unit testing your code; as time progresses, we can always
    develop the tests further, if desired.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 每个测试的关键在于使用 `assert.ok()` 函数—它执行一个简单的布尔检查。在我们的例子中，我们检查文本长度是否为 8 个字符或更少，或者为 8
    个字符或更多，并根据结果显示通过或失败。此外，我们可以要求 QUnit 显示标准文本，或者用个性化消息进行覆盖。这种方法应该足以开始对代码进行单元测试；随着时间的推移，如果需要，我们总是可以进一步开发测试。
- en: The beauty of this library is that we can use it with either jQuery or JavaScript;
    our examples in this chapter are naturally based around using the former, but
    QUnit is flexible enough to work with the latter, should we decide to move away
    from using jQuery in the future. QUnit is part of the jQuery family of products;
    there are similarities to other simple testing libraries, such as JUnit (available
    at [http://junit.org/](http://junit.org/)).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这个库的美妙之处在于我们可以用它来使用jQuery或JavaScript；本章中的示例基于使用前者，但QUnit足够灵活，可以用于后者，如果我们决定将来不再使用jQuery。QUnit是jQuery产品系列的一部分；与其他简单的测试库（如[Junit](http://junit.org/)）类似。
- en: There is a huge amount that we can do when we harness the power of QUnit—what
    we've seen here only scratches the surface of what is possible to achieve.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们利用QUnit的力量时，我们可以做大量事情——我们在这里看到的只是可能实现的表面一角。
- en: Note
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'If you want to learn more about the basics of QUnit, then I suggest that you
    refer to *Instant Testing with QUnit*, *Dmitry Sheiko*, available from Packt Publishing.
    There are lots of tutorials available online too; you can try this one, as a starting
    point: [http://code.tutsplus.com/tutorials/how-to-test-your-javascript-code-with-QUnit--net-9077](http://code.tutsplus.com/tutorials/how-to-test-your-javascript-code-with-QUnit--net-9077).'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想了解更多关于QUnit基础知识，那么我建议您参考*Dmitry Sheiko*的《Instant Testing with QUnit》，该书由Packt
    Publishing出版。也有很多在线教程可供参考；您可以从这个链接开始：[http://code.tutsplus.com/tutorials/how-to-test-your-javascript-code-with-QUnit--net-9077](http://code.tutsplus.com/tutorials/how-to-test-your-javascript-code-with-QUnit--net-9077)。
- en: 'As a taster of what is possible, we will focus on one particular feature that
    will help you to take your jQuery development skills further: instead of running
    the tests manually each time, how about automating them completely so that they
    run automatically?'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 作为可能性的一个示例，我们将专注于一个特定功能，这将帮助您进一步提高您的jQuery开发技能：不要每次都手动运行测试，而是完全自动化它们，让它们自动运行。
- en: Automating tests with QUnit
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用QUnit进行自动化测试
- en: Hold on, surely QUnit automates the running of these tests for us anyway?
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 慢着，QUnit不是已经为我们自动运行了这些测试吗？
- en: The answer is yes and no. QUnit automated the tests but only to an extent; we
    had to run the set of tests manually each time. This is all well and good, but
    you know what? I'm feeling lazy and don't have the time or inclination to continually
    run tests by hand, as I am sure you won't either. We can do better than this;
    it is possible to automate our testing using NodeJS/Grunt and PhantomJS.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 答案是肯定和否定。QUnit自动化了测试，但只到一定程度；我们每次都需要手动运行一组测试。虽然这很有用，但你知道吗？我有点懒，也没有时间或意愿一直手动运行测试，我相信您也是如此。我们可以做得更好；可以使用NodeJS/Grunt和PhantomJS自动化我们的测试。
- en: Granted, it will take some effort to set up, but it is worth the time saved
    when tests run automatically as soon as any identified content has been altered.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，设置需要一些努力，但当任何已识别的内容发生变化时，自动运行测试的节省时间是值得的。
- en: '![Automating tests with QUnit](img/image00495.jpeg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![使用QUnit进行自动化测试](img/image00495.jpeg)'
- en: 'Let''s take a look at what is involved in automating our test:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看自动化我们测试所涉及的内容：
- en: We'll begin by installing NodeJS. To do this, browse to [http://nodejs.org/](http://nodejs.org/)
    and download the appropriate binary for your system; it is available for Windows,
    Mac OS, and Linux.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将从安装NodeJS开始。要做到这一点，请浏览至[http://nodejs.org/](http://nodejs.org/)，并下载适合您系统的二进制文件；它适用于Windows、Mac
    OS和Linux。
- en: Once installed, go ahead and open up the NodeJS command prompt and then change
    to the `qunit` folder we created at the start of this chapter, in *Creating a
    simple demo*.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，打开NodeJS命令提示符，然后切换到我们在*创建一个简单演示*中创建的`qunit`文件夹。
- en: 'At command prompt, enter the following command:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令提示符下，输入以下命令：
- en: '[PRE7]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: NodeJS needs two files to be created in order to operate correctly; they are
    `package.json` and `gruntfile.js`. Let's go ahead and create them now.
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: NodeJS需要创建两个文件才能正确运行；它们是`package.json`和`gruntfile.js`。让我们现在就去创建它们。
- en: 'Switch to a normal text editor of your choice and then in a new file, add the
    following code, saving it as `package.json`:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到您选择的普通文本编辑器，然后在一个新文件中添加以下代码，将其保存为`package.json`：
- en: '[PRE8]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Revert to the NodeJS command prompt and then enter the following:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到NodeJS命令提示符，然后输入以下内容：
- en: '[PRE9]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In a separate file, add the following code and save it as `gruntfile.js`:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在一个单独的文件中，添加以下代码并将其保存为`gruntfile.js`：
- en: '[PRE10]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Revert to the NodeJS command prompt again and enter the following:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次切换到NodeJS命令提示符，然后输入以下内容：
- en: '[PRE11]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: If all went well, we should see something akin to the following screenshot appear:![Automating
    tests with QUnit](img/image00496.jpeg)
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果一切顺利，我们应该看到类似以下截图的内容出现：![使用 QUnit 自动化测试](img/image00496.jpeg)
- en: 'Let''s now start Grunt and set it to watch for any changes in our code; to
    do this, run this command in the NodeJS command prompt:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们启动 Grunt 并设置它监视代码的任何更改；要做到这一点，请在 NodeJS 命令提示符中运行以下命令：
- en: '[PRE12]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Open up a copy of `qunittest.js`, which we created earlier in this chapter,
    and then save the file—I know this might sound crazy, but it is required to trigger
    the process in Grunt.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开我们在本章前面创建的 `qunittest.js` 的副本，然后保存文件 —— 我知道这听起来有点疯狂，但这是触发 Grunt 进程所必需的。
- en: If all went well, we should see this result appear in the NodeJS window:![Automating
    tests with QUnit](img/image00497.jpeg)
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果一切顺利，我们应该在 NodeJS 窗口中看到这个结果出现：![使用 QUnit 自动化测试](img/image00497.jpeg)
- en: 'Revert to `qunittest.js` and then change this line as shown here:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 回滚到 `qunittest.js`，然后按照这里所示更改此行：
- en: '[PRE13]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Save your file and then watch the Grunt window, which should now indicate a
    failed test:![Automating tests with QUnit](img/image00498.jpeg)
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件，然后观察 Grunt 窗口，现在应该指示测试失败：![使用 QUnit 自动化测试](img/image00498.jpeg)
- en: Let's change tack and move on to something else; although we've not covered
    the use of QUnit in any great depth, it is nevertheless important to try and follow
    best practices where possible, when using QUnit. Let's take a moment to consider
    some of these best practices in order to see how they can improve our coding skills.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们转变方向，继续前进；尽管我们没有深入讨论过如何使用 QUnit，但在使用 QUnit 时，尽可能遵循最佳实践仍然很重要。让我们花一点时间考虑一些这些最佳实践，以便了解它们如何提高我们的编码技能。
- en: Exploring best practices when using QUnit
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索使用 QUnit 时的最佳实践
- en: 'The aim of any developer should be to follow best practices when possible;
    it''s not always practical to do this, so it is important to learn where to compromise
    if circumstances dictate. Assuming this won''t happen too often, there are a number
    of pointers we can try to follow, as a best practice, when using QUnit:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 任何开发者的目标应该是在可能的情况下遵循最佳实践；但实际情况并非总是如此，因此在必要时学会在什么情况下妥协是很重要的。假设这种情况不会经常发生，那么在使用
    QUnit 时，我们可以尝试遵循一些最佳实践指南：
- en: '**Make each test independent of each other**: Each test we run should only
    test one specific behavior; if we test the same behavior in multiple tests, then
    we will have to change all the tests if the behavior needs to be changed.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使每个测试相互独立**：我们运行的每个测试都应该只测试一个特定的行为；如果我们在多个测试中测试相同的行为，那么如果行为需要更改，我们就必须更改所有的测试。'
- en: '**Don''t make unnecessary assertions**: Ask yourself this question, "What behavior
    are we trying to test?". A unit test is meant to be a design schematic of how
    a certain behavior should work and not detail everything the code happens to do.
    Try to keep assertions to one per test where possible; there is no point in running
    a test if an assertion is already tested elsewhere in our code.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不要做不必要的断言**：问问自己这个问题，“我们要测试什么行为？” 单元测试应该是对某个行为应该如何工作的设计草图，而不是详细描述代码发生的每件事情。尽可能地在每个测试中保持一个断言；如果我们的代码中已经在其他地方测试过某个断言，那么运行测试就没有意义了。'
- en: '**Test only one code unit at a time**: The architecture design of your code
    must support testing units (that is, classes or very small groups of classes)
    independently and not chained together. If not, you risk creating a lot of overlap,
    which will cascade and cause failures elsewhere in your code. If the design of
    your application or site doesn''t allow this, then the quality of your code will
    suffer; it may be necessary to use **Inversion of Control** (**IoC**) to test
    your work instead.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一次只测试一个代码单元**：您的代码的架构设计必须支持独立测试单元（即类或非常小的类组），而不是将它们链接在一起。如果不这样做，您就会面临大量重叠的风险，这将导致代码的其他地方发生故障。如果您的应用程序或站点的设计不允许这样做，那么您的代码质量将会受到影响；可能需要使用**控制反转**（**IoC**）来测试您的工作。'
- en: Note
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注
- en: The usual practice is for the custom code to call into generic, reusable libraries
    (such as QUnit); IoC flips the process so that in this instance, the tests are
    performed by QUnit calling our custom code instead.
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通常的做法是让自定义代码调用通用的、可重用的库（例如 QUnit）；IoC 将这个过程反转，以便在这种情况下，测试由 QUnit 调用我们的自定义代码执行。
- en: '**Mock out all external services and state data**: A key part of unit testing
    is to reduce the effect of external services on your code, where possible—the
    behavior of these services can overlap with your tests and impact the results.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模拟所有外部服务和状态数据**: 单元测试的关键部分是尽可能减少外部服务对你的代码的影响——这些服务的行为可能会与你的测试重叠，并影响结果。'
- en: '**Avoid mocking up too many objects or state data**: If you have any data that
    controls the state of your application or site, then try to keep any mock data
    to below 5 percent; anything higher and you risk making your tests less trustworthy.
    It is also wise to reset these back to a known value before running successive
    tests, as different tests can influence these values for other tests. If you find
    that you have to run tests in a specific order or that you have a dependency on
    an active database or network connections, then your design or code is not right
    and you should revisit both to understand why and how the dependencies can be
    removed.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**避免模拟太多的对象或状态数据**: 如果你有任何控制应用程序或站点状态的数据，请尝试将任何模拟数据保持在低于5%的水平；任何更高的数值都会使你的测试不太可靠。在运行连续测试之前，将它们重置回一个已知的值也是明智的，因为不同的测试可能会影响其他测试的这些值。如果你发现你必须按特定顺序运行测试，或者你对活动数据库或网络连接有依赖，那么你的设计或代码就不正确，你应该重新审视两者，理解为什么以及如何去除这些依赖关系。'
- en: '**Avoid unnecessary preconditions**: Avoid having common setup code that runs
    at the beginning of lots of unrelated tests. This will confuse your tests, as
    it won''t be clear which assumptions your test relies on and indicates that you''re
    not testing just a single unit. It is key to create the right conditions, even
    though this can be difficult—the trick is to keep them simple as much as it is
    practical.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**避免不必要的前提条件**: 避免在许多不相关的测试的开头运行常见的设置代码。这会使你的测试变得混乱，因为不清楚你的测试依赖于哪些假设，并且表明你并不只是在测试单个单元。关键是创造正确的条件，即使这可能很困难——诀窍在于尽可能简单地保持它们。'
- en: '**Don''t unit test configuration settings**: There is no benefit in inspecting
    your configuration settings when running unit tests; it will likely result in
    duplicated code, which isn''t necessary.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不要对配置设置进行单元测试**: 在运行单元测试时检查你的配置设置没有任何好处；这可能会导致重复的代码，这是没有必要的。'
- en: '**Don''t specify your implementation – specify the result instead**: Unit testing
    is designed to focus on the results, not the implementation—does your function
    produce what you expect it to do? Take an example of the following code snippet:'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不要指定你的实现方式 - 而是指定结果**: 单元测试旨在专注于结果，而不是实现方式——你的函数是否产生了你期望的结果？以以下代码片段为例：'
- en: '[PRE14]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This seems perfectly reasonable, right? It's perfectly valid, if it weren't
    for the fact that it focuses on *how* the code was implemented, not the result.
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这看起来完全合理，对吧？如果不是因为它专注于*代码是如何实现的*，而不是结果，那就是完全有效的。
- en: 'A better way to test the code is to use this approach instead:'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 测试代码的更好方式是使用这种方法：
- en: '[PRE15]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In this example, we're not focusing on the route taken to get our result but
    on the end result itself; does it produce what we need to see?
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这个例子中，我们不关注获得结果的路线，而是关注结果本身；它是否产生了我们需要看到的内容？
- en: '**Name your unit tests clearly and consistently**: A successful unit test will
    clearly indicate its purpose; a useful way to name tests is using what I call
    the **SSR** principle, or **Subject, Scenario, and Result**. This means that we
    can identify what is being tested, when the tests should be run, and what the
    expected result will be. If we simply name it with just the subject, then it will
    become difficult to maintain if we don''t know what we''re trying to maintain!'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**清晰且一致地命名你的单元测试**: 一个成功的单元测试将清晰地表明其目的；一个有用的命名测试的方法是使用我称之为**SSR**原则，即**主题、场景和结果**。这意味着我们可以确定正在测试什么，测试应该何时运行，以及预期结果是什么。如果我们仅仅用主题来命名它，那么如果我们不知道我们试图维护什么，它就会变得难以维护！'
- en: These tips only scratch the surface of what should be followed as a good practice;
    for a more in-depth discussion, it is worthwhile to read the article by Adam Kolawa
    on applying unit testing, which is available at [http://www.parasoft.com/wp-content/uploads/pdf/unittestting.pdf](http://www.parasoft.com/wp-content/uploads/pdf/unittestting.pdf).
    The key point to remember though is to keep it simple, logical, and not try to
    over-complicate your tests, or they will become meaningless!
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这些提示只是浅尝辄止，作为良好实践应该遵循的内容；要进行更深入的讨论，值得阅读亚当·科拉瓦关于应用单元测试的文章，该文章位于[http://www.parasoft.com/wp-content/uploads/pdf/unittestting.pdf](http://www.parasoft.com/wp-content/uploads/pdf/unittestting.pdf)。但要记住的关键点是要保持简单、逻辑，并且不要试图过度复杂化你的测试，否则它们将变得毫无意义！
- en: Summary
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We've now reached the end of the chapter; even though it was short, it covered
    some useful points on unit testing practices and how we can save ourselves time
    and effort by automating our testing. Let's quickly recap what we learned.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经到了本章的结尾；虽然篇幅不长，但涵盖了一些关于单元测试实践的有用观点，以及我们如何通过自动化测试来节省时间和精力。让我们快速回顾一下我们学到的内容。
- en: We kicked off with a quick revisit of the principles of QUnit and how to install
    it; we briefly covered the most popular method but also looked at how to use CDN
    and Bower to make the libraries available in our code.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们开始时简要回顾了 QUnit 的原则以及如何安装它；我们简要介绍了最流行的方法，但也介绍了如何使用 CDN 和 Bower 在我们的代码中使用库。
- en: Next up came a look at some basic examples of testing; while these are very
    simple, they highlighted the principles we should use in unit testing. These were
    explored further with a discussion on the best practices to follow when unit testing
    with QUnit.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们来看一些基本的测试示例；虽然这些示例非常简单，但它们突显了我们在单元测试中应该遵循的原则。这些原则在使用 QUnit 进行单元测试时进一步探讨。
- en: We've now reached the end of the book. I hope you enjoyed our journey through
    *Mastering jQuery* and have seen that it is not just about writing code but about
    some of the more soft topics, which will help enhance your skills as a jQuery
    developer.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经到了本书的结尾。希望你喜欢我们在*掌握 jQuery*中的旅程，并且发现这不仅仅是关于编写代码，还涉及一些更加软性的话题，这些话题将有助于提高你作为
    jQuery 开发者的技能。
