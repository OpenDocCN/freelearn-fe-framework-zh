["```js\n    $ cp -R ch14 ch15\n    ```", "```js\n    import mongoose, { Schema } from 'mongoose'\n    const messageSchema = new Schema({\n    ```", "```js\n      username: { type: String, required: true },\n      message: { type: String, required: true },\n      room: { type: String, required: true },\n      sent: { type: Date, expires: 5 * 60, default: Date.now, required: true },\n    })\n    ```", "```js\n    export const Message = mongoose.model('message', messageSchema)\n    ```", "```js\n    import { Message } from '../db/models/message.js'\n    ```", "```js\n    export async function createMessage({ username, message, room }) {\n      const messageDoc = new Message({ username, message, room })\n      return await messageDoc.save()\n    }\n    ```", "```js\n    export async function getMessagesByRoom(room) {\n      return await Message.find({ room }).sort({ sent: 1 })\n    }\n    ```", "```js\n    import { createMessage, getMessagesByRoom } from './services/messages.js'\n    ```", "```js\n    export function handleSocket(io) {\n      io.on('connection', async (socket) => {\n        const room = socket.handshake.query?.room ?? 'public'\n        socket.join(room)\n        console.log(socket.id, 'joined room:', room)\n        const messages = await getMessagesByRoom(room)\n        messages.forEach(({ username, message }) =>\n          socket.emit('chat.message', { username, message }),\n        )\n    ```", "```js\n        socket.on('chat.message', (message) => {\n          console.log(`${socket.id}: ${message}`)\n          io.to(room).emit('chat.message', {\n            username: socket.user.username,\n            message,\n          })\n          createMessage({ username: socket.user.username, message, room })\n        })\n    ```", "```js\n    $ npm run dev\n    ```", "```js\n    $ cd backend/\n    $ npm run dev\n    ```", "```js\n        const messages = await getMessagesByRoom(room)\n        messages.forEach(({ username, message }) =>\n          socket.emit('chat.message', { username, message, replayed: true }),\n        )\n    ```", "```js\n    export function ChatMessage({ username, message, replayed }) {\n      return (\n        <div style={{ opacity: replayed ? 0.5 : 1.0 }}>\n    ```", "```js\n    ChatMessage.propTypes = {\n      username: PropTypes.string,\n      message: PropTypes.string.isRequired,\n      replayed: PropTypes.bool,\n    }\n    ```", "```js\n    import { createMessage, getMessagesByRoom } from './messages.js'\n    ```", "```js\n    export function sendPrivateMessage(\n      socket,\n      { username, room, message, replayed },\n    ) {\n      socket.emit('chat.message', { username, message, room, replayed })\n    }\n    ```", "```js\n    export function sendSystemMessage(io, { room, message }) {\n      io.to(room).emit('chat.message', { message, room })\n    }\n    ```", "```js\n    export function sendPublicMessage(io, { username, room, message }) {\n      io.to(room).emit('chat.message', { username, message, room })\n      createMessage({ username, message, room })\n    }\n    ```", "```js\n    export async function joinRoom(io, socket, { room }) {\n      socket.join(room)\n    ```", "```js\n      sendSystemMessage(io, {\n        room,\n        message: `User \"${socket.user.username}\" joined room \"${room}\"`,\n      })\n    ```", "```js\n      const messages = await getMessagesByRoom(room)\n      messages.forEach(({ username, message }) =>\n        sendPrivateMessage(socket, { username, message, room, replayed: true })\n      )\n    }\n    ```", "```js\n    export async function getUserInfoBySocketId(io, socketId) {\n      const sockets = await io.in(socketId).fetchSockets()\n      if (sockets.length === 0) return null\n      const socket = sockets[0]\n      const userInfo = {\n        socketId,\n        rooms: Array.from(socket.rooms),\n        user: socket.user,\n      }\n      return userInfo\n    }\n    ```", "```js\n    import { createMessage, getMessagesByRoom } from './services/messages.js'\n    ```", "```js\n    import {\n      joinRoom,\n      sendPublicMessage,\n      getUserInfoBySocketId,\n    } from './services/chat.js'\n    ```", "```js\n    export function handleSocket(io) {\n      io.on('connection', (socket) => {\n        joinRoom(io, socket, { room: 'public' })\n    ```", "```js\n        socket.on('chat.message', (room, message) =>\n          sendPublicMessage(io, { username: socket.user.username, room, message }),\n        )\n    ```", "```js\n        socket.on('user.info', async (socketId, callback) =>\n          callback(await getUserInfoBySocketId(io, socketId)),\n        )\n      })\n    ```", "```js\n      io.use((socket, next) => {\n        if (!socket.handshake.auth?.token) {\n          return next(new Error('Authentication failed: no token provided'))\n        }\n        jwt.verify(\n          socket.handshake.auth.token,\n          process.env.JWT_SECRET,\n          async (err, decodedToken) => {\n            if (err) {\n              return next(new Error('Authentication failed: invalid token'))\n            }\n            socket.auth = decodedToken\n            socket.user = await getUserInfoById(socket.auth.sub)\n            return next()\n          },\n        )\n      })\n    }\n    ```", "```js\n      function clearMessages() {\n        setMessages([])\n      }\n    ```", "```js\n      async function getRooms() {\n        const userInfo = await socket.emitWithAck('user.info', socket.id)\n        const rooms = userInfo.rooms.filter((room) => room !== socket.id)\n        return rooms\n      }\n    ```", "```js\n      async function sendMessage(message) {\n        if (message.startsWith('/')) {\n          const command = message.substring(1)\n          switch (command) {\n            case 'clear':\n              clearMessages()\n              break\n            case 'rooms': {\n              const rooms = await getRooms()\n              receiveMessage({\n                message: `You are in: ${rooms.join(', ')}`,\n              })\n              break\n            }\n    ```", "```js\n            default:\n              receiveMessage({\n                message: `Unknown command: ${command}`,\n              })\n              break\n          }\n        } else {\n          socket.emit('chat.message', 'public', message)\n        }\n      }\n    ```", "```js\n        socket.on('chat.join', (room) => joinRoom(io, socket, { room }))\n    ```", "```js\n    export function ChatMessage({ room, username, message, replayed }) {\n      return (\n        <div style={{ opacity: replayed ? 0.5 : 1.0 }}>\n          {username ? (\n            <span>\n              <code>[{room}]</code> <b>{username}</b>: {message}\n            </span>\n    ```", "```js\n    ChatMessage.propTypes = {\n      username: PropTypes.string,\n      message: PropTypes.string.isRequired,\n      replayed: PropTypes.bool,\n      room: PropTypes.string,\n    }\n    ```", "```js\n    export function useChat() {\n      const { socket } = useSocket()\n      const [messages, setMessages] = useState([])\n    public room.\n    ```", "```js\n      function switchRoom(room) {\n        setCurrentRoom(room)\n      }\n    ```", "```js\n      function joinRoom(room) {\n        socket.emit('chat.join', room)\n        switchRoom(room)\n      }\n    ```", "```js\n      async function sendMessage(message) {\n        if (message.startsWith('/')) {\n          const [command, ...args] = message.substring(1).split(' ')\n          switch (command) {\n    ```", "```js\n            case 'join': {\n              if (args.length === 0) {\n                return receiveMessage({\n                  message: 'Please provide a room name: /join <room>',\n                })\n              }\n    ```", "```js\n              const room = args[0]\n              const rooms = await getRooms()\n              if (rooms.includes(room)) {\n                return receiveMessage({\n                  message: `You are already in room \"${room}\".`,\n                })\n              }\n    ```", "```js\n              joinRoom(room)\n              break\n            }\n    ```", "```js\n            case 'switch': {\n              if (args.length === 0) {\n                return receiveMessage({\n                  message: 'Please provide a room name: /switch <room>',\n                })\n              }\n              const room = args[0]\n              const rooms = await getRooms()\n              if (!rooms.includes(room)) {\n                return receiveMessage({\n                  message: `You are not in room \"${room}\". Type \"/join ${room}\" to join it first.`,\n                })\n              }\n              switchRoom(room)\n              receiveMessage({\n                message: `Switched to room \"${room}\".`,\n              })\n              break\n            }\n    ```", "```js\n        } else {\n          socket.emit('chat.message', currentRoom, message)\n        }\n    ```"]