- en: '*Chapter 11*: Creating Authenticated Experiences'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Within the context of this book, **authentication** is the act of verifying
    that a user is who they say they are within a website. Once their identity has
    been verified, we can show the individual content that's only meant for them.
    This might be their profile page, delivery address, bank details, and more. In
    this chapter, we're going to focus more on how to implement routing for use with
    authentication services instead of focusing on how to implement authentication
    services or what content to display when a user is authenticated. We will remind
    ourselves of how this is done in traditional React applications before applying
    this knowledge to Gatsby sites with two different client-side implementations.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Routing and authentication in React applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authentication using client-only routes within Gatsby
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Site-wide authentication using context within Gatsby
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To complete this chapter, you will need to have completed [*Chapter 10*](B15983_10_ePub_RK.xhtml#_idTextAnchor141),
    *Creating Gatsby Plugins*. You will also need a GitHub account.
  prefs: []
  type: TYPE_NORMAL
- en: The code for this chapter can be found at [https://github.com/PacktPublishing/Elevating-React-Web-Development-with-Gatsby-4/tree/main/Chapter11](https://github.com/PacktPublishing/Elevating-React-Web-Development-with-Gatsby-4/tree/main/Chapter11).
  prefs: []
  type: TYPE_NORMAL
- en: Routing and authentication in React applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To achieve authenticated experiences, we will be using **routing**. Before jumping
    into how we do this in Gatsby, let's familiarize ourselves with how routing works
    within React applications. Routing is the process of navigating a user around
    different parts of an application.
  prefs: []
  type: TYPE_NORMAL
- en: For this example, I will be bootstrapping a React project using `create-react-app`.
    I have included steps for its installation but feel free to skip them and use
    your own React implementation. *Keep this section's demo separate from your Gatsby
    project*.
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: In the following example, we will be using the `@reach/router` package for routing.
    Gatsby uses `@reach/router` under the hood, so by using the package here in React,
    it will be easy to recognize patterns when we move on to implementing them in
    Gatsby.
  prefs: []
  type: TYPE_NORMAL
- en: 'As React developers, routing is a common part of building applications – let''s
    remind ourselves of the routing basics:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new folder for this demo. Open a terminal within this new folder and
    run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the same terminal, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open `src/App.js` and replace it with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, we have imported `Router` and `Link` from the `@reach/router` package.
    We have also created a `Nav` component that we can use to access the routes. This
    `Nav` component utilizes the `Link` component from `@reach/router` to provide
    navigation between routes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Append `src/App.js` with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, we have defined a couple of dummy components to route between – a `home`
    page and an `about` page. This should all be very familiar to you.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Finally, append `src/App.js` with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is where the magic happens. By wrapping the components in a `Router` component,
    we can switch out which component is displayed based on the current URL path.
    In this instance, if the user is at the `/` path (the route URL) they will see
    the `HomePage` component, while if `path` is `/about`, they will see the `AboutPage`
    component. They can use the `Nav` component within these two pages to navigate
    between the two of them.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Start the project by running `npm start` from the root directory to try it out.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It's important to remember that navigating between routes is fast because all
    the routes are loaded when the router renders. As we move into Gatsby, it's important
    to make sure we only use routers when it is necessary as we might be adding page
    weight to include components that a user may never have any intention of seeing.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have gone through a basic routing example, let's start adding pages
    that can only be accessed once a user has logged in. We will do this with **private
    routes**.
  prefs: []
  type: TYPE_NORMAL
- en: Private routes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A private route behaves the same as the other components that are wrapped in
    a `Router`, except it has an authentication condition. If the condition is not
    satisfied, instead of seeing the requested content, the user will be redirected
    to a login screen to authenticate. Let''s try this out now by turning our about
    page that was previously public into a private route:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we are going to need to define our authentication condition. For this
    example, we are going to keep it simple. To be considered "authenticated," the
    user must have called the `login` function, which we will trigger via a button
    on the login page. To achieve this condition, we are going to create a context
    that can store the current authentication state. Create a new file called `auth-context.js`
    and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, we are setting up the boilerplate of our authorization context. We are
    creating a `useAuth` hook to access the context values that we will be defining
    in the next step.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Within the `auth-context.js` file''s `AuthProvider`, add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, we have created a `useState` value called `authenticated` to track whether
    the user is authenticated or not. We then created a `login` function that sets
    `authenticated` to `true`. It is within this function that you would make a request
    to your authentication service and verify the user before authenticating. Most
    likely, you will also have some information about the user that you could store
    in your state or local storage. If you do add additional information, be sure
    to clear it within the `logout` function. For the time being, the `logout` function
    just sets `authenticated` to `false` and navigates a user back to the login page.
    Within `AuthContext.Provider`, we expose the `login` and `logout` functions, as
    well as the `authenticated` state, to the rest of the application.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Navigate to your React application''s `index.js` file and modify it with the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Our authentication condition is now defined, so we can utilize it to create
    a private route component. Create a new file called `PrivateRoute.js` and add
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This `PrivateRoute` component uses the `authenticated` state from the `useAuth`
    hook to conditionally render a given component. If the user is authenticated,
    the component will be rendered. If, however, they are not authenticated, the user
    will be navigated to the `login` route instead.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Return to your `App.js` file and update the file with the following imports:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, we are importing the `useAuth` hook and our newly created `PrivateRoute`
    component.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Modify the `HomePage` component with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify the `AboutPage` component with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is the path we intend to make private in this demo. If a user is on this
    page, we can assume they have been authenticated and render a logout button to
    allow them to trigger the `logout` function.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add a `LoginPage` component to `App.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is a basic implementation that uses the `login` function from `useAuth`
    to log a user in. In your application, you would probably want to flesh this out
    with inputs where users enter their email and password. You would then pass this
    to the `login` function so that it can be used as part of the authorization request.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Finally, update your `App` function so that it includes your `PrivateRoute`
    component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the project by running `npm start` from the root directory. If you try
    to navigate to `/about`, you will notice that you will be redirected to `/login`
    until you have clicked the login button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We now have a firm grasp on routing and private routes, so let's take the knowledge
    we have gained in this section and apply it to Gatsby.
  prefs: []
  type: TYPE_NORMAL
- en: Authentication using client-only routes within Gatsby
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'While not common practice, we can use routers inside Gatsby pages too. Normally,
    Gatsby abstracts all the routing away so that we don''t have to worry about it,
    but authentication is one example where we need to bring the control over routing
    back into our hands. We will be creating what is known as client-only routes.
    To demonstrate this within our project, we are going to create a page at `/private`.
    As its name might suggest, this path contains a private page that we will lock
    behind authentication. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: This example will conflict with the *Site-wide authentication using context
    within Gatsby* section's code. It's best to choose one of these two methods to
    implement instead of trying to combine them.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new folder inside `src` called `context`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new file called `auth-context.js` and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, we are setting up an authentication context in the same way we did within
    the example code from the *Routing and authentication in React applications* section.
    Note that we are still importing `navigate` from `@reach/router` instead of the
    Gatsby library.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following within `AuthProvider`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We set up this `auth-context.js` file in the same way we did with the React
    demo, except this time, we navigate to `/private` on a successful login.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Important Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Within this section, you will see code that looks very similar to the React
    demo from the previous section. Please note that while they are similar, they
    are not the same. Don't be tempted to copy and paste them from the React example.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following to your `gatsby-browser.js` and `gatsby-ssr.js` files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We want to ensure that the authentication context is available throughout the
    application. By adding the preceding code to both `gatsby-browser.js` and `gatsby-ssr.js`,
    we can be sure it is accessible everywhere.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Create a new file within `src/components` called `PrivateRoute.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code to the newly created `PrivateRoute.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is a Gatsby-friendly implementation of the `PrivateRoute` component. Note
    that we are switching out the `@reach/router` part of `navigate` for Gatsby's
    implementation. This is because Gatsby's implementation will handle the redirect
    in a way that is suitable for a Gatsby project. Without this switch, you will
    be presented with a white screen when `navigate` is called. You will also notice
    that we are passing in a prop called `basepath`. As our router will not sit at
    the top of the application, the `PrivateRoute` component must know the router's
    base path location to ensure it navigates the respective users to it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Create a new folder inside `src/pages` called `private`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside this new folder, create a new file called `[...].js`. Using Gatsby's
    `/private`. This step is vitally important as Gatsby does not know the router
    we will set up, so it needs to understand that if it sees a path beginning with
    `/private`, such as `/private/login`, it needs to be handled by this file instead
    of erroring out with a 404 status code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code to `src/pages/private/[...].js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, we are defining the two possible paths that will be visible. Either you
    will be shown `AuthenticatedPage` or, if you are not logged in, you will see the
    login page. These components both make use of the `useAuth` hook to retrieve the
    functions they require.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Append the following code to `src/pages/private/[...].js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Within this step, we have defined our `basepath` – this must match the Gatsby
    page's path (which, in this instance, is `/private`). We pass this value as a
    prop both to `Router` and `PrivateRoute`. This example is different from the React
    example in that the base path is the path that requires authentication.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Start the project by running `npm start` from the root directory. If you try
    to navigate to `/private`, you will notice that you are redirected to `/private/login`,
    and clicking the login button will redirect you to `/private`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With that, we've learned how to add routing within a particular section of our
    Gatsby site. Now, let's turn our attention to an implementation that you can use
    when your whole site requires authentication.
  prefs: []
  type: TYPE_NORMAL
- en: Site-wide authentication using context within Gatsby
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There may be situations where you want the entirety of your Gatsby site to
    be behind authentication. For example, you may have made a documentation site
    only meant for employees of your company. Let''s look at how we can use context
    to turn every page into a private route:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s create a login component in the `components` folder. Call this
    file `Login.js` and add the following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You'll notice that, unlike the last `Login` component we created, we are not
    retrieving the `login` function from the context. The reason for this will become
    clear when we create the context.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Create a folder called `context` in `src`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file in `context` called `auth-context.js` and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code within `AuthProvider`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following to your `gatsby-browser.js` and `gatsby-ssr.js` files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We want to ensure that the authentication context is available throughout the
    application. By adding this file to both `gatsby-browser.js` and `gatsby-ssr.js`,
    we can ensure it is accessible everywhere.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Start the project by running `npm start` from the root directory and navigate
    to any page on the site. You should find that you are prompted to log in before
    being able to view the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we have looked at two different ways to achieve authenticated experiences
    within Gatsby applications, let's summarize what we have learned.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we explored routing and authenticated experiences. We reminded
    ourselves of how routing works in React and created private routes for use with
    `@reach/router`. Then, we ported this knowledge into Gatsby and created a private
    page that was only accessible by logging in. Finally, we investigated how we can
    use context to wrap our whole application in authentication for situations that
    require it.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn about another advanced concept – how to use
    sockets to create experiences that make use of real-time data.
  prefs: []
  type: TYPE_NORMAL
