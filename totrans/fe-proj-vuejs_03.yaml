- en: 3\. Vue CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Overview
  prefs: []
  type: TYPE_NORMAL
- en: This chapter introduces Vue CLI, including the Vue-UI and Vue.js DevTools, which
    are used when developing Vue applications for production. The Vue-UI allows you
    to create, develop, and manage Vue projects through an accompanying graphical
    user interface. Vue.js DevTools is a standalone app and browser extension for
    debugging Vue.js applications. We go into the details of the use cases and benefits
    of using Vue CLI features, which will teach you how to utilize these Vue commands.
    In addition to the command-line controls, we will set up and run Vue projects
    utilizing the new Vue GUI. We will combine the knowledge accrued in previous chapters
    to create new Vue applications that use v-model directives and two-way binding
    concepts. We will then dive into how to prototype Vue components. We will also
    learn how to build a Vue prototype for production and serve it locally. As we
    proceed, you will see how to set up and debug your Vue app and showcase its features.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you will have a firm grasp of how to use Vue CLI's
    features, prototype Vue components, and utilize Vue.js DevTools.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we covered how to manage and manipulate data reactively
    in our component templates using Vue.js. In this chapter, we will be looking at
    how to support the development of such templates using Vue CLI. Vue.js takes advantage
    of the `npm` and webpack ecosystem, as seen in *Chapter 1*, *Starting Your First
    Vue Project*, in the *The Vue Instance in a Simple Vue Application* example. These
    tools help developers to quickly scaffold and build great web applications. Notable
    patterns inside of Vue.js are **vue.config** (which allows you to add webpack
    rules without directly editing the webpack file itself), **two-way data binding**,
    and **single file components (SFCs)**, as seen in *Chapter 1*, *Starting Your
    First Vue Project*, in the *Two-Way Binding Using V-Model* example.
  prefs: []
  type: TYPE_NORMAL
- en: Webpack projects instantiated using the **Vue command-line interface (Vue CLI)**
    will come with hot reloading already installed. Hot reloading is a frontend development
    pattern where your app in the browser will automatically update when code changes
    are detected. The reason you want this is so that you do not lose any of your
    browser state and changes made in your code are immediately reflected in the browser,
    which is useful when working on a **user interface (UI)**. Occasionally, a full-page
    reload will be necessary because JavaScript is a very stateful language.
  prefs: []
  type: TYPE_NORMAL
- en: Vue CLI is a core tool for Vue development, as it allows programmers to maintain
    their projects much more comfortably with a set of descriptive and pre-configured
    commands. An often-overlooked process in development projects is code linting,
    which is a process where a program will flag potential errors or problems in your
    code, which can be quite difficult to add to an existing project. When using Vue
    CLI, your webpack project will come with linting so long as you choose it as an
    option when you create a Vue CLI project.
  prefs: []
  type: TYPE_NORMAL
- en: We are going to configure a Vue project using Vue CLI and run each basic command
    so that you can understand the tool you need to build your Vue applications. Out
    of the box, Vue CLI has support for **Babel**, **TypeScript**, **ESLint**, **PostCSS**,
    **PWAs**, **testing**, and more.
  prefs: []
  type: TYPE_NORMAL
- en: Using Vue CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Projects created using the Vue CLI tool have access to common tasks that will
    help you **serve** (run a project in your browser locally), **build** (compile
    files for production), and **lint** (examine code for errors) your project. The
    Vue CLI service development dependency packages are installed automatically with
    a new project and allow you to run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '`npm run serve` or `yarn serve` – Runs your project code on `localhost:8080`
    with hot reloading. The port number `8080` is arbitrarily assigned, as it is above
    the well-known port numbers `1-1023` used in other areas of computing. If you
    have multiple Vue projects running at the same time, they will have incremental
    port numbers such as `:8080`, `:8081`, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`npm run build` or `yarn build` – Runs a production build that reduces the
    file size of your project and can be served from a host.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`npm run lint` or `yarn lint` – Runs the process of linting, which will highlight
    code errors or warnings, making your code more consistent.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that you understand what Vue CLI is, and the commands available to you,
    we will learn how to set up Vue.js projects from scratch using Vue CLI.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 3.01: Setting up a Project Using Vue CLI'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this exercise, you will create your first Vue.js webpack project using the
    Vue CLI commands. But, first, ensure you have followed the *Preface* guide to
    install `Node` and `Vue CLI 4`. It is recommended that you use `iTerm2` on OS
    X as it is very customizable for your development flow. If you are using Windows,
    it is recommended that you use **PowerShell** as it can be more performant than
    the default Command Prompt and GIT bash.
  prefs: []
  type: TYPE_NORMAL
- en: To access the code files for this exercise, refer to [https://packt.live/3ph2xXt](https://packt.live/3ph2xXt).
  prefs: []
  type: TYPE_NORMAL
- en: 'Open Command Prompt. Your window should look as follows:![Figure 3.1: A blank
    Command Prompt window'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15218_03_01.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.1: A blank Command Prompt window'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Run the command `vue --version`. Ensure you are on the latest version of Vue
    CLI, as the following instructions will not work in versions of Vue CLI 2 or below.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After the preceding command, your screen should look as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.2: Command Prompt when checking the Vue version'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15218_03_02.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.2: Command Prompt when checking the Vue version'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Your `@vue/cli` version should be at least 4.1.2.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Run the following Vue CLI command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Upon running the preceding command, you should see a list of saved presets,
    as shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.3: Displaying the list of saved presets'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15218_03_03.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.3: Displaying the list of saved presets'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Choose the last selection `Manually select features` by pressing the *Down
    arrow key* once and then pressing *Enter* to select:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You will notice features with an asterisk in brackets. Each feature represents
    a preset that you can enable in your app. It does not matter if you do not know
    what each of these represents. For now, we will choose `Babel`, `CSS Pre-processors`,
    and `Linter/Formatter` by navigating with the arrow keys, pressing the spacebar
    on each option, then pressing *Enter* to proceed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Because you chose to enable a preprocessor, you now have a choice of which
    CSS preprocessor you prefer. In this exercise, we will use `Sass/SCSS (with dart-scss)`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`dart-scss` is a pure JavaScript compilation of the `Sass` library, making
    it a much smaller dependency compared to `node-sass` (which is a wrapper on the
    C++ implementation of SCSS), and it does not require rebuilding between Node upgrade
    versions.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We will now choose the `Eslint + Prettier` option, which automatically formats
    the code in a consistent manner:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To automatically format your code when you save your work, choose the option
    to `Lint on Save`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Lint on save` is a useful tool to format your code as you go. Choose both
    linting options in *Step 8* to make sure that all your work is linted as you go,
    in turn making your code more readable and consistent.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, we will choose the `In dedicated config files` option to place the configurations
    as per our preference:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: An argument for `package.json` is to keep all configurations consistently formatted
    in JSON and in one file. For smaller projects, this would be acceptable, however,
    large projects will tend to produce a very long `package.json` file. This is where
    file splitting would be preferable. Splitting configurations into separate files
    both reduces the amount of cognitive load when editing these options and places
    greater emphasis on what is being changed in your commit logs. For example, when
    you edit the `babelrc` file, you know the changes relate to the Babel config,
    as opposed to `package.json` changes, where it could be anything.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Choose the `Save preset (y)` option to save your preset.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can call the preset by any name. In the example, it will be called `My preset`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next time you want to install this preset, try running `vue create favourite
    -p "My preset"` (using the general command-line syntax of `vue create [project-name]
    -p [preset-name]`):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the package installer. If the installer does not start automatically, run
    the `yarn install` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once the package installer has completed, `serve` your project to compile your
    code and serve it on `http://localhost:8080`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If port `8080` is taken already by another application, use the `--port` flag
    to specify another port, such as `9000`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Running the preceding command, we''ll see a default Vue project screen, as
    shown in *Figure 3.4*:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.4: The default Vue project screen will appear on your localhost:8080'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15218_03_04.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.4: The default Vue project screen will appear on your localhost:8080'
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, we saw how to create a Vue.js webpack project using the Vue
    CLI commands using Command Prompt. Next, we will look at how to prototype a Vue.js
    component without creating a webpack project.
  prefs: []
  type: TYPE_NORMAL
- en: Vue Prototyping
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's say, one day you wake up with a great idea for a component or are involved
    in a large project and you want to debug components without the complex interdependencies
    of the existing project. Vue prototyping can help you create new components or
    debug existing ones, even for large projects. This is done by running `.vue` files
    in a separate and isolated compiler directly, without the need for any local dependencies.
    Running `.vue` files in this way may save time because you do not need to install
    a full Vue project as described in *Exercise 3.01*. Instead, all you need to do
    is install the `npm install -g @vue/cli-service-global` or `yarn global add @vue/cli-service-global`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once this has been installed, you will have access to the following two commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '`vue serve` – This command compiles Vue.js code and runs in a localhost environment
    in your browser.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vue build` – This command compiles Vue.js code into a distributable package.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting Started with Prototyping
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started, you will first need to install the global package by opening
    your command terminal and running the following `install` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This will generate the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.5: Installing global dependencies required for Vue prototyping'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15218_03_05.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.5: Installing global dependencies required for Vue prototyping'
  prefs: []
  type: TYPE_NORMAL
- en: The install can take a couple of minutes depending on your internet connection.
    You will know when it is complete as you will be able to write other commands
    in the terminal. If the install fails for whatever reason, simply reopen the terminal
    and run the same command.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start using prototyping, create an example component called `helloWorld.vue`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'In your terminal window (in the same directory as your new `.vue` file), use
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command will display as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.6: The vue serve command is running on a file in the D:\ directory'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15218_03_06.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.6: The vue serve command is running on a file in the D:\ directory'
  prefs: []
  type: TYPE_NORMAL
- en: 'After running the `serve` command, there will be a brief period where the component
    will compile in the terminal window before being accessible in your browser as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.7: The vue serve command will serve your Vue files in the localhost
    environment'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15218_03_07.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.7: The vue serve command will serve your Vue files in the localhost
    environment'
  prefs: []
  type: TYPE_NORMAL
- en: 'After the compilation is complete, navigate to the localhost URL specified
    in the command window using the browser. Here, it is `http://localhost:8080/`.
    In your browser, you should see the text `Hello World!`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: We have now learned how to prototype a Vue component on the fly without needing
    to create a full webpack project. Let's see how we can import fonts or libraries
    for use in a prototype.
  prefs: []
  type: TYPE_NORMAL
- en: Defining Your Own Entry Point
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In your prototype, you may require the use of external libraries such as fonts
    or scripts to complete your prototype component. The `index.html` file is the
    entry point for a Vue.js HTML template. If you do not define an `index.html` file,
    a global default file is used.
  prefs: []
  type: TYPE_NORMAL
- en: 'To define a custom entry point, create an `index.html` file in the same directory.
    Using the following code derived from the default index page, you will see that
    a Google font has been added to the `<head>` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'To use this font in your prototyped component, create a `helloWorld.vue` component
    in the same directory as the `index.html` file and then apply some `css` styling
    to the component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'To view the changes made to these files, run the following command in your
    terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'This will generate the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.8: Run the vue serve command on the file you want to prototype'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15218_03_08.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.8: Run the vue serve command on the file you want to prototype'
  prefs: []
  type: TYPE_NORMAL
- en: 'After running the `serve` command, there will be a brief period where the component
    will compile in the terminal window before being accessible in your browser, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.9: The vue serve command will serve your Vue files in the localhost
    environment'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15218_03_09.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.9: The vue serve command will serve your Vue files in the localhost
    environment'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the localhost URL in your browser. You should see the formatted text using
    a new font in your preview. The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: We have now learned how to include external libraries in a Vue component prototype
    without needing to create a full webpack project. Next, we will see how to build
    a prototype ready to be hosted on a website or previewed by your team externally.
  prefs: []
  type: TYPE_NORMAL
- en: Building a Prototype for Production
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you have finished making a prototype and want to share it with others on
    your team or submit it for review by a tech lead, you can export your code as
    distributable files.
  prefs: []
  type: TYPE_NORMAL
- en: This means that your code can run on other machines or be hosted on an external
    server without requiring Vue CLI to run it (aka the `vue serve` command).
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the previous example file to do this, open your command terminal, navigate
    to the folder that contains your Vue prototype, and run the `vue build helloWorld.vue`
    command. This will generate an output as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.10: Output in the terminal after running the build command'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15218_03_10.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.10: Output in the terminal after running the build command'
  prefs: []
  type: TYPE_NORMAL
- en: 'A `dist` folder will be created that contains a compiled version of your prototype
    that you can upload to a web host. Inside of the `dist` folder, you can expect
    to see the following files:'
  prefs: []
  type: TYPE_NORMAL
- en: An `index.html` file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `/css` folder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `/js` folder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All these files will be necessary to properly run your compiled prototype. If
    you double-click on the `index.html` file, it does not load your app. To view
    or serve the distributable files on your local machine, you will need the help
    of a library that can serve a static site or single-page application. An `npm`
    package called `serve` is built for this purpose.
  prefs: []
  type: TYPE_NORMAL
- en: 'To serve your `dist` folder, globally install the `serve` package by opening
    your command terminal and using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The `serve` command works by allowing you to specify a directory or file to
    serve:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'In your command terminal, make sure you are in the root directory where your
    Vue prototype `dist` folder is located. To serve your `dist` folder located in
    this folder directory, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command will display output as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.11: Output in the terminal after running the serve command'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15218_03_11.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.11: Output in the terminal after running the serve command'
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to `http://localhost:5000` and you will see your prototyped project
    as displayed in the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: We have now learned how to build a Vue component prototype that can be hosted
    on a website, and how to preview the built files locally. Now, we will see these
    Vue prototyping concepts used in the next exercise.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 3.02: Instant Prototyping Using Vue CLI'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this exercise, you will be creating a Vue component that uses Vue's two-way
    data binding on the fly. Using instant prototyping makes it possible to utilize
    Vue syntax quickly, with the added benefits of hot reloading.
  prefs: []
  type: TYPE_NORMAL
- en: To access the code files for this exercise, refer to [https://packt.live/35kZrd3](https://packt.live/35kZrd3).
  prefs: []
  type: TYPE_NORMAL
- en: In the `Exercise 3.02` folder, create a file called `prototype.vue`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open a command-line terminal inside of this folder and use the `vue serve prototype.vue`
    command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Using `vue`, and hit the *Tab* button to instantly create the Vue component
    structure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a data prop called `heading` with the string value `Prototype Vue Component`,
    then wrap it around `h1` tags in the template. View the result in `localhost:8080`
    in your browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The preceding code will display as shown in the following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To build this component for production, run the `vue build prototype.vue` command.
    After running this command, you will have a generated `dist` folder in the same
    directory as your prototyped component, as shown in *Figure 3.12*:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.12: The final output for this exercise contains a /dist folder'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15218_03_12.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.12: The final output for this exercise contains a /dist folder'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'After building your distributable file, run `serve dist` in your command terminal.
    Then, in your browser, navigate to the localhost URL specified in the terminal.
    You will be able to view your built prototype as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this exercise, you saw how to run a prototyped Vue component via the command
    line without installing a full brand-new project. You also saw how to build the
    new prototype into a distributable file and then serve it. Next, we will look
    at how you can use the Vue-UI to start and run Vue applications.
  prefs: []
  type: TYPE_NORMAL
- en: The Vue-UI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Vue-UI is a graphical interface that allows you to control Vue properties
    without requiring too much of an understanding of how the command line works or
    how individual files such as the `package.json` or webpack files are configured.
    The Vue-UI provides easy access to information such as `vue ui` command. At the
    time of writing, the Vue-UI is still in beta. If you run into any issues using
    this tool, stop the command, and run `vue ui` again.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Vue-UI can be used on new and existing projects. Generally, you would opt
    for presets using Vue CLI at the start of the project, such as which `SCSS` compiler,
    testing framework, or `lint` method to use. Using the Vue-UI, even new Vue developers
    can easily configure Vue presets at any time, including obscure webpack settings
    such as the output directory or turning on `sourcemaps`. The following screenshot
    displays the `General settings` page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.13: Easily configured project settings within the Vue-UI'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15218_03_13.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.13: Easily configured project settings within the Vue-UI'
  prefs: []
  type: TYPE_NORMAL
- en: The `npm` package system is massive. However, it is quite easy for experienced
    users to navigate. Generally, an experienced developer will install a package
    via the command line, which will then automatically update the `package.json`
    file and lock the file with the new package. The locked file is a generated record
    keeper of interdependencies required for your `npm` packages that you commit with
    your project. Vue has specific packages called plugins that are special `npm`
    packages for Vue that not only install a dependency but will usually augment your
    project for you in helpful ways. For example, if you install the `vue router cli`
    plugin, it will automatically generate a `route.js` file in your project to get
    you off the ground faster.
  prefs: []
  type: TYPE_NORMAL
- en: '`Vuetify` is a useful framework when trying to quickly scaffold a more complex
    component or project, it contains a lot of common UI elements and components such
    as buttons and input fields so you can focus on the interface rather than building
    out individual components themselves. If you install `Vuetify` using a Vue CLI
    plugin package, it will automatically set up Vuetify for you.'
  prefs: []
  type: TYPE_NORMAL
- en: We have now learned about the Vue-UI, and how new and experienced developers
    can use this tool to manage projects and dependencies. Next, we will use the Vue-UI
    to create and run Vue.js projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 3.03: Creating and Building a New Project from the Vue-UI'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this exercise, you will learn step by step how to use the Vue-UI to set up
    and install a Vue.js project. You will also be required to install and use the
    `Vuetify` library as a dependency. Once installed, you will run this project using
    the Vue-UI and see Vuetify elements running on a page.
  prefs: []
  type: TYPE_NORMAL
- en: To access the code files for this exercise, refer to [https://packt.live/35jOsAH](https://packt.live/35jOsAH).
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a command-line terminal and run the `vue ui` command. You will see the
    following screen:![Figure 3.14: The Vue-UI without any projects in it'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15218_03_14.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.14: The Vue-UI without any projects in it'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click `Create` to start a new project. Navigate to the folder in which you
    wish to install the project:![Figure 3.15: Installing the project'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15218_03_15.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.15: Installing the project'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the `Project folder` field, write `demo-ui`, choose `yarn` as your package
    manager and click `Next`, as shown in the following screenshot:![Figure 3.16:
    Vue-UI''s project creation interface'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15218_03_16.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.16: Vue-UI''s project creation interface'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Choose `Manual` and you will be taken to the `Features` screen. On this screen,
    select `Babel`, `CSS` `Preprocessors`, `Linter/Formatter`, and `Use config files`.
    *Figure 3.22* displays a screenshot with these options selected:![Figure 3.17:
    Enable features for your new project in the Vue-UI'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15218_03_17.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.17: Enable features for your new project in the Vue-UI'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Choose the `Sass/SCSS (with dart-sass)` preprocessor and `ESLint + Prettier`
    config, and enable the additional lint features shown in the following screenshot:![Figure
    3.18: Enable configuration options for your new project in the Vue-UI'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15218_03_18.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.18: Enable configuration options for your new project in the Vue-UI'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'When prompted, select `Continue without saving the preset`, and wait for the
    project to install. You should see a screen like *Figure 3.19*:![Figure 3.19:
    Be patient as Vue creates and installs your project dependencies'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15218_03_19.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.19: Be patient as Vue creates and installs your project dependencies'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Navigate to the plugins page, click on `Install dependency`, search for `vuetify`,
    and install `vue-cli-plugin-vuetify`. You can observe on the `Dependencies` page
    that `vuetify` has been added automatically to the project dependencies list,
    as follows:![Figure 3.20: Clean interface for dependency search and installation'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15218_03_20.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.20: Clean interface for dependency search and installation'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Navigate to the `Project tasks` page and click on the `serve` task. Then, click
    the `Run task` icon as shown in the following screenshot:![Figure 3.21: The serve
    task dashboard contains the Run task button'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15218_03_21.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.21: The serve task dashboard contains the Run task button'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Wait for Vue to compile the app. Click on the `Open app` button as shown in
    *Figure 3.22* when it is ready:![Figure 3.22: The Open app button will take you
    straight to your app in the browser'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15218_03_22.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.22: The Open app button will take you straight to your app in the
    browser'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You should see your app in the browser as shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.23: On http://localhost:8080, you should see a Vuetify styled page'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15218_03_23.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.23: On http://localhost:8080, you should see a Vuetify styled page'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To prepare this project for production, go back into the Vue-UI browser tab
    and click on the `build` tab in `Project tasks`. Click on the `Parameters` button
    next to the `Start Task` button. Turn on `Modern mode` and make sure `Output directory`
    is set to `dist`. `Modern mode` transpiles your code into two versions, one that
    is lightweight and targeted to modern browsers, and another that is verbose and
    used to support older browsers. This will be where you find your files after compilation.
    Your screen should display something like the following screenshot:![Figure 3.24:
    Vue-UI build parameters'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15218_03_24.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.24: Vue-UI build parameters'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To build this project for production, click on the `Start Task` button and let
    it run.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You do not need to stop the `serve` task to complete this.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'When the task is complete, your screen will display as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.25: When a build is complete, you have a dashboard of useful analytics'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15218_03_25.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.25: When a build is complete, you have a dashboard of useful analytics'
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, you saw how to create a brand-new project, configure presets,
    use the `serve` task to run an application, and how to build a project for production
    through the Vue-UI. You should feel comfortable enough to add new Vue CLI plugins
    and manage npm package dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: Vue.js DevTools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Vue.js DevTools is a browser extension for Chrome and Firefox, and an Electron
    desktop app that can be run from your computer to help you debug locally run Vue.js
    projects. These tools do not work in production or remotely run projects (for
    example, if you serve a production-built project or view a website online). You
    can download the Vue.js DevTools extension from the Chrome extension page, as
    seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.26: The Vue.js DevTools Chrome extension page'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15218_03_26.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.26: The Vue.js DevTools Chrome extension page'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also download the Vue.js DevTools extension from Firefox ([https://addons.mozilla.org/en-US/firefox/addon/vue-js-devtools/](https://addons.mozilla.org/en-US/firefox/addon/vue-js-devtools/)):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.27: The Vue.js DevTools Firefox extension page'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15218_03_27.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.27: The Vue.js DevTools Firefox extension page'
  prefs: []
  type: TYPE_NORMAL
- en: The DevTools are a Vue developer's best friend as they will reveal useful information
    inside of the browser's developer console that you normally would not see. This
    includes Vue component loading performance and tracking various events that are
    triggered while your Vue application runs. There are several tabs, which we'll
    look at now.
  prefs: []
  type: TYPE_NORMAL
- en: The `Components` tab helps you navigate the virtual `< > Inspect DOM`, which
    will take you directly to the location of this component in the Chrome or Firefox
    DOM tree. Select the Vue element directly from within the browser UI using the
    `Select` target icon, highlighted in the following *Figure 3.28* (the top-right
    corner of the left panel).
  prefs: []
  type: TYPE_NORMAL
- en: 'Your screen should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.28: The Components tab in Vue.js DevTools'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15218_03_28.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.28: The Components tab in Vue.js DevTools'
  prefs: []
  type: TYPE_NORMAL
- en: '`Vuex` - Using this tab, you can navigate the Vuex global state. You will see
    a transcript of mutations that occur within your Vuex store, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.29: The Vuex tab in Vue.js DevTools'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15218_03_29.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.29: The Vuex tab in Vue.js DevTools'
  prefs: []
  type: TYPE_NORMAL
- en: There will be more on this in future chapters.
  prefs: []
  type: TYPE_NORMAL
- en: '`Events` – Using this tab, you can navigate custom events that are emitted
    from your components. More on this in future chapters. By default, events will
    be recorded as seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.30: The Events tab in Vue.js DevTools'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15218_03_30.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.30: The Events tab in Vue.js DevTools'
  prefs: []
  type: TYPE_NORMAL
- en: '`Routing` – Using this tab, you can observe routing history and events within
    this pane. There will be more on this in future chapters. When routing events
    occur, they will be recorded as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.31: The Routing tab in Vue.js DevTools'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15218_03_31.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.31: The Routing tab in Vue.js DevTools'
  prefs: []
  type: TYPE_NORMAL
- en: '`Performance` – Using this tab, you can navigate to the performance area that
    records the frame rate and render time of your components as your app is running
    to optimize your end user experience. When you click the `Start` button to collect
    performance metrics, they will be shown as blue bars, as seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.32: The Performance tab in Vue.js DevTools'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15218_03_32.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.32: The Performance tab in Vue.js DevTools'
  prefs: []
  type: TYPE_NORMAL
- en: The blue bar chart in *Figure 3.32* represents the load time in milliseconds.
  prefs: []
  type: TYPE_NORMAL
- en: '`Settings` – Using this tab, you can customize your Vue.js DevTools experience
    as shown in the following screenshot. For new developers, the default settings
    do not need to be changed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.33: The Settings tab in Vue.js DevTools'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15218_03_33.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.33: The Settings tab in Vue.js DevTools'
  prefs: []
  type: TYPE_NORMAL
- en: '`Refresh` – Clicking this button will refresh your Vue.js DevTools instance
    in the browser.'
  prefs: []
  type: TYPE_NORMAL
- en: We have now learned about the Vue.js DevTools, which will help you when developing
    components in your next Vue application. Next, we will build a Vue component and
    use the Vue.js DevTools to inspect the code and manipulate the local state of
    data inside the component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 3.04: Debugging a Vue Application Using DevTools'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this exercise, you will build a basic component that uses several Vue.js
    patterns you have explored in previous chapters, and you will explore these patterns
    using DevTools. Ensure you are using either Chrome or Firefox and have DevTools
    installed. You will use Vue.js DevTools to inspect the code and manipulate the
    local state of data inside the component.
  prefs: []
  type: TYPE_NORMAL
- en: To access the code files for this exercise, refer to [https://packt.live/3eLIcVe](https://packt.live/3eLIcVe).
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the `Exercise3.04` project folder and open it up in VS Code. In
    your command prompt, install the required scripts by running the `yarn` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the same command prompt that `yarn` used, run the project using `yarn serve`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to `localhost:8080` in your browser so you can view the changes made
    in the following steps.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create reactive data in `App.vue` by adding a data prop, `frameworkList`, filled
    with an array of strings, and an `input` prop with a value of an empty string:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, create a computed property called `computedList` to filter the `frameworkList`
    prop using the `input` prop value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the Vue `template` block, add an `input` field that is bound using v-model
    to the `input` data prop and loop out `computedList` in a list. Add some styling (optional):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The preceding code will generate the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.34: Checkpoint – your list is filterable'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15218_03_34.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.34: Checkpoint – your list is filterable'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In your browser, where you can view your app, *right-click* and choose `Inspect`
    to open the developer console or use the shortcut *Ctrl* + *Shift* + *J* (Mac
    users: *Cmd* + *Shift* + *J*) and navigate to the `Vue` tab. This should generate
    a screenshot as follows:![Figure 3.35: Chrome extension for Vue.js DevTools'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15218_03_35.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.35: Chrome extension for Vue.js DevTools'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'By default, you will be in the `Components` tab. Select `Anonymous Component`
    to inspect the data associated with that component. Click into the `Filter list`
    input field and type `V`. You will observe two things occurring: in the right-hand
    panel, the data prop `input` now has the value of `V` and the computed list. `computedList`
    now only contains the string `Vue`. In the browser, this data will be reflected
    in the UI, as seen in *Figure 3.36*:![Figure 3.36: Chrome extension for Vue.js
    DevTools'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15218_03_36.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.36: Chrome extension for Vue.js DevTools'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Edit the data directly in the right-hand panel by clicking on the `Pencil`
    icon next to the `input` prop, and type `R`. The DOM will reactively update for
    the direct change made to the input prop from the DevTools as shown in the following screenshot:![Figure
    3.37: Editing live values in your Vue project is easy'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15218_03_37.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.37: Editing live values in your Vue project is easy'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'After changing the value in the Vue.js DevTools, the value will reactively
    change in the UI, where the input value in this example is now `R`, which then
    triggers the reactive `computedList` array to only show values containing the
    letter `r`, as displayed in *Figure 3.38*:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.38: Computed list update to the value written inside of DevTools'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15218_03_38.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.38: Computed list update to the value written inside of DevTools'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Go to the `Performance` tab, click on the `Component render` toggle, and click
    the `Start` button. While this is running, search for several items by writing
    in the input box `A`, then `B`, then `V`. As you type text into the input box,
    you will see the performance metrics as blue bars, as seen in the following screenshot:![Figure
    3.39: Computed list update to the value written inside of DevTools'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15218_03_39.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.39: Computed list update to the value written inside of DevTools'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click `Stop` and observe the `millisecond` timing in the `Component render`
    tab, which reflects how long it took your component to load, as shown in the following
    screenshot:![Figure 3.40: Selecting the component in the right-hand panel will
    open'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: the lifecycle hooks on the left
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15218_03_40.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.40: Selecting the component in the right-hand panel will open the
    lifecycle hooks on the left'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Repeating the test will allow you to compare benchmarks, however, if you refresh
    the page you will lose them.
  prefs: []
  type: TYPE_NORMAL
- en: At the end of this exercise, you have seen how to use Vue.js DevTools to navigate
    a basic component in a Vue application through the `Components` tab. You know
    how to observe and edit data in DevTools, having seen that computed properties
    will react to your data prop changes. You know where the `Performance` tab is
    and how to use it when creating a Vue application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 3.01: Building a Vue Application Using the Vue-UI and the Vuetify
    Component Library'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this activity, you will build a Vue project using the command line, then
    import it into the Vue-UI and compare the build size before and after Vuetify
    installation. This will test your ability to control the various Vue tools at
    your disposal and highlight the real-world scenarios where you would use these
    tools.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following steps will help you complete the activity:'
  prefs: []
  type: TYPE_NORMAL
- en: Use Vue CLI to create a new project using the Babel presets.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the Vue-UI to import your newly created project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the VueUI to install the `Vuetify` plugin and use Vuetify's Vue components
    in the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Copy a premade layout from the Vuetify website or build your own using their
    components: [https://vuetifyjs.com/en/getting-started/pre-made-layouts](https://vuetifyjs.com/en/getting-started/pre-made-layouts).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The expected outcome is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.41: The final outcome'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15218_03_41.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.41: The final outcome'
  prefs: []
  type: TYPE_NORMAL
- en: 'This activity also has a toggleable menu, as displayed in *Figure 3.42*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.42: Output displaying a toggleable menu'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15218_03_42.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.42: Output displaying a toggleable menu'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The solution for this activity can be found via [this link](B15218_Solution_Final_SZ_ePub.xhtml#_idTextAnchor385).
  prefs: []
  type: TYPE_NORMAL
- en: After the activity has been completed, you should be able to use Vue CLI and
    the Vue-UI to manage your future Vue projects. You will find that there are situations
    where both tools can be used interchangeably or in conjunction with each other,
    depending on what you are more comfortable with.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you were introduced to the multiple Vue.js tools available
    to help you maintain and manage your Vue applications. You created Vue.js projects
    from both the command line and the new Vue-UI, installed new dependencies, and
    served and built your projects from both those interfaces. You can use these tools
    together or separately – whichever you feel more comfortable with. Vue.js DevTools
    has a lot of quality-of-life features that will assist you on your journey through
    the more advanced portions of this book and as you begin to pass props between
    your components and route pages together.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn about more advanced Vue component concepts
    such as passing and validating information between different components by using
    data props and template slots.
  prefs: []
  type: TYPE_NORMAL
