- en: Chapter 4. End-to-End Testing with Protractor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unit testing is only one aspect of testing that only tests the responsibility
    of every piece of code. However, when it comes to testing the flow and feature
    of any component, module, or full application, then **end-to-end** (**e2e**) testing
    is the only solution.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will look at the end-to-end testing flow step by step through
    all the layers of an application. We will be introduced to Protractor, the end-to-end
    testing tool from the Angular team. We already know the reason behind it, why
    it was created, and what kind of problems it solves.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will go through:'
  prefs: []
  type: TYPE_NORMAL
- en: The process of installing and configuring Protractor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing the Protractor end-to-end test in our existing Angular project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: e2e test runs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returning the result of the test
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An overview of Protractor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Protractor is an end-to-end testing tool that runs using Node.js and is available
    as an npm package. Before talking about Protractor specifically, we need to understand
    what end-to-end testing is.
  prefs: []
  type: TYPE_NORMAL
- en: 'We already learned briefly about end-to-end testing in [Chapter 2](ch02.html
    "Chapter 2. Details of JavaScript Testing"), *Details of JavaScript Testing*.
    But let''s have a quick recap:'
  prefs: []
  type: TYPE_NORMAL
- en: End-to-end testing is testing an application against all the interconnected
    moving parts and layers of an application. This differs from unit tests, where
    the focus is on individual components, such as classes, services, and directives.
    With end-to-end testing, the focus is on how the application or a module, as a
    whole, works, such as confirming that the click of a button triggers x, y, and
    z actions.
  prefs: []
  type: TYPE_NORMAL
- en: Protractor allows the end-to-end testing of any module or even any size of web
    application by interacting the DOM elements of that application. It offers the
    ability to select a specific DOM element, share the data with that element, simulate
    the click of a button, and interact with an application in the same way as a user
    would. It then allows expectations to be set based on what the user would expect.
  prefs: []
  type: TYPE_NORMAL
- en: Core of Protractor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In a quick overview, we got a basic idea about Protractor--how it needs to select
    DOM elements and interact with them just like a real user would in order to run
    an e2e test on any application. To do these activities, Protractor provides some
    global functions; some are from its core API, and some are from WebDriver. We
    will discuss them in detail in [Chapter 5](ch05.html "Chapter 5. Protractor, a
    Step Ahead"), *Protractor, a Step Ahead*.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, let''s take a quick overview now:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Browser**: Protractor provides the global function `browser`, which is a
    global object from WebDriver that is mostly used to interact with the application
    browser where the application is running during the e2e test process. It provides
    some useful methods to interact with, as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: And there are many more, which we will discuss in the next chapter.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Element**: This is a global function provided by Protractor; it''s basically
    used to find a single element based on the locator, but it supports multiple element
    selection as well, by chaining another method, `.all` as `element.all`, which
    also takes `Locator` and returns `ElementFinderArray`. Let''s have a look at an
    `element` example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: And there are many more, which we will discuss in the next chapter.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Action**: As we have seen, the `element` method will return a selected DOM
    `element` object, but we need to interact with a DOM and the actions for doing
    that job come with some built-in methods. The DOM will not contact the browser
    unit with any action method calls.Let''s have a look at few of action''s example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: And there are many more, which we will discuss in the next chapter.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Locator**: This actually informs Protractor how to find a certain element
    in the DOM element. Protractor exports `Locator` as a global factory function,
    which will be used with a global `by` object.Let''s have a look at a few examples
    of `Locator`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: And there are many more, which we will discuss in the next chapter.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: A quick example
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now we can go through a quick example considering the following user specification.
  prefs: []
  type: TYPE_NORMAL
- en: 'Assuming that I input `abc` into the search box, the following should occur:'
  prefs: []
  type: TYPE_NORMAL
- en: The search button should be clicked on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At least one result should be received
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The preceding specification describes a basic search feature. Nothing in the
    preceding specification describes a controller, directive, or service; it only
    describes the expected application behavior. If a user were to test the specification,
    they may perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Point the browser to the website.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the input field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type `abc` in the input field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Search** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Confirm that the search output displays at least one result.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The structure and syntax of Protractor mirrors that of Jasmine and the tests
    we have written in [Chapter 3](ch03.html "Chapter 3. The Karma Way"), *The Karma
    Way*. We can think of Protractor as a wrapper around Jasmine, with added features
    to support end-to-end testing. To write an end-to-end test with Protractor, we
    can follow the same steps that we just saw, but with the code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the steps with code:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Point the browser to the website:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Select the input field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Type `abc` in the input field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Click on the **Search** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Find the search result details on the page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, the assertion needs to be made that at least one or more search results
    are available on the screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'As a complete test, the code will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: That's it! When Protractor runs, it will open a browser, go to the website,
    follow the instructions, and finally check the expectations. The trick with end-to-end
    testing is having a clear vision of what the user specification is and then translating
    that specification to code.
  prefs: []
  type: TYPE_NORMAL
- en: The previous example is a high-level view of what will be described throughout
    this chapter. Now that we have been introduced to Protractor, the rest of the
    chapter will show how Protractor works behind the scenes, how to install it, and
    finally, walk us through a complete example using TDD.
  prefs: []
  type: TYPE_NORMAL
- en: Origins of Protractor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Protractor is not the first end-to-end testing tool that the Angular team built.
    The first tool was called **Scenario Runner**. In order to understand why Protractor
    was built, we need to first look at its predecessor--Scenario Runner.
  prefs: []
  type: TYPE_NORMAL
- en: Scenario Runner is in the maintenance mode and has reached the end of its life.
    It has been deprecated in the place of Protractor. In this section, we will look
    at what Scenario Runner was and what gaps the tool had.
  prefs: []
  type: TYPE_NORMAL
- en: The birth of Protractor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Julie Ralph is the primary contributor of Protractor. According to Julie Ralph,
    the motivation for Protractor was based on the following experience with the Angular
    Scenario Runner on another project within Google ([http://javascriptjabber.com/106-jsj-protractor-with-julie-ralph/](http://javascriptjabber.com/106-jsj-protractor-with-julie-ralph/)):'
  prefs: []
  type: TYPE_NORMAL
- en: '*"We tried using the Scenario Runner. And we found that it really just couldn''t
    do the things that we needed to test. We needed to test things like logging in.
    Your login page isn''t an Angular page, and the Scenario Runner couldn''t deal
    with that. And it couldn''t deal with things like popups and multiple windows,
    navigating the browser history, stuff like that."*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Based on her experience with the Scenario Runner, Julie Ralph decided to create
    Protractor to fill the gaps.
  prefs: []
  type: TYPE_NORMAL
- en: 'Protractor takes advantage of the maturity of the Selenium project, and wraps
    up its methods so that it can be easily used for Angular projects. Remember, Protractor
    is about testing through the eyes of the user. It was designed to test all the
    layers of an application: web UI, backend services, persistence layer, and so
    on.'
  prefs: []
  type: TYPE_NORMAL
- en: Life without Protractor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Unit testing is not the only testing that needs to be written and maintained.
    Unit tests focus on small individual components of an application. By testing
    small components, the confidence in the code and logic grows. Unit tests don't
    focus on how the complete system works when interconnected.
  prefs: []
  type: TYPE_NORMAL
- en: 'End-to-end testing with Protractor allows the developer to focus on the complete
    behavior of a feature or module. Going back to the search example, the test should
    only pass if the whole user specification passes; enter data into the search box,
    click on the **Search** button, and see the results. Protractor is not the only
    end-to-end testing framework out there, but it is the best choice for Angular
    applications. Here are a few reasons why you should choose Protractor:'
  prefs: []
  type: TYPE_NORMAL
- en: It is documented throughout the Angular tutorials and examples
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It can be written using multiple JavaScript testing frameworks, including Jasmine
    and Mocha
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It provides convenience methods for Angular components, including waiting for
    a page to load, expectations on promises, and so on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It wraps Selenium methods that automatically wait for promises to be fulfilled
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is supported by **SaaS** (**Software as a Service**) providers, such as Sauce
    Labs, which is available at [https://saucelabs.com/](https://saucelabs.com/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is supported and maintained by the same company that maintains Angular and
    Google
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting ready with Protractor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's time to start getting our hands dirty and install and configure Protractor.
    Installations and applications are constantly changing. The main focus will be
    on the specific configuration used in this book, and not an in-depth installation
    guide. There are several different configurations, so review the Protractor site
    for additional details. To find the latest installation and configuration guide,
    visit [http://angular.github.io/protractor/](http://angular.github.io/protractor/).
  prefs: []
  type: TYPE_NORMAL
- en: Installation prerequisites
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Protractor has the following prerequisites:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Node.js**: Protractor is a Node.js module available using npm. The best way
    to install Node.js is to follow the instructions on the official site at [http://nodejs.org/download/](http://nodejs.org/download/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Chrome**: This is a web browser built by Google. It will be used to run end-to-end
    tests in Protractor without the need for a Selenium server. Follow the installation
    instructions on the official site at [http://www.google.com/chrome/browser/](http://www.google.com/chrome/browser/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Selenium WebDriver for Chrome**: This is a tool that allows you to interact
    with web applications. Selenium WebDriver is provided with the Protractor `npm`
    module. We will walk through the instructions as we install Protractor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Protractor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the steps to install Protractor:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once Node.js is installed and available in the Command Prompt, type the following
    command to install Protractor in the current directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding command uses Node's `npm` command to install Protractor in the
    current local directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To use Protractor in the Command Prompt, use the relative path to the Protractor
    bin directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Test that the Protractor version can be determined as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Installing WebDriver for Chrome
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the steps to install WebDriver for Chrome:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To install Selenium WebDriver for Chrome, go to the `webdriver-manager` executable
    in the Protractor `bin` directory that can be found at `./node_modules/protractor/bin/`,
    and type the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Confirm the directory structure.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The preceding command will create a Selenium directory containing the required
    Chrome driver used in the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The installation is now complete. Both Protractor and Selenium WebDriver for
    Chrome have been installed. We can now move on to the configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we will be configuring Protractor using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Start with a standard template configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fortunately, the Protractor installation comes with some base configurations
    in its installation directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The one that we will use is called `conf.js`  located in the `protractor/example`
    section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Review the example configuration file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `capabilities` parameter should only specify the name of the browser:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The framework parameter should specify the testing framework name, and we will
    use Jasmine here:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The final important configuration is the source file declaration:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Excellent! Now we have Protractor installed and configured.
  prefs: []
  type: TYPE_NORMAL
- en: Confirming the installation and configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To confirm installation, Protractor requires at least one file defined in the
    `specs` configuration section. Before adding a real test and complicating things,
    create an empty file called `confirmConfigTest.js` in the root directory. Then,
    edit the `conf.js` file located in the project root and add the test file to the
    `specs` section so that it looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'To confirm that Protractor has been installed, run Protractor by going to the
    root of our project directory and type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'If everything was set up correctly and installed, we will see something similar
    to this in our Command Prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Common installation and configuration issues
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are some common issues that you might come across while installing
    WebDriver for Chrome:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Issues** | **Solution** |'
  prefs: []
  type: TYPE_TB
- en: '| Selenium not installed correctly | If the tests have errors related to the
    Selenium WebDriver location, you need to ensure that you followed the steps to
    update WebDriver. The update step downloads the WebDriver components into the
    local Protractor installation folder. Until WebDriver has been updated, you won''t
    be able to reference it in the Protractor configuration. An easy way to confirm
    the update is to look in the Protractor directory and ensure that a Selenium folder
    exists. |'
  prefs: []
  type: TYPE_TB
- en: '| Unable to find tests | When no tests are executed by Protractor, it can be
    frustrating. The best place to start is in the configuration file. Ensure that
    the relative paths and any filenames or extensions are correct. |'
  prefs: []
  type: TYPE_TB
- en: For a complete list, refer to the official Protractor site at [http://angular.github.io/protractor/](http://angular.github.io/protractor/).
  prefs: []
  type: TYPE_NORMAL
- en: Integrating Protractor with Angular
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have seen how to install and configure Protractor and we also have
    a basic overview of how Protractor works. In this section, we will go through
    with the process of integrating Protractor in an existing Angular project, where
    we just have unit testing and will see how Protractor is used in e2e testing in
    real life.
  prefs: []
  type: TYPE_NORMAL
- en: Getting the existing project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The code in this test will leverage the unit tested code from [Chapter 3](ch03.html
    "Chapter 3. The Karma Way"), *The Karma Way*. We will copy the code to a new directory
    called `angular-protractor`.
  prefs: []
  type: TYPE_NORMAL
- en: 'As a reminder, the application is a to-do application that has some items in
    the to-do list; let''s add some more items to the list. It has a single component
    class, `AppComponent`, that has a list of items and an `add` method. The current
    code directory should be structured as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting the existing project](img/image_04_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'After getting this structure, the first job is to get the required dependencies,
    `node_modules` locally by running the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'This will install all the required modules; next, let''s build and run the
    project with the `npm` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Everything should be fine; the project should run on `http://localhost:3000`
    and the output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting the existing project](img/image_04_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: And yes, we are ready to go to the next step to implement Protractor in our
    Angular project.
  prefs: []
  type: TYPE_NORMAL
- en: The Protractor setup flow
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The setup will mirror the installation and configuration steps that we saw
    earlier in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Install Protractor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Update Selenium WebDriver.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure Protractor based on the example configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will follow the Protractor installation and configuration steps we have covered
    in the previous section in a new project directory. The only difference is that
    the Protractor tests could be named with e2e prefix, such as `**.e2e.js`. This
    will allow us to easily identify the Protractor tests in our project structure.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This absolutely depends on a developer's choice; some people just put the Protractor
    test in a new directory with a subfolder, `spec/e2e`. It's just part of structuring
    the project.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Protractor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We might have Protractor set up globally or we might not, so it's always great
    to have Protractor installed in the project. And so, we will have Protractor installed
    locally and will add in `package.json` as `devDependency`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install Protractor in our project, run this command from the project directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'We can check Protractor as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'This should provide the latest version, 4.0.10, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**A good practice that we will follow**'
  prefs: []
  type: TYPE_NORMAL
- en: 'We showed how to set up Protractor in a directory, but its good to have Protractor
    globally installed with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'This is so that we can use it easily to call Protractor from the command shell
    as with `protractor`; to know the Protractor version, we can call it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Updating WebDriver
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To update Selenium WebDriver, go to the `webdriver-manager` executable in the
    Protractor `bin` directory that can be found at `./node_modules/protractor/bin/` and
    type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'A good practice to follow, as informed, we will install Protractor globally,
    and if so, we will have the `webdriver-manager` command global as well, so that,
    we can easily run it for `update`, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: This will update WebDriver and will support the latest browsers.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we have cloned the sample quick start project, it has already integrated
    and configured Protractor in the project. For the purpose of learning, we would
    like to integrate Protractor in the existing project.
  prefs: []
  type: TYPE_NORMAL
- en: To do so, we will have to remove the existing `protractor.config.js` file from
    the project root directory.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the core configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we have seen earlier, Protractor configurations will be stored in a JS file.
    We will need to create a configuration file in our project root; let's name it
    as `protractor.config.js`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the time being, keep the changeable fields empty, as these are on the project
    structure and configuration dependent. So, the initial look could be something
    like this and these configuration options are known to us:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'As long as our project will run locally on port `3000`, our `baseUrl` variable
    will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'We are planning to keep our e2e test spec in the same folder where we put the
    unit test files, `app/app.component.spec.ts`. This time it will have a new e2e
    prefix and will look like `app/app.component.e2e.ts`. Based on that, our specs
    and config will be updated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'As long as it''s an Angular project, we need to pass an extra configuration,
    `useAllAngular2AppRoots: true`, as it will tell Protractor to wait for all the
    Angular apps'' root elements on the page instead of just the one root element
    matching:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'We are running our project via the node server; so, we need to pass one more
    configuration option so that Jasmine itself supports node. This configuration
    is a must to pass in the Jasmine 2.x version, but we may not need it if we use
    Jasmine 1.x. Here, we have added the two most common options in `jasmineNodeOpts`;
    there are a few that are used based on requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Diving into the test specifics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To run the Protractor test, we need two files: one is the configuration file
    that we already created in our project root as `protractor.conf.js`, and the next
    one is the spec, where we will define the e2e test spec, and that one will be
    located in the app folder as `app/app.component.e2e.ts`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let''s see the file that we should define there:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: These syntaxes should be known to us as we already used the Jasmine syntax in
    our unit test suite as well.
  prefs: []
  type: TYPE_NORMAL
- en: Let's have a quick recap
  prefs: []
  type: TYPE_NORMAL
- en: '`describe`: This contains the block of codes to run the test suite'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`beforeEach`: This is used to contain the setup code, which is used in every
    test spec'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`it`: This is used to define the test spec and contain the specific code for
    that test spec to run'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The main part of running an e2e test for any website is to get the DOM elements
    of that website and then interact with those elements through the test process.
    And so, we will need to get the DOM elements of our running project.
  prefs: []
  type: TYPE_NORMAL
- en: 'As long as the current project is running in the web browser, we will have
    to get the instance of the browser itself first; interestingly, Protractor provides
    that with the global browser object. With this browser object, we can get all
    browser-level commands, such as `browser.get`, and we can navigate through to
    our project URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: With this `browser.get('')` method, we will navigate to the root of our project.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have the global browser object, with which we can get the title of the running
    page, which is basically, the title we defined here in the project `index.html`
    file. `browser.getTitle` will provide the title and then we can match that as
    expected. So, our test spec will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'If we take a quick look, our short e2e test spec will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Time to run the e2e test with Protractor. The command will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as expected--0 failure as we have set the `index.html` page title
    to **Angular Protractor**.**** The result will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Time to move on and add a new test spec for the rest of the DOM elements of
    the page, where we have list items listed on the page; so, we will test them automatically
    via Protractor.
  prefs: []
  type: TYPE_NORMAL
- en: 'At first, we will check whether we have all the three items listed. We have
    already learned in an earlier section of this chapter about some Protractor common
    APIs, but a quick recap, we will use the `element.all` method by passing some
    locator (`by.css`, `by.id`, and `by.model`) to get the elements array object.
    And then, we can use the Jasmine matcher to match with the expected value, as
    shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: We should get the result passed, as we have three items listed in the UI.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can add a few more test specs for testing the UI elements. For example,
    to check whether the items listed are in the correct order, we can check their
    label, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: We have matched the first and last item's label/text with the expected value
    and it should pass as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s combine all the test specs in the e2e file. It will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s run all the specs together:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'As expected, all the tests should pass and the result will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As long as we named our Protractor config file `protractor.conf.js`, we don't
    need to mention the configuration file name while running it with the `protractor`
    command; Protractor will get its configuration file by itself. With any other
    name, we should mention the configuration file name with Protractor.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, in this case, we can just run the test as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: The result will be the same as it was before.
  prefs: []
  type: TYPE_NORMAL
- en: Running the test via NPM
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this project, we will build and run a project via npm. In [Chapter 3](ch03.html
    "Chapter 3. The Karma Way"), *The Karma Way*, we ran the `karma` test via `npm`;
    similarly, we will run the `protractor` test with `npm` as well. And to do so,
    we have to add `protractor` in the `scripts` section in `package.json` of our
    project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'To install `protractor` in our project, run from the project directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'In some OSes, this command may produce some `npm` error. This is actually for
    `webdriver-manager`, which may not updated. To solve this we have to add the `webdriver-manager`
    update script to `npm` and run it only once at the very first time, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'We also have to run it as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: That's it, we are ready to run the e2e test again and this should work exactly
    the same as the `protractor` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s confirm this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'The expected result will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Making the test better
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are a couple of things that were discussed in this chapter that need
    further clarification. These include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Where is the asynchronous logic?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How do we really implement TDD with end-to-end tests?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Async magic
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the preceding tests, we saw some magic that you might be questioning. Here
    are some of the magic components that we glanced over:'
  prefs: []
  type: TYPE_NORMAL
- en: Loading a page before test execution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assertion on elements that get loaded in promises
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loading a page before test execution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In the previous test, we used the following code to specify that the browser
    should point to the home page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: The preceding command will launch the browser and navigate to the `baseUrl`
    location. Once the browser reaches the page, it will have to load Angular and
    then implement the Angular-specific functions. Our tests don't have any wait logic,
    and this is part of the beauty of Protractor with Angular. The waiting for page
    loading is already built into the framework for us. Our tests can then be written
    very cleanly.
  prefs: []
  type: TYPE_NORMAL
- en: Assertion on elements that get loaded in promises
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The assertions and expectations already have promise fulfillment written in
    them. In the case of our test, we wrote the assertion so that it expects the count
    to be `3`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'However, in reality, we may have thought that we needed to add asynchronous
    testing to the assertion in order to wait for the promise to be fulfilled, involving
    something more complicated like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code is longer, more granular, and more difficult to read. Protractor
    has the ability to make tests more concise for certain elements built in to expectations.
  prefs: []
  type: TYPE_NORMAL
- en: TDD with Protractor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With our first test, there is a clear distinction of end-to-end tests and unit
    tests. With the unit test, we focused on strong coupling the test to the code.
    As an example, our unit test spied on the scope for a specific component class,
    `AppComponent`. We have to initiate the component to get the instance of the component,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: In the Protractor test, we don't care about which component class we are testing
    and our focus is on the user perspective of the test. We start with the selection
    of a particular element within the DOM; in our case, that element is tied to Angular.
    The assertion is that the number of elements for a specific repeater is equal
    to the expected count.
  prefs: []
  type: TYPE_NORMAL
- en: With the loose coupling of the end-to-end test, we can write a test that focuses
    on the user specification, which initially displays three elements, and then have
    the freedom to write that in the page, class, component, and so on, in the way
    we want.
  prefs: []
  type: TYPE_NORMAL
- en: Self-test questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Use TDD with Protractor to develop the third development to-do list item.
  prefs: []
  type: TYPE_NORMAL
- en: Q1\. Which of the following frameworks does Protractor use?
  prefs: []
  type: TYPE_NORMAL
- en: Selenium
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unobtanium
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Karma
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Q2\. You can install Protractor with any existing Angular project.
  prefs: []
  type: TYPE_NORMAL
- en: 'True'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'False'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Q3\. Karma and Protractor can run together in a single project.
  prefs: []
  type: TYPE_NORMAL
- en: 'True'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'False'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Q4\. Which team has developed Protractor?
  prefs: []
  type: TYPE_NORMAL
- en: ReactJS team
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Angular team
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NodeJS team
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter gave us an overview of end-to-end testing with Protractor and also
    provided the necessary idea to install, configure, and apply end-to-end testing
    with an existing Angular project. Protractor is an important part of testing any
    Angular application. It bridges the gap to ensure that a user's specifications
    work as expected. When end-to-end tests are written according to user specifications,
    the confidence of the application and ability to refactor grows. In the upcoming
    chapters, we will see how to apply Karma and Protractor in more depth with simple
    and straightforward examples.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter will walk us through more details on Protractor with some advance
    configuration, details on some APIs, and it will also debug the tests.
  prefs: []
  type: TYPE_NORMAL
