- en: '13'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Advanced Vue.js Frameworks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we explored how to deploy Vue.js 3 projects to AWS
    Cloud. We learned about the best practices for deploying to AWS. In addition,
    we learned how enterprise companies deploy their enterprise Vue applications.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter explores a definitive guide to Nuxt.js. We will learn about the
    nitty-gritty of Nuxt.js and how to build and deliver enterprise SSR projects with
    Vue.js 3\. Additionally, we will explore a definitive guide to Gridsome where
    you will learn about the nitty-gritty of Gridsome and how to build and deliver
    enterprise CSR projects with Vue.js 3.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following key topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Vue frameworks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Top Vue frameworks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding Nuxt.js and how it works
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Benefits of Nuxt.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Nuxt.js app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is Gridsome?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is Gridsome used for?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How does Gridsome work?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Benefits of Gridsome
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Gridsome app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To get started with this chapter, you should read through [*Chapter 12*](B17237_12.xhtml#_idTextAnchor471),
    *Deploying Enterprise-Ready Vue.js 3*, where we learned how to deploy Vue.js 3
    projects to the AWS cloud and some of the best practices for deploying to AWS.
    Additionally, we explored different deployment options and mastered best practices
    in deploying our Vue.js 3 project to AWS. We will rely heavily on the knowledge
    from that chapter in this chapter to learn about more advanced Vue frameworks.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Vue frameworks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A single framework cannot solve all the problems of frontend engineering, as
    it will become bloated and very heavy to load. Vue.js is not exempt; there are
    some issues that are not completely out-of-the-box with Vue.js. Also, it will
    require harder configuration and can lead to a waste of development time to implement
    some features into Vue.js right out of the box.
  prefs: []
  type: TYPE_NORMAL
- en: The pressing needs of developers make Vue.js the framework of all frameworks.
    In recent years, after the release of the Vue.js framework, we have noticed a
    good number of other frameworks that have been created out of Vue.js.
  prefs: []
  type: TYPE_NORMAL
- en: These frameworks offer different options to meet development needs such as **Server-Side
    Rendering** (**SSR**), **Static Site Generators** (**SSGs**), **Progressive Web
    Apps** (**PWAs**), and more.
  prefs: []
  type: TYPE_NORMAL
- en: 'Frameworks can be divided into four distinct groups based on their purpose
    and capabilities. These include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Vue.js UI frameworks**: These provide tools to create modern, responsive
    websites'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mobile frameworks**: These help to construct hybrid mobile web apps'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Static site frameworks**: These generate static websites'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SSR frameworks**: These are used to create SSR applications'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this section, we are going to explore the top Vue.js frameworks, and later
    in this chapter, we will explore the top two frameworks in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Top Vue frameworks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are various Vue.js frameworks available for developers to utilize when
    creating universal Vue applications. Let’s explore some of them in the following
    subsections.
  prefs: []
  type: TYPE_NORMAL
- en: Vue UI frameworks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Creating an attractive and user-friendly UI is a key part of frontend development.
    If the design of the interface is not appealing or easy to use, it will be hard
    to keep a consistent user base.
  prefs: []
  type: TYPE_NORMAL
- en: When designing a UI for a large enterprise product, it is beneficial to utilize
    a Vue UI framework that offers pre-made Vue components and elements to create
    an attractive frontend.
  prefs: []
  type: TYPE_NORMAL
- en: 'The top UI component frameworks for Vue are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrap Vue
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vuetify
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Quasar Framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vue Material
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can compare the popularity of each of the frameworks using this *npm trends*
    link: [https://npmtrends.com/bootstrap-vue-vs-quasar-vs-vue-material-vs-vuetify](https://npmtrends.com/bootstrap-vue-vs-quasar-vs-vue-material-vs-vuetify).'
  prefs: []
  type: TYPE_NORMAL
- en: Mobile frameworks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Over the years, Vue.js has gained popularity in hybrid and robust web app development
    including hybrid mobile development according to Monocubed ([https://www.monocubed.com/blog/why-vuejs-gaining-popularity/](https://www.monocubed.com/blog/why-vuejs-gaining-popularity/)).
  prefs: []
  type: TYPE_NORMAL
- en: 'However, both hybrid and native mobile development can also be achieved with
    Vue.js using some of the mobile frameworks listed here in conjunction with other
    mobile development libraries and frameworks:'
  prefs: []
  type: TYPE_NORMAL
- en: Vue Native
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mint UI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can compare the popularity of each of the frameworks using this *npm trends*
    link: [https://npmtrends.com/mint-ui-vs-vue-native-core-vs-vux](https://npmtrends.com/mint-ui-vs-vue-native-core-vs-vux).'
  prefs: []
  type: TYPE_NORMAL
- en: Static site frameworks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A SSG utilizes templates and raw data to create static HTML pages. One of the
    advantages of this is that the website loads in the same manner each time, and
    the content does not vary dynamically, meaning that the web pages do not need
    to be coded separately.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a list of Vue frameworks used to generate static websites:'
  prefs: []
  type: TYPE_NORMAL
- en: Vue Press
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gridsome
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nuxt.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Moreover, it’s important to note that Nuxt.js can be used to generate static
    websites. However, that is not the main focus of Nuxt.js.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can compare the popularity of each of the frameworks using this *npm trends*
    link: [https://npmtrends.com/gridsome-vs-nuxt-vs-vuepress](https://npmtrends.com/gridsome-vs-nuxt-vs-vuepress).'
  prefs: []
  type: TYPE_NORMAL
- en: SSR frameworks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: According to the official documentation ([https://vuejs.org/guide/scaling-up/ssr.html#why-ssr](https://vuejs.org/guide/scaling-up/ssr.html#why-ssr)),
    SSR applications have better and faster time-to-content conversion rates, better
    SEO, and the same unified language and declarative component-oriented metal model
    for developing your entire application.
  prefs: []
  type: TYPE_NORMAL
- en: A Vye.js application rendered server-side allows your application codes to run
    on both the server and client side as opposed to SSGs, which will only run on
    the client side.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a list of Vue frameworks used to implement SSRs:'
  prefs: []
  type: TYPE_NORMAL
- en: Nuxt.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Quasar
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vite SSR
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can compare the popularity of each of the frameworks using this *npm trends*
    link: [https://npmtrends.com/nuxt-vs-quasar-vs-vite-ssr](https://npmtrends.com/nuxt-vs-quasar-vs-vite-ssr).'
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we explored the top Vue.js frameworks and their different categories.
    In the next section, we will take a deep-dive into Nuxt.js and see how it works.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Nuxt.js and how it works
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Nuxt.js is an open source, Vue.js-based framework that provides developers
    with the tools to create frontend projects with confidence. It is designed to
    make web development simpler and more powerful, and it also offers server-side
    rendering capabilities to help developers manage complex configurations for asynchronous
    data, middleware, and routing:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.1 – The official Nuxt.js logo](img/Figure_13.01_B17237.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.1 – The official Nuxt.js logo
  prefs: []
  type: TYPE_NORMAL
- en: Vue.js applications can be organized using a well-known architecture, which
    can be used to create either basic or complex applications. Furthermore, this
    structure can help to improve the development of Vue.js applications.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will learn about the different use cases of Nuxt.js and
    why you should consider switching to Nuxt.js.
  prefs: []
  type: TYPE_NORMAL
- en: Uses of Nuxt.js
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With Nuxt.js, you’re limitless in terms of the type of applications you can
    build, and Nuxt.js has been used to develop high-performing and SEO-focused websites.
    In the following subsections, we will look at the most popular types of websites
    you can use to build with Nuxt.js.
  prefs: []
  type: TYPE_NORMAL
- en: Statically generated pages
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Statically generated pages are websites that do not require any outside data
    sources, as the content is already included in the HTML. Nuxt.js can be used to
    create statically generated pages, such as portfolios, demo sites, or tutorial
    pages.
  prefs: []
  type: TYPE_NORMAL
- en: SPAs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A **single-page application** (**SPA**) is a type of frontend development that
    retrieves data from an external source and displays it on a user’s device. It
    is not surprising that many popular JavaScript frameworks such as React.js, Vue.js,
    and Angular are all SPA frameworks.
  prefs: []
  type: TYPE_NORMAL
- en: The HTML 5 history Application Programming Interface (API) and the location
    hash are utilized to create SPA routing systems. This capability allows developers
    to alter a website’s URL without needing to reload the entire page.
  prefs: []
  type: TYPE_NORMAL
- en: Universal applications
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This part of Nuxt.js is my favorite because almost all the applications I have
    developed with Nuxt.js have been universal applications.
  prefs: []
  type: TYPE_NORMAL
- en: A universal application is a technique that utilizes SSR to obtain client-side
    data on the server before completely displaying the page on the client’s web browser.
  prefs: []
  type: TYPE_NORMAL
- en: SSR is built into Nuxt.js right out of the box, and it solves the tedious configurations
    that are involved in activating and enabling SSR in Vue.js.
  prefs: []
  type: TYPE_NORMAL
- en: Nuxt.js can be used to resolve the existing SSR issue in Vue.js, which is beneficial
    for SEO and can even be extended to create a universal application that allows
    for a single code base to be used for both the frontend and the backend of a monolithic
    application.
  prefs: []
  type: TYPE_NORMAL
- en: These were just some of the categories of applications you can use to build
    with Nuxt.js. In the next section, we are going to explore how Nuxt.js actually
    works.
  prefs: []
  type: TYPE_NORMAL
- en: How does Nuxt.js work?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Depending on your settings, Nuxt.js can operate in two different ways. If you
    enable SSR or use the universal mode, it will function in the same manner as a
    server-side framework. This means that every time a user visits your website,
    the requests are processed on the server, and a server is required to render and
    deliver the page.
  prefs: []
  type: TYPE_NORMAL
- en: However, if client-side rendering is enabled or universal mode has not been
    activated, the content and the pages are rendered in the browser using JavaScript.
    This approach has the fastest load time and performs well in terms of speed and
    page performance.
  prefs: []
  type: TYPE_NORMAL
- en: The Nuxt.js lifecycle gives a high-level overview of the different parts of
    the framework, their order of execution, and how they work together. Also, it
    describes what happens after the build phase, where your application is bundled,
    chunked, and minified.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three main actions and methods used in Nuxt.js depending on whether
    you enabled SSR or not:'
  prefs: []
  type: TYPE_NORMAL
- en: The `nuxtServerInit` action is the initial hook that is executed on the server
    side if a Vuex store is enabled. It is used to fill the store and is only called
    if the store has been enabled. Additionally, this hook can be used to dispatch
    other actions in the Vuex store on the server.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`validate()` is a function that validates the dynamic parameters of a page
    component. It is called before rendering the page components.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AsyncData` and `Fetch` are functions utilized to acquire data and display
    it on the server side (`AsyncData`) or to obtain data and fill the store before
    rendering the page (`Fetch`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Here is a quick summary of how your requests are processed when you visit a
    Nuxt.js website. When Nuxt.js receives an initial page visit, it calls out to
    the `nuxtServerInit` action to update the store or dispatch necessary actions
    if your store is enabled; otherwise, Nuxt.js will ignore `nuxtServerInit` and
    move to the next stage.
  prefs: []
  type: TYPE_NORMAL
- en: Next, Nuxt.js will look up your `nuxt.config.js` file for any global middleware
    and execute it accordingly. After the execution, it will move to the layout pages
    and check for any middleware for execution, and lastly, it will execute the page’s
    middleware including the page children.
  prefs: []
  type: TYPE_NORMAL
- en: After executing the middleware in order, it will check the routes and use the
    `validate()` function to run validations against the params, queries, and more.
  prefs: []
  type: TYPE_NORMAL
- en: The `asyncData` method is then employed to acquire and display data on the server
    side if it had been enabled previously. Afterward, the `fetch` method is used
    to fill Vuex on the client side.
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, the page should have all the required data to be displayed a
    proper web page. The following diagram of a flowchart illustrates all the steps
    it takes to render a single page:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 13.2 – An overview of Nuxt.js \uFEFFlifecycle hooks (source: https://nuxtjs.org/docs/concepts/nuxt-lifecycle/)](img/Figure_13.02_B17237.jpg)"
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.2 – An overview of Nuxt.js lifecycle hooks (source: https://nuxtjs.org/docs/concepts/nuxt-lifecycle/)'
  prefs: []
  type: TYPE_NORMAL
- en: The official Nuxt.js lifecycle ([https://nuxtjs.org/docs/concepts/nuxt-lifecycle](https://nuxtjs.org/docs/concepts/nuxt-lifecycle))
    page gives a more detailed overview of the behind-the-scenes of how Nuxt.js renders
    and processes your pages whether they are enabled server-side or client-side.
  prefs: []
  type: TYPE_NORMAL
- en: Having gone through the inner workings of Nuxt.js, it should now be simple to
    comprehend. In the following section, let’s investigate the advantages of using
    Nuxt.js for your upcoming project.
  prefs: []
  type: TYPE_NORMAL
- en: Benefits of Nuxt.js
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The benefits of Nuxt.js cannot be underestimated; you can easily spot a few
    of them with the introduction of SSR and project structuring for enterprise-level
    projects.
  prefs: []
  type: TYPE_NORMAL
- en: However, in the following subsections, we will understand some of the benefits
    of the Nuxt.js framework and why it’s becoming very popular for building SSR-enabled
    projects with Vue.
  prefs: []
  type: TYPE_NORMAL
- en: Creating universal apps easily
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With Nuxt.js, you can create SSR applications very easily without needing to
    go through the painful route of configuring Vue to support SSR. The SSR feature
    is already built into Nuxt.js and is very easy to use.
  prefs: []
  type: TYPE_NORMAL
- en: Nuxt.js exposes two important properties called `isServer` and `isClient` to
    determine the state of the framework at runtime. It can be useful when checking
    whether your component should render on the server side or the client side.
  prefs: []
  type: TYPE_NORMAL
- en: Statically rendering your Vue apps with universal benefits
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Statically generated websites are actively gaining popularity with different
    frameworks developed to focus only on them. However, you can easily generate a
    static website with Nuxt.js without installing any additional frameworks or tools.
  prefs: []
  type: TYPE_NORMAL
- en: You can quickly create a static version of your website, complete with HTML
    and routes, by using the `nuxt` `generate` command.
  prefs: []
  type: TYPE_NORMAL
- en: Nuxt.js enables the creation of a powerful universal application that does not
    require a server to utilize the SSR feature, similar to building a statically
    generated website.
  prefs: []
  type: TYPE_NORMAL
- en: Automatic code-splitting
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Frontend development that focuses on speed and performance has become a fundamental
    part of enterprise software, and Nuxt.js stands out for its exceptional performance
    due to its code-splitting feature.
  prefs: []
  type: TYPE_NORMAL
- en: This feature allows each route to be given its own JavaScript file that only
    contains the code necessary to run that route. This approach to building applications
    helps to reduce the amount of code that needs to be loaded in order to render
    a single page, thus decreasing loading times.
  prefs: []
  type: TYPE_NORMAL
- en: Webpack’s built-in configuration enables code splitting when creating static
    web pages for your website.
  prefs: []
  type: TYPE_NORMAL
- en: ES6/7 compilation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: ES6 and 7 are enabled by default in Nuxt.js because Webpack and Babel are prebuilt
    into it for translating and compiling the latest version of JavaScript to the
    versions that older browsers can execute.
  prefs: []
  type: TYPE_NORMAL
- en: Babel is set up to take all the `.vue` files and ES6 code within the script
    tags and convert them into JavaScript, which is compatible with all browsers.
    This functionality eliminates the need to manually set up and configure browser
    compatibility from the beginning.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will look at how to create our first Nuxt.js application
    and the practical approach for developing enterprise-ready applications with Nuxt.js.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Nuxt.js app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This section will introduce you to a practical approach to developing applications
    with Nuxt.js. Before we delve in, let’s explore some of the few critical concepts
    when it comes to developing enterprise-ready applications with Nuxt.js.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Nuxt application
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can easily create a Nuxt.js application in different ways, but the recommended
    way is to use any of the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, move into the created project folder and serve your newly created Nuxt.js
    project with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: It’s important that you replace `<project-name>` with an actual project name.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have our new Nuxt.js project generated for us, let’s explore the
    different folders and files that come with the project.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the Nuxt.js folder structure
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When you create a new project using any of the preceding commands mentioned,
    it can feel quite daunting due to the number of folders and files it comes with.
    In this section, we will take a look at some of the key folders and files that
    are part of the Nuxt.js project. Additionally, some of these files and folders
    are essential and must remain unchanged without any extra configuration. The following
    figure shows the folder structure of Nuxt.js:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.3 – A screenshot of the Nuxt.js folder structure](img/Figure_13.03_B17237.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.3 – A screenshot of the Nuxt.js folder structure
  prefs: []
  type: TYPE_NORMAL
- en: Let’s go over this folder structure in the following subsections.
  prefs: []
  type: TYPE_NORMAL
- en: .nuxt
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When you start your development server, the `.nuxt` folder will be created automatically
    and will not be visible. This folder is also known as the build directory and
    includes generated files and artifacts that are used to serve your project during
    development.
  prefs: []
  type: TYPE_NORMAL
- en: assets
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `assets` directory holds all the raw materials such as pictures, CSS, SASS
    documents, fonts, and more. Webpack will compile any file that is included in
    this folder while the page is being created.
  prefs: []
  type: TYPE_NORMAL
- en: components
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This folder is analogous to the `components` folders in Vue. It is the repository
    of all your Vue components. Components are the files that make up the various
    components of your pages and can be reused and imported into any page, layout,
    or component.
  prefs: []
  type: TYPE_NORMAL
- en: layouts
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `layouts` folder is a great place for organizing the different page layouts
    of your application. It can be used to differentiate between the page structure
    of the dashboard and the page structure for users who are not logged in. This
    helps to keep the different parts of the application organized.
  prefs: []
  type: TYPE_NORMAL
- en: You can create different structures to correspond to different structures of
    your applications such as different sidebars, menus, headers, footers, and more.
    You can achieve all these separations with Nuxt.js layouts.
  prefs: []
  type: TYPE_NORMAL
- en: middleware
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Middleware can be defined as custom functions that are triggered before or after
    a page or set of pages (layout) is rendered. These middleware functions can be
    stored in the `middleware` folder in Nuxt.js.
  prefs: []
  type: TYPE_NORMAL
- en: Middleware is important and handy when creating membership-only or authentication-enabled
    applications. You can use it to restrict users from accessing certain authenticated
    pages.
  prefs: []
  type: TYPE_NORMAL
- en: plugins
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `plugins` directory is where all the JavaScript code you want to run before
    initializing the root Vue application is stored. This is the place in which to
    add Vue plugins and inject functions or constants.
  prefs: []
  type: TYPE_NORMAL
- en: You will use this folder a lot to include different Vue plugins that have not
    been included in Nuxt.js as a module.
  prefs: []
  type: TYPE_NORMAL
- en: It works by creating a JavaScript file in the `plugins` folder, using the `Vue.use()`
    function to add the plugin to the Vue instance, and lastly, adding the file to
    the `plugins` array in the `nuxt.config.js` file.
  prefs: []
  type: TYPE_NORMAL
- en: static
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `static` directory is a special one, housing all the static files of your
    application that are unlikely to be altered or that will be displayed without
    any further processing by Nuxt.js or Webpack.
  prefs: []
  type: TYPE_NORMAL
- en: Any files located in the `static` folder will be provided by Nuxt.js and can
    be accessed through the root URL of the project. This includes items such as `favicon`,
    `robot.txt`, and more.
  prefs: []
  type: TYPE_NORMAL
- en: store
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `store` folder holds all of your Vuex store documents, and it is automatically
    divided into modules. The Vuex store is included in the package, but it has to
    be enabled by creating an `index.js` file in the `store` folder before it can
    be used.
  prefs: []
  type: TYPE_NORMAL
- en: Nuxt.js is designed to help with the development of enterprise-level applications,
    and it comes pre-equipped with Vuex for state management. This makes it easier
    to create and manage applications of this scale.
  prefs: []
  type: TYPE_NORMAL
- en: pages
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `pages` folder is very important as it is the bedrock of the Nuxt.js routing
    system. Therefore, it cannot be renamed without updating the Nuxt.js configuration.
    Nuxt.js automatically reads all the `.vue` files inside the `pages` directory
    and creates a corresponding route for the page.
  prefs: []
  type: TYPE_NORMAL
- en: The `pages` directory holds all the views and routes for your application, and
    each page component is a regular Vue component that Nuxt.js automatically transforms
    into routes by adding special attributes and functions to make the development
    of your application smooth and straightforward.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will explore how Nuxt.js automatically converts `.vue`
    files in the `pages` folder into routes.
  prefs: []
  type: TYPE_NORMAL
- en: Nuxt.js pages and routing system
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Nuxt.js simplifies the routing process by allowing users to create directories
    and files in the `pages` folder, which will then automatically generate a router
    file based on the structure of the directory.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if you have a `posts.vue` file in the directory, it will automatically
    be converted into a route, and you can then access the route in your browser to
    view the content of the `Posts` page.
  prefs: []
  type: TYPE_NORMAL
- en: This routing system enables you to establish three distinct routes simply by
    creating files and folders. Let’s take a closer look at these route types.
  prefs: []
  type: TYPE_NORMAL
- en: We will explore the different types of routing that are supported by Nuxt.js
    and see how each of the routing types is used within Nuxt.js.
  prefs: []
  type: TYPE_NORMAL
- en: Basic routing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Routing is a process by which requests are routed or directed to the code that
    handles them. These requests can come in the form of URLs and are redirected to
    the appropriate handler. It can be a simple process, as no extra configuration
    is needed for it to function. Examples of this are `/about`, `/contact`, `/posts`,
    and more. To set up a basic routing system, the `pages` directory should be organized
    in the following manner:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Nuxt will generate a `router` file automatically similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code snippet is automatically generated by Nuxt.js and is not
    available for editing because everything is properly routed according to your
    folder structure in the `pages` directory.
  prefs: []
  type: TYPE_NORMAL
- en: Nested routing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Nested routes are routes that are embedded within a parent route. This type
    of routing is used to create multiple levels of routing that are more detailed.
  prefs: []
  type: TYPE_NORMAL
- en: 'With Nuxt.js, you can easily create nested routes by creating a parent folder
    and placing all the route files within that folder. Take a look at the following
    folder structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we created a new file and folder with the same name as
    the dashboard in the directory structure shown previously. Afterward, we placed
    the `portfolios.vue` and `settings.vue` files as sub-items in the dashboard folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'This straightforward organization of folders will create a router with routes
    that will look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In Vue.js, nested routes are created manually and registered inside an `index.js`
    router file, which can easily becomes complicated when creating many routes for
    an enterprise application, but with Nuxt.js, it is made very simple and easy to
    create files and nested folders.
  prefs: []
  type: TYPE_NORMAL
- en: Dynamic routing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Dynamic routes can be generated with undefined route names either due to an
    API call or because you don’t want to keep creating the same page. These routes
    are generated from a variable, such as a name or ID, which is obtained from the
    data within the application.
  prefs: []
  type: TYPE_NORMAL
- en: In order to make a route dynamic, you must add an underscore at the end of the
    `.vue` file or directory name. You can name the file or directory whatever you
    want, but an underscore must be included in order for it to be dynamic.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, if you define a `_slug.vue` file in the `pages` directory, you
    can access the value using the `params.slug` object.
  prefs: []
  type: TYPE_NORMAL
- en: Using a dynamic route is advantageous when constructing a blog application;
    for instance, when the ID or slug of the post that the user is going to select
    to read is unknown. However, with a dynamic route, it is possible to obtain the
    ID/slug of the post and display the appropriate post with the ID/slug.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using an example, we’ll demonstrate how to create a dynamic route:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we add an underscore to `slug` in order to create a dynamic route for
    the page, as well as a parent route with a string parameter and its respective
    child routes. This page structure will generate a router with the following routes
    in the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Now that we’ve explored the different routing systems that come built into the
    Nuxt.js framework, you have a solid knowledge of how Nuxt.js works and can start
    building your enterprise-ready universal application with it.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will explore Gridsome and learn about the nitty-gritty
    of Gridsome and how to build and deliver enterprise CSR projects with Vue.js 3.
  prefs: []
  type: TYPE_NORMAL
- en: What is Gridsome?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Gridsome is a powerful static website generator. It is powered by Vue.js to
    build statically generated websites and apps that are fast by default. It is also
    a Jamstack framework for building websites and applications that delivers better
    performance, higher security, and lower cost of scaling.
  prefs: []
  type: TYPE_NORMAL
- en: Gridsome is focused on implementing the Jamstack approach to build fast and
    secure sites and applications by pre-rendering files and serving them directly
    from a CDN – thereby increasing the speed of your application and removing the
    requirement to manage or run web servers.
  prefs: []
  type: TYPE_NORMAL
- en: Jamstack is an architectural approach that decouples the web experience layer
    from data and business logic, improving flexibility, scalability, performance,
    and maintainability.
  prefs: []
  type: TYPE_NORMAL
- en: What is Gridsome used for?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At the moment, Gridsome does not support SSR but focuses on creating faster
    websites and applications. In the following subsections, we will look at the most
    popular types of websites you can build with Gridsome.
  prefs: []
  type: TYPE_NORMAL
- en: Statically generated pages
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These are the types of websites that do not require any external data sources
    – the content is already embedded into the HTML. You can use Gridsome to create
    statically generated pages such as portfolios, demo websites, or tutorial pages
    with different data sources and higher performance.
  prefs: []
  type: TYPE_NORMAL
- en: SPAs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A frontend development approach that utilizes dynamic data from an external
    API and displays it on the client side is known as creating an SPA. It is not
    unexpected that the majority of JavaScript frameworks, such as React.js, Vue.js,
    and Angular, are all SPA frameworks.
  prefs: []
  type: TYPE_NORMAL
- en: The HTML 5 history API and the location hash are utilized to create SPA routing
    systems. This capability allows developers to alter a website’s URL without needing
    to reload the entire page.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will explore how Gridsome works and how can use it to
    create a statically rendered website.
  prefs: []
  type: TYPE_NORMAL
- en: How does Gridsome work?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Gridsome is a Jamstack framework; therefore, it uses modern web development
    architecture based on client-side JavaScript, reusable APIs, and prebuilt markup.
  prefs: []
  type: TYPE_NORMAL
- en: It works by generating static SEO-friendly HTML markup that is converted into
    a dynamic DOM once loaded in the browser. This simple feature allows Gridsome
    to be a go-to Jamstack framework for building both static and dynamic websites.
  prefs: []
  type: TYPE_NORMAL
- en: Internally, Gridsome builds one `.html` file and one `.json` file for every
    page that you create and loads the `.json` files after the first page load to
    prefetch and load data for the next pages. Additionally, it also builds a `.js`
    bundle for each page to take advantage of code splitting.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, the source plugins can obtain data from either local files or
    external **APIs** and store it in a local database. A unified GraphQL data layer
    allows you to access only the required data from the database and use it in your
    Vue components.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram explains the inner workings of Gridsome and how data
    is passed and processed until it gets to your Vue component:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.4 – An overview of how Gridsome works (source: https://gridsome.org/docs/how-it-works/)](img/Figure_13.04_B17237.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.4 – An overview of how Gridsome works (source: https://gridsome.org/docs/how-it-works/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two ways to run Gridsome:'
  prefs: []
  type: TYPE_NORMAL
- en: '`gridsome develop`: This command starts a local development server and watches
    for changes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`gridsome build`: This command generates production-ready static files'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can learn more about how each command works and how they generate these
    static pages from the official documentation at [https://gridsome.org/docs/how-it-works/](https://gridsome.org/docs/how-it-works/).
  prefs: []
  type: TYPE_NORMAL
- en: Next, let’s look at some benefits of using Gridsome.
  prefs: []
  type: TYPE_NORMAL
- en: Benefits of Gridsome
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The benefits of using Gridsome are enormous and depend on the type of website
    and application intended. For statically generated websites, Gridsome proves to
    focus on speed by default and has good project structures for building enterprise-ready
    static websites and applications.
  prefs: []
  type: TYPE_NORMAL
- en: The following subsections describe some of the benefits of using Gridsome.
  prefs: []
  type: TYPE_NORMAL
- en: Serverless and statically generated
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Gridsome uses the Jamstack approach of building websites thats, which provides
    better performance and increased security, and reduces costs and complexity in
    your development stack. Gridsome generates static pages and websites using the
    Jamstack philosophy where the final product is a folder with static HTML files
    that can be deployed anywhere.
  prefs: []
  type: TYPE_NORMAL
- en: Easy to install and use
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Gridsome is very easy to install and simple to start using. It comes with a
    CLI, which is a command-line tool that helps you to create Gridsome projects effortlessly.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can install Gridsome by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Once the CLI has been installed, you can use it to create as many Gridsome projects
    as you want in the future.
  prefs: []
  type: TYPE_NORMAL
- en: Organized project structure
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One of the challenges of enterprise projects is the project structure, as discussed
    in previous chapters. Gridsome solves this problem by helping you structure your
    enterprise project with a predictive project structure.
  prefs: []
  type: TYPE_NORMAL
- en: We will go over the important files and folders that make up the Gridsome project
    in the *Understanding the Gridsome folder* *structure* section.
  prefs: []
  type: TYPE_NORMAL
- en: Automatic routing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Automatic routing is a very important feature in the frontend development industry,
    starting with Nuxt where routes are automatically generated as you add files and
    folders to the `pages` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Gridsome also makes it super easy to create routing with the automatic routing
    feature. Routes are generated automatically whenever there’s a file or new folder
    in the `src/pages` folder. This is similar to how Nuxt works, as discussed earlier.
  prefs: []
  type: TYPE_NORMAL
- en: Code splitting/pre-fetching
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With the integration of code splitting and pre-fetching in Gridsome, navigation
    in a Gridsome website becomes super fast because any link you click on has already
    been prefetched before you clicked on it.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, the code-splitting feature helps in increasing the performance
    and loading speed of a Gridsome website because it allows the user to only load
    only the JavaScript that is needed to only load the requested page and load the
    others on demand.
  prefs: []
  type: TYPE_NORMAL
- en: Markdown file support
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Using markdown in Gridsome is the easiest way to automate your content management.
    You can create content in the form of blog posts, articles, or anything described
    in its own `.md` (markdown extension) file. These markdown files will be grouped
    and consumed by Gridsome to generate individual HTML files.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have seen the benefits of using Gridsome, let’s see how to create
    a Gridsome app in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Gridsome app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This section will introduce you to a practical approach to developing applications
    with Gridsome. Before we delve in, let’s explore a few critical concepts in developing
    enterprise-ready applications with Gridsome.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Gridsome application
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can easily create a Gridsome application in different ways, but the recommended
    way is to use any of the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, move into the created a Gridsome project and serve your newly created
    Gridsome project with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: It’s important that you replace `<project-name>` with an actual project name.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have our newly Gridsome project generated for us, let’s explore
    the different folders and files that come with the project.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the Gridsome folder structure
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When you scaffold a new project using any of the preceding commands, it comes
    with a lot of overwhelming folders and files. But in this section, we will explore
    some of the important folders and files within the newly created Gridsome project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Furthermore, some of these files and folders are vital and require that some
    of the folder names and filenames remain unchanged without additional configuration.
    Here is what the Gridsome folder structure looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 13.5 – The Gridsome folder stru\uFEFFcture](img/Figure_13.05_B17237.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 13.5 – The Gridsome folder structure
  prefs: []
  type: TYPE_NORMAL
- en: Let’s go over some of the important folders in the following subsections.
  prefs: []
  type: TYPE_NORMAL
- en: pages
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `pages` folder is one of the most important folders in Gridsome as it is
    responsible for automatic routing and works exactly the same as in Nuxt except
    each page will be generated statically and have its own `index.html` file with
    markup.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two options for creating pages in Gridsome:'
  prefs: []
  type: TYPE_NORMAL
- en: '**File-based pages**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When creating your pages with single file components (a single `.vue` file),
    then you should use the filesystem. Any single file component found in the `src/pages`
    directory will automatically be converted into its own route or URL. The file
    location is used to generate the URL, and you can see it in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding page structure will be converted into the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Next, let’s explore the second option of creating pages in Gridsome called programmatic
    pages.
  prefs: []
  type: TYPE_NORMAL
- en: '**Programmatic pages**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `createPages` hook, located in the `gridsome.server.js` file, can be used
    to generate programmatic pages. This is useful if you need to manually create
    pages from an external API without using Gridsome’s built-in GraphQL data layer.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can programmatically create a page by implementing the `createPages` hook,
    as shown in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: You can also create dynamic pages using the same `createPages` hook as shown
    earlier.
  prefs: []
  type: TYPE_NORMAL
- en: Templates
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Gridsome uses templates to display nodes or single pages of collections. When
    you create a template file, Gridsome will try to locate a file with the same name
    as the collection if not specified in the template config. Often, templates are
    mapped to collections for displaying information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of displaying a post title from a GraphQL query using templates:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Templates are very important in Gridsome as they are a way to present data pages
    in their own URLs. You can learn more advanced use cases of templates from the
    documentation at [https://gridsome.org/docs/templates/](https://gridsome.org/docs/templates/).
  prefs: []
  type: TYPE_NORMAL
- en: Layouts
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Layouts are Vue components that are used inside pages and templates to wrap
    the content. You can use a layout to create different structures for your website.
    It works exactly like layouts in Nuxt.js.
  prefs: []
  type: TYPE_NORMAL
- en: 'Usually, layouts are used as follows in pages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: In Gridsome, layouts files are global and do not need to be imported before
    you start using them. There are more important files and folders that come with
    the Gridsome project, and as your project grows, you will quickly discover that
    you have added even more files and folders.
  prefs: []
  type: TYPE_NORMAL
- en: However, the previously mentioned folders are the important folders and their
    names should not be changed as you add more files and folders to your project.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we explored every important detail about Nuxt.js. You learned
    about the nitty-gritty of Nuxt.js and how to build and deliver enterprise SSR
    projects with Vue.js 3\. Additionally, we explored Gridsome, the super fast Jamstack
    framework for building statically generated websites.
  prefs: []
  type: TYPE_NORMAL
- en: We also covered the benefits of using Nuxt and Gridsome. Then, we saw how to
    create an app using both of these frameworks. Finally, we explored the folder
    structures of Nuxt and Gridsome.
  prefs: []
  type: TYPE_NORMAL
