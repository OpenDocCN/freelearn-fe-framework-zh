- en: Using Plugins
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用插件
- en: Throughout the first six chapters of this book, we examined jQuery's core components.
    Doing this has illustrated many of the ways in which the jQuery library can be
    used to accomplish a wide variety of tasks. Yet as powerful as the library is
    at its core, its elegant **plugin architecture** has allowed developers to extend
    jQuery, making it even more feature rich.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的前六章中，我们审视了 jQuery 的核心组件。这样做已经说明了 jQuery 库可以用来完成各种任务的许多方法。尽管库在其核心处非常强大，但其优雅的**插件架构**使开发人员能够扩展
    jQuery，使其功能更加丰富。
- en: The jQuery community created hundreds of plugins--from small selector helpers
    to full-scale user-interface widgets. You will now learn how to tap into this
    vast resource.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 社区创建了数百个插件——从小的选择器辅助工具到完整的用户界面部件。现在，您将学习如何利用这一庞大资源。
- en: 'In this chapter, we will cover:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍：
- en: Downloading and setting up plugins
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载和设置插件
- en: Calling jQuery methods provided by plugins
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调用插件提供的 jQuery 方法
- en: Finding elements using custom selectors defined by jQuery plugins
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用由 jQuery 插件定义的自定义选择器查找元素
- en: Adding sophisticated user interface behaviors using jQuery UI
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 jQuery UI 添加复杂的用户界面行为
- en: Implementing mobile-friendly features using jQuery Mobile
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 jQuery Mobile 实现移动友好功能
- en: Using a plugin
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用插件
- en: Using a jQuery plugin is very straightforward. We need to simply obtain the
    plugin code, reference the plugin from our HTML, and invoke the new capabilities
    from our own scripts.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 jQuery 插件非常简单。我们只需要获取插件代码，从我们的 HTML 中引用插件，并从我们自己的脚本中调用新的功能。
- en: We can easily demonstrate these tasks using the jQuery **Cycle** plugin. This
    plugin, by Mike Alsup, allows us to quickly transform a static set of page elements
    into an interactive slideshow. Like many popular plugins, it can handle complex,
    advanced needs well, but can also hide this complexity when our requirements are
    more straightforward.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 jQuery **Cycle** 插件轻松演示这些任务。这个由 Mike Alsup 制作的插件可以快速地将静态页面元素集合转换为交互式幻灯片。像许多流行的插件一样，它可以很好地处理复杂的高级需求，但当我们的需求更为简单时，它也可以隐藏这种复杂性。
- en: Downloading and referencing the Cycle plugin
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载并引用 Cycle 插件
- en: To install any jQuery plugins, we'll use the `npm` package manager. This is
    the de facto tool for declaring package dependencies for modern JavaScript projects.
    For example, we can use a `package.json` file to declare that we need jQuery,
    and a specific set of jQuery plugins.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装任何 jQuery 插件，我们将使用 `npm` 包管理器。这是声明现代 JavaScript 项目的包依赖关系的事实上的工具。例如，我们可以使用
    `package.json` 文件声明我们需要 jQuery 和一组特定的 jQuery 插件。
- en: For help on installing `npm`, see [https://docs.npmjs.com/getting-started/what-is-npm](https://docs.npmjs.com/getting-started/what-is-npm).
    For help on initializing a `package.json` file, see [https://docs.npmjs.com/getting-started/using-a-package.json](https://docs.npmjs.com/getting-started/using-a-package.json).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取有关安装 `npm` 的帮助，请参阅 [https://docs.npmjs.com/getting-started/what-is-npm](https://docs.npmjs.com/getting-started/what-is-npm)。要获取有关初始化
    `package.json` 文件的帮助，请参阅 [https://docs.npmjs.com/getting-started/using-a-package.json](https://docs.npmjs.com/getting-started/using-a-package.json)。
- en: 'Once you have a `package.json` file in the root of your project directory,
    you''re ready to start adding dependencies. For example, you can add a `jquery`
    dependency from your command console as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦在项目目录的根目录中有了 `package.json` 文件，您就可以开始添加依赖项了。例如，您可以从命令控制台如下添加 `jquery` 依赖项：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'And if we want to use the `cycle` plugin, we can install that as well:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要使用 `cycle` 插件，我们也可以安装它：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The reason we use the `--save` flag with this command is so to tell `npm` that
    we''re always going to need these packages, and that it should save these dependencies
    to `package.json`. Now that we have `jquery` and `jquery-cycle` installed, let''s
    include them on our page:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在此命令中使用 `--save` 标志的原因是告诉 `npm` 我们始终需要这些包，并且它应该将这些依赖项保存到 `package.json`。现在我们已经安装了
    `jquery` 和 `jquery-cycle`，让我们将它们包含到我们的页面中：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We have now loaded our first plugin. As we can see, this is no more complicated
    than setting up jQuery itself. The plugin's capabilities are now ours to use in
    our scripts.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经加载了我们的第一个插件。正如我们所看到的，这不再比设置 jQuery 本身更复杂。插件的功能现在可以在我们的脚本中使用了。
- en: Calling a plugin method
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调用插件方法
- en: 'The Cycle plugin operates on any set of sibling elements on a page. To show
    it in action, we''ll set up some simple HTML containing book cover images and
    related information in a list, adding it to the body of our HTML document as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Cycle 插件可以作用于页面上的任何一组兄弟元素。为了展示它的运行过程，我们将设置一些简单的 HTML，其中包含书籍封面图像和相关信息的列表，并将其添加到我们
    HTML 文档的主体中，如下所示：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Some light styling in our CSS file presents the book covers one after the other
    as shown in the following screenshot:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的 CSS 文件中进行轻量级样式处理，按照以下截图所示，依次显示书籍封面：
- en: '![](img/image_07_001-3.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_07_001-3.jpg)'
- en: 'The Cycle plugin will work its magic on this list, transforming it into an
    attractive animated slideshow. This transformation can be invoked by calling the
    `.cycle()` method on the appropriate container in the DOM as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Cycle 插件将会在此列表上发挥其魔力，将其转换为一个引人注目的动画幻灯片。通过在 DOM 中适当的容器上调用 `.cycle()` 方法，可以调用此转换，如下所示：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Listing 7.1
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 7.1
- en: 'This syntax could hardly be more simple. As we would with any built-in jQuery
    method, we apply `.cycle()` to a jQuery object instance, which in turn points
    to the DOM elements we want to manipulate. Even without providing any arguments
    to it, `.cycle()` does a lot of work for us. The styles on the page are altered
    to present only one list item at a time, and a new item is shown using a cross-fading
    transition every 4 seconds:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这种语法几乎没有更简单的了。就像我们使用任何内置的 jQuery 方法一样，我们将 `.cycle()` 应用于一个 jQuery 对象实例，该实例又指向我们要操作的
    DOM 元素。即使没有向它提供任何参数，`.cycle()` 也为我们做了很多工作。页面上的样式被修改以仅呈现一个列表项，并且每 4 秒使用淡入淡出的转换显示一个新项：
- en: '![](img/image_07_002-1.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_07_002-1.jpg)'
- en: This simplicity is typical of well-written jQuery plugins. A straightforward
    method call is all it takes to achieve professional and useful results. However,
    like many other plugins, Cycle offers a large number of options for customizing
    and fine-tuning its behavior.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这种简单性是写得很好的 jQuery 插件的典型特征。只需简单的方法调用就能实现专业且有用的结果。然而，像许多其他插件一样，Cycle 提供了大量的选项，用于定制和微调其行为。
- en: Specifying plugin method parameters
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 指定插件方法参数
- en: Passing parameters to plugin methods is no different than doing so with native
    jQuery methods. In many cases, parameters are passed as a single object of key-value
    pairs (as we saw with `$.ajax()` in [Chapter 6](3a5a790f-4c0a-4b63-bb00-cc38e78309c6.xhtml),
    *Sending Data with Ajax*). The choices of options to provide can be quite daunting;
    `.cycle()` alone has over 50 potential configuration options. The documentation
    for each plugin details the effect of each option, often with detailed examples.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 将参数传递给插件方法与使用原生 jQuery 方法没有什么不同。在许多情况下，参数被传递为一个键值对的单个对象（就像我们在[第 6 章](3a5a790f-4c0a-4b63-bb00-cc38e78309c6.xhtml)中看到的
    `$.ajax()`，*使用 Ajax 发送数据*）。提供的选项选择可能会令人生畏；`.cycle()` 本身就有超过 50 个潜在的配置选项。每个插件的文档详细说明了每个选项的效果，通常还附有详细的示例。
- en: 'The Cycle plugin allows us to alter the speed and style of the animation between
    slides, affect how and when slide transitions are triggered, and react to completed
    animations using callbacks. To demonstrate some of these capabilities, we''ll
    provide three simple options to the  method call from *Listing 7.1* as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Cycle 插件允许我们改变幻灯片之间的动画速度和样式，影响何时以及如何触发幻灯片转换，并使用回调函数来响应完成的动画。为了演示其中一些功能，我们将从
    *列表 7.1* 的方法调用中提供三个简单的选项，如下所示：
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Listing 7.2
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 7.2
- en: The `timeout` option specifies the number of milliseconds to wait between each
    slide transition (2,000). In contrast, `speed` determines the number of milliseconds
    the transitions themselves will take (200). When set to `true`, the `pause` option
    causes the slideshow to suspend itself when the mouse is inside the cycling region,
    which is especially useful when the cycling items are clickable.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`timeout` 选项指定了在每个幻灯片转换之间等待的毫秒数（2,000）。相比之下，`speed` 决定了转换本身需要花费的毫秒数（200）。当设置为
    `true` 时，`pause` 选项会导致幻灯片秀在鼠标位于循环区域内时暂停，当循环项可点击时尤其有用。'
- en: Modifying parameter defaults
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改参数默认值
- en: The Cycle plugin is impressive even with no supplied arguments. To accomplish
    this, it needs a sensible set of defaults to use when options are not supplied.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 即使没有提供参数，Cycle 插件也是令人印象深刻的。为了实现这一点，当没有提供选项时，它需要一个合理的默认设置来使用。
- en: 'A common pattern, and the one followed by Cycle, is to gather all of the defaults
    into a single object. In the case of Cycle, the `$.fn.cycle.defaults` object contains
    all of the default options. When a plugin collects its defaults in a publicly
    visible location like this, we can alter them in our own scripts. This can make
    our code more concise when calling the plugin multiple times since we don''t have
    to specify the new value for the option each time. Redefining the defaults is
    simple, as can be seen in the following code:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 一种常见的模式，也是 Cycle 遵循的模式，是将所有默认值收集到一个单一对象中。在 Cycle 的情况下，`$.fn.cycle.defaults`
    对象包含所有默认选项。当插件将其默认值收集在像这样的公开可见位置时，我们可以在我们自己的脚本中修改它们。这样可以使我们的代码在多次调用插件时更加简明，因为我们不必每次都指定选项的新值。重新定义默认值很简单，如下面的代码所示：
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Listing 7.3
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 7.3
- en: Here we've set two defaults, `timeout` and `random`, prior to invoking `.cycle()`.
    Since we declare a value of 2000 for `timeout` in our `.cycle()` call, our new
    default of 10000 will be ignored. On the other hand, the new default of `true`
    for `random` does take effect, causing the slides to transition in a random order.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们在调用`.cycle()` 之前设置了两个默认值，`timeout` 和 `random`。由于我们在`.cycle()` 中声明了 `timeout`
    的值为 2000，我们的新默认值 10000 会被忽略。另一方面，`random` 的新默认值为 `true` 生效，导致幻灯片以随机顺序过渡。
- en: Other types of plugins
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他类型的插件
- en: Plugins need not be limited to providing additional jQuery methods. They can
    extend the library in many ways and even alter the functionality of existing features.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 插件不仅仅限于提供额外的 jQuery 方法。它们可以在许多方面扩展库甚至改变现有功能的功能。
- en: Plugins can change the way other parts of the jQuery library operate. Some offer
    new animation easing styles, for instance, or trigger additional jQuery events
    in response to user actions. The Cycle plugin offers such an enhancement by adding
    a new custom selector.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 插件可以改变 jQuery 库的其他部分操作的方式。例如，一些插件提供新的动画缓动样式，或者在用户操作响应中触发额外的 jQuery 事件。Cycle
    插件通过添加一个新的自定义选择器来提供这样的增强功能。
- en: Custom selectors
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义选择器
- en: Plugins that add custom selector expressions increase the capabilities of jQuery's
    built-in selector engine so that we can find elements on the page in new ways.
    Cycle adds a custom selector of this kind, which gives us an opportunity to explore
    this capability.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 添加自定义选择器表达式的插件会增加 jQuery 内置选择器引擎的功能，使我们可以以新的方式在页面上查找元素。Cycle 添加了这种类型的自定义选择器，这给了我们一个探索这种功能的机会。
- en: 'Cycle''s slideshows can be paused and resumed by calling `.cycle(''pause'')`
    and `.cycle(''resume'')`, respectively. We can easily add buttons that control
    the slideshow, as shown in the following code:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 通过调用`.cycle('pause')` 和 `.cycle('resume')`，Cycle 的幻灯片可以暂停和恢复。我们可以轻松地添加控制幻灯片的按钮，如下面的代码所示：
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Listing 7.4
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 7.4
- en: 'Now, suppose that we want our Resume button to resume any paused Cycle slideshow
    on the page, in case there were more than one. We want to find all the `<ul>`
    elements on the page that are paused slideshows and resume them all. Cycle''s
    custom `:paused` selector allows us to do this easily:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设我们希望我们的“恢复”按钮恢复页面上任何暂停的 Cycle 幻灯片，如果有多个的话。我们想要找到页面上所有暂停的幻灯片的`<ul>` 元素，并恢复它们所有。Cycle
    的自定义`:paused` 选择器使我们可以轻松做到这一点：
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Listing 7.5
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 7.5
- en: With Cycle loaded, `$('ul:paused')` will create a jQuery object referencing
    all of the paused slideshows on the page so that we can interact with them at
    will. Selector extensions such as this that are provided by plugins can be freely
    combined with any of the standard jQuery selectors. We can see that, with the
    choice of appropriate plugins, jQuery can be molded to suit our needs.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Cycle 加载，`$('ul:paused')` 将创建一个 jQuery 对象，引用页面上所有暂停的幻灯片，以便我们可以随意进行交互。像这样由插件提供的选择器扩展可以自由地与任何标准的
    jQuery 选择器结合使用。我们可以看到，选择适当的插件，jQuery 可以被塑造以满足我们的需求。
- en: Global function plugins
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 全局函数插件
- en: Many popular plugins provide new global functions within the `jQuery` namespace.
    This pattern is common when plugins supply features that are not related to the
    DOM elements on the page and thus are not good candidates for standard jQuery
    methods. For example, the Cookie plugin ([https://github.com/carhartl/jquery-cookie](https://github.com/carhartl/jquery-cookie))
    offers an interface for reading and writing cookie values on a page. This functionality
    is provided through the `$.cookie()` function, which can get or set individual
    cookies.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 许多流行的插件在`jQuery`命名空间中提供新的全局函数。当插件提供的功能与页面上的DOM元素无关，因此不适合标准的jQuery方法时，这种模式是常见的。例如，Cookie插件（[https://github.com/carhartl/jquery-cookie](https://github.com/carhartl/jquery-cookie)）提供了一个界面，用于在页面上读取和写入cookie值。这个功能是通过`$.cookie()`函数提供的，它可以获取或设置单个cookie。
- en: 'Let''s say, for example, that we want to remember when users press our slideshow''s
    Pause button so that we can keep it paused if they leave the page and return to
    it later. After loading the Cookie plugin, reading a cookie is as simple as using
    the cookie''s name as the sole argument as shown in the following code:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 比如说，例如，我们想要记住用户什么时候按下我们幻灯片的暂停按钮，以便如果他们离开页面然后过后回来的话我们可以保持它暂停。加载Cookie插件之后，读取cookie就像在下面代码中一样简单：只需将cookie的名称作为唯一参数使用即可。
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Listing 7.6
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 列表7.6
- en: Here, we look for the existence of a `cyclePaused` cookie; it doesn't matter
    what the value is for our purpose. If the cookie exists, the cycle will pause.
    When we insert this conditional pause immediately after the call to `.cycle()`,
    the slideshow keeps the first image visible until the user at some point presses
    the Resume button.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们寻找`cyclePaused` cookie的存在；对于我们的目的来说，值是无关紧要的。如果cookie存在，循环将暂停。当我们在调用`.cycle()`之后立即插入这个条件暂停时，幻灯片会一直保持第一张图片可见，直到用户在某个时候按下“恢复”按钮。
- en: 'Of course, because we haven''t set the cookie yet, the slideshow is still cycling
    through the images. Setting a cookie is as simple as getting its value; we just
    supply a string for the second argument as follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，因为我们还没有设置cookie，幻灯片仍在循环播放图片。设置cookie和获取它的值一样简单；我们只需像下面这样为第二个参数提供一个字符串：
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Listing 7.7
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 列表7.7
- en: The cookie is set to `y` when the Pause button is pressed, and it is deleted
    by passing `null` when the Resume button is pressed. By default, the cookie remains
    for the duration of the session (generally until the browser tab is closed). Also
    by default, the cookie is associated with the page on which it was set. To change
    these default settings, we can supply an options object for the function's third
    argument. This is a pattern typical to jQuery plugins as well as jQuery core functions.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 当按下暂停按钮时，cookie被设置为`y`，当按下恢复按钮时，通过传递`null`来删除cookie。默认情况下，cookie在会话期间保持（通常直到浏览器标签页关闭）。同样默认情况下，cookie与设置它的页面相关联。要更改这些默认设置，我们可以为函数的第三个参数提供一个选项对象。这是典型的jQuery插件模式，也是jQuery核心函数。
- en: 'For example, to make the cookie available throughout the site and have it expire
    after 7 days, we can call the function with `$.cookie(''cyclePaused'', ''y'',
    { path: ''/'', expires: 7 })`. For information on these and other options available
    when calling `$.cookie()`, we can refer to the documentation for the plugin.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '例如，为了使cookie在整个站点上可用，并在7天后过期，我们可以调用`$.cookie(''cyclePaused'', ''y'', { path:
    ''/'', expires: 7 })`。要了解在调用`$.cookie()`时可用的这些和其他选项的信息，我们可以参考插件的文档。'
- en: The jQuery UI plugin library
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: jQuery UI插件库
- en: While most plugins, such as Cycle and Cookie, focus on a single task, jQuery
    UI tackles a wide variety of challenges. In fact, while the jQuery UI code may
    often be packaged as a single file, it is actually a comprehensive suite of related
    plugins.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然大多数插件，比如Cycle和Cookie，都专注于一个单一的任务，jQuery UI却面对着各种各样的挑战。实际上，虽然jQuery UI的代码常常被打包成一个单一的文件，但它实际上是一套相关插件的综合套件。
- en: The jQuery UI team has created a number of core interaction components and full-fledged
    widgets to help make the web experience more like that of a desktop application.
    Interaction components include methods for dragging, dropping, sorting, selecting,
    and resizing items. The current stable of widgets includes buttons, accordions,
    datepickers, dialogs, and so on. Additionally, jQuery UI provides an extensive
    set of advanced effects to supplement the core jQuery animations.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery UI团队创建了许多核心交互组件和成熟的小部件，以帮助使网络体验更像桌面应用程序。交互组件包括拖放、排序、选择和调整项的方法。目前稳定的小部件包括按钮、手风琴、日期选择器、对话框等。此外，jQuery
    UI还提供了一套广泛的高级效果，以补充核心的jQuery动画。
- en: The full UI library is too extensive to be adequately covered within this chapter;
    indeed, there are entire books devoted to the subject. Fortunately, a major focus
    of the project is consistency among its features, so exploring a couple of pieces
    in detail will serve to get us started in using the rest of them as needed.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的 UI 库过于庞大，无法在本章中充分覆盖；事实上，有整本书专门讨论此主题。幸运的是，该项目的主要焦点是其功能之间的一致性，因此详细探讨几个部分将有助于我们开始使用其余的部分。
- en: Downloads, documentation, and demos of all the jQuery UI modules are available
    at
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 所有 jQuery UI 模块的下载、文档和演示都可以在此处找到
- en: '[http://jqueryui.com/](http://jqueryui.com/). The download page offers a combined
    download with all the features baked in, or a customizable download that can contain
    just the functionality we need. The downloadable ZIP file also contains a stylesheet
    and images, which we need to include when we use jQuery UI''s interaction components
    and widgets.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://jqueryui.com/](http://jqueryui.com/)。下载页面提供了一个包含所有功能的组合下载，或者一个可定制的下载，可以包含我们需要的功能。可下载的
    ZIP 文件还包含样式表和图片，我们在使用 jQuery UI 的交互组件和小部件时需要包含它们。'
- en: Effects
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 效果
- en: The effects module of jQuery UI consists of a core and a set of independent
    effect components. The core file provides animations for colors and classes, as
    well as advanced easing.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery UI 的效果模块由核心和一组独立的效果组件组成。核心文件提供了颜色和类的动画，以及高级缓动。
- en: Color animations
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 颜色动画
- en: 'With jQuery UI''s core effects component linked into the document, the `.animate()`
    method is extended to accept additional style properties, such as `borderTopColor`,
    `backgroundColor`, and `color`. For example, we can now gradually change an element
    from white text on a black background to black text on a light gray background
    as follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 将 jQuery UI 的核心效果组件链接到文档中后，`.animate()` 方法被扩展以接受额外的样式属性，例如 `borderTopColor`、`backgroundColor`
    和 `color`。例如，我们现在可以逐渐将元素从黑色背景上的白色文本变为浅灰色背景上的黑色文本：
- en: '[PRE11]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Listing 7.8
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 7.8
- en: 'Now when the mouse cursor enters the book slideshow region of the page, the
    book title''s text color and background color both smoothly animate over a period
    of one second (1000 ms):'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当鼠标光标进入页面的书籍幻灯片区域时，书名的文本颜色和背景颜色都会在一秒钟（1000 毫秒）的时间内平滑动画过渡：
- en: '![](img/image_07_003-1.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_07_003-1.jpg)'
- en: Class animations
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类动画
- en: 'The three CSS class methods that we have worked with in previous chapters--`.addClass()`,
    `.removeClass()`, and `.toggleClass()`--are extended by jQuery UI to take an optional
    second argument for the animation duration. When this duration is specified, the
    page behaves as if we had called `.animate()` and directly specified all of the
    style attributes that change as a result of applying the class to the element:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在前几章中使用过的三个 CSS 类方法--`.addClass()`、`.removeClass()` 和 `.toggleClass()`--被
    jQuery UI 扩展为接受可选的第二个参数，用于动画持续时间。当指定了这个持续时间时，页面的行为就像我们调用了 `.animate()`，并直接指定了应用于元素的类的所有样式属性变化一样：
- en: '[PRE12]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Listing 7.9
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 7.9
- en: 'By executing the code in *Listing 7.9*, we''ve caused a click on the page header
    to add or remove the `highlighted` class. Since we specified a `slow` speed, though,
    the resulting color, border, and margin changes animate into place rather than
    immediately taking effect:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 通过执行 *清单 7.9* 中的代码，我们已经导致页面标题的点击添加或删除 `highlighted` 类。但是，由于我们指定了 `slow` 速度，结果的颜色、边框和边距变化会以动画形式展现出来，而不是立即生效：
- en: '![](img/5297_07_04.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5297_07_04.png)'
- en: Advanced easing
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高级缓动
- en: When we instruct jQuery to perform an animation over a specified duration, it
    does not do so at a constant rate. If, for example, we call `$('#my-div').slideUp(1000)`,
    we know it will take a full second for the height of the element to reach zero;
    however, at the beginning and end of that second the height will be changing slowly,
    and in the middle it will be changing quickly. This rate alteration, called **easing**,
    helps the animation to appear smooth and natural.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们指示 jQuery 在指定的持续时间内执行动画时，它并不是以恒定的速率执行。例如，如果我们调用 `$('#my-div').slideUp(1000)`，我们知道元素的高度将需要整整一秒钟才能达到零；但是，在该秒的开始和结束时，高度将缓慢变化，在中间时将快速变化。这种速率变化被称为**缓动**，有助于动画看起来平滑自然。
- en: Advanced easing functions vary this acceleration and deceleration curve to provide
    distinctive results. For example, the `easeInExpo` function grows exponentially,
    ending an animation at many times the speed at which it started. We can specify
    a custom easing function in any of the core jQuery animation methods or jQuery
    UI effect methods. This can be done by either adding an argument or adding an
    option to a settings object, depending on the syntax being used.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 高级缓动函数变化加速和减速曲线，以提供独特的结果。例如，`easeInExpo`函数呈指数增长，以多倍于开始时的速度结束动画。我们可以在任何核心 jQuery
    动画方法或 jQuery UI 效果方法中指定自定义缓动函数。这可以通过添加参数或将选项添加到设置对象中来完成，具体取决于使用的语法。
- en: 'To see this in action, we can provide `easeInExpo` as the easing style for
    the `.toggleClass()` method we just introduced in *Listing 7.9* as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看此示例，请按照以下方式将`easeInExpo`作为我们刚刚介绍的*第 7.9 部分*中的`.toggleClass()`方法的缓动样式提供：
- en: '[PRE13]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Listing 7.10
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 第 7.10 部分
- en: Now whenever the header is clicked, the styles modified by toggling the class
    attribute begin appearing very gradually, then accelerate and complete the transition
    abruptly.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，每当单击标题时，通过切换类属性修改的样式都会逐渐出现，然后加速并突然完成过渡。
- en: View easing functions in action
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 查看缓动函数的效果
- en: Demonstrations of the full set of easing functions are available at
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的缓动函数集合演示可在
- en: '[http://api.jqueryui.com/easings/](http://api.jqueryui.com/easings/).'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://api.jqueryui.com/easings/](http://api.jqueryui.com/easings/)。'
- en: Additional effects
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他效果
- en: The individual effect files included in jQuery UI add various transitions, some
    of which can be substantially more complex than the simple sliding and fading
    animations offered by jQuery itself. These effects are invoked by calling the
    `.effect()` method, which is added by jQuery UI. Effects that cause an element
    to be hidden or shown can instead be invoked using `.show()` or `.hide()`, if
    desired.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 包含在 jQuery UI 中的单独效果文件添加了各种转换，其中一些可以比 jQuery 本身提供的简单滑动和淡出动画复杂得多。通过调用由 jQuery
    UI 添加的`.effect()`方法来调用这些效果。如果需要，可以使用`.show()`或`.hide()`来调用导致元素隐藏或显示的效果。
- en: The effects supplied by jQuery UI can serve a number of purposes. Some, like
    `transfer` and `size`, are useful when elements are to change shape and position.
    Others, such as `explode` and `puff`, offer attractive hiding animations. Still
    others, including `pulsate` and `shake`, call attention to an element.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery UI 提供的效果可以用于多种用途。其中一些，比如`transfer`和`size`，在元素改变形状和位置时非常有用。另一些，比如`explode`和`puff`，提供了吸引人的隐藏动画。还有一些，包括`pulsate`和`shake`，则将注意力吸引到元素上。
- en: View effects in action
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 查看效果的实际效果
- en: All of the jQuery UI effects are showcased at [http://jqueryui.com/effect/#default](http://jqueryui.com/effect/#default).
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 所有 jQuery UI 效果都在[http://jqueryui.com/effect/#default](http://jqueryui.com/effect/#default)展示。
- en: 'The `shake` behavior is particularly nice for reinforcing that an action is
    not currently applicable. We could make use of this effect on our page when the
    Resume button would have no effect:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`shake`行为特别适合强调当前不适用的操作。当简历按钮无效时，我们可以在页面上使用这个效果：'
- en: '[PRE14]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Listing 7.11
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 第 7.11 部分
- en: Our new code checks the length of `$('ul:paused')` to determine if there are
    any paused slideshows to resume. If so, it calls Cycle's `resume` action as before;
    otherwise, the `shake` effect is performed. We see here that `shake`, as with
    the other effects, has options available to fine-tune its appearance. Here we
    set the `distance` of the effect to a smaller number than the default, to make
    the button rapidly shake back and forth when clicked.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的新代码检查`$('ul:paused')`的长度，以确定是否有任何暂停的幻灯片秀要恢复。如果是，则像以前一样调用 Cycle 的`resume`操作；否则，执行`shake`效果。在这里，我们看到，与其他效果一样，`shake`有可用于调整其外观的选项。在这里，我们将效果的`distance`设置为比默认值小的数字，以使按钮在点击时快速来回摇摆。
- en: Interaction components
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 交互组件
- en: The next major feature of the jQuery UI is its interaction components, which
    are a set of behaviors that can be used to produce complex interactive applications.
    One such component, for example, is **Resizable**, which can allow the user to
    change the size of any element with natural dragging movements.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery UI 的下一个主要功能是其交互组件，这是一组行为，可以用来制作复杂的交互式应用程序。例如，其中一个组件是**Resizable**，它可以允许用户使用自然的拖动动作改变任何元素的大小。
- en: 'Applying an interaction to an element is as simple as calling the method that
    bears its name. For instance, we can make the book titles resizable with a call
    to `.resizable()` as follows:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 对元素应用交互就像调用带有其名称的方法一样简单。例如，我们可以通过调用`.resizable()`来使书名可调整大小，如下所示：
- en: '[PRE15]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Listing 7.12
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 7.12
- en: 'With jQuery UI''s CSS file referenced in the document, this code will add a
    resizing handle to the bottom-right corner of the title box. Dragging this box
    alters the region''s width and height as shown in the following screenshot:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在文档中引用了jQuery UI的CSS文件后，此代码将在标题框的右下角添加一个调整大小的手柄。拖动此框会改变区域的宽度和高度，如下面的截图所示：
- en: '![](img/image_07_004-1.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_07_004-1.jpg)'
- en: 'As we might expect by now, these methods can be customized with a host of options.
    If, say, we wish to constrain the resizing to only happen vertically, we can accomplish
    that by specifying which drag handle should be added as follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们现在可能期望的那样，这些方法可以使用大量选项进行定制。例如，如果我们希望将调整大小限制为仅在垂直方向上发生，我们可以通过指定应添加哪个拖动手柄来实现如下：
- en: '[PRE16]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Listing 7.13
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 7.13
- en: 'With a drag handle only on the south (bottom) side of the region, only the
    height of the region can be altered:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 只在区域的南（底部）侧有一个拖动手柄，只能改变区域的高度：
- en: '![](img/image_07_005-1.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_07_005-1.jpg)'
- en: Other interaction components
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 其他交互组件
- en: Other jQuery UI interactions include Draggable, Droppable, and Sortable. Like
    Resizable, they are highly configurable. We can view demos of all of them and
    their configuration options at [http://jqueryui.com/](http://jqueryui.com/).
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 其他jQuery UI交互包括可拖动的、可投放的和可排序的。与可调整大小一样，它们是高度可配置的。我们可以在[http://jqueryui.com/](http://jqueryui.com/)上查看它们的演示和配置选项。
- en: Widgets
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 小部件
- en: In addition to these building-block interaction components, jQuery UI includes
    a handful of robust user interface widgets that appear and function out-of-the-box
    like the full-fledged elements we are accustomed to seeing in desktop applications.
    Some of these are quite simple. The **Button** widget, for example, enhances buttons
    and links on the page with attractive styling and rollover states.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些基本交互组件外，jQuery UI还包括一些强大的用户界面小部件，它们的外观和功能像桌面应用程序中我们习惯看到的成熟元素一样。其中一些非常简单。例如，**按钮**小部件通过吸引人的样式和悬停状态增强了页面上的按钮和链接。
- en: 'Granting this appearance and behavior to all button elements on the page is
    extremely simple:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 将此外观和行为授予页面上的所有按钮元素非常简单：
- en: '[PRE17]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Listing 7.14
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 7.14
- en: 'When the stylesheet for the jQuery UI Smoothness theme is referenced, the buttons
    take on a glossy, beveled appearance:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 当引用jQuery UI平滑主题的样式表时，按钮将具有光滑、有倾斜的外观：
- en: '![](img/5297_07_07.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5297_07_07.png)'
- en: 'As with other UI widgets and interactions, Button accepts several options.
    We may wish to provide appropriate icons for our two buttons, for example; the
    Button widget comes with a large number of predefined icons that we can use. To
    do so, we could separate our `.button()` call into two, and specify an icon for
    each as follows:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他UI小部件和交互一样，按钮接受几个选项。例如，我们可能希望为我们的两个按钮提供适当的图标；按钮小部件带有大量预定义的图标供我们使用。为此，我们可以将我们的`.button()`调用分成两部分，并分别指定每个图标，如下所示：
- en: '[PRE18]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Listing 7.15
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 7.15
- en: 'The `primary` icons that we specified correspond to standard class names in
    jQuery UI''s theme framework. By default, `primary` icons are displayed to the
    left of the button text while `secondary` icons are displayed to the right:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们指定的`primary`图标对应于jQuery UI主题框架中的标准类名。默认情况下，`primary`图标显示在按钮文本的左侧，而`secondary`图标显示在右侧：
- en: '![](img/5297_07_08.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5297_07_08.png)'
- en: 'On the other hand, other widgets are much more sophisticated. The **Slider**
    widget introduces a brand new form element, similar to an HTML5 range element
    but cross-compatible with all popular browsers. This supports a greater degree
    of customization, as shown in the following code:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，其他小部件要复杂得多。**滑块**小部件引入了一个全新的表单元素，类似于HTML5的范围元素，但与所有流行的浏览器兼容。这支持更高程度的自定义，如下面的代码所示：
- en: '[PRE19]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Listing 7.16
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 7.16
- en: 'A call to `.slider()` transforms a simple `<div>` element into a slider widget.
    The widget can be controlled by dragging or by pressing the arrow keys, to aid
    in accessibility:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 对`.slider()`的调用将一个简单的`<div>`元素转换为滑块小部件。该小部件可以通过拖动或按箭头键来控制，以帮助实现可访问性：
- en: '![](img/5297_07_09.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5297_07_09.png)'
- en: In *Listing 7.16* we've specified a minimum value of `0` for the slider, and
    a maximum of the index of the last book in our slideshow. We can use this as a
    manual control for the slideshow, by sending messages back and forth between the
    slideshow and slider when their respective states change.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *清单 7.16* 中，我们为滑块指定了一个最小值 `0`，并为幻灯片展示中的最后一本书的索引设置了最大值。我们可以将这个作为幻灯片的手动控制，通过在它们各自的状态改变时在幻灯片和滑块之间发送消息。
- en: 'To react to the slider''s value changing, we can bind a handler to a custom
    event that is triggered by sliders. This event, `slide`, is not a native JavaScript
    event, but acts like one in our jQuery code. However, observing these events is
    so common that instead of calling `.on()` explicitly, we can just add our event
    handler to the `.slider()` call itself, as shown in the following code:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 为了对滑块值的变化做出反应，我们可以将处理程序绑定到由滑块触发的自定义事件上。这个事件，`slide`，不是一个原生的 JavaScript 事件，但在我们的
    jQuery 代码中表现得像一个。然而，观察这些事件是如此常见，以至于我们可以不需要显式地调用 `.on()`，而是可以直接将我们的事件处理程序添加到 `.slider()`
    调用本身，如下面的代码所示：
- en: '[PRE20]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Listing 7.17
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 7.17
- en: Whenever the `slide` callback is invoked, its `ui` parameter is populated with
    information about the widget, including its current value. By passing this value
    along to the Cycle plugin, we can manipulate the current slide being shown.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 每当调用 `slide` 回调时，它的 `ui` 参数就会填充有关小部件的信息，包括其当前值。通过将这个值传递给 Cycle 插件，我们可以操作当前显示的幻灯片。
- en: 'We also need to update the slider widget whenever the slideshow advances to
    another slide. To communicate in this direction we can use Cycle''s `before` callback,
    which is triggered before each slide transition:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要在幻灯片向前切换到另一个幻灯片时更新滑块小部件。为了在这个方向上进行通信，我们可以使用 Cycle 的 `before` 回调，在每次幻灯片转换之前触发：
- en: '[PRE21]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Listing 7.18
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 7.18
- en: Inside the `before` callback, we call the `.slider()` method again. This time,
    we call it with `value` as its first parameter to set the new slider value. In
    jQuery UI parlance, we call `value` a *method* of slider, even though it is invoked
    by calling the `.slider()` method, not by its own dedicated method name.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `before` 回调中，我们再次调用 `.slider()` 方法。这一次，我们将 `value` 作为它的第一个参数调用，以设置新的滑块值。在
    jQuery UI 的术语中，我们将 `value` 称为滑块的 *方法*，尽管它是通过调用 `.slider()` 方法而不是通过自己的专用方法名称来调用的。
- en: Other widgets
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 其他小部件
- en: Other jQuery UI widgets include Datepicker, Dialog, Tabs, and Accordion. Each
    widget has several associated options, events, and methods. For a full list, visit
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 其他 jQuery UI 小部件包括 Datepicker、Dialog、Tabs 和 Accordion。每个小部件都有几个相关的选项、事件和方法。完整列表，请访问
- en: '[http://jqueryui.com/](http://jqueryui.com/).'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '[jQuery UI](http://jqueryui.com/).'
- en: jQuery UI ThemeRoller
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: jQuery UI ThemeRoller
- en: 'One of the most exciting features of the jQuery UI library is ThemeRoller,
    a web-based interactive theme engine for the UI widgets. ThemeRoller makes creating
    highly customized, professional-looking elements quick and easy. The buttons and
    slider that we just created have the default theme applied to them; this theme
    will be output from *ThemeRoller* if no custom settings are supplied:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery UI 库最令人兴奋的功能之一是 ThemeRoller，这是一个基于 Web 的交互式主题引擎，用于 UI 小部件。ThemeRoller
    使得创建高度定制、专业外观的元素变得快速简单。我们刚刚创建的按钮和滑块都应用了默认主题；如果没有提供自定义设置，这个主题将从 *ThemeRoller* 输出：
- en: '![](img/5297_07_10.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5297_07_10.png)'
- en: Generating a completely different set of styles is a simple matter of visiting
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 生成完全不同风格的样式只需简单访问
- en: '[http://jqueryui.com/themeroller/](http://jqueryui.com/themeroller/), modifying
    the various options as desired, and pressing the Download Theme button. A `.zip`
    file of stylesheets and images can then be unpacked into your site directory.
    For example, by choosing a few different colors and textures, we can within minutes
    create a new, coordinated look for our buttons, icons, and slider, as shown in
    the following screenshot:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://jqueryui.com/themeroller/](http://jqueryui.com/themeroller/)，根据需要修改各种选项，然后按下下载主题按钮。然后，可以将样式表和图像的
    `.zip` 文件解压缩到您的站点目录中。例如，通过选择几种不同的颜色和纹理，我们可以在几分钟内为我们的按钮、图标和滑块创建一个新的协调外观，如下面的屏幕截图所示：'
- en: '![](img/5297_07_11.png)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5297_07_11.png)'
- en: The jQuery Mobile plugin library
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: jQuery Mobile 插件库
- en: We have seen how jQuery UI can assist us in assembling the user interface features
    needed for even a complex web application. The challenges it overcomes are varied
    and complex. A different set of hurdles exists, however, when preparing our pages
    for elegant presentation and interaction on mobile devices. To create a website
    or application for modern smart phones and tablets, we can turn to the jQuery
    Mobile project.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到 jQuery UI 如何帮助我们组装即使是复杂 web 应用程序所需的用户界面特性。它克服的挑战是多样且复杂的。然而，当为移动设备设计我们的页面以进行优雅的呈现和交互时，存在一组不同的障碍。为了创建现代智能手机和平板电脑的网站或应用程序，我们可以转向
    jQuery Mobile 项目。
- en: Like jQuery UI, jQuery Mobile consists of a suite of related components that
    can be used *a**la carte* but which work together seamlessly. The framework provides
    an Ajax-driven navigation system, mobile-optimized interactive elements, and advanced
    touch event handlers. Again, as with jQuery UI, exploring all the features of
    jQuery Mobile is a daunting task, so instead we will provide some simple examples
    and refer to the official documentation for more details.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 与 jQuery UI 一样，jQuery Mobile 由一套相关组件组成，可以*单独使用*，但可以无缝地一起工作。该框架提供了一个基于 Ajax 的导航系统、移动优化的交互元素和高级触摸事件处理程序。与
    jQuery UI 一样，探索 jQuery Mobile 的所有功能是一个艰巨的任务，因此我们将提供一些简单的示例，并参考官方文档了解更多细节。
- en: Downloads, documentation, and demos for jQuery Mobile are available at
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery Mobile 的下载、文档和演示可在以下位置找到：
- en: '[http://jquerymobile.com/](http://jquerymobile.com/).'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://jquerymobile.com/](http://jquerymobile.com/).'
- en: Our jQuery Mobile example will use Ajax technology, so web server software will
    be required in order to try these examples. More information is available in [Chapter
    6](3a5a790f-4c0a-4b63-bb00-cc38e78309c6.xhtml), *Sending Data with Ajax*.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 jQuery Mobile 示例将使用 Ajax 技术，因此需要网页服务器软件才能尝试这些示例。更多信息可在[第 6 章](3a5a790f-4c0a-4b63-bb00-cc38e78309c6.xhtml)中找到，*使用
    Ajax 发送数据*。
- en: HTML5 custom data attributes
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTML5 自定义 data 属性
- en: The code examples we've seen so far in this chapter have all used JavaScript
    APIs exposed by plugins in order to invoke the plugin functionality. We've seen
    jQuery object methods, global functions, and custom selectors as some ways that
    plugins offer their services to our scripts. The jQuery Mobile library has these
    entry points as well, but the most common way of interacting with it is instead
    via HTML5 data attributes.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在本章中我们看到的代码示例都是使用 JavaScript API 暴露的插件来调用插件功能。我们已经看到了 jQuery 对象方法、全局函数和自定义选择器是插件向脚本提供服务的一些方式。jQuery
    Mobile 库也有这些入口点，但与其进行交互的最常见方式是使用 HTML5 data 属性。
- en: The HTML5 specification allows us to insert any attribute we want into an element,
    so long as the attribute is prefixed by `data-`. Such attributes are completely
    ignored when rendering the page, but are available to us in our jQuery scripts.
    When we include jQuery Mobile on a page, the script scans the page for some `data-*`
    attributes, and adds mobile-friendly features to the corresponding elements.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: HTML5 规范允许我们在元素中插入任何我们想要的属性，只要属性以 `data-` 为前缀。在呈现页面时，这些属性将完全被忽略，但在我们的 jQuery
    脚本中可以使用。当我们在页面中包含 jQuery Mobile 时，脚本会扫描页面寻找一些 `data-*` 属性，并将移动友好的特性添加到相应的元素。
- en: The jQuery Mobile library looks for a few specific custom data attributes. We
    will examine more general ways of using this feature in our own scripts in [Chapter
    12](0446c068-e7fd-426a-ab8b-0157b1387e1f.xhtml), *Advanced DOM Manipulation*.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery Mobile 库会寻找几个特定的自定义 data 属性。我们将在[第 12 章](0446c068-e7fd-426a-ab8b-0157b1387e1f.xhtml)中检查在我们自己的脚本中使用此功能的更一般的方法，*高级
    DOM 操作*。
- en: Because of this design choice, we will be able to demonstrate some powerful
    features of jQuery Mobile here without writing any JavaScript code ourselves.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这种设计选择，我们将能够演示 jQuery Mobile 的一些强大特性，而无需自己编写任何 JavaScript 代码。
- en: Mobile navigation
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移动导航
- en: 'One of the most prominent features of jQuery Mobile is its ability to simply
    transform the behavior of links on a page into Ajax-powered navigation. This transformation
    adds simple animation to the process, while preserving standard browser history
    navigation. To see this in action, we''ll start with a document that presents
    links to information about several books (the same content we used for building
    a slideshow earlier) as follows:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery Mobile 最显著的特性之一是它能够将页面上链接的行为简单地转变为 Ajax 驱动的导航。这种转变会为此过程添加简单的动画，同时保留了标准浏览器历史导航。为了看到这一点，我们将从一个呈现有关几本书信息的链接的文档开始（与我们之前用于构建幻灯片放映的相同内容），如下所示：
- en: '[PRE22]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: In the downloadable code package for this chapter, the finished HTML example
    page can be found in the file called `mobile.html`.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的可下载代码包中，可以在名为`mobile.html`的文件中找到完成的 HTML 示例页面。
- en: 'So far we have not introduced jQuery Mobile at all, and the page is rendered
    in the default browser style, as we would expect. This is shown in the following
    screenshot:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们还没有介绍 jQuery Mobile，页面呈现出默认的浏览器样式，正如我们所预期的那样。以下是屏幕截图：
- en: '![](img/image_07_006-1.jpg)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_07_006-1.jpg)'
- en: 'Our next step is to change the `<head>` section of the document so that it
    references jQuery Mobile and its stylesheet as follows:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的下一步是更改文档的`<head>`部分，以便引用 jQuery Mobile 及其样式表，如下所示：
- en: '[PRE23]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Note that we have also introduced a `<meta>` element defining the viewport of
    the page. This declaration tells mobile browsers to scale the content of the document
    in such a way that it completely fills the width of the device.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们还引入了一个定义页面视口的`<meta>`元素。这个声明告诉移动浏览器按照完全填充设备宽度的方式缩放文档的内容。
- en: We have to include the jquery-migrate plugin on the page, because without it,
    the latest stable version of jQuery doesn't work with the latest stable version
    of jQuery Mobile. Figure that one out. In any case, once the two officially work
    together, you can simply remove the jquery-migrate plugin from the page.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须在页面中包含 jquery-migrate 插件，因为如果没有它，最新稳定版本的 jQuery 就不能与最新稳定版本的 jQuery Mobile
    一起工作。想想这个问题。无论如何，一旦这两者正式配合起来，你可以简单地从页面中删除 jquery-migrate 插件。
- en: 'The jQuery Mobile styles are now applied to our document, displaying a larger
    sans-serif font and updating colors and spacing, as shown in the following screenshot:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery Mobile 样式现在应用于我们的文档，显示出更大的无衬线字体，更新颜色和间距，如下图所示：
- en: '![](img/image_07_007-1.jpg)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_07_007-1.jpg)'
- en: 'To properly handle navigation, jQuery Mobile needs to understand the structure
    of our page. We provide this information by using the `data-role` attribute:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 为了正确处理导航，jQuery Mobile 需要理解我们页面的结构。我们通过使用`data-role`属性来提供这些信息：
- en: '[PRE24]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Now when the page loads, jQuery Mobile notices that we have a page header,
    and renders a standard-looking mobile header bar across the top of the page:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 现在页面加载时，jQuery Mobile 注意到我们有一个页面标题，并在页面顶部渲染出一个标准的移动设备标题栏：
- en: '![](img/image_07_008-1.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_07_008-1.jpg)'
- en: 'When the text is too long for the header bar, jQuery Mobile truncates it and
    adds an ellipsis at the end. In this case, we can rotate the mobile device to
    its landscape orientation to see the full title:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 当文本过长时超出标题栏，jQuery Mobile 会截断它，并在末尾添加省略号。在这种情况下，我们可以将移动设备旋转到横向方向以查看完整标题：
- en: '![](img/image_07_009-1.jpg)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_07_009-1.jpg)'
- en: 'More importantly, this is all that is required in order to produce Ajax navigation.
    On the pages linked to from this list, we use similar markup:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 更重要的是，为了产生 Ajax 导航，这就是所需的全部内容。在从此列表链接到的页面上，我们使用类似的标记：
- en: '[PRE25]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'When the link to this page is clicked on, jQuery Mobile loads the page with
    an Ajax call, grabs the portion of the document marked with `data-role="page"`,
    and displays this content using a fading transition:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 当点击到这个页面的链接时，jQuery Mobile 使用 Ajax 调用加载页面，抓取带有`data-role="page"`标记的文档部分，并使用淡入过渡显示这些内容：
- en: '![](img/image_07_010-1.jpg)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_07_010-1.jpg)'
- en: Delivering multiple pages in one document
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在一个文档中提供多个页面
- en: 'In addition to offering Ajax functionality for loading other documents, jQuery
    Mobile provides the tools to deliver the same user experience even if all the
    content is contained within a single document. To implement this, we simply link
    the anchors within the page using standard `#` notation, and mark those sections
    of the page with `data-role="page"` just as if they were in separate documents,
    as follows:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 除了提供用于加载其他文档的 Ajax 功能外，jQuery Mobile 还提供了在单个文档中包含所有内容时提供相同用户体验的工具。为了实现这一点，我们只需使用标准的`#`符号将页面中的锚点链接起来，并将页面的那些部分标记为`data-role="page"`，就像它们在单独的文档中一样，如下所示：
- en: '[PRE26]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: We can freely choose between these two techniques at our convenience. Placing
    content in separate documents allows us to defer the loading of information until
    it is needed, at the cost of some higher overhead due to multiple page requests.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以根据自己的方便选择这两种技术。将内容放在单独的文档中允许我们延迟加载信息，直到需要时，但这会增加一些开销，因为需要多个页面请求。
- en: Interactive elements
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 交互元素
- en: The bulk of the features offered by jQuery Mobile are specific interactive elements
    for use on a page. These elements enhance basic web page functionality, making
    page components more user-friendly for a touch interface. Among these elements
    are accordion--style collapsible sections, toggle switches, sliding panels, and
    responsive tables.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery Mobile 提供的功能主要是用于页面上的特定交互元素。这些元素增强了基本的网页功能，使页面组件在触摸界面上更加用户友好。其中包括手风琴式可折叠部分、切换开关、滑动面板和响应式表格。
- en: There is considerable overlap between the user interface elements offered by
    jQuery UI and jQuery Mobile. It is not recommended to use the two libraries together
    on the same page, but because the most important widgets are offered by both,
    there is rarely a need to do so.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery UI 和 jQuery Mobile 提供的用户界面元素有很大的重叠。不建议在同一页上同时使用这两个库，但由于最重要的小部件都被两者提供，所以很少有这样的需要。
- en: List views
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列表视图
- en: 'Due to their small, vertical screen layouts, smart phone applications are often
    heavily list-driven. We can use jQuery Mobile to easily enhance the lists on our
    pages to behave much more like these common native app elements. Once again, we
    simply introduce HTML5 custom data attributes:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 由于它们的小型垂直屏幕布局，智能手机应用程序通常是以列表为主导的。我们可以使用 jQuery Mobile 轻松地增强页面上的列表，使它们的行为更像这些常见的本地应用程序元素。再次，我们只需引入
    HTML5 自定义数据属性：
- en: '[PRE27]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Adding `data-role="listview"` tells jQuery Mobile to make the links within
    this list large and easy to activate with a finger in a touch interface, while
    `data-inset="true"` gives the list a nice border to separate it from surrounding
    content. The result is a familiar, native-looking control, as follows:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 添加 `data-role="listview"` 告诉 jQuery Mobile 将此列表中的链接设为大号，并且易于在触摸界面中用手指激活，而 `data-inset="true"`
    则为列表提供了一个漂亮的边框，将其与周围内容分隔开来。结果是一个熟悉的、具有本地外观的控件，如下所示：
- en: '![](img/image_07_011-1.jpg)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_07_011-1.jpg)'
- en: 'Now, we have large touch targets, but we can go a step further. List views
    like this in mobile apps are often paired with search fields to narrow down the
    items in the list. We can add such a field by introducing the `data-filter` attribute
    as follows:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们有了大型触摸目标，但我们可以再进一步。移动应用程序中的类似列表视图通常会与搜索字段配对，以缩小列表中的项目。我们可以通过引入 `data-filter`
    属性来添加这样一个字段，如下所示：
- en: '[PRE28]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The result is a rounded input box with an appropriate icon, placed above the
    list:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是一个带有适当图标的圆角输入框，放置在列表上方：
- en: '![](img/image_07_012-1.jpg)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_07_012-1.jpg)'
- en: 'Not only does this search field look native, but it behaves correctly too,
    even though we have added no code of our own:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们没有添加任何自己的代码，但这个搜索字段看起来不仅本地化，而且行为也是正确的：
- en: '![](img/image_07_013-1.jpg)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_07_013-1.jpg)'
- en: Toolbar buttons
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工具栏按钮
- en: Another user interface element enhanced by jQuery Mobile is the simple button.
    Just as jQuery UI allows us to standardize button appearances, jQuery Mobile increases
    the size and modifies the appearance of buttons to optimize them for touch input.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个由 jQuery Mobile 增强的用户界面元素是简单按钮。就像 jQuery UI 允许我们标准化按钮外观一样，jQuery Mobile 增加了按钮的大小并修改了外观，以优化它们用于触摸输入。
- en: 'In some cases, jQuery Mobile even creates appropriate buttons for us where
    before there were none. For instance, there are often buttons in the toolbar of
    a mobile app. One standard button is the Back button in the upper-left corner
    of the screen, allowing the user to navigate up one level. If we add a `data-add-back-btn`
    attribute to our page `<div>` elements, we can have this feature without any scripting
    work:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，jQuery Mobile 甚至会为我们创建适当的按钮，在以前没有的情况下。例如，在移动应用程序的工具栏中通常有按钮。一个标准按钮是屏幕左上角的返回按钮，允许用户向上导航一级。如果我们为页面的
    `<div>` 元素添加 `data-add-back-btn` 属性，我们就可以在不进行任何脚本工作的情况下获得此功能：
- en: '[PRE29]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Once this attribute has been added, a standard Back button is added to the
    toolbar of each page we navigate to:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦添加了这个属性，每次导航到一个页面时，都会在工具栏上添加一个标准的返回按钮：
- en: '![](img/image_07_014-1.jpg)'
  id: totrans-212
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_07_014-1.jpg)'
- en: A complete listing of HTML5 data attributes for initializing and configuring
    jQuery Mobile widgets can be found at [http://jquerymobile.com/](http://jquerymobile.com/).
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在 [http://jquerymobile.com/](http://jquerymobile.com/) 找到用于初始化和配置 jQuery Mobile
    小部件的完整 HTML5 数据属性列表。
- en: Advanced features
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高级功能
- en: 'As our mobile pages require more customized design elements and more complex
    interactions, jQuery Mobile provides robust tools to help us create them. All
    of the features are documented on the jQuery Mobile site ([http://jquerymobile.com/](http://jquerymobile.com/)).
    While these features are both too advanced and too numerous to discuss here in
    detail, a few deserve a brief mention:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们的移动页面需要更多定制设计元素和更复杂的交互，jQuery Mobile 提供了强大的工具来帮助我们创建它们。所有功能都在 jQuery Mobile
    网站上有文档记录 ([http://jquerymobile.com/](http://jquerymobile.com/))。虽然这些功能在此处详细讨论起来既过于高级又过于繁多，但还是值得简要提及一些：
- en: '**Mobile-friendly events**: When jQuery Mobile is referenced on a page, our
    jQuery code has access to a number of special events including `tap`, `taphold`,
    and `swipe`. Handlers for these events can be bound with the same `.on()` method
    as for any other event. With `taphold` and `swipe` in particular, their default
    configurations, which include touch duration, can be modified by accessing properties
    of the `$.event.special.taphold` and `$.event.special.swipe` objects. In addition
    to touch-based events, jQuery Mobile provides special events that react to scrolling,
    orientation change, and various stages of its page navigation, as well as a set
    of virtualized mouse events that react to both mouse and touch.'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**移动友好事件**：当在页面上引用 jQuery Mobile 时，我们的 jQuery 代码可以访问许多特殊事件，包括 `tap`、`taphold`
    和 `swipe`。对于这些事件的处理程序可以与任何其他事件一样使用`.on()` 方法进行绑定。特别是对于 `taphold` 和 `swipe`，它们的默认配置（包括触摸持续时间）可以通过访问`$.event.special.taphold`
    和 `$.event.special.swipe` 对象的属性进行修改。除了基于触摸的事件外，jQuery Mobile 还提供了对滚动、方向更改以及其页面导航的各个阶段以及一组虚拟化鼠标事件的特殊事件的支持，这些事件对鼠标和触摸都做出反应。'
- en: '**Theming**: As with jQuery UI, jQuery Mobile offers a ThemeRoller'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主题化**：与 jQuery UI 一样，jQuery Mobile 提供了一个 ThemeRoller。'
- en: ([http://jquerymobile.com/themeroller/](http://jquerymobile.com/themeroller/))
    for customizing the look and feel of widgets.
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([http://jquerymobile.com/themeroller/](http://jquerymobile.com/themeroller/))
    用于自定义小部件的外观和感觉。
- en: '**PhoneGap integration**: Sites built with jQuery Mobile are easy to convert
    to native mobile applications using PhoneGap (Cordova), with access to mobile
    device APIs (such as camera, accelerometer, and geolocation) and app stores. The
    `$.support.cors` and `$.mobile.allowCrossDomainPages` properties can even allow
    access to pages not contained within the application, such as those on a remote
    server.'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PhoneGap 集成**：使用 jQuery Mobile 构建的站点可以轻松转换为原生移动应用程序，使用 PhoneGap（Cordova），可访问移动设备
    API（如相机、加速计和地理位置）和应用商店。`$.support.cors` 和 `$.mobile.allowCrossDomainPages` 属性甚至可以允许访问不包含在应用程序中的页面，例如远程服务器上的页面。'
- en: Summary
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter we have examined ways in which we can incorporate third-party
    plugins into our web pages. We've looked closely at the Cycle plugin, jQuery UI,
    and jQuery Mobile, and in the process have learned the patterns that we will encounter
    time and again in other plugins. In the next chapter, we'll take advantage of
    jQuery's plugin architecture to develop a few different types of plugins of our
    own.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了如何将第三方插件整合到我们的网页中。我们仔细研究了 Cycle 插件、jQuery UI 和 jQuery Mobile，并在此过程中学习了我们将在其他插件中反复遇到的模式。在下一章中，我们将利用
    jQuery 的插件架构开发一些不同类型的插件。
- en: Exercises
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: Increase the cycle transition duration to half a second, and change the animation
    such that each slide fades out before the next one fades in. Refer to the Cycle
    documentation to find the appropriate option to enable this.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将循环转换持续时间增加到半秒，并更改动画，使每个幻灯片在下一个幻灯片淡出之前淡入。参考循环文档以找到启用此功能的适当选项。
- en: Set the `cyclePaused` cookie to persist for 30 days.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`cyclePaused` cookie 设置为持续 30 天。
- en: Constrain the title box to resize only in ten pixel increments.
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 限制标题框只能以十个像素为增量调整大小。
- en: Make the slider animate smoothly from one position to the next as the slideshow
    advances.
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让滑块在幻灯片播放时从一个位置平稳地动画到下一个位置。
- en: Instead of letting the slideshow loop forever, cause it to stop after the last
    slide is shown. Disable the buttons and slider when this happens.
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不要让幻灯片播放循环无限，使其在显示最后一张幻灯片后停止。当发生这种情况时，禁用按钮和滑块。
- en: Create a new jQuery UI theme that has a light blue widget background and dark
    blue text and apply the theme to our sample document.
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的 jQuery UI 主题，具有浅蓝色小部件背景和深蓝色文本，并将主题应用到我们的示例文档中。
- en: Modify the HTML in `mobile.html` so that the list view is divided up by the
    first letters of the book titles. See the jQuery Mobile documentation for `data-role="list-divider"`
    for details.
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`mobile.html`中的HTML，使得列表视图按照书名的首字母分隔。详细信息请参阅jQuery Mobile文档中关于`data-role="list-divider"`的部分。
