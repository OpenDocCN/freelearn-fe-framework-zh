- en: Chapter 6. Component Communication
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。组件通信
- en: 'Up until now, we have built a single component, but the real power of Angular
    components is building the interaction between them. in this chapter, we will
    learn how components can communicate in different ways:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经构建了一个单一的组件，但是Angular组件的真正力量在于构建它们之间的交互。在本章中，我们将学习组件如何以不同的方式进行通信：
- en: Pass data from the parent component to the child through properties
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从父组件通过属性向子组件传递数据
- en: Define custom events on a child component for the parent to listen to
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在子组件上定义自定义事件供父组件监听
- en: Communicate via local variables
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过本地变量进行通信
- en: Query child components using the parent component
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用父组件查询子组件
- en: Passing data via properties
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过属性传递数据
- en: 'The parent component can pass data to the child component through properties.
    There are two ways that define input properties for a component:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 父组件可以通过属性将数据传递给子组件。有两种方式可以为组件定义输入属性：
- en: By creating an input array on the component decorator
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过在组件装饰器上创建一个输入数组
- en: By using the `@Input` decorator for decorating a class property
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`@Input`装饰器装饰一个类属性
- en: 'Using the component input array is simple and straightforward. Just declare
    an input array and populate it with strings that represent the name of the property
    you are expecting:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 使用组件输入数组非常简单明了。只需声明一个输入数组，并用表示您期望的属性名称的字符串填充它：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In this example, we created a child component, which defined an input array
    with a single string named `title` that represents a property that the parent
    component can bind to and pass data through.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们创建了一个子组件，它定义了一个名为`title`的单个字符串输入数组，表示父组件可以绑定并通过其传递数据的属性。
- en: 'Don''t forget to add the `ChildComponent` class to the declarations attribute
    of the `AppModule`. Otherwise, this component can''t be used within the template
    of the `AppComponent`. This configuration is required each time you need to use
    a component or a directive in another one and within the same module:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记将`ChildComponent`类添加到`AppModule`的declarations属性中。否则，该组件无法在`AppComponent`的模板中使用。每次需要在另一个组件和同一模块中使用组件或指令时，都需要进行此配置：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The approach of the input array is suitable when we don't need to access the
    input in the `Component` class, and we don't care about the type of the input.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们不需要在`Component`类中访问输入，并且不关心输入的类型时，输入数组的方法是合适的。
- en: 'Alternatively, we can bind an input to a class property using the `@Input()`
    decorator:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以使用`@Input()`装饰器将输入绑定到类属性：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Binding to a class property (the second example) is considered to be a best
    practice when dealing with inputs.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 绑定到类属性（第二个例子）被认为是处理输入时的最佳实践。
- en: An input can be a primitive or an object.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 输入可以是原始类型或对象。
- en: Emitting custom events
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发出自定义事件
- en: 'When the child component needs to communicate with its parent component, it
    can emit an event. This technique keeps the child component de-coupled from its
    parent (de-coupled: doesn''t need to know its parents).'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当子组件需要与其父组件通信时，它可以触发一个事件。这种技术使子组件与其父组件解耦（解耦：不需要知道其父组件）。
- en: In Angular, we need to use a class named `EventEmitter` if we want to emit events.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在Angular中，如果我们想要触发事件，我们需要使用一个名为`EventEmitter`的类。
- en: You need to instantiate the `EventEmitter` class, assign it to a class property,
    and call the `emit` method.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要实例化`EventEmitter`类，将其分配给一个类属性，并调用`emit`方法。
- en: 'In the following example, the child component will emit a custom event named
    `TitleClicked` when the user clicks on the title:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的例子中，当用户点击标题时，子组件将触发一个名为`TitleClicked`的自定义事件：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: First, we imported the `EventEmitter` class and the `Output` decorator from
    Angular core. Then, we created a class property named `titleClicked` and assigned
    it to a fresh instance of the `EventEmitter` class.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们从Angular核心中导入了`EventEmitter`类和`Output`装饰器。然后，我们创建了一个名为`titleClicked`的类属性，并将其分配给`EventEmitter`类的一个新实例。
- en: Then, we bound the native click event of the `<h2>` element and called the `emit()`
    method of the `titleClicked` object.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们绑定了`<h2>`元素的原生点击事件，并调用了`titleClicked`对象的`emit()`方法。
- en: The parent component can now bind to this event.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 父组件现在可以绑定到这个事件。
- en: Referencing with a local variable
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用本地变量引用
- en: 'One component can access another component''s properties and methods using
    local variables. In the following example, we create a local variable for the
    child component that becomes accessible within the template:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 一个组件可以使用本地变量访问另一个组件的属性和方法。在下面的例子中，我们为子组件创建了一个本地变量，该变量在模板内部可访问：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We create a local variable using the `#` symbol.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`#`符号创建一个本地变量。
- en: The method in the child component must be public, otherwise Angular will throw
    an exception.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 子组件中的方法必须是公共的，否则Angular会抛出异常。
- en: This technique is very useful in some cases because it doesn't require any code
    inside the component class. On the other hand, the reference context is just inside
    the template.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这种技术在某些情况下非常有用，因为它不需要在组件类内部编写任何代码。另一方面，引用上下文仅在模板内部。
- en: If you need to access the child component inside the parent component, you need
    to inject a reference to the child component using the `@ViewChild` decorator.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要在父组件内部访问子组件，您需要使用`@ViewChild`装饰器注入对子组件的引用。
- en: 'Consider the following example:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下例子：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The parent component is using the `@ViewChild` decorator (imported from angular
    core) passing the name of the component, and assigning it to a local class member
    named `childComponent`.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 父组件正在使用`@ViewChild`装饰器（从angular核心导入），传递组件的名称，并将其分配给一个名为`childComponent`的本地类成员。
- en: If we have more than one instance of the child component, we can use the `@ViewChildren`
    decorator instead.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们有多个子组件的实例，我们可以使用`@ViewChildren`装饰器。
- en: Querying child components with the parent component
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用父组件查询子组件
- en: The `@ViewChildren` component will provide a reference to all of the children
    components of a given type as a `QueryList`, which contains an array of child
    instances.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`@ViewChildren`组件将提供对给定类型的所有子组件的引用，作为`QueryList`，其中包含子实例的数组。'
- en: 'Consider the following example:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下例子：
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Both `ViewChildren` and the `QueryList` are imported from Angular core.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`ViewChildren`和`QueryList`都是从Angular核心中导入的。'
- en: Summary
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'Components can interact and communicate in many ways. Each technique is suitable
    for a certain situation. The main difference is related to the scope of communication:
    template context or component class context.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 组件可以以多种方式进行交互和通信。每种技术都适用于特定情况。主要区别与通信范围有关：模板上下文或组件类上下文。
- en: This flexibility enables us to create complex component compositions that easily
    share data and interactions, which consists of APIs.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这种灵活性使我们能够创建复杂的组件组合，轻松共享数据和交互，其中包括API。
- en: In the next chapter, we will build useful components and also learn about Angular
    2 change detection and the component life cycle.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将构建有用的组件，还将学习关于Angular 2变化检测和组件生命周期。
