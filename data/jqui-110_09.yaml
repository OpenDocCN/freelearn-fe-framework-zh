- en: Chapter 9. Creating Menus
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章 创建菜单
- en: The menu widget, previously a part of the autocomplete widget, became a standalone
    plugin in its own right from Version 1.9 of the library, which allows for its
    re-use in other components. It can be used on its own to transform a list of hyperlinks
    into a themeable menu that can be controlled using the keyboard or mouse, although
    it really comes into its own when used with other components such as buttons.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 菜单小部件，以前是自动完成小部件的一部分，从库的1.9版本开始成为一个独立的插件，允许在其他组件中重新使用它。它可以单独使用，将超链接列表转换为可使用键盘或鼠标控制的可主题化菜单，尽管当与其他组件如按钮一起使用时，它真正发挥作用。
- en: Each menu has a number of menu items associated with it, which when selected
    will direct the visitor to any part of your site. When you click on the top level,
    a number of submenu items will slide into view; these may have extra decoration
    in the form of icons, or be disabled if access is to be prevented at the time
    of accessing the menu option.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 每个菜单都有许多与之关联的菜单项，当选择时将将访问者定向到站点的任何部分。当您点击顶级菜单时，一些子菜单项将滑入视图；这些可能具有额外的装饰，如图标，或者如果在访问菜单选项时要阻止访问，则会被禁用。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: How to turn a list into a menu, with or without submenus
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何将列表转换为具有或不具有子菜单的菜单
- en: The options available for configuring a menu
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置菜单的可用选项
- en: Adding style to menus
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为菜单添加样式
- en: Manipulating menu items with icons and dividers
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用图标和分隔符操纵菜单项
- en: Using methods
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用方法
- en: Enabling and disabling menu options programmatically
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以编程方式启用和禁用菜单选项
- en: Responding to events
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 响应事件
- en: Creating horizontal and context menus
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建水平和上下文菜单
- en: Extending a `<select>` box using jQuery UI's menu
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用jQuery UI的菜单扩展`<select>`框
- en: Implementing a basic menu widget
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现基本菜单小部件
- en: Navigation is a crucial element of the web design; a poorly designed menu will
    always detract from good content. Good navigation must be both aesthetically pleasing
    and usable. Using the jQuery UI menu widget, we can create the perfect navigation
    for your website.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 导航是网页设计的关键元素；一个设计不佳的菜单将永远减少良好内容的吸引力。良好的导航必须既具有美学魅力又具有可用性。使用jQuery UI菜单小部件，我们可以为您的网站创建完美的导航。
- en: Although it is possible to use a variety of different elements to create our
    menu, the `<ul>` element is by far the most common one to use. Menus can be created
    from any valid markup, as long as the elements have a strict parent-child relationship,
    with each menu having its own anchor. Following the first example, where we will
    take a series of European towns and convert them into a basic menu we will further
    explore the structure.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们可以使用各种不同的元素来创建我们的菜单，但`<ul>`元素是迄今为止最常用的一个。菜单可以从任何有效的标记创建，只要元素具有严格的父子关系，每个菜单都有自己的锚点。在第一个例子中，我们将采用一系列欧洲城镇并将其转换为基本菜单，我们将进一步探讨结构。
- en: 'In a new file in your text editor, create the following page:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在文本编辑器中新建一个文件，创建以下页面：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Save the code as `menu1.html` in your `jqueryui` working folder. Let's take
    a moment to familiarize ourselves with the code that goes into making the markup
    required for a menu.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 将代码保存为`menu1.html`在您的`jqueryui`工作文件夹中。让我们花点时间熟悉一下制作菜单所需的标记的代码。
- en: 'We need the following files from the library to create a menu from our chosen
    elements:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要从库中获取以下文件，以从我们选择的元素创建菜单：
- en: '`jquery-2.0.3.js`'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jquery-2.0.3.js`'
- en: '`jquery.ui.core.js`'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jquery.ui.core.js`'
- en: '`jquery.ui.widget.js`'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jquery.ui.widget.js`'
- en: '`jquery.ui.position.js`'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jquery.ui.position.js`'
- en: '`jquery.ui.menu.js`'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jquery.ui.menu.js`'
- en: 'When you view the page in a browser, you''ll see that we''ve turned our unordered
    list into a simple menu. We''ve added an additional style in our example, unlike
    other library components, the menu widget needs some additional styling, otherwise
    it will consume 100 percent of the width of its container by default, which will
    be the screen. You can see the results in the following screenshot:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 当您在浏览器中查看页面时，您会发现我们已经将我们的无序列表转换为一个简单的菜单。在我们的示例中，我们添加了一个额外的样式，与其他库组件不同，菜单小部件需要一些额外的样式，否则它将默认占用其容器的100%，这将是屏幕。您可以在以下截图中看到结果：
- en: '![Implementing a basic menu widget](img/2209OS_09_02.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![实现基本菜单小部件](img/2209OS_09_02.jpg)'
- en: 'A menu widget is normally constructed from several standard HTML elements arranged
    in a specific manner:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 菜单小部件通常由几个按特定方式排列的标准HTML元素构成：
- en: An outer container element, on which the `menu()` method is called (this can
    be either a `<ul>` or `<ol>` element)
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调用`menu()`方法的外部容器元素（可以是`<ul>`或`<ol>`元素）
- en: An `<a>` element within an `<li>` element for each menu item
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个菜单项中的`<li>`元素内的`<a>`元素
- en: An element for the title of each menu item
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个菜单项的标题元素
- en: Note
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注：
- en: These elements can be either hardcoded into the page, added dynamically, or
    can be a mixture of both, depending upon the requirements.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这些元素可以是硬编码到页面中的，也可以是动态添加的，或者可以根据要求混合使用。
- en: All we need on the page is a list, using either the `<ul>` or `<ol>` tags. In
    our example we've created a more complex example, which jQuery UI uses to turn
    into a menu with two levels of submenus.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 页面上我们所需要的只是一个列表，可以使用`<ul>`或`<ol>`标签。在我们的示例中，我们创建了一个更复杂的示例，jQuery UI 将其转换为具有两级子菜单的菜单。
- en: After linking first to the jQuery core library, we link to the `jquery.ui.core.js`
    and `jquery.ui.widget.js` files that are required by all UI-based components,
    the file, and finally `jquery.ui.position.js`. We then link to the component's
    source file, which in this case is `jquery.ui.menu.js`. We can then turn to our
    custom `<script>` element in which we add the code that creates the menu. This
    is then executed as soon as the Document Object Model (DOM) is loaded and ready.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在首先链接到 jQuery 核心库后，我们链接到所有基于 UI 的组件所需的`jquery.ui.core.js`和`jquery.ui.widget.js`文件，然后链接到文件，最后链接到`jquery.ui.position.js`。然后我们链接到组件的源文件，这在本例中是`jquery.ui.menu.js`。然后我们转到我们的自定义`<script>`元素，在其中添加创建菜单的代码。一旦文档对象模型（DOM）加载并准备就绪，就会立即执行此代码。
- en: Within this function we simply call the `menu()` widget method on the jQuery
    object, representing our menu container element (the `<ul>` element with an id
    of `myTabs`). When we run this file in a browser, we should see the tabs as they
    appeared in the first screenshot of this chapter (without the annotations of course).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在此函数内部，我们只需在代表菜单容器元素的 jQuery 对象上调用`menu()`小部件方法（具有`myTabs` id 的`<ul>`元素）。当我们在浏览器中运行此文件时，应该会看到选项卡的外观与本章第一张截图中的外观相同（当然没有注释）。
- en: Exploring the menu CSS framework classes
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索菜单 CSS 框架类
- en: Using Firebug for Firefox (or another generic DOM explorer), we can see that
    a variety of classnames are added to the different underlying HTML elements that
    go to make up a menu widget.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Firefox 的 Firebug（或另一个通用 DOM 浏览器），我们可以看到一系列类名被添加到构成菜单小部件的不同底层 HTML 元素中。
- en: 'Let''s review these classnames briefly and see how they contribute to the overall
    appearance of the widget. To the outer container `<ul>`, the following classnames
    are added:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们简要回顾一下这些类名，并看看它们如何对小部件的整体外观产生影响。对于外部容器`<ul>`，添加了以下类名：
- en: '| Classname | Applies/Applied to |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| 类名 | 应用/应用于 |'
- en: '| --- | --- |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `ui-menu` | The outer container of the menu. |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| `ui-menu` | 菜单的外部容器。 |'
- en: '| `ui-widget` | The outer container of all widgets. It sets font family and
    font size to widgets. |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| `ui-widget` | 所有小部件的外部容器。它设置小部件的字体系列和字体大小。 |'
- en: '| `ui-widget-content` | Applies content container styles to an element and
    its child text, links, and icons (applicable to a parent or sibling of the header).
    |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| `ui-widget-content` | 将内容容器样式应用于元素及其子文本、链接和图标（适用于标题的父元素或同级元素）。 |'
- en: '| `ui-corner-all` | Applies corner radius to all four corners of the element
    |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| `ui-corner-all` | 将元素的四个角的角半径应用于所有四个角。 |'
- en: '| `ui-menu-icons` | The submenu icons set via the `icons` option when initiating
    the menu. |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| `ui-menu-icons` | 通过在初始化菜单时设置的`icons`选项设置的子菜单图标。 |'
- en: 'The first element within the container is the `<li>` element. This element
    receives the following classnames:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 容器内的第一个元素是`<li>`元素。该元素接收以下类名：
- en: '| Classname | Purpose |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| 类名 | 目的 |'
- en: '| --- | --- |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `ui-state-disabled` | Applies a dimmed opacity to the disabled UI elements.
    This should be added in addition to an already-styled element. |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| `ui-state-disabled` | 将已禁用的 UI 元素的不透明度变暗。这应该添加到已经有样式的元素中。 |'
- en: '| `ui-menu-item` | The container for individual menu items. |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| `ui-menu-item` | 单个菜单项的容器。 |'
- en: '| `ui-menu-divider` | Applies a divider between the menu items, if added to
    a `<li>` element. |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| `ui-menu-divider` | 如果添加到`<li>`元素，则在菜单项之间应用分隔符。 |'
- en: 'Finally, the `<a>` elements within each of the `<li>` element are given the
    following classnames:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，每个`<li>`元素中的`<a>`元素被赋予以下类名：
- en: '| Classname | Purpose |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| 类名 | 目的 |'
- en: '| --- | --- |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `ui-state-focus` | Applies a clickable focus container style to an element
    and its child text, links, and icons. |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| `ui-state-focus` | 将可点击焦点容器样式应用于元素及其子文本、链接和图标。 |'
- en: '| `ui-state-active` | Applies a clickable active container style to an element
    and its child text, links, and icons. |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| `ui-state-active` | 将可点击的活动容器样式应用于元素及其子文本、链接和图标。 |'
- en: '| `ui-icon` | Applies a base class to an icon element. Sets dimensions to a
    16 px square block, hides inner text, and sets the background image to the content
    state sprite image. The background image for this class will be influenced by
    the parent container; if for example, the `ui-icon` element within a `ui-state-default`
    container will get colored according to the icon color of `ui-state-default.`
    |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| `ui-icon` | 将基础类应用于图标元素。将尺寸设置为 16px 的方块，隐藏内部文本，并将背景图像设置为内容状态精灵图像。此类的背景图像将受父容器的影响；例如，`ui-state-default`容器内的`ui-icon`元素将根据`ui-state-default`的图标颜色进行着色。
    |'
- en: '| `ui-icon-xxx-xxx` | Applied as a second class to describe the type of the
    icon. The syntax for the icon classes generally follows the format of `.ui-icon-{icon
    type}-{icon sub description}-{direction}`. For a single triangle icon pointing
    to the right, the format would be `.ui-icon-triangle-1-e`.For more examples of
    icon names, hover over the icons in the ThemeRoller at [http://jqueryui.com/themeroller/](http://jqueryui.com/themeroller/).
    |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| `ui-icon-xxx-xxx` | 应用作第二个类来描述图标的类型。图标类的语法通常遵循`.ui-icon-{图标类型}-{图标子描述}-{方向}`的格式。对于指向右侧的单个三角形图标，格式将为`.ui-icon-triangle-1-e`。有关更多图标名称示例，请将鼠标悬停在[ThemeRoller](http://jqueryui.com/themeroller/)中的图标上。
    |'
- en: Most of these classnames are added to the underlying HTML elements automatically
    by the library, with the exception of the classes used for displaying icons or
    menu dividers; the latter should be added as part of designing your menu structure.
    For more examples of CSS classnames, it is worth taking a look at [http://api.jqueryui.com/theming/css-framework/](http://api.jqueryui.com/theming/css-framework/),
    this details all of the CSS classes available within the framework, which can
    be applied to most (if not all) widgets within the jQuery UI library.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数这些类名是自动添加到 HTML 元素中的基础库，但显示图标或菜单分隔符的类除外；后者应作为设计菜单结构的一部分添加。有关更多 CSS 类名示例，请查看[CSS
    框架](http://api.jqueryui.com/theming/css-framework/)，其中详细介绍了框架中可用的所有 CSS 类，这些类可应用于
    jQuery UI 库中的大多数（如果不是全部）小部件。
- en: Tip
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'You may like to take a look at the link, which details some good practices
    for building menus: [https://developer.apple.com/library/mac/documentation/UserExperience/Conceptual/AppleHIGuidelines/Menus/Menus.html#//apple_ref/doc/uid/TP30000356-TP6](https://developer.apple.com/library/mac/documentation/UserExperience/Conceptual/AppleHIGuidelines/Menus/Menus.html#//apple_ref/doc/uid/TP30000356-TP6)'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能想要查看该链接，该链接详细介绍了构建菜单的一些良好实践：[https://developer.apple.com/library/mac/documentation/UserExperience/Conceptual/AppleHIGuidelines/Menus/Menus.html#//apple_ref/doc/uid/TP30000356-TP6](https://developer.apple.com/library/mac/documentation/UserExperience/Conceptual/AppleHIGuidelines/Menus/Menus.html#//apple_ref/doc/uid/TP30000356-TP6)
- en: Configuring menu options
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置菜单选项
- en: Each of the different components in the library has a series of options that
    control which features of the widget are enabled by default. An object literal,
    or an object reference, can be passed in to the `menu()` widget method to configure
    these options.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 每个库中的不同组件都有一系列选项，这些选项控制了小部件的哪些特性默认启用。可以将对象字面量或对象引用传递给`menu()`小部件方法以配置这些选项。
- en: 'The available options to configure non-default behaviors are shown in the following
    table:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 可用于配置非默认行为的选项如下表所示：
- en: '| Option | Default value | Use |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| 选项 | 默认值 | 用途 |'
- en: '| --- | --- | --- |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `disabled` | `false` | Disables the menu if set to `true`. |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| `disabled` | `false` | 如果设置为`true`，则禁用菜单。 |'
- en: '| `icons` | `{submenu: "ui-icon-carat-1-e"}` | Sets the icons to use for submenus,
    matching an icon provided by the jQuery UI CSS framework. |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| `icons` | `{submenu: "ui-icon-carat-1-e"}` | 设置用于子菜单的图标，与 jQuery UI CSS 框架提供的图标匹配。
    |'
- en: '| `menus` | `"ul"` | Assigns the selector for the elements that serve as the
    menu container, including submenus. |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| `menus` | `"ul"` | 为作为菜单容器的元素（包括子菜单）分配选择器。 |'
- en: '| `position` | `{ my: "left top", at: "right top" }` | Identifies the position
    of submenus in relation to the associated parent menu item. The `of` option defaults
    to the parent menu item, but you can specify another element to position against.
    There are more details on how to use the positioning widget, in [Chapter 2](ch02.html
    "Chapter 2. The CSS Framework and Other Utilities"), *The CSS Framework and Other
    Utilities*. |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| `position` | `{ my: "left top", at: "right top" }` | 识别与关联的父菜单项相关的子菜单的位置。`of`选项默认为父菜单项，但您可以指定另一个元素来定位。有关如何使用定位小部件的更多详细信息，请参见[第2章](ch02.html
    "第2章。CSS框架和其他实用工具")，*CSS框架和其他实用工具*。 |'
- en: '| `role` | `"menu"` | Customizes the **Accessible Rich Internet Application**
    (**ARIA**) roles used for the menu and menu items. Roles cannot be changed once
    they have been initialized: any existing menus, submenus, or menu items will not
    be updated once they have been created. |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| `role` | `"menu"` | 自定义菜单和菜单项所使用的**可访问丰富互联网应用**（**ARIA**）角色。角色一旦初始化后就无法更改：任何现有的菜单、子菜单或菜单项在创建后将不会更新。
    |'
- en: Styling menus
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 菜单样式
- en: 'All of the UI-based widgets in the jQuery UI library—and the menu widget is
    no different—can be customized using either one of the prebuilt themes available
    from [http://jqueryui.com/download/](http://jqueryui.com/download/) or by customizing
    one using the ThemeRoller tool available at [http://jqueryui.com/themeroller/](http://jqueryui.com/themeroller/).
    All you need to do is to download your theme, and then alter the following line
    in the code, to reflect the name of the new theme in use:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery UI库中所有基于UI的小部件——菜单小部件也不例外——都可以使用[http://jqueryui.com/download/](http://jqueryui.com/download/)上可用的预建主题之一或使用[http://jqueryui.com/themeroller/](http://jqueryui.com/themeroller/)上的ThemeRoller工具进行自定义。您只需要下载您的主题，然后修改代码中的以下行，以反映正在使用的新主题的名称即可：
- en: '[PRE1]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You can even change to using a theme hosted on a CDN connection, if preferred.
    The key to this is to choose whichever best suits your development workflow and
    environment.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果愿意，甚至可以切换到使用CDN连接托管的主题。关键是选择最适合您的开发工作流程和环境的那个。
- en: Displaying the state of the selected menu options using icons
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用图标显示所选菜单选项的状态
- en: In our next example, we'll see how we can enhance the appearance of selected
    menu items by adding icons.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的下一个示例中，我们将看到如何通过添加图标来增强所选菜单项的外观。
- en: 'In your text editor, remove the existing markup between the `<body>` tags,
    and replace it with this:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的文本编辑器中，删除`<body>`标签之间的现有标记，并用以下内容替换它：
- en: '[PRE2]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We need to tweak the styling slightly, so in a separate file, add the following,
    and save it as `menuIcons.css`—don''t forget to add a link to it from your page:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要稍微调整一下样式，所以在一个单独的文件中添加以下内容，并将其保存为`menuIcons.css`—不要忘记从你的页面中添加一个链接：
- en: '[PRE3]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Add the following reference to this new stylesheet in the `<head>` tag of `menu1.html`
    and re-save the file as `menu2.html`. We can remove the existing styling too,
    as this is no longer required. When the page is loaded in a browser, we can now
    see the icons that have been applied to selected menu items, as shown in the following
    screenshot:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在`menu1.html`的`<head>`标记中添加对这个新样式表的引用，并重新保存文件为`menu2.html`。我们也可以移除现有的样式，因为这不再需要。当页面在浏览器中加载时，我们现在可以看到已应用到所选菜单项的图标，就像下面的截图中显示的那样：
- en: '![Displaying the state of the selected menu options using icons](img/2209OS_09_03.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![使用图标显示所选菜单选项的状态](img/2209OS_09_03.jpg)'
- en: 'We can take this a step further, let''s say we didn''t like the icon used to
    indicate the presence of submenus, and wanted to change it. This is easy enough
    to do. Alter the `<script>` block from our last example, as shown:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们甚至可以更进一步，假设我们不喜欢用来指示子菜单存在的图标，并希望更改它。这很容易做到。如下所示，修改上一个示例中的`<script>`块：
- en: '[PRE4]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Save this as `menu3.html`. If you load this into a browser now, you will find
    the icon has changed to an arrow inside a circle. While this works perfectly,
    it could benefit from a slight adjustment to its position. Add the following to
    the `menuIcons.css` stylesheet, and save it as `menuIconsOverrides.css`:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 将此保存为`menu3.html`。如果你现在加载到浏览器中，你会发现图标已经变成了一个圆圈里面的箭头。虽然这已经完美运行了，但稍微调整一下位置会更好。将以下内容添加到`menuIcons.css`样式表中，并保存为`menuIconsOverrides.css`：
- en: '[PRE5]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Don''t forget to update the CSS link in your code too:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记在您的代码中更新CSS链接：
- en: '[PRE6]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Let''s preview this in a browser. You should find the icon is now better placed,
    as shown in this screenshot:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在浏览器中预览一下。你会发现图标现在位置更好了，就像这张截图中显示的那样：
- en: '![Displaying the state of the selected menu options using icons](img/2209OS_09_04.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![使用图标显示所选菜单选项的状态](img/2209OS_09_04.jpg)'
- en: Adding dividers to menus
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向菜单添加分隔符
- en: So far we've seen how to set up a basic menu and add icons, one feature that
    you may often see, but which is so far lacking, is the use of dividers. Menu dividers
    help group related items together, or can act to separate fixed menu items from
    those that may change, such as a recent items list.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到如何设置基本菜单并添加图标，您可能经常看到但目前还不具备的一个功能是使用分隔符。菜单分隔符有助于将相关项目分组在一起，或者可以用来将固定菜单项与可能更改的菜单项分开，比如最近的项目列表。
- en: 'There are two ways you can achieve this:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 你有两种方法可以实现这个目标：
- en: Addition of `class="ui-menu-divider"` to a `<li>` item.
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`class="ui-menu-divider"`添加到`<li>`项。
- en: Insertion of `<li>-</li>` between menu items. These should not be wrapped in
    any other tags, such as the `<a>` link tags.
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在菜单项之间插入`<li>-</li>`。这些不应该被包含在任何其他标签中，比如`<a>`链接标签。
- en: Either option will work perfectly and produce the same results, but they work
    on different principles and have different merits. The CSS option is perhaps the
    most descriptive, but requires more markup with the body of your code.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 任何一个选项都可以完美地工作并产生相同的结果，但它们基于不同的原理并具有不同的优点。CSS选项可能是最具描述性的，但需要更多的标记与您的代码主体。
- en: 'In a copy of `menu2.html`, alter the markup as shown:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在`menu2.html`的副本中，按以下方式更改标记：
- en: '[PRE7]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Save this as `menu4.html`. When loading this into your browser, you will see
    a menu separator appear, immediately after the **File** menu option:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 将此保存为`menu4.html`。当加载到您的浏览器中时，您会看到一个菜单分隔符出现，紧跟在**File**菜单选项后面：
- en: '![Adding dividers to menus](img/2209OS_09_05.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![向菜单添加分隔符](img/2209OS_09_05.jpg)'
- en: 'You can also achieve this using the `<li>-</li>` route; this requires less
    markup and is more akin to the method used by those used to programming in code,
    such as C#. Alter the code immediately after the `Address Book` option, as follows:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以通过使用`<li>-</li>`路线来实现这一点；这需要更少的标记，并且更类似于那些习惯于在代码中编程的人使用的方法，比如C#。在`Address
    Book`选项后立即更改代码如下：
- en: '[PRE8]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The styling will be applied by jQuery UI automatically to turn this into a separator.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 样式将由jQuery UI自动应用以将其转换为分隔符。
- en: Using menu methods
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用菜单方法
- en: 'The menu widget contains a host of different methods, in addition to the core
    methods such as `destroy`, `disable`, `enable`, `option`, and `widget`, which
    means that it has a rich set of different behaviors. It also supports the implementation
    of advanced functionality that allows us to work with it programmatically. Let''s
    take a look at the methods, which are listed in the following table:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 菜单小部件包含许多不同的方法，除了核心方法如`destroy`、`disable`、`enable`、`option`和`widget`之外，这意味着它具有丰富的不同行为。它还支持实现高级功能，使我们能够以编程方式与之一起工作。让我们看看下表中列出的方法：
- en: '| Option | Use |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| 选项 | 使用 |'
- en: '| --- | --- |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `blur` | Removes focus from a menu, resets any active element styles, and
    triggers the menu''s `blur` event. |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| `blur` | 从菜单中移除焦点，重置任何活动元素样式，并触发菜单的`blur`事件。 |'
- en: '| `collapse` | Closes the currently active submenu. |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| `collapse` | 关闭当前活动的子菜单。 |'
- en: '| `collapseAll` | Closes all open submenus. |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| `collapseAll` | 关闭所有打开的子菜单。 |'
- en: '| `expand` | Opens the submenu below the currently active item, if one exists.
    |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| `expand` | 打开当前活动项目下方的子菜单（如果存在）。 |'
- en: '| `focus` | Activates a particular menu item, begins opening any submenu, if
    present, and triggers the menu''s `focus` event. |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| `focus` | 激活特定菜单项，开始打开任何子菜单（如果存在），并触发菜单的`focus`事件。 |'
- en: '| `isFirstItem` | Returns a Boolean value stating whether or not the currently
    active item is the first item in the menu. |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| `isFirstItem` | 返回一个布尔值，指示当前活动项目是否是菜单中的第一个项目。 |'
- en: '| `isLastItem` | Returns a Boolean value stating whether or not the currently
    active item is the last item in the menu. |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| `isLastItem` | 返回一个布尔值，指示当前活动项目是否是菜单中的最后一个项目。 |'
- en: '| `next` | Moves active state to the next menu item. |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| `next` | 将活动状态移至下一个菜单项。 |'
- en: '| `nextPage` | Moves active state to the first menu item below the bottom of
    a scrollable menu or the last item if not scrollable. |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| `nextPage` | 将活动状态移至滚动菜单底部下方的第一个菜单项，如果菜单不可滚动，则移至最后一个项目。 |'
- en: '| `option` | Gets or sets any property after the widget has been initialized.
    |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| `option` | 在小部件初始化后获取或设置任何属性。 |'
- en: '| `previous` | Moves the active state to the previous menu item. |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| `previous` | 将活动状态移至前一个菜单项。 |'
- en: '| `previousPage` | Moves the active state to the first menu item above the
    top of a scrollable menu or the first item if not scrollable. |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| `previousPage` | 将活动状态移至可滚动菜单顶部的第一个菜单项上方或如果不可滚动，则移至第一个菜单项。 |'
- en: '| `refresh` | Initializes submenus and menu items that have not already been
    initialized, once new items or content have been added. |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| `refresh` | 初始化尚未初始化的子菜单和菜单项，一旦添加了新项或内容。 |'
- en: '| `select` | Selects the currently active menu item, collapses all submenus,
    and triggers the menu''s `select` event. |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| `select` | 选择当前活动的菜单项，折叠所有子菜单，并触发菜单的`select`事件。 |'
- en: Let's take a look at some of these options over the next few sections, beginning
    with enabling and disabling menu options.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在接下来的几节中看一下其中一些选项，从启用和禁用菜单选项开始。
- en: Enabling and disabling menu options programmatically
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以编程方式启用和禁用菜单选项
- en: A common requirement when working with menus is to either enable or disable
    an option based on whether it matches a particular set of conditions, for example,
    you might disable the printing option if printing is not available.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 使用菜单时的常见需求是根据它是否符合特定条件来启用或禁用选项，例如，如果不可用打印功能，则可能禁用打印选项。
- en: One would hope that there would be an option available to do this within the
    menu widget. Alas! there isn't. The only method available is to either disable
    or enable the whole menu, not a specific menu item. It's not a problem though,
    as we can achieve the same effect using the `ui-state-disabled` class and a little
    jQuery magic.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 人们希望在菜单小部件内有一个可用的选项来执行此操作。可惜！没有。唯一可用的方法是禁用或启用整个菜单，而不是特定的菜单项。不过没关系，我们可以使用`ui-state-disabled`类和一点点jQuery魔法来达到相同的效果。
- en: 'Add the following new `<button>` elements directly after the existing markup
    for the menu widget in `menu2.html`:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 直接在`menu2.html`的菜单小部件的现有标记后添加以下新的`<button>`元素：
- en: '[PRE9]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Next, change the `<script>` element so that it appears as follows:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将`<script>`元素更改为以下内容：
- en: '[PRE10]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Save the changed file as `menu5.html`. In jQuery, we've used a pseudo-selector
    to find the fourth element (not the third—the count starts from 0, not 1), and
    then add or remove the `ui-state-disabled` class using `removeClass` or `addClass`
    whichever is appropriate.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 将更改后的文件保存为`menu5.html`。在jQuery中，我们使用了伪选择器来查找第四个元素（而不是第三个——计数从0开始，而不是1），然后使用`removeClass`或`addClass`根据需要添加或删除`ui-state-disabled`类。
- en: You will notice that we remove all of the classes when disabling the menu item,
    this is purely so that when we add the CSS styles to mark the item as disabled,
    it adds the CSS styles in the correct order. You could easily just use the `.removeClass()`
    option in both cases, but then the CSS markup order will not match that of the
    already disabled **Print…** option!
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到在禁用菜单项时，我们删除了所有类，这纯粹是为了当我们添加CSS样式来标记项目为禁用时，它以正确的顺序添加CSS样式。你可以在两种情况下都使用`.removeClass()`选项，但是CSS标记顺序将不匹配已禁用的**打印...**选项！
- en: '![Enabling and disabling menu options programmatically](img/2209OS_09_06.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![以编程方式启用和禁用菜单选项](img/2209OS_09_06.jpg)'
- en: Adding and removing menu items
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加和删除菜单项
- en: 'Along with enabling or disabling menu items programmatically, we can also add
    or remove menu items on the fly. In `menu2.html`, add the following code immediately
    after the existing markup:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 除了以编程方式启用或禁用菜单项之外，我们还可以动态添加或删除菜单项。在`menu2.html`中，在现有标记后立即添加以下代码：
- en: '[PRE11]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Then change the final `<script>` element to this:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 然后将最后的`<script>`元素更改为以下内容：
- en: '[PRE12]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Save the changes as `menu6.html`. On this page, we've added a new `<input>`
    element, which we will use to add a new menu item.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 将更改保存为`menu6.html`。在此页面上，我们添加了一个新的`<input>`元素，我们将使用它来添加一个新的菜单项。
- en: 'In the `<script>` element, our function handles the addition of a menu item
    by first building the required markup. We then append this to the `myMenu` menu,
    before calling menu''s `refresh()` method to update the display. After adding
    a few menu items, the page should appear something like this:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在`<script>`元素中，我们的函数通过首先构建所需的标记来处理添加菜单项。然后我们将其附加到`myMenu`菜单中，然后调用菜单的`refresh()`方法来更新显示。添加几个菜单项后，页面应该看起来像这样：
- en: '![Adding and removing menu items](img/2209OS_09_07.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![添加和删除菜单项](img/2209OS_09_07.jpg)'
- en: 'Not to be outdone, we can use the same `refresh()` method to remove a menu
    item, although the process we need to use to find the item to remove will change.
    Let''s take a look at how to achieve this, alter the `<form>` tag contents, as
    shown:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 为了不逊色，我们可以使用相同的 `refresh()` 方法来移除一个菜单项，尽管我们需要使用的过程来查找要移除的项目会发生变化。让我们来看看如何做到这一点，修改
    `<form>` 标记的内容，如下所示：
- en: '[PRE13]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Next, change the `<script>` element in `menu6.html` as shown:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，按照以下方式更改 `menu6.html` 中的 `<script>` 元素：
- en: '[PRE14]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Save the changes as `menu7.html`. If we load the page in the browser, and hit
    the **Remove menu item** button, you will find the **Move to folder…** menu option
    has been removed:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 将更改保存为 `menu7.html`。如果我们在浏览器中加载页面，并点击 **Remove menu item** 按钮，您将发现 **Move to
    folder…** 菜单选项已被移除：
- en: '![Adding and removing menu items](img/2209OS_09_08.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![添加和移除菜单项](img/2209OS_09_08.jpg)'
- en: Working with menu events
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理菜单事件
- en: 'The menu widget defines a series of useful options that allow you to add callback
    functions to perform different actions when certain events exposed by the widget
    are detected. The following table lists the configuration options that are able
    to accept executable functions on an event:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 菜单小部件定义了一系列有用的选项，允许您在检测到小部件公开的某些事件时添加回调函数以执行不同的操作。以下表格列出了能够在事件上接受可执行函数的配置选项：
- en: '| Event | Triggered when… |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| 事件 | 触发时... |'
- en: '| --- | --- |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `blur` | The menu loses focus |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| `blur` | 菜单失去焦点 |'
- en: '| `create` | The menu is created |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| `create` | 菜单已创建 |'
- en: '| `focus` | The menu gains focus or when any menu item is activated |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| `focus` | 当菜单获得焦点或任何菜单项被激活时 |'
- en: '| `select` | A menu item is selected |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| `select` | 选择了一个菜单项 |'
- en: Each component of the library has callback options (such as those in the previous
    table), which are tuned to look for key moments in any visitor interactions. Any
    functions we use within these callbacks are usually executed before the change
    happens. Therefore, you can return `false` from your callback and prevent the
    action from occurring.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 库的每个组件都有回调选项（例如前面表格中的选项），这些选项被调整为在任何访问者交互的关键时刻进行查找。我们在这些回调中使用的任何函数通常会在更改发生之前执行。因此，您可以从回调中返回
    `false` 并阻止操作发生。
- en: 'In our next example, we will look at how easy it is to react to a particular
    menu item being selected, using the standard non-bind technique. Remove the final
    `<script>` element in `menu1.html` and replace it with this:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是我们的下一个示例，我们将看看使用标准的非绑定技术来对特定菜单项的选择做出反应是多么容易。在 `menu1.html` 中删除最后的 `<script>`
    元素，并将其替换为以下内容：
- en: '[PRE15]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Below the final `</ul>` tag, add the following:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在最终的 `</ul>` 标记之后，添加以下内容：
- en: '[PRE16]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Save this file as `menu8.html`. We also need a little CSS to complete this
    example; in a new page in your text editor, add the following code:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 将此文件保存为 `menu8.html`。我们还需要一些 CSS 来完成此示例；在您的文本编辑器中的新页面中，添加以下代码：
- en: '[PRE17]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Save this file as `menuEvents.css` in the `css` folder. In the `<head>` element
    of the page we just created, add the following `<link>` element:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 将此文件保存为 `menuEvents.css`，并放入 `css` 文件夹中。在我们刚刚创建的页面的 `<head>` 元素中，添加以下 `<link>`
    元素：
- en: '[PRE18]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'If we preview our results, we will see something like the following screenshot
    when navigating around the menu. Notice the selected menu item being displayed
    below the menu:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们预览结果，当在菜单中导航时，我们将看到以下屏幕截图中显示的内容。注意菜单下方显示的选定菜单项：
- en: '![Working with menu events](img/2209OS_09_09.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![处理菜单事件](img/2209OS_09_09.jpg)'
- en: We made use of three callbacks in our example— `select`, `focus`, and `blur`;
    the principle is largely the same for any other callback fired by other widgets
    in the library.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们使用了三个回调函数— `select`、`focus` 和 `blur`；对于库中其他小部件触发的任何其他回调，原则上基本相同。
- en: Two arguments will be passed automatically by the widget to the callback function
    we define when it is executed. These are the original event object and the custom
    object containing useful properties from the menu it which was selected.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 当小部件执行回调函数时，将自动传递两个参数。这些是原始事件对象和包含有用属性的自定义对象，该对象来自于所选菜单。
- en: In our example, we've used the `select` callback to determine the title of the
    selected menu item, before assigning a `.selected` class to it to indicate when
    it has been selected; the `blur` and `focus` callbacks are used to provide a hover
    functionality while navigating around our menu.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们使用 `select` 回调来确定所选菜单项的标题，然后为其分配 `.selected` 类以指示已选中；`blur` 和 `focus`
    回调用于在我们的菜单中导航时提供悬停功能。
- en: Binding to events
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绑定到事件
- en: Using the event callbacks exposed by each component is the standard way of handling
    interactions. However, in addition to the callbacks listed in the previous table,
    we can also hook into another set of events fired by each component at different
    times.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 使用每个组件提供的事件回调是处理交互的标准方式。然而，除了前面表格中列出的回调之外，我们还可以在不同时间钩入到每个组件触发的另一组事件中。
- en: We can use the standard jQuery `on()` method to bind an event handler to a custom
    event, fired by the menu widget in the same way that we could bind to a standard
    DOM event, such as a click.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用标准的jQuery `on()`方法将事件处理程序绑定到由菜单小部件触发的自定义事件，就像我们可以绑定到标准的DOM事件一样，比如点击事件。
- en: 'The following table lists the menu''s custom binding events and their triggers:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格列出了菜单的自定义绑定事件及其触发条件：
- en: '| Event | Fired when… |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| 事件 | 触发条件 |'
- en: '| --- | --- |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `Menucreate` | The menu is created |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| `Menucreate` | 菜单被创建 |'
- en: '| `Menuselect` | A menu item is selected |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| `Menuselect` | 选择了菜单项 |'
- en: '| `Menufocus` | A menu gains focus or when any menu item is activated |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| `Menufocus` | 菜单获得焦点或任何菜单项被激活时 |'
- en: '| `Menublur` | The menu loses focus |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| `Menublur` | 菜单失去焦点 |'
- en: The first event `menucreate` is fired, as soon as the menu object is initialized;
    the next three will be fired depending on whether a menu item has been selected
    by the user.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个事件`menucreate`被触发，一旦菜单对象被初始化；接下来的三个事件将根据用户是否选择了菜单项而被触发。
- en: 'Let''s see this type of event usage in action; change the final `<script>`
    element in `menu8.html` to the following:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这种事件使用在实际中的情况；将`menu8.html`中最后一个`<script>`元素更改为以下内容：
- en: '[PRE19]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Save this change as `menu9.html`. Binding to the `menuselect` event in this
    way produces the same result as the previous example, using the `select` callback
    function. Like last time, the confirmation text should appear when selecting a
    menu item.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 将这个更改保存为`menu9.html`。以这种方式绑定到`menuselect`事件会产生与上一个示例相同的结果，使用`select`回调函数。与上次一样，选择菜单项时应该出现确认文本。
- en: All the events exposed by all of the widgets can be used with the `on()` method,
    by simply prefixing the name of the widget to the name of the event.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 所有小部件暴露的事件都可以使用`on()`方法，只需将小部件的名称前缀添加到事件的名称即可。
- en: Creating horizontal menus
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建水平菜单
- en: Have you noticed one thing? Throughout this chapter all of the menu examples
    are vertical. This is not through pure chance, but simply because the menu widget,
    at the time of writing, doesn't yet have an option to create a horizontal menu.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 你注意到了吗？在本章中，所有的菜单示例都是垂直的。这不是偶然，而是因为在写作时，菜单小部件还没有创建水平菜单的选项。
- en: It's not a problem though, as it is easy enough to create one using the power
    of the position widget and a little extra styling. In this example, we'll take
    a look at how to achieve this effect, while updating it for jQuery Version 2.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，这并不是问题，因为使用位置小部件的功能和一些额外的样式很容易创建水平菜单。在这个例子中，我们将看看如何实现这个效果，并将其更新为jQuery版本2。
- en: Note
  id: totrans-188
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Lots of people have attempted doing it, with varying degrees of success—my personal
    favorite is the version produced by *Aurélien Hayet*, and which we will use in
    this example. If you want to see the original article by *Aurélien Hayet* (in
    French language), then it is available at [http://aurelienhayet.com/2012/11/03/
    comment-realiser-un-menu-horizontal-a-laide-de-jquery-ui/](http://aurelienhayet.com/2012/11/03/
    comment-realiser-un-menu-horizontal-a-laide-de-jquery-ui/).
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 许多人尝试过这样做，成功的程度不同——我个人最喜欢的是*Aurélien Hayet*制作的版本，我们将在本例中使用。如果你想看到*Aurélien Hayet*的原始文章（法语），可以在[http://aurelienhayet.com/2012/11/03/
    comment-realiser-un-menu-horizontal-a-laide-de-jquery-ui/](http://aurelienhayet.com/2012/11/03/
    comment-realiser-un-menu-horizontal-a-laide-de-jquery-ui/)中找到。
- en: 'Remove the existing menu markup in `menu2.html`, and replace it with the following,
    saving it as `menu10.html`:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 删除`menu2.html`中现有的菜单标记，并用以下内容替换，将其保存为`menu10.html`：
- en: '[PRE20]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Alter the final `<script>` element as follows:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 将最后一个`<script>`元素修改如下：
- en: '[PRE21]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We need to tweak the styling a little to turn it into a horizontal menu, so
    add the following to a new document, and save it as `menuHorizontal.css` in the
    `css` folder. Don''t forget to add a link to it from the main document:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要稍微调整样式才能将其转换为水平菜单，因此将以下内容添加到一个新文档中，并将其保存为`css`文件夹中的`menuHorizontal.css`。不要忘记从主文档中添加链接：
- en: '[PRE22]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'When loading it into a browser, the page should appear something like this:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在加载到浏览器中时，页面应该看起来像这样：
- en: '![Creating horizontal menus](img/2209OS_09_10.jpg)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![创建水平菜单](img/2209OS_09_10.jpg)'
- en: It should be noted that a MenuBar widget is in the works at the time of writing;
    you can see a version at [http://view.jqueryui.com/menubar/demos/menubar/default.html](http://view.jqueryui.com/menubar/demos/menubar/default.html).
    There are still some bugs to iron out and features to complete on this development
    version, but it is nonetheless still a usable widget that you can download and
    try at your own risk.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在写作时应该注意，MenuBar小部件正在制作中；您可以在[http://view.jqueryui.com/menubar/demos/menubar/default.html](http://view.jqueryui.com/menubar/demos/menubar/default.html)看到一个版本。在这个开发版本上仍然有一些需要解决的错误和要完成的功能，但它仍然是一个可用的小部件，您可以自行下载并尝试使用，但需自担风险。
- en: Combining with other widgets
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与其他小部件结合
- en: Let's switch tracks now and take a look at some more in-depth examples of how
    you can use the menu widget, beginning with using it with a button.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们换个方式，看一下您如何使用菜单小部件的更多深入示例，首先是将其与按钮一起使用。
- en: An odd combination I hear you say, but not in reality; we can use both to build
    a nice little split button with a drop-down menu!
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会说这是一个奇怪的组合，但实际上并非如此；我们可以使用这两者来构建一个带有下拉菜单的不错的分割按钮！
- en: Note
  id: totrans-202
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Fortunately for us, a plugin has already been created by *Mike Cantrell*; we'll
    use this in our example. You can download a copy of this plugin from Github ([https://gist.github.com/mcantrell/1255491](https://gist.github.com/mcantrell/1255491));
    I've updated the version in the code download for use with jQuery 2.0 and UI 1.10.3.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，*Mike Cantrell*已经创建了一个插件；我们将在我们的示例中使用这个插件。您可以从Github（[https://gist.github.com/mcantrell/1255491](https://gist.github.com/mcantrell/1255491)）下载该插件的副本；我已经更新了代码下载中用于jQuery
    2.0和UI 1.10.3的版本。
- en: 'Immediately after the link to `jquery.ui.menu.js` in `menu2.html`, add the
    following:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在`menu2.html`中的链接到`jquery.ui.menu.js`之后，添加以下内容：
- en: '[PRE23]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Alter the final `<script>` element as follows:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 将最后一个`<script>`元素修改如下：
- en: '[PRE24]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Replace the existing markup between the `<body>` tags with the following:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 用以下内容替换`<body>`标签之间的现有标记：
- en: '[PRE25]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Save the document as `menu11.html`. We need to add in our jQuery some magic
    that will combine our menu and document together, so in a new document add the
    following, and save it as `jquery.ui.splitbutton.js` within the `js` folder:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 将文档保存为`menu11.html`。我们需要添加一些魔法，将我们的菜单和文档组合在一起，所以在一个新文档中添加以下内容，并将其保存为`jquery.ui.splitbutton.js`，放在`js`文件夹中：
- en: '[PRE26]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'To complete the effect, we need to adjust the CSS styling a little, so add
    the following into a new document and save it as `menuSplit.css` within the `css`
    folder:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成效果，我们需要稍微调整CSS样式，所以将以下内容添加到一个新文档中，并将其保存为`menuSplit.css`，放在`css`文件夹中：
- en: '[PRE27]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Don''t forget to add a link into your code, pointing to `menuSplit.css`. If
    we load the page into a browser, you should see something similar to the following
    screenshot:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记在您的代码中添加一个指向`menuSplit.css`的链接。如果我们将页面加载到浏览器中，您应该会看到类似于以下截图的内容：
- en: '![Combining with other widgets](img/2209OS_09_11.jpg)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![与其他小部件结合](img/2209OS_09_11.jpg)'
- en: While the **Edit** text won't change in this example, you could easily adapt
    it to your own needs, adding valid links to each of the options in the drop-down
    menu list.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这个例子中的**Edit**文本不会改变，但您可以轻松地根据自己的需求进行调整，为下拉菜单列表中的每个选项添加有效链接。
- en: Designing context menus
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计上下文菜单
- en: One menu format that isn't, at present, available with jQuery UI is that of
    a context menu; more and more applications rely on the use of context menus for
    quick access to options, such as formatting content.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，jQuery UI尚不支持的一个菜单格式是上下文菜单；越来越多的应用程序依赖于上下文菜单，以快速访问选项，例如格式化内容。
- en: It is however a relatively easy configuration to replicate in jQuery. In our
    next example, we've reused some of the standard HTML markup from the main UI website
    and turned it into a context menu. It goes to show that, with a little jQuery
    magic, the markup doesn't actually need to change—a bargain!
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在jQuery中复制这种相对简单的配置是相对容易的。在我们的下一个示例中，我们重用了主UI网站的一些标准HTML标记，并将其转换为上下文菜单。这表明，借助一点jQuery魔法，标记实际上并不需要改变
    —— 一笔交易！
- en: Note
  id: totrans-220
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For this exercise and the next, you will need a copy of the code download that
    accompanies this book. We will be using some of the files in the code download.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个练习和下一个练习，您将需要本书附带的代码下载副本。我们将使用代码下载中的一些文件。
- en: 'Once we have created our page, we can view the results in a browser by right-clicking
    on the image. It should resemble the following screenshot:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 创建好页面后，我们可以通过右键单击图像在浏览器中查看结果。它应该类似于以下截图：
- en: '![Designing context menus](img/2209OS_09_12.jpg)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![设计上下文菜单](img/2209OS_09_12.jpg)'
- en: Note
  id: totrans-224
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The image can be found at [http://upload.wikimedia.org/wikipedia/commons/2/25/Coffee_Roasting.jpg](http://upload.wikimedia.org/wikipedia/commons/2/25/Coffee_Roasting.jpg).
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 图片可以在[http://upload.wikimedia.org/wikipedia/commons/2/25/Coffee_Roasting.jpg](http://upload.wikimedia.org/wikipedia/commons/2/25/Coffee_Roasting.jpg)找到。
- en: 'Let''s begin by extracting a copy of `menu2.html` from the code download and
    saving it to the `jqueryui` folder. Next, change the final `<script>` element
    so that it appears as follows:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从代码下载中提取`menu2.html`的副本，并将其保存到`jqueryui`文件夹中。接下来，将最后的`<script>`元素更改为如下所示：
- en: '[PRE28]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Save the changed file as `menu12.html` in the `jqueryui` folder. We need to
    tweak the styling a little, so add the following to a new document, and save it
    in the `css` folder as `menuContext.css`:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 将更改后的文件保存为`jqueryui`文件夹中的`menu12.html`。我们需要稍微调整样式，因此将以下内容添加到新文档中，并将其保存在`css`文件夹中为`menuContext.css`：
- en: '[PRE29]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Save this file as `menuContext.css` in the `css` folder, and link to it after
    the jQuery UI stylesheet in the `<head>` section of `menu12.html`:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 将此文件保存为`css`文件夹中的`menuContext.css`，并在`menu12.html`的`<head>`部分的 jQuery UI 样式表之后链接到它：
- en: '[PRE30]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: With use of menu's position attribute and a little extra jQuery magic, I am
    sure you will agree that this produces a very nice result!
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用菜单的位置属性和一点额外的 jQuery 魔法，我相信您会同意这产生了一个非常好的结果！
- en: Enhancing a select menu
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 增强选择菜单
- en: In our final menu example, let's look at how you can use the power of a menu
    widget to enhance a `<select>` menu. The original author of this book, *Dan Wellman*,
    produced an excellent example of how to achieve this using some additional jQuery
    and techniques we've already covered earlier in this book. I've updated it to
    work with jQuery 2.03 and UI 1.10.3.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们最终的菜单示例中，让我们看看如何使用菜单小部件的功能来增强`<select>`菜单。本书的原始作者*丹·韦尔曼*提供了一个很好的示例，演示了如何使用一些额外的
    jQuery 和我们在本书中早些时候已经介绍过的技术来实现这一点。我已经更新了它，使其适用于 jQuery 2.03 和 UI 1.10.3。
- en: 'Replace the existing markup in `menu2.html` with the following:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 用以下内容替换`menu2.html`中的现有标记：
- en: '[PRE31]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: From the code download that accompanies this book, extract a copy of the `menuSelect.js`
    file, then save it in the the `js` folder, and link it to immediately below the
    last jQuery UI library reference to `jquery.ui.menu.js`.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 从本书附带的代码下载中提取`menuSelect.js`文件的副本，然后将其保存在`js`文件夹中，并在最后的 jQuery UI 库引用`jquery.ui.menu.js`之下立即链接到它。
- en: 'In `menu2.html`, change the second `<link>` to point to a new stylesheet as
    follows:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 在`menu2.html`中，将第二个`<link>`更改为指向一个新的样式表，如下所示：
- en: '[PRE32]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'In `menuSelect.css`, add the following:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在`menuSelect.css`中添加以下内容：
- en: '[PRE33]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Save the page as `menu13.html`. If we load the page into a browser and preview
    it, you will see something akin to this screenshot:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 将页面保存为`menu13.html`。如果我们将页面加载到浏览器中并进行预览，您将看到类似于此屏幕截图的内容：
- en: '![Enhancing a select menu](img/2209OS_09_13.jpg)'
  id: totrans-243
  prefs: []
  type: TYPE_IMG
  zh: '![增强选择菜单](img/2209OS_09_13.jpg)'
- en: We've used a fair bit of jQuery in this example; this would lend itself to being
    turned into a plugin that could be included on a page and used to enhance the
    existing `<select>` menus. If written correctly, it would work using a progressive
    enhancement technique, while still maintaining the original base code, in the
    event of jQuery not being available.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用了相当多的 jQuery；这将使它适合成为一个插件，可以包含在页面中，并用于增强现有的`<select>`菜单。如果编写正确，它将使用渐进增强技术工作，同时保持原始基础代码在没有
    jQuery 可用的情况下的可用性。
- en: Summary
  id: totrans-245
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: The menu widget is an excellent way of saving space on your page by organizing
    related (or even completely unrelated) sections of content that can be shown or
    hidden with simple click input from your visitors.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 菜单小部件是一种极好的节省页面空间的方法，通过组织相关（甚至完全不相关）的内容部分，您的访问者可以通过简单的点击输入来显示或隐藏这些内容。
- en: Let's review what was covered in this chapter. We first looked at how, with
    just a little underlying HTML and a single line of jQuery-flavored JavaScript,
    we can implement the default menu widget. We then took a look at the CSS classes
    and menu options that are available for you to use to customize the menu to your
    needs, and how you can use some of these attributes to great effect when styling
    the menu. We also covered the range of methods and events that we can use to perform
    actions or react to events triggered by the menu widget.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下本章涵盖的内容。我们首先看了一下如何仅使用一点点基础 HTML 和一行 jQuery 风格的 JavaScript 就可以实现默认菜单小部件。然后，我们看了一下可供您使用的
    CSS 类和菜单选项，以自定义菜单以满足您的需求，并且在样式化菜单时如何使用其中一些属性来产生良好的效果。我们还介绍了我们可以使用的方法和事件范围，以执行操作或对菜单小部件触发的事件做出反应。
- en: We finished with a look at some examples of how you can completely alter the
    look of the menu, while still maintaining the original markup. We used three examples
    of customizing a `<select>` menu, enhancing a button, as well as turning a menu
    into a context menu.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 我们以查看一些示例结束，展示了如何完全改变菜单的外观，同时仍保留原始标记。我们使用了三个示例来自定义一个`<select>`菜单，增强一个按钮，以及将菜单转换为上下文菜单。
- en: In the next chapter, we'll move on to look at the Tooltips widget, which we
    can use to point out points of note on elements such as fields or images, or set
    up to work as a mini-menu of options for visitors to your site.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将继续研究工具提示小部件，我们可以使用它来指出元素上的注释点，例如字段或图像，或设置为为您网站的访问者提供一些选项的迷你菜单。
