- en: 'Chapter 3: Using Models, Services, and Mocking Data'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the main features of a frontend web application is communication with
    the backend. Our application needs to collect user input and send it for processing.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will learn how to define data by creating typescript interfaces
    and column definitions for the `ProTable` component. You will learn how to simulate
    the backend logic and data using Umi **mock files**. You will know how to send
    HTTP requests using the **umi-request** library. You will also learn to share
    states and logic between components using **models**.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll cover the following main topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Defining response types and column types
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the opportunity details page
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simulating data and API responses
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sending HTTP requests with Umi request
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using models for sharing states and logic
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you'll have learned how the data flow works in Umi
    and how to organize your projects using the `services` and `models` folders. You'll
    also learn how to use the Umi features to simulate backend logic and send HTTP
    requests. You will also better understand how the `ProTable` component helps us
    to work with batches of data.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To complete this chapter's exercises, you only need a computer with any OS (I
    recommend Ubuntu 20.04 or higher) and the software installed in [*Chapter 1*](B18503_01_Final_JM_ePub.xhtml#_idTextAnchor014),
    *Environment Setup and Introduction to UmiJS* (Visual Studio Code, Node.js, and
    Yarn).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: You can find the complete project in the `Chapter03` folder in the GitHub repository
    available at [https://github.com/PacktPublishing/Enterprise-React-Development-with-UmiJs](https://github.com/PacktPublishing/Enterprise-React-Development-with-UmiJs).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: Defining response types and column types
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will create TypeScript interfaces to define the data that
    we'll receive from the backend and create column definitions for the `ProTable`
    component on each page.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start with the interfaces. Follow these steps to create the TypeScript
    interfaces:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: Let's first create the folder for definition files. Under the `src` folder,
    create a new folder called `types`.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, in the `types` folder, create a new file named `user.d.ts` and add the
    following interface code:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `User` interface defines how we'll receive user information from the backend.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file in the `types` folder named `customer.d.ts` and add the following
    interface:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `Customer` interface defines how we'll receive customer information from
    the backend.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we''ll create two interfaces for the `opportunity` model. Create a new
    file named `opportunity.d.ts` in the `types` folder and add the interfaces as
    follows:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `Opportunity` interface defines how we'll receive the opportunity information
    from the backend.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: Note that we imported the `Customer` interface and used it as the type of the
    `customer` property. An opportunity always relates to a specific customer registered
    in the CRM.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: The `Activity` interface defines how we receive opportunities activity information
    from the backend.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`Activity`接口定义了我们从后端接收机会活动信息的方式。'
- en: 'Let''s create the interfaces for the report''s data. In the `types` folder,
    create a new file called `analytics.d.ts` and add the following interfaces:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建报告数据的接口。在`types`文件夹中创建一个名为`analytics.d.ts`的新文件，并添加以下接口：
- en: '[PRE3]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: These interfaces define how we'll receive the data for the top opportunities
    chart, the leads by source chart, and the opportunities won/lost by month chart.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这些接口定义了我们将如何接收顶级机会图表、来源图表以及按月赢得/失去的机会图表的数据。
- en: Now, let's define how the `ProTable` component on each page should display the
    data received from the backend.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们定义每个页面的`ProTable`组件应该如何显示从后端接收到的数据。
- en: Creating column definitions for ProTable
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建ProTable的列定义
- en: We need to set how the `ProTable` component will display data by defining the
    columns. I recommend you create column definitions in a separate file whenever
    possible to maintain the component code and keep it clean.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要通过定义列来设置`ProTable`组件将如何显示数据。我建议您尽可能在单独的文件中创建列定义，以保持组件代码的整洁。
- en: 'Follow these steps to create the column definitions on each page:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤在每个页面上创建列定义：
- en: Let's start with the `columns.tsx` in the `Customers` folder under the `src/pages`
    folder.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从`src/pages`文件夹下的`Customers`文件夹中的`columns.tsx`文件开始。
- en: 'In the `columns.tsx` file, define the table columns as follows:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`columns.tsx`文件中，按照如下方式定义表格列：
- en: '[PRE4]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note that we used the `Customer` interface to declare the data type. Each column
    definition has a `title` and a `dataIndex`. The latter needs to match a property
    of the `Customer` interface for `ProTable` to display that property value in its
    column.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们使用了`Customer`接口来声明数据类型。每个列定义都有一个`title`和一个`dataIndex`。后者需要与`Customer`接口的一个属性匹配，以便`ProTable`可以在其列中显示该属性值。
- en: 'Let''s add a column to display options in a specific row. Add this definition
    to the `columns.tsx` file:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们添加一个列来显示特定行的选项。将此定义添加到`columns.tsx`文件中：
- en: '[PRE5]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the `options` column, besides the properties we set to not display the column
    in settings and descriptions, we set the behavior of the `render` function. This
    allows you to access the React node, the row entity, the index, and the default
    `ProTable` actions. When the user clicks on this option, the `startEditable` action
    allows them to edit the row.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在`options`列中，除了我们设置为不在设置和描述中显示的属性外，我们还设置了`render`函数的行为。这允许您访问React节点、行实体、索引和默认的`ProTable`操作。当用户点击此选项时，`startEditable`操作允许他们编辑行。
- en: 'Now, we''ll use the column definitions in the `ProTable` component. Add the
    following line to the `index.tsx` file to import the `columns.tsx` file:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将使用`ProTable`组件中的列定义。将以下行添加到`index.tsx`文件中，以导入`columns.tsx`文件：
- en: '[PRE6]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Define the `ProTable` `columns` property with the imported file, as follows:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用导入的文件定义`ProTable`的`columns`属性，如下所示：
- en: '[PRE7]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Next, add the `Customer` interface to define the data type of the `ProTable`
    columns:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将`Customer`接口添加到定义`ProTable`列的数据类型：
- en: '[PRE8]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now, let's create the column definitions for the `columns.tsx` in the `Opportunities`
    folder under the `src/pages` folder.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们创建`src/pages`文件夹下`Opportunities`文件夹中的`columns.tsx`的列定义。
- en: 'Add the definitions to the `columns.tsx` file, as follows:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照如下方式将定义添加到`columns.tsx`文件中：
- en: '[PRE9]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Note that we used the `Opportunity` interface we created previously to define
    the data type.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们使用了之前创建的`Opportunity`接口来定义数据类型。
- en: In the `status` column, we set the `valueType` property to `select`, and the
    `filters` and `onFilter` properties to `true`, so the user can choose and filter
    the table using this `column` value.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在`status`列中，我们将`valueType`属性设置为`select`，并将`filters`和`onFilter`属性设置为`true`，这样用户就可以使用此`column`值选择和过滤表格。
- en: '`status` is a numeric value representing the opportunity''s progress in the
    sales flow. But, we want the user to see the title instead of a number, so let''s
    add the `enumType` property to the `status` column, as follows:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`status`是一个表示销售流程中机会进度的数值。但是，我们希望用户看到的是标题而不是数字，所以让我们给`status`列添加`enumType`属性，如下所示：'
- en: '[PRE10]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The status will appear as tags with different colors and the respective step
    title.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 状态将以不同颜色和相应的步骤标题显示为标签。
- en: 'The opportunity relates to a customer, and we need to define columns for the
    customer properties. Let''s add these columns as follows:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 机会与客户相关联，我们需要定义客户属性列。让我们按照如下方式添加这些列：
- en: '[PRE11]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Note that the only column in the table is the customer's name. In the other
    columns, we set `hideInTable` to `true`. We'll use these columns in the opportunity
    details page that we'll create later in this chapter.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，表中只有一列是客户的姓名。在其他列中，我们将`hideInTable`设置为`true`。我们将在本章后面创建的机会详情页面中使用这些列。
- en: 'We''ll also add a column to display options to a specific row in this table.
    Add this definition to the `columns.tsx` file:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还将添加一个列来显示特定行的选项。将以下定义添加到`columns.tsx`文件中：
- en: '[PRE12]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The `options` column introduces two options – `/opportunity/:id` path.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`options`列引入了两个选项 - `/opportunity/:id`路径。'
- en: 'Now, we''ll use the column definitions in the `ProTable` component. Add the
    following line to the `index.tsx` file to import the `columns.tsx` file:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将在`ProTable`组件中使用列定义。将以下行添加到`index.tsx`文件中，以导入`columns.tsx`文件：
- en: '[PRE13]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Define the `ProTable` `columns` property with the imported file, as follows:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用导入的文件定义`ProTable`的`columns`属性，如下所示：
- en: '[PRE14]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Import the `Opportunity` interface, as follows:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`Opportunity`接口，如下所示：
- en: '[PRE15]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Next, add the `Opportunity` interface to define the data type of the `ProTable`
    columns:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，添加`Opportunity`接口以定义`ProTable`列的数据类型：
- en: '[PRE16]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Follow these previous steps to add the column definitions to `ProTable` on
    the home page. We''ll reuse the `columns.tsx` file from the **Opportunities**
    page, so you need to import the file, as follows:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照之前的步骤将列定义添加到主页上的`ProTable`。我们将重用**机会**页面上的`columns.tsx`文件，因此您需要导入该文件，如下所示：
- en: '[PRE17]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now, we need to add the texts to the multi-language files. Add the texts to
    the `en-US.ts` file in the `src/locales` folder, as follows:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要将文本添加到多语言文件中。将文本添加到`src/locales`文件夹中的`en-US.ts`文件中，如下所示：
- en: '[PRE18]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: We don't need to add these texts to the `pt-BR.ts` file because we already downloaded
    the complete file in the previous chapter.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不需要将这些文本添加到`pt-BR.ts`文件中，因为我们已经在上一章中下载了完整的文件。
- en: In this section, we created the TypeScript interfaces to define all the data
    we'll receive from the backend and the column definitions for the `ProTable` component
    on each page.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们创建了TypeScript接口来定义我们将从后端接收的所有数据以及每个页面上`ProTable`组件的列定义。
- en: Now, let's create the opportunity details page, which will show the activities
    on the opportunity.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建机会详情页面，该页面将显示机会上的活动。
- en: Creating the opportunity details page
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建机会详情页面
- en: In this section, we'll create the opportunity details page. The opportunity
    details page allows the user to track and register opportunity activities.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将创建机会详情页面。机会详情页面允许用户跟踪和注册机会活动。
- en: The user can also change the opportunity step and edit the opportunity properties
    such as `title` and `expected revenue`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 用户还可以更改机会步骤并编辑机会属性，如`title`和`expected revenue`。
- en: 'Follow these steps to create the opportunity details page:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤创建机会详情页面：
- en: 'Run the following command to generate the opportunity detail page:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令以生成机会详情页面：
- en: '[PRE19]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We''ll use a pro component called `ProDescriptions`. It''s similar to the `ProTable`
    component but intended for display properties instead of a batch of data. Run
    the following command to add the `ProDescriptions` component to the project:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用一个名为`ProDescriptions`的专业组件。它与`ProTable`组件类似，但旨在显示属性而不是数据批量。运行以下命令将`ProDescriptions`组件添加到项目中：
- en: '[PRE20]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Next, import these dependencies to the `index.tsx` file in the `OpportunityDetail`
    folder, as follows:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将这些依赖项导入到`OpportunityDetail`文件夹中的`index.tsx`文件中，如下所示：
- en: '[PRE21]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now, create the `page` component in the `index.tsx` file, as follows:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在`index.tsx`文件中创建`page`组件，如下所示：
- en: '[PRE22]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Note that we accessed the ID we got from the route parameters. We will use it
    to request a specific opportunity from the backend.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们访问了从路由参数中获得的ID。我们将使用它从后端请求特定的机会。
- en: We also used the `ProDescriptions` component to show the opportunity details
    and `ProTable` to list the opportunity activities.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还使用了`ProDescriptions`组件来显示机会详情，以及`ProTable`来列出机会活动。
- en: 'The opportunity details page will only be accessible in the `opportunities`
    table row option and not accessible in the menu, so let''s add a `header` property
    to the `PageContainer` component, as follows:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 机会详情页面仅在`opportunities`表格行选项中可访问，不在菜单中可访问，因此让我们向`PageContainer`组件添加一个`header`属性，如下所示：
- en: '[PRE23]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Now, we''ll add the `Steps` component from Ant Design to visually show the
    progress of the opportunity. Add the `Steps` component before the `ProDescriptions`
    component as the first child of the `Card` component, as follows:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将从Ant Design添加`Steps`组件来直观地显示机会的进度。将`Steps`组件添加到`ProDescriptions`组件之前，作为`Card`组件的第一个子组件，如下所示：
- en: '[PRE24]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The `current` property indicates the progress of the opportunity in the sales
    flow.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`current`属性表示机会在销售流程中的进度。'
- en: 'Now, add the route definition to the opportunity details page in the `routes.ts`
    file in the `config` folder, as follows:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将路由定义添加到`config`文件夹中的`routes.ts`文件中的机会详情页面，如下所示：
- en: '[PRE25]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Note that we don't add the `name` and `icon` properties because we don't want
    the opportunity details page listed in the side menu.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们未添加`name`和`icon`属性，因为我们不希望在侧菜单中列出机会详情页面。
- en: We are almost finishing building the opportunity details page. Now, we'll use
    the `Activity` interface we created previously to define the columns of the activities
    table.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们几乎完成了机会详情页面的构建。现在，我们将使用之前创建的`Activity`接口来定义活动表格的列。
- en: Defining the activities table columns
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义活动表格列
- en: The opportunity details page lists the activities taken on the opportunity using
    the `ProTable` component, so we also need to define the columns for this table.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 机会详情页面使用`ProTable`组件列出所采取的活动，因此我们还需要为此表格定义列。
- en: 'Follow these steps to define the columns for the `ProTable` component:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤为`ProTable`组件定义列：
- en: Create a new file named `columns.tsx` in the `OpportunityDetails` folder under
    the `src/pages` folder.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/pages`文件夹下的`OpportunityDetails`文件夹中创建一个名为`columns.tsx`的新文件。
- en: 'Next, add the column definitions to the `columns.tsx` file, as follows:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将列定义添加到`columns.tsx`文件中，如下所示：
- en: '[PRE26]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The `type` property is a numeric value representing the activity type.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`type`属性是一个表示活动类型的数值。'
- en: 'We want the user to see a title instead of a numeric value in the `type` column,
    so let''s add the `enumType` property to the `type` column, as follows:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们希望用户在`type`列中看到标题而不是数值，因此让我们向`type`列添加`enumType`属性，如下所示：
- en: '[PRE27]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Now, the `type` column will show a tag with the activity type title in different
    colors.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，`type`列将以不同颜色显示带有活动类型标题的标签。
- en: 'Now, we''ll use the column definitions in the `ProTable` component. Add the
    following line to the `index.tsx` file to import the `columns.tsx` file:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将使用`ProTable`组件中的列定义。将以下行添加到`index.tsx`文件中，以导入`columns.tsx`文件：
- en: '[PRE28]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Next, define the `ProTable` `columns` property using the imported file, as
    follows:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，使用导入的文件定义`ProTable`的`columns`属性，如下所示：
- en: '[PRE29]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'To finish the opportunity details page, let''s add the texts to the `en-US.ts`
    file in the `src/locales` folder, as follows:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了完成机会详情页面，让我们将文本添加到`src/locales`文件夹中的`en-US.ts`文件中，如下所示：
- en: '[PRE30]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: In this section, we created the opportunity details page. We added a breadcrumb
    to help the user navigate between interfaces and the `Steps` component to show
    the opportunity progress. We also defined the activities table columns by creating
    the `columns.tsx` file.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们创建了机会详情页面。我们添加了一个面包屑来帮助用户在界面之间导航，并使用`Steps`组件来显示机会进度。我们还通过创建`columns.tsx`文件来定义活动表格列。
- en: Now, we are ready to learn how to simulate backend logic and API responses by
    creating Umi mock files.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经准备好通过创建Umi模拟文件来学习如何模拟后端逻辑和API响应。
- en: Simulating data and API responses
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模拟数据和API响应
- en: In this section, you'll learn how to create mock files to simulate backend logic
    and API responses.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将学习如何创建模拟文件来模拟后端逻辑和API响应。
- en: Mock files are helpful to decouple frontend development from backend development,
    as you don't need the backend ready to make requests and populate your interface
    with data.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟文件有助于解耦前端开发和后端开发，因为您不需要后端准备好才能进行请求并使用数据填充您的界面。
- en: 'A mock file is simply a JavaScript object with endpoint route definitions and
    a response to each endpoint. Consider the following example:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟文件只是一个具有端点路由定义和对每个端点的响应的JavaScript对象。考虑以下示例：
- en: '[PRE31]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: In this example, when the project is running, we can send an `HTTP` `GET` request
    to http://localhost:8000/api/products to receive the object defined in the mock
    file.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，当项目运行时，我们可以向http://localhost:8000/api/products发送`HTTP` `GET`请求，以接收模拟文件中定义的对象。
- en: Umi will registry all files with the `.js` and `.ts` extensions inside the `mock`
    folder as mock files.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: Umi会将`mock`文件夹内所有`.js`和`.ts`扩展名的文件注册为模拟文件。
- en: 'Now that we know how mock files work, let''s create mock files for our application.
    Follow these steps:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: In the project root directory, create a new folder named `mock`.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Instead of manually generating the data we want to send, we''ll use a library
    called `faker.js` library delivers various data categories we can choose from,
    such as user profiles, company contacts, and product information. Run the following
    command to install the `faker.js` library:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Let''s also add the TypeScript declaration files for `faker.js` by running
    the following command:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Next, add the TypeScript declaration files for **express** by running the following
    command:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: We'll use the `Response` and `Request` interfaces from `express` to define the
    requests and responses in our mock endpoints.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: Now, in the `mock` folder, create a new file named `customer.ts`.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `customer.ts` file, create a list of customers, as follows:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: We used the `faker.js` library to generate random customer properties.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, create the endpoint route definitions in the `customer.ts` file, as follows:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'We defined four endpoints:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: A mock endpoint to update the customer record (`PUT /api/customer`)
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A mock endpoint to disable the customer record (`PUT /api/customer/disable`)
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A mock endpoint to list all the customers (`/api/customer/list`)
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A mock endpoint to create a new customer record (`POST /api/customer`)
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that we don't need to define the HTTP method when the endpoint uses the
    method `GET` as in the endpoint to list all customers (`/api/customer/list`).
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, create a new file in the `mock` folder named `analytics.ts` and add the
    following:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: We'll create data to populate the charts on the **Reports** page in this file.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `analytics.ts` file, create a new mock endpoint to deliver the top opportunities,
    as follows:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Next, create a mock endpoint to deliver the leads by source, as follows:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Finally, create a mock endpoint to deliver the opportunities won/lost by month,
    as follows:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Now, we''ll create a mock file for the opportunities. Create a new file in
    the `mock` folder called `opportunity.ts` and add the following:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: We created two lists, `activities` and `opportunities`, and used the `faker.js`
    library to fill these lists with random data.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, create these two methods:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: The `listOpportunities` method slices the `opportunities` array using the number
    given in the `slice` request query parameter.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: The `getOpportunity` method accesses the `opportunity` array item at the index
    position provided by the `opportunityId` request query parameter.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, create the definitions of the mock endpoints, as follows:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'We defined six endpoints:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: A mock endpoint to list all the opportunities (`/api/opportunity/list`)
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A mock endpoint to get an opportunity by ID (`/api/opportunity`)
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A mock endpoint to get opportunity activities (`/api/opportunity/activities`)
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A mock endpoint to create a new opportunity record (`POST /api/opportunity`)
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A mock endpoint to disable an opportunity record (`PUT /api/opportunity/disable`)
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A mock endpoint to update an opportunity record (`PUT /api/opportunity`)
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个用于更新机会记录的模拟端点 (`PUT /api/opportunity`)
- en: In this section, we created mock files to provide data for our interfaces using
    the `faker.js` library to generate random data.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们使用 `faker.js` 库创建模拟文件，以提供我们接口的数据。
- en: Now, we'll learn how to organize our project with the `services` folder and
    send requests to our simulated backend using the umi-request library.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将学习如何使用 `services` 文件夹来组织我们的项目，并使用 umi-request 库向我们的模拟后端发送请求。
- en: Sending HTTP requests with Umi request
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Umi request 发送 HTTP 请求
- en: In this section, we'll develop the requests to the backend using the umi-request
    library.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用 umi-request 库开发对后端的请求。
- en: We'll create all the requests in separate files inside the `services` folder
    for each context. This organization helps us clean the components' code and reuses
    the requests over the interfaces.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在 `services` 文件夹内为每个上下文创建单独的文件来存储所有请求。这种组织方式有助于我们清理组件代码并重复使用接口中的请求。
- en: 'For sending HTTP requests, we''ll use **Umi request**. This is a library based
    in the **fetch** and **axios** libraries that is simple to use and provides common
    features such as error handling and caching. Consider the following example:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 对于发送 HTTP 请求，我们将使用 **Umi request**。这是一个基于 **fetch** 和 **axios** 库的简单易用的库，它提供了常见的功能，如错误处理和缓存。以下是一个示例：
- en: '[PRE44]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: The `request` function requires two main parameters – the `URL` parameter where
    we want to send the request, and the `options` parameter in which we can define
    the HTTP method, the request headers, the request parameters, and the request
    body in the `data` property. You can also determine the response type. In this
    example, we described the response type with the `Product` interface.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '`request` 函数需要两个主要参数 - 我们想要发送请求的 `URL` 参数，以及我们可以定义 HTTP 方法、请求头、请求参数和请求体（在 `data`
    属性中）的 `options` 参数。您还可以确定响应类型。在这个例子中，我们使用 `Product` 接口描述了响应类型。'
- en: 'Follow these steps to develop the requests:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤开发请求：
- en: Create a new folder named `services` in the `src` folder.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `src` 文件夹中创建一个名为 `services` 的新文件夹。
- en: 'Inside the `services` folder, create a new file named `analytics.ts` and the
    requests, as follows:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `services` 文件夹内，创建一个名为 `analytics.ts` 的新文件，并编写请求，如下所示：
- en: '[PRE45]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: We created three functions – `getTopOpportunities` to request the top opportunities,
    `getLeadsBySource` to request the leads by source, and `getHistoryByMonth` to
    request the opportunities won/lost by month.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了三个函数 - `getTopOpportunities` 用于请求顶级机会，`getLeadsBySource` 用于按来源请求线索，以及 `getHistoryByMonth`
    用于按月份请求赢得/失去的机会。
- en: 'Now, we can use the requests response to fill our charts data source on the
    `index.tsx` file in the `pages/Reports` folder:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以在 `pages/Reports` 文件夹中的 `index.tsx` 文件上使用请求响应来填充我们的图表数据源：
- en: '[PRE46]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: We created three states using the `useState` React hook to store our charts
    data and utilized the `useEffect` React hook to fill our charts with data when
    the page is rendered.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `useState` React 钩子创建了三个状态来存储我们的图表数据，并利用 `useEffect` React 钩子在页面渲染时填充我们的图表。
- en: 'Import all the React dependencies and functions from the `analytics.ts` file,
    as follows:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式从 `analytics.ts` 文件导入所有 React 依赖和函数：
- en: '[PRE47]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Next, add each state to the `data` property of the corresponding `Chart` component.
    The result should look like the following:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将每个状态添加到相应的 `Chart` 组件的 `data` 属性中。结果应该如下所示：
- en: '![Figure 3.1 – The Reports page charts filled with data'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 3.1 – 填充数据的报告页面图表]'
- en: '](img/Figure_3.01_B18503.jpg)'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 3.01_B18503.jpg]'
- en: Figure 3.1 – The Reports page charts filled with data
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 3.1 – 填充数据的报告页面图表
- en: 'Let''s create the requests for the customer page. In the `services` folder,
    create a new file named `customer.ts` and write the requests, as follows:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在客户页面创建请求。在 `services` 文件夹中，创建一个名为 `customer.ts` 的新文件，并编写请求，如下所示：
- en: '[PRE48]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: We created four functions – `listCustomers` to list all the customers, `createCustomer`
    to post a new customer record, `disableCustomer` to disable a customer record,
    and `updateCustomer` to update a customer record.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了四个函数 - `listCustomers` 用于列出所有客户，`createCustomer` 用于发布新的客户记录，`disableCustomer`
    用于禁用客户记录，以及 `updateCustomer` 用于更新客户记录。
- en: 'Now, we can list a customer in the `ProTable` component on the customer page.
    Import the `listCustomers` function to the `index.tsx` file in the `pages/Customers`
    folder by adding the following line:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以在客户页面上的 `ProTable` 组件中列出客户。通过在 `pages/Customers` 文件夹中的 `index.tsx` 文件中添加以下行，将
    `listCustomers` 函数导入：
- en: '[PRE49]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Next, add the `listCustomers` function to the `request` property of the `ProTable`
    component, as follows:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'The result should look like the following:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.2 – The Customers list in the ProTable component'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.02_B18503.jpg)'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.2 – The Customers list in the ProTable component
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we'll create the requests on the opportunity page. Create a new file
    named `opportunity.ts` in the `services` folder.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the following functions in the `opportunity.ts` file, as follows:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: We created three functions – `listOpportunities` to get all the opportunities,
    `listActivities` to list all the opportunity activities, and `getOpportunity`
    to get an opportunity by ID.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, create the other three functions in the `opportunity.ts` file, as follows:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: We created three more functions – `createOpportunity` to create a new opportunity
    record, `disableOpportunity` to disable an opportunity record, and `updateOpportunity`
    to update an opportunity record.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we can list an opportunity in the `ProTable` component on the opportunity
    page. Add the following import to the `index.tsx` file in the `pages/Opportunity`
    folder:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Next, add the `listOpportunities` function to the `request` property of the
    `ProTable` component, as follows:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'The result should look like the following:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.3 – The Opportunity list on the ProTable component'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.03_B18503.jpg)'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.3 – The Opportunity list on the ProTable component
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s also get the opportunity and list the opportunity activities on the
    opportunity details page. Import the following to the opportunity details page:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Next, add the state to store the opportunity and the effect to request it,
    as follows:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Next, add the `opportunity` state to the `dataSource` property of the `ProDescriptions`
    component, as follows:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Let''s also add the `listActivities` function to the `request` property of
    the `ProTable` components, as follows:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Add the `opportunity` `status` property to the `current` property of the `Step`
    component, as follows:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Now, the opportunity details page should look like the following:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.4 – Opportunity – Details and the Activities list'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.04_B18503.jpg)'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.4 – Opportunity – Details and the Activities list
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we created the `services` folder and the request for each page
    using the umi-request library. We also used the request on each page to access
    the data to fill our interfaces. Next, we'll learn to share states and logic between
    components by creating model files.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: Using models for sharing states and logic
  id: totrans-234
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we'll create models for sharing states and logic between components.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: A model is a special custom React hook to centralize the states and logic for
    a specific context.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: 'We must create the models'' files inside the `src/models` folder, and we can
    access these models using the `useModel` custom hook, as follows:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Here, the `user` namespace matches the model filename, so the model file must
    be named `user.ts`.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: Let's create the `customer` model and the `opportunity` model to demonstrate
    the use of models. These two models will contain the logic and result for creating,
    reading, and updating operations and share these operations between different
    interfaces.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建 `customer` 模型和 `opportunity` 模型来演示模型的使用。这两个模型将包含创建、读取和更新操作的逻辑和结果，并在不同的接口之间共享这些操作。
- en: 'Follow these steps to create the models:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤创建模型：
- en: Create a new folder called `models` inside the `src` folder.
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `src` 文件夹内创建一个名为 `models` 的新文件夹。
- en: 'Next, create a new file named `customer.ts` under the `models` folder and add
    the following:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在 `models` 文件夹下创建一个名为 `customer.ts` 的新文件，并添加以下内容：
- en: '[PRE61]'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: We created the `CustomerModel` interface to describe all the functions and states
    we want to share between components.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了 `CustomerModel` 接口来描述我们希望在组件之间共享的所有函数和状态。
- en: 'Now, create the functions and state, as follows:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，创建以下函数和状态：
- en: '[PRE62]'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: We created a state to store the result and used the requests from the `services`
    files to execute the operations.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个状态来存储结果，并使用 `services` 文件中的请求来执行操作。
- en: 'Let''s use the `customer` model functions in the `ProTable` component on the
    `index.tsx` file in the `pages/Customer` folder:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在 `pages/Customer` 文件夹中的 `index.tsx` 文件中使用 `customer` 模型函数：
- en: '[PRE63]'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: We used the `result` state to determine whether the operation succeeded and
    showed a success message.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `result` 状态来确定操作是否成功，并显示成功消息。
- en: 'Add the `editable` property to the `ProTable` component using the `model` functions,
    as follows:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `model` 函数将 `editable` 属性添加到 `ProTable` 组件中，如下所示：
- en: '[PRE64]'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: We used the `disable` and `update` functions to provide the editable feature
    in the `ProTable` component.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `disable` 和 `update` 函数在 `ProTable` 组件中提供可编辑功能。
- en: Now, repeat the previous steps to create the `opportunity` model and enable
    the editable feature in the `ProTable` component.
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，重复之前的步骤来创建 `opportunity` 模型，并在 `ProTable` 组件中启用可编辑功能。
- en: 'Add the text to the `en-US.ts` file under the `locales` folder, as follows:'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文本添加到 `locales` 文件夹下的 `en-US.ts` 文件中，如下所示：
- en: '[PRE65]'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Now, you can edit the records on both pages, as shown in the following screenshot:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以在两个页面上编辑记录，如下面的截图所示：
- en: '![Feature 3.5 – The ProTable editable feature on the Customers page'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '![功能 3.5 – 客户页面上的 ProTable 可编辑功能'
- en: '](img/Figure_3.05_B18503.jpg)'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.05_B18503.jpg)'
- en: Feature 3.5 – The ProTable editable feature on the Customers page
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 功能 3.5 – 客户页面上的 ProTable 可编辑功能
- en: In this section, you learned how models work. We created the `customer` and
    `opportunity` models for sharing states and logic and used them in the `ProTable`
    editable feature.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你学习了模型的工作原理。我们创建了 `customer` 和 `opportunity` 模型以共享状态和逻辑，并在 `ProTable` 可编辑功能中使用它们。
- en: Summary
  id: totrans-263
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we created the definition files for all the backend data and
    created the `ProTable` column definitions on each page. We created the opportunity
    details page using the `ProDescritions` component and the `Activity` interface
    to describe the opportunity activities.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们为所有后端数据创建了定义文件，并在每个页面上创建了 `ProTable` 列定义。我们使用 `ProDescritions` 组件和 `Activity`
    接口创建了机会详情页面来描述机会活动。
- en: You learned how Umi mock files work and how to create mock endpoints to provide
    simulated backend data and logic by creating the mock files for our application.
    Next, you learned how to organize your application requests using the `services`
    folder and send requests using the umi-request library by creating the `services`
    files for our application. Finally, you learned how models work and created the
    `customer` and `opportunity` models to share logic and state between components.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 你学习了如何使用 Umi 模拟文件工作，以及如何通过为我们的应用程序创建模拟文件来创建模拟端点以提供模拟的后端数据和逻辑。接下来，你学习了如何通过为我们的应用程序创建
    `services` 文件来组织应用程序请求，并使用 umi-request 库发送请求。最后，你学习了模型的工作原理，并创建了 `customer` 和
    `opportunity` 模型以在组件之间共享逻辑和状态。
- en: In the next chapter, you will learn how to handle API error responses by configuring
    the umi-request library, protecting routes using **plugin-access**, and storing
    and globally accessing user information after login.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习如何通过配置 umi-request 库来处理 API 错误响应，使用 **plugin-access** 保护路由，并在登录后存储和全局访问用户信息。
