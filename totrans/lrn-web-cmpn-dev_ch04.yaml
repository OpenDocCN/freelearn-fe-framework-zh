- en: Chapter 4. Exploring Bosonic Tools for Web Component Development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bosonic provides a set of tools that help developers build a web component development.
    In this chapter, we will learn about configuration, lifecycle, built-in elements,
    and custom element development using the Bosonic tool.
  prefs: []
  type: TYPE_NORMAL
- en: What is Bosonic?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Bosonic is a library for web component development based on the W3C specification.
    The Bosonic library came about so as to support not-so-modern browsers, such as
    IE9\. Bosonic is built on top of the PolymerJS polyfill and its own polyfill.
    Bosonic acts like a transpiler. A **transpiler** is a simple compiler, which takes
    a source code as input and output in another programming language. The following
    diagram shows the Bosonic acting as a transpiler:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What is Bosonic?](img/image00283.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The Bosonic transpiler takes the element definition in the HTML format and generates
    the respective JavaScript and CSS file.
  prefs: []
  type: TYPE_NORMAL
- en: Browser support
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As mentioned in the first chapter, web component specification is very new
    and is not implemented by all browsers. However, Bosonic tries to support more
    recent browsers by using polyfill. As of today, Bosonic supports the following
    listed browsers:'
  prefs: []
  type: TYPE_NORMAL
- en: Mozilla Firefox 25+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google Chrome 30+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Internet Explorer 9+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Safari 6+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Opera 12+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring Bosonic
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Bosonic library is hosted by GitHub. The complete library can be downloaded
    from the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/bosonic/bosonic](https://github.com/bosonic/bosonic)'
  prefs: []
  type: TYPE_NORMAL
- en: Bosonic packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Bosonic elements are made up of four packages. We can consider these packages
    as layers of a technology stack that supports Bosonic elements. The following
    diagram shows the Bosonic packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Bosonic packages](img/image00284.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The details of the mentioned packages are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Bosonic platform**: This package contains all the polyfill JavaScript files
    to provide the missing features from web component specification'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Grunt Bosonic**: This is a Grunt task that uses the transpiler to build your
    elements'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bosonic transpiler**: This is an **node package manager** (**npm**) module
    for converting the Bosonic element definition to CSS and JS'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Yeoman Bosonic**: This is a Yeoman generator that creates the skeleton of
    a new element'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Built-in elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Bosonic library comes with a set of built-in components that can be used
    by a developer for web application development. The complete list of built-in
    elements can be found by visiting the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://bosonic.github.io/elements.html](http://bosonic.github.io/elements.html)'
  prefs: []
  type: TYPE_NORMAL
- en: We will explore a few of them in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: The b-sortable element
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `b-sortable` element can be used to group and sort the DOM elements. The
    `<b-sortable>` element can be installed using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The `--save` switch is used to include the `b-sortable` element code in the
    local project. After the successful execution of the preceding command, it generates
    a directory structure.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the directory and file structure generated by
    the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The b-sortable element](img/image00285.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: From the preceding screenshot, we can see that the parent directory named `node_module`
    is created with a subdirectory named `b-sortable`, which contains the real JavaScript
    code definition for the element.
  prefs: []
  type: TYPE_NORMAL
- en: 'The dependent files for the `<b-sortable>` element can be installed using the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the terminal with the `b-sortable` element by
    installing dependent files using the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The b-sortable element](img/image00286.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the entire dependent files are generated using npm, we can start the Grunt
    task for transpiling the `b-sortable.html` file. To get a copy of the `<b-sortable>`
    element in the `demo` directory, we use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the Grunt task execution, which generates the
    corresponding CSS and JS files in the `demo` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The b-sortable element](img/image00287.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the Grunt task is successfully executed, the corresponding CSS and JS
    files are generated inside the `demo` directory. The following screenshot shows
    the updated directory structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The b-sortable element](img/image00288.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we can view the demo of the `<b-sortable>` element by running the `index.html`
    file present inside the `demo` subdirectory:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The b-sortable element](img/image00289.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The b-toggle-button element
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `b-toggle-button` element has two different states, *on* and *off*, representing
    the checked and unchecked element. The `<b-toggle-button>` element can be installed
    using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'After the successful execution of the preceding command, it generates a directory
    structure. The following screenshot shows the directory and file structure generated
    by the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The b-toggle-button element](img/image00290.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The dependent files for the `<b-toggle-button>` element can be installed using
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the terminal with the `b-toggle-button` element
    by installing dependent files using preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The b-toggle-button element](img/image00291.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the entire dependent files are generated using npm, we can start the Grunt
    task for transpiling the `b-toggle-button.html` file. To get a copy of the `<b-toggle-button>`
    element in the `demo` directory, we use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the Grunt task execution, which generates the
    corresponding CSS and JS files in the `demo` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The b-toggle-button element](img/image00292.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we can view the demo of the `<b-toggle-button>` element by running the
    `index.html` file present inside the `demo` subdirectory. Here is the screenshot
    for this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The b-toggle-button element](img/image00293.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Developing custom component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Bosonic framework supports the development of a custom element. In this
    section, we will learn step-by-step details for developing a custom element. We
    will build a custom element named `<red-message>`. The detailed steps are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Step 1 – creating the red-message element directory
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a directory named `red-message` using your terminal and the `mkdir` command.
    The following screenshot shows the terminal with a directory name `red-message`
    creation. We can verify the directory creation using the `dir` or `ls` command
    in the terminal, depending on the operating system used by the developer.
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 1 – creating the red-message element directory](img/image00294.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Step 2 – changing the current directory to red-message
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Change the current directory to `red-message` using the `cd` command in the
    terminal. The following screenshot shows the terminal with the `cd` command in
    execution:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 2 – changing the current directory to red-message](img/image00295.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Step 3 – generating the skeleton for <red-message>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to generate the skeleton of the Bosonic custom element using Yeoman
    Bosonic generator. The package name for Bosonic generator is `generator-bosonic`,
    and it can be installed using the `npm install --save generator-bosonic` command.
    The skeleton of the `<red-message>` element can be generated using the `yo bosonic`
    command in the terminal. Refer to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 3 – generating the skeleton for <red-message>](img/image00296.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Step 4 – verifying the directory structure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Verify the directory structure generated by Yeoman Bosonic generator using
    the `ls` command. The following screenshot shows the directory structure generated
    by the generator:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 4 – verifying the directory structure](img/image00297.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Step 5 – defining code for the <red-message> element
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, it''s time to write the definition for the `<red-message>` element in
    the `red-message.html` file present in the `src` directory. The modified content
    of the `red-message.html` file is listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The details of the preceding code are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The `<template>` element contains an `h1` element with a message that is going
    to be rendered
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `<style>` element contains the style for the `color: red` attribute for
    the `h1` element'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `<script>` element overrides the `createdCallback` method, which clones
    the template content and appends it to the `<red-message>` element
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Step 6 – modifying the index.html demo file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To test the `red-message` element, we need to include the `red-message` tag
    in the `index.html` file. The following code shows the content of the `index.html`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: As shown in the preceding code, `red-message.js` and `red-message.css` are the
    files that are generated by the transpiler. These files will be used in the next
    step.
  prefs: []
  type: TYPE_NORMAL
- en: Step 7 – generating distribution files using Grunt
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this step, we need to call the transpiler which will generate the CSS and
    JS file from the `red-message.html` file. A Grunt task watcher can watch the changes
    in the `red-message.html` file and generate the `red-message.css` and `red-message.js`
    files. A Grunt task watcher can be executed using the `grunt demo` command. The
    following screenshot shows the terminal with Grunt watcher in execution:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 7 – generating distribution files using Grunt](img/image00298.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'After successful execution of the Grunt compiler, it generates the `red-message.js`
    and `red-message.css` files in the `dist` directory and copies a set of these
    files to the `demo` directory. The following screenshot shows the generated files
    after compilation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 7 – generating distribution files using Grunt](img/image00299.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Any changes to the `red-message.html` file will be picked up by the Grunt task
    watcher and also made to the corresponding CSS and JS files. The following screenshot
    displays the Grunt task watcher logs in the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 7 – generating distribution files using Grunt](img/image00300.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following code has the content of the `red-message.js` file which is generated
    by the Grunt transpiler:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The details of the preceding code are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: A new object prototype `RedMessagePrototype` is created using the `Object.createElement`
    method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It uses the `Object.defineProperty` method to create a property for the `RedMessagePrototype`
    object
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It registers the element with DOM as `red-message` using the `document.registerElement`
    method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Step 8 – running the index.html file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can see the use of the `<red-message>` custom element by running the `index.html`
    file. The following screenshot shows the output of `index.html`, which shows the
    text message in the color red:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 8 – running the index.html file](img/image00301.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Bosonic lifecycle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A Bosonic element goes through different states during its lifecycle. Bosonic
    provides callback methods for each state to override with our own code. The lifecycle
    callback methods are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`createdCallback`: This callback method is for handling the `created` state.
    An element is in the `created` state when it is instantiated at first.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`attachedCallback`: This callback method is for handling the DOM `attached`
    state. An `attached` state represents the element when it is attached to DOM tree.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`detachedCallback`: This callback method is for handling the DOM `detached`
    state. A `detached` state represents the element when it is removed from the DOM.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`attributeChangedCallback`: This callback method is for handling the changes
    in attributes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Example of lifecycle
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we will develop a custom element `<say-hello>` demonstrating
    the lifecycle callback method. A skeleton for creating a custom element `<say-hello>`
    can be generated using the previously explained steps. The following screenshot
    shows the terminal with the previous steps in execution:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Example of lifecycle](img/image00302.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'After the directory and file structure is generated, we can start the Grunt
    task, which will watch over the modified element and generate the `dist` directory
    containing the respective CSS and JS files. The `say-hello.html` file present
    in the `src` directory has the code definition for the `<say-hello>` element.
    The following code shows the definition of the `<say-hello>` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The details of the preceding code are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The name of the custom element is `say-hello` and a `message` attribute with
    no value.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `<template>` element contains the HTML markup containing a header `<h1>`
    and a `<span>` tag. The `<span>` tag acts as a placeholder for the `message` attribute
    value.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The element definition contains four lifecycle callback methods. The details
    of these callback methods are listed as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `createdCallback` method clones the template content, reads the message
    attribute value, and inserts it as a text node to the `<span>` element. It has
    a console to log the created event.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The `attachedCallback` method has just the console log to print the message
    when the element is attached to DOM.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The `detachedCallback` method has a console log to print the message when the
    element is removed from the DOM.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The `attributeChangesCallback` method calls the `createdCallback` method whenever
    the value of the `message` attribute is changed. It also contains the console
    log to print the message whenever any attribute is changed.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `<say-hello>` element will generate the `say-hello.css` and `say-hello.js`
    files in the `dist` directory with a copy inside the `demo` directory. The `demo`
    directory contains the `index.html` file, which shows the use of the `<say-hello>`
    element. The code for the `index.html` file is listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `index.html` file, the code contains an `<input>` element having the
    `messageElement` ID value and three buttons for modifying the `<say-hello>` element.
    The details of these elements are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The `<input>` element takes the value from the user, which can be used as a
    value for the `message` attribute.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first button **Change Message** value has an onclick handler attached to
    the `changeMessageHandler` method. This method takes the value entered by the
    user in the `<input>` element and updates the `message` attribute. The change
    in the `message` attribute calls the `attributeChangedCallback` method, which
    in turn calls the `createdCallback` method and the new value of the message then
    gets rendered in the browser.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second button **Delete SayHello Element** has an onclick handler attached
    to the `deleteElementHandler` method. This method finds the `say-hello` element
    and removes it from the DOM using the `remove` method. It fires the `detachedCallback`
    lifecycle method.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The third button **Create SayHello Element** has an onclick handler attached
    to the `createElementHandler` method. This method creates a new `say-hello` element
    using the `document.createElement` method and then attaches the `say-hello` element
    to `elementContainer`. This process fires the `createdCallback` lifecycle method.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The output of the demo code in `index.html` will render the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Example of lifecycle](img/image00303.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, enter a text message such as `Bosonic Framework` in the `<input>` element
    and hit the **Change Message** button. The following screenshot shows the output
    after entering the text in the `<input>` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Example of lifecycle](img/image00304.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding screenshot, we can see that the new **Hello Bosonic Framework**
    message gets rendered in the browser. In the console, we can find two logs generated
    from the `attributeChangedCallback` and `createdCallback` methods, as the `message`
    attribute value is changed with the user entered text and the element is reinitialized.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, press the **Delete SayHello Element** button which will remove the element
    form the DOM tree. The following screenshot shows the output after the deletion
    of the `<say-hello>` element from DOM:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Example of lifecycle](img/image00305.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding screenshot, we can see that the `<say-hello>` element is removed
    from the DOM. In the console, a message is logged which is generated by the `detachedCallback`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, press the **Create SayHello Element** button which will create a new `<say-hello>`
    element and append it to `elementContainer`. The following screenshot shows the
    new `<say-hello>` element created after pressing the button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Example of lifecycle](img/image00306.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding screenshot, we can see that the new `<say-hello>` element is
    rendered in the browser with the `message` attribute value set to `Developers`.
    In the console, we can see that four different log message are generated by the
    `createdCallback`, `attributeChangedCallback`, and `attachedCallback` method.
  prefs: []
  type: TYPE_NORMAL
- en: Digital clock development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will develop the `<ts-clock>` custom element using the
    Bosonic framework. The following screenshot shows the terminal with the command
    to generate the default directory and file structure for creating a `<ts-clock>`
    element:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Digital clock development](img/image00307.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we can run the Grunt task runner to watch the changes to the `ts-clock.html`
    file. The task runner transpiles the `ts-clock.html` file and generates the `ts-clock.css`
    and `ts-clock.js` files in the `dist` directory, and a copy in the `demo` directory.
    The following screenshot shows the terminal with the Grunt task runner in execution:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Digital clock development](img/image00308.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, the platform is set up for writing the code for the `<ts-clock>` digital
    clock element. The `ts-clock.html` file contains the code for the definition of
    the digital clock. The details of the code in the `ts-clock.html` file are listed
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `<ts-clock>` element will have three attributes `hour`, `minute`, and `second`.
    The following code shows the syntax for the code definition for the `<ts-clock>`
    element:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `<template>` element contains the CSS style and HTML elements. The CSS
    styles and HTML element that we used for the template is used from the previous
    chapter. The HTML element has three different `div` elements, which has `hour`,
    `minute`, and `second` classes wrapped inside a `div` element with the `clock`
    class. The following code shows the HTML and CSS content present inside the `<template>`
    element:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `<script>` element contains the real code definition for the `<ts-clock>`
    element. The following code shows the content of the `<script>` element:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The details of the preceding code are listed here:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `createdCallback` method creates `shadowRoot` for the host element. It finds
    and clones the content of the element to activate it. After activation, it appends
    the HTML content to `shadowRoot`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The `attachedCallback` method has a `setInterval` method, which contains the
    code for setting the attributes `hour`, `minute`, and `second` with the current
    time using a `date` object. The code block gets executed in every 1 second and
    updates the value of the `hour`, `minute`, and `second` attributes.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The `attributeChangedCallback` method gets called whenever there is change of
    value in the `hour`, `minute`, and `second` attributes. It has a `switch` block
    containing cases like `hour`, `minute`, and `second`. Based on the change in the
    attribute, one of the `switch` case gets activated, which updates the text content
    of the DOM element.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `demo` directory contains the code for testing the `<ts-clock>` element.
    The `index.html` file contains the `<ts-clock>` element with `hour`, `minute`,
    and `second` having default values `HH`, `MM`, and `SS`, respectively. The content
    of the `index.html` file is listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding code is rendered in the following screenshot showing
    `hour` (HH), `minute` (MM), and `second` (SS) in the 24-hour format:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Digital clock development](img/image00309.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The following screenshot shows the Chrome developer tool with the HTML inspection
    for the output of the preceding code. We can find the Shadow DOM subtree of the
    `<ts-clock>` element containing the CSS style and HTML element.
  prefs: []
  type: TYPE_NORMAL
- en: '![Digital clock development](img/image00310.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about the Bosonic framework that is used to create
    a custom element with the lifecycle callback methods. In the next chapter, we
    will learn about the Mozilla Brick framework based on X-Tag.
  prefs: []
  type: TYPE_NORMAL
