- en: '*Chapter 5*: Working with Images'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will master the art of adding images to your Gatsby site.
    First, we will learn a little about the history of images on the web, before understanding
    why importing images is not as easy you might think. We will then move on to creating
    images that progressively load in and are performant.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Images on the web
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `StaticImage` component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `GatsbyImage` component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overriding the `gatsby-plugin-image` defaults
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sourcing images from CMS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To complete this chapter, you will need to have completed [*Chapter 3*](B15983_03_ePub_RK.xhtml#_idTextAnchor057),
    *Sourcing and Querying Data (from Anywhere!)*.
  prefs: []
  type: TYPE_NORMAL
- en: The code for this chapter can be found at [https://github.com/PacktPublishing/Elevating-React-Web-Development-with-Gatsby-4/tree/main/Chapter05](https://github.com/PacktPublishing/Elevating-React-Web-Development-with-Gatsby-4/tree/main/Chapter05).
  prefs: []
  type: TYPE_NORMAL
- en: Images on the web
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When was the last time you visited a website without any images? You might be
    thinking that this is a hard question to answer. Images are a critical part of
    websites and our browsing experience. We use images for logos, products, profiles,
    and marketing to convey information, entice, or excite through a visual medium.
    While images are great for these use cases (and many more!), they are the single
    largest contributor to page size. According to the HTTP Archive ([https://httparchive.org/](https://httparchive.org/)),
    the median page size on desktops is 2,124 KB. Images make up 973 KB of this size,
    which is roughly 45% of the total page size.
  prefs: []
  type: TYPE_NORMAL
- en: As images are so integral to our browsing experience, we cannot do away with
    them. But when they account for so much of the page size, we should be doing everything
    in our power to ensure that they are optimized, accessible, and as performant
    as possible. Newer versions of browsers (including Chrome) have **responsive image**
    capabilities built into them. Instead of providing a single source for the image,
    the browser can accept a source set. The browser uses this set to load an image
    at a different size, depending on the size of the device. This ensures the browser
    never loads images that are too big for the space available. Another way in which
    developers can optimize images, specifically in React, is with **lazy loading**.
    Lazy loading is the process of deferring the load of your images until a later
    point in time. This could be after the initial load, or when they specifically
    become visible on the screen. Using this technique, you can improve your site's
    speed, better utilize a device's resources, and reduce a user's data consumption.
  prefs: []
  type: TYPE_NORMAL
- en: Images in Gatsby
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Manually creating high-performance sites that contain lazy-loaded images is
    a project in itself. Luckily, Gatsby has a plugin that takes the pain away when
    you're generating responsive, optimized images – `gatsby-plugin-image`.
  prefs: []
  type: TYPE_NORMAL
- en: 'This plugin contains two React image components with specific features aimed
    at creating a better user experience when using images, both for the developer
    and the site visitor:'
  prefs: []
  type: TYPE_NORMAL
- en: Loads the correct image for the device viewing the site.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reduces cumulative layout shift by holding the position of the image while it
    is loading.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uses a lazy loading strategy to speed up the initial load time of your site.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Has multiple options for placeholder images that appear while the image is loading.
    You can make the images blur up or use a traced **Scalable Vector Graphics** (**SVG**)
    of the image in its place.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Supports new image formats such as **WebP** if the browser can support it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next section, we will begin looking at the first of the two image components
    in this chapter – the `StaticImage` component.
  prefs: []
  type: TYPE_NORMAL
- en: The StaticImage component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`StaticImage` is best used when an image will always remain the same. It could
    be your site logo, which is the same across all pages, or a profile photo that
    you use at the end of blog posts, or a home page hero section, or anywhere else
    where the image is not required to be dynamic.'
  prefs: []
  type: TYPE_NORMAL
- en: Unlike most React components, the `StaticImage` component has some limitations
    on how you can pass the props to it. It will not accept and use any of its parents'
    props. If you are looking for this functionality, you will want to use the `GatsbyImage`
    component.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get an understanding of how we utilize the `StaticImage` component, we will
    implement an image on the hero of our home page:'
  prefs: []
  type: TYPE_NORMAL
- en: Create an `assets` folder next to your `src` folder. To keep things organized,
    it is good practice to keep images away from your source code. We will use the
    `assets` folder to house any visual assets.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a folder within `assets` called `images`. We will use this folder to
    store the visual assets of the `image` type.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add an image to your `images` folder. The image file type must be in `.png`,
    `.jpg`, `.jpeg`, `.webp`, or `.avif` format.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Install `gatsby-plugin-image` and its dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: These dependencies spawn other node processes and may take a little longer to
    install compared to our previous installs.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update your `gatsby-config.js` file so that it includes the three new dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Import the `StaticImage` component into your `index.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the `StaticImage` component within the render on the page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `src` prop should be the relative path to the image from the current file,
    *not* the root directory.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Modify the image that''s rendered via props:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s look at these props in detail:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`src`: This prop is the relative path to the image from the current file.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`alt`: As you would with a normal `img` tag, be sure to include an `alt` prop
    with text describing the image so that your image remains accessible.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Placeholder`: This prop tells the component what to display while the image
    is loading. Here, we have set it to `tracedSVG`, which uses a placeholder SVG
    (created by tracing the image) to fill the gap where the image will load in, but
    also gives the user a sense of the shape of whatever is in the photo. Other options
    include `blurred`, `dominantColor`, and `none`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`layout`: This prop determines the size of images that are produced as the
    output by the plugin and their resizing. Here, we have set it to `fixed` – this
    suggests that the image will be at a consistent size when it renders. Other layout
    options include `constrained`, which takes a maximum height or width and can scale
    down, and `fullWidth`, which will also resize to fit the container but is not
    restricted to the maximum height or width.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`width` and `height`: We can use these props to specify the width and height
    of the image.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`StaticImage` can also take a remote source as its `src` prop. Any images that
    are specified as URLs will be downloaded at build time and then resized. Using
    remote images instead of local images is a great way to keep your repository small,
    but it should also be remembered that Gatsby does not know when that image changes
    if it is outside of your repository. If the image is changed on the remote server,
    it will only update when you rebuild your project.'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that we understand how to utilize the `StaticImage` component, let's turn
    our attention to the other half of `gatsby-plugin-image` and learn about the `GatsbyImage`
    component.
  prefs: []
  type: TYPE_NORMAL
- en: The GatsbyImage component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If ever you need to use dynamic images, such as those embedded in your Markdown
    content, then you can use the `GatsbyImage` component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add hero images to our Markdown/MDX blog posts using the `GatsbyImage`
    component:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the `gatsby-transformer-sharp` npm package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add some images to `assets/images` that you would like to use as covers for
    your blog posts – one per blog post.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Update your `Gatsby-config.js` file so that it includes your `assets` source:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Unlike `StaticImage`, `GatsbyImage` requires that images are ingested into our
    data layer. We can use the `gatsby-source-filesystem` plugin to achieve this,
    but by giving it the path to our images.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'For each blog post, modify the post file''s `frontmatter` so that it includes
    a `hero` key that contains the relative path to the image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `GatsbyImage` component and the `getImage` function as imports, at
    the top of the `src/templates/blog-page.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify the file''s page query to reference the new images:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the new data within the `data` prop to get the image within the component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Render your image within your `return` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start or restart your development server and admire your hard work. Navigate
    to one of the blog posts and you should see your image blur in gracefully.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further Exercise
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We've learned how to add images to our blog pages, so why not use what you have
    learned to add a smaller version of the same image to the blog preview page? An
    implementation can be found in this book's GitHub repository ([https://github.com/PacktPublishing/Elevating-React-Web-Development-with-Gatsby-3/tree/main/Chapter05](https://github.com/PacktPublishing/Elevating-React-Web-Development-with-Gatsby-3/tree/main/Chapter05))
    if you want to see how it can be achieved.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You might find yourself adding the same configuration to your images across
    the whole site. Let's find out how we can use the defaults to keep our code in
    **Don't Repeat Yourself** (**DRY**) form.
  prefs: []
  type: TYPE_NORMAL
- en: Overriding the gatsby-plugin-image defaults
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create a consistent look and feel, you may have included the same props
    with many instances of the two image components. Keeping these image components
    updated can be a monotonous task if your site is image-heavy. Instead, you could
    configure the defaults within the options of `gatsby-plugin-sharp`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s look at each of these options in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '`formats`: The file formats generated by the plugin.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`placeholder`: Overrides the style of the temporary image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`quality`: The default image quality that''s created.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`breakpoints`: The widths to use for full-width images. It will never create
    an image with a width that''s longer than the source.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`backgroundColor`: The default background color of the images.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tracedSVGOptions` and `blurredOptions`: The default options to use for placeholder
    image types in the case that these are different from the global defaults.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jpgOptions`, `pngOptions`, `webpOptions`, and `avifOptions`: The default options
    to use for image types in the case that these are different from the global defaults.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We now have a good understanding of the `gatsby-plugin-image` package. There
    are, however, some important niches to using this package with other sources such
    as **Content Management Systems** (**CMSes**) – let's take a look.
  prefs: []
  type: TYPE_NORMAL
- en: Sourcing images from CMS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is not always practical to store images within your repository. You may want
    someone other than yourself to be able to update or add images to your site without
    you needing to change the code. In these cases, serving images via CMS is preferable.
    It's still important that we use the Gatsby image plugin as we want our images
    to be performant, regardless of the source. To understand how we would integrate
    images via CMS, let's use an example. Let's add a profile image to our *about*
    page using `gatsby-plugin-image` and a CMS.
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: 'Due to the vast number of headless CMSes in the market, we will continue to
    focus on the two mentioned in the *Sourcing data from a Headless CMS* section
    of [*Chapter 3*](B15983_03_ePub_RK.xhtml#_idTextAnchor057), *Sourcing and Querying
    Data (from Anywhere!)*: GraphCMS and Prismic.'
  prefs: []
  type: TYPE_NORMAL
- en: Both of the following sections will assume you have already installed the CMS's
    dependencies and integrated the CMS via your `gatsby-config.js` file. Please only
    implement one of the following.
  prefs: []
  type: TYPE_NORMAL
- en: Sourcing images from GraphCMS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'By making some small modifications to our configuration and queries, we can
    ensure that we can source images from GraphCMS that utilize `gatsby-plugin-image`
    and load in on the site in the same way as those that are locally sourced:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the GraphCMS website ([graphcms.com](https://graphcms.com)) and
    log in.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to your project's assets and click the **upload** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag and drop a local image you wish to use onto the page. Be sure to take note
    of the file's name as we will need it later.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Publish the asset.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify your `gatsby-source-graphcms` plugin:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify your about page''s `query` so that it includes the `graphCmsAsset` source:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `GatsbyImage` component and the `getImage` function as imports at the
    top of the `src/pages/about.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the new data within the `data` prop to get the image within the component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: First, retrieve `graphCmsAsset` from the `data` prop and then use the `getImage`
    utility from `gatsby-plugin-image` to retrieve the image data that's required
    to render it. Finally, assign it to a `const` called `profileImage`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Render your image within your `return` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Restart your development server and admire your hard work by navigating to your
    *about* page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we understand how we can source images within GraphCMS, let's turn
    our attention to how the same can be achieved in Prismic.
  prefs: []
  type: TYPE_NORMAL
- en: Sourcing images from Prismic
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With a few simple changes to our configuration and queries, we can source images
    from Prismic utilizing `gatsby-plugin-image` and load them in on the site in the
    same way as local images:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to Prismic's website ([prismic.io](https://prismic.io)) and log in.
    Select your existing repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the **CustomTypes** tab, click the **Create new** button, and select
    **Single Type**. Name your type **Profile** and submit it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the **build-mode** sidebar (on the right), drag an image component into
    the type.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name your field **photo**; the corresponding API ID should populate on its own.
    Click **OK** to confirm this. If you've done this correctly, your profile type
    should look as follows:![Figure 5.1 – Prismic profile type
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_5.1_B15983.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 5.1 – Prismic profile type
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Save the document.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the JSON editor and copy its contents to a new file called `profile.json`
    within your `src/schemas` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the **Documents** tab and click the **Create new** button. If Prismic
    has not automatically opened your new type, select **Profile**. Using the interface,
    upload a new image into the document in the **photo** field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save and publish the new document. We now have everything set up in the CMS
    and can return to our Gatsby project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Update your `gatsby-source-prismic` configuration within your `gatsby-config.js`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `GatsbyImage` component and the `getImage` function as imports at the
    top of the `src/pages/about.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify your about page''s `query` so that it includes the `prismicProfile`
    source:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We utilize `gatsbyImageData` within our `query` and can make use of any of the
    configuration options that it supports. Here, we are specifying that the image
    should be full width.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Use the new data within the `data` prop to get the image within the component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: First, retrieve the `prismicProfile` data from the `data` prop and then use
    the `getImage` utility from `gatsby-plugin-image` to retrieve the image data that's
    required to render it and assign it to a `const` called `profileImage`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Render your image within your `return` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Use the `const` parameter defined in *Step 12* to render the image within a
    `GatsbyImage` component. Be sure to provide it with `alt` text to keep your image
    accessible – you could provide this via `frontmatter` as well if you wish.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Restart your development server and admire your hard work by navigating to your
    *about* page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should now feel comfortable using images and sourcing images via the Prismic
    CMS. While we have only looked at two CMSes, these concepts can be taken and applied
    to any headless CMS that supports images. Now, let's summarize what we have learned
    in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about images on the web, and how critical they are
    to our browsing experience. We learned about `gatsby-plugin-image` and implemented
    the two contained image components. We also learned in which circumstances to
    use which component.
  prefs: []
  type: TYPE_NORMAL
- en: At this stage, you should feel comfortable developing all manner of pages for
    your Gatsby site. In the next chapter, we will begin to look at how we can take
    our development site live. We will start this journey by looking at **search engine
    optimization**.
  prefs: []
  type: TYPE_NORMAL
