["```js\n    export interface User {\n      id?: number;\n      name?: string;\n      company?: string;\n      role?: {\n        id: number;\n        title: string;\n      };\n      isLoggedIn: boolean;\n    }\n    ```", "```js\n    export interface Customer {\n      id?: number;\n      name?: string;\n      company?: string;\n      phone?: string;\n      email?: string;\n      role?: string;\n    }\n    ```", "```js\n    import { Customer } from './customer';\n    export interface Opportunity {\n      id: number;\n      topic: string;\n      budget: string;\n      status: number;\n      customer: Customer;\n    }\n    export interface Activity {\n      id: number;\n      type: number;\n      schedule: Date;\n      createdBy: string;\n      summary: string;\n    }\n    ```", "```js\n    export interface TopOpportunity {\n      name: string;\n      revenue: string;\n    }\n    export interface LeadsSource {\n      source: string;\n      count: number;\n      percent: number;\n    }\n    export interface HistoryByMonth {\n      name: string;\n      month: string;\n      value: string;\n    }\n    ```", "```js\n    import { Customer } from '@/types/customer';\n    import { ProColumns } from '@ant-design/pro-table';\n    import { FormattedMessage } from 'umi';\n    const columns: ProColumns<Customer>[] = [\n      {\n        title: <FormattedMessage id=\"table.customer.name\" \n               />,\n        dataIndex: 'name',\n      },\n      {\n        title: <FormattedMessage id=\"table.customer.email\"\n               />,\n        dataIndex: 'email',\n        copyable: true,\n      },\n      {\n        title: <FormattedMessage id=\"table.customer.phone\"\n               />,\n        dataIndex: 'phone',\n      },\n      {\n        title: <FormattedMessage id=\"table.customer.role\" \n               />,\n        dataIndex: 'role',\n      },\n      {\n        title: <FormattedMessage  \n                id=\"table.customer.company\" />,\n        dataIndex: 'company',\n      },\n    ];\n    export default columns;\n    ```", "```js\n    {\n      title: <FormattedMessage id=\"table.options\" />,\n      valueType: 'option',\n      hideInSetting: true,\n      hideInDescriptions: true,\n      render: (_, record, __, action) => [\n        <a\n          key=\"editable\"\n          onClick={() => {\n            action?.startEditable(record.id as number);\n          }}\n        >\n          <FormattedMessage id=\"table.edit\" />\n        </a>,\n      ],\n    },\n    ```", "```js\n    import columns from './columns';\n    ```", "```js\n    columns={columns}\n    ```", "```js\n    <ProTable<Customer>\n    ```", "```js\n    import { Customer } from '@/types/customer';\n    import { Opportunity } from '@/types/opportunity';\n    import { ProColumns } from '@ant-design/pro-table';\n    import { Tag } from 'antd';\n    import { FormattedMessage, history } from 'umi';\n    const columns: ProColumns<Opportunity>[] = [\n      {\n        title: <FormattedMessage\n                id=\"table.opportunity.topic\" />,\n        dataIndex: 'topic',\n        width: 300,\n      },\n      {\n        title: <FormattedMessage\n                id=\"table.opportunity.budget\" />,\n        dataIndex: 'budget',\n        render: (node) => <>{`$ ${node}`}</>,\n      },\n      {\n        title: <FormattedMessage\n                id=\"table.opportunity.status\" />,\n        dataIndex: 'status',\n        valueType: 'select',\n        hideInDescriptions: true,\n        filters: true,\n        onFilter: true,\n      },\n    ];\n    export default columns;\n    ```", "```js\n    valueEnum: {\n      0: {\n        text: (\n          <Tag color=\"#8d79f2\" key={0}>\n            <FormattedMessage id=\"step.propose\" />\n          </Tag>\n        ),\n      },\n      1: {\n        text: (\n          <Tag color=\"#c7f279\" key={0}>\n            <FormattedMessage id=\"step.develop\" />\n          </Tag>\n        ),\n      },\n      2: {\n        text: (\n          <Tag color=\"#e379f2\" key={0}>\n            <FormattedMessage id=\"step.qualify\" />\n          </Tag>\n        ),\n      },\n      3: {\n        text: (\n          <Tag color=\"#79f2e3\" key={0}>\n            <FormattedMessage id=\"step.close\" />\n          </Tag>\n        ),\n      },\n    },\n    ```", "```js\n    {\n      title: <FormattedMessage  \n              id=\"table.opportunity.customer\" />,\n      dataIndex: 'customer',\n      render: (node) => <>{node && (node as \n                                    Customer).name}</>,\n      editable: false,\n    },\n    {\n      title: <FormattedMessage id=\"table.customer.email\"\n             />,\n      dataIndex: 'customer',\n      hideInTable: true,\n      render: (node) => <>{node && (node as \n                                    Customer).email}</>,\n      editable: false,\n    },\n    {\n      title: <FormattedMessage id=\"table.customer.phone\" \n             />,\n      dataIndex: 'customer',\n      hideInTable: true,\n      render: (node) => <>{node && (node as\n                                    Customer).phone}</>,\n      editable: false,\n    },\n    {\n      title: <FormattedMessage id=\"table.customer.company\"\n             />,\n      dataIndex: 'customer',\n      hideInTable: true,\n      render: (node) => <>{node && (node as \n                                    Customer).company}</>,\n      editable: false,\n    },\n    ```", "```js\n    {\n      title: <FormattedMessage id=\"table.options\" />,\n      valueType: 'option',\n      hideInSetting: true,\n      hideInDescriptions: true,\n      render: (_, record, __, action) => [\n        <a\n          key=\"editable\"\n          onClick={() => {\n            action?.startEditable(record.id as number);\n          }}\n        >\n          <FormattedMessage id=\"table.edit\" />\n        </a>,\n        <a key=\"more\" onClick={() => \n          history.push(`/opportunity/${record.id}`)}>\n          <FormattedMessage id=\"table.more\" />\n        </a>,\n      ],\n    },\n    ```", "```js\n    import columns from './columns';\n    ```", "```js\n    columns={columns}\n    ```", "```js\n    import { Opportunity } from '@/types/opportunity';\n    ```", "```js\n    <ProTable<Opportunity>\n    ```", "```js\n    import columns from '../Opportunities/columns';\n    ```", "```js\n    'table.options': 'Options',\n    'table.edit': 'Edit',\n    'table.more': 'More',\n    'table.new': 'New',\n    'table.customer.title': 'Customers',\n    'table.customer.role': 'Role',\n    'table.customer.name': 'Name',\n    'table.customer.email': 'Email',\n    'table.customer.phone': 'Phone',\n    'table.customer.company': 'Company',\n    'form.customer.title': 'New customer',\n    'table.opportunity.assign': 'Assign Opportunities',\n    'table.opportunity.title': 'Opportunity',\n    'table.opportunity.detail': 'Details',\n    'table.opportunity.activities': 'Activities',\n    'table.opportunity.topic': 'Topic',\n    'table.opportunity.budget': 'Budget',\n    'table.opportunity.status': 'Step',\n    'table.opportunity.customer': 'Customer',\n    'form.opportunity.title': 'New opportunity',\n    ```", "```js\n    yarn umi g page /OpportunityDetail/index --typeScript --less\n    ```", "```js\n    yarn add @ant-design/pro-descriptions@1.10.5\n    ```", "```js\n    import { Opportunity } from '@/types/opportunity';\n    import ProDescriptions from '@ant-design/pro-descriptions';\n    import { Page Container } from '@ant-design/pro-layout';\n    import ProTable from '@ant-design/pro-table';\n    import { Breadcrumb, Button, Card, Steps, Tag } from 'antd';\n    import { useParams, history, FormattedMessage } from 'umi';\n    import columns from '../Opportunities/columns';\n    import { PlusOutlined } from '@ant-design/icons';\n    import { Activity } from '@/types/opportunity';\n    ```", "```js\n    export default function Page() {\n      const { id } = useParams<{ id: string }>();\n      return (\n        <PageContainer\n          extra={[\n            <Button icon={<PlusOutlined />} key=\"activity\" \n             type=\"primary\">\n              <FormattedMessage id=\"activity.new\" />\n            </Button>,\n          ]}\n        >\n          <Card bordered>\n            <ProDescriptions<Opportunity>\n              title={<FormattedMessage \n                     id=\"table.opportunity.detail\" />}\n              columns={columns}\n              dataSource={[]}\n            />\n          </Card>\n          <Card bordered>\n            <ProTable<Activity>\n              headerTitle={<FormattedMessage \n                id=\"table.opportunity.activities\" />}\n              rowKey=\"id\"\n              toolbar={{ settings: undefined }}\n              search={false}\n              pagination={{ pageSize: 5 }}\n              columns={[]}\n              params={{ customerId: id }}\n              request={() => {}}\n            />\n          </Card>\n        </PageContainer>\n      );\n    }\n    ```", "```js\n    header={{\n      title: <FormattedMessage \n              id=\"table.opportunity.title\" />,\n      breadcrumb: (\n        <Breadcrumb>\n          <Breadcrumb.Item>\n            <a onClick={() => \n              history.push('/opportunities')}>\n              <FormattedMessage id=\"menu.opportunities\" />\n            </a>\n          </Breadcrumb.Item>\n          <Breadcrumb.Item>\n            <FormattedMessage id=\"table.opportunity.title\"\n            />\n          </Breadcrumb.Item>\n        </Breadcrumb>\n      ),\n    }}\n    ```", "```js\n    <Steps current={0}>\n      <Steps.Step\n        key=\"quality\"\n        description={<Tag color=\"#e379f2\" key={0} />}\n        title={<FormattedMessage id=\"step.qualify\" />}\n      />\n      <Steps.Step\n        key=\"develop\"\n        description={<Tag color=\"#c7f279\" key={1} />}\n        title={<FormattedMessage id=\"step.develop\" />}\n      />\n      <Steps.Step\n        key=\"propose\"\n        description={<Tag color=\"#8d79f2\" key={2} />}\n        title={<FormattedMessage id=\"step.propose\" />}\n      />\n      <Steps.Step\n        key=\"close\"\n        description={<Tag color=\"#42C3E3\" key={3} />}\n        title={<FormattedMessage id=\"step.close\" />}\n      />\n    </Steps>\n    <br />\n    ```", "```js\n    {\n      path: '/opportunity/:id',\n      component: '@/pages/OpportunityDetail',\n    },\n    ```", "```js\n    import { ProColumns } from '@ant-design/pro-table';\n    import { FormattedMessage } from 'umi';\n    import { Activity } from '@/types/opportunity';\n    import { Tag } from 'antd';\n    const columns: ProColumns<Activity>[] = [\n      {\n        title: <FormattedMessage \n                id=\"table.activity.summary\" />,\n        dataIndex: 'summary',\n        width: 300,\n      },\n      {\n        title: <FormattedMessage id=\"table.activity.type\"\n               />,\n        dataIndex: 'type',\n      },\n      {\n        title: <FormattedMessage \n                id=\"table.activity.schedule\" />,\n        valueType: 'date',\n        dataIndex: 'schedule',\n      },\n      {\n        title: <FormattedMessage \n                id=\"table.activity.createdBy\" />,\n        dataIndex: 'createdBy',\n      },\n    ];\n    export default columns;\n    ```", "```js\n    valueEnum: {\n      0: {\n        text: (\n          <Tag color=\"#42C3E3\" key={0}>\n            <FormattedMessage id=\"activity.call\" />\n          </Tag>\n        ),\n      },\n      1: {\n        text: (\n          <Tag color=\"#42C3E3\" key={1}>\n            <FormattedMessage id=\"activity.email\" />\n          </Tag>\n        ),\n      },\n      2: {\n        text: (\n          <Tag color=\"#42C3E3\" key={2}>\n            <FormattedMessage id=\"activity.meeting\" />\n          </Tag>\n        ),\n      },\n      3: {\n        text: (\n          <Tag color=\"#42C3E3\" key={3}>\n            <FormattedMessage id=\"activity.event\" />\n          </Tag>\n        ),\n      },\n    },\n    ```", "```js\n    import activityColumns from './columns';\n    ```", "```js\n    columns={activityColumns}\n    ```", "```js\n    'step.qualify': 'Qualify',\n    'step.develop': 'Develop',\n    'step.propose': 'Propose',\n    'step.close': 'Close',\n    'activity.call': 'Call',\n    'activity.email': 'Email',\n    'activity.meeting': 'Meeting',\n    'activity.event': 'Event',\n    'activity.new': 'New activity',\n    'table.activity.summary': 'Summary',\n    'table.activity.type': 'Type',\n    'table.activity.schedule': 'Scheduled',\n    'table.activity.createdBy': 'User',\n    ```", "```js\nexport default {\n  'GET /api/products': { total: 0, products: [] },\n};\n```", "```js\n    $ yarn add -D faker@5.5.3\n    ```", "```js\n    $ yarn add -D @types/faker\n    ```", "```js\n    $ yarn add -D @types/express\n    ```", "```js\n    import * as faker from 'faker';\n    import { Response } from 'express';\n    import { Customer } from '@/types/customer.d';\n    const customers: Customer[] = [];\n    for (let index = 0; index < 30; index++) {\n      customers.push({\n        id: index,\n        name: faker.name.findName(),\n        company: faker.company.companyName(),\n        phone: faker.phone.phoneNumber(),\n        role: faker.name.jobTitle(),\n        email: faker.internet.email(),\n      });\n    }\n    ```", "```js\n    export default {\n      'PUT /api/customer': (_: any, res: Response) => \n    res.send({ success: true }),\n      'PUT /api/customer/disable': (_: any, res: Response) \n    =>\n        res.send({ success: true }),\n      '/api/customer/list': (_: any, res: Response) =>\n        res.send({ data: customers, success: true }),\n      'POST /api/customer': (_: any, res: Response) =>\n        res.status(201).send({ success: true }),\n    };\n    ```", "```js\n    import * as faker from 'faker';\n    import { Response } from 'express';\n    export default { }\n    ```", "```js\n    '/api/analytics/top/opportunity': (_: any, res: Response) =>\n        res.send({\n          data: [\n            { name: faker.commerce.productName(), \n              revenue: 15000 },\n            { name: faker.commerce.productName(), \n              revenue: 30000 },\n            { name: faker.commerce.productName(), \n              revenue: 40000 },\n            { name: faker.commerce.productName(), \n              revenue: 50000 },\n          ],\n          success: true,\n        }),\n    ```", "```js\n    '/api/analytics/leads/source': (_: any, res: Response) =>\n        res.send({\n          data: [\n            { source: 'Social Media', count: 40,\n               percent: 0.4 },\n            { source: 'Email Marketing', count: 21, \n              percent: 0.21 },\n            { source: 'Campaigns', count: 17, \n              percent: 0.17 },\n            { source: 'Landing Page', count: 13, \n              percent: 0.13 },\n            { source: 'Events', count: 9, percent: 0.09 },\n          ],\n          success: true,\n        }),\n    ```", "```js\n    '/api/analytics/bymonth/opportunity': (_: any, res: Response) =>\n        res.send({\n          data: [\n            { name: 'Won', month: 'Jan.', value: 18 },\n            { name: 'Won', month: 'Feb.', value: 28 },\n            { name: 'Won', month: 'Mar.', value: 39 },\n            { name: 'Won', month: 'Apr.', value: 81 },\n            { name: 'Won', month: 'May', value: 47 },\n            { name: 'Won', month: 'Jun.', value: 20 },\n            { name: 'Won', month: 'Jul.', value: 24 },\n            { name: 'Won', month: 'Aug.', value: 35 },\n            { name: 'Lost', month: 'Jan.', value: 12 },\n            { name: 'Lost', month: 'Feb.', value: 23 },\n            { name: 'Lost', month: 'Mar.', value: 34 },\n            { name: 'Lost', month: 'Apr.', value: 99 },\n            { name: 'Lost', month: 'May', value: 52 },\n            { name: 'Lost', month: 'Jun.', value: 35 },\n            { name: 'Lost', month: 'Jul.', value: 37 },\n            { name: 'Lost', month: 'Aug.', value: 42 },\n          ],\n          success: true,\n        }),\n    ```", "```js\n    import * as faker from 'faker';\n    import { Opportunity, Activity } from '@/types/opportunity.d';\n    import { Request, Response } from 'express';\n    const opportunity: Opportunity[] = [];\n    const activities: Activity[] = [];\n    for (let index = 0; index < 5; index++) {\n      activities.push({\n        id: index,\n        type: faker.datatype.number({ max: 3, min: 0,\n          precision: 1 }),\n        schedule: faker.date.recent(),\n        createdBy: faker.name.findName(),\n        summary: faker.lorem.words(6),\n      });\n    }\n    for (let index = 0; index < 30; index++) {\n      opportunity.push({\n        id: index,\n        topic: faker.commerce.productName(),\n        customer: {\n          id: index,\n          name: faker.name.findName(),\n          company: faker.company.companyName(),\n          phone: faker.phone.phoneNumber(),\n          role: faker.name.jobTitle(),\n          email: faker.internet.email(),\n        },\n        budget: faker.finance.amount(100000),\n        status: faker.datatype.number({ max: 3, min: 0, \n          precision: 1 }),\n      });\n    }\n    ```", "```js\n    const listOpportunities = (req: Request, res: Response) => {\n      const { slice } = req.query;\n      res.send({\n        data: opportunity.slice(0, slice ? Number(slice) :\n          undefined),\n        success: true,\n      });\n    };\n    const getOpportunity = (req: Request, res: Response) => {\n      const { opportunityId } = req.query;\n      res.send(opportunity[Number(opportunityId)]);\n    };\n    ```", "```js\n    export default {\n      '/api/opportunity/list': listOpportunities,\n      '/api/opportunity': getOpportunity,\n      '/api/opportunity/activities': (_: any, res:\n     Response) =>\n        res.send({ data: activities, success: true }),\n      'POST /api/opportunity': (_: any, res: Response) =>\n        res.status(201).send({ success: true }),\n      'PUT /api/opportunity/disable': (_: any, res:\n     Response) =>\n        res.send({ success: true }),\n      'PUT /api/opportunity': (_: any, res: Response) =>\n        res.send({ success: true }),\n    };\n    ```", "```js\nrequest<Product>('/api/products', {\n  method: 'POST',\n  headers: { Authorization: 'Bearer eyJhbGciOi...' },\n  params: { onSale: true },\n  data: {\n    id: 0,\n    title: 'My product',\n    price: 10.0,\n  },\n});\n```", "```js\n    import { HistoryByMonth, LeadsSource, TopOpportunity, } from '@/types/analytics';\n    import { request } from 'umi';\n    export function getTopOpportunities() {\n      return request<{ data: TopOpportunity[]; \n        success: boolean }>(\n        `/api/analytics/top/opportunity`,\n        {\n          method: 'GET',\n        },\n      );\n    }\n    export function getLeadsBySource() {\n      return request<{ data: LeadsSource[]; \n        success: boolean }>(\n        `/api/analytics/leads/source`,\n        {\n          method: 'GET',\n        },\n      );\n    }\n    export function getHistoryByMonth() {\n      return request<{ data: HistoryByMonth[]; \n        success: boolean }>(\n        `/api/analytics/bymonth/opportunity`,\n        {\n          method: 'GET',\n        },\n      );\n    }\n    ```", "```js\n    const [leadsBySource, setLeadsBySource] = \n      useState<LeadsSource[]>([]);\n    const [historyByMonth, setHistoryByMonth] = \n      useState<any[]>([]);\n    const [topOpp, setTopOpp] = \n      useState<TopOpportunity[]>([]);\n    useEffect(() => {\n      const fetchTopOpp = async () => {\n        setTopOpp((await getTopOpportunities()).data);\n      };\n      const fetchLeadsBySource = async () => {\n        setLeadsBySource((await getLeadsBySource()).data);\n      };\n      const fetchHistoryByMonth = async () => {\n        setHistoryByMonth((await \n                           getHistoryByMonth()).data);\n      };\n      fetchHistoryByMonth();\n      fetchLeadsBySource();\n      fetchTopOpp();\n    }, []);\n    ```", "```js\n    import { useState, useEffect } from 'react';\n    import {\n      getHistoryByMonth,\n      getLeadsBySource,\n      getTopOpportunities,\n    } from '@/services/analytics';\n    ```", "```js\n    import { Customer } from '@/types/customer';\n    import { request } from 'umi';\n    export function listCustomers(params?: any) {\n      return request<{ data: Customer[]; success: boolean \n        }>(`/api/customer/list`, {\n        method: 'GET',\n        params,\n      });\n    }\n    export function createCustomer(customer: Customer) {\n      return request<{ success: boolean \n        }>(`/api/customer`, {\n        method: 'POST',\n        data: customer,\n      });\n    }\n    export function disableCustomer(customerId?: string) {\n      return request<{ success: boolean \n        }>(`/api/customer/disable`, {\n        method: 'PUT',\n        params: { customerId },\n      });\n    }\n    export function updateCustomer(customer: Customer) {\n      return request<{ success: boolean \n        }>(`/api/customer`, {\n        method: 'PUT',\n        data: customer,\n      });\n    }\n    ```", "```js\n    import { listCustomers } from '@/services/customer';\n    ```", "```js\n    request={listCustomers}\n    ```", "```js\n    import { Opportunity, Activity } from '@/types/opportunity';\n    import { request } from 'umi';\n    export function listOpportunities(params?: any) {\n      return request<{ data: Opportunity[];\n        success: boolean }>(\n        `/api/opportunity/list`,\n        {\n          method: 'GET',\n          params,\n        },\n      );\n    }\n    export function listActivities(params?: any) {\n      return request<{ data: Activity[]; \n        success: boolean }>(\n        `/api/opportunity/activities`,\n        {\n          method: 'GET',\n          params,\n        },\n      );\n    }\n    export function getOpportunity(params?: any) {\n      return request<Opportunity>(`/api/opportunity`, {\n        method: 'GET',\n        params,\n      });\n    }\n    ```", "```js\n    export function createOpportunity(opportunity: Opportunity) {\n      return request<{ success: boolean \n        }>(`/api/opportunity`, {\n        method: 'POST',\n        data: opportunity,\n      });\n    }\n    export function disableOpportunity(opportunityId?: string) {\n      return request<{ success: boolean \n        }>(`/api/opportunity/disable`, {\n        method: 'PUT',\n        params: { opportunityId },\n      });\n    }\n    export function updateOpportunity(opportunity: Opportunity) {\n      return request<{ success: boolean \n        }>(`/api/opportunity`, {\n        method: 'PUT',\n        data: opportunity,\n      });\n    }\n    ```", "```js\n    import { listOpportunities } from '@/services/opportunity';\n    ```", "```js\n    request={listOpportunities}\n    ```", "```js\n    import { useEffect, useState } from 'react';\n    import { getOpportunity, listActivities } from '@/services/opportunity';\n    ```", "```js\n    const [opportunity, setOpportunity] = \n      useState<Opportunity>();\n    useEffect(() => {\n      const fetchOpportunity = async () => {\n        setOpportunity(await getOpportunity({ \n          opportunityId: id }));\n      };\n      fetchOpportunity();\n    }, [])\n    ```", "```js\n    dataSource={opportunity}\n    ```", "```js\n    request={listActivities}\n    ```", "```js\n    current={opportunity?.status}\n    ```", "```js\nconst { currentUser } = useModel('user');\n```", "```js\n    import { useCallback, useState } from 'react';\n    import { Customer } from '@/types/customer';\n    import {\n      disableCustomer,\n      updateCustomer,\n      createCustomer,\n    } from '@/services/customer';\n    export interface CustomerModel {\n      disable: (customerId: string) => void;\n      update: (customer: Customer) => void;\n      create: (customer: Customer) => void;\n      clearResult: () => void;\n      result: { success?: boolean };\n    }\n    ```", "```js\n    export default (): CustomerModel => {\n      const [result, setResult] = useState<{\n        success?: boolean }>({\n        success: false,\n      });\n      const disable = useCallback(async (\n        customerId?: string) => {\n        setResult(await disableCustomer(customerId));\n      }, []);\n      const update = useCallback(async (\n        customer: Customer) => {\n        setResult(await updateCustomer(customer));\n      }, []);\n      const create = useCallback(async (\n        customer: Customer) => {\n        setResult(await createCustomer(customer));\n      }, []);\n      const clearResult = useCallback(() => setResult({ \n        success: false }), []);\n      return { disable, update, create, clearResult, \n        result };\n    };\n    ```", "```js\n    const { disable, update, clearResult, result } = \n      useModel('customer');\n      const { formatMessage } = useIntl();\n      useEffect(() => {\n        if (result?.success) {\n          message.success(formatMessage({ \n            id: 'messages.success.operation' }));\n          clearResult();\n        }\n      }, [result]);\n    ```", "```js\n    editable={{\n      type: 'multiple',\n      deletePopconfirmMessage: <FormattedMessage \n        id=\"table.confirm\" />,\n      deleteText: <FormattedMessage id=\"table.disable\" />,\n      onDelete: async (key) => disable(key as string),\n      onSave: async (_, record) => update(record),\n    }}\n    ```", "```js\n    'table.disable': 'Disable',\n    'table.confirm': 'Do you want to disable the record?',\n    ```"]