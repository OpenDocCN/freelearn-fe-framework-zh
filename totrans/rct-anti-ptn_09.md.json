["```js\nconst Title = () => <div>Title │ This is a title</div>\n```", "```js\nconst Title = ({ title }: { title: string }) => <div>Title │ {title}</div>;\n```", "```js\nconst Title = ({\n  title,\n  transformer,\n}: {\n  title: string;\n  transformer: (s: string) => string;\n}) => <div>Title │ {transformer(title)}</div>;\n```", "```js\nconst Title = ({\n  title,\n  render,\n}: {\n  title: string;\n  render: (s: string) => React.ReactNode;\n}) => <div>{render(title)}</div>;\n```", "```js\n<Title\n  title=\"This is a title\"\n  render={(s: string) => {\n    const formatted = s.toUpperCase();\n    return <h3>{formatted}</h3>;\n  }}\n/>\n```", "```js\nconst Title = ({\n  title,\n  children,\n}: {\n  title: string;\n  children: (s: string) => React.ReactNode;\n}) => <div>{children(title)}</div>;\n```", "```js\n<Title title=\"This is a title\">\n  {(s: string) => {\n    const formatted = s.toUpperCase();\n    return <h3>{formatted}</h3>;\n  }}\n</Title>\n```", "```js\nimport Tooltip from \"@xui/tooltip\";\ntype AvatarProps = {\n  name?: string;\n  url: string;\n};\nconst Avatar = ({ name, url }: AvatarProps) => {\n  if (name) {\n    return (\n      <Tooltip content={name}>\n        <div className=\"rounded\">\n          <img src={url} alt={name} />\n        </div>\n      </Tooltip>\n    );\n  }\n  return (\n    <div className=\"rounded\">\n      <img src={url} alt=\"\" />\n    </div>\n  );\n};\n```", "```js\nconst Avatar = ({ name = \"\", url }: AvatarProps) => (\n  <div className=\"rounded\">\n    <img src={url} alt={name} title={name} />\n  </div>\n);\n```", "```js\nimport Avatar from \"@xui/avatar\";\nimport Tooltip from \"@xui/tooltip\";\nconst MyAvatar = (props) => (\n  <Tooltip\n    content=\"Juntao Qiu\"\n  >\n    <Avatar\n      name=\"Juntao Qiu\"\n      url=\"https://avatars.githubusercontent.com/u/122324\"\n    />\n  </Tooltip>\n);\n```", "```js\nclass EmailNotification {\n  send(message: string, type: string) {\n    console.log(`Sending email with message: ${message}, type: ${type}`);\n  }\n}\nclass Application {\n  private emailNotification: EmailNotification;\n  constructor(emailNotification: EmailNotification) {\n    this.emailNotification = emailNotification;\n  }\n  process() {\n    // perform some actions to response user interaction\n    this.emailNotification.send(\"Some events happened\", \"info\");\n  }\n}\nconst app = new Application(new EmailNotification());\napp.process();\n```", "```js\ninterface Notification {\n  send(message: string, type: string): void;\n}\nclass EmailNotification implements Notification {\n  send(message: string, type: string) {\n    console.log(`Sending email with message: ${message}, type: \n     ${type}`);\n  }\n}\nclass Application {\n  private notifier: Notification;\n  constructor(notifier: Notification) {\n    this.notifier = notifier;\n  }\n  process() {\n    // perform some actions to response user interaction\n    this.notifier.send(\"Some event happened\", \"info\");\n  }\n}\n```", "```js\nconst app = new Application(new EmailNotification());\napp.process();\n// or\nconst app = new Application(new SMSNotification());\napp.process();\n```", "```js\nconst Button = ({ onClick: provided, name, ...rest }: ButtonProps) => {\n  const onClick = (e) => {\n    // emit an event to the analytic server\n    return provided(e);\n  };\n  return <button onClick={onClick} {...rest} />;\n};\n```", "```js\nimport { Button } from \"@xui/button\";\nconst FancyButton = ({\n  onClick: originalOnClick,\n  ...rest\n}: FancyButtonProps) => {\n  const onClick = (e) => {\n    //emit an event to the analytic server\n    console.log('sending analytics event to a remote server');\n    return originalOnClick(e);\n  };\n  return <Button onClick={onClick} {...rest} />;\n};\n```", "```js\nimport { createContext } from \"react\";\nexport interface InteractionMeasurement {\n  measure(name: string | undefined, timestamp?: number): void;\n}\nexport default createContext<InteractionMeasurement | null>(null);\n```", "```js\nimport InteractionContext, {\n  InteractionMeasurement\n} from \"./InteractionContext\";\nconst Button = ({ name, onClick: providedOnClick, children }: ButtonType) => {\n  const interactionContext = useContext<InteractionMeasurement | \n   null>(\n    InteractionContext\n  );\n  const handleClick = useCallback(\n    (e) => {\n      interactionContext &&\n      interactionContext.measure(name, e.timeStamp);\n      providedOnClick(e);\n    },\n    [providedOnClick, interactionContext, name]\n  );\n  return <button onClick={handleClick}>{children}</button>;\n};\n```", "```js\nimport InteractionContext from \"./InteractionContext\";\nimport { Button } from \"@xui/button\";\nconst FormApp = () => {\n  const context = {\n    measure: (e, t) => {\n      //send event and timestamp to remote\n      console.log(`sending to remote server  ${e}: ${t}`);\n    },\n  };\n  const onClick = () => {\n    console.log(\"submit\");\n  };\n  return (\n    <InteractionContext.Provider value={context}>\n      <form>\n        <Button name=\"submit-button\" onClick={onClick}>\n          Submit\n        </Button>\n      </form>\n    </InteractionContext.Provider>\n  );\n};\n```", "```js\nimport { Button } from \"@xui/button\";\nconst App = () => {\n  const onClick = () => {\n    console.log(\"checkout\");\n  };\n  return (\n    <Button name=\"checkout-button\" onClick={onClick}>\n      Checkout\n    </Button>\n  );\n};\n```", "```js\ntype Item = {\n  id: string;\n  name: string;\n  price: number;\n}\nconst ShoppingApplication = () => {\n  const [cart, setCart] = useState<Item[]>([]);\n  const addItemToCart = (item: Item) => {\n    setCart([...cart, item]);\n  };\n  const removeItemFromCart = (id: string) => {\n    setCart(cart.filter((item) => item.id !== id));\n  };\n  const totalPrice = cart.reduce((total, item) => total + item.price, \n   0);\n  return (\n    <div>\n      <ProductList addToCart={addItemToCart} />\n      <h2>Shopping Cart</h2>\n      <ul>\n        {cart.map((item) => (\n          <li key={item.id}>\n            {item.name} - {item.price}\n            <button onClick={() => removeItemFromCart(item.\n             id)}>Remove</button>\n          </li>\n        ))}\n      </ul>\n      <p>Total Price: {totalPrice}</p>\n    </div>\n  );\n};\n```", "```js\nconst addItemToCart = (item: Item) => {\n  setCart([...cart, { ...item, uniqKey: `${item.id}-${Date.now()}` }]);\n};\nconst removeItemFromCart = (key: string) => {\n  setCart(cart.filter((item) => item.uniqKey !== key));\n};\n```", "```js\n<h2>Shopping Cart</h2>\n<ul>\n  {cart.map((item) => (\n    <li key={item.uniqKey}>\n      {item.name} - {item.price}\n      <button onClick={() => removeItemFromCart(item.uniqKey)}>\n        Remove\n      </button>\n    </li>\n  ))}\n</ul>\n```", "```js\ntype ShoppingCartState = {\n  items: Item[];\n  totalPrice: number;\n};\ntype ActionType = {\n  type: string;\n  payload: Item;\n};\nconst shoppingCartReducer = (\n  state: ShoppingCartState = initState,\n  action: ActionType\n) => {\n  switch (action.type) {\n    case \"ADD_ITEM\": {\n      const item = {\n        ...action.payload,\n        uniqKey: `${action.payload.id}-${Date.now()}`,\n      };\n      return { ...state, items: [...state.items, item] };\n    }\n    case \"REMOVE_ITEM\":\n      const newItems = state.items.filter(\n        (item) => item.uniqKey !== action.payload.uniqKey\n      );\n      return { ...state, items: newItems };\n    default:\n      return state;\n  }\n};\n```", "```js\nconst item = {\n  id: \"p1\",\n  name: \"iPad\",\n  price: 666,\n};\nlet x = shoppingCartReducer(initState, {\n  type: \"ADD_ITEM\",\n  payload: item,\n});\nconsole.log(x);\n```", "```js\n{\n    \"items\": [\n        {\n            \"id\": \"p1\",\n            \"name\": \"iPad\",\n            \"price\": 666,\n            \"uniqKey\": \"p1-1696059737801\"\n        }\n    ],\n    \"totalPrice\": 0\n}\n```", "```js\nimport React, { createContext, useContext, useReducer } from \"react\";\nimport { Item } from \"./type\";\ntype ShoppingCartContextType = {\n  items: Item[];\n  addItem: (item: Item) => void;\n  removeItem: (item: Item) => void;\n};\nconst ShoppingCartContext = createContext<ShoppingCartContextType | null>(null);\nexport const ShoppingCartProvider = ({\n  children,\n}: {\n  children: React.ReactNode;\n}) => {\n  const [state, dispatch] = useReducer(shoppingCartReducer, {\n    items: [],\n    totalPrice: 0,\n  });\n  const addItem = (item: Item) => {\n    dispatch({type: ADD_ITEM, payload: item});\n  };\n  const removeItem = (item: Item) => {\n    dispatch({type: REMOVE_ITEM, payload: item});\n  };\n  return (\n    <ShoppingCartContext.Provider value={{items: state.items, addItem, \n     removeItem}}>\n      {children}\n    </ShoppingCartContext.Provider>\n  );\n};\n```", "```js\nexport const useTotalPrice = () => {\n  const context = useContext<ShoppingCartContextType>(\n    ShoppingCartContext\n  );\n  const {items} = context;\n  return items.reduce((acc, item) => acc + item.price, 0);\n};\n```", "```js\nconst ShoppingApplication = () => {\n  const context = useContext(ShoppingCartContext);\n  const { items, addItem, removeItem } = context;\n  const totalPrice = useTotalPrice();\n  return (\n    <div>\n      <ProductList addToCart={addItem} />\n      <h2>Shopping Cart</h2>\n      <ul>\n        {items.map((item) => (\n          <li key={item.uniqKey}>\n            {item.name} - {item.price}\n            <button onClick={() => removeItem(item)}>Remove</button>\n          </li>\n        ))}\n      </ul>\n      <p>Total Price: {totalPrice}</p>\n    </div>\n  );\n};\n```", "```js\n<ShoppingCartProvider>\n  <ShoppingApplication />\n</ShoppingCartProvider>\n```"]