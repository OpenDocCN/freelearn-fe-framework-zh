- en: Creating a User Profile Page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will write a user profile component. We will cover **RxJS**
    (**ReactiveX**), which is a popular library for asynchronous programming. In this
    section, we will use the `Observable` of RxJS to pass the domain model from the
    component of the authentication module to the component of the user module. We
    will use this passed user model to populate the user profile component. We will
    edit the user data and update the Firebase authentication and database. As a part
    of edit, we will implement a reusable edit component, which uses bootstrap modal
    for taking user input. Finally, we will see the Firebase session token's life
    cycle when the password is changed.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to RxJS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Passing data between module components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to SASS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a user profile component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enhancing services for the update operation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an edit dialog component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Firebase session for the update operation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to RxJS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: RxJS is a popular library for asynchronous and event-based programming. In this
    section, we will cover only the basics about this library so that you understand
    the real reason for using this library. For more details, you can refer to the
    official site of RxJS at [http://reactivex.io/rxjs/](http://reactivex.io/rxjs/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are a few of this library''s key terms:'
  prefs: []
  type: TYPE_NORMAL
- en: '`observable`: This is a collection of values or events that can be consumed.
    For example, `observable` could be a collection of an array of numbers:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '`subscription`: To read data from the `observable`, we subscribe and then the
    event or values are delivered using observer:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '`subject`: This is an extension of the observable and is used to broadcast
    events or values to multiple observers. This example will be covered in our application''s
    use case. This is a very basic understanding of the RxJS library.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Passing data between module components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have completed our authentication module in the preceding chapter. In this
    section, we will cover passing data between module components, which is an important
    part of our application development. While implementing a web application, we
    always face the problem of how to pass data from one component module to another
    component module. Our initial thought will be to store the model in a common application
    class, such as a singleton class, and then retrieve it in other components. Angular
    provides many ways to pass the data, and we have already touched upon Angular
    binding. This method is useful when we have components with a parent-child relationship
    in the same module.
  prefs: []
  type: TYPE_NORMAL
- en: Singleton class is a software design pattern that restricts the instantiation
    of class to one object. This single object is available to all the components
    of the application.
  prefs: []
  type: TYPE_NORMAL
- en: We use `subject` of the RxJS library in the `service` class to pass the data
    to the component of the different module. This design helps to create an independent
    module.
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the following steps to pass the data from authentication module to
    user module:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Store user model**: The first step is to store the data using `subject` in
    the `service` class. We store the user model in the user service. We use `BehaviorSubject`,
    which is an extension of the `subject` class to store the user model.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The behavior subject of RxJS emits the latest data to the subscriber.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We save the user model in `subject`. We call this method from the Login and
    Sign up component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**Create method in service class**: We can create `getSavedUser()` in the `UserService`
    class. This method returns the `subject`, and the caller needs to subscribe or
    use the `getValue()` method to retrieve the saved `User` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**Retrieve user model in component class**: We can retrieve the value from
    the `subject` using the `getValue()` method. You can also subscribe and retrieve
    the user model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the complete `user.service.ts` as of now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Introduction to SASS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**SASS** (**Systematically Awesome Style Sheets**) is a CSS preprocessor, which
    adds more functionality to the existing CSS. It helps to add variables, nested
    rules, mixins, inheritance, and many more. This feature helps to organize our
    style sheets in a more systematic way.'
  prefs: []
  type: TYPE_NORMAL
- en: 'SASS provides two flavors:'
  prefs: []
  type: TYPE_NORMAL
- en: SASS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SCSS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'SASS is the older of the two syntaxes, and SCSS is the more commonly used one.
    In this book, we have used the SCSS format. A few of the supported features are
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Partial**: Partial is a reusable CSS element, which can be included in other
    SCSS files. This helps to modularize our CSS into smaller reusable elements across
    SCSS files. A partial filename contains a leading underscore so that the compiler
    knows that this is a partial file and does not convert to a CSS file, for example, `_shared.scss`.
    We can import a partial file into other components using the `@import` directive.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following is an example to include a partial in other SCSS files, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '**Extend**: This is similar to inheritance in high-level programming languages.
    We will write CSS properties in the common class selector and then extend this
    in other class selectors.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following is an example of `@extend`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '**Mixin**: This is used to group declarations that can be used throughout our
    application. This is similar to method signature in a class:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Creating a user profile component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will create a user profile component. After a successful
    login or signup, the user is directed to their profile page. This component displays
    the user information, such as name and email, and provides edit functionalities
    to change user information. The following are the steps to create a user profile
    component:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Creating a user profile template**: The first step is to create the template
    for the user profile page. In this template, we will display the name, email,
    mobile, and password. Each of these pieces of information has an Edit button.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'First, we create a `div` container that contains all the user information elements.
    We use `*ngIf` to check the user data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Second, we create `div` for each of the user information in `div` with `label`,
    `user.name`, and `Edit` buttons:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the complete `user-profile.component.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'User information is aligned using the style sheets. We use nesting of SCSS
    for class selector from the container to the child selectors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the complete `user-profile.component.scss` code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '**Creating the user profile component**: We will define our logic to retrieve
    the user model and handle the events in the component.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The first step is to retrieve the user model from the `service` class. We implement
    an `onInit` interface and override `ngOnInit` to retrieve the user model, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '`OnInit` is a life cycle hook interface, which is managed by Angular framework.
    It has a `ngOnInit()` method, which is called when the component and the directive
    are fully initialized.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the complete `user-profile.component.ts` as of now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Our user profile page view should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00023.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Enhancing services for update operation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will enhance our existing services to provide updates for
    user information. As a part of this exercise, we will discus how to update the
    Firebase authentication and database.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will update the following user information:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Username**: This data is stored in the Firebase database, so we add new `update`
    API to perform this operation. We add the `updateName()` method in our user service
    and update the stored user data in Firebase:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '**User email**: This data is stored in the Firebase authentication and database,
    so we will need to update it in both places.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We will need to add a `changeEmail()` method in our authentication service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Once this has been done in the authentication service, we can update a new
    email in our Firebase database using user services:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Now editing the mobile password is the same as the  preceding code, and you
    can follow the following code. The updated version of `authentication.service.ts`
    and `user.service.ts` is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the updated `user.service.ts` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Creating an edit dialog component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The edit dialog component is used to take user input to update user information
    in Firebase. The same component is reused to take the information of all other
    user details, such as name, email, mobile, and password. This component is included
    in the user profile component, and the edit dialog box appears when a user clicks
    on the Edit button.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the steps involved in creating an edit `dialog` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Creating the edit dialog template**: The first step is to create the template
    for the edit dialog. This template contains a header, title for the text, and
    an input box.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We use bootstrap modal to create an edit dialog. It has an input box to receive
    the user input.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step is to create the `div` container with an `isVisible` condition, and
    this variable changes dynamically when the user clicks on the Edit button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'We use form element to take the user input, which has a `submit` button, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Because the preceding template is also used for different editing purposes,
    we will need to dynamically change the text of the header, title, and so on. We
    can use a one-way Angular binding to assign a variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the complete `edit-dialog.component.html` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '**Creating an edit dialog component**: This component takes a variable input
    from the user profile component when the user clicks on the Edit button. It takes
    a user input in the dialog box and passes it to the `EditDetails` class to update
    the information.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will use builder pattern to take input variables from `UserProfileComponent`.
  prefs: []
  type: TYPE_NORMAL
- en: Builder pattern is a creational pattern that is used to create complex objects.
    This is basically used when a constructor in a class accepts many parameters.
    This reduces the complexity of the constructor.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our case, we will need parameters to dynamically change the title, `label`.
    We will create multiple methods for each variable input—for example, for title,
    we will create a `setTitle()` method and return `this`, which is the instance
    of the class. This helps in chaining the method calls in a single line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'We will then need to toggle the `isVisible` variables using the `show` and
    `hide` methods, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the complete `edit-dialog.component.ts` file as of now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '**Creating an update operation**: When a user provides the new data for updating
    and clicks on `submit`, the `onSubmit()` method is called. For each of the update
    operations, we will call `edit()` of the `EditDetails` class.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here''s the complete `edit-details.ts` file as of now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '**Using the edit dialog component**: Finally, we will use the edit dialog component
    in our user profile component. The first step will be to include this component
    in the `user-profile.component.html`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'The second step will be to initialize the edit dialog component in the `user-profile.component.ts`,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'When the user clicks on any of the Edit buttons, we will need to initialize
    the variables and call the `show()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'The following are other methods for other update operations in the `user-profile.component.ts`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we configure the edit component in our user module, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, when the user clicks on the Edit button, the following edit dialog will
    appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00024.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Firebase session for the update operation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When a user edits their email and password, Firebase asks for the user to log
    in again. Firebase throws an error when we call the `updatePassword()` method
    in `AngularFireAuth`, and this error is added for security reasons.
  prefs: []
  type: TYPE_NORMAL
- en: '`This operation is sensitive and requires recent authentication. Log in again
    before retrying this request.`'
  prefs: []
  type: TYPE_NORMAL
- en: The preceding message is shown in the alert dialog in our application, and to
    edit the email or password, we need to log out and refresh the session immediately
    and then perform the action.
  prefs: []
  type: TYPE_NORMAL
- en: The best way to enhance the user experience is to ask the user to log out using
    the popup and refresh the token. We are not implementing this behavior as a part
    of this book, so you can take this as an exercise.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Congratulations on completing this chapter! This is one of the most advanced
    chapters. We covered many important concepts related to programming paradigm.
    We discussed passing the data from one module component to another module component.
    As a part of this, we developed two independent modules using the least dependencies.
    We covered RxJS library. We developed an edit component and included it in the
    user profile component. Finally, we covered a Firebase security feature, which
    expires the session while editing sensitive information, such as an email or a
    password.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will enhance our friends application to add the user's
    friends features. We will also retrieve the list of friends and display them in
    the list. We will add pagination to navigate to the friend list.
  prefs: []
  type: TYPE_NORMAL
