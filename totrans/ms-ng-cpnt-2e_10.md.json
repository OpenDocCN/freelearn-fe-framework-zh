["```js\ndescribe('Buying items in the shop', () => { \n  it('should increase the basket count', () => { \n    // Given \n    const shop = new Shop(); \n    // When \n    shop.buy('Toothpast'); \n    shop.buy('Shampoo'); \n    // Then \n    expect(shop.basket.length).toBe(2); \n    expect(shop.basket).toContain('Toothpaste'); \n    expect(shop.basket).toContain('Shampoo'); \n  }); \n}); \n```", "```js\nng test --watch false\n```", "```js\nng test\n```", "```js\nimport {EffortsComponent} from './efforts.component';\nimport {TimeEfforts} from '../../model';\n\ndescribe('EffortsComponent', () => {\n  it('should add eight hours correctly', () => {\n    // Given\n    const hour = 3600000;\n    const component = new EffortsComponent();\n    component.efforts = {\n      estimated: 0,\n      effective: 0\n    };\n    component.outEffortsChange.subscribe((efforts: TimeEfforts) => {\n      // Then\n      expect(efforts.effective).toBe(hour * 8);\n    });\n\n    // When\n    component.addEffectiveHours(8);\n  });\n});\n```", "```js\nclass Calculator { \n  multiply(a, b) { \n    return a * b; \n  } \n\n  pythagorean(a, b) { \n    return Math.sqrt(this.multiply(a, a) + this.multiply(b, b)); \n  } \n} \n```", "```js\ndescribe('Calculator pythagorean function', () => { \n  it('should call multiply function correctly', () => { \n    // Given \n    const calc = new Calculator(); \n    spyOn(calc, 'multiply').and.callThrough(); \n    // When \n    const result = calc.pythagorean(6, 8); \n    // Then \n    expect(result).toBe(10); \n    expect(calc.mul).toHaveBeenCalled(); \n    expect(calc.mul.calls.count()).toBe(2); \n    expect(calc.mul.calls.argsFor(0)).toEqual([6, 6]); \n    expect(calc.mul.calls.argsFor(1)).toEqual([8, 8]); \n  }); \n}); \n```", "```js\nimport {EffortsComponent} from './efforts.component';\n\ndescribe('EffortsComponent', () => {\n  it('should add eight hours correctly', () => {\n    // Given\n    const hour = 3600000;\n    const component = new EffortsComponent();\n    component.efforts = {\n      estimated: 0,\n      effective: 0\n    };\n spyOn(component.outEffortsChange, 'emit');\n\n    // When\n    component.addEffectiveHours(8);\n\n    // Then\n expect(component.outEffortsChange.emit).toHaveBeenCalledWith({\n estimated: 0,\n effective: hour * 8\n });\n  });\n});\n```", "```js\n…\nimport { getTestBed } from '@angular/core/testing';\nimport {\n  BrowserDynamicTestingModule,\n  platformBrowserDynamicTesting\n} from '@angular/platform-browser-dynamic/testing';\n\n…\n\ngetTestBed().initTestEnvironment(\n  BrowserDynamicTestingModule,\n  platformBrowserDynamicTesting()\n);\n…\n```", "```js\nimport {DOCUMENT} from '@angular/common';\nimport {inject} from '@angular/core/testing';\n\ndescribe('Application initialized with test providers', () => {\n  it('should inject document', inject([DOCUMENT], (document) => {\n expect(document).toBe(window.document);\n }));\n});\n```", "```js\ndescribe('Async test', () => { \n  it('should be completed by calling done', (done) => { \n    setTimeout(() => { \n      expect(true).toBe(true); \n      done(); \n    }, 2000); \n  }); \n}); \n```", "```js\nimport {describe, expect, it, inject, async} from '@angular/core/testing'; \nimport {DOCUMENT} from '@angular/platform-browser'; \n\ndescribe('Application initialized with test providers', () => {\n  it('should inject document', async(inject([DOCUMENT], (document) => {\n    setTimeout(() => {\n      expect(document).toBe(window.document);\n    }, 2000);\n  })));\n});\n```", "```js\nimport {Component} from '@angular/core';\nimport {TestBed, async} from '@angular/core/testing';\n\n@Component({\n  selector: 'mac-dummy',\n  template: 'dummy'\n})\nclass DummyComponent {}\n\ndescribe('DummyComponent', () => {\n  beforeEach(async(() => {\n    TestBed.configureTestingModule({\n      declarations: [DummyComponent],\n    }).compileComponents();\n  }));\n\n  it('should render its view correctly', async(() => {\n    const fixture = TestBed.createComponent(DummyComponent);\n    expect(fixture.nativeElement.textContent).toBe('dummy');\n  }));\n}); \n```", "```js\n@Component({\n  selector: 'mac-child',\n  template: '<ul><li *ngFor=\"let n of numbers\">Item: {{ n }}</li></ul>'\n})\nclass ChildComponent {\n  @Input() numbers;\n}\n\n@Component({\n  selector: 'mac-parent',\n  template: '<mac-child [numbers]=\"numbers\"></mac-child>'\n})\nclass ParentComponent {\n  numbers = [1, 2, 3];\n}\n```", "```js\n@Component({\n  selector: 'mac-child',\n  template: '{{ numbers.toString() }}'\n})\nclass MockChildComponent {\n  @Input() numbers;\n}\n```", "```js\ndescribe('ParentComponent', () => {\n  beforeEach(async(() => {\n    TestBed.configureTestingModule({\n      declarations: [\n        ParentComponent,\n        MockChildComponent\n      ],\n    }).compileComponents();\n  }));\n\n  it('should pass numbers to child correctly', async(() => {\n    const fixture = TestBed.createComponent(ParentComponent);\n    fixture.detectChanges();\n    expect(fixture.nativeElement.textContent).toBe('1,2,3');\n  }));\n}); \n```", "```js\n@Injectable()\nclass NumbersService {\n  numbers = [1, 2, 3, 4, 5, 6];\n}\n\n@Component({\n  selector: 'mac-numbers',\n  template: '{{ numbers.toString() }}'\n})\nclass NumbersComponent {\n  numbers: number[];\n\n  constructor(numbersService: NumbersService) {\n    this.numbers = numbersService.numbers;\n  }\n}\n```", "```js\n@Injectable()\nclass MockNumbersService {\n  numbers = [1, 2, 3];\n}\n```", "```js\ndescribe('NumbersComponent', () => {\n  beforeEach(async(() => {\n    TestBed.configureTestingModule({\n      declarations: [NumbersComponent],\n      providers: [{\n        provide: NumbersService,\n        useClass: MockNumbersService\n      }]\n    }).compileComponents();\n  }));\n\n  it('should render numbers correctly', async(() => {\n    const fixture = TestBed.createComponent(NumbersComponent);\n    fixture.detectChanges();\n    expect(fixture.nativeElement.textContent).toBe('1,2,3');\n  }));\n});\n```", "```js\ndescribe('NumbersComponent', () => {\n  beforeEach(async(() => {\n TestBed.configureTestingModule({\n declarations: [NumbersComponent],\n providers: [NumbersService]\n });\n TestBed.overrideProvider(NumbersService, {useValue: new MockNumbersService()});\n TestBed.compileComponents();\n  }));\n\n  it('should render numbers correctly', async(() => {\n    const fixture = TestBed.createComponent(NumbersComponent);\n    fixture.detectChanges();\n    expect(fixture.nativeElement.textContent).toBe('1,2,3');\n  }));\n});\n```", "```js\nimport {Component, EventEmitter, Input, Output} from '@angular/core';\nimport {TestBed, async, ComponentFixture} from '@angular/core/testing';\nimport {EffortsComponent} from './efforts.component';\nimport {EffortsTimelineComponent} from '../efforts-timeline/efforts-timeline.component';\n\n@Component({\n selector: 'mac-duration',\n template: '{{ duration }}'\n})\nclass MockDurationComponent {\n @Input() duration: number;\n @Output() outDurationChange = new EventEmitter<number>();\n}\n\ndescribe('EffortsComponent', () => {\n  let fixture: ComponentFixture<EffortsComponent>;\n\n beforeEach(async(() => {\n TestBed.configureTestingModule({\n declarations: [\n EffortsComponent,\n MockDurationComponent,\n EffortsTimelineComponent\n ],\n }).compileComponents();\n fixture = TestBed.createComponent(EffortsComponent);\n }));\n\n  …\n});\n```", "```js\n…\n\ndescribe('EffortsComponent', () => {\n  …\n\n  it('should render initial efforts correctly', () => {\n    // Given\n    const component = fixture.componentInstance;\n    component.efforts = {\n      estimated: 1,\n      effective: 2\n    };\n\n    // When\n    fixture.detectChanges();\n\n    // Then\n    expect(fixture.nativeElement.textContent).toBe('Estimated:1Effective:2+1h+4h+1d');\n  });\n\n  …\n\n});\n```", "```js\nexpect(fixture.nativeElement.querySelector('mac-duration').textContent.trim()).toBe('1'); \n```", "```js\n…\nimport {By} from '@angular/platform-browser';\n…\n\ndescribe('EffortsComponent', () => {\n  …\n\n  it('should render initial efforts correctly', () => {\n    // Given\n    const component = fixture.componentInstance;\n    component.efforts = {\n      estimated: 1,\n      effective: 2\n    };\n    const [estimatedDurationElement, effectiveDurationElement] = fixture.debugElement\n .queryAll(By.directive(MockDurationComponent));\n\n    // When\n    fixture.detectChanges();\n\n    // Then\n expect(estimatedDurationElement.nativeElement.textContent).toBe('1');\n expect(effectiveDurationElement.nativeElement.textContent).toBe('2');\n  });\n\n  …\n\n});\n```", "```js\n  it('should add one day of effective efforts on button click', () => {\n    // Given\n    const day = 3600000 * 8;\n    const component = fixture.componentInstance;\n    component.efforts = {\n      estimated: 0,\n      effective: 0\n    };\n    const addDayButton = fixture.debugElement\n      .queryAll(By.css('button'))[2];\n    spyOn(component.outEffortsChange, 'emit');\n\n    // When\n    addDayButton.triggerEventHandler('click', null);\n\n    // Then\n    expect(component.outEffortsChange.emit).toHaveBeenCalledWith({\n      estimated: 0,\n      effective: day\n    });\n  });\n```"]