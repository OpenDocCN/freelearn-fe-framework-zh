- en: Chapter 2. Working with Bootstrap Components
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章。使用Bootstrap组件
- en: In the world of web designing and development, we have heard a lot about **Twitter
    Bootstrap 3** . The hero of our days is **Bootstrap 4** , a CSS framework that
    ultimately helps to design web applications easier and faster.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在网页设计和开发领域，我们听说过很多关于**Twitter Bootstrap 3**。我们今天的英雄是**Bootstrap 4**，这是一个CSS框架，最终帮助设计网页应用更容易更快。
- en: 'In this chapter, I will explain how you can start using Bootstrap 4 by showcasing
    a demo layout page, and how you can explore the framework and customize it to
    your requirements. At the end of the chapter, you will have a solid understanding
    of the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我将解释如何通过展示演示布局页面来开始使用Bootstrap 4，以及如何探索框架并根据您的要求进行自定义。在本章结束时，您将对以下内容有扎实的理解：
- en: How to use **Syntactically Awesome Style Sheets** ( **Sass** )
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用**Sass**（**Syntactically Awesome Style Sheets**）
- en: How to add Bootstrap 4 into your project
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何将Bootstrap 4添加到您的项目中
- en: How to design layouts with grids and containers
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用网格和容器设计布局
- en: How to add navigation elements
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何添加导航元素
- en: How to customize selected components
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何自定义选定的组件
- en: Bootstrap 4
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Bootstrap 4
- en: 'In the first chapter, we spoke briefly about Twitter Bootstrap 4, but it''s
    time to look at this CSS framework more closely. However, before delving deeper
    into Bootstrap 4 let''s talk about all of the newly introduced features:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一章中，我们简要谈到了Twitter Bootstrap 4，但现在是时候更仔细地看看这个CSS框架了。然而，在深入了解Bootstrap 4之前，让我们先谈谈所有新引入的功能：
- en: The source CSS files of Bootstrap 4 are based on Sass
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bootstrap 4的源CSS文件是基于Sass的
- en: The `rem` is the primary CSS unit instead of `px`
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rem`是主要的CSS单位，而不是`px`'
- en: Global font size increased from `14px` to `16px`
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 全局字体大小从`14px`增加到`16px`
- en: New grid tiers have been added for small devices (from `~480px` and below)
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的网格层级已经为小型设备（从`~480px`及以下）添加了
- en: Bootstrap 4 optionally supports **Flex Box Grid**
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bootstrap 4可选择支持**Flex Box Grid**
- en: Adds improved **Media Queries**
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了改进的**媒体查询**
- en: The new **Card** component replaces the **Panel** , **Well** , and **Thumbnail**
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的**Card**组件取代了**Panel**，**Well**和**Thumbnail**
- en: There is the new reset component called `Reboot.css`
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有一个名为`Reboot.css`的新的重置组件
- en: Everything is customizable with Sass variables
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Sass变量可以自定义一切
- en: Dropped support for IE 8 and iOS 6
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不再支持IE 8和iOS 6
- en: It no longer supports non-responsive usage
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它不再支持非响应式使用
- en: Introduction to Sass
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Sass简介
- en: If you are not familiar with Sass, I think now is the right moment to introduce
    to you that fantastic CSS preprocessing framework. It is not a secret that the
    preprocessing of a CSS file allows you to write more concise and less verbose
    stylesheets. The syntax of the first version of Sass used indentations, didn't
    require semi-colons, had shorthand operators, and used `.sass` file extension.
    It was so different from CSS that Sass version 3 started to support new formats
    with brackets, semicolons, and .`scss` file extensions. Let's compare the various
    forms to each other.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不熟悉Sass，我认为现在是介绍这个梦幻般的CSS预处理框架的合适时机。毫无疑问，对CSS文件进行预处理可以让您编写更简洁、更简洁的样式表。Sass的第一个版本的语法使用缩进，不需要分号，有简写操作符，并使用`.sass`文件扩展名。它与CSS有很大不同，以至于Sass第3版开始支持带有大括号、分号和`.scss`文件扩展名的新格式。让我们将各种形式进行比较。
- en: 'Here is a vanilla CSS style:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个原始的CSS样式：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In files with the `.sass` extension, we should use only indentation, and it
    is heavily dependent on white spaces:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在扩展名为`.sass`的文件中，我们应该只使用缩进，并且它严重依赖于空格：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In files with `.scss` extension, we use brackets and semicolons:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在扩展名为`.scss`的文件中，我们使用大括号和分号：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: It is ultimately up to you which style you prefer, but I will use the newest
    one based on `.scss` files in this book.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 最终由您决定使用哪种样式，但我将在本书中使用基于`.scss`文件的最新样式。
- en: Setting up of Ruby
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置Ruby
- en: Before you start using Sass, you will need to install Ruby, but first check
    if you already has it. Open the Terminal and type `ruby -v` .
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始使用Sass之前，你需要安装Ruby，但首先检查一下你是否已经有了。打开终端，输入 `ruby -v` 。
- en: If you don't get an error, skip install Ruby step. Otherwise, you'll install
    a fresh Ruby from the official Ruby website [https://www.ruby-lang.org/en/documentation/installation](https://www.ruby-lang.org/en/documentation/installation)
    .
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有收到错误，请跳过安装Ruby的步骤。否则，你将从官方Ruby网站[https://www.ruby-lang.org/en/documentation/installation](https://www.ruby-lang.org/en/documentation/installation)安装一个新的Ruby。
- en: Setting up of Sass
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Sass的设置
- en: After finishing the installation of Ruby, open Terminal and type the following
    commands.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 完成Ruby的安装后，打开终端并输入以下命令。
- en: 'For Windows:'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于Windows：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'For Linux and Mac:'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于Linux和Mac：
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This command will install Sass and necessary dependencies for you. Run the
    following command to check installation of Saas on your PC:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令将为你安装Sass和必要的依赖项。运行以下命令检查你的PC上是否安装了Sass：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The Sass must respond with a version number:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Sass必须以版本号做出响应：
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Bear in mind that the version of Sass installed on my computer could be different
    from yours. If these commands gave you a version number, you are ready to go with
    Sass development.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，我电脑上安装的Sass版本可能与你的不同。如果这些命令给你一个版本号，你就可以开始使用Sass进行开发了。
- en: 'Now, that we have installed Sass, we can explore its files and output them
    into CSS. You can use CLI or GUI to get you started with Sass. If you prefer a
    GUI style of development, please use one from the following list:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了Sass，我们可以探索它的文件并将它们输出为CSS。你可以使用CLI或GUI来开始使用Sass。如果你喜欢GUI风格的开发，请从以下列表中选择一个：
- en: 'CodeKit (Mac, Paid): [http://incident57.com/codekit](http://incident57.com/codekit)'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CodeKit（Mac，付费）：[http://incident57.com/codekit](http://incident57.com/codekit)
- en: 'Compass.app (Windows, Mac, Linux, Paid, Open Source): [http://compass.kkbox.com/](http://compass.kkbox.com/)'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Compass.app（Windows，Mac，Linux，付费，开源）：[http://compass.kkbox.com/](http://compass.kkbox.com/)
- en: 'Ghostlab (Web-based, Paid): [http://www.vanamco.com/ghostlab](http://www.vanamco.com/ghostlab)'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ghostlab（基于Web，付费）：[http://www.vanamco.com/ghostlab](http://www.vanamco.com/ghostlab)
- en: 'Hammer (Mac, Paid): [http://hammerformac.com](http://hammerformac.com)'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Hammer（Mac，付费）：[http://hammerformac.com](http://hammerformac.com)
- en: 'Koala (Windows, Mac, Linux, Open Source): [http://koala-app.com](http://koala-app.com)'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Koala（Windows，Mac，Linux，开源）：[http://koala-app.com](http://koala-app.com)
- en: 'LiveReload (Mac, Paid, Open Source): [http://livereload.com](http://livereload.com)'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LiveReload（Mac，付费，开源）：[http://livereload.com](http://livereload.com)
- en: 'Prepros (Windows, Mac, Linux, Paid): [https://prepros.io](https://prepros.io)'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Prepros（Windows，Mac，Linux，付费）：[https://prepros.io](https://prepros.io)
- en: 'Scout (Windows, Mac, Open Source): [https://github.com/scout-app/scout-app](https://github.com/scout-app/scout-app)'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Scout（Windows，Mac，开源）：[https://github.com/scout-app/scout-app](https://github.com/scout-app/scout-app)
- en: Personally, I prefer the Scout GUI, which runs Sass and Compass in a self-contained
    Ruby environment; it does all of the heavy lifting, so we will never have to worry
    about technical issues such as setting up Ruby.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我个人更喜欢Scout GUI，它在一个独立的Ruby环境中运行Sass和Compass；它会处理所有繁重的工作，所以我们永远不必担心设置Ruby之类的技术问题。
- en: Another interesting option I would recommend is a web-based Sass playground
    **SassMeister** which you can find at [http://www.sassmeister.com](http://www.sassmeister.com)
    . We will use it a bit in our Sass crash course.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我推荐的另一个有趣的选择是基于Web的Sass游乐场**SassMeister**，你可以在[http://www.sassmeister.com](http://www.sassmeister.com)找到。我们将在Sass速成课程中稍微使用一下它。
- en: Sass crash course
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Sass速成课程
- en: The main idea behind Sass is that we create reusable, less verbose code which
    is easy to read, and understand. Let's see what features make that happens. Please
    open the SassMeister website and prepare for our exercises.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Sass的主要理念是我们创建可重用、不冗长的易于阅读和理解的代码。让我们看看是哪些特性实现了这一点。请打开SassMeister网站，准备进行练习。
- en: Variables
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 变量
- en: 'We can create variables in Sass, especially to reuse them throughout our document.
    Acceptable values for variables include:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在Sass中创建变量，特别是为了在整个文档中重用它们。变量的可接受值包括：
- en: number
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数字
- en: string
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符串
- en: color
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 颜色
- en: 'null'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 空值
- en: list
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列表
- en: map
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 映射
- en: 'We use the `$` symbol to define a variable. Switch to SassMeister and create
    our first variables:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`$`符号来定义一个变量。切换到SassMeister并创建我们的第一个变量：
- en: '[PRE7]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The SassMeister compiles them but without output any CSS. We just define variables
    in the scope, and that is it. We need to use them in the CSS declaration to see
    the result of compilation:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: SassMeister对它们进行编译，但没有输出任何CSS。我们只是在作用域中定义变量，就是这样。我们需要在CSS声明中使用它们才能看到编译的结果：
- en: '[PRE8]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Here is the result of compilation from Sass to CSS:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这是从Sass到CSS的编译结果：
- en: '[PRE9]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Mathematical expressions
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数学表达式
- en: 'Sass allows us to use the following mathematical operators in arithmetical
    expressions:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Sass允许我们在算术表达式中使用以下数学运算符：
- en: Addition (+)
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加法（+）
- en: Subtraction (-)
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 减法（-）
- en: Division (/)
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 除法（/）
- en: Multiplication (*)
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 乘法（*）
- en: Modulo (%)
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模数（%）
- en: Equality (==)
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 相等（==）
- en: Inequality (!=)
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不相等（！=）
- en: 'Jump to SassMeister and play with some introduced mathematical operations:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 转到SassMeister并尝试一些引入的数学运算：
- en: '[PRE10]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Here is some CSS compiler code:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一些CSS编译器代码：
- en: '[PRE11]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'I would like to warn you against the use of incompatible units in mathematical
    operators. Try the following Sass code in your playground:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我想警告您不要在数学运算中使用不兼容的单位。在您的游乐场中尝试以下Sass代码：
- en: '[PRE12]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'However, multiplying two numbers of the same unit produces an invalid CSS value:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，将两个相同单位的数字相乘会产生无效的CSS值：
- en: '[PRE13]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The forward slash symbol (/) is a part of CSS shorthand properties. For example,
    here are the font declarations:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 斜杠符号（/）是CSS简写属性的一部分。例如，这里是字体声明：
- en: '[PRE14]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'It can be shortened to the following:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 它可以缩短为以下内容：
- en: '[PRE15]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'To avoid any possible issues, you should always wrap an expression that containing
    the division operator of non-variable values in parentheses such that:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免任何可能的问题，您应该始终将包含非变量值的除法运算符的表达式用括号括起来，例如：
- en: '[PRE16]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Note
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You should avoid using different units in mathematical operators.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 应避免在数学运算中使用不同的单位。
- en: Functions
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 函数
- en: 'Sass has a reach set of built-in functions and here is the address where you
    can find all of them:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: Sass有一套丰富的内置函数，您可以在以下地址找到它们：
- en: '[http://sass-lang.com/documentation/Sass/Script/Functions.html](http://sass-lang.com/documentation/Sass/Script/Functions.html)'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://sass-lang.com/documentation/Sass/Script/Functions.html](http://sass-lang.com/documentation/Sass/Script/Functions.html)'
- en: 'Here is the simplest example of the use of the `rgb($red, $green, $blue)` function.
    It creates a `color` from red, green, and blue values:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这是使用`rgb($red, $green, $blue)`函数的最简单的例子。它从红色、绿色和蓝色值创建一个`color`：
- en: '[PRE17]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Nesting
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 嵌套
- en: 'Sass allows us to have a declaration inside another declaration. In the following
    vanilla CSS code we define two statements:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: Sass允许我们在另一个声明中有一个声明。在以下原始CSS代码中，我们定义了两个语句：
- en: '[PRE18]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We have a container class and header within container style declarations. In
    Sass we can create the compact code:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个容器类和容器内的标题样式声明。在Sass中，我们可以创建紧凑的代码：
- en: '[PRE19]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Nesting makes code more readable and less verbose.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 嵌套使代码更易读，更简洁。
- en: Imports
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 导入
- en: 'Sass allows you to break styles into separate files and import them into another.
    We can use `@import` directive with or without the file extensions. There are
    two lines of code giving the same result:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: Sass允许您将样式分成单独的文件并将其导入到另一个文件中。我们可以使用`@import`指令，带有或不带有文件扩展名。有两行代码产生相同的结果：
- en: '[PRE20]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Extends
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 扩展
- en: 'If you need to inherit style from an existing one, Sass has `@extend` directive
    to help you:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要从现有样式中继承样式，Sass有`@extend`指令可以帮助您：
- en: '[PRE21]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Here is the result of how the Sass compiler properly handled the compiled code:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Sass编译器正确处理编译代码的结果：
- en: '[PRE22]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Placeholders
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 占位符
- en: 'In the case when you want to extend a declaration with a set of styles that
    don''t exist, Sass helps with the placeholder selector:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在您想要扩展不存在的一组样式声明时，Sass可以帮助使用占位符选择器：
- en: '[PRE23]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We use `%` sign to prefix a class name and with the help of `@extend` , magic
    happens. Sass doesn''t render the placeholder. It renders only the result of its
    extending elements. Here is the compiled code:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用“%”符号来给类名加前缀，并借助“@extend”，魔法就发生了。Sass不会渲染占位符，它只会渲染其扩展元素的结果。以下是编译后的代码：
- en: '[PRE24]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Mixins
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 混合
- en: 'We can create reusable chunks of CSS styles with mixins. Mixins always return
    markup code. We use the `@mixin` directive to define mixins and `@include` to
    use them in the document. You may have seen the following code quite often before:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用mixin创建可重用的CSS样式块。Mixin始终返回标记代码。我们使用“@mixin”指令来定义mixin，并使用“@include”在文档中使用它们。您可能以前经常看到以下代码：
- en: '[PRE25]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Indeed, changing the color of an element depends on states. Usually we write
    this code over and over again, but with Sass we can do it like this:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，更改元素的颜色取决于状态。通常我们一遍又一遍地写这段代码，但是使用Sass，我们可以这样做：
- en: '[PRE26]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The `&` symbol here points to the parent element, that is, to the anchor element.
    Let''s use this mixin in the following example:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的“&”符号指向父元素，即锚元素。让我们在下面的示例中使用这个mixin：
- en: '[PRE27]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Here is the mixin compiled to CSS code:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这是编译为CSS代码的mixin：
- en: '[PRE28]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Function directives
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 函数指令
- en: 'The function directive is another feature of Sass that helps to create reusable
    chunks of CSS style return values via the `@return` directive. We use the `@function`
    directive to define it:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 函数指令是Sass的另一个特性，它通过“@return”指令帮助创建可重用的CSS样式返回值块。我们使用“@function”指令来定义它：
- en: '[PRE29]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'In this function we calculate that the width of the table depends on individual
    column widths, the number of columns, and margin values:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个函数中，我们计算表的宽度取决于单独的列宽、列数和边距值：
- en: '[PRE30]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The resulting CSS code looks like this:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的CSS代码如下：
- en: '[PRE31]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'I think it''s time to leave our Sass crash course, but please don''t think
    that you know everything about it. Sass is big and incredibly powerful, so if
    you decide to continue the journey we started here, please get more information
    here: [http://sass-lang.com/documentation/file.SASS_REFERENCE.html](http://sass-lang.com/documentation/file.SASS_REFERENCE.html)
    .'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为是时候结束我们的Sass速成课程了，但请不要认为你对它了解一切。Sass非常强大，所以如果你决定继续我们在这里开始的旅程，请在这里获取更多信息：[http://sass-lang.com/documentation/file.SASS_REFERENCE.html](http://sass-lang.com/documentation/file.SASS_REFERENCE.html)。
- en: Example project
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例项目
- en: Let's talk about what web application we will develop while reading this book.
    I have decided that an e-commerce application is the best candidate to demonstrate
    the full flavor of different Bootstrap 4 components tightly in one place.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在阅读本书的同时谈谈我们将开发什么样的Web应用程序。我已经决定电子商务应用程序是展示不同Bootstrap 4组件完整风格的最佳候选人。
- en: The term e-commerce, as we think of it today, refers to the buying and selling
    of goods or services over the Internet, so we design the web application based
    on a real-world scenario. After the introduction, we will consolidate a high-level
    list of customer requirements. We will then prepare a series of mockups which
    will help you get a clearer picture of how the final application will look to
    an end-user. Finally, we will break down the customer requirements into a set
    of implementation tasks and structure the application so that the responsibilities
    and interactions among functional components are clearly defined.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 电子商务这个词，如今我们所理解的，指的是通过互联网购买和销售商品或服务，因此我们基于真实场景设计网络应用程序。在介绍之后，我们将整理出一个高层次的客户需求清单。然后，我们将准备一系列模型，这将帮助您更清楚地了解最终应用程序对最终用户的外观。最后，我们将把客户需求分解成一系列实施任务，并构建应用程序，以便清晰定义功能组件之间的责任和交互。
- en: The scenario
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 情景
- en: The Dream Bean is a small grocery store which collaborates with several local
    farms to supply organic food and produce. The store has a long-standing customer
    base and is bringing increasing profits to the area. The store has decided to
    investigate the possibility of providing an online delivery service to customers
    because a recent survey has indicated that 9% of its regular clientele has continuous
    Internet access, and 83% would be interested in using this service.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: Dream Bean是一家小型杂货店，与几家当地农场合作，供应有机食品和农产品。该店拥有长期的客户群，并为该地区带来不断增长的利润。由于最近的一项调查显示，其常客中有9%持续拥有互联网访问权限，83%有兴趣使用此服务，因此该店决定调查提供在线送货服务的可能性。
- en: The manager of the grocery store has asked you to create a website that will
    enable their customers to shop online from a broad range of devices includes cell
    phones, tablets, and desktop computers.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 杂货店经理要求您创建一个网站，使他们的客户能够从各种设备上在线购物，包括手机、平板电脑和台式电脑。
- en: Gathering customer requirements
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 收集客户需求
- en: 'Before making any design or implementation decisions, you need to collect information
    from the client; thus, after direct communication with client, we have the following
    conditions:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在做出任何设计或实施决策之前，您需要从客户那里收集信息；因此，在与客户直接沟通后，我们有以下条件：
- en: 'The customer can buy products available in the physical store. There are the
    following product categories:'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户可以购买实体店中的产品。有以下产品类别：
- en: Meat
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 肉类
- en: Seafood
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 海鲜
- en: Bakery
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 面包店
- en: Dairy
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 乳制品
- en: Fruit and vegetables
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 水果和蔬菜
- en: Take away
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带走
- en: The customer can browse all the goods or filter them by category
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户可以浏览所有商品或按类别筛选商品
- en: The customer has a virtual shopping cart
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户有一个虚拟购物车
- en: The customer can add, remove, or update item quantities in the shopping cart
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户可以在购物车中添加、删除或更新商品数量
- en: The customer can view a summary of everything
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户可以查看所有内容的摘要
- en: The customer can place an order and make payment through a secure checkout process
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户可以下订单并通过安全的结账流程付款
- en: Preparing use-cases
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备用例
- en: 'Now, when the requirements are in place, it is time to work with managers from
    the Dream Bean to gain an understanding of how the website should look and behave.
    We create a set of use-cases that describe how the customer will use the web application:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当需求确定后，是时候与Dream Bean的经理合作，了解网站应该如何展现和运作。我们创建一组用例，描述客户如何使用网络应用程序：
- en: The customer visits the welcome page and selects a product by category
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户访问欢迎页面，并按类别选择产品
- en: The customer browses products within the selected category page, then adds a
    product to shopping cart
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户在所选类别页面浏览产品，然后将产品添加到购物车中
- en: The customer clicks on the **Info** button to open a separate sheet which contains
    full information about the product and then adds a product to the shopping cart
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户点击**信息**按钮打开包含产品完整信息的单独页面，然后将产品添加到购物车
- en: The customer continues shopping and selects a different category
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户继续购物并选择不同的类别
- en: The customer adds several products from this class to the shopping cart
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户从这个类别中添加了几种产品到购物车
- en: The customer selects **View Cart** option and updates quantities for products
    in the cart
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户选择**查看购物车**选项并更新购物车中产品的数量
- en: The client verifies the shopping cart contents and proceeds to checkout
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户验证购物车内容并进行结账
- en: On the checkout page, the customer views the cost of the order and other information,
    fills in personal data, then submits the details
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在结账页面，客户查看订单成本和其他信息，填写个人数据，然后提交详细信息
- en: 'We continue to work with staff of Dream Bean and need to create mockups in
    one of the following ways:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我们继续与Dream Bean的工作人员合作，需要以以下一种方式创建模型：
- en: Using storyboard software
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用故事板软件
- en: Creating a set of wireframes
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一组线框
- en: Using paper prototyping
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用纸质原型
- en: 'I use **Balsamiq Mockups** to help me quickly create wireframes. The fully
    functional trial version of Balsamiq Mockups works for 30 days and is available
    from the official website: [https://balsamiq.com](https://balsamiq.com) .'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用**Balsamiq Mockups**来帮助我快速创建线框。Balsamiq Mockups的完全功能试用版本可用30天，并可从官方网站[https://balsamiq.com](https://balsamiq.com)下载。
- en: Welcome page
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 欢迎页面
- en: 'The welcome page is an entry point for the application. It introduces the business
    and service to the customer and enables him or her to navigate to any of the product
    categories. We add a slideshow in the middle of the welcome page, as shown here:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎页面是应用程序的入口点。它向客户介绍业务和服务，并使他/她能够导航到任何产品类别。我们在欢迎页面中间添加了一个幻灯片，如下所示：
- en: '![Welcome page](Image00009.jpg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![欢迎页面](Image00009.jpg)'
- en: The wireframe of the welcome page
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎页面的线框
- en: Products page
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 产品页面
- en: 'The products page provides a listing of all goods within the chosen category.
    From this page, a customer can view all product information, and add any of the
    listed products to his or her shopping cart. A user can also navigate to any of
    the provided categories or use the **Quick Shop** feature to search products by
    name, as shown here:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 产品页面提供了所选类别中所有商品的列表。从这个页面，客户可以查看所有产品信息，并将列出的任何产品添加到他或她的购物车中。用户还可以导航到任何提供的类别，或者使用**快速购物**功能按名称搜索产品，如下所示：
- en: '![Products page](Image00010.jpg)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![产品页面](Image00010.jpg)'
- en: The wireframe of the products page
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 产品页面的线框
- en: Products page
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 产品页面
- en: 'The products page displays information about the product. On this page the
    customer can do the following:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 产品页面显示有关产品的信息。在此页面上，客户可以执行以下操作：
- en: Check the availability of the product
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查产品的可用性
- en: Update the quantity of the product
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新产品的数量
- en: Add the product to the cart by clicking **Buy it**
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过点击“购买”将产品添加到购物车
- en: Return to the products list by clicking on **Continue Shopping**
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过点击“继续购物”返回产品列表
- en: '![Products page](Image00011.jpg)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![产品页面](Image00011.jpg)'
- en: The wireframe of the product page
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 产品页面的线框
- en: Cart page
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 购物车页面
- en: 'The cart page lists all items held in the user''s shopping cart. It displays
    product details for each item and from this page, a user can do the following:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 购物车页面列出了用户购物车中的所有物品。它显示了每件物品的产品详细信息，用户可以从这个页面执行以下操作：
- en: Remove all goodies from his or her cart by clicking **Clear Cart**
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过点击**清空购物车**来从购物车中删除所有商品
- en: Update the quantity for any listed item
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新任何列出的物品的数量
- en: Return to the products list by clicking on **Continue Shopping**
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击“继续购物”返回产品列表
- en: Proceed to checkout by clicking **Checkout**
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击**结账**继续结账
- en: 'The following is how the cart page might look:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是购物车页面可能的样子：
- en: '![Cart page](Image00012.jpg)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![购物车页面](Image00012.jpg)'
- en: The wireframe of the cart page
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 购物车页面的线框
- en: Checkout page
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结账页面
- en: 'The checkout page displays the customer details form, purchase conditions,
    and order information. The customer should fill in the form, confirm payment,
    and click on the **Submit** button to start the payment process, as shown here:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 结账页面显示客户详细信息表单、购买条件和订单信息。客户应填写表单，确认付款，并点击**提交**按钮开始付款流程，如下所示：
- en: '![Checkout page](Image00013.jpg)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![结账页面](Image00013.jpg)'
- en: The wireframe of the checkout page
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 结账页面的线框
- en: 'We have everything to initiate the journey with Angular 2 and Bootstrap 4\.
    We projected the business requirements onto mockups, and now we need to do the
    following:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经准备好使用Angular 2和Bootstrap 4开始项目。我们已经将业务需求投影到模型上，现在需要做以下事情：
- en: Open Terminal, create folder `ecommerce` and move in this folder
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端，创建名为`ecommerce`的文件夹并进入其中
- en: Copy the contents of the project from the `ecommerce-seed` folder into the new
    project
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将项目的内容从`ecommerce-seed`文件夹复制到新项目中
- en: 'Run the following script to install npm modules:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下脚本以安装npm模块：
- en: '[PRE32]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Start the **TypeScript** watcher and lite server with the following command:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令启动**TypeScript**监视器和lite服务器：
- en: '[PRE33]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: This script opens the web browser and navigates to the welcome page of the project.
    We are ready to start development.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 这个脚本会打开网页浏览器并导航到项目的欢迎页面。我们已经准备好开始开发了。
- en: Note
  id: totrans-209
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can find the source code in the `chapter_2/1.ecommerce-seed` folder.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`chapter_2/1.ecommerce-seed`文件夹中找到源代码。
- en: Designing layouts with grids and containers
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用网格和容器设计布局
- en: 'Bootstrap includes a powerful mobile-first grid system for building designs
    of all shapes and sizes, and that sounds very promising because we need to create
    several pages for our project. We will use the grid systems for creating the page
    layouts through a series of rows and columns. Since Bootstrap is developed to
    be mobile first, we use a handful of [media queries](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Media_queries)
    to create sensible breakpoints for our layouts and interfaces. These breakpoints
    are mostly based on minimum viewport widths and allow us to scale up elements
    as the viewport changes. There are three main components of the grid system, they
    are:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap包括一个强大的面向移动设备的网格系统，用于构建各种形状和大小的设计，这听起来非常有前途，因为我们需要为项目创建多个页面。我们将使用网格系统通过一系列行和列来创建页面布局。由于Bootstrap是为移动设备优先开发的，我们使用了一些[媒体查询](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Media_queries)来为我们的布局和界面创建合理的断点。这些断点主要基于最小视口宽度，并允许我们随着视口的变化而扩展元素。网格系统有三个主要组件，它们是：
- en: Container
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器
- en: Row
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 行
- en: Column
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列
- en: 'The container is the core and requires layout element in Bootstrap. There are
    two classes to create the containers for all other items:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 容器是Bootstrap中的核心和必需的布局元素。有两个类可以创建所有其他项目的容器：
- en: You can create a responsive, fixed-width container with a `container` class.
    This one doesn't have extra space on both sides of the hosting element and it's
    `max-width` property changes at each breakpoint.
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以使用`container`类创建一个响应式的固定宽度容器。这个容器在托管元素的两侧没有额外的空间，并且它的`max-width`属性在每个断点处都会改变。
- en: You can use the full-width container with a `container-fluid` class. This one
    always has 100% width of a viewport.
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以使用`container-fluid`类创建全宽度的容器。这个容器始终占据视口的100%宽度。
- en: 'To create a simple layout for our project open `app.component.html` file, and
    insert a `div` element with a `container` class inside:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 要为我们的项目创建一个简单的布局，请打开`app.component.html`文件，并在其中插入一个带有`container`类的`div`元素：
- en: '[PRE34]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'We can nest containers, but most layouts do not require that. The container
    is just a placeholder for rows, so let''s add the row inside:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以嵌套容器，但大多数布局不需要。容器只是行的占位符，所以让我们在其中添加行：
- en: '[PRE35]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The row has a `row` class, and the container can contain as many rows as you
    need.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 行具有`row`类，容器可以包含所需的行数。
- en: Note
  id: totrans-224
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: I recommend using one or several containers with all of the rows inside to wrap
    the page content and center elements on the screen.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议使用一个或多个容器，所有行都在其中，以包裹页面内容并在屏幕上居中元素。
- en: 'A row is a horizontal group of columns. It exists only for one purpose: to
    keep columns lined up correctly. We must put the substance of the page only inside
    columns and indicate the number of columns to use. Each row can contain up to
    12 of them.'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 行是列的水平组。它只存在一个目的：保持列正确对齐。我们必须将页面内容仅放在列内，并指示要使用的列数。每行最多可以包含12列。
- en: 'We can add the column to the row as a combination of a `col` class, and it
    prefixes size:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将列添加到行中，作为`col`类的组合，并且它有前缀大小：
- en: '[PRE36]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Bootstrap 4 supports five different sizes of displays, and the columns classes
    names depend on them:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap 4支持五种不同大小的显示屏，并且列类名称取决于它们：
- en: '`col-xs` : For an extra small display (screen width less than 34em or 544px)'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`col-xs`：用于超小显示屏（屏幕宽度小于34em或544px）'
- en: '`col-sm` : For a smaller display (screen width 34em or 544ps and up)'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`col-sm`：用于较小的显示屏（屏幕宽度34em或544ps及以上）'
- en: '`col-md` : For a medium display (screen width 48em or 768px and up)'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`col-md`：用于中等显示屏（屏幕宽度48em或768px及以上）'
- en: '`col-lg` : For a larger display (screen width 62em or 992px and up)'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`col-lg`：用于更大的显示屏（屏幕宽度62em或992px及以上）'
- en: '`col-xl` : For an extra large display (screen width 75em or 1200px and up)'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`col-xl`：用于超大显示屏（屏幕宽度75em或1200px及以上）'
- en: The column class names always apply to devices with screen widths greater than
    or equal to the breakpoint sizes.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 列类名称始终适用于屏幕宽度大于或等于断点大小的设备。
- en: 'The width of a column sets in percentage, so it is always fluid and sized about
    the parent element. Each column has a horizontal padding to create a space between
    individual columns. The first and last columns have negative margins, and this
    is why the content within the grid lines up with the substance outside. Here is
    an example of a grid for extra small devices:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 列的宽度设置为百分比，因此它始终是流动的，并且大小约等于父元素。每列都有水平填充，以在各列之间创建空间。第一列和最后一列有负边距，这就是为什么网格内的内容与网格外的内容对齐。这是一个针对超小设备的网格示例：
- en: '![Designing layouts with grids and containers](Image00014.jpg)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![使用网格和容器设计布局](Image00014.jpg)'
- en: 'Look at the welcome page mockup of our project and imagine splitting it into
    rows and columns:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 看看我们项目欢迎页面的示意图，并想象将其分成行和列：
- en: '![Designing layouts with grids and containers](Image00015.jpg)'
  id: totrans-239
  prefs: []
  type: TYPE_IMG
  zh: '![使用网格和容器设计布局](Image00015.jpg)'
- en: The wireframe of the welcome page
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎页面的线框图
- en: 'Our markup has a minimum of three rows. The first has a header with company
    logo and menu. It spans 12 mid-sized columns marked with `col-md-12` . I have
    used grid for now, but later I will change it to a more suitable component:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的标记至少有三行。第一行有一个带有公司标志和菜单的标题。它跨越12个中等大小的列，标记为`col-md-12`。我现在使用网格，但以后我会将其更改为更合适的组件：
- en: '[PRE37]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The second one has a single column, contains an image 1110x480px, and spans
    all 12 mid-sized columns marked with `col-md-12` like the previous one:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个有一个单独的列，包含一个1110x480px的图像，并跨越所有12个中等大小的列，标记为`col-md-12`，就像前一个一样：
- en: '[PRE38]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The last one includes the places with six product categories, and each of them
    occupies a different number of columns depending on the size of the layout:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个包括六个产品类别的位置，每个类别占据的列数取决于布局的大小：
- en: Four middle-sized columns marked with `col-md-4`
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 四个中等大小的列标记为`col-md-4`
- en: Six small columns marked as `col-sm-6`
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 六个标记为`col-sm-6`的小列
- en: Twelve extra small columns marked with `col-xs-12`
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用`col-xs-12`标记的十二个额外小的列
- en: 'The size of each image is 270x171px. The markup of the bottom part of the screen
    is quite long, so I cut it off:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 每个图像的尺寸为270x171px。屏幕底部的标记相当长，所以我把它截断了：
- en: '[PRE39]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'I intentionally added the Bootstrap class `table-bordered` to display the boundaries
    of columns. I will remove it later. Here is the result of how the website looks
    like:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 我故意添加了Bootstrap类`table-bordered`来显示列的边界。稍后我会将其移除。这是网站的外观结果：
- en: If I change the viewport to a smaller size, Bootstrap immediately transforms
    columns into rows, as you see on the preceding diagram. I didn't use real images
    on the page but pointed to [http://placehold.it](http://placehold.it) . This is
    a service on the web that generates placeholder images of specified sizes on the
    fly. The link like this [http://placehold.it/270x171](http://placehold.it/270x171)
    returns the placeholder image with 270x171px size.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我将视口更改为较小的尺寸，Bootstrap立即将列转换为行，就像您在前面的图表中看到的那样。我在页面上没有使用真实图像，而是指向了[http://placehold.it](http://placehold.it)。这是一个在网上动态生成指定尺寸占位图像的服务。像这样的链接[http://placehold.it/270x171](http://placehold.it/270x171)返回尺寸为270x171px的占位图像。
- en: Using images
  id: totrans-253
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用图像
- en: 'In our markup I used images, so pay attention to the `img-fluid` class which
    opts the image into responsive behavior:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的标记中，我使用了图像，所以请注意`img-fluid`类，它使图像具有响应式行为：
- en: '[PRE40]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The logic behind the class will never allow the image to become larger than
    the parent element. At the same time, it adds lightweight styles management via
    classes. You can easily design the shape of the picture as follow:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 该类的逻辑永远不会使图像变大于父元素。同时，它通过类轻量级地管理样式。您可以轻松地设计图片的形状如下：
- en: Rounded it with `img-rounded` class. The border radius is 0.3rem
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用`img-rounded`类使其变成圆角。边框半径为0.3rem
- en: Circle it with the help of `img-circle` , so the border radius became to 50%
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用`img-circle`来使其成为圆形，所以边框半径变成了50%
- en: Transform it with `img-thumbnail`
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用`img-thumbnail`来转换它
- en: 'In our example, the `center-block` centered the image, but you can align it
    with helper float or text alignment classes:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，`center-block`使图像居中，但您也可以使用辅助浮动或文本对齐类来对齐它：
- en: The class `pull-sm-left` floats left on small or wider devices
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pull-sm-left`类在小尺寸或更宽的设备上向左浮动'
- en: The class `pull-lg-right` floats right on large and bigger devices
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pull-lg-right`类在大尺寸和更大的设备上向右浮动'
- en: The class `pull-xs-none` prevents floating on all viewport sizes
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pull-xs-none`类防止在所有视口尺寸上浮动'
- en: Note
  id: totrans-264
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can find the source code in the `chapter_2/2.ecommerce-grid` folder.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`chapter_2/2.ecommerce-grid`文件夹中找到源代码。
- en: Now, I would like to create the plates and change them with images at the bottom
    of the page. The best one that we can use for this purposes is a **Card** component.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我想创建板块，并在页面底部用图像替换它们。我们可以用于此目的的最佳组件是**Card**。
- en: Using Cards
  id: totrans-267
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Cards
- en: 'A Card component is a very flexible and extensible content container requiring
    a small amount of markup and classes to make fantastic things. The Cards replaces
    the following elements that exist in Bootstrap 3:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: Card组件是一个非常灵活和可扩展的内容容器，只需要少量的标记和类就可以做出很棒的东西。Cards替换了Bootstrap 3中存在的以下元素：
- en: Panels
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 面板
- en: Wells
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Wells
- en: Thumbnails
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缩略图
- en: 'The simplest way to create it is to add the `card` and `card-block` classes
    to the element:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 创建它的最简单方法是向元素添加`card`和`card-block`类：
- en: '[PRE41]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The `card-block` class adds a padding space between the content and the card
    border. In my example, I moved it inside to allow the card header to line up flush
    with the card edge. If you need to, you can create a header with `card-header`
    and footer with `card-footer` classes. As your see, it includes a broad range
    of components in the Card like images, texts, list groups, and more. Here is how
    our Card component looks:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '`card-block`类在内容和卡片边框之间添加了填充空间。在我的示例中，我将其移动到内部，以使卡片标题与卡片边缘对齐。如果需要，您可以使用`card-header`创建标题和`card-footer`类创建页脚。正如您所看到的，它在卡片中包括了各种组件，如图像、文本、列表组等。这是我们的卡片组件的外观：'
- en: '![Using Cards](Image00016.jpg)'
  id: totrans-275
  prefs: []
  type: TYPE_IMG
  zh: '![使用卡片](Image00016.jpg)'
- en: But this is not only a single place where we use Card components. We will use
    them a lot in the following chapters.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 但这不是唯一使用卡片组件的地方。我们将在接下来的章节中经常使用它们。
- en: Note
  id: totrans-277
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can find the source code in the `chapter_2/3.ecommerce-cards` folder.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`chapter_2/3.ecommerce-cards`文件夹中找到源代码。
- en: Using buttons
  id: totrans-279
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用按钮
- en: 'I have added a button to the Card component, and I want to talk about it. You
    can apply the button style to the following elements:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经向卡片组件添加了一个按钮，并且我想谈谈它。您可以将按钮样式应用于以下元素：
- en: The standard `button` works correctly across all browsers.
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标准的`button`在所有浏览器中都能正常工作。
- en: The `input` element with `type="button"` .
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有`type="button"`的`input`元素。
- en: The anchor element, only behaves like a button with `role="button"` . Use it
    only to trigger in-page functionality rather than linking to new a page or section
    within the current one.
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 锚元素，只有在使用`role="button"`时才像按钮一样。仅用于触发页面功能，而不是链接到当前页面或部分内的新页面。
- en: The label when working with checkboxes and radio buttons.
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在处理复选框和单选按钮时的标签。
- en: General button styles
  id: totrans-285
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 常规按钮样式
- en: 'In Bootstrap 4, we can find seven styles for buttons and each of them for a
    different semantic purpose. The class `btn` adds style for contextual variations,
    sizes, states of buttons placed standalone, in forms, or dialogs:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 在Bootstrap 4中，我们可以找到七种按钮样式，每种都有不同的语义目的。`btn`类为独立放置、在表单中或对话框中的按钮添加了样式的上下文变化、大小和状态：
- en: '![General button styles](Image00017.jpg)'
  id: totrans-287
  prefs: []
  type: TYPE_IMG
  zh: '![常规按钮样式](Image00017.jpg)'
- en: 'The primary actions style provides an extra visual weight:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 主要行动样式提供了额外的视觉重量：
- en: '[PRE42]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The secondary, less important than primary actions style provides for reduced
    background color:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 次要的，比主要行动不太重要的样式提供了减少背景颜色的选项：
- en: '[PRE43]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'The success indicates any success operations or position actions:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 成功指示任何成功的操作或位置行动：
- en: '[PRE44]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The info is to guide users for informational actions or alerts:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 信息是为了指导用户进行信息性行动或警报：
- en: '[PRE45]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'The warning one offers warning with cautions actions:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 警告提供了警告和警告行动：
- en: '[PRE46]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'The danger indicates dangerous or potentially negative actions:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 危险指示危险或潜在的负面行动：
- en: '[PRE47]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'The link one presents a button as a link:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 链接按钮呈现为链接的按钮：
- en: '[PRE48]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Outline button styles
  id: totrans-302
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 轮廓按钮样式
- en: You can remove hefty background images and colors on any button of any predefined
    styles by replacing the default modified classes with the `.btn-outline-*`  styles.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过用`.btn-outline-*`样式替换默认修改的类来删除任何预定义样式的按钮上的沉重背景图像和颜色。
- en: '![Outline button styles](Image00018.jpg)'
  id: totrans-304
  prefs: []
  type: TYPE_IMG
  zh: '![轮廓按钮样式](Image00018.jpg)'
- en: '[PRE49]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Note
  id: totrans-306
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: There is no outline for link buttons (that is, there is no `btn-outline-link`
    class).
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 链接按钮没有轮廓（即没有`btn-outline-link`类）。
- en: Button sizes
  id: totrans-308
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 按钮尺寸
- en: 'Buttons may have small and big sizes:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 按钮可以有小号和大号：
- en: '![Button sizes](Image00019.jpg)'
  id: totrans-310
  prefs: []
  type: TYPE_IMG
  zh: '![按钮尺寸](Image00019.jpg)'
- en: 'Use `btn-sm` and `btn-lg` classes to make that happen:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`btn-sm`和`btn-lg`类来实现这一点：
- en: '[PRE50]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Block level button styles
  id: totrans-313
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 块级按钮样式
- en: 'If you planning to create block level buttons that span the full width of parent
    element, just add `btn-block` class:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您计划创建占满父元素整个宽度的块级按钮，只需添加`btn-block`类：
- en: '[PRE51]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '![Block level button styles](Image00020.jpg)'
  id: totrans-316
  prefs: []
  type: TYPE_IMG
  zh: '![块级按钮样式](Image00020.jpg)'
- en: The button with active style
  id: totrans-317
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 具有活动样式的按钮
- en: 'The pseudo-classes in button styles update the visual state of elements according
    to user actions, but if you need to change the states manually use `active` class:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 按钮样式中的伪类根据用户操作更新元素的视觉状态，但如果您需要手动更改状态，请使用`active`类：
- en: '[PRE52]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '![The button with active style](Image00021.jpg)'
  id: totrans-320
  prefs: []
  type: TYPE_IMG
  zh: '![具有活动样式的按钮](Image00021.jpg)'
- en: The button with inactive state
  id: totrans-321
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 具有非活动状态的按钮
- en: 'We can make button looks inactive with the `disabled` property:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`disabled`属性使按钮看起来不活动：
- en: '[PRE53]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '![The button with inactive state](Image00022.jpg)'
  id: totrans-324
  prefs: []
  type: TYPE_IMG
  zh: '![具有非活动状态的按钮](Image00022.jpg)'
- en: Radio buttons and checkboxes
  id: totrans-325
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 单选按钮和复选框
- en: 'Bootstrap 4 provides button styles with toggle features to `input` elements
    similar to radio buttons and checkboxes. To achieve that you need to create the
    massive construction that includes a group element, a label, and the input element
    itself:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap 4为`input`元素提供了具有切换功能的按钮样式，类似于单选按钮和复选框。为了实现这一点，您需要创建包括组元素、标签和输入元素本身的大量构造：
- en: '[PRE54]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '![Radio buttons and checkboxes](Image00023.jpg)'
  id: totrans-328
  prefs: []
  type: TYPE_IMG
  zh: '![单选按钮和复选框](Image00023.jpg)'
- en: '[PRE55]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '![Radio buttons and checkboxes](Image00024.jpg)'
  id: totrans-330
  prefs: []
  type: TYPE_IMG
  zh: '![单选按钮和复选框](Image00024.jpg)'
- en: Navs
  id: totrans-331
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导航
- en: Bootstrap 4 provides a base style for navigation elements. It exposes the base
    `nav` class that shares general mark-up and styles by extending it. All navigation
    components are built on top of this by specifying additional styles. It doesn't
    have styles for the active state. By the way, you can use these methods for disabled
    buttons.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap 4为导航元素提供了基本样式。它公开了基本的`nav`类，通过扩展它来共享一般的标记和样式。所有导航组件都是基于此构建的，通过指定额外的样式。它没有活动状态的样式。顺便说一句，您可以使用这些方法来禁用按钮。
- en: The base Nav
  id: totrans-333
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本导航
- en: 'Any **Nav** component must have the outer navigation element based on `ul`
    or `nav` elements. Here is a list-based approach displaying navigation elements
    vertically:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 任何**Nav**组件必须具有基于`ul`或`nav`元素的外部导航元素。这是一种基于列表的方法，垂直显示导航元素：
- en: '[PRE56]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '![The base Nav](Image00025.jpg)'
  id: totrans-336
  prefs: []
  type: TYPE_IMG
  zh: '![基本导航](Image00025.jpg)'
- en: 'Our mark-up can be very flexible because all components are based on classes.
    We can use `nav` with regular anchor elements to layout navigation horizontally:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的标记可以非常灵活，因为所有组件都基于类。我们可以使用`nav`与常规锚元素水平布局导航：
- en: '[PRE57]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '![The base Nav](Image00026.jpg)'
  id: totrans-339
  prefs: []
  type: TYPE_IMG
  zh: '![基本导航](Image00026.jpg)'
- en: I like this approach because it is less verbose than the list-based one.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 我喜欢这种方法，因为它比基于列表的方法更简洁。
- en: Inline navigation
  id: totrans-341
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内联导航
- en: 'You can easily add inline navigation elements with spacing horizontally as
    shown in the preceding example with the help of the `nav-inline` class:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`nav-inline`类轻松添加水平间距的内联导航元素，就像前面的示例一样：
- en: '[PRE58]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Tabs
  id: totrans-344
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选项卡
- en: 'We can quickly transform Nav components from the preceding, to generate a tabbed
    interface with the `nav-tabs` class:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以快速将前述的Nav组件转换为具有`nav-tabs`类的选项卡界面：
- en: '[PRE59]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '![Tabs](Image00027.jpg)'
  id: totrans-347
  prefs: []
  type: TYPE_IMG
  zh: '![选项卡](Image00027.jpg)'
- en: Pills
  id: totrans-348
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 药丸
- en: 'Just change `nav-tabs` to `nav-pills` to display the **pills** instead:'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 只需将`nav-tabs`更改为`nav-pills`以显示**药丸**：
- en: '[PRE60]'
  id: totrans-350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '![Pills](Image00028.jpg)'
  id: totrans-351
  prefs: []
  type: TYPE_IMG
  zh: '![药丸](Image00028.jpg)'
- en: Stacked pills
  id: totrans-352
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 堆叠的药丸
- en: 'If you need layout pills vertically, use the `nav-stacked` class:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要垂直布局药丸，请使用`nav-stacked`类：
- en: '[PRE61]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '![Stacked pills](Image00029.jpg)'
  id: totrans-355
  prefs: []
  type: TYPE_IMG
  zh: '![堆叠的药丸](Image00029.jpg)'
- en: Navigation with dropdowns
  id: totrans-356
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 带下拉菜单的导航
- en: 'You can add a drop-down menu to inline navigation, tabs, or pills by applying
    a `dropdown` class to the list item and with a little extra HTML and drop-down
    JavaScript plugins:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过将`dropdown`类应用于列表项，并使用一些额外的HTML和下拉JavaScript插件，将下拉菜单添加到内联导航、选项卡或药丸中：
- en: '[PRE62]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '![Navigation with dropdowns](Image00030.jpg)'
  id: totrans-359
  prefs: []
  type: TYPE_IMG
  zh: '![带下拉菜单的导航](Image00030.jpg)'
- en: Navbars
  id: totrans-360
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导航栏
- en: I mentioned earlier the header with company logo and menu, temporarily implemented
    as a grid. Now we change this construction to the suitable component. Please welcome
    the **Navbars** .
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 我之前提到了带有公司标志和菜单的标题，暂时实现为网格。现在我们将这个构造更改为合适的组件。请欢迎**Navbars**。
- en: The Navbar is just a simple wrapper helping to position containing elements.
    Usually, it displays as a horizontal bar, but you can configure it to collapse
    on smaller layouts.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: Navbar只是一个简单的包装器，有助于定位包含元素。通常，它显示为水平条，但您可以将其配置为在较小的布局上折叠。
- en: 'Like many other components of Bootstrap the Navbar container requires a small
    amount of markup and classes to make it work:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 与Bootstrap的许多其他组件一样，Navbar容器需要少量的标记和类来使其工作：
- en: To create one, you must use a `navbar` class in conjunction with a color scheme
  id: totrans-364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要创建一个，您必须同时使用`navbar`类和颜色方案
- en: The topmost must be a `nav` or `div` element with `role="navigation"`
  id: totrans-365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最顶部必须是带有`role="navigation"`的`nav`或`div`元素
- en: Content
  id: totrans-366
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内容
- en: 'We can include built-in sub-components to add the placeholders when necessary:'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在必要时包含内置的子组件来添加占位符：
- en: Use `navbar-brand` class for your company, product, or project name.
  id: totrans-368
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`navbar-brand`类为您的公司、产品或项目名称。
- en: Use `navbar-nav` class for full-height and lightweight navigation. It includes
    support for drop-downs as well.
  id: totrans-369
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`navbar-nav`类来实现全高度和轻量级导航。它包括对下拉菜单的支持。
- en: Use `navbar-toggler` class to organize collapsible behavior.
  id: totrans-370
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`navbar-toggler`类来组织可折叠的行为。
- en: 'Let''s use what we know about Navbar to build our header. First of all, I use
    `nav` to create the topmost element:'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们利用我们对Navbar的了解来构建我们的标题。首先，我使用`nav`来创建最顶层的元素：
- en: '[PRE63]'
  id: totrans-372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Then, I need `navbar-brand` class for the company name. We can apply this class
    to most elements, but an anchor works best:'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我需要为公司名称使用`navbar-brand`类。我们可以将此类应用于大多数元素，但锚点效果最佳：
- en: '[PRE64]'
  id: totrans-374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'At the end, I add a set of navigation links with `active` first:'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我添加了一组导航链接，首先是`active`：
- en: '[PRE65]'
  id: totrans-376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Here is our header with branding and a set of links:'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们带有品牌和一组链接的标题：
- en: '![Content](Image00031.jpg)'
  id: totrans-378
  prefs: []
  type: TYPE_IMG
  zh: '![内容](Image00031.jpg)'
- en: 'With the help of `nav` classes we can make navigation simple by avoiding the
    list-based approach entirely:'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 借助`nav`类，我们可以通过完全避免基于列表的方法来简化导航：
- en: '[PRE66]'
  id: totrans-380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Colors
  id: totrans-381
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 颜色
- en: 'You can manage the colors of Navbar very elegantly:'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以非常优雅地管理Navbar的颜色：
- en: Specify the scheme with `navbar-light` or `navbar-dark` classes
  id: totrans-383
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`navbar-light`或`navbar-dark`类来指定方案
- en: Add color values via one of the Bootstrap color classes or create your own color
    with CSS
  id: totrans-384
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过Bootstrap颜色类之一添加颜色值，或者使用CSS创建自己的颜色。
- en: 'In my example I used a light scheme and a Bootstrap faded background color.
    Let''s change it to a dark scheme and a custom color:'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的示例中，我使用了浅色方案和Bootstrap淡色背景颜色。让我们将其更改为深色方案和自定义颜色：
- en: '[PRE67]'
  id: totrans-386
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '![Colors](Image00032.jpg)'
  id: totrans-387
  prefs: []
  type: TYPE_IMG
  zh: '![颜色](Image00032.jpg)'
- en: It looks nice, but Navbar is spanning the full width of the viewport. This is
    not what managers from Dream Bean want. The header must be centered and have a
    specific size.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来不错，但Navbar横跨整个视口的宽度。这不是Dream Bean的经理们想要的。标题必须居中并具有特定的大小。
- en: Containers
  id: totrans-389
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 容器
- en: 'We will wrap our Navbar in a `container` class to center it on the page:'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在`container`类中包装我们的Navbar，以使其居中在页面上：
- en: '[PRE68]'
  id: totrans-391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '![Containers](Image00033.jpg)'
  id: totrans-392
  prefs: []
  type: TYPE_IMG
  zh: '![容器](Image00033.jpg)'
- en: 'Another correction they would like to have is that the header must be statically
    placed at top of the page. I used the `navbar-fixed-top` class to place it at
    the top of the viewport:'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个他们想要的更正是标题必须静态放置在页面顶部。我使用了`navbar-fixed-top`类将其放置在视口顶部：
- en: '[PRE69]'
  id: totrans-394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: You can use the `navbar-fixed-bottom` class to reach the same effect but at
    the bottom of the page.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`navbar-fixed-bottom`类来在页面底部达到相同的效果。
- en: 'With these last changes, the header spans the full width of the viewport again.
    To fix that issue, we need to move `container` inside `navbar` to wrap up its
    content:'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 通过最后这些更改，页眉再次跨越整个视口的宽度。为了解决这个问题，我们需要将`container`移到`navbar`内部以包装其内容：
- en: '[PRE70]'
  id: totrans-397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Our Navbar hides the part of the viewport underneath, so we need to add a padding
    to compensate this issue:'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的导航栏隐藏了视口下方的部分，因此我们需要添加填充来补偿这个问题：
- en: '[PRE71]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'If your Navbar was fixed at the bottom add padding for it as well:'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的导航栏固定在底部，请为其添加填充：
- en: '[PRE72]'
  id: totrans-401
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: Responsive Navbar
  id: totrans-402
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 响应式导航栏
- en: 'Another issue the staff of Dream Bean would like to fix is that the content
    must collapse at the given viewport width. Let''s do it with `navbar-toggler`
    class along with `navbar-toggleable` classes, and their prefix sizes:'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: Dream Bean的员工想要解决的另一个问题是内容必须在给定的视口宽度下折叠。让我们使用`navbar-toggler`类以及`navbar-toggleable`类和它们的前缀大小来做到这一点：
- en: '![Responsive Navbar](Image00034.jpg)'
  id: totrans-404
  prefs: []
  type: TYPE_IMG
  zh: '![响应式导航栏](Image00034.jpg)'
- en: As I mentioned earlier, the `navbar-toggler` class helps to organize collapsible
    behavior. The collapsible plugin uses information from the `data-toggle` property
    to trigger the action and one element defined in `data-target` . The `data-target`
    keeps the ID of an element contained with `navbar-toggleable` classes, and it
    prefixes the size.
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 如我之前提到的，`navbar-toggler`类有助于组织可折叠的行为。可折叠插件使用`data-toggle`属性中的信息来触发操作，并使用`data-target`中定义的一个元素。`data-target`保留了包含在`navbar-toggleable`类中的元素的ID，并且它会加上前缀大小。
- en: 'The collapsible header will only work responsively with a combination of all
    of them:'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 可折叠的页眉只能通过它们的组合响应地工作：
- en: '![Responsive Navbar](Image00035.jpg)'
  id: totrans-407
  prefs: []
  type: TYPE_IMG
  zh: '![响应式导航栏](Image00035.jpg)'
- en: Responsive utilities
  id: totrans-408
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 响应式实用程序
- en: 'To make the life of developers easy, Bootstrap provides utility classes for
    faster mobile-friendly development. They could help in:'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让开发者的生活更轻松，Bootstrap提供了用于更快速移动友好开发的实用程序类。它们可以帮助：
- en: Showing and hiding content by a device via a media query
  id: totrans-410
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过媒体查询来显示和隐藏内容
- en: Toggling content when printed
  id: totrans-411
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打印时切换内容
- en: 'I don''t want to create entirely different versions of the same web application
    for different mobile devices. Instead, I will use the following utility classes
    to complement each device''s presentation:'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 我不想为不同的移动设备创建完全不同的Web应用程序版本。相反，我将使用以下实用程序类来补充每个设备的呈现：
- en: The utility class `hidden-*-up` hides the element when the viewport is at the
    given breakpoint or wider
  id: totrans-413
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实用程序类`hidden-*-up`在视口位于给定断点或更宽时隐藏元素
- en: The utility class `hidden-*-down` hides the element when the viewport is at
    the given breakpoint or smaller
  id: totrans-414
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实用程序类`hidden-*-down`在视口位于给定断点或更小时隐藏元素
- en: We can show an element only on a given interval of screen sizes by combining
    `hidden-*-up` and `hidden-*-down` utility classes
  id: totrans-415
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过组合`hidden-*-up`和`hidden-*-down`实用程序类，我们可以仅在给定的屏幕尺寸间隔上显示元素
- en: Bear in mind that there are no exit responsive utility classes to show an element
    explicitly. Indeed, we do not hide it at the particular breakpoint size.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，没有退出响应式实用程序类来显式显示元素。事实上，我们不会在特定的断点大小隐藏它。
- en: 'In our project we show the UI element we like to call the hamburger button
    only for devices with a screen size less than 544px:'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的项目中，我们只为屏幕尺寸小于544px的设备显示我们喜欢称为汉堡按钮的UI元素：
- en: '![Responsive utilities](Image00036.jpg)'
  id: totrans-418
  prefs: []
  type: TYPE_IMG
  zh: '![响应式实用程序](Image00036.jpg)'
- en: 'Here is a quick tip table that can help you to choose the right utility class
    to show elements on screen:'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个快速提示表，可以帮助您选择正确的实用程序类来在屏幕上显示元素：
- en: The `hidden-xs-down` shows elements from small devices (landscape phones) and
    up (>= 544px)
  id: totrans-420
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hidden-xs-down`在小型设备（横向手机）及以上（>= 544px）显示元素'
- en: The `hidden-sm-down` shows elements from medium devices (tablets) and up (>=
    768px)
  id: totrans-421
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hidden-sm-down`在中等设备（平板电脑）及以上（>= 768px）显示元素'
- en: The `hidden-md-down` shows elements from large devices (desktops) and up (>=
    992px)
  id: totrans-422
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hidden-md-down`显示来自大型设备（台式电脑）及以上（>= 992px）的元素'
- en: The `hidden-lg-down` shows elements from small devices (desktops) and up (>=
    1200px)
  id: totrans-423
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hidden-lg-down`显示来自小型设备（台式电脑）及以上（>= 1200px）的元素'
- en: The `hidden-sm-up` shows elements for extra small devices (portrait phones)
    (< 544px)
  id: totrans-424
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hidden-sm-up`显示超小型设备（竖屏手机）的元素（< 544px）'
- en: The `hidden-md-up` shows elements for small devices (portrait phones) and down
    (< 768px)
  id: totrans-425
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hidden-md-up`显示小型设备（竖屏手机）及以下的元素（< 768px）'
- en: The `hidden-lg-up` shows elements for medium devices (tablets) and down (< 992px)
  id: totrans-426
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hidden-lg-up`显示中等设备（平板电脑）及以下的元素（< 992px）'
- en: The `hidden-xl-up` shows elements for large devices (desktops) and down (< 1200px)
  id: totrans-427
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hidden-xl-up`显示大型设备（台式电脑）及以下的元素（< 1200px）'
- en: The Navbar content alignment
  id: totrans-428
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导航栏内容对齐
- en: 'The last thing we need to fix is the placement of a menu in the Navbar. We
    can use any of `pull-*left` or `pull-*right` classes to align the menu and all
    other components in Navbar. The managers of Dream Bean want to add the cart item
    with a drop-down as the last item of the menu and align it to the right side:'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要修复的最后一件事是菜单在导航栏中的位置。我们可以使用`pull-*left`或`pull-*right`类中的任何一个来对齐菜单和导航栏中的所有其他组件。Dream
    Bean的管理人员希望将购物车项目添加为菜单的最后一项，并将其与右侧对齐：
- en: '[PRE73]'
  id: totrans-430
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'I have created a separate menu group and aligned it to the right with `pull-xs-right`
    on all sizes of layout:'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 我创建了一个单独的菜单组，并在所有布局大小上使用`pull-xs-right`将其对齐到右侧：
- en: '![The Navbar content alignment](Image00037.jpg)'
  id: totrans-432
  prefs: []
  type: TYPE_IMG
  zh: '![导航栏内容对齐](Image00037.jpg)'
- en: Note
  id: totrans-433
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can find the source code in the `chapter_2/4.ecommerce-responsive` folder.
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`chapter_2/4.ecommerce-responsive`文件夹中找到源代码。
- en: Summary
  id: totrans-435
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we discovered the world of Sass; the CSS preprocessing framework
    allows you to write more concise stylesheets. The Sass files are formatted nicely
    and require less repetitive techniques commonly found when writing CSS code. As
    a result, we had more dynamic styling and saved time developing quality websites
    and applications. We will use Sass in customizing our project in the following
    chapters.
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们发现了Sass的世界；这个CSS预处理框架允许您编写更简洁的样式表。Sass文件格式良好，需要较少的重复技术，通常在编写CSS代码时会发现。因此，我们拥有了更具动态风格的样式，并节省了开发高质量网站和应用程序的时间。在接下来的章节中，我们将使用Sass来定制我们的项目。
- en: We introduced the project we're going to be building over the course of this
    book. This information includes important aspects about how to start a project
    development from scratch.
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 我们介绍了我们将在本书中构建的项目。这些信息包括如何从头开始开发项目的重要方面。
- en: We explored the most fundamental grid component helping us to layout all other
    elements across the page.
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 我们探索了最基本的网格组件，帮助我们在页面上布局所有其他元素。
- en: We introduced the flexible Card component and built the plates that contain
    categories of products from the building project.
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 我们介绍了灵活的卡片组件，并构建了包含建筑项目产品类别的板块。
- en: We now know how to use Nav and Navbar components to organize responsively collapsible
    headers with a menu, and how to customize it.
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道如何使用Nav和Navbar组件来组织响应式可折叠的标题菜单，并对其进行定制。
- en: In [Chapter 3](text00033.html#ch03 "Chapter 3. Advanced Bootstrap Components
    and Customization") , *Advanced Bootstrap Components and Customization* , we're
    going to explore more Bootstrap fundamentals and continue to build the project
    we started to develop in this chapter.
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第3章](text00033.html#ch03 "第3章.高级Bootstrap组件和定制")中，*高级Bootstrap组件和定制*，我们将探索更多Bootstrap基础知识，并继续构建我们在本章开始开发的项目。
- en: 读累了记得休息一会哦~
  id: totrans-442
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读累了记得休息一会哦~
- en: '**公众号：古德猫宁李**'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: '**公众号：古德猫宁李**'
- en: 电子书搜索下载
  id: totrans-444
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电子书搜索下载
- en: 书单分享
  id: totrans-445
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 书单分享
- en: 书友学习交流
  id: totrans-446
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 书友学习交流
- en: '**网站：**[沉金书屋 https://www.chenjin5.com](https://www.chenjin5.com)'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: '**网站：**[沉金书屋 https://www.chenjin5.com](https://www.chenjin5.com)'
- en: 电子书搜索下载
  id: totrans-448
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电子书搜索下载
- en: 电子书打包资源分享
  id: totrans-449
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电子书打包资源分享
- en: 学习资源分享
  id: totrans-450
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习资源分享
