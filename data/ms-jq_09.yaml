- en: Chapter 9. Using the Web Performance APIs
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章。使用 Web 性能 API
- en: How many times have you had a browser session running with multiple tabs? As
    a developer, I would expect that to almost be the norm, right?
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 您有多少次打开了带有多个选项卡的浏览器会话？作为开发人员，我希望那几乎是正常情况，对吗？
- en: Now, what if when you switched tabs, content was still playing on the original
    tab? It's really irritating, right? Sure, we could stop it, but hey, we're busy
    people with more important things to do…!
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果当您切换选项卡时，内容仍然在原始选项卡上播放会怎样？真的很烦人，对吧？当然，我们可以停止它，但是嘿，我们是忙碌的人，有更重要的事情要做...！
- en: 'Thankfully, this is no longer an issue – in the age of mobile, where conservation
    of resources is ever more important, we can employ a few tricks to help curb our
    use. This chapter will introduce you to using the Page Visibility API, and show
    you how, with some simple changes, you can dramatically reduce the resources used
    by your site. Over the next few pages, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，这不再是问题 - 在移动时代，资源的保护变得更加重要，我们可以采用一些技巧来帮助节省资源的使用。本章将介绍如何使用页面可见性 API，并向您展示如何通过一些简单的更改，可以显著减少您的站点使用的资源。接下来的几页中，我们将涵盖以下主题：
- en: Introducing the Page Visibility and requestAnimationFrame APIs
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍页面可见性和 requestAnimationFrame API
- en: Detecting and adding support, using jQuery
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检测并添加支持，使用 jQuery
- en: Controlling activity using the API
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 API 控制活动
- en: Incorporating support into practical uses
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将支持合并到实际应用中
- en: Ready to make a start? Good! Let's get going...
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好开始了吗？很好！让我们开始吧...
- en: An introduction to the Page Visibility API
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 页面可见性 API 简介
- en: 'Consider this scenario for a moment, if you will:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 请暂时考虑一下这种情景：
- en: You're viewing a content-heavy site on an iPad, which is set to pre-render content.
    This is beginning to hammer the resources on the device, with the result that
    battery power is being drained quickly. Can you do anything about it? Well, on
    that site, probably not – but if it is a site you own, then yes. Welcome to the
    **Page Visibility API**.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 您正在 iPad 上浏览一个内容丰富的网站，该网站已设置为预渲染内容。这开始大量使用设备上的资源，导致电池电量迅速耗尽。你能做些什么？好吧，在那个站点上，可能不行
    - 但如果是您拥有的站点，那么是的。欢迎使用**页面可见性 API**。
- en: The Page Visibility API is a nifty little API that detects when content in a
    browser tab is visible (that is, being viewed), or hidden. Why is this of interest?
    Simple – if a browser tab is hidden, then there is no point in playing media on
    the site, or running frequent polls to a service, right?
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 页面可见性 API 是一个巧妙的小 API，用于检测浏览器选项卡中的内容是否可见（即正在查看）或隐藏。为什么这很重要？简单 - 如果浏览器选项卡隐藏，那么在站点上播放媒体或频繁轮询服务就没有意义了，对吧？
- en: The net impact of using this API is aimed at reducing the use of resources and
    (consequently) saving power. After all, your visitors will not thank you if their
    batteries are drained as a result of visiting a media-heavy site!
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此 API 的净影响旨在减少资源使用（因此）节省电力。毕竟，如果您的访问者因访问媒体密集型站点而耗尽电池电量，他们是不会感谢您的！
- en: Over the next few pages, we're going to visit this library in detail and see
    how we can use it with jQuery. Let's kick off with a look at browser support for
    the API.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几页中，我们将详细了解这个库，并看看如何与 jQuery 结合使用它。让我们从查看 API 的浏览器支持开始。
- en: Supporting the API
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 支持 API
- en: Unlike other APIs, support for this library is very good within all major browsers.
    As with many APIs, Page Visibility went through the usual process of requiring
    vendor prefixes, before reaching Recommendation stage at the end of October 2013\.
    At present, none of the recent browsers (post IE8) require vendor prefixes in
    order to operate.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他 API 不同，所有主要浏览器对此库的支持非常好。与许多 API 一样，页面可见性经历了通常的过程，需要供应商前缀，然后在2013年10月底达到推荐阶段。目前，最新的浏览器（IE8之后）都不需要供应商前缀才能运行。
- en: 'A typical code extract that uses the Page Visibility API looks like the following
    code snippet, when using plain JavaScript:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 使用纯 JavaScript 时，使用页面可见性 API 的典型代码片段如下所示：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We'll be looking at using jQuery later on this chapter.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们稍后会研究在本章中使用 jQuery。
- en: It's trivial to implement it in code, so there is no excuse not to. To prove
    this, let's take a look at a demo in action.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码中实现它是微不足道的，所以没有理由不这样做。为了证明这一点，让我们看看演示的效果。
- en: Implementing the Page Visibility API
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现页面可见性 API
- en: So far, we've been introduced to the Page Visibility API, and have covered the
    benefits of using it to pause content when it is not visible. It's worth spending
    a moment to see how we can implement it in our code, and how such a simple change
    can reap massive benefits.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经介绍了页面可见性 API，并介绍了在内容不可见时使用它暂停内容的好处。 值得花一点时间看看我们如何在代码中实现它，以及这样一个简单的改变如何带来巨大的好处。
- en: 'We''ll begin with covering the plain JavaScript first, before looking at using
    jQuery later in the chapter:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将先从普通 JavaScript 开始，然后在本章稍后再看看如何使用 jQuery：
- en: Let's start by extracting the markup files we need from the code download that
    accompanies this book. For this demo, we'll need `basicuse.html` and `basicuse.css`.
    Save the files into the root and `css` subfolders of our project area respectively.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从附带本书的代码下载中提取我们需要的标记文件。 对于此演示，我们将需要 `basicuse.html` 和 `basicuse.css`。 将文件分别保存到我们项目区域的根目录和
    `css` 子文件夹中。
- en: 'Next, in a new file add the following code:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在一个新文件中添加以下代码：
- en: '[PRE1]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This is the crux of our demo, using the Page Visibility API to determine if
    the tab is visible or hidden. Save this in the `js` subfolder of our project area
    as `basicuse.js`.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是我们演示的关键，使用页面可见性 API 来确定选项卡是可见还是隐藏的。 将其保存在我们项目区域的 `js` 子文件夹中，命名为 `basicuse.js`。
- en: If all is well, then when we preview the results in a browser, we should see
    something akin to the following screenshot – this shows the results after switching
    to a new tab and back again:![Implementing the Page Visibility API](img/image00412.jpeg)
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果一切顺利，那么当我们在浏览器中预览结果时，我们应该看到类似于以下截图的内容 - 这显示了切换到新选项卡然后再切换回来后的结果：![实现页面可见性 API](img/image00412.jpeg)
- en: Breaking down the API
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 拆解 API
- en: A quick look through the code in the previous demo should reveal two properties
    of note – they are `document.visibilityState` and `document.hidden`.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 快速查看前一个演示中的代码应该会发现两个值得注意的属性 - 它们是 `document.visibilityState` 和 `document.hidden`。
- en: 'These form the Page Visibility API. If we look at `document.visibilityState`
    in more detail first, it can return any of the following four different values:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这些构成了页面可见性 API。 如果我们首先更详细地查看 `document.visibilityState`，它可以返回以下四个不同的值之一：
- en: '`hidden`: Page is not visible on any screen'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hidden`：页面在任何屏幕上都不可见'
- en: '`prerender`: Page is loaded off-screen, ready to be viewed by visitor'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`prerender`：页面已加载到屏幕外，准备供访问者查看'
- en: '`visible`: Page is visible'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`visible`：页面可见'
- en: '`unloaded`: Page is about to unload (user is navigating away from current page)'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unloaded`：页面即将卸载（用户正在从当前页面导航离开）'
- en: We also make use of the `document.hidden` property - it is a simple Boolean
    property, that is set to `false` if page is visible and `true` if page is hidden.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还使用 `document.hidden` 属性 - 它是一个简单的布尔属性，如果页面可见，则设置为 `false`，如果页面隐藏，则设置为 `true`。
- en: 'Together with the `visibilitychange` event, we can easily be notified when
    the condition of a page''s visibility changes. We would use something akin to
    the following code:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 结合 `visibilitychange` 事件，我们可以很容易地在页面可见性更改时收到通知。 我们将使用类似于以下代码的内容：
- en: '[PRE2]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This will work for most browsers, but not all. Even though it is a minority,
    we still have to allow for it. To see what I mean, try running the demo in IE8
    or below – it won't show anything. Showing nothing is not an option; instead,
    we can provide a path to degrade gracefully. So, let's take a look at how to avoid
    code collapsing into a heap.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '这将适用于大多数浏览器，但并非所有。 尽管它只是少数，但我们仍然必须允许它。 要了解我的意思，请尝试在 IE8 或更低版本中运行演示 - 它不会显示任何内容。
    显示空白不是一个选项； 相反，我们可以提供一个优雅降级的路径。 因此，让我们看看如何避免代码崩溃成一堆。 '
- en: Detecting support for the Page Visibility API
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检测对页面可见性 API 的支持
- en: Although the API will work perfectly well in most modern browsers, it will fail
    in a limited number; IE8 is a good example. To get around this, we need to provide
    either a root to gracefully degrade, or use a fallback; step one to this process
    is to first work out if our browser supports the API.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 API 在大多数现代浏览器中都可以很好地工作，但在有限的几个浏览器中会失败； IE8 就是一个很好的例子。 为了解决这个问题，我们需要提供一个根本性的方式来优雅地降级，或者使用一个回退机制；
    这个过程的第一步是首先弄清楚我们的浏览器是否支持该 API。
- en: There are different ways to do this. We could use the `Modernizr.addTest` option
    from Modernizr (from [http://www.modernizr.com](http://www.modernizr.com)). Instead,
    we're going to use a plugin by Matthias Bynens, which contains a check for support
    for older browsers. The original version is available from [https://github.com/mathiasbynens/jquery-visibility](https://github.com/mathiasbynens/jquery-visibility).
    The version included in the code download is a cut-down copy, which removes support
    for older browsers.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做的方法有很多种。我们可以使用Modernizr的`Modernizr.addTest`选项（来自[http://www.modernizr.com](http://www.modernizr.com)）。相反，我们将使用Matthias
    Bynens的一个插件，其中包含了对旧浏览器的支持检查。原始版本可以从[https://github.com/mathiasbynens/jquery-visibility](https://github.com/mathiasbynens/jquery-visibility)获取。代码下载中包含的版本是一个简化版，删除了对旧浏览器的支持。
- en: Note
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A version of this demo that uses Modernizr is available in the code download
    that accompanies this book. Extract and run the `usemodernizr.html` file to see
    how it works.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 代码下载中包含使用Modernizr的此演示版本。提取并运行`usemodernizr.html`文件，查看其运行方式。
- en: Now that we've seen how Page Visibility can be incorporated into our code, we
    will switch to using jQuery for this demo.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了页面可见性如何被整合到我们的代码中，我们将切换到使用jQuery进行这个演示。
- en: 'Let''s start:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始：
- en: 'We need to start with downloading the markup and styling files from the code
    download that accompanies this book. Go ahead and extract copies of the following:
    `usingjquery.html`, `usingjquery.css`, `jquery.min.js,` and `jquery-visibility.js`.
    Save the CSS file to the `css` subfolder, the JS files to the `js` subfolder,
    and the HTML file to the root area of our project folder.'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要从附带本书的代码下载中下载标记和样式文件。继续并提取以下副本：`usingjquery.html`，`usingjquery.css`，`jquery.min.js`和`jquery-visibility.js`。将CSS文件保存到`css`子文件夹，将JS文件保存到`js`子文件夹，将HTML文件保存到我们项目文件夹的根目录。
- en: 'In a new file, add the following code – this contains the code required to
    check visibility, and confirm that the browser supports the API:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在一个新文件中，添加以下代码 - 这包含了检查可见性和确认浏览器是否支持API所需的代码：
- en: '[PRE3]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Save the file as `usingjquery.js` in the `js` subfolder of our project area.
    If we run the demo in IE9 or above, we will see it render the changes as we switch
    between tabs. Refer to the following image:![Detecting support for the Page Visibility
    API](img/image00413.jpeg)
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件保存为`usingjquery.js`，放在项目区域的`js`子文件夹中。如果我们在IE9或更高版本上运行演示，我们将看到它在我们在标签之间切换时呈现出变化。参考以下图片：![检测页面可见性API的支持](img/image00413.jpeg)
- en: 'Try changing the browser to IE8 – either by using the IE Developer Toolbar,
    or switching to a native copy of the browser. We also need to change the version
    of jQuery used, as our demo was aimed at newer browsers. Change the link to jQuery
    to this:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试将浏览器更改为IE8 - 可以使用IE开发者工具栏，或切换到浏览器的本地副本。我们还需要更改所使用的jQuery版本，因为我们的演示是面向更新的浏览器的。将jQuery链接更改为以下内容：
- en: '[PRE4]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now try refreshing the browser window. It will show that it doesn't support
    Page Visibility API, but equally does not crash out with unexpected errors. Refer
    to the next image:![Detecting support for the Page Visibility API](img/image00414.jpeg)
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在尝试刷新浏览器窗口。它会显示它不支持页面可见性API，但也不会因意外错误而崩溃。参考下一张图片：![检测页面可见性API的支持](img/image00414.jpeg)
- en: 'With a fallback option in place, we now have two options here:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 有了备用选项，我们现在有两个选择：
- en: We could just provide a path to gracefully degrade when a browser isn't supported.
    This is perfectly acceptable, but should be given consideration first.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当浏览器不被支持时，我们可以提供一条优雅降级的路径。这是完全可以接受的，但首先应该考虑一下。
- en: We could otherwise provide fallback support to allow for older browsers to still
    be used.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们还可以提供备用支持，以允许旧浏览器仍然可以使用。
- en: Let's assume we use the latter route. We can do this using any one of a number
    of plugins; we will use the `visibility.js` plugin, created by Andrey Sitnik,
    for this purpose.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们使用后一种方式。我们可以使用许多插件中的任何一种; 我们将使用Andrey Sitnik创建的`visibility.js`插件，为此目的。
- en: Providing fallback support
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提供备用支持
- en: Providing fallback support for any application is the bane of any developer's
    life. I lose count of the number of times I want to develop something that breaks
    new ground, yet can't. I have to provide support for older browsers that simply
    can't hack the new technology!
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 为任何应用程序提供备用支持是任何开发者的噩梦。我失去了对我想开发一些打破新领域的东西而不断出错的次数的计数。我必须为那些简单无法兼容新技术的旧浏览器提供支持！
- en: Thankfully, this is not an issue for the Page Visibility API – browser coverage
    is very good, although a minority number of browser versions still require some
    fallback support. There are a number of plugins available for this purpose – perhaps
    the most well-known is by Mathias Bynens, available at [https://github.com/mathiasbynens/jquery-visibility](https://github.com/mathiasbynens/jquery-visibility).
    We saw how to use a customized version in the previous demo.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，这不是 Page Visibility API 的问题 – 浏览器覆盖非常好，尽管少数浏览器版本仍需要一些回退支持。有许多插件可用于此目的 –
    也许最著名的是 Mathias Bynens 制作的，可在 [https://github.com/mathiasbynens/jquery-visibility](https://github.com/mathiasbynens/jquery-visibility)
    获取。我们在上一个演示中看到了如何使用定制版本。
- en: For this demo, we're going to use a similar plugin by Andrey Sitnik, which is
    available from [https://github.com/ai/visibilityjs](https://github.com/ai/visibilityjs).
    This contains additional functionality that includes a timer to show how long
    your page is visible; we'll make use of this in the following demo.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 对于此演示，我们将使用 Andrey Sitnik 的类似插件，可从 [https://github.com/ai/visibilityjs](https://github.com/ai/visibilityjs)
    获取。这包含额外的功能，包括一个定时器，用于显示页面可见的时间；我们将在以下演示中使用它。
- en: Installing visibility.js
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 visibility.js
- en: 'Before we begin on the demo, it''s worth noting that the `visibility.js` plugin
    can be referenced several ways:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始演示之前，值得注意的是 `visibility.js` 插件可以通过几种方式引用：
- en: We can download the original from the GitHub link at [https://github.com/ai/visibilityjs](https://github.com/ai/visibilityjs)
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以从 GitHub 链接 [https://github.com/ai/visibilityjs](https://github.com/ai/visibilityjs)
    下载原始文件
- en: 'It is available via Bower. To do this, you need Node and Bower installed. Once
    done, run the following command to download and install the plugin:'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可通过 Bower 获取。要做到这一点，您需要安装 Node 和 Bower。完成后，运行以下命令下载并安装插件：
- en: '[PRE5]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: It can even be referenced via a CDN link, which is currently [http://cdnjs.cloudflare.com/ajax/libs/visibility.js/1.2.1/visibility.min.js](http://cdnjs.cloudflare.com/ajax/libs/visibility.js/1.2.1/visibility.min.js).
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它甚至可以通过 CDN 链接引用，目前是 [http://cdnjs.cloudflare.com/ajax/libs/visibility.js/1.2.1/visibility.min.js](http://cdnjs.cloudflare.com/ajax/libs/visibility.js/1.2.1/visibility.min.js)。
- en: For the purposes of this demo, I'm assuming you're using the CDN version (which
    contains the additional timer functionality), but saved as a local copy.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 为了这个演示的目的，我假设您正在使用 CDN 版本（其中包含额外的定时器功能），但保存为本地副本。
- en: Note
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note – if you don't use this method, then you will need to download all four
    visbility JavaScript files at [https://github.com/ai/visibilityjstree/master/lib](https://github.com/ai/visibilityjstree/master/lib),
    as these provide fallback and timer functionality that is otherwise available
    in the compressed CDN version.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 注意 – 如果您不使用此方法，则需要下载所有四个可见性 JavaScript 文件，网址为 [https://github.com/ai/visibilityjstree/master/lib](https://github.com/ai/visibilityjstree/master/lib)，因为这些文件提供了压缩
    CDN 版本中可用的回退和定时器功能。
- en: Building the demo
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建演示
- en: 'Okay, now that we have our plugin in place, following is a screenshot of what
    we will demo:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在我们已经安装了插件，接下来是我们将演示的屏幕截图：
- en: '![Building the demo](img/image00415.jpeg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![构建演示](img/image00415.jpeg)'
- en: 'Let''s make a start:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧：
- en: Extract the relevant markup files from the code download that accompanies this
    book. For this exercise, we'll need the [fallback.html](http://fallback.html)
    and [fallback.css](http://fallback.css) files. Store these in the root and `css`
    folders of our project area.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从附带本书的代码下载中提取相关的标记文件。在这个练习中，我们需要 [fallback.html](http://fallback.html) 和 [fallback.css](http://fallback.css)
    文件。将它们存储在项目区域的根目录和 `css` 文件夹中。
- en: We'll also need the `visibility.min.js` plugin file – they are both in the code
    download file. Extract and save this to the `js` subfolder in our project area.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要 `visibility.min.js` 插件文件 – 它们都在代码下载文件中。将其提取并保存到我们项目区域的 `js` 子文件夹中。
- en: 'Next, add the following to a new file, saving it as `fallback.js` within the
    `js` subfolder of our project area:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将以下内容添加到一个新文件中，将其保存为项目区域的 `js` 子文件夹中的 `fallback.js`：
- en: '[PRE6]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This code contains the magic required for our demo.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此代码包含我们演示所需的魔法。
- en: Save the files. If we preview the results in a browser, we can expect to see
    something akin to the screenshot at the start of the exercise. If we switch to
    a different tab, as shown in the next screenshot, then the timer count is stopped
    temporarily, and the original tab's title is updated accordingly:![Building the
    demo](img/image00416.jpeg)
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件。如果我们在浏览器中预览结果，可以期望看到类似练习开始时的屏幕截图。如果我们切换到不同的选项卡，如下一个屏幕截图所示，则计时器计数将暂停，并相应地更新原始选项卡的标题：![构建演示](img/image00416.jpeg)
- en: So, what happened? It's a really easy demo, but we first kicked off with a check
    to ensure our browser can support the API. In most cases, this isn't an issue,
    except for IE8 or below.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，发生了什么？这是一个非常简单的演示，但我们首先启动了一个检查，以确保我们的浏览器能够支持这个API。在大多数情况下，这不是问题，除了IE8或更低版本。
- en: We then displayed the initial state of the window in its title area; this is
    updated each time we switch from the demo to a different tab and back. As a bonus,
    we made use of the `visibility.timer.js` plugin that comes with the main plugin,
    to show a count of how long our window has been visible. This of course is stopped
    each time we flip over to a different browser window and back again!
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们随后在窗口的标题区域显示了窗口的初始状态；每次从演示切换到不同的标签页然后再切换回来时，都会更新这一状态。作为额外奖励，我们利用了主插件附带的`visibility.timer.js`插件，显示了窗口可见时间的计数。当然，每次我们切换到不同的浏览器窗口然后再切换回来时，这个计时就会停止！
- en: The great thing though, is that unlike the previous demo, the plugin will still
    work even if we're using IE8 or below; we might need to alter the code in our
    demo to ensure it is styled correctly, but this is a minor consideration.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，与之前的演示不同的是，这个插件即使我们使用IE8或更低版本仍然可以工作；我们可能需要修改演示中的代码以确保其样式正确，但这只是一个小问题。
- en: 'Let''s move on. Now that we understand the basics of using the Page Visibility
    API, I am sure you are asking the question: how can we use it in a practical context?
    No problem – let''s take a look at some possible use cases.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续。既然我们已经了解了如何使用页面可见性API的基础知识，我相信你一定会问：我们如何在实际场景中使用它？没问题 - 让我们看一些可能的用例。
- en: Using the API in a practical context
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在实际场景中使用API
- en: The API can be used in a variety of different contexts. The classic is usually
    to help control playback of video or audio, although it can be used with other
    APIs such as the Battery API, to prevent content being displayed at all if power
    levels are too low.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这个API可以在各种不同的上下文中使用。经典的用法通常是帮助控制视频或音频的播放，尽管它也可以与其他API一起使用，比如电池API，以防止在电量过低时显示内容。
- en: Let's take a moment to delve into some practical examples, so we can see how
    easy it is to implement the API.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们花点时间深入研究一些实际示例，这样我们就可以看到实现API有多么简单。
- en: Pausing video or audio
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 暂停视频或音频
- en: One of the most common uses of the API is to control playback of audio or media
    such as videos. In our first example, we're going to use the API to play or pause
    a video when switching between tabs. Let's delve in and take a look.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: API最常见的用途之一是控制音频或视频等媒体的播放。在我们的第一个示例中，我们将使用API在切换标签时播放或暂停视频。让我们深入了解一下。
- en: For this demo, we'll use a couple of additional items – the Dynamic Favicons
    library this is available from [http://softwareas.com/dynamic-favicons/](http://softwareas.com/dynamic-favicons/).
    Although a couple of years old, it still works OK with current versions of jQuery.
    The videos came from the Big Buck Bunny project website, at [https://peach.blender.org](https://peach.blender.org).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个演示，我们将使用一些额外的内容 - 动态网站图标库，可以从[http://softwareas.com/dynamic-favicons/](http://softwareas.com/dynamic-favicons/)获取。虽然这个库已经有几年了，但仍然可以与当前版本的jQuery正常工作。视频来自大黄蜂项目网站，网址为[https://peach.blender.org](https://peach.blender.org)。
- en: Note
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The videos for this demo are from the Blender Foundation, and are (c) copyright
    2008, Blender Foundation / [www.bigbuckbunny.org](http://www.bigbuckbunny.org).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这个演示的视频来自Blender基金会，版权为2008年，Blender基金会/ [www.bigbuckbunny.org](http://www.bigbuckbunny.org)。
- en: 'Right! Let''s get cracking:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 好了！让我们开始吧：
- en: As always, we need to start somewhere. For this demo, go ahead and extract the
    `pausevideo` demo folder from within the code download that accompanies this book.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 像往常一样，我们需要从某个地方开始。对于这个演示，继续从本书附带的代码下载中提取`pausevideo`演示文件夹。
- en: 'Open the `pausevideo.js` file. This contains the code to play or pause the
    video, using the `jquery-visibility` plugin. Refer to the following code:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`pausevideo.js`文件。其中包含使用`jquery-visibility`插件播放或暂停视频的代码。参考以下代码：
- en: '[PRE7]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The plugin is very simple. It exposes two methods, namely `show.visibility`
    and `hide.visibility`. Try running the demo now. If all is well, we should see
    the Big Buck Bunny video play; it will pause when we switch tabs. Following is
    the screenshot of the video:![Pausing video or audio](img/image00417.jpeg)
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个插件非常简单。它公开了两种方法，即`show.visibility`和`hide.visibility`。现在试运行演示。如果一切正常，我们应该看到大黄蜂视频播放；当我们切换标签时，它会暂停。以下是视频的截图：![暂停视频或音频](img/image00417.jpeg)
- en: In addition, the window's title is updated using the `favicon.js` library. It
    shows a pause symbol when we switch tabs, as seen in the next image:![Pausing
    video or audio](img/image00418.jpeg)
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 另外，使用`favicon.js`库更新窗口标题。当我们切换选项卡时，它显示一个暂停符号，如下图所示：![暂停视频或音频](img/image00418.jpeg)
- en: That was easy, huh? That's the beauty of the API. It is very simple, but works
    with a variety of different tools. Let's prove this, by incorporating support
    for the API into a **Content Management System** (**CMS**), such as WordPress.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 那很容易，对吧？这就是API的美妙之处。它非常简单，但可以与各种不同的工具一起使用。让我们通过将API的支持纳入**内容管理系统**（**CMS**）（如WordPress）来证明这一点。
- en: Adding support to a CMS
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为CMS添加支持
- en: So far, we've seen how easy it is to incorporate support for the standard within
    static page sites – but what about CMS systems, such as WordPress, I hear you
    ask?
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到了在静态页面站点中支持标准是多么容易 - 那么对于CMS系统，例如WordPress，我听到你在问什么？
- en: Well, the API can easily be used here too. Rather than talk about it, let's
    take a look and see how we can add it in. For this demo, I will use WordPress,
    although the principles will equally apply to other CMS systems such as Joomla.
    The plugin I will use is my own creation.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，API也可以在这里轻松使用。与其谈论它，不如看看我们如何添加它。对于这个演示，我将使用WordPress，尽管原理同样适用于其他CMS系统，如Joomla。我将使用的插件是我自己创建的。
- en: It should be noted that you should have a working WordPress installation available,
    either online or as a self-hosted version, and that you have some familiarity
    installing plugins.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 应该注意，您应该有一个可用的WordPress安装，可以是在线的，也可以是自托管版本，并且您对安装插件有一些了解。
- en: Note
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Please note – the `jquery-pva.php` plugin is *only intended for development
    purposes*; it needs further work before it can be used in a production environment.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意 - `jquery-pva.php`插件仅用于*开发目的*；在将其用于生产环境之前，还需要进一步的工作。
- en: 'Okay, let''s start:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们开始：
- en: 'We need to make changes to the `functions.php` file within a theme. For this
    purpose, I will assume you are using the Twenty Fourteen theme. Open `functions.php`,
    and then add the following code:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要对主题中的`functions.php`文件进行更改。为此，我将假设您正在使用Twenty Fourteen主题。打开`functions.php`，然后添加以下代码：
- en: '[PRE8]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: From the code download that accompanies this book, find and extract the `jquery-pva`
    folder, then copy it to your WordPress installation; it needs to go into the `plugins`
    folder. Return to your WordPress installation, then activate the plugin in the
    usual way.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从附带本书的代码下载中，找到并提取`jquery-pva`文件夹，然后将其复制到您的WordPress安装中；它需要放在`plugins`文件夹中。返回您的WordPress安装，然后以通常的方式激活插件。
- en: Next, log into your WordPress Admin area, then click on **Settings** | **PVA
    Options**, and enter the version number of jQuery that you would like to use.
    I will assume 2.1.3 has been chosen. Click on **Save Changes** for it to take
    effect. Refer to the following image:![Adding support to a CMS](img/image00419.jpeg)
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，登录您的WordPress管理区域，然后点击**Settings** | **PVA Options**，输入您想使用的jQuery版本号。我将假设已选择2.1.3。点击**Save
    Changes**以生效。参考以下图片：![为CMS添加支持](img/image00419.jpeg)
- en: 'At this point, we can begin to use the library. If we upload a video and add
    it to a post, it will show the time elapsed when we begin to play it; this will
    pause when we switch tabs:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们可以开始使用库了。如果我们上传一个视频并将其添加到帖子中，当我们开始播放时，它将显示已经过的时间；当我们切换选项卡时，它将暂停：
- en: '![Adding support to a CMS](img/image00420.jpeg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![为CMS添加支持](img/image00420.jpeg)'
- en: 'To confirm it is working, it is worth looking in the source, using a DOM Inspector.
    If all is well, we should see the following links. The first link would confirm
    that the Page Visibility library is referenced, as shown next:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 要确认它是否工作正常，值得查看源代码，使用DOM检查器。如果一切正常，我们应该会看到以下链接。第一个链接将确认引用了Page Visibility库，如下所示：
- en: '![Adding support to a CMS](img/image00421.jpeg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![为CMS添加支持](img/image00421.jpeg)'
- en: 'The second link would confirm that our script is being called, as seen in the
    following image:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个链接将确认我们的脚本被调用了，如下图所示：
- en: '![Adding support to a CMS](img/image00422.jpeg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![为CMS添加支持](img/image00422.jpeg)'
- en: As we can see, the API certainly has its uses! Throughout this chapter, I've
    tried to keep the code relatively simple, so that it is easily picked up. It's
    now over to you to experiment and take it further - perhaps I can give you some
    ideas for inspiration?
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，API确实有其用处！在本章中，我尽量使代码相对简单，以便容易理解。现在轮到你来实验和进一步探索了 - 也许我可以给你一些启发？
- en: Exploring ideas for examples
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索示例的想法
- en: 'The basic principles of the Page Visibility API are simple to implement, so
    the level of complexity that we go to is only limited by one''s imagination. During
    my research, I came across some ideas for inspiration – hopefully the following
    will give you a flavor of what is possible:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 页面可见性 API 的基本原理很容易实现，因此我们所能做到的复杂程度仅受想象力的限制。在我的研究中，我找到了一些灵感的想法——希望以下内容能让你了解可能的一些情况：
- en: Animations! Sometimes we can get issues with synching animations, if a tab is
    not active. [http://greensock.com/forums/topic/9059-cross-browser-to-detect-tab-or-window-is-active-so-animations-stay-in-sync-using-html5-visibility-api/](http://greensock.com/forums/topic/9059-cross-browser-to-detect-tab-or-window-is-active-so-animations-stay-in-sync-using-html5-visibility-api/)
    explores some of the tips available to help work around some of these issues.
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动画！有时，如果标签页没有活动，我们可能会遇到同步动画的问题。[http://greensock.com/forums/topic/9059-cross-browser-to-detect-tab-or-window-is-active-so-animations-stay-in-sync-using-html5-visibility-api/](http://greensock.com/forums/topic/9059-cross-browser-to-detect-tab-or-window-is-active-so-animations-stay-in-sync-using-html5-visibility-api/)
    探讨了一些可用的提示，以帮助解决其中一些问题。
- en: This next one could either freak you, or just be plain irritating – take a look
    at [http://blog.frankmtaylor.com/2014/03/07/page-visibility-and-speech-synthesis-how-to-make-web-pages-sound-needy/](http://blog.frankmtaylor.com/2014/03/07/page-visibility-and-speech-synthesis-how-to-make-web-pages-sound-needy/),
    where the author has mixed both the Page Visibility and Speech Synthesis APIs.
    Be warned – he counsels against mixing the two; let us just say that this is likely
    to be more of a turn off! (It's included here for technical reasons only – not
    because we should do it.)
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接下来这个可能会让你吓一跳，或者只是单纯地让人烦躁——看一下[http://blog.frankmtaylor.com/2014/03/07/page-visibility-and-speech-synthesis-how-to-make-web-pages-sound-needy/](http://blog.frankmtaylor.com/2014/03/07/page-visibility-and-speech-synthesis-how-to-make-web-pages-sound-needy/)，作者混合了页面可见性和语音合成
    API。请注意——他警告不要混合使用这两个 API；让我们只说这很可能会更让人反感！（它仅出于技术原因被包含在这里——并不是因为我们应该这样做。）
- en: A somewhat more useful technique is to use the Page Visibility API to reduce
    the number of checks for new emails or news feeds. The API would check to see
    if the tab is hidden, and reduce the frequency of requesting updates until the
    tab becomes active again. The developer Raymond Camden has explored the basics
    required to do this, so head over to his site to learn more, at [http://www.raymondcamden.com/2013/05/28/Using-the-Page-Visibility-API](http://www.raymondcamden.com/2013/05/28/Using-the-Page-Visibility-API).
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一种更有用的技术是使用页面可见性 API 来减少对新邮件或新闻源的检查次数。该 API 将检查标签页是否隐藏，并减少请求更新的频率，直到标签页再次活动起来。开发者
    Raymond Camden 探索了执行此操作所需的基本知识，请前往他的网站了解更多信息，网址为[http://www.raymondcamden.com/2013/05/28/Using-the-Page-Visibility-API](http://www.raymondcamden.com/2013/05/28/Using-the-Page-Visibility-API)。
- en: To really mix things up, we can instigate some useful notifications, using the
    Page Visibility, Web Notification, and Vibration APIs at the same time. Have a
    look at [http://www.binpress.com/tutorial/building-useful-notifications-with-html5-apis/163](http://www.binpress.com/tutorial/building-useful-notifications-with-html5-apis/163)
    for ideas on how to mix the three together within the site or application.
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了真正混合一些东西，我们可以同时使用页面可见性、Web 通知和震动 API 来启动一些有用的通知。在[http://www.binpress.com/tutorial/building-useful-notifications-with-html5-apis/163](http://www.binpress.com/tutorial/building-useful-notifications-with-html5-apis/163)中，您可以了解如何在站点或应用程序中混合这三个
    API 的想法。
- en: Okay, I think it's time for a change. Let's move on and take a look at another
    API that was created around the same time as the Page Visibility API, and works
    using similar principles to help reduce demand on resources.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我认为现在是改变的时候了。让我们继续并看看另一个与页面可见性 API 大约在同一时间创建的 API，它使用类似的原理来帮助减少资源需求。
- en: I'm of course referring to the requestAnimationFrame API. Let's delve in and
    find out what it is, what makes it tick, and why such a simple API can be a real
    boon to us developers.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我当然是指 requestAnimationFrame API。让我们深入探讨一下，看看它是什么，是什么原因让它运行起来，以及为什么这样一个简单的 API
    对我们开发者来说会是一个真正的福音。
- en: Introducing the requestAnimationFrame API
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍 requestAnimationFrame API
- en: The shift to working online over the last few years has led to a massive increase
    in demand for performant browsers, while at the same time reducing resource consumption
    and battery power.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 过去几年转向在线工作导致了对性能浏览器的巨大需求增加，同时减少了资源消耗和电池功耗。
- en: With this in mind, browser vendors and Microsoft teamed together to create three
    new APIs. We've already explored one, in the form of the Page Visibility API;
    the other that we're going to look at is **requestAnimationFrame**. All three
    (the third being **setImmediate**) were designed for better performance and increased
    power efficiency.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个想法，浏览器厂商和微软联合创建了三个新的API。我们已经探讨了其中一个，以页面可见性API的形式；我们要看的另一个是**requestAnimationFrame**。三者（第三个是**setImmediate**）都是为了提高性能和增加功耗效率而设计的。
- en: Exploring the concept
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索概念
- en: So, what is requestAnimationFrame? Simple – if you've spent any time creating
    animation using jQuery, you will no doubt have used the `setInterval` method (or
    even `clearInterval`), right? requestAnimationFrame (and clearAnimationFrame)
    were designed as drop-in replacements for each respectively.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，requestAnimationFrame是什么？简单——如果你花了一些时间使用jQuery创建动画，你肯定使用过`setInterval`方法（甚至是`clearInterval`），对吧？requestAnimationFrame（和clearAnimationFrame）分别被设计为替代它们。
- en: Why should we use it? We will explore the benefits of using requestAnimationFrame
    in the next section, but first let's understand its essence.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为什么要使用它？在下一节中，我们将探讨使用requestAnimationFrame的好处，但首先让我们了解它的本质。
- en: 'Most animations work to a JavaScript based timer of less than 16.7ms when drawing
    animations, even though monitors can only display at 16.7ms (or 60Hz frequency),
    as indicated by the following graph:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数动画在绘制动画时都使用小于16.7毫秒的基于JavaScript的定时器，即使显示器只能以16.7毫秒（或60Hz频率）显示，如下图所示：
- en: '![Exploring the concept](img/image00423.jpeg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![探索概念](img/image00423.jpeg)'
- en: 'Why is this important? The key to this is that a typical `setInterval` or `setTimeout`
    frequency is usually around 10ms. This means that every third draw of the monitor
    is not seen by the viewer, as another draw will happen before the display refreshes.
    Refer to the next graph:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这为什么重要？关键在于，典型的`setInterval`或`setTimeout`频率通常约为10毫秒。这意味着每第三次监视器的绘制不会被观看者看到，因为在显示刷新之前会发生另一次绘制。请参考下一个图表：
- en: '![Exploring the concept](img/image00424.jpeg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![探索概念](img/image00424.jpeg)'
- en: This results in a choppy display, as frames will be dropped. Battery life can
    be impacted by as much as 25 percent, which is a significant loss!
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 这会导致显示不连贯，因为会丢帧。电池寿命可能会降低高达25％，这是一个显著的损失！
- en: Browser vendors recognized this, so came up with the requestAnimationFrame API.
    This tells the application when the browser needs to update the screen, and when
    the browser needs a refresh. This results in a reduction in use of resources,
    and fewer dropped frames, as the frame rate is more consistent compared to code.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器厂商意识到了这一点，因此提出了requestAnimationFrame API。这告诉应用程序浏览器何时需要更新屏幕，以及浏览器何时需要刷新。这导致资源使用减少，丢帧较少，因为帧速率与代码相比更一致。
- en: Note
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The developer Paul Irish sums it up perfectly with the following comment on
    his blog at [http://www.paulirish.com/2011/requestanimationframe-for-smart-animating/](http://www.paulirish.com/2011/requestanimationframe-for-smart-animating/),
    when he notes that this allows browsers to "optimize concurrent animations together
    into a single reflow and repaint cycle, leading to higher fidelity animation."
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者Paul Irish在他的博客[http://www.paulirish.com/2011/requestanimationframe-for-smart-animating/](http://www.paulirish.com/2011/requestanimationframe-for-smart-animating/)中对此做了完美的总结，他指出这使得浏览器能够“将并行动画优化到单个回流和重绘周期中，从而实现更高保真度的动画。”
- en: Viewing the API in action
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查看API的实际效果
- en: As is nearly always the case, it is better seeing something in action, rather
    than reading about it. It's something about a moving demo that helps ram the concept
    home, at least for me!
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎总是这样，看到实际效果要比阅读有用得多。对我来说，移动演示有助于深化概念！
- en: To help with this, there are two demos available on the code download that accompanies
    this book – the `requestAnimAtionframe.html` and `cancelAnimationFrame.html` files.
    They contain simple examples of both APIs. We will explore more practical uses
    of the APIs towards the end of this chapter.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助理解，本书附带的代码下载中有两个演示——`requestAnimationFrame.html`和`cancelAnimationFrame.html`文件。它们包含了两个API的简单示例。我们将在本章末尾探讨API的更多实际用途。
- en: Using the requestAnimationFrame API
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用requestAnimationFrame API
- en: 'Although it may not be immediately apparent from the simple demos that we referenced
    at the end of the previous section, there are some clear benefits to using requestAnimationFrame,
    which are listed next and are worth noting:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然从上一节末尾引用的简单演示中可能并不立即明显，但使用 requestAnimationFrame 有一些明显的好处，下面列出了这些值得注意的好处：
- en: requestAnimationFrame works with the browser to combine animations together
    into a single repaint during a redraw transition, using the screen refresh rate
    to dictate when these should happen.
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: requestAnimationFrame 与浏览器合作，在重绘转换期间将动画组合到单个重绘中，使用屏幕刷新率来决定何时应该发生这些操作。
- en: Animations are paused if a browser tab is inactive or hidden, which reduces
    requests to refresh the screen, resulting in lower memory consumption and battery
    use on mobile devices.
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果浏览器标签处于非活动或隐藏状态，动画会被暂停，这会减少刷新屏幕的请求，从而降低移动设备的内存消耗和电池使用。
- en: Animations are optimized by the browser, and not in code – the lower frame refresh
    rate results in a smoother, more consistent appearance, as fewer frames will be
    dropped.
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 浏览器通过优化动画，而不是通过代码 - 较低的帧刷新率会导致更平滑、更一致的外观，因为较少的帧将被丢弃。
- en: The API is even supported on most mobile devices too. The only platform that
    doesn't support it at present is Opera Mini version 8.0\. The CanIUse site ([http://www.caniuse.com](http://www.caniuse.com))
    shows global usage of this as being very low at 3 percent, so this is unlikely
    to present too much of an issue.
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该 API 在大多数移动设备上都受支持。目前唯一不支持的平台是 Opera Mini 8.0。CanIUse 网站（[http://www.caniuse.com](http://www.caniuse.com)）显示全球使用率仅为
    3%，因此这不太可能造成太大问题。
- en: It's worth noting that cancelAnimationFrame (as a sister API to requestAnimationFrame)
    can be used to pause animations. We can potentially use this with something like
    the Battery API to stop animations (or media such as videos) from kicking in,
    if battery power is too low.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，cancelAnimationFrame（作为 requestAnimationFrame 的姐妹 API）可用于暂停动画。如果电池电量太低，我们可以潜在地将其与诸如
    Battery API 等东西一起使用，以阻止动画（或媒体，如视频）的启动。
- en: Tip
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: To see the difference between requestAnimationFrame against setTimeout, then
    take a look at [http://jsfiddle.net/calpo/H7EEE/](http://jsfiddle.net/calpo/H7EEE/).
    You can clearly see the difference between the two, despite the simple nature
    of the demo!
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看 requestAnimationFrame 与 setTimeout 之间的区别，请访问 [http://jsfiddle.net/calpo/H7EEE/](http://jsfiddle.net/calpo/H7EEE/)。尽管演示非常简单，但您可以清楚地看到两者之间的区别！
- en: A key point to note though, is that there are instances where requestAnimationFrame
    doesn't always produce an improvement over using jQuery. There is a useful article
    by David Bushell at [http://dbushell.com/2013/01/15/re-jquery-animation-vs-css/](http://dbushell.com/2013/01/15/re-jquery-animation-vs-css/),
    which outlines this issue, and notes that requestAnimationFrame is best suited
    to being used in `<canvas>` based animations.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的一个关键点是，有些情况下，requestAnimationFrame 并不总是比使用 jQuery 更好。David Bushell 在 [http://dbushell.com/2013/01/15/re-jquery-animation-vs-css/](http://dbushell.com/2013/01/15/re-jquery-animation-vs-css/)
    上有一篇有用的文章，概述了这个问题，并指出 requestAnimationFrame 最适合用于基于 `<canvas>` 的动画。
- en: Creating animations based around requestAnimationFrame (and cancelAnimationFrame)
    is very straightforward. The developer Matt West has created a JavaScript/jQuery
    example on CodePen, which is available at [http://codepen.io/matt-west/full/bGdEC](http://codepen.io/matt-west/full/bGdEC).
    He has written a tutorial that accompanies this demo, and which is available on
    Team Treehouse's blog at [http://blog.teamtreehouse.com/efficient-animations-with-requestanimationframe](http://blog.teamtreehouse.com/efficient-animations-with-requestanimationframe).
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 基于 requestAnimationFrame（以及 cancelAnimationFrame）创建动画非常简单。开发者 Matt West 在 CodePen
    上创建了一个 JavaScript/jQuery 示例，可在 [http://codepen.io/matt-west/full/bGdEC](http://codepen.io/matt-west/full/bGdEC)
    查看。他还编写了一篇配套教程，可在 Team Treehouse 的博客上查看，链接为 [http://blog.teamtreehouse.com/efficient-animations-with-requestanimationframe](http://blog.teamtreehouse.com/efficient-animations-with-requestanimationframe)。
- en: This brings us nicely onto our next subject. Now that we've seen how to manipulate
    the API using JavaScript, let's take a look at using similar techniques with jQuery.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 这让我们顺利过渡到下一个主题。现在我们已经看到如何使用 JavaScript 操纵 API，让我们看看如何使用类似技术的 jQuery。
- en: Retrofitting the changes to jQuery
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向 jQuery 进行的更改改造
- en: So far, we've covered the basics of using requestAnimationFrame, along with
    its sister API, cancelAnimationFrame; we've seen how to implement it using either
    plain JavaScript.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经介绍了如何使用 requestAnimationFrame 及其姐妹 API cancelAnimationFrame 的基础知识；我们已经看到如何使用纯
    JavaScript 实现它。
- en: It's worth noting at this point though that jQuery does not have native support
    included. An attempt was made to add it to jQuery prior to version 1.8, but was
    removed due to issues with support by the major browser vendors.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 但值得注意的是，jQuery目前不包含原生支持。在1.8版本之前尝试将其添加到jQuery中，但由于主要浏览器供应商的支持问题而将其删除。
- en: 'Thankfully, vendor support is now much better than previously; and there are
    plans to add requestAnimationFrame support into jQuery 2.2 or 1.12\. You can see
    the changes that need to be made as follows, along with the history:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，供应商支持现在比以前好得多；并且计划在jQuery 2.2或1.12中添加`requestAnimationFrame`支持。您可以按如下方式查看需要进行的更改，以及历史记录：
- en: 'The commit: [https://gitcandy.com/Repository/Commit/jQuery/72119e0023dcc0d9807caf6d988598b74abdc937](https://gitcandy.com/Repository/Commit/jQuery/72119e0023dcc0d9807caf6d988598b74abdc937)'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提交：[https://gitcandy.com/Repository/Commit/jQuery/72119e0023dcc0d9807caf6d988598b74abdc937](https://gitcandy.com/Repository/Commit/jQuery/72119e0023dcc0d9807caf6d988598b74abdc937)
- en: The changes to `effect.js` which can be referred from [https://github.com/jquery/jquery/blob/master/src/effects.js](https://github.com/jquery/jquery/blob/master/src/effects.js)
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可从[https://github.com/jquery/jquery/blob/master/src/effects.js](https://github.com/jquery/jquery/blob/master/src/effects.js)引用的`effect.js`中的更改。
- en: 'Some of the history behind including requestAnimationFrame in jQuery core:
    [https://github.com/jquery/jquery/pull/1578](https://github.com/jquery/jquery/pull/1578);
    [http://bugs.jquery.com/ticket/15147](http://bugs.jquery.com/ticket/15147)'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含`requestAnimationFrame`在jQuery核心中的一些历史：[https://github.com/jquery/jquery/pull/1578](https://github.com/jquery/jquery/pull/1578)；[http://bugs.jquery.com/ticket/15147](http://bugs.jquery.com/ticket/15147)
- en: As a temporary measure (if you still need to support an earlier version of jQuery),
    you can try using Corey Frang's drop-in shim at [https://github.com/gnarf/jquery-requestAnimationFrame](https://github.com/gnarf/jquery-requestAnimationFrame),
    which adds support to versions of jQuery post 1.8.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 作为临时措施（如果您仍然需要支持jQuery的早期版本），您可以尝试使用Corey Frang的插件，[https://github.com/gnarf/jquery-requestAnimationFrame](https://github.com/gnarf/jquery-requestAnimationFrame)，该插件为1.8版本后的jQuery版本添加了支持。
- en: If however you are feeling more adventurous, then it is easy enough to retrofit
    requestAnimationFrame support directly to a library that uses it. Let's take a
    moment to see what is involved in making the conversion.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果您感到更有冒险精神，那么直接将`requestAnimationFrame`支持添加到使用它的库中就很容易。让我们花点时间看看涉及转换的内容。
- en: Updating existing code
  id: totrans-164
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更新现有代码
- en: Making the change is relatively straightforward. The key to it is making the
    changes modular so that they can be swapped back out easily, once jQuery gains
    support for requestAnimationFrame.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 进行更改相对直接。关键在于使更改模块化，这样一旦jQuery支持`requestAnimationFrame`，就可以轻松地将其替换回来。
- en: 'The changes can be made if the library you are using has code references to
    either `setInterval` or `clearInterval`. For example, consider if we had the following
    code extract:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的库中存在对`setInterval`或`clearInterval`的代码引用，可以进行更改。例如，考虑以下代码摘录：
- en: '[PRE9]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'It would be updated to the following code extract, replacing the reference
    to `setInterval` with `requestAnimationFrame` (and adding the equivalent replacement
    for `clearInterval`):'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 它将被更新为以下代码摘录，将对`setInterval`的引用替换为`requestAnimationFrame`（并添加`clearInterval`的等效替换）：
- en: '[PRE10]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In the previous code example, the code highlighted in bold indicates the type
    of changes needed to update the code. We will use this technique later on in this
    chapter, to retrofit support to an existing library. It will be one of two demos
    that we will explore, which use requestAnimationFrame.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码示例中，粗体突出显示的代码指示了更新代码所需的更改类型。我们将在本章稍后使用此技术，为现有库添加支持。这将是我们将探讨的两个演示之一，它们使用`requestAnimationFrame`。
- en: Some examples of using requestAnimationFrame
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一些使用`requestAnimationFrame`的示例
- en: Up until now, we've seen the theory behind using requestAnimationFrame and covered
    the typical changes that we might have to make to existing code.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经了解了使用`requestAnimationFrame`的理论，并覆盖了我们可能需要对现有代码进行的典型更改。
- en: It's a good starting point, but not always easy to get one's head around the
    concept; it's much easier to see in action! With this in mind, we're going to
    take a look at a couple of demos, which make use of the API. The first will retrofit
    support, whilst the second has been built with support already included in the
    code.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个很好的起点，但不一定易于理解概念；在实际操作中更容易理解！考虑到这一点，我们将查看一些利用API的演示。第一个将为现有支持添加支持，而第二个已经在代码中包含了支持。
- en: Creating a scrollable effect
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建可滚动效果
- en: For our first demo, we're going to take a look at updating an example of the
    classic scrollable UI element that can be found on hundreds of sites worldwide.
    We'll be using the Thumbelina plugin, available from [https://github.com/StarPlugins/thumbelina](https://github.com/StarPlugins/thumbelina).
    Although it is a couple of years old, it still works perfectly well, even with
    the latest version of jQuery!
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的第一个演示，我们将来看看更新经典的可滚动UI元素的示例。我们将使用来自[https://github.com/StarPlugins/thumbelina](https://github.com/StarPlugins/thumbelina)的Thumbelina插件。虽然已经有几年了，但它仍然可以完美运行，即使使用最新版本的jQuery！
- en: 'In this demo, we''ll replace the `setInterval` call within the plugin, to `requestAnimationFrame`.
    Let''s start:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个演示中，我们将在插件中替换`setInterval`调用，改用`requestAnimationFrame`。让我们开始：
- en: Let's begin by extracting a copy of the `thumbelina` demo folder that is in
    the code download that accompanies this book. If we run the `scrollable.html`
    file, we should see a scrollable appear with images of orchids, as in the following
    image:![Creating a scrollable effect](img/image00425.jpeg)
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从这本书附带的代码下载中提取`thumbelina`演示文件夹的副本。如果我们运行`scrollable.html`文件，我们应该会看到一个具有兰花图片的可滚动内容，如下图所示：![创建可滚动效果](img/image00425.jpeg)
- en: The Thumbelina plugin currently uses `setInterval` to manage the time period
    between animations. We're going to alter it to use the new `requestAnimationFrame`
    instead.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Thumbelina插件目前使用`setInterval`来管理动画之间的时间间隔。我们将修改它，改为使用新的`requestAnimationFrame`。
- en: 'Open thumbelina.js, then add the following code immediately below `$.fn.Thumbelina
    = function(settings) {`, which is at line 16:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开thumbelina.js，然后在`$.fn.Thumbelina = function(settings) {`下面立即添加以下代码，该行在第16行处：
- en: '[PRE11]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Scroll down to the following line, which will be on or around line 121:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向下滚动到以下行，该行将在第121行左右：
- en: '[PRE12]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Modify it as shown next, so it uses the new `requestInterval()` function we
    have just added:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照下面的修改，使它使用我们刚刚添加的新的`requestInterval()`函数：
- en: '[PRE13]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Save the file. If we run the demo, we should not see any visual difference;
    the real difference is what happens in the background.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存该文件。如果我们运行演示，应该不会看到任何视觉上的差异；真正的差异发生在后台。
- en: Tip
  id: totrans-186
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Try running the demo in Google Chrome, then viewing the results within the Timeline.
    If you do a before and after, you should see a significant difference! If you
    are unsure how to profile the demo, then head over to [https://developer.chrome.com/devtools/docs/timeline](https://developer.chrome.com/devtools/docs/timeline)
    for full details.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试在Google Chrome中运行演示，然后在时间轴中查看结果。如果你进行前后对比，应该会看到显著的差异！如果你不确定如何对演示进行分析，那就前往[https://developer.chrome.com/devtools/docs/timeline](https://developer.chrome.com/devtools/docs/timeline)获取完整详情。
- en: Animating the Google Maps marker
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动画化谷歌地图标记
- en: 'Our final demo in this chapter makes use of the well-known Google Maps service,
    to animate moving the marker that indicates a specific location on the map:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的最终演示将使用众所周知的Google Maps服务，以动画化地图上指示特定位置的标记：
- en: '![Animating the Google Maps marker](img/image00426.jpeg)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![动画化谷歌地图标记](img/image00426.jpeg)'
- en: In this example, we're going to use the demo created by Robert Gerlach, which
    is available from [http://robsite.net/google-maps-animated-marker-move/](http://robsite.net/google-maps-animated-marker-move/).
    I've tweaked the code in his `markerAnimate.js` plugin file to remove the vendor
    prefixes, as these are no longer required.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将使用Robert Gerlach创建的演示，该演示可从[http://robsite.net/google-maps-animated-marker-move/](http://robsite.net/google-maps-animated-marker-move/)
    获取。我已经调整了他的`markerAnimate.js`插件文件中的代码，以去掉厂商前缀，因为这些不再需要。
- en: 'He''s produced a neat effect that gives some life to what can appear very plain
    content. Nonetheless, it still requires a fair amount of code! Space constraints
    mean we can''t explore all of it in print, but we can explore some of the more
    important concepts:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 他创造了一个漂亮的效果，为看似十分枯燥的内容增添了些活力。尽管如此，它仍然需要相当数量的代码！由于空间限制，我们无法在印刷品中探索所有内容，但我们可以探讨一些更重要的概念：
- en: Let's begin by extracting the `googlemap` demo folder from the code download
    that accompanies this book. This contains the styling, JavaScript libraries, and
    markup for our demo.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从这本书附带的代码下载中提取`googlemap`演示文件夹。这包含了我们演示的样式、JavaScript库和标记。
- en: Run `googlemap.html` in a browser. If all is well, we should see the pointer
    over Birmingham, UK, where Packt Publishing's UK office is based.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中运行`googlemap.html`。如果一切正常，我们应该会看到指针位于英国伯明翰，那里是Packt Publishing的英国办公室所在地。
- en: Try clicking somewhere else on the map – notice how it moved across? It's taking
    advantage of some easing effects available in the jQuery Easing plugin, which
    we used back in [Chapter 6](part0056.xhtml#aid-1LCVG1 "Chapter 6. Animating in
    jQuery"), *Animating in jQuery*.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试在地图的其他位置单击 - 注意它是如何移动的？它利用了 jQuery Easing 插件中提供的一些缓动效果，我们在 [第 6 章](part0056.xhtml#aid-1LCVG1
    "Chapter 6. Animating in jQuery") 中使用过的，*jQuery 动画*。
- en: We can choose which easing effect to use by simply changing the value shown
    in the drop-down box in the bottom right corner. This could even include a custom
    animation that we craft, using the examples given in [Chapter 6](part0056.xhtml#aid-1LCVG1
    "Chapter 6. Animating in jQuery"), *Animating in jQuery* as a basis. As long as
    the custom animation function is included in our code, and the appropriate name
    is added to the dropdown, we can use it.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过简单地更改右下角下拉框中显示的值来选择要使用的缓动效果。这甚至可以包括我们自己制作的自定义动画，以 [第 6 章](part0056.xhtml#aid-1LCVG1
    "Chapter 6. Animating in jQuery") 中给出的示例为基础。只要将自定义动画函数包含在我们的代码中，并在下拉框中添加适当的名称，我们就可以使用它。
- en: 'The real point to note is actually in the `markeranimate.js` file. If we open
    it and scroll down to lines **64** - **71**, we can see how `requestAnimationFrame`
    has been used. We use it if the browser supports the API, otherwise `setTimeout`
    is used, as shown in the following screenshot:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上要注意的重点在于 `markeranimate.js` 文件。如果我们打开它并滚动到第 **64** - **71** 行，我们可以看到 `requestAnimationFrame`
    的使用方法。如果浏览器支持该 API，则使用它，否则使用 `setTimeout`，如下面的截图所示：
- en: '![Animating the Google Maps marker](img/image00427.jpeg)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![Google 地图标记的动画效果](img/image00427.jpeg)'
- en: The combination of using an easing and calling `requestAnimationFrame` makes
    for a cool effect, that also reduces the demand on resources – great if you have
    a lot of animations on your site!
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 结合使用缓动效果和调用 `requestAnimationFrame` 会产生一个很酷的效果，同时也减少了对资源的需求 - 如果您的网站有很多动画效果，那就很棒！
- en: Tip
  id: totrans-200
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: To make it easier to incorporate replacements for `setInterval`, `clearInterval`
    (and `setTimeout` / `clearTimeout`), use the replacement functions by Joe Lambert,
    which are available at, [https://gist.github.com/joelambert/1002116](https://gist.github.com/joelambert/1002116).
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 要更容易地替换`setInterval`、`clearInterval`（以及`setTimeout` / `clearTimeout`），请使用 Joe
    Lambert 的替换函数，可在 [https://gist.github.com/joelambert/1002116](https://gist.github.com/joelambert/1002116)
    获取。
- en: Exploring sources of inspiration
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索灵感来源
- en: We've covered a lot over the last few pages – it can take some time to fully
    appreciate how requestAnimationFrame (and its sister, clearAnimationFrame) work,
    but with the upcoming changes to jQuery, it is worth spending the time to familiarize
    ourselves with the APIs and the benefits they bring to our development.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的几页中我们已经涵盖了很多内容 - 完全理解 requestAnimationFrame（以及其姊妹函数 clearAnimationFrame）的工作原理可能需要一些时间，但随着
    jQuery 的即将更改，值得花时间熟悉这些 API 及其为我们开发带来的好处。
- en: 'Before we round up this chapter, listed next are a couple of sources of inspiration
    that you may find useful:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们结束本章之前，下面列出了一些可能对你有用的灵感来源：
- en: requestAnimationFrame is by no means limited to playing videos or music, or
    the like. It can even be used in developing online games! Take a look at [http://www.somethinghitme.com/2013/01/09/creating-a-canvas-platformer-tutorial-part-one/](http://www.somethinghitme.com/2013/01/09/creating-a-canvas-platformer-tutorial-part-one/)
    - hopefully you'll recognize some of the classics!
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: requestAnimationFrame 绝不仅限于播放视频、音乐或类似的用途。甚至可以用于开发在线游戏！看看 [http://www.somethinghitme.com/2013/01/09/creating-a-canvas-platformer-tutorial-part-one/](http://www.somethinghitme.com/2013/01/09/creating-a-canvas-platformer-tutorial-part-one/)
    - 希望你能认出一些经典作品！
- en: On a more serious note, and for those sites using parallax scrolling, there
    is likely to be room for improvement in the implementation. Krister Kari has written
    a detailed blog post that goes through a typical example, and outlines some of
    the techniques that can be used to fix the issues. You can read it at [http://kristerkari.github.io/adventures-in-webkit-land/blog/2013/08/30/fixing-a-parallax-scrolling-website-to-run-in-60-fps/](http://kristerkari.github.io/adventures-in-webkit-land/blog/2013/08/30/fixing-a-parallax-scrolling-website-to-run-in-60-fps/).
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更严肃的话题，对于那些使用视差滚动效果的网站，实现可能还有改进的空间。Krister Kari 写了一篇详细的博客文章，通过一个典型的例子来讨论，并概述了可以用于修复问题的一些技术。你可以在
    [http://kristerkari.github.io/adventures-in-webkit-land/blog/2013/08/30/fixing-a-parallax-scrolling-website-to-run-in-60-fps/](http://kristerkari.github.io/adventures-in-webkit-land/blog/2013/08/30/fixing-a-parallax-scrolling-website-to-run-in-60-fps/)
    上阅读。
- en: There are plenty more sources available – over to you to see where your imagination
    takes you!
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 还有很多其他资源可用 - 接下来就看你的想象力带你去哪里！
- en: Summary
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Delving into new APIs is always fun. Even though they can be simplistic in nature
    (check out the Vibration API, for example), they can prove to be a really useful
    addition to anyone's toolbox. We've explored two in detail in this chapter. Let's
    take a moment to recap what we've covered.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 探索新的 API 总是很有趣的。即使它们可能在本质上很简单（例如，查看振动 API），它们也可以证明是任何人工具箱中真正有用的补充。在本章节中，我们详细探讨了其中的两个。让我们花点时间回顾一下我们所涵盖的内容。
- en: We kicked off with an introduction to the Page Visibility API. We looked at
    browser support for the API, before implementing a basic example. We moved onto
    how to detect and provide fallback support, and then looked at some practical
    examples.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 我们以介绍页面可见性 API 开始。我们查看了 API 的浏览器支持情况，然后实施了一个基本示例。我们进一步讨论了如何检测并提供备用支持，然后查看了一些实际示例。
- en: Next came a look at the requestAnimationFrame API, where we learnt about some
    of the similarities to the Page Visibility API. We explored the basics of how
    it worked, before looking at some practical uses and how to add support to jQuery
    itself. We then rounded up the chapter with a look at two examples; one based
    around converting to using the API, whilst the other had it built in from the
    ground up.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们来看一下 requestAnimationFrame API，我们了解了一些与页面可见性 API 的相似之处。我们探讨了它的基本原理，然后看了一些实际用途以及如何添加支持到
    jQuery 本身。然后我们用两个例子总结了这一章节；一个是基于使用 API 进行转换的，而另一个则是从零开始构建的。
- en: Moving on, in the next chapter we'll explore another key element of websites,
    namely images. We're going to explore how you can manipulate images using jQuery
    to produce some really interesting effects.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 进入下一章节，我们将探讨网站的另一个关键元素，即图片。我们将探讨如何使用 jQuery 操纵图片，以产生一些非常有趣的效果。
