- en: Chapter 1. Getting Started with Angular
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第1章 使用Angular入门
- en: If you are reading this book, it is because you are a .NET developer and would
    like to learn how to use Angular with the .NET Framework technologies such asÂ ASP.NET
    **Model View Controller**Â (**MVC)** and Web API, and legacy technologies such
    asÂ web forms and web services. It enables the developer to develop richer and
    dynamic .NET web applications powered by Angular. Angular is an open source JavaScript
    framework that helps create dynamic web applications.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在阅读本书，那是因为您是.NET开发人员，想了解如何将Angular与.NET Framework技术一起使用，如ASP.NET **Model
    View Controller**（MVC）和Web API，以及诸如Web Forms和Web Services之类的传统技术。它使开发人员能够开发由Angular驱动的更丰富和动态的.NET
    Web应用程序。Angular是一个帮助创建动态Web应用程序的开源JavaScript框架。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Introducing Angular
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍Angular
- en: The Angular architecture
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular架构
- en: Building a Hello World app with Angular
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Angular构建一个Hello World应用程序
- en: Introducing Angular
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍Angular
- en: '* * *'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Let's discuss the history of AngularJS before introducing you to Angular. It
    all started with improving the development process of client-side web. As part
    of the improvement, Microsoft introduced the XML HTTP request object to retrieve
    data from the server. As the advanced JavaScript libraries such as jQuery and
    Prototype were introduced, developers started using Ajax to asynchronously request
    data from the server. These libraries were extensively used to manipulate the
    DOM and bind data to a UI in the late 90s.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在向您介绍Angular之前，让我们讨论一下AngularJS的历史。一切都始于改进客户端Web开发过程。作为改进的一部分，微软引入了XML HTTP请求对象以从服务器检索数据。随着引入了像jQuery和Prototype这样先进的JavaScript库，开发人员开始使用Ajax从服务器异步请求数据。这些库被广泛用于操作DOM并绑定数据到UI，直到90年代末。
- en: Ajax is the short form of asynchronous JavaScript and XML. Ajax can enable web
    applications to send data to or retrieve data from a server asynchronously without
    interfering with the display and behavior of the page. Ajax allows web applications
    to change content dynamically, without reloading the full page by decoupling the
    data interchange layer from the presentation layer.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 'Ajax是异步JavaScript和XML的缩写。Ajax可以使Web应用程序在不干扰页面显示和行为的情况下异步发送数据到服务器或从服务器检索数据。Ajax允许Web应用程序动态更改内容，而无需重新加载整个页面，通过将数据交换层与表现层解耦来实现。 '
- en: 'In late 2010, two JavaScript MVC frameworks were introduced: backbone and knockout.
    Backbone provided a complete Model-View-Controller experience, whereas knockout
    mainly focused on binding using the MVVM pattern. With the release of these frameworks,
    people started believing in the power of client-side MVC frameworks.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 2010年底，引入了两个JavaScript MVC框架：Backbone和Knockout。Backbone提供了完整的模型-视图-控制器（MVC）体验，而Knockout主要侧重于使用MVVM模式进行绑定。随着这些框架的发布，人们开始相信客户端MVC框架的威力。
- en: The birth of AngularJS
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: AngularJS的诞生
- en: A developer from Google felt that there was one major part missing in the client-side
    MVC frameworks that existed in the market, that is, testability. He felt that
    there was a better way to implement client-side MVC, and this made him start his
    journey to build Angular.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 来自Google的开发人员认为市场上存在的客户端MVC框架中有一个主要的缺失部分，即可测试性。他感觉有更好的方法来实现客户端MVC，这让他开始了构建Angular的旅程。
- en: Google supported the Angular project, seeing its potential, and made it open
    source for the world to use it for free. Angular created a lot of awareness among
    all the MVC frameworks in the market as it was backed by Google and also due to
    its features, such as testability and directives. Today, the Angular team has
    grown from a single developer to a large number of developers, and it has become
    the first choice to add the power of client-side MVC to small, medium, or big
    web applications.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Google支持了Angular项目，看到了它的潜力，并且使其开源供世界免费使用。Angular在市场中的所有MVC框架之间引起了很大的关注，因为它得到了Google的支持，并且具有诸如可测试性和指令等特性。如今，Angular团队已经从单个开发人员发展到了大量开发人员，并且已经成为在小型、中型或大型Web应用程序中添加客户端MVC功能的首选。
- en: Why AngularJS?
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为什么选择AngularJS？
- en: 'Let''s discuss why to use AngularJS and what is the benefit or value addition
    that our application can get by using AngularJS:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们讨论为什么使用AngularJS以及通过使用AngularJS我们的应用程序可以获得什么好处或增值：
- en: '**AngularJS provides two-way binding**: Many client-side MVC frameworks provide
    only one-way binding. This means that other MVC frameworks will update HTML with
    the model from the server, and when the user changes the model on the page, the
    frameworks will not update the model according to the changes made. A developer
    has to write code to update the model according to the user action. However, AngularJS
    facilitates two-way binding and has made the life of developers easier by updating
    the model as per the user''s actions on it.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AngularJS提供双向绑定**：许多客户端MVC框架只提供单向绑定。这意味着其他MVC框架只会使用来自服务器的模型来更新HTML，当用户在页面上更改模型时，框架不会根据所做的更改更新模型。开发人员需要编写代码来根据用户操作更新模型。然而，AngularJS方便了双向绑定，并通过根据用户在其上的操作更新模型使开发人员的生活更轻松。'
- en: '**AngularJS utilizes declarative views**: This means that the functionalities
    will be communicated as declarative directions in HTML to render the models and
    interact with the DOM to change the page state based on changes in the model.
    This extensively reduces the code by about 50% to 75% for this purpose and makes
    the life of developers easier.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AngularJS利用声明性视图**：这意味着功能将以HTML中的声明性指令的形式进行通信，以渲染模型并与DOM交互，根据模型的改变改变页面状态。这大大减少了用于此目的的代码量，将其减少了约50%至75%，并简化了开发人员的工作。'
- en: '**AngularJS supports the directive concept**: This is like writing a domain-specific
    language for the web application. Directives will extend the functionality of
    HTML and render them dynamically according to the changes in the application rather
    than just displaying the HTML page.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AngularJS支持指令概念**：这就像为Web应用程序编写一个特定领域的语言。指令将扩展HTML的功能，并根据应用程序的变化动态渲染它们，而不仅仅是显示HTML页面。'
- en: '**AngularJS is highly testable**: As said earlier, one of the main mottos of
    the development of Angular is to introduce a testable client-side MVC framework.
    AngularJS is highly testable, and in fact, the Angular team has introduced two
    frameworks: Karma and Protractor, to write end-to-end unit testing to ensure the
    stability of the code and to enable the refactoring of the code confidently.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AngularJS非常易于测试**：如前所述，Angular开发的主要目标之一是引入可测试的客户端MVC框架。AngularJS非常易于测试，事实上，Angular团队已经推出了两个框架：Karma和Protractor，用于编写端到端单元测试，以确保代码的稳定性，并确保自信地重构代码。'
- en: Angular 2
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Angular 2
- en: AngularJS is a good framework. However, it is six years old, and there are a
    lot of things that have changed in these six years in the web world. To accommodate
    all these modern happenings in AngularJS, it would have to undergo many changes
    in the existing implementation, and this made the Angular team write AngularJS
    from scratch.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: AngularJS是一个很好的框架。然而，它已经有六年的历史了，在这六年里，Web世界发生了很多变化。为了适应AngularJS中所有这些现代发展，它将不得不在现有的实现中进行许多改变，这使得Angular团队从头开始编写AngularJS。
- en: At the ngEurope conference held in October 2014, Angular 2 was announced as
    a massive update to Angular 1 for building complex web applications. The ngCommunity
    was a little upset as they invested a lot of time in learning and implementing
    Angular 1, and now they had to redo the process of learning and implementing Angular
    again. However, Google invested a lot in the migration and upgrade process from
    Angular 1 to 2 by introducing ngUpgrade and ngForward. Once the developers started
    learning and building products in Angular 2, they realized the power of cleaner,
    faster, and easier Angular 2.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在2014年10月举行的ngEurope大会上，宣布了Angular 2作为构建复杂Web应用的Angular 1的重大更新。ngCommunity有点不满，因为他们在学习和实施Angular
    1上投入了很多时间，而现在他们又不得不重新学习和实施Angular。然而，谷歌在从Angular 1升级到2的迁移和升级过程中投入了大量精力，引入了ngUpgrade和ngForward。一旦开发人员开始学习并使用Angular
    2构建产品，他们就意识到了更清洁、更快速和更容易的Angular 2的威力。
- en: Angular 2 was rewritten from scratch. It helped us write clean and testable
    code that can run on any device and platform. Angular 2 eliminated many concepts
    from Angular 1\. Angular 2 follows the standardization of ECMAScript 2015\. With
    the recent web standardization, the shadow DOM replaced transclusion and the ECMAScript
    6 modules replaced Angular modules. Angular 2 is five times faster than Angular
    1.x.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Angular 2是从零开始重写的。它帮助我们编写干净的、可测试的代码，可以在任何设备和平台上运行。Angular 2消除了Angular 1中的许多概念。Angular
    2遵循了ECMAScript 2015的标准化。随着最近的Web标准化，影子DOM取代了传递和ECMAScript 6模块取代了Angular模块。Angular
    2比Angular 1.x快五倍。
- en: The benefits of Angular 2
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Angular 2的优势
- en: 'The following are the features and benefits of Angular 2:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是Angular 2的特性和优势：
- en: It supports cross-platform application development, such as high performing
    apps like web apps, native apps using Ionic Framework, NativeScript, React Native,
    and creating desktop-installed apps by accessing native OS APIs using Angular
    methods.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它支持跨平台应用程序开发，比如高性能应用程序，如使用Ionic Framework、NativeScript、React Native创建本机应用程序，并通过使用Angular方法访问本机操作系统API创建桌面安装应用程序。
- en: Angular 2 inherits all the benefits of Angular 1\. It replaced controllers and
    directives with components.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular 2继承了Angular 1的所有优点。它用组件取代了控制器和指令。
- en: Angular 2 was written in TypeScript and also, it enabled developers to write
    Angular 2 applications using TypeScript.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular 2是用TypeScript编写的，也让开发人员能够使用TypeScript编写Angular 2应用程序。
- en: Angular 2 is significantly faster than Angular 1\. The new component router
    only loads code required to render a view that is requested. The template syntax
    enables a developer to quickly create views with the powerful template syntax.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular 2比Angular 1明显快得多。新的组件路由器只会加载渲染所请求的视图所需的代码。模板语法使开发人员能够快速创建具有强大模板语法的视图。
- en: Angular 2 enables us to use shadow Document Object Model (DOM). Shadow DOM encapsulates
    CSS, template, and the component. This enables decoupling from the DOM of the
    main document.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular 2使我们能够使用阴影DOM（Document Object Model）。阴影DOM封装了CSS、模板和组件。这样就可以与主文档的DOM分离。
- en: It is the simpler cognitive model. A lot of directives were removed in Angular
    2 and this means that Angular 2 has fewer pieces and fewer moving parts so that
    it is easier to build larger applications with Angular 2 than with Angular 1.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是更简单的认知模型。Angular 2中删除了许多指令，这意味着Angular 2的部件更少，移动部件也更少，因此使用Angular 2比使用Angular
    1更容易构建更大的应用程序。
- en: The development process in Angular 2
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Angular 2中的开发流程
- en: 'Angular 2 has two development processes, namely, the following:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Angular 2有两个开发过程，即以下内容：
- en: With a transpiler
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用转译器
- en: Without a transpiler
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有转译器
- en: What is ECMAScript 6?
  id: totrans-36
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 什么是ECMAScript 6？
- en: ES6 is the latest version of scripting language specification. It is a JavaScript
    language used on the world wide web for client-side scripting. ECMAScript 6 is
    aÂ great update to JavaScript language and the process of implementation of these
    features in JavaScript engine is in progress.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: ES6是脚本语言规范的最新版本。它是世界范围内用于客户端脚本的JavaScript语言。ECMAScript 6是JavaScript语言的一个伟大更新，这些特性正在JavaScript引擎中的实现过程中。
- en: What is a transpiler?
  id: totrans-38
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 什么是转译器？
- en: A transpiler basically converts any specific language to JavaScript. A good
    example of this is the Typescript transpiler, whichÂ converts Typescript code
    to JavaScript.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 转译器基本上将任何特定语言转换为JavaScript。一个很好的例子就是Typescript转译器，它将Typescript代码转换为JavaScript。
- en: What is TypeScript?
  id: totrans-40
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 什么是TypeScript？
- en: TypeScript is an open source programming language developed by Microsoft. It
    is a superset of JavaScript, and it enables programmers to write object-oriented
    programs in JavaScript. TypeScript is also used to develop transpiler, whichÂ converts
    TypeScript to JavaScript. It is designed to develop larger applications. TypeScript
    was developed as per the proposal of ECMAScript standard. TypeScript has features
    such as classes, modules, and an arrow function syntax, as proposed in ECMAScript
    6 standard.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript是由微软开发的开源编程语言。它是JavaScript的超集，它使程序员能够用JavaScript编写面向对象的程序。 TypeScript还用于开发转译器，将TypeScript转换为JavaScript。它旨在开发更大型的应用程序。
    TypeScript是根据ECMAScript标准的提案开发的。 TypeScript具有类、模块和箭头函数语法等功能，这些功能是ECMAScript 6标准中提出的。
- en: The development process in JavaScript
  id: totrans-42
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: JavaScript的开发流程
- en: 'Before discussing the development process with a transpiler, let''s look at
    the development process specific to JavaScript to build a web app. We will write
    our code in **ECMAScript 5** and **Deploy** it to the **Server**. ECMAScript 5
    is the script that every browser understands today. When a **Request** comes from
    the **Browser**, the server will serve the script and the browser will run it
    in the client side. The following diagram shows the typical development process
    for JavaScript:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '在讨论使用转译器的开发过程之前，让我们看看特定于JavaScript构建Web应用程序的开发过程。我们将在**ECMAScript 5**中编写我们的代码并**部署**到**服务器**上。
    ECMAScript 5是今天每个浏览器都理解的脚本。当**浏览器**发出**请求**时，服务器将提供脚本，浏览器将在客户端运行它。下面的图表显示了JavaScript的典型开发流程：:'
- en: '![](img/image_01_001.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_01_001.png)'
- en: The development process in JavaScript
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript的开发流程
- en: Development with a build-time transpiler
  id: totrans-46
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 带有构建时转译器的开发
- en: Instead of writing scripts in the current version of JavaScript, ECMAScript
    5, we can also write scripts in **ECMAScript 6+** using Typescript and **Transpile**Â them
    into **ECMAScript 5**. Then, **Deploy** the transpiled script to the **Server**,
    and the **Browser****Request** will be served with the Transpiled script, which
    is ECMAScript 5, that is to be executed on the client side. The benefit of this
    is that we can use the new features of the latest version of JavaScript or ECMAScript.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不仅可以使用当前版本的 JavaScript（ECMAScript 5）编写脚本，还可以使用 Typecript 编写 **ECMAScript 6+**
    的脚本并将其 **转译** 成 **ECMAScript 5**。然后，将转译后的脚本 **部署** 到 **服务器**，然后 **浏览器** 的 **请求**
    将提供要在客户端执行的 **转译后的脚本** ，即 ECMAScript 5。这样做的好处是我们可以使用最新版本的 JavaScript 或 ECMAScript
    的新功能。
- en: '![](img/image_01_002.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_01_002.png)'
- en: The development process with a build-time transpiler
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 使用构建时转译器的开发过程
- en: Development with a runtime transpiler
  id: totrans-50
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 使用运行时转译器进行开发
- en: There is another development option called runtime transpiler. In this case,
    we start off by writing scripts in **ECMAScript 6+** using Typescript or CoffeeScript
    and then **Deploy** the scripts to the **Server**. When a **Request** comes to
    the **Server**, it simply serves **ECMAScript 6+** code without Transpiling to
    the **Browser**. Then, the browser **Transpiles** the scripts to **ECMAScript
    5** using a runtime transpiler to execute it in the client side. This type of
    option is not good for production applications as it puts extra load on the browser.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一种开发选项称为运行时转译器。在这种情况下，我们首先使用 Typecript 或 CoffeeScript 在 **ECMAScript 6+**
    中编写脚本，然后 **部署** 到 **服务器**。当 **请求** 到达 **服务器** 时，它简单地提供在 **浏览器** 中不经转译的 **ECMAScript
    6+** 代码。然后，浏览器使用运行时转译器将脚本转译为 **ECMAScript 5** 在客户端执行。这种类型的选项对于生产应用程序不好，因为它会给浏览器增加额外的负载。
- en: '![](img/image_01_003.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_01_003.png)'
- en: The development process with a runtime Transpiler
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 使用运行时转译器的开发过程
- en: Transpiler options
  id: totrans-54
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 转译器选项
- en: 'In Angular 2, we have two options- to use a transpiler or to not use a transpiler.
    The following are a few types of transpilers that are available:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Angular 2 中，我们有两种选项 - 使用转译器或不使用转译器。以下是一些可用的转译器类型：
- en: '**Traceur**: It is the most popular transpiler by Google, and it can be used
    both in build-time mode and runtime mode.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Traceur**：这是谷歌公司最受欢迎的转译器，可以在构建时模式和运行时模式下使用。'
- en: '**Babel**: This transpiler works on the most latest version of ECMAScript.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Babel**：这个转译器适用于最新版本的 ECMAScript。'
- en: '**Typescript**: This is one of the most popular and preferred transpiler for
    Angular. The Angular team collaborated with the Typescript team and they haveÂ worked
    together to build Angular 2.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**TypeScript**：这是 Angular 中最受欢迎和首选的转译器之一。Angular 团队与 TypeScript 团队合作，他们一起合作构建了
    Angular 2。'
- en: What happened to Angular 3?
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Angular 3 发生了什么？
- en: After the release of Angular 2, the team decided to go with semantic versioning.
    Semantic versioning follows three number versioning, representing major, minor,
    and patch. Patch version is the last number in the version that will be incremented
    for every patch release, usually bug fixes. Minor version is the middle number
    in the version that deals with the release ofÂ new features or enhancements. Finally,
    the major version is the first number in the version that is incremented for the
    release with breaking changes.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在发布 Angular 2 后，团队决定采用语义版本控制。语义版本控制遵循三数版本控制，表示主要、次要和补丁。补丁版本是版本中的最后一个数字，通常用于修复bug。次要版本是版本中的中间数字，处理新功能或增强的发布。最后，主要版本是版本中的第一个数字，用于具有重大更改的发布。
- en: Angular team switched to use TypeScript 2.2 from TypeScript 1.8 that is used
    in Angular 2\. This introduces some breaking change that obviously leads to increment
    the major version number. Also, the current version of router module is 3.3.0,
    which is not in alignment with the other modules of Angular that are still in
    2.3.0\. So, in order to keep all the module versions in sync and follow semantic
    versioning, the Angular team decided to go with Angular instead of Angular 3 for
    their next major release.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Angular 团队从 Angular 2 使用的 TypeScript 1.8 切换到了 TypeScript 2.2。这带来了一些重大变化，很明显需要增加主要版本号。此外，当前路由模块的版本是
    3.3.0，与其他仍在 2.3.0 版本的 Angular 模块不一致。因此，为了使所有模块版本保持同步并遵循语义版本控制，Angular 团队决定在下一个主要发布中使用
    Angular 而不是 Angular 3。
- en: What's new in Angular ?
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Angular 中的新功能是什么？
- en: 'The following are the new features in Angular:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 Angular 中的新功能：
- en: TyepScript 2.1+ is the required scripting language for Angular.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular 需要的脚本语言是 TyepScript 2.1+。
- en: Ahead of Time compilation mode enables Angular to compile the templates and
    generates JavaScript code during the build process. This helps us identify the
    errors in templates during the build-time rather than at runtime.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预编译模式使得Angular在构建过程中编译模板并生成JavaScript代码。这有助于我们在构建时识别模板中的错误，而不是在运行时。
- en: Angular animation has itsÂ own package, and it means that you don't need to
    ship animation packages to the projects that don't need animation.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular动画有着自己的包，这意味着你不需要为那些不需要动画的项目提供动画包。
- en: Template tag is now deprecated as it leads to confusion with the template HTML
    tag that is used in web components. So, ng-template is introduced for templates
    in Angular.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模板标签现在已经被弃用，因为它会与Web组件中使用的模板HTML标签引起混淆。所以，ng-template被引入作为Angular中的模板。
- en: Apart from these, otherÂ new features have been introduced in code level.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 除此之外，还有新功能在代码级别上被引入。
- en: Why Angular for .NET developers?
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为何对于.NET开发者来说Angular是个好选择？
- en: The complexity of writing client-side code using JavaScript in .NET web applications
    kept increasing in scenarios such as data-binding, server calls, and validations.
    .NET developers faced difficulties in writing client-side validations using JavaScript.
    So, they discovered and started using jQuery plugins for validations and mostly,
    just to change the views according to user actions. In the later stages, .NET
    developers were looked after by JavaScript libraries that ensure the structure
    of the code and provide good features to simplify the client-side code. Then,
    they ended up using a few client-side MVC frameworks in the market. However, they
    only used the MVC frameworks to communicate with the server and to update views.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在.NET Web应用程序中使用JavaScript编写客户端代码的复杂性不断增加，比如数据绑定、服务器调用和验证。.NET开发人员在使用JavaScript编写客户端验证时遇到了困难。所以，他们发现并开始使用jQuery插件来进行验证，并大多仅仅用来根据用户动作改变视图。在后来阶段，.NET开发人员得到了能确保代码结构并提供良好功能以简化客户端代码的JavaScript库的照顾。然后，他们最终使用了一些市场上的客户端MVC框架。然而，他们只是用MVC框架来与服务器通信并更新视图。
- en: Later, a trend of **SPA** (**Single Page Applications**) came into picture in
    the web development scenario.Â These kinds of applications will be served with
    an initial page, possibly in a layout view or master view. Then, the other views
    will be loaded onto the master view as and when requested. This scenario will
    be achieved by implementing client-side routing so that the client will request
    a small part of the view rather than the entire view from the server. Achieving
    these steps created more complexities in client-side development.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 后来，**SPA**（**单页应用**）的趋势在Web开发场景中出现。这种类型的应用将会用一个初始页面提供服务，可能是在布局视图或主视图中。然后，其他视图将在请求时加载到主视图上。这种情景通过实现客户端路由来实现，这样客户端将从服务器请求视图的一小部分而不是整个视图。这些步骤的实现增加了客户端开发的复杂性。
- en: AngularJS came as a life saver for .NET developers by enabling them to reduceÂ their
    efforts in performing client-side development of handling applications, such as
    SPA. Data binding is the coolest feature of Angular that enables the developer
    to concentrate on other parts of the application instead of writing huge code
    to handle data binding, traversing, manipulating, and listening to the DOM. The
    templates in Angular are simple plain HTML strings that will be parsed into DOM
    by the browser; the Angular compiler traverses the DOM to data bind and render
    instructions. Angular enables us to create custom HTML tags and extend the behavior
    of the existing elements of DOM. With the built-in support to dependency injection,
    Angular resolves dependent parameters by providing their instances implicitly.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: AngularJS为.NET开发者带来了福音，使他们能够减少处理应用程序的客户端开发所需的工作，比如SPA等。数据绑定是Angular中最酷的功能，它使开发人员能够集中精力处理应用程序的其他部分，而不是编写大量代码来处理数据绑定、遍历、操作和监听DOM。Angular中的模板只是简单的纯HTML字符串，将被浏览器解析为DOM；Angular编译器遍历DOM以进行数据绑定和渲染指令。Angular使我们能够创建自定义HTML标签并扩展DOM中现有元素的行为。通过内建的依赖注入支持，Angular通过提供它们的实例来解析依赖参数。
- en: Building a Hello World app with Angular
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用Angular构建一个Hello World应用
- en: '* * *'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Before we start building our first Angular application, let's set up the development
    environment to get started with Angular apps.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始构建我们的第一个Angular应用之前，让我们设置开发环境来开始使用Angular应用。
- en: Setting up the development environment
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置开发环境
- en: The first thing to do before writing any code is to set up the local development
    environment. We need an editor to write the code, a local server to run the application,
    package managers to manage the external libraries, compilers to compile the code,
    and so on.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写任何代码之前要做的第一件事是设置本地开发环境。我们需要一个编辑器来编写代码，一个本地服务器来运行应用程序，包管理工具来管理外部库，编译器来编译代码等等。
- en: Installing Visual Studio Code
  id: totrans-78
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 安装Visual Studio Code
- en: Visual Studio Code is one of the greatest editors used to write Angular applications.
    So, we start with installing Visual Studio Code. Navigate to [https://code.visualstudio.com/](https://code.visualstudio.com/)
    and click on **`Download Code for Windows`**. Visual Studio Code supports platforms
    such as Windows, Linux, and OS X. So, you can also download it for other platforms
    depending on your need.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio Code是用于编写Angular应用程序的最佳编辑器之一。因此，我们首先安装Visual Studio Code。前往[https://code.visualstudio.com/](https://code.visualstudio.com/)，然后点击**`Download
    Code for Windows`**。Visual Studio Code支持Windows、Linux和OS X等平台。因此，根据您的需求也可以在其他平台上下载它。
- en: '![](img/image_01_004.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_01_004.png)'
- en: The home page of Visual Studio Code
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio Code的首页
- en: Visual Studio Code is an open source and cross-platform editor that supports
    Windows, Linux, and OS X. It is one of the powerful text editors that includes
    features such as navigation, keyboard support with customizable bindings, syntax
    highlighting, bracket matching, auto indentation, and snippets, with support for
    many programming languages. It has built-in support to IntelliSense code completion,
    richer semantic code understanding and navigation, and code refactoring. It provides
    a streamlined, integrated debugging experience, with support for Node.js debugging.
    It is a lighter version of Visual Studio. It doesn't contain any built-in development
    server, such as IIS Express. However, it is very important to test a web application
    in a local web server as part of the development process. There are several ways
    available in the market to set up a local web server.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio Code是一款开源的跨平台编辑器，支持Windows、Linux和OS X。它是一个功能强大的文本编辑器，包括诸如导航、可自定义绑定的键盘支持、语法高亮、括号匹配、自动缩进和片段等功能，支持许多编程语言。它具有内置的
    IntelliSense代码补全、更丰富的语义代码理解和导航、代码重构支持。它提供了简化的、集成的调试体验，支持Node.js调试。它是Visual Studio的一个轻量级版本。它不包含任何内置的开发服务器，如IIS
    Express。但是，在开发过程中，测试Web应用程序在本地Web服务器中非常重要。市场上有几种可用的方法来设置本地Web服务器。
- en: However, I chose lite-server as it is a lightweight, development-only node server
    that serves the static content, detects changes, refreshes the browser, and offers
    many customizations. Lite-server is available as an NPM package for Node.js. First,
    we will see how to install Node.js in the next section.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，我选择了lite-server，因为它是一个轻量级的仅用于开发的Node服务器，用于提供静态内容，检测更改，刷新浏览器，并提供许多自定义选项。Lite-server作为Node.js的NPM包可用。首先，我们将在下一节看如何安装Node.js。
- en: Installing Node.js
  id: totrans-84
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 安装Node.js
- en: Node.js is used to develop server-side web applications. It is an open source
    and cross-platform runtime environment. The built-in libraries in Node.js allow
    applications to act as a standalone web server. Node.js can be used in scenarios
    where lightweight, real-time response is needed, such as communication apps and
    web-based gaming.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js用于开发服务器端Web应用程序。它是一个开源的跨平台运行时环境。Node.js中的内置库允许应用程序充当独立的Web服务器。Node.js可用于需要轻量级实时响应的场景，例如通讯应用程序和基于Web的游戏。
- en: Node.js is available for various platforms, such as Windows, Linux, Mac OS X,
    Sun OS, and ARM. You can also download the source code of Node.js and customize
    it according to your needs.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js可用于多种平台，如Windows、Linux、Mac OS X、Sun OS和ARM。您还可以下载Node.js的源代码，并根据您的需求进行定制。
- en: In order to install Node.js, navigate to [https://nodejs.org/en/](https://nodejs.org/en/)
    and download the mature and dependable LTS (long-term support) version for Windows.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装Node.js，请前往[https://nodejs.org/en/](https://nodejs.org/en/)，并下载适用于Windows的成熟可靠的LTS（长期支持）版本。
- en: '![](img/image_01_005.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_01_005.png)'
- en: The home page of Node.js
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js的首页
- en: 'Node.js comes with NPM, a package manager that is used to acquire and manage
    JavaScript libraries for your development. To verify that the installation of
    Node.js and NPM is successful, follow these steps:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js带有NPM，一个用于获取和管理JavaScript库的软件包管理器。要验证Node.js和NPM的安装是否成功，请按照以下步骤进行检查：
- en: Open Windows Command Prompt, type the `node -v` command, and run it. You will
    get the version of Node.js that we installed.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Windows命令提示符，输入`node -v`命令并运行。您将得到我们安装的Node.js的版本。
- en: Now, check whether NPM is installed along with Node.js. Run the `NPM -v` command,
    and you will get the version number of NPM that is installed.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，检查NPM是否与Node.js一起安装。运行`NPM -v`命令，您将得到已安装的NPM的版本号。
- en: '![](img/image_01_006.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_01_006.png)'
- en: Command Prompt with commands verifying the Node.js and NPM installations
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 使用命令验证Node.js和NPM安装的命令提示符
- en: Now, we have all that we need to write our first Angular application. Let's
    get started.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们拥有了写我们的第一个Angular应用程序所需的一切。让我们开始吧。
- en: Creating an Angular application
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建一个Angular应用程序
- en: 'I assume that you have installed Node.js, NPM, and Visual Studio Code and are
    ready to use them for development. Now, let''s create an Angular application by
    cloning the git repository withÂ the following steps:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我假设您已经安装了Node.js、NPM和Visual Studio Code，并准备好用它们进行开发。现在，让我们按照以下步骤通过克隆git存储库创建一个Angular应用程序：
- en: 'Open Node.Js Command Prompt and execute the following command:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Node.Js命令提示符并执行以下命令：
- en: '[PRE0]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This command will clone the Angular quickstart repository and create an Angular
    application named `my-angular` for you with all the boilerplate codes required.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令将克隆Angular快速起步存储库，并为你创建一个名为`my-angular`的Angular应用程序，其中包含所需的所有样板代码。
- en: 'Open the `my-angular` cloned application using Visual Studio Code:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Visual Studio Code打开克隆的`my-angular`应用程序：
- en: '![](img/image_01_007-2.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_01_007-2.png)'
- en: Folder structure of the my-angular application
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: my-angular应用程序的文件夹结构
- en: The folder structure and the boilerplate code are organized according to the
    official style guide atÂ [https://angular.io/docs/ts/latest/guide/style-guide.html](https://angular.io/docs/ts/latest/guide/style-guide.html).
    The `src` folder has the code files related to application logic, and the `e2e`
    folder has the files related to end-to-end testing. Don't worry about other files
    in the application now. Let's only focus on `package.json` for now.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 文件夹结构和样板代码按照[https://angular.io/docs/ts/latest/guide/style-guide.html](https://angular.io/docs/ts/latest/guide/style-guide.html)上的官方样式指南进行组织。`src`文件夹中包含与应用程序逻辑相关的代码文件，`e2e`文件夹中包含与端到端测试相关的文件。现在不要担心应用程序中的其他文件。现在让我们只关注`package.json`。
- en: 'Click on the `package.json` file; it will have the details about the configurations
    of the metadata and project dependencies. The following is the content of the
    `package.json` file:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`package.json`文件；它将包含有关元数据和项目依赖项配置的详细信息。以下是`package.json`文件的内容：
- en: '[PRE1]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, we need to run the NPM install command in the command window by navigating
    to the application folder to install the required dependencies specified in `package.json`:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要在命令窗口中运行NPM install命令，通过导航到应用程序文件夹来安装`package.json`中指定的必需依赖项：
- en: '![](img/image_01_008-2.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_01_008-2.png)'
- en: Execute the NPM command to install the dependencies specified in package.json
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 执行NPM命令来安装package.json中指定的依赖项
- en: 'Now, you will have all the dependencies added to the project under the `node_modules`
    folder, as shown in this screenshot:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您将会在`node_modules`文件夹下添加所有的依赖项，如下图所示：
- en: '![](img/image_01_009-2.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_01_009-2.png)'
- en: Dependencies under theÂ node_modules folder
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`node_modules`文件夹下的依赖项'
- en: 'Now, let''s run this application. To run it, execute the following command
    in the command window:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们运行这个应用程序。要运行它，在命令窗口中执行以下命令：
- en: '[PRE2]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Open any browser and navigate to `http://localhost:3000/`; you will findÂ the
    following page, whichÂ is rendered through our Angular application, displayed.
    Running this command builds the application, starts the lite-server, and hosts
    the application on it.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开任何浏览器，并导航到`http://localhost:3000/`；您将会在应用程序中看到以下页面。运行这个命令会构建应用程序，启动lite-server，并在上面托管应用程序。
- en: '![](img/image_01_010-2.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_01_010-2.png)'
- en: Activating the debug window in VS Code
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在VS Code中激活调试窗口
- en: 'Let''s now walk through the content of `index.html`. The following is the content
    of `index.html`:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们详细看一下`index.html`的内容。以下是`index.html`的内容：
- en: '[PRE3]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: So far, we have seen how to create an Angular application by cloning the official
    QuickStart repository from GitHub. We will cover the steps to create Angular applications
    in detail in the upcoming chapters. Note that the scripts are loaded using System.js.
    System.js is the module loader that loads the modules during runtime.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到了如何通过克隆GitHub上的官方QuickStart存储库来创建Angular应用程序。我们将在接下来的章节详细介绍创建Angular应用程序的步骤。请注意，脚本是使用System.js加载的。System.js是在运行时加载模块的模块加载器。
- en: The architecture of Angular
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Angular的架构
- en: '* * *'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Before we jump onto our Hello World application on Angular, let me give you
    a quick overview of the Angular architecture. The architecture of Angular comprises
    of eight core building blocks: a module, component, template, metadata, data binding,
    service, directive, and dependency injection.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们跳转到Angular上的Hello World应用程序之前，请让我快速介绍一下Angular的架构。Angular的架构由八个核心构建块组成：模块，组件，模板，元数据，数据绑定，服务，指令和依赖注入。
- en: '![](img/image_01_011.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_01_011.png)'
- en: Architecture of Angular
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: Angular的架构
- en: An Angular application normally starts with the designing of templates with
    Angular tags or markups. Then, we write components to handle the templates. The
    application-specific logic will be added to services. Finally, the starting component
    or root component will be passed on to the Angular bootstrapper.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 一个Angular应用程序通常是从使用Angular标签或标记设计模板开始。然后，我们编写组件来处理模板。应用程序特定的逻辑将添加到服务中。最后，起始组件或根组件将传递给Angular启动器。
- en: When we run the application, Angular takes the responsibility of presenting
    the template to the browser and takes care of user interactions with the elements
    in the template according to the logic provided in the components and directives.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行应用程序时，Angular负责向浏览器呈现模板，并根据组件和指令中提供的逻辑处理模板中元素的用户交互。
- en: 'Let''s see the objective of each block of Angular in the following points:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看Angular的每个模块的目标：
- en: Any Angular application will be comprised of a collection of components.
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何Angular应用程序都将由一组组件组成。
- en: Services will be injected into components.
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务将被注入组件中。
- en: Templates are responsible for rendering the components in the form of HTML.
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模板负责以HTML形式呈现组件。
- en: Components hold an application logic that supports the views or templates.
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组件包含支持视图或模板的应用程序逻辑。
- en: Angular itself is a collection of modules. In Angular 1, the main module or
    application module is bootstrapped using the `ng-app` directive. We can include
    other lists of modules that our application module or main module is dependent
    on; they will be defined in the empty array in `angular.module('myApp', [])`.
    Angular uses ES6 modules, and the functions or variables defined in modules should
    be exported explicitly to be consumed in other modules. The exported functions
    or variables are made available in other modules using the import keyword followed
    by the function name and then a from keyword followed by the module name. For
    example, `import {http}` from `@angular/http`.
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular本身是一组模块。在Angular 1中，使用`ng-app`指令引导主模块或应用程序模块。我们可以包含我们的应用程序模块或主模块依赖的其他模块列表；它们将在`angular.module('myApp',
    [])`中定义为空数组。Angular使用ES6模块，模块中定义的函数或变量应显式导出以供其他模块消费。通过使用import关键字，导出的函数或变量可在其他模块中使用，后跟函数名，然后跟随模块名。例如，`import
    {http}` from `@angular/http`。
- en: Each Angular library is a facade of many private modules that are logically
    related.
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个Angular库实际上是许多相关的私有模块的外观。
- en: Directives provide instructions to render the templates.
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指令提供指令以呈现模板。
- en: We will see each building block of the Angular architecture in detail in the
    subsequentÂ chapters.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在接下来的章节中详细介绍Angular架构的每个构建块。
- en: Summary
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: '* * *'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: That was easy, wasn't it? We just introduced you to the Angular framework.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 很简单，不是吗？我们刚刚向您介绍了Angular框架。
- en: We started with the history of AngularJS. Then, we discussed the benefits of
    AngularJS and the birth of AngularJS. We discussed what's new in Angular and gave
    you a brief introduction to the architecture of Angular.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从AngularJS的历史开始。然后，我们讨论了AngularJS的优点和AngularJS的诞生。我们讨论了Angular的新功能，并对Angular的架构进行了简要介绍。
- en: We also saw what is needed and how to set up a development environment in order
    to write an Angular application.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还看到了编写Angular应用程序所需的开发环境设置。
- en: Finally, we did a walk-through on how to create your first Angular application
    using Visual Studio Code and Node.js.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们演示了如何使用Visual Studio Code和Node.js创建你的第一个Angular应用程序。
- en: We had a great start and learned a few basics in this chapter. However, this
    is just the beginning. In the next chapter, we will discuss some of the core building
    blocks of the Angular architecture, such as a module, component, template, and
    directive. Let's get the ball rolling!
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 这一章节我们有了一个很好的开端，在学习了一些基础知识。然而，这只是开始。在下一章中，我们将讨论Angular架构的一些核心构建模块，比如模块、组件、模板和指令。让我们开始吧！
