- en: Chapter 7. User Interface Animation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第七章 用户界面动画
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下主题：
- en: Creating an animated login form
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个动态登录表单
- en: Adding photo zoom
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加照片放大功能
- en: Creating an animated content slider
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个动态内容滑块
- en: Animating background images
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 背景图像动画
- en: Creating an animated navigation menu
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个动态导航菜单
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Using jQuery, it is possible to enhance common user interface elements with
    attractive animations. These animations can supply interactive actions to heighten
    the user experience of any website or web application. This chapter shows you
    how to create some popular user interfaces with modern animations, which you can
    use in new projects or current websites.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 jQuery，可以通过引人注目的动画增强常见的用户界面元素。这些动画可以为任何网站或 Web 应用程序提供交互式操作，从而提升用户体验。本章将向您展示如何使用现代动画创建一些流行的用户界面，您可以在新项目或当前网站中使用这些动画。
- en: Creating an animated login form
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个动画登录表单
- en: The login form is the main entry point to many of the websites and web applications—first
    impressions are everything. Using jQuery animations, we can create a login form
    that is animated when it is opened, closed, and there's an error, creating a quality
    user experience that is reinforced through the animations.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 登录表单是许多网站和 Web 应用程序的主要入口点——第一印象至关重要。使用 jQuery 动画，我们可以创建一个在打开、关闭和出现错误时都会进行动画处理的登录表单，从而创造出通过动画加强的高品质用户体验。
- en: This recipe requires a web server that supports PHP. This sever can be hosted
    in the cloud or a simple local development server. Before starting with this recipe,
    ensure that you have this set up.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例需要支持 PHP 的 Web 服务器。这个服务器可以托管在云中或一个简单的本地开发服务器上。在开始本示例之前，请确保您已经完成了这个设置。
- en: Getting ready
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Create `recipe-1.html`, `recipe-1.js`, and `recipe.css` in the same directory
    as the latest version of the jQuery library. As we are creating a login form,
    we are also going to need a PHP script on which to post our login data. Create
    a PHP file named `index.php` inside the web root of a web server and add the following
    code:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在与最新版本的 jQuery 库相同的目录中创建 `recipe-1.html`、`recipe-1.js` 和 `recipe.css`。因为我们正在创建一个登录表单，所以我们还需要一个
    PHP 脚本来发布我们的登录数据。在 Web 服务器的 Web 根目录内创建一个名为 `index.php` 的 PHP 文件，并添加以下代码：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In a real-world implementation, the PHP script would authenticate the user's
    credentials against a database record. To keep this recipe simple and focus on
    the jQuery code, our PHP code simply performs a string comparison of the user-submitted
    username and password for `MyUsername` and `MyPassword`.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际实现中，PHP 脚本将对用户的凭据进行验证，并与数据库记录进行比对。为了保持这个示例简单，并专注于 jQuery 代码，我们的 PHP 代码仅对用户提交的用户名和密码进行字符串比较，分别为
    `MyUsername` 和 `MyPassword`。
- en: How to do it…
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤…
- en: 'To create the animated login form that uses the preceding PHP script, perform
    the following step-by-step instructions:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建使用上述 PHP 脚本的动画登录表单，请按照以下逐步说明操作：
- en: 'Add the following HTML code to `recipe-1.html`, which creates the login form
    and the button to open it:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下 HTML 代码添加到 `recipe-1.html` 中，创建登录表单和打开它的按钮：
- en: '[PRE1]'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Add the following CSS code to `recipe-1.css` to add basic styles to the web
    page:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下 CSS 代码添加到 `recipe-1.css` 中，为网页添加基本样式：
- en: '[PRE2]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Add the following jQuery code to `recipe-1.js` to allow the user to open and
    use the login form:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下 jQuery 代码添加到 `recipe-1.js` 中，以允许用户打开和使用登录表单：
- en: '[PRE3]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Open `recipe-1.html` in a web browser, click on the **Open Login Box** button,
    and you will be presented with the interface shown in the following screenshot:![How
    to do it…](img/0896OS_07_01.jpg)
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Web 浏览器中打开 `recipe-1.html`，单击 **打开登录框** 按钮，您将看到以下截图中显示的界面：![操作步骤](img/0896OS_07_01.jpg)
- en: How it works…
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: A website that allows users to have accounts and log in to them will typically
    have a login button available somewhere in the main navigation. The HTML code
    in this recipe creates a very basic web page with a single button to represent
    where the user can access the login form. The HTML code also provides the basic
    login form, which by default is hidden using CSS. The CSS code provides the positioning
    for the login form and the styles for the login errors and form buttons. In addition
    to the CSS that initially hides the login form, it also sets the value of the
    login form's top position to a negative number, forcing the login form off the
    page. This allows us to create slide-in animation to bring the login box into
    the user's view.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 允许用户拥有帐户并登录到这些帐户的网站通常会在主导航的某个地方提供一个登录按钮。本教程中的HTML代码创建了一个非常基本的网页，只有一个按钮来表示用户可以访问登录表单的位置。HTML代码还提供了基本的登录表单，默认情况下使用CSS隐藏。CSS代码提供了登录表单的定位以及登录错误和表单按钮的样式。除了最初隐藏登录表单的CSS之外，它还将登录表单的顶部位置的值设置为负数，将登录表单强制移出页面。这样我们就可以创建滑入动画，将登录框带入用户的视野。
- en: 'The first part of the jQuery code creates a click event handler that listens
    for a click on the login button, shown as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery代码的第一部分创建了一个点击事件处理程序，用于监听登录按钮的点击，如下所示：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: When the button with the `open-login` class is clicked on by the user, the jQuery's
    `fadeIn()` function is used to fade in the hidden login form and the `animate()`
    function is used to move the login form onto the screen, creating the slide-in
    effect.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击具有`open-login`类的按钮时，使用jQuery的`fadeIn()`函数来淡入隐藏的登录表单，使用`animate()`函数将登录表单移动到屏幕上，创建滑入效果。
- en: 'A click event handler is created to listen for the `close-login` button being
    clicked on, which then triggers the reverse animation to fade the login box out
    and move it off the screen, shown as follows:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 创建了一个点击事件处理程序，用于监听点击`close-login`按钮的事件，然后触发反向动画，淡出登录框并将其移出屏幕，如下所示：
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Both animation functions have the duration set to 500 milliseconds, allowing
    the fade and position animations to start and finish at the same time.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 两个动画函数的持续时间都设置为500毫秒，允许淡入和位置动画同时开始和结束。
- en: 'The main functionality of this recipe is placed within the callback function
    for the login button''s click event handler; this is shown as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程的主要功能放在登录按钮的点击事件处理程序的回调函数中；如下所示：
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This click event handler, which listens for a click on the login button, takes
    the input data and submits it to the PHP script we created at the beginning of
    this recipe. First, the username and password are collected from the form and
    stored in the `username` and `password` variables, shown as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这个点击事件处理程序监听登录按钮的点击，获取输入数据并将其提交给我们在本教程开始时创建的PHP脚本。首先，从表单中收集用户名和密码，并存储在`username`和`password`变量中，如下所示：
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This data is then sent to the PHP script using jQuery''s built-in AJAX functionality:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这些数据然后通过jQuery的内置AJAX功能发送到PHP脚本：
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The previous code creates an AJAX `POST` request by specifying the URL of the
    PHP file and setting the `type` parameter to `POST`. A data object is also provided,
    which holds the information from the form.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码通过指定PHP文件的URL并将`type`参数设置为`POST`来创建一个AJAX `POST`请求。还提供了一个数据对象，其中包含来自表单的信息。
- en: 'A callback function is specified for the `success` parameter; this is called
    on a successful response from the PHP script, which is shown as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 为`success`参数指定了一个回调函数；这个函数在PHP脚本成功响应时被调用，如下所示：
- en: '[PRE9]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: By creating our PHP code, we know that the response will hold a success value
    of either `true` or `false`. If the success value is `false`, there will be an
    error message to go with it. There is an additional way that an AJAX request can
    fail; this is caused by a server error, for example, `500 file not found`. To
    handle these errors, the jQuery AJAX `.fail()` function should be used. Read more
    about that at [http://api.jquery.com/jquery.ajax/](http://api.jquery.com/jquery.ajax/).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 通过创建我们的PHP代码，我们知道响应将包含一个成功值，要么是`true`要么是`false`。如果成功值是`false`，则会有一个错误消息与之相配。还有一种AJAX请求可能会失败；这是由服务器错误引起的，例如`500文件未找到`。为了处理这些错误，应该使用jQuery
    AJAX `.fail()`函数。更多信息请参阅[http://api.jquery.com/jquery.ajax/](http://api.jquery.com/jquery.ajax/)。
- en: Within the success callback function, we select the `login-msg` element, which
    will be used to print any messages on screen. The success value provided by the
    PHP script is evaluated to determine whether or not the login was successful.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功的回调函数中，我们选择`login-msg`元素，该元素将用于在屏幕上打印任何消息。评估由 PHP 脚本提供的成功值以确定登录是否成功。
- en: 'If the login was successful, the `login-msg` element is updated with a message
    informing the user that the login is successful and the `success` class is added
    to turn the message element green in color, shown as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果登录成功，`login-msg`元素将被更新，其中包含通知用户登录成功的消息，并添加`success`类以使消息元素呈绿色，如下所示：
- en: '[PRE10]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `removeClass()` function is used to ensure that the `error` class is not
    present as a remnant of any previous login attempts. In a real-world situation,
    you may want to redirect the user to the members' area of the website. This code
    can be replaced to do just that; see the *There's more…* section of this recipe.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`removeClass()`函数用于确保`error`类不作为任何先前登录尝试的遗留物存在。在实际情况下，您可能希望将用户重定向到网站的会员区域。这段代码可以被替换为执行此操作；请参阅本配方的*还有更多...*部分。'
- en: 'If the login attempt is not successful, the `error` class is added to the `login-msg`
    element with the message from the PHP script. We use `response.error` to retrieve
    this data. A series of animation functions are also used to move the login box
    from left to right to create the shake effect, emphasizing the error to the user;
    this is shown as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果登录尝试失败，则向`login-msg`元素添加了`error`类，并附有 PHP 脚本的消息。我们使用`response.error`来检索此数据。还使用一系列动画函数将登录框从左到右移动，以创建摇晃效果，强调错误给用户的重要性；如下所示：
- en: '[PRE11]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: There's more…
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'The successful login section of the jQuery callback can be easily replaced
    to redirect the user, if desired. Native JavaScript code can be used to send the
    user to the desired page using the following code, replacing `/memebers.php` with
    the appropriate URL, which is shown as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要，jQuery 回调的成功登录部分可以轻松替换为重定向用户的操作。可以使用以下代码的原生 JavaScript 代码将用户发送到所需页面，将`/memebers.php`替换为适当的
    URL，如下所示：
- en: '[PRE12]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: See also
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 请参阅
- en: '[Chapter 5](ch05.html "Chapter 5. Form Handling"), *Form Handling*'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第 5 章](ch05.html "第 5 章. 表单处理")，*表单处理*'
- en: Adding photo zoom
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加照片缩放
- en: Photo zoom is a great effect that can be used in many interfaces to add extra
    user interaction to a photo gallery or product page so that the user can see smaller
    images clearly. This recipe will show you how to add the photo zoom effect to
    four images in a list.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 照片缩放是一个很棒的效果，可以在许多界面中使用，以增加对照片库或产品页面的额外用户交互，使用户可以清晰地看到较小的图像。这个配方将向您展示如何将照片缩放效果添加到列表中的四张图片中。
- en: Getting ready
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You are going to need four images to use in this recipe. Make sure they are
    fewer than 800 px wide and 600 px high. Once you have collected the four images
    that will be used in this recipe, create `recipe-2.html`, `recipe-2.css`, and
    `recipe-2.js` in the same directory as these images and the jQuery library.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，你需要四张图片。确保它们的宽度不超过`800 px`，高度不超过`600 px`。一旦收集到将在这个配方中使用的四张图片，请在与这些图片和
    jQuery 库相同的目录中创建`recipe-2.html`、`recipe-2.css`和`recipe-2.js`。
- en: How to do it…
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Perform the following instructions to add the zoom effect to your chosen images:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下说明以将缩放效果添加到您选择的图像中：
- en: 'Add the following HTML code to `recipe-2.html`; ensure that you update the
    image references that correspond to the images you have chosen:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下 HTML 代码添加到`recipe-2.html`中；确保更新与您选择的图像对应的图像引用：
- en: '[PRE13]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Add the following CSS code to `recipe-2.css` to style and position the images:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下 CSS 代码添加到`recipe-2.css`中以样式化和定位图像：
- en: '[PRE14]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Add the following jQuery code to `recipe-2.js` to add the photo zoom animation
    to the images when the user hovers over them:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下 jQuery 代码添加到`recipe-2.js`中，以在用户将鼠标悬停在图像上时为图像添加照片缩放动画：
- en: '[PRE15]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Open `recipe-2.html` in a web browser, and hover over one of the four images
    to see the zoom animation, shown as follows:![How to do it…](img/0896OS_07_02.jpg)
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在网页浏览器中打开`recipe-2.html`，将鼠标悬停在四张图像之一上，即可看到缩放动画，如下所示：![执行方法...](img/0896OS_07_02.jpg)
- en: How it works…
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The HTML code in this recipe is very basic and simply creates a division element
    with the class name `container`, which is centered on the page using CSS. Inside
    the frame division, there is an unordered list element that has four children,
    each containing an image.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方中的 HTML 代码非常基本，只是创建一个带有类名`container`的 division 元素，该元素在页面上使用 CSS 居中。在 frame
    division 内部，有一个无序列表元素，它有四个子元素，每个子元素都包含一个图像。
- en: The CSS code removes any margin and padding from the unordered list, sets its
    children to display inline, and sets each child element's overflow property to
    `hidden`. This is to allow us to initially load the images larger than the list
    element without showing any overflow to provide the zoomed-in effect.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: CSS代码从无序列表中删除任何边距和填充，将其子项设置为内联显示，并将每个子元素的溢出属性设置为`hidden`。这样做是为了让我们最初加载比列表元素大的图像而不显示任何溢出，以提供放大的效果。
- en: The CSS code also sets the image's top and left positions to `-50%` so that
    they are centered inside the list element. The image's opacity is also set to
    `0.5` to prevent the images from standing out initially.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: CSS代码还将图像的顶部和左侧位置设置为`-50%`，以使它们居中在列表元素内。图像的不透明度也设置为`0.5`，以防止图像最初显眼。
- en: 'At the beginning of the jQuery code, an `images` variable is declared, which
    is used to store image data that can be reused later in the code. Within the jQuery
    on-load block, two event handlers are attached to the document to listen for `mouseover`
    and `mouseout` events on the photo list elements, as shown in the following code:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在jQuery代码的开头，声明了一个`images`变量，用于存储稍后可以在代码中重复使用的图像数据。在jQuery的加载块内，将两个事件处理程序附加到文档上，以监听照片列表元素上的`mouseover`和`mouseout`事件，如下所示：
- en: '[PRE16]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Inside the `mouseover` event handler, `$(this).find(''img'')` is used to find
    the image within the hovered list element. With this image selected, its size
    is stored in the `images` variable using `$(this).index()` to get the list element''s
    index, as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在`mouseover`事件处理程序内，使用`$(this).find('img')`来查找鼠标悬停的列表元素内的图像。选定了此图像后，使用`$(this).index()`将其大小存储在`images`变量中，如下所示：
- en: '[PRE17]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Then, using the jQuery''s `animate()` function, the image''s width and height
    are set to match the size of the list element to create the zoom-out effect. Its
    top and left positions are also set to `0`, overwriting the `-50%` positions set
    within the CSS to ensure that the image fills 100 percent of the list element.
    The image''s opacity is set to `1` (that is, 100 percent) so that the hovered
    and zoomed-in image stands out among the other images. The code for this is shown
    as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，使用jQuery的`animate()`函数，将图像的宽度和高度设置为与列表元素的大小相匹配，以创建缩小效果。其顶部和左侧位置也设置为`0`，覆盖了CSS中设置的`-50%`位置，以确保图像填满列表元素的100%。图像的不透明度设置为`1`（即100%），以便悬停和放大的图像在其他图像中突出显示。此代码如下所示：
- en: '[PRE18]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Inside the `mouseout` event handler, the previously discussed animation is
    effectively reversed using the stored image information and resets the image back
    to where it was before the mouse hover, executed as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在`mouseout`事件处理程序内，先前讨论的动画使用存储的图像信息有效地被反转，并将图像重置回鼠标悬停前的位置，执行如下：
- en: '[PRE19]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In the preceding code, you can see that the `images` array is referenced using
    `$(this).index()` to get the image's original height and width. Its top and left
    positions are once again set to `-50%`, centering it inside the list element.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，可以看到使用`$(this).index()`引用了`images`数组，以获取图像的原始高度和宽度。再次将其顶部和左侧位置设置为`-50%`，使其在列表元素内居中。
- en: Note
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '`_image.finish();` is used in both the event handler callbacks to finish any
    current animation. This prevents strange results when the user rapidly toggles
    from one image to the other.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在事件处理程序回调中都使用`_image.finish();`来完成任何当前动画。这可以防止用户快速切换图像时出现奇怪的结果。
- en: See also
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '*Creating an animated navigation menu*'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建一个动画导航菜单*'
- en: Creating an animated content slider
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个动画内容滑块
- en: You are probably aware that there is a whole forest of jQuery content slider
    plugins, tutorials, and downloadable scripts online, which are available for use
    and most of the content is free of charge. Content sliders are incredibly popular
    because they are a very attractive and eye-catching way to display important content
    to a user, such as images, news, and promotions. This recipe will show you how
    easy it is to create a content slider with jQuery. The slider used in this recipe
    will allow you to easily customize its look and feel using CSS so you can make
    it your own.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经意识到，在线有一整片jQuery内容滑块插件、教程和可下载脚本的森林，其中大部分内容都可以免费使用。内容滑块非常受欢迎，因为它们是向用户展示重要内容（如图像、新闻和促销活动）的一种非常吸引人和引人注目的方式。本篇文章将向您展示如何使用jQuery轻松创建内容滑块。本篇食谱中使用的滑块将允许您使用CSS轻松自定义其外观和感觉，以使其符合您自己的需求。
- en: Getting ready
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Create the usual recipe files: `recipe-3.html`, `recipe-3.css` and `recipe-3.js`
    in the same directory as your jQuery library.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在与您的 jQuery 库相同的目录中创建通常的配方文件：`recipe-3.html`、`recipe-3.css` 和 `recipe-3.js`。
- en: How to do it…
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Perform the following step-by-step instructions to create the attractive content
    slider:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下逐步说明以创建引人入胜的内容滑块：
- en: 'Add the following HTML code to `recipe-3.html`, which creates the basic web
    page and the structure of the content slider:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下 HTML 代码添加到 `recipe-3.html`，其中包括基本网页和内容滑块的结构：
- en: '[PRE20]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Add the following CSS code to `recipe-3.css` to add basic styling and position
    the content slider:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `recipe-3.css` 中添加以下 CSS 代码以添加基本样式并定位内容滑块：
- en: '[PRE21]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Add the following jQuery code to `recipe-3.js` to allow the user to toggle
    between the content slides:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `recipe-3.js` 中添加以下 jQuery 代码，以允许用户在内容幻灯片之间切换：
- en: '[PRE22]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: How it works…
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The slider content is an unordered list whose children contain the content that
    is to be displayed within each slide. Underneath the content list is another unordered
    list element, which will be populated dynamically by jQuery to create the navigation
    between each slide.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 滑块内容是一个无序列表，其子元素包含要在每个幻灯片中显示的内容。在内容列表下面是另一个无序列表元素，jQuery 将动态填充该元素，以创建每个幻灯片之间的导航。
- en: The CSS code in this recipe is used to position the slider frame and set its
    static width and height. The slider frame's overflow value is set to `hidden`
    so that only one slide is visible at a time. The slider content list item elements
    are set to `float left` so that they are displayed inline, making it possible
    to shift them into view using jQuery animations.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方中的 CSS 代码用于定位滑块框架并设置其静态宽度和高度。将滑块框架的溢出值设置为 `hidden`，以便一次只能看到一个幻灯片。将滑块内容列表项元素设置为
    `float left`，以便以行内方式显示它们，从而可以使用 jQuery 动画将它们移入视图中。
- en: 'The first section of the jQuery code selects all of the slider content children
    and stores them within a local variable. For each slider content list element,
    a navigation list item is created and appended to the `slider-nav` unordered list,
    which links to the slider content''s index as shown in the following code; the
    `active` class is also added to the first navigation anchor:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 代码的第一部分选择所有滑块内容子元素并将它们存储在一个局部变量中。对于每个滑块内容列表元素，都会创建一个导航列表项并将其附加到 `slider-nav`
    无序列表中，该列表项链接到滑块内容的索引，如下代码所示；还将 `active` 类添加到第一个导航锚点：
- en: '[PRE23]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'In order for the slider content items to float in line with each other, the
    `slider-content` unordered list element needs to be wide enough to allow it. As
    the CSS code cannot know how many slides the slider has, jQuery is used to count
    the number of content items and then multiply this value by the slider''s width,
    applying this result to the `slider-content` element using the jQuery `width()`
    function, as follows:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使滑块内容项能够与彼此一起浮动，需要使 `slider-content` 无序列表元素足够宽。由于 CSS 代码无法知道滑块有多少个幻灯片，因此使用
    jQuery 计算内容项的数量，然后将此值乘以滑块的宽度，使用 jQuery `width()` 函数将此结果应用于 `slider-content` 元素，如下所示：
- en: '[PRE24]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Executing the previous code will ensure that the `slider-content` unordered
    list element is wide enough to allow for the inline positioning of each of the
    list elements.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 执行上述代码将确保 `slider-content` 无序列表元素的宽度足够，以允许每个列表元素的行内定位。
- en: 'The last part of the jQuery code attaches a click event handler to the document
    to listen for clicks on the slider navigation. When the user clicks on one of
    the navigation elements, the callback function for this handler is called as follows:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 代码的最后部分将点击事件处理程序附加到文档，以便监听滑块导航上的点击。当用户点击导航元素之一时，将调用此处理程序的回调函数如下所示：
- en: '[PRE25]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Within the callback function, the hash value of the clicked link is retrieved
    using `var index = this.hash.replace("#", "");`, which will result in the index
    integer of the slide. Using this value, the jQuery `animate()` function can be
    used to set a negative-left position on the `slider-content` unordered list element;
    this will animate the slider content to show the selected slide. The `removeClass()`
    function is used to remove the `active` class from all of the anchor elements
    within the navigation list. Then, `addClass` is used to add the active class to
    the clicked element. This will indicate to the user which slide in the navigation
    has been selected, because it will be lighter in color than the other navigation
    items.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在回调函数中，使用 `var index = this.hash.replace("#", "");` 检索点击链接的哈希值，这将导致幻灯片的索引整数。利用这个值，可以使用
    jQuery 的 `animate()` 函数在 `slider-content` 无序列表元素上设置负左位置；这将使幻灯片内容动画显示所选幻灯片。`removeClass()`
    函数用于从导航列表中的所有锚元素中移除 `active` 类。然后，使用 `addClass` 将 `active` 类添加到点击的元素上。这将向用户指示已选择导航中的哪个幻灯片，因为它会比其他导航项的颜色浅。
- en: There's more…
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: 'Many of the popular jQuery content sliders have an `auto` mode in which each
    of the content slides are looped through automatically without any user interaction.
    This can be easily achieved by adding a little more jQuery code to the recipe.
    Add the following jQuery code to `recipe-3.js` at the bottom of the `$(function(){});`
    block if you would like this functionality:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 许多流行的 jQuery 内容滑块都有一个 `auto` 模式，其中每个内容幻灯片都会自动循环，无需任何用户交互。可以通过在示例中添加更多的 jQuery
    代码轻松实现这一点。如果想要此功能，请将以下 jQuery 代码添加到 `recipe-3.js` 的 `$(function(){});` 块的底部：
- en: '[PRE26]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Using the native JavaScript function `setInterval()`, it is possible to execute
    a function continuously for a specified interval. In the preceding example, the
    specified function will be executed after every 3000 milliseconds.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 使用原生 JavaScript 函数 `setInterval()`，可以连续执行指定间隔的函数。在上述示例中，指定的函数将在每 3000 毫秒后执行。
- en: In the preceding code, a `count` variable is declared to keep track of the current
    slide. Inside the function provided to `setInterval`, the `count` value is set
    to `0` if it has reached the maximum amount of available slides. The jQuery animation
    function is then used in the same way as the click event handler to animate the
    next content slide into view. Once again, `$(".slider-nav li a").removeClass("active");`
    is used to remove the `active` class from all of the navigation anchors and then
    `$(".slider-nav li").find("a[href='#" + count + "']").addClass("active");` is
    used to add the class only to the element that links to the next content slide.
    Finally, the count is incremented so that the next iteration animates the next
    content slide in view.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，声明了一个 `count` 变量来跟踪当前幻灯片。在提供给 `setInterval` 的函数内部，如果已达到可用幻灯片的最大数量，则将
    `count` 值设置为 `0`。然后，jQuery 动画函数与单击事件处理程序的方式相同，用于将下一个内容幻灯片动画显示出来。再次使用 `$(".slider-nav
    li a").removeClass("active");` 从所有导航锚点中移除 `active` 类，然后使用 `$(".slider-nav li").find("a[href='#"
    + count + "']").addClass("active");` 仅将类添加到链接到下一个内容幻灯片的元素上。最后，增加计数，以便下一次迭代将下一个内容幻灯片动画显示出来。
- en: It is also worth mentioning that every time the jQuery's `append()` function
    is called, the DOM is redrawn. This can cause the application to slow down if
    many items are added using the `append()` function, like in this recipe. A simple
    way to avoid this is by creating a string of all the list elements that are to
    be added and include a single `append()` function after the loop.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 还值得一提的是，每次调用 jQuery 的 `append()` 函数时，DOM 都会重新绘制。如果使用 `append()` 函数添加了许多项目，例如在这个示例中，这可能会导致应用程序变慢。避免这种情况的一种简单方法是通过创建要添加的所有列表元素的字符串，并在循环后包含单个
    `append()` 函数。
- en: See also
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: '*Animating background images*'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*动画背景图*'
- en: Animating background images
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动画背景图
- en: Fullscreen image backgrounds can provide a very attractive splash screen for
    any website. This recipe will show you how to use jQuery to dynamically change
    the background image of your website.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 全屏图像背景可以为任何网站提供非常吸引人的闪屏。本示例将向您展示如何使用 jQuery 动态更改网站的背景图像。
- en: Getting ready
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create `recipe-4.html`, `recipe-4.css`, and `recipe-4.js` in the same directory
    as the jQuery library. For this recipe, you will also need a set of images that
    will be used as the background images. Find three or four large images (upto 1280
    X 1024 px in size), and save them in the same directory as the three files you
    have just created.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在与 jQuery 库相同的目录中创建 `recipe-4.html`、`recipe-4.css` 和 `recipe-4.js`。对于此示例，您还需要一组将用作背景图像的图像。找到三到四个大图像（最大尺寸为
    1280 x 1024 像素），并将它们保存在您刚刚创建的三个文件相同的目录中。
- en: How to do it…
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实施方法如下：
- en: Have the three files you have just created open and ready for editing.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 打开并准备编辑刚刚创建的三个文件。
- en: 'Add the following HTML code to `recipe-4.html` to create the basic web page
    and elements to hold the background image and text:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下 HTML 代码添加到 `recipe-4.html` 中，以创建基本的网页和用于容纳背景图像和文本的元素：
- en: '[PRE27]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Add the following CSS code to `recipe-4.css` to apply basic styles to the newly
    created web page; ensure that you update the image reference to correspond with
    one of your chosen images:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下 CSS 代码添加到 `recipe-4.css` 中，将基本样式应用于新创建的网页；确保更新图像引用以与您选择的图像之一相对应：
- en: '[PRE28]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Add the following jQuery code to `recipe-4.js` to activate the background animation
    in the `background` division element that you have just added to `recipe-4.html`:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下 jQuery 代码添加到 `recipe-4.js` 中，以激活刚刚添加到 `recipe-4.html` 的 `background` 分割元素中的背景动画：
- en: '[PRE29]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Update the filenames in the _`images` array at the beginning of `recipe-4.js`
    to match the filenames of the images you have chosen for this recipe.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `recipe-4.js` 开头的 _`images` 数组中更新文件名，使其与您为此示例选择的图像文件名匹配。
- en: How it works…
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理如下：
- en: The basic web page created in this recipe has two main parts. Firstly, there
    is a division element with the `background` class, which is made to fill the entire
    screen and use the chosen images as its background. Secondly, there is a `text-frame`
    division element, which simply holds some text floating in the center of the screen.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例创建的基本网页主要分为两个部分。首先是一个具有 `background` 类的分割元素，它被制作成填满整个屏幕，并使用所选的图像作为背景。其次，有一个
    `text-frame` 分割元素，简单地将一些文本浮动在屏幕中央。
- en: 'The CSS code in `recipe-4.css` sets the background element''s position to `absolute`
    and its left, right, bottom, and top positions to `0`, forcing it to fill the
    entire screen. Its background property is then set using the following code:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`recipe-4.css` 中的 CSS 代码将背景元素的位置设置为 `absolute`，并将其左、右、底部和顶部位置设置为 `0`，强制其填满整个屏幕。然后使用以下代码设置其背景属性：'
- en: '[PRE30]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The background option sets one of the chosen images as its initial background
    and ensures that it is centered and fixed. The `background-size` property is used
    to ensure that the background image always fills 100 percent of the `background`
    division element.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 背景选项将其中一个所选图像设置为其初始背景，并确保其居中和固定。使用 `background-size` 属性确保背景图像始终填满 `background`
    分割元素的 100%。
- en: A similar CSS is used to ensure that the `text-frame` element fills the screen,
    and using percent and auto margins, the `text-inner` element that holds the text
    is centered vertically and horizontally.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 使用类似的 CSS 确保 `text-frame` 元素填满屏幕，并使用百分比和自动边距，使包含文本的 `text-inner` 元素在垂直和水平方向上居中。
- en: The `_images` array at the beginning of `recipe-4.js` holds the references to
    the chosen background images. The `index` variable is used to keep track of the
    currently displayed background image. Within the jQuery on-load function, `setInterval`
    is declared to execute a set of animations to change the background image every
    six seconds. This is similar to the previous recipe's *There's more...* section.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '`recipe-4.js` 开头的 `_images` 数组保存了对所选背景图像的引用。`index` 变量用于跟踪当前显示的背景图像。在 jQuery
    加载函数内部，声明 `setInterval` 来执行一组动画，以在六秒钟内更改背景图像。这类似于上一个示例的 *There''s more...* 部分。'
- en: 'Because the jQuery''s `animate()` function does not support animating the background
    image directly, we have to provide a workaround. Inside the `setInterval()` function,
    the `animate()` function is used on the background element''s opacity to fade
    the element out. Then, by specifying a callback for the jQuery''s `animate()`
    function, the background element''s `background-image` property is modified using
    jQuery''s `css()` function as soon as the animation is completed. Using `css()`,
    the background image is changed and the `animate()` function is used again to
    change the opacity back to `1`, which fades in the element. Using the index value
    to reference the `_images` array, it is possible to select a different background
    image for every iteration of the `setInterval()` function, as follows:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 因为jQuery的`animate()`函数不支持直接对背景图像进行动画处理，所以我们必须提供一个变通方法。在`setInterval()`函数中，将`animate()`函数用于背景元素的不透明度，以将元素淡出。然后，通过为jQuery的`animate()`函数指定回调，一旦动画完成，就使用jQuery的`css()`函数修改背景元素的`background-image`属性。使用`css()`，更改背景图像，然后再次使用`animate()`函数将不透明度更改回`1`，以淡入元素。通过引用`_images`数组的索引值，可以在`setInterval()`函数的每次迭代中选择不同的背景图像，如下所示：
- en: '[PRE31]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Once the last animation is completed, the index value is incremented by one
    to ensure that the next iteration displays a different image.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦最后一个动画完成，索引值将增加一，以确保下一次迭代显示不同的图像。
- en: See also
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '*Creating an animated content slider*'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建一个动画内容滑块*'
- en: Creating an animated navigation menu
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建动画导航菜单
- en: Your website's navigation allows your visitors to easily find the content hosted
    on your site. Providing the user with a fun and interactive navigation menu that
    is also easy to use can make a lasting impression on them. This recipe shows you
    how to create a modern animated navigation menu.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 您的网站导航允许访问者轻松找到托管在您网站上的内容。为用户提供一个既有趣又交互式的导航菜单，并且易于使用，可以给他们留下深刻的印象。本秘诀向您展示了如何创建一个现代动画导航菜单。
- en: Getting ready
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create `recipe-5.html`, `recipe-5.css`, and `recipe-5.js` in the same directory
    as the latest version of the jQuery library.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在与最新版本的jQuery库相同的目录中创建`recipe-5.html`、`recipe-5.css`和`recipe-5.js`。
- en: How to do it…
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作方法…
- en: 'Perform all of the following steps to create a unique and modern animated navigation
    menu for any site:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下所有步骤，为任何站点创建一个独特和现代的动画导航菜单：
- en: 'Add the following HTML to `recipe-5.html` to create the basic web page, and
    include the newly created files along with the jQuery library:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`recipe-5.html`中添加以下HTML，以创建基本网页，并包括新创建的文件以及jQuery库：
- en: '[PRE32]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Inside the body tags of the HTML code you have just added to `recipe-5.html`,
    add the following code to create the structure for the navigation menu:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`recipe-5.html`中身体标签的HTML代码中，添加以下代码来创建导航菜单的结构：
- en: '[PRE33]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Add the following CSS code to `recipe-5.css` to provide basic styling to the
    navigation menu and web page:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下CSS代码到`recipe-5.css`，为导航菜单和网页提供基本样式：
- en: '[PRE34]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'To add the animations to the navigation menu based on user interaction, add
    the following jQuery code to `recipe-5.js`:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要根据用户交互将动画添加到导航菜单，将以下jQuery代码添加到`recipe-5.js`中：
- en: '[PRE35]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Open `recipe-5.html` in a web browser, and you will be presented with a simplistic
    navigation menu. Hovering over the **About** item will activate an animation and
    present you with the associated submenu as shown in the following screenshot:![How
    to do it…](img/0896OS_07_03.jpg)
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Web浏览器中打开`recipe-5.html`，您将看到一个简单的导航菜单。在**关于**项目上悬停将会启动动画，并向您呈现相关的子菜单，如下面的屏幕截图所示：![操作方法…](img/0896OS_07_03.jpg)
- en: How it works…
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行原理…
- en: This recipe's code will be easy to understand when we break it down piece by
    piece. The HTML code used to create the navigation menu has a division element
    with the class `frame`, which acts as the menu container to control the width
    and position.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们逐步分解时，本秘诀的代码将很容易理解。用于创建导航菜单的HTML代码具有一个带有class `frame`的分区元素，它作为菜单容器来控制宽度和位置。
- en: The menu itself consists of an unordered list element with the navigation class.
    Within this list, there are multiple first-level list elements with anchors acting
    as the menu page links.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 菜单本身由带有导航类的无序列表元素组成。在这个列表中，有多个作为菜单页面链接的锚的一级列表元素。
- en: Each of these first-level links has a `link-content` container element that
    holds two `nav-item` division elements. Styling two of these `nav-item` elements
    differently with CSS allows us to create the drop-in animation as we are only
    showing one of these at once.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 每个这些一级链接都有一个包含两个`nav-item`分区元素的`link-content`容器元素。使用CSS将其中两个`nav-item`元素进行不同的样式设置，可以使我们创建下拉动画，因为我们一次只显示其中一个。
- en: The `about` first-level navigation item also has a submenu. To achieve this,
    the list item contains another unordered list with the `sub-nav` class. Using
    CSS, this subnavigation element is placed over the original first-level page link
    when visible so that the cursor is not moved from that area. This allows us to
    keep the original link in the hovered state and the submenu open until the user's
    mouse leaves the submenu entirely.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '`about`一级导航项也有一个子菜单。为了实现这一点，列表项包含另一个具有`sub-nav`类的无序列表。使用CSS，当子菜单可见时，将此子导航元素放置在原始的一级页面链接上，以便鼠标指针不会离开该区域。这样，我们可以保持原始链接处于悬停状态，并且子菜单保持打开状态，直到用户的鼠标完全离开子菜单。'
- en: The submenu page links follow the same structure as the first-level links in
    which they have two item elements with the same text. This is to allow us to create
    a similar hover animation.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 子菜单页面链接的结构与它们包含两个相同文本的一级链接相同。这样做是为了让我们能够创建类似的悬停动画。
- en: 'Within `recipe-5.js`, the first part attaches a `mouseenter` event handler
    to the document to look for the mouse pointer entering one of the navigation first-level
    links, as follows:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在`recipe-5.js`中，第一部分将`mouseenter`事件处理程序附加到文档上，以查找鼠标指针是否进入导航的一级链接之一，如下所示：
- en: '[PRE36]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: When this happens, the `animate()` function is used on the link's `link-content`
    child to sets its top margin to `-50`. This will move the second `nav-item` class
    into a view that has its background styled orange with CSS. After 200 milliseconds,
    when the animation is complete, an additional callback function is called.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 当发生这种情况时，将在链接的`link-content`子元素上使用`animate()`函数，将其顶部边距设置为`-50`。这将使第二个`nav-item`类移入具有CSS橙色背景的视图中。在200毫秒后，动画完成时，将调用额外的回调函数。
- en: This will execute the code to open any subnavigation menus that the currently
    hovered item contains. Using the `css()` function to first set the subnavigation's
    left position to `0`, bringing it onto the screen, and then using the `animate()`
    function to set the opacity of the element to `1`, will fade the image into view.
    The subnavigation elements are originally positioned off the screen using a left
    position of `-10000` so that they do not get in the way of any clicks the user
    may perform on the page.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 这将执行代码以打开当前悬停项目包含的任何子菜单。首先使用`css()`函数将子菜单的左侧位置设置为`0`，将其带到屏幕上，然后使用`animate()`函数将元素的不透明度设置为`1`，将图像淡入视图中。子菜单元素最初使用左侧位置`-10000`放置在屏幕外，以便它们不会妨碍用户可能在页面上执行的任何点击操作。
- en: The second event handler is for the `mouseleave` event. This event handler checks
    to see whether or not the top-level link, which has just been set to `left`, has
    a subnavigation menu using `if ($(this).parent().find('.sub-nav').length == 0)`.
    If it does not, the hover animation is reversed, setting the `link-content` element's
    top margin back to `0`. This allows us to leave the hovered state active while
    the user is navigating the submenu.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个事件处理程序是针对`mouseleave`事件的。此事件处理程序检查最近设置为`left`的顶级链接是否具有子菜单，使用`if($(this).parent().find('.sub-nav').length
    == 0)`。如果没有，悬停动画将被恢复，将`link-content`元素的顶部边距设为`0`。这样，我们可以在用户浏览子菜单时保持悬停状态处于活动状态。
- en: 'The next event handler is another `mouseleave` event, which handles the user
    leaving the submenu, as follows:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个事件处理程序是另一个`mouseleave`事件处理程序，它处理用户离开子菜单，如下所示：
- en: '[PRE37]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Once the user's mouse has left the submenu, the `animate()` function is used
    to set the submenu's opacity to `0`, fading it out. Then, after the 200-millisecond
    animation has been completed, the `css()` function is used to move the submenu
    -10000 pixels off the screen. Finally, using `find()` to select the first-level
    `link-content` element, the original hover animation is reversed, putting the
    menu back to its dormant state.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦用户的鼠标离开了子菜单，就会使用`animate()`函数将子菜单的不透明度设为`0`，使其淡出。然后，在完成了200毫秒的动画后，使用`css()`函数将子菜单移到屏幕外-10000像素的位置。最后，使用`find()`来选择第一级`link-content`元素，将原始的悬停动画恢复，将菜单放回休眠状态。
- en: There are two additional event handlers attached to the document. The additional
    `mouseenter` and `mouseleave` events are used to create the hover animations for
    the submenu items. The same code and technique is used for first-level navigation
    menu, except that instead of changing the top margin, the left margin is changed
    to animate the `sub-link-content` elements from left to right as opposed to top
    to bottom.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 文档附加了两个额外的事件处理程序。额外的`mouseenter`和`mouseleave`事件用于为子菜单项创建悬停动画。与一级导航菜单相同的代码和技术被使用，只是改变了左边距而不是顶边距，以使`sub-link-content`元素从左到右进行动画，而不是从上到下。
- en: See also
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 亦参见
- en: '*Creating an animated content slider*'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建一个动态内容滑块*'
- en: '*Animating background images*'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*动画背景图片*'
