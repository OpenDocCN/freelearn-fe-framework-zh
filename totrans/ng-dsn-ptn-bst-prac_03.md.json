["```js\nexport function primitive_example() {\n  let name: string;\n  let age: number;\n  let isAlive: boolean;\n  name = \"Mario\";\n  age = 9;\n  isAlive = true;\n  console.log(`Name:${name} Age:${age} is alive:${isAlive ? \"yes\" : \"no\"}`);\n}\n```", "```js\nexport function array_example() {\n  let names: Array<string>;\n  let surnames: string[];\n  names = [\"Mario\", \"Gabriel\", \"Lucy\"];\n  surnames = [\"Camillo\", \"Smith\"];\n  names.forEach((name) => console.log(`Name:${name}`));\n  surnames.forEach((surname) => console.log(`Surname:${surname}`));\n}\n```", "```js\nexport function any_example(){\n  let information:any;\n  information = 'Mario';\n  console.log(`Name: ${information}`);\n  information = 7;\n  console.log(`Age: ${information}`);\n}\n```", "```js\nclass Person {\n  name: string;\n  age: number;\n  constructor(name: string, age: number) {\n    this.name = name;\n    this.age = age;\n  }\n}\nexport function basic_class() {\n  let client: Person = new Person(\"Mario\", 7);\n  console.log(`Name:${client.name} Age:${client.age}`);\n}\n```", "```js\nclass Person {\n  constructor(name, age) {\n    this.name = name;\n    this.age = age;\n  }\n}\nfunction basic_class() {\n  let client = new Person(\"Mario\", 7);\n  console.log(`Name:${client.name} Age:${client.age}`);\n}\n```", "```js\nclass Person {\n  name: string;\n  age: number;\n  constructor(name: string, age: number) {\n    this.name = name;\n    this.age = age;\n  }\n  toString(){\n    return `Name:${this.name} Age:${this.age}`;\n  }\n}\n```", "```js\nclass Person {\n  name: string;\n  age: number;\n  private id:number;\n  constructor(name: string, age: number) {\n    this.name = name;\n    this.age = age;\n    this.id =Math.floor(Math.random() * 1000);\n  }\n  toString(){\n    return `Name:${this.name} Age:${this.age} ID: ${this.id}`;\n  }\n}\n```", "```js\nexport function basic_class() {\n  let client: Person = new Person(\"Mario\", 7);\n  console.log(client.toString());\n  client.id = 100;\n}\n```", "```js\nclass Client extends Person {\n  address: string;\n  constructor(name: string, age: number, address: string) {\n    super(name, age);\n    this.address = address;\n  }\n  toString(): string {\n    return `${super.toString()} Address: ${this.address}`;\n  }\n}\n```", "```js\nexport interface Animal {\n  species: string;\n  kingdom: string;\n  class: string;\n }\n```", "```js\nimport { Animal } from \"./animals\";\nexport function basic_interface() {\n  let chicken: Animal = {\n    kingdom: \"Animalia\",\n    species: \"Gallus\",\n    class: \"birds\",\n  };\n  console.log(\n    `kingdom:${chicken.kingdom} species:${chicken.species} class:${chicken.class}`\n  );\n}\n```", "```js\nexport interface Animal {\n  species: string;\n  kingdom: string;\n  class: string;\n}\nexport interface DoSound {\n  doASound: () => string;\n}\nexport class Duck implements DoSound {\n  public doASound(){\n    return 'quack';\n  }\n}\nexport class Dog implements DoSound {\n  public doASound(){\n    return 'bark';\n  }\n}\n```", "```js\nexport function animalDoSound() {\n  let duck = new Duck();\n  let dog = new Dog();\n  makeSound(duck);\n  makeSound(dog);\n}\nfunction makeSound(animal: DoSound) {\n  console.log(`The animal make this sound:${animal.doASound()}`);\n}\n```", "```js\nexport class SimulationComponent implements OnInit {\n```", "```js\ntype Machine = {\n  id: number;\n  description: string;\n  energyOutput: number;\n};\nexport function basic_type() {\n  let car: Machine = {\n    id: 123,\n    description: \"Car\",\n    energyOutput: 1000,\n  };\n  console.log(\n    `ID:${car.id} Description:${car.description} Energy Output:${car.energyOutput} `\n );\n}\n```", "```js\ntype ID = string | number;\ntype Machine = {\n  id: ID;\n  description: string;\n   energyOutput: number;\n};\n```", "```js\ninterface invoiceItem {\n  product: string;\n  quantity: number;\n  price: number;\n}\ntype Invoice = Array<invoiceItem>;\nfunction getTotalInvoice(invoice: Invoice): number {\n  let invoiceTotal = invoice.reduce(\n    (total, item) => total + item.quantity * item.price,\n    0\n  );\n  return invoiceTotal;\n}\nexport function invoiceExample() {\n  let example: Invoice = [\n    { product: \"banana\", price: 1.5, quantity: 3 },\n    { product: \"apple\", price: 0.5, quantity: 5 },\n    { product: \"pinaple\", price: 3, quantity: 12 },\n  ];\n  console.log(`Invoice Total:${getTotalInvoice(example)}`);\n}\n```", "```js\nfunction applyDiscount(\n  invoice: Invoice,\n  discountValue: number,\n  productOfDiscount?: string\n) {\n  discountValue = discountValue / 100;\n  let newInvoice = invoice.map((item) => {\n    if (productOfDiscount === undefined || item.product === productOfDiscount) {\n      item.price = item.price - item.price * discountValue;\n    }\n    return item;\n  });\n  return newInvoice;\n  }\n```", "```js\nerror TS1016: A required parameter cannot follow an optional parameter.\n```", "```js\nfunction applyDiscount(\n  invoice: Invoice,\n  discountValue = 10,\n  productOfDiscount?: string\n)\n```", "```js\nexport function primitive_example() {\n  let name = \"Mario\";\n  let age = 9;\n  let isAlive = true;\n  console.log(`Name:${name} Age:${age} is alive:${isAlive ? \"yes\" : \"no\"}`);\n}\n```", "```js\nTSError: ⨯ Unable to compile TypeScript:\nsrc/basic_types/primitive.ts:6:3 - error TS2322: Type 'number' is not assignable to type 'string'.\n```", "```js\nfunction getDiscount(value: string | number) {\n  if (typeof value === \"number\") {\n    return value;\n  } else {\n    return parseInt(value);\n  }\n}\n```", "```js\ninterface Person {\n  socialSecurityNumber: number;\n  name: string;\n}\ninterface Company {\n  corporateNumber: number;\n  name: string;\n}\ntype Client = Person | Company;\nfunction isPerson(client: Client): client is Person {\n  return (client as Person).socialSecurityNumber !== undefined;\n}\nfunction getID(client: Client) {\n  if (isPerson(client)) {\n    return client.socialSecurityNumber;\n  } else {\n    return client.corporateNumber;\n  }\n}\n```", "```js\ninterface Products {\n  id: number;\n   description: string;\n}\ntype ListOfProducts = Array<Products>;\nconst exampleList: ListOfProducts = [\n  { id: 1, description: \"banana\" },\n  { id: 2, description: \"apple\" },\n  { id: 3, description: \"pear\" },\n];\nfunction getProductById(id: any) {\n  return exampleList.find((product) => product.id === id);\n}\n```", "```js\nexport function getProductTest() {\n  const id = '2';\n  const item = getProductById(id);\n  if (item !== undefined) {\n    console.log(`ID:${item.id} Description:${item.description}`);\n  } else {\n    console.log(\"No product found\");\n  }\n}\n```", "```js\nfunction getProductById(id: unknown) {\n  if (typeof id === 'string'){\n    id = parseInt(id);\n  } else if (typeof id !== 'number'){\n    return\n  }\n  return exampleList.find((product) => product.id === id);\n}\n```"]