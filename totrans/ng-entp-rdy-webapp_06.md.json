["```js\n    projects/ch6 \n    ```", "```js\n    npx ng serve ch6 \n    ```", "```js\n    npx ng test ch6 --watch=false \n    ```", "```js\n    npx ng e2e ch6 \n    ```", "```js\n    npx ng build ch6 --prod \n    ```", "```js\n**src/app/app.module.ts**\n...\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms'\n...\n@NgModule({\n  ...\n  imports: [\n    ...\n    **FormsModule,** \n **ReactiveFormsModule,**\n  ] \n```", "```js\n    **src/app/material.module.ts**\n    import { MatFormFieldModule } from '@angular/material/form-field'\n    import { MatInputModule } from '@angular/material/input'\n    const modules = [..., **MatFormFieldModule, MatInputModule**] \n    ```", "```js\n    $ npx ng g c citySearch --module=app.module \n    ```", "```js\n    **src/app/city-search/city-search.component.html**\n    <form>\n      <mat-form-field appearance=\"outline\">\n        <mat-label>City Name or Postal Code</mat-label>\n        <mat-icon matPrefix>search</mat-icon>\n        <input matInput aria-label=\"City or Zip\" [formControl]=\"search\">\n      </mat-form-field>\n    </form> \n    ```", "```js\n    **src/app/city-search/city-search.component.ts**\n    import { FormControl } from '@angular/forms'\n    ...\n    export class CitySearchComponent implements \n      OnInit { \n\n      search = new FormControl()\n      ... \n    ```", "```js\n    **src/app/app.component.ts**\n    template: `\n      ...\n        </div>\n     **<div fxLayoutAlign=\"center\">**\n     **<app-city-search></app-city-search>**\n     **</div>**\n        <div fxLayout=\"row\">\n      ...\n    `, \n    ```", "```js\n    **src/app/weather/weather.service.ts**\n      getCurrentWeather(\n        search: string | number, \n        country?: string\n      ): Observable<ICurrentWeather> { \n        let uriParams = new HttpParams()\n        if (typeof search === 'string') { \n          uriParams = uriParams.set('q',\n            country ? `${search},${country}` : search\n          )\n        } else {\n          uriParams = uriParams.set('zip', 'search')\n        }\n\n        uriParams = uriParams.set('appid', environment.appId)\n        return this.httpClient\n          .get<ICurrentWeatherData>(\n            `${environment.baseUrl}api.openweathermap.org/data/2.5/weather`,\n            { params: uriParams } \n        )\n        .pipe(map(data => this.transformToICurrentWeather(data)))\n      } \n    ```", "```js\n    **src/app/weather/weather.service.ts**\n      getCurrentWeather(\n        search: string | number, \n        country?: string\n      ): Observable<ICurrentWeather> { \n        let uriParams = new HttpParams()\n        if (typeof search === 'string') { \n          uriParams = uriParams.set('q',\n            country ? `${search},${country}` : search\n          )\n        } else {\n          uriParams = uriParams.set('zip', 'search')\n        }\n\n        **return this.getCurrentWeatherHelper(uriParams)**\n      }\n      private getCurrentWeatherHelper(uriParams: HttpParams):\n        Observable<ICurrentWeather> { \n        uriParams = uriParams.set('appid', environment.appId)\n        return this.httpClient\n          .get<ICurrentWeatherData>(\n            `${environment.baseUrl}api.openweathermap.org/data/2.5/weather`,\n            { params: uriParams } \n          )\n          .pipe(map(data => this.transformToICurrentWeather(data)))\n        } \n    ```", "```js\n    **src/app/weather/weather.service.ts**\n    getCurrentWeatherByCoords(coords: Coordinates): Observable<ICurrentWeather> {\n      const uriParams = new HttpParams()\n          .set('lat', coords.latitude.toString())\n          .set('lon', coords.longitude.toString())\n        return this.getCurrentWeatherHelper(uriParams)\n    } \n    ```", "```js\n    **src/app/weather/weather.service.ts** \n    export interface IWeatherService {\n      getCurrentWeather(\n        search: string | number,\n        country?: string\n      ): Observable<ICurrentWeather>\n      getCurrentWeatherByCoords(coords: Coordinates): Observable<ICurrentWeather>\n    } \n    ```", "```js\n    **src/app/city-search/city-search.component.ts**\n    import { WeatherService } from '../weather/weather.service'\n    ...\n    export class CitySearchComponent implements OnInit { \n      search = new FormControl()\n\n      constructor(**private weatherService: WeatherService**) {}\n      ...\n      ngOnInit(): void { \n        **this.search.valueChanges**\n     **.subscribe()**\n      } \n    ```", "```js\n    **src/app/city-search/city-search.component.ts**\n    this.search.valueChanges\n      .subscribe(\n        (searchValue: string) => { \n        if (searchValue) {\n          const userInput = searchValue.split(',').map(s => s.trim())\n        this.weatherService.getCurrentWeather(\n          userInput[0],\n          userInput.length > 1 ? userInput[1] : undefined\n        ).subscribe(data => (console.log(data)))\n      }\n    }) \n    ```", "```js\n    **src/app/city-search/city-search.component.html**\n    ...\n      <mat-form-field appearance=\"outline\">\n        ...\n        **<mat-hint>Specify country code like 'Paris, US'</mat-hint>**\n      </mat-form-field>\n    ... \n    ```", "```js\n**src/app/city-search/city-search.component.ts**\nimport { debounceTime } from 'rxjs/operators'\n  this.search.valueChanges\n    `.pipe(debounceTime(1000))`\n    .subscribe(...) \n```", "```js\n**example**\nnew FormControl('Bethesda', { updateOn: 'submit' }) \n```", "```js\n    **src/app/city-search/city-search.component.ts**\n    import { FormControl, Validators } from '@angular/forms' \n    ```", "```js\n    **src/app/city-search/city-search.component.ts**\n    search = new FormControl('', [Validators.minLength(2)]) \n    ```", "```js\n    **src/app/city-search/city-search.component.html**\n    ...\n    <form **style=\"margin-bottom: 32px\"**>\n      <mat-form-field appearance=\"outline\">\n        ...\n        **<mat-error *ngIf=\"search.invalid\">**\n     **Type more than one character to search**\n     **</mat-error>**\n      </mat-form-field>\n    </form>\n    ... \n    ```", "```js\n    **example**\n    <mat-error *ngIf=\"search.invalid\">\n      {{getErrorMessage()}}\n    </mat-error>\n    getErrorMessage() {\n      return this.search.hasError('minLength') ?\n        'Type more than one character to search' : '';\n    } \n    ```", "```js\n    **src/app/city-search/city-search.component.ts** \n    this.search.valueChanges\n      .pipe(debounceTime(1000))\n      .subscribe((search Value: string) => {\n        if (**!this.search.invalid**) {\n          ... \n    ```", "```js\n**projects/ch6/src/app/city-search-tpldriven/city-search-tpldriven.component.html**\n  ...\n    <input matInput aria-label=\"City or Zip\"\n      [(ngModel)]=\"model.search\"\n      (ngModelChange)=\"doSearch($event)\" minlength=\"2\" \n      name=\"search\" #search=\"ngModel\">\n  ...\n    <mat-error *ngIf=\"search.invalid\">\n      Type more than one character to search\n    </mat-error>\n  ... \n```", "```js\n**projects/ch6/src/app/city-search-tpldriven/city-search-tpldriven.component.ts**\nimport { WeatherService } from '../weather/weather.service'\nexport class CitySearchTpldrivenComponent { \n  model = {\n    search: '',\n  }\n  constructor(private weatherService: WeatherService) {}\n\n  doSearch(searchValue) {\n    const userInput = searchValue.split(',').map(s => s.trim())\n    this.weatherService\n      .getCurrentWeather(userInput[0], userInput.length > 1 ?\n        userInput[1] : undefined\n      )\n      .subscribe(data => console.log(data))\n  }\n} \n```", "```js\n    **src/app/city-search/city-search.component.ts**\n    import { Component, OnInit, Output, EventEmitter } from '@angular/core'\n    export class CitySearchComponent implements OnInit {\n      @Output() searchEvent = new EventEmitter<string>()\n      ...\n      this.search.valueChanges\n        .pipe(debounceTime(1000))\n        .subscribe((search Value: string) => {\n          if (!this.search.invalid) {\n            this.searchEvent.emit(searchValue)\n          }\n        })\n      ...\n    } \n    ```", "```js\n    **src/app/app.component.ts**\n    import { WeatherService } from './weather/weather.service'\n    import { ICurrentWeather } from './interfaces'\n    ...\n    template: `\n      ...\n        <app-city-search **(searchEvent)=\"doSearch($event)\"**>\n        </app-city-search>\n      ...\n    `,\n    export class AppComponent { \n      currentWeather: ICurrentWeather \n      constructor(private weatherService: WeatherService) { }\n      doSearch(searchValue) {\n        const userInput = searchValue.split(',').map(s => s.trim()) \n        this.weatherService\n          .getCurrentWeather(userInput[0], userInput.length > 1 ?\n            userInput[1] : undefined\n        )\n        .subscribe(data => this.currentWeather = data)\n      }\n    } \n    ```", "```js\n**src/app/current-weather/current-weather.component.ts**\nimport { Component, **Input** } from '@angular/core'\n...\nexport class CurrentWeatherComponent implements OnInit { \n  **@Input()** current: ICurrentWeather\n  ...\n} \n```", "```js\n**src/app/app.component.ts**\ntemplate: `\n  ...\n  <app-current-weather **[current]=\"currentWeather\"**>\n  </app-current-weather>\n  ...\n` \n```", "```js\n**example**\n<app-mini-forecast\n  *ngFor=\"let dailyForecast of forecastArray\n  [forecast]=\"dailyForecast\"\n>\n</app-mini-forecast> \n```", "```js\n**example**\nimport { Subject } from 'rxjs'\n...\nexport class WeatherService implements IWeatherService { \n  currentWeather$: Subject<ICurrentWeather>\n  ...\n} \n```", "```js\n**example**\ncurrentWeather$.subscribe(data => (this.current = data)) currentWeather$.next(newData) \n```", "```js\n    **src/app/weather/weather.service.ts**\n    import { **BehaviorSubject**, Observable } from 'rxjs'\n    export interface IWeatherService {\n      **readonly currentWeather$: BehaviorSubject<ICurrentWeather>**\n      ...\n    } \n    ```", "```js\n    **src/app/weather/weather.service.ts**\n    ...\n    export class WeatherService implements IWeatherService {\n      readonly currentWeather$ =\n        new BehaviorSubject<ICurrentWeather>({ \n        city: '--',\n        country: '--',\n        date: Date.now(),\n        image: '',\n        temperature: 0,\n        description: '',\n      })\n    ...\n    } \n    ```", "```js\n    **src/app/weather/weather.service.ts**\n    ...\n    updateCurrentWeather(search: string | number, \n      country?: string): void { \n      this.getCurrentWeather(search, country)\n        .subscribe(weather => \n          this.currentWeather$.next(weather)\n        )\n    }\n    ... \n    ```", "```js\n    **src/app/weather/weather.service.ts**\n    ...\n    export interface IWeatherService {\n      readonly currentWeather$: BehaviorSubject<ICurrentWeather> \n      getCurrentWeather(city: string | number, country?: string):\n        Observable<ICurrentWeather>\n      getCurrentWeatherByCoords(coords: Coordinates):\n        Observable<ICurrentWeather>\n      **updateCurrentWeather(**\n        **search: string | number,**\n        **country?: string**\n      **): void**\n    } \n    ```", "```js\n    **src/app/current-weather/current-weather.component.ts**\n    ...\n      ngOnInit() { \n        this.weatherService.currentWeather$\n          .subscribe(data => (this.current = data))\n      }\n    ... \n    ```", "```js\n    **src/app/city-search/city-search.component.ts**\n    ...\n      this.weatherService.**updateCurrentWeather**( \n        userInput[0],\n        userInput.length > 1 ? userInput[1] : undefined\n      )\n    ... \n    ```", "```js\n**example**\nimport { ..., OnDestroy } from '@angular/core'\nimport { ..., Subscription } from 'rxjs'\nexport class CurrentWeatherComponent implements OnInit, OnDestroy { \n  currentWeatherSubscription: Subscription\n  ...\n  ngOnInit() { \n    this.currentWeatherSubscription =\n      this.weatherService.currentWeather$\n        .subscribe((data) => (this.current = data))\n  }\n  ngOnDestroy(): void {\n    this.currentWeatherSubscription.unsubscribe()\n  }\n... \n```", "```js\n$ npm i subsink \n```", "```js\n**src/app/current-weather/current-weather.component.ts**\nimport { ..., OnDestroy } from '@angular/core'\nimport { SubSink } from 'subsink'\nexport class CurrentWeatherComponent implements OnInit, OnDestroy {\n  private subscriptions = new SubSink()\n  ...\n  ngOnInit(): void {\n    this.subscriptions.add(\n      this.weatherService.currentWeather$\n        .subscribe((data) => (this.current = data))\n    )\n  }\n  ngOnDestroy(): void {\n this.subscriptions.unsubscribe()\n  }\n... \n```", "```js\n    **src/app/current-weather/current-weather.component.ts**\n    import { Observable } from 'rxjs'\n    export class CurrentWeatherComponent {\n      current$: Observable<ICurrentWeather>\n      constructor(private weatherService: WeatherService) {\n        this.current$ = this.weatherService.currentWeather$\n      }\n      ... \n    ```", "```js\n    **src/app/current-weather/current-weather.component.html**\n    <div *ngIf=\"current$ | async as current\">\n    ...\n    </div> \n    ```", "```js\n**example**\n<div *ngIf=\"current$ | async as current;\n  else loading\"\n>\n  ...\n</div>\n<ng-template #loading>\n  Loading...\n</ng-template> \n```", "```js\n**src/app/city-search/city-search.component.ts**\nimport { debounceTime, **filter, tap** } from 'rxjs/operators'\nexport class CitySearchComponent {\n  search = new FormControl('', \n    [**Validators.required**, Validators.minLength(2)])\n  constructor(private weatherService: WeatherService) { \n    **this.search.valueChanges**\n **.pipe(**\n **debounceTime(1000),**\n **filter(() => !this.search.invalid),**\n **tap((searchValue: string) => this.doSearch(searchValue))**\n **)**\n **.subscribe()**\n}\ndoSearch(searchValue: string) {\n  const userInput = searchValue.split(',').map(s => s.trim())\n  const searchText = userInput[0]\n  const country = userInput.length > 1 ? userInput[1] : undefined\n  this.weatherService.updateCurrentWeather(searchText, country)\n}\n} \n```", "```js\n**src/app/postal-code/postal-code.service.ts**\nimport { HttpClient, HttpParams } from '@angular/common/http'\nimport { Injectable } from '@angular/core'\nimport { Observable } from 'rxjs'\nimport { defaultIfEmpty, flatMap } from 'rxjs/operators'\nimport { environment } from '../../environments/environment'\nexport interface IPostalCode {\n  countryCode: string\n  postalCode: string\n  placeName: string\n  lng: number\n  lat: number\n}\nexport interface IPostalCodeData { \n  postalCodes: [IPostalCode]\n}\nexport interface IPostalCodeService {\n  resolvePostalCode(postalCode: string): Observable<IPostalCode>\n}\n@Injectable({\n  providedIn: 'root',\n}) \nexport class PostalCodeService implements IPostalCodeService {\n  constructor(private httpClient: HttpClient) {}\n  resolvePostalCode(postalCode: string): Observable<IPostalCode> {\n    const uriParams = new HttpParams()\n      .set('maxRows', '1')\n      .set('username', environment.username)\n      .set('postalcode', postalCode)\n    return this.httpClient\n      .get<IPostalCodeData>(\n        `${environment.baseUrl}${environment.geonamesApi}.geonames.org/postalCodeSearchJSON`,\n      { params: uriParams }\n    )\n    .pipe(\n      flatMap(data => data.postalCodes), \n      defaultIfEmpty(null)\n    )\n  }\n} \n```", "```js\n    **src/app/weather/weather.service.ts**\n    ...\n    export interface IWeatherService {\n    ...\n      getCurrentWeather(search: **string**, country?: string): \n        Observable<ICurrentWeather>\n      updateCurrentWeather(search: **string**, country?: string)\n    } \n    ```", "```js\n    **src/app/weather/weather.service.ts**\n    import {\n      PostalCodeService\n    } from '../postal-code/postal-code.service'\n    ...\n    constructor(\n      private httpClient: HttpClient,\n      private postalCodeService: PostalCodeService\n    ) {} \n    ```", "```js\n    **src/app/weather/weather.service.ts**\n    import { map, **switchMap** } from 'rxjs/operators'\n    ... \n    getCurrentWeather(\n      searchText: string,\n      country?: string\n    ): Observable<ICurrentWeather> {\n      return this.postalCodeService.\n        resolvePostalCode(searchText)\n        .pipe(\n          switchMap((postalCode) => {\n            if (postalCode) {\n              return this.getCurrentWeatherByCoords({\n                latitude: postalCode.lat,\n                longitude: postalCode.lng,\n              } as Coordinates)\n            } else {\n              const uriParams = new HttpParams().set(\n                'q',\n                country ? `${searchText},${country}` : searchText\n              )\n              return this.getCurrentWeatherHelper(uriParams) \n            }\n         })\n       )\n    } \n    ```", "```js\n return this.getCurrentWeatherByCoords({\n    latitude: postalCode.lat,\n    longitude: postalCode.lng,\n  } as Coordinates) \n```"]