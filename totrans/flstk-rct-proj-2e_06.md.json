["```js\n| mern_skeleton/\n   | -- client/\n      | --- assets/\n         | ---- images/\n      | --- auth/\n         | ---- api-auth.js\n         | ---- auth-helper.js\n         | ---- PrivateRoute.js\n         | ---- Signin.js\n      | --- core/\n         | ---- Home.js\n         | ---- Menu.js\n      | --- user/\n         | ---- api-user.js\n         | ---- DeleteUser.js\n         | ---- EditProfile.js\n         | ---- Profile.js\n         | ---- Signup.js\n         | ---- Users.js\n      | --- App.js\n      | --- main.js\n      | --- MainRouter.js\n      | --- theme.js\n  | -- server/\n      | --- devBundle.js\n  | -- webpack.config.client.js\n  | -- webpack.config.client.production.js\n```", "```js\nyarn add --dev @babel/preset-react \n```", "```js\n{\n    \"presets\": [\n      [\"@babel/preset-env\",\n        {\n          \"targets\": {\n            \"node\": \"current\"\n          }\n        }\n      ],\n      \"@babel/preset-react\"\n    ],\n    \"plugins\": [\n \"react-hot-loader/babel\"\n ]\n}\n```", "```js\nyarn add -dev webpack-dev-middleware webpack-hot-middleware file-loader\nyarn add react-hot-loader @hot-loader/react-dom\n```", "```js\nimport config from './../config/config'\nimport webpack from 'webpack'\nimport webpackMiddleware from 'webpack-dev-middleware'\nimport webpackHotMiddleware from 'webpack-hot-middleware'\nimport webpackConfig from './../webpack.config.client.js'\n\nconst compile = (app) => {\n  if(config.env === \"development\"){\n    const compiler = webpack(webpackConfig)\n    const middleware = webpackMiddleware(compiler, {\n      publicPath: webpackConfig.output.publicPath\n    })\n    app.use(middleware)\n    app.use(webpackHotMiddleware(compiler))\n  }\n}\n\nexport default {\n  compile\n}\n```", "```js\nimport devBundle from './devBundle'\nconst app = express()\ndevBundle.compile(app)\n\n```", "```js\nimport path from 'path'\nconst CURRENT_WORKING_DIR = process.cwd()\napp.use('/dist', express.static(path.join(CURRENT_WORKING_DIR, 'dist')))\n```", "```js\n...\n<body>\n    <div id=\"root\"></div>\n    <script type=\"text/javascript\" src=\"img/bundle.js\"></script>\n</body>\n```", "```js\nyarn add react react-dom\n```", "```js\nyarn add react-router react-router-dom\n```", "```js\nyarn add @material-ui/core @material-ui/icons \n```", "```js\n<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Roboto:100,300,400\">\n<link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" rel=\"stylesheet\">\n```", "```js\nimport React from 'react'\nimport { render } from 'react-dom'\nimport App from './App'\n\nrender(<App/>, document.getElementById('root'))\n```", "```js\nimport { createMuiTheme } from '@material-ui/core/styles'\nimport { pink } from '@material-ui/core/colors'\n\nconst theme = createMuiTheme({\n    typography: {\n      useNextVariants: true,\n    },\n    palette: {\n      primary: {\n      light: '#5c67a3',\n      main: '#3f4771',\n      dark: '#2e355b',\n      contrastText: '#fff',\n    },\n    secondary: {\n      light: '#ff79b0',\n      main: '#ff4081',\n      dark: '#c60055',\n      contrastText: '#000',\n    },\n      openTitle: '#3f4771',\n      protectedTitle: pink['400'],\n      type: 'light'\n    }\n})\n\nexport default theme\n```", "```js\nimport React from 'react'\nimport MainRouter from './MainRouter'\nimport {BrowserRouter} from 'react-router-dom'\nimport { ThemeProvider } from '@material-ui/styles'\nimport theme from './theme'\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <ThemeProvider theme={theme}>\n        <MainRouter/>\n      </ThemeProvider>\n    </BrowserRouter>\n)}\n```", "```js\nimport { hot } from 'react-hot-loader'\nconst App = () => { ... }\nexport default hot(module)(App)\n```", "```js\nimport React from 'react'\nimport {Route, Switch} from 'react-router-dom'\nimport Home from './core/Home'\nconst MainRouter = () => {\n    return ( <div>\n      <Switch>\n        <Route exact path=\"/\" component={Home}/>\n      </Switch>\n    </div>\n   )\n}\nexport default MainRouter\n```", "```js\nimport React from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Card from '@material-ui/core/Card'\nimport CardContent from '@material-ui/core/CardContent'\nimport CardMedia from '@material-ui/core/CardMedia'\nimport Typography from '@material-ui/core/Typography'\nimport unicornbikeImg from './../assets/images/unicornbike.jpg'\n```", "```js\nconst useStyles = makeStyles(theme => ({\n  card: {\n    maxWidth: 600,\n    margin: 'auto',\n    marginTop: theme.spacing(5)\n  },\n  title: {\n    padding:`${theme.spacing(3)}px ${theme.spacing(2.5)}px ${theme.spacing(2)}px`,\n    color: theme.palette.openTitle\n  },\n  media: {\n    minHeight: 400\n  }\n})) \n```", "```js\nexport default function Home(){\n  const classes = useStyles()\n    return (\n     <Card className={classes.card}>\n        <Typography variant=\"h6\" className={classes.title}>\n          Home Page\n        </Typography>\n        <CardMedia className={classes.media} \n                   image={unicornbikeImg} title=\"Unicorn Bicycle\"/>\n        <CardContent>\n          <Typography variant=\"body2\" component=\"p\">\n            Welcome to the MERN Skeleton home page.\n          </Typography>\n        </CardContent>\n      </Card>\n    )\n}\n```", "```js\n[ â€¦\n    {\n       test: /\\.(ttf|eot|svg|gif|jpg|png)(\\?[\\s\\S]+)?$/,\n       use: 'file-loader'\n    }\n]\n```", "```js\nyarn add --dev file-loader\n```", "```js\nyarn development\n```", "```js\nconst create = async (user) => {\n  try {\n      let response = await fetch('/api/users/', {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(user)\n      })\n    return await response.json()\n  } catch(err) {\n    console.log(err)\n  }\n}\n```", "```js\nconst list = async (signal) => {\n  try {\n    let response = await fetch('/api/users/', {\n      method: 'GET',\n      signal: signal,\n    })\n    return await response.json()\n  } catch(err) {\n    console.log(err)\n  }\n}\n```", "```js\nconst read = async (params, credentials, signal) => {\n  try {\n    let response = await fetch('/api/users/' + params.userId, {\n      method: 'GET',\n      signal: signal,\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + credentials.t\n      }\n    })\n    return await response.json()\n  } catch(err) {\n    console.log(err)\n  }\n}\n```", "```js\nconst update = async (params, credentials, user) => {\n  try {\n    let response = await fetch('/api/users/' + params.userId, {\n      method: 'PUT',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + credentials.t\n      },\n      body: JSON.stringify(user)\n    })\n    return await response.json()\n  } catch(err) {\n    console.log(err)\n  }\n}\n```", "```js\nconst remove = async (params, credentials) => {\n  try {\n    let response = await fetch('/api/users/' + params.userId, {\n      method: 'DELETE',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + credentials.t\n      }\n    })\n    return await response.json()\n  } catch(err) {\n    console.log(err)\n  }\n}\n```", "```js\nexport { create, list, read, update, remove }\n```", "```js\nconst signin = async (user) => {\n  try {\n    let response = await fetch('/auth/signin/', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      credentials: 'include',\n      body: JSON.stringify(user)\n    })\n    return await response.json()\n  } catch(err) {\n    console.log(err)\n  }\n}\n```", "```js\nconst signout = async () => {\n  try {\n    let response = await fetch('/auth/signout/', { method: 'GET' })\n    return await response.json()\n  } catch(err) {\n    console.log(err)\n  }\n}\n```", "```js\nexport { signin, signout }\n```", "```js\nauthenticate(jwt, cb) {\n    if(typeof window !== \"undefined\")\n        sessionStorage.setItem('jwt', JSON.stringify(jwt))\n    cb()\n}\n```", "```js\nisAuthenticated() {\n    if (typeof window == \"undefined\")\n      return false\n\n    if (sessionStorage.getItem('jwt'))\n      return JSON.parse(sessionStorage.getItem('jwt'))\n    else\n      return false\n}\n```", "```js\nclearJWT(cb) {\n      if(typeof window !== \"undefined\")\n        sessionStorage.removeItem('jwt')\n      cb()\n      signout().then((data) => {\n          document.cookie = \"t=; expires=Thu, 01 Jan 1970 00:00:00 \n          UTC; path=/;\"\n      })\n}\n```", "```js\nimport React, { Component } from 'react'\nimport { Route, Redirect } from 'react-router-dom'\nimport auth from './auth-helper'\n\nconst PrivateRoute = ({ component: Component, ...rest }) => (\n  <Route {...rest} render={props => (\n    auth.isAuthenticated() ? (\n      <Component {...props}/>\n    ) : (\n      <Redirect to={{\n        pathname: '/signin',\n        state: { from: props.location }\n      }}/>\n    )\n  )}/>\n)\n\nexport default PrivateRoute\n```", "```js\nexport default function Users() {\n ...\n const [users, setUsers] = useState([])\n ...\n}\n```", "```js\n  useEffect(() => {\n    const abortController = new AbortController()\n    const signal = abortController.signal\n\n    list(signal).then((data) => {\n      if (data && data.error) {\n        console.log(data.error)\n      } else {\n        setUsers(data)\n      }\n    })\n\n    return function cleanup(){\n      abortController.abort()\n    }\n  }, [])\n```", "```js\nreturn (\n      <Paper className={classes.root} elevation={4}>\n        <Typography variant=\"h6\" className={classes.title}>\n          All Users\n        </Typography>\n        <List dense>\n         {users.map((item, i) => {\n          return <Link to={\"/user/\" + item._id} key={i}>\n                    <ListItem button>\n                      <ListItemAvatar>\n                        <Avatar>\n                          <Person/>\n                        </Avatar>\n                      </ListItemAvatar>\n                      <ListItemText primary={item.name}/>\n                      <ListItemSecondaryAction>\n                      <IconButton>\n                          <ArrowForward/>\n                      </IconButton>\n                      </ListItemSecondaryAction>\n                    </ListItem>\n                 </Link>\n               })\n             }\n        </List>\n      </Paper>\n)\n```", "```js\n<Route path=\"/users\" component={Users}/>\n```", "```js\n<Link to=\"/users\">Users</Link>\n```", "```js\nexport default function Signup() {\n  ...  \n  const [values, setValues] = useState({\n    name: '',\n    password: '',\n    email: '',\n    open: false,\n    error: ''\n  })\n  ...\n}\n```", "```js\nconst handleChange = name => event => {\n    setValues({ ...values, [name]: event.target.value })\n}\n```", "```js\n  const clickSubmit = () => {\n    const user = {\n      name: values.name || undefined,\n      email: values.email || undefined,\n      password: values.password || undefined\n    }\n    create(user).then((data) => {\n      if (data.error) {\n        setValues({ ...values, error: data.error})\n      } else {\n        setValues({ ...values, error: '', open: true})\n      }\n    })\n  }\n```", "```js\nreturn (\n    <div>\n      <Card className={classes.card}>\n        <CardContent>\n          <Typography variant=\"h6\" className={classes.title}>\n            Sign Up\n          </Typography>\n          <TextField id=\"name\" label=\"Name\" \n             className={classes.textField} \n             value={values.name} onChange={handleChange('name')} \n             margin=\"normal\"/>\n          <br/>\n          <TextField id=\"email\" type=\"email\" label=\"Email\" \n             className={classes.textField} \n             value={values.email} onChange={handleChange('email')} \n             margin=\"normal\"/>\n          <br/>\n          <TextField id=\"password\" type=\"password\" label=\"Password\" \n             className={classes.textField} value={values.password} \n             onChange={handleChange('password')} margin=\"normal\"/>\n          <br/> \n          {\n            values.error && (<Typography component=\"p\" color=\"error\">\n              <Icon color=\"error\" className={classes.error}>error</Icon>\n              {values.error}</Typography>)\n          }\n        </CardContent>\n        <CardActions>\n          <Button color=\"primary\" variant=\"contained\" onClick={clickSubmit} \n            className={classes.submit}>Submit</Button>\n        </CardActions>\n      </Card>\n    </div>\n)\n```", "```js\n<Dialog open={values.open} disableBackdropClick={true}>\n   <DialogTitle>New Account</DialogTitle>\n   <DialogContent>\n      <DialogContentText>\n         New account successfully created.\n      </DialogContentText>\n   </DialogContent>\n   <DialogActions>\n       <Link to=\"/signin\">\n          <Button color=\"primary\" autoFocus=\"autoFocus\" \n                  variant=\"contained\">\n             Sign In\n          </Button>\n       </Link>\n   </DialogActions>\n</Dialog>\n```", "```js\n<Route path=\"/signup\" component={Signup}/>\n```", "```js\nexport default function Signin(props) {\n  const [values, setValues] = useState({\n      email: '',\n      password: '',\n      error: '',\n      redirectToReferrer: false\n  })\n}\n```", "```js\nconst clickSubmit = () => {\n    const user = {\n      email: values.email || undefined,\n      password: values.password || undefined\n    }\n\n    signin(user).then((data) => {\n      if (data.error) {\n        setValues({ ...values, error: data.error})\n      } else {\n        auth.authenticate(data, () => {\n          setValues({ ...values, error: '',redirectToReferrer: true})\n        })\n      }\n    })\n}\n```", "```js\nconst {from} = props.location.state || {\n      from: {\n        pathname: '/'\n      }\n  }\nconst {redirectToReferrer} = values\nif (redirectToReferrer) {\n      return (<Redirect to={from}/>)\n}\n```", "```js\n<Route path=\"/signin\" component={Signin}/>\n```", "```js\nexport default function Profile({ match }) {\n    ...\n    const [user, setUser] = useState({})\n    const [redirectToSignin, setRedirectToSignin] = useState(false)\n    ...\n}\n```", "```js\n  useEffect(() => {\n    const abortController = new AbortController()\n    const signal = abortController.signal\n    const jwt = auth.isAuthenticated()\n    read({\n      userId: match.params.userId\n    }, {t: jwt.token}, signal).then((data) => {\n      if (data && data.error) {\n        setRedirectToSignin(true)\n      } else {\n        setUser(data)\n      }\n    })\n\n    return function cleanup(){\n      abortController.abort()\n    }\n\n  }, [match.params.userId])\n```", "```js\nif (redirectToSignin) {\n   return <Redirect to='/signin'/>\n}\n```", "```js\nreturn (\n      <Paper className={classes.root} elevation={4}>\n        <Typography variant=\"h6\" className={classes.title}>\n          Profile\n        </Typography>\n        <List dense>\n          <ListItem>\n            <ListItemAvatar>\n              <Avatar>\n                <Person/>\n              </Avatar>\n            </ListItemAvatar>\n            <ListItemText primary={user.name} secondary={user.email}/> \n          </ListItem>\n          <Divider/>\n          <ListItem>\n            <ListItemText primary={\"Joined: \" + (\n              new Date(user.created)).toDateString()}/>\n          </ListItem>\n        </List>\n      </Paper>\n)\n```", "```js\n{ auth.isAuthenticated().user && auth.isAuthenticated().user._id == user._id &&\n    (<ListItemSecondaryAction>\n        <Link to={\"/user/edit/\" + user._id}>\n           <IconButton aria-label=\"Edit\" color=\"primary\">\n               <Edit/>\n           </IconButton>\n         </Link>\n         <DeleteUser userId={user._id}/>\n     </ListItemSecondaryAction>)\n}\n```", "```js\n<Route path=\"/user/:userId\" component={Profile}/>\n```", "```js\nconst clickSubmit = () => {\nconst jwt = auth.isAuthenticated()\n    const user = {\n      name: values.name || undefined,\n      email: values.email || undefined,\n      password: values.password || undefined\n    }\n    update({\n      userId: match.params.userId\n    }, {\n      t: jwt.token\n    }, user).then((data) => {\n      if (data && data.error) {\n        setValues({...values, error: data.error})\n      } else {\n        setValues({...values, userId: data._id, redirectToProfile: true})\n      }\n    })\n}\n```", "```js\nif (values.redirectToProfile) {\n      return (<Redirect to={'/user/' + values.userId}/>)\n}\n```", "```js\n<Switch>\n  ... <PrivateRoute path=\"/user/edit/:userId\" component={EditProfile}/>\n  <Route path=\"/user/:userId\" component={Profile}/>\n</Switch>\n```", "```js\nexport default function DeleteUser(props) {\n    ...\n    const [open, setOpen] = useState(false)\n    const [redirect, setRedirect] = useState(false)\n    ...\n}\n```", "```js\nconst clickButton = () => {\n    setOpen(true)\n}\n```", "```js\nconst handleRequestClose = () => {\n    setOpen(false)\n}  \n```", "```js\nconst deleteAccount = () => { \nconst jwt = auth.isAuthenticated()\n    remove({\n      userId: props.userId\n    }, {t: jwt.token}).then((data) => {\n      if (data && data.error) {\n        console.log(data.error)\n      } else {\n        auth.clearJWT(() => console.log('deleted'))\n        setRedirect(true)\n      }\n    })\n}\n```", "```js\nif (redirect) {\n    return <Redirect to='/'/>\n}\n```", "```js\nreturn (<span>\n      <IconButton aria-label=\"Delete\" \n          onClick={clickButton} color=\"secondary\">\n        <DeleteIcon/>\n      </IconButton>\n\n      <Dialog open={open} onClose={handleRequestClose}>\n        <DialogTitle>{\"Delete Account\"}</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Confirm to delete your account.\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleRequestClose} color=\"primary\">\n Cancel\n          </Button>\n          <Button onClick={deleteAccount} \n              color=\"secondary\" autoFocus=\"autoFocus\">\n            Confirm\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </span>)\n```", "```js\nDeleteUser.propTypes = {\n  userId: PropTypes.string.isRequired\n}\n```", "```js\nconst Menu = withRouter(({history}) => (\n  <AppBar position=\"static\">\n    <Toolbar>\n      <Typography variant=\"h6\" color=\"inherit\">\n        MERN Skeleton\n      </Typography>\n      <Link to=\"/\">\n        <IconButton aria-label=\"Home\" style={isActive(history, \"/\")}>\n          <HomeIcon/>\n        </IconButton>\n      </Link>\n      <Link to=\"/users\">\n        <Button style={isActive(history, \"/users\")}>Users</Button>\n      </Link>\n    </Toolbar>\n  </AppBar>))\n```", "```js\nconst isActive = (history, path) => {\n  if (history.location.pathname == path)\n    return {color: '#ff4081'}\n  else\n    return {color: '#ffffff'}\n}\n```", "```js\nstyle={isActive(history, \"/users\")}\n```", "```js\n{\n !auth.isAuthenticated() && (<span>\n    <Link to=\"/signup\">\n       <Button style={isActive(history, \"/signup\")}> Sign Up </Button>\n    </Link>\n    <Link to=\"/signin\">\n       <Button style={isActive(history, \"/signin\")}> Sign In </Button>\n    </Link>\n</span>)\n}\n```", "```js\n{\n auth.isAuthenticated() && (<span>\n   <Link to={\"/user/\" + auth.isAuthenticated().user._id}>\n      <Button style={isActive(history, \"/user/\" \n            + auth.isAuthenticated().user._id)}>\n           My Profile \n      </Button>\n   </Link>\n   <Button color=\"inherit\" \n           onClick={() => { auth.clearJWT(() => history.push('/')) }}>\n        Sign out\n   </Button>\n </span>)\n}\n```", "```js\n <Menu/>\n    <Switch>\n    â€¦\n    </Switch>\n```", "```js\napp.get('*', (req, res) => {\n     // 1\\. Generate CSS styles using Material-UI's ServerStyleSheets\n     // 2\\. Use renderToString to generate markup which renders \n           components specific to the route requested\n     // 3\\. Return template with markup and CSS styles in the response\n})\n```", "```js\nimport React from 'react'\nimport ReactDOMServer from 'react-dom/server'\n```", "```js\nimport StaticRouter from 'react-router-dom/StaticRouter'\nimport MainRouter from './../client/MainRouter'\n```", "```js\nimport { ServerStyleSheets, ThemeProvider } from '@material-ui/styles'\nimport theme from './../client/theme'\n```", "```js\nconst sheets = new ServerStyleSheets()\nconst context = {}\nconst markup = ReactDOMServer.renderToString(\n    sheets.collect(\n          <StaticRouter location={req.url} context={context}>\n            <ThemeProvider theme={theme}>\n              <MainRouter />\n            </ThemeProvider>\n          </StaticRouter>\n        )\n  ) \n```", "```js\nif (context.url) {\n   return res.redirect(303, context.url)\n}\nconst css = sheets.toString()\nres.status(200).send(Template({\n   markup: markup,\n   css: css\n}))\n```", "```js\nexport default ({markup, css}) => {\n    return `...\n           <div id=\"root\">${markup}</div>\n           <style id=\"jss-server-side\">${css}</style> \n           ...`\n}\n```", "```js\nReact.useEffect(() => {\n    const jssStyles = document.querySelector('#jss-server-side')\n    if (jssStyles) {\n      jssStyles.parentNode.removeChild(jssStyles)\n    }\n}, [])\n```", "```js\nimport React from 'react'\nimport { hydrate } from 'react-dom'\nimport App from './App'\n\nhydrate(<App/>, document.getElementById('root'))\n```"]