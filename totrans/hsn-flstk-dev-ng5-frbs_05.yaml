- en: Creating a User Profile Page
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建用户个人资料页面
- en: In this chapter, we will write a user profile component. We will cover **RxJS**
    (**ReactiveX**), which is a popular library for asynchronous programming. In this
    section, we will use the `Observable` of RxJS to pass the domain model from the
    component of the authentication module to the component of the user module. We
    will use this passed user model to populate the user profile component. We will
    edit the user data and update the Firebase authentication and database. As a part
    of edit, we will implement a reusable edit component, which uses bootstrap modal
    for taking user input. Finally, we will see the Firebase session token's life
    cycle when the password is changed.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将编写一个用户个人资料组件。我们将介绍 **RxJS**（**ReactiveX**），这是一个流行的异步编程库。在本节中，我们将使用 RxJS
    的 `Observable` 将认证模块的组件传递到用户模块的组件。我们将使用这个传递的用户模型来填充用户个人资料组件。我们将编辑用户数据并更新 Firebase
    认证和数据库。作为编辑的一部分，我们将实现一个可重用的编辑组件，该组件使用 bootstrap 模态来获取用户输入。最后，我们将看到当密码更改时 Firebase
    会话令牌的生命周期。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Introduction to RxJS
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RxJS 简介
- en: Passing data between module components
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在模块组件之间传递数据
- en: Introduction to SASS
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SASS 简介
- en: Creating a user profile component
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建用户个人资料组件
- en: Enhancing services for the update operation
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增强更新操作的服务
- en: Creating an edit dialog component
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个编辑对话框组件
- en: Firebase session for the update operation
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新操作的 Firebase 会话
- en: Introduction to RxJS
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: RxJS 简介
- en: RxJS is a popular library for asynchronous and event-based programming. In this
    section, we will cover only the basics about this library so that you understand
    the real reason for using this library. For more details, you can refer to the
    official site of RxJS at [http://reactivex.io/rxjs/](http://reactivex.io/rxjs/).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: RxJS 是一个流行的异步和基于事件的编程库。在本节中，我们将仅介绍这个库的基础知识，以便您理解使用这个库的真实原因。更多详情，您可以参考 RxJS 的官方站点
    [http://reactivex.io/rxjs/](http://reactivex.io/rxjs/)。
- en: 'Here are a few of this library''s key terms:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是该库的一些关键术语：
- en: '`observable`: This is a collection of values or events that can be consumed.
    For example, `observable` could be a collection of an array of numbers:'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`可观察的`: 这是一个可以消费的值或事件的集合。例如，`可观察的`可以是一个数字数组的集合：'
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`subscription`: To read data from the `observable`, we subscribe and then the
    event or values are delivered using observer:'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`订阅`: 要从 `可观察的` 中读取数据，我们需要订阅，然后通过观察者传递事件或值：'
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`subject`: This is an extension of the observable and is used to broadcast
    events or values to multiple observers. This example will be covered in our application''s
    use case. This is a very basic understanding of the RxJS library.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`subject`: 这是 `可观察的` 的扩展，用于向多个观察者广播事件或值。这个例子将在我们应用程序的使用案例中介绍。这是对 RxJS 库的非常基础的理解。'
- en: Passing data between module components
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在模块组件之间传递数据
- en: We have completed our authentication module in the preceding chapter. In this
    section, we will cover passing data between module components, which is an important
    part of our application development. While implementing a web application, we
    always face the problem of how to pass data from one component module to another
    component module. Our initial thought will be to store the model in a common application
    class, such as a singleton class, and then retrieve it in other components. Angular
    provides many ways to pass the data, and we have already touched upon Angular
    binding. This method is useful when we have components with a parent-child relationship
    in the same module.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在前一章中完成了我们的认证模块。在本节中，我们将介绍在模块组件之间传递数据，这是我们应用程序开发的一个重要部分。在实现一个网络应用程序时，我们总是面临如何从一个组件模块传递数据到另一个组件模块的问题。我们的初步想法是将模型存储在一个公共应用程序类中，例如单例类，然后在其他组件中检索它。Angular
    提供了许多传递数据的方法，我们已经在 Angular 绑定中提到了这一点。当我们在同一模块中具有父子关系的组件时，这种方法很有用。
- en: Singleton class is a software design pattern that restricts the instantiation
    of class to one object. This single object is available to all the components
    of the application.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 单例类是一种软件设计模式，它限制类的实例化只能有一个对象。这个单一的对象对应用程序的所有组件都是可用的。
- en: We use `subject` of the RxJS library in the `service` class to pass the data
    to the component of the different module. This design helps to create an independent
    module.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 `service` 类中使用 RxJS 库的 `subject` 来将数据传递到不同模块的组件。这种设计有助于创建一个独立的模块。
- en: 'Perform the following steps to pass the data from authentication module to
    user module:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以将认证模块的数据传递到用户模块：
- en: '**Store user model**: The first step is to store the data using `subject` in
    the `service` class. We store the user model in the user service. We use `BehaviorSubject`,
    which is an extension of the `subject` class to store the user model.'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**存储用户模型**：第一步是使用 `service` 类中的 `subject` 存储数据。我们在用户服务中存储用户模型。我们使用 `BehaviorSubject`，它是
    `subject` 类的扩展，用于存储用户模型。'
- en: The behavior subject of RxJS emits the latest data to the subscriber.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: RxJS 的行为主题向订阅者发出最新的数据。
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We save the user model in `subject`. We call this method from the Login and
    Sign up component:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 `subject` 中保存用户模型。我们从登录和注册组件调用此方法：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Create method in service class**: We can create `getSavedUser()` in the `UserService`
    class. This method returns the `subject`, and the caller needs to subscribe or
    use the `getValue()` method to retrieve the saved `User` object:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**在服务类中创建方法**：我们可以在 `UserService` 类中创建 `getSavedUser()`。此方法返回 `subject`，调用者需要订阅或使用
    `getValue()` 方法来检索保存的 `User` 对象：'
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Retrieve user model in component class**: We can retrieve the value from
    the `subject` using the `getValue()` method. You can also subscribe and retrieve
    the user model:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**在组件类中检索用户模型**：我们可以使用 `getValue()` 方法从 `subject` 中检索值。您也可以订阅并检索用户模型：'
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here''s the complete `user.service.ts` as of now:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 目前为止，这是完整的 `user.service.ts`：
- en: '[PRE7]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Introduction to SASS
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SASS 简介
- en: '**SASS** (**Systematically Awesome Style Sheets**) is a CSS preprocessor, which
    adds more functionality to the existing CSS. It helps to add variables, nested
    rules, mixins, inheritance, and many more. This feature helps to organize our
    style sheets in a more systematic way.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**SASS（系统化出色的样式表）** 是一个 CSS 预处理器，它为现有的 CSS 添加了更多功能。它有助于添加变量、嵌套规则、混入、继承等。这个特性有助于以更系统化的方式组织我们的样式表。'
- en: 'SASS provides two flavors:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: SASS 提供了两种风味：
- en: SASS
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SASS
- en: SCSS
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SCSS
- en: 'SASS is the older of the two syntaxes, and SCSS is the more commonly used one.
    In this book, we have used the SCSS format. A few of the supported features are
    as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: SASS 是两种语法中较老的一种，而 SCSS 是更常用的一种。在这本书中，我们使用了 SCSS 格式。一些受支持的功能如下：
- en: '**Partial**: Partial is a reusable CSS element, which can be included in other
    SCSS files. This helps to modularize our CSS into smaller reusable elements across
    SCSS files. A partial filename contains a leading underscore so that the compiler
    knows that this is a partial file and does not convert to a CSS file, for example, `_shared.scss`.
    We can import a partial file into other components using the `@import` directive.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部分（Partial）**：部分是一个可重用的 CSS 元素，可以包含在其他 SCSS 文件中。这有助于将我们的 CSS 模块化成更小的可重用元素，跨越
    SCSS 文件。一个部分的文件名包含一个前导下划线，这样编译器就知道这是一个部分文件，不会转换为 CSS 文件，例如，`_shared.scss`。我们可以使用
    `@import` 指令将部分文件导入到其他组件中。'
- en: 'The following is an example to include a partial in other SCSS files, as follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个在其他 SCSS 文件中包含部分的示例，如下所示：
- en: '[PRE8]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '**Extend**: This is similar to inheritance in high-level programming languages.
    We will write CSS properties in the common class selector and then extend this
    in other class selectors.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**扩展**：这类似于高级编程语言中的继承。我们将编写 CSS 属性在公共类选择器中，然后在其他类选择器中扩展它。'
- en: 'The following is an example of `@extend`:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个 `@extend` 的示例：
- en: '[PRE9]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '**Mixin**: This is used to group declarations that can be used throughout our
    application. This is similar to method signature in a class:'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**混入（Mixin）**：这用于将可以在整个应用程序中使用的声明分组。这类似于类中的方法签名：'
- en: '[PRE10]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Creating a user profile component
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建用户配置文件组件
- en: 'In this section, we will create a user profile component. After a successful
    login or signup, the user is directed to their profile page. This component displays
    the user information, such as name and email, and provides edit functionalities
    to change user information. The following are the steps to create a user profile
    component:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将创建一个用户配置文件组件。在成功登录或注册后，用户将被导向其配置文件页面。此组件显示用户信息，如姓名和电子邮件，并提供编辑功能以更改用户信息。以下创建用户配置文件组件的步骤：
- en: '**Creating a user profile template**: The first step is to create the template
    for the user profile page. In this template, we will display the name, email,
    mobile, and password. Each of these pieces of information has an Edit button.'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**创建用户配置文件模板**：第一步是创建用户配置文件页面的模板。在这个模板中，我们将显示姓名、电子邮件、手机和密码。这些信息中的每一项都有一个编辑按钮。'
- en: 'First, we create a `div` container that contains all the user information elements.
    We use `*ngIf` to check the user data:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们创建一个包含所有用户信息元素的 `div` 容器。我们使用 `*ngIf` 来检查用户数据：
- en: '[PRE11]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Second, we create `div` for each of the user information in `div` with `label`,
    `user.name`, and `Edit` buttons:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 第二步，我们在 `div` 中为每个用户信息创建 `div`，包括 `label`、`user.name` 和 `Edit` 按钮：
- en: '[PRE12]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Here''s the complete `user-profile.component.html`:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是完整的 `user-profile.component.html`：
- en: '[PRE13]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'User information is aligned using the style sheets. We use nesting of SCSS
    for class selector from the container to the child selectors:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 使用样式表对用户信息进行对齐。我们使用 SCSS 的嵌套来从容器到子选择器的类选择器：
- en: '[PRE14]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The following is the complete `user-profile.component.scss` code:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的 `user-profile.component.scss` 代码是完整的：
- en: '[PRE15]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '**Creating the user profile component**: We will define our logic to retrieve
    the user model and handle the events in the component.'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**创建用户资料组件**: 我们将在组件中定义检索用户模型和处理事件的逻辑。'
- en: 'The first step is to retrieve the user model from the `service` class. We implement
    an `onInit` interface and override `ngOnInit` to retrieve the user model, as follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是从 `service` 类中检索用户模型。我们实现 `onInit` 接口并重写 `ngOnInit` 来检索用户模型，如下所示：
- en: '[PRE16]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '`OnInit` is a life cycle hook interface, which is managed by Angular framework.
    It has a `ngOnInit()` method, which is called when the component and the directive
    are fully initialized.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`OnInit` 是一个生命周期钩子接口，由 Angular 框架管理。它有一个 `ngOnInit()` 方法，当组件和指令完全初始化时会被调用。'
- en: 'The following is the complete `user-profile.component.ts` as of now:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的 `user-profile.component.ts` 是目前的完整版本：
- en: '[PRE17]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Our user profile page view should be as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的用户资料页面视图应该是这样的：
- en: '![](img/00023.jpeg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00023.jpeg)'
- en: Enhancing services for update operation
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 增强更新操作的服务
- en: In this section, we will enhance our existing services to provide updates for
    user information. As a part of this exercise, we will discus how to update the
    Firebase authentication and database.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将增强现有的服务以提供用户信息的更新。作为此练习的一部分，我们将讨论如何更新 Firebase 身份验证和数据库。
- en: 'We will update the following user information:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将更新以下用户信息：
- en: '**Username**: This data is stored in the Firebase database, so we add new `update`
    API to perform this operation. We add the `updateName()` method in our user service
    and update the stored user data in Firebase:'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户名**: 此数据存储在 Firebase 数据库中，因此我们添加新的 `update` API 来执行此操作。我们在用户服务中添加了 `updateName()`
    方法，并在 Firebase 中更新存储的用户数据：'
- en: '[PRE18]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '**User email**: This data is stored in the Firebase authentication and database,
    so we will need to update it in both places.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户电子邮件**: 此数据存储在 Firebase 身份验证和数据库中，因此我们需要在两个地方更新它。'
- en: 'We will need to add a `changeEmail()` method in our authentication service:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在我们的身份验证服务中添加一个 `changeEmail()` 方法：
- en: '[PRE19]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Once this has been done in the authentication service, we can update a new
    email in our Firebase database using user services:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦在身份验证服务中完成此操作，我们就可以使用用户服务在 Firebase 数据库中更新新的电子邮件：
- en: '[PRE20]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now editing the mobile password is the same as the  preceding code, and you
    can follow the following code. The updated version of `authentication.service.ts`
    and `user.service.ts` is as follows:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在编辑移动密码与前面的代码相同，你可以遵循以下代码。`authentication.service.ts` 和 `user.service.ts` 的更新版本如下：
- en: '[PRE21]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The following is the updated `user.service.ts` file:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的 `user.service.ts` 文件是更新后的版本：
- en: '[PRE22]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Creating an edit dialog component
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建编辑对话框组件
- en: The edit dialog component is used to take user input to update user information
    in Firebase. The same component is reused to take the information of all other
    user details, such as name, email, mobile, and password. This component is included
    in the user profile component, and the edit dialog box appears when a user clicks
    on the Edit button.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑对话框组件用于获取用户输入以更新 Firebase 中的用户信息。此组件被重复使用以获取所有其他用户详细信息的信息，如姓名、电子邮件、手机和密码。此组件包含在用户资料组件中，当用户点击编辑按钮时，编辑对话框会显示出来。
- en: 'The following are the steps involved in creating an edit `dialog` component:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个编辑 `dialog` 组件的步骤如下：
- en: '**Creating the edit dialog template**: The first step is to create the template
    for the edit dialog. This template contains a header, title for the text, and
    an input box.'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**创建编辑对话框模板**: 第一步是创建编辑对话框的模板。此模板包含标题、文本标题和一个输入框。'
- en: We use bootstrap modal to create an edit dialog. It has an input box to receive
    the user input.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 Bootstrap 模态框创建一个编辑对话框。它有一个输入框来接收用户输入。
- en: 'The first step is to create the `div` container with an `isVisible` condition, and
    this variable changes dynamically when the user clicks on the Edit button:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是创建一个带有`isVisible`条件的`div`容器，并且当用户点击“编辑”按钮时，这个变量会动态变化：
- en: '[PRE23]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We use form element to take the user input, which has a `submit` button, as
    follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用表单元素来获取用户输入，它有一个`submit`按钮，如下所示：
- en: '[PRE24]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Because the preceding template is also used for different editing purposes,
    we will need to dynamically change the text of the header, title, and so on. We
    can use a one-way Angular binding to assign a variable:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 由于前面的模板也用于不同的编辑目的，我们需要动态更改标题、标题等文本。我们可以使用单向Angular绑定来分配变量：
- en: '[PRE25]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The following is the complete `edit-dialog.component.html` file:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是完全的`edit-dialog.component.html`文件：
- en: '[PRE26]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '**Creating an edit dialog component**: This component takes a variable input
    from the user profile component when the user clicks on the Edit button. It takes
    a user input in the dialog box and passes it to the `EditDetails` class to update
    the information.'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**创建编辑对话框组件**：当用户点击“编辑”按钮时，此组件从用户资料组件接收一个变量输入。它接收用户在对话框中的输入，并将其传递给`EditDetails`类以更新信息。'
- en: We will use builder pattern to take input variables from `UserProfileComponent`.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用构造函数模式从`UserProfileComponent`获取输入变量。
- en: Builder pattern is a creational pattern that is used to create complex objects.
    This is basically used when a constructor in a class accepts many parameters.
    This reduces the complexity of the constructor.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 构造函数模式是一种用于创建复杂对象的创建型模式。这基本上是在类中的构造函数接受许多参数时使用。这减少了构造函数的复杂性。
- en: 'In our case, we will need parameters to dynamically change the title, `label`.
    We will create multiple methods for each variable input—for example, for title,
    we will create a `setTitle()` method and return `this`, which is the instance
    of the class. This helps in chaining the method calls in a single line:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，我们需要参数来动态更改标题、`label`。我们将为每个变量输入创建多个方法——例如，对于标题，我们将创建一个`setTitle()`方法并返回`this`，即类的实例。这有助于在单行中链接方法调用：
- en: '[PRE27]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'We will then need to toggle the `isVisible` variables using the `show` and
    `hide` methods, as follows:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将需要使用`show`和`hide`方法切换`isVisible`变量，如下所示：
- en: '[PRE28]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Here''s the complete `edit-dialog.component.ts` file as of now:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在这是完整的`edit-dialog.component.ts`文件：
- en: '[PRE29]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '**Creating an update operation**: When a user provides the new data for updating
    and clicks on `submit`, the `onSubmit()` method is called. For each of the update
    operations, we will call `edit()` of the `EditDetails` class.'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**创建更新操作**：当用户提供了更新所需的新数据并点击`submit`时，将调用`onSubmit()`方法。对于每个更新操作，我们将调用`EditDetails`类的`edit()`方法。'
- en: 'Here''s the complete `edit-details.ts` file as of now:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在这是完整的`edit-details.ts`文件：
- en: '[PRE30]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '**Using the edit dialog component**: Finally, we will use the edit dialog component
    in our user profile component. The first step will be to include this component
    in the `user-profile.component.html`, as follows:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**使用编辑对话框组件**：最后，我们将在用户资料组件中使用编辑对话框组件。第一步是将此组件包含在`user-profile.component.html`中，如下所示：'
- en: '[PRE31]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The second step will be to initialize the edit dialog component in the `user-profile.component.ts`,
    as follows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 第二步是在`user-profile.component.ts`中初始化编辑对话框组件，如下所示：
- en: '[PRE32]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'When the user clicks on any of the Edit buttons, we will need to initialize
    the variables and call the `show()` method:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击任何“编辑”按钮时，我们需要初始化变量并调用`show()`方法：
- en: '[PRE33]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The following are other methods for other update operations in the `user-profile.component.ts`:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在`user-profile.component.ts`中其他更新操作的其他方法：
- en: '[PRE34]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Finally, we configure the edit component in our user module, as follows:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们在用户模块中配置编辑组件，如下所示：
- en: '[PRE35]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Now, when the user clicks on the Edit button, the following edit dialog will
    appear:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当用户点击“编辑”按钮时，以下编辑对话框将出现：
- en: '![](img/00024.jpeg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00024.jpeg)'
- en: Firebase session for the update operation
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新操作的Firebase会话
- en: When a user edits their email and password, Firebase asks for the user to log
    in again. Firebase throws an error when we call the `updatePassword()` method
    in `AngularFireAuth`, and this error is added for security reasons.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户编辑他们的电子邮件和密码时，Firebase会要求用户重新登录。当我们在`AngularFireAuth`中调用`updatePassword()`方法时，Firebase会抛出错误，这个错误是为了安全原因而添加的。
- en: '`This operation is sensitive and requires recent authentication. Log in again
    before retrying this request.`'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '`此操作敏感，需要最近一次的认证。在重试此请求之前请重新登录。`'
- en: The preceding message is shown in the alert dialog in our application, and to
    edit the email or password, we need to log out and refresh the session immediately
    and then perform the action.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的消息显示在我们的应用程序的警告对话框中，要编辑电子邮件或密码，我们需要立即注销并刷新会话，然后执行操作。
- en: The best way to enhance the user experience is to ask the user to log out using
    the popup and refresh the token. We are not implementing this behavior as a part
    of this book, so you can take this as an exercise.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 提升用户体验的最佳方式是让用户通过弹出窗口注销并刷新令牌。我们不会将此行为作为本书的一部分进行实现，所以你可以将其作为练习。
- en: Summary
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Congratulations on completing this chapter! This is one of the most advanced
    chapters. We covered many important concepts related to programming paradigm.
    We discussed passing the data from one module component to another module component.
    As a part of this, we developed two independent modules using the least dependencies.
    We covered RxJS library. We developed an edit component and included it in the
    user profile component. Finally, we covered a Firebase security feature, which
    expires the session while editing sensitive information, such as an email or a
    password.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜你完成本章！这是最先进的章节之一。我们涵盖了与编程范式相关的重要概念。我们讨论了从一个模块组件向另一个模块组件传递数据。作为其中的一部分，我们使用最少的依赖开发了两个独立的模块。我们介绍了RxJS库。我们开发了一个编辑组件并将其包含在用户资料组件中。最后，我们介绍了Firebase的安全功能，在编辑敏感信息（如电子邮件或密码）时，该功能将使会话过期。
- en: In the next chapter, we will enhance our friends application to add the user's
    friends features. We will also retrieve the list of friends and display them in
    the list. We will add pagination to navigate to the friend list.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将增强我们的朋友应用，添加用户的“朋友”功能。我们还将检索朋友列表并在列表中显示它们。我们将添加分页功能以便导航到朋友列表。
