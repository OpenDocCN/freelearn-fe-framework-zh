["```js\nnpm install @tensorflow/tfjs-backend-cpu @tensorflow/tfjs-backend-webgl\n```", "```js\nnpm install @tensorflow-models/coco-ssd\n```", "```js\n<template>  <v-list>\n    <v-list-subheader>Status</v-list-subheader>\n    <v-list-item>\n      <v-list-item-title\n        >AI Model\n        <span v-if=\"isModelLoading\">Loading...\n          <v-progress-circular indeterminate :size=\"16\" color=\"primary\" />\n        </span>\n      </v-list-item-title>\n      <v-list-item-subtitle v-if=\"isModelLoaded\">Loaded!</v-list-item-subtitle>\n      <template v-slot:append v-if=\"isModelLoaded\">\n        <v-icon icon=\"mdi-check\" color=\"success\"></v-icon>\n      </template>\n    </v-list-item>\n  </v-list>\n</template>\n<script setup lang=\"ts\">\nimport { watch } from \"vue\";\nimport { useObjectStore } from \"@/store/object\";\nimport { storeToRefs } from \"pinia\";\nconst objectStore = useObjectStore();\nconst { isModelLoading, isModelLoaded } = storeToRefs(objectStore);\nconst emit = defineEmits([\"model-loaded\"]);\nwatch(isModelLoaded, () => {\n  if (isModelLoaded.value) emit(\"model-loaded\");\n});\n</script>\n```", "```js\n<template>  <v-container>\n    <StatusCheck />\n  </v-container>\n</template>\n<script lang=\"ts\" setup>\nimport StatusCheck from \"@/components/StatusCheck.vue\";\n</script>\n```", "```js\n<template>  <v-container>\n    <StatusCheckSimple @model-loaded=\"modelLoaded = true\" />\n    <v-file-input @change=\"inputFromFile\" v-model=\"image\" accept=\"image/png, image/jpeg\" :disabled=\"!modelLoaded\" />\n    <v-img :src=\"img/url\" height=\"100\"></v-img>\n  </v-container>\n</template>\n<script setup lang=\"ts\">\nimport { ref } from \"vue\";\nimport type { Ref } from \"vue\";\nimport StatusCheckSimple from \"./StatusCheck.vue\";\nconst image: Ref<File | any | undefined> = ref(undefined);\nconst imageToDetect: Ref<HTMLImageElement | undefined> = ref(undefined);\nconst url: Ref<string | undefined> = ref(undefined);\nimport { useObjectStore } from \"@/store/object\";\nimport { storeToRefs } from \"pinia\";\nconst objectStore = useObjectStore();\nconst { detected } = storeToRefs(objectStore);\nconst modelLoaded: Ref<boolean> = ref(false);\nconst inputFromFile = (event: any): void => {\n  const file = event.target.files[0];\n  image.value = [file];\n  imageToDetect.value = dataToImageData(file);\n};\nconst dataToImageData = (dataBlob: Blob | MediaSource): HTMLImageElement => {\n  const objUrl = URL.createObjectURL(dataBlob);\n  const img = new Image();\n  img.onload = () => {\n    URL.revokeObjectURL(img.src);\n  };\n  img.src = objUrl;\n  url.value = objUrl;\n  return img;\n};\n</script>\n```", "```js\n<template>  <v-container>\n    <ImageDetect />\n  </v-container>\n</template>\n<script lang=\"ts\" setup>\nimport ImageDetect from \"@/components/ImageDetect.vue\";\n</script>\n```", "```js\n<template>  <v-btn @click=\"tts\" prepend-icon=\"mdi-microphone\" :disabled=\"isSpeaking\">Speak</v-btn>\n</template>\n<script setup lang=\"ts\">\nimport { ref } from \"vue\";\nimport type { Ref } from \"vue\";\nconst props = defineProps<{\n  message: string;\n}>();\nconst isSpeaking: Ref<boolean> = ref(false);\nconst tts = async () => {\n  const { message } = props;\n  const msg = new SpeechSynthesisUtterance();\n  msg.text = message;\n  msg.rate = 0.8;\n  msg.pitch = 0.2;\n  await window.speechSynthesis.speak(msg);\n  msg.onstart = () => isSpeaking.value = true;\n  msg.onend = () => isSpeaking.value = false;\n};\n</script>\n```", "```js\n<template>  <v-container>\n    <!-- abbreviated –->\n    <div v-if=\"detected\">\n      <v-list>\n        <v-list-item v-for=\"(item, index) in detected\" :key=\"index\">\n          <!-- abbreviated –->\n        </v-list-item>\n      </v-list>\n      <TextToSpeech :message=\"speech\" v-if=\"speech\"></TextToSpeech>\n    </div>\n  </v-container>\n</template>\n<script setup lang=\"ts\">\nimport { ref } from \"vue\";\nimport type { Ref } from \"vue\";\nimport StatusCheckSimple from \"./StatusCheckSimple.vue\";\nimport TextToSpeech from \"./TextToSpeech.vue\";\n// ...abbreviated\n</script>\n```", "```js\nexport default Object.freeze({    MOTIVATIONAL_QUOTES: [\n        \"Believe in yourself and keep coding!\",\n        \"Every Vue project you complete gets you closer to victory!\",\n        \"You're on the right track, keep it up!\",\n        \"Stay focused and never give up!\"\n    ],\n    DETECTION_ACCURACY_THRESHOLD: 0.70,\n    SCORE_ACCURACY_MULTIPLIER: 1.10, // input scores are between DETECTION_ACCURACY_THRESHOLD and 1\n    MAX_ROUNDS: 10,\n    SCORE_FOUND: 100,\n    SCORE_SKIP: -150,\n})\n```", "```js\n<template>  <div>NAME OF THE VIEW</div>\n</template>\n```", "```js\n<template>  <v-app>\n    <v-main>\n      <router-view />\n    </v-main>\n  </v-app>\n</template>\n```", "```js\n// ...abbreviatedexport const useObjectStore = defineStore('object', () => {\n    // ...abbreviated\n    const loadModel = async () => {\n        // ...abbreviated\n    }\n    loadModel();\n    // Full list of available classes listed as displayName on the following link:\n    // https://raw.githubusercontent.com/tensorflow/tfjs-models/master/coco-ssd/src/classes.ts\n    const objects: string[] = [\"person\", \"backpack\", \"umbrella\", \"handbag\", \"tie\", \"suitcase\", \"sports ball\", \"bottle\", \"wine glass\", \"cup\", \"fork\", \"knife\", \"spoon\", \"bowl\", \"banana\", \"apple\", \"orange\", \"broccoli\", \"carrot\", \"chair\", \"couch\", \"potted plant\", \"bed\", \"dining table\", \"toilet\", \"tv\", \"laptop\", \"remote\", \"cell phone\", \"microwave\", \"oven\", \"sink\", \"refrigerator\", \"book\", \"clock\", \"vase\", \"scissors\", \"teddy bear\", \"hair drier\", \"toothbrush\"];\n    return { loadModel, isModelLoading, isModelLoaded, detected, detect, objects }\n})\n```", "```js\n<template>  <v-btn\n    :disabled=\"!canStart\"\n    @click=\"newGame\"\n    prepend-icon=\"mdi-trophy\"\n    append-icon=\"mdi-trophy\"\n    size=\"x-large\"\n    color=\"primary\"\n    ><slot>Start game!</slot></v-btn\n  >\n</template>\n<script lang=\"ts\" setup>\nimport { useAppStore } from \"@/store/app\";\nimport { useGameStore } from \"@/store/game\";\nimport { storeToRefs } from \"pinia\";\nconst gameStore = useGameStore();\nconst appStore = useAppStore();\nconst { canStart } = storeToRefs(gameStore);\nconst { reset } = gameStore;\nconst newGame = () => {\n  reset();\n  appStore.navigateToPage(\"/find\");\n};\n</script>\n```", "```js\n<template>  <v-card class=\"pa-4\">\n    <v-card-title>\n      <h1 class=\"text-h3 text-md-h2 text-wrap\">z Scavenge Hunter</h1>\n    </v-card-title>\n    <v-card-text>\n      <p>Welcome to \"Scavenge Hunter\"! The game where you find things!</p>\n    </v-card-text>\n    <StatusCheck />\n    <v-card-actions class=\"justify-center\">\n      <StartGame />\n    </v-card-actions>\n  </v-card>\n</template>\n<script lang=\"ts\" setup>\nimport StartGame from \"@/components/StartGame.vue\";\nimport StatusCheck from \"@/components/StatusCheck.vue\";\n</script>\n```", "```js\nnpm i @vueuse/core\n```", "```js\n<template>  <v-card class=\"pa-4\">\n    <v-card-title>\n      <h1 class=\"text-h3 text-md-h2 text-wrap\">It's over!</h1>\n    </v-card-title>\n    <v-card-text>\n      <p>Let's see how you did!</p>\n    </v-card-text>\n    <ScoreCard />\n    <v-card-actions class=\"justify-center\">\n      <StartGame>Play Again?</StartGame>\n    </v-card-actions>\n  </v-card>\n</template>\n<script lang=\"ts\" setup>\nimport ScoreCard from \"@/components/ScoreCard.vue\";\nimport StartGame from \"@/components/StartGame.vue\";\n</script>\n```", "```js\n{    \"scripts\": {\n    \"dev\": \"vite --host\",\n    \"build\": \"vue-tsc --noEmit && vite build\",\n    \"preview\": \"vite preview\",\n    \"lint\": \"eslint . --fix --ignore-path .gitignore\"\n  },\n  \"dependencies\": {\n    // ...abbreviated\n  },\n  \"devDependencies\": {\n    // ...abbreviated\n  }\n}\n```", "```js\nnpm install --save-dev @vitejs/plugin-basic-ssl\n```", "```js\n// Pluginsimport vue from '@vitejs/plugin-vue'\nimport vuetify, { transformAssetUrls } from 'vite-plugin-vuetify'\nimport basicSsl from '@vitejs/plugin-basic-ssl'\n// Utilities\nimport { defineConfig } from 'vite'\nimport { fileURLToPath, URL } from 'node:url'\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [\n    basicSsl(),\n    vue({\n      template: { transformAssetUrls }\n    }),\n    // ...abbreviated\n  ],\n  // ...abbreviated\n})\n```", "```js\n    // ...abbreviated    const detect = async (img: any, className?: string) => {\n        try {\n            detected.value = []\n            const result = await cocoSsdModel.detect(img)\n            const filter = className ? (item: DetectedObject) => (item.score >= config.DETECTION_ACCURACY_THRESHOLD && item.class === className) : () => true\n            detected.value = result.map((item: DetectedObject) => item).filter(filter).sort((a: DetectedObject, b: DetectedObject) => b.score - a.score)\n        } catch (e) {\n            // handle error if model is not loaded\n        }\n    };\n    // ...abbreviated\n```", "```js\nimport { ref, watchEffect, watch } from \"vue\";// ...abbreviated\nimport { storeToRefs } from \"pinia\";\nimport { useObjectStore } from \"@/store/object\";\nconst objectStore = useObjectStore();\nconst { detected } = storeToRefs(objectStore);\nconst { detect } = objectStore;\nimport { useGameStore } from \"@/store/game\";\nconst gameStore = useGameStore();\nconst { currentCategory } = storeToRefs(gameStore);\n// ...abbreviated\n```", "```js\nconst detectObject = async (): Promise<void> => {  if (!props.disabled) {\n    await detect(video.value, currentCategory.value);\n  }\n  window.requestAnimationFrame(detectObject);\n};\n```", "```js\nwatch(enabled, () => {  if (enabled.value && video.value) {\n    video.value.addEventListener(\"loadeddata\", detectObject);\n  }\n});\n```", "```js\nconst emit = defineEmits([\"found\"]);watch(detected, () => {\n  if (detected.value?.length > 0) {\n    emit(\"found\", detected.value[0]);\n  }\n});\n```", "```js\n<CameraDetect @found=\"found\" :disabled=\"detectionDisabled\" />\n```", "```js\n// ...abbreviatedimport { useAppStore } from \"@/store/app\";\nconst appStore = useAppStore();\nconst { dialogVisible } = storeToRefs(appStore);\n// ...abbreviated\n```", "```js\n// ...abbreviatedconst detectObject = async (): Promise<void> => {\n  if (!props.disabled && !dialogVisible.value) {\n    await detect(video.value, currentCategory.value);\n  }\n  window.requestAnimationFrame(detectObject);\n};\n// ...abbreviated\n```", "```js\n// ...abbreviatedconst dialogEndLine = computed(() =>\n  objectsFound.value + skips.value >= objectsLimit.value\n    ? \"You're done!\"\n    : \"Get ready for the next round!\"\n);\n// ...abbreviated\n```", "```js\nconst found = (e: { class: string; score: number }) => {  detectionDisabled.value = true;\n  objectsFound.value++;\n  const newScore = Math.round(\n    config.SCORE_FOUND * (e.score + 1) * config.SCORE_ACCURACY_MULTIPLIER\n  );\n  score.value += newScore;\n  newRound();\n  appStore.showDialog(\n\"Congratulations! 🥳\",\n    `<p>You've scored ${newScore} points by finding <strong>${e.class}</strong>!</p><p>${dialogEndLine.value}</p>`\n  );\n};\n```", "```js\nconst skipped = () => {  detectionDisabled.value = true;\n  skips.value++;\n  if ((score.value + config.SCORE_SKIP) <= 0) {\n    score.value = 0;\n  } else {\n    score.value += config.SCORE_SKIP;\n  }\n  newRound();\n  appStore.showDialog(\n\"Oh no! 🙀\",\n    `<p>Skipping cost you ${-config.SCORE_SKIP} points!</p><p>${\n      dialogEndLine.value\n    }</p>`\n  );\n};\n```"]