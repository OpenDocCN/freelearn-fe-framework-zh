["```js\nlint:\n  runs-on: ubuntu-latest\n  steps:\n    - uses: actions/checkout@v3\n    - run: |\n        yarn\n        yarn lint\n```", "```js\nlighthouse:\n   runs-on: ubuntu-latest\n   needs: deploy\n   steps:\n     - uses: actions/checkout@v2\n     - name: Run Lighthouse on urls and validate with\n             lighthouserc\n       uses: treosh/lighthouse-ci-action@v7\n       with:\n         urls: |\n           ${{ needs.deploy.outputs.preview-url }}\n         budgetPath: ./budget.json\n         runs: 3\n```", "```js\nunit_test:\n  runs-on: ubuntu-latest\n  steps:\n    - uses: actions/checkout@v3\n    - run: |\n        yarn\n        yarn test:unit\ncomponent_test:\n  runs-on: ubuntu-latest\n  needs: unit_test\n  steps:\n    - uses: actions/checkout@v3\n    - run: |\n        yarn\n        yarn test:component\ne2e_test:\n  runs-on: ubuntu-latest\n  needs: component_test\n  steps:\n    - uses: actions/checkout@v3\n    - run: |\n        yarn\n        yarn test:e2e\n```", "```js\ndeploy:\n   runs-on: ubuntu-latest\n   needs: e2e_test\n   steps:\n     - uses: actions/checkout@v2\n     - name: Deploy to Netlify\n       uses: nwtgck/actions-netlify@v1.2\n       id: deploy-to-netlify\n       with:\n         publish-dir: './dist'\n         production-branch: master\n         github-token: ${{ secrets.GITHUB_TOKEN }}\n         deploy-message: \"Deploy from GitHub Actions\"\n         enable-pull-request-comment: false\n         enable-commit-comment: true\n         overwrites-pull-request-comment: true\n       env:\n         NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN\n                              }}\n         NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}\n       timeout-minutes: 1\n   outputs:\n     preview-url:\n       ${{ steps.deploy-to-netlify.outputs.deploy-url }}\n```", "```js\non:\npull_request:\n  branches:\n    - chapter-12\njobs:\nlint:\n  runs-on: ubuntu-latest\n  steps:\n    - uses: actions/checkout@v3\n    - run: |\n        yarn\n        yarn lint\nunit_test:\n  runs-on: ubuntu-latest\n  steps:\n    - uses: actions/checkout@v3\n    - run: |\n        yarn\n        yarn test:unit\ncomponent_test:\n  runs-on: ubuntu-latest\n  needs: unit_test\n  steps:\n    - uses: actions/checkout@v3\n    - run: |\n        yarn\n        yarn test:component\ne2e_test:\n  runs-on: ubuntu-latest\n  needs: component_test\n  steps:\n    - uses: actions/checkout@v3\n    - run: |\n        yarn\n        yarn test:e2e\ndeploy:\n   runs-on: ubuntu-latest\n   needs: e2e_test\n   steps:\n     - uses: actions/checkout@v2\n     - name: Deploy to Netlify\n       uses: nwtgck/actions-netlify@v1.2\n       id: deploy-to-netlify\n       with:\n         publish-dir: './dist'\n         production-branch: master\n         github-token: ${{ secrets.GITHUB_TOKEN }}\n         deploy-message: \"Deploy from GitHub Actions\"\n         enable-pull-request-comment: false\n         enable-commit-comment: true\n         overwrites-pull-request-comment: true\n       env:\n         NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}\n         NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}\n       timeout-minutes: 1\n   outputs:\n     preview-url:\n       ${{ steps.deploy-to-netlify.outputs.deploy-url }}\nlighthouse:\n   runs-on: ubuntu-latest\n   needs: deploy\n   steps:\n     - uses: actions/checkout@v2\n     - name: Run Lighthouse on urls and validate with\n             lighthouserc\n       uses: treosh/lighthouse-ci-action@v7\n       with:\n         urls: |\n           ${{ needs.deploy.outputs.preview-url }}\n         budgetPath: ./budget.json\n         runs: 3\n```", "```js\n# Use the official Node.js 14 Alpine image from https://hub.docker.com/_/node.\n# Using an image with specific version tags allows deterministic builds.\nFROM node:fermium-alpine3.14 AS builder\n# Create and change to the app directory.\nWORKDIR /app\n# Copy important root files to the builder image.\nCOPY package*.json ./\n# Install production dependencies.\nRUN npm install\n# Copy the Vue 3 source to the container image.\nCOPY . .\n# build app for production with minification\nRUN npm run build\n# Production stage\nFROM nginx:stable-alpine as production-stage\n# Copy the Vue 3 source to the container image.\nCOPY --from=builder /app/dist /usr/share/nginx/html\nVOLUME /app/node_modules\nEXPOSE 80\n# Run the Vue service on container startup.\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n```", "```js\ndocker build -t vue-paper-dashboard .\ndocker run -dt --name vue-paper-dashboard -p 8080:80 vue-paper-dashboard:latest\n```", "```js\n    {\n       \"Version\": \"2012-10-17\",\n       \"Statement\": [\n           {\n               \"Effect\": \"Allow\",\n               \"Principal\": {\n                   \"Service\":\n                     \"build.apprunner.amazonaws.com\"\n               },\n               \"Action\": \"sts:AssumeRole\"\n           }\n       ]\n    }\n    ```", "```js\n{\n   \"Version\": \"2012-10-17\",\n   \"Statement\": [\n       {\n           \"Sid\": \"VisualEditor0\",\n           \"Effect\": \"Allow\",\n           \"Action\": \"apprunner:*\",\n           \"Resource\": \"*\"\n       },\n       {\n           \"Sid\": \"VisualEditor1\",\n           \"Effect\": \"Allow\",\n           \"Action\": [\n               \"iam:PassRole\",\n               \"iam:CreateServiceLinkedRole\"\n           ],\n           \"Resource\": \"*\"\n       },\n       {\n           \"Sid\": \"VisualEditor2\",\n           \"Effect\": \"Allow\",\n           \"Action\": \"sts:AssumeRole\",\n           \"Resource\": \"{ENTER_YOUR_SERVICE_ROLE_ARN_HERE}\"\n       },\n       {\n           \"Sid\": \"VisualEditor3\",\n           \"Effect\": \"Allow\",\n           \"Action\": [\n               \"ecr:GetDownloadUrlForLayer\",\n               \"ecr:BatchGetImage\",\n               \"ecr:BatchCheckLayerAvailability\",\n               \"ecr:PutImage\",\n               \"ecr:InitiateLayerUpload\",\n               \"ecr:UploadLayerPart\",\n               \"ecr:CompleteLayerUpload\",\n               \"ecr:GetAuthorizationToken\"\n           ],\n           \"Resource\": \"*\"\n       }\n   ]\n}\n```", "```js\nname: PRODUCTION - Deploy container to AWS App Runner\non:\n push:\n   branches:\n     - master\n workflow_dispatch: # Allow manual invocation of the\n                    # workflow\nenv:\n ENVIRONMENT_NAME: production\n ECR_REPOSITORY_NAME: vue-pinterest-demo\njobs:\n deploy:\n   runs-on: ubuntu-latest\n   steps:\n     - name: Checkout\n       uses: actions/checkout@v2\n       with:\n         persist-credentials: false\n     - name: Configure AWS credentials\n       id: aws-credentials\n       uses: aws-actions/configure-aws-credentials@v1\n       with:\n         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}\n         aws-secret-access-key:\n           ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n         aws-region: ${{ secrets.AWS_REGION }}\n     - name: Login to Amazon ECR\n       id: ecr-login\n       uses: aws-actions/amazon-ecr-login@v1\n     - name: Build, tag, and push image to Amazon ECR\n       id: build-image\n       env:\n         ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}\n         ECR_REPOSITORY: ${{ env.ECR_REPOSITORY_NAME }}\n         IMAGE_TAG: ${{ github.sha }}\n       run: |\n         docker build -t\n         $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .\n         docker push\n         $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG\n         echo \"::set-output name=\n           image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG\"\n     - name: Deploy to App Runner\n       id: deploy-app\n       uses: awslabs/amazon-app-runner-deploy@main\n       with:\n         service: erp-app-${{ env.ENVIRONMENT_NAME }}\n         image: ${{ steps.build-image.outputs.image }}\n         access-role-arn: ${{ secrets.ROLE_ARN }}\n         region: ${{ secrets.AWS_REGION }}\n         cpu : 1\n         memory : 2\n         port: 80\n         wait-for-service-stability: false\n     - name: App Runner output\n       run: echo \"App runner output\n         ${{ steps.deploy-app.outputs.service-id }}\"\n```"]