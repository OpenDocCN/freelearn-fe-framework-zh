- en: '4'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '4'
- en: Integrating PrimeNG into Your Angular Project
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将PrimeNG集成到您的Angular项目中
- en: In this chapter, we will explore the process of integrating PrimeNG, a popular
    UI component library, into your Angular projects. PrimeNG provides a rich set
    of pre-built components that can enhance the functionality and aesthetics of your
    application. Whether you need to incorporate complex data tables, responsive layouts,
    or interactive charts, PrimeNG offers a wide range of components to meet your
    requirements. By utilizing PrimeNG, it will help to save time from building foundation
    components in a robust, reliable, and accessible way, so that you can focus on
    the application rather than building all the core components of typical UI elements.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨将PrimeNG（一个流行的UI组件库）集成到您的Angular项目中的过程。PrimeNG提供了一套丰富的预构建组件，可以增强您应用程序的功能和美观。无论您需要整合复杂的数据表、响应式布局还是交互式图表，PrimeNG都提供了一系列组件以满足您的需求。通过使用PrimeNG，它将帮助您以稳健、可靠和可访问的方式节省构建基础组件的时间，从而使您能够专注于应用程序而不是构建典型UI元素的所有核心组件。
- en: By following the step-by-step instructions and examples provided in this chapter,
    you will gain the knowledge and skills necessary to seamlessly integrate PrimeNG
    into your Angular projects, and create feature-rich and visually appealing applications
    with ease.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 通过遵循本章提供的逐步说明和示例，您将获得将PrimeNG无缝集成到您的Angular项目中以及轻松创建功能丰富且视觉吸引力的应用程序所需的知识和技能。
- en: 'The chapter will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Adding PrimeNG components to your Angular project
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将PrimeNG组件添加到您的Angular项目中
- en: Configuring PrimeNG modules and dependencies
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置PrimeNG模块和依赖项
- en: Working with PrimeNG component APIs and directives
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用PrimeNG组件API和指令
- en: Customizing component styles and themes
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义组件样式和主题
- en: Troubleshooting common integration issues
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解决常见的集成问题
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'This chapter contains various working code samples on how to integrate PrimeNG
    into Angular projects. You can find the related source code in the `chapter-04`
    folder of the following GitHub repository: [https://github.com/PacktPublishing/Next-Level-UI-Development-with-PrimeNG/tree/main/apps/chapter-04](https://github.com/PacktPublishing/Next-Level-UI-Development-with-PrimeNG/tree/main/apps/chapter-04).'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章包含各种示例代码，展示如何将PrimeNG集成到Angular项目中。您可以在以下GitHub仓库的`chapter-04`文件夹中找到相关源代码：[https://github.com/PacktPublishing/Next-Level-UI-Development-with-PrimeNG/tree/main/apps/chapter-04](https://github.com/PacktPublishing/Next-Level-UI-Development-with-PrimeNG/tree/main/apps/chapter-04)。
- en: Adding PrimeNG components to your Angular project
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将PrimeNG组件添加到您的Angular项目中
- en: '**PrimeNG** is a powerful UI component library for Angular that provides a
    wide range of pre-built components to enhance the functionality and visual appeal
    of your application. In this section, we will explore how to add PrimeNG and its
    dependencies to your Angular project, import the necessary styles, and utilize
    PrimeNG components in your templates.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**PrimeNG** 是一个强大的Angular UI组件库，它提供了一系列预构建组件，可以增强您应用程序的功能和视觉吸引力。在本节中，我们将探讨如何将PrimeNG及其依赖项添加到您的Angular项目中，导入必要的样式，并在模板中使用PrimeNG组件。'
- en: Installing PrimeNG
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装PrimeNG
- en: 'Before starting to integrate PrimeNG into your Angular project, make sure that
    you set up a fresh project to begin with. Now follow these steps to install PrimeNG
    in your Angular project:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始将PrimeNG集成到您的Angular项目之前，请确保您从一个全新的项目开始。现在按照以下步骤在您的Angular项目中安装PrimeNG：
- en: Open a terminal or command prompt in your project directory.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的项目目录中打开一个终端或命令提示符。
- en: 'Run the following command to install PrimeNG and save it as a dependency in
    your project:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令以安装PrimeNG并将其作为依赖项保存到您的项目中：
- en: '[PRE0]'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: After the installation process, you will see `primeng` in the `package.json`
    file in your root directory.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 安装过程完成后，您将在根目录的`package.json`文件中看到`primeng`。
- en: Note
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: At the time of writing this book, we’re using PrimeNG version `17.0.0`. If you
    have a different version and your app doesn’t work correctly, you can try with
    `yarn add primeng@17.0.0` to install the correct version of the plugin for this
    book.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本书时，我们正在使用PrimeNG版本`17.0.0`。如果您有不同的版本并且您的应用程序无法正常工作，您可以尝试使用`yarn add primeng@17.0.0`来安装本书插件的正确版本。
- en: The `primeng` package is all that you need to get started with integration.
    In the next section, we will add some styles and themes to your application.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 您只需要`primeng`包就可以开始集成。在下一节中，我们将向您的应用程序添加一些样式和主题。
- en: Importing PrimeNG styles into your Angular application
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将PrimeNG样式导入到您的Angular应用程序中
- en: The Theme and Core styles are essential CSS files for the components. You can
    find the comprehensive selection of available themes in the `angular.json` or
    `src/styles.css` file. In this section, we will use the `lara-light-blue` theme
    as an example.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 主题和核心样式是组件的必要CSS文件。您可以在`angular.json`或`src/styles.css`文件中找到可用的主题的全面选择。在本节中，我们将以`lara-light-blue`主题为例。
- en: 'In order to add themes and styles to your `angular.json` file, go to the `styles`
    section of the file and add the styles like so:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将主题和样式添加到您的`angular.json`文件中，请转到文件的`styles`部分并添加样式，如下所示：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Besides adding themes and styles to the `angular.json` file, you can also utilize
    `styles.scss` to import the styling:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 除了在`angular.json`文件中添加主题和样式外，您还可以利用`styles.scss`导入样式：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In addition, each theme has its own font family; it’s suggested to apply a
    font family to your application to achieve a unified look:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，每个主题都有自己的字体家族；建议为您的应用应用一个字体家族以实现统一的风格：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '`--font-family` is a CSS variable, also known as a CSS custom property, which
    are placeholders that hold values and can be used throughout a CSS stylesheet.
    You can learn more at [https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties).'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`--font-family`是一个CSS变量，也称为CSS自定义属性，它们是占位符，可以持有值并在整个CSS样式表中使用。您可以在[https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties)上了解更多信息。'
- en: 'As an example, for the `lara-light-blue` theme, the default font family is
    defined under the `theme.css` file:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，对于`lara-light-blue`主题，默认字体家族在`theme.css`文件中定义：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you are using Nx Workspace, instead of `angular.json`, use `project.json`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在使用Nx Workspace，则使用`project.json`而不是`angular.json`。
- en: Working with PrimeNG icons
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与PrimeNG图标一起工作
- en: '**Icons** play a crucial role in enhancing the visual appeal and usability
    of web applications, providing intuitive visual cues and helping users quickly
    identify and interact with various elements. In this section, we will explore
    how to work with icons in PrimeNG and leverage the vast collection of icons it
    offers.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**图标**在增强Web应用的视觉吸引力和可用性方面发挥着至关重要的作用，提供直观的视觉提示，并帮助用户快速识别和交互各种元素。在本节中，我们将探讨如何在PrimeNG中处理图标并利用它提供的庞大图标库。'
- en: 'To utilize PrimeIcons, you need to install the `primeicons` package:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用PrimeIcons，您需要安装`primeicons`包：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'After that, the CSS file of the icon library needs to be imported in `styles.scss`
    of your application:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，需要在应用的`styles.scss`文件中导入图标库的CSS文件：
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'For a full list of PrimeIcons, please check this website: [https://primeng.org/icons](https://primeng.org/icons).'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取PrimeIcons的完整列表，请查看此网站：[https://primeng.org/icons](https://primeng.org/icons)。
- en: 'PrimeIcons offers special syntax: `pi pi-{icons}`, which can be utilized in
    your Angular components. You have the flexibility to substitute `{icons}` with
    an icon name from the provided link, such as `pi pi-user`, to indicate that it
    represents a user icon. In case you want to use Prime Icons as a standalone element,
    you can utilize the `i` or `span` element, like so:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: PrimeIcons提供了特殊的语法：`pi pi-{icons}`，可以在您的Angular组件中使用。您可以将`{icons}`替换为提供的链接中的图标名称，例如`pi
    pi-user`，以表示它代表一个用户图标。如果您想将Prime Icons作为一个独立元素使用，可以使用`i`或`span`元素，如下所示：
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In this example, we use the `pi-user` icon. You can replace it with any other
    icon name from the supported icon libraries.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，我们使用`pi-user`图标。您可以用支持的图标库中的任何其他图标名称替换它。
- en: Adding PrimeNG methods
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加PrimeNG方法
- en: 'There are two methods to add PrimeNG to your template: PrimeNG components and
    PrimeNG directives. To illustrate this, let’s use PrimeNG’s `p-button` element.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 向模板中添加PrimeNG有两种方法：PrimeNG组件和PrimeNG指令。为了说明这一点，让我们使用PrimeNG的`p-button`元素。
- en: 'The `p-button` component is a self-contained UI element that can be customized
    and reused throughout your app. It comes with built-in functionality, such as
    event handling, and a variety of customization options, including icon support,
    label, and style classes. Here’s an example of how to use the `p-button` component:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`p-button`组件是一个自包含的UI元素，可以在您的整个应用中进行自定义和重用。它具有内置功能，如事件处理，以及各种自定义选项，包括图标支持、标签和样式类。以下是如何使用`p-button`组件的示例：'
- en: '[PRE8]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In contrast, the `pButton` directive is used to add behavior to an existing
    HTML button element. It allows you to enhance the functionality of the button
    element by adding PrimeNG-specific features, such as styling and event handling.
    Here’s an example of how to use the `pButton` directive:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，`pButton` 指令用于向现有的 HTML 按钮元素添加行为。它允许你通过添加 PrimeNG 特定的功能（如样式和事件处理）来增强按钮元素的功能。以下是如何使用
    `pButton` 指令的示例：
- en: '[PRE9]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In this example, we’re using the `pButton` directive to enhance an existing
    HTML button element with PrimeNG-specific features. We’re setting the `type` attribute
    to `"button"` and adding a `label` to the button.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用 `pButton` 指令通过 PrimeNG 特定的功能来增强现有的 HTML 按钮元素。我们将 `type` 属性设置为 `"button"`
    并向按钮添加一个 `label`。
- en: It’s recommended to use the `p-button` component when you need a self-contained
    UI element that can be customized and reused throughout your app, and when you
    need to add a lot of built-in functionality to your button. For the `pButton`
    directive, you can use it to add behavior to existing HTML button elements such
    as `button`, `input`, or `tag`, and when you need to enhance the functionality
    of the button with PrimeNG-specific features.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 当你需要一个可以自定义和在整个应用程序中重用的自包含 UI 元素，并且需要向按钮添加大量内置功能时，建议使用 `p-button` 组件。对于 `pButton`
    指令，你可以用它来向现有的 HTML 按钮元素（如 `button`、`input` 或 `tag`）添加行为，并在需要使用 PrimeNG 特定的功能来增强按钮功能时使用它。
- en: Using PrimeNG components in your templates
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在模板中使用 PrimeNG 组件
- en: The section focuses on incorporating PrimeNG components seamlessly into your
    templates. We will learn how to leverage the extensive library of PrimeNG components
    effectively within your web applications. Let’s get started.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这一节重点介绍如何无缝地将 PrimeNG 组件集成到模板中。我们将学习如何在你的 Web 应用程序中有效地利用 PrimeNG 组件的丰富库。让我们开始吧。
- en: 'If you are using the `NgModule` approach, all you need to do is import the
    PrimeNG modules to `NgModule` decorator:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用 `NgModule` 方法，你所需要做的就是将 PrimeNG 模块导入到 `NgModule` 装饰器中：
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The previous code shows that we imported `ButtonModule` into `AppModule`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码显示我们将 `ButtonModule` 导入到 `AppModule` 中。
- en: 'Once the PrimeNG modules are imported, you can start using PrimeNG components
    in your Angular templates. Follow these steps to utilize PrimeNG components:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦导入 PrimeNG 模块，你就可以开始在 Angular 模板中使用 PrimeNG 组件。按照以下步骤来使用 PrimeNG 组件：
- en: Open a component template file (`.html`) where you want to use PrimeNG components.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你想要使用 PrimeNG 组件的组件模板文件（`.html`）。
- en: 'Place the PrimeNG component selector in the template where you want the component
    to appear. For example, to add a button component, use the following code:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 PrimeNG 组件选择器放置在模板中你想组件出现的位置。例如，要添加按钮组件，请使用以下代码：
- en: '[PRE11]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'For the standalone component approach, you will import the PrimeNG component
    into the Angular component that you are working on:'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于独立组件方法，你将需要将 PrimeNG 组件导入到你正在工作的 Angular 组件中：
- en: '[PRE12]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'As a result, you will have a styled button on your browser:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，你将在浏览器上得到一个样式化的按钮：
- en: '![Figure 4.1 – PrimeNg button component](img/B18805_04_01.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.1 – PrimeNg 按钮组件](img/B18805_04_01.jpg)'
- en: Figure 4.1 – PrimeNg button component
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.1 – PrimeNg 按钮组件
- en: Working with PrimeNG component APIs and directives
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 PrimeNG 组件 API 和指令
- en: As a developer, you understand the importance of leveraging powerful and customizable
    libraries to streamline your development process. Here, we’ll see how to use PrimeNG
    APIs and directives to interact with components programmatically, customize their
    behavior, and harness their full potential.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 作为开发者，你明白利用强大且可定制的库来简化开发过程的重要性。在这里，我们将了解如何使用 PrimeNG API 和指令以编程方式与组件交互，自定义其行为，并发挥其全部潜力。
- en: 'Each PrimeNG component will have its own APIs and configurations. Let’s consider
    the PrimeNG button component as an example:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 PrimeNG 组件都将有其自己的 API 和配置。以 PrimeNG 按钮组件为例：
- en: '[PRE13]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In this example, we’re using the `label` input to set the button label, the
    `icon` input to set the icon displayed on the button, the `iconPos` input to set
    the icon position to the right of the label, and the `disabled` input to disable
    the button based on the value of `isDisabled` property.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用 `label` 输入来设置按钮标签，使用 `icon` 输入来设置按钮上显示的图标，使用 `iconPos` 输入来设置图标位置在标签的右侧，以及使用
    `disabled` 输入根据 `isDisabled` 属性的值来禁用按钮。
- en: 'You can see the result in the following screenshot:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在以下屏幕截图中看到结果：
- en: '![Figure 4.2 – PrimeNG button configuration](img/B18805_04_02.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.2 – PrimeNG 按钮配置](img/B18805_04_02.jpg)'
- en: Figure 4.2 – PrimeNG button configuration
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.2 – PrimeNG按钮配置
- en: 'Here are some other configuration options you can use with `p-button`:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些你可以与`p-button`一起使用的其他配置选项：
- en: '`styleClass`: Sets the CSS class for the button'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`styleClass`: 设置按钮的CSS类'
- en: '`type`: Sets the type of button (e.g. `"button"`, `"``submit"`, `"reset"`)'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`type`: 设置按钮的类型（例如："button"、"submit"、"reset"）'
- en: '`tabIndex`: Sets the tab index for the button'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tabIndex`: 设置按钮的tab索引'
- en: '`loading`: Indicates the button is in the loading state'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`loading`: 表示按钮处于加载状态'
- en: '`loadingIcon`: Sets the icon to display in the loading state'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`loadingIcon`: 设置加载状态时显示的图标'
- en: 'In case you want to trigger an event after clicking the button, you can utilize
    the `click` event emitter in order to trigger a function from your component:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想在点击按钮后触发事件，你可以利用`click`事件发射器来从你的组件中触发一个函数：
- en: '[PRE14]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The following code shows a PrimeNG button with a click event handler:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码展示了带有点击事件处理器的PrimeNG按钮：
- en: '`(click)="onClickEvent()"`: When the user clicks on the button, it will trigger
    the `onClickEvent()` function on the component'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`(click)="onClickEvent()"`: 当用户点击按钮时，将在组件上触发`onClickEvent()`函数'
- en: '`[loading]="loading"`: Show the loading state of the button after being clicked'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[loading]="loading"`: 在点击后显示按钮的加载状态'
- en: 'Let’s take a look at the result:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看结果：
- en: '![Figure 4.3 – PrimeNG button with click event](img/B18805_04_03.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![图4.3 – 带点击事件的PrimeNG按钮](img/B18805_04_03.jpg)'
- en: Figure 4.3 – PrimeNG button with click event
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.3 – 带点击事件的PrimeNG按钮
- en: After the button is clicked, the loading state is activated and shows a loading
    icon on the left of the button.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在按钮被点击后，加载状态被激活，并在按钮的左侧显示加载图标。
- en: By following these steps, you can easily add PrimeNG components to your Angular
    project. In the next section, we will delve into some PrimeNG configurations.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 通过遵循这些步骤，你可以轻松地将PrimeNG组件添加到你的Angular项目中。在下一节中，我们将深入了解一些PrimeNG配置。
- en: Configuring PrimeNG modules and dependencies
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置PrimeNG模块和依赖项
- en: PrimeNG provides a comprehensive set of configuration options that can be applied
    to its components. These options enable you to control various aspects of the
    component’s functionality and visual presentation. Let’s take a look at some commonly
    used configuration options.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: PrimeNG提供了一套全面的配置选项，可以应用于其组件。这些选项使你能够控制组件功能的不同方面和视觉呈现。让我们看看一些常用的配置选项。
- en: Global configuration
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 全局配置
- en: PrimeNG offers a global configuration object that allows you to define default
    settings for all components in your application. For example, you can configure
    the default locale, animation duration, and other global options using the `PrimeNGConfig`
    object. The provided code snippets show the initialization and configuration of
    PrimeNG during the bootstrapping process.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: PrimeNG提供了一个全局配置对象，允许你为应用程序中的所有组件定义默认设置。例如，你可以使用`PrimeNGConfig`对象配置默认区域设置、动画持续时间和其他全局选项。提供的代码片段显示了在引导过程中PrimeNG的初始化和配置。
- en: 'First, Let’s create the global configuration file for PrimeNG:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们为PrimeNG创建全局配置文件：
- en: '[PRE15]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This code defines the `primeNgProvider`, which is a provider that initializes
    and configures PrimeNG. It uses the `APP_INITIALIZER` token from `@angular/core`
    to ensure that the configuration is applied before the application starts.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码定义了`primeNgProvider`，这是一个初始化和配置PrimeNG的提供者。它使用`@angular/core`中的`APP_INITIALIZER`令牌来确保配置在应用程序启动前应用。
- en: Note
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 备注
- en: '`APP_INITIALIZER` is an Angular feature that allows you to run some initialization
    tasks before your application starts. By providing an array of functions or services
    to the `APP_INITIALIZER` token in the `providers` array of your application configuration,
    Angular ensures that these tasks are executed and completed before the application
    is fully loaded. You can learn more at [https://angular.io/api/core/APP_INITIALIZER](https://angular.io/api/core/APP_INITIALIZER).'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`APP_INITIALIZER`是Angular的一个功能，允许你在应用程序启动前运行一些初始化任务。通过向应用程序配置中的`providers`数组提供函数或服务到`APP_INITIALIZER`令牌，Angular确保这些任务在应用程序完全加载前执行并完成。你可以了解更多信息在[https://angular.io/api/core/APP_INITIALIZER](https://angular.io/api/core/APP_INITIALIZER)。'
- en: 'The `factory` function is the implementation of the provider. It receives the
    `PrimeNGConfig` object as a dependency and returns a function. When this function
    is executed during the application initialization, it configures various aspects
    of PrimeNG. In this example, it enables the ripple effect (`ripple: true`), which
    is a visual animation or graphical effect that occurs when the button is interacted
    with and sets the `z-index` values for different PrimeNG components.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`factory` 函数是提供者的实现。它接收 `PrimeNGConfig` 对象作为依赖项，并返回一个函数。当此函数在应用程序初始化期间执行时，它配置
    PrimeNG 的各个方面。在这个例子中，它启用了涟漪效果（`ripple: true`），这是一种在按钮交互时发生的视觉动画或图形效果，并设置了不同 PrimeNG
    组件的 `z-index` 值。'
- en: 'After that, we can add the PrimeNG global config to the app configuration file:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们可以将 PrimeNg 全局配置添加到应用程序配置文件中：
- en: '[PRE16]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This code is part of the Angular application’s bootstrap process. It provides
    the `primeNgProvider` as a provider, which is responsible for initializing and
    configuring PrimeNG.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码是 Angular 应用程序引导过程的一部分。它提供 `primeNgProvider` 作为提供者，负责初始化和配置 PrimeNg。
- en: By providing the `primeNgProvider` as a provider in the application’s bootstrap
    process, it ensures that PrimeNG is properly initialized and configured before
    the application starts, allowing components and features of PrimeNG to be used
    seamlessly throughout the application.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在应用程序的引导过程中提供 `primeNgProvider` 作为提供者，它确保在应用程序启动之前正确初始化和配置了 PrimeNg，从而允许在应用程序的整个过程中无缝使用
    PrimeNg 的组件和功能。
- en: Angular animation configuration
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Angular 动画配置
- en: Animations play a crucial role in creating engaging and interactive user interfaces.
    In Angular, animations can be utilized to bring components to life and provide
    a smooth and visually appealing user experience. In this section, we will explore
    how to integrate and configure animations in your Angular application.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 动画在创建引人入胜和交互式用户界面中起着至关重要的作用。在 Angular 中，动画可以用来使组件生动起来，并提供平滑且视觉上吸引人的用户体验。在本节中，我们将探讨如何在您的
    Angular 应用程序中集成和配置动画。
- en: To enable animations in your Angular application, you need to import the `provideAnimations`
    function from the `@angular/platform-browser/animations` package. This function
    provides the necessary functionality and tools to work with animations in Angular.
    It leverages the underlying animation capabilities of the browser to deliver seamless
    animations.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 要在您的 Angular 应用程序中启用动画，您需要从 `@angular/platform-browser/animations` 包中导入 `provideAnimations`
    函数。此函数提供了在 Angular 中处理动画所需的功能和工具。它利用浏览器底层的动画能力来提供无缝的动画效果。
- en: 'To import `provideAnimations`, you need to include it in the `providers` array
    of your app configuration:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 要导入 `provideAnimations`，您需要将其包含在应用程序配置的 `providers` 数组中：
- en: '[PRE17]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In certain scenarios, you may prefer to disable animations globally in your
    application. This could be to optimize performance or accommodate specific user
    preferences. Angular provides the `provideNoopAnimations` function as an alternative
    to `provideAnimations` for disabling animations:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些场景下，您可能希望全局禁用应用程序中的动画。这可能是为了优化性能或适应特定的用户偏好。Angular 提供了 `provideNoopAnimations`
    函数作为 `provideAnimations` 的替代方案来禁用动画：
- en: '[PRE18]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The `provideNoopAnimations` function essentially replaces the animation functionality
    with a no-operation implementation. This results in animations being disabled
    throughout your application.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`provideNoopAnimations` 函数实际上用无操作实现替换了动画功能。这导致在整个应用程序中禁用动画。'
- en: In the next section, we will explore further how to customize styles and themes.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将进一步探讨如何自定义样式和主题。
- en: Customizing component styles and themes
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义组件样式和主题
- en: PrimeNg provides a wide range of components with default styles that are designed
    to be functional and visually appealing. However, to create a seamless integration
    with your application’s design, you may need to customize the appearance of PrimeNG
    components. In this section, we will explore various techniques for customizing
    component styles and themes in PrimeNG to achieve the desired look and feel.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: PrimeNg 提供了一系列具有默认样式的组件，这些组件旨在功能性和视觉吸引力。然而，为了与您应用程序的设计实现无缝集成，您可能需要自定义 PrimeNg
    组件的外观。在本节中，我们将探讨在 PrimeNG 中自定义组件样式和主题的各种技术，以实现所需的视觉效果和感觉。
- en: Overriding styles at the component level
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在组件级别覆盖样式
- en: 'Let’s say you want to change the background color and border radius of a `Button`
    component. Here’s an example of how you can override the default styles of the
    `Button` component using CSS:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想要改变 `Button` 组件的背景颜色和边框半径。以下是一个使用 CSS 覆盖 `Button` 组件默认样式的例子：
- en: '[PRE19]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'In this example, we’re targeting the `.p-button` class, which is the class
    applied to all `Button` components. We’re then using the `background-color` and
    `border-radius` properties to change the appearance of the `Button` component.
    Let’s take a look at the result:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们针对的是 `.p-button` 类，这是应用到所有 `Button` 组件上的类。我们使用 `background-color` 和
    `border-radius` 属性来改变 `Button` 组件的外观。让我们看看结果：
- en: '![Figure 4.4 – Component custom button styles](img/B18805_04_04.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.4 – 组件自定义按钮样式](img/B18805_04_04.jpg)'
- en: Figure 4.4 – Component custom button styles
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.4 – 组件自定义按钮样式
- en: 'If you inspect the browser, you will see that the styling is being applied
    correctly:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你检查浏览器，你会看到样式正在正确地应用：
- en: '![Figure 4.5 – Component custom button style inspection](img/B18805_04_05.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.5 – 组件自定义按钮样式检查](img/B18805_04_05.jpg)'
- en: Figure 4.5 – Component custom button style inspection
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.5 – 组件自定义按钮样式检查
- en: You can see from the inspection the background color of the button has the color
    code `#696CFF`, which is the one that we set in the styles section.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从检查中看到按钮的背景颜色是 `#696CFF`，这是我们设置在样式部分的颜色代码。
- en: Overriding styles globally
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 全局覆盖样式
- en: In the previous section, we learned how to add custom styles at a component
    level. In this part, we will learn how to apply styling globally using **CSS preprocessors**.
    Before we begin, let’s quickly look into what CSS preprocessors are.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们学习了如何在组件级别添加自定义样式。在本部分，我们将学习如何使用 **CSS 预处理器**全局应用样式。在我们开始之前，让我们快速了解一下
    CSS 预处理器是什么。
- en: 'CSS preprocessors are scripting languages that extend the default capabilities
    of **Cascading Style Sheets** (**CSS**). They enable developers to use variables,
    nested rules, mixins, functions, and more, which can make CSS more maintainable,
    themeable, and extendable:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: CSS 预处理器是扩展默认 **层叠样式表**（**CSS**）功能的脚本语言。它们允许开发者使用变量、嵌套规则、混入、函数等，这使得 CSS 更易于维护、主题化和扩展：
- en: '**Variables**: These allow you to store values that you want to reuse throughout
    your style sheet. For example, you can define a variable for your primary color
    and use it in multiple places:'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**变量**：这些允许你在整个样式表中存储想要重用的值。例如，你可以定义一个用于你的主要颜色的变量，并在多个地方使用它：'
- en: '[PRE20]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This styling will apply all the new background colors to all PrimeNG buttons.
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这种样式将把所有新的背景颜色应用到所有 PrimeNG 按钮上。
- en: '**Nested rules**: These let you nest CSS selectors inside other selectors,
    making your CSS more readable and maintainable:'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**嵌套规则**：这些允许你在其他选择器内部嵌套 CSS 选择器，使你的 CSS 更易于阅读和维护：'
- en: '[PRE21]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '**Mixins and functions**: These enable you to define reusable chunks of CSS.
    They can take parameters, allowing you to customize the output:'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**混入和函数**：这些允许你定义可重用的 CSS 块。它们可以接受参数，允许你自定义输出：'
- en: '[PRE22]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Inside the mixin, there are three declarations, each representing a vendor-prefixed
    version of the box-shadow property. The vendor prefixes are *-webkit-* for WebKit-based
    browsers (e.g., Chrome and Safari), and *-moz-* for Mozilla-based browsers (e.g.,
    Firefox). The final declaration is the standard `box-shadow` property.
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在混入内部有三个声明，每个声明代表 box-shadow 属性的一个供应商前缀版本。供应商前缀是 *-webkit-* 用于基于 WebKit 的浏览器（例如
    Chrome 和 Safari），以及 *-moz-* 用于基于 Mozilla 的浏览器（例如 Firefox）。最后的声明是标准的 `box-shadow`
    属性。
- en: 'Wherever you want to apply a box shadow to your element, you can just include
    the `box-shadow` mixin. It will generate the following code for you:'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 无论你想要在你的元素上应用多少阴影，你只需包含 `box-shadow` 混入即可。它将为你生成以下代码：
- en: '[PRE23]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Note
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Using a CSS preprocessor can greatly enhance your workflow, especially in large
    projects. However, there’s a learning curve, and you must set up your development
    environment to compile the code.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 CSS 预处理器可以极大地提高你的工作效率，尤其是在大型项目中。然而，有一个学习曲线，你必须设置你的开发环境来编译代码。
- en: 'Now, let’s take a look at an example of how you can apply global styling:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何应用全局样式的例子：
- en: '[PRE24]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: In this example, we’re using a CSS variable to override `font-family` from `lara-light-blue/theme.css`.
    After that, we add a Sass variable to define the primary color and text color
    values. Then we add the `box-shadow` property via the mixin.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用一个 CSS 变量来覆盖 `lara-light-blue/theme.css` 中的 `font-family`。之后，我们添加一个
    Sass 变量来定义主要颜色和文字颜色值。然后我们通过混入添加 `box-shadow` 属性。
- en: 'We’re using these variables to style the `Button` component globally. Let’s
    check the changes:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在使用这些变量来全局样式化`Button`组件。让我们检查一下更改：
- en: '![Figure 4.6 – Global custom button styles](img/B18805_04_06.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![图4.6 – 全局自定义按钮样式](img/B18805_04_06.jpg)'
- en: Figure 4.6 – Global custom button styles
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.6 – 全局自定义按钮样式
- en: After debugging the browser, you can see that except for the modified styling
    button at the component level, all other buttons in your applications are updated
    with new styling globally.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在调试浏览器后，你可以看到，除了组件级别的修改样式按钮外，你应用中的所有其他按钮都全局更新了新的样式。
- en: Note
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: When customizing component styles or applying themes, be sure to test your changes
    thoroughly to ensure that they don’t adversely affect the functionality or usability
    of your application. Also, be aware that some components may have specific CSS
    classes or styles that you need to target in order to customize their appearance.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 当自定义组件样式或应用主题时，务必彻底测试你的更改，以确保它们不会对你的应用的功能或可用性产生不利影响。此外，请注意，某些组件可能具有特定的CSS类或样式，你需要针对这些类或样式来定制其外观。
- en: Customizing the appearance of PrimeNG components is an important part of creating
    a visually appealing and cohesive web application. Whether you’re using CSS, CSS
    preprocessors, or PrimeNG’s built-in themes, there are a range of tools and customization
    options available to help you achieve your design goals. By taking the time to
    customize your application’s styles and themes, you can create an application
    that is both functional and aesthetically pleasing.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义PrimeNG组件的外观是创建一个视觉上吸引人且统一的Web应用的重要部分。无论你是在使用CSS、CSS预处理器还是PrimeNG内置的主题，都有一系列的工具和定制选项可供你使用，以帮助你实现设计目标。通过花时间定制你应用的风格和主题，你可以创建一个既实用又美观的应用。
- en: In the next section, we will explore common integration issues that may arise
    when working with PrimeNG components and provide troubleshooting tips to overcome
    them.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨在使用PrimeNG组件时可能出现的常见集成问题，并提供故障排除技巧以克服这些问题。
- en: Troubleshooting common integration issues
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 故障排除常见集成问题
- en: Integrating PrimeNG into your Angular project can sometimes come with its own
    set of challenges. In this section, we will explore common issues that may arise
    during PrimeNG integration and provide troubleshooting techniques to help you
    overcome them. By understanding these challenges and having the necessary debugging
    skills, you can ensure a smooth integration process.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 将PrimeNG集成到你的Angular项目中有时会带来它自己的一套挑战。在本节中，我们将探讨PrimeNG集成过程中可能出现的常见问题，并提供故障排除技巧以帮助你克服这些问题。通过了解这些挑战并具备必要的调试技能，你可以确保集成过程的顺利进行。
- en: Conflict or compatibility issues
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 冲突或兼容性问题
- en: One common issue when integrating PrimeNG is encountering conflicts or compatibility
    issues with other libraries or Angular versions. It’s essential to ensure that
    all dependencies, including Angular and PrimeNG, are compatible with each other.
    For instance, if you are using Angular 15.x and have installed PrimeNG 16.x, there
    may be conflicts when integrating PrimeNG components.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 集成PrimeNG时，一个常见问题是遇到与其他库或Angular版本冲突或兼容性问题。确保所有依赖项，包括Angular和PrimeNG，彼此兼容是至关重要的。例如，如果你正在使用Angular
    15.x并且安装了PrimeNG 16.x，集成PrimeNG组件时可能会出现冲突。
- en: Note
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'The following is release cycle information from the PrimeNG official website:
    *“PrimeNG release cycle is aligned with Angular and every 6 months a new major
    PrimeNG version is released as open source that is compatible with the latest
    Angular core”*. You can check the current **Long Term Support** (**LTS**) details
    at [https://primeng.org/lts](https://primeng.org/lts).'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是从PrimeNG官方网站获取的发布周期信息：“PrimeNG的发布周期与Angular保持一致，每6个月发布一个新的大版本PrimeNG，作为开源版本，与最新的Angular核心兼容”。你可以在[https://primeng.org/lts](https://primeng.org/lts)查看当前的**长期支持**（**LTS**）详细信息。
- en: 'In case of conflicts, you may need to investigate the specific conflicting
    versions and find workarounds or update the versions accordingly. You should pay
    attention to the `package.json` file to check the version of your dependencies:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 如果出现冲突，你可能需要调查具体的冲突版本，并找到解决方案或相应地更新版本。你应该注意检查`package.json`文件以确认依赖项的版本：
- en: '[PRE25]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'As you can see, `primeng` and `angular` are using the same version `17.x`.
    Having different versions doesn’t mean that there will be conflicts in your Angular
    applications. In case you do get errors, please check versions from the official
    Angular and PrimeNG websites: [https://github.com/angular/angular/releases](https://github.com/angular/angular/releases)
    and [https://github.com/primefaces/primeng/releases](https://github.com/primefaces/primeng/releases).'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，`primeng` 和 `angular` 使用相同的版本 `17.x`。版本不同并不意味着您的 Angular 应用程序中会有冲突。如果您确实遇到错误，请从官方的
    Angular 和 PrimeNG 网站检查版本：[https://github.com/angular/angular/releases](https://github.com/angular/angular/releases)
    和 [https://github.com/primefaces/primeng/releases](https://github.com/primefaces/primeng/releases)。
- en: 'After you check the release version of Angular or PrimeNG that you want to
    install, use `npm` to update it:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在您检查了想要安装的 Angular 或 PrimeNG 的发布版本之后，使用 `npm` 来更新它：
- en: '[PRE26]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: This command will update `primeng` to version `17.0.0`.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将更新 `primeng` 到版本 `17.0.0`。
- en: Missing or incorrect imports
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缺少或错误的导入
- en: Another frequent issue is missing or incorrect imports of PrimeNG modules or
    components. When using PrimeNG components in your templates or code, it’s crucial
    to import the necessary modules correctly. If you forget to import a required
    module, the component may not work as expected or throw errors. Double-check your
    imports and make sure all required PrimeNG modules are imported into your Angular
    application.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个常见的问题是缺少或错误导入 PrimeNG 模块或组件。当在您的模板或代码中使用 PrimeNG 组件时，正确导入必要的模块至关重要。如果您忘记导入所需的模块，组件可能无法按预期工作或抛出错误。请仔细检查您的导入，并确保所有必需的
    PrimeNG 模块都已导入到您的 Angular 应用程序中。
- en: 'Let’s take a look at the following component:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看以下组件：
- en: '[PRE27]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'In the previous code, you can see that we’re using the `pButton` directive
    approach, and there is no error from the VS Code or the compiler. However, the
    button will not show correctly since you haven’t imported `ButtonModule` from
    `primeng` into the `imports` array. Here is how you fix this issue:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，您可以看到我们正在使用 `pButton` 指令方法，并且 VS Code 或编译器没有错误。然而，按钮将不会正确显示，因为您还没有将
    `ButtonModule` 从 `primeng` 导入到 `imports` 数组中。以下是修复此问题的方法：
- en: '[PRE28]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Error: apps/chapter-04/src/app/components/button-configuration.component.ts:11:5
    - error NG8001: ''p-button'' is not a known element:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '错误：apps/chapter-04/src/app/components/button-configuration.component.ts:11:5
    - 错误 NG8001: ''p-button'' 不是一个已知的元素：'
- en: 1\. If 'p-button' is an Angular component, then verify that it is included in
    the '@Component.imports' of this component.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 1. 如果 'p-button' 是一个 Angular 组件，那么请验证它是否包含在这个组件的 '@Component.imports' 中。
- en: 2\. If 'p-button' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the
    '@Component.schemas' of this component to suppress this message.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 2. 如果 'p-button' 是一个 Web 组件，那么请将 'CUSTOM_ELEMENTS_SCHEMA' 添加到这个组件的 '@Component.schemas'
    中以抑制此消息。
- en: 11       <p-button
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 11       <p-button
- en: ~~~~~~~~~
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: ~~~~~~~~~
- en: 12          label="Click me!"
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 12          label="点击我！"
- en: ~~~~~~~~~~~~~~~~~~~~~~~
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: ~~~~~~~~~~~~~~~~~~~~~~~
- en: '...'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: 15          [disabled]="isDisabled"
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 15          [disabled]="isDisabled"
- en: ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- en: 16       />
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 16       />
- en: ~~~~~~
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: ~~~~~~
- en: '[PRE29]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Part 2: UI Components and Features'
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二部分：UI 组件和功能
- en: In this part, you will dive deep into the world of PrimeNG’s UI components and
    explore the rich set of features they offer. You will learn how to leverage these
    components to build dynamic and interactive user interfaces for your Angular applications.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分，您将深入 PrimeNG UI 组件的世界，并探索它们提供的丰富功能集。您将学习如何利用这些组件为您的 Angular 应用程序构建动态和交互式的用户界面。
- en: By the end of this part, you will have a comprehensive understanding of most
    of PrimeNG’s UI components and be able to effectively utilize them to enhance
    your application’s functionality and user experience.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 到这部分结束时，您将对 PrimeNG 的大部分 UI 组件有一个全面的理解，并能够有效地利用它们来增强您应用程序的功能和用户体验。
- en: 'This part contains the following chapters:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 这部分包含以下章节：
- en: '[*Chapter 5*](B18805_05.xhtml#_idTextAnchor095), *Introducing Input Components
    and Form Controls*'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第5章*](B18805_05.xhtml#_idTextAnchor095)，*介绍输入组件和表单控件*'
- en: '[*Chapter 6*](B18805_06.xhtml#_idTextAnchor117), *Working with Table, List,
    and Card Components*'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第6章*](B18805_06.xhtml#_idTextAnchor117)，*使用表格、列表和卡片组件*'
- en: '[*Chapter 7*](B18805_07.xhtml#_idTextAnchor137), *Working with Tree, TreeTable,
    and Timeline Components*'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第7章*](B18805_07.xhtml#_idTextAnchor137)，*使用树、树表和时序组件*'
- en: '[*Chapter 8*](B18805_08.xhtml#_idTextAnchor160), *Working with Navigation and
    Layout Components*'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第8章*](B18805_08.xhtml#_idTextAnchor160)，*使用导航和布局组件*'
