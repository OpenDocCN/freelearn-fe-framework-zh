["```js\n    git checkout deploy_Vercelnow \n    ```", "```js\n    git checkout deploy_cloudrun \n    ```", "```js\n    git checkout docker-integration \n    ```", "```js\n**Dockerfile**\nFROM duluca/minimal-nginx-web-server:1-alpine\nCOPY /dist/local-weather-app /var/www\nCMD 'nginx' \n```", "```js\n**Dockerfile**\nFROM duluca/minimal-node-web-server:lts-alpine\nWORKDIR /usr/src/app\nCOPY dist/local-weather-app public\nENTRYPOINT [ \"npm\", \"start\" ]\nENV ENFORCE_HTTPS=xProto \n```", "```js\n    $ npm i -g mrm-task-npm-docker \n    ```", "```js\n    $ npx mrm npm-docker \n    ```", "```js\n    **package.json**\n      ...\n      \"config\": {\n        \"imageRepo\": \"[namespace]/[repository]\",\n        \"imageName\": \"custom_app_name\",\n        \"imagePort\": \"0000\",\n        \"internalContainerPort\": \"3000\"\n      },\n      ... \n    ```", "```js\n    **package.json**\n    ...\n      \"scripts\": {\n        ...\n        \"predocker:build\": \"npm run build\",\n        \"docker:build\": \"cross-conf-env docker image build . -t $npm_package_config_imageRepo:$npm_package_version\",\n        \"postdocker:build\": \"npm run docker:tag\",\n        ... \n    ```", "```js\n    **package.json**\n        ...\n        \"docker:tag\": \" cross-conf-env docker image tag $npm_package_config_imageRepo:$npm_package_version $npm_package_config_imageRepo:latest\",\n        ... \n    ```", "```js\n    **package.json**\n        ...\n        \"docker:stop\": \"cross-conf-env docker stop $npm_package_config_imageName || true\",\n        ... \n    ```", "```js\n    **package.json**\n        ...\n        \"docker:run\": \"run-s -c docker:stop docker:runHelper\",\n        \"docker:runHelper\": \"cross-conf-env docker run -e NODE_ENV=local --rm --name $npm_package_config_imageName -d -p $npm_package_config_imagePort:$npm_package_config_internalContainerPort $npm_package_config_imageRepo\",\n        ... \n    ```", "```js\n    **package.json**\n        ...\n        \"predocker:publish\": \"echo Attention! Ensure `docker login` is correct.\",\n        \"docker:publish\": \"cross-conf-env docker image push $npm_package_config_imageRepo:$npm_package_version\",\n        \"postdocker:publish\": \"cross-conf-env docker image push $npm_package_config_imageRepo:latest\",\n        ... \n    ```", "```js\n    **package.json**\n        ...\n        \"docker:taillogs\": \"cross-conf-env docker logs -f $npm_package_config_imageName\",\n        ... \n    ```", "```js\n    **package.json**\n        ...\n        \"docker:open\": \"sleep 2 && cross-conf-env open-cli http://localhost:$npm_package_config_imagePort\",\n        ... \n    ```", "```js\n    **package.json**\n        ...\n        \"predocker:debug\": \"run-s docker:build docker:run\",\n        \"docker:debug\": \"run-s -cs docker:open:win docker:open:mac docker:taillogs\"\n      },\n    ... \n    ```", "```js\n    **package.json**\n        \"build\": \"ng build\",\n        \"build:prod\": \"ng build --prod\",\n        \"predocker:build\": \"npm run build:prod && npm test -- --watch=false\", \n    ```", "```js\n    export const environment = {   \n      production: true,\n      appId: '01ff1xxxxxxxxxxxxxxxxxxxxx',\n      username: 'localcast',\n      baseUrl: 'https://',\n      geonamesApi: 'secure',\n    } \n    ```", "```js\n    **Dockerfile**\n    FROM duluca/minimal-node-web-server:lts-alpine \n    WORKDIR /usr/src/app\n    COPY dist/local-weather-app public \n    ```", "```js\n    $ npm run docker:debug \n    ```", "```js\n    Current Environment: local.\n    Server listening on port 3000 inside the container\n    Attention: To access server, use http://localhost:EXTERNAL_PORT\n    EXTERNAL_PORT is specified with 'docker run -p EXTERNAL_PORT:3000'. See 'package.json->imagePort' for the default port.      \n    GET / 304 2.194 ms - -\n    GET /runtime-es2015.js 304 0.371 ms - -\n    GET /polyfills-es2015.js 304 0.359 ms - -\n    GET /styles-es2015.js 304 0.839 ms - -\n    GET /vendor-es2015.js 304 0.789 ms - -\n    GET /main-es2015.js 304 0.331 ms - - \n    ```", "```js\n    $ npm run docker:publish \n    ```", "```js\n    The push refers to a repository [docker.io/duluca/localcast- weather]\n    60f66aaaaa50: Pushed\n    ...\n    latest: digest: sha256:b680970d76769cf12cc48f37391d8a542fe226b66d9a6f8a7ac81ad77be4 f58b size: 2827 \n    ```", "```js\n    **Dockerfile**\n    FROM duluca/minimal-node-web-server:lts-alpine\n    WORKDIR /usr/src/app\n    COPY dist/local-weather-app public\n    ENTRYPOINT [ \"npm\", \"start\" ] \n    ```", "```js\n    $ gcloud projects create localcast-weather \n    ```", "```js\n    **.gcloudignore**\n    /*\n    !Dockerfile\n    !dist/ \n    ```", "```js\n    **package.json**\n      scripts: {\n        \"gcloud:build\": \"gcloud builds submit --tag gcr.io/localcast-weather/localcast-weather --project localcast-weather\",\n      } \n    ```", "```js\n    **package.json**\n      scripts: {\n        \"gcloud:deploy\": \"gcloud run deploy --image gcr.io/localcast-weather/localcast-weather --platform managed --project localcast-weather --region us-east1\"\n      } \n    ```", "```js\n    $ npm run gcloud:build \n    ```", "```js\n    $ npm run gcloud:deploy \n    ```", "```js\n    $ gcloud config set run/region us-east1 \n    ```", "```js\n    $ gcloud auth configure-docker \n    ```", "```js\n    $ docker tag duluca/localcast-weather:latest gcr.io/localcast-weather/localcast-weather:latest \n    ```", "```js\n    $ docker push gcr.io/localcast-weather/localcast-weather:latest \n    ```", "```js\n    $ gcloud run deploy --image gcr.io/localcast-weather/localcast-weather --platform managed --project localcast-weather \n    ```", "```js\n    **.circleci/config.yml**\n    ...\n    jobs:\n      build:\n        ...       \n        - run:\n            name: Move compiled app to workspace\n            command: |\n              set -exu\n              mkdir -p /tmp/workspace/dist\n              mv dist/local-weather-app /tmp/workspace/dist/\n        - persist_to_workspace:\n            root: /tmp/workspace\n            paths:\n              - dist/local-weather-app\n      deploy:\n        docker:\n          - image: circleci/node:lts\n        working_directory: ~/repo\n        steps:\n          - attach_workspace:\n              at: /tmp/workspace\n          - run: npx now --token $NOW_TOKEN --platform-version 2 --prod /tmp/workspace/dist/local-weather-app --confirm \n    ```", "```js\n    **.circleci/config.yml**\n    ...\n    workflows:\n      version: 2\n      build-test-and-deploy:\n        jobs:\n          - build\n          - deploy:\n             requires:\n               - build \n    ```", "```js\n    **.circleci/config.yml**\n    **version: 2.1**\n    orbs:\n      cloudrun: circleci/gcp-cloud-run@1.0.2\n      ... \n    ```", "```js\n    **.circleci/config.yml**\n    ...\n    deploy_cloudrun:\n      docker:\n        - image: 'cimg/base:stable'\n      working_directory: ~/repo\n      steps:\n        - attach_workspace:\n            at: /tmp/workspace\n        - checkout\n        - run:\n            name: Copy built app to dist folder\n            command: cp -avR /tmp/workspace/dist/ .\n        - cloudrun/init\n        - cloudrun/build:\n           tag: 'gcr.io/${GOOGLE_PROJECT_ID}/test-${CIRCLE_SHA1}'\n           source: ~/repo\n        - cloudrun/deploy:\n            image: 'gcr.io/${GOOGLE_PROJECT_ID}/test-${CIRCLE_SHA1}'\n            platform: managed\n            region: us-east1\n            service-name: localcast-weather\n            unauthenticated: true\n        - run:\n            command: >\n              GCP_API_RESULTS=$(curl -s \"$GCP_DEPLOY_ENDPOINT\")\n              if ! echo \"$GCP_API_RESULTS\" | grep -nwo \"LocalCast Weather\"; then\n                echo \"Result is unexpected\"\n                echo 'Result: '\n                curl -s \"$GCP_DEPLOY_ENDPOINT\"\n                exit 1;\n              fi\n            name: Test managed deployed service. \n    ```", "```js\n    **.circleci/config.yml**\n    ...\n    workflows:\n     version: 2\n      build-test-and-deploy:\n        jobs:\n          - build\n          - deploy_cloudrun:\n              requires:\n                - build \n    ```", "```js\n**.circleci/config.yml**\nworkflows:\n  version: 2\n  build-and-deploy:\n    jobs:\n      - build\n      - hold:\n          type: approval\n          requires:\n            - build\n      - deploy:\n          requires:\n            - hold \n```", "```js\nbuild and test steps are broken out into two separate jobs:\n```", "```js\nworkflows:\n  version: 2\n    build-test-and-approval-deploy:\n      jobs:\n      - build \n      - test\n      - hold:\n         type: approval\n         requires:\n           - build\n           - test\n         filters:\n           branches:\n             only: master\n      - deploy:\n        requires:\n          - hold \n```", "```js\n**Dockerfile**\nFROM duluca/minimal-node-web-server:lts-alpine \nWORKDIR /usr/src/app\nCOPY dist/lemon-mart public \n```", "```js\n    **package.json**\n    \"scripts\": {\n      \"build:prod\": \"ng build --prod\",\n    } \n    ```", "```js\n    **integration.Dockerfile**\n    FROM duluca/minimal-node-build-env:lts-alpine as builder\n    ENV BUILDER_SRC_DIR=/usr/src\n    # setup source code directory and copy source code\n    WORKDIR $BUILDER_SRC_DIR\n    COPY . .\n    # install dependencies and build\n    RUN npm ci\n    RUN npm run style\n    RUN npm run lint\n    RUN npm run build:prod \n    ```", "```js\n$ docker run -it duluca/minimal-node-build-env:lts-alpine /bin/bash \n```", "```js\n    **Karma.conf.js**\n    ...\n        browsers: ['Chrome', 'ChromiumHeadless', 'ChromiumNoSandbox'],\n        customLaunchers: {\n          ChromiumHeadless: {\n            base: 'Chrome',\n            flags: [\n              '--headless',\n              '--disable-gpu',\n              // Without a remote debugging port, Google Chrome exits immediately.\n              '--remote-debugging-port=9222',\n              ],\n            debug: true,\n          },\n          ChromiumNoSandbox: {\n            base: 'ChromiumHeadless',\n            flags: ['--no-sandbox', '--disable-translate', '--disable- extensions']\n          },\n        }, \n    ```", "```js\n    **e2e/protractor.conf.js**\n    ...\n      capabilities: { \n        browserName: 'chrome',\n        chromeOptions: {\n          args: [\n            '--headless',\n            '--disable-gpu',\n            '--no-sandbox',\n            '--disable-translate',\n            '--disable-extensions',\n            '--window-size=800,600',\n          ],\n        },\n      },\n    ... \n    ```", "```js\n    **package.json**\n    \"scripts\": {\n      ...\n      \"test\": \"ng test lemon-mart --browsers Chrome\",\n      \"test:prod\": \"npm test -- --browsers ChromiumNoSandbox   --  watch=false\"\n    ...\n    } \n    ```", "```js\n    **integration.Dockerfile**\n    ...\n    FROM duluca/minimal-node-chromium:lts-alpine as tester\n    ENV BUILDER_SRC_DIR=/usr/src\n    ENV TESTER_SRC_DIR=/usr/src\n    WORKDIR $TESTER_SRC_DIR\n    COPY --from=builder $BUILDER_SRC_DIR .\n    # force update the webdriver, so it runs with latest version of Chrome\n    RUN cd ./node_modules/protractor && npm i webdriver-manager@latest\n    WORKDIR $TESTER_SRC_DIR\n    RUN npm run test:prod \n    ```", "```js\n    **integration.Dockerfile**\n    ...\n    FROM duluca/minimal-nginx-web-server:1-alpine as webserver\n    ENV BUILDER_SRC_DIR=/usr/src\n    COPY --from=builder $BUILDER_SRC_DIR/dist/lemon-mart /var/www\n    CMD 'nginx' \n    ```", "```js\n    $ docker build -f integration.Dockerfile . \n    ```", "```js\n    **package.json**\n    \"scripts\": {\n    ...\n      \"build:integration\": \"cross-conf-env docker image build -f integration.Dockerfile . -t $npm_package_config_imageRepo:latest\",\n    ...\n    } \n    ```", "```js\n**.circleci/config.yml**\nversion: 2.1\njobs:\n  build:\n    docker:\n      - image: circleci/node:lts\n    working_directory: ~/repo\n    steps:\n      - checkout\n      - setup_remote_docker\n      - run:\n          name: Execute Pipeline (Build Source -> Test -> Build Web Server)\n          command: |\n            docker build -f integration.Dockerfile . -t lemon-mart:$CIRCLE_BRANCH\n            mkdir -p docker-cache\n            docker save lemon-mart:$CIRCLE_BRANCH | gzip > docker-cache/built-image.tar.gz\n      - save_cache:\n          key: built-image-{{ .BuildNum }}\n          paths:\n            - docker-cache\n      - store_artifacts:\n          path: docker-cache/built-image.tar.gz\n          destination: built-image.tar.gz\nworkflows:\n  version: 2\n  build-and-deploy:\n    jobs:\n      - build \n```", "```js\n$ npx ng test --browsers ChromiumNoSandbox --watch=false --code-coverage \n```", "```js\n$ npx http-server -c-1 -o -p 9875 ./coverage \n```", "```js\n    **karma.conf.js**\n    ...\n        coverageIstanbulReporter: {\n          dir: require('path').join(__dirname, **'coverage'**),\n          reports: ['html', 'lcovonly'],\n          fixWebpackSourcePaths: true,\n        },\n    ... \n    ```", "```js\n    **.circleci/config.yml**\n    version: 2.1\n    orbs:\n      **coveralls: coveralls/coveralls@1.0.4** \n    ```", "```js\n    **.circleci/config.yml**\n    jobs:\n      build:\n        ...\n          - run: npm test -- --watch=false --code-coverage\n          - run: npm run e2e\n          - store_test_results:\n              path: ./test_results\n          **- store_artifacts:**\n     **path: ./coverage**\n     **- coveralls/upload**\n          - run:\n              name: Tar & Gzip compiled app\n              command: tar zcf dist.tar.gz dist/lemon-mart\n          - store_artifacts:\n              path: dist.tar.gz \n    ```"]