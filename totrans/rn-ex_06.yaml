- en: Advanced Facebook App Functionality
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高级Facebook应用功能
- en: Now that we have gained access to Facebook's Graph API, it's time to finish
    building our app.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经获得了访问Facebook的Graph API的权限，是时候完成我们应用的构建了。
- en: 'In this chapter, we will:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将：
- en: Continue building `Friends`, our Facebook-connected application, by grabbing
    additional data from the Graph APIs, such as media attachments, comments, and
    number of likes from each existing post in our feed
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过从Graph APIs获取更多数据来继续构建我们的Facebook连接应用`Friends`，例如从我们动态中的每个现有帖子获取媒体附件、评论和点赞数量
- en: Add a pull-to-refresh mechanism for our app to allow the user to reload data
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为我们的应用添加一个下拉刷新机制，允许用户重新加载数据
- en: Learn about the `Image` component, which will allow us to render images in our
    application
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解`Image`组件，它将允许我们在应用中渲染图片
- en: Discover WebView, to open links in a locally available `View` component
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发现WebView，在本地可用的`View`组件中打开链接
- en: Include a log out screen for the app
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为应用添加一个注销屏幕
- en: Make changes to the app in order to build an Android version
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对应用进行修改以构建Android版本
- en: Let's continue where we left off from the last chapter and work on the extension
    of our `FeedListRow` component.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续上一章的遗留内容，并扩展我们的`FeedListRow`组件。
- en: Creating a PostView
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建PostView
- en: 'At the end of [Chapter 5](7c70bcd0-1366-49e8-9022-9c9996073cc6.xhtml), *Third
    Project - The Facebook Client*, we created a `FeedListRow` component with a `TouchableHighlight`
    that fired the following function when pressed:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第5章](7c70bcd0-1366-49e8-9022-9c9996073cc6.xhtml)的结尾，“第三项目 - Facebook客户端”，我们创建了一个带有`TouchableHighlight`的`FeedListRow`组件，当按下时会触发以下函数：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We will build a `PostView` component that our users will navigate to when the
    `TouchableHighlight` component is pressed in `FeedListRow` and replace the current
    login within this `_navigfateToPostView` function to handle that navigation.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将构建一个`PostView`组件，当在`FeedListRow`中按下`TouchableHighlight`组件时，用户将导航到该组件，并在`_navigfateToPostView`函数中替换当前的登录以处理该导航。
- en: This `PostView` component should, upon loading, look in `AsyncStorage` for this
    post's details and load them if it exists. If it does not, then it should make
    a request to the Facebook Graph API for the post's details and save them into
    `AsyncStorage` for future use.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`PostView`组件在加载时应该在`AsyncStorage`中查找该帖子的详细信息，并在存在的情况下加载它们。如果不存在，则应向Facebook
    Graph API请求帖子的详细信息并将它们保存到`AsyncStorage`中供将来使用。
- en: The details that we are interested in, are the post's attachments, comments,
    and likes. Since each post on Facebook is assigned a unique post ID, we can also
    save an object containing the attachments, comments, and likes data under that
    post ID as its key in `AsyncStorage`.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们感兴趣的是帖子的附件、评论和点赞。由于Facebook上的每个帖子都分配了一个唯一的帖子ID，我们还可以在`AsyncStorage`中将包含附件、评论和点赞数据的对象保存到该帖子ID下作为其键。
- en: 'First, we will start by creating a new function in `storageMethods.js` that
    performs the following functions:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将在`storageMethods.js`中创建一个新的函数，该函数执行以下功能：
- en: Accepts a post ID and batch callback to execute as arguments
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接受帖子ID和批处理回调作为参数
- en: Makes three separate `GraphRequest` instances, one for each of the three edges
    we will be obtaining (attachments, comments, and likes), saving its return data
    into an object
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建三个单独的`GraphRequest`实例，每个实例对应我们将获取的三个边缘（附件、评论和点赞），并将返回的数据保存到对象中
- en: Starts one `GraphRequestManager`, chaining the three `GraphRequest` instances
    and passing in the batch callback, thus passing in the return data object to the
    batch callback function
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动一个`GraphRequestManager`，链接三个`GraphRequest`实例，并传入批处理回调，从而将返回的数据对象传递给批处理回调函数
- en: 'Then, create a `PostView` component that does the following:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，创建一个`PostView`组件，执行以下操作：
- en: It renders the same created story and message strings that `FeedListRow` created
    so that the user retains the context of what they tapped on.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它渲染与`FeedListRow`创建的相同的故事和消息字符串，以便用户保留他们点击的内容的上下文。
- en: It uses a storage method to check for the existence of data pertaining to that
    specific post's ID. If it exists, then `PostView` will use it. If not, then it
    should use our new storage method to grab the attachments, comments, and likes
    from that post's ID.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它使用一种存储方法来检查与该特定帖子ID相关的数据是否存在。如果存在，则`PostView`将使用它。如果不存在，则应使用我们新的存储方法来获取该帖子ID的附件、评论和点赞。
- en: The batch callback passed into our new storage method should include the saving
    of its results into `AsyncStorage` under the same key as the post ID.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 传入我们新存储方法的批处理回调应包括将结果保存到`AsyncStorage`中，其键与帖子ID相同。
- en: It visually displays the number of comments and likes the post has, into a row.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将帖子的评论和点赞数以视觉形式显示在一行中。
- en: Finally, modify the `FeedListRow` component so that it uses its existing `_navigateToPostView`
    method to navigate to `PostView`, passing any necessary props.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，修改 `FeedListRow` 组件，使其使用其现有的 `_navigateToPostView` 方法导航到 `PostView`，并传递任何必要的属性。
- en: 'Create a `resultsObject` to store the results of each unique `GraphRequest`:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个 `resultsObject` 来存储每个独特的 `GraphRequest` 的结果：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'For each of the three `GraphRequest` instances in the preceding code, use the
    post ID given to it and call its corresponding `attachments`, `comments`, and
    `likes` edges from the API. Then, save those results into the `resultsObject`
    under their corresponding key:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中的三个 `GraphRequest` 实例中，使用给定的帖子 ID 调用其相应的 `attachments`、`comments` 和 `likes`
    边从 API。然后，将这些结果保存到 `resultsObject` 中，其键对应于相应的键：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Finally, create a new `GraphRequestManager` instance, and add all three requests
    to it along with the `batchCallback` given to this function as an argument. Pass
    `resultsObject` into the `batchCallback` to give that callback access to the data
    obtained from the `attachments`, `comments`, and `likes` edges:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，创建一个新的 `GraphRequestManager` 实例，并将所有三个请求以及作为参数传递给此函数的 `batchCallback` 添加到其中。将
    `resultsObject` 传递给 `batchCallback` 以使该回调能够访问从 `attachments`、`comments` 和 `likes`
    边获得的数据：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Then, import various different helper methods that will be used in this component,
    as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，导入将在该组件中使用到的各种不同的辅助方法，如下所示：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Set the `loading` Boolean in state to `true` for `ActivityIndicator`:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 将状态中的 `loading` 布尔值设置为 `true` 以用于 `ActivityIndicator`：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'During `componentWillMount`, grab the object in storage under this post''s
    ID key. Check for the existence of data: If no data exists, `getAsyncStorage`
    is configured to return an empty object. Call `_getPostDetails` if this is `true`;
    otherwise, save the details to local state:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `componentWillMount` 期间，获取存储在此帖子 ID 键下的对象。检查数据是否存在：如果不存在数据，`getAsyncStorage`
    被配置为返回一个空对象。如果这是 `true`，则调用 `_getPostDetails`；否则，将详细信息保存到本地状态：
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Just like `FeedListRow`, render the created date, story, and message if applicable.
    Conditionally, call `_renderActivityIndicator` or `_renderDetails` depending on
    the loading Boolean. At the end, render a separator in anticipation of adding
    comments to this component:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 就像 `FeedListRow` 一样，如果适用，渲染创建日期、故事和信息。有条件地调用 `_renderActivityIndicator` 或 `_renderDetails`，取决于
    `loading` 布尔值。最后，渲染一个分隔符，以期待向此组件添加评论：
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Call the `getPostDetails` method we just created in `graphMethods` and pass
    it a callback that uses the results object from `getPostDetails` to save its contents
    to state; then save it to `AsyncStorage` under a key equal to this post''s ID:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 调用我们在 `graphMethods` 中刚刚创建的 `getPostDetails` 方法，并传递一个回调，该回调使用 `getPostDetails`
    的结果对象将内容保存到状态中；然后将其保存到 `AsyncStorage` 中，键等于此帖子的 ID：
- en: '[PRE8]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Render an `ActivityIndicator` component:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染一个 `ActivityIndicator` 组件：
- en: '[PRE9]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Render the number of `Likes` and `Comments` this post has, as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 按如下方式渲染此帖子拥有的 `Likes` 和 `Comments` 数量：
- en: '[PRE10]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The `_renderCreatedString`, `_renderMessageString`, and `_renderStoryString`
    methods are unchanged from `FeedListRow`:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`_renderCreatedString`、`_renderMessageString` 和 `_renderStoryString` 方法与 `FeedListRow`
    中的方法保持不变：'
- en: '[PRE11]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Save data from this post''s `attachments`, `comments`, and `likes` edges into
    state and turn off the spinning `ActivityIndicator`:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 将此帖子的 `attachments`、`comments` 和 `likes` 边的数据保存到状态中，并关闭旋转的 `ActivityIndicator`：
- en: '[PRE12]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Here is the styling for `PostView`:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 `PostView` 的样式：
- en: '[PRE13]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Finally, change the `_navigateToPostView` function in `FeedListRow`:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，修改 `FeedListRow` 中的 `_navigateToPostView` 函数：
- en: '[PRE14]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Next, we will add a `ListView` to populate the comments of that post and render
    it below the separator line in `PostView`.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将添加一个 `ListView` 来填充该帖子的评论，并在 `PostView` 中的分隔线下方渲染它。
- en: Adding comments to PostView
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向 `PostView` 添加评论
- en: In this next step, we will edit `PostView` so that it includes a `ListView`
    to render all its comments. Since `PostView` will have the comments data saved
    into its state once the information has been loaded by the `componentWillMount`
    life cycle, we can use that data to render the comments.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一步中，我们将编辑 `PostView` 以包含一个 `ListView` 来渲染所有评论。由于 `PostView` 会在 `componentWillMount`
    生命周期方法加载信息后将其评论数据保存到其状态中，我们可以使用这些数据来渲染评论。
- en: 'Start by creating a component to house this `ListView`; let''s call it `CommentList`.
    It should do the following:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建一个组件来容纳这个 `ListView`；让我们称它为 `CommentList`。它应该执行以下操作：
- en: Contain a list of comments, passed to it by `PostView` as a prop
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含一个由 `PostView` 通过属性传递给它的评论列表
- en: Render a `ListView` using those comments
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用这些评论渲染一个 `ListView`：
- en: The rows should be rendered by a child component, `CommentListRow`
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 行应该由子组件`CommentListRow`渲染
- en: 'Your `CommentListRow` component should do the following:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 您的`CommentListRow`组件应该执行以下操作：
- en: Each row should contain its poster's name and the message they wrote
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每行应包含其发布者的名字和他们写的消息
- en: Separate each comment with a `ListView` component
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`ListView`组件分隔每个评论
- en: 'Finally, update `PostView` so that it renders `CommentList` directly beneath
    the separator in the `render` method of `PostView`. Instantiate a new `ListView.DataSource`
    instance:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，更新`PostView`，使其在`PostView`的`render`方法中直接在分隔符下方渲染`CommentList`。实例化一个新的`ListView.DataSource`实例：
- en: '[PRE15]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Set the `dataSource` constant, passing in the `comments` prop or an empty array:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 设置`dataSource`常量，传入`comments`属性或一个空数组：
- en: '[PRE16]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Each row should be a new `CommentListRow` component:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 每一行应该是一个新的`CommentListRow`组件：
- en: '[PRE17]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Render a separator for each comment:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 为每个评论渲染一个分隔符：
- en: '[PRE18]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This is the styling for the `CommmentList` styles block:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`CommmentList`样式块的样式：
- en: '[PRE19]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Next, let''s look at `CommentListRow`:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看`CommentListRow`：
- en: '[PRE20]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'A simple stateless functional component returns the comment row with the poster''s
    name and their comment. The following block contains styling for `CommentListRow`:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简单的无状态函数组件返回带有发布者名字和他们的评论的评论行。以下代码块包含`CommentListRow`的样式：
- en: '[PRE21]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Finally, let''s take a look at the change made to `PostView`:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们看看对`PostView`所做的更改：
- en: '[PRE22]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The preceding code imports and renders `CommentList` right below the separator.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码导入并渲染`CommentList`在分隔符下方。
- en: 'The `commentListContainer` style looks like this:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`commentListContainer`样式看起来是这样的：'
- en: '[PRE23]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: At this point, we should continue to flesh out `PostView` with the other features
    we described at the beginning of this chapter. In the next section, we will look
    at how to refresh the existing data we already have in the event that more data
    is added to the user's feed or single post.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们应该继续完善`PostView`，添加我们在本章开头描述的其他功能。在下一节中，我们将探讨如何在用户帖子或单个帖子中添加更多数据时刷新我们已有的现有数据。
- en: Reloading data with RefreshControl
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用RefreshControl重新加载数据
- en: The pull-to-refresh interaction was conceived with **Tweetie**, a popular Twitter
    iOS application created in 2008\. This interaction involves the user pulling down
    their screen until it reaches a certain threshold, then releasing it to signify
    their intent to refresh the contents of the screen.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 下拉刷新交互最初是在2008年创建的流行Twitter iOS应用**Tweetie**中构思的。这种交互涉及用户将屏幕向下拉，直到达到某个阈值，然后释放以表示他们想要刷新屏幕内容。
- en: With the React Native SDK, we can use `RefreshControl` to gain that same pull-to-refresh
    interaction and let our users reload data in the app at their will.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 使用React Native SDK，我们可以使用`RefreshControl`来获得相同的下拉刷新交互，并允许我们的用户在应用中随意重新加载数据。
- en: 'Here are the `RefreshControl` props that we will use in this chapter:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将使用以下`RefreshControl`属性：
- en: '`onRefresh`: This is a function that is called when the refresh action is executed'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onRefresh`：这是一个在执行刷新操作时被调用的函数'
- en: '`refreshing`: This is a Boolean that indicates whether the view should be animated'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`refreshing`：这是一个布尔值，表示视图是否应该被动画化'
- en: '`tintColor`: This is the color of the refreshing indicator'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tintColor`：这是刷新指示器的颜色'
- en: '`title`: This is a string that is displayed underneath the refresh indicator'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`title`：这是一个在刷新指示器下方显示的字符串'
- en: '`titleColor`: This is the color of the title'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`titleColor`：这是标题的颜色'
- en: To use a `RefreshControl`, render it into a `ListView` or `ScrollView` component
    under its `refreshControl` prop.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用`RefreshControl`，将其渲染到具有`refreshControl`属性的`ListView`或`ScrollView`组件中。
- en: 'For our implementation, we want to start by modifying `App.js` so that it does
    the following:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的实现，我们首先想要修改`App.js`，使其执行以下操作：
- en: Contains a `refreshControlSpinning` Boolean in its state
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在其状态中包含一个`refreshControlSpinning`布尔值
- en: Modifies the current `_checkLoginStatus` function to move the logic for getting
    feed data from storage into its own function, `_getFeedData`; the new `_getFeedData`
    function should also switch the `refreshControlSpinning` Boolean to `false` once
    complete
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改当前`_checkLoginStatus`函数，将获取存储中数据逻辑移动到其自己的函数`_getFeedData`中；新的`_getFeedData`函数在完成后也应该将`refreshControlSpinning`布尔值切换到`false`
- en: Includes a function, `_refreshFeedList`, to refresh the feed that sets `refreshControlSpinning`
    to `true`, then calls the new `_getFeedData` function
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含一个函数`_refreshFeedList`，用于刷新帖子，将`refreshControlSpinning`设置为`true`，然后调用新的`_getFeedData`函数
- en: Passes the `refreshControlSpinning` Boolean and the `_refreshFeedList` function
    to the `FeedList` component that it renders
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 `refreshControlSpinning` 布尔值和 `_refreshFeedList` 函数传递给它渲染的 `FeedList` 组件
- en: 'Then, modify `FeedList` so that it does the following:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，修改 `FeedList` 以执行以下操作：
- en: Renders a `RefreshControl` component into the `refreshControl` prop of its `ListView`
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 `RefreshControl` 组件渲染到 `ListView` 的 `refreshControl` 属性中
- en: Points its spinning prop to the `refreshControlSpinning` Boolean of `App.js`
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将其旋转属性指向 `App.js` 中的 `refreshControlSpinning` 布尔值
- en: Points its `onRefresh` prop to the `_refreshFeedList` function of `App.js`.
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 `onRefresh` 属性指向 `App.js` 中的 `_refreshFeedList` 函数。
- en: 'Here are my modifications to the `App` component:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是我的对 `App` 组件的修改：
- en: '[PRE24]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'We added a new `refreshControlSpinning` Boolean to state. The old `spinner`
    Boolean for the `ActivityIndicator` component is renamed as `activityIndicatorSpinning`.
    The last line in `_checkLoginStatus` is broken down to its own method for reusing
    it later in the following snippet. Also, update the `getFeed` prop being pushed
    to `LoginPage` to reflect the new, broken out method:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在状态中添加了一个新的 `refreshControlSpinning` 布尔值。旧 `spinner` 布尔值被重命名为 `activityIndicatorSpinning`。在
    `_checkLoginStatus` 的最后一行被拆分成自己的方法，以便稍后在以下片段中重用。同时，更新传递给 `LoginPage` 的 `getFeed`
    属性，以反映新的拆分方法：
- en: '[PRE25]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Let''s pass `refreshControlSpinning` and `_refreshFeedList` to `FeedList`:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '让我们将 `refreshControlSpinning` 和 `_refreshFeedList` 传递给 `FeedList`:'
- en: '[PRE26]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Set the `refreshControlSpinning` Boolean to `true` and call `_getFeed`:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `refreshControlSpinning` 布尔值设置为 `true` 并调用 `_getFeed`：
- en: '[PRE27]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Set `refreshControlSpinning` to `false` once data has been loaded into state
    and `AsyncStorage`:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦数据已加载到状态和 `AsyncStorage` 中，将 `refreshControlSpinning` 设置为 `false`：
- en: '[PRE28]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Add a `refreshControl` prop to `ListView`, which points to `_renderRefreshControl`:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 向 `ListView` 添加一个 `refreshControl` 属性，它指向 `_renderRefreshControl`：
- en: '[PRE29]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Return the `RefreshControl` component. Its `onRefresh` prop points to the `_refreshFeedList`
    method in `App.js`, and it refreshes Boolean points to the `refreshControlSpinning`
    property from `App.js` as well:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 返回 `RefreshControl` 组件。它的 `onRefresh` 属性指向 `App.js` 中的 `_refreshFeedList` 方法，并且它刷新布尔值也指向
    `App.js` 中的 `refreshControlSpinning` 属性：
- en: '[PRE30]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The next step is to render any image attachments into `PostView`.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是将任何图像附件渲染到 `PostView` 中。
- en: Rendering images
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 渲染图像
- en: To show an image with React Native, we use the `Image` component. It lets us
    display images from both local and remote sources. Styles can also be added to
    an image, the same way you would stylize any other React component.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 React Native 显示图像，我们使用 `Image` 组件。它允许我们从本地和远程源显示图像。你还可以像为任何其他 React 组件添加样式一样为图像添加样式。
- en: 'We will use the following props for our `Image` components in this chapter:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用以下属性来为我们的 `Image` 组件设置样式：
- en: '`resizeMode`: We will use one of the following strings:'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`resizeMode`: 我们将使用以下字符串之一：'
- en: '`cover`: This scales the image uniformly and maintains its aspect ratio so
    that both the width and height of the image will be equal to or larger than the
    view that encapsulates the `Image` component.'
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cover`: 这会均匀地缩放图像并保持其宽高比，使得图像的宽度和高度将等于或大于封装 `Image` 组件的视图。'
- en: '`contain`: This string also scales the image uniformly and maintains its aspect
    ratio so that both the width and height of the image will be equal to or less
    than the view that encapsulates the `Image` component.'
  id: totrans-123
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`contain`: 这个字符串也会均匀地缩放图像并保持其宽高比，使得图像的宽度和高度将等于或小于封装 `Image` 组件的视图。'
- en: '`stretch`: This scales the width and height independently and can change the
    aspect ratio of the source image.'
  id: totrans-124
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stretch`: 这会独立地缩放宽度和高度，并可以改变源图像的宽高比。'
- en: '`repeat`: This repeats the image to cover the entire frame of the encapsulating
    view. This option also keeps the original size and aspect ratio on iOS, but not
    on Android.'
  id: totrans-125
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`repeat`: 这会将图像重复以覆盖封装视图的整个框架。此选项在 iOS 上也保持原始大小和宽高比，但在 Android 上则不保持。'
- en: '`center`: This centers the image.'
  id: totrans-126
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`center`: 这会将图像居中。'
- en: '`source`: This will be either a remote URL or local path to the image being
    rendered.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`source`: 这将是渲染的图像的远程 URL 或本地路径。'
- en: '`style`: This is a styles object.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`style`: 这是一个样式对象。'
- en: 'On a basic level, you can load static image resources like this:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在基本层面上，你可以这样加载静态图像资源：
- en: '[PRE31]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Also, you can do the same for remote ones:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你也可以对远程的做同样的处理：
- en: '[PRE32]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Every post on the user's feed that has an image attached to it can have that
    very image rendered using the `Image` component.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 用户动态中每一条带有图像的帖子都可以使用 `Image` 组件来渲染该图像。
- en: 'The way images are structured from the Facebook Graph API is like this:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Facebook Graph API 结构图像的方式如下：
- en: '[PRE33]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'With this in mind, let''s start by creating a new utilities file called `imageMethods`.
    This file should do the following:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在此基础上，让我们首先创建一个名为`imageMethods`的新工具文件。此文件应执行以下操作：
- en: Import the `Dimensions` API from React Native.
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从React Native导入`Dimensions` API。
- en: 'Export the `getHeightRatio` function that takes in the height and width of
    an image and returns the height that the image should have. We can calculate this
    by performing the following:'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导出`getHeightRatio`函数，该函数接受图像的高度和宽度，并返回图像应有的高度。我们可以通过执行以下操作来计算它：
- en: Grabbing the dimensions of the width of the user's device and subtracting an
    amount from it to accommodate a left and right margin.
  id: totrans-139
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取用户设备的宽度尺寸，并从中减去一定的量以适应左右边距。
- en: Using this margin offset and dividing it by the image's original width to get
    a desired ratio.
  id: totrans-140
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用这个边距偏移量，并将其除以图像的原始宽度以获得所需的比率。
- en: Returning the result of multiplying the height by the ratio for the correct
    image height.
  id: totrans-141
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 返回将高度乘以比例得到正确图像高度的乘积结果。
- en: Export another function, `getWidthOffset`, which takes the width of the user's
    device and returns it, subtracting an amount to accommodate a left and right margin.
    For code reusability, we should use this as part of the first bullet point for
    `getHeightRatio`.
  id: totrans-142
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导出另一个函数`getWidthOffset`，它接受用户的设备宽度并返回它，减去一定的量以适应左右边距。为了代码重用，我们应该将其用作`getHeightRatio`的第一个要点的一部分。
- en: 'Modify `PostView` so that it does the following:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 修改`PostView`以执行以下操作：
- en: The top-level `View` should be replaced by a `ScrollView` component in consideration
    of longer images.
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑到较长的图片，顶级`View`应替换为`ScrollView`组件。
- en: It renders the first image in a post's `attachments` array if the post has finished
    loading and if the `attachments` array has any images.
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果帖子已加载完成并且`attachments`数组中包含任何图像，则渲染帖子`attachments`数组中的第一张图像。
- en: The `Image` component should set its `resizeMode` prop to `contain` so that
    the image does not go off the screen. It should have some sort of left and right
    margin so that it does not meet the edge of the screen, and the width and height
    should be calculated by the `imageMethods` file.
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Image`组件应将其`resizeMode`属性设置为`contain`，以便图像不会超出屏幕。它应该有一些左和右边距，以便它不会接触到屏幕边缘，其宽度和高度应由`imageMethods`文件计算。'
- en: This rendering should be placed below the details of the post (time, message,
    and story), but above the number of likes and comments it has.
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这种渲染应放置在帖子的详细信息（时间、消息和故事）下方，但在点赞和评论数量上方。
- en: 'Grab the `gridWidthOffset`, divide it by the image''s `width`, and then divide
    the image''s `height` by this result, as follows:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 获取`gridWidthOffset`，将其除以图像的`width`，然后将图像的`height`除以这个结果，如下所示：
- en: '[PRE34]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Grab the `width` of the user''s device and then subtract `20` pixels from it:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 获取用户的`width`，然后从中减去`20`像素：
- en: '[PRE35]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Import the `Image`, `ScrollView`, and `imageMethods` into the `PostView` component:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 将`Image`、`ScrollView`和`imageMethods`导入到`PostView`组件中：
- en: '[PRE36]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Replace the top-level view with a `ScrollView` in anticipation of longer posts.
    Add conditional logic to fire `_renderAttachments`, placing it before the call
    to `_renderDetails`:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 预计到较长的帖子，将顶级视图替换为`ScrollView`。添加条件逻辑以触发`_renderAttachments`，将其放在调用`_renderDetails`之前：
- en: '[PRE37]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Assign `subattachments` for a very specific fringe case involving certain photos/albums:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 为涉及某些照片/相册的非常特定边缘情况分配`subattachments`：
- en: '[PRE38]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Check for the existence of the `media` property, as follows:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 检查`media`属性的存在，如下所示：
- en: '[PRE39]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'If the `media` property exists and it contains an `image` property, then render
    the `Image`:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`media`属性存在并且包含`image`属性，则渲染`Image`：
- en: '[PRE40]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Return an `Image` component with determined props:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 返回具有确定属性的`Image`组件：
- en: '[PRE41]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The `container` style for `PostView` has been changed to omit the `marginTop`
    property:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '`PostView`的`container`样式已更改，省略了`marginTop`属性：'
- en: '[PRE42]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: The `commentListContainer` style accompanies the new `ScrollView` component.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '`commentListContainer`样式与新的`ScrollView`组件相匹配。'
- en: Now that the images have been rendered, we should deal with the other type of
    attachment--links.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 现在图像已经渲染，我们应该处理其他类型的附件--链接。
- en: Rendering links with WebView
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用WebView渲染链接
- en: When your users select a link, it's beneficial to render that link within your
    application so that your user doesn't get thrown out of the app and into their
    browser. To accomplish this task with React Native, we will use the `WebView`
    component.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户选择一个链接时，在您的应用程序中渲染该链接是有益的，这样用户就不会被抛出应用程序并进入他们的浏览器。为了使用React Native完成此任务，我们将使用`WebView`组件。
- en: 'The `WebView` component renders Web content within a native, app-contained
    view. For this app, we will use just one of its many props:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '`WebView`组件在原生、应用程序包含的视图中渲染Web内容。对于这个应用程序，我们将使用其众多属性中的其中一个：'
- en: '`source`: This loads either a URI with optional headers or static HTML into
    the `WebView`.'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`source`：这将在`WebView`中加载带有可选头部的URI或静态HTML。'
- en: 'Rendering a `WebView` component is simple:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染`WebView`组件很简单：
- en: '[PRE43]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Not all posts contain links in their attachments. When they do, the hierarchy
    looks like this:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有帖子都包含附件中的链接。当它们包含链接时，其层次结构如下：
- en: '[PRE44]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Let's make some changes to accommodate a `WebView`. First, create a new component
    titled `WebViewComponent`; it should be a stateless function that returns a `WebView`
    along with its `source` set to whatever link it receives as a prop.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们做一些修改以适应`WebView`。首先，创建一个名为`WebViewComponent`的新组件；它应该是一个无状态的函数，返回一个`WebView`，并将其`source`设置为它接收的属性中的任何链接。
- en: 'Then, modify `PostView` so that it does the following functions:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，修改`PostView`，使其执行以下功能：
- en: Renders a button directly below where an image would be rendered if one was
    included in the post.
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果帖子中包含图片，则直接在渲染图片的地方渲染按钮。
- en: That button should only be rendered if the first attachment of the post has
    a link associated with it. The button should contain the title of the link and,
    when clicked on, navigate to your `WebViewComponent` to open the link.
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该按钮仅在帖子的第一个附件与链接相关联时渲染。按钮应包含链接的标题，并且当点击时，导航到您的`WebViewComponent`以打开链接。
- en: Unsecured HTTP links are automatically blocked by iOS' App Transport Security
    as of iOS 9\. You can whitelist these on a case-by-case basis within the `Info.plist`
    file of your project in Xcode. Apple does not recommend this and will require
    that all apps submitted adhere to this new policy in the near future.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 从iOS 9开始，未加密的HTTP链接被iOS的App Transport Security自动阻止。您可以在Xcode项目中项目文件的`Info.plist`文件中逐个案例地将这些链接列入白名单。苹果公司不推荐这样做，并将在不久的将来要求所有提交的应用遵守这项新政策。
- en: 'The following is a stateless functional component that just returns a `WebView`
    with a `source` URI:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个无状态的函数组件，它只返回一个带有`source` URI的`WebView`：
- en: '[PRE45]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Import the `Button` and `WebViewComponent` dependencies:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 导入`Button`和`WebViewComponent`依赖项：
- en: '[PRE46]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Conditionally call `_renderLink` if `PostView` has finished loading:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`PostView`已加载完成，则条件调用`_renderLink`：
- en: '[PRE47]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Grab the first attached object:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 获取第一个附件对象：
- en: '[PRE48]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Check for `subattachments` again:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 再次检查`subattachments`：
- en: '[PRE49]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'If the `title` is an empty string or not defined, generically name it `Link`:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`title`是空字符串或未定义，则将其通用地命名为`Link`：
- en: '[PRE50]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Render a `Button` that calls `_renderWebView` when pressed:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染一个在按下时调用`_renderWebView`的`Button`：
- en: '[PRE51]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Navigate the user to the `WebViewComponent`, sending it the URL provided.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 将用户导航到`WebViewComponent`，并发送提供的URL。
- en: '[PRE52]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: We have one last finishing touch to make on this app, and it involves letting
    the user sign out of the application.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对这个应用程序的最后一点润色是让用户能够从应用程序中注销。
- en: Signing out with TabBarIOS
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用TabBarIOS注销
- en: Our final step involves adding a sign out page for the user. Using the `TabBarIOS`
    component and the `react-native-vector-icons`, we will create a tabbed view that
    allows the user to sign out.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的最后一步是为用户添加一个注销页面。使用`TabBarIOS`组件和`react-native-vector-icons`，我们将创建一个标签视图，允许用户注销。
- en: 'Let''s make some modifications for this to happen. We need to first modify
    `App.js` so that it does the following functions:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为此进行一些修改。首先，我们需要修改`App.js`，使其执行以下功能：
- en: Imports the `TabBarIOS` and `react-native-vector-icons` dependencies
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导入`TabBarIOS`和`react-native-vector-icons`依赖项
- en: Returns a `TabBarIOS` component in its `_renderView` method if the activity
    indicator is not spinning
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果活动指示器没有旋转，则在`_renderView`方法中返回一个`TabBarIOS`组件
- en: Add a `selectedTab` string in the `App` component's state to track which tab
    is currently chosen, defaulting to the `FeedList` component
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`App`组件的状态中添加一个`selectedTab`字符串以跟踪当前选择的标签，默认为`FeedList`组件
- en: Has separate functions to render the `FeedList` and `LoginPage` components without
    navigation
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有单独的函数来渲染`FeedList`和`LoginPage`组件而不进行导航
- en: Passes the `LoginPage` a callback that executes the `_checkLoginStatus` method
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向`LoginPage`传递一个回调，该回调执行`_checkLoginStatus`方法
- en: Modifies its `container` style to no longer justify nor align any items to the
    center
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改其`container`样式，不再对任何项目进行居中或对齐
- en: 'Then, modify the `LoginPage` component so that its `onLogoutFinished` callback
    will execute `_checkLoginStatus`. Import new dependencies to the project:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，修改`LoginPage`组件，使其`onLogoutFinished`回调执行`_checkLoginStatus`。将新依赖项导入到项目中：
- en: '[PRE53]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Store the `selectedTab` string in state, defaulting it to `feed`:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在状态中存储`selectedTab`字符串，默认为`feed`：
- en: '[PRE54]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Render the `FeedList` component using the same logic from earlier:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 使用之前相同的逻辑渲染`FeedList`组件：
- en: '[PRE55]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Render the `LoginPrompt` component, passing it the `_checkLoginStatus` method:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染`LoginPrompt`组件，传递`_checkLoginStatus`方法：
- en: '[PRE56]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'This will cause the app to navigate back to the `LoginPage` when the user is
    signed out using the following code:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户使用以下代码注销时，这将导致应用导航回`LoginPage`：
- en: '[PRE57]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Rendering of the `TabBarIOS` component is where the contents of `_renderFeedList`
    existed earlier within `_renderView`.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '`_renderView`中之前存在`_renderFeedList`内容的地方现在渲染`TabBarIOS`组件。'
- en: '[PRE58]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'The preceding code sets the `selectedTab` property in state to whichever tab
    is tapped on by the user:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码将状态中的`selectedTab`属性设置为用户点击的任何标签：
- en: '[PRE59]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'The preceding code removed all other stylings from the `container` property
    so that the tab bar''s icons aren''t forced to the center of the screen:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码从`container`属性中移除了所有其他样式，这样标签栏的图标就不会被强制居中显示在屏幕上：
- en: '[PRE60]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: The previous alert call in the `onLogoutFinished` prop of `LoginButton` has
    been replaced to fire `checkLoginStatus` instead.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在`LoginButton`的`onLogoutFinished`属性中的上一个警报调用已被替换为触发`checkLoginStatus`。
- en: Great job on all your progress in this app! The next step is to make modifications
    for Android development.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个应用中，你所有的进步都做得很好！下一步是针对Android开发进行修改。
- en: Porting to Android
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移植到Android
- en: 'The Android modifications we will make for this app are similar to the changes
    made for `Expenses`, which will be discussed later in [Chapter 9,](c9cb084b-5c75-4683-94c3-9b2124e8ecb0.xhtml)
    *Additional React Native Components*. The modifications we are making for `Friends`
    is as follows:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为这个应用进行的Android修改与为`Expenses`所做的修改类似，这将在[第9章](c9cb084b-5c75-4683-94c3-9b2124e8ecb0.xhtml)，*额外的React
    Native组件*中稍后讨论。我们对`Friends`所做的修改如下：
- en: Swapping out `TabBarIOS` for `DrawerLayoutAndroid` and `ToolbarAndroid`
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`TabBarIOS`替换为`DrawerLayoutAndroid`和`ToolbarAndroid`
- en: Creating `Drawer` and `DrawerRow` components to support `DrawerLayoutAndroid`
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建`Drawer`和`DrawerRow`组件以支持`DrawerLayoutAndroid`
- en: Using `Navigator` in the root-level `index.android.js` file
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在根级别的`index.android.js`文件中使用`Navigator`
- en: Creating an Android-specific version of the `App` component
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建`App`组件的Android特定版本
- en: Updating `FeedList` for Android-specific styling
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为Android特定的样式更新`FeedList`
- en: Modifying `FeedListRow` to support Android navigation
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改`FeedListRow`以支持Android导航
- en: Adding `BackAndroid` and `Navigator` support to `PostView`
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向`PostView`添加`BackAndroid`和`Navigator`支持
- en: In-depth explanations for `DrawerLayoutAndroid` and `ToolbarAndroid` can be
    found in [Chapter 9](c9cb084b-5c75-4683-94c3-9b2124e8ecb0.xhtml), *Additional
    React Native Components*.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 关于`DrawerLayoutAndroid`和`ToolbarAndroid`的深入解释可以在[第9章](c9cb084b-5c75-4683-94c3-9b2124e8ecb0.xhtml)，*额外的React
    Native组件*中找到。
- en: Adding DrawerLayoutAndroid and ToolbarAndroid
  id: totrans-235
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加`DrawerLayoutAndroid`和`ToolbarAndroid`
- en: 'Let''s begin by adding Toolbar/Drawer-based navigation for the Android version
    of Friends. We will need to start by creating a component called `Drawer`, which
    performs the following functions:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从为Android版本的“朋友”添加基于工具栏/抽屉的导航开始。我们需要首先创建一个名为`Drawer`的组件，该组件执行以下功能：
- en: This accepts an array of routes as a prop.
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这接受一个作为属性的路线数组。
- en: This returns a `ListView` containing each route as a row to render. Each row
    should contain a `TouchableHighlight` component that, when clicked on, will call
    a prop called `navigateTo`, which we will eventually pass into `Drawer`.
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这将返回一个包含每个路线作为行的`ListView`。每一行都应该包含一个`TouchableHighlight`组件，当点击时，将调用一个名为`navigateTo`的属性，我们最终将其传递到`Drawer`中。
- en: 'We should also break the row that is rendered by `Drawer` into its own component
    titled `DrawerRow`. This component should do the following things:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还应该将`Drawer`渲染的行拆分成一个名为`DrawerRow`的独立组件。这个组件应该执行以下操作：
- en: Accept the name of the row as a prop and render that name in a `Text` element
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接受行的名称作为属性并在`Text`元素中渲染该名称
- en: Call `setNativeProps` so that its parent `TouchableHighlight` component will
    render this custom component
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调用`setNativeProps`，以便其父`TouchableHighlight`组件将渲染此自定义组件
- en: 'Instantiate a new `ListView.DataSource`:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 实例化一个新的`ListView.DataSource`：
- en: '[PRE61]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Render a `ListView` component, complete with a separator. Delegate the rendering
    of our rows to the `_renderDrawerRow` method:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染一个带有分隔符的`ListView`组件。将我们行的渲染委托给`_renderDrawerRow`方法：
- en: '[PRE62]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Wrap a `TouchableHighlight` around the custom `DrawerRow` component, passing
    it the name of the route. Call the `navigateTo` method from props in the `onPress`
    method of `TouchableHighlight`, passing it the `index` of the `row`:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 在自定义`DrawerRow`组件周围包裹一个`TouchableHighlight`，传递给它路由的名称。在`TouchableHighlight`的`onPress`方法中调用props中的`navigateTo`方法，传递给它`row`的`index`：
- en: '[PRE63]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Next, the `DrawerRow` component was created:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建了`DrawerRow`组件：
- en: '[PRE64]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'The following code calls `setNativeProps` since `DrawerRow` is wrapped around
    `TouchableHighlight`:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码调用`setNativeProps`，因为`DrawerRow`被包裹在`TouchableHighlight`中：
- en: '[PRE65]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Render the name of the route:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染路由的名称：
- en: '[PRE66]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Here is the styling I created for `DrawerRow`:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是我为`DrawerRow`创建的样式：
- en: '[PRE67]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: Integrating Drawer with Friends
  id: totrans-256
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将抽屉与朋友集成
- en: 'Next, we will modify the root `index.android.js` file so that it does the following:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将修改根`index.android.js`文件，使其执行以下操作：
- en: Renders a `DrawerLayoutAndroid` component wrapped around `Icon.ToolbarAndroid`
    and `Navigator`.
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 渲染一个包裹着`Icon.ToolbarAndroid`和`Navigator`的`DrawerLayoutAndroid`组件。
- en: Imports and sets the `renderNavigationView` of `DrawerLayoutAndroid` to the
    `Drawer` component we created.
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导入并设置`DrawerLayoutAndroid`的`renderNavigationView`为创建的`Drawer`组件。
- en: Creates a callback to open `DrawerLayoutAndroid`.
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个回调以打开`DrawerLayoutAndroid`。
- en: Writes a callback named `_navigateTo` that navigates to a given index. Pass
    this to `LoginPage` as a prop.
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写一个名为`_navigateTo`的回调，用于导航到给定的索引。将其作为属性传递给`LoginPage`。
- en: 'Imports and renders the `App`, `LoginPage`, `PostView`, and `WebViewComponent`
    components using the `renderScene` callback in `Navigator`:'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`Navigator`中的`renderScene`回调导入并渲染`App`、`LoginPage`、`PostView`和`WebViewComponent`组件：
- en: '[PRE68]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Let's import all necessary dependencies, including React Native SDK components/APIs,
    each custom component being rendered by the `Navigator`, and the Material Icons
    pack from `react-native-vector-icons`.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们导入所有必要的依赖项，包括React Native SDK组件/API、`Navigator`渲染的每个自定义组件，以及来自`react-native-vector-icons`的Material图标包。
- en: '[PRE69]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: Establish the array of visible routes to be passed into the `Drawer` component.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 建立要传递给`Drawer`组件的可见路由数组。
- en: '[PRE70]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: Render a `DrawerLayoutAndroid` component, with its `renderNavigationView` prop
    being delegated to `_renderDrawerLayout`; set a `ref` of `drawer` to the component
    so we can refer to it in `_openDrawer`.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染一个`DrawerLayoutAndroid`组件，其`renderNavigationView`属性委托给`_renderDrawerLayout`；给组件设置一个`ref`为`drawer`，这样我们就可以在`_openDrawer`中引用它。
- en: '[PRE71]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: Render the `Icon.ToolbarAndroid` component to contain the hamburger menu. Its
    `onIconClicked` callback executes `_openDrawer`.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染`Icon.ToolbarAndroid`组件以包含汉堡菜单。它的`onIconClicked`回调执行`_openDrawer`。
- en: '[PRE72]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: Render the `Navigator`, setting its initial route to the `index` for the `App`
    component. Delegate `renderScene` to the `_renderScene` method. Give a `ref` of
    `navigator` so we can reference it in `_navigateTo`.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染`Navigator`，将其初始路由设置为`App`组件的`index`。将`renderScene`委托给`_renderScene`方法。给`navigator`一个`ref`，这样我们就可以在`_navigateTo`中引用它。
- en: '[PRE73]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: The preceding code navigates to the `App` component, which triggers its checking
    of the user's login status.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码导航到`App`组件，这会触发它检查用户的登录状态。
- en: '[PRE74]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: The `_openDrawer` method calls `openDrawer` on our `DrawerLayoutAndroid` component.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '`_openDrawer`方法在`DrawerLayoutAndroid`组件上调用`openDrawer`。'
- en: '[PRE75]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: The `_navigateTo` method pushes the given `index` to the `navigator`. Given
    a prop of `checkLoginStatus`, which will be used for the `LoginPage` component.
    It closes the `drawer` at the end.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '`_navigateTo`方法将给定的`index`推送到`navigator`。给定一个`checkLoginStatus`属性，该属性将被用于`LoginPage`组件。最后关闭`drawer`。'
- en: '[PRE76]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: The `_renderDrawerLayout` method renders the `Drawer` component, passing it
    the `_navigateTo` method as a prop along with the array of routes.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '`_renderDrawerLayout`方法渲染`Drawer`组件，将其`_navigateTo`方法作为属性传递，以及路由数组。'
- en: '[PRE77]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: The `_renderScene` method is responsible for rendering all four available routes.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '`_renderScene`方法负责渲染所有四个可用的路由。'
- en: '[PRE78]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: Creating an Android version of App.js
  id: totrans-284
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建App.js的Android版本
- en: Now, we should create an Android-specific `App` component for `Friends`. Start
    by renaming the existing `App.js` file found at `Friends/app/App.js` as `App.ios.js`
    and create a new file titled `App.android.js`.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们应该为“朋友”创建一个特定的Android `App`组件。首先，将位于`Friends/app/App.js`的现有`App.js`文件重命名为`App.ios.js`，并创建一个名为`App.android.js`的新文件。
- en: This file should contain similar logic to `App.ios.js`, but any references to
    iOS-specific components, such as `TabBarIOS`, should be removed. Additionally,
    any navigation events should be updated to support `Navigator` logic.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件应包含与`App.ios.js`类似的逻辑，但应删除任何对iOS特定组件的引用，例如`TabBarIOS`。此外，任何导航事件应更新以支持`Navigator`逻辑。
- en: 'Here''s how I did it:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我的做法：
- en: '[PRE79]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'The following three items were removed from the import statements: `NavigatorIOS`,
    `TabBarIOS`, and `LoginPage`:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 以下三个项目从导入语句中删除：`NavigatorIOS`, `TabBarIOS`, 和 `LoginPage`：
- en: '[PRE80]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'The `selectedTab` property in state was removed from the `constructor`:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 状态中的 `selectedTab` 属性从 `constructor` 中移除：
- en: '[PRE81]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'The `componentWillMount` and `render` methods stayed the same as in the iOS
    version. The navigation method in `_checkLoginStatus` was modified to pass an
    `index` instead of the `LoginPage` component:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '`componentWillMount` 和 `render` 方法与 iOS 版本保持一致。在 `_checkLoginStatus` 中的导航方法被修改为传递一个
    `index` 而不是 `LoginPage` 组件：'
- en: '[PRE82]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: The `_getFeed`, `_renderFeedList`, and `_renderLoginPrompt` methods were not
    modified either. Instead of returning `TabBarIOS` in `_renderView`, I return a
    call to `_renderFeedList` instead.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '`_getFeed`, `_renderFeedList`, 和 `_renderLoginPrompt` 方法也没有被修改。在 `_renderView`
    中，我不再返回 `TabBarIOS`，而是返回对 `_renderFeedList` 的调用。'
- en: '[PRE83]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: Finally, `_refreshFeedList` and `_responseInfoCallback` methods were also left
    unchanged. However, `_setSelectedTab` was removed from `App.android.js` since
    it was a `TabBarIOS`-specific method.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`_refreshFeedList` 和 `_responseInfoCallback` 方法也没有改变。然而，由于 `_setSelectedTab`
    是一个 `TabBarIOS` 特定的方法，所以它从 `App.android.js` 中被移除。
- en: Modifying FeedList
  id: totrans-298
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改 `FeedList`
- en: 'The styling for `FeedList` needs to change conditionally on Android so that
    its `container` style does not contain the `marginTop` property. Modify `FeedList`
    so that it does the following functions:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Android 上，`FeedList` 的样式需要根据条件进行更改，以便其 `container` 样式不包含 `marginTop` 属性。修改
    `FeedList` 以执行以下功能：
- en: Imports the `Platform` API from React Native.
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 React Native 中导入 `Platform` API。
- en: Conditionally checks for the user's platform and serves them either the container
    style on iOS devices or a new Android-specific style that does not include the
    `marginTop` property.
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 条件检查用户的平台，并根据检查结果在 iOS 设备上提供容器样式或一个新的不包含 `marginTop` 属性的 Android 特定样式。
- en: 'Here are my `FeedList` modifications for Android:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是我的 `FeedList` 对 Android 的修改：
- en: '[PRE84]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'I imported the `Platform` API and used a ternary operator to run a check for
    the user''s operating system, assigning the top-level `View` component in the
    `render` method of `FeedList` an applicable style depending on that check''s results:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 我导入了 `Platform` API 并使用三元运算符来检查用户的操作系统，根据检查结果在 `FeedList` 的 `render` 方法中将顶层
    `View` 组件分配一个适用的样式：
- en: '[PRE85]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: I added the `androidContainer` style to the `StyleSheet` of `FeedList`.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 我将 `androidContainer` 样式添加到 `FeedList` 的 `StyleSheet` 中。
- en: Supporting Navigator in FeedListRow
  id: totrans-307
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 `FeedListRow` 中支持 `Navigator`
- en: 'Next, we have to update FeedListRow to do the following:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们必须更新 `FeedListRow` 以执行以下操作：
- en: Import the `Platform` API
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导入 `Platform` API
- en: Modify the `navigateToPostView` to check for the user's operating system and
    use the appropriate syntax to push the `PostView` for each one
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改 `navigateToPostView` 以检查用户的操作系统并使用适当的语法为每个操作系统推送 `PostView`
- en: 'I created the `propsObject` to store the object assigned to `passProps` so
    that I did not have to rewrite it for a second time:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 我创建了 `propsObject` 来存储分配给 `passProps` 的对象，这样我就不必再次重写它：
- en: '[PRE86]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'Here we look at conditional logic for iOS:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们查看 iOS 的条件逻辑：
- en: '[PRE87]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: Since the iOS logic ends the function with the `return` statement, `push` with
    the `Navigator` if on Android.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 iOS 逻辑以 `return` 语句结束，所以在 Android 上使用 `Navigator` 的 `push`。
- en: '[PRE88]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: Adding PostView navigator and BackAndroid support
  id: totrans-317
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加 `PostView` 导航器和 `BackAndroid` 支持
- en: 'Now, let''s modify the `PostView` component with the following changes:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们对 `PostView` 组件进行以下修改：
- en: Import the `Platform` and `BackAndroid` APIs
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导入 `Platform` 和 `BackAndroid` API
- en: Add and remove listeners for `BackAndroid` during `componentWillMount` and `componentWillUnmount`
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `componentWillMount` 和 `componentWillUnmount` 中添加和移除 `BackAndroid` 的监听器。
- en: Write a callback in the component to handle back button presses on Android,
    calling `pop` on the navigator as a result
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在组件中编写一个回调来处理 Android 上的返回按钮点击，结果调用导航器的 `pop`。
- en: Create conditional logic similar to `FeedListRow` to push the `WebViewComponent`
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建类似于 `FeedListRow` 的条件逻辑来推送 `WebViewComponent`
- en: 'I created an event listener for `BackAndroid` in the `componentWillMount` lifecycle:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 我在 `componentWillMount` 生命周期中创建了一个 `BackAndroid` 的事件监听器：
- en: '[PRE89]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'Likewise, I remove that event listener during `componentWillUnmount`:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我在 `componentWillUnmount` 中移除了那个事件监听器：
- en: '[PRE90]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'This method calls `pop` on the `navigator` and is fired when the back button
    is pressed:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法在按下返回按钮时在 `navigator` 上调用 `pop`：
- en: '[PRE91]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'The conditional logic for pushing `WebViewComponent` on an iOS is as follows:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 在 iOS 上推送 `WebViewComponent` 的条件逻辑如下：
- en: '[PRE92]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'The conditional logic for the same thing, but on Android is as follows:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 相同功能的条件逻辑，但在 Android 上如下：
- en: '[PRE93]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: Summary
  id: totrans-333
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Congratulations! You have successfully built three React Native applications
    throughout the course of this book. In this chapter, you learned to add a pull-to-refresh
    interaction into the application, letting users of your apps quickly refresh their
    data using a well-known gesture. Then, you utilized the `Image` component, rendering
    remote images into your application. Next, you created a `WebView` component for
    the application, allowing users to view Web-related content without shuffling
    them out of the app and into the system browser. Finally, you made the required
    modifications to create an Android version of the application.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！您已经成功构建了三款React Native应用程序，贯穿整本书的学习过程。在本章中，您学习了如何将下拉刷新交互添加到应用程序中，让您的应用用户能够通过一个众所周知的手势快速刷新数据。然后，您使用了`Image`组件，将远程图片渲染到您的应用程序中。接下来，您为应用程序创建了一个`WebView`组件，使用户能够在不离开应用进入系统浏览器的情况下查看与Web相关的内容。最后，您进行了必要的修改，以创建应用程序的Android版本。
