["```js\nconst createStore = (initialState) => {\n  let state = initialState;\n  const callbacks = new Set();\n  const getState = () => state;\n  const setState = (nextState) => {\n    state = typeof nextState === 'function'\n      ? nextState(state) : nextState;\n    callbacks.forEach((callback) => callback());\n  };\n  const subscribe =(callback) => {\n    callbacks.add(callback);\n    return () => { callbacks.delete(callback); };\n  };\n  return { getState, setState, subscribe };\n};\n```", "```js\nconst store = createStore({ count: 0 });\n```", "```js\nconst Counter = () => {\n  const [state, setState] = useStore(store);\n  const inc = () => {\n    setState((prev) => ({                       \n      ...prev,\n      count: prev.count + 1,                   \n    }));                    \n  };              \n  return (                       \n    <div>\n      {state.count} <button onClick={inc}>+1</button>\n    </div>                                 \n  );               \n};\nconst Component = () => (\n  <>\n    <Counter />\n    <Counter />\n  </>\n);\n```", "```js\nconst store2 = createStore({ count: 0 })\n```", "```js\nconst Counter2 = () => {\n  const [state, setState] = useStore(store2);\n  const inc = () => {\n    setState((prev) => ({                       \n      ...prev,\n      count: prev.count + 1,                   \n    }));                    \n  };              \n  return (                       \n    <div>\n      {state.count} <button onClick={inc}>+1</button>\n    </div>                                 \n  );               \n};\nconst Component2 = () => (\n  <>\n    <Counter2 />\n    <Counter2 />\n  </>\n);\n```", "```js\nconst Component = () => (\n  <StoreProvider>\n    <Counter />\n    <Counter />\n  </StoreProvider>\n);\nconst Component2 = () => (\n  <Store2Provider>\n    <Counter />\n    <Counter />\n  </Store2Provider>\n);\nconst Component3 = () => (\n  <Store3Provider>\n    <Counter />\n    <Counter />\n  </Store3Provider>\n);\n```", "```js\nconst ThemeContext = createContext(\"light\");\nconst Component = () => {\n  const theme = useContext(ThemeContext);\n  return <div>Theme: {theme}</div>\n};\n```", "```js\n<ThemeContext.Provider value=\"dark\">\n  <Component />\n</ThemeContext.Provider>\n```", "```js\n<ThemeContext.Provider value=\"this value is not used\">\n  <ThemeContext.Provider value=\"this value is not used\">\n    <ThemeContext.Provider value=\"this is the value used\">\n      <Component />\n    </ThemeContext.Provider>\n  </ThemeContext.Provider>\n</ThemeContext.Provider>\n```", "```js\nconst Root = () => (\n  <>\n    <Component />\n  </>\n);\n```", "```js\nconst Root = () => (\n  <ThemeContext.Provider value=\"light\">\n    <Component />\n  </ThemeContext.Provider>\n);\n```", "```js\ntype Store<T> = {\n  getState: () => T;\n  setState: (action: T | ((prev: T) => T)) => void;\n  subscribe: (callback: () => void) => () => void;\n};\n\nconst createStore = <T extends unknown>(\n  initialState: T\n): Store<T> => {\n  let state = initialState;\n  const callbacks = new Set<() => void>();\n  const getState = () => state;\n  const setState = (nextState: T | ((prev: T) => T)) => {\n    state =\n      typeof nextState === \"function\"\n        ? (nextState as (prev: T) => T)(state)\n        : nextState;\n    callbacks.forEach((callback) => callback());\n  };\n  const subscribe = (callback: () => void) => {\n    callbacks.add(callback);\n    return () => {\n      callbacks.delete(callback);\n    };\n  };\n  return { getState, setState, subscribe };\n};\n```", "```js\ntype State = { count: number; text?: string };\n\nconst StoreContext = createContext<Store<State>>(\n  createStore<State>({ count: 0, text: \"hello\" })\n);\n```", "```js\nconst StoreProvider = ({\n  initialState,\n  children,\n}: {\n  initialState: State;\n  children: ReactNode;\n}) => {\n  const storeRef = useRef<Store<State>>();\n  if (!storeRef.current) {\n    storeRef.current = createStore(initialState);\n  }\n  return (\n    <StoreContext.Provider value={storeRef.current}>\n      {children}\n    </StoreContext.Provider>\n  );\n};\n```", "```js\nconst useSelector = <S extends unknown>(\n  selector: (state: State) => S\n) => {\n  const store = useContext(StoreContext);\n  return useSubscription(\n    useMemo(\n      () => ({\n        getCurrentValue: () => selector(store.getState()),\n        subscribe: store.subscribe,\n      }),\n      [store, selector]\n    )\n  );\n};\n```", "```js\nconst useSetState = () => {\n  const store = useContext(StoreContext);\n  return store.setState;\n};\n```", "```js\nconst selectCount = (state: State) => state.count;\nconst Component = () => {\n  const count = useSelector(selectCount);\n  const setState = useSetState();\n  const inc = () => {\n    setState((prev) => ({\n      ...prev,\n      count: prev.count + 1,\n    }));\n  };\n  return (\n    <div>\n      count: {count} <button onClick={inc}>+1</button>\n    </div>\n  );\n};\n```", "```js\nconst App = () => (\n  <>\n    <h1>Using default store</h1>\n    <Component />\n    <Component />\n    <StoreProvider initialState={{ count: 10 }}>\n      <h1>Using store provider</h1>\n      <Component />\n      <Component />\n      <StoreProvider initialState={{ count: 20 }}>\n        <h1>Using inner store provider</h1>\n        <Component />\n        <Component />\n      </StoreProvider>\n    </StoreProvider>\n  </>\n);\n```"]