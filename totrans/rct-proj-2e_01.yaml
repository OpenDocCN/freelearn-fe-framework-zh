- en: '*Chapter 1*: Creating a Single-Page Application in React'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第一章*：使用 React 创建单页应用程序'
- en: When you bought this book, you'd probably heard of React before and maybe even
    tried out some of the code examples that can be found online. This book is constructed
    in such a way that the code examples in each chapter gradually increase in complexity,
    so even if you feel your experience with React is limited, each chapter should
    be understandable if you've read the previous one. By the end of this book, you
    will know how to work with React and its stable features, up until version 18,
    and you will also have experience with GraphQL and React Native.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 当您购买这本书时，您可能已经听说过 React，甚至可能尝试过一些在线可找到的代码示例。这本书的构建方式使得每个章节中的代码示例的复杂度逐渐增加，因此即使您的
    React 经验有限，如果您已经阅读了前一章节，每个章节都应该容易理解。到本书结束时，您将了解如何使用 React 及其稳定功能，直到版本 18，并且您还将拥有使用
    GraphQL 和 React Native 的经验。
- en: This first chapter kicks off with us learning how to build a single-page application
    based on the popular TV show *Rick and Morty*; the application will provide us
    with information about its characters that we'll fetch from an external source.
    The core concepts for getting started with React will be applied to this project,
    which should be understandable if you've got some prior experience in building
    applications with React. If you haven't worked with React before, that's no problem
    either; this book describes the React features that are used in the code examples
    along the way.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章首先介绍如何基于流行的电视剧 *Rick and Morty* 构建单页应用程序；该应用程序将向我们提供从外部来源获取的角色信息。我们将应用 React
    入门的核心概念，如果您有使用 React 构建应用程序的先前经验，这将容易理解。如果您之前没有使用过 React，也没有问题；本书描述了代码示例中使用的 React
    功能。
- en: 'In this chapter, we''ll cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Setting up a new React project
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置新的 React 项目
- en: Structuring a project
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目结构
- en: Let's dive in!
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧！
- en: Project overview
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目概述
- en: In this chapter, we will create a single-page application in React that retrieves
    data from an API and runs in the browser with Webpack and Babel. Styling will
    be done using Bootstrap. The application that you'll build will show information
    about the popular TV show *Rick and Morty*, along with images.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用 React 创建一个单页应用程序，从 API 获取数据，并在浏览器中使用 Webpack 和 Babel 运行。样式将使用 Bootstrap
    完成。您将构建的应用程序将展示关于流行电视剧 *Rick and Morty* 的信息，以及图片。
- en: The build time is 1 hour.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 构建时间为 1 小时。
- en: Getting started
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始
- en: 'The complete code for this chapter can be found on GitHub: [https://github.com/PacktPublishing/React-Projects-Second-Edition/tree/main/Chapter01](https://github.com/PacktPublishing/React-Projects-Second-Edition/tree/main/Chapter01).'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的完整代码可以在 GitHub 上找到：[https://github.com/PacktPublishing/React-Projects-Second-Edition/tree/main/Chapter01](https://github.com/PacktPublishing/React-Projects-Second-Edition/tree/main/Chapter01)。
- en: For the applications created in this book, you'll need to have at least Node.js
    v14.17.0 installed on your machine so that you can run npm commands. If you haven't
    installed Node.js on your machine, please go to [https://nodejs.org/en/download/](https://nodejs.org/en/download/),
    where you can find the download instructions for macOS, Windows, and Linux.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本书中创建的应用程序，您需要在您的机器上至少安装 Node.js v14.17.0，以便运行 npm 命令。如果您尚未在您的机器上安装 Node.js，请访问
    [https://nodejs.org/en/download/](https://nodejs.org/en/download/)，在那里您可以找到 macOS、Windows
    和 Linux 的下载说明。
- en: 'After installing Node.js, run the following commands in your command line to
    check the installed versions:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 Node.js 后，请在您的命令行中运行以下命令以检查安装的版本：
- en: 'For Node.js (which should be v14.17.0 or higher), use this:'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 Node.js（应至少为 v14.17.0 或更高版本），请使用以下命令：
- en: '[PRE0]'
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'For npm (which should be v6.14.3 or higher), use this:'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 npm（应至少为 v6.14.3 或更高版本），请使用以下命令：
- en: '[PRE1]'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Also, you should have installed the React Developer Tools plugin (for Chrome
    and Firefox) and added it to your browser. This plugin can be installed from the
    Chrome Web Store ([https://chrome.google.com/webstore](https://chrome.google.com/webstore))
    or Firefox Add-ons ([https://addons.mozilla.org](https://addons.mozilla.org)).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您还应该已经安装了 React 开发者工具插件（适用于 Chrome 和 Firefox）并将其添加到您的浏览器中。此插件可以从 Chrome 网上应用店（[https://chrome.google.com/webstore](https://chrome.google.com/webstore)）或
    Firefox 插件（[https://addons.mozilla.org](https://addons.mozilla.org)）安装。
- en: Creating a single-page application
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建单页应用程序
- en: In this section, we will create a new single-page React application from scratch,
    starting with setting up a new project with Webpack and Babel. Setting up a React
    project from scratch will help you understand the basic needs of a project, which
    is crucial for any project you create.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将从头开始创建一个新的单页React应用程序，从使用Webpack和Babel设置新项目开始。从头开始设置React项目将帮助您了解项目的基本需求，这对于您创建的任何项目都至关重要。
- en: Setting up a project
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置项目
- en: Every time you create a new React project, the first step is to create a new
    directory on your local machine. Since this is the first chapter for which you're
    going to build a single-page application, name this directory `chapter-1`.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 每次创建一个新的React项目时，第一步是在您的本地机器上创建一个新的目录。由于这是您将要构建的单页应用程序的第一章，因此将此目录命名为`chapter-1`。
- en: 'Inside this new directory, execute the following from the command line:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个新目录中，从命令行执行以下操作：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Running this command will create a fresh `package.json` file with the bare minimum
    of information needed to run a JavaScript/React project. By adding the `-y` flag
    to the command, we can automatically skip the steps where we set information such
    as the name, version, and description.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此命令将创建一个全新的`package.json`文件，其中包含运行JavaScript/React项目所需的最基本信息。通过在命令中添加`-y`标志，我们可以自动跳过设置名称、版本和描述等信息的过程。
- en: 'After running this command, the following `package.json` file will be created
    for the project:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此命令后，将为项目创建以下`package.json`文件：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'To learn more about the workings of `package.json`, make sure to read the documentation
    from npm: [https://docs.npmjs.com/cli/v6/configuring-npm/package-json](https://docs.npmjs.com/cli/v6/configuring-npm/package-json).'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于`package.json`的工作原理，请确保阅读npm的文档：[https://docs.npmjs.com/cli/v6/configuring-npm/package-json](https://docs.npmjs.com/cli/v6/configuring-npm/package-json)。
- en: After creating `package.json` in this section, we're ready to add Webpack, which
    we will do in the next section.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节创建`package.json`后，我们就可以添加Webpack了，我们将在下一节中这样做。
- en: Setting up Webpack
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置Webpack
- en: 'To run the React application, we need to install Webpack 5 (at the time of
    writing, the current stable version of Webpack is version 5) and the Webpack CLI
    as `devDependencies`. Webpack is a library that lets us create a bundle out of
    JavaScript/React code that can be used in a browser. The following steps will
    help you set up Webpack:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行React应用程序，我们需要安装Webpack 5（在撰写本文时，Webpack的当前稳定版本是版本5）和Webpack CLI作为`devDependencies`。Webpack是一个库，它允许我们创建一个由JavaScript/React代码组成的包，可以在浏览器中使用。以下步骤将帮助您设置Webpack：
- en: 'Install the required packages from npm using the following command:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令从npm安装所需的包：
- en: '[PRE4]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'After installation, these packages are included inside the `package.json` file
    where we can have them run in our `start` and `build` scripts. But first, we need
    to add some files to the project:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装后，这些包将包含在`package.json`文件中，我们可以在`start`和`build`脚本中运行它们。但首先，我们需要将一些文件添加到项目中：
- en: '[PRE5]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This will add the `index.js` file to a new directory called `src`. Later on,
    we'll configure Webpack so that this file is the starting point for our application.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把`index.js`文件添加到一个名为`src`的新目录中。稍后，我们将配置Webpack，使此文件成为我们应用程序的起点。
- en: 'First, the following code block must be added to this file:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，必须将以下代码块添加到该文件中：
- en: '[PRE6]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To run the preceding code, we will add the `start` and `build` scripts to our
    application using Webpack. The test script is not needed in this chapter, so this
    can be deleted. Also, the `main` field can be changed to `private` with the `true`
    value, as the code we''re building is a local project:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要运行前面的代码，我们将使用Webpack将`start`和`build`脚本添加到我们的应用程序中。在本章中不需要测试脚本，因此可以将其删除。此外，`main`字段可以更改为`private`，使用`true`值，因为我们正在构建的是本地项目：
- en: '[PRE7]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `npm start` command will run Webpack in development mode, while `npm run
    build` will create a production bundle using Webpack. The biggest difference is
    that running Webpack in production mode will minimize our code and decrease the
    size of the project bundle.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`npm start`命令将以开发模式运行Webpack，而`npm run build`将使用Webpack创建一个生产包。最大的区别是，以生产模式运行Webpack将最小化我们的代码并减小项目包的大小。'
- en: 'We now run the `start` or `build` command from the command line; Webpack will
    start up and create a new directory called `dist`:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们从命令行运行`start`或`build`命令；Webpack将启动并创建一个名为`dist`的新目录：
- en: '[PRE8]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Inside this directory, there will be a file called `main.js` that includes
    our project code and is also known as our bundle. If successful, the following
    output will be visible:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此目录中，将有一个名为 `main.js` 的文件，它包含我们的项目代码，也被称为我们的包。如果成功，以下输出将可见：
- en: '[PRE9]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Depending on whether we've run Webpack in development or production mode, the
    code will be minimized in this file.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我们是否以开发或生产模式运行 Webpack，此文件中的代码将被最小化。
- en: 'You can check whether your code is working by running the `main.js` file in
    your bundle from the command line:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以通过从命令行运行你的包中的 `main.js` 文件来检查你的代码是否工作：
- en: '[PRE10]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This command runs the bundled version of our application and should return
    the following output:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令运行我们应用程序的打包版本，并应返回以下输出：
- en: '[PRE11]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Now, we're able to run JavaScript code from the command line. In the next part
    of this section, we will learn how to configure Webpack so that it works with
    React.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们能够从命令行运行 JavaScript 代码。在本节下一部分，我们将学习如何配置 Webpack 以使其与 React 一起工作。
- en: Configuring Webpack to work with React
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置 Webpack 以与 React 一起工作
- en: Now that we've set up a basic development environment with Webpack for a JavaScript
    application, we can start installing the packages we need in order to run any
    React application.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经为 JavaScript 应用程序设置了一个基本的开发环境，我们可以开始安装运行任何 React 应用程序所需的包。
- en: 'These packages are `react` and `react-dom`, where the former is the generic
    core package for React and the latter provides an entry point to the browser''s
    DOM and renders React. Install these packages by executing the following command
    in the command line:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这些包是 `react` 和 `react-dom`，前者是 React 的通用核心包，后者提供了浏览器 DOM 的入口点并渲染 React。通过在命令行中执行以下命令来安装这些包：
- en: '[PRE12]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Installing only the dependencies for React is not sufficient to run it, since,
    by default, not every browser can read the format (such as ES2015+ or React) that
    your JavaScript code is written in. Therefore, we need to compile the JavaScript
    code into a readable format for every browser.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 仅安装 React 的依赖项不足以运行它，因为默认情况下，并非每个浏览器都能读取你的 JavaScript 代码所使用的格式（如 ES2015+ 或 React）。因此，我们需要将
    JavaScript 代码编译成每个浏览器都能读取的格式。
- en: 'For this, we''ll use Babel and its related packages to create a toolchain to
    use React in the browser with Webpack. These packages can be installed as `devDependencies`
    by running the following command:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们将使用 Babel 及其相关包创建一个工具链，以便在浏览器中使用 Webpack 运行 React。这些包可以通过运行以下命令作为 `devDependencies`
    安装：
- en: '[PRE13]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Next to the Babel core package, we'll also install `babel-loader`, which is
    a helper so that Babel can run with Webpack and two preset packages. These preset
    packages help determine which plugins will be used to compile our JavaScript code
    into a readable format for the browser (`@babel/preset-env`) and to compile React-specific
    code (`@babel/preset-react`). With the packages for React and the correct compilers
    installed, the next step is to make them work with Webpack so that they are used
    when we run our application.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 Babel 核心包之外，我们还将安装 `babel-loader`，这是一个辅助工具，使得 Babel 可以与 Webpack 一起运行，并安装两个预设包。这些预设包有助于确定哪些插件将被用来将我们的
    JavaScript 代码编译成浏览器可读的格式（`@babel/preset-env`）以及编译 React 特定的代码（`@babel/preset-react`）。安装了
    React 的包和正确的编译器后，下一步是让它们与 Webpack 一起工作，以便在运行我们的应用程序时使用它们。
- en: 'To do this, configuration files for both Webpack and Babel need to be created
    in the `src` directory of the project:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，需要在项目的 `src` 目录中创建 Webpack 和 Babel 的配置文件：
- en: '[PRE14]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The configuration for Webpack is added to the `webpack.config.js` file to use
    `babel-loader`:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 将 Webpack 的配置添加到 `webpack.config.js` 文件中，以使用 `babel-loader`：
- en: '[PRE15]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The configuration in this file tells Webpack to use `babel-loader` for every
    file that has the `.js` extension and excludes files in the `node_modules` directory
    for the Babel compiler.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件中的配置告诉 Webpack 使用 `babel-loader` 处理所有具有 `.js` 扩展名的文件，并排除 `node_modules` 目录中的文件供
    Babel 编译器使用。
- en: 'To use the Babel presets, the following configuration must be added to `babel.config.json`:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 Babel 预设，必须在 `babel.config.json` 文件中添加以下配置：
- en: '[PRE16]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '`@babel/preset-env` must be set to target `esmodules` in order to use the latest
    Node modules. Also, defining the JSX runtime to `automatic` is needed, since React
    18 has adopted the new JSX Transform functionality: [https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html](https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html).'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`@babel/preset-env` 必须设置为 `esmodules` 以使用最新的 Node 模块。此外，定义 JSX 运行时为 `automatic`
    也是必要的，因为 React 18 已经采用了新的 JSX 转换功能：[https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html](https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html)。'
- en: Note
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The configuration for `babel-loader` can also be placed in the configuration
    inside `webpack.config.json`. But by creating a separate Babel configuration file
    for this, these settings can also be used by other tools in the JavaScript/React
    ecosystem.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`babel-loader` 的配置也可以放在 `webpack.config.json` 内部的配置中。但通过为这个创建一个单独的 Babel 配置文件，这些设置也可以被
    JavaScript/React 生态系统中的其他工具使用。'
- en: Now that we've set up Webpack and Babel, we can run JavaScript and React from
    the command line. In the next part of this section, we'll create our first React
    code and make it run in the browser.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置了 Webpack 和 Babel，我们可以从命令行运行 JavaScript 和 React。在本节的下一部分，我们将创建我们的第一个
    React 代码，并在浏览器中运行它。
- en: Rendering a React project
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 渲染 React 项目
- en: 'With the packages we''ve installed and configured in the previous sections
    to set up Babel and Webpack, we need to create an actual React component that
    can be compiled and run. Creating a new React project involves adding some new
    files to the project and making changes to the setup for Webpack:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 使用我们在前面的部分中安装和配置的包来设置 Babel 和 Webpack，我们需要创建一个实际的 React 组件，该组件可以被编译和运行。创建一个新的
    React 项目涉及到向项目中添加一些新文件，并修改 Webpack 的设置：
- en: 'Let''s edit the `index.js` file that already exists in our `src` directory
    so that we can use `react` and `react-dom`. The contents of this file can be replaced
    with the following:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们编辑 `src` 目录中已经存在的 `index.js` 文件，以便我们可以使用 `react` 和 `react-dom`。此文件的 内容可以替换为以下内容：
- en: '[PRE17]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: As you can see, this file imports the `react` and `react-dom` packages, defines
    a simple component that returns an `h1` element containing the name of your application,
    and has this component rendered in the browser with `react-dom`. The last line
    of code mounts the `App` component to an element with the `root` ID selector in
    your document, which is the entry point of the application.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，此文件导入了 `react` 和 `react-dom` 包，定义了一个简单的组件，该组件返回一个包含您应用程序名称的 `h1` 元素，并且使用
    `react-dom` 在浏览器中渲染此组件。代码的最后一行将 `App` 组件挂载到文档中具有 `root` ID选择器的元素上，这是应用程序的入口点。
- en: 'We can create a file that has this element in a new directory called `public`
    and name that file `index.html`:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以在一个名为 `public` 的新目录中创建一个包含此元素的文件，并将其命名为 `index.html`：
- en: '[PRE18]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'After adding a new file called `index.html` to this directory, we add the following
    code inside it:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此目录中添加一个名为 `index.html` 的新文件后，我们在其中添加以下代码：
- en: '[PRE19]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This adds an HTML heading and body. Within the `head` tag is the title of our
    application, and inside the `body` tag is a section with the "root" ID selector.
    This matches with the element we've mounted the `App` component to in the `src/index.js`
    file.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这添加了一个 HTML 标题和正文。在 `head` 标签中是应用程序的标题，在 `body` 标签中是一个具有 "root" ID选择器的部分。这与我们在
    `src/index.js` 文件中挂载 `App` 组件的元素相匹配。
- en: 'The final step in rendering our React component is extending Webpack so that
    it adds the minified bundle code to the body tags as scripts when running. Therefore,
    we should install the `html-webpack-plugin` package into our `devDependencies`:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 渲染我们的 React 组件的最终步骤是扩展 Webpack，以便在运行时将压缩后的包代码作为脚本添加到 body 标签中。因此，我们应该将 `html-webpack-plugin`
    包安装到我们的 `devDependencies` 中：
- en: '[PRE20]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'To use this new package to render our files with React, the Webpack configuration
    in the `webpack.config.js` file must be extended:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用这个新包用 React 渲染我们的文件，`webpack.config.js` 文件中的 Webpack 配置必须被扩展：
- en: '[PRE21]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now, if we run `npm start` again, Webpack will start in development mode and
    add the `index.html` file to the `dist` directory. Inside this file, we''ll see
    that, inside our `body` tag, a new `scripts` tag has been inserted that directs
    us to our application bundle – that is, the `dist/main.js` file. If we open this
    file in the browser or run `open dist/index.html` from the command line, it will
    return the result directly inside the browser. We can do the same when running
    the `npm run build` command to start Webpack in production mode; the only difference
    is that our code will be minified:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们再次运行 `npm start`，Webpack 将以开发模式启动，并将 `index.html` 文件添加到 `dist` 目录中。在这个文件中，我们会看到，在我们的
    `body` 标签内插入了一个新的 `scripts` 标签，它将我们引导到我们的应用程序捆绑包——即 `dist/main.js` 文件。如果我们在这个浏览器中打开这个文件，或者从命令行运行
    `open dist/index.html`，它将直接在浏览器中返回结果。当运行 `npm run build` 命令以启动生产模式下的 Webpack 时，我们可以做同样的事情；唯一的区别是我们的代码将被压缩：
- en: '![Figure 1.1 – Rendering React in the browser'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.1 – 在浏览器中渲染 React](img/Figure_1.1_B17390.jpg)'
- en: '](img/Figure_1.1_B17390.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 1.1 – Rendering React in the browser](img/Figure_1.1_B17390.jpg)'
- en: Figure 1.1 – Rendering React in the browser
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.1 – 在浏览器中渲染 React
- en: This process can be sped up by setting up a development server with Webpack.
    We'll do this in the final part of this section.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 通过设置带有 Webpack 的开发服务器，可以加快此过程。我们将在本节的最后部分完成此操作。
- en: Creating a development server
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建开发服务器
- en: While working in development mode, every time we make changes to the files in
    our application, we need to rerun the `npm start` command. Since this is a bit
    tedious, we will install another package called `webpack-dev-server`. This package
    adds the option to force Webpack to restart every time we make changes to our
    project files and manages our application files in memory instead of by building
    the `dist` directory.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发模式下工作期间，每次我们更改应用程序中的文件时，都需要重新运行 `npm start` 命令。由于这有点繁琐，我们将安装另一个名为 `webpack-dev-server`
    的包。这个包添加了在每次我们更改项目文件时强制 Webpack 重新启动的选项，并且它通过在内存中管理应用程序文件而不是构建 `dist` 目录来管理我们的应用程序文件。
- en: 'The `webpack-dev-server` package can be installed with `npm`:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 `npm` 安装 `webpack-dev-server` 包：
- en: '[PRE22]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Also, we need to edit the `dev` script in the `package.json` file so that it
    uses `webpack-dev-server` instead of Webpack. This way, you don''t have to recompile
    and reopen the bundle in the browser after every code change:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还需要编辑 `package.json` 文件中的 `dev` 脚本，使其使用 `webpack-dev-server` 而不是 Webpack。这样，每次代码更改后，你就不必重新编译并在浏览器中重新打开捆绑包：
- en: '[PRE23]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The preceding configuration replaces Webpack in the `start` scripts with `webpack-dev-server`,
    which runs Webpack in development mode. This will create a local development server
    that runs the application, which makes sure that Webpack is restarted every time
    an update is made to any of your project files.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 上述配置用 `webpack-dev-server` 替换了 `start` 脚本中的 Webpack，它以开发模式运行 Webpack。这将创建一个本地开发服务器，运行应用程序，并确保每次更新任何项目文件时
    Webpack 都会重新启动。
- en: 'Run the following command from the command line:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 从命令行运行以下命令：
- en: '[PRE24]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This will cause the local development server to become active at `http://localhost:8080/`,
    and it will refresh every time we make an update to any file in our project.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使本地开发服务器在 `http://localhost:8080/` 上变得活跃，并且每次我们更新项目中的任何文件时，它都会刷新。
- en: Now, we've created the basic development environment for our React application,
    which we'll develop and structure further in the next section of this chapter.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经为我们的 React 应用程序创建了基本开发环境，我们将在本章的下一节中进一步开发和结构化它。
- en: Structuring a project
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结构化项目
- en: 'With the development environment set up, it''s time to start creating the single-page
    application. In the preceding sections, we''ve already added new directories to
    the project. But let''s recap the current structure of the project, where two
    of the directories within our project''s root directory are important:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置好开发环境后，是时候开始创建单页应用程序了。在前面的章节中，我们已经在项目中添加了新的目录。但让我们回顾一下项目的当前结构，其中项目根目录下的两个目录很重要：
- en: The first directory is called `dist` and is where the output from Webpack's
    bundled version of our application can be found.
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个目录称为 `dist`，其中包含 Webpack 打包的应用程序输出。
- en: The second one is called `src` and includes the source code of our application.
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个目录称为 `src`，包含我们应用程序的源代码。
- en: Note
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: Another directory that can be found in the root directory of our project is
    called `node_modules`. This is where the source files for every package that we
    install using `npm` are placed. It is recommended you don't make any manual changes
    to files inside this directory.
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在我们项目的根目录中还可以找到一个名为 `node_modules` 的目录。这是放置我们使用 `npm` 安装的每个包的源文件的目录。建议您不要对此目录中的文件进行任何手动更改。
- en: In the following subsections, we will learn how to structure our React projects.
    This structure will be used in the rest of the chapters in this book as well.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下子节中，我们将学习如何构建我们的 React 项目。这种结构将在本书的其余章节中也被使用。
- en: Creating new components
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建新组件
- en: 'The official documentation for React doesn''t state any preferred approach
    regarding how to structure our React project, although two common approaches are
    popular within the community: either structuring your files by feature/page or
    structuring them by file type.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管React的官方文档没有说明关于如何结构化我们的React项目的首选方法，尽管在社区中有两种常见的方法：要么按功能/页面结构化文件，要么按文件类型结构化。
- en: 'The single-page application in this chapter will use a hybrid approach, where
    files are structured by file type first and by feature second. In practice, this
    means that there will be two types of components: top-level components, which
    are sometimes called containers, and low-level components, which relate to these
    top-level components. Creating these components requires that we add the following
    files and code changes:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的单页应用程序将采用混合方法，首先按文件类型结构化文件，其次按功能结构化。在实践中，这意味着将有两种类型的组件：顶层组件，有时也称为容器，以及与这些顶层组件相关的低级组件。创建这些组件需要我们添加以下文件和代码更改：
- en: 'The first step to achieving this structure is by creating a new subdirectory
    of `src` called `components`. Inside this directory, create a file called `List.js`:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现这种结构的第一步是创建一个名为 `components` 的新子目录，位于 `src` 目录下。在这个目录内，创建一个名为 `List.js` 的文件：
- en: '[PRE25]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'This file will return the component that lists all the information about *Rick
    and Morty*:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件将返回列出有关 *Rick and Morty* 所有信息的组件：
- en: '[PRE26]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'This component should be included in the entry point of our application so
    that it''s visible. Therefore, we need to include it in the `index.js` file, inside
    the `src` directory, and refer to it:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此组件应包含在我们的应用程序入口点中，以便它可见。因此，我们需要在 `src` 目录下的 `index.js` 文件中包含它，并引用它：
- en: '[PRE27]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: If we still have the development server running (if not, execute the `npm start`
    command again), we'll see that our application now returns the **Characters**
    heading below the title.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们仍然在运行开发服务器（如果不是，请再次执行 `npm start` 命令），我们会看到我们的应用程序现在在标题下方返回了 **Characters**
    标题。
- en: 'The next step is to add a component to the `List` component, making it a so-called
    composed component, which is a component that consists of multiple components.
    This component will be called `Character` and should also be located in the `src`
    subdirectory called `components`. Inside this directory, create a file called
    `Character.js` and add the following code block to it:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是将组件添加到 `List` 组件中，使其成为一个所谓的组合组件，即由多个组件组成的组件。这个组件将被命名为 `Character`，并且也应该位于名为
    `components` 的 `src` 子目录中。在这个目录内，创建一个名为 `Character.js` 的文件，并将以下代码块添加到其中：
- en: '[PRE28]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: As you have probably guessed from the name of this component, it will be used
    to return information about a character from *Rick and Morty* later on.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 如您从该组件的名称中可能猜到的，它将被用于稍后返回有关 *Rick and Morty* 中角色的信息。
- en: 'Now, import this `Character` component into the `List` component and return
    this component after the `h2` element by replacing the `return` function with
    the following code:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将此 `Character` 组件导入到 `List` 组件中，并在 `h2` 元素之后返回此组件，用以下代码替换 `return` 函数：
- en: '[PRE29]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'If we visit our application in the browser again at `http://localhost:8080/`,
    the words **Character** will be displayed below the title and heading of the page:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们再次在浏览器中访问我们的应用程序 `http://localhost:8080/`，标题和标题下方将显示 **Character** 字样。
- en: '![Figure 1.2 – Adding components to React'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.2 – 向 React 添加组件](img/Figure_1.2_B17390.jpg)'
- en: '](img/Figure_1.2_B17390.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.2 – 向 React 添加组件](img/Figure_1.2_B17390.jpg)'
- en: Figure 1.2 – Adding components to React
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.2 – 向 React 添加组件
- en: 'From this, we cannot see which components are being rendered in the browser.
    But luckily, we can open the React Developer Tools plugin in our browser; we''ll
    notice that the application currently consists of multiple stacked components:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个角度来看，我们无法看到浏览器中正在渲染哪些组件。但幸运的是，我们可以在浏览器中打开 React 开发者工具插件；我们会注意到，应用程序目前由多个堆叠的组件组成：
- en: '[PRE30]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: In the next part of this section, we will use our knowledge of structuring a
    React project and create new components to fetch data about *Rick and Morty* that
    we want to display in this single-page application.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节的下一部分，我们将利用我们对构建 React 项目的知识，创建新的组件来检索我们想要在这个单页应用程序中显示的 *Rick and Morty*
    的数据。
- en: Retrieving data
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 检索数据
- en: With both the development server and the structure for our project set up, it's
    time to finally add some data to it. For this, we'll be using the *Rick and Morty*
    REST API ([https://rickandmortyapi.com/documentation/#rest](https://rickandmortyapi.com/documentation/#rest)),
    which provides information about this popular TV show.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们的开发服务器和项目结构都已设置，现在是时候向其中添加一些数据了。为此，我们将使用 *Rick and Morty* REST API ([https://rickandmortyapi.com/documentation/#rest](https://rickandmortyapi.com/documentation/#rest))，该API提供了关于这部热门电视剧的信息。
- en: Information from APIs can be retrieved in JavaScript using, for example, the
    `fetch` method, which is already supported by our browser. This data will be retrieved
    in the top-level components only, meaning that we should add a `fetch` function
    in the `List` container to retrieve and store that information.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 JavaScript 中的 `fetch` 方法检索来自 API 的信息，例如，我们的浏览器已经支持此方法。这些数据只会在顶层组件中检索，这意味着我们应该在
    `List` 容器中添加一个 `fetch` 函数来检索和存储这些信息。
- en: To store the information, we'll be using the built-in state management ([https://reactjs.org/docs/state-and-lifecycle.html](https://reactjs.org/docs/state-and-lifecycle.html))
    in React. Anything stored in the state can be passed down to the low-level components,
    after which they are called props. A simple example of using state in React is
    by using the `useState` Hook, which can be used to store and update variables.
    Every time these variables change using the `update` method that is returned by
    the `useState` Hook, our component will re-render.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 为了存储信息，我们将使用 React 中的内置状态管理 ([https://reactjs.org/docs/state-and-lifecycle.html](https://reactjs.org/docs/state-and-lifecycle.html))。存储在状态中的任何内容都可以传递给低级组件，之后它们被称为
    props。在 React 中使用状态的简单示例是通过使用 `useState` Hook，它可以用来存储和更新变量。每次使用 `useState` Hook
    返回的 `update` 方法更改这些变量时，我们的组件都会重新渲染。
- en: Note
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'Since the release of version 16.8.0, React has used the concept of Hooks, which
    are methods supplied by React that let you use its core features without using
    class components. More information about Hooks can be found in the documentation:
    [https://reactjs.org/docs/hooks-intro.html](https://reactjs.org/docs/hooks-intro.html).'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 自从 16.8.0 版本发布以来，React 采用了 Hooks 的概念，这些是 React 提供的方法，允许您在不使用类组件的情况下使用其核心功能。有关
    Hooks 的更多信息，请参阅文档：[https://reactjs.org/docs/hooks-intro.html](https://reactjs.org/docs/hooks-intro.html)。
- en: Before adding the logic to retrieve data from the *Rick and Morty* REST API,
    let's inspect that API to see what fields will be returned. The base URL for the
    API is [https://rickandmortyapi.com/api](https://rickandmortyapi.com/api).
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在添加从 *Rick and Morty* REST API 检索数据的逻辑之前，让我们检查该 API 以查看将返回哪些字段。API 的基本 URL 是
    [https://rickandmortyapi.com/api](https://rickandmortyapi.com/api)。
- en: 'This URL returns a JSON output with all the possible endpoints for this API,
    which are all `GET` requests, meaning read-only, and work over `https`. From this
    base URL, we''ll be using the `/character` endpoint to get information about the
    characters from *Rick and Morty*. Not all information returned by this endpoint
    will be used; the following are the fields that we''ll actually be using:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 此 URL 返回一个包含此 API 所有可能端点的 JSON 输出，这些端点都是 `GET` 请求，意味着只读，并且通过 `https` 工作。从此基本
    URL 开始，我们将使用 `/character` 端点来获取 *Rick and Morty* 中角色的信息。此端点返回的所有信息都不会被使用；以下是我们实际上将使用的字段：
- en: '`id` (int): The unique identifier of the character'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`id` (int): 角色的唯一标识符'
- en: '`name` (string): The name of the character'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` (string): 角色的名字'
- en: '`origin` (object): The object containing the name and the link to the character''s
    origin location'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`origin` (object): 包含角色起源名称和链接的对象'
- en: '`image` (string): The link to the character''s image with the dimensions 300
    x 300 px'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`image` (string): 角色图像的链接，尺寸为 300 x 300 像素'
- en: 'Before retrieving the data for *Rick and Morty*, the `Character` component
    needs to be prepared to receive this information. To display information about
    *Rick and Morty*, we need to add the following lines to the `Character` component:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在检索 *Rick and Morty* 的数据之前，需要准备 `Character` 组件以接收这些信息。为了显示关于 *Rick and Morty*
    的信息，我们需要在 `Character` 组件中添加以下行：
- en: '[PRE31]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Now, the logic to retrieve the data can be implemented by importing `useState`
    from React and adding this Hook to the `List` component, which will contain an
    empty array as a placeholder for the characters:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，可以通过从 React 中导入 `useState` 并将此 Hook 添加到 `List` 组件中来实现检索数据的逻辑，该组件将包含一个空数组作为字符的占位符：
- en: '[PRE32]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: To do the actual data fetching, another Hook should be imported, which is the
    `useEffect` Hook. This one can be used to handle side effects, either when the
    application mounts or when the state or a prop gets updated. This Hook takes two
    parameters, where the first one is a callback and the second one is an array containing
    all of the variables this Hook depends on – the so-called dependency array. When
    any of these dependencies change, the callback for this Hook will be called. When
    there are no values in this array, the Hook will be called constantly. After the
    data is fetched from the source, the state will be updated with the results.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 要进行实际的数据检索，还需要导入另一个 Hook，即 `useEffect` Hook。这个 Hook 可以用来处理副作用，无论是当应用程序挂载时还是当状态或
    prop 被更新时。这个 Hook 有两个参数，第一个是一个回调函数，第二个是一个包含此 Hook 所依赖的所有变量的数组——所谓的依赖数组。当这些依赖中的任何一个发生变化时，此
    Hook 的回调函数将被调用。当这个数组中没有值时，Hook 将不断被调用。在从源获取数据后，状态将使用结果进行更新。
- en: 'In our application, we need to add this Hook and retrieve the data from the
    API, and we should use an `async/await` function, since the `fetch` API returns
    a promise. After fetching the data, `state` should be updated by replacing the
    empty array for data with the character information:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用程序中，我们需要添加此 Hook 并从 API 检索数据，我们应该使用 `async/await` 函数，因为 `fetch` API 返回一个承诺。在检索数据后，`state`
    应通过用字符信息替换数据中的空数组来更新：
- en: '[PRE33]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Inside the `useEffect` Hook, the new `fetchData` function will be called, as
    it''s advised to not use an `async/await` function directly. The Hook is only
    calling the logic to retrieve the data from the API when the length of the `characters`
    state changes. You can extend this logic by also adding a `loading` state to the
    application so that the user will know when the data is still being fetched:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `useEffect` Hook 内部，将调用新的 `fetchData` 函数，因为建议不要直接使用 `async/await` 函数。当 `characters`
    状态的长度发生变化时，Hook 仅调用从 API 检索数据的逻辑。你可以通过向应用程序添加一个 `loading` 状态来扩展此逻辑，这样用户就会知道数据仍在被检索：
- en: '[PRE34]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Note
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The previous method that we used to retrieve information from JSON files using
    `fetch` doesn't take into account that the request to this file may fail. If the
    request fails, the `loading` state will remain `true`, meaning that the user will
    keep seeing the loading indicator. If you want to display an error message when
    the request doesn't succeed, you'll need to wrap the `fetch` method inside a `try...catch`
    block, which will be shown later on in this book.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前使用 `fetch` 从 JSON 文件中检索信息的方法没有考虑到对这个文件的请求可能会失败。如果请求失败，`loading` 状态将保持为 `true`，这意味着用户将一直看到加载指示器。如果你想在请求不成功时显示错误消息，你需要将
    `fetch` 方法包裹在一个 `try...catch` 块中，这将在本书的后面部分展示。
- en: To display the character information in the application, we need to pass it
    to the `Character` component, where it can ultimately be shown in the `Character`
    component that we changed in the first step.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在应用程序中显示字符信息，我们需要将其传递给 `Character` 组件，它最终可以在我们第一步中更改的 `Character` 组件中显示。
- en: 'When the data is being retrieved from the API, the `loading` state is `true`,
    so we cannot display the `Character` component yet. When data fetching is finished,
    loading will be `false`, and we can iterate over the `character` state, return
    the `Character` component, and pass the character information as props. This component
    will also get a `key` prop, which is required for every component that is rendered
    within an iteration. Since this value needs to be unique, the id of the character
    is used, as follows:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 当从 API 检索数据时，`loading` 状态为 `true`，所以我们还不能显示 `Character` 组件。当数据检索完成后，加载将变为 `false`，我们可以遍历
    `character` 状态，返回 `Character` 组件，并将字符信息作为 props 传递。此组件还将获得一个 `key` prop，这是在迭代中渲染的每个组件所必需的。由于此值需要是唯一的，因此使用字符的
    id，如下所示：
- en: '[PRE35]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'If we visit our application in the browser again, we''ll see that it now shows
    a list of characters, including some basic information and an image. At this point,
    our application will look similar to the following screenshot:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们再次在浏览器中访问我们的应用程序，我们会看到它现在显示了一个字符列表，包括一些基本信息和一张图片。在这个时候，我们的应用程序将类似于以下截图：
- en: '![Figure 1.3 – Rendering a list of components from the local state](img/Figure_1.3_B17390.jpg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![图1.3 – 从本地状态渲染组件列表](img/Figure_1.3_B17390.jpg)'
- en: Figure 1.3 – Rendering a list of components from the local state
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.3 – 从本地状态渲染组件列表
- en: As you can see, limited styling has been applied to the application, and it's
    only rendering the information that's been fetched from the API. Styling will
    be added in the next part of this section using a package called Bootstrap.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，已经对应用程序应用了有限的样式，并且它只渲染从API获取的信息。在下一部分中，我们将使用名为Bootstrap的包添加样式。
- en: Adding styling
  id: totrans-161
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加样式
- en: Showing just the character information isn't enough. We also need to apply some
    basic styling to the project. Adding styling to the project is done with the Bootstrap
    package, which adds styling to our components based on class names.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 只显示角色信息是不够的。我们还需要对项目应用一些基本的样式。通过Bootstrap包添加样式到项目，该包根据类名对我们的组件添加样式。
- en: 'Bootstrap can be installed from npm using the following and added to `devDependencies`:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用以下命令从npm安装Bootstrap并将其添加到`devDependencies`中：
- en: '[PRE36]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Also, import this file into the entry point of our React application, `src/index.js`,
    so that we can use the styling throughout the entire application:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 还需要将此文件导入我们的React应用程序的入口点`src/index.js`，这样我们就可以在整个应用程序中使用这些样式：
- en: '[PRE37]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Webpack is unable to compile CSS files by itself; we need to add the appropriate
    loaders to make this happen. We can install these by running the following command:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: Webpack无法自行编译CSS文件；我们需要添加适当的加载器来实现这一点。我们可以通过运行以下命令来安装这些加载器：
- en: '[PRE38]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'We need to add these packages as a rule to the Webpack configuration:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要将这些包作为规则添加到Webpack配置中：
- en: '[PRE39]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Note
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The order in which loaders are added is important since `css-loader` handles
    the compilation of the CSS file and `style-loader` adds the compiled CSS files
    to the React DOM. Webpack reads these settings from right to left, and the CSS
    needs to be compiled before it's attached to the DOM.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 添加加载器的顺序很重要，因为`css-loader`负责编译CSS文件，而`style-loader`将编译后的CSS文件添加到React DOM中。Webpack从右到左读取这些设置，CSS需要在附加到DOM之前进行编译。
- en: 'The application should run in the browser correctly now and should have picked
    up some small styling changes from the default Bootstrap stylesheet. Let''s make
    some changes to the `index.js` file first and style it as the container for the
    entire application. We need to change the `App` component that is rendered to
    the DOM and wrap the `List` component with a `div` container:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 现在应用程序应该在浏览器中正确运行，并且应该已经从默认的Bootstrap样式表中获取了一些小的样式更改。首先让我们对`index.js`文件进行一些更改，并将其样式设置为整个应用程序的容器。我们需要更改渲染到DOM中的`App`组件，并将`List`组件包裹在一个`div`容器中：
- en: '[PRE40]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Inside the `List` component, we need to set the grid to display the `Characters`
    components, which display the character information. Wrap the `map` function in
    a `div` element to treat it as a row container for Bootstrap:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在`List`组件内部，我们需要设置网格以显示`Characters`组件，这些组件用于显示角色信息。将`map`函数包裹在一个`div`元素中，将其视为Bootstrap的行容器：
- en: '[PRE41]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The code for the `Character` component must also be altered to add styling
    using Bootstrap; you can replace the current contents of that file with the following:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '`Character`组件的代码也必须进行更改，以使用Bootstrap添加样式；您可以将该文件的当前内容替换为以下内容：'
- en: '[PRE42]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: This lets us use the Bootstrap container layout with a column size of 3 ([https://getbootstrap.com/docs/5.0/layout/columns/](https://getbootstrap.com/docs/5.0/layout/columns/))
    and style the `Character` component as a Bootstrap card component ([https://getbootstrap.com/docs/5.0/components/card/](https://getbootstrap.com/docs/5.0/components/card/)).
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 这使我们能够使用Bootstrap容器布局，列大小为3（[https://getbootstrap.com/docs/5.0/layout/columns/](https://getbootstrap.com/docs/5.0/layout/columns/)），并将`Character`组件样式化为Bootstrap卡片组件（[https://getbootstrap.com/docs/5.0/components/card/](https://getbootstrap.com/docs/5.0/components/card/))）。
- en: 'To add the finishing touches, open the `index.js` file and insert the following
    code to add a header that will be placed above our list of *Rick and Morty* characters
    in the application:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 为了添加最后的修饰，打开`index.js`文件并插入以下代码以添加一个标题，该标题将放置在我们的应用程序中*瑞克和莫蒂*角色列表的上方：
- en: '[PRE43]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'After making sure that the development server is running, we''ll see that the
    application has had styling applied through Bootstrap, which will make it look
    as follows in the browser:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 确保开发服务器正在运行后，我们会看到应用程序已经通过Bootstrap应用了样式，这在浏览器中看起来如下：
- en: '![Figure 1.4 – Our application styled with Bootstrap'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.4 – 使用Bootstrap样式化的我们的应用程序](img/Figure_1.4_B17390.jpg)'
- en: '](img/Figure_1.4_B17390.jpg)'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_1.4_B17390.jpg)'
- en: Figure 1.4 – Our application styled with Bootstrap
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.4 – 使用 Bootstrap 样式化的我们的应用程序
- en: The style rules from Bootstrap have been applied to our application, making
    it look far more complete than it did before. In the final part of this section,
    we'll add the **ESLint** package to the project, which will make maintaining our
    code easier by synchronizing patterns across the project.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap 的样式规则已被应用到我们的应用中，使其看起来比之前更加完整。在本节的最后部分，我们将向项目中添加 **ESLint** 包，这将通过在整个项目中同步模式来简化我们代码的维护。
- en: Adding ESLint
  id: totrans-187
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加 ESLint
- en: Finally, we will add ESLint to the project to make sure our code meets certain
    standards – for instance, that our code follows the correct JavaScript patterns.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将把 ESLint 添加到项目中，以确保我们的代码符合某些标准——例如，我们的代码遵循正确的 JavaScript 模式。
- en: 'Install ESLint from npm by running the following command:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 通过运行以下命令从 npm 安装 ESLint：
- en: '[PRE44]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: The first package, called `eslint`, is the core package and helps us identify
    any potentially problematic patterns in our JavaScript code. `eslint-webpack-plugin`
    is a package that is used by Webpack to run ESLint every time we update our code.
    Finally, `eslint-plugin-react` adds specific rules to ESLint for React applications.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个包，名为 `eslint`，是核心包，帮助我们识别 JavaScript 代码中任何可能存在问题的模式。`eslint-webpack-plugin`
    是一个由 Webpack 使用，每次我们更新代码时都会运行 ESLint 的包。最后，`eslint-plugin-react` 为 React 应用程序添加了特定的规则。
- en: 'To configure ESLint, we need to create a file called `.eslintrc` in the project''s
    root directory and add the following code to it:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 要配置 ESLint，我们需要在项目的根目录中创建一个名为 `.eslintrc` 的文件，并将以下代码添加到其中：
- en: '[PRE45]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: The `env` field sets the actual environment our code will run in and will use
    `es6` functions in it, while the `parserOptions` field adds extra configuration
    for using `jsx` and modern JavaScript. Where things get interesting, however,
    is the `plugins` field, which is where we specify that our code uses `react` as
    a framework. The `extends` field is where the `recommended` settings for `eslint`
    are used, as well as framework-specific settings for React. Also, the `rules`
    field contains a rule to disable the notification about React not being imported,
    as this is no longer required in React 18.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '`env` 字段设置了代码实际运行的环境，并将使用其中的 `es6` 函数，而 `parserOptions` 字段为使用 `jsx` 和现代 JavaScript
    添加了额外的配置。然而，有趣的地方在于 `plugins` 字段，这是我们指定代码使用 `react` 作为框架的地方。`extends` 字段用于使用 `eslint`
    的推荐设置，以及 React 的特定框架设置。此外，`rules` 字段包含一个规则来禁用关于 React 未导入的通知，因为在 React 18 中这不再需要。'
- en: Note
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: We can run the `eslint --init` command to create custom settings, but using
    the preceding settings is recommended so that we ensure the stability of our React
    code.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过运行 `eslint --init` 命令来创建自定义设置，但推荐使用前面的设置，以确保我们 React 代码的稳定性。
- en: 'If we look at our command line or browser, we will see no errors. However,
    we have to add the `eslint-webpack-plugin` package to the Webpack configuration.
    In the `webpack.config.js` file, you need to import this package and add it as
    a plugin to the configuration:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查看命令行或浏览器，我们将看到没有错误。然而，我们必须将 `eslint-webpack-plugin` 包添加到 Webpack 配置中。在
    `webpack.config.js` 文件中，您需要导入此包并将其添加到配置中：
- en: '[PRE46]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: By restarting the development server, Webpack will now use ESLint to check whether
    our JavaScript code complies with the configuration of ESLint. In our command
    line (or the **Console** tab in the browser), any misuse of React (or JavaScript)
    functionalities will be shown.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 通过重启开发服务器，Webpack 现在将使用 ESLint 检查我们的 JavaScript 代码是否遵守 ESLint 的配置。在我们的命令行（或浏览器中的
    **控制台** 选项卡），任何 React（或 JavaScript）功能的误用都将显示出来。
- en: Congratulations! You have created a basic React application from scratch using
    React, ReactDOM, Webpack, Babel, and ESLint.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！您已经使用 React、ReactDOM、Webpack、Babel 和 ESLint 从零开始创建了一个基本的 React 应用程序。
- en: Summary
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you've created a single-page application for React from scratch
    and learned about core React concepts. This chapter started with you creating
    a new project with Webpack and Babel. These libraries help you compile and run
    your JavaScript and React code in a browser with minimal setup. Then, we described
    how to structure a React application, and this structure will be used throughout
    this book. Also, you learned about state management and data fetching using React
    Hooks and basic styling with Bootstrap. The principles that were applied provided
    you with the basics from which to create React applications from nothing and structure
    them in a scalable way.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您从零开始创建了一个React单页应用程序，并学习了核心的React概念。本章从您使用Webpack和Babel创建新项目开始。这些库帮助您在浏览器中以最小的设置编译和运行您的JavaScript和React代码。然后，我们描述了如何构建一个React应用程序，这个结构将在整本书中使用。此外，您还学习了使用React
    Hooks进行状态管理和数据获取，以及使用Bootstrap进行基本样式设计。应用的原则为您提供了从零开始创建React应用程序并按可扩展方式构建它们的基础。
- en: If you've worked with React before, then these concepts probably weren't that
    hard to grasp. If you haven't, then don't worry if some concepts felt strange
    to you. The upcoming chapters will build upon the features that you used in this
    chapter, giving you enough time to fully understand them.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您之前使用过React，那么这些概念可能并不难理解。如果您没有，那么请不要担心，如果某些概念让您感到陌生。接下来的章节将基于本章使用的功能，给您足够的时间完全理解它们。
- en: The project you'll build in the next chapter will focus on creating reusable
    React components with more advanced styling. This will be available offline, since
    it will be set up as a **Progressive Web Application** (**PWA**).
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将构建的项目将专注于创建具有更高级样式的可重用React组件。这将离线可用，因为它将被设置为**渐进式Web应用程序**（**PWA**）。
- en: Further reading
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Thinking in React: [https://reactjs.org/docs/thinking-in-react.html](https://reactjs.org/docs/thinking-in-react.html)'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: React思维：[https://reactjs.org/docs/thinking-in-react.html](https://reactjs.org/docs/thinking-in-react.html)
- en: 'Bootstrap: [https://getbootstrap.com/docs/4.3/getting-started/introduction/](https://getbootstrap.com/docs/4.3/getting-started/introduction/)'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Bootstrap: [https://getbootstrap.com/docs/4.3/getting-started/introduction/](https://getbootstrap.com/docs/4.3/getting-started/introduction/)'
- en: 'ESLint: [https://eslint.org/docs/user-guide/getting-started](https://eslint.org/docs/user-guide/getting-started)'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'ESLint: [https://eslint.org/docs/user-guide/getting-started](https://eslint.org/docs/user-guide/getting-started)'
