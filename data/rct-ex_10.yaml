- en: Chapter 10. Animation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章。动画
- en: In the previous chapter, we took a look at react-router and performed routing
    at different levels. We also looked at nested routing, passing around parameters,
    and how react-router maintains history when performing the routing tasks. We learned
    about passing around context and using context to render React components. We
    explored data models and mixed and matched them with other frameworks to use as
    data models in React-like Backbone, and were introduced to Flux.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们了解了react-router并在不同级别执行路由。我们还探讨了嵌套路由、传递参数以及react-router在执行路由任务时如何维护历史记录。我们学习了传递上下文和使用上下文来渲染React组件。我们探讨了数据模型，并将它们与其他框架混合匹配，用作React-like
    Backbone中的数据模型，并介绍了Flux。
- en: In this chapter, we are going to explore a fun React add-on, Animation. We will
    start off by continuing with our Cat Pinterest application and enhancing it to
    support starring and sharing the data to update the views. We will then explore
    adding handlers for animation. We will see how components get wrapped for animation
    and how React adds the handlers for different events. We will also explore different
    events and how we can easily enhance our application in order to create stunning
    effects.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探索一个有趣的React插件，动画。我们将从继续我们的猫Pinterest应用开始，并增强它以支持星标和共享数据来更新视图。然后我们将探索添加动画处理器。我们将看到组件是如何被包装进行动画的，以及React是如何为不同事件添加处理器的。我们还将探索不同的事件，以及我们如何轻松增强我们的应用程序以创建惊人的效果。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Making changes to the data flow and passing data from react-router links
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改数据流并从react-router链接传递数据
- en: Animation in React
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: React中的动画
- en: CSS transitions
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSS过渡
- en: Transition groups
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转换组
- en: Transition handlers
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转换处理器
- en: Animating our dynamic component
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动画我们的动态组件
- en: At the end of chapter, we will be able to start animating our React components
    for different actions such as adding new content, changing data and position,
    and so on. We will also be able to add handlers for different types of events
    and explore different animation options out there, other than core animation add-on.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章末尾，我们将能够开始为不同的动作如添加新内容、更改数据和位置等对React组件进行动画处理。我们还将能够添加不同类型事件的处理器，并探索除了核心动画插件之外的不同动画选项。
- en: Fun stuff at Adequate LLC!
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Adequate LLC有很多有趣的事情！
- en: '"Hi Shawn and Mike!" Carla joined Mike and Shawn in their conversation.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '"嗨，肖恩和迈克！" 卡拉加入了迈克和肖恩的对话。'
- en: The day before, Carla had asked them to build a Pinterest-style application
    for cats for one of their clients.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一天，卡拉要求他们为他们的一个客户构建一个Pinterest风格的猫应用。
- en: '"How are things going today?" she enquired.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '"今天怎么样？"她询问道。'
- en: '"All good, Carla. Shawn, do you want to show Carla what we built yesterday?"'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '"一切顺利，卡拉。肖恩，你想向卡拉展示我们昨天建造的东西吗？"'
- en: '"Sure."'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '"当然。"'
- en: '![Fun stuff at Adequate LLC!](img/4730_10_01.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![Adequate LLC的有趣事情](img/4730_10_01.jpg)'
- en: '"That looks nice! Are we adding button for faving/starring of cats next?"'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '"看起来不错！我们接下来要添加点赞/星标猫的按钮吗？"'
- en: '"Yes, we were just getting ready for that."'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '"是的，我们正准备做这件事。"'
- en: '"Cool. The client called yesterday. What they want along with displaying the
    cats is to show a stream of cats being updated on the screen. This is going to
    happen when someone faves a cat so that we show it to other users."'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '"酷。昨天客户打电话来了。他们除了显示猫之外还想显示屏幕上猫的更新流。这将在有人点赞猫时发生，这样我们就可以向其他用户展示它。"'
- en: '"Got it. We will start working on it and simulate addition of cats to appear
    on the screen to start with."'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '"明白了。我们将开始工作，并模拟添加猫到屏幕上以开始。"'
- en: '"Awesome, I will leave you both to it."'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '"太棒了，我就让你们俩处理吧。"'
- en: Model updates
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模型更新
- en: '"So Shawn, instead of using the Backbone collection in an isolated fashion,
    let''s move it to a class to manage adding of new cats randomly and provide it
    with some other utilities, as follows:"'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '"所以肖恩，我们不如将Backbone集合移动到一个类中，以独立的方式使用它，让它随机添加新的猫并提供一些其他工具，如下所示："'
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '"Our `PictureModel` stays the same. We are adding a new `faved` attribute here
    to maintain state about whether the cat was faved by the user or not.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '"我们的`PictureModel`保持不变。我们在这里添加一个新的`faved`属性来维护用户是否喜欢这只猫的状态。'
- en: '"We will call this new class of ours `CatGenerator`, which will provide the
    component that we use to display the cats, with the data to display, fetch, and
    add new cats."'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '"我们将把这个新类命名为`CatGenerator`，它将提供我们用来显示猫的组件，以及显示、获取和添加新猫的数据。"'
- en: '"Got it. Want me to give it a try?"'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '"明白了。需要我试一试吗？"'
- en: '"Sure."'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '"当然。"'
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '"Nice Shawn."'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '"做得好，肖恩。"'
- en: '"Thanks. I moved `createCat` as a method of its own so that we can add cats
    to the collection on the fly. I am just adding a random one right now, taking
    a random height of 600-650 and a random width to create a new `PictureModel` instance."'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '"谢谢。我已经将`createCat`作为一个独立的方法移动，这样我们就可以在运行时向集合中添加猫。我现在正在添加一个随机的一个，随机高度为600-650和随机宽度来创建一个新的`PictureModel`实例。"'
- en: '"Also, to start with, I am creating `cats` collection as an attribute on the
    class. Next, I have added six cats to begin with."'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '"此外，首先，我在类属性上创建了一个`cats`集合。接下来，我一开始就添加了六只猫。"'
- en: '"Cool. We are now going to start changing its use in our Components."'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '"酷。我们现在将开始更改它在我们的组件中的使用。"'
- en: Tip
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Remember that we are going to update the components when new data comes in.
    Easy way to do this is to start storing the `CatGenerator` as a state object on
    the `Home` component.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '"记住，当新数据到来时，我们将更新组件。这样做的一个简单方法是开始在`Home`组件上存储`CatGenerator`作为状态对象。"'
- en: '"Let''s start defining and changing our `Home` component, as follows:"'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '"让我们开始定义和更改我们的`Home`组件，如下所示："'
- en: '[PRE2]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '"So, what we are doing here is creating a timer to track time intervals. We
    are going to use a random time interval to simulate the addition of a new stream
    of cats here."'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '"所以，我们在这里做的是创建一个计时器来跟踪时间间隔。我们将使用一个随机的时间间隔来模拟在这里添加新的猫流。"'
- en: '"Got it," followed up Shawn.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '"明白了," 肖恩接着说。'
- en: '"To do this, I have added the `generateCats()` method. In our `componentDidMount`,
    we are adding and setting the timer to call this method after the first creation."'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '"为此，我添加了`generateCats()`方法。在我们的`componentDidMount`中，我们在第一次创建后添加并设置计时器来调用此方法。"'
- en: '"In the method itself, I have added clearing of the old interval and we are
    calling the `catGenerator.createCat()` method to actually create the cat from
    our `CatGenerator` class."'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '"在方法本身中，我添加了清除旧间隔，并且我们调用`catGenerator.createCat()`方法来实际上从我们的`CatGenerator`类创建猫。"'
- en: '"We are then resetting the timer and setting a new one, based on a random time
    interval. I added the `catGenerator.randRange()` method to generate the random
    time interval. Here''s how it looks in the `CatGenerator` class:"'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '"然后我们重置计时器并设置一个新的，基于随机的时间间隔。我在`CatGenerator`类中添加了`catGenerator.randRange()`方法来生成随机的时间间隔。这就是它在`CatGenerator`类中的样子："'
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '"Got it. This should be creating a new stream of cats in the range of 5-10
    seconds."'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '"明白了。这应该会在5-10秒的范围内创建一个新的猫流。"'
- en: '"Next, let''s take a look at how our render method looks. I am going to add
    a star next to the cats."'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '"接下来，让我们看看我们的渲染方法看起来怎么样。我打算在猫旁边添加一个星号。"'
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '"There are two changes that I am doing here. First of all, I added the star,
    which is unfaved by default."'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '"我在这里做了两个更改。首先，我添加了一个默认未收藏的星号。"'
- en: '[PRE5]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '"Secondly, I started passing the cat object on the modal link''s state."'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '"其次，我开始在模态链接的状态中传递猫对象。"'
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '"In our `PictureModel` box, we previously had the access to the global collection
    of cats. From now on, that won''t be the case and we would need the cat object
    to be passed to the `Picture` component."'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '"在我们的`PictureModel`框中，我们之前可以访问全局猫集合。从现在起，情况将不再是这样，我们需要将猫对象传递给`Picture`组件。"'
- en: '"That''s neat, we are able to pass the objects too, to the component from a
    router `<Link/>` object."'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '"这很棒，我们能够将对象传递给从路由`<Link/>`对象来的组件。"'
- en: '"Yup, let''s go ahead and change the picture component in order for it to work
    properly with this new change in passing the data. Our `Modal` stays the same:"'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '"是的，让我们继续更改图片组件，以便它能够正确地处理这个新的数据传递变化。我们的`Modal`保持不变："'
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '"The `Picture` component now starts using the cat object."'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '"现在`Picture`组件开始使用猫对象。"'
- en: '[PRE8]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '"As you can see, the cat object is received on the `location.state` object
    from props."'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '"正如你所看到的，猫对象是通过`location.state`对象从props接收的。"'
- en: '"I have extended the picture to display more details about the cat, such as
    the name and so on, instead of showing it on a separate page. Previously, it looked
    pretty blank."'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '"我已经扩展了图片以显示有关猫的更多详细信息，例如名称等，而不是在单独的页面上显示。之前它看起来相当空白。"'
- en: '"Cool, let''s take a look at how it looks, shall we?"'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '"酷，让我们看看它看起来怎么样，好吗？"'
- en: '![Model updates](img/4730_10_02.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![模型更新](img/4730_10_02.jpg)'
- en: '"Nice, the stars look good. We will need to check the styles that I added for
    this soon."'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '"很好，星星看起来不错。我们很快需要检查我添加的样式。"'
- en: '"The modal seems to be looking good as well, and look at all these cats being
    generated as a stream!"'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '"模态看起来也不错，看看所有这些作为流生成的猫！"'
- en: '"Nice!" Mike and Shawn rejoiced.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '"太棒了！" 迈克和肖恩欢呼。'
- en: '![Model updates](img/4730_10_03.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![模型更新](img/4730_10_03.jpg)'
- en: Animate
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动画
- en: '"React allows us to animate objects easily with its react-addons-css-transition-group
    add-on."'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '"React 允许我们通过其 react-addons-css-transition-group 扩展插件轻松地动画化对象。"'
- en: '"This gives us a handle to the `ReactCSSTransitionGroup` object, which is what
    we will be using to animate changes in data, such as addition of cats, faving/unfaving,
    and so on."'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '"这为我们提供了对 `ReactCSSTransitionGroup` 对象的引用，这是我们用来动画化数据变化（如添加猫、点赞/取消点赞等）的。"'
- en: '"Let''s start by animating the addition of new cats to the stream, shall we?"'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '"让我们先从动画化新猫添加到流中开始，怎么样？"'
- en: '[PRE9]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '"Here, I changed our render method and simply wrapped the display of the collection
    of cats in a `ReactCSSTransitionGroup` element, like so."'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '"在这里，我更改了我们的渲染方法，并简单地用 `ReactCSSTransitionGroup` 元素包裹了猫集合的显示，如下所示。"'
- en: '[PRE10]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '"Let''s go through them one by one in the following:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '"让我们逐一在以下内容中查看它们："'
- en: '`transitionName`: This property is used to define the class name prefix used
    for the CSS classes applied for different events, such as element enter, leave,
    and so on.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`transitionName`：此属性用于定义应用于不同事件（如元素进入、离开等）的 CSS 类的前缀。'
- en: '`transitionEnterTimeout`: This is the timeout for an element to be displayed
    freshly after rendering.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`transitionEnterTimeout`：这是元素在渲染后新鲜显示的超时时间。'
- en: '`transitionLeaveTimeout`: This is similar to `transitionEnterTimeout`, but
    it is used when the element is removed from the page.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`transitionLeaveTimeout`：这与 `transitionEnterTimeout` 类似，但用于元素从页面移除时。'
- en: '`transitionAppear`: Sometimes, we want to animate the addition of the collection
    of elements, in our case cats, when they are first rendered. We can do this by
    setting this property to true.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`transitionAppear`：有时，我们想在元素首次渲染时动画化元素集合的添加，在我们的例子中是猫。我们可以通过将此属性设置为 `true`
    来实现这一点。'
- en: Note
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that the elements, which are added after the first elements are displayed,
    are applied the `transitionEnter` property.
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，在第一个元素显示之后添加的元素将应用 `transitionEnter` 属性。
- en: '`transitionAppearTimeout`: This is similar to the other timeout values, but
    for `transitionAppear`.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`transitionAppearTimeout`：这与其他超时值类似，但用于 `transitionAppear`。'
- en: '`transitionEnter`: This is, by default, set to `true`. It can be set to `false`
    if we don''t want to animate the element-enter transition.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`transitionEnter`：默认情况下，此属性设置为 `true`。如果我们不想动画化元素进入过渡，则可以将其设置为 `false`。'
- en: '`transitionLeave`: This is, by default, set to `true`. It can be set to `false`
    if we don''t want to animate the element-leave transition animation.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`transitionLeave`：默认情况下，此属性设置为 `true`。如果我们不想动画化元素离开过渡动画，则可以将其设置为 `false`。'
- en: '"Now, based on the transition and transition name, classes are applied to the
    elements within the `<ReactCSSTransitionGroup/>` component. For example, for enter
    transition, and our `cats` prefix, `cats-enter` would be applied to the elements."'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '"现在，基于过渡和过渡名称，类被应用到 `<ReactCSSTransitionGroup/>` 组件内的元素上。例如，对于进入过渡，以及我们的 `cats`
    前缀，`cats-enter` 将被应用到元素上。"'
- en: '"In the next cycle, `cats-enter-active` will be applied to the final class
    that the element should be in."'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '"在下一个周期中，`cats-enter-active` 将应用到元素应该处于的最终类。"'
- en: '"Got it."'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '"明白了。"'
- en: '"Let''s check all the different transitions that we can define based on this."'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '"让我们检查一下我们可以根据这个定义的所有不同过渡。"'
- en: '[PRE11]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '"The animation transitions are pretty simple here. When a new element is added
    in the beginning, to start with the six cats that we initialized with, the .cats-appear
    class is applied. In the next tick, the .`cats-appear-active` class is added to
    the element."'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '"这里的动画过渡相当简单。当在开始时添加新元素，从我们初始化的六只猫开始，将应用 .cats-appear 类。在下一次计时器滴答声后，将添加 .`cats-appear-active`
    类到元素上。"'
- en: '"Next, the classes are removed after a successful transition, as shown in the
    following screenshot:"'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '"接下来，在过渡成功后，类将被移除，如下面的截图所示："'
- en: '![Animate](img/4730_10_04.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![Animate](img/4730_10_04.jpg)'
- en: '"Shawn, if you can see, you will notice how the cats fade in and then show
    up in their end state in full opacity."'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '"肖恩，如果你能看到，你会注意到猫是如何淡入然后以全不透明度显示其最终状态的。"'
- en: '"Cool. That looks nice. A nice effect for when the new elements are added,
    as well."'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '"不错。看起来很棒。当新元素被添加时，这是一个很好的效果。"'
- en: '"True. Do you want to try animating the stars?"'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '"确实。你想尝试动画化星星吗？"'
- en: '"Sure!"'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '"当然！"'
- en: '"Let me first check the classes that we have for the stars. I can see that
    you have made use of the font-beautiful star and added style to them."'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '"让我首先检查一下我们为星星设置的类。我看到你已经使用了 font-beautiful 星星并为他们添加了样式。"'
- en: '[PRE12]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '"Yup, that''s it right there."'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '"是的，就在那里。"'
- en: '"First, let me handle fave and unfave on the stars."'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '"首先，让我处理星星的点赞和取消点赞功能。"'
- en: '[PRE13]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '"Change the element to add `data-cid` and `handler`, as follows:"'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '"将元素改为添加 `data-cid` 和 `handler`，如下所示："'
- en: '[PRE14]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '"Firstly, I am passing `faveUnfave` as the `onClick` event, which is bound
    to the class context here. Next, I am passing `cat.cid` value for `data-cid`"'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '"首先，我将 `faveUnfave` 作为 `onClick` 事件传递，这个事件在这里绑定到了类上下文中。接下来，我为 `data-cid` 传递了
    `cat.cid` 的值。"'
- en: '"In the `faveUnfave` method, I will then pull the cat ID for the faved element.
    Based on this, I will pull the cat object from the catGenerator''s cat collection.
    Later, I will toggle the state of the current fave value and reset the state of
    the collection."'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '"在 `faveUnfave` 方法中，我将拉取点赞元素的猫 ID。基于此，我将从猫生成器的猫集合中拉取猫对象。稍后，我将切换当前点赞值的状态并重置集合的状态。"'
- en: '"This looks good."'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '"看起来不错。"'
- en: '"Next, I will display either the faved or unfaved star, based on the current
    fave status and wrap this as a CSS transition so that we can start showing animation
    to display and hide the star, change the color, and so on."'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '"接下来，我将根据当前的点赞状态显示点赞或取消点赞的星星，并将其包装为 CSS 过渡，这样我们就可以开始显示显示和隐藏星星、更改颜色等动画。"'
- en: '[PRE15]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '"Perfect," followed Mike.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '"太完美了，”迈克接着说。'
- en: '"Now let''s add the styling for this fave."'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '"现在让我们为这个点赞添加样式。"'
- en: '[PRE16]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '"Here, I added animation such that, on clicking the star, it will scale up,
    similar to Twitter''s fave functionality. Then, it will scale back and remain
    in faved state."'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '"在这里，我添加了动画，当点击星星时，它会放大，类似于 Twitter 的点赞功能。然后，它会恢复缩放并保持在点赞状态。"'
- en: '"Similarly on unfave it will scale up and back to its original size."'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '"同样，在取消点赞时，它将放大并恢复到原始大小。"'
- en: '"Looks good, let''s check it out," followed Mike.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '"看起来不错，让我们检查一下，”迈克接着说。'
- en: '"Umm, I think all elements are here, but it doesn''t seem to be working, Mike?"'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '"嗯，我觉得所有元素都在这里，但它似乎不起作用，迈克？"'
- en: '"Let me see. Ah, so the culprit is this:"'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '"让我看看。啊，所以罪魁祸首是这个："'
- en: '[PRE17]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Note
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Notice the key value that we have used here? It's identical. The `TransitionGroup`
    keeps track of the changes to the elements and performs animation tasks based
    on key values. The `TransitionGroup` needs to know what has changed in the element
    in order to perform animation tasks and it also needs the key to identify the
    element.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们在这里使用的关键值？它是相同的。`TransitionGroup` 会跟踪元素的变化，并根据键值执行动画任务。`TransitionGroup`
    需要知道元素中发生了什么变化，以便执行动画任务，它还需要键来识别元素。
- en: '"In the case here, the key will remain `cat.cid` in case of fave or unfave,
    and therefore the element stays the same."'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '"在这种情况下，点赞或取消点赞时，键将保持为 `cat.cid`，因此元素保持不变。"'
- en: '"Let''s add a suffix or prefix to the key, along with the fave status."'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '"让我们给键添加一个后缀或前缀，以及点赞状态。"'
- en: '[PRE18]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '"Perfect. It works now, Mike."'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '"太完美了。现在它工作了，迈克。"'
- en: '"Yup. Nice work on the CSS animation, Shawn. The star looks good. Let''s see
    how it looks now."'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '"是的。肖恩，你在 CSS 动画方面做得很好。星星看起来不错。让我们看看现在是什么样子。"'
- en: '"Here''s how it looks when we fave a cat:"'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '"这就是我们给猫点赞时的样子："'
- en: '![Animate](img/4730_10_05.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![动画](img/4730_10_05.jpg)'
- en: '"This one is after the fave transition is complete."'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '"这个是在点赞过渡完成后。"'
- en: '![Animate](img/4730_10_06.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![动画](img/4730_10_06.jpg)'
- en: '"Finally, the same animation takes place when we try to unfave the cat."'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '"最后，当我们尝试取消点赞猫时，也会发生相同的动画。"'
- en: '![Animate](img/4730_10_07.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![动画](img/4730_10_07.jpg)'
- en: '"Perfect, Carla will love this!"'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '"太完美了，卡拉会喜欢的！"'
- en: It had been a fun day at Adequate LLC. Shawn and Mike worked on refactoring
    their app in order to allow data changes to reflect the view changes and animating
    the cats being added and removed. They also worked on how stars were faved/unfaved.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Adequate LLC 度过了一个愉快的一天。肖恩和迈克致力于重构他们的应用程序，以便数据更改能够反映视图更改，并对添加和删除的猫进行动画处理。他们还研究了如何点赞/取消点赞星星。
- en: Summary
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we worked around changing the data flow and passing data directly
    from react-router links. We took a look at animating a collection of objects being
    added/removed or as they appear. We saw different transition events supported
    by `ReactCSSTransitionGroup` and how to use relevant classes to animate our objects.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们围绕改变数据流和直接从 react-router 链接传递数据进行了操作。我们查看了对添加/删除或出现的对象集合进行动画处理。我们看到了
    `ReactCSSTransitionGroup` 支持的不同过渡事件以及如何使用相关类来动画化我们的对象。
- en: In the next chapter, we will learn how to test our app using Jest and React
    TestUtils.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何使用 Jest 和 React TestUtils 测试我们的应用程序。
