- en: 'Chapter 4: Error Handling, Authentication, and Route Protection'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章：错误处理、认证和路由保护
- en: We need to implement error handling and security measures in our interfaces
    to ensure that the quality and user experience of the application is good.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在我们的接口中实现错误处理和安全措施，以确保应用程序的质量和用户体验良好。
- en: In this chapter, we'll modify the login page created in [*Chapter 1*](B18503_01_Final_JM_ePub.xhtml#_idTextAnchor014),
    *Environment Setup and Introduction to UmiJS* and configure the default HTML template
    for our application. You'll learn how to store and globally access data by configuring
    your application's initial state. Next, you'll learn how to block unauthorized
    access using the Umi `plugin-access`. Finally, you'll learn how to handle HTTP
    error responses and display feedback messages by configuring Umi requests.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将修改在 [*第 1 章*](B18503_01_Final_JM_ePub.xhtml#_idTextAnchor014) 中创建的登录页面，即
    *环境设置和 UmiJS 简介*，并配置我们应用程序的默认 HTML 模板。你将学会如何通过配置应用程序的初始状态来存储和全局访问数据。接下来，你将学会如何使用
    Umi 的 `plugin-access` 来阻止未经授权的访问。最后，你将学会通过配置 Umi 请求来处理 HTTP 错误响应并显示反馈消息。
- en: 'In this chapter, we''ll cover the following main topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Modifying the login page and defining the HTML template
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改登录页面和定义 HTML 模板
- en: Storing and globally accessing user information
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储和全局访问用户信息
- en: Protecting application routes based on user roles
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据用户角色保护应用程序路由
- en: Handling HTTP error responses
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理 HTTP 错误响应
- en: By the end of this chapter, you'll have learned how to configure and use `plugin-initial-state`
    to store and access information globally in your application. You'll also have
    learned how to configure and use `plugin-access` to protect routes. Finally, you'll
    have learned how to handle HTTP error responses by configuring the umi-request
    library.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将学会如何配置和使用 `plugin-initial-state` 来在应用程序中全局存储和访问信息。你还将学会如何配置和使用 `plugin-access`
    来保护路由。最后，你将学会通过配置 umi-request 库来处理 HTTP 错误响应。
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To complete this chapter's exercises, you only need a computer with any OS (I
    recommend Ubuntu 20.04 or higher) and the software installed in [*Chapter 1*](B18503_01_Final_JM_ePub.xhtml#_idTextAnchor014),
    *Environment Setup and Introduction to UmiJS* (VS Code, Node.js, and Yarn).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成本章的练习，你只需要一台装有任何操作系统（我推荐 Ubuntu 20.04 或更高版本）的计算机，以及 [*第 1 章*](B18503_01_Final_JM_ePub.xhtml#_idTextAnchor014)
    中安装的软件（VS Code、Node.js 和 Yarn）。
- en: You can find the complete project of this chapter in the `Chapter04` folder
    in the GitHub repository available at [https://github.com/PacktPublishing/Enterprise-React-Development-with-UmiJs](https://github.com/PacktPublishing/Enterprise-React-Development-with-UmiJs).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 GitHub 仓库中找到本章的完整项目，该仓库位于 [https://github.com/PacktPublishing/Enterprise-React-Development-with-UmiJs](https://github.com/PacktPublishing/Enterprise-React-Development-with-UmiJs)
    的 `Chapter04` 文件夹中。
- en: Modifying the login page and defining the HTML template
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改登录页面和定义 HTML 模板
- en: In this section, we'll create a Umi mock file and requests to simulate user
    authentication, a login page for users to log in, and we'll configure the default
    HTML template for our application.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将创建一个 Umi 模拟文件和请求来模拟用户认证、用户登录页面，并配置我们应用程序的默认 HTML 模板。
- en: 'Let''s start with the mock file. We''ll create endpoints for login, logout,
    and getting user information. Follow these steps to create the file:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从模拟文件开始。我们将创建登录、登出和获取用户信息的端点。按照以下步骤创建文件：
- en: 'Create a new file named `user.ts` in the `mock` folder. Next, create the `login`
    function as follows:'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `mock` 文件夹中创建一个名为 `user.ts` 的新文件。接下来，创建 `login` 函数如下：
- en: '[PRE0]'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Add the following `if` statement to the `login` function:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下 `if` 语句添加到 `login` 函数中：
- en: '[PRE1]'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here, we defined a condition that allows the mock user John Doe, the inside
    sales representative, to access the application. The user role will determine
    what actions the user can execute and which pages they can access.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们定义了一个条件，允许内部销售代表 John Doe（模拟用户）访问应用程序。用户角色将决定用户可以执行哪些操作以及他们可以访问哪些页面。
- en: 'Next, add the following `else if` and `else` statements to the `login` function:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将以下 `else if` 和 `else` 语句添加到 `login` 函数中：
- en: '[PRE2]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Here, we defined a condition that allows the mock user Mary Doe, the sales manager,
    to access the application. We also determined that if the user is not John Doe
    or Marry Doe, the mock API will return an HTTP 401 error, the status code for
    not authenticated.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们定义了一个条件，允许模拟用户Mary Doe，销售经理访问应用程序。我们还确定，如果用户不是John Doe或Marry Doe，模拟API将返回HTTP
    401错误，这是未认证的状态码。
- en: 'Finally, add the other functions and the endpoint route definitions to the
    `user.ts` file as follows:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，按照以下方式将其他功能和端点路由定义添加到`user.ts`文件中：
- en: '[PRE3]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We created the functions to simulate logout and get the logged-in user's information.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了模拟登出和获取已登录用户信息的函数。
- en: 'Now, we need to create requests in the `services` folder to get user info,
    login, and log out of the application. Follow these steps to create the requests:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要在`services`文件夹中创建获取用户信息、登录和登出应用程序的请求。按照以下步骤创建请求：
- en: Create a new file named `user.ts` in the `services` folder under the `src` folder.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src`文件夹下的`services`文件夹中创建一个名为`user.ts`的新文件。
- en: 'Add the following requests to the `user.ts` file:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下请求添加到`user.ts`文件中：
- en: '[PRE4]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We created the requests to access the endpoints defined in the `user.ts` mock
    file.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了请求来访问在`user.ts`模拟文件中定义的端点。
- en: We created a Umi mock file for simulating the user service and the requests
    to the backend. Now, we'll create a login page for users to input their email
    and password and authenticate in the application.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个Umi模拟文件来模拟用户服务和后端请求。现在，我们将创建一个登录页面，用户可以输入他们的电子邮件和密码并在应用程序中进行身份验证。
- en: Modifying the login page
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修改登录页面
- en: 'We need a login page for users to log in using their email and password. We
    have already created a login page using Umi UI in [*Chapter 1*](B18503_01_Final_JM_ePub.xhtml#_idTextAnchor014),
    *Environment Setup and Introduction to UmiJS*, so we only need to adapt the page
    components. Follow these steps to adjust the login page to match our theme:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一个登录页面，用户可以使用他们的电子邮件和密码登录。我们已经在[*第一章*](B18503_01_Final_JM_ePub.xhtml#_idTextAnchor014)，*环境设置和UmiJS简介*中使用了Umi
    UI创建了一个登录页面，所以我们只需要调整页面组件。按照以下步骤调整登录页面以匹配我们的主题：
- en: 'Refactor the `index.tsx` file in the `pages/Login` folder as follows:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式重构`pages/Login`文件夹中的`index.tsx`文件：
- en: '[PRE5]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We created a page header to display our application's logo and the language
    selector.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个页面页眉来显示我们的应用程序标志和语言选择器。
- en: 'Now, add the CSS classes to style the title, the language selector, and the
    login form container in the `index.less` file as follows:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，按照以下方式在`index.less`文件中添加CSS类来设置标题、语言选择器和登录表单容器的样式：
- en: '[PRE6]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Next, add the CSS class to style the header and logo in the `index.less` file
    as follows:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，按照以下方式在`index.less`文件中添加CSS类来设置页眉和标志的样式：
- en: '[PRE7]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Let''s also make some changes to the `LoginForm` component styles. Refactor
    the `index.less` file in the `LoginForm` folder as follows:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们也在`LoginForm`组件样式中做一些更改。按照以下方式重构`LoginForm`文件夹中的`index.less`文件：
- en: '[PRE8]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We modified the form's `width` and `margin` and defined `width` as `100%` on
    small screens using the `@screen-sm` breakpoint from the default Ant Design variables.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们修改了表单的`width`和`margin`，并在小屏幕上使用默认Ant Design变量的`@screen-sm`断点将`width`定义为`100%`。
- en: 'These are all the changes we need on the login page. The result should look
    like the following:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这些都是在登录页面上的所有更改。结果应该看起来像以下这样：
- en: '![Figure 4.1 – Login page with the theme applied'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.1 – 应用主题的登录页面](img/Figure_4.01_B18503.jpg)'
- en: '](img/Figure_4.01_B18503.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.1 – 应用主题的登录页面](img/Figure_4.01_B18503.jpg)'
- en: Figure 4.1 – Login page with the theme applied
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.1 – 应用主题的登录页面
- en: If you access our application on a mobile device, you will notice that it doesn't
    seem right, although we have developed a fully responsive login page. We'll learn
    how to solve this problem by defining the application's default template.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用移动设备访问我们的应用程序，你会注意到它似乎不太对劲，尽管我们已经开发了一个完全响应式的登录页面。我们将通过定义应用程序的默认模板来学习如何解决这个问题。
- en: Defining the default HTML template
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义默认HTML模板
- en: If you are familiar with developing responsive websites, you'll know that the
    problem with our application pages is the **viewport** scale on mobile devices.
    We need to provide an HTML meta tag with the correct viewport attributes on each
    application page to solve the problem. As you already know, our application is
    a **single-page application** (**SPA**), so we only need to modify one HTML document.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你熟悉开发响应式网站，你会知道我们应用程序页面的问题是移动设备上的`viewport`缩放。我们需要在每个应用程序页面上提供一个带有正确viewport属性的HTML
    meta标签来解决此问题。正如你所知道的那样，我们的应用程序是一个**单页应用程序**（**SPA**），所以我们只需要修改一个HTML文档。
- en: Umi provides an option to customize the default HTML template for our application,
    which is the `document.ejs` file. If a file named `document.ejs` exists in the
    `src/pages` folder, Umi will use it as the default HTML document.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Umi为我们提供了自定义应用程序默认HTML模板的选项，即`document.ejs`文件。如果`src/pages`文件夹中存在名为`document.ejs`的文件，Umi将使用它作为默认HTML文档。
- en: 'You can also access the application configuration in the `document.ejs` file
    using the `context.config` variable. Consider the following example:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以在`document.ejs`文件中使用`context.config`变量访问应用程序配置。以下是一个示例：
- en: '[PRE9]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In this example, we defined the content of the HTML title tag as the `layout.title`
    configuration present in the `config/config.ts` file.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，我们将HTML标题标签的内容定义为`config/config.ts`文件中存在的`layout.title`配置。
- en: Let's create the default HTML template for our application.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为我们的应用程序创建默认的HTML模板。
- en: 'Create a new file named `document.ejs` in the `src/pages` folder, and create
    the template as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在`src/pages`文件夹中创建一个名为`document.ejs`的新文件，并创建模板，如下所示：
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We set the viewport scale to `1.0` and the content width to the same device
    screen width.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将视口缩放设置为`1.0`并将内容宽度设置为与设备屏幕宽度相同。
- en: 'The following screenshot shows the difference between the login page with the
    viewport meta tag on a mobile device and without it:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了在移动设备上带有视口meta标签的登录页面和没有视口meta标签的登录页面之间的差异：
- en: '![Figure 4.2 – Login page without viewport scale (left side) and with viewport
    scale (right side)'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.2 – 没有视口缩放的登录页面（左侧）和有视口缩放的登录页面（右侧）]'
- en: '](img/Figure_4.02_B18503.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.02_B18503.jpg)'
- en: Figure 4.2 – Login page without viewport scale (left side) and with viewport
    scale (right side)
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.2 – 没有视口缩放的登录页面（左侧）和有视口缩放的登录页面（右侧）
- en: In this section, we created a Umi mock file and requests to simulate the user
    authentication. We also modified the login page and defined the viewport scale
    to correctly display the application's pages on mobile devices by creating the
    default HTML template for our application.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们创建了一个Umi模拟文件和请求来模拟用户认证。我们还修改了登录页面，并定义了视口缩放，通过创建应用程序的默认HTML模板来正确显示移动设备上的应用程序页面。
- en: In the next section, we'll learn how to store and globally access user information
    after the users log in.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习如何在用户登录后存储和全局访问用户信息。
- en: Storing and globally accessing user information
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 存储和全局访问用户信息
- en: In this section, we'll configure the `plugin-initial-state` plugin to store
    and globally access user information.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将配置`plugin-initial-state`插件来存储和全局访问用户信息。
- en: To configure the initial state, we only need to create a function named `getInitialState`
    in the `app.tsx` file. The `getInitialState` function will be executed before
    React renders the entire application, and its return value will be used as the
    global state. We can use the `@@initialState` model to access the values.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 要配置初始状态，我们只需要在`app.tsx`文件中创建一个名为`getInitialState`的函数。`getInitialState`函数将在React渲染整个应用程序之前执行，其返回值将用作全局状态。我们可以使用`@@initialState`模型来访问这些值。
- en: 'Let''s configure the initial state by following these steps:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按照以下步骤配置初始状态：
- en: 'Create a new file called `globalState.d.ts` in the `types` folder, and create
    the `GlobalState` interface as follows:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src`文件夹中创建一个名为`globalState.d.ts`的新文件，并创建`GlobalState`接口，如下所示：
- en: '[PRE11]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Create the `getInitialState` function in the `app.tsx` file located in the
    `src` folder as follows:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src`文件夹中的`app.tsx`文件中创建`getInitialState`函数，如下所示：
- en: '[PRE12]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In the preceding code block, we created functions to log in, log out, fetch
    user data, and return it as the initial state value.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码块中，我们创建了登录、注销、获取用户数据并将其作为初始状态值返回的函数。
- en: Now, we can access the user information by reading the `currentUser` property.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以通过读取`currentUser`属性来访问用户信息。
- en: 'Next, let''s read the initial state in the layout header by following these
    steps:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们按照以下步骤在布局标题中读取初始状态：
- en: 'In the `index.tsx` file, under the `src/components` folder, read the initial
    state on the `HeaderMenu` component as follows:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/components`文件夹下的`index.tsx`文件中，按照以下步骤读取`HeaderMenu`组件的初始状态：
- en: '[PRE13]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We created the `userLogout` function to log out and set the `currentUser` state
    to `undefined`.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了`userLogout`函数来注销并将`currentUser`状态设置为`undefined`。
- en: 'Now, in the `Menu` component, add the `onClick` event to execute the `userLogout`
    function when users click on the logout menu item as follows:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在`Menu`组件中，添加`onClick`事件，当用户点击注销菜单项时执行`userLogout`函数，如下所示：
- en: '[PRE14]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Finally, add the user''s name below the `Avatar` component as follows:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在`Avatar`组件下方添加用户的姓名，如下所示：
- en: '[PRE15]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Next, let''s read the user information on the home page by following these
    steps:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们按照以下步骤在主页上读取用户信息：
- en: 'In the `index.tsx` file under the `pages/Home` folder, read the initial state
    as follows:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`pages/Home`文件夹下的`index.tsx`文件中，按照以下方式读取初始状态：
- en: '[PRE16]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Next, add the user''s name, role, and company as follows:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，按照以下步骤添加用户的姓名、角色和公司：
- en: '[PRE17]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We also need to execute the `login` function on the login page. Follow these
    steps to develop the login flow:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要在登录页面上执行`login`函数。按照以下步骤来开发登录流程：
- en: 'Add the following function to the `index.tsx` file in the `pages/Login/LoginForm`
    folder:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下函数添加到`pages/Login/LoginForm`文件夹中的`index.tsx`文件：
- en: '[PRE18]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: When the user sends the login form, we execute the `login` function, and if
    the login is successful, we save the user information on the initial state.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户提交登录表单时，我们执行`login`函数，如果登录成功，我们将用户信息保存到初始状态。
- en: 'Now, add the following React effect to the `index.tsx` file in the `pages/Login`
    folder:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将以下React效果添加到`pages/Login`文件夹中的`index.tsx`文件：
- en: '[PRE19]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Here, we defined that when the `currentUser` state changes, we redirect the
    user to the home page if the login succeeds.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们定义了当`currentUser`状态改变时，如果登录成功，则将用户重定向到主页。
- en: When users log in to the application, we redirect them to the home page, but
    we need to turn users back to the login page when they log out and no longer have
    access to other pages. We can set this behavior by reading the initial state in
    the layout runtime configuration.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户登录应用程序时，我们将他们重定向到主页，但当他们注销且不再有权访问其他页面时，我们需要将用户转回到登录页面。我们可以通过在布局运行时配置中读取初始状态来设置这种行为。
- en: 'Add the following lines to the `onPageChange` function in the `layout` configuration
    in the `app.tsx` file:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下行添加到`app.tsx`文件中的`layout`配置的`onPageChange`函数：
- en: '[PRE20]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Here, we defined redirecting the user to the login page if the user is not logged
    in and the current page is not the login page.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们定义了如果用户未登录且当前页面不是登录页面，则将用户重定向到登录页面的逻辑。
- en: In this section, we configured our application's initial state, read the user
    information on the home page and in the `MenuHeader` component, and set the login
    flow by adding some lines to the layout configuration and the login page.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们配置了应用程序的初始状态，在主页和`MenuHeader`组件中读取用户信息，并通过在布局配置和登录页面中添加一些行来设置登录流程。
- en: In the next section, we'll learn how to use `plugin-access` to block unauthorized
    access.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习如何使用`plugin-access`来阻止未授权访问。
- en: Protecting application routes based on user roles
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 根据用户角色保护应用程序路由
- en: In this section, we'll configure the Umi `plugin-access` plugin to define user
    permissions and protect routes and features from unauthorized access.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将配置Umi的`plugin-access`插件来定义用户权限并保护路由和功能免受未授权访问。
- en: 'To configure the access plugin, we must create an `access.ts` file in the `src`
    folder. The `access.ts` file must export a function that returns an object, and
    each property of that object must be a Boolean value representing permissions.
    Consider the following example:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 要配置访问插件，我们必须在`src`文件夹中创建一个`access.ts`文件。`access.ts`文件必须导出一个返回对象的函数，并且该对象的每个属性都必须是一个表示权限的布尔值。考虑以下示例：
- en: '[PRE21]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'In this example, we read the `access` property from the initial state and returned
    the `readOnly: true` permission if `access` is equal to `basic`.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '在这个例子中，我们从初始状态中读取`access`属性，如果`access`等于`basic`，则返回`readOnly: true`权限。'
- en: Let's create an `access.ts` file for our application.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为我们的应用程序创建一个`access.ts`文件。
- en: 'Create a new file called `access.ts` in the `src` folder and create the `default`
    function as follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在`src`文件夹中创建一个名为`access.ts`的新文件，并创建如下所示的`default`函数：
- en: '[PRE22]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: In the preceding code block, we defined the users with `role id` equal to `0`
    (sales manager) as the application administrators.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码块中，我们定义了`role id`等于`0`（销售经理）的用户作为应用程序管理员。
- en: 'Now, to demonstrate how to use the `canAdmin` permission, let''s create a new
    page that only administrators can access by following these steps:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了演示如何使用`canAdmin`权限，让我们按照以下步骤创建一个只有管理员可以访问的新页面：
- en: 'Create a new page in the `pages` folder by running the following command:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下命令在`pages`文件夹中创建一个新页面：
- en: '[PRE23]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'In the `index.tsx` file, add the `ProTable` component as follows:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`index.tsx`文件中，按照以下方式添加`ProTable`组件：
- en: '[PRE24]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: We created a simple `ProTable` component to list workflow configurations.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个简单的`ProTable`组件来列出工作流程配置。
- en: 'Next, add the data source to fill `ProTable` as follows:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，按照以下步骤添加数据源以填充`ProTable`：
- en: '[PRE25]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'In the `pages/Workflow` folder, create a new file called `columns.tsx` and
    add the column definitions as follows:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`pages/Workflow`文件夹中，创建一个名为`columns.tsx`的新文件，并添加以下列定义：
- en: '[PRE26]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Add the following text to the `en-US.ts` file in the `locales` folder:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下文本添加到`locales`文件夹中的`en-US.ts`文件：
- en: '[PRE27]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Now, add the route configuration to the workflow page to the `routes.ts` file
    as follows:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将工作流程页面的路由配置添加到`routes.ts`文件中，如下所示：
- en: '[PRE28]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Notice the `access` property in the route configuration. In the `access` property,
    we can set the permissions defined in the `access.ts` file. Now, only users with
    the sales manager role can access the workflow page.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 注意路由配置中的`access`属性。在`access`属性中，我们可以设置在`access.ts`文件中定义的权限。现在，只有具有销售经理角色的用户才能访问工作流程页面。
- en: 'We can also define in the layout configuration a default page to display when
    users don''t have sufficient permissions to access a page. Add the following definition
    to the layout configuration in the `app.tsx` file:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们也可以在布局配置中定义一个默认页面，当用户没有足够的权限访问页面时显示。将以下定义添加到`app.tsx`文件中的布局配置中：
- en: '[PRE29]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'We added the `Result` component from Ant Design to display the unauthorized
    error page and a button so users can go back to the home page. Here''s how the
    page will look:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加了Ant Design的`Result`组件来显示未授权错误页面和按钮，以便用户可以返回主页。以下是页面的外观：
- en: '![Figure 4.3 – Unauthorized error page'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 4.3 – Unauthorized error page'
- en: '](img/Figure_4.03_B18503.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.03_B18503.jpg)'
- en: Figure 4.3 – Unauthorized error page
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.3 – 未授权错误页面
- en: We have now created the `access.ts` file and used the `canAdmin` permission
    to protect the workflow page. Next, we'll learn how to use permissions to protect
    other application features.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了`access.ts`文件，并使用`canAdmin`权限保护工作流程页面。接下来，我们将学习如何使用权限来保护其他应用程序功能。
- en: Using the useAccess hook
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用`useAccess`钩子
- en: 'We can use the permissions we created in the `access.ts` file to authorize
    users to execute any actions in our application using the `useAccess` hook and
    the `Access` component. Consider the following example:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用在`access.ts`文件中创建的权限，通过使用`useAccess`钩子和`Access`组件来授权用户在我们的应用程序中执行任何操作。考虑以下示例：
- en: '[PRE30]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: In this example, we read the `readOnly` permission to define whether the **Edit**
    button will be disabled.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，我们读取`readOnly`权限来定义**编辑**按钮是否将被禁用。
- en: 'Now, consider another example using the `Access` component:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，考虑另一个使用`Access`组件的示例：
- en: '[PRE31]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: In this example, we'll render the content in the `fallback` property if the
    user doesn't have the `readAndWrite` permission instead of rendering the `TextArea`
    component.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，如果用户没有`readAndWrite`权限，我们将渲染`fallback`属性中的内容，而不是渲染`TextArea`组件。
- en: 'Let''s use the `useAccess` hook to allow administrators to assign an opportunity
    to an inside sales representative by following these steps:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用`useAccess`钩子，按照以下步骤允许管理员将机会分配给内部销售代表：
- en: 'Add the following line to the `index.tsx` file in the `pages/Opportunities`
    folder to read the `canAdmin` permission:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`pages/Opportunities`文件夹中的`index.tsx`文件中添加以下行以读取`canAdmin`权限：
- en: '[PRE32]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Next, add the following properties to the `ProTable` component:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将以下属性添加到`ProTable`组件中：
- en: '[PRE33]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: We defined that only if the user has the `canAdmin` permission, we'll apply
    the `onChange` event, enabling the `ProTable` row selection.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义了只有当用户拥有`canAdmin`权限时，我们才会应用`onChange`事件，启用`ProTable`行选择。
- en: 'Now, if the user is an administrator, they can assign an opportunity as shown
    in the following screenshot:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果用户是管理员，他们可以像以下截图所示分配机会：
- en: '![Figure 4.4 – Assign opportunity feature'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 4.4 – Assign opportunity feature'
- en: '](img/Figure_4.04_B18503.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.04_B18503.jpg)'
- en: Figure 4.4 – Assign opportunity feature
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.4 – 分配机会功能
- en: In this section, we created the `access.ts` file and defined the administrator
    permissions based on the user role. Then, we used the `canAdmin` permission to
    block unauthorized access to the workflow page and the row selection feature.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们创建了`access.ts`文件，并基于用户角色定义了管理员权限。然后，我们使用`canAdmin`权限阻止对工作流程页面和行选择功能的未授权访问。
- en: In the next section, you'll learn how to handle HTTP error responses by configuring
    the umi-request library.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，你将学习如何通过配置`umi-request`库来处理HTTP错误响应。
- en: Handling HTTP error responses
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理HTTP错误响应
- en: In this section, we'll configure the umi-request library to handle error responses
    and display visual feedback.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将配置`umi-request`库以处理错误响应并显示视觉反馈。
- en: We'll use the `errorHandler` function, one of the many umi-request library configurations.
    I recommend you read the documentation available at [https://github.com/umijs/umi-request](https://github.com/umijs/umi-request)
    to learn more about other features.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`errorHandler`函数，这是umi-request库的许多配置之一。我建议你阅读在[https://github.com/umijs/umi-request](https://github.com/umijs/umi-request)上可用的文档，以了解更多其他功能。
- en: The umi-request library will trigger the `errorHandler` function every time
    it receives an HTTP error response, and we will read the response status and show
    a message to inform the user why the action they tried to execute failed.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 每当umi-request库接收到HTTP错误响应时，它将触发`errorHandler`函数，我们将读取响应状态并向用户显示消息，告知他们他们尝试执行的操作为何失败。
- en: 'Follow these steps to configure the umi-request library:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤配置umi-request库：
- en: 'In the `app.tsx` file, create a new function and add the `request` configuration
    as follows:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app.tsx`文件中，创建一个新函数并添加以下`request`配置：
- en: '[PRE34]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: We used the `getLocale()` function from Umi to define in what language we'll
    display the messages. Next, we displayed an error message based on the response
    status or empty response and exported the request configuration with the `errorHandler`
    function.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了Umi的`getLocale()`函数来定义我们将以何种语言显示消息。接下来，我们根据响应状态或空响应显示错误消息，并使用`errorHandler`函数导出请求配置。
- en: 'Next, we need to define the messages. In the `src/locales` folder, under the
    `en-US` folder, create a new file called `http.ts` and add the following messages:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要定义消息。在`src/locales`文件夹下的`en-US`文件夹中，创建一个名为`http.ts`的新文件，并添加以下消息：
- en: '[PRE35]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: You also need to download the Portuguese version of the `http.ts` file available
    in the GitHub repository of this book and place it in the `locales/pt-BR` folder.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要下载本书GitHub仓库中可用的`http.ts`文件的葡萄牙语版本，并将其放置在`locales/pt-BR`文件夹中。
- en: 'Now, import the `http.ts` file from the `en-US` and `pt-BR` folders in the
    `app.ts` file as follows:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，按照以下方式在`app.ts`文件中导入`en-US`和`pt-BR`文件夹中的`http.ts`文件：
- en: '[PRE36]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'When the Umi request receives an HTTP error response, the user will see a message
    as shown in the following screenshot:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 当Umi请求接收到HTTP错误响应时，用户将看到如下截图所示的消息：
- en: '![Figure 4.5 – Feedback message on failed request'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.5 – 失败请求的反馈消息'
- en: '](img/Figure_4.05_B18503.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_4.05_B18503.jpg]'
- en: Figure 4.5 – Feedback message on failed request
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.5 – 失败请求的反馈消息
- en: In this section, we configured the umi-request library to handle HTTP error
    responses and display a feedback message to inform the user what happened.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们配置了umi-request库来处理HTTP错误响应，并向用户显示反馈消息以告知发生了什么。
- en: Summary
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we created the login page and the `document.ejs` file, and
    learned how to set the viewport scale to display our pages on mobile devices correctly.
    You learned how to store and globally access data by configuring the initial state
    plugin and reading the initial state properties on the login and home page.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们创建了登录页面和`document.ejs`文件，并学习了如何设置视口缩放以正确显示我们的移动设备页面。你学习了如何通过配置初始状态插件和读取登录和主页上的初始状态属性来存储和全局访问数据。
- en: We created user permissions by configuring the access plugin and created the
    workflow page on which we blocked unauthorized access using the access plugin.
    We enabled the `ProTable` row selection feature only for authorized users using
    the access plugin.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过配置访问插件创建了用户权限，并在使用访问插件创建的工作流程页面上阻止了未经授权的访问。我们仅通过访问插件为授权用户启用了`ProTable`行选择功能。
- en: Finally, we configured the umi-request library to handle HTTP error responses
    and display feedback messages to inform users what happened.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们配置了umi-request库来处理HTTP错误响应，并向用户显示反馈消息以告知发生了什么。
- en: In the next chapter, you'll learn about code style, formatting, and how to improve
    your code using **linters** and formatting tools.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习关于代码风格、格式化以及如何使用**linters**和格式化工具来改进你的代码。
