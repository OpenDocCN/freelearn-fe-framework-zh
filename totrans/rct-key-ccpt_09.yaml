- en: '9'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Handling User Input & Forms with Form Actions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Learning Objectives
  prefs: []
  type: TYPE_NORMAL
- en: 'By the end of this chapter, you will be able to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Describe the purpose of React form actions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build and use custom form actions to handle form submissions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the `useActionState()` Hook to manage form-dependent state
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Render a pending UI during submission via the `useFormStatus()` Hook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Perform optimistic state updates with the `useOptimistic()` Hook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implement both synchronous and asynchronous actions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In *Chapter 4* , *Working with Events and State* , you learned how to handle
    form submissions in React applications. And while there is absolutely nothing
    wrong with the approach shown there—indeed, it’s arguably the approach you’ll
    find in the majority of React projects—React provides an alternative way of handling
    form submissions when working in projects that use React version 19 or later.
    React 19 introduced a new feature called **actions** (also referred to as **form**
    **actions** throughout this chapter) that can simplify the process of handling
    form submissions, extracting user input, and providing validation feedback.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will first revisit form submissions as introduced in *Chapter 4*
    and explore how user input can be extracted and validated. Thereafter, this chapter
    will introduce form actions and explain how to perform the same steps (handle
    submission, extract values, and validate values) using that feature. You will
    also learn about action-related React Hooks like `useActionState()` .
  prefs: []
  type: TYPE_NORMAL
- en: Handling Form Submissions without Actions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you learned in *Chapter 4* , *Working with Events and State* , when not using
    actions, you can handle form submissions by listening to the `submit` event via
    the `onSubmit` prop on the `<form>` element.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following example code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You find the full working example on GitHub: [https://github.com/mschwarzmueller/book-react-key-concepts-e2/tree/09-form-actions/examples/01-form-submission-without-actions](https://github.com/mschwarzmueller/book-react-key-concepts-e2/tree/09-form-actions/examples/01-form-submission-without-actions)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: This code displays a form and handles its submission via the `handleSubmit()`
    function. This function automatically receives an `event` object, which is used
    to prevent the browser’s default behavior of sending an HTTP request to the server
    hosting the website.
  prefs: []
  type: TYPE_NORMAL
- en: But, of course, just handling the submission isn’t too useful. Typically, you
    also want to extract and use values entered by the website user.
  prefs: []
  type: TYPE_NORMAL
- en: Extracting User Input
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When it comes to extracting values entered into a form, you have a couple of
    options:'
  prefs: []
  type: TYPE_NORMAL
- en: Track the values via state (i.e., by using `useState()` ), as described in *Chapter
    4* .
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rely on Refs via `useRef()` , as explained in *Chapter 7* , *Portals and Refs*
    .
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Take advantage of the automatically created `event` object.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tracking State
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can track the values entered by the user via state managed by `useState()`
    , as explained in *Chapter 4* . For example, the form input values from the previous
    code snippet can be tracked and used in `handleSubmit()` , as shown in the following
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In this updated example code snippet, the `useState()` Hook is used to manage
    `email` and `password` state values. The state values are updated with every keystroke
    on the input fields. As a result, the latest entered values are available inside
    of `handleSubmit()` when the form is submitted.
  prefs: []
  type: TYPE_NORMAL
- en: 'This approach works well and will be found in many React projects. However,
    there are some potential downsides to using state to track input values:'
  prefs: []
  type: TYPE_NORMAL
- en: Since the state is updated on every keystroke, and the component function is
    re-executed whenever some state value changes, application performance could suffer.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When working with more complex forms with more input fields, a lot of different
    state values may need to be managed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can work around these issues by implementing code optimizations, which will
    be discussed in *Chapter 10* , *Behind the Scenes of React and Optimization Opportunities*
    , and by managing state as an object, as explained in *Chapter 11* , *Working
    with Complex State* .
  prefs: []
  type: TYPE_NORMAL
- en: But you could also consider using Refs to extract input values.
  prefs: []
  type: TYPE_NORMAL
- en: Relying on Refs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you’re building a form where you don’t plan on setting input values, and
    where you instead only want to read those values upon form submission, using React’s
    ref feature (introduced in *Chapter 7* ) might make sense:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In this code block, the `useRef()` Hook is used to create two Refs that are
    connected to the email and password input fields. These Refs are then used to
    read the entered values inside of `handleSubmit()` .
  prefs: []
  type: TYPE_NORMAL
- en: When using this approach, the `App` component function is not executed with
    every keystroke anymore. But you still have to write the code where the Refs are
    created via `useRef()` and where they are connected to the JSX elements via the
    `ref` prop.
  prefs: []
  type: TYPE_NORMAL
- en: That’s why you could consider relying on the browser and the automatically created
    `event` object (which is received in `handleSubmit()` ), instead of using React
    features to extract those entered values.
  prefs: []
  type: TYPE_NORMAL
- en: Taking Advantage of the event Object
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In *Chapter 4* , *Working with Events and State* , you learned that the browser
    tries to send an HTTP request when a form is submitted. That’s why `event.preventDefault()`
    is called inside of `handleSubmit()` —this function call ensures that this request
    is not sent.
  prefs: []
  type: TYPE_NORMAL
- en: However, the `event` object is not just useful for preventing that default.
    It also carries important information about the `submit` event that occurred.
    For example, you can get access to the underlying form DOM object (i.e., a JavaScript
    object that describes the rendered `<form>` element, its configuration, and its
    current status) via `event.currentTarget` .
  prefs: []
  type: TYPE_NORMAL
- en: This is very useful because you can pass that form DOM object to the `FormData`
    constructor function that is provided by the browser. This interface can be used
    to extract a form’s input field values.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example shows the concrete usage of this feature:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: As you can see in the above code snippet, the form data object `fd` is constructed
    by instantiating `FormData` . As mentioned, the `FormData` interface is provided
    by the browser; hence, it doesn’t need to be imported from React or any other
    library.
  prefs: []
  type: TYPE_NORMAL
- en: This form data object offers various methods that help with accessing form field
    values—for example, the `get()` method to extract the value of a specific input
    field. In order to identify the input field for which you want to get hold of
    the value, the `get()` method requires the name of the input field as an argument.
    That’s why you must also set the `name` prop on the form control elements (i.e.,
    on the `<input>` elements in the above example).
  prefs: []
  type: TYPE_NORMAL
- en: This approach has the advantage that you need neither state nor Refs; hence,
    slightly less code must be written. In addition, since almost no React features
    are used, this code will be less prone to break due to possible future React changes.
  prefs: []
  type: TYPE_NORMAL
- en: Consequently, this approach might look like the best way of handling form submissions.
    But is it?
  prefs: []
  type: TYPE_NORMAL
- en: Which Solution Is Best?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is no right or wrong way of handling form submissions. Besides personal
    preference, application requirements also might favor one approach over the others.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if your application needs to change the input values, using only
    `FormData` as shown above would not be ideal, since you would have to write imperative
    code to update an input field.
  prefs: []
  type: TYPE_NORMAL
- en: 'That’s a problem because, as explained in *Chapter 1* , *React – What and Why?*
    , you should avoid writing code like this in your React apps:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Thus, if you need to edit an input’s value, using state (i.e., `useState()`
    ) is preferable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Even if you don’t need to update any input fields, the `event` object and `FormData`
    alone might not do the trick.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if you need to access the input fields outside of `handleSubmit()`
    , the `event` object is not available. As a result, interacting with the form
    element and its child elements is not possible via the `event` object. In such
    scenarios, working with Refs that are directly connected to the individual input
    elements will likely simplify things.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example uses a ref to call the `<input>` element’s built-in `focus()`
    method inside of a function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: So, as you can see, there is no silver bullet. All these React features and
    different ways of handling form submissions exist for good reasons. You can mix
    and match them as needed; therefore, it’s helpful to be aware of these different
    options.
  prefs: []
  type: TYPE_NORMAL
- en: But even though there are already a couple of ways of handling form submissions,
    with React 19, there’s yet another one.
  prefs: []
  type: TYPE_NORMAL
- en: Handling Form Submissions with Actions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'React 19 introduced the concept of (form) actions—a concept that actually consists
    of two kinds of actions: **client actions** and **server actions** . Both types
    of actions can help with handling form submissions, but for the purpose of this
    chapter, the term **form actions** will be used to describe client actions (i.e.,
    form actions that execute in the website user’s browser). Server actions will
    be covered separately in *Chapter 16* , *React Server Components & Server Actions*
    .'
  prefs: []
  type: TYPE_NORMAL
- en: Form actions were introduced to simplify the process of handling form submissions
    and data extraction—especially when building full stack apps with server actions.
    Furthermore, they can also be very useful when combined with some new React Hooks,
    which will be discussed later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s how a form submission can be handled via a client form action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'At first sight, this example may look very similar to the code snippet where
    the `event` object and `currentTarget` were used to derive the `FormData` . But
    if you take a closer look, you’ll see that there are some key differences:'
  prefs: []
  type: TYPE_NORMAL
- en: '`handleSubmit` was renamed `submitAction` and accepts a parameter named `formData`
    instead of `event` .'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `<form>` element no longer has the `onSubmit` prop—instead, it now has an
    `action` prop that points at the `submitAction` function.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The name change of the function is optional; there is no technical requirement
    to name this function `submitAction` or anything like that. But changing the name
    makes sense because the function no longer directly handles the `submit` event.
    Instead, it’s used as a value for the newly added `action` prop.
  prefs: []
  type: TYPE_NORMAL
- en: 'And that’s precisely what React’s form action feature is all about: setting
    the `action` prop of a `<form>` element to a function that React will then invoke
    on your behalf when the form is submitted. However, unlike when using the `onSubmit`
    prop, React will prevent the browser default and create a form data object for
    you (and pass that object as an argument to the action function).'
  prefs: []
  type: TYPE_NORMAL
- en: You no longer have to perform these steps manually, and as a result, the form
    submission can be handled with a minimal amount of code.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, if you need to set and manage the input values manually, or if you
    need to interact with the form fields at some point (e.g., to call `focus()` ),
    you’ll still need to work with state or Refs. But if you’re just trying to handle
    the submission and get hold of the entered values, using the form actions feature
    can be very handy.
  prefs: []
  type: TYPE_NORMAL
- en: But form actions are not just useful because they may require less code.
  prefs: []
  type: TYPE_NORMAL
- en: Synchronous vs Asynchronous Actions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Client form actions can be either synchronous or asynchronous, which means you
    can also use and return a `Promise` in the action function. Therefore, you can
    also use `async / await` with that function.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if you have a form in an application that aims to store some task
    data in the browser’s storage (via the `localStorage` API), you can do that with
    a synchronous action (since `localStorage` is a synchronous API):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This action function is synchronous, since it doesn’t return a `Promise` or
    use `async / await` . Therefore, as you can see, all form action examples thus
    far have used synchronous actions.
  prefs: []
  type: TYPE_NORMAL
- en: 'But if you’re working on a project that needs to submit entered data to a backend
    via an HTTP request, you can take advantage of the support for asynchronous code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: In this example, the `async` keyword is added in front of the function. This
    converts the function into an asynchronous one that will return a `Promise` .
  prefs: []
  type: TYPE_NORMAL
- en: This flexibility offered by React’s form actions feature is very useful, since
    it allows you to perform a broad variety of operations upon form submission. However,
    it is important to keep in mind that, for now, all these actions always execute
    on the client side, i.e., in the browser of the website visitor. Server-side actions
    will be explored in *Chapter 16* .
  prefs: []
  type: TYPE_NORMAL
- en: 'Behind the Scenes: Actions Are Transitions'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before diving deeper into form actions, it may be helpful to take a brief look
    under the hood.
  prefs: []
  type: TYPE_NORMAL
- en: This is because, technically, actions (i.e., both client and server actions)
    in React are so-called **transitions** . To be precise, they are asynchronous
    transitions.
  prefs: []
  type: TYPE_NORMAL
- en: Thus, the question is, what’s a transition in React?
  prefs: []
  type: TYPE_NORMAL
- en: In a React app, a transition is a concept, where React will ensure that some
    potentially time-consuming state updates will not block UI updates.
  prefs: []
  type: TYPE_NORMAL
- en: Form actions can be considered (potentially) time-consuming state updates; hence,
    under the hood, React handles them such that the remaining UI will stay responsive.
  prefs: []
  type: TYPE_NORMAL
- en: 'As a result, any state updating calls you make inside a form action function
    will only be processed by React once that form action is done. For example, the
    following code will, probably unexpectedly, only update the UI after three seconds:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Even though the `error` state is updated before the delay starts, React will
    not re-execute the component function (and, therefore, update the UI) before the
    form action as a whole is done. Therefore, the error message only shows up on
    the screen after three seconds.
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a computer  Description automatically generated](img/B31339_09_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.1: The error message only shows up with a delay'
  prefs: []
  type: TYPE_NORMAL
- en: '**Note**'
  prefs: []
  type: TYPE_NORMAL
- en: 'You find the complete example code on GitHub: [https://github.com/mschwarzmueller/book-react-key-concepts-e2/tree/09-form-actions/examples/08-transition](https://github.com/mschwarzmueller/book-react-key-concepts-e2/tree/09-form-actions/examples/08-transition)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: Managing State Based on Form Submissions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When handling form submissions, it’s quite common that you may also want to
    update the UI after the submission. For asynchronous actions, where the executed
    operation may take a couple of seconds (depending on the operation, of course),
    you might even want to update the UI during the submission, showing some pending
    state while the submitted form is being processed.
  prefs: []
  type: TYPE_NORMAL
- en: 'React aims to help you with both requirements by offering two specific form
    action-related Hooks: `useActionState()` and `useFormStatus()` .'
  prefs: []
  type: TYPE_NORMAL
- en: Updating UI State with useActionState()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: React provides a Hook called `useActionState()` , which is meant to be used
    in conjunction with form actions—no matter whether you work with client or server
    actions.
  prefs: []
  type: TYPE_NORMAL
- en: The goal of this Hook is to help you update the application’s UI based on the
    result of a form action.
  prefs: []
  type: TYPE_NORMAL
- en: 'This can, for example, be helpful to validate form input values and show an
    error message if there is invalid input. To perform this task, the `useActionState()`
    Hook can be imported from the `react` package and used like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: When running this example application, users will see validation error messages
    if there is invalid input.
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a computer  Description automatically generated](img/B31339_09_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.2: An error message is shown when submitting an empty input field'
  prefs: []
  type: TYPE_NORMAL
- en: 'A couple of things are going on in this code example:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The form action function was changed to accept two parameters instead of just
    one: a previous state ( `prevState` ) and the submitted data ( `formData` ).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The form action now also returns a value: an object with a key named `error`
    that contains an error message or `null` .'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `useActionState()` Hook is imported and used: it receives the form action
    function ( `storeTodoAction` ) as a first argument, and some initial state object
    ( `{error: null}` in this case) as a second argument.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `useActionState()` Hook also returns a value: an array from which two elements
    are destructured ( `formState` and `formAction` ).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The destructured `formAction` replaces `storeTodoAction` as a value for the
    `<form>` 's `action` prop.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`formState` is used to conditionally display the value stored in the `error`
    key of `formState` .'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So, as you can see, `useActionState()` is a Hook that expects a form action
    function (synchronous or asynchronous) as a first argument and an initial state
    as a second input. That initial state is required to have some state available
    if the form has not been submitted yet. After form submission, the initial state
    will be replaced by new state values returned by the form action function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since the purpose of `useActionState()` is to provide some state value that
    can be used to update (parts of) the UI, that derived state is exposed via the
    value returned by `useActionState()` :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'That returned value is an array with exactly three elements, in the following
    order:'
  prefs: []
  type: TYPE_NORMAL
- en: The current state value, which is either the initial state (if the form wasn’t
    submitted yet) or the state value returned by the form action function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An updated form action function, which is essentially your action function,
    wrapped by React. This is necessary so that React gets access to the value returned
    by your action function (which is the new state).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A boolean value that indicates whether the form is currently being submitted
    or not. This third element is not used in the previous code example and will be
    discussed in the *Managing Pending UI State* section of this chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Therefore, when using `useActionState()` , you no longer bind your action function
    to the `action` prop of the `<form>` element. Instead, you use the action function
    created by `useActionState()` —i.e., you use the action function that wraps your
    action function.
  prefs: []
  type: TYPE_NORMAL
- en: 'When using `useActionState()` , you also must adjust your form action function
    because React will call your function with two arguments instead of just one:
    the previous state and the submitted form data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The previous form state is passed to your action function so that you can use
    it to derive your new state from it (in conjunction with the submitted form data).
    In the above example, this is actually not the case—the previous state parameter
    is not used there. It must be accepted as a parameter nonetheless.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, that’s not the only change made to the form action function. Instead,
    it should now also return a new state value that will then be exposed to the component
    function by `useActionState()` (via the first element in the array returned by
    `useActionState()` ):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: That state value can be anything—a string, a number, an array, an object, etc.
    In the previous code example, it’s an object with a key named `error` that holds
    either `null` or a string error message.
  prefs: []
  type: TYPE_NORMAL
- en: Whenever the form is submitted, and the form action function is therefore executed
    or returns a value, `useActionState()` will trigger React to re-execute the surrounding
    component function. Hence, the updated state is made available. If that sounds
    familiar to `useState()` , you’re right! `useActionState()` is essentially like
    `useState()` , fine-tuned to derive state from actions.
  prefs: []
  type: TYPE_NORMAL
- en: '`useActionState()` is, therefore, definitely an important Hook, although it’s
    actually not limited to just exposing the values returned by your actions to component
    functions.'
  prefs: []
  type: TYPE_NORMAL
- en: Managing Pending UI State with useActionState()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Consider a scenario where you have a form action that takes a couple of seconds
    to finish its operation. For example, you could have an action that sends a request
    to a slow server or via a slow internet connection. In such scenarios, you might
    want to update the UI during the form submission to show the user that something
    is happening.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example, a function named `saveTodo()` is called from inside
    the form action. That function adds a deliberate delay of three seconds to simulate
    a slow network or server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'When using form actions, like in this example, updating the UI while the form
    submission is handled is relatively easy because `useActionState()` exposes a
    third element in its returned array: a boolean that indicates whether the action
    is currently executing or not.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The above example can, therefore, be adjusted like this to take advantage of
    that boolean value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The `pending` element is retrieved from the array via destructuring, and then
    it is used to disable the `<button>` and update the button text.
  prefs: []
  type: TYPE_NORMAL
- en: As a result, the UI changes once the form is submitted—until it’s done after
    three seconds (in this case, due to the delay added in the `saveTodo()` function
    earlier).
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a computer  Description automatically generated](img/B31339_09_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.3: The button is disabled and shows Saving Todo fallback text during
    form submission'
  prefs: []
  type: TYPE_NORMAL
- en: Handling Pending UI State with useFormStatus()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `pending` element returned by `useActionState()` is a simple and straightforward,
    but not the only, way of updating the UI while a form action executes.
  prefs: []
  type: TYPE_NORMAL
- en: React also offers a `useFormStatus()` Hook that provides information about the
    current form submission status. To be precise, it’s the `react-dom` package (not
    `react` !) that exports this `useFormStatus()` Hook.
  prefs: []
  type: TYPE_NORMAL
- en: Unlike `useActionState()` , `useFormStatus()` must be called in some nested
    component that’s wrapped by the `<form>` element whose submission status you’re
    interested in.
  prefs: []
  type: TYPE_NORMAL
- en: 'You could, for example, build a `SubmitButton` component that’s defined and
    used as shown in this code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: In this example, the actual code to send the to-do to a backend server is extracted
    into a separate `saveTodo()` function that’s stored in a `todo.js` file. That
    function contains the same code that was shown in earlier examples (i.e., it sends
    an HTTP request to JSONPlaceholder). In addition, `useActionState()` is removed
    to make the code a bit shorter and simpler again. However, you can absolutely
    use `useActionState()` in conjunction with `useFormStatus()` . For example, you
    could use `useActionState()` to output validation errors while managing the submit
    button’s `disabled` state via `useFormStatus()` in a separate, nested component.
  prefs: []
  type: TYPE_NORMAL
- en: '`useFormStatus()` is imported from `react-dom` and called inside the `SubmitButton`
    component function. It returns an object that contains a `pending` property yielding
    a boolean value.'
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned before, `useFormStatus()` can’t be used in the component where
    the `<form>` element is rendered. Instead, it must be used in a nested component—that’s
    why the `<SubmitButton>` component is placed between the `<form>` tags.
  prefs: []
  type: TYPE_NORMAL
- en: 'Besides `pending` , the object returned by `useFormStatus()` also holds three
    other properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`data` : A `FormData` object that contains the data with which the parent `<form>`
    was submitted (i.e., the same kind of data that the form action function receives).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`method` : A string value that’s either `''get''` or `''post''` , reflecting
    the value to which the method prop on the `<form>` element was set. By default,
    it’s `''get''` .'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`action` : A pointer to the form action function that’s connected to the `<form>`
    .'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you only care about the pending status, you can, of course, either use `useActionState()`
    or `useFormStatus()` . Working with `useActionState()` has the advantage that
    no separate nested component must be built. On the other hand, creating such an
    extra component and relying on `useFormStatus()` might be useful if you have multiple
    forms on the page—you could then, for example, reuse the `<SubmitButton>` across
    all those forms.
  prefs: []
  type: TYPE_NORMAL
- en: Performing Optimistic Updates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Besides `useActionState()` and `useFormStatus()` , React offers one last important
    Hook related to forms and form actions: the `useOptimistic()` Hook.'
  prefs: []
  type: TYPE_NORMAL
- en: The idea behind this Hook is that you can use it to show some temporary, optimistic
    UI while an asynchronous form action (which may take a couple of seconds) is underway.
    “Optimistic” means that you can use this Hook to render a UI that would normally
    only exist after the form submission is finished (e.g., a list of to-dos that
    already includes the newly submitted to-do).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example code manages a to-do list with the help of a `<form>`
    and form action, but without using `useOptimistic()` :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: In this example, since the `saveTodo()` function again has a built-in deliberate
    delay of three seconds, the website user sees the outdated to-do list until the
    form submission process is completed.
  prefs: []
  type: TYPE_NORMAL
- en: '![img](img/B31339_09_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.4: Without optimistic updating, the UI updates are delayed'
  prefs: []
  type: TYPE_NORMAL
- en: The user experience can, therefore, be improved by introducing the `useOptimistic()`
    Hook.
  prefs: []
  type: TYPE_NORMAL
- en: 'This Hook requires two arguments and returns an array with exactly two elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '`state` (the first argument) is the component state that should be active initially
    or if no form action is pending.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`updateFunction` (the second argument) is a function defined by you that controls
    how the state should be updated optimistically.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`optimisticState` is the optimistically updated state that will be active during
    the form action execution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`addOptimistic` triggers `updateFunction` and allows you to pass a value to
    that function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Applied to the above example, `useOptimistic()` can be used to manage an alternative,
    optimistically updated to-dos array that will be active as long as the form action
    is executing. Thereafter, the regular state will be active again (and update the
    UI accordingly):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: As you can see in this example, the `optimisticTodos` state is now used in the
    JSX code. The value stored in that constant is either the normal `todos` state
    (managed by `useState()` ), if the `storeTodoAction()` form action is not executing,
    or it’s the array derived by the function passed to `useOptimistic()` (as the
    second argument).
  prefs: []
  type: TYPE_NORMAL
- en: '![img](img/B31339_09_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.5: With useOptimistic(), the UI updates right away after submission'
  prefs: []
  type: TYPE_NORMAL
- en: Using the `useOptimistic()` Hook can, therefore, help with building a great
    user experience where your application provides instant feedback, even if some
    slow processes might still be running in the background. Since the temporary optimistic
    state will always be replaced with the regular state (i.e., the `todos` state)
    once the form submission is done, there also is no risk of displaying an incorrect
    UI. If an operation fails, React will automatically replace the temporarily incorrect
    UI with the correct one when it falls back to using the regular state.
  prefs: []
  type: TYPE_NORMAL
- en: Summary and Key Takeaways
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Form submissions can be handled by manually listening to the `submit` event
    via the `onSubmit` prop.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alternatively, form actions can be used—i.e., functions bound to the `action`
    prop of a `<form>` element.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When handling form submission manually (via `onSubmit` ), you can extract form
    field values with the help of state ( `useState()` ), Refs ( `useRef()` ), or
    by creating a `FormData` object from `event.currentTarget` .
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When using form actions, a form data object with the form field input values
    is automatically passed to the action function as a parameter.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `useActionState()` Hook can be utilized to manage form-dependent state (e.g.,
    validation error messages).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`useActionState()` also provides a pending boolean value that may be used to
    update the UI while the form action is processing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In nested components (nested within `<form>` ), the `useFormStatus()` Hook can
    be called to get and use information about the parent form submission status.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To provide quick UI updates, even when dealing with slow background processes
    (e.g., slow HTTP requests), the `useOptimistic()` Hook may help.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What’s Next?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Dealing with forms and handling user input is a very common task in most web
    applications. React apps are, of course, no exception.
  prefs: []
  type: TYPE_NORMAL
- en: 'That’s why React offers a broad variety of approaches and possible patterns
    you can use to handle form submissions and extract user input. This chapter explored
    and compared the two main ways of doing this: using the `onSubmit` prop or relying
    on form actions (only available since React 19).'
  prefs: []
  type: TYPE_NORMAL
- en: As explained and shown throughout this chapter, both approaches are valid and
    have their use cases. Personal preference as well as application requirements
    matter and will influence your decision.
  prefs: []
  type: TYPE_NORMAL
- en: At this point in the book, you know all the key React concepts you need to build
    feature-rich web applications. The next chapter will look behind the scenes of
    React and explore how it works internally. You will also learn about some common
    optimization techniques that can make your apps more performant.
  prefs: []
  type: TYPE_NORMAL
- en: Test Your Knowledge!
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Test your knowledge of the concepts covered in this chapter by answering the
    following questions. You can then compare your answers to examples that can be
    found at [https://github.com/mschwarzmueller/book-react-key-concepts-e2/blob/09-form-actions/exercises/questions-answers.md](https://github.com/mschwarzmueller/book-react-key-concepts-e2/blob/09-form-actions/exercises/questions-answers.md)
    :'
  prefs: []
  type: TYPE_NORMAL
- en: What’s a “form action”?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can you access user input inside of a form action?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What’s the purpose of the `useActionState()` Hook and how is it used?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What’s the purpose of the `useFormStatus()` Hook and how is it used?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What’s the difference between `useActionState()` and `useFormStatus()` ?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What’s the purpose of the `useOptimistic()` Hook and how is it used?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Apply What You Learned
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With form actions in your React toolbelt, you have another powerful way of handling
    form submissions and extracting user input.
  prefs: []
  type: TYPE_NORMAL
- en: In the following section, you’ll find an activity that allows you to practice
    working with form actions and the form-related Hooks provided by React. As always,
    you will also need to employ some of the concepts covered in earlier chapters
    (such as working with state or outputting lists).
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 9.1: Managing a Feedback Form'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this activity, your job is to build upon an existing, basic feedback form
    application and handle form submissions, with the help of form actions. As part
    of this activity, you should validate the submitted title and feedback text and
    show error messages if empty values are submitted. You should also update the
    list of submitted feedback items optimistically and disable the submit button
    while the form action is underway.
  prefs: []
  type: TYPE_NORMAL
- en: '**Note**'
  prefs: []
  type: TYPE_NORMAL
- en: You can find the starting code for this activity at [https://github.com/mschwarzmueller/book-react-key-concepts-e2/tree/09-form-actions/activities/practice-1-start](https://github.com/mschwarzmueller/book-react-key-concepts-e2/tree/09-form-actions/activities/practice-1-start)
    . When downloading this code, you’ll always download the entire repository. Make
    sure to then navigate to the subfolder with the starting code ( `activities/practice-1-start`
    , in this case) to use the right code snapshot.
  prefs: []
  type: TYPE_NORMAL
- en: 'After downloading the code and running `npm install` in the project folder
    to install all required dependencies, the solution steps are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Replace the existing `onSubmit` handler function with a form action—clean up
    and remove any code that’s not needed anymore thereafter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Disable the form submit button while the form action is processing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Validate the user input and output any error messages with the help of the `useActionState()`
    Hook.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Update the list of submitted feedback items optimistically by utilizing the
    `useOptimistic()` Hook.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The expected result should resemble the following screenshots:'
  prefs: []
  type: TYPE_NORMAL
- en: '![img](img/B31339_09_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.6: During form submission, the button is disabled, but the submitted
    item shows up instantly'
  prefs: []
  type: TYPE_NORMAL
- en: '![img](img/B31339_09_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.7: When submitting invalid values, appropriate error messages are
    shown'
  prefs: []
  type: TYPE_NORMAL
- en: '**Note**'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find a full example solution here: [https://github.com/mschwarzmueller/book-react-key-concepts-e2/tree/09-form-actions/activities/practice-1](https://github.com/mschwarzmueller/book-react-key-concepts-e2/tree/09-form-actions/activities/practice-1)
    .'
  prefs: []
  type: TYPE_NORMAL
