- en: '2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '2'
- en: Setting Up Your Development Environment
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置您的开发环境
- en: This chapter demonstrates how you and your team members can create a consistent
    development environment so that your entire team has the same great web development
    experience – the importance of which is highlighted in the preface of the book.
    It can be tough for beginners to create the right development environment, which
    is essential for a frustration-free development experience. For seasoned developers
    and teams, achieving a consistent and minimal development environment remains
    a challenge. Once achieved, such a development environment helps avoid many IT-related
    issues, including ongoing maintenance, licensing, and upgrade costs.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章展示了您和您的团队成员如何创建一个一致的开发生态环境，以便整个团队都能拥有相同的优秀 Web 开发体验——这一点在本书的序言中得到了强调。对于初学者来说，创建正确的发展环境可能很困难，这对于无烦恼的开发体验至关重要。对于经验丰富的开发者和团队来说，实现一致且最小化的开发环境仍然是一个挑战。一旦实现，这样的开发环境有助于避免许多
    IT 相关问题，包括持续维护、许可和升级成本。
- en: Instructions on installing GitHub Desktop, Node.js, the Angular CLI, and Docker
    are a useful reference for those from absolute beginners to seasoned teams, along
    with strategies for how to automate and ensure the correct and consistent configuration
    of your development environment.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 GitHub Desktop、Node.js、Angular CLI 和 Docker 的说明对于从初学者到经验丰富的团队都是一份有用的参考，其中包括如何自动化以及确保开发环境配置正确和一致的策略。
- en: Feel free to skip this chapter if you already have a robust development environment
    set up; however, beware that some of the environmental assumptions declared in
    this chapter may result in some instructions not working for you in later chapters.
    Come back to this chapter as a reference if you run into issues or need to help
    a colleague, pupil, or friend to set up their development environment. Automated
    installation scripts to set up your development environment can be found at [https://github.com/duluca/web-dev-environment-setup](https://github.com/duluca/web-dev-environment-setup).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经设置了一个强大的开发环境，可以自由跳过这一章；然而，请注意，本章中声明的某些环境假设可能会导致后续章节中的某些说明对您不起作用。如果您遇到问题或需要帮助同事、学生或朋友设置开发环境，请将此章节作为参考。设置您开发环境的自动化安装脚本可以在
    [https://github.com/duluca/web-dev-environment-setup](https://github.com/duluca/web-dev-environment-setup)
    找到。
- en: To make the most of this book, you should be familiar with JavaScript ES2015+,
    frontend development basics, and RESTful APIs.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 为了充分利用本书，您应该熟悉 JavaScript ES2015+、前端开发基础和 RESTful API。
- en: The recommended operating systems are Windows 10 Pro v1903+ with PowerShell
    v7+, or macOS Sierra v10.15+ with Terminal (Bash or Oh My Zsh). Most of the suggested
    software in this book also works on Linux systems, but your experience may vary
    depending on your particular setup.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 推荐的操作系统是 Windows 10 Pro v1903+ 配合 PowerShell v7+，或者 macOS Sierra v10.15+ 配合
    Terminal（Bash 或 Oh My Zsh）。本书中建议的大多数软件也适用于 Linux 系统，但您的体验可能会根据您的特定配置而有所不同。
- en: It is standard practice for developers to use Google Chrome 80+ when developing
    web applications. However, you may also use the Chromium-based Microsoft Edge
    browser 80+. You should definitely install the cross-platform PowerShell on Windows
    from [https://github.com/PowerShell/PowerShell/releases](https://github.com/PowerShell/PowerShell/releases),
    which gives you access to chain operators `&&` and `||`. Additionally, get the
    new Windows Terminal from the Microsoft Store for a superior command-line experience
    on Windows.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者在开发 Web 应用程序时通常使用 Google Chrome 80+。然而，您也可以使用基于 Chromium 的 Microsoft Edge
    浏览器 80+。您绝对应该从 [https://github.com/PowerShell/PowerShell/releases](https://github.com/PowerShell/PowerShell/releases)
    安装跨平台的 PowerShell，这将为您提供访问链式操作符 `&&` 和 `||` 的权限。此外，您可以从 Microsoft Store 获取新的 Windows
    Terminal，以获得在 Windows 上更优越的命令行体验。
- en: 'In this chapter, you are going to learn how to do the following:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习以下内容：
- en: Work with the CLI package managers Chocolatey and Homebrew to install and update
    software
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 CLI 包管理器 Chocolatey 和 Homebrew 安装和更新软件
- en: Use those package managers to install GitHub, Node.js, and other essential programs
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用那些包管理器来安装 GitHub、Node.js 和其他必需的程序
- en: Use scripting to automate installation using PowerShell or Bash
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用脚本通过 PowerShell 或 Bash 自动化安装
- en: Generate an Angular application using the Angular CLI
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Angular CLI 生成 Angular 应用程序
- en: Achieve a consistent and cross-platform development environment using automated
    tools
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用自动化工具实现一致且跨平台的开发生态环境
- en: Let's start by learning about CLI-based package managers that you can use to
    install your development tools. In the next section, you'll see that using CLI
    tools is a superior method compared to dealing with individual installers. It
    is much easier to automate CLI tools, which makes setup and maintenance tasks
    repeatable and fast.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从了解您可以使用来安装开发工具的基于 CLI 的包管理器开始。在下一节中，您将看到使用 CLI 工具是一种优于处理单个安装程序的方法。自动化 CLI
    工具要容易得多，这使得设置和维护任务可重复且快速。
- en: CLI package managers
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CLI 包管理器
- en: Installing software through a **Graphical User Interface** (**GUI**) is slow
    and challenging to automate. As a full-stack developer, whether you're a Windows
    or a Mac user, you must rely on **Command-Line Interface** (**CLI**) package managers
    to efficiently install and configure the software you depend on.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 **图形用户界面**（**GUI**）安装软件速度慢，且难以自动化。作为一名全栈开发者，无论您是 Windows 还是 Mac 用户，都必须依赖
    **命令行界面**（**CLI**）包管理器来高效地安装和配置您所依赖的软件。
- en: Remember, anything that can be expressed as a CLI command can also be automated.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，任何可以用 CLI 命令表达的内容也可以自动化。
- en: Installing Chocolatey for Windows
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为 Windows 安装 Chocolatey
- en: 'Chocolatey is a CLI-based package manager for Windows that can be used for
    automated software installation. To install Chocolatey on Windows, you need to
    run an elevated command shell:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Chocolatey 是一个基于 CLI 的 Windows 包管理器，可用于自动化软件安装。要在 Windows 上安装 Chocolatey，您需要运行提升的命令行
    shell：
- en: Launch the **Start** menu
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 **开始** 菜单
- en: Start typing in `PowerShell`
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开始在 `PowerShell` 中键入
- en: You should see **Windows PowerShell Desktop App** as a search result
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该看到 **Windows PowerShell 桌面应用** 作为搜索结果
- en: Right-click on **Windows PowerShell** and select **Run as Administrator**
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击 **Windows PowerShell** 并选择 **以管理员身份运行**
- en: This triggers a **User Account Control** (**UAC**) warning; select **Yes** to
    continue
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将触发 **用户账户控制**（**UAC**）警告；选择 **是** 以继续
- en: 'Execute the install command found at [https://chocolatey.org/install](https://chocolatey.org/install)
    in **PowerShell** to install the Chocolatey package manager:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **PowerShell** 中执行位于 [https://chocolatey.org/install](https://chocolatey.org/install)
    的安装命令以安装 Chocolatey 包管理器：
- en: '[PRE0]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Verify your Chocolatey installation by executing `choco`
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行 `choco` 验证您的 Chocolatey 安装
- en: 'You should see a similar output to the one shown in the following screenshot:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该看到以下截图所示的类似输出：
- en: '![](img/B14094_02_01.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B14094_02_01.png)'
- en: 'Figure 2.1: Successful installation of Chocolatey'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.1：Chocolatey 成功安装
- en: All subsequent Chocolatey commands must also be executed from an elevated command
    shell. Alternatively, it is possible to install Chocolatey in a non-administrator
    setting that doesn't require an elevated command shell. However, this results
    in a non-standard and less secure development environment, and certain applications
    installed through the tool may still require elevation.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 所有后续的 Chocolatey 命令都必须从提升的命令行 shell 中执行。或者，您可以在不需要提升的命令行 shell 的非管理员设置中安装 Chocolatey。然而，这会导致一个非标准且不太安全的开发环境，并且通过该工具安装的某些应用程序可能仍然需要提升权限。
- en: 'Scoop is an alternative to Chocolatey that provides a more Unix-like experience.
    If you prefer Unix-style tools and commands, you can install Scoop at [https://scoop.sh/](https://scoop.sh/)
    or by executing:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Scoop 是 Chocolatey 的替代品，它提供了更类似 Unix 的体验。如果您更喜欢 Unix 风格的工具和命令，您可以在 [https://scoop.sh/](https://scoop.sh/)
    或通过执行以下命令来安装 Scoop：
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: For more information on Chocolatey, refer to [https://chocolatey.org/install](https://chocolatey.org/install).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 Chocolatey 的更多信息，请参阅 [https://chocolatey.org/install](https://chocolatey.org/install)。
- en: Installing Homebrew for macOS
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为 macOS 安装 Homebrew
- en: 'Homebrew is a CLI-based package manager for macOS that can be used for automated
    software installation. To install Homebrew on macOS, you need to run a command
    shell:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Homebrew 是一个基于 CLI 的 macOS 包管理器，可用于自动化软件安装。要在 macOS 上安装 Homebrew，您需要运行一个命令行
    shell：
- en: Launch Spotlight Search with ![](img/B14094_02_001.png) + `Space`
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 ![](img/B14094_02_001.png) + `Space` 启动 Spotlight 搜索
- en: Type in `terminal`
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入 `terminal`
- en: 'Execute the following command in Terminal to install the Homebrew package manager:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中执行以下命令以安装 Homebrew 包管理器：
- en: '[PRE2]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Verify your Homebrew installation by executing `brew`
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行 `brew` 验证您的 Homebrew 安装
- en: 'You should see a similar output to the following:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该看到以下类似的输出：
- en: '![](img/B14094_02_02.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B14094_02_02.png)'
- en: 'Figure 2.2: Successful installation of Homebrew'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.2：Homebrew 成功安装
- en: 'To enable access to additional software, execute the following command:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要启用对额外软件的访问，请执行以下命令：
- en: '[PRE3]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: On macOS, if you run into permissions issues while installing brew packages,
    related to chown'ing `/usr/local`, you need to execute the `sudo chown -R $(whoami)
    $(brew --prefix)/*` command. This command reinstates user-level ownership to brew
    packages, which is more secure than broad superuser/`su`-level access.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在macOS上，如果您在安装brew包时遇到与chown `/usr/local`相关的权限问题，您需要执行`sudo chown -R $(whoami)
    $(brew --prefix)/*`命令。此命令将用户级别的所有权重新分配给brew包，这比广泛的超级用户/`su`级别访问更安全。
- en: For more information, check out [https://brew.sh/](https://brew.sh/.).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息，请查看[https://brew.sh/](https://brew.sh/)。
- en: Installing development tools
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装开发工具
- en: In this section, you'll install all the development tools you need to start
    developing a web application. Git and GitHub Desktop establish a source code repository
    on your machine and allow you to sync your code with a remote repository. Node.js
    is a JavaScript runtime for your PC and it ships with the **Node Package Manager**
    or **npm**. Npm manages third-party source code including Angular. Visual Studio
    Code is an **Integrated Development Environment** or **IDE**.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将安装所有开始开发网络应用所需的开发工具。Git和GitHub Desktop在您的机器上建立源代码仓库，并允许您将代码与远程仓库同步。Node.js是适用于您的PC的JavaScript运行时，它附带**Node包管理器**或**npm**。Npm管理第三方源代码，包括Angular。Visual
    Studio Code是一个**集成开发环境**或**IDE**。
- en: To automatically install all of the web development tools required for this
    book, execute the following commands for your OS to configure your environment.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 要自动安装本书所需的全部网络开发工具，请在您的操作系统上执行以下命令以配置您的环境。
- en: 'On Windows PowerShell, execute:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows PowerShell上执行：
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'On MacOS Terminal, execute:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在MacOS终端上执行：
- en: '[PRE5]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: For more information refer to [https://github.com/duluca/web-dev-environment-setup](https://github.com/duluca/web-dev-environment-setup).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息请参阅[https://github.com/duluca/web-dev-environment-setup](https://github.com/duluca/web-dev-environment-setup)。
- en: Once you install your IDE, you're ready to start development. This section also
    contains instructions to install Docker, a lightweight containerization platform,
    and configure various cloud services. These tools will become relevant in later
    chapters. If you want a quicker start to your Angular adventure, you can skip
    them for now.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您安装了您的集成开发环境（IDE），您就可以开始开发了。本节还包含了安装Docker（一个轻量级容器化平台）和配置各种云服务的说明。这些工具将在后面的章节中变得相关。如果您想更快地开始Angular之旅，现在可以跳过它们。
- en: Git and GitHub Desktop
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Git和GitHub Desktop
- en: 'This section aims to establish a best practice Git configuration that''s suitable
    for the broadest audience possible. To make the best use of this section and subsequent
    chapters of this book, I presume you have the following prerequisites fulfilled:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 本节旨在建立一个适合最广泛受众的最佳实践Git配置。为了最大限度地利用本节和本书后续章节，我假设您已经满足了以下先决条件：
- en: An understanding of what source code management and Git actually are
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解源代码管理和Git实际上是什么
- en: A free account created on [GitHub.com](http://GitHub.com )
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[GitHub.com](http://GitHub.com)上创建的免费账户
- en: Why use GitHub?
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为什么使用GitHub？
- en: If you are a Git user, the chances are that you also use an online repository,
    such as GitHub, Bitbucket, or GitLab. Each repository has a free tier for open
    source projects, coupled with robust websites with different feature sets, including
    on-premise Enterprise options that you can pay for. GitHub, with 38+ million repositories
    hosted in 2016, is by far the most popular online repository. It is widely considered
    a baseline utility that never goes offline by the community.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您是Git用户，那么您很可能也使用在线仓库，例如GitHub、Bitbucket或GitLab。每个仓库都为开源项目提供免费层，并配以功能强大的网站，包括您可以选择付费的本地企业选项。GitHub在2016年托管了38+百万个仓库，是迄今为止最受欢迎的在线仓库。社区普遍认为，GitHub是一个始终在线的基准工具。
- en: Over time, GitHub has added many rich features that have transformed it from
    a mere repository to an online platform. Throughout this book, I'll be referencing
    GitHub features and functionalities so you can leverage its capabilities to transform
    the way you develop, maintain, and release software.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 随着时间的推移，GitHub添加了许多丰富的功能，使其从单纯的仓库转变为在线平台。在本书的整个过程中，我会参考GitHub的功能和特性，以便您可以利用其能力来改变您开发、维护和发布软件的方式。
- en: Why use GitHub Desktop?
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为什么使用GitHub Desktop？
- en: The Git CLI tool is indeed powerful, and you will be just fine if you stick
    to it. However, we full-stack developers are worried about a variety of concerns.
    In a rush to complete the task at hand, you can easily ruin your, and sometimes
    your team's, day by following incorrect or incomplete advice.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Git CLI工具确实很强大，只要你坚持使用它，就没有问题。然而，作为全栈开发者，我们担心各种问题。在匆忙完成任务时，你可能会因为遵循错误或不完整的建议而毁掉自己，有时甚至可能毁掉团队的一天。
- en: 'See the following screenshot for an example of such advice from Stack Overflow
    ([http://stackoverflow.com/questions/1125968/force-git-to-overwrite-local-files-on-pull](http://stackoverflow.com/questions/1125968/force-git-to-overwrite-local-files-on-pull)):'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了Stack Overflow上此类建议的示例（[http://stackoverflow.com/questions/1125968/force-git-to-overwrite-local-files-on-pull](http://stackoverflow.com/questions/1125968/force-git-to-overwrite-local-files-on-pull)）：
- en: '![](img/B14094_02_03.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B14094_02_03.png)'
- en: 'Figure 2.3: An example of a command not to run blindly'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.3：不要盲目执行的命令示例
- en: If you execute the preceding command, be prepared to lose uncommitted local
    changes. Unfortunately, novice users tend to follow the most straightforward and
    most direct instructions, potentially leading to lost work. If you think your
    past commits are safe, think twice! When it comes to Git, if you can imagine it,
    it can be done through the CLI.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你执行上述命令，请准备好丢失未提交的本地更改。不幸的是，新手用户往往倾向于遵循最直接和最简单的指示，这可能导致丢失工作。如果你认为你之前的提交是安全的，请三思！在Git方面，如果你能想到的，它就可以通过CLI实现。
- en: Thankfully, with GitHub, you can protect branches and implement the GitHub workflow,
    which entails branching, committing, merging, updating, and submitting pull requests.
    The protections and the workflow help prevent harmful Git commands from making
    irreversible changes and enable a level of quality control so that your team remains
    productive. Performing all of these actions through the CLI, especially when there
    are merge conflicts, can get complicated and tedious.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，有了GitHub，你可以保护分支并实施GitHub工作流程，这包括分支、提交、合并、更新和提交拉取请求。这些保护和工作流程有助于防止有害的Git命令造成不可逆的更改，并确保团队保持高效的生产力。当存在合并冲突时，通过CLI执行所有这些操作可能会变得复杂和繁琐。
- en: Note that Git ships with a CLI tool named Git Bash, which is a Unix-based shell
    that you can use to execute `git` and other commands. Bash is readily available
    on Linux and macOS computers. Windows 10 is rapidly improving its terminal support
    with **Windows Subsystem for Linux** (**WSL**) and alias to Unix commands in PowerShell,
    so the need to use Git Bash on Windows is rapidly disappearing. If you would like
    to learn more about Git Bash see the tutorial at Atlassian's website at [https://www.atlassian.com/git/tutorials/git-bash](https://www.atlassian.com/git/tutorials/git-bash).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，Git附带了一个名为Git Bash的CLI工具，这是一个基于Unix的shell，你可以用它来执行`git`和其他命令。Bash在Linux和macOS计算机上很容易获得。Windows
    10正在快速提高其终端支持，包括**Windows Subsystem for Linux**（**WSL**）和PowerShell中的Unix命令别名，因此Windows上使用Git
    Bash的需求正在迅速消失。如果你想了解更多关于Git Bash的信息，请查看Atlassian网站上的教程，网址为[https://www.atlassian.com/git/tutorials/git-bash](https://www.atlassian.com/git/tutorials/git-bash)。
- en: For a more in-depth understanding of the benefits and pitfalls of Git and GitHub,
    you can read my 2016 article on the topic at [Bit.ly/InDepthGitHub](http://Bit.ly/InDepthGitHub).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更深入地了解Git和GitHub的益处和弊端，您可以阅读我2016年关于这个主题的文章，网址为[Bit.ly/InDepthGitHub](http://Bit.ly/InDepthGitHub)。
- en: Installing Git and GitHub Desktop
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装Git和GitHub Desktop
- en: GitHub Desktop provides an easy-to-use GUI to execute the GitHub workflow in
    a manner that is consistent across Windows and macOS. Consistency is highly valuable
    when onboarding new or junior team members, or if you're not a frequent contributor
    to the code base. We recommend you install GitHub Desktop 2.2+.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Desktop提供了一个易于使用的GUI，可以在Windows和macOS上以一致的方式执行GitHub工作流程。当欢迎新成员或初级团队成员加入，或者你不是代码库的频繁贡献者时，一致性非常有价值。我们建议您安装GitHub
    Desktop 2.2+。
- en: 'Execute the installation command:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行安装命令：
- en: 'For Windows:'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于Windows：
- en: '[PRE6]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'For macOS:'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于macOS：
- en: '[PRE7]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Verify your Git installation by executing `git --version` and observe the version
    number returned
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行`git --version`来验证您的Git安装，并观察返回的版本号。
- en: You need to restart your Terminal after the installation of a new CLI tool.
    However, you can avoid relaunching your Terminal and save some time by refreshing
    or sourcing your environment variables. On Windows, execute `refreshenv`; on macOS,
    execute `source ~/.bashrc` or `source ~/.zshrc`.
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在安装新的 CLI 工具后，你需要重新启动你的终端。然而，你可以通过刷新或源环境变量来避免重新启动终端，节省一些时间。在 Windows 上，执行 `refreshenv`；在
    macOS 上，执行 `source ~/.bashrc` 或 `source ~/.zshrc`。
- en: Verify your GitHub Desktop installation by launching the application
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过启动应用程序来验证你的 GitHub Desktop 安装。
- en: Sign in to [https://github.com/](https://github.com/) on GitHub Desktop
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 GitHub Desktop 上登录 [https://github.com/](https://github.com/)。
- en: 'Once you have created a repository, you can launch the application from your
    Terminal by executing this:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你创建了仓库，你可以通过在终端中执行以下命令来启动应用程序：
- en: '[PRE8]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'If you are already in the correct folder, you can type in the following command
    instead:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你已经在正确的文件夹中，你可以输入以下命令代替：
- en: '[PRE9]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: For Windows, on GitHub Desktop launch, if you get stuck on the sign in screen,
    close the application, relaunch it as an administrator, complete the setup, and
    then you may use it normally, without having to launch it as an administrator
    again. For more information, refer to [https://desktop.github.com/](https://desktop.github.com/).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Windows 系统，在 GitHub Desktop 启动时，如果你卡在登录屏幕，请关闭应用程序，以管理员身份重新启动它，完成设置，然后你可以正常使用，无需再次以管理员身份启动。更多信息请参考：[https://desktop.github.com/](https://desktop.github.com/)。
- en: Next, we'll go over several strategies for having a smoother experience with
    Git by properly registering your GitHub credentials.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将介绍几种策略，通过正确注册你的 GitHub 凭据，使 Git 的使用体验更加顺畅。
- en: Using your GitHub credentials in Git
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用你的 GitHub 凭据在 Git 中
- en: When you interact with your repository on GitHub, the `git` command is leveraged
    by the tools you're using, like your IDE, to push or pull content. To have a smooth
    experience with Git, it is a good idea to register your GitHub credentials with
    Git properly.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在 GitHub 上与你的仓库交互时，`git` 命令由你使用的工具（如 IDE）利用来推送或拉取内容。为了有一个顺畅的 Git 使用体验，正确地将你的
    GitHub 凭据注册到 Git 中是一个好主意。
- en: 'There are three major strategies to accomplish this:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此任务有三种主要策略：
- en: '**Configure SSH** – which is the best and most secure way to interact with
    any remote computer system, because no passwords are exchanged. You can follow
    the latest guide from GitHub to configure SSH at [https://help.github.com/articles/connecting-to-github-with-ssh](https://help.github.com/articles/connecting-to-github-with-ssh).'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**配置 SSH** – 这是最佳且最安全的方式与任何远程计算机系统交互，因为不会交换密码。你可以通过 GitHub 的最新指南来配置 SSH：[https://help.github.com/articles/connecting-to-github-with-ssh](https://help.github.com/articles/connecting-to-github-with-ssh)。'
- en: '**Cache your GitHub password in Git** – sometimes SSH won''t be supported by
    the tool you use, so you may need to cache your password. You can do so by executing
    the following command:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**在 Git 中缓存你的 GitHub 密码** – 有时候，你使用的工具可能不支持 SSH，因此你可能需要缓存密码。你可以通过执行以下命令来完成：'
- en: 'For Windows:'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于 Windows 系统：
- en: '[PRE10]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'For macOS:'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于 macOS 系统：
- en: '[PRE11]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: For further guidance, refer to the GitHub guide at [https://help.github.com/articles/caching-your-github-password-in-git](https://help.github.com/articles/caching-your-github-password-in-git).
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如需进一步指导，请参考 GitHub 指南：[https://help.github.com/articles/caching-your-github-password-in-git](https://help.github.com/articles/caching-your-github-password-in-git)。
- en: '**Create a personal access token** – this is a strategy that falls in between
    SSH and password usage from a security perspective because SSH keys and tokens
    can be revoked at any time from GitHub, but once your password is leaked or compromised,
    you may lose control of everything.'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**创建个人访问令牌** – 从安全角度来看，这是一种介于 SSH 和密码使用之间的策略，因为 SSH 密钥和令牌可以从 GitHub 任何时间撤销，但一旦你的密码泄露或受损，你可能会失去对一切的控制。'
- en: If you're using two-factor authentication, which you absolutely should, then
    instead of caching your password, you need to create a personal access token at
    [https://github.com/settings/tokens](https://github.com/settings/tokens) and use
    the token instead of your password. In *Chapter 3*, *Creating a Basic Angular
    App*, we cover how you can set up a token to work with Visual Studio Code, the
    preferred IDE for this book.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用两步验证，这是绝对应该的，那么你不需要缓存密码，而是需要在 [https://github.com/settings/tokens](https://github.com/settings/tokens)
    创建一个个人访问令牌，并使用令牌代替密码。在 *第 3 章*，*创建基本的 Angular 应用程序* 中，我们介绍了如何设置令牌以与 Visual Studio
    Code 配合使用，这是本书首选的 IDE。
- en: Check out TJ Holowaychuk's git-extras tool, which can provide repo summary,
    changelog population, author commit percentage, and more useful information about
    your repos at [https://github.com/tj/git-extras](https://github.com/tj/git-extras).
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 TJ Holowaychuk 的 git-extras 工具，它可以在 [https://github.com/tj/git-extras](https://github.com/tj/git-extras)
    提供仓库摘要、更改日志填充、作者提交百分比等关于你的仓库的更多信息。
- en: Node.js
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Node.js
- en: 'This section aims to establish a best practice JavaScript development environment.
    I presume that you have an awareness of the modern JavaScript ecosystem and tools.
    At a minimum, make sure to familiarize yourself with the following resources:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 本节旨在建立一个最佳实践 JavaScript 开发环境。我假设你对现代 JavaScript 生态系统和工具有所了解。至少，确保你熟悉以下资源：
- en: 'Node.js''s website: [https://nodejs.org](https://nodejs.org )'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 的网站：[https://nodejs.org](https://nodejs.org )
- en: 'Npm''s website: [https://www.npmjs.com](https://www.npmjs.com )'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Npm 的网站：[https://www.npmjs.com](https://www.npmjs.com )
- en: 'Angular''s website: [https://angular.io](https://angular.io )'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular 的网站：[https://angular.io](https://angular.io )
- en: 'The legacy AngularJS website: [https://angularjs.org/](https://angularjs.org/
    )'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 旧版 AngularJS 网站：[https://angularjs.org/](https://angularjs.org/ )
- en: 'Yarn''s website: [https://yarnpkg.com](https://yarnpkg.com )'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Yarn 的网站：[https://yarnpkg.com](https://yarnpkg.com )
- en: 'React''s website: [https://facebook.github.io/react](https://facebook.github.io/react
    )'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: React 的网站：[https://facebook.github.io/react](https://facebook.github.io/react
    )
- en: Node.js is JavaScript that runs anywhere. It's an open source project that aims
    to run JavaScript on the server, built on Google Chrome's V8 JavaScript engine.
    In late 2015, Node.js stabilized and announced enterprise-friendly 18-month LTS
    cycles that brought predictability and stability to the platform, paired with
    a more frequently updated, but more experimental, latest branch.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js 是在任何地方运行的 JavaScript。它是一个开源项目，旨在在服务器上运行 JavaScript，基于 Google Chrome
    的 V8 JavaScript 引擎构建。到 2015 年底，Node.js 稳定下来，并宣布了面向企业的 18 个月 LTS 循环，这为平台带来了可预测性和稳定性，同时与更频繁更新的但更具实验性的最新分支相匹配。
- en: Node also ships bundled with npm, the Node Package Manager, and as of 2018,
    npm is the largest repository of JavaScript packages in the world.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: Node 也附带 npm（Node 包管理器），截至 2018 年，npm 是世界上最大的 JavaScript 包库。
- en: For a more detailed look into Node's history, read my two-part article on Node
    at [Bit.ly/NodeJSHistory](http://Bit.ly/NodeJSHistory).
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 要更深入地了解 Node 的历史，请阅读我在 Bit.ly/NodeJSHistory（http://Bit.ly/NodeJSHistory）上发表的两篇文章。
- en: You may have heard of Yarn and how it's faster or better than npm. As of npm
    5, which ships bundled with Node 8, npm is more feature-rich, easier to use, and
    on par with Yarn in terms of performance. Yarn is published by Facebook, which
    also created React. It must be noted that Yarn relies on the npm repository, so
    whichever tool you use, you get access to the same library of packages.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能听说过 Yarn，以及它如何比 npm 更快或更好。截至 npm 5，它随 Node 8 一起打包，npm 在功能丰富性、易用性以及性能方面与 Yarn
    相当，Yarn 由 Facebook 发布，Facebook 还创建了 React。必须注意的是，Yarn 依赖于 npm 存储库，所以无论你使用哪个工具，你都能访问到相同的包库。
- en: Existing Node.js installation
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 现有的 Node.js 安装
- en: If you have installed Node.js before, when installing a new version of Node
    using choco or brew, ensure that you read the command outputs carefully. Your
    package manager may return caveats or additional instructions to follow so you
    can successfully complete the installation.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你之前安装过 Node.js，在用 choco 或 brew 安装 Node.js 的新版本时，请务必仔细阅读命令输出。你的包管理器可能会返回注意事项或额外的说明，以便你成功完成安装。
- en: It is also highly likely that your system or folder permissions have been edited
    manually in the past, which may interfere with the frustration-free operation
    of Node. If the following commands do not resolve your issues, use the GUI installer
    from Node's website as a last resort.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 很可能你的系统或文件夹权限在过去已经被手动编辑过，这可能会干扰 Node 的无烦恼操作。如果以下命令不能解决你的问题，请作为最后的手段使用 Node 网站的
    GUI 安装程序。
- en: To see a list of your global install packages, execute `npm list -g --depth=0`.
    To uninstall a global package, execute `npm uninstall -g package-name`. I would
    recommend that you uninstall all globally installed packages and restart from
    scratch with the suggestions provided in the next section.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看你的全局安装包列表，请执行 `npm list -g --depth=0`。要卸载全局包，请执行 `npm uninstall -g package-name`。我建议你卸载所有全局安装的包，并从下一节提供的建议重新开始。
- en: Regardless, you must take care to uninstall all global tools that were installed
    using `npm -g` previously. With every major Node version, there's a chance that
    native bindings between your tool and Node have been invalidated. Further, global
    tools rapidly fall out of date and project-specific tools quickly go out of sync.
    As a result, installing tools globally is now an anti-pattern that has been replaced
    with better techniques, which are covered in the next section and in the Angular
    CLI section in *Chapter 3*, *Creating a Basic Angular App*.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 无论怎样，你必须注意卸载之前使用`npm -g`安装的所有全局工具。随着每个主要Node版本的发布，你的工具和Node之间的本地绑定可能会被取消。此外，全局工具会迅速过时，而特定项目的工具会迅速失去同步。因此，现在全局安装工具已经成为一种反模式，已被更好的技术所取代，这些技术将在下一节和*第3章*，*创建基本的Angular应用*中介绍。
- en: Installing Node.js
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Node.js
- en: This book presumes that you're using Node 12.13 or a later version. Odd-numbered
    versions of Node are not meant to be long-lived. 8.x.x, 10.x.x, 12.x.x, and so
    on are okay, but avoid 9.x.x, 11.x.x, and so on, at all costs, as they are meant
    to be experimental.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 本书假设你正在使用Node 12.13或更高版本。Node的奇数版本并不打算长期使用。8.x.x、10.x.x、12.x.x等版本是可以的，但无论如何都要避免9.x.x、11.x.x等版本，因为它们是实验性的。
- en: 'Execute the installation command:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行安装命令：
- en: 'For Windows:'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于Windows：
- en: '[PRE12]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'For macOS:'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于macOS：
- en: '[PRE13]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Verify the installation of Node by executing `node -v`
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行`node -v`来验证Node的安装
- en: Verify npm by executing `npm -v`
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行`npm -v`来验证npm
- en: Note that on Windows, you should never upgrade your npm version using npm `install
    -g npm`, as highlighted in *Appendix C*, *Keeping Angular and Tools Evergreen*.
    You can find this appendix online from [https://static.packt-cdn.com/downloads/9781838648800_Appendix_C_Keeping_Angular_and_Tools_Evergreen.pdf](https://static.packt-cdn.com/downloads/9781838648800_Appendix_C_Keeping_Angular_and_Tools_Evergreen.)
    or at [https://expertlysimple.io/stay-evergreen](https://expertlysimple.io/stay-evergreen).
    It is highly recommended that you use the npm-windows-upgrade npm package.
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，在Windows上，你绝对不应该使用npm `install -g npm`来升级npm版本，正如在*附录C*，*保持Angular和工具始终如一*中强调的那样。你可以从[https://static.packt-cdn.com/downloads/9781838648800_Appendix_C_Keeping_Angular_and_Tools_Evergreen.pdf](https://static.packt-cdn.com/downloads/9781838648800_Appendix_C_Keeping_Angular_and_Tools_Evergreen.)或[https://expertlysimple.io/stay-evergreen](https://expertlysimple.io/stay-evergreen)在线找到这个附录。强烈建议你使用npm-windows-upgrade
    npm包。
- en: For this book, make sure that you've got npm v.6.12+. Now, let's go over some
    handy npm packages you may want to install globally.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这本书，请确保你已经安装了npm v.6.12+。现在，让我们来了解一下你可能想要全局安装的一些实用的npm包。
- en: Global npm packages
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 全局npm包
- en: 'The npm repository contains numerous useful and mature CLI commands that are
    often cross-platform. Listed here are the ones I rely on frequently and choose
    to install globally for performance reasons:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: npm仓库包含许多有用且成熟的CLI命令，这些命令通常是跨平台的。以下是我经常依赖并选择全局安装的命令，出于性能考虑：
- en: '`npx`: Executes CLI tools by downloading the latest version on-demand or the
    project-specific local `node_modules` folder. Npx ships with npm 5+ and allows
    you to run code generators that frequently update without a global install.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`npx`：通过按需下载最新版本或项目特定的本地`node_modules`文件夹来执行CLI工具。`npx`随npm 5+一起提供，允许你运行经常更新而不需要全局安装的代码生成器。'
- en: '`rimraf`: The Unix command `rm -rf` works on Windows as well. It''s very useful
    for deleting the `node_modules` folder, especially when Windows is unable to do
    so due to the nested folder structure.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rimraf`：Unix命令`rm -rf`在Windows上同样适用。它对于删除`node_modules`文件夹非常有用，尤其是在Windows由于嵌套文件夹结构无法执行删除操作时。'
- en: '`npm-check-updates`: Analyzes your project folder and reports on which package
    has newer versions or not, with the option to be able to update all of them if
    you so wish. `ncu` for short.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`npm-check-updates`：分析你的项目文件夹，并报告哪些包有新版本或没有，如果你愿意，可以选择更新所有这些包。简称`ncu`。'
- en: '`n`: A dead easy to tool to switch between versions of Node quickly, without
    having to remember the specific version number, which works on macOS/Linux. For
    Windows, you can use the choco package, `nvs`; both `n` and `nvs` are covered
    in the *Appendix C*, *Keeping Angular and Tools Evergreen*.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`n`：一个简单易用的工具，可以快速在Node的不同版本之间切换，无需记住具体的版本号，适用于macOS/Linux。对于Windows，你可以使用choco包`nvs`；`n`和`nvs`都在*附录C*，*保持Angular和工具始终如一*中介绍。'
- en: '`http-server`: A simple, zero-configuration command-line HTTP server, which
    is a great way to locally test static HTML/CSS pages or even the `dist` folder
    of your Angular or React project.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http-server`：一个简单、零配置的命令行 HTTP 服务器，是本地测试静态 HTML/CSS 页面或 Angular 或 React 项目的
    `dist` 文件夹的绝佳方式。'
- en: '`npm-windows-upgrade`: Necessary to upgrade npm on Windows.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`npm-windows-upgrade`：在 Windows 上升级 npm 所必需。'
- en: '`npkill`: Easily find and remove old and heavy `node_modules` folders and reclaim
    gigabytes of disk space.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`npkill`：轻松查找并删除旧的、庞大的 `node_modules` 文件夹，并回收数 GB 的磁盘空间。'
- en: You can use npm-check-updates to keep all of your global packages up to date
    by executing `ncu -g`.
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以通过执行 `ncu -g` 使用 npm-check-updates 来保持所有全局包的最新状态。
- en: If you run into EACCES permissions errors while installing global packages on
    macOS, refer to the guide from npm at [https://docs.npmjs.com/getting-started/fixing-npm-permissions](https://docs.npmjs.com/getting-started/fixing-npm-permissions).
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在 macOS 上安装全局包时遇到 EACCES 权限错误，请参阅 npm 的指南，链接为 [https://docs.npmjs.com/getting-started/fixing-npm-permissions](https://docs.npmjs.com/getting-started/fixing-npm-permissions)。
- en: Visual Studio Code
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Visual Studio Code
- en: '**Visual Studio Code** (**VS Code**) is one of the best code editors/IDEs out
    there, built and maintained by Microsoft. It''s free and cross-platform. The remarkable
    thing is that VS Code has the lightning-fast performance of a code editor – think
    NotePad++ or Sublime Text – but the feature set and convenience of costly IDEs
    – think Visual Studio or WebStorm. For JavaScript development, this speed is essential
    and is a tremendous quality-of-life improvement for a developer who frequently
    switches back and forth between different projects. VS Code brings together an
    integrated terminal, easy-to-use extension system, transparent settings, excellent
    search and replace functionalities, and, in my opinion, the best Node.js debugger
    that exists.'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '**Visual Studio Code**（**VS Code**）是市面上最好的代码编辑器/IDE之一，由微软开发和维护。它是免费的且跨平台。值得注意的是，VS
    Code 具有代码编辑器的闪电般性能——想想 NotePad++ 或 Sublime Text——但具有昂贵 IDE 的功能集和便利性——想想 Visual
    Studio 或 WebStorm。对于 JavaScript 开发，这种速度至关重要，并且对于经常在不同项目之间切换的开发者来说，这是一个巨大的生活质量提升。VS
    Code 集成了终端、易于使用的扩展系统、透明的设置、出色的搜索和替换功能，以及在我看来，目前最好的 Node.js 调试器。'
- en: This book does not require you to use VS Code. If you wish to use another IDE
    like WebStorm you may do so. WebStorm is a paid product and delivers a great development
    experience out of the box, whereas VS Code requires a lot of customization. This
    book offers automated scripts to configure VS Code for an optimal Angular development
    experience.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书不需要您使用 VS Code。如果您希望使用 WebStorm 等其他 IDE，您也可以这样做。WebStorm 是一款付费产品，开箱即用即可提供出色的开发体验，而
    VS Code 则需要大量的自定义。本书提供了自动化脚本来配置 VS Code，以实现最佳的 Angular 开发体验。
- en: You can find more about WebStorm at https://www.jetbrains.com/webstorm.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 https://www.jetbrains.com/webstorm 上找到更多关于 WebStorm 的信息。
- en: Installing Visual Studio Code
  id: totrans-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装 Visual Studio Code
- en: For Angular development, this book leverages VS Code v1.42+. I highly recommend
    that you also use the latest version of VS Code.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Angular 开发，本书利用 VS Code v1.42+。我强烈建议您也使用 VS Code 的最新版本。
- en: 'Execute the installation command:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行安装命令：
- en: 'For Windows:'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于 Windows：
- en: '[PRE14]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'For macOS:'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于 macOS：
- en: '[PRE15]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: One of the best features of VS Code is that you can also launch it from the
    CLI. If you're in a folder that you'd like to be editing, simply execute `code
    .` or a particular file by executing `code ~/.bashrc` or `code readme.md`.
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: VS Code 最好的特性之一是您还可以从 CLI 启动它。如果您在一个希望编辑的文件夹中，只需执行 `code .` 或特定的文件，通过执行 `code
    ~/.bashrc` 或 `code readme.md`。
- en: Verify the installation by launching VS Code
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过启动 VS Code 验证安装
- en: Navigate to a folder and execute `code`
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到一个文件夹并执行 `code`
- en: This opens up a new VS Code window with the **Explorer** displaying the contents
    of the current folder
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将打开一个新的 VS Code 窗口，**资源管理器**显示当前文件夹的内容
- en: For more information, refer to [https://code.visualstudio.com](https://code.visualstudio.com).
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息，请参阅 [https://code.visualstudio.com](https://code.visualstudio.com)。
- en: With VS Code installed, you're ready to start development. If you want a quicker
    start to your Angular adventure, skip ahead to the Angular CLI section and refer
    back to this section when you need Docker and the tools for various cloud services.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 VS Code 后，您就可以开始开发了。如果您想快速开始 Angular 的冒险，请跳转到 Angular CLI 部分，并在需要 Docker
    和各种云服务的工具时回到本节。
- en: Docker
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Docker
- en: Docker is a *lightweight* container virtualization platform with workflows and
    tooling that help manage and deploy applications.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 是一个轻量级的容器虚拟化平台，具有帮助管理和部署应用程序的工作流程和工具。
- en: Installing Docker
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装 Docker
- en: To be able to build and run containers, you must first install the Docker execution
    environment on your computer.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 要能够构建和运行容器，您必须首先在您的计算机上安装 Docker 执行环境。
- en: Windows support for Docker can be challenging. You must have a PC with a CPU
    that supports virtualization extensions, which is not a guarantee on laptops.
    You must also have a Pro version of Windows with Hyper-V enabled. On the flip
    side, Windows Server has native support for Docker, which is an unprecedented
    amount of support shown by Microsoft toward the industry initiative to adopt Docker
    and containerization.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: Windows 对 Docker 的支持可能具有挑战性。您必须拥有一台支持虚拟化扩展的 CPU 的 PC，这在笔记本电脑上并不保证。您还必须拥有已启用
    Hyper-V 的 Windows Pro 版本。另一方面，Windows Server 对 Docker 有原生支持，这是微软对行业采用 Docker 和容器化所展示的前所未有的支持。
- en: 'Install Docker by executing the following command:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行以下命令安装 Docker：
- en: 'For Windows:'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '对于 Windows:'
- en: '[PRE16]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'For macOS:'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '对于 macOS:'
- en: '[PRE17]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Execute `docker -v` to verify the installation
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行 `docker -v` 以验证安装。
- en: Cloud services
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 云服务
- en: Throughout the book, we'll use various cloud providers to perform deployments
    of the apps that you are going to build. Each service ships with a CLI tool that
    facilities the deployment of your app from your Terminal or a **continuous integration**
    (**CI**) environment in the cloud.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将使用各种云服务提供商来执行您将要构建的应用程序的部署。每个服务都附带一个 CLI 工具，该工具可以方便地从您的终端或云中的 **持续集成**（**CI**）环境中部署您的应用程序。
- en: Vercel Now
  id: totrans-173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Vercel Now
- en: Vercel Now is a cloud platform for static sites and serverless functions. With
    a simple CLI command, you host websites and deploy web services instantly. This
    book leverages a free-tier Vercel Now account.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: Vercel Now 是一个用于静态网站和无服务器函数的云平台。通过简单的 CLI 命令，您可以即时托管网站和部署网络服务。本书利用了一个免费层的 Vercel
    Now 账户。
- en: Create a Vercel Now account at [https://vercel.com](https://vercel.com).
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 [https://vercel.com](https://vercel.com) 创建一个 Vercel Now 账户。
- en: 'Install the CLI tool by executing:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行以下命令安装 CLI 工具：
- en: '[PRE18]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Verify the installation by executing:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行以下命令验证安装：
- en: '[PRE19]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Follow the instructions to complete the login process. You should see a message
    similar to the one that follows:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照说明完成登录过程。您应该会看到一个类似于以下的消息：
- en: '[PRE20]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: For more information, refer to [https://vercel.com](https://vercel.com).
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 如需更多信息，请参阅[https://vercel.com](https://vercel.com)。
- en: Google Firebase
  id: totrans-183
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Google Firebase
- en: Firebase is Google's cloud platform tailored for hosting mobile and web apps
    with authentication, push notifications, cloud functions, databases, machine learning,
    and analytics support. This book leverages a free-tier Firebase account.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: Firebase 是谷歌专为托管具有身份验证、推送通知、云函数、数据库、机器学习和分析支持的手机和网页应用而定制的云平台。本书利用了一个免费层的 Firebase
    账户。
- en: Create a Firebase account at [https://firebase.google.com/](https://firebase.google.com/).
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 [https://firebase.google.com/](https://firebase.google.com/) 创建一个 Firebase
    账户。
- en: 'Install the CLI tool by executing:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行以下命令安装 CLI 工具：
- en: '[PRE21]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Verify the installation by executing:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行以下命令验证安装：
- en: '[PRE22]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Follow the instructions to complete the login process. You should see a message
    similar to the one that follows:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照说明完成登录过程。您应该会看到一个类似于以下的消息：
- en: '[PRE23]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: For more information, refer to [https://firebase.google.com/](https://firebase.google.com/).
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 如需更多信息，请参阅 [https://firebase.google.com/](https://firebase.google.com/)。
- en: Google Cloud
  id: totrans-193
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Google Cloud
- en: Google Cloud is Google's world-class cloud infrastructure for enterprises. This
    book leverages Google Cloud Run for managed container deployments to the cloud. When
    you first sign up, you may receive free credits to use Google Cloud. However,
    this is an optional exercise, as you may incur charges while using this service
    if you forget to tear down your deployment.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: Google Cloud 是谷歌为企业和组织提供的世界级云基础设施。本书利用 Google Cloud Run 进行管理的容器部署到云中。在您首次注册时，您可能会收到免费额度来使用
    Google Cloud。然而，这是一个可选的练习，因为如果您忘记拆除您的部署，使用此服务可能会产生费用。
- en: Create a Google Cloud account at [https://cloud.google.com/](https://cloud.google.com/
    )
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 [https://cloud.google.com/](https://cloud.google.com/) 创建一个 Google Cloud 账户。
- en: 'Execute the installation command:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行安装命令：
- en: 'For Windows:'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '对于 Windows:'
- en: '[PRE24]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'If you have trouble installing `gcloudsdk` from `choco`, then try `scoop`,
    as mentioned earlier in the chapter. Execute the commands that follow:'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您在 `choco` 中安装 `gcloudsdk` 时遇到问题，那么请尝试之前章节中提到的 `scoop`。执行以下命令：
- en: '[PRE25]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'For macOS:'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '对于 macOS:'
- en: '[PRE26]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Verify the installation by executing `gcloud --version`
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行 `gcloud --version` 来验证安装。
- en: Execute `gcloud init` to finish the setup
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行 `gcloud init` 来完成设置。
- en: For more information, refer to [https://cloud.google.com/run/](https://cloud.google.com/run/).
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息，请参阅 [https://cloud.google.com/run/](https://cloud.google.com/run/)。
- en: Amazon Web Services
  id: totrans-206
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 亚马逊网络服务
- en: '**Amazon Web Services** (**AWS**) is a globally deployed cloud infrastructure
    provided by Amazon. AWS is a widely popular tool with businesses and governments,
    making it a lucrative service for IT professionals. *Chapter 13*, *Highly Available
    Cloud Infrastructure on AWS*, goes in-depth on how to work with AWS and perform a scalable
    container-based deployment.'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '**亚马逊网络服务**（**AWS**）是由亚马逊提供的全球部署的云基础设施。AWS 是企业和政府广泛使用的工具，对于 IT 专业人员来说，它是一项有利可图的业务。第
    13 章，“AWS 上的高可用云基础设施”，深入探讨了如何使用 AWS 并执行基于容器的可扩展部署。'
- en: 'Execute the installation command:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行安装命令：
- en: 'For Windows:'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于 Windows：
- en: '[PRE27]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'For macOS:'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于 macOS：
- en: '[PRE28]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Note that running the upgrade command on choco and brew ensures that you have
    the latest version of any given tool if they were previously installed on your
    environment.
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，在 choco 和 brew 上运行升级命令可以确保如果它们之前已安装到您的环境中，您将拥有任何给定工具的最新版本。
- en: Verify the installation by executing `aws --version`
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行 `aws --version` 验证安装
- en: For more information, refer to [https://aws.amazon.com/](https://aws.amazon.com/).
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息，请参阅 [https://aws.amazon.com/](https://aws.amazon.com/)。
- en: Setup automation for Windows and macOS
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 Windows 和 macOS 的自动化
- en: At the beginning of the chapter, I proclaimed *anything that can be expressed
    as a CLI command can also be automated*. Throughout the setup process, we have
    ensured that every tool being used was set up and its functionality was verifiable
    through a CLI command. This means we can easily create a PowerShell or bash script
    to string these commands together and ease the task of setting up and verifying
    new environments.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的开头，我宣称“任何可以用 CLI 命令表达的内容都可以自动化”。在整个设置过程中，我们确保了每个正在使用的工具都已设置，并且可以通过 CLI 命令验证其功能。这意味着我们可以轻松地创建
    PowerShell 或 bash 脚本来连接这些命令，并简化设置和验证新环境的工作。
- en: Let's implement rudimentary but effective scripts to help set up your development
    environment.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们实现一些基本但有效的脚本，以帮助您设置开发环境。
- en: PowerShell script
  id: totrans-219
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PowerShell 脚本
- en: For Windows-based development environments, you need to create a PowerShell
    script.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 对于基于 Windows 的开发环境，您需要创建一个 PowerShell 脚本。
- en: Create a file named `setup-windows-dev-env.ps1`
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `setup-windows-dev-env.ps1` 的文件
- en: 'Insert the following text, also available at [https://github.com/duluca/web-dev-environment-setup](https://github.com/duluca/web-dev-environment-setup),
    in the file:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件中插入以下文本，该文本也可在 [https://github.com/duluca/web-dev-environment-setup](https://github.com/duluca/web-dev-environment-setup)
    找到：
- en: '[PRE29]'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'To execute the script, run:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要执行脚本，请运行：
- en: '[PRE30]'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Alternatively, you can install and execute the script directly from the PowerShell
    Gallery, located at [https://www.powershellgallery.com](https://www.powershellgallery.com),
    by executing the following command:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以直接从 PowerShell Gallery 安装并执行脚本，PowerShell Gallery 位于 [https://www.powershellgallery.com](https://www.powershellgallery.com)，通过执行以下命令：
- en: '[PRE31]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: By executing this script, you have successfully set up your development environment
    on Windows.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 通过执行此脚本，您已成功在 Windows 上设置开发环境。
- en: If you're interested in publishing your own scripts to the PowerShell Gallery
    or generally interested in advancing your PowerShell skills, I suggest you install
    PowerShell Core, a multi-platform version of PowerShell. from [https://github.com/PowerShell/PowerShell](https://github.com/PowerShell/PowerShell).
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有兴趣将您自己的脚本发布到 PowerShell Gallery 或对提高 PowerShell 技能感兴趣，我建议您安装 PowerShell
    Core，这是 PowerShell 的多平台版本。请从 [https://github.com/PowerShell/PowerShell](https://github.com/PowerShell/PowerShell)
    安装。
- en: Now, let's look into how you can achieve a similar setup on Mac.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看您如何在 Mac 上实现类似的设置。
- en: Bash script
  id: totrans-231
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Bash 脚本
- en: For Mac-based development environments, you need to create a bash script.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 对于基于 Mac 的开发环境，您需要创建一个 bash 脚本。
- en: Create a file named `setup-mac-dev-env.sh`
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `setup-mac-dev-env.sh` 的文件
- en: Run `chmod a+x setup-mac-dev-env.sh` to make the file executable
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `chmod a+x setup-mac-dev-env.sh` 使文件可执行
- en: 'Insert the following text, also available at [https://github.com/duluca/web-dev-environment-setup](https://github.com/duluca/web-dev-environment-setup),
    in the file:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件中插入以下文本，该文本也可在 [https://github.com/duluca/web-dev-environment-setup](https://github.com/duluca/web-dev-environment-setup)
    找到：
- en: '[PRE32]'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'To execute the script, run:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要执行脚本，请运行：
- en: '[PRE33]'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'By executing this script, you have successfully set up your development environment
    on Mac. Here is an example of a more sophisticated install and verify routine,
    where you can check to see if a particular program, like `brew` or `node`, is
    already installed, before attempting to install them:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 通过执行此脚本，您已在 Mac 上成功设置了开发环境。以下是一个更复杂的安装和验证例程的示例，您可以在尝试安装之前检查是否已安装特定程序，如 `brew`
    或 `node`：
- en: '[PRE34]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Now, you have a pretty good idea of what it looks like to automate the execution
    of your scripts. The harsh reality is that these scripts do not represent a very
    capable or resilient solution. Scripts can't be executed or managed remotely,
    and they can't quickly recover from errors or survive machine boot cycles. Besides,
    your IT requirements may be above and beyond what is covered here.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您对自动化执行脚本的样子有了相当好的了解。残酷的现实是，这些脚本并不代表一个非常强大或弹性的解决方案。脚本不能远程执行或管理，也不能快速从错误中恢复或从机器启动周期中生存。此外，您的
    IT 需求可能超出了这里所涵盖的范围。
- en: If you deal with large teams and have a frequent turnover of staff, an automation
    tool pays dividends handsomely, whereas if you're on your own or part of a smaller,
    stable team, it is overkill. I encourage you to explore tools such as Puppet,
    Chef, Ansible, and Vagrant to help you decide which one best fits your needs or
    whether a simple script is just good enough.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您处理大型团队并且人员流动频繁，自动化工具会带来丰厚的回报，而如果您是独自一人或是一个较小、稳定的团队的一部分，那么这将是过度配置。我鼓励您探索像
    Puppet、Chef、Ansible 和 Vagrant 这样的工具，以帮助您决定哪个最适合您的需求，或者一个简单的脚本是否已经足够好。
- en: The Angular CLI
  id: totrans-243
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Angular CLI
- en: The Angular CLI tool, ng, is an official Angular project to ensure that newly
    created Angular applications have a uniform architecture, following the best practices
    perfected by the community over time. This means that any Angular application
    you encounter going forward should have the same general shape.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: Angular CLI 工具 ng 是一个官方的 Angular 项目，旨在确保新创建的 Angular 应用程序具有统一的架构，遵循社区经过时间检验的最佳实践。这意味着您未来遇到的任何
    Angular 应用程序都应该具有相同的一般形状。
- en: Setting up your development directory
  id: totrans-245
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置您的开发目录
- en: Setting up a dedicated `dev` directory is a lifesaver. Since all the data under
    this directory is backed up using GitHub, you can safely configure your antivirus,
    cloud sync, or backup software to ignore it. This helps significantly reduce CPU,
    disk, and network utilization. As a full-stack developer, you're likely to be
    multitasking a lot, so avoiding unnecessary activity has a net positive impact
    on performance, power, and data consumption daily, especially if your development
    environment is a laptop that is resource-starved or you wish to squeeze as much
    battery life as possible when you're on the move.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 设置一个专门的 `dev` 目录是救命稻草。由于此目录下的所有数据都使用 GitHub 进行备份，因此您可以安全地配置您的防病毒软件、云同步或备份软件忽略它。这可以显著减少
    CPU、磁盘和网络利用率。作为一名全栈开发者，您很可能会进行大量多任务处理，因此避免不必要的活动对性能、电力和数据消耗的每日净正面影响很大，尤其是如果您的开发环境是资源匮乏的笔记本电脑，或者您在移动时希望尽可能多地节省电池寿命。
- en: Creating a `dev` folder directly in the `c:\` drive is very important on Windows.
    Earlier versions of Windows, or rather NTFS, can't handle file paths longer than
    260 characters. This may seem adequate at first, but when you install npm packages
    in a folder structure that is already deep in the hierarchy, the `node_modules`
    folder structure can get deep enough to hit this limit very easily. With npm 3+,
    a new, flatter package installation strategy was introduced, which helps with
    npm-related issues, but being as close to the root folder as possible helps tremendously
    with any tool.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 的 `c:\` 驱动器中直接创建 `dev` 文件夹非常重要。早期版本的 Windows 或 NTFS 无法处理超过 260 个字符的文件路径。起初这似乎是足够的，但当您在已经深入到层次结构的文件夹结构中安装
    npm 软件包时，`node_modules` 文件夹结构可能会足够深，以至于很容易达到这个限制。从 npm 3+ 开始，引入了一种新的、更扁平的软件包安装策略，这有助于解决
    npm 相关问题，但尽可能接近根文件夹对任何工具都有极大的帮助。
- en: 'Create your `dev` folder using the following commands:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令创建您的 `dev` 文件夹：
- en: 'For Windows:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Windows：
- en: '[PRE35]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'For macOS:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 macOS：
- en: '[PRE36]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: In Unix-based operating systems, `~` (pronounced tilde) is a shortcut to the
    current user's home directory, which resides under `/Users/your-user-name`.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 在基于 Unix 的操作系统上，`~`（发音为 tilde）是当前用户家目录的快捷方式，该目录位于 `/Users/your-user-name` 下。
- en: Now that your development directory is ready, let's start with generating your
    Angular application.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您的开发目录已准备就绪，让我们开始生成您的 Angular 应用程序。
- en: Generating your Angular application
  id: totrans-255
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生成您的 Angular 应用程序
- en: The Angular CLI is an official Angular project to ensure that newly created
    Angular applications have a uniform architecture, following the best practices
    perfected by the community over time. This means that any Angular application
    you encounter going forward should have the same general shape. The Angular CLI
    goes beyond initial code generation; you'll use it frequently to create new components,
    directives, pipes, services, modules, and more. The Angular CLI also helps during
    development, with live-reloading features so that you can quickly see the results
    of your changes. The Angular CLI can also test, lint, and build optimized versions
    of your code for a production release. Furthermore, as new Angular versions are
    released, the Angular CLI helps you upgrade your code by automatically rewriting
    portions of it so that it remains compatible with potential breaking changes.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: Angular CLI 是一个官方的 Angular 项目，旨在确保新创建的 Angular 应用程序具有统一的架构，遵循社区经过时间检验的最佳实践。这意味着您今后遇到的任何
    Angular 应用程序都应该具有相同的一般形状。Angular CLI 超出了初始代码生成的范畴；您会频繁地使用它来创建新的组件、指令、管道、服务、模块等。Angular
    CLI 还在开发过程中提供帮助，具有实时重新加载功能，以便您可以快速看到您更改的结果。Angular CLI 还可以测试、检查代码风格并构建用于生产发布的优化版本。此外，随着新的
    Angular 版本的发布，Angular CLI 帮助您通过自动重写代码的部分来升级您的代码，以确保它与潜在的破坏性更改保持兼容。
- en: Installing the Angular CLI
  id: totrans-257
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装 Angular CLI
- en: The documentation at [https://angular.io/guide/quickstart](https://angular.io/guide/quickstart
    ) guides you on how to install `@angular/cli` as a global npm package. Do not
    do this. Over time, as the Angular CLI is upgraded, it is a constant irritant
    to have to keep the global and the in-project version in sync. If you don't, the
    tool complains endlessly. Additionally, if you are working on multiple projects,
    you end up with varying versions of the Angular CLI over time. As a result, your
    commands may not return the results you expect or the results your team members
    get.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://angular.io/guide/quickstart](https://angular.io/guide/quickstart)
    上的文档指导您如何将 `@angular/cli` 作为全局 npm 包进行安装。请不要这样做。随着时间的推移，当 Angular CLI 升级时，始终需要保持全局版本和项目版本同步，这会成为一个持续的烦恼。如果您不这样做，工具会不断地抱怨。此外，如果您正在处理多个项目，随着时间的推移，您将拥有不同版本的
    Angular CLI。结果，您的命令可能不会返回您期望的结果，或者与团队成员得到的结果不同。'
- en: The strategy detailed in the next section makes the initial configuration of
    your Angular project a bit more complicated than it needs to be; however, you'll
    more than make up for this pain if you have to return to a project a few months
    or a year later. In that case, you could use the version of the tool that you
    last used on the project, instead of some future version that may require upgrades
    that you're not willing to perform. In the next section, you'll use this best
    practice to initialize your Angular app.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个部分中详细说明的策略使得您的 Angular 项目的初始配置比必要的要复杂一些；然而，如果您几个月或一年后需要返回项目，您将能够弥补这种痛苦。在这种情况下，您可以使用在项目上最后使用的工具版本，而不是可能需要升级的某个未来的版本。在下一个部分中，您将使用这一最佳实践来初始化您的
    Angular 应用程序。
- en: Initializing your Angular app
  id: totrans-260
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 初始化您的 Angular 应用
- en: 'The main way to initialize your app is by using the Angular CLI. Let''s initialize
    the application for development using `npx`, which is already installed on your
    system from when you installed the latest version of Node LTS, from PowerShell/Terminal:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 初始化您的应用的主要方式是使用 Angular CLI。让我们使用 `npx` 初始化开发中的应用程序，`npx` 已经在您安装最新版本的 Node LTS
    时安装到您的系统上，从 PowerShell/Terminal 运行：
- en: Under your `dev` folder, execute `npx @angular/cli new local-weather-app`
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的 `dev` 文件夹下，执行 `npx @angular/cli new local-weather-app`
- en: Select **No**, when asked **Would you like to add Angular routing?**
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当被问及“您是否希望添加 Angular 路由？”时，选择**否**。
- en: Select **CSS**, when asked **Which stylesheet format would you like to use?**
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当被问及“您希望使用哪种样式表格式？”时，选择**CSS**。
- en: 'On your terminal, you should see a success message similar to this:'
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的终端上，您应该看到一条类似于以下的成功消息：
- en: '[PRE37]'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Your project folder—`local-weather-app`—has been initialized as a Git repository
    and scaffolded with the initial file and folder structure, which should look like
    this:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 您的项目文件夹——`local-weather-app`——已初始化为 Git 仓库，并使用初始文件和文件夹结构进行了搭建，其结构应如下所示：
- en: '[PRE38]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: The alias for `@angular/cli` is `ng`. If you were to install the Angular CLI
    globally, you would execute `ng new local-weather-app`, but we didn't do this.
    So, it is essential to remember that, going forward, you execute the `ng` command,
    but this time under the `local-weather-app` directory. The latest version of the
    Angular CLI has been installed under the `node_modules/.bin` directory so that
    you can run `ng` commands such as `npx ng generate component my-new-component`
    and continue working efficiently.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '`@angular/cli` 的别名是 `ng`。如果你全局安装 Angular CLI，你会执行 `ng new local-weather-app`，但我们没有这样做。因此，记住，从现在开始，你将执行
    `ng` 命令，但这次是在 `local-weather-app` 目录下。Angular CLI 的最新版本已经安装到 `node_modules/.bin`
    目录下，这样你就可以运行 `ng` 命令，如 `npx ng generate component my-new-component`，并继续高效地工作。'
- en: If you are on macOS, you can further improve your development experience by
    implementing shell auto-fallback, which removes the necessity of having to use
    the `npx` command. If an unknown command is found, npx takes over the request.
    If the package already locally exists under `node_modules/.bin`, npx passes along
    your request to the correct binary. So, you can run commands like `ng g c my-new-component`
    as if they're globally installed. Refer to npx's readme on how to set this up,
    at [npmjs.com/package/npx#shell-auto-fallback](http://npmjs.com/package/npx#shell-auto-fallback).
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是 macOS，你可以通过实现 shell 自动回退来进一步改善你的开发体验，这可以消除必须使用 `npx` 命令的必要性。如果发现未知命令，npx
    将接管请求。如果该软件包已经在本地 `node_modules/.bin` 下存在，npx 将将你的请求传递给正确的二进制文件。因此，你可以像全局安装一样运行
    `ng g c my-new-component` 这样的命令。有关如何设置此功能的说明，请参阅 npx 的自述文件，链接为 [npmjs.com/package/npx#shell-auto-fallback](http://npmjs.com/package/npx#shell-auto-fallback)。
- en: Publishing a Git repository using GitHub Desktop
  id: totrans-271
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 GitHub Desktop 发布 Git 仓库
- en: 'GitHub Desktop allows you to create a new repository directly within the application:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Desktop 允许你在应用程序内直接创建新的仓库：
- en: Open GitHub for Desktop
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 GitHub for Desktop
- en: '**File** | **Add local repository...**'
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**文件** | **添加本地仓库...**'
- en: Locate the `local-weather-app` folder by clicking on **Choose...**
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击 **选择...** 定位 `local-weather-app` 文件夹
- en: Click on **Add repository**
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **添加仓库**
- en: Note that the Angular CLI already created the first commit for you in the **History**
    tab
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意，Angular CLI 已经在 **历史** 选项卡中为你创建了第一个提交
- en: 'Finally, click on **Publish repository**, marked in the following screenshot
    as **6**:'
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，点击 **发布仓库**，在以下截图中被标记为 **6**：
- en: '![](img/B14094_02_04.png)'
  id: totrans-279
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B14094_02_04.png)'
- en: 'Figure 2.4: GitHub Desktop'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.4：GitHub Desktop
- en: Inspecting and updating package.json
  id: totrans-281
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 检查和更新 package.json
- en: '`Package.json` is the single most important configuration file that you should
    be keenly aware of at all times. Your project''s scripts, runtime, and development
    dependencies are stored in this file.'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '`package.json` 是你应该始终保持警觉的单个最重要的配置文件。你的项目脚本、运行时和开发依赖都存储在这个文件中。'
- en: 'Open `package.json` and locate the name and version properties:'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `package.json` 并定位名称和版本属性：
- en: '[PRE39]'
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Rename your app to whatever you wish; I used `localcast-weather`
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将你的应用程序重命名为你想要的任何名称；我使用了 `localcast-weather`
- en: Set your version number to `1.0.0`
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将你的版本号设置为 `1.0.0`
- en: '`npm` uses semantic versioning (semver), where version number digits represent
    Major.Minor.Patch increments. Semver starts version numbers at `1.0.0` for any
    published API, though it doesn''t prevent `0.x.x` versioning. As the author of
    a web application, the versioning of your app has no real impact on you, outside
    of internal tooling, team, or company communication purposes. However, the versioning
    of your dependencies is critical to the reliability of your application. In summary,
    patch versions should just be bug fixes. Minor versions add functionality without
    breaking the existing features, and major version increments are free to make
    incompatible API changes. However, any update is risky to the tested behavior
    of your application. Therefore, the `package-lock.json` file stores the entire
    dependency tree of your application, so the exact state of your application can
    be replicated by other developers or CI servers. For more information, visit:
    [https://semver.org/](https://semver.org/).'
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`npm` 使用语义化版本控制（semver），其中版本号数字代表主版本号、次版本号和修订号的增量。Semver 对于任何发布的API，版本号从 `1.0.0`
    开始，尽管它并不阻止 `0.x.x` 的版本控制。作为网络应用程序的作者，你的应用程序的版本控制对你来说没有实际影响，除了内部工具、团队或公司沟通目的之外。然而，你的依赖项的版本控制对你的应用程序的可靠性至关重要。总之，修订版本号应该只是修复错误。次版本号添加功能而不破坏现有功能，而主版本号的增量可以自由地进行不兼容的API更改。但是，任何更新都可能对你的应用程序的测试行为构成风险。因此，`package-lock.json`
    文件存储了你的应用程序的整个依赖项树，以便其他开发人员或CI服务器可以复制你的应用程序的确切状态。更多信息，请访问：[https://semver.org/](https://semver.org/).'
- en: 'In the following code block, observe that the `scripts` property contains a
    collection of helpful starter scripts that you can expand on. The `start` and
    `test` commands are npm defaults, so they can just be executed by `npm start`
    or `npm test`. However, the other commands are custom commands that must be prepended
    with the `run` keyword. For example, in order to build your application, you must
    use `npm run build`:'
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在以下代码块中，请注意，`scripts` 属性包含一系列有用的启动脚本，你可以在此基础上进行扩展。`start` 和 `test` 命令是 npm 的默认命令，因此可以通过
    `npm start` 或 `npm test` 执行。然而，其他命令是自定义命令，必须以 `run` 关键字开头。例如，为了构建你的应用程序，你必须使用
    `npm run build`：
- en: '[PRE40]'
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Before the introduction of npx, if you wanted to use the Angular CLI without
    a global install, you would have to run it with `npm run ng -- g c my-new-component`.
    The double-dashes are needed to let npm know where the command-line tool name
    ends and the options begin. For example, in order to start your Angular application
    on a port other than the default `4200`, you need to run `npm start -- --port
    5000`.
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 npx 引入之前，如果你想在全局安装之外使用 Angular CLI，你必须使用 `npm run ng -- g c my-new-component`
    来运行它。双横线是必需的，以便让 npm 知道命令行工具名称的结束和选项的开始。例如，为了在除了默认的 `4200` 之外的其他端口上启动你的 Angular
    应用程序，你需要运行 `npm start -- --port 5000`。
- en: 'Update your `package.json` file to run your development version of the app
    from a little-used port like `5000` as the new default behavior:'
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新你的 `package.json` 文件，以便从不太常用的端口 `5000` 运行你的开发版本应用程序，作为新的默认行为：
- en: '[PRE41]'
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Under the dependencies property, you can observe your runtime dependencies.
    These are libraries that get packaged up alongside your code and shipped to the
    client browser. It''s essential to keep this list to a minimum:'
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在依赖项属性下，你可以观察到你的运行时依赖项。这些是与你的代码一起打包并发送到客户端浏览器的库。将此列表保持最小是至关重要的：
- en: '[PRE42]'
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: In the preceding example, all Angular components are on the same version. As
    you install additional Angular components or upgrade individual ones, it is advisable
    to keep all Angular packages on the same version. This is especially easy to do
    since npm doesn't require the `--save` option anymore to permanently update the
    package version. For example, just executing `npm install @angular/router` is
    sufficient to update the version in `package.json`. This is a positive change
    overall, since what you see in `package.json` matches what is actually installed.
    However, you must be careful, because npm also automatically updates `package-lock.json`,
    which propagates your, potentially unintended, changes to your team members.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，所有 Angular 组件都在同一版本上。随着你安装额外的 Angular 组件或升级单个组件，建议保持所有 Angular 包在同一版本上。这特别容易做到，因为
    npm 不再需要 `--save` 选项来永久更新包版本。例如，只需执行 `npm install @angular/router` 就足以更新 `package.json`
    中的版本。这是一个积极的整体变化，因为你在 `package.json` 中看到的内容与实际安装的内容相匹配。然而，你必须小心，因为 npm 还会自动更新
    `package-lock.json`，这会将你的，可能是无意中做出的，更改传播给你的团队成员。
- en: 'Your development dependencies are stored under the `devDependencies` property.
    When installing new tools for your project, you must take care to append the command
    with `--save-dev` so that your dependency is correctly categorized. Dev dependencies
    are only used during development and not shipped to the client browser. You should
    familiarize yourself with every single one of these packages and their specific
    purpose. If you are unfamiliar with a package shown as we move on, your best resource
    to learn more about them is [https://www.npmjs.com/](https://www.npmjs.com/):'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 你的开发依赖存储在 `devDependencies` 属性下。当你为你的项目安装新工具时，你必须注意在命令中附加 `--save-dev`，以确保你的依赖被正确分类。开发依赖只在开发期间使用，不会发送到客户端浏览器。你应该熟悉每一个这样的包及其特定的用途。如果你对我们继续展示的包不熟悉，你了解它们最佳的资源是
    [https://www.npmjs.com/](https://www.npmjs.com/)：
- en: '[PRE43]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'The characters in front of the version numbers have specific meanings in semver:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本号前面的字符在 semver 中有特定的含义：
- en: The tilde, `~`, enables tilde ranges when all three digits of the version number
    are defined, allowing patch version upgrades to be automatically applied
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 波浪号 `~` 在版本号的三个数字都定义的情况下启用波浪号范围，允许自动应用补丁版本升级
- en: The up-caret character, `^`, enables caret ranges, allowing minor version upgrades
    to be automatically applied
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上箭头字符 `^` 启用箭头范围，允许自动应用小版本升级
- en: A lack of any character signals npm to install that exact version of the library
    on your machine
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何字符的缺失都表示 npm 将在你的机器上安装该库的确切版本
- en: 'You may notice that major version upgrades aren''t allowed to happen automatically.
    In general, updating packages can be risky. In order to ensure no package is updating
    without your explicit knowledge, you may install exact version packages by using
    npm''s `--save-exact` option. Let''s experiment with this behavior by installing
    an npm package that I published called `dev-norms`, a CLI tool that generates
    a markdown file with sensible default norms for your team to have a conversation
    about, as shown here:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会注意到，不允许自动进行主要版本升级。一般来说，更新包可能会有风险。为了确保没有任何包在没有你明确知道的情况下更新，你可以通过使用 npm 的 `--save-exact`
    选项来安装精确版本的包。让我们通过安装我发布的一个名为 `dev-norms` 的 npm 包来实验这种行为，这是一个 CLI 工具，可以生成一个包含合理默认规范的
    markdown 文件，以便你的团队进行讨论，如下所示：
- en: 'Under the `local-weather-app` directory, execute `npm install dev-norms --save-dev
    --save-exact`. Note that "`dev-norms`": "`1.7.0`" or similar has been added to
    `package.json` with `package-lock.json` automatically updated to reflect the changes
    accordingly.'
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在 `local-weather-app` 目录下，执行 `npm install dev-norms --save-dev --save-exact`。注意，"`dev-norms`":
    "`1.7.0`" 或类似的版本已添加到 `package.json` 中，并且 `package-lock.json` 会自动更新以反映相应的更改。'
- en: After the tool is installed, execute `npx dev-norms create`. A file named `dev-norms.md`
    has been created containing the developer norms mentioned previously.
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 工具安装后，执行 `npx dev-norms create`。已创建一个名为 `dev-norms.md` 的文件，其中包含之前提到的开发者规范。
- en: Save your changes to `package.json`.
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将你的更改保存到 `package.json`。
- en: Working with stale packages comes with its risks. With npm 6, the `npm audit`
    command has been introduced to make you aware of any vulnerabilities discovered
    in packages you're using. During `npm install`, if you receive any vulnerability
    notices, you may execute `npm audit` to find out details about any potential risk.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 与过时的包一起工作有其风险。在 npm 6 中，引入了 `npm audit` 命令，以便让你了解你在使用的包中发现的任何漏洞。在 `npm install`
    期间，如果你收到任何漏洞通知，你可以执行 `npm audit` 来了解任何潜在风险的详细信息。
- en: In the next section, you'll commit the changes you have made to Git.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，你将提交你已对 Git 做出的更改。
- en: Committing code using VS Code
  id: totrans-308
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 VS Code 提交代码
- en: 'To commit your changes to Git and then synchronize your commits to GitHub,
    you can use VS Code:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 要将你的更改提交到 Git 并然后将提交同步到 GitHub，你可以使用 VS Code：
- en: Switch over to the **Source Control** pane, marked as **1** here:![](img/B14094_02_05.png)
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到标记为 **1** 的 **源代码控制** 选项卡:![](img/B14094_02_05.png)
- en: 'Figure 2.5: Visual Studio Code Source Control pane'
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 2.5：Visual Studio Code 源代码控制选项卡
- en: Enter a commit message in the box marked as **2**
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在标记为 **2** 的框中输入提交信息
- en: Click on the check-mark icon, marked as **3**, to commit your changes
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击标记为 **3** 的勾号图标，以提交你的更改
- en: Finally, synchronize your changes with your GitHub repository by clicking on
    the refresh icon, marked as **4**
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，通过点击标记为 **4** 的刷新图标，将你的更改与 GitHub 仓库同步
- en: 'If you have two-factor authentication enabled, as you should, GitHub may ask
    for your credentials. In this case, you need to create a personal access token.
    Follow the instructions below to get this done:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你启用了两步验证，你应该这样做，GitHub可能会要求你的凭据。在这种情况下，你需要创建一个个人访问令牌。按照以下说明操作以完成此操作：
- en: Go to the page [https://github.com/settings/tokens](https://github.com/settings/tokens
    )
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往页面 [https://github.com/settings/tokens](https://github.com/settings/tokens)
- en: Generate a new token and copy it
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成一个新的令牌并将其复制
- en: Attempt to re-sync your change within VS Code
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试在VS Code中重新同步你的更改
- en: Ignore the GitHub authentication window, which presents you with VS Code's credential
    input bar
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 忽略GitHub身份验证窗口，该窗口会显示VS Code的凭据输入栏
- en: Enter your GitHub username, not your email
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入你的GitHub用户名，而不是你的电子邮件
- en: Paste in the token as your password
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将令牌粘贴为你的密码
- en: The sync should succeed, and subsequent syncs shouldn't prompt for a password
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同步应该成功，后续同步不应提示密码
- en: See the Git and Github Desktop section earlier in this chapter for a wider discussion
    of the various methods you can use to connect your Git client to GitHub.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章前面的Git和Github Desktop部分查看更广泛的讨论，了解你可以使用的各种方法将你的Git客户端连接到GitHub。
- en: Going forward, you can do most Git operations from within VS Code.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 从现在开始，你可以在VS Code中执行大多数Git操作。
- en: Running your Angular app
  id: totrans-325
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行你的Angular应用程序
- en: 'Run your Angular app to check whether it works. During development, you can
    execute `npm start` through the `ng serve` command; this action transpiles, packages, and
    serves the code on localhost with live-reloading enabled:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的Angular应用程序以检查它是否工作。在开发过程中，你可以通过`ng serve`命令执行`npm start`；此操作将代码编译、打包并在localhost上提供，启用实时重新加载：
- en: Execute `npm start`
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行`npm start`
- en: Navigate to `http://localhost:5000`
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到`http://localhost:5000`
- en: You should see a rendered page similar to this:![](img/B14094_02_06.png)
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该看到一个渲染的页面，类似于这个！![img/B14094_02_06.png](img/B14094_02_06.png)
- en: 'Figure 2.6: Default Angular CLI landing page'
  id: totrans-330
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图2.6：默认Angular CLI登录页面
- en: Stop your application by pressing `Ctrl` + `C` in the integrated terminal
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在集成终端中按`Ctrl` + `C`来停止你的应用程序
- en: Congrats! You're ready to start developing your web application. If you ran
    into any trouble during your setup, see the next section on how you can verify
    your code against the sample project on GitHub.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你准备好开始开发你的Web应用程序了。如果在设置过程中遇到任何问题，请查看下一节，了解如何验证你的代码与GitHub上的示例项目。
- en: Verifying your code
  id: totrans-333
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 验证你的代码
- en: The most up-to-date versions of the sample code for the book are on GitHub at
    the repository linked following. The repository contains the final and completed
    state of the code. You can verify your progress at the end of a chapter by looking
    for the end-of-chapter snapshot of code under the `projects` folder.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 书中示例代码的最新版本在GitHub上，链接如下。该存储库包含代码的最终和完成状态。你可以在章节结束时通过查找`projects`文件夹下的章节结束代码快照来验证你的进度。
- en: 'For *Chapter 2*:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 对于*第二章*：
- en: Clone the repo [https://github.com/duluca/local-weather-app](https://github.com/duluca/local-weather-app
    )
  id: totrans-336
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 克隆repo [https://github.com/duluca/local-weather-app](https://github.com/duluca/local-weather-app)
- en: Execute `npm install` on the root folder to install dependencies
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在根目录下执行`npm install`以安装依赖项
- en: 'The code sample for this chapter is under the sub-folder:'
  id: totrans-338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 本章的代码示例位于子文件夹中：
- en: '[PRE44]'
  id: totrans-339
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'To run the Angular app for this chapter, execute:'
  id: totrans-340
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要运行本章的Angular应用程序，请执行：
- en: '[PRE45]'
  id: totrans-341
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'To run Angular Unit Tests for this chapter, execute:'
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要运行本章的Angular单元测试，请执行：
- en: '[PRE46]'
  id: totrans-343
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Beware that the source code in the book or on GitHub may not always match the
    code generated by Angular CLI. There may also be slight differences in implementation
    between the code in the book and what's on GitHub because the ecosystem is ever
    evolving. It is natural for the sample code to change over time. Also on GitHub,
    expect to find corrections, fixes to support newer versions of libraries, or side-by-side
    implementations of multiple techniques for the reader to observe. The reader is
    only expected to implement the ideal solution recommended in the book. If you
    find errors or have questions, please create an issue or submit a pull request
    on GitHub for the benefit of all readers.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，书中或GitHub上的源代码可能并不总是与Angular CLI生成的代码相匹配。由于生态系统不断演变，书中代码与GitHub上代码之间的实现也可能存在细微差异。随着时间的推移，示例代码发生变化是自然的。在GitHub上，你可能会找到更正、修复以支持库的新版本，或者为读者观察而并排实现多种技术的示例。读者只需实现书中推荐的理想解决方案即可。如果你发现错误或有疑问，请为所有读者创建一个issue或提交一个pull
    request到GitHub。
- en: In the next section, I'll cover how you can optimize VS Code for Angular for
    the best possible development experience.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我将介绍如何优化 VS Code 以获得最佳的 Angular 开发体验。
- en: Optimizing VS Code for Angular
  id: totrans-346
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 优化 VS Code 以适用于 Angular
- en: It is essential to optimize your IDE to have a great development experience.
    If you leverage the automated tools that I present in this section, you can quickly
    configure your IDE and your Angular project with dozens of settings that work
    well together.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 优化您的 IDE 以获得出色的开发体验至关重要。如果您利用本节中提供的自动化工具，您可以快速配置您的 IDE 和 Angular 项目，并使用数十个协同工作的设置。
- en: Configuring your project automatically
  id: totrans-348
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动配置您的项目
- en: 'To quickly apply configuration steps covered in the upcoming chapters, run
    the commands that follow:'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 要快速应用即将在章节中涵盖的配置步骤，请运行以下命令：
- en: 'Install the Angular VS Code task:'
  id: totrans-350
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 Angular VS Code 任务：
- en: '[PRE47]'
  id: totrans-351
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Apply the Angular VS Code configuration:'
  id: totrans-352
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用 Angular VS Code 配置：
- en: '[PRE48]'
  id: totrans-353
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Install the npm Scripts for the Docker task:'
  id: totrans-354
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为 Docker 任务安装 npm 脚本：
- en: '[PRE49]'
  id: totrans-355
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Apply the npm Scripts for Docker configuration:'
  id: totrans-356
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用 Docker 的 npm 脚本配置：
- en: '[PRE50]'
  id: totrans-357
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: These settings are continually tweaked to adapt to the ever-evolving landscape
    of extensions, plugins, Angular, and VS Code. Always make sure to install a fresh
    version of the task by rerunning the install command to get the latest version.
  id: totrans-358
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些设置不断调整以适应扩展、插件、Angular 和 VS Code 的不断变化的环境。请始终确保通过重新运行安装命令来安装任务的最新版本。
- en: Execute `npm run style:fix`
  id: totrans-359
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行 `npm run style:fix`
- en: Execute `npm run lint:fix`
  id: totrans-360
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行 `npm run lint:fix`
- en: 'For more information on the mrm tasks, refer to:'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 mrm 任务更多信息，请参阅：
- en: '[https://github.com/expertly-simple/mrm-task-angular-vscode](https://github.com/expertly-simple/mrm-task-angular-vscode)'
  id: totrans-362
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/expertly-simple/mrm-task-angular-vscode](https://github.com/expertly-simple/mrm-task-angular-vscode)'
- en: '[https://github.com/expertly-simple/mrm-task-npm-docker](https://github.com/expertly-simple/mrm-task-npm-docker)'
  id: totrans-363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/expertly-simple/mrm-task-npm-docker](https://github.com/expertly-simple/mrm-task-npm-docker)'
- en: '[https://github.com/expertly-simple/mrm-task-npm-aws](https://github.com/expertly-simple/mrm-task-npm-aws)'
  id: totrans-364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/expertly-simple/mrm-task-npm-aws](https://github.com/expertly-simple/mrm-task-npm-aws)'
- en: Note that `mrm-task-npm-aws` sets up npm scripts for AWS ECS, which is used
    in *Chapter 13*, *Highly Available Cloud Infrastructure on AWS*.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`mrm-task-npm-aws` 为 AWS ECS 设置 npm 脚本，这在 *第 13 章*，*AWS 上的高可用云基础设施* 中使用。
- en: You may verify your configuration against the sample projects on GitHub. However,
    note that the configuration pieces will be applied at the root of the repository
    and not under the `projects` folder.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将配置与 GitHub 上的示例项目进行验证。请注意，配置组件将在仓库的根目录下应用，而不是在 `projects` 文件夹下。
- en: The next three sections cover the settings that were automatically applied previously.
    Feel free to skip ahead and refer back if you have questions.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的三个部分涵盖了之前自动应用的设置。如果您有问题，请随时跳过并查阅。
- en: VS Code auto save
  id: totrans-368
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: VS Code 自动保存
- en: 'Saving files all the time can get tedious. You can enable automatic saving
    by doing the following:'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 持续保存文件可能会变得繁琐。您可以通过以下步骤启用自动保存：
- en: Open VS Code
  id: totrans-370
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 VS Code
- en: Toggle the setting under **File** | **Auto Save**
  id: totrans-371
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **文件** | **自动保存** 下切换设置
- en: You can further customize many aspects of VS Code's behavior by launching **Preferences**.
    The keyboard shortcut to launch **Preferences** is [`Ctrl` + `,`] on Windows and
    [![](img/B14094_02_0011.png) + `,`] on macOS.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过启动 **首选项** 来进一步自定义 VS Code 的许多行为。在 Windows 上，启动 **首选项** 的快捷键是 `Ctrl` +
    `,`，在 macOS 上是 `[![](img/B14094_02_0011.png) + `,`]。
- en: IDE settings
  id: totrans-373
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: IDE 设置
- en: You can share such settings with your coworkers by creating a `.vscode` folder
    in the root of your project directory and placing a `settings.json` file in it.
    If you commit this file to the repository, everyone will share the same IDE experience.
    Unfortunately, individuals aren't able to override these settings with their local
    preferences, so ensure that shared settings are minimal and are agreed upon as
    a team norm.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过在项目目录的根目录下创建一个 `.vscode` 文件夹并将一个 `settings.json` 文件放入其中来与同事共享此类设置。如果您将此文件提交到仓库，每个人都将共享相同的
    IDE 体验。不幸的是，个人无法通过本地首选项覆盖这些设置，因此请确保共享设置最小化，并作为团队规范达成一致。
- en: 'Here are the customizations that I use for an optimal, battery-life-conscious
    Angular development experience:'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是我用于获得最佳、电池寿命意识的 Angular 开发体验的定制设置：
- en: '[PRE51]'
  id: totrans-376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: In later sections, as we add tools that enforce our coding style, be careful
    not to introduce new settings that overlap or contradict each other.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 在后面的部分中，当我们添加强制执行我们编码风格的工具时，请注意不要引入相互重叠或相互矛盾的新设置。
- en: IDE extensions
  id: totrans-378
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: IDE 扩展
- en: For a magical development experience with VS Code and Angular, you should install
    the Angular Essentials extension pack created and curated by John Papa. John Papa
    is one of the leading champions and thought leaders in the Angular community.
    He continuously and relentlessly seeks the best possible development experience
    you can attain so that you are more productive and happier as a developer. To
    learn more about Angular Essentials, see this blog post at [https://johnpapa.net/rec-ng-extensions](https://johnpapa.net/rec-ng-extensions)
    and the GitHub repo at [https://github.com/johnpapa/vscode-angular-essentials](https://github.com/johnpapa/vscode-angular-essentials).
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在 VS Code 和 Angular 之间获得神奇的开发体验，你应该安装由 John Papa 创建和精选的 Angular Essentials
    扩展包。John Papa 是 Angular 社区中领先的倡导者和思想领袖之一。他不断不懈地寻求最佳的开发体验，以便你作为开发者更加高效和快乐。要了解更多关于
    Angular Essentials 的信息，请参阅这篇博客文章[https://johnpapa.net/rec-ng-extensions](https://johnpapa.net/rec-ng-extensions)和
    GitHub 仓库[https://github.com/johnpapa/vscode-angular-essentials](https://github.com/johnpapa/vscode-angular-essentials)。
- en: I highly recommend you follow John Papa on Twitter at `@john_papa`.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 我强烈建议你关注 Twitter 上的 John Papa，用户名是 `@john_papa`。
- en: 'Similar to settings, you can also share recommended extensions via a JSON file.
    These are the extensions that I use for Angular development:'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 与设置类似，你也可以通过 JSON 文件共享推荐的扩展。这些是我用于 Angular 开发的扩展：
- en: '[PRE52]'
  id: totrans-382
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: VS Code also recommends some extensions for you to install. I would caution
    against installing too many extensions, as these noticeably start slowing down
    the launch performance and optimal operation of VS Code.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: VS Code 也推荐了一些扩展供你安装。我警告你，不要安装太多扩展，因为这些扩展会明显降低 VS Code 的启动性能和最佳运行状态。
- en: The VS Code ecosystem is an ever-evolving, dynamic, and rich ecosystem. As such,
    certain extensions or settings may disappear, stop working, or have bugs in them.
    If you run into any trouble or are simply curious, you can find the latest versions
    of my preferred VS Code configuration files on GitHub at [http://bit.ly/ngCodeSettings](http://bit.ly/ngCodeSettings).
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: VS Code 生态系统是一个不断演变、动态且丰富的生态系统。因此，某些扩展或设置可能会消失、停止工作或存在错误。如果你遇到任何问题或只是好奇，你可以在
    GitHub 上找到我首选的 VS Code 配置文件的最新版本，链接为[http://bit.ly/ngCodeSettings](http://bit.ly/ngCodeSettings)。
- en: Scripting code styling and linting
  id: totrans-385
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 脚本代码风格和 linting
- en: You can customize the code styling enforcement and code generation behavior
    in VS Code and the Angular CLI. The most crucial goal of automating the enforcement
    of code styling and linting rules is to set common ground between developers.
    If the team can't agree on what styling to follow, a coin toss is better than
    no agreement. Development teams should be focused on code quality and let automated
    tools worry about the indentation of their code, location of brackets, and spaces
    between parentheses. In large teams, any deviation in styling can cause significant
    headaches with merge conflicts. It is highly recommended that you implement mechanisms
    to enforce standards.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 VS Code 和 Angular CLI 中自定义代码风格强制执行和代码生成行为。自动化强制执行代码风格和 linting 规则的最关键目标是让开发者达成共识。如果团队无法就遵循哪种风格达成一致，那么抛硬币也比没有协议要好。开发团队应该专注于代码质量，让自动化工具去关心代码的缩进、括号的定位和括号之间的空格。在大团队中，任何风格上的偏差都可能导致合并冲突带来重大麻烦。强烈建议你实施强制执行标准的机制。
- en: 'I prefer StandardJS settings for JavaScript, which codify a minimal approach
    to writing code while maintaining high readability. This means two spaces for
    tabs and no semicolons. In addition to the reduced keystrokes, StandardJS also
    takes less horizontal space, which is especially valuable when your IDE can only
    utilize half of the screen, with the other half taken up by the browser. You can
    read more about StandardJS at: [https://standardjs.com/](https://standardjs.com/).'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 我更喜欢 StandardJS 的 JavaScript 设置，它将编写代码的最小化方法与高可读性相结合。这意味着制表符为两个空格，不使用分号。除了减少按键次数外，StandardJS
    还占用更少的横向空间，这在你的 IDE 只能利用屏幕一半的情况下，另一半被浏览器占用时尤其有价值。你可以在[https://standardjs.com/](https://standardjs.com/)上了解更多关于
    StandardJS 的信息。
- en: 'With the default settings, your code looks like:'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 使用默认设置，你的代码看起来像：
- en: '[PRE53]'
  id: totrans-389
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'With StandardJS settings, your code looks like:'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 StandardJS 设置，你的代码看起来像：
- en: '[PRE54]'
  id: totrans-391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: If you don't like this style, it is okay. While I'll be sharing my preferred
    settings following, feel free to tweak them to your liking. The mechanism we implement
    to enforce the rules remains the same regardless.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不喜欢这种风格，那也行。虽然接下来我会分享我的首选设置，但你可以随意调整到自己喜欢的样子。我们实施的强制执行规则机制保持不变。
- en: 'To apply and enforce code styling rules, we use some tools that provide both
    a CLI tool and a VS Code extension:'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 要应用和强制执行代码风格规则，我们使用一些提供 CLI 工具和 VS Code 扩展的工具：
- en: Prettier – used to format `.ts` files
  id: totrans-394
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Prettier – 用于格式化 `.ts` 文件
- en: ImportSort/SortImports – used to organize TypeScript import statements
  id: totrans-395
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ImportSort/SortImports – 用于组织 TypeScript 导入语句
- en: Beautify – used to format `.html` files,
  id: totrans-396
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Beautify – 用于格式化 `.html` 文件，
- en: TSLint – used as a static code analysis tool to check code readability, maintainability,
    and functionality errors
  id: totrans-397
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TSLint – 作为静态代码分析工具，用于检查代码可读性、可维护性和功能错误
- en: 'Our goal is to end up with four scripts:'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目标是最终拥有四个脚本：
- en: '`style` – to check if our code adheres to styling rules'
  id: totrans-399
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`style` – 检查我们的代码是否遵循样式规则'
- en: '`style:fix` – to automatically format code files as per styling rules'
  id: totrans-400
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`style:fix` – 自动根据样式规则格式化代码文件'
- en: '`lint` – to check if our code has any linting errors'
  id: totrans-401
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`lint` – 检查我们的代码是否有任何代码风格错误'
- en: '`lint:fix` – to automatically fix auto-fixable linting errors'
  id: totrans-402
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`lint:fix` – 自动修复可自动修复的代码风格错误'
- en: The style and lint commands would be utilized by our CI server to ensure that
    every team member is adhering to the same coding standards. The `style:fix` and
    `lint:fix` commands would help developers adhere to coding standards with as little
    effort as possible.
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 样式和代码风格命令将由我们的 CI 服务器使用，以确保每位团队成员都遵循相同的编码标准。`style:fix` 和 `lint:fix` 命令将帮助开发者以尽可能少的努力遵守编码标准。
- en: These tools are constantly updated. The behavior of these tools may shift over
    time, so keep an eye out and don't hesitate to experiment with adding/removing
    tools to this mixture to achieve the configuration that works for you.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 这些工具不断更新。这些工具的行为可能会随时间而变化，所以请密切关注，并且不要犹豫，尝试添加/删除这些工具以实现适合您的配置。
- en: Before we set up our dependencies and configuration files, ensure that all the
    extensions recommended in the IDE extensions section are installed.
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们设置依赖项和配置文件之前，请确保已安装 IDE 扩展部分中推荐的所有扩展。
- en: Configuring tooling
  id: totrans-406
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置工具
- en: 'You can start making the configuration changes by following these steps:'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过以下步骤开始进行配置更改：
- en: Make sure the **Prettier – Code formatter**, **TSLint**, **sort-imports**, and
    **Beautify** extensions are installed (already included in `extensions.json` from
    the previous section)
  id: totrans-408
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保已安装 **Prettier – 代码格式化器**、**TSLint**、**sort-imports** 和 **Beautify** 扩展（已包含在前一节的
    `extensions.json` 中）
- en: 'Install the CLI tools by executing the following command:'
  id: totrans-409
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行以下命令安装 CLI 工具：
- en: '[PRE55]'
  id: totrans-410
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: With npm, you can use `i` as an alias for `install` and `-D` instead of the
    more verbose `--save- dev` option. However, if you mistype `-D` as `-d`, you end
    up saving the package as a production dependency.
  id: totrans-411
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 npm，您可以使用 `i` 作为 `install` 的别名，而不是更冗长的 `--save-dev` 选项。然而，如果您将 `-D` 错误地输入为
    `-d`，您最终会将包保存为生产依赖项。
- en: 'Edit `package.json` by appending an `importSort` attribute at the end of the
    file:'
  id: totrans-412
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在文件末尾添加 `importSort` 属性来编辑 `package.json`：
- en: '[PRE56]'
  id: totrans-413
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Update the `tslint.json` rules for integration with Prettier and `tslint-etc`:'
  id: totrans-414
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新 `tslint.json` 规则以与 Prettier 和 `tslint-etc` 集成：
- en: '[PRE57]'
  id: totrans-415
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Add a new file to the root of your project, named `.jsbeautifyrc`:'
  id: totrans-416
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目的根目录下添加一个新文件，命名为 `.jsbeautifyrc`：
- en: '[PRE58]'
  id: totrans-417
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Add a new file to the root of your project, named `.prettierrc`:'
  id: totrans-418
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目的根目录下添加一个新文件，命名为 `.prettierrc`：
- en: '[PRE59]'
  id: totrans-419
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Add a new file to the root of your project, named `.prettierignore`. Note that
    this file doesn''t have curly brackets:'
  id: totrans-420
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目的根目录下添加一个新文件，命名为 `.prettierignore`。注意，此文件没有花括号：
- en: '[PRE60]'
  id: totrans-421
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Now we are done configuring all the tooling necessary to implement our style
    and lint scripts.
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经配置好了所有必要的工具来实现我们的样式和代码风格脚本。
- en: Implementing a style checker and fixer
  id: totrans-423
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实现样式检查器和修复器
- en: Let's implement npm scripts for style and `style:fix` commands. Npm scripts
    are a great way to document CLI scripts that your team needs to execute across
    different platforms and even on a CI server.
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们实现 npm 脚本以用于样式和 `style:fix` 命令。Npm 脚本是一种很好的方式来记录您的团队需要在不同平台和 CI 服务器上执行 CLI
    脚本。
- en: 'Now, let''s add our first script:'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们添加第一个脚本：
- en: 'Edit the `package.json` scripts attribute to add `style` and `style:fix` commands:'
  id: totrans-426
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑 `package.json` 中的脚本属性，添加 `style` 和 `style:fix` 命令：
- en: '[PRE61]'
  id: totrans-427
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Execute `npm run style` to see the files that do not adhere to styling rules
  id: totrans-428
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行 `npm run style` 来查看不遵循样式规则的文件
- en: Execute `npm run style:fix` to update all your files to the new style
  id: totrans-429
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行 `npm run style:fix` 来更新所有文件到新样式
- en: Observe all the file changes in GitHub Desktop
  id: totrans-430
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 GitHub Desktop 中观察所有文件更改
- en: Commit your changes
  id: totrans-431
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提交您的更改
- en: When you utilize inline templates in Angular, the inlined portion of HTML is
    formatted by Prettier instead of Beautify. In most of these cases, your code will
    look good, but if your HTML elements have too many attributes, your code will
    be formatted in a very verbose manner. In order to prevent this from happening,
    you may select the relevant HTML code and run the **Beautify selection** command
    within VS Code. If you add `// prettier-ignore` above the template property, Prettier
    will stop messing up your beautified HTML.
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在 Angular 中使用内联模板时，内联的 HTML 部分由 Prettier 而不是 Beautify 格式化。在这些情况的大多数中，你的代码看起来会很好，但如果你的
    HTML 元素有太多属性，你的代码将以非常冗长的方式格式化。为了防止这种情况发生，你可以选择相关的 HTML 代码，并在 VS Code 中运行 **美化选择**
    命令。如果你在模板属性上方添加 `// prettier-ignore`，Prettier 将停止干扰你的美化 HTML。
- en: Now, let's configure our linting scripts.
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们配置我们的 linting 脚本。
- en: Implementing a lint checker and fixer
  id: totrans-434
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实现一个 lint 检查器和修复器
- en: A `lint` command already exists in `package.json`. We overwrite the existing
    `lint` command with our own and implement an additional `lint:fix` command.
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: '`package.json` 中已经存在一个 `lint` 命令。我们用我们自己的命令覆盖现有的 `lint` 命令并实现一个额外的 `lint:fix`
    命令。'
- en: 'Add the new scripts:'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 添加新的脚本：
- en: 'Edit the `package.json` scripts attribute to replace `lint` and add `lint:fix`
    commands:'
  id: totrans-437
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑 `package.json` 脚本属性以替换 `lint` 并添加 `lint:fix` 命令：
- en: '[PRE62]'
  id: totrans-438
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Note that unlike the style scripts, we're excluding `test.ts` and `polyfills.ts`
    from being linted. These files ship with linting errors; they are unlikely to
    be edited frequently and since they have no bearing on the quality of our code,
    we can safely ignore them.
  id: totrans-439
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，与样式脚本不同，我们排除了 `test.ts` 和 `polyfills.ts` 的 lint 检查。这些文件带有 linting 错误；它们不太可能经常被编辑，并且由于它们对我们的代码质量没有影响，我们可以安全地忽略它们。
- en: Execute `npm run lint` to see the files that have linting errors
  id: totrans-440
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行 `npm run lint` 以查看有 linting 错误的文件
- en: Execute `npm run lint:fix` to fix any auto-fixable errors
  id: totrans-441
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行 `npm run lint:fix` 以修复任何可自动修复的错误
- en: If there are further errors, then `Ctrl`/`cmd` + `click` on the files and manually
    fix the errors
  id: totrans-442
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果还有进一步的错误，请按 `Ctrl`/`cmd` + `click` 点击文件并手动修复错误
- en: Observe all the file changes in GitHub Desktop
  id: totrans-443
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 GitHub Desktop 中观察所有文件更改
- en: Commit your changes
  id: totrans-444
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提交你的更改
- en: Don't forget to push your changes to your repository!
  id: totrans-445
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不要忘记将你的更改推送到你的仓库！
- en: Sometimes, as you type in new code or generate new components using the Angular CLI,
    you may encounter double-quotes or semicolons being underlined with a red squiggly
    line to indicate an issue. We have configured VS Code to automatically format
    files on saving, which happens automatically when the window loses focus. When
    auto-formatting is triggered, the file updates and formatting related errors disappear.
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，当你使用 Angular CLI 输入新代码或生成新组件时，可能会遇到双引号或分号被红色波浪线划下，以表示存在问题。我们已经配置了 VS Code
    在保存文件时自动格式化文件，这会在窗口失去焦点时自动发生。当自动格式化被触发时，文件会更新，与格式化相关的错误会消失。
- en: When we cover CI in *Chapter 4*, *Automated Testing, CI, and Release to Production*,
    we are going to run our style and lint checker as part of our pipeline.
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在 *第 4 章* 中介绍 CI（持续集成）时，*自动化测试、CI 和发布到生产*，我们将运行我们的样式和 lint 检查器作为我们管道的一部分。
- en: Next, configure the ng tool to get the autocomplete functionality in the terminal.
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，配置 ng 工具以在终端中获得自动完成功能。
- en: Configuring Angular CLI autocomplete
  id: totrans-449
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置 Angular CLI 自动完成
- en: 'You can get an autocomplete experience in your terminal when using the Angular
    CLI. Execute the appropriate command for your `*nix` environment:'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 Angular CLI 时，你可以在终端中获得自动完成体验。执行适用于你的 `*nix` 环境的相应命令：
- en: 'For the bash shell:'
  id: totrans-451
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 bash shell：
- en: '[PRE63]'
  id: totrans-452
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'For the zsh shell:'
  id: totrans-453
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 zsh shell：
- en: '[PRE64]'
  id: totrans-454
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'For Windows users using the Git bash shell:'
  id: totrans-455
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于使用 Git bash shell 的 Windows 用户：
- en: '[PRE65]'
  id: totrans-456
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Next, let's learn about the VS Code Auto Fixer.
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们了解 VS Code 自动修复器。
- en: VS Code Auto Fixer
  id: totrans-458
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: VS Code 自动修复器
- en: 'Sometimes, a yellow bulb icon appears next to a line of code. This might happen
    because you have typed some code that violates a rule defined in `tslint.json`.
    If you click on the bulb, you will see an action labeled as a **Fix**. You can
    take advantage of these auto-fixers to allow VS Code to fix your code automatically.
    The screenshot that follows shows an example of an **Unnecessary semicolon** issue:'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，一个黄色灯泡图标会出现在代码行旁边。这可能是由于你输入了一些违反 `tslint.json` 中定义的规则的代码。如果你点击灯泡，你会看到一个标记为
    **修复** 的操作。你可以利用这些自动修复器让 VS Code 自动修复你的代码。下面的截图显示了 **不必要的分号** 问题的示例：
- en: '![](img/B14094_02_07.png)'
  id: totrans-460
  prefs: []
  type: TYPE_IMG
  zh: '![图 B14094_02_07](img/B14094_02_07.png)'
- en: 'Figure 2.7: VS Code Auto Fixer'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.7：VS Code 自动修复器
- en: Congratulations – you're done setting up your development environment!
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜你 – 你已经完成了开发环境的设置！
- en: Summary
  id: totrans-463
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you mastered the use of CLI-based package managers for both
    Windows and macOS to speed up and automate the setup of development environments
    for you and your colleagues. You also created your first Angular project and optimized
    its configuration for development using Visual Studio Code. You then implemented
    automated style checkers and fixers to enforce coding standards and styling across
    your team. The lint checker and fixer you implemented will automatically catch
    potential coding errors and maintainability issues.
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你掌握了使用基于CLI的包管理器在Windows和macOS上的使用方法，以加快并自动化你和你同事的开发环境设置。你还创建了你的第一个Angular项目，并使用Visual
    Studio Code对其配置进行了优化，以用于开发。然后，你实现了自动化的样式检查器和修复器，以强制执行团队中的编码标准和样式。你实现的lint检查器和修复器将自动捕获潜在的编码错误和维护性问题。
- en: The automated scripts you have created codify your team norms and document them for
    new and existing members alike. By reducing variance from one developer's environment
    to the next, your team can overcome any individual configuration issue more efficiently
    and remain focused on the execution of the task at hand. With a collective understanding
    of a common environment, no single individual on the team carries the burden of
    having to help troubleshoot everyone else's issues. The same idea applies to the
    shape and style of your code files.
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 你创建的自动化脚本将规范你的团队规范，并为新成员和现有成员提供文档。通过减少一个开发者的环境与另一个开发者环境之间的差异，你的团队可以更有效地克服任何个人配置问题，并专注于手头的任务执行。有了对共同环境的集体理解，团队中的任何个人都不必承担帮助解决其他人的问题的负担。同样的想法也适用于你的代码文件的结构和样式。
- en: When a team member looks at another team member's code, it looks stylistically
    identical, which makes it easier to troubleshoot and debug an issue. As a result,
    your team is more productive. By leveraging more sophisticated and resilient tools,
    mid-to-large sized organizations can achieve considerable savings in their IT
    budgets.
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 当团队成员查看另一位团队成员的代码时，它们在风格上看起来完全相同，这使得调试和解决问题变得更加容易。因此，你的团队将更加高效。通过利用更复杂和有弹性的工具，中大型组织可以在其IT预算中实现相当大的节省。
- en: In the next chapter, you're going to learn more about the Angular platform,
    leverage Kanban using GitHub projects and GitHub issues, learn Angular fundamentals
    to build a simple web app with a full-stack architecture in mind, and get introduced
    to reactive programming with RxJS.
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习更多关于Angular平台的知识，利用GitHub项目和使用GitHub问题进行Kanban，学习Angular基础知识以构建具有全栈架构的简单Web应用，并了解使用RxJS的响应式编程。
- en: Further reading
  id: totrans-468
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: The article on Automating the Setup of the Local Developer Machine by Vishwas
    Parameshwarappa is a great place to start for using Vagrant, found at [https://www.vagrantup.com](https://www.vagrantup.com).
    You can find the article at [https://Red-gate.com/simple-talk/sysadmin/general/automating-setup-local-developer-machine](https://Red-gate.com/simple-talk/sysadmin/general/automating-setup-local-developer-machine).
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 关于通过Vishwas Parameshwarappa撰写的自动化本地开发者机器设置的文章是一个很好的起点，使用Vagrant，位于[https://www.vagrantup.com](https://www.vagrantup.com)。你可以在这里找到文章[https://Red-gate.com/simple-talk/sysadmin/general/automating-setup-local-developer-machine](https://Red-gate.com/simple-talk/sysadmin/general/automating-setup-local-developer-machine)。
- en: Other tools include Chef, found at [https://www.chef.io/](https://www.chef.io/),
    and Puppet, found at [https://puppet.com](https://puppet.com). Some developers
    prefer to work within Docker containers during coding, found at [https://www.docker.com](https://www.docker.com).
    This is done to isolate different versions of SDKs from each other. Specific development
    tools cannot be scoped to a given folder and must be installed globally or OS-wide,
    making it very difficult to work on multiple projects at the same time. I recommend
    staying away from this type of setup if you can avoid it. In the future, I expect
    such chores are going to be automated by IDEs, as CPU core counts increase, and
    virtualization tech has better hardware acceleration.
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 其他工具包括位于[https://www.chef.io/](https://www.chef.io/)的Chef和位于[https://puppet.com](https://puppet.com)的Puppet。一些开发者更喜欢在编码时使用Docker容器，位于[https://www.docker.com](https://www.docker.com)。这样做是为了隔离不同的SDK版本。特定的开发工具不能限定在给定的文件夹中，必须全局或跨操作系统安装，这使得同时处理多个项目变得非常困难。如果你能避免这种设置，我建议远离这种设置。在未来，我预计随着CPU核心数量的增加和虚拟化技术的硬件加速，这类任务将由IDE自动化。
- en: We'll leverage Docker a little later in this book, but we'll use it to isolate
    our production software dependencies from their surrounding elements, like our
    local development environment or a server in the cloud.
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本书稍后使用Docker，但我们将用它来隔离我们的生产软件依赖项，使其与周围元素（如我们的本地开发环境或云服务器）隔离开。
- en: Questions
  id: totrans-472
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Answer the following questions as best as you can to ensure that you've understood
    the key concepts from this chapter without Googling. Do you need help answering
    the questions? See *Appendix D*, *Self-Assessment Answers* online at [https://static.packt-cdn.com/downloads/9781838648800_Appendix_D_Self-Assessment_Answers.pdf](https://static.packt-cdn.com/downloads/9781838648800_Appendix_D_Self-Assessment_Answers.pdf)
    or visit [https://expertlysimple.io/angular-self-assessment](https://expertlysimple.io/angular-self-assessment).
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 尽可能地回答以下问题，以确保您已经理解了本章的关键概念，而无需使用Google。您需要帮助回答这些问题吗？请参阅*附录D*，*自我评估答案*，在线位于[https://static.packt-cdn.com/downloads/9781838648800_Appendix_D_Self-Assessment_Answers.pdf](https://static.packt-cdn.com/downloads/9781838648800_Appendix_D_Self-Assessment_Answers.pdf)或访问[https://expertlysimple.io/angular-self-assessment](https://expertlysimple.io/angular-self-assessment)。
- en: What are the motivations for using a CLI tool as opposed to a GUI?
  id: totrans-474
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与GUI相比，使用CLI工具的动机是什么？
- en: For your specific operating system, what is the suggested package manager to
    use?
  id: totrans-475
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于您的特定操作系统，建议使用哪个包管理器？
- en: What are some of the benefits of using a package manager?
  id: totrans-476
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用包管理器有哪些好处？
- en: What are the benefits of keeping the development environments of the members
    of your development team as similar to one another as possible?
  id: totrans-477
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尽可能使您的开发团队成员的开发环境彼此相似有哪些好处？
