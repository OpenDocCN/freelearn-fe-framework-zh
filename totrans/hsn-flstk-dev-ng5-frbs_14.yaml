- en: Transforming Our App into a PWA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Progressive Web App** (**PWA**) is a new way to develop a web application.
    As a part of this chapter, you will learn about PWA and explore features that
    make an application PWA-compliant. As a part of this, we will add our friends
    application to mobile home screens, and this will make our friends application
    a part of other mobile-native apps. We will also cover offline mode for our application
    so that we can show data for our users to browse. Finally, we will audit our application
    in the **Lighthouse** tool, which provides a good insight into our Progressive
    Web Application.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to PWA
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to service worker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding our application to phone home screens
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling offline mode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compliance testing using Lighthouse
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to PWA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PWA is a web app that uses enhanced features to deliver a mobile app-like experience
    to the users. This web application meets certain requirements and is deployed
    to the Firebase server, which is accessible through URL and indexed by the Google
    search engine. Progressive web application development is a paradigm shift in
    recent years to make your web application universally available.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are a few of the features that make an application PWA-compliant:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Power of website and app**: The application is optimized to work perfectly
    well on mobiles and in browsers. It has all the capabilities of a mobile app,
    such as offline mode and push notifications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**App store not required**: Similar to a website, we don''t require an app
    store and this is readily available for use with the latest software update.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**App-Like**: The web application looks like a mobile application. It appears
    along with other mobile apps and occupies the full screen as a normal app.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Connectivity-Independent**: These apps are independent of network types.
    They work quite well on weak networks, which gives users a seamless experience.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Additions to the home screen**: This allows a user to add our website to
    their home screen so that they become a part of the app family. Users can frequently
    launch the application without opening the browser.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Safe**: This app works on HTTPS, so they are safe from attacks or hacks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Push Notification**: With the advent of service worker, it is possible to
    send push notifications to a web application. This is really helpful in engaging
    the user with our application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Searchable**: Similar to a website, this app is searchable using Google Search.
    We can optimize our website with keywords so that PWA apps are recognizable and
    easily searchable by users.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Link able**: This kind of app is easily shareable via links just like a normal
    web application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to service worker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Service worker is a script that runs in background. This background script does
    not interact with DOM elements. This helps support features such as push notification
    and offline mode, and service worker will be greatly enhanced in future to support
    other new features.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the prerequisites for service worker:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Browser support**: Service worker is supported in the Chrome, Firefox, and
    Opera browsers, and the support will be extended for other browsers soon.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**HTTPS support**: **Hyper text transfer protocol secure** (**HTTPS**) is a
    secure version of HTTP and is one of the prerequisites for PWA. This ensures that
    all communication between browser and server is encrypted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding our application to phone home screens
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is one of the most important features of Progressive Web Apps and provides
    many advantages, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Easier access**: Users normally put their most-used app on the home screen,
    as this provides easier access to the application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Engagement**: A user can engage with our application more frequently'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The steps involved in making our web application appear on the home screen
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: In order to give our web application a mobile app appearance, we will modify
    the `manifest.json` file as shown in the following code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the friends application in your phone's Chrome browser using the deployed
    application URL available from your Firebase portal. The page prompts you with
    an option to add the application to the home screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here''s the `manifest.json` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Take a look at the following detailed description of properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name`: This name appears when the add to home screen banner appears and Chrome
    gives the option to modify the name dynamically.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`short_name`: This appears below the application icon in the phone home screen.
    In our application, `name` and `short_name` are the same.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`icons`: According to the PWA standard, the recommended icon size is 192 x
    192, and this icon appears on phone home screens.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`background_color`: The specified background color appears as the icon''s background
    color.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`theme_color`: When a user clicks on the friends application on the home screen,
    this color appears in the splash screen of your mobile application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`display`: Android Chrome gives native style when a page is opened, as it removes
    the navigation bar and give up tab to task switcher.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`start_url`: This page is `index.html` in web applications, and typically this
    is our home page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`orientation`: This enforces either portrait or landscape orientation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Our application on a phone home screen looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00074.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The splash screen for our app screen looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00075.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Enabling offline mode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will cover how to enable offline mode for our application,
    which helps the user open our web application without an internet connection.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to support offline mode, we have to cache resources in the client
    browser, and for that, we use the precache plugin to cache our resources using
    service worker. It creates the service worker file using **sw-precache**. The
    steps involved are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Installing the plugin**: The first step is to install the precache plugin
    in our current project using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Creating precache JavaScript**: The precache plugin uses the precache configuration
    file to define resources to cache in the client browser. For more details about
    the precache plugin, refer to [https://github.com/goldhand/sw-precache-webpack-plugin](https://github.com/goldhand/sw-precache-webpack-plugin).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here''s the complete `precache.config.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Configuring package.json**: Once we create the configuration file, we need
    to create a new build tag called `pwa` and refer the cache file in`package.json`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here''s the modified `package.json` :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**Registering service worker**: Once we create the new build, we need to register
    the service worker that is created by the precache plugin in `index.html`, as
    follows. Here''s the modified `index.html`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**Running the new build script**: Once we configure the service worker, we
    can run the production build using the following command; this will create all
    the files with service worker in their distribution folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**Deploying**: Finally, we deploy the newly created files to Firebase. Once
    they are deployed, we can open the application on our phone''s home screen, and
    it will cache all the required resources in the client browser.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Compliance testing using Lighthouse
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Lighthouse is an open source automated tool. It audits the application on performance,
    accessibility, progressive web apps, and so on. This is available with Chrome's
    developer tools in the Audits tab. So, go to the Chrome developer tool, then open
    the Audits tab, and click on the Perform an audit... button
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to see improvements in our application, we can use this tool in two
    phases:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Without any PWA changes**: We can run this tool without any of the preceding
    changes in our application and take a look at the performance. Since our application
    does not comply with the PWA criteria, our score will not be good.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Take a look at the following screenshot showing the score when we run Lighthouse—it
    fails in five audits and the score is shown in red:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00076.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: '**With PWA changes**: Now, apply all the PWA changes as discussed in this chapter
    in our friends application, then run this tool and take a look at our audit performance.
    As shown in the following screenshot, our PWA score is 82 and is shown in green:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00077.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed progressive web apps. We covered PWAs and all
    their key features. We discussed service worker, which supports push notification,
    offline mode, and so on. We enhanced `manifest.json` for our web application and
    added our application to a phone home screen. We enabled the offline cache using
    the `sw-precache` plugin. Finally, we used the Lighthouse tool to evaluate our
    application's PWA compliance.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we come to the end of our book, but this is not the end of web application
    development. This books introduced you to a practical approach to Angular and
    Firebase. You need to carry forward this knowledge and develop another live application;
    this will give you a lot of confidence.
  prefs: []
  type: TYPE_NORMAL
- en: All the best for your next application using Angular and Firebase!
  prefs: []
  type: TYPE_NORMAL
