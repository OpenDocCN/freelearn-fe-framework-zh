["```js\nimport { useState } from 'react';\nimport classes from './BlogPosts.module.css';\nasync function fetchPosts() {\n  const response = await fetch('https://jsonplaceholder.typicode.com/posts');\n  const blogPosts = await response.json();\n  return blogPosts;\n}\nfunction BlogPosts() {\n  const [loadedPosts, setLoadedPosts] = useState([]);\n  fetchPosts().then((fetchedPosts) => setLoadedPosts(fetchedPosts));\n  return (\n    <ul className={classes.posts}>\n      {loadedPosts.map((post) => (\n        <li key={post.id}>{post.title}</li>\n      ))}\n    </ul>\n  );\n}\nexport default BlogPosts; \n```", "```js\nimport { useState } from 'react';\nimport classes from './BlogPosts.module.css';\nasync function fetchPosts() {\n  const response = await fetch('https://jsonplaceholder.typicode.com/posts');\n  const blogPosts = await response.json();\n  return blogPosts;\n}\nfunction BlogPosts() {\n  const [loadedPosts, setLoadedPosts] = useState([]);\n  **function****handleFetchPosts****() {**\n    **fetchPosts****().****then****(****(****fetchedPosts****) =>****setLoadedPosts****(fetchedPosts));**\n  **}**\n  return (\n    <>\n      **<****button****onClick****=****{handleFetchPosts}****>****Fetch Posts****</****button****>**\n      <ul className={classes.posts}>\n        {loadedPosts.map((post) => (\n          <li key={post.id}>{post.title}</li>\n        ))}\n      </ul>\n    </>\n  );\n}\nexport default BlogPosts; \n```", "```js\nfunction ControlCenter() {\n  function handleStart() {\n    // do something ...\n  }\n  console.log('Component is rendering!'); // this is a side effect!\n  return (\n    <div>\n      <p>Press button to start the review process</p>\n      <button onClick={handleStart}>Start</button>\n    </div>\n  );\n} \n```", "```js\nimport { useState, **useEffect** } from 'react';\nimport classes from './BlogPosts.module.css';\nasync function fetchPosts() {\n  const response = await fetch('https://jsonplaceholder.typicode.com/posts');\n  const blogPosts = await response.json();\n  return blogPosts;\n}\nfunction BlogPosts() {\n  const [loadedPosts, setLoadedPosts] = useState([]);\n  **useEffect****(****function** **() {**\n    **fetchPosts****().****then****(****(****fetchedPosts****) =>****setLoadedPosts****(fetchedPosts));**\n  **}, []);**\n  return (\n    <ul className={classes.posts}>\n      {loadedPosts.map((post) => (\n        <li key={post.id}>{post.title}</li>\n      ))}\n    </ul>\n  );\n}\nexport default BlogPosts; \n```", "```js\nuseEffect(function () {\n  fetchPosts().then((fetchedPosts) => setLoadedPosts(fetchedPosts));\n}); // this would cause an infinite loop again! \n```", "```js\nuseEffect(function () {\n  fetchPosts().then((fetchedPosts) => setLoadedPosts(fetchedPosts));\n}, []); \n```", "```js\nimport { useState, useEffect } from 'react';\nimport classes from './BlogPosts.module.css';\nasync function fetchPosts(url) {\n  const response = await fetch(url);\n  const blogPosts = await response.json();\n  return blogPosts;\n}\nfunction BlogPosts(**{ url }**) {\n  const [loadedPosts, setLoadedPosts] = useState([]);\n  useEffect(function () {\n    fetchPosts(**url**)\n     .then((fetchedPosts) => setLoadedPosts(fetchedPosts));\n  }, **[url]**);\n  return (\n    <ul className={classes.posts}>\n      {loadedPosts.map((post) => (\n        <li key={post.id}>{post.title}</li>\n      ))}\n    </ul>\n  );\n}\nexport default BlogPosts; \n```", "```js\nuseEffect(function () {\n  fetchPosts(url)\n    .then((fetchedPosts) => setLoadedPosts(fetchedPosts));\n}, [url]); \n```", "```js\nuseEffect(function () {\n  fetchPosts(url)\n    .then((fetchedPosts) => setLoadedPosts(fetchedPosts));\n}, [url, fetchPosts, fetchedPosts, setLoadedPosts]); \n```", "```js\nimport { useState, useEffect } from 'react';\nfunction Alert() {\n  const [alertDone, setAlertDone] = useState(false);\n  useEffect(function () {\n    console.log('Starting Alert Timer!');\n    setTimeout(function () {\n      console.log('Timer expired!');\n      setAlertDone(true);\n    }, 2000);\n  }, []);\n  return (\n    <>\n      {!alertDone && <p>Relax, you still got some time!</p>}\n      {alertDone && <p>Time to get up!</p>}\n    </>\n  );\n}\nexport default Alert; \n```", "```js\nimport { useState } from 'react';\nimport Alert from './components/Alert.jsx';\nfunction App() {\n  const [showAlert, setShowAlert] = useState(false);\n  function handleShowAlert() {\n    // state updating is done by passing a function to setShowAlert\n    // because the new state depends on the previous state (it's the opposite)\n    setShowAlert((isShowing) => !isShowing);\n  }\n  return (\n    <>\n      <button onClick={handleShowAlert}>\n        {showAlert ? 'Hide' : 'Show'} Alert\n      </button>\n      {showAlert && <Alert />}\n    </>\n  );\n}\nexport default App; \n```", "```js\nuseEffect(function () {\n  **let** **timer;**\n  console.log('Starting Alert Timer!');\n  **timer =** setTimeout(function () {\n    console.log('Timer expired!');\n    setAlertDone(true);\n  }, 2000);\n  **return****function****() {**\n    **clearTimeout****(timer);**\n  **}**\n}, []); \n```", "```js\nreturn function() {\n  console.log('Cleanup!');\n  clearTimeout(timer);\n} \n```", "```js\nfunction Demo() {\n  const [a, setA] = useState(0); // state updating functions aren't called\n  const [b, setB] = useState(0); // in this example\n  useEffect(function() {\n    console.log(a);\n  }, [a]);  \n\n  useEffect(function() {\n    console.log(b);\n  }, [b]);\n  // return some JSX code ...\n} \n```", "```js\nfunction Alert() {\n  function setAlert() {\n    setTimeout(function() {\n      console.log('Alert expired!');\n    }, 2000);\n  }\n  useEffect(function() {\n    setAlert();\n  }, [setAlert]);\n  // return some JSX code ...\n} \n```", "```js\nfunction Alert() {\n  **const** **[alertMsg, setAlertMsg] =** **useState****(****'Expired!'****);**\n  **function****handleChangeAlertMsg****(****event****) {**\n    **setAlertMsg****(event.****target****.****value****);**\n  **}**\n  function setAlert() {\n    setTimeout(function () {\n      console.log(**alertMsg**);\n    }, 2000);\n  }\n  useEffect(\n    function () {\n      setAlert();\n    },\n    []\n  );\n  **return****<****input****type****=****\"text\"****onChange****=****{handleChangeAlertMsg}** **/>****;**\n}\nexport default Alert; \n```", "```js\nuseEffect(\n  function () {\n    setAlert();\n  },\n  [setAlert]\n); \n```", "```js\nfunction setAlert() {\n  return setTimeout(function () {\n    console.log(alertMsg);\n  }, 2000);\n}\nuseEffect(\n  function () {\n    **const** **timer =** **setAlert****();**\n    **return****function** **() {**\n      **clearTimeout****(timer);**\n    **};**\n  },\n  [setAlert]\n); \n```", "```js\nuseEffect(\n  function () {\n    **function****setAlert****() {**\n      **return****setTimeout****(****function** **() {**\n        **console****.****log****(alertMsg);**\n      **},** **2000****);**\n    **}**\n    const timer = setAlert();\n    return function () {\n      clearTimeout(timer);\n    };\n  },\n  []\n); \n```", "```js\nuseEffect(\n  function () {\n    function setAlert() {\n      return setTimeout(function () {\n        console.log(alertMsg);\n      }, 2000);\n    }\n    const timer = setAlert();\n    return function () {\n      clearTimeout(timer);\n    };\n  },\n  **[alertMsg]**\n); \n```", "```js\nimport { useState, useEffect } from 'react';\nfunction Alert() {\n  const [enteredEmail, setEnteredEmail] = useState('');\n  const [enteredPassword, setEnteredPassword] = useState('');\n  function handleUpdateEmail(event) {\n    setEnteredEmail(event.target.value);\n  }\n  function handleUpdatePassword(event) {\n    setEnteredPassword(event.target.value);\n  }\n  function validateEmail() {\n    if (!enteredEmail.includes('@')) {\n      console.log('Invalid email!');\n    }\n  }\n  useEffect(function () {\n    validateEmail();\n  }, [validateEmail]);\n  return (\n    <form>\n      <div>\n        <label>Email</label>\n        <input type=\"email\" onChange={handleUpdateEmail} />\n      </div>\n      <div>\n        <label>Password</label>\n        <input type=\"password\" onChange={handleUpdatePassword} />\n      </div>\n      <button>Save</button>\n    </form>\n  );\n}\nexport default Alert; \n```", "```js\nimport { useState, useEffect, useCallback } from 'react';\nfunction Alert() {\n  const [enteredEmail, setEnteredEmail] = useState('');\n  const [enteredPassword, setEnteredPassword] = useState('');\n  function handleUpdateEmail(event) {\n    setEnteredEmail(event.target.value);\n  }\n  function handleUpdatePassword(event) {\n    setEnteredPassword(event.target.value);\n  }\n  **const** **validateEmail =** **useCallback****(**\n    **function** **() {**\n      **if** **(!enteredEmail.****includes****(****'@'****)) {**\n        **console****.****log****(****'Invalid email!'****);**\n      **}**\n    **},**\n    **[enteredEmail]**\n  **);**\n  useEffect(\n    function() {\n      validateEmail();\n    },\n    [validateEmail]\n  );\n  // return JSX code ...\n}\nexport default Alert; \n```", "```js\nimport { useEffect } from 'react';\nfunction Error(props) {\n  useEffect(\n    function () {\n      // performing some error logging\n      // in a real app, a HTTP request might be sent to some analytics API\n      console.log('An error occurred!');\n      console.log(props.message);\n    },\n    [props]\n  );\n  return <p>{props.message}</p>;\n}\nexport default Error; \n```", "```js\nimport { useState } from 'react';\nimport Error from './Error.jsx';\nfunction Form() {\n  const [enteredEmail, setEnteredEmail] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  function handleUpdateEmail(event) {\n    setEnteredEmail(event.target.value);\n  }\n  function handleSubmitForm(event) {\n    event.preventDefault();\n    if (!enteredEmail.endsWith('.com')) {\n      setErrorMessage('Only email addresses ending with .com are accepted!');\n    }\n  }\n  return (\n    <form onSubmit={handleSubmitForm}>\n      <div>\n        <label>Email</label>\n        <input type=\"email\" onChange={handleUpdateEmail} />\n      </div>\n      {errorMessage && <Error message={errorMessage} />}\n      <button>Submit</button>\n    </form>\n  );\n}\nexport default Form; \n```", "```js\nfunction Error(props) {\n  const { message } = props; // destructure to extract required properties\n  useEffect(\n    function () {\n      console.log('An error occurred!');\n      console.log(message);\n    },\n    // [props] // don't use the entire props object!\n    [message]\n  );\n  return <p>{message}</p>;\n} \n```", "```js\nfunction Error({message}) {\n  // ...\n} \n```", "```js\nuseEffect(async function () {\n  const fetchedPosts = await fetchPosts();\n  setLoadedPosts(fetchedPosts);\n}, []); \n```", "```js\nuseEffect(function () {\n  fetchPosts().then((fetchedPosts) => setLoadedPosts(fetchedPosts));\n}, []); \n```", "```js\nuseEffect(function () {\n  async function loadData() {\n    const fetchedPosts = await fetchPosts();\n    setLoadedPosts(fetchedPosts);\n  }\n\n  loadData();\n}, []); \n```"]