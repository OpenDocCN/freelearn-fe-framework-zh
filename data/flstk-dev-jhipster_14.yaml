- en: Best Practices with JHipster
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JHipster的最佳实践
- en: 'In the previous chapters of the book, we learned about JHipster and the various
    tools and technologies it supports in detail. These are the things we have learned
    so far:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的前几章中，我们详细学习了JHipster以及它所支持的多种工具和技术。以下是到目前为止我们所学到的东西：
- en: We learned to develop monolithic and microservice applications. We also learned
    about differences in the architecture and reasons to choose one over the other.
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们学习了如何开发单体和微服务应用程序。我们还了解了架构上的差异以及选择其中一个而不是另一个的原因。
- en: We created entities using JDL, and we customized the generated applications
    for our business needs.
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用JDL创建了实体，并根据我们的业务需求对生成的应用程序进行了定制。
- en: We created a CI-CD setup using Jenkins.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用Jenkins创建了一个CI-CD设置。
- en: We deployed the monolith application to the Heroku cloud
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将单体应用程序部署到了Heroku云平台
- en: We deployed the microservice architecture to the Google cloud using Kubernetes
    and Docker.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用Kubernetes和Docker将微服务架构部署到了Google云平台。
- en: We learned about Spring Framework, Spring Boot, Angular, React, Docker, and
    much more.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们学习了Spring框架、Spring Boot、Angular、React、Docker等等。
- en: 'In this chapter, we will see what steps to take next and use what you have
    learned from this book, and we will also talk about some of the best practices,
    tips, tricks, and suggestions from the JHipster community. As core contributors
    of JHipster, we will also provide some insights and lessons learned by us in this
    chapter. The following are some of the topics that we will touch upon:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看到下一步要采取的步骤，以及如何使用本书中学到的知识，我们还将讨论一些来自JHipster社区的最佳实践、技巧、窍门和建议。作为JHipster的核心贡献者，我们还将提供一些我们在本章中学到的见解和经验教训。以下是一些我们将涉及的主题：
- en: The next steps to pursue
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接下来的步骤
- en: The best practices to keep in mind
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要牢记的最佳实践
- en: Using JHipster modules
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用JHipster模块
- en: The next steps to pursue
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接下来的步骤
- en: JHipster supports a lot of technologies and learning about all of them would
    require an insane amount of time and effort; it cannot be done in a single book.
    Each technology supported would require a book on its own to learn and master
    it. If you are already familiar with the core concepts of web development, you
    will have a fairly good idea how a JHipster application works by now. We hope
    this book gave you a good introduction to the technologies and JHipster itself.
    But this in itself isn't sufficient; you will have to keep learning more to become
    a master. The following are some of the tasks that you can pursue to hone your
    skills in web development using JHipster further. But, before that, we would recommend
    that you learn more about Spring Framework and the Angular/React ecosystem to
    complement what you have learned in this book.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: JHipster支持许多技术，了解所有这些技术需要大量的时间和精力；这不可能在一本书中完成。每个支持的技术都需要一本单独的书来学习和掌握。如果你已经熟悉了网络开发的核心概念，那么你现在应该已经相当清楚地了解JHipster应用程序是如何工作的了。我们希望这本书为你提供了技术和JHipster本身的良好介绍。但仅仅这样是不够的；你需要继续学习才能成为大师。以下是一些你可以追求的任务，以进一步提高你在使用JHipster进行网络开发方面的技能。但在那之前，我们建议你更多地了解Spring框架和Angular/React生态系统，以补充你在本书中学到的内容。
- en: Adding a shopping cart for the application
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为应用程序添加购物车
- en: 'In [Chapter 5](63e6ed92-1616-40b7-86b8-1b3332fcbfb7.xhtml)*, Customization
    and Further Development*, we saw how the generated application can be customized
    to make it look and behave like an e-commerce website. As mentioned there, it
    is not enough to make the application truly usable. The following are some of
    the features that you can try to implement to make the application more feature
    complete:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第5章](63e6ed92-1616-40b7-86b8-1b3332fcbfb7.xhtml)*定制和进一步开发*中，我们看到了生成的应用程序如何被定制以使其看起来和表现得像一个电子商务网站。正如那里所提到的，仅仅使应用程序真正可用是不够的。以下是一些你可以尝试实现的功能，以使应用程序更加功能完善：
- en: 'Add a simple shopping cart feature on the client-side:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在客户端添加一个简单的购物车功能：
- en: Create a `ProductOrder` object to hold the `OrderItems`. The `ProductOrder`
    is related to the Customer so tag it to the customer using details of the currently
    logged-in user.
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`ProductOrder`对象来保存`OrderItems`。`ProductOrder`与客户相关联，因此使用当前登录用户的详细信息将其标记为客户。
- en: Add an add to cart button to the product items in the list. On clicking the
    button, create a new `OrderItem` for the Product and add the `OrderItem` to the
    `ProductOrder`'s `OrderItems` array. If the same product is clicked more than
    once, increase the quantity attribute of the existing `OrderItem`. Add a shopping
    cart dialog to list down all the `OrderItems` added to the `ProductOrder`. It
    can use a similar listing UI to the products, or a simple table to show the product,
    total price, and quantity.
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在列表中的产品项上添加一个“添加到购物车”按钮。点击按钮时，为产品创建一个新的 `OrderItem` 并将其添加到 `ProductOrder` 的
    `OrderItems` 数组中。如果同一产品被点击多次，则增加现有 `OrderItem` 的数量属性。添加一个购物车对话框以列出添加到 `ProductOrder`
    的所有 `OrderItems`。它可以使用与产品类似的列表 UI，或者一个简单的表格来显示产品、总价和数量。
- en: Add a `view cart` button to the product list page to view the shopping cart
    dialog.
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在产品列表页面上添加一个“查看购物车”按钮以查看购物车对话框。
- en: 'Add an order now feature:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加“现在下单”功能：
- en: Add an order now button to the product list page.
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在产品列表页面上添加一个“现在下单”按钮。
- en: On clicking the button, send the `ProductOrder` to the REST API to create a
    new `ProductOrder`, use the `product-order.service.ts` for this.
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击按钮时，将 `ProductOrder` 发送到 REST API 以创建一个新的 `ProductOrder`，使用 `product-order.service.ts`
    进行此操作。
- en: At the backend, modify the save method of `ProductOrderService.java` to create
    an Invoice and Shipment for the `ProductOrder` and save them all.
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在后端，修改 `ProductOrderService.java` 的保存方法以创建 `ProductOrder` 的发票和装运，并将它们全部保存。
- en: Let us assume that we accept cash on delivery so let us skip integrating with
    a payment gateway for now.
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假设我们接受货到付款，所以现在让我们跳过与支付网关的集成。
- en: 'Send an order confirmation to the customer:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向客户发送订单确认：
- en: JHipster comes with mail configuration and templates out of the box. You can
    configure your own SMTP server details in `src/main/resources/config/application-*.yml`.
    Refer to [http://www.jhipster.tech/tips/011_tip_configuring_email_in_jhipster.html](http://www.jhipster.tech/tips/011_tip_configuring_email_in_jhipster.html)
    for instructions on how to configure popular SMTP services.
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: JHipster 默认提供邮件配置和模板。您可以在 `src/main/resources/config/application-*.yml` 中配置自己的
    SMTP 服务器详情。有关如何配置流行 SMTP 服务的说明，请参阅 [http://www.jhipster.tech/tips/011_tip_configuring_email_in_jhipster.html](http://www.jhipster.tech/tips/011_tip_configuring_email_in_jhipster.html)。
- en: Create a new email template in `src/main/resources/mails` for order confirmation.
    Provide the details of products, total price, and quantity in the email.
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `src/main/resources/mails` 中创建一个新的订单确认电子邮件模板。在电子邮件中提供产品详情、总价和数量。
- en: Use the provided `sendEmailFromTemplate` method in `MailService.java` to send
    the email when an Invoice is successfully created.
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `MailService.java` 中提供的 `sendEmailFromTemplate` 方法在成功创建发票时发送电子邮件。
- en: 'Create a customer profile when registering a new user:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在注册新用户时创建客户档案：
- en: Add fields to the registration page and create customer entity for every user
    from the details automatically.
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在注册页面上添加字段，并从详情中自动为每个用户创建客户实体。
- en: Try to apply the changes to the microservice application as well.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试将更改应用到微服务应用程序中。
- en: Improving end-to-end tests
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 改进端到端测试
- en: 'In [Chapter 6](39f6bb2a-8691-42c6-b010-ba71ee36a6c9.xhtml), *Testing and Continuous
    Integration*, we saw that some of the e2e tests were commented out due to the
    difficulty in generating tests for an entity with a required relationship. Try
    to fix the tests with the following approach:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [第 6 章](39f6bb2a-8691-42c6-b010-ba71ee36a6c9.xhtml)，“测试和持续集成”中，我们看到了由于为具有必需关系的实体生成测试的难度，一些端到端测试被注释掉了。尝试使用以下方法修复测试：
- en: Add a method to delete entities after creation, similar to what we saw in [Chapter
    6](39f6bb2a-8691-42c6-b010-ba71ee36a6c9.xhtml), *Testing and Continuous Integration*,
    for the customer entity spec.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个在创建后删除实体的方法，类似于我们在 [第 6 章](39f6bb2a-8691-42c6-b010-ba71ee36a6c9.xhtml)，“测试和持续集成”中看到的客户实体规范。
- en: Uncomment the commented out e2e tests in the files under `src/test/javascript/e2e/entities`.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `src/test/javascript/e2e/entities` 下的文件中取消注释已注释的端到端测试。
- en: Navigate the protractor to the related entity page and create a new item. If
    the related entity has required relationships then follow the same approach and
    nest them until all the required entities are in place. This can be done in a `beforeAll`
    method of the test as well.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Protractor 导航到相关实体页面并创建一个新条目。如果相关实体有必需的关系，则采用相同的方法并嵌套它们，直到所有必需的实体都到位。这也可以在测试的
    `beforeAll` 方法中完成。
- en: Now go back to the entity under test and see whether the test works fine.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在回到测试的实体，看看测试是否正常工作。
- en: Once the test is complete, delete the created entities in the `afterAll` method
    of the test.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦测试完成，请在测试的`afterAll`方法中删除创建的实体。
- en: Explore whether you can automate the creation of an entity item on the page
    object of the entity and use it when needed.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 探索是否可以自动化在实体页面对象上创建实体项，并在需要时使用它。
- en: Improving the CI/CD pipeline
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 改进CI/CD管道
- en: 'In [Chapter 6](39f6bb2a-8691-42c6-b010-ba71ee36a6c9.xhtml), *Testing and Continuous
    Integration*, when we created the `Jenkinsfile` using the CI/CD sub-generator,
    we commented out the deployment stage. Re-enable it and check whether the application
    is deployed to Heroku when you make new commits:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第6章](39f6bb2a-8691-42c6-b010-ba71ee36a6c9.xhtml)“测试和持续集成”中，当我们使用CI/CD子生成器创建`Jenkinsfile`时，我们注释掉了部署阶段。重新启用它，并在你进行新提交时检查应用程序是否已部署到Heroku：
- en: See if you can add e2e tests to the pipeline.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 看看你是否可以向管道中添加端到端测试。
- en: If your application is on GitHub, try to add Travis to the project using the
    ci-cd sub-generator.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你的应用程序在GitHub上，尝试使用ci-cd子生成器将Travis添加到项目中。
- en: Building a JHipster module
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建JHipster模块
- en: 'JHipster has two mechanisms to extend its features:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: JHipster有两种机制来扩展其功能：
- en: A modules system, which lets users build their own Yeoman generators ([http://www.jhipster.tech/modules/creating-a-module/](http://www.jhipster.tech/modules/creating-a-module/)) 
    to complement JHipster
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个模块系统，允许用户构建自己的Yeoman生成器([http://www.jhipster.tech/modules/creating-a-module/](http://www.jhipster.tech/modules/creating-a-module/))来补充JHipster
- en: A new blueprint mechanism introduced with JHipster 5 to customize required parts
    of the code generated by JHipster
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JHipster 5引入的新蓝图机制，用于自定义JHipster生成的代码所需的部分
- en: The difference between a **module** and a **blueprint** is that a blueprint
    lets you override certain parts of the generated application while JHipster scaffolds
    the remaining parts. For example, a blueprint can override the client-side code
    alone, while the server side is generated by JHipster. A module, on the other
    hand, can only change what is generated by JHipster and hence is more suitable
    for adding complementing features on top of the ones created by JHipster.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**模块**和**蓝图**之间的区别在于，蓝图允许你覆盖生成应用程序的某些部分，而JHipster则构建剩余的部分。例如，蓝图可以单独覆盖客户端代码，而服务器端则由JHipster生成。另一方面，模块只能更改由JHipster生成的部分，因此更适合在JHipster创建的部分之上添加补充功能。'
- en: Try to build a module to add a simple page to your application.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试构建一个模块来向你的应用程序添加一个简单的页面。
- en: You can use the JHipster module generator ([https://github.com/jhipster/generator-jhipster-module](https://github.com/jhipster/generator-jhipster-module))
    to scaffold a new module.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用JHipster模块生成器([https://github.com/jhipster/generator-jhipster-module](https://github.com/jhipster/generator-jhipster-module))来构建一个新的模块。
- en: Best practices to keep in mind
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 需要牢记的最佳实践
- en: Over the years, the JHipster community has identified and adopted a lot of best
    practices from the technologies and tools it supports and from the general technical
    community. While JHipster has tried to follow these best practices in the code
    it creates, the following are some best practices, tips, and tricks that you as
    a user should follow.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 几年来，JHipster社区已经识别并采纳了它支持的技术和工具以及一般技术社区中的许多最佳实践。虽然JHipster已经在其创建的代码中尝试遵循这些最佳实践，但以下是一些最佳实践、技巧和窍门，作为用户你应该遵循。
- en: Choosing a client-side framework
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择客户端框架
- en: 'When using JHipster you have an option to choose between Angular and React
    as the client-side framework. Do not choose something just for its hype, choose
    based on your requirement, team composition, and familiarity:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用JHipster时，你可以选择Angular或React作为客户端框架。不要仅仅因为其炒作而选择，要根据你的需求、团队构成和熟悉程度来选择：
- en: If you come from a heavy Java/Spring background, then Angular will be much easier
    to follow and work with
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你来自重量级的Java/Spring背景，那么Angular将更容易遵循和操作
- en: If your application requires heavy state management and shared state, then React
    would be a more natural fit
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你的应用程序需要重型状态管理和共享状态，那么React将更适合
- en: If you are planning to build a native mobile client for your application then
    the more mature React is a good choice for this space, with React Native allowing
    you to reuse a lot of code between your web and mobile application
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你计划为你的应用程序构建原生移动客户端，那么更成熟的React是这个空间的好选择，React Native允许你在Web应用程序和移动应用程序之间重用大量代码
- en: If your application depends heavily on HTML pages produced by a design team
    or a third-party, then Angular will be much easier to integrate than React
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你的应用程序高度依赖于由设计团队或第三方生成的HTML页面，那么与React相比，Angular将更容易集成。
- en: If you need a lot of widgets that are not part of standard Bootstrap, then use
    an existing widget library, such as PrimeNG or VMware Clarity, rather than assembling
    widgets from different origins. However, if you need only a few more widgets on
    top of Bootstrap, then stick to Bootstrap and use a Bootstrap compatible widget
    for Angular or React.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要很多不属于标准Bootstrap的组件，那么请使用现有的组件库，例如PrimeNG或VMware Clarity，而不是从不同来源组装组件。然而，如果你只需要在Bootstrap之上添加几个组件，那么请坚持使用Bootstrap，并为Angular或React使用兼容Bootstrap的组件。
- en: Regardless of what you choose, follow the guidelines and best practices from
    that project's community.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你选择什么，都要遵循该项目的社区提供的指南和最佳实践。
- en: Choosing a database option
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择数据库选项
- en: 'JHipster provides support for many kinds of databases, ranging from SQL to
    NoSQL. The following are some considerations when choosing a DB:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: JHipster支持许多类型的数据库，从SQL到NoSQL。以下是在选择数据库时的一些考虑因素：
- en: 'For most cases, a SQL DB would be more than sufficient, hence if you do not
    see any reason to go with other NoSQL solutions, stick to SQL and choose from
    MySQL, Postgres, Oracle, MariaDB, and MS SQL:'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于大多数情况，SQL数据库就足够了，因此如果你没有理由选择其他NoSQL解决方案，请坚持使用SQL，并从MySQL、Postgres、Oracle、MariaDB和MS
    SQL中选择：
- en: If you are on an enterprise with Oracle or MS SQL subscriptions, then it would
    make sense to choose them as you would benefit from the support and enterprise
    features provided
  id: totrans-64
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你在一个拥有Oracle或MS SQL订阅的企业中，那么选择它们是有意义的，因为你将受益于提供的支持和企业功能。
- en: If you need to store and query a lot of JSON data, then Postgres offers the
    best JSON support with full-text search capabilities
  id: totrans-65
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你需要存储和查询大量的JSON数据，那么Postgres提供了最佳的JSON支持，并具有全文搜索功能。
- en: For most simple use cases, MySQL or MariaDB will suffice
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于大多数简单用例，MySQL或MariaDB就足够了。
- en: Always choose a second-level Hibernate cache when working with a SQL DB
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在与SQL数据库一起工作时，始终选择二级Hibernate缓存。
- en: 'When choosing a development database for SQL:'
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在选择SQL开发数据库时：
- en: Choose an H2 file DB if you want a simple development setup with persistent
    data.
  id: totrans-69
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你想要一个简单的开发设置并希望数据持久化，请选择H2文件数据库。
- en: Choose the same DB as the production DB if you want faster restarts and your
    persistent data doesn't need to be wiped every now and then. If you are using
    the provided Docker images, then wiping data will not be an issue.
  id: totrans-70
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你想要更快的重启速度，并且你的持久数据不需要时不时地被清除，请选择与生产数据库相同的数据库。如果你正在使用提供的Docker镜像，那么清除数据将不会成为问题。
- en: Choose an H2 in-memory DB if you do not want any persistent data during development
    and would like a clean state on each restart
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你在开发过程中不需要任何持久数据，并且希望在每次重启时都有一个干净的状态，请选择H2内存数据库。
- en: If your use case requires a lot of heavy data reads/writes, and if the data
    is not very relational, then Cassandra would be a perfect fit, as it is distributed
    and can work under extremely heavy loads.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你的用例需要大量的重数据读写，并且数据不是非常关系型，那么Cassandra将是一个完美的选择，因为它可以分布式工作，并且能够在极端高负载下运行。
- en: For a normal, non-relational data structure, MongoDB may be sufficient. You
    could also use Postgres as a NoSQL JSON store if needed.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于一个正常、非关系型数据结构，MongoDB可能就足够了。如果需要，你也可以使用Postgres作为NoSQL JSON存储。
- en: If you need enterprise support for NoSQL, CouchBase is a good option.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你需要NoSQL的企业级支持，CouchBase是一个不错的选择。
- en: Use Elasticsearch along with the primary DB for full-text search. If you only
    need simple filtering, use the JPA filtering option provided. Refer to: [http://www.jhipster.tech/entities-filtering/](http://www.jhipster.tech/entities-filtering/).
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Elasticsearch与主数据库一起进行全文搜索。如果你只需要简单的过滤，请使用提供的JPA过滤选项。请参阅：[http://www.jhipster.tech/entities-filtering/](http://www.jhipster.tech/entities-filtering/)。
- en: Architecture considerations
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 架构考虑
- en: 'We have already discussed choosing a microservice or monolithic architecture
    in [Chapter 1](498dbd6d-b882-4551-92dd-97cdde4b62ac.xhtml), *Introduction to Modern
    Web Application Development*. Here are some more points when it comes to architecture:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在[第1章](498dbd6d-b882-4551-92dd-97cdde4b62ac.xhtml)“现代Web应用开发简介”中讨论了选择微服务或单体架构。以下是关于架构的一些更多要点：
- en: Don't use a microservice architecture if you're a small team. Microservices
    are about scaling teams more than anything. It's often easier to break up your
    monolith than start with microservices.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你是一个小团队，不要使用微服务架构。微服务更多的是关于团队扩展。通常，分解单体架构比从微服务开始更容易。
- en: Use asynchronous messaging in your monolith if you think you may need to refactor
    to microservices in the future. JHipster provides support for Apache Kafka, which
    is a good solution for asynchronous messaging.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你认为你可能需要在将来重构为微服务，请在单体中使用异步消息传递。JHipster提供了对Apache Kafka的支持，这是一个异步消息传递的良好解决方案。
- en: Asynchronous messaging is the best way of building stateless systems. It is
    important in a microservice architecture as you might often want communications
    to be stateless and non-blocking. Some of the popular solutions for this are Apache
    Kafka ([http://kafka.apache.org/](http://kafka.apache.org/)), RabbitMQ ([https://www.rabbitmq.com/](https://www.rabbitmq.com/)), and
    gRPC ([https://grpc.io](https://grpc.io)).  ReactiveX ([http://reactivex.io/](http://reactivex.io/))
    and Spring Reactor ([http://projectreactor.io/](http://projectreactor.io/)) are
    popular abstractions for working with asynchronous systems. Asynchronous messaging
    also makes the systems loosely coupled.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 异步消息传递是构建无状态系统的最佳方式。在微服务架构中非常重要，因为你可能经常希望通信是无状态和非阻塞的。一些流行的解决方案包括Apache Kafka
    ([http://kafka.apache.org/](http://kafka.apache.org/))、RabbitMQ ([https://www.rabbitmq.com/](https://www.rabbitmq.com/))和gRPC
    ([https://grpc.io](https://grpc.io))。ReactiveX ([http://reactivex.io/](http://reactivex.io/))和Spring
    Reactor ([http://projectreactor.io/](http://projectreactor.io/))是处理异步系统的流行抽象。异步消息传递也使得系统松散耦合。
- en: If you intend to expose an API to a third party, do *API first* development.
    We now have a good workflow to do it with Swagger Codegen. Refer to [http://www.jhipster.tech/doing-api-first-development/](http://www.jhipster.tech/doing-api-first-development/)
    for more info.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你打算向第三方公开API，请先进行*API first*开发。我们现在有很好的工作流程使用Swagger Codegen来完成它。有关更多信息，请参阅[http://www.jhipster.tech/doing-api-first-development/](http://www.jhipster.tech/doing-api-first-development/)。
- en: When doing communication between microservices with REST, don't put interface
    code in a shared package; it would tightly couple APIs to their clients, thus
    arriving at a distributed monolith.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在使用REST进行微服务之间的通信时，不要将接口代码放在共享包中；这将使API与其客户端紧密耦合，从而导致分布式单体。
- en: With JHipster, it is possible to split the client and server. Refer to [http://www.jhipster.tech/separating-front-end-and-api/](http://www.jhipster.tech/separating-front-end-and-api/).
    However, think twice before separating them, as it will require you to open up
    CORS, which makes the security more vulnerable, and such architecture brings its
    own issues. So do this only if you have a good reason to do so.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用JHipster，可以分割客户端和服务器。请参阅[http://www.jhipster.tech/separating-front-end-and-api/](http://www.jhipster.tech/separating-front-end-and-api/)。然而，在分离它们之前要三思，因为这将要求你打开CORS，这会使安全性更加脆弱，并且这种架构有其自身的问题。所以只有在你有充分的理由这样做时才这样做。
- en: Use DTOs at the service layer so that you can aggregate entities and define
    a better API without exposing entities to the client. You will have to enable
    the service layer for your entities to use this with JHipster.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在服务层使用DTOs，这样你就可以聚合实体并定义更好的API，而无需向客户端暴露实体。你将需要为你的实体启用服务层，以便使用JHipster来实现这一点。
- en: Learn the technology stack of your application before you start development.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在开始开发之前，了解你应用程序的技术栈。
- en: Make yourself familiar with the provided toolbelt, such as build tools (Maven/Gradle/Webpack),
    BrowserSync, and so on.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 熟悉提供的工具集，例如构建工具（Maven/Gradle/Webpack）、BrowserSync等。
- en: Security considerations
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安全性考虑
- en: 'Security is one of the most important aspects of any application, and you should
    consider the following when choosing a security mechanism:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 安全性是任何应用程序最重要的方面之一，在选择安全机制时应考虑以下因素：
- en: For most use cases JWT authentication will be sufficient, so stick to that if
    you are not sure
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于大多数用例，JWT认证将足够，所以如果你不确定，就坚持使用它。
- en: If you want single-sign-on in your application, use OAuth 2.0 / OIDC rather
    than trying to make JWT or session authentication work as an SSO solution
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你想在应用程序中实现单点登录，请使用OAuth 2.0 / OIDC，而不是尝试让JWT或会话认证作为单点登录解决方案工作
- en: If you already have Keycloak or Okta set up in your company, choose OAuth 2.0/OIDC
    and connect to them
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你已经在公司中设置了Keycloak或Okta，请选择OAuth 2.0/OIDC并将它们连接起来。
- en: Choose session-based authentication only if you want a stateful authentication
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只有在你想要有状态认证的情况下，才选择基于会话的认证。
- en: Deployment and maintenance
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署和维护
- en: 'There are a lot of good practices here; some of the important ones are:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有很多好的实践；其中一些重要的包括：
- en: Docker is a must-have for integration testing of microservices, but going into
    production with Docker is not easy so use an orchestration tool, such as Kubernetes, for
    that.
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker是微服务集成测试的必备工具，但使用Docker进入生产并不容易，所以使用如Kubernetes之类的编排工具。
- en: Run a prod build immediately after the application is generated and deploy to
    prod immediately while your app is still very simple. This will help ease any
    deployment issues, as you will be sure that the app works fine out of the box.
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在应用程序生成后立即运行prod构建，并在你的应用程序仍然非常简单时立即部署到prod。这将有助于缓解任何部署问题，因为你可以确信应用程序可以正常工作。
- en: The prod build is quite different from the dev build when it comes to the client
    side, as the resources are minified and optimized. When adding any frontend code,
    libraries always verify the prod build as well.
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当涉及到客户端时，prod构建与dev构建有很大不同，因为资源被压缩和优化。在添加任何前端代码时，库总是验证prod构建。
- en: Always run end-to-end protractor tests with the prod profile.
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 总是使用prod配置运行端到端protractor测试。
- en: Embrace the embedded servlet engine and forget about deploying to a JEE server
    such as WebLogic, WebSphere, JBoss, and so on. The artifacts produced are executable
    and have an embedded Undertow server.
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拥抱嵌入式servlet引擎，并忘记部署到JEE服务器，如WebLogic、WebSphere、JBoss等。产生的工件是可执行的，并包含一个嵌入的Undertow服务器。
- en: Did you know that Java EE is being renamed to Jakarta EE? Refer to [https://www.infoq.com/news/2018/03/java-ee-becomes-jakarta-ee](https://www.infoq.com/news/2018/03/java-ee-becomes-jakarta-ee)
    for more info.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 你知道Java EE正在更名为Jakarta EE吗？有关更多信息，请参阅[https://www.infoq.com/news/2018/03/java-ee-becomes-jakarta-ee](https://www.infoq.com/news/2018/03/java-ee-becomes-jakarta-ee)。
- en: Upgrade often using the JHipster upgrade sub-generator. This will ensure the
    tools and technologies you use are up to date and secure.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 经常使用JHipster升级子生成器进行升级。这将确保你使用的工具和技术都是最新和安全的。
- en: Remove all secrets from `application-prod.yml` and use placeholders to inject
    values from the command line or environment variables. Never put any secrets or
    passwords in code or config files.
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从`application-prod.yml`中删除所有秘密，并使用占位符从命令行或环境变量中注入值。永远不要在代码或配置文件中放置任何秘密或密码。
- en: General best practices
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一般最佳实践
- en: 'In general, these are some best practices you should consider:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，以下是一些你应该考虑的最佳实践：
- en: If you start creating entities using the entity sub-generator, then use `export-jdl`
    and switch to JDL once you have more than a handful of entities.
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你开始使用实体子生成器创建实体，那么一旦实体数量超过几个，就使用`export-jdl`并切换到JDL。
- en: Generate your application without any modules first and add required modules
    only when the need arises.
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先不添加任何模块生成应用程序，只在需要时添加所需的模块。
- en: Evaluate a module carefully before adding it. Make sure it supports the stack
    you have chosen.
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在添加模块之前仔细评估模块。确保它支持你选择的堆栈。
- en: Follow each underlying technology's *best practices*. Angular best practices,
    Spring best practices, and so on. Change something only if there is a good reason
    to do so.
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 遵循每个底层技术的**最佳实践**。Angular最佳实践、Spring最佳实践等。只有有充分的理由才改变它们。
- en: Use the provided library versions on the client side and server side. It's hard
    work to have them all working together, so stick to them. Update them when JHipster
    updates them or only if you really need to fix a bug or a security issue.
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在客户端和服务器端使用提供的库版本。让它们全部一起工作是一项艰巨的任务，所以坚持使用它们。当JHipster更新它们或你真的需要修复一个错误或安全问题时才更新它们。
- en: Follow the workflows provided by JHipster. They are here to help you. There
    is usually a very good reason to use them in the recommended way. Read the JHipster documentation before
    looking for help outside.
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 遵循JHipster提供的流程。它们在这里是为了帮助你。通常，按照推荐的方式使用它们有非常好的理由。在寻求外部帮助之前，请先阅读JHipster文档。
- en: You have a great working environment out of the box; don't break it.
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你有一个非常好的默认工作环境；不要破坏它。
- en: Frontend and backend updates are automatic and fast using live reload. Make
    use of them.
  id: totrans-112
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用实时重载，前端和后端更新是自动和快速的。充分利用它们。
- en: Production deployment is easy using the provided sub-generators.
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用提供的子生成器进行生产部署很容易。
- en: Use the provided sub-generators for the cloud platform you are deploying to.
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用为你部署到的云平台提供的子生成器。
- en: Git is your friend. Commit each time you add a module or an entity, or when
    using a sub-generator. Every mistake (including in the database) should be easy
    to rollback with Git.
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Git是你的朋友。每次添加模块或实体，或使用子生成器时，都要提交。任何错误（包括数据库中的错误）都应该能够通过Git轻松回滚。
- en: Using JHipster modules
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用JHipster模块
- en: 'JHipster modules and blueprints are a great way to add more features and functionality
    to your generated code. There are many modules (55 at the time of writing) available
    to choose from in the JHipster marketplace ([http://www.jhipster.tech/modules/marketplace](http://www.jhipster.tech/modules/marketplace)),
    and you can also build your own modules to suit your needs. Some of the modules
    worth noticing are as follows:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: JHipster 模块和蓝图是向生成的代码添加更多功能和功能的好方法。在撰写本文时，JHipster 市场上有许多模块（55 个）可供选择（[http://www.jhipster.tech/modules/marketplace](http://www.jhipster.tech/modules/marketplace)），您还可以根据自己的需求构建自己的模块。以下是一些值得注意的模块：
- en: '**Ignite JHipster**: This provides a React Native boilerplate for JHipster
    apps. An ideal way to kickstart your React Native application using JHipster as
    the backend.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Ignite JHipster**：这为 JHipster 应用程序提供了 React Native 的样板代码。使用 JHipster 作为后端来启动您的
    React Native 应用程序是一个理想的方式。'
- en: '**Entity Audit**: This module enables entity audits. It uses Hibernate audit
    hooks to create a custom audit for entity CRUD operations. It also provides Javers
    as the auditing mechanism instead of the custom Hibernate auditing. It also provides
    a nice UI to view the audits in an Angular application. It will enable auditing
    for new entities as well as existing entities.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实体审计**：此模块启用实体审计。它使用 Hibernate 审计钩子为实体 CRUD 操作创建自定义审计。它还提供 Javers 作为审计机制，而不是自定义
    Hibernate 审计。它还提供了一个漂亮的 UI，可以在 Angular 应用程序中查看审计。它将为新实体以及现有实体启用审计。'
- en: '**Ionic**: This provides an Ionic client for JHipster apps. It is an ideal
    solution if you want to create mobile applications with a JHipster backend and
    Angular frontend with Ionic.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Ionic**：这为 JHipster 应用程序提供了一个 Ionic 客户端。如果您想使用 JHipster 后端和 Angular 前端创建移动应用程序，这是一个理想的选择。'
- en: '**Swagger CLI**: Module provides support for generating Swagger clients for
    a JHipster application.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Swagger CLI**：此模块为生成 JHipster 应用的 Swagger 客户端提供支持。'
- en: '**gRPC**: This module generates gRPC reactive endpoints for a JHipster application.
    It supports entities as well, and is an ideal choice if you want a non-blocking
    reactive API for your JHipster application.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**gRPC**：此模块为 JHipster 应用程序生成 gRPC 反应式端点。它也支持实体，如果您想要一个非阻塞的反应式 API 用于您的 JHipster
    应用程序，这是一个理想的选择。'
- en: '**VueJS**: This module provides VueJS support for JHipster applications. It
    creates minimal boilerplate to start client-side development for JHipster apps
    using VueJS.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**VueJS**：此模块为 JHipster 应用程序提供 VueJS 支持。它创建最小的样板代码以启动使用 VueJS 的 JHipster 应用的客户端开发。'
- en: 'Take a look at the following steps:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下步骤：
- en: To use a JHipster module first install it using `npm i -g generator-<module-name>`
    or `yarn add global generator-<module-name>`.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使用 JHipster 模块，首先使用 `npm i -g generator-<module-name>` 或 `yarn add global generator-<module-name>`
    安装它。
- en: Once installed, go into the JHipster application directory and execute `yo <module-name>`
    to initiate the module and follow the prompts.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，进入 JHipster 应用程序目录，并执行 `yo <module-name>` 以启动模块并按照提示操作。
- en: Contributing to JHipster
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 贡献 JHipster
- en: One of the best ways to learn JHipster and the technologies it supports is by
    contributing to JHipster directly. Refer to the contribution guide ([https://github.com/jhipster/generator-jhipster/blob/master/CONTRIBUTING.md](https://github.com/jhipster/generator-jhipster/blob/master/CONTRIBUTING.md))
    for details about setting up JHipster for development.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 学习 JHipster 及其支持的技术的一个最好的方法是通过直接为 JHipster 做贡献。有关为开发设置 JHipster 的详细信息，请参阅贡献指南（[https://github.com/jhipster/generator-jhipster/blob/master/CONTRIBUTING.md](https://github.com/jhipster/generator-jhipster/blob/master/CONTRIBUTING.md)）。
- en: 'You can contribute to the project in many ways; some of them are as follows:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过多种方式为项目做出贡献；以下是一些方法：
- en: If you find a bug, enter an issue in the GitHub project ([https://github.com/jhipster/generator-jhipster](https://github.com/jhipster/generator-jhipster)),
    follow the guidelines in the issue template, run `jhipster info`, and provide
    steps to reproduce. You can also try to fix the issue yourself and submit a PR
    if you're successful.
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您发现了一个错误，请在 GitHub 项目中提交一个 issue（[https://github.com/jhipster/generator-jhipster](https://github.com/jhipster/generator-jhipster)），遵循
    issue 模板中的指南，运行 `jhipster info`，并提供复现步骤。您也可以尝试自己修复问题，并在成功后提交一个 PR。
- en: Work on open issues and feature requests. This way you will learn the internals
    of JHipster and the technologies used along the way.
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理开放问题和功能请求。这样，您将学习 JHipster 及其使用的技术。
- en: Answer JHipster related questions on Stack Overflow ([https://stackoverflow.com/questions/tagged/jhipster](https://stackoverflow.com/questions/tagged/jhipster)).
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Stack Overflow 上回答与 JHipster 相关的问题 ([https://stackoverflow.com/questions/tagged/jhipster](https://stackoverflow.com/questions/tagged/jhipster))。
- en: Summary
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Our journey together through JHipster and full stack development has come to
    an end. In this chapter, we learned about many best practices identified by the
    JHipster community. Try to complete the assignments in the *Next steps to pursue*
    section, as it will help you to apply what you have learned and will help you
    understand the concepts better.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我们一起通过 JHipster 和全栈开发之旅已经结束。在本章中，我们学习了 JHipster 社区识别出的许多最佳实践。尝试完成“下一步行动”部分中的作业，因为它将帮助你应用所学知识，并帮助你更好地理解这些概念。
- en: We hope you have had a fabulous learning experience, and hope what you have
    learned from the book about JHipster will help you with your next project.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望你的学习体验非常棒，并希望你在本书中学到的关于 JHipster 的知识能帮助你完成下一个项目。
- en: Follow `@java_hipster` on Twitter so you can see when new releases come out
    and security vulnerabilities are revealed.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 关注 Twitter 上的 `@java_hipster`，这样你就可以看到新版本发布和安全性漏洞披露的情况。
- en: If you have questions or issues regarding JHipster, post your questions to Stack
    Overflow ([https://stackoverflow.com/questions/tagged/jhipster](https://stackoverflow.com/questions/tagged/jhipster))
    and add the `jhipster` tag. The team will be notified and will be happy to help!
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对 JHipster 有任何疑问或问题，请将你的问题发布到 Stack Overflow ([https://stackoverflow.com/questions/tagged/jhipster](https://stackoverflow.com/questions/tagged/jhipster))
    并添加 `jhipster` 标签。团队将会收到通知，并乐意提供帮助！
