["```js\nimport MyComponent from \"./MyComponent.vue\"\n```", "```js\nImport { createApp } from \"vue\"\nimport App from './App.vue'\nImport MyComponent from \"./MyComponent.vue\"\ncreateApp(App)\n    .component('MyComponent', MyComponent)\n    .mount(\"#app\")\n```", "```js\nimport {defineAsyncComponent} from \"vue\"\nconst MyComponent = defineAsyncComponent(\n                    ()=>import(\"MyComponent.vue\")\n                 )\n```", "```js\nconst MyComponent = () => import('./MyComponent.vue')\n```", "```js\nconst ExampleComponent=defineAsyncComponent(()=>{\n    return new Promise((resolve, reject)=>{\n        if(some_input_value_is_true){\n            import OneComponent from \"OneComponent.vue\"\n                resolve(OneComponent)\n           }else{\n               import AnotherComponent from\n                   \"AnotherComponent.vue\"\n               resolve(AnotherComponent)\n           }\n    })\n})\n```", "```js\nconst HeavyComponent = defineAsyncComponent({\n    loader: ()=> import(\"./HeavyComponent\"),\n    loadingComponent: SpinnerComponent,\n    delay: 200,\n    errorComponent: LoadingError,\n    timeout: 60000\n    })\n```", "```js\nconst $emit=defineEmits(['eventName'])\n```", "```js\n$emit('eventName', some_value)\n```", "```js\n<MyComponent v-model=\"parent_variable\"></MyComponent>\n```", "```js\nconst $props=defineProps(['modelValue']),\n      $emit=defineEmits(['update:modelValue'])\n```", "```js\nconst\n  $props=defineProps(['modelValue', 'title']),\n  $emit=defineEmits(['update:modelValue','update:title'])\n```", "```js\n<ChildComponent v-model=\"varA\" v-model:title=\"varB\"></ChildComponent>\n```", "```js\n    import {provide} from \"vue\"\n    provide(\"provision_key_name\", data)\n    ```", "```js\n    import {} from \"vue\"\n    const $received_data = (\")\n    ```", "```js\nconst app = createApp({})\napp.provide('provision_key_name', data_or_value)\n```", "```js\nimport {provide} from \"vue\"\nfunction logMessage(){console.log(\"Hi\")}\nconst _provision_data={runLog: logMessage}\nprovide(\"service_name\", _provision_data)\n```", "```js\nimport {inject} from \"vue\"\nconst $service = inject(\"service_name\")\n$service.runLog()\n```", "```js\n<MyMenuBar>\n    <button>Option 1</button>\n    <button>Option 2</button>\n</MyMenuBar>\n```", "```js\n<template>\n<div class=\"...\">\n    <slot></slot>\n</div>\n</template>\n```", "```js\n<div class=\"w3-bar w3-border w3-light-grey\">\n  <button>Option 1</button>\n  <button>Option 2</button>\n</div>\n```", "```js\n<div class=\"layout-wrapper\">\n    <section><slot name=\"sidebar\"></slot></section>\n    <header><slot name=\"header\"></slot></header>\n    <main><slot name=\"content\"></slot></main>\n</div>\n```", "```js\n<MyLayout>\n    <template v-slot=\"sidebar\"> ... </template>\n    <template v-slot=\"header\"> ... </template>\n    <template v-slot=\"content\"> ... </template>\n</MyLayout>\n```", "```js\n<template #sidebar> ... </template>\n<template #header> ... </template>\n<template #content> ... </template>\n```", "```js\n<div>\n    <slot :data=\"some_text\"></data>\n</div>\n```", "```js\n<PassingPropsUpward v-slot=\"upwardProp\">\n    {{upwardProp.data}} //Renders the content of some_text\n</PassingPropsUpward>\n```", "```js\n<template #header=\"upwardProp\">\n    {{upwardProp.data}}\n</template>\n```", "```js\nimport {ref, onMounted, onUnmounted} from \"vue\"                //1\nfunction useDocumentScroll(){\n    const y=ref(window.scrollY)                                //2\n    function update(){y.value=window.scrollY}\n    onMounted(()=>{\n        document.addEventListener('scroll', update)})          //3\n    onUnmounted (()=>{\n        document.removeEventListener('scroll', update)})       //4\n    return {y}                                                 //5\n}\nexport {useDocumentScroll};                                    //6\n```", "```js\nimport {useDocumentScroll} from \"./DocumentScroll.js\"\nconst {y}=useDocumentScroll()\n...\n```", "```js\n<script setup>\n    import Heads from \"./heads.vue\"\n    import Tails from \"./tails.vue\"\n    function flipCoin(){return Math.random() > 0.5}\n</script>\n<template>\n    <component :is=\"flipCoin()?Heads:Tails\"></component>\n</template\n```", "```js\nimport { reactive } from \"vue\"                     //1\nimport Modal from \"./Modal.vue\"\nconst\n    _current = reactive({}),                       //2\n    api = {},                                      //3\n    plugin = {\n        install(App, options) {                    //4\n            App.component(\"Modal\", Modal)\n            App.provide(\"$modals\", api)\n        }\n    }\nexport default plugin\n```", "```js\nimport { createApp } from 'vue'\nimport App from './App.vue'\nimport Modals from \"./plugins/modals\"\ncreateApp(App).use(Modals).mount('#app')\n```", "```js\nimport { reactive } from \"vue\"\nimport Modal from \"./Modal.vue\"\nconst\n_current = reactive({name:\"\",resolve:null,reject:null}),\napi = {\n      active() {return _current.name;},\n      show(name) {\n           _current.name = name;\n           return new Promise(\n           (resolve = () => { }, reject = () => { }) => {\n                _current.resolve = resolve;\n                _current.reject = reject;\n           })\n},\n      accept() {_current.resolve();_current.name = \"\" },\n      cancel() {_current.reject();_current.name = \"\" }\n},\nplugin = {...} // Omitted for brevity\nexport default plugin;\n```", "```js\n<template>\n<div class=\"viewport-wrapper\" v-if=\"_show\">              //1\n  <div class=\"dialog-wrapper\">\n   <header>{{$props.title}}</header>                     //2\n   <main><slot></slot></main>                            //3\n   <footer>\n     <button @click=\"closeModal(true)\">Accept</button>   //4\n     <button @click=\"closeModal(false)\">Cancel</button>\n   </footer>\n  </div>\n</div>\n</template>\n```", "```js\n<script setup>\n  import { inject, computed } from \"vue\"                 //1\n  const\n  $props = defineProps({                                 //2\n      name: { type: String, default: \"\" },\n      title: { type: String, default: \"Modal dialog\" }\n      }),\n  $modals = inject(\"$modals\"),                           //3\n  _show = computed(() => {                               //4\n      return $modals.active() == $props.name\n  })\n  function closeModal(accept = false) {\n      accept?$modals.accept():$modals.cancel()           //5\n  }\n</script>\n```", "```js\n    <Modal name=\"myModal\" title=\"Modal example\">\n          Some important content here\n    </Modal>\n    ```", "```js\n    const $modals = inject(\"$modals\")\n    ```", "```js\n    $modals.show(\"myModal\").then(() => {\n          // Modal accepted.\n    }, () => {\n          // Modal cancelled\n    })\n    ```", "```js\n[function] toggleStatus(status){\n    switch(status){\n        case \"not_started\":     return \"in_progress\"\n        case \"in_progress\":     return \"completed\"\n        case \"completed\":       return \"not_started\"\n    }\n}\n```"]