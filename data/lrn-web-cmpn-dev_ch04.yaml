- en: Chapter 4. Exploring Bosonic Tools for Web Component Development
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章 探索Bosonic工具用于Web组件开发
- en: Bosonic provides a set of tools that help developers build a web component development.
    In this chapter, we will learn about configuration, lifecycle, built-in elements,
    and custom element development using the Bosonic tool.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Bosonic提供了一套工具，帮助开发者构建Web组件开发。在本章中，我们将学习如何使用Bosonic工具进行配置、生命周期、内置元素和自定义元素开发。
- en: What is Bosonic?
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是Bosonic？
- en: 'Bosonic is a library for web component development based on the W3C specification.
    The Bosonic library came about so as to support not-so-modern browsers, such as
    IE9\. Bosonic is built on top of the PolymerJS polyfill and its own polyfill.
    Bosonic acts like a transpiler. A **transpiler** is a simple compiler, which takes
    a source code as input and output in another programming language. The following
    diagram shows the Bosonic acting as a transpiler:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Bosonic是基于W3C规范的Web组件开发库。Bosonic库的诞生是为了支持不太现代的浏览器，例如IE9。Bosonic建立在PolymerJS
    polyfill及其自身polyfill之上。Bosonic的作用类似于转换器。**转换器**是一个简单的编译器，它将源代码作为输入，并以另一种编程语言输出。以下图表显示了Bosonic作为转换器的行为：
- en: '![What is Bosonic?](img/image00283.jpeg)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![什么是Bosonic？](img/image00283.jpeg)'
- en: The Bosonic transpiler takes the element definition in the HTML format and generates
    the respective JavaScript and CSS file.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Bosonic转换器将HTML格式的元素定义转换为相应的JavaScript和CSS文件。
- en: Browser support
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 浏览器支持
- en: 'As mentioned in the first chapter, web component specification is very new
    and is not implemented by all browsers. However, Bosonic tries to support more
    recent browsers by using polyfill. As of today, Bosonic supports the following
    listed browsers:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如第一章所述，Web组件规范非常新，并非所有浏览器都实现了它。然而，Bosonic通过使用polyfill来尝试支持更现代的浏览器。截至今天，Bosonic支持以下列出的浏览器：
- en: Mozilla Firefox 25+
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mozilla Firefox 25+
- en: Google Chrome 30+
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google Chrome 30+
- en: Internet Explorer 9+
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Internet Explorer 9+
- en: Safari 6+
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Safari 6+
- en: Opera 12+
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Opera 12+
- en: Configuring Bosonic
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置Bosonic
- en: 'Bosonic library is hosted by GitHub. The complete library can be downloaded
    from the following link:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Bosonic库由GitHub托管。完整的库可以从以下链接下载：
- en: '[https://github.com/bosonic/bosonic](https://github.com/bosonic/bosonic)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/bosonic/bosonic](https://github.com/bosonic/bosonic)'
- en: Bosonic packages
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Bosonic包
- en: 'The Bosonic elements are made up of four packages. We can consider these packages
    as layers of a technology stack that supports Bosonic elements. The following
    diagram shows the Bosonic packages:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Bosonic元素由四个包组成。我们可以将这些包视为支持Bosonic元素的技术堆栈的层。以下图表显示了Bosonic包：
- en: '![Bosonic packages](img/image00284.jpeg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![Bosonic packages](img/image00284.jpeg)'
- en: 'The details of the mentioned packages are listed as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 以下列出了提到的包的详细信息：
- en: '**Bosonic platform**: This package contains all the polyfill JavaScript files
    to provide the missing features from web component specification'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Bosonic平台**：此包包含所有polyfill JavaScript文件，以提供来自Web组件规范的缺失功能'
- en: '**Grunt Bosonic**: This is a Grunt task that uses the transpiler to build your
    elements'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Grunt Bosonic**：这是一个使用转换器构建您元素的Grunt任务'
- en: '**Bosonic transpiler**: This is an **node package manager** (**npm**) module
    for converting the Bosonic element definition to CSS and JS'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Bosonic转换器**：这是一个将Bosonic元素定义转换为CSS和JS的**node包管理器**（**npm**）模块'
- en: '**Yeoman Bosonic**: This is a Yeoman generator that creates the skeleton of
    a new element'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Yeoman Bosonic**：这是一个创建新元素骨架的Yeoman生成器'
- en: Built-in elements
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内置元素
- en: 'The Bosonic library comes with a set of built-in components that can be used
    by a developer for web application development. The complete list of built-in
    elements can be found by visiting the following URL:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Bosonic库附带了一套内置组件，开发者可以使用这些组件进行Web应用程序开发。完整的内置元素列表可以通过访问以下URL找到：
- en: '[http://bosonic.github.io/elements.html](http://bosonic.github.io/elements.html)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://bosonic.github.io/elements.html](http://bosonic.github.io/elements.html)'
- en: We will explore a few of them in this chapter.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章中探索其中的一些。
- en: The b-sortable element
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`b-sortable`元素'
- en: 'The `b-sortable` element can be used to group and sort the DOM elements. The
    `<b-sortable>` element can be installed using the following command:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`b-sortable`元素来分组和排序DOM元素。可以使用以下命令安装`<b-sortable>`元素：
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `--save` switch is used to include the `b-sortable` element code in the
    local project. After the successful execution of the preceding command, it generates
    a directory structure.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`--save`开关将`b-sortable`元素代码包含在本地项目中。在成功执行前面的命令后，它将生成目录结构。
- en: 'The following screenshot shows the directory and file structure generated by
    the preceding command:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了前一个命令生成的目录和文件结构：
- en: '![The b-sortable element](img/image00285.jpeg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![b-sortable 元素](img/image00285.jpeg)'
- en: From the preceding screenshot, we can see that the parent directory named `node_module`
    is created with a subdirectory named `b-sortable`, which contains the real JavaScript
    code definition for the element.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 从前一个截图可以看出，创建了一个名为 `node_module` 的父目录，其中包含一个名为 `b-sortable` 的子目录，该子目录包含元素的真正
    JavaScript 代码定义。
- en: 'The dependent files for the `<b-sortable>` element can be installed using the
    following command:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用以下命令安装 `<b-sortable>` 元素的依赖文件：
- en: '[PRE1]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The following screenshot shows the terminal with the `b-sortable` element by
    installing dependent files using the preceding command:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了使用前一个命令安装依赖文件时的终端，其中包含 `b-sortable` 元素：
- en: '![The b-sortable element](img/image00286.jpeg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![b-sortable 元素](img/image00286.jpeg)'
- en: 'Once the entire dependent files are generated using npm, we can start the Grunt
    task for transpiling the `b-sortable.html` file. To get a copy of the `<b-sortable>`
    element in the `demo` directory, we use the following command:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦使用 npm 生成所有依赖文件，我们就可以开始执行 Grunt 任务来转换 `b-sortable.html` 文件。要获取 `demo` 目录中的
    `<b-sortable>` 元素副本，我们使用以下命令：
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The following screenshot shows the Grunt task execution, which generates the
    corresponding CSS and JS files in the `demo` directory:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了 Grunt 任务执行情况，它在 `demo` 目录中生成了相应的 CSS 和 JS 文件：
- en: '![The b-sortable element](img/image00287.jpeg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![b-sortable 元素](img/image00287.jpeg)'
- en: 'Once the Grunt task is successfully executed, the corresponding CSS and JS
    files are generated inside the `demo` directory. The following screenshot shows
    the updated directory structure:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 Grunt 任务成功执行，相应的 CSS 和 JS 文件将在 `demo` 目录中生成。以下截图显示了更新的目录结构：
- en: '![The b-sortable element](img/image00288.jpeg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![b-sortable 元素](img/image00288.jpeg)'
- en: 'Now, we can view the demo of the `<b-sortable>` element by running the `index.html`
    file present inside the `demo` subdirectory:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以通过运行 `demo` 子目录中的 `index.html` 文件来查看 `<b-sortable>` 元素的演示：
- en: '![The b-sortable element](img/image00289.jpeg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![b-sortable 元素](img/image00289.jpeg)'
- en: The b-toggle-button element
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: b-toggle-button 元素
- en: 'The `b-toggle-button` element has two different states, *on* and *off*, representing
    the checked and unchecked element. The `<b-toggle-button>` element can be installed
    using the following command:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`b-toggle-button` 元素有两个不同的状态，*开启* 和 *关闭*，分别代表已选中和未选中的元素。可以使用以下命令安装 `<b-toggle-button>`
    元素：'
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'After the successful execution of the preceding command, it generates a directory
    structure. The following screenshot shows the directory and file structure generated
    by the preceding command:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 执行前一个命令后，它生成一个目录结构。以下截图显示了前一个命令生成的目录和文件结构：
- en: '![The b-toggle-button element](img/image00290.jpeg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![b-toggle-button 元素](img/image00290.jpeg)'
- en: 'The dependent files for the `<b-toggle-button>` element can be installed using
    the following command:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用以下命令安装 `<b-toggle-button>` 元素的依赖文件：
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The following screenshot shows the terminal with the `b-toggle-button` element
    by installing dependent files using preceding command:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了使用前一个命令安装依赖文件时的终端，其中包含 `b-toggle-button` 元素：
- en: '![The b-toggle-button element](img/image00291.jpeg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![b-toggle-button 元素](img/image00291.jpeg)'
- en: 'Once the entire dependent files are generated using npm, we can start the Grunt
    task for transpiling the `b-toggle-button.html` file. To get a copy of the `<b-toggle-button>`
    element in the `demo` directory, we use the following command:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦使用 npm 生成所有依赖文件，我们就可以开始执行 Grunt 任务来转换 `b-toggle-button.html` 文件。要获取 `demo`
    目录中的 `<b-toggle-button>` 元素副本，我们使用以下命令：
- en: '[PRE5]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The following screenshot shows the Grunt task execution, which generates the
    corresponding CSS and JS files in the `demo` directory:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了 Grunt 任务执行情况，它在 `demo` 目录中生成了相应的 CSS 和 JS 文件：
- en: '![The b-toggle-button element](img/image00292.jpeg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![b-toggle-button 元素](img/image00292.jpeg)'
- en: 'Now, we can view the demo of the `<b-toggle-button>` element by running the
    `index.html` file present inside the `demo` subdirectory. Here is the screenshot
    for this:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以通过运行 `demo` 子目录中的 `index.html` 文件来查看 `<b-toggle-button>` 元素的演示。以下是截图：
- en: '![The b-toggle-button element](img/image00293.jpeg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![b-toggle-button 元素](img/image00293.jpeg)'
- en: Developing custom component
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发自定义组件
- en: 'The Bosonic framework supports the development of a custom element. In this
    section, we will learn step-by-step details for developing a custom element. We
    will build a custom element named `<red-message>`. The detailed steps are as follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Bosonic 框架支持自定义元素的开发。在本节中，我们将逐步学习开发自定义元素的详细步骤。我们将构建一个名为 `<red-message>` 的自定义元素。详细步骤如下：
- en: Step 1 – creating the red-message element directory
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第1步 – 创建 red-message 元素目录
- en: Create a directory named `red-message` using your terminal and the `mkdir` command.
    The following screenshot shows the terminal with a directory name `red-message`
    creation. We can verify the directory creation using the `dir` or `ls` command
    in the terminal, depending on the operating system used by the developer.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 使用终端和 `mkdir` 命令创建一个名为 `red-message` 的目录。以下截图显示了创建名为 `red-message` 的目录的终端界面。我们可以使用终端中的
    `dir` 或 `ls` 命令（根据开发者使用的操作系统而定）来验证目录的创建情况。
- en: '![Step 1 – creating the red-message element directory](img/image00294.jpeg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![第1步 – 创建 red-message 元素目录](img/image00294.jpeg)'
- en: Step 2 – changing the current directory to red-message
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第2步 – 将当前目录更改为 red-message
- en: 'Change the current directory to `red-message` using the `cd` command in the
    terminal. The following screenshot shows the terminal with the `cd` command in
    execution:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 使用终端中的 `cd` 命令将当前目录更改为 `red-message`。以下截图显示了执行 `cd` 命令的终端界面：
- en: '![Step 2 – changing the current directory to red-message](img/image00295.jpeg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![第2步 – 将当前目录更改为 red-message](img/image00295.jpeg)'
- en: Step 3 – generating the skeleton for <red-message>
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第3步 – 为 <red-message> 生成骨架
- en: 'We need to generate the skeleton of the Bosonic custom element using Yeoman
    Bosonic generator. The package name for Bosonic generator is `generator-bosonic`,
    and it can be installed using the `npm install --save generator-bosonic` command.
    The skeleton of the `<red-message>` element can be generated using the `yo bosonic`
    command in the terminal. Refer to the following screenshot:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要使用 Yeoman Bosonic 生成器生成玻色子自定义元素的骨架。Bosonic 生成器的包名为 `generator-bosonic`，可以使用
    `npm install --save generator-bosonic` 命令进行安装。可以使用终端中的 `yo bosonic` 命令生成 `<red-message>`
    元素的骨架。请参考以下截图：
- en: '![Step 3 – generating the skeleton for <red-message>](img/image00296.jpeg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![第3步 – 为 <red-message> 生成骨架](img/image00296.jpeg)'
- en: Step 4 – verifying the directory structure
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第4步 – 验证目录结构
- en: 'Verify the directory structure generated by Yeoman Bosonic generator using
    the `ls` command. The following screenshot shows the directory structure generated
    by the generator:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `ls` 命令验证由 Yeoman Bosonic 生成器生成的目录结构。以下截图显示了生成器生成的目录结构：
- en: '![Step 4 – verifying the directory structure](img/image00297.jpeg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![第4步 – 验证目录结构](img/image00297.jpeg)'
- en: Step 5 – defining code for the <red-message> element
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第5步 – 定义 <red-message> 元素的代码
- en: 'Now, it''s time to write the definition for the `<red-message>` element in
    the `red-message.html` file present in the `src` directory. The modified content
    of the `red-message.html` file is listed as follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候在 `src` 目录中 `red-message.html` 文件中编写 `<red-message>` 元素的定义了。`red-message.html`
    文件的修改内容如下：
- en: '[PRE6]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The details of the preceding code are listed as follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 前述代码的详细信息如下：
- en: The `<template>` element contains an `h1` element with a message that is going
    to be rendered
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<template>` 元素包含一个将要渲染的消息的 `h1` 元素'
- en: 'The `<style>` element contains the style for the `color: red` attribute for
    the `h1` element'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<style>` 元素包含了 `h1` 元素的 `color: red` 属性的样式'
- en: The `<script>` element overrides the `createdCallback` method, which clones
    the template content and appends it to the `<red-message>` element
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<script>` 元素覆盖了 `createdCallback` 方法，该方法克隆模板内容并将其附加到 `<red-message>` 元素'
- en: Step 6 – modifying the index.html demo file
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第6步 – 修改 index.html 示例文件
- en: 'To test the `red-message` element, we need to include the `red-message` tag
    in the `index.html` file. The following code shows the content of the `index.html`
    file:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试 `red-message` 元素，我们需要在 `index.html` 文件中包含 `red-message` 标签。以下代码显示了 `index.html`
    文件的内容：
- en: '[PRE7]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As shown in the preceding code, `red-message.js` and `red-message.css` are the
    files that are generated by the transpiler. These files will be used in the next
    step.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如前述代码所示，`red-message.js` 和 `red-message.css` 是由编译器生成的文件。这些文件将在下一步中使用。
- en: Step 7 – generating distribution files using Grunt
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第7步 – 使用 Grunt 生成分发文件
- en: 'In this step, we need to call the transpiler which will generate the CSS and
    JS file from the `red-message.html` file. A Grunt task watcher can watch the changes
    in the `red-message.html` file and generate the `red-message.css` and `red-message.js`
    files. A Grunt task watcher can be executed using the `grunt demo` command. The
    following screenshot shows the terminal with Grunt watcher in execution:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一步，我们需要调用转换器，它将从`red-message.html`文件生成CSS和JS文件。一个Grunt任务监视器可以监视`red-message.html`文件中的更改，并生成`red-message.css`和`red-message.js`文件。可以使用`grunt
    demo`命令执行Grunt任务监视器。以下截图显示了执行中的Grunt监视器终端：
- en: '![Step 7 – generating distribution files using Grunt](img/image00298.jpeg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 7 – 使用 Grunt 生成分布文件](img/image00298.jpeg)'
- en: 'After successful execution of the Grunt compiler, it generates the `red-message.js`
    and `red-message.css` files in the `dist` directory and copies a set of these
    files to the `demo` directory. The following screenshot shows the generated files
    after compilation:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在Grunt编译器成功执行后，它将在`dist`目录中生成`red-message.js`和`red-message.css`文件，并将这些文件的一组复制到`demo`目录。以下截图显示了编译后生成的文件：
- en: '![Step 7 – generating distribution files using Grunt](img/image00299.jpeg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 7 – 使用 Grunt 生成分布文件](img/image00299.jpeg)'
- en: 'Any changes to the `red-message.html` file will be picked up by the Grunt task
    watcher and also made to the corresponding CSS and JS files. The following screenshot
    displays the Grunt task watcher logs in the terminal:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 对`red-message.html`文件的任何更改都将被Grunt任务监视器捕获，并相应地更新CSS和JS文件。以下截图显示了终端中的Grunt任务监视器日志：
- en: '![Step 7 – generating distribution files using Grunt](img/image00300.jpeg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 7 – 使用 Grunt 生成分布文件](img/image00300.jpeg)'
- en: 'The following code has the content of the `red-message.js` file which is generated
    by the Grunt transpiler:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码是Grunt转换器生成的`red-message.js`文件的内容：
- en: '[PRE8]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The details of the preceding code are listed as follows:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的详细信息如下：
- en: A new object prototype `RedMessagePrototype` is created using the `Object.createElement`
    method
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`Object.createElement`方法创建了一个新的对象原型`RedMessagePrototype`
- en: It uses the `Object.defineProperty` method to create a property for the `RedMessagePrototype`
    object
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它使用`Object.defineProperty`方法为`RedMessagePrototype`对象创建一个属性
- en: It registers the element with DOM as `red-message` using the `document.registerElement`
    method
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它使用`document.registerElement`方法将元素注册为DOM中的`red-message`
- en: Step 8 – running the index.html file
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤 8 – 运行 index.html 文件
- en: 'We can see the use of the `<red-message>` custom element by running the `index.html`
    file. The following screenshot shows the output of `index.html`, which shows the
    text message in the color red:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 通过运行`index.html`文件，我们可以看到`<red-message>`自定义元素的使用。以下截图显示了`index.html`的输出，其中文本信息以红色显示：
- en: '![Step 8 – running the index.html file](img/image00301.jpeg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 8 – 运行 index.html 文件](img/image00301.jpeg)'
- en: Bosonic lifecycle
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 玻色子生命周期
- en: 'A Bosonic element goes through different states during its lifecycle. Bosonic
    provides callback methods for each state to override with our own code. The lifecycle
    callback methods are listed as follows:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 一个玻色子元素在其生命周期中会经历不同的状态。玻色子为每个状态提供了回调方法，以便我们用自己的代码覆盖。生命周期回调方法如下所示：
- en: '`createdCallback`: This callback method is for handling the `created` state.
    An element is in the `created` state when it is instantiated at first.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`createdCallback`: 这个回调方法用于处理`created`状态。一个元素在首次实例化时处于`created`状态。'
- en: '`attachedCallback`: This callback method is for handling the DOM `attached`
    state. An `attached` state represents the element when it is attached to DOM tree.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attachedCallback`: 这个回调方法用于处理DOM的`attached`状态。`attached`状态表示元素被附加到DOM树时。'
- en: '`detachedCallback`: This callback method is for handling the DOM `detached`
    state. A `detached` state represents the element when it is removed from the DOM.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`detachedCallback`: 这个回调方法用于处理DOM的`detached`状态。`detached`状态表示元素从DOM中移除时。'
- en: '`attributeChangedCallback`: This callback method is for handling the changes
    in attributes.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attributeChangedCallback`: 这个回调方法用于处理属性的变化。'
- en: Example of lifecycle
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生命周期示例
- en: 'In this section, we will develop a custom element `<say-hello>` demonstrating
    the lifecycle callback method. A skeleton for creating a custom element `<say-hello>`
    can be generated using the previously explained steps. The following screenshot
    shows the terminal with the previous steps in execution:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将开发一个自定义元素`<say-hello>`，演示生命周期回调方法。可以使用之前解释的步骤生成创建自定义元素`<say-hello>`的骨架。以下截图显示了执行前步骤的终端：
- en: '![Example of lifecycle](img/image00302.jpeg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![生命周期示例](img/image00302.jpeg)'
- en: 'After the directory and file structure is generated, we can start the Grunt
    task, which will watch over the modified element and generate the `dist` directory
    containing the respective CSS and JS files. The `say-hello.html` file present
    in the `src` directory has the code definition for the `<say-hello>` element.
    The following code shows the definition of the `<say-hello>` element:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在生成目录和文件结构之后，我们可以开始执行 Grunt 任务，该任务将监视修改后的元素，并生成包含相应 CSS 和 JS 文件的 `dist` 目录。`src`
    目录中存在的 `say-hello.html` 文件包含 `<say-hello>` 元素的代码定义。以下代码显示了 `<say-hello>` 元素的定义：
- en: '[PRE9]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The details of the preceding code are listed as follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的详细信息如下：
- en: The name of the custom element is `say-hello` and a `message` attribute with
    no value.
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义元素的名称是 `say-hello`，并且有一个无值的 `message` 属性。
- en: The `<template>` element contains the HTML markup containing a header `<h1>`
    and a `<span>` tag. The `<span>` tag acts as a placeholder for the `message` attribute
    value.
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<template>` 元素包含包含标题 `<h1>` 和 `<span>` 标签的 HTML 标记。`<span>` 标签作为 `message`
    属性值的占位符。'
- en: 'The element definition contains four lifecycle callback methods. The details
    of these callback methods are listed as follows:'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 元素定义包含四个生命周期回调方法。这些回调方法的详细信息如下：
- en: The `createdCallback` method clones the template content, reads the message
    attribute value, and inserts it as a text node to the `<span>` element. It has
    a console to log the created event.
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`createdCallback` 方法克隆模板内容，读取 `message` 属性值，并将其作为文本节点插入到 `<span>` 元素中。它有一个控制台来记录创建事件。'
- en: The `attachedCallback` method has just the console log to print the message
    when the element is attached to DOM.
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attachedCallback` 方法仅在元素附加到 DOM 时打印消息的控制台日志。'
- en: The `detachedCallback` method has a console log to print the message when the
    element is removed from the DOM.
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`detachedCallback` 方法在元素从 DOM 中移除时打印消息的控制台日志。'
- en: The `attributeChangesCallback` method calls the `createdCallback` method whenever
    the value of the `message` attribute is changed. It also contains the console
    log to print the message whenever any attribute is changed.
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attributeChangesCallback` 方法在 `message` 属性值更改时调用 `createdCallback` 方法。它还包含控制台日志，在更改任何属性时打印消息。'
- en: 'The `<say-hello>` element will generate the `say-hello.css` and `say-hello.js`
    files in the `dist` directory with a copy inside the `demo` directory. The `demo`
    directory contains the `index.html` file, which shows the use of the `<say-hello>`
    element. The code for the `index.html` file is listed as follows:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`<say-hello>` 元素将在 `dist` 目录中生成 `say-hello.css` 和 `say-hello.js` 文件，并在 `demo`
    目录中包含副本。`demo` 目录包含 `index.html` 文件，展示了 `<say-hello>` 元素的使用。以下列出了 `index.html`
    文件的代码：'
- en: '[PRE10]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In the `index.html` file, the code contains an `<input>` element having the
    `messageElement` ID value and three buttons for modifying the `<say-hello>` element.
    The details of these elements are listed as follows:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `index.html` 文件中，代码包含一个具有 `messageElement` ID 值的 `<input>` 元素和三个按钮，用于修改 `<say-hello>`
    元素。以下列出了这些元素的详细信息：
- en: The `<input>` element takes the value from the user, which can be used as a
    value for the `message` attribute.
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<input>` 元素获取用户的值，这可以用作 `message` 属性的值。'
- en: The first button **Change Message** value has an onclick handler attached to
    the `changeMessageHandler` method. This method takes the value entered by the
    user in the `<input>` element and updates the `message` attribute. The change
    in the `message` attribute calls the `attributeChangedCallback` method, which
    in turn calls the `createdCallback` method and the new value of the message then
    gets rendered in the browser.
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个按钮 **更改消息** 值附带了一个 `onclick` 处理器，指向 `changeMessageHandler` 方法。此方法获取用户在 `<input>`
    元素中输入的值，并更新 `message` 属性。`message` 属性的变化调用 `attributeChangedCallback` 方法，进而调用
    `createdCallback` 方法，然后新的消息值在浏览器中渲染。
- en: The second button **Delete SayHello Element** has an onclick handler attached
    to the `deleteElementHandler` method. This method finds the `say-hello` element
    and removes it from the DOM using the `remove` method. It fires the `detachedCallback`
    lifecycle method.
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个按钮 **删除 SayHello 元素** 附带了一个 `onclick` 处理器，指向 `deleteElementHandler` 方法。此方法查找
    `say-hello` 元素，并使用 `remove` 方法将其从 DOM 中删除。它触发 `detachedCallback` 生命周期方法。
- en: The third button **Create SayHello Element** has an onclick handler attached
    to the `createElementHandler` method. This method creates a new `say-hello` element
    using the `document.createElement` method and then attaches the `say-hello` element
    to `elementContainer`. This process fires the `createdCallback` lifecycle method.
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三个按钮 **创建 SayHello 元素** 连接到 `createElementHandler` 方法。此方法使用 `document.createElement`
    方法创建一个新的 `say-hello` 元素，并将其附加到 `elementContainer`。此过程触发了 `createdCallback` 生命周期方法。
- en: 'The output of the demo code in `index.html` will render the following screenshot:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`index.html` 中演示代码的输出将渲染以下截图：'
- en: '![Example of lifecycle](img/image00303.jpeg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![生命周期示例](img/image00303.jpeg)'
- en: 'Now, enter a text message such as `Bosonic Framework` in the `<input>` element
    and hit the **Change Message** button. The following screenshot shows the output
    after entering the text in the `<input>` element:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在 `<input>` 元素中输入文本消息，例如 `Bosonic Framework`，然后点击 **更改消息** 按钮。以下截图显示了在 `<input>`
    元素中输入文本后的输出：
- en: '![Example of lifecycle](img/image00304.jpeg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![生命周期示例](img/image00304.jpeg)'
- en: In the preceding screenshot, we can see that the new **Hello Bosonic Framework**
    message gets rendered in the browser. In the console, we can find two logs generated
    from the `attributeChangedCallback` and `createdCallback` methods, as the `message`
    attribute value is changed with the user entered text and the element is reinitialized.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，我们可以看到新的 **Hello Bosonic Framework** 消息在浏览器中渲染。在控制台中，我们可以找到由 `attributeChangedCallback`
    和 `createdCallback` 方法生成的两个日志，因为 `message` 属性值随着用户输入的文本而更改，并且元素被重新初始化。
- en: 'Now, press the **Delete SayHello Element** button which will remove the element
    form the DOM tree. The following screenshot shows the output after the deletion
    of the `<say-hello>` element from DOM:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，按下 **删除 SayHello 元素** 按钮，这将从 DOM 树中删除该元素。以下截图显示了从 DOM 中删除 `<say-hello>` 元素后的输出：
- en: '![Example of lifecycle](img/image00305.jpeg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![生命周期示例](img/image00305.jpeg)'
- en: In the preceding screenshot, we can see that the `<say-hello>` element is removed
    from the DOM. In the console, a message is logged which is generated by the `detachedCallback`
    method.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，我们可以看到 `<say-hello>` 元素已被从 DOM 中移除。在控制台中，记录了一条由 `detachedCallback` 方法生成的消息。
- en: 'Now, press the **Create SayHello Element** button which will create a new `<say-hello>`
    element and append it to `elementContainer`. The following screenshot shows the
    new `<say-hello>` element created after pressing the button:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，按下 **创建 SayHello 元素** 按钮，这将创建一个新的 `<say-hello>` 元素并将其附加到 `elementContainer`。以下截图显示了按下按钮后创建的新
    `<say-hello>` 元素：
- en: '![Example of lifecycle](img/image00306.jpeg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![生命周期示例](img/image00306.jpeg)'
- en: In the preceding screenshot, we can see that the new `<say-hello>` element is
    rendered in the browser with the `message` attribute value set to `Developers`.
    In the console, we can see that four different log message are generated by the
    `createdCallback`, `attributeChangedCallback`, and `attachedCallback` method.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，我们可以看到新的 `<say-hello>` 元素在浏览器中以 `message` 属性值设置为 `Developers` 的形式渲染。在控制台中，我们可以看到由
    `createdCallback`、`attributeChangedCallback` 和 `attachedCallback` 方法生成的四个不同的日志消息。
- en: Digital clock development
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数字时钟开发
- en: 'In this section, we will develop the `<ts-clock>` custom element using the
    Bosonic framework. The following screenshot shows the terminal with the command
    to generate the default directory and file structure for creating a `<ts-clock>`
    element:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用 Bosonic 框架开发 `<ts-clock>` 自定义元素。以下截图显示了用于生成创建 `<ts-clock>` 元素默认目录和文件结构的命令的终端：
- en: '![Digital clock development](img/image00307.jpeg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![数字时钟开发](img/image00307.jpeg)'
- en: 'Now, we can run the Grunt task runner to watch the changes to the `ts-clock.html`
    file. The task runner transpiles the `ts-clock.html` file and generates the `ts-clock.css`
    and `ts-clock.js` files in the `dist` directory, and a copy in the `demo` directory.
    The following screenshot shows the terminal with the Grunt task runner in execution:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以运行 Grunt 任务运行器来监视 `ts-clock.html` 文件的更改。任务运行器将 `ts-clock.html` 文件转换为
    `ts-clock.css` 和 `ts-clock.js` 文件，并生成 `dist` 目录中的副本以及 `demo` 目录中的副本。以下截图显示了正在执行
    Grunt 任务运行器的终端：
- en: '![Digital clock development](img/image00308.jpeg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![数字时钟开发](img/image00308.jpeg)'
- en: 'Now, the platform is set up for writing the code for the `<ts-clock>` digital
    clock element. The `ts-clock.html` file contains the code for the definition of
    the digital clock. The details of the code in the `ts-clock.html` file are listed
    as follows:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，平台已设置好用于编写 `<ts-clock>` 数字时钟元素的代码。`ts-clock.html` 文件包含数字时钟定义的代码。`ts-clock.html`
    文件中代码的详细信息如下所示：
- en: 'The `<ts-clock>` element will have three attributes `hour`, `minute`, and `second`.
    The following code shows the syntax for the code definition for the `<ts-clock>`
    element:'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<ts-clock>` 元素将具有三个属性 `hour`、`minute` 和 `second`。以下代码显示了 `<ts-clock>` 元素代码定义的语法：'
- en: '[PRE11]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The `<template>` element contains the CSS style and HTML elements. The CSS
    styles and HTML element that we used for the template is used from the previous
    chapter. The HTML element has three different `div` elements, which has `hour`,
    `minute`, and `second` classes wrapped inside a `div` element with the `clock`
    class. The following code shows the HTML and CSS content present inside the `<template>`
    element:'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<template>` 元素包含 CSS 样式和 HTML 元素。我们用于模板的 CSS 样式和 HTML 元素是从上一章中使用的。HTML 元素有三个不同的
    `div` 元素，它们分别具有 `hour`、`minute` 和 `second` 类，并被包裹在一个具有 `clock` 类的 `div` 元素中。以下代码显示了
    `<template>` 元素中存在的 HTML 和 CSS 内容：'
- en: '[PRE12]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The `<script>` element contains the real code definition for the `<ts-clock>`
    element. The following code shows the content of the `<script>` element:'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<script>` 元素包含 `<ts-clock>` 元素的实际代码定义。以下代码显示了 `<script>` 元素的内容：'
- en: '[PRE13]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The details of the preceding code are listed here:'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前述代码的详细信息如下所示：
- en: The `createdCallback` method creates `shadowRoot` for the host element. It finds
    and clones the content of the element to activate it. After activation, it appends
    the HTML content to `shadowRoot`.
  id: totrans-153
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`createdCallback` 方法为宿主元素创建 `shadowRoot`。它找到并克隆元素的内容以激活它。激活后，它将 HTML 内容追加到
    `shadowRoot`。'
- en: The `attachedCallback` method has a `setInterval` method, which contains the
    code for setting the attributes `hour`, `minute`, and `second` with the current
    time using a `date` object. The code block gets executed in every 1 second and
    updates the value of the `hour`, `minute`, and `second` attributes.
  id: totrans-154
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attachedCallback` 方法包含一个 `setInterval` 方法，该方法使用 `date` 对象设置 `hour`、`minute`
    和 `second` 属性的当前时间。代码块每秒执行一次，并更新 `hour`、`minute` 和 `second` 属性的值。'
- en: The `attributeChangedCallback` method gets called whenever there is change of
    value in the `hour`, `minute`, and `second` attributes. It has a `switch` block
    containing cases like `hour`, `minute`, and `second`. Based on the change in the
    attribute, one of the `switch` case gets activated, which updates the text content
    of the DOM element.
  id: totrans-155
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当 `hour`、`minute` 和 `second` 属性的值发生变化时，`attributeChangedCallback` 方法会被调用。它包含
    `hour`、`minute` 和 `second` 等情况的 `switch` 块。根据属性的变化，其中一个 `switch` 情况会被激活，从而更新 DOM
    元素的文本内容。
- en: 'The `demo` directory contains the code for testing the `<ts-clock>` element.
    The `index.html` file contains the `<ts-clock>` element with `hour`, `minute`,
    and `second` having default values `HH`, `MM`, and `SS`, respectively. The content
    of the `index.html` file is listed as follows:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '`demo` 目录包含测试 `<ts-clock>` 元素的代码。`index.html` 文件包含具有默认值 `HH`、`MM` 和 `SS` 的
    `hour`、`minute` 和 `second` 属性的 `<ts-clock>` 元素。`index.html` 文件的内容如下所示：'
- en: '[PRE14]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The output of the preceding code is rendered in the following screenshot showing
    `hour` (HH), `minute` (MM), and `second` (SS) in the 24-hour format:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 前述代码的输出在以下屏幕截图中被渲染，显示了 24 小时格式的 `hour`（HH）、`minute`（MM）和 `second`（SS）：
- en: '![Digital clock development](img/image00309.jpeg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![数字时钟开发](img/image00309.jpeg)'
- en: The following screenshot shows the Chrome developer tool with the HTML inspection
    for the output of the preceding code. We can find the Shadow DOM subtree of the
    `<ts-clock>` element containing the CSS style and HTML element.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了 Chrome 开发者工具中前述代码的 HTML 检查结果。我们可以找到包含 CSS 样式和 HTML 元素的 `<ts-clock>`
    元素的 Shadow DOM 子树。
- en: '![Digital clock development](img/image00310.jpeg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![数字时钟开发](img/image00310.jpeg)'
- en: Summary
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned about the Bosonic framework that is used to create
    a custom element with the lifecycle callback methods. In the next chapter, we
    will learn about the Mozilla Brick framework based on X-Tag.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了用于创建具有生命周期回调方法的自定义元素的 Bosonic 框架。在下一章中，我们将学习基于 X-Tag 的 Mozilla Brick
    框架。
