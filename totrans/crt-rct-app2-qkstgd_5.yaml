- en: Applying Modern CSS to Create React App Projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we've been working on our project, we've been focusing very heavily on the
    functionality, but overall we have been perhaps slightly less focused on how everything
    actually looks! While this is fine for establishing functionality and making everything
    flow nicely at the start of the project, any designers working on the project
    will be ready to scream at this point!
  prefs: []
  type: TYPE_NORMAL
- en: Let's appease our design team, whether it's an actual team or just ourselves,
    by spending a little bit of time cleaning up the visual appeal of our project!
    In relation to our current design, while it's not necessarily hideous, it certainly
    leaves a lot to be desired!
  prefs: []
  type: TYPE_NORMAL
- en: So, how do we improve our application's design in a safe and sound way? Well,
    previously with Create React App, you actually didn't have a lot of options to
    be able to clean things up visually. You were frequently at the whims and mercy
    of random **Cascading Style Sheets** (**CSS**) project maintainers, and trying
    to get other libraries, frameworks, or preprocessors involved in the project compilation
    process was frequently a nightmare.
  prefs: []
  type: TYPE_NORMAL
- en: A **preprocessor** in the context of Create React App is basically one of the
    steps in the build process. In this case, we're talking about something that takes
    some of the style code (CSS or another format), compiles it down to basic CSS,
    and adds it to the output of the build process.
  prefs: []
  type: TYPE_NORMAL
- en: 'Over the span of this chapter, we''ll be covering materials that span the gamut
    of style-related functionality and highlighting what is, in my mind, one of the
    best new features in Create React App: support for CSS Modules and SASS. Specifically,
    we''ll be covering the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: The different ways to get CSS into our project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A brief history of CSS in Create React App projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing CSS Modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing SASS to our project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mixing CSS Modules and SASS together
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating CSS Modules and SASS into our project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating CSS frameworks into our project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cleaning up our tests after modifying the design
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What tools are available?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create React App, by default, supports us getting CSS into our application in
    a number of different ways.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can get CSS directly into our components by writing a `style` attribute
    and giving it some arbitrary CSS, as in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This will give us a little `div` with the word `Hello` in it, surrounded by
    a single-pixel red line for the border. While this is something you technically
    can do, generally speaking, you should avoid it. Using inline style statements
    like the preceding example makes it hard to keep your styles organized and track
    them down when formatting does go awry. Plus, if a designer or another non-developer
    needs to update the look and feel (for example, if the standard colors for things
    change), they will have to search to find where this one random little one-pixel
    red border is coming from!
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also create `.css` files and then `import` them into our project via
    a statement like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This is a technique that you''ve seen used before and that we''ve used a great
    deal in our application. It''s useful, of course, and allows us some small amount
    of separation of code and styles, but it doesn''t give us everything that we need.
    In fact, it actually introduces a new problem that we now have to solve, and one
    that can make fixing your projects and cleaning up the visual display of your
    projects incredibly frustrating and difficult over time: CSS conflicts!'
  prefs: []
  type: TYPE_NORMAL
- en: CSS conflicts can ruin your application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is a CSS conflict? Basically, when you import a CSS file into one of your
    components, it doesn't really limit it to one specific file; it gets added to
    the global CSS definitions instead. This means that if you define a particular
    style in one place, it might override or conflict with a totally different style
    in a different place. These style sheets get imported in some particular order,
    depending on how the code is loaded into your application overall, and everything
    ends up getting added to one big giant style sheet by the time your browser loads
    it all in.
  prefs: []
  type: TYPE_NORMAL
- en: As you can imagine, if everything is getting added to one gigantic file and
    there's no real differentiation between different files and how everything gets
    loaded, you will likely run into issues periodically where something that has
    been carelessly named ends up breaking everything!
  prefs: []
  type: TYPE_NORMAL
- en: A quick example of CSS conflicts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The easiest way to understand this is to see it in action. For the most part,
    we were pretty smart and safe about how we named our CSS files, but we did run
    into one giant gotcha: our `Divider` component defines a global style for all
    `hr` tags, regardless of where they appear. Let''s head back into `src/Todo.js`,
    and change our `render` function to place an `hr` tag in between the `description`
    and the `button`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that we have not added any style at all to this yet! Save the file and
    reload it, and despite us having never defined a style for `hr` tags in the `Todo`
    component, we''ll see that it has inherited the style of the `Divider` components!
    Refer to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bf59d40f-550b-4ba5-973d-c63e9e14e848.png)'
  prefs: []
  type: TYPE_IMG
- en: 'But that''s not what we wanted! While that''s a pretty nice divider, maybe
    we want ours to have a different color! For the sake of comparison, we''ll say
    that we want the dividers inside of the `Todo` component to be solid red lines
    but we want the other ones to stay the same. We''ll add the following CSS to `src/Todo.css`
    to change our `hr` tag to red instead by changing the `border` color:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Save and reload, and nothing happens? That''s odd. The code is correct and
    it''s definitely importing the CSS into our application correctly. Just as a sanity
    check, we''ll change the `hr` tag to a `div` tag to make sure it adds a red border
    to our `Todo div` tags:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Save and reload, and you should now see this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2802b385-a015-45dd-a56c-db7730276c28.png)'
  prefs: []
  type: TYPE_IMG
- en: Yikes, that's not what we wanted! It's added borders to *every* `div` on the
    page instead of just the `div` tag in our `Todo` component! Well, at least we've
    figured out there's nothing weird with the code, it's just something with how
    the CSS is getting loaded. It's easy to fix; we'll just toss an `!important` flag
    on the end of our `src/Todo.css` file's `hr` definition and call it a day!
  prefs: []
  type: TYPE_NORMAL
- en: The `!important` flag is a way to force CSS to prioritize this directive over
    other directives. It's also a great way to make your application a living nightmare
    to maintain over time; avoid using this whenever you possibly can!
  prefs: []
  type: TYPE_NORMAL
- en: 'Back in `src/Todo.css`, we''ll commit our CSS crime by tossing an `!important` flag
    at the end of the `hr` block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'There we go! Save and reload, and we will see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/265c16c5-e0be-4cba-9c41-73f10b60f2ba.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, we've ruined everything. Yikes! Hopefully our design team won't just completely
    disown us for this, right? They're really good at CSS, so they'll fix things!
    Well, they'll fix things after they're done yelling at us for botching the site's
    design inside of the code in a way that is incredibly difficult for a non-developer
    to track down.
  prefs: []
  type: TYPE_NORMAL
- en: The good news is that there is a different way to handle this situation in a
    way that works very well and prevents exactly this sort of scenario in the future!
    It is something that has been an absolute godsend to those of us that have been
    working on shared frontend development projects, which might have multiple different
    CSS files to have to search through to find the single CSS file that's causing
    a major design headache!
  prefs: []
  type: TYPE_NORMAL
- en: Introducing CSS Modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first of these are CSS Modules, and in Create React App 2 and higher, you
    don't need to do anything at all to start taking advantage of it immediately.
    CSS Modules give you the ability to modularize any CSS code that you import in
    a way that prevents introducing global, overlapping namespaces, despite the fact
    that the end result is still just one giant CSS file.
  prefs: []
  type: TYPE_NORMAL
- en: That being said, it's also not just going to immediately work in your project
    if you don't turn anything on or organize your code a little bit better. Right
    now, we've been placing all of our code directly into the `src/` directory, resulting
    in a scenario where the `root` folder is going to keep growing and growing over
    time until it gets so large and unwieldy that you'll never be able to find anything.
  prefs: []
  type: TYPE_NORMAL
- en: Better project organization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s start off by cleaning up our directory structure in our project a little
    bit better. There are a million different ways to do this and, honestly, they
    all have their own merits and flaws. We''re going to adopt a very simple structure
    right now since this project is not really going to be terribly large, so keeping
    things simple and building up is very easy to do with this structure. What we''re
    going to do is just separate out each component that has CSS and JavaScript code
    into their own folders. We''ll start off by creating `NewTodo`, `Todo`, `App`,
    `TodoList`, and `Divider` folders and placing all of their related code in each
    of those. We''ll also need to create a new file in each of these directories called
    `index.js`, which will be responsible for only importing and exporting the appropriate
    component. For example, the `App` index file (`src/App/index.js`) will look like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The new index file of `Todo` (`src/Todo/index.js`) will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: You can probably guess what the index files `NewTodo`, `TodoList`, and `Divider` will
    look like as well, based on this pattern!
  prefs: []
  type: TYPE_NORMAL
- en: Next, we'll need to change each place that these files are referenced to make
    it easier to import all of them. This will unfortunately be a little bit of grunt
    work, but we'll need to do it all the same to make sure we don't break anything
    in the process.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, in `src/App/App.js`, change the `TodoList import` component to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'There''s nothing we need to do for `Divider` since it is a component with no
    imports. `NewTodo` and `Todo` are of a similar type, so we can skip them as well.
    `src/TodoList/TodoList.js`, on the other hand, has a lot we need to deal with,
    since it''s one of our highest-level components and imports a lot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'But that''s not all. Our test file, `src/TodoList/TodoList.test.js`, also needs
    to be modified to include these new paths for our files or else our tests will
    fail! We''ll need nearly the same list of imports as earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, when you reload your application, your code should still be working just
    fine, your tests should all pass, and everything should be cleanly separated out!
    This makes our lives easier for a number of reasons, but when we''re talking about
    working with other developers or designers, this makes things a godsend for them
    since they can figure out exactly what CSS to modify when they need to fix things
    up! Our full project structure should now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: How to use CSS Modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's time for us to jump right into incorporating CSS Modules into our project.
    Right now, we haven't set up anything to start using CSS Modules, so we'll need
    to make a few changes to make this work. Think back to our `Todo` CSS conflict,
    where introducing some conflicting CSS namespaces and poor choices around the
    use of the `!important` flag introduced a nightmare situation.
  prefs: []
  type: TYPE_NORMAL
- en: Instead, let's start taking advantage of CSS Modules! We can actually mix the
    old way of doing things and the new way as well, but it'd be nice to take things
    a step further and use CSS Modules all the way.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing CSS Modules to our application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If we want to use CSS Modules, there are a few simple guidelines that we need
    to follow. The first is that we need to name our files `[whatever].module.css`,
    instead of `[whatever].css`. The next thing we need to do is to make sure that
    our styles are named simply and are easy to reference. Let''s start off by following
    these conventions and by renaming our CSS file for `Todo` as `src/Todo/Todo.module.css`,
    and then we''ll change the contents a tiny bit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: CSS Module guidelines prefer that you use **camelCase** for naming conventions,
    so `Done` and `Todo` will become `done` and `todo`, respectively. Something like
    `NewTodo` will instead become `newTodo` as well!
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we''ll open up `src/Todo/Todo.js` to take advantage of CSS Modules instead.
    We created a helper function in our `Todo` component called `cssClasses()`, which
    returns the styles we should be using in our component, and there''s not much
    we need to change to make this all work exactly the same as earlier. We''ll need
    to change our `import` statement at the top as well, since we renamed the file
    and are changing how our CSS is getting loaded into our code! Take a look at the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'This enables our code to take advantage of any class names defined in `Todo.module.css`
    by referencing them as `styles.[className]`. For example, in the previous file,
    we defined two CSS class names: `todo` and `done`, so we can now reference them
    in our component via `styles.Todo` and `styles.done`. We''ll need to change the
    `cssClasses()` function to use this, so let''s make those exact changes now. In
    `src/Todo/Todo.js`, our `cssClasses()` function should now read as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Save and reload, and our application should be back to normal! There''s more
    we can do here, though, so let''s return back to our conflict scenario. If you
    remember, the problem was that we needed to be able to change the `hr` tags inside
    of the `todo` components to have their own styles and effects, but not affect
    everything else and also not have to use the `!important` flag if we can avoid
    it. Head back into `src/Todo/Todo.module.css` and add the following block for
    our `hr` tag, which we''ll give a new class of `redDivider`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'And finally, return back to our `render()` function in `src/Todo/Todo.js`,
    and change our `render()` function''s `hr` tag inclusion to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Save and reload, and now we should have fully compartmentalized CSS code without
    worrying about collisions and global namespaces! Refer to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6edde697-239e-44ab-9fda-3b568ca992f6.png)'
  prefs: []
  type: TYPE_IMG
- en: Composability with CSS Modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: That's not all that CSS Modules give us, although it's certainly one of the
    great parts of CSS Modules that we get immediately and with no fuss (seriously,
    we wrote zero configuration to make all of it happen; it was all just code). We
    also get CSS composability, which is the ability to inherit CSS classes off of
    other classes, whether they're in the main file or not! This can be incredibly
    useful when you're setting up more complicated nested components that all need
    to handle slightly different style sheets, but are not wildly different from each
    other. Let's say we want to have the ability to mark some components as `critical`
    instead of just regular Todos.
  prefs: []
  type: TYPE_NORMAL
- en: 'We don''t want to change too much about the component; we want it to inherit
    the same basic rules as all of the other Todos. We''ll need to set up some code
    to make this happen. Back in `src/Todo/Todo.js`, we''re going to make some modifications
    to allow a new state property of `critical`. We''ll start off in the `constructor` component,
    where we''ll add our new `state` property and a `bind` tag for a function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'We add a new `critical` property in our `state` property, set it to a default
    value of `false`, and then we also reference a function (which we haven''t written
    yet) called `markCritical`, and we bind `this`, since we''ll be using it in an
    event handler later. Next, we''ll tackle the `markCritical()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll also need to modify our `cssClasses()` function so that it can react
    to this new `state` property. To demonstrate the composability function of CSS
    Modules, we''ll set it so that `classes` is originally an empty array, and then
    the first item either becomes `critical` or `todo`, depending on whether or not
    the item is marked as `critical`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'And finally, in our `render` function, we''ll create the `button` tag to mark
    items as `critical`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'We''re not quite done yet, although we''re at least 90% of the way there. We''ll
    also want to go back to `src/Todo/Todo.module.css` and add a new block for the
    `critical` class name, and we''ll use our composable property as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'To use composition, all you need to do is add a new CSS property called `composes`
    and give it a class name (or multiple class names) that you want it to compose.
    Compose, in this case, is a fancy way of saying that it inherits the behavior
    of the other class names and allows you to override others. In the previous case,
    we''re saying `critical` is a CSS module class that is composed of a `todo` model
    as the base, and adds a `border` component of a big red dashed line since, well,
    we''ll just say that this means it is `critical`. This previous code is the equivalent
    of us writing out the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Save and reload, as always, and you should be able to mark items as Mark as
    Done, Mark as Critical, or both, or remove them by clicking Remove Me, as in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4ab9c5a0-878d-4c4a-a005-513f59d21cec.png)'
  prefs: []
  type: TYPE_IMG
- en: And that about covers it for our brief introduction to CSS Modules! There's
    certainly more that you could cover over time, but this is more intended to be
    a quickstart guide and we could probably fill up a second book just on CSS techniques
    and libraries!
  prefs: []
  type: TYPE_NORMAL
- en: Before you move on, you'll also want to quickly update your snapshots for your
    tests by hitting *U* in the `yarn test` screen!
  prefs: []
  type: TYPE_NORMAL
- en: Introducing SASS to our project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: That's not all that the Create React App added support for as part of Create
    React App 2! By very popular demand, the Create React App team added in support
    for SASS pre-processing as well! Often, you'd pretty much be guaranteed that you'd
    need to eject your project as soon as you wanted to start working with any SASS
    in your project.
  prefs: []
  type: TYPE_NORMAL
- en: What is SASS?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s talk a little bit about what SASS actually is, since it''s a pretty
    important thing to cover. Otherwise, you''d have no connection to why this is
    worth the effort (even though, to be fair, it is very little effort to integrate
    into your Create React App projects). SASS is essentially CSS with extended feature
    support. When I say *extended feature support* here, though, I mean it! SASS supports
    the following feature set, which is missing in CSS, and which includes the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nesting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Partial CSS files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Import support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mixins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extensions and inheritance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Operators and calculations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This feature set alone makes including SASS worth it on nearly any complicated
    frontend project that you might be working with, and honestly after using SASS
    for a long time and then not having it, it's hard to ever want to go back to vanilla
    CSS. So, let's start getting some SASS into our project!
  prefs: []
  type: TYPE_NORMAL
- en: Installing and configuring SASS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The good news is that getting SASS support working in a Create React App project
    is incredibly simple! We first need to install it via `yarn`, or `npm` first.
    We''ve used `yarn` for everything else so we''ll stick to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: We'll see a *ton* of output from it, but assuming there are no errors and everything
    goes well, we should be able to restart our development server and get started
    with some SASS. Let's create a more general utility SASS file that will be responsible
    for storing standardized colors that we'll want to use throughout our application,
    and something to store that neat gradient `hr` pattern in case we want to use
    it elsewhere.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll also change some of the colors that we''re using so that there is some
    red, green, and blue, depending on whether the item is critical, done, or neither,
    respectively. In addition, we''ll need to change up our project a little bit and
    add a new file to have a concept of some shared styles and colors. So, let''s
    begin:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file, `src/shared.scss`, in our project and give it the following
    body:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, hop over to `src/Divider/Divider.css` and rename the file to `src/Divider/Divider.scss`.
    Next, we''ll change the reference to `Divider.css` in `src/Divider/Divider.js`,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we''ll need to change up the code in `Divider.scss` to import in our shared
    variables file and use a variable as part of it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: So, we import in our new shared SASS file in `src/`, and then the `background-image`
    value just references the `$fancy-gradient` variable that we created, which means
    we can now recreate that fancy gradient whenever we need to without having to
    rewrite it over and over!
  prefs: []
  type: TYPE_NORMAL
- en: Save and reload, and you should see that nothing major has changed!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This is a pretty good example of introducing SASS where it just replaces our
    standard CSS, but what about when we start to introduce CSS Modules?
  prefs: []
  type: TYPE_NORMAL
- en: Mixing SASS and CSS Modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The good news is that it''s basically no more complicated to introduce SASS
    to CSS Modules in Create React App. In fact, the steps are borderline identical!
    So, if we want to start mixing the two, all we need to do is rename some files
    and change how our imports are handled. Let''s see this in action:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, head back to our `src/Todo/Todo.module.css` file and make a very minor
    modification. Specifically, let''s rename it `src/Todo/Todo.module.scss`. Next,
    we need to change our `import` statement in `src/Todo/Todo.js`, otherwise the
    whole thing will fall apart:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we should have our SASS working for CSS Modules with the `Todo` component,
    so let''s start taking advantage of it. Again, we''ll need to `import` our `shared`
    file into this SASS file as well. Note the following back in `src/Todo/Todo.module.scss`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we''ll need to start changing the references to our various background
    colors. We''ll change the background for regular Todos to `$todo-normal`. Then,
    we''ll change the finished `Todo` background to `$todo-complete`. Finally, we''ll
    want to change the `critical` items to `$todo-critical`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Save and reload our project, and let''s make sure the new color scheme is being
    respected:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ffbf312e-50cd-4e47-bfb7-6cb0615af6ab.png)'
  prefs: []
  type: TYPE_IMG
- en: Honestly, everything beyond this point is just diving deeper and deeper into
    SASS-specific syntax, and again, that falls pretty far outside of the scope of
    this book. As you can see from the preceding screenshot though, we were able to
    introduce SASS into our CSS Modules code with no real complications.
  prefs: []
  type: TYPE_NORMAL
- en: Even better, we've now introduced a new way to change themes and skins in our
    project without a ton of extra work, and if our designers ever want to run in
    and change, for example, the backgrounds of all of the Todos and change the general
    color scheme, they can do so by running into the `shared.scss` file quickly and
    making a few color changes, and not having to change much else!
  prefs: []
  type: TYPE_NORMAL
- en: We can keep the lovely code modularity and developer-centric features of CSS
    Modules and SASS, but also provide nice inlets into our code to allow designers
    and other non-developers to modify the design and style elements where necessary!
    Even better, our code gets easier to maintain with the addition of two new features
    instead of making our project exponentially more complicated!
  prefs: []
  type: TYPE_NORMAL
- en: Adding CSS frameworks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A very common use case that you'll run into as part of working on a frontend
    project is integrating some sort of third-party CSS framework. This is something
    I've had to do on nearly every frontend development project I've ever touched,
    and there's pretty good odds that you'll need to run through this same process!
  prefs: []
  type: TYPE_NORMAL
- en: We'll stick to one of the most common ones, since it will give you a good introduction
    to using frameworks in general, so we'll start off by integrating bootstrap into
    our project! It won't take much for our project to go from sort of ugly to actually
    kind of decent! As with most other things we've run into as part of our development
    process with Create React App, this is equally simple for us to implement! We'll
    start off by adding both `bootstrap` to our project and `reactstrap`, which is
    a pre-made React component that takes full advantage of Twitter Bootstrap!
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll start by adding `bootstrap`, and `reactstrap`, via `yarn`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Right now, if you use `bootstrap` at version 4.x, you'll need to include `reactstrap`,
    but at 6.5.x to avoid error messages!
  prefs: []
  type: TYPE_NORMAL
- en: 'We should see a bunch of things get installed in our project folder, but hopefully
    no errors! After everything is successfully installed, we can then get the baseline
    `bootstrap` into our project by opening up `src/index.js` and adding a single
    `import` statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Cleaning up our design, starting with the header
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, let''s clean up our ugly header, which will also require us to remove
    some of the code we wrote earlier to experiment with JavaScript syntax! Currently,
    our `header` is our own pre-rolled thing but it''s not very good-looking as it
    is right now. We''ll want to take advantage of the `Navbar` and `NavbarBrand`
    components that `reactstrap` provides to us as part of its standard exports! Open
    up `src/App/App.js`, and we''re going to start modifying the file pretty significantly:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll start off by adding our `Navbar` and `NavbarBrand` imports at the top:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we can remove all of the `header` configuration objects, since we won''t
    need any of them after we''re done editing this file. Instead, we''ll just replace
    it with a single `headerTitle` variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we''ll need to replace our `headerDisplay` function, since it is going
    to be using the new `reactstrap` component instead of the previous code we had
    in place:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice that, now, `header` only accepts a passed-in title instead of the huge
    configuration object we were using earlier. This simplifies our code pretty significantly!
    We''ll also need to change the call in our `App` component to our `header` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Save it and we should have a significantly cleaner `header` in our project!
    Refer to the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d479e17f-4bd0-49d6-b0ef-6de690a14d0d.png)'
  prefs: []
  type: TYPE_IMG
- en: Cleaning up the NewTodo component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We'll also want to clean up our `NewTodo` component, since it is pretty bare
    bones right now! We'll basically want to update anywhere a `Button` or `Input` function
    appears in our code to make sure our app has a clean, consistent design all over
    the place!
  prefs: []
  type: TYPE_NORMAL
- en: 'First, at the top of `src/NewTodo/NewTodo.js`, we''ll want to add our `reactstrap`
    imports! We''ll need `Button`, `Input`, and `InputGroup`, so let''s add them as
    our named imports from `reactstrap`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we''ll need to clean up the text `Input` and `Button` display properly,
    so let''s wrap our text field and `Button` inside of an `InputGroup` component
    to keep them together! We''ll change the text `Input` to the `reactstrap Input`
    component and the `Button` tag to a `reactstrap Button` component as well, and
    we''ll add a `placeholder` text for our input item. Also, note that we''re setting
    a new property on our `Button` tag called `color,` which is set to `"primary"`.
    This gives us a blue button instead of the default ugly grey button! Our `render()`
    function should now look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Save and reload, and our input should look much nicer; something like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1f9d00cf-2ca8-45e7-9be4-978f9f6c4131.png)'
  prefs: []
  type: TYPE_IMG
- en: Cleaning up our Todo component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our `Todo` components still look a little ugly, so let''s also give them the
    same treatment. After this, we''ll be in a good enough place to call it quits
    with making our project look a little nicer, but to get there we''ll need some
    more imports:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll need to `import`, `Button`, and `ButtonGroup` to our `Todo` components,
    since the only things we''ll want to clean up are our buttons! To do so, use the
    following code, adding it to `src/Todo/Todo.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, hop right on down to the `render()` function in `src/Todo/Todo.js`, where
    we''ll wrap our buttons inside of a `ButtonGroup` component, and change each of
    the `button` tags to `Button` components:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Save and reload, and we should now see our project looking like this instead:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e4a94cf8-dba5-478b-9f82-2106e73be7bb.png)'
  prefs: []
  type: TYPE_IMG
- en: One thing we haven't fixed yet are our tests! We should now see a large number
    of failing tests, so we'll need to go in and fix them specifically!
  prefs: []
  type: TYPE_NORMAL
- en: Making our tests pass again
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Since we''ve changed a bunch of `input` and `button` tags and we have tests
    that are specifically looking for them, we''ll need to hop into `src/NewTodo/NewTodo.test.js`
    first, and change every instance of `.find("input")` and `.find("button")` to
    `.find("Input")`, and `.find("Button")`. We''ll start with our first test, which
    tests the form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll also want to modify the next test that relies on simulating `button`
    clicks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'We''re almost done with this file! We have one more place where we''re attempting
    to simulate a `button` click, so we''ll need to clean up that test too! We can
    do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'After saving and reloading, we should see fewer failed tests and can then move
    on to the next test suite that''s failing! We can do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'From the previous code snippet, we can see that the other failing test suite
    is in `src/Todo/Todo.test.js`, so let''s fix that up too in the same way! Scroll
    to the very bottom of the file and change the two failing tests that are looking
    for `button` tags instead of `Button` components:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Save the file, and when the tests come back up (you may have to hit *U* to
    update the `Snapshots` as well, don''t forget), we should see a fully green test
    suite again, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: We're *almost* there, but remember the new functionality that we added to our
    project to mark certain `Todo` items as `critical`? We never added new tests for
    it! The good news is that there's only one more test we need to write for it!
  prefs: []
  type: TYPE_NORMAL
- en: 'This test should be almost identical to the test for seeing when `Todo` items
    are clicked and marked as done; except, this time, we''re looking for the `Mark
    Critical` button, where we''ll simulate a click on that button. After the button
    is clicked, we should expect to see the `critical` property on the `state` of
    the `component` change from `false` to `true`, which also means we''ll start off
    with a sanity check in our test to make sure the `critical` property starts off
    `false` *before* we click on the button, and ends as `true` after the button click!
    This is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Get into the habit of writing these sanity checks in your tests, as they will
    help you avoid writing tests that mistakenly assume default states and lead to
    useless tests in the future!
  prefs: []
  type: TYPE_NORMAL
- en: 'That''s it! Our design is clean, our test suite is green, and our project is
    moving forward at an awesome pace! We''ll rerun our test suite again just to make
    sure that everything is still green, but if it is, then we can safely move on
    to the next challenge:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've added some nice new functionality to our project but didn't really have
    to engage in a lot of the headache and setup (and heartache, I suppose) that comes
    with adding two new CSS processors to our project! We have CSS Modules and SASS
    playing nicely in our Create React App project and have had to install a single
    new dependency. We have them playing nicely *together* even, which is an even
    greater achievement!
  prefs: []
  type: TYPE_NORMAL
- en: We've cleaned up our code a little bit and started grouping things together,
    and introduced concepts such as shared SASS files to store variables for colors
    and values, which allows us to change a color, for example, in one place and have
    it affect everywhere the variable appears!
  prefs: []
  type: TYPE_NORMAL
- en: Our code is cleaner, our designer is happy, we're happy, and we can continue
    to push forward on our project without having to slow down. We've never had to
    dive into configuration files, or do anything much more complicated than installing
    a dependency! This is yet another massive win in favor of Create React App!
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll dive into how to build a simulated backend to your
    frontend project via Create React App's incredibly nice proxy API functionality!
  prefs: []
  type: TYPE_NORMAL
