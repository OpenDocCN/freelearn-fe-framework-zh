["```js\nquery SampleQuery {\n  content {\n    edges {\n      node {\n        property\n      }\n    }\n  }\n}\n```", "```js\nquery MySitePages {\n  allSitePage {\n    edges {\n      node {\n        path\n      }\n    }\n  }\n}\n```", "```js\n{\n  \"data\": {\n    \"allSitePage\": {\n      \"edges\": [\n        {\n          \"node\": {\n            \"path\": \"/404/\"\n          }\n        },\n        {\n          \"node\": {\n            \"path\": \"/about/\"\n          }\n        },\n        {\n          \"node\": {\n            \"path\": \"/\"\n          }\n        }\n      ]\n    }\n  }\n}\n```", "```js\nquery AllSitePagesExcept404 {\n  allSitePage(filter: {path: {ne: \"/404/\"}}, limit: 1) {\n    edges {\n      node {\n        path\n      }\n    }\n  }\n}\n```", "```js\nquery ASingleSitePage {\n  sitePage {\n    path\n  }\n}\n```", "```js\n    module.exports = {\n      siteMetadata key sits next to the plugins we have defined. Here, you can see we have defined the key values I suggested earlier. Keep in mind that these key values are just a suggestion and that if you want to add or remove keys, feel free to do so.\n    ```", "```js\n    query BasicInfo {\n      site {\n        siteMetadata {\n          name\n          role\n        }\n      }\n    }\n    ```", "```js\n    import React from \"react\";\n    import { Link, graphql from Gatsby. We are then appending our query from *Step 2* to the end of the file, below our page component. The export name isn't important as Gatsby looks for any GraphQL string within your pages, but here, you can see I am calling it query. When Gatsby builds this page, this query is pulled out of our source code, parsed, and run, and the resultant data is passed into our page component via the data prop you can see on line 5\\. We can then use the data contained within the query (in our case, `name` and `role` from `siteMetadata`) to populate our site hero.Important NoteYou can only export one query per component. If you ever need more data on the page, instead of exporting another query, extend your existing query.\n    ```", "```js\n    ---\n    type: bio\n    ---\n    ```", "```js\n    ---\n    type: bio\n    ---\n    # A short biography about me\n    This is a very short biography about ***me***. But it could be as long as I want it to be. \n    ```", "```js\n    npm install gatsby-source-filesystem\n    ```", "```js\n    npm install gatsby-transformer-remark\n    ```", "```js\n    module.exports = {\n      siteMetadata: {\n        siteUrl: 'https://your.website',\n        name: 'Your Name',\n        role: 'Developer at Company',\n        bio: 'My short bio that I will use to introduce\n              myself.',\n      },\n      plugins: [\n        gatsby-source-filesystem to tell Gatsby to read files from the Markdown folder we created previously.We also added `gatsby-transformer-remark` so that Gatsby can read Markdown files into its GraphQL layer.\n    ```", "```js\n    query Biography {\n      markdownRemark(frontmatter: {type: {eq: \"bio\"}}) {\n        html\n      }\n    }\n    ```", "```js\n    {\n      \"data\": {\n        \"markdownRemark\": {\n          \"html\": \"<h1>A short biography about\n            me</h1>\\n<p>This is a very short biography\n            about <em><strong>me</strong></em>. But it\n            could be as long as I want it to be.</p>\"\n        }\n      },\n      \"extensions\": {}\n    }\n    ```", "```js\n    import React from \"react\";\n    import { graphql } from \"gatsby\";\n    import Layout from \"../components/layout/Layout\";\n    export default function About({ data prop. I'd like to draw your attention to the div with the dangerouslySetInnerHTML prop. dangerouslySetInnerHTML is React's replacement for using innerHTML in the browser's DOM. It's considered *dangerous* because if the content can be edited by a user, this can expose users to a **cross-site scripting attack**. A cross-site scripting attack injects malicious code into a vulnerable web application. In our case, however, the content is always static and always defined by us, so we have nothing to worry about.\n    ```", "```js\n    import React from \"react\";\n    const employment = [\n      {\n        company: \"Company One\",\n        role: \"UX Engineer\",\n      },\n      {\n        company: \"Company Two\",\n        role: \"Gatsby Developer\",\n      },\n    ];\n    const EmploymentHistory = () => (\n      <div className=\"text-left max-w-xl mx-auto\">\n        <div className=\"grid grid-cols-2 gap-2 mt-5\">\n          {employment.map(({ role, company }) => (\n            <>\n              <div className=\"flex justify-end font-\n                bold\"><p>{role}</p></div>\n              <p>{company}</p>\n            </>\n          ))}\n        </div>\n      </div>\n    );\n    export default EmploymentHistory;\n    ```", "```js\n    ---\n    type: bio\n    ---\n    type as bio. Just below that, you will see we have introduced an import statement pointing to our newly created component. We can then use the imported component wherever we like within the body of our content, much like I have on the last line in the preceding example.\n    ```", "```js\n    npm install gatsby-plugin-mdx @mdx-js/mdx @mdx-\n    js/react\n    ```", "```js\n    module.exports = {\n      siteMetadata: {\n        siteUrl: 'https://your.website',\n        name: 'Your Name',\n        role: 'Developer at Company',\n        bio: 'My short bio that I will use to introduce\n              myself.',\n      },\n      plugins: [\n        {\n          resolve: 'gatsby-source-filesystem',\n          options: {\n            name: 'mdx-bio',\n            gatsby-source-filesystem to tell Gatsby to read files from the MDX folder we created previously. We have also added gatsby-plugin-mdx so that Gatsby can read MDX files into its GraphQL layer.\n    ```", "```js\n    query Biography {\n        mdx(frontmatter: { type: { eq: \"bio\" } }) {\n          body\n        }\n    }\n    ```", "```js\n    import React from \"react\";\n    import { graphql } from \"gatsby\";\n    import Layout from \"../components/layout/Layout\";\n    data prop. We then used MDXRenderer from gatsby-plugin-mdx to render the MDX body's content.Important NoteUsing `MDXRenderer` does increase your bundle size and the time it takes for your JavaScript to be parsed. This is because instead of rendering all the HTML at build time, any pages containing MDX are now being rendered to HTML on the frontend. This is important to keep in mind as it will negatively impact your site's performance.\n    ```", "```js\n    npm install gatsby-source-graphcms gatsby-plugin-image\n    dotenv\n    ```", "```js\n    GRAPHCMS_ENDPOINT=.env file is used to house environment variables. Be sure to replace the highlight with your master URL endpoint from *Step 6*. This file should not be committed to source control and, as such, should be added to your .gitignore.\n    ```", "```js\n    dotenv to load in our create .env file, and then we use that variable within the plugin configuration of gatsby-source-graphcms.\n    ```", "```js\n    query Hobbies {\n      graphCmsIcebreaker {\n        hobbies\n      }\n    }\n    ```", "```js\n    import React from \"react\";\n    import { graphql } from \"gatsby\";\n    import Layout from \"../components/layout/Layout\";\n    import { MDXRenderer } from \"gatsby-plugin-mdx\";\n    export default function About({ data }) {\n      const {\n        mdx: { body },\n     graphCmsIcebreaker: { hobbies },\n      } = data;\n      return (\n        <Layout>\n          <div className=\"max-w-5xl mx-auto py-16 lg:py-24\n            text-center\">\n            <MDXRenderer>{body}</MDXRenderer>\n            <div>\n     <h2>Hobbies</h2>\n     {hobbies.join(\", \")}\n            </div>\n          </div>\n        </Layout>\n      );\n    }\n    export const query = graphql'\n      {\n        mdx(frontmatter: { type: { eq: \"bio\" } }) {\n          body\n        }\n        graphCmsIcebreaker {\n     hobbies\n     }\n      }\n    ';\n    ```", "```js\n    npm install gatsby-source-prismic gatsby-plugin-image\n    ```", "```js\n    module.exports = {\n      ...\n      plugins: [\n       ...\n        'gatsby-plugin-image',\n        gatsby-plugin-image, so make sure it has been added to your configuration.\n    ```", "```js\n    query Hobbies {\n      prismicIcebreaker {\n        data {\n          hobbies {\n            hobby {\n              text\n            }\n          }\n        }\n      }\n    }\n    ```", "```js\n    import React from \"react\";\n    import { graphql } from \"gatsby\";\n    import Layout from \"../components/layout/Layout\";\n    import { MDXRenderer } from \"gatsby-plugin-mdx\";\n    export default function About({ data }) {\n      const {\n        mdx: { body },\n    data prop and is available for us to use in whatever way we wish.\n    ```"]