- en: Chapter 13. Redux and React
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we dived into Flux as an architecture. We saw how problems
    arise during data sharing across components. We saw different parts of this architecture—Actions,
    Stores, Views, and Dispatcher—and build upon our example using pure Flux, Dispatcher
    from Facebook, and EventEmitter. Finally, we built a simple application to see
    how all these components are tied up together to create a simple flow to share
    a common state across components.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will take a look at using Flux in a popular Flux-based state
    management implementation, **Redux**. We will see how it differs from pure Flux
    implementation that we saw previously. We will take a look at different components
    of Redux—its stores, actions, and reducers for the stores and actions. Finally,
    we will see how an app connects with the store, maintains a single state of the
    store, and passes information around in the views.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Redux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up Redux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Redux store
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reducers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting stores to app components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data flow in Redux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At the end of the chapter, we will be able to start using Redux in our applications
    to maintain the state for the Views. We will be able to set up and connect it
    with different parts of the app. We will be able to see how to distribute data
    in stores and use reducers and actions to manage store' data.
  prefs: []
  type: TYPE_NORMAL
- en: Redux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"Good morning, Shawn," started Mike.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Good morning, Mike. What are we working on today?"'
  prefs: []
  type: TYPE_NORMAL
- en: '"Ah, yesterday, we worked with Flux. It was to introduce you to the basics
    of Flux. In most of our projects, we used something similar to it in order to
    manage the state in the apps."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Today, we will see how to use Redux."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Cool."'
  prefs: []
  type: TYPE_NORMAL
- en: '"As stated at [https://github.coktreactjs/redux](https://github.coktreactjs/redux),
    *Redux is a predictable state container for JavaScript apps*. It''s kind of what
    we implemented previously."'
  prefs: []
  type: TYPE_NORMAL
- en: '"With Redux, we maintain a single state tree for the complete application and
    add reducers to enhance the state of the store. Previously, we were directly mutating
    the value of `_state` and then notifying the subscribers about the change. Let''s
    take a look at our app setup to get started with, as follows:"'
  prefs: []
  type: TYPE_NORMAL
- en: '`├── actions`'
  prefs: []
  type: TYPE_NORMAL
- en: '`│ └── social.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '`├── components`'
  prefs: []
  type: TYPE_NORMAL
- en: '`│ └── SocialTracker.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '`├── config.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '`├── containers`'
  prefs: []
  type: TYPE_NORMAL
- en: '`│ └── App.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '`├── reducers`'
  prefs: []
  type: TYPE_NORMAL
- en: '`│ ├── index.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '`│ └── social.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '`├── server.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '`├── store`'
  prefs: []
  type: TYPE_NORMAL
- en: '`│ └── configureStore.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '`├── styles`'
  prefs: []
  type: TYPE_NORMAL
- en: '`│ └── App.css`'
  prefs: []
  type: TYPE_NORMAL
- en: '`├── utils`'
  prefs: []
  type: TYPE_NORMAL
- en: This is based on our previous application and example from [https://github.acktreactjs/redux/tree/master/examples/todomvc](https://github.acktreactjs/redux/tree/master/examples/todomvc)."
  prefs: []
  type: TYPE_NORMAL
- en: '"Umm, I don''t see a dispatcher here."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Correct. Redux deviates from the normal Flux; here, it does not have a dispatcher.
    During the set up, we will see how we connect stores to the components so that
    the components get updates for the changes to state in the store."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Got it. Let''s begin as before then?"'
  prefs: []
  type: TYPE_NORMAL
- en: '"Yup."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Let''s start with our Main Component; this will be wrapped to listen to store
    by Redux, as follows:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Setting up Redux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"Now, there are different things happening here to set up our store. Let''s
    go through them, one wing:."'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapStateToProps`: We use this method to define how we are going to map the
    state from the Redux store to the props being sent to the components connected
    to listen to the store. Whenever new changes happen in the store, the components
    get notified and are passed to the object payload from this method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mapDispatchToProps`: This method is used to map the Actions and pass them
    on the props so that they can be used from within the component.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bindActionCreators`: This is used to wrap our Actions creator (`SocialActions`)
    into dispatch calls to support calling the actions directly. This helps to call
    the actions and notify the store for updates, which are done due to the dispatch.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`connect`: Finally, we have the connect call. This actually connects the React
    component to the store. It does not change the original component, but enhances
    and creates a new one. We can then start using the Actions from our component.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '"Got it. So, we are creating two methods to map how the actions and state from
    Redux should be made available to the component. We are then connecting the store
    to Redux in order to listen to the updates and make the actions and stores available
    to the component when there are updates to the store."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Yup. We are then going to start using this setup in the index, as shown in
    the following code:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '"The `Provider` component from the `react-redux` module allows us to connect
    the components to the stores. It accepts a store that we are setting up as the
    initial store state. The `Provider` component makes this store available to the
    components that are connected to hear from the store. This is what we did in our
    previous file by connecting to the store."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Got it. This is where *Redux as a single store* comes into picture, I assume?
    I see that we have a single store that the complete app is going to make use of."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Yup."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Finally, we are going to complete our setup by defining the store that we
    are passing to the `<Provider>` tag, as follows:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '"Again, setting up a store requires performing different operations, let''s
    go throuowing:."'
  prefs: []
  type: TYPE_NORMAL
- en: '`createStore`: This creates a store for us to represent the complete state
    tree of the application. It takes in the arguments—the reducer (our reducers that
    we will see shortly) and initial state for the store.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`applyMiddleware`: This is used to enhance Redux with middleware. Here, we
    are using the thunk middleware, which allows us to do asynchronous dispatches.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`configureStore`: Finally, in `configureStore`, we are creating the store by
    calling the enhanced `createStore`: `createStoreWithMiddleware`. We have some
    conditions here to handle the hot module replacement to auto-reload the code changes,
    which we saw in HMR.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '"Got it."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Next, let''s take a look at the following actions:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '"We are importing the following code:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The `JSONUtil` and `ArrayUtil` class as before. I have moved them to use the
    classes instead of modules."
  prefs: []
  type: TYPE_NORMAL
- en: '"The code for `ArrayUtil` class is as follows:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '"The code for `JSONUtil` class is as follows:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '"Now, instead of the actions object that we defined before, we will define
    the actions as constants that we are going to refer acrosscommand:."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '"For other methods, we define the methods simply as follows:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '"Similar to our previous implementation, we wrap and return the payload that
    will be used by the reducer to mutate the store."'
  prefs: []
  type: TYPE_NORMAL
- en: '"In case of fetching data from the API, we wrap the actual calls in `dispatch`,
    as follows:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '"Here, we are dispatching thods ious manner and they will get chained and called
    when the results are returned. As we saw previously, when we call the following
    method from `SocialActions`, which we wrapped in the dispatch calls to notify
    the store:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '"In the preceding method, as it''s not wrapped by default, we will wrap the
    methods inside `fetchTweets` in the `dispactch()` calls. We will also wrap the
    following code:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '"After a response is received, we will call syncTweets that also notifies the
    Redux store."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Got it. Next, we should see the reducer, I guess?"'
  prefs: []
  type: TYPE_NORMAL
- en: '"Yup, let''s take a look at it:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '"We already saw `mergeFeed` before. Similar to moving to classes, I moved the
    implementation to ES6\. The logic for determining the feed is as before, we will
    accept Twitter and Reddit feeds and `showReddit`/`showTwitter` flags to determine
    how to construct the feed."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Now, the peculiar method is as follows:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '"The reducer gets called for action dispatches. It receives the previous state
    in state and action payload in action. The state, as you can see here, has a default
    value."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Now, based on the action payload, we will determine what needs to be run with
    the data, just as we did earlier:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '"The difference here is that we are not mutating the state directly. Based
    on the previous state, we merge the previous and current computed state, based
    on the action type and return it."'
  prefs: []
  type: TYPE_NORMAL
- en: '"This is now the current state of the app."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Got it, I believe. All that we are left with is the app now."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Yup, let''s see how it will be. I have changed to use class as well."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '"So, we start by setting the local state to manage the Twitter user and Reddit
    us as follows:."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '"In the `render` method, we fetch the values (the store) that are being passed
    down as props by Redux to the component in order to be displayed:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '"Now, if you recall the following:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '"We are converting the state from Redux to pass the social object store from
    Redux as a prop to the component. We are then fetching the values such as `showTweets`,
    `showReddits`, and so on from the social prop value."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Similarly, we have the following code:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '"This converts the actions and passes them down as the props. We are receiving
    them as `filterTweets` and `filterReddits` on props. We then meof these actions
    as the `onclock` event handler, as follows:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '"Finally, we have the display of the feed itself by fetching the values from
    the props in the same way:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '"We will fetch the feed from the social prop being passed to us, as follows:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '"Finally, to sync the contents we have the following code:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '"Awesome. I guess that with this, we are done!"'
  prefs: []
  type: TYPE_NORMAL
- en: '"Yup. Would you like to recap the setup?"'
  prefs: []
  type: TYPE_NORMAL
- en: '"Sure. We started by setting up how we want to map the actions and stores to
    the props being sent to the components. We then set up the store and connect it
    to the component."'
  prefs: []
  type: TYPE_NORMAL
- en: '"To set up the store, we made use of and applied the thunk middleware module
    to enhance Redux in order to allow us to dispatch the actions asynchronously."'
  prefs: []
  type: TYPE_NORMAL
- en: '"We then created actions to be called from the component and wrap the payloads
    and action type to be delivered to the store."'
  prefs: []
  type: TYPE_NORMAL
- en: '"We also created the reducers—social reducer—to actually manipulate, create,
    and return new Redux states."'
  prefs: []
  type: TYPE_NORMAL
- en: '"That''s right! Let''s take a look at how it looks, shall we?"'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up Redux](img/4730_13_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '"Awesome! Carla is going to love this."'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We took a look at using Redux and setting it up. We saw how it differs from
    pure Flux implementation that we saw previously. We took a look at different components
    of Redux—its stores, actions, and reducers for the stores and actions. Finally,
    we saw how the app connects with the store and we make use of actions and data
    provided to the component via props.
  prefs: []
  type: TYPE_NORMAL
