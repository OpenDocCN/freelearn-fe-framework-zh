["```js\nimport React, { useState } from 'react';\n\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\n\nexport default function UsingStatetoRenderListItems() {\n  const [items, setItems] = useState([\n    { name: 'First Item', timestamp: new Date() },\n    { name: 'Second Item', timestamp: new Date() },\n    { name: 'Third Item', timestamp: new Date() }\n  ]);\n\n  return (\n    <List>\n      {items.map((item, index) => (\n        <ListItem key={index} button dense>\n          <ListItemText\n            primary={item.name}\n            secondary={item.timestamp.toLocaleString()}\n          />\n        </ListItem>\n      ))}\n    </List>\n  );\n}\n```", "```js\nconst [items, setItems] = useState([\n  { name: 'First Item', timestamp: new Date() },\n  { name: 'Second Item', timestamp: new Date() },\n  { name: 'Third Item', timestamp: new Date() }\n]);\n```", "```js\n<List>\n  {items.map((item, index) => (\n    <ListItem key={index} button dense>\n      <ListItemText\n        primary={item.name}\n        secondary={item.timestamp.toLocaleString()}\n      />\n    </ListItem>\n  ))}\n</List>\n```", "```js\n<List>\n  {items.map((item, index) => (\n    <ListItem\n      key={index}\n      button\n      dense\n      selected={item.selected}\n      onClick={onClick(index)}\n    >\n      <ListItemText\n        primary={item.name}\n        secondary={item.timestamp.toLocaleString()}\n        primaryTypographyProps={{\n          color: item.selected ? 'primary' : undefined\n        }}\n      />\n    </ListItem>\n  ))}\n</List>\n```", "```js\nconst onClick = index => () => {\n  const item = items[index];\n  const newItems = [...items];\n\n  newItems[index] = { ...item, selected: !item.selected };\n  setItems(newItems);\n};\n```", "```js\nimport React, { useState } from 'react';\n\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\n\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\n\nexport default function ListIcons() {\n  const [items, setItems] = useState([\n    { name: 'First User' },\n    { name: 'Second User' },\n    { name: 'Third User' }\n  ]);\n\n  return (\n    <List>\n      {items.map((item, index) => (\n        <ListItem key={index} button>\n          <ListItemIcon>\n            <AccountCircleIcon />\n          </ListItemIcon>\n          <ListItemText primary={item.name} />\n        </ListItem>\n      ))}\n    </List>\n  );\n}\n```", "```js\n<ListItem button key={index}>\n  <ListItemIcon>\n    <AccountCircleIcon />\n  </ListItemIcon>\n  <ListItemText primary={item.name} />\n</ListItem>\n```", "```js\n<ListItem button key={index}>\n  <ListItemText primary={item.name} />\n  <ListItemIcon>\n    <AccountCircleIcon />\n  </ListItemIcon>\n</ListItem>\n```", "```js\nimport React, { useState } from 'react';\n\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\n\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\nimport CheckCircleOutlineIcon from '@material-ui/icons/CheckCircleOutline';\n\nconst MaybeSelectedIcon = ({ selected, Icon }) =>\n  selected ? <CheckCircleOutlineIcon /> : <Icon />;\n\nexport default function ListIcons() {\n  const [items, setItems] = useState([\n    { name: 'First User' },\n    { name: 'Second User' },\n    { name: 'Third User' }\n  ]);\n\n  const onClick = index => () => {\n    const item = items[index];\n    const newItems = [...items];\n\n    newItems[index] = { ...item, selected: !item.selected };\n    setItems(newItems);\n  };\n\n  return (\n    <List>\n      {items.map((item, index) => (\n        <ListItem\n          key={index}\n          button\n          selected={item.selected}\n          onClick={onClick(index)}\n        >\n          <ListItemText primary={item.name} />\n          <ListItemIcon>\n            <MaybeSelectedIcon\n              selected={item.selected}\n              Icon={AccountCircleIcon}\n            />\n          </ListItemIcon>\n        </ListItem>\n      ))}\n    </List>\n  );\n}\n```", "```js\nconst MaybeSelectedIcon = ({ selected, Icon }) =>\n  selected ? <CheckCircleOutlineIcon /> : <Icon />;\n```", "```js\n<ListItemIcon>\n  <MaybeSelectedIcon\n    selected={item.selected}\n    Icon={AccountCircleIcon}\n  />\n</ListItemIcon>\n```", "```js\nimport React, { useState } from 'react';\nimport clsx from 'clsx';\n\nimport Avatar from '@material-ui/core/Avatar';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\n\nimport MarkunreadIcon from '@material-ui/icons/Markunread';\nimport PriorityHighIcon from '@material-ui/icons/PriorityHigh';\nimport LowPriorityIcon from '@material-ui/icons/LowPriority';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nexport default function ListAvatarsAndText({ classes }) {\n  const [items] = useState([\n    {\n      name: 'Unread',\n      updated: '2 minutes ago',\n      Icon: MarkunreadIcon,\n      notifications: 1\n    },\n    {\n      name: 'High Priority',\n      updated: '30 minutes ago',\n      Icon: PriorityHighIcon\n    },\n    {\n      name: 'Low Priority',\n      updated: '3 hours ago',\n      Icon: LowPriorityIcon\n    },\n    { name: 'Junk', updated: '6 days ago', Icon: DeleteIcon }\n  ]);\n\n  return (\n    <List>\n      {items.map(({ Icon, ...item }, index) => (\n        <ListItem button>\n          <ListItemIcon>\n            <Avatar>\n              <Icon />\n            </Avatar>\n          </ListItemIcon>\n          <ListItemText\n            primary={item.name}\n            secondary={item.updated}\n          />\n        </ListItem>\n      ))}\n    </List>\n\n  );\n}\n```", "```js\n<ListItemIcon>\n  <Avatar>\n    <Icon />\n  </Avatar>\n</ListItemIcon>\n```", "```js\nconst styles = theme => ({\n  activeAvatar: {\n    backgroundColor: theme.palette.primary[theme.palette.type]\n  }\n});\n```", "```js\n{\n  name: 'Unread',\n  updated: '2 minutes ago',\n  Icon: MarkunreadIcon,\n  notifications: 1\n}\n```", "```js\n<Badge\n  color={item.notifications ? 'secondary' : undefined}\n  badgeContent={\n    item.notifications ? item.notifications : null\n  }\n>\n  <Avatar\n    className={clsx({\n      [classes.activeAvatar]: item.notifications\n    })}\n  >\n    <Icon />\n  </Avatar>\n</Badge>\n```", "```js\nimport React, { Fragment } from 'react';\n\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Divider from '@material-ui/core/Divider';\n\nconst ListSections = () => (\n  <Fragment>\n    <List>\n      <ListItem>\n        <ListItemText primary=\"First\" />\n      </ListItem>\n      <ListItem>\n        <ListItemText primary=\"Second\" />\n      </ListItem>\n    </List>\n    <Divider />\n    <List>\n      <ListItem>\n        <ListItemText primary=\"Third\" />\n      </ListItem>\n      <ListItem>\n        <ListItemText primary=\"Fourth\" />\n      </ListItem>\n    </List>\n    <Divider />\n    <List>\n      <ListItem>\n        <ListItemText primary=\"Fifth\" />\n      </ListItem>\n      <ListItem>\n        <ListItemText primary=\"Sixth\" />\n      </ListItem>\n    </List>\n  </Fragment>\n));\n\nexport default ListSections;\n```", "```js\n<List>\n  <ListItem>\n    <ListItemText primary=\"First\" />\n  </ListItem>\n  <ListItem>\n    <ListItemText primary=\"Second\" />\n  </ListItem>\n</List>\n```", "```js\n<Fragment>\n  <Typography variant=\"title\">First Section</Typography>\n  <List>\n    <ListItem>\n      <ListItemText primary=\"First\" />\n    </ListItem>\n    <ListItem>\n      <ListItemText primary=\"Second\" />\n    </ListItem>\n  </List>\n  <Typography variant=\"title\">Second Section</Typography>\n  <List>\n    <ListItem>\n      <ListItemText primary=\"Third\" />\n    </ListItem>\n    <ListItem>\n      <ListItemText primary=\"Fourth\" />\n    </ListItem>\n  </List>\n  <Typography variant=\"title\">Third Section</Typography>\n  <List>\n    <ListItem>\n      <ListItemText primary=\"Fifth\" />\n    </ListItem>\n    <ListItem>\n      <ListItemText primary=\"Sixth\" />\n    </ListItem>\n  </List>\n</Fragment>\n```", "```js\nimport React, { useState, Fragment } from 'react';\n\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport Collapse from '@material-ui/core/Collapse';\n\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport InboxIcon from '@material-ui/icons/Inbox';\nimport MailIcon from '@material-ui/icons/Mail';\nimport ContactsIcon from '@material-ui/icons/Contacts';\nimport ContactMailIcon from '@material-ui/icons/ContactMail';\n\nconst ExpandIcon = ({ expanded }) =>\n  expanded ? <ExpandLessIcon /> : <ExpandMoreIcon />;\n\nexport default function NestedLists() {\n  const [items, setItems] = useState([\n    {\n      name: 'Messages',\n      Icon: InboxIcon,\n      expanded: false,\n      children: [\n        { name: 'First Message', Icon: MailIcon },\n        { name: 'Second Message', Icon: MailIcon }\n      ]\n    },\n    {\n      name: 'Contacts',\n      Icon: ContactsIcon,\n      expanded: false,\n      children: [\n        { name: 'First Contact', Icon: ContactMailIcon },\n        { name: 'Second Contact', Icon: ContactMailIcon }\n      ]\n    }\n  ]);\n\n  const onClick = index => () => {\n    const newItems = [...items];\n    const item = items[index];\n\n    newItems[index] = { ...item, expanded: !item.expanded };\n\n    setItems(newItems);\n  };\n\n  return (\n    <List>\n      {items.map(({ Icon, ...item }, index) => (\n        <Fragment key={index}>\n          <ListItem button onClick={onClick(index)}>\n            <ListItemIcon>\n              <Icon />\n            </ListItemIcon>\n            <ListItemText primary={item.name} />\n            <ExpandIcon expanded={item.expanded} />\n          </ListItem>\n          <Collapse in={item.expanded}>\n            {item.children.map(child => (\n              <ListItem key={child.name} button dense>\n                <ListItemIcon>\n                  <child.Icon />\n                </ListItemIcon>\n                <ListItemText primary={child.name} />\n              </ListItem>\n            ))}\n          </Collapse>\n        </Fragment>\n      ))}\n    </List>\n  );\n}\n```", "```js\nconst [items, setItems] = useState([\n  {\n    name: 'Messages',\n    Icon: InboxIcon,\n    expanded: false,\n    children: [\n      { name: 'First Message', Icon: MailIcon },\n      { name: 'Second Message', Icon: MailIcon }\n    ]\n  },\n  {\n    name: 'Contacts',\n    Icon: ContactsIcon,\n    expanded: false,\n    children: [\n      { name: 'First Contact', Icon: ContactMailIcon },\n      { name: 'Second Contact', Icon: ContactMailIcon }\n    ]\n  }\n]);\n```", "```js\n<Fragment key={index}>\n  <ListItem button onClick={onClick(index)}>\n    <ListItemIcon>\n      <Icon />\n    </ListItemIcon>\n    <ListItemText primary={item.name} />\n    <ExpandIcon expanded={item.expanded} />\n  </ListItem>\n  <Collapse in={item.expanded}>\n    {item.children.map(child => (\n      <ListItem key={child.name} button dense>\n        <ListItemIcon>\n          <child.Icon />\n        </ListItemIcon>\n        <ListItemText primary={child.name} />\n      </ListItem>\n    ))}\n  </Collapse>\n</Fragment>\n```", "```js\nconst useStyles = makeStyles(theme => ({\n  subItem: { paddingLeft: theme.spacing(3) }\n}));\n```", "```js\n<ListItem\n  key={child.name}\n  className={classes.subItem}\n  button\n  dense\n>\n  <ListItemIcon>\n    <child.Icon />\n  </ListItemIcon>\n  <ListItemText primary={child.name} />\n</ListItem>\n```", "```js\nimport React, { useState } from 'react';\n\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport IconButton from '@material-ui/core/IconButton';\n\nimport BluetoothIcon from '@material-ui/icons/Bluetooth';\nimport BluetoothDisabledIcon from '@material-ui/icons/BluetoothDisabled';\nimport DevicesIcon from '@material-ui/icons/Devices';\n\nconst MaybeBluetoothIcon = ({ bluetooth }) =>\n  bluetooth ? <BluetoothIcon /> : <BluetoothDisabledIcon />;\n\nexport default function ListControls() {\n  const [items, setItems] = useState([\n    {\n      name: 'Device 1',\n      bluetooth: true,\n\n      Icon: DevicesIcon\n    },\n    {\n      name: 'Device 2',\n      bluetooth: true,\n\n      Icon: DevicesIcon\n    },\n    {\n      name: 'Device 3',\n      bluetooth: true,\n\n      Icon: DevicesIcon\n    }\n  ]);\n\n  const onBluetoothClick = index => () => {\n    const newItems = [...items];\n    const item = items[index];\n\n    newItems[index] = { ...item, bluetooth: !item.bluetooth };\n\n    setItems(newItems);\n  };\n\n  return (\n    <List>\n      {items.map(({ Icon, ...item }, index) => (\n        <ListItem key={index} button>\n          <ListItemIcon>\n            <Icon />\n          </ListItemIcon>\n          <ListItemText primary={item.name} />\n          <ListItemSecondaryAction>\n            <IconButton\n              onClick={onBluetoothClick(index, 'bluetooth')}\n            >\n              <MaybeBluetoothIcon bluetooth={item.bluetooth} />\n            </IconButton>\n          </ListItemSecondaryAction>\n        </ListItem>\n      ))}\n    </List>\n  );\n}\n```", "```js\n<ListItem key={index} button>\n  <ListItemIcon>\n    <Icon />\n  </ListItemIcon>\n  <ListItemText primary={item.name} />\n  <ListItemSecondaryAction>\n    <IconButton\n      onClick={onBluetoothClick(index, 'bluetooth')}\n    >\n      <MaybeBluetoothIcon bluetooth={item.bluetooth} />\n    </IconButton>\n  </ListItemSecondaryAction>\n</ListItem>\n```", "```js\nconst onBluetoothClick = index => () => {\n  const newItems = [...items];\n  const item = items[index];\n\n  newItems[index] = { ...item, bluetooth: !item.bluetooth };\n\n  setItems(newItems);\n};\n```", "```js\nconst [items, setItems] = useState([\n  {\n    name: 'Device 1',\n    bluetooth: true,\n    power: true,\n    Icon: DevicesIcon\n  },\n  {\n    name: 'Device 2',\n    bluetooth: true,\n    power: true,\n    Icon: DevicesIcon\n  },\n  {\n    name: 'Device 3',\n    bluetooth: true,\n    power: true,\n    Icon: DevicesIcon\n  }\n]);\n```", "```js\nconst onToggleClick = (index, prop) => () => {\n  const newItems = [...items];\n  const item = items[index];\n\n  newItems[index] = { ...item, [prop]: !item[prop] };\n\n  setItems(newItems);\n};\n```", "```js\n<ListItem key={index} disabled={!item.power} button>\n  <ListItemIcon>\n    <Icon />\n  </ListItemIcon>\n  <ListItemText primary={item.name} />\n  <ListItemSecondaryAction>\n    <IconButton\n      onClick={onToggleClick(index, 'bluetooth')}\n      disabled={!item.power}\n    >\n      <MaybeBluetoothIcon bluetooth={item.bluetooth} />\n    </IconButton>\n    <IconButton onClick={onToggleClick(index, 'power')}>\n      <PowerSettingsNewIcon />\n    </IconButton>\n  </ListItemSecondaryAction>\n</ListItem>\n```", "```js\nimport React, { useState } from 'react';\nimport { List as VirtualList, AutoSizer } from 'react-virtualized';\n\nimport { makeStyles } from '@material-ui/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Paper from '@material-ui/core/Paper';\n\nconst useStyles = makeStyles(theme => ({\n  list: {\n    height: 300\n  },\n  paper: {\n    margin: theme.spacing(3)\n  }\n}));\n\nfunction* genItems() {\n  for (let i = 1; i <= 1000; i++) {\n    yield `Item ${i}`;\n  }\n}\n\nexport default function ScrollingLists() {\n  const classes = useStyles();\n  const [items] = useState([...genItems()]);\n\n  const rowRenderer = ({ index, isScrolling, key, style }) => {\n    const item = items[index];\n\n    return (\n      <ListItem button key={key} style={style}>\n        <ListItemText primary={isScrolling ? '...' : item} />\n      </ListItem>\n    );\n  };\n\n  return (\n    <Paper className={classes.paper}>\n      <List className={classes.list}>\n        <AutoSizer disableHeight>\n          {({ width }) => (\n            <VirtualList\n              width={width}\n              height={300}\n              rowHeight={50}\n              rowCount={items.length}\n              rowRenderer={rowRenderer}\n            />\n          )}\n        </AutoSizer>\n      </List>\n    </Paper>\n  );\n}\n```", "```js\nfunction* genItems() {\n  for (let i = 1; i <= 1000; i++) {\n    yield `Item ${i}`;\n  }\n}\n```", "```js\nconst [items] = useState([...genItems()]);\n```", "```js\nconst rowRenderer = ({ index, isScrolling, key, style }) => {\n  const item = items[index];\n\n  return (\n    <ListItem button key={key} style={style}>\n      <ListItemText primary={isScrolling ? '...' : item} />\n    </ListItem>\n  );\n};\n```", "```js\n<List className={classes.list}>\n  <AutoSizer disableHeight>\n    {({ width }) => (\n      <VirtualList\n        width={width}\n        height={300}\n        rowHeight={50}\n        rowCount={items.length}\n        rowRenderer={rowRenderer}\n      />\n    )}\n  </AutoSizer>\n</List>\n```"]