- en: '*Chapter 10*: How To Nail It: Controlling Your Animation'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第 10 章*：如何做到完美：控制你的动画'
- en: 'At this point, we have a fully functional animation in our React Native app
    that starts playing as a loop when it is mounted and stops when unmounted. But
    what if we want to control the playback of the animation? Let''s give an example:
    we need to display the animation of a loading bar while we sequentially download
    five different files into our app. The loading bar will show the progress of the
    downloading files by filling itself (20% more each time a file is downloaded),
    resulting in a fully filled bar once those five files have been downloaded.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们在 React Native 应用中已经有一个完全功能的动画，它在挂载时开始循环播放，在卸载时停止。但如果我们想控制动画的播放呢？让我们举一个例子：当我们按顺序将五个不同的文件下载到我们的应用中时，我们需要显示加载条的动画。加载条将通过每次下载一个文件时填充自身（每次下载增加
    20%）来显示下载文件的进度，一旦这五个文件都下载完成，加载条将完全填充。
- en: '![Figure 10.1 – Animated loading bar used as an example'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.1 – 动画加载条示例]'
- en: '](img/B17930_10_01.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.1 – 用作示例的动画加载条](img/B17930_10_01.jpg)'
- en: Figure 10.1 – Animated loading bar used as an example
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.1 – 用作示例的动画加载条
- en: In this case, we need to control the animation, updating it every time a file
    has been fully downloaded and stopping it while the next download is in progress.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们需要控制动画，每次一个文件完全下载时更新它，在下一个下载进行时停止它。
- en: 'To explain how this process works in `lottie-react-native`, we will review
    two different alternatives: the declarative and the imperative APIs. By the end
    of this chapter, we will know not only how to render Lottie animations in our
    React Native apps but we will be able to control their playback and layout.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解释 `lottie-react-native` 中这一过程是如何工作的，我们将回顾两种不同的替代方案：声明式和命令式 API。到本章结束时，我们不仅将知道如何在我们的
    React Native 应用中渲染 Lottie 动画，而且我们还将能够控制它们的播放和布局。
- en: 'To explain how this process works in `lottie-react-native`, we will review
    different alternatives:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解释 `lottie-react-native` 中这一过程是如何工作的，我们将回顾不同的替代方案：
- en: The declarative API
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 声明式 API
- en: The imperative API
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命令式 API
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To complete this chapter, we have to have a functioning React Native app running
    on a simulator or device. We will modify this app to include a `LottieView` component
    as we learned in previous chapters so we can modify and control the animation
    through methods and properties.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成本章，我们必须有一个在模拟器或设备上运行的正常工作的 React Native 应用。我们将修改这个应用，包括我们在前几章中学到的 `LottieView`
    组件，这样我们就可以通过方法和属性来修改和控制动画。
- en: The declarative API
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 声明式 API
- en: The most frequent explanation for the distinction between imperative and declarative
    programming is that imperative code instructs the computer on how to perform tasks,
    whereas declarative code concentrates on what you want the computer to do.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 命令式编程与声明式编程之间的区别最常见的解释是，命令式代码指导计算机如何执行任务，而声明式代码则专注于你希望计算机做什么。
- en: Your code in imperative programming is made up of statements that affect the
    program's state by instructing the computer what to do. To put it another way,
    your code is built around defining variables and altering their values.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在命令式编程中，你的代码由语句组成，这些语句通过指示计算机做什么来影响程序的状态。换句话说，你的代码是围绕定义变量和改变它们的值来构建的。
- en: Your code in declarative programming is made up of expressions that evaluate
    their output based on their input by telling the machine what you want.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在声明式编程中，你的代码由表达式组成，这些表达式根据它们的输入评估输出，通过告诉机器你想要什么。
- en: React was designed following the declarative paradigm, although it allows you
    to control some components the imperative way when needed. So does `lottie-react-native`
    as it provides different APIs for imperative or declarative control on the animations
    rendered within an app.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: React 是按照声明式范式设计的，尽管在需要时它允许你以命令式方式控制一些组件。同样，`lottie-react-native` 也是如此，因为它为在应用中渲染的动画提供了不同的命令式或声明式控制
    API。
- en: In this section, we will focus on how to control the example animated loading
    bar with the `lottie-react-native` library's declarative API.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将关注如何使用 `lottie-react-native` 库的声明式 API 来控制示例动画加载条。
- en: 'Here''s an example of how controlling a Lottie animation can be achieved with
    the declarative API:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个使用声明式 API 控制 Lottie 动画的示例：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: In this example, our `App` component receives a prop named `downloadedFiles`
    including the information of the files downloaded by the app. This information
    can be provided by Redux, MobX, a component wrapping app, or any other way. What's
    important for the sake of this example is to know that `downloadedFiles` is an
    array that will increase its size from `0` until the maximum number of files to
    be downloaded (defined by `const numFilesToDownload = 5;` in the example).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们的 `App` 组件接收一个名为 `downloadedFiles` 的属性，包括应用程序下载的文件信息。这个信息可以由 Redux、MobX、包装应用程序的组件或任何其他方式提供。对于这个示例来说，重要的是要知道
    `downloadedFiles` 是一个数组，其大小将从 `0` 增加到要下载的最大文件数（在示例中由 `const numFilesToDownload
    = 5;` 定义）。
- en: 'We are using the Animated API from React Native to hold the progress of the
    animation: `const progress = useMemo(() => new Animated.Value(0), []);` . This
    is an `Animated.Value` that will start from `0` and progressively reach `1`, defining
    we want our animation to be complete. We are using `useMemo` here. As `progress`
    is a variable, we want to update it using React Native''s Animated API:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在使用 React Native 的 Animated API 来保持动画的进度：`const progress = useMemo(() =>
    new Animated.Value(0), []);` 。这是一个从 `0` 开始并逐渐达到 `1` 的 `Animated.Value`，定义了我们希望动画完成的程度。我们在这里使用
    `useMemo`。由于 `progress` 是一个变量，我们希望使用 React Native 的 Animated API 来更新它：
- en: '[PRE24]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: In this part, we are creating an effect that will update `progress` based on
    the number of files downloaded (`downloadedFiles.length`) and the number of files
    to be downloaded (`numFilesToDownload`). With this, we will be pushing the progress
    bar 20% toward its total every time a new file is downloaded. For example, if
    we've downloaded 2 of 5 files, `progress` will be set to 0.4, meaning the animation
    needs to smoothly play until 40% of its total play time.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分，我们正在创建一个效果，它将根据已下载的文件数量（`downloadedFiles.length`）和要下载的文件数量（`numFilesToDownload`）来更新
    `progress`。有了这个，每次下载一个新文件时，我们将推动进度条向总进度前进20%。例如，如果我们已经下载了5个文件中的2个，`progress` 将设置为0.4，这意味着动画需要平滑地播放直到总播放时间的40%。
- en: 'We also define the duration for every push of the loading bar in the following
    line of code:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还在下一行代码中定义了每次推动加载条的持续时间：
- en: '[PRE32]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The most important part in this example is the `LottieView` component:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中最重要的部分是 `LottieView` 组件：
- en: '[PRE33]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: We use the `progress` prop here so we can declare the progress of the animation
    based on an Animated value (`progress`), which depends on the number of files
    being downloaded at a certain moment.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '我们在这里使用 `progress` 属性，这样我们就可以根据某个时刻正在下载的文件数量来声明动画的进度，这个进度依赖于 `progress`（一个
    Animated 值）。 '
- en: We can find all the declarative properties, their descriptions, and default
    values in the `lottie-react-native` library's README file ([https://github.com/lottie-react-native/lottie-react-native/blob/master/docs/api.md](https://github.com/lottie-react-native/lottie-react-native/blob/master/docs/api.md)).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在 `lottie-react-native` 库的 README 文件中找到所有声明性属性、它们的描述和默认值（[https://github.com/lottie-react-native/lottie-react-native/blob/master/docs/api.md](https://github.com/lottie-react-native/lottie-react-native/blob/master/docs/api.md))。
- en: All of them can be declaratively used on a `LottieView` component to control
    the rendering and behavior of our Lottie animations. In the next section, we will
    learn how to control our animations with the imperative API for those cases where
    we need to explicitly say what to do to our animation instead of reacting to state
    changes.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些都可以在 `LottieView` 组件上声明性使用，以控制我们的 Lottie 动画的渲染和行为。在下一节中，我们将学习如何使用命令式 API
    控制我们的动画，对于那些需要明确说明对动画做什么而不是对状态变化做出反应的情况。
- en: We have already learned how to use some of these properties in our `LottieView`
    objects. We will now show examples using other important props.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经学习了如何在我们的 `LottieView` 对象中使用一些这些属性。现在我们将使用其他重要的属性来展示示例。
- en: speed
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: speed
- en: 'The `speed` property is a number that sets the speed of the animation based
    on how many times the default speed should be played:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`speed` 属性是一个数字，它根据默认速度应该播放多少次来设置动画的速度：'
- en: '[PRE37]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: The example above will play our animation twice as fast as the original animation
    speed.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的示例将使我们的动画以原始动画速度的两倍播放。
- en: '[PRE41]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The example above will play our animation in reverse at the original animation
    speed. With this in mind, we could create a loop that renders the animation back
    and forth every 2 seconds instead of repeating it over:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的示例将以原始动画速度反向播放我们的动画。考虑到这一点，我们可以创建一个循环，每2秒渲染动画来回一次，而不是重复播放：
- en: '[PRE45]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: onAnimationFinish
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: onAnimationFinish
- en: 'The `onAnimationFinish` property is a callback that will be triggered when
    the animation completes its playback. We can use it to navigate away to a new
    screen when the displaying animation finishes its playback:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`onAnimationFinish`属性是一个回调，当动画完成播放时将被触发。我们可以使用它来在显示的动画播放完成后导航到新屏幕：'
- en: '[PRE71]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '[PRE79]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[PRE80]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[PRE81]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[PRE82]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '[PRE83]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '[PRE84]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '[PRE85]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '[PRE86]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '[PRE87]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: Note `loop={false}` is necessary for `onAnimationFinish` to work properly as
    a looped animation won't ever finish.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`loop={false}`对于`onAnimationFinish`正常工作来说是必要的，因为循环动画永远不会结束。
- en: colorFilters
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: colorFilters
- en: 'The `colorFilters` property is an array of objects containing the string-coded
    hex colors that enables developers to change the colors for specific layers programmatically.
    For this prop to work properly, the correct keypath (a property set when creating
    the app in After Effects and stored in the Lottie JSON file) needs to be provided
    along with the code:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`colorFilters`属性是一个包含字符串编码的十六进制颜色的对象数组，它允许开发者以编程方式更改特定图层的颜色。为了使此属性正常工作，需要提供正确的keypath（在After
    Effects中创建应用时设置的属性，并存储在Lottie JSON文件中），以及相应的代码：'
- en: '[PRE88]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '[PRE90]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '[PRE91]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '[PRE92]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '[PRE93]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '[PRE94]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[PRE95]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '[PRE96]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '[PRE97]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '[PRE98]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '[PRE99]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '[PRE100]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '[PRE101]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '[PRE102]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '[PRE103]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '[PRE104]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '[PRE105]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: This piece of code modifies three After Effect layers (`button`, `circle`, and
    `square`) to change their colors to red (`'#FF0000'`), green (`'#00FF00'`), and
    blue (`'#0000FF'`) respectively.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码修改了三个After Effect图层（`button`、`circle`和`square`），将它们的颜色分别改为红色（`'#FF0000'`）、绿色（`'#00FF00'`）和蓝色（`'#0000FF'`）。
- en: textFiltersAndroid and textFiltersIOS
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: textFiltersAndroid和textFiltersIOS
- en: '`textFiltersAndroid` and `textFiltersIOS` contain an array of objects including
    texts to replace so we can programmatically modify a specific text in the animation.
    This property is useful when dealing with translations in our apps:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '`textFiltersAndroid`和`textFiltersIOS`包含一个包含要替换的文本的对象数组，我们可以通过编程方式修改动画中的特定文本。当我们在应用中处理翻译时，此属性非常有用：'
- en: '[PRE106]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: '[PRE107]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '[PRE108]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[PRE109]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '[PRE110]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '[PRE111]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '[PRE112]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '[PRE113]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '[PRE114]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '[PRE115]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '[PRE116]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: '[PRE117]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: In this example, we are replacing the text `'Hello!'` with `'Hola!'` and `'Bye!'`
    with `'Adios!'` in our animation for both iOS and Android devices.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们正在替换动画中的文本`'Hello!'`为`'Hola!'`，并将`'Bye!'`替换为`'Adios!'`，适用于iOS和Android设备。
- en: 'Now that we have learned how to use the declarative API, let''s move on to
    a different way of interacting with our Lottie animations: the imperative API.'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经学会了如何使用声明式API，让我们继续学习另一种与Lottie动画交互的方式：命令式API。
- en: The imperative API
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 强制性API
- en: Sometimes, it's just easier using imperative programming in our app, for example,
    sometimes we need to play/stop our animation based on user interactions inside
    the app. For these cases, we can use the `lottie-react-native` library's imperative
    API, which allows developers to control the animation playback in a very straightforward
    way.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，在我们的应用中使用命令式编程会更简单，例如，有时我们需要根据应用内的用户交互来播放/停止动画。在这种情况下，我们可以使用`lottie-react-native`库的命令式API，它允许开发者以非常直接的方式控制动画播放。
- en: React automatically provides the `ref` prop on all its components and the `useRef`
    hook to be used whenever we need to control the component in an imperative way.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: React自动为所有其组件提供`ref`属性，以及`useRef`钩子，以便我们可以在需要以命令式方式控制组件时使用。
- en: 'The piece of code we wrote in the previous section is actually a good example
    of how imperative programming makes more sense when we need to directly trigger
    an action on a component, improving readability and making our code easier to
    reason about:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在上一节中编写的代码实际上是命令式编程在需要直接在组件上触发动作时更有意义的例子，这提高了可读性，并使我们的代码更容易推理：
- en: '[PRE118]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '[PRE119]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: '[PRE120]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: '[PRE121]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '[PRE122]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '[PRE123]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: '[PRE124]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '[PRE125]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '[PRE126]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: '[PRE127]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: '[PRE128]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: '[PRE129]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: '[PRE130]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: '[PRE131]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: '[PRE132]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: '[PRE133]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: '[PRE134]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: '[PRE135]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: '[PRE136]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: '[PRE137]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: '[PRE138]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: '[PRE139]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: '[PRE140]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: '[PRE141]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: '[PRE142]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: '[PRE143]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: '[PRE144]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: '[PRE145]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: '[PRE146]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: '[PRE147]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: '[PRE148]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: '[PRE149]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: '[PRE150]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: '[PRE151]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: '[PRE152]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: 'For this approach, we need to first identify how many frames our animation
    contains and how many frames we need to render once we download each of the files
    to be downloaded. In this example, we could calculate it in the following way:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这种方法，我们首先需要确定动画包含多少帧，以及下载每个要下载的文件后需要渲染多少帧。在这个例子中，我们可以这样计算：
- en: 'Number of frames contained in the animation: `45`'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 动画中包含的帧数：`45`
- en: 'Number of files to be downloaded: `5`'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 需要下载的文件数：`5`
- en: 'Number of frames to be played on every file download: `45` / `5` = `9`'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每次文件下载要播放的帧数：`45` / `5` = `9`
- en: 'Then, we define the calculated number of frames to be played on every file
    download as a constant in our code:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们在代码中定义了在每次文件下载时播放的计算帧数作为一个常量：
- en: '`const numFramesPerFile = 9;`'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '`const numFramesPerFile = 9;`'
- en: 'Next, we need to create a reference to our `LottieView` component that will
    enable us to call imperative methods on it. We do this using the `useRef` hook
    provided by React:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要创建一个对`LottieView`组件的引用，这将使我们能够调用其上的命令式方法。我们使用React提供的`useRef`钩子来完成此操作：
- en: '`const animation = useRef(null);`'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '`const animation = useRef(null);`'
- en: 'This reference needs to be passed as the `ref` prop to our `LottieView` component:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 这个引用需要作为 `ref` 属性传递给我们的 `LottieView` 组件：
- en: '[PRE153]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: '[PRE154]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: '[PRE155]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: '[PRE156]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: '[PRE157]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: We also see how we explicitly pass `loop={false}` so the animation doesn't repeat
    when we call any imperative playback methods on it.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还看到如何显式传递 `loop={false}`，这样当我们在动画上调用任何命令式回放方法时，动画就不会重复。
- en: Having all this setup ready, we can create an effect that will be triggered
    on every file download. This effect will use the imperative play method on the
    referenced component. This play method accepts the initial and the final frames
    we want to play in the animation.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有这些设置准备就绪后，我们可以创建一个在每次文件下载时都会触发效果的动画。这个效果将在引用的组件上使用命令式播放方法。这个播放方法接受我们想要在动画中播放的初始帧和最终帧。
- en: 'We will use these parameters to reproduce just a part of the animation on every
    file download:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用这些参数在每次文件下载时仅重现动画的一部分：
- en: '[PRE158]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: '[PRE159]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: '[PRE160]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: '[PRE161]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: '[PRE162]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE162]'
- en: '[PRE163]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE163]'
- en: '[PRE164]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE164]'
- en: '[PRE165]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE165]'
- en: 'When we know how many files the app has downloaded (`downloadedFiles.length`),
    we can easily calculate what the initial frame will be where the next animation
    part should start:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们知道应用下载了多少个文件（`downloadedFiles.length`）时，我们可以轻松计算出下一个动画部分应该开始的初始帧：
- en: '[PRE166]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE166]'
- en: 'Then, we reach the most important part of this code: the part where we use
    the imperative API to reproduce the animation from the initial frame (`startFrame`)
    until the final frame (`startFrame + numFramesPerFile`):'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们到达这段代码最重要的部分：使用命令式 API 从初始帧 (`startFrame`) 播放动画直到最终帧 (`startFrame + numFramesPerFile`)
    的部分：
- en: '[PRE167]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE167]'
- en: 'Note how we reset the animation if the number of downloaded files is zero,
    so we make sure we always start from the initial frame:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，如果下载的文件数量为零，我们将重置动画，以确保我们始终从初始帧开始：
- en: '[PRE168]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE168]'
- en: '[PRE169]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE169]'
- en: '[PRE170]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE170]'
- en: Besides `play` and `reset`, we can find other imperative methods in the `lottie-react-native`
    library's README file found at [https://github.com/lottie-react-native/lottie-react-native/blob/master/docs/api.md](https://github.com/lottie-react-native/lottie-react-native/blob/master/docs/api.md).
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 `play` 和 `reset`，我们还可以在 `lottie-react-native` 库的 README 文件中找到其他命令式方法，该文件位于
    [https://github.com/lottie-react-native/lottie-react-native/blob/master/docs/api.md](https://github.com/lottie-react-native/lottie-react-native/blob/master/docs/api.md)。
- en: Summary
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter we reviewed the differences between the declarative and the
    imperative APIs for `lottie-react-native`, which can be used to control the looks
    and the playback of our animation. On top of that, we learned how to use React
    Native's Animated API to smoothly control the progress of a Lottie animation.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们回顾了 `lottie-react-native` 的声明式和命令式 API 之间的区别，这些 API 可以用来控制动画的外观和播放。除此之外，我们还学习了如何使用
    React Native 的 Animated API 来平滑地控制 Lottie 动画的进度。
- en: In the next chapter, we will go through some of the most common issues, pitfalls,
    and problems we may face when using `lottie-react-native` in our React Native
    apps.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论在使用 `lottie-react-native` 在我们的 React Native 应用中可能遇到的一些最常见问题、陷阱和问题。
