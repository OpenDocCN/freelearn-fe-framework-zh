["```js\n<Button\n  onPress={() => Alert.alert(\"Button pressed!\")}\n      title=\"Press me!\"\n      color=\"#f7941e\"\n/>\n```", "```js\n<Pressable\n  onPress={() => Alert.alert(\"Button pressed!\")}\n  style={({ pressed }) => [\n    {\n      backgroundColor: pressed\n        ? '#f7941e'\n        : '#ffffff'\n    },\n    styles.button\n  }>\n>\n  {\n    ({ pressed }) => (\n      <Text style={styles.buttonText}>\n        {pressed ? 'Button pressed!' : 'Press  me!'}\n      </Text>\n    )\n  }\n</Pressable>\n```", "```js\nconst CIRCLE_SIZE = 50;\nexport default (props) => {\n  const dimensions = useWindowDimensions();\n  const touch = useRef(\n    new Animated.ValueXY({ \n      x: dimensions.width / 2 - CIRCLE_SIZE / 2, \n      y: dimensions.height / 2 - CIRCLE_SIZE / 2\n      })).current;\n  return (\n    <View style={{ flex: 1 }}\n        onStartShouldSetResponder={() => true}\n        onResponderMove={(event) => {\n          touch.setValue({\n            x: event.nativeEvent.pageX, y: event.nativeEvent.pageY\n          });\n        }}\n        onResponderRelease={() => {\n          Animated.spring(touch, {\n            toValue: {\n              x: dimensions.width / 2 - CIRCLE_SIZE / 2,\n              y: dimensions.height / 2 - CIRCLE_SIZE / 2\n            },\n            useNativeDriver: false\n          }).start();\n        }}\n    >\n      <Animated.View\n        style={{\n          position: 'absolute', backgroundColor: 'blue',\n              left: touch.x, top: touch.y,\n              height: CIRCLE_SIZE, width: CIRCLE_SIZE,\n              borderRadius: CIRCLE_SIZE / 2,\n        }}\n        onStartShouldSetResponder={() => false}\n      />\n    </View>\n  );\n};\n```", "```js\nconst CIRCLE_SIZE = 50;\nexport default props => {\n  const dimensions = useWindowDimensions();\n  const touchX = useSharedValue(dimensions.width/\n      2-CIRCLE_SIZE/2);\n  const touchY = useSharedValue(dimensions.height/\n      2-CIRCLE_SIZE/2);\n  const animatedStyles = useAnimatedStyle(() => {\n    return {\n      left: touchX.value, top: touchY.value,\n    };\n  });\n  const gesture = Gesture.Pan()\n   .onUpdate(e => {\n    touchX.value = e.translationX+dimensions.width/\n        2-CIRCLE_SIZE/2;\n    touchY.value = e.translationY+dimensions.height/\n        2-CIRCLE_SIZE/2;\n   })\n   .onEnd(() => {\n    touchX.value = withSpring(dimensions.width/\n        2-CIRCLE_SIZE/2);\n    touchY.value = withSpring(dimensions.height/\n        2-CIRCLE_SIZE/2);\n   });\n  return (\n    <GestureDetector gesture={gesture}>\n      <Animated.View\n        style={[\n          { \n            position: 'absolute', backgroundColor: 'blue',\n                width: CIRCLE_SIZE, height: CIRCLE_SIZE,\n                borderRadius: CIRCLE_SIZE / 2 \n          },\n          animatedStyles,\n        ]}\n      />\n    </GestureDetector>\n  );\n};\n```"]