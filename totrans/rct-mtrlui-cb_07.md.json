["```js\nimport React, { useState, useEffect } from 'react';\n\nimport { makeStyles } from '@material-ui/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nconst fetchData = () =>\n  new Promise(resolve => {\n    const items = [\n      {\n        id: 1,\n        name: 'First Item',\n        created: new Date(),\n        high: 2935,\n        low: 1924,\n        average: 2429.5\n      },\n      {\n        id: 2,\n        name: 'Second Item',\n        created: new Date(),\n        high: 439,\n        low: 231,\n        average: 335\n      },\n      {\n        id: 3,\n        name: 'Third Item',\n        created: new Date(),\n        high: 8239,\n        low: 5629,\n        average: 6934\n      },\n      {\n        id: 4,\n        name: 'Fourth Item',\n        created: new Date(),\n        high: 3203,\n        low: 3127,\n        average: 3165\n      },\n      {\n        id: 5,\n        name: 'Fifth Item',\n        created: new Date(),\n        high: 981,\n        low: 879,\n        average: 930\n      }\n    ];\n\n    setTimeout(() => resolve(items), 1000);\n  });\n\nconst usePaperStyles = makeStyles(theme => ({\n  root: { margin: theme.spacing(2) }\n}));\n\nexport default function StatefulTables() {\n  const classes = usePaperStyles();\n\n  const [items, setItems] = useState([]);\n\n  useEffect(() => {\n    fetchData().then(items => {\n      setItems(items);\n    });\n  }, []);\n\n  return (\n    <Paper className={classes.root}>\n      <Table>\n        <TableHead>\n          <TableRow>\n            <TableCell>Name</TableCell>\n            <TableCell>Created</TableCell>\n            <TableCell align=\"right\">High</TableCell>\n            <TableCell align=\"right\">Low</TableCell>\n            <TableCell align=\"right\">Average</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {items.map(item => {\n            return (\n              <TableRow key={item.id}>\n                <TableCell component=\"th\" scope=\"row\">\n                  {item.name}\n                </TableCell>\n                <TableCell>{item.created.toLocaleString()}</TableCell>\n                <TableCell align=\"right\">{item.high}</TableCell>\n                <TableCell align=\"right\">{item.low}</TableCell>\n                <TableCell align=\"right\">{item.average}</TableCell>\n              </TableRow>\n            );\n          })}\n        </TableBody>\n      </Table>\n    </Paper>\n  );\n}\n```", "```js\nconst fetchData = () =>\n  new Promise(resolve => {\n    const items = [\n      {\n        id: 1,\n        name: 'First Item',\n        created: new Date(),\n        high: 2935,\n        low: 1924,\n        average: 2429.5\n      },\n      {\n        id: 2,\n        name: 'Second Item',\n        created: new Date(),\n        high: 439,\n        low: 231,\n        average: 335\n      },\n      ...\n    ];\n\n    setTimeout(() => resolve(items), 1000);\n  });\n```", "```js\nconst [items, setItems] = useState([]);\n\nuseEffect(() => {\n  fetchData().then(items => {\n    setItems(items);\n  });\n}, []);\n```", "```js\n<Table>\n  <TableHead>\n    <TableRow>\n      <TableCell>Name</TableCell>\n      <TableCell>Created</TableCell>\n      <TableCell align=\"right\">High</TableCell>\n      <TableCell align=\"right\">Low</TableCell>\n      <TableCell align=\"right\">Average</TableCell>\n    </TableRow>\n  </TableHead>\n  <TableBody>\n    {items.map(item => {\n      return (\n        <TableRow key={item.id}>\n          <TableCell component=\"th\" scope=\"row\">\n            {item.name}\n          </TableCell>\n          <TableCell>{item.created.toLocaleString()}</TableCell>\n          <TableCell align=\"right\">{item.high}</TableCell>\n          <TableCell align=\"right\">{item.low}</TableCell>\n          <TableCell align=\"right\">{item.average}</TableCell>\n        </TableRow>\n      );\n    })}\n  </TableBody>\n</Table>\n```", "```js\nconst usePaperStyles = makeStyles(theme => ({\n  root: { margin: theme.spacing(2), textAlign: 'center' }\n}));\n\nconst useProgressStyles = makeStyles(theme => ({\n  progress: { margin: theme.spacing(2) }\n}));\n\nfunction MaybeLoading({ loading }) {\n  const classes = useProgressStyles();\n  return loading ? (\n    <CircularProgress className={classes.progress} />\n  ) : null;\n}\n```", "```js\nconst [loading, setLoading] = useState(true);\n```", "```js\nuseEffect(() => {\n  fetchData().then(items => {\n    setItems(items);\n    setLoading(false);\n  });\n}, []);\n```", "```js\n<Paper className={classes.root}>\n  <Table>\n    ...\n  </Table>\n  <MaybeLoading loading={loading} />\n</Paper>\n```", "```js\nimport React, { useState } from 'react';\n\nimport { makeStyles } from '@material-ui/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport Paper from '@material-ui/core/Paper';\n\nconst comparator = (prop, desc = true) => (a, b) => {\n  const order = desc ? -1 : 1;\n\n  if (a[prop] < b[prop]) {\n    return -1 * order;\n  }\n\n  if (a[prop] > b[prop]) {\n    return 1 * order;\n  }\n\n  return 0 * order;\n};\n\nconst useStyles = makeStyles(theme => ({\n  root: { margin: theme.spacing(2), textAlign: 'center' }\n}));\n\nexport default function SortableColumns() {\n  const classes = useStyles();\n  const [columns, setColumns] = useState([\n    { name: 'Name', active: false },\n    { name: 'Created', active: false },\n    { name: 'High', active: false, numeric: true },\n    { name: 'Low', active: false, numeric: true },\n    { name: 'Average', active: false, numeric: true }\n  ]);\n  const [rows, setRows] = useState([\n    {\n      id: 1,\n      name: 'First Item',\n      created: new Date(),\n      high: 2935,\n      low: 1924,\n      average: 2429.5\n    },\n    {\n      id: 2,\n      name: 'Second Item',\n      created: new Date(),\n      high: 439,\n      low: 231,\n      average: 335\n    },\n    {\n      id: 3,\n      name: 'Third Item',\n      created: new Date(),\n      high: 8239,\n      low: 5629,\n      average: 6934\n    },\n    {\n      id: 4,\n      name: 'Fourth Item',\n      created: new Date(),\n      high: 3203,\n      low: 3127,\n      average: 3165\n    },\n    {\n      id: 5,\n      name: 'Fifth Item',\n      created: new Date(),\n      high: 981,\n      low: 879,\n      average: 930\n    }\n  ]);\n\n  const onSortClick = index => () => {\n    setColumns(\n      columns.map((column, i) => ({\n        ...column,\n        active: index === i,\n        order:\n          (index === i &&\n            (column.order === 'desc' ? 'asc' : 'desc')) ||\n          undefined\n      }))\n    );\n\n    setRows(\n      rows\n        .slice()\n        .sort(\n          comparator(\n            columns[index].name.toLowerCase(),\n            columns[index].order === 'desc'\n          )\n        )\n    );\n  };\n\n  return (\n    <Paper className={classes.root}>\n      <Table>\n        <TableHead>\n          <TableRow>\n            {columns.map((column, index) => (\n              <TableCell\n                key={column.name}\n                align={column.numeric ? 'right' : 'inherit'}\n              >\n                <TableSortLabel\n                  active={column.active}\n                  direction={column.order}\n                  onClick={onSortClick(index)}\n                >\n                  {column.name}\n                </TableSortLabel>\n              </TableCell>\n            ))}\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {rows.map(row => (\n            <TableRow key={row.id}>\n              <TableCell component=\"th\" scope=\"row\">\n                {row.name}\n              </TableCell>\n              <TableCell>{row.created.toLocaleString()}</TableCell>\n              <TableCell align=\"right\">{row.high}</TableCell>\n              <TableCell align=\"right\">{row.low}</TableCell>\n              <TableCell align=\"right\">{row.average}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </Paper>\n  );\n}\n```", "```js\n<TableHead>\n  <TableRow>\n    {columns.map((column, index) => (\n      <TableCell\n        key={column.name}\n        align={column.numeric ? 'right' : 'inherit'}\n      >\n        <TableSortLabel\n          active={column.active}\n          direction={column.order}\n          onClick={onSortClick(index)}\n        >\n          {column.name}\n        </TableSortLabel>\n      </TableCell>\n    ))}\n  </TableRow>\n</TableHead>\n```", "```js\nconst onSortClick = index => () => {\n  setColumns(\n    columns.map((column, i) => ({\n      ...column,\n      active: index === i,\n      order:\n        (index === i &&\n          (column.order === 'desc' ? 'asc' : 'desc')) ||\n        undefined\n    }))\n  );\n\n  setRows(\n    rows\n      .slice()\n      .sort(\n        comparator(\n          columns[index].name.toLowerCase(),\n          columns[index].order === 'desc'\n        )\n      )\n  );\n};\n```", "```js\nconst comparator = (prop, desc = true) => (a, b) => {\n  const order = desc ? -1 : 1;\n\n  if (a[prop] < b[prop]) {\n    return -1 * order;\n  }\n\n  if (a[prop] > b[prop]) {\n    return 1 * order;\n  }\n\n  return 0 * order;\n};\n```", "```js\nconst [columns, setColumns] = useState([\n  { name: 'Name', active: false },\n  { name: 'Created', active: false },\n  { name: 'High', active: false, numeric: true },\n  { name: 'Low', active: false, numeric: true },\n  { name: 'Average', active: true, numeric: true }\n]);\n```", "```js\nimport React, { useState, useEffect, Fragment } from 'react';\n\nimport { makeStyles } from '@material-ui/styles';\nimport { withStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport FormControl from '@material-ui/core/FormControl';\nimport TextField from '@material-ui/core/TextField';\n\nimport SearchIcon from '@material-ui/icons/Search';\n\nconst fetchData = () =>\n  new Promise(resolve => {\n    const items = [\n      {\n        id: 1,\n        name: 'First Item',\n        created: new Date(),\n        high: 2935,\n        low: 1924,\n        average: 2429.5\n      },\n      {\n        id: 2,\n        name: 'Second Item',\n        created: new Date(),\n        high: 439,\n        low: 231,\n        average: 335\n      },\n      {\n        id: 3,\n        name: 'Third Item',\n        created: new Date(),\n        high: 8239,\n        low: 5629,\n        average: 6934\n      },\n      {\n        id: 4,\n        name: 'Fourth Item',\n        created: new Date(),\n        high: 3203,\n        low: 3127,\n        average: 3165\n      },\n      {\n        id: 5,\n        name: 'Fifth Item',\n        created: new Date(),\n        high: 981,\n        low: 879,\n        average: 930\n      }\n    ];\n\n    setTimeout(() => resolve(items), 1000);\n  });\n\nconst styles = theme => ({\n  root: { margin: theme.spacing(2), textAlign: 'center' },\n  progress: { margin: theme.spacing(2) },\n  search: { marginLeft: theme.spacing(2) }\n});\nconst useStyles = makeStyles(styles);\n\nconst MaybeLoading = withStyles(styles)(({ classes, loading }) =>\n  loading ? <CircularProgress className={classes.progress} /> : null\n);\n\nexport default function FilteringRows() {\n  const classes = useStyles();\n  const [search, setSearch] = useState('');\n  const [items, setItems] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    fetchData().then(items => {\n      setItems(items);\n      setLoading(false);\n    });\n  }, []);\n\n  const onSearchChange = e => {\n    setSearch(e.target.value);\n  };\n\n  return (\n    <Fragment>\n      <TextField\n        value={search}\n        onChange={onSearchChange}\n        className={classes.search}\n        id=\"input-search\"\n        InputProps={{\n          startAdornment: (\n            <InputAdornment position=\"start\">\n              <SearchIcon />\n            </InputAdornment>\n          )\n        }}\n      />\n      <Paper className={classes.root}>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>Name</TableCell>\n              <TableCell>Created</TableCell>\n              <TableCell align=\"right\">High</TableCell>\n              <TableCell align=\"right\">Low</TableCell>\n              <TableCell align=\"right\">Average</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {items\n              .filter(item => !search || item.name.includes(search))\n              .map(item => {\n                return (\n                  <TableRow key={item.id}>\n                    <TableCell component=\"th\" scope=\"row\">\n                      {item.name}\n                    </TableCell>\n                    <TableCell>\n                      {item.created.toLocaleString()}\n                    </TableCell>\n                    <TableCell align=\"right\">{item.high}</TableCell>\n                    <TableCell align=\"right\">{item.low}</TableCell>\n                    <TableCell align=\"right\">\n                      {item.average}\n                    </TableCell>\n                  </TableRow>\n                );\n              })}\n          </TableBody>\n        </Table>\n        <MaybeLoading loading={loading} />\n      </Paper>\n    </Fragment>\n  );\n}\n```", "```js\nconst [search, setSearch] = useState('');\nconst [items, setItems] = useState([]);\nconst [loading, setLoading] = useState(true);\n```", "```js\n<TextField\n  value={search}\n  onChange={onSearchChange}\n  className={classes.search}\n  id=\"input-search\"\n  InputProps={{\n    startAdornment: (\n      <InputAdornment position=\"start\">\n        <SearchIcon />\n      </InputAdornment>\n    )\n  }}\n/>\n```", "```js\n<TableBody>\n  {items\n    .filter(item => !search || item.name.includes(search))\n    .map(item => {\n      return (\n        <TableRow key={item.id}>\n          <TableCell component=\"th\" scope=\"row\">\n            {item.name}\n          </TableCell>\n          <TableCell>\n            {item.created.toLocaleString()}\n          </TableCell>\n          <TableCell align=\"right\">{item.high}</TableCell>\n          <TableCell align=\"right\">{item.low}</TableCell>\n          <TableCell align=\"right\">\n            {item.average}\n          </TableCell>\n        </TableRow>\n      );\n    })}\n</TableBody>\n```", "```js\n<Card className={classes.card}>\n  <CardHeader title={`(${selections()}) rows selected`} />\n  <CardContent>\n    <Grid container direction=\"column\">\n      <Grid item>\n        <Grid container justify=\"space-between\">\n          <Grid item>\n            <Typography>Low</Typography>\n          </Grid>\n          <Grid item>\n            <Typography>{selectedLow()}</Typography>\n          </Grid>\n        </Grid>\n      </Grid>\n      <Grid item>\n        <Grid container justify=\"space-between\">\n          <Grid item>\n            <Typography>High</Typography>\n          </Grid>\n          <Grid item>\n            <Typography>{selectedHigh()}</Typography>\n          </Grid>\n        </Grid>\n      </Grid>\n      <Grid item>\n        <Grid container justify=\"space-between\">\n          <Grid item>\n            <Typography>Average</Typography>\n          </Grid>\n          <Grid item>\n            <Typography>{selectedAverage()}</Typography>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Grid>\n  </CardContent>\n</Card>\n```", "```js\nimport React, { useState, Fragment } from 'react';\n\nimport { makeStyles } from '@material-ui/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\n\nconst useStyles = makeStyles(theme => ({\n  root: { margin: theme.spacing.unit * 2, textAlign: 'center' },\n  card: { margin: theme.spacing.unit * 2, maxWidth: 300 }\n}));\n\nexport default function SelectingRows() {\n  const classes = useStyles();\n  const [columns, setColumns] = useState([\n    { name: 'Name', active: false },\n    { name: 'Created', active: false },\n    { name: 'High', active: false, numeric: true },\n    { name: 'Low', active: false, numeric: true },\n    { name: 'Average', active: true, numeric: true }\n  ]);\n  const [rows, setRows] = useState([\n    {\n      id: 1,\n      name: 'First Item',\n      created: new Date(),\n      high: 2935,\n      low: 1924,\n      average: 2429.5\n    },\n    {\n      id: 2,\n      name: 'Second Item',\n      created: new Date(),\n      high: 439,\n      low: 231,\n      average: 335\n    },\n    {\n      id: 3,\n      name: 'Third Item',\n      created: new Date(),\n      high: 8239,\n      low: 5629,\n      average: 6934\n    },\n    {\n      id: 4,\n      name: 'Fourth Item',\n      created: new Date(),\n      high: 3203,\n      low: 3127,\n      average: 3165\n    },\n    {\n      id: 5,\n      name: 'Fifth Item',\n      created: new Date(),\n      high: 981,\n      low: 879,\n      average: 930\n    }\n  ]);\n\n  const onRowClick = id => () => {\n    const newRows = [...rows];\n    const index = rows.findIndex(row => row.id === id);\n    const row = rows[index];\n\n    newRows[index] = { ...row, selected: !row.selected };\n    setRows(newRows);\n  };\n\n  const selections = () => rows.filter(row => row.selected).length;\n\n  const selectedLow = () =>\n    rows\n      .filter(row => row.selected)\n      .reduce((total, row) => total + row.low, 0);\n\n  const selectedHigh = () =>\n    rows\n      .filter(row => row.selected)\n      .reduce((total, row) => total + row.high, 0);\n\n  const selectedAverage = () => (selectedLow() + selectedHigh()) / 2;\n\n  return (\n    <Fragment>\n      <Card className={classes.card}>\n        ...\n      </Card>\n      <Paper className={classes.root}>\n        <Table>\n          <TableHead>\n            <TableRow>\n              {columns.map(column => (\n                <TableCell\n                  key={column.name}\n                  align={column.numeric ? 'right' : 'inherit'}\n                >\n                  {column.name}\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows.map(row => (\n              <TableRow\n                key={row.id}\n                onClick={onRowClick(row.id)}\n                selected={row.selected}\n              >\n                <TableCell component=\"th\" scope=\"row\">\n                  {row.name}\n                </TableCell>\n                <TableCell>{row.created.toLocaleString()}</TableCell>\n                <TableCell align=\"right\">{row.high}</TableCell>\n                <TableCell align=\"right\">{row.low}</TableCell>\n                <TableCell align=\"right\">{row.average}</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </Paper>\n    </Fragment>\n  );\n}\n```", "```js\nconst selectedLow = () =>\n  rows\n    .filter(row => row.selected)\n    .reduce((total, row) => total + row.low, 0);\n\nconst selectedHigh = () =>\n  rows\n    .filter(row => row.selected)\n    .reduce((total, row) => total + row.high, 0);\n\nconst selectedAverage = () => (selectedLow() + selectedHigh()) / 2;\n```", "```js\nconst onRowClick = id => () => {\n  const newRows = [...rows];\n  const index = rows.findIndex(row => row.id === id);\n  const row = rows[index];\n\n  newRows[index] = { ...row, selected: !row.selected };\n  setRows(newRows);\n};\n```", "```js\n<TableRow\n  key={row.id}\n  onClick={onRowClick(row.id)}\n  selected={row.selected}\n>\n```", "```js\nimport React, { useState } from 'react';\n\nimport { makeStyles } from '@material-ui/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport IconButton from '@material-ui/core/IconButton';\n\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\nimport StopIcon from '@material-ui/icons/Stop';\n\nconst useStyles = makeStyles(theme => ({\n  root: { margin: theme.spacing(2), textAlign: 'center' },\n  button: {}\n}));\n\nconst StartButton = ({ row, onClick }) => (\n  <IconButton\n    onClick={onClick}\n    color={row.status === 'off' ? 'primary' : 'default'}\n    disabled={row.status === 'running'}\n  >\n    <PlayArrowIcon fontSize=\"small\" />\n  </IconButton>\n);\n\nconst StopButton = ({ row, onClick }) => (\n  <IconButton\n    onClick={onClick}\n    color={row.status === 'running' ? 'primary' : 'default'}\n    disabled={row.status === 'off'}\n  >\n    <StopIcon fontSize=\"small\" />\n  </IconButton>\n);\n\nexport default function RowActions() {\n  const classes = useStyles();\n  const [rows, setRows] = useState([\n    {\n      id: 1,\n      name: 'First Item',\n      status: 'running'\n    },\n    {\n      id: 2,\n      name: 'Second Item',\n      status: 'off'\n    },\n    {\n      id: 3,\n      name: 'Third Item',\n      status: 'off'\n    },\n    {\n      id: 4,\n      name: 'Fourth Item',\n      status: 'running'\n    },\n    {\n      id: 5,\n      name: 'Fifth Item',\n      status: 'off'\n    }\n  ]);\n\n  const toggleStatus = id => () => {\n    const newRows = [...rows];\n    const index = rows.findIndex(row => row.id === id);\n    const row = rows[index];\n\n    newRows[index] = {\n      ...row,\n      status: row.status === 'running' ? 'off' : 'running'\n    };\n    setRows(newRows);\n  };\n\n  return (\n    <Paper className={classes.root}>\n      <Table>\n        <TableHead>\n          <TableRow>\n            <TableCell>Name</TableCell>\n            <TableCell>Status</TableCell>\n            <TableCell>Actions</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {rows.map(row => {\n            return (\n              <TableRow key={row.id}>\n                <TableCell component=\"th\" scope=\"row\">\n                  {row.name}\n                </TableCell>\n                <TableCell>{row.status}</TableCell>\n                <TableCell>\n                  <StartButton\n                    row={row}\n                    onClick={toggleStatus(row.id)}\n                  />\n                  <StopButton\n                    row={row}\n                    onClick={toggleStatus(row.id)}\n                  />\n                </TableCell>\n              </TableRow>\n            );\n          })}\n        </TableBody>\n      </Table>\n    </Paper>\n  );\n}\n```", "```js\nconst StartButton = ({ row, onClick }) => (\n  <IconButton\n    onClick={onClick}\n    color={row.status === 'off' ? 'primary' : 'default'}\n    disabled={row.status === 'running'}\n  >\n    <PlayArrowIcon fontSize=\"small\" />\n  </IconButton>\n);\n\nconst StopButton = ({ row, onClick }) => (\n  <IconButton\n    onClick={onClick}\n    color={row.status === 'running' ? 'primary' : 'default'}\n    disabled={row.status === 'off'}\n  >\n    <StopIcon fontSize=\"small\" />\n  </IconButton>\n);\n```", "```js\nconst toggleStatus = id => () => {\n  const newRows = [...rows];\n  const index = rows.findIndex(row => row.id === id);\n  const row = rows[index];\n\n  newRows[index] = {\n    ...row,\n    status: row.status === 'running' ? 'off' : 'running'\n  };\n  setRows(newRows);\n};\n```", "```js\n<TableCell>\n  <StartButton\n    row={row}\n    onClick={toggleStatus(row.id)}\n  />\n  <StopButton\n    row={row}\n    onClick={toggleStatus(row.id)}\n  />\n</TableCell>\n```"]