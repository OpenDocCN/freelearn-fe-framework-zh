["```js\nnpm install --save express\n```", "```js\nmkdir src/server\n```", "```js\n    import express from 'express';\n    ```", "```js\n    const app = express();\n    ```", "```js\n    app.get('*', (req, res) => res.send('Hello World!'));\n    app.listen(8000, () => console.log('Listening on port 8000!'));\n    ```", "```js\n\"server\": \"nodemon --exec babel-node --watch src/server src/server/index.js\"\n```", "```js\nnpm install --save nodemon\n```", "```js\n    npm install --save-dev @babel/node\n    ```", "```js\n    npm run server\n    ```", "```js\napp.get('/', function (req, res, next) {\n  console.log('first function');\n  next();\n}, function (req, res) {\n  console.log('second function');\n  res.send('Hello World!');\n});\n```", "```js\nimport path from 'path';\nconst root = path.join(__dirname, '../../');\napp.use('/', express.static(path.join(root, 'dist/client')));\napp.use('/uploads', express.static(path.join(root, \n  'uploads')));\napp.get('/', (req, res) => {\n  res.sendFile(path.join(root, '/dist/client/index.html'));\n});\n```", "```js\n    app.get('/', function (req, res, next) {\n    ```", "```js\n    var random = Math.random() * (10 -1) + 1;\n    ```", "```js\n    if (random > 5) next('route')\n    ```", "```js\n      else next()\n    }, function (req, res, next) {\n      res.send('first');\n    })\n    app.get('/', function (req, res, next) {\n      res.send('second');\n    })\n    ```", "```js\nnpm install --save compression cors helmet\n```", "```js\nimport helmet from 'helmet';\nimport cors from 'cors';\nimport compress from 'compression';\n```", "```js\napp.use(helmet());\napp.use(helmet.contentSecurityPolicy({\n  directives: {\n    defaultSrc: [\"'self'\"],\n    scriptSrc: [\"'self'\", \"'unsafe-inline'\"],\n    styleSrc: [\"'self'\", \"'unsafe-inline'\"],\n    imgSrc: [\"'self'\", \"data:\", \"*.amazonaws.com\"]\n  }\n}));\napp.use(helmet.referrerPolicy({ policy: 'same-origin' }));\n```", "```js\napp.use(compress());\n```", "```js\napp.use(cors());\n```", "```js\nnpm install --save apollo-server-express graphql @graphql-tools/schema \n```", "```js\nmkdir src/server/services/\nmkdir src/server/services/graphql\n```", "```js\n    import { ApolloServer } from 'apollo-server-express';\n    import { makeExecutableSchema } from '@graphql-tools/schema';\n    ```", "```js\n    import Resolvers from './resolvers';\n    import Schema from './schema';\n    ```", "```js\n    const executableSchema = makeExecutableSchema({\n      typeDefs: Schema,\n      resolvers: Resolvers\n    });\n    ```", "```js\n    const server = new ApolloServer({\n      schema: executableSchema,\n      context: ({ req }) => req\n    });\n    ```", "```js\n    export default server;\n    ```", "```js\nimport graphql from './graphql';\nexport default {\n  graphql,\n};\n```", "```js\nimport services from './services';\n```", "```js\nconst serviceNames = Object.keys(services);\nfor (let i = 0; i < serviceNames.length; i += 1) {\n  const name = serviceNames[i];\n  if (name === 'graphql') {\n    (async () => {\n      await services[name].start();\n      services[name].applyMiddleware({ app });\n    })();\n  } else {\n    app.use('/${name}', services[name]);\n  }\n}\n```", "```js\nconst typeDefinitions = '\n  type Post {\n    id: Int\n    text: String\n  }\n  type RootQuery {\n    posts: [Post]\n  }\n  schema {\n    query: RootQuery\n  }\n';\nexport default [typeDefinitions];\n```", "```js\nconst resolvers = {\n  RootQuery: {\n    posts(root, args, context) {\n      return []; \n    }, \n  }, \n}; \nexport default resolvers;\n```", "```js\n{\n  \"operationName\": null,\n  \"query\": \"{ \n    posts { \n      id\n      text \n    }\n  }\", \n  \"variables\": {} \n}\n```", "```js\nif(process.env.NODE_ENV === 'production')\n```", "```js\n{\n  \"data\": { \n    \"posts\": [] \n  } \n}\n```", "```js\nreturn posts;\n```", "```js\ntype User {\n  avatar: String\n  username: String\n}\n```", "```js\nuser: User\n```", "```js\n\"query\":\"{\n  posts {\n    id\n    text\n    user {\n      avatar\n      username\n    }\n  }\n}\"\n```", "```js\ninput PostInput {\n  text: String!\n}\ninput UserInput {\n  username: String!\n  avatar: String!\n}\ntype RootMutation {\n  addPost (\n    post: PostInput!\n    user: UserInput!\n  ): Post\n}\n```", "```js\nschema {\n  query: RootQuery\n  mutation: RootMutation\n}\n```", "```js\nRootMutation: {\n  addPost(root, { post, user }, context) {\n    const postObject = { \n      ...post,\n      user,\n      id: posts.length + 1,\n    };\n    posts.push(postObject);\n    return postObject;\n  },\n},\n```", "```js\n{\n  \"operationName\": null,\n  \"query\": \"mutation addPost($post : PostInput!, \n    $user: UserInput!) {\n    addPost(post : $post, user: $user) { \n      id\n      text\n      user {\n        username\n        avatar\n      }\n    }\n  }\",\n  \"variables\": {\n    \"post\": { \n      \"text\": \"You just added a post.\"\n    },\n    \"user\": {\n      \"avatar\": \"/uploads/avatar3.png\",\n      \"username\": \"Fake User\"\n    }\n  }\n}\n```", "```js\n    npm install --save winston\n    ```", "```js\n    mkdir src/server/helpers\n    ```", "```js\n    import winston from 'winston';\n    let transports = [\n      new winston.transports.File({\n        filename: 'error.log',\n        level: 'error',\n      }),\n      new winston.transports.File({\n        filename: 'combined.log',\n        level: 'verbose',\n      }),\n    ];\n    if (process.env.NODE_ENV !== 'production') {\n      transports.push(new winston.transports.Console());\n    }\n    const logger = winston.createLogger({\n      level: 'info',\n      format: winston.format.json(),\n      transports,\n    });\n    export default logger;\n    ```", "```js\nimport logger from '../../helpers/logger';\n```", "```js\nlogger.log({ level: 'info', message: 'Post was created' });\n```"]