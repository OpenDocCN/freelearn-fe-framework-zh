["```js\nimport { useQuery } from \"@tanstack/react-query\";\n```", "```js\nconst values = useQuery({\n   queryKey: <insertQueryKey>,\n   queryFn: <insertQueryFunction>,\n });\n```", "```js\nuseQuery({ queryKey: ['users']  })\nuseQuery({ queryKey: ['users', 10] })\nuseQuery({ queryKey: ['users', 10, { isVisible: true }] })\nuseQuery({ queryKey: ['users', page, filters] })\n```", "```js\nuseQuery({ queryKey: ['users', 10, { page, filters }] })\nuseQuery({ queryKey: ['users', 10, { filters, page }] })\nuseQuery({ queryKey: ['users', 10, { page, random:\n  undefined, filters }] })\n```", "```js\nuseQuery({ queryKey: ['users', 10, undefined, { page,\n  filters }] })\nuseQuery({ queryKey: ['users', { page, filters }, 10] })\nuseQuery({ queryKey: ['users', 10, { page, filters }] })\n```", "```js\nimport { useQuery } from \"@tanstack/react-query\";\nimport { request, gql } from \"graphql-request\";\nconst customQuery = gql`\n  query {\n    posts {\n      data {\n        id\n        title\n      }\n    }\n  }\n`;\nconst fetchGQL = async () => {\n  const endpoint = <add_endpoint_here>\n  const {\n    posts: { data },\n  } = await request(endpoint, customQuery);\n  return data;\n};\n …\nuseQuery({\nqueryKey: [\"posts\"],\nqueryFn: fetchGQL\n});\n```", "```js\nimport axios from \"axios\";\nconst fetchData = async () => {\n  const { data } = await axios.get(\n    `https://danieljcafonso.builtwithdark.com/\n      react-query-api`\n  );\n  return data;\n};\n…\nuseQuery({\n    queryKey: [\"api\"],\n    queryFn: fetchData,\n  });\n```", "```js\nconst fetchDataWithFetch = async () => {\n  const response = await fetch('https://danieljcafonso.\n    builtwithdark.com/react-query-api')\n  if (!response.ok) throw new Error('Something failed in\n    your request')\n  return response.json()\n}\n```", "```js\nconst fetchData = async (someVariable) => {\n const { data } = await axios.get(\n   `https://danieljcafonso.builtwithdark.com/\n     react-query-api/${someVariable}`\n );\n return data;\n};\n…\nuseQuery({\n   queryKey: [\"api\", someVariable],\n   queryFn: () => fetchData(someVariable),\n });\n```", "```js\nconst fetchData = async ({ queryKey }) => {\n const [_queryKeyIdentifier, someVariable] = queryKey;\n const { data } = await axios.get(\n   `https://danieljcafonso.builtwithdark.com/\n     react-query-api/${someVariable}`\n );\n return data;\n};\nuseQuery({\n   queryKey: [\"api\", someVariable],\n   queryFn: fetchData,\n });\n```", "```js\nuseQuery({\n   queryKey: [{queryIdentifier: \"api\", someVariable}],\n   queryFn: fetchData,\n });\n```", "```js\nconst fetchData = async ({ queryKey }) => {\n  const { someVariable } = queryKey[0];\n…\n};\n```", "```js\nconst values = useQuery(...);\nconst { data, error, status, fetchStatus }= useQuery(...);\n```", "```js\nconst App = () => {\n  const { data } = useQuery({\n    queryKey: [\"api\"],\n    queryFn: fetchData,\n  });\n  return (\n    <div>\n       {data ? data.hello : null}\n    </div>\n  );\n};\n```", "```js\nconst App = () => {\n  const { error } = useQuery({\n    queryKey: [\"api\"],\n    queryFn: fetchData,\n  });\n  return (\n    <div>\n       {error ? error.message : null}\n    </div>\n  );\n};\n```", "```js\nconst App = () => {\n  const { status, error, data } = useQuery({\n    queryKey: [\"api\"],\n    queryFn: fetchData,\n  });\n  if(status === \"loading\") {\n    return <div>Loading...</div>\n  }\n  if(status === \"error\") {\n    return <div>There was an unexpected error:\n      {error.message}</div>\n  }\n  return (\n    <div>\n       {data.hello}\n    </div>\n  );\n};\n```", "```js\nconst App = () => {\n  const {  isLoading, isError, error, data } = useQuery({\n    queryKey: [\"api\"],\n    queryFn: fetchData,\n  });\n  if(isLoading) {\n    return <div>Loading...</div>\n  }\n  if(isError) {\n    return <div>There was an unexpected error:\n      {error.message}</div>\n  }\n  return (\n    <div>\n       {data.hello}\n    </div>\n  );\n};\n```", "```js\nconst App = () => {\n  const {  fetchStatus, data } = useQuery({\n    queryKey: [\"api\"],\n    queryFn: fetchData,\n  });\n  if(fetchStatus === \"paused\") {\n    return <div>Waiting for your connection to return…\n      </div>\n  }\n  if(fetchStatus === \"fetching\") {\n    return <div>Fetching…</div>\n  }\n  return (\n    <div>\n       {data.hello}\n    </div>\n  );\n};\n```", "```js\nconst App = () => {\n  const { isFetching, isPaused, data } = useQuery({\n    queryKey\" [\"\"pi\"],\n    queryFn: fetchData,\n  });\n  if(isPaused) {\n    return <div>Waiting for your connection to return...\n      </div>\n  }\n  if(isFetching) {\n    return <div>Fetching...</div>\n  }\n  return (\n    <div>\n       {data.hello}\n    </div>\n  );\n};\n```", "```js\nuseQuery({\n  staleTime: 60000,\n});\n```", "```js\nuseQuery({\n  cacheTime: 60000,\n});\n```", "```js\nuseQuery({\n  retry: false,\n});\n```", "```js\nuseQuery({\n  retry: 1,\n});\n```", "```js\nuseQuery({\n  retryDelay: (attempt) => attempt * 2000,\n});\n```", "```js\nuseQuery({\n  enabled: arrayVariable.length > 0\n});\n```", "```js\nuseQuery({\n  onSuccess: (data) => console.log(\"query was successful\",\n    data),\n});\n```", "```js\nuseQuery({\n  onError: (error) => console.log(\"query was unsuccessful\",\n    error.message),\n});\n```", "```js\nconst [someVariable, setSomeVariable] = useState(0)\nuseQuery({\n    queryKey: [\"api\", someVariable],\n    queryFn: fetchData,\n  });\nreturn <button onClick={() => setSomeVariable\n  (someVariable + 1)}> Click me </button>\n```", "```js\nuseQuery({\n    refetchOnMount: \"always\",\n    refetchOnReconnect: true,\n    refetchOnWindowFocus: false\n  });\n```", "```js\nuseQuery({\n    refetchInterval: 2000,\n    refetchIntervalInBackground: true\n  });\n```", "```js\nconst queryClient = useQueryClient();\nqueryClient.refetchQueries({ queryKey: [\"api\"] })\n```", "```js\nconst { refetch } = useQuery({\n    queryKey: [\"api\"],\n    queryFn: fetchData,\n  });\nrefetch()\n```", "```js\nconst App = () => {\n  const { data: firstQueryData } = useQuery({\n    queryKey: [\"api\"],\n    queryFn: fetchData,\n  });\n  const canThisDependentQueryFetch = firstQueryData?.hello\n    !== undefined;\n  const { data: dependentData } = useQuery({\n    queryKey: [\"dependentApi\", firstQueryData?.hello],\n    queryFn: fetchDependentData,\n    enabled: canThisDependentQueryFetch,\n  });\n…\n```", "```js\nimport { useQuery, useQueryClient } from \"@tanstack/react-query\";\nconst fetchData = async ({ queryKey }) => {\n  const { apiName } = queryKey[0];\n  const response = await fetch(\n    `https://danieljcafonso.builtwithdark.com/${apiName}`\n  );\n  if (!response.ok) throw new Error(\"Something failed in\n    your request\");\n  return response.json();\n};\nconst apiA = \"react-query-api\";\nconst apiB = \"react-query-api-two\";\n```", "```js\nconst ComponentA = () => {\n  const { data, error, isLoading, isError, isFetching } =\n    useQuery({\n    queryKey: [{ queryIdentifier: \"api\", apiName: apiA }],\n    queryFn: fetchData,\n    retry: 1,\n  });\n  if (isLoading) return <div> Loading data... </div>;\n  if (isError)\n    return (\n      <div> Something went wrong... Here is the error:\n        {error.message}</div>\n    );\n  return (\n    <div>\n      <p>{isFetching ? \"Fetching Component A...\" :\n        data.hello} </p>\n      <ComponentB/>\n    </div>\n  );\n};\n```", "```js\nconst ComponentB = () => {\n  const { data } = useQuery({\n    queryKey: [{ queryIdentifier: \"api\", apiName: apiB }],\n    queryFn: fetchData,\n    onSuccess: (data) => console.log(\"Component B fetched\n      data\", data),\n  });\n  return (\n    <div>\n      <span>{data?.hello}</span>\n      <ComponentC parentData={data} />\n    </div>\n  );\n};\n```", "```js\nconst ComponentC = ({ parentData }) => {\n  const { data, isFetching } = useQuery({\n    queryKey: [{ queryIdentifier: \"api\", apiName: apiA }],\n    queryFn: fetchData,\n    enabled: parentData !== undefined,\n  });\n  const queryClient = useQueryClient();\n  return (\n    <div>\n      <p>{isFetching ? \"Fetching Component C...\" :\n        data.hello} </p>\n      <button\n        onClick={() =>\n          queryClient.refetchQueries({\n            queryKey: [{ queryIdentifier: \"api\",\n              apiName: apiA }],\n          })\n        }\n      >\n        Refetch Parent Data\n      </button>\n    </div>\n  );\n};\nexport default ComponentA;\n```"]