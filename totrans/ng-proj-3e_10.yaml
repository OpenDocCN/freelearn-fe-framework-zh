- en: '10'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Customizing Angular CLI Commands Using Schematics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Angular CLI is a powerful tool and the de facto solution for working with
    Angular applications. It eliminates most of the boilerplate code and configuration
    from the developer and allows them to focus on the fun stuff, which is building
    awesome Angular applications. Apart from enhancing the Angular development experience,
    it can be easily customized to the needs of each developer.
  prefs: []
  type: TYPE_NORMAL
- en: The Angular CLI contains a set of useful commands for building, bundling, and
    testing Angular applications. It also provides a collection of special commands,
    called **schematics**, that generate various Angular artifacts such as components,
    modules, and services. Schematics expose a public API that developers can use
    to create their own Angular CLI commands or extend the existing ones.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following details about schematics:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing the **Schematics CLI**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a **Tailwind CSS** component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an HTTP service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Essential background theory and context
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Angular schematics are libraries that can be installed using `npm`. They are
    used in various situations, including creating components that share a standard
    user interface or enforcing conventions and coding guidelines inside an organization.
    A schematic can be used as a standalone or as a companion for an existing Angular
    library.
  prefs: []
  type: TYPE_NORMAL
- en: 'Angular schematics are packaged into collections and reside in the `@schematics/angular`
    npm package. When we use the Angular CLI to run the `ng add` or the `ng build`
    command, it runs the appropriate schematic from that package. The Angular CLI
    currently supports the following types of schematics:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Add**: Installs an Angular library in an Angular CLI workspace using the
    `ng add` command.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Update**: Updates an Angular library using the `ng update` command.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Generate**: Generates Angular artifacts in an Angular CLI workspace using
    the `ng generate` command.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this project, we will focus on generating schematics, but the same rules
    apply to all the other commands.
  prefs: []
  type: TYPE_NORMAL
- en: Project overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this project, we will learn how to use the Schematics API to build custom
    Angular CLI generation schematics for creating components, services, and directives.
    First, we will build a schematic for creating an Angular component that uses the
    Tailwind CSS framework in its template. Then, we will create a schematic to generate
    an Angular service that injects the built-in HTTP client by default and creates
    one method for each HTTP request in a CRUD operation. The following diagram describes
    an architectural overview of the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Εικόνα που περιέχει διάγραμμα  Περιγραφή που δημιουργήθηκε αυτόματα](img/B18465_10_01.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.1 – Project architecture
  prefs: []
  type: TYPE_NORMAL
- en: 'Build time: 1 hour'
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following prerequisites and software tools are required to complete this
    project:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Angular CLI: A command-line interface for Angular, which you can find at [https://angular.io/cli](https://angular.io/cli).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'GitHub material: The code for this chapter can be found in the `Chapter10`
    folder at [https://github.com/PacktPublishing/Angular-Projects-Third-Edition](https://github.com/PacktPublishing/Angular-Projects-Third-Edition).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing the Schematics CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Schematics CLI is a command-line interface that we can use to interact
    with the Schematics API. To install it, run the following `npm` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command will install the `@angular-devkit/schematics-cli` npm
    package globally on our system. We can then use the `schematics` executable to
    create a new collection for the schematics:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous command will generate a schematics project called `my-schematics`.
    It contains a schematic with the same name by default inside the `src` folder.
    A schematic includes the following files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`collection.json`: A JSON schema that describes the schematics that belong
    to the `my-schematics` collection.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`my-schematics\index.ts`: The main entry point of the schematic.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`my-schematics\index_spec.ts`: The unit test file of the main entry point of
    the schematic.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The JSON schema file of the collection contains one entry for each schematic
    associated with that collection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Each schematic in the collection contains a short description, as indicated
    by the `description` property, and a `factory` property that points to the main
    entry point of the schematic using a special syntax. It contains the filename
    `./my-schematics/index`, followed by the `#` character, and the name of the function
    exported by that file, named `mySchematics`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The main entry point of a schematic contains a rule factory method that is
    exported by default and returns a `Rule` object, as described in the `index.ts`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: A schematic does not interact directly with the filesystem. Instead, it creates
    a virtual filesystem represented by a `Tree` object. The virtual filesystem contains
    a *staging* area where all transformations from schematics happen. This area aims
    to make sure that any transformations that are not valid will not propagate to
    the actual filesystem. As soon as the schematic is valid to execute, the virtual
    filesystem will apply the changes to the real one. All transformations of a schematic
    operate in a `SchematicContext` object.
  prefs: []
  type: TYPE_NORMAL
- en: In the following section, we will learn how to use the Schematics CLI and create
    a component generation schematic.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Tailwind CSS component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Tailwind is a very popular CSS framework that enforces a utility-first core
    principle. It contains classes and styles that can be used in Angular applications
    to create easily composable user interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: We will use the Schematics API of the Angular CLI to build a generation schematic
    for Angular components. The schematic will generate a new Angular component styled
    with a Tailwind container layout.
  prefs: []
  type: TYPE_NORMAL
- en: The schematic we will build does not need Tailwind CSS installed by default.
    However, the application in which we will use the schematic does require it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see how we can accomplish that:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the following command to add a new schematic to our collection:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding command will update the `collection.json` file to contain a new
    entry for the `tailwind-container` schematic. It will also create a `tailwind-container`
    folder in the `src` folder of our workspace.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a `schema.json` file inside the `tailwind-container` folder and add
    the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Each schematic can have a JSON schema file that defines the options available
    when running the schematic. Since we want to create a component generation schematic,
    we need a `name` and a `path` property for our component.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Each property has associated metadata, such as the `type` and the `description`.
    The name of the component is required when invoking the schematic, as indicated
    by the `required` array property.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `collection.json` file and set the properties of the `tailwind-container`
    schematic as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding file, we set a proper description for our schematic. We also
    add the `schema` property, which points to the absolute path of the `schema.json`
    file we created in the previous step.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a `schema.ts` file inside the `tailwind-container` folder and add the
    following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding file defines the `Schema` interface with mapping properties to
    those described in the `schema.json` file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We have now created all the underlying infrastructure we will use to create
    our schematic. Let’s see how to write the actual code that will run our schematic:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a folder named `files` inside the `tailwind-container` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `__name@dasherize__.component.html.template` inside the
    `files` folder and add the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding file denotes the component template that our schematic will generate.
    The `__name` prefix will be replaced by the name of the component that we will
    pass as an option in the schematic. The `@dasherize__` syntax indicates that the
    name will be separated with dashes and converted in to lowercase if passed in
    camel case.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a file called `__name@dasherize__.component.ts.template` and add the
    following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding file contains the TypeScript class of the component that will
    be generated. The `selector` and the `templateUrl` properties of the `@Component`
    decorator are built using the `dasherize` method and the `name` of the component.
    The class name contains a different method called `classify`, which takes the
    `name` of the component as a parameter and converts it in to title case.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `index.ts` file of the `tailwind-container` folder, set the option
    type to `Schema`, and remove the `return` statement. The resulting file should
    be the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify the `import` statements at the top of the file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Insert the following code into the `tailwindContainer` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding code, first, we set the `path` property of the component in
    case one is not passed in the schematic. By default, we create a folder inside
    the `src\app` folder with the same name as the component. We then use the `apply`
    method to read the template files from the `files` folder and pass the `dasherize`,
    `classify`, and `name` properties using the `applyTemplates` function. Finally,
    we call the `move` method to create the generated component files in the provided
    path.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following statement to the end of the factory function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we can go ahead and test our new component schematic:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the following `npm` command to build the schematic:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding command will invoke the TypeScript compiler and transpile the
    TypeScript source files into JavaScript. It will generate the JavaScript output
    files into the same folders, side by side, as the TypeScript ones.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Run the following command to install the schematics library into our global
    npm cache:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding command will allow us to install the schematic without querying
    the public npm registry.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Execute the following Angular CLI command in a folder of your choice outside
    the workspace to scaffold a new Angular application with the default options:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Navigate to the `my-app` folder and run the following command to install our
    schematics:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The previous `npm` command will install the `my-schematics` library in the current
    Angular CLI workspace.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `npm link` command is like running `npm install my-schematics`, except that
    it downloads the npm package from the global npm cache of our machine and does
    not add it to the `package.json` file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Use the `generate` command of the Angular CLI to create a `dashboard` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding command, we use our custom schematic by passing the name of
    our collection, `my-schematics`, followed by the specific schematic name, `tailwind-container`,
    separated by a colon. We also pass a name for our component using the `--name`
    option of the schematic.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We can verify that our schematic worked correctly by observing the output in
    the terminal or opening our component with VS Code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.1 – Generate Angular component](img/B18465_10_02.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.2 – Generate Angular component
  prefs: []
  type: TYPE_NORMAL
- en: We have successfully created a new schematic to craft custom Angular components
    according to our needs. The schematic that we built generates a new Angular component
    from scratch. The Angular CLI is so extensible that we can hook into the execution
    of built-in Angular schematics and modify them accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: In the following section, we will investigate this by building a schematic for
    Angular HTTP services.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an HTTP service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will create a schematic for our schematics library that scaffolds an Angular
    service. It will generate a service that imports the built-in HTTP client. It
    will also contain one method for each HTTP request involved in a CRUD operation.
  prefs: []
  type: TYPE_NORMAL
- en: The generation schematic we will build will not stand on its own. Instead, we
    will combine it with the existing generation schematic of the Angular CLI for
    services. Thus, we do not need a separate JSON schema.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s get started by creating the schematic:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the following command to add a new schematic to our collection:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following command to install the `@schematics/angular` npm package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `collection.json` file and modify the `crud-service` schematic:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We set a short description for the schematic and add a `schema` property pointing
    to the original `schema.json` file of Angular services.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Create a folder named `files` inside the `crud-service` folder of the workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file named `__name@dasherize__.service.ts.template` inside the `files`
    folder and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding file is the template of the Angular service file that our schematic
    will generate. It injects the `HttpClient` service into the `constructor` of the
    class by default.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Define a service property that will represent the URL of the API with which
    we want to communicate:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following methods for each HTTP request of a CRUD operation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Creating all the methods beforehand eliminates much of the boilerplate code.
    The developer that uses the schematic will only need to modify these methods and
    add the actual implementation for each one.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have almost finished our schematic except for creating the factory function
    that will invoke the generation of the service:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `index.ts` file of the `crud-service` folder and modify the `import`
    statements as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Rename the `tree` parameter and remove it from the `return` statement because
    we will not use it. The resulting factory function should look like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following snippet to the `crudService` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Knowing which options will be used to generate the Angular service beforehand
    is impossible. Thus, we use the **spread** operator to pass all available options
    to the `templateSource` method. That is also why the `_options` parameter is of
    type `any`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following `return` statement to the end of the function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding statement, we use the `externalSchematic` method to call the
    built-in generation schematic for creating Angular services. Then, we merge the
    result from executing that schematic with our `templateSource` variable. We also
    define the strategy of the merge operation using `MergeStrategy.Overwrite` so
    that any changes made by our schematic will overwrite the default ones.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Our schematic for creating CRUD services is now complete. Let’s use it in our
    sample application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the following command to build the schematics library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We do not need to link the schematics library again. Our application will be
    automatically updated as soon as we make a new build of our schematics.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Navigate to the `my-app` folder in which our application resides.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Execute the following command to generate an Angular service using our new
    schematic:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We use the `generate` command of the Angular CLI, passing the name of our schematics
    collection again but targeting the `crud-service` schematic this time.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The new Angular service is created in the `src\app` folder, as indicated by
    the output in the terminal window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.2 – Generating an Angular service](img/B18465_10_03.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.3 – Generating an Angular service
  prefs: []
  type: TYPE_NORMAL
- en: Notice that the schematic has generated a unit test file for us automatically.
    How is this possible? Recall that we merged our schematic with the built-in generation
    schematic of the Angular CLI. So, whatever the default schematic does, it reflects
    directly on the execution of the custom schematic.
  prefs: []
  type: TYPE_NORMAL
- en: We have just added a new helpful command to our schematics collection. We can
    generate an Angular service that interacts with HTTP endpoints. Moreover, we have
    added the fundamental methods needed for communicating with the endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this project, we used the Schematics API of the Angular CLI to create custom
    schematics for our needs. We built a schematic for generating Angular components
    that contain Tailwind CSS styles in their templates. We also built another schematic
    that creates an Angular service to interact with the built-in HTTP client. The
    service includes all the necessary artifacts for working with an HTTP CRUD application.
  prefs: []
  type: TYPE_NORMAL
- en: The Angular CLI is a flexible and extensible tool that enhances the development
    experience dramatically. The imagination of each developer is all that limits
    what can be done with such an asset in their toolchain. The CLI and the Angular
    framework allow developers to create excellent web applications.
  prefs: []
  type: TYPE_NORMAL
- en: As we have learned throughout this book, the popularity of the Angular framework
    in the web developer world is so great that it is straightforward to integrate
    it today with any technology and create fast and scalable Angular applications.
    So, we encourage you to get the latest version of Angular and create amazing applications
    today.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Use the Schematics CLI to create an Angular schematic for generating an Angular
    directive. The directive should inject the `ElementRef` and `Renderer2` services
    from the `@angular/core` npm package in to the constructor of the TypeScript class.
  prefs: []
  type: TYPE_NORMAL
- en: You should follow the same approach as we did for the component schematic in
    the *Creating a Tailwind CSS component* section.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the solution in the `Chapter10` folder of the `exercise` branch
    in the GitHub repository for this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Schematics overview: [https://angular.io/guide/schematics](https://angular.io/guide/schematics)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Authoring schematics: [https://angular.io/guide/schematics-authoring](https://angular.io/guide/schematics-authoring)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Schematics for libraries: [https://angular.io/guide/schematics-for-libraries](https://angular.io/guide/schematics-for-libraries)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Angular CLI built-in schematics: [https://github.com/angular/angular-cli/tree/master/packages/schematics/angular](https://github.com/angular/angular-cli/tree/master/packages/schematics/angular)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
