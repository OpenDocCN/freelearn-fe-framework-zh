["```js\nimport { describe, it, expect } from 'vitest'\nimport { shallowMount } from '@vue/test-utils'\nimport App from '../src/App.vue'\ndescribe('App', () => {\n  it('App renders blog title correctly', () => {\n    const wrapper = shallowMount(App)\n    expect(wrapper.text()).toContain('The Vue.js Workshop\n                                      Blog')\n  })\n})\n```", "```js\n    \"test:unit\": \"vitest --environment jsdom\"\n```", "```js\n<script setup>\n</script>\n<template>\n  <header>\n  <h1>The Vue.js Workshop Blog</h1>\n  </header>\n</template>\n<style>\n</style>\n```", "```js\n<script setup>\ndefineProps({\n  posts: {\n    type: Array,\n      default: () => []\n  }\n})\n</script>\n<template>\n  <div>\n  </div>\n</template>\n```", "```js\n<script>\nexport default {\n  data() {\n    return {\n      posts: [\n        {\n          title: 'Vue.js for React developers',\n            description: 'React has massive popularity here\n              are the key benefits of Vue.js over it.',\n                tags: ['vue', 'react'],\n        },\n        {\n          title: 'Migrating an AngularJS app to Vue.js',\n            description: 'With many breaking changes,\n              AngularJS developers have found it easier to\n                retrain to Vue.js than Angular 2',\n                  tags: ['vue', 'angularjs']\n        }\n      ]\n    }\n  }\n}\n</script>\n```", "```js\n<script setup>\nimport PostList from './components/PostList.vue'\n</script>\n<template>\n  <header>\n  <h1>The Vue.js Workshop Blog</h1>\n  </header>\n  <PostList :posts=\"posts\" />\n</template>\n```", "```js\n<script setup>\ndefineProps({\n  title: {\n    type: String\n  },\n  description: {\n    type: String\n  }\n})\n</script>\n<template>\n  <div>\n  <h3>{{ title }}</h3>\n  <p>{{ description }}</p>\n  </div>\n</template>\n```", "```js\n<script setup>\nimport PostListItem from './PostListItem.vue';\ndefineProps({\n  posts: {\n    type: Array,\n      default: () => []\n  }\n})\n</script>\n<template>\n  <div>\n    <PostListItem v-for=\"post in posts\"\n    :key=\"post.slug\"\n    :title=\"post.title\"\n    :description=\"post.description\"/>\n  </div>\n</template>\n```", "```js\nimport { describe, it, expect } from 'vitest'\nimport { shallowMount } from '@vue/test-utils';\nimport PostListItem from '../components/PostListItem.vue';\ndescribe('PostListItem', () => {\n  it('PostListItem renders title and description\n  correctly', () => {\n    const wrapper = shallowMount(PostListItem, {\n      propsData: {\n        title: \"Blog post title\",\n        description: \"Blog post description\"\n      }\n    })\n    expect(wrapper.text()).toMatch(\"Blog post title\")\n    expect(wrapper.text()).toMatch(\"Blog post description\")\n  })\n})\n```", "```js\nimport { describe, it, expect } from 'vitest'\nimport { shallowMount } from '@vue/test-utils';\nimport PostList from '../src/components/PostList.vue';\nimport PostListItem from '../src/components/PostListItem.vue';\ndescribe('PostList', () => {\n  it('PostList renders the right number of PostListItem',\n  () => {\n    const wrapper = shallowMount(PostList, {\n      propsData: {\n        posts:  [\n          {\n            title: \"Blog post title\",\n            description: \"Blog post description\"\n          }\n        ]\n      }\n    })\n    expect(wrapper.findAllComponents(PostListItem))\n      .toHaveLength(1);\n  })\n})\n```", "```js\nimport { describe, it, expect } from 'vitest'\nimport { shallowMount, mount } from '@vue/test-utils';\nimport PostList from '../src/components/PostList.vue';\nimport PostListItem from '../src/components/PostListItem.vue';\ndescribe('PostList', () => {\n  // Previous test…\n  it('PostList renders passed title and description for\n  each passed post', () => {\n    const wrapper = mount(PostList, {\n      propsData: {\n        posts:  [\n          {\n            title: \"Title 1\",\n            description: \"Description 1\"\n          },\n          {\n            title: \"Title 2\",\n            description: \"Description 2\"\n          }\n        ]\n      }\n    })\n    const outputText = wrapper.text()\n    expect(outputText).toContain('Title 1')\n    expect(outputText).toContain('Description 1')\n    expect(outputText).toContain('Title 2')\n    expect(outputText).toContain('Description 2')\n  })\n})\n```", "```js\n// rest of test and imports\nit('PostListItem renders tags with a # prepended to them', () => {\n  const wrapper = shallowMount(PostListItem, {\n    propsData: {\n      tags: ['react', 'vue']\n    }\n  })\n  expect(wrapper.text()).toMatch('#react')\n  expect(wrapper.text()).toMatch('#vue')\n})\n```", "```js\n    <script setup>\n    ```", "```js\n    defineProps({\n    ```", "```js\n      title: {\n    ```", "```js\n        type: String\n    ```", "```js\n      },\n    ```", "```js\n      description: {\n    ```", "```js\n        type: String\n    ```", "```js\n      },\n    ```", "```js\n      tags: {\n    ```", "```js\n        type: Array,\n    ```", "```js\n        default: () => []\n    ```", "```js\n      }\n    ```", "```js\n    })\n    ```", "```js\n    </script>\n    ```", "```js\n    <template>\n    ```", "```js\n      <div>\n    ```", "```js\n      <h3>{{ title }}</h3>\n    ```", "```js\n      <p>{{ description }}</p>\n    ```", "```js\n      <ul>\n    ```", "```js\n        <li\n    ```", "```js\n        v-for=\"tag in tags\"\n    ```", "```js\n        :key=\"tag\">\n    ```", "```js\n        #{{ tag }}\n    ```", "```js\n        </li>\n    ```", "```js\n      </ul>\n    ```", "```js\n      </div>\n    ```", "```js\n    </template>\n    ```", "```js\nit('PostList renders tags for each post', () => {\n  const wrapper = mount(PostList, {\n    propsData: {\n      posts:  [\n              {\n                tags: ['react', 'vue']\n              },\n              {\n                tags: ['html', 'angularjs']\n              }\n              ]\n    }\n  })\n  const outputText = wrapper.text()\n  expect(outputText).toContain('#react')\n  expect(outputText).toContain('#vue')\n  expect(outputText).toContain('#html')\n  expect(outputText).toContain('#angularjs')\n})\n```", "```js\n    <!-- rest of template -->\n    ```", "```js\n    <PostListItem v-for=\"post in posts\"\n    ```", "```js\n      :key=\"post.slug\"\n    ```", "```js\n      :title=\"post.title\"\n    ```", "```js\n      :description=\"post.description\"\n    ```", "```js\n      :tags=\"post.tags\"\n    ```", "```js\n    />\n    ```", "```js\n// rest of file…\nimport { computed } from 'vue';\nconst props = defineProps({\n  title: {\n    type: String\n  },\n  description: {\n    type: String\n  },\n  tags: {\n    type: Array,\n    default: () => []\n  }\n})\nconst truncated = computed(() => {\n  return props.description && props.description.slice(0,8)\n})\ndefineExpose({ truncated })\n```", "```js\nit('truncated properly returns only the first 8 characters', () => {\n  const wrapper = shallowMount(PostListItem, {\n    propsData: {\n      title: \"Blog post title\",\n      description: \"Blog post description\"\n    }\n  })\n  expect(wrapper.vm.truncated).toMatch('Blog pos')\n})\nit('truncated properly doesnt change shorter values', () => {\n  const wrapper = shallowMount(PostListItem, {\n    propsData: {\n      title: \"Blog post title\",\n      description: \"Test\"\n    }\n  })\n  expect(wrapper.vm.truncated).toMatch('Test')\n})\n```", "```js\n// rest of script\ndescribe('ellipsis', () => {\n  it('ellipsis should do nothing if value is less\n  than 50 characters', () => {\n     const wrapper = shallowMount(PostListItem, {\n       propsData: {\n         title: \"Blog post title\",\n         description: \"Test\"\n       }\n     })\n     expect(wrapper.vm.truncated).toMatch('Test')\n  })\n  it('ellipsis should truncate to 50 and append \"...\"\n  when longer than 50 characters', () => {\n     const wrapper = shallowMount(PostListItem, {\n       propsData: {\n         title: \"Blog post title\",\n         description: \"Should be more than\n         the 50 allowed characters by a small amount\"\n       }\n     })\n     expect(wrapper.vm.truncated).toMatch('Should be\n       more than the 50 allowed characters by a...')\n  })\n})\n```", "```js\n    <script setup>\n    ```", "```js\n    // rest of script\n    ```", "```js\n    const ellipsis = computed(() => {\n    ```", "```js\n      return props.description && props.description.length\n    ```", "```js\n        > 50 ? `${props.description.slice(0,50)}...` :\n    ```", "```js\n          props.description;\n    ```", "```js\n    })\n    ```", "```js\n    defineExpose({ truncated, ellipsis })\n    ```", "```js\n    </script>\n    ```", "```js\n    <template>\n    ```", "```js\n      <div>\n    ```", "```js\n      <h3>{{ title }}</h3>\n    ```", "```js\n      <p>{{ ellipsis }}</p>\n    ```", "```js\n      <ul>\n    ```", "```js\n        <li v-for=\"tag in tags\" :key=\"tag\">\n    ```", "```js\n        #{{ tag }}\n    ```", "```js\n        </li>\n    ```", "```js\n      </ul>\n    ```", "```js\n      </div>\n    ```", "```js\n    </template>\n    ```", "```js\nimport { createApp } from 'vue'\nimport App from './App.vue'\nimport router from './router';\ncreateApp(App).use(router).mount('#app')\n```", "```js\nimport { createRouter, createWebHistory } from\n'vue-router';\nimport PostList from '@/components/PostList.vue';\nconst routes = [\n  {\n    path: '/',\n    component: PostList\n  }\n];\nconst router = createRouter({\n  history: createWebHistory(),\n  routes\n});\nexport default router;\n```", "```js\n<!—rest of file… -->\n<template>\n  <header>\n  <h1>The Vue.js Workshop Blog</h1>\n  </header>\n  <router-view :posts=\"posts\"></router-view>\n</template>—-- rest of file... -->\n```", "```js\n<script>\nexport default {\n  data() {\n    return {\n      posts: [\n        {\n          slug: 'vue-react',\n          title: 'Vue.js for React developers',\n          description: 'React has massive popularity here\n                        are the key benefits of Vue.js over\n                        it.',\n          content: 'This is the content of the Vue.js for\n                    React developers post.',\n          tags' ['vue', 'react'],\n        },\n        {\n          slug: 'vue-angularjs',\n          title: 'Migrating an AngularJS app to Vue'js',\n          description: 'With many breaking changes,\n                        AngularJS developers have found it\n                        easier to retrain to Vue.js than\n                        Angular 2',\n          content: 'This is the content of the Vue.js for\n                    AngularJS developers post.',\n          tags' ['vue', 'angularjs']\n        }\n      ]\n    }\n  }\n}\n</script>\n```", "```js\n<script setup>\ndefineProps({\n  posts: {\n    type: Array,\n      default: () => []\n  }\n})\n</script>\n<template>\n  <div>\n  <h2>Post: RENDER ME</h2>\n  <p>Placeholder for post.content.</p>\n  </div>\n</template>\n```", "```js\nimport { createRouter, createWebHistory } from\n'vue-router';\nimport PostList from '@/components/PostList.vue';\nimport SinglePost from '@/components/SinglePost.vue';\nconst routes = [\n  {\n    path: '/',\n    component: PostList\n  },\n  {\n    path: '/:postId',\n    component: SinglePost\n  }\n];\nconst router = createRouter({\n  history: createWebHistory(),\n  routes\n});\nexport default router;\n```", "```js\n// other imports\nimport { useRoute } from 'vue-router';\n// props code\nconst route = useRoute();\nconst post = computed(() => {\n  const { postId } = route.params;\n  return props.posts.find(p => p.slug === postId);\n})\n```", "```js\nconst title = computed(() => {\n  return post && post.value.title;\n})\nconst content = computed(() => {\n  return post && post.value.content;\n})\n```", "```js\n<template>\n  <div>\n  <h2>Post: {{ title }}</h2>\n  <p>{{ content }}</p>\n  </div>\n</template>\n```", "```js\n<!-- rest of template -->\n<PostListItem v-for=\"post in posts\"\n:key=\"post.slug\"\n:title=\"post.title\"\n:description=\"post.description\"\n:tags=\"post.tags\"\n:slug=\"post.slug\"\n/>\n<!-- rest of template -->\n```", "```js\n// rest of the props...\nslug: {\n  type: String\n}\n```", "```js\n<template>\n  <div>\n  <router-link :to=\"`/${slug}`\">\n  <h3>{{ title }}</h3>\n  </router-link>\n  <p>{{ ellipsis }}</p>\n  <ul>\n    <li v-for=\"tag in tags\" :key=\"tag\">\n    #{{ tag }}\n    </li>\n  </ul>\n  </div>\n</template>\n```", "```js\nimport { describe, it, expect } from 'vitest';\nimport { mount, flushPromises } from '@vue/test-utils'\nimport App from '../src/App.vue';\nimport router from \"@/router\";\ndescribe('SinglePost', () => {\n  it('Router renders single post page when clicking a post\n  title', async () => {\n    router.push('/');\n    await router.isReady();\n    const wrapper = mount(App, {\n      global: {\n        plugins: [router]\n      }\n  })\n    expect(wrapper.text()).toMatch(\"Vue.js for React\n                                    developers\");\n    expect(wrapper.text()).toMatch(\"Migrating an AngularJS\n                                    app to Vue.js\");\n    await wrapper.find('a').trigger('click');\n    await flushPromises();\n    expect(wrapper.text()).toMatch(\"Vue.js for React\n                                    developers\");\n    expect(wrapper.text()).not.toMatch(\"Migrating an\n                                        AngularJS app to\n                                        Vue.js2\");\n  })\n})\n```", "```js\n  It('Router renders single post page when a slug is set',\n  async () => {\n    await router.replace('/');\n    await router.push('/vue-react');\n    const wrapper = mount(App, {\n      global: {\n        plugins: [router]\n      }\n  })\n    expect(wrapper.text()).toMatch(\"Vue.js for React\n                                    developers\");\n    expect(wrapper.text()).not.toMatch(\"Migrating an\n                                        AngularJS app to\n                                        Vue.js\");\n  })\n```", "```js\n    <script setup>\n    ```", "```js\n    import PostList from './PostList.vue';\n    ```", "```js\n    defineProps({\n    ```", "```js\n      posts: {\n    ```", "```js\n        type: Array,\n    ```", "```js\n          default: () => []\n    ```", "```js\n      }\n    ```", "```js\n    })\n    ```", "```js\n    </script>\n    ```", "```js\n    <template>\n    ```", "```js\n      <h3>#INSERT_TAG_NAME</h3>\n    ```", "```js\n    </template>\n    ```", "```js\n    // other imports\n    ```", "```js\n    import TagPage from '@/components/TagPage.vue';\n    ```", "```js\n    const routes = [\n    ```", "```js\n      // other routes\n    ```", "```js\n      {\n    ```", "```js\n        path:'/tags/:tagName',\n    ```", "```js\n        component: TagPage\n    ```", "```js\n      }\n    ```", "```js\n    ];\n    ```", "```js\n    // router instantiation and export\n    ```", "```js\n    import { computed } from 'vue';\n    ```", "```js\n    import { useRoute } from 'vue-router';\n    ```", "```js\n    const props = defineProps({\n    ```", "```js\n      posts: {\n    ```", "```js\n        type: Array,\n    ```", "```js\n          default: () => []\n    ```", "```js\n      }\n    ```", "```js\n    })\n    ```", "```js\n    const route = useRoute();\n    ```", "```js\n    const tagName = computed(() => {\n    ```", "```js\n      return route.params.tagName;\n    ```", "```js\n    })\n    ```", "```js\n    const tagPosts = computed(() => {\n    ```", "```js\n      return props.posts.filter(p =>\n    ```", "```js\n        p.tags.includes(route.params.tagName));\n    ```", "```js\n    })\n    ```", "```js\n    <template>\n    ```", "```js\n      <h3># {{ tagName }}</h3>\n    ```", "```js\n      <PostLists :posts=\"tagPosts\" />\n    ```", "```js\n    </template>\n    ```", "```js\n      <router-link :to=\"`/tags/${tag}`\"\n    ```", "```js\n      v-for=\"tag in tags\" :key=\"tags\">\n    ```", "```js\n      #{{ tag }}\n    ```", "```js\n      </router-link>\n    ```", "```js\n    // rest of test...\n    ```", "```js\n    describe('TagPage', () => {\n    ```", "```js\n      it('Router renders tag page when clicking a tag in\n    ```", "```js\n      the post list item', async () => {\n    ```", "```js\n        router.push('/');\n    ```", "```js\n        await router.isReady();\n    ```", "```js\n        const wrapper = mount(App, {\n    ```", "```js\n          global: {\n    ```", "```js\n          plugins: [router]\n    ```", "```js\n          }\n    ```", "```js\n        })\n    ```", "```js\n        expect(wrapper.text()).toMatch(\"Vue.js for React\n    ```", "```js\n                                        developers\");\n    ```", "```js\n        expect(wrapper.text()).toMatch(\"Migrating an\n    ```", "```js\n                                        AngularJS app to\n    ```", "```js\n                                        Vue.js\");\n    ```", "```js\n        await wrapper.find('a[href=\"/tags/angularjs\"]')\n    ```", "```js\n          .trigger('click');\n    ```", "```js\n        await flushPromises();\n    ```", "```js\n        expect(wrapper.text()).toMatch(\"Migrating an\n    ```", "```js\n                                        AngularJS app to\n    ```", "```js\n                                        Vue.js\");\n    ```", "```js\n        expect(wrapper.text()).not.toMatch(\"Vue.js for\n    ```", "```js\n                                            React\n    ```", "```js\n                                            developers\");\n    ```", "```js\n      })\n    ```", "```js\n    })\n    ```", "```js\n    // rest of test...\n    ```", "```js\n      it('Router renders tag page when a URL is set',\n    ```", "```js\n      async () => {\n    ```", "```js\n        await router.replace('/');\n    ```", "```js\n        await router.push('/tags/angularjs');\n    ```", "```js\n        const wrapper = mount(App, {\n    ```", "```js\n          global: {\n    ```", "```js\n          plugins: [router]\n    ```", "```js\n          }\n    ```", "```js\n        })\n    ```", "```js\n        expect(wrapper.text()).toMatch(\"Migrating an\n    ```", "```js\n                                        AngularJS app to\n    ```", "```js\n                                        Vue.js\");\n    ```", "```js\n        expect(wrapper.text()).not.toMatch(\"Vue.js for\n    ```", "```js\n                                            React\n    ```", "```js\n                                            developers\");\n    ```", "```js\n      })\n    ```", "```js\nconst wrapper = shallowMount(PostListItem, {\n  propsData: {\n    title: \"Blog post title\",\n    description: \"Test\"\n  },\n  global: {\n    stubs:['router-link'],\n  }\n})\n```", "```js\ndescribe('App', () => {\n  it('App renders blog title correctly', () => {\n    const wrapper = shallowMount(App, {\n      global: {\n        stubs:['router-link','router-view'],\n      }\n    })\n    expect(wrapper.text()).toContain('The Vue.js Workshop\n                                      Blog')\n  })\n})\n```", "```js\nimport router from '@/router';\n```", "```js\nconst wrapper = mount(PostList, {\n  propsData: {\n    posts:  [\n    {\n      tags: ['react', 'vue']\n    },\n    {\n      tags: ['html', 'angularjs']\n    }\n    ]\n  },\n  global: {\n    plugins: [ router ]\n  }\n})\n```", "```js\n// rest of test...\ndescribe('PostListItem', () => {\n  it('PostListItem renders title and description\n  correctly', () => {\n    const wrapper = mount(PostListItem, {\n      propsData: {\n        title: \"Blog post title\",\n        description: \"Blog post description\"\n      },\n      global: {\n        plugins: [ router ]\n      }\n    })\n    expect(wrapper.text()).toMatch(\"Blog post title\")\n    expect(wrapper.text()).toMatch(\"Blog post description\")\n  })\n  it('PostListItem renders tags with a # prepended to\n  them', () => {\n    const wrapper = mount(PostListItem, {\n      propsData: {\n        tags: ['react', 'vue']\n      },\n      global: {\n        plugins: [ router ]\n      }\n    })\n    expect(wrapper.text()).toMatch('#react')\n    expect(wrapper.text()).toMatch('#vue')\n  })\n})\n```", "```js\n<script setup>\n</script>\n<template>\n  <div>\n  <strong>Subscribe to the newsletter</strong>\n  <button>Close</button>\n  </div>\n</template>\n<style scoped>\ndiv {\n  background-color: #c0c0c0;\n  size: 100%;\n  padding: 10px;\n}\ndiv button {\n  float: right;\n}\n</style>\n```", "```js\n<script setup>\nimport NewsletterBanner from './components/NewsletterBanner.vue';\n</script>\n<template>\n  <NewsletterBanner />\n  <header>\n  <h1>The Vue.js Workshop Blog</h1>\n  </header>\n  <router-view :posts=\"posts\"></router-view>\n</template>\n<!-- rest of template -->\n```", "```js\nimport { defineStore } from 'pinia'\nexport const userPreferencesStore = defineStore({\n  id: 'userPreferences',\n  state: () => ({\n  }),\n  getters: {\n  },\n  actions: {\n  }\n})\n```", "```js\nimport { createApp } from 'vue'\nimport { createPinia } from 'pinia'\nimport App from './App.vue'\nimport router from './router';\nconst app = createApp(App);\napp.use(router);\napp.use(createPinia());\napp.mount('#app');\n```", "```js\n  state: () => ({\n    dismissedSubscriberBanner: false\n  }),\n```", "```js\n  actions: {\n    dismissSubscriberBanner() {\n      this.dismissedSubscriberBanner = true;\n    }\n  }\n```", "```js\n<script setup>\nimport { computed } from 'vue';\nimport { userPreferencesStore } from '@/store.js';\nconst store = userPreferencesStore();\nconst showBanner = computed(() => {\n  return !store.dismissedSubscriberBanner;\n})\n</script>\n<template>\n  <div v-if=\"showBanner\">\n  <strong>Subscribe to the newsletter</strong>\n  <button @click=\"store.dismissSubscriberBanner()\">\n    Close</button>\n  </div>\n</template>\n<!-- rest of template -->\n```", "```js\nnpm install --save @pinia/testing\n```", "```js\nimport { createTestingPinia } from '@pinia/testing'\n```", "```js\nconst wrapper = mount(App, {\n  global: {\n    plugins: [router,\n      createTestingPinia({createSpy:vi.fn})]\n  }\n})\n```", "```js\nimport { describe, it, expect, vi } from 'vitest';\n```", "```js\nit('Newsletter Banner should not display if store is initialised with it dismissed', () => {\n  const wrapper = shallowMount(NewsletterBanner, {\n    global: {\n      plugins: [createTestingPinia({\n        initialState: {\n          userPreferences: {\n            dismissedSubscriberBanner: true\n          }\n        },\n        createSpy:vi.fn\n      })]\n    }\n  })\n  expect(wrapper.text()).not.toMatch(\"Subscribe to the\n                                      newsletter\");\n})\n```", "```js\n  it('Newsletter Banner should hide on \"close\" button\n  click', async () => {\n    const wrapper = shallowMount(NewsletterBanner, {\n      global: {\n        plugins: [createTestingPinia(\n          { createSpy:vi.fn })]\n      }\n    })\n    const store = userPreferencesStore();\n    await wrapper.find('button').trigger('click');\n    expect(store.dismissSubscriberBanner)\n      .toHaveBeenCalledTimes(1);\n  })\n```", "```js\n    <template>\n    ```", "```js\n      <div>\n    ```", "```js\n      <strong>Cookies Disclaimer</strong>\n    ```", "```js\n        We use cookies to improve our experience.\n    ```", "```js\n      <button>I agree</button>\n    ```", "```js\n      </div>\n    ```", "```js\n    </template>\n    ```", "```js\n    <style scoped>\n    ```", "```js\n    div {\n    ```", "```js\n      background-color: green;\n    ```", "```js\n      size: 100%;\n    ```", "```js\n      padding: 10px;\n    ```", "```js\n      margin-top: 50px;\n    ```", "```js\n    }\n    ```", "```js\n    div button {\n    ```", "```js\n      float: right;\n    ```", "```js\n    }\n    ```", "```js\n    </style>\n    ```", "```js\n    <script setup>\n    ```", "```js\n    import NewsletterBanner from './components/NewsletterBanner.vue';\n    ```", "```js\n    import CookieBanner from './components/CookieBanner.vue';\n    ```", "```js\n    </script>\n    ```", "```js\n    <template>\n    ```", "```js\n      <NewsletterBanner />\n    ```", "```js\n      <header>\n    ```", "```js\n      <h1>The Vue.js Workshop Blog</h1>\n    ```", "```js\n      </header>\n    ```", "```js\n      <router-view :posts=\"posts\"></router-view>\n    ```", "```js\n      <CookieBanner />\n    ```", "```js\n    </template>\n    ```", "```js\n    <!-- rest of template -->\n    ```", "```js\n    // rest of Pinia store...\n    ```", "```js\n    state: () => ({\n    ```", "```js\n      dismissedSubscriberBanner: false,\n    ```", "```js\n      acceptedCookie: false\n    ```", "```js\n    }),\n    ```", "```js\n    // rest of Pinia store...\n    ```", "```js\n    // rest of Pinia store...\n    ```", "```js\n    actions: {\n    ```", "```js\n      dismissSubscriberBanner() {\n    ```", "```js\n        this.dismissedSubscriberBanner = true;\n    ```", "```js\n      },\n    ```", "```js\n      acceptCookie() {\n    ```", "```js\n        this.acceptedCookie = true;\n    ```", "```js\n      }\n    ```", "```js\n    }\n    ```", "```js\n    // rest of Pinia store...\n    ```", "```js\n    <script setup>\n    ```", "```js\n    import { computed } from 'vue';\n    ```", "```js\n    import { userPreferencesStore } from '@/store.js';\n    ```", "```js\n    const store = userPreferencesStore();\n    ```", "```js\n    const acceptedCookie = computed(() => {\n    ```", "```js\n      return store.acceptedCookie;\n    ```", "```js\n    })\n    ```", "```js\n    </script>\n    ```", "```js\n    <template>\n    ```", "```js\n      <div v-if=\"!acceptedCookie\">\n    ```", "```js\n      <strong>Cookies Disclaimer</strong>\n    ```", "```js\n        We use cookies to improve our experience.\n    ```", "```js\n      <button @click=\"store.acceptCookie\">I agree</button>\n    ```", "```js\n      </div>\n    ```", "```js\n    </template>\n    ```", "```js\n    import { describe, it, expect, vi } from 'vitest'\n    ```", "```js\n    import { shallowMount } from '@vue/test-utils';\n    ```", "```js\n    import CookieBanner from '../src/components/CookieBanner.vue';\n    ```", "```js\n    import { createTestingPinia } from '@pinia/testing'\n    ```", "```js\n    import { userPreferencesStore } from '@/store.js';\n    ```", "```js\n    describe('CookieBanner', () => {\n    ```", "```js\n      it('Cookie Banner should display if store is\n    ```", "```js\n      initialized with it not dismissed', () => {\n    ```", "```js\n        const wrapper = shallowMount(CookieBanner, {\n    ```", "```js\n          global: {\n    ```", "```js\n            plugins:\n    ```", "```js\n              [createTestingPinia({createSpy:vi.fn})]\n    ```", "```js\n          }\n    ```", "```js\n        })\n    ```", "```js\n        expect(wrapper.text()).toMatch(\"Cookies\n    ```", "```js\n                                        Disclaimer\");\n    ```", "```js\n      })\n    ```", "```js\n    })\n    ```", "```js\n    it('Cookie Banner should not display if store is initialised with it dismissed', () => {\n    ```", "```js\n      const wrapper = shallowMount(CookieBanner, {\n    ```", "```js\n        global: {\n    ```", "```js\n          plugins: [createTestingPinia({\n    ```", "```js\n            initialState: {\n    ```", "```js\n              userPreferences: {\n    ```", "```js\n                acceptedCookie: true\n    ```", "```js\n              }\n    ```", "```js\n            },\n    ```", "```js\n            createSpy:vi.fn\n    ```", "```js\n          })]\n    ```", "```js\n        }\n    ```", "```js\n      })\n    ```", "```js\n      expect(wrapper.text()).not.toMatch(\"Cookies\n    ```", "```js\n                                          Disclaimer\");\n    ```", "```js\n    })\n    ```", "```js\n    it('Cookie Banner should hide on \"I agree\" button click', async () => {\n    ```", "```js\n      const wrapper = shallowMount(CookieBanner, {\n    ```", "```js\n        global: {\n    ```", "```js\n          plugins:\n    ```", "```js\n            [createTestingPinia({ createSpy:vi.fn })]\n    ```", "```js\n        }\n    ```", "```js\n      })\n    ```", "```js\n        const store = userPreferencesStore();\n    ```", "```js\n        await wrapper.find('button').trigger('click');\n    ```", "```js\n        expect(store.acceptCookie)\n    ```", "```js\n          .toHaveBeenCalledTimes(1);\n    ```", "```js\n    })\n    ```", "```js\n  it('PostList renders correctly', () => {\n    const wrapper = mount(PostList, {\n      propsData: {\n        posts: [\n               {\n                 title: \"Title 1\",\n                 description: \"Description 1\"\n               },\n               {\n                 title: \"Title 2\",\n                 description: \"Description 2\"\n               }\n        ]\n      },\n      global: {\n        plugins: [ router ]\n      }\n    })\n    expect(wrapper.text()).toMatchSnapshot();\n  });\n```", "```js\n// Vitest Snapshot v1\nexports[`PostList > PostList renders tags for each post 2 1`] = `\"Title 1Description 1Title 2Description 2\"`;\n```"]