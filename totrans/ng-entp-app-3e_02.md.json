["```js\n$ npm create @angular \n```", "```js\n    projects/stage5 \n    ```", "```js\n    projects/stage6 \n    ```", "```js\n    npx ng build stage6 \n    ```", "```js\n    $ npx ng g c citySearch \n    ```", "```js\n    **src/app/city-search/city-search.****component****.****ts**\n    import { FormsModule, ReactiveFormsModule } from '@angular/forms'\n    import { MatButtonModule } from '@angular/material/button'\n    import { MatFormFieldModule } from '@angular/material/form-field'\n    import { MatIconModule } from '@angular/material/icon'\n    import { MatInputModule } from '@angular/material/input'\n    ...\n    @Component({\n      ...\n      standalone: true,\n      imports: [\n        FormsModule,\n        ReactiveFormsModule,\n        MatFormFieldModule,\n        MatInputModule,\n      ],\n    })\n    export class CitySearchComponent\n    ... \n    ```", "```js\n    **src/app/city-search/city-search.component.html**\n    <form>\n      <mat-form-field appearance=\"outline\">\n        <mat-label>City Name or Postal Code</mat-label>\n        <mat-icon matPrefix>search</mat-icon>\n        <input matInput aria-label=\"City or Zip\" [formControl]=\"search\">\n      </mat-form-field>\n    </form> \n    ```", "```js\n    **src/app/city-search/city-search.****component****.****ts**\n    import { FormControl } from '@angular/forms'\n    ...\n    export class CitySearchComponent implements \n      OnInit { \n\n      search = new FormControl()\n      ... \n    ```", "```js\n    **src/app/app.****component****.****ts**\n    template: `\n      ...\n        </div>\n        **<div fxLayoutAlign=\"center\">**\n          **<app-city-search></app-city-search>**\n        **</div>**\n        <div fxLayout=\"row\">\n      ...\n    `,\n      standalone: true,\n      imports: [\n        FlexModule,\n        CitySearchComponent,\n        ...\n      ],\n    })\n    export class AppComponent { \n    ```", "```js\n    $ npm start \n    ```", "```js\n    **src/app/weather/weather.****service****.****ts**\n      getCurrentWeather(\n        search: string | number, \n        country?: string\n      ): Observable<ICurrentWeather> { \n        let uriParams = new HttpParams()\n        if (typeof search === 'string') { \n          uriParams = uriParams.set('q',\n            country ? `${search},${country}` : search\n          )\n        } else {\n          uriParams = uriParams.set('zip', 'search')\n        }\n\n        uriParams = uriParams.set('appid', environment.appId)\n        return this.httpClient\n          .get<ICurrentWeatherData>(\n            `${environment.baseUrl}api.openweathermap.org/data/2.5/\n              weather`,\n            { params: uriParams } \n        )\n        .pipe(map(\n          data => this.transformToICurrentWeather(data)))\n      } \n    ```", "```js\n    **src/app/weather/weather.****service****.****ts**\n      getCurrentWeather(\n        search: string | number, \n        country?: string\n      ): Observable<ICurrentWeather> { \n        let uriParams = new HttpParams()\n        if (typeof search === 'string') { \n          uriParams = uriParams.set('q',\n            country ? `${search},${country}` : search\n          )\n        } else {\n          uriParams = uriParams.set('zip', 'search')\n        }\n\n        **return****this****.****getCurrentWeatherHelper****(uriParams)**\n      }\n      private getCurrentWeatherHelper(uriParams: HttpParams):\n        Observable<ICurrentWeather> { \n        uriParams = uriParams.set('appid', environment.appId)\n        return this.httpClient\n          .get<ICurrentWeatherData>(\n            `${environment.baseUrl}api.openweathermap.org/data/2.5/\n              weather`,\n            { params: uriParams } \n          )\n          .pipe(map(\n            data => this.transformToICurrentWeather(data)))\n        } \n    ```", "```js\n    **src/app/weather/weather.****service****.****ts**\n    getCurrentWeatherByCoords(coords: Coordinates): Observable<ICurrentWeather> {\n      const uriParams = new HttpParams()\n          .set('lat', coords.latitude.toString())\n          .set('lon', coords.longitude.toString())\n      return this.getCurrentWeatherHelper(uriParams)\n    } \n    ```", "```js\n    **src/app/weather/weather.****service****.****ts**\n    export interface IWeatherService {\n      getCurrentWeather(\n        search: string | number, country?: string\n      ): Observable<ICurrentWeather>\n      getCurrentWeatherByCoords(coords: Coordinates): Observable<ICurrentWeather>\n    } \n    ```", "```js\n    **src/app/city-search/city-search.****component****.****ts**\n    import { WeatherService } from '../weather/weather.service'\n    ...\n    export class CitySearchComponent implements OnInit { \n      search = new FormControl()\n\n      constructor(**private****weatherService****:** **WeatherService**) {}\n      ...\n      ngOnInit(): void { \n        **this****.****search****.****valueChanges****.****subscribe****()**\n      } \n    ```", "```js\n    **src/app/city-search/city-search.****component****.****ts**\n    this.search.valueChanges\n      .subscribe(\n        (searchValue: string) => { \n        if (searchValue) {\n          const userInput = searchValue.split(',').map(s => s.trim())\n          this.weatherService.getCurrentWeather(\n            userInput[0],\n            userInput.length > 1 ? userInput[1] : undefined\n          ).subscribe(data => (console.log(data)))\n      }\n    }) \n    ```", "```js\n    **src/app/city-search/city-search.component.html**\n    ...\n      <mat-form-field appearance=\"outline\">\n        ...\n        **<****mat-hint****>****Specify country code like 'Paris, US'****</****mat-hint****>**\n      </mat-form-field>\n    ... \n    ```", "```js\n**src/app/city-search/city-search.****component****.****ts**\nimport { debounceTime } from 'rxjs/operators'\n  this.search.valueChanges\n    .pipe(debounceTime(1000))\n    .subscribe(...) \n```", "```js\n**example**\nnew FormControl('Bethesda', { updateOn: 'submit' }) \n```", "```js\n    **src/app/city-search/city-search.****component****.****ts**\n    import { FormControl, Validators } from '@angular/forms' \n    ```", "```js\n    **src/app/city-search/city-search.****component****.****ts**\n    search = new FormControl('', [Validators.minLength(2)]) \n    ```", "```js\n    **src/app/city-search/city-search.component.html**\n    ...\n    <form **style****=****\"margin-bottom: 32px\"**>\n      <mat-form-field appearance=\"outline\">\n        ...\n        @if (search.invalid) {\n          **<****mat-error****>**\n            **Type more than one character to search**\n          **</****mat-error****>**\n        }\n      </mat-form-field>\n    </form>\n    ... \n    ```", "```js\n    **example**\n    @if (search.invalid) {\n      <mat-error>\n        {{getErrorMessage()}}\n      </mat-error>\n    }\n    getErrorMessage() {\n      return this.search.hasError('minLength') ?\n        'Type more than one character to search' : '';\n    } \n    ```", "```js\n    **src/app/city-search/city-search.****component****.****ts**\n    this.search.valueChanges\n      .pipe(debounceTime(1000))\n      .subscribe((search Value: string) => {\n        if (**!****this****.****search****.****invalid**) {\n          ... \n    ```", "```js\n**projects/stage6/src/app/city-search-tpldriven/city-search-tpldriven.component.html**\n  ...\n    <input matInput aria-label=\"City or Zip\"\n      [(ngModel)]=\"model.search\"\n      (ngModelChange)=\"doSearch($event)\" minlength=\"2\" \n      name=\"search\" #search=\"ngModel\">\n  ...\n    @if(search.invalid) {\n      <mat-error>\n        Type more than one character to search\n      </mat-error>\n    }\n  ... \n```", "```js\n**projects/stage6/src/app/city-search-tpldriven/city-search-tpldriven.****component****.****ts**\nimport { WeatherService } from '../weather/weather.service'\nexport class CitySearchTpldrivenComponent { \n  model = {\n    search: '',\n  }\n  constructor(private weatherService: WeatherService) {}\n\n  doSearch(searchValue) {\n    const userInput = searchValue.split(',').map(s => s.trim())\n    this.weatherService\n      .getCurrentWeather(userInput[0], userInput.length > 1 ?\n        userInput[1] : undefined\n      )\n      .subscribe(data => console.log(data))\n  }\n} \n```", "```js\n    **src/app/city-search/city-search.****component****.****ts**\n    import { Component, OnInit, Output, EventEmitter } from '@angular/core'\n    export class CitySearchComponent implements OnInit {\n      @Output() searchEvent = new EventEmitter<string>()\n      ...\n      this.search.valueChanges\n        .pipe(debounceTime(1000))\n        .subscribe((search Value: string) => {\n          if (!this.search.invalid) {\n            this.searchEvent.emit(searchValue)\n          }\n        })\n      ...\n    } \n    ```", "```js\n    **src/app/app.****component****.****ts**\n    import { WeatherService } from './weather/weather.service'\n    import { ICurrentWeather } from './interfaces'\n    ...\n    template: `\n      ...\n        <app-city-search (searchEvent)=\"doSearch($event)\">\n        </app-city-search>\n      ...\n    `,\n    export class AppComponent { \n      currentWeather: ICurrentWeather \n      constructor(private weatherService: WeatherService) { }\n      doSearch(searchValue) {\n        const userInput = searchValue.split(',').map(\n          s => s.trim()) \n        this.weatherService\n          .getCurrentWeather(\n            userInput[0], userInput.length > 1 ?\n            userInput[1] : undefined\n        )\n        .subscribe(data => this.currentWeather = data)\n      }\n    } \n    ```", "```js\n**src/app/current-weather/current-weather.****component****.****ts**\nimport { Component, **Input** } from '@angular/core'\n...\nexport class CurrentWeatherComponent { \n  **@Input****()** current: ICurrentWeather\n  ...\n} \n```", "```js\n**src/app/app.****component****.****ts**\ntemplate: `\n  ...\n  <app-current-weather **[current]=\"currentWeather\"**>\n  </app-current-weather>\n  ...\n` \n```", "```js\n**example**\n@for (dailyForecast of forecastArray; track dailyForecast) {\n  <app-mini-forecast [forecast]=\"dailyForecast\">\n  </app-mini-forecast>\n} \n```", "```js\n**example**\nimport { Subject } from 'rxjs'\n...\nexport class WeatherService implements IWeatherService { \n  currentWeather$: Subject<ICurrentWeather>\n  ...\n} \n```", "```js\n**example**\ncurrentWeather$.subscribe(data => (this.current = data))\n  currentWeather$.next(newData) \n```", "```js\n    **src/app/weather/weather.****service****.****ts**\n    import { BehaviorSubject, Observable } from 'rxjs'\n    export interface IWeatherService {\n      **readonly****currentWeather$****:** **BehaviorSubject****<****ICurrentWeather****>**\n      ...\n    } \n    ```", "```js\n    **src/app/weather/weather.****service****.****ts**\n    ...\n    export class WeatherService implements IWeatherService {\n      readonly currentWeather$ =\n        new BehaviorSubject<ICurrentWeather>({ \n        city: '--',\n        country: '--',\n        date: Date.now(),\n        image: '',\n        temperature: 0,\n        description: '',\n      })\n    ...\n    } \n    ```", "```js\n    **src/app/weather/weather.****service****.****ts**\n    ...\n    updateCurrentWeather(search: string | number, \n      country?: string): void { \n      this.getCurrentWeather(search, country)\n        .subscribe(weather => \n          this.currentWeather$.next(weather)\n        )\n    }\n    ... \n    ```", "```js\n    **src/app/weather/weather.****service****.****ts**\n    ...\n    export interface IWeatherService {\n      readonly currentWeather$: BehaviorSubject<ICurrentWeather> \n      getCurrentWeather(city: string | number, country?: string):\n        Observable<ICurrentWeather>\n      getCurrentWeatherByCoords(coords: Coordinates):\n        Observable<ICurrentWeather>\n        **updateCurrentWeather****(**\n          **search****:** **string** **|** **number****, country?:** **string **    **):** **void**\n    } \n    ```", "```js\n    **src/app/current-weather/current-weather.****component****.****ts**\n    ...\n      ngOnInit() { \n        this.weatherService.currentWeather$\n          .subscribe(data => (this.current = data))\n      }\n    ... \n    ```", "```js\n    **src/app/city-search/city-search.****component****.****ts**\n    ...\n      this.weatherService.**updateCurrentWeather**( \n        userInput[0],\n        userInput.length > 1 ? userInput[1] : undefined\n      )\n    ... \n    ```", "```js\n@Injectable({\n  **providedIn****: 'root'**\n})\nexport class WeatherService implements IWeatherService\n... \n```", "```js\n@Injectable()\nexport class WeatherService implements IWeatherService\n... \n```", "```js\n@Component({\n  selector: 'app-current-weather',\n  standalone: true,\n  **providers****: [****WeatherService****]**\n})\nexport class CurrentWeatherComponent {\n... \n```", "```js\n**example**\nimport { ..., OnDestroy } from '@angular/core'\nimport { ..., Subscription } from 'rxjs'\nexport class CurrentWeatherComponent implements OnInit, OnDestroy { \n  currentWeatherSubscription: Subscription\n  ...\n  ngOnInit() { \n    this.currentWeatherSubscription =\n      this.weatherService.currentWeather$\n        .subscribe((data) => (this.current = data))\n  }\n  ngOnDestroy(): void {\n    this.currentWeatherSubscription.unsubscribe()\n  }\n... \n```", "```js\n**src/app/weather/weather.****service****.****ts**\nimport { map, switchMap, first } from 'rxjs/operators' \nexport class WeatherService implements IWeatherService{\n  ...\n    updateCurrentWeather(searchText: string, country?: string): void {\n      this.getCurrentWeather(searchText, country)\n        .pipe(first())\n        .subscribe((weather) => this.currentWeather$.next(weather))\n    }  \n  ... \n```", "```js\n**src/app/current-weather/current-weather.****component****.****ts**\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop'\nexport class CurrentWeatherComponent implements OnInit {\n  private destroyRef = inject(DestroyRef);\n  ...\n  ngOnInit(): void {\n    this.weatherService\n      .getCurrentWeather('Bethesda', 'US')\n      .pipe(takeUntilDestroyed(this.destroyRef))\n      .subscribe((data) => (this.current = data))\n  }\n  ... \n```", "```js\n    current$: Observable<ICurrentWeather> \n    ```", "```js\n    **src/app/current-weather/current-weather.****component****.****ts**\n    import { Observable } from 'rxjs'\n    export class CurrentWeatherComponent {\n      current$: Observable<ICurrentWeather>\n      constructor(private weatherService: WeatherService) {\n        this.current$ = this.weatherService.currentWeather$\n      }\n      ... \n    ```", "```js\n    **src/app/current-weather/current-weather.****component****.****html**\n    @if (current$ | async; as current) {\n      <div> ... </div>\n    } \n    ```", "```js\n`example`\n@if (current$ | async; as current) {\n  <div>{{current}}</div>\n} @else {\n  <div>Loading…</div>\n} \n```", "```js\n**src/app/city-search/city-search.****component****.****ts**\nimport { debounceTime, **filter, tap** } from 'rxjs/operators'\nimport { **takeUntilDestroyed** } from '@angular/core/rxjs-interop'\nexport class CitySearchComponent {\n  search = new FormControl('', \n    [**Validators****.****required**, Validators.minLength(2)])\n  constructor(private weatherService: WeatherService) { \n    **this****.****search****.****valueChanges**\n      **.****pipe****(**\n        **takeUntilDestroyed****(),**\n        **filter****(****() =>****this****.****search****.****valid****),**\n        **debounceTime****(****1000****),**\n        **tap****(****(****searchValue****:** **string****) =>****this****.****doSearch****(searchValue))**\n        **takeUntilDestroyed()**\n      **).****subscribe****()**\n}\ndoSearch(searchValue: string) {\n  const userInput = searchValue.split(',').map(s => s.trim())\n  const searchText = userInput[0]\n  const country = userInput.length > 1 ? userInput[1] : undefined\n  this.weatherService.updateCurrentWeather(searchText, country)\n}\n} \n```", "```js\ninterface IPostalCodeService {\n  resolvePostalCode(postalCode: string): Observable<IPostalCode>\n} \n```", "```js\n**src/app/postal-code/postal-code.****service****.****ts**\nimport { HttpClient, HttpParams } from '@angular/common/http'\nimport { Injectable } from '@angular/core'\nimport { Observable } from 'rxjs'\nimport { defaultIfEmpty, flatMap } from 'rxjs/operators'\nimport { environment } from '../../environments/environment'\nexport interface IPostalCode {\n  countryCode: string\n  postalCode: string\n  placeName: string\n  lng: number\n  lat: number\n}\nexport interface IPostalCodeData { \n  postalCodes: [IPostalCode]\n}\nexport interface IPostalCodeService {\n  resolvePostalCode(postalCode: string): Observable<IPostalCode>\n}\n@Injectable({\n  providedIn: 'root',\n}) \nexport class PostalCodeService implements IPostalCodeService {\n  constructor(private httpClient: HttpClient) {}\n  resolvePostalCode(postalCode: string): Observable<IPostalCode> {\n    const uriParams = new HttpParams()\n      .set('maxRows', '1')\n      .set('username', environment.username)\n      .set('postalcode', postalCode)\n    return this.httpClient\n      .get<IPostalCodeData>(\n        `${environment.baseUrl}${environment.geonamesApi}.geonames.org/\n          postalCodeSearchJSON`,\n      { params: uriParams }\n    )\n    .pipe(\n      flatMap(data => data.postalCodes), \n      defaultIfEmpty(null)\n    )\n  }\n} \n```", "```js\n    **src/app/weather/weather.****service****.****ts**\n    …\n    export interface IWeatherService {\n    ...\n      getCurrentWeather(search: **string**, country?: string): \n        Observable<ICurrentWeather>\n      updateCurrentWeather(search: **string**, country?: string)\n    } \n    ```", "```js\n    **src/app/weather/weather.****service****.****ts**\n    import {\n      PostalCodeService\n    } from '../postal-code/postal-code.service'\n    ...\n    constructor(\n      private httpClient: HttpClient,\n      private postalCodeService: PostalCodeService\n    ) {} \n    ```", "```js\n    **src/app/weather/weather.****service****.****ts**\n    import { map, **switchMap** } from 'rxjs/operators'\n    ... \n    getCurrentWeather(\n      searchText: string,\n      country?: string\n    ): Observable<ICurrentWeather> {\n      return this.postalCodeService.\n        resolvePostalCode(searchText)\n        .pipe(\n          switchMap((postalCode) => {\n            if (postalCode) {\n              return this.getCurrentWeatherByCoords({\n                latitude: postalCode.lat,\n                longitude: postalCode.lng,\n              } as Coordinates)\n            } else {\n              const uriParams = new HttpParams().set(\n                'q',\n                country ? `${searchText},${country}` : searchText\n              )\n              return this.getCurrentWeatherHelper(uriParams)\n            }\n         })\n       )\n    } \n    ```", "```js\n return this.getCurrentWeatherByCoords({\n   latitude: postalCode.lat,\n   longitude: postalCode.lng,\n } as Coordinates) \n```", "```js\n    const mySignal = signal('Hello')\n    console.log(mySignal()) // outputs: Hello (only once)\n    mySignal.set('Goodbye') // updates the value. Update and mutate methods have subtle differences in setting a new value.\n    // To display the new value, you must call console.log again. \n    ```", "```js\n    const someSignal = computed(() => `${mySignal()}, World`)\n    console.log(someSignal()) // outputs: Hello, World. If needed, it lazily updates when mySignal is set to a new value. \n    ```", "```js\n    effect(() => {\n      console.log(`A robot says: ${someSignal}`) \n    })  \n    // console.log will be called any time mySignal changes. \n    ```", "```js\n**src/app/app.****component****.****ts**\nconst darkClassName = 'dark-theme'\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [...],\n  template: `\n    <mat-toolbar color=\"primary\">\n      <span data-testid=\"title\">LocalCast Weather</span>\n      <div fxFlex></div>\n      <mat-icon>brightness_5</mat-icon>\n      <mat-slide-toggle\n        color=\"warn\"\n        data-testid=\"darkmode-toggle\"\n        [checked]=\"toggleState()\"\n        (change)=\"toggleState.set($event.checked)\"></mat-slide-toggle>\n      <mat-icon>bedtime</mat-icon>\n    </mat-toolbar>\n    <div fxLayoutAlign=\"center\">\n      <div class=\"mat-caption vertical-margin\">\n        Your city, your forecast, right now!\n      </div>\n    </div>\n    <div fxLayoutAlign=\"center\">\n      <app-city-search></app-city-search>\n    </div>\n    <div fxLayout=\"row\">\n      <div fxFlex></div>\n      <mat-card appearance=\"outlined\" fxFlex=\"300px\">\n        <mat-card-header>\n          <mat-card-title>\n            <div class=\"mat-headline-5\">Current Weather</div>\n          </mat-card-title>\n        </mat-card-header>\n        <mat-card-content>\n          <app-current-weather></app-current-weather>\n        </mat-card-content>\n      </mat-card>\n      <div fxFlex></div>\n    </div>\n  `,\n})\nexport class AppComponent {\n  readonly toggleState = signal(localStorage.getItem(darkClassName) === 'true')\n  constructor() {\n    effect(() => {\n      localStorage.setItem(darkClassName, this.toggleState().toString())\n      document.documentElement.classList.toggle(\n        darkClassName, this.toggleState()\n      )\n    })\n  }\n} \n```", "```js\ndocument.documentElement.classList.toggle(darkClassName, this. toggleState()) \n```", "```js\n    **src/app/weather/weather.****service****.****ts**\n    import { signal } from '@angular/core'\n    export class WeatherService implements IWeatherService{\n      ...\n      readonly currentWeatherSignal = signal(defaultWeather)  \n      ... \n    ```", "```js\n    **src/app/weather/weather.****service****.****ts**\n    **import** **{ ..., firstValueFrom }** **from****'****rxjs'**\n      getCurrentWeatherAsPromise(\n        searchText: string,\n        country?: string\n      ): Promise<ICurrentWeather> {\n        return firstValueFrom(\n          this.getCurrentWeather(searchText, country)\n        )\n      }\n      async updateCurrentWeatherSignal(searchText: string,\n        country?: string): Promise<void> {\n        this.currentWeatherSignal.set(\n          await this.getCurrentWeatherAsPromise(\n            searchText, country\n          )\n        )\n      } \n    ```", "```js\n    **src/app/current-weather/current-weather.****component****.****ts**\n    export class CurrentWeatherComponent {\n      readonly currentSignal: WritableSignal<ICurrentWeather>\n      constructor(private weatherService: WeatherService) {\n        this.currentSignal = this.weatherService.currentWeatherSignal\n    ... \n    ```", "```js\n    **src/app/current-weather/current-weather.****component****.****html**\n    @if (currentSignal(); as current) {\n      ...\n    } \n    ```", "```js\n    **src/app/city-search/city-search.****component****.****ts**\n    export class CitySearchComponent {\n      ...\n      this.weatherService.updateCurrentWeatherSignal(\n        searchText, country\n      )\n      ... \n    ```"]