- en: '1'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Starting Projects the Right Way
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Angular** is a framework that has the motto “*batteries included*” as a development
    philosophy. This means that practically all the resources you need for your frontend
    application needs are already available as soon as you create a new project.'
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will understand why choose Angular for your web application,
    what its main characteristics and design are, and why companies, especially the
    biggest ones, choose Angular as the main framework for developing single-page
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: You will explore the technologies that make up the framework and thus take greater
    advantage of possible alternatives if you need them for a specific case. You’ll
    also set up your workspace with the best tools to help you and your team’s productivity.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’re going to cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Why choose Angular?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What technologies are present in the ecosystem?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring your development environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Starting an Angular project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Angular **Command-Line Interface** (**CLI**) for your productivity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you will have arguments for using Angular in your
    project and be more productive in your development workspace.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To follow the instructions in this chapter, you’ll need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Visual Studio Code** (**VS** **Code**) ([https://code.visualstudio.com/Download](https://code.visualstudio.com/Download))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Node.js 18 or higher ([https://nodejs.org/en/download/](https://nodejs.org/en/download/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code files for this chapter are available at .
  prefs: []
  type: TYPE_NORMAL
- en: Why choose Angular?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The choice of technology to be used in a given project is critical to its success.
    You, as a project developer or architect, must help your team in this mission
    by choosing the best tool for the job.
  prefs: []
  type: TYPE_NORMAL
- en: The Angular framework is one of the most used tools for building a single-page
    application, along with React and Vue. When choosing the right tool for the job,
    you need to answer *why*.
  prefs: []
  type: TYPE_NORMAL
- en: The following are some arguments for choosing Angular.
  prefs: []
  type: TYPE_NORMAL
- en: Batteries included
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Angular is an opinionated framework, which means that the Angular development
    team has already made several choices of tools and solutions for every challenge
    that a web application can have. This way, you and your team don’t have to research
    which route engine or state management library you should use; it’s all included
    and configured for your project.
  prefs: []
  type: TYPE_NORMAL
- en: This feature also simplifies the onboarding of new developers in your team.
    Following the guidelines proposed by the documentation and using the best practices,
    Angular projects usually have the same structure and method of development. Knowing
    Angular you can quickly locate yourself in any ongoing project.
  prefs: []
  type: TYPE_NORMAL
- en: Google support
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Angular was created and maintained by the Angular team at Google. Although excellent
    frameworks such as Vue.js and Svelte are maintained only by their communities,
    having such a big tech company supporting the framework brings security to the
    choice of technology, especially for large companies.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, Angular is used in more than 300 internal applications and Google
    products, which means stability and quality because, before each new version of
    the framework is released, it is validated in all these applications.
  prefs: []
  type: TYPE_NORMAL
- en: The Angular team has strived since version 13 to increase transparency within
    the community by releasing a roadmap ([https://angular.io/guide/roadmap](https://angular.io/guide/roadmap))
    detailing all the improvements in progress and what to expect for the future of
    the framework, giving you peace of mind that it will be supported for years to
    come.
  prefs: []
  type: TYPE_NORMAL
- en: Community
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Technology is only as alive as the community that supports it, and Angular has
    a huge one. Meetups, podcasts, events, articles, and videos – the Angular community
    has many resources to help developers.
  prefs: []
  type: TYPE_NORMAL
- en: The people who make up this community also have the important contribution of
    giving feedback, creating and correcting issues in Angular. As it is an open source
    project, everyone is invited to evaluate and contribute to the code.
  prefs: []
  type: TYPE_NORMAL
- en: The Angular team also asks the community for help with major framework decisions
    through **Requests for** **Comment** (**RFCs**).
  prefs: []
  type: TYPE_NORMAL
- en: In addition, the community creates many libraries that expand the possibilities
    of the framework, such as NgRx ([https://ngrx.io/](https://ngrx.io/)) for advanced
    state management and Transloco ([https://ngneat.github.io/transloco/](https://ngneat.github.io/transloco/))
    to support internationalization, among others.
  prefs: []
  type: TYPE_NORMAL
- en: Tooling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the differentiating factors of Angular compared to its competitors is
    the focus from the beginning on tooling and developer experience. The Angular
    CLI tool is a powerful productivity tool that we will explore in this chapter,
    which is used far beyond the simple creation and setup of a project.
  prefs: []
  type: TYPE_NORMAL
- en: From a testing point of view, Angular is already equipped and configured with
    Karma as a test runner and Jasmine as a configuration tool. Angular’s tooling
    already configures the project build using webpack and already has a dev server.
  prefs: []
  type: TYPE_NORMAL
- en: The tool is also extensible, allowing the community to create routines for configuring
    and updating their libraries.
  prefs: []
  type: TYPE_NORMAL
- en: With these arguments, you will be able to base your choice of Angular on your
    project; let’s see now which technologies make up the framework’s ecosystem.
  prefs: []
  type: TYPE_NORMAL
- en: What technologies are present in the ecosystem?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Angular team, when creating the solution for the growing complexity of web
    application development, decided to unite the best tools and libraries in an opinionated
    package with the maximum number of configurations made by default.
  prefs: []
  type: TYPE_NORMAL
- en: We then have the following libraries that make up the core of Angular.
  prefs: []
  type: TYPE_NORMAL
- en: TypeScript
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**TypeScript** is a superset of the JavaScript language that adds type checking
    and other features to the language, ensuring a better developer experience and
    security for web development.'
  prefs: []
  type: TYPE_NORMAL
- en: It has been present in Angular since its first version and is the cornerstone
    of the framework that enables several features such as dependency injection, typed
    forms and Angular’s tooling.
  prefs: []
  type: TYPE_NORMAL
- en: TypeScript is currently the preferred tool for backend development in Node.js
    and is encouraged by communities of other frameworks such as React and Vue.js.
  prefs: []
  type: TYPE_NORMAL
- en: RXJS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: RXJS is a library that implements the reactive paradigm ([https://www.reactivemanifesto.org/](https://www.reactivemanifesto.org/))
    in the JavaScript language.
  prefs: []
  type: TYPE_NORMAL
- en: Since the first version of Angular, reactivity was a core theme that the framework
    wanted to achieve and so it uses the **RXJS** library to help with it.
  prefs: []
  type: TYPE_NORMAL
- en: HTTP requests, routes, forms, and other Angular elements use the concepts of
    observables and their operators to provide Angular developers with the tools to
    create more fluid and dynamic applications with less boilerplate code.
  prefs: []
  type: TYPE_NORMAL
- en: RXJS also provides mechanisms for state management in a frontend application
    without the need to use more complex patterns such as Redux.
  prefs: []
  type: TYPE_NORMAL
- en: Karma and Jasmine
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Quality should be the top priority in any application and this is especially
    important in frontend applications as for the user, it is *the* application.
  prefs: []
  type: TYPE_NORMAL
- en: One of the ways to attest to quality is through testing, and with that in mind,
    Angular already comes by default with the tool duo of **Jasmine** and **Karma**.
  prefs: []
  type: TYPE_NORMAL
- en: Jasmine is a framework for unit-testing JavaScript and TypeScript applications
    with several functions for assertion and test assembly.
  prefs: []
  type: TYPE_NORMAL
- en: Karma is the test runner, that is, the environment where the unit test setup
    is executed with the help of Jasmine. This environment, configured in its configuration
    file, runs in browsers, making the test more realistic in comparison to customers’
    daily lives.
  prefs: []
  type: TYPE_NORMAL
- en: Many people in the community switch these tools for the Jest framework due to
    performance in the execution of the tests, which is totally fine and even facilitated
    by the Angular CLI; however, it should be noted that this tool does not run in
    a browser, which really improves the performance of the test execution but may
    hide some particularity that only testing in a browser would provide.
  prefs: []
  type: TYPE_NORMAL
- en: Webpack
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After the development of an application, it is necessary to create the bundle
    to send it to production, and Webpack is the tool that the Angular team chose
    for this task.
  prefs: []
  type: TYPE_NORMAL
- en: Webpack is a very powerful and versatile bundler, and it is thanks to it that
    the framework manages to make some interesting optimizations such as tree shaking
    and lazy loading of bundles.
  prefs: []
  type: TYPE_NORMAL
- en: However, Webpack is complex in its configuration, and with that in mind, the
    Angular team has already set up and created some abstractions for fine-tuning
    the tool, such as the `angular.json` file.
  prefs: []
  type: TYPE_NORMAL
- en: We understand what pieces make up the framework and how they relate to delivering
    rich and fluid interfaces. We will now set up our development environment.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring your development environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A well-organized environment with the right tools is the first step toward excellence
    and productivity; now, let’s set this environment up in your workspace.
  prefs: []
  type: TYPE_NORMAL
- en: After installing Node.js following the instructions in the *Technical requirements*
    section, the following tools and their plugins will help you in your workflow.
  prefs: []
  type: TYPE_NORMAL
- en: VS Code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**VS Code** ([https://code.visualstudio.com/](https://code.visualstudio.com/))
    is currently the default tool for most developers, especially for frontend projects.'
  prefs: []
  type: TYPE_NORMAL
- en: There are other very good ones such as WebStorm ([https://www.jetbrains.com/webstorm](https://www.jetbrains.com/webstorm)),
    but VS Code, with its plugins especially for Angular projects, facilitates great
    productivity and ergonomics.
  prefs: []
  type: TYPE_NORMAL
- en: To install the plugins listed here, in the code editor, click on **Extensions**
    or use the shortcut *Ctrl* + *Shift* + *X* (Windows) or *Cmd* + *Shift* + *X*
    (macOS).
  prefs: []
  type: TYPE_NORMAL
- en: The following are the VS Code plugins recommended for developing Angular applications.
  prefs: []
  type: TYPE_NORMAL
- en: Git Extension Pack
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Git Extension Pack** ([https://marketplace.visualstudio.com/items?itemName=donjayamanne.git-extension-pack](https://marketplace.visualstudio.com/items?itemName=donjayamanne.git-extension-pack))
    is not specifically for developing Angular applications but it is useful for any
    kind of work.'
  prefs: []
  type: TYPE_NORMAL
- en: Git is the default tool for version control and VS Code has native support for
    it. This set of plugins improves this support even further, adding the ability
    to read comments and changes made in previous commits in the editor, support for
    multiple projects, and a better view of your repository history and logs.
  prefs: []
  type: TYPE_NORMAL
- en: Angular Language Service
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **Angular Language Service** ([https://marketplace.visualstudio.com/items?itemName=Angular.ng-template](https://marketplace.visualstudio.com/items?itemName=Angular.ng-template))
    extension is maintained by the Angular team and adds support for most of the framework’s
    functionality right from the code editor.
  prefs: []
  type: TYPE_NORMAL
- en: 'By adding this extension to your editor, it will have the following features:'
  prefs: []
  type: TYPE_NORMAL
- en: Autocomplete in the HTML template file, allowing you to use component methods
    without having to consult the TypeScript file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking for possible compilation errors in HTML template files and TypeScript
    files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Quick navigation between HTML and TypeScript templates, allowing you to consult
    the definition of methods and objects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This extension is also available for other IDEs such as WebStorm and Eclipse.
  prefs: []
  type: TYPE_NORMAL
- en: Prettier
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Prettier** ([https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode](https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode))
    is a JavaScript tool that solves the code formatting problem. It is opinionated
    on formatting settings although some customization is possible.'
  prefs: []
  type: TYPE_NORMAL
- en: In addition to TypeScript, Prettier formats HTML, CSS, JSON, and JavaScript
    files, making this extension useful also for backend development using Node.js.
  prefs: []
  type: TYPE_NORMAL
- en: To standardize formatting across your entire team, you can install Prettier
    as a package for your project and run it on the project’s CI/CD track, which we’ll
    see in [*Chapter 12*](B19562_12.xhtml#_idTextAnchor311), *Packaging Everything
    – Best Practices* *for Deployment*.
  prefs: []
  type: TYPE_NORMAL
- en: ESLint
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When creating an application, the use of a linter is highly recommended to ensure
    good language practices and avoid errors from the beginning of development.
  prefs: []
  type: TYPE_NORMAL
- en: In the past, the default tool for linting TypeScript projects was **TSLint**,
    but the project has been absorbed by **ESLint** (https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint),
    which allows you to verify JavaScript and TypeScript projects.
  prefs: []
  type: TYPE_NORMAL
- en: With this extension, verification occurs quickly while you type the code of
    your project. ESLint can be installed as a package in your Angular project and
    thus performs this validation on the CI/CD conveyor of your project, which we
    will see in [*Chapter 12*](B19562_12.xhtml#_idTextAnchor311), *Packaging Everything
    – Best Practices* *for Deployment*.
  prefs: []
  type: TYPE_NORMAL
- en: EditorConfig
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **EditorConfig** ([https://marketplace.visualstudio.com/items?itemName=EditorConfig.EditorConfig](https://marketplace.visualstudio.com/items?itemName=EditorConfig.EditorConfig))
    plugin has the function of creating a default configuration file for not only
    VS Code but also any IDE that supports this format.
  prefs: []
  type: TYPE_NORMAL
- en: This plugin is useful for standardizing things for your project and your team
    – for example, the number of spaces that each *Tab* key represents, or whether
    your project will use single quotes or double quotes to represent strings.
  prefs: []
  type: TYPE_NORMAL
- en: To use it, just create or have a file named `.editorconfig` at the root of your
    project and VS Code will respect the settings described in the file.
  prefs: []
  type: TYPE_NORMAL
- en: VS Code settings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: VS Code, in addition to extensions, has several native settings that can help
    in your day-to-day work. By accessing the **File** menu, we can activate the automatic
    saving flag so you don’t have to worry about pressing *Ctrl* + *S* all the time
    (although this habit is already engraved in stone in our brains...).
  prefs: []
  type: TYPE_NORMAL
- en: Another interesting setting is **Zen** mode, where all windows and menus are
    hidden so you can just focus on your code. To activate it, go to **View** | **Appearance**
    | **Zen Mode**, or use the keyboard shortcut *Ctrl* + *K* + *Z* for Windows/Linux
    systems and *Cmd* + *K* + *Z* for macOS.
  prefs: []
  type: TYPE_NORMAL
- en: To improve the readability of your code during editing, an interesting setting
    is **Bracket coloring**, which will give each parenthesis and bracket in your
    code a different color.
  prefs: []
  type: TYPE_NORMAL
- en: To enable this setting, open the `configuration` file using the shortcut *Ctrl*
    + *Shift* + *P* for Windows/Linux or *Cmd* + *Shift* + *P* for macOS and type
    `Open User` `Settings (JSON)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the file, add the following elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: VS Code also has the **Inlay Hints** feature, which shows details of parameter
    types and return methods, as well as other useful information on the line you
    are reading in the code.
  prefs: []
  type: TYPE_NORMAL
- en: To configure it in the **Settings** menu, look for **Inlay Hints** and activate
    it if it is not already configured. For the development of your Angular application,
    you can also perform specific configurations by selecting **TypeScript**.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is also possible to turn on this functionality by directly configuring the
    `settings.json` file with the following elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Fira Code font and ligatures
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An important detail that not every developer pays attention to is the type of
    font they use in their code editor. A confusing font can make it difficult to
    read code and tire your eyes.
  prefs: []
  type: TYPE_NORMAL
- en: The ideal option is to use monospaced fonts, that is, fonts where the characters
    occupy the same horizontal space.
  prefs: []
  type: TYPE_NORMAL
- en: 'A very popular font is `==`, `>=`, and `=>`, as shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.1 – Example of symbols with font ligatures](img/B19562_01_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.1 – Example of symbols with font ligatures
  prefs: []
  type: TYPE_NORMAL
- en: 'After installing the font on your operating system, to enable ligatures in
    the font in VS Code, access the `configuration` file as in the previous section
    and add the following elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Standardizing the extensions and settings in the project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the *Why choose Angular?* section, we learned that one of the advantages
    of choosing this framework for your project is the standardization it provides
    to development and the team.
  prefs: []
  type: TYPE_NORMAL
- en: You can also standardize your VS Code settings and record them in your Git repository
    so that not only you but also our team can have that leap in productivity.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, in your repository, create a folder called `.vscode`, and inside
    that folder, create two files. The `extensions.json` file will have all the extensions
    recommended by the project. In this example, we will use the extensions we saw
    earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Let’s also create the `settings.json` file, which allows you to add VS Code
    settings to your workspace. These settings take precedence over user settings
    and VS Code’s default settings.
  prefs: []
  type: TYPE_NORMAL
- en: 'This file will have the previously suggested settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'By synchronizing these files in your repository, when your team members download
    the project and open VS Code for the first time, the following message will appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.2 – VS Code prompt for recommended extensions](img/B19562_01_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.2 – VS Code prompt for recommended extensions
  prefs: []
  type: TYPE_NORMAL
- en: Once confirmed, all the extensions configured in the file will be installed
    in the VS Code development environment of your team members, thus automating the
    task of standardizing the team’s work environment.
  prefs: []
  type: TYPE_NORMAL
- en: Angular DevTools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One tool missing from the Angular framework was a way to drill down into an
    application in the browser. Browsers such as Chrome and Firefox have greatly improved
    the developer experience over the years, broadly for all types of websites.
  prefs: []
  type: TYPE_NORMAL
- en: With that in mind, the Angular team, starting from version 12, created the Angular
    DevTools extension for Chrome and Firefox.
  prefs: []
  type: TYPE_NORMAL
- en: To install it, you need to go to the extension store of the browser (Chrome
    or Firefox) and click on **Install**.
  prefs: []
  type: TYPE_NORMAL
- en: 'With it installed, access to the site built with Angular, and with the build
    set up for development, the **Angular** tab will appear in the developer tools:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.3 – Angular DevTools Chrome extension example](img/B19562_01_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.3 – Angular DevTools Chrome extension example
  prefs: []
  type: TYPE_NORMAL
- en: This tool allows you to browse the structure of your app, locate the code of
    the components on the screen, and profile your application to detect possible
    performance problems.
  prefs: []
  type: TYPE_NORMAL
- en: Now you have a productive development environment for developing Angular applications,
    we are ready to start our application.
  prefs: []
  type: TYPE_NORMAL
- en: Starting an Angular project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have our tools installed and configured and now we are going to start our
    Angular application. First, we are going to install the Angular CLI, which will
    be responsible for creating and building our application. In your terminal, type
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'After installing the CLI, use the following command to confirm the installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The following figure should appear in your terminal (the Angular version may
    be newer):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.4 – Angular CLI prompt confirming you have correctly installed the
    tool](img/B19562_01_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.4 – Angular CLI prompt confirming you have correctly installed the
    tool
  prefs: []
  type: TYPE_NORMAL
- en: If the `ng` command is not recognized, restart the terminal. This `ng` command
    is the CLI call and will be used in this and other chapters of the book.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start our project using the `ng new` command. The Angular CLI will ask
    for some definitions of your project:'
  prefs: []
  type: TYPE_NORMAL
- en: The first is the name of the project; for this example, enter `angular-start`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The second prompt is whether you’d like to configure your project’s routing,
    for which we’ll input `Yes`. This request will tell the CLI to create the base
    files for the route, which is recommended for most applications; an exception
    could be an Angular library you would like to create.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The next prompt will tell you which CSS format your project will use. Angular
    by default supports conventional CSS and the SCSS, Sass, and Less tools. For this
    and other examples in the book, we will use `CSS`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Confirming the Angular CLI will create the entire initial structure of the project
    and will install the dependencies using the `npm i` command, leaving everything
    ready for the start of development, as in the following example.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.5 – Prompt of files generated by angular-cli](img/B19562_01_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.5 – Prompt of files generated by angular-cli
  prefs: []
  type: TYPE_NORMAL
- en: 'To verify that the project was successfully installed, in your operating system’s
    terminal, type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'This command will start the development web server and load the example project
    page, as shown in *Figure 1**.6*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.6 – Example page generated by angular-cli on project creation](img/B19562_01_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.6 – Example page generated by angular-cli on project creation
  prefs: []
  type: TYPE_NORMAL
- en: 'The `ng new` command has other options that can be used for specific needs
    in your project. They are listed in the official documentation ([https://angular.io/cli/new](https://angular.io/cli/new)),
    and here are some that may be interesting:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Parameter ''—package-manager''`: With this parameter, it is possible to choose
    another node package manager such as `https://yarnpkg.com/`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Parameter ''--skip-install''`: With this parameter, the CLI does not perform
    the package installation step, which can be useful for creating automation tools
    for your team.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Parameter ''--strict''`: This parameter is set to `true` by default, but it
    is important to mention it because it configures your project in `strict` mode,
    which configures the TypeScript and Angular mechanisms to improve type and template
    validations. For more details, see [*Chapter 3*](B19562_03.xhtml#_idTextAnchor112),
    *TypeScript Patterns* *for Angular*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Project structure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Angular CLI creates the project in the structure recommended by the Angular
    team with all files configured by default. To deepen our knowledge of the framework,
    we need to know the main files, their functions, and available customizations
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`src`: This is the folder where your project will be, including all components,
    modules, and services.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assets`: Contains the static files you will need in your project, such as
    images and icons. In the build process, by default, it will export the files from
    this folder without any changes to the production build.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`index.html`: This is the initial file of your application. This file will
    be used in the build process, and it is recommended not to change it unless there
    is a very specific need. The title information must be changed with an Angular
    feature and not directly in this file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`main.ts`: This is the first JavaScript file that will be loaded in your application.
    You shouldn’t change it unless your project has a very specific need for it to
    be changed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`styles.css`: This is the file that can contain the global CSS of your application,
    that is, the CSS that can be read by all components since Angular by default isolates
    the CSS of each component. This file is usually modified when your project uses
    a design system such as Material ([https://material.angular.io/](https://material.angular.io/)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.editorconfig`: As described in the *VS Code* section of this chapter, this
    file, together with the extension that interprets and configures the IDE, allows
    standardization in your code conventions, such as the use of double or single
    quotes and the use of tabs or indentation spaces.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`angular.json`: This is the most important configuration file for an Angular
    application. In it, you can customize the way your project is built, and define
    *budgets* for the size of bundles (more details in [*Chapter 12*](B19562_12.xhtml#_idTextAnchor311),
    *Packaging Everything – Best Practices for Deployment*), among other settings.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`package.json` and `package-lock.json`: These files refer to the dependencies
    of the `npm` packages of your project and also the place to create the `npm` scripts
    that will be used in the creation of the CI/CD pipes of the Angular application
    (more details in [*Chapter 12*](B19562_12.xhtml#_idTextAnchor311), *Packaging
    Everything – Best Practices* *for Deployment)*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As of version 15 of Angular, the CLI hides Karma configuration files and environment
    variables files (`enviroment.ts`) by default with the justification of simplifying
    the project structure. It is still possible to create these files for fine-tuning
    your application build, test, and environment processes (more details in [*Chapter
    8*](B19562_08.xhtml#_idTextAnchor225), *Improving Backend Integrations: the* *Interceptor
    Pattern*).'
  prefs: []
  type: TYPE_NORMAL
- en: We created our project using the `angular-cli` tool, but this tool can help
    us even more, as we will learn next.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Angular CLI for your productivity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We learned how to create a project with all its options, but the Angular CLI
    is far from being just a project creation tool. It is a very important tool for
    the productivity and workflow of an Angular application. All available options
    are described using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: We will detail some of the most interesting options here, and in the next chapters,
    we will continue to use them, given the practicality of this tool.
  prefs: []
  type: TYPE_NORMAL
- en: ng add
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This command has the function of adding an Angular library to your project.
    You might be wondering, *Doesn’t npm install do the same thing?* and you’d be
    right. However, when you need to install Angular Material as a library, installing
    the dependency is just the first step.
  prefs: []
  type: TYPE_NORMAL
- en: Many libraries such as Angular Material itself need the configuration of the
    `angular.json` file and the creation of some other `lib` file, among other tasks.
    The `ng add` command allows the library creator to automate these steps and simplify
    their workflow.
  prefs: []
  type: TYPE_NORMAL
- en: 'To exemplify this in the project that we created, we will use the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Executing the preceding command, the library will make some prompts (in the
    same format as we saw for the `ng new` command) and in the end, it will configure
    our project with the library, as shown in *Figure 1**.7*.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.7 – Installation of Angular Material using angular-cli](img/B19562_01_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.7 – Installation of Angular Material using angular-cli
  prefs: []
  type: TYPE_NORMAL
- en: ng update
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the development of our projects, updating the version of something often
    takes more time than adding a new library. The `ng update` command makes this
    task almost trivial, being one of the greatest allies when it comes to updating
    the Angular version of our application.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the Angular update website ([https://update.angular.io/](https://update.angular.io/)),
    the Angular team details how to update a project in old versions. Larger and more
    complex projects may have their quirks (which are usually described on the website),
    but all applications start with the following command (in this case, version 15):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The Angular CLI will take care of updating the package and even making possible
    automation-breaking changes; often, only this is enough to completely update your
    application.
  prefs: []
  type: TYPE_NORMAL
- en: This command, like `ng add`, is also available for libraries that have been
    configured by their authors and can benefit from this automation.
  prefs: []
  type: TYPE_NORMAL
- en: ng serve
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This command is used by every Angular developer (it’s the first thing you should
    do after creating a project) and its function is to upload a development web server.
  prefs: []
  type: TYPE_NORMAL
- en: One of the most interesting and productive features of this command is the hot-reload
    capability; that is, the server restarts every time a project file is updated,
    allowing you to see its modification in real time in the interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'A productivity tip for this command is to use the `open` parameter as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: With this parameter, as soon as Angular loads your application, the CLI will
    open the default browser of your operating system with the application you are
    working on.
  prefs: []
  type: TYPE_NORMAL
- en: ng build
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `ng build` command is intended to prepare your application bundle to be
    executed by the production web server of your choice.
  prefs: []
  type: TYPE_NORMAL
- en: It performs a series of optimizations to guarantee the delivery of the smallest
    possible bundle of your application.
  prefs: []
  type: TYPE_NORMAL
- en: This results in a performance gain since with a smaller bundle, your client
    downloads faster, which is important, especially in environments with slow internet.
  prefs: []
  type: TYPE_NORMAL
- en: We will discuss this command in more detail in [*Chapter 12*](B19562_12.xhtml#_idTextAnchor311),
    *Packaging Everything – Best Practices* *for Deployment*.
  prefs: []
  type: TYPE_NORMAL
- en: ng deploy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `ng deploy` command allows you to fully deploy your application to a cloud
    provider such as Microsoft Azure.
  prefs: []
  type: TYPE_NORMAL
- en: This command works together with the Angular library of the provider you want
    to use, so for it to work, you need to install it.
  prefs: []
  type: TYPE_NORMAL
- en: We will discuss this command in more detail in [*Chapter 12*](B19562_12.xhtml#_idTextAnchor311),
    *Packaging Everything – Best Practices* *for Deployment*.
  prefs: []
  type: TYPE_NORMAL
- en: ng generate
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `ng generate` command has the function to generate almost all types of Angular
    components that your application can use. This function brings a productivity
    gain in your workflow as it generates all the necessary files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s generate our `about` page in our example project with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: We can analyze in our project folders that the Angular CLI created the TypeScript,
    HTML, and CSS files necessary for rendering the component.
  prefs: []
  type: TYPE_NORMAL
- en: However, it also generated the unit test file for this component and updated
    the module for its use. All these files already have the minimum boilerplate for
    the development of the component.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to generating practically all standard Angular components, this
    command can be used by external libraries that want to provide this development
    experience, as in the following example of Angular Material:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: In almost every chapter of the book, we’ll use this command to generate the
    components we’re going to study and the best practices and patterns for them.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered the features and philosophy of Angular and how to
    start a project in the most productive way. We learned which technologies make
    up its ecosystem and how to configure its desktop with the best VS Code extensions
    and settings. Finally, we learned how to start a project with the Angular CLI
    and what other features this powerful tool can provide us with.
  prefs: []
  type: TYPE_NORMAL
- en: Now you’ll be able to argue why to use Angular in your team’s project and you’ll
    be able to help it set up a productive work environment. You’ll also be able to
    use the Angular CLI to create and maintain your project.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn how to organize the components of an Angular
    application.
  prefs: []
  type: TYPE_NORMAL
