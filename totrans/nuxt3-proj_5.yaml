- en: '5'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building a Personal Posts Space and Implementing Authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter of our Nuxt 3 guide, we focus on a hands-on project: building
    a personal space for users to post content, integrated with secure authentication.
    This chapter bridges the gap between frontend development using Vue and Nuxt and
    backend functionality provided by **Supabase**.'
  prefs: []
  type: TYPE_NORMAL
- en: We start by setting up **Supabase**, a backend service that simplifies user
    authentication. This foundation is crucial for our application’s security. Next,
    we integrate this service with Nuxt 3, ensuring that our frontend and backend
    communicate smoothly.
  prefs: []
  type: TYPE_NORMAL
- en: Our journey then moves to the user interface. We will design easy-to-use login
    and registration forms. This section is about making forms that look good and
    work well, using Nuxt UI and TailwindCSS.
  prefs: []
  type: TYPE_NORMAL
- en: The next part is about creating a secure login system. We will cover important
    security topics, like token-based authentication, to keep user data safe.
  prefs: []
  type: TYPE_NORMAL
- en: The chapter concludes by teaching how to let users create and manage their own
    posts. This will give users a personal area in the application to share their
    thoughts.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter is a practical guide to combining frontend design with backend
    technology, making a secure, user-friendly web application. Let’s dive in!
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter we’re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting Up Initial Supabase Project For User Authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating Nuxt 3 with Supabase
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Designing Authentication UI and Validating Inputs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting Up User Authentication with Supabase
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and Managing Personal User Posts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The code files for this chapter can be found at [https://github.com/PacktPublishing/Nuxt-3-Projects/tree/main/chapter05](https://github.com/PacktPublishing/Nuxt-3-Projects/tree/main/chapter05)
  prefs: []
  type: TYPE_NORMAL
- en: The CiA video for this chapter can be found on [https://packt.link/AYK8X](https://packt.link/AYK8X)
  prefs: []
  type: TYPE_NORMAL
- en: 'Essential Background: What is Supabase?'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we jump into the hands-on development of our project, it’s important
    to familiarize ourselves with Supabase and its capabilities, setting a strong
    groundwork for what we’re about to build.
  prefs: []
  type: TYPE_NORMAL
- en: '*Supabase Overview:* Supabase is an open-source Firebase alternative, offering
    a suite of tools to handle backend needs like databases, authentication, and real-time
    subscriptions. It uses PostgreSQL by default.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Database Management:* At its core, Supabase offers database services, allowing
    you to create, read, update, and delete data efficiently. We’ll use this feature
    to work on create user posts, update them, and delete them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*User Authentication:* It simplifies the process of managing users, handling
    everything from registration to login, and securing user data. Supabase supports
    various authentication methods, including email/password and third-party logins
    like Google or GitHub.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Important Links:*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we start, here are some essential resources from Supabase that we’ll
    be using extensively. These links provide direct access to various tools within
    the Supabase platform. Each link corresponds to a specific page of the Supabase
    dashboard we will interact with:'
  prefs: []
  type: TYPE_NORMAL
- en: '**SQL** **Editor**: [https://supabase.com/dashboard/project/_/sql](https://supabase.com/dashboard/project/_/sql)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Table** **Editor**: [https://supabase.com/dashboard/project/_/editor](https://supabase.com/dashboard/project/_/editor%0D)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**API** **Settings:** [https://supabase.com/dashboard/project/_/settings/api](https://supabase.com/dashboard/project/_/settings/api)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Auth** **Providors:** [https://supabase.com/dashboard/project/_/auth/providers](https://supabase.com/dashboard/project/_/auth/providers)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These links are your direct line to the tools we’ll employ throughout this
    chapter. Now let’s proceed to the foundational step: setting up a new Supabase
    project.'
  prefs: []
  type: TYPE_NORMAL
- en: Setting Up Initial Supabase Project For User Authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To start building our Nuxt 3 application, the first thing we need to do is to
    initialize a new Supabase project to set up our database and API.
  prefs: []
  type: TYPE_NORMAL
- en: 'After creating a new Supabase Account, Navigate to: [https://supabase.com/dashboard/projects](https://supabase.com/dashboard/projects)
    and hit `My Space`. After entering your project name and a secure database password,
    Supabase will start setting up your new database.'
  prefs: []
  type: TYPE_NORMAL
- en: Setting Up the Database Schema
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s prepare the database schema. In the Supabase Dashboard, head to the `profiles`
    table connected to user authentication and includes a trigger to automatically
    generate profile entries when new users sign up.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.1: Supabase User Management Starter](img/B19760_05_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.1: Supabase User Management Starter'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll find a pre-written query. Click **Run** to execute it and establish our
    initial table. Alternatively, you could write a custom query to build the database,
    but since our focus is on integrating with Nuxt, we’ll skip this step.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, move to the `profile` created through the “User Management Starter.” Let’s
    proceed to create a `posts` table and this time we’ll create it using Supabase
    UI. click the “create new Table” button, name it `posts`, and configure the Columns
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.2: posts table columns schema](img/B19760_05_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.2: posts table columns schema'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the overview:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The system automatically adds `id,` `created_at` columns.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We’ve added a required `title` column.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There’s also a `content` column, which is optional. You can make it nullable
    by toggling the option in the configuration menu.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`author_id` serves as a foreign key linking to the user profile. Clicking on
    the link displays its current settings, including the reference table and column.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 5.3: author_id foreign key](img/B19760_05_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.3: author_id foreign key'
  prefs: []
  type: TYPE_NORMAL
- en: With your database tables ready, the next step is to get the API keys. These
    keys let your application talk to the Supabase API. Find the `project url`, and
    `anon` key from this page.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, Supabase enables email confirmation by default, so that the users will
    need to confirm their email address before signing in for the first time. For
    Testing purposes, we’ll disable this feature by navigating to **Auth Providors**
    page, locate the email provider setting, then toggle the “Confirm Email” switch
    to off.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.4: disabling confirm email option](img/B19760_05_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.4: disabling confirm email option'
  prefs: []
  type: TYPE_NORMAL
- en: With our Supabase setup complete, we now turn to integrating it with Nuxt 3\.
    In the following section, we’ll create a new Nuxt application and integrate it
    with Supabse using a module called “`@nuxtjs/supabase`”
  prefs: []
  type: TYPE_NORMAL
- en: Integrating Nuxt 3 with Supabase
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With our Supabase setup now in place, it’s time to turn our attention to how
    we can seamlessly integrate this backend with our Nuxt 3 application
  prefs: []
  type: TYPE_NORMAL
- en: Creating a New Nuxt 3 Project with Supabase Integration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Start by creating a new Nuxt 3 project. Open your terminal and run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, create a `.env` file in your project root and add your Supabase URL and
    anon key:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Replace `"YOUR_SUPABASE_URL"` and `"YOUR_SUPABASE_ANON_KEY"` with the actual
    values you copied from your Supabase project.
  prefs: []
  type: TYPE_NORMAL
- en: Overriding Authentication Routes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the default configuration, Supabase uses the `/login` route for user login
    and automatically redirects unauthenticated (or anonymous) users to this route.
    However, to tailor our application’s navigation flow and URL structure, we can
    configure these authentication routes in Nuxt 3.
  prefs: []
  type: TYPE_NORMAL
- en: 'To customize the behavior of our authentication routes, we need to make adjustments
    in the `nuxt.config.ts` file. Specifically, by adding `supabase` object with configuration
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s discuss every change:'
  prefs: []
  type: TYPE_NORMAL
- en: We’ve changed the default login route from `/login` to `/auth/login`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`callback` option is left empty. This is because callback handling is often
    associated with third-party providers, which we’re not covering at this stage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`exclude` option is set to `[''/auth/*'']`. This pattern means all routes under
    the `/auth/` path, like `/auth/login` and `/auth/signup`, are accessible to anonymous
    users. This setup is advantageous, especially when planning to expand our authentication
    pages in the future (e.g., adding password reset or recovery pages) without needing
    to update the exclude option each time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By configuring these settings, we ensure that our application’s authentication
    flow is both user-friendly and scalable, ready to accommodate additional features
    as our project grows.
  prefs: []
  type: TYPE_NORMAL
- en: With our authentication routes now customized, let’s move on to designing the
    user interface for authentication and implementing input validation.
  prefs: []
  type: TYPE_NORMAL
- en: Authentication UI and Validating Inputs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To enhance the user experience of our authentication process, we’ll first install
    and configure some essential modules for our Nuxt 3 project.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Required Modules
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your terminal and install `@nuxtjs/google-fonts` as usual, and `@nuxt/ui`
    as we learned in the previous chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'These commands will add Google Fonts and Nuxt UI to our project. Next, we need
    to update our `nuxt.config.ts` to include these modules and set some additional
    configurations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Here, the `app` configuration sets the title of our application to “My Space.”
  prefs: []
  type: TYPE_NORMAL
- en: 'To further tailor our UI, create an `app.config.ts` file to update Nuxt UI’s
    primary color and set default properties for Nuxt UI components:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: As with previous chapters, don’t forget to include the `tailwind.config.ts`
    in your project. This file is crucial for customizing TailwindCSS to fit the styling
    needs of our application.
  prefs: []
  type: TYPE_NORMAL
- en: Our next task is to create effective layouts for the login and signup pages.
  prefs: []
  type: TYPE_NORMAL
- en: Setting Up Auth Pages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create empty layout `default.vue` in the `/layouts` directory. This layout will
    be utilized later in the project.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'In the same directory, create `auth.vue` layout. This layout will be specifically
    used for authentication-related pages like login and signup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This layout divides the screen into two columns on medium and larger screens,
    with one column for an image (provided in the repository) and the other for the
    form.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, Override the `app.vue` to specify that we’ll be using layouts and pages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Then, create a `/pages/auth/` directory and add a `login.vue` page inside it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The page Begin with a simple card layout that includes a title and a navigation
    link to the signup page. Then we’ll use Nuxt UI components like `UForm`, `UFormGroup`,
    and `UInput` for the form elements, which are pre-styled and help in input validation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The `icon="i-heroicons-at-symbol"` in Nuxt UI represents an icon from the Heroicons
    collection. Following the pattern `i-{collection_name}-{icon_name}`, it is easy
    to connect any icon collection from [https://icones.js.org/](https://icones.js.org/%20)
    into Nuxt UI.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, define the layout and set up the reactive state for user data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'You should now see a layout for the login page like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![0Figure 5.5: Login Page Layout](img/B19760_05_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '0Figure 5.5: Login Page Layout'
  prefs: []
  type: TYPE_NORMAL
- en: 'In a similar way, create `signup.vue` page that contains an extra field called
    for password confirmation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'And don’t forget to add it to `user` ref:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have our authentication UI in place, let’s enhance it with input
    validation using **Joi**
  prefs: []
  type: TYPE_NORMAL
- en: Using Joi for Input Validation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `UForm` component in Nuxt UI offers a powerful feature through its `schema`
    prop. This prop allows you to integrate a validation schema from libraries like
    **Joi** or **Yup**, providing a way to enforce specific validation rules on your
    form’s state. For our example, we’ll utilize **Joi** to create our validation
    schemas. You can read more about Joi from the official website: [https://joi.dev/api/](https://joi.dev/api/%0D)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Begin by adding Joi to your project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Then in the `login.vue` script, Define a Joi validation schema for the login
    form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'This schema ensures that the email is a valid email and filled out. Also, we
    ensure that the password is at least 6 characters long. We used `{ tlds: false
    }` to disable the built-it TLD Validation from Joi. In order to Implement the
    schema in the form component. We have to adjust it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The `schema` prop validates the `user` state according to the defined Joi schema.
    Try testing the validation by leaving the email input field empty and moving focus
    away. An error message should appear beneath the input field:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.6: input validation with Joi and Nuxt UI](img/B19760_05_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.6: input validation with Joi and Nuxt UI'
  prefs: []
  type: TYPE_NORMAL
- en: 'The signup page will have a similar validation for email and password. Additionally,
    we’ll add a complex validation for password confirmation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, the `passwordConfirm` field uses `Joi.ref(''password'')` to ensure it
    matches the password field. The `` .messages({ ''any.only'': \passwords don''t
    match` })` `` part customizes the error message, making it clear and user-friendly.
    When the passwords don’t match.'
  prefs: []
  type: TYPE_NORMAL
- en: With our input validation set up, the next step is to integrate Supabase’s login
    and signup functions.
  prefs: []
  type: TYPE_NORMAL
- en: Setting Up User Authentication with Supabase
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, let’s focus on integrating Supabase’s authentication capabilities, using
    their straightforward login and signup functions to manage user access in our
    application.
  prefs: []
  type: TYPE_NORMAL
- en: The `useSupabaseClient` composable in Nuxt 3 is a gateway to the Supabase API,
    facilitating seamless communication between your Vue application and the Supabase
    services. Powered by `supabase-js`, it provides access to the Supabase client,
    which is initialized using the `SUPABASE_KEY` from your .env file. This client
    connects to the database.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Signup Function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Inside `signup.vue` script, get a Supabase instance using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: This instance will be used to make requests to Supabase, particularly for user
    authentication functions like `signup`, and `signInWithPassword`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next create an `onSubmit` function to handle the signup process:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the code breakdown:'
  prefs: []
  type: TYPE_NORMAL
- en: Sets `loading` to `true`, indicating the start of an asynchronous operation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calls the `signUp` method from the Supabase authentication API. This is where
    we interact with Supabase to register a new user, extracting email and password
    from `user` ref.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checks if there’s an error from the Supabase signup process, throws it to be
    caught in the catch block.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logs any error that occurs during the signup process (for testing).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting loading back to false
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This function effectively manages the signup process, interacting with Supabase’s
    authentication API to register users. It handles the entire flow from sending
    the request to processing responses and errors.
  prefs: []
  type: TYPE_NORMAL
- en: 'To test error handling, temporarily remove the `schema` prop from `UForm` and
    try submitting an empty form. an error response should be printed in the devtools
    console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.7: Supabase Signup Error](img/B19760_05_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.7: Supabase Signup Error'
  prefs: []
  type: TYPE_NORMAL
- en: Continuing from where we left off in the signup process, let’s enhance our error
    handling by introducing Nuxt UI Notifications. These notifications provide a more
    user-friendly way to display messages, such as errors, in a toast notification
    format.
  prefs: []
  type: TYPE_NORMAL
- en: 'Include the `UNotifications` component in your `app.vue`. This is a global
    setup, allowing you to display notifications anywhere in your app:'
  prefs: []
  type: TYPE_NORMAL
- en: <template>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The `useToast` composable from Nuxt UI allows you to easily add toast notifications
    to your application. We can get a toaster instance by adding the following line
    to `signup.vue` script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let’s modify the `catch` block of your signup function to use this composable
    for displaying error messages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, `toast.add` is used to display a toast notification. We set the color
    to ‘red’, indicating that it’s an error message. Try submitting an empty form
    to trigger a validation error. You should see a red toast notification displaying
    the error message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.8: Nuxt UNotification component](img/B19760_05_8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.8: Nuxt UNotification component'
  prefs: []
  type: TYPE_NORMAL
- en: This visual feedback is immediate and clear, making it easier for users to understand
    and react to errors.
  prefs: []
  type: TYPE_NORMAL
- en: 'Continuing with our signup functionality, let’s add a success toast notification
    and set up navigation to the homepage upon successful signup. In the `onSubmit`
    function, update the try block to sign in the user using Supabase after successful
    registration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Don’t forget to revert the `schema` prop in the `UForm` to enable validation
    again.
  prefs: []
  type: TYPE_NORMAL
- en: 'It’s time for testing! First, create a simple `index.vue` page that contains
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Upon filling correct information and achieving a successful signup, a welcome
    toast should be shown, and you should be redirected to the homepage:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.9: index page](img/B19760_05_9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.9: index page'
  prefs: []
  type: TYPE_NORMAL
- en: To ensure that the authentication flow is working, open `http://localhost:3000/`
    in a private window. You should be automatically redirected to`'auth/login/` due
    to Nuxt Supabase’s built-in middleware, which checks user authentication status.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that our signup functionality is in place, let’s focus on implementing
    the login process. The method for logging in is similar to the signup, but we’ll
    be using Supabase’s `signInWithPassword` method. In your `login.vue` page, define
    the `onSubmit` function specifically for the login process:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: This function attempts to log in the user using their email and password. Upon
    successful login, the user is greeted with a success toast and redirected to the
    homepage.
  prefs: []
  type: TYPE_NORMAL
- en: 'Link the `onSubmit` function to the `UForm` in your login page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: By implementing this login functionality, we’ve ensured that users can access
    their accounts securely and conveniently. The process is straightforward, making
    the login experience smooth and efficient. Next, we’ll delve into how users can
    create, view, and manage their own posts within our application, making it a truly
    interactive and personal space.
  prefs: []
  type: TYPE_NORMAL
- en: Creating and Managing Personal User Posts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we turn our attention to enabling users to create and manage
    their posts. To ensure this works smoothly, we need to set up specific rules in
    our database table: `posts` using Supabase’s Row-Level Security (RLS) policies.'
  prefs: []
  type: TYPE_NORMAL
- en: RLS policies in Supabase are like rules for your database. They help control
    who can see or change data in the database. For our app, we’ll use these policies
    to make sure users can only access their own posts.
  prefs: []
  type: TYPE_NORMAL
- en: Adding RLS Policy for the ‘Posts’ Table
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open Supabase policies page: . This is where you can control who accesses what
    in your database. Choose the `posts` table and start making a new policy:'
  prefs: []
  type: TYPE_NORMAL
- en: Name it something clear like “Personal Posts Management”.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Choose “ALL” for operations so users can read, add, update, and delete their
    posts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For ‘Target Roles’, pick “authenticated” so only logged-in users can use this
    policy.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add the `(auth.uid() = author_id)` expression to both **using** and **with check**
    expression. This ensures users can only view and interact with posts they’ve created,
    maintaining strict user-specific access for both viewing and modifying content.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Policy details should be like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.10: posts table RLS policy](img/B19760_05_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.10: posts table RLS policy'
  prefs: []
  type: TYPE_NORMAL
- en: With our RLS policies in place for the `posts` table, let’s now delve into how
    we can use Supabase’s API to manage these posts within our application.
  prefs: []
  type: TYPE_NORMAL
- en: Using Supabase API for Post Management
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`useSupabaseClient` in Nuxt 3 opens up a straightforward path to interact with
    our database. It’s our go-to for executing operations on the `posts` table.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Your project’s specific API documentation on Supabase gives detailed insights
    into possible queries. For a hands-on look, visit:'
  prefs: []
  type: TYPE_NORMAL
- en: 'With a simple command like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'we can fetch an array of user-specific posts, thanks to the RLS policies ensuring
    each user sees only their content. To create or update a post, we can use `upsert`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: This function elegantly handles both new post insertions and updates to existing
    posts, checking against unique identifiers to decide the appropriate action.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, for deleting posts, the combination of the `delete` method and the
    `eq` filter ensures we precisely target and remove the intended post:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: This targeted approach reinforces the control users have over their posts, aligning
    with the security measures we’ve implemented.
  prefs: []
  type: TYPE_NORMAL
- en: let’s move on to developing a user interface for creating and updating post
    information.
  prefs: []
  type: TYPE_NORMAL
- en: Building the Post Information Page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Begin by setting up a dynamic route in your Nuxt application. Create a file
    named `[id].vue` inside the `/pages/posts/` directory. This dynamic route, represented
    by `[id]`, will allow the page to handle different scenarios based on the URL:'
  prefs: []
  type: TYPE_NORMAL
- en: When the `[id]` in the route is set to `create`, we know the user is looking
    to create a new post.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If `[id]` is an actual post ID, it indicates the user intends to view or edit
    an existing post. In this case, we’ll use this ID to fetch the relevant post data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This approach gives us a flexible and efficient way to handle both new post
    creation and the editing of existing posts, all within a single, dynamic interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the template: create a simple layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'And the form will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Under the Form, add a small error button for post deletion:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'In the script part of our page, we set up the state and validation schema for
    our post:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s the breakdown:'
  prefs: []
  type: TYPE_NORMAL
- en: '`useSupabaseUser()` provides the information of the logged-in user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`post` holds the data for the `title`, `content`, and `author_id.`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `schema` defines the necessary fields and their validation rules.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `.unknown(true)` part lets the form handle additional fields like `id` and
    `created_at` without validation errors.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As we continue in building our script block by block, let’s add:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: We captured the current route details, essential for determining the post ID
    and the mode (create or edit). Then we extracted the post ID from the route parameters.
    Finally, we used `editMode` to determine if the user is in edit mode (editing
    an existing post) or create mode (creating a new post).
  prefs: []
  type: TYPE_NORMAL
- en: Now let’s handle Data Fetching with `useLazyAsyncData`. Nuxt provides a great
    composable to perform data-fetching in a browser or server environment called,
    `useAsyncData`. It fetches data before rendering the page, ideal for server-side
    rendering where data must be present initially. `useLazyAsyncData`, in contrast,
    starts page rendering immediately and loads data in the background, enhancing
    user experience by reducing wait times, especially useful for non-critical data
    like loading posts in our application.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: In this case, if the user is in edit mode, the script fetches the specific post
    data from Supabase and populates the form for editing. It checks the post ID against
    the database and retrieves the corresponding post details. Otherwise, the `post`
    ref will remain empty.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s examine the `onSubmit` function, which handles both creating and updating
    posts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s the breakdown:'
  prefs: []
  type: TYPE_NORMAL
- en: The function performs an `upsert` operation, which either updates an existing
    post or creates new one based on the post’s ID. (create if the ID is undefined,
    update otherwise)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Error handling is implemented to catch and display any issues that arise during
    the `upsert` process.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Success feedback is provided through toast notifications, differentiating between
    post creation and updating.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, the function navigates the user back to the homepage.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, let’s look at the `deletePost` function. Similar to `onSubmit,` this function
    includes error handling and user feedback via toast notifications. but the supabase
    method will be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'If you navigate to: , you should see this page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.11: project information page](img/B19760_05_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.11: project information page'
  prefs: []
  type: TYPE_NORMAL
- en: 'Enhancing the user navigation within our application, we’ll introduce a navigation
    component to the `default` layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'This navigation bar features to parts: the left side for the brand logo or
    name linked to the homepage, and the right side with a button for creating new
    posts.'
  prefs: []
  type: TYPE_NORMAL
- en: Moving forward, Let’s build post listing page!
  prefs: []
  type: TYPE_NORMAL
- en: Displaying User Posts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As we move into the final stretch of our application development, we’ll update
    the homepage to lists all the posts created by the use. Update the script section
    in `index.vue` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: The script uses `useSupabaseClient` to access the Supabase API and fetch posts.
    `useLazyAsyncData` is utilized to load the posts asynchronously. It ensures that
    the page navigation happens immediately, with post data loading in the background.
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the page template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'The template contains a container holds the title “My Posts” and a loop that
    renders each post using the `post-card` component. So, Let’s create the `PostCard.vue`
    component inside `components` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Each `post-card` component presents the post’s title, content, and creation
    date. The use of `dayjs` to format the date adds a human-friendly touch to the
    date. A `nuxt-link` wraps the card, enabling easy navigation to the detailed view
    or edit page of each post.
  prefs: []
  type: TYPE_NORMAL
- en: With our post listing and individual postcard components in place, users should
    now see all the posts they’ve created. Clicking on a post navigates to its detailed
    page, where the content can be viewed, updated, or deleted seamlessly.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Voilà! We’ve successfully created a dynamic and user-friendly space for personal
    post management within our application. We started with establishing a secure
    user authentication system. Our focus then shifted to enabling users to create,
    edit, and delete posts, with each step validated using Joi for ensuring data integrity.
    These features, backed by Supabase’s Row-Level Security policies and API, guaranteed
    secure and user-specific interactions.
  prefs: []
  type: TYPE_NORMAL
- en: In the upcoming chapter, we’ll enhance a recipe sharing site using Nuxt 3, with
    a specific focus on SEO optimization. We’ll dive into techniques such as metadata
    configuration, structured data implementation, image optimization, SEO-friendly
    URL creation, and sitemap generation. These steps aim to elevate the site’s search
    engine presence and attract more organic traffic.
  prefs: []
  type: TYPE_NORMAL
- en: Practice Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Explain the process of creating a new Supabase project for a Nuxt 3 application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Describe the purpose of Row-Level Security (RLS) in Supabase and how it’s implemented.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What are the benefits of `useSupabaseClient` composable?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is the difference between `useAsyncData` and `useLazyAsyncData` in Nuxt,
    and when would you use each?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How do you validate user input in a form using Joi & NuxtUI?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to handle Supabase errors?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to sign in with password using Supabase?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to delete a record in a table with Supabase?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Explain how to use the `upsert` method in Supabase for post management.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Further Reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Supabase: [https://supabase.com/](https://supabase.com/%0D)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Nuxt UI Forms: [https://ui.nuxt.com/forms/form](https://ui.nuxt.com/forms/form%0D)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'RLS in Supabase: [https://supabase.com/docs/guides/auth/row-level-security](https://supabase.com/docs/guides/auth/row-level-security)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Joi Validation: [https://joi.dev/](https://joi.dev/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Build User Management Website using Nuxt 3 and Supabase: [https://supabase.com/docs/guides/getting-started/tutorials/with-nuxt-3](https://supabase.com/docs/guides/getting-started/tutorials/with-nuxt-3)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Nuxt Supabase Module: [https://supabase.nuxtjs.org/](https://supabase.nuxtjs.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
