- en: <st c="0">8</st>
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="0">8</st>
- en: <st c="2">Writing Effective End-to-End Component Tests with Cypress</st>
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="2">使用 Cypress 编写有效的端到端组件测试</st>
- en: <st c="59">In the ever-evolving</st> <st c="80">world of web development,</st>
    **<st c="107">end-to-end</st>** <st c="117">(</st>**<st c="119">E2E</st>**<st
    c="122">) testing plays a crucial role in ensuring the reliability and robustness
    of web applications.</st> <st c="218">E2E testing simulates real-world user scenarios,
    covering all aspects of an application, including user interfaces, APIs, databases,
    and</st> <st c="355">other integrations.</st>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="59">在不断发展的</st> <st c="80">Web 开发世界</st>，**<st c="107">端到端</st>** <st
    c="117">(</st>**<st c="119">E2E</st>**<st c="122">) 测试在确保 Web 应用程序的可靠性和健壮性方面发挥着至关重要的作用。</st>
    <st c="218">端到端测试模拟真实世界的用户场景，涵盖应用程序的所有方面，包括用户界面、API、数据库和</st> <st c="355">其他集成。</st>
- en: <st c="374">One of the tools that developers often use for E2E testing is</st>
    **<st c="437">Cypress</st>**<st c="444">. Cypress is a freely available</st> <st
    c="475">comprehensive testing solution for web applications, created with the
    aim of simplifying and optimizing the testing workflow for developers.</st> <st
    c="617">What sets Cypress apart from other testing frameworks is its ability to
    execute tests directly in the browser, offering developers enhanced control and
    insight into the application</st> <st c="798">being tested.</st>
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="374">开发者经常使用的端到端测试工具之一是</st> **<st c="437">Cypress</st>**<st c="444">。Cypress
    是一个免费提供的</st> <st c="475">全面的 Web 应用程序测试解决方案，旨在简化并优化开发者的测试工作流程。</st> <st c="617">Cypress
    与其他测试框架的区别在于其能够在浏览器中直接执行测试，为开发者提供对正在测试的应用程序的增强控制和洞察。</st> <st c="798">。
- en: <st c="811">In this chapter, we will focus on how to write effective E2E tests
    for a calculator application using Cypress.</st> <st c="923">We will explore the
    basics of Cypress, the structure of tests, and some advanced techniques.</st>
    <st c="1016">Our aim is to guide developers in writing comprehensive E2E tests
    that can effectively verify the functionality of a calculator app, ensuring that
    it behaves as expected under</st> <st c="1192">different conditions.</st>
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="811">在本章中，我们将重点介绍如何使用 Cypress 为计算器应用程序编写有效的端到端测试。我们将探讨 Cypress 的基础知识、测试结构以及一些高级技术。</st>
    <st c="923">我们的目标是指导开发者编写全面的端到端测试，以有效地验证计算器应用程序的功能，确保它在</st> <st c="1016">不同条件下表现如预期。</st>
    <st c="1192">。
- en: <st c="1213">In summary, here are the main topics that will be covered in</st>
    <st c="1275">this chapter:</st>
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1213">总结来说，本章将涵盖以下主要主题：</st> <st c="1275">：</st>
- en: <st c="1288">Structuring</st> <st c="1301">E2E tests</st>
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1288">结构化</st> <st c="1301">端到端测试</st>
- en: <st c="1310">Writing E2E</st> <st c="1323">test cases</st>
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1310">编写端到端</st> <st c="1323">测试用例</st>
- en: <st c="1333">Using Cypress</st> <st c="1348">custom commands</st>
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1333">使用 Cypress</st> <st c="1348">自定义命令</st>
- en: <st c="1363">Technical requirements</st>
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="1363">技术要求</st>
- en: <st c="1386">To follow along with the examples and exercises in this chapter,
    you will need to have a basic understanding of Angular and TypeScript, as well
    as the following</st> <st c="1548">technical requirements:</st>
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1386">为了跟随本章中的示例和练习，你需要对 Angular 和 TypeScript 有基本的了解，以及以下</st> <st c="1548">技术要求：</st>
- en: <st c="1571">Node.js and npm installed on</st> <st c="1601">your computer</st>
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1571">Node.js 和 npm 已安装在你的</st> <st c="1601">计算机上</st>
- en: <st c="1614">The Angular CLI</st> <st c="1631">installed globally</st>
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1614">全局安装的 Angular CLI</st> <st c="1631">。
- en: <st c="1649">A code editor, such as Visual Studio Code, installed on</st> <st
    c="1706">your computer</st>
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1649">安装在你的</st> <st c="1706">计算机上的代码编辑器，例如 Visual Studio Code</st>
- en: <st c="1719">The code files of this chapter can found</st> <st c="1761">at</st>
    [<st c="1764">https://github.com/PacktPublishing/Mastering-Angular-Test-Driven-Development/tree/main/Chapter%208</st>](https://github.com/PacktPublishing/Mastering-Angular-Test-Driven-Development/tree/main/Chapter%208)<st
    c="1862">.</st>
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1719">本章的代码文件可以在</st> <st c="1761">以下位置找到</st> [<st c="1764">https://github.com/PacktPublishing/Mastering-Angular-Test-Driven-Development/tree/main/Chapter%208</st>](https://github.com/PacktPublishing/Mastering-Angular-Test-Driven-Development/tree/main/Chapter%208)<st
    c="1862">。</st>
- en: <st c="1863">Structuring E2E tests</st>
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="1863">端到端测试的结构化</st>
- en: <st c="1885">Cypress tests are structured</st> <st c="1914">using t</st><st
    c="1922">he</st> `<st c="1926">describe(</st><st c="1935">)</st>`<st c="1937">,</st>
    `<st c="1939">context(</st><st c="1947">)</st>`<st c="1949">,</st> `<st c="1951">it()</st>`<st
    c="1955">, a</st><st c="1958">nd</st> `<st c="1962">specify()</st>` <st c="1971">functions,
    which are borrowed from Mocha (Mocha is a feature-rich JavaScript testing framework
    that runs on Node.js and in the browser, designed to make asynchronous testing
    simple and enjoyable.</st> <st c="2168">It is highly regarded for its versatility
    in testing applications across both the front- and backends, offering a wide range
    of benefits to developers).</st> <st c="2321">T</st><st c="2322">he</st> `<st
    c="2325">describe()</st>` <st c="2335">function is used to group related test</st><st
    c="2374">s,</st> `<st c="2378">context()</st>` <st c="2387">is similar</st> <st
    c="2399">to</st> `<st c="2402">describe()</st>`<st c="2412">, a</st><st c="2415">nd</st>
    `<st c="2419">it()</st>` <st c="2423">and</st> `<st c="2428">specify()</st>` <st
    c="2437">are used to write individual</st> <st c="2467">test cases.</st>
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2478">We’re going to structure our tests around the functionality of
    our calculator application.</st> <st c="2570">Our calculator performs four operations:</st>
    *<st c="2611">addition</st>*<st c="2619">,</st> *<st c="2621">subtraction</st>*<st
    c="2632">,</st> *<st c="2634">multiplication</st>*<st c="2648">, and</st> *<st
    c="2654">division</st>*<st c="2662">. In our</st> `<st c="2671">e2e</st>` <st
    c="2674">folder in the</st> `<st c="2689">cypress</st>` <st c="2696">folder, we’ll
    create a file called</st> `<st c="2732">calculator.cy.ts</st>` <st c="2748">:</st>
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.1 – The calculator.cy.ts file in e2e in the cypress folder](img/B21146_08_1.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
- en: <st c="2805">Figure 8.1 – The calculator.cy.ts file in e2e in the cypress folder</st>
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2872">Once the file has been created, we will add</st> <st c="2916">these
    lines of code, which we will</st> <st c="2952">explain later:</st>
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: <st c="3637">The preceding lines of code begin with the definition of a test
    suite called</st> `<st c="3715">Calculator Functionality</st>`<st c="3739">. A</st>
    **<st c="3743">test suite</st>** <st c="3753">is a set of related</st> <st c="3774">tests.</st>
    <st c="3781">In this case, all the tests contained in the description block are
    linked to the functionality of</st> <st c="3879">a calculator.</st>
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3892">The</st> `<st c="3897">context</st>` <st c="3904">function is used
    to group together related tests.</st> <st c="3955">Here, it groups all tests related
    to the calculator’s</st> `<st c="4009">Addition</st>` <st c="4017">and</st> `<st
    c="4022">Subtraction</st>` <st c="4033">functions.</st>
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: <st c="4044">The</st> `<st c="4049">it</st>` <st c="4051">function defines</st>
    <st c="4068">an individual test scenario.</st> <st c="4098">Here, it defines a
    test case for the addition of two positive numbers or two negative numbers and</st>
    <st c="4196">their subtraction.</st>
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: <st c="4214">Now, we’ll add the other operations (namely,</st> `<st c="4260">Multiplication</st>`
    <st c="4274">and</st> `<st c="4279">Division</st>`<st c="4287">), and we’ll finalize
    the implementation of our</st> <st c="4336">test suite:</st>
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: <st c="5514">This code sets up a structure</st> <st c="5544">for testing the
    addition, subtraction, multiplication, and division functionalities of a calculator
    application.</st> <st c="5658">Each operation has its own group of tests, and
    each test case describes a</st> <st c="5732">specific scenario.</st>
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: <st c="5750">In our browser, we have the</st> <st c="5779">following result:</st>
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.2 – Calculator E2E tests succeeded after setting up a structure
    for testing addition, subtraction, multiplication, and division](img/B21146_08_2.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
- en: <st c="6656">Figure 8.2 – Calculator E2E tests succeeded after setting up a
    structure for testing addition, subtraction, multiplication, and division</st>
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: <st c="6792">The result in the browser proves</st> <st c="6825">that our test
    cases written in the E2E context are without errors.</st> <st c="6893">However,
    we haven’t yet written the corresponding logic in our</st> <st c="6956">test cases.</st>
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: <st c="6967">In the next section, we’ll now write the corresponding tests for</st>
    <st c="7033">each context.</st>
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7046">Writing test cases</st>
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="7065">When writing test cases, you should</st> <st c="7101">try to cover
    different scenarios, boundary cases, and potential errors.</st> <st c="7174">For
    a calculator application, you may want to test addition, subtraction, multiplication,
    and division operations under normal conditions and in borderline cases (such
    as</st> *<st c="7345">division</st>* *<st c="7354">by zero</st>*<st c="7361">).</st>
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7364">Let’s complete our different contexts with our</st> <st c="7412">different
    tests.</st>
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7428">Addition context</st>
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="7445">In this section, we’ll look at the various E2E test cases related</st>
    <st c="7512">to addition.</st>
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7524">Adds two positive numbers correctly</st>
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="7560">In this test case, we will</st> <st c="7587">see how to write the
    E2E test to sum two</st> <st c="7629">positive numbers:</st>
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: <st c="7926">In the preceding co</st><st c="7946">de, the</st> `<st c="7955">it()</st>`
    <st c="7959">function is used to define an individual test case.</st> <st c="8012">The
    first argument is a string describing what the test case is supposed to do.</st>
    <st c="8092">In this case, it is</st> `<st c="8112">'adds two positive</st>` `<st
    c="8131">numbers correctly'</st>`<st c="8149">.</st>
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: <st c="8150">The</st> `<st c="8155">cy.visit()</st>` <st c="8165">command is
    used to visit a URL.</st> <st c="8198">Here, it’s the URL that leads to our calculator’s</st>
    <st c="8248">user interface.</st>
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="8150">使用</st> `<st c="8155">cy.visit()</st>` <st c="8165">命令来访问一个URL。</st>
    <st c="8198">在这里，这是通向我们的计算器用户界面的URL。</st>
- en: <st c="8263">The following line is used to enter</st> `<st c="8300">'5'</st>`
    <st c="8303">in the calculator’s first input field.</st> <st c="8343">The</st>
    `<st c="8347">cy.get()</st>` <st c="8355">function is used to obtain elements
    from the D</st><st c="8402">OM.</st> <st c="8407">The</st> `<st c="8411">first()</st>`
    <st c="8418">function is used to obtain the first element of the set of corresponding
    elemen</st><st c="8498">ts.</st> <st c="8503">The</st> `<st c="8507">type()</st>`
    <st c="8513">command is used to type into a text</st> <st c="8550">input field.</st>
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="8263">以下行用于在计算器的第一个输入字段中输入</st> `<st c="8300">'5'</st>` <st c="8303">。</st>
    <st c="8343">使用</st> `<st c="8347">cy.get()</st>` <st c="8355">函数从DOM中获取元素。</st>
    <st c="8402">然后</st> `<st c="8407">first()</st>` <st c="8418">函数用来获取相应元素集合的第一个元素。</st>
    <st c="8498">接着</st> `<st c="8503">type()</st>` <st c="8513">命令用来在文本输入字段中输入。</st>
- en: <st c="8562">Then, select the</st> `<st c="8681">'</st><st c="8682">+'</st>`<st
    c="8684">. The</st> `<st c="8690">select()</st>` <st c="8698">command is used
    to select an option from a drop-down me</st><st c="8754">nu.</st> <st c="8759">The</st>
    `<st c="8763">should()</st>` <st c="8771">function is used to make statements
    about the state of</st> <st c="8827">the application.</st>
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="8562">然后，选择</st> `<st c="8681">'</st><st c="8682">+'</st>`<st c="8684">.
    使用</st> `<st c="8690">select()</st>` <st c="8698">命令从下拉菜单中选择一个选项。</st> <st c="8754">然后</st>
    `<st c="8759">should()</st>` <st c="8771">函数用来对应用程序的状态做出声明。</st>
- en: <st c="8843">The following line is used to enter</st> `<st c="8880">'3'</st>`
    <st c="8883">in the calculator’s first input field.</st> <st c="8923">The</st>
    `<st c="8927">cy.get()</st>` <st c="8935">function is used to obtain DOM elemen</st><st
    c="8973">ts.</st> <st c="8978">The</st> `<st c="8982">last()</st>` <st c="8988">function
    is used to obtain the last element of the set of corresponding elemen</st><st
    c="9067">ts.</st> <st c="9072">The</st> `<st c="9076">type()</st>` <st c="9082">command
    is used to type into a text</st> <st c="9119">input field.</st>
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="8843">以下行用于在计算器的第一个输入字段中输入</st> `<st c="8880">'3'</st>` <st c="8883">。</st>
    <st c="8923">使用</st> `<st c="8927">cy.get()</st>` <st c="8935">函数来获取DOM元素。</st>
    <st c="8973">然后</st> `<st c="8978">last()</st>` <st c="8988">函数用来获取相应元素集合的最后一个元素。</st>
    <st c="9072">接着</st> `<st c="9076">type()</st>` <st c="9082">命令用来在文本输入字段中输入。</st>
- en: <st c="9131">Then, click on the button to perform the calculation.</st> <st
    c="9186">The</st> `<st c="9190">click()</st>` <st c="9197">command is used to
    simulate a</st> <st c="9228">mouse click.</st>
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="9131">然后，点击按钮进行计算。</st> <st c="9186">使用</st> `<st c="9190">click()</st>`
    <st c="9197">命令来模拟鼠标点击。</st>
- en: <st c="9240">Finally, the last line of code checks that the result of the calculation
    (</st>`<st c="9315">'8'</st>`<st c="9319">) is displayed correctly.</st> <st c="9346">The</st>
    `<st c="9350">should()</st>` <st c="9358">function is again used to make</st>
    <st c="9390">this assertion.</st>
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="9240">最后，代码的最后一行检查计算结果（</st>`<st c="9315">'8'</st>`<st c="9319">)是否正确显示。</st>
    <st c="9346">然后</st> `<st c="9350">should()</st>` <st c="9358">函数再次被用来进行这个断言。</st>
- en: <st c="9405">In our browser, we have</st> <st c="9429">this result:</st>
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="9405">在我们的浏览器中，我们得到</st> <st c="9429">以下结果：</st>
- en: "![Fig\uFEFFure 8.3 – The “adds two positive numbers correctly” E2E test succeeded](img/B21146_08_3.jpg)"
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![图8.3 – “正确添加两个正数”的端到端测试成功](img/B21146_08_3.jpg)'
- en: <st c="9660">Fig</st><st c="9663">ure 8.3 – The “adds two positive numbers correctly”
    E2E test succeeded</st>
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="9660">图</st><st c="9663">8.3 – “正确添加两个正数”的端到端测试成功</st>
- en: <st c="9734">In the next section, we’ll learn how to correctly add two</st>
    <st c="9793">negative numbers.</st>
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="9734">在下一节中，我们将学习如何正确地添加两个</st> <st c="9793">负数。</st>
- en: <st c="9810">Adds two negative numbers correctly</st>
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="9810">正确地添加两个负数</st>
- en: <st c="9846">In this test case, we will see how</st> <st c="9881">to write the
    E2E test to add two</st> <st c="9915">negative numbers:</st>
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="9846">在这个测试用例中，我们将看到如何编写添加两个</st> <st c="9881">负数的端到端测试：</st> <st c="9915">负数：</st>
- en: '[PRE3]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: <st c="10215">The</st> `<st c="10220">it()</st>` <st c="10224">function is used
    to define an individual test case.</st> <st c="10277">The first argument is a
    string describing what the test case is supposed to do.</st> <st c="10357">In
    this case, it is</st> `<st c="10377">'adds two positive</st>` `<st c="10396">numbers
    correctly'</st>`<st c="10414">.</st>
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: <st c="10415">The</st> `<st c="10420">cy.visit()</st>` <st c="10430">command
    is used to visit a URL.</st> <st c="10463">Here, it’s the URL that leads to our
    calculator’s</st> <st c="10513">user interface.</st>
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: <st c="10528">The following line is used to enter</st> `<st c="10565">'-5'</st>`
    <st c="10569">in the calculator’s first input field.</st> <st c="10609">The</st>
    `<st c="10613">cy.get()</st>` <st c="10621">function is used to obtain elements
    from the</st> <st c="10667">DOM.</st> <st c="10672">The</st> `<st c="10676">first()</st>`
    <st c="10683">function is used to obtain the first element of the set of corresponding
    eleme</st><st c="10762">nts.</st> <st c="10768">The</st> `<st c="10772">type()</st>`
    <st c="10778">command is used to type into a text</st> <st c="10815">input field.</st>
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: <st c="10827">Then, select the</st> `<st c="10845">'+'</st>` <st c="10848">operator
    from the drop-down menu on our user interface and check that the selected value
    is indeed</st> `<st c="10948">'+'</st>`<st c="10951">. The</st> `<st c="10957">select()</st>`
    <st c="10965">command is used to select an option from a drop-down menu.</st>
    <st c="11025">The</st> `<st c="11029">should()</st>` <st c="11037">function is
    used to make statements about the state of</st> <st c="11093">the application.</st>
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: <st c="11109">The following line is used to enter</st> `<st c="11146">'-3'</st>`
    <st c="11150">in the calculator’s first input field.</st> <st c="11190">The</st>
    `<st c="11194">cy.get()</st>` <st c="11202">function is used to obtain DOM eleme</st><st
    c="11239">nts.</st> <st c="11245">The</st> `<st c="11249">last()</st>` <st c="11255">function
    is used to obtain the last element of the set of corresponding eleme</st><st c="11333">nts.</st>
    <st c="11339">The</st> `<st c="11343">type()</st>` <st c="11349">command is used
    to type into a text</st> <st c="11386">input field.</st>
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: <st c="11398">Then click on the button to perform the calculation.</st> <st
    c="11452">The</st> `<st c="11456">click()</st>` <st c="11463">command is used
    to simulate a</st> <st c="11494">mouse click.</st>
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: <st c="11506">Finally, the last line of code checks that the result of the calculation
    (</st>`<st c="11581">'-8'</st>`<st c="11586">) is displayed correctly.</st> <st
    c="11613">The</st> `<st c="11617">should()</st>` <st c="11625">function is again
    used to make</st> <st c="11657">this assertion.</st>
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: <st c="11672">And in our browser, we have</st> <st c="11700">the</st> <st c="11705">following
    result:</st>
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.4 – The “adds two negative numbers correctly” E2E test succeeded](img/B21146_08_4.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
- en: <st c="11963">Figure 8.4 – The “adds two negative numbers correctly” E2E test
    succeeded</st>
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: <st c="12036">In the next section, we’ll learn how to correctly add one positive
    number and one</st> <st c="12119">negative number.</st>
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: <st c="12135">Adds one positive number and one negative number correctly</st>
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="12194">In this test case, we will see how</st> <st c="12229">to write
    the E2E test to add one positive number and one</st> <st c="12287">negative number:</st>
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: <st c="12607">The</st> `<st c="12612">it()</st>` <st c="12616">function is used
    to define an individual test case.</st> <st c="12669">The first argument is a
    string describing what the test case is supposed to do.</st> <st c="12749">In
    this case, it is</st> `<st c="12769">'adds two positive</st>` `<st c="12788">numbers
    correctly'</st>`<st c="12806">.</st>
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: <st c="12807">The</st> `<st c="12812">cy.visit()</st>` <st c="12822">command
    is used to visit a URL.</st> <st c="12855">Here, it’s the URL that leads to our
    calculator’s</st> <st c="12905">user interface.</st>
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: <st c="12920">The following line is used to enter the number</st> `<st c="12968">'5'</st>`
    <st c="12971">in the calculator’s first input field.</st> <st c="13011">The</st>
    `<st c="13015">cy.get()</st>` <st c="13023">function is used to obtain elements
    from the DOM.</st> <st c="13074">The</st> `<st c="13078">first()</st>` <st c="13085">function
    is used to obtain the first element of the set of corresponding elements.</st>
    <st c="13169">The</st> `<st c="13173">type()</st>` <st c="13179">command is used
    to type into a text</st> <st c="13216">input field.</st>
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: <st c="13228">Then, select the</st> `<st c="13246">'+'</st>` <st c="13249">operator
    from the drop-down menu on our user interface and check that the selected value
    is indeed</st> `<st c="13349">'+'</st>`<st c="13352">. The</st> `<st c="13358">select()</st>`
    <st c="13366">command is used to select an option from a drop-down menu.</st>
    <st c="13426">The</st> `<st c="13430">should()</st>` <st c="13438">function is
    used to make statements about the state of</st> <st c="13494">the application.</st>
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: <st c="13510">The following line is used to enter the number</st> `<st c="13558">'-3'</st>`
    <st c="13562">in the calculator’s first input field.</st> <st c="13602">The</st>
    `<st c="13606">cy.get()</st>` <st c="13614">function is used to obtain DOM elements.</st>
    <st c="13656">The</st> `<st c="13660">last()</st>` <st c="13666">function is used
    to obtain the last element of the set of corresponding elements.</st> <st c="13749">The</st>
    `<st c="13753">type()</st>` <st c="13759">command is used to type into a text</st>
    <st c="13796">input field.</st>
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: <st c="13808">Then, click on the button to perform the calculation.</st> <st
    c="13863">The</st> `<st c="13867">click()</st>` <st c="13874">command is used
    to simulate a</st> <st c="13905">mouse click.</st>
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: <st c="13917">Finally, the last line of code checks</st> <st c="13955">that
    the result of the calculation (</st>`<st c="13992">'2'</st>`<st c="13996">) is
    displayed correctly.</st> <st c="14023">The</st> `<st c="14027">should()</st>`
    <st c="14035">function is again used to make</st> <st c="14067">this assertion.</st>
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: <st c="14082">And in our browser, we have the</st> <st c="14115">following result:</st>
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.5 – The “adds one positive number and one negative number correctly”
    E2E test succeeded](img/B21146_08_5.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
- en: <st c="14342">Figure 8.5 – The “adds one positive number and one negative number
    correctly” E2E test succeeded</st>
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: <st c="14438">In the next section, we’ll look at the context</st> <st c="14486">of
    subtraction.</st>
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: <st c="14501">Subtraction context</st>
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="14521">In this section, we’ll look at the various E2E test cases related</st>
    <st c="14588">to subtraction.</st>
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: <st c="14603">Subtracts two positive numbers correctly</st>
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="14644">In this test case, we will see how</st> <st c="14679">to write
    the E2E test to subtract two</st> <st c="14718">positive numbers:</st>
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: <st c="15020">The</st> `<st c="15025">it()</st>` <st c="15029">function is used
    to define an individual test case.</st> <st c="15082">The first argument is a
    string describing what the test case is supposed to do.</st> <st c="15162">In
    this case, it is</st> `<st c="15182">'subtracts two positive</st>` `<st c="15206">numbers
    correctly'</st>`<st c="15224">.</st>
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: <st c="15225">The</st> `<st c="15230">cy.visit()</st>` <st c="15240">command
    is used to visit a URL.</st> <st c="15273">Here, it’s the URL that leads to our
    calculator’s</st> <st c="15323">user interface.</st>
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: <st c="15338">The following line is used to enter the number</st> `<st c="15386">'5'</st>`
    <st c="15389">in the calculator’s first input field.</st> <st c="15429">The</st>
    `<st c="15433">cy.get()</st>` <st c="15441">function is used to obtain elements
    from the DOM.</st> <st c="15492">The</st> `<st c="15496">first()</st>` <st c="15503">function
    is used to obtain the first element of the set of corresponding elements.</st>
    <st c="15587">The</st> `<st c="15591">type()</st>` <st c="15597">command is used
    to type into a text</st> <st c="15634">input field.</st>
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: <st c="15646">Then, select the</st> `<st c="15664">'-'</st>` <st c="15667">operator
    from the drop-down menu on our user interface and check that the selected value
    is indeed</st> `<st c="15767">'-'</st>`<st c="15770">. The</st> `<st c="15776">select()</st>`
    <st c="15784">command is used to select an option from a drop-down menu.</st>
    <st c="15844">The</st> `<st c="15848">should()</st>` <st c="15856">function is
    used to make statements about the state of</st> <st c="15912">the application.</st>
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: <st c="15928">The following line is used to enter</st> <st c="15965">the number</st>
    `<st c="15976">'3'</st>` <st c="15979">in the calculator’s first input field.</st>
    <st c="16019">The</st> `<st c="16023">cy.get()</st>` <st c="16031">function is
    used to obtain DOM elements.</st> <st c="16073">The</st> `<st c="16077">last()</st>`
    <st c="16083">function is used to obtain the last element of the set of corresponding
    elements.</st> <st c="16166">The</st> `<st c="16170">type()</st>` <st c="16176">command
    is used to type into a text</st> <st c="16213">input field.</st>
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="15928">以下行用于在计算器的第一个输入字段中输入</st> <st c="15965">数字</st> `<st c="15976">'3'</st>`
    <st c="15979">。</st> <st c="16019">使用</st> `<st c="16023">cy.get()</st>` <st c="16031">函数获取DOM元素。</st>
    <st c="16073">使用</st> `<st c="16077">last()</st>` <st c="16083">函数获取相应元素集合的最后一个元素。</st>
    <st c="16166">使用</st> `<st c="16170">type()</st>` <st c="16176">命令在文本输入字段中输入。</st>
- en: <st c="16225">Then, click on the button to perform the calculation.</st> <st
    c="16280">The</st> `<st c="16284">click()</st>` <st c="16291">command is used
    to simulate a</st> <st c="16322">mouse click.</st>
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="16225">然后，点击按钮执行计算。</st> <st c="16280">使用</st> `<st c="16284">click()</st>`
    <st c="16291">命令模拟鼠标点击。</st>
- en: <st c="16334">Finally, the last line of code checks that the result of the calculation
    (</st>`<st c="16409">'2'</st>`<st c="16413">) is displayed correctly.</st> <st
    c="16440">The</st> `<st c="16444">should()</st>` <st c="16452">function is again
    used to make</st> <st c="16484">this assertion.</st>
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="16334">最后，代码的最后一行检查计算结果（</st>`<st c="16409">'2'</st>`<st c="16413">）是否正确显示。</st>
    <st c="16440">再次使用</st> `<st c="16444">should()</st>` <st c="16452">函数来执行这个断言。</st>
- en: <st c="16499">And in our browser, we have</st> <st c="16528">this result:</st>
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="16499">在我们的浏览器中，我们得到以下结果：</st>
- en: '![Figure 8.6 – The “subtracts two positive numbers correctly” E2E test succeeded](img/B21146_08_6.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![图8.6 – “正确减去两个正数”的端到端测试成功](img/B21146_08_6.jpg)'
- en: <st c="16759">Figure 8.6 – The “subtracts two positive numbers correctly” E2E
    test succeeded</st>
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="16759">图8.6 – “正确减去两个正数”的端到端测试成功</st>
- en: <st c="16837">In the next section, we’ll learn how to correctly subtract two</st>
    <st c="16901">negative numbers.</st>
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="16837">在下一节中，我们将学习如何正确减去两个</st> <st c="16901">负数。</st>
- en: <st c="16918">Subtracts two negative numbers correctly</st>
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="16918">正确减去两个负数</st>
- en: <st c="16959">In this test case, we will</st> <st c="16986">see how to write
    the E2E test to subtract two</st> <st c="17033">negative numbers:</st>
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="16959">在这个测试用例中，我们将</st> <st c="16986">了解如何编写减去两个</st> <st c="17033">负数的端到端测试：</st>
- en: '[PRE6]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: <st c="17338">In the preceding code, the</st> `<st c="17366">it()</st>` <st
    c="17370">function is used to define an individual test case.</st> <st c="17423">The
    first argument is a string describing what the test case is supposed to do.</st>
    <st c="17503">In this case, it is</st> `<st c="17523">'subtracts two negative</st>`
    `<st c="17547">numbers correctly'</st>`<st c="17565">.</st>
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="17338">在前面的代码中，使用</st> `<st c="17366">it()</st>` <st c="17370">函数定义一个单独的测试用例。</st>
    <st c="17423">第一个参数是一个字符串，描述测试用例应该做什么。</st> <st c="17503">在这种情况下，它是</st> `<st
    c="17523">'subtracts two negative</st>` `<st c="17547">numbers correctly'</st>`<st
    c="17565">。</st>
- en: <st c="17566">The</st> `<st c="17571">cy.visit()</st>` <st c="17581">command
    is used to visit a URL.</st> <st c="17614">Here, it’s the URL that leads to our
    calculator’s</st> <st c="17664">user interface.</st>
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="17566">使用</st> `<st c="17571">cy.visit()</st>` <st c="17581">命令来访问一个URL。</st>
    <st c="17614">在这里，这是通向我们的计算器用户界面的URL。</st>
- en: <st c="17679">The following line is used to enter the number</st> `<st c="17727">'-5'</st>`
    <st c="17731">in the calculator’s first input field.</st> <st c="17771">The</st>
    `<st c="17775">cy.get()</st>` <st c="17783">function is used to obtain elements
    from the DOM.</st> <st c="17834">The</st> `<st c="17838">first()</st>` <st c="17845">function
    is used to obtain the first element of the set of corresponding elements.</st>
    <st c="17929">The</st> `<st c="17933">type()</st>` <st c="17939">command is used
    to type into a text</st> <st c="17976">input field.</st>
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="17679">以下行用于在计算器的第一个输入字段中输入数字</st> `<st c="17727">'-5'</st>` <st c="17731">。</st>
    <st c="17771">使用</st> `<st c="17775">cy.get()</st>` <st c="17783">函数从DOM中获取元素。</st>
    <st c="17834">使用</st> `<st c="17838">first()</st>` <st c="17845">函数获取相应元素集合的第一个元素。</st>
    <st c="17929">使用</st> `<st c="17933">type()</st>` <st c="17939">命令在文本输入字段中输入。</st>
- en: <st c="17988">Then, select the</st> `<st c="18006">'-'</st>` <st c="18009">operator
    from the drop-down menu on our user interface and check that the selected value
    is indeed</st> `<st c="18109">'-'</st>`<st c="18112">. The</st> `<st c="18118">select()</st>`
    <st c="18126">command is used to select an option from a drop-down menu.</st>
    <st c="18186">The</st> `<st c="18190">should()</st>` <st c="18198">function is
    used to make statements about the state of</st> <st c="18254">the application.</st>
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: <st c="18270">The following line is used to enter the number</st> `<st c="18318">'-3'</st>`
    <st c="18322">in the calculator’s first input field.</st> <st c="18362">The</st>
    `<st c="18366">cy.get()</st>` <st c="18374">function is used to obtain DOM elements.</st>
    <st c="18416">The</st> `<st c="18420">last()</st>` <st c="18426">function is used
    to obtain the last element of the set of corresponding elements.</st> <st c="18509">The</st>
    `<st c="18513">type()</st>` <st c="18519">command is used to type into a text</st>
    <st c="18556">input field.</st>
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: <st c="18568">Then, click on the button to perform the calculation.</st> <st
    c="18623">The</st> `<st c="18627">click()</st>` <st c="18634">command is used
    to simulate a</st> <st c="18665">mouse click.</st>
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: <st c="18677">Finally, the last line of code checks that the result of the calculation
    (</st>`<st c="18752">'-2'</st>`<st c="18757">) is displayed correctly.</st> <st
    c="18784">The</st> `<st c="18788">should()</st>` <st c="18796">function is again
    used to make</st> <st c="18828">this assertion.</st>
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: <st c="18843">And in our browser, we have</st> <st c="18871">this result:</st>
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.7 – The “subtracts two negative numbers correctly” E2E test succeeded](img/B21146_08_7.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
- en: <st c="19071">Figure 8.7 – The “subtracts two negative numbers correctly” E2E
    test succeeded</st>
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: <st c="19149">In the next section, we’ll learn how to correctly subtract one
    positive number and one</st> <st c="19237">negative number.</st>
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: <st c="19253">Subtracts one positive number and one negative number correctly</st>
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="19317">In this test case, we will see how</st> <st c="19352">to write
    the E2E test to subtract one positive number and one</st> <st c="19415">negative
    number:</st>
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: <st c="19741">The</st> `<st c="19746">it()</st>` <st c="19750">function is used
    to define an individual test case.</st> <st c="19803">The first argument is a
    string describing what the test case is supposed to do.</st> <st c="19883">In
    this case, it is</st> `<st c="19903">'subtracts one positive number and one negative</st>`
    `<st c="19951">number correctly'</st>`<st c="19968">.</st>
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: <st c="19969">The</st> `<st c="19974">cy.visit()</st>` <st c="19984">command
    is used to visit a URL.</st> <st c="20017">Here, it’s the URL that leads to our
    calculator’s</st> <st c="20067">user interface.</st>
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: <st c="20082">The following line is used to enter the number</st> `<st c="20130">'5'</st>`
    <st c="20133">in the calculator’s first input field.</st> <st c="20173">The</st>
    `<st c="20177">cy.get()</st>` <st c="20185">function is used to obtain elements
    from</st> <st c="20227">the DOM.</st> <st c="20236">The</st> `<st c="20240">first()</st>`
    <st c="20247">function is used to obtain the first element of the set of corresponding
    e</st><st c="20322">lements.</st> <st c="20332">The</st> `<st c="20336">type()</st>`
    <st c="20342">command is used to type into a text</st> <st c="20379">input field.</st>
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: <st c="20391">Then, select the</st> `<st c="20409">'-'</st>` <st c="20412">operator
    from the drop-down menu on our user interface and check that the selected value
    is ind</st><st c="20508">eed</st> `<st c="20513">'-'</st>`<st c="20516">. The</st>
    `<st c="20522">select()</st>` <st c="20530">command is used to select an option
    from a drop-do</st><st c="20581">wn menu.</st> <st c="20591">The</st> `<st c="20595">should()</st>`
    <st c="20603">function is used to make statements about the state of</st> <st
    c="20659">the application.</st>
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: <st c="20675">The following line is used to enter the number</st> `<st c="20723">'-3'</st>`
    <st c="20727">in the calculator’s first input field.</st> <st c="20767">The</st>
    `<st c="20771">cy.get()</st>` <st c="20779">function is used to obtain DOM elements.</st>
    <st c="20821">The</st> `<st c="20825">last()</st>` <st c="20831">function is used
    to obtain the last element of the set of corresponding e</st><st c="20905">lements.</st>
    <st c="20915">The</st> `<st c="20919">type()</st>` <st c="20925">command is used
    to type into a text</st> <st c="20962">input field.</st>
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: <st c="20974">Then, click on the button to perform the calc</st><st c="21020">ulation.</st>
    <st c="21030">The</st> `<st c="21034">click()</st>` <st c="21041">command is used
    to simulate a</st> <st c="21072">mouse click.</st>
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: <st c="21084">Finally, the last line of code checks that the result of the calculation
    (</st>`<st c="21159">'8'</st>`<st c="21163">) is displayed co</st><st c="21181">rrectly.</st>
    <st c="21191">The</st> `<st c="21195">should()</st>` <st c="21203">function is
    again used to make</st> <st c="21235">this assertion.</st>
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: <st c="21250">And in our browser, we have</st> <st c="21278">this result:</st>
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.8 – The “subtracts two negative numbers correctly” E2E test succeeded](img/B21146_08_8.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
- en: <st c="21522">Figure 8.8 – The “subtracts two negative numbers correctly” E2E
    test succeeded</st>
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: <st c="21600">In the next section, we’ll look at the context</st> <st c="21648">of
    multiplication.</st>
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: <st c="21666">Multiplication context</st>
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="21689">In this section, we’ll look at the various E2E test cases related</st>
    <st c="21756">to multiplication.</st>
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: <st c="21774">Multiplies non-zero number and zero correctly</st>
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="21820">In this test case, we will see how</st> <st c="21855">to write
    the E2E test to multiply a non-zero numbe</st><st c="21906">r</st> <st c="21909">and
    zero:</st>
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: <st c="22208">The</st> `<st c="22213">it()</st>` <st c="22217">function is used
    to define an individual test case.</st> <st c="22270">The first argument is a
    string describing what the test case is supposed to do.</st> <st c="22350">In
    this case, it is</st> `<st c="22370">'multiplies non-zero number and</st>` `<st
    c="22402">zero correctly'</st>`<st c="22417">.</st>
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: <st c="22418">The</st> `<st c="22423">cy.visit()</st>` <st c="22433">command
    is used to visit a URL.</st> <st c="22466">Here, it’s the URL that leads to our
    calculator’s</st> <st c="22516">user interface.</st>
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: <st c="22531">The following line is used to enter the number</st> `<st c="22579">'5'</st>`
    <st c="22582">in the calculator’s first input field.</st> <st c="22622">The</st>
    `<st c="22626">cy.get()</st>` <st c="22634">function is used to obtain elements
    from</st> <st c="22675">the DOM.</st> <st c="22685">The</st> `<st c="22689">first()</st>`
    <st c="22696">function is used to obtain the first element of the set of corresponding</st>
    <st c="22770">elements.</st> <st c="22780">The</st> `<st c="22784">type()</st>`
    <st c="22790">command is used to type into a text</st> <st c="22827">input field.</st>
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: <st c="22839">Then, select the</st> `<st c="22857">'*'</st>` <st c="22860">operator
    from the drop-down menu on our user interface and check that the selected value
    is in</st><st c="22955">deed</st> `<st c="22961">'*'</st>`<st c="22964">. The</st>
    `<st c="22970">select()</st>` <st c="22978">command is used to select an option
    from a drop-d</st><st c="23028">own menu.</st> <st c="23039">The</st> `<st c="23043">should()</st>`
    <st c="23051">function is used to make statements about the state of</st> <st
    c="23107">the application.</st>
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: <st c="23123">The following line is used to enter the number</st> `<st c="23171">'0'</st>`
    <st c="23174">in the calculator’s first input field.</st> <st c="23214">The</st>
    `<st c="23218">cy.get()</st>` <st c="23226">function is used to obtain DOM elements.</st>
    <st c="23268">The</st> `<st c="23272">last()</st>` <st c="23278">function is used
    to obtain the last element of the set of corresponding</st> <st c="23351">elements.</st>
    <st c="23361">The</st> `<st c="23365">type()</st>` <st c="23371">command is used
    to type into a text</st> <st c="23408">input field.</st>
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: <st c="23420">Then, click on the button to perform the cal</st><st c="23465">culation.</st>
    <st c="23476">The</st> `<st c="23480">click()</st>` <st c="23487">command is used
    to simulate a</st> <st c="23518">mouse click.</st>
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: <st c="23530">Finally, the last line of code checks that the result of the calculation
    (</st>`<st c="23605">'0'</st>`<st c="23609">) is displayed c</st><st c="23626">orrectly.</st>
    <st c="23637">The</st> `<st c="23641">should()</st>` <st c="23649">function is
    again used to make</st> <st c="23681">this assertion.</st>
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: <st c="23696">And in our browser, we</st> <st c="23719">have</st> <st c="23725">this
    result:</st>
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.9 – The “multiplies non-zero number and zero correctly” E2E test
    succeeded](img/B21146_08_9.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
- en: <st c="23986">Figure 8.9 – The “multiplies non-zero number and zero correctly”
    E2E test succeeded</st>
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: <st c="24069">In the next section, we’ll learn how to correctly multiply two</st>
    <st c="24133">positive numbers.</st>
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: <st c="24150">Multiplies two positive numbers correctly</st>
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="24192">In this test case, we will see</st> <st c="24223">how to write
    the E2E test to multiply two</st> <st c="24266">positive numbers:</st>
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: <st c="24570">The</st> `<st c="24575">it()</st>` <st c="24579">function is used
    to define an individual test case.</st> <st c="24632">The first argument is a
    string describing what the test case is supposed to do.</st> <st c="24712">In
    this case, it is</st> `<st c="24732">'multiplies two positive</st>` `<st c="24757">numbers
    correctly'</st>`<st c="24775">.</st>
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: <st c="24776">The</st> `<st c="24781">cy.visit()</st>` <st c="24791">command
    is used to visit a URL.</st> <st c="24824">Here, it’s the URL that leads to our
    calculator’s</st> <st c="24874">user interface.</st>
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: <st c="24889">The following line is used to enter the number</st> `<st c="24937">'5'</st>`
    <st c="24940">in the calculator’s first input field.</st> <st c="24980">The</st>
    `<st c="24984">cy.get()</st>` <st c="24992">function is used to obtain elements
    fro</st><st c="25032">m the DOM.</st> <st c="25044">The</st> `<st c="25048">first()</st>`
    <st c="25055">function is used to obtain the first element of the set of corresponding</st>
    <st c="25128">elements.</st> <st c="25139">The</st> `<st c="25143">type()</st>`
    <st c="25149">command is used to type into a text</st> <st c="25186">input field.</st>
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: <st c="25198">Then, select the</st> `<st c="25216">'*'</st>` <st c="25219">operator
    from the drop-down menu on our user interface and check that the selected value
    is i</st><st c="25313">ndeed</st> `<st c="25320">'*'</st>`<st c="25323">. The</st>
    `<st c="25329">select()</st>` <st c="25337">command is used to select an option
    from a drop-</st><st c="25386">down menu.</st> <st c="25398">The</st> `<st c="25402">should()</st>`
    <st c="25410">function is used to make statements about the state of</st> <st
    c="25466">the application.</st>
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: <st c="25482">The following line is used to en</st><st c="25515">ter the number</st>
    `<st c="25531">'3'</st>` <st c="25534">in the calculator’s first input field.</st>
    <st c="25574">The</st> `<st c="25578">cy.get()</st>` <st c="25586">function is
    used to obtain DOM elements.</st> <st c="25628">The</st> `<st c="25632">last()</st>`
    <st c="25638">function is used to obtain the last element of the set of corresponding</st>
    <st c="25710">elements.</st> <st c="25721">The</st> `<st c="25725">type()</st>`
    <st c="25731">command is used to type into a text</st> <st c="25768">input field.</st>
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: <st c="25780">Then, click on the button to perform the ca</st><st c="25824">lculation.</st>
    <st c="25836">The</st> `<st c="25840">click()</st>` <st c="25847">command is used
    to simulate a</st> <st c="25878">mouse click.</st>
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: <st c="25890">Finally, the last line of code checks that the result of the calculation
    (</st>`<st c="25965">'15'</st>`<st c="25970">) is displayed</st> <st c="25986">correctly.</st>
    <st c="25997">The</st> `<st c="26001">should()</st>` <st c="26009">function is
    again used to make</st> <st c="26041">this assertion.</st>
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: <st c="26056">And in our browser, we have</st> <st c="26084">this result:</st>
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.10 – The “multiplies two positive numbers correctly” E2E test succeeded](img/B21146_08_10.jpg)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
- en: <st c="26303">Figure 8.10 – The “multiplies two positive numbers correctly”
    E2E test succeeded</st>
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: <st c="26383">In the next section, we’ll learn how to correctly multiply two</st>
    <st c="26447">negative numbers.</st>
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: <st c="26464">Multiplies two negative numbers correctly</st>
  id: totrans-154
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="26506">In this test case, we will see</st> <st c="26537">how to write
    the E2E test to multiply two</st> <st c="26580">negative numbers:</st>
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: <st c="26886">The</st> `<st c="26891">it()</st>` <st c="26895">function is used
    to define an individual test case.</st> <st c="26948">The first argument is a
    string describing what the test case is supposed to do.</st> <st c="27028">In
    this case, it is</st> `<st c="27048">'multiplies two negative</st>` `<st c="27073">numbers
    correctly'</st>`<st c="27091">.</st>
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: <st c="27092">The</st> `<st c="27097">cy.visit()</st>` <st c="27107">command
    is used to visit a URL.</st> <st c="27140">Here, it’s the URL that leads to our
    calculator’s</st> <st c="27190">user interface.</st>
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: <st c="27205">The following line is used to enter the number</st> `<st c="27253">'-5'</st>`
    <st c="27257">in the calculator’s first input field.</st> <st c="27297">The</st>
    `<st c="27301">cy.get()</st>` <st c="27309">function is used to obtain elements
    fr</st><st c="27348">om the DOM.</st> <st c="27361">The</st> `<st c="27365">first()</st>`
    <st c="27372">function is used to obtain the first element of the set of correspondin</st><st
    c="27444">g elements.</st> <st c="27457">The</st> `<st c="27461">type()</st>`
    <st c="27467">command is used to type into a text</st> <st c="27504">input field.</st>
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: <st c="27516">Then, select the</st> `<st c="27534">'*'</st>` <st c="27537">operator
    from the drop-down menu on our user interface and check that the selected value
    is</st> <st c="27630">indeed</st> `<st c="27637">'*'</st>`<st c="27640">. The</st>
    `<st c="27646">select()</st>` <st c="27654">command is used to select an option
    from a drop</st><st c="27702">-down menu.</st> <st c="27715">The</st> `<st c="27719">should()</st>`
    <st c="27727">function is used to make statements about the state of</st> <st
    c="27783">the application.</st>
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: <st c="27799">The following line is used to enter the number</st> `<st c="27847">'-3'</st>`
    <st c="27851">in the calculator’s first input field.</st> <st c="27891">The</st>
    `<st c="27895">cy.get()</st>` <st c="27903">function is used to obtain DOM elements.</st>
    <st c="27945">The</st> `<st c="27949">last()</st>` <st c="27955">function is used
    to obtain the last element of the set of correspondin</st><st c="28026">g elements.</st>
    <st c="28039">The</st> `<st c="28043">type()</st>` <st c="28049">command is used
    to type into a text</st> <st c="28086">input field.</st>
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: <st c="28098">Then, click on the button to perform the c</st><st c="28141">alculation.</st>
    <st c="28154">The</st> `<st c="28158">click()</st>` <st c="28165">command is used
    to simulate a</st> <st c="28196">mouse click.</st>
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: <st c="28208">Finally, the last line of code checks that the result of the calculation
    (</st>`<st c="28283">'15'</st>`<st c="28288">) is displayed</st> <st c="28303">correctly.</st>
    <st c="28315">The</st> `<st c="28319">should()</st>` <st c="28327">function is
    again used to make</st> <st c="28359">this assertion.</st>
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: <st c="28374">And in our browser, we have</st> <st c="28402">this result:</st>
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.11 – The “multiplies two negative numbers correctly” E2E test succeeded](img/B21146_08_11.jpg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
- en: <st c="28601">Figure 8.11 – The “multiplies two negative numbers correctly”
    E2E test succeeded</st>
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: <st c="28681">In the next section, we’ll learn how to correctly multiply one
    positive number and one</st> <st c="28769">negative number.</st>
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: <st c="28785">Multiplies one positive number and one negative number correctly</st>
  id: totrans-168
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="28850">In this test case, we will see how</st> <st c="28885">to write
    the E2E test to multiply one positive number and one</st> <st c="28948">negative
    number:</st>
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: <st c="29276">The</st> `<st c="29281">it()</st>` <st c="29285">function is used
    to define an individual test case.</st> <st c="29338">The first argument is a
    string describing what the test case is supposed to do.</st> <st c="29418">In
    this case, it is</st> `<st c="29438">'multiplies one positive number and one negative</st>`
    `<st c="29487">number correctly'</st>`<st c="29504">.</st>
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: <st c="29505">The</st> `<st c="29510">cy.visit()</st>` <st c="29520">command
    is used to visit a URL.</st> <st c="29553">Here, it’s the URL that leads to our
    calculator’s</st> <st c="29603">user interface.</st>
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: <st c="29618">The following line is used to enter the number</st> `<st c="29666">'5'</st>`
    <st c="29669">in the calculator’s first input field.</st> <st c="29709">The</st>
    `<st c="29713">cy.get()</st>` <st c="29721">function is used to obtain elements
    f</st><st c="29759">rom the DOM.</st> <st c="29773">The</st> `<st c="29777">first()</st>`
    <st c="29784">function is used to obtain the first element of the set of correspondi</st><st
    c="29855">ng elements.</st> <st c="29869">The</st> `<st c="29873">type()</st>`
    <st c="29879">command is used to type into a text</st> <st c="29916">input field.</st>
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: <st c="29928">Then, select the</st> `<st c="29946">'*'</st>` <st c="29949">operator
    from the drop-down menu on our user interface and check that the selected value
    is</st> <st c="30041">indeed</st> `<st c="30049">'*'</st>`<st c="30052">. The</st>
    `<st c="30058">select()</st>` <st c="30066">command is used to select an option
    from a dro</st><st c="30113">p-down menu.</st> <st c="30127">The</st> `<st c="30131">should()</st>`
    <st c="30139">function is used to make statements about the state of</st> <st
    c="30195">the application.</st>
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: <st c="30211">The following line is used to enter the number</st> `<st c="30259">'-3'</st>`
    <st c="30263">in the calculator’s first input field.</st> <st c="30303">The</st>
    `<st c="30307">cy.get()</st>` <st c="30315">function is used to obtain DOM elements.</st>
    <st c="30357">The</st> `<st c="30361">last()</st>` <st c="30367">function is used
    to obtain the last element of the set of correspondi</st><st c="30437">ng elements.</st>
    <st c="30451">The</st> `<st c="30455">type()</st>` <st c="30461">command is used
    to type into a text</st> <st c="30498">input field.</st>
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: <st c="30510">Then, click on the button to perform the</st> <st c="30552">calculation.</st>
    <st c="30565">The</st> `<st c="30569">click()</st>` <st c="30576">command is used
    to simulate a</st> <st c="30607">mouse click.</st>
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: <st c="30619">Finally, the last line of code</st> <st c="30650">checks that
    the result of the calculation (</st>`<st c="30694">'-15'</st>`<st c="30700">)
    is display</st><st c="30713">ed correctly.</st> <st c="30728">The</st> `<st c="30732">should()</st>`
    <st c="30740">function is again used to make</st> <st c="30772">this assertion.</st>
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: <st c="30787">And in our browser, we have</st> <st c="30816">this result:</st>
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.12 – The “multiplies one positive number and one negative number
    correctly” E2E test succeeded](img/B21146_08_12.jpg)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
- en: <st c="31044">Figure 8.12 – The “multiplies one positive number and one negative
    number correctly” E2E test succeeded</st>
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: <st c="31147">In the next section, we’ll look at the context</st> <st c="31195">of
    division.</st>
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: <st c="31207">Division context</st>
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="31224">In this section, we’ll look at the various E2E test cases related</st>
    <st c="31291">to division.</st>
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: <st c="31303">Divides a positive non-zero number by another positive non-zero
    number</st>
  id: totrans-184
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="31374">In this test case, we will see how to write</st> <st c="31418">the
    E2E test to divide a positive non-zero number by another positive</st> <st c="31489">non-zero
    number:</st>
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: <st c="31822">The</st> `<st c="31827">it()</st>` <st c="31831">function is used
    to define an individual test case.</st> <st c="31884">The first argument is a
    string describing what the test case is supposed to do.</st> <st c="31964">In
    this case, it is</st> `<st c="31984">'divides a positive non-zero number by another
    positive</st>` `<st c="32040">non-zero number'</st>`<st c="32056">.</st>
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: <st c="32057">The</st> `<st c="32062">cy.visit()</st>` <st c="32072">command
    is used to visit a URL.</st> <st c="32105">Here, it’s the URL that leads to our
    calculator’s</st> <st c="32155">user interface.</st>
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: <st c="32170">The following line is used to enter the number</st> `<st c="32218">'5'</st>`
    <st c="32221">in the calculator’s first input field.</st> <st c="32261">The</st>
    `<st c="32265">cy.get()</st>` <st c="32273">function is used to obtain elements
    from the DOM.</st> <st c="32324">The</st> `<st c="32328">first()</st>` <st c="32335">function
    is used to obtain the first element of the set of corresponding elements.</st>
    <st c="32419">The</st> `<st c="32423">type()</st>` <st c="32429">command is used
    to type into a text</st> <st c="32466">input field.</st>
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: <st c="32478">Then, select the</st> `<st c="32496">'/'</st>` <st c="32499">operator
    from the drop-down menu on our user interface and check that the selected value
    is indeed</st> `<st c="32599">'/'</st>`<st c="32602">. The</st> `<st c="32608">select()</st>`
    <st c="32616">command is used to select an option from a drop-down menu.</st>
    <st c="32676">The</st> `<st c="32680">should()</st>` <st c="32688">function is
    used to make statements about the state of</st> <st c="32744">the application.</st>
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: <st c="32760">The following line is used to enter the number</st> `<st c="32808">'2'</st>`
    <st c="32811">in the calculator’s first input field.</st> <st c="32851">The</st>
    `<st c="32855">cy.get()</st>` <st c="32863">function is used to obtain DOM elements.</st>
    <st c="32905">The</st> `<st c="32909">last()</st>` <st c="32915">function is used
    to obtain the last element of the set of corresponding elements.</st> <st c="32998">The</st>
    `<st c="33002">type()</st>` <st c="33008">command is used to type into a text</st>
    <st c="33045">input field.</st>
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: <st c="33057">Then, click on the button to perform the calculation.</st> <st
    c="33112">The</st> `<st c="33116">click()</st>` <st c="33123">command is used
    to simulate a</st> <st c="33154">mouse click.</st>
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: <st c="33166">Finally, the last line of code</st> <st c="33197">checks that
    the result of the calculation (</st>`<st c="33241">'2.5'</st>`<st c="33247">)
    is displayed correctly.</st> <st c="33274">The</st> `<st c="33278">should()</st>`
    <st c="33286">function is again used to make</st> <st c="33318">this assertion.</st>
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: <st c="33333">And in our browser, we have</st> <st c="33362">this result:</st>
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.13 – The “divides a positive non-zero number by another positive
    non-zero number” E2E test succeeded](img/B21146_08_13.jpg)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
- en: <st c="33617">Figure 8.13 – The “divides a positive non-zero number by another
    positive non-zero number” E2E test succeeded</st>
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: <st c="33726">In the next section, we’ll look at the test case for dividing
    a non-zero negative number by a non-zero</st> <st c="33830">positive number.</st>
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: <st c="33846">Divides a negative non-zero number by a positive non-zero number</st>
  id: totrans-198
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="33911">In this test case, we will see how</st> <st c="33946">to write
    the E2E test to divide a negative non-zero number by another positive</st> <st
    c="34026">non-zero number:</st>
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: <st c="34361">The</st> `<st c="34366">it()</st>` <st c="34370">function is used
    to define an individual test case.</st> <st c="34423">The first argument is a
    string describing what the test case is supposed to do.</st> <st c="34503">In
    this case, it is</st> `<st c="34523">'divides a negative non-zero number by another
    positive</st>` `<st c="34579">non-zero number'</st>`<st c="34595">.</st>
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: <st c="34596">The</st> `<st c="34601">cy.visit()</st>` <st c="34611">command
    is used to visit a URL.</st> <st c="34644">Here, it’s the URL that leads to our
    calculator’s</st> <st c="34694">user interface.</st>
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: <st c="34709">The following line is used to enter the number</st> `<st c="34757">'-5'</st>`
    <st c="34761">in the calculator’s first input field.</st> <st c="34801">The</st>
    `<st c="34805">cy.get()</st>` <st c="34813">function is used to obtain elements
    from the DOM.</st> <st c="34864">The</st> `<st c="34868">first()</st>` <st c="34875">function
    is used to obtain the first element of the set of corresponding elements.</st>
    <st c="34959">The</st> `<st c="34963">type()</st>` <st c="34969">command is used
    to type into a text</st> <st c="35006">input field.</st>
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: <st c="35018">Then, select the</st> `<st c="35036">'/'</st>` <st c="35039">operator
    from the drop-down menu on our user interface and check that the selected value
    is indeed</st> `<st c="35139">'/'</st>`<st c="35142">. The</st> `<st c="35148">select()</st>`
    <st c="35156">command is used to select an option from a drop-down menu.</st>
    <st c="35216">The</st> `<st c="35220">should()</st>` <st c="35228">function is
    used to make statements about the state of</st> <st c="35284">the application.</st>
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: <st c="35300">The following line is used to enter the number</st> `<st c="35348">'2'</st>`
    <st c="35351">in the calculator’s first input field.</st> <st c="35391">The</st>
    `<st c="35395">cy.get()</st>` <st c="35403">function is used to obtain DOM elements.</st>
    <st c="35445">The</st> `<st c="35449">last()</st>` <st c="35455">function is used
    to obtain the last element of the set of corresponding elements.</st> <st c="35538">The</st>
    `<st c="35542">type()</st>` <st c="35548">command is used to type into a text</st>
    <st c="35585">input field.</st>
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: <st c="35597">Then, click on the button to perform the calculation.</st> <st
    c="35652">The</st> `<st c="35656">click()</st>` <st c="35663">command is used
    to simulate a</st> <st c="35694">mouse click.</st>
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: <st c="35706">Finally, the last line of code checks that the result of the calculation
    (</st>`<st c="35781">'-2.5'</st>`<st c="35788">) is displayed</st> <st c="35804">correctly.</st>
    <st c="35815">The</st> `<st c="35819">should()</st>` <st c="35827">function is
    again used to make</st> <st c="35859">this assertion.</st>
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: <st c="35874">And in our browser, we have</st> <st c="35903">this result:</st>
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.14 – The “divides a negative non-zero number by another positive
    non-zero number” E2E test succeeded](img/B21146_08_14.jpg)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
- en: <st c="36118">Figure 8.14 – The “divides a negative non-zero number by another
    positive non-zero number” E2E test succeeded</st>
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: <st c="36227">In the next section, we’ll look at the test case for dividing
    a non-zero negative number by another non-zero</st> <st c="36337">negative number.</st>
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: <st c="36353">Divides a negative non-zero number by another negative non-zero
    number</st>
  id: totrans-212
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="36424">In this test case, we will see</st> <st c="36455">how to write
    the E2E test to divide a negative non-zero number by another negative</st> <st
    c="36539">non-zero number:</st>
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: <st c="36874">The</st> `<st c="36879">it()</st>` <st c="36883">function is used
    to define an individual test case.</st> <st c="36936">The first argument is a
    string describing what the test case is supposed to do.</st> <st c="37016">In
    this case, it is</st> `<st c="37036">'divides a negative non-zero number by another
    negative</st>` `<st c="37092">non-zero number'</st>`<st c="37108">.</st>
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: <st c="37109">The</st> `<st c="37114">cy.visit()</st>` <st c="37124">command
    is used to visit a URL.</st> <st c="37157">Here, it’s the URL that leads to our
    calculator’s</st> <st c="37207">user interface.</st>
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: <st c="37222">The following line is used to enter the number</st> `<st c="37270">'-5'</st>`
    <st c="37274">in the calculator’s first input field.</st> <st c="37314">The</st>
    `<st c="37318">cy.get()</st>` <st c="37326">function is used to obtain elements
    from the DOM.</st> <st c="37377">The</st> `<st c="37381">first()</st>` <st c="37388">function
    is used to obtain the first element of the set of corresponding elements.</st>
    <st c="37472">The</st> `<st c="37476">type()</st>` <st c="37482">command is used
    to type into a text</st> <st c="37519">input field.</st>
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: <st c="37531">Then, select the</st> `<st c="37549">'/'</st>` <st c="37552">operator
    from the drop-down menu on our user interface and check that the selected value
    is indeed</st> `<st c="37652">'/'</st>`<st c="37655">. The</st> `<st c="37661">select()</st>`
    <st c="37669">command is used to select an option from a drop-down menu.</st>
    <st c="37729">The</st> `<st c="37733">should()</st>` <st c="37741">function is
    used to make statements about the state of</st> <st c="37797">the application.</st>
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: <st c="37813">The following line is used to enter the number</st> `<st c="37861">'-2'</st>`
    <st c="37865">in the calculator’s first input field.</st> <st c="37905">The</st>
    `<st c="37909">cy.get()</st>` <st c="37917">function is used to obtain DOM elements.</st>
    <st c="37959">The</st> `<st c="37963">last()</st>` <st c="37969">function is used
    to obtain the last element of the set of corresponding elements.</st> <st c="38052">The</st>
    `<st c="38056">type()</st>` <st c="38062">command is used to type into a text</st>
    <st c="38099">input field.</st>
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: <st c="38111">Then, click on the button</st> <st c="38137">to perform the calculation.</st>
    <st c="38166">The</st> `<st c="38170">click()</st>` <st c="38177">command is used
    to simulate a</st> <st c="38208">mouse click.</st>
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: <st c="38220">Finally, the last line of code checks that the result of the calculation
    (</st>`<st c="38295">'2.5'</st>`<st c="38301">) is displayed correctly.</st> <st
    c="38328">The</st> `<st c="38332">should()</st>` <st c="38340">function is again
    used to make</st> <st c="38372">this assertion.</st>
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: <st c="38387">And in our browser, we have</st> <st c="38416">this result:</st>
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.15 – The “divides a negative non-zero number by another negative
    non-zero number” E2E test succeeded](img/B21146_08_15.jpg)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
- en: <st c="38740">Figure 8.15 – The “divides a negative non-zero number by another
    negative non-zero number” E2E test succeeded</st>
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: <st c="38849">In the next section, we’ll look at the test case for dividing
    a non-zero positive number by a non-zero</st> <st c="38953">negative number.</st>
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: <st c="38969">Divides a positive non-zero number by a negative non-zero number</st>
  id: totrans-226
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="39034">In this test case, we will see how</st> <st c="39069">to write
    the E2E test to divide a positive non-zero number by another negative</st> <st
    c="39149">non-zero number:</st>
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: <st c="39484">The</st> `<st c="39489">it()</st>` <st c="39493">function is used
    to define an individual test case.</st> <st c="39546">The first argument is a
    string describing what the test case is supposed to do.</st> <st c="39626">In
    this case, it is</st> `<st c="39646">'divides a positive non-zero number by another
    negative</st>` `<st c="39702">non-zero number'</st>`<st c="39718">.</st>
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: <st c="39719">The</st> `<st c="39724">cy.visit()</st>` <st c="39734">command
    is used to visit a URL.</st> <st c="39767">Here, it’s the URL that leads to our
    calculator’s</st> <st c="39817">user interface.</st>
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: <st c="39832">The following line is used to enter the number</st> `<st c="39880">'5'</st>`
    <st c="39883">in the calculator’s first input field.</st> <st c="39923">The</st>
    `<st c="39927">cy.get()</st>` <st c="39935">function is used to obtain elements
    from the DOM.</st> <st c="39986">The</st> `<st c="39990">first()</st>` <st c="39997">function
    is used to obtain the first element of the set of corresponding elements.</st>
    <st c="40081">The</st> `<st c="40085">type()</st>` <st c="40091">command is used
    to type into a text</st> <st c="40128">input field.</st>
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: <st c="40140">Then, select the</st> `<st c="40158">'/'</st>` <st c="40161">operator
    from the</st> *<st c="40180">drop-down menu</st>* <st c="40194">on our user interface
    and check that the selected value is indeed</st> `<st c="40261">'/'</st>`<st c="40264">.
    The</st> `<st c="40270">select()</st>` <st c="40278">command is used to select
    an option from a drop-down menu.</st> <st c="40338">The</st> `<st c="40342">should()</st>`
    <st c="40350">function is used to make statements about the state of</st> <st
    c="40406">the application.</st>
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: <st c="40422">The following line is used to enter the number</st> `<st c="40470">'-2'</st>`
    <st c="40474">in the calculator’s first input field.</st> <st c="40514">The</st>
    `<st c="40518">cy.get()</st>` <st c="40526">function is used to obtain DOM elements.</st>
    <st c="40568">The</st> `<st c="40572">last()</st>` <st c="40578">function is used
    to obtain the last element of the set of corresponding elements.</st> <st c="40661">The</st>
    `<st c="40665">type()</st>` <st c="40671">command is used to type into a text</st>
    <st c="40708">input field.</st>
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: <st c="40720">Then, click on the button to perform the calculation.</st> <st
    c="40775">The</st> `<st c="40779">click()</st>` <st c="40786">command is used
    to simulate a</st> <st c="40817">mouse click.</st>
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: <st c="40829">Finally, the last line of code checks that the result of the calculation
    (</st>`<st c="40904">'-2.5'</st>`<st c="40911">) is displayed correctly.</st>
    <st c="40938">The</st> `<st c="40942">should()</st>` <st c="40950">function is
    again used to make</st> <st c="40982">this assertion.</st>
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: <st c="40997">And in our browser, we have</st> <st c="41025">this result:</st>
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.16 – The “divides a positive non-zero number by another negative
    non-zero number” E2E test succeeded](img/B21146_08_16.jpg)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
- en: <st c="41334">Figure 8.16 – The “divides a positive non-zero number by another
    negative non-zero number” E2E test succeeded</st>
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: <st c="41443">In the next section, we’ll look at the test case for dividing
    a non-zero positive number</st> <st c="41533">by zero.</st>
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: <st c="41541">Divides a positive non-zero number by zero</st>
  id: totrans-240
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="41584">In this test case, we will see how</st> <st c="41619">to write
    the E2E test to divide a positive non-zero number</st> <st c="41679">by zero:</st>
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: <st c="41981">The</st> `<st c="41986">it()</st>` <st c="41990">function is used
    to define an individual test case.</st> <st c="42043">The first argument is a
    string describing what the test case is supposed to do.</st> <st c="42123">In
    this case, it is</st> `<st c="42143">'divides a positive non-zero number</st>`
    `<st c="42179">by zero'</st>`<st c="42187">.</st>
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: <st c="42188">The</st> `<st c="42193">cy.visit()</st>` <st c="42203">command
    is used to visit a URL.</st> <st c="42236">Here, it’s the URL that leads to our
    calculator’s</st> <st c="42286">user interface.</st>
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: <st c="42301">The following line is used to enter the number</st> `<st c="42349">'5'</st>`
    <st c="42352">in the calculator’s first input field.</st> <st c="42392">The</st>
    `<st c="42396">cy.get()</st>` <st c="42404">function is used to obtain elements
    from the DOM.</st> <st c="42455">The</st> `<st c="42459">first()</st>` <st c="42466">function
    is used to obtain the first element of the set of corresponding elements.</st>
    <st c="42550">The</st> `<st c="42554">type()</st>` <st c="42560">command is used
    to type into a text</st> <st c="42597">input field.</st>
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: <st c="42609">Then, select the</st> `<st c="42627">'/'</st>` <st c="42630">operator
    from the drop-down menu on our user interface and check that the selected value
    is indeed</st> `<st c="42730">'/'</st>`<st c="42733">. The</st> `<st c="42739">select()</st>`
    <st c="42747">command is used to select an option from a drop-down menu.</st>
    <st c="42807">The</st> `<st c="42811">should()</st>` <st c="42819">function is
    used to make statements about the state of</st> <st c="42875">the application.</st>
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: <st c="42891">The following line is used to enter the number</st> `<st c="42939">'0'</st>`
    <st c="42942">in the calculator’s first input field.</st> <st c="42982">The</st>
    `<st c="42986">cy.get()</st>` <st c="42994">function is used to obtain DOM elements.</st>
    <st c="43036">The</st> `<st c="43040">last()</st>` <st c="43046">function is used
    to obtain the last element of the set of corresponding elements.</st> <st c="43129">The</st>
    `<st c="43133">type()</st>` <st c="43139">command is used to type into a text</st>
    <st c="43176">input field.</st>
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: <st c="43188">Then, click on the button to perform the calculation.</st> <st
    c="43243">The</st> `<st c="43247">click()</st>` <st c="43254">command is used
    to simulate a</st> <st c="43285">mouse click.</st>
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: <st c="43297">Finally, the last line of code checks that the result of the calculation
    (</st>`<st c="43372">'Infinity'</st>`<st c="43383">) is displayed correctly.</st>
    <st c="43410">The</st> `<st c="43414">should()</st>` <st c="43422">function is
    again used to make</st> <st c="43454">this assertion.</st>
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: <st c="43469">And in our browser, we have</st> <st c="43497">this result:</st>
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.17 – The “divides a positive non-zero number by zero” E2E test succeeded](img/B21146_08_17.jpg)'
  id: totrans-251
  prefs: []
  type: TYPE_IMG
- en: <st c="43720">Figure 8.17 – The “divides a positive non-zero number by zero”
    E2E test succeeded</st>
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: <st c="43801">In the next section, we’ll look at the test case for dividing
    a non-zero negative number</st> <st c="43891">by zero.</st>
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: <st c="43899">Divides a negative non-zero number by zero</st>
  id: totrans-254
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="43942">In this test case, we will see how</st> <st c="43977">to write
    the E2E test to divide a negative non-zero number</st> <st c="44037">by zero:</st>
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: <st c="44341">The</st> `<st c="44346">it()</st>` <st c="44350">function is used
    to define an individual test case.</st> <st c="44403">The first argument is a
    string describing what the test case is supposed to do.</st> <st c="44483">In
    this case, it is</st> `<st c="44503">'divides a negative non-zero number</st>`
    `<st c="44539">by zero'</st>`<st c="44547">.</st>
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: <st c="44548">The</st> `<st c="44553">cy.visit()</st>` <st c="44563">command
    is used to visit a URL.</st> <st c="44596">Here, it’s the URL that leads to our
    calculator’s</st> <st c="44646">user interface.</st>
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: <st c="44661">The following line is used to enter the number</st> `<st c="44709">'-5'</st>`
    <st c="44713">in the calculator’s first input field.</st> <st c="44753">The</st>
    `<st c="44757">cy.get()</st>` <st c="44765">function is used to obtain elements
    from the DOM.</st> <st c="44816">The</st> `<st c="44820">first()</st>` <st c="44827">function
    is used to obtain the first element of the set of corresponding elements.</st>
    <st c="44911">The</st> `<st c="44915">type()</st>` <st c="44921">command is used
    to type into a text</st> <st c="44958">input field.</st>
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: <st c="44970">Then, select the</st> `<st c="44988">'/'</st>` <st c="44991">operator
    from the drop-down menu on our user interface and check that the selected value
    is indeed</st> `<st c="45091">'/'</st>`<st c="45094">. The</st> `<st c="45100">select()</st>`
    <st c="45108">command is used to select an option from a drop-down menu.</st>
    <st c="45168">The</st> `<st c="45172">should()</st>` <st c="45180">function is
    used to make statements about the state of</st> <st c="45236">the application.</st>
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: <st c="45252">The following line is used to enter the number</st> `<st c="45300">'0'</st>`
    <st c="45303">in the calculator’s first input field.</st> <st c="45343">The</st>
    `<st c="45347">cy.get()</st>` <st c="45355">function is used to obtain DOM elements.</st>
    <st c="45397">The</st> `<st c="45401">last()</st>` <st c="45407">function is used
    to obtain the last element of the set of corresponding elements.</st> <st c="45490">The</st>
    `<st c="45494">type()</st>` <st c="45500">command is used to type into a text</st>
    <st c="45537">input field.</st>
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: <st c="45549">Then, click on the button to perform the calculation.</st> <st
    c="45604">The</st> `<st c="45608">click()</st>` <st c="45615">command is used
    to simulate a</st> <st c="45646">mouse click.</st>
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: <st c="45658">Finally, the last line of code checks that the result of the calculation
    (</st>`<st c="45733">'-Infinity'</st>`<st c="45745">) is displayed correctly.</st>
    <st c="45772">The</st> `<st c="45776">should()</st>` <st c="45784">function is
    again used to make</st> <st c="45816">this assertion.</st>
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: <st c="45831">And in our browser, we have</st> <st c="45859">this result:</st>
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.18 - Divide a negative non-zero number by zero end-to-end test succeeded](img/B21146_08_18.jpg)'
  id: totrans-265
  prefs: []
  type: TYPE_IMG
- en: <st c="46193">Figure 8.18 - Divide a negative non-zero number by zero end-to-end
    test succeeded</st>
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: <st c="46274">In the next section, we’ll look at the test case for dividing
    a non-zero negative number</st> <st c="46364">by zero.</st>
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: <st c="46372">Divides zero by zero</st>
  id: totrans-268
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="46393">In this test case, we will see</st> <st c="46425">how to write
    the E2E test to divide zero</st> <st c="46466">by zero:</st>
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: <st c="46740">The</st> `<st c="46745">it()</st>` <st c="46749">function is used
    to define an individual test case.</st> <st c="46802">The first argument is a
    string describing what the test case is supposed to do.</st> <st c="46882">In
    this case, it is</st> `<st c="46902">'divide zero</st>` `<st c="46915">by zero'</st>`<st
    c="46923">.</st>
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: <st c="46924">The</st> `<st c="46929">cy.visit()</st>` <st c="46939">command
    is used to visit a URL.</st> <st c="46972">Here, it’s the URL that leads to our
    calculator’s</st> <st c="47022">user interface.</st>
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
- en: <st c="47037">The following line is used to enter the number</st> `<st c="47085">'0'</st>`
    <st c="47088">in the calculator’s first input field.</st> <st c="47128">The</st>
    `<st c="47132">cy.get()</st>` <st c="47140">function is used to obtain elements
    from the DOM.</st> <st c="47191">The</st> `<st c="47195">first()</st>` <st c="47202">function
    is used to obtain the first element of the set of corresponding elements.</st>
    <st c="47286">The</st> `<st c="47290">type()</st>` <st c="47296">command is used
    to type into a text</st> <st c="47333">input field.</st>
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
- en: <st c="47345">Then, select the</st> `<st c="47363">'/'</st>` <st c="47366">operator
    from the drop-down menu on our user interface and check that the selected value
    is indeed</st> `<st c="47466">'/'</st>`<st c="47469">. The</st> `<st c="47475">select()</st>`
    <st c="47483">command is used to select an option from a drop-down menu.</st>
    <st c="47543">The</st> `<st c="47547">should()</st>` <st c="47555">function is
    used to make statements about the state of</st> <st c="47611">the application.</st>
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: <st c="47627">The following line is used to enter the number</st> `<st c="47675">'0'</st>`
    <st c="47678">in the calculator’s first input field.</st> <st c="47718">The</st>
    `<st c="47722">cy.get()</st>` <st c="47730">function is used to obtain DOM elements.</st>
    <st c="47772">The</st> `<st c="47776">last()</st>` <st c="47782">function is used
    to obtain the last element of the set of corresponding elements.</st> <st c="47865">The</st>
    `<st c="47869">type()</st>` <st c="47875">command is used to type into a text</st>
    <st c="47912">input field.</st>
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
- en: <st c="47924">Then, click on the button to perform the calculation.</st> <st
    c="47979">The</st> `<st c="47983">click()</st>` <st c="47990">command is used
    to simulate a</st> <st c="48021">mouse click.</st>
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
- en: <st c="48033">Finally, the last line of code checks that the result of the calculation
    (</st>`<st c="48108">'NaN'</st>`<st c="48114">) is displayed correctly.</st> <st
    c="48141">The</st> `<st c="48145">should()</st>` <st c="48153">function is again
    used to make</st> <st c="48185">this assertion.</st>
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
- en: <st c="48200">And in our browser, we have</st> <st c="48228">this result:</st>
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.19 – The “divide zero by zero” E2E test succeeded](img/B21146_08_19.jpg)'
  id: totrans-279
  prefs: []
  type: TYPE_IMG
- en: <st c="48357">Figure 8.19 – The “divide zero by zero” E2E test succeeded</st>
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: <st c="48415">In the next section, we’ll look at what Cypress custom commands
    are and how they can be used to make code easier to maintain</st> <st c="48541">and
    read.</st>
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
- en: <st c="48550">Using Cypress custom commands</st>
  id: totrans-282
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**<st c="48580">Cypress custom commands</st>** <st c="48604">are user-defined
    actions and assertions</st> <st c="48644">that extend the capabilities of the
    Cypress test framework.</st> <st c="48705">They enable testers to encapsulate
    repetitive actions, streamline automation workflows, and optimize test scripts
    for specific needs.</st> <st c="48839">Custom commands can be added or replaced,
    offering a flexible way of interacting with web applications and improving the
    efficiency and readability of</st> <st c="48990">test scripts.</st>'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: <st c="49003">To create a custom command in Cypress, you use the</st> `<st c="49055">Cypress.Commands.add()</st>`
    <st c="49077">method.</st> <st c="49086">This method lets you define a new command
    that can be used throughout your</st> <st c="49161">test suite.</st>
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
- en: <st c="49172">For example, we could create a cu</st><st c="49206">stom command
    to test the</st> `<st c="49232">add()</st>` <st c="49237">operation.</st> <st
    c="49249">To achieve this, we’ll add some code to the</st> `<st c="49293">commands.ts</st>`
    <st c="49304">file in the</st> `<st c="49317">support</st>` <st c="49324">folder
    contained in the</st> `<st c="49349">cypress</st>` <st c="49356">folder:</st>
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: <st c="49839">Here’s a breakdown of</st> <st c="49862">the code:</st>
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
- en: '`<st c="49871">Cypress.Commands.add(''performCalculation'', (firstNumber, operator,
    secondNumber) => {…})</st>`<st c="49960">: This defines a new custom command</st>
    <st c="49996">named</st> `<st c="50003">performCalculation</st>`<st c="50021">.
    This command takes three parameters:</st> `<st c="50060">firstNumber</st>`<st
    c="50071">,</st> `<st c="50073">operator</st>`<st c="50081">,</st> <st c="50083">and</st>
    `<st c="50087">se</st><st c="50089">condNumb</st><st c="50098">er</st>`<st c="50101">.</st>'
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="50102">cy.get(''input'').first().type(firstNumber)</st>`<st c="50144">:
    This selects the first input element on the page and enters the</st> `<st c="50211">firstNumb</st><st
    c="50220">er</st>` <st c="50223">value.</st>'
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="50230">cy.get</st><st c="50237">(''select'').select(operator).should(''have.value'',
    operator)</st>`<st c="50296">: This selects a drop-down list (or selection element)
    and chooses the option corresponding to the operator argument.</st> <st c="50415">It
    then asserts that the selected value corresponds to</st> <st c="50470">th</st><st
    c="50472">e opera</st><st c="50480">tor.</st>'
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="50485">cy.get(''input'').last().type(secondNumber)</st>`<st c="50527">:
    This selects the last input element on the page and types in the</st> `<st c="50595">secondNum</st><st
    c="50604">ber</st>` <st c="50608">value.</st>'
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="50615">cy.get(''button'').click()</st>`<st c="50640">: This clicks
    on a button, presumably to perform</st> <st c="50690">the calculation.</st>'
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="50706">Now, at the level</st> <st c="50725">of our</st> `<st c="50732">calculator.cy.ts</st>`
    <st c="50748">file, we will do the followi</st><st c="50777">ng to set up our</st>
    <st c="50795">E2E test:</st>
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: <st c="50935">Here’s a breakdown of</st> <st c="50958">the code:</st>
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
- en: '`<st c="50967">cy.performCalculation(''5'', ''+'', ''3'')</st>`<st c="51004">:
    A custom command that presumably performs a calculation operation within the application
    being tested.</st> <st c="51110">It takes three arguments: the first number, the
    operator, and the second number.</st> <st c="51191">In this case, it’s</st> <st
    c="51209">adding 5</st> <st c="51219">and 3.</st>'
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="51225">cy.get(''p'').should(''have.text'', ''8'')</st>`<st c="51262">:
    An assertion that checks whether the selected element has the specified text.</st>
    <st c="51343">Here, it’s checking whether the paragraph element contains the</st>
    <st c="51406">text</st> `<st c="51411">''8''</st>`<st c="51414">.</st>'
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="51415">Now, in our browser, we have</st> <st c="51444">this result:</st>
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.20 – The “adds two positive numbers correctly” E2E test succeeded
    using Cypress.Command](img/B21146_08_20.jpg)'
  id: totrans-299
  prefs: []
  type: TYPE_IMG
- en: <st c="51589">Figure 8.20 – The “adds two positive numbers correctly” E2E test
    succeeded using Cypress.Command</st>
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
- en: <st c="51685">Let’s summarize the</st> <st c="51706">chapter now.</st>
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
- en: <st c="51718">Summary</st>
  id: totrans-302
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="51726">This chapter covered the essential aspects of structuring, writing,
    and improving E2E tests using Cypress, a popular testing framework for web applications.</st>
    <st c="51884">It began by explaining the importance of structuring E2E tests to
    ensure they are complete, maintainable, and easy to understand.</st> <st c="52014">This
    involves organizing tests into logical groups using</st> `<st c="52071">describe</st>`
    <st c="52079">and</st> `<st c="52084">it</st>` <st c="52086">blocks, which help
    categorize tests according to the functionality or feature</st> <st c="52165">they
    test.</st>
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
- en: <st c="52175">Writing E2E test cases was a crucial aspect covered in this chapter.</st>
    <st c="52245">It focused on the use of Cypress commands and assertions to interact
    with web elements and verify their behavior.</st> <st c="52359">The chapter provided
    examples of how to use commands such as</st> `<st c="52420">cy.visit()</st>`<st
    c="52430">,</st> `<st c="52432">cy.get()</st>`<st c="52440">,</st> `<st c="52442">cy.contains()</st>`<st
    c="52455">,</st> `<st c="52457">cy.type()</st>`<st c="52466">, and</st> `<st c="52472">cy.should()</st>`
    <st c="52483">to navigate the application, interact with elements, and validate
    the application state.</st> <st c="52573">It stressed the importance of structuring
    tests in such a way as to move from request to command or assertion, ensuring
    that tests are deterministic</st> <st c="52722">and reliable.</st>
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
- en: <st c="52735">This chapter also explored the use of Cypress custom commands
    to improve the readability and maintainability of E2E tests.</st> <st c="52859">Custom
    commands enable developers to encapsulate repetitive patterns and actions in reusable
    functions, making tests more readable and easier to understand.</st> <st c="53016">This
    is achieved by defining custom commands using</st> `<st c="53067">Cypress.Commands.add()</st>`<st
    c="53089">, which can then be used in place of standard Cypress commands in tests.</st>
    <st c="53162">The chapter provided examples of how to create custom commands for
    actions such as selecting form elements by their labels, which simplifies the
    test code and makes it more consistent with the actions a real user</st> <st c="53375">would
    perform.</st>
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
- en: <st c="53389">In summary, this chapter provides a comprehensive guide to structuring,
    writing, and improving E2E tests with Cypress, emphasizing the importance of clear
    test organization, effective use of Cypress commands and assertions, and the creation
    of custom commands to improve test readability</st> <st c="53678">and maintainability.</st>
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
- en: <st c="53698">In the next chapter, we’ll learn about</st> **<st c="53738">Continuous
    Integration</st>** <st c="53760">(</st>**<st c="53762">CI</st>**<st c="53764">)
    and</st> **<st c="53771">Continuous</st>** **<st c="53782">Deployment</st>** <st
    c="53792">(</st>**<st c="53794">CD</st>**<st c="53796">).</st>
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
- en: '<st c="0">Part 4: Continuous Integration and Continuous Deployment for Angular
    Applications</st>'
  id: totrans-308
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="82">In this section, you’ll start by learning about the general principles
    of</st> **<st c="157">continuous integration</st>** <st c="179">(</st>**<st c="181">CI</st>**<st
    c="183">) and</st> **<st c="190">continuous deployment</st>** <st c="211">(</st>**<st
    c="213">CD</st>**<st c="215">).</st> <st c="219">Next, you’ll embark on an in-depth
    exploration of TDD best practices and patterns.</st> <st c="302">Finally, you’ll
    learn about refactoring and</st> <st c="346">code improvement.</st>
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
- en: <st c="363">This part has the</st> <st c="382">following chapters:</st>
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: '[*<st c="401">Chapter 9</st>*](B21146_09.xhtml#_idTextAnchor380)<st c="411">,</st>
    *<st c="413">Understanding Continuous Integration and Continuous Deployment (CI/CD)</st>*'
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*<st c="483">Chapter 10</st>*](B21146_10.xhtml#_idTextAnchor407)<st c="494">,</st>
    *<st c="496">Best Practices and Patterns for Angular TDD</st>*'
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*<st c="539">Chapter 11</st>*](B21146_11.xhtml#_idTextAnchor413)<st c="550">,</st>
    *<st c="552">Refactoring and Improving Angular Code through TDD</st>*'
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
