["```js\n    $ cp -R Chapter07_4 Chapter08_1 \n    ```", "```js\n    $ npm install --save-exact react-router@7.2.0 \n    ```", "```js\n    import { Suspense } from 'react'\n    import { PostFeed } from '@/components/post/PostFeed.jsx'\n    import { ThemeContext } from '@/contexts/ThemeContext.js' \n    ```", "```js\n    export function Home() {\n      return (\n        <Suspense fallback={<strong>Loading posts...</strong>}>\n          <ThemeContext.Provider value={{ primaryColor: 'salmon' }}>\n    <PostFeed featured />\n    </ThemeContext.Provider>\n    <PostFeed />\n    </Suspense>\n      )\n    } \n    ```", "```js\n    import { useState**,** **Suspense** } from 'react' \n    ```", "```js\n    import { PostFeed } from './components/post/PostFeed.jsx' \n    ```", "```js\n    import { BrowserRouter, Routes, Route } from 'react-router' \n    ```", "```js\n    import { Home } from './pages/Home.jsx' \n    ```", "```js\n    export function App() {\n      const [username, setUsername] = useState('')\n      return (\n        <QueryClientProvider client={queryClient}>\n    <UserContext.Provider value={[username, setUsername]}>\n    <ThemeContext.Provider value={{ primaryColor: 'black' }}>\n    **<****BrowserRouter****>**\n    <div style={{ padding: 8 }}>\n    <UserBar />\n    <br />\n                  {username && <CreatePost />}\n                  <hr /> \n    ```", "```js\n     <QueryErrorResetBoundary>\n                    {({ reset }) => (\n                      <ErrorBoundary\n     onReset={reset}\n     fallbackRender={FetchErrorNotice}\n                      >\n    **<****Routes****>** \n    ```", "```js\n    **<****Route****index****element****=****{****<****Home** **/>****} />**\n    **</****Routes****>**\n    </ErrorBoundary>\n                    )}\n                  </QueryErrorResetBoundary>\n    </div>\n    **</****BrowserRouter****>**\n    </ThemeContext.Provider>\n    </UserContext.Provider>\n    </QueryClientProvider>\n      )\n    } \n    ```", "```js\n    $ npm run dev \n    ```", "```js\n    $ cp -R Chapter08_1 Chapter08_2 \n    ```", "```js\n    export async function fetchPost({ id }) {\n      const res = await fetch(`/api/posts/${id}`)\n      return await res.json()\n    } \n    ```", "```js\n    import { useSuspenseQuery } from '@tanstack/react-query'\n    import { fetchPost } from '@/api.js' \n    ```", "```js\n    export function Post({ **id** }) { \n    ```", "```js\n     const { data } = useSuspenseQuery({\n        queryKey: ['post', id],\n        queryFn: async () => await fetchPost({ id }),\n      })\n      const { title, content, author } = data \n    ```", "```js\n    import { Suspense } from 'react'\n    import { useParams } from 'react-router'\n    import { Post } from '@/components/post/Post.jsx' \n    ```", "```js\n    export function ViewPost() { \n    ```", "```js\n     const { id } = useParams() \n    ```", "```js\n     return (\n        <Suspense fallback={<strong>Loading post...</strong>}>\n          <Post id={id} />\n    </Suspense>\n      )\n    } \n    ```", "```js\n    import { ViewPost } from './pages/ViewPost.jsx' \n    ```", "```js\n     <Routes>\n                          <Route index element={<Home />} />\n    **<****Route****path****=****'post/:id'****element****=****{****<****ViewPost** **/>****} />**\n                        </Routes> \n    ```", "```js\n    $ npm run dev \n    ```", "```js\n    import { useContext } from 'react'\n    import { ThemeContext } from '@/contexts/ThemeContext.js'\n    import { Link } from 'react-router' \n    ```", "```js\n    export function PostListItem({ id, title, author }) { \n    ```", "```js\n     const theme = useContext(ThemeContext) \n    ```", "```js\n     return (\n        <div>\n          <h3 style={{ color: theme.primaryColor }}>{title}</h3> \n    ```", "```js\n     <div>\n            <Link to={`/post/${id}`}>View Post &gt;</Link>\n          </div> \n    ```", "```js\n     <br />\n          <i>\n            Written by <b>{author}</b>\n    </i>\n        </div>\n      )\n    } \n    ```", "```js\n    import { **PostListItem** } from './**PostListItem**.jsx' \n    ```", "```js\n     {posts.map((post) => (\n            <Fragment key={post.id}>\n    <**PostListItem** {...post} /> \n    ```", "```js\n    import { NavLink } from 'react-router' \n    ```", "```js\n    export function NavBarLink({ children, to }) {\n      return (\n        <NavLink\n     to={to} \n    ```", "```js\n     style={({ isActive }) => ({\n            fontWeight: isActive ? 'bold' : 'normal',\n          })}\n        >\n          {children}\n        </NavLink>\n      )\n    } \n    ```", "```js\n    import { NavBarLink } from './components/NavBarLink.jsx' \n    ```", "```js\n     <BrowserRouter>\n                <div style={{ padding: 8 }}>\n    **<****NavBarLink****to****=****'/'****>****Home****</****NavBarLink****>**\n    **<****hr** **/>**\n    <UserBar /> \n    ```", "```js\n    import { useNavigate } from 'react-router' \n    ```", "```js\n    export function CreatePost() {\n      const [username] = useContext(UserContext)\n    **const** **navigate =** **useNavigate****()** \n    ```", "```js\n     const [error, submitAction, isPending] = useActionState(\n        async (currentState, formData) => {\n          const title = formData.get('title')\n          const content = formData.get('content')\n          const newPost = { title, content, author: username, featured: false }\n          try {\n            **const** **result =** await createPostMutation.mutateAsync(newPost)\n    **navigate****(****`/post/****${result.id}****`****)**\n          } catch (err) {\n            return err\n          }\n        },\n      ) \n    ```"]