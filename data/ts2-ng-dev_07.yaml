- en: Separating Concerns with Typed Services
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用类型化服务分离关注点
- en: 'This chapter builds on the previous chapter, with more techniques showing how
    communication occurs within your application''s building blocks. You will learn
    the following topics in this chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章在前一章的基础上构建，展示了更多关于应用程序构建模块内部通信的技术。在本章中，您将学习以下主题：
- en: Services and Dependency Injection (DI) concepts
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务和依赖注入（DI）概念
- en: Component communication with services
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用服务进行组件通信
- en: Writing data logic with services
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用服务编写数据逻辑
- en: To understand services better, you need to understand at least the basic concepts
    of Dependency Injection.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 要更好地理解服务，您需要至少了解依赖注入的基本概念。
- en: Dependency injection
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 依赖注入
- en: Writing Angular in TypeScript demands that your building blocks (components,
    directives, services, and so on) are written in classes. They are just building
    blocks, which means that they need to be intertwined with each other before they
    can become functional, thus making a full-blown application.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在TypeScript中编写Angular要求您的构建模块（组件、指令、服务等）都是以类的形式编写的。它们只是构建模块，这意味着它们在成为功能模块之前需要相互交织，从而形成一个完整的应用程序。
- en: 'This intertwining process can be pretty daunting. For this reason, let''s understand
    the problem first. Take the following TypeScript class, for instance:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这种交织的过程可能会非常令人望而生畏。因此，让我们首先了解问题。例如，考虑以下TypeScript类：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The implementation of the `Person` and `Skill` classes is as simple as the
    following:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '`Person`和`Skill`类的实现就像下面这样简单：'
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The preceding sample is very functional and valid code until you starting having
    more developer types that need to be created using this class. There is no way
    to actually create another type of developer because all the implementation details
    are tied to a class; hence, the process isn't flexible. We need to make the class
    a lot more generic before it can be used to create more types of developer.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的示例是非常实用和有效的代码，直到您开始使用这个类创建更多类型的开发人员。由于所有实现细节都与一个类绑定，因此实际上无法创建另一种类型的开发人员；因此，这个过程并不灵活。在可以用于创建更多类型的开发人员之前，我们需要使这个类更加通用。
- en: 'Let''s try improving the `Developer` class, so it receives all the values needed
    to create a class from the constructor rather than setting it in the class:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试改进`Developer`类，使其从构造函数中接收创建类所需的所有值，而不是在类中设置它：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: So much improvement in so few lines! We are now using the constructor to make
    the code a lot more flexible. With this update, you can use the `Developer` class
    to create as many types of developer as you need.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这么少的代码就有了这么多的改进！我们现在使用构造函数使代码更加灵活。通过这个更新，您可以使用`Developer`类来创建所需数量的开发人员类型。
- en: 'Although this solution seems like it will save the day, there is still a tight
    coupling issue going on in the system. What happens when the constructors in the `Person` and `Skill` classes
    change? The implication is that you will have to come back and update the call
    to this constructor in the `Developer` class. Here is an example of such a change
    in `Skill`:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这个解决方案看起来像是能拯救一天，但系统中仍然存在紧密耦合的问题。当`Person`和`Skill`类中的构造函数发生变化时会发生什么？这意味着您将不得不回来更新`Developer`类中对此构造函数的调用。以下是`Skill`中这种变化的一个例子：
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We added another field to the `yearsOfExperience` class, which is of the number
    type and represents how long a developer has been practicing a claimed skill.
    For this to actually work in `Developer`, we have to update the `Developer` class
    as well:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为`yearsOfExperience`类添加了另一个字段，它是一个数字类型，表示开发人员练习所声称技能的时间有多长。为了使`Developer`中实际工作，我们还必须更新`Developer`类：
- en: '[PRE4]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Updating this class every time a dependency changes is what we''re are striving
    to avoid. A common practice is to elevate the constructors of the dependencies
    to the constructor of the class itself:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 每当依赖项发生变化时更新这个类是我们努力避免的。一个常见的做法是将依赖项的构造函数提升到类本身的构造函数中：
- en: '[PRE5]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This way, the `Developer` is less aware of the implementation details of `Skill`
    and `Person`. Therefore, if they change internally, `Developer` won't care; it
    just stays as is.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，`Developer`就不太了解`Skill`和`Person`的实现细节。因此，如果它们在内部发生变化，`Developer`不会在意；它仍然保持原样。
- en: 'In fact, TypeScript provides a productivity shorthand:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，TypeScript提供了一个高效的简写：
- en: '[PRE6]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This shorthand will implicitly declare the properties and assign them as dependencies
    via the constructor as well.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这个简写将隐式声明属性，并通过构造函数将它们分配为依赖项。
- en: That's not all; elevating these dependencies introduces another challenge. How
    do we manage all the dependencies in our application without losing track of where
    things are meant to be? This is where Dependency Injection comes in. It's not
    an Angular thing, but a popular pattern implemented in Angular.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这还不是全部；提升这些依赖项还引入了另一个挑战。我们如何在应用程序中管理所有依赖项，而不失去它们应该在哪里的轨迹？这就是依赖注入的作用。这不是Angular的事情，而是在Angular中实现的一种流行模式。
- en: Let's start seeing DI in action right in an Angular app.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始在Angular应用程序中看DI的实际应用。
- en: Data in components
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组件中的数据
- en: 'To better understand the importance of services and DI, let''s create a simple
    app with a component that shows a list of user comments. Once you have an app
    created, you can run the following command to generate the required component:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解服务和DI的重要性，让我们创建一个简单的应用程序，其中包含一个显示用户评论列表的组件。创建应用程序后，您可以运行以下命令来生成所需的组件：
- en: '[PRE7]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Update the component''s code with the following snippet:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下片段更新组件的代码：
- en: '[PRE8]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The component has a `comments` array, which is populated with hardcoded data
    once the component is initialized via the `ngOnInit` lifecycle. Now we need to
    iterate over the list of arrays and print on the DOM:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 该组件有一个`comments`数组，在组件通过`ngOnInit`生命周期初始化后，将使用硬编码的数据填充。现在我们需要遍历数组列表并在DOM上打印：
- en: '[PRE9]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You need to include the component in your entry (app) component for it to show
    up:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要在入口（应用）组件中包含该组件才能显示出来：
- en: '[PRE10]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Your app should look like the following (remember to include Bootstrap as seen
    in [Chapter 2](1388eb32-f9cf-4efd-86fe-dc3f201ed039.xhtml), *Getting Started with
    TypeScript*):'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 您的应用程序应该如下所示（记得包含Bootstrap，就像在[第2章](1388eb32-f9cf-4efd-86fe-dc3f201ed039.xhtml)中看到的那样，*使用TypeScript入门*）：
- en: '![](assets/d857dd7f-3771-4c0f-b578-17ce88a96779.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d857dd7f-3771-4c0f-b578-17ce88a96779.png)'
- en: This example works, but the devil lies in the detail. When another component
    needs a list of comments or a portion of the list, we end up recreating the comments.
    This is the problem with having data in components.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子是有效的，但魔鬼在细节中。当另一个组件需要评论列表或列表的一部分时，我们最终会重新创建评论。这就是在组件中拥有数据的问题所在。
- en: Data class services
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据类服务
- en: For the sake of reusability and maintainability, we need to abstract the logic
    concerns out of the component and let the component just serve as a presentation
    layer. This is one of those use cases where TypeScript services in Angular come
    into play.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 为了重用和可维护性，我们需要将组件中的逻辑关注点抽象出来，让组件只作为一个呈现层。这是TypeScript在Angular中发挥作用的用例之一。
- en: 'You first need to create a service with the following command:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 您首先需要使用以下命令创建一个服务：
- en: '[PRE11]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This creates your service class, `./src/app/comment.service.ts`, with a scaffold
    content. Update the content with the following:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建您的服务类`./src/app/comment.service.ts`，其中包含一个框架内容。使用以下内容更新内容：
- en: '[PRE12]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The class now does whatever our component was supposed to do with the data,
    and the data is fetched using the `getComments` method, which simply returns an
    array of comments. The `CommentService`class is also decorated; this is not required
    unless the class has dependencies to be resolved. Nonetheless, good practice demands
    that we always decorate with `Injectable` to know that a class is meant to be
    a service.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在这个类会执行我们的组件应该对数据执行的操作，并且使用`getComments`方法获取数据，该方法简单地返回一个评论数组。`CommentService`类也被装饰了；这不是必需的，除非类有待解决的依赖关系。尽管如此，良好的实践要求我们始终使用`Injectable`进行装饰，以知道一个类是一个服务。
- en: 'Back with our list component, we just import the class, resolve the dependency
    from the constructor to create an instance of the service class, and then populate
    the property with the `getComments` return value:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 回到我们的列表组件，我们只需导入类，从构造函数中解析依赖项以创建服务类的实例，然后用`getComments`的返回值填充属性：
- en: '[PRE13]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Let''s attempt to run the app with these current changes in our browser and
    see whether things still work as expected:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试在浏览器中运行应用程序，看看当前的更改是否仍然按预期工作：
- en: '![](assets/8e3c6caa-3823-455d-9791-2546bf4e64f0.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8e3c6caa-3823-455d-9791-2546bf4e64f0.png)'
- en: Hell, no! It just blew up. What could have gone wrong? The error message reads
    No provider for CommentService!
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 该死，不行！它刚刚爆炸了。出了什么问题？错误消息显示没有为CommentService提供程序！
- en: 'Remember that, when we scaffold components with the `ng` CLI command, the CLI
    not only creates a component but also adds it to our declaration array in the
    decorator of `ngModule`:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，当我们使用`ng`CLI命令脚手架组件时，CLI不仅会创建一个组件，还会将其添加到`ngModule`装饰器的声明数组中：
- en: '[PRE14]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Modules need to know which components and services belong to them as members.
    This is why the component is added automatically for you. This is not the same
    for services because the CLI doesn''t automatically update the module (it warns
    you during the scaffold) when you create service classes via the CLI tool. We
    need to add the service manually via the `providers` array:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 模块需要知道哪些组件和服务属于它们的成员。这就是为什么组件会自动添加给你的原因。但是对于服务来说情况并不相同，因为当你通过CLI工具创建服务类时，CLI不会自动更新模块（它会在脚手架期间警告你）。我们需要通过`providers`数组手动添加服务：
- en: '[PRE15]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now, run the app once more to see how our service now powers the app with no
    more errors in the console:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在再次运行应用程序，看看我们的服务现在如何驱动应用程序，控制台中不再有错误：
- en: '![](assets/b6d2e1c8-27d6-4690-ad1e-ba2f1c79e877.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b6d2e1c8-27d6-4690-ad1e-ba2f1c79e877.png)'
- en: If there is a need to manipulate the data, it must be done in the service and
    not in the component. Assuming you want to delete a comment by double-clicking
    on each item in the list, it's fine to receive the event with the component but
    the actual deletion should be handled by the service.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要操作数据，则必须在服务中进行，而不是在组件中进行。假设您想通过双击列表中的每个项目来删除评论，那么在组件中接收事件是可以的，但实际的删除操作应该由服务处理。
- en: 'Start by adding an event listener to the list items:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 首先为列表项添加事件监听器：
- en: '[PRE16]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The `dblclick`event is triggered by double-clicking the items. When this happens,
    we call the `removeComment` method while passing the comment we want to remove
    from the item.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`dblclick`事件是通过双击项目触发的。当这种情况发生时，我们调用`removeComment`方法，同时传递我们想要从项目中删除的评论。'
- en: 'Here is what `removeComment` looks like in the component:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这是组件中`removeComment`的样子：
- en: '[PRE17]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'As you can see, it doesn''t do anything more than calling a method on our service,
    which is also called `removeComment`. This is the method that has the actual responsibility
    of removing items from the array of comments:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，它除了调用服务上的一个方法之外，什么也不做，该方法也被称为`removeComment`。这个方法实际上负责从评论数组中删除项目：
- en: '[PRE18]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Component interaction with services
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组件与服务的交互
- en: This is a very handy use case for services. In [chapter 6](70f76e99-3d5b-43d6-90ad-5ea049aa622c.xhtml), *Component
    Composition with* TypeScript, we discussed how components interact with each other
    and showed different ways of doing it. One of those ways was left out--using a
    service as an event hub/communication platform for different components.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这是服务的一个非常方便的用例。在[第6章](70f76e99-3d5b-43d6-90ad-5ea049aa622c.xhtml)中，*使用TypeScript进行组件组合*，我们讨论了组件如何相互交互，并展示了不同的方法。其中一种方法被遗漏了--使用服务作为不同组件的事件中心/通信平台。
- en: 'Let''s assume again that, when an item in the list is clicked, we use a sibling
    component to the comment list component to show a detailed view of the selected
    comment. First, we need to create this component:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 再假设，当列表中的项目被点击时，我们使用评论列表组件的兄弟组件来显示所选评论的详细视图。首先，我们需要创建这个组件：
- en: '[PRE19]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Then, you can update the `app.component.html` file to show the added component:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以更新`app.component.html`文件以显示添加的组件：
- en: '[PRE20]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now, we need to define what our component does, because it''s empty right now.
    But before that, let''s update the comment service to also serve as a hub between
    the list component and the sibling detail component:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要定义我们的组件做什么，因为它现在是空的。但在此之前，让我们更新评论服务，使其也作为列表组件和兄弟详细组件之间的中心：
- en: '[PRE21]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The service now uses an Rx subject to create a stream and a listener, which
    the selected comment is pushed through and fetched from. The `commentSelectedSource`object
    is responsible for adding a comment to the stream when the comment is clicked.
    The `commetSelected$` object is an observable that we can subscribe to and act
    on when this comment is clicked.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，服务使用Rx主题来创建一个流和一个监听器，通过它传递和获取所选评论。`commentSelectedSource`对象负责在点击评论时向流中添加评论。`commetSelected$`对象是一个我们可以订阅并在点击此评论时执行操作的可观察对象。
- en: 'Now, head right back to your component and add a click event to select the
    comment item:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，立即返回到您的组件，并添加一个点击事件来选择评论项：
- en: '[PRE22]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The click event triggers a `showComment` method on the component, which, in
    turn, calls `showComment` on the service:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 点击事件触发组件上的`showComment`方法，然后调用服务上的`showComment`：
- en: '[PRE23]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We still have to update the comment detail component, so it subscribes to the
    observable we created in the class:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们仍然需要更新评论详细组件，以便订阅我们在类中创建的可观察对象：
- en: '[PRE24]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'With the `ngOnInit`lifecycle hook, we are able to create a subscription to
    the observable once the component is ready. There is a comment property that will
    be bound to the view, and this property is updated via the subscription every
    time a comment item is clicked. Here is the template for the component showing
    the selected comment:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`ngOnInit`生命周期钩子，我们能够在组件准备就绪后创建对可观察对象的订阅。有一个评论属性将绑定到视图，这个属性通过订阅在每次点击评论项时更新。以下是显示所选评论的组件的模板：
- en: '[PRE25]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'You can start the app again and try selecting a comment. You should see the
    following behavior:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以重新启动应用程序并尝试选择评论。您应该看到以下行为：
- en: '![](assets/48b9955d-ace1-4e62-9f8a-3a88ab63ddef.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/48b9955d-ace1-4e62-9f8a-3a88ab63ddef.png)'
- en: Services as utilities
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务作为实用工具
- en: 'Apart from managing state and component interaction, services are also known
    for handling utility operations. Let''s say that we want to start collecting new
    comments in our comment app. We don''t know much about forms yet, so we can use
    the browser''s prompt. We expect the user to pass both the username and the content
    via the same textbox in the prompt, as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 除了管理状态和组件交互之外，服务还以处理实用操作而闻名。假设我们想要在评论应用中开始收集新评论。我们对表单还不太了解，所以我们可以使用浏览器的提示框。我们期望用户通过提示框中的同一文本框传递用户名和内容，如下所示：
- en: '[PRE26]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Therefore, we need a utility method to extract these bits from the textbox
    into a comment object with the author and content properties. Let''s start with
    collecting the information from the comment list component:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们需要一个实用方法来从文本框中提取这些部分，形成一个具有作者和内容属性的评论对象。让我们从评论列表组件中收集信息开始：
- en: '[PRE27]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The `showPrompt()` method is used to collect the user input, and the input
    is passed to the`parseComment` method on the service. This method is an example
    of a utility method, and we will implement it soon. We will also implement the
    `addComment` method, which is called with the parsed comment to update the list
    of comments. Next, add a button to the view with a click event listener that triggers
    `showPrompt`:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`showPrompt()`方法用于收集用户输入，并将输入传递给服务中的`parseComment`方法。这个方法是一个实用方法的例子，我们很快会实现它。我们还将实现`addComment`方法，该方法将使用解析后的评论来更新评论列表。接下来，在视图中添加一个按钮，并添加一个点击事件监听器来触发`showPrompt`：'
- en: '[PRE28]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Add these two methods to the comment service:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 将这两种方法添加到评论服务中：
- en: '[PRE29]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The `parseComment` method takes a string, splits the string, and gets the author
    and content of the comment. Then, it returns the comment. The addComment method
    takes a comment and adds it to the list of existing comments.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`parseComment`方法接受一个字符串，拆分字符串，并获取评论的作者和内容。然后返回评论。`addComment`方法接受一个评论并将其添加到现有评论列表中。'
- en: 'Now, you can start adding new comments, as shown in the following screenshot:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以开始添加新评论，如下面的截图所示：
- en: '![](assets/31cc7b09-e373-4aa9-9fa7-f4ef30bd706d.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/31cc7b09-e373-4aa9-9fa7-f4ef30bd706d.png)'
- en: Summary
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter exposed a lot of interesting concepts in data abstraction, while
    utilizing the power of dependency injection. You learned how components interact
    with each other using a service as a hub, how data and logic are abstracted from
    a component to services, and how reusable utility code is handled in a service
    to keep your application clean. In the next chapter, you'll learn a practical
    approach to forms in Angular and DOM events.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了数据抽象中许多有趣的概念，同时利用了依赖注入的强大功能。您学会了组件如何使用服务作为中心相互交互，数据和逻辑如何从组件中抽象到服务中，以及如何在服务中处理可重用的实用代码以保持应用程序的清晰。在下一章中，您将学习Angular中表单和DOM事件的实际方法。
