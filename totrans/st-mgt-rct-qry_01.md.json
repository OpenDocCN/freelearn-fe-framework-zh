["```js\n    npx create-react-app my-react-app\n    ```", "```js\nconst NotState = ({aList = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n  ]}) => {\n  const value = \"a constant value\";\n  const filteredList = aList.filter((item) => item % 2 ===\n    0);\n  return filteredList.map((item) =>\n    <div key={item}>{item}</div>);\n};\n```", "```js\nconst App = () => {\n  ...\n  return (\n    <div className=\"App\">\n      <div>Counter: {count}</div>\n      <div>\n        <button onClick={increment}>+1</button>\n        <button onClick={decrement}>-1</button>\n        <button onClick={reset}>Reset</button>\n      </div>\n    </div>\n```", "```js\nconst App = () => {\n  const [count, setCount] = useState(0);\n  const increment = () => setCount((currentCount) =>\n    currentCount + 1);\n  const decrement = () => setCount((currentCount) =>\n    currentCount - 1);\n  const reset = () => setCount(0);\n  return (\n    <div className=\"App\">\n      <div>Counter: {count}</div>\n      <div>\n        <button onClick={increment}>+1</button>\n        <button onClick={decrement}>-1</button>\n        <button onClick={reset}>Reset</button>\n      </div>\n    </div>\n  );\n};\n```", "```js\nconst initialState = { count: 0 };\nconst types = {\n  INCREMENT: \"increment\",\n  DECREMENT: \"decrement\",\n  RESET: \"reset\",\n};\nconst reducer = (state, action) => {\n  switch (action) {\n    case types.INCREMENT:\n      return { count: state.count + 1 };\n    case types.DECREMENT:\n      return { count: state.count - 1 };\n    case types.RESET:\n      return { count: 0 };\n    default:\n      throw new Error(\"This type does not exist\");\n  }\n};\n```", "```js\nconst AppWithReducer = () => {\n  const [state, dispatch] = useReducer(reducer,\n    initialState);\n  const increment = () => dispatch(types.INCREMENT);\n  const decrement = () => dispatch(types.DECREMENT);\n  const reset = () => dispatch(types.RESET);\n  return (\n    <div className=\"App\">\n      <div>Counter: {state.count}</div>\n      <div>\n        <button onClick={increment}>+1</button>\n        <button onClick={decrement}>-1</button>\n        <button onClick={reset}>Reset</button>\n      </div>\n    </div>\n  );\n};\n```", "```js\nimport { useState, createContext } from \"react\";\nexport const CountContext = createContext();\nexport const CountStore = () => {\n  const [count, setCount] = useState(0);\n  const increment = () => setCount((currentCount) =>\n    currentCount + 1);\n  const decrement = () => setCount((currentCount) =>\n    currentCount - 1);\n  const reset = () => setCount(0);\n  return {\n    count,\n    increment,\n    decrement,\n    reset,\n  };\n};\nconst CountProvider = (children) => {\n  return <CountContext.Provider value={CountStore()}\n    {...children} />;\n};\nexport default CountProvider;\n```", "```js\nroot.render(\n  <CountProvider>\n    <App />\n  </CountProvider>\n);\n```", "```js\nimport { CountContext } from \"./CountContext/CountContext\";\nconst AppWithContext = () => {\n  const { count, increment, decrement, reset } =\n    useContext(CountContext);\n  return (\n    <div className=\"App\">\n      <div>Counter: {count}</div>\n      <div>\n        <button onClick={increment}>+1</button>\n        <button onClick={decrement}>-1</button>\n        <button onClick={reset}>Reset</button>\n      </div>\n    </div>\n  );\n};\n```"]