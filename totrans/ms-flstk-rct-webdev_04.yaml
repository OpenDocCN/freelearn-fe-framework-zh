- en: Advanced Redux and Falcor on the Client Side
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Redux is our app's state container which keeps the information about how the
    React view layer shall render in the browser. On the other hand, Falcor differs
    from Redux, because it is the full-stack toolset that replaces the outdated approach
    of API endpoints data communication. In the next pages, we will  work with Falcor
    on the client side, but you need to remember that Factor is a full-stack library.
    That means, we need to use it on both sides (where on backend we use an additional
    library called Falcor-Router). Starting from [Chapter 5](part0140.html#45GEO0-7870c13caa1244daa9bd53ca5c1e1a42),
    *Falcor Advanced Concepts*, we will work with full-stack Falcor. While in the
    current chapter, we will focus only on the client side.
  prefs: []
  type: TYPE_NORMAL
- en: Focusing on the app's frontend
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Currently, our app is a simple starter kit, which is a skeleton for its further
    development. We need to focus more on the customer-facing frontend because it's
    important to have a good-looking frontend in the current age. Thanks to Material
    UI, we can reuse many things to make our app look prettier.
  prefs: []
  type: TYPE_NORMAL
- en: It's important to note that responsive web design is not in the scope of this
    book at this point (and overall), so you need to find out how all the styles can
    be improved for mobile. The app we are going to work on will look fine on tablets,
    but small mobile screens may not look so good.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will focus our efforts on the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Unmocking `fetchServerSide.js`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a new `ArticleCard` component, which will make our main page more professional
    for our users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improving the general look of our application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing the ability to logout
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a WYSIWYG editor in `Draft.js` which is a rich text-editor framework
    for React created by the Facebook team
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding the ability to create new articles in our Redux frontend application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Backend wrap-up before frontend improvement
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we performed a server-side rendering that will affect
    our users such that they will see their articles quicker and will improve our
    website's SEO as the whole HTML markup is being rendered on the server side.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last thing to make our server-side rendering work 100% is to unmock the
    server-side article fetching in `/server/fetchServerSide.js`. The new code for
    fetching is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Improving handleServerSideRender
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The next step is to tweak the `handleServerSideRender` function, which is currently
    kept in the `/server/server.js` file. The current function is as shown in the
    following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to replace it with this improved one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: What is new in our improved `handleServerSideRender`? As you can see, we have
    added `async await`. Recall that it is helping us make our code less painful with
    asynchronous calls such as queries to the database (synchronous-looking generator-style
    code). This ES7 feature helps us write asynchronous calls as if they're synchronous
    ones--under the hood, `async await` is much more complicated (after it's transpiled
    into ES5 so that it can be run in any modern browser), but we won't get into details
    of how `async await` works because it's not in the scope of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Changing routes in Falcor (frontend and backend)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You also need to change the two ID variable names to `_id` (`_id` is a default
    name for the ID of a document in a Mongo collection).
  prefs: []
  type: TYPE_NORMAL
- en: 'Look in `server/routes.js` for this old code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Change it into the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The only change is that we will return `_id` instead of `id`. We need to fetch
    the `_id` value in `src/layouts/PublishingApp.js`, so find the following code
    snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Change it into the new one with `_id`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Our website header and articles list need improvements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since we've finished wrapping up the server-side rendering and fetching articles
    from the DB, let's start with the frontend.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, delete the following header from `server/server.js`; we don''t need
    it anymore:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also delete this header in `src/layouts/PublishingApp.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Delete the `h1` markup in the registration and login view (`src/LoginView.js`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Delete registration in `src/RegisterView.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: All these `h1` lines are not needed as we want to have a nice-looking design
    instead of an outdated one.
  prefs: []
  type: TYPE_NORMAL
- en: 'After this, go to `src/CoreLayout.js` and import a new `AppBar` component and
    two button components from the Material UI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Add this `AppBar` together with inline styles into `render`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'We have added the inline styles for `buttonStyle` and `homeIconStyle`. The
    `menuLinksJSX` and `homePageButtonJSX`''s visual output will improve. This is
    how your app will be looking after those `AppBar` changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00030.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: New ArticleCard component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The next step in order to improve the look of our home page is to make article
    cards based on the Material Design CSS as well. Let''s create a component''s file
    first:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, in the `ArticleCard.js` file, let''s initialize the `ArticleCard` component
    with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can find in the preceding code, we have imported the required components
    from material-ui/card that will help our home page''s articles list look nice.
    The next step is to improve our article card''s `render` function with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: As you can find in the preceding code, we have created an article card, and
    there are some inline styles for the `Paper` component and left and right `div`.
    Feel free to change the styles if you want.
  prefs: []
  type: TYPE_NORMAL
- en: 'In general, we are missing two static images in the previous `render` function,
    which are `src= ''/static/placeholder.png''` and `avatar=''/static/avatar.png''`.
    Let''s add them using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Make a PNG file with the name `placeholder.png` in the `dist` directory. In
    my case, this is what my `placeholder.png` file looks like:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00031.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Also create an `avatar.png` file in the `dist` directory that will be exposed
    in `/static/avatar.png`. I am not providing the screenshot here, as it has my
    personal photo in it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `/static/` file in `express.js` is exposed in the `/server/server.js` file
    with `codeapp.use('/static', express.static('dist'));` (you will already have
    it in there as we have added this in the previous chapter).
  prefs: []
  type: TYPE_NORMAL
- en: The last thing is that you need to import `ArticleCard` and modify the render
    of `layouts/PublishingApp.js` from the old simple view to the new one.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add `import` to the top of the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, replace the render with this new one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding new code only differs in this new `ArticleCard` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'We also have added some styles to `div style={{height: ''100%'', width: ''75%'',
    margin: ''auto''}}`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'On following all these steps exactly in terms of styles, this is what you will
    see:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00032.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'This is the register user view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00033.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'This is the login user view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00034.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Dashboard - adding an article button, logout, and header improvements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our plan for now is to create a logout mechanism, make our header aware whether
    a user is logged in or not, and based on that information show different buttons
    in the header (Login/Register when a user is not logged in and Dashboard/Logout
    when a user is logged in) We will create an Add Article button in our dashboard
    and create a mocked view with a mocked WYSIWYG (we will unmock it later).
  prefs: []
  type: TYPE_NORMAL
- en: '**WYSIWYG** stands for **what you see is what you get**, of course.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The WYSIWYG mockup will be located in `src/components/articles/WYSIWYGeditor.js`,
    so you need to create a new directory and file in `components` with the following
    commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Then our `WYSIWYGeditor.js` mock content will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The next step is to create a logout view at `src/views/LogoutView.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The `src/views/LogoutView.js` file''s content is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The `logout` view mentioned here is a simple view without a connecting function
    to Redux (in comparison with `LoginView.js`). We are using some styling to make
    it nice, with the `Paper` component from Material UI.
  prefs: []
  type: TYPE_NORMAL
- en: The `componentWillMount` function is deleted from the `localStorage` information
    when the user lands on the logout page. As you can see, it also checks whether
    there is `localStorage` with `**if(typeof localStorage !== 'undefined' && localStorage.token)
    **` because, as you can imagine, when you perform server-side rendering, `localStorage`
    is undefined (the server side doesn't have `localStorage` and `window` like the
    client side).
  prefs: []
  type: TYPE_NORMAL
- en: Important note before creating a frontend add article feature
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've come to the point where you need to delete all documents from your articles
    collection, or you may have some trouble performing the next steps as we are going
    to use a draft-js library and some other stuff that will need a new schema on
    the backend. We will create that backend's schema in the next chapter as this
    chapter is focused on the frontend.
  prefs: []
  type: TYPE_NORMAL
- en: Delete all documents in your MongoDB articles collection right now, but keep
    the user collection as it was (don't delete users from the database).
  prefs: []
  type: TYPE_NORMAL
- en: The AddArticleView component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After creating the `LogoutView` and the `WYSIWYGeditor` components, let''s
    create the final missing component in our process: the `src/views/articles/AddArticleView.js`
    file. So let''s create a directory and file now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'As a result, you''ll have that file in your `views/articles` directory. We
    need to put content into it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: As you can see here, it's a simple React view, and it imports the `WYSIWYGeditor`
    component that we created a moment ago (`import WYSIWYGeditor from '../../components/articles/WYSIWYGeditor.js'`).
    We have some inline styles in order to make the view look nicer for our user.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create two new routes for a logout and for an add article feature by
    modifying the `routes` file at the `**src/routes/index.js*` location:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'As explained in our `src/routes/index.js` file, we have added two routes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<Route component={LogoutView} path=''logout'' name=''logout'' />`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<Route component={AddArticleView} path=''add-article'' name=''add-article''
    />`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Don''t forget to import those two views'' components with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Now, we have created the views and created routes into that view. The last piece
    is to show links into those two routes in our app.
  prefs: []
  type: TYPE_NORMAL
- en: 'First let''s create the `src/layouts/CoreLayout.js` component so it will have
    a login/logout-type login so that a logged-in user will see different buttons
    than a user who isn''t. Modify the `render` function in the `CoreLayout` component
    to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see that the new part in the preceding code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: We have added `let userIsLoggedIn = typeof localStorage !== 'undefined' && localStorage.token
    && this.props.routes[1].name !== 'logout';`. The `userIsLoggedIn` variable is
    found if we are not on the server side (then it doesn't have `localStorage` as
    mentioned earlier). Then, it checks whether `localStorage.token` is `yes`, and
    also checks whether a user didn't click on the logout button with the `this.props.routes[1].name
    !== 'logout'` expression. The `this.props.routes[1].name` value/information is
    provided by the `redux-simple-router` and `react-router`. This is always the name
    of our current route on the client side, so we can render the proper buttons based
    on that information.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying DashboardView
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you will find, we have added the `if (userIsLoggedIn)` statement, and the
    new part is the dashboard and logout `RaisedButton` entities with links to the
    correct routes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last piece to finish at this stage is to modify the `src/views/DashboardView.js`
    component. Add link to the `/add-article` route using the `{Link}` component imported
    from react-router. Also, we need to import new Material UI components in order
    to make `DashboardView` nicer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'After you have imported all this in your `src/views/DashboardView.js` file,
    then we need to start work on improving the `render` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Here, we have our new `render` function for `DashboardView`. We are using the
    `ListItem` component to make our nice lists. We have also added the link and button
    to the `/add-article` routes. There are some inline styles, but feel free to style
    this app on your own.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at a few screenshots of how the app looks after all these changes
    after adding the CREATE AN ARTICLE button with a new view of articles:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00035.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'After having mocked WYSIWYG on the `/add-article` view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00036.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Our new logout view page will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00037.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Starting work on our WYSIWYG
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's install a draft-js library, which is "a framework for building rich text
    editors in React, powered by an immutable model and abstracting over cross-browser
    differences," as stated on their website.
  prefs: []
  type: TYPE_NORMAL
- en: In general, draft-js is made by friends from Facebook, and it helps us make
    powerful WYSIWYG tools. It will be useful in our publishing app as we want to
    provide good tools for our editors in order to create interesting articles on
    our platform.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s install it first:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'We will use version 0.5.0 of draft-js in our book. Before we start coding,
    let''s install one more dependency that will be helpful later in fetching the
    articles from the DB via Falcor. Execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: In general, the `falcor-json-graph@1.1.7` syntax provides us with the ability
    to use different sentinels provided via the Falcor helper library (which will
    be described in detail in the next chapter).
  prefs: []
  type: TYPE_NORMAL
- en: Stylesheet for the draft-js WYSIWYG
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to style draft-js editor, we need to create a new CSS file in the
    `dist` folder located at `dist/styles-draft-js.css`. It''s the only place where
    we will put a CSS stylesheet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'After you have created this file at `dist/styles-draft-js.css`, we need to
    import it to `server/server.js`, where we have been creating the HTML header,
    so the following code is already present in the `server.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Then you need to include the link to the stylesheet with this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Nothing fancy so far. After we are done with the styles for our rich text WYSIWYG
    editor, let's have some fun.
  prefs: []
  type: TYPE_NORMAL
- en: Coding a draft-js skeleton
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's get back to the `src/components/articles/WYSIWYGeditor.js` file. It's
    currently mocked, but we will improve it now.
  prefs: []
  type: TYPE_NORMAL
- en: Just to make you aware, we will make a skeleton of the WYSIWYG right now. We
    will improve it later in the book. At this point, the WYSIWYG won't have any functionalities
    such as making text bold or creating lists with OL and UL elements.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Here, we have created only a constructor of our new draft-js file's WYSIWYG.
    The `let initialEditorFromProps = EditorState.createWithContent(ContentState.createFromText(''));`
    expression is simply creating an empty WYSIWYG container. Later, we will improve
    it so we are able to receive `ContentState` from the database when we would like
    to edit our WYSIWYG.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `editorState: initialEditorFromProps` is our current state. Our `**this.onChange
    = (editorState) => { **` line is firing on each change, so our view component
    at `src/views/articles/AddArticleView.js` will know about any changes in the WYSIWYG.'
  prefs: []
  type: TYPE_NORMAL
- en: Anyway, you can check the documentation of draft-js at [https://facebook.github.io/draft-js/](https://facebook.github.io/draft-js/).
  prefs: []
  type: TYPE_NORMAL
- en: 'This is just the beginning; the next step is to add two new functions under
    `onChange`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'And add a new function in our `WYSIWYGeditor` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'After all these changes, this is how your construction of the `WYSIWYGeditor`
    class should look:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'And the rest of this class is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'The next step is to improve the `render` function with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Here, what we have done is simply use the draft-js API in order to make a simple
    rich editor; later, we will make it more functional, but for now, let's focus
    on something simple.
  prefs: []
  type: TYPE_NORMAL
- en: Improving the views/articles/AddArticleView component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we move forward with adding all the WYSIWYG features, such as bolding,
    we need to improve the `views/articles/AddArticleView.js` component with a few
    things. Install a library that will convert the draft-js state into plain HTML
    with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'We will use this library to save read-only plain HTML for our regular readers.
    Next, import this into `src/views/articles/AddArticleView.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Improve `AddArticleView` by changing a constructor and adding a new function
    called `_onDraftJSChange`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to save on each change a state of `this.setState({contentJSON, htmlContent});`.
    This is because `contentJSON` will be saved into the database in order to have
    immutable information about our WYSIWYG and `htmlContent` will be the server for
    our readers. Both `htmlContent` and `contentJSON` variables will be kept in the
    articles collection. The last thing in the `AddArticleView` class is to modify
    `render` to new code, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'After all these changes, the new view that you will see is this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00038.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Adding more formatting features to our WYSIWYG
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s start working on version two of our WYSIWYG, with more options, as in
    the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00039.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: After you follow the steps mentioned here, you will be able to format your text
    as follows and extract the HTML markup from it as well so that we can save both
    the JSON state of our WYSIWYG and plain HTML in our MongoDB articles collection.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following new file, called `WYSIWYGbuttons.js`, we will export two different
    classes, and we will import them into `components/articles/WYSWIWYGeditor.js`
    using the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'In general, that new file will have three different React components, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`StyleButton`: This will be a generic-style button that will be used in both
    `BlockStyleControls` and `InlineStyleControls`. Don''t get confused by the fact
    that in the `WYSIWYGbuttons` file, you are creating the `StyleButton` React component
    first.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`BlockStyleControls`: This is an exported component, which will be used for
    block controls such as `H1`, `H2`, `Blockquote`, `UL`, and `OL`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`InlineStyleControls`: This component is used for bold, italics, and underline.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now we are aware that in the new file, you will create three separate React
    components.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to create the WYSWIG buttons in the `src/components/articles/wysiwyg/WYSIWYGbuttons.js`
    location:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'The content of this file will be the buttons component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code is giving us a reusable button with a certain label at `this.props.label`.
    As mentioned before, don't get confused with `WYSIWYGbuttons`; it's a generic
    button component that will be reused in the inline and block type button controls.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, under that component, you can put the following object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'This object is block type, which we can create in our draft-js WYSIWYG. It
    is used in the following component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code is a whole bunch of buttons for block-style formatting. We
    will import them into `WYSIWYGeditor` in a while. As you can see, we are exporting
    it with `export const BlockStyleControls = (props) => {`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Put the next object under the `BlockStyleControls` component, but this time,
    for inline styles such as `Bold`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, in our WYSIWYG, an editor will be able to use bold, italics,
    and underline.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last component for those inline styles that you can put under all this
    is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, this is very simple. We are mapping the defined styles in the
    blocks and inline styles each time, and based on each iteration, we are creating
    `StyleButton`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to import both `InlineStyleControls` and `BlockStyleControls`
    in our `WYSIWYGeditor` component (`src/components/articles/WYSIWYGeditor.js`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, in the `WYSIWYGeditor` constructor, include the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Bind to `toggleInlineStyle` and `toggleBlockType` two arrow functions, which
    will be the callbacks when someone chooses the toggle in order to use inline or
    block type in our `WYSIWYGeditor` (we will create those functions in a moment).
  prefs: []
  type: TYPE_NORMAL
- en: 'Create these two new functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Here, both functions are using the draft-js `RichUtils` in order to set flags
    inside our WYSIWYG. We are using certain formatting options from `BLOCK_TYPES`
    and `INLINE_STYLES` that we have defined in the `import { BlockStyleControls,
    InlineStyleControls }` from `'./wysiwg/WYSIWGbuttons';`.
  prefs: []
  type: TYPE_NORMAL
- en: 'After we are done improving our `WYSIWYGeditor` construction and the `_toggleBlockType`
    and `_toggleInlineStyle` functions, then we can start improving our `render` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: As you may notice, in the preceding code, we have only added the `BlockStyleControls`
    and `InlineStyleControls` component. Also notice that we are using callbacks with
    `onToggle={this.toggleBlockType}` and `onToggle={this.toggleInlineStyle}`; this
    is for communicating between our `WYSIWYGbuttons` and the draft-js `RichUtils`
    about what a user has clicked on and in which mode they are currently using (such
    as bold, header1, and UL or OL).
  prefs: []
  type: TYPE_NORMAL
- en: Pushing a new article into article reducer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We need to create a new action called `pushNewArticle` in the `src/actions/article.js`
    location:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'The next step is to improve the `src/components/ArticleCard.js` component by
    improving the `render` function in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we have replaced the old `{content}` variable (which was receiving a
    plain text value in the content''s variable) to a new one that shows all of the
    HTML using `dangerouslySetInnerHTML` in the article card:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: This will help us show our readers the HTML code generated by our WYSIWYG.
  prefs: []
  type: TYPE_NORMAL
- en: MapHelpers for improving our reducers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In general, all reducers *must* return a new reference to an object when it
    has changed. In our first example, we used `Object.assign`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'We will replace this `Object.assign` approach with a new one, with ES6''s Maps:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, you can find a new `ARTICLES_LIST_ADD` with `mapHelpers.addMultipleItems(state,
    articlesList)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to make our map helpers, we need to create a new directory called
    `utils` and a file called `mapHelpers.js(src/utils/mapHelpers.js)`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'And then, you can enter this first function into that `src/utils/mapHelpers.js`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: The duplicate simply creates a new reference in memory in order to make our
    immutability a requirement in Redux applications. We also are checking, with `if(key
    === item['_id'])`, whether there is an edge case that the key is different from
    our object ID (the `_` in `_id` is intentional as this is how Mongoose marks the
    ID from our DB).The `addMultipleItems` function adds items to the new duplicated
    map (for example, after a successful fetch of articles).
  prefs: []
  type: TYPE_NORMAL
- en: 'The next code change that we require is in the same file at `src/utils/mapHelpers.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we have added an `add` function and `delete` function for a
    single item. After that, we are exporting all that from `src/utils/mapHelpers.js`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is that we need to improve the `src/reducers/article.js` reducer
    in order to use the map utilities in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: What's new in the `src/reducers/article.js` file? As you can see, we have improved
    `ARTICLES_LIST_ADD` (already discussed). We have added a new `PUSH_NEW_ARTICLE`;
    case; this will push a new object into our reducer's state tree. It's similar
    to pushing an item to an array, but we use our reducer and maps instead.
  prefs: []
  type: TYPE_NORMAL
- en: The CoreLayout improvements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Because we are switching to the ES6''s Map in the frontend, we also need to
    make sure that after we receive an object with server-side rendering, it is also
    a Map (not a plain JS object). Check out the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: Above the `CoreLayout` component, we have added the Redux tools, so we will
    have a state tree and the actions available in the `CoreLayout` component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, in the `CoreLayout` component, add the `componentWillMount` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: This function is responsible for checking whether an article's properties are
    an ES6 Map or not. If not, then we send an action to `articlesList` that makes
    the job done, and after that, we have maps in `this.props.article`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last thing is to improve `export` in the `CoreLayout` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code helps us connect to the Redux single-state tree and the actions
    it allows.
  prefs: []
  type: TYPE_NORMAL
- en: Why Maps over a JS object?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In general, an ES6 Map has some features for easy data manipulation---functions
    such as `.get` and `.set` which make programming more pleasurable. It also helps
    to have a simpler code to be able to keep our immutability as required by Redux.
  prefs: []
  type: TYPE_NORMAL
- en: Map methods are much easier to use than `slice/c-oncat/Object.assign`. I am
    sure that there are always some cons/pros to each approach, but in our app, we
    will use an ES6 Map-wise approach in order to keep things simpler after we are
    completely set up with it.
  prefs: []
  type: TYPE_NORMAL
- en: Improving PublishingApp and DashboardView
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the `src/layouts/PublishingApp.js` file, we need to improve our `render`
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: As you can see in the preceding code, we switched the old `for(let articleKey
    in this.props.article) {` code into `this.props.article.forEach` because we have
    switched from objects to using Maps.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to do the same in the `src/views/DashboardView.js` file''s `render`
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'For the same reason as in the `PublishingApp` component, we switched to using
    ES6''s new Map, and we will be also using the new ES6 `forEach` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: Tweaks to AddArticleView
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After we are finished preparing our app to save a new article into the article''s
    reducer, we need to tweak the `src/views/articles/AddArticleView.js` component.
    New imports in the `AddArticleView.js` are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: As you can see in the preceding code, we are importing `RaisedButton` and `Link`,
    which will be useful for redirecting an editor to the dashboard's view after a
    successful article addition. Then, we import `articleActions` because we need
    to make the `this.props.articleActions.pushNewArticle(newArticle);` action on
    article submit. The `bindActionCreators` will already be imported in your `AddArticleView`
    if you followed instructions from previous chapters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use `bindActionCreators` in order to have `articleActions` in the `AddArticleView`
    component by replacing this code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the new `bindActionCreators` code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is an updated constructor of the `AddArticleView` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'The `_articleSubmit` method will be required after an editor wants to add an
    article. We have also added some default states for our title, `contentJSON` (we
    will keep the draft-js article state there), `htmlContent`, and the `newArticleID`.
    The next step is to create the `_articleSubmit` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see here, we get the state of our current writing with `this.state.title`,
    `this.state.htmlContent`, and `this.state.contentJSON`, and based on that, we
    then create a `newArticle` model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we mock the new article''s ID (later, we will save it to the DB) with
    `newArticle[''_id''] = newArticleID;` and push it into our article''s reducer
    with `this.props.articleActions.pushNewArticle(newArticle);`. The only thing is
    to set up `newarticleID` with `this.setState({ newArticleID: newArticleID});`.
    The last step is to update our `render` method in the `AddArticleView` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: Here in the `render` method, we have one statement that checks whether an article's
    editor has already created an article (clicked on the Submit Article button) with
    `if(this.state.newArticleID)`. If yes, then the editor will see his new article's
    ID and a button that links to the dashboard (link is `to='/dashboard'`).
  prefs: []
  type: TYPE_NORMAL
- en: The second return is in case an editor is in edit mode; if yes, then he can
    submit it by clicking on the `RaisedButton` component with the `onClick` method's
    called `_articleSubmit`.
  prefs: []
  type: TYPE_NORMAL
- en: The ability to edit an article (the EditArticleView component)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can add an article, but we can't edit it yet. Let's implement that feature.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing to do is to create a route in `src/routes/index.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: 'Then edit the routes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we have added the `EditArticleViews` route with `path='/edit-article/:articleID'`;
    as you should know already, the `articleID` will be sent to us with props as `this.props.params.articleID`
    (this is a default feature of `redux-router`).
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to create the `src/views/articles/EditArticleView.js` component,
    which is a new component (mocked for now):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: Here, you can find a standard view component with a `render` function that returns
    a mock (we will improve it later). We have already put all the required imports
    in place (we will use all of them in the next iteration of the `EditArticleView`
    component).
  prefs: []
  type: TYPE_NORMAL
- en: Let's add a dashboard link to an article's edition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Make a small tweak in `src/views/DashboardView.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we have two things that need to be changed: adding a `Link` attribute
    to `to={/edit-article/${articleDetails[''_id'']}`. This will redirect a user to
    the article''s edition view after clicking on `ListItem`. We also need to give
    a `Link` element a unique key property.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new action and reducer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Modify the `src/actions/article.js` file and add this new action called `EDIT_ARTICLE`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'The next step is to improve our reducer at `src/reducers/article.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: As you can find here, we have added a new `switch` case for `EDIT_ARTICLE`.
    We use our `mapHelpers.addItem`; in general, if `_id` does exist in Map, then
    it replaces a value (this works great for editing actions).
  prefs: []
  type: TYPE_NORMAL
- en: Edit mode in src/components/articles/WYSIWYGeditor.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s now implement the ability to use the edit mode in our `WYSIWYGeditor`
    components by improving our construction in the `WYSIWYGeditor.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: Here you can find out how your constructor will look after making changes.
  prefs: []
  type: TYPE_NORMAL
- en: As you already know, draft-js is required to be an object, so we check in the
    first `if` statement whether it is one. Then, if not, we put an empty WYSIWYG
    as default (check `if(typeof props.initialValue === 'undefined' || typeof props.initialValue
    !== 'object'))`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `else` statement, we put the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: Here we check whether we have a valid draft-js JSON object; if not, we need
    to throw a critical error and return, because otherwise, the error can crash the
    whole browser (we need to handle that edge case with `withif(isInvalidObject))`.
  prefs: []
  type: TYPE_NORMAL
- en: After we have a valid object, we recover the state of our WYSIWYG editor with
    the use of the `convertFromRaw`, `ContentState.createFromBlockArray`, and `EditorState.createWithContent`
    functions provided by the draft-js library.
  prefs: []
  type: TYPE_NORMAL
- en: Improvements in EditArticleView
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The last improvement before finishing the article edit mode is improving `src/views/articles/EditArticleView.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: This is our constructor; we will have some states variables such as `articleFetchError`,
    `articleEditSuccess`, `editedArticleID`, `articleDetails`, `title`, `contentJSON`,
    and `htmlContent`.
  prefs: []
  type: TYPE_NORMAL
- en: In general, all these variables are self-explanatory. Regarding the `articleDetails`
    variable here, we will keep the whole object fetched from a `reducer/mongoDB`.
    Things such as `title`, `contentHTML`, and `contentJSON` are kept in the `articleDetails`
    state (as you will find in a moment).
  prefs: []
  type: TYPE_NORMAL
- en: 'After you are done with the `EditArticleView` constructor, add some new functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: 'On `componentWillMount`, we will fetch data about the article with `_fetchArticleData`.
    The `_fetchArticleData` is getting the article''s ID from props via `react-redux`
    (`let articleID = this.props.params.articleID;`). Then, we check whether we are
    not on the server side with `if(typeof window !== ''undefined'' && articleID)`.
    After this, we use the `.get` Map function in order to get details from a reducer
    (`let articleDetails = this.props.article.get(articleID);`), and based on the
    case, we set the state of our component with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: Here you can find that in the `articleDetails` variable, we keep all data fetched
    from reducer/DB. In general, now we only have the frontend side because a backend
    side fetching an edited article will be introduced later in this book.
  prefs: []
  type: TYPE_NORMAL
- en: The `_onDraftJSChange` function is similar to the one in the `AddArticleView`
    component.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `_articleEditSubmit` is quite standard, so I will leave it to you to read
    the code. I will only mention that `_id: currentArticleID` is very important,
    because it''s used later in our `reducer/mapUtils` in order to update the article
    correctly in the article''s reducer.'
  prefs: []
  type: TYPE_NORMAL
- en: EditArticleView's render improvements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The last part is to improve our `render` function in the `EditArticleView`
    component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: 'We are managing different states of our component with `if(this.state.articleFetchError)`,
    `else if(!this.state.editedArticleID)`, and `else if(this.state.articleEditSuccess)`,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: In this part, the major change is adding a new property called `initialValue`,
    which is passed down to the `WYSIWYGeditor`, the draft-js JSON object.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting an article's feature implementation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s create a new action for deletion at `src/actions/article.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, let''s add a `DELETE_ARTICLE` switch case into `src/reducers/article.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: 'The last step in implementing a delete button is to modify `src/views/articles/EditArticleView.js
    component.Import PopOver` (it will ask a second time whether you are sure about
    deleting an article):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: 'The new things here are `_handleDeleteTap`, `_handleDeletion`, `_handleClosePopover`,
    and `state (htmlContent, openDelete, deleteAnchorEl)`. Then, add three new functions
    to `EditArticleView`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: 'Improve the return in the `render` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: 'Regarding `render`, new things are all under the new `hr` tag: `<h1>: Delete
    permanently this article<h1>`. `RaisedButton: DeletePopover` is a component from
    Material-UI. You can find more documentation of this component at [http://www.material-ui.com/v0.15.0-alpha.1/#/components/popover](http://www.material-ui.com/v0.15.0-alpha.1/#/components/popover).
    You can find in the following screenshots how it should look in the `browserRaisedButton:
    Permanent delete, click here` label. The `AddArticleView` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00040.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The `AddArticleView` component after a `SUBMIT ARTICLE` button has been hit:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00041.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The dashboard component:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00042.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The `EditArticleView` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00043.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'A DELETE button on the `EditArticleView` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00044.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'A DELETE button on the `EditArticleView` component after first click (popover
    component):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00045.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'A `PublishingApp` component (main page):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00046.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Currently, we have made a lot of progress on the frontend using Redux to store
    the state of our application in its single-state tree. The important drawback
    is that after you hit refresh, all the data disappears.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will start implementing the backend in order to store
    the articles in our database.
  prefs: []
  type: TYPE_NORMAL
- en: As you already know, Falcor is our glue that replaces the old popular RESTful
    approach; you will master stuff related to Falcor very soon. You will also learn
    what the differences between Relay/GraphQL and Falcor are. Both are trying to
    solve similar problems, but in very different ways.
  prefs: []
  type: TYPE_NORMAL
- en: Let's go even more in depth into our full-stack Falcor application. We will
    make it even more awesome for our end users.
  prefs: []
  type: TYPE_NORMAL
