- en: Chapter 3. DOM Traversal Methods
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 3 章。DOM 遍历方法
- en: Cause there's a train coming into the station
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 因为有火车驶入车站
- en: ''
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: But it's heading for a new destination
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 但它正朝着新的目的地前进
- en: ''
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: —Devo,
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: —Devo，
- en: ''
  id: totrans-6
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '"It Doesn''t Matter to Me"'
  id: totrans-7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “对我来说没有关系”
- en: 'In addition to the selector expressions described in [Chapter 2](ch02.html
    "Chapter 2. Selector Expressions"), jQuery has a variety of DOM traversal methods
    to help us select elements in a document. These methods offer a great deal of
    flexibility, even allowing us to act upon multiple sets of elements in a single
    chain, like so:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 [第 2 章](ch02.html "第 2 章。选择器表达式") 中描述的选择器表达式之外，jQuery 还具有各种 DOM 遍历方法，帮助我们在文档中选择元素。这些方法提供了很大的灵活性，甚至允许我们在单个链中对多个元素集进行操作，如下所示：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: At times the choice between a selector expression and a corresponding DOM traversal
    method is simply a matter of taste, but there is no doubt that the combined set
    of expressions and methods makes for an extremely powerful toolset for getting
    anything we want.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，在选择器表达式和相应的 DOM 遍历方法之间的选择仅仅是品味的问题，但毫无疑问，结合在一起的表达式和方法集合构成了一个极为强大的工具集，可以获取我们想要的任何内容。
- en: As of jQuery 1.1, DOM traversal methods do not modify the jQuery object they
    are sent to. Instead, a new jQuery object is constructed, which contains a reference
    to the original object. The original object can be retrieved with the `.end` method.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 截至 jQuery 1.1 版本，DOM 遍历方法不会修改它们发送的 jQuery 对象。相反，会构造一个新的 jQuery 对象，其中包含对原始对象的引用。可以使用
    `.end` 方法检索原始对象。
- en: The jQuery Factory Function
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: jQuery 工厂函数
- en: The following function underpins the entire jQuery library as it allows us to
    create the jQuery objects that all of the other methods are attached to.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 以下函数支撑整个 jQuery 库，因为它允许我们创建所有其他方法附加到的 jQuery 对象。
- en: $()
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: $()
- en: '| Creates a new jQuery object matching elements in the DOM.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '| 在 DOM 中创建匹配元素的新 jQuery 对象。'
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '|'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters (first version)
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参数（第一个版本）
- en: 'selector: A string containing a selector expression'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择器：包含选择器表达式的字符串
- en: 'context (optional): The portion of the DOM tree within which to search'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上下文（可选）：要在其中搜索的 DOM 树的部分
- en: Parameters (second version)
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参数（第二个版本）
- en: 'element: A DOM element to wrap in a jQuery object'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 元素：要包装在 jQuery 对象中的 DOM 元素
- en: Parameters (third version)
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参数（第三个版本）
- en: 'elementArray: An array containing a set of DOM elements to wrap in a jQuery
    object'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: elementArray：包含要包装在 jQuery 对象中的一组 DOM 元素的数组
- en: Parameters (fourth version)
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参数（第四个版本）
- en: 'object: An existing jQuery object to clone'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: object：要克隆的现有 jQuery 对象
- en: Parameters (fifth version)
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参数（第五个版本）
- en: 'html: A string containing an HTML snippet describing new DOM elements to create'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: html：包含描述要创建的新 DOM 元素的 HTML 片段的字符串
- en: Return Value
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 返回值
- en: The newly constructed jQuery object.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 新构造的 jQuery 对象。
- en: Description
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 描述
- en: 'In the first formulation listed above, `$()` searches through the DOM for any
    element that match the provided selector and creates a new jQuery object that
    references these elements:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述列出的第一种公式中，`$()` 会在 DOM 中搜索与提供的选择器匹配的任何元素，并创建一个新的 jQuery 对象，该对象引用这些元素：
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In [Chapter 2](ch02.html "Chapter 2. Selector Expressions") we explored the
    range of selector expressions that can be used within this string.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [第 2 章](ch02.html "第 2 章。选择器表达式") 中，我们探讨了可在此字符串中使用的选择器表达式的范围。
- en: Selector Context
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择器上下文
- en: 'By default, selectors perform their searches within the DOM starting at the
    document root. However, an alternative context can be given for the search by
    using the optional second parameter to the `$()` function. For example, if within
    a callback function we wish to do a search for an element, we can restrict that
    search:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，选择器会从文档根开始在 DOM 中执行搜索。但是，可以通过使用 `$()` 函数的可选第二个参数为搜索提供替代上下文。例如，如果在回调函数中我们希望搜索元素，则可以限制该搜索：
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Since we've restricted the span selector to the context of `this`, only spans
    within the clicked element will get the additional class.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将 span 选择器限制为 `this` 的上下文，因此只有点击的元素内的 span 才会获得额外的类。
- en: 'Selector context is also useful for XML documents, as they do not form part
    of the default DOM tree. For example, if an AJAX call has returned an XML structure
    in the variable data, then we can perform searches within that structure:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 选择器上下文对于 XML 文档也很有用，因为它们不属于默认的 DOM 树的一部分。例如，如果 AJAX 调用返回了一个名为 data 的 XML 结构，则我们可以在该结构内执行搜索：
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Internally, selector context is implemented with the `.find` method, so `$(selector,
    context)` is equivalent to `$(context).find(selector)`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在内部，选择器上下文是使用 `.find` 方法实现的，因此 `$(selector, context)` 等效于 `$(context).find(selector)`。
- en: Note
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: While the jQuery API only specifies DOM elements, arrays of DOM elements, and
    jQuery objects as valid contexts, in practice selectors and HTML snippets can
    be used here as well.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然jQuery API只指定DOM元素、DOM元素数组和jQuery对象作为有效的上下文，但在实践中，选择器和HTML片段也可以在这里使用。
- en: Wrapping DOM elements
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 包装DOM元素
- en: 'The second and third formulations of this function allow us to create a jQuery
    object using a DOM element or elements that we have already found in some other
    way. A common use of this facility is to perform jQuery methods on an element
    that has been passed to a callback function in the keyword `this`:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数的第二和第三种表达形式使我们能够使用其他方式已经找到的DOM元素或元素来创建一个jQuery对象。此功能的常见用法是对作为关键字`this`传递给回调函数的元素执行jQuery方法：
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This example causes elements to be hidden with a sliding animation when clicked.
    An element must be wrapped in a jQuery object before we call jQuery methods on
    it because the handler receives the clicked item in the keyword `this` as a bare
    DOM element.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 该示例导致元素在单击时使用滑动动画隐藏。在调用jQuery方法之前，必须将元素包装在jQuery对象中，因为处理程序将接收关键字`this`中的单击项目作为裸DOM元素。
- en: Cloning jQuery Objects
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 克隆jQuery对象
- en: When a jQuery object is passed as a parameter to the `$()`, a new jQuery object
    is created that references the same DOM elements. The initial object can then
    be modified without affecting the new one.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个jQuery对象被传递给`$()`作为参数时，将创建一个引用相同DOM元素的新jQuery对象。然后可以修改初始对象而不影响新对象。
- en: Creating New Elements
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建新元素
- en: 'If a string is passed as the parameter to `$()`, jQuery examines the string
    to see if it looks like HTML. If not, the string is interpreted as a selector
    expression, as explained above. But if the string appears to be an HTML snippet,
    jQuery attempts to create new DOM elements as described by the HTML. Then a jQuery
    object is created and returned that refers to these elements. We can perform any
    of the usual jQuery methods on this object:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果将字符串作为参数传递给`$()`，jQuery会检查字符串是否看起来像HTML。如果不是，则将字符串解释为选择器表达式，如上所述。但是如果该字符串看起来像HTML片段，jQuery会尝试根据HTML描述创建新的DOM元素。然后将创建并返回一个引用这些元素的jQuery对象。我们可以对此对象执行任何通常的jQuery方法：
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The actual creation of the elements is handled by the browser''s **innerHTML**
    mechanism. Specifically, jQuery creates a new `<div>` element and sets the innerHTML
    property of the element to the HTML snippet that was passed in. This means that
    to ensure cross‑platform compatibility, the snippet must be well-formed. Tags
    that can contain other elements should always be paired with a closing tag:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 实际创建元素的工作由浏览器的**innerHTML**机制处理。具体来说，jQuery创建一个新的`<div>`元素，并将元素的innerHTML属性设置为传入的HTML片段。这意味着为了确保跨平台兼容性，片段必须是格式良好的。始终应将可以包含其他元素的标签与闭合标签配对：
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Tags that cannot contain elements should be quick-closed:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 不能包含元素的标签应快速关闭：
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Filtering Methods
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 过滤方法
- en: These methods remove elements from the set matched by a jQuery object.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法会从由jQuery对象匹配的集合中移除元素。
- en: .filter()
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .filter()
- en: '| Reduces the set of matched elements to those that match the selector or pass
    the function''s test.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '| 将匹配选择器或通过函数测试的元素集减少到那些匹配的元素。'
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '|'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters (first version)
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数（第一版本）
- en: 'selector: A string containing a selector expression to match elements against'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择器：包含要与元素匹配的选择器表达式的字符串
- en: Parameters (second version)
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数（第二版本）
- en: 'function: A function used as a test for each element in the set'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数：用作集合中每个元素的测试的函数
- en: Return Value
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: The new jQuery object.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 新的jQuery对象。
- en: Description
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: Given a jQuery object that represents a set of DOM elements, the `.filter` method
    constructs a new jQuery object from a subset of the matching elements. The supplied
    selector is tested against each element; all elements matching the selector will
    be included in the result.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 给定表示一组DOM元素的jQuery对象，`.filter`方法会根据匹配元素的子集构造一个新的jQuery对象。针对每个元素测试提供的选择器；所有匹配选择器的元素都将包括在结果中。
- en: 'Consider a page with a simple list on it:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个带有简单列表的页面：
- en: '[PRE10]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We can apply this method to the set of list items:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将此方法应用于列表项集：
- en: '[PRE11]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The result of this call is a jQuery object wrapping items `1, 3`, and `5` as
    they match the selector (recall that :even and :odd use 0-based indexing).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 此调用的结果是一个包装项`1, 3`和`5`的jQuery对象，因为它们匹配选择器（请记住，:even和:odd使用基于0的索引）。
- en: Using a Filter Function
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用过滤函数
- en: 'The second form of this method allows us to filter elements against a function
    rather than a selector. Suppose we have a more involved HTML snippet:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法的第二种形式允许我们针对函数而不是选择器来过滤元素。假设我们有一个更复杂的 HTML 片段：
- en: '[PRE12]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We can select the list items, and then filter them based on their contents:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以选择列表项，然后根据它们的内容进行过滤：
- en: '[PRE13]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The result of this expression will be the first list item only, as it contains
    exactly one `<strong>` tag. Within the filter function, `this` refers to each
    DOM element in turn. The parameter passed to the function tells us the index of
    that DOM element within the set matched by the jQuery object.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这个表达式的结果将只是第一个列表项，因为它只包含一个 `<strong>` 标签。在过滤函数中，`this`依次引用每个 DOM 元素。传递给函数的参数告诉我们该
    DOM 元素在由 jQuery 对象匹配的集合中的索引。
- en: 'We can also take advantage of the `index` passed through the function:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以利用通过函数传递的`index`：
- en: '[PRE14]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The result of this expression will be the third and sixth list items, as it
    uses the modulus operator (%) to select every item with an index value that, when
    divided by 3, has a remainder of 2.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这个表达式的结果将是第三和第六个列表项，因为它使用模运算符（%）来选择每个索引值除以 3 余数为 2 的项。
- en: .not()
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .not()
- en: '| Removes elements from the set of matched elements.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '| 从匹配元素的集合中移除元素。'
- en: '[PRE15]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '|'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters (first version)
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数（第一个版本）
- en: 'selector: A string containing a selector expression to match elements against'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'selector: 包含要匹配元素的选择器表达式的字符串'
- en: Parameters (second version)
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数（第二个版本）
- en: 'elements: One or more DOM elements to remove from the matched set'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'elements: 一个或多个要从匹配集合中删除的 DOM 元素'
- en: Return Value
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: The new jQuery object.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 新的 jQuery 对象。
- en: Description
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: Given a jQuery object that represents a set of DOM elements, the `.not` method
    constructs a new jQuery object from a subset of the matching elements. The supplied
    selector is tested against each element; the elements that don't match the selector
    will be included in the result.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个表示一组 DOM 元素的 jQuery 对象，`.not` 方法会从匹配元素的子集构造一个新的 jQuery 对象。提供的选择器会被测试以匹配每个元素；不匹配选择器的元素将包含在结果中。
- en: 'Consider a page with a simple list on it:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个简单列表的页面：
- en: '[PRE16]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We can apply this method to the set of list items:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将此方法应用于列表项集合：
- en: '[PRE17]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The result of this call is a jQuery object wrapping items `2` and `4`, as they
    do not match the selector (recall that :even and :odd use 0-based indexing).
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这个调用的结果是一个包含项`2`和`4`的 jQuery 对象，因为它们不匹配选择器（请回忆一下，:even 和 :odd 使用的是基于 0 的索引）。
- en: Removing Specific Elements
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 移除特定元素
- en: 'The second version of the `.not` method allows us to remove elements from the
    matched set, assuming we have found those elements previously by some other means.
    For example, suppose our list had an identifier applied to one of its items:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`.not` 方法的第二个版本允许我们从匹配集合中移除元素，假设我们以其他方式找到了这些元素。例如，假设我们的列表中的一个项目有一个标识符：'
- en: '[PRE18]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We can fetch the third list item using the native JavaScript `getElementById`
    function, then remove it from a jQuery object:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用原生 JavaScript 的 `getElementById` 函数获取第三个列表项，然后从 jQuery 对象中移除它：
- en: '[PRE19]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This expression yields a jQuery object matching items `1, 2, 4`, and `5`. We
    could have accomplished the same thing with a simpler jQuery expression, but this
    technique can be useful when other libraries provide references to plain DOM nodes.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 此表达式产生一个匹配项 `1, 2, 4` 和 `5` 的 jQuery 对象。我们本可以用更简单的 jQuery 表达式来完成同样的事情，但是这种技术在其他库提供对普通
    DOM 节点的引用时可能会有用。
- en: .contains()
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .contains()
- en: '| Reduces the set of matched elements to those containing the specified text.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '| 将匹配元素集合减少到包含指定文本的元素。'
- en: '[PRE20]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '|'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数
- en: 'text: A string of text to search for'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'text: 要搜索的文本字符串'
- en: Return Value
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: The new jQuery object.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 新的 jQuery 对象。
- en: Description
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: Given a jQuery object that represents a set of DOM elements, the `.contains`
    method constructs a new jQuery object from a subset of the matching elements.
    The supplied text is searched for in each element; all elements containing the
    text (even within a descendant element) will be included in the result.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个表示一组 DOM 元素的 jQuery 对象，`.contains` 方法会从匹配元素的子集构造一个新的 jQuery 对象。提供的文本会在每个元素中进行搜索；包含文本的所有元素（即使在后代元素中）都将包含在结果中。
- en: 'Consider a page with a simple list on it:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个简单列表的页面：
- en: '[PRE21]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We can apply this method to the set of list items:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将此方法应用于列表项集合：
- en: '[PRE22]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The result of this call is a jQuery object wrapping `item 2`, as it contains
    the specified text. The search is performed using jQuery's `.text` method, so
    the search text can be located anywhere within the concatenation of the text strings
    in the matched set of elements or any of their descendants.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 此调用的结果是包含指定文本的`item 2`的jQuery对象。使用jQuery的`.text`方法执行搜索，因此搜索文本可以位于匹配元素或其任何后代的文本字符串的连接中的任何位置。
- en: .eq()
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .eq()
- en: '| Reduces the set of matched elements to the one at the specified index.'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '| 将匹配元素的集合减少到指定索引处的一个元素。'
- en: '[PRE23]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '|'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数
- en: 'index: An integer indicating the *0-based* position of the element'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: index：指示元素的*从0开始计数*的位置的整数
- en: Return Value
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: The new jQuery object.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 新的jQuery对象。
- en: Description
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: Given a jQuery object that represents a set of DOM elements, the `.eq` method
    constructs a new jQuery object from one of the matching elements. The supplied
    index identifies the position of this element in the set.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 给定表示一组DOM元素的jQuery对象，`.eq`方法从匹配元素中构造一个新的jQuery对象。提供的索引标识集合中此元素的位置。
- en: 'Consider a page with a simple list on it:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个包含简单列表的页面：
- en: '[PRE24]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'We can apply this method to the set of list items:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将此方法应用于列表项的集合：
- en: '[PRE25]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The result of this call is a jQuery object wrapping `item 3`. Note that the
    supplied index is *0-based*, and refers to the position of the element within
    the jQuery object, *not* within the DOM tree.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 此调用的结果是包含`item 3`的jQuery对象。注意，提供的索引是*从0开始计数*的，并且是指jQuery对象内元素的位置，*而不是*DOM树内的位置。
- en: .lt()
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .lt()
- en: '| Reduces the set of matched elements to the ones before the specified index.'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '| 将匹配元素的集合减少到指定索引之前的元素。'
- en: '[PRE26]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '|'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters
  id: totrans-142
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数
- en: 'index: An integer indicating the *0-based* position before which the elements
    are selected'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: index：指示选择元素之前的*从0开始计数*的位置的整数
- en: Return Value
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: The new jQuery object.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 新的jQuery对象。
- en: Description
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: Given a jQuery object that represents a set of DOM elements, the `.lt` method
    constructs a new jQuery object from a subset of the matching elements. The supplied
    `index` identifies the position of one of the elements in the set; all elements
    before this one will be included in the result.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 给定表示一组DOM元素的jQuery对象，`.lt`方法从匹配元素的子集中构造一个新的jQuery对象。提供的`index`标识集合中一个元素的位置；此元素之前的所有元素都将包含在结果中。
- en: 'Consider a page with a simple list on it:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个包含简单列表的页面：
- en: '[PRE27]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'We can apply this method to the set of list items:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将此方法应用于列表项的集合：
- en: '[PRE28]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The result of this call is a jQuery object wrapping items `1` and `2`. Note
    that the supplied index is *0-based*, and refers to the position of elements within
    the jQuery object, *not* within the DOM tree.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 此调用的结果是包含项目`1`和`2`的jQuery对象。注意，提供的索引是*从0开始计数*的，并且是指jQuery对象内的元素位置，*而不是*DOM树内的位置。
- en: .gt()
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .gt()
- en: '| Reduces the set of matched elements to the ones after the specified index.'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '| 将匹配元素的集合减少到指定索引之后的元素。'
- en: '[PRE29]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '|'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters
  id: totrans-157
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数
- en: 'index: An integer indicating the *0-based* position after which the elements
    are selected'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: index：指示选择元素之后的*从0开始计数*的位置的整数
- en: Return Value
  id: totrans-159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: The new jQuery object.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 新的jQuery对象。
- en: Description
  id: totrans-161
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: Given a jQuery object that represents a set of DOM elements, the `.gt` method
    constructs a new jQuery object from a subset of the matching elements. The supplied
    `index` identifies the position of one of the elements in the set; all elements
    after this one will be included in the result.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 给定表示一组DOM元素的jQuery对象，`.gt`方法从匹配元素的子集中构造一个新的jQuery对象。提供的`index`标识集合中一个元素的位置；此元素之后的所有元素都将包含在结果中。
- en: 'Consider a page with a simple list on it:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个包含简单列表的页面：
- en: '[PRE30]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'We can apply this method to the set of list items:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将此方法应用于列表项的集合：
- en: '[PRE31]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The result of this call is a jQuery object wrapping items 4 and 5\. Note that
    the supplied index is *0-based*, and refers to the position of elements within
    the jQuery object, *not* within the DOM tree.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 此调用的结果是包含项目4和5的jQuery对象。注意，提供的索引是*从0开始计数*的，并且是指jQuery对象内的元素位置，*而不是*DOM树内的位置。
- en: Tree Traversal Methods
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 树遍历方法
- en: These methods use the structure of the DOM tree to locate a new set of elements.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法利用DOM树的结构来定位一组新的元素。
- en: .find()
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .find()
- en: '| Gets the descendants of each element in the current set of matched elements,
    filtered by a selector.'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '| 获取当前匹配的每个元素的后代，该后代经过选择器筛选。'
- en: '[PRE32]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '|'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters
  id: totrans-174
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数
- en: 'selector: A string containing a selector expression to match elements against'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: selector：包含要匹配元素的选择器表达式的字符串
- en: Return Value
  id: totrans-176
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: The new jQuery object.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 新的jQuery对象。
- en: Description
  id: totrans-178
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: Given a jQuery object that represents a set of DOM elements, the `.find` method
    allows us to search through the descendants of these elements in the DOM tree
    and construct a new jQuery object from the matching elements. The `.find` and
    `.children` methods are similar, except that the latter only travels a single
    level down the DOM tree.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个代表一组 DOM 元素的 jQuery 对象，`.find` 方法允许我们在 DOM 树的后代中搜索这些元素，并从匹配的元素构建一个新的 jQuery
    对象。`.find` 和 `.children` 方法类似，不同之处在于后者只向下遍历 DOM 树的一级。
- en: The method accepts a selector expression of the same type that we can pass to
    the `$()` function. The elements will be filtered by testing whether they match
    this selector.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法接受与我们可以传递给 `$()` 函数的相同类型的选择器表达式。将通过测试它们是否与此选择器匹配来过滤元素。
- en: 'Consider a page with a basic nested list on it:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个带有基本嵌套列表的页面：
- en: '[PRE33]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'If we begin at item II, we can find list items within it:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们从项目 II 开始，我们可以找到其中的列表项：
- en: '[PRE34]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: The result of this call is a jQuery object wrapping items `A, B, 1, 2, 3`, and
    `C`. Even though item `II` matches the selector expression, it is not included
    in the results; only descendants are considered candidates for the match.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 这次调用的结果是一个包含项 `A, B, 1, 2, 3` 和 `C` 的 jQuery 对象。即使项目 `II` 匹配了选择器表达式，它也不会被包含在结果中；只有后代被视为匹配项的候选者。
- en: As discussed in the section *The jQuery Factory Function*, selector context
    is implemented with the `.find` method; therefore, `$('li.item-ii').find('li')`
    is equivalent to `$('li', 'li.item-ii')`.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 如 *jQuery 工厂函数* 部分所讨论的，选择器上下文是使用 `.find` 方法实现的；因此，`$('li.item-ii').find('li')`
    等效于 `$('li', 'li.item-ii')`。
- en: Note
  id: totrans-187
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Unlike in the rest of the tree traversal methods, the selector expression is
    required in a call to `.find()`. If we need to retrieve all of the descendant
    elements, we can pass in the selector * to accomplish this.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 与其它树遍历方法不同，在调用 `.find()` 时需要选择器表达式。如果我们需要检索所有后代元素，可以传递选择器 * 来完成此操作。
- en: .children()
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .children()
- en: '| Gets children of each element in the set of matched elements, optionally
    filtered by a selector.'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '| 获取匹配元素集合中每个元素的子元素，可选择性地通过选择器进行过滤。'
- en: '[PRE35]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '|'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters
  id: totrans-193
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数
- en: 'selector (optional): A string containing a selector expression to match elements
    against'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择器（可选）：包含一个选择器表达式以匹配元素的字符串
- en: Return Value
  id: totrans-195
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: The new jQuery object.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 新的 jQuery 对象。
- en: Description
  id: totrans-197
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: Given a jQuery object that represents a set of DOM elements, the `.children`
    method allows us to search through the immediate children of these elements in
    the DOM tree and construct a new jQuery object from the matching elements. The
    `.find` and `.children` methods are similar, except that the latter only travels
    a single level down the DOM tree.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个代表一组 DOM 元素的 jQuery 对象，`.children` 方法允许我们在 DOM 树中搜索这些元素的直接子元素，并从匹配的元素构建一个新的
    jQuery 对象。`.find` 和 `.children` 方法类似，不同之处在于后者只向下遍历 DOM 树的一级。
- en: The method optionally accepts a selector expression of the same type that we
    can pass to the `$()` function. If the selector is supplied, the elements will
    be filtered by testing whether they match the selector.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法可选择地接受与我们可以传递给 `$()` 函数的相同类型的选择器表达式。如果提供了选择器，则将通过测试它们是否与选择器匹配来过滤元素。
- en: 'Consider a page with a basic nested list on it:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个带有基本嵌套列表的页面：
- en: '[PRE36]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'If we begin at the level-2 list, we can find its children:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们从第二级列表开始，我们可以找到它的子元素：
- en: '[PRE37]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The result of this call is a jQuery object wrapping items `A, B`, and `C`. Since
    we do not supply a selector expression, all of the children are part of the object.
    If we had supplied one, only the matching items among these three would be included.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 这次调用的结果是一个包含项 `A, B` 和 `C` 的 jQuery 对象。由于我们没有提供选择器表达式，所有子元素都是对象的一部分。如果我们提供了一个，只有这三个中的匹配项将被包含在内。
- en: .parents()
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .parents()
- en: '| Gets the ancestors of each element in the current set of matched elements,
    optionally filtered by a selector.'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '| 获取匹配元素集合中每个元素的祖先元素，可选择性地通过选择器进行过滤。'
- en: '[PRE38]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '|'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters
  id: totrans-209
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数
- en: 'selector (optional): A string containing a selector expression to match elements
    against'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择器（可选）：包含一个选择器表达式以匹配元素的字符串
- en: Return Value
  id: totrans-211
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: The new jQuery object.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 新的 jQuery 对象。
- en: Description
  id: totrans-213
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: Given a jQuery object that represents a set of DOM elements, the `.parents`
    method allows us to search through the ancestors of these elements in the DOM
    tree and construct a new jQuery object from the matching elements. The `.parents()`
    and `.parent()` methods are similar, except that the latter only travels a single
    level up the DOM tree.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 给定表示一组DOM元素的jQuery对象，`.parents` 方法允许我们在DOM树中搜索这些元素的祖先，并从匹配的元素构造一个新的jQuery对象。`.parents()`
    和 `.parent()` 方法是类似的，不同之处在于后者只在DOM树中向上移动一个级别。
- en: The method optionally accepts a selector expression of the same type that we
    can pass to the `$()` function. If the selector is supplied, the elements will
    be filtered by testing whether they match the selector.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 方法可选地接受与我们可以传递给 `$()` 函数的相同类型的选择器表达式。如果提供了选择器，则将通过测试它们是否匹配选择器来过滤元素。
- en: 'Consider a page with a basic nested list on it:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个上面有一个基本嵌套列表的页面：
- en: '[PRE39]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'If we begin at item `A`, we can find its ancestors:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们从项目 `A` 开始，我们可以找到它的祖先：
- en: '[PRE40]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: The result of this call is a jQuery object wrapping the `level-2` list, `item
    ii`, and the `level-1` list (and on up the DOM tree all the way to the `<html>`
    element). Since we do not supply a selector expression, all of the ancestors are
    part of the object. If we had supplied one, only the matching items among these
    would be included.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 这个调用的结果是一个包装着 `level-2` 列表、`item ii` 和 `level-1` 列表的jQuery对象（一直向上直到 `<html>`
    元素的DOM树）。因为我们没有提供选择器表达式，所有祖先都是对象的一部分。如果我们提供了一个，只有这些匹配的项会被包含在其中。
- en: .parent()
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .parent()
- en: '| Gets the parent of each element in the current set of matched elements, optionally
    filtered by a selector.'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '| 获取当前匹配的每个元素的父级，可以选择使用选择器进行过滤。'
- en: '[PRE41]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '|'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters
  id: totrans-225
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数
- en: 'selector (optional): A string containing a selector expression to match elements
    against.'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择器（可选）：包含要将元素与之匹配的选择器表达式的字符串。
- en: Return Value
  id: totrans-227
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: The new jQuery object.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 新的jQuery对象。
- en: Description
  id: totrans-229
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: Given a jQuery object that represents a set of DOM elements, the `.parent` method
    allows us to search through the parents of these elements in the DOM tree and
    construct a new jQuery object from the matching elements. The `.parents` and `.parent`
    methods are similar, except that the latter only travels a single level up the
    DOM tree.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 给定表示一组DOM元素的jQuery对象，`.parent` 方法允许我们在DOM树中搜索这些元素的父级，并从匹配的元素构造一个新的jQuery对象。`.parents`
    和 `.parent` 方法是类似的，不同之处在于后者只在DOM树中向上移动一个级别。
- en: The method optionally accepts a selector expression of the same type that we
    can pass to the `$()` function. If the selector is supplied, the elements will
    be filtered by testing whether they match the selector.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 方法可选地接受与我们可以传递给 `$()` 函数的相同类型的选择器表达式。如果提供了选择器，则将通过测试它们是否匹配选择器来过滤元素。
- en: 'Consider a page with a basic nested list on it:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个上面有一个基本嵌套列表的页面：
- en: '[PRE42]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'If we begin at item `A`, we can find its parents:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们从项目 `A` 开始，我们可以找到它的父元素：
- en: '[PRE43]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: The result of this call is a jQuery object wrapping the `level-2` list. Since
    we do not supply a selector expression, the parent element is unequivocally included
    as part of the object. If we had supplied one, the element would be tested for
    a match before it was included.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 这个调用的结果是一个包装着 `level-2` 列表的jQuery对象。因为我们没有提供选择器表达式，父元素明确包括在对象中。如果我们提供了一个，那么在包含之前会对元素进行匹配测试。
- en: .siblings()
  id: totrans-237
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .siblings()
- en: '| Gets the siblings of each element in the set of matched elements, optionally
    filtered by a selector.'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '| 获取匹配元素集合中每个元素的同级，可以选择使用选择器进行过滤。'
- en: '[PRE44]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '|'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters
  id: totrans-241
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数
- en: 'selector (optional): A string containing a selector expression to match elements
    against'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择器（可选）：包含要将元素与之匹配的选择器表达式的字符串
- en: Return Value
  id: totrans-243
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: The new jQuery object.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 新的jQuery对象。
- en: Description
  id: totrans-245
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: Given a jQuery object that represents a set of DOM elements, the `.siblings`
    method allows us to search through the siblings of these elements in the DOM tree
    and construct a new jQuery object from the matching elements.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 给定表示一组DOM元素的jQuery对象，`.siblings` 方法允许我们在DOM树中搜索这些元素的兄弟元素，并从匹配的元素构造一个新的jQuery对象。
- en: The method optionally accepts a selector expression of the same type that we
    can pass to the `$()` function. If the selector is supplied, the elements will
    be filtered by testing whether they match the selector.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 方法可选地接受与我们可以传递给 `$()` 函数的相同类型的选择器表达式。如果提供了选择器，则将通过测试它们是否匹配选择器来过滤元素。
- en: 'Consider a page with a simple list on it:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个上面有一个简单列表的页面：
- en: '[PRE45]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'If we begin at the third item, we can find its siblings:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们从第三个项目开始，我们可以找到它的兄弟：
- en: '[PRE46]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: The result of this call is a jQuery object wrapping items `1, 2, 4`, and `5`.
    Since we do not supply a selector expression, all of the siblings are part of
    the object. If we had supplied one, only the matching items among these four would
    be included.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 此调用的结果是一个包裹着`1, 2, 4`和`5`项的jQuery对象。因为我们没有提供选择器表达式，所以所有的兄弟元素都是对象的一部分。如果我们提供了一个选择器，那么这四个元素中的匹配项才会被包含。
- en: The original element is not included among the siblings, which is important
    to remember when we wish to find all elements at a particular level of the DOM
    tree.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 在兄弟元素中不包括原始元素，这一点在我们希望找到DOM树特定级别的所有元素时很重要。
- en: .prev()
  id: totrans-254
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .prev()
- en: '| Gets the immediately preceding sibling of each element in the set of matched
    elements, optionally filtered by a selector.'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '| 获取匹配元素集合中每个元素的紧邻前序兄弟元素，可选择性地通过选择器进行过滤。'
- en: '[PRE47]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '|'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters
  id: totrans-258
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数
- en: 'selector (optional): A string containing a selector expression to match against
    the elements'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'selector（可选）: 包含用于匹配元素的选择器表达式的字符串'
- en: Return Value
  id: totrans-260
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: The new jQuery object.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 新的jQuery对象。
- en: Description
  id: totrans-262
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: Given a jQuery object that represents a set of DOM elements, the `.prev` method
    allows us to search through the predecessors of these elements in the DOM tree
    and construct a new jQuery object from the matching elements.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个代表一组DOM元素的jQuery对象，`.prev`方法允许我们在DOM树中搜索这些元素的前驱，并从匹配的元素构建一个新的jQuery对象。
- en: The method optionally accepts a selector expression of the same type that we
    can pass to the `$()` function. If the selector is supplied, the elements will
    be filtered by testing whether they match the selector.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法可选择性地接受与我们可以传递给`$()`函数的相同类型的选择器表达式。如果提供了选择器，则将通过测试它们是否与选择器匹配来对元素进行过滤。
- en: 'Consider a page with a simple list on it:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个简单列表的页面：
- en: '[PRE48]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'If we begin at the third item, we can find the element that comes just before
    it:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们从第三项开始，我们可以找到它之前的元素：
- en: '[PRE49]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: The result of this call is a jQuery object wrapping `item 2`. Since we do not
    supply a selector expression, this preceding element is unequivocally included
    as part of the object. If we had supplied one, the element would be tested for
    a match before it was included.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 此调用的结果是一个包裹着`item 2`的jQuery对象。因为我们没有提供选择器表达式，所以这个前序元素明确地被包含在对象中。如果我们提供了一个选择器，那么在包含之前会测试该元素是否匹配。
- en: .next()
  id: totrans-270
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .next()
- en: '| Gets the immediately following sibling of each element in the set of matched
    elements, optionally filtered by a selector.'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '| 获取匹配元素集合中每个元素的紧邻后续兄弟元素，可选择性地通过选择器进行过滤。'
- en: '[PRE50]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '|'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters
  id: totrans-274
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数
- en: 'selector (optional): A string containing a selector expression to match against
    the elements'
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'selector（可选）: 包含用于匹配元素的选择器表达式的字符串'
- en: Return Value
  id: totrans-276
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: The new jQuery object.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 新的jQuery对象。
- en: Description
  id: totrans-278
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: Given a jQuery object that represents a set of DOM elements, the `.next` method
    allows us to search through the successors of these elements in the DOM tree and
    construct a new jQuery object from the matching elements.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个代表一组DOM元素的jQuery对象，`.next`方法允许我们在DOM树中搜索这些元素的后继，并从匹配的元素构建一个新的jQuery对象。
- en: The method optionally accepts a selector expression of the same type that we
    can pass to the `$()` function. If the selector is supplied, the elements will
    be filtered by testing whether they match the selector.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法可选择性地接受与我们可以传递给`$()`函数的相同类型的选择器表达式。如果提供了选择器，则将通过测试它们是否与选择器匹配来对元素进行过滤。
- en: 'Consider a page with a simple list on it:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个简单列表的页面：
- en: '[PRE51]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'If we begin at the third item, we can find the element that comes just after
    it:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们从第三项开始，我们可以找到它之后的元素：
- en: '[PRE52]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: The result of this call is a jQuery object wrapping `item 4`. Since we do not
    supply a selector expression, this following element is unequivocally included
    as part of the object. If we had supplied one, the element would be tested for
    a match before it was included.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 此调用的结果是一个包裹着`item 4`的jQuery对象。因为我们没有提供选择器表达式，所以这个后续元素明确地被包含在对象中。如果我们提供了一个选择器，那么在包含之前会测试该元素是否匹配。
- en: Miscellaneous Traversal Methods
  id: totrans-286
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 杂项遍历方法
- en: These methods provide other mechanisms for manipulating the set of matched DOM
    elements in a jQuery object.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法提供了在jQuery对象中操作匹配的DOM元素集合的其他机制。
- en: .add()
  id: totrans-288
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .add()
- en: '| Adds elements to the set of matched elements.'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '| 将元素添加到匹配元素集合中。'
- en: '[PRE53]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '|'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters (first version)
  id: totrans-292
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数（第一版本）
- en: 'selector: A string containing a selector expression to match additional elements
    against'
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'selector: 包含用于匹配额外元素的选择器表达式的字符串'
- en: Parameters (second version)
  id: totrans-294
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数（第二版本）
- en: 'elements: one or more elements to add to the set of matched elements'
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 元素：要添加到匹配元素集的一个或多个元素
- en: Parameters (third version)
  id: totrans-296
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数（第三个版本）
- en: 'html: An HTML fragment to add to the set of matched elements'
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: html：要添加到匹配元素集的HTML片段
- en: Return Value
  id: totrans-298
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: The new jQuery object.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 新的jQuery对象。
- en: Description
  id: totrans-300
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: Given a jQuery object that represents a set of DOM elements, the `.add` method
    constructs a new jQuery object from the union of those elements and the ones passed
    into the method. The argument to `.add` can be pretty much anything that `$()`
    accepts, including a jQuery selector expression, references to DOM elements, or
    an HTML snippet.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个代表一组DOM元素的jQuery对象，`.add`方法从这些元素的并集和传递给该方法的元素构造一个新的jQuery对象。`.add`的参数几乎可以是`$()`接受的任何东西，包括一个jQuery选择器表达式、对DOM元素的引用或者一个HTML片段。
- en: 'Consider a page with a simple list and a paragraph following it:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个页面，有一个简单的列表和一个随后的段落：
- en: '[PRE54]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'We can select the list items and then the paragraph by using either a selector
    or a reference to the DOM element itself as the `.add` method''s argument:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用选择器或对DOM元素本身的引用作为`.add`方法的参数来选择列表项，然后选择段落：
- en: '[PRE55]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: The result of this call is a jQuery object wrapping all four elements.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 此调用的结果是一个包装了所有四个元素的jQuery对象。
- en: 'Using an HTML snippet as the `.add` method''s argument (as in the third version)
    we can create additional elements on the fly and add those elements to the matched
    set of elements. Let''s say, for example, that we want to add a class `foo` to
    the list items, the paragraph, and a newly created paragraph:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 使用HTML片段作为`.add`方法的参数（如第三个版本中所示），我们可以动态创建额外的元素，并将这些元素添加到匹配的元素集中。举个例子，假设我们想要将一个`foo`类添加到列表项、段落以及一个新创建的段落中：
- en: '[PRE56]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Although the new paragraph has been created and its `foo` class added, it still
    does not appear on the page. To place it on the page, we can add one of the insertion
    methods to the chain.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管新的段落已经被创建并且其`foo`类已添加，但它仍然不会出现在页面上。为了将其放置在页面上，我们可以在链中添加一个插入方法。
- en: For more information about the insertion methods please refer to [Chapter 4](ch04.html
    "Chapter 4. DOM Manipulation Methods").
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 关于插入方法的更多信息，请参阅[第4章](ch04.html "第4章。DOM操作方法")。
- en: .is()
  id: totrans-311
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .is()
- en: '| Checks the current matched set of elements against a selector and returns
    `true` if at least one of these elements matches the selector.'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: '| 检查当前匹配的元素集是否与选择器匹配，并在至少有一个元素匹配选择器时返回`true`。'
- en: '[PRE57]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '|'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters
  id: totrans-315
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数
- en: 'selector: A string containing a selector expression to match elements against'
  id: totrans-316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择器：一个包含用于匹配元素的选择器表达式的字符串。
- en: Return Value
  id: totrans-317
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: A boolean indicating whether an element matches the selector.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 一个布尔值，指示元素是否与选择器匹配。
- en: Description
  id: totrans-319
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: Unlike the rest of the methods in this chapter, `.is()` does not create a new
    jQuery object. Instead, it allows us to test the contents of a jQuery object without
    modification. This is often useful in callbacks, such as event handlers.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 与本章其他方法不同，`.is()`不会创建新的jQuery对象。相反，它允许我们在不修改jQuery对象的情况下测试其内容。这在回调函数中经常很有用，比如事件处理程序。
- en: 'Suppose we have a list, with two of its items containing a child element:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个列表，其中两个项目包含一个子元素：
- en: '[PRE58]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'We can attach a click handler to the `<ul>` element, and then limit the code
    to be triggered only when a list item itself, not one of its children, is clicked:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将单击处理程序附加到`<ul>`元素上，然后限制代码只在单击列表项本身时触发，而不是其子元素之一时触发：
- en: '[PRE59]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Now, when the user clicks on the word `list` in the first item or anywhere in
    the third item, the clicked list item will be removed from the document. However,
    when the user clicks on `item 1` in the first item or anywhere in the second item,
    nothing will occur, because for those target of the event would be `<strong>`
    and `<span>` respectively.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当用户在第一项中单击`list`这个词或者在第三项的任何位置单击时，被点击的列表项将会从文档中移除。然而，当用户在第一项中的`item 1`或者在第二项的任何位置单击时，不会发生任何事情，因为对于这些事件的目标分别是`<strong>`和`<span>`。
- en: .end()
  id: totrans-326
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .end()
- en: '| Ends the most recent filtering operation in the current chain and returns
    the set of matched elements to its previous state.'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: '| 结束当前链中最近的过滤操作，并将匹配的元素集返回到其先前的状态。'
- en: '[PRE60]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '|'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters
  id: totrans-330
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数
- en: None.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 无。
- en: Return Value
  id: totrans-332
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: The previous jQuery object.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 前一个jQuery对象。
- en: Description
  id: totrans-334
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: Most of the methods in this chapter operate on a jQuery object and produce a
    new one, matching a different set of DOM elements. When this happens, it is as
    if a new set of elements is pushed onto a stack that is maintained inside the
    object. Each successive filtering method pushed a new element set onto the stack.
    If we need an older element set, we can use `.end()` to pop the sets back off
    of the stack.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的大多数方法操作一个 jQuery 对象并产生一个新的对象，匹配不同的 DOM 元素集。当这种情况发生时，就好像一个新的元素集被推送到对象内部维护的堆栈上一样。每个连续的过滤方法都会将一个新的元素集推送到堆栈上。如果我们需要一个旧的元素集，可以使用
    `.end()` 将集合从堆栈中弹出。
- en: 'Suppose we have a couple of short lists on a page:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们在页面上有几个简短的列表：
- en: '[PRE61]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'The `.end` method is useful primarily when exploiting jQuery''s chaining properties.
    When not using chaining, we can usually just call up a previous object by variable
    name, so that we don''t need to manipulate the stack. With `.end()`, though, we
    can string all the method calls together:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: '`.end` 方法主要在利用 jQuery 的链接属性时很有用。当不使用链接时，通常可以通过变量名调用前一个对象，这样我们就不需要操作堆栈。但是，使用
    `.end()`，我们可以将所有方法调用串在一起：'
- en: '[PRE62]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: This chain searches for items with the class `foo` within the first list only
    and adds the class `some-class` to them. Then `.end()` returns the object to its
    state before the call to `.find()`, so the second `.find()` looks for `.bar` inside
    `<ul class="first">`, not just inside that list's `<li class="foo">`, and adds
    the class `another-class` to the matching element. The result is that items `1`
    and `3` of the first list have a class added to them, and none of the items from
    the second list do.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 此链在第一个列表中搜索具有类 `foo` 的项目，并向其添加类 `some-class`。然后 `.end()` 将对象返回到调用 `.find()`
    之前的状态，因此第二个 `.find()` 不仅在该列表的 `<li class="foo">` 中查找 `.bar`，而且在 `<ul class="first">`
    中查找，然后将类 `another-class` 添加到匹配的元素上。结果是第一个列表的项目 `1` 和 `3` 添加了一个类，而第二个列表的项目没有添加任何类。
- en: 'A long jQuery chain can be visualized as a structured code block, with filtering
    methods providing the openings of nested blocks and `.end` methods closing them:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 长长的 jQuery 链可以被视为一个结构化的代码块，其中过滤方法提供了嵌套块的开头，而 `.end` 方法则关闭它们：
- en: '[PRE63]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: The last `.end()` is unnecessary, as we are discarding the jQuery object immediately
    thereafter. However, when the code is written in this form the `.end()` provides
    visual symmetry and closure—making the program, at least to the eyes of some developers,
    more readable.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个 `.end()` 是不必要的，因为我们随后立即丢弃了 jQuery 对象。但是，当代码以这种形式编写时，`.end()` 提供了视觉对称性和闭合性——至少在某些开发人员眼中，这样做可以使程序更易读。
