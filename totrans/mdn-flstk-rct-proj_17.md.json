["```js\n    $ cp -R ch6 ch13\n    ```", "```js\n    $ cd backend/\n    $ npm install socket.io@4.7.2\n    ```", "```js\n    DATABASE_URL=mongodb://localhost:27017/chat\n    ```", "```js\n    import { createServer } from 'node:http'\n    import { Server } from 'socket.io'\n    ```", "```js\n    const server = createServer(app)\n    ```", "```js\n    const io = new Server(server, {\n      cors: {\n        origin: '*',\n      },\n    })\n    ```", "```js\n    io.on('connection', (socket) => {\n      console.log('user connected:', socket.id)\n    ```", "```js\n      socket.on('disconnect', () => {\n        console.log('user disconnected:', socket.id)\n      })\n    })\n    ```", "```js\n    export { server as app }\n    ```", "```js\n    $ cd backend/\n    $ npm run dev\n    ```", "```js\n    backend folder anymore!\n    ```", "```js\n    import { io } from 'socket.io-client'\n    ```", "```js\n    const socket = io(import.meta.env.VITE_SOCKET_HOST)\n    ```", "```js\n    socket.on('connect', () => {\n      console.log('connected to socket.io as', socket.id)\n    })\n    ```", "```js\n    socket.on('connect_error', (err) => {\n      console.error('socket.io connect error:', err)\n    })\n    ```", "```js\n    VITE_SOCKET_HOST=\"localhost:3001\"\n    ```", "```js\n    $ npm run dev\n    ```", "```js\n    io.on('connection', (socket) => {\n      console.log('user connected:', socket.id)\n      socket.on('disconnect', () => {\n        console.log('user disconnected:', socket.id)\n      })\n    })\n    ```", "```js\n    export function handleSocket(io) {\n      io.on('connection', (socket) => {\n        console.log('user connected:', socket.id)\n        socket.on('disconnect', () => {\n          console.log('user disconnected:', socket.id)\n        })\n    ```", "```js\n        socket.on('chat.message', (message) => {\n          console.log(`${socket.id}: ${message}`)\n        })\n      })\n    }\n    ```", "```js\n    import { handleSocket } from './socket.js'\n    ```", "```js\n    const io = new Server(server, {\n      cors: {\n        origin: '*',\n      },\n    })\n    handleSocket(io)\n    ```", "```js\n    socket.on('connect', () => {\n      console.log('connected to socket.io as', socket.id)\n      socket.emit('chat.message', 'hello from client')\n    })\n    ```", "```js\nXXmWHjA_5zew70VIAAAM: hello from client\n```", "```js\n        socket.on('chat.message', (message) => {\n          console.log(`${socket.id}: ${message}`)\n          io.emit('chat.message', {\n            username: socket.id,\n            message,\n          })\n        })\n    ```", "```js\n    socket.on('chat.message', (msg) => {\n      console.log(`${msg.username}: ${msg.message}`)\n    })\n    ```", "```js\n      io.on('connection', (socket) => {\n        console.log('user connected:', socket.id)\n        const room = socket.handshake.query?.room ?? 'public'\n    ```", "```js\n        socket.join(room)\n        console.log(socket.id, 'joined room:', room)\n    ```", "```js\n          io.to(room).emit('chat.message', {\n            username: socket.id,\n            message,\n          })\n    ```", "```js\n    const socket = io(import.meta.env.VITE_SOCKET_HOST, {\n      query: window.location.search.substring(1),\n    ? at the beginning of the string).\n    ```", "```js\n        socket.on('user.info', async (socketId, callback) => {\n    ```", "```js\n          const sockets = await io.in(socketId).fetchSockets()\n    ```", "```js\n          if (sockets.length === 0) return callback(null)\n    ```", "```js\n          const socket = sockets[0]\n          const userInfo = {\n            socketId,\n            rooms: Array.from(socket.rooms),\n          }\n          return callback(userInfo)\n        })\n    ```", "```js\n    socket.on('connect', async () => {\n      console.log('connected to socket.io as', socket.id)\n      socket.emit('chat.message', 'hello from client')\n    ```", "```js\n      const userInfo = await socket.emitWithAck('user.info', socket.id)\n      console.log('user info', userInfo)\n    })\n    ```", "```js\n    import jwt from 'jsonwebtoken'\n    import { getUserInfoById } from './services/users.js'\n    ```", "```js\n    export function handleSocket(io) {\n      io.use((socket, next) => {\n    ```", "```js\n        if (!socket.handshake.auth?.token) {\n          return next(new Error('Authentication failed: no token provided'))\n        }\n    ```", "```js\n        jwt.verify(\n          socket.handshake.auth.token,\n          process.env.JWT_SECRET,\n    ```", "```js\n          async (err, decodedToken) => {\n            if (err) {\n              return next(new Error('Authentication failed: invalid token'))\n            }\n    ```", "```js\n            socket.auth = decodedToken\n    ```", "```js\n            socket.user = await getUserInfoById(socket.auth.sub)\n            return next()\n          },\n        )\n      })\n    ```", "```js\n             socket.on('chat.message', (message) => {\n          console.log(`${socket.id}: ${message}`)\n          io.to(room).emit('chat.message', {\n            username: socket.user.username,\n            message,\n          })\n        })\n    ```", "```js\n          const userInfo = {\n            socketId,\n            rooms: Array.from(socket.rooms),\n            user: socket.user,\n          }\n    ```", "```js\n    const socket = io(import.meta.env.VITE_SOCKET_HOST, {\n      query: window.location.search.substring(1),\n      auth: {\n        token: window.localStorage.getItem('token'),\n      },\n    })\n    ```"]