- en: '6'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building a Mobile Photo Geotagging Application Using Capacitor and 3D Maps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Angular is a cross-platform JavaScript framework that can be used to build applications
    for different platforms such as web, desktop, and mobile. Moreover, it allows
    developers to use the same code base and apply the same web techniques to each
    platform, enjoying the same experience and performance. In this chapter, we will
    investigate how we can build mobile applications using Angular.
  prefs: []
  type: TYPE_NORMAL
- en: '**Ionic** is a popular UI toolkit that allows us to build mobile applications
    using web technologies such as Angular. The **Capacitor** library greatly enhances
    Ionic applications by enabling them to run natively on Android and iOS devices.
    In this chapter, we will use both technologies to build a mobile application to
    take geotagged photos and display them on a 3D map.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a mobile application with Ionic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Taking photos with Capacitor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Storing data in **Firebase**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Previewing photos with **CesiumJS**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Essential background theory and context
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Capacitor is a native mobile runtime that enables us to build Android and iOS
    applications with web technologies, including Angular. It provides an abstraction
    API layer for web applications to interact with the native resources of a mobile
    OS. It does not include a UI layer or any other way of interacting with the user
    interface.
  prefs: []
  type: TYPE_NORMAL
- en: Ionic is a mobile framework containing a collection of UI components we can
    use in an application built with Capacitor. The main advantage of Ionic is that
    we maintain a single code base across all native mobile platforms. That is, we
    write the code once, and it works everywhere. Ionic supports all popular JavaScript
    frameworks, including Angular.
  prefs: []
  type: TYPE_NORMAL
- en: Firebase is a **Backend-as-a-Service (BaaS)** platform provided by Google that
    contains tools and services for building applications. **Cloud Firestore** is
    a database solution provided by Firebase that features a flexible and scalable
    NoSQL document-oriented database that can be used in web and mobile applications.
    **Firebase** **Storage** is a service that allows us to interact with a storage
    mechanism and upload or download files.
  prefs: []
  type: TYPE_NORMAL
- en: CesiumJS is a JavaScript library for creating interactive 3D maps in the browser.
    It is an open-source, cross-platform library that uses WebGL and allows us to
    share geospatial data on multiple platforms. It is powered by **Cesium**, a platform
    for building high-quality and performant 3D geospatial applications.
  prefs: []
  type: TYPE_NORMAL
- en: Project overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this project, we will build a mobile application that can take photos according
    to the current location and preview them on a map. Initially, we will learn how
    to create a mobile application using Angular and Ionic. We will then use Capacitor
    to take photos using the camera of the mobile device and tag them with the current
    location via GPS. We will upload those photos to Firebase along with their location
    data. Finally, we will use CesiumJS to load location data on a 3D globe along
    with a preview of the photo. The following diagram depicts an architectural overview
    of the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Εικόνα που περιέχει διάγραμμα  Περιγραφή που δημιουργήθηκε αυτόματα](img/B18465_06_01.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.1 – Project architecture
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will learn how to build a mobile application with Angular
    and Ionic. To follow up with the project and preview your application, you must
    follow the getting started guide for your development environment (Android or
    iOS), which you can find in the *Further reading* section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Build time: 2 hours'
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You will need the following software and tools to complete the project:'
  prefs: []
  type: TYPE_NORMAL
- en: 'For Android development: **Android Studio** with the latest Android SDK.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For iOS development: **Xcode** with the iOS SDK and XcodeCommand Line Tools.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A physical mobile device.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Angular CLI: A command-line interface for Angular that you can find at [https://angular.io/cli](https://angular.io/cli).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'GitHub material: The related code for this chapter can be found in the `Chapter06`
    folder at [https://github.com/PacktPublishing/Angular-Projects-Third-Edition](https://github.com/PacktPublishing/Angular-Projects-Third-Edition).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a mobile application with Ionic
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first step toward building our application is creating a new mobile application
    using the Ionic toolkit. We will start building our application with the following
    tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: Scaffolding the application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building the main menu
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ionic has a pretty straightforward process for creating a new mobile application
    from scratch without entering a single line of code.
  prefs: []
  type: TYPE_NORMAL
- en: Scaffolding the application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create a new Ionic application, complete the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the Ionic tooling that we will need using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The **Ionic CLI** is used to build and run an Ionic mobile application. The
    `native-run` library is used to run native libraries on mobile devices and emulators.
    The `cordova-res` library generates the icons and splash screens of our application
    for native mobile devices.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Run the following command to create a new Angular application that uses the
    `sidemenu` starter template from Ionic and also adds Capacitor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding command will ask you if you want to use Angular modules or standalone
    components. Select `Standalone` and press *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ionic will create a sample application for us with some ready-made data. In
    the following section, we will learn how to modify it according to our needs.
  prefs: []
  type: TYPE_NORMAL
- en: Building the main menu
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will start building the main menu of our application according to our specifications:'
  prefs: []
  type: TYPE_NORMAL
- en: Load the Ionic project we built in the previous section within VSCode and open
    the main HTML file of the application, `index.html`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the name of your application in the `<title>` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the template file of the main component, `app.component.html`, and remove
    the second `<ion-list>` element. An `<ion-list>` element displays items in a list
    view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the name of your application in the `<ion-list-header>` element and change
    the text of the `<ion-note>` element accordingly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: An `<ion-list-header>` element is the header of a list. An `<ion-note>` element
    is a text element used to provide additional information, such as the subtitle
    of a list.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the TypeScript file of the main component, `app.component.ts`, and modify
    the `AppComponent` class as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `appPages` property contains all the pages of our application. Each page
    has a `title`, a `url` from which it is accessible, and an `icon`. Our application
    will consist of two pages, one that will be used for taking photos using the camera
    and another for displaying them on a map.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Run the `serve` command of the Ionic CLI to start the application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding command will build your application and open your default browser
    at `http://localhost:8100`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You should see the following output in the side menu of the application:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 6.8 – Main menu](img/B18465_06_02.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 6.2 – Main menu
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Suppose you adjust your browser window size to achieve a more realistic view
    for a mobile device or use an emulator like the device toolbar in the Google Chrome
    developer tools. In that case, you must click the application menu button to see
    the preceding image.
  prefs: []
  type: TYPE_NORMAL
- en: We have learned how to create a new Ionic application using the Ionic CLI and
    make modifications according to our needs.
  prefs: []
  type: TYPE_NORMAL
- en: If we try to click on a menu item, we will notice that nothing happens since
    we have not created the necessary pages to be activated in each case. In the following
    section, we will learn how to complete this task by building the functionality
    of the first page.
  prefs: []
  type: TYPE_NORMAL
- en: Taking photos with Capacitor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first page of our application will allow the user to take photos using
    the camera. We will use the Capacitor runtime to get access to the native resource
    of the camera. To implement the page, we need to take the following actions:'
  prefs: []
  type: TYPE_NORMAL
- en: Create the user interface.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interact with Capacitor.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s start building the user interface of the page.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the user interface
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Each page in our application is a different Angular component. To create an
    Angular component in Ionic, we can use the `generate` command of the Ionic CLI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous command will perform the following actions:'
  prefs: []
  type: TYPE_NORMAL
- en: Create an Angular component named `capture`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a related routes file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s start building the logic of our new page now:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, make our page the default when the user opens the application. Open
    the `app.routes.ts` file and change the first entry of the `routes` property to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The empty path is called the **default** routing path and is activated when
    our application starts up. The `redirectTo` property tells Angular to redirect
    to the `capture` path, which will load the page we created.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can also remove the `folder/:id` path as it is no longer needed and the
    whole `src\app\folder` directory from the application, which is part of the Ionic
    template layout.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `capture.page.html` file and replace the contents of the first `<ion-toolbar>`
    element as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `<ion-toolbar>` element is part of the `<ion-header>` element, which is
    the top navigation bar of the page. It contains an `<ion-menu-button>` element
    for toggling the main menu of the application and an `<ion-title>` element that
    depicts the title of the page.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Modify the title of the second `<ion-toolbar>` element as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The second `<ion-header>` element will be displayed when the page is expanded,
    and the main menu is displayed on the screen.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following HTML code immediately after the second header:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: It contains an `<ion-fab-button>` element, which, when clicked, will open the
    camera of the device to take a photo.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Finally, let’s add some cool styles to our page. Open the `capture.page.scss`
    file and enter the following CSS styles:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let’s run the application using `ionic serve` to get a quick preview of what
    we have built so far:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18465_06_03.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.3 – Capture page
  prefs: []
  type: TYPE_NORMAL
- en: The camera button on the page needs to open the camera to take a photo. In the
    following section, we will learn how to use Capacitor to interact with the camera.
  prefs: []
  type: TYPE_NORMAL
- en: Interacting with Capacitor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Taking photos in our application involves using two APIs from the Capacitor
    library. The **Camera API** will open the camera to take a photo, and the **Geolocation
    API** will read the current location from the GPS. Let’s see how we can use both
    in our application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the following `npm` command to install both APIs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create an Angular service using the following Ionic CLI command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `photo.service.ts` file and add the following `import` statements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a method in the `PhotoService` class to read the current position from
    the GPS device:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `getCurrentPosition` method of the `Geolocation` object contains a `coords`
    property with various location-based data such as the latitude and the longitude.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create another method that calls the `getLocation` method and opens the camera
    of the device to take a photo:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We use the `getPhoto` method of the `Camera` object and pass a configuration
    object to define the properties for each photo. The `resultType` property indicates
    that the photo will be in a **data URL** format to save it to Firebase later easily.
    The `source` property indicates that we will use the camera device to get the
    photo, and the `quality` property defines the quality of the actual photo.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `capture.page.ts` file and inject `PhotoService` in the `constructor`
    of the `CapturePage` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a component method that will call the `takePhoto` method of the `photoService`
    variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `capture.page.html` file and bind the `click` event of the `<ion-fab-button>`
    element to the `openCamera` component method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We have now added all the necessary pieces to take a photo using the camera
    of the device. Let’s try to run the application on a real device to test the interaction
    with the camera:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to build our application using the following Ionic CLI command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding command will create a `www` folder in the root folder of your
    project that contains your application bundle.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command to open the application in the development environment
    of your chosen platform:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the previous command, `<os>` can be either **android** or **ios**. Upon execution,
    it will open the native mobile project in the respective IDE, Android Studio,
    or Xcode, depending on the platform that you are targeting. The IDE must then
    be used to run the native application.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Whenever you want to rebuild the application, you must run the `ionic cap copy`
    command to copy the application bundle from the `www` folder into the native mobile
    project.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on the camera button. The application may ask your permission to use the
    GPS and the camera. Alternatively, you may need to enable location settings on
    your device before continuing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will probably need to add additional permissions in the native mobile project
    of your development environment. Check the respective documentation of the APIs
    on the Capacitor website.
  prefs: []
  type: TYPE_NORMAL
- en: The first page of our application now has a sleek interface that allows the
    user to interact with the camera. We have also created an Angular service that
    ensures a seamless interaction with Capacitor to get location-based data and take
    photos. In the following section, we will see how to save them in the cloud using
    Firebase.
  prefs: []
  type: TYPE_NORMAL
- en: Storing data in Firebase
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The application will be able to store photos and their location in Firebase.
    We will use the Storage service to upload our photos and the Cloud Firestore database
    to keep their location. We will further expand our application in the following
    tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Firebase project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating the **AngularFire** library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: First, we must set up a new Firebase project for our application.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Firebase project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can set up and configure a Firebase project using the **Firebase console**
    at [https://console.firebase.google.com](https://console.firebase.google.com):'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **Add project** button to create a new Firebase project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.10 – Create a new Firebase project](img/B18465_06_04.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.4 – Create a new Firebase project
  prefs: []
  type: TYPE_NORMAL
- en: Enter a name for your project and click the **Continue** button:![Figure 6.11
    – Enter the project name](img/B18465_06_05.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 6.5 – Enter the project name
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Firebase generates a unique identifier for your project, which is located underneath
    the project name and is used in various Firebase services.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Disable **Google Analytics** for this project and click on the **Create project**
    button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.12 – Disable Google Analytics](img/B18465_06_06.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.6 – Disable Google Analytics
  prefs: []
  type: TYPE_NORMAL
- en: Wait for the new project to be created and click the **Continue** button. You
    will be redirected to the dashboard of your new project, which contains a list
    of options:![Figure 6.13 – Select the type of your application](img/B18465_06_07.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 6.7 – Select the type of your application
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the third option with the *code* icon to add Firebase to a web application.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Enter a name for your application in the **App nickname** field and click on
    the **Register app** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.14 – Application registration](img/B18465_06_08.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.8 – Application registration
  prefs: []
  type: TYPE_NORMAL
- en: 'Firebase will generate a configuration that we will use later in the mobile
    application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Copy the `firebaseConfig` object and click the **Continue to console** button.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The Firebase configuration can also be accessed later at `https://console.firebase.google.com/project/<project-id>/settings/general`,
    where `project-id` is the ID of your Firebase project.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Back in the dashboard console, select the **Cloud Firestore** option to enable
    Cloud Firestore in your application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the **Create database** button to create a new Cloud Firestore database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.16 – Create a database](img/B18465_06_09.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.9 – Create a database
  prefs: []
  type: TYPE_NORMAL
- en: Select the operation mode of your database. Choose **Start in Test mode** for
    development purposes and click the **Next** button:![Εικόνα που περιέχει κείμενο  Περιγραφή
    που δημιουργήθηκε αυτόματα](img/B18465_06_10.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 6.10 – Select operation mode
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Choosing a mode is nothing less than setting rules for your database. Test mode
    allows faster setup and keeps your data public for 30 days. When you are ready
    to move your application into production, you can modify the rules of your database
    accordingly to make your data private.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Choose a location for your database according to your regional settings and
    click the **Enable** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Congratulations! You have created a new Cloud Firestore database. In the next
    section, we will learn how to use the new database for saving data with our mobile
    application.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating the AngularFire library
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The AngularFire library is an Angular library that we can use in an Angular
    application to interact with Firebase family products such as Cloud Firestore
    and the Storage service. To install it in our application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command in a terminal window to install **Firebase tools**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following command in the same terminal window to authenticate with
    the Firebase CLI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, run the following command of the Angular CLI to install the `@angular/fire`
    npm package in your Angular CLI project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding command will find the latest version of the library and prompt
    us to install it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'First, it will ask what features of Firebase we want to enable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Make sure that you select *only* the `Firestore` option and press *Enter*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Then, it will ask us to select which Firebase account we want to use:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Ensure the account you used earlier is selected, and press *Enter*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the next question, we will choose for which project we are going to use
    Firestore:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Select the `phototag` project that we created earlier and press *Enter*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Finally, we must choose the app that has Firestore enabled:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Select the `phototag` app that we created earlier and press *Enter*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The preceding command may throw an error stating that the `app.module.ts` file
    does not exist. Please ignore it and continue with the next step.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `main.ts` file and add the following `import` statements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, modify the `providers` array in the `bootstrapApplication` method
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Replace `<firebaseConfig>` with the Firebase configuration object that you copied
    in the previous section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see now how we can use the AngularFire library in our application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `photo.service.ts` file and add the following `import` statements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `Firestore` service contains all the necessary methods that we will need
    to interact with our Cloud Firestore database. The `Storage` service contains
    methods for uploading files to the Storage service.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Inject both services into the `constructor` of the `PhotoService` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the following method to save a photo in Firebase:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: First, we create a random `name` for our photo and use the `uploadString` method
    to upload it to Firebase storage. As soon as uploading has been completed, we
    get a downloadable URL using the `getDownloadURL` method, which can be used to
    access that photo. Finally, we use the `addDoc` method to add a new photo in the
    `photocollection` property of the Firestore database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Modify the `takePhoto` method to call the `savePhoto` method that we created
    in the previous step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We are now ready to check the full functionality of the photo-shooting process:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command of Capacitor to copy the application bundle to the
    native mobile project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the native mobile project using the `open` command of Capacitor and run
    the project using the respective IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the Firebase console of your application and select the **Storage** option
    in the **Build** section. Click on the **Get started** button, select the **Start
    in Test mode** option, and click **Next**. Finally, click **Done** to complete
    the process of setting up cloud storage.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use the application to take a nice photo. To verify that your photo has been
    successfully uploaded to Firebase, refresh the page in the Firebase console. You
    should see an entry like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.19 – Firebase storage](img/B18465_06_11.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.11 – Firebase storage
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, select the **Firestore Database** option in the **Build** section,
    and you should see something like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.20 – Cloud Firestore](img/B18465_06_12.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.12 – Cloud Firestore
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding screenshot, the **1oFxxWgQseIwqWUrYBkN** entry is the logical
    object of the photo that contains the URL of the actual file and its location
    data.
  prefs: []
  type: TYPE_NORMAL
- en: The first page of our application is now feature-complete. We have gone through
    the full process of taking and uploading a photo to Firebase, along with its location
    data. We started by setting up and configuring a Firebase project and finished
    by learning how to use the AngularFire library to interact with that project.
    In the next section, we will reach our final destination by implementing the second
    page of our application.
  prefs: []
  type: TYPE_NORMAL
- en: Previewing photos with CesiumJS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The next feature of our application will be to display all the photos we have
    taken with the camera on a 3D map. The CesiumJS library provides a viewer with
    a 3D globe that we can use to visualize various things, such as images in specific
    locations. This new feature of our application will consist of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring CesiumJS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying photos on the viewer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will begin by learning how to set up the CesiumJS library.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring CesiumJS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The CesiumJS library is an npm package that we can install to start working
    with 3D maps and visualizations:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following `npm` command to install CesiumJS:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `angular.json` configuration file and add the following entries in
    the `assets` array of the `build` architect option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding entries will copy all CesiumJS source files into a `cesium` folder
    inside the `assets` folder of our application.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Also, add the CesiumJS widgets style sheet file into the `styles` array of
    the `build` section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The viewer of CesiumJS contains a toolbar with widgets, including a search bar
    and a dropdown for selecting a specific type of map, such as Bing Maps or Mapbox.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the main entry point file of our application, `main.ts`, and add the following
    line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `CESIUM_BASE_URL` global variable indicates the location of the CesiumJS
    source files.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Install a custom webpack builder using the following `npm` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: A **builder** is an Angular library that extends the default functionality of
    the Angular CLI. The `@angular-builders/custom-webpack` builder allows us to provide
    an additional webpack configuration file while building our application. It is
    beneficial in cases where we want to include other webpack plugins or override
    existing functionality.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a new webpack configuration file named `extra-webpack.config.js` in
    the root folder of the project and add the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The configuration file will ensure that webpack will only try to load CesiumJS
    code that it can understand. CesiumJS uses modules in a format that cannot be
    statically analyzed using webpack.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `angular.json` file and change the `builder` property of the `build`
    architect section to use the custom webpack builder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define the path of the custom webpack configuration file in the `options` property
    of the `build` section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Also configure the `serve` architect section to use the custom webpack builder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now that we have completed the configuration of the CesiumJS library, we can
    start creating the page for our feature:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command of the Ionic CLI to create a new page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `view.page.html` file and modify the first `<ion-header>` element
    so that it includes a menu toggle button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change the title of the `<ion-content>` element and add a `<div>` element that
    will be the container for our viewer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `#mapContainer` is a **template reference variable** we use to declare an
    alias for an element in our template.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `view.page.scss` file and set the size of the map container element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let’s create our viewer now. Open the `view.page.ts` file and modify it as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We create a new `Viewer` object inside the `ngAfterViewInit` method of the component.
    The `ngAfterViewInit` method is called when the view of the component has finished
    loading, and it is defined in the `AfterViewInit` interface. The constructor of
    the `Viewer` class accepts as a parameter the native HTML element on which we
    want to create the viewer. In our case, we want to attach it to the map container
    element that we created earlier. Thus, we use the `@ViewChild` decorator to reference
    that element by passing the template reference variable name as a parameter.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Run the application using `ionic serve` and click on the **View gallery** option
    from the main menu. You should see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.21 – View gallery page](img/B18465_06_13.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.13 – View gallery page
  prefs: []
  type: TYPE_NORMAL
- en: We have now successfully configured the CesiumJS library in our application.
    In the next section, we will see how to benefit from it and display our photos
    on the 3D globe of the CesiumJS viewer.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying photos on the viewer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The next thing we need to do for our application to be ready is display our
    photos on the map. We will get all the photos from Firebase and add them to the
    viewer in the specified locations. Let’s see how we can accomplish that:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new Angular service using the following command of the Ionic CLI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `cesium.service.ts` file and add the following `import` statements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inject the `Firestore` service in the `constructor` of the `CesiumService`
    class and create a `viewer` property, which we will use to store our `Viewer`
    object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a `register` method to set the `viewer` property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a method to get the `photos` collection from Cloud Firestore:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding method, we call the `getDocs` method to get the data of the
    `photos` collection.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create the following method for adding all the photos to the viewer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The location of each photo on the viewer will be displayed as a **pin**. Thus,
    we need to initialize a `PinBuilder` object first. The preceding method calls
    the `getPhotos` method to get all photos from Cloud Firestore. For each photo,
    it creates an `entity` object that contains the `position`, which is the location
    of the photo in degrees, and a `billboard` property that displays a pin of 48
    pixels in size. It also defines a `description` property that will show the actual
    image of the photo when we click on the pin.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Each `entity` object is added to the `entities` collection of the viewer using
    its `add` method.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The description of each photo is displayed inside an **info box**. Open the
    `global.scss` file that contains the global styles of the application and add
    the following CSS styles for the info box:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let’s use `CesiumService` from our page. Open the `view.page.ts` file
    and inject the `CesiumService` class into the `constructor` of the `ViewPage`
    class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify the `ngAfterViewInit` method to register the viewer and add the photos:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We are now ready to view our photos on the map:'
  prefs: []
  type: TYPE_NORMAL
- en: Run the application using the `ionic serve` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the application to take nice photos, preferably in different locations.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the **View gallery** option from the main menu, and you should get an
    output like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.22 – Photos on the map](img/B18465_06_14.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.14 – Photos on the map
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on one of the pins on the map, and you should see your photo:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.23 – Photo display](img/B18465_06_15.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.15 – Photo display
  prefs: []
  type: TYPE_NORMAL
- en: We now have a complete mobile application for taking geotagged photos and displaying
    them on a map. We saw how to set up the CesiumJS library and get our photos from
    Cloud Firestore. The API of the CesiumJS viewer provided us with an easy way to
    visualize our photos on the map and interact with them.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we built a mobile application for taking photos, tagging them
    with the current location, and displaying them on a 3D map. Initially, we learned
    how to create a new mobile application using the Ionic framework. We built the
    application locally and integrated Capacitor to interact with the camera and the
    GPS device. The camera was used to take photos, and the GPS to mark them with
    the location.
  prefs: []
  type: TYPE_NORMAL
- en: Later on, we used Firebase services to store our photo files and data in the
    cloud. Finally, we learned how to retrieve the stored photos from Firebase and
    display them on a 3D globe using the CesiumJS library.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will investigate another way to prerender content in
    Angular. We will use server-side rendering techniques to create a GitHub portfolio
    website.
  prefs: []
  type: TYPE_NORMAL
- en: Practice questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which toolkit can we use to create a UI in a Capacitor application?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which method do we use to take photos with the camera in a Capacitor application?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do we read the current location in a Capacitor application?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do we add a menu toggle button with Ionic?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which Capacitor command do we use to sync the application bundle with native
    mobile projects?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the difference between test and production modes in Cloud Firestore?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do we initialize an application with the AngularFire library?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which method do we use to fetch data from a Cloud Firestore collection?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do we create a pin using the CesiumJS library?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do we convert latitude and longitude to degrees using CesiumJS?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Getting started with Capacitor: [https://capacitorjs.com/docs/getting-started](https://capacitorjs.com/docs/getting-started)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Android getting started guide for Capacitor: [https://capacitorjs.com/docs/android#getting-started](https://capacitorjs.com/docs/android#getting-started)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'iOS getting started guide for Capacitor: [https://capacitorjs.com/docs/ios#getting-started](https://capacitorjs.com/docs/ios#getting-started
    )'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Angular development with Ionic: [https://ionicframework.com/docs/angular/overview](https://ionicframework.com/docs/angular/overview)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'AngularFire library documentation: [https://firebaseopensource.com/projects/angular/angularfire2](https://firebaseopensource.com/projects/angular/angularfire2)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'CesiumJS quick start guide: [https://cesium.com/docs/tutorials/quick-start](https://cesium.com/docs/tutorials/quick-start)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'CesiumJS and Angular article: [https://cesium.com/blog/2018/03/12/cesium-and-angular](https://cesium.com/blog/2018/03/12/cesium-and-angular)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Join our community on Discord
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Join our community’s Discord space for discussions with the author and other
    readers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/AngularProjects3e](https://packt.link/AngularProjects3e)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/QR_Code89405936498927781.png)'
  prefs: []
  type: TYPE_IMG
