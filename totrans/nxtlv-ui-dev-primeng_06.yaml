- en: '6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '6'
- en: Working with Table, List, and Card Components
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与表、列表和卡片组件一起工作
- en: 'As we continue our journey with PrimeNG and Angular, we find ourselves in the
    realm of data display components. In this chapter, we will focus on three key
    components: the data table, list, and card components. These components are the
    workhorses of any application, responsible for presenting data to users in a clear,
    concise, and user-friendly manner. They are the bridge between the raw data in
    our applications and the polished, interactive interfaces that our users interact
    with.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们继续使用PrimeNG和Angular的旅程，我们发现自己处于数据展示组件的领域。在本章中，我们将重点关注三个关键组件：数据表、列表和卡片组件。这些组件是任何应用程序的功臣，负责以清晰、简洁和用户友好的方式向用户展示数据。它们是我们应用程序中的原始数据与用户交互的精致、交互式界面之间的桥梁。
- en: The objective of this chapter is to provide you with the necessary knowledge
    and skills to effectively utilize data tables, lists, and card components, enabling
    you to present data in the most user-friendly and efficient manner possible. By
    gaining mastery over these components, you can ensure that users can effortlessly
    comprehend and interact with the data, ultimately leading to enhanced user engagement
    and satisfaction.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的目标是向您提供必要的知识和技能，以便您能够有效地利用数据表、列表和卡片组件，以最用户友好的方式呈现数据。通过掌握这些组件，您可以确保用户能够轻松理解并交互数据，最终提高用户参与度和满意度。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Creating responsive layouts with PrimeFlex
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用PrimeFlex创建响应式布局
- en: Introducing data display components
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍数据展示组件
- en: Working with data table components
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与数据表组件一起工作
- en: Working with list components
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与列表组件一起工作
- en: Working with card components
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与卡片组件一起工作
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'This chapter contains various code samples of PrimeNG displaying components.
    You can find the related source code in the `chapter-06` folder of the following
    GitHub repository: [https://github.com/PacktPublishing/Next-Level-UI-Development-with-PrimeNG/tree/main/apps/chapter-06](https://github.com/PacktPublishing/Next-Level-UI-Development-with-PrimeNG/tree/main/apps/chapter-06).'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章包含PrimeNG展示组件的各种代码示例。您可以在以下GitHub仓库的`chapter-06`文件夹中找到相关源代码：[https://github.com/PacktPublishing/Next-Level-UI-Development-with-PrimeNG/tree/main/apps/chapter-06](https://github.com/PacktPublishing/Next-Level-UI-Development-with-PrimeNG/tree/main/apps/chapter-06)。
- en: Creating responsive layouts with PrimeFlex
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用PrimeFlex创建响应式布局
- en: '`Flexbox` and `Grid`, and more.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`Flexbox`和`Grid`等。'
- en: Integrating PrimeFlex with PrimeNG
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将PrimeFlex与PrimeNG集成
- en: 'PrimeFlex can be easily integrated with PrimeNG by installing it via `npm`:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: PrimeFlex可以通过`npm`安装轻松集成到PrimeNG中：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'After the installation process, we’ll include the PrimeFlex library in our
    `styles.scss` file:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装过程之后，我们将PrimeFlex库包含到我们的`styles.scss`文件中：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Once we import `primeflex.scss`, we will be able to create an Angular application
    consistently, ensuring proper spacing, typography, layout, and all other essential
    elements.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们导入`primeflex.scss`，我们就能创建一个Angular应用程序，确保适当的间距、排版、布局以及所有其他基本元素。
- en: Let’s compare how we build layouts with and without PrimeFlex.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们比较一下使用和未使用PrimeFlex构建布局的方式。
- en: 'Building layouts without a utility library such as PrimeFlex can be cumbersome.
    You might find yourself writing repetitive and verbose CSS code, as seen in the
    following code example:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在没有实用库如PrimeFlex的情况下构建布局可能会很繁琐。您可能会发现自己正在编写重复且冗长的CSS代码，如下面的代码示例所示：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We apply styles by creating the `.layout-wrapper` class and adding CSS syntax
    to it. This is a standard CSS implementation that is supported by web browsers.
    With normal CSS, you write your own styles from scratch.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过创建`.layout-wrapper`类并向其中添加CSS语法来应用样式。这是一个由网络浏览器支持的标准化CSS实现。使用常规CSS，您需要从头开始编写自己的样式。
- en: 'On the other hand, PrimeFlex simplifies this process by providing utility classes
    that encapsulate common CSS properties. Let’s look at the template with PrimeFlex
    utility classes:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，PrimeFlex通过提供封装常见CSS属性的实用类来简化这一过程。让我们看看带有PrimeFlex实用类的模板：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: By utilizing common CSS utility classes, we can streamline our template, such
    as transforming the `.layout-wrapper` class to `flex flex-wrap gap-7`, eliminating
    the need for writing custom CSS code.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用常见的CSS实用类，我们可以简化我们的模板，例如将`.layout-wrapper`类转换为`flex flex-wrap gap-7`，从而消除编写自定义CSS代码的需求。
- en: 'The usage of PrimeFlex utility classes offers ease of use and consistency within
    your entire Angular application, while normal CSS provides greater flexibility
    and customization options, although it requires more effort and expertise to achieve
    desired styles. Let’s examine this in the browser:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: PrimeFlex 实用类的使用为你的整个 Angular 应用提供了易用性和一致性，尽管正常的 CSS 提供了更大的灵活性和定制选项，但需要更多的努力和专业知识来实现所需的样式。让我们在浏览器中查看：
- en: '![Figure 6.1 – PrimeFlex classes example](img/B18805_06_01.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.1 – PrimeFlex 类示例](img/B18805_06_01.jpg)'
- en: Figure 6.1 – PrimeFlex classes example
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.1 – PrimeFlex 类示例
- en: You can observe that the utility classes are mapped to their respective CSS
    styles, for example, from `flex` to `display:` `flex !important;`.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以观察到实用类映射到它们各自的 CSS 样式，例如，从 `flex` 到 `display:` `flex !important;`。
- en: 'Here are some examples of utility classes related to layout (`Flexbox` and
    `Grid`) and text in PrimeFlex:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些与布局（`Flexbox` 和 `Grid`）和文本相关的实用类示例：
- en: '![ Figure 6.2 – Common PrimeFlex utility classes](img/B18805_06_02.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.2 – 常见 PrimeFlex 实用类](img/B18805_06_02.jpg)'
- en: Figure 6.2 – Common PrimeFlex utility classes
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.2 – 常见 PrimeFlex 实用类
- en: These classes are part of PrimeFlex’s utility-first approach to CSS, providing
    you with a set of reusable classes that encapsulate common layout and text styling
    patterns. By using these classes, you can quickly build complex layouts and apply
    text styling without having to write custom CSS code, leading to a more efficient
    and maintainable development process. For a complete set of utility classes, please
    check out the documentation at [https://primeflex.org](https://primeflex.org).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这些类是 PrimeFlex 对 CSS 的实用优先方法的一部分，为你提供了一组可重用的类，这些类封装了常见的布局和文本样式模式。通过使用这些类，你可以快速构建复杂的布局并应用文本样式，而无需编写自定义
    CSS 代码，从而实现更高效和可维护的开发过程。有关完整实用类集，请查阅 [https://primeflex.org](https://primeflex.org)
    的文档。
- en: Using Flexbox in PrimeFlex
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 PrimeFlex 中使用 Flexbox
- en: PrimeFlex provides a robust and versatile **Flexbox** utility system that allows
    you to create flexible and responsive layouts. With Flexbox, you can easily distribute
    and align elements within a container, making it an excellent tool for building
    modern and dynamic user interfaces.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: PrimeFlex 提供了一个强大且多功能的 **Flexbox** 实用系统，允许你创建灵活和响应式的布局。使用 Flexbox，你可以轻松地在容器内分配和排列元素，使其成为构建现代和动态用户界面的优秀工具。
- en: Creating a flex container
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建弹性容器
- en: 'To create a Flexbox layout, you need to designate a container element as a
    flex container. By applying the `flex` class to the container, you enable the
    Flexbox behavior, allowing child elements to be flex items:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建 Flexbox 布局，你需要指定一个容器元素作为弹性容器。通过将 `flex` 类应用于容器，你可以启用 Flexbox 行为，允许子元素成为弹性项：
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the preceding code example, the `flex` class is applied to the container
    element, which makes it a flex container. The child elements inside the container
    automatically become flex items.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码示例中，`flex` 类被应用于容器元素，这使得它成为一个弹性容器。容器内的子元素自动成为弹性项。
- en: This is the base code for *Figure 6**.3*, which you will see later.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 *图 6**.3* 的基本代码，你将在后面看到。
- en: Applying flex direction
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 应用弹性方向
- en: 'Flexbox also provides four main directions to arrange flex items within a flex
    container: `row`, `row-reverse`, `column`, and `column-reverse`. The direction
    is determined by applying one of the following classes to the flex container:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Flexbox 还提供了四种主要方向来在弹性容器内排列弹性项：`row`、`row-reverse`、`column` 和 `column-reverse`。方向是通过将以下类之一应用于弹性容器来确定的：
- en: '`flex-row`: Items are laid out in a row, from left to right'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`flex-row`: 项目从左到右以行形式排列'
- en: '`flex-row-reverse`: Items are laid out in a row, from right to left'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`flex-row-reverse`: 项目从右到左以行形式排列'
- en: '`flex-column`: Items are laid out in a column, from top to bottom'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`flex-column`: 项目从上到下以列的形式排列'
- en: '`flex-column-reverse`: Items are laid out in a column, from bottom to top'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`flex-column-reverse`: 项目从下到上以列的形式排列'
- en: 'This is an example of how we create a flex container with different layouts:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个我们如何创建具有不同布局的弹性容器的示例：
- en: '![Figure 6.3 – PrimeFlex Flexbox example](img/B18805_06_03.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.3 – PrimeFlex Flexbox 示例](img/B18805_06_03.jpg)'
- en: Figure 6.3 – PrimeFlex Flexbox example
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.3 – PrimeFlex Flexbox 示例
- en: In this example, we harness the power of Flexbox by effortlessly creating diverse
    layouts in either rows or columns simply by applying different classes.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们通过轻松地应用不同的类，在行或列中创建多样化的布局，从而利用 Flexbox 的力量。
- en: Note
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: To learn more about Flexbox and how to debug it, you can visit [https://developer.chrome.com/docs/devtools/css/flexbox/](https://developer.chrome.com/docs/devtools/css/flexbox/).
    It’s a helpful resource that provides insights and guidance on understanding Flexbox
    and troubleshooting any issues you may encounter.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于 Flexbox 及如何调试的信息，您可以访问 [https://developer.chrome.com/docs/devtools/css/flexbox/](https://developer.chrome.com/docs/devtools/css/flexbox/)。这是一个有用的资源，它提供了关于理解
    Flexbox 和解决您可能遇到的问题的见解和指导。
- en: Using flex wrap
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 flex wrap
- en: 'By default, flex items will try to fit within a single line. However, if there
    is insufficient space, the flex items will shrink to accommodate. To control the
    wrapping behavior of flex items, you can use the following classes:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，弹性项目会尝试适应单行。然而，如果空间不足，弹性项目会缩小以适应。要控制弹性项目的换行行为，可以使用以下类：
- en: '`flex-wrap`: Items wrap onto multiple lines if necessary'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`flex-wrap`: 如果需要，项目将换行到多行'
- en: '`flex-wrap-reverse`: Items wrap onto multiple lines if necessary, in reverse
    order'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`flex-wrap-reverse`: 如果需要，项目将按相反顺序换行到多行'
- en: '`flex-nowrap`: Items remain on a single line'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`flex-nowrap`: 项目保持在单行上'
- en: 'Let’s apply wrap functionality to our flex container:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将换行功能应用到我们的弹性容器中：
- en: '[PRE5]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In this example, the flex container has the `flex-wrap` class applied, allowing
    the flex items to wrap onto multiple lines if needed.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，弹性容器应用了 `flex-wrap` 类，允许弹性项目在需要时换行。
- en: Using justify content
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 justify content
- en: 'Flexbox provides powerful alignment options to position flex items along the
    main and cross axes. PrimeFlex offers a variety of classes to control alignment:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Flexbox 提供了强大的对齐选项，用于在主轴和交叉轴上定位弹性项目。PrimeFlex 提供了各种类来控制对齐：
- en: '`justify-content-end`: This aligns the flex items to the end of the flex container
    along the main axis'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`justify-content-end`: 这会将弹性项目沿主轴对齐到弹性容器的末尾'
- en: '`justify-content-center`: This centers the flex items along the main axis of
    the flex container'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`justify-content-center`: 这会将弹性项目沿弹性容器的主轴居中'
- en: '`justify-content-between`: This distributes the flex items along the main axis
    with equal space between them'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`justify-content-between`: 这将在主轴上均匀分布弹性项目，并在它们之间留有相等的空间'
- en: '`justify-content-around`: This distributes the flex items along the main axis
    with equal space around them'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`justify-content-around`: 这将在主轴上均匀分布弹性项目，并在它们周围留有相等的空间'
- en: '`justify-content-evenly`: This distributes the flex items along the main axis
    with equal space between them, including before the first item and after the last
    item'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`justify-content-evenly`: 这将在主轴上均匀分布弹性项目，并在它们之间留有相等的空间，包括第一个项目之前和最后一个项目之后'
- en: 'These alignment classes can be applied to the flex container or individual
    flex items:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这些对齐类可以应用于弹性容器或单个弹性项目：
- en: '[PRE6]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In this preceding example, the flex container has the `justify-content-evenly`
    class applied, which distributes the flex items evenly with equal space around
    them. The `flex-wrap` class allows items to wrap onto multiple lines if needed.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在此先前的示例中，弹性容器应用了 `justify-content-evenly` 类，它将弹性项目均匀分布，并在它们周围留有相等的空间。`flex-wrap`
    类允许项目在需要时换行。
- en: 'Taking all of the Flexbox code into consideration, let’s have a look at the
    result:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到所有的 Flexbox 代码，让我们看看结果：
- en: '![Figure 6.4 – Flexbox example](img/B18805_06_04.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.4 – Flexbox 示例](img/B18805_06_04.jpg)'
- en: Figure 6.4 – Flexbox example
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.4 – Flexbox 示例
- en: You see the element is a flex container with flex items that wrap onto multiple
    lines if needed. The flex items are evenly distributed along the main axis with
    equal spacing between them and at the beginning and end of the container.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到元素是一个弹性容器，如果需要，弹性项目会换行。弹性项目沿主轴均匀分布，它们之间以及容器的开始和结束处都有相等的空间。
- en: Using the grid system in PrimeFlex
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 PrimeFlex 中的网格系统
- en: The grid system in PrimeFlex is another powerful feature for building complex
    layouts, providing a simple, intuitive syntax for building grids and arranging
    elements on the page.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: PrimeFlex 中的网格系统是构建复杂布局的另一个强大功能，它提供了简单直观的语法来构建网格和排列页面上的元素。
- en: The **PrimeFlex grid** follows a 12-column structure. Each row consists of a
    container, which contains one or more columns. The columns within a row automatically
    adjust their width based on the available space.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: PrimeFlex 网格遵循 12 列结构。每一行由一个容器组成，该容器包含一个或多个列。行内的列会根据可用空间自动调整其宽度。
- en: To create a grid layout, you need to wrap your content in a container element
    with the `grid` class. Inside the container, you can define columns using the
    `col` class. The columns are specified by adding the `col-{size}` class, where
    `{size}` represents the number of columns the element should span.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个网格布局，您需要将内容包裹在一个带有 `grid` 类的容器元素中。在容器内部，您可以使用 `col` 类来定义列。列是通过添加 `col-{size}`
    类来指定的，其中 `{size}` 代表元素应跨越的列数。
- en: 'Here is an example of a basic grid structure with two columns:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个具有两列的基本网格结构的示例：
- en: '[PRE7]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In this example, we have a grid container with two columns. Each column spans
    six columns, resulting in two equal-width columns. Here is the result:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们有一个包含两列的网格容器。每个列跨越六列，从而形成两个等宽的列。以下是结果：
- en: '![Figure 6.5 – PrimeFlex grid example](img/B18805_06_05.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![图6.5 – PrimeFlex网格示例](img/B18805_06_05.jpg)'
- en: Figure 6.5 – PrimeFlex grid example
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.5 – PrimeFlex网格示例
- en: 'The PrimeFlex grid also provides responsive classes that allow you to create
    different layouts for different screen sizes. You can specify different column
    sizes based on screen breakpoints using the following syntaxes:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: PrimeFlex 网格还提供了响应式类，允许您为不同的屏幕尺寸创建不同的布局。您可以使用以下语法根据屏幕断点指定不同的列大小：
- en: '`sm`: Small screens (576px and above)'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sm`：小屏幕（576px及以上）'
- en: '`md`: Medium screens (768px and above)'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`md`：中等屏幕（768px及以上）'
- en: '`lg`: Large screens (992px and above)'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lg`：大屏幕（992px及以上）'
- en: '`xl`: Extra-large screens (1200px and above)'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xl`：超大屏幕（1200px及以上）'
- en: 'Let’s use breakpoints to create a responsive layout:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用断点来创建响应式布局：
- en: '[PRE8]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In this example, we have a grid container with two columns. Each column spans
    the full width by default on small screens (12 columns), half the width on medium
    screens (six columns), and one-third of the width on large screens (four columns).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们有一个包含两列的网格容器。默认情况下，在小型屏幕上（12列），每个列宽度为全宽，在中等屏幕上（六列）宽度为半宽，在大屏幕上（四列）宽度为三分之一。
- en: PrimeFlex is a valuable tool for web developers, offering a streamlined approach
    to CSS styling. Its integration with PrimeNG enhances the development experience,
    providing a consistent and flexible design system. In the following section, we
    will be introduced to PrimeNG data display components.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: PrimeFlex 是一个对网页开发者非常有价值的工具，它提供了一种简化的 CSS 样式方法。它与 PrimeNG 的集成增强了开发体验，提供了一致且灵活的设计系统。在下一节中，我们将介绍
    PrimeNG 数据显示组件。
- en: Introducing data display components
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍数据显示组件
- en: As we all know, data is the lifeblood of any application, but raw data in itself
    is not very useful. It’s how we present this data to users that truly matters.
    That’s where data display components come into play. They are the tools that transform
    raw data into meaningful information, providing users with insights and enabling
    them to interact with the data.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所知，数据是任何应用程序的生命线，但原始数据本身并不很有用。真正重要的是我们如何向用户展示这些数据。这正是数据显示组件发挥作用的地方。它们是将原始数据转换为有意义信息的工具，为用户提供洞察力，并使他们能够与数据互动。
- en: PrimeNG offers a variety of data display components. These components are designed
    to present data in a clear, concise, and user-friendly manner. They include data
    tables, lists, cards, and much more. Each of these components has its strengths
    and use cases, and together, they provide a comprehensive toolkit for data display.
    Without these components, users would be left with raw data that is difficult
    to interpret and analyze. This could lead to errors, misunderstandings, and poor
    decision-making.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: PrimeNG 提供了各种数据显示组件。这些组件旨在以清晰、简洁和用户友好的方式展示数据。它们包括数据表、列表、卡片等等。每个组件都有其优势和用例，共同提供了一个全面的数据显示工具包。没有这些组件，用户将面临难以解释和分析的原始数据。这可能导致错误、误解和不良决策。
- en: 'Let’s take a look at the following PrimeNG data display components and when
    to use them:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看以下 PrimeNG 数据显示组件及其使用场景：
- en: '**Data tables**, for instance, are perfect for displaying large amounts of
    data in a structured format. They support features such as sorting, filtering,
    and pagination, making it easy for users to navigate and interact with the data.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据表**，例如，非常适合以结构化格式显示大量数据。它们支持排序、过滤和分页等功能，使用户能够轻松导航和与数据互动。'
- en: '**Lists**, on the other hand, are ideal for displaying a collection of items
    in a simple and straightforward manner. They are versatile and can be used for
    a wide range of use cases, from simple lists of text items to complex lists with
    custom layouts.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一方面，**列表**非常适合以简单直接的方式显示一系列项目。它们非常灵活，可以用于各种用例，从简单的文本项列表到具有自定义布局的复杂列表。
- en: '**Cards** are another powerful tool for data display. They are a great way
    to present a collection of related information in a flexible and extensible format.
    Cards can contain any type of content, from text and images to buttons and links,
    and they can be arranged in various ways to create visually appealing layouts.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**卡片**是数据展示的另一个强大工具。它们以灵活和可扩展的格式展示相关信息的集合，是一种很好的展示方式。卡片可以包含任何类型的内容，从文本和图像到按钮和链接，并且可以以各种方式排列，以创建视觉上吸引人的布局。'
- en: In the following sections, we’ll dive deeper into these components, exploring
    how to use them in your Angular applications. We’ll provide code examples to illustrate
    their usage and discuss the various options and configurations available for each
    component.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将更深入地探讨这些组件，探讨如何在您的 Angular 应用程序中使用它们。我们将提供代码示例来说明它们的用法，并讨论每个组件可用的各种选项和配置。
- en: Note
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Remember, the key to effective data display is not just about choosing the right
    components, but also about using them in the right way. It’s about understanding
    the data, knowing what information is important to the users, and presenting it
    in a way that is easy to understand and interact with.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，有效数据展示的关键不仅在于选择正确的组件，还在于正确地使用它们。这关乎理解数据，知道哪些信息对用户来说很重要，并以易于理解和交互的方式呈现。
- en: Working with data table components
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与数据表格组件一起工作
- en: Diving into the world of data display, we find ourselves surrounded by a myriad
    of components, each with its unique features and capabilities. Among these, PrimeNG
    tables stand out as a versatile and powerful tool that can transform raw data
    into meaningful, interactive, and visually appealing information.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 深入数据展示的世界，我们发现周围环绕着众多组件，每个组件都有其独特的特性和功能。在这些组件中，PrimeNG 表格因其多功能性和强大的功能而脱颖而出，可以将原始数据转换为有意义的、交互式的和视觉上吸引人的信息。
- en: 'To use PrimeNG tables in your Angular project, you first need to import `TableModule`
    from PrimeNG. You can do this by adding the following `import` statement to your
    module file:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 要在您的 Angular 项目中使用 PrimeNG 表格，您首先需要从 PrimeNG 中导入 `TableModule`。您可以通过将以下 `import`
    语句添加到您的模块文件中来实现这一点：
- en: '[PRE9]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This section will explore the various features and functionalities of PrimeNG
    tables, providing you with practical examples and insights to help you leverage
    their full potential in your applications. In the following examples, we will
    work with sample product data. Here is the interface of `Product`:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将探讨 PrimeNG 表格的各种功能和特性，为您提供实际示例和见解，帮助您在应用程序中充分利用其全部潜力。在以下示例中，我们将使用示例产品数据。以下是
    `Product` 的界面：
- en: '[PRE10]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: So, let’s jump into tables.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，让我们开始学习表格。
- en: Creating a basic table
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建基本表格
- en: 'PrimeNG tables require a collection of data to display, along with column components
    that define how this data should be represented. Here’s a simple example:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: PrimeNG 表格需要一组数据来显示，以及定义如何表示这些数据的列组件。以下是一个简单的示例：
- en: '[PRE11]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Let’s break down the code snippet:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解代码片段：
- en: '`<p-table>`: This is the PrimeNG table component, used to display tabular data.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<p-table>`: 这是 PrimeNG 表格组件，用于显示表格数据。'
- en: '`[value]="products"`: This attribute binding is binding the `products` property
    to the `value` attribute of the `p-table` component. It means that the `products`
    variable in the component’s code is the data source for the table.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[value]="products"`: 这个属性绑定将 `products` 属性绑定到 `p-table` 组件的 `value` 属性。这意味着组件代码中的
    `products` 变量是表格的数据源。'
- en: '`[tableStyle]="{ ''min-width'': ''50rem'' }"`: This attribute binding is binding
    an inline CSS style object to the `tableStyle` attribute of the `p-table` component.
    The provided style object sets the minimum width of the table to `50rem`.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[tableStyle]="{ ''min-width'': ''50rem'' }"`: 这个属性绑定将内联 CSS 样式对象绑定到 `p-table`
    组件的 `tableStyle` 属性。提供的样式对象将表格的最小宽度设置为 `50rem`。'
- en: '`<ng-template pTemplate="header">`: This is a template for the header row of
    the table. It defines the column titles. In this case, the table has four columns:
    `ID`, `Name`, `Category`, and `Quantity`.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<ng-template pTemplate="header">`: 这是一个表格表头行的模板。它定义了列标题。在这种情况下，表格有四列：`ID`、`Name`、`Category`
    和 `Quantity`。'
- en: '`<ng-template pTemplate="body" let-product>`: This is a template for the body
    of the table. It defines how each row of data should be displayed. The `let-product`
    syntax is used to create a local template variable product that holds the current
    product object for each row.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<ng-template pTemplate="body" let-product>`：这是一个表格主体的模板。它定义了数据每一行应该如何显示。`let-product`
    语法用于创建一个局部模板变量 product，它保存了每一行的当前产品对象。'
- en: Inside the body template, we have a `<tr>` element for each row, and `<td>`
    elements for each cell in the row. The `{{ product.id }}`, `{{ product.name }}`,
    `{{ product.category }}`, and `{{ product.quantity }}` expressions are used to
    bind the properties of the current product object to the cells.
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在身体模板内部，我们为每一行有一个 `<tr>` 元素，并为每一行中的每个单元格有一个 `<td>` 元素。`{{ product.id }}`、`{{
    product.name }}`、`{{ product.category }}` 和 `{{ product.quantity }}` 表达式用于将当前产品对象的属性绑定到单元格中。
- en: 'After that, we will have a basic table, like so:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们将有一个基本的表格，如下所示：
- en: '![Figure 6.6 – Basic table](img/B18805_06_06.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.6 – 基本表格](img/B18805_06_06.jpg)'
- en: Figure 6.6 – Basic table
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.6 – 基本表格
- en: Table with dynamic columns
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 带动态列的表格
- en: 'Columns can be defined dynamically using the `*ngFor` directive. This is particularly
    useful when the structure of your data is not known in advance or can change dynamically.
    Here’s how you can do it:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 `*ngFor` 指令动态定义列。这在您的数据结构事先未知或可以动态变化时特别有用。下面是如何做到这一点的方法：
- en: '[PRE12]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In this example, the `columns` attribute is bound to the `cols` array, which
    contains the definitions of the columns. Each column is an object with a `header`
    property (the column title) and a `field` property (the property of the data object
    to bind to). Since the table data is defined in the component, you can provide
    options for users to select which columns to display, reorder columns, or even
    dynamically add or remove columns from the table.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`columns` 属性绑定到 `cols` 数组，该数组包含列的定义。每一列都是一个对象，具有 `header` 属性（列标题）和 `field`
    属性（绑定到数据对象的属性）。由于表格数据是在组件中定义的，因此可以为用户提供选择要显示的列、重新排序列或动态向表格中添加或删除列的选项。
- en: Table with sorting
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 带排序的表格
- en: Sorting is a fundamental aspect of data presentation, allowing users to order
    data in a way that makes sense for their specific tasks. PrimeNG provides built-in
    functionality for sorting data in tables.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 排序是数据展示的基本方面，允许用户以对特定任务有意义的方式对数据进行排序。PrimeNG 为表格中的数据排序提供了内置功能。
- en: 'Here is an example of how to enable sorting in a PrimeNG table component:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是如何在 PrimeNG 表格组件中启用排序的示例：
- en: '[PRE13]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In this example, the `pSortableColumn` directive is used to specify the field
    by which the data should be sorted when the column header is clicked. The `p-sortIcon`
    component is used to display an icon indicating the sort order.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，使用 `pSortableColumn` 指令指定当点击列标题时应按哪个字段排序数据。使用 `p-sortIcon` 组件显示表示排序顺序的图标。
- en: 'By default, clicking the column header once will sort the data in ascending
    order. Clicking it again will sort the data in descending order. Let’s take a
    look at the result:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，点击列标题一次将按升序排序数据。再次点击它将按降序排序数据。让我们看看结果：
- en: '![Figure 6.7 – Table with sorting](img/B18805_06_07.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.7 – 带排序的表格](img/B18805_06_07.jpg)'
- en: Figure 6.7 – Table with sorting
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.7 – 带排序的表格
- en: You can see that, in the screenshot, the table is sorted by price in ascending
    order after clicking on the **Price** header.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到，在截图上，点击 **价格** 标题后，表格按价格升序排序。
- en: Table with filtering
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 带过滤的表格
- en: Filtering is another powerful feature, allowing users to narrow down the data
    displayed in the table based on specific criteria. Again, PrimeNG provides built-in
    functionality for this.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 过滤是另一个强大的功能，允许用户根据特定标准缩小表格中显示的数据。同样，PrimeNG 为此提供了内置功能。
- en: 'To enable filtering for a column, you need to add some custom templates to
    the column definition in your table. Here’s an example of how to do this:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 要为列启用过滤，您需要向表格中的列定义添加一些自定义模板。以下是如何做到这一点的示例：
- en: '[PRE14]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The previous code is an example of a PrimeNG table with both column and global
    filtering capabilities. Let’s break it down:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码是一个具有列和全局过滤功能的 PrimeNG 表格的示例。让我们分解一下：
- en: '`<p-table>` is a PrimeNG table component, used to display tabular data.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<p-table>` 是一个 PrimeNG 表格组件，用于显示表格数据。'
- en: '`[value]="products"` is an attribute binding, binding the `products` property
    to the `value` attribute of the `<p-table>` component. It means that the `products`
    variable in the component’s code is the data source for the table.'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[value]="products"` 是一个属性绑定，将 `products` 属性绑定到 `<p-table>` 组件的 `value` 属性上。这意味着组件代码中的
    `products` 变量是表格的数据源。'
- en: The `[globalFilterFields]="['name', 'price']"` attribute binding is binding
    an array of field names (`name` and `price`) to the `globalFilterFields` attribute
    of the `<p-table>` component. The `globalFilterFields` attribute allows you to
    specify the fields/columns on which you want to apply the global filter. In this
    case, the global filter will be applied to the `name` and `price` fields of the
    table.
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[globalFilterFields]="[''name'', ''price'']"` 属性绑定将字段名数组（`name` 和 `price`）绑定到
    `<p-table>` 组件的 `globalFilterFields` 属性上。`globalFilterFields` 属性允许你指定要应用全局过滤器的字段/列。在这种情况下，全局过滤器将应用于表格的
    `name` 和 `price` 字段。'
- en: '`#dt` is a template reference variable named `dt` that is assigned to the `<p-table>`
    component. Template reference variables allow you to reference the component in
    the template code and access its properties and methods if needed.'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`#dt` 是一个名为 `dt` 的模板引用变量，它被分配给 `<p-table>` 组件。模板引用变量允许你在模板代码中引用组件，并在需要时访问其属性和方法。'
- en: The `<ng-template pTemplate="caption">` template contains a button for clearing
    all filters and an input field for global search. The `dt.clear()` method is called
    when the button is clicked to clear all filters. The `dt.filterGlobal()` method
    is called when the user types in the global search input field to filter all rows
    based on the input value.
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<ng-template pTemplate="caption">` 模板包含一个清除所有过滤器的按钮和一个用于全局搜索的输入字段。当按钮被点击时，会调用
    `dt.clear()` 方法来清除所有过滤器。当用户在全局搜索输入字段中输入时，会调用 `dt.filterGlobal()` 方法来根据输入值过滤所有行。'
- en: The `<ng-template pTemplate="header">` template contains input fields for each
    column. The `dt.filter()` method is called when the user types in these input
    fields to filter the rows based on the input value for the corresponding column.
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<ng-template pTemplate="header">` 模板包含每个列的输入字段。当用户在这些输入字段中输入时，会调用 `dt.filter()`
    方法来根据对应列的输入值过滤行。'
- en: The `<ng-template pTemplate="body" let-product>` template defines how each row
    of data should be displayed. The `let-product` syntax is used to create a local
    template `product` variable that holds the current product object for each row.
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<ng-template pTemplate="body" let-product>` 模板定义了如何显示每一行数据。`let-product` 语法用于创建一个局部模板变量
    `product`，它为每一行持有当前的产品对象。'
- en: The `<ng-template pTemplate="emptymessage">` template is displayed when there
    are no rows to display, either because the `products` array is empty or because
    no rows match the current filters.
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当没有行可供显示时，会显示 `<ng-template pTemplate="emptymessage">` 模板，这可能是因为 `products`
    数组为空，或者没有行匹配当前的过滤器。
- en: 'Let’s take a look at the final result:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看最终的结果：
- en: '![Figure 6.8 – Table with filtering](img/B18805_06_08.jpg)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.8 – 带过滤的表格](img/B18805_06_08.jpg)'
- en: Figure 6.8 – Table with filtering
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.8 – 带过滤的表格
- en: For example, the user can filter the rows by typing in the input fields in the
    column headers or the global search input field. The user can also clear all filters
    by clicking the **Clear** button.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，用户可以通过在列标题或全局搜索输入字段中的输入字段中输入来过滤行。用户还可以通过点击 **清除** 按钮来清除所有过滤器。
- en: Table with a paginator
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 带有分页器的表格
- en: When dealing with large datasets, displaying all the data at once can be overwhelming
    and impractical. **Pagination** is a common solution to this problem, allowing
    users to view a subset of the data at a time. PrimeNG’s table component comes
    with a built-in paginator that makes implementing this functionality a breeze.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 当处理大量数据集时，一次性显示所有数据可能会让人感到不知所措且不切实际。**分页**是解决这个问题的常见方法，它允许用户一次查看数据的一个子集。PrimeNG
    的表格组件内置了分页器，这使得实现此功能变得非常简单。
- en: 'To enable pagination in a PrimeNG table, you simply need to set the `paginator`
    attribute to `true` and define the `rows` attribute to specify the number of rows
    per page:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 PrimeNG 表格中启用分页，你只需将 `paginator` 属性设置为 `true` 并定义 `rows` 属性来指定每页的行数：
- en: '[PRE15]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Let’s go through each attribute and its purpose:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐一查看每个属性及其用途：
- en: '`[value]="products"`: This binds the value of the table to a variable called
    `products`.'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[value]="products"`：这会将表格的值绑定到一个名为 `products` 的变量上。'
- en: '`[paginator]="true"`: This enables pagination for the table.'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[paginator]="true"`：这启用了表格的分页功能。'
- en: '`[rowsPerPageOptions]="[5,10,20]"`: This defines the options for the number
    of rows to display per page. In this case, the options are set to `5`, `10`, and
    `20`. The user can select one of these options to control the number of rows displayed
    in the table.'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[rowsPerPageOptions]="[5,10,20]"`: 这定义了每页显示行数的选项。在这种情况下，选项设置为`5`、`10`和`20`。用户可以选择这些选项之一来控制表格中显示的行数。'
- en: '`[rows]="10"`: This sets the number of rows to display per page. In this case,
    it is set to `10`. This means that each page of the table will display up to 10
    rows.'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[rows]="10"`: 这设置了每页显示的行数。在这种情况下，它设置为`10`。这意味着表格的每一页将显示最多10行。'
- en: 'Let’s take a look at the table with the paginator feature enabled:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看启用了分页器功能的表格：
- en: '![Figure 6.9 – Table with paginator](img/B18805_06_09.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![图6.9 – 带有分页器的表格](img/B18805_06_09.jpg)'
- en: Figure 6.9 – Table with paginator
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.9 – 带有分页器的表格
- en: This screenshot showcases the availability of an option to choose the desired
    number of rows to be displayed, with a default value set to `10`. Additionally,
    the paginator feature allows seamless navigation between different pages.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 此截图展示了选择要显示的行数的选项，默认值设置为`10`。此外，分页器功能允许在不同页面之间无缝导航。
- en: In summary, PrimeNG’s table component offers a robust and flexible solution
    for displaying tabular data. With features such as sorting, filtering, and pagination,
    it provides developers with the tools needed to present data in an organized and
    interactive manner.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，PrimeNG的表格组件提供了一个强大且灵活的解决方案，用于显示表格数据。具有排序、过滤和分页等功能，为开发者提供了以有组织和交互方式展示数据的工具。
- en: Note
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: To learn more about the table component and explore additional features, such
    as scalable columns, frozen columns, and scrollable tables, you can visit the
    PrimeNG documentation at [https://primeng.org/table](https://primeng.org/table).
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于表格组件以及探索其他功能，例如可伸缩的列、冻结列和可滚动的表格，您可以访问PrimeNG文档网站 [https://primeng.org/table](https://primeng.org/table)。
- en: 'Next, we’ll explore another essential aspect of data presentation in web applications:
    PrimeNG’s list components, which offer a diverse set of tools for displaying and
    interacting with lists of data.'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将探讨网络应用程序中数据展示的另一个重要方面：PrimeNG的列表组件，它提供了一套多样化的工具，用于显示和与数据列表互动。
- en: Working with list components
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与列表组件一起工作
- en: PrimeNG offers a variety of list components that cater to different needs and
    use cases. These components are designed to transform raw data into meaningful
    lists, providing users with an intuitive way to interact with the information.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: PrimeNG提供各种列表组件，以满足不同的需求和用例。这些组件旨在将原始数据转换为有意义的列表，为用户提供直观的方式与信息互动。
- en: 'PrimeNG’s list components include several key elements that can be used to
    create diverse list presentations:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: PrimeNG的列表组件包括几个关键元素，可用于创建多样化的列表展示：
- en: '`DataView`: This element offers grid and list views for displaying data, with
    sorting and filtering options'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DataView`: 此元素提供网格和列表视图来显示数据，并具有排序和过滤选项'
- en: '`OrderList`: This element allows users to reorder items within a list'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OrderList`: 此元素允许用户在列表中对项目进行重新排序'
- en: '`PickList`: This element enables users to pick items from one list and move
    them to another'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PickList`: 此元素允许用户从列表中选择项目并将它们移动到另一个列表'
- en: These components are not just about displaying data; they also provide features
    such as sorting, filtering, and selection, enhancing the user’s ability to interact
    with the data. Let’s take a look at each of them in more detail.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 这些组件不仅关乎数据的显示；它们还提供排序、过滤和选择等功能，增强了用户与数据互动的能力。让我们更详细地看看每一个。
- en: DataView
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DataView
- en: '`DataView` is a versatile component that is particularly useful when you need
    to present a large amount of data in a structured way. It offers various features,
    such as pagination, sorting, and customizable templates, making it an excellent
    choice for building data-driven applications.'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '`DataView`是一个多功能的组件，特别适用于您需要以结构化方式展示大量数据时。它提供了各种功能，如分页、排序和可定制的模板，使其成为构建数据驱动应用程序的绝佳选择。'
- en: 'Here are some scenarios where you might consider using the PrimeNG `DataView`
    component:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下场景中，您可能需要考虑使用PrimeNG的`DataView`组件：
- en: '`DataView` component can help you achieve this efficiently'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DataView`组件可以帮助您高效地实现这一点'
- en: '`DataView` component can be used to display the results in a grid or list format
    with pagination and sorting options'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DataView`组件可以用于以网格或列表格式显示结果，并提供分页和排序选项'
- en: '`DataView` can be used to present the data in each widget consistently, providing
    a cohesive user experience'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DataView`可用于在各个小部件中一致地展示数据，提供连贯的用户体验'
- en: In the following subsections, let’s consider an example where we have a collection
    of products that we want to display using the `DataView` component. Each product
    has properties such as name, category, and price. We’ll showcase the products
    in a list layout, allowing users to browse through them and add items to their
    shopping cart.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下子节中，让我们考虑一个示例，其中我们有一个产品集合，我们希望使用`DataView`组件来显示。每个产品都有名称、类别和价格等属性。我们将以列表布局展示产品，使用户能够浏览它们并将项目添加到购物车中。
- en: Creating a basic data view
  id: totrans-185
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建基本数据视图
- en: Prior to utilizing the `DataView` component, it is important to ensure that
    PrimeFlex is installed within your application. This is necessary because `DataView`
    relies on the `Grid` functionality provided by PrimeFlex to effectively organize
    and present data. For detailed instructions on installing PrimeFlex, please refer
    to the previous section within this chapter.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用`DataView`组件之前，确保在您的应用程序中安装了PrimeFlex非常重要。这是必要的，因为`DataView`依赖于PrimeFlex提供的`Grid`功能来有效地组织和展示数据。有关安装PrimeFlex的详细说明，请参阅本章前面的部分。
- en: 'To get started, we need to import the necessary modules from the PrimeNG library:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，我们需要从PrimeNG库中导入必要的模块：
- en: '[PRE16]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Once we have the dependencies installed and imported, we can use the `DataView`
    component in our Angular template. Here’s an example of how we can display the
    products in a list layout:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们安装并导入了依赖项，我们就可以在我们的Angular模板中使用`DataView`组件。以下是我们如何以列表布局显示产品的示例：
- en: '[PRE17]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Here is the code breakdown:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是代码分解：
- en: '`<p-dataView>`: This is the Angular component from the PrimeNG library used
    to display data in a view.'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<p-dataView>`：这是PrimeNG库中的Angular组件，用于在视图中显示数据。'
- en: '`[value]="products"`: This attribute binding is binding the `products` property
    to the `value` attribute of the `<p-dataView>` component. It means that the `products`
    variable in the component’s code is the data source for the data view.'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[value]="products"`：此属性绑定将组件代码中的`products`属性绑定到`<p-dataView>`组件的`value`属性。这意味着组件代码中的`products`变量是数据视图的数据源。'
- en: '`<ng-template pTemplate="list" let-products>`: This template renders each item
    in the data view. The `pTemplate` attribute with a value of `"list"` indicates
    that this template is for the list items. The `let-products` attribute declares
    a local variable named `products` that represents the `products` array in the
    data view.'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<ng-template pTemplate="list" let-products>`：此模板渲染数据视图中的每个项目。`pTemplate`属性值为`"list"`表示此模板用于列表项。`let-products`属性声明了一个名为`products`的局部变量，它代表数据视图中的`products`数组。'
- en: 'As a result, we created a product list with three items:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们创建了一个包含三个项目的产品列表：
- en: '![Figure 6.10 – Basic data view](img/B18805_06_10.jpg)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![图6.10 – 基本数据视图](img/B18805_06_10.jpg)'
- en: Figure 6.10 – Basic data view
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.10 – 基本数据视图
- en: DataView with pagination
  id: totrans-198
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 带分页的DataView
- en: 'If you have a large number of products and want to display them on multiple
    pages, you can enable pagination in the `DataView` component. Here’s an example
    of how to enable pagination with a specific number of rows per page:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有大量产品并希望将它们显示在多个页面上，您可以在`DataView`组件中启用分页。以下是如何启用具有特定每页行数的分页的示例：
- en: '[PRE18]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Here, we set the `rows` property to `4`, indicating that we want to display
    four products per page. By setting the `paginator` property to `true`, the `DataView`
    component automatically adds pagination controls, allowing users to navigate through
    the pages.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将`rows`属性设置为`4`，表示我们希望每页显示四个产品。通过将`paginator`属性设置为`true`，`DataView`组件自动添加分页控件，使用户能够浏览页面。
- en: DataView with sorting
  id: totrans-202
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 带排序的DataView
- en: 'The `DataView` component also provides built-in sorting functionality, allowing
    users to sort the data based on specific criteria. Here’s an example of how to
    enable sorting and add a dropdown to select the sorting option:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '`DataView`组件还提供了内置的排序功能，允许用户根据特定标准对数据进行排序。以下是如何启用排序并添加下拉菜单以选择排序选项的示例：'
- en: '[PRE19]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Let’s break down the code to understand its functionality:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解代码以了解其功能：
- en: '`[value]="products"`: This binds the `products` array from the parent component
    to the `DataView` component, which will be the data source for the items displayed.'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[value]="products"`：此绑定将父组件中的`products`数组绑定到`DataView`组件，该组件将成为显示项的数据源。'
- en: '`[rows]="4"`: This sets the number of rows to display per page if pagination
    is enabled.'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[rows]="4"`: 如果启用了分页，这将设置每页显示的行数。'
- en: '`[paginator]="true"`: This enables pagination for the `DataView` component.'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[paginator]="true"`: 这启用了 `DataView` 组件的分页功能。'
- en: '`[sortField]="sortField"` and `[sortOrder]="sortOrder"`: These attributes are
    used to control the sorting of the data; `sortField` specifies the field by which
    the data should be sorted, and `sortOrder` specifies the order (ascending or descending).'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[sortField]="sortField"` 和 `[sortOrder]="sortOrder"`: 这些属性用于控制数据的排序；`sortField`
    指定按哪个字段排序数据，而 `sortOrder` 指定顺序（升序或降序）。'
- en: '`<p-dropdown ... />`: This line creates a dropdown with options defined in
    the `sortOptions` array. When the user selects an option, the `onSortChange` method
    is called.'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<p-dropdown ... />`: 这行代码创建了一个下拉列表，其选项由 `sortOptions` 数组定义。当用户选择一个选项时，会调用
    `onSortChange` 方法。'
- en: '`sortOptions`: This array defines the sorting options available in the dropdown.
    The `value` field contains a string that represents the sorting criteria. If the
    value starts with a `!`, it indicates descending order.'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sortOptions`: 这个数组定义了下拉列表中可用的排序选项。`value` 字段包含一个表示排序标准的字符串。如果值以 `!` 开头，表示降序。'
- en: '`onSortChange(event: HTMLInputElement)`: This method is called when the user
    selects a sorting option from the dropdown. It parses the selected value and sets
    the `sortOrder` and `sortField` properties accordingly.'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onSortChange(event: HTMLInputElement)`: 当用户从下拉列表中选择排序选项时，会调用此方法。它解析所选值并相应地设置
    `sortOrder` 和 `sortField` 属性。'
- en: 'By using these properties and templates, you can enable sorting in the `DataView`
    component and provide a seamless sorting experience to users. In the following
    screenshot, you can see that we built a product list showing four items at a time
    and sorted by **Price Low** **to High**:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用这些属性和模板，您可以在 `DataView` 组件中启用排序，并为用户提供无缝的排序体验。在下面的屏幕截图中，您可以看到我们构建了一个每次显示四个项目的产品列表，并按
    **价格从低到高** 排序：
- en: '![Figure 6.11 – Data view with sorting and pagination](img/B18805_06_11.jpg)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.11 – 带排序和分页的数据视图](img/B18805_06_11.jpg)'
- en: Figure 6.11 – Data view with sorting and pagination
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.11 – 带排序和分页的数据视图
- en: So far, we have witnessed the impressive capabilities of PrimeNG’s `DataView`
    in providing adaptable data presentations. Now, let’s explore PrimeNG’s `OrderList`,
    a specialized component that brings a unique touch to list management.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经见证了 PrimeNG 的 `DataView` 在提供可适应数据展示方面的出色能力。现在，让我们探索 PrimeNG 的 `OrderList`，这是一个专门组件，为列表管理带来了独特的触感。
- en: OrderList
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 排序列表
- en: When interacting with a collection of items, there are times when the order
    of these items matters. This is where PrimeNG’s `OrderList` comes into play. The
    `OrderList` component is a powerful tool that allows you to manage and sort a
    collection of items in your Angular applications. It’s like having a personal
    assistant to help you organize your data.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在与项目集合交互时，有时这些项目的顺序很重要。这就是 PrimeNG 的 `OrderList` 发挥作用的地方。`OrderList` 组件是一个强大的工具，它允许您在
    Angular 应用程序中管理和排序项目集合。它就像有一个个人助理来帮助您组织数据。
- en: '`OrderList` is especially useful when you need to provide a way for users to
    manually sort a list of items, such as prioritizing tasks in a to-do list, rearranging
    chapters in a book, managing playlists, categorizing products, or sorting photos
    in an album.'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '`OrderList` 在您需要为用户提供手动排序项目列表的方式时特别有用，例如在待办事项列表中优先排序任务、重新排列书籍章节、管理播放列表、分类产品或按相册排序照片。'
- en: Creating a basic order list
  id: totrans-220
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建基本排序列表
- en: Let’s dive into an example to see how the `OrderList` component can be used
    in an application. We’ll create a list of products that can be reordered by the
    user.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个示例来深入了解 `OrderList` 组件如何在应用程序中使用。我们将创建一个用户可以重新排序的产品列表。
- en: 'The `OrderList` component utilizes `DragDropModule` from the Angular CDK to
    handle drag and drop actions. It is important to ensure that the `@angular/cdk`
    package is installed. If not, we need to add it to our `package.json` file by
    using the following commands:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '`OrderList` 组件利用 Angular CDK 的 `DragDropModule` 来处理拖放操作。确保安装了 `@angular/cdk`
    包非常重要。如果没有，我们需要通过以下命令将其添加到我们的 `package.json` 文件中：'
- en: '[PRE20]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Note
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The `@angular/cdk` (Component Dev Kit or CDK) library is provided by the Angular
    team and offers a collection of reusable components, directives, and utility functions
    to simplify the development of Angular applications. The CDK provides a set of
    tools and building blocks that assist in creating consistent, accessible, and
    responsive user interfaces. You can learn more about the CDK at [https://material.angular.io/cdk](https://material.angular.io/cdk).
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '`@angular/cdk`（组件开发工具包或CDK）库由 Angular 团队提供，提供了一组可重用的组件、指令和实用函数，以简化 Angular
    应用程序的开发。CDK 提供了一套工具和构建块，有助于创建一致、可访问和响应式的用户界面。你可以在 [https://material.angular.io/cdk](https://material.angular.io/cdk)
    上了解更多关于 CDK 的信息。'
- en: 'Then, we also need to import `OrderListModule` from PrimeNG to our component:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们还需要从 PrimeNG 中导入 `OrderListModule` 到我们的组件：
- en: '[PRE21]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Once we have the dependencies installed and imported, we can use the `OrderList`
    component in our Angular template. Here’s an example of how we can display the
    products in an order list:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们安装并导入了依赖项，我们就可以在我们的 Angular 模板中使用 `OrderList` 组件。以下是我们如何显示顺序列表中的产品的示例：
- en: '[PRE22]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Here is the breakdown of the example code:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是示例代码的分解：
- en: '`[value]="products"`: This binds our list of products to the `value` property
    of the `OrderList`.'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[value]="products"`：这将我们的产品列表绑定到 `OrderList` 的 `value` 属性。'
- en: '`header="Products"`: This is used to set a title for the list.'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`header="Products"`：这用于设置列表的标题。'
- en: '`[listStyle]="{ ''max-height'': ''30rem'' }"`: This sets the maximum height
    of the list.'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[listStyle]="{ ''max-height'': ''30rem'' }"`：这设置了列表的最大高度。'
- en: '`<ng-template let-product pTemplate="item">`: This customizes how each item
    in the list is displayed. We can access the current product using the `let-product`
    syntax.'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<ng-template let-product pTemplate="item">`：这自定义了列表中每个项目的显示方式。我们可以使用 `let-product`
    语法访问当前产品。'
- en: 'Now, in the following screenshot, you’ll notice that the product list is labeled
    as **Products**. Additionally, you have the ability to select a product and reposition
    it within the list using the arrow buttons located in the left panel:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在下面的屏幕截图中，你会注意到产品列表被标记为**Products**。此外，你还有能力通过位于左侧面板中的箭头按钮选择产品并在列表中重新定位它：
- en: '![Figure 6.12 – Basic order list](img/B18805_06_12.jpg)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.12 – 基本顺序列表](img/B18805_06_12.jpg)'
- en: Figure 6.12 – Basic order list
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.12 – 基本顺序列表
- en: OrderList with filtering
  id: totrans-238
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 带有过滤的 OrderList
- en: 'The `OrderList` component also supports filtering and search functionality,
    allowing users to quickly find specific items within the source list. To enable
    filtering, we can use the `filterBy` and `filterPlaceholder` properties:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '`OrderList` 组件也支持过滤和搜索功能，使用户能够快速在源列表中找到特定的项目。要启用过滤，我们可以使用 `filterBy` 和 `filterPlaceholder`
    属性：'
- en: '[PRE23]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'In this example, we set the `filterBy` property to `name` to filter the products
    based on the product name, and the `filterPlaceholder` property specifies the
    placeholder text for the search input field. Here is the final result:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，我们将 `filterBy` 属性设置为 `name` 以根据产品名称过滤产品，而 `filterPlaceholder` 属性指定了搜索输入字段的占位符文本。以下是最终结果：
- en: '![Figure 6.13 – Order list with filtering](img/B18805_06_13.jpg)'
  id: totrans-242
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.13 – 带有过滤的顺序列表](img/B18805_06_13.jpg)'
- en: Figure 6.13 – Order list with filtering
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.13 – 带有过滤的顺序列表
- en: As seen in the screenshot, we can filter and search for **Product 22** by typing
    the name or the product in the search box.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 如屏幕截图所示，我们可以在搜索框中输入产品名称或产品名称来过滤和搜索**产品 22**。
- en: OrderList with drag and drop
  id: totrans-245
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 带有拖放的 OrderList
- en: 'The `OrderList` component allows users to reorder items using drag and drop
    gestures. By default, the drag and drop feature is disabled. To enable it, we
    can use the `[``dragdrop]` property:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '`OrderList` 组件允许用户使用拖放手势重新排序项目。默认情况下，拖放功能是禁用的。要启用它，我们可以使用 `[``dragdrop]` 属性：'
- en: '[PRE24]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Enabling drag and drop allows users to click and hold on to an item, drag it
    to a new position in the target list, and drop it to reorder the items. This feature
    provides a visually interactive way for users to rearrange items according to
    their preferences.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 启用拖放允许用户点击并保持对项目的选择，将其拖动到目标列表中的新位置，然后放下以重新排序项目。此功能为用户提供了一种直观的交互方式，根据他们的偏好重新排列项目。
- en: We’ve discovered the dynamic capabilities of PrimeNG’s `OrderList`, enhancing
    list interactions in our applications. Now, let’s shift our focus to PrimeNG’s
    `PickList`, a dual-list interface that promises even more interactivity and versatility.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 我们发现了 PrimeNG 的 `OrderList` 的动态功能，增强了我们应用程序中的列表交互。现在，让我们将注意力转向 PrimeNG 的 `PickList`，这是一个双列表界面，承诺提供更多的交互性和多功能性。
- en: PickList
  id: totrans-250
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PickList
- en: The PrimeNG `PickList` component is a powerful tool that allows developers to
    create interactive and customizable lists for reordering items between different
    lists. It provides a user-friendly interface for managing and manipulating data
    in a drag and drop manner. Whether you need to implement a multi-select feature,
    build a task management system, or create a custom form builder, the `PickList`
    component offers the flexibility and functionality to meet your requirements.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: PrimeNG的`PickList`组件是一个强大的工具，它允许开发者在不同的列表之间重新排序项目时创建交互式和可定制的列表。它提供了一个用户友好的界面，用于以拖放的方式管理和操作数据。无论您需要实现多选功能、构建任务管理系统还是创建自定义表单构建器，`PickList`组件都提供了灵活性和功能性，以满足您的需求。
- en: 'This can be beneficial in the following scenarios:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下场景中这可能是有益的：
- en: '`PickList` component can be used to display a list of available tasks in the
    source list and a list of assigned tasks in the target list. Users can easily
    move tasks between the lists based on their assignment status.'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PickList`组件可用于在源列表中显示可用任务列表，并在目标列表中显示分配的任务列表。用户可以根据其分配状态轻松地在列表之间移动任务。'
- en: '`PickList` component can assist in organizing the form elements. You can display
    all available fields in the source list and move selected fields to the target
    list to define the form structure. This provides a convenient way to dynamically
    generate forms based on user preferences.'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PickList` 组件可以帮助组织表单元素。您可以在源列表中显示所有可用字段，并将选定的字段移动到目标列表中，以定义表单结构。这提供了一种方便的方式，根据用户偏好动态生成表单。'
- en: '`PickList` component can facilitate this process by allowing users to move
    selected products to the target list, which represents their customized catalog.'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PickList` 组件可以通过允许用户将选定的产品移动到目标列表（代表他们的定制目录）来简化此过程。'
- en: By leveraging the `PickList` component, you can enhance the user experience,
    improve data organization, and enable efficient data manipulation within your
    application.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 通过利用`PickList`组件，您可以增强用户体验，改进数据组织，并在您的应用程序中实现高效的数据操作。
- en: 'Let’s consider an example where we have a list of products, and we want to
    allow users to add selected products to their cart using the PrimeNG `PickList`
    component. To get started, we need to import the necessary modules from the PrimeNG
    library:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一个例子，其中我们有一个产品列表，并希望允许用户使用PrimeNG的`PickList`组件将选定的产品添加到他们的购物车中。要开始，我们需要从PrimeNG库中导入必要的模块：
- en: '[PRE25]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Once we have the dependencies installed and imported, we can use the `PickList`
    component in our Angular template. Here’s an example of how we can display the
    products in a pick-list layout:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们安装并导入了依赖项，我们就可以在我们的Angular模板中使用`PickList`组件。以下是我们如何以选择列表布局显示产品的示例：
- en: '[PRE26]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: In this example, we pass the `products` and `selectedProducts` arrays to the
    `source` and `target` properties of the `PickList` component, respectively. We
    also provide labels for the source and target lists using the `sourceHeader` and
    `targetHeader` properties.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，我们将`products`和`selectedProducts`数组分别传递给`PickList`组件的`source`和`target`属性。我们还使用`sourceHeader`和`targetHeader`属性为源列表和目标列表提供标签。
- en: 'Let’s take a look at the final result:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看最终结果：
- en: '![Figure 6.14 – Sample pick list](img/B18805_06_14.jpg)'
  id: totrans-263
  prefs: []
  type: TYPE_IMG
  zh: '![图6.14 – 示例选择列表](img/B18805_06_14.jpg)'
- en: Figure 6.14 – Sample pick list
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.14 – 示例选择列表
- en: When you run the application, you should see two lists rendered side by side.
    The left list represents the available products, and the right list represents
    the selected products. Users can select products from the source list and move
    them to the target list by using the drag and drop functionality provided by the
    `PickList` component.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 当您运行应用程序时，您应该看到两个列表并排渲染。左侧列表表示可用产品，右侧列表表示选定的产品。用户可以通过使用`PickList`组件提供的拖放功能从源列表中选择产品并将它们移动到目标列表。
- en: In summary, PrimeNG’s list components are a powerful set of tools for displaying
    and interacting with lists of data in Angular applications. With their flexibility,
    customization options, and integration with Angular, they provide developers with
    everything needed to create engaging and functional list presentations. Whether
    you need simple lists or more complex interactions such as reordering and selection,
    PrimeNG’s list components offer a robust solution that can enhance any application’s
    user interface.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，PrimeNG 的列表组件是一套强大的工具，用于在 Angular 应用程序中显示和交互数据列表。凭借其灵活性、定制选项以及与 Angular
    的集成，它们为开发者提供了创建引人入胜且功能齐全的列表展示所需的一切。无论是需要简单的列表还是更复杂的交互，如重新排序和选择，PrimeNG 的列表组件都提供了一种强大的解决方案，可以增强任何应用程序的用户界面。
- en: 'In the next section, we will go through the final component of this chapter:
    the PrimeNG Card component.'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将介绍本章的最后一个组件：PrimeNG 卡片组件。
- en: Working with card components
  id: totrans-268
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与卡片组件一起工作
- en: A PrimeNG card is a container component that provides a flexible and extensible
    content container with multiple variants and options. It’s essentially a rectangular
    box that holds content and actions about a single subject. Think of it as a small
    container that groups together specific information.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: PrimeNG 卡片是一个容器组件，它提供了一个灵活且可扩展的内容容器，具有多种变体和选项。它本质上是一个包含内容和关于单一主题的操作的矩形框。将其视为一个将特定信息组合在一起的小型容器。
- en: 'Cards are incredibly versatile and can be used in various scenarios:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 卡片极其灵活，可以在各种场景中使用：
- en: '**Product listings**: Cards can be used for displaying products in an online
    store where each card represents a product with an image, title, price, and description'
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**产品列表**：卡片可以用于在线商店中显示产品，其中每个卡片代表一个带有图片、标题、价格和描述的产品'
- en: '**User profiles**: On social media platforms, cards can represent user profiles,
    showcasing an image, name, and other personal details'
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户资料**：在社交媒体平台上，卡片可以代表用户资料，展示图片、姓名和其他个人详情'
- en: '**Blog posts**: For blog listings, each card might display a post’s featured
    image, title, and a brief summary'
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**博客文章**：对于博客列表，每个卡片可能显示一篇文章的特色图片、标题和简短摘要'
- en: The use of cards can make content more digestible, breaking information into
    chunks that are easier to understand at a glance.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 使用卡片可以将内容变得更加易于消化，将信息分解成易于一眼看懂的小块。
- en: 'Let’s dive into a practical example. Imagine you’re building an online store
    and want to display a list of products using the PrimeNG `Card` component. To
    get started, we need to import the necessary modules from the PrimeNG library:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入一个实际例子。假设你正在构建一个在线商店，并希望使用 PrimeNG 的 `Card` 组件来显示产品列表。要开始，我们需要从 PrimeNG
    库中导入必要的模块：
- en: '[PRE27]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'After that, we add the PrimeNG `Card` component for creating a product list:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们添加 PrimeNG 的 `Card` 组件来创建产品列表：
- en: '[PRE28]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'This code demonstrates the usage of the PrimeNG `Card` component in an Angular
    template. Let’s break down the code and explain each part:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码展示了在 Angular 模板中使用 PrimeNG `Card` 组件的用法。让我们分析代码并解释每个部分：
- en: '`<p-card>`: This is the start of the PrimeNG `Card` component, which represents
    a single card element'
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<p-card>`：这是 PrimeNG `Card` 组件的开始，它代表一个单独的卡片元素'
- en: '`*ngFor="let product of products"`: This is an Angular structural directive
    called `ngFor`, used to iterate over an array of products and generate a card
    for each product'
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*ngFor="let product of products"`：这是一个名为 `ngFor` 的 Angular 结构性指令，用于遍历产品数组并为每个产品生成一张卡片'
- en: '`[header]="product.name"`: This binds the `product.name` property to the header
    input of the `Card` component, which sets the header text of the card'
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[header]="product.name"`：这会将 `product.name` 属性绑定到 `Card` 组件的标题输入，从而设置卡片的标题文本'
- en: '`[style]="{ width: ''300px'' }"`: This binds an inline CSS style to the style
    input of the `Card` component, setting the width of the card to 300 pixels'
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[style]="{ width: ''300px'' }"`：这会将内联 CSS 样式绑定到 `Card` 组件的样式输入，将卡片的宽度设置为 300
    像素'
- en: 'Let’s take a look at the final result:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看最终结果：
- en: '![Figure 6.15 – Card example](img/B18805_06_15.jpg)'
  id: totrans-285
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.15 – 卡片示例](img/B18805_06_15.jpg)'
- en: Figure 6.15 – Card example
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.15 – 卡片示例
- en: In this example, we’re iterating over a list of products and creating a card
    for each one. Each card displays the product’s image, description, price, and
    an **Add to** **Cart** button.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们正在遍历产品列表并为每个产品创建一张卡片。每个卡片显示产品的图片、描述、价格以及一个“**添加到** **购物车**”按钮。
- en: We have recently learned about the flexibility and design features of PrimeNG’s
    card component, which has greatly improved our ability to create visually appealing
    user interfaces. Now, it’s important for us to review and solidify our understanding.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最近学习了PrimeNG卡片组件的灵活性和设计特性，这大大提高了我们创建视觉上吸引人的用户界面的能力。现在，对我们来说，回顾和巩固我们的理解非常重要。
- en: Summary
  id: totrans-289
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we’ve delved into data display components in PrimeNG. We started
    by understanding the role of these components in transforming raw data into meaningful,
    user-friendly information, and saw how PrimeNG’s rich set of data display components,
    such as tables, lists, and cards, can be used to present data effectively in Angular
    applications.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们深入探讨了PrimeNG的数据显示组件。我们首先理解了这些组件在将原始数据转换为有意义的、用户友好的信息中的作用，并看到了PrimeNG丰富的数据显示组件，如表格、列表和卡片，如何被用来在Angular应用程序中有效地展示数据。
- en: The knowledge gained in this chapter is crucial because effective data presentation
    is a key aspect of building user-friendly applications. By using PrimeNG’s data
    display components, we can create applications that not only look good but also
    provide a seamless user experience.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 本章获得的知识至关重要，因为有效的数据展示是构建用户友好应用的关键方面。通过使用PrimeNG的数据显示组件，我们可以创建不仅外观美观，而且提供无缝用户体验的应用程序。
- en: But our journey doesn’t end here. Looking ahead to the next chapter, we’ll dive
    into other PrimeNG data display components. We’ll learn how to use components
    such as `Tree`, `Scroller`, `Timeline`, and `VirtualScroller` to show data in
    our Angular applications.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们的旅程并未结束。展望下一章，我们将深入了解其他PrimeNG数据显示组件。我们将学习如何使用`Tree`、`Scroller`、`Timeline`和`VirtualScroller`等组件在我们的Angular应用程序中展示数据。
- en: So, let’s keep the momentum going. We’ve made great strides in understanding
    and using PrimeNG’s data display components. Now, it’s time to take the next step
    and explore data manipulation components. Onward to the next chapter!
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们保持势头。我们在理解和使用PrimeNG的数据显示组件方面取得了巨大进步。现在，是时候迈出下一步，探索数据操作组件了。让我们继续进入下一章！
