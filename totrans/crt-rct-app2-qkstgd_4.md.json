["```js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nit('renders without crashing', () => {\n  const div = document.createElement('div');\n  ReactDOM.render(<App />, div);\n  ReactDOM.unmountComponentAtNode(div);\n});\n```", "```js\n$ yarn test\n```", "```js\nTest Suites: 1 passed, 1 total\n```", "```js\nTests: 1 passed, 1 total\n```", "```js\nSnapshots: 0 total\n```", "```js\nTime: 3.986s\n```", "```js\nRan all test suites.\nWatch Usage: Press w to show more.\n```", "```js\nPress f to run only failed tests\n```", "```js\nNo failed test found.\nPress `f` to quit \"only failed tests\" mode.\n\nWatch Usage: Press w to show more.\n```", "```js\n// export default App;\n```", "```js\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Todo from \"./Todo\";\n\nit(\"renders without crashing\", () => {\n const div = document.createElement(\"div\");\n ReactDOM.render(<Todo />, div);\n ReactDOM.unmountComponentAtNode(div);\n});\n```", "```js\n$ yarn add --dev react-test-renderer enzyme enzyme enzyme-adapter-react-16\n```", "```js\n// setup file\nimport { configure } from 'enzyme';\nimport Adapter from 'enzyme-adapter-react-16';\n\nconfigure({ adapter: new Adapter() });\n```", "```js\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { shallow } from \"enzyme\";\nimport renderer from \"react-test-renderer\";\n\nimport Todo from \"./Todo\";\n```", "```js\ndescribe(Todo, () => {\n  it(\"renders without crashing\", () => {\n    const div = document.createElement(\"div\");\n    ReactDOM.render(<Todo />, div);\n    ReactDOM.unmountComponentAtNode(div);\n  });\n});\n```", "```js\n    this.state = {\n      done: false\n    };\n```", "```js\n  removeTodo() {\n    this.props.removeTodo(this.props.description);\n  }\n```", "```js\n  const description = \"New Todo\";\n  const mockRemoveTodo = jest.fn();\n  const component = shallow(\n    <Todo description={description} removeTodo={mockRemoveTodo} />\n  );\n```", "```js\n  it(\"renders and matches our snapshot\", () => {\n    const component = renderer.create(<Todo description=\"Yo\" />);\n    const tree = component.toJSON();\n    expect(tree).toMatchSnapshot();\n  });\n```", "```js\n  it(\"renders a Todo component\", () => {\n    expect(component.contains(<div className=\"Todo\" />));\n  });\n```", "```js\n  it(\"contains the description\", () => {\n    expect(component.text()).toContain(description);\n  });\n```", "```js\n  render() {\n    return (\n      <div className={this.cssClasses()}>\n        {this.state.description}\n        <br />\n        <button onClick={this.markAsDone}>Mark as Done</button>\n        <button onClick={this.removeTodo}>Remove Me</button>\n      </div>\n    );\n  }\n```", "```js\n  render() {\n    return (\n      <div className={this.cssClasses()}>\n        {this.props.description}\n        <br />\n        <button className=\"MarkDone\" onClick={this.markAsDone}>\n          Mark as Done\n        </button>\n        <button className=\"RemoveTodo\" onClick={this.removeTodo}>\n          Remove Me\n        </button>\n      </div>\n    );\n  }\n```", "```js\n  it(\"marks the Todo as done\", () => {\n    component.find(\"button.MarkDone\").simulate(\"click\");\n    expect(component.state(\"done\")).toEqual(true);\n  });\n```", "```js\n  it(\"calls the mock remove function\", () => {\n    component.find(\"button.RemoveTodo\").simulate(\"click\");\n    expect(mockRemoveTodo).toHaveBeenCalled();\n  });\n```", "```js\nconst mockRemoveTodo = jest.fn();\n```", "```js\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { shallow } from \"enzyme\";\nimport renderer from \"react-test-renderer\";\n\nimport Todo from \"./Todo\";\n\ndescribe(Todo, () => {\n  const description = \"New Todo\";\n  const mockRemoveTodo = jest.fn();\n  const component = shallow(\n    <Todo description={description} removeTodo={mockRemoveTodo} />\n  );\n\n  it(\"renders without crashing\", () => {\n    const div = document.createElement(\"div\");\n    ReactDOM.render(<Todo />, div);\n    ReactDOM.unmountComponentAtNode(div);\n  });\n\n  it(\"renders and matches our snapshot\", () => {\n    const component = renderer.create(<Todo description=\"Yo\" />);\n    const tree = component.toJSON();\n    expect(tree).toMatchSnapshot();\n  });\n\n  it(\"renders a Todo component\", () => {\n    expect(component.contains(<div className=\"Todo\" />));\n  });\n\n  it(\"contains the description\", () => {\n    expect(component.text()).toContain(description);\n  });\n\n  it(\"marks the Todo as done\", () => {\n    component.find(\"button.MarkDone\").simulate(\"click\");\n    expect(component.state(\"done\")).toEqual(true);\n  });\n\n  it(\"calls the mock remove function\", () => {\n    component.find(\"button.RemoveTodo\").simulate(\"click\");\n    expect(mockRemoveTodo).toHaveBeenCalled();\n  });\n});\n```", "```js\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { shallow } from \"enzyme\";\nimport renderer from \"react-test-renderer\";\n\nimport TodoList from \"./TodoList\";\nimport NewTodo from \"./NewTodo\";\nimport Todo from \"./Todo\";\n\ndescribe(TodoList, () => {\n  const component = shallow(<TodoList />);\n\n  it(\"renders without crashing\", () => {\n    const div = document.createElement(\"div\");\n    ReactDOM.render(<TodoList />, div);\n    ReactDOM.unmountComponentAtNode(div);\n  });\n\n  it(\"renders and matches our snapshot\", () => {\n    const component = renderer.create(<TodoList />);\n    const tree = component.toJSON();\n    expect(tree).toMatchSnapshot();\n  });\n\n  it(\"renders a TodoList component\", () => {\n    expect(component.contains(<div className=\"TodoList\" />));\n  });\n});\n```", "```js\n  it(\"includes a NewTodo component\", () => {\n    expect(component.find(NewTodo)).toHaveLength(1);\n  });\n```", "```js\n  it(\"renders the correct number of Todo components\", () => {\n    const todoCount = component.state(\"items\").length;\n    expect(component.find(Todo)).toHaveLength(todoCount);\n  });\n```", "```js\n  it(\"adds another Todo when the addTodo function is called\", () => {\n    const before = component.find(Todo).length;\n    component.instance().addTodo(\"A new item\");\n    const after = component.find(Todo).length;\n    expect(after).toBeGreaterThan(before);\n  });\n```", "```js\n  it(\"removes a Todo from the list when the remove todo function is called\", () => {\n    const before = component.find(Todo).length;\n    const removeMe = component.state(\"items\")[0];\n    component.instance().removeTodo(removeMe);\n    const after = component.find(Todo).length;\n    expect(after).toBeLessThan(before);\n  });\n```", "```js\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { shallow } from \"enzyme\";\nimport renderer from \"react-test-renderer\";\n\nimport TodoList from \"./TodoList\";\nimport NewTodo from \"./NewTodo\";\nimport Todo from \"./Todo\";\n\ndescribe(TodoList, () => {\n  const component = shallow(<TodoList />);\n\n  it(\"renders without crashing\", () => {\n    const div = document.createElement(\"div\");\n    ReactDOM.render(<TodoList />, div);\n    ReactDOM.unmountComponentAtNode(div);\n  });\n\n  it(\"renders and matches our snapshot\", () => {\n    const component = renderer.create(<TodoList />);\n    const tree = component.toJSON();\n    expect(tree).toMatchSnapshot();\n  });\n\n  it(\"renders a TodoList component\", () => {\n    expect(component.contains(<div className=\"TodoList\" />));\n  });\n\n  it(\"includes a NewTodo component\", () => {\n    expect(component.find(NewTodo)).toHaveLength(1);\n  });\n\n  it(\"renders the correct number of Todo components\", () => {\n    const todoCount = component.state(\"items\").length;\n    expect(component.find(Todo)).toHaveLength(todoCount);\n  });\n\n  it(\"adds another Todo when the addTodo function is called\", () => {\n    const before = component.find(Todo).length;\n    component.instance().addTodo(\"A new item\");\n    const after = component.find(Todo).length;\n    expect(after).toBeGreaterThan(before);\n  });\n\n  it(\"removes a Todo from the list when the remove todo function is called\", () => {\n    const before = component.find(Todo).length;\n    const removeMe = component.state(\"items\")[0];\n    component.instance().removeTodo(removeMe);\n    const after = component.find(Todo).length;\n    expect(after).toBeLessThan(before);\n  });\n});\n```", "```js\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { shallow } from \"enzyme\";\nimport renderer from \"react-test-renderer\";\n\nimport NewTodo from \"./NewTodo\";\n\ndescribe(NewTodo, () => {\n  const mockAddTodo = jest.fn();\n  const component = shallow(<NewTodo addTodo={mockAddTodo} />);\n\n  it(\"renders without crashing\", () => {\n    const div = document.createElement(\"div\");\n    ReactDOM.render(<NewTodo addTodo={mockAddTodo} />, div);\n    ReactDOM.unmountComponentAtNode(div);\n  });\n\n  it(\"renders and matches our snapshot\", () => {\n    const component = renderer.create(<NewTodo addTodo={mockAddTodo} />);\n    const tree = component.toJSON();\n    expect(tree).toMatchSnapshot();\n  });\n\n  it(\"renders a Todo component\", () => {\n    expect(component.contains(<div className=\"NewTodo\" />));\n  });\n});\n```", "```js\nit('contains the form', () => {\n  expect(component.find('input')).toHaveLength(1);\n  expect(component.find('button')).toHaveLength(1);\n});\n```", "```js\n  it(\"calls the passed in addTodo function when add button is clicked\", () => {\n    component.find(\"button\").simulate(\"click\");\n    expect(mockAddTodo).toBeCalled();\n  });\n```", "```js\n  it(\"updates the form when keys are pressed\", () => {\n    const updateKey = \"New Todo\";\n    component.instance().handleUpdate({ target: { value: updateKey } });\n    expect(component.state(\"item\")).toEqual(updateKey);\n  });\n```", "```js\n  handleUpdate(event) {\n    this.setState({ item: event.target.value });\n  }\n```", "```js\n it(\"blanks out the Todo Name when the button is clicked\", () => {\n const updateKey = \"I should be empty\";\n component.instance().handleUpdate({ target: { value: updateKey } });\n expect(component.state(\"item\")).toEqual(updateKey);\n component.find(\"button\").simulate(\"click\");\n expect(component.state(\"item\")).toHaveLength(0);\n });\n```", "```js\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { shallow } from \"enzyme\";\nimport renderer from \"react-test-renderer\";\n\nimport NewTodo from \"./NewTodo\";\n\ndescribe(NewTodo, () => {\n const mockAddTodo = jest.fn();\n const component = shallow(<NewTodo addTodo={mockAddTodo} />);\n\n it(\"renders without crashing\", () => {\n const div = document.createElement(\"div\");\n ReactDOM.render(<NewTodo addTodo={mockAddTodo} />, div);\n ReactDOM.unmountComponentAtNode(div);\n });\n\n it(\"renders and matches our snapshot\", () => {\n const component = renderer.create(<NewTodo addTodo={mockAddTodo} />);\n const tree = component.toJSON();\n expect(tree).toMatchSnapshot();\n });\n\n it(\"renders a Todo component\", () => {\n expect(component.contains(<div className=\"NewTodo\" />));\n });\n\n it(\"contains the form\", () => {\n expect(component.find(\"input\")).toHaveLength(1);\n expect(component.find(\"button\")).toHaveLength(1);\n });\n\n it(\"calls the passed in addTodo function when add button is clicked\", () => {\n component.find(\"button\").simulate(\"click\");\n expect(mockAddTodo).toBeCalled();\n });\n\n it(\"updates the form when keys are pressed\", () => {\n const updateKey = \"New Todo\";\n component.instance().handleUpdate({ target: { value: updateKey } });\n expect(component.state(\"item\")).toEqual(updateKey);\n });\n\n it(\"blanks out the Todo Name when the button is clicked\", () => {\n const updateKey = \"I should be empty\";\n component.instance().handleUpdate({ target: { value: updateKey } });\n expect(component.state(\"item\")).toEqual(updateKey);\n component.find(\"button\").simulate(\"click\");\n expect(component.state(\"item\")).toHaveLength(0);\n });\n});\n```"]