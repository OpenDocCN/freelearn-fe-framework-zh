["```js\ngit clone https://github.com/PacktPublishing/React-Application-Architecture-for-Production.git\n```", "```js\nnpm install\n```", "```js\ncp .env.example .env\n```", "```js\nnpm run stage:switch\n```", "```js\n? What stage do you want to switch to? (Use arrow\n keys)\n❯ chapter-02\n  chapter-03\n  chapter-03-start\n  chapter-04\n  chapter-04-start\n  chapter-05\n  chapter-05-start\n(Move up and down to reveal more choices)\n```", "```js\nimport {\n  ChakraProvider,\n  GlobalStyle,\n} from '@chakra-ui/react';\nimport { ReactNode } from 'react';\nimport { theme } from '@/config/theme';\ntype AppProviderProps = {\n  children: ReactNode;\n};\nexport const AppProvider = ({\n  children,\n}: AppProviderProps) => {\n  return (\n    <ChakraProvider theme={theme}>\n      <GlobalStyle />\n      {children}\n    </ChakraProvider>\n  );\n};\n```", "```js\nimport { extendTheme } from '@chakra-ui/react';\nconst colors = {\n  primary: '#1a365d',\n  primaryAccent: '#ffffff',\n};\nconst styles = {\n  global: {\n    'html, body': {\n      height: '100%',\n      bg: 'gray.50',\n    },\n    '#__next': {\n      height: '100%',\n      bg: 'gray.50',\n    },\n  },\n};\nexport const theme = extendTheme({ colors, styles });\n```", "```js\nimport { Button } from '@/components/button';\nimport { InputField } from '@/components/form';\nimport { Link } from '@/components/link';\nconst LandingPage = () => {\n  return (\n    <>\n      <Button />\n      <br />\n      <InputField />\n      <br />\n      <Link />\n    </>\n  );\n};\nexport default LandingPage;\n```", "```js\nnpm run dev\n```", "```js\nimport { Button as ChakraButton } from '@chakra-ui/react';\nimport { MouseEventHandler, ReactNode } from 'react';\n```", "```js\nconst variants = {\n  solid: {\n    variant: 'solid',\n    bg: 'primary',\n    color: 'primaryAccent',\n    _hover: {\n      opacity: '0.9',\n    },\n  },\n  outline: {\n    variant: 'outline',\n    bg: 'white',\n    color: 'primary',\n  },\n};\n```", "```js\nexport type ButtonProps = {\n  children: ReactNode;\n  type?: 'button' | 'submit' | 'reset';\n  variant?: keyof typeof variants;\n  isLoading?: boolean;\n  isDisabled?: boolean;\n  onClick?: MouseEventHandler<HTMLButtonElement>;\n  icon?: JSX.Element;\n};\n```", "```js\nexport const Button = ({\n  variant = 'solid',\n  type = 'button',\n  children,\n  icon,\n  ...props\n}: ButtonProps) => {\n  return (\n    <ChakraButton\n      {...props}\n      {...variants[variant]}\n      type={type}\n      leftIcon={icon}\n    >\n      {children}\n    </ChakraButton>\n  );\n};\n```", "```js\n<Button variant=\"solid\" type=\"button\">\n  Click Me\n</Button>\n```", "```js\nimport {\n  FormControl,\n  FormHelperText,\n  FormLabel,\n  forwardRef,\n  Input,\n  Textarea,\n} from '@chakra-ui/react';\nimport {\n  FieldError,\n  UseFormRegister,\n} from 'react-hook-form';\n```", "```js\nexport type InputFieldProps = {\n  type?: 'text' | 'email' | 'password' | 'textarea';\n  label?: string;\n  error?: FieldError;\n} & Partial<\n  ReturnType<UseFormRegister<Record<string, unknown>>>\n>;\n```", "```js\nexport const InputField = forwardRef(\n  (props: InputFieldProps, ref) => {\n    const {\n      type = 'text',\n      label,\n      error,\n      ...inputProps\n    } = props;\n    return (\n      <FormControl>\n        {label && <FormLabel>{label}</FormLabel>}\n        {type === 'textarea' ? (\n          <Textarea\n            bg=\"white\"\n            rows={8}\n            {...inputProps}\n            ref={ref}\n          />\n        ) : (\n          <Input\n            bg=\"white\"\n            type={type}\n            {...inputProps}\n            ref={ref}\n          />\n        )}\n        {error && (\n          <FormHelperText color=\"red\">\n            {error.message}\n          </FormHelperText>\n        )}\n      </FormControl>\n    );\n  }\n);\n```", "```js\n<InputField label=\"Name\" />\n```", "```js\nimport { Button } from '@chakra-ui/react';\nimport NextLink from 'next/link';\nimport { ReactNode } from 'react';\n```", "```js\nconst variants = {\n  link: {\n    variant: 'link',\n    color: 'primary',\n  },\n  solid: {\n    variant: 'solid',\n    bg: 'primary',\n    color: 'primaryAccent',\n    _hover: {\n      opacity: '0.9',\n    },\n  },\n  outline: {\n    variant: 'outline',\n    color: 'primary',\n    bg: 'white',\n  },\n};\n```", "```js\nexport type LinkProps = {\n  href: string;\n  children: ReactNode;\n  variant?: keyof typeof variants;\n  icon?: JSX.Element;\n  shallow?: boolean;\n};\n```", "```js\nexport const Link = ({\n  href,\n  children,\n  variant = 'link',\n  icon,\n  shallow = false,\n}: LinkProps) => {\n  return (\n    <NextLink shallow={shallow} href={href} passHref>\n      <Button\n        leftIcon={icon}\n        as=\"a\"\n        {...variants[variant]}\n      >\n        {children}\n      </Button>\n    </NextLink>\n  );\n};\n```", "```js\n<Link href=\"/\">Home</Link>\n```", "```js\nnpx storybook init\n```", "```js\nconst path = require('path');\nconst TsconfigPathsPlugin = require('tsconfig-paths-webpack-plugin');\nmodule.exports = {\n  stories: ['../src/**/*.stories.tsx'],\n  addons: [\n    '@storybook/addon-links',\n    '@storybook/addon-essentials',\n    '@storybook/addon-interactions',\n    '@chakra-ui/storybook-addon',\n  ],\n  features: {\n    emotionAlias: false,\n  },\n  framework: '@storybook/react',\n  core: {\n    builder: '@storybook/builder-webpack5',\n  },\n  webpackFinal: async (config) => {\n    config.resolve.plugins = config.resolve.plugins || [];\n    config.resolve.plugins.push(\n      new TsconfigPathsPlugin({\n        configFile: path.resolve(\n          __dirname,\n          '../tsconfig.json'\n        ),\n      })\n    );\n    return config;\n  },\n};\n```", "```js\nimport { theme } from '../src/config/theme';\nexport const parameters = {\n  actions: { argTypesRegex: '^on[A-Z].*' },\n  controls: {\n    matchers: {\n      color: /(background|color)$/i,\n      date: /Date$/,\n    },\n  },\n  controls: { expanded: true },\n  chakra: {\n    theme,\n  },\n};\n```", "```js\nnpm run storybook\n```", "```js\nnpm run storybook:build\n```", "```js\nstories: ['../src/**/*.stories.tsx']\n```", "```js\ncomponents\n  my-component\n    my-component.stories.tsx\n    my-component.tsx\n    index.ts\n```", "```js\nimport { PlusSquareIcon } from '@chakra-ui/icons';\nimport { Meta, Story } from '@storybook/react';\nimport { Button, ButtonProps } from './button';\n```", "```js\nconst meta: Meta = {\n  title: 'Components/Button',\n  component: Button,\n};\nexport default meta;\n```", "```js\nconst Template: Story<ButtonProps> = (props) => (\n  <Button {...props} />\n);\n```", "```js\nexport const Default = Template.bind({});\nDefault.args = {\n  children: 'Click Me',\n};\n```", "```js\nexport const WithIcon = Template.bind({});\nWithIcon.args = {\n  children: 'Click Me',\n  icon: <PlusSquareIcon />,\n};\n```", "```js\nnpm run storybook\n```"]