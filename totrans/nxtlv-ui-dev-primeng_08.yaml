- en: '8'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Working with Navigation and Layout Components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigating through a web application should be a seamless experience. How we
    structure our content, guide our users, and respond to their interactions can
    significantly influence their overall experience. This chapter dives deep into
    PrimeNG’s navigation and layout components, designed to help us craft intuitive
    and user-friendly interfaces for our Angular applications.
  prefs: []
  type: TYPE_NORMAL
- en: In this exploration, we’ll uncover the potential of PrimeNG’s navigation components,
    understanding how they can be used to guide users through our application. From
    menus to breadcrumbs, and from tabs to accordions, we’ll learn how to structure
    content, create navigation paths, and design responsive layouts that adapt to
    different screen sizes.
  prefs: []
  type: TYPE_NORMAL
- en: The overall goal of this chapter is to empower you with the knowledge and skills
    to leverage PrimeNG’s navigation and layout components effectively. By the end
    of this chapter, you will be able to create seamless navigation experiences, organize
    content in a structured manner, and ensure responsive layouts that adapt to various
    devices. You will also have gained insights into handling navigation events and
    integrating them into your application’s functionality.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing navigation and layout components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with menus
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing PrimeNG panels
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter contains various code samples of PrimeNG displaying components.
    You can find the related source code in the `chapter-08` folder of the following
    GitHub repository: [https://github.com/PacktPublishing/Next-Level-UI-Development-with-PrimeNG/tree/main/apps/chapter-08](https://github.com/PacktPublishing/Next-Level-UI-Development-with-PrimeNG/tree/main/apps/chapter-08)'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing navigation and layout components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the realm of web development, creating intuitive and user-friendly interfaces
    is paramount to providing a seamless experience for users. Navigation and layout
    components play a pivotal role in achieving this goal. These components serve
    as the building blocks for organizing content, guiding users through different
    sections of an application, and ensuring responsive design.
  prefs: []
  type: TYPE_NORMAL
- en: What are navigation and layout components?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Navigation components** provide users with a means to navigate through an
    application’s various features, sections, and content. They offer intuitive and
    accessible ways to access different functionalities, improving the overall usability
    of an application. Examples of navigation components include menus, breadcrumbs,
    tabs, and toolbars.'
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, **layout components** are responsible for structuring and
    organizing the presentation of content within an application. They ensure that
    information is displayed in a clear and visually appealing manner. Layout components
    provide the foundation for creating responsive and adaptive designs that can adapt
    to different screen sizes and devices.
  prefs: []
  type: TYPE_NORMAL
- en: Crafting an intuitive navigation and layout experience
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Creating an intuitive navigation system is like designing a city’s road network.
    It should be logical, easy to follow, and cater to the needs of its users. Here
    are some pointers that can help you to achieve that:'
  prefs: []
  type: TYPE_NORMAL
- en: '*User-centric design*: Always design with the user in mind. Understand their
    needs, their habits, and their expectations. A navigation system that resonates
    with the user’s intuition will always be more effective.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Consistency is key*: Whether it’s the placement of navigation buttons or the
    style of drop-down menus, maintaining consistency across your application helps
    users build familiarity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Feedback*: Provide feedback when users interact with navigation elements.
    Whether it’s a button changing color when hovered over or a subtle animation when
    a menu opens, these small interactions can enhance the user experience.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Adaptability*: Ensure your navigation and layout components are responsive,
    adapting to different screen sizes and devices, and offering a seamless experience
    whether viewed on a desktop, tablet, or mobile.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Best practices for creating navigation and layout components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are some additional best practices to keep in mind when creating navigation
    and layout components:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Simplicity*: Overcomplicating navigation can confuse users; aim for clarity
    and ease of use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Modularity*: Divide complex navigation and layout structures into smaller,
    reusable components. This promotes code reusability, maintainability, and scalability.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Accessibility*: Ensure that your navigation components are accessible to everyone,
    including those with disabilities. Use semantic HTML, provide alt text for images,
    and ensure components are keyboard navigable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Testing*: Test your navigation components. This can be done through usability
    testing, where real users interact with your application. Their feedback can offer
    invaluable insights to improve your components.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Remember that these best practices serve as guidelines, and it is vital to
    adapt them to the specific needs and requirements of your application. Now, let’s
    move on to another essential aspect of building intuitive UIs in Angular applications:
    PrimeNG menus.'
  prefs: []
  type: TYPE_NORMAL
- en: Working with menus
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Menus** are a fundamental element of a UI that provide a navigational structure
    and allow users to access various features and functionalities of an application.
    In PrimeNG, you can find a wide range of menu components that can be easily integrated
    into your projects. In this section, we will explore what menus are, discuss when
    to use PrimeNG menus, and provide an example of using PrimeNG menus in an e-commerce
    application.'
  prefs: []
  type: TYPE_NORMAL
- en: What are PrimeNG menus?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Menus can vary in complexity and design, ranging from simple text-based menus
    to more elaborate hierarchical menus with submenus and icons. PrimeNG offers several
    menu components that cater to different use cases and design requirements. Some
    popular menu components provided by PrimeNG include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Menu`: The `p-menu` component is a versatile menu that supports various modes,
    such as popup, slide, and overlay. It can be used as a standalone menu or as a
    dropdown within other components.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Menubar`: The `p-menubar` component represents a horizontal menu bar commonly
    used in top-level navigation scenarios. It allows you to create a clean and concise
    navigation interface, especially useful for applications with multiple sections
    or modules.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MegaMenu`: The `p-megaMenu` component is designed for more complex navigation
    scenarios, allowing you to create multi-column menus with images, icons, and submenus.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ContextMenu`: The `p-contextMenu` component enables the display of context-specific
    menus that appear when users right-click or long-press on an element. It is useful
    for providing context-dependent actions or options.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TieredMenu`: The `p-tieredMenu` component is a hierarchical menu that supports
    multiple levels of nested menus. It is suitable for organizing options in a structured
    manner.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Breadcrumb`: The `p-breadcrumb` component is used to display a breadcrumb
    navigation trail that represents the user’s current location within the application’s
    hierarchy. It is typically placed near the top of the page and provides links
    to higher-level sections or pages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These are just a few examples of the menu components available in PrimeNG. Depending
    on your application’s requirements, you can choose the most appropriate menu component
    to create a seamless and intuitive navigation experience.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a basic menu
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Suppose you want a horizontal menu at the top of your e-commerce application’s
    home page. This menu includes categories such as electronics, clothing, home and
    kitchen, and sports and fitness, and each category represents a drop-down menu
    that expands when users hover over it or click on it.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started, we need to import the necessary modules from the PrimeNG library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the dependencies are installed and imported, let’s see how a PrimeNG menu
    can be set up:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s break down the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<p-menu [model]="menuItems" />`: This represents the usage of the PrimeNG
    `Menu` component. It binds the `model` property of the `Menu` component to the
    `menuItems` variable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`menuItems: MenuItem[]`: This is an array of `MenuItem` objects from the PrimeNG
    API. Each `MenuItem` object can have various properties, such as `label`, `items`,
    `routerLink`, `routerLinkActiveOptions`, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The `routerLink` property in the menu items is an Angular feature that facilitates
    navigation between different routes in the application. The `routerLinkActiveOptions`
    property provides a means to verify and style the active menu by targeting the
    `p-menuitem-link-active` class. By default, the active class is applied to the
    route that matches the `routerLink` value defined in the `MenuItem` object. If
    you require different configurations, refer to the documentation available at
    [https://angular.io/api/router/IsActiveMatchOptions](https://angular.io/api/router/IsActiveMatchOptions).
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, each menu item is represented by a `label` property, which
    specifies the text to be displayed. The `items` property represents the submenu
    items for each category. Then the `routerLink` property is used to navigate to
    the corresponding product listing page when an item is clicked. Here is the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.1 – Basic menu](img/B18805_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.1 – Basic menu
  prefs: []
  type: TYPE_NORMAL
- en: Working with Menubar
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PrimeNG `Menubar` is a dynamic navigation component designed for horizontal
    layouts. It goes beyond a simple list of links, offering customization options
    to fit diverse application requirements. You can include links, buttons, and other
    UI components within `Menubar`, making it versatile and adaptable.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started, we need to import the necessary modules from the PrimeNG library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, we can create a menu bar by utilizing the PrimeNG `p-menubar` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s take a look at the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.2 – Menubar](img/B18805_08_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.2 – Menubar
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, `Menubar` hosts two main sections: **Electronics** and **Clothing**.
    The **Electronics** section is further broken down into sub-categories such as
    **Computers**, **Smartphones**, and **Televisions**. This structure ensures that
    users can swiftly navigate to their desired product category or access their account
    settings without any hassle.'
  prefs: []
  type: TYPE_NORMAL
- en: Working with MegaMenu
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PrimeNG `MegaMenu` is a drop-down navigation component that displays submenus
    in a two-dimensional panel, which is ideal for situations with extensive navigation
    choices, eliminating the need for scrolling through long lists. It proves particularly
    useful for websites or applications with multiple features or categories, providing
    organized and easily accessible navigation options.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started, we need to import the necessary modules from the PrimeNG library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, we can create a menu bar by utilizing the PrimeNG `p-megaMenu`
    component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'In this example, we define an array of `MegaMenuItem` objects to represent
    the menu structure. Each `MenuItem` object has a `label` property to specify the
    text displayed for the menu item. Additionally, the `items` property is used for
    nesting submenus within a menu item. The resulting `MegaMenu` component will have
    a top level named **Categories**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.3 – MegaMenu](img/B18805_08_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.3 – MegaMenu
  prefs: []
  type: TYPE_NORMAL
- en: 'When users hover over **Categories**, a drop-down submenu will appear with
    additional subcategories and products. In this example, after hovering, you can
    see the **Electronics**, **Fashion**, and **Home & Living** subcategories. Within
    the **Electronics** subcategory, there are further options: **Laptops** and **Cameras**.'
  prefs: []
  type: TYPE_NORMAL
- en: Working with ContextMenu
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PrimeNG `ContextMenu` is a contextual menu component that pops up in the UI
    upon a specific user action, typically a right-click. It provides a list of actions
    that users can perform, which are contextually relevant to the area or the element
    they’ve interacted with. Instead of navigating to the top menu or searching for
    options, the context menu brings the actions directly to the user.
  prefs: []
  type: TYPE_NORMAL
- en: 'A context menu is used when you want to offer users quick actions without cluttering
    the UI. It’s especially beneficial in the following cases:'
  prefs: []
  type: TYPE_NORMAL
- en: The screen space is limited
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You want to provide options that are relevant to a specific element or area
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You aim to reduce the number of clicks a user has to make
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For instance, in a text editor, right-clicking might bring up options to cut,
    copy, or paste. In a photo viewer, it might offer options to zoom, save, or share.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s envision an e-commerce platform where users can browse products. A context
    menu can provide quick actions for these products. To get started, we need to
    import the necessary modules from the PrimeNG library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, let’s create a context menu for a product image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s break down the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<img #img .../>`: This is a template reference variable used to reference
    the `<img>` element within the Angular component'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<p-contextMenu [target]="img" [model]="contextMenuItems" />`: This part of
    the code defines the PrimeNG `ContextMenu` component and configures its properties:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[target]="img"`: This binds the target property of the `ContextMenu` component
    to the `img` template reference variable. This means that the `ContextMenu` component
    will be triggered when the user right-clicks on the referenced `<``img>` element.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[model]="contextMenuItems"`: This binds the `model` property of `ContextMenu`
    to the `contextMenuItems` array.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`contextMenuItems: MenuItem[]`: This is an array of `MenuItem` objects. Each
    object represents a menu item in the context menu. It has properties such as `label`
    (the text displayed for the menu item), `icon` (an icon associated with the menu
    item), and `command` (a function to be executed when the menu item is selected).
    In this case, the `command` properties are set to call specific methods (`viewProduct()`,
    `addToCart()`, and `addToWishlist()`) in the Angular component.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s take a look at the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.4 – Example of ContextMenu](img/B18805_08_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.4 – Example of ContextMenu
  prefs: []
  type: TYPE_NORMAL
- en: In this setup, when a user right-clicks on a product, they’re presented with
    options to view its details, add it to the cart, or add it to their wishlist.
    This enhances the shopping experience, making actions swift and straightforward.
  prefs: []
  type: TYPE_NORMAL
- en: Working with TieredMenu
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PrimeNG `TieredMenu` is a multilevel menu system that allows options to be organized
    in a hierarchical structure. Instead of a flat list, you get a cascading menu
    where options can have child options, and those child options can have their own
    children, and so on. This tiered structure is visually intuitive, allowing users
    to navigate through categories and subcategories with ease.
  prefs: []
  type: TYPE_NORMAL
- en: 'PrimeNG `TieredMenu` is an excellent choice in various scenarios where hierarchical
    navigation menus are required. Here are some situations where you can leverage
    the power of `TieredMenu`:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Complex application menus*: When you have an application with a large number
    of menu items and submenus, `TieredMenu` simplifies the management and organization
    of the menu structure. It allows you to create a logical hierarchy of menus, making
    it easier for users to navigate through the application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*E-commerce websites*: `TieredMenu` is particularly useful in e-commerce websites
    that often have extensive product categories and subcategories. By using `TieredMenu`,
    you can create a user-friendly navigation system that enables shoppers to browse
    through different product categories and subcategories effortlessly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Admin dashboards*: Admin dashboards typically have multiple sections and sub-sections,
    each requiring its own set of menus. `TieredMenu` provides a clean and organized
    way to represent these menus, allowing administrators to access various functionalities
    and settings with ease.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Multilevel dropdowns*: If you need to implement multilevel drop-down menus,
    `TieredMenu` simplifies the process. It handles the complexity of managing nested
    menus and ensures smooth transitions between different levels of hierarchy.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To illustrate the usage of PrimeNG `TieredMenu` in an e-commerce context, let’s
    consider a scenario where we have an online store selling electronic devices.
    We want to create a navigation menu that allows users to browse through different
    product categories and subcategories.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started, we need to import the necessary modules from the PrimeNG library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, we can enable PrimeNG `TieredMenu` by adding the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s break down the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<p-tieredMenu [model]="tieredMenus" />`: This represents the PrimeNG `TieredMenu`
    component. The `model` attribute binds the `tieredMenus` property in the component
    class to the `TieredMenu` component.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tieredMenus: MenuItem[]`: This is an array of `MenuItem` objects from the
    PrimeNG API. Each `MenuItem` object can have various properties, such as`label`,
    `icon`, `items`, `routerLink`, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s have a look at the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.5 – A tiered menu](img/B18805_08_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.5 – A tiered menu
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, we have a top-level menu item, **Electronics**, with several
    submenus: **Computers**, **Smartphones**, and **Tablets**. Each submenu can have
    its own submenus, creating a hierarchical structure. Users can navigate through
    the menu items and submenus by hovering over the respective items.'
  prefs: []
  type: TYPE_NORMAL
- en: Working with Breadcrumb
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PrimeNG `Breadcrumb` is a navigation component that indicates the current location
    within an application’s hierarchical structure. It provides a series of links,
    each representing a level in the hierarchy, leading back to the home page or main
    dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Breadcrumbs should be used as a secondary navigation aid – they complement the
    main navigation but shouldn’t replace it. For this reason, ensure that your application
    also has a primary navigation system, such as a menu or sidebar.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started, we need to import the necessary modules from the PrimeNG library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, we can enable PrimeNG `Breadcrumb` by adding the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s break down the code and explain each part:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<p-breadcrumb [model]="breadcrumbItems" />`: This represents the actual usage
    of the PrimeNG `Breadcrumb` component. The `[model]` attribute is used to bind
    the `breadcrumbItems` array to the component’s model property.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`breadcrumbItems: MenuItem[]`: This is an array of `MenuItem` objects from
    the PrimeNG API. Each `MenuItem` object can have various properties such as `label`,
    `icon`, `items`, `routerLink`, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s have a look at the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.6 – Breadcrumb](img/B18805_08_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.6 – Breadcrumb
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, the breadcrumb starts with the `Home` link, which takes users
    back to the website’s home page. The subsequent links represent the category hierarchy:
    **Electronics**, **Computers**, and finally, the current page, **MacBook Air**.'
  prefs: []
  type: TYPE_NORMAL
- en: Having delved into the diverse capabilities of PrimeNG’s menus, we’ve seen how
    they can streamline navigation and enhance the user experience in applications.
    Now, let’s transition to exploring PrimeNG panels, which are essential components
    that offer a versatile way to organize and present content within an application.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing PrimeNG panels
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Panel`, `ScrollPanel`, `Accordion`, `Splitter`, `Fieldset`, and `TabView`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'PrimeNG panels can be used in various scenarios where content organization
    and presentation are crucial. Here are some situations where you can benefit from
    using PrimeNG panels:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Accordion` are useful when you have multiple sections of content and want
    to conserve space by allowing users to expand only the sections that they are
    interested in'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ScrollPanel` component enables users to scroll through the content, ensuring
    that all information remains accessible'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Splitter` component is valuable when you need to create resizable and collapsible
    panels, enabling users to customize the layout according to their preferences'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Fieldset` component is particularly useful when you have a form with related
    fields that need to be visually grouped together, improving the user experience
    and understanding'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TabView` component is beneficial when you have multiple sets of related information
    or functionalities that can be organized into tabs, allowing users to switch between
    them easily'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To get started, let’s create a basic PrimeNG panel.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a basic panel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A PrimeNG panel is essentially a container that wraps around content, providing
    it with a structured appearance. It comes with an optional header, which can be
    used to give a title or context to the content inside. The beauty of the panel
    lies in its simplicity. It doesn’t impose any specific style or behavior on the
    content; instead, it offers a neat boundary, making the content stand out.
  prefs: []
  type: TYPE_NORMAL
- en: Whether you’re designing a dashboard, a form, or a content page, the panel can
    be your go-to component to give structure to your content. It’s especially useful
    when you want to group related pieces of information together, making it easier
    for users to process and understand.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: While PrimeNG `Panel` is versatile, it’s essential to use it judiciously. Overusing
    it can make a page look cluttered. Always aim for a balance between design and
    functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s dive into the realm of e-commerce to see PrimeNG `Panel` in action. In
    an e-commerce website, the `Panel` component can be used to display detailed information
    about a product. For example, when a user clicks on a product thumbnail or name,
    a panel can slide in or expand to reveal the product details, including images,
    descriptions, specifications, and customer reviews. This allows users to explore
    the product information without leaving the current page.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started, we need to import the necessary modules from the PrimeNG library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the dependencies are installed and imported, let’s see how a PrimeNG panel
    can be set up:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s break down the code and explain each part:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<p-panel>`: This is the main component tag for creating a panel in PrimeNG.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`header="Product Details"`: This attribute sets the title or header of the
    panel to `"``Product Details"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-toggleable]="true"`: This attribute makes the panel’s content collapsible.
    When set to `true`, it allows users to click on the panel header to toggle (show/hide)
    the content inside the panel.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s take a look at the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.7 – Basic panel](img/B18805_08_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.7 – Basic panel
  prefs: []
  type: TYPE_NORMAL
- en: In this example, you can expand or collapse the product details by clicking
    on the minus or plus icon.
  prefs: []
  type: TYPE_NORMAL
- en: Working with ScrollPanel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PrimeNG `ScrollPanel` enables you to create scrollable areas within their applications,
    allowing users to view content that exceeds the available space. The `ScrollPanel`
    component provides a native-like scrolling experience, which means that when users
    navigate through the app, the scrolling feels smooth and natural, just like it
    would on the device’s built-in applications, and the component also supports both
    horizontal and vertical scrolling.
  prefs: []
  type: TYPE_NORMAL
- en: Unlike the default browser scrollbars, which can be inconsistent across different
    platforms, `ScrollPanel` offers a uniform look and feel. It’s not just about aesthetics;
    it’s about providing a smoother, more intuitive scrolling experience for users.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s improve the basic panel shown in *Figure 8**.7* by adding `ScrollPanel`.
    To start, import the necessary modules from the PrimeNG library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let’s see how PrimeNG `ScrollPanel` can be set up:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s break down the code and explain its functionality:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<p-panel ...>`: This represents the PrimeNG `Panel` component.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<p-scrollPanel [style]="{ width: ''100%'', height: ''200px'' }">`: This creates
    a scrollable viewport within the panel to handle overflowing content. It allows
    users to scroll through the content vertically. The `[style]` attribute is used
    to define the dimensions of the scrollable area. In this case, the width is set
    to `100%`, and the height is set to `200px`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s take a look at the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.8 – ScrollPanel (with the scroll bar marked)](img/B18805_08_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.8 – ScrollPanel (with the scroll bar marked)
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we defined `ScrollPanel` inside a basic panel with a fixed
    width and height. Since the content of the **Product Details** panel is quite
    large, the scrolling feature allows users to view the content effortlessly without
    losing the context of the entire page.
  prefs: []
  type: TYPE_NORMAL
- en: Working with Accordion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PrimeNG `Accordion` is a UI component that allows you to display content in
    a stacked manner. Think of it as a vertical stack of expandable/collapsible panels.
    Each panel has a title bar, and when you click on it, the content inside unfolds,
    revealing more details. This mechanism ensures that users are not overwhelmed
    with too much information at once. Instead, they can choose which sections to
    delve into, making their browsing experience more focused and less cluttered.
  prefs: []
  type: TYPE_NORMAL
- en: 'Accordions shine in scenarios where space is at a premium, and you need to
    present a list of items with associated detailed content. They’re especially handy
    for the following circumstances:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Organizing related content**: Group related sections or topics, allowing
    users to quickly navigate to their area of interest'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Forms with multiple steps**: Break down long forms into manageable chunks,
    guiding users step by step'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**FAQs**: Present a list of questions and expand to show answers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Product specifications**: In e-commerce, use accordions to display detailed
    specs or features of a product without overwhelming the user'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Imagine you’re developing an e-commerce platform that sells electronic gadgets.
    For each product, there’s a wealth of information to convey specifications, user
    reviews, warranty details, and more. Using a PrimeNG accordion, you can neatly
    organize this information.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started, import the necessary modules from the PrimeNG library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can see how a PrimeNG accordion can be set up:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The code provided demonstrates the usage of the PrimeNG `Accordion` component
    to create a set of tabs with different content sections. Let’s break it down:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<p-accordion>...</p-accordion>`: This code snippet wraps the `Accordion` component
    around its child elements, indicating the start and end of the accordion section.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<p-accordionTab header="...">`: This element represents a section of the accordion.
    The header attribute defines the title of that section.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s have a look at the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.9 – Accordion](img/B18805_08_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.9 – Accordion
  prefs: []
  type: TYPE_NORMAL
- en: We have created three accordion tabs, so when users click on a title, the associated
    content inside the tab expands.
  prefs: []
  type: TYPE_NORMAL
- en: Working with Fieldset
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PrimeNG `Fieldset` is a container component designed to group related content
    within a visually distinct boundary. It’s similar to the classic HTML `<fieldset>`
    element but supercharged with additional features and styling. The most notable
    feature is its optional toggleable attribute, allowing users to expand or collapse
    the content within, making it perfect for sections that benefit from a hide/show
    functionality.
  prefs: []
  type: TYPE_NORMAL
- en: '`Fieldset` is your go-to component for the following instances:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Grouping related elements**: This is especially the case for forms where
    you might want to group related input fields'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enhancing readability**: By segmenting content, you make it easier for users
    to process information'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Interactive content presentation**: With its toggleable feature, you can
    present optional or supplementary information without overwhelming the main content'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the previous section, we displayed product information such as specifications,
    warranty details, and user reviews using PrimeNG `Accordion` (as seen in *Figure
    8**.9*). Instead of using `Accordion`, we can also use `Fieldset` to neatly package
    each section.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started, import the necessary modules from the PrimeNG library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, let’s set up PrimeNG `Fieldset`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The provided code demonstrates the usage of the PrimeNG `Fieldset` component
    with specific attributes. Let’s break down the code and explain each part:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<p-fieldset>`: The HTML tag that represents the PrimeNG `Fieldset` component.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`legend="Specifications"`: The `legend` attribute sets the title or description
    of the `Fieldset` component. In this case, `legend` is set to `Specifications`,
    indicating that the content within the `Fieldset` component pertains to the specifications
    of a product.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[toggleable]="true"`: The `[toggleable]` attribute is a property binding that
    enables the toggleable functionality of the `Fieldset` component. When set to
    `true`, the content within the fieldset can be expanded or collapsed by the user.
    This allows the user to hide or reveal the specifications section as needed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s take a look at the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.10 – Fieldset](img/B18805_08_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.10 – Fieldset
  prefs: []
  type: TYPE_NORMAL
- en: In this example, each fieldset acts as a container for a specific type of information.
    Users can quickly glance at the legends (such as **Specification** or **User Review**)
    and decide which sections they want to delve into, expanding them as needed.
  prefs: []
  type: TYPE_NORMAL
- en: Working with TabView
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PrimeNG `TabView` is a navigation component that allows you to display content
    broken down into multiple tabs. Each tab acts as a container for its unique content,
    ensuring that information is organized and easily accessible. With `TabView`,
    users can swiftly switch between different sections without being overwhelmed.
  prefs: []
  type: TYPE_NORMAL
- en: '`TabView` is versatile and finds its place in various scenarios:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Settings or configuration pages**: This is so that different categories of
    settings can be grouped under individual tabs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Profile pages**: This is when you might want to separate user information,
    activity history, and settings into distinct tabs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Product descriptions in e-commerce**: This is when you want to segregate
    product details, customer reviews, and specifications'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Documentation**: This is for when you want to separate guides, API references,
    and examples'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the previous sections, we displayed the product information using PrimeNG
    `Accordion` (*Figure 8**.9*) and `Fieldset` (*Figure 8**.10*). Now, let’s try
    using `TabView`. To get started, import the necessary modules from the PrimeNG
    library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'And now let’s see how PrimeNG `TabView` can be set up:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s break down the code and explain each part:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<p-tabView>`: This PrimeNG component serves as the container for our tabs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<p-tabPanel header="Warranty">`: These components represent different sections
    of product information inside the `tabView` container. The `header` attribute
    holds the value of the tab’s label.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s have a look at the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.11 – TabView](img/B18805_08_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.11 – TabView
  prefs: []
  type: TYPE_NORMAL
- en: By using PrimeNG `TabView`, we can create separate sections of the content that
    are displayed as tabs. Users can click on the tab headers (**Warranty**, **Specifications**,
    or **Reviews**) to switch between the corresponding sections and access the relevant
    information.
  prefs: []
  type: TYPE_NORMAL
- en: Working with Splitter
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PrimeNG `Splitter` is a layout component that allows users to adjust the size
    of its child elements by dragging a divider. Think of it as a resizable partition
    that users can adjust according to their viewing preferences. It’s particularly
    useful in scenarios where you want to provide an adjustable ratio between two
    or more content sections, be it horizontally or vertically.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Splitter` component shines in various scenarios:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Splitter` when you have multiple widgets or panels, and you want to give users
    the flexibility to adjust their sizes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Splitter` component can be used when you might have a code section on one
    side and a preview on the other'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Splitter` component lets you allow users to adjust the view to compare two
    images side by side'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Splitter` component can be used for applications where you want to offer adjustable
    multi-panel views'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s consider an example where PrimeNG `Splitter` compares two images side
    by side. To start, import the necessary modules from the PrimeNG library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Then let’s see how PrimeNG `Splitter` can be set up:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s break down the code and explain each part:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<p-splitter>`: This represents the PrimeNG `Splitter` component.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[style]="{ height: ''300px'' }"`: The is used to apply inline CSS styles to
    the `Splitter` component. In this case, the height of the `Splitter` component
    is set to 300 px using the `height` property.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`layout="horizontal"`: The `layout` attribute defines the orientation of the
    panels within the `Splitter` component. In this example, it is set to `horizontal`,
    indicating that the panels will be displayed side by side horizontally.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<ng-template pTemplate>`: The `pTemplate` directive is specific to PrimeNG
    and is used to mark the Angular template as a PrimeNG template.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s take a look at the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.12 – Splitter](img/B18805_08_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.12 – Splitter
  prefs: []
  type: TYPE_NORMAL
- en: Here we created two panels within the `Splitter` component, with each panel
    containing an image for comparison purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Having explored the various features and capabilities of PrimeNG panels, we
    have gained valuable insights into how this powerful component can enhance the
    layout and presentation of content in your Angular applications.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we navigated through the vast world of PrimeNG components.
    It took us on a journey through the intricacies of navigation and layout components.
    These elements are the backbone of any application, dictating how users interact
    with the content and ensuring a seamless experience.
  prefs: []
  type: TYPE_NORMAL
- en: We delved deep into various components from menus and panels. Each component
    serves a unique purpose, from organizing content to enhancing navigation. By now,
    you should have a firm grasp on when and how to use these components in your applications.
    These components will allow us to structure and present content in a meaningful
    way, improving the overall user experience. Moreover, through various examples,
    we’ve seen how these components can be integrated into real-world applications.
    These practical insights aim to bridge the gap between theoretical knowledge and
    actual implementation.
  prefs: []
  type: TYPE_NORMAL
- en: As we transition to the next chapter, we’ll be diving into the art of customizing
    PrimeNG components with theming. Theming is a powerful tool that allows you to
    tailor the look and feel of components to align with brand guidelines or specific
    design preferences. We’ll explore how to harness the power of theming to make
    PrimeNG components truly your own. So, gear up for a colorful journey into the
    world of customization and design!
  prefs: []
  type: TYPE_NORMAL
- en: 'Part 3: Advanced Techniques and Best Practices'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this part, you will delve into advanced techniques and best practices for
    working with PrimeNG. You will explore customization, optimization, reusability,
    internationalization, and testing strategies to enhance your PrimeNG-powered Angular
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this part, you will have a deep understanding of these advanced
    topics and be equipped with valuable skills to build robust, efficient, and user-friendly
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'This part contains the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 9*](B18805_09.xhtml#_idTextAnchor184), *Customizing PrimeNG Components
    with Theming*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 10*](B18805_10.xhtml#_idTextAnchor205), *Exploring Optimization Techniques
    for Angular Applications*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 11*](B18805_11.xhtml#_idTextAnchor232), *Creating Reusable and Extendable
    Components*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 12*](B18805_12.xhtml#_idTextAnchor251), *Working with Internationalization
    and Localization*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 13*](B18805_13.xhtml#_idTextAnchor268), *Testing PrimeNG Components*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
