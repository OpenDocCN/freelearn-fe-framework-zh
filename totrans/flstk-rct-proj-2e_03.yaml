- en: Preparing the Development Environment
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备开发环境
- en: Before building applications with the MERN stack, we first need to prepare the
    development environment with each technology, and also with tools to aid development
    and debugging. Working with this stack requires that you make different technologies
    and tools work well together, and given the many options and resources available
    on this topic, it can seem like a daunting task to figure out how it all comes
    together. This chapter guides you through the workspace options, the essential
    development tools, how to set up the MERN technologies in your workspace, and
    how to check this setup with actual code.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用MERN堆栈构建应用程序之前，我们首先需要为每种技术以及辅助开发和调试的工具准备开发环境。使用此堆栈需要您使不同的技术和工具协同工作，鉴于有关此主题的许多选项和资源，弄清楚这一切如何结合在一起可能是一项艰巨的任务。本章将指导您了解工作空间选项、基本开发工具、如何在您的工空间中设置MERN技术，以及如何通过实际代码检查此设置。
- en: 'We are going to cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖以下主题：
- en: Selecting development tools
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择开发工具
- en: Setting up MERN stack technologies
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置MERN堆栈技术
- en: Checking your development setup
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查您的开发设置
- en: Selecting development tools
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择开发工具
- en: There are plenty of options available when it comes to selecting basic development
    tools such as text editors or IDEs, version control software, and even the development
    workspace itself. In this section, we will go over the options and recommendations
    that are relevant to web development with the MERN stack so you can make informed
    decisions when selecting these tools based on individual preferences.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择基本开发工具时，如文本编辑器或IDE、版本控制软件，甚至开发工作空间本身时，有很多选项可供选择。在本节中，我们将讨论与MERN堆栈相关的选项和建议，以便您可以根据个人偏好做出明智的选择。
- en: Workspace options
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作空间选项
- en: Developing on a local machine is a common practice among programmers, but with
    the advent of good cloud and remote development services, such as AWS Cloud9 ([https://aws.amazon.com/cloud9/?origin=c9io](https://aws.amazon.com/cloud9/?origin=c9io))
    and Visual Studio Code's Remote Development extension ([https://code.visualstudio.com/docs/remote](https://code.visualstudio.com/docs/remote)),
    you can set up your local workspace with MERN technologies  (and this will be
    assumed to be the case for the rest of the book), but you can also choose to run
    and develop the code in cloud services that are equipped for Node development.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本地机器上进行开发是程序员中的一种常见做法，但随着良好的云端和远程开发服务的出现，例如AWS Cloud9 ([https://aws.amazon.com/cloud9/?origin=c9io](https://aws.amazon.com/cloud9/?origin=c9io))
    和Visual Studio Code的远程开发扩展 ([https://code.visualstudio.com/docs/remote](https://code.visualstudio.com/docs/remote))，您可以使用MERN技术设置您的本地工作空间（本书余下部分将假设这种情况），但您也可以选择在为Node开发配备的云端服务中运行和开发代码。
- en: Local and cloud development
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本地与云端开发
- en: You can choose to use both types of workspaces to enjoy the benefits of working
    locally without worrying about bandwidth/internet issues and to work remotely
    when you don't physically have your favorite local machine. To do this, you can
    use Git to version control your code, store your latest code on remote Git hosting
    services such as GitHub or BitBucket, and then share the same code across all
    your workspaces. On your workspaces, you can compose the code in an IDE of your
    choice from the many available options, some of which are discussed next.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以选择同时使用这两种类型的工作空间，以享受在本地工作的好处，无需担心带宽/互联网问题，并在您没有物理上拥有您最喜欢的本地机器时远程工作。为此，您可以使用Git进行版本控制您的代码，将最新的代码存储在远程Git托管服务（如GitHub或BitBucket）上，然后在所有工作空间中共享相同的代码。在您的工空间中，您可以从许多可用的选项中选择您喜欢的IDE来编写代码，其中一些将在下文中讨论。
- en: IDE or text editors
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IDE或文本编辑器
- en: 'Most cloud development environments will come integrated with source code editors,
    but for your local workspace, you can pick any based on your preference as a programmer
    and then customize it for MERN development. For example, the following popular
    options can each be customized as required:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数云端开发环境都会集成源代码编辑器，但针对您的本地工作空间，您可以根据自己的编程偏好选择任何一种，然后对其进行定制以适应MERN开发。例如，以下流行的选项可以根据需要定制：
- en: '**Visual Studio Code** ([https:/](https://code.visualstudio.com/)[/](https://code.visualstudio.com/)[code.](https://code.visualstudio.com/)[visualstudio.](https://code.visualstudio.com/)[com/](https://code.visualstudio.com/)):
    A feature-rich source code editor by Microsoft with extensive support for modern
    web application development workflow, including support for MERN stack technologies'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Visual Studio Code** ([https://code.visualstudio.com/](https://code.visualstudio.com/))：Microsoft开发的特性丰富的源代码编辑器，广泛支持现代网络应用程序开发工作流程，包括对MERN堆栈技术的支持'
- en: '**Atom** ([https:/](https://atom.io/)[/](https://atom.io/)[atom.](https://atom.io/)[io/](https://atom.io/)):
    A free, open source text editor for GitHub that has many packages relevant to
    the MERN stack from other developers'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Atom** ([https://atom.io/](https://atom.io/))：一个免费的、开源的文本编辑器，由GitHub提供，有许多其他开发者提供的与MERN堆栈相关的包'
- en: '**SublimeText** ([https:/](https://www.sublimetext.com/)[/](https://www.sublimetext.com/)[www.](https://www.sublimetext.com/)[sublimetext.](https://www.sublimetext.com/)[com/](https://www.sublimetext.com/)):
    A proprietary, cross-platform text editor that also has many packages relevant to
    the MERN stack, along with support for JavaScript development'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SublimeText** ([https://www.sublimetext.com/](https://www.sublimetext.com/))：一个专有、跨平台的文本编辑器，也提供了许多与MERN堆栈相关的包，以及JavaScript开发支持'
- en: '**WebStorm** ([https:/](https://www.jetbrains.com/webstorm/)[/](https://www.jetbrains.com/webstorm/)[www.](https://www.jetbrains.com/webstorm/)[jetbrains.](https://www.jetbrains.com/webstorm/)[com/](https://www.jetbrains.com/webstorm/)[webstorm/](https://www.jetbrains.com/webstorm/)):
    A full-fledged JavaScript IDE by JetBrains, with support for MERN stack development'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**WebStorm** ([https://www.jetbrains.com/webstorm/](https://www.jetbrains.com/webstorm/))：JetBrains开发的完整JavaScript
    IDE，支持MERN堆栈开发'
- en: There are other editors at your disposal, but besides focusing on what each
    has to offer, it is important that you choose one that is right for you, enables
    a productive workflow, and also integrates well with the other tools necessary
    for web application development.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 您还有其他可用的编辑器，但除了关注每个编辑器能提供什么之外，选择一个适合您、能够实现高效工作流程并且与其他必要的网络应用程序开发工具良好集成的编辑器同样重要。
- en: Chrome Developer Tools
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Chrome开发者工具
- en: Loading, viewing, and debugging the frontend is a very crucial part of the web
    development process. Chrome DevTools ([https://developers.google.com/web/tools/chrome-devtools](https://developers.google.com/web/tools/chrome-devtools)),
    which is a part of the Chrome browser, has many great features that allow debugging,
    testing, and experimenting with the frontend code and the look, feel, responsiveness,
    and performance of the UI. Additionally, the React Developer Tools extension is
    available as a Chrome plugin, and it adds React debugging tools to Chrome DevTools.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 加载、查看和调试前端是网络开发过程中的一个非常重要的部分。Chrome DevTools（[https://developers.google.com/web/tools/chrome-devtools](https://developers.google.com/web/tools/chrome-devtools)），它是Chrome浏览器的一部分，拥有许多出色的功能，允许调试、测试和实验前端代码以及UI的外观、感觉、响应性和性能。此外，React
    Developer Tools扩展作为Chrome插件提供，它为Chrome DevTools添加了React调试工具。
- en: Utilizing tools like this in your development workflow can help you to understand
    the code better and to build your applications effectively. Similarly, integrating
    code version control with a tool such as Git can increase your productivity and
    efficiency as a developer.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的开发工作流程中利用此类工具可以帮助您更好地理解代码，并有效地构建应用程序。同样，将代码版本控制与Git等工具集成可以提高您作为开发者的生产力和效率。
- en: Git
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Git
- en: Any development workflow is incomplete without a version control system that
    enables tracking code changes, code sharing, and collaboration. Over the years,
    Git has become the leading version control system for many developers and is the
    most widely used distributed source code management tool. For code development
    in this book, Git will help primarily to track progress as we go through the steps
    to build each application.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 任何开发工作流程如果没有一个能够跟踪代码更改、代码共享和协作的版本控制系统都是不完整的。多年来，Git已成为许多开发者的首选版本控制系统，并且是最广泛使用的分布式源代码管理工具。在本书的代码开发中，Git将主要帮助我们跟踪在构建每个应用程序的步骤中的进度。
- en: Installation
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装
- en: To start using Git, first install it on your local machine or cloud development
    environment based on your system specifications. Instructions to download and
    install the latest version of Git, along with documentation on using Git commands,
    can be found at [https://git-scm.com/downloads](https://git-scm.com/downloads).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用Git，首先根据您的系统规格在本地机器或云开发环境中安装它。有关下载和安装Git最新版本的说明以及使用Git命令的文档，可以在[https://git-scm.com/downloads](https://git-scm.com/downloads)找到。
- en: Remote Git hosting services
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 远程Git托管服务
- en: Cloud-based Git repository hosting services such as GitHub and BitBucket help
    share your latest code across workspaces and deployment environments, and also
    to back up your code. These services pack in a lot of useful features to help
    with code management and the development workflow. To get started, you can create
    an account and set up remote repositories for your code bases.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 基于云的Git仓库托管服务，如GitHub和BitBucket，有助于在工作和部署环境中共享您的最新代码，并备份您的代码。这些服务包含了许多有用的功能，以帮助进行代码管理和开发工作流程。要开始使用，您可以创建一个账户并为您的代码库设置远程仓库。
- en: All these essential tools will help enrich your web development workflow and
    increase productivity. Once you've completed the necessary setup in your workspace
    according to the discussion in the next section, we'll move on and start building
    MERN applications.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些基本工具都将帮助丰富您的Web开发工作流程并提高生产力。一旦您根据下一节中的讨论在您的空间中完成必要的设置，我们将继续前进并开始构建MERN应用程序。
- en: Setting up MERN stack technologies
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置MERN技术栈
- en: MERN stack technologies are being developed and upgraded as this book is being
    written, so for the work demonstrated throughout this book, we use the latest
    stable versions at the time of writing. Installation guidelines for most of these
    technologies are dependent on the system environment of your workspaces, so this
    section points to all relevant installation resources and also acts as a guide
    for setting up a fully functioning MERN stack.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 随着本书的编写，MERN技术栈正在开发和升级，因此对于本书中展示的工作，我们使用撰写本文时的最新稳定版本。这些技术的大多数安装指南取决于您的工作空间系统环境，因此本节指向所有相关的安装资源，并作为设置一个完全运行的MERN技术栈的指南。
- en: MongoDB
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MongoDB
- en: MongoDB must be set up, running, and accessible to your development environment
    before any database features are added to MERN applications. At the time of writing,
    the current stable version of MongoDB is 4.2.0, and this version of the MongoDB
    Community Edition is used for developing the applications in this book. The rest
    of this section provides resources on how to install and run MongoDB.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在将任何数据库功能添加到MERN应用程序之前，MongoDB必须设置好、运行良好，并且对您的开发环境可访问。在撰写本文时，MongoDB的当前稳定版本是4.2.0，本书中的应用程序开发使用的是这个版本的MongoDB社区版。本节其余部分提供了有关如何安装和运行MongoDB的资源。
- en: Installation
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装
- en: 'You need to install and start MongoDB on your workspace before you can use
    it for development. The installation and startup process for MongoDB depends on
    your workspace specifications:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在您可以使用MongoDB进行开发之前，您需要在您的空间中安装并启动MongoDB。MongoDB的安装和启动过程取决于您的工作空间规格：
- en: Cloud development services will have their own instructions for installing and
    setting up MongoDB. For example, the how-to steps for AWS Cloud9 can be found
    at [https://docs.c9.io/docs/setup-a-database#mongodb](https://docs.c9.io/docs/setup-a-database#mongodb).
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 云开发服务将有自己的安装和设置MongoDB的说明。例如，AWS Cloud9的如何操作步骤可以在[https://docs.c9.io/docs/setup-a-database#mongodb](https://docs.c9.io/docs/setup-a-database#mongodb)找到。
- en: The guide for MongoDB installation on your local machine is at [https://docs.mongodb.com/manual/administration/install-community](https://docs.mongodb.com/manual/administration/install-community)
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以在[https://docs.mongodb.com/manual/administration/install-community](https://docs.mongodb.com/manual/administration/install-community)找到MongoDB在本地机器上的安装指南。
- en: After you have successfully installed MongoDB on your workspace and have it
    running, you can interact with it using the **mongo shell**.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在您成功安装MongoDB到您的空间并使其运行后，您可以使用**mongo shell**与之交互。
- en: Running the mongo shell
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行mongo shell
- en: The mongo shell is an interactive tool for MongoDB that comes as a part of the
    MongoDB installation. It is a good place to start getting familiar with MongoDB
    operations. Once MongoDB is installed and running, you can run the mongo shell
    on the command line. In the mongo shell, you can use commands to query and update
    data and perform administrative operations.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: MongoDB shell是MongoDB安装的一部分，是一个交互式工具，用于开始熟悉MongoDB操作。一旦MongoDB安装并运行，你就可以在命令行上运行mongo
    shell。在mongo shell中，你可以使用命令查询和更新数据，并执行管理操作。
- en: You could also skip the local installation of MongoDB and instead deploy a MongoDB
    database in the cloud using MongoDB Atlas ([https://www.mongodb.com/cloud/atlas](https://www.mongodb.com/cloud/atlas)).
    It is a global cloud database service that can be used to add fully managed MongoDB
    databases to modern applications.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以跳过MongoDB的本地安装，而是使用MongoDB Atlas在云中部署MongoDB数据库（[https://www.mongodb.com/cloud/atlas](https://www.mongodb.com/cloud/atlas)）。它是一个全球云数据库服务，可以用于向现代应用程序添加完全管理的MongoDB数据库。
- en: The next core component of MERN development is Node.js, which will be necessary
    to complete the remaining MERN setup.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: MERN开发的下一个核心组件是Node.js，这是完成剩余的MERN设置所必需的。
- en: Node.js
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Node.js
- en: Backend server implementation for the MERN applications relies on Node.js. At
    the time of writing, 13.12.0 is the latest stable Node.js version available, and
    the code in the book has also been tested with version 14.0.0 from the latest
    nightly builds. The version of Node.js you choose to download will come bundled
    with npm as the package manager. Depending on whether you choose npm or Yarn as
    the package manager for your MERN projects, you can install Node.js with or without
    npm.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: MERN应用程序的后端服务器实现依赖于Node.js。在撰写本文时，13.12.0是可用的最新稳定版Node.js，书中代码也已在最新夜间构建的14.0.0版本上进行了测试。你选择的Node.js版本将捆绑npm作为包管理器。根据你选择npm或Yarn作为MERN项目的包管理器，你可以带或不带npm安装Node.js。
- en: Installation
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装
- en: 'Node.js can be installed via direct download, installers, or the Node Version
    Manager:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js可以通过直接下载、安装程序或Node版本管理器进行安装：
- en: You can install Node.js by directly downloading the source code or a pre-built
    installer specific to your workspace platform. Downloads are available at [nodejs.org/en/download](https://nodejs.org/en/download/).
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以通过直接下载源代码或针对你的工作空间平台预构建的安装程序来安装Node.js。下载可在[nodejs.org/en/download](https://nodejs.org/en/download/)找到。
- en: Cloud development services may come with Node.js pre-installed, as AWS Cloud9
    does, or will have specific instructions for adding and updating it.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 云开发服务可能预装了Node.js，例如AWS Cloud9就是这样，或者会有添加和更新它的具体说明。
- en: To test if the installation was successful, you can open the command line and
    run `node -v` to see if it correctly returns the version number.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试安装是否成功，你可以打开命令行并运行`node -v`以查看它是否正确返回版本号。
- en: Node version management with nvm
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用nvm进行Node版本管理
- en: If you need to maintain multiple versions of Node.js and npm for different projects,
    nvm is a useful command-line tool to install and manage different versions on
    the same workspace. You have to install nvm separately. Instructions for setup
    can be found at [github.com/creationix/nvm](https://github.com/creationix/nvm).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要为不同的项目维护多个版本的Node.js和npm，nvm是一个有用的命令行工具，可以在同一工作空间上安装和管理不同版本。你必须单独安装nvm。设置说明可以在[github.com/creationix/nvm](https://github.com/creationix/nvm)找到。
- en: With Node.js set up on your system, you can use a package manager such as npm
    or Yarn to start integrating the remaining parts of the MERN stack.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的系统上设置Node.js后，你可以使用npm或Yarn等包管理器开始集成MERN堆栈的其余部分。
- en: Yarn package manager
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Yarn包管理器
- en: Yarn is a relatively new package manager for JavaScript dependencies, and it
    can be used as an alternative to npm. It is a fast, reliable, and secure dependency
    manager that provides a different range of additional features, including an offline
    mode for re-installation of packages without an internet connection and support
    for multiple package registries, such as npmjs.com and Bower.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Yarn是一个相对较新的JavaScript依赖项包管理器，可以用作npm的替代品。它是一个快速、可靠且安全的依赖项管理器，提供了一系列额外的功能，包括离线模式，可以在没有互联网连接的情况下重新安装包，并支持多个包注册表，如npmjs.com和Bower。
- en: We will use Yarn (v1.22.4) to manage Node modules and packages for the projects
    in this book. Before using Yarn, you will need to install it on your workspace.
    There are a number of ways to install Yarn depending on your operating system
    and its version.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 Yarn（v1.22.4）来管理本书中项目的 Node 模块和包。在使用 Yarn 之前，您需要在您的开发空间中安装它。根据您的操作系统及其版本，安装
    Yarn 有多种方法。
- en: To learn more about your options for installing Yarn on your workspace, visit [https://yarnpkg.com/lang/en/docs/install](https://yarnpkg.com/lang/en/docs/install).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于在您的开发空间中安装 Yarn 的选项，请访问 [https://yarnpkg.com/lang/en/docs/install](https://yarnpkg.com/lang/en/docs/install)。
- en: Once Yarn is installed, it can be used to add the other necessary modules including
    Express and React.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 Yarn 后，它可以用来添加其他必要的模块，包括 Express 和 React。
- en: Modules for MERN
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MERN 模块
- en: The remaining MERN stack technologies are all available as Node.js package modules
    and can be added to each project using Yarn. These include key modules, such as
    React and Express, that are required to run each MERN application, and also modules
    that will be necessary during development. In this section, we list and discuss
    these modules, then see how to use the modules in a working project in the following
    section.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 剩余的 MERN 堆栈技术都可作为 Node.js 包模块提供，并可以使用 Yarn 添加到每个项目中。这包括运行每个 MERN 应用程序所需的关键模块，如
    React 和 Express，以及开发期间必要的模块。在本节中，我们列出并讨论这些模块，然后在下一节中查看如何在实际项目中使用这些模块。
- en: Key modules
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关键模块
- en: 'To integrate the MERN stack technologies and run your applications, we will
    need the following modules:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 要集成 MERN 堆栈技术并运行您的应用程序，我们需要以下模块：
- en: '**React**: To start using React, we will need two modules:'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**React**：要开始使用 React，我们需要两个模块：'
- en: '`react`'
  id: totrans-62
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`react`'
- en: '`react-dom`'
  id: totrans-63
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`react-dom`'
- en: '**Express**: To use Express in your code, you will need the `express` module.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Express**：要在您的代码中使用 Express，您需要 `express` 模块。'
- en: '**MongoDB**: To use MongoDB directly with Node applications, you need to add
    the driver, which is available as a Node module named `mongodb`.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MongoDB**：要直接在 Node 应用程序中使用 MongoDB，您需要添加驱动程序，该驱动程序作为名为 `mongodb` 的 Node
    模块提供。'
- en: These key modules will produce full-stack web applications, but we will need
    some additional modules to aid in the development and generation of the application
    code.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这些关键模块将生成全栈 Web 应用程序，但我们需要一些额外的模块来帮助开发和应用代码的生成。
- en: devDependency modules
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发依赖模块
- en: 'To maintain consistency throughout the development of our MERN applications,
    we will use new JavaScript syntax from ES6 and higher versions in both client-
    and server-side implementations. As a consequence, and also to aid the development
    process, we will use the following additional modules to compile and bundle the
    code, and also to automatically reload the server and browser app as the code
    is updated during development:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在整个 MERN 应用程序开发过程中保持一致性，我们将在客户端和服务器端实现中使用 ES6 和更高版本的新的 JavaScript 语法。因此，为了帮助开发过程，我们将使用以下附加模块来编译和打包代码，并在开发过程中代码更新时自动重新加载服务器和浏览器应用程序：
- en: 'Babel modules are needed to convert ES6 and JSX to suitable JavaScript for
    all browsers. The modules needed to get Babel working are as follows:'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Babel 模块需要将 ES6 和 JSX 转换为适用于所有浏览器的合适 JavaScript。要使 Babel 工作所需的模块如下：
- en: '`@babel/core`'
  id: totrans-70
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@babel/core`'
- en: '`babel-loader`'
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`babel-loader`'
- en: for transpiling JavaScript files with Webpack
  id: totrans-72
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于使用 Webpack 转换 JavaScript 文件
- en: '`@babel/preset-env` and `@babel/preset-react` to provide support for React,
    and the latest JavaScript feature'
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@babel/preset-env` 和 `@babel/preset-react` 以提供对 React 和最新 JavaScript 特性的支持'
- en: 'Webpack modules will help bundle the compiled JavaScript, both for the client-side
    and the server-side code. Modules needed to get Webpack working are as follows:'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Webpack 模块将帮助打包编译后的 JavaScript，包括客户端和服务器端代码。要使 Webpack 工作所需的模块如下：
- en: '`webpack`.'
  id: totrans-75
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`webpack`。'
- en: '`webpack-cli` to run Webpack commands.'
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`webpack-cli` 用于运行 Webpack 命令。'
- en: '`webpack-node-externals` to ignore external Node.js module files when bundling
    in Webpack.'
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`webpack-node-externals` 用于在 Webpack 打包时忽略外部 Node.js 模块文件。'
- en: '`webpack-dev-middleware` to serve the files emitted from Webpack over a connected
    server during the development of the code.'
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`webpack-dev-middleware` 用于在代码开发期间通过连接的服务器提供 Webpack 输出的文件。'
- en: '`webpack-hot-middleware` to add hot module reloading into an existing server
    by connecting a browser client to a Webpack server and receiving updates as code
    changes during development.'
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`webpack-hot-middleware` 通过将浏览器客户端连接到 Webpack 服务器并在开发过程中接收代码更改时的更新，将热模块重载添加到现有服务器中。'
- en: '`nodemon` to watch server-side changes during development, so the server can
    be reloaded to put changes into effect.'
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nodemon` 用于在开发期间监视服务器端更改，以便服务器可以重新加载以使更改生效。'
- en: '`react-hot-loader` for faster development on the client side. Every time a
    file changes in the React frontend, `react-hot-loader` enables the browser app
    to update without re-bundling the whole frontend code.'
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`react-hot-loader` 用于客户端上的快速开发。每当 React 前端中的文件发生变化时，`react-hot-loader` 都会启用浏览器应用程序更新，而无需重新捆绑整个前端代码。'
- en: '`@hot-loader/react-dom` to enable hot-reloading support for React hooks. It
    essentially replaces the `react-dom` package of the same version, but with additional
    patches to support hot reloading.'
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@hot-loader/react-dom` 用于启用对 React hooks 的热重载支持。它本质上替换了相同版本的 `react-dom` 包，但增加了额外的补丁以支持热重载。'
- en: Although `react-hot-loader` is meant to help the development flow, it is safe
    to install this module as a regular dependency rather than a devDependency. It automatically
    ensures that hot reloading is disabled in production and the footprint is minimal.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 `react-hot-loader` 旨在帮助开发流程，但将其作为常规依赖项而不是开发依赖项安装是安全的。它将自动确保在生产环境中禁用热重载，并且占用空间最小。
- en: With the necessary MERN stack technologies and associated tools installed and
    ready for use, in the next section, we will use this toolset and write code that
    can confirm if your workspace is set up correctly to begin developing MERN-based
    web applications.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装并准备好使用必要的 MERN 堆栈技术和相关工具后，在下一节中，我们将使用此工具集编写代码以确认您的开发空间是否正确设置以开始开发基于 MERN
    的 Web 应用程序。
- en: Checking your development setup
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查您的开发设置
- en: In this section, we will go through the development workflow and write code
    step by step to ensure that the environment is correctly set up to start developing
    and running MERN applications.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将通过开发工作流程，逐步编写代码以确保环境正确设置以开始开发和运行 MERN 应用程序。
- en: 'We will generate these project files in the following folder structure to run
    a simple setup project:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在以下文件夹结构中生成这些项目文件以运行一个简单的设置项目：
- en: '[PRE0]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The code discussed in this section is available on GitHub in the repository
    at [https://github.com/PacktPublishing/Full-Stack-React-Projects-Second-Edition/tree/master/Chapter02/mern-simplesetup](https://github.com/PacktPublishing/Full-Stack-React-Projects-Second-Edition/tree/master/Chapter02/mern-simplesetup).
    You can clone this code and run it as you go through the code explanations in
    the rest of this chapter.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中讨论的代码可在 GitHub 上的以下存储库中找到：[https://github.com/PacktPublishing/Full-Stack-React-Projects-Second-Edition/tree/master/Chapter02/mern-simplesetup](https://github.com/PacktPublishing/Full-Stack-React-Projects-Second-Edition/tree/master/Chapter02/mern-simplesetup)。您可以将此代码克隆并运行，同时您将通读本章其余部分的代码解释。
- en: We will leave the configuration files in the root folder and organize the application
    code into client-side and server-side folders. The `client` folder will contain
    the frontend code and the `server` folder will contain the backend code. In the
    rest of this section, we will generate these files and implement both frontend
    and backend code to build a working full-stack web application.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将配置文件留在根目录中，并将应用程序代码组织到客户端和服务器端文件夹中。`client` 文件夹将包含前端代码，而 `server` 文件夹将包含后端代码。在本节的其余部分，我们将生成这些文件，并实现前端和后端代码以构建一个可工作的全栈
    Web 应用程序。
- en: Initializing package.json and installing Node.js modules
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 初始化 package.json 和安装 Node.js 模块
- en: We will begin by using Yarn to install all the required modules. It is a best
    practice to add a `package.json` file in every project folder to maintain, document,
    and share the Node.js modules being used in the MERN application. The `package.json`
    file will contain meta-information about the application, as well as list the
    module dependencies.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先使用 Yarn 安装所有必需的模块。在项目文件夹中添加 `package.json` 文件是一种最佳实践，以维护、记录和共享在 MERN 应用程序中使用的
    Node.js 模块。`package.json` 文件将包含有关应用程序的元信息，并列出模块依赖项。
- en: 'Perform the steps outlined in the following points to generate a `package.json`
    file, modify it, and use it to install the modules:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下要点中概述的步骤以生成 `package.json` 文件，修改它，并使用它来安装模块：
- en: '`yarn init`: From the command line, enter your project folder and run `yarn
    init`. You will be asked a series of questions to gather meta-information about
    your project, such as name, license, and author. Then, a `package.json` file will
    be auto generated with your answers.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`yarn init`：从命令行进入您的项目文件夹，并运行 `yarn init`。您将回答一系列问题以收集有关项目的元信息，例如名称、许可证和作者。然后，将自动生成一个包含您答案的
    `package.json` 文件。'
- en: '`dependencies`: Open `package.json` in your editor and modify the `JSON` object
    to add the key modules and `react-hot-loader` as regular dependencies:'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dependencies`：在编辑器中打开 `package.json`，并修改 `JSON` 对象，添加键模块和 `react-hot-loader`
    作为常规依赖项：'
- en: The file path mentioned before a code block indicates the location of the code
    in the project directory. This convention has been maintained throughout the book
    to provide better context and guidance as you follow along with the code.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码块之前提到的文件路径表示代码在项目目录中的位置。本书中一直保持此约定，以便在跟随代码时提供更好的上下文和指导。
- en: '`mern-simplesetup/package.json`:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-simplesetup/package.json`：'
- en: '[PRE1]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`devDependencies`: Modify `package.json` further to add the following Node modules
    required during development as `devDependencies`:'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`devDependencies`：进一步修改 `package.json`，将开发期间所需的以下 Node 模块作为 `devDependencies`
    添加：'
- en: '`mern-simplesetup/package.json`:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-simplesetup/package.json`：'
- en: '[PRE2]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'yarn: Save `package.json` and, from the command line, run the `yarn` command
    to fetch and add all these modules to your project.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: yarn：保存 `package.json`，然后从命令行运行 `yarn` 命令以获取并添加所有这些模块到你的项目中。
- en: With all the necessary modules installed and added to the project, next we will
    add configuration to compile and run the application code.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装并添加所有必要的模块后，接下来我们将添加配置以编译和运行应用程序代码。
- en: Configuring Babel, Webpack, and Nodemon
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 Babel、Webpack 和 Nodemon
- en: Before we start coding up the web application, we need to configure Babel, Webpack,
    and Nodemon to compile, bundle, and auto-reload the changes in the code during
    development.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始编写网络应用程序代码之前，我们需要配置 Babel、Webpack 和 Nodemon 以在开发期间编译、捆绑和自动重新加载代码更改。
- en: Babel
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Babel
- en: 'Create a `.babelrc` file in your project folder and add the following JSON
    with `presets` and `plugins` specified:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的项目文件夹中创建一个 `.babelrc` 文件，并添加以下带有 `presets` 和 `plugins` 的 JSON，指定如下：
- en: '`mern-simplesetup/.babelrc`:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-simplesetup/.babelrc`：'
- en: '[PRE3]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In this configuration, we specify that we need Babel to transpile the latest
    JavaScript syntax with support for code in a Node.js environment and also React/JSX
    code. The `react-hot-loader/babel` plugin is required by the `react-hot-loader`
    module to compile `React` components.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在此配置中，我们指定需要 Babel 将最新的 JavaScript 语法进行转译，支持 Node.js 环境中的代码以及 React/JSX 代码。`react-hot-loader`
    模块需要 `react-hot-loader/babel` 插件来编译 `React` 组件。
- en: Webpack
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Webpack
- en: 'We will have to configure Webpack to bundle both the client and server code
    and the client code separately for production. Create `webpack.config.client.js`,
    `webpack.config.server.js`, and `webpack.config.client.production.js` files in
    your project folder. All three files will have the following code structure, starting
    with imports, then the definition of the `config` object, and finally the export
    of the defined `config` object:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将不得不配置 Webpack 以捆绑客户端和服务器代码，并为生产环境单独捆绑客户端代码。在你的项目文件夹中创建 `webpack.config.client.js`、`webpack.config.server.js`
    和 `webpack.config.client.production.js` 文件。所有三个文件都将具有以下代码结构，从导入开始，然后是 `config`
    对象的定义，最后是定义的 `config` 对象的导出：
- en: '[PRE4]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `config` JSON object will differ with values specific to the client- or
    server-side code, and development versus production code. In the following sections,
    we will highlight the relevant properties in each configuration instance.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`config` JSON 对象将根据客户端或服务器端代码以及开发与生产代码的特定值而有所不同。在以下各节中，我们将突出显示每个配置实例中的相关属性。'
- en: Alternatively, you can also generate Webpack configurations using the interactive
    portal *Generate Custom Webpack Configuration* at [https://generatewebpackconfig.netlify.com/](https://generatewebpackconfig.netlify.com/)
    or using the Webpack-cli's `init` command from the command line.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你也可以使用交互式门户 *Generate Custom Webpack Configuration* 在 [https://generatewebpackconfig.netlify.com/](https://generatewebpackconfig.netlify.com/)
    或使用命令行的 Webpack-cli 的 `init` 命令生成 Webpack 配置。
- en: Client-side Webpack configuration for development
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发时的客户端 Webpack 配置
- en: 'Update the `config` object with the following in your `webpack.config.client.js`
    file in order to configure Webpack to bundle and hot-load React code during development:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的 `webpack.config.client.js` 文件中更新 `config` 对象，以便配置 Webpack 在开发期间捆绑和热加载 React
    代码：
- en: '`mern-simplesetup/webpack.config.client.js`:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-simplesetup/webpack.config.client.js`：'
- en: '[PRE5]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The highlighted keys and values in the `config` object will determine how Webpack
    bundles the code and where the bundled code will be placed:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `config` 对象中突出显示的键和值将确定 Webpack 如何捆绑代码以及捆绑代码将放置的位置：
- en: '`mode` sets `process.env.NODE_ENV` to the given value and tells Webpack to
    use its built-in optimizations accordingly. If not set explicitly, it defaults
    to a value of "`production`". It can also be set via the command line by passing
    the value as a CLI argument.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mode`将`process.env.NODE_ENV`设置为给定的值，并告诉Webpack相应地使用其内置优化。如果没有明确设置，则默认为"`production`"值。也可以通过命令行传递CLI参数来设置。'
- en: '`devtool` specifies how source maps are generated, if at all. Generally, a
    source map provides a way of mapping code within a compressed file back to its
    original position in a source file to aid debugging.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`devtool`指定了源映射的生成方式，如果有的话。通常，源映射提供了一种将压缩文件内的代码映射回源文件原始位置的方法，以帮助调试。'
- en: '`entry` specifies the entry file where Webpack starts bundling, in this case
    with the `main.js` file in the `client` folder.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`entry`指定了Webpack开始捆绑的入口文件，在本例中是`client`文件夹中的`main.js`文件。'
- en: '`output` specifies the output path for the bundled code, in this case set to
    `dist/bundle.js`.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`output`指定了捆绑代码的输出路径，在本例中设置为`dist/bundle.js`。'
- en: '`publicPath` allows specifying the base path for all assets in the application.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`publicPath`允许指定应用程序中所有资产的基准路径。'
- en: '`module` sets the regex rule for the file extension to be used for transpilation,
    and the folders to be excluded. The transpilation tool to be used here is `babel-loader`.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`module`设置用于转译的文件扩展名的正则表达式规则，以及要排除的文件夹。这里要使用的转译工具是`babel-loader`。'
- en: '`HotModuleReplacementPlugin` enables hot module replacement for `react-hot-loader`.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HotModuleReplacementPlugin`启用了`react-hot-loader`的热模块替换功能。'
- en: '`NoEmitOnErrorsPlugin` allows skipping emitting when there are compile errors.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NoEmitOnErrorsPlugin`允许在编译错误时跳过输出。'
- en: We also add a Webpack alias to point `react-dom` references to the `@hot-loader/react-dom`
    version.
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们还添加了一个Webpack别名，将`react-dom`引用指向`@hot-loader/react-dom`版本。
- en: The client-side code of the application will be loaded in the browser from the
    bundled code in `bundle.js`.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序的客户端代码将从`bundle.js`中的捆绑代码在浏览器中加载。
- en: Webpack provides other configuration options too, which can be used as required
    depending on your code and bundling specifications, as we will see next when we
    explore server-side-specific bundling.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: Webpack还提供了其他配置选项，可以根据你的代码和捆绑规范按需使用，正如我们将在探索服务器端特定捆绑时看到的。
- en: Server-side Webpack configuration
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务器端Webpack配置
- en: 'Modify the code to require `nodeExternals`, and update the `config` object
    with the following code in your `webpack.config.server.js` file to configure Webpack
    for bundling server-side code:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 修改代码以要求`nodeExternals`，并在你的`webpack.config.server.js`文件中使用以下代码更新`config`对象，以配置Webpack进行服务器端代码的捆绑：
- en: '`mern-simplesetup/webpack.config.server.js`:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-simplesetup/webpack.config.server.js`:'
- en: '[PRE6]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `mode` option is not set here explicitly but will be passed as required
    when running the Webpack commands with respect to running for development or building
    for production.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '`mode`选项在此处未明确设置，但在运行Webpack命令时，根据是开发运行还是生产构建，将按需传递。'
- en: Webpack starts bundling from the server folder with `server.js`, then outputs
    the bundled code in `server.generated.js` in the `dist` folder. During bundling,
    a CommonJS environment will be assumed as we are specifying `commonjs2` in `libraryTarget`,
    so the output will be assigned to `module.exports`.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: Webpack从`server.js`所在的`server`文件夹开始捆绑，然后在`dist`文件夹中的`server.generated.js`中输出捆绑代码。在捆绑过程中，将假设CommonJS环境，因为我们已在`libraryTarget`中指定了`commonjs2`，因此输出将被分配给`module.exports`。
- en: We will run the server-side code using the generated bundle in `server.generated.js`.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用生成的`server.generated.js`捆绑来运行服务器端代码。
- en: Client-side Webpack configuration for production
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生产环境下的客户端Webpack配置
- en: 'To prepare the client-side code for production, update the `config` object
    with the following code in your `webpack.config.client.production.js` file:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 为了准备客户端代码以用于生产，在你的`webpack.config.client.production.js`文件中使用以下代码更新`config`对象：
- en: '`mern-simplesetup/webpack.config.client.production.js`:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-simplesetup/webpack.config.client.production.js`:'
- en: '[PRE7]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This will configure Webpack to bundle the React code to be used in production
    mode. The configuration here is similar to the client-side configuration for development
    mode, but without the hot-reloading plugin and debug configuration as these will not
    be required in production.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 这将配置Webpack捆绑用于生产模式的React代码。这里的配置与开发模式的客户端配置类似，但没有热重载插件和调试配置，因为在生产中不需要这些。
- en: With the bundling configurations in place, we can add configuration for running
    these generated bundles automatically on code updates during development using
    Nodemon.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置好打包配置后，我们可以添加配置，以便在开发期间使用 Nodemon 自动运行这些生成的包，以响应代码更新。
- en: Nodemon
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Nodemon
- en: 'Create a `nodemon.json` file in your project folder and add the following configuration:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的项目文件夹中创建一个 `nodemon.json` 文件，并添加以下配置：
- en: '`mern-simplesetup/nodemon.json`:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-simplesetup/nodemon.json`:'
- en: '[PRE8]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This configuration will set up `nodemon` to watch for changes in the server
    files during development, then execute compile and build commands as necessary.
    We can begin writing the code for a simple full-stack web application to see these
    configurations in action.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 此配置将设置 `nodemon` 在开发期间监视服务器文件中的更改，然后根据需要执行编译和构建命令。我们可以开始编写一个简单的全栈 Web 应用程序的代码，以查看这些配置的实际效果。
- en: Frontend views with React
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 React 的前端视图
- en: 'In order to start developing a frontend, first create a root template file
    called `template.js` in the project folder, which will render the HTML with React
    components:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始开发前端，首先在项目文件夹中创建一个名为 `template.js` 的根模板文件，该文件将渲染带有 React 组件的 HTML：
- en: '`mern-simplesetup/template.js`:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-simplesetup/template.js`:'
- en: '[PRE9]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: When the server receives a request to the root URL, this HTML template will
    be rendered in the browser, and the `div` element with ID `"root"` will contain
    our React component.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 当服务器接收到对根 URL 的请求时，这个 HTML 模板将在浏览器中渲染，并且具有 ID `"root"` 的 `div` 元素将包含我们的 React
    组件。
- en: Next, create a `client` folder where we will add two React files, `main.js`, and
    `HelloWorld.js`.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建一个 `client` 文件夹，我们将在此文件夹中添加两个 React 文件，`main.js` 和 `HelloWorld.js`。
- en: 'The `main.js` file simply renders the top-level entry React component in the
    `div` element in the HTML document:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '`main.js` 文件简单地渲染 HTML 文档中的 `div` 元素顶层的入口 React 组件：'
- en: '`mern-simplesetup/client/main.js`:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-simplesetup/client/main.js`:'
- en: '[PRE10]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In this case, the entry React component is the `HelloWorld` component imported
    from `HelloWorld.js`:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，入口 React 组件是从 `HelloWorld.js` 导入的 `HelloWorld` 组件：
- en: '`mern-simplesetup/client/HelloWorld.js`:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-simplesetup/client/HelloWorld.js`:'
- en: '[PRE11]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '`HelloWorld.js` contains a basic `HelloWorld` React component, which is hot-exported
    to enable hot reloading with `react-hot-loader` during development.'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '`HelloWorld.js` 包含一个基本的 `HelloWorld` React 组件，它通过 `react-hot-loader` 在开发期间启用热重载进行热导出。'
- en: To see the React component rendered in the browser when the server receives
    a request to the root URL, we need to use the Webpack and Babel setup to compile
    and bundle this code, and also add server-side code that responds to the root
    route request with the bundled code. We will implement this server-side code next.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 要在服务器接收到对根 URL 的请求时在浏览器中看到渲染的 React 组件，我们需要使用 Webpack 和 Babel 设置来编译和打包此代码，并添加响应根路由请求的打包代码的服务器端代码。我们将在下一节中实现此服务器端代码。
- en: Server with Express and Node
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Express 和 Node 的服务器
- en: In the project folder, create a folder called `server`, and add a file called
    `server.js` that will set up the server. Then, add another file called `devBundle.js`,
    which will help compile the React code using Webpack configurations while in development
    mode. In the following sections, we will implement the Node-Express app, which
    initiates client-side code bundling, starts the server, sets up the path to serve
    static assets to the client, and renders the React view in a template when a `GET`
    request is made to the root route.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目文件夹中，创建一个名为 `server` 的文件夹，并添加一个名为 `server.js` 的文件，该文件将设置服务器。然后，添加另一个名为 `devBundle.js`
    的文件，该文件将帮助在开发模式下使用 Webpack 配置编译 React 代码。在接下来的章节中，我们将实现 Node-Express 应用程序，该应用程序启动客户端代码打包，启动服务器，设置路径以向客户端提供静态资产，并在对根路由发起
    `GET` 请求时在模板中渲染 React 视图。
- en: Express app
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Express 应用程序
- en: 'In `server.js`, we will first add code to import the `express` module in order
    to initialize an Express app:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `server.js` 中，我们首先将添加代码以导入 `express` 模块，以便初始化一个 Express 应用程序：
- en: '`mern-simplesetup/server/server.js`:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-simplesetup/server/server.js`:'
- en: '[PRE12]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Then we will use this Express app to build out the rest of the Node server application.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将使用这个 Express 应用程序来构建 Node 服务器应用程序的其余部分。
- en: Bundling React app during development
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在开发期间打包 React 应用程序
- en: 'In order to keep the development flow simple, we will initialize Webpack to
    compile the client-side code when the server is run. In `devBundle.js`, we will
    set up a `compile` method that takes the Express app and configures it to use
    the Webpack middleware to compile, bundle, and serve code, as well as enable hot
    reloading in development mode:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持开发流程简单，我们将初始化Webpack，在服务器运行时编译客户端代码。在`devBundle.js`中，我们将设置一个`compile`方法，该方法接受Express应用并配置它使用Webpack中间件来编译、打包和提供代码，以及在开发模式下启用热重载：
- en: '`mern-simplesetup/server/devBundle.js`:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-simplesetup/server/devBundle.js`:'
- en: '[PRE13]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We will call this compile method in `server.js` by adding the following lines
    while in development mode:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在开发模式下通过添加以下行在`server.js`中调用此编译方法：
- en: '`mern-simplesetup/server/server.js`:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-simplesetup/server/server.js`:'
- en: '[PRE14]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: These two highlighted lines are only meant for development mode and should be
    commented out when building the application code for production. In development
    mode, when these lines are executed, Webpack will compile and bundle the React
    code to place it in `dist/bundle.js`.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 这两条高亮的行仅用于开发模式，当构建用于生产的应用程序代码时应将其注释掉。在开发模式下，当这些行执行时，Webpack将编译并打包React代码，将其放置在`dist/bundle.js`中。
- en: Serving static files from the dist folder
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从dist文件夹提供静态文件
- en: 'Webpack will compile client-side code in both development and production mode,
    then place the bundled files in the `dist` folder. To make these static files
    available on requests from the client side, we will add the following code in `server.js` to
    serve static files from the `dist` folder:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: Webpack将在开发和生产模式下编译客户端代码，然后将打包的文件放置在`dist`文件夹中。为了使这些静态文件对客户端请求可用，我们将在`server.js`中添加以下代码，以从`dist`文件夹中提供静态文件：
- en: '`mern-simplesetup/server/server.js`:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-simplesetup/server/server.js`:'
- en: '[PRE15]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This will configure the Express app to return static files from the `dist` folder
    when the requested route starts with `/dist`.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 这将配置Express应用，当请求的路由以`/dist`开头时，从`dist`文件夹返回静态文件。
- en: Rendering templates at the root
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在根目录渲染模板
- en: 'When the server receives a request at the root URL `/`, we will render `template.js`
    in the browser. In `server.js`, add the following route-handling code to the Express
    app to receive `GET` requests at `/`:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 当服务器在根URL `/` 接收到请求时，我们将在浏览器中渲染`template.js`。在`server.js`中，向Express应用添加以下路由处理代码以接收`/`的`GET`请求：
- en: '`mern-simplesetup/server/server.js`:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-simplesetup/server/server.js`:'
- en: '[PRE16]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Finally, configure the Express app to start a server that listens on the specified
    port for incoming requests:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，配置Express应用以启动一个监听指定端口的请求的服务器：
- en: '`mern-simplesetup/server/server.js`:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-simplesetup/server/server.js`:'
- en: '[PRE17]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: With this code, when the server is running, it will be able to accept requests
    at the root route and render the React view with the "Hello World" text in the
    browser. The only part missing from this full-stack implementation is a connection
    to the database, which we will add in the next section.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此代码，当服务器运行时，它将能够接受根路由的请求并在浏览器中渲染带有“Hello World”文本的React视图。这个全栈实现中唯一缺少的部分是与数据库的连接，我们将在下一节中添加。
- en: Connecting the server to MongoDB
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将服务器连接到MongoDB
- en: 'To connect your Node server to MongoDB, add the following code to `server.js`,
    and make sure you have MongoDB running in your workspace or you have the URL of
    a cloud MongoDB database instance:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将你的Node服务器连接到MongoDB，请将以下代码添加到`server.js`中，并确保你在工作区中运行MongoDB或者你有云MongoDB数据库实例的URL：
- en: '`mern-simplesetup/server/server.js`:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-simplesetup/server/server.js`:'
- en: '[PRE18]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In this code example, `MongoClient` is the driver that connects to the running
    MongoDB instance using its URL. It allows us to implement the database-related
    code in the backend. This completes our full-stack integration for this simple
    web application using the MERN setup, and finally, we can run this code to see
    this application working live.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在此代码示例中，`MongoClient`是使用其URL连接到运行中的MongoDB实例的驱动程序。它允许我们在后端实现数据库相关代码。这完成了使用MERN设置的这个简单Web应用程序的全栈集成，最终我们可以运行此代码以查看应用程序实时工作。
- en: Run scripts
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行脚本
- en: 'In order to run the application, we will update the `package.json` file to
    add the following run scripts for development and production:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 为了运行应用程序，我们将更新`package.json`文件，为开发和生产添加以下运行脚本：
- en: '`mern-simplesetup/package.json`:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-simplesetup/package.json`:'
- en: '[PRE19]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Let''s look at the code:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看代码：
- en: '`yarn development`: This command will get Nodemon, Webpack, and the server
    started for development.'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`yarn development`：此命令将启动Nodemon、Webpack和服务器以进行开发。'
- en: '`yarn build`: This will generate the client and server code bundles for production
    mode (before running this script, make sure to remove the `devBundle.compile`
    code from `server.js`).'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`yarn build`：这将生成生产模式下的客户端和服务器代码包（在运行此脚本之前，请确保从`server.js`中删除`devBundle.compile`代码）。'
- en: '`yarn start`: This command will run the bundled code in production.'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`yarn start`：此命令将在生产中运行打包后的代码。'
- en: You can use these commands to run the application either for debugging while
    you are developing the application or when the application is ready to go live
    in production.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下命令来运行应用程序，无论是您在开发应用程序时进行调试，还是当应用程序准备在生产环境中上线时。
- en: Developing and debugging in real time
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实时开发和调试
- en: 'To run the code developed so far, and to ensure that everything is working,
    you can go through the following steps:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行到目前为止开发的代码，并确保一切正常工作，您可以按照以下步骤进行：
- en: '**Run the application from the command line**: `yarn development`.'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**从命令行运行应用程序**：`yarn development`。'
- en: '**Load in browser**: Open the root URL in the browser, which is `http://localhost:3000`
    if you are using your local machine. You should see a page with the title MERN
    Kickstart that just shows Hello World!.'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**在浏览器中加载**：在浏览器中打开根URL，如果您使用的是本地机器，则为`http://localhost:3000`。您应该看到一个标题为MERN
    Kickstart的页面，该页面仅显示Hello World!。'
- en: '**Develop code and debug live**: Change the `HelloWorld.js` component text
    from `"Hello World!"` to just `"hello"`. Save the changes to see the instantaneous
    update in the browser, and also check the command-line output to see that `bundle.js`
    is not re-created. Similarly, you can also see instant updates when you change
    the server-side code, increasing productivity during development.'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**实时开发代码和调试**：将`HelloWorld.js`组件的文本从`"Hello World!"`更改为仅`"hello"`。保存更改后，您可以在浏览器中看到即时更新，并且还可以检查命令行输出以确认`bundle.js`没有被重新创建。同样，当您更改服务器端代码时，您也可以看到即时更新，这可以在开发过程中提高生产力。'
- en: If you have made it this far, congratulations! You are all set to start developing
    exciting MERN applications.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经走到这一步，恭喜您！您已经准备好开始开发令人兴奋的MERN应用程序了。
- en: Summary
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we discussed development tool options and how to install MERN
    technologies, and then we wrote code to check whether the development environment
    is set up correctly.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了开发工具选项以及如何安装MERN技术，然后我们编写了代码来检查开发环境是否正确设置。
- en: We began by looking at the recommended workspace, IDE, version control software,
    and browser options suitable for web development. You can select from these options
    based on your preferences as a developer.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先查看适合Web开发的推荐工作区、IDE、版本控制软件和浏览器选项。您可以根据作为开发者的个人喜好从中选择。
- en: Next, we set up the MERN stack technologies by first installing MongoDB, Node,
    and Yarn, and then adding the remaining required libraries using Yarn.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们首先安装MongoDB、Node和Yarn，然后使用Yarn添加剩余所需库，从而设置MERN堆栈技术。
- en: Before moving on to writing code to check this setup, we configured Webpack
    and Babel to compile and bundle code during development, and to build production-ready
    code. We learned that it is necessary to compile the ES6 and JSX code that is
    used for developing a MERN application before opening the application on browsers.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写代码以检查此设置之前，我们已配置Webpack和Babel在开发期间编译和打包代码，并构建生产就绪代码。我们了解到，在将应用程序打开到浏览器之前，有必要编译用于开发MERN应用程序的ES6和JSX代码。
- en: Additionally, we made the development flow efficient by including React Hot
    Loader for frontend development, configuring Nodemon for backend development,
    and compiling both the client and server code in one command when the server is
    run during development.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还通过包括React Hot Loader用于前端开发、配置Nodemon用于后端开发，以及在开发期间运行服务器时使用一条命令编译客户端和服务器代码，使开发流程更高效。
- en: In the next chapter, we will use this setup to start building a skeleton MERN
    application that will function as a base for full-featured applications.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将使用这个设置开始构建一个作为全功能应用程序基础的骨架MERN应用程序。
