["```js\nimport { FC, createContext, useState, useEffect, ReactElement, useCallback } from 'react'\nimport axios from 'axios' \n```", "```js\n npm install axios\n  npm install --save-dev @types/axios \n```", "```js\nexport type Issue = {\n  number: number\n  title: string\n  url: string\n  state: string\n}\ninterface Issue_Context {\n  issues: Issue[]\n  url: string\n}\ninterface Props {\n  url: string\n} \n```", "```js\nexport const IssueContext = createContext<Issue_Context>({ issues: [], url: '' }) \n```", "```js\nconst IssueProvider: FC<Props> = ({ children, url }) => {\n  // State\n  const [issues, setIssues] = useState<Issue[]>([])\n  const fetchIssues = useCallback(async () => {\n    const response = await axios(url)\n    if (response) {\n      setIssues(response.data)\n    }\n  }, [url])\n  // Effects\n  useEffect(() => {\n    fetchIssues()\n  }, [fetchIssues])\n  const context = {\n    issues,\n    url\n  }\n  return <IssueContext.Provider value={context}>{children}</IssueContext.Provider>\n}\nexport default IssueProvider \n```", "```js\n// Providers\nimport IssueProvider from '../contexts/Issue'\n// Components\nimport Issues from './Issues'\nconst App = () => {\n  return (\n    <IssueProvider url=\"https://api.github.com/repos/ContentPI/ContentPI/issues\">\n      <Issues />\n    </IssueProvider>\n  )\n}\nexport default App; \n```", "```js\n// Dependencies\nimport { FC, useContext } from 'react'\n// Contexts\nimport { IssueContext, Issue } from '../contexts/Issue'\nconst Issues: FC = () => {\n  // Here you consume your Context, and you can grab the issues value.\n  const { issues, url } = useContext(IssueContext)\n  return (\n    <>\n      <h1>ContentPI Issues from Context</h1>\n      {issues.map((issue: Issue) => (\n        <p key={`issue-${issue.number}`}>\n          <strong>#{issue.number}</strong> {' '}\n          <a href={`${url}/${issue.number}`}>{issue.title}</a> {' '}\n          {issue.state}\n        </p>\n      ))}\n    </>\n  )\n}\nexport default Issues \n```", "```js\nnpm install swr react-loading-skeleton styled-components \n```", "```js\nconst fetcher = (url: string) => {\n  return fetch(url).then((response) => {\n    if (response.ok) {\n      return response.json()\n    }\n    return {\n      error: true\n    }\n  })\n}\nexport default fetcher \n```", "```js\nimport { SWRConfig } from 'swr'\nimport PokeContainer from './Pokemon/PokeContainer'\nimport fetcher from './Pokemon/fetcher'\nimport { StyledPokedex, StyledTitle } from './Pokemon/Pokemon.styled'\nconst App = () => {\n  return (\n    <>\n      <StyledTitle>Pokedex</StyledTitle>\n      <SWRConfig value={{ fetcher, suspense: true }}>\n        <StyledPokedex>\n          <PokeContainer />\n        </StyledPokedex>\n      </SWRConfig>\n    </>\n  )\n}\nexport default App \n```", "```js\nimport { FC, Suspense } from 'react'\nimport Pokedex from './Pokedex'\nconst PokeContainer: FC = () => {\n  return (\n    <Suspense fallback={<h2>Loading Pokedex...</h2>}>\n      <Pokedex />\n    </Suspense>\n  )\n}\nexport default PokeContainer \n```", "```js\nimport { FC, Suspense } from 'react'\nimport useSWR from 'swr'\nimport LoadingSkeleton from './LoadingSkeleton'\nimport Pokemon from './Pokemon'\nimport { StyledGrid } from './Pokemon.styled'\nconst Pokedex: FC = () => {\n  const { data: { results } } = useSWR('https://pokeapi.co/api/v2/pokemon?limit=150')\n  return (\n    <>\n      {results.map((pokemon: { name: string }) => (\n        <Suspense fallback={<StyledGrid><LoadingSkeleton /></StyledGrid>}>\n          <Pokemon key={pokemon.name} pokemonName={pokemon.name} />\n        </Suspense>\n      ))}\n    </>\n  )\n}\nexport default Pokedex \n```", "```js\nimport { FC } from 'react'\nimport useSWR from 'swr'\nimport { StyledCard, StyledTypes, StyledType, StyledHeader } from './Pokemon.styled'\ntype Props = {\n  pokemonName: string\n}\nconst Pokemon: FC<Props> = ({ pokemonName }) => {\n  const { data, error } = useSWR(`https://pokeapi.co/api/v2/pokemon/${pokemonName}`)\n  // Do you remember the error we set on the fetcher?\n  if (error || data.error) {\n    return <div />\n  }\n  if (!data) {\n    return <div>Loading...</div>\n  }\n  const { id, name, sprites, types } = data\n  const pokemonTypes = types.map((pokemonType: any) => pokemonType.type.name)\n  return (\n    <StyledCard pokemonType={pokemonTypes[0]}>\n      <StyledHeader>\n        <h2>{name}</h2>\n        <div>#{id}</div>\n      </StyledHeader>\n      <img alt={name} src={sprites.front_default} />\n      <StyledTypes>\n        {pokemonTypes.map((pokemonType: string) => (\n          <StyledType key={pokemonType}>{pokemonType}</StyledType>\n        ))}\n      </StyledTypes>\n    </StyledCard>\n  )\n}\nexport default Pokemon \n```", "```js\nimport styled from 'styled-components'\n// Type colors\nconst type: any = {\n  bug: '#2ADAB1',\n  dark: '#636363',\n  dragon: '#E9B057',\n  electric: '#ffeb5b',\n  fairy: '#ffdbdb',\n  fighting: '#90a4b5',\n  fire: '#F7786B',\n  flying: '#E8DCB3',\n  ghost: '#755097',\n  grass: '#2ADAB1',\n  ground: '#dbd3a2',\n  ice: '#C8DDEA',\n  normal: '#ccc',\n  poison: '#cc89ff',\n  psychic: '#705548',\n  rock: '#b7b7b7',\n  steel: '#999',\n  water: '#58ABF6'\n}\nexport const StyledPokedex = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  flex-flow: row wrap;\n  margin: 0 auto;\n  width: 90%;\n  &::after {\n    content: '';\n    flex: auto;\n  }\n`\ntype Props = {\n  pokemonType: string\n}\nexport const StyledCard = styled.div<Props>`\n  position: relative;\n  ${({ pokemonType }) => `\n    background: ${type[pokemonType]} url(./pokeball.png) no-repeat;\n    background-size: 65%;\n    background-position: center;\n  `}\n  color: #000;\n  font-size: 13px;\n  border-radius: 20px;\n  margin: 5px;\n  width: 200px;\n  img {\n    margin-left: auto;\n    margin-right: auto;\n    display: block;\n  }\n`\nexport const StyledTypes = styled.div`\n  display: flex;\n  margin-left: 6px;\n  margin-bottom: 8px;\n`\nexport const StyledType = styled.span`\n  display: inline-block;\n  background-color: black;\n  border-radius: 20px;\n  font-weight: bold;\n  padding: 6px;\n  color: white;\n  margin-right: 3px;\n  opacity: 0.4;\n  text-transform: capitalize;\n`\nexport const StyledHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  width: 90%;\n  h2 {\n    margin-left: 10px;\n    margin-top: 5px;\n    color: white;\n    text-transform: capitalize;\n  }\n  div {\n    color: white;\n    font-size: 20px;\n    font-weight: bold;\n    margin-top: 5px;\n  }\n`\nexport const StyledTitle = styled.h1`\n  text-align: center;\n`\nexport const StyledGrid = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  flex-flow: row wrap;\n  div {\n    margin-right: 5px;\n    margin-bottom: 5px;\n  }\n` \n```", "```js\nimport { FC } from 'react'\nimport Skeleton from 'react-loading-skeleton'\nconst LoadingSkeleton: FC = () => (\n  <div>\n    <Skeleton height={200} width={200} />\n  </div>\n)\nexport default LoadingSkeleton \n```", "```js\n npm install @reduxjs/toolkit react-redux typescript @types/react @types/react-redux @types/react-dom \n```", "```js\nimport { configureStore } from '@reduxjs/toolkit'\nimport rootReducer from './rootReducer'\nconst store = configureStore({\n  reducer: rootReducer\n})\nexport type RootState = ReturnType<typeof rootReducer>\nexport default store \n```", "```js\nimport { createSlice } from '@reduxjs/toolkit'\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState: 0,\n  reducers: {\n    increment: (state) => state + 1,\n    decrement: (state) => state â€“ 1\n  }\n})\nexport const { increment, decrement } = counterSlice.actions\nexport default counterSlice.reducer \n```", "```js\nimport { combineReducers } from '@reduxjs/toolkit'\nimport counterReducer from './counterSlice'\nconst rootReducer = combineReducers({\n  counter: counterReducer\n})\nexport default rootReducer \n```", "```js\nimport { useSelector, useDispatch } from 'react-redux'\nimport { increment, decrement } from './counterSlice'\nimport { RootState } from './store'\nfunction Counter() {\n  const count = useSelector((state: RootState) => state.counter)\n  const dispatch = useDispatch()\n  return (\n    <div>\n      <button onClick={() => dispatch(decrement())}>-</button>\n      <span>{count}</span>\n      <button onClick={() => dispatch(increment())}>+</button>\n    </div>\n  )\n}\nexport default Counter \n```", "```js\nimport React from 'react'\nimport { createRoot } from 'react-dom/client'\nimport { Provider } from 'react-redux'\nimport store from './store'\nimport Counter from './Counter'\ncreateRoot(document.getElementById('root') as HTMLElement).render(\n  <Provider store={store}>\n    <Counter />\n  </Provider>\n) \n```"]