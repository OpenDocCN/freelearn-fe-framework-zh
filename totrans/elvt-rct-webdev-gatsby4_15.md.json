["```js\n    npm init -y\n    ```", "```js\n    express dependency for creating our server and the socket.io library.\n    ```", "```js\n    const PORT = 3000\n    const express = require(\"express\");\n    const server = express()\n      .listen(PORT, () => console.log('Listening on\n        ${PORT}'));\n    ```", "```js\n    Listening on 3000 printed to the console.\n    ```", "```js\n    const PORT = 3000\n    const express = require(\"express\");\n    const server = express()\n      .listen(PORT, () => console.log('Listening on\n        ${PORT}'));\n    socket.io for the client-server handshake. We then tell our socket server how to handle events from clients. In this instance, if a client socket sends an event of the message type, we log it to the console.\n    ```", "```js\n    cors library, which acts as middleware within our Express application to enable CORS.\n    ```", "```js\n    const PORT = 3000;\n    const express = require(\"express\");\n    allowlist of origins that are allowed to access the server. The middleware checks the origin of any request to ensure that the origin is present in this list and is therefore allowed. If a request comes from an origin that is not on the list, the cross-origin request will be blocked. In this case, we have added localhost:8000, which is the default development port for Gatsby. If this changes or you are hosting the application, this list will need to be updated.\n    ```", "```js\n    npm i socket.io-client\n    ```", "```js\n    import React from \"react\";\n    socket.io-client package. Inside a useEffect, we create the socket connection by using the default export from socket.io-client with the server URL string as an argument. In our case, the server port was defined as 3000, so we added http://localhost:3000. This one line of code abstracts all the logic around the client-server handshake, so all you need to focus on is firing the messages you want to send. We then set the socket in our useState so that we can use it within the page. It's best to create the socket connection in useEffect as we only want this connection to be established once. If the page re-renders, we do not want the socket to reconnect as this would be perceived as a new connection by the server. The return statement in our useEffect ensures that the socket connection is closed when the component dismounts.\n    ```", "```js\n      const sendMessage = () => {\n        socket && socket.emit(\"message\", value);\n      };  \n      return (\n        <Layout>\n          <div className=\"max-w-5xl mx-auto py-16 lg:py-24\n            flex flex-col prose space-y-2 \">\n            <h1>Message The Server</h1>\n            <label htmlFor=\"message\">Your Message:</label>\n            <input\n              id=\"message\"\n              className=\"border-blue-700 border-2\"\n              onChange={(e) => setValue(e.target.value)}\n            />\n            <button onClick={sendMessage function is called, which uses socket.emit (if there is a socket available in the state), which emits a message from this client to the server. The first argument is the message type, while the second argument is the body of the message. In this case, we are just sending a string, but you could also send an object with multiple key-value pairs. If you were to send an object, there is no need to JSON.stringify it as the library handles all that for you.\n    ```", "```js\n    io.on(\"connection\", (socket) => {\n      socket.on(\"message\", (msg) => {\n        console.log(\"message: \" + msg);\n     socket.emit(\n     \"message\",\n     [\"Hi there!\", \"Hello!\",\n     \"Howdy\"][Math.floor(Math.random() * 3)]\n     );\n      });\n    });\n    ```", "```js\n    export default function SocketDemo() {\n      const [socket, setSocket] = React.useState(null);\n      const [value, setValue] = React.useState(\"\");\n      useState hook to store the server messages. As we may receive more than one, we set this to an empty array that we can push elements to. Then, we defined a second useEffect. If the socket connection has been established, this function listens for messages from the server of the message type. If it receives one, it adds the body of the message to the server message list.\n    ```", "```js\n      return (\n        <Layout>\n          <div className=\"max-w-5xl mx-auto py-16 \n           lg:py-24 flex flex-col prose space-y-2 \">\n            <h1>Message The Server</h1>\n            <label htmlFor=\"message\">Your Message:</label>\n            <input\n              id=\"message\"\n              className=\"border-blue-700 border-2\"\n              onChange={(e) => setValue(e.target.value)}\n            />\n            <button onClick={sendMessage} className=\"btn\">\n              Send message\n            </button>\n     <label>Server Messages:</label>\n     <ul>\n     {serverMessages.map((message, index) => (\n     <li key={index}>{message}</li>\n     ))}\n            </ul>\n          </div>\n        </Layout>\n      );\n    }\n    ```", "```js\n    io.on(\"connection\", (socket) => {\n      io.emit(\"count\", io.engine.clientsCount);\n      socket.on(\"disconnect\", function () {\n        io.emit(\"count\", io.engine.clientsCount);\n      });\n    }); \n    ```", "```js\n    import React, { useState, useContext } from \"react\";\n    import openSocket from \"socket.io-client\";\n    const socket = openSocket(\"http://localhost:3000\");\n    const StatsContext = React.createContext();\n    export const StatsProvider = ({ ...props }) => {\n      {/* Code continued in next step */}\n    };\n    export const useStats = () =>\n      useContext(StatsContext);  \n    export default StatsContext;\n    ```", "```js\n    const [socket, setSocket] = React.useState(null);\n      const [liveVisitorCount, setLiveVisitorCount] =\n        useState(0);\n      React.useEffect(() => {\n        const newSocket =\n          openSocket(\"http://localhost:3000\");\n        setSocket(newSocket);\n        return () => newSocket.close();\n      }, [setSocket]);\n      React.useEffect(() => {\n        if (socket) {\n          socket.on(\"count\", (count) => {\n            setLiveVisitorCount(count);\n          });\n        }\n      }, [socket, setLiveVisitorCount]);\n      return (\n        <StatsContext.Provider\n          value={{\n            liveVisitorCount,\n            connected: socket && socket.connected,\n          }}\n          {...props}\n        />\n      ); \n    ```", "```js\n    import React from \"react\";\n    import { StatsProvider } from \"./src/context/stats-\n      context\";\n    export const wrapPageElement = ({ element }) => {\n      return <StatsProvider>{element}</StatsProvider>;\n    };\n    ```", "```js\n    import React from \"react\";\n    import { useStats } from \"../../context/stats-\n      context\";\n    const VisitorCountBadge = () => {\n      const { liveVisitorCount, connected } = useStats();\n      return (\n        <p className={'${connected? \"bg-blue-200\" :\"bg-\n         red-200\"} px-2 py-1 inline-block rounded'}>\n         Visitors: {liveVisitorCount}\n        </p>\n      );\n    };\n    export default VisitorCountBadge;\n    ```", "```js\n    import React from \"react\";\n    Footer component, it will be visible on every page that utilizes our Layout component.\n    ```", "```js\n    // defined at top of file\n    const pathToRoom = (path) => 'Page-${path}';\n    // defined in socket configuration\n    socket.on(\"page-update\", ({ currentPage, previousPage\n       }) => {\n        if (previousPage) {\n          const previousRoom = pathToRoom(previousPage);\n          socket.leave(previousRoom);\n          io.to(previousRoom).emit(\n            \"page-count\",\n            io.sockets.adapter.rooms.get(previousRoom)?.size\n          );\n        }\n        const roomToJoin = pathToRoom(currentPage);\n        socket.join(roomToJoin);\n        io.to(roomToJoin).emit(\n          \"page-count\",\n          io.sockets.adapter.rooms.get(roomToJoin).size\n        );\n      });\n    ```", "```js\n    socket.on(\"disconnect\", function () {\n        io.emit(\"count\", io.engine.clientsCount);\n        for(room of io.sockets.adapter.rooms){\n          io.to(room[0]).emit(\n            \"page-count\",\n            io.sockets.adapter.rooms.get(room[0])?.size\n          );\n        };\n      });\n    ```", "```js\n    import React from \"react\";\n    import { StatsProvider } from \"./src/context/stats-\n      context\";\n    export const wrapPageElement = ({ element, props }) => {\n      return <StatsProvider\n      location object that Gatsby provides via props to StatsProvider. The location object contains a pathname variable, which will tell us what path the user is currently at.\n    ```", "```js\n    export const StatsProvider = ({ location, ...props })\n     => {\n    // Code continued in next step\n    }\n    ```", "```js\n    useState hook. We will also need to keep a record of the previous location, which we can do using a useRef React hook.\n    ```", "```js\n      React.useEffect(() => {\n        if (socket) {\n          socket.on(\"count\", (count) => {\n            setLiveVisitorCount(count);\n          });\n          page-count event, we update the pageVisitorCount value in the state using the setPageVisitorCount function.\n    ```", "```js\n    React.useEffect(() => {\n        if (socket && previousLocation.current !==\n          location.pathname) {\n          socket.emit(\"page-update\", {\n            currentPage: location.pathname,\n            previousPage: previousLocation.current,\n          });\n          previousLocation.current = location.pathname;\n        }\n      }, [location, socket]);\n    ```", "```js\n      return (\n        <StatsContext.Provider\n          value={{\n            liveVisitorCount,\n            pageVisitorCount in the provider's value prop, we can access it via the useStats hook in our components.\n    ```", "```js\n    const VisitorCountBadge = () => {\n      const { liveVisitorCount, pageVisitorCount,\n       connected } = useStats();\n      return (\n        <p className={'${connected? \"bg-blue-200\" :\"bg-\n         red-200\"} px-2 py-1 inline-block rounded'}>\n         {pageVisitorCount} of {liveVisitorCount} visitors\n         on this page\n        </p>\n      );\n    };\n    ```"]