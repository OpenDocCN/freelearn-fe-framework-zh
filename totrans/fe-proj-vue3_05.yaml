- en: '5'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Composition API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned how to establish data communication between
    nesting components using props, refs, and slots.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will introduce us to a new and scalable approach to writing components
    with the `setup()` lifecycle hook – the Composition API. By the end of the chapter,
    you will be able to write isolated composables (or custom hooks) to reuse in multiple
    components by using the Composition API with the `setup()` method, and build a
    scalable component system for your Vue project beyond the classic Options API.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter covers the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating components with the `setup()` lifecycle method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding composable lifecycle functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating your composable (custom hook)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you need to set up a basic Vue project following the instructions
    in [*Chapter 1*](B18645_01.xhtml#_idTextAnchor015), *Starting Your First Vue Project*.
    Creating a single file Vue component is recommended to practice the examples and
    concepts mentioned easily.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find this chapter’s source code here: [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter05](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter05).'
  prefs: []
  type: TYPE_NORMAL
- en: Creating components with the setup() lifecycle method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Starting from Vue 3.x, the Vue team has introduced the Composition API as a
    new way to compose Vue components within the `setup()` lifecycle method. As mentioned
    in [*Chapter 1*](B18645_01.xhtml#_idTextAnchor015), *Starting Your First Vue Project*,
    `setup()` is the first hook the Vue engine will run in a component’s lifecycle
    before the `beforeCreate()` hook. At this point, Vue hasn’t defined a component
    instance or any component data.
  prefs: []
  type: TYPE_NORMAL
- en: This lifecycle method runs once before the initialization and creation of a
    component and is part of the Options API. The Vue team has dedicated `setup()`
    to working with Composition API and any custom hooks (composables) written with
    the Composition API as an alternative approach to creating reactive components
    besides the Options API.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can start using the `setup()` method with the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '`Setup()` accepts two arguments, which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`props`: All the reactive props data is passed to the component from its parent.
    You need to declare the props using the `props` field in the Options API as usual.
    Note that you shouldn’t de-structure the `props` object to avoid losing the reactivity
    for the de-structured field.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`context`: These are all the non-reactive fields for the component, such as
    `attrs`, `slots`, `emit`, and `expose`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`setup()` returns an object containing the component’s internal reactive/static
    data state, its methods, or a render function.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The equivalent version of `setup()` without the Options API is `<script setup>`.
    The Vue engine will compile the code defined within the `<script setup>` section
    into the appropriate code block inside `setup()`, as seen in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code is equal to the following using `setup()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In both preceding examples, we define an internal data state – `message` – for
    our component. We then can display `message` in the `<template>` section as required.
  prefs: []
  type: TYPE_NORMAL
- en: 'With `<script setup>`, if you need to use the `props` parameter, you need to
    import `defineProps()` from the `vue` package and define the props within the
    `<script setup>` section, as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, `userName` is now available in the template section
    as the component’s data props. You can also do something similar with `defineEmits()`
    for all the custom events of a component, `useSlots()` and `useAttrs()` for the
    component’s `slots`, and `attrs` when using `<script setup>` instead of the `setup()`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: Next, let’s create our first component with the `setup()` method.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 5.01 – creating a greeting component with setup()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this exercise, we will create a component that renders a pre-defined greeting
    message using `setup()`, and then rewrite it using `<``script setup>`.
  prefs: []
  type: TYPE_NORMAL
- en: To access the code file for this exercise, refer to [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter05/Exercise5.01](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter05/Exercise5.01).
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow the given steps to complete this exercise:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the application generated by `npm init vue@3` as a starting point, or within
    the root folder of the code repository, navigate into the `Chapter05/Exercise5.01`
    folder by using the following commands in order:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the exercise project in VS Code (by using the `code .` command within the
    project directory) or your preferred IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new file named `Greeting.vue` in the `./``src/components` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Start by scaffolding the component with empty `template` and `script` tags:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we will implement the logic of our `setup()` method, which will return
    an internal data state, `greeting`, with a static value of `"Hello"`, and another
    internal data state, `who`, with a static value of `"John"`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `template` section, let’s display the values of `greeting` and `who`
    as shown in the following code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the application using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You will see the following when visiting your app in the browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `setup` attribute to your `<``script>` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, change the content within the `script` tag to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output of the browser should stay the same:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next, we will explore how we can combine `setup()` and the render function,
    `h()`, from the Composition API to create a component.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a component with setup() and h()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In many scenarios where you need to render a static functional component or
    a static component structure based on the context and props received, using `h()`
    and `setup()` can be helpful. The `h()` function syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '`h()` receives the following parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: A string representing a DOM element (`'div'`, for instance) or a Vue component.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The props to pass to the created component node, including native properties
    and attributes, such as `class`, `style`, and so on, and event listeners. This
    parameter is optional.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The array of children for the component or object of the slot functions. This
    parameter is also optional.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Instead of returning the object containing a static internal data state and
    using the `template` section, `setup()` will return a function that returns the
    component node created by the `h()` function based on the parameters received.
    In the following example, we render a `div` element containing a `"Hello World"`
    `message` in `blue`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'And the browser will output as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.1 – Hello World text in blue color](img/B18645_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.1 – Hello World text in blue color
  prefs: []
  type: TYPE_NORMAL
- en: In the next exercise, we will practice creating a static component with `setup()`
    and `h()` based on the props received.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 5.02 – creating a dynamic greeting component with the setup() and h()
    functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This exercise will create a component that renders a pre-defined greeting message
    depending on the props received, using `setup()` and `h()`.
  prefs: []
  type: TYPE_NORMAL
- en: To access the code file for this exercise, refer to [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter05/Exercise5.02](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter05/Exercise5.02).
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow the given steps to complete this exercise:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the application generated by `npm init vue@3` as a starting point, or within
    the root folder of the code repository, navigate into the `Chapter05/Exercise5.02`
    folder by using the following commands in order:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the exercise project in VS Code (by using the `code .` command within the
    project directory) or your preferred IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new file named `Greeting.vue` in the `./``src/components` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Start by scaffolding the component with empty `template` and `script` tags:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, define the acceptable props for `Greeting` using the `props` field, with
    two string props – `greeting` and `who` – as shown in the following code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We import the `h()` function from the `vue` package and implement `setup()`
    to return a render function that renders a `div` element that displays `greeting`
    and `who`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `src/App.vue` file and import the `Greeting` component from `./src/components/Greeting.vue`
    into the `script` section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can use `Greeting` in the template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the application using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You will see the following when visiting your app in the browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Within `setup()`, we want to check whether the parent passes the values for
    `greeting` or `who` or not:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Based on the result, we will render a `div` element that displays the full
    message if there are values for both `greeting` and `who`, or a `div` element
    displaying an error message – `"There is not enough information to display"` –
    in `red` otherwise:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the parent component (`App.vue`), let’s remove `greeting` value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The browser will now display the following message:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.2 – Error message when one of the props does not have value](img/B18645_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.2 – Error message when one of the props does not have value
  prefs: []
  type: TYPE_NORMAL
- en: That’s it. You have now learned how to combine `setup()` and `h()` to compose
    a dynamic component based on its props. Next, we will explore how we can use different
    Composition APIs, such as `ref()`, `reactive()`, and `computed()`, to create a
    reactive data state for our component.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: We will use `<script setup>` from now on for readability and code convenience.
  prefs: []
  type: TYPE_NORMAL
- en: Working with data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the Options API, we use the `data()` method to initialize a component’s local
    state. By default, all the data properties received from `data()` are reactive,
    which can be overkill in many scenarios. Vue has introduced the `ref()` and `reactive()`
    functions, which allow us to decide which local states should be reactive and
    which shouldn’t be.
  prefs: []
  type: TYPE_NORMAL
- en: Setting a reactive local state with ref()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`ref()` is a function that accepts a single input parameter as the reactive
    data’s initial value and returns a reference object for the created reactive data
    state. We call this reference object a `ref` object. To start using `ref()`, you
    first need to import it from the `vue` package.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, we can create a reactive data called `isLightOn`, which accepts
    `false` as its initial value as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `template` section, you can access the value of `isLightOn` in the same
    way as before, as shown in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: 'However, within the `<script setup>` section of the `setup()` method, if you
    want to access the value of `isLightOn`, you need to use `isLightOn.value` instead
    of direct access, like in `template`. In the following example, we will create
    a component’s method, `toggle`, that will output the value of `isLightOn` to the
    console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `template` section, let’s add a `button` element that triggers this
    method upon the user’s click:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'Upon the button being clicked, the console outputs the value of `isLightOn`,
    which has the initial value of `false`, as seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.3 – Console output of the light status](img/B18645_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.3 – Console output of the light status
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that here if you output `isLightOn` and not `isLightOn.value`, the console
    outputs the `ref` object created by Vue as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.4 – Console output of the ref object for isLightOn](img/B18645_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.4 – Console output of the ref object for isLightOn
  prefs: []
  type: TYPE_NORMAL
- en: '`isLightOn` is reactive and mutable, which means you can set its value directly
    using the `.value` field. We will modify the `toggle()` method to toggle the value
    of `isLightOn` instead. The code will become the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, whenever the user clicks on the `isLightOn` will update its value, and
    Vue will update the component accordingly, as seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.5 – Light status updates to true upon Toggle being clicked](img/B18645_05_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.5 – Light status updates to true upon Toggle being clicked
  prefs: []
  type: TYPE_NORMAL
- en: '`ref()` is generally sufficient to create a reactive state for any data types,
    including primitive (`boolean`, `number`, `string`, and so on) and object types.
    However, for an object type, using `ref()` means that Vue will make the desired
    data object and its nested properties reactive and mutable. For example, we declare
    a reactive object, `livingRoomLight`, with `ref()` as shown in the following code
    block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we add two methods, one to modify its single property – `status` – and
    the second to replace the whole object with a new one, as shown in the following
    code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `template` section, let’s display the details of `livingRoomLight`,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: 'When a user clicks on `lightRoomLight` now becomes the `Kitchen` light with
    different details, as shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.6 – Light name changed to Kitchen after clicking on Replace](img/B18645_05_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.6 – Light name changed to Kitchen after clicking on Replace
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, this mechanism of making the object and its nested properties
    reactive can lead to unwanted bugs and potential performance issues, especially
    for reactive objects with a complex hierarchy of nested properties.
  prefs: []
  type: TYPE_NORMAL
- en: In a scenario in which you only want to modify the whole object’s value (replacing
    it with a new object) but not its nested properties, we suggest you use `shallowRef()`.
    In a scenario in which you only need to modify the object’s nested properties
    (such as elements of an array object and each element’s fields), you should use
    `reactive()` instead. We will take a look at the `reactive()` function next.
  prefs: []
  type: TYPE_NORMAL
- en: Setting a reactive local state with reactive()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Like `ref()`, the `reactive()` function returns a reference to a reactive object
    based on the initial value passed to it. Unlike `ref()`, `reactive()` only accepts
    object-type input parameters and returns a reference object whose value can be
    accessed directly without needing a `.``value` field.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example shows how we define a reactive array of `books`, and
    a reactive book object, `newBook`, for the `BookList` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: 'In `template`, we define a `fieldset` element that contains several `input`
    fields, each bound to an area of the `newBook` data using `v-model`, and a `button`
    element, `Add`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: 'The browser will display the following layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.7 – Filling in the details of the new book before adding](img/B18645_05_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.7 – Filling in the details of the new book before adding
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to implement the `addBook` method, which will add a new book to the
    `books` list based on the information from `newBook` and clear up the properties
    of `newBook`, as in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: Note that here, we don’t push `newBook` directly to `books` but rather clone
    its properties to the new object using the spread literal, `…`, instead. `reactive()`
    only creates a proxy version of the original object passed to it. Hence, if you
    don’t clone `newBook` before adding it to `books`, any changes made to its properties
    later will also be reflected in the element added to the `books` list.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, after filling in a new book’s details, open your browser’s developer tools,
    and in the `setup` section, as shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.8 – The component’s setup section in Vue Devtools](img/B18645_05_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.8 – The component’s setup section in Vue Devtools
  prefs: []
  type: TYPE_NORMAL
- en: 'All the reactive data created with `reactive()` will have the `Reactive` text
    indicator (for `ref()`, it will be the `Ref` indicator). Once you click on the
    `books` array updated with the new values, while `newBook` is reset to its original
    value in Devtools, as shown in *Figure 5**.8*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.9 – How the array of books looks after adding a new book](img/B18645_05_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.9 – How the array of books looks after adding a new book
  prefs: []
  type: TYPE_NORMAL
- en: You can also use `shallowReactive()` to limit the reactivity mechanism to apply
    only to the root’s properties and not their descendants. By doing so, you can
    avoid performance issues caused by too many reactive fields within a complex data
    object.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, we have learned how to use `ref()` and `reactive()` to define
    reactive data depending on its type and use cases. Next, we are going to apply
    what we learned to write a reactive component using these two functions.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 5.03 – binding a component with ref() and reactive()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this exercise, you will use `ref()` to define a search box for blogs, and
    `reactive()` to define different reactive blog lists, in which you can favorite
    a blog.
  prefs: []
  type: TYPE_NORMAL
- en: To access the code for this exercise, refer to [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter05/Exercise5.03](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter05/Exercise5.03).
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to implement a component that receives the user’s first name and
    last name and accepts multi-lingual input, and displays the user’s full name and
    the number of languages received accordingly by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the application generated by `npm init vue@3` as a starting point, or within
    the root folder of the code repository, navigate into the `Chapter05/Exercise5.03`
    folder by using the following commands in order:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE91]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the exercise project in VS Code (by using the `code .` command within the
    project directory), or your preferred IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let’s create a new Vue component called `BlogGallery` by adding the `BlogGallery.vue`
    file to the `./``src/components/` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open `BlogGallery.vue` and let’s create the code block structure for the Vue
    component as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE93]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE94]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE95]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Within the `<script setup>` section, we define our reactive data – `searchTerm`
    – for the search input with an empty string as its initial value using `ref()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE97]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will define our reactive blog list – `blogs` – with each item containing
    `title`, `description`, `author`, and `isFavorite` fields as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE99]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE100]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE101]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE102]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE103]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE104]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE105]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE106]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE107]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE108]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE109]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE110]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE111]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE112]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE113]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE114]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE115]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE116]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE117]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE118]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE119]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE120]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE121]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE122]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE123]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE124]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE125]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE126]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE127]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE128]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `<template>` section, we will bind `searchTerm` to an input field with
    a `placeholder` element of `"Search by blog''s title"`, and a `label` element
    of `What are you searching for?`, as shown in the following code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE130]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE131]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE132]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE133]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE134]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE135]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE136]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we add a `<ul>` element, use `v-for` to iterate through `blogs`, and
    render a list of `<li>` elements. Each `<li>` element contains `<article>`, in
    which there is `<h3>` for the title, `<h4>` for the author’s name, `<p>` for description,
    and a `<button>` element for adding the blog to your favorites:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE137]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE138]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE139]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE140]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE141]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE142]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE143]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE144]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE145]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE146]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Navigate back to the `<script setup>` section, where we will add the implementation
    for a `toggleFavorite()` method, which receives `index` and toggles the `blogs[index].isFavorite`
    value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE147]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE148]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE149]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Go back to the `<template>` section. We will bind the `toggleFavorite()` method
    to the `button` element created and change its name according to the status of
    `isFavorite`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE150]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE151]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE152]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE153]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE154]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE155]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We need to filter the blogs according to `searchTerm`, so let’s add another
    method to return a sorted list – `getFilteredBlogs()` – which will produce a filtered
    array of blogs according to the blog titles, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE156]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE157]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE158]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE159]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE160]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE161]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE162]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, in the `template` section, replace `blogs` in the `v-for` iteration with
    `getFilteredBlogs()`, as seen in the following code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE163]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We need to add some basic CSS styling to make our component prettier, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE164]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE165]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE166]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE167]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE168]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE169]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE170]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE171]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE172]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE173]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE174]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE175]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE176]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE177]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE178]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE179]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE180]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, in `App.vue`, import the `BlogGallery` component into `<``script setup>`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE181]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE182]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE183]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Render `BlogGallery` in the `template` section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE184]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE185]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE186]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, run the application using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE187]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Go to the browser. You will see the list displayed and a search box with an
    empty value, as in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.10 – How BlogGallery looks in the browser](img/B18645_05_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.10 – How BlogGallery looks in the browser
  prefs: []
  type: TYPE_NORMAL
- en: 'When typing in a search term, the application will display the filtered list
    accordingly, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.11 – Only filtered blogs are displayed according to the user’s input](img/B18645_05_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.11 – Only filtered blogs are displayed according to the user’s input
  prefs: []
  type: TYPE_NORMAL
- en: With the preceding exercise, you have learned how to define reactive data for
    a component using `ref()` and `reactive()`.
  prefs: []
  type: TYPE_NORMAL
- en: In theory, you can use `ref()` and `reactive()` together to create new reactive
    data from other reactive data. However, we strongly recommend not doing so due
    to the performance complications of the wrapping/unwrapping reactivity mechanism
    in Vue. For this kind of scenario, you should use the `computed()` function, which
    we will explore next.
  prefs: []
  type: TYPE_NORMAL
- en: Computing a reactive state from another local state with computed()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Like `computed()` in the Options API, `computed()` is for creating new reactive
    data based on other reactive data for a component. It accepts a function that
    returns the reactive data value as its first parameter. It will return a read-only
    and cached reference object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE188]'
  prefs: []
  type: TYPE_PRE
- en: 'Unlike reference objects returned from `reactive()` and `ref()`, we can’t directly
    reassign their value. In the following example, we will compute a filtered version
    of a given `books` array using `computed()`, according to the matching term, `vue`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE189]'
  prefs: []
  type: TYPE_PRE
- en: 'And in `template`, we will display `filteredBooks` using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE190]'
  prefs: []
  type: TYPE_PRE
- en: 'In the browser, you will see only three books displayed as shown in the following
    figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.12 – List of books filtered by the vue term](img/B18645_05_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.12 – List of books filtered by the vue term
  prefs: []
  type: TYPE_NORMAL
- en: 'Whenever there is any change to the `books` list or the search term used for
    filtering, Vue automatically updates and caches the value calculated for `filteredBooks`
    for display accordingly. In the `filteredBooks` displayed as part of the `setup`
    section, with the `Computed` text indicator as shown in *Figure 5**.12*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.13 – How filteredBooks looks in the Vue tab](img/B18645_05_13.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.13 – How filteredBooks looks in the Vue tab
  prefs: []
  type: TYPE_NORMAL
- en: Generally, `computed()` works in the same way as the `compute` properties in
    the Options API ([*Chapter 2*](B18645_02.xhtml#_idTextAnchor074), *Working with
    Data*). Computed data is a valuable Vue feature that allows developers to create
    reusable and readable code. You can also make the computed data writable by passing
    an object with a setter and getter to `computed()` instead of a function. However,
    we do not recommend doing so as general good Vue practice.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will practice implementing complex computed data for a Vue component
    using `computed()`.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 5.04 – implementing computed data with computed()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this exercise, you will use `computed()` to define the complex reactive data
    based on the existing one.
  prefs: []
  type: TYPE_NORMAL
- en: To access the code for this exercise, refer to [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter05/Exercise5.04](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter05/Exercise5.04).
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to implement a component that receives the user’s first name and
    last name and accepts multi-lingual input and displays the user’s full name and
    the number of languages received accordingly by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the application generated by `npm init vue@3` as a starting point, or within
    the root folder of the code repository, navigate into the `Chapter05/Exercise5.04`
    folder by using the following commands in order:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE191]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE192]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the exercise project in VS Code (by using the `code .` command within the
    project directory) or your preferred IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let’s create a new Vue component called `UserInput` by adding the `UserInput.vue`
    file to the `./``src/components/` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open `UserInput.vue` and let create the code block structure for the Vue component,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE193]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE194]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE195]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE196]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE197]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE198]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `<template>`, create an `input` field for the first name, and use `v-model`
    to bind `firstName` to this field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE199]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a second input field for the last name, and use `v-model` to bind the
    `lastName` data prop to this field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE200]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create another input field for languages, only we will bind the *Enter keyup*
    event to a method called `addToLanguageList` this time, as shown in the following
    code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE201]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE202]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE203]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `<script setup>`, define `lastName`, `firstName`, and `languages` as reactive
    using `ref()` and `reactive()`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE204]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE205]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE206]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE207]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE208]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE209]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, declare the `addToLanguageList` method, which receives an event and adds
    the event target’s value to the language list if it is not empty:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE210]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE211]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE212]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE213]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE214]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Import `computed()` from the `vue` package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE215]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a computed data variable called `fullName`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE216]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE217]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE218]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, create another computed variable called `numberOfLanguages`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE219]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Underneath your `input` fields, output the computed data using the `h3` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE220]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add another `<p>` element, which will display the number of languages next
    to the list of languages received, as shown in the following code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE221]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE222]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE223]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE224]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We also add some basic scoped CSS styles to make the component prettier:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE225]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE226]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE227]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE228]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE229]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE230]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE231]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE232]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE233]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE234]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE235]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE236]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE237]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE238]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, run the application using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE239]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Upon visiting `http://localhost:3000` in the browser and keying in `Maya` for
    the first name, `Shavin` for the last name, and adding several languages (JavaScript,
    C++, and so on), the page will generate the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.14 – Output of the computed data will show the full name and list
    of languages](img/B18645_05_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.14 – Output of the computed data will show the full name and list of
    languages
  prefs: []
  type: TYPE_NORMAL
- en: This exercise demonstrates how we can use `computed()` to define combined reactive
    data properties such as the first name and last name into a single output variable
    with `fullName` and calculate the number of languages reactively, which can be
    reused within the component.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will learn about using the `watch()` function from the Composition
    API to define our watchers.
  prefs: []
  type: TYPE_NORMAL
- en: Using watchers with watch()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In [*Chapter 2*](B18645_02.xhtml#_idTextAnchor074), *Working with Data*, we
    learned about watchers and how to enable watchers on data properties with the
    `watch` property from the Options API. The Composition API introduces the `watch()`
    function with the same context and slightly different syntax, as shown in the
    following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE240]'
  prefs: []
  type: TYPE_PRE
- en: '`watch()` accepts three parameters, including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`source` as a single target data object or getter function (which returns the
    data’s value) to watch, or an array of targets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`handler` is the function that Vue executes whenever `source` changes. The
    handler function receives `newValue` and `oldValue` as its source’s next value
    and previous value respectively. It also accepts the third argument as its side-effect
    cleanup method. Vue will trigger this clean-up function before the next handler
    is invoked – if any are.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`options` are the additional configurations for the watcher, including the
    following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Two `boolean` flags: `deep` (whether Vue should watch over the nested properties
    of the source) and `immediate` (whether to invoke the handler immediately after
    the component is mounted).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`flush` as the execution order for the handler (`pre`, `post`, or `sync`).
    By default, Vue executes the handler in the `pre` order (before updating).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Two debugging callbacks, `onTrack` and `onTrigger`, for development mode.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following example demonstrates how we can add a watcher manually to `searchTerm`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE241]'
  prefs: []
  type: TYPE_PRE
- en: 'Vue will passively observe the changes in `searchTerm` and invoke the handler
    of `searchTermWatcher` accordingly. In the browser’s console log, you will see
    the following records when changing the value of `searchTerm` in the input field:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.15 – The output logs whenever searchTerm changes in value](img/B18645_05_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.15 – The output logs whenever searchTerm changes in value
  prefs: []
  type: TYPE_NORMAL
- en: 'Unlike the `watch` property from the Options API, the `watch()` method returns
    a stopper function to stop the watcher whenever you no longer need to observe
    the target data. Also, in a scenario in which you explicitly wish to watch a nested
    data property, you can define the target source as a getter function that returns
    that specific data property. For example, if you wanted to watch the `description`
    property of a `book` data object, you would need the following code using the
    `watch` property from the Options API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE242]'
  prefs: []
  type: TYPE_PRE
- en: 'With `watch()`, you only need to set a getter that returns `book.description`
    instead, as shown in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE243]'
  prefs: []
  type: TYPE_PRE
- en: By specifying the exact target data that you want to observe, Vue will not trigger
    the watcher’s handler on the whole data object, avoiding undesired performance
    overhead.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s practice using a watcher in the next exercise.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 5.05 – using watchers to set new values
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this exercise, you will use watcher arguments to watch for changes to data
    properties, and then use this watcher to set variables via a method.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the complete code for this exercise at [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter05/Exercise5.05](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter05/Exercise5.05).
  prefs: []
  type: TYPE_NORMAL
- en: 'We create a Vue component that displays the shop watcher’s price before and
    after the discount, with an option to update the discount price, by following
    the given instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the application generated by `npm init vue@3` as a starting point, or within
    the root folder of the code repository, navigate into the `Chapter05/Exercise5.05`
    folder by using the following commands in order:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE244]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE245]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the exercise project in VS Code (by using the `code .` command within the
    project directory), or your preferred IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let’s create a new Vue component called `PizzaItem` by adding the `PizzaItem.vue`
    file to the `./``src/components/` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open `PizzaItem.vue` and let’s create the code block structure for the Vue
    component, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE246]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE247]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE248]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE249]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE250]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE251]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set up the document by adding `discount`, `pizza`, and `newPrice` objects:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE252]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE253]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE254]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE255]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE256]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE257]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We want to listen for changes to the `discount` property by using the `watch()`
    function imported from the `vue` package. Upon `discount` changing, we manually
    recalculate the value for `newPrice` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE258]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE259]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE260]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE261]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE262]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE263]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE264]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE265]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE266]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE267]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Notice that here, we set `immediate` to `true` so that Vue triggers this handler
    immediately after mounting the component and updates `newPrice` with the correct
    value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let’s add a component method called `updateDiscount`. Inside the method,
    set the `oldDiscount` data prop to `this.discount +` `5`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE268]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE269]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE270]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `template` section, we will display `pizza.name`, `discount`, the old
    price, and the new price for the pizza after `discount` has been applied, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE271]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE272]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE273]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE274]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE275]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE276]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE277]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE278]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE279]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE280]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, bind the `updateDiscount` method to a `button` element using `@click`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE281]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE282]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE283]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Whenever a user clicks on the preceding button, Vue will trigger `updateDiscount()`
    to increase the `discount` value, hence invoking the handler to update the `newPrice`
    value accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s add some CSS styling to make it pretty:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE284]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE285]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE286]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE287]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE288]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE289]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE290]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE291]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE292]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE293]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE294]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE295]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE296]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE297]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE298]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE299]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE300]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE301]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE302]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE303]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE304]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE305]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE306]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE307]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE308]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE309]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `App.vue`, import the component into `<setup script>` and render it in `template`
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE310]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE311]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE312]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE313]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE314]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE315]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, run the application using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE316]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Upon visiting `http://localhost:3000` in the browser, the output of the preceding
    command will be as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.16 – An example output of the pizza sales](img/B18645_05_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.16 – An example output of the pizza sales
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s add a watcher explicitly for the `pizza.price` field, and perform
    the same recalculation of `newPrice`, as shown in the following code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE317]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE318]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE319]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE320]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE321]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE322]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE323]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We also add another method called `increasePrice()` to increase the pizza’s
    price whenever triggered:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE324]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE325]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE326]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `template` section, we add another button to allow users to click to
    increase the pizza’s price, hence updating the new discounted price accordingly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE327]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE328]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE329]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `style` section, we also add a different `background` color for the
    preceding button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE330]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE331]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE332]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Navigate back to the main browser’s screen, and now you will see the updated
    layout with an additional button, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.17 – Pizza sales with the option to modify the price](img/B18645_05_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.17 – Pizza sales with the option to modify the price
  prefs: []
  type: TYPE_NORMAL
- en: 'Upon clicking on the **Increase the price!** button, you will see the price
    and the discounted price change, as in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.18 – The prices changed after clicking on the Increase the price!
    button](img/B18645_05_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.18 – The prices changed after clicking on the Increase the price! button
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, we explored how we can use `watch()` within `<script setup>`
    to dynamically observe and manipulate data when changes are applied.
  prefs: []
  type: TYPE_NORMAL
- en: The next section will explore how we can use the lifecycle functions from the
    Composition API to set up the lifecycle hooks.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding composable lifecycle functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [*Chapter 1*](B18645_01.xhtml#_idTextAnchor015), *Starting* *Your First Vue
    Project*, we learned about the component’s lifecycle and its available hooks in
    Vue’s Options API. In the Composition API, these lifecycle hooks are now available
    as standalone functions and need to be imported from the `vue` package before
    use.
  prefs: []
  type: TYPE_NORMAL
- en: Generally, the lifecycle functions in the Composition API are similar to the
    ones from the Options API, with a prefix of `on`. For example, `beforeMount()`
    in the Options API is `onBeforeMount()` in the Composition API, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the list of available lifecycle functions from the Composition
    API, ready to use within the `setup()` method or `<``script setup>`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`onBeforeMount()`: Before the first render of the component'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onMounted()`: After rendering and mounting the component to the DOM'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onBeforeUpdate()`: After starting the component’s update process, but before
    the actual rendering of the updated component'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onUpdated()`: After rendering the updated component'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onBeforeMount()`: Before the process of unmounting the component starts'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onUnmounted()`: After the component’s instance has been destroyed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since we use `setup()` or `<script setup>` to define the component’s data and
    internal logic in combination with other Composition API, there is no need for
    equivalent versions of `created()` and `beforeCreate()` from the Options API.
  prefs: []
  type: TYPE_NORMAL
- en: All the lifecycle methods from the Composition API receive a callback function
    as their arguments. Vue will invoke this callback function whenever applied.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s do an exercise to learn how to use these lifecycle methods in your Vue
    component.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 5.06 – using the lifecycle functions to control the data flow
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this exercise, we will learn how and when to use Vue’s lifecycle hooks, and
    when they are triggered by using JavaScript alerts. By the end of the exercise,
    we will understand and be able to use multiple lifecycle functions from the Composition
    API.
  prefs: []
  type: TYPE_NORMAL
- en: To access the code file for this exercise, refer to [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter05/Exercise5.06](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter05/Exercise5.06).
  prefs: []
  type: TYPE_NORMAL
- en: 'We will build a list of different elements, demonstrating how to add different
    quantities to a cart. Then, we will display the updated cart’s total value in
    a currency format by performing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the application generated by `npm init vue@3` as a starting point, or within
    the root folder of the code repository, navigate into the `Chapter05/Exercise5.06`
    folder by using the following commands in order:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE333]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE334]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the application using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE335]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the exercise project in VS Code (by using the `code .` command within the
    project directory) or your preferred IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new Vue component file named `Exercise5-06.vue` under the `src/components`
    directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside `Exercise5-06.vue`, we will start by creating an array of data to iterate
    through in a `list` element, set the key to `n`, and output the value, `{{item}}`,
    inside of the `<li>` element using curly braces:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE336]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE337]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE338]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE339]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE340]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE341]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE342]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE343]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE344]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE345]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE346]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE347]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE348]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE349]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE350]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE351]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE352]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE353]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE354]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE355]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE356]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE357]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Import all the lifecycle functions from the `vue` package, as shown in the
    following code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE358]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE359]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE360]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE361]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE362]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE363]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE364]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE365]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE366]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define the callbacks for `onBeforeMount()` and `onMounted()` to trigger an
    alert displaying the relevant message:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE367]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE368]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE369]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE370]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE371]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE372]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When you refresh your browser, you should also see these alerts before you
    see your list load on the page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.19 – Observing the onBeforeMount() hook alert](img/B18645_05_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.19 – Observing the onBeforeMount() hook alert
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot displays the `onMounted()` hook alert after the `onBeforeMount()`
    hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.20 – Observing the onMounted() hook alert after the onBeforeMount()
    hook](img/B18645_05_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.20 – Observing the onMounted() hook alert after the onBeforeMount()
    hook
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a new `button` element inside your `<li>` element that renders the `item`
    output. Use a `@click` directive to bind this button to a method called `deleteItem`
    and pass the `item` value as an argument:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE373]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE374]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE375]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE376]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE377]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE378]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE379]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE380]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE381]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE382]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE383]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE384]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a method called `deleteItem` into a `methods` object above your hooks to
    pass `value` as an argument and filter out items from the `list` array based on
    this value. Then, replace the existing list with the new list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE385]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE386]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE387]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE388]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add `onBeforeUpdate()` and `onUpdated()` and set an alert inside them:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE389]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE390]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE391]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE392]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE393]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE394]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE395]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE396]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE397]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE398]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When you delete a list item by clicking on the `onBeforeUpdated()` will trigger
    the handler:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.21 – onBeforeCreated is called first after clicking on any Delete
    button](img/B18645_05_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.21 – onBeforeCreated is called first after clicking on any Delete button
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, `onUpdated` is triggered as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.22 – onUpdated is called when the Vue engine finishes updating the
    component](img/B18645_05_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.22 – onUpdated is called when the Vue engine finishes updating the
    component
  prefs: []
  type: TYPE_NORMAL
- en: 'Continue adding `onBeforeUnmount()` and `onUnmounted()` to the component options
    as function properties. Set an alert inside these hooks so that you can see when
    they are triggered:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE399]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE400]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE401]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE402]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE403]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE404]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE405]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE406]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a new string to your `list` array – for example, `testing` `unmounted hooks`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE407]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE408]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE409]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE410]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE411]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE412]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE413]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE414]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE415]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE416]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE417]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should see the unmount alerts according to this order: `onBeforeUnmount`
    – `onBeforeMount` – `onUnmounted` – `onMounted`. An example output screen displaying
    an alert for `onBeforeUnmount` is shown in the following figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.23 – Alert displaying when a component is about to be unmounted](img/B18645_05_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.23 – Alert displaying when a component is about to be unmounted
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will discuss how we can use the available methods from the Composition
    API and create our custom composable (or custom hook) to control the state of
    the component dynamically.
  prefs: []
  type: TYPE_NORMAL
- en: Creating your composable (custom hook)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In many scenarios, we want to group some components’ logic into reusable code
    blocks for other components that share similar functionalities. In Vue 2.x, we
    use mixins to achieve this goal. However, mixins are not the best practical solution,
    and they can create code complexity due to the order of merging and invoking overlapping
    data and lifecycle hooks.
  prefs: []
  type: TYPE_NORMAL
- en: Starting from Vue 3.0, you can use the Composition API to divide the common
    data logic into small and isolated composables, using them to create a scoped
    data control in different components and return the created data if there is any.
    A composable is a regular JavaScript function that uses Composition API methods
    and performs data state management internally.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started, we create a new JavaScript (`.js`) file, which exports a function
    acting as the composable. In the following example, we create a `useMessages`
    composable, which returns a list of `messages` and some methods to modify the
    messages accordingly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE418]'
  prefs: []
  type: TYPE_PRE
- en: 'To use `useMessages()` in your component, you can import it into the component’s
    `<script setup>` section, and retrieve the relevant data, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE419]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we can use `messages`, `deleteMessage` and `addMessage` returned from
    the composable in the component as its local data and methods, as shown in the
    following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE420]'
  prefs: []
  type: TYPE_PRE
- en: Since `messages`, `deleteMessage`, and `addMessage` are declared within the
    `useMessages()` function, every execution of `useMessages` returns different data
    instances, keeping the reactive data defined by the composable isolated and relevant
    only to the component that consumes it. With composables, components share logic,
    not data. You can also compose a new composable based on another composable, not
    only the Composition API.
  prefs: []
  type: TYPE_NORMAL
- en: That’s it – you have learned how to create a simple composable with the Composition
    API. Next, let’s apply what we learned so far about the Composition API and create
    our first composable.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 5.07 – creating your first composable
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this exercise, you will create a composable that will retrieve data from
    an external API, and return the data, the loading/error status of the request,
    and a search composable that we can reuse for different components.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the complete code for this exercise on [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter05/Exercise5.07](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter05/Exercise5.07).
  prefs: []
  type: TYPE_NORMAL
- en: 'We will create a composable that fetches movies from an external source and
    another one that allows you to search through the list of movies by following
    the given instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the application generated by `npm init vue@3` as a starting point, or within
    the root folder of the code repository, navigate into the `Chapter05/Exercise5.07`
    folder by using the following commands in order:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE421]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE422]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the exercise project in VS Code (by using the `code .` command within the
    project directory), or your preferred IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let’s create a new composable called `useMovies` by adding `useMovies.js` to
    the `./``src/composables` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Within `useMovies.js`, we will add the following code to export the composable
    as a module for use in other files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE423]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE424]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE425]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE426]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We define the reactive data for the composable, such as `movies`, `isLoading`,
    and `error`, using `ref()` with the appropriate initial values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE427]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE428]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE429]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE430]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE431]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE432]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE433]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we will import the `onBeforeMount()` method and start fetching the movies
    from `https://swapi/dev/api/films` using the `fetch()` method, as shown in the
    following code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE434]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE435]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE436]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE437]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE438]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE439]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE440]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE441]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE442]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE443]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE444]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE445]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE446]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE447]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE448]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE449]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE450]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE451]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We also need to reset the `isLoading` value to indicate the fetching status
    and assign the value to `error` if any error has occurred:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE452]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE453]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE454]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE455]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE456]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE457]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE458]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE459]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE460]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE461]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE462]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We return the reactive data so that other Vue components can use it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE463]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE464]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE465]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE466]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE467]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE468]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE469]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE470]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, create a new Vue component called `Movies` by adding the `Movies.vue`
    file to the `./src/components/` folder with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE471]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE472]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE473]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE474]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `script` section, we will import `useMovies` and use its return data
    – `movies`, `isLoading`, and `error`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE475]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE476]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE477]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE478]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `template` section, we will display the loading state, error state,
    and the list of movies according to the statuses of `isLoading` and `error` using
    `v-if`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE479]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE480]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE481]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE482]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE483]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE484]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE485]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE486]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE487]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE488]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE489]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE490]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE491]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE492]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE493]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE494]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE495]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE496]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE497]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE498]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE499]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE500]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Navigate to the browser and you will see the following output when the component
    loads the movies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.24 – The loading state when fetching movies](img/B18645_05_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.24 – The loading state when fetching movies
  prefs: []
  type: TYPE_NORMAL
- en: 'After the component finishes fetching them, Vue automatically updates the view
    to display the list of movies, as shown in the following figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.25 – The list of movies after fetching happens successfully](img/B18645_05_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.25 – The list of movies after fetching happens successfully
  prefs: []
  type: TYPE_NORMAL
- en: 'If an error is encountered, the component displays an error state, as shown
    in the following example output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.26 – Error state during fetching](img/B18645_05_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.26 – Error state during fetching
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will add another composable that gives the component the ability to
    search – `useSearch()` in `./src/composables/useSearch.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This `useSearch()` composable receives a list of `items`, and a list of filters
    available for filtering with the default filter, `title`. The composable returns
    `searchTerm` for storing the input for searching, and the filtered array of items:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE501]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE502]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE503]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE504]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE505]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE506]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE507]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE508]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE509]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE510]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE511]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE512]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE513]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE514]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE515]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE516]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE517]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Go back to `Movies.vue`. In the `script` section, we import `useSearch` and
    execute it to get `searchTerm` and filtered array of `filteredMovies` to use in
    our component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE518]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE519]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE520]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE521]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE522]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE523]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE524]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE525]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `template` section, we add an input field that binds to `searchTerm`
    using `v-model` and replaces `movies` in the `v-for` iteration with `filteredMovies`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE526]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE527]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE528]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE529]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE530]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE531]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE532]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE533]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE534]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE535]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE536]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE537]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE538]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Navigate back to the browser. Now, you can load the movie list and start searching
    for the movie by title, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.27 – Filtered movies by titles containing the word hope](img/B18645_05_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.27 – Filtered movies by titles containing the word hope
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, you can extend the search composable created to support a list
    of filters as input selection from the users, or re-format the fields of received
    movies to be friendlier for your application. In this exercise, we observed how
    we can create standalone and reusable logic for different use cases in a component
    with the Composition API, such as the ability to search. We also see how composables
    make our code cleaner and more organized.
  prefs: []
  type: TYPE_NORMAL
- en: Activity 5.01 – creating a BlogView component with the Composition API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To access the code file for this activity, refer to [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter05/Activity5.01](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter05/Activity5.01)
  prefs: []
  type: TYPE_NORMAL
- en: This activity aims to leverage your knowledge in combining different Composition
    APIs with components’ props and events to create a view in which the user can
    see a list of blogs and add or remove any blog item.
  prefs: []
  type: TYPE_NORMAL
- en: This activity will require the use of a headless CMS, Contentful. The access
    keys and endpoints are listed in the solution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to complete this activity:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new Vue project with Vite.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install the `contentful` dependency into your project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create another composable, `useListAction`, which receives a list of `items`,
    and returns the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`addItem`: Adds a new item to the given list'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`deleteItem`: Deletes an item based on its ID'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a `useBlogs` composable, which will fetch `blogs` from Contentful and
    use `useListActions()` to get the actions for the fetched `blogs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Define `useBlogs` to return the `blogs` list, a `loading` status, an `error`
    for the fetch status, and the `addItem` and `deleteItem` actions received from
    `useListActions`. The returned `blogs` should be an array of blog items with the
    following fields: `title`, `description`, `heroImage`, `publishDate`, and `id`
    (a slug).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `useSearch` composable, which receives a list of `items`, and returns
    the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`searchTerm`: The search value.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`filters`: A list of fields to filter based on the user’s choice. By default,
    it’s `title`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`filteredItems`: The filtered list of the given items.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a `BlogEditor` component that displays several `input` fields for the
    `title` field, the author’s name, the blog’s `id` field, `textarea` for the blog’s
    content, and a `button` element for saving the blog. When this button is clicked,
    `BlogEditor` emits an `addNewItem` event with the new blog’s details as the payload
    and resets the fields.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a `Blogs` component that receives a list of `blogs`, an `isLoading` flag,
    and an `error` object as its props and then renders the state of the component
    according to `isLoading` and `error` and the details of each blog item on the
    UI when applicable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In `Blogs`, use `useSearch()` on the list of `blogs` received as props and display
    a search `input` field to allow users to filter the blogs according to `title`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Replace the original list iterations with the filtered list of blogs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We then add `fieldset` containing two `input` fields of the `checkbox` type,
    each binding to the array of `filters`. The two `input` fields will also have
    corresponding labels of `title` and `description` respectively.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a `button` element to each row of the blog rendered in the blog list, with
    a **Remove** label.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Also, define an `emit` event, `deleteBlog`, for `Blogs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On clicking on the `deleteBlog` event with the `id` value of the blog item as
    its payload.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a `BlogView` component that renders `BlogEditor` and `Blogs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In `BlogView`, create a toggle flag, `showEditor`, which will display `BlogEditor`
    if `true`. Otherwise, the component will display an `showEditor` value when clicked
    on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`BlogView` will use `useBlogs()` and pass the data received from this composable
    (`blogs`, `isLoading`, `error,` and `deleteItem`) as props and events to `Blogs`.
    You should bind `deleteItem` to the `deleteBlog` custom event of `Blogs`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`BlogView` also binds the `addItem` method returned from `useBlogs()` to the
    `addNewItem` event of `BlogEditor`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add some CSS styling to the components accordingly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The expected outcome is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.28 – Output when there aren’t blogs to display and the user hasn’t
    clicked on Add new blog](img/B18645_05_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.28 – Output when there aren’t blogs to display and the user hasn’t
    clicked on Add new blog
  prefs: []
  type: TYPE_NORMAL
- en: 'When a user clicks on **Add new blog**, the editor will appear as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.29 – Blog editor in action](img/B18645_05_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.29 – Blog editor in action
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout this chapter, we learned about composing components using the Composition
    API and the `setup()` lifecycle hooks (or `<script setup>`) as an alternative
    to the Options API. We also learned how to use different Composition functions
    to create watchers and lifecycle callbacks to control our components’ local states.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we learned how to create our custom composable function based on the
    Composition API and other composables, making our components more organized and
    readable in groups of similar logic.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will explore how we can create global components using
    plugins and mixins and compose dynamic components.
  prefs: []
  type: TYPE_NORMAL
