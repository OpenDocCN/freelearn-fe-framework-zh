- en: Styles - Applying Styles to Components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you''ll learn about the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Basic component styles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scoped component styles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extending component styles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Moving styles to themes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other styling options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The majority of styles that are applied to **Material-UI** components are part
    of the theme styles. In some cases, you need the ability to style individual components
    without changing the theme. For example, a button in one feature might need a
    specific style applied to it that shouldn't change every other button in the app.
    Material-UI provides several ways to apply custom styles to components as a whole,
    or to specific parts of components.
  prefs: []
  type: TYPE_NORMAL
- en: Basic component styles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Material uses **JavaScript Style Sheets** (**JSS**) to style its components.
    You can apply your own JSS using the utilities provided by Material-UI.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `withStyles()` function is a higher-order function that takes a style object
    as an argument. The function that it returns takes the component to style as an
    argument. Here''s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what this component looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ddf2a5c8-d5af-4772-af49-732af579ecdb.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s take a closer look at the `styles` defined by this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The `styles` that you pass to `withStyles()` can be either a plain object or
    a function that returns a plain object, as is the case with this example. The
    benefit of using a function is that the `theme` values are passed to the function
    as an argument, in case your `styles` need access to the `theme` values. There
    are two styles defined in this example: `card` and `cardActions`. You can think
    of these as **Cascading Style Sheets** (**CSS**) classes. Here''s what these two
    styles would look like as CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'By calling `withStyles(styles)(MyComponent)`, you''re returning a new component
    that has a `classes` property. This object has all of the classes that you can
    apply to components now. You can''t just do something such as this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: When you define your `styles`, they have their own build process and every class
    ends up getting its own generated name. This generated name is what you'll find
    in the classes object, so this is why you would want to use it.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Instead of working with higher-order functions that return new components,
    you can leverage Material-UI style hooks. This example already relies on the `useState()`
    hook from React, so using another hook in the component feels like a natural extension
    of the same pattern that is already in place. Here''s what the example looks like
    when refactored to take advantage of the `makeStyles()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The `useStyles()` hook is built using the `makeStyles()` function—which takes
    the exact same `styles` argument as `withStyles()`. By calling `useStyles()` within
    the component, you have your classes object. Another important thing to point
    out is that `makeStyles` is imported from `@material-ui/styles`, not `@material-ui/core/styles`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Material-UI CSS in JS documentation: [https://material-ui.com/css-in-js/basics/](https://material-ui.com/css-in-js/basics/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scoped component styles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most Material-UI components have a CSS API that is specific to the component.
    This means that instead of having to assign a class name to the `className` property
    for every component that you need to customize, you can target specific aspects
    of the component that you want to change. Material-UI has laid the foundation
    for scoping component styles; you just need to leverage the APIs.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s say that you have the following style customizations that you want to
    apply to the `Button` components used throughout your application:'
  prefs: []
  type: TYPE_NORMAL
- en: Every button needs a margin by default.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Every button that uses the `contained` variant should have additional top and
    bottom padding.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Every button that uses the `contained` variant and the primary color should
    have additional top and bottom padding, as well as additional left and right padding.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here''s an example that shows how to use the `Button` CSS API to target these
    three different `Button` types with `styles`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what the three rendered buttons look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9ff32b1e-8808-4bc6-8646-0cb9dffdbfa6.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `Button` CSS API takes named styles and applies them to the component. These
    same names are used in the styles in this code. For example, `root` applies to
    every `Button` component, whereas `contained` only applies the styles to the `Button`
    components that use the `contained` variant and the `containedPrimary` style only
    applies to `Button` components that use the `contained` variant and the `primary`
    color.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Each style is destructured from the classes property, then applied to the appropriate
    `Button` component. However, you don''t actually need to do all of this work.
    Since the Material-UI CSS API takes care of applying `styles` to components in
    a way that matches what you''re actually targeting, you can just pass the classes
    directly to the buttons and get the same result. Here''s a simplified version
    of this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The output looks the same because only buttons that match the constraints of
    the CSS API get the styles applied to them. For example, the first `Button` has
    the `root`, `contained`, and `containedPrimary` styles passed to the classes property,
    but only `root` is applied because it isn't using the `contained` variant of the
    `primary` color. The second `Button` also has all three styles passed to it, but
    only `root` and `contained` are applied. The third `Button` has all three styles
    applied to it because it meets the criteria of each style.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Material-UI style override documentation: [https://material-ui.com/customization/overrides/](https://material-ui.com/customization/overrides/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extending component styles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can extend `styles` that you apply to one component with `styles` that you
    apply to another component. Since your `styles` are JavaScript objects, one option
    is to extend one style object with another. The only problem with this approach
    is that you end up with a lot of duplicate `styles` properties in the CSS output.
    A better alternative is to use the `jss` extend plugin.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s say that you want to render three buttons and share some of the `styles`
    among them. One approach is to extend generic `styles` with more specific `styles`
    using the `jss` extend plugin. Here''s how to do it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what the rendered buttons look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/40a18103-6747-4ac2-ab1c-f85ffbd91e7f.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The easiest way to use the `jss` extend plugin in your Material-UI application
    is to use the default JSS plugin presets, which includes `jss` extend. Material-UI
    has several JSS plugins installed by default, but `jss` extend isn''t one of them.
    Let''s take a look at the `App` component in this example to see how this JSS
    plugin is made available:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The `JssProvider` component is how JSS is enabled in Material-UI applications.
    Normally, you wouldn't have to interface with it directly, but this is necessary
    when adding a new JSS plugin. The `jss` property takes the JSS preset object that
    includes the `jss extend` plugin. The `generateClassName` property takes a function
    from Material-UI that helps generate class names that are specific to Material-UI.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let''s take a closer look at some `styles`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The `extend` property takes the name of a style that you want to extend. In
    this case, the `contained` style extends `root`. The `containedPrimary` extends
    `contained` and `root`. Now let''s take a look at how this translates into CSS.
    Here''s what the `root` style looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, here''s the `contained` style:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, here''s the `containedPrimary` style:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Note that the properties from the more-generic properties are included in the
    more-specific styles. There are some properties duplicated, but this is in CSS,
    instead of having to duplicate JavaScript object properties. Furthermore, you
    could put these extended `styles` in a more central location in your code base,
    so that multiple components could use them.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Material-UI JSS documentation: [https://material-ui.com/customization/css-in-js/](https://material-ui.com/customization/css-in-js/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Moving styles to themes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you develop your Material-UI application, you'll start to notice style patterns
    that repeat themselves. In particular, styles that apply to one type of component,
    such as buttons, evolve into a theme.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s revisit the example from the *Scoped component styles* section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what these buttons look like after they have these styles applied to
    them:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b67dffd6-dbc1-4f24-8d48-7ef9f1772bb8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s say you''ve implemented these same styles in several places throughout
    your app because this is how you want your buttons to look. At this point, you''ve
    evolved a simple component customization into a theme. When this happens, you
    shouldn''t have to keep implementing the same styles over and over again. Instead,
    the styles should be applied automatically by using the correct component and
    the correct property values. Let''s move these styles into `theme`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Now, you can use `Button` components without having to apply the same styles
    every time.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s take a closer look at how your styles fit into a Material-UI theme:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The `overrides` property is an object that allows you to override component-specific
    properties of the theme. In this case, it's the `MuiButton` component styles that
    you want to override. Within `MuiButton`, you have the same CSS API that is used
    to target specific aspects of components. This makes moving your `styles` into
    the `theme` straightforward, because there isn't much to change.
  prefs: []
  type: TYPE_NORMAL
- en: One thing that did have to change in this example is the way spacing works.
    In normal `styles` that are applied via `withStyles()`, you have access to the
    current theme because it's passed in as an argument. You still need access to
    the spacing data, but there's no `theme` argument because you're not in a function.
    Since you're just extending the default `theme`, you can access it by calling
    `createMuiTheme()` without any arguments, as this example shows.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Material-UI style overrides documentation: [https://material-ui.com/customization/overrides/](https://material-ui.com/customization/overrides/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other styling options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are other styling options available to your Material-UI app beyond `withStyles()`.
    There's the `styled()` higher-order component function that emulates styled components.
    You can also jump outside the Material-UI style system and use inline CSS styles
    or import CSS modules and apply those styles.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here''s a modified version of the *Scoped component styles* example that showcases
    a few of the alternative style mechanisms available to you in your Material-UI
    applications:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first button uses inline CSS properties, expressed as a plain JavaScript
    object and passed to the `style` property of the `Button` component. The second
    `Button` uses the `styled()` function to build a `MyStyledButton` component. This
    function works in much the same way as `withStyles`, the main difference being
    that its signature is geared toward people used to the styled-component's approach
    to styling components.
  prefs: []
  type: TYPE_NORMAL
- en: 'The third `button` uses a style from an imported CSS module. Here''s what the
    module looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Be careful with CSS modules and inline styles. These approaches work fine, but
    since they're not tightly integrated with the Material-UI styling and theming
    mechanisms, they require more work to ensure that your styles fit with the rest
    of the Material-UI components.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Material-UI style overrides documentation: [https://material-ui.com/customization/overrides/](https://material-ui.com/customization/overrides/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Material-UI JSS documentation: [https://material-ui.com/css-in-js/api/](https://material-ui.com/css-in-js/api/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
