["```js\n    npx create-react-app .\n    ```", "```js\n    @reach/router package within the project.\n    ```", "```js\n    import { Router, Link } from \"@reach/router\";\n    const Nav = () => (\n      <nav>\n        <Link to=\"/\">Homepage</Link> | <Link\n          to=\"about\">About Me</Link>\n      </nav>\n    );\n    {/* Code continued in next step */}\n    ```", "```js\n    const HomePage = () => (\n      <div>\n        <Nav />\n        <h1>Homepage</h1>\n      </div>\n    );\n    const AboutPage = () => (\n      <div>\n        <Nav />\n        <h1>About Me</h1>\n      </div>\n    );\n    {/* Code continued in next step */}\n    ```", "```js\n    function App() {\n      return (\n        <Router>\n          <HomePage path=\"/\" />\n          <AboutPage path=\"about\" />\n        </Router>\n      );\n    }\n    export default App;\n    ```", "```js\n    import React, { useState, useContext } from \"react\";\n    import { navigate } from \"@reach/router\";\n    const AuthContext = React.createContext();\n    export const AuthProvider = ({ â€¦props }) => {\n      {/* Code continued in next step */}\n    };\n    export const useAuth = () => useContext(AuthContext);\n    export default AuthContext;\n    ```", "```js\n    Const [authenticated, setAuthenticated] =\n     useState(false);\n      const login = () => {\n        // Make authentication request here and only\n           trigger the following if successful.\n        setAuthenticated(true);\n        navigate(\"/\");\n      };\n      const logout = () => {\n        setAuthenticated(false);\n        navigate(\"/login\");\n      };\n      return (\n        <AuthContext.Provider\n          value={{\n            login,\n            logout,\n            authenticated,\n          }}\n          {...props}\n        />\n      );\n    ```", "```js\n    import React from \"react\";\n    import ReactDOM from \"react-dom\";\n    import \"./index.css\";\n    import App from \"./App\";\n    AuthProvider, we would not be able to access the authentication context within the application. \n    ```", "```js\n    import React from \"react\";\n    import { navigate } from \"@reach/router\"\n    import { useAuth } from \"./auth-context\";\n    const PrivateRoute = ({\n      component: Component,\n      ...rest\n    }) => {\n      const { authenticated } = useAuth();\n      if (!authenticated) {\n        navigate(\"/login\");\n        return null;\n      }\n      return <Component {...rest} />;\n    };\n    export default PrivateRoute;\n    ```", "```js\n    import { useAuth } from \"./auth-context\";\n    import PrivateRoute from \"./PrivateRoute\";\n    ```", "```js\n    import { Router, Link } from \"@reach/router\";\n    // Predefined Nav Component Here.\n    Const HomePage = () => {\n      authenticated state from the useAuth hook to give the user some indication of their authentication status.\n    ```", "```js\n    const AboutPage = () => {\n      const { logout } = useAuth();\n      return (\n        <div>\n          <Nav />\n          <h1>About Me</h1>\n          <button onClick={logout}>Logout</button>\n        </div>\n      );\n    };\n    ```", "```js\n    const LoginPage = () => {\n      const { login } = useAuth();\n      return (\n        <div>\n          <Nav />\n          <h1>Login Page</h1>\n          <button onClick={login}>Login</button>\n        </div>\n      );\n    };\n    ```", "```js\n    function App() {\n      return (\n        <Router>\n          <HomePage path=\"/\" />\n          <LoginPage path=\"login\" />\n          <PrivateRoute component={AboutPage} path=\"about\" />\n        </Router>\n      );\n    }\n    export default App;\n    ```", "```js\n    import React, { useState, useContext } from \"react\";\n    import { navigate } from \"@reach/router\";\n    const AuthContext = React.createContext();\n    export const AuthProvider = ({ ...props }) => {\n      {/* Code continued in next step */}\n    };\n    export const useAuth = () => useContext(AuthContext);\n    ```", "```js\n      const [authenticated, setAuthenticated] =\n        useState(false);\n      const login = async () => {\n        // Make authentication request here and only\n           trigger the following if successful.\n        setAuthenticated(true);\n        navigate(\"/private\")\n      };\n      const logout = () => {\n        setAuthenticated(false);\n      };\n      return (\n        <AuthContext.Provider\n          value={{\n            login,\n            logout,\n            authenticated,\n          }}\n          {...props}\n        />\n      );\n    ```", "```js\n    import React from \"react\";\n    import { AuthProvider } from \"./src/context/auth-\n      context\";\n    export const wrapPageElement = ({ element }) => {\n      return <AuthProvider>{element}</AuthProvider>;\n    };\n    ```", "```js\n    import React from \"react\";\n    import { navigate } from \"gatsby\";\n    import { useAuth } from \"../context/auth-context\";\n    const PrivateRoute = ({\n      component: Component,\n      location,\n      basepath,\n      ...rest\n    }) => {\n      const { authenticated } = useAuth();\n      if (!authenticated) {\n        navigate(basepath + \"/login\");\n        return null;\n      }\n      return <Component {...rest} />;\n    };\n    export default PrivateRoute;\n    ```", "```js\n    import React from \"react\";\n    import { Router } from \"@reach/router\";\n    import Layout from \"../components/layout/Layout\";\n    import PrivateRoute from \"../components/PrivateRoute\";\n    import { useAuth } from \"../context/auth-context\";\n    const LoginPage = () => {\n      const { login } = useAuth();\n      return (\n        <Layout>\n          <h1>Login Page</h1>\n          <button onClick={login}>Login</button>\n        </Layout>\n      );\n    };\n    const AuthenticatedPage = () => {\n      const { logout } = useAuth();\n      return (\n        <Layout>\n          <h1>Authenticated Page</h1>\n          <button onClick={logout}>Logout</button>\n        </Layout>\n      );\n    };\n    ```", "```js\n    function PageWithRouter() {\n      const basepath = \"/private\";\n      return (\n        <Router basepath={basepath}>\n          <LoginPage path=\"login\" />\n          <PrivateRoute\n            basepath={basepath}\n            component={AuthenticatedPage}\n            path=\"/\"\n          />\n        </Router>\n      );\n    }\n    export default PageWithRouter;\n    ```", "```js\n    import React from \"react\";\n    const Login = ({login}) => {\n      return <button onClick={login}>Login</button>;\n    };\n    export default Login;\n    ```", "```js\n    import React, { useState, useContext } from \"react\";\n    Login component into our authentication context.\n    ```", "```js\n      const [authenticated, setAuthenticated] =\n        useState(false);\n      const login = async () => {\n        // Make authentication request here and only\n           trigger the following if successful.\n        setAuthenticated(true);\n      };\n      const logout = () => {\n        setAuthenticated(false);\n      };\n      Login component, being sure to pass in the login function as a prop. This does not cause a route change, which can be a great benefit. When a user navigates to a page, their requested path is not lost by navigating away to a login page and, as such, when the user has successfully logged in, they will jump right back into the application in the place they intended to be. As a developer, this can stop you from having to pass redirect URLs around in the browser, which can be a hassle. If, for some reason, you want to keep a few pages public, you can check for the path in this conditional statement and allow some paths to be accessible, even without being authenticated. Note that even on these pages, the `Login` component will be loaded in, despite the fact it is not being used and will add unnecessary page weight.\n    ```", "```js\n    import React from \"react\";\n    import { AuthProvider } from \"./src/context/auth-\n      context\";\n    export const wrapPageElement = ({ element }) => {\n      return <AuthProvider>{element}</AuthProvider>;\n    };\n    ```"]