["```js\nimport BookmarkInformation from\n  '../BookmarkSummary/BookmarkInformation.jsx';\nimport classes from './InfoSidebar.module.css';\nfunction InfoSidebar({ bookmarkedArticles }) {\n  return (\n    <aside className={classes.sidebar}>\n      <BookmarkInformation bookmarkedArticles={bookmarkedArticles} />\n    </aside>\n  );\n}\nexport default InfoSidebar; \n```", "```js\nimport { createContext } from 'react';\ncreateContext('Hello Context'); // a context with an initial string value\ncreateContext({}); // a context with an initial (empty) object as a value \n```", "```js\nimport { createContext } from 'react';\nconst BookmarkContext = createContext({\n  bookmarkedArticles: []\n});\nexport default BookmarkContext; \n```", "```js\nimport Articles from '../Articles/Articles.jsx';\nimport InfoSidebar from '../InfoSidebar/InfoSidebar.jsx';\nimport BookmarkContext from '../../store/bookmark-context.jsx';\nfunction News() {\n  return (\n    <BookmarkContext>\n      <Articles />\n      <InfoSidebar />\n    </BookmarkContext>\n  );\n} \n```", "```js\nimport Articles from '../Articles/Articles.jsx';\nimport InfoSidebar from '../InfoSidebar/InfoSidebar.jsx';\nimport BookmarkContext from '../../store/bookmark-context.jsx';\nfunction News() {\n  return (\n    <BookmarkContext.Provider>\n      <Articles />\n      <InfoSidebar />\n    </BookmarkContext.Provider>\n  );\n} \n```", "```js\nimport Articles from '../Articles/Articles.jsx';\nimport InfoSidebar from '../InfoSidebar/InfoSidebar.jsx';\nimport BookmarkContext from '../../store/bookmark-context.jsx';\nfunction News() {\n  const bookmarkCtxValue = {\n    bookmarkedArticles: []\n  }; // for now, it's the same value as used before, for the initial context\n  return (\n    <BookmarkContext value={bookmarkCtxValue}>\n      <Articles />\n      <InfoSidebar />\n    </BookmarkContext>\n  );\n} \n```", "```js\nimport Articles from '../Articles/Articles.jsx';\nimport InfoSidebar from '../InfoSidebar/InfoSidebar.jsx';\nimport BookmarkContext from '../../store/bookmark-context.jsx';\nfunction News() {\n  const bookmarkCtxValue = {\n    bookmarkedArticles: []\n  }; // for now, it's the same value as used before, for the initial context\n  return (\n    <BookmarkContext.Provider value={bookmarkCtxValue}>\n      <Articles />\n      <InfoSidebar />\n    </BookmarkContext.Provider>\n  );\n} \n```", "```js\nimport { useState } from 'react';\nimport Articles from '../Articles/Articles.jsx';\nimport InfoSidebar from '../InfoSidebar/InfoSidebar.jsx';\nimport BookmarkContext from '../../store/bookmark-context.jsx';\nfunction News() {\n  const [savedArticles, setSavedArticles] = useState([]);\n  const bookmarkCtxValue = {\n    bookmarkedArticles: savedArticles // using the state as a value\n  };\n  return (\n    <BookmarkContext value={bookmarkCtxValue}>\n      <Articles />\n      <InfoSidebar />\n    </BookmarkContext>\n  );\n} \n```", "```js\nimport { useState } from 'react';\nimport Articles from '../Articles/Articles.jsx';\nimport InfoSidebar from '../InfoSidebar/InfoSidebar.jsx';\nimport BookmarkContext from '../../store/bookmark-context.jsx';\nfunction News() {\n  const [savedArticles, setSavedArticles] = useState([]);\n  function addArticle(article) {\n    setSavedArticles(\n     (prevSavedArticles) => [...prevSavedArticles, article]\n    );\n  }\n  function removeArticle(articleId) {\n    setSavedArticles(\n      (prevSavedArticles) => prevSavedArticles\n        .filter(\n          (article) => article.id !== articleId\n        )\n    );\n  }\n  const bookmarkCtxValue = {\n    bookmarkedArticles: savedArticles,\n    bookmarkArticle: addArticle,\n    unbookmarkArticle: removeArticle\n  };\n  return (\n    <BookmarkContext value={bookmarkCtxValue}>\n      <Articles />\n      <InfoSidebar />\n    </BookmarkContext>\n  );\n} \n```", "```js\nimport { use } from 'react'; // or import useContext for React < 19\nimport BookmarkContext from '../../store/bookmark-context.jsx';\nimport classes from './BookmarkSummary.module.css';\nfunction BookmarkSummary() {\n  const bookmarkCtx = use(BookmarkContext);\n  // React < 19: const bookmarkCtx = useContext(BookmarkContext);\n  const numberOfArticles = bookmarkCtx.bookmarkedArticles.length;\n  return (\n    <>\n      <p className={classes.summary}>\n        {numberOfArticles} articles bookmarked\n      </p>\n      <ul className={classes.list}>\n        {bookmarkCtx.bookmarkedArticles.map((article) => (\n          <li key={article.id}>{article.title}</li>\n        ))}\n      </ul>\n    </>\n  );\n}\nexport default BookmarkSummary; \n```", "```js\nimport { use } from 'react';\n// other imports\nfunction Articles() {\n  const bookmarkCtx = use(BookmarkContext); \n  // or: const bookmarkCtx = useContext(BookmarkContext)\n  return (\n    <ul>\n      {dummyArticles.map((article) => {\n        const isBookmarked = bookmarkCtx.bookmarkedArticles.some(\n          (bArticle) => bArticle.id === article.id\n        );\n        // default icon: Empty bookmark icon, because not bookmarked\n        let buttonIcon = <FaRegBookmark />;\n        if (isBookmarked) {\n          buttonIcon = <FaBookmark />;\n        }\n        return (\n          <li key={article.id}>\n            <h2>{article.title}</h2>\n            <p>{article.description}</p>\n            <button>{buttonIcon}</button>\n          </li>\n        );\n      })}\n    </ul>\n  );\n} \n```", "```js\nconst bookmarkCtx = use(BookmarkContext);\n// Note: This does NOT work\nbookmarkCtx.bookmarkedArticles = []; // setting the articles to an empty array \n```", "```js\n// This code is part of the Article component function\n// default action => bookmark article, because not bookmarked yet\nlet buttonAction = () => bookmarkCtx.bookmarkArticle(article);\n// default button icon: Empty bookmark icon, because not bookmarked\nlet buttonIcon = <FaRegBookmark />;\nif (isBookmarked) {\n  buttonAction = () => bookmarkCtx.unbookmarkArticle(article.id);\n  buttonIcon = <FaBookmark />;\n} \n```", "```js\nconst BookmarkContext = createContext({\n  bookmarkedArticles: [],\n  bookmarkArticle: () => {},\n  unbookmarkArticle: () => {}\n});\nexport default BookmarkContext; \n```", "```js\nexport function BookmarkContextProvider({ children }) {\n  const [savedArticles, setSavedArticles] = useState([]);\n  function addArticle(article) {\n    setSavedArticles(\n      (prevSavedArticles) => [...prevSavedArticles, article]\n    );\n  }\n  function removeArticle(articleId) {\n    setSavedArticles((prevSavedArticles) =>\n      prevSavedArticles.filter((article) => article.id !== articleId)\n    );\n  }\n  const bookmarkCtxValue = {\n    bookmarkedArticles: savedArticles,\n    bookmarkArticle: addArticle,\n    unbookmarkArticle: removeArticle,\n  };\n  return (\n    <BookmarkContext value={bookmarkCtxValue}>\n      {children}\n    </BookmarkContext>\n  );\n} \n```", "```js\nimport Articles from '../Articles/Articles.jsx';\nimport InfoSidebar from '../InfoSidebar/InfoSidebar.jsx';\nimport { BookmarkContextProvider } from '../../store/bookmark-context.jsx';\nfunction News() {\n  return (\n    <BookmarkContextProvider>\n      <Articles />\n      <InfoSidebar />\n    </BookmarkContextProvider>\n  );\n}\nexport default News; \n```", "```js\nsetIsLoading(fetchedPosts ? false : true); \n```", "```js\nfunction App() {\n  const [fetchedPosts, setFetchedPosts] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState();\n  const fetchPosts = useCallback(async function fetchPosts() {\n    **setIsLoading****(fetchedPosts ?** **false** **:** **true****);**\n    try {\n      const response = await fetch(\n        'https://jsonplaceholder.typicode.com/posts'\n      );\n      if (!response.ok) {\n        throw new Error('Failed to fetch posts.');\n      }\n      const posts = await response.json();\n      setIsLoading(false);\n      setError(null);\n      setFetchedPosts(posts);\n    } catch (error) {\n      setIsLoading(false);\n      setError(error.message);\n      setFetchedPosts(null);\n    }\n  }, []);\n  useEffect(\n    function () {\n      fetchPosts();\n    },\n    [fetchPosts]\n  );\n  return (\n    <>\n      {isLoading && <p>Loading...</p>}\n      {error && <p>{error}</p>}\n      {fetchedPosts && <BlogPosts posts={fetchedPosts} />}\n    </>\n  );\n} \n```", "```js\nconst fetchPosts = useCallback(async function fetchPosts() {\n  setIsLoading(fetchedPosts ? false : true);\n  setError(null);\n  try {\n    const response = await fetch(\n      'https://jsonplaceholder.typicode.com/posts'\n    );\n    if (!response.ok) {\n      throw new Error('Failed to fetch posts.');\n    }\n    const posts = await response.json();\n    setIsLoading(false);\n    setError(null);\n    setFetchedPosts(posts);\n  } catch (error) {\n    setIsLoading(false);\n    setError(error.message);\n    setFetchedPosts(null);\n  }\n}, []); \n```", "```js\nsetHttpState(prevState => ({\n  fetchedPosts: prevState.fetchedPosts,\n  isLoading: prevState.fetchedPosts ? false : true,\n  error: null\n})); \n```", "```js\nconst initialHttpState = {\n  data: null,\n  isLoading: false,\n  error: null,\n};\nfunction httpReducer(state, action) {\n  if (action.type === 'FETCH_START') {\n    return {\n      ...state, // copying the existing state\n      isLoading: state.data ? false : true,\n      error: null,\n    };\n  }\n  if (action.type === 'FETCH_ERROR') {\n    return {\n      data: null,\n      isLoading: false,\n      error: action.payload,\n    };\n  }\n  if (action.type === 'FETCH_SUCCESS') {\n    return {\n      data: action.payload,\n      isLoading: false,\n      error: null,\n    };\n  }\n  return initialHttpState; // default value for unknown actions\n}\nfunction App() {\n  useReducer(httpReducer, initialHttpState);\n  // more component code, not relevant for this snippet / explanation\n} \n```", "```js\nconst [httpState, dispatch] = useReducer(\n  httpReducer, \n  initialHttpState\n); \n```", "```js\ndispatch({ type: 'FETCH_START' }); \n```", "```js\nfunction httpReducer(state, action) {\n  if (action.type === 'FETCH_START') {\n    return {\n      ...state, // copying the existing state\n      isLoading: state.data ? false : true,\n      error: null,\n    };\n  }\n  if (action.type === 'FETCH_ERROR') {\n    return {\n      data: null,\n      isLoading: false,\n      error: action.payload,\n    };\n  }\n  if (action.type === 'FETCH_SUCCESS') {\n    return {\n      data: action.payload,\n      isLoading: false,\n      error: null,\n    };\n  }\n  return initialHttpState; // default value for unknown actions\n} \n```", "```js\ndispatch({ type: 'FETCH_SUCCESS', payload: posts }); \n```", "```js\n// code for httpReducer etc. did not change\nfunction App() {\n  const [httpState, dispatch] = useReducer(\n    httpReducer, \n    initialHttpState\n  );\n  // Using useCallback() to prevent an infinite loop in useEffect() \n  const fetchPosts = useCallback(async function fetchPosts() {\n    dispatch({ type: 'FETCH_START' });\n    try {\n      const response = await fetch(\n        'https://jsonplaceholder.typicode.com/posts'\n      );\n      if (!response.ok) {\n        throw new Error('Failed to fetch posts.');\n      }\n      const posts = await response.json();\n      dispatch({ type: 'FETCH_SUCCESS', payload: posts });\n    } catch (error) {\n      dispatch({ type: 'FETCH_ERROR', payload: error.message });\n    }\n  }, []);\n  useEffect(\n    function () {\n      fetchPosts();\n    },\n    [fetchPosts]\n  );\n  return (\n    <>\n      <header>\n        <h1>Complex State Blog</h1>\n        <button onClick={fetchPosts}>Load Posts</button>\n      </header>\n      {httpState.isLoading && <p>Loading...</p>}\n      {httpState.error && <p>{httpState.error}</p>}\n      {httpState.data && <BlogPosts posts={httpState.data} />}\n    </>\n  );\n} \n```"]