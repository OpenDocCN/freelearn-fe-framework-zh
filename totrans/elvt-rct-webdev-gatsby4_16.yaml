- en: '*Chapter 13*: Internationalization and Localization'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第13章*：国际化与本地化'
- en: This chapter is all about opening your site up to an international audience.
    We will talk about patterns you can use to make translating your site as it scales
    simple! Creating your site in English makes it accessible to the 1.3 billion people
    in the world who speak the language. However, if we provide users with localization
    options, we can translate the site into any language, therefore making our site
    accessible to all.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章全部关于向国际受众开放您的网站。我们将讨论您可以使用以使网站翻译在扩展时变得简单的模式！以英语创建您的网站使其对世界上说英语的13亿人可访问。然而，如果我们为用户提供本地化选项，我们可以将网站翻译成任何语言，因此使我们的网站对所有用户可访问。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Understanding localization and internationalization
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解本地化和国际化
- en: Implementing routes for internationalization
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施国际化路由
- en: Page translations for programmatic pages
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 程序化页面的页面翻译
- en: Providing locale translations for single-instance pages
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为单实例页面提供区域翻译
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To navigate this chapter, you will need to have completed [*Chapter 12*](B15983_12_ePub_RK.xhtml#_idTextAnchor159)*,
    Using Real-Time Data*.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 为了导航本章，您需要完成[*第12章*](B15983_12_ePub_RK.xhtml#_idTextAnchor159)*，使用实时数据*。
- en: The code present in this chapter can be found at [https://github.com/PacktPublishing/Elevating-React-Web-Development-with-Gatsby-3/tree/main/Chapter13](https://github.com/PacktPublishing/Elevating-React-Web-Development-with-Gatsby-3/tree/main/Chapter13).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中提供的代码可以在[https://github.com/PacktPublishing/Elevating-React-Web-Development-with-Gatsby-3/tree/main/Chapter13](https://github.com/PacktPublishing/Elevating-React-Web-Development-with-Gatsby-3/tree/main/Chapter13)找到。
- en: Understanding localization and internationalization
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解本地化和国际化
- en: 'While the end goal of this chapter is to set up localization, we can make things
    easier by implementing internationalization first. The terms localization and
    internationalization are often confused, so let''s define these terms properly:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管本章的最终目标是设置本地化，但我们可以通过首先实施国际化来简化事情。本地化和国际化的术语经常被混淆，所以让我们正确地定义这些术语：
- en: '**Internationalization**: The process of ensuring that your website is created
    in such a way that it can support different languages, locales, and cultures.
    Internationalization is all about being proactive in your site''s design and development
    to ensure that you don''t have to completely redesign it later when you introduce
    it to a new market. This could include allowing text to be displayed from right
    to left as well as left to right, for example.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**国际化**：确保您的网站以支持不同语言、区域和文化的这种方式创建的过程。国际化完全是关于在您网站的设计和开发中采取主动，以确保您在将其引入新市场时不必完全重新设计它。例如，这可能包括允许文本从右到左以及从左到右显示。'
- en: '**Localization**: Normally conducted after internationalization, localization
    is the process of adapting your site to meet a new locale requirement. This could
    be adding a language or cultural requirement.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**本地化**：通常在国际化之后进行，本地化是将您的网站适应以满足新的区域要求的过程。这可能包括添加语言或文化要求。'
- en: By spending the time upfront to get the internationalization right within the
    project, you can save yourself considerable time when you need to add a new locale
    later down the line. Let's now look at how we can modify our project with an internationalization
    strategy.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在项目初期投入时间确保国际化正确，当您稍后需要添加新的区域设置时，您可以节省大量时间。现在让我们看看我们如何通过国际化策略修改我们的项目。
- en: Implementing routes for internationalization
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实施国际化路由
- en: A common approach for large sites to accommodate localization is to prefix all
    paths with a language code. Let's take our about page, for example – the English
    (and default) language version of the page is located at `/about` but the French
    version of the page might be located at `/fr/about` and the German version of
    it at `/de/about`.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 大型网站为了适应本地化，通常会在所有路径前加上语言代码。以我们的关于页面为例——英文（默认）语言的页面位于`/about`，但法语的页面可能位于`/fr/about`，德语的页面可能位于`/de/about`。
- en: 'Let''s implement this pattern now for our default language of English and add
    French as a secondary language. We can make this easy with the help of `gatsby-theme-i18n`:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们为我们的默认语言英语实现此模式，并添加法语作为次要语言。我们可以借助`gatsby-theme-i18n`轻松实现这一点：
- en: 'Install the new dependencies:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装新的依赖项：
- en: '[PRE0]'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here we are installing the `gatsby-theme-i18n` package and its dependencies.
    This package automatically creates the route prefixes for us. It also adds `language`
    and `alternate` tags to the head of document. This helps Google identify that
    two pages contain the same content in different languages.
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我们正在安装 `gatsby-theme-i18n` 包及其依赖项。此包会自动为我们创建路由前缀。它还会向文档头部添加 `language` 和
    `alternate` 标签。这有助于 Google 识别两个页面包含相同内容的不同语言。
- en: Important Note
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重要提示
- en: This theme uses `react-helmet`, which may clash with `react-helmet-async`, a
    package we have used in other chapters. Be sure to check that the head of your
    document is set up as intended when using both, and if you experience issues stick
    to a single package.
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此主题使用 `react-helmet`，这可能与我们在其他章节中使用的 `react-helmet-async` 包冲突。确保在使用两者时，你的文档头部设置如预期，如果遇到问题，请坚持使用单个包。
- en: 'Include the `gatsby-theme-i18n` plugin in your `gatsby-config.js` file:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的 `gatsby-config.js` 文件中包含 `gatsby-theme-i18n` 插件：
- en: '[PRE1]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As part of this configuration, we add a couple of options. `defaultLang` refers
    to the default language we will use on the site – in this case, this is English,
    so we use the language code `en`. `configPath` is the configuration path to where
    we will set up `i18n`. This is most commonly in its own folder, which we will
    create in the next step.
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作为此配置的一部分，我们添加了一些选项。`defaultLang` 指的是网站上将使用的默认语言——在这种情况下，这是英语，所以我们使用语言代码 `en`。`configPath`
    是我们将设置 `i18n` 的配置路径。这通常是在其自己的文件夹中，我们将在下一步创建该文件夹。
- en: Create a folder in your root directory called `i18n`.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的根目录中创建一个名为 `i18n` 的文件夹。
- en: 'Create a new file inside the `i18n` folder called `config.json`, and add the
    following:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `i18n` 文件夹中创建一个名为 `config.json` 的新文件，并添加以下内容：
- en: '[PRE2]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here it is important that we define a configuration for every locale we intend
    to support. Each configuration object must contain the following:'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我们为我们要支持的每个区域设置定义一个配置非常重要。每个配置对象必须包含以下内容：
- en: 'a. `code`: This refers to the language''s code you will use to access this
    locale. Though you can set this to whatever you want for each language, it is
    probably best to keep them easily identifiable, for example, `fr` for French and
    `en` for English.'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a. `code`：这指的是你将用于访问此区域设置的语言的代码。虽然你可以为每种语言设置任何你想要的代码，但最好保持它们易于识别，例如，`fr` 用于法语，`en`
    用于英语。
- en: 'b. `hrefLang`: This is the value that is used for the `hrefLang` tag attribute
    in the head of the HTML. It is used to tell Google which language you are using
    on a specific page.'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b. `hrefLang`：这是用于 HTML 头部 `hrefLang` 标签属性的值。它用于告诉 Google 你在特定页面上使用的是哪种语言。
- en: 'c. `name`: The name of the language in the native language of the developer.'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: c. `name`：开发者母语中该语言的名字。
- en: 'd. `localName`: This is how the name of the language is spelled by its native
    speakers.'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: d. `localName`：这是母语使用者拼写该语言名字的方式。
- en: 'e. `langDir`: This is the direction that text is read in the given locale.
    This could be `ltr` for left-to-right text or `rtl` for right-to-left text.'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: e. `langDir`：这是给定区域设置中文字的阅读方向。这可能是 `ltr`（从左到右）或 `rtl`（从右到左）。
- en: 'f. `dateFormat`: This is the date format used within the locale.'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: f. `dateFormat`：这是区域设置中使用的日期格式。
- en: Quick Tip
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 快速提示
- en: When adding locales later on, this is the only file that needs to be updated
    to create the required routes for the locale.
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在稍后添加区域设置时，这是唯一需要更新的文件，以创建所需的路由来支持该区域设置。
- en: 'Finally replace instances of the Gatsby `Link` component on your site with
    the `LocalizedLink` component from `gatbsy-theme-i18n`:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将你网站上 Gatsby `Link` 组件的实例替换为来自 `gatbsy-theme-i18n` 的 `LocalizedLink` 组件：
- en: '[PRE3]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Let''s verify the previous steps. First, start your Gatsby development server''s
    GraphQL layer (normally located at `http://localhost:8000/_graphql`) and run the
    following query:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们验证之前的步骤。首先，启动你的 Gatsby 开发服务器 GraphQL 层（通常位于 `http://localhost:8000/_graphql`）并运行以下查询：
- en: '[PRE4]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In the returned data object, you should be able to see nodes with paths for
    all locales:'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在返回的数据对象中，你应该能够看到所有区域设置的路径节点：
- en: '[PRE5]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Finally, navigate to your Gatsby development site. Your footer should now contain
    links to the two languages:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，导航到你的 Gatsby 开发站点。现在你的页脚应该包含指向两种语言的链接：
- en: '![Figure 13.1 – Site footer with language toggle'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 13.1 – 带有语言切换功能的站点页脚'
- en: '](img/Figure_13.01_B15983.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_13.01_B15983.jpg)'
- en: Figure 13.1 – Site footer with language toggle
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.1 – 带有语言切换功能的站点页脚
- en: Clicking `/fr/` and clicking `/`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 `/fr/` 和点击 `/`。
- en: Now that we have set up our pages for different locales, let's ensure that we
    have language-appropriate content to display on these pages. Let's start by looking
    at pages generated programmatically.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经为不同的地区设置了页面，让我们确保在这些页面上显示与语言适当的内容。让我们首先查看由程序生成的页面。
- en: Page translations for programmatic pages
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 程序性页面的页面翻译
- en: To be able to offer pages such as articles and blog posts translated, we will
    need to provide the content in both languages. Let's look at how we structure
    our project so that posts in different languages are available to the site visitor.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够提供翻译成两种语言的页面，如文章和博客文章，我们需要提供两种语言的内容。让我们看看我们如何构建我们的项目，以便不同语言的帖子可供网站访客访问。
- en: '`gatsby-theme-i18n` comes with built-in support for handling `gatsby-plugin-mdx`
    plugin is set up to treat `.md` files as `.mdx` by adding the extension to the
    plugin''s configuration options:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`gatsby-theme-i18n` 内置了对处理 `gatsby-plugin-mdx` 插件的支持，如果插件配置选项中添加了扩展名，则将 `.md`
    文件视为 `.mdx`：'
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'I will be using the posts that are local files for this demo, but the same
    steps will work for CMS content once it is ingested to Gatsby''s data layer:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我将使用此演示中的本地文件帖子，但一旦内容被摄入到 Gatsby 的数据层，相同的步骤也适用于 CMS 内容：
- en: First, we need to restructure our blog posts folder in a way that makes them
    easy to identify when we have duplicates in different languages. Instead of filenames,
    use folder names to group them. Inside `/blog-posts`, create a folder for each
    post. A good name format for these folders would be `YYYY-mm-DD-Post-Title`. This
    makes the folder sortable by date but also tells you what the post is about without
    you having to open the folder.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要以使我们能够轻松识别不同语言中的重复内容的方式重新组织我们的博客文章文件夹。而不是使用文件名，使用文件夹名来分组它们。在 `/blog-posts`
    中为每篇文章创建一个文件夹。这些文件夹的好名称格式可能是 `YYYY-mm-DD-Post-Title`。这使得文件夹可以按日期排序，同时也告诉你文件夹的内容，而无需打开文件夹。
- en: 'Inside this folder, place the corresponding default language blog post and
    rename it to `index.mdx`. Be sure that the MDX file contains a `slug` in the frontmatter.
    An example might look like this:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此文件夹中，放置相应的默认语言博客文章并将其重命名为 `index.mdx`。确保 MDX 文件在前端包含一个 `slug`。一个例子可能如下所示：
- en: '[PRE7]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Repeat *Step 2* for every blog post you wish to add.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为你希望添加的每个博客文章重复 *步骤 2*。
- en: 'Create a second file in this folder called `index.fr.mdx`. This file''s name
    has the locale code added between the filename and extension. In this example,
    we are using France (French), so the locale code is `fr`. Replicate the `index.mdx`
    file''s frontmatter in French by translating all the text values. The `slug`,
    `type`, `hero`, `date`, and `tags` must remain the same for both files. The resultant
    file for the example started in *Step 2* looks as follows:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此文件夹中创建第二个文件，命名为 `index.fr.mdx`。此文件名在文件名和扩展名之间添加了地区代码。在本例中，我们使用的是法国（法语），因此地区代码是
    `fr`。通过将所有文本值翻译成法语来复制 `index.mdx` 文件的 frontmatter。`slug`、`type`、`hero`、`date`
    和 `tags` 必须在这两个文件中保持相同。示例中从 *步骤 2* 开始生成的结果文件如下所示：
- en: '[PRE8]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Repeat *Step 4* for any additional languages and locales you wish to support.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为你希望支持的任何其他语言和地区重复 *步骤 4*。
- en: 'Update your `gatsby-node.js` files'' blog post page creation configuration
    with the following:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下配置更新你的 `gatsby-node.js` 文件中的博客文章页面创建配置：
- en: '[PRE9]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We now need to tell Gatsby to use the correct MDX file on the correct locale
    path. Without this step, your site will find the MDX file with the first matching
    `slug` when creating blog posts. This may not match the locale as we have multiple
    files with the same `slug` and could lead to us being lost in translation. First,
    update the blog page template (located at `src/templates/blog-page.js`) query
    with the following:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要告诉 Gatsby 在正确的地区路径上使用正确的 MDX 文件。如果不执行此步骤，你的网站在创建博客文章时将找到第一个匹配 `slug` 的
    MDX 文件。这可能与地区不匹配，因为我们有多个具有相同 `slug` 的文件，可能会导致我们在翻译中迷失方向。首先，更新博客页面模板（位于 `src/templates/blog-page.js`）查询，如下所示：
- en: '[PRE10]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Perform the exact same step in the `src/templates/blog-preview.js` file:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `src/templates/blog-preview.js` 文件中执行完全相同的步骤：
- en: '[PRE11]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Let''s verify the previous steps. First, start your Gatsby development server''s
    GraphQL layer (normally located at `http://localhost:8000/_graphql`) and run the
    following query:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们验证之前的步骤。首先，启动你的 Gatsby 开发服务器 GraphQL 层（通常位于 `http://localhost:8000/_graphql`）并运行以下查询：
- en: '[PRE12]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Here, we are querying for all MDX of type `Blog` and retrieving the locale,
    whether that locale is the default, and the `slug`. The result should look like
    this:'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我们正在查询所有类型为 `Blog` 的 MDX，并检索地区信息，无论该地区是否为默认地区，以及 `slug`。结果应如下所示：
- en: '[PRE13]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'A result should be present for each locale for any given `slug`. Assuming this
    is the case, you can navigate to `/blog` on your Gatsby development site. You
    should see your blog content in your default language:'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于任何给定的 `slug`，每个区域都应该有一个结果。假设情况是这样，您可以在 Gatsby 开发站点的 `/blog` 上导航。您应该看到您默认语言的博客内容：
- en: '![Figure 13.2 – Blog page in English'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 13.2 – 英语博客页面'
- en: '](img/Figure_13.02_B15983.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_13.02_B15983.jpg]'
- en: Figure 13.2 – Blog page in English
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.2 – 英语博客页面
- en: 'Navigating to `/fr/blog`, you should see your content in French:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 导航到 `/fr/blog`，您应该看到法语的内容：
- en: '![Figure 13.3 – Blog page in French'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 13.3 – 法语博客页面'
- en: '](img/Figure_13.03_B15983.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_13.03_B15983.jpg]'
- en: Figure 13.3 – Blog page in French
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.3 – 法语博客页面
- en: Quick Tip
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 快速提示
- en: If you are clicking on a blog post and always receiving the default locale version,
    the most likely cause is that you are using `Link` instead of `LocalizedLink`
    when navigating to the page. Review *Step 5* of the *Implementing routes for internationalization*
    section of this chapter.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在点击博客文章时总是收到默认区域版本的版本，最可能的原因是您在导航到页面时使用的是 `Link` 而不是 `LocalizedLink`。请参阅本章
    *实现国际化路由* 部分的 *步骤 5*。
- en: We can provide translations for our programmatically generated pages with ease
    using this strategy. Let's now learn how we can set up translations for single-instance
    pages.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用这种策略轻松地为我们的程序生成页面提供翻译。现在让我们学习如何为单个实例页面设置翻译。
- en: Providing locale translations for single-instance pages
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为单个实例页面提供区域翻译
- en: 'For static pages, we will need a different approach to providing translations.
    For any strings that require translation we can no longer have the values in line
    with our JSX. A very common approach is to use `react-i18next`, which has a great
    hook called `useTranslation` that allows you to switch strings out depending on
    the locale. Let''s use this now to translate content on our index page for site
    visitors:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 对于静态页面，我们需要采取不同的方法来提供翻译。对于任何需要翻译的字符串，我们不能再将其值放在我们的 JSX 中。一个非常常见的方法是使用 `react-i18next`，它有一个名为
    `useTranslation` 的优秀钩子，允许您根据区域切换字符串。现在让我们使用这个钩子来为网站访客翻译首页上的内容：
- en: 'Open a terminal at your root directory and add these new dependencies:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的根目录中打开终端并添加以下新依赖项：
- en: '[PRE14]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Here, we are installing the `gatsby-theme-i18n-react-i18next` package and its
    dependencies. This package is a Gatsby theme plugin that provides locale support
    to our application by wrapping our site in `react-i18next`'s context provider.
    Underneath the hood, this package wraps the site by using `wrapPageElement` in
    the `gatsby-browser.js` in the same way we did in [*Chapter 12*](B15983_12_ePub_RK.xhtml#_idTextAnchor159)*,
    Using Real-Time Data*.
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我们正在安装 `gatsby-theme-i18n-react-i18next` 包及其依赖项。此包是一个 Gatsby 主题插件，通过将我们的站点包裹在
    `react-i18next` 的上下文提供者中来为我们提供区域支持。在底层，此包使用 `wrapPageElement` 在 `gatsby-browser.js`
    中包裹站点，就像我们在 [*第 12 章*](B15983_12_ePub_RK.xhtml#_idTextAnchor159)*，*使用实时数据* 中所做的那样。
- en: 'Include the `gatsby-theme-i18n-react-i18next` plugin in your `gatsby-config.js`
    file:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的 `gatsby-config.js` 文件中包含 `gatsby-theme-i18n-react-i18next` 插件：
- en: '[PRE15]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: As part of this configuration, we add a couple of options. `locales` refer to
    location where we will store our translations. `i18nextOptions` accepts any configuration
    options that `i18next` accepts (the full list is available at [https://www.i18next.com/overview/configuration-options](https://www.i18next.com/overview/configuration-options)).
    Here, we are passing in the `ns` option, which is an array of namespaces to use.
    For this example, we will just be creating a single namespace called `globals`,
    but you may want to add more as your site grows.
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作为此配置的一部分，我们添加了一些选项。`locales` 指的是我们将存储翻译的位置。`i18nextOptions` 接受 `i18next` 接受的任何配置选项（完整列表可在
    [https://www.i18next.com/overview/configuration-options](https://www.i18next.com/overview/configuration-options)
    找到）。在这里，我们传递了 `ns` 选项，它是一个要使用的命名空间数组。对于这个例子，我们只将创建一个名为 `globals` 的单个命名空间，但随着您站点的增长，您可能希望添加更多。
- en: Important Note
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重要提示
- en: The `gatsby-theme-i18n-react-18next` is an add-on package that will only work
    in tandem with `gatsby-theme-i18n`. Ensure that this package is installed by following
    the steps in the *Implementing routes for internationalization* section.
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`gatsby-theme-i18n-react-18next` 是一个附加包，它只能与 `gatsby-theme-i18n` 一起使用。确保按照
    *实现国际化路由* 部分的步骤安装此包。'
- en: Create a new folder in `i18n` called `locales`.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `i18n` 中创建一个名为 `locales` 的新文件夹。
- en: Within `locales`, create a new folder for each locale your site supports, for
    example, `en` and `fr`.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `locales` 中，为您的站点支持的每个区域创建一个新的文件夹，例如，`en` 和 `fr`。
- en: 'For each namespace, create a JSON file in the `locale` folder. In our case,
    we need to create a single file named `globals.json` for our `globals` namespace
    in each folder. This file should contain any translations you require, retrievable
    with a key that is consistent across all files. Your English file (which should
    be located at `i18n/locales/en/globals.json`) should contain the following:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于每个命名空间，在 `locale` 文件夹中创建一个 JSON 文件。在我们的例子中，我们需要在每个文件夹中为我们的 `globals` 命名空间创建一个名为
    `globals.json` 的单个文件。该文件应包含您需要的任何翻译，可以通过在所有文件中保持一致的键来检索。您的英语文件（应位于 `i18n/locales/en/globals.json`）应包含以下内容：
- en: '[PRE16]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Your French file (which should be located at `i18n/locales/fr/globals.json`)
    should contain the following:'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您的法语文件（应位于 `i18n/locales/fr/globals.json`）应包含以下内容：
- en: '[PRE17]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'To use the translation within a Gatsby page component, we can use the `useTranslation`
    hook from `react-i18next`. Let''s look at the about me link on the index page
    (located at `src/pages/index.js`) as an example:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在 Gatsby 页面组件中使用翻译，我们可以使用来自 `react-i18next` 的 `useTranslation` 钩子。以索引页面上的“关于我”链接（位于
    `src/pages/index.js`）为例：
- en: '[PRE18]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We can also use the exact same process in any other components, such as our
    header, for example:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们也可以在任何一个其他组件中使用完全相同的流程，例如我们的页眉，例如：
- en: '[PRE19]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: You can even use this inside React components that are used within MDX content
    if you need to!
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果需要，您甚至可以在 MDX 内容中使用的 React 组件内部使用此功能！
- en: Verify your implementation by navigating to the index page on your Gatsby development
    site. Toggle the locale by modifying the path or using the `Footer` component,
    and you should see any copy that is using `useTranslation` update.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过导航到您的 Gatsby 开发站点的索引页面来验证您的实现。通过修改路径或使用 `Footer` 组件来切换区域设置，您应该会看到任何使用 `useTranslation`
    的副本更新。
- en: We've only scratched the surface of the features that `i18next` offers. Visit
    their documentation at [https://www.i18next.com/](https://www.i18next.com/) to
    learn more about the powerful capabilities they offer. With this strategy and
    the preceding sections, you should now feel confident translating any aspect of
    your site. Let's now summarize what we've learned.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只是刚刚触及了 `i18next` 提供的功能的表面。访问他们的文档[https://www.i18next.com/](https://www.i18next.com/)以了解更多他们提供的强大功能。使用这种策略和前面的章节，您现在应该对翻译您网站的任何方面都感到自信。现在让我们总结一下我们学到了什么。
- en: Summary
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this final chapter, we learned about making our site accessible to a global
    audience. We first identified the differences between internationalization and
    localization. We then used the `gatsby-theme-i18n` plugin to create routes for
    our locales. We created programmatic blog posts in different languages and ensured
    the correct translation was visible when visiting a locale. Finally, we also translated
    our static pages using the `gatsby-theme-i18n-react-i18next` plugin. Between these
    two plugins, you now have the power to translate any of your site's content.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章的最后，我们学习了如何使我们的网站对全球受众可访问。我们首先确定了国际化与本地化的区别。然后我们使用 `gatsby-theme-i18n` 插件为我们的区域创建路由。我们创建了不同语言的程序性博客文章，并确保在访问区域时可以看到正确的翻译。最后，我们还使用
    `gatsby-theme-i18n-react-i18next` 插件翻译了我们的静态页面。在这两个插件之间，您现在可以翻译您网站上的任何内容。
- en: Hi!
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 嗨！
- en: I am Samuel Larsen-Disney, author of Elevating React Web Development with Gatsby.
    I really hope you enjoyed reading this book and found it useful for increasing
    your productivity and efficiency in Gatsby.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我是塞缪尔·拉尔森-迪士尼，著有《提升 React Web 开发与 Gatsby》。我真心希望您喜欢阅读这本书，并发现它对提高您在 Gatsby 中的生产力和效率很有用。
- en: It would really help me (and other potential readers!) if you could leave a
    review on Amazon sharing your thoughts on Elevating React Web Development with
    Gatsby here.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您能在亚马逊上分享您对《提升 React Web 开发与 Gatsby》的看法并留下评论，这将对我（以及其他潜在读者！）真的非常有帮助。
- en: 'Go to the link below or scan the QR code to leave your review:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 点击以下链接或扫描二维码留下您的评论：
- en: '[https://packt.link/r/1800209096](https://packt.link/r/1800209096 )'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/r/1800209096](https://packt.link/r/1800209096)'
- en: '![](img/QR_code_B15983.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![二维码](img/QR_code_B15983.jpg)'
- en: Your review will help me to understand what's worked well in this book, and
    what could be improved upon for future editions, so it really is appreciated.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 您的评论将帮助我了解这本书中哪些地方做得好，以及未来版本中哪些地方可以改进，所以这真的非常感谢。
- en: Best Wishes,
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 祝好运，
- en: '![](img/Author_photo_B15983.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![作者照片](img/Author_photo_B15983.jpg)'
- en: Samuel Larsen-Disney
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 塞缪尔·拉尔森-迪士尼
