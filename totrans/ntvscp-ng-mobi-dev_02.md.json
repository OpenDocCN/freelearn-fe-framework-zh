["```js\n// nativescript\nimport { NativeScriptModule } from 'nativescript-angular/nativescript.module'; \n// angular\nimport { NgModule, NO_ERRORS_SCHEMA } from '@angular/core';\n\n@NgModule({\n  imports: [ NativeScriptModule ]\n  schemas: [ NO_ERRORS_SCHEMA ]\n})\nexport class PlayerModule { }\n```", "```js\n// nativescript\nimport { NativeScriptModule } from 'nativescript-angular/nativescript.module'; \n\n// angular\nimport { NgModule, NO_ERRORS_SCHEMA } from '@angular/core';\n\n@NgModule({\n  imports: [ NativeScriptModule ],\n  schemas: [ NO_ERRORS_SCHEMA ]\n})\nexport class RecorderModule { }\n```", "```js\nexport interface ITrack {\n  filepath?: string;\n  name?: string;\n  order?: number;\n  volume?: number;\n  solo?: boolean;\n}\nexport class TrackModel implements ITrack {\n  public filepath: string;\n  public name: string;\n  public order: number;\n  public volume: number = 1; // set default to full volume\n  public solo: boolean;\n\n  constructor(model?: any) {\n    if (model) {\n      for (let key in model) {\n        this[key] = model[key];\n      }\n    }\n  }\n}\n```", "```js\n// angular\nimport { Injectable } from '@angular/core';\n\n// app\nimport { ITrack } from '../../core/models';\n@Injectable()\nexport class PlayerService {\n\n  public playing: boolean;\n  public tracks: Array<ITrack>;\n\n  constructor() {\n    this.tracks = [];\n  }\n\n  public play(index: number): void {\n    this.playing = true;\n  }\n  public pause(index: number): void {\n    this.playing = false;\n  }\n  public addTrack(track: ITrack): void {\n    this.tracks.push(track);\n  }\n  public removeTrack(track: ITrack): void {\n    let index = this.getTrackIndex(track);\n    if (index > -1) {\n      this.tracks.splice(index, 1);\n    }\n  }\n  public reorderTrack(track: ITrack, newIndex: number) {\n    let index = this.getTrackIndex(track);\n    if (index > -1) {\n      this.tracks.splice(newIndex, 0, this.tracks.splice(index, 1)[0]);\n    }\n  }\n  private getTrackIndex(track: ITrack): number {\n    let index = -1;\n    for (let i = 0; i < this.tracks.length; i++) {\n      if (this.tracks[i].filepath === track.filepath) {\n        index = i;\n        break;\n      }\n    }\n    return index;\n  }\n}\n```", "```js\nimport { PlayerService } from './player.service';\n\nexport const PROVIDERS: any[] = [\n  PlayerService\n];\n\nexport * from './player.service';\n```", "```js\n// nativescript\nimport { NativeScriptModule } from 'nativescript-angular/nativescript.module'; \n\n// angular\nimport { NgModule, NO_ERRORS_SCHEMA } from '@angular/core';\n\n// app\nimport { PROVIDERS } from './services';\n\n@NgModule({\n  imports: [ NativeScriptModule ],\n  providers: [ ...PROVIDERS ],\n  schemas: [ NO_ERRORS_SCHEMA ]\n})\nexport class PlayerModule { }\n```", "```js\n// angular\nimport { Injectable } from '@angular/core';\n@Injectable()\nexport class RecorderService {\n  public record(): void { }\n  public stop(): void { }\n}\n```", "```js\nimport { RecorderService } from './recorder.service';\n\nexport const PROVIDERS: any[] = [\n  RecorderService\n];\n\nexport * from './recorder.service';\n```", "```js\n// nativescript\nimport { NativeScriptModule } from 'nativescript-angular/nativescript.module'; \n\n// angular\nimport { NgModule, NO_ERRORS_SCHEMA } from '@angular/core';\n\n// app\nimport { PROVIDERS } from './services';\n\n@NgModule({\n  imports: [ NativeScriptModule ],\n  providers: [ ...PROVIDERS ],\n  schemas: [ NO_ERRORS_SCHEMA ]\n})\nexport class RecorderModule { }\n```", "```js\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class LogService {\n\n public static ENABLE: boolean = true;\n\n public debug(msg: any, ...formatParams: any[]) {\n   if (LogService.ENABLE) {\n     console.log(msg, formatParams);\n   }\n }\n\n public error(msg: any, ...formatParams: any[]) {\n   if (LogService.ENABLE) {\n     console.error(msg, formatParams);\n   }\n }\n\n public inspect(obj: any) {\n   if (LogService.ENABLE) {\n     console.log(obj);\n     console.log('typeof: ', typeof obj);\n     if (obj) {\n       console.log('constructor: ', obj.constructor.name);\n       for (let key in obj) {\n         console.log(`${key}: `, obj[key]);\n       }\n     }\n   }\n  }\n}\n```", "```js\n// angular\nimport { Injectable } from '@angular/core';\n\n// nativescript\nimport * as appSettings from 'application-settings';\n\ninterface IKeys {\n  currentUser: string;\n}\n@Injectable()\nexport class DatabaseService {\n\n  public static KEYS: IKeys = {\n    currentUser: 'current-user'\n  };\n\n  public setItem(key: string, value: any): void {\n    appSettings.setString(key, JSON.stringify(value));\n  }\n\n  public getItem(key: string): any {\n    let item = appSettings.getString(key);\n    if (item) {\n      return JSON.parse(item);\n    } \n    return item;\n  }\n\n  public removeItem(key: string): void {\n    appSettings.remove(key);\n  }\n}\n```", "```js\n// angular\nimport { Injectable } from '@angular/core';\n\n// lib\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\n// app\nimport { DatabaseService } from './database.service';\nimport { LogService } from './log.service';\n\n@Injectable()\nexport class AuthService {\n\n // access our current user from anywhere\n public static CURRENT_USER: any;\n\n // subscribe to authenticated state changes\n public authenticated$: BehaviorSubject<boolean> = \n   new BehaviorSubject(false);\n\n constructor(\n   private databaseService: DatabaseService,\n   private logService: LogService\n ) {\n   this._init();\n } \n\n private _init() {\n   AuthService.CURRENT_USER = this.databaseService\n     .getItem(DatabaseService.KEYS.currentUser);\n   this.logService.debug(`Current user: `,\n     AuthService.CURRENT_USER);\n   this._notifyState(!!AuthService.CURRENT_USER);\n }\n\n private _notifyState(auth: boolean) {\n   this.authenticated$.next(auth);\n }\n}\n```", "```js\nimport { AuthService } from './auth.service';\nimport { DatabaseService } from './database.service';\nimport { LogService } from './log.service';\n\nexport const PROVIDERS: any[] = [\n AuthService,\n DatabaseService,\n LogService\n];\n\nexport * from './auth.service';\nexport * from './database.service';\nexport * from './log.service';\n```", "```js\n// angular\nimport { Component } from '@angular/core';\n\n// app\nimport { AuthService } from './modules/core/services';\n\n@Component({\n selector: 'my-app',\n templateUrl: 'app.component.html',\n})\nexport class AppComponent {\n\n constructor(private authService: AuthService) { }\n\n}\n```", "```js\n// angular \nimport { NgModule } from '@angular/core'; \n\n// app\nimport { AppComponent } from './app.component';\nimport { CoreModule } from './modules/core/core.module';\nimport { PlayerModule } from './modules/player/player.module'; \n\n@NgModule({ \n  imports: [ \n    CoreModule, \n    PlayerModule \n  ], \n  declarations: [AppComponent],\n  bootstrap: [AppComponent] \n})\nexport class AppModule { }\n```"]