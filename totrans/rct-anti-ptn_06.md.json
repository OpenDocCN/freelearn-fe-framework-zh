["```js\ninterface Item {\n  id: string;\n  price: number;\n  quantity: number;\n}\nclass ShoppingCart {\n  cartItems: Item[] = [];\n  addItemToCart(id: string, price: number, quantity: number) {\n    this.cartItems.push({ id, price, quantity });\n  }\n  calculateTotal() {\n    let total = 0;\n    for (let i = 0; i < this.cartItems.length; i++) {\n      let item = this.cartItems[i];\n      let subTotal = item.price * item.quantity;\n      if (item.quantity > 10) {\n        subTotal *= 0.9;\n      }\n      total += subTotal;\n    }\n    return total;\n  }\n}\nexport { ShoppingCart };\n```", "```js\nimport { ShoppingCart } from \"../ShoppingCart\";\ndescribe(\"ShoppingCart\", () => {\n  it(\"calculates item prices\", () => {\n    const shoppingCart = new ShoppingCart();\n    shoppingCart.addItemToCart(\"apple\", 2.0, 2);\n    shoppingCart.addItemToCart(\"orange\", 3.5, 1);\n    const price = shoppingCart.calculateTotal();\n    expect(price).toEqual(7.5);\n  });\n  it('applies discount when applicable', () => {\n    const shoppingCart = new ShoppingCart();\n    shoppingCart.addItemToCart(\"apple\", 2.0, 11);\n    const price = shoppingCart.calculateTotal();\n    expect(price).toEqual(19.8);\n  })\n});\n```", "```js\nclass ShoppingCart {\n  items: Item[] = [];\n  addItemToCart(id: string, price: number, quantity: number) {\n    this.items.push({ id, price, quantity });\n  }\n  calculateTotal() {\n    let total = 0;\n    for (let i = 0; i < this.items.length; i++) {\n      let item = this.items[i];\n      let subTotal = item.price * item.quantity;\n      if (item.quantity > 10) {\n        subTotal *= 0.9;\n      }\n      total += subTotal;\n    }\n    return total;\n  }\n}\n```", "```js\nconst DISCOUNT_RATE = 0.9;\nclass ShoppingCart {\n  //...\n  calculateTotal() {\n    let total = 0;\n    for (let i = 0; i < this.items.length; i++) {\n      let item = this.items[i];\n      let subTotal = item.price * item.quantity;\n      if (item.quantity > 10) {\n        subTotal *= DISCOUNT_RATE;\n      }\n      total += subTotal;\n    }\n    return total;\n  }\n  //...\n}\n```", "```js\nclass ShoppingCart {\n  //...\n  calculateTotal() {\n    return this.items.reduce((total, item) => {\n      let subTotal = item.price * item.quantity;\n      return total + (item.quantity > 10 ? subTotal * DISCOUNT_RATE : \n       subTotal);\n    }, 0);\n  }\n  //...\n}\n```", "```js\nfunction applyDiscountIfEligible(item: Item, subTotal: number) {\n  return item.quantity > 10 ? subTotal * DISCOUNT_RATE : subTotal;\n}\nclass ShoppingCart {\n  //...\n  calculateTotal() {\n    return this.items.reduce((total, item) => {\n      let subTotal = item.price * item.quantity;\n      return total + applyDiscountIfEligible(item, subTotal);\n    }, 0);\n  }\n}\n```", "```js\nclass ShoppingCart {\n  items: Item[] = [];\n  addItemToCart({id, price, quantity}: Item) {\n    this.items.push({ id, price, quantity });\n  }\n  //...\n}\n```", "```js\nfunction isDiscountEligible(item: Item) {\n  return item.quantity > 10;\n}\nfunction applyDiscountIfEligible(item: Item, subTotal: number) {\n  return isDiscountEligible(item) ? subTotal * DISCOUNT_RATE : subTotal;\n}\n```", "```js\nfunction isDiscountEligible(item: Item) {\n  return item.quantity > 10;\n}\nfunction applyDiscountIfEligible(item: Item, subTotal: number) {\n  return isDiscountEligible(item) ? subTotal * DISCOUNT_RATE : \n   subTotal;\n}\n```", "```js\nimport { Item } from \"./types\";\nconst DISCOUNT_RATE = 0.9;\nfunction isDiscountEligible(item: Item) {\n  return item.quantity > 10;\n}\nexport function applyDiscountIfEligible(item: Item, subTotal: number) {\n  return isDiscountEligible(item) ? subTotal * DISCOUNT_RATE : \n   subTotal;\n}\n```", "```js\nimport { Item } from \"./types\";\nimport { applyDiscountIfEligible } from \"./utils\";\nclass ShoppingCart {\n  items: Item[] = [];\n  addItemToCart({ id, price, quantity }: Item) {\n    this.items.push({ id, price, quantity });\n  }\n  calculateTotal() {\n    return this.items.reduce((total, item) => {\n      let subTotal = item.price * item.quantity;\n      return total + applyDiscountIfEligible(item, subTotal);\n    }, 0);\n  }\n}\nexport { ShoppingCart };\n```"]