- en: Exploring Firebase Storage
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索Firebase存储
- en: In this chapter, we will move forward to explore the other features of Firebase. Nowadays,
    images, audios, and videos have become an integral part of any website development.
    Keeping this in mind, Firebase has introduced storage.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将继续探索Firebase的其他功能。如今，图像、音频和视频已成为任何网站开发的必要组成部分。考虑到这一点，Firebase引入了存储功能。
- en: We will take a look at how to upload a profile picture using the Firebase storage
    API. We will upload some random pictures using the Firebase portal and download
    the uploaded images using API to be shown in our friends list. We will then take
    a look at how to delete the files in Firebase storage. Finally, we will cover
    error handling.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将查看如何使用Firebase存储API上传个人资料图片。我们将使用Firebase门户上传一些随机图片，并使用API下载上传的图片以显示在我们的朋友列表中。然后，我们将查看如何在Firebase存储中删除文件。最后，我们将介绍错误处理。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Introducing Firebase storage
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍Firebase存储
- en: Configuring Firebase storage
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置Firebase存储
- en: Uploading the profile picture
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上传个人资料图片
- en: Downloading friends images
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载朋友的照片
- en: Deleting the profile image
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除个人资料图片
- en: Handling errors in Firebase storage
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Firebase存储中的错误处理
- en: Introducing Firebase storage
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍Firebase存储
- en: Firebase storage provides the flexibility for application developers to store
    various content types in the storage. It stores images, videos, and audios. The
    contents are stored in the Google Cloud storage bucket, and they can be accessed
    from both Firebase and Google Cloud.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Firebase存储为应用程序开发者提供了在存储中存储各种内容类型的灵活性。它存储图像、视频和音频。内容存储在Google Cloud存储桶中，并且可以从Firebase和Google
    Cloud访问。
- en: Firebase storage integrates with Firebase authentication and allows strong security.
    We can also apply a declarative security model to control access to the content.
    We will study this in more detail in a later section.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Firebase存储与Firebase身份验证集成，并提供了强大的安全性。我们还可以应用声明式安全模型来控制对内容访问的控制。我们将在稍后的部分中更详细地研究这一点。
- en: 'Firebase storage provides the following key features:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Firebase存储提供了以下关键特性：
- en: '**Scale**: It is backed by Google Cloud Storage and can scale to petabytes
    of size. You can read more about Google Cloud Storage at [https://cloud.google.com/storage/](https://cloud.google.com/storage/).'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缩放**：它由Google Cloud Storage支持，可以扩展到PB级别的容量。您可以在[https://cloud.google.com/storage/](https://cloud.google.com/storage/)了解更多关于Google
    Cloud Storage的信息。'
- en: '**Security**: Each of the uploaded files can be secured using storage security
    rules.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全性**：每个上传的文件都可以使用存储安全规则进行保护。'
- en: 'The default security rules for Firebase storage are as follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Firebase存储的默认安全规则如下：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Network**: Firebase storage automatically takes care of the network problem
    during uploads and downloads of files.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网络**：Firebase存储在文件的上传和下载过程中自动处理网络问题。'
- en: Configuring Firebase storage
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置Firebase存储
- en: 'To configure Firebase storage in our application, we need the storage bucket
    URL. This can be found within the Files tab under Storage in the header, as shown
    in the following screenshot; in our case, the storage bucket URL of our application
    friends is `gs://friends.4d4fa.appspot.com`:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要在我们的应用程序中配置Firebase存储，我们需要存储桶URL。这可以在标题下的“存储”选项卡中的“文件”标签内找到，如下面的截图所示；在我们的案例中，应用程序朋友的存储桶URL为`gs://friends.4d4fa.appspot.com`：
- en: '![](img/00027.jpeg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00027.jpeg)'
- en: 'Here''s the modified `environment.ts` file with the storage bucket URL:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这是修改后的`environment.ts`文件，其中包含存储桶URL：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Uploading the profile picture
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 上传个人资料图片
- en: In this section, we will cover how to upload a file to Firebase storage. In
    the user profile page, we will add the user profile picture on the top of the
    page.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍如何将文件上传到Firebase存储。在用户资料页面上，我们将在页面顶部添加用户个人资料图片。
- en: 'The steps involved in uploading and showing the user profile image are as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 上传和显示用户个人资料图片的步骤如下：
- en: '**Adding HTML properties in a user profile template**: We provide an `input` tag
    to take a user-selected image from the file chooser. Normally, in the `input`
    tag with a file type, we have a button to choose the file; however, in this case,
    we require the user to click on the default image. We have hidden the button in
    the `input` tag using the built in styles, as follows:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**在用户资料模板中添加HTML属性**：我们提供了一个`input`标签，用于从文件选择器中获取用户选择的图片。通常，在具有文件类型的`input`标签中，我们有一个按钮来选择文件；然而，在这种情况下，我们需要用户点击默认图片。我们使用内置样式隐藏了`input`标签中的按钮，如下所示：'
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Adding a default image in style sheets**: Initially, we show the default
    image by declaring the default image path in the `user-profile.component.ts` file,
    as follows:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**在样式表中添加默认图片**：最初，我们通过在 `user-profile.component.ts` 文件中声明默认图片路径来显示默认图片，如下所示：'
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The following is the modified `user-profile.component.html` file:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对 `user-profile.component.html` 文件进行的修改：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Here''s the modified `user-profile.component.scss` file:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是修改后的 `user-profile.component.scss` 文件：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Handling a click event in the user profile component**: We will implement
    the `onPersonEdit()` method, which accepts `event` as its parameter. As you can
    see from the following code, we need to retrieve the selected files from the event
    object and pass them to `UserService`:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**在用户个人资料组件中处理点击事件**：我们将实现 `onPersonEdit()` 方法，它接受 `event` 作为其参数。如以下代码所示，我们需要从事件对象中检索选定的文件并将它们传递给
    `UserService`：'
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**Adding a method in user service**: In `user.service.ts`, we initialize the
    instance of Firebase storage in the constructor, as follows:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**在用户服务中添加方法**：在 `user.service.ts` 中，我们在构造函数中初始化 Firebase 存储实例，如下所示：'
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now we implement the `addProfileImage()` method in our user service.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们实现用户服务中的 `addProfileImage()` 方法。
- en: 'First, we create the path for storing the image in Firebase storage:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们为 Firebase 存储中的图片存储创建路径：
- en: '[PRE8]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Second, we call the `put()` method from the Firebase storage reference, as
    follows:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 其次，我们调用 Firebase 存储引用的 `put()` 方法，如下所示：
- en: '[PRE9]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'After a successful upload, we save the download URL in the user node of Firebase
    and refresh the cache user object:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功上传后，我们在 Firebase 的用户节点中保存下载 URL 并刷新缓存的用户对象：
- en: '[PRE10]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '**Refreshing the user profile image**: After a successful upload, we need to
    update the image in our user profile page. We subscribe to `user` observable in
    the user profile component and update the profile image, as follows:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**刷新用户个人资料图片**：在成功上传后，我们需要更新我们用户个人资料页面中的图片。我们在用户个人资料组件中订阅 `user` 可观察对象并更新个人资料图片，如下所示：'
- en: '[PRE11]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'After a successful refresh, the user profile page will look as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在刷新成功后，用户个人资料页面将如下所示：
- en: '![](img/00028.jpeg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00028.jpeg)'
- en: Downloading friends images
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载好友图片
- en: 'In the user profile page, we have uploaded the profile image in Firebase storage.
    We have also stored a downloadable URL in the user node in Firebase, which can
    be accessed by friends using the UID. After fetching the friends list, we have
    to call another Firebase API to get the downloadable URL from our user node. The
    following is the downloadable URL:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在用户个人资料页面，我们在 Firebase 存储中上传了个人资料图片。我们还在 Firebase 的用户节点中存储了一个可下载的 URL，好友可以通过
    UID 访问。在获取好友列表后，我们必须调用另一个 Firebase API 从我们的用户节点获取可下载的 URL。以下是可以下载的 URL：
- en: '[PRE12]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In HTML, images are defined with an `<img>` tag. The `src` attribute specifies
    the URL address of the image, as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在 HTML 中，图片通过 `<img>` 标签定义。`src` 属性指定了图片的 URL 地址，如下所示：
- en: '[PRE13]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In `user-friends.component.html`, we add the default image with a downloadable
    URL:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `user-friends.component.html` 文件中，我们添加了带有可下载 URL 的默认图片：
- en: '[PRE14]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In `user-friends.component.scss`, we use `background-image` and also add `width`
    and `height` so that the image fits into the card layout, like this:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `user-friends.component.scss` 文件中，我们使用了 `background-image` 并添加了 `width` 和
    `height` 以确保图片能够适应卡片布局，如下所示：
- en: '[PRE15]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Firebase provides an API to get the downloadable URL using Firebase storage:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Firebase 提供了一个 API，可以通过 Firebase 存储获取可下载的 URL：
- en: '[PRE16]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Deleting the profile images
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除个人资料图片
- en: 'Firebase storage provides an API to delete the file from Firebase. The `delete`
    operation is similar to other Firebase storage APIs. We have not implemented this
    use case in our application; however, you may require this concept in your application:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Firebase 存储提供了一个 API 用于从 Firebase 删除文件。`delete` 操作与其他 Firebase 存储 API 类似。我们尚未在我们的应用程序中实现此用例；然而，您可能在您的应用程序中需要此概念：
- en: '[PRE17]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Handling errors in Firebase storage
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理 Firebase 存储中的错误
- en: 'Firebase storage throws an error based on different conditions, as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Firebase 存储根据不同的条件抛出错误，如下所示：
- en: '**storage/unknown**: This may occur because of any unknown error. This is similar
    to the default condition in the `switch...case` statement.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**storage/unknown**：这可能是因为任何未知错误。这与 `switch...case` 语句中的默认条件类似。'
- en: '**storage/object_not_found**: This occurs when the file/image reference is
    not available in the Firebase storage location.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**storage/object_not_found**：当文件/图片引用在 Firebase 存储位置不可用时发生。'
- en: '**storage/bucket_not_found**: This error occurs when the Firebase bucket is
    not configured.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**storage/bucket_not_found**：当 Firebase 存储桶未配置时，此错误发生。'
- en: '**storage/project_not_found**: This error occurs when the Firebase project
    has not configured Firebase storage.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**storage/project_not_found**: 当Firebase项目未配置Firebase存储时，此错误发生。'
- en: '**storage/quota_exceeded**: This error occurs when the free tier plan expires
    and is asked to be upgraded to the paid plan.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**storage/quota_exceeded**: 当免费套餐计划到期并被要求升级到付费计划时，此错误发生。'
- en: '**storage/unauthenticated**: This error occurs when the user is not authenticated
    but is still able to access files and images in Firebase storage.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**storage/unauthenticated**: 当用户未认证但仍然能够访问Firebase存储中的文件和图片时，此错误发生。'
- en: '**storage/unauthorized**: This error occurs when an unauthorized user accesses
    the files/images in Firebase storage.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**storage/unauthorized**: 当未经授权的用户访问Firebase存储中的文件/图片时，此错误发生。'
- en: '**storage/retry_limit_exceeded**: This error occurs when a user exceeds the
    retry limit because of a slow network, or because of no network.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**storage/retry_limit_exceeded**: 当由于网络缓慢或无网络而导致用户超过重试限制时，此错误发生。'
- en: '**storage/invalid_checksum**: This error occurs when the checksum on the client
    does not match that of the server''s.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**storage/invalid_checksum**: 当客户端的校验和与服务器的不匹配时，此错误发生。'
- en: '**storage/canceled**: This error occurs when a user intervenes an upload or
    a download operation.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**storage/canceled**: 当用户干预上传或下载操作时，此错误发生。'
- en: '**storage/invalid_event_name**: This error occurs when an invalid event name
    is provided to the Firebase storage API. The correct events are *running*, *progress*,
    and *pause*.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**storage/invalid_event_name**: 当提供给Firebase存储API的无效事件名称时，此错误发生。正确的事件是 *running*，*progress*
    和 *pause*。'
- en: '**storage/invalid-argument**: The Firebase storage `put()` method accepts file,
    `Blob`, and `UInt8` as parameters. This error occurs when we pass a wrong argument.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**storage/invalid-argument**: Firebase存储 `put()` 方法接受文件、`Blob` 和 `UInt8` 作为参数。当我们传递错误参数时，此错误发生。'
- en: When we encounter an error within our application, we implement the `then()`
    method of Promise and retrieve the error message and show it in alert dialog.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在应用程序中遇到错误时，我们实现Promise的`then()`方法，检索错误消息并在警告对话框中显示它。
- en: 'Here is a modified `addProfileImage()` method in the `user.service.ts` class:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是`user.service.ts`类中修改后的`addProfileImage()`方法：
- en: '[PRE18]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Summary
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we discussed Firebase storage. We uploaded the profile picture
    to Firebase storage and stored the downloadable URL in the user node in our database.
    We showed the image in the `img` tag of HTML, as this helps in downloading the
    images from Firebase storage. We covered Firebase security where a user needs
    to be properly authenticated to access the images/files in Firebase storage. Finally,
    we discussed error handling in Firebase storage.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了Firebase存储。我们将个人资料图片上传到Firebase存储，并将可下载的URL存储在我们的数据库中的用户节点中。我们在HTML的`img`标签中显示了图片，因为这有助于从Firebase存储中下载图片。我们介绍了Firebase安全，用户需要正确认证才能访问Firebase存储中的图片/文件。最后，我们讨论了Firebase存储的错误处理。
- en: In the next chapter, we will cover a more interesting and exciting part of our
    application. We will create a chat application and we will also cover how Firebase
    supports real-time updates.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍我们应用程序更有趣和令人兴奋的部分。我们将创建一个聊天应用程序，并介绍Firebase如何支持实时更新。
