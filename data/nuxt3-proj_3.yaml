- en: '3'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '3'
- en: Building a Real Estate Listing Project to Grasp Routing, Views, Layouts, and
    Plugins
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建房地产列表项目以掌握路由、视图、布局和插件
- en: Welcome back, developers! As you step into [*Chapter 3*](B19760_03.xhtml#_idTextAnchor055),
    you’re not stepping into unknown territory; you’re entering a more advanced phase
    of your Nuxt 3 journey. If you’ve been with us from the start, you’re already
    familiar with setting up Nuxt 3 projects and integrating Tailwind CSS, among other
    things. This chapter will take your existing knowledge to the next level as we
    dive into a real estate listing project.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎回来，开发者！当你步入 [*第 3 章*](B19760_03.xhtml#_idTextAnchor055) 时，你并没有进入未知领域；你正进入
    Nuxt 3 旅程的更高级阶段。如果你从开始就与我们在一起，你已经熟悉了设置 Nuxt 3 项目和集成 Tailwind CSS 等其他事情。本章将把你的现有知识提升到下一个层次，因为我们将深入房地产列表项目。
- en: We’ll kick things off the way we usually do—by creating a new Nuxt 3 project,
    with Tailwind CSS for styling and Google Fonts for typography. While this is familiar
    ground, the topics we cover will bring new layers of complexity, setting the stage
    for the new concepts that await you.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将像往常一样开始——创建一个新的 Nuxt 3 项目，使用 Tailwind CSS 进行样式设计，以及 Google Fonts 进行字体设计。虽然这是熟悉的地盘，但我们所涉及的主题将带来新的复杂层次，为等待您的新的概念奠定基础。
- en: This chapter promises to be an enlightening experience as it focuses on critical
    aspects of Nuxt 3 that you’ve yet to explore. You’ll get to delve into advanced
    topics such as layouts, routing, and plugins. Along the way, you’ll learn how
    to define default layouts, dig deeper into the Nuxt 3 routing mechanism, and explore
    plugins by adding `Dayjs` for date formatting.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章承诺将是一次启发性的体验，因为它专注于您尚未探索的 Nuxt 3 的关键方面。您将有机会深入研究布局、路由和插件等高级主题。在这个过程中，您将学习如何定义默认布局，深入了解
    Nuxt 3 的路由机制，并通过添加 `Dayjs` 用于日期格式化来探索插件。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Defining a default layout for the website and overriding it with a 404 page
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义网站的默认布局并用 404 页面覆盖它
- en: Creating the home page and exploring TypeScript support
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建主页并探索 TypeScript 支持
- en: Creating a dynamic listing page
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个动态列表页面
- en: Creating and validating a property details page
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和验证属性详情页面
- en: Creating a plugin to use `Dayjs` for formatting dates
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个插件以使用 `Dayjs` 进行日期格式化
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The code files for this chapter can be found at [https://github.com/PacktPublishing/Nuxt-3-Projects/tree/main/chapter03](https://github.com/PacktPublishing/Nuxt-3-Projects/tree/main/chapter03).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码文件可在 [https://github.com/PacktPublishing/Nuxt-3-Projects/tree/main/chapter03](https://github.com/PacktPublishing/Nuxt-3-Projects/tree/main/chapter03)
    找到。
- en: The CiA video for this chapter can be found on [https://packt.link/2oM0A](https://packt.link/2oM0A)
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的 CiA 视频可在 [https://packt.link/2oM0A](https://packt.link/2oM0A) 找到
- en: Essential background- understanding Nuxt 3 routing, layouts, and plugins
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 必要的背景知识 - 理解 Nuxt 3 路由、布局和插件
- en: 'Before diving into the code, it’s crucial to grasp some key concepts that will
    be integral to this chapter’s real estate listing project:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入代码之前，掌握一些关键概念对于本章的房地产列表项目至关重要：
- en: '`pages` directory. This eradicates the manual chore of defining routes, while
    still accommodating complex routing scenarios through the `nuxt.config.js` file.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pages` 目录。这消除了手动定义路由的繁琐工作，同时通过 `nuxt.config.js` 文件仍能适应复杂的路由场景。'
- en: '`<slot />` components to showcase page content. A `layouts/default.vue` file
    is employed by default, but crafting custom layouts and assigning them in your
    page metadata is straightforward.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `<slot />` 组件来展示页面内容。默认情况下，使用 `layouts/default.vue` 文件，但创建自定义布局并在页面元数据中分配它们是简单直接的。
- en: '`/plugins` directory are auto-loaded during Nuxt app creation. Plugins can
    be tailored to function only on the client or server side by appending a `.client`
    or `.server` suffix to the filename.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/plugins` 目录在创建 Nuxt 应用程序时会自动加载。可以通过在文件名后附加 `.client` 或 `.server` 后缀来定制插件，使其仅在客户端或服务器端运行。'
- en: These core concepts provide the necessary backdrop to navigate through this
    chapter’s project adeptly. As you traverse through the examples, you’ll notice
    how these elements collaboratively contribute to a well-structured, functional,
    and adaptable application.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这些核心概念为熟练地导航本章的项目提供了必要的背景。当你遍历示例时，你会注意到这些元素如何共同贡献于一个结构良好、功能强大且适应性强的应用程序。
- en: Setting up your real estate listing project in Nuxt 3
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Nuxt 3 中设置你的房地产列表项目
- en: In the previous chapter, we explored the integration of `TailwindCSS` and `@nuxtjs/google-fonts`
    into a Nuxt 3 project. As we embark on creating our new project (let’s name it
    “Homescape”), we’ll employ similar techniques.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们探讨了将`TailwindCSS`和`@nuxtjs/google-fonts`集成到Nuxt 3项目中的方法。在我们开始创建新项目（让我们称它为“Homescape”）时，我们将采用类似的技术。
- en: 'First, let’s create a new project:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们创建一个新的项目：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Upon successful initialization, navigate to the project directory and open
    it with VS Code:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 初始化成功后，导航到项目目录，并用VS Code打开它：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Next, we’ll bring in `TailwindCSS` for styling, and `@nuxtjs/google-font` to
    automatically import any Google font.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将引入`TailwindCSS`进行样式设计，以及`@nuxtjs/google-font`来自动导入任何Google字体。
- en: 'To install them, run the following:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装它们，请运行以下命令：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Post-installation, update the `nuxt.config.ts` file to add the module and set
    up Google Fonts configuration:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 安装后，更新`nuxt.config.ts`文件以添加模块并设置Google Fonts配置：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Then, let’s generate `tailwind.config.js` at the root of our project with some
    default variables:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，让我们在项目的根目录下生成`tailwind.config.js`文件，并设置一些默认变量：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `tailwind.config.js` file will act as our vessel for custom styling, component
    definition, and theme adjustments, ensuring our utility classes are optimized
    and maintaining a consistent design language throughout our project.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`tailwind.config.js`文件将作为我们自定义样式、组件定义和主题调整的载体，确保我们的实用类优化，并在整个项目中保持一致的设计语言。'
- en: 'Navigating from our generalized setup into specificity, here’s my preferred
    startup configuration in Tailwind CSS:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 从我们的通用设置导航到具体性，这是我在Tailwind CSS中首选的启动配置：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Here, we’ve opted for a palette that includes shades of amber, slate, red, and
    yellow. These colors will lend a distinctive character to our real estate listing
    website. For those interested in the other configuration details, such as fonts
    and container settings, refer to [*Chapter 2*](B19760_02.xhtml#_idTextAnchor036),
    where we covered these topics comprehensively.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们选择了一个包括琥珀色、板岩色、红色和黄色的调色板。这些颜色将为我们的房地产列表网站增添独特的特色。对于那些对其他配置细节感兴趣，例如字体和容器设置，请参阅[*第2章*](B19760_02.xhtml#_idTextAnchor036)，在那里我们全面地介绍了这些主题。
- en: 'Wrapping up the configuration setup, let’s put our adjustments to the test
    by crafting a simple layout. Navigate to your `app.vue` file and add this to the
    template:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 完成配置设置后，让我们通过制作一个简单的布局来测试我们的调整。导航到你的`app.vue`文件，并在模板中添加以下内容：
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This is the expected output:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这是预期的输出：
- en: '![Figure 3.1: Homescape – initial page](img/B19760_03_01.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![图3.1：Homescape – 初始页面](img/B19760_03_01.jpg)'
- en: 'Figure 3.1: Homescape – initial page'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.1：Homescape – 初始页面
- en: With the initial project created, we are well-prepared to dive into the new
    aspects of our project. Let’s begin by defining the home page with a default layout,
    and tailoring it for the 404 page.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建初始项目后，我们已经准备好深入到我们项目的新的方面。让我们从定义带有默认布局的首页开始，并为404页面进行定制。
- en: Defining a default layout for the website and overriding it with a 404 page
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义网站的默认布局并覆盖404页面
- en: A well-structured layout is akin to the sturdy frame of a house, offering a
    solid foundation upon which distinct pages can seamlessly reside. It’s where you
    define common elements such as headers and footers just once, and they render
    consistently across your website, bringing a cohesive look and facilitating easier
    navigation for users.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 一个结构良好的布局就像房子的坚固框架，为不同的页面提供了一个稳固的基础，使得页面可以无缝地存在。在这里，你只需定义一次常见的元素，如页眉和页脚，它们就会在你的网站上保持一致地渲染，带来统一的视觉效果，并使用户的导航更加容易。
- en: As we transition to the latter part of this section, our focus shifts to handling
    unforeseen situations where a user lands on a non-existent page. We’ll explore
    how to craft a user-friendly 404 page in Nuxt that informs the user of the mishap
    and guides them back to the right path. So, let’s get started!
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们过渡到本节的下半部分时，我们的重点转向处理用户意外访问不存在页面的不可预见情况。我们将探讨如何在Nuxt中制作一个用户友好的404页面，告知用户错误并引导他们回到正确的路径。所以，让我们开始吧！
- en: Defining a default layout
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义默认布局
- en: 'Let’s begin by creating a new folder called `layouts` in the root directory
    of your project, then create a new file within it named `default.vue`. This file
    will hold the structure shared across all pages:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在项目的根目录下创建一个名为`layouts`的新文件夹，然后在其中创建一个名为`default.vue`的新文件。这个文件将包含所有页面共享的结构：
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In the layout file, the `<slot />` element is where the content of individual
    pages will be injected.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在布局文件中，`<slot />`元素是注入单个页面内容的地方。
- en: 'Within the `app.vue` file, we should wrap our template with the `<NuxtLayout>`
    component to define our layout. All the page content will be displayed within
    this component:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在`app.vue`文件中，我们应该用`<NuxtLayout>`组件包裹我们的模板，以定义我们的布局。所有页面内容都将在这个组件内显示：
- en: '[PRE8]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now you should be able to see the demo header on the website.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你应该能够在网站上看到演示头部。
- en: '![Figure 3.2: Homescape – with default layout](img/B19760_03_02.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![图3.2：Homescape – 默认布局](img/B19760_03_02.jpg)'
- en: 'Figure 3.2: Homescape – with default layout'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.2：Homescape – 默认布局
- en: 'We’ll implement the `default.vue` layout file to include three primary sections:
    a header, the main content area, and a footer, along with a newsletters section.
    This layout encapsulates the common structure that all pages in the application
    will inherit.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将实现`default.vue`布局文件，包括三个主要部分：头部、主要内容区域和页脚，以及新闻通讯部分。这个布局封装了所有应用页面将继承的通用结构。
- en: Let’s create our header component, which will serve as the primary navigation
    bar for our website.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建我们的头部组件，它将作为我们网站的导航栏。
- en: Creating the BaseHeader component
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建BaseHeader组件
- en: Initially, we’ll organize our project by creating a new directory called `base`
    within the `components` directory. This `base` directory will house global components
    that aren’t tied to any specific business section.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 初始时，我们将通过在`components`目录内创建一个名为`base`的新目录来组织我们的项目。这个`base`目录将存放与任何特定业务部分无关的全局组件。
- en: 'Inside the `base` directory, we create a new file named `Header.vue`. This
    file will hold all the code relevant to our header component:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在`base`目录内，我们创建一个名为`Header.vue`的新文件。这个文件将包含所有与我们的头部组件相关的代码：
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Nuxt facilitates an automatic component discovery mechanism, which is quite
    powerful. In our setup, we’ve placed the `Header.vue` component inside a base
    folder within the `components` directory. Due to Nuxt’s naming convention, this
    component is now accessible as `<base-header />` in our layouts and pages.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Nuxt提供了一个强大的自动组件发现机制。在我们的设置中，我们将`Header.vue`组件放置在`components`目录内的一个名为`base`的文件夹中。由于Nuxt的命名约定，这个组件现在可以通过`<base-header
    />`在我们的布局和页面中访问。
- en: The naming convention is quite intuitive – the directory name is prefixed to
    the component name, separated by a hyphen. This not only makes component names
    unique but also groups related components together in a clear and organized manner.
    Moreover, it provides a straightforward way to identify the origin and grouping
    of a component just by its name, which can be a significant aid in a collaborative
    development environment or a large-scale project.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 命名约定非常直观——目录名称作为前缀添加到组件名称前，由连字符分隔。这不仅使组件名称唯一，而且以清晰和有序的方式将相关组件分组在一起。此外，它提供了一个简单的方法，仅通过组件名称就可以识别组件的来源和分组，这在协作开发环境或大型项目中可能是一个重要的辅助。
- en: 'This `Header.vue` file will hold all the code relevant to our header component:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`Header.vue`文件将包含所有与我们的头部组件相关的代码：
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We’ve styled the header to be fixed at the top with a border at the bottom,
    employing Tailwind CSS classes for styling. The `navLinks` data property holds
    an array of link objects, which are rendered as navigation links in the template.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经将头部样式设置为固定在顶部，底部有边框，并使用Tailwind CSS类进行样式设计。`navLinks`数据属性包含一个链接对象数组，这些对象在模板中被渲染为导航链接。
- en: As we continue to build our website, we’ll craft a newsletter section and a
    footer component to enhance our web page’s structure and user engagement.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们继续构建我们的网站，我们将制作一个新闻通讯部分和页脚组件，以增强我们网页的结构和用户参与度。
- en: 'Both components will be created inside the `components/base` folder with the
    names `NewslettersSection.vue` and `Footer.vue`:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个组件都将创建在`components/base`文件夹中，名称分别为`NewslettersSection.vue`和`Footer.vue`：
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The base-footer component consists of three sections: company name and address,
    listing by category, and additional info with useful links like FAQs, privacy
    policy, and terms of service. The listing by category section will be populated
    later with data fetched statically. The footer also includes a copyright notice,
    signifying the ownership of the website content:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 基础页脚组件由三个部分组成：公司名称和地址、按类别列出，以及包含如常见问题解答、隐私政策和服务条款等有用链接的附加信息。按类别列出的部分将稍后用静态获取的数据填充。页脚还包括版权声明，标志着网站内容的所有权：
- en: '[PRE12]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: With the individual components created,’it’s time to bring them together within
    our `default.vue` layout file. This layout serves as the structural blueprint
    for our pages, ensuring a consistent design across the website.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建了单个组件之后，是时候在我们 `default.vue` 布局文件中将它们组合在一起了。这个布局充当了我们页面的结构蓝图，确保了网站设计的一致性。
- en: 'H’re’s how’we’ve structured our `default.vue` layout:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们的 `default.vue` 布局的结构：
- en: '[PRE13]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The output should be as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果应如下所示：
- en: '![Figure 3.3: Homescape – final default layout](img/B19760_03_03.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.3：Homescape – 最终默认布局](img/B19760_03_03.jpg)'
- en: 'Figure 3.3: Homescape – final default layout'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.3：Homescape – 最终默认布局
- en: You’ll notice that, currently, the header text is invisible, and the title overlaps
    with the header. However, once we introduce a hero section with a dark background
    and extend it to full height, the page aesthetics will significantly improve.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到，目前页眉文本是不可见的，标题与页眉重叠。然而，一旦我们引入一个带有深色背景的英雄部分并将其扩展到全高度，页面的美学将显著提升。
- en: Having established a solid foundation with our layouts and essential components,
    let’s move on to creating the home page, listing pages, and an error page.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的布局和基本组件建立了坚实的基础之后，让我们继续创建主页、列表页和错误页。
- en: Creating the home page and exploring TypeScript support
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建主页和探索 TypeScript 支持
- en: Building the home page and listing pages is a pivotal step in our project. It’s
    here that users will start their journey, browsing through various property listings.
    To begin crafting these pages, we need to set up a `pages` directory. This directory
    is essential for housing all our page components.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 构建主页和列表页是我们项目中的一个关键步骤。在这里，用户将开始他们的旅程，浏览各种物业列表。为了开始制作这些页面，我们需要设置一个 `pages` 目录。这个目录对于存放我们所有的页面组件至关重要。
- en: Introduction to the pages directory
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 页面目录简介
- en: 'To create the home page or “index” page, we need to create a new component
    inside the `pages` directory called `index.vue`, then override the `app.vue` component
    as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建主页或“索引”页面，我们需要在 `pages` 目录中创建一个新的组件，名为 `index.vue`，然后按照以下方式覆盖 `app.vue` 组件：
- en: '[PRE14]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Notice that we used the `<NuxtPage />` component within `NuxtLayout` to render
    the current page component. This way, the structure defined in `app.vue` acts
    as a universal layout, while the content from individual pages gets injected at
    the point where `<NuxtPage />` is placed.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们在 `NuxtLayout` 中使用了 `<NuxtPage />` 组件来渲染当前页面组件。这样，`app.vue` 中定义的结构充当了一个通用布局，而来自单个页面的内容则被注入到
    `<NuxtPage />` 放置的位置。
- en: The `pages` directory is quite powerful. The file structure within this directory
    corresponds to the router structure of our application, and every `.vue` file
    becomes a route in our app. For instance, a `pages/about.vue` file automatically
    generates an `/about` route in our application.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`pages` 目录非常强大。该目录内的文件结构对应于我们应用程序的路由结构，每个 `.vue` 文件都成为我们应用程序中的一个路由。例如，一个 `pages/about.vue`
    文件会自动在我们的应用程序中生成一个 `/about` 路由。'
- en: Now, with the `pages` directory set up and `app.vue` customized to embrace individual
    pages, we are well on our way to defining the layouts for our home page and listing
    pages.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，随着 `pages` 目录的设置和 `app.vue` 的定制以适应单个页面，我们正朝着定义主页和列表页的布局迈进。
- en: Exploring TypeScript support
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索 TypeScript 支持
- en: As we set sail on the task of creating pages with various property listings,
    it’s crucial to have a clear understanding and structure of the data we will be
    dealing with. In a real-world scenario, this data would be fetched from an API.
    However, for the scope of this chapter, we will be using static files to represent
    our data, keeping the transition to fetching data from an API smooth and straightforward
    in the upcoming chapters.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们着手创建具有各种物业列表的页面时，对我们将要处理的数据有清晰的理解和结构至关重要。在现实世界的场景中，这些数据将从 API 中获取。然而，在本章的范围内，我们将使用静态文件来表示我们的数据，以便在接下来的章节中平滑且直接地将数据从
    API 中获取。
- en: 'The data in our application primarily revolves around properties and categories.
    We have three different datasets representing properties: `properties.ts`, `featuredProperties.ts`,
    and `recentlyListedProperties.ts`. Additionally, there’s a `categories.ts` file
    representing different property categories. All these datasets are structured
    in a way that simulates real-world data.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应用程序中的数据主要围绕物业和类别。我们有三个不同的数据集代表物业：`properties.ts`、`featuredProperties.ts`
    和 `recentlyListedProperties.ts`。此外，还有一个 `categories.ts` 文件代表不同的物业类别。所有这些数据集都是按照模拟真实世界数据的方式构建的。
- en: Now, to ensure consistency and error-free handling of this data across our application,
    employing TypeScript is a wise choice. TypeScript provides a way to define strict
    types for our data, which significantly reduces the potential for bugs and makes
    the code more readable and easier to manage.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了确保在整个应用程序中一致且无错误地处理这些数据，采用TypeScript是一个明智的选择。TypeScript提供了一种定义数据严格类型的方法，这显著减少了潜在的错误，并使代码更易于阅读和管理。
- en: 'Nuxt 3 comes with built-in TypeScript support, which is a boon for developers
    keen on type safety. Our first step is to define a `Property` type. Let’s create
    a `types` folder at the root level of our project, and within it, an `index.ts`
    file. In this file, we’ll define our `Property` type as well as the `Category`
    type:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Nuxt 3自带内置的TypeScript支持，这对于热衷于类型安全的开发者来说是一个福音。我们的第一步是定义一个`Property`类型。让我们在项目的根级别创建一个`types`文件夹，并在其中创建一个`index.ts`文件。在这个文件中，我们将定义我们的`Property`类型以及`Category`类型：
- en: '[PRE15]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: By exporting an empty object and declaring a global object that contains `Property`
    and `Category`, we make these types available globally in our application. This
    approach eliminates the need to import the type in every component. Now Let’s
    talk about best practices for creating components in a Nuxt project.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 通过导出一个空对象并声明一个包含`Property`和`Category`的全局对象，我们使这些类型在我们的应用程序中全局可用。这种方法消除了在每个组件中导入类型的需要。现在让我们来谈谈在Nuxt项目中创建组件的最佳实践。
- en: A note on the component path
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于组件路径的说明
- en: 'When organizing components in a Nuxt 3 project, we have the flexibility to
    structure our files in a way that best suits our development style and project
    needs. For example, consider the following component path:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在组织Nuxt 3项目中的组件时，我们有灵活性，可以根据我们的开发风格和项目需求以最佳方式组织我们的文件。例如，考虑以下组件路径：
- en: '[PRE16]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This will create the component within a nested directory, `property`, under
    the `components` root directory, allowing us to group all components related to
    property features in the same folder. Alternatively, we could place the component
    directly under the `components` root directory with a more flattened structure:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在`components`根目录下的嵌套目录`property`中创建组件，使我们能够将所有与属性功能相关的组件分组在同一个文件夹中。或者，我们也可以将组件直接放置在`components`根目录下，以更扁平的结构：
- en: '[PRE17]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Both approaches enable us to call the component in our templates using the
    same tag:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种方法都使我们能够在模板中使用相同的标签调用组件：
- en: '[PRE18]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: However, I prefer the first method as it helps organize related components together
    in the same folder, making the project structure more manageable, especially as
    the project grows.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我更喜欢第一种方法，因为它有助于将相关的组件组织在同一文件夹中，使项目结构更易于管理，尤其是在项目增长时。
- en: We now have a blueprint for the project types and component paths, let’s start
    creating our components!
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了项目类型和组件路径的蓝图，让我们开始创建我们的组件！
- en: Create Property and Category Card Components
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建属性和类别卡片组件
- en: 'Begin by creating a folder called `property`. Inside it, create a `Card.vue`
    component that receives `property` as a prop:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 首先创建一个名为`property`的文件夹。在其内部，创建一个接收`property`作为prop的`Card.vue`组件：
- en: '[PRE19]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In the snippet provided, we used the `Property` type because we’ve already defined
    it globally. Following that, `defineProps` is a utility from Vue.js used in the
    Composition API setup to define the types of our component props. In this instance,
    it specifies that the `property` prop should adhere to the structure outlined
    in the `Property` type.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在提供的代码片段中，我们使用了`Property`类型，因为我们已经全局定义了它。随后，`defineProps`是Vue.js中的一个实用工具，用于在Composition
    API设置中定义组件的prop类型。在这个例子中，它指定了`property` prop应遵循`Property`类型中概述的结构。
- en: 'In the same way, we’ll create the `/``components/category/Card.vue` component:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 同样地，我们将创建`/components/category/Card.vue`组件：
- en: '[PRE20]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Now let’s and start implementing the homepage and see how we will use `Property`
    and `Category` components within it.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们开始实现主页，看看我们如何在其中使用`Property`和`Category`组件。
- en: Creating the home page
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建主页
- en: 'We’ll kick off by creating a simple overlay background component inside the
    `base` folder:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从在`base`文件夹内创建一个简单的覆盖背景组件开始：
- en: '[PRE21]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This component will be used as an absolute background in the hero section, as
    well as the error page.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 此组件将被用作英雄部分中的绝对背景，以及错误页面。
- en: 'Then, let’s craft the `HeroSection` component, which will serve as a welcoming
    visual for our visitors. This component will be housed within a dedicated home
    page folder, showcasing the organized and modular structure of our application:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，让我们制作 `HeroSection` 组件，它将为我们的访客提供一个欢迎的视觉元素。这个组件将存放在一个专门的主页文件夹中，展示我们应用程序的有序和模块化结构：
- en: '[PRE22]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Following `HeroSection`, we’ll flesh out additional segments of our home page,
    namely the `FeaturedProperties` and `RecentlyListedProperties` sections. These
    sections will pull data from respective static files, rendering property cards
    to display an assortment of properties.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `HeroSection` 之后，我们将进一步完善主页的其他部分，特别是 `FeaturedProperties` 和 `RecentlyListedProperties`
    部分。这些部分将从各自的静态文件中获取数据，渲染属性卡片以展示一系列的属性。
- en: 'Here is the `FeaturedProperties` component:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 `FeaturedProperties` 组件：
- en: '[PRE23]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: A similar approach will be taken for `RecentlyListedProperties`.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 `RecentlyListedProperties` 也将采用类似的方法。
- en: 'Additionally, we’ll craft a component for each property category and encapsulate
    them within an `ExploreCategories` component, which will also be placed on the
    home page:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还将为每个属性类别创建一个组件，并将它们封装在 `ExploreCategories` 组件中，这个组件也将放置在主页上：
- en: '[PRE24]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Each folder under the `components` directory is systematically organized to
    house relevant components, aiding in achieving a clean, well-structured, and manageable
    code base.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`components` 目录下的每个文件夹都是系统性地组织起来的，用于存放相关组件，有助于实现一个干净、结构良好且易于管理的代码库。'
- en: Note
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: All resources, the entire code base, and the assets utilized in this chapter
    are readily available in the associated repository for your reference and exploration.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中使用的所有资源、整个代码库和资产都可在相关仓库中随时查阅和探索。
- en: 'Having followed through with the outlined steps, at this juncture, your application
    should look like this:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 按照概述的步骤完成之后，此时你的应用程序应该看起来像这样：
- en: '![Figure 3.4: Final home page](img/B19760_03_04.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.4：最终的主页](img/B19760_03_04.jpg)'
- en: 'Figure 3.4: Final home page'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.4：最终的主页
- en: We’ve done an excellent job constructing our home page. Next, we’ll venture
    into creating the listing pages to further enhance our application’s functionality.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经出色地构建了我们的主页。接下来，我们将着手创建列表页面，以进一步增强我们应用程序的功能。
- en: Creating a dynamic listing page
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个动态列表页面
- en: Dynamic routing is a fundamental concept in Nuxt that allows developers to build
    flexible and data-driven routes. Unlike static routes, where each route is predefined
    and fixed, dynamic routes adapt to the data they are provided, enabling a more
    scalable and maintainable routing structure.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 动态路由是 Nuxt 的一个基本概念，它允许开发者构建灵活且数据驱动的路由。与静态路由不同，静态路由中的每个路由都是预先定义且固定的，而动态路由会根据提供的数据进行适应，从而实现更可扩展和可维护的路由结构。
- en: In Nuxt, creating dynamic routes is as simple as adding a Vue file in the `pages`
    directory with a special filename. The filename should contain a parameter enclosed
    in square brackets `[]`, which acts as a placeholder for the actual data that
    will be passed to the route. This parameter can then be accessed within the page
    component, providing a means to load and display data based on the route.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Nuxt 中，创建动态路由就像在 `pages` 目录中添加一个特殊的 Vue 文件一样简单。文件名应包含一个用方括号 `[]` 包围的参数，该参数作为传递给路由的实际数据的占位符。然后可以在页面组件中访问此参数，提供一种根据路由加载和显示数据的方法。
- en: For instance, if you have a file named `[slug].vue` in the `pages` directory,
    Nuxt will translate this to a route with a dynamic segment such as `/something`,
    where something is the value of the `slug` parameter. This `slug` parameter can
    be accessed within the page component, enabling the loading and displaying of
    data based on its value.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你在 `pages` 目录中有一个名为 `[slug].vue` 的文件，Nuxt 将将其转换为具有动态段的路由，如 `/something`，其中
    something 是 `slug` 参数的值。这个 `slug` 参数可以在页面组件中访问，从而根据其值加载和显示数据。
- en: Now, in our specific example, we will explore how we can leverage this feature
    to create category-based listing pages by defining a `[name].vue` file within
    a `categories` directory under the `pages` directory. This setup will enable us
    to have routes such as `/categories/houses` or `/categories/apartments`, dynamically
    rendering the properties associated with each category.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在我们的具体示例中，我们将探讨如何利用这个功能通过在 `pages` 目录下的 `categories` 目录中定义一个 `[name].vue`
    文件来创建基于类别的列表页面。这种设置将使我们能够拥有如 `/categories/houses` 或 `/categories/apartments` 这样的路由，动态渲染与每个类别相关的属性。
- en: 'Now, let’s discuss the `script` section of our `[``name].vue` file:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们讨论一下我们的 `[``name].vue` 文件的 `script` 部分：
- en: '[PRE25]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Here’s a step-by-step breakdown of the script:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是脚本的逐步分解：
- en: We import the `properties` data from our static data file.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们从我们的静态数据文件中导入`properties`数据。
- en: We employ the `useRoute` composable from Nuxt to access the route parameters.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用Nuxt的`useRoute`组合式来访问路由参数。
- en: The `categoryName` constant captures the dynamic segment of the route (the category
    name in this case).
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`categoryName`常量捕获了路由的动态部分（在本例中是类别名称）。'
- en: We create a computed property, `filteredProperties`, to filter the `properties`
    array based on the category name.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们创建一个计算属性`filteredProperties`，用于根据类别名称过滤`properties`数组。
- en: 'Moving on to the template section, it’s designed to exhibit the properties
    filtered by category. If there are properties matching the category, they are
    displayed in a grid layout. If not, a message indicating no properties found is
    displayed, along with a button to return to the home page:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 进入模板部分，它被设计用来展示按类别过滤后的属性。如果存在匹配的属性，它们将以网格布局显示。如果没有找到匹配的属性，则会显示一条消息，并附带一个返回主页的按钮：
- en: '[PRE26]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The logic here is straightforward:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的逻辑很简单：
- en: We use a `v-if` directive to check if there are any properties for the chosen
    category. If there are, we render a grid of `property-card` components, each receiving
    a `property` object as a prop.
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用`v-if`指令检查是否有选择类别的属性。如果有，我们渲染一个`property-card`组件的网格，每个组件接收一个`property`对象作为属性。
- en: '![Figure 3.5: Listing categories/Lofts](img/B19760_03_05.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![图3.5：列出类别/阁楼](img/B19760_03_05.jpg)'
- en: 'Figure 3.5: Listing categories/Lofts'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.5：列出类别/阁楼
- en: In the case where no properties match the category `(v-else`), we display a
    message and a button that navigates back to the home page, offering a good user
    experience and a clear path of action when the desired content is not found.
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在没有属性匹配类别的情况下（`v-else`），我们显示一条消息和一个按钮，用于导航回主页，当找不到所需内容时，提供良好的用户体验和清晰的行动路径。
- en: '![Figure 3.6: Listing invalid category](img/B19760_03_06.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![图3.6：列出无效类别](img/B19760_03_06.jpg)'
- en: 'Figure 3.6: Listing invalid category'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.6：列出无效类别
- en: However, this page doesn’t validate whether the route parameter is exists or
    not. In the next section, we’ll implement and validate the property details page
    and learn how to validate the route parameters.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这个页面没有验证路由参数是否存在。在下一节中，我们将实现和验证属性详情页面，并学习如何验证路由参数。
- en: Creating and validating a property details page
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和验证属性详情页面
- en: In the previous section, data validation was not implemented; we merely checked
    whether there were any properties associated with a particular category and displayed
    a message if none were found. However, on the property details page, we’re adding
    an extra layer of validation to ensure the data integrity and user experience
    are upheld.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，没有实现数据验证；我们只是检查是否有与特定类别关联的属性，如果没有找到，则显示一条消息。然而，在属性详情页面上，我们添加了一个额外的验证层，以确保数据完整性和用户体验得到维护。
- en: Let’s create the property details dynamic page. The page should be located at
    `/pages/properties/[id].vue`, allowing dynamic access to individual property pages
    based on the property ID.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建属性详情动态页面。该页面应位于`/pages/properties/[id].vue`，允许根据属性ID动态访问单个属性页面。
- en: 'Now, let’s discuss the `script` section:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们讨论`script`部分：
- en: '[PRE27]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Here’s a breakdown of the script:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是脚本分解：
- en: The `definePageMeta` function is utilized within a Nuxt setup to define metadata
    for the page. It’s a utility that allows you to set up various options and hooks
    related to the page lifecycle and behavior. One of the powerful features provided
    by `definePageMeta` is the ability to validate route parameters using the `validate`
    method.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '`definePageMeta`函数在Nuxt设置中使用，用于定义页面的元数据。这是一个实用工具，允许你设置与页面生命周期和行为相关的各种选项和钩子。`definePageMeta`提供的强大功能之一是使用`validate`方法验证路由参数。'
- en: The `validate` method is used to validate route parameters before rendering
    the page. It’s a way to ensure that the incoming route parameters meet certain
    criteria before allowing the page to be rendered. If the `validate` method returns
    false (when the ID does not match any property), Nuxt will automatically redirect
    the user to a 404 error page.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '`validate`方法用于在渲染页面之前验证路由参数。这是一种确保传入的路由参数在允许页面渲染之前满足某些标准的方法。如果`validate`方法返回false（当ID不匹配任何属性时），Nuxt将自动将用户重定向到404错误页面。'
- en: After validation, the script uses the `useRoute` function to obtain the current
    route object. Then, it locates the specific property object within the properties
    data that matches the ID from the route parameters. This property object will
    be utilized within the template to display the details of the selected property.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 验证后，脚本使用`useRoute`函数获取当前路由对象。然后，它在属性数据中定位与路由参数中的ID匹配的特定属性对象。此属性对象将在模板中用于显示所选属性的详细信息。
- en: The template for displaying property details is straightforward as it merely
    exhibits the attributes of the property. You can check it from the related repo.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 显示属性详情的模板很简单，因为它只是展示了属性的属性。您可以从相关仓库中查看它。
- en: After implementing the script and template, you can test the setup by accessing
    the page at [http://localhost:3000/properties/6](http://localhost:3000/properties/6).
    This URL should lead you to a page displaying the details of a valid property.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 实现脚本和模板后，您可以通过访问[http://localhost:3000/properties/6](http://localhost:3000/properties/6)页面来测试设置。此URL应将您带到显示有效属性详细信息的页面。
- en: '![Figure 3.7: Property details page](img/B19760_03_07.jpg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![图3.7：属性详情页面](img/B19760_03_07.jpg)'
- en: 'Figure 3.7: Property details page'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.7：属性详情页面
- en: However, if you attempt to access a non-existent property, for instance, via
    [http://localhost:3000/properties/6666](http://localhost:3000/properties/6666),
    the application should redirect you to a 404 error page. This behavior ensures
    that users are guided appropriately when they attempt to access content that doesn’t
    exist, thereby enhancing the user experience and maintaining the integrity of
    the application’s data presentation. Now let’s move on to create a custom error
    page.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果您尝试访问一个不存在的属性，例如通过[http://localhost:3000/properties/6666](http://localhost:3000/properties/6666)，应用程序应将您重定向到404错误页面。这种行为确保了当用户尝试访问不存在的内容时，他们会被适当引导，从而增强用户体验并保持应用程序数据展示的完整性。现在让我们继续创建自定义错误页面。
- en: Creating a Custom error page
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建自定义错误页面
- en: Handling errors gracefully is crucial for a good user experience. Nuxt provides
    a default error page that gets displayed whenever an error occurs, such as when
    a user navigates to a non-existent route. Initially, if you try to access a wrong
    URL, as we did before, you’ll be greeted by Nuxt’s default error page, which is
    quite generic.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 优雅地处理错误对于良好的用户体验至关重要。Nuxt提供了一个默认错误页面，当发生错误时（例如，当用户导航到不存在的路由时）会显示该页面。最初，如果您尝试访问错误的URL，就像我们之前做的那样，您将看到Nuxt的默认错误页面，它相当通用。
- en: '![Figure 3.8: Default error page](img/B19760_03_08.jpg)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![图3.8：默认错误页面](img/B19760_03_08.jpg)'
- en: 'Figure 3.8: Default error page'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.8：默认错误页面
- en: Our aim is to override this with a more personalized page that maintains the
    website’s theme. Create a new file named `error.vue` in the root directory of
    your project besides the `app.vue` component. This `error.vue` file will override
    the default error page provided by Nuxt.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目的是用一个更个性化的页面来覆盖它，该页面保持网站的主题。在项目的根目录中创建一个名为`error.vue`的新文件，除了`app.vue`组件。此`error.vue`文件将覆盖Nuxt提供的默认错误页面。
- en: 'Here’s an example of how you might structure the file:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个文件结构的示例：
- en: '[PRE28]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: You might notice that I’ve created a simple `BaseBtn.vue` component with custom
    css styles in it. You can check the component in the related chapter repo.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会注意到我创建了一个简单的`BaseBtn.vue`组件，其中包含自定义CSS样式。您可以从相关章节的仓库中查看该组件。
- en: By default, this custom error page will catch 404 errors, displaying your personalized
    message whenever a user tries to access a route that doesn’t exist. However, it’s
    noteworthy that, as it stands, this page will show a 404 error even if other types
    of errors occur. We can adjust this behavior later to handle different error types
    accordingly.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，此自定义错误页面将捕获404错误，当用户尝试访问不存在的路由时显示您个性化的消息。然而，值得注意的是，目前这个页面即使发生其他类型的错误也会显示404错误。我们可以在以后调整此行为，以相应地处理不同类型的错误。
- en: 'Now let’s test it by trying to access a non-existent route:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们通过尝试访问一个不存在的路由来测试它：
- en: '![Figure 3.9: Custom error.vue](img/B19760_03_09.jpg)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![图3.9：自定义error.vue](img/B19760_03_09.jpg)'
- en: 'Figure 3.9: Custom error.vue'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.9：自定义error.vue
- en: In the next section, we’ll create a plugin that uses the `Dayjs` library to
    handle date formatting across our application.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将创建一个插件，该插件使用`Dayjs`库来处理应用程序中的日期格式化。
- en: Creating a plugin to use Dasyjs for formatting dates
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个插件以使用 Dasyjs 格式化日期
- en: One of the most overlooked but crucial parts of any application is the way we
    manage and display times and dates. Typically, JavaScript’s native `Date` object
    can be cumbersome to use for advanced formatting. This is where `Dayjs` comes
    into play. `Dayjs` is a minimalist JavaScript library that provides a straightforward
    way to format, parse, and manipulate dates. Going forward, we’ll replace static
    date rendering in our project with formatted date that shows the relative date
    from the current date using `Dayjs`.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 任何应用程序中常常被忽视但至关重要的一个部分是我们管理和显示时间与日期的方式。通常，JavaScript的本地`Date`对象在高级格式化时可能会很麻烦。这就是`Dayjs`发挥作用的地方。`Dayjs`是一个简约的JavaScript库，它提供了一种简单的方式来格式化、解析和操作日期。从现在开始，我们将用`Dayjs`显示的相对日期格式替换项目中静态的日期渲染。
- en: Installing Dayjs
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Dayjs
- en: 'To get started, install `Dayjs` by running the following command in your project
    directory:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，请在项目目录中运行以下命令来安装`Dayjs`：
- en: '[PRE29]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Setting up the plugin directory and file
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置插件目录和文件
- en: Nuxt’s plugin system allows you to run your code before the root Vue.js application
    is instantiated. They are run during the boot-up phase of your application and
    can execute on the client side, server side, or both depending on your configuration.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: Nuxt的插件系统允许你在根Vue.js应用实例化之前运行你的代码。它们在应用的启动阶段运行，可以根据你的配置在客户端、服务器端或两者同时执行。
- en: When you create a new plugin, it’s like adding a new member to your team that
    has specific skills. This team member (the plugin) can do tasks that everyone
    in the project can use. For example, setting up `Dayjs` as a plugin allows you
    to call upon date formatting functionality wherever you need it in your project.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 当你创建一个新的插件时，就像为你的团队增加了一个具有特定技能的新成员。这个团队成员（插件）可以执行项目中每个人都可以使用的任务。例如，将`Dayjs`设置为插件允许你在项目的任何需要的地方调用日期格式化功能。
- en: By placing the `dayjs.ts` file in the `plugins` directory, you’re essentially
    telling Nuxt, “Hey, before you start up, make sure you know how to format dates
    using `Dayjs`, because we’re going to need it.” If you haven’t already set up
    a `plugins` directory, create one at the root of your project. Inside this directory,
    create a new file named `dayjs.ts`.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将`dayjs.ts`文件放在`plugins`目录中，你实际上是在告诉Nuxt，“嘿，在你启动之前，确保你知道如何使用`Dayjs`来格式化日期，因为我们将要用到它。”如果你还没有设置`plugins`目录，请在项目的根目录下创建一个。在这个目录内，创建一个名为`dayjs.ts`的新文件。
- en: Initializing Dayjs with configuration
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用配置初始化Dayjs
- en: In your newly created `dayjs.ts` file, you’ll need to import `Dayjs` and initialize
    it with the necessary configurations. Once initialized, we’ll use Vue’s `provide`
    method to make the `FromNow` function available throughout the application. This
    capability will enable us to represent dates in a more user-friendly, relative
    format such as “1 day ago” or “2 weeks ago.”
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在你新创建的`dayjs.ts`文件中，你需要导入`Dayjs`并使用必要的配置初始化它。一旦初始化，我们将使用Vue的`provide`方法使`FromNow`函数在应用中可用。这种能力将使我们能够以更用户友好的相对格式表示日期，例如“1天前”或“2周前”。
- en: 'Here’s the code for the plugin:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是插件的代码：
- en: '[PRE30]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Here’s a breakdown of the code:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是代码的分解：
- en: The plugin begins by importing the `Dayjs` library along with its `relativeTime`
    plugin.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 插件首先导入`Dayjs`库及其`relativeTime`插件。
- en: We use Nuxt’s `defineNuxtPlugin` method to create the plugin.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用Nuxt的`defineNuxtPlugin`方法来创建插件。
- en: Inside the plugin, a function called `fromNow` is defined. It takes a date string
    and uses the `Dayjs` `.fromNow()` method to return the relative time difference
    in a human-readable format.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在插件内部，定义了一个名为`fromNow`的函数。它接受一个日期字符串，并使用`Dayjs`的`.fromNow()`方法以人类可读的格式返回相对时间差。
- en: Finally, the `provide` method is used to make this function globally available
    throughout our Nuxt application.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，使用`provide`方法使这个函数在Nuxt应用的全局范围内可用。
- en: Using the global FromNow function for the property details page
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在属性详情页使用全局FromNow函数
- en: Once you’ve successfully created and integrated the `Dayjs` plugin into your
    Nuxt application, the next step is to utilize it in your components or pages.
    Here, we’ll incorporate it into our property details page.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你成功创建并整合了`Dayjs`插件到你的Nuxt应用中，下一步就是将其用于你的组件或页面。在这里，我们将将其整合到我们的属性详情页中。
- en: 'Locate the page: `pages\properties\[id].vue`. Below the property description,
    insert the following code:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 定位到页面：`pages\properties\[id].vue`。在属性描述下方插入以下代码：
- en: '[PRE31]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The `$fromNow` function is now globally available due to the plugin we created
    earlier. It takes `property.listedDate` as an argument and displays it in a human-readable
    format.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们之前创建的插件，`$fromNow` 函数现在全局可用。它接受 `property.listedDate` 作为参数，并以可读的格式显示。
- en: One of the advantages of the prerequisites extenstions that we installed in
    VS Code is that your IDE will recognize the provided helpers in the `plugins`
    directory. This means that you’ll benefit from Intellisense support when you type
    `$fromNow`, with autocomplete suggestions and even parameter hints, making your
    development process more efficient.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 VS Code 中安装的先决条件扩展之一的优势是，你的 IDE 将会识别 `plugins` 目录中提供的辅助工具。这意味着当你输入 `$fromNow`
    时，你将受益于 Intellisense 支持，包括自动完成建议甚至参数提示，使你的开发过程更加高效。
- en: '![Figure 3.10: plugins provide Intellisense](img/B19760_03_10.jpg)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.10：插件提供 Intellisense](img/B19760_03_10.jpg)'
- en: 'Figure 3.10: plugins provide Intellisense'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.10：插件提供 Intellisense
- en: To sum up, we walked through the process of creating a Nuxt plugin to integrate
    `Dayjs` for date formatting. We then used this globally available `fromNow` function
    for the property details page to display dates in a human-readable format.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，我们回顾了创建 Nuxt 插件以集成 `Dayjs` 进行日期格式化的过程。然后，我们使用这个全局可用的 `fromNow` 函数在属性详情页面中显示日期的可读格式。
- en: Summary
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we dived into advanced Nuxt 3 features by crafting a real estate
    listing project. We started by setting up a Nuxt 3 project, incorporating Tailwind
    CSS and Google Fonts—basics that we’ve touched on before. We quickly moved on
    to defining a default website layout and learning how to override it for special
    cases, such as a 404 page. TypeScript support had its moment too, as we developed
    the home page. Next, we created a dynamic listing page for displaying properties
    and followed that by building out individual property detail pages. We wrapped
    up by integrating `Dayjs` via a custom plugin for date formatting. Along the way,
    key Nuxt 3 concepts such as routing, layouts, and plugins served as guideposts,
    helping us build a well-rounded application. This chapter aimed to level up your
    Nuxt 3 expertise, making you more than ready for complex projects.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们通过制作一个房地产列表项目深入探讨了高级 Nuxt 3 功能。我们首先设置了一个 Nuxt 3 项目，结合了 Tailwind CSS 和
    Google Fonts——这是我们之前接触过的基本知识。我们很快转向定义默认的网站布局，并学习如何为特殊案例（如 404 页面）覆盖它。TypeScript
    支持在我们的主页开发中也占有一席之地。接下来，我们创建了一个动态列表页面来显示属性，然后构建了单个属性详情页面。我们通过集成 `Dayjs`（通过自定义插件进行日期格式化）来结束。在这个过程中，关键
    Nuxt 3 概念如路由、布局和插件作为指南针，帮助我们构建了一个全面的应用程序。本章旨在提升你的 Nuxt 3 知识水平，让你为复杂项目做好准备。
- en: 'In the upcoming [*Chapter 4*](B19760_04.xhtml#_idTextAnchor080), we’ll shift
    our focus to a new challenge: building a weather dashboard. The chapter will be
    your hands-on guide to understanding state management in a Nuxt application using
    Pinia. It’s not just theory; you’ll be building a practical, real-world application
    where you’ll manage the state of multiple cities and their weather data.'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 在即将到来的[*第 4 章*](B19760_04.xhtml#_idTextAnchor080)中，我们将把重点转移到新的挑战：构建天气仪表板。这一章将是你了解使用
    Pinia 在 Nuxt 应用程序中状态管理的实践指南。这不仅仅是理论；你将构建一个实用的、现实世界的应用程序，其中你将管理多个城市及其天气数据的状态。
- en: Practice questions
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习问题
- en: How do you set up a default layout in a Nuxt 3 project?
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你如何在 Nuxt 3 项目中设置默认布局？
- en: How do you create an error page?
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你如何创建一个错误页面？
- en: Does Nuxt support TypeScript in components or props?
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Nuxt 是否支持组件或 props 中的 TypeScript？
- en: How do you create dynamic pages?
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你如何创建动态页面？
- en: How do you validate the dynamic pages and redirect to a 404 page if they’re
    not valid?
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你如何验证动态页面，并在它们无效时重定向到 404 页面？
- en: What is a Nuxt plugin? What are the primary benefits of them?
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是 Nuxt 插件？它们的主要好处是什么？
- en: How do you implement a plugin such as Dayjs for date formatting in Nuxt 3?
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你如何在 Nuxt 3 中实现日期格式化的插件，例如 Dayjs？
- en: Further reading
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Nuxt Routing: [https://nuxt.com/docs/getting-started/routing](https://nuxt.com/docs/getting-started/routing)'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Nuxt 路由：[https://nuxt.com/docs/getting-started/routing](https://nuxt.com/docs/getting-started/routing)
- en: 'Vue plugins: [https://vuejs.org/guide/reusability/plugins](https://vuejs.org/guide/reusability/plugins)'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vue 插件：[https://vuejs.org/guide/reusability/plugins](https://vuejs.org/guide/reusability/plugins)
- en: 'Nuxt pages directory: [https://nuxt.com/docs/guide/directory-structure/pages](https://nuxt.com/docs/guide/directory-structure/pages)'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Nuxt 页面目录：[https://nuxt.com/docs/guide/directory-structure/pages](https://nuxt.com/docs/guide/directory-structure/pages)
- en: 'Nuxt layouts directory: [https://nuxt.com/docs/guide/directory-structure/layouts](https://nuxt.com/docs/guide/directory-structure/layouts)'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Nuxt 布局目录：[https://nuxt.com/docs/guide/directory-structure/layouts](https://nuxt.com/docs/guide/directory-structure/layouts)
- en: 'Nuxt plugins directory: [https://nuxt.com/docs/guide/directory-structure/plugins](https://nuxt.com/docs/guide/directory-structure/plugins)'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Nuxt 插件目录：[https://nuxt.com/docs/guide/directory-structure/plugins](https://nuxt.com/docs/guide/directory-structure/plugins)
- en: 'Dayjs documentation: [https://day.js.org/docs/en/installation/installation](https://day.js.org/docs/en/installation/installation)'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Dayjs 文档：[https://day.js.org/docs/en/installation/installation](https://day.js.org/docs/en/installation/installation)
