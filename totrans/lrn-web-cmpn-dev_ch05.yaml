- en: Chapter 5. Developing Web Components Using Mozilla Brick
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will learn about the Mozilla Brick UI components. We will
    cover the installation and configuration of Brick in an application. We will also
    explore what is upcoming in Mozilla Brick 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: What is the Brick library?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Mozilla Brick library provides a set of elements based on the web component
    specification. The motto behind the Brick framework is *strong opinions*, *tightly
    scoped*. This means that the Brick framework does not focus on code structure,
    data binding, or any other problem. It provides the web interface that can be
    easily integrated with any other library. Brick elements are developed on top
    of the custom element API. This custom element API involves shadow DOM, HTML Imports,
    template element, and custom element. Brick provides a standard interface that
    can easily be interpolated with other application frameworks.
  prefs: []
  type: TYPE_NORMAL
- en: Mozilla Brick provided a **UIKit** for the web that can be used by the developers
    to create web application. Brick components are written in vanilla style JavaScript
    for development.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To find out more about Mozilla Brick framework visit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mozbrick.github.io/](https://mozbrick.github.io/)'
  prefs: []
  type: TYPE_NORMAL
- en: Mozilla Brick 1.0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The current released version of Mozilla Brick is 1.0\. The following diagram
    shows the building blocks of the Mozilla Brick framework:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Mozilla Brick 1.0](img/image00311.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The details of the preceding Mozilla Brick 1.0 block diagram are listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Platform**: This represents the native support for web component specification
    and the polyfill script files for unsupported features.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**X-Tag**: This represents the X-Tag libraries to create elements.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Brick web components**: This represents the UI toolkit of built-in elements
    for developers to use in web applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mozilla Brick 2.0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Mozilla Brick 2.0 is the new version of Brick framework. This library is released
    for application development. The following screenshot shows the block diagram
    of Mozilla Brick 2.0:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Mozilla Brick 2.0](img/image00312.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The details of the preceding Mozilla Brick 2.0 block diagram are listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Platform**: This represents the native support for web component specification
    and the polyfill script files for unsupported features. This polyfill file is
    `platform.js`, which has been used by the PolymerJS framework. In the current
    release of PolymerJS, the `platform.js` file has been renamed to `webcomponents.js`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can find more information on polyfill using the following link:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[http://webcomponents.org/polyfills](http://webcomponents.org/polyfills)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Brick web components**: This represents a set of built-in UI elements that
    can be used by the developer in web application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Mozilla Brick
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Mozilla Brick framework can be installed using the Bower package manager.
    If Bower is not installed on your system, then use the following link to install
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://bower.io/#install-bower](http://bower.io/#install-bower)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Assuming that the Bower is installed on your system, use the following command
    to install Mozilla Brick:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the terminal with Mozilla Brick installation
    using the Bower package manager:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Mozilla Brick](img/image00313.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the Mozilla Brick is installed successfully, it creates a parent directory
    `bower_components` where other Brick components are copied to their respective
    subdirectories. The following screenshot shows the terminal with the created directory
    structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Mozilla Brick](img/image00314.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Configuring Mozilla Brick
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Mozilla Brick library can be configured to a web application by including
    two files inside the `<head>` element. These two files are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`platform.js`: This file contains all the polyfill scripts needed for supporting
    web component specification. The `platform.js` polyfill library is present inside
    the platform subdirectory. The following screenshot shows the terminal with the
    `platform.js` file:![Configuring Mozilla Brick](img/image00315.jpeg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Brick.html`: This file combines all the Brick elements into a single file
    and places it inside the `dist` subdirectory under `brick` directory. The following
    screenshot shows the terminal for the `brick.html` directory structure:![Configuring
    Mozilla Brick](img/image00316.jpeg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Brick framework library can be added to a web page by including the `platform.js`
    polyfill and the `brick.html` file. The following code shows the HTML code for
    including Brick framework in the web page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Built-in components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Mozilla Brick 1.0 has many built-in components for web application development.
    In this section, we will explore some of them.
  prefs: []
  type: TYPE_NORMAL
- en: The brick-calendar element
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `brick-calendar` element represents a calendar component and can be used
    by calling the following custom tag in the HTML page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The `brick-calendar` element can be used by including polyfill and calendar
    definition files in the web application. The following code can be included to
    use the Brick''s calendar component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the `brick-calendar` component rendered in a
    browser, and the HTML element inspection using Chrome developer console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The brick-calendar element](img/image00317.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The brick-flipbox element
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `brick-flipbox` element is used for flipping between content using animations,
    and can be used by calling the following custom tag in the HTML page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The `brick-flipbox` element can be used by including polyfill and flipbox definition
    files in the web application. The following code can be included to use the Brick''s
    flipbox component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s check out an example of using `brick-flipbox` in a web application.
    The following code contains the use of flipbox:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding code is listed in the following screenshot showing
    the content of flipbox and a **Flip** button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The brick-flipbox element](img/image00318.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'When the **Flip** button is pressed, then the callback method gets called.
    The callback method gets the flipbox instance and calls the `toggle` method. The
    `toggle` method flips the content based on the `direction` property, which is
    set to `left`. This method prints the value of the `flipped` property, which returns
    the Boolean value `true` if the flipbox is flipped. The following screenshot shows
    the console log message when the **Flip** button is pressed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The brick-flipbox element](img/image00319.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can find more information about the `brick-flipbox` element using following
    link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mozbrick.github.io/docs/brick-flipbox.html](https://mozbrick.github.io/docs/brick-flipbox.html)'
  prefs: []
  type: TYPE_NORMAL
- en: The brick-deck element
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `brick-deck` element contains a set of cards. Using deck elements, the
    cards can be ordered. The cards inside the deck can have their own transition.
    A `brick-deck` element can be used by including the following code in the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The details of the preceding code snippet are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The `<brick-deck>` element is the parent element to be used for the deck.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `<brick-card>` element is the child element for the deck.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `brick-deck` element can be used by including polyfill and deck definition
    files in the web application. The following code can be included to use the Brick''s
    deck component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s checkout an example using `brick-deck` in a web application. The following
    code contains the use of a deck containing cards with different fruit names:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The details of the preceding code are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'A deck is created using the `<brick-deck>` element with the following properties
    set to some predefined values. The details of these properties are listed as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`selected-index`: This property represents the default selected card inside
    the deck. In this example, this property is set to `0`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`transition-type`: This property represents the animation direction that the
    deck will apply to the child cards. In this example, this has the `slide-up` value.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: There are two buttons representing next and previous card navigation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The two buttons having the `nextCard` and `prevCard` IDs are attached with the
    `click` event. This event binding is done inside the `WebComponentsReady` event
    callback.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When the user presses the `nextCard` button, the deck moves to the next card,
    and when the user presses the `prevCard` button, the deck moves to the previous
    card.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the output of the preceding code where the default
    card with index 0 is selected:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The brick-deck element](img/image00320.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'When the user presses the `nextCard` button, the deck moves to the next card
    with the index 1\. The value of the `selected-index` property is now 1\. The following
    screenshot shows the next card with the **Apple** fruit:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The brick-deck element](img/image00321.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can find more information about the `brick-deck` card element using the
    following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://mozbrick.github.io/docs/brick-deck.html](http://mozbrick.github.io/docs/brick-deck.html)'
  prefs: []
  type: TYPE_NORMAL
- en: The brick-tabbar element
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `brick-tabbar` element represents a tab. A tab element provides a single
    content area with multiple panels, each associated with a header in a list. A
    `brick-tabbar` element can be used by including the following code in the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The details of the preceding code are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The `<brick-tabbar>` element is the parent element to be used for a group of
    tabs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `<brick-tabbar-tab>` element is the child tabbar and represents the individual
    tab.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `brick-tabbar` element can be used by including polyfill and tabbar definition
    files in the web application. The following code can be included to use the Brick''s
    tabbar component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s check out an example using `brick-tabbar` in a web application. The
    following code contains the use of tabbar containing different tabs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The details of the preceding code are listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three different tabs: **Fruits**, **Flowers**, and **Vegetables**.
    They are defined using `<brick-tabbar-tab>` inside a `<brick-tabbar>` element.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are three different buttons defined for selecting fruits, flowers, and
    vegetables. The callback function attached to each button has a `select` method
    to dynamically select a tab element.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the output of the preceding code with three
    different tabs **Fruits**, **Flowers**, and **Vegetables**. The **Fruits** tab
    element is selected by default:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The brick-tabbar element](img/image00322.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'When the user presses the **Select Vegetables** button, the tab selection focuses
    the changes to **Vegetables** with the `select` property set to `true`. The following
    screenshot shows that the **Vegetables** tab element is selected programmatically:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The brick-tabbar element](img/image00323.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can find more information about the `brick-tabbar` element using the following
    link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mozbrick.github.io/docs/brick-tabbar.html](https://mozbrick.github.io/docs/brick-tabbar.html)'
  prefs: []
  type: TYPE_NORMAL
- en: The brick-action element
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `brick-action` element binds an event with a method of a different element.
    A `brick-action` element has a listener, which continuously listens to the source
    element to detect the specified event and calls the method of the target element.
    A `brick-action` element can be used by including the following code in the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The `brick-action` element can be used by including polyfill and action definition
    files in the web application. The following code can be included to use the Brick''s
    action component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s check out an example using `brick-action` in a web application. The
    following code contains the use of an action element with a flipbox:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The details of the preceding code are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: A `<brick-flipbox>` element has two different lists of fruits and flowers with
    the `id` attribute set to `fruitFlowerbox`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `<brick-action>` element is defined with the `target` and `action` attribute.
    The `target` attribute is set to `fruitFlowerbox` and the `action` attribute is
    set to the `toggle` method.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When the user clicks on the button present inside the `<brick-action>` element,
    it finds the `target` element `fruitFlowerbox` and executes its `toggle` method.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the output of the preceding code where the `brick-action`
    element is bound to a flipbox:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The brick-action element](img/image00324.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'When the user presses the **Toggle Fruits & Flowers** button the `toggle` method
    gets called on the flipbox. The following screenshot shows the output of the flipbox
    after the **Toggle Fruits & Flowers** button is clicked on:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The brick-action element](img/image00325.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can find more information about the `brick-action` element using the following
    link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mozbrick.github.io/docs/brick-action.html](https://mozbrick.github.io/docs/brick-action.html)'
  prefs: []
  type: TYPE_NORMAL
- en: The brick-menu element
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `brick-menu` element represents a simple menu containing different items
    inside it for selection. A menu element can be used inside a page by including
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The `brick-menu` element can be used by including polyfill and menu definition
    files in the web application. The following code can be included to use the Brick''s
    menu component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s check out an example using `brick-menu` in a web application. The following
    code contains the use of the menu element with different items:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, a menu is defined using the `<brick-menu>` element.
    It contains `Fruits`, `Flowers`, `Vegetables`, and `Beverages` as the `<brick-item>`
    elements. The following screenshot shows the output of the preceding code with
    a rendered menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The brick-menu element](img/image00326.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The X-Tag library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Mozilla Brick 1.0 framework is based on the X-Tag library. You can find
    details about X-Tag in [Chapter 1](lrn-web-cmpn-dev_ch01.html#aid-DB7S1 "Chapter 1. Introducing
    Web Components"), *Introducing Web Components*. The following sections focus on
    custom web component development using X-Tag.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can create your own bundle and download the X-Tag library using the following
    link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.x-tags.org/download](http://www.x-tags.org/download)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the downloaded page with checkboxes, and with
    different features that can be selected to make a custom build:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The X-Tag library](img/image00327.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The downloaded build directory contains two files. Details about these files
    are listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: '`x-tag-components.min.css`: This is a minified CSS file containing style attributes
    for the downloaded content.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`x-tag-components.min.js`: This is a minified JS file containing core X-Tag
    library and polyfill script files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you want to know more about X-Tag, use the following link:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[http://x-tag.readme.io/v1.0/docs/getting-started](http://x-tag.readme.io/v1.0/docs/getting-started)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Developing a digital clock using X-Tag
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will develop a `<ts-clock>` element using X-Tag libraries
    with lifecycle methods. The definition code for `<ts-clock>` element has the following
    three different sections:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The X-Tag core libraries with polyfill script bundled as a single minified
    JS file named `x-tag-components.min.js`. This JS file should be included in the
    top `ts-clock.html` file containing the definition of a digital clock in the `<script>`
    element. The following code shows the `<script>` element for X-Tag libraries:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `<template>` element contains the HTML markup for the digital clock and
    CSS style attributes for the clock''s template element. The template code of the
    digital clock element is listed as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `<script>` element contains the registration and definition of the `<ts-clock>`
    element using the `xtag.register` method. The registration script for the `<ts-clock>`
    element is listed as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The details of the preceding code are listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: The `thisDoc` variable contains the reference of `ownerDocument` of the `_currentScript`
    value before jumping to the registering of the `<ts-clock>` element.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `created` callback method creates a `shadowRoot` element using the `createShadowRoot`
    method, and appends the template content by cloning it using the `cloneNode` method.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `<ts-clock>` element has three attributes `hour`, `minute`, and `second`
    defined inside the `accessors` block. These attributes are linked to `{}`, which
    binds these properties as attributes of the `<ts-clock>` element.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `inserted` callback contains the `window.setTimeOut` method. It contains
    the code for setting the value of the `hour`, `minute`, and `second` attribute
    using the `setAttribute` method. This code block is called every 1 second.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `attributeChanged` callback contains code for DOM manipulation based on
    the new value of the changed attribute.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `<ts-clock>` element can be used by importing the definition to a web page
    using `HTMLImport`. The following code shows the use of the `<ts-clock>` element
    by importing `HTMLImport` to a page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The details of the preceding code are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `<ts-clock>` element is included to the page using the following code:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `<ts-clock>` element is called by including the following code inside the
    `<body>` element:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Inside the `WebComponentsReady` event callback function, the `<ts-clock>` element
    is referred using the `document.querySelector` method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The value of the `hour`, `minute`, and `second` attribute is accessed using
    the `getAttribute` method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the output of the preceding code, where a digital
    clock is rendered by including the `<ts-clock>` custom element:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Developing a digital clock using X-Tag](img/image00328.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the preceding screenshot, we can see that the `hour`, `minute`, and `second`
    attributes are created because the `accessors` properties are set to `{}`. The
    following screenshot shows the Chrome developer console with the log messages
    printed by the `getAttribute` method for getting the values of `hours`, `minutes`,
    and `seconds`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Developing a digital clock using X-Tag](img/image00329.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about the Mozilla Brick library for web application
    development using web component specification. In the next chapter, we will learn
    about the ReactJS framework.
  prefs: []
  type: TYPE_NORMAL
