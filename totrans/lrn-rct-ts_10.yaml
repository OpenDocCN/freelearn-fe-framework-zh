- en: '10'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '10'
- en: Interacting with GraphQL APIs
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与 GraphQL API 交互
- en: GraphQL APIs are web APIs that have a special language for interacting with
    them. These APIs are a very popular alternative to REST APIs with React frontends.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: GraphQL API 是具有与它们交互的特殊语言的 Web API。这些 API 是 React 前端中非常流行的 REST API 的替代品。
- en: In this chapter, we’ll first understand the special GraphQL language, executing
    some basic queries on the GitHub GraphQL API. We will then build a React app that
    allows users to search for a GitHub repository and star it, experiencing the benefits
    of GraphQL over REST.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将首先了解特殊的 GraphQL 语言，在 GitHub GraphQL API 上执行一些基本查询。然后我们将构建一个 React 应用程序，允许用户搜索
    GitHub 仓库并为其加星，体验 GraphQL 相对于 REST 的优势。
- en: The app will use the browser’s `fetch` function with React Query to interact
    with the GitHub GraphQL API. We will then refactor the implementation of the app
    to use a specialized GraphQL client called **Apollo Client**.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序将使用带有 React Query 的浏览器 `fetch` 函数与 GitHub GraphQL API 交互。然后我们将重构应用程序的实现，使用一个称为
    **Apollo 客户端** 的专用 GraphQL 客户端。
- en: 'We’ll cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖以下主题：
- en: Understanding the GraphQL syntax
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 GraphQL 语法
- en: Getting set up
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备工作
- en: Using the React Query with fetch
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 React Query 和 fetch
- en: Using Apollo Client
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Apollo 客户端
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'We will use the following technologies in this chapter:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用以下技术：
- en: '**Node.js** and **npm**: You can install them at [https://nodejs.org/en/download/](https://nodejs.org/en/download/).'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Node.js** 和 **npm**：您可以在 [https://nodejs.org/en/download/](https://nodejs.org/en/download/)
    安装它们。'
- en: '**Visual Studio Code**: You can install it at [https://code.visualstudio.com/](https://code.visualstudio.com/).'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Visual Studio Code**：您可以在 [https://code.visualstudio.com/](https://code.visualstudio.com/)
    安装它。'
- en: '**GitHub**: You’ll need a GitHub account. If you haven’t got an account, you
    can sign up at the following link: [https://github.com/join](https://github.com/join).'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GitHub**：您需要一个 GitHub 账户。如果您还没有账户，您可以在以下链接注册：[https://github.com/join](https://github.com/join)。'
- en: '**GitHub GraphQL API Explorer**: We’ll use this tool to play with the syntax
    of GraphQL queries and mutations. The tool can be found at [https://docs.github.com/en/graphql/overview/explorer](https://docs.github.com/en/graphql/overview/explorer).'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GitHub GraphQL API 探索器**：我们将使用这个工具来玩 GraphQL 查询和变异的语法。该工具可在 [https://docs.github.com/en/graphql/overview/explorer](https://docs.github.com/en/graphql/overview/explorer)
    找到。'
- en: All the code snippets in this chapter can be found online at [https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/tree/main/Chapter10](https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/tree/main/Chapter10).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中所有代码片段都可以在以下网址找到：[https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/tree/main/Chapter10](https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/tree/main/Chapter10)。
- en: Understanding the GraphQL syntax
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 GraphQL 语法
- en: Like React Query, GraphQL refers to a request to fetch data as a **query**.
    In the following subsections, we’ll learn how to write a basic GraphQL query that
    returns data from a couple of fields. These fields will have primitive values
    and so the result will be flat. We’ll then learn how to write a more advanced
    query containing object-based field values that have their own properties. Lastly,
    we will learn how to make queries more reusable using parameters.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 与 React Query 类似，GraphQL 将获取数据的请求称为 **查询**。在以下子节中，我们将学习如何编写一个基本的 GraphQL 查询，从几个字段返回数据。这些字段将具有原始值，因此结果将是扁平的。然后我们将学习如何编写一个更高级的查询，包含基于对象的字段值，这些值有自己的属性。最后，我们将学习如何使用参数使查询更具可重用性。
- en: Returning flat data
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 返回扁平数据
- en: 'Carry out the following steps to use the GitHub GraphQL API Explorer to get
    information about your GitHub user account:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以使用 GitHub GraphQL API 探索器获取您的 GitHub 用户账户信息：
- en: 'Open the following URL in a browser to open the GitHub GraphQL API Explorer:
    [https://docs.github.com/en/graphql/overview/explorer](https://docs.github.com/en/graphql/overview/explorer).'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中打开以下 URL 以打开 GitHub GraphQL API 探索器：[https://docs.github.com/en/graphql/overview/explorer](https://docs.github.com/en/graphql/overview/explorer)。
- en: 'Sign in using the **Sign in with GitHub** button if you aren’t signed in already.
    A GraphQL API Explorer page appears, as follows:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您尚未登录，请使用 **Sign in with GitHub** 按钮登录。将出现一个 GraphQL API 探索器页面，如下所示：
- en: '![Figure 10.1 – GitHub GraphQL API Explorer](img/B19051_10_01.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.1 – GitHub GraphQL API 探索器](img/B19051_10_01.jpg)'
- en: Figure 10.1 – GitHub GraphQL API Explorer
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.1 – GitHub GraphQL API 探索器
- en: 'In the top-left panel of the GraphQL API Explorer, enter the following query:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 GraphQL API 探索器的右上角面板中，输入以下查询：
- en: '[PRE0]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The query starts with the `query` keyword to specify that the operation is a
    query to fetch data (rather than update data). It is worth noting that the `query`
    keyword is optional because the operation defaults to a query.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 查询以`query`关键字开头，以指定操作是一个用于获取数据（而不是更新数据）的查询。值得注意的是，`query`关键字是可选的，因为操作默认为查询。
- en: After the operation, the data to be returned is specified by specifying the
    required objects and fields. In our example, we have specified that the `name`
    field in the `viewer` object is returned.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在操作之后，通过指定所需的对象和字段来指定要返回的数据。在我们的例子中，我们指定返回`viewer`对象中的`name`字段。
- en: Click the **Execute Query** button, which is the round button containing the
    black triangle.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**执行查询**按钮，这是一个包含黑色三角形的圆形按钮。
- en: 'The query result appears to the right of the query as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 查询结果如下显示在查询的右侧：
- en: '![Figure 10.2 – GitHub GraphQL](img/B19051_10_02.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![图10.2 – GitHub GraphQL](img/B19051_10_02.jpg)'
- en: Figure 10.2 – GitHub GraphQL
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.2 – GitHub GraphQL
- en: The data we requested is returned as a JSON object. The `name` field value should
    be your name stored in your GitHub account.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们请求的数据以JSON对象的形式返回。`name`字段值应该是你存储在GitHub账户中的名字。
- en: 'On the right-hand side of the query results is **Documentation Explorer**.
    Expand this panel if it’s not already expanded:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在查询结果的右侧是**文档浏览器**。如果尚未展开，请展开此面板：
- en: '![Figure 10.3 – Documentation Explorer](img/B19051_10_03.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![图10.3 – 文档浏览器](img/B19051_10_03.jpg)'
- en: Figure 10.3 – Documentation Explorer
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.3 – 文档浏览器
- en: Click on the `viewer`, which is the one we just queried. The object type appears
    to the right of the object name, and the object description appears underneath.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`viewer`，这是我们刚刚查询的对象。对象类型出现在对象名称的右侧，对象描述出现在下方。
- en: Note
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'Like many languages, GraphQL’s fields have types – there are built-in types
    such as `String`, `Int`, and `Boolean`, as well as the ability to create custom
    types. See the following link for more information: [https://graphql.org/learn/schema/#type-language](https://graphql.org/learn/schema/#type-language).'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 与许多语言一样，GraphQL的字段有类型 – 有内置类型如`String`、`Int`和`Boolean`，以及创建自定义类型的能力。有关更多信息，请参阅以下链接：[https://graphql.org/learn/schema/#type-language](https://graphql.org/learn/schema/#type-language)。
- en: 'Scroll down to the `viewer` object in **Documentation Explorer** (it should
    be right at the bottom):'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 滚动到**文档浏览器**中的`viewer`对象（它应该在底部）：
- en: '![Figure 10.4 – viewer object in Documentation Explorer](img/B19051_10_04.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![图10.4 – 文档浏览器中的viewer对象](img/B19051_10_04.jpg)'
- en: Figure 10.4 – viewer object in Documentation Explorer
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.4 – 文档浏览器中的viewer对象
- en: 'Click on the `User` type next to the `viewer` object name in `User` type are
    listed:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`viewer`对象旁边的`User`类型，在`User`类型中列出：
- en: '![Figure 10.5 – Fields in the User type](img/B19051_10_05.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![图10.5 – User类型中的字段](img/B19051_10_05.jpg)'
- en: Figure 10.5 – Fields in the User type
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.5 – User类型中的字段
- en: 'Let’s add `avatarUrl` to our query, as this is an additional field available
    to us:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在查询中添加`avatarUrl`字段，因为这个字段是我们可用的附加字段：
- en: '[PRE5]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We simply add the `avatarUrl` field inside the `viewer` object with a carriage
    return between the `name` and `avatarUrl` fields.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需在`viewer`对象内部添加`avatarUrl`字段，并在`name`字段和`avatarUrl`字段之间添加一个换行符。
- en: 'The `avatarUrl` field is added to the JSON result if you execute the query.
    This should be a path to an image of you:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你执行查询，`avatarUrl`字段将被添加到JSON结果中。这应该是一个指向你照片的路径：
- en: '![Figure 10.6 – Updated query result with avatarUrl](img/B19051_10_06.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![图10.6 – 包含avatarUrl的更新查询结果](img/B19051_10_06.jpg)'
- en: Figure 10.6 – Updated query result with avatarUrl
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.6 – 包含avatarUrl的更新查询结果
- en: That completes our first graphQL query.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这就完成了我们的第一个graphQL查询。
- en: We are already seeing how flexible GraphQL is with being able to specify which
    fields we want to be returned in the response. Next, we’ll create another query
    that returns a hierarchical structure.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们已经看到了GraphQL如何灵活，能够指定我们希望在响应中返回哪些字段。接下来，我们将创建另一个返回层次结构的查询。
- en: Returning hierarchical data
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 返回层次化数据
- en: 'We will make a more complex query now by returning an object-based field rather
    than just fields with primitive values. This will mean the result will have a
    hierarchical structure rather than being flat. We’ll query for a GitHub repository,
    returning its name, description, and the number of stars it has. So, carry out
    the following steps:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将通过返回基于对象的字段而不是只有原始值字段来创建一个更复杂的查询。这意味着结果将具有层次结构而不是扁平的。我们将查询GitHub仓库，返回其名称、描述和星级数。所以，执行以下步骤：
- en: 'Start by entering the following query into the query panel of the GitHub GraphQL
    API explorer:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，将以下查询输入到 GitHub GraphQL API 探索器的查询面板中：
- en: '[PRE11]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The query asks for the `id`, `name`, and `description` fields in the `repository` object.
    After the `repository` object is specified, two parameters for the `owner` and `name` of
    the repository are specified.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 查询请求 `repository` 对象中的 `id`、`name` 和 `description` 字段。在指定 `repository` 对象之后，指定了两个参数，用于仓库的
    `owner` 和 `name`。
- en: 'Let’s now request the number of stars against the repository. To do this, add
    the `totalCount` field within the `stargazers` object as follows:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们请求仓库的星标数量。为此，在 `stargazers` 对象中添加 `totalCount` 字段，如下所示：
- en: '[PRE18]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'If you execute the query, the result will appear like the following screenshot:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你执行查询，结果将类似于以下截图：
- en: '![Figure 10.7 – Query for a specific repository](img/B19051_10_07.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.7 – 查询特定仓库](img/B19051_10_07.jpg)'
- en: Figure 10.7 – Query for a specific repository
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.7 – 查询特定仓库
- en: That completes our second GraphQL query.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这就完成了我们的第二个 GraphQL 查询。
- en: So, GraphQL allows us to make a single web request for different bits of data,
    returning just the fields that we require. Doing a similar thing with a REST API
    would probably require multiple requests and we’d get a lot more data than we
    need to return. It is in these types of queries where GraphQL shines over REST.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，GraphQL 允许我们为不同的数据片段发出单个网络请求，只返回我们需要的字段。使用 REST API 做类似的事情可能需要多个请求，并且我们会得到比需要返回的更多数据。在这些类型的查询中，GraphQL
    在 REST 上表现得更加出色。
- en: Next, we will learn how to allow query parameter values to vary.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将学习如何允许查询参数值的变化。
- en: Specifying query parameters
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 指定查询参数
- en: The query we have just made already has parameters for the repository name and
    owner. However, the `owner` parameter is hardcoded to have a value of `"facebook"`,
    and the `name` parameter to have a value of `"react"`.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚做出的查询已经包含了仓库名称和所有者的参数。然而，`owner` 参数被硬编码为 `"facebook"` 的值，而 `name` 参数被设置为
    `"react"`。
- en: You may have noticed the **QUERY VARIABLES** panel under the query panel. This
    allows query parameter values to be specified. The query parameters then reference
    variable names instead of hardcoded values.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经注意到了查询面板下的 **查询变量** 面板。这允许指定查询参数值。然后查询参数引用变量名称而不是硬编码的值。
- en: 'Carry out the following steps to adjust the repository query so that the query
    parameters can vary:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以调整仓库查询，以便查询参数可以变化：
- en: 'Add the following query variables in the **QUERY** **VARIABLES** panel:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **查询** **变量** 面板中添加以下查询变量：
- en: '[PRE28]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: As you can see, the variables are specified using JSON syntax. We have named
    the variable for the repository owner, `owner`, and the variable for the repository
    name, `name`.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，变量使用 JSON 语法指定。我们为仓库所有者命名变量为 `owner`，为仓库名称命名变量为 `name`。
- en: 'Update the query to reference the query variables as follows:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新查询以如下引用查询变量：
- en: '[PRE32]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: The query parameters are specified in parentheses after the `query` keyword.
    The parameter names must be prefixed with a dollar sign (`$`). The type for each
    parameter is specified after a colon (`:`) – both parameters are `String` in our
    case. The exclamation mark (`!`) after the type means it is a required query parameter.
    The parameters can then be referenced within the query, which, in our case, is
    where we request the repository object.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 查询参数在 `query` 关键字之后用括号指定。参数名称必须以美元符号（`$`）为前缀。每个参数的类型在冒号（`:`）之后指定——在我们的例子中，两个参数都是
    `String`。类型后面的感叹号（`!`）表示它是一个必需的查询参数。然后可以在查询中引用这些参数，在我们的例子中，这是请求仓库对象的地方。
- en: If we execute the query, the JSON result will be the same as the query with
    the hardcoded repository owner and name criteria.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们执行查询，JSON 结果将与具有硬编码的仓库所有者和名称标准的查询相同。
- en: 'Now, change the variable values to target a different repository and rerun
    the query. The JSON result will contain the same fields but with values for the
    repository requested. The following is the query and result for the TypeScript
    repository:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，更改变量值以针对不同的仓库重新运行查询。JSON 结果将包含相同的字段，但包含请求的仓库的值。以下是对 TypeScript 仓库的查询和结果：
- en: '![Figure 10.8 – Query with parameters for the TypeScript repository](img/B19051_10_08.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.8 – TypeScript 仓库的参数查询](img/B19051_10_08.jpg)'
- en: Figure 10.8 – Query with parameters for the TypeScript repository
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.8 – TypeScript 仓库的参数查询
- en: We are now getting comfortable with reading data from a GraphQL server. Next,
    we’ll learn how to request changes to GraphQL data.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们已经熟悉了从GraphQL服务器读取数据。接下来，我们将学习如何请求更改GraphQL数据。
- en: GraphQL mutations
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GraphQL变更
- en: A change to data in GraphQL is referred to as a **mutation**. Starring a repository
    is a change to the underlying data, so we can class this as an example of a mutation.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在GraphQL中对数据进行更改被称为**变更**。星标仓库是对底层数据的更改，因此我们可以将其视为变更的一个示例。
- en: 'Carry out the following steps to create a mutation that stars a GitHub repository:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以创建一个星标GitHub仓库的变更：
- en: 'In order to star a repository, we need the repository ID. So, copy the repository
    ID of the last query result into your clipboard. The following is the ID of the
    TypeScript repository:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了星标一个仓库，我们需要仓库ID。因此，将最后查询结果的仓库ID复制到您的剪贴板。以下TypeScript仓库的ID：
- en: '[PRE37]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Replace the query variables with a variable for the repository ID we want to
    star:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将查询变量替换为我们想要星标的仓库ID的变量：
- en: '[PRE38]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Replace the content in the query panel with the following mutation:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将查询面板中的内容替换为以下变更：
- en: '[PRE41]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Let’s break down this code:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解这段代码：
- en: We prefix a mutation with the `mutation` keyword.
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们在`mutation`之前加上`mutation`关键字。
- en: We put parameters to be passed into the mutation after the `mutation` keyword
    in parentheses. In our case, we have a single parameter for the repository ID we
    want to star.
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们在括号中的`mutation`关键字之后放置要传递给`mutation`的参数。在我们的例子中，我们有一个用于我们想要星标的仓库ID的单个参数。
- en: '`addStar` is the mutation function we call, which has a parameter called `input`
    that we need to pass.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`addStar`是我们调用的`mutation`函数，它有一个名为`input`的参数，我们需要传递。'
- en: '`input` is actually an object that has a field called `starrableId` that we
    need to include. The value of this is the repository ID we want to star, so we
    set it to our `$repoId` repository ID variable.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`input`实际上是一个包含一个名为`starrableId`的字段的对象，我们需要包含这个字段。这个值是我们想要星标的仓库ID，所以我们将其设置为我们的`$repoId`仓库ID变量。'
- en: After the mutation parameters, we specify what we want to return in the response.
    In our case, we want to return the number of stars on the repository.
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`mutation`参数之后，我们指定响应中我们想要返回的内容。在我们的例子中，我们想要返回仓库上的星标数量。
- en: 'If we execute the mutation, the star will be added to the repository, and the
    new total number of stars will be returned:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们执行`mutation`，星标将被添加到仓库中，并返回新的总星标数量：
- en: '![Figure 10.9 – Mutation to star the repository](img/B19051_10_09.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.9 – 将仓库设置为星标](img/B19051_10_09.jpg)'
- en: Figure 10.9 – Mutation to star the repository
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.9 – 将仓库设置为星标
- en: 'That completes this section on getting comfortable with the GraphQL syntax.
    To recap, here are some key points:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 这就完成了本节关于熟悉GraphQL语法的介绍。为了回顾，以下是一些关键点：
- en: A GraphQL query fetches data, and a mutation changes data. These operations
    are specified with the `query` and `mutation` keywords, respectively.
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GraphQL查询获取数据，而变更则更改数据。这些操作分别使用`query`和`mutation`关键字指定。
- en: The data required in the response can be specified in the query/mutation, which
    helps the backend interactions be efficient.
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 响应中所需的数据可以在查询/变更中指定，这有助于后端交互更高效。
- en: Query parameter variables can be specified to allow a query/mutation to be reusable.
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查询参数变量可以被指定，以允许查询/变更可重用。
- en: Next, we will set up a React project that will eventually interact with the
    GitHub GraphQL API.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将设置一个React项目，该项目最终将与GitHub GraphQL API交互。
- en: Setting up the project
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置项目
- en: In this section, we will start by creating the project for the app we will build.
    We will build a React app that allows users to search for a GitHub repository
    and star it. It will use the GitHub GraphQL API, so we will generate a **personal
    access token** (**PAT**) for this and store it in an environment variable.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将首先创建我们将要构建的应用程序的项目。我们将构建一个React应用程序，允许用户搜索GitHub仓库并为其星标。它将使用GitHub GraphQL
    API，因此我们将为这个生成一个**个人访问令牌**（**PAT**），并将其存储在环境变量中。
- en: Creating the project
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建项目
- en: We will develop the app using Visual Studio Code and a new Create React App-based
    project setup. We’ve previously covered this several times, so we will not cover
    the steps in this chapter – instead, see [*Chapter 3*](B19051_03.xhtml#_idTextAnchor072),
    *Setting Up React* *and TypeScript*.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Visual Studio Code和一个基于Create React App的新项目设置来开发应用程序。我们之前已经多次介绍过这一点，所以在本章中我们将不会介绍这些步骤——相反，请参阅[*第3章*](B19051_03.xhtml#_idTextAnchor072)，*设置React*
    *和TypeScript*。
- en: We will style the app with Tailwind CSS. We have previously covered how to install
    and configure Tailwind in a Create React App in [*Chapter 5*](B19051_05.xhtml#_idTextAnchor127),
    *Approaches to Styling Frontends*. So, after you have created the React and TypeScript
    project, install and configure Tailwind.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Tailwind CSS来设置应用程序的样式。我们之前在[*第5章*](B19051_05.xhtml#_idTextAnchor127)，*前端样式方法*中介绍了如何安装和配置Tailwind在Create
    React App中。因此，在创建React和TypeScript项目后，安装并配置Tailwind。
- en: We will use React Hook Form to implement the form that creates blog posts, and
    the `@tailwindcss/forms` plugin to style the form. So, install the `@tailwindcss/forms`
    plugin and React Hook Form (see [*Chapter 7*](B19051_07.xhtml#_idTextAnchor188),
    *Working with Forms,* if you can’t remember how to do this).
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用React Hook Form来实现创建博客文章的表单，并使用`@tailwindcss/forms`插件来设置表单样式。因此，安装`@tailwindcss/forms`插件和React
    Hook Form（如果您忘记如何做，请参阅[*第7章*](B19051_07.xhtml#_idTextAnchor188)，*与表单一起工作*）。
- en: Now that the project is set up, next, we will gain access to the GitHub GraphQL
    API.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 现在项目已经设置好了，接下来，我们将获取访问GitHub GraphQL API的权限。
- en: Creating a PAT for the GitHub GraphQL API
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为 GitHub GraphQL API 创建个人访问令牌（PAT）
- en: 'The GitHub GraphQL API is protected by a PAT, which is a string of characters
    and is a common mechanism for protecting web APIs. Carry out the following steps
    to generate a PAT:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub GraphQL API受个人访问令牌（PAT）保护，它是一串字符，是保护Web API的常用机制。按照以下步骤生成PAT：
- en: 'In a browser, go to GitHub: [https://github.com/](https://github.com/).'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中，访问GitHub：[https://github.com/](https://github.com/)。
- en: Sign in to your GitHub account if you aren’t already signed in. You can create
    a GitHub account if you haven’t got one by using the **Sign** **Up** button.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您尚未登录，请登录您的GitHub账户。如果您还没有GitHub账户，可以通过**注册** **账户**按钮创建一个。
- en: Now, open the menu under your avatar and click **Settings**.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开您的头像下的菜单并点击**设置**。
- en: Next, access the **Developer Settings** option at the bottom of the left-hand
    bar.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，访问左侧栏底部的**开发者设置**选项。
- en: Go to the **Personal access tokens** page on the left-hand bar.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往左侧栏上的**个人访问令牌**页面。
- en: Click the **Generate new token** button to start creating the PAT. You will
    likely be prompted to input your password after clicking the button.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**生成新令牌**按钮开始创建PAT。点击按钮后，您可能需要输入密码。
- en: Before the token is generated, you will be asked to specify the scopes. Enter
    a token description, tick the repo and user scopes, and then click the **Generate**
    **token** button.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在生成令牌之前，您将被要求指定作用域。输入令牌描述，勾选仓库和用户作用域，然后点击**生成** **令牌**按钮。
- en: The token is then generated and displayed on the page. Take a copy of this because
    we’ll need this in the next section when building our app.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在页面上生成并显示令牌。请复制此令牌，因为我们将在下一节构建我们的应用程序时需要它。
- en: Creating environment variables
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建环境变量
- en: 'Before writing code that interacts with the GitHub GraphQL API, we will create
    environment variables for the API URL and the PAT:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写与GitHub GraphQL API交互的代码之前，我们将为API URL和PAT创建环境变量：
- en: 'Let’s start by creating an environment file to store the URL for the GitHub
    GraphQL API. Create a file called `.env` in the root of the project containing
    this variable, as follows:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从创建一个环境文件开始，用于存储GitHub GraphQL API的URL。在项目的根目录中创建一个名为`.env`的文件，包含以下变量：
- en: '[PRE50]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: This environment variable is injected into the code at build time and can be
    accessed by code using `process.env.REACT_APP_GITHUB_URL`. Environment variables
    in Create React App projects must be prefixed with `React_APP_`.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 此环境变量在构建时注入到代码中，可以通过`process.env.REACT_APP_GITHUB_URL`由代码访问。Create React App项目中的环境变量必须以`React_APP_`为前缀。
- en: 'For more information on environment variables, see the following link: [https://create-react-app.dev/docs/adding-custom-environment-variables/](https://create-react-app.dev/docs/adding-custom-environment-variables/).'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 关于环境变量的更多信息，请参阅以下链接：[https://create-react-app.dev/docs/adding-custom-environment-variables/](https://create-react-app.dev/docs/adding-custom-environment-variables/)。
- en: 'Now, we will create a second environment variable for the GitHub PAT token.
    However, we don’t want to commit this file to source code control, so place it
    in a file called `.env.local` at the root of the project:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将为GitHub PAT令牌创建第二个环境变量。但是，我们不想将此文件提交到源代码控制，所以将其放置在项目根目录下的`.env.local`文件中：
- en: '[PRE51]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '`.env.local` is in the `.gitignore` file, so this file won’t get committed
    to source code control, reducing the risk of your PAT getting stolen. Replace
    `your-token` with your PAT token in the preceding code snippet.'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '`.env.local` 在 `.gitignore` 文件中，因此此文件不会提交到源代码控制，从而降低了您的 PAT 被盗的风险。在上面的代码片段中将
    `your-token` 替换为您的 PAT 令牌。'
- en: That completes the creation of the environment variables.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 这样就完成了环境变量的创建。
- en: In the next section, we will start to build the app that will interact with
    the GitHub GraphQL API.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将开始构建一个将与 GitHub GraphQL API 交互的应用程序。
- en: Using React Query with fetch
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 React Query 和 fetch
- en: In this section, we will build an app containing a form that allows users to
    search and star GitHub repositories. The app will also have a header containing
    our name from GitHub. We will use the browser `fetch` function with React Query
    to interact with the GitHub GraphQL API. Let’s get started.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将构建一个包含表单的应用程序，允许用户搜索和星标 GitHub 仓库。该应用程序还将包含包含我们从 GitHub 的名字的头部。我们将使用带有
    React Query 的浏览器 `fetch` 函数与 GitHub GraphQL API 交互。让我们开始吧。
- en: Creating the header
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建头部
- en: We will create the header for the app, which will contain our GitHub name. We
    will create a `Header` component containing this, which will be referenced from
    the `App` component. The `Header` component will use React Query to execute a
    function that gets our GitHub name calling the GitHub GraphQL API.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建包含我们的 GitHub 名字的头部。我们将创建一个 `Header` 组件，其中包含此内容，它将从 `App` 组件中引用。`Header`
    组件将使用 React Query 执行一个函数，该函数调用 GitHub GraphQL API 获取我们的 GitHub 名字。
- en: Creating a function to get viewer information
  id: totrans-178
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建一个获取查看者信息的函数
- en: 'Carry out the following steps to create a function that makes a request to
    the GitHub GraphQL API to get details about the logged-in viewer:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以创建一个函数，该函数向 GitHub GraphQL API 发送请求以获取有关已登录查看者的详细信息：
- en: We will start by creating a folder for the API calls. Create an `api` folder
    in the `src` folder.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先创建一个用于 API 调用的文件夹。在 `src` 文件夹中创建一个名为 `api` 的文件夹。
- en: 'Now, we will create a type that the function will use. Create a file called
    `types.ts` in the `src/api` folder with the following content:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将创建一个函数将使用的类型。在 `src/api` 文件夹中创建一个名为 `types.ts` 的文件，内容如下：
- en: '[PRE52]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: This type represents the logged-in viewer.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 此类型表示已登录的查看者。
- en: 'Create a file called `getViewer.ts` in the `api` folder that will contain the
    function we need to implement. Add an import statement for the type we just created:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `api` 文件夹中创建一个名为 `getViewer.ts` 的文件，该文件将包含我们需要实现的函数。为刚刚创建的类型添加一个导入语句：
- en: '[PRE56]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Under the import statement, add a constant assigned to the following GraphQL
    query:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在导入语句下，添加一个常量，并将其分配给下面的 GraphQL 查询：
- en: '[PRE57]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: This is the same query we used earlier in the chapter to get the current viewer’s
    name and avatar URL.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们之前在章节中用来获取当前查看者姓名和头像 URL 的相同查询。
- en: 'Add the following type, which represents the response from the GraphQL API
    call within this file:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此文件中添加以下类型，它表示 GraphQL API 调用的响应：
- en: '[PRE65]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Start to implement the function as follows:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式开始实现函数：
- en: '[PRE70]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: We use the `fetch` function to make the request to the GraphQL API. We have
    used the `REACT_APP_GITHUB_URL` environment variable to specify the GraphQL API
    URL. Environment variable values can be `undefined`, but we know this isn’t the
    case, so we have added a not null assertion (`!`) after it.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `fetch` 函数向 GraphQL API 发送请求。我们使用了 `REACT_APP_GITHUB_URL` 环境变量来指定 GraphQL
    API URL。环境变量值可以是 `undefined`，但我们知道这不是情况，所以我们在此之后添加了一个非空断言 (`!`)。
- en: 'Specify the GraphQL query in the request body as follows:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式在请求体中指定 GraphQL 查询：
- en: '[PRE75]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '[PRE79]'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[PRE80]'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[PRE81]'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[PRE82]'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '[PRE83]'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '[PRE84]'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '[PRE85]'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '[PRE86]'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '[PRE87]'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE87]'
- en: GraphQL queries are specified in the request body in an object structure with
    a `query` property containing the GraphQL query string, which is `GET_VIEWER_QUERY`
    in our case. We have also specified that the request is in JSON format using the
    `Content-Type` HTTP header.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: GraphQL 查询在请求体中以对象结构指定，包含一个 `query` 属性，该属性包含 GraphQL 查询字符串，在我们的例子中是 `GET_VIEWER_QUERY`。我们还指定请求以
    JSON 格式使用 `Content-Type` HTTP 头。
- en: 'The HTTP `POST` method must be used for GraphQL API requests. So, let’s specify
    this in the request:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于 GraphQL API 请求必须使用 HTTP `POST` 方法。因此，让我们在请求中指定这一点：
- en: '[PRE88]'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '[PRE90]'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '[PRE91]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '[PRE92]'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '[PRE93]'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '[PRE94]'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[PRE95]'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '[PRE96]'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '[PRE97]'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE97]'
- en: 'A PAT protects the GitHub GraphQL API, so let’s add this to the request:'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: PAT 保护 GitHub GraphQL API，因此让我们将其添加到请求中：
- en: '[PRE98]'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '[PRE99]'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '[PRE100]'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '[PRE101]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '[PRE102]'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '[PRE103]'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '[PRE104]'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '[PRE105]'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '[PRE106]'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE106]'
- en: '[PRE107]'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '[PRE108]'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[PRE109]'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE109]'
- en: 'The last steps in the function are to get the JSON response body and type it
    appropriately before returning it:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 函数的最后几个步骤是获取 JSON 响应体，并适当地对其进行类型化，然后再返回：
- en: '[PRE110]'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '[PRE111]'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '[PRE112]'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '[PRE113]'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '[PRE114]'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '[PRE115]'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '[PRE116]'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE116]'
- en: '[PRE117]'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE117]'
- en: We narrow the type of `body` using a type assertion function called `assertIsGetViewerResponse`.
    The implementation of this function is lengthy and follows the same pattern as
    the ones we implemented in [*Chapter 9*](B19051_09.xhtml#_idTextAnchor220), *Interacting
    with RESTful APIs*, so we won’t list it in this step, but see [https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/blob/main/Chapter10/Using-React-Query/src/api/getViewer.ts](https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/blob/main/Chapter10/Using-React-Query/src/api/getViewer.ts)
    for the implementation of this function.
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用名为`assertIsGetViewerResponse`的类型断言函数来缩小`body`的类型。该函数的实现较长，与我们在[*第9章*](B19051_09.xhtml#_idTextAnchor220)，“与RESTful
    API交互”中实现的模式相同，因此我们在此步骤中不列出它，但请参阅[https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/blob/main/Chapter10/Using-React-Query/src/api/getViewer.ts](https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/blob/main/Chapter10/Using-React-Query/src/api/getViewer.ts)以了解该函数的实现。
- en: 'One difference is that the function’s parameter is of the `any` type rather
    than `unknown`. This is due to a known TypeScript issue of not being able to narrow
    the `unknown` type when it is an object. For more information on this, see the
    following link: [https://github.com/microsoft/TypeScript/issues/25720](https://github.com/microsoft/TypeScript/issues/25720).
    Using the `any` type is fine in this case – the `assertIsGetViewerResponse` function
    will work perfectly fine.'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 一个不同之处在于，该函数的参数类型为`any`而不是`unknown`。这是由于TypeScript的一个已知问题，即当`unknown`类型是对象时，无法缩小其类型。有关更多信息，请参阅以下链接：[https://github.com/microsoft/TypeScript/issues/25720](https://github.com/microsoft/TypeScript/issues/25720)。在这种情况下使用`any`类型是可以的——`assertIsGetViewerResponse`函数将完美地工作。
- en: That completes the implementation of a function that gets the details of the
    logged-in GitHub viewer.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 这样就完成了获取已登录GitHub观看者详细信息的函数实现。
- en: Next, we will create the component for the header.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将创建页眉组件。
- en: Creating the header component
  id: totrans-264
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建页眉组件
- en: 'We will create a component for the app header, which will call the `getViewer`
    function we just implemented and show the viewer’s name and avatar:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个应用程序页眉组件，该组件将调用我们刚刚实现的`getViewer`函数并显示观看者的姓名和头像：
- en: 'We will use React Query to call `getViewer` and manage the data it returns.
    So, let’s start by installing this package by running the following command in
    a terminal:'
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用React Query调用`getViewer`并管理它返回的数据。因此，让我们通过在终端中运行以下命令来安装此包：
- en: '[PRE118]'
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE118]'
- en: Create a file for the component called `Header.tsx` in the `src` folder.
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src`文件夹中创建一个名为`Header.tsx`的组件文件。
- en: 'Add the following import statements in `Header.tsx` to import React Query’s
    `useQuery` hook and our `getViewer` function:'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Header.tsx`中添加以下导入语句，以导入React Query的`useQuery`钩子和我们的`getViewer`函数：
- en: '[PRE119]'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE119]'
- en: '[PRE120]'
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE120]'
- en: 'Start to implement the `Header` component as follows:'
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下步骤开始实现`Header`组件：
- en: '[PRE121]'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '[PRE122]'
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '[PRE123]'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE123]'
- en: We use the `useQuery` hook to call `getViewer`. The data returned from `getViewer`
    will be in the destructured `data` variable. We have also destructured an `isLoading`
    variable to implement a loading indicator in the next step.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`useQuery`钩子调用`getViewer`。`getViewer`返回的数据将位于解构的`data`变量中。我们还解构了一个`isLoading`变量，以便在下一步实现加载指示器。
- en: 'Add a loading indicator as follows:'
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加如下加载指示器：
- en: '[PRE124]'
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '[PRE125]'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '[PRE126]'
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE126]'
- en: '[PRE127]'
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE127]'
- en: '[PRE128]'
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE128]'
- en: '[PRE129]'
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE129]'
- en: 'Finish the component implementation with the following JSX:'
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下JSX完成组件实现：
- en: '[PRE130]'
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE130]'
- en: '[PRE131]'
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE131]'
- en: '[PRE132]'
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE132]'
- en: '[PRE133]'
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE133]'
- en: '[PRE134]'
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE134]'
- en: '[PRE135]'
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE135]'
- en: '[PRE136]'
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE136]'
- en: '[PRE137]'
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE137]'
- en: '[PRE138]'
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE138]'
- en: '[PRE139]'
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE139]'
- en: '[PRE140]'
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE140]'
- en: '[PRE141]'
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE141]'
- en: '[PRE142]'
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE142]'
- en: '[PRE143]'
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE143]'
- en: A `header` element with a very dark gray background is rendered. The `header`
    element contains the viewer’s avatar, name, and a heading of **GitHub Search**,
    all horizontally centered.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染一个背景为非常深灰色的`header`元素。该`header`元素包含观看者的头像、姓名和**GitHub搜索**的标题，所有内容水平居中。
- en: That completes the implementation of the header. Next, we will add it to the
    component tree.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 这样就完成了页眉的实现。接下来，我们将将其添加到组件树中。
- en: Adding the Header component to the app
  id: totrans-301
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将Header组件添加到应用程序中
- en: 'Carry out the following steps to add the `Header` component to the `App` component:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤将`Header`组件添加到`App`组件中：
- en: Open `App.tsx` and remove all the existing content.
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`App.tsx`并删除所有现有内容。
- en: 'Add import statements for React Query’s provider component and client as well
    as our `Header` component:'
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加导入语句，用于React Query的提供者组件和客户端以及我们的`Header`组件：
- en: '[PRE144]'
  id: totrans-305
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE144]'
- en: '[PRE145]'
  id: totrans-306
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE145]'
- en: '[PRE146]'
  id: totrans-307
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE146]'
- en: '[PRE147]'
  id: totrans-308
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE147]'
- en: '[PRE148]'
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE148]'
- en: 'Implement the component by wrapping React Query’s provider component around
    the `Header` component:'
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将React Query的提供者组件包裹在`Header`组件周围来实现组件：
- en: '[PRE149]'
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE149]'
- en: '[PRE150]'
  id: totrans-312
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE150]'
- en: '[PRE151]'
  id: totrans-313
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE151]'
- en: '[PRE152]'
  id: totrans-314
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE152]'
- en: '[PRE153]'
  id: totrans-315
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE153]'
- en: '[PRE154]'
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE154]'
- en: '[PRE155]'
  id: totrans-317
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE155]'
- en: '[PRE156]'
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE156]'
- en: '[PRE157]'
  id: totrans-319
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE157]'
- en: 'Now, let’s try the app by running `npm start` in the terminal. A header containing
    your avatar and name should appear:'
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们在终端中运行`npm start`来尝试应用程序。应该会显示包含你的头像和姓名的页眉：
- en: '![Figure 10.10 – Header containing the viewer’s avatar and name](img/B19051_10_10.jpg)'
  id: totrans-321
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.10 – 包含查看者头像和名称的头部](img/B19051_10_10.jpg)'
- en: Figure 10.10 – Header containing the viewer’s avatar and name
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.10 – 包含查看者头像和名称的头部
- en: That completes the app header. Next, we will start to implement the main part
    of the app.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 这完成了应用头部。接下来，我们将开始实现应用的主要部分。
- en: Creating the repository page
  id: totrans-324
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建仓库页面
- en: 'The main part of the app will be a page that allows a user to search for a
    GitHub repository and star it. The page component will be called `RepoPage` and
    will reference three other components, as follows:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序的主要部分将是一个允许用户搜索 GitHub 仓库并为其加星的页面。页面组件将被命名为 `RepoPage`，并将引用其他三个组件，如下所示：
- en: '![Figure 10.11 – Repository page component structure](img/B19051_10_11.jpg)'
  id: totrans-326
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.11 – 仓库页面组件结构](img/B19051_10_11.jpg)'
- en: Figure 10.11 – Repository page component structure
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.11 – 仓库页面组件结构](img/B19051_10_11.jpg)'
- en: 'Here’s an explanation of the components:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是对组件的解释：
- en: The form that allows users to enter their search criteria will be contained
    in a `SearchRepoForm` component
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许用户输入搜索条件的表单将包含在 `SearchRepoForm` 组件中
- en: The `FoundRepo` component will render the matched repository after a search
  id: totrans-330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FoundRepo` 组件将在搜索后渲染匹配的仓库'
- en: The `StarRepoButton` component will render the button that the user can click
    to star a repository
  id: totrans-331
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`StarRepoButton` 组件将渲染用户可以点击以加星仓库的按钮'
- en: The `RepoPage` component will use React Query to manage calls to the GitHub
    GraphQL API and store the returned data
  id: totrans-332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RepoPage` 组件将使用 React Query 来管理对 GitHub GraphQL API 的调用并存储返回的数据'
- en: Next, we will make a start on the repository page by implementing a function
    to do the repository search.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将通过实现一个用于执行仓库搜索的函数来开始构建仓库页面。
- en: Creating the search function
  id: totrans-334
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建搜索函数
- en: 'We will start by implementing the function that calls the GitHub GraphQL API
    to find a repository. Carry out the following steps:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先实现一个调用 GitHub GraphQL API 以查找仓库的函数。执行以下步骤：
- en: 'We will start by creating a couple of types that the function will use. Open
    `src/api/types.ts` and add the following types:'
  id: totrans-336
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先创建几个函数将使用的类型。打开 `src/api/types.ts` 并添加以下类型：
- en: '[PRE158]'
  id: totrans-337
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE158]'
- en: '[PRE159]'
  id: totrans-338
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE159]'
- en: '[PRE160]'
  id: totrans-339
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE160]'
- en: '[PRE161]'
  id: totrans-340
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE161]'
- en: '[PRE162]'
  id: totrans-341
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE162]'
- en: '[PRE163]'
  id: totrans-342
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE163]'
- en: '[PRE164]'
  id: totrans-343
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE164]'
- en: '[PRE165]'
  id: totrans-344
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE165]'
- en: '[PRE166]'
  id: totrans-345
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE166]'
- en: '[PRE167]'
  id: totrans-346
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE167]'
- en: '[PRE168]'
  id: totrans-347
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE168]'
- en: '[PRE169]'
  id: totrans-348
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE169]'
- en: '[PRE170]'
  id: totrans-349
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE170]'
- en: '[PRE171]'
  id: totrans-350
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE171]'
- en: '[PRE172]'
  id: totrans-351
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE172]'
- en: The `SearchCriteria` type represents the information we need in the GraphQL
    query parameters to find the GitHub repository. The `RepoData` type represents
    the data returned from the repository search.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: '`SearchCriteria` 类型表示我们在 GraphQL 查询参数中需要的信息，以找到 GitHub 仓库。`RepoData` 类型表示从仓库搜索返回的数据。'
- en: Create a file for the function called `getRepo.ts` in the `src/api` folder.
  id: totrans-353
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `src/api` 文件夹中创建一个名为 `getRepo.ts` 的函数文件。
- en: 'Open `getRepo.ts` and start by importing the types just created:'
  id: totrans-354
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `getRepo.ts` 并首先导入刚刚创建的类型：
- en: '[PRE173]'
  id: totrans-355
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE173]'
- en: 'Add a constant for the following GraphQL query:'
  id: totrans-356
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为以下 GraphQL 查询添加一个常量：
- en: '[PRE174]'
  id: totrans-357
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE174]'
- en: '[PRE175]'
  id: totrans-358
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE175]'
- en: '[PRE176]'
  id: totrans-359
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE176]'
- en: '[PRE177]'
  id: totrans-360
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE177]'
- en: '[PRE178]'
  id: totrans-361
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE178]'
- en: '[PRE179]'
  id: totrans-362
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE179]'
- en: '[PRE180]'
  id: totrans-363
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE180]'
- en: '[PRE181]'
  id: totrans-364
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE181]'
- en: '[PRE182]'
  id: totrans-365
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE182]'
- en: '[PRE183]'
  id: totrans-366
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE183]'
- en: '[PRE184]'
  id: totrans-367
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE184]'
- en: '[PRE185]'
  id: totrans-368
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE185]'
- en: '[PRE186]'
  id: totrans-369
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE186]'
- en: This is the same query we created earlier in the chapter in the GitHub GraphQL
    API explorer.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们在本章 GitHub GraphQL API 探索器中创建的相同查询。
- en: 'Add the following type beneath the constant:'
  id: totrans-371
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在常量下方添加以下类型：
- en: '[PRE187]'
  id: totrans-372
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE187]'
- en: '[PRE188]'
  id: totrans-373
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE188]'
- en: '[PRE189]'
  id: totrans-374
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE189]'
- en: The `GetRepoResponse` type represents the data returned from the GraphQL query
    – it references the `RepoData` type we created in *step 1*.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: '`GetRepoResponse` 类型表示从 GraphQL 查询返回的数据 – 它引用我们在 *步骤 1* 中创建的 `RepoData` 类型。'
- en: 'Implement the function as follows:'
  id: totrans-376
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按以下方式实现函数：
- en: '[PRE190]'
  id: totrans-377
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE190]'
- en: '[PRE191]'
  id: totrans-378
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE191]'
- en: '[PRE192]'
  id: totrans-379
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE192]'
- en: '[PRE193]'
  id: totrans-380
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE193]'
- en: '[PRE194]'
  id: totrans-381
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE194]'
- en: '[PRE195]'
  id: totrans-382
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE195]'
- en: '[PRE196]'
  id: totrans-383
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE196]'
- en: '[PRE197]'
  id: totrans-384
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE197]'
- en: '[PRE198]'
  id: totrans-385
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE198]'
- en: '[PRE199]'
  id: totrans-386
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE199]'
- en: '[PRE200]'
  id: totrans-387
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE200]'
- en: '[PRE201]'
  id: totrans-388
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE201]'
- en: '[PRE202]'
  id: totrans-389
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE202]'
- en: '[PRE203]'
  id: totrans-390
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE203]'
- en: '[PRE204]'
  id: totrans-391
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE204]'
- en: '[PRE205]'
  id: totrans-392
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE205]'
- en: '[PRE206]'
  id: totrans-393
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE206]'
- en: '[PRE207]'
  id: totrans-394
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE207]'
- en: '[PRE208]'
  id: totrans-395
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE208]'
- en: This follows the same pattern as the function we created earlier to get the
    viewer’s information. One difference is that we have specified GraphQL query `org`
    and `repo` parameters, which are set to the properties in the `searchCriteria`
    function parameter.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 这与我们在之前创建的获取查看者信息的函数遵循相同的模式。一个区别是我们已经指定了 GraphQL 查询 `org` 和 `repo` 参数，它们被设置为
    `searchCriteria` 函数参数中的属性。
- en: 'The `assertIsGetRepoResponse` type assertion function follows the same pattern
    as previous type assertion functions. The implementation is lengthy, so it isn’t
    listed here. You can find the implementation here: [https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/blob/main/Chapter10/Using-React-Query/src/api/getRepo.ts](https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/blob/main/Chapter10/Using-React-Query/src/api/getRepo.ts).'
  id: totrans-397
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`assertIsGetRepoResponse` 类型断言函数遵循与之前类型断言函数相同的模式。实现较为冗长，因此在此未列出。您可以在以下位置找到实现：[https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/blob/main/Chapter10/Using-React-Query/src/api/getRepo.ts](https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/blob/main/Chapter10/Using-React-Query/src/api/getRepo.ts)。'
- en: That completes the implementation of a function that finds the GitHub repository.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 这完成了查找 GitHub 仓库的函数实现。
- en: Next, we will create the component for the repository search form.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
- en: Creating the search form component
  id: totrans-400
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We will implement a form component that allows the user to search for a repository.
    The form will contain fields for the organization and repository name. The component
    won’t call the GitHub GraphQL API when the form is submitted; instead, it will
    pass the submitted search criteria back to a page component to do this.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use React Hook Form for implementation, which should already be installed.
    The pattern for the implementation is very similar to previous forms we have implemented,
    so the steps to do this implementation aren’t listed in detail here. The implemention
    for the `SearchRepoForm` component can be copied from the book’s GitHub repository
    as follows:'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
- en: Create a new folder called `repoPage` in the `src` folder and then create a
    new file called `SearchRepoForm.tsx` in this folder.
  id: totrans-403
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open `SearchRepoForm.tsx` and copy and paste the contents into it from [https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/blob/main/Chapter10/Using-React-Query/src/repoPage/SearchRepoForm.tsx](https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/blob/main/Chapter10/Using-React-Query/src/repoPage/SearchRepoForm.tsx).
  id: totrans-404
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The implementation for the `SearchRepoForm` component is now in place in our
    project.
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will implement a component that renders the found repository.
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
- en: Creating the FoundRepo component
  id: totrans-407
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `FoundRepo` component will display the repository name, description, and
    number of stars. Carry out the following steps to implement this component:'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
- en: Create a file in the `src/repoPage` folder called `FoundRepo.tsx`.
  id: totrans-409
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Start the implementation by adding the following type for the component props:'
  id: totrans-410
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE209]'
  id: totrans-411
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE209]'
- en: '[PRE210]'
  id: totrans-412
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE210]'
- en: '[PRE211]'
  id: totrans-413
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE211]'
- en: '[PRE212]'
  id: totrans-414
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE212]'
- en: '[PRE213]'
  id: totrans-415
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE213]'
- en: So, the repository name, description, and the number of stars will be passed
    into the component.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following component implementation:'
  id: totrans-417
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE214]'
  id: totrans-418
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE214]'
- en: '[PRE215]'
  id: totrans-419
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE215]'
- en: '[PRE216]'
  id: totrans-420
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE216]'
- en: '[PRE217]'
  id: totrans-421
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE217]'
- en: '[PRE218]'
  id: totrans-422
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE218]'
- en: '[PRE219]'
  id: totrans-423
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE219]'
- en: '[PRE220]'
  id: totrans-424
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE220]'
- en: '[PRE221]'
  id: totrans-425
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE221]'
- en: '[PRE222]'
  id: totrans-426
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE222]'
- en: '[PRE223]'
  id: totrans-427
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE223]'
- en: '[PRE224]'
  id: totrans-428
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE224]'
- en: '[PRE225]'
  id: totrans-429
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE225]'
- en: '[PRE226]'
  id: totrans-430
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE226]'
- en: The repository name is rendered as a bold heading. The number of stars is rendered
    in a gray rounded background to the right of the repository name. The description
    is rendered underneath the name.
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
- en: That completes the implementation of the found repository component.
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will implement the function that calls the GitHub GraphQL API to star
    a repository.
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
- en: Creating a function to star a repository
  id: totrans-434
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We will use the same GraphQL mutation we used earlier in the chapter to star
    the GitHub repository. The pattern used in the function will be similar to the
    `getViewer` function we created earlier. Carry out the following steps:'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file called `starRepo.ts` in the `src/api` folder, with the following
    GraphQL mutation:'
  id: totrans-436
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE227]'
  id: totrans-437
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE227]'
- en: '[PRE228]'
  id: totrans-438
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE228]'
- en: '[PRE229]'
  id: totrans-439
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE229]'
- en: '[PRE230]'
  id: totrans-440
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE230]'
- en: '[PRE231]'
  id: totrans-441
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE231]'
- en: '[PRE232]'
  id: totrans-442
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE232]'
- en: '[PRE233]'
  id: totrans-443
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE233]'
- en: '[PRE234]'
  id: totrans-444
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE234]'
- en: '[PRE235]'
  id: totrans-445
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE235]'
- en: '[PRE236]'
  id: totrans-446
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE236]'
- en: '[PRE237]'
  id: totrans-447
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE237]'
- en: This is the same mutation we created earlier in the chapter in the GitHub GraphQL
    API explorer.
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the function implementation as follows:'
  id: totrans-449
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE238]'
  id: totrans-450
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE238]'
- en: '[PRE239]'
  id: totrans-451
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE239]'
- en: '[PRE240]'
  id: totrans-452
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE240]'
- en: '[PRE241]'
  id: totrans-453
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE241]'
- en: '[PRE242]'
  id: totrans-454
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE242]'
- en: '[PRE243]'
  id: totrans-455
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE243]'
- en: '[PRE244]'
  id: totrans-456
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE244]'
- en: '[PRE245]'
  id: totrans-457
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE245]'
- en: '[PRE246]'
  id: totrans-458
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE246]'
- en: '[PRE247]'
  id: totrans-459
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE247]'
- en: '[PRE248]'
  id: totrans-460
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE248]'
- en: '[PRE249]'
  id: totrans-461
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE249]'
- en: '[PRE250]'
  id: totrans-462
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE250]'
- en: '[PRE251]'
  id: totrans-463
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE251]'
- en: '[PRE252]'
  id: totrans-464
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE252]'
- en: '[PRE253]'
  id: totrans-465
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE253]'
- en: This follows the same pattern as the other functions that call the GitHub GraphQL
    API.
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
- en: That completes the function that calls the GitHub GraphQL API to star a repository.
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will implement the component for the star button.
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
- en: Creating the star button
  id: totrans-469
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The star button is a regular button styled to be black with white text.
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file called `StarRepoButton.tsx` in the `src/repoPage` folder and
    add the following implementation to it:'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE254]'
  id: totrans-472
  prefs: []
  type: TYPE_PRE
  zh: '[PRE254]'
- en: That completes the implementation of the star button.
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will create the main page component for the app.
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
- en: Creating the repository page
  id: totrans-475
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The repository page component will reference the `SearchRepoForm`, `FoundRepo`,
    and `StarRepoButton` components we just created. This component will also call
    the `getRepo` and `starRepo` functions we created using React Query. To do this,
    carry out the following steps:'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file called `RepoPage.tsx` in the `src/repoPage` folder with the following
    import statements:'
  id: totrans-477
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE255]'
  id: totrans-478
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE255]'
- en: '[PRE256]'
  id: totrans-479
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE256]'
- en: '[PRE257]'
  id: totrans-480
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE257]'
- en: '[PRE258]'
  id: totrans-481
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE258]'
- en: '[PRE259]'
  id: totrans-482
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE259]'
- en: '[PRE260]'
  id: totrans-483
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE260]'
- en: '[PRE261]'
  id: totrans-484
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE261]'
- en: '[PRE262]'
  id: totrans-485
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE262]'
- en: '[PRE263]'
  id: totrans-486
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE263]'
- en: '[PRE264]'
  id: totrans-487
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE264]'
- en: '[PRE265]'
  id: totrans-488
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE265]'
- en: '[PRE266]'
  id: totrans-489
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE266]'
- en: We have imported the components and the data functions we created earlier, along
    with React Query’s hooks and client. We have also imported React’s state hook
    because we need to store a piece of state outside React Query.
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
- en: 'Start the component implementation as follows:'
  id: totrans-491
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE267]'
  id: totrans-492
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE267]'
- en: '[PRE268]'
  id: totrans-493
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE268]'
- en: '[PRE269]'
  id: totrans-494
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE269]'
- en: '[PRE270]'
  id: totrans-495
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE270]'
- en: '[PRE271]'
  id: totrans-496
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE271]'
- en: We store the search criteria in state so that we can feed it into `useQuery`
    in the next step. We will set this state when the search repository form is submitted
    in *step 6*.
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, call the `useQuery` hook to get the repository for the given search criteria
    as follows:'
  id: totrans-498
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE272]'
  id: totrans-499
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE272]'
- en: '[PRE273]'
  id: totrans-500
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE273]'
- en: '[PRE274]'
  id: totrans-501
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE274]'
- en: '[PRE275]'
  id: totrans-502
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE275]'
- en: '[PRE276]'
  id: totrans-503
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE276]'
- en: '[PRE277]'
  id: totrans-504
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE277]'
- en: '[PRE278]'
  id: totrans-505
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE278]'
- en: '[PRE279]'
  id: totrans-506
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE279]'
- en: '[PRE280]'
  id: totrans-507
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE280]'
- en: '[PRE281]'
  id: totrans-508
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE281]'
- en: We don’t want the query to execute when the component is mounted, so we use
    the `enabled` option to only run the query when `searchCriteria` is set, which
    will be when the search repository form is submitted.
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
- en: We use the search criteria in the query key as well and pass it to the `getRepo`
    function. We use a type assertion on the `getRepo` argument to remove `undefined`
    from it. This is safe because we know it can’t be `undefined` when `getRepo` is
    called because of the `enabled` option expression.
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
- en: 'Define the star mutation as follows:'
  id: totrans-511
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE282]'
  id: totrans-512
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE282]'
- en: '[PRE283]'
  id: totrans-513
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE283]'
- en: '[PRE284]'
  id: totrans-514
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE284]'
- en: '[PRE285]'
  id: totrans-515
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE285]'
- en: '[PRE286]'
  id: totrans-516
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE286]'
- en: '[PRE287]'
  id: totrans-517
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE287]'
- en: '[PRE288]'
  id: totrans-518
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE288]'
- en: '[PRE289]'
  id: totrans-519
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE289]'
- en: '[PRE290]'
  id: totrans-520
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE290]'
- en: '[PRE291]'
  id: totrans-521
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE291]'
- en: '[PRE292]'
  id: totrans-522
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE292]'
- en: '[PRE293]'
  id: totrans-523
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE293]'
- en: '[PRE294]'
  id: totrans-524
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE294]'
- en: '[PRE295]'
  id: totrans-525
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE295]'
- en: '[PRE296]'
  id: totrans-526
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE296]'
- en: '[PRE297]'
  id: totrans-527
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE297]'
- en: '[PRE298]'
  id: totrans-528
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE298]'
- en: '[PRE299]'
  id: totrans-529
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE299]'
- en: '[PRE300]'
  id: totrans-530
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE300]'
- en: '[PRE301]'
  id: totrans-531
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE301]'
- en: '[PRE302]'
  id: totrans-532
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE302]'
- en: The mutation calls the `getRepo` function we created earlier. We use the mutation’s
    `onSuccess` option to update the React Query’s cached repository data with the
    `viewerHasStarred` property set to `true`.
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
- en: 'Return the following JSX from the component:'
  id: totrans-534
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE303]'
  id: totrans-535
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE303]'
- en: '[PRE304]'
  id: totrans-536
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE304]'
- en: '[PRE305]'
  id: totrans-537
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE305]'
- en: '[PRE306]'
  id: totrans-538
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE306]'
- en: '[PRE307]'
  id: totrans-539
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE307]'
- en: '[PRE308]'
  id: totrans-540
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE308]'
- en: '[PRE309]'
  id: totrans-541
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE309]'
- en: '[PRE310]'
  id: totrans-542
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE310]'
- en: '[PRE311]'
  id: totrans-543
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE311]'
- en: '[PRE312]'
  id: totrans-544
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE312]'
- en: '[PRE313]'
  id: totrans-545
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE313]'
- en: '[PRE314]'
  id: totrans-546
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE314]'
- en: '[PRE315]'
  id: totrans-547
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE315]'
- en: '[PRE316]'
  id: totrans-548
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE316]'
- en: '[PRE317]'
  id: totrans-549
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE317]'
- en: '[PRE318]'
  id: totrans-550
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE318]'
- en: '[PRE319]'
  id: totrans-551
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE319]'
- en: '[PRE320]'
  id: totrans-552
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE320]'
- en: '[PRE321]'
  id: totrans-553
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE321]'
- en: '[PRE322]'
  id: totrans-554
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE322]'
- en: The component is wrapped in a `main` element, which centers its content. The
    repository search form is placed inside the `main` element. The found repository
    is rendered (if there is a found repository) along with a star button if the repository
    hasn’t already been starred.
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
- en: We will implement the `handleSearch` and `handleStarClick` handlers in the following
    steps.
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `handleSearch` handler as follows:'
  id: totrans-557
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE323]'
  id: totrans-558
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE323]'
- en: '[PRE324]'
  id: totrans-559
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE324]'
- en: '[PRE325]'
  id: totrans-560
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE325]'
- en: '[PRE326]'
  id: totrans-561
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE326]'
- en: '[PRE327]'
  id: totrans-562
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE327]'
- en: '[PRE328]'
  id: totrans-563
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE328]'
- en: '[PRE329]'
  id: totrans-564
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE329]'
- en: The handler sets the `searchCriteria` state, which triggers a re-render and
    the `useQuery` hook to call `getRepo` with the search criteria.
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `handleStarClick` handler as follows:'
  id: totrans-566
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE330]'
  id: totrans-567
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE330]'
- en: '[PRE331]'
  id: totrans-568
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE331]'
- en: '[PRE332]'
  id: totrans-569
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE332]'
- en: '[PRE333]'
  id: totrans-570
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE333]'
- en: '[PRE334]'
  id: totrans-571
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE334]'
- en: '[PRE335]'
  id: totrans-572
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE335]'
- en: '[PRE336]'
  id: totrans-573
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE336]'
- en: '[PRE337]'
  id: totrans-574
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE337]'
- en: '[PRE338]'
  id: totrans-575
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE338]'
- en: The handler calls the mutation with the found repository’s ID, which will call
    the `starRepo` function.
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
- en: This completes the implementation of the repository page component.
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `App.tsx` and add the `RepoPage` component we just created under the app
    header:'
  id: totrans-578
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE339]'
  id: totrans-579
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE339]'
- en: '[PRE340]'
  id: totrans-580
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE340]'
- en: '[PRE341]'
  id: totrans-581
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE341]'
- en: '[PRE342]'
  id: totrans-582
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE342]'
- en: '[PRE343]'
  id: totrans-583
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE343]'
- en: '[PRE344]'
  id: totrans-584
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE344]'
- en: '[PRE345]'
  id: totrans-585
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE345]'
- en: '[PRE346]'
  id: totrans-586
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE346]'
- en: '[PRE347]'
  id: totrans-587
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE347]'
- en: '[PRE348]'
  id: totrans-588
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE348]'
- en: '[PRE349]'
  id: totrans-589
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE349]'
- en: 'Now, let’s try the app by running `npm start` in the terminal. The repository
    search form should appear, as follows:'
  id: totrans-590
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.12 – Repository search form](img/B19051_10_12.jpg)'
  id: totrans-591
  prefs: []
  type: TYPE_IMG
- en: Figure 10.12 – Repository search form
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter a GitHub organization and repository you haven’t starred and press **Search**.
    The found repository will appear with a **Star** button:'
  id: totrans-593
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.13 – Found repository with a Star button](img/B19051_10_13.jpg)'
  id: totrans-594
  prefs: []
  type: TYPE_IMG
- en: Figure 10.13 – Found repository with a Star button
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
- en: Click the **Star** button to star the repository. The **Star** button will then
    disappear.
  id: totrans-596
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Stop the app from running before continuing by pressing *Ctrl* + *C* in the
    terminal.
  id: totrans-597
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'That completes the first iteration of the app. Here’s a recap of the key points
    of using `fetch` and React Query to interact with a GraphQL API:'
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
- en: The `fetch` function can call a GraphQL API by putting the query or mutation
    in the request body and using the HTTP `POST` method.
  id: totrans-599
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: React Query can execute the function containing `fetch` and manage the response
    data.
  id: totrans-600
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `enabled` option on `useQuery` and `useMutation` can execute the function
    containing `fetch` when the user interacts with the app. We used this feature
    to execute a query when the repository search form was submitted.
  id: totrans-601
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next section, we will refactor the code to use a specialized GraphQL
    client.
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
- en: Using Apollo Client
  id: totrans-603
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will learn about Apollo Client and use it within the app
    we have built, replacing the use of React Query and `fetch`.
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Apollo Client
  id: totrans-605
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Apollo Client is a client library for interacting with GraphQL servers. It has
    query and mutation hooks called `useQuery` and `useMutation`, like React Query.
    Apollo Client also stores the data in a client cache like React Query and requires
    a provider component placed above the components requiring GraphQL data.
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
- en: One thing that Apollo Client does that React Query doesn’t is that it interacts
    with the GraphQL API directly instead of requiring a function to do this.
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
- en: Installing Apollo Client
  id: totrans-608
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Our first job is to install Apollo Client, which we can do by running the following
    command in a terminal:'
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE350]'
  id: totrans-610
  prefs: []
  type: TYPE_PRE
  zh: '[PRE350]'
- en: This library includes TypeScript types, so no additional package is required
    to be installed.
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
- en: Refactoring the App component
  id: totrans-612
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first component we are going to refactor is the `App` component. Carry
    out the following steps:'
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `App.tsx` and replace the React Query import with the following Apollo
    Client import statement:'
  id: totrans-614
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE351]'
  id: totrans-615
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE351]'
- en: '[PRE352]'
  id: totrans-616
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE352]'
- en: '[PRE353]'
  id: totrans-617
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE353]'
- en: '[PRE354]'
  id: totrans-618
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE354]'
- en: '[PRE355]'
  id: totrans-619
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE355]'
- en: 'Update the `queryClient` variable assignment as follows:'
  id: totrans-620
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE356]'
  id: totrans-621
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE356]'
- en: '[PRE357]'
  id: totrans-622
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE357]'
- en: '[PRE358]'
  id: totrans-623
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE358]'
- en: '[PRE359]'
  id: totrans-624
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE359]'
- en: '[PRE360]'
  id: totrans-625
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE360]'
- en: '[PRE361]'
  id: totrans-626
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE361]'
- en: '[PRE362]'
  id: totrans-627
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE362]'
- en: We are now using Apollo Client. We have specified the URL to the API and the
    PAT because Apollo Client will directly call the API.
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
- en: 'The last step is to replace `QueryClientProvider` with `ApolloProvider` in
    the JSX:'
  id: totrans-629
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE363]'
  id: totrans-630
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE363]'
- en: '[PRE364]'
  id: totrans-631
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE364]'
- en: '[PRE365]'
  id: totrans-632
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE365]'
- en: '[PRE366]'
  id: totrans-633
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE366]'
- en: The `App` component is now using Apollo Client.
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will refactor the `Header` component.
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
- en: Refactoring the Header component
  id: totrans-636
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, we will refactor the `Header` component to use Apollo Client. Carry out
    the following steps:'
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
- en: Open `getViewer.ts`. The `getViewer` and `assertIsGetViewerResponse` functions
    and the `GetViewerResponse` type can be removed because Apollo Client doesn’t
    require these. The `ViewerData` import statement can also be removed.
  id: totrans-638
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following import statement into `getViewer.tsx`:'
  id: totrans-639
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE367]'
  id: totrans-640
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE367]'
- en: '`gql` is a function that we will use in the next step to wrap around the GraphQL
    query string constant.'
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `gql` function in front of the GraphQL query string constant as follows:'
  id: totrans-642
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE368]'
  id: totrans-643
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE368]'
- en: '[PRE369]'
  id: totrans-644
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE369]'
- en: '[PRE370]'
  id: totrans-645
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE370]'
- en: '[PRE371]'
  id: totrans-646
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE371]'
- en: '[PRE372]'
  id: totrans-647
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE372]'
- en: '[PRE373]'
  id: totrans-648
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE373]'
- en: '[PRE374]'
  id: totrans-649
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE374]'
- en: '[PRE375]'
  id: totrans-650
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE375]'
- en: So, `GET_VIEWER_QUERY` is now assigned to a tagged template literal rather than
    a plain string. We covered tagged template literals in [*Chapter 5*](B19051_05.xhtml#_idTextAnchor127),
    when we used Emotion’s `css` prop. The `gql` function converts the query string
    into a query object that Apollo Client can use.
  id: totrans-651
  prefs: []
  type: TYPE_NORMAL
- en: Open `Header.tsx` and update the `useQuery` import statement to come from Apollo
    Client. Also, import the constant we just exported from `getViewer.ts`. We no
    longer need to import `getViewer`.
  id: totrans-652
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE376]'
  id: totrans-653
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE376]'
- en: '[PRE377]'
  id: totrans-654
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE377]'
- en: 'Now update the `useQuery` hook as follows:'
  id: totrans-655
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE378]'
  id: totrans-656
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE378]'
- en: '[PRE379]'
  id: totrans-657
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE379]'
- en: '[PRE380]'
  id: totrans-658
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE380]'
- en: Apollo Client’s `useQuery` hook takes in a parameter for the query definition
    object and returns useful state variables similar to React Query. We have aliased
    the `loading` state variable as `isLoading` so that the rendering of the loading
    indicator remains unchanged.
  id: totrans-659
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information on Apollo Client queries, see the following link: [https://www.apollographql.com/docs/react/data/queries/](https://www.apollographql.com/docs/react/data/queries/).'
  id: totrans-660
  prefs: []
  type: TYPE_NORMAL
- en: That completes the `Header` component.
  id: totrans-661
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will refactor the repository page.
  id: totrans-662
  prefs: []
  type: TYPE_NORMAL
- en: Refactoring the repository page
  id: totrans-663
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Refactoring the repository page will be a similar process. Carry out the following
    steps:'
  id: totrans-664
  prefs: []
  type: TYPE_NORMAL
- en: Open `getRepo.ts` and remove the `getRepo` and `assertIsGetResponse` functions
    and the `GetRepoReponse` type. Remove the imported `RepoData` and `SearchCriteria`
    types as well.
  id: totrans-665
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `gql` function and add it in front of the query string:'
  id: totrans-666
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE381]'
  id: totrans-667
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE381]'
- en: '[PRE382]'
  id: totrans-668
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE382]'
- en: '[PRE383]'
  id: totrans-669
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE383]'
- en: '[PRE384]'
  id: totrans-670
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE384]'
- en: Open `starRepo.ts` and remove the `starRepo` function.
  id: totrans-671
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `gql` function and add it in front of the query string:'
  id: totrans-672
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE385]'
  id: totrans-673
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE385]'
- en: '[PRE386]'
  id: totrans-674
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE386]'
- en: '[PRE387]'
  id: totrans-675
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE387]'
- en: '[PRE388]'
  id: totrans-676
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE388]'
- en: 'Open `RepoPage.tsx` and replace the React Query import statement with an Apollo
    Client import statement. Also, import the GraphQL query constants we just changed
    in the previous two steps:'
  id: totrans-677
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE389]'
  id: totrans-678
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE389]'
- en: '[PRE390]'
  id: totrans-679
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE390]'
- en: '[PRE391]'
  id: totrans-680
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE391]'
- en: '[PRE392]'
  id: totrans-681
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE392]'
- en: '[PRE393]'
  id: totrans-682
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE393]'
- en: '[PRE394]'
  id: totrans-683
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE394]'
- en: '[PRE395]'
  id: totrans-684
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE395]'
- en: We will use the `useLazyQuery` hook rather than `useQuery` because we want to
    trigger the query during form submission rather than when the component mounts.
  id: totrans-685
  prefs: []
  type: TYPE_NORMAL
- en: 'Replace the call to `useQuery` with the following call to `useLazyQuery`:'
  id: totrans-686
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE396]'
  id: totrans-687
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE396]'
- en: '`useLazyQuery` returns a tuple, with the first element being a function that
    can be called to trigger the query. We have called this trigger function `getRepo`.
    The second tuple element is an object containing useful state variables, such
    as the data from the API response, which we have destructured.'
  id: totrans-688
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information on `useLazyQuery`, see the following link: [https://www.apollographql.com/docs/react/data/queries/#manual-execution-with-uselazyquery](https://www.apollographql.com/docs/react/data/queries/#manual-execution-with-uselazyquery).'
  id: totrans-689
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, replace the `queryClient` variable assignment and the `useMutation` call
    with the following:'
  id: totrans-690
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE397]'
  id: totrans-691
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE397]'
- en: '[PRE398]'
  id: totrans-692
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE398]'
- en: '[PRE399]'
  id: totrans-693
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE399]'
- en: '[PRE400]'
  id: totrans-694
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE400]'
- en: '[PRE401]'
  id: totrans-695
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE401]'
- en: '[PRE402]'
  id: totrans-696
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE402]'
- en: '[PRE403]'
  id: totrans-697
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE403]'
- en: '[PRE404]'
  id: totrans-698
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE404]'
- en: '[PRE405]'
  id: totrans-699
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE405]'
- en: '[PRE406]'
  id: totrans-700
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE406]'
- en: '[PRE407]'
  id: totrans-701
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE407]'
- en: '[PRE408]'
  id: totrans-702
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE408]'
- en: '[PRE409]'
  id: totrans-703
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE409]'
- en: '[PRE410]'
  id: totrans-704
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE410]'
- en: '[PRE411]'
  id: totrans-705
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE411]'
- en: The first parameter in Apollo Client’s `useMutation` hook is the mutation definition
    object, which is `STAR_REPO` in our case. The second parameter contains options
    for the mutation. We have specified the `onCompleted` option, which is a function
    called after the mutation has been completed. We have used this option to update
    the data cache to indicate that the viewer has now starred the repository.
  id: totrans-706
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information on Apollo Client mutations, see the following link: [https://www.apollographql.com/docs/react/data/mutations](https://www.apollographql.com/docs/react/data/mutations).'
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the `handleSearch` function to call the `useLazyQuery` trigger function:'
  id: totrans-708
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE412]'
  id: totrans-709
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE412]'
- en: '[PRE413]'
  id: totrans-710
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE413]'
- en: '[PRE414]'
  id: totrans-711
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE414]'
- en: '[PRE415]'
  id: totrans-712
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE415]'
- en: '[PRE416]'
  id: totrans-713
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE416]'
- en: '[PRE417]'
  id: totrans-714
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE417]'
- en: 'Update the `handleStarClick` function to call the `useMutation` trigger function:'
  id: totrans-715
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE418]'
  id: totrans-716
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE418]'
- en: '[PRE419]'
  id: totrans-717
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE419]'
- en: '[PRE420]'
  id: totrans-718
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE420]'
- en: '[PRE421]'
  id: totrans-719
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE421]'
- en: '[PRE422]'
  id: totrans-720
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE422]'
- en: That completes the refactoring of the repository page.
  id: totrans-721
  prefs: []
  type: TYPE_NORMAL
- en: Now, try the app by running `npm start` in the terminal. Try searching for a
    repository and starring it – it should behave as it previously did.
  id: totrans-722
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'That completes the second iteration of the app and our use of Apollo Client.
    Here are the key points on using Apollo Client:'
  id: totrans-723
  prefs: []
  type: TYPE_NORMAL
- en: Apollo Client is a specialized library for interacting with GraphQL APIs
  id: totrans-724
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unlike React Query, Apollo Client interacts directly with the GraphQL API and,
    therefore, doesn’t require a separate function that uses `fetch`
  id: totrans-725
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apollo Client’s `ApolloProvider` component needs to be placed high in the component
    tree above where backend data is needed
  id: totrans-726
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apollo Client’s `useQuery` hook allows data to be fetched and cached in state
  id: totrans-727
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apollo Client’s `useMutation` hook allows data to be updated
  id: totrans-728
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, we will summarize the chapter.
  id: totrans-729
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-730
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we started by learning the GraphQL syntax for queries and mutations.
    A great feature of GraphQL is the ability to request and receive only the required
    objects and fields. This can really help the performance of our apps.
  id: totrans-731
  prefs: []
  type: TYPE_NORMAL
- en: We used React Query and `fetch` to interact with a GraphQL API. This is very
    similar to interacting with a REST API, but the HTTP method needs to be `POST`,
    and the query or mutation needs to be placed in the request body. A new feature
    we learned about in React Query is the ability to trigger queries when the user
    interacts with the app using the `enabled` option.
  id: totrans-732
  prefs: []
  type: TYPE_NORMAL
- en: We refactored the app to use Apollo Client, which is a specialized GraphQL client.
    It is very similar to React Query in that it has `useQuery` and `useMutation`
    hooks and a provider component. One advantage over React Query is that Apollo
    Client interacts directly with the GraphQL API, which means we write less code.
  id: totrans-733
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will cover patterns that help us build reusable components.
  id: totrans-734
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  id: totrans-735
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Answer the following questions to check what you have learned in this chapter:'
  id: totrans-736
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an attempt at a GraphQL query to get a GitHub viewer’s name
    and email address:'
  id: totrans-737
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE423]'
  id: totrans-738
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE423]'
- en: '[PRE424]'
  id: totrans-739
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE424]'
- en: '[PRE425]'
  id: totrans-740
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE425]'
- en: '[PRE426]'
  id: totrans-741
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE426]'
- en: The query errors though – what is the problem?
  id: totrans-742
  prefs: []
  type: TYPE_NORMAL
- en: What is the mutation that would unstar a GitHub repository? The mutation should
    have a parameter for the repository ID.
  id: totrans-743
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following use of `fetch` is an attempt to call a GraphQL API:'
  id: totrans-744
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE427]'
  id: totrans-745
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE427]'
- en: '[PRE428]'
  id: totrans-746
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE428]'
- en: '[PRE429]'
  id: totrans-747
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE429]'
- en: '[PRE430]'
  id: totrans-748
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE430]'
- en: '[PRE431]'
  id: totrans-749
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE431]'
- en: This doesn’t work though – what is the problem?
  id: totrans-750
  prefs: []
  type: TYPE_NORMAL
- en: Where does the authorization access token in a protected GraphQL API get specified
    when using Apollo Client?
  id: totrans-751
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A component uses Apollo Client’s `useQuery` hook to fetch data from a GraphQL
    API, but the component errors with the following error:'
  id: totrans-752
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Could not find “client” in the context or passed in as an option. Wrap the
    root component in an <ApolloProvider>, or pass an ApolloClient instance in** **via
    options**'
  id: totrans-753
  prefs: []
  type: TYPE_NORMAL
- en: What do you think the problem is?
  id: totrans-754
  prefs: []
  type: TYPE_NORMAL
- en: 'The following attempts to use Apollo Client’s `useQuery` hook to fetch data
    from a GraphQL API:'
  id: totrans-755
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE432]'
  id: totrans-756
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE432]'
- en: '[PRE433]'
  id: totrans-757
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE433]'
- en: '[PRE434]'
  id: totrans-758
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE434]'
- en: '[PRE435]'
  id: totrans-759
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE435]'
- en: '[PRE436]'
  id: totrans-760
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE436]'
- en: '[PRE437]'
  id: totrans-761
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE437]'
- en: '[PRE438]'
  id: totrans-762
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE438]'
- en: The call errors, though – what do you think the problem is?
  id: totrans-763
  prefs: []
  type: TYPE_NORMAL
- en: What state variable can be destructured from Apollo Client’s `useMutation` hook
    to determine whether the request has returned an error?
  id: totrans-764
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Answers
  id: totrans-765
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The query syntax is incorrect – the syntax is like JSON but doesn’t have colons
    and commas. Also, the `query` keyword can be omitted, but it is best practice
    to include this. Here is the corrected query:'
  id: totrans-766
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE439]'
  id: totrans-767
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE439]'
- en: '[PRE440]'
  id: totrans-768
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE440]'
- en: '[PRE441]'
  id: totrans-769
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE441]'
- en: '[PRE442]'
  id: totrans-770
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE442]'
- en: '[PRE443]'
  id: totrans-771
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE443]'
- en: '[PRE444]'
  id: totrans-772
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE444]'
- en: 'The following mutation will unstar a GitHub repository:'
  id: totrans-773
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE445]'
  id: totrans-774
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE445]'
- en: '[PRE446]'
  id: totrans-775
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE446]'
- en: '[PRE447]'
  id: totrans-776
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE447]'
- en: '[PRE448]'
  id: totrans-777
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE448]'
- en: '[PRE449]'
  id: totrans-778
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE449]'
- en: '[PRE450]'
  id: totrans-779
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE450]'
- en: '[PRE451]'
  id: totrans-780
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE451]'
- en: '[PRE452]'
  id: totrans-781
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE452]'
- en: '[PRE453]'
  id: totrans-782
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE453]'
- en: 'The request is missing the HTTP `POST` method:'
  id: totrans-783
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE454]'
  id: totrans-784
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE454]'
- en: '[PRE455]'
  id: totrans-785
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE455]'
- en: '[PRE456]'
  id: totrans-786
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE456]'
- en: '[PRE457]'
  id: totrans-787
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE457]'
- en: '[PRE458]'
  id: totrans-788
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE458]'
- en: '[PRE459]'
  id: totrans-789
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE459]'
- en: 'The authorization access token gets specified when Apollo Client is created,
    which is passed into the provider component:'
  id: totrans-790
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE460]'
  id: totrans-791
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE460]'
- en: '[PRE461]'
  id: totrans-792
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE461]'
- en: '[PRE462]'
  id: totrans-793
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE462]'
- en: '[PRE463]'
  id: totrans-794
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE463]'
- en: '[PRE464]'
  id: totrans-795
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE464]'
- en: '[PRE465]'
  id: totrans-796
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE465]'
- en: '[PRE466]'
  id: totrans-797
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE466]'
- en: '[PRE467]'
  id: totrans-798
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE467]'
- en: '[PRE468]'
  id: totrans-799
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE468]'
- en: '[PRE469]'
  id: totrans-800
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE469]'
- en: '[PRE470]'
  id: totrans-801
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE470]'
- en: '[PRE471]'
  id: totrans-802
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE471]'
- en: '[PRE472]'
  id: totrans-803
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE472]'
- en: '[PRE473]'
  id: totrans-804
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE473]'
- en: '[PRE474]'
  id: totrans-805
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE474]'
- en: The problem is that Apollo Client’s `ApolloProvider` component hasn’t been placed
    above the component using `useQuery` in the component tree.
  id: totrans-806
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `gql` function must be applied to the query string to convert it into the
    object format that Apollo Client expects:'
  id: totrans-807
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE475]'
  id: totrans-808
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE475]'
- en: '[PRE476]'
  id: totrans-809
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE476]'
- en: '[PRE477]'
  id: totrans-810
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE477]'
- en: '[PRE478]'
  id: totrans-811
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE478]'
- en: '[PRE479]'
  id: totrans-812
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE479]'
- en: '[PRE480]'
  id: totrans-813
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE480]'
- en: '[PRE481]'
  id: totrans-814
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE481]'
- en: '[PRE482]'
  id: totrans-815
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE482]'
- en: The `error` state variable can be destructured from React Query’s `useMutation`
    hook to determine whether the HTTP request has returned an error.
  id: totrans-816
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Part 4: Advanced React'
  id: totrans-817
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this part, we will learn about a number of different patterns to enable us
    to reuse a high amount of React and TypeScript code. We will also cover how to
    implement automated tests on React components, giving us the confidence to ship
    new features of applications quickly.
  id: totrans-818
  prefs: []
  type: TYPE_NORMAL
- en: 'This part includes the following chapters:'
  id: totrans-819
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 11*](B19051_11.xhtml#_idTextAnchor273), *Reusable Components*'
  id: totrans-820
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 12*](B19051_12.xhtml#_idTextAnchor294), *Unit Testing with Jest and
    React Testing Library*'
  id: totrans-821
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
