- en: Up and Running with Angular and TypeScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The previous chapters set out to explain the basic and most common features
    of TypeScript. These features will be used extensively while working on Angular
    projects. TypeScript is completely optional when it comes to building Angular
    projects but, trust me, just using JavaScript is not a route you will want to
    take after experiencing how TypeScript simplifies the development story.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter introduces us to the exciting part of this book--building Angular
    apps with TypeScript. We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Angular with TypeScript
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding component basics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning about Angular's template syntax
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some data binding magic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All these exciting topics will be backed with good examples, so you can see
    for yourself how these things work. Let's get started.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Angular and TypeScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Angular is not such a difficult framework to get started with. Unfortunately,
    from a beginner's perspective, the ecosystem may overwhelm you with lots and lots
    of terms. Most of these terms represent the tools that make Angular work, and
    not Angular itself. Webpack, linters, TypeScript, typings, build processes, and
    so on, are some confusing terms that may turn you off at the beginning of your
    Angular journey.
  prefs: []
  type: TYPE_NORMAL
- en: For this reason, the Angular team built an all-in-one tool to help you pay less
    attention to those surrounding tools but more attention to building your project.
    It's known as the Angular CLI, and with just a few CLI commands you're building
    your app. The time spent on managing JavaScript tools these days is alarming,
    and you don't want to get caught up in that mess as a beginner (or even a professional).
  prefs: []
  type: TYPE_NORMAL
- en: 'To install the CLI, you need to run the following command with npm:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When the installation is complete, you should see the following npm log in
    the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/946e872d-eee7-4441-a0a9-c0d0f012e0f4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can check whether the installation was successful by running the `help`
    or `version` commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The help command will show a list of commands available via the CLI tool, while
    the version command will show the currently installed version. None of them will
    print the aforementioned information if the installation was unsuccessful.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the printed log details when you run the `help` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bf7247b9-de44-45a4-a0fb-de4de21b74de.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Running the version command shows the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dc697db8-1ae7-48eb-bc71-868ff9c7c23f.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating a new Angular project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With the CLI installed, you can now start using it on your project. The first
    thing, of course, is to create one. The CLI''s `new` command is used just once
    in a project to generate the starter files and configuration that the project
    needs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The command does not just create a project for you; it also installs the npm
    dependencies, so you do not have to run the install command before getting started:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7ec491c8-5cfc-4cd4-891b-e99e4ad916ab.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Navigate right to the root of the folder and run the `serve` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the following output after running the command, which shows that
    your app is running successfully and where you can access it. It also shows bundled
    files, including styles and scripts. Note that there are no TypeScript files here;
    everything has been converted to JavaScript for the browser to understand:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/91490cf5-36b9-4f6b-9033-5a3761714509.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You should see your shiny app running at `localhost:4200`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/95e887a3-3cac-4afb-bd2b-c0fa550a5de1.png)'
  prefs: []
  type: TYPE_IMG
- en: Project structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Angular generates a lot of helper files to facilitate testing, the build process,
    package management, and so on. You can build a successful project without ever
    caring about what these files do. Hence, we are just going to show a few of the
    files that are important for us to get started:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/865e8674-9ca1-4184-9a15-976a45e428c3.png)'
  prefs: []
  type: TYPE_IMG
- en: We should be concerned about the `src` directory for now. That's where our project
    files (components, services, templates, and so on) will live.
  prefs: []
  type: TYPE_NORMAL
- en: Generating files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can add more TypeScript files and templates manually, but it is more effective
    to do so with the CLI tool. This is because the CLI tool not only creates files
    but also generates starter snippets to represent the kind of file you are trying
    to create. For example, let''s create a quote component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This is what the component command looks like with some of the generated codes
    and files:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d676ed0c-a41f-42c2-93ce-3a4bc118c0a6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The image comprises of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The CLI output of the generation process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The generated component, template, CSS, and test files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The TypeScript component.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The CLI can be used to generate other Angular/TypeScript building blocks, not
    just components. We won''t try it out right now; we will do so while discussing
    it in topics in upcoming chapters. The following table is to generate commands
    as seen on the project''s Github readme:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Scaffold** | **Usage** |'
  prefs: []
  type: TYPE_TB
- en: '| Component | `ng g component my-new-component` |'
  prefs: []
  type: TYPE_TB
- en: '| Directive | `ng g directive my-new-directive` |'
  prefs: []
  type: TYPE_TB
- en: '| Pipe | `ng g pipe my-new-pipe` |'
  prefs: []
  type: TYPE_TB
- en: '| Service | `ng g service my-new-service` |'
  prefs: []
  type: TYPE_TB
- en: '| Class | `ng g class my-new-class` |'
  prefs: []
  type: TYPE_TB
- en: '| Guard | `ng g guard my-new-guard` |'
  prefs: []
  type: TYPE_TB
- en: '| Interface | `ng g interface my-new-interface` |'
  prefs: []
  type: TYPE_TB
- en: '| Enum | `ng g enum my-new-enum` |'
  prefs: []
  type: TYPE_TB
- en: '| Module | `ng g module my-module` |'
  prefs: []
  type: TYPE_TB
- en: Basics concepts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will delve into different topics in this book, but it is a good idea to roughly
    explain what is going on for the sake of context.
  prefs: []
  type: TYPE_NORMAL
- en: Components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Your curiosity may have led you into opening `app.component.ts` or `quote.component.ts`.
    Don't worry if they seemed overwhelming; we will discuss components extensively
    in this book (especially, in the next two chapters).
  prefs: []
  type: TYPE_NORMAL
- en: 'Components are the heart of any Angular project. They are the core building
    blocks, and every other feature is just meant to support components. The files
    mentioned contain Angular components written in TypeScript. This is what `app.component.ts`
    looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: A component is a decorated class with a template. The type of decoration is
    what matters, in this case, a `Component` decorator. Remember from the previous
    chapter that decorators are just functions that extend the feature they are decorating.
    That is what is happening in the preceding example.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we import this decorator from Angular''s core module, `@angular/core`.
    We then place the decorator right above our `AppComponent` class. The decorator
    takes a JavaScript object as its argument to describe the component. The object
    contains the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`selector`: This is what the component will be identified as when it is called
    in any part of the app. Because this component is the entry point of your app,
    it will be used directly in the body by including its selector:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '`templateUrl`: Components render a template to the view. We need a way to tell
    the component which template to render. This is possible via the `template` or
    `templateUrl` property. The `template` property takes a string of HTML content
    while `templateUrl` takes a URL to the template HTML file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`styleUrls`: This is an array of style Urls that are applied to the defined
    template.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The class that is the actual component (and is being decorated) becomes the
    home for properties and methods that are associated with this component. All these
    work together as one, to make a reusable feature called a component.
  prefs: []
  type: TYPE_NORMAL
- en: 'The quote component looks very much alike:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The only obvious difference is that it implements the `OnInit` interface, which
    has an `ngOnInit` method that the class must implement. This method is known as
    a lifecycle hook, which we will discuss soon.
  prefs: []
  type: TYPE_NORMAL
- en: Templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Templates are just regular HTML files, though supercharged with interpolation
    and directives. The following is the current content of `app.component.html`,
    which is the template for `AppComponent`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, it''s just the usual HTML. One thing might seem unfamiliar,
    though:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The `title` text wrapped with double curly braces may confuse you. This is
    called interpolation. The `title` value is resolved at runtime based on the value
    of a property on the component''s class. Don''t forget we have a title property
    with the value, `app`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Apart from binding values like this, you can perform a lot of amazing tasks
    on the template. They include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Property and event binding
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Two-way binding
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Iteration and conditions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Style and class binding
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simple expressions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pipes and directives
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rather than feeding you with all the boring stuff related to templates and template
    syntax, what we should do is discuss them and how they are related to other upcoming
    topics. This way, you can see them live in examples, which should be more fun.
  prefs: []
  type: TYPE_NORMAL
- en: Component styles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Components parade reusability a lot. In fact, that's the first answer you get
    when you ask about the benefits of using the component architecture. This is the
    reason why templates and styles are scoped to the component rather than littering
    the app's environment with heavy HTML and CSS.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `styleUrls` property in the component''s decorator argument takes an array
    of URLs pointing to the styles you want to apply to the component. Most of the
    time, you just need a single file; therefore, the array will only contain a single
    URL item, in our case, `app.component.css`. It''s currently empty but we can carry
    out an experiment with it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The `*` selector is supposed to select everything in the document. So, we say,
    *select every element and set the background to red*. You may actually be surprised
    at the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/772e08c8-0079-46f0-8d01-d142ef190006.png)'
  prefs: []
  type: TYPE_IMG
- en: Notice how the actual body tag is not styled, which may not make any outright
    sense because you used the global selector. Component styles are scoped to the
    component; therefore the styles cannot leak to the containing parent. This is
    why the body remains white and the contents in the `AppComponent` template are
    red.
  prefs: []
  type: TYPE_NORMAL
- en: Modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Components are for building small reusable features in your product. They work
    together with concepts such as services, directives, pipes, and so on, to make
    a functional feature. In some situations, you may want these features to be moved
    around from one project to another or even between different sections of a huge
    project. Therefore, you need a way to collect them together as a feature. This
    is exactly what modules do.
  prefs: []
  type: TYPE_NORMAL
- en: 'Modules are classes decorated with the `NgModule` decorator. The decorator
    takes an object, just like the component decorator. This object describes all
    the feature members that you need to associate to this module. The possible members
    (but not all members) are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Declarations**: These include components, directives, and pipes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Providers**: These include injectable services'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Imports**: These include other imported modules'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bootstrap**: This is the entry component to start the app with'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We have one module already, which is `AppModule`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s take some time to describe the items in this module:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Declarations**: `AppComponent` and `QuoteComponent` are components. Therefore,
    they fall into this category. One amazing thing that the Angular CLI did after
    generating the quote component was to add it to the declarations automatically
    for us. If not, even when you use the component selector somewhere in the app,
    the quote component contents will still not be displayed, and you will get an
    error in the console.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Imports**: `BrowserModule` is a module. It is a module that contains common
    browser tasks, especially directives for templates, such as `*ngFor` and more.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Providers**: Since we don''t have any services yet, the providers can be
    omitted or the array can be left empty.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bootstrap**: The app module is our entry module. Therefore, it should define
    the entry component, which is `AppComponent`. This is what the `bootstrap` property
    does.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unit testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although we won't cover testing until the last chapter of this book, it pays
    to make testing a habit. This is why we are going to explore the simplicity of
    testing components here.
  prefs: []
  type: TYPE_NORMAL
- en: Basically, Angular provides an abstraction layer for testing your components
    with the help of `TestBed`. You don't need to run your entire application before
    you can see whether your components behave as planned. A simple test comes bundled
    with the CLI scaffold for our app component. It can be found adjacent to the file
    (which is a common and good practice) as `app.component.spec.ts`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s view the contents of this file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: First, we import the testing utilities from `@angular/core/testing` and the
    component to be tested, that is, `AppComponent`. A `describe` block, which houses
    the sets of test suites for a given feature (`AppComponent`), is also created
    but left empty.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we start writing the suites, we need to configure a temporary testing
    module for the component. This is done in a `beforeEach` block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: In the actual app, we could afford the luxury of creating `AppModule` where
    `AppComponent` lives as a declaration. Here, we just need a simple module with
    `AppComponent` on it, thanks to the `configureTestingModule` module of `TestBed` making
    this possible.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we can start writing the test suites for whatever scenario we want to
    examine. First, let''s check whether `AppComponent` is a thing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: We first try to create an instance of the component with `componentInstance`
    after creating the component itself with `createComponent()`.
  prefs: []
  type: TYPE_NORMAL
- en: The actual check is done when we assert with `expect` to see whether the component
    exists with `toBeTruthy()` .
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also check the content of the component''s properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: With `app` being an instance of the component, you can access the properties
    and methods on this instance. We just tested to see whether the initial value
    of `app.title` is equal to `app`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last test suite actually checks the DOM for values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Note that `detectChanges` is called in this suite. This kicks off binding, if
    any, on the template. Then, instead of creating an instance, we grab hold of the
    compiled element, query it for the `h1` tag, and check whether the text content
    of the tag contains `Welcome to app`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To run these tests, execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'This should start Karma, an isolated test environment. Your tests will run
    and the following will be printed to the CLI:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f8bea96f-951b-425b-8dfe-e478a1ca9699.png)'
  prefs: []
  type: TYPE_IMG
- en: You may be wondering why the last line says `4` tests instead of `3`; remember
    that the quote component we generated had a single test suite as well.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to create Angular projects and what files necessarily
    accompany a new project. Now you know how to create Angular projects, and scaffold
    building blocks such as components, and understand the basic skeleton of components.
    You also learned why modules exist, how to apply simple styles to components,
    and what unit tests look like in Angular.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will delve into the creation of more components and
    see some examples in play.
  prefs: []
  type: TYPE_NORMAL
