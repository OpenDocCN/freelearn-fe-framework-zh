- en: '1'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Preparing for Full-Stack Development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, I am first going to give a brief overview of the contents of
    the book and explain why the skills taught in this book are important in a modern
    development environment. Then, we will jump into action and set up a project that
    will be used as a basis for the development of our full-stack projects. At the
    end of this chapter, you will have an **integrated development environment** (**IDE**)
    and project set up and ready for full-stack development and will understand which
    tools can be used for setting up such projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we are going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Motivation to become a full-stack developer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is new in the third edition?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting the most out of this book
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up the development environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter will guide you through setting up all the necessary technologies
    needed for developing full-stack web applications throughout this book. Before
    we start, please install the following, if you do not already have them installed:'
  prefs: []
  type: TYPE_NORMAL
- en: Node.js v20.10.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Git v2.43.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visual Studio Code v1.84.2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Those versions are the ones used in the book. While installing a newer version
    should not be an issue, please note that certain steps might work differently
    on a newer version. If you are having an issue with the code and steps provided
    in this book, please try using the mentioned versions.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the code for this chapter on GitHub: [https://github.com/PacktPublishing/Modern-Full-Stack-React-Projects/tree/main/ch1](https://github.com/PacktPublishing/Modern-Full-Stack-React-Projects/tree/main/ch1).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The CiA video for this chapter can be found at: [https://youtu.be/dyf3nECvKAE](https://youtu.be/dyf3nECvKAE).'
  prefs: []
  type: TYPE_NORMAL
- en: Important
  prefs: []
  type: TYPE_NORMAL
- en: If you cloned the full repository for the book, Husky may not find the **.git**
    directory when running **npm install**. In that case, just run **git init** in
    the root of the corresponding chapter folder.
  prefs: []
  type: TYPE_NORMAL
- en: Motivation to become a full-stack developer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Understanding full-stack development is becoming increasingly important, as
    companies seek to increase the cooperation – and reduce the gap – between the
    frontend and the backend. The frontend is becoming more deeply integrated with
    the backend, using technologies such as server-side rendering. Throughout this
    book, we are going to learn about the development, integration, testing, and deployment
    of full-stack projects.
  prefs: []
  type: TYPE_NORMAL
- en: What is new in this release of Full-Stack React Projects?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unlike previous releases of Full-Stack React Projects, this new release focuses
    more on the integration of the frontend with the backend than the previous two
    editions, and thus intentionally does not focus so much on creating a **user interface**
    (**UI**) or using UI libraries, such as **Material UI** (**MUI**), on the frontend.
    This edition gives the essential knowledge for integrating and deploying full-stack
    web applications. The deployment of apps was missing completely from previous
    editions, and testing was only briefly introduced. This edition focuses more on
    these essential parts of full-stack development such that, after reading this
    book, you will be able to develop, integrate, test, and deploy a full-stack web
    application.
  prefs: []
  type: TYPE_NORMAL
- en: Getting the most out of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To keep the book short and to the point, we are going to use specific technologies
    and tools. The concepts, however, apply to other technologies as well. We will
    attempt to briefly introduce alternatives so that if something is not a good fit
    for your project, you can pick and choose different tools. I recommend first trying
    out the technologies introduced in this book to be able to follow the instructions,
    but do not hesitate to try out the alternatives on your own later.
  prefs: []
  type: TYPE_NORMAL
- en: It is highly recommended that you write the code on your own. Do not simply
    run the code examples that are provided. It is important to write the code yourself
    in order to learn and understand it properly. However, if you run into any issues,
    you can always refer to the code examples.
  prefs: []
  type: TYPE_NORMAL
- en: With that said, let’s start with setting up our development environment in the
    next section.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the development environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, we are going to use **Visual Studio Code** (**VS Code**) as our
    code editor. Feel free to use whichever editor you prefer, but keep in mind that
    the extensions used and settings configured may be slightly different in the editor
    of your choice.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s now install VS Code and useful extensions, and then continue setting up
    all the tools needed for our development environment.
  prefs: []
  type: TYPE_NORMAL
- en: Installing VS Code and extensions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before we can get started developing and setting up the other tools, we need
    to set up our code editor by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Download VS Code for your operating system from the official website (at the
    time of writing, the URL is [https://code.visualstudio.com/](https://code.visualstudio.com/)).
    We are going to use version *1.84.2* in this book.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After downloading and installing the application, open it, and you should see
    the following window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.1 – A fresh installation of VS Code (on macOS)](img/B19385_01_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.1 – A fresh installation of VS Code (on macOS)
  prefs: []
  type: TYPE_NORMAL
- en: 'To make things easier later, we are going to install some extensions, so click
    on the **Extensions** icon, which is the fifth icon from the top on the left in
    the screenshot. A sidebar should open, where you will see **Search Extensions
    in Marketplace** at the top. Enter an extension name here and click on **Install**
    to install it. Let’s start by installing the **Docker** extension:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.2 – Installing the Docker extension in VS Code](img/B19385_01_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.2 – Installing the Docker extension in VS Code
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the following extensions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Docker (by Microsoft)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: ESLint (by Microsoft)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Prettier – Code formatter (by Prettier)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: MongoDB for VS Code (by MongoDB)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Support for JavaScript and Node.js already comes built-in with VS Code.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Create a folder for the projects made in this book (for example, you can call
    it **Full-Stack-React-Projects**). Inside this folder, create a new folder called
    **ch1**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the **Files** tab (first icon from top) and click the **Open Folder**
    button to open the empty **ch1** folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you get a dialog asking **Do you trust the authors of the files in this folder?**,
    check **Trust the authors of all files in the parent folder ‘Full-Stack-React-Projects’**
    and then click on the **Yes, I trust the** **authors** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.3 – Allowing VS Code to execute files in our project folder](img/B19385_01_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.3 – Allowing VS Code to execute files in our project folder
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: You can safely ignore this warning in your own projects, as you can be sure
    that those do not contain malicious code. When opening folders from untrusted
    sources, you can press **No, I don’t trust the authors**, and still browse the
    code. However, when doing so, some features of VS Code will be disabled.
  prefs: []
  type: TYPE_NORMAL
- en: We have now successfully set up VS Code and are ready to start setting up our
    project! If you have cloned the folder from the GitHub code examples provided,
    a notification telling you that a Git repository was found will also pop up. You
    can simply close this one, as we only want to open the `ch1` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Now that VS Code is ready, let’s continue by setting up a new project with Vite.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a project with Vite
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For this book, we are going to use **Vite** to set up our project, as it is
    the most popular and liked according to *The State of JS 2022* survey ([https://2022.stateofjs.com/](https://2022.stateofjs.com/)).
    Vite also makes it easy to set up a modern frontend project, while still making
    it possible to extend the configuration later if needed. Follow these steps to
    set up your project with Vite:'
  prefs: []
  type: TYPE_NORMAL
- en: In the VS Code menu bar, go to **Terminal** | **New Terminal** to open a new
    Terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside the Terminal, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Make sure there is a period at the end of the command to create the project
    in the current folder instead of creating a new folder.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: To keep the instructions in this book working even when new versions are released,
    we pin all packages to a fixed version. Please follow the instructions with the
    given versions. After finishing this book, when starting new projects on your
    own, you should always try using the latest versions but keep in mind that changes
    might be needed to get them working. Consult the documentation of the respective
    packages and follow the migration path from the book version to the latest version.
  prefs: []
  type: TYPE_NORMAL
- en: When asked if **create-vite** should be installed, simply type **y** and press
    the *Return/Enter* key to proceed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When asked about the framework, use the arrow keys to select **React** and press
    *Return*. If you are being asked for a project name, press *Ctrl* + *C* to cancel,
    then run the command again, making sure there is a period at the end to select
    the current folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When asked about the variant, select **JavaScript**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, our project is set up and we can run **npm install** to install the dependencies.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Afterward, run **npm run dev** to start the dev server, as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 1.4 – The \uFEFFTerminal after setting up a project with Vite and\
    \ before starting the dev server](img/B19385_01_4.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 1.4 – The Terminal after setting up a project with Vite and before starting
    the dev server
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: For simplicity in setting up, we just used **npm** directly. If you prefer **yarn**
    or **pnpm**, you can instead run **yarn create vite** or **pnpm create** **vite**,
    respectively.
  prefs: []
  type: TYPE_NORMAL
- en: In the Terminal, you will see a URL telling you where your app is running. You
    can either hold *Ctrl* (*Cmd* on macOS) and click on the link to open it in your
    browser, or manually enter the URL in a browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To test whether your app is interactive, click the button with the text **count
    is 0**, and it should increase the count every time it is pressed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.5 – Our first React app running with Vite](img/B19385_01_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.5 – Our first React app running with Vite
  prefs: []
  type: TYPE_NORMAL
- en: Alternatives to Vite
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Alternatives to Vite are bundlers, such as webpack, Rollup, and Parcel. These
    are highly configurable but often do not offer a great experience for dev servers.
    They first must bundle all our code together before serving it to the browser.
    Instead, Vite natively supports the **ECMAScript module** (**ESM**) standard.
    Furthermore, Vite requires very little configuration to get started. A downside
    of Vite is that it can be hard to configure certain more complex scenarios with
    it. An upcoming bundler that is promising is Turbopack; however, it is still very
    new at the time of writing. For full-stack development with server-side rendering,
    we will later get to know Next.js, which is a React framework that also provides
    a dev server out of the box.
  prefs: []
  type: TYPE_NORMAL
- en: Now that our boilerplate project is up and running, let’s spend some time setting
    up tools that will enforce best practices and a consistent code style.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up ESLint and Prettier to enforce best practices and code style
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that our React app is set up, we are going to set up **ESLint** to enforce
    coding best practices with JavaScript and React. We are also going to set up **Prettier**
    to enforce a code style and automatically format our code.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the necessary dependencies
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'First, we are going to install all the necessary dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: In the Terminal, click on the **Split Terminal** icon at the top right of the
    **Terminal** pane to create a new **Terminal** pane. This will keep our app running
    while we run other commands.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on this newly opened pane to focus it. Then, enter the following command
    to install ESLint, Prettier, and the relevant plugins:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The packages installed are the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**prettier**: Formats our code automatically according to a defined code style'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**eslint**: Analyzes our code and enforces best practices'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**eslint-config-react:** Enables rules in ESLint relevant to React projects'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**eslint-config-prettier:** Disables rules relating to code style in ESLint
    so that Prettier can handle them instead'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**eslint-plugin-jsx-a11y**: Allows ESLint to check for accessibility (**a11y**)
    issues in our JSX code'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The **--save-dev** flag in **npm** saves those dependencies as **dev** dependencies,
    which means that they will only be installed for development. They will not be
    installed and included in a deployed app. This is important in order to keep the
    size of our containers as small as possible later.
  prefs: []
  type: TYPE_NORMAL
- en: After the dependencies are installed, we need to configure Prettier and ESLint.
    We will start with configuring Prettier.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Prettier
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Prettier will format the code for us and replace the default code formatter
    for JavaScript in VS Code. It will allow us to spend more time writing code, automatically
    formatting it for us properly when we save the file. Follow these steps to configure
    Prettier:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click below the files list in the left sidebar of VS Code (if it is not
    opened, click the **Files** icon) and press **New file...** to create a new file.
    Call it **.prettierrc.json** (do not forget the period at the beginning of the
    file name!).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The newly created file should open automatically, so we can start writing the
    following configuration into it. We first create a new object and set the **trailingComma**
    option to **all** to make sure objects and arrays that span over multiple lines
    always have a comma at the end, even for the last element. This reduces the number
    of touched lines when committing a change via Git:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we set the **tabWidth** option to **2** spaces:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the **printWidth** to **80** characters per line to avoid long lines in
    our code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the **semi** option to **false** to avoid semicolons where not necessary:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we enforce the use of single quotes instead of double quotes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: These settings for Prettier are just an example of a coding style convention.
    Of course, you are free to adjust these to your own preferences. There are many
    more options, all of which can be found in the Prettier docs ([https://prettier.io/docs/en/options.html](https://prettier.io/docs/en/options.html)).
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the Prettier extension
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now that we have a configuration file for Prettier, we need to make sure the
    VS Code extension is properly configured to format the code for us:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the VS Code settings by going to **File** | **Preferences...** | **Settings**
    on Windows/Linux, or **Code** | **Settings...** | **Settings** on macOS.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the newly opened settings editor, click on the **Workspace** tab. This ensures
    that we save all our settings in a **.vscode/settings.json** file in our project
    folder. When other developers open our project, they will automatically be using
    those settings as well.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Search for **editor format on save** and check the checkbox to enable formatting
    code on save.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Search for **editor default formatter** and select **Prettier - Code formatter**
    from the list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To verify that Prettier works, open the **.prettierrc.json** file, add some
    extra spaces to the beginning of a line, and save the file. You should notice
    that Prettier reformatted the code to adhere to the defined code style. It will
    reduce the number of spaces for indentation to two.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that Prettier is set up properly, we do not need to worry about formatting
    our code manually anymore. Feel free to just type in code as you go and save the
    file to get it formatted for you!
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Prettier ignore file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To improve performance and avoid running Prettier on files that should not
    be automatically formatted, we can ignore certain files and folders by creating
    a Prettier ignore file. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file called **.prettierignore** in the root of our project, similar
    to how we created the **.****prettierrc.json** file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following contents to it to ignore the transpiled source code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `node_modules/` folder is automatically ignored by Prettier.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that we have successfully set up Prettier, we are going to configure ESLint
    to enforce coding best practices.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring ESLint
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'While Prettier focuses on the style and formatting of our code, ESLint focuses
    on the actual code, avoiding common mistakes or unnecessary code. Let’s configure
    it now:'
  prefs: []
  type: TYPE_NORMAL
- en: Delete the automatically created **.****eslintrc.cjs** file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new **.eslintrc.json** file and start writing the following configuration
    into it. First, we set **root** to **true** to make sure ESLint does not look
    at parent folders for more configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define an **env** object, in which we set the browser environment to **true**
    so that ESLint understands browser-specific globals such as **document** and **window**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define a **parserOptions** object, where we specify that we are using the latest
    ECMAScript version and ESM:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define an **extends** array to extend from recommended configurations. Specifically,
    we extend from ESLint’s recommended rules and the recommended rules for the plugins
    we installed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'As the last element of the array, we use **prettier** to disable all code style-related
    rules in ESLint and let Prettier handle it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we define settings for the plugins. First, we tell the **react** plugin
    to detect our installed React version automatically:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, outside of the **settings** section, we define an **overrides** array,
    in which we specify that ESLint should only lint **.js** and **.****jsx** files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new **.eslintignore** file, with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `node_modules/` folder is automatically ignored by ESLint.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Save the files and run **npx eslint src** in the Terminal to run the linter.
    You will see that there are some errors already due to our configured rules not
    matching the source provided by the default project in Vite:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.6 – When running ESLint for the first time, we get some errors about
    rule violations](img/B19385_01_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.6 – When running ESLint for the first time, we get some errors about
    rule violations
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, all these issues are automatically fixable by ESLint. Run **npx
    eslint src --fix** to fix the issues automatically. Now, when you run **npx eslint
    src** again, you will not get any output. This means that there were no linter
    errors!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: The **npx** command allows us to execute commands provided by **npm** packages,
    in a similar context as running them in **package.json** scripts would do. It
    can also run remote packages without installing them permanently. If the package
    is not installed yet, it will ask you whether it should do this.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a new script to run our linter
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In the previous section, we have been calling the linter by running `npx eslint
    src` manually. We are now going to add a `lint` script to `package.json`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Terminal, run the following command to define a **lint** script in the
    **package.json** file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, run **npm run lint** in the Terminal. This should execute **eslint src**
    successfully, just like **npx eslint** **src** did:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 1.7 – \uFEFFThe linter running successfully, with no errors](img/B19385_01_7.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 1.7 – The linter running successfully, with no errors
  prefs: []
  type: TYPE_NORMAL
- en: After setting up ESLint and Prettier, we still need to make sure that they run
    before we commit code. Let’s set up Husky to make sure we commit proper code now.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Husky to make sure we commit proper code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After setting up Prettier and ESLint, we will now get our code automatically
    formatted on save by Prettier and see errors from ESLint in VS Code when we make
    mistakes or ignore best practices. However, we might miss some of these errors
    and accidentally commit code that is invalid. To avoid this, we can set up **Husky**
    and **lint-staged**, which run before we commit our code to Git and ensure that
    Prettier and ESLint are executed successfully on the source code before it is
    committed.
  prefs: []
  type: TYPE_NORMAL
- en: Important
  prefs: []
  type: TYPE_NORMAL
- en: If you cloned the full repository for the book, Husky may not find the **.git**
    directory when running **npm install**. In that case, just run **git init** in
    the root of the corresponding chapter folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s set Husky and lint-staged up by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command to install Husky and lint-staged as **dev** dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the **package.json** file and add the following **lint-staged** configuration
    to it in a new object after **devDependencies**, then save the file. This will
    run Prettier and ESlint on all committed **.js** and **.jsx** files and attempt
    to automatically fix code style and linter errors, if possible:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Initialize a Git repository in the **ch1** folder and make an initial commit
    with just the **package.json** file, as lint-staged does not get executed on the
    initial commit:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the **husky install** script to a **prepare** script in **package.json**,
    so that Husky gets installed automatically when the project is cloned and **npm
    install** is executed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Since we do not need to run **npm install** again right now, we need to manually
    run the **prepare** script this time:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a **pre-commit** hook for lint-staged, so that ESLint and Prettier run
    every time we do **git commit**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, add all files to Git and attempt to make a commit:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If everything worked successfully, you should see `husky` running `lint-staged`,
    which, in turn, runs `prettier` and `eslint`, after you run `git commit`. If you
    are getting a configuration error, ensure that all files are saved properly and
    then run `git` `commit` again.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.8 – Husky and lint-staged successfully enforcing code style and
    best practices before we commit](img/B19385_01_8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.8 – Husky and lint-staged successfully enforcing code style and best
    practices before we commit
  prefs: []
  type: TYPE_NORMAL
- en: Setting up commitlint to enforce a standard for our commit messages
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In addition to linting our code, we can also lint our commit messages. You
    may have noticed that we were prefixing our commit messages with a type already
    (the `chore` type). Types make it easier to follow what was changed in a commit.
    To enforce the use of types, we can set up **commitlint**. Follow these steps
    to set it up:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install commitlint and a conventional config for commitlint:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new **.commitlintrc.json** file in the root of our project and add
    the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a **commit-msg** hook to Husky:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, if we try adding our changed files and committing without a type or a
    wrong type, we will get an error from commitlint and will not be able to make
    such a commit. If we add the correct type, it will succeed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following figure shows Husky in action. If we write an incorrect commit
    message, it will reject it and not let us commit the code. Only if we enter a
    properly formatted commit message will the commit go through:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.9 – commitlint working successfully and preventing commits without
    a type and with wrong types](img/B19385_01_9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.9 – commitlint working successfully and preventing commits without
    a type and with wrong types
  prefs: []
  type: TYPE_NORMAL
- en: 'Commit messages in the commitlint conventional config ([https://www.conventionalcommits.org/](https://www.conventionalcommits.org/))
    are structured in a way where a type must be listed first, then an optional scope
    follows, and then the description follows, such as `type(scope): description`.
    Possible types are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**fix**: For bug fixes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**feat**: For new features'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**refactor**: For restructuring the code without adding features or fixing
    bugs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**build**: For changes in the build system or dependencies'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ci**: For changes in the CI/CD configuration'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**docs**: For changes in the documentation only'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**perf**: For performance optimizations'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**style**: For fixing code formatting'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**test**: For adding or adjusting tests'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The scope is optional and best used in a monorepo to specify that changes were
    made to a certain app or library within it.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have successfully set up our project and started enforcing standards,
    we can continue working on our project without worrying about a consistent code
    style, consistent commit messages, or making small mistakes. ESLint, Prettier,
    Husky, and commitlint have got us covered.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, [*Chapter 2*](B19385_02.xhtml#_idTextAnchor028), *Getting
    to Know Node.js and MongoDB*, we are going to learn how to write and run small
    Node.js scripts and how MongoDB, a database system, works.
  prefs: []
  type: TYPE_NORMAL
