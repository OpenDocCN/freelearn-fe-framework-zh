["```js\nconst [state, setState] = useState(initialState)\n```", "```js\nimport { useState } from \"react\";\nfunction Counter() {\n  const [count, setCount] = useState(0);\n  return (\n    <>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me</button>\n    </>\n  );\n}\n```", "```js\nfunction handleClick() {\n  setCounter(a => a + 1);\n  setCounter(a => a + 1);\n  setCounter(a => a + 1);\n}\n```", "```js\nffunction reducer(state, action) {\n  switch (action.type) {\n    case \"increment\":\n      return { count: state.count + 1 };\n    case \"decrement\":\n      return { count: state.count - 1 };\n    case \"reset\":\n      return { count: action.payload };\n    default:\n      throw new Error();\n  }\n}\nfunction init(initialCount) {\n  return { count: initialCount };\n}\nfunction Counter() {\n  const initialCount = 0;\n  const [state, dispatch] = useReducer(reducer, initialCount, init);\n  return (\n    <>\n      Count: {state.count}\n      <button\n        onClick={() => dispatch({ type: \"reset\", payload: initialCount })}\n      >\n        Reset\n      </button>\n      <button onClick={() => dispatch({ type: \"decrement\" \n        })}>decrement</button>\n      <button onClick={() => dispatch({ type: \"increment\" \n        })}>increment</button>\n    </>\n  );\n}\n```", "```js\n<ColorContext.Provider value=\"blue\">\n  <About />\n  <Services />\n  <Clients />\n  <ColorContext.Provider value=\"white\">\n    <Contact />\n  </ColorContext.Provider>\n</ColorContext.Provider>\n```", "```js\nuseEffect(() => {\n  // Runs after first render and every re-render with\n     dependency change\n}, [name, status]);\n```", "```js\nuseEffect(() => {\n  // Runs after initial render only\n}, []);\n```", "```js\nuseEffect(() => {\n  // Runs after every re-render\n});\n```", "```js\nconst userUrl = \"https://jsonplaceholder.typicode.com/users\";\nexport default function Users() {\n  const [users, setUsers] = useState([]);\n  const [name, setName] = useState(\"John\");\n  const [message, setMessage] = useState(\"\");\n  const userQueryOptions = {\n    url: userUrl,\n    name,\n  };\n  useEffect(() => {\n    const userUrl = buildUserURL(userQueryOptions); //buildUserURL is \n      excluded from code snippet\n    fetch(userUrl)\n      .then((res) => res.json())\n      .then((users) => setUsers(users));\n  }, [userQueryOptions]);\n  return (\n    <>\n      Users: {message}\n      <input value={message} onChange={(e) => setMessage(e.target.\n        value)} />\n      <input value={name} onChange={(e) => setName(e.target.value)} />\n      {users &&\n        users.map((user) => (\n          <div>\n            Name: {user.name}\n            Email: {user.email}\n          </div>\n        ))}\n    </>\n  );\n}\n```", "```js\nuseEffect(() => {\n  const userOptions = {\n    url: userUrl,\n    name,\n  };\n  const userUrl = buildUserURL(userOptions);\n  fetch(userUrl)\n    .then((res) => res.json())\n    .then((users) => setUsers(users));\n}, [name]);\n```", "```js\nconst cachedValue = useMemo(calculateValue, dependencies)\n```", "```js\nimport { useState, useMemo } from \"react\";\nfunction factorial(number) {\n  if (number <= 0) {\n    return \"Number should be positive value.\";\n  } else if (number === 1) {\n    return 1;\n  } else {\n    return number * factorial(number - 1);\n  }\n}\nexport default function CounterFactorial() {\n  const [count, setCount] = useState(0);\n  const [number, setNumber] = useState(1);\n  const factorial = useMemo(() => factorial(number), [number]);\n  return (\n    <>\n      <h2>Counter: {count}</h2>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n      <h2>Factorial: {factorial}</h2>\n      <input\n        type=\"number\"\n        value={number}\n        onClick={() => setNumber(number + 1)}\n      />\n    </>\n  );\n}\n```", "```js\n      const findCity = useMemo(() => {\n        country: 'USA',\n        name: name\n      }, [name]);\n    ```", "```js\n    const findCity = useMemo(() => {\n      return {\n        country: \"USA\",\n        name: name,\n      };\n    }, [name]);\n    ```", "```js\n    const filterCities = useMemo(() => filteredCities(city, country));\n    ```", "```js\n    const filterCities = useMemo(\n      () => filteredCities(city, country),\n      [city, country]\n    );\n    ```", "```js\n    {\n      products.map((product) => {\n        const revenue = useMemo(() => calculateRevenue(product), [product]);\n        return (\n          <>\n            <span>Product: {product.name}</span>\n            <span>Revenue: {revenue}</span>\n          </>\n        );\n      });\n    }\n    ```", "```js\n    {\n      products.map((product) => {\n        return <Report product={product} />;\n      });\n    }\n    ```", "```js\nimport { memo } from 'react';\nconst TaxPayer = memo(function TaxPayer({ onSubmit }) {\n  // ...\n});\n```", "```js\nfunction TaxCalculation({ year, income}) {\n  const handleSubmit = useCallback((taxPayerDetails) => {\n    post('/tax/' + year, {\n      taxPayerDetails,\n    income\n    });\n  }, [year, income]);\n  return (\n    <div>\n      <TaxPayer onSubmit={handleSubmit} />\n    </div>\n  );\n}\n```", "```js\nfunction CreateBlogArticle() {\n  // This is an expensive object to create the article\n}\nfunction Blog() {\n  const articleRef = useRef(new CreateBlogArticle());\n  //...\n}\n```", "```js\nfunction Blog() {\n  const articleRef = useRef(null);\n  if (articleRef.current === null) {\n    articleRef.current = new CreateBlogArticle();\n  }\n  //...\n}\n```", "```js\nuseImperativeHandle(ref, () => ({\n  open: () => ref.current.invokeDialog(),\n  close: () => ref.current.closeDilaog(),\n  reset: () => ref.current.clearData(),\n}));\n```", "```js\nimport { useImmer } from \"use-immer\";\nfunction UserProfile() {\n  const [user, setUser] = useImmer({\n    name: \"Tom\",\n    address: {\n      country: \"United States\",\n      city: \"Austin\",\n      postalCode: 73301,\n    },\n  });\n  function updatePostalCode(code) {\n    setUser((draft) => {\n      draft.address.postalCode = code;\n    });\n  }\n  return (\n    <div className=\"profile\">\n      <h1>\n        Hello {user.name}, your latest postal code is ({user.address.\n          postalCode}\n        )\n      </h1>\n      <input\n        onChange={(e) => {\n          updatePostalCode(e.target.value);\n        }}\n        value={user.address.postalCode}\n      />\n    </div>\n  );\n}\n```", "```js\nimport { useState, useEffect } from \"react\";\nconst useFetchData = (url, initialData) => {\n  const [data, setData] = useState(initialData);\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    setLoading(true);\n    fetch(url)\n      .then((res) => res.json())\n      .then((data) => setData(data))\n    .catch((err) => console.log(err))\n    .finally(() => setLoading(false));\n  }, [url]);\n  return {data, loading};\n};\nexport default useFetchData;\n```", "```js\nimport useFetchData from './useFetchData.js';\nexport default function Posts() {\n  const url = \"https://jsonplaceholder.typicode.com/posts?userId=1\";\n  const { data, loading} = useFetchData(url, []);\n  return (\n    <>\n      {loading && <p>Loading posts… </p>}\n      {data && (\n    data.map((item) =>\n       <div key={item?.title}>\n        <p>\n          {item?.title}\n                  <br/>\n          {item?.body}\n        </p>\n      </div>\n      )\n      )}\n    </>\n  );\n}\n```", "```js\nconst useFetchData = (url, initialData) => {\n    useDebugValue(url);\n    const [data, setData] = useState(initialData);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n    useDebugValue(error, (err) =>\n      err ? `fetch is failed with ${err.message}` :\n        \"fetch is successful\"\n    );\n    useEffect(() => {\n      setLoading(true);\n      fetch(url)\n        .then((res) => res.json())\n        .then((data) => setData(data))\n        .catch((err) => setError(err))\n        .finally(() => setLoading(false));\n    }, [url]);\n    useDebugValue(data, (items) =>\n      items.length > 0 ? items.map((item) => item.title) :\n        \"No posts available\"\n  );\n    return {data, loading};\n};\n```"]