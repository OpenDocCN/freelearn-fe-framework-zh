- en: Growing the Skeleton into a Social Media Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将骨架扩展成社交媒体应用
- en: Social media is an integral part of the web these days, and many of the user-centric
    web applications we build end up requiring a social component down the line to
    drive user engagement.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 社交媒体现在是网络的一个基本组成部分，我们构建的许多以用户为中心的 Web 应用最终都需要一个社交组件来推动用户参与。
- en: For our first real-world MERN application, we will modify the MERN skeleton
    application we developed in [Chapter 3](a9dedbd8-baf6-4ec8-b766-0b370227fbe4.xhtml), *Building
    a Backend with MongoDB, Express, and Node*, and [Chapter 4](6f2ca10a-8079-4e3a-9d42-a3db8e85b9d9.xhtml), *Adding
    a React Frontend to Complete MERN*, to build a simple social media application
    in this chapter. While doing this, you will learn how to extend the integration
    of the MERN stack technologies and add new features to grow your own full-stack
    web applications.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的第一个真实世界 MERN 应用，我们将修改我们在 [第 3 章](a9dedbd8-baf6-4ec8-b766-0b370227fbe4.xhtml)，*使用
    MongoDB、Express 和 Node 构建后端*，和 [第 4 章](6f2ca10a-8079-4e3a-9d42-a3db8e85b9d9.xhtml)，*添加
    React 前端以完成 MERN*，中开发的 MERN 骨架应用，在本章中构建一个简单的社交媒体应用。在这个过程中，你将学习如何扩展 MERN 栈技术的集成并添加新功能以扩展你自己的全栈
    Web 应用。
- en: 'In this chapter, we will go over the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下主题：
- en: Introducing MERN Social
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍 MERN 社交
- en: Updating the user profile
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新用户资料
- en: Following users in MERN Social
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 MERN 社交中关注用户
- en: Posting messages with photos
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布带照片的消息
- en: Implementing interactions on posts
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在帖子中实现交互
- en: Introducing MERN Social
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍 MERN 社交
- en: 'MERN Social is a social media application with rudimentary features inspired
    by existing social media platforms such as Facebook and Twitter. The main purpose
    of this application is to demonstrate how to use the MERN stack technologies to
    implement features that allow users to connect or follow each other, and interact
    over shared content. While building out MERN Social in this chapter, we will go
    over the implementation of the following social media-flavored features:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: MERN 社交是一个具有基本功能的社交媒体应用，灵感来源于现有的社交媒体平台，如 Facebook 和 Twitter。此应用的主要目的是展示如何使用
    MERN 栈技术实现允许用户相互连接或关注的特性，并在共享内容上进行交互。在本章构建 MERN 社交的过程中，我们将讨论以下具有社交媒体特色的特性实现：
- en: User profile with a description and a photo
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含描述和照片的用户资料
- en: Users following each other
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户相互关注
- en: Who to follow suggestions
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 谁应该关注建议
- en: Posting messages with photos
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布带照片的消息
- en: Newsfeed with posts from followed users
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 展示关注用户发布的新闻源
- en: Listing posts by user
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按用户列出帖子
- en: Liking posts
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点赞帖子
- en: Commenting on posts
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在帖子上发表评论
- en: 'You can extend these implementations further, as desired, for more complex
    features. The MERN Social home page looks as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以根据需要进一步扩展这些实现，以实现更复杂的功能。MERN 社交主页如下所示：
- en: '![](img/f5366a8d-d429-400a-96ce-de8f53327195.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f5366a8d-d429-400a-96ce-de8f53327195.png)'
- en: The code for the complete MERN Social application is available on GitHub at
    [https://github.com/PacktPublishing/Full-Stack-React-Projects-Second-Edition/tree/master/Chapter05/mern-social](https://github.com/PacktPublishing/Full-Stack-React-Projects-Second-Edition/tree/master/Chapter05/mern-social). You
    can clone this code and run the application as you go through the code explanations
    for the rest of this chapter.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的 MERN 社交应用代码可在 GitHub 上找到，网址为 [https://github.com/PacktPublishing/Full-Stack-React-Projects-Second-Edition/tree/master/Chapter05/mern-social](https://github.com/PacktPublishing/Full-Stack-React-Projects-Second-Edition/tree/master/Chapter05/mern-social)。你可以克隆此代码，并在浏览本章其余部分的代码解释时运行应用。
- en: 'The views needed for the MERN Social application will be developed by extending
    and modifying the existing React components in the MERN skeleton application.
    The following component tree shows all the custom React components that make up
    the MERN Social frontend and also exposes the composition structure we will use
    to build out the views in the rest of this chapter:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: MERN 社交应用所需的视图将通过扩展和修改 MERN 骨架应用中现有的 React 组件来开发。以下组件树显示了构成 MERN 社交前端的所有自定义
    React 组件，同时也暴露了我们将在本章其余部分构建视图所使用的组合结构：
- en: '![](img/5355a21c-bde7-47b7-a95d-9a57de794243.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5355a21c-bde7-47b7-a95d-9a57de794243.png)'
- en: Besides updating the existing components, we will also add new custom components
    to compose views, including a Newsfeed view where the user can create a new post
    and also browse a list of all the posts from people they follow on MERN Social.
    In the next section, we will begin by updating the user profile to demonstrate
    how to upload a profile photo and add a short bio for each user on the platform.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 除了更新现有组件外，我们还将添加新的自定义组件来组合视图，包括一个新闻源视图，用户可以在其中创建新的帖子，也可以浏览他们关注的MERN Social上所有人的所有帖子。在下一节中，我们将首先更新用户资料，以展示如何上传个人照片并为平台上的每个用户添加简短的个人简介。
- en: Updating the user profile
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新用户资料
- en: 'The existing skeleton application only has support for a user''s name, email,
    and password. But in MERN Social, we will allow users to add a description about
    themselves, as well as upload a profile photo while editing the profile after
    signing up, as shown in the following screenshot:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现有的骨架应用程序仅支持用户名、电子邮件和密码。但在MERN Social中，我们将允许用户在注册后编辑个人资料时添加关于自己的描述，以及上传个人照片，如下面的截图所示：
- en: '![](img/c3572610-108c-4d6f-8239-d62751914893.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c3572610-108c-4d6f-8239-d62751914893.png)'
- en: In order to implement this feature update, we need to modify both the user backend
    and frontend. In the following sections, we will learn how to update the user
    model and user update API in the backend, and then the user profile and user profile
    edit form views in the frontend to add a short description and a profile photo
    for users in MERN Social.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现此功能更新，我们需要修改用户后端和前端。在以下章节中，我们将学习如何更新后端中的用户模型和用户更新API，然后是前端中的用户资料和用户资料编辑表单视图，以在MERN
    Social中为用户添加简短描述和个人照片。
- en: Adding an about description
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加关于描述
- en: 'To store the short description that''s entered in the `about` field by a user,
    we need to add an `about` field to the user model in `server/models/user.model.js`:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 为了存储用户在`about`字段中输入的简短描述，我们需要在`server/models/user.model.js`中的用户模型中添加一个`about`字段：
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Then, to get the description as input from the user, we need to add a multiline
    `TextField` to the `EditProfile` form and handle the value change the same way
    we did for the user's name input.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，为了从用户那里获取描述作为输入，我们需要在`EditProfile`表单中添加一个多行`TextField`，并像处理用户名输入一样处理值变化。
- en: '`mern-social/client/user/EditProfile.js`:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/user/EditProfile.js`:'
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Finally, to show the description text that was added to the `about` field on
    the user profile page, we can add it to the existing profile view.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，为了在用户资料页面上显示添加到`about`字段的描述文本，我们可以将其添加到现有的个人资料视图中。
- en: '`mern-social/client/user/Profile.js`:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/user/Profile.js`:'
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: With this modification to the user feature in the MERN skeleton code, users
    can now add and update a description about themselves to be displayed on their
    profiles. Next, we will add the ability to upload a photo to complete the user
    profile.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 通过对MERN骨架代码中用户功能的此修改，用户现在可以添加和更新关于自己的描述，并在个人资料中显示。接下来，我们将添加上传照片的功能，以完成用户资料的完善。
- en: Uploading a profile photo
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 上传个人照片
- en: 'Allowing a user to upload a profile photo will require that we store the uploaded
    image file and retrieve it on request to load it in the view. There are multiple
    ways of implementing this upload feature while considering the different file
    storage options:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 允许用户上传个人照片将需要我们存储上传的图像文件，并在请求时检索它以在视图中加载。在考虑不同的文件存储选项时，有多种实现此上传功能的方法：
- en: '**Server filesystem**: Upload and save files to a server filesystem and store
    the URL in MongoDB.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务器文件系统**：将文件上传和保存到服务器文件系统，并将URL存储在MongoDB中。'
- en: '**External file storage**: Save files to external storage such as Amazon S3
    and store the URL in MongoDB.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**外部文件存储**：将文件保存到外部存储，例如Amazon S3，并将URL存储在MongoDB中。'
- en: '**Store as data in MongoDB**: Save files that are small in size (less than
    16 MB) to MongoDB as data of the Buffer type.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**存储为MongoDB中的数据**：将小于16 MB大小的文件作为Buffer类型的数据存储在MongoDB中。'
- en: For MERN Social, we will assume that the photo files that are uploaded by the
    user will be small in size and demonstrate how to store these files in MongoDB
    for the profile photo upload feature. In [Chapter 8](7514f26d-29e1-46e2-ac46-7515b2c3a6d0.xhtml),
    *Extending the Marketplace for Orders and Payments*, we will discuss how to store
    larger files in MongoDB using GridFS.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 对于MERN Social，我们将假设用户上传的图片文件大小较小，并演示如何存储这些文件以实现个人照片上传功能。在[第8章](7514f26d-29e1-46e2-ac46-7515b2c3a6d0.xhtml)“扩展订单和支付的市场”，我们将讨论如何使用GridFS在MongoDB中存储更大的文件。
- en: 'To implement this photo upload feature, in the following sections, we will
    do the following:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现此照片上传功能，在以下章节中，我们将执行以下操作：
- en: Update the user model to store the photo.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新用户模型以存储照片。
- en: Integrate updated frontend views to upload the photo from the client- side.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成更新的前端视图以从客户端上传照片。
- en: Modify the user update controller in the backend to process the uploaded photo.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改后端中的用户更新控制器以处理上传的图片。
- en: Updating the user model to store a photo in MongoDB
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新用户模型以在MongoDB中存储照片
- en: In order to store the uploaded profile photo directly in the database, we will
    update the user model to add a `photo` field that stores the file as data of the `Buffer` type,
    along with the file's `contentType`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 为了直接在数据库中存储上传的个人资料照片，我们将更新用户模型以添加一个`photo`字段，该字段以`Buffer`类型的数据存储文件，并包含文件的`contentType`。
- en: '`mern-social/server/models/user.model.js`:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/server/models/user.model.js`:'
- en: '[PRE3]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: An image file that's uploaded by the user from the client- side will be converted
    into binary data and stored in this `photo` field for documents in the Users collection
    in MongoDB. Next, we will look at how to upload the file from the frontend.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 用户从客户端上传的图像文件将被转换为二进制数据并存储在MongoDB中用户集合的文档的`photo`字段中。接下来，我们将看看如何从前端上传文件。
- en: Uploading a photo from the edit form
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从编辑表单上传照片
- en: Users will be able to upload an image file from their local files when editing
    the profile. In order to implement this interaction, we will update the `EditProfile`
    component in `client/user/EditProfile.js` with an upload photo option and then
    attach the user selected file in the form data that's submitted to the server.
    We will discuss this in the following sections.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户编辑个人资料时，他们将能够从本地文件上传图像文件。为了实现这种交互，我们将更新`client/user/EditProfile.js`中的`EditProfile`组件，添加上传照片选项，并将用户选择的文件附加到提交给服务器的表单数据中。我们将在以下章节中讨论这一点。
- en: File input with Material-UI
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Material-UI的文件输入
- en: 'We will utilize the HTML5 file input type to let the user select an image from
    their local files. The file input will return the filename in the change event
    when the user selects a file. We will add the file input element to the edit profile
    form as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将利用HTML5文件输入类型让用户从本地文件中选择一个图像。当用户选择一个文件时，文件输入会在改变事件中返回文件名。我们将按照以下方式将文件输入元素添加到编辑个人资料表单中：
- en: '`mern-social/client/user/EditProfile.js`:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/user/EditProfile.js`:'
- en: '[PRE4]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To integrate this file `input` element with Material-UI components, we apply
    `display:none` to hide the `input` element from the view, then add a Material-UI
    button inside the label for this file input. This way, the view displays the Material-UI
    button instead of the HTML5 file input element. The `label` is added as follows:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将此`input`元素与Material-UI组件集成，我们应用`display:none`来隐藏视图中的`input`元素，然后在标签内添加一个Material-UI按钮用于此文件输入。这样，视图显示的是Material-UI按钮而不是HTML5文件输入元素。标签的添加方式如下：
- en: '`mern-social/client/user/EditProfile.js`:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/user/EditProfile.js`:'
- en: '[PRE5]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: When the Button's `component` prop is set to `span`, the `Button` component
    renders as a `span` element inside the `label` element. A click on the `Upload`
    span or label is registered by the file input with the same ID as the label, and
    as a result, the file select dialog is opened. Once the user selects a file, we
    can set it to state in the call to `handleChange(...)` and display the name in
    the view, as shown in the following code.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 当按钮的`component`属性设置为`span`时，`Button`组件在`label`元素内渲染为一个`span`元素。点击`Upload`的`span`或`label`会被具有相同ID的文件输入注册，因此文件选择对话框被打开。一旦用户选择了一个文件，我们就可以在`handleChange(...)`的调用中将它设置为状态，并在视图中显示其名称，如下面的代码所示。
- en: '`mern-social/client/user/EditProfile.js`:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/user/EditProfile.js`:'
- en: '[PRE6]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This way, the user will see the name of the file they are trying to upload as
    the profile photo. With the file selected for uploading, next, we have to attach
    and send this file with the request to the server to update the user information
    in the database.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，用户将看到他们试图上传的文件名作为个人资料照片。在选择上传的文件后，接下来我们必须将此文件附加到请求中并发送到服务器，以更新数据库中的用户信息。
- en: Form submission with the file attached
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附加文件提交的表单
- en: Uploading files to the server with a form requires a multipart form submission.
    This is in contrast to the stringified object we sent in previous implementations
    of fetch. We will modify the `EditProfile` component so that it uses the `FormData`
    API to store the form data in the format needed for encoding in the `multipart/form-data` type.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 使用表单上传文件到服务器需要多部分表单提交。这与我们在之前的fetch实现中发送的字符串化对象形成对比。我们将修改`EditProfile`组件，使其使用`FormData`
    API以`multipart/form-data`类型所需的格式存储表单数据。
- en: You can learn more about the FormData API at [developer.mozilla.org/en-US/docs/Web/API/FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[developer.mozilla.org/en-US/docs/Web/API/FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData)了解更多关于FormData
    API的信息。
- en: First, we will update the input `handleChange` function so that we can store
    input values for both the text fields and the file input, as shown in the following
    code.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将更新输入`handleChange`函数，以便我们可以存储文本字段和文件输入的输入值，如下面的代码所示。
- en: '`mern-social/client/user/EditProfile.js`:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/user/EditProfile.js`:'
- en: '[PRE7]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Then, on form submission, we need to initialize `FormData` and append the values
    from the fields that were updated, as shown here.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在表单提交时，我们需要初始化`FormData`并附加已更新的字段值，如下所示。
- en: '`mern-social/client/user/EditProfile.js`:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/user/EditProfile.js`:'
- en: '[PRE8]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: After appending all the fields and values to it, `userData` is sent with the
    fetch API call to update the user, as shown in the following code.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在将所有字段和值附加到它之后，使用fetch API调用发送`userData`以更新用户，如下面的代码所示。
- en: '`mern-social/client/user/EditProfile.js`:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/user/EditProfile.js`:'
- en: '[PRE9]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Since the content type of the data that's sent to the server is no longer `'application/json'`,
    we also need to modify the `update` fetch method in `api-user.js` to remove `Content-Type`
    from the headers in the `fetch` call, as shown here.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 由于发送到服务器的数据的内容类型不再是`'application/json'`，我们还需要修改`api-user.js`中的`update` fetch方法，以从`fetch`调用中的头中删除`Content-Type`，如下所示。
- en: '`mern-social/client/user/api-user.js`:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/user/api-user.js`:'
- en: '[PRE10]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now, if the user chooses to upload a profile photo when editing the profile,
    the server will receive a request with the file attached, along with the other
    field values. Next, we need to modify the server-side code to be able to process
    this request.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果用户在编辑个人资料时选择上传个人照片，服务器将接收到一个带有附件的请求，其中包含其他字段值。接下来，我们需要修改服务器端代码以能够处理此请求。
- en: Processing a request containing a file upload
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理包含文件上传的请求
- en: 'On the server, to process the request to the update API that may now contain
    a file, we will use the `formidable` Node module. Run the following command from
    the command line to install `formidable`:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务器上，为了处理可能包含文件的更新API请求，我们将使用`formidable` Node模块。从命令行运行以下命令以安装`formidable`：
- en: '[PRE11]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `formidable` will allow the server to read the `multipart` form data and
    give us access to the fields and the file, if there are any. If there is a file,
    `formidable` will store it temporarily in the filesystem. We will read it from
    the filesystem using the `fs` module, which will retrieve the file type and data,
    and store it in the `photo` field in the user model. The `formidable` code will
    go in the `update` controller in `user.controller.js`, as follows.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`formidable`将允许服务器读取`multipart`表单数据，并让我们访问字段和文件（如果有）。如果有文件，`formidable`将暂时将其存储在文件系统中。我们将使用`fs`模块从文件系统读取它，这将检索文件类型和数据，并将其存储在用户模型的`photo`字段中。`formidable`代码将放在`user.controller.js`中的`update`控制器中，如下所示。'
- en: '`mern-social/server/controllers/user.controller.js`:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/server/controllers/user.controller.js`:'
- en: '[PRE12]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This will store the uploaded file as data in the database. Next, we will set
    up file retrieval so that we can access and display the photo that's uploaded
    by the user in the frontend views.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把上传的文件作为数据存储在数据库中。接下来，我们将设置文件检索，以便我们可以在前端视图中访问和显示用户上传的照片。
- en: Retrieving a profile photo
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检索个人照片
- en: The simplest option to retrieve the image stored in the database and then show
    it in a view is to set up a route that will fetch the data and return it as an
    image file to the requesting client. In this section, we will learn how to set
    up this route to expose a photo URL, as well as how to use this URL to display
    the photo in the frontend views.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 要检索数据库中存储的图片并在视图中显示，最简单的方法是设置一个路由，该路由将获取数据并将其作为图像文件返回给请求客户端。在本节中，我们将学习如何设置此路由以公开照片URL，以及如何使用此URL在前端视图中显示照片。
- en: Profile photo URL
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 个人照片URL
- en: We will set up a route to the photo stored in the database for each user, and
    also add another route that will fetch a default photo if the given user did not
    upload a profile photo. These routes will be defined as follows.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为每个用户在数据库中存储的照片设置一个路由，并添加另一个路由，如果指定的用户没有上传个人照片，它将获取默认照片。这些路由将如下定义。
- en: '`mern-social/server/routes/user.routes.js`:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/server/routes/user.routes.js`:'
- en: '[PRE13]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We will look for the photo in the `photo` controller method and, if found, send
    it in the response to the request at the photo route; otherwise, we'll call `next()`
    to return the default photo, as shown in the following code.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在`photo`控制器方法中查找照片，如果找到，将在照片路由的请求响应中发送它；否则，我们将调用`next()`以返回默认照片，如下面的代码所示。
- en: '`mern-social/server/controllers/user.controller.js`:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/server/controllers/user.controller.js`:'
- en: '[PRE14]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The default photo is retrieved and sent from the server's file system, as shown
    here.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 默认照片是从服务器的文件系统中检索并发送的，如下所示。
- en: '`mern-social/server/controllers/user.controller.js`:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/server/controllers/user.controller.js`:'
- en: '[PRE15]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: We can use the route defined here to display the photo in the views, as described
    in the next section.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用这里定义的路由来在视图中显示照片，如下一节所述。
- en: Showing a photo in a view
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在视图中显示照片
- en: With the photo URL routes set up to retrieve the photo, we can simply use these
    in the `img` element's `src` attribute to load the photo in the view. For example,
    in the `Profile` component, we use the user ID from the `values` in the state
    to construct the photo URL, as shown in the following code.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 通过设置用于检索照片的URL路由，我们可以在`img`元素的`src`属性中简单地使用这些路由来加载视图中的照片。例如，在`Profile`组件中，我们使用状态中的`values`中的用户ID来构造照片URL，如下面的代码所示。
- en: '`mern-social/client/user/Profile.js`:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/user/Profile.js`:'
- en: '[PRE16]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: To ensure the `img` element reloads in the `Profile` view after the photo is
    updated, we have to add a time value to the photo URL to bypass the browser's
    default image caching behavior.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保在照片更新后`img`元素在`Profile`视图中重新加载，我们必须向照片URL添加一个时间值以绕过浏览器默认的图像缓存行为。
- en: 'Then, we can set the `photoUrl` to the Material-UI `Avatar` component, which
    renders the linked image in the view:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以将`photoUrl`设置为Material-UI的`Avatar`组件，该组件在视图中渲染链接的图像：
- en: '[PRE17]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The updated user profile in MERN Social can now display a user uploaded profile
    photo and an `about` description, as shown in the following screenshot:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: MERN Social中更新的用户个人资料现在可以显示用户上传的个人照片和`about`描述，如下面的截图所示：
- en: '![](img/e2289c32-d165-4502-9c83-7bdd1c779a2e.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e2289c32-d165-4502-9c83-7bdd1c779a2e.png)'
- en: We have successfully updated the MERN skeleton application code to let users
    upload a profile photo and add a short bio description to their profiles. In the
    next section, we will update this further and implement the social media flavored
    feature that allows users to follow each other.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已成功更新了MERN骨架应用程序代码，允许用户上传个人照片并在他们的个人资料中添加简短的简介。在下一节中，我们将进一步更新并实现允许用户相互关注的社交媒体风格功能。
- en: Following users in MERN Social
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MERN Social中的关注用户
- en: In MERN Social, users will be able to follow each other. Each user will have
    a list of followers and a list of people they follow. Users will also be able
    to see a list of users they can follow; in other words, the users in MERN Social
    they are not already following. In the following sections, we will learn how to
    update the full-stack code to implement these features.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在MERN Social中，用户将能够相互关注。每个用户将有一个关注者列表和一个他们关注的列表。用户还可以查看他们可以关注的用户列表；换句话说，就是他们在MERN
    Social中尚未关注的用户。在以下章节中，我们将学习如何更新全栈代码以实现这些功能。
- en: Following and unfollowing
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关注和取消关注
- en: In order to keep track of which user is following which other users, we will
    have to maintain two lists for each user. When one user follows or unfollows another
    user, we will update one's `following` list and the other's `followers` list.
    First, we will update the backend to store and update these lists, then modify
    the frontend views to allow users to perform follow and unfollow actions.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 为了跟踪哪个用户在关注哪些其他用户，我们将为每个用户维护两个列表。当一个用户关注或取消关注另一个用户时，我们将更新一个用户的`following`列表和另一个用户的`followers`列表。首先，我们将更新后端以存储和更新这些列表，然后修改前端视图以允许用户执行关注和取消关注操作。
- en: Updating the user model
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新用户模型
- en: To store the list of `following` and `followers` in the database, we will need
    to update the user model with two arrays of user references, as shown in the following
    code.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 要在数据库中存储`following`和`followers`的列表，我们需要更新用户模型，添加两个用户引用数组，如下面的代码所示。
- en: '`mern-social/server/models/user.model.js`:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/server/models/user.model.js`:'
- en: '[PRE18]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: These references will point to the users in the collection being followed by
    or following the given user. Next, we will update the user controllers to ensure
    the details of the users that are referenced in these lists are returned in a
    response to client-side requests.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这些引用将指向被给定用户关注或正在关注该用户的集合中的用户。接下来，我们将更新用户控制器以确保在客户端请求的响应中返回这些列表中引用的用户详情。
- en: Updating the userByID controller method
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新`userByID`控制器方法
- en: When a single user is retrieved from the backend, we want the `user` object
    to include the names and IDs of the users referenced in the `following` and `followers`
    arrays. To retrieve these details, we need to update the `userByID` controller
    method so that it populates the returned user object, as shown in the highlighted
    code.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 当从后端检索单个用户时，我们希望`user`对象包括`following`和`followers`数组中引用的用户的名字和ID。为了检索这些详情，我们需要更新`userByID`控制器方法，使其填充返回的用户对象，如下面高亮显示的代码所示。
- en: '`mern-social/server/controllers/user.controller.js`:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/server/controllers/user.controller.js`:'
- en: '[PRE19]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: We use the Mongoose `populate` method to specify that the user object that's
    returned from the query should contain the name and ID of the users referenced
    in the `following` and `followers` lists. This will give us the names and IDs
    of the user references in the `followers` and `following` lists when we fetch
    the user with the read API call.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用Mongoose的`populate`方法来指定从查询返回的用户对象应包含`following`和`followers`列表中引用的用户的名字和ID。这样，当我们通过读取API调用获取用户时，我们将获得`followers`和`following`列表中用户引用的名字和ID。
- en: With the user model updated, we are ready to add API endpoints that will update
    these lists to either add or remove users from the lists, as discussed in the
    next section.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在更新用户模型后，我们准备好添加API端点，以更新这些列表，要么添加要么从列表中删除用户，如下一节所述。
- en: Adding APIs to follow and unfollow
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加关注和取消关注的API
- en: When a user follows or unfollows another user from the view, both users' records
    in the database will be updated in response to the `follow` or `unfollow` requests.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户从视图中关注或取消关注另一个用户时，数据库中这两个用户的记录将根据`follow`或`unfollow`请求进行更新。
- en: Set up `follow` and `unfollow` routes in `user.routes.js` as follows.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在`user.routes.js`中设置`follow`和`unfollow`路由如下。
- en: '`mern-social/server/routes/user.routes.js`:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/server/routes/user.routes.js`:'
- en: '[PRE20]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The `addFollowing` controller method in the user controller will update the
    `following` array for the current user by pushing the followed user's reference
    into the array, as shown in the following code.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 用户控制器中的`addFollowing`控制器方法将通过将关注用户的引用推入数组来更新当前用户的`following`数组，如下面的代码所示。
- en: '`mern-social/server/controllers/user.controller.js`:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/server/controllers/user.controller.js`:'
- en: '[PRE21]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: On successful update of the `following` array, `next()` is invoked, and as a
    result, the `addFollower` method is executed to add the current user's reference
    to the followed user's `followers` array. The `addFollower` method is defined
    as follows.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功更新`following`数组后，调用`next()`，随后执行`addFollower`方法，将当前用户的引用添加到被关注用户的`followers`数组中。`addFollower`方法定义如下。
- en: '`mern-social/server/controllers/user.controller.js`:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/server/controllers/user.controller.js`:'
- en: '[PRE22]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: For unfollowing, the implementation is similar. The `removeFollowing` and `removeFollower`
    controller methods update the respective `'following'` and `'followers'` arrays
    by removing the user references with `$pull` instead of `$push`. `removeFollowing` and `removeFollower` will
    look as follows.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 对于取消关注，实现方式类似。`removeFollowing`和`removeFollower`控制器方法通过使用`$pull`而不是`$push`来移除用户引用来更新相应的`'following'`和`'followers'`数组。`removeFollowing`和`removeFollower`将如下所示。
- en: '`mern-social/server/controllers/user.controller.js`:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/server/controllers/user.controller.js`:'
- en: '[PRE23]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The user backend on the server-side is ready for the follow and unfollow features.
    Next, we will update the frontend to utilize these new backend APIs and complete
    this feature.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器端的用户后端已准备好关注和取消关注功能。接下来，我们将更新前端以利用这些新的后端API并完成此功能。
- en: Accessing the follow and unfollow APIs in views
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在视图中访问关注和取消关注的API
- en: In order to access these API calls in the views, we will update `api-user.js`
    with the `follow` and `unfollow` fetch methods. The `follow` and `unfollow` methods
    will be similar, making calls to the respective routes with the current user's
    ID and credentials, and the followed or unfollowed user's ID. The `follow` method
    will be as follows.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在视图中访问这些API调用，我们将更新`api-user.js`以包含`follow`和`unfollow`获取方法。`follow`和`unfollow`方法将类似，调用相应的路由，使用当前用户的ID和凭据，以及被关注或取消关注的用户的ID。`follow`方法如下。
- en: '`mern-social/client/user/api-user.js`:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/user/api-user.js`:'
- en: '[PRE24]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The `unfollow` fetch method is similar; it takes the unfollowed user's ID and
    calls the `unfollow` API, as shown in the following code.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '`unfollow`获取方法类似；它接受取消关注的用户ID并调用`unfollow` API，如下面的代码所示。'
- en: '`mern-social/client/user/api-user.js`:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/user/api-user.js`:'
- en: '[PRE25]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: With the API fetch code implemented, we can use these two methods to integrate
    the backend updates in the views, as discussed in the next section, which will
    allow users to follow or unfollow another user in the application.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 实现了API获取代码后，我们可以使用这两种方法在视图中集成后端更新，如下一节所述，这将允许用户在应用程序中关注或取消关注另一个用户。
- en: Follow and unfollow buttons
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关注和取消关注按钮
- en: 'The button that will allow a user to follow or unfollow another user will appear
    conditionally, depending on whether the user is already followed or not by the
    current user, as shown in the following screenshot:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 允许用户关注或取消关注另一个用户的按钮将根据当前用户是否已经关注了该用户而条件性地显示，如下面的截图所示：
- en: '![](img/dbd4cd37-3142-46e9-bcd3-3c129241d59f.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dbd4cd37-3142-46e9-bcd3-3c129241d59f.png)'
- en: In the following sections, we will add this button in a separate React component,
    integrate it with the existing user profile view, and connect it to the follow
    and unfollow fetch methods.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下章节中，我们将把这个按钮添加到一个独立的React组件中，将其与现有的用户资料视图集成，并连接到关注和取消关注的获取方法。
- en: The FollowProfileButton component
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: FollowProfileButton组件
- en: We will create a separate component for the follow button called `FollowProfileButton`,
    which will be added to the `Profile` component. This component will show the `Follow`
    or `Unfollow` button, depending on whether the current user is already a follower
    of the user in the profile. The `FollowProfileButton` component will look as follows.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个名为`FollowProfileButton`的单独组件，该组件将被添加到`Profile`组件中。这个组件将根据当前用户是否已经是资料中用户的关注者来显示`Follow`或`Unfollow`按钮。`FollowProfileButton`组件如下所示。
- en: '`mern-social/client/user/FollowProfileButton.js`:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/user/FollowProfileButton.js`:'
- en: '[PRE26]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'When `FollowProfileButton` is added to the profile, the `following` value will
    be determined and sent from the `Profile` component as a prop to `FollowProfileButton`,
    along with the click handler that takes the specific `follow` or `unfollow` fetch
    API to be called as a parameter. The resulting profile views will look as follows:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 当`FollowProfileButton`添加到资料中时，`following`值将由`Profile`组件确定并发送，作为属性传递给`FollowProfileButton`，同时传递一个点击处理函数，该函数作为参数调用特定的`follow`或`unfollow`获取API。生成的资料视图将如下所示：
- en: '![](img/ccda800f-39dd-4ff2-97e6-457375a33cbb.png)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ccda800f-39dd-4ff2-97e6-457375a33cbb.png)'
- en: In order to integrate this `FollowProfileButton` component with the profile
    view, we need to update the existing `Profile` component, as discussed next.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将这个`FollowProfileButton`组件与资料视图集成，我们需要更新现有的`Profile`组件，如以下所述。
- en: Updating the Profile component
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新资料组件
- en: 'In the `Profile` view, `FollowProfileButton` should only be shown when the
    user views the profile of other users, so we need to modify the condition for
    showing the `Edit` and `Delete` buttons when viewing a profile, as follows:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Profile`视图中，`FollowProfileButton`应该只在用户查看其他用户的资料时显示，因此我们需要修改查看资料时显示`Edit`和`Delete`按钮的条件，如下所示：
- en: '[PRE27]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: In the `Profile` component, after the user data is successfully fetched in `useEffect`,
    we will check whether the signed-in user is already following the user in the
    profile or not and set the `following` value to the respective state, as shown
    in the following code.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Profile`组件中，在`useEffect`中成功获取用户数据后，我们将检查已登录用户是否已经在关注资料中的用户，并将`following`值设置为相应的状态，如下面的代码所示。
- en: '`mern-social/client/user/Profile.js`:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/user/Profile.js`:'
- en: '[PRE28]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: To determine the value to set in `following`, the `checkFollow` method will
    check if the signed-in user exists in the fetched user's `followers` list, then
    return `match` if found; otherwise, it will return `undefined` if a match is not
    found. The `checkFollow` method is defined as follows.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确定在 `following` 中设置的值，`checkFollow` 方法将检查已登录用户是否存在于获取的用户 `followers` 列表中，如果找到则返回
    `match`；如果没有找到匹配项，则返回 `undefined`。`checkFollow` 方法定义如下。
- en: '`mern-social/client/user/Profile.js`:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/user/Profile.js`:'
- en: '[PRE29]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The `Profile` component will also define the click handler for `FollowProfileButton` so
    that the state of the `Profile` can be updated when the follow or unfollow action
    completes, as shown in the following code.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '`Profile` 组件还将定义 `FollowProfileButton` 的点击处理程序，以便在关注或取消关注操作完成后更新 `Profile`
    的状态，如下面的代码所示。'
- en: '`mern-social/client/user/Profile.js`:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/user/Profile.js`:'
- en: '[PRE30]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The click handler definition takes the fetch API call as a parameter and is
    passed as a prop to `FollowProfileButton`, along with the `following` value when
    it is added to the `Profile` view, as follows.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 点击处理程序定义接受获取 API 调用作为参数，并将其作为属性传递给 `FollowProfileButton`，当它添加到 `Profile` 视图中时，还传递
    `following` 值，如下所示。
- en: '`mern-social/client/user/Profile.js`:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/user/Profile.js`:'
- en: '[PRE31]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: This will load `FollowProfileButton` into the profile view, with all the necessary
    conditions accounted for, and provide the current user the option to follow or
    unfollow other users in the MERN Social application. Next, we will extend this
    feature to allow users to view the list of followings or followers in the user
    profile view.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 这将加载 `FollowProfileButton` 到个人资料视图中，考虑到所有必要的条件，并为当前用户提供在 MERN 社交应用程序中关注或取消关注其他用户的选项。接下来，我们将扩展此功能，允许用户在用户个人资料视图中查看关注者或粉丝列表。
- en: Listing followings and followers
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列出关注者和粉丝
- en: 'In order to give users easy access to the users they are following and the
    users who are following them on MERN Social, we will add these lists to their
    profile views. In each user''s profile, we will add a list of their followers
    and the people they are following, as shown in the following screenshot:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让用户在 MERN 社交平台上轻松访问他们关注的用户和他们被关注的用户，我们将将这些列表添加到他们的个人资料视图中。在每个用户的个人资料中，我们将添加一个包含他们的粉丝和关注者的列表，如下面的截图所示：
- en: '![](img/699fc1d1-f5f6-4a94-bca8-e97269344764.png)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/699fc1d1-f5f6-4a94-bca8-e97269344764.png)'
- en: The details of the users referenced in the `following` and `followers` lists
    are already in the user object that is fetched using the `read` API when the profile
    is loaded. In order to render these separate lists of followers and followings,
    we will create a new component called `FollowGrid`.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `following` 和 `followers` 列表中引用的用户详细信息已经在加载个人资料时使用 `read` API 获取的用户对象中。为了渲染这些独立的粉丝和关注者列表，我们将创建一个新的组件，称为
    `FollowGrid`。
- en: Making a FollowGrid component
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 FollowGrid 组件
- en: The `FollowGrid` component will take a list of users as props, display the avatars
    of the users with their names, and link them to each user's own profile. We can
    add this component to the `Profile` view to display `followings` or `followers`.
    The `FollowGrid` component is defined as follows.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '`FollowGrid` 组件将接受一个用户列表作为属性，显示用户的头像和名字，并将它们链接到每个用户的个人资料。我们可以将此组件添加到 `Profile`
    视图中以显示 `关注者` 或 `粉丝`。`FollowGrid` 组件的定义如下。'
- en: '`mern-social/client/user/FollowGrid.js`:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/user/FollowGrid.js`:'
- en: '[PRE32]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'To add the `FollowGrid` component to the `Profile` view, we can place it as
    desired in the view and pass the list of `followers` or `followings` as the `people`
    prop:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 要将 `FollowGrid` 组件添加到 `Profile` 视图中，我们可以将其放置在视图中所需的位置，并将 `followers` 或 `followings`
    列表作为 `people` 属性传递：
- en: '[PRE33]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: As shown previously, in MERN Social, we chose to display the `FollowGrid` components
    in tabs within the `Profile` component. We created a separate `ProfileTabs` component
    using Material-UI tab components and added that to the `Profile` component. This
    `ProfileTabs` component contains the two `FollowGrid` components with following
    and followers lists, along with a `PostList` component that shows the posts by
    the user.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，在 MERN 社交平台中，我们选择在“个人资料”组件的标签页中显示 `FollowGrid` 组件。我们使用 Material-UI 标签组件创建了一个单独的
    `ProfileTabs` 组件，并将其添加到 `Profile` 组件中。这个 `ProfileTabs` 组件包含两个 `FollowGrid` 组件，其中包含关注者和粉丝列表，以及一个显示用户发布的帖子的
    `PostList` 组件。
- en: This `PostList` component will be discussed later in this chapter. In the next
    section, we will add a feature that will allow a user to discover other users
    on the platform who they are not following yet.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章后面将讨论 `PostList` 组件。在下一节中，我们将添加一个功能，允许用户发现平台上他们尚未关注的其他用户。
- en: Finding people to follow
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 寻找关注的人
- en: 'The Who to follow feature will show the signed-in user a list of people in
    MERN Social that they are not currently following, thus giving them the option
    to follow them or view their profiles, as shown in the following screenshot:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: “谁值得关注”功能将向登录用户显示 MERN Social 中他们尚未关注的用户列表，从而给他们提供关注他们或查看他们个人资料的选择，如下截图所示：
- en: '![](img/382878d9-dbbd-4454-a09f-5d446469e7b4.png)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/382878d9-dbbd-4454-a09f-5d446469e7b4.png)'
- en: To implement this feature, we need to add a backend API that returns the list
    of users not followed by the currently signed-in user, and then update the frontend
    by adding a component that loads and displays this list of users.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这个功能，我们需要添加一个后端 API，该 API 返回当前登录用户未关注的用户列表，然后通过添加一个加载并显示此用户列表的组件来更新前端。
- en: Fetching users not followed
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取未关注用户
- en: We will implement a new API on the server to query the database and fetch the
    list of users the current user is not following. This route will be defined as
    follows.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在服务器上实现一个新的 API 来查询数据库并获取当前用户未关注的用户列表。此路由将按如下定义。
- en: '`mern-social/server/routes/user.routes.js`:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/server/routes/user.routes.js`:'
- en: '[PRE34]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: In the `findPeople` controller method, we will query the User collection in
    the database to find the users that are not in the current user's `following`
    list.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `findPeople` 控制器方法中，我们将查询数据库中的 User 集合以找到不在当前用户 `following` 列表中的用户。
- en: '`mern-social/server/controllers/user.controller.js`:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/server/controllers/user.controller.js`:'
- en: '[PRE35]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: This query will return an array of users that are not followed by the current
    user. To use this list of users in the frontend, we will update the `api-user.js` file
    and add a fetch for this API. The `findPeople` fetch method is defined as follows.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 此查询将返回一个数组，包含当前用户未关注的用户。为了在前端使用此用户列表，我们将更新 `api-user.js` 文件并添加对该 API 的获取。`findPeople`
    获取方法定义如下。
- en: '`mern-social/client/user/api-user.js`:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/user/api-user.js`:'
- en: '[PRE36]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: We can use this `findPeople` fetch method in the component that will display
    this list of users. In the next section, we will create the FindPeople component
    for this purpose.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在组件中使用这个 `findPeople` 获取方法来显示用户列表。在下一节中，我们将创建 FindPeople 组件来完成这个目的。
- en: The FindPeople component
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: FindPeople 组件
- en: To display the *who to follow* feature, we will create a component called `FindPeople`,
    which can be added to any of the views or rendered on its own. In this component,
    we will fetch the users not being followed by calling the `findPeople` method
    in `useEffect`, as shown in the following code.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 为了显示“谁值得关注”功能，我们将创建一个名为 `FindPeople` 的组件，该组件可以被添加到任何视图或独立渲染。在这个组件中，我们将通过在 `useEffect`
    中调用 `findPeople` 方法来获取未关注的用户。如下代码所示。
- en: '`mern-social/client/user/FindPeople.js`:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/user/FindPeople.js`:'
- en: '[PRE37]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The fetched list of users will be iterated over and rendered in a Material-UI `List`
    component, with each list item containing the user's avatar, name, a link to the
    profile page, and a `Follow` button, as shown in the following code.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 获取的用户列表将被迭代并在 Material-UI `List` 组件中渲染，每个列表项包含用户的头像、姓名、到个人主页的链接以及一个 `Follow`
    按钮，如下代码所示。
- en: '`mern-social/client/user/FindPeople.js`:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/user/FindPeople.js`:'
- en: '[PRE38]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Clicking the `Follow` button will make a call to the follow API and update the
    list of users to follow by splicing out the newly followed user. The `clickFollow`
    method implements this behavior as follows.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 `Follow` 按钮将调用关注 API 并通过剪切掉新关注的用户来更新要关注的用户列表。`clickFollow` 方法如下实现此行为。
- en: '`mern-social/client/user/FindPeople.js`:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/user/FindPeople.js`:'
- en: '[PRE39]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: We will also add a Material-UI `Snackbar` component that will open temporarily
    when the user is successfully followed in order to tell the user that they started
    following this new user. `Snackbar` will be added to the view code as follows.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将添加一个 Material-UI `Snackbar` 组件，当用户成功关注新用户时，它会临时打开以告知用户他们开始关注这位新用户。`Snackbar`
    将按如下方式添加到视图代码中。
- en: '`mern-social/client/user/FindPeople.js`:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/user/FindPeople.js`:'
- en: '[PRE40]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'As shown in the following screenshot, `Snackbar` will display the `message` containing
    the followed user''s name at the bottom-right corner of the page, and then auto-hide
    it after the set duration:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 如下截图所示，`Snackbar` 将在页面右下角显示包含被关注用户名的 `message`，并在设置的时间后自动隐藏：
- en: '![](img/75e760a8-de50-4ea1-a1ee-de7baab28315.png)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/75e760a8-de50-4ea1-a1ee-de7baab28315.png)'
- en: MERN Social users can now follow each other, view lists of followings and followers
    for each user, and also see a list of people they can follow. The main purpose
    of following another user in MERN Social is to see and interact with their shared
    posts. In the next section, we will look at the implementation of the post feature.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: MERN Social 用户现在可以相互关注，查看每个用户的关注者和被关注者列表，还可以看到他们可以关注的人的列表。在 MERN Social 中关注另一个用户的主要目的是查看和互动他们的共享帖子。在下一节中，我们将查看帖子功能的实现。
- en: Posting on MERN Social
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 MERN Social 上发布
- en: 'The post feature in MERN Social will allow users to share content on the MERN
    Social application platform and also interact with each other over the content
    by commenting on or liking a post, as shown in the following screenshot:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: MERN Social 中的帖子功能将允许用户在 MERN Social 应用程序平台上分享内容，并通过评论或点赞帖子与他人互动，如下面的截图所示：
- en: '![](img/e22285cb-cb09-4f0a-8a38-d1d5317d52fa.png)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e22285cb-cb09-4f0a-8a38-d1d5317d52fa.png)'
- en: For this feature, we will implement a complete full-stack slice containing the
    post backend and frontend. The post backend will be comprised of a new Mongoose
    model for structuring the post data to be stored in the database, while the post
    CRUD API endpoints will allow the frontend to interact with the Post collection
    in the database. The post frontend will consist of post-related React components
    that will allow users to view posts, add new posts, interact with posts, and delete
    their own posts. In the following sections, we will define the data structure
    for posts in the Post schema, and then learn how to incrementally add the post
    backend APIs and frontend components according to the specific post-related feature
    we are implementing.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个功能，我们将实现一个包含帖子后端和前端的完整全栈切片。帖子后端将包括一个新的 Mongoose 模型，用于结构化要存储在数据库中的帖子数据，而帖子
    CRUD API 端点将允许前端与数据库中的帖子集合进行交互。帖子前端将包括与帖子相关的 React 组件，允许用户查看帖子、添加新帖子、与帖子互动以及删除自己的帖子。在接下来的章节中，我们将定义帖子模式中帖子数据的结构，然后根据我们正在实现的特定帖子相关功能，逐步添加帖子后端
    API 和前端组件。
- en: Mongoose schema model for Post
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Mongoose 的帖子模式模型
- en: To define the structure for storing details about each post and to store each
    post as a document in a collection in MongoDB, we will define the Mongoose schema
    for a post in `server/models/post.model.js`. The Post schema will store a post's
    text content, a photo, a reference to the user who posted, time of creation, likes
    on the post from users, and comments on the post by users. The schema will store
    these details in the following fields, each defined as shown with the corresponding
    code.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 为了定义存储每个帖子详细信息的结构，并将每个帖子作为文档存储在 MongoDB 的集合中，我们将在 `server/models/post.model.js`
    中定义帖子模式的 Mongoose 模型。帖子模式将存储帖子的文本内容、照片、发布帖子的用户引用、创建时间、用户对帖子的点赞以及用户对帖子的评论。该模式将按照以下字段存储这些详细信息，每个字段都按照相应的代码定义。
- en: '**Post text**: `text` will be a required field that needs to be provided by
    the user on new post creation from the view:'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**帖子文本**：`text` 将是一个必填字段，需要在创建新帖子时从视图中提供：'
- en: '[PRE41]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '**Post photo**: `photo` will be uploaded from the user''s local files during
    post creation and stored in MongoDB, similar to the user profile photo upload
    feature. The photo will be optional for each post:'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**帖子照片**：`photo` 将在帖子创建时从用户的本地文件上传并存储在 MongoDB 中，类似于用户个人资料照片上传功能。每个帖子中的照片是可选的：'
- en: '[PRE42]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '**Post by**: Creating a post will require a user to be signed-in first so that
    we can store a reference to the user who is posting in the `postedBy` field:'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**帖子作者**：创建帖子需要用户先登录，这样我们就可以在 `postedBy` 字段中存储发布帖子的用户引用：'
- en: '[PRE43]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '**Created time**: The `created` time will be generated automatically at the
    time of post creation in the database:'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建时间**：`created` 时间将在数据库中创建帖子时自动生成：'
- en: '[PRE44]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '**Likes**: References to the users who liked a specific post will be stored
    in a `likes` array:'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**点赞**：对特定帖子点赞的用户引用将存储在 `likes` 数组中：'
- en: '[PRE45]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '**Comments**: Each comment on a post will contain text content, the time of
    creation, and a reference to the user who posted the comment. Each post will have
    an array of `comments`:'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**评论**：每个帖子的评论将包含文本内容、创建时间以及评论用户的引用。每个帖子将有一个包含 `comments` 的数组：'
- en: '[PRE46]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: This schema definition will enable us to implement all the post-related features
    in MERN Social. Next, we will start with a discussion of the Newsfeed feature
    to learn how to compose frontend React components.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 这个模式定义将使我们能够在 MERN Social 中实现所有与帖子相关的功能。接下来，我们将从新闻源功能开始讨论，了解如何编写前端 React 组件。
- en: The Newsfeed component
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 新闻源组件
- en: 'On MERN Social, each user will see posts that have been shared by people they
    follow, along with posts that they themselves share, all aggregated in a Newsfeed
    view. Before delving further into the implementations of the post-related features
    in MERN Social, we will look at the composition of this Newsfeed view to showcase
    a basic example of how to design nested UI components that share state. The `Newsfeed`
    component will contain two main child components – a new post form and a list
    of posts from followed users, as shown in the following screenshot:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 在 MERN Social 上，每个用户将看到他们关注的用户分享的帖子，以及他们自己分享的帖子，所有这些帖子都汇总在新闻源视图中。在进一步探讨 MERN
    Social 中帖子相关功能的实现之前，我们将查看这个新闻源视图的组成，以展示如何设计嵌套 UI 组件并共享状态的基本示例。`Newsfeed` 组件将包含两个主要的子组件——一个新帖子表单和来自关注用户的帖子列表，如下面的截图所示：
- en: '![](img/6f274663-1fc2-41fe-bfaa-ea5fdd7dbe1a.png)'
  id: totrans-242
  prefs: []
  type: TYPE_IMG
  zh: '![新闻源组件](img/6f274663-1fc2-41fe-bfaa-ea5fdd7dbe1a.png)'
- en: The basic structure of the `Newsfeed` component will be as follows, with the
    `NewPost` component and the `PostList` component inside it.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '`Newsfeed` 组件的基本结构如下，其中包含 `NewPost` 组件和 `PostList` 组件。'
- en: '`mern-social/client/post/Newsfeed.js`:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/post/Newsfeed.js`:'
- en: '[PRE47]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: As the parent component, `Newsfeed` will control the state of the posts' data
    that's rendered in the child components. It will provide a way to update the state
    of posts across the components when the post data is modified within the child
    components, such as the addition of a new post in the `NewPost` component or the
    removal of a post from the `PostList` component.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 作为父组件，`Newsfeed` 将控制在子组件中渲染的帖子数据的状态。当在子组件中修改帖子数据时，例如在 `NewPost` 组件中添加新帖子或在 `PostList`
    组件中删除帖子，它将提供一种方法来更新组件间的帖子状态。
- en: Here specifically, in the `Newsfeed` component we initially make a call to the
    server to fetch a list of posts from people that the currently signed-in user
    follows. Then we set this list of posts to the state to be rendered in the `PostList` component..
    The `Newsfeed` component provides the `addPost` and `removePost` functions to
    `NewPost` and `PostList`, which will be used when a new post is created or an
    existing post is deleted to update the list of posts in the Newsfeed's state and
    ultimately reflect it in the `PostList`.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里具体来说，在 `Newsfeed` 组件中，我们最初调用服务器以获取当前登录用户关注的用户的帖子列表。然后我们将这个帖子列表设置到状态中，以便在
    `PostList` 组件中渲染。`Newsfeed` 组件为 `NewPost` 和 `PostList` 提供了 `addPost` 和 `removePost`
    函数，这些函数将在创建新帖子或删除现有帖子时使用，以更新 `Newsfeed` 状态中的帖子列表，并最终在 `PostList` 中反映出来。
- en: The `addPost` function defined in the `Newsfeed` component will take the new
    post that was created in the `NewPost` component and add it to the posts in the
    state. The `addPost` function will look as follows.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Newsfeed` 组件中定义的 `addPost` 函数将获取在 `NewPost` 组件中创建的新帖子，并将其添加到状态中的帖子中。`addPost`
    函数将如下所示。
- en: '`mern-social/client/post/Newsfeed.js`:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/post/Newsfeed.js`:'
- en: '[PRE48]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: The `removePost` function defined in the `Newsfeed` component will take the
    deleted post from the `Post` component in `PostList` and remove it from the posts
    in the state. The `removePost` function will look as follows.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Newsfeed` 组件中定义的 `removePost` 函数将从 `PostList` 中的 `Post` 组件中获取已删除的帖子，并将其从状态中的帖子中删除。`removePost`
    函数将如下所示。
- en: '`mern-social/client/post/Newsfeed.js`:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/post/Newsfeed.js`:'
- en: '[PRE49]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: As the posts are updated in the Newsfeed's state this way, the `PostList` will
    render the changed list of posts to the viewer. This mechanism of relaying state
    updates from parent to child components and back will be applied across other
    features, such as comment updates in a post and when a `PostList` is rendered
    for an individual user in the `Profile` component.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式在 `Newsfeed` 的状态中更新帖子，`PostList` 将将更改后的帖子列表渲染给观众。这种从父组件到子组件以及返回的状态更新机制将应用于其他功能，例如帖子中的评论更新以及当在
    `Profile` 组件中为单个用户渲染 `PostList` 时。
- en: To begin the complete implementation of the `Newsfeed`, we need to be able to
    fetch a list of posts from the server and display it in the `PostList`. In the
    next section, we will make this `PostList` component for the frontend and add
    PostList API endpoints to the backend.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始完整实现 `Newsfeed`，我们需要能够从服务器获取帖子列表并在 `PostList` 中显示它。在下一节中，我们将为前端创建这个 `PostList`
    组件，并将 PostList API 端点添加到后端。
- en: Listing posts
  id: totrans-256
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列出帖子
- en: In MERN Social, we list posts in the `Newsfeed` and in the profile of each user.
    We will create a generic `PostList` component that will render any list of posts
    provided to it, which we can use in both the `Newsfeed` and the `Profile` components.
    The `PostList` component is defined as follows.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 在 MERN 社交中，我们在 `Newsfeed` 和每个用户的个人资料中列出帖子。我们将创建一个通用的 `PostList` 组件，该组件可以渲染提供的任何帖子列表，我们可以在
    `Newsfeed` 和 `Profile` 组件中使用它。`PostList` 组件定义如下。
- en: '`mern-social/client/post/PostList.js`:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/post/PostList.js`:'
- en: '[PRE50]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: The `PostList` component will iterate through the list of posts passed to it
    as props from the `Newsfeed` or the `Profile`, and pass the data of each post
    to a `Post` component that will render details of the post. `PostList` will also
    pass the `removeUpdate` function that was sent as a prop from the parent component
    to the `Post` component so that the state can be updated when a single post is
    deleted. Next, we will complete the post lists in the Newsfeed view after fetching
    the relevant posts from the backend.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '`PostList` 组件将遍历从 `Newsfeed` 或 `Profile` 传递给它的作为 props 的帖子列表，并将每个帖子的数据传递给一个将渲染帖子详细信息的
    `Post` 组件。`PostList` 还会将从父组件发送的 `removeUpdate` 函数传递给 `Post` 组件，以便在删除单个帖子时更新状态。接下来，我们将在从后端获取相关帖子后完成新闻源视图中的帖子列表。'
- en: Listing posts in Newsfeed
  id: totrans-261
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在新闻源中列出帖子
- en: We will set up an API on the server that queries the Post collection and returns
    a list of posts from the people a specified user is following. Then, to populate
    the Newsfeed view, these posts will be retrieved in the frontend by calling this
    API and they will be displayed in the `PostList` in `Newsfeed`.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在服务器上设置一个 API，该 API 查询 Post 集合并返回一个列表，其中包含指定用户关注的用户的帖子。然后，为了填充新闻源视图，这些帖子将通过调用此
    API 在前端检索，并在 `Newsfeed` 中的 `PostList` 中显示。
- en: Newsfeed API for posts
  id: totrans-263
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 帖子新闻源 API
- en: To implement the Newsfeed-specific API, we need to add the route endpoint that
    will receive the request for Newsfeed posts and respond accordingly to the requesting
    client-  side.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现针对新闻源的特定 API，我们需要添加一个路由端点，该端点将接收新闻源帖子请求并相应地响应用户端请求。
- en: On the backend, we need to define the route path that will receive the request
    for retrieving Newsfeed posts for a specific user, as shown in the following code.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 在后端，我们需要定义一个路由路径，该路径将接收检索特定用户新闻源帖子的请求，如下所示。
- en: '`server/routes/post.routes.js`'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '`server/routes/post.routes.js`'
- en: '[PRE51]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'We are using the `:userID` parameter in this route to specify the currently
    signed-in user. We will utilize the `userByID` controller method in `user.controller`
    to fetch the user details, as we did previously, and append these to the request
    object that is accessed in the `listNewsFeed` post controller method. Add the
    following to `mern-social/server/routes/post.routes.js`:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '我们在这个路由中使用 `:userID` 参数来指定当前登录的用户。我们将利用 `userByID` 控制器方法在 `user.controller`
    中获取用户详细信息，就像我们之前所做的那样，并将这些信息附加到在 `listNewsFeed` 帖子控制器方法中访问的请求对象中。将以下内容添加到 `mern-social/server/routes/post.routes.js`:'
- en: '[PRE52]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: The `post.routes.js` file will be very similar to the `user.routes.js` file.
    To load these new routes in the Express app, we need to mount the post routes
    in `express.js`, just like we did for the auth and user routes. The post-related
    routes are mounted as follows.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '`post.routes.js` 文件将与 `user.routes.js` 文件非常相似。为了在 Express 应用程序中加载这些新路由，我们需要在
    `express.js` 中挂载帖子路由，就像我们为 auth 和用户路由所做的那样。帖子相关路由的挂载方式如下。'
- en: '`mern-social/server/express.js`:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/server/express.js`:'
- en: '[PRE53]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: The `listNewsFeed` controller method in `post.controller.js` will query the
    Post collection in the database to get the matching posts. The `listNewsFeed` controller
    method is defined as follows.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '`post.controller.js` 中的 `listNewsFeed` 控制器方法将查询数据库中的 Post 集合以获取匹配的帖子。`listNewsFeed`
    控制器方法定义如下。'
- en: '`mern-social/server/controllers/post.controller.js`:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/server/controllers/post.controller.js`:'
- en: '[PRE54]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: In the query to the Post collection, we find all the posts that have `postedBy`
    user references that match the current user's followings and the current user.
    The posts that are returned will be sorted by the `created` timestamp, with the
    most recent post listed first. Each post will also contain the `id` and `name`
    of the user who created the post and of the users who left comments on the post.
    Next, we will fetch this API in the frontend `Newsfeed` component and render the
    list details.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 在对 Post 集合的查询中，我们找到所有具有 `postedBy` 用户引用与当前用户的关注者和当前用户匹配的帖子。返回的帖子将按 `created`
    时间戳排序，最新的帖子排在第一位。每个帖子还将包含创建帖子的用户和评论帖子的用户的 `id` 和 `name`。接下来，我们将在前端 `Newsfeed`
    组件中获取此 API 并渲染列表详情。
- en: Fetching Newsfeed posts in the view
  id: totrans-277
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在视图中获取新闻源帖子
- en: We will use the Newsfeed API in the frontend to fetch the related posts and
    display these posts in the Newsfeed view. First, we will add a fetch method to
    make a request to the API, as shown in the following code.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在前端使用新闻源 API 来获取相关帖子并在新闻源视图中显示这些帖子。首先，我们将添加一个获取方法来向 API 发送请求，如下面的代码所示。
- en: '`client/post/api-post.js`:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '`client/post/api-post.js`:'
- en: '[PRE55]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: This is the fetch method that will load the posts that are rendered in `PostList`,
    which is added as a child component to the `Newsfeed` component. So, this fetch
    needs to be called in the `useEffect` hook in the `Newsfeed` component, as shown
    in the following code.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 这是将加载在 `PostList` 中渲染的帖子的一种获取方法，`PostList` 被添加为 `Newsfeed` 组件的子组件。因此，这个获取操作需要在
    `Newsfeed` 组件的 `useEffect` 钩子中调用，如下面的代码所示。
- en: '`mern-social/client/post/Newsfeed.js`:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/post/Newsfeed.js`:'
- en: '[PRE56]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'This will retrieve the list of posts from the backend and set it to the state
    of the `Newsfeed` component to initially load the posts that are rendered in the
    `PostList` component, as shown in the following screenshot:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 这将从后端检索帖子列表并将其设置到 `Newsfeed` 组件的状态中，以最初加载在 `PostList` 组件中渲染的帖子，如下面的截图所示：
- en: '![](img/644c9140-8d5b-497a-b6f5-bb399df82d20.png)'
  id: totrans-285
  prefs: []
  type: TYPE_IMG
  zh: '![](img/644c9140-8d5b-497a-b6f5-bb399df82d20.png)'
- en: The implementation of how the individual post details are rendered in this list
    will be discussed later in this chapter. In the next section, we will render this
    same `PostList` for the `Profile` component and render the posts that are shared
    by a specific user.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章后面将讨论如何渲染列表中的单个帖子细节。在下一节中，我们将为 `Profile` 组件渲染相同的 `PostList` 并显示特定用户分享的帖子。
- en: Listing posts by user in Profile
  id: totrans-287
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在个人资料中列出用户帖子
- en: The implementation of getting a list of posts created by a specific user and
    showing it in `Profile` will be similar to what we discussed in the previous section regarding
    listing posts in the Newsfeed. First, we will set up an API on the server that
    queries the Post collection and returns posts from a specific user to the `Profile`
    view.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 获取特定用户创建的帖子列表并在 `Profile` 中显示的实现将与我们在上一节中讨论的关于在新闻源中列出帖子的实现类似。首先，我们将在服务器上设置一个
    API，该 API 查询帖子集合并返回特定用户的帖子到 `Profile` 视图。
- en: API for posts by a user
  id: totrans-289
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户帖子 API
- en: To retrieve posts that have been shared by a specific user, we need to add a
    route endpoint that will receive the request for these posts and respond accordingly
    to the requesting client- side.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 为了检索特定用户分享的帖子，我们需要添加一个路由端点来接收对这些帖子的请求并相应地响应请求客户端。
- en: On the backend, we will define another post-related route that will receive
    a query to return posts by a specific user, as follows.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 在后端，我们将定义另一个与帖子相关的路由，该路由将接收查询以返回特定用户的帖子，如下所示。
- en: '`mern-social/server/routes/post.routes.js`:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/server/routes/post.routes.js`:'
- en: '[PRE57]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: The `listByUser` controller method in `post.controller.js` will query the Post
    collection to find posts that have a matching reference in the `postedBy` field
    to the user specified in the `userId` param in the route. The `listByUser` controller
    method will look as follows.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '`post.controller.js` 中的 `listByUser` 控制器方法将查询帖子集合以找到在 `postedBy` 字段中与路由中指定的
    `userId` 参数匹配的引用。`listByUser` 控制器方法将如下所示。'
- en: '`mern-social/server/controllers/post.controller.js`:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/server/controllers/post.controller.js`:'
- en: '[PRE58]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: This query will return the list of posts that were created by a specific user.
    We need to call this API from the frontend, which we will do in the next section.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 这个查询将返回由特定用户创建的帖子列表。我们需要从前端调用这个 API，我们将在下一节中这样做。
- en: Fetching user posts in the view
  id: totrans-298
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在视图中获取用户帖子
- en: We will use the list-posts-by-user API in the frontend to fetch the related
    posts and display these posts in the profile view. To use this API, we will add
    a fetch method to the frontend, as follows.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在前端使用 `list-posts-by-user` API 来获取相关帖子并在个人资料视图中显示这些帖子。为了使用此 API，我们将在前端添加一个获取方法，如下所示。
- en: '`mern-social/client/post/api-post.js`:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/post/api-post.js`:'
- en: '[PRE59]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: This `fetch` method will load the required posts for `PostList`, which is added
    to the `Profile` view. We will update the `Profile` component so that it defines
    a `loadPosts` method that calls the `listByUser` fetch method. The `loadPosts` method
    will look as follows.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 `fetch` 方法将加载 `PostList` 所需的帖子，`PostList` 被添加到 `Profile` 视图中。我们将更新 `Profile`
    组件，使其定义一个 `loadPosts` 方法，该方法调用 `listByUser` 获取方法。`loadPosts` 方法将如下所示。
- en: '`mern-social/client/user/Profile.js`:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/user/Profile.js`:'
- en: '[PRE60]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'In the `Profile` component, the `loadPosts` method will be called with the
    user ID of the user whose profile is being loaded, after the user details have
    been fetched from the server in the `useEffect()` hook function. The posts that
    are loaded for the specific user are set to the state and rendered in the `PostList`
    component that''s added to the `Profile` component. The `Profile` component also
    provides a `removePost` function, similar to the `Newsfeed` component, as a prop
    to the `PostList` component so that the list of posts can be updated if a post
    is removed. The resulting `PostList` in the `Profile` component will render similar
    to what can be seen in the following screenshot:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Profile` 组件中，`loadPosts` 方法将在从服务器在 `useEffect()` 钩子函数中获取用户详情之后，使用正在加载的用户
    ID 被调用。为特定用户加载的帖子被设置到状态中，并在添加到 `Profile` 组件的 `PostList` 组件中渲染。`Profile` 组件还提供了一个类似于
    `Newsfeed` 组件的 `removePost` 函数，作为属性传递给 `PostList` 组件，以便在帖子被删除时更新帖子列表。`Profile`
    组件中的结果 `PostList` 将渲染成如下截图所示：
- en: '![](img/7458628a-ba76-41c9-b4da-5c97b802928f.png)'
  id: totrans-306
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7458628a-ba76-41c9-b4da-5c97b802928f.png)'
- en: The features that list posts that have been shared on MERN Social are now complete.
    But before these can be tested out, we need to implement the feature that will
    allow users to create new posts. We will do this in the next section.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 列出在 MERN Social 上已分享的帖子的功能现在已经完成。但在测试这些功能之前，我们需要实现允许用户创建新帖子的功能。我们将在下一节中这样做。
- en: Creating a new post
  id: totrans-308
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建新帖子
- en: The create new post feature will allow a signed-in user to post a message and
    optionally add an image to the post by uploading it from their local files. To
    implement this feature, in the following sections, we will add a create post API
    endpoint to the backend that allows uploading an image file, as well as add a
    `NewPost` component to the frontend that will utilize this endpoint to let users
    create new posts.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 创建新帖子功能将允许已登录用户发布消息，并且可以选择通过从本地文件上传来添加图片到帖子中。为了实现这个功能，在接下来的章节中，我们将向后端添加一个创建帖子
    API 端点，允许上传图像文件，并且在前端添加一个 `NewPost` 组件，该组件将利用此端点让用户创建新帖子。
- en: Creating the post API
  id: totrans-310
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建帖子 API
- en: 'On the server, we will define an API to create the post in the database, starting
    by declaring a route to accept a POST request at `/api/posts/new/:userId` in `mern-social/server/routes/post.routes.js`:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务器上，我们将定义一个 API 来在数据库中创建帖子，首先在 `mern-social/server/routes/post.routes.js`
    中声明一个接受 POST 请求的路由 `/api/posts/new/:userId`：
- en: '[PRE61]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: The `create` method in `post.controller.js` will use the `formidable` module
    to access the fields and the image file, if any, as we did for the user profile
    photo update. The `create` controller method will look as follows.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: '`post.controller.js` 中的 `create` 方法将使用 `formidable` 模块来访问字段和图像文件（如果有），就像我们为用户个人资料图片更新所做的那样。`create`
    控制器方法将如下所示。'
- en: '`mern-social/server/controllers/post.controller.js`:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/server/controllers/post.controller.js`:'
- en: '[PRE62]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Similar to the profile photo upload, the photo that's uploaded with a new post
    will be stored in the `Post` document in binary format. We need to add a route
    to retrieve and return this photo to the frontend, which we will do next.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 与个人资料图片上传类似，与新帖子一起上传的图片将以二进制格式存储在 `Post` 文档中。我们需要添加一个路由来检索并返回此图片到前端，我们将在下一步中这样做。
- en: Retrieving a post's photo
  id: totrans-317
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检索帖子的图片
- en: To retrieve the uploaded photo, we will also set up a `photo` route endpoint
    that, on request, will return the photo associated with a specific post. The photo
    URL route will be defined with the other post-related routes, as follows.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 为了检索上传的图片，我们还将设置一个 `photo` 路由端点，在请求时，将返回与特定帖子关联的图片。图片 URL 路由将与其他与帖子相关的路由一起定义，如下所示。
- en: '`mern-social/server/routes/post.routes.js`:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/server/routes/post.routes.js`:'
- en: '[PRE63]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: The `photo` controller will return the `photo` data stored in MongoDB as an
    image file. This is defined as follows.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '`photo` 控制器将返回存储在 MongoDB 中的 `photo` 数据，以图像文件的形式。这定义如下。'
- en: '`mern-social/server/controllers/post.controller.js`:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/server/controllers/post.controller.js`:'
- en: '[PRE64]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Since the photo route uses the `:postID` parameter, we will set up a `postByID`
    controller method to fetch a specific post by its ID before returning it to the
    photo request. We will add the `param` call to `post.routes.js`, as shown in the
    following code.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 由于图片路由使用 `:postID` 参数，我们将设置一个 `postByID` 控制器方法来通过其 ID 获取特定帖子，然后再将其返回给图片请求。我们将在
    `post.routes.js` 中添加 `param` 调用，如下所示代码所示。
- en: '`mern-social/server/routes/post.routes.js`:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/server/routes/post.routes.js`:'
- en: '[PRE65]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '`postByID` will be similar to the `userByID` method, and it will attach the
    post retrieved from the database to the request object so that it can be accessed
    by the `next` method. The `postByID` method is defined as follows.'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: '`postByID`将与`userByID`方法类似，并将从数据库检索到的帖子附加到请求对象中，以便可以通过`next`方法访问。`postByID`方法定义如下。'
- en: '`mern-social/server/controllers/post.controller.js`:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/server/controllers/post.controller.js`:'
- en: '[PRE66]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: The attached post data in this implementation will also contain the ID and name
    of the `postedBy` user reference since we are invoking `populate()`. In the next
    section, we will add a fetch method to access this API endpoint in the frontend.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 在此实现中，附加的帖子数据还将包含`postedBy`用户引用的ID和名称，因为我们调用了`populate()`。在下一节中，我们将在前端添加一个fetch方法来访问此API端点。
- en: Fetching the create post API in the view
  id: totrans-331
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在视图中获取创建帖子API
- en: We will update `api-post.js` by adding a `create` method to make a `fetch` call
    to the create API. The `create` fetch method will look as follows.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过添加一个`create`方法来更新`api-post.js`，以便对创建API进行`fetch`调用。`create` fetch方法将如下所示。
- en: '`mern-social/client/post/api-post.js`:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/post/api-post.js`:'
- en: '[PRE67]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: This method, like the user `edit` fetch method, will send a multipart form submission
    using a `FormData` object that will contain the text field and the image file.
    Finally, we are ready to integrate this create new post feature in the backend
    with a frontend component that will allow users to compose a post and submit it
    to the backend.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法与用户`edit` fetch方法类似，将使用`FormData`对象发送多部分表单提交，该对象将包含文本字段和图像文件。最后，我们准备好将此创建新帖子的功能集成到后端，与允许用户编写帖子并将其提交到后端的客户端组件。
- en: Making the NewPost component
  id: totrans-336
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建NewPost组件
- en: 'The `NewPost` component that we added in the `Newsfeed` component will allow
    users to compose a new post containing a text message and, optionally, an image,
    as shown in the following screenshot:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`Newsfeed`组件中添加的`NewPost`组件将允许用户编写包含文本消息和可选图像的新帖子，如下面的截图所示：
- en: '![](img/d1b1fe4e-5e34-411b-9da4-376ab005a012.png)'
  id: totrans-338
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d1b1fe4e-5e34-411b-9da4-376ab005a012.png)'
- en: The `NewPost` component will be a standard form with a Material-UI `TextField`
    and a file upload button, as implemented in `EditProfile`, that takes the values
    and sets them in a `FormData` object to be passed in the call to the `create`
    fetch method on post submission. Post submission will invoke the following `clickPost`
    method.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: '`NewPost`组件将是一个标准表单，包含Material-UI的`TextField`和一个文件上传按钮，如`EditProfile`中实现的那样，它将值设置在`FormData`对象中，以便在提交帖子时传递给`create`
    fetch方法的调用。帖子提交将调用以下`clickPost`方法。'
- en: '`mern-social/client/post/NewPost.js`:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/post/NewPost.js`:'
- en: '[PRE68]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: The `NewPost` component is added as a child component in the `Newsfeed` and
    given the `addUpdate` method as a prop, as we discussed earlier. On successful
    post creation, the form view is emptied and `addUpdate` is executed so that the
    post list in the `Newsfeed` is updated with the new post. In the next section,
    we will add the `Post` component in order to display each post and its details.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，`NewPost`组件被添加为`Newsfeed`的子组件，并作为属性传递了`addUpdate`方法。在成功创建帖子后，表单视图将被清空，并执行`addUpdate`，以便将新帖子更新到`Newsfeed`中的帖子列表。在下一节中，我们将添加`Post`组件，以便显示每个帖子和其详细信息。
- en: The Post component
  id: totrans-343
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Post组件
- en: Post details in each post will be rendered in the `Post` component, which will
    receive the post data as props from the `PostList` component, as well as the `onRemove`
    prop, which needs to be applied if a post is deleted. In the following sections,
    we will look at the different parts of the Post interface and how to implement
    each.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 每个帖子中的帖子详情将在`Post`组件中渲染，该组件将从`PostList`组件接收帖子数据作为props，以及`onRemove`属性，如果删除帖子则需要应用。在以下章节中，我们将查看Post接口的不同部分以及如何实现每个部分。
- en: Layout
  id: totrans-345
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 布局
- en: 'The `Post` component layout will have a header showing details of the poster,
    the content of the post, an actions bar with a count of likes and comments, and
    a comments section, as shown in the following screenshot:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: '`Post`组件的布局将包含一个显示发布者详情的标题，帖子的内容，一个包含点赞和评论计数的操作栏，以及一个评论部分，如下面的截图所示：'
- en: '![](img/31db151a-6054-4cf7-8461-a1e8a9f43bd8.png)'
  id: totrans-347
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/31db151a-6054-4cf7-8461-a1e8a9f43bd8.png)'
- en: Next, we will look into the implementation details of the header, content, actions,
    and comments sections of this Post component.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将探讨此Post组件的标题、内容、操作和评论部分的实现细节。
- en: Header
  id: totrans-349
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标题
- en: The header will contain information such as the name, avatar, and link to the
    profile of the user who posted, as well as the date the post was created. The
    code to display these details in the header section will be as follows.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 标题将包含有关发布用户的信息，如姓名、头像和链接到用户个人资料，以及帖子创建的日期。在标题部分显示这些详情的代码将如下所示。
- en: '`mern-social/client/post/Post.js`:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/post/Post.js`:'
- en: '[PRE69]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: The header will also conditionally show a `delete` button if the signed-in user
    is viewing their own post. This header section will be above the main content
    section, which is discussed next.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 如果已登录用户正在查看自己的帖子，标题还将条件性地显示一个`delete`按钮。这个标题部分将位于主要内容部分之上，我们将在下一节讨论。
- en: Content
  id: totrans-354
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内容
- en: The content section will show the text of the post and the image if the post
    contains a photo. The code to display these details in the content section will
    be as follows.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 内容部分将显示帖子的文本和图片（如果帖子包含图片）。在内容部分显示这些详情的代码将如下所示。
- en: '`mern-social/client/post/Post.js`:'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/post/Post.js`:'
- en: '[PRE70]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: The image is loaded by adding the photo API to the `src` attribute in the `img`
    tag if the given post contains a photo. Followed by this content section is the
    actions section.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 如果给定的帖子包含照片，将通过在`img`标签的`src`属性中添加照片API来加载图片。紧随此内容部分之后是行动部分。
- en: Actions
  id: totrans-359
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动
- en: The actions section will contain an interactive `"like"` option with a display
    of the total number of likes on the post and a comment icon with the total number
    of comments on the post. The code to display these actions will be as follows.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 行动部分将包含一个交互式的“点赞”选项，显示帖子的总点赞数，以及一个评论图标，显示帖子的总评论数。显示这些行动的代码将如下所示。
- en: '`mern-social/client/post/Post.js`:'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/post/Post.js`:'
- en: '[PRE71]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: We will discuss the implementation of the "like" button later in this chapter.
    The details of the likes for each post are retrieved within the `post` object
    that's received in the props.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章后面讨论“点赞”按钮的实现。每个帖子的点赞详情是通过接收在props中的`post`对象检索的。
- en: In the Post component, the final section will display the comments that have
    been left on the given post. We'll discuss this next.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Post`组件中，最后一部分将显示在给定帖子上的评论。我们将在下一节讨论这个问题。
- en: Comments
  id: totrans-365
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评论
- en: The comments section will contain all the comment-related elements in the `Comments`
    component and will get `props` such as the `postId` and the `comments` data, along
    with a `state` updating method that can be called when a comment is added or deleted
    in the `Comments` component.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 评论部分将包含`Comments`组件中的所有与评论相关的元素，并将获取`props`，如`postId`和`comments`数据，以及一个更新状态的方法，该方法可以在`Comments`组件中添加或删除评论时调用。
- en: The comments section will be rendered in the view with the following code.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 评论部分将通过以下代码在视图中渲染。
- en: '`mern-social/client/post/Post.js`:'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/post/Post.js`:'
- en: '[PRE72]'
  id: totrans-369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: The implementation of this `Comments` component will be detailed later in this
    chapter. These four sections make up the individual post view that we implemented
    in the `Post` component, which is rendered in `PostList` component. Each post's
    header also shows a `delete` button to the creator of the post. We will implement
    this remove post functionality next.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`Comments`组件的实现将在本章后面详细说明。这四个部分构成了我们在`Post`组件中实现的单个帖子视图，该组件在`PostList`组件中渲染。每个帖子的标题还显示了创建者的`删除`按钮。我们将在下一节实现这个删除帖子功能。
- en: Deleting a post
  id: totrans-371
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除帖子
- en: The `delete` button is only visible if the signed-in user and `postedBy` user
    are the same for the specific post being rendered. For the post to be deleted
    from the database, we will have to set up a delete post API in the backend which
    will also have a fetch method in the frontend that will be applied when `delete`
    is clicked. The route for the delete post API endpoint will be as follows.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 如果已登录用户和特定帖子的`postedBy`用户相同，则`delete`按钮才会可见。为了从数据库中删除帖子，我们将在后端设置一个删除帖子API，该API在前端也将有一个在点击`delete`时应用的方法。删除帖子API端点的路由将如下所示。
- en: '`mern-social/server/routes/post.routes.js`:'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/server/routes/post.routes.js`:'
- en: '[PRE73]'
  id: totrans-374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: The delete route will check for authorization before calling `remove` on the
    post by ensuring the authenticated user and `postedBy` user are the same users. The
    `isPoster` method, which is implemented in the following code, checks whether
    the signed-in user is the original creator of the post before executing the `next`
    method.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 删除路由将在调用帖子上的`remove`之前检查授权，确保认证用户和`postedBy`用户是同一用户。以下代码中实现的`isPoster`方法在执行`next`方法之前检查已登录用户是否是帖子的原始创建者。
- en: '`mern-social/server/controllers/post.controller.js`:'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/server/controllers/post.controller.js`:'
- en: '[PRE74]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: The rest of the implementation for the delete API with a `remove` controller
    method and fetch method for the frontend are the same as for the other API implementations.
    The important difference here, in the delete post feature, is the call to the
    `onRemove` update method in the `Post` component when delete succeeds. The `onRemove`
    method is sent as a prop from either `Newsfeed` or `Profile` to update the list
    of posts in the state when the delete is successful.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 删除 API 的其余实现（包括 `remove` 控制器方法和前端 fetch 方法）与其他 API 实现相同。这里的重要区别在于，在删除帖子功能中，当删除成功时，会调用
    `Post` 组件中的 `onRemove` 更新方法。`onRemove` 方法作为 prop 从 `Newsfeed` 或 `Profile` 发送，以在删除成功时更新状态中的帖子列表。
- en: The following `deletePost` method, which is defined in the `Post` component,
    is called when the `delete` button is clicked on a post.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 当在帖子中点击 `delete` 按钮时，将调用定义在 `Post` 组件中的以下 `deletePost` 方法。
- en: '`mern-social/client/post/Post.js`:'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/post/Post.js`:'
- en: '[PRE75]'
  id: totrans-381
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: This method makes a fetch call to the delete post API and on success, updates
    the list of posts in the state by executing the `onRemove` method, which is received
    as a prop from the parent component.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法向删除帖子 API 发起 fetch 调用，并在成功后，通过执行从父组件接收的 `onRemove` 方法来更新状态中的帖子列表。
- en: This wraps up the implementation of the Post CRUD features in the backend and
    the frontend. However, we have not completed the features that will allow MERN
    Social users to interact with these posts. In the next section, we will add the
    ability to like posts and comment on posts.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 这部分完成了后端和前端中 Post CRUD 特性的实现。然而，我们还没有完成允许 MERN Social 用户与这些帖子互动的功能。在下一节中，我们将添加点赞帖子以及评论帖子的功能。
- en: Interacting with Posts
  id: totrans-384
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与帖子互动
- en: A core feature of any social media platform is the ability for users to interact
    with shared content. For the posts that are created in the MERN Social application,
    we will add the options to like and leave comments on individual posts.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 任何社交媒体平台的核心功能都是用户能够与共享内容互动。对于在 MERN Social 应用程序中创建的帖子，我们将添加点赞和为单个帖子留下评论的选项。
- en: To complete the implementation of this feature, first, we will have to modify
    the backend so that we can add API endpoints that update an existing post with
    details of who liked the post and details of comments left on the post.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成此功能的实现，首先，我们必须修改后端，以便我们可以添加更新现有帖子详情（包括点赞该帖子的用户详情和评论详情）的 API 端点。
- en: Then, in the frontend, we will have to modify the UI so that users can like
    and leave a comment on a post.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在前端，我们必须修改 UI，以便用户可以在帖子上点赞和留下评论。
- en: Likes
  id: totrans-388
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 点赞
- en: The like option in the `Post` component's action bar section will allow the
    user to like or unlike a post, and also show the total number of likes for the
    post. To record a "like", we will have to set up like and unlike APIs that can
    be called in the view when the user interacts with the action bar that's rendered
    in each post.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: '`Post` 组件动作栏部分的点赞选项将允许用户点赞或取消点赞帖子，并显示帖子的总点赞数。为了记录“点赞”，我们必须设置点赞和取消点赞 API，以便在用户与渲染在每个帖子中的动作栏交互时在视图中调用。'
- en: The Like API
  id: totrans-390
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 点赞 API
- en: The like API will be a PUT request that will update the `likes` array in the
    `Post` document. The request will be received at the `api/posts/like` route, which
    is defined as follows.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 点赞 API 将是一个 PUT 请求，它将更新 `Post` 文档中的 `likes` 数组。请求将在定义如下 `api/posts/like` 路由处接收。
- en: '`mern-social/server/routes/post.routes.js`:'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/server/routes/post.routes.js`:'
- en: '[PRE76]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: In the `like` controller method, the post ID that's received in the request
    body will be used to find the specific `Post` document and update it by pushing
    the current user's ID to the `likes` array, as shown in the following code.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `like` 控制器方法中，请求体中接收到的帖子 ID 将用于查找特定的 `Post` 文档，并通过将当前用户的 ID 推送到 `likes` 数组来更新它，如下面的代码所示。
- en: '`mern-social/server/controllers/post.controller.js`:'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/server/controllers/post.controller.js`:'
- en: '[PRE77]'
  id: totrans-396
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: To use this API, a fetch method called `like` will be added to `api-post.js`,
    which will be used when the user clicks the `like` button. The `like` fetch is
    defined as follows.
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用此 API，将在 `api-post.js` 中添加一个名为 `like` 的 fetch 方法，该方法将在用户点击 `like` 按钮时使用。`like`
    fetch 的定义如下。
- en: '`mern-social/client/post/api-post.js`:'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/post/api-post.js`:'
- en: '[PRE78]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: Similarly, in the next section, we will also implement an unlike API endpoint
    so that a user can unlike a previously liked post.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，在下一节中，我们还将实现一个取消点赞 API 端点，以便用户可以取消之前点赞的帖子。
- en: The Unlike API
  id: totrans-401
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 取消点赞 API
- en: The `unlike` API will be implemented similar to the like API, with its own route.
    This will be declared as follows.
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: '`unlike` API将类似于`like` API实现，有自己的路由。这将被声明如下。'
- en: '`mern-social/server/routes/post.routes.js`:'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/server/routes/post.routes.js`:'
- en: '[PRE79]'
  id: totrans-404
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: The `unlike` method in the controller will find the post by its ID and update
    the `likes` array by removing the current user's ID using `$pull` instead of `$push`.
    The `unlike` controller method will look as follows.
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器中的`unlike`方法将通过其ID查找帖子，并通过使用`$pull`而不是`$push`来移除当前用户的ID来更新`likes`数组。`unlike`控制器方法将如下所示。
- en: '`mern-social/server/controllers/post.controller.js`:'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/server/controllers/post.controller.js`:'
- en: '[PRE80]'
  id: totrans-407
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: The unlike API will also have a corresponding fetch method, similar to the `like`
    method in `api-post.js`.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: '`unlike` API也将有一个相应的fetch方法，类似于`api-post.js`中的`like`方法。'
- en: These APIs will be called when the user interacts with the like button in the
    view. But whether the like button should allow a like or an unlike action needs
    to be determined first. We will take a look at this in the next section.
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 这些API将在用户与视图中的点赞按钮交互时被调用。但是，首先需要确定点赞按钮是否应该允许点赞或取消点赞操作。我们将在下一节中探讨这个问题。
- en: Checking if a post has been liked and counting likes
  id: totrans-410
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查帖子是否被点赞和统计点赞数
- en: When the `Post` component is rendered, we need to check if the currently signed-in
    user has liked the post or not so that the appropriate `like` option can be shown.
    The following `checkLike` method checks whether the currently signed-in user is
    referenced in the post's `likes` array or not.
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 当`Post`组件被渲染时，我们需要检查当前登录的用户是否已经点赞了这篇帖子，以便显示适当的`like`选项。下面的`checkLike`方法检查当前登录的用户是否在帖子的`likes`数组中被引用。
- en: '`mern-social/client/post/Post.js`:'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/post/Post.js`:'
- en: '[PRE81]'
  id: totrans-413
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'This `checkLike` function can be called while setting the initial value of
    the `like` state variable, which keeps track of whether the current user liked
    the given post or not. The following screenshot shows how the like button renders
    when a post has not been liked versus when it has been liked by the current user:'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`checkLike`函数可以在设置`like`状态变量的初始值时被调用，该变量跟踪当前用户是否喜欢了给定的帖子。以下截图显示了帖子没有被点赞和当前用户点赞时的点赞按钮的渲染方式：
- en: '![](img/3f2ad7bd-98ee-4dec-9835-2803d7fb2218.png)'
  id: totrans-415
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3f2ad7bd-98ee-4dec-9835-2803d7fb2218.png)'
- en: The `like` value that's set in the state using the `checkLike` method can be
    used to render a heart outline button or a full heart button. A heart outline
    button will render if the user has not liked the post; clicking it will make a
    call to the `like` API, show the full heart button, and increment the `likes`
    count. The full heart button will indicate the current user has already liked
    this post; clicking this will call the `unlike` API, render the heart outline
    button, and decrement the `likes` count.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`checkLike`方法在状态中设置的`like`值可以用来渲染心形轮廓按钮或完整的心形按钮。如果用户没有点赞帖子，将渲染心形轮廓按钮；点击它将调用`like`
    API，显示完整的心形按钮，并增加`likes`计数。完整的心形按钮将表示当前用户已经点赞了这篇帖子；点击这个按钮将调用`unlike` API，渲染心形轮廓按钮，并减少`likes`计数。
- en: The `likes` count is also set initially when the `Post` component mounts and
    props are received by setting the `likes` value to the state with `props.post.likes.length`,
    as shown in the following code.
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 当`Post`组件挂载并接收到属性时，`likes`计数也会通过将`likes`值设置为状态的`props.post.likes.length`来初始化，如下面的代码所示。
- en: '`mern-social/client/post/Post.js`:'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/post/Post.js`:'
- en: '[PRE82]'
  id: totrans-419
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: The likes-related values are updated again when a "like" or "unlike" action
    takes place, and the updated post data is returned from the API call. Next, we
    will look at how to handle these clicks on the like button.
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 当发生“点赞”或“取消点赞”操作时，与点赞相关的值会再次更新，并且更新后的帖子数据会从API调用中返回。接下来，我们将看看如何处理点赞按钮上的点击。
- en: Handling like clicks
  id: totrans-421
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理点赞点击
- en: To handle clicks on the `like` and `unlike` buttons, we will set up a `clickLike`
    method that will call the appropriate fetch method based on whether it is a "like"
    or "unlike" action, and then update the state of the `like` and `likes` count
    for the post. This `clickLike` method will be defined as follows.
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理`like`和`unlike`按钮的点击，我们将设置一个`clickLike`方法，该方法将根据是“点赞”还是“取消点赞”操作调用适当的fetch方法，然后更新帖子的`like`和`likes`计数的状态。这个`clickLike`方法将定义如下。
- en: '`mern-social/client/post/Post.js`:'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/post/Post.js`:'
- en: '[PRE83]'
  id: totrans-424
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: Which of the like or unlike API endpoints will be called on a click depends
    on the value of the `like` variable in the state. Once the chosen API endpoint
    is called successfully, the values are updated in the state so that they can be
    reflected in the view.
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 在点击时将调用哪个点赞或取消点赞API端点取决于状态中`like`变量的值。一旦成功调用所选API端点，状态中的值将更新，以便它们可以在视图中反映出来。
- en: This completes the likes feature implementation, complete with backend APIs
    integrated with the frontend to enable liking and unliking a given post. Next,
    we will add the comments feature to complete the social media application features
    we had set out for MERN Social.
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 这完成了点赞功能的实现，包括与前端集成的后端API，以实现对特定帖子的点赞和取消点赞。接下来，我们将添加评论功能，以完成我们为MERN Social设定的社交媒体应用程序功能。
- en: Comments
  id: totrans-427
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评论
- en: 'The comments section in each post will allow signed-in users to add comments,
    see the list of comments, and delete their own comments. Any changes to the comment
    list, such as a new addition or removal, will update the comments, as well as
    the comment count in the action bar section of the `Post` component. The resulting
    comments section can be seen in the following screenshot:'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 每个帖子中的评论部分将允许已登录用户添加评论、查看评论列表以及删除自己的评论。对评论列表的任何更改，如新增或删除，都将更新评论以及`Post`组件动作栏部分的评论计数。以下截图显示了结果评论部分：
- en: '![](img/1f58c1be-b6e1-4aff-acbd-7eb189a20eac.png)'
  id: totrans-429
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1f58c1be-b6e1-4aff-acbd-7eb189a20eac.png)'
- en: To implement a functional comments section, we will update the backend with
    the corresponding comment and uncomment API endpoints, and also create this `Comments`
    component so that it integrates with the backend update.
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现一个功能性的评论部分，我们将更新后端以包含相应的评论和取消评论API端点，并创建此`Comments`组件以便与后端更新集成。
- en: Adding a comment
  id: totrans-431
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加评论
- en: When a user adds a comment, the `Post` document will be updated in the database
    with the new comment. First, we need to implement an API that receives the comment
    details from the client- side and updates the `Post` document. Then, we need to
    create the UI in the frontend, which allows us to compose a new comment and submit
    it to the backend API.
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户添加评论时，数据库中的`Post`文档将使用新的评论进行更新。首先，我们需要实现一个API，该API从客户端接收评论详情并更新`Post`文档。然后，我们需要在前端创建UI，使我们能够编写新的评论并将其提交到后端API。
- en: The Comment API
  id: totrans-433
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评论API
- en: To implement the add comment API, we will set up a `PUT` route as follows to
    update the post.
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现添加评论API，我们将设置如下`PUT`路由来更新帖子。
- en: '`mern-social/server/routes/post.routes.js`:'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/server/routes/post.routes.js`:'
- en: '[PRE84]'
  id: totrans-436
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: The `comment` controller method, which is defined in the following code, will
    find the relevant post to be updated by its ID and push the comment object that's
    received in the request body to the `comments` array of the post.
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码中定义的`comment`控制器方法将根据其ID找到要更新的相关帖子，并将请求体中接收到的评论对象推送到帖子的`comments`数组中。
- en: '`mern-social/server/controllers/post.controller.js`:'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/server/controllers/post.controller.js`:'
- en: '[PRE85]'
  id: totrans-439
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: In the response, the updated post object will be sent back with details of the
    `postedBy` users populated in the post and in the comments.
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 在响应中，将发送回更新后的帖子对象，其中包含在帖子和评论中填充的`postedBy`用户的详细信息。
- en: To use this API in the view, we will set up a fetch method in `api-post.js`,
    which takes the current user's ID, the post ID, and the `comment` object from
    the view, and sends it with the add comment request. The `comment` fetch method
    will look as follows.
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 要在视图中使用此API，我们将在`api-post.js`中设置一个获取方法，该方法接受当前用户的ID、帖子ID和视图中的`comment`对象，并将其与添加评论请求一起发送。评论获取方法如下所示。
- en: '`mern-social/client/post/api-post.js`:'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/post/api-post.js`:'
- en: '[PRE86]'
  id: totrans-443
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: We can use this fetch method in the UI when the user submits a new comment,
    as discussed in the next section.
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在用户提交新评论时在UI中使用此获取方法，正如下一节所讨论的。
- en: Writing something in the view
  id: totrans-445
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在视图中编写内容
- en: 'The *add comment* section in the `Comments` component will allow the signed-in
    user to type in the comment text:'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: '`Comments`组件中的“添加评论”部分将允许已登录用户输入评论文本：'
- en: '![](img/df6466bd-209c-469e-b3c4-6533606272c1.png)'
  id: totrans-447
  prefs: []
  type: TYPE_IMG
  zh: '![](img/df6466bd-209c-469e-b3c4-6533606272c1.png)'
- en: This will contain an avatar showing the user's photo and a text field, which
    will add the comment when the user presses the *Enter* key. This add comment section
    will be rendered in the view with the following code.
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 这将包含显示用户照片的头像和一个文本字段，当用户按下*Enter*键时将添加评论。此添加评论部分将以以下代码在视图中渲染。
- en: '`mern-social/client/post/Comments.js`:'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/post/Comments.js`:'
- en: '[PRE87]'
  id: totrans-450
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: The text will be stored in the state when the value changes, and on the `onKeyDown`
    event, the `addComment` method will call the `comment` fetch method if the *Enter*
    key is pressed. The *Enter* key corresponds to `keyCode` 13, as shown in the following
    code.
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 文本将在值更改时存储在状态中，在 `onKeyDown` 事件中，如果按下 *Enter* 键，`addComment` 方法将调用 `comment`
    fetch 方法。*Enter* 键对应于 `keyCode` 13，如下面的代码所示。
- en: '`mern-social/client/post/Comments.js`:'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/post/Comments.js`:'
- en: '[PRE88]'
  id: totrans-453
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: The `Comments` component receives the `updateComments` method (as discussed
    in the previous section) as a prop from the `Post` component. This will be executed
    when the new comment is added in order to update the comments list and the comment
    count in the Post view. The part of `Comments` that lists all the comments for
    the post will be added in the next section.
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: '`Comments` 组件从 `Post` 组件接收 `updateComments` 方法（如前文所述）作为属性。这将在新评论添加时执行，以更新评论列表和
    Post 视图中的评论计数。`Comments` 中列出所有评论的部分将在下一节中添加。'
- en: Listing comments
  id: totrans-455
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列出评论
- en: The `Comments` component receives the list of comments for the specific post
    as props from the `Post` component. Then, it iterates over the individual comments
    to render the details of the commenter and the comment content. This view is implemented
    with the following code.
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: '`Comments` 组件从 `Post` 组件接收特定帖子的评论列表作为属性。然后，它遍历单个评论以渲染评论者的细节和评论内容。此视图的实现代码如下。'
- en: '`mern-social/client/post/Comments.js`:'
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/post/Comments.js`:'
- en: '[PRE89]'
  id: totrans-458
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '`commentBody` renders the content, including the name of the commenter linked
    to their profile, the comment text, and the date of comment creation. `commentBody`
    is defined as follows.'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: '`commentBody` 渲染内容，包括评论者的名字（链接到其个人资料）、评论文本和评论创建日期。`commentBody` 定义如下。'
- en: '`mern-social/client/post/Comments.js`:'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/post/Comments.js`:'
- en: '[PRE90]'
  id: totrans-461
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '`commentBody` will also render a delete option for the comment if the `postedBy`
    reference of the comment matches the currently signed-in user. We will look at
    the implementation of this comment deletion option in the next section.'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 如果评论的 `postedBy` 引用与当前登录用户匹配，`commentBody` 将为该评论渲染一个删除选项。我们将在下一节中查看此评论删除选项的实现。
- en: Deleting a comment
  id: totrans-463
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除评论
- en: 'Clicking the delete button in a comment will update the post in the database
    by removing the comment from the `comments` array in the corresponding post. The
    delete button can be seen underneath the comment shown in the following screenshot:'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 点击评论中的删除按钮将通过从相应帖子的 `comments` 数组中删除评论来更新数据库中的帖子。删除按钮可以在以下屏幕截图所示的评论下方看到：
- en: '![](img/b800d038-e4bb-4704-b12e-ebdc6a44226e.png)'
  id: totrans-465
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b800d038-e4bb-4704-b12e-ebdc6a44226e.png)'
- en: To implement this delete comment feature, we need to add an uncomment API to
    the backend and then use it in the frontend.
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现此删除评论功能，我们需要在后端添加一个 `uncomment` API，然后在前端使用它。
- en: The Uncomment API
  id: totrans-467
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不评论 API
- en: We will implement an `uncomment` API at the following PUT route.
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在以下 PUT 路由中实现 `uncomment` API。
- en: '`mern-social/server/routes/post.routes.js`:'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/server/routes/post.routes.js`:'
- en: '[PRE91]'
  id: totrans-470
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: The `uncomment` controller method will find the relevant post by ID and pull
    the comment with the deleted comment's ID from the `comments` array in the post,
    as implemented in the following code.
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: '`uncomment` 控制器方法将通过 ID 查找相关帖子，并从帖子的 `comments` 数组中拉取具有被删除评论 ID 的评论，如下面的代码所示。'
- en: '`mern-social/server/controllers/post.controller.js`:'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/server/controllers/post.controller.js`:'
- en: '[PRE92]'
  id: totrans-473
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: The updated post will be returned in the response, similar to the comment API.
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 响应中将返回更新后的帖子，类似于评论 API。
- en: To use this API in the view, we will also set up a fetch method in `api-post.js`,
    similar to the `addComment` fetch method, that takes the current user's ID, the
    post ID, and the deleted `comment` object to send with the `uncomment` request.
    Next, we will learn how to use this fetch method when the delete button is clicked.
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 要在视图中使用此 API，我们还需要在 `api-post.js` 中设置一个 fetch 方法，类似于 `addComment` fetch 方法，它接受当前用户的
    ID、帖子 ID 和要随 `uncomment` 请求一起发送的已删除 `comment` 对象。接下来，我们将学习如何在点击删除按钮时使用此 fetch
    方法。
- en: Removing a comment from the view
  id: totrans-476
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从视图中删除评论
- en: When a comment's delete button is clicked by the commenter, the `Comments` component
    will call the `deleteComment` method to fetch the `uncomment` API and update the
    comments, along with the comment count, when the comment is successfully removed
    from the server. The `deleteComment` method is defined as follows.
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: 当评论者点击评论的删除按钮时，`Comments` 组件将调用 `deleteComment` 方法来获取 `uncomment` API 并更新评论，以及评论计数，当评论成功从服务器移除时。`deleteComment`
    方法定义如下。
- en: '`mern-social/client/post/Comments.js`:'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/post/Comments.js`:'
- en: '[PRE93]'
  id: totrans-479
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: On successfully removing a comment from the backend, the `updateComments` method
    that's sent in the props from the `Post` component will be invoked. This will
    update the state of the `Post` component to update the view. This will be discussed
    in the next section.
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功从后端移除评论后，从 `Post` 组件的 props 中发送的 `updateComments` 方法将被调用。这将更新 `Post` 组件的状态以更新视图。这将在下一节中讨论。
- en: Comment count update
  id: totrans-481
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评论计数更新
- en: 'The `updateComments` method, which will allow the `comments` and comment count
    to be updated when a comment is added or deleted, is defined in the `Post` component
    and passed as a prop to the `Comments` component. The `updateComments` method
    will look as follows:'
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: '`updateComments` 方法，它将允许在添加或删除评论时更新 `comments` 和评论计数，定义在 `Post` 组件中，并作为 prop
    传递给 `Comments` 组件。`updateComments` 方法将如下所示：'
- en: '`mern-social/client/post/Post.js`:'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/post/Post.js`:'
- en: '[PRE94]'
  id: totrans-484
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: This method takes the updated list of comments as a parameter and updates the
    state that holds the list of comments rendered in the view. The initial state
    of comments in the `Post` component is set when the `Post` component mounts and
    receives the post data as props. The comments that are set here are sent as props
    to the `Comments` component and used to render the comment count next to the likes
    action in the action bar of the Post layout, as follows.
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法接受更新的评论列表作为参数，并更新包含在视图中渲染的评论列表的状态。`Post` 组件中的评论初始状态是在组件挂载并接收帖子数据作为 props
    时设置的。这里设置的评论作为 props 发送到 `Comments` 组件，并用于在帖子布局的动作栏中渲染点赞动作旁边的评论计数，如下所示。
- en: '`mern-social/client/post/Post.js`:'
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/post/Post.js`:'
- en: '[PRE95]'
  id: totrans-487
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: This relationship between the comment count in the `Post` component and the
    comments that are rendered and updated in the `Comments` component gives a simple
    demonstration of how changing data is shared among nested components in React
    to create dynamic and interactive user interfaces.
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: '`Post` 组件中的评论计数与在 `Comments` 组件中渲染和更新的评论之间的关系，简单展示了如何在 React 中通过嵌套组件之间共享数据变化来创建动态和交互式的用户界面。'
- en: The MERN Social application now contains the set of features we defined earlier
    for the application. Users are able to update their profiles with a photo and
    description, follow each other on the application, and create posts with photos
    and text, as well as like and comment on posts. The implementations shown here
    can be tuned and extended further to add more features in order to utilize the
    revealed mechanisms of working with the MERN stack.
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: MERN 社交应用现在包含了我们之前为该应用定义的功能集。用户可以使用照片和描述更新他们的个人资料，在应用中相互关注，并创建带有照片和文本的帖子，以及点赞和评论帖子。这里展示的实现可以被调整和进一步扩展，以添加更多功能，以便利用与
    MERN 栈一起工作的揭示机制。
- en: Summary
  id: totrans-490
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: The MERN Social application we developed in this chapter demonstrated how the
    MERN stack technologies can be used together to build out a fully-featured and
    functioning web application with social media features.
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中我们开发的 MERN 社交应用展示了如何将 MERN 栈技术结合使用，以构建一个功能齐全且功能正常的具有社交媒体功能的完整 Web 应用程序。
- en: We began by updating the user feature in the skeleton application to allow anyone
    with an account on MERN Social to add a description about themselves, as well
    as upload a profile picture from their local files. In the implementation of uploading
    a profile picture, we explored how to upload multipart form data from the client,
    then receive it on the server to store the file data directly in the MongoDB database,
    and then be able to retrieve it back for viewing.
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先更新了骨架应用中的用户功能，允许任何在 MERN 社交上有账户的人添加关于自己的描述，以及从本地文件上传个人照片。在上传个人照片的实现中，我们探讨了如何从客户端上传多部分表单数据，然后在服务器上接收它，直接将文件数据存储在
    MongoDB 数据库中，然后能够检索它以供查看。
- en: Next, we updated the user feature further to allow users to follow each other
    on the MERN Social platform. In the user model, we added the capability to maintain
    arrays of user references to represent lists of followers and followings for each
    user. Extending this capability, we incorporated follow and unfollow options in
    the view and displayed lists of followers, followings, and even lists of users
    not followed yet.
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们进一步更新了用户功能，允许用户在MERN社交平台上相互关注。在用户模型中，我们增加了维护用户引用数组的能力，以表示每个用户的关注者和被关注者列表。扩展这一能力，我们在视图中加入了关注和取消关注选项，并显示了关注者、被关注者以及尚未关注的用户列表。
- en: Then, we added the ability to allow users to post content and interact over
    the content by liking or commenting on the post. On the backend, we set up the
    Post model and corresponding APIs, which are capable of storing the post content
    that may or may not include an image, as well as maintaining records of likes
    and comments that are incurred on a post by any user.
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们增加了允许用户发布内容并通过点赞或评论与内容互动的功能。在后台，我们设置了帖子模型和相应的API，这些API能够存储可能包含或不包含图片的帖子内容，以及维护任何用户对帖子产生的点赞和评论记录。
- en: Finally, while implementing the views for the posting, liking, and commenting
    features, we explored how to use component composition and share changing state
    values across the components to create complex and interactive views.
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在实现发布、点赞和评论功能的视图时，我们探讨了如何使用组件组合以及如何在组件之间共享变化的状态值来创建复杂和交互式的视图。
- en: By completing this MERN Social application implementation, we learned how to
    extend and modify the base application code to grow it into a full-fledged web
    application according to our desired features. You can apply similar strategies
    to grow the skeleton application into any real-world application of your choosing.
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 通过完成这个MERN社交应用程序的实现，我们学习了如何扩展和修改基本应用程序代码，使其根据我们所需的功能发展成为完整的网络应用程序。您可以将类似的策略应用于将基本应用程序扩展为任何您选择的现实世界应用程序。
- en: In the next chapter, we will expand further on these abilities in the MERN stack and
    unlock new possibilities as we develop an online classroom application by extending
    the skeleton application.
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将进一步扩展MERN堆栈中的这些功能，并在开发在线教室应用程序时通过扩展基本应用程序来解锁新的可能性。
