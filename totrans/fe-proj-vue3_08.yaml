- en: '8'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Animations and Transitions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you learned about routes and how to set up an essential
    routing navigation system using Vue Router. Empowering a smooth transition between
    different routes or providing your application with the proper animation effects
    when users interact with it is the next level to achieve.
  prefs: []
  type: TYPE_NORMAL
- en: Throughout this chapter, you will explore the essentials of Vue transitions—how
    to create your transitions, including single-element animations and animations
    that use a group of elements, and how to combine them with external libraries
    for further custom animations. You will also learn how to create full-page animations
    with transition routes.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of the chapter, you will be ready to implement and handle the fundamental
    transition and animation effects for any Vue application.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter covers the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Vue transitions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring JavaScript Hooks for transitions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transitioning groups of elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Examining transition routes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the GSAP library for animation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you need to set up a basic Vue project following the instructions
    in [*Chapter 1*](B18645_01.xhtml#_idTextAnchor015), *Starting Your First Vue Project*.
    You also need to add Vue Router, as learned about in [*Chapter 7*](B18645_07.xhtml#_idTextAnchor248),
    *Routing*, in some of its examples and exercises. It’s recommended to create a
    single file Vue component to practice the examples and concepts mentioned easily.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find this chapter’s source code here: [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter08](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter08).'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Vue transitions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unlike other frameworks, Vue.js provides developers with built-in support for
    animating Vue.js applications, including transitions and animations. Transitioning
    is implemented in such a simple manner that developers can easily configure and
    add it to their applications. The Vue.js transition mechanism supports CSS transitions,
    programmatic manipulation with JavaScript, and even integration with third-party
    animation libraries such as `Animate.css`.
  prefs: []
  type: TYPE_NORMAL
- en: Before diving into this topic, let’s discuss the difference between transitions
    and animations. A **transition** happens when a component (or element) moves from
    one state to another, such as hovering on a button, navigating from one page to
    another, displaying a pop-up modal, and so on. Meanwhile, **animations** are like
    transitions but are not limited to just two states.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the basics of transitions will allow you to get started with animations.
  prefs: []
  type: TYPE_NORMAL
- en: Using the transition element
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To access the code file for this example, refer to [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter08/Example8.01](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter08/Example8.01)
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, to enable transitions for a single component or element, Vue.js
    provides the built-in `transition` component, which will wrap around the targeted
    element, as seen in `./Example8.01/src/components/Example8-01.vue`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The `transition` component adds two transition states—`enter` and `leave`—for
    any targeted element or component, including components with conditional rendering
    (`v-if`) and conditional display (`v-show`):'
  prefs: []
  type: TYPE_NORMAL
- en: '`enter`: This transition state happens when the component *enters* the DOM'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`leave`: This transition state happens when the component *leaves* the DOM'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `transition` component receives a prop called `name` that represents the
    name of the transition—in this case, it’s `fade-in`—and is also the prefix for
    the transition class names, which will be discussed next.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring transition classes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Vue.js implements a CSS-based and class-based transition effect for `leave`
    and `enter`—hence, the transition will be applied to the target component using
    a set of class selectors.
  prefs: []
  type: TYPE_NORMAL
- en: Each of these class selectors has the `v-` prefix in case there is no `name`
    prop given for the `transition` component. The standard classes are grouped into
    two main groups.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first group of transition classes is for the `enter` transition when the
    component is first displayed. Here is a list of the `enter` transition classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`v-enter-from` (or `<name>-enter-from`): This is the starting state and is
    added to the component before the component is added or updated. This class will
    be removed after the component is inserted into the DOM and the transition finishes.
    In the `<style>` section of `./Example8.01/src/components/Example8-01.vue`, we
    will set the `.fade-in-enter-from` starting state as completely hidden with `opacity:
    0`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`v-enter-active` (or `<name>-enter-active`): This class defines the delay,
    duration, and easing curve when the component is actively entering the transition.
    It will be added to the component before the component is inserted, applied to
    the component during the entire entering phase, and removed once the effect completes.
    Using `Example 8-01` from the previous section, let’s add `.fade-in-enter-active`,
    which will transition into an adjusted `opacity` state within `3` seconds:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`v-enter-to` (or `<name>-enter-to`): This is the last sub-state of entering,
    where the effect frame is added after the component is inserted and removed when
    the effect finishes. In our example, we do not need to define anything since the
    `opacity` value for this state should be `1`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The second group of classes consists of the `leave` transitions, which trigger
    when the component is disabled or removed from view:'
  prefs: []
  type: TYPE_NORMAL
- en: '`v-leave-from` (or `<name>-leave-from`): This is the starting state for the
    leaving transition. As with `v-enter-to`, we don’t need to define styling effects
    for this state.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`v-leave-active` (or `<name>-leave-active`): This is applied during the leaving
    phase and acts similarly to `v-enter-active`. Since we want to have a fade-out
    effect, we will use the same styling as with `fade-in-enter-active`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`v-leave-to` (or `<name>-leave-to`): This is the ending state, with similar
    behavior to `v-enter-to`. Since the component is going to disappear from view,
    we will reuse the styling defined for the starting phase of `fade-in-enter-from`
    for `fade-in-leave-to`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following screenshot is a recap of all the states of `transition` described
    so far:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.1 – Diagram of transition phases](img/B18645_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.1 – Diagram of transition phases
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we looked at three different `enter` transition states and
    three `leave` transition states. We also walked through using a transition state
    to slowly fade in some text when the text component enters a user’s view, and
    this also applies when the text disappears from the user’s view.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will explore adding animation effects to a component
    using these transition states that we have learned about.
  prefs: []
  type: TYPE_NORMAL
- en: An animation for a component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To access the code file for this example, refer to [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter08/Example8.02](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter08/Example8.02)
  prefs: []
  type: TYPE_NORMAL
- en: Since an animation is basically an extended form of a transition (with more
    than two states), it is applied in the same way as a transition, with the exception
    that `v-enter` will only be removed for an `animationend` event triggered by Vue.js.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '`animationend` is a DOM event that is fired once the CSS animation finishes
    execution, with the condition that the target element still exists within the
    DOM and the animation is still attached to that element.'
  prefs: []
  type: TYPE_NORMAL
- en: For example, in the `<template>` section in *Exercise 8.02*, we can define a
    new transition called `slid`e using an animation CSS effect as a wrapper for the
    `h1` element that displays `msg`. This transition provides the animation effect
    of sliding from the left-hand side of the screen to the middle on entering and
    vice versa on leaving.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started, generate a `vue` starter project using the CLI with the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, open up the project, go into `Example8.02/src/components/Example8-02.vue`,
    and then modify the existing `<``h1>{{msg}}</h1>` code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'In `<style>`, we need to define keyframes for the `slide` animation effect:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The related transition classes will be assigned the following styling:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: This means at the starting phase of `enter` and the ending phase of `leave`,
    the text position will be `-100px` from the designated position on the page. The
    browser will animate the element using the `slide` keyframe for a duration of
    5 seconds, and in the `active` state of leaving, the animation will be exactly
    the opposite of the one in the active state of entering.
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ll also want to add `show` as a local data variable. You can do this by
    modifying the `<script setup>` section, as shown in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'With that, we have implemented our animation. Now, comes the next challenge:
    what if we want to combine different animation or transition effects with `leave`
    and `enter` states, or use an external CSS library for these states? Let’s look
    at custom transition classes.'
  prefs: []
  type: TYPE_NORMAL
- en: Exploring custom transition classes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, again, we’ll be starting from the default starter project created
    with `npm init vue@3`. Instead of setting the transition name and letting the
    Vue.js mechanism populate the required class names, there is an option to provide
    custom classes through the following attributes and replace the conventional defaults.
  prefs: []
  type: TYPE_NORMAL
- en: 'For entering a state, use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`enter-from-class`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`enter-active-class`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`enter-to-leave`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For leaving a state, use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`leave-from-class`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`leave-active-class`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`leave-to-class`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We will start by creating a file based on the previous example (*Exercise 8.02*),
    but now we will use a `swing` animation effect for the active state of entering,
    and the `tada` effect for the active state of leaving. We will define the `enter-active-class`
    and `leave-active-class` attributes in our `transition` component as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, in the `<style>` section, we just need to define `.tada` and `.swing`
    without any suffix pattern:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code demonstrates the following animation classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`tada`, which applies CSS animation styles defined by `tada` to its target
    element *both before and after* the execution, with a duration of 2 seconds'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`swing`, which applies CSS animation styles defined by `swing` to its target
    element both *before and after the execution*, with the origin point of transformation
    set to the top-center edge (`transform-origin`) and with a duration of 2 seconds'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To set up the animation CSS styles, we add the dedicated keyframes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: For the `tada` animation, we set different CSS styles for each target keyframe
    (a time percentage of the animation sequence), such as resizing (`scale3d()`)
    and rotating (`rotate3d()`) the element in a 3D space. For the `swing` animation,
    we set different rotation effects for keyframes of `20%`, `40%`, `60%`, `80%`,
    and `100%`.
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ll also want to add a `show data` variable. You can do this by modifying
    the existing `export`, as shown in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'When we run the application using the `yarn dev` command, we will have our
    animations for entering and leaving set separately. The following screenshot displays
    how the screen will now appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.2 – The swing animation effect in action](img/B18645_08_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.2 – The swing animation effect in action
  prefs: []
  type: TYPE_NORMAL
- en: 'You should see the welcome text shrink while rotating, transitioning from what
    was shown in *Figure 8**.2* to what is shown in *Figure 8**.3*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.3 – The tada animation effect in action](img/B18645_08_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.3 – The tada animation effect in action
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we looked at creating custom transition effects. As an example,
    we made `swing` and `tada`. We did this by defining the transition classes in
    our stylesheet and then adding keyframes for each of the effects. This technique
    can be used to create all kinds of custom transition effects. In the next section,
    we’ll look at JavaScript Hooks and how they can be used for more complex animations.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring JavaScript Hooks for transitions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To access the code file for this example, refer to [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter08/Example8.03](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter08/Example8.03)
  prefs: []
  type: TYPE_NORMAL
- en: As we learned in the previous section, we can use custom transition classes
    to integrate external third-party CSS animation libraries for styling effects.
    However, there are external libraries that are JavaScript-based rather than CSS-based,
    such as Velocity.js or GSAP, which require Hooks to be set using JavaScript events
    and external animation handlers.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use the Velocity.js or GSAP libraries in the Vue app, you need to install
    them separately by using the `npm install` or `yarn add` command, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To install Velocity.js, use these commands:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To install GSAP, use these commands:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Being a Vue.js component means the `transition` component supports binding
    custom handlers to a list of events as props. Let’s take a look at the following
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'We bind the animation methods programmatically to the respective events on
    the `transition` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '`beforeEnter` is the animation state before the component is inserted—similar
    to the `v-enter-from` phase.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`enter` is the animation state during the entire entering phase—similar to
    the `v-enter-active` phase.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`leave` for the animation during the entire leaving phase. This is similar
    to the `v-leave-active` phase.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We need to define these event handlers in the `methods` section of the `Example8.03/src/components/Example8-03.vue`
    component’s configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'In this example, we will create our animation events using the `gsap.to()`
    and `gsap.timeline()` functionalities provided by the GSAP library, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'For both `gsap.to` and the `return` variable of `gsap.timeline().to`, the syntax
    is pretty straightforward:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Most of the effect properties have a similar syntax to CSS, so they’re straightforward
    to learn how to use. In addition, we must pass a `done` callback received from
    the event emitter for events such as `enter` and `leave` to `onComplete` to make
    sure it is triggered and that the Hooks will not be called synchronously. Also,
    note that all the event emitters also pass `el`, which is a pointer to the current
    element in transition for use.
  prefs: []
  type: TYPE_NORMAL
- en: Other than these three events, there are other events we can bind, depending
    on the complexity of the animations and transitions, such as `afterEnter`, `enterCancelled`,
    `beforeLeave`, `afterLeave`, and `leaveCancelled`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Please note that it’s highly recommended to add `v-bind:css="false"` (or `:css="false"`)
    if you are using transitions with JavaScript only. This is to prevent Vue.js from
    detecting and applying any related CSS, therefore avoiding transition interference
    by accident:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: In this section, we looked at how external JavaScript libraries can be used
    for animations. We also implemented a simple tween using the GSAP library, making
    use of animation and timeline animation functions.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s now learn how to add a new message using an animation effect.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 8.01 – adding a new message with an animation effect
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, you will use the `transition` component and its CSS transition
    classes to add animation effect to a component.
  prefs: []
  type: TYPE_NORMAL
- en: To access the code file for this exercise, refer to [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter08/Exercise8.01](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter08/Exercise8.01).
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to create a message editor in which the user will compose and
    submit a new message. The new message will be displayed instantly with a sliding-from-the-right
    animation effect. To do this, see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the application generated with `npm init vue@3` as a starting point, or
    within the root folder of the code repository, navigate into the `Chapter08/Exercise8.01`
    folder by using the following commands in order:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the exercise project in your VS Code (by using the `code .` command within
    the project directory) or your preferred IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new component called `Exercise8-01.vue` located in the `/src/components/`
    folder. In this component, `<template>` will contain two element sections:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`textarea`, for composing a new message with a button to submit it.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`section`, where the newly composed message will be displayed:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE38]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE39]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE40]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE41]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE42]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE43]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE44]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE45]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE46]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE47]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE48]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE49]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, wrap the whole `message` section with the `transition` element, to prepare
    for our animation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let’s define a method to update the message text called `onSendClick` by adding
    the following `script` code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we will define the `slide-right` animation effect using `@keyframes`
    in our `style` section by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This means it will re-position the element that has this effect horizontally
    (on the *x*-axis) to the original starting point, `(0,0)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will define the two classes, one for sliding in from left to right
    (`slide-right`) and one from right to left (`slide-left`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE86]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE87]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add `border-top:0` as the starting point for our `slide-right` transition to
    add a bit of an effect to `border-top` of this section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE89]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE90]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, using what we have learned about custom transition classes, let’s bind
    `enter-active` to the `slide-right` class, and similarly bind `leave-active` to
    `slide-left`. We will then add these three properties to the `transition` element
    added in *step 4*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE92]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE93]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE94]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE95]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add CSS stylings using CSS Flexbox to make the editor look nice:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE97]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE98]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE99]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE100]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE101]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE102]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE103]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE104]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE105]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE106]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE107]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE108]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE109]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE110]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE111]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, run the application using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Upon visiting `http://localhost:3000` in the browser, the previous code will
    generate a component that will display the typed message with a sliding animation
    effect, as shown in *Figure 8**.4*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.4 – Message editor text area](img/B18645_08_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.4 – Message editor text area
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows how the message component appears with a slide-from-left-to-right
    animation effect:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.5 – The message in transition for display](img/B18645_08_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.5 – The message in transition for display
  prefs: []
  type: TYPE_NORMAL
- en: 'After animating in from the left, the component should stop in the centered
    position, as shown in *Figure 8**.6*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.6 – Message after the animation](img/B18645_08_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.6 – Message after the animation
  prefs: []
  type: TYPE_NORMAL
- en: This exercise helped you to get used to some of the `transform` effects in CSS,
    such as `translateX` and `transition`. It also demonstrates how easy it is to
    add animation to an element in a Vue application.
  prefs: []
  type: TYPE_NORMAL
- en: But what about transitioning with multiple elements in the same group, such
    as a list? We will find out in the next topic.
  prefs: []
  type: TYPE_NORMAL
- en: Transitioning groups of elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To access the code file for this example, refer to [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter08/Example8.04](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter08/Example8.04)
  prefs: []
  type: TYPE_NORMAL
- en: So far, we have gone through the fundamentals of Vue transition elements for
    simple components and elements, with both custom CSS-only and JavaScript-only
    support for animations. Next, we will explore how to apply a transition to a group
    of components – for instance, a list of items that will be rendered simultaneously
    by using `v-for`.
  prefs: []
  type: TYPE_NORMAL
- en: Vue.js provides another component for this specific purpose, the `transition-group`
    component.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will now assume that we have a list of messages displayed on a feed, and
    we would like to add a transition to this list to provide some kind of effect
    when each item appears on the screen. Take the following component code, for instance
    (`./Example8.04/src/components/Example8-04.vue`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: The component contains a `button` element that binds to the `showList` method,
    and a conditional list element based on the `show` variable. This list element
    renders a list of `messages` whenever the **Show list** button is clicked.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s wrap the list elements with a `transition-group` component and pass the
    same props we used previously for our `transition` component—`name="fade"`. Both
    `transition-group` and `transition` receive the same props:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to set the CSS styling effect for the transition effect passed as `fade`,
    following the same syntax rules for `transition` classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: 'Upon running the application using the `yarn dev` command, your list’s item
    will have a fading effect when it appears. The following screenshot displays how
    your screen should appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.7 – Fading of the list item](img/B18645_08_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.7 – Fading of the list item
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that unlike the `transition` component, which does not render any wrapper
    container element at all, `transition-group` will render an actual element if
    you define an element’s tag name by using a `tag` prop, such as a `div` wrapper
    element, as in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: 'In the browser, the actual HTML output will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.8 – Transition container element rendered according to the tag attribute](img/B18645_08_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.8 – Transition container element rendered according to the tag attribute
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, all the `transition` classes will only be applied to the list item
    elements that have the `v-for` attribute and not to the wrapper.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you *must* have the `:key` attribute for every list item in order for
    Vue.js to index and know which item to apply the transition to.
  prefs: []
  type: TYPE_NORMAL
- en: We will now create a moving effect on the list.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a moving effect while transitioning a list
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In many cases, we want to add additional animation to each list item during
    its position transitioning, not only during its visibility transitioning. Position
    transitioning happens when shuffling, sorting, filtering, and so on are applied
    to the given list. The list items are already visible, and only change in their
    position — hence, using `enter` and `leave` won’t work.
  prefs: []
  type: TYPE_NORMAL
- en: 'To achieve this animation goal, `transition-group` provides us another attribute,
    `v-move`; this attribute allows us to add additional animation effects to the
    list elements when each of the target elements changes its position:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: 'They can also be manually assigned using the `move-class` attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, we can simply define the CSS class with a prefix that matches
    the `name` attribute, as in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: The Vue engine will automatically detect and attach the relevant class for a
    `transition` effect when it is applicable.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will look at making animations on the initial rendering of a page or
    component.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring an animation on initially rendering
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Usually, the list of items will be displayed on the first initial page load,
    and our animation won’t work because the element is already in View. To trigger
    the animation, we need to use a different transition attribute, `appear`, to force
    the animation when the page initially renders, right after it has been loaded:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also set Hooks with `v-on:after-appear`, `v-on:appear`, `v-on:after-appear`,
    and `v-on:appear-cancelled`, or we can create custom classes by using the following
    format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: Note that in case you use the JavaScript Hooks related to `appear`, you need
    to set the `appear` prop to `true` along with binding the Hooks. Otherwise, it
    won’t work.
  prefs: []
  type: TYPE_NORMAL
- en: Animating on render is a commonly used feature applicable to many situations,
    such as fading in components, as we did here. In the next section, we will look
    at sorting a list of messages with an animation.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 8.02 – sorting a list of messages with an animation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this short exercise, we will implement an animation effect on a list of elements
    using the `transition-group` component.
  prefs: []
  type: TYPE_NORMAL
- en: To access the code file for this exercise, refer to [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter08/Exercise8.02](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter08/Exercise8.02).
  prefs: []
  type: TYPE_NORMAL
- en: 'Based on the code of *Exercise 8.01*, within the `Exercise8-01.vue` component,
    we will add additional functionality to the message list: **sorting**. Upon sorting
    (A-Z or Z-A), there will be a flipping animation effect applied to the list. To
    do this, see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the application generated with `npm init vue@3` as a starting point, or
    within the root folder of the code repository, navigate into the `Chapter08/Exercise8.02`
    folder by using the following commands in order:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE123]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the exercise project in your VS Code (by using the `code .` command within
    the project directory) or your preferred IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let’s wrap the list of messages with a `transition-group` component. Do not
    forget to set the `tag` name to `div`, and add a `flip` animation by using the
    `name` attribute:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE125]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE126]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE127]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE128]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE129]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE130]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE131]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE132]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE133]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE134]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE135]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add `appear="true"`, or simply `appear` for short, to animate the element only
    after the page has finished loading:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE136]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE137]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE138]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE139]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE140]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE141]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE142]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the application using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE143]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Upon visiting `http://localhost:3000` in the browser, the output will be as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.9 – Message list before the animation](img/B18645_08_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.9 – Message list before the animation
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, there’s no animation because we haven’t defined the CSS animation
    styling for `flip` yet. In the `<style>` section of `src/components/Exercise8-02.vue`,
    we will add `opacity: 0` and then reposition each element in the list vertically
    (on the *y*-axis) by `20px` from its original position. This should be the initial
    state when the element enters `flip-enter-from` or is about to leave the transition
    with `flip-leave-to`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE144]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE145]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE146]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE147]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE148]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE149]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the same `<style>` section, add custom CSS styling to each `message` element
    (the `message—item` class) with `transition: all 2s`. This is to make sure the
    transition effect for the element will be applied to all CSS properties within
    `2` seconds:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE150]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE151]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE152]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once `flip-move` is in action, we need to add the transition effect just for
    `transform` (which was defined previously as vertically `20px` away). We can see
    the moving-up-and-down effect for each message flawlessly. In addition, we also
    need to add `position: absolute` for when the transition is in the middle of the
    leaving state:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE153]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE154]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE155]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE156]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE157]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE158]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will next add three buttons—allowing you to sort from A to Z, sort from
    Z to A, and shuffle randomly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE159]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE160]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE161]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We also need to add our basic component `export` code, as well as our message
    feed data. Feel free to use any content you like for `messages`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE162]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE163]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE164]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE165]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE166]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE167]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE168]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE169]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE170]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE171]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE172]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE173]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE174]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE175]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE176]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE177]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE178]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we’ll add the logic for sorting and shuffling. The `methods` section
    should be inside the `export` component from the last step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE179]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE180]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE181]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE182]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE183]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE184]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE185]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE186]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE187]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output after clicking on one of the buttons will be like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.10 – Message list during sorting](img/B18645_08_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.10 – Message list during sorting
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, we learned how to add a `flip` animation effect with `transition-group`
    to a list of components dynamically based on a change in the order of its element.
    Note that the algorithm used for shuffling the list of messages is naïve, and
    you should not use it in real-life scenarios due to the complexity of its performance.
  prefs: []
  type: TYPE_NORMAL
- en: Next, let’s explore how to apply transition effects when navigating between
    pages.
  prefs: []
  type: TYPE_NORMAL
- en: Examining transition routes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the combination of the `router-element` component from Vue Router and the
    `transition` component, we can easily set up the transition effects when a user
    navigates from one URL (route) to another.
  prefs: []
  type: TYPE_NORMAL
- en: To give you a more fundamental understanding, we demonstrate in the following
    section an underlying case where a user redirects from the `home` page to the
    `about` page on a website.
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable a transition across routing, with Vue Router 4.x and above, we need
    to combine the `v-slot` API with a dynamic `component` element. We use the `v-slot`
    attribute to pass and bind view `Component` of the current route to the `is` props
    of the `component` element nested under `transition`, as seen here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE188]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we add a `zoom` transition effect when navigating from one page to another.
    We can also use the `mode` attribute to indicate the transition mode. There are
    currently two modes to set:'
  prefs: []
  type: TYPE_NORMAL
- en: '`in-out`: The new element comes in first, and only after that will the current
    element go out of view.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`out-in`: The current element goes out first, and only then will the new element
    come in. We will use this for our example and it’s more common than the previous
    one.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Then, we just need to set up the transition CSS effect with the `transition`
    classes as usual and it’s done. Simple as that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE189]'
  prefs: []
  type: TYPE_PRE
- en: In this section, we looked at transition routes. Transition effects are animations
    that occur between the rendering of routes, such as navigating from one page to
    another. In the next exercise, we will look at creating a transition effect for
    each route navigated in our application.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 8.03 – creating a transition effect for each route navigated
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this exercise, we will adapt what we have learned about transitions with
    the `router` element from the *Examining transition routes* section to create
    different transition effects for different routes.
  prefs: []
  type: TYPE_NORMAL
- en: To access the code file for this exercise, refer to [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter08/Exercise8.03](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter08/Exercise8.03).
  prefs: []
  type: TYPE_NORMAL
- en: 'We will create a new route view for displaying the messages using the code
    from *Exercise 8.02* and add the transition effect when navigating to this view.
    The default effect will be `fade`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the application generated with `npm init vue@3` as a starting point, with
    Vue Router added. Alternatively, within the root folder of the code repository,
    navigate into the `Chapter08/Exercise8.03` folder by using the following commands
    in order:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE190]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE191]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the exercise project in your VS Code (by using the `code .` command within
    the project directory) or your preferred IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new route view for the `Messages.vue` view, located in the `src/views/`
    folder. Reuse the code for `Exercise8-02.vue` from *Exercise 8.02* for this view
    component to render the `/messages` page route.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Register this `/messages` route by adding a new `route` object to `routes`,
    as seen in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE192]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE193]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE194]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE195]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE196]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE197]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE198]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE199]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE200]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE201]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE202]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE203]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE204]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE205]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE206]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE207]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE208]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE209]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE210]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a link to this newly created route in `App.vue`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE211]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE212]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE213]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE214]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, in `App.vue`, we bind the global `route` instance (mentioned in [*Chapter
    7*](B18645_07.xhtml#_idTextAnchor248), *Routing*) to `slot`, and dynamically assign
    the `transition` defined for the specific route using the `meta` property (or
    using the local `transition` data). We also bind the transition mode to the local
    `mode` data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE215]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE216]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE217]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE218]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE219]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE220]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside the `script` section of `App.vue`, make sure we define the default value
    for `transition` and `mode`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE221]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE222]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE223]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE224]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE225]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the CSS style for fading in and out using the following CSS in `App.vue`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE226]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE227]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE228]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE229]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE230]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE231]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE232]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE233]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'At this point, all the pages are loaded with the `fade` effect, even `/messages`.
    But we want to make the `messages` page load with a different effect: the `zoom`
    effect. Next, add the relevant CSS code for the `zoom` animation inside the same
    `style` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE234]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE235]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE236]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE237]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE238]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE239]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE240]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE241]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE242]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE243]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE244]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE245]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE246]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE247]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE248]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE249]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE250]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE251]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE252]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will now add some standard CSS styling for the app’s default layout with
    the help of the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE253]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE254]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE255]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE256]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE257]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE258]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE259]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE260]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE261]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE262]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE263]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE264]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE265]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE266]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE267]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE268]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE269]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we need to map the `/messages` route with this specific transition effect
    without affecting other routes. In order to do that, we need to add a field called
    `transition` to the `meta` property of this route configuration, in `src/router/index.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE270]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE271]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE272]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE273]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE274]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE275]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE276]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE277]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check the code for your `routes` object to confirm that it’s the same as the
    following code. Here, we match each URL for our application with a view file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE278]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE279]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE280]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE281]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE282]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE283]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE284]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE285]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE286]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE287]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE288]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE289]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE290]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE291]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE292]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE293]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE294]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE295]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE296]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the application using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE297]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, if you open `localhost:3000` in your browser and navigate to `/messages`,
    you should see something similar to *Figure 8**.11*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.11 – Navigating to /messages with a zoom effect in progress](img/B18645_08_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.11 – Navigating to /messages with a zoom effect in progress
  prefs: []
  type: TYPE_NORMAL
- en: 'While navigating to other routes, we should see the default transition shown
    in *Figure 8**.12*:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 8.12 – Navigating to /home with a message with a\uFEFF fade effect](img/B18645_08_12.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 8.12 – Navigating to /home with a message with a fade effect
  prefs: []
  type: TYPE_NORMAL
- en: This exercise demonstrates how we can easily set up different transitions for
    different pages with minimum effort by combining the right Hooks and methods.
    You can experiment a bit further with an external library to make your app animation
    smoother and livelier.
  prefs: []
  type: TYPE_NORMAL
- en: Using the GSAP library for animation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GSAP is an open source, scripted library that focuses solely on fast animation
    using JavaScript and provides cross-platform consistency support. It supports
    animation on a wide range of element types, such as **Scalar Vector Graphics**
    (**SVG**), React components, canvas, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: GSAP is flexible, easy to install, and will adjust to any configuration given,
    from CSS properties or SVG attributes to a numeric value for rendering an object
    into a canvas.
  prefs: []
  type: TYPE_NORMAL
- en: The core library is a suite of different tools, divided into core tools and
    others, such as plugins, easing tools, and utilities.
  prefs: []
  type: TYPE_NORMAL
- en: Installing GSAP
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Installing GSAP is straightforward using `npm install` or `yarn add`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE298]'
  prefs: []
  type: TYPE_PRE
- en: 'After installation, you should see a successful output such as that shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.13 – Results after successful installation](img/B18645_08_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.13 – Results after successful installation
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have GSAP installed, we’ll look at basic tweens in GSAP.
  prefs: []
  type: TYPE_NORMAL
- en: Basic tweens
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**A tween** is a concept defined by the creator of the GSAP library as a high-performance
    setter for performing all the desired animation work based on the user’s configuration
    inputs. We can use the targeted objects, a period, or any specific CSS properties
    as input for animation. Upon performing the animation, the tween figures out what
    the values of CSS properties should be according to the given duration and applies
    them accordingly.'
  prefs: []
  type: TYPE_NORMAL
- en: The following are the essential methods to create basic tweens.
  prefs: []
  type: TYPE_NORMAL
- en: gsap.to()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The most commonly used tween is `gsap.to()`, which is called to create an animation
    based on these two main parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`#myId`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`opacity: 0`, `rotation: 90`, or `fontSize: ''20px''`; animation properties
    such as `duration: 1`, `stagger: 0.2`, or `ease: "elastic"`; and event handler
    properties such as `onComplete` or `onUpdate`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For example, if we want to animate the logo of Vue in `HelloWorld.vue`, we
    run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE299]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, use the following to move an object with `x` properties (the
    same as `transform: translateX()`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE300]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code locates an element with the `green` class and rotates it
    `360` degrees within a `500`-px distance horizontally when that element comes
    into view.
  prefs: []
  type: TYPE_NORMAL
- en: gsap.from() and gsap.fromTo
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We don’t always want to define the expected animation effect for the element
    in view. Instead, we define the default values from which the animation should
    start for the targeted element – that’s when we use `gsap.from()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, assuming the current `opacity` value of a box is `1`, the `scale`
    value is `1`, and the `x` position is `0`, we want to set up an animation to these
    current values *from* an `x` position of `300`, with an `opacity` value of `0`
    and a `scale` value of `0.5`. In other words, the animation will be from `{x:
    300, opacity: 0, scale: 0.5}` to whatever values the element has currently:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE301]'
  prefs: []
  type: TYPE_PRE
- en: 'However, in many cases, we need to set up the start and end values for an animation
    since one side is not good enough. For that purpose, GSAP provides `gsap.fromTo()`
    with the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE302]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s define an animation for a gray box with original values of `{ opacity:
    0, scale: 0.5, x: 300 }` to the values of `{ opacity: 1, scale: 1, x: 100,` `rotation:
    360}`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE303]'
  prefs: []
  type: TYPE_PRE
- en: In order to translate all the CSS-like values into the corresponding CSS values,
    one of the core plugins for GSAP is `CSSPlugin`. This plugin will detect whether
    the target is a DOM element automatically, intercept the values passed, translate
    them into proper CSS values, and then apply them to the element as inline styles
    accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we’ll walk through an exercise of creating a simple tween
    using GSAP.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 8.04 – tweening with GSAP
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The goal of this exercise is to get you comfortable with working with external
    libraries such as GSAP.
  prefs: []
  type: TYPE_NORMAL
- en: To access the code file for this exercise, visit [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter08/Exercise8.04](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter08/Exercise8.04).
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll set up a simple animation, but you can apply this same pattern anywhere
    in your Vue code. We’ll be applying the animation during mount, but JavaScript
    animations can be triggered dynamically based on things such as timers, random
    integers, or inputs such as buttons:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the application generated with `npm init vue@3` as a starting point, with
    Vue Router added. Alternatively, within the root folder of the code repository,
    navigate into the `Chapter08/Exercise8.04` folder by using the following commands
    in order:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE304]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE305]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the exercise project in your VS Code (by using the `code .` command within
    the project directory) or your preferred IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Install GSAP with `yarn` or `npm` using one of the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE306]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE307]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE308]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Find the existing `img` tag in `src/App.vue` and add `ref="logo"` to it as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE309]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `<script setup>` section of `src/App.vue`, import GSAP:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE310]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We use the `ref()` Hook to define `logo` as a reactive variable, which contains
    the reference to the `img` element set in *step 4*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE311]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE312]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we use an `onMounted()` lifecycle Hook to add an animation, which is
    `10` rotations over `30` seconds:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE313]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE314]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE315]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE316]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE317]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The full component code for the `script` section will be like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE318]'
  prefs: []
  type: TYPE_PRE
- en: Next, start the application by running `yarn dev` in the terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open your browser to `localhost:3000` and you should see the default Vue starter
    page but with the logo spinning, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.14 – Simple animation with GSAP](img/B18645_08_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.14 – Simple animation with GSAP
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, we learned how to implement a simple spinning animation using
    GSAP in Vue. Next, we will see how we can modify the look and feel of an animation
    with easing.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying the look and feel with easing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Easing is important because it determines the movement style between the original
    starting point and the destination point of an animation. It controls the rate
    of change during a tween; hence, a user has the time to see the effect, whether
    it be smooth, sudden, bouncy, or another kind of transition effect:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE319]'
  prefs: []
  type: TYPE_PRE
- en: In the previous example code, `duration` is in milliseconds, representing the
    amount of time for the animation to be active.
  prefs: []
  type: TYPE_NORMAL
- en: Also, there are additional built-in plugins in GSAP that provide extra capabilities
    for configuring the easing effect, such as `power`, `back`, `elastic`, and so
    on.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make the movement smooth to a certain degree, we use the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE320]'
  prefs: []
  type: TYPE_PRE
- en: 'Take a `bubble` effect, for instance – we can enable the smooth `elastic` easing-out
    effect by using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE321]'
  prefs: []
  type: TYPE_PRE
- en: 'Or, add `elastic` easing as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE322]'
  prefs: []
  type: TYPE_PRE
- en: With `ease`, we can make the same animation look completely different based
    on the style set. Next, we’ll look at `stagger`, another option that affects the
    look and feel of an animation.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying the look and feel with stagger
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have gone through how to animate a list of items using Vue transitions in
    the previous sections. Staggering is one of the animations we should take into
    consideration for a list of objects since it makes animation for this type of
    target easy and with an appropriate delay between each of the item’s animations.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, by assigning a value to the `stagger` property, we can create
    and apply some configuration options besides just the delay `duration` number
    (in milliseconds):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE323]'
  prefs: []
  type: TYPE_PRE
- en: You can use `repeat` to define how many times the animation should repeat. A
    negative number will make it repeat infinitely.
  prefs: []
  type: TYPE_NORMAL
- en: Using Timeline
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Timeline** is a schedule of tweens under your total control to define overlaps
    or gaps between the tweens. It’s useful when you need to control a group of animations
    according to an order, build a sequence of animations, chain the animations for
    a final callback, or modularize your animation code for reusability.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to use Timeline, you can create a `timeline` instance by using the
    built-in `gsap.timeline()` and set up the instance with a set of configurations,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE324]'
  prefs: []
  type: TYPE_PRE
- en: We will look briefly into the two main use cases of Timeline – sequencing and
    chaining.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a chain of animation effects by sequencing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'With similar core functionalities to GSAP, Timeline also provides `to()`, `from()`,
    and `fromTo()` methods. All animations by default can be sequenced one after another,
    with the option to force timing to control where or when things go using the `position`
    attribute, which is an optional argument, as seen in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE325]'
  prefs: []
  type: TYPE_PRE
- en: In this section, we looked at using the GSAP Timeline feature to schedule a
    series of animations all running one after the other, some with a gap and others
    with an overlap. In the next section, we’ll look further at sequencing animations
    with the concept of chaining.
  prefs: []
  type: TYPE_NORMAL
- en: Chaining
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As with sequencing, chaining arranges animation into an order. Instead of calling
    each animation separately with the instance method each time, it will be placed
    in a chain. All the special values that are used between the child tweens can
    be defined. In the instance created as `defaults`, or alternatively in the first
    call, get other timelines (list of animations) in the chain to inherit these values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE326]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also intercept the timing position of each chained timeline using `position`,
    as described earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE327]'
  prefs: []
  type: TYPE_PRE
- en: GSAP has very detailed documentation, so just visit [https://greensock.com/get-started](https://greensock.com/get-started)
    and start animating.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we’ll build on what we’ve learned about GSAP to make a
    message-viewing app with animated transitions.
  prefs: []
  type: TYPE_NORMAL
- en: Activity 8.01 – building a messages app with transitions and GSAP
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To access the code file for this activity, refer to [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter08/Activity8.01](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter08/Activity8.01)
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you will use CSS to write custom transitions, use transition
    groups and routes to set up more complex transitions, and use a third-party transition
    library such as GSAP to create animations and transitions in the app.
  prefs: []
  type: TYPE_NORMAL
- en: You will be creating a simple messages app that makes use of transition effects.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following steps will help you complete this activity:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new Vue application with `npm init vue@3` as a starting point, with
    Vue Router added.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `Messages` route (at `src/views/Messages.vue`) that renders two nested
    views: `Messages` (`src/views/MessageList.vue`), for displaying a list of messages,
    and `MessageEditor` (`src/views/MessageEditor.vue`), with one `textarea` and a
    `submit` button for creating a new message.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a `Message` route (at `src/views/Message.vue`) that renders a view of
    a single message with a given ID.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Register all the routes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a transition to the main `router-view` in the `src/App.vue` file with a
    simple transition name, `fade`, and the `out-in` mode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the transition to the nested `router-view` in `src/views/Messages.vue` by
    using custom transition classes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create an animation effect for zooming in on entering the route and zooming
    out on leaving the route.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create another animation effect for fading in on a leaving event.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a transition to the list of messages in `MessageList.vue` with a bounce-in
    effect.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use GSAP to animate the bounce-in effect.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a moving effect for an item when it appears.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When navigating from the **List** page to the **Editor** page, you should see
    the feed slide away to the left as the **Editor** page appears, as shown in *Figure
    8**.15*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 8.15 – Fade out when navigating from \uFEFFthe message list view to\
    \ the editor view](img/B18645_08_15.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 8.15 – Fade out when navigating from the message list view to the editor
    view
  prefs: []
  type: TYPE_NORMAL
- en: 'When navigating from the message view to the editor view, you should see the
    text input slide out to the left, as shown in *Figure 8**.16*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.16 – Fade out when navigating from the editor view to the message
    list view](img/B18645_08_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.16 – Fade out when navigating from the editor view to the message list
    view
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, the message list will appear with the numbers spinning with a bounce
    effect, as shown in *Figure 8**.17*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.17 – Bounce effect when displaying the message feed in the message
    list view](img/B18645_08_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.17 – Bounce effect when displaying the message feed in the message
    list view
  prefs: []
  type: TYPE_NORMAL
- en: 'When clicking on a specific message, **0** or **1** in our example, our list
    will slide out to the left and you should see the message content, as shown in
    *Figure 8**.18*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.18 – A single message view](img/B18645_08_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.18 – A single message view
  prefs: []
  type: TYPE_NORMAL
- en: At this point, you have learned about the basics of GSAP, such as tweens and
    Timeline. You also experimented with creating easing and staggering animations
    by combining transition and GSAP functionalities in your Vue component.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we explored the built-in support Vue.js has for transitions
    and animations, both for single and multiple components, and we saw how easy it
    is to set it up. At this point, you have created transition and animation effects
    for routes and components and witnessed all the basic features of Vue.js transitions:
    the custom transition class, group transition, and transition modes. Moreover,
    you also learned about other leading animation third-party libraries such as GSAP,
    and saw how to integrate them with your Vue application in order to get better
    animation effects on the web.'
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter focuses on another crucial topic for building a production-ready
    Vue application – state management and how components within an application communicate
    with one another using Pinia, a state management library.
  prefs: []
  type: TYPE_NORMAL
- en: 'Part 3: Global State Management'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this part, we will explore how data is managed and stored within a Vue application.
    We will start with examples of how to handle state in Vue natively, and then continue
    on to show how the Pinia library makes it easier.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following chapters in this section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 9*](B18645_09.xhtml#_idTextAnchor407), *The State of Vue State Management*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 10*](B18645_10.xhtml#_idTextAnchor426), *State Management with Pinia*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
