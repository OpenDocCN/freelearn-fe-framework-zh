["```js\n    import { Observable, map, of, tap, **catchError, throwError** } from 'rxjs'; \n    ```", "```js\n    import { HttpClient, HttpParams, **HttpErrorResponse** } from '@angular/common/http'; \n    ```", "```js\n    getProducts(limit?: number): Observable<Product[]> {\n      if (this.products.length === 0) {\n        const options = new HttpParams().set('limit', limit || 10);\n        return this.http.get<Product[]>(this.productsUrl, {\n          params: options\n        }).pipe(\n          map(products => {\n            this.products = products;\n            return products;\n          }),\n          **catchError((error: HttpErrorResponse) => {**\n            **console.error(error);**\n            **return throwError(() => error);**\n          **})**\n        );\n      }\n      return of(this.products);\n    } \n    ```", "```js\n    import { HttpClient, HttpParams, HttpErrorResponse, **HttpStatusCode** } from '@angular/common/http'; \n    ```", "```js\n    private handleError(error: HttpErrorResponse) {\n      let message = '';\n      switch(error.status) {\n        case HttpStatusCode.InternalServerError:\n          message = 'Server error';\n          break;\n        case HttpStatusCode.BadRequest:\n          message = 'Request error';\n          break;\n        default:\n          message = 'Unknown error';\n      }\n\n      console.error(message, error.error);\n\n      return throwError(() => error);\n    } \n    ```", "```js\n    getProducts(limit?: number): Observable<Product[]> {\n      if (this.products.length === 0) {\n        const options = new HttpParams().set('limit', limit || 10);\n        return this.http.get<Product[]>(this.productsUrl, {\n          params: options\n        }).pipe(\n          map(products => {\n            this.products = products;\n            return products;\n          }),\n          catchError(**this.handleError**)\n        );\n      }\n      return of(this.products);\n    } \n    ```", "```js\nprivate handleError(error: HttpErrorResponse) {\n  let message = '';\n  switch(error.status) {\n    **case 0:**\n      **message = 'Client error';**\n      **break;**\n    case HttpStatusCode.InternalServerError:\n      message = 'Server error';\n      break;\n    case HttpStatusCode.BadRequest:\n      message = 'Request error';\n      break;\n    default:\n      message = 'Unknown error';\n  }\n\n  console.error(message, error.error);\n\n  return throwError(() => error);\n} \n```", "```js\ngetProducts(limit?: number): Observable<Product[]> {\n  if (this.products.length === 0) {\n    const options = new HttpParams().set('limit', limit || 10);\n    return this.http.get<Product[]>(this.productsUrl, {\n      params: options\n    }).pipe(\n      map(products => {\n        this.products = products;\n        return products;\n      }),\n      **retry(2)**,\n      catchError(this.handleError)\n    );\n  }\n  return of(this.products);\n} \n```", "```js\n    import { HttpErrorResponse, HttpStatusCode } from '@angular/common/http';\n    import { ErrorHandler, Injectable } from '@angular/core'; \n    ```", "```js\n    @Injectable()\n    export class AppErrorHandler implements ErrorHandler {} \n    ```", "```js\n    handleError(error: any): void {\n      const err = error.rejection || error;\n      let message = '';\n\n      if (err instanceof HttpErrorResponse) {\n        switch(err.status) {\n          case 0:\n            message = 'Client error';\n            break;\n          case HttpStatusCode.InternalServerError:\n            message = 'Server error';\n            break;\n          case HttpStatusCode.BadRequest:\n            message = 'Request error';\n            break;\n          default:\n            message = 'Unknown error';\n        }\n      } else {\n        message = 'Application error';\n      }\n      console.error(message, err);\n    } \n    ```", "```js\n    import { ApplicationConfig, **ErrorHandler**, provideZoneChangeDetection } from '@angular/core'; \n    ```", "```js\n    import { AppErrorHandler } from './app-error-handler'; \n    ```", "```js\n    export const appConfig: ApplicationConfig = {\n      providers: [\n        provideZoneChangeDetection({ eventCoalescing: true }),\n        provideRouter(routes),\n        provideHttpClient(),\n        { provide: APP_SETTINGS, useValue: appSettings },\n        **{ provide: ErrorHandler, useClass: AppErrorHandler }**\n      ]\n    }; \n    ```", "```js\nimport { HttpErrorResponse, HttpInterceptorFn, HttpStatusCode } from '@angular/common/http';\nimport { inject } from '@angular/core';\nimport { AuthService } from './auth.service';\nimport { catchError, EMPTY, throwError } from 'rxjs';\nexport const authInterceptor: HttpInterceptorFn = (req, next) => {\n  const authService = inject(AuthService);\n  const authReq = req.clone({\n    setHeaders: { Authorization: 'myToken' }\n  });\n  return next(authReq).pipe(\n    catchError((error: HttpErrorResponse) => {\n      if (error.status === HttpStatusCode.Unauthorized) {\n        authService.logout();\n        return EMPTY;\n      } else {\n        return throwError(() => error);\n      }\n    })\n  );\n}; \n```", "```js\nNGWXYZ: {Error message}.<Link> \n```", "```js\n    import { **AfterViewInit**, Component, inject } from '@angular/core'; \n    ```", "```js\n    export class AppComponent **implements AfterViewInit** \n    ```", "```js\n    title = ''; \n    ```", "```js\n    ngAfterViewInit(): void {\n      this.title = this.settings.title;\n    } \n    ```", "```js\n     <h2>{{ **title** }}</h2> \n    ```", "```js\n    Application error RuntimeError: NG0100: ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value: ''. Current value: 'My e-shop'. Expression location: _AppComponent component. Find more at https://angular.dev/errors/NG0100 \n    ```"]