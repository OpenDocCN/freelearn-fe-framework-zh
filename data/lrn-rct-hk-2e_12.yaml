- en: '10'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '10'
- en: Using Community Hooks
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用社区钩子
- en: In the previous chapter, we learned about the various built-in React Hooks.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了各种内置的 React 钩子。
- en: In this chapter, we are going to learn about various Hooks provided by the community.
    First, we are going to learn about using Hooks to manage application state. Then,
    we will implement **debouncing** using Hooks. Next, we will learn about various
    utility Hooks. Finally, we are going to learn where to find more community Hooks.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习社区提供的各种钩子。首先，我们将学习如何使用钩子管理应用程序状态。然后，我们将使用钩子实现**防抖**。接下来，我们将学习有关各种实用钩子的内容。最后，我们将学习在哪里可以找到更多社区钩子。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Using Hooks to manage application state
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用钩子管理应用程序状态
- en: Debouncing with Hooks
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用钩子进行防抖
- en: Learning about various utility Hooks
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解各种实用钩子
- en: Finding more community Hooks
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 寻找更多社区钩子
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'A fairly recent version of Node.js should already be installed. The Node Package
    Manager (`npm`) also needs to be installed (it should come with Node.js). For
    more information on how to install Node.js, please check out their official website:
    [https://nodejs.org/](https://nodejs.org/).'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 应已安装相当新的 Node.js 版本。Node 包管理器 (`npm`) 也需要安装（它应该与 Node.js 一起提供）。有关如何安装 Node.js
    的更多信息，请访问他们的官方网站：[https://nodejs.org/](https://nodejs.org/)
- en: 'We are going to use **Visual Studio Code** (**VS Code**) for the guides in
    this book, but everything should work similarly in any other editor. For more
    information on how to install VS Code, please refer to their official website:
    [https://code.visualstudio.com](https://code.visualstudio.com)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本书的指南中使用 **Visual Studio Code** （**VS Code**），但在任何其他编辑器中一切都应该类似。有关如何安装 VS
    Code 的更多信息，请参阅他们的官方网站：[https://code.visualstudio.com](https://code.visualstudio.com)
- en: 'In this book, we use the following versions:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们使用以下版本：
- en: Node.js v22.14.0
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js v22.14.0
- en: '`npm` v10.9.2'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`npm` v10.9.2'
- en: Visual Studio Code v1.97.2
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio Code v1.97.2
- en: The versions mentioned in the preceding list are the ones used in the book.
    While installing a newer version should not be an issue, please note that certain
    steps might work differently on a newer version. If you are having an issue with
    the code and steps provided in this book, please try using the mentioned versions.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 上列出的版本是本书中使用的版本。虽然安装较新版本不应有问题，但请注意，某些步骤在较新版本上可能有所不同。如果您在本书中遇到代码和步骤问题，请尝试使用提到的版本。
- en: 'You can find the code for this chapter on GitHub: [https://github.com/PacktPublishing/Learn-React-Hooks-Second-Edition/tree/main/Chapter10](https://github.com/PacktPublishing/Learn-React-Hooks-Second-Edition/tree/main/Chapter10)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 GitHub 上找到本章的代码：[https://github.com/PacktPublishing/Learn-React-Hooks-Second-Edition/tree/main/Chapter10](https://github.com/PacktPublishing/Learn-React-Hooks-Second-Edition/tree/main/Chapter10)
- en: It is highly recommended that you write the code on your own. Do not simply
    run the code examples that are provided with the book. It is important to write
    the code yourself to be able to learn and understand it properly. However, if
    you run into any issues, you can always refer to the code example.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 强烈建议您自己编写代码。不要简单地运行书中提供的代码示例。自己编写代码对于正确学习和理解代码非常重要。然而，如果您遇到任何问题，您始终可以参考代码示例。
- en: Using Hooks to manage application state
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用钩子管理应用程序状态
- en: In this section we are going to learn about various community Hooks that help
    you manage application state. These Hooks are provided by [useHooks.com](https://www.useHooks.com),
    which is a collection of various useful Hooks packaged in a single library.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习各种社区钩子，这些钩子可以帮助您管理应用程序状态。这些钩子由 [useHooks.com](https://www.useHooks.com)
    提供，这是一个包含各种有用钩子的单一库。
- en: useLocalStorage
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: useLocalStorage
- en: The **Local Storage Hook** allows you to store and retrieve data using the browser’s
    **LocalStorage API**. The LocalStorage API is a way to persistently store information
    in the user’s browser. We can use this to, for example, store information about
    the currently logged in user.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**本地存储钩子**允许您使用浏览器的**LocalStorage API**存储和检索数据。LocalStorage API 是在用户浏览器中持久存储信息的一种方式。我们可以用它来存储有关当前登录用户的信息。'
- en: 'The `useLocalStorage` function has the following signature:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`useLocalStorage` 函数具有以下签名：'
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'As we can see, the Local Storage Hook accepts a key (which is used to identify
    the data in local storage) and an initial value (which is a fallback used when
    there is no item with the given key in local storage). It then returns an API
    similar to the **State Hook**: The data itself, and a function to update data
    in local storage.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，本地存储钩子接受一个键（用于在本地存储中标识数据）和一个初始值（当本地存储中没有给定键的项时用作回退）。然后它返回一个类似于**状态钩子**的API：数据本身，以及一个用于更新本地存储中数据的函数。
- en: In our case, we are simply going to store the username in local storage.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的案例中，我们只是简单地将用户名存储在本地存储中。
- en: 'In a real application you should instead store a token, such as a **JSON Web
    Token** (**JWT**), and ideally store it in a Cookie instead of local storage.
    However, this would require a server and some full-stack knowledge. To learn more
    about full-stack projects with React including real-world authentication, please
    refer to my book: *Modern Full-Stack React Projects*.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际应用中，你应该存储一个令牌，例如**JSON Web Token**（JWT），并且理想情况下将其存储在Cookie中而不是本地存储。然而，这需要服务器和一些全栈知识。要了解更多关于使用React的全栈项目，包括现实世界的身份验证，请参阅我的书籍：*现代全栈React项目*。
- en: 'Follow these steps to get started storing the username in local storage:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤开始将用户名存储在本地存储中：
- en: 'Copy the `Chapter09_1` folder to a new `Chapter10_1` folder by executing the
    following command:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行以下命令将`Chapter09_1`文件夹复制到新的`Chapter10_1`文件夹：
- en: '[PRE1]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Open the new `Chapter10_1` folder in VS Code.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在VS Code中打开新的`Chapter10_1`文件夹。
- en: 'Install the `useHooks` library, as follows:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下步骤安装`useHooks`库：
- en: '[PRE2]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '*Remove* the `src/contexts/UserContext.js` file. We are going to replace the
    `UserContext` with local storage now.'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*删除*`src/contexts/UserContext.js`文件。我们现在将用本地存储替换`UserContext`。'
- en: 'Edit `src/App.jsx` and *remove* the following imports:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`src/App.jsx`并删除以下导入：
- en: '[PRE3]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Instead, *replace* them with the following import:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 相反，*替换*它们为以下导入：
- en: '[PRE4]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '*Remove* the following State Hook:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*删除*以下状态钩子：'
- en: '[PRE5]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '*Replace* it with a Local Storage Hook:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*替换*它为本地存储钩子：'
- en: '[PRE6]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '*Remove* the `UserContext` by deleting the following highlighted lines:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*删除*`UserContext`通过删除以下高亮行：'
- en: '[PRE7]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Edit `src/components/user/UserBar.jsx` and *remove* the following imports:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`src/components/user/UserBar.jsx`并删除以下导入：
- en: '[PRE8]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '*Replace* them with an import to the `useLocalStorage` function:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*替换*它们为对`useLocalStorage`函数的导入：'
- en: '[PRE9]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Then, replace the Context Hook with a Local Storage Hook, as follows:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，按照以下方式将上下文钩子替换为本地存储钩子：
- en: '[PRE10]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Edit `src/components/user/Register.jsx` and *replace* all imports with the
    following:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`src/components/user/Register.jsx`并将所有导入替换为以下内容：
- en: '[PRE11]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now, *replace* the Context Hook with a Local Storage Hook:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，*替换*上下文钩子为本地存储钩子：
- en: '[PRE12]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Edit `src/components/user/Login.jsx` and *replace* all imports with the following:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`src/components/user/Login.jsx`并将所有导入替换为以下内容：
- en: '[PRE13]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Next, *replace* the Context Hook with a Local Storage Hook:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，*替换*上下文钩子为本地存储钩子：
- en: '[PRE14]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Edit `src/components/user/Logout.jsx` and *replace* all imports with the following:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`src/components/user/Logout.jsx`并将所有导入替换为以下内容：
- en: '[PRE15]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '*Replace* the Context Hook with a Local Storage Hook:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*替换*上下文钩子为本地存储钩子：'
- en: '[PRE16]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Edit `src/components/post/CreatePost.jsx` and *remove* the `useContext` import:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`src/components/post/CreatePost.jsx`并删除`useContext`导入：
- en: '[PRE17]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Then, *remove* the following import:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，*删除*以下导入：
- en: '[PRE18]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '*Replace* it with an import of `useLocalStorage`:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*替换*它为`useLocalStorage`的导入：'
- en: '[PRE19]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '*Replace* the Context Hook with a Local Storage Hook:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*替换*上下文钩子为本地存储钩子：'
- en: '[PRE20]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Edit `src/components/comment/CreateComment.jsx` and *replace* all imports with
    the following:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`src/components/comment/CreateComment.jsx`并将所有导入替换为以下内容：
- en: '[PRE21]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Then, *replace* the Context Hook with a Local Storage Hook:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，*替换*上下文钩子为本地存储钩子：
- en: '[PRE22]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Edit `src/components/comment/CommentList.jsx` and *remove* the `useContext`
    import:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`src/components/comment/CommentList.jsx`并删除`useContext`导入：
- en: '[PRE23]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '*Remove* the following import:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*删除*以下导入：'
- en: '[PRE24]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '*Replace* it with an import of `useLocalStorage`:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*替换*它为`useLocalStorage`的导入：'
- en: '[PRE25]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '*Replace* the Context Hook with a Local Storage Hook:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*替换*上下文钩子为本地存储钩子：'
- en: '[PRE26]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Now, run the blog app, as follows:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，按照以下步骤运行博客应用：
- en: '[PRE27]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'You will see that the registration, login and logout still work the same way
    as before, but there is now an added advantage: When refreshing the page, the
    user stays logged in until they press the **Logout** button!'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 你会发现注册、登录和注销仍然像以前一样工作，但现在有一个额外的优势：当刷新页面时，用户会保持登录状态，直到他们按下**注销**按钮！
- en: As you can see, the Local Storage Hook is a great way to persistently store
    information in the browser!
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，本地存储钩子是持久化存储浏览器中信息的一种极好方式！
- en: useHistoryState
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: useHistoryState
- en: 'The **History State Hook** is an extended version of the State Hook, adding
    functionality to undo / redo changes to the state. It has the following signature:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '**历史状态 Hook** 是状态 Hook 的扩展版本，增加了对状态撤销/重做更改的功能。它具有以下签名：'
- en: '[PRE28]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: We provide an initial state to it, and it returns the current `state`, a function
    to `set` the state, an `undo` function to undo changes to the state, a `redo`
    function to redo changes, a `clear` function to reset the state to the initial
    state, and `canUndo` and `canRedo` flags to tell whether it is possible to undo/redo
    the state.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们向其提供一个初始状态，并返回当前的`状态`，一个用于`设置`状态的函数，一个用于撤销状态更改的`撤销`函数，一个用于重做更改的`重做`函数，一个用于将状态重置到初始状态的`清除`函数，以及`canUndo`和`canRedo`标志来告知是否可以撤销/重做状态。
- en: 'The best way to understand this Hook is to try it out, so let’s get started
    implementing undo/redo functionality for our `CreatePost` component:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 理解这个 Hook 的最好方法是亲自尝试，所以让我们开始为我们的`CreatePost`组件实现撤销/重做功能：
- en: 'Edit `src/components/post/CreatePost.jsx` and import the `useHistoryState`
    function:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`src/components/post/CreatePost.jsx`并导入`useHistoryState`函数：
- en: '[PRE29]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Define a History State Hook for the post content, as follows:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为帖子内容定义一个历史状态 Hook，如下所示：
- en: '[PRE30]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Define a handler function for when the content is changed by the user:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个处理函数，当用户更改内容时使用：
- en: '[PRE31]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Define buttons to undo/redo and clear the content:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义撤销/重做和清除内容的按钮：
- en: '[PRE32]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: It is important to add `type='button'` to all the buttons here. Otherwise, pressing
    those buttons will submit the form.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里为所有按钮添加`type='button'`属性非常重要。否则，按下这些按钮将提交表单。
- en: 'Make the `<textarea>` a controlled element by providing the `value` and `onChange`
    handler:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过提供`value`和`onChange`处理函数将`<textarea>`变为受控元素：
- en: '[PRE33]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Lastly, inside the Action State Hook, call the `clear` function after the post
    was successfully created:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在创建帖子成功后，在 Action State Hook 中调用`清除`函数：
- en: '[PRE34]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: As we are dealing with a controlled element now, we need to clear its content
    ourselves. It is not done automatically on form submission anymore.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们现在处理的是一个受控元素，我们需要自己清除其内容。在表单提交时不再自动执行。
- en: 'Start the blog app, as follows:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下步骤启动博客应用：
- en: '[PRE35]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'You will see that there are now three new buttons, as shown in the following
    screenshot:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 你会看到现在有三个新的按钮，如下面的截图所示：
- en: '![Figure 10.1 – Providing undo/redo/clear buttons when creating a post](img/B31327_10_01.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.1 – 在创建帖子时提供撤销/重做/清除按钮](img/B31327_10_01.png)'
- en: Figure 10.1 – Providing undo/redo/clear buttons when creating a post
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.1 – 在创建帖子时提供撤销/重做/清除按钮
- en: Try typing in some text into the field, and you will be able to undo/redo changes
    made to it! However, you may have noticed that only a single character at a time
    is undone/redone. Next, we are going to implement debouncing, which means that
    our changes will only be added to the undo/redo history after a certain amount
    of time, not after every character that we entered.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试在字段中输入一些文本，你将能够撤销/重做对该字段所做的更改！然而，你可能已经注意到，每次只能撤销/重做单个字符。接下来，我们将实现防抖，这意味着我们的更改将在一定时间后添加到撤销/重做历史中，而不是在输入每个字符后。
- en: '**Example code**'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例代码**'
- en: The example code for this section can be found in the `Chapter10/Chapter10_1`
    folder. Check the `README.md` file inside the folder for instructions on how to
    set up and run the example.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 本节的示例代码可以在`Chapter10/Chapter10_1`文件夹中找到。请检查文件夹内的`README.md`文件，以获取设置和运行示例的说明。
- en: Debouncing with Hooks
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 防抖与 Hooks
- en: As we have seen in the previous section, when we press undo it undoes a single
    character at a time. Sometimes, we do not want to store every change in our undo
    history. To avoid storing every change, we need to implement debouncing, which
    means that the function that stores the `content` to the history state is only
    called after there are no changes for a certain amount of time.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在上一节中看到的，当我们按下撤销时，它每次撤销一个字符。有时，我们不想将每次更改都存储在撤销历史中。为了避免存储每次更改，我们需要实现防抖，这意味着将`content`存储到历史状态的函数只有在一定时间内没有更改后才会被调用。
- en: 'The `use-debounce` library provides a **Debounce Hook**, which can be used,
    as follows, for simple values:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`use-debounce`库提供了一个**防抖 Hook**，可以像以下这样用于简单值：'
- en: '[PRE36]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Now, if we change the text via `setText`, the `text` value will be updated instantly,
    but the `value` variable will only be updated after 1000 ms (1 second).
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们通过`setText`更改文本，`text`值将立即更新，但`value`变量将在1000毫秒（1秒）后更新。
- en: 'However, for our use case, this is not enough. We are going to need debounced
    callbacks in order to implement debouncing in combination with the History State
    Hook. Thankfully, the `use-debounce` library also provides the Debounced Callback
    Hook, which can be used as follows:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，对于我们的用例，这还不够。我们需要防抖回调来实现与历史状态 Hook 结合的防抖。幸运的是，`use-debounce` 库还提供了防抖回调 Hook，可以按照以下方式使用：
- en: '[PRE37]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Now, if we call `debouncedSet('text')`, the `text` value will be updated after
    1000 ms (1 second). If `debouncedSet` is called multiple times, the timeout will
    get reset every time, so that only after 1000 ms of no further call to the `debouncedSet`
    function, the `setText` function will be called.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们调用 `debouncedSet('text')`，`text` 值将在 1000 毫秒（1 秒）后更新。如果多次调用 `debouncedSet`，每次都会重置超时，只有在
    1000 毫秒内没有进一步调用 `debouncedSet` 函数后，`setText` 函数才会被调用。
- en: Debouncing changes in the post editor
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在帖子编辑器中防抖更改
- en: 'Now that we have learned about debouncing, we are going to implement it in
    combination with the History State Hook in our post editor. Follow these steps
    to get started:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了防抖，我们将在帖子编辑器中将它与历史状态 Hook 结合起来实现。按照以下步骤开始：
- en: 'Copy the `Chapter10_1` folder to a new `Chapter10_2` folder by executing the
    following command:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行以下命令将 `Chapter10_1` 文件夹复制到新的 `Chapter10_2` 文件夹：
- en: '[PRE38]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Open the new `Chapter10_2` folder in VS Code.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 VS Code 中打开新的 `Chapter10_2` 文件夹。
- en: 'Install the `use-debounce` library, as follows:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式安装 `use-debounce` 库：
- en: '[PRE39]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Edit `src/components/post/CreatePost.jsx` and import the `useState`, `useEffect`
    and `useDebouncedCallback` functions:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑 `src/components/post/CreatePost.jsx` 并导入 `useState`、`useEffect` 和 `useDebouncedCallback`
    函数：
- en: '[PRE40]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Define a new State Hook that will contain the controlled input value:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个新的状态 Hook，它将包含受控输入值：
- en: '[PRE41]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Then, define a **Debounced Callback Hook**, which will set the History State
    after 200 ms:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，定义一个**防抖回调 Hook**，它将在 200 毫秒后设置历史状态：
- en: '[PRE42]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Next, we have to define an Effect Hook, which will trigger whenever the History
    State changes, cancel the current debounce, and set the controlled input value
    to the current value from the History State Hook:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们必须定义一个 Effect Hook，它将在历史状态更改时触发，取消当前的防抖，并将受控输入值设置为历史状态 Hook 的当前值：
- en: '[PRE43]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Adjust the handler function to trigger the `setContent` function to update
    the controlled input value, and the `debounced` function to update the History
    State:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调整处理函数以触发 `setContent` 函数来更新受控输入值，以及 `debounced` 函数来更新历史状态：
- en: '[PRE44]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Finally, adjust the `textarea` to use `content` instead of `state` for its
    value:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，调整 `textarea` 以使用 `content` 而不是 `state` 作为其值：
- en: '[PRE45]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Start the blog app, as follows:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式启动博客应用：
- en: '[PRE46]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: We now instantly set the controlled input value, but we do not store anything
    to the History State yet. After the debouncing callback triggers (after 200 ms),
    we store the current value to the History State. Whenever the History State updates,
    for example, when we press the **Undo**/**Redo** buttons, we cancel the current
    debouncing to avoid overwriting the value after undoing/redoing. Then, we set
    the controlled input value to the new value of the History State Hook.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在立即设置受控输入值，但还没有将其存储到历史状态中。在防抖回调触发（200 毫秒后），我们将当前值存储到历史状态中。每当历史状态更新时，例如，当我们按下
    **撤销**/** 重做**按钮时，我们将取消当前的防抖以避免在撤销/重做后覆盖值。然后，我们将受控输入值设置为历史状态 Hook 的新值。
- en: If we now type some text into our editor, we can see that the **Undo** button
    only activates after a while. If we now press the **Undo** button, we can see
    that we will not undo character-by-character, but more text at once. As we can
    see, undo/redo works very well together with debouncing!
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在在我们的编辑器中输入一些文本，我们可以看到 **撤销** 按钮需要一段时间才会激活。如果我们现在按下 **撤销** 按钮，我们可以看到我们不会逐字符撤销，而是会一次性撤销更多文本。正如我们所看到的，撤销/重做与防抖结合得非常好！
- en: Difference between debounced and deferred values
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 防抖值与延迟值之间的区别
- en: You may remember that in [*Chapter 9*](Chapter_09.xhtml#_idTextAnchor200), *Advanced
    Hooks Provided by React*, we used the **Deferred Value Hook** to wait for the
    new search results to come in before showing them, letting us avoid showing a
    loading screen while waiting for new results. While we could have used debouncing
    there as well, there are certain downsides to using debounce for this use case.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能记得，在 [*第 9 章*](Chapter_09.xhtml#_idTextAnchor200) 中，*React 提供的高级 Hooks*，我们使用了**延迟值
    Hook**来等待新的搜索结果到来后再显示，这样我们就可以避免在等待新结果时显示加载界面。虽然我们也可以在那里使用防抖，但使用防抖在这个用例中也有一些缺点。
- en: The main difference between debounced and deferred values is that when debouncing,
    we define a fixed time interval after which the value is updated. Deferred values,
    however, will keep attempting to update after every change (and cancel them if
    a new change comes in). Thus, deferred values are not limited to a fixed time
    interval, but instead limited by the speed at which the requests can be processed.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 消抖和延迟值之间的主要区别在于，当消抖时，我们定义一个固定的时间间隔，在此之后值被更新。然而，延迟值会在每次更改后尝试更新（如果出现新的更改，则取消更新）。因此，延迟值不是限制在固定的时间间隔内，而是限制在请求可以处理的速度上。
- en: '**Example code**'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例代码**'
- en: The example code for this section can be found in the `Chapter10/Chapter10_2`
    folder. Check the `README.md` file inside the folder for instructions on how to
    set up and run the example.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 本节示例代码位于`Chapter10/Chapter10_2`文件夹中。请检查文件夹内的`README.md`文件，了解如何设置和运行示例。
- en: Learning about various utility Hooks
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解各种实用钩子
- en: We are now going to learn about a selection of some useful utility Hooks provided
    by the useHooks library.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将学习一些由useHooks库提供的有用实用钩子。
- en: useCopyToClipboard
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: useCopyToClipboard
- en: The **Copy To Clipboard Hook** makes it easy to copy text to the clipboard across
    various browsers. If available, it uses the modern `navigator.clipboard.writeText`
    API. Otherwise, it falls back to the traditional `document.execCommand("copy")`
    method, ensuring that the functionality works for older and newer browsers. This
    Hook is also provided by [](https://www.useHooks.com).
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '**复制到剪贴板钩子**使得在不同浏览器之间复制文本变得容易。如果可用，它使用现代的`navigator.clipboard.writeText` API。否则，它回退到传统的`document.execCommand("copy")`方法，确保该功能对旧版和新版浏览器都有效。此钩子也由[https://www.useHooks.com](https://www.useHooks.com)提供。'
- en: 'The `useCopyToClipboard` function has the following signature:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '`useCopyToClipboard`函数具有以下签名：'
- en: '[PRE47]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: It provides a similar API to the State Hook, with a `copyToClipboard` function
    that accepts a string and copies it to the clipboard, as well as storing it in
    the `copiedText` value. This value can also be used to check if we successfully
    copied the text to the clipboard.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 它提供了一个与State Hook类似的API，其中`copyToClipboard`函数接受一个字符串并将其复制到剪贴板，同时存储在`copiedText`值中。此值也可以用来检查我们是否成功将文本复制到剪贴板。
- en: 'Let’s now use the Hook to implement a way of copying a link to blog posts:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用钩子来实现复制博客文章链接的方法：
- en: 'Copy the `Chapter10_2` folder to a new `Chapter10_3` folder by executing the
    following command:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行以下命令将`Chapter10_2`文件夹复制到新的`Chapter10_3`文件夹：
- en: '[PRE48]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Open the new `Chapter10_3` folder in VS Code.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在VS Code中打开新的`Chapter10_3`文件夹。
- en: Create a new `src/components/post/CopyLink.jsx` file.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的`src/components/post/CopyLink.jsx`文件。
- en: 'Inside it, import the `useCopyToClipboard` function:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在其中，导入`useCopyToClipboard`函数：
- en: '[PRE49]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Define a checkmark and link emoji for the copy link button:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为复制链接按钮定义一个勾选和链接表情符号：
- en: '[PRE50]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Then, define a component that accepts a `url`:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，定义一个接受`url`的组件：
- en: '[PRE51]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Inside the component, define the Copy To Clipboard Hook, as follows:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在组件内部，定义复制到剪贴板钩子，如下所示：
- en: '[PRE52]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Now, render a button that triggers the `copyToClipboard` function:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，渲染一个触发`copyToClipboard`函数的按钮：
- en: '[PRE53]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'If the link was already copied, show the checkmark symbol, otherwise the link
    symbol:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果链接已被复制，显示勾选符号，否则显示链接符号：
- en: '[PRE54]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Edit `src/components/post/Post.jsx` and import the `CopyLink` component:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`src/components/post/Post.jsx`并导入`CopyLink`组件：
- en: '[PRE55]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Render the component next to the title of the blog post, passing the current
    URL to it:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在博客文章标题旁边渲染该组件，并将当前URL传递给它：
- en: '[PRE56]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Start the blog app, as follows:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式启动博客应用：
- en: '[PRE57]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Click on one of the **View post >** links to go to the single post page. You
    will see a button with the link emoji now:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击一个**查看帖子 >**链接进入单个帖子页面。您将看到一个带有链接表情符号的按钮：
- en: '![Figure 10.2 – Showing a “copy link” button next to the blog post title](img/B31327_10_02.png)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![图10.2 – 在博客文章标题旁边显示“复制链接”按钮](img/B31327_10_02.png)'
- en: Figure 10.2 – Showing a “copy link” button next to the blog post title
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.2 – 在博客文章标题旁边显示“复制链接”按钮
- en: 'After clicking this button, it will show the checkmark emoji and copy the current
    URL to your clipboard:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击此按钮后，它将显示勾选表情符号并将当前URL复制到您的剪贴板：
- en: '![Figure 10.3 – The state of the button after successfully copying the link](img/B31327_10_03.png)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![图10.3 – 成功复制链接后按钮的状态](img/B31327_10_03.png)'
- en: Figure 10.3 – The state of the button after successfully copying the link
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.3 – 成功复制链接后按钮的状态
- en: Try pasting the link somewhere to see if it worked!
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试将链接粘贴到某处，看看是否成功！
- en: useHover
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: useHover
- en: 'The **Hover Hook** tracks whether an element is being hovered over by the user.
    It has the following signature:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '**悬停Hook**跟踪用户是否悬停在元素上。它具有以下签名：'
- en: '[PRE58]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: As we can see, it returns a `ref`, which we need to pass to the element that
    we want to track the hover state of. It also returns a `hovering` state, which
    will be `true` if the user is hovering over the element, and `false` if they are
    not. This Hook is also provided by [useHooks.com](https://www.useHooks.com).
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，它返回一个`ref`，我们需要将其传递给我们要跟踪悬停状态的元素。它还返回一个`hovering`状态，如果用户悬停在元素上，则为`true`，如果没有，则为`false`。此Hook也由[useHooks.com](https://www.useHooks.com)提供。
- en: 'Let’s now use the Hover Hook to show a hint when the user hovers over the copy
    link button:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们使用悬停Hook在用户悬停在复制链接按钮上时显示提示：
- en: 'Edit `src/components/post/CopyLink.jsx` and import the `useHover` function:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`src/components/post/CopyLink.jsx`并导入`useHover`函数：
- en: '[PRE59]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Then, define a Hover Hook:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，定义一个悬停Hook：
- en: '[PRE60]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Create a Fragment, so that we can display a message next to the button:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个Fragment，以便我们可以在按钮旁边显示一条消息：
- en: '[PRE61]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Pass the `ref` of the Hover Hook to the button:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将悬停Hook的`ref`传递给按钮：
- en: '[PRE62]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'If we are hovering over the button, show a small info text, as follows:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们悬停在按钮上，将显示如下的小信息文本：
- en: '[PRE63]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: In real world projects, most hover effects in the UI would be done with CSS.
    A real world example for using the Hover Hook would be to send events to an analytics
    API on hover. However, this would be a significantly longer example than showing
    a text on hover.
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在实际项目中，UI中的大多数悬停效果都会使用CSS完成。使用悬停Hook的一个实际示例是在悬停时向分析API发送事件。然而，这会比显示悬停文本的示例长得多。
- en: 'Try hovering over the copy link button now, and you will see the info text:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 现在尝试悬停在复制链接按钮上，您将看到信息文本：
- en: '![Figure 10.4 – Showing an info text when hovering over the button](img/B31327_10_04.png)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![图10.4 – 鼠标悬停在按钮上时显示信息文本](img/B31327_10_04.png)'
- en: Figure 10.4 – Showing an info text when hovering over the button
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.4 – 鼠标悬停在按钮上时显示信息文本
- en: '**Example code**'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例代码**'
- en: The example code for this section can be found in the `Chapter10/Chapter10_3`
    folder. Check the `README.md` file inside the folder for instructions on how to
    set up and run the example.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 本节的示例代码可以在`Chapter10/Chapter10_3`文件夹中找到。请检查文件夹内的`README.md`文件，以获取设置和运行示例的说明。
- en: Finding more community Hooks
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查找更多社区Hooks
- en: 'We have already learned about the collection of Hooks provided by [useHooks.com](https://www.useHooks.com).
    However, there are many more Hooks that are provided by the community. You can
    find a searchable list of various Hooks on the following page: [https://nikgraf.github.io/react-hooks/](https://nikgraf.github.io/react-hooks/).'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经了解了由[useHooks.com](https://www.useHooks.com)提供的Hooks集合。然而，社区还提供了许多其他的Hooks。您可以在以下页面上找到各种Hooks的可搜索列表：[https://nikgraf.github.io/react-hooks/](https://nikgraf.github.io/react-hooks/)。
- en: To give you an idea of which other Hooks are out there, the following features
    are provided by community Hooks. We now list a couple more interesting Hooks provided
    by the community.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让您了解还有哪些其他Hooks，以下功能是由社区Hooks提供的。我们现在列出社区提供的几个更有趣的Hooks。
- en: '`use-events` ([https://github.com/sandiiarov/use-events](https://github.com/sandiiarov/use-events)):
    Various JavaScript events that have been turned into Hooks, such as mouse position,
    touch events, clicking outside, and so on.'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`use-events` ([https://github.com/sandiiarov/use-events](https://github.com/sandiiarov/use-events))：已转换为Hooks的各种JavaScript事件，例如鼠标位置、触摸事件、点击外部等。'
- en: '`react-use` ([https://github.com/streamich/react-use](https://github.com/streamich/react-use)):
    Various Hooks to deal with sensors (`useBattery`, `useIdle`, `useGeolocation`,
    and so on), UI (`useAudio`, `useCss`, `useFullscreen`, and so on), animations
    (`useSpring`, `useTween`, `useRaf`, and so on), and side effects (`useAsync`,
    `useDebounce`, `useFavicon`, and so on)'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`react-use` ([https://github.com/streamich/react-use](https://github.com/streamich/react-use))：处理传感器（`useBattery`、`useIdle`、`useGeolocation`等）、UI（`useAudio`、`useCss`、`useFullscreen`等）、动画（`useSpring`、`useTween`、`useRaf`等）和副作用（`useAsync`、`useDebounce`、`useFavicon`等）的各种Hooks。'
- en: Of course, there are many more Hooks to be found on GitHub and npm.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，GitHub和npm上还有更多Hooks可以找到。
- en: Summary
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we first learned how to persistently store data in the browser
    by using the LocalStorage API via the Local Storage Hook. Then, we implemented
    undo/redo functionality in the `CreatePost` component using the History State
    Hook. Next, we learned about debouncing and implemented it using the Debounced
    Callback Hook. Then, we learned about some utility Hooks to copy to clipboard
    and handle hover states. Finally, we learned where to find more community Hooks.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们首先学习了如何通过LocalStorage API和Local Storage Hook在浏览器中持久化存储数据。然后，我们使用History
    State Hook在`CreatePost`组件中实现了撤销/重做功能。接下来，我们学习了防抖并使用Debounced Callback Hook实现了它。然后，我们学习了关于一些实用Hooks，用于复制到剪贴板和处理悬停状态。最后，我们学习了在哪里可以找到更多的社区Hooks。
- en: In the next chapter, we are going to learn about the rules of Hooks, teaching
    us the basics we need to know before developing our own custom Hooks.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习Hooks的规则，这将教会我们在开发自己的自定义Hooks之前需要了解的基本知识。
- en: Questions
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'To recap what we have learned in this chapter, try to answer the following
    questions:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 为了回顾我们在本章中学到的内容，尝试回答以下问题：
- en: Which Hook can we use to persistently store information in the browser?
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以使用哪个Hook在浏览器中持久化存储信息？
- en: Which Hook can we use to implement undo/redo functionality?
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以使用哪个Hook来实现撤销/重做功能？
- en: What is debouncing? Why do we need to do it?
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是防抖？为什么我们需要这样做？
- en: Which Hook can we use for debouncing?
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以使用哪个Hook进行防抖？
- en: How does debouncing values differ from deferring values?
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 防抖值与延迟值有何不同？
- en: Where can we find more Hooks?
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在哪里可以找到更多的Hooks？
- en: Further reading
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'If you are interested in more information about the concepts that we have learned
    in this chapter, take a look at the following book and links:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对我们在本章中学到的概念感兴趣，请查看以下书籍和链接：
- en: '*Modern Full-Stack React Projects* by Daniel Bugl'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*《现代全栈React项目》* by Daniel Bugl'
- en: "useHooks website: [https://usehooks.com](https://useho\uFEFFoks.com)"
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: "useHooks网站：[https://usehooks.com](https://useho\uFEFFoks.com)"
- en: 'use-debounce library documentation: [https://github.com/xnimorz/use-debounce](https://github.com/xnimorz/use-debounce)'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: use-debounce库文档：[https://github.com/xnimorz/use-debounce](https://github.com/xnimorz/use-debounce)
- en: 'Collection of React Hooks: [https://nikgraf.github.io/react-hooks/](https://nikgraf.github.io/react-hooks/)'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: React Hooks集合：[https://nikgraf.github.io/react-hooks/](https://nikgraf.github.io/react-hooks/)
- en: Learn more on Discord
  id: totrans-231
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Discord上了解更多
- en: 'To join the Discord community for this book – where you can share feedback,
    ask questions to the author, and learn about new releases – follow the QR code
    below:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 要加入这本书的Discord社区——在那里您可以分享反馈、向作者提问，并了解新版本——请扫描下面的二维码：
- en: '[https://packt.link/wnXT0](Chapter_10.xhtml)'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/wnXT0](Chapter_10.xhtml)'
- en: '![](img/image_%283%29.png)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_%283%29.png)'
