["```js\nnpm install -g typescript\n```", "```js\nsudo npm install -g typescript\n```", "```js\ntsc -v\n```", "```js\n<!-- Code 2.1.html -->\n<html>\n <head>\n   <title>Example 2.1: Hello World</title>\n   <!-- Include Bootstrap and custom style -->\n   <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\">\n   <link rel=\"stylesheet\" href=\"2.1.css\">\n </head>\n <body>\n   <div class=\"container\">\n     <div class=\"col-md-4 col-md-offset-4 main\">\n       <h3 class=\"messenger\"></h3>\n     </div>\n     <div class=\"col-md-4 col-md-offset-4 main\">\n       <input type=\"text\" class=\"form-control\">\n       <button class=\"button\">Greet</button>\n     </div>\n   </div>\n   <!-- Include JavaScript file -->\n   <script src=\"img/2.1.js\"></script>\n </body>\n</html>\n```", "```js\n// Code 2.1.ts\n(function() {\n var button = document.querySelector('.button');\n var input = document.querySelector('.form-control');\n var messenger = document.querySelector('.messenger');\n\n button.addEventListener('click', handleButtonClick);\n\n function handleButtonClick() {\n   if(input.value.length === 0) {\n     alert('Please enter your name');\n     return;\n   }\n   // Update messanger \n   messenger.innerHTML = 'Hello, ' + input.value;\n }\n})();\n```", "```js\ntsc 2.1.ts\n```", "```js\nnpm install -g serve\n```", "```js\nserve --port 5000\n```", "```js\nnpm init -y\n```", "```js\n\"scripts\": {\"start\": \"tsc 2.1.ts -w & serve --port 5000\"},\n```", "```js\nvar firstName: string;\n```", "```js\nvar name: string = 'John';\nconsole.log(name); // John\n\nvar age: number = 18;\nconsole.log(age); // 18\n\nvar siblings: string[] = ['Lisa', 'Anna', 'Wili'];\nconsole.log(siblings); // ['Lisa', 'Anna', 'Wili']\n\n// OR\n\nvar siblings: Array<string> = ['Lisa', 'Anna', 'Wili'];\nconsole.log(siblings); // ['Lisa', 'Anna', 'Wili']\n\n// any type supports all other types\n// and useful for objects when we are lazy\n// to make types with interfaces/class for them\n\nvar attributes: any = {legs: 2, hands: 2, happy: true}\n```", "```js\nclass Base {\n  name: string = 'John'\n}\n\nclass Derived extends Base {\n  gender: string = 'male'\n}\n\n(new Base()).name // John\n(new Base()).gender // throws an error\n```", "```js\n// Code 2.2.ts\n(function() {\n   // 1\\. Button type is Element\n   var button: Element = document.querySelector('.button');\n   // 2\\. Input type is HTMLInputElement and we cast accordingly\n   var input: HTMLInputElement = <HTMLInputElement>document.querySelector('.form-control');\n   // 3\\. Messanger is HTMLElement and we cast accordingly\n   var messenger: HTMLElement = document.querySelector('.messenger') as HTMLElement;\n\n   // 4\\. The handler now takes a function and returns another function (callback)\n   button.addEventListener('click', handleButtonClick('Hello,', 'Please enter your name'));\n\n   function handleButtonClick(prefix, noNameErrMsg) {\n     // Logic here\n     // Should return a function \n   }\n})()\n```", "```js\n// Code 2.2.ts\nfunction handleButtonClick(prefix, noNameErrMsg) {\n   return function() {\n     if(input.value.length === 0) {\n       if(typeof noNameErrMsg !== 'string') {\n         alert('Something went wrong, and no valid error msg was provided')\n         return;\n       }\n       alert(noNameErrMsg);\n       return;\n   }\n\n   if(typeof prefix !== 'string') {\n     alert('Improper types for prefix or error msg')\n   }\n\n   messenger.innerHTML = prefix + input.value;\n\n }\n```", "```js\n// Code 2.3.ts\nfunction handleButtonClick(prefix: string, noNameErrMsg: string) {\n  return function(e: MouseEvent) {\n    if(input.value.length === 0) {\n      alert(noNameErrMsg);\n      return;\n    }\n\n    messenger.innerHTML = prefix + input.value;\n\n  }\n}\n```", "```js\n<!-- Code 2.4.html -->\n<div class=\"container\">\n  <div class=\"col-md-6 col-md-offset-3 main\">\n    <div class=\"row\">\n      <div class=\"col-md-4\">\n        <button id=\"decBtn\">Decrement--</button>\n      </div>\n      <div class=\"col-md-4 text-center\" id=\"counter\">0</div>\n      <div class=\"col-md-4\">\n        <button id=\"incBtn\">Inccrement++</button>\n      </div>\n    </div>\n </div>\n</div>\n```", "```js\n// Code 2.4.ts\nclass DOM {\n  private _incBtn: HTMLElement;\n  private _decBtn: HTMLElement;\n  private _counter: HTMLElement;\n\n  constructor() {\n    this._incBtn = this._getDOMElement('#incBtn');\n    this._decBtn = this._getDOMElement('#decBtn');\n    this._counter = this._getDOMElement('#counter');\n  }\n\n  public _getDOMElement (selector: string) : HTMLElement {\n    return document.querySelector(selector) as HTMLElement;\n  }\n\n  get incBtn(): HTMLElement {\n    return this._incBtn;\n  }\n\n  get decBtn(): HTMLElement {\n    return this._decBtn;\n  }\n\n  get counter(): number {\n    return parseInt(this._counter.innerText);\n  }\n\n  set counter(value: number) {\n    this._counter.innerText = value.toString();\n  }\n}\n```", "```js\n\"start\": \"tsc 2.4.ts -w -t es5 & serve --port 5000\"\n```", "```js\n// Code 2.4.ts\nclass DOMEvents {\n  private register(htmlElement: HTMLElement, type:string, callback: (e: Event) => void): void {\n    htmlElement.addEventListener(type, callback)\n  }\n}\n```", "```js\n// Code 2.4.ts\nclass App {\n  constructor(public dom:DOM, public domEvents: DOMEvents) {\n    this.setupEvents()\n  }\n  private setupEvents() {\n    const buttons = [this.dom.incBtn, this.dom.decBtn];\n    buttons.forEach(button => {\n      this.domEvents.register(button, 'click', this.handleClicks.bind(this))\n    })\n  }\n  private handleClicks(e: MouseEvent): void {\n    const {id} = <HTMLElement>e.target;\n    if(id === 'incBtn') {\n      this.incrementCounter();\n    } else {\n      this.decrementCounter();\n    }\n  }\n\n  private incrementCounter() {\n    this.dom.counter++\n  }\n\n  private decrementCounter () {\n    this.dom.counter--\n  }\n}\n```", "```js\n// Code 2.4.ts\n(new App(new DOM, new DOMEvents))\n```", "```js\nvar fooFunc = (arg1) => {\n    return arg1\n}\n```", "```js\nconst {id} = <HTMLElement>e.target;\n```"]