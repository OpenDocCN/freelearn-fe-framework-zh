- en: Chapter 5. Event Methods
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 5 章 事件方法
- en: Woman, I am bound to you
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 女人，我与你结缘
- en: ''
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: What will I do?
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我会做什么？
- en: ''
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: —Devo,
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: —— Devo，
- en: ''
  id: totrans-6
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '"The Rope Song"'
  id: totrans-7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “绳子之歌”
- en: In this chapter, we'll closely examine each of the available event methods in
    turn. These methods are used to register behaviors to take effect when the user
    interacts with the browser, and to further manipulate those registered behaviors.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将依次仔细研究每个可用的事件方法。这些方法用于在用户与浏览器进行交互时注册行为，并进一步操作这些注册的行为。
- en: Event Handler Attachment
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件处理程序附加
- en: The following methods are the building blocks of jQuery's event handling module.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 以下方法是 jQuery 事件处理模块的构建块。
- en: .bind()
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .bind()
- en: '| Attaches a handler to an event for the elements'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '| 为元素附加事件处理程序'
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '|'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数
- en: 'eventType: A string containing a JavaScript event type, such as `click` or
    `submit`'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: eventType：包含 JavaScript 事件类型的字符串，如 `click` 或 `submit`。
- en: 'eventData (optional): A map of data that will be passed to the event handler'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: eventData（可选）：将传递给事件处理程序的数据映射
- en: 'handler: A function to execute each time the event is triggered'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理程序：每次触发事件时执行的函数
- en: Return Value
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: The jQuery object, for chaining purposes.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 对象，用于链接目的。
- en: Description
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: 'The `.bind()` method is the primary means of attaching behavior to a document.
    All JavaScript event types are allowed for *eventType*; the following are cross‑platform
    and recommended:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`.bind()` 方法是将行为附加到文档的主要方法。所有 JavaScript 事件类型都允许用于 *eventType*；以下是跨平台和推荐的：'
- en: '`blur`'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`blur`'
- en: '`change`'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`change`'
- en: '`click`'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`click`'
- en: '`dblclick`'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dblclick`'
- en: '`error`'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`error`'
- en: '`focus`'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`focus`'
- en: '`keydown`'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`keydown`'
- en: '`keypress`'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`keypress`'
- en: '`keyup`'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`keyup`'
- en: '`load`'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`load`'
- en: '`mousedown`'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mousedown`'
- en: '`mousemove`'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mousemove`'
- en: '`mouseout`'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mouseout`'
- en: '`mouseover`'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mouseover`'
- en: '`mouseup`'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mouseup`'
- en: '`resize`'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`resize`'
- en: '`scroll`'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scroll`'
- en: '`select`'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`select`'
- en: '`submit`'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`submit`'
- en: '`unload`'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unload`'
- en: The jQuery library provides shortcut methods for binding each of these event
    types, such as `.click()` for `.bind('click')`. Descriptions of each event type
    can be found in the description of its shortcut method.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 库提供了绑定每种事件类型的快捷方法，例如 `.click()` 用于 `.bind('click')`。每种事件类型的描述可以在其快捷方法的描述中找到。
- en: 'When an event reaches an element, all handlers bound to that event type for
    the element are fired. If there are multiple handlers registered, they will always
    execute in the order in which they were bound. After all handlers have executed,
    the event continues along the normal event propagation path. For a full discussion
    of event propagation, see *Learning jQuery* or the W3C specification at [http://www.w3.org/TR/DOM-Level-2-Event/](http://www.w3.org/TR/DOM-Level-2-Event/).
    A basic usage of `.bind()` is:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 当事件到达元素时，绑定到该元素的该事件类型的所有处理程序都会被触发。如果有多个处理程序已注册，则它们将始终按照绑定它们的顺序执行。在所有处理程序执行完毕后，事件会沿着正常的事件传播路径继续。有关事件传播的完整讨论，请参阅
    *Learning jQuery* 或 [http://www.w3.org/TR/DOM-Level-2-Event/](http://www.w3.org/TR/DOM-Level-2-Event/)
    上的 W3C 规范。`.bind()` 的基本用法如下：
- en: '[PRE1]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This code will cause the element with an ID of `foo` to respond to the `click`
    event; when a user clicks inside this element thereafter, the alert will be shown.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码将导致具有 `foo` ID 的元素对 `click` 事件做出响应；以后用户点击此元素内部时，警报将显示。
- en: '**Event Handlers**'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**事件处理程序**'
- en: 'The `handler` parameter takes a callback function, as shown; within the handler,
    the keyword `this` is set to the DOM element to which the handler is bound. To
    make use of the element in jQuery, it can be passed to the normal `$()` function.
    For example:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`handler` 参数采用回调函数，如所示；在处理程序内部，关键字 `this` 设置为处理程序绑定的 DOM 元素。要在 jQuery 中使用该元素，可以将其传递给正常的
    `$()` 函数。例如：'
- en: '[PRE2]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: After this code is executed, when the user clicks inside the element with an
    ID of `foo`, its text contents will be shown as an alert.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 执行此代码后，当用户点击具有 `foo` ID 的元素内部时，其文本内容将显示为警报。
- en: '**The Event Object**'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**事件对象**'
- en: The callback function takes a single parameter; when the handler is called the
    JavaScript event object will be passed through it.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 回调函数接受一个参数；当处理程序被调用时，JavaScript 事件对象将通过它传递。
- en: The event object is often unneccessary and the parameter is omitted, as sufficient
    context is usually available when the handler is bound to know exactly what needs
    to be done when the handler is triggered. However, at times it becomes necessary
    to gather more information about the user's environment at the time the event
    was initiated. JavaScript provides information such as `.shiftKey` (whether the
    *shift* key was held down at the time), `.offsetX` (the *x* coordinate of the
    mouse cursor within the element), and `.type` (the kind of event this is).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 事件对象通常是不必要的，参数被省略，因为当处理程序绑定时通常可用足够的上下文来准确知道触发处理程序时需要执行什么操作。但是，有时需要收集有关用户在事件发生时环境的更多信息。JavaScript
    提供了诸如`.shiftKey`（是否在按下*shift*键时按住）、`.offsetX`（元素内鼠标光标的*x*坐标）和`.type`（事件类型）等信息。
- en: 'Some of the event object''s attributes and methods are not available on every
    platform. If the event is handled by a jQuery event handler, however, the library
    standardizes certain attributes so that they can be safely used on any browser.
    In particular:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 事件对象的一些属性和方法在每个平台上都不可用。但是，如果事件由 jQuery 事件处理程序处理，那么库会标准化某些属性，以便它们可以在任何浏览器上安全使用。特别是：
- en: '`.target`: This attribute represents the DOM element that initiated the event.
    It is often useful to compare `event.target` to `this` in order to determine if
    the event is being handled due to event bubbling.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.target`: 此属性表示触发事件的 DOM 元素。通常比较`event.target`和`this`很有用，以确定事件是否由于事件冒泡而处理。'
- en: '`.pageX`: This attribute contains the *x* coordinate of the mouse cursor relative
    to the left edge of the page.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.pageX`: 此属性包含鼠标光标相对于页面左边缘的*x*坐标。'
- en: '`.pageY`: This attribute contains the *y* coordinate of the mouse cursor relative
    to the top edge of the page.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.pageY`: 此属性包含鼠标光标相对于页面顶部边缘的*y*坐标。'
- en: '`.preventDefault()`: If this method is called, the default action of the event
    will not be triggered. For example, clicked anchors will not take the browser
    to a new URL.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.preventDefault()`: 如果调用此方法，则不会触发事件的默认操作。例如，点击的锚点不会将浏览器带到新的 URL。'
- en: '`.stopPropagation()`: This method prevents the event from bubbling up the DOM
    tree looking for more event handlers to trigger.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.stopPropagation()`: 这个方法阻止事件冒泡到 DOM 树上寻找更多的事件处理程序来触发。'
- en: Returning `false` from a handler is equivalent to calling both `.preventDefault()`
    and `.stopPropagation()` on the event object.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 返回`false`表示处理程序相当于在事件对象上调用`.preventDefault()`和`.stopPropagation()`。
- en: 'Using the event object in a handler looks like this:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理程序中使用事件对象看起来像这样：
- en: '[PRE3]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note the parameter added to the anonymous function. This code will cause a `click`
    on the element with ID `foo` to report the page coordinates of the mouse cursor
    at the time of the click.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 注意添加到匿名函数的参数。此代码将导致对具有ID `foo` 的元素的`click`报告单击时鼠标光标的页面坐标。
- en: Passing Event Data
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 传递事件数据
- en: 'The optional *eventData* parameter is not commonly used. When provided, this
    argument allows us to pass additional information to the handler. One handy use
    of this parameter is to work around the issues caused by closures. For example,
    suppose we have two event handlers where both refer to the same external variable:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 可选的*eventData*参数并不常用。提供时，此参数允许我们向处理程序传递附加信息。此参数的一个方便的用途是解决闭包引起的问题。例如，假设我们有两个事件处理程序，两者都引用相同的外部变量：
- en: '[PRE4]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Because the handlers are closures that both have `message` in their environment,
    both will display the message `Not in the face!` when triggered. The variable''s
    value has changed. To sidestep this, we can pass the message in `eventData`:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 因为处理程序都是闭包，两者的环境中都有`message`，所以触发时都会显示消息`Not in the face!`变量的值已更改。为了规避这种情况，我们可以在`eventData`中传递消息：
- en: '[PRE5]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This time the variable is not referred to directly within the handlers; instead,
    the value is passed in through `eventData`, which fixes the value at the time
    the event is bound. The first handler will now display `Spoon!` while the second
    will alert `Not in the face!`
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这次变量不直接在处理程序中引用；相反，值通过`eventData`传递，这将在绑定事件时固定值。第一个处理程序现在将显示`Spoon!`，而第二个处理程序将警告`Not
    in the face!`
- en: If *eventData* is present, it is the second argument to the `.bind()` method;
    if no additional data needs to be sent to the handler, then the callback is passed
    as the second and final argument.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果*eventData*存在，则它是`.bind()`方法的第二个参数；如果不需要向处理程序发送其他数据，则回调作为第二个和最后一个参数传递。
- en: Note
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: See the `.trigger()` method reference for a way to pass data to a handler at
    the time the event happens rather than when the handler is bound.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅 `.trigger()` 方法参考，了解在事件发生时传递数据给处理程序的方法，而不是绑定处理程序时。
- en: .unbind()
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`.unbind()`'
- en: '| Removes a previously attached event handler from the elements.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '| 从元素中删除先前附加的事件处理程序。'
- en: '[PRE6]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '|'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters (First Version)
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数（第一个版本）
- en: 'eventType: A string containing a JavaScript event type, such as `click` or
    `submit`'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: eventType：包含 JavaScript 事件类型的字符串，例如`click`或`submit`
- en: 'handler: The function that is no longer to be executed'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理程序：不再执行的函数
- en: Parameters (Second Version)
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数（第二个版本）
- en: 'event: A JavaScript event object as passed to an event handler'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事件：作为传递给事件处理程序的 JavaScript 事件对象
- en: Return Value
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: The jQuery object, for chaining purposes.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 对象，用于链接目的。
- en: Description
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: 'Any handler that has been attached with `.bind()` can be removed with `.unbind()`.
    In the simplest case, with no arguments, `.unbind()` removes all handlers attached
    to the elements:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `.bind()` 绑定的任何处理程序都可以使用 `.unbind()` 删除。 在最简单的情况下，没有参数，`.unbind()` 删除附加到元素的所有处理程序：
- en: '[PRE7]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This version removes the handlers regardless of type. To be more precise, we
    can pass an event type:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这个版本无论类型如何都会删除处理程序。 要更精确，我们可以传递一个事件类型：
- en: '[PRE8]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'By specifying the "click" event type, only handlers for that event type will
    be unbound. This approach can still have negative ramifications if other scripts
    might be attaching behaviors to the same element, however. Robust and extensible
    applications typically demand the two-argument version for this reason:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 通过指定“click”事件类型，只会解绑该事件类型的处理程序。 但是，如果其他脚本可能将行为附加到同一元素，则此方法仍可能具有负面影响。 出于这个原因，健壮且可扩展的应用程序通常要求使用两个参数的版本：
- en: '[PRE9]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'By naming the handler, we can be assured that no other functions are caught
    in the crossfire. Note that the following will *not* work:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 通过命名处理程序，我们可以确保没有其他函数被捕获。 请注意，以下内容 *不* 工作：
- en: '[PRE10]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Even though the two functions are identical in content, they are created separately
    and so JavaScript is free to keep them as distinct function objects. To unbind
    a particular handler, we need a reference to that function and not to a different
    one that happens to do the same thing.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这两个函数在内容上是相同的，但它们是分开创建的，因此 JavaScript 可以将它们保留为不同的函数对象。 要解绑特定的处理程序，我们需要一个对该函数的引用，而不是对做同样事情的其他处理程序的引用。
- en: Using the Event Object
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用事件对象
- en: 'The second form of this method is used when we wish to unbind a handler from
    within itself. For example, suppose we wish to trigger an event handler only three
    times:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们希望在内部解绑处理程序时，使用此方法的第二种形式。 例如，假设我们希望仅触发事件处理程序三次：
- en: '[PRE11]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The handler in this case must take a parameter, so that we can capture the event
    object and use it to unbind the handler after the third click. The event object
    contains the context necessary for `.unbind()` to know which handler to remove.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，处理程序必须接受一个参数，以便我们可以捕获事件对象并在第三次单击后使用它来解绑处理程序。 事件对象包含对于 `.unbind()` 知道要删除的处理程序的上下文是必要的。
- en: This example is also an illustration of a closure. Since the handler refers
    to the `timesClicked` variable, which is defined outside the function, incrementing
    the variable has an effect even between invocations of the handler.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子也是闭包的一个例证。 由于处理程序引用了在函数外部定义的 `timesClicked` 变量，因此增加变量的效果甚至在处理程序调用之间都会产生影响。
- en: .one()
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`.one()`'
- en: '| Attaches a handler to an event for the elements. The handler is executed
    at most once.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '| 为元素附加事件处理程序。 处理程序最多执行一次。'
- en: '[PRE12]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '|'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数
- en: 'eventType: A string containing a JavaScript event type, such as `click` or
    `submit`'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: eventType：包含 JavaScript 事件类型的字符串，例如`click`或`submit`
- en: 'eventData (optional): A map of data that will be passed to the event handler'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: eventData（可选）：将传递给事件处理程序的数据映射
- en: 'handler: A function to execute at the time the event is triggered'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理程序：在触发事件时执行的函数
- en: Return Value
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: The jQuery object, for chaining purposes.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 对象，用于链接目的。
- en: Description
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: 'This method is identical to `.bind()`, except that the handler is unbound after
    its first invocation. For example:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法与 `.bind()` 相同，只是在第一次调用后解绑处理程序。 例如：
- en: '[PRE13]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: After the code is executed, a click on the element with ID `foo` will display
    the alert. Subsequent clicks will do nothing.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 执行代码后，单击具有 ID `foo` 的元素将显示警报。 后续单击将不起作用。
- en: 'This code is equivalent to:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码等效于：
- en: '[PRE14]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In other words, explicitly calling `.unbind()` from within a regularly bound
    handler has exactly the same effect.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，从常规绑定处理程序内部显式调用 `.unbind()` 具有完全相同的效果。
- en: .trigger()
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`.trigger()`'
- en: '| Executes all handlers attached to an element for an event.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '| 执行附加到元素的所有事件处理程序的处理程序。'
- en: '[PRE15]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '|'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数
- en: 'eventType: A string containing a JavaScript event type, such as `click` or
    `submit`'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: eventType：包含JavaScript事件类型的字符串，例如`click`或`submit`
- en: 'extraParameters: An array of additional parameters to pass along to the event
    handler'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: extraParameters：传递给事件处理程序的额外参数数组
- en: Return Value
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: The jQuery object, for chaining purposes.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery对象，用于链式调用。
- en: Description
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: 'Any event handlers attached with `.bind()` or one of its shortcut methods are
    triggered when the corresponding event occurs. They can be fired manually, however,
    with the `.trigger()` method. A call to `.trigger()` executes the handlers in
    the same order they would be if the event were triggered naturally by the user:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 任何使用`.bind()`或其快捷方法之一附加的事件处理程序在相应事件发生时触发。但是，可以通过`.trigger()`方法手动触发它们。调用`.trigger()`会按照与用户自然触发事件相同的顺序执行处理程序：
- en: '[PRE16]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: While `.trigger()` simulates an event activation, complete with a synthesized
    event object, it does not perfectly replicate a naturally‑occurring event. No
    event bubbling occurs, so the `.trigger()` call must be made on the element that
    actually has the event handlers attached. Default behaviors are also not reliably
    invoked, so must be called manually with methods such as `.submit()` on the DOM
    elements themselves.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然`.trigger()`模拟了事件激活，包括合成的事件对象，但它并不能完美地复制自然发生的事件。不会发生事件冒泡，因此必须在实际附加了事件处理程序的元素上调用`.trigger()`。默认行为也不可靠地调用，因此必须使用诸如`.submit()`之类的方法手动调用DOM元素上的默认行为。
- en: 'When we define a custom event type using the `.bind()` method, the second argument
    to `.trigger()` can become useful. For example, suppose we have bound a handler
    for the custom event to our element instead of the built-in `click` event as we
    did previously:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用`.bind()`方法定义自定义事件类型时，`.trigger()`的第二个参数会变得有用。例如，假设我们已经将处理程序绑定到自定义事件而不是之前绑定到内置的`click`事件的元素上：
- en: '[PRE17]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The event object is always passed as the first parameter to an event handler,
    but if additional parameters are specified during a `.trigger()` call as they
    are here, these parameters will be passed along to the handler as well.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 事件对象始终作为第一个参数传递给事件处理程序，但是如果像这样在`.trigger()`调用期间指定了额外的参数，那么这些参数也将被传递给处理程序。
- en: Note the difference between the extra parameters we're passing here and the
    `eventData` parameter to the `.bind()` method. Both are mechanisms for passing
    information to an event handler, but the `extraParameters` argument to `.trigger()`
    allows information to be determined at the time the event is triggered while the
    `eventData` argument to `.bind()` requires the information to be already computed
    at the time the handler is bound.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 注意这里传递的额外参数与`.bind()`方法的`eventData`参数之间的区别。两者都是向事件处理程序传递信息的机制，但是`.trigger()`的`extraParameters`参数允许在触发事件时确定信息，而`.bind()`的`eventData`参数要求在绑定处理程序时已经计算好信息。
- en: Document Loading
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文档加载
- en: These events deal with the loading of a page into the browser.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这些事件涉及页面加载到浏览器中。
- en: $()
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: $()
- en: '| Specifies a function to execute when the DOM is fully loaded.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '| 指定在DOM完全加载后执行的函数。'
- en: '[PRE18]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '|'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters
  id: totrans-139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数
- en: 'handler: A function to execute after the DOM is ready'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理程序：在DOM准备就绪后执行的函数
- en: Return Value
  id: totrans-141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: The jQuery object, for chaining purposes.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery对象，用于链式调用。
- en: Description
  id: totrans-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: While JavaScript provides the `load` event for executing code when a page is
    rendered, this event does not get triggered until all assets such as images have
    been completely received. In most cases, the script can be run as soon as the
    DOM hierarchy has been fully constructed. The handler passed to `.ready()` is
    guaranteed to be executed after the DOM is ready, so this is usually the best
    place to attach all other event handlers and run other jQuery code.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管JavaScript提供了`load`事件来执行在页面渲染时运行的代码，但是此事件直到所有资源（例如图像）完全接收完毕才会触发。在大多数情况下，脚本可以在DOM层次结构完全构建后立即运行。传递给`.ready()`的处理程序保证在DOM准备就绪后执行，因此这通常是附加所有其他事件处理程序并运行其他jQuery代码的最佳位置。
- en: In cases where code relies on loaded assets (for example, if the dimensions
    of an image are required), the code should be placed in a handler for the `load`
    event instead.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码依赖于加载的资产（例如，如果需要图像的尺寸）的情况下，代码应该放在`load`事件的处理程序中。
- en: The `.ready()` method is generally incompatible with the `<body onload="">`
    attribute. If `load` must be used, either do not use `.ready()` or use jQuery's
    `.load()` method to attach `load` event handlers to the window or to more specific
    items, like images.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '`.ready()` 方法通常与 `<body onload="">` 属性不兼容。如果必须使用 `load`，则要么不使用 `.ready()`，要么使用
    jQuery 的 `.load()` 方法将 `load` 事件处理程序附加到窗口或更具体的项目，如图像。'
- en: All three syntaxes provided are equivalent. The `.ready()` method can only be
    called on a jQuery object matching the current document, so the selector can be
    omitted.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 所提供的三种语法是等效的。`.ready()` 方法只能在与当前文档匹配的 jQuery 对象上调用，因此可以省略选择器。
- en: 'The `.ready()` method is typically used with an anonymous function:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '`.ready()` 方法通常与匿名函数一起使用：'
- en: '[PRE19]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: With this code in place, an alert will be displayed when the page is loaded.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 将此代码放置后，页面加载时将显示一个警报。
- en: 'When using another JavaScript library, we may wish to call `$.noConflict()`
    to avoid namespace difficulties. When this function is called, the `$` shortcut
    is no longer available, forcing us to write `jQuery` each time we would normally
    write `$`. However, the handler passed to the `.ready()` method can take an argument,
    which is passed the global jQuery object. This means we can rename the object
    within the context of our `.ready()` handler without affecting other code:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用另一个 JavaScript 库时，我们可能希望调用 `$.noConflict()` 来避免命名空间的困扰。当调用此函数时，`$` 快捷方式不再可用，强制我们在通常会写
    `$` 的地方写 `jQuery`。但是，传递给 `.ready()` 方法的处理程序可以接受一个参数，该参数传递给全局 jQuery 对象。这意味着我们可以在我们的
    `.ready()` 处理程序的上下文中重命名对象而不影响其他代码：
- en: '[PRE20]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: If `.ready()` is called after the DOM has been initialized, the new handler
    passed in will be executed immediately.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在 DOM 初始化后调用 `.ready()`，则传入的新处理程序将立即执行。
- en: .load()
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`.load()`'
- en: '| Binds an event handler to the load JavaScript event.'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '| 将事件处理程序绑定到加载 JavaScript 事件。'
- en: '[PRE21]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '|'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters
  id: totrans-158
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数
- en: 'handler: A function to execute when the event is triggered'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'handler: 当事件触发时要执行的函数'
- en: Return Value
  id: totrans-160
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: The jQuery object, for chaining purposes.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 用于链接目的的 jQuery 对象。
- en: Description
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: This handler is a shortcut for `.bind('load', handler)`.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 此处理程序是 `.bind('load', handler)` 的快捷方式。
- en: The `load` event is sent to an element when it and all sub‑elements have been
    completely loaded. This event can be sent to any element associated with a URL—images,
    scripts, frames, and the body of the document itself.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 当它和所有子元素都完全加载时，`load` 事件被发送到元素。此事件可以发送到与 URL 相关的任何元素 - 图像、脚本、框架以及文档本身的主体。
- en: 'For example, consider the HTML:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑以下 HTML：
- en: '[PRE22]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The event handler can be bound to the image:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 事件处理程序可以绑定到图片上：
- en: '[PRE23]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Now as soon as the image has been loaded, the message is displayed.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 现在一旦图片加载完成，消息将被显示。
- en: In general, it is not necessary to wait for all images to be fully loaded. If
    code can be executed earlier, it is usually best to place it in a handler sent
    to the `.ready()` method.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，等待所有图像完全加载是不必要的。如果代码可以更早执行，则通常最好将其放置在发送到 `.ready()` 方法的处理程序中。
- en: Note
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The AJAX module also has a method named `.load()`. Which one is fired depends
    on the set of arguments passed.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: AJAX 模块还有一个名为 `.load()` 的方法。触发哪一个取决于传递的参数集合。
- en: .unload()
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`.unload()`'
- en: '| Binds an event handler to the unload JavaScript event.'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '| 将事件处理程序绑定到卸载 JavaScript 事件。'
- en: '[PRE24]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '|'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数
- en: 'handler: A function to execute when the event is triggered.'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'handler: 当事件触发时要执行的函数。'
- en: Return Value
  id: totrans-179
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: The jQuery object, for chaining purposes.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 用于链接目的的 jQuery 对象。
- en: Description
  id: totrans-181
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: This handler is a shortcut for `.bind('unload', handler)`.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 此处理程序是 `.bind('unload', handler)` 的快捷方式。
- en: The `unload` event is sent to the `window` element when the user has navigated
    away from the page. This could mean one of many things. The user could have clicked
    on a link to leave the page, or typed in a new URL in the address bar. The forward
    and back buttons will trigger the event. Closing the browser window will cause
    the event to be triggered. Even a page reload will first create an `unload` event.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户导航离开页面时，`unload` 事件被发送到 `window` 元素。这可能意味着许多事情之一。用户可能点击链接离开页面，或者在地址栏中键入新
    URL。前进和后退按钮将触发事件。关闭浏览器窗口将导致事件触发。甚至页面重新加载也会首先创建 `unload` 事件。
- en: 'Any `unload` event handler should be bound to the `window` object:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 任何 `unload` 事件处理程序都应绑定到 `window` 对象上：
- en: '[PRE25]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: After this code executes, the alert will be displayed whenever the browser leaves
    the current page.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 执行此代码后，每当浏览器离开当前页面时将显示警报。
- en: It is not possible to cancel the `unload` event with `.preventDefault()`. This
    event is available so that scripts can perform cleanup when the user leaves the
    page.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `.preventDefault()` 无法取消 `unload` 事件。提供此事件是为了在用户离开页面时脚本可以执行清理操作。
- en: .error()
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .error()
- en: '| Binds an event handler to the error JavaScript event.'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '| 将事件处理程序绑定到错误 JavaScript 事件。'
- en: '[PRE26]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '|'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters
  id: totrans-192
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数
- en: 'handler: A function to execute when the event is triggered'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: handler：当事件触发时执行的函数
- en: Return Value
  id: totrans-194
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: The jQuery object, for chaining purposes.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 对象，用于链式操作。
- en: Description
  id: totrans-196
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: This handler is a shortcut for `.bind('error', handler)`.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 此处理程序是 `.bind('error', handler)` 的快捷方式。
- en: The `error` event is sent to the same elements that can receive the `load` event.
    It is called if the element was not loaded correctly.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '`error` 事件被发送到可以接收 `load` 事件的相同元素。如果元素加载不正确，则会调用该事件。'
- en: 'For example, consider the HTML:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑以下 HTML：
- en: '[PRE27]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The event handler can be bound to the image:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 可以将事件处理程序绑定到图像上：
- en: '[PRE28]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: If the image cannot be loaded (for example, because it is not present at the
    supplied URL), the message is displayed.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 如果图像无法加载（例如，因为它不存在于提供的 URL 中），则会显示消息。
- en: 'This event may not be correctly fired when the page is served locally. Since
    `error` relies on normal HTTP status codes, it will generally not be triggered
    if the URL uses the `file`: protocol.'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 当页面本地提供服务时，可能不会正确触发此事件。由于 `error` 依赖于正常的 HTTP 状态代码，因此通常不会在 URL 使用 `file：` 协议时触发。
- en: Mouse Events
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 鼠标事件
- en: These events are triggered by mouse movement and button presses.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 这些事件是由鼠标移动和按钮按下触发的。
- en: .mousedown()
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .mousedown()
- en: '| Binds an event handler to the mousedown JavaScript event, or triggers that
    event on an element.'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '| 将事件处理程序绑定到鼠标按下 JavaScript 事件，或者在元素上触发该事件。'
- en: '[PRE29]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '|'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters (First Version)
  id: totrans-211
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数（第一个版本）
- en: 'handler: A function to execute each time the event is triggered'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: handler：每次触发事件时执行的函数
- en: Return Value
  id: totrans-213
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: The jQuery object, for chaining purposes.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 对象，用于链式操作。
- en: Description
  id: totrans-215
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: This handler is a shortcut for `.bind('mousedown', handler)` in the first variation,
    and `.trigger('mousedown')` in the second.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 此处理程序是第一个变体中的 `.bind('mousedown', handler)` 的快捷方式，以及第二个变体中的 `.trigger('mousedown')`。
- en: The `mousedown` event is sent to an element when the mouse pointer is over the
    element, and the mouse button is pressed. Any HTML element can receive this event.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 当鼠标指针位于元素上并按下鼠标按钮时，会向元素发送 `mousedown` 事件。任何 HTML 元素都可以接收此事件。
- en: 'For example, consider the HTML:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑以下 HTML：
- en: '[PRE30]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The event handler can be bound to the target button:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 可以将事件处理程序绑定到目标按钮上：
- en: '[PRE31]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Now if we click on the target button, the message is displayed. We can also
    trigger the event when the second button is clicked:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们点击目标按钮，消息就会显示出来。我们还可以在第二个按钮被点击时触发事件：
- en: '[PRE32]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: After this code executes, clicks on the trigger button will also display the
    message.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 执行此代码后，点击触发按钮也会显示消息。
- en: The `mousedown` event is sent when any mouse button is clicked. To act only
    on specific buttons, we can use the event object's `which` property in Mozilla
    browsers (1 for left button, 2 for middle button, 3 for right button), or the
    `button` property in Internet Explorer (1 for left button, 4 for middle button,
    2 for right button). This is primarily useful for ensuring that the primary button
    was used to begin a drag operation; if ignored, strange results can occur when
    the user attempts to use a context menu. While the middle and right buttons can
    be detected with these properties, this is not reliable. In Opera and Safari,
    for example, right mouse button clicks are not detectable by default.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 当任何鼠标按钮被单击时，会发送 `mousedown` 事件。为了仅对特定按钮执行操作，我们可以在 Mozilla 浏览器中使用事件对象的 `which`
    属性（左键为 1，中键为 2，右键为 3），或者在 Internet Explorer 中使用 `button` 属性（左键为 1，中键为 4，右键为 2）。这对于确保使用主按钮开始拖动操作非常有用；如果忽略，当用户尝试使用上下文菜单时可能会产生奇怪的结果。虽然这些属性可以检测到中间和右键，但这不是可靠的。例如，在
    Opera 和 Safari 中，默认情况下无法检测到右键单击。
- en: If the user clicks on an element, then drags the mouse pointer away from it
    or releases the button, this is still counted as a `mousedown` event. This sequence
    of actions is treated as a *canceling* of the button press in most user interfaces,
    so it is usually better to use the `click` event unless we know that the `mousedown`
    event is preferable for a particular situation.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户点击一个元素，然后将鼠标指针移开或释放按钮，则仍将计为 `mousedown` 事件。在大多数用户界面中，这一系列操作被视为对按钮按下的取消，因此通常最好使用
    `click` 事件，除非我们知道 `mousedown` 事件在特定情况下更可取。
- en: .mouseup()
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .mouseup()
- en: '| Binds an event handler to the mouseup JavaScript event, or triggers that
    event on an element.'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '| 将事件处理程序绑定到 mouseup JavaScript 事件，或在元素上触发该事件。'
- en: '[PRE33]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '|'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters (First Version)
  id: totrans-231
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数（第一个版本）
- en: 'handler: A function to execute each time the event is triggered'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: handler：每次触发事件时执行的函数
- en: Return Value
  id: totrans-233
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: The jQuery object, for chaining purposes.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 用于链接目的的 jQuery 对象。
- en: Description
  id: totrans-235
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: This handler is a shortcut for `.bind('mouseup', handler)` in the first variation,
    and `.trigger('mouseup')` in the second.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 此处理程序是第一个变体中 `.bind('mouseup', handler)` 的快捷方式，以及第二个变体中 `.trigger('mouseup')`
    的快捷方式。
- en: The `mouseup` event is sent to an element when the mouse pointer is over the
    element, and the mouse button is released. Any HTML element can receive this event.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 当鼠标指针悬停在元素上并且鼠标按钮被释放时，`mouseup` 事件被发送到元素。任何 HTML 元素都可以接收此事件。
- en: 'For example, consider the HTML:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑以下 HTML 代码：
- en: '[PRE34]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The event handler can be bound to the target button:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 事件处理程序可以绑定到目标按钮上：
- en: '[PRE35]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Now if we click on the target button, the message is displayed. We can also
    trigger the event when the second button is clicked:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们点击目标按钮，消息就会显示出来。我们还可以在第二个按钮被点击时触发事件：
- en: '[PRE36]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: After this code executes, clicking the **Trigger** button will also display
    the message.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 执行此代码后，点击**触发**按钮也会显示消息。
- en: If the user clicks outside an element, drags onto it, and releases the button,
    this is still counted as a `mouseup` event. This sequence of actions is not treated
    as a button press in most user interfaces, so it is usually better to use the
    `click` event unless we know that the `mouseup` event is preferable for a particular
    situation.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户在元素外部单击，拖动到元素上并释放按钮，则此仍被视为 `mouseup` 事件。在大多数用户界面中，此操作序列不被视为按钮按下，因此通常最好使用
    `click` 事件，除非我们知道对于特定情况来说，`mouseup` 事件更合适。
- en: .click()
  id: totrans-246
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .click()
- en: '| Binds an event handler to the click JavaScript event, or triggers that event
    on an element.'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '| 将事件处理程序绑定到点击 JavaScript 事件，或在元素上触发该事件。'
- en: '[PRE37]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '|'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters (First Version)
  id: totrans-250
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数（第一个版本）
- en: 'handler: A function to execute each time the event is triggered'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: handler：每次触发事件时执行的函数
- en: Return Value
  id: totrans-252
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: The jQuery object, for chaining purposes.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 用于链接目的的 jQuery 对象。
- en: Description
  id: totrans-254
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: This handler is a shortcut for `.bind('click', handler)` in the first variation,
    and `.trigger('click')` in the second.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 此处理程序是第一个变体中 `.bind('click', handler)` 的快捷方式，以及第二个变体中 `.trigger('click')` 的快捷方式。
- en: The `click` event is sent to an element when the mouse pointer is over the element,
    and the mouse button is pressed and released. Any HTML element can receive this
    event.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 当鼠标指针悬停在元素上并且鼠标按钮被按下并释放时，`click` 事件被发送到元素。任何 HTML 元素都可以接收此事件。
- en: 'For example, consider the HTML:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑以下 HTML 代码：
- en: '[PRE38]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The event handler can be bound to the target button:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 事件处理程序可以绑定到目标按钮上：
- en: '[PRE39]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Now if we click on the target button, the message is displayed. We can also
    trigger the event when the second button is clicked:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们点击目标按钮，消息就会显示出来。我们还可以在第二个按钮被点击时触发事件：
- en: '[PRE40]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: After this code executes, clicking the trigger button will also display the
    message.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 执行此代码后，点击触发按钮也会显示消息。
- en: 'The `click` event is only triggered after this exact series of events:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '`click` 事件仅在以下确切的事件序列之后触发：'
- en: The mouse button is depressed while the pointer is inside the element.
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当指针位于元素内部时按下鼠标按钮。
- en: The mouse button is released while the pointer is inside the element.
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当鼠标指针位于元素内部时释放鼠标按钮。
- en: This is usually the desired sequence before taking an action. If this is not
    required, the `mousedown` or `mouseup` event may be more suitable.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行操作之前，这通常是期望的顺序。如果不需要这样做，则 `mousedown` 或 `mouseup` 事件可能更合适。
- en: .dblclick()
  id: totrans-268
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .dblclick()
- en: '| Binds an event handler to the `dblclick` JavaScript event, or triggers that
    event on an element.'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '| 将事件处理程序绑定到 `dblclick` JavaScript 事件，或在元素上触发该事件。'
- en: '[PRE41]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '|'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters (First Version)
  id: totrans-272
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数（第一个版本）
- en: 'handler: A function to execute each time the event is triggered'
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: handler：每次触发事件时执行的函数
- en: Return Value
  id: totrans-274
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: The jQuery object, for chaining purposes.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 用于链接目的的 jQuery 对象。
- en: Description
  id: totrans-276
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: This handler is a shortcut for `.bind('dblclick', handler)` in the first variation,
    and `.trigger('dblclick')` in the second.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 此处理程序是第一个变体中 `.bind('dblclick', handler)` 的快捷方式，以及第二个变体中 `.trigger('dblclick')`
    的快捷方式。
- en: The `dblclick` event is sent to an element when the element is double‑clicked.
    Any HTML element can receive this event.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 当元素被双击时，`dblclick` 事件被发送到元素。任何 HTML 元素都可以接收此事件。
- en: 'For example, consider the HTML:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑以下 HTML 代码：
- en: '[PRE42]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The event handler can be bound to the target button:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 事件处理程序可以绑定到目标按钮上：
- en: '[PRE43]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Now if we double-click on the target button, the message is displayed. We can
    also trigger the event when the second button is clicked:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们双击目标按钮，消息将被显示。我们还可以在点击第二个按钮时触发事件：
- en: '[PRE44]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: After this code executes, clicking the **Trigger** button will also display
    the message.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 执行此代码后，单击 **Trigger** 按钮也会显示消息。
- en: 'The `dblclick` event is only triggered after this exact series of events:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '`dblclick` 事件仅在以下确切事件序列之后触发：'
- en: The mouse button is depressed while the pointer is inside the element.
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 鼠标按钮在指针位于元素内时被按下。
- en: The mouse button is released while the pointer is inside the element.
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 鼠标按钮在指针位于元素内时释放。
- en: The mouse button is depressed again while the pointer is inside the element,
    within a time window that is system-dependent.
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在指针位于元素内，且在系统相关的时间窗口内再次按下鼠标按钮。
- en: The mouse button is released while the pointer is inside the element.
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 鼠标按钮在指针位于元素内时释放。
- en: It is inadvisable to bind handlers to both the `click` and `dblclick` events
    for the same element. The sequence of events triggered varies from browser to
    browser, with some receiving two `click` events and others only one. If an interface
    that reacts differently to single and double clicks cannot be avoided, then the
    `dblclick` event should be simulated within the `click` handler. We can achieve
    this by saving a timestamp in the handler, and then comparing the current time
    to the saved timestamp on subsequent clicks. If the difference is small enough,
    we can treat the click as a double-click.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 不建议为同一元素同时绑定 `click` 和 `dblclick` 事件处理程序。触发的事件序列因浏览器而异，有些会收到两个 `click` 事件，而其他则只会收到一个。如果无法避免需要对单击和双击做出不同反应的界面，则应在
    `click` 处理程序内模拟 `dblclick` 事件。我们可以通过在处理程序中保存时间戳，然后在后续点击时将当前时间与保存的时间戳进行比较来实现这一点。如果差异足够小，则可以将单击视为双击。
- en: .toggle()
  id: totrans-292
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .toggle()
- en: '| Binds two event handlers to the matched elements, to be executed on alternate
    clicks.'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '| 将两个事件处理程序绑定到匹配的元素上，以在交替点击时执行。'
- en: '[PRE45]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '|'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters
  id: totrans-296
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数
- en: 'handlerEven: A function to execute every even time the element is clicked.'
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'handlerEven: 每次偶数次点击元素时执行的函数。'
- en: 'handlerOdd: A function to execute every odd time the element is clicked.'
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'handlerOdd: 每次单数次点击元素时执行的函数。'
- en: Return Value
  id: totrans-299
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: The jQuery object, for chaining purposes.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 对象，用于链式操作。
- en: Description
  id: totrans-301
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: The `.toggle()` method binds a handler for the `click` event, so the rules outlined
    for the triggering of `click` apply here as well.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: '`.toggle()` 方法绑定了一个 `click` 事件处理程序，因此这里也适用于 `click` 触发的规则。'
- en: 'For example, consider the HTML:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑以下 HTML：
- en: '[PRE46]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'The event handlers can be bound to this button:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 可以将事件处理程序绑定到此按钮：
- en: '[PRE47]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: The first time the button is clicked, the first handler will be executed. The
    second time, the second handler will execute. Subsequent clicks will cycle between
    the two handlers.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次单击按钮时，将执行第一个处理程序。第二次，将执行第二个处理程序。后续点击将在两个处理程序之间循环。
- en: The `.toggle()` method is provided for convenience. It is relatively straightforward
    to implement the same behavior by hand, and this can be necessary if the assumptions
    built into `.toggle()` prove limiting. For example, `.toggle()` is not guaranteed
    to work correctly if applied twice to the same element. Since `.toggle()` internally
    uses a `click` handler to do its work, we must unbind `click` to remove a behavior
    attached with `.toggle()`, so other `click` handlers can be caught in the crossfire.
    The implementation also calls `.preventDefault()` on the event, so links will
    not be followed and buttons will not be clicked if `.toggle()` has been called
    on the element.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: '`.toggle()` 方法提供了方便。手动实现相同的行为相对简单，如果 `.toggle()` 内置的假设限制了操作，则可能需要手动实现。例如，如果两次将
    `.toggle()` 应用于同一元素，那么不能保证其正确工作。由于 `.toggle()` 内部使用 `click` 处理程序来完成其工作，因此我们必须解绑
    `click` 以移除使用 `.toggle()` 附加的行为，以便其他 `click` 处理程序不会受到影响。该实现还在事件上调用了 `.preventDefault()`，因此如果在元素上调用了
    `.toggle()`，则链接将不会被跟随，按钮也不会被点击。'
- en: .mouseover()
  id: totrans-309
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .mouseover()
- en: '| Binds an event handler to the mouseover JavaScript event, or triggers that
    event on an element.'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: '| 将事件处理程序绑定到 `mouseover` JavaScript 事件，或在元素上触发该事件。'
- en: '[PRE48]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '|'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters (First Version)
  id: totrans-313
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数（第一版）
- en: 'handler: A function to execute each time the event is triggered'
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'handler: 每次触发事件时执行的函数'
- en: Return Value
  id: totrans-315
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: The jQuery object, for chaining purposes.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 对象，用于链式操作。
- en: Description
  id: totrans-317
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: This handler is a shortcut for `.bind('mouseover', handler)` in the first variation,
    and `.trigger('mouseover')` in the second.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 这个处理程序是第一种情况下`.bind('mouseover', handler)`的简写，以及第二种情况下`.trigger('mouseover')`的简写。
- en: The `mouseover` event is sent to an element when the mouse pointer enters the
    element. Any HTML element can receive this event.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 当鼠标指针进入元素时，会向元素发送`mouseover`事件。任何 HTML 元素都可以接收到这个事件。
- en: 'For example, consider the HTML:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，考虑一下 HTML：
- en: '[PRE49]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'The event handler can be bound to the target button:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 这个事件处理程序可以绑定到目标按钮上：
- en: '[PRE50]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Now when the mouse pointer moves over the target button, the message is displayed.
    We can also trigger the event when the second button is clicked:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 当鼠标指针移过目标按钮时，消息被显示出来。我们还可以在第二个按钮被点击时触发事件：
- en: '[PRE51]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: After this code executes, clicking the **Trigger** button will also display
    the message.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码执行后，点击**Trigger**按钮也将显示消息。
- en: This event type can cause many headaches due to event bubbling. When the mouse
    pointer moves over a nested element, a `mouseover` event will be sent to that,
    then trickle up the hierarchy. This can trigger our bound `mouseover` handler
    at inopportune times. By using the `.hover()` method instead, we can avoid this
    problem.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 这种事件类型可能会由于事件冒泡而引起许多麻烦。当鼠标指针移过嵌套元素时，`mouseover`事件将发送给该元素，然后向上冒泡到层次结构中。这可能会在不适当的时候触发我们绑定的`mouseover`处理程序。通过使用`.hover()`方法，我们可以避免这个问题。
- en: .mouseout()
  id: totrans-328
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .mouseout()
- en: '| Bind an event handler to the **mouseout** JavaScript event, or trigger that
    event on an element.'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '| 绑定一个事件处理程序到**mouseout** JavaScript 事件，或在元素上触发该事件。'
- en: '[PRE52]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '|'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters (First Version)
  id: totrans-332
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数（第一个版本）
- en: 'handler: A function to execute each time the event is triggered'
  id: totrans-333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'handler: 每次事件被触发时要执行的函数'
- en: Return Value
  id: totrans-334
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: The jQuery object, for chaining purposes.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 对象，用于链式调用。
- en: Description
  id: totrans-336
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: This handler is a shortcut for `.bind('mouseout', handler)` in the first variation,
    and `.trigger('mouseout')` in the second.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 这个处理程序是第一种情况下`.bind('mouseout', handler)`的简写，以及第二种情况下`.trigger('mouseout')`的简写。
- en: The `mouseout` event is sent to an element when the mouse pointer leaves the
    element. Any HTML element can receive this event.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 当鼠标指针离开元素时，会向元素发送`mouseout`事件。任何 HTML 元素都可以接收到这个事件。
- en: 'For example, consider the HTML:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，考虑一下 HTML：
- en: '[PRE53]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'The event handler can be bound to the target button:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 这个事件处理程序可以绑定到目标按钮上：
- en: '[PRE54]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Now when the mouse pointer moves out of the target button, the message is displayed.
    We can also trigger the event when the second button is clicked:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 当鼠标指针移出目标按钮时，消息被显示出来。我们还可以在第二个按钮被点击时触发事件：
- en: '[PRE55]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: After this code executes, clicking the **Trigger** button will also display
    the message.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码执行后，点击**Trigger**按钮也将显示消息。
- en: This event type can cause many headaches due to event bubbling. When the mouse
    pointer moves out of a nested element, a `mouseout` event will be sent to that,
    then trickle up the hierarchy. This can trigger our bound `mouseout` handler at
    inopportune times. By using the `.hover()` method instead, we can avoid this problem.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 这种事件类型可能会由于事件冒泡而引起许多麻烦。当鼠标指针移出嵌套元素时，`mouseout`事件将发送给该元素，然后向上冒泡到层次结构中。这可能会在不适当的时候触发我们绑定的`mouseout`处理程序。通过使用`.hover()`方法，我们可以避免这个问题。
- en: .hover()
  id: totrans-347
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .hover()
- en: '| Binds two event handlers to the matched elements, to be executed when the
    mouse pointer enters and leaves the elements.'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: '| 绑定两个事件处理程序到匹配的元素上，在鼠标指针进入和离开元素时执行。'
- en: '[PRE56]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '|'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters
  id: totrans-351
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数
- en: 'handlerIn: A function to execute when the mouse pointer enters the element'
  id: totrans-352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'handlerIn: 鼠标指针进入元素时执行的函数'
- en: 'handlerOut: A function to execute when the mouse pointer leaves the element'
  id: totrans-353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'handlerOut: 鼠标指针离开元素时执行的函数'
- en: Return Value
  id: totrans-354
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: The jQuery object, for chaining purposes.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 对象，用于链式调用。
- en: Description
  id: totrans-356
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: 'The `.hover()` method binds handlers for both `mouseover` and `mouseout` events.
    We can use it to simply apply behavior to an element during the time the mouse
    is within the element. Consider the HTML:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: '`.hover()`方法绑定了对`mouseover`和`mouseout`事件的处理程序。我们可以使用它简单地在鼠标在元素内部时应用行为。考虑一下
    HTML：'
- en: '[PRE57]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Now we can bind handlers to both entering the element and leaving it with a
    single method call:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以在一个方法调用中绑定进入元素和离开元素的处理程序：
- en: '[PRE58]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Now the first message will be displayed when the mouse pointer enters the element,
    and the second will be displayed when the mouse pointer leaves.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当鼠标指针进入元素时，第一条消息将被显示，当鼠标指针离开时，第二条消息将被显示。
- en: With the `mouseover` and `mouseout` events, it is common to receive false positives
    due to event bubbling. When the mouse pointer crosses over a nested element, the
    events are generated and will bubble up to the parent element. The `.hover()`
    method incorporates code to check for this situation and do nothing, so we can
    safely ignore this problem when using the `.hover()` shortcut.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`mouseover`和`mouseout`事件，由于事件冒泡而常常会收到错误的响应。当鼠标指针穿过嵌套元素时，事件会生成并冒泡到父元素。`.hover()`方法中包含代码以检查此情况并不执行任何操作，因此在使用`.hover()`快捷方式时，我们可以放心地忽略此问题。
- en: .mousemove()
  id: totrans-363
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .mousemove()
- en: '| Binds an event handler to the mousemove JavaScript event, or triggers that
    event on an element.'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: '| 绑定事件处理程序到mousemove JavaScript事件，或在元素上触发该事件。'
- en: '[PRE59]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '|'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters (First Version)
  id: totrans-367
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数（第一个版本）
- en: 'handler: A function to execute each time the event is triggered'
  id: totrans-368
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理程序：每次触发事件时执行的函数
- en: Return Value
  id: totrans-369
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: The jQuery object, for chaining purposes.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 为了链式调用的jQuery对象。
- en: Description
  id: totrans-371
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: This handler is a shortcut for `.bind('mousemove', handler)` in the first variation,
    and `.trigger('mousemove')` in the second.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 这个处理程序是第一个变体中`.bind('mousemove', handler)`的快捷方式，以及第二个变体中`.trigger('mousemove')`的快捷方式。
- en: The `mousemove` event is sent to an element when the mouse pointer moves inside
    the element. Any HTML element can receive this event.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 当鼠标指针在元素内移动时，将发送`mousemove`事件给该元素。任何HTML元素都可以接收此事件。
- en: 'For example, consider the HTML:'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑以下HTML：
- en: '[PRE60]'
  id: totrans-375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'The event handler can be bound to the target button:'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 事件处理程序可以绑定到目标按钮上：
- en: '[PRE61]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Now when the mouse pointer moves within the target button, the message is displayed.
    We can also trigger the event when the second button is clicked:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 现在当鼠标指针在目标按钮内移动时，消息将被显示。我们还可以在点击第二个按钮时触发该事件：
- en: '[PRE62]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: After this code executes, clicking the **Trigger** button will also display
    the message.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码执行后，点击**触发**按钮也会显示消息。
- en: When tracking the mouse movement, we usually clearly need to know the actual
    position of the mouse pointer. The event object that is passed to the handler
    contains some information about the mouse coordinates. Properties such as `.clientX,
    .offsetX`, and `.pageX` are available, but support for them differs between browsers.
    Fortunately, jQuery normalizes the `.pageX` and `.pageY` attributes so that they
    can be used in all browsers. These attributes provide the `X` and `Y` coordinates
    of the mouse pointer relative to the top‑left corner of the page.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 在跟踪鼠标移动时，通常需要明确知道鼠标指针的实际位置。传递给处理程序的事件对象包含一些有关鼠标坐标的信息。诸如`.clientX, .offsetX`和`.pageX`等属性是可用的，但它们在浏览器之间的支持有所不同。幸运的是，jQuery对`.pageX`和`.pageY`属性进行了标准化，以便它们可以在所有浏览器中使用。这些属性提供了鼠标指针相对于页面左上角的`X`和`Y`坐标。
- en: We need to remember that the `mousemove` event is triggered whenever the mouse
    pointer moves, even for a pixel. This means that hundreds of events can be generated
    over a very small amount of time. If the handler has to do any significant processing,
    or if multiple handlers for the event exist, this can be a serious performance
    drain on the browser. It is important, therefore, to optimize `mousemove` handlers
    as much as possible, and to unbind them as soon as they are no longer needed.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要记住，无论鼠标指针移动多少像素，都会触发`mousemove`事件。这意味着在非常短的时间内可能会生成数百个事件。如果处理程序必须执行任何重要的处理，或者如果存在多个事件处理程序，这可能会严重影响浏览器的性能。因此，尽可能优化`mousemove`处理程序，并在不再需要时解绑它们非常重要。
- en: A common pattern is to bind the `mousemove` handler from within a `mousedown`
    hander, and to unbind it from a corresponding `mouseup` handler. If implementing
    this sequence of events, remember that the `mouseup` event might be sent to a
    different HTML element than the `mousemove` event was. To account for this, the
    `mouseup` handler should typically be bound to an element high up in the DOM tree,
    such as `<body>`.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 一个常见的模式是在`mousedown`处理程序中绑定`mousemove`处理程序，并从相应的`mouseup`处理程序中解绑它。如果实现这个事件序列，请记住`mouseup`事件可能被发送到与`mousemove`事件不同的HTML元素。为了解决这个问题，`mouseup`处理程序通常应该绑定到DOM树中的一个高级元素，比如`<body>`。
- en: Form Events
  id: totrans-384
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 表单事件
- en: These events refer to `<form>` elements and their contents.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 这些事件涉及`<form>`元素及其内容。
- en: .focus()
  id: totrans-386
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .focus()
- en: '| Binds an event handler to the focus JavaScript event, or triggers that event
    on an element.'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: '| 绑定事件处理程序到focus JavaScript事件，或在元素上触发该事件。'
- en: '[PRE63]'
  id: totrans-388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '|'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters (First Version)
  id: totrans-390
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数（第一个版本）
- en: 'handler: A function to execute each time the event is triggered'
  id: totrans-391
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理程序：每次触发事件时执行的函数
- en: Return Value
  id: totrans-392
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: The jQuery object, for chaining purposes.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery对象，用于链式目的。
- en: Description
  id: totrans-394
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: This handler is a shortcut for `.bind('focus', handler)` in the first variation,
    and `.trigger('focus')` in the second.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 此处理程序是第一种变体中的`.bind('focus', handler)`的快捷方式，以及第二种变体中的`.trigger('focus')`。
- en: The `focus` event is sent to an element when it gains focus. Originally, this
    event was only applicable to form elements, such as `<input>`. In recent browsers,
    the domain of the event has been extended to include all element types. An element
    can gain focus via keyboard commands, such as the *Tab* key, or by mouse clicks
    on the element.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 当元素获得焦点时，会发送`focus`事件给该元素。最初，此事件仅适用于表单元素，如`<input>`。在最近的浏览器中，事件的范围已扩展到包括所有元素类型。元素可以通过键盘命令（例如*Tab*键）或通过鼠标点击元素来获得焦点。
- en: Elements with focus are usually highlighted in some way by the browser, for
    example with a dotted line surrounding the element. The focus is used to determine
    which element is the first to receive keyboard-related events.
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器通常会以某种方式突出显示具有焦点的元素，例如用虚线包围元素。焦点用于确定哪个元素首先接收与键盘相关的事件。
- en: 'For example, consider the HTML:'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑HTML：
- en: '[PRE64]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'The event handler can be bound to the first input field:'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 事件处理程序可以绑定到第一个输入字段：
- en: '[PRE65]'
  id: totrans-401
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Now if we click on the first field, or *Tab* to it from another field, the
    message is displayed. We can trigger the event when the button is clicked:'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们单击第一个字段，或者从另一个字段*Tab*到它，消息将显示。我们可以在单击按钮时触发事件：
- en: '[PRE66]'
  id: totrans-403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: After this code executes, clicking the **Trigger** button will also display
    the message.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 执行此代码后，单击**触发**按钮也会显示消息。
- en: Note
  id: totrans-405
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Triggering the focus on hidden elements causes an error in Internet Explorer.
    Take care to only call `.focus()` without parameters on elements that are visible.
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 触发对隐藏元素的焦点会导致Internet Explorer出错。请小心，只在可见元素上调用`.focus()`而不带参数。
- en: .blur()
  id: totrans-407
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .blur()
- en: '| Binds an event handler to the blur JavaScript event, or triggers that event
    on an element.'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: '| 将事件处理程序绑定到blur JavaScript事件，或在元素上触发该事件。'
- en: '[PRE67]'
  id: totrans-409
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '|'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters (First Version)
  id: totrans-411
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数（第一个版本）
- en: 'handler: A function to execute each time the event is triggered'
  id: totrans-412
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: handler：每次触发事件时执行的函数
- en: Return Value
  id: totrans-413
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: The jQuery object, for chaining purposes.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery对象，用于链式目的。
- en: Description
  id: totrans-415
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: This handler is a shortcut for `.bind('blur', handler)` in the first variation,
    and `.trigger('blur')` in the second.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 此处理程序是第一种变体中的`.bind('blur', handler)`的快捷方式，以及第二种变体中的`.trigger('blur')`。
- en: The `blur` event is sent to an element when it loses focus. Originally, this
    event was only applicable to form elements, such as `<input>`. In recent browsers,
    the domain of the event has been extended to include all element types. An element
    can lose focus via keyboard commands, such as the *Tab* key, or by mouse clicks
    elsewhere on the page.
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 当元素失去焦点时，会发送`blur`事件给该元素。最初，此事件仅适用于表单元素，如`<input>`。在最近的浏览器中，事件的范围已扩展到包括所有元素类型。元素可以通过键盘命令（例如*Tab*键）或通过在页面上的其他位置点击鼠标来失去焦点。
- en: 'For example, consider the HTML:'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑HTML：
- en: '[PRE68]'
  id: totrans-419
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'The event handler can be bound to the first input field:'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 事件处理程序可以绑定到第一个输入字段：
- en: '[PRE69]'
  id: totrans-421
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Now if we click on the first field, then click or tab away, the message is
    displayed. We can trigger the event when the button is clicked:'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们单击第一个字段，然后单击或切换到其他位置，消息将显示。我们可以在单击按钮时触发事件：
- en: '[PRE70]'
  id: totrans-423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: After this code executes, clicking the **Trigger** button will also display
    the message.
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 执行此代码后，单击**触发**按钮也会显示消息。
- en: .change()
  id: totrans-425
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .change()
- en: '| Binds an event handler to the change JavaScript event, or triggers that event
    on an element.'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: '| 将事件处理程序绑定到change JavaScript事件，或在元素上触发该事件。'
- en: '[PRE71]'
  id: totrans-427
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '|'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters (First Version)
  id: totrans-429
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数（第一个版本）
- en: 'handler: A function to execute each time the event is triggered'
  id: totrans-430
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: handler：每次触发事件时执行的函数
- en: Return Value
  id: totrans-431
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: The jQuery object, for chaining purposes.
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery对象，用于链式目的。
- en: Description
  id: totrans-433
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: This handler is a shortcut for `.bind('change', handler)` in the first variation,
    and `.trigger('change')` in the second.
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 此处理程序是第一种变体中的`.bind('change', handler)`的快捷方式，以及第二种变体中的`.trigger('change')`。
- en: The `change` event is sent to an element when its value changes. This event
    is limited to `<input type="text">` fields, `<textarea>` boxes, and `<select>`
    elements. For select boxes, the event is fired immediately when the user makes
    a selection with the mouse, but for the other element types the event is deferred
    until the element loses focus.
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 当元素的值更改时，`change`事件将被发送到元素。此事件仅限于`<input type="text">`字段，`<textarea>`框和`<select>`元素。对于选择框，当用户使用鼠标进行选择时，事件会立即触发，但对于其他元素类型，事件会延迟到元素失去焦点时才触发。
- en: 'For example, consider the HTML:'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑以下HTML：
- en: '[PRE72]'
  id: totrans-437
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'The event handler can be bound to the text input and the select box:'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 事件处理程序可以绑定到文本输入和选择框：
- en: '[PRE73]'
  id: totrans-439
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Now when the second option is selected from the dropdown, the message is displayed.
    It is also displayed if we change the text in the field and then click away. If
    the field loses focus without the contents having changed, though, the event is
    not triggered. We can trigger the event manually when the button is clicked:'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 现在当从下拉菜单中选择第二个选项时，消息将被显示。如果我们更改字段中的文本，然后单击其他位置，消息也将显示。但是，如果字段失去焦点而内容未更改，则不会触发事件。当单击按钮时，我们可以手动触发事件：
- en: '[PRE74]'
  id: totrans-441
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: After this code executes, clicks on the trigger button will also display the
    message. The message will be displayed twice, because the handler has been bound
    to the change event on both of the form elements.
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 执行此代码后，点击触发按钮也会显示消息。消息将显示两次，因为处理程序已绑定到两个表单元素上的`change`事件。
- en: .select()
  id: totrans-443
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .select()
- en: '| Binds an event handler to the select JavaScript event, or triggers that event
    on an element.'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: '| 将事件处理程序绑定到选择JavaScript事件，或在元素上触发该事件。'
- en: '[PRE75]'
  id: totrans-445
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '|'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters (First Version)
  id: totrans-447
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数（第一个版本）
- en: 'handler: A function to execute each time the event is triggered'
  id: totrans-448
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理程序：每次触发事件时执行的函数
- en: Return Value
  id: totrans-449
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: The jQuery object, for chaining purposes.
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 用于链式调用目的的jQuery对象。
- en: Description
  id: totrans-451
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: This handler is a shortcut for `.bind('select', handler)` in the first variation,
    and `.trigger('select')` in the second.
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 此处理程序是第一种情况中`.bind('select', handler)`的快捷方式，以及第二种情况中的`.trigger('select')`。
- en: The `select` event is sent to an element when the user makes a text selection
    inside it. This event is limited to `<input type="text">` fields and `<textarea>`
    boxes.
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户在其中进行文本选择时，`select`事件将被发送到元素。此事件仅限于`<input type="text">`字段和`<textarea>`框。
- en: 'For example, consider the HTML:'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑以下HTML：
- en: '[PRE76]'
  id: totrans-455
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'The event handler can be bound to the text input:'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: '事件处理程序可以绑定到文本输入： '
- en: '[PRE77]'
  id: totrans-457
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'Now when any portion of the text is selected, the message is displayed. Merely
    setting the location of the insertion point will not trigger the event. We can
    trigger the event manually when the button is clicked:'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 现在当文本的任何部分被选中时，消息将被显示。仅设置插入点的位置不会触发事件。当单击按钮时，我们可以手动触发事件：
- en: '[PRE78]'
  id: totrans-459
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: After this code executes, clicking the **Trigger** button will also display
    the message. In addition, the default `select` action on the field will be fired,
    so the entire text field will be selected.
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 执行此代码后，单击**触发**按钮也会显示消息。此外，字段上的默认`select`操作将被触发，因此整个文本字段将被选中。
- en: .submit()
  id: totrans-461
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .submit()
- en: '| Binds an event handler to the submit JavaScript event, or triggers that event
    on an element.'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: '| 将事件处理程序绑定到提交JavaScript事件，或在元素上触发该事件。'
- en: '[PRE79]'
  id: totrans-463
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '|'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters (First Version)
  id: totrans-465
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数（第一个版本）
- en: 'handler: A function to execute each time the event is triggered'
  id: totrans-466
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理程序：每次触发事件时执行的函数
- en: Return Value
  id: totrans-467
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: The jQuery object, for chaining purposes.
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 用于链式调用目的的jQuery对象。
- en: Description
  id: totrans-469
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: This handler is a shortcut for `.bind('submit', handler)` in the first variation,
    and `.trigger('submit')` in the second.
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 此处理程序是第一种情况中`.bind('submit', handler)`的快捷方式，以及第二种情况中的`.trigger('submit')`。
- en: The `submit` event is sent to an element when the user is attempting to submit
    a form. It can only be attached to `<form>` elements. Forms can be submitted either
    by clicking an explicit `<input type="submit">` button, or by pressing **Enter**
    when a form element has focus.
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户尝试提交表单时，`submit`事件将被发送到元素。它只能附加到`<form>`元素上。表单可以通过点击显式的`<input type="submit">`按钮提交，或者当表单元素具有焦点时按**Enter**。
- en: Note
  id: totrans-472
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Depending on the browser, the *Enter* key may only cause a form submission if
    the form has exactly one text field, or only when there is a submit button present.
    The interface should not rely on a particular behavior for this key unless the
    issue is forced by observing the `keypress` event for presses of the *Enter* key.
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 根据浏览器的不同，*Enter*键可能仅在表单中有一个文本字段时触发表单提交，或者只有在存在提交按钮时才触发。界面不应依赖于此键的特定行为，除非通过观察`keypress`事件来强制解决*Enter*键的问题。
- en: 'For example, consider the HTML:'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑HTML：
- en: '[PRE80]'
  id: totrans-475
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'The event handler can be bound to the form:'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 事件处理程序可以绑定到表单：
- en: '[PRE81]'
  id: totrans-477
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'Now when the form is submitted, the message is displayed. This happens prior
    to the actual submission, so we can cancel the submit action by calling `.preventDefault()`
    on the event or by returning `false` from our handler. We can trigger the event
    manually when the button is clicked:'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当表单提交时，将显示消息。这发生在实际提交之前，因此我们可以通过在事件上调用`.preventDefault()`或从处理程序中返回`false`来取消提交操作。当单击按钮时，我们可以手动触发事件：
- en: '[PRE82]'
  id: totrans-479
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: After this code executes, clicking the **Trigger** button will also display
    the message. In addition, the default submit action on the form will be fired,
    so the form will be submitted.
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: 执行此代码后，单击**触发**按钮也会显示消息。此外，表单上的默认提交操作也将触发，因此将提交表单。
- en: Keyboard Events
  id: totrans-481
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 键盘事件
- en: These events are triggered by the keys on the keyboard.
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: 这些事件是由键盘上的键触发的。
- en: .keydown()
  id: totrans-483
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`.keydown()`'
- en: '| Binds an event handler to the keydown JavaScript event, or triggers that
    event on an element.'
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: '| 将事件处理程序绑定到keydown JavaScript事件，或在元素上触发该事件。'
- en: '[PRE83]'
  id: totrans-485
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '|'
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters (First Version)
  id: totrans-487
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数（第一个版本）
- en: 'handler: A function to execute each time the event is triggered'
  id: totrans-488
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理程序：每次触发事件时执行的函数
- en: Return Value
  id: totrans-489
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: The jQuery object, for chaining purposes.
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery对象，用于链式调用。
- en: Description
  id: totrans-491
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: This handler is a shortcut for `.bind('keydown', handler)` in the first variation,
    and `.trigger('keydown')` in the second.
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: 此处理程序是第一个变体中`.bind('keydown', handler)`的快捷方式，并且是第二个变体中`.trigger('keydown')`的快捷方式。
- en: The `keydown` event is sent to an element when the user first presses a key
    on the keyboard. It can be attached to any element, but the event is only sent
    to the element that has the focus. Focusable elements can vary between browsers,
    but form elements can always get focus so are reasonable candidates for this event
    type.
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户首次在键盘上按下键时，将向元素发送`keydown`事件。它可以附加到任何元素，但事件只会发送到具有焦点的元素。可获取焦点的元素在各个浏览器中可能不同，但表单元素始终可以获取焦点，因此是此事件类型的合理候选对象。
- en: 'For example, consider the HTML:'
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑HTML：
- en: '[PRE84]'
  id: totrans-495
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'The event handler can be bound to the input field:'
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 事件处理程序可以绑定到输入字段：
- en: '[PRE85]'
  id: totrans-497
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'Now when the insertion point is inside the field and a key is pressed, the
    message is displayed. We can trigger the event manually when the button is clicked:'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当插入点位于字段内部且按下键时，将显示消息。当单击按钮时，我们可以手动触发事件：
- en: '[PRE86]'
  id: totrans-499
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: After this code executes, clicking the **Triggers** button will also display
    the message.
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: 执行此代码后，单击**触发器**按钮也会显示消息。
- en: If key presses anywhere need to be caught (for example, to implement global
    shortcut keys on a page), it is useful to attach this behavior to the `document`
    object. Because of event bubbling, all key presses will make their way up the
    DOM to the `document` object unless explicitly stopped.
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要捕获任何地方的按键（例如，在页面上实现全局快捷键），将此行为附加到`document`对象是很有用的。由于事件冒泡，除非明确停止，所有按键都会向上冒泡到`document`对象。
- en: To determine which key was pressed, we can examine the event object that is
    passed to the handler function. The `.keyCode` attribute typically holds this
    information, but in some older browsers `.which` stores the key code. JavaScript's
    `String` object has a `.fromCharCode()` method that can be used to convert this
    numeric code into a string containing the character for further processing.
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: 要确定按下了哪个键，我们可以检查传递给处理程序函数的事件对象。`.keyCode`属性通常保存此信息，但在一些较旧的浏览器中，`.which`存储键码。JavaScript的`String`对象具有`.fromCharCode()`方法，可用于将此数值代码转换为包含字符的字符串，以进行进一步处理。
- en: The `fix_events.js` plug-in further standardizes the event object across different
    browsers. With this plug-in, we can use `.which` in all browsers to retrieve the
    key code.
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: '`fix_events.js`插件进一步标准化了不同浏览器中的事件对象。使用此插件，我们可以在所有浏览器中使用`.which`来检索键码。'
- en: .keypress()
  id: totrans-504
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`.keypress()`'
- en: '| Binds an event handler to the keypress JavaScript event, or triggers that
    event on an element.'
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: '| 将事件处理程序绑定到keypress JavaScript事件，或在元素上触发该事件。'
- en: '[PRE87]'
  id: totrans-506
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '|'
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters (First Version)
  id: totrans-508
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数（第一个版本）
- en: 'handler: A function to execute each time the event is triggered'
  id: totrans-509
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: handler：每次触发事件时要执行的函数
- en: Return Value
  id: totrans-510
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: The jQuery object, for chaining purposes.
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 对象，用于链式调用。
- en: Description
  id: totrans-512
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: This handler is a shortcut for `.bind('keypress', handler)` in the first variation,
    and `.trigger('keypress')` in the second.
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 此处理程序是第一个版本中 `.bind('keypress', handler)` 的快捷方式，第二个版本中是 `.trigger('keypress')`
    的快捷方式。
- en: The `keypress` event is sent to an element when the browser registers keyboard
    input. This is similar to the `keydown` event, except in the case of key repeats.
    If the user presses and holds a key, a `keydown` event is triggered once, but
    separate `keypress` events are triggered for each inserted character. In addition,
    modifier keys (such as *Shift*) cause `keydown` events but not `keypress` events.
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: '`keypress` 事件在浏览器注册键盘输入时发送到元素。这类似于 `keydown` 事件，但在按键重复的情况下不同。如果用户按住键不放，`keydown`
    事件会触发一次，但每个插入的字符都会触发单独的 `keypress` 事件。此外，修改键（例如*Shift*）会引发 `keydown` 事件，但不会引发
    `keypress` 事件。'
- en: A `keypress` event handler can be attached to any element, but the event is
    only sent to the element that has the focus. Focusable elements can vary between
    browsers, but form elements can always get focus so are reasonable candidates
    for this event type.
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: 可以将 `keypress` 事件处理程序附加到任何元素，但事件只会发送到具有焦点的元素。可获得焦点的元素在浏览器之间可能有所不同，但表单元素总是可以获得焦点的，因此是此事件类型的合理候选对象。
- en: 'For example, consider the HTML:'
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑以下 HTML：
- en: '[PRE88]'
  id: totrans-517
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'The event handler can be bound to the input field:'
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: 可以将事件处理程序绑定到输入字段上：
- en: '[PRE89]'
  id: totrans-519
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'Now when the insertion point is inside the field and a key is pressed, the
    message is displayed. The message repeats if the key is held down. We can trigger
    the event manually when the button is clicked:'
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当插入点位于字段内并按下键时，消息会显示出来。如果按住键不放，消息会重复显示。当按钮被点击时，我们可以手动触发事件：
- en: '[PRE90]'
  id: totrans-521
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: After this code executes, clicks on the **Trigger** button will also display
    the message.
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: 执行此代码后，点击**触发**按钮也会显示消息。
- en: If key presses anywhere need to be caught (for example, to implement global
    shortcut keys on a page), it is useful to attach this behavior to the `document`
    object. All key presses will make their way up the DOM to the `document` object
    unless explicitly stopped because of event bubbling.
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要捕获任何地方的按键（例如，在页面上实现全局快捷键），将此行为附加到 `document` 对象是有用的。除非明确因为事件冒泡而被停止，否则所有按键都会向上
    DOM 到达 `document` 对象。
- en: To determine which key was pressed, we can examine the event object that is
    passed to the handler function. The `.keyCode` attribute typically holds this
    information, but in some older browsers `.which` stores the key code. JavaScript's
    `String` object has a `.fromCharCode()` method that can be used to convert this
    numeric code into a string containing the character for further processing.
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: 要确定按下了哪个键，我们可以检查传递给处理程序函数的事件对象。`.keyCode` 属性通常保存此信息，但在一些较旧的浏览器中，`.which` 存储键码。JavaScript
    的 `String` 对象具有 `.fromCharCode()` 方法，可用于将此数值代码转换为包含字符的字符串，以供进一步处理。
- en: Note that `keydown` and `keyup` provide a code indicating which key is pressed,
    while `keypress` indicates which character was entered. For example, a lowercase
    "a" will be reported as 65 by `keydown` and `keyup`, but as 97 by `keypress`.
    An uppercase "A" is reported as 97 by all events. This can be the primary motivator
    for deciding which event type to use.
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`keydown` 和 `keyup` 提供指示按下哪个键的代码，而 `keypress` 指示输入了哪个字符。例如，小写字母 "a" 将被 `keydown`
    和 `keyup` 报告为 65，但被 `keypress` 报告为 97。大写字母 "A" 在所有事件中都报告为 97。这可能是决定使用哪种事件类型的主要动机。
- en: .keyup()
  id: totrans-526
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .keyup()
- en: '| Binds an event handler to the keyup JavaScript event, or triggers that event
    on an element.'
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: '| 将事件处理程序绑定到 keyup JavaScript 事件，或在元素上触发该事件。'
- en: '[PRE91]'
  id: totrans-528
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '|'
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters (First Version)
  id: totrans-530
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数（第一个版本）
- en: 'handler: A function to execute each time the event is triggered'
  id: totrans-531
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: handler：每次触发事件时要执行的函数
- en: Return Value
  id: totrans-532
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: The jQuery object, for chaining purposes.
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 对象，用于链式调用。
- en: Description
  id: totrans-534
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: This handler is a shortcut for `.bind('keyup', handler)` in the first variation,
    and `.trigger('keyup')` in the second.
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: 此处理程序是第一个版本中 `.bind('keyup', handler)` 的快捷方式，第二个版本中是 `.trigger('keyup')` 的快捷方式。
- en: The `keyup` event is sent to an element when the user releases a key on the
    keyboard. It can be attached to any element, but the event is only sent to the
    element that has the focus. Focusable elements can vary between browsers, but
    form elements can always get focus so are reasonable candidates for this event
    type.
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户释放键盘上的按键时，`keyup`事件将发送到元素。它可以附加到任何元素，但事件仅发送到具有焦点的元素。可聚焦元素在不同浏览器之间可能有所不同，但表单元素始终可以获得焦点，因此是此事件类型的合理候选者。
- en: 'For example, consider the HTML:'
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，请考虑以下HTML：
- en: '[PRE92]'
  id: totrans-538
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'The event handler can be bound to the input field:'
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: 事件处理程序可以绑定到输入字段上：
- en: '[PRE93]'
  id: totrans-540
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'Now when the insertion point is inside the field and a key is pressed and released,
    the message is displayed. We can trigger the event manually when the button is
    clicked:'
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: 现在当插入点位于字段内并按下并释放键时，消息将显示。当点击按钮时，我们可以手动触发事件：
- en: '[PRE94]'
  id: totrans-542
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: After this code executes, clicking the **Trigger** button will also display
    the message.
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: 执行此代码后，点击**Trigger**按钮也将显示消息。
- en: If key presses anywhere need to be caught (for example, to implement global
    shortcut keys on a page), it is useful to attach this behavior to the `document`
    object. All key presses will make their way up the DOM to the `document` object
    unless explicitly stopped because of event bubbling.
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要捕获任何地方的按键（例如，在页面上实现全局快捷键），将此行为附加到`document`对象是有用的。所有按键都会通过DOM上升到`document`对象，除非由于事件冒泡而明确停止。
- en: To determine which key was pressed, we can examine the event object that is
    passed to the handler function. The `.keyCode` attribute typically holds this
    information, but in some older browsers `.which` stores the key code. JavaScript's
    `String` object has a `.fromCharCode()` method that can be used to convert this
    numeric code into a string containing the character for further processing.
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: 要确定按下了哪个键，我们可以检查传递给处理程序函数的事件对象。`.keyCode`属性通常保存此信息，但在一些较旧的浏览器中，`.which`存储键码。JavaScript的`String`对象有一个`.fromCharCode()`方法，可以用来将这个数值代码转换为包含字符的字符串以进行进一步处理。
- en: Browser Events
  id: totrans-546
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 浏览器事件
- en: These events are related to the entire browser window.
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: 这些事件与整个浏览器窗口相关。
- en: .resize()
  id: totrans-548
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .resize()
- en: '| Binds an event handler to the resize JavaScript event, or triggers that event
    on an element.'
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: '| 绑定一个事件处理程序到resize JavaScript事件，或在元素上触发该事件。'
- en: '[PRE95]'
  id: totrans-550
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '|'
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters (First Version)
  id: totrans-552
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数（第一个版本）
- en: 'handler: A function to execute each time the event is triggered'
  id: totrans-553
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理程序：每次触发事件时执行的函数
- en: Return Value
  id: totrans-554
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: The jQuery object, for chaining purposes.
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: 用于链式调用的jQuery对象。
- en: Description
  id: totrans-556
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: This handler is a shortcut for `.bind('resize', handler)` in the first variation,
    and `.trigger('resize')` in the second.
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: 此处理程序是第一种情况下`.bind('resize', handler)`的快捷方式，以及第二种情况下的`.trigger('resize')`。
- en: 'The `resize` event is sent to the `window` element when the size of the browser
    window changes:'
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: 当浏览器窗口的大小改变时，`resize`事件将发送到`window`元素：
- en: '[PRE96]'
  id: totrans-559
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: Now whenever the browser window's size is changed, the message is displayed.
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: 现在每当浏览器窗口的大小改变时，消息将显示。
- en: The code in a `resize` handler should never rely on the number of times the
    handler is called. Depending on implementation, `resize` events can be sent continuously
    as the resizing is in progress (typical behavior in Internet Explorer), or only
    once at the end of the resize operation (typical behavior in FireFox).
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: 在`resize`处理程序中的代码永远不应该依赖于处理程序被调用的次数。根据实现方式，`resize`事件可以在调整大小正在进行时持续发送（在Internet
    Explorer中的典型行为），或者仅在调整大小操作结束时发送一次（在FireFox中的典型行为）。
- en: .scroll()
  id: totrans-562
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .scroll()
- en: '| Binds an event handler to the scroll JavaScript event, or triggers that event
    on an element.'
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: '| 绑定一个事件处理程序到scroll JavaScript事件，或在元素上触发该事件。'
- en: '[PRE97]'
  id: totrans-564
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '|'
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters
  id: totrans-566
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数
- en: 'handler: A function to execute each time the event is triggered'
  id: totrans-567
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理程序：每次触发事件时执行的函数
- en: Return Value
  id: totrans-568
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: The jQuery object, for chaining purposes.
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: 用于链式调用的jQuery对象。
- en: Description
  id: totrans-570
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: This handler is a shortcut for `.bind('scroll', handler)` in the first variation,
    and `.trigger('scroll')` in the second.
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: 此处理程序是第一种情况下`.bind('scroll', handler)`的快捷方式，以及第二种情况下的`.trigger('scroll')`。
- en: 'The `scroll` event is sent to an element when the user scrolls to a different
    place in the element. It applies not only to `window` objects, but also to scrollable
    frames and elements with the `overflow: scroll` CSS property.'
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: '当用户滚动到元素的不同位置时，`scroll`事件将发送到该元素。它不仅适用于`window`对象，还适用于可滚动的框架和具有`overflow: scroll`CSS属性的元素。'
- en: 'For example, consider the HTML:'
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，请考虑以下HTML：
- en: '[PRE98]'
  id: totrans-574
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: 'The style definition is present to make the target element small enough to
    be scrollable. The `scroll` event handler can be bound to this element:'
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: 样式定义存在是为了使目标元素足够小，以便滚动。可以将`scroll`事件处理程序绑定到此元素上：
- en: '[PRE99]'
  id: totrans-576
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: 'Now when the user scrolls the text up or down, the message is displayed. We
    can trigger the event manually when the button is clicked:'
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当用户将文本向上或向下滚动时，消息会被显示出来。当点击按钮时，我们可以手动触发事件：
- en: '[PRE100]'
  id: totrans-578
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: After this code executes, clicking the **Trigger** button will also display
    the message.
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: 执行此代码后，点击**触发器**按钮也会显示消息。
- en: A `scroll` event is sent whenever the element's scroll position changes, regardless
    of the cause. A mouse click or drag on the scroll bar, dragging inside the element,
    pressing the arrow keys, or using the mouse scroll wheel could cause this event.
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: 每当元素的滚动位置发生变化时，都会发送`scroll`事件，而不管原因是什么。鼠标点击或拖动滚动条，在元素内拖动，按箭头键，或使用鼠标滚轮都可能引起此事件。
