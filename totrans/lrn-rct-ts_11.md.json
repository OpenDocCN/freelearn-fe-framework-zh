["```js\nconst [visible, setVisible] = useState<boolean>()\n```", "```js\nfunction first(array: Array<string>): string | null {\n  return array.length === 0 ? null : array[0];\n}\n```", "```js\nfunction someFunc<T1, T2, ...>(...) {\n ...\n}\n```", "```js\nfunction first<Item>(array: Array<Item>): Item | null {\n  return array.length === 0 ? null : array[0];\n}\n```", "```js\ntype TypeName<T1, T2, …> = {\n ...\n}\n```", "```js\ntype Props<Item> = {\n  items: Item[];\n  ...\n};\n```", "```js\ntype Props<Item> = {\n  items: Item[];\n};\nexport function List<Item>({ items }: Props<Item>) {\n  ...\n}\n```", "```js\n    type Props<Data> = {\n    ```", "```js\n      data: Data[];\n    ```", "```js\n      id: keyof Data;\n    ```", "```js\n      primary: keyof Data;\n    ```", "```js\n      secondary: keyof Data;\n    ```", "```js\n    };\n    ```", "```js\n    export function Checklist<Data>({\n    ```", "```js\n      data,\n    ```", "```js\n      id,\n    ```", "```js\n      primary,\n    ```", "```js\n      secondary,\n    ```", "```js\n    }: Props<Data>) {\n    ```", "```js\n      return (\n    ```", "```js\n        <ul className=\"bg-gray-300 rounded p-10\">\n    ```", "```js\n          {data.map((item) => {\n    ```", "```js\n          })}\n    ```", "```js\n        </ul>\n    ```", "```js\n      );\n    ```", "```js\n    }\n    ```", "```js\n    {data.map((item) => {\n    ```", "```js\n      const idValue = item[id] as unknown;\n    ```", "```js\n      if (\n    ```", "```js\n        typeof idValue !== 'string' &&\n    ```", "```js\n        typeof idValue !== 'number'\n    ```", "```js\n      ) {\n    ```", "```js\n        return null;\n    ```", "```js\n      }\n    ```", "```js\n      const primaryText = item[primary] as unknown;\n    ```", "```js\n      if (typeof primaryText !== 'string') {\n    ```", "```js\n        return null;\n    ```", "```js\n      }\n    ```", "```js\n      const secondaryText = item[secondary] as unknown;\n    ```", "```js\n    }\n    ```", "```js\n    {data.map((item) => {\n    ```", "```js\n      ...\n    ```", "```js\n      return (\n    ```", "```js\n        <li\n    ```", "```js\n          key={idValue}\n    ```", "```js\n          className=\"bg-white p-6 shadow rounded mb-4         last:mb-0\"\n    ```", "```js\n        >\n    ```", "```js\n          <div className=\"text-xl text-gray-800 pb-1\">\n    ```", "```js\n            {primaryText}\n    ```", "```js\n          </div>\n    ```", "```js\n          {typeof secondaryText === 'string' && (\n    ```", "```js\n            <div className=\"text-sm text-gray-500\">\n    ```", "```js\n              {secondaryText}\n    ```", "```js\n            </div>\n    ```", "```js\n          )}\n    ```", "```js\n        </li>\n    ```", "```js\n      );\n    ```", "```js\n    })}\n    ```", "```js\n    export * from './Checklist';\n    ```", "```js\n    import { Checklist } from './Checklist';\n    ```", "```js\n    function App() {\n    ```", "```js\n      return (\n    ```", "```js\n        <div className=\"p-10\">\n    ```", "```js\n          <Checklist\n    ```", "```js\n            data={[\n    ```", "```js\n              { id: 1, name: 'Lucy', role: 'Manager' },\n    ```", "```js\n              { id: 2, name: 'Bob', role: 'Developer' },\n    ```", "```js\n            ]}\n    ```", "```js\n            id=\"id\"\n    ```", "```js\n            primary=\"name\"\n    ```", "```js\n            secondary=\"role\"\n    ```", "```js\n          />\n    ```", "```js\n        </div>\n    ```", "```js\n      );\n    ```", "```js\n    }\n    ```", "```js\n    export default App;\n    ```", "```js\n    import { ComponentPropsWithoutRef } from 'react';\n    ```", "```js\n    type Props<Data> = {\n    ```", "```js\n      data: Data[];\n    ```", "```js\n      id: keyof Data;\n    ```", "```js\n      primary: keyof Data;\n    ```", "```js\n      secondary: keyof Data;\n    ```", "```js\n    } & ComponentPropsWithoutRef<'ul'>;\n    ```", "```js\n    export function Checklist<Data>({\n    ```", "```js\n      data,\n    ```", "```js\n      id,\n    ```", "```js\n      primary,\n    ```", "```js\n      secondary,\n    ```", "```js\n      ...ulProps\n    ```", "```js\n    }: Props<Data>) {\n    ```", "```js\n      ...\n    ```", "```js\n    }\n    ```", "```js\n    export function Checklist<Data>({\n    ```", "```js\n      data,\n    ```", "```js\n      id,\n    ```", "```js\n      primary,\n    ```", "```js\n      secondary,\n    ```", "```js\n      ...ulProps\n    ```", "```js\n    }: Props<Data>) {\n    ```", "```js\n      return (\n    ```", "```js\n        <ul\n    ```", "```js\n          className=\"bg-gray-300 rounded p-10\"\n    ```", "```js\n          {...ulProps}\n    ```", "```js\n        >...</ul>\n    ```", "```js\n      );\n    ```", "```js\n    }\n    ```", "```js\n    <Checklist\n    ```", "```js\n      data={[\n    ```", "```js\n        { id: 1, name: 'Lucy', role: 'Manager' },\n    ```", "```js\n        { id: 2, name: 'Bob', role: 'Developer' },\n    ```", "```js\n        { id: 3, name: 'Bill', role: 'Developer' },\n    ```", "```js\n        { id: 4, name: 'Tara', role: 'Developer' },\n    ```", "```js\n        { id: 5, name: 'Sara', role: 'UX' },\n    ```", "```js\n        { id: 6, name: 'Derik', role: 'QA' }\n    ```", "```js\n      ]}\n    ```", "```js\n      id=\"id\"\n    ```", "```js\n      primary=\"name\"\n    ```", "```js\n      secondary=\"role\"\n    ```", "```js\n      style={{\n    ```", "```js\n        width: '300px',\n    ```", "```js\n        maxHeight: '380px',\n    ```", "```js\n        overflowY: 'auto'\n    ```", "```js\n      }}\n    ```", "```js\n    />\n    ```", "```js\n<button>We can specify any content here</button>\n```", "```js\n<Modal heading={<h3>Enter Details</h3>}>\n  Some content\n</Modal>\n```", "```js\n<List\n  data={[...]}\n  renderItem={(item) => <div>{item.text}</div>}\n/>\n```", "```js\n    import { ComponentPropsWithoutRef, ReactNode } from 'react';\n    ```", "```js\n    type Props<Data> = {\n    ```", "```js\n      data: Data[];\n    ```", "```js\n      id: keyof Data;\n    ```", "```js\n      primary: keyof Data;\n    ```", "```js\n      secondary: keyof Data;\n    ```", "```js\n      renderItem?: (item: Data) => ReactNode;\n    ```", "```js\n    } & React.ComponentPropsWithoutRef<'ul'>;\n    ```", "```js\n    export function Checklist<Data>({\n    ```", "```js\n      data,\n    ```", "```js\n      id,\n    ```", "```js\n      primary,\n    ```", "```js\n      secondary,\n    ```", "```js\n      renderItem,\n    ```", "```js\n      ...ulProps\n    ```", "```js\n    }: Props<Data>) {\n    ```", "```js\n      ...\n    ```", "```js\n    }\n    ```", "```js\n    <ul ...>\n    ```", "```js\n      {data.map((item) => {\n    ```", "```js\n        if (renderItem) {\n    ```", "```js\n          return renderItem(item);\n    ```", "```js\n        }\n    ```", "```js\n        const idValue = item[id] as unknown;\n    ```", "```js\n        ...\n    ```", "```js\n      })}\n    ```", "```js\n    </ul>\n    ```", "```js\n    <Checklist\n    ```", "```js\n      ...\n    ```", "```js\n      renderItem={(item) => (\n    ```", "```js\n        <li key={item.id} className=\"bg-white p-4       border-b-2\">\n    ```", "```js\n          <div className=\"text-xl text-slate-800 pb-1\">\n    ```", "```js\n            {item.name}\n    ```", "```js\n          </div>\n    ```", "```js\n          <div className=\"text-slate-500\">{item.role}</div>\n    ```", "```js\n        </li>\n    ```", "```js\n      )}\n    ```", "```js\n    />\n    ```", "```js\n    import {\n    ```", "```js\n      ComponentPropsWithoutRef,\n    ```", "```js\n      ReactNode,\n    ```", "```js\n      useState\n    ```", "```js\n    } from 'react';\n    ```", "```js\n    const [checkedIds, setCheckedIds] = useState<IdValue[]>([]);\n    ```", "```js\n    <li\n    ```", "```js\n      key={idValue}\n    ```", "```js\n      className=\"bg-white p-6 shadow rounded mb-4 last:mb-0\"\n    ```", "```js\n    >\n    ```", "```js\n      <label className=\"flex items-center\">\n    ```", "```js\n        <input\n    ```", "```js\n          type=\"checkbox\"\n    ```", "```js\n          checked={checkedIds.includes(idValue)}\n    ```", "```js\n          onChange={handleCheckChange(idValue)}\n    ```", "```js\n        />\n    ```", "```js\n        <div className=\"ml-2\">\n    ```", "```js\n          <div className=\"text-xl text-gray-800 pb-1\">\n    ```", "```js\n            {primaryText}\n    ```", "```js\n          </div>\n    ```", "```js\n          {typeof secondaryText === 'string' && (\n    ```", "```js\n            <div className=\"text-sm text-gray-500\">\n    ```", "```js\n              {secondaryText}\n    ```", "```js\n            </div>\n    ```", "```js\n          )}\n    ```", "```js\n        </div>\n    ```", "```js\n      </label>\n    ```", "```js\n    </li>\n    ```", "```js\n    const [checkedIds, setCheckedIds] = useState<IdValue[]>([]);\n    ```", "```js\n    const handleCheckChange = (checkedId: IdValue) => () => {};\n    ```", "```js\n    return ...\n    ```", "```js\n    const handleCheckChange = (checkedId: IdValue) => () => {\n    ```", "```js\n      const isChecked = checkedIds.includes(checkedId);\n    ```", "```js\n      let newCheckedIds = isChecked\n    ```", "```js\n        ? checkedIds.filter(\n    ```", "```js\n            (itemCheckedid) => itemCheckedid !== checkedId\n    ```", "```js\n          )\n    ```", "```js\n        : checkedIds.concat(checkedId);\n    ```", "```js\n      setCheckedIds(newCheckedIds);\n    ```", "```js\n    };\n    ```", "```js\n    export type IdValue = string | number;\n    ```", "```js\n    import { IdValue } from './types';\n    ```", "```js\nexport function useToggle() {\n  const [toggleValue, setToggleValue] = useState(false);\n  function toggle() {\n    setToggleValue(!toggleValue);\n  }\n  return {toggleValue, toggle};\n};\n```", "```js\nconst { toggleValue, toggle } = useToggle();\nreturn (\n  <div className=\"App\">\n    <button onClick={toggle}>{toggleValue ? 'ON' : 'OFF'}</button>\n  </div>\n);\n```", "```js\ntype Params = {\n  defaultToggleValue?: boolean;\n};\nexport function useToggle({ defaultToggleValue }: Params) {\n  const [toggleValue, setToggleValue] = useState(\n    defaultToggleValue\n  );\n  ...\n}\n```", "```js\nconst { toggleValue, toggle } = useToggle({\n  defaultToggleValue: true\n});\n```", "```js\n    import { useState } from 'react';\n    ```", "```js\n    import { IdValue } from './types';\n    ```", "```js\n    export function useChecked() {\n    ```", "```js\n      const [checkedIds, setCheckedIds] =     useState<IdValue[]>([]);\n    ```", "```js\n    }\n    ```", "```js\n    export function useChecked() {\n    ```", "```js\n      const [checkedIds, setCheckedIds] =     useState<IdValue[]>([]);\n    ```", "```js\n      const handleCheckChange = (checkedId: IdValue) => () => {\n    ```", "```js\n        const isChecked = checkedIds.includes(checkedId);\n    ```", "```js\n        let newCheckedIds = isChecked\n    ```", "```js\n          ? checkedIds.filter(\n    ```", "```js\n              (itemCheckedid) => itemCheckedid !== checkedId\n    ```", "```js\n            )\n    ```", "```js\n          : checkedIds.concat(checkedId);\n    ```", "```js\n        setCheckedIds(newCheckedIds);\n    ```", "```js\n      };\n    ```", "```js\n    }\n    ```", "```js\n    export function useChecked() {\n    ```", "```js\n      ...\n    ```", "```js\n      return { handleCheckChange, checkedIds };\n    ```", "```js\n    }\n    ```", "```js\n    import { useChecked } from './useChecked';\n    ```", "```js\n    export function Checklist<Data>({ ... }: Props<Data>) {\n    ```", "```js\n      const { checkedIds, handleCheckChange } = useChecked();\n    ```", "```js\n      return ...\n    ```", "```js\n    }\n    ```", "```js\ntype Params = {\n  defaultToggleValue?: boolean;\n  toggleValue?: boolean;\n  onToggleValueChange?: (toggleValue: boolean) => void;\n};\nexport function useToggle({\n  defaultToggleValue,\n  toggleValue,\n  onToggleValueChange,\n}: Params) {\n  ...\n}\n```", "```js\nconst [resolvedToggleValue, setResolvedToggleValue] =\n  useState(defaultToggleValue);\nfunction toggle() {\n  setResolvedToggleValue(!resolvedToggleValue);\n}\nreturn { resolvedToggleValue, toggle };\n```", "```js\nconst [resolvedToggleValue, setResolvedToggleValue] =\n  useState(defaultToggleValue || toggleValue);\n```", "```js\nfunction toggle() {\n  if (onToggleValueChange) {\n    onToggleValueChange(!resolvedToggleValue);\n  } else {\n    setResolvedToggleValue(!resolvedToggleValue);\n  }\n}\n```", "```js\nuseEffect(() => {\n  const isControlled = toggleValue !== undefined;\n  if (isControlled) {\n    setResolvedToggleValue(toggleValue);\n  }\n}, [toggleValue]);\n```", "```js\nconst [toggleValue, setToggleValue] = useState(false);\nconst onCount = useRef(0);\nconst { resolvedToggleValue, toggle } = useToggle({\n  toggleValue,\n  onToggleValueChange: (value) => {\n    if (onCount.current >= 3) {\n      setToggleValue(false);\n    } else {\n      setToggleValue(value);\n      if (value) {\n        onCount.current++;\n      }\n    }\n  },\n});\n```", "```js\n    import { useState, useEffect } from 'react';\n    ```", "```js\n    type Params = {\n    ```", "```js\n      checkedIds?: IdValue[];\n    ```", "```js\n      onCheckedIdsChange?: (checkedIds: IdValue[]) => void;\n    ```", "```js\n    };\n    ```", "```js\n    export function useChecked({\n    ```", "```js\n      checkedIds,\n    ```", "```js\n      onCheckedIdsChange,\n    ```", "```js\n    }: Params) {\n    ```", "```js\n      ...\n    ```", "```js\n    }\n    ```", "```js\n    export function useChecked({\n    ```", "```js\n      checkedIds,\n    ```", "```js\n      onCheckedIdsChange,\n    ```", "```js\n    }: Params) {\n    ```", "```js\n      const [resolvedCheckedIds, setResolvedCheckedIds] =\n    ```", "```js\n        useState<IdValue[]>(checkedIds || []);\n    ```", "```js\n      const handleCheckChange = (checkedId: IdValue) => () => {\n    ```", "```js\n        const isChecked = resolvedCheckedIds.      includes(checkedId);\n    ```", "```js\n        let newCheckedIds = isChecked\n    ```", "```js\n          ? resolvedCheckedIds.filter(\n    ```", "```js\n              (itemCheckedid) => itemCheckedid !== checkedId\n    ```", "```js\n            )\n    ```", "```js\n          : resolvedCheckedIds.concat(checkedId);\n    ```", "```js\n        setResolvedCheckedIds(newCheckedIds);\n    ```", "```js\n      };\n    ```", "```js\n      return { handleCheckChange, resolvedCheckedIds };\n    ```", "```js\n    }\n    ```", "```js\n    const handleCheckChange = (checkedId: IdValue) => () => {\n    ```", "```js\n      const isChecked = resolvedCheckedIds.    includes(checkedId);\n    ```", "```js\n      let newCheckedIds = isChecked\n    ```", "```js\n        ? resolvedCheckedIds.filter(\n    ```", "```js\n            (itemCheckedid) => itemCheckedid !== checkedId\n    ```", "```js\n          )\n    ```", "```js\n        : resolvedCheckedIds.concat(checkedId);\n    ```", "```js\n      if (onCheckedIdsChange) {\n    ```", "```js\n        onCheckedIdsChange(newCheckedIds);\n    ```", "```js\n      } else {\n    ```", "```js\n        setResolvedCheckedIds(newCheckedIds);\n    ```", "```js\n      }\n    ```", "```js\n    };\n    ```", "```js\n    useEffect(() => {\n    ```", "```js\n      const isControlled = checkedIds !== undefined;\n    ```", "```js\n      if (isControlled) {\n    ```", "```js\n        setResolvedCheckedIds(checkedIds);\n    ```", "```js\n      }\n    ```", "```js\n    }, [checkedIds]);\n    ```", "```js\n    import { IdValue } from './types';\n    ```", "```js\n    type Props<Data> = {\n    ```", "```js\n      data: Data[];\n    ```", "```js\n      id: keyof Data;\n    ```", "```js\n      primary: keyof Data;\n    ```", "```js\n      secondary: keyof Data;\n    ```", "```js\n      renderItem?: (item: Data) => ReactNode;\n    ```", "```js\n      checkedIds?: IdValue[];\n    ```", "```js\n      onCheckedIdsChange?: (checkedIds: IdValue[]) => void;\n    ```", "```js\n    } & ComponentPropsWithoutRef<'ul'>;\n    ```", "```js\n    export function Checklist<Data>({\n    ```", "```js\n      data,\n    ```", "```js\n      id,\n    ```", "```js\n      primary,\n    ```", "```js\n      secondary,\n    ```", "```js\n      renderItem,\n    ```", "```js\n      checkedIds,\n    ```", "```js\n      onCheckedIdsChange,\n    ```", "```js\n      ...ulProps\n    ```", "```js\n    }: Props<Data>) {}\n    ```", "```js\n    const { resolvedCheckedIds, handleCheckChange } = useChecked({\n    ```", "```js\n      checkedIds,\n    ```", "```js\n      onCheckedIdsChange,\n    ```", "```js\n    });\n    ```", "```js\n    return (\n    ```", "```js\n      <ul className=\"bg-gray-300 rounded p-10\" {...ulProps}>\n    ```", "```js\n        {data.map((item) => {\n    ```", "```js\n          ...\n    ```", "```js\n          return (\n    ```", "```js\n            <li ... >\n    ```", "```js\n              <label className=\"flex items-center\">\n    ```", "```js\n                <input\n    ```", "```js\n                  type=\"checkbox\"\n    ```", "```js\n                  checked={resolvedCheckedIds.                includes(idValue)}\n    ```", "```js\n                  onChange={handleCheckChange(idValue)}\n    ```", "```js\n                />\n    ```", "```js\n                ...\n    ```", "```js\n              </label>\n    ```", "```js\n            </li>\n    ```", "```js\n          );\n    ```", "```js\n        })}\n    ```", "```js\n      </ul>\n    ```", "```js\n    );\n    ```", "```js\n    export type { IdValue } from './types';\n    ```", "```js\n    import { useState } from 'react';\n    ```", "```js\n    import {\n    ```", "```js\n      Checklist,\n    ```", "```js\n      IdValue\n    ```", "```js\n    } from './Checklist';\n    ```", "```js\n    function App() {\n    ```", "```js\n      const [checkedId, setCheckedId] = useState<IdValue |     null>(\n    ```", "```js\n        null\n    ```", "```js\n      );\n    ```", "```js\n      ...\n    ```", "```js\n    }\n    ```", "```js\n    function handleCheckedIdsChange(newCheckedIds: IdValue[]) {\n    ```", "```js\n      const newCheckedIdArr = newCheckedIds.filter(\n    ```", "```js\n        (id) => id !== checkedId\n    ```", "```js\n      );\n    ```", "```js\n      if (newCheckedIdArr.length === 1) {\n    ```", "```js\n        setCheckedId(newCheckedIdArr[0]);\n    ```", "```js\n      } else {\n    ```", "```js\n        setCheckedId(null);\n    ```", "```js\n      }\n    ```", "```js\n    }\n    ```", "```js\n    <Checklist\n    ```", "```js\n      ...\n    ```", "```js\n      checkedIds={checkedId === null ? [] : [checkedId]}\n    ```", "```js\n      onCheckedIdsChange={handleCheckedIdsChange}\n    ```", "```js\n    />;\n    ```", "```js\n    type Props<TOption> = {\n    ```", "```js\n      options: TOption[];\n    ```", "```js\n      value: string;\n    ```", "```js\n      label: string;\n    ```", "```js\n    };\n    ```", "```js\n    export function Select({\n    ```", "```js\n      options,\n    ```", "```js\n      value,\n    ```", "```js\n      label,\n    ```", "```js\n    }: Props<TOption>) {\n    ```", "```js\n      return ...\n    ```", "```js\n    }\n    ```", "```js\n    type Props<TOption> = {\n    ```", "```js\n      ...,\n    ```", "```js\n      option: ReactNode;\n    ```", "```js\n    };\n    ```", "```js\n    export function Select<TOption>({\n    ```", "```js\n      ...,\n    ```", "```js\n      option\n    ```", "```js\n    }: Props<TOption>) {\n    ```", "```js\n      return (\n    ```", "```js\n        <div>\n    ```", "```js\n          <input />\n    ```", "```js\n          {options.map((option) => {\n    ```", "```js\n            if (option) {\n    ```", "```js\n              return option;\n    ```", "```js\n            }\n    ```", "```js\n            return ...\n    ```", "```js\n          })}\n    ```", "```js\n        </div>\n    ```", "```js\n      );\n    ```", "```js\n    }\n    ```", "```js\n    type Props = {\n    ```", "```js\n      label: string;\n    ```", "```js\n    } & ComponentPropsWithoutRef<'input'>;\n    ```", "```js\n    export function Field({ ...inputProps, label }: Props) {\n    ```", "```js\n      return (\n    ```", "```js\n        <>\n    ```", "```js\n          <label>{label}</label>\n    ```", "```js\n          <input {...inputProps} />\n    ```", "```js\n        </>\n    ```", "```js\n      );\n    ```", "```js\n    }\n    ```", "```js\n    export function useValid() {\n    ```", "```js\n      function validate(value: string) {\n    ```", "```js\n        return (\n    ```", "```js\n          value !== undefined && value !== null && value !==         ''\n    ```", "```js\n        );\n    ```", "```js\n      }\n    ```", "```js\n      return validate;\n    ```", "```js\n    }\n    ```", "```js\n    export function Field({ ... }: Props) {\n    ```", "```js\n      const [valid, setValid] = useState(true);\n    ```", "```js\n      const validate = useValid();\n    ```", "```js\n      return (\n    ```", "```js\n        <>\n    ```", "```js\n          <label {...labelProps}>{label}</label>\n    ```", "```js\n          <input\n    ```", "```js\n            {...inputProps}\n    ```", "```js\n            onBlur={(e) => {\n    ```", "```js\n              setValid(validate(e.target.value));\n    ```", "```js\n            }}\n    ```", "```js\n          />\n    ```", "```js\n          {!valid && <span>Please enter something</span>}\n    ```", "```js\n        </>\n    ```", "```js\n      );\n    ```", "```js\n    }\n    ```", "```js\n    export function Select<TOption>({\n    ```", "```js\n      options,\n    ```", "```js\n      value,\n    ```", "```js\n      label,\n    ```", "```js\n    }: Props<TOption>) {\n    ```", "```js\n      return ...\n    ```", "```js\n    }\n    ```", "```js\n    type Props<TOption> = {\n    ```", "```js\n      options: TOption[];\n    ```", "```js\n      value: keyof TOption;\n    ```", "```js\n      label: keyof TOption;\n    ```", "```js\n    };\n    ```", "```js\n    type Props<TOption> = {\n    ```", "```js\n      ...,\n    ```", "```js\n      renderOption: (option: TOption) => ReactNode;\n    ```", "```js\n    };\n    ```", "```js\n    export function Select<TOption>({\n    ```", "```js\n      options,\n    ```", "```js\n      value,\n    ```", "```js\n      label,\n    ```", "```js\n      renderOption,\n    ```", "```js\n    }: Props<TOption>) {\n    ```", "```js\n      return (\n    ```", "```js\n        <div>\n    ```", "```js\n          <input />\n    ```", "```js\n          {options.map((option) => {\n    ```", "```js\n            if (renderOption) {\n    ```", "```js\n              return renderOption(option);\n    ```", "```js\n            }\n    ```", "```js\n            return ...\n    ```", "```js\n        </div>\n    ```", "```js\n      );\n    ```", "```js\n    }\n    ```", "```js\n    export function Field({ label, ...inputProps }: Props) {\n    ```", "```js\n      ...\n    ```", "```js\n    }\n    ```", "```js\n    type Props = {\n    ```", "```js\n      label: string;\n    ```", "```js\n      labelProps: ComponentPropsWithoutRef<'label'>;\n    ```", "```js\n    } & ComponentPropsWithoutRef<'input'>;\n    ```", "```js\n    export function Field({\n    ```", "```js\n      label,\n    ```", "```js\n      labelProps,\n    ```", "```js\n      ...inputProps\n    ```", "```js\n    }: Props) {\n    ```", "```js\n      return (\n    ```", "```js\n        <>\n    ```", "```js\n          <label {...labelProps}>{label}</label>\n    ```", "```js\n          <input {...inputProps} />\n    ```", "```js\n        </>\n    ```", "```js\n      );\n    ```", "```js\n    }\n    ```", "```js\n    export function useValid() {\n    ```", "```js\n      const [valid, setValid] = useState(true);\n    ```", "```js\n      function validate(value: string) {\n    ```", "```js\n        setValid(\n    ```", "```js\n          value !== undefined && value !== null && value !== ''\n    ```", "```js\n        );\n    ```", "```js\n      }\n    ```", "```js\n      return { valid, validate };\n    ```", "```js\n    }\n    ```", "```js\n    export function Field({ ... }: Props) {\n    ```", "```js\n      const { valid, validate } = useValid();\n    ```", "```js\n      return (\n    ```", "```js\n        <>\n    ```", "```js\n          <label {...labelProps}>{label}</label>\n    ```", "```js\n          <input\n    ```", "```js\n            {...inputProps}\n    ```", "```js\n            onBlur={(e) => {\n    ```", "```js\n              validate(e.target.value);\n    ```", "```js\n            }}\n    ```", "```js\n          />\n    ```", "```js\n          {!valid && <span>Please enter something</span>}\n    ```", "```js\n        </>\n    ```", "```js\n      );\n    ```", "```js\n    }\n    ```"]