["```js\nnpx create-next-app with-graphcms\n```", "```js\nyarn add @chakra-ui/react @emotion/react@^11 @emotion/styled@^11 framer-motion@^4\n```", "```js\nimport { ChakraProvider } from '@chakra-ui/react';\nfunction MyApp({ Component, pageProps }) {\n  return (\n    <ChakraProvider>\n      <Component {...pageProps} />\n    </ChakraProvider>\n  );\n}\nexport default MyApp;\n```", "```js\nyarn add graphql-request graphql\n```", "```js\nimport { GraphQLClient } from 'graphql-request';\nconst { GRAPHCMS_ENDPOINT, GRAPHCMS_API_KEY = null } =       \n  process.env;\nconst authorization = `Bearer ${GRAPHCMS_API_KEY}`;\nexport default new GraphQLClient(GRAPHCMS_ENDPOINT, {\n  headers: {\n    ...(GRAPHCMS_API_KEY && { authorization} }),\n  },\n});\n```", "```js\nGRAPHCMS_ENDPOINT=https://api-eu-central-1.graphcms.com/v2/ckvt6q8oe1h5d01xpfkub364l/master\n```", "```js\nimport { Box, Flex, ChakraProvider } from '@chakra-ui/react';\nfunction MyApp({ Component, pageProps }) {\n  return (\n<ChakraProvider>\n  <Flex w=\"full\" minH=\"100vh\" bgColor=\"gray.100\">\n    <Box maxW=\"70vw\" m=\"auto\">\n      <Component {...pageProps} />\n    </Box>\n  </Flex>\n</ChakraProvider>\n  );\n}\nexport default MyApp;\n```", "```js\nimport { gql } from 'graphql-request';\nexport default gql`\n  query GetAllProducs {\n    products {\n      id\n      name\n      slug\n      price\n      images {\n        id\n        url\n      }\n    }\n  }\n`;\n```", "```js\nimport graphql from '../lib/graphql';\nimport getAllProducts from '../lib/graphql/queries/getAllProducts';\nexport const getStaticProps = async () => {\n  const { products } = await graphql.request(getAllProducts)\n  return {\n    props: {\n      products,\n    },\n  };\n};\n```", "```js\nimport graphql from '../lib/graphql';\nimport getAllProducts from '../lib/graphql/queries/getAllProducts';\nexport const getStaticProps = async () => {\n  const { products } = await graphql.request(getAllProducts)\n  return {\n    revalidate: 60, // 60 seconds\n    props: {\n      products,\n    },\n  };\n};\n```", "```js\nimport Link from 'next/link';\nimport { Box, Text, Image, Divider } from '@chakra-ui/react';\nexport default function ProductCard(props) {\n  return (\n    <Link href={`/product/${props.slug}`} passHref>\n      <Box\n        as=\"a\"\n        border=\"1px\"\n        borderColor=\"gray.200\"\n        px=\"10\"\n        py=\"5\"\n        rounded=\"lg\"\n        boxShadow=\"lg\"\n        bgColor=\"white\"\n        transition=\"ease 0.2s\"\n        _hover={{\n        boxShadow: 'xl',\n        transform: 'scale(1.02)',\n        }}>\n    <Image src={props.images[0]?.url} alt={props.name} />\n    <Divider my=\"3\" />\n    <Box>\n      <Text fontWeight=\"bold\" textColor=\"purple\"        \n        fontSize=\"lg\">{props.name}\n      </Text>\n      <Text textColor=\"gray.700\">€{props.price/ 100}</Text>\n    </Box>\n  </Box>\n</Link>\n  );\n}\n```", "```js\nimport { Grid } from '@chakra-ui/layout';\nimport graphql from '../lib/graphql';\nimport getAllProducts from '../lib/graphql/queries/getAllProducts';\nimport ProductCard from '../components/ProductCard';\nexport async const getStaticProps = () => {\n  // ...\n}\nexport default function Home(props) {\n  return (\n<Grid gridTemplateColumns=\"repeat(4, 1fr)\" gap=\"5\">\n  {props.products.map((product) => (\n  <ProductCard key={product.id} {...product} />\n      ))}\n</Grid>\n  );\n}\n```", "```js\nexport async function getStaticPaths() {}\nexport async function getStaticProps() {}\nexport default function ProductPage() {}\n```", "```js\nimport graphql from '../../lib/graphql';\nimport getAllProducts from '../../lib/graphql/queries/getAllProducts';\nexport async function getStaticPaths() {\nconst { products } = await \n    graphql.request(getAllProducts);\n  const paths = products.map((product) => ({\n    params: {\n      slug: product.slug,\n    },\n  }));\n  return {\n    paths,\n    fallback: false,\n  };\n}\n```", "```js\n{\n  paths: [\n   {\n      params: {\n        slug: \"unisex-long-sleeve-tee\"\n      }\n    },\n    {\n      params: {\n        slug: \"snapback\"\n      }\n    },\n    // ...\n  ]\n  fallback: false\n}\n```", "```js\nimport { gql } from 'graphql-request';\nexport default gql`\n  query GetProductBySlug($slug: String!) {\n  products(where: { slug: $slug }) {\n    id\n    images(first: 1) {\n    id\n    url\n  }\n    name\n    price\n    slug\n    description\n  }\n}\n`;\n```", "```js\nimport graphql from '../../lib/graphql';\nimport getAllProducts from '../../lib/graphql/queries/getAllProducts';\nimport getProductDetail from '../../lib/graphql/queries/getProductDetail';\nexport async function getStaticProps({ params }) {\nconst { products } = await \n    graphql.request(getProductDetail, {\n    slug: params.slug,\n  });\n  return {\n    props: {\n      product: products[0],\n    },\n  };\n}\n```", "```js\nimport { Box, Flex, Grid, Text, Image, Divider, Button,  \n  Select } from '@chakra-ui/react';\n// ...\nfunction SelectQuantity(props) {\n  const quantity = [...Array.from({ length: 10 })];\n  return (\n  <Select  placeholder=\"Quantity\"\n    onChange={(event) =>props.onChange(event.target.value)}>\n      {quantity.map((_, i) => (\n    <option key={i + 1} value={i + 1}>\n      {i + 1}\n    </option>\n    ))}\n  </Select>\n  );\n}\nexport default function ProductPage({ product }) {\n  return (\n    <Flex rounded=\"xl\" boxShadow=\"2xl\" w=\"full\" p=\"16\"  \n      bgColor=\"white\">\n    <Image height=\"96\" width=\"96\" src={product.images[0].url}/>\n    <Box ml=\"12\" width=\"container.xs\">\n    <Text as=\"h1\" fontSize=\"4xl\" fontWeight=\"bold\">\n      {product.name}\n    </Text>\n    <Text lineHeight=\"none\" fontSize=\"xl\" my=\"3\"   \n    fontWeight=\"bold\" textColor=\"blue.500\">\n      €{product.price / 100}\n    </Text>\n    <Text maxW=\"96\" textAlign=\"justify\" fontSize=\"sm\">\n      {product.description}\n    </Text>\n    <Divider my=\"6\" />\n    <Grid gridTemplateColumns=\"2fr 1fr\" gap=\"5\"    \n      alignItems=\"center\">\n    <SelectQuantityonChange={() => {}} />\n    <Button colorScheme=\"blue\">\n      Add to cart\n    </Button>\n    </Grid>\n    </Box>\n    </Flex>\n  );\n}\n```", "```js\nimport Link from 'next/link';\nimport { Flex, Box, Button, Text } from '@chakra-ui/react';\nimport { MdShoppingCart } from 'react-icons/md';\nexport default function NavBar() {\n  return (\n    <Box position=\"fixed\" top={0} left={0} w=\"full\"   \n    bgColor=\"white\" boxShadow=\"md\">\n    <Flex width=\"container.xl\" m=\"auto\" p=\"5\"     \n      justifyContent=\"space-between\">\n    <Link href=\"/\" passHref>\n    <Text textColor=\"blue.800\" fontWeight=\"bold\"      \n      fontSize=\"2xl\" as=\"a\">\n        My e-commerce\n    </Text>\n    </Link>\n    <Box>\n    <Link href=\"/cart\" passHref>\n      <Button as=\"a\">\n        <MdShoppingCart />\n      </Button>\n    </Link>\n    </Box>\n    </Flex>\n    </Box>\n  );\n}\n```", "```js\nyarn add react-icons\n```", "```js\nimport { Box, Flex, ChakraProvider } from '@chakra-ui/react';\nimport NavBar from '../components/NavBar';\nfunction MyApp({ Component, pageProps }) {\n  return (\n    <ChakraProvider>\n    <Flex w=\"full\" minH=\"100vh\" bgColor=\"gray.100\">\n    <NavBar />\n    <Box maxW=\"70vw\" m=\"auto\">\n      <Component {...pageProps} />\n    </Box>\n    </Flex>\n    </ChakraProvider>\n  );\n}\nexport default MyApp;\n```", "```js\nimport { createContext } from 'react';\nconst CartContext = createContext({\n  items: {},\n  setItems: () => {},\n});\nexport default CartContext;\n```", "```js\nimport { useState } from 'react';\nimport { Box, Flex, ChakraProvider } from '@chakra-ui/react';\nimport NavBar from '../components/NavBar';\nimport CartContext from '../lib/context/Cart';\nfunction MyApp({ Component, pageProps }) {\n  const [items, setItems] = useState({});\n  return (\n    <ChakraProvider>\n    <CartContext.Provider value={{ items, setItems }}>\n    <Flex w=\"full\" minH=\"100vh\" bgColor=\"gray.100\">\n    <NavBar />\n      <Box maxW=\"70vw\" m=\"auto\">\n        <Component {...pageProps} />\n      </Box>\n    </Flex>\n    </CartContext.Provider>\n    </ChakraProvider>\n  );\n}\nexport default MyApp;\n```", "```js\nimport { useContext, useState } from 'react';\nimport CartContext from '../../lib/context/Cart';\n// ...\nexport default function ProductPage({ product }) {\n  const [quantity, setQuantity] = useState(0);\n  const { items, setItems } = useContext(CartContext);\n  const alreadyInCart = product.id in items;\n  function addToCart() {\n      setItems({\n      ...items,\n      [product.id]: quantity,\n    });\n  }\n  return (\n   <Flex rounded=\"xl\" boxShadow=\"2xl\" w=\"full\" p=\"16\"   \n     bgColor=\"white\">\n   <Image height=\"96\" width=\"96\" src={product.images[0].url} />\n   <Box ml=\"12\" width=\"container.xs\">\n     <Text as=\"h1\" fontSize=\"4xl\" fontWeight=\"bold\">\n       {product.name}\n    </Text>\n    <Text lineHeight=\"none\" fontSize=\"xl\" my=\"3\"    \n       fontWeight=\"bold\" textColor=\"blue.500\">\n          €{product.price / 100}\n    </Text>\n    <Text maxW=\"96\" textAlign=\"justify\" fontSize=\"sm\">\n          {product.description}\n    </Text>\n    <Divider my=\"6\" />\n    <Grid gridTemplateColumns=\"2fr 1fr\" gap=\"5\"       \n      alignItems=\"center\">\n     <SelectQuantity\nonChange={(quantity)=>setQuantity \n         (parseInt(quantity))} \n      />\n      <Button colorScheme=\"blue\" onClick={addToCart}>\n            {alreadyInCart ? 'Update' : 'Add to cart'}\n      </Button>\n    </Grid>\n  </Box>\n</Flex>\n  );\n}\n```", "```js\nimport { useContext } from 'react';\nimport Link from 'next/link';\nimport { Flex, Box, Button, Text } from '@chakra-ui/react';\nimport { MdShoppingCart } from 'react-icons/md';\nimport CartContext from '../../lib/context/Cart';\nexport default function NavBar() {\n  const { items } = useContext(CartContext);\n  const itemsCount = Object\n    .values(items)\n    .reduce((x, y) => x + y, 0);\n  return (\n    <Box position=\"fixed\" top={0} left={0} w=\"full\"    \n      bgColor=\"white\" boxShadow=\"md\">\n    <Flex width=\"container.xl\" m=\"auto\" p=\"5\"\n      justifyContent=\"space-between\">\n      <Link href=\"/\" passHref>\n      <Text textColor=\"blue.800\" fontWeight=\"bold\"   \n         fontSize=\"2xl\" as=\"a\">\n            My e-commerce\n      </Text>\n      </Link>\n<Box>\n<Link href=\"/cart\" passHref>\n  <Button as=\"a\">\n    <MdShoppingCart />\n<Text ml=\"3\">{itemsCount}</Text>\n  </Button>\n</Link>\n</Box>\n</Flex>\n</Box>\n  );\n}\n```", "```js\nimport { useContext, useEffect, useState } from 'react';\nimport { Box, Divider, Text } from '@chakra-ui/react';\nexport default function Cart() {\n  return (\n    <Box\n      rounded=\"xl\"\n      boxShadow=\"2xl\"\n      w=\"container.lg\"\n      p=\"16\"\n      bgColor=\"white\"\n     >\n     <Text as=\"h1\" fontSize=\"2xl\" fontWeight=\"bold\">\n        Cart\n     </Text>\n     <Divider my=\"10\" />\n     <Box>\n       <Text>The cart is empty.</Text>\n     </Box>\n     </Box>\n  );\n}\n```", "```js\nimport { useContext, useEffect, useState } from 'react';\nimport { Box, Divider, Text } from '@chakra-ui/react';\nimport cartContext from '../lib/context/Cart';\nexport default function Cart() {\n  const { items } = useContext(cartContext);\n  return (\n    // ...\n  );\n}\n```", "```js\nimport { gql } from 'graphql-request';\nexport default gql`\n  query GetProductByID($ids: [ID!]) {\n  products(where: { id_in: $ids }) {\n    id\n    name\n    price\n    slug\n    }\n  }\n`;\n```", "```js\nimport { useContext, useEffect, useState } from 'react';\nimport { Box, Divider, Text } from '@chakra-ui/react';\nimport graphql from '../lib/graphql';\nimport cartContext from '../lib/context/Cart';\nimport getProductsById from '../lib/graphql/queries/getProductsById';\nexport default function Cart() {\n  const { items } = useContext(cartContext);\n  const [products, setProducts] = useState([]);\n  const hasProducts = Object.keys(items).length;\n  useEffect(() => {\n    // only fetch data if user has selected any product\n    if (!hasProducts) return;\n  graphql.request(getProductsById, {\n        ids: Object.keys(items),\n      })\n      .then((data) => {\n        setProducts(data.products);\n      })\n      .catch((err) =>console.error(err));\n  }, [JSON.stringify(products)]);\n  return (\n    // ...\n  );\n}\n```", "```js\nimport { GraphQLClient } from 'graphql-request';\nconst GRAPHCMS_ENDPOINT = process.env.NEXT_PUBLIC_GRAPHCMS_ENDPOINT;\nconst GRAPHCMS_API_KEY = process.env.GRAPHCMS_API_KEY;\nconst authorization = `Bearer ${GRAPHCMS_API_KEY}`;\nexport default new GraphQLClient(GRAPHCMS_ENDPOINT, {\n  headers: {\n    ...(GRAPHCMS_API_KEY && { authorization }),\n  },\n});\n```", "```js\nexport default function Cart() {\n  // ...\nfunction getTotal() {\n  if (!products.length) return 0;\n  return Object.keys(items)\n    .map(\n      (id) =>\n        products.find((product) => product.id === id).price\n        * (items[id] / 100) // Stripe requires the prices to be\n                            // integers (i.e., €4.99 should be\n                            // written as 499). That's why\n                            // we need to divide by 100 the                                prices\n                            // we get from GraphCMS, which are\n                            // already in the correct\n                            // Stripe format\n      )\n      .reduce((x, y) => x + y)\n      .toFixed(2);\n  }\n// ...\n}\n```", "```js\n  return (\n    <Box\n      rounded=\"xl\"\n      boxShadow=\"2xl\"\n      w=\"container.lg\"\n      p=\"16\"\n      bgColor=\"white\">\n    <Text as=\"h1\" fontSize=\"2xl\" fontWeight=\"bold\">\n      Cart\n    </Text>\n    <Divider my=\"10\" />\n    <Box>\n      {!hasProducts ? (\n    <Text>The cart is empty.</Text>\n        ) : (\n    <>\n       {products.map((product) => (\n    <Flex\n      key={product.id}\n      justifyContent=\"space-between\"\n      mb=\"4\">\n    <Box>\n    <Link href={`/product/${product.slug}`} passHref>\n    <Text\n      as=\"a\"\n      fontWeight=\"bold\"\n      _hover={{\n      textDecoration: 'underline',\n      color: 'blue.500' }}>\n        {product.name}\n      <Text as=\"span\" color=\"gray.500\">\n        {''}\n        x{items[product.id]}\n      </Text>\n      </Text>\n      </Link>\n      </Box>\n      <Box>\n        €{(items[product.id] *\n        (product.price / 100)).toFixed(2)}\n      </Box>\n      </Flex>\n            ))}\n      <Divider my=\"10\" />\n      <Flex\n        alignItems=\"center\"\n        justifyContent=\"space-between\">\n        <Text fontSize=\"xl\" fontWeight=\"bold\">\n          Total: €{getTotal()}\n        </Text>\n     <Button colorScheme=\"blue\"> Pay now </Button>\n     </Flex>\n     </>\n        )}\n</Box>\n</Box>\n  );\n}\n```", "```js\nNEXT_PUBLIC_STRIPE_SHARABLE_KEY=\nSTRIPE_SECRET_KEY=\n```", "```js\nyarn add @stripe/stripe-js stripe\n```", "```js\nimport { loadStripe } from '@stripe/stripe-js';\nconst key = process.env.NEXT_PUBLIC_STRIPE_SHARABLE_KEY;\nlet stripePromise;\nconst getStripe = () => {\n  if (!stripePromise) {\n    stripePromise = loadStripe(key);\n  }\n  return stripePromise;\n};\nexport default getStripe;\n```", "```js\nimport Stripe from 'stripe';\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY);\nexport default async function handler(req, res) {\n}\n```", "```js\nimport { gql } from 'graphql-request';\nexport default gql`\n  query GetProductDetailsByID($ids: [ID!]) {\n    products(where: { id_in: $ids }) {\n      id\n      name\n      price\n      slug\n      description\n      images {\n        id\n         url\n      }\n    }\n  }\n`;\n```", "```js\nimport Stripe from 'stripe';\nimport graphql from '../../../lib/graphql';\nimport getProductsDetailsById from '../../../lib/graphql/queries/getProductDetailsById';\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY);\nexport default async function handler(req, res) {\n  const { items } = req.body;\n  const { products } = await graphql\n    .request(getProductsDetailsById, { ids: Object.keys(items) });\n}\n```", "```js\nexport default async function handler(req, res) {\n  const { items } = req.body;\n  const { products } = await graphql\n    .request(getProductsDetailsById, { ids: Object.keys(items) });\n  const line_items = products.map((product) => ({\n    // user can change the quantity during checkout\n    adjustable_quantity: {\n      enabled: true,\n      minimum: 1,\n    },\n  price_data: {\n  // of course, it can be any currency of your choice\n    currency: 'EUR',\n    product_data: {\n      name: product.name,\n      images: product.images.map((img) => img.url),\n      },\n  // please note that GraphCMS already returns the price in the\n  // format required by Strapi: €4.99, for instance, should be\n  // passed to Stripe as 499.\n    unit_amount: product.price,\n    },\n    quantity: items[product.id],\n  }));\n```", "```js\n[\n  {\n    \"adjustable_quantity\": {\n      \"enabled\": true,\n      \"minimum\": 1\n    },\n    \"price_data\": {\n      \"currency\": \"EUR\",\n      \"product_data\": {\n        \"name\": \"Backpack\",\n        \"images\": [\n          https://media.graphcms.com/U5y09n80TpuRKJU6Gue1\n        ]\n      },\n      \"unit_amount\": 4999\n    },\n    \"quantity\": 2\n  }\n]\n```", "```js\nexport default async function handle(req, res) {\n  // ...\n  const session = await stripe.checkout.sessions.create({\n    mode: 'payment', // can also be \"subscription\" or \"setup\"\n    line_items,\n    payment_method_types: ['card', 'sepa_debit'],\n    // the server doesn't know the current URL, so we need to     write\n    // it into an environment variable depending on the current\n    // environment. Locally, it should be URL=http://    localhost:3000\n    success_url: `${process.env.URL}/success`,\n    cancel_url: `${process.env.URL}/cancel`,\n  });\n    res.status(201).json({ session });\n}\n```", "```js\nexport const shipping_address_collection = {\n  allowed_countries: ['IT', 'US'],\n};\n```", "```js\nexport const shipping_options = [\n  {\n    shipping_rate_data: {\n      type: 'fixed_amount',\n      fixed_amount: {\n        amount: 0,\n        currency: 'EUR',\n  },\n    display_name: 'Free Shipping',\ndelivery_estimate: {\n        minimum: {\n          unit: 'business_day',\n          value: 3,\n        },\n        maximum: {\n          unit: 'business_day',\n          value: 5,\n        },\n      },\n    },\n  },\n  {\nshipping_rate_data: {\n      type: 'fixed_amount',\nfixed_amount: {\n        amount: 499,\n        currency: 'EUR',\n      },\ndisplay_name: 'Next day air',\ndelivery_estimate: {\n        minimum: {\n          unit: 'business_day',\n          value: 1,\n        },\n        maximum: {\n          unit: 'business_day',\n          value: 1,\n        },\n      },\n    },\n  },\n];\n```", "```js\nexport default async function handle(req, res) {\n  // ...\n  const session = await stripe.checkout.sessions.create({\n    mode: 'payment', // can also be \"subscription\" or \"setup\"\n    line_items,\n    payment_method_types: ['card', 'sepa_debit'],\n    // the server doesn't know the current URL, so we need to     write\n    // it into an environment variable depending on the current\n    // environment. Locally, it should be URL=http://    localhost:3000\n    shipping_address_collection,\n    shipping_options,\n      success_url: `${process.env.URL}/success`,\n      cancel_url: `${process.env.URL}/cancel`,\n  });\n      res.status(201).json({ session });\n}\n```", "```js\nimport loadStripe from '../lib/stripe';\n// ...\nexport default function Cart() {\n  // ...\n  async function handlePayment() {\n    const stripe = await loadStripe();\n    const res = await fetch('/api/checkout', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        items,\n      }),\n    });\n    const { session } = await res.json();\n    await stripe.redirectToCheckout({\n      sessionId: session.id,\n    });\n  }\n  // ...\n}\n```", "```js\n// ...\n<Button colorScheme=\"blue\" onClick={handlePayment}>\n    Pay now\n</Button>\n// ...\n```"]