["```js\n    ng generate universal server\n    ```", "```js\n    npm install\n    ```", "```js\n    ng set apps.1.outDir=dist/server\n    ```", "```js\n    ng set apps.0.outDir=dist/browser\n    ```", "```js\n    ng set apps.0.name=browser\n    ```", "```js\n    ng set apps.0.platform=browser\n    ```", "```js\n    import 'zone.js/dist/zone-node';\n    import 'reflect-metadata';\n\n    import { enableProdMode } from '@angular/core';\n    import { environment } from './environments/environment';\n    ```", "```js\n    if (environment.production) {\n      enableProdMode();\n    }\n    ```", "```js\n    npm install --save @nguniversal/module-map-ngfactory-loader\n    ```", "```js\n    import { ModuleMapLoaderModule } from '@nguniversal/module-map-ngfactory-loader';\n    ```", "```js\n    imports: [\n      ...\n      ModuleMapLoaderModule,\n    ],\n    ```", "```js\n    \"build\": \"npm run build:browser && npm run build:server\",\n    \"build:browser\": \"ng build --prod --app browser\",\n    \"build:server\": \"ng build --prod --app server --output-hashing=false\",\n    ```", "```js\n    $ npm run build:browser\n    ```", "```js\n    $ npm run build:server\n    ```", "```js\n    npm install --save ts-node @nguniversal/express-engine\n    ```", "```js\n    import * as express from 'express';\n    import { join } from 'path';\n    import { ngExpressEngine } from '@nguniversal/express-engine';\n    import { provideModuleMap } from '@nguniversal/module-map-ngfactory-loader';\n    ```", "```js\n    const PORT = process.env.PORT || 8080;\n    const staticRoot = join(process.cwd(), 'dist', 'browser');\n    const { AppServerModuleNgFactory, LAZY_MODULE_MAP } = require('./dist/server/main.bundle');\n    const app = express();\n    ```", "```js\n    app.engine('html', ngExpressEngine({\n      bootstrap: AppServerModuleNgFactory,\n      providers: [\n        provideModuleMap(LAZY_MODULE_MAP)\n      ]\n    }));\n    ```", "```js\n    app.set('view engine', 'html');\n    app.set('views', staticRoot);\n    ```", "```js\n    app.get('*.*', express.static(staticRoot));\n    app.get('*', (req, res) => res.render('index', { req }));\n    ```", "```js\n    app.listen(PORT, () => console.log(`Server listening on http://localhost:${PORT}`));\n    ```", "```js\n    \"start\": \"ts-node ./server\",\n    ```", "```js\n    $ npm run build\n    ```", "```js\n    $ npm start\n    ```", "```js\n    ng g s ui/services/ui --module ui/ui\n    ```", "```js\n    private appColor = '#C3002F';\n    private appImage = '/assets/logo.svg';\n    private appTitle = 'Angular Social';\n    private appDescription = 'Angular Social is a Social Networking App built in Angular';\n    ```", "```js\n    import { Meta, Title } from '@angular/platform-browser';\n    ```", "```js\n    constructor(private titleService: Title, private metaService: Meta){}\n    ```", "```js\n    public setMetaData(config) {}\n    ```", "```js\n    // Get the description of the config, or use the default App Description\n    const description = config.description || this.appDescription\n    // Get the title of the config and append the App Title, or just use the App Title\n    const title = config.title ? `${config.title} - ${this.appTitle}` : this.appTitle;\n\n    // Set the Application Title\n    this.titleService.setTitle(title);\n\n    // Add the Application Meta tags\n    this.metaService.addTags([\n       { name: 'description', content: description },\n       { name: 'theme-color', content: this.appColor },\n       { name: 'twitter:card', content: 'summary' },\n       { name: 'twitter:image', content: this.appImage },\n       { name: 'twitter:title', content: title },\n       { name: 'twitter:description', content: description },\n       { name: 'apple-mobile-web-app-capable', content: 'yes' },\n       { name: 'apple-mobile-web-app-status-bar-style', content: 'black-translucent' },\n       { name: 'apple-mobile-web-app-title', content: title },\n       { name: 'apple-touch-startup-image', content: this.appImage },\n       { property: 'og:title', content: title },\n       { property: 'og:description', content: description },\n       { property: 'og:image', content: this.appImage },\n    ]);\n    ```", "```js\n    import { UiService } from '../../../ui/services/ui.service';\n    ```", "```js\n    constructor(private route: ActivatedRoute, private uiService: UiService) { }\n    ```", "```js\n    setMetaData(posts) {}\n    ```", "```js\n    const { itemsPerPage, itemsTotal } = posts['counters']\n    const description = `Showing ${itemsPerPage} from ${itemsTotal} posts`\n    const title = 'Posts List'\n\n    this.uiService.setMetaData({ description, title })\n    return posts;\n    ```", "```js\n    .map(data => this.setMetaData(data['posts']))\n    ```", "```js\n    import { UiService } from '../../../ui/services/ui.service';\n    ```", "```js\n    constructor(private route: ActivatedRoute, private uiService: UiService) { }\n    ```", "```js\n    setMetaData(profile) {}\n    ```", "```js\n    const { fullName, posts } = profile;\n    const description = `${fullName} posted ${posts.length} posts.`;\n    const title = `Posts by ${fullName}`;\n    this.uiService.setMetaData({ description, title });\n    return profile;\n    ```", "```js\n    this.route.data\n       .map(data => this.setMetaData(data['profile']))\n       .subscribe((result: any) => this.profile = result)\n    ```"]