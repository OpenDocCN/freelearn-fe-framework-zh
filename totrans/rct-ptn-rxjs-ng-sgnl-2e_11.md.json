["```js\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { UploadStatus } from '../model/upload.status.model';\nimport { environment } from 'src/environments/environment';\nconst BASE_PATH = environment.basePath\n@Injectable({\n  providedIn: 'root'\n})\nexport class UploadRecipesPreviewService {\n  constructor(private http: HttpClient) { }\n  upload(recipeId: number|undefined|null, fileToUpload:\n  File): Observable<UploadStatus> {\n    const formData = new FormData()\n    formData.append('fileToUpload', fileToUpload as File)\n    return this.http.post< UploadStatus >(\n      `${BASE_PATH}/recipes/upload/${recipeId}`,\n      formData\n    )\n  }\n}\n```", "```js\n    <div class=\"form-row\">\n        <div class=\"col-12\">\n            <label for=\"ImageUrl\">ImageUrl</label>\n            <p-fileUpload name=\"imageUrl\" [multiple]=true\n                [customUpload]=\"true\" (uploadHandler)=\n                    \"onUpload($event.files)\">\n            </p-fileUpload>\n        </div>\n    </div>\n```", "```js\n    uploadedFilesSubject$ = new BehaviorSubject<File[]>([]);\n    ```", "```js\n      onUpload(files: File[]) {\n        this.uploadedFilesSubject$.next(files);\n      }\n    ```", "```js\n      uploadRecipeImages$ =\n      this.uploadedFilesSubject$.pipe(\n          switchMap(uploadedFiles=>forkJoin(\n          uploadedFiles.map((file: File) =>\n            this.uploadService.upload(\n            this.recipeForm.value.id, file))))\n      )\n    ```", "```js\n<ng-container *ngIf=\"uploadRecipeImages$ | async\"></ng-\n  container>\n```", "```js\n  uploadRecipeImages$ = this.uploadedFilesSubject$.pipe(\n    switchMap(uploadedFiles=>forkJoin(uploadedFiles.map((\n      file: File) =>\n      this.uploadService.upload(this.recipeForm.value.id,\n        file).pipe(\n          catchError(errors => of(errors)),\n      ))))\n```", "```js\n  counter: number = 0;\n  uploadProgress: number=0;\nuploadRecipeImages$ = this.uploadedFilesSubject$.pipe(\n  switchMap(uploadedFiles =>\n  forkJoin(uploadedFiles.map((file: File) =>\n    this.uploadService.upload(this.recipeForm.value.id,\n      file).pipe(\n        catchError(errors => of(errors)),\n        finalize(() => this.calculateProgressPercentage(\n          ++this.counter, uploadedFiles.length))\n      ))))\n  )\n  private calculateProgressPercentage(completedRequests:\n  number, totalRequests: number) {\n    this.uploadProgress =\n      Math.round((completedRequests / totalRequests) *\n        100);\n  }\nonUpload(files: File[]) {\n  this.uploadProgress=0;\n  this.counter=0;\n  this.uploadedFilesSubject$.next(files);\n}\n```", "```js\n    <div class=\"row\">\n        <div class=\"col-12\">\n            <label for=\"ImageUrl\">ImageUrl</label>\n            <!-- <input type=\"text\" name=\"imageUrl\"\n            formControlName=\"imageUrl\"> -->\n            <p-fileUpload name=\"imageUrl\" [multiple]=true\n                [customUpload]=\"true\"\n                (uploadHandler)=\"onUpload($event.files)\"\n                accept=\"image/*\"></p-fileUpload>\n            @if(uploadProgress>0) {\n            <p-progressBar [value]=uploadProgress>\n                </p-progressBar>\n            }\n        </div>\n    </div>\n```"]