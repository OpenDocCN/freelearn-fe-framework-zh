["```js\n{ provide: timeZoneToken, useValue: guessTimeZone() }\n```", "```js\n{ provide: timeZoneToken, useFactory: guessTimeZone }\n```", "```js\nimport { NgModule, Type } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { environment } from '../environments/environment';\nimport { AppFakeComponent } from './app-fake.component';\nimport { AppComponent } from './app.component';\nfunction determineAppComponent(isDevelopment: boolean): \n  Type<any>[] {\n  if (isDevelopment) {\n    return [AppFakeComponent];\n  } else {\n    return [AppComponent];\n  }\n}\nconst developmentEnvironment = environment.production === false;\n@NgModule({\n  bootstrap: determineAppComponent(developmentEnvironment),\n  declarations: determineAppComponent(\n   developmentEnvironment),\n  imports: [BrowserModule],\n})\nexport class AppModule {}\n```", "```js\nfunction determineAppComponent(isDevelopment: boolean):\n  Type<any>[] {\n  return isDevelopment ? [AppFakeComponent] : \n   [AppComponent];\n}\n```", "```js\nimport { Component } from '@angular/core';\nconst subject = 'World';\nconst greeting = String.raw`Hello, ${subject}!`;\n@Component({\n  selector: 'app-root',\n  template: '<h1>' + greeting + '</h1>',\n})\nexport class AppComponent {}\n```", "```js\nimport { Component } from '@angular/core';\nconst subject = 'World';\nconst greeting = `Hello, ${subject}!`;\n@Component({\n  selector: 'app-root',\n  template: '<h1>' + greeting + '</h1>',\n})\nexport class AppComponent {}\n```", "```js\nimport { Component } from '@angular/core';\nconst subject = 'World';\n@Component({\n  selector: 'app-root',\n  template: '<h1>{{ greeting }}</h1>',\n})\nexport class AppComponent {\n  greeting = String.raw`Hello, ${subject}!`;\n}\n```", "```js\nimport { Component } from '@angular/core';\nlet greeting: string;\nsetTimeout(() => {\n  greeting = '<h1>Hello, World!</h1>';\n}, 0);\n@Component({\n  selector: 'app-hello',\n  template: greeting,\n})\nexport class HelloComponent {}\n```", "```js\nimport { Component } from '@angular/core';\nlet greeting: string;\ngreeting = '<h1>Hello, World!</h1>';\n@Component({\n  selector: 'app-hello',\n  template: greeting,\n})\nexport class HelloComponent {}\n```", "```js\nimport { Component } from '@angular/core';\nlet greeting = '<h1>Hello, World!</h1>';\n@Component({\n  selector: 'app-hello',\n  template: greeting,\n})\nexport class HelloComponent {}\n```", "```js\nimport { Component } from '@angular/core';\nlet greeting = '<h1>Hello, World!</h1>';\ngreeting = '<h1>Hello, JIT compiler!</h1>';\n@Component({\n  selector: 'app-hello',\n  template: greeting,\n})\nexport class HelloComponent {}\n```", "```js\nexport function loadFeatureFlags():\n  Promise<{ [feature: string]: boolean }> {\n  return fetch('/assets/features.json')\n    .then((response) => response.json());\n}\n```", "```js\nimport { InjectionToken } from '@angular/core';\nexport const featureFlagsToken =\n  new InjectionToken<Record<string, boolean>>(\n    'Feature flags'\n  );\n```", "```js\nimport { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { AppModule } from './app/app.module';\nimport { featureFlagsToken } from './app/feature-flags.token';\nimport { environment } from './environments/environment';\nimport { loadFeatureFlags } from './load-feature-flags';\nif (environment.production) {\n  enableProdMode();\n}\nloadFeatureFlags()\n  .then((featureFlags) =>\n    platformBrowserDynamic([\n      { provide: featureFlagsToken, useValue: featureFlags \n       },\n    ]).bootstrapModule(AppModule)\n  )\n  .catch((err) => console.error(err));\n```", "```js\nimport { Component, Inject } from '@angular/core';\nimport { featureFlagsToken } from './feature-flags.token';\n@Component({\n  selector: 'app-root',\n  template: `\n    <div *ngFor=\"let feature of features | keyvalue\">\n      <mat-slide-toggle [checked]=\"feature.value\">\n        {{ feature.key }}\n      </mat-slide-toggle>\n    </div>\n  `,\n})\nexport class AppComponent {\n  constructor(\n    @Inject(featureFlagsToken)\n    public features: { [feature: string]: boolean }\n  ) {}\n}\n```", "```js\nimport { Injectable } from '@angular/core';\n@Injectable({\n  providedIn: 'root',\n})\nexport class FeatureFlagService {\n  #featureFlags = new Map<string, boolean>();\n  configureFeatures(featureFlags: { [feature: string]: \n   boolean }): void {\n    Object.entries(featureFlags).forEach(([feature, state]) \n     =>\n      this.#featureFlags.set(feature, state)\n    );\n  }\n  isEnabled(feature: string): boolean {\n    return this.#featureFlags.get(feature) ?? false;\n  }\n}\n```", "```js\nimport { HttpClient } from '@angular/common/http';\nimport { APP_INITIALIZER, FactoryProvider } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { mapTo, tap } from 'rxjs/operators';\nimport { FeatureFlagService } from './feature-flag.service';\nfunction configureFeatureFlags(\n  featureFlagService: FeatureFlagService,\n  http: HttpClient\n): () => Observable<void> {\n  return () =>\n    http.get<{ [feature: string]: boolean \n     }>('/assets/features.json').pipe(\n      tap((features) => \n       featureFlagService.configureFeatures(features)),\n      mapTo(undefined)\n    );\n}\nexport const featureFlagInitializer: FactoryProvider = {\n  deps: [FeatureFlagService, HttpClient],\n  multi: true,\n  provide: APP_INITIALIZER,\n  useFactory: configureFeatureFlags,\n};\n```", "```js\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { AppComponent } from './app.component';\nimport { featureFlagInitializer } from './feature-flag.initializer';\n@NgModule({\n  bootstrap: [AppComponent],\n  declarations: [AppComponent],\n  imports: [BrowserModule, HttpClientModule, \n   MatSlideToggleModule],\n  providers: [featureFlagInitializer],\n})\nexport class AppModule {}\n```", "```js\nimport { Component } from '@angular/core';\nimport { FeatureFlagService } from './feature-flag.service';\n@Component({\n  selector: 'app-root',\n  template: `\n    <div>\n      <mat-slide-toggle\n        [checked]=\"featureFlagService.isEnabled(\n         'middleOutCompression')\"\n      >\n        Middle-out compression\n      </mat-slide-toggle>\n    </div>\n    <div>\n      <mat-slide-toggle\n        [checked]=\"featureFlagService.isEnabled(\n         'decentralized')\"\n      >\n        Decentralized application\n      </mat-slide-toggle>\n    </div>\n  `,\n})\nexport class AppComponent {\n  constructor(public featureFlagService: \n    FeatureFlagService) {}\n}\n```"]