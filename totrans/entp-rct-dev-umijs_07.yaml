- en: 'Chapter 5: Code Style and Formatting Tools'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In addition to meeting business requirements, a professional frontend project
    should feature clean source code that is easy to maintain and extend.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we'll discuss code style and consistency. Next, you'll learn
    how to use **Prettier** and **EditorConfig** to enforce standard code formatting
    in teams with multiple members working with various **integrated development environments**
    (**IDEs**) and editors. Finally, we'll add **ESLint** to our project and configure
    it to work with Prettier and improve your code quality.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll cover the following main topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Understanding code style and consistency
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with EditorConfig and Prettier
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring ESLint and Prettier
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you'll have learned how to configure Prettier and
    EditorConfig, avoiding conflicts and redundancy. You'll also have learned how
    to configure ESLint to improve the code quality and Prettier to format the code
    in the same project, avoiding conflicts between these two tools.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To complete this chapter's exercises, you only need a computer with any OS (I
    recommend Ubuntu 20.04 or higher) and the software installed in [*Chapter 1*](B18503_01_Final_JM_ePub.xhtml#_idTextAnchor014)*,
    Environment Setup and Introduction to UmiJS* (VS Code, Node.js, and Yarn).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: You can find the complete project in the `Chapter05` folder in the GitHub repository
    available at [https://github.com/PacktPublishing/Enterprise-React-Development-with-UmiJs](https://github.com/PacktPublishing/Enterprise-React-Development-with-UmiJs).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: Understanding code style and consistency
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we'll discuss code style with some examples, so you will be
    able to understand why it's essential to use tools such as **Prettier**, **EditorConfig**,
    and **ESLint** when working on large enterprise projects.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: We will not discuss JavaScript code conventions, but if you want to revise this
    topic, I recommend you read the *Mozilla Developer Network JavaScript Guidelines*
    at [https://developer.mozilla.org/en-US/docs/MDN/Guidelines/Code_guidelines/JavaScript](https://developer.mozilla.org/en-US/docs/MDN/Guidelines/Code_guidelines/JavaScript).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: 'Each developer has their preferences when deciding how to format code. Even
    when following a specific language convention, some decisions about the code formatting
    can divide developers. Consider the following function invocation example:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here, we invoke the function by passing the arguments inline. In some cases,
    when passing more arguments, you may need to break down the function call, and
    you can do that in different ways. Consider the following example:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.1 – Breaking down a function call in three different styles'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.01_B18503.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.1 – Breaking down a function call in three different styles
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we broke down the same function call using three distinct styles: hug
    the last parenthesis, align the parentheses, and align the arguments. Now imagine
    that the first argument is another function call; the complexity starts to grow.
    Consider another example:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.2 – Breaking down functions and inner functions'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.02_B18503.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.2 – Breaking down functions and inner functions
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: Here, we broke down the function and inner function calls using three different
    code styles. You may have noticed that each approach drastically changes the code
    style. As more developers work on the code and use different styles, the code
    base will become unclean, unprofessional, and hard to read.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the style decisions can also make the code harder to understand. Consider
    the following example:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.3 – Conditional ternary operator with and without parentheses'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.03_B18503.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.3 – Conditional ternary operator with and without parentheses
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we used the conditional ternary operator with two different styles: without
    parentheses and enclosing with parentheses. Using parentheses in complex conditions
    makes the code easier to read and understand.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: The professional approach to developing clean and consistent code when working
    with large projects and multiple team members is to define a standard code style
    that every developer must follow. The code style should be discussed and documented
    so that every developer knows how to use it. This approach introduces other challenges,
    however, as we need to ensure that all developers follow the code style. Probably,
    you will end up reviewing the code to fix code style issues, which is a waste
    of time and money as it doesn't deliver value to the customer.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: To avoid spending time reviewing code only to fix code style issues, we can
    use formatting tools that enforce the code style.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use numerous tools to enforce code style and consistency in JavaScript
    projects. In the coming sections, we will focus on three tools that solve the
    problems mentioned previously. We will look at the following three tools:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: Prettier, a formatting tool that can parse and format JavaScript, LESS style
    sheets, JSX components, and more
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: EditorConfig, a tool for enforcing a default code format that almost any IDE
    can follow
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ESLint, a tool for formatting and fixing code and finding quality-related issues
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this section, we discussed different code styles by seeing examples and understanding
    why we need to implement tools and strategies to enforce a consistent code style
    when working on large projects with multiple team members.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's take a closer look at Prettier and EditorConfig to see how these
    two tools can work together to solve the code style problem.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: Working with EditorConfig and Prettier
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, you'll learn how **Prettier** and **EditorConfig** can work
    together to enforce the code style across IDEs and developers' code and how to
    prevent redundancy when configuring these tools.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: Let's start by learning how EditorConfig works.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: Working with EditorConfig
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: EditorConfig consists of a format file and a set of plugins that ensure almost
    any IDE or editor follows the code style you have defined as you type. In some
    cases, you don't even need to install any extensions as various IDEs and editors
    come with native support for EditorConfig. You can read more about EditorConfig
    at [https://editorconfig.org/](https://editorconfig.org/).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take the example of the format file that comes with the **umi-app**
    template, which we used to start our project from scratch:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: .editorconfig
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We used the following options in our project:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '`root`: We used this option to tell EditorConfig that we are in the `root`
    folder, and it doesn''t need to search for `.editorconfig` files in any other
    folders.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[*]`: We used this wildcard pattern to apply the following options to every
    file in the project.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`indent_style`: We used this option to define indentation using spaces instead
    of tabs.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`indent_size`: We used this option to define two spaces for indentation.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`end_of_line`: This option sets which control character we want to use to mark
    a line break. We choose the **line feed** (**LF**) character (0x0A).'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The default control character can vary depending on the IDE or editor. Also,
    IDEs don't render this kind of character, so it's essential to use this option
    to ensure consistency across IDEs.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: '`charset`: We used this option to define the character set as `utf-8`.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`trim_trailing_whitespace`: We set this option to `true` to remove any whitespace
    characters before new lines.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`insert_final_newline`: We used this option to ensure all files end with a
    new line.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[*.md]`: We used this wildcard pattern to apply the following option to the
    `README.md` file and other documentation defined using markdown.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`trim_trailing_whitespace`: We set this option to `false` to ensure whitespaces
    exist before new lines.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[Makefile]`: We used this wildcard pattern to apply the following option to
    any `Makefile` present in the project.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We usually create commands and logic in `Makefile` and use the **make** utility
    to build and compile the application.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: 'You can read more about this tool at: [https://www.gnu.org/software/make/](https://www.gnu.org/software/make/).'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '`indent_style`: Here, we used this option to define the indentation using tabs.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you may have noticed, we can control every critical aspect of the code style
    and customize the formatting for each resource type in our project using EditorConfig.
    All this configuration works across IDEs and editors so that the code style will
    be consistent no matter what the developers' preferences are.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: Next, we'll see Prettier, another tool that works well with EditorConfig, to
    enforce the code style and consistency.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: Working with Prettier
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Prettier is a code formatting tool that supports numerous JavaScript frameworks,
    style sheet extensions, markup languages, and configuration files.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: As you know, we have been using Prettier since [*Chapter 1*](B18503_01_Final_JM_ePub.xhtml#_idTextAnchor014)*,
    Environment Setup and Introduction to UmiJS*. We configured VS Code to use Prettier
    to format the code on saving and pasting.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: In our project, EditorConfig and Prettier share the responsibility to enforce
    the code style but with different approaches. While EditorConfig overrides the
    code style of the IDE or editor and ensures that the code is correctly formatted
    as you type, Prettier applies a standard code style after the developer types
    the code, replacing the styles with a standard code style defined by Prettier.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: When using Prettier, the developer doesn't need to worry about following a specific
    code style; they can focus on defining interfaces and developing business rules.
    Prettier will do the job of formatting the code with a consistent code style,
    and almost all debates about the team's code style are no longer necessary.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: 'Although Prettier doesn''t require a lot of configurations, there are some
    options we can define in the `.prettierrc` file. Let''s take a closer look at
    our project''s configuration:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: .prettierrc
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'These are the options defined in the `.prettierrc` file:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '`singleQuote`: We used this option to use single quotes instead of double quotes
    in our code, except when writing in JSX files, which skip this option and use
    double quotes.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`trailingComma`: We used this option to print trailing commas wherever possible
    in our code.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`printWidth`: We used this option to define the maximum line length before
    Prettier breaks the line.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`overrides`: This option is similar to the wildcard pattern from EditorConfig.
    In this option, we can override the options for specific files. Here, we configured
    Prettier to use the `JSON parser` specifically for the `.prettierrc` file.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The options you can set in `.prettierrc` are limited because Prettier enforces
    its standard code style. You can find other options in the Prettier documentation
    at [https://prettier.io/docs/en/options.html](https://prettier.io/docs/en/options.html).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: When using Prettier and EditorConfig in the same project, you need to avoid
    setting redundant options between these two tools. A good approach is to put only
    relevant options to override IDE and editor code style in the `.editorconfig`
    file and ensure that you are not repeating these options in the `.prettierrc`
    file.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: You can see that, in our project, all the configurations in EditorConfig are
    different to the configurations in Prettier.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: Prettier will parse the `.editorconfig` file to follow its configuration when
    formatting the code. As the IDE already formated the code by following the EditorConfig
    rules, Prettier can skip those rules and apply its own code style rules.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we learned how to configure EditorConfig by defining code style
    rules in the `.editorconfig` file and Prettier by defining rules in the `.prettierrc`
    file. We also learned how to avoid redundancy when working with these tools together.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: Next, we'll add ESLint to the project, an essential tool that complements EditorConfig
    and Prettier in improving the code quality.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: Configuring ESLint and Prettier
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we'll configure **ESLint** and integrate Prettier with ESLint
    to improve the code quality, and to prevent conflicts between these two tools.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: ESLint is a tool for analyzing, fixing, and reporting inconsistencies and issues
    that can generate bugs in your code. This tool can format and improve the code
    quality with various plugins that implement the rules that meet your project's
    needs. You can read more about ESLint at [https://eslint.org/](https://eslint.org/).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: Like Prettier and EditorConfig, ESLint also applies style rules to the code.
    In our scenario, where we use EditorConfig to override the IDE code style and
    Prettier to enforce a consistent code style by applying its own rules, we'll use
    only the code quality rules that ESLint offers. We could use only ESLint for code
    quality and formatting, but Prettier excels in code formatting and easily integrates
    with ESLint.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: 'Before getting into the details about integrating Prettier and ESLint, let''s
    install and configure ESLint by following these steps:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: 'Install ESLint by running the following command:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Next, run the following command to configure ESLint:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'For the first question, **How would you like to use ESLint?**, select the **To
    check syntax and find problems** option in the terminal and press *Enter*:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.4 – ESLint configuration – How would you like to use ESLint?'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.04_B18503.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.4 – ESLint configuration – How would you like to use ESLint?
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: 'For the second question, **What type of modules does your project use?**, select
    the **JavaScript modules (import/export)** option in the terminal and press *Enter*:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.5 – ESLint configuration – What type of modules does your project
    use?'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.05_B18503.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.5 – ESLint configuration – What type of modules does your project use?
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: 'For the third question, **Which framework does your project use?**, select
    the **React** option and press *Enter*:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.6 – ESLint configuration – Which framework does your project use?'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.06_B18503.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.6 – ESLint configuration – Which framework does your project use?
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: 'For the fourth question, **Does your project use TypeScript?**, select the
    **Yes** option and press *Enter*:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.7 – ESLint configuration – Does your project use TypeScript?'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.07_B18503.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.7 – ESLint configuration – Does your project use TypeScript?
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: 'For the fifth question, **Where does your code run?**, select **Browser** and
    press *Enter*:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.8 – ESLint configuration – Where does your code run?'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.08_B18503.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.8 – ESLint configuration – Where does your code run?
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: 'For the sixth question, **What format do you want your config file to be in?**,
    select **JSON** and press *Enter*:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.9 – ESLint configuration – What format do you want your config file
    to be in?'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.09_B18503.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.9 – ESLint configuration – What format do you want your config file
    to be in?
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: 'For the seventh question, **Would you like to install them now with npm?**,
    select **No** and press *Enter* as we''ll use Yarn instead of npm:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.10 – ESLint configuration – Would you like to install them (dependencies)
    now with npm?'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.10_B18503.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.10 – ESLint configuration – Would you like to install them (dependencies)
    now with npm?
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we need to install the dependencies required by running the following
    command:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Finally, let''s add the VS Code extension to integrate ESLint. Press *Ctrl
    + P*, type the following command, and press *Enter*:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'After following the preceding steps, a new file called `.eslintrc.json` should
    exist in our project with the ESLint configuration. Let''s take a closer look
    at those configurations:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: .eslintrc.json
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'These are the options defined in the `.eslintrc.json` file:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: '`env`: This option defines the global variable. Here, ESLint declares that
    we are working in the browser and using ECMAScript 2021.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`extends`: We can extend other configuration files or plugin configurations
    with this option. Here, ESLint extends its recommended rules, `react` plugin rules,
    and `typescript-eslint` plugin rules.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`parser` and `parserOptions`: With these options, we can define what code parser
    to use and define the parser options. Here, ESLint sets the parser to TypeScript
    using the `typescript-eslint` package and enables the JSX option.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`plugins`: With this option, we can set ESLint plugins. Here, ESLint uses the
    `react` and `typescript-eslint` plugins.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rules`: With this option, we can modify the ESLint rules to meet our project''s
    needs.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We want Prettier and EditorConfig working on the code style and ESLint working
    on the code quality, so we need to disable the ESLint formatting rules. This approach
    will also prevent conflicts between Prettier and ESLint. Follow these steps to
    disable the ESLint formatting rules:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the configurations to disable the ESLint style rules by running the
    following command:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, install the Prettier ESLint plugin by running the following command:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Finally, extend the Prettier plugin''s recommended configurations as follows:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Notice that we extended the Prettier plugin's configuration as the last element
    in the `extends` array. It's important to follow this order for ESLint to correctly
    merge the shared configurations.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: If you open any page component, you can see ESLint in action. Let's open the
    home page component located in the `index.tsx` file in the `/src/pages/Home` folder.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.11 – ESLint react-in-jsx-scope rule'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.11_B18503.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.11 – ESLint react-in-jsx-scope rule
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice that ESLint found an error based on the `jsx-runtime` configuration
    from the `react` plugin in our ESLint configuration as follows:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到 ESLint 根据我们 ESLint 配置中 `react` 插件的 `jsx-runtime` 配置找到了以下错误：
- en: '[PRE11]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In this section, we installed and configured ESLint to ensure code quality.
    We also learned how to integrate Prettier with ESLint by disabling the ESLint
    code style rules and preventing conflicts between these two tools.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们安装并配置了 ESLint 以确保代码质量。我们还学习了如何通过禁用 ESLint 代码风格规则并防止这两个工具之间的冲突来将 Prettier
    与 ESLint 集成。
- en: Summary
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we discussed code style and learned that it is essential to
    ensure a consistent code style when working on professional projects with multiple
    team members.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了代码风格，并了解到在多个团队成员参与的专业项目中工作时，确保一致的代码风格是至关重要的。
- en: We learned how to use EditorConfig to define a consistent code style across
    IDEs and editors and maintain the same formatting regardless of developers' preferences.
    Next, we learned how to work with Prettier to enforce the code style and how to
    avoid redundancy when working with Prettier and EditorConfig in the same project.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学习了如何使用 EditorConfig 在 IDE 和编辑器之间定义一致的代码风格，并保持相同的格式，无论开发者的偏好如何。接下来，我们学习了如何与
    Prettier 合作来强制执行代码风格，以及如何在同一项目中与 Prettier 和 EditorConfig 一起工作时避免冗余。
- en: We also installed and configured ESLint to improve the code quality by analyzing
    and reporting code issues in your project. We disabled the ESLint style rules
    by installing and extending the Prettier plugin configuration in our ESLint configuration
    file. Finally, we disabled the **react-in-jsx-scope** rule by extending the corresponding
    configuration from the ESLint React plugin.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还安装并配置了 ESLint，通过分析并报告项目中的代码问题来提高代码质量。我们通过在 ESLint 配置文件中安装并扩展 Prettier 插件配置来禁用了
    ESLint 风格规则。最后，我们通过扩展 ESLint React 插件中的相应配置来禁用了 **react-in-jsx-scope** 规则。
- en: In the next chapter, we'll discuss code tests and learn how to write tests using
    the **Jest** and **Puppeteer** libraries.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论代码测试，并学习如何使用 **Jest** 和 **Puppeteer** 库编写测试。
