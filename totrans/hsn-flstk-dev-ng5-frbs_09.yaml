- en: Connecting Chat Components with Firebase Database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will integrate our chat components with the new messaging service.
    We will discuss a new method to pass our data to our chat module using route parameters.
    Once a friend's UID is passed from the user friend list component, then we will
    pass this friend's UID to a different chat component, as this data is required
    in the message list and message form components. We will also design a database
    for our chat application, as a proper design avoids data duplication. Once the
    database is ready, we will query the data from the message service and integrate
    the message service with the chat components.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Passing data using route parameters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Passing friend data to different chat components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Designing a Firebase database for chat
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the messaging service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating service to chat components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Passing data using route parameters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When a user clicks on the Chat button, we pass the friend UID to the chat component
    using route parameters.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the [Chapter 5](part0079.html#2BASE0-bb7c6bfbc452460584038b7864f000f7),
    *Creating a User Profile Page*, we passed the user data using `BehaviorSubject` in
    the RxJS library. In this section, we will use the route parameter of the router
    link to pass the friend''s UID. We perform the following three steps to pass the
    data using route parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding a route parameter ID
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Linking a route to the parameter
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Reading the parameter
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding a route parameter ID
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the first step mentioned in the preceding list, we need to add the friend''s
    UID parameter to the route link. We add an ID parameter to the path element as
    shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: When a user clicks on the Chat button, this ID is added to URL as `http://localhost:4200/friends-chat/8wcVXYmEDQdqbaJ12BPmpsCmBMB2`.
  prefs: []
  type: TYPE_NORMAL
- en: Linking a route to the parameter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the second step mentioned in the preceding list, we need to link the friend''s
    UID to the router link. The following are the two methods to achieve it:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Router link directive**: We can directly link the parameter ID using the `routerLink`
    directive, as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Programmatically using router**: When a user clicks on the Chat button, we
    pass the UID to the method parameter and use a router to pass the data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We add a Chat button to the friends list of our user. We modify the template
    of our user''s friends, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'When a user clicks on the Chat button, the `onChat()` method is called with
    a UID as its parameter. Finally, we call the `router` method to pass the `id`
    as the route parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Reading the parameter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We use `ActivatedRoute` to read the parameter ID. This component provides a
    collection of parameters to read the ID. We subscribe to route parameters and
    store the subscription object in member variables and unsubscribe it in the Angular
    life cycle `ngOnDestroy()` method.
  prefs: []
  type: TYPE_NORMAL
- en: '`OnDestroy` is an Angular life cycle hook interface. It has the `ngOnDestroy()`
    method and is called for cleanup logic when the components are destroyed.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the complete `chat.component.ts` file as of now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: We will cover how to pass UID data to other chat components in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Passing friend data to different chat components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once we have the friend''s UID in our chat module, we can pass the friend''s
    UID to our message list and the message form component using Angular data binding.
    We perform the following two steps to pass the data to two chat components:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Declaring the input variables**: We declare the input variables using the
    Angular `@Input` annotation in the two chat components. The following snippet
    shows the changes for the message list and message form components.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '**Binding the data to input**: We can bind the input variable `friendUid` with `uid`,
    which was passed from the user module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: We will use this friend's UID to read or update the Firebase database.
  prefs: []
  type: TYPE_NORMAL
- en: Designing a Firebase database for chat
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Designing the Firebase database is the most crucial part in writing the chat
    feature.
  prefs: []
  type: TYPE_NORMAL
- en: 'Chat involves communication between two persons. It has a sender and receiver,
    and both can see the same text messages. We have to associate two users with the
    same messages, and this involves mainly two steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Creating a new chat ID**: The first step is to associate the unique message
    ID for both persons. We create a unique message ID and associate the two users
    using their UID. As shown in the following screenshot, we associate the "-KvMW57CNfA40GJNDF-F"
    key with both UIDs.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00031.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'When the user clicks on the Chat button in their friend''s page, we will check
    for the key and freshly create the ID, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '`AngularFireDatabase` has a `createPushId()` method to create the unique ID.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the sample code from `messaging.service.ts`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '**Associating messages with the key**: Once we create the key for the users,
    we create the new node in our Firebase database, associate this key as a node,
    and push the messages in this node so that both the users have access. In the
    database schema, we will create receiver and sender nodes with UIDs so that we
    know who has sent the message and align the messages in the chat window based
    on this condition'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00032.gif)'
  prefs: []
  type: TYPE_IMG
- en: We store the key in the member variable of the service so that we use this key
    to push a new message to our Firebase database.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the sample code from `messaging.service.ts`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Creating a messaging service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first step in creating the messaging service is to define a data model.
    We create a message model with properties; the message model consists of the following
    four properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Message**: This contains the message in a string type.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sender UID**: The sender UID is used to know the identity of the sender of
    the particular message and write logic to display the text message on the left
    panel of the chat window.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Receiver UID**: The receiver UID is used to know the identity of the receiver
    of the particular message and write logic to display the text message on the right
    panel of the chat window.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Timestamp**: This property is used to display the date and time of the message
    sent.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here''s the `message.ts` as of now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: As a part of the chat feature, we declare a constant to know the node of the
    Firebase database, as shown in the next code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the `database-constants.ts` file as of now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The core part of our messaging feature is the service. This service is responsible
    for creating the chat ID, pushing the new message, and getting messages. As part
    of this application, we have introduced the following four APIs:'
  prefs: []
  type: TYPE_NORMAL
- en: '**`isMessagePresent()`**: When a user clicks on the Chat button, we check whether
    a message key is present and store the key in the member variable in this service.
    We use this key to push any new messages in the Firebase database.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`freshlyCreateChatIdEntry()`: We call this API when the user starts a fresh
    communication with a friend. Then, we create the key and store it in the Firebase
    database.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getMessages()`: This API is used to subscribe to all the messages in the conversation,
    and we also get updates when a new message is received.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`createNewMessage()`: When the user clicks on the SEND button, we call this
    API to store the new message in the Firebase database. The new message consists
    of message text, sender UID, receiver UID, and timestamp.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here''s the `messaging.service.ts` file as of now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: In the next section, we will integrate this service to our chat components.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating our service to chat components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Finally, we will integrate the messaging service to the components. We will
    cover the following three use cases:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Checking the message key for a new chat**: When the user initiates a conversation
    with their friend, we call the `isMessagePresent()` API of the messaging service.
    For a fresh conversation, this chat key will not be present, and we need to create
    the new key and use the same key for subsequent communication:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '**Subscribing to the message list**: We will call the `getMessages()` method
    to get a message list observable. We will then subscribe to this observable to
    get a message list and then assign it to `messages` member variables:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the `chat-message-list.component.ts` file as of now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '**Sending messages to Firebase database**: When a user types the message and
    clicks on the SEND button, we create the new message object and call the `createNewMessage()` method
    in the messaging service and this takes care of sending message to Firebase database.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the `chat-message-form.component.ts` file as of now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Finally, we have created a fully functional chat feature for our friends application.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have now come to the end of the chat feature in our friends application.
    In this chapter, we covered the route parameter and used this to pass the friend's
    UID to our chat module. We passed this UID to different chat components using
    the `@Input` binding. We then discussed how to design Firebase database for our
    chat feature. We used Firebase database API in the service and created four APIs
    to perform different operations in our chat feature. Finally, we integrated this
    service with the chat components.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will discuss unit testing in Angular. We will also discuss
    the Jasmine framework and use this framework to unit-test our application.
  prefs: []
  type: TYPE_NORMAL
