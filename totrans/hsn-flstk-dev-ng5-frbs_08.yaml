- en: Creating a Chat Component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will create our chat application in the existing application
    and take a look at real-time message updates using the Firebase database. We will
    explain the chat feature in this and the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Since we have already created components in the preceding chapter, we will design
    a more complex component involving multiple components, in this chapter. As per
    the general rule, we will create this as a module, so we will have the main component
    as a chat component, and this will contain a message list component, form component,
    and message component. We will explore more ways of data binding while implementing
    the chat feature. We will write more complex SCSS in this chapter. We believe
    that, if you follow this chapter properly, most of the Angular stuff will be clearer
    to you, and you'll be able to build a more complex component yourself.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a chat module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a color variable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a chat component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a chat message list component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a mixin for the message view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a chat message component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a chat message form component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a chat module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first step in creating a module is to define the routes and include them
    in the chat module. In the chat routing module, we create chat routes and configure
    them in RouterModules.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the complete `chat-routing.module.ts` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The chat module contains a declaration of all the components, modules, and
    services. In chat features, we have the following four components:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Chat component**: This is the main component, and it encapsulates the message
    list and message form components.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Chat message list component**: This is a message list, which displays the
    messages in the list. It calls the message component for populating the message
    in the textbox.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Chat message form component**: This is a form that takes a message as user
    input and adds the message in the Firebase database.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Chat message component**: This component displays the user-typed message
    and the date when the message was posted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following is the complete `chat.module.ts` as of now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we will include the chat module in the app module, as shown in the
    following code; here''s the modified `app.module.ts` as of now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Presently, our chat module is part of the main app module. Now, we will implement
    the components.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a color variable
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we discuss variable support in SCSS. In CSS, we need to declare
    the color code for each property, and we don''t have any mechanism to reuse the
    same color code in another CSS property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In our application, we use variables and partials to reuse the same color across
    the whole application. We declare all colors in a color file using variables as
    shown in the subsequent code. This file is known as a partial in SCSS and normally
    declared with an underscore.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the complete `_colors.scss` as of now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'First, we import partials into another SCSS file and then use the variables
    to access the color. In the following example, we use the `$concrete_solid` variable to
    reuse the color:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: SCSS variables help us to centralize all the colors in a single file so that,
    when we change the color combination in one file, this reflects in our entire
    application.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a chat component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Chat component is the main container, and it contains a message list component
    and message form component.
  prefs: []
  type: TYPE_NORMAL
- en: It uses Bootstrap component to create a message list column view.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Chat template encapsulates the chat message list and chat message form references.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the complete `chat.component.html` as of now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'We align the main container to the middle of the page using `margin-top` and
    `margin-left`, as shown in the following complete `chat.component.scss` as of
    now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Chat component declares the template, style sheet, and selector. Here''s the
    complete `chat.component.ts` as of now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Chat component provides the layout for other child components.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a chat message list component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The chat message list component displays the message text in a list layout.
    It calls the message component to populate the message text data and time.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we create the list in container `div` and tag the message list `div`
    with `#scrollContainer`, as this helps scroll the list to the bottom of the chat
    window when a new message arrives. We read this tag in the component using the `@ViewChild`
    annotation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we include the chat message selector and loop the messages. The following
    is the complete `chat-message-list.component.html` as of now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'In the following HTML `div` tag, we include two selectors in our template—we
    add a class selector and an ID selector:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'We read the ID selector using a hash followed by name of the selector in the
    SCSS file to style `background-color`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'We use the `box-shadow` and `border-radius` properties to give elevated looks
    for our list container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the complete `chat-message-list.component.scss` as of now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'In the chat message list component, we use `@ViewChild` to read the scroll
    container, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: We then implement `AfterViewChecked` in our component to handle the bottom scroll.
  prefs: []
  type: TYPE_NORMAL
- en: The life cycle method is called whenever the view of the component is checked 
    during change detection.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'We override the life cycle method and, after each new message, we scroll the
    message list to the bottom of the last message. Also, we detect component changes
    using the `ChangeDetectorRef` class. This is required, as we need to force Angular
    to check for changes to the component because the scroll event runs outside Angular''s
    zone:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the complete `chat-message-list.component.ts` as of now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Creating a mixin for the message view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will cover SCSS mixins. This feature provides the flexibility
    to group the CSS properties, and we can reuse this mixin across our application.
    Just like the class method, we can also provide parameters to make the mixin more
    flexible.
  prefs: []
  type: TYPE_NORMAL
- en: We will use this mixin in our application to a add message pointer to our chat
    features. We will declare mixin by prefixing the method name with the `@mixin` keyword
    and add parameters such as `$rotate` and `$skew`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We created mixins for our chat messages in `_shared.scss`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: We use this mixin in our message SCSS. First, we need to import the shared SCSS
    file in our message file and then we use `@include` to call the mixin with the
    parameters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the sample `chat-message.component.scss`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Creating a chat message component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The message component is the message text container. It displays the message
    and time. A typical chat has a bubble view layout. We design this view for our
    chat features. We declare the following three class variables, which we use in
    the SCSS file:'
  prefs: []
  type: TYPE_NORMAL
- en: '`message-bubble`: This selector gives the message bubble view layout'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`class.sender`: This aligns all the messages from the sender on the left side
    of the container'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`class.receiver`: This aligns all the messages from the receiver on the right
    side of the container'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here''s the complete `chat-message.component.html` as of now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'We use a class selector and provide a style to the message box. This consists
    of the following two major parts:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Message box**: This gives the shadow effect to the view'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Message pointer**: This gives a pointer to the message box'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here''s the complete `chat-message.component.scss` as of now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The message box looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00029.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Finally, we write the event method in our component. We retrieve the UID from
    the saved user in our service and write the logic to recognize the receiver and
    sender using the UID.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the complete `chat-message.component.ts` as of now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Creating a chat message form component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the chat message form component, we implement the message form to send the
    message to Firebase and update the list with a new message.
  prefs: []
  type: TYPE_NORMAL
- en: 'For these actions, we will require the following two elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Input with a text area**: The input text allows a user to type their message.
    We use `(key.enter)` in the input text to handle the keyboard''s *Enter* key,
    and this calls the `sendMessage()` method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Send button**: This calls the `sendMessage()` method and updates the Firebase
    database.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here''s the complete `chat-message-form.component.html` as of now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: We use the `chat-message-form-container` class selector to style the border
    with `border-radius` and the `message-text` to style input text-related properties.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the complete `chat-message-form.component.scss` file as of now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: In the chat message form component, we retrieve the UID from the user object
    saved in the user service.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the complete `chat-message-form.component.ts` file as of now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, our chat feature will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00030.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we designed a more complex UI component using multiple components.
    We implemented a chat module and integrated it with the main application. We covered
    new SCSS features such as variables, partials, and mixins. This really helped
    us to modularize our code and showed how reusability can be achieved in SCSS.
    We divided a big chat component into smaller components and then integrated these
    small components.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will integrate our component with the services. We will
    design our Firebase database for our chat application. Then, we will subscribe
    the real-time database and get instant updates.
  prefs: []
  type: TYPE_NORMAL
