["```js\n<div class=\"rp-data-view\">\n    <form [formGroup]=\"recipeForm\">\n        <fieldset class=\"rp-filters-group\">\n            <legend>Filters</legend>\n            <div class=\"rp-filter-button\">\n                <p-button (onClick)=\"clearFilter()\"\n                label=\"Clear all\"></p-button>\n            </div>\n            <label for=\"title\">Keyword:</label>\n            <input type=\"text\" id=\"title\"\n            formControlName=\"title\">\n            <label for=\"category\">Category:</label>\n            <input type=\"text\" id=\"category\"\n            formControlName=\"category\">\n            <label for=\"ingredient\">Ingredient:</label>\n            <input type=\"text\" id=\"ingredient\"\n            formControlName=\"ingredient\">\n            <label for=\"text\">Tags:</label>\n            <input type=\"text\" id=\"tags\"\n            formControlName=\"tags\">\n            <label for=\"text\">Preparation Time:</label>\n            <input type=\"text\" id=\"prepTime\"\n            formControlName=\"prepTime\">\n            <label for=\"text\">Cooking Time:</label>\n            <input type=\"text\" id=\"cookingTime\"\n            formControlName=\"cookingTime\">\n            <div class=\"rp-filter-button\">\n                <p-button class=\"rp-filter-button\"\n                (onClick)=\"filterResults()\" label=\"See\n                results\"></p-button>\n            </div>\n        </fieldset>\n    </form>\n</div>\n```", "```js\n<div class=\"card\">\n    <p-dataView #dv [value]=\"filteredRecipes\"\n    [paginator]=\"true\" [rows]=\"9\" filterBy=\"name\"\n    layout=\"grid\">\n    /** Extra code here **/\n    </p-dataView>\n</div>\n```", "```js\nexport class RecipesListComponent implements OnInit,\nOnDestroy {\n  filteredRecipes: Recipe[] = [];\n  recipes: Recipe[] = [];\n  private destroy$: Subject<boolean> = new\n  Subject<boolean>();\n  constructor(private service: RecipesService, private fb:\n  FormBuilder) {\n  }\n  ngOnInit(): void {\n    this.service.recipes$.pipe(takeUntil(this.destroy$))\n      .subscribe((recipes) => {\n        this.recipes = recipes;\n        this.filteredRecipes = recipes;\n      });\n  }\n  ngOnDestroy(): void {\n    this.destroy$.next(true);\n    this.destroy$.unsubscribe();\n  }\n  filterResults(recipe:Recipe) {\n    this.filteredRecipes = this.recipes.filter(recipe =>\n    recipe.title?.indexOf(recipe.title) !=\n    -1)\n  }\n```", "```js\n  filterResults() {\n    this.filteredRecipes =\n    this.http.get<Recipe[]>(`${BASE_PATH}/recipes`,\n    {params:{criteria:this.recipeForm.value}});\n  }\n```", "```js\n      export class RecipesListComponent {\n      /*Define The data stream */\n      recipes$ = this.service.recipes$;\n      constructor(private service: RecipesService) { }\n    }\n    ```", "```js\n      /*Create The action stream */\n      Private filterRecipeSubject = new\n      BehaviorSubject<Recipe>({title:''});\n      /* Extract The readonly stream */\n      filterRecipesAction$ =\n      this.filterRecipeSubject.asObservable();\n    ```", "```js\nexport class RecipesService {\n  recipes$ =\n    this.http.get<Recipe[]>(`${BASE_PATH}/recipes`);\n  private filterRecipeSubject = new\n    BehaviorSubject<Recipe>({title: '' });\n  filterRecipesAction$ =\n    this.filterRecipeSubject.asObservable();\n  constructor(private http: HttpClient) { }\n}\n```", "```js\nfilterRecipesAction$ = this.service.filterRecipesAction$;\nfilteredRecipes$ = combineLatest([this.recipes$,\n  this.filterRecipesAction$])\n```", "```js\n@if (filteredRecipes$ | async; as recipes) {\n<div class=\"card\">\n    <p-dataView #dv [value]=\"recipes\" [paginator]=\"true\"\n    [rows]=\"9\" filterBy=\"name\" layout=\"grid\">\n        /** Extra code here **/\n    </p-dataView>\n</div>\n} @else {\n<div>There are no recipes</div>\n}\n```", "```js\nfilteredRecipes$ = combineLatest([this.recipes$,\n  this.filterRecipesAction$]).pipe(\n    map((resultAsArray:[Recipe[], Recipe]) => {\n      const filterTitle =\n        resultAsArray[1]?.title?.toLowerCase() ?? '';\n      return resultAsArray[0].filter(recipe =>\n        recipe.title?.toLowerCase().includes(filterTitle));\n    })\n  );\n```", "```js\nfilteredRecipes$ = combineLatest([this.recipes$,\n  this.filterRecipesAction$]).pipe(\n    map(([recipes, filter]: [Recipe[], Recipe]) => {\n      const filterTitle =\n        filter?.title?.toLowerCase() ?? '';\n      return recipes.filter(recipe =>\n        recipe.title?.toLowerCase().includes(filterTitle))\n    })\n  );\n```", "```js\n  updateFilter(criteria:Recipe) {\n    this.filterRecipeSubject.next(criteria);\n  }\n```", "```js\nfilterResults() {\n  this.service.updateFilter(<Recipe>this.recipeForm.value);\n}\n```", "```js\n@Component({\n  selector: 'app-recipes-list',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './recipes-list.component.html',\n  styleUrls: ['./recipes-list.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RecipesListComponent {\n  /*The data stream */\n  recipes$ = this.service.recipes$;\n  filteredRecipes$ = combineLatest([this.recipes$,\n  this.filterRecipesAction$]).pipe(\n    map(([recipes, filter]: [Recipe[], Recipe]) => {\n    const filterTitle = filter?.title?.toLowerCase() ?? '';\n      return recipes.filter(recipe =>\n      recipe.title?.toLowerCase().includes(filterTitle)\n    })\n  );\n  constructor(private service: RecipesService) {\n  }\n}\n```", "```js\n@Component({\n  selector: 'app-recipes-filter',\n  standalone: true,\n  imports: [ButtonModule, ReactiveFormsModule],\n  templateUrl: './recipes-filter.component.html',\n  styleUrl: './recipes-filter.component.css'\n})\nexport class RecipesFilterComponent {\n  recipeForm = this.fb.group<Recipe>({\n    title: '',\n    category: '',\n    ingredients: '',\n    tags: '',\n    prepTime: undefined,\n    cookingTime: undefined,\n  });\nconstructor(private service: RecipesService, private fb:\n  FormBuilder) { }\nfilterResults() {\nthis.service.updateFilter(<Recipe>this.recipeForm.value);\n}\nclearFilters() {\nthis.recipeForm.reset();\n}\n```", "```js\nexport class RecipesService {\n  recipes$ = this.http.get<Recipe[]>(\n  `${BASE_PATH}/recipes`);\n  private filterRecipeSubject = new\n  BehaviorSubject<Recipe>({ title: '' });\n  filterRecipesAction$ =\n  this.filterRecipeSubject.asObservable();\n  constructor(private http: HttpClient) { }\n  updateFilter(criteria:Recipe) {\n    this.filterRecipeSubject.next(criteria);\n  }\n}\n```"]