- en: '2'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Rendering Lists and Detail Views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The previous chapter introduced the core TDD cycle: red, green, refactor. You
    had the chance to try it out with two simple tests. Now, it’s time to apply that
    to a bigger React component.'
  prefs: []
  type: TYPE_NORMAL
- en: 'At the moment, your application displays just a single item of data: the customer’s
    name. In this chapter, you’ll extend it so that you have a view of all appointments
    for the current day. You’ll be able to choose a time slot and see the details
    for the appointment at that time. We will start this chapter by sketching a mock-up
    to help us plan how we’ll build out the component. Then, we’ll begin implementing
    a list view and showing appointment details.'
  prefs: []
  type: TYPE_NORMAL
- en: Once we’ve got the component in good shape, we’ll build the entry point with
    webpack and then run the application in order to do some manual testing.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Sketching a mock-up
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the new component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Specifying list item content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Selecting data to view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manually testing our changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you’ll have written a decent-sized React component
    using the TDD process you’ve already learned. You’ll also have seen the app running
    for the first time.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The code files for this chapter can be found at [https://github.com/PacktPublishing/Mastering-React-Test-Driven-Development-Second-Edition/tree/main/Chapter02](https://github.com/PacktPublishing/Mastering-React-Test-Driven-Development-Second-Edition/tree/main/Chapter02).
  prefs: []
  type: TYPE_NORMAL
- en: Sketching a mock-up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let’s start with a little more up-front design. We’ve got an `Appointment`
    component that takes an appointment and displays it. We will build an `AppointmentsDayView`
    component around it that takes an array of `appointment` objects and displays
    them as a list. It will also display a single `Appointment`: the appointment that
    is currently selected. To select an appointment, the user simply clicks on the
    time of day that they’re interested in.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.1 – A mock-up of our appointment system UI ](img/Figure_2.01_B18423.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.1 – A mock-up of our appointment system UI
  prefs: []
  type: TYPE_NORMAL
- en: Up-front design
  prefs: []
  type: TYPE_NORMAL
- en: When you’re using TDD to build new features, it’s important to do a little up-front
    design so that you have a general idea of the direction your implementation needs
    to take.
  prefs: []
  type: TYPE_NORMAL
- en: That’s all the design we need for now; let’s jump right in and build the new
    `AppointmentsDayView` component.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the new component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we’ll create the basic form of `AppointmentsDayView`: a list
    of appointment times for the day. We won’t build any interactive behavior for
    it just yet.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll add our new component into the same file we’ve been using already because
    so far there’s not much code in there. Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Placing components
  prefs: []
  type: TYPE_NORMAL
- en: We don’t always need a new file for each component, particularly when the components
    are short functional components, such as our `Appointment` component (a one-line
    function). It can help to group related components or small sub-trees of components
    in one place.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `test/Appointment.test.js`, create a new `describe` block under the first
    one, with a single test. This test checks that we render a `div` with a particular
    ID. That’s important in this case because we load a CSS file that looks for this
    element. The expectations in this test use the DOM method, `querySelector`. This
    searches the DOM tree for a single element with the tag provided:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: It isn’t usually necessary to wrap your component in a `div` with an ID or a
    class. We tend to do it when we have CSS that we want to attach to the entire
    group of HTML elements that will be rendered by the component, which, as you’ll
    see later, is the case for `AppointmentsDayView`.
  prefs: []
  type: TYPE_NORMAL
- en: This test uses the exact same `render` function from the first `describe` block
    as well as the same `let container` declaration and `beforeEach` block. In other
    words, we’ve introduced duplicated code. By duplicating code from our first test
    suite, we’re making a mess straight after cleaning up our code! Well, we’re allowed
    to do it when we’re in the first stage of the TDD cycle. Once we’ve got the test
    passing, we can think about the right structure for the code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run `npm test` and look at the output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let’s work on getting this test to pass by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To fix this, change the last `import` statement in your test file to read as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `src/Appointment.js`, add this functional component below `Appointment`
    as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run your tests again. You''ll see output like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, a test failure! Let’s get that `div` in place as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Your test should now be passing. Let’s move on to the next test. Add the following
    text, just below the last test in `test/Appointment.test.js`, still inside the
    `AppointmentsDayView` `describe` block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run your tests again and you''ll see output matching the text shown below:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To make that pass, add the `ol` element as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Alright, now let’s fill that `ol` with an item for each appointment. For that,
    we’ll need (at least) two appointments to be passed as the value of the `appointments`
    prop, as. Add the next test, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Testing dates and times
  prefs: []
  type: TYPE_NORMAL
- en: In the test, the `today` constant is defined to be `new Date()`. Each of the
    two records then uses this as a base date. Whenever we’re dealing with dates,
    it’s important that we base all events on the same moment in time, rather than
    asking the system for the current time more than once. Doing that is a subtle
    bug waiting to happen.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run `npm test` again and you''ll see this output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To fix this, we map over the provided `appointments` prop and render an empty
    `li` element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Ignoring unused function arguments
  prefs: []
  type: TYPE_NORMAL
- en: The `map` function will provide an `appointment` argument to the function passed
    to it. Since we don’t use the argument (yet), we don’t need to mention it in the
    function signature—we can just pretend that our function has no arguments instead,
    hence the empty brackets. Don’t worry, we’ll need the argument for a subsequent
    test, and we’ll add it in then.
  prefs: []
  type: TYPE_NORMAL
- en: 'Great, let’s see what Jest thinks. Run `npm test` again:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Our test passed, but we got a warning from React. It’s telling us to set a
    key value on each child element. We can use `startsAt` as a key, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Testing keys
  prefs: []
  type: TYPE_NORMAL
- en: There’s no easy way for us to test key values in React. To do it, we’d need
    to rely on internal React properties, which would introduce a risk of tests breaking
    if the React team were to ever change those properties.
  prefs: []
  type: TYPE_NORMAL
- en: The best we can do is set a key to get rid of this warning message. In an ideal
    world, we’d have a test that uses the `startsAt` timestamp for each `li` key.
    Let’s just imagine that we have that test in place.
  prefs: []
  type: TYPE_NORMAL
- en: This section has covered how to render the basic structure of a list and its
    list items. Next, it’s time to fill in those items.
  prefs: []
  type: TYPE_NORMAL
- en: Specifying list item content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, you’ll add a test that uses an array of example appointments
    to specify that the list items should show the time of each appointment, and then
    you’ll use that test to support the implementation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start with the test:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a fourth test in the new `describe` block as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Jest will show the following error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The toEqual matcher
  prefs: []
  type: TYPE_NORMAL
- en: This matcher is a stricter version of `toContain`. The expectation only passes
    if the text content is an exact match. In this case, we think it makes sense to
    use `toEqual`. However, it’s often best to be as loose as possible with your expectations.
    Tight expectations have a habit of breaking any time you make the slightest change
    to your code base.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following function to `src/Appointment.js`, which converts a Unix timestamp
    (which we get from the return value from `setHours`) into a time of day. It doesn’t
    matter where in the file you put it; we usually like to define constants before
    we use them, so this would go at the top of the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Understanding syntax
  prefs: []
  type: TYPE_NORMAL
- en: This function uses *destructuring assignment* and *template literals*, which
    are language features that you can use to keep your functions concise.
  prefs: []
  type: TYPE_NORMAL
- en: Having good unit tests can help teach advanced language syntax. If we’re ever
    unsure about what a function does, we can look up the tests that will help us
    figure it out.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the preceding function to update `AppointmentsDayView` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Running tests should show everything as green:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is a great chance to refactor. The last two `AppointmentsDayView` tests
    use the same `twoAppointments` prop value. This definition, and the `today` constant,
    can be lifted out into the `describe` scope, the same way we did with `customer`
    in the `Appointment` tests. This time, however, it can remain as `const` declarations
    as they never change.
  prefs: []
  type: TYPE_NORMAL
- en: To do that, move the `today` and `twoAppointments` definitions from one of the
    tests to the top of the `describe` block, above `beforeEach`. Then, delete the
    definitions from both tests.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That’s it for this test. Next, it’s time to focus on adding click behavior.
  prefs: []
  type: TYPE_NORMAL
- en: Selecting data to view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s add in some dynamic behavior to our page. We’ll make each of the list
    items a link that the user can click on to view that appointment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Thinking through our design a little, there are a few pieces we’ll need:'
  prefs: []
  type: TYPE_NORMAL
- en: A `button` element within our `li`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An `onClick` handler that is attached to that `button` element
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Component state to record which appointment is currently being viewed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When we test React actions, we do it by observing the consequences of those
    actions. In this case, we can click on a button and then check that its corresponding
    appointment is now rendered on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll break this section into two parts: first, we’ll specify how the component
    should initially appear, and second, we’ll handle a click event for changing the
    content.'
  prefs: []
  type: TYPE_NORMAL
- en: Initial selection of data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s start by asserting that each `li` element has a `button` element:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We want to display a message to the user if there are no appointments scheduled
    for today. In the `AppointmentsDayView` `describe` block, add the following test:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make the test pass by adding in a message at the bottom of the rendered output.
    We don’t need a check for an empty `appointments` array just yet; we’ll need another
    test to triangulate to that. The message is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When the component first loads, we should show the first appointment of the
    day. A straightforward way to check that happens is to look for the customer''s
    first name is shown on the page. Add the next test which does just that, shown
    below:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Since we’re looking for the customer’s name, we’ll need to make sure that’s
    available in the `twoAppointments` array. Update it now to include the customer’s
    first name as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make the test pass by modifying the `Appointment` component. Change the last
    line of the `div` component to read as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now we’re ready to let the user make a selection.
  prefs: []
  type: TYPE_NORMAL
- en: Adding events to a functional component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We’re about to add *state* to our component. The component will show a button
    for each appointment. When the button is clicked, the component stores the array
    index of the appointment that it refers to. To do that, we’ll use the `useState`
    hook.
  prefs: []
  type: TYPE_NORMAL
- en: What are hooks?
  prefs: []
  type: TYPE_NORMAL
- en: '`useState` hook stores data across multiple renders of your function. The call
    to `useState` returns both the current value in storage and a setter function
    that allows it to be set.'
  prefs: []
  type: TYPE_NORMAL
- en: If you’re new to hooks, check out the *Further reading* section at the end of
    this chapter. Alternatively, you could just follow along and see how much you
    can pick up just by reading the tests!
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll start by asserting that each `li` element has a `button` element:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following test below the last one you added. The second expectation
    is peculiar in that it is checking the `type` attribute of the button element
    to be `button`. If you haven’t seen this before, it’s idiomatic when using `button`
    elements to define its role by setting the `type` attribute as shown in this test:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Testing element positioning
  prefs: []
  type: TYPE_NORMAL
- en: We don’t need to be pedantic about checking the content or placement of the
    `button` element within its parent. For example, this test would pass if we put
    an empty `button` child at the end of `li`. But, thankfully, doing the right thing
    is just as simple as doing the wrong thing, so we can opt to do the right thing
    instead. All we need to do to make this test pass is wrap the existing content
    in the new tag.
  prefs: []
  type: TYPE_NORMAL
- en: 'Make the test pass by wrapping the appointment time with a `button` element
    in the `AppointmentsDayView` component, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can now test what happens when the button is clicked. Back in `test/Appointment.test.js`,
    add the following as the next test. This uses the `click` function on the DOM
    element to raise a DOM click event:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Synthetic events and Simulate
  prefs: []
  type: TYPE_NORMAL
- en: An alternative to using the `click` function is to use the `Simulate` namespace
    from React’s test utilities to raise a `Simulate` is somewhat simpler than the
    DOM API for raising events, it’s also unnecessary for testing. There’s no need
    to use extra APIs when the DOM API will suffice. Perhaps more importantly, we
    also want our tests to reflect the real browser environment as much as possible.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go ahead and run the test. The output will look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Notice the full text in the received string. We’re getting the text content
    of the list too because we’ve used `document.body.textContent` in our expectation
    rather than something more specific.
  prefs: []
  type: TYPE_NORMAL
- en: Specificity of expectations
  prefs: []
  type: TYPE_NORMAL
- en: Don’t be too bothered about *where* the customer’s name appears on the screen.
    Testing `document.body.textContent` is like saying *“I want this text to appear
    somewhere, but I don’t care where.”* Often, this is enough for a test. Later on,
    we’ll see techniques for expecting text in specific places.
  prefs: []
  type: TYPE_NORMAL
- en: 'There’s a lot we now need to get in place in order to make the test pass. We
    need to introduce state and we need to add the handler. Perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the import at the top of the file to pull in the `useState` function
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Wrap the constant definition in curly braces, and then return the existing
    value as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following line of code above the `return` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can now use `selectedAppointment` rather than hardcoding an index selecting
    the right appointment. Change the return value to use this new state value when
    selecting an appointment, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change the `map` call to include an index in its arguments. Let’s just name
    that `i` as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now call `setSelectedAppointment` from within the `onClick` handler on the
    `button` element as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run your tests, and you should find they’re all green:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We’ve covered a lot of detail in this section, starting with specifying the
    initial state of the view through to adding a `button` element and handling its
    `onClick` event.
  prefs: []
  type: TYPE_NORMAL
- en: We now have enough functionality that it makes sense to try it out and see where
    we’re at.
  prefs: []
  type: TYPE_NORMAL
- en: Manually testing our changes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The words *manual testing* should strike fear into the heart of every TDDer
    because it takes up *so* much time. Avoid it when you can. Of course, we can’t
    avoid it entirely – when we’re done with a complete feature, we need to give it
    a once-over to check we’ve done the right thing.
  prefs: []
  type: TYPE_NORMAL
- en: As it stands, we can’t yet run our app. To do that, we’ll need to add an entry
    point and then use webpack to bundle our code.
  prefs: []
  type: TYPE_NORMAL
- en: Adding an entry point
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: React applications are composed of a hierarchy of components that are rendered
    at the root. Our application entry point should render this root component.
  prefs: []
  type: TYPE_NORMAL
- en: We tend to *not* test-drive entry points because any test that loads our entire
    application can become quite brittle as we add more and more dependencies into
    it. In *Part 4, Behavior-Driven Development with Cucumber*, we’ll look at using
    Cucumber tests to write some tests that *will* cover the entry point.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since we aren’t test-driving it, we follow a couple of general rules:'
  prefs: []
  type: TYPE_NORMAL
- en: Keep it as brief as possible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Only use it to instantiate dependencies for your root component and to call
    `render`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Before we run our app, we’ll need some sample data. Create a file named `src/sampleData.js`
    and fill it with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: The `Chapter02/Complete` directory in the GitHub repository contains a more
    complete set of sample data.
  prefs: []
  type: TYPE_NORMAL
- en: 'This list also doesn’t need to be test-driven for the following couple of reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: It’s a list of static data with no behavior. Tests are all about specifying
    behavior, and there’s none here.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This module will be removed once we begin using our backend API to pull data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: TDD is often a pragmatic choice. Sometimes, not test-driving is the right thing
    to do.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file, `src/index.js`, and enter the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: That’s all you’ll need.
  prefs: []
  type: TYPE_NORMAL
- en: Putting it all together with webpack
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Jest uses Babel to transpile all our code when it’s run in the test environment.
    But what about when we’re serving our code via our website? Jest won’t be able
    to help us there.
  prefs: []
  type: TYPE_NORMAL
- en: 'That’s where webpack comes in, and we can introduce it now to help us do a
    quick manual test as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install webpack using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code to the `scripts` section of your `package.json` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You’ll also need to set some configuration for webpack. Create the `webpack.config.js`
    file in your project root directory with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This configuration works for webpack in development mode. Consult the webpack
    documentation for information on setting up production builds.
  prefs: []
  type: TYPE_NORMAL
- en: 'In your source directory, run the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following content to the file you just created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You’re now ready to run the build using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should see output such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Open `dist/index.xhtml` in your browser and behold your creation!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The following screenshot shows the application once the *Exercises* are completed,
    with added CSS and extended sample data. To include the CSS, you’ll need to pull
    `dist/index.xhtml` and `dist/styles.css` from the `Chapter02/Complete` directory.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.2 – The application so far ](img/Figure_2.02_B18423.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.2 – The application so far
  prefs: []
  type: TYPE_NORMAL
- en: Before you commit your code into Git...
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure to add `dist/main.js` to your `.gitignore` file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**echo "dist/main.js" >> .gitignore**'
  prefs: []
  type: TYPE_NORMAL
- en: The `main.js` file is generated by webpack, and as with most generated files,
    you shouldn’t check it in.
  prefs: []
  type: TYPE_NORMAL
- en: You may also want to add `README.md` at this point to remind yourself how to
    run tests and how to build the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ve now seen how to put TDD aside while you created an entry point: since
    the entry point is small and unlikely to change frequently, we’ve opted not to
    test-drive it.'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you’ve been able to practice the TDD cycle a few times and
    get a feel for how a feature can be built out using tests as a guide.
  prefs: []
  type: TYPE_NORMAL
- en: We started by designing a quick mock-up that helped us decide our course of
    action. We have built a container component (`AppointmentsDayView`) that displayed
    a list of appointment times, with the ability to display a single `Appointment`
    component depending on which appointment time was clicked.
  prefs: []
  type: TYPE_NORMAL
- en: We then proceeded to get a basic list structure in place, then extended it to
    show the initial `Appointment` component, and then finally added the `onClick`
    behavior.
  prefs: []
  type: TYPE_NORMAL
- en: This testing strategy, of starting with the basic structure, followed by the
    initial view, and finishing with the event behavior, is a typical strategy for
    testing components.
  prefs: []
  type: TYPE_NORMAL
- en: We’ve only got a little part of the way to fully building our application. The
    first few tests of any application are always the hardest and take the longest
    to write. We are now over that hurdle, so we’ll move quicker from here onward.
  prefs: []
  type: TYPE_NORMAL
- en: Exercises
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Rename `Appointment.js` and `Appointment.test.js` to `AppointmentsDayView.js`
    and `AppointmentsDayView.test.js`. While it’s fine to include multiple components
    in one file if they form a hierarchy, you should always name the file after the
    root component for that hierarchy.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Complete the `Appointment` component by displaying the following fields on
    the page. You should use a `table` HTML element to give the data some visual structure.
    This shouldn’t affect how you write your tests. The fields that should be displayed
    are the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Customer last name, using the `lastName` field
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Customer telephone number, using the `phoneNumber` field
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Stylist name, using the `stylist` field
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Salon service, using the `service` field
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Appointment notes, using the `notes` field
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a heading to `Appointment` to make it clear which appointment time is being
    viewed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There is some repeated sample data. We’ve used sample data in our tests, and
    we also have `sampleAppointments` in `src/sampleData.js`, which we used to manually
    test our application. Do you think it is worth drying this up? If so, why? If
    not, why not?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Hooks are a relatively recent addition to React. Traditionally, React used
    classes for building components with state. For an overview of how hooks work,
    take a look at React’s own comprehensive documentation at the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://reactjs.org/docs/hooks-overview.xhtml](https://reactjs.org/docs/hooks-overview.xhtml).'
  prefs: []
  type: TYPE_NORMAL
