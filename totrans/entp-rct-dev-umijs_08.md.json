["```js\nit('[END_TO_END] Should sucessfully login', async () => {\n  const page = await context.newPage();\n  await page.goto('http://localhost:8000');\n  await page.waitForNavigation();\n  await page.type('#username', 'john@doe.com');\n  await page.type('#password', 'user');\n  await page.click('#loginbtn');\n  const loggedUser = await page.waitForSelector('#loggeduser');\n  expect(loggedUser).toBeTruthy();\n});\n```", "```js\ndescribe('Math test suite', () => {\n  it('should return 2', () => {\n    const value = 1 + 1;\n    expect(value).toBe(2);\n  });\n  it('should return 25', () => {\n    const value = 5 * 5;\n    expect(value).toBe(25);\n  });\n});\n```", "```js\ndescribe('Product test suite', () => {\n  let connection: DBConnection;\n  let product: Product;\n  beforeAll(async () => {\n    connection = await database.connect();\n  });\n  beforeEach(async () => {\n    product = connection.query(query);\n  });\n  it('should be greater than 200', async () => {\n    expect(product.units).toBeGreaterThan(200);\n  });\n  it('should be true', async () => {\n    expect(product.active).toBeTruthy();\n  });\n});\n```", "```js\nafterAll(() => connection.close());\n```", "```js\nyarn add -D puppeteer\n```", "```js\n    import puppeteer, { Browser, BrowserContext, Page } from 'puppeteer';\n    describe('[SUITE] Integration testing', () => {\n      let context: BrowserContext;\n      let browser: Browser;\n      beforeAll(async () => {\n        browser = await puppeteer.launch();\n      });\n      beforeEach(async () => {\n        context = \n          await browser.createIncognitoBrowserContext();\n      });\n      afterEach(() => context.close());\n      afterAll(() => browser.close());\n    });\n    ```", "```js\nbrowser = await puppeteer.launch({ headless: false });\n```", "```js\n    yarn add -D @types/jest\n    ```", "```js\n    it('[INTEGRATION] Should successfully block unauthorized access (plugin-access)', async () => {\n      const page = await context.newPage();\n      page.setDefaultTimeout(10000);\n      await login(page);\n      await page.goto('http://localhost:8000/workflow');\n      const message = \n        await page.waitForSelector('#unauthorized');\n      const value = await page.evaluate((el) => \n        el.textContent, message);\n      expect(value).toBe('Sorry, you are not authorized to \n      access this page.');\n    });\n    ```", "```js\n    async function login(page: Page) {\n      await page.goto('http://localhost:8000');\n      await page.waitForNavigation();\n      await page.type('#username', 'john@doe.com');\n      await page.type('#password', 'user');\n      await page.click('#loginbtn');\n    }\n    ```", "```js\n    unAccessible: (\n      <Result\n        status=\"403\"\n        title=\"403\"\n        subTitle={\n          <span id=\"unauthorized\">\n            Sorry, you are not authorized to access this \n            page.\n          </span>\n        }\n        extra={\n          <Button type=\"primary\" onClick={() => \n            history.push('/')}>\n            Back to Home\n          </Button>\n        }\n      />\n    ),\n    ```", "```js\n    <Form.Item\n      name=\"username\"\n      rules={[\n        {\n          required: true,\n          message: formatMessage({ id: 'login.alert.username' }),\n        },\n      ]}\n    >\n      <Input\n        id=\"username\"\n        prefix={<UserOutlined className=\"site-form-item-icon\" \n          />}\n        placeholder={formatMessage({ id: 'login.placeholder.\n          username' })}\n      />\n    </Form.Item>\n    ```", "```js\n    <Form.Item\n      name=\"password\"\n      rules={[\n        {\n          required: true,\n          message: formatMessage({ id: 'login.alert.password' \n            }),\n        },\n      ]}\n    >\n      <Input\n        id=\"password\"\n        prefix={<LockOutlined className=\"site-form-item-icon\" \n          />}\n        type=\"password\"\n        placeholder={formatMessage({ \n          id: 'login.placeholder.password' })}\n      />\n    </Form.Item>\n    ```", "```js\n    <Form.Item>\n      <Button\n        id=\"loginbtn\"\n        type=\"primary\"\n        htmlType=\"submit\"\n        className=\"login-form-button\"\n      >\n        <FormattedMessage id=\"login.form.login\" />\n      </Button>\n      <FormattedMessage id=\"login.form.or\" />{' '}\n      <a href=\"\">\n        <FormattedMessage id=\"login.form.register\" />!\n      </a>\n    </Form.Item>\n    ```", "```js\n    import puppeteer, { Browser, BrowserContext, Page } from 'puppeteer';\n    describe('[SUITE] End-to-end testing', () => {\n      let context: BrowserContext;\n      let browser: Browser;\n      beforeAll(async () => {\n        browser = await puppeteer.launch();\n      });\n      beforeEach(async () => {\n        context = \n          await browser.createIncognitoBrowserContext();\n      });\n      afterEach(() => context.close());\n      afterAll(() => browser.close());\n    });\n    ```", "```js\n    it('[END_TO_END] Should sucessfully edit opportunity', async () => {\n      const page = await context.newPage();\n      page.setDefaultTimeout(10000);\n      await page.goto('http://localhost:8000');\n      await page.waitForNavigation();\n    });\n    ```", "```js\n    await page.type('#username', 'john@doe.com');\n    await page.type('#password', 'user');\n    await page.click('#loginbtn');\n    await page.goto('http://localhost:8000/opportunities');\n    ```", "```js\n    await(await page.waitForSelector('#editopportunity')).click();\n    const topicInput = await page.$(\n    'table > tbody > tr > td > div > div > div > div > span \n      > input',\n    );\n    await topicInput.click({ clickCount: 3 });\n    await topicInput.type('Opportunity topic');\n    await(await page.waitForSelector('#save')).click();\n    ```", "```js\n    const topicCell = await page.waitForSelector(\n      'tr[data-row-key=\"0\"] > .ant-table-cell',\n    );\n    const value = await page.evaluate((el) => el.textContent, \n      topicCell);\n    expect(value).toBe('Opportunity topic');\n    ```", "```js\n    {\n      title: <FormattedMessage id=\"table.options\" />,\n      valueType: 'option',\n      hideInSetting: true,\n      hideInDescriptions: true,\n      render: (_, record, __, action) => [\n        <a\n          key=\"editable\"\n          id=\"editopportunity\"\n          onClick={() => {\n          action?.startEditable(record.id as number);\n        }}\n        >\n        <FormattedMessage id=\"table.edit\" />\n      </a>,\n      <a key=\"more\" onClick={() => history.push(`/\n        opportunity/${record.id}`)}>\n        <FormattedMessage id=\"table.more\" />\n      </a>,\n      ],\n    },\n    ```", "```js\n    editable={{\n      type: 'multiple',\n      deletePopconfirmMessage: <FormattedMessage \n        id=\"table.confirm\" />,\n      saveText: <span id=\"save\">save</span>,\n      deleteText: <FormattedMessage id=\"table.disable\" />,\n      onDelete: async (key) => disable(key as string),\n      onSave: async (_, record) => update(record),\n    }}\n    ```", "```js\n\"test\": \"umi-test --runInBand\",\n```"]