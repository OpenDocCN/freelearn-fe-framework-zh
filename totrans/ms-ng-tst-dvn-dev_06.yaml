- en: <st c="0">6</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="2">Exploring End-to-End Testing with Protractor, Cypress, and Playwright</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="71">In software development,</st> **<st c="97">end-to-end</st>** <st
    c="107">(</st>**<st c="109">E2E</st>**<st c="112">) testing plays a crucial role
    in ensuring the integration and functionality of an application from start to
    finish.</st> <st c="230">E2E testing encompasses the entire application flow,
    simulating interactions with the real user to verify that the application functions
    as intended in various</st> <st c="390">usage scenarios.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="406">E2E testing offers a multitude of benefits that contribute to the
    overall quality and reliability of software applications.</st> <st c="531">E2E
    testing identifies and eliminates usability issues that can hinder user satisfaction</st>
    <st c="620">and adoption.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="633">By thoroughly testing the application’s integrated components, E2E
    testing reduces the likelihood of unexpected errors or disruptions during actual
    use.</st> <st c="787">E2E testing enables early identification of defects, minimizing
    the time and costs associated with problem resolution later in the development
    cycle.</st> <st c="937">Proactive fault detection with E2E testing can significantly
    reduce long-term</st> <st c="1015">maintenance costs.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '<st c="1033">Several powerful tools are available to facilitate E2E testing,
    each with its own strengths and features.</st> <st c="1140">We’ll take a look
    at three major options: Protractor, Cypress,</st> <st c="1203">and Playwright.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1218">In this chapter, we will explore the theory behind E2E testing,
    the benefits of E2E testing after long and deep analysis, and the philosophy behind
    some E2E tools such as Protractor, Cypress,</st> <st c="1411">and Playwright.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1426">In summary, here are the main topics that will be covered in</st>
    <st c="1488">this chapter:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1501">Discovering</st> <st c="1514">E2E testing</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1525">Analyzing the benefits of E2E testing in</st> <st c="1567">a project</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1576">Exploring the different tools that can be used for E2E testing
    such as Protractor, Cypress,</st> <st c="1669">and Playwright</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1683">Technical requirements</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="1706">To follow along with the examples and exercises in this chapter,
    you will need to have a basic understanding of Angular and TypeScript, as well
    as the following</st> <st c="1868">technical requirements:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1891">Node.js and npm installed on</st> <st c="1921">your computer</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1934">Angular CLI</st> <st c="1947">installed globally</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1965">A code editor, such as Visual Studio Code, installed on</st> <st
    c="2022">your computer</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="2035">Understanding E2E testing</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="2061">E2E testing is an in-depth method of software testing that evaluates
    the entire application flow from the user’s point of view, ensuring that all components
    work as expected and that the software functions correctly in real-life scenarios.</st>
    <st c="2302">It encompasses testing of the application’s user interface, backend
    systems, external APIs, and data interactions to ensure a seamless and</st> <st
    c="2441">consistent user experience.</st> <st c="2469">Unlike unit testing, which
    focuses on individual components, E2E testing examines the whole application as
    a unified entity, ensuring that all components work in harmony to deliver the</st>
    <st c="2654">desired functionality.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2676">Discovering the benefits of E2E testing</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="2716">E2E testing offers a myriad</st> <st c="2744">of benefits, making
    it an invaluable tool for software</st> <st c="2800">development teams:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="2818">Early detection of defects</st>**<st c="2845">: E2E testing
    enables defects to be detected early in the development cycle, reducing the cost
    and effort required to correct</st> <st c="2972">them later.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="2983">Enhanced user experience</st>**<st c="3008">: E2E testing is
    a method of ensuring that a software application works as intended from the user’s
    point of view.</st> <st c="3124">This approach improves the overall user experience
    and minimizes the risk</st> <st c="3198">of dissatisfaction.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="3217">Increased confidence in software quality</st>**<st c="3258">:
    E2E testing inspires confidence in software quality, reducing the risk of unforeseen
    problems in production and preserving the reputation of the software</st> <st
    c="3415">development team.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="3432">Streamlined development process</st>**<st c="3464">: E2E testing
    can be automated, streamlining the development process, facilitating</st> **<st
    c="3548">continuous integration and continuous delivery</st>** <st c="3594">(</st>**<st
    c="3596">CI/CD</st>**<st c="3601">) practices, and</st> <st c="3619">enabling
    software to be released faster and</st> <st c="3663">more efficiently.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="3680">In the next section, we</st> <st c="3705">will learn how to implement</st>
    <st c="3733">E2E tests.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3743">Exploring different approaches to E2E testing</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '<st c="3789">E2E testing encompasses two main strategies: script-based testing
    and exploratory testing.</st> <st c="3881">Script-based testing relies on automated
    scripts to execute test cases, ensuring the consistency, repeatability, and</st>
    <st c="3997">efficiency of test procedures.</st> <st c="4029">On the other hand,
    exploratory testing is a practical approach that involves manually testing the
    application while exploring different scenarios.</st> <st c="4176">Let’s take
    an in-depth look at each of the</st> <st c="4219">two approaches:</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="4234">Script-based testing</st>**<st c="4255">: Script-based testing
    is a software testing methodology in which automated scripts are</st> <st c="4344">used
    to execute test cases.</st> <st c="4372">This approach guarantees the consistency,
    repeatability, and efficiency of test procedures, making it a reliable tool for
    ensuring that software applications</st> <st c="4530">run smoothly.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="4543">There are several popular frameworks for script-based testing,
    including Protractor, Cypress, and Playwright.</st> <st c="4654">Each of these
    frameworks has its own features</st> <st c="4700">and benefits:</st>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**<st c="4713">Protractor</st>** <st c="4724">is an E2E testing</st> <st c="4742">framework
    for Angular and AngularJS applications.</st> <st c="4793">It aims to simplify
    the process of setting up tests, making them more readable and producing results
    that are easier</st> <st c="4910">to understand.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="4924">Cypress</st>** <st c="4932">is a next-generation frontend testing
    tool designed for the modern web.</st> <st c="5005">It provides</st> <st c="5016">a
    complete testing solution, including the ability to write tests directly in JavaScript,
    without the need for additional preprocessors or compilers.</st> <st c="5167">Cypress
    is renowned for its ease of use and</st> <st c="5211">rapid installation.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="5230">Playwright</st>**<st c="5241">, developed and maintained by
    Microsoft, is an open source, Node.js-based automation</st> <st c="5325">framework
    for E2E testing.</st> <st c="5353">It was created to meet the need for automated
    E2E testing across multiple browsers.</st> <st c="5437">Playwright’s main objective
    is to run on the main browser engines – Chromium, WebKit, and Firefox.</st> <st
    c="5536">It offers extensive, native mobile testing capabilities, supporting mobile
    automation testing on Android and</st> <st c="5645">iOS platforms.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="5659">Exploratory testing</st>**<st c="5679">: Exploratory testing
    is a dynamic and flexible approach to software testing that involves the</st>
    <st c="5774">tester actively exploring the application and trying out different
    scenarios, inputs, and interactions to identify bugs and problems.</st> <st c="5909">Unlike</st>
    <st c="5916">script-based testing, which follows predefined test cases and steps,
    exploratory testing is based on the tester’s curiosity, creativity,</st> <st c="6053">and</st>
    <st c="6056">intuition.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="6067">This approach is particularly useful when there are many unknowns
    about exactly what the software is supposed to do or how it should behave in</st>
    <st c="6211">real-life situations.</st>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="6232">Exploratory testing is often used when the application is complex
    or constantly evolving.</st> <st c="6323">It is also useful when rapid feedback
    is needed, when requirements are unclear, or when time is of</st> <st c="6422">the
    essence.</st>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="6434">There are different types of exploratory testing – free-style testing,
    scenario-based testing, and</st> <st c="6534">strategy-based testing:</st>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**<st c="6557">Free-style testing</st>**<st c="6576">: This is</st> <st c="6587">useful
    when you need to quickly familiarize yourself with</st> <st c="6645">the application</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="6660">Scenario-based testing</st>**<st c="6683">: This focuses</st>
    <st c="6698">on real-world</st> <st c="6713">usage scenarios</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="6728">Strategy-based testing</st>**<st c="6751">: This combines</st>
    <st c="6768">exploratory testing with well-known</st> <st c="6804">testing methods</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="6819">Exploratory testing can sometimes be more useful in identifying
    more subtle defects that formal testing might miss.</st> <st c="6936">However,
    it requires a high degree of skill and understanding of</st> <st c="7000">the
    application.</st>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="7017">Comparison between script-based testing and exploratory testing</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="7081">The comparison between script-based and exploratory testing provides
    us with several</st> <st c="7167">important insights:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="7186">Consistency and efficiency</st>**<st c="7213">: Script-based
    testing guarantees the consistency and repeatability</st> <st c="7281">of test
    procedures, which is</st> <st c="7311">crucial in large-scale projects where many
    tests are required.</st> <st c="7374">It can also be more efficient, as it eliminates
    the need for manual</st> <st c="7442">test execution.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="7457">Flexibility and discovery</st>**<st c="7483">: On the other
    hand, exploratory testing offers greater flexibility as it allows testers to freely
    explore the application.</st> <st c="7608">This can lead to the discovery of potential
    problems that scripted tests might miss, particularly in the case of complex applications
    or when the application undergoes</st> <st c="7776">frequent changes.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="7793">Documentation</st>**<st c="7807">: A significant difference
    between the two approaches is the level of documentation involved.</st> <st c="7902">Script-based
    testing typically involves detailed documentation of test cases and steps, while
    exploratory testing can involve less documentation, which can potentially lead
    to critical bugs</st> <st c="8092">being missed.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="8105">Limitations of script-based testing and exploratory testing</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="8165">Both script-based testing and exploratory testing approaches have
    their limitations.</st> <st c="8251">For example, exploratory testing</st> <st
    c="8283">can be influenced by the tester’s biases, and may</st> <st c="8333">fail
    to capture all potential problems if the tester lacks sufficient knowledge or
    fails to explore thoroughly.</st> <st c="8446">Similarly, scripted tests may miss
    obvious defects if the test cases do not cover all</st> <st c="8532">possible
    scenarios.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="8551">Many organizations prefer a mixed approach, combining elements
    of script-based and exploratory testing, to leverage the strengths of each method
    and mitigate</st> <st c="8710">their weaknesses.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="8727">Understanding the</st> <st c="8745">context of the project, for
    example, whether it’s a small project</st> <st c="8811">or part of a larger one,
    can guide the choice between script-based and</st> <st c="8883">exploratory testing.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="8903">We’ve looked at some of the tools previously mentioned for E2E
    testing.</st> <st c="8976">We will now explore them in</st> <st c="9004">more
    detail.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="9016">Harnessing the power of E2E testing tools</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="9058">A variety of tools are</st> <st c="9081">available to facilitate
    E2E testing, empowering software development teams to effectively implement this</st>
    <st c="9187">testing strategy.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="9204">Let’s take a closer look at some of</st> <st c="9241">these tools.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="9253">Selenium – proven power for web application testing</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**<st c="9305">Selenium</st>** <st c="9314">is a renowned open source framework
    for automating web application testing.</st> <st c="9391">Its comprehensive feature</st>
    <st c="9416">set meets a wide range of testing needs, including</st> <st c="9467">functional,
    integration, and cross-browser testing.</st> <st c="9520">Selenium supports a
    variety of programming languages, including Java, Python, and C#, enabling testers
    to choose the language that matches their expertise and preferences.</st> <st
    c="9692">In addition, Selenium boasts extensive compatibility with the most popular
    browsers, such as Chrome, Firefox, Safari, and Edge.</st> <st c="9820">This broad
    compatibility ensures that tests can be run on different browsers, eliminating
    browser-specific discrepancies and guaranteeing a seamless</st> <st c="9969">user
    experience.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="9985">Cypress – simplicity and speed for web testing</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**<st c="10032">Cypress</st>** <st c="10040">has established itself</st> <st
    c="10064">as a JavaScript-based testing framework for web</st> <st c="10111">applications,
    renowned for its simplicity, speed, and ease of use.</st> <st c="10179">Unlike
    Selenium, which requires the installation of binary drivers and configuration,
    Cypress offers a standalone package that simplifies the installation process.</st>
    <st c="10343">Cypress’s Node.js-based architecture delivers exceptional performance,
    enabling tests to run quickly, reducing test times, and improving overall efficiency.</st>
    <st c="10500">Its intuitive API and simple syntax</st> <st c="10536">make it accessible
    to testers of all levels, facilitating rapid test development</st> <st c="10617">and
    maintenance.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="10633">Appium – mobile application testing on multiple platforms</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**<st c="10691">Appium</st>** <st c="10698">is a versatile framework for automating
    mobile app testing on different platforms, including iOS</st> <st c="10796">and
    Android.</st> <st c="10809">It uses the Appium driver to communicate</st> <st
    c="10850">with native mobile apps, enabling testers to simulate user interactions
    such as tapping, swiping, and typing.</st> <st c="10960">Appium’s cross-platform
    compatibility means that tests can be run on real devices or simulators, ensuring
    that the application works consistently in</st> <st c="11109">different environments.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="11132">Protractor – seamless automation for Angular applications</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**<st c="11190">Protractor</st>**<st c="11201">, designed specifically</st>
    <st c="11225">for Angular applications, leverages Selenium to provide a complete
    testing framework.</st> <st c="11311">Its integration with Angular framework components
    simplifies test</st> <st c="11377">development and maintenance, allowing testers
    to interact with elements and use Angular-specific functions.</st> <st c="11485">Protractor’s
    support for local and remote test environments meets a wide range of</st> <st
    c="11567">testing needs.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="11581">Playwright – cross-browser testing with performance</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**<st c="11633">Playwright</st>**<st c="11644">, developed by Microsoft, has
    established itself as a powerful tool for cross-browser testing.</st> <st c="11739">It
    supports</st> <st c="11750">Chromium, WebKit, and Firefox browsers, enabling</st>
    <st c="11799">comprehensive tests to be carried out on different rendering engines.</st>
    <st c="11870">Playwright’s Node.js-based architecture delivers exceptional performance,
    enabling tests to run quickly and efficiently.</st> <st c="11991">Its API is simple
    and intuitive, making it accessible to testers of</st> <st c="12059">all levels.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="12070">The choice of E2E testing tools depends on the specific needs
    and preferences of the software</st> <st c="12165">development team.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="12182">Here are the strengths of the E2E</st> <st c="12217">testing tools:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="12231">Selenium’s flexibility and broad browser compatibility make it
    a solid choice for comprehensive web</st> <st c="12332">application testing</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="12351">Cypress’s simplicity and speed appeal to teams looking for a streamlined
    approach to</st> <st c="12437">web testing</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="12448">Appium meets mobile testing needs, enabling automa</st><st c="12499">tion
    on iOS and</st> <st c="12516">Android platforms</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="12533">Protractor facilitates seamless</st> <st c="12566">automation
    of</st> <st c="12580">Angular applications</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="12600">Playwright offers high-performance,</st> <st c="12637">cross-browser
    testing</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="12658">Ultimately, the most</st> <st c="12679">effective tool is the
    one that matches the team’s expertise, project requirements, and</st> <st c="12767">testing
    objectives.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="12786">In the next section, we will analyze the benefits of E2E testing
    in</st> <st c="12855">a project.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="12865">Analyzing the benefits of E2E testing in a project</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="12916">The adoption of E2E testing as part of software development projects
    reveals a multitude of benefits that improve</st> <st c="13030">the quality and
    u</st><st c="13048">ser experience of</st> <st c="13067">software products.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="13085">While E2E tests offer a multitude of advantages, their implementation
    is not without its problems.</st> <st c="13185">Understanding these obstacles
    is essential to developing effective strategies for</st> <st c="13267">overcoming
    them:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="13283">Complexity</st>**<st c="13294">: E2E tests often have a labyrinthine
    structure, which makes them difficult to create and maintain.</st> <st c="13395">This
    complexity stems from the need to test multiple application components and accurately
    simulate the actions of a</st> <st c="13512">real user.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="13522">Scaling</st>**<st c="13530">: E2E tests are prone to instability,
    a characteristic that manifests itself in intermittent failures for reasons tha</st><st
    c="13648">t can be difficult to decipher.</st> <st c="13681">This intermittence
    can compromise the reliability of E2E</st> <st c="13738">test results.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="13751">Slowness</st>**<st c="13760">: E2E tests often run at a slow
    pace due to their global nature, which involves interactions with the whole application
    and potential delays in waiting for responses from</st> <st c="13932">external
    systems.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="13949">Despite the inherent challenges, E2E testing remains an invaluable
    tool for improving software quality.</st> <st c="14054">By adopting proven strategies,
    developers and testers can effectively meet these challenges and reap the many
    benefits of</st> <st c="14176">E2E testing:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="14188">Get involved early</st>**<st c="14207">: It’s vital to launch
    E2E testing early in the development cycle.</st> <st c="14275">This proactive
    approach facilitates the early detection of defects, making their treatment considerably
    easier and</st> <st c="14390">more cost-effective.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="14410">Leverage automation</st>**<st c="14430">: Automation</st> <st
    c="14443">strengthens E2E testing by streamlining the execution process and minimizing
    the expenditure of time and effort.</st> <st c="14557">Automation also facilitates
    the seamless integration of E2E tests into the</st> <st c="14632">CI/CD pipeline.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="14647">Meticulous test design</st>**<st c="14670">: Meticulous care
    in the design of E2E tests is essential to ensure their effectiveness and efficiency.</st>
    <st c="14775">This means focusing on testing the most critical user flows and
    identifying the most likely points</st> <st c="14874">of failure.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="14885">Leverage specialized tools</st>**<st c="14912">: There is a
    plethora of tools available to support E2E testing.</st> <st c="14978">It is essential
    to select a tool that matches the project’s requirements and offers</st> <st c="15062">user-friendly
    functionality.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="15090">In the next section, we’ll explore the different tools that can
    be used for E2E testing, such as Protractor, Cypress,</st> <st c="15209">and Playwright.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="15224">Exploring Protractor, Cypress, and Playwright for E2E testing</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '<st c="15286">There are many different E2E testing tools available and choosing
    the right one can be tricky.</st> <st c="15382">This review examines three popular
    tools: Protractor, Cypress, and Playwright.</st> <st c="15461">We’ll discover
    their strengths, weaknesses, and ideal use cases, enabling you to select the ideal
    tool for your</st> <st c="15573">E2E tests.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="15583">Protractor</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="15594">Produced by Google’s</st> <st c="15615">team of developers, Protractor
    was first designed for Angular applications, then made available as an open source
    solution.</st> <st c="15740">Today, it extends</st> <st c="15757">its capabilities
    beyond Angular, adapting to non-Angular applications as well.</st> <st c="15837">It
    is an enhanced version of WebDriver.js, incorporating all Selenium WebDriver features
    plus specialized functions for</st> <st c="15957">Angular development.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="15977">What is Protractor?</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="15997">Protractor is an open source</st> <st c="16026">testing framework
    primarily used for E2E testing of Angular and AngularJS applications.</st> <st
    c="16115">Although originally designed for Angular, it has evolved to support
    testing of Angular and non-Angular web applications.</st> <st c="16236">It works
    in the same way as a real user, running tests in a real web browser and resulting
    in realistic test scenarios.</st> <st c="16356">Protractor is a Node.js application
    and acts as a wrapper around Selenium WebDriver using WebDriverJS, which is the
    JavaScript binding for the Selenium WebDriver API.</st> <st c="16523">It can create
    tests that interact with a real browser, enabling</st> <st c="16587">E2E testing.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="16599">It integrates with other technologies such as Node.js, Jasmine,
    Selenium, Mocha, and others.</st> <st c="16693">It is particularly well-suited
    to Angular applications due to its origins in the Angular team and its use of
    Angular-specific locators to identify DOM elements.</st> <st c="16854">However,
    as of November 2022, Protractor is considered obsolete, and the end of development
    was scheduled for the end of 2022\.</st> <st c="16981">The team behind Protractor
    announced this decision due to changes in web development and the JavaScript language,
    which make Protractor less compatible with</st> <st c="17138">contemporary applications.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="17164">Why choose Protractor?</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="17187">Protractor provides a</st> <st c="17210">set of Angular-specific
    APIs that make it easier to interact with Angular elements and perform actions
    such as waiting for Angular processes to complete, handling asynchronous operations,
    and managing synchronization with the Angular</st> <st c="17444">event loop.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="17455">You can simulate real user interactions such as clicking buttons,
    filling out forms, navigating between pages, and verifying the behavior of Angular
    elements.</st> <st c="17615">This makes Protractor a powerful tool for E2E testing
    of</st> <st c="17672">Angular applications.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="17693">It automatically waits for Angular processes to complete before
    executing the next step, eliminating the need for explicit waits and reducing
    flakiness in tests.</st> <st c="17856">This makes it a reliable choice for testing</st>
    <st c="17900">Angular applications.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="17921">It supports various locators specifically designed for Angular
    applications, including model, binding, repeater, and CSS selectors.</st> <st
    c="18054">These locators make it easier to identify and interact with Angular
    elements, which is particularly useful for testing</st> <st c="18173">Angular
    applications.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="18194">It allows you to run tests in multiple browsers, including Chrome,
    Firefox, and Safari, enabling cross-browser testing of your Angular applications.</st>
    <st c="18344">This feature ensures that your Angular application works correctly
    across different browsers, which is crucial to a good</st> <st c="18465">user
    experience.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="18481">Integrating it with</st> <st c="18501">a CI system allows you
    to automate the execution of tests on every code commit, ensuring that your Angular
    application remains stable and functional.</st> <st c="18652">This feature is
    particularly beneficial to large teams and projects where multiple developers
    are working on the same</st> <st c="18770">code base.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="18780">Features of Protractor testing</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="18811">By providing built-in support</st> <st c="18842">for asynchronous
    operations via callbacks, promises, and async/await, Protractor empowers developers
    to do</st> <st c="18949">the following:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="18963">Boost test execution speed</st>**<st c="18990">: Achieve faster
    E2E testing, especially for Angular web apps with</st> <st c="19058">dynamic elements</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="19074">Enhance test readability</st>**<st c="19099">: Write cleaner
    and more maintainable tests with modern asynchronous</st> <st c="19169">programming
    methods</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="19188">Increase test reliability</st>**<st c="19214">: Simplify handling
    dynamic behaviors and improv</st><st c="19263">e</st> <st c="19266">test stability</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="19280">One of the key features of Protractor is its</st> <st c="19325">Automatic
    Waiting feature.</st> <st c="19353">Here’s how</st> <st c="19364">it works:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '`<st c="19558">wait</st>` <st c="19562">statements between every action in</st>
    <st c="19598">your tests.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="19609">Angular synchronization</st>**<st c="19633">: Protractor integrates
    with Angular’s framework to understand when the application has finished processing
    and is ready for interaction.</st> <st c="19772">This ensures your tests don’t
    try to interact with elements before they’re fully loaded</st> <st c="19860">and
    available.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="19874">While Protractor handles most waiting scenarios automatically,
    there are situations where you might still need</st> <st c="19986">explicit</st>
    <st c="19994">waits:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '`<st c="20047">ExpectedConditions</st>` <st c="20065">API to define specific
    conditions for waiting, such as waiting for an element to be clickable or for
    a specific text</st> <st c="20183">to appear.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="20193">Long waits</st>**<st c="20204">: The default implicit wait
    time might be too short for certain scenarios.</st> <st c="20280">You can configur</st><st
    c="20296">e a custom wait time for specific</st> <st c="20331">test cases.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="20342">Protractor supports both Angular and non-Angular applications.</st>
    <st c="20406">It provides combined E2E testing for web applications built using
    AngularJS.</st> <st c="20483">This makes it a versatile tool</st> <st c="20514">for
    testing a wide range of</st> <st c="20542">web applications.</st>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="20559">Protractor supports the Page Objects pattern, which is a design
    pattern that enhances test maintenance and reduces code duplication.</st> <st
    c="20693">With this pattern, you can create reusable page objects that can be
    used across</st> <st c="20773">different tests.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="20789">Cypress</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="20797">Designed for web</st> <st c="20815">development and test automation,
    Cypress is a JavaScript-based E2E testing framework that</st> <st c="20905">streamlines
    both web and</st> <st c="20930">API testing.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="20942">What is Cypress?</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="20959">Cypress is an open source, JavaScript-based E2E testing framework
    specifically designed for modern web applications.</st> <st c="21077">It offers
    a developer-friendly approach to automating web UI tests, streamlining the process
    for both frontend developers and</st> <st c="21203">QA engineers.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="21216">Why choose Cypress?</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="21236">Here are some key advantages of</st> <st c="21269">using Cypress
    for your web</st> <st c="21296">application testing:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="21316">Simplified setup</st>**<st c="21333">: Compared to other tools
    such as Selenium, Cypress requires minimal configuration.</st> <st c="21418">It
    often involves just installing the package and writing tests</st> <st c="21482">in
    JavaScript.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="21496">Fast and efficient</st>**<st c="21515">: Cypress runs tests
    directly in the browser, eliminating the need for separate WebDriver setup and
    browser launching.</st> <st c="21635">This makes tests execute significantly faster,
    improving development and</st> <st c="21708">testing workflows.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="21726">Automatic waiting</st>**<st c="21744">: Cypress handles waiting
    for elements to load and become interactive automatically.</st> <st c="21830">You
    don’t need to write explicit waits or sleeps into your tests, reducing code</st>
    <st c="21909">complexity and making tests</st> <st c="21938">more robust.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="21950">Easy debugging</st>**<st c="21965">: Cypress provides a visual
    debugger that allows you to step through your tests, inspect element properties,
    and identify issues quickly.</st> <st c="22104">This streamlines the</st> <st
    c="22125">debugging process.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="22143">Time-travel debugging</st>**<st c="22165">: With Cypress’s
    time-travel debugging feature, you can rewind or fast-forward a test execution
    to pinpoint the exact moment when a failure occurs, making troubleshooting</st>
    <st c="22337">more efficient.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="22352">Cross-browser compatibility</st>**<st c="22380">: Cypress supports
    testing across different browsers (Chrome, Firefox, Edge, etc.) out of the box.</st>
    <st c="22480">You can configure tests to run on various browsers or use a CI platform
    to automate</st> <st c="22564">browser testing.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="22580">Integration with development tools</st>**<st c="22615">: Cypress
    integrates seamlessly with popular developer tools such as DevTools, allowing
    you to leverage existing debugging skills within the</st> <st c="22757">testing
    environment.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="22777">Active community and support</st>**<st c="22806">: Cypress
    has a large and active community offering extensive documentation, tutorials,
    and support resources.</st> <st c="22918">This makes it easier to learn it, use
    it, and get help</st> <st c="22973">when needed.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="22985">Features of Cypress testing</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="23013">Cypress boasts a rich set of features that</st> <st c="23056">contribute
    to its effectiveness in web</st> <st c="23096">application testing:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="23116">Command chain API</st>**<st c="23134">: Provides a natural
    way to write tests using JavaScript syntax, making them readable</st> <st c="23221">and
    maintainable</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="23237">Automatic assertions</st>**<st c="23258">: Simplifies checking
    for expected element properties and behavior, ensuring your tests verify the</st>
    <st c="23358">correct functionality</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="23379">Screenshots and video recordings</st>**<st c="23412">: Enables
    capturing screenshots or recording videos during tests, which can be helpful for
    visualizing errors and</st> <st c="23527">debugging issues</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="23543">Network mocking</st>**<st c="23559">: Allows</st> <st c="23568">simulating
    server responses, facilitating testing of API interactions, edge cases, and various</st>
    <st c="23664">network scenarios</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="23681">Custom commands</st>**<st c="23697">: Grants the ability to
    create reusable code blocks for frequently used testing actions, promoting code
    reusability</st> <st c="23814">and modularity</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="23828">Integration testing</st>**<st c="23848">: Cypress can be used
    for both unit and integration testing of web applications, offering comprehensive</st>
    <st c="23953">testing coverage</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="23969">By leveraging Cypress’s strengths, you can build a robust and
    efficient test suite that helps ensure the quality and reliability of your</st>
    <st c="24107">web applications.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="24124">Playwright</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="24135">Playwright is a modern, versatile, and powerful browser automation
    framework created by Microsoft.</st> <st c="24235">It enables</st> <st c="24245">developers
    to write automated tests, scrape web data, and interact with web</st> <st c="24322">applications
    using a single API that works seamlessly across multiple browsers, including Chrome,
    Firefox, and</st> <st c="24433">Microsoft Edge.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="24448">What is Playwright?</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="24468">Playwright is a powerful, open source Node.js library for automating
    and testing web applications on various browsers such as Chrome, Firefox, Safari,
    and Edge.</st> <st c="24630">It can also automate browser actions such as clicks,
    form fill-ups, and page navigation.</st> <st c="24719">Playwright is an intuitive
    platform supporting several programming languages such as JavaScript, TypeScript,
    Python, and Java.</st> <st c="24846">The defining feature of parallelism is that
    you can test for multiple browsers simultaneously without the requirement of writing</st>
    <st c="24975">individual tests.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="24992">Why choose Playwright?</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="25015">Playwright supports testing across multiple browsers, including
    Chromium, Firefox, and WebKit.</st> <st c="25111">This ensures cross-browser compatibility
    and a consistent</st> <st c="25169">user experience.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="25185">Playwright is known for its</st> <st c="25214">speed and efficiency.</st>
    <st c="25236">Its modern architecture and efficient browser automation result
    in faster test execution compared to other frameworks, reducing the overall time
    spent</st> <st c="25387">on testing.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="25398">Playwright’s auto-wait API and advanced selector engine significantly
    improve test stability, reducing the likelihood of flaky tests and minimizing
    the need for</st> <st c="25560">manual intervention.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="25580">Playwright is built to handle modern</st> <st c="25618">web technologies,
    such as</st> **<st c="25644">single-page applications</st>** <st c="25668">(</st>**<st
    c="25670">SPAs</st>**<st c="25674">), better than other frameworks.</st> <st c="25708">It
    provides native support for interacting with dynamic content, making writing tests
    for complex</st> <st c="25806">applications easier.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="25826">Unlike some other frameworks that only support specific browsers,
    Playwright offers a consistent API for testing across multiple browsers, ensuring
    broader compatibility and a more comprehensive</st> <st c="26022">testing suite.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="26036">Playwright has built-in mocking that allows you to write minified
    E2E tests at the component level.</st> <st c="26137">This can be particularly
    useful for testing complex components without having to interact with the</st>
    <st c="26236">entire application.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="26255">Playwright supports powerful pseudo-CSS selectors that replace
    the only use cases for XPath.</st> <st c="26349">This can make your tests more
    readable</st> <st c="26388">and maintainable.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="26405">Playwright is about 30% faster than Selenium running the same
    tests due to its ability to create test contexts in</st> <st c="26520">100 ms.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="26527">Playwright requires fewer dependencies and has a more straightforward
    installation process compared to Selenium.</st> <st c="26641">This means you can
    start writing tests more quickly and with</st> <st c="26702">less hassle.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="26714">Features of Playwright testing</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="26745">Let’s look at the key features</st> <st c="26776">of</st> <st
    c="26780">Playwright testing:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="26799">Playwright provides consistent and reliable automation across
    different browsers, ensuring your web applications work well on all</st> <st c="26930">major
    platforms.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="26946">Playwright is known for its speed and efficiency, making it a
    great choice for testing and automating</st> <st c="27049">web interactions.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="27066">You can run Playwright scripts in headless mode (without a visible
    browser UI) for faster execution, or in headful mode for debugging</st> <st c="27201">and
    interaction.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="27217">Playwright offers support for popular programming languages such
    as TypeScript, Python, and Java.</st> <st c="27316">This means you can write automation
    scripts in the language you’re most</st> <st c="27388">comfortable with.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="27405">Playwright uses native</st> <st c="27429">browser automation APIs
    to simulate user interactions accurately, resulting in more</st> <st c="27513">reliable
    tests.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="27528">You can leverage the full power of browser DevTools with Playwright,
    making it easier to inspect, debug, and diagnose issues in your</st> <st c="27662">web
    applications.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="27679">Summary</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="27687">In this chapter, we have learned about E2E testing, an essential
    software development practice that ensures an application works perfectly from
    start to finish.</st> <st c="27849">E2E testing involves all integrated systems,
    both internal and external, to identify dependencies and verify the smooth flow</st>
    <st c="27974">of information.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="27989">We also learned about the most common E2E testing tools, Protractor,
    Cypress, and Playwright.</st> <st c="28084">We explored the strengths of</st>
    <st c="28113">each tool:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="28123">Protractor</st>**<st c="28134">: Designed for Angular applications,
    offering Angular-specific APIs for interacting with elements and handling</st>
    <st c="28246">asynchronous operations</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="28269">Cypress</st>**<st c="28277">: A user-friendly tool that supports
    asynchronous/await syntax and concurrent test execution (albeit with limitations
    in the</st> <st c="28403">free version)</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="28416">Playwright</st>**<st c="28427">: Provides a modern async/await
    approach to test scripting, encourages simultaneous test execution for faster
    execution, and boasts a simple API for efficient</st> <st c="28587">test development</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="28603">Understanding the advantages and limitations of these tools enables
    us, as a developer, to make informed decisions and select the tool that’s best
    suited to the specific needs of your project, taking into account the technology
    stack and</st> <st c="28842">team familiarity.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="28859">The following chapter takes a closer look at Cypress and its role
    in the E2E testing of web applications.</st> <st c="28966">This focused summary
    reinforces the chapter’s key learnings, highlights its value (learning about E2E
    testing and tools), and provides an overview of the topic of the</st> <st c="29133">next
    chapter.</st>
  prefs: []
  type: TYPE_NORMAL
