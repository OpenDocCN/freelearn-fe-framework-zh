- en: 'Chapter 3. Digging Deeper: Understanding jQuery and WordPress Together'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。深入了解jQuery和WordPress
- en: 'Now that we''ve gotten a look at the basics of jQuery within WordPress, we''re
    ready to dig a little deeper by understanding the following:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了WordPress中jQuery的基础知识，我们准备通过理解以下内容深入了解：
- en: What WordPress themes, WordPress plugins, and jQuery plugins are and do
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WordPress主题、WordPress插件和jQuery插件是什么以及它们的作用
- en: The basics of creating your own WordPress themes, plugins, and jQuery plugins
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建您自己的WordPress主题、插件和jQuery插件的基础知识
- en: Best practices for how and when to apply jQuery directly to a theme or to WordPress
    plugin, as a script or as a jQuery plugin
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在主题或WordPress插件中直接应用jQuery的最佳实践是什么，以及将其作为脚本或jQuery插件。
- en: By taking a closer look at these two main components of WordPress, the theme
    and the plugin as well as how to encapsulate our jQuery code for easier use across
    projects inside a jQuery plugin, we're well on our way to mastering dynamic WordPress
    development.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 通过仔细研究WordPress的这两个主要组成部分，主题和插件，以及如何将我们的jQuery代码封装为jQuery插件，以便在项目中更轻松地使用，我们正在掌握动态WordPress开发的路上。
- en: Two ways to "plugin" jQuery into a WordPress site
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将jQuery“插入”WordPress网站的两种方法
- en: You're aware that WordPress is an impressive publishing platform. Its core strength
    lies in its near perfect separation of content, display, and functionality. Likewise,
    jQuery is an impressive JavaScript library with a lot of effort spent on making
    it work across platforms, be very flexible and extensible, and yet, elegantly
    degradable (if a user doesn't have JavaScript enabled for some reason).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 您知道WordPress是一个令人印象深刻的发布平台。它的核心优势在于完美地将内容、显示和功能分开。同样，jQuery是一个令人印象深刻的JavaScript库，花了很多精力使其跨平台工作，非常灵活和可扩展，但是，如果用户由于某种原因未启用JavaScript，则优雅地退化。
- en: You're aware that WordPress themes control the look and feel of your site and
    that WordPress plugins can help your site do more, but we're going to take a look
    at exactly how those two components work within the WordPress system and how to
    use jQuery from either a theme or a WordPress plugin. In doing so, you'll be better
    able to take advantage of them when developing your jQuery enhancements.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 您知道WordPress主题控制您网站的外观和感觉，WordPress插件可以帮助您的网站做更多事情，但是我们将详细了解这两个组件在WordPress系统中的工作原理以及如何从主题或WordPress插件中使用jQuery。通过这样做，您将能够更好地利用它们来开发您的jQuery增强功能。
- en: Speaking of jQuery enhancements, jQuery scripts can be turned into their own
    type of plugins, not to be confused with WordPress plugins. This makes the work
    you do in jQuery easily portable to different projects and uses.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 说到jQuery增强功能，jQuery脚本可以转换为它们自己的插件类型，不要与WordPress插件混淆。这使得您在jQuery中所做的工作可以轻松地在不同的项目和用途中使用。
- en: Between these three components, themes, WordPress plugins, and jQuery plugins,
    you'll find that just about anything you can dream of creating is at your fingertips.
    Even better, you'll realize that most of the work is already done. All three of
    these component types have extensive libraries of already developed third-party
    creations. Most are free! If they aren't free, you'll be prepared to determine
    if they're worth their price.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在这三个组件之间，主题、WordPress插件和jQuery插件，您会发现几乎您想要创建的任何东西都近在咫尺。更好的是，您会意识到大部分工作已经完成。这三种组件类型都有广泛的已开发的第三方创作库。大多数都是免费的！如果它们不是免费的，您将准备好确定它们是否物有所值。
- en: By understanding the basics of editing themes and creating your own WordPress
    and jQuery plugins, you'll be ready to traverse the world of third-party creations
    and find the best solutions for your projects. You'll also be able to determine
    if it's better or faster to work with another developer's themes, plugins, or
    jQuery plugins, versus creating your own from scratch.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 通过了解编辑主题和创建您自己的WordPress和jQuery插件的基础知识，您将准备好穿越第三方创作的世界，并为您的项目找到最佳解决方案。您还将能够确定是与其他开发人员的主题、插件或jQuery插件一起工作更好还是更快，还是从头开始创建自己的。
- en: WordPress themes overview
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: WordPress主题概述
- en: 'A WordPress theme is, according to the WordPress codex, *a collection of files
    that work together to produce a graphical interface with an underlying unifying
    design for a weblog*. Themes comprise a collection of template files and web collateral
    such as images, CSS stylesheets, and JavaScript. Themes are what allow you to
    modify the way your WordPress site looks, without having to know much about how
    WordPress works, much less change how it works. There are plenty of sites that
    host free themes and or sell premium WordPress themes. A quick Google search for
    "wordpress themes" will give you an idea of the enormity of options available.
    However, when first looking for or researching themes, a good place to start is
    always WordPress'' free theme gallery where you can easily review and demo different
    themes and styles: [http://wordpress.org/extend/themes/](http://wordpress.org/extend/themes/).
    The next screenshot shows the main page of the WordPress theme''s directory:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: WordPress主题是根据WordPress codex的说法*一组文件，这些文件共同产生一个带有统一设计的图形界面，用于博客*。主题包括一系列模板文件和网页素材，例如图像、CSS样式表和JavaScript。主题允许您修改WordPress站点的外观方式，而无需了解WordPress的工作原理，更不用说修改其工作方式了。有许多站点提供免费主题或销售高级WordPress主题。快速搜索“wordpress主题”将让您了解可用选项的庞大性。然而，当首次寻找或研究主题时，始终可以从WordPress的免费主题库开始，您可以轻松地查看和演示不同的主题和样式：[http://wordpress.org/extend/themes/](http://wordpress.org/extend/themes/)。下一个截图显示了WordPress主题目录的主页：
- en: '![WordPress themes overview](img/1742_03_01.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![WordPress主题概览](img/1742_03_01.jpg)'
- en: 'Once you''ve selected a theme to use or work with, you''ll activate the theme
    by navigating to **Administration | Appearance | Themes** in the left-hand side
    panel of your WordPress installation''s administration panel. The next screenshot
    displays the **Manage Themes** panel:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您选择了要使用或处理的主题，您将通过导航到WordPress安装管理面板的左侧面板中的**管理 | 外观 | 主题**来激活主题。下一个截图显示了**管理主题**面板：
- en: '![WordPress themes overview](img/1742_03_02.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![WordPress主题概览](img/1742_03_02.jpg)'
- en: That's the minimum you need to know about themes as a WordPress user. Before
    we get into more detail, let's get an overview of WordPress plugins and jQuery
    plugins first.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是您作为WordPress用户需要了解的关于主题的最低要求。在我们深入了解之前，让我们先简要了解一下WordPress插件和jQuery插件。
- en: WordPress plugins overview
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: WordPress插件概览
- en: So themes change the look of WordPress without affecting its functionality.
    But what if you want to change or add functionality? WordPress plugins allow easy
    modification, customization, and enhancement to a WordPress site. Instead of having
    to dig in to the main files and change the core programming of WordPress, you
    can add functionality by installing and activating WordPress plugins.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，主题改变了WordPress的外观，而不影响其功能。但是，如果您想要更改或添加功能怎么办？WordPress插件允许对WordPress站点进行轻松修改、定制和增强。您可以通过安装和激活WordPress插件来添加功能，而不必深入了解WordPress的主要文件并更改其核心编程。
- en: 'The WordPress development team took great care to make it easy to create plugins
    using access points and methods provided by the WordPress'' **Plugin API** (Application
    Program Interface). The best place to search for plugins is: [http://wordpress.org/extend/plugins/](http://wordpress.org/extend/plugins/).
    The following is a screenshot of the WordPress plugin directory''s main page:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: WordPress开发团队非常注意，通过使用WordPress提供的访问点和方法来创建插件变得很容易，这些访问点和方法由WordPress的**插件API**（应用程序接口）提供。搜索插件的最佳位置是：[http://wordpress.org/extend/plugins/](http://wordpress.org/extend/plugins/)。以下是WordPress插件目录主页的截图：
- en: '![WordPress plugins overview](img/1742_03_03.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![WordPress插件概览](img/1742_03_03.jpg)'
- en: 'Once you have a plugin, it''s a simple matter of decompressing the file (usually
    just unzipping it) and reading the included `readme.txt` file for installation
    and activation instructions. For most WordPress plugins, this is simply a matter
    of uploading the file or directory to your WordPress installation''s `wp-content/plugins`
    directory and then navigating to the **Administration | Plugins | Installed**
    panel to activate it. The next screenshot shows the **Plugins** admin panel with
    the activation screen for the default **Askimet, Hello Dolly**, and new **WordPress
    Importer** plugins:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您安装了插件，只需解压文件（通常只需解压缩），然后阅读包含的`readme.txt`文件以获取安装和激活说明。对于大多数WordPress插件来说，这只是将文件或目录上传到您的WordPress安装的`wp-content/plugins`目录，然后导航到**管理
    | 插件 | 已安装**面板来激活它。下一个截图显示了**插件**管理面板，其中包含了默认的**Askimet、Hello Dolly**和新的**WordPress
    Importer**插件的激活屏幕：
- en: '![WordPress plugins overview](img/1742_03_04.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![WordPress 插件概览](img/1742_03_04.jpg)'
- en: So how does a WordPress plugin differ from a jQuery plugin? In theory and intent,
    not that much, but in practice, there are quite a few differences. Let's take
    a look at jQuery plugins.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 那么 WordPress 插件与 jQuery 插件有什么不同呢？在理论和意图上，差别不大，但在实践中，有相当多的区别。让我们来看看 jQuery 插件。
- en: jQuery plugins overview
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jQuery 插件概览
- en: jQuery has the ability to allow you to take the scripts that you've created
    and encapsulate them into the jQuery function object. This allows your jQuery
    code to do a couple of key things. First, it becomes more easily ported over to
    different situations and uses. Second, your plugin works as a function that can
    be integrated into larger scripts as part of the jQuery statement chain.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 有能力让你将你创建的脚本封装到 jQuery 函数对象中。这使得你的 jQuery 代码可以做一些关键的事情。首先，它变得更容易地移植到不同的情况和用途中。其次，你的插件作为一个函数可以集成到较大脚本中作为
    jQuery 语句链的一部分。
- en: 'The best place to browse for jQuery plugins is the jQuery plugins page ([http://plugins.jquery.com/](http://plugins.jquery.com/)),
    as seen in the next screenshot:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览 jQuery 插件的最佳地点是 jQuery 插件页面（[http://plugins.jquery.com/](http://plugins.jquery.com/)），如下截图所示：
- en: '![jQuery plugins overview](img/1742_03_05.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![jQuery 插件概览](img/1742_03_05.jpg)'
- en: In addition to having jQuery already bundled, WordPress has quite a few jQuery
    plugins already bundled with it as well. WordPress comes bundled with **Color,
    Thickbox** as well as **Form** and most of the **jQuery UI** plugins. Each of
    these plugins can be enabled with the `wp_enqueue_script` either in the theme's
    `header.php` file or `function.php` file, as we learned in [Chapter 2](ch02.html
    "Chapter 2. Working with jQuery in WordPress"), *Working with jQuery in WordPress*.
    In this chapter, we'll shortly learn how to enable a jQuery plugin directly in
    a WordPress plugin.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 除了已经捆绑了 jQuery 外，WordPress 还捆绑了相当多的 jQuery 插件。WordPress 自带 **Color, Thickbox**
    以及 **Form** 还有大多数 **jQuery UI** 插件。这些插件中的每一个都可以通过在主题的 `header.php` 文件或 `function.php`
    文件中使用 `wp_enqueue_script` 来启用，就像我们在 [第二章](ch02.html "第二章。在 WordPress 中使用 jQuery")
    中学到的那样，*在 WordPress 中使用 jQuery*。在本章中，我们将简要学习如何直接在 WordPress 插件中启用一个 jQuery 插件。
- en: Of course, you can also download jQuery plugins and include them manually into
    your WordPress theme or plugins. You'd do this for plugins that aren't bundled
    with WordPress, or if you need to amend the plugins in anyway.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你也可以下载 jQuery 插件并将它们手动包含到你的 WordPress 主题或插件中。你可以为那些没有与 WordPress 捆绑在一起的插件这样做，或者如果你需要以某种方式修改插件。
- en: Yes, you've noticed there's no easy jQuery plugin activation panel in WordPress.
    This is where understanding your chosen theme and WordPress plugins will come
    in handy! You'll soon find you have quite a few options to choose from when leveraging
    jQuery. Now that we have an overview of what WordPress themes, plugins, and jQuery
    plugins are, let's learn how to take better advantage of them.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，你注意到 WordPress 中没有简单的 jQuery 插件激活面板。这就是了解你选择的主题和 WordPress 插件的地方！很快你会发现，在利用
    jQuery 时有很多选择。现在我们已经对 WordPress 主题、插件和 jQuery 插件有了一个概述，让我们学习如何更好地利用它们。
- en: The basics of a WordPress theme
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WordPress 主题的基础知识
- en: By now you've gotten the point that the WordPress theme essentially contains
    the HTML and CSS that wrap and style your WordPress content. Thus, it's usually
    the first place you'll start when incorporating jQuery into a site. Most of the
    time, this is a good approach. Understanding a bit more about how themes work
    can only make your jQuery development go a little smoother. Let's take a look
    at how themes are structured and best practices for editing them.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你已经明白了 WordPress 主题基本上包含了包裹和样式化你的 WordPress 内容的 HTML 和 CSS。因此，当你将 jQuery
    整合到站点中时，通常这是你会开始的地方。大多数情况下，这是一个好的方法。了解更多关于主题如何工作以及编辑它们的最佳实践只会让你的 jQuery 开发变得更加顺畅。让我们来看看主题的结构以及编辑主题的最佳实践。
- en: Tip
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Want to know more about WordPress theme design?**'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**想了解更多关于 WordPress 主题设计的内容吗？**'
- en: This title focuses on what you most need to know to work with jQuery in WordPress.
    If you're interested in WordPress theme development I highly recommend *April
    Hodge Silver* and *Hasin Hayer's* **WordPress 2.7 Complete**. Along with covering
    the complete core competencies for managing a WordPress site,[Chapter 6](ch06.html
    "Chapter 6. WordPress and jQuery's UI"), *WordPress and jQuery's UI* has an overview
    on editing and creating standard themes for WordPress.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这个标题专注于你在 WordPress 中使用 jQuery 最需要了解的内容。如果你对 WordPress 主题开发感兴趣，我强烈推荐*April Hodge
    Silver*和*Hasin Hayer*的**WordPress 2.7 Complete**。除了涵盖管理 WordPress 站点的完整核心能力，[第六章](ch06.html
    "Chapter 6. WordPress and jQuery's UI")*WordPress 和 jQuery 的 UI*还对编辑和创建 WordPress
    的标准主题进行了概述。
- en: If you want to really dig deep into theme design, my title **WordPress 2.8 Theme
    Design** will walk you through creating a working HTML and CSS design mockup and
    coding it up from scratch.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你真的想深入主题设计，我的标题**WordPress 2.8 主题设计**会带你创建一个工作的 HTML 和 CSS 设计模型，并从头开始编码。
- en: Understanding the template's hierarchy
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解模板的层次结构
- en: We've discussed that a WordPress theme comprises many file types including template
    pages. Template pages have a structure or hierarchy to them. That means, if one
    template type is not present, then the WordPress system will call up the next
    level template type. This allows developers to create themes that are fantastically
    detailed, which take full advantage of all of the hierarchy's available template
    page types, to make the setup unbelievably simple. It's possible to have a fully
    functioning WordPress theme that consists of no more than an `index.php` file!
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论过，WordPress 主题包括许多文件类型，包括模板页面。模板页面有它们的结构或层次结构。这意味着，如果一个模板类型不存在，那么 WordPress
    系统将调用下一个级别的模板类型。这使开发人员能够创建非常详细的主题，充分利用了所有可用模板页面类型的层次结构，使设置变得非常简单。一个完全运行的 WordPress
    主题只需一个`index.php`文件！
- en: To really leverage a theme for jQuery enhancement (not to mention help you with
    general WordPress troubleshooting), it's good to start with an understanding of
    the theme's hierarchy.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 要充分利用主题进行 jQuery 增强（更不用说帮助你解决常见的 WordPress 问题），最好先了解主题的层次结构。
- en: In addition to these template files, themes of course also include image files,
    stylesheets, and even custom template pages, and PHP code files. Essentially,
    you can have 14 different default page templates in your WordPress theme, not
    including your `style.css` sheet or includes such as `header.php, sidebar.php`,
    and `searchform.php`. You can have more template pages than that if you take advantage
    of WordPress' capability for individual custom page, category, and tag templates.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些模板文件，主题当然还包括图像文件、样式表，甚至自定义模板页和 PHP 代码文件。基本上，你可以在你的 WordPress 主题中拥有 14 种不同的默认页面模板，不包括你的`style.css`表或者像`header.php,
    sidebar.php`和`searchform.php`这样的包含文件。如果你利用 WordPress 对个别自定义页面、类别和标签模板的能力，还可以拥有更多模板页面。
- en: If you open up the default theme's directory that we've been working with, you'll
    see most of these template files as well as an image directory, `style.css` and
    the `js` directory with the `custom-jquery.js` file we started in [Chapter 2](ch02.html
    "Chapter 2. Working with jQuery in WordPress"), *Working with jQuery in WordPress*.
    The following screenshot shows you the main files in WordPress 3.0's new default
    theme, **Twenty Ten:**
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你打开我们一直在使用的默认主题的目录，你会看到大部分这些模板文件，以及一个图像目录，`style.css`和`js`目录中的我们在[第二章](ch02.html
    "Chapter 2. Working with jQuery in WordPress")中开始的`custom-jquery.js`文件，*用 jQuery
    在 WordPress 中使用*。下面的屏幕截图展示了 WordPress 3.0 的新默认主题**Twenty Ten**中的主要文件：
- en: '![Understanding the template''s hierarchy](img/1742_03_06.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![理解模板的层次结构](img/1742_03_06.jpg)'
- en: The next list contains the general template hierarchy rules. The absolute simplest
    theme you can have must contain an `index.php` page. If no other specific template
    pages exist, then `index.php` is the default.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个列表包含一般的模板层次结构规则。你可以拥有的最简单的主题必须包含一个`index.php`页面。如果没有其他特定的模板页面存在，那么`index.php`就是默认的。
- en: 'You can then begin expanding your theme by adding the following pages:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你可以开始扩展你的主题，添加以下页面：
- en: '`archive.php` trumps `index.php` when a category, tag, date, or author page
    is viewed.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当查看类别、标签、日期或作者页面时，`archive.php`优先于`index.php`。
- en: '`home.php` trumps `index.php` when the home page is viewed.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当查看主页时，`home.php`优先于`index.php`。
- en: '`single.php` trumps `index.php` when an individual post is viewed.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当查看单个帖子时，`single.php`优先于`index.php`。
- en: '`search.php` trumps `index.php` when the results from a search are viewed.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当查看搜索结果时，`search.php`优先于`index.php`。
- en: '`404.php` trumps `index.php` when the URI address finds no existing content.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当URI地址找不到现有内容时，`404.php`优先于`index.php`。
- en: '`page.php` trumps `index.php` when looking at a static page.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当查看静态页面时，`page.php`优先于`index.php`。
- en: 'A custom **template** page, such as: `page_about.php`, when selected through
    the page''s **Administration** panel, trumps `page.php`, which trumps `index.php`
    when that particular page is viewed.'
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择自定义**模板**页面，例如：`page_about.php`，通过页面的**管理**面板后，将优先于`page.php`，而当查看该特定页面时，将优先于`index.php`。
- en: '`category.php` trumps `archive.php`, which then trumps `index.php` when a category
    is viewed.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当查看类别时，`category.php`优先于`archive.php`，然后优先于`index.php`。
- en: 'A custom **category-ID** page, such as: `category-12.php` trumps `category.php`.
    This then trumps `archive.php`, which trumps `index.php`.'
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择自定义**category-ID**页面，例如：`category-12.php`，将优先于`category.php`。这又优先于`archive.php`，而优先于`index.php`。
- en: '`tag.php` trumps `archive.php`. This in turn trumps `index.php` when a tag
    page is viewed.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当查看标签页面时，`tag.php`优先于`archive.php`。这又优先于`index.php`。
- en: 'A custom **tag-tagname** page, such as: `tag-reviews.php` trumps `tag.php`.
    This trumps `archive.php`, which trumps `index.php`.'
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择自定义**tag-tagname**页面，例如：`tag-reviews.php`，将优先于`tag.php`。这将优先于`archive.php`，而优先于`index.php`。
- en: '`author.php` trumps `archive.php`. This in turn trumps `index.php`, when an
    author page is viewed.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当查看作者页面时，`author.php`优先于`archive.php`。这又优先于`index.php`。
- en: '`date.php` trumps `archive.php`. This trumps `index.php` when a date page is
    viewed.![Understanding the template''s hierarchy](img/1742_03_07.jpg)'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当查看日期页面时，`date.php`优先于`archive.php`。这将优先于`index.php`。
- en: Note
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can learn more about the WordPress theme template hierarchy here:'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以在此处了解有关WordPress主题模板层次结构的更多信息：
- en: '[http://codex.wordpress.org/Template_Hierarchy](http://codex.wordpress.org/Template_Hierarchy).'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[http://codex.wordpress.org/Template_Hierarchy](http://codex.wordpress.org/Template_Hierarchy)。'
- en: A whole new theme
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一个全新的主题
- en: If you wanted to create a new theme, or as in the case of this book, if you'll
    be modifying a theme considerably, you'll want to create a directory with a file
    structure similar to the hierarchy explained previously. Again, because it's hierarchal,
    you don't have to create every single page suggested, higher up pages will assume
    the role unless you decide otherwise. As I've mentioned, it is possible to have
    a working theme with nothing but an `index.php` file.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要创建一个新主题，或者像本书的情况一样，如果您将大幅修改一个主题，您将想要创建一个类似于先前解释的层次结构的目录。再次强调，因为它是分层的，您不必创建每个建议的页面，更高级的页面将承担角色，除非您另有决定。正如我所提到的，只有一个`index.php`文件的工作主题是可能的。
- en: 'I''ll be modifying the default theme, yet would like the original default theme
    available for reference. I''ll make a copy of the default theme''s directory and
    rename it to: `twentyten-wp-jq`. WordPress depends on the theme directories namespace.
    Meaning, each theme requires a uniquely named folder! Otherwise, you''ll copy
    over another theme. The next screenshot shows this directory''s creation:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我将修改默认主题，但仍希望可以参考原始默认主题。我将复制默认主题的目录并将其重命名为：`twentyten-wp-jq`。WordPress依赖于主题目录的命名空间。这意味着，每个主题都需要一个唯一命名的文件夹！否则，您将复制另一个主题。下一个截图显示了此目录的创建：
- en: '![A whole new themeWordPress themeexpanding](img/1742_03_08.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![一个全新的主题WordPress主题扩展](img/1742_03_08.jpg)'
- en: 'I''ll then open up the `style.css` file and modify the information at the beginning
    of the CSS file:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我将打开`style.css`文件并修改CSS文件开头的信息：
- en: '[PRE0]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'My "new" theme will then show up in the administration panel''s **Manage Themes**
    page. You can take a new screenshot to update your new or modified theme. If there
    is no screenshot, the frame will display a grey box. As the look of the theme
    is going to change a little, I''ve removed the `screenshot.png` file from the
    directory for now, as you can see in the next screenshot:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我的“新”主题将出现在管理面板的**管理主题**页面中。您可以拍摄新主题或修改后的主题的新截图。如果没有截图，框架将显示一个灰色框。由于主题的外观将有些变化，我暂时从目录中删除了`screenshot.png`文件，您可以在下一个截图中看到：
- en: '![A whole new themeWordPress themeexpanding](img/1742_03_09.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![一个全新的主题WordPress主题扩展](img/1742_03_09.jpg)'
- en: The Loop
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 循环
- en: 'In [Chapter 1](ch01.html "Chapter 1. Getting Started: WordPress and jQuery"),
    *Getting Started: WordPress and jQuery* and [Chapter 2](ch02.html "Chapter 2. Working
    with jQuery in WordPress"), *Working with jQuery in WordPress* we learned how
    useful it was that jQuery "looped" through the selected elements in the wrapper
    for you. WordPress does a little looping of its own; in fact, it''s important
    enough to be named "The Loop". **The Loop** is an essential part of your WordPress
    theme. It displays your posts in chronological order and lets you define custom
    display properties with various WordPress template tags wrapped in HTML markup.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第1章](ch01.html "第1章。入门：WordPress和jQuery")，*入门：WordPress和jQuery*和[第2章](ch02.html
    "第2章。在WordPress中使用jQuery")，*在WordPress中使用jQuery*中，我们学到了jQuery在包装器中“循环”所选元素有多有用。WordPress也有自己的一些循环；事实上，它非常重要，以至于被命名为“循环”。
    **循环**是您的WordPress主题的重要组成部分。它按时间顺序显示您的帖子，并使用包含在HTML标记中的各种WordPress模板标记定义自定义显示属性。
- en: 'The Loop in WordPress is a **while loop** and therefore starts with the PHP
    code: `while (have_posts()):` followed by the template tag `the_post()`. All the
    markup and additional template tags are then applied to each post that gets looped
    through for display. The Loop is then ended with the PHP `endwhile` statement.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在WordPress中，循环是一个**while循环**，因此以PHP代码开始：`while (have_posts()):`，后跟模板标签`the_post()`。然后，所有标记和额外的模板标签都应用于每个要循环显示的帖子。然后，使用PHP的`endwhile`语句结束循环。
- en: 'Every template page view can have its own loop so that you can modify and change
    the look and layout of each type of post sort. Every template page is essentially,
    just *sorting* your posts in different ways. For example, different category or
    tag template pages sort and refine your posts down to meet specific criteria.
    Those sorted posts can appear different from posts on your main page, or in your
    archive lists, and so on. The next example is a very simple loop taken from WordPress
    2.9.2''s default Kubrick theme:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 每个模板页面视图都可以有自己的循环，以便您可以修改和更改每种类型的帖子排序的外观和布局。每个模板页面本质上只是以不同的方式对您的帖子进行排序。例如，不同的类别或标记模板页面将帖子排序和精炼到满足特定标准。那些排序的帖子可以与主页上的帖子或存档列表中的帖子看起来不同，等等。下一个示例是从WordPress
    2.9.2的默认Kubrick主题中取出的一个非常简单的循环：
- en: '[PRE1]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The loop is tucked into a large `if/else` statement that most importantly checks
    if there are posts to sort. If there are no matching posts to display, a "Sorry"
    message is displayed, and the `searchform.php` file is included with the `get_search_form()`
    include tag.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 循环被嵌套在一个大的`if/else`语句中，最重要的是检查是否有要排序的帖子。如果没有匹配的帖子要显示，则显示“抱歉”消息，并使用`get_search_form()`包含标签包含`searchform.php`文件。
- en: The new WordPress 3.0 Twenty Ten theme has its loop separated out into its own
    template page called `loop.php`, and it has quite a few more `if/else` statements
    within it so that the same loop code can handle many different situations, instead
    of writing individual loops for different template pages. On the whole, the same
    basic template tags as well as conditional and include tags are used in the new
    theme as they were before in the previous default theme. There are now just a
    few new template and include tags that help you streamline your theme.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 新的WordPress 3.0 Twenty Ten主题将其循环分离到名为`loop.php`的自己的模板页面中，其中包含了相当多的`if/else`语句，以便相同的循环代码可以处理许多不同的情况，而不是为不同的模板页面编写单独的循环。总的来说，新主题中使用的基本模板标签以及条件和包含标签与以前的默认主题中的使用方式相同。现在只有几个新的模板和包含标签可以帮助您简化主题。
- en: Let's take a closer look at some of these template tags, include and conditional
    tags, and the API hooks available to us in a WordPress theme.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们仔细看一些这些模板标签、包含标签和条件标签，以及WordPress主题中可用的API挂钩。
- en: Tags and hooks
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标签和挂钩
- en: Within The Loop, you probably noticed some interesting bits of code wrapped
    in PHP tags. The code isn't pure PHP, most of them are WordPress-specific tags
    and functions such as **template tags**, which only work within a WordPress system.
    The most obviously important template tags in The Loop are `the_title()`, and
    `the_content()`. You'll notice that most tags and functions can have various parameters
    passed through them. You'll notice that in the previous code snippet, `the_content`
    tag has a parameter `'Read the rest of this entry &raquo;'` passed to it. That
    string of text with a right angle quote, will appear if the `<!--more-->` tag
    is placed into a post.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在循环内，你可能会注意到一些有趣的代码片段被包裹在 PHP 标签中。这些代码不是纯 PHP，大多数是 WordPress 特定的标签和函数，比如**模板标签**，它们只在
    WordPress 系统中工作。在循环中最显然重要的模板标签是`the_title()`和`the_content()`。你会注意到大多数标签和函数可以通过它们传递各种参数。你会注意到在前面的代码片段中，`the_content`
    标签有一个参数`'Read the rest of this entry &raquo;'`传递给它。如果 `<!--more-->` 标签被放置到帖子中，这串带有右尖括号的文本将出现。
- en: 'Not all WordPress tags and functions go inside the loop. If you poked around
    the `header.php` file at all in [Chapter 1](ch01.html "Chapter 1. Getting Started:
    WordPress and jQuery"), *Getting Started: WordPress and jQuery* and [Chapter 2](ch02.html
    "Chapter 2. Working with jQuery in WordPress"), *Working with jQuery in WordPress*,
    you probably noticed things such as `blog_info()` and `body_class()`, and of course
    the `wp_enqueue_script()` that we used to register jQuery in our installation.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有 WordPress 标签和函数都放在循环内。如果你在 [第一章](ch01.html "第一章。入门：WordPress 和 jQuery")——*入门：WordPress
    和 jQuery* 和 [第二章](ch02.html "第二章。在 WordPress 中使用 jQuery")——*在 WordPress 中使用 jQuery*
    中浏览过`header.php`文件，你可能会注意到诸如`blog_info()`和`body_class()`，当然还有我们在安装中使用的`wp_enqueue_script()`来注册
    jQuery。
- en: 'When having to work with theme template files for development and enhancement,
    I''ve found that the following template tags and functions are useful to recognize
    and know:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在需要处理主题模板文件进行开发和增强时，我发现以下模板标签和函数是有用的：
- en: '`bloginfo()`—this tag can be passed parameters to retrieve all sorts of information
    about your blog. In the `header.php` file, you''ll note it''s most commonly used
    to find your stylesheet directory `bloginfo(''stylesheet_directory'')` and stylesheet
    URL `bloginfo(''stylesheet_url'')`. It can also display your RSS URL, what version
    of WordPress your site is running, and quite a few other details. For more details,
    have a look at: [http://codex.wordpress.org/Template_Tags/bloginfo](http://codex.wordpress.org/Template_Tags/bloginfo).'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bloginfo()`——此标签可以传递参数来检索关于你的博客的各种信息。在 `header.php` 文件中，你会注意到它最常用于查找你的样式表目录
    `bloginfo(''stylesheet_directory'')` 和样式表 URL `bloginfo(''stylesheet_url'')`。它还可以显示你的
    RSS URL，你的站点正在运行的 WordPress 版本，以及一些其他详细信息。更多详情，请查看：[http://codex.wordpress.org/Template_Tags/bloginfo](http://codex.wordpress.org/Template_Tags/bloginfo)。'
- en: '`wp_title()`—this tag can be outside the loop and it displays the title of
    a page or single post (not a sorted list of several posts). You can pass it a
    few options such as what text separator to use in the title, and if the separator
    text should show up on the left or the right. You can also pass this tag a Boolean
    true or false to display the title. `wp_title("--",true,"right")`. For more details,
    have a look at [http://codex.wordpress.org/Template_Tags/wp_title](http://codex.wordpress.org/Template_Tags/wp_title).'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wp_title()`——此标签可以在循环外，并显示页面或单个帖子的标题（不是若干帖子的排序列表）。你可以传递一些选项，比如在标题中使用什么文本分隔符，以及分隔符文本是显示在左侧还是右侧。你还可以传递一个布尔值
    true 或 false 来显示标题。`wp_title("--",true,"right")`。更多详情，请查看[http://codex.wordpress.org/Template_Tags/wp_title](http://codex.wordpress.org/Template_Tags/wp_title)。'
- en: '`the_title()`—this tag goes inside the loop. It displays the title of the current
    post and you can pass it any text characters you''d like the title to be wrapped
    in: `the_title("<h2>", "</h2>")`. For more details, have a look at [http://codex.wordpress.org/Template_Tags/the_title](http://codex.wordpress.org/Template_Tags/the_title).'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`the_title()`——此标签放在循环内。它显示当前文章的标题，你可以传递任何你想将标题包裹在其中的文本字符：`the_title("<h2>",
    "</h2>")`。更多详情，请查看[http://codex.wordpress.org/Template_Tags/the_title](http://codex.wordpress.org/Template_Tags/the_title)。'
- en: '`the_content()`—this tag goes inside the loop and it displays the post''s content.
    If you don''t pass it any `params`, it will display a generic **Read More** link
    if the `<!--more-->` tag is used in the post. Otherwise, you can pass it what
    you''d like the ''read more'' instructions to say (I''ve even found passing an
    existing tag works here. `the_content("Continue Reading".the_title())`. For more
    details, have a look at [http://codex.wordpress.org/Template_Tags/the_content](http://codex.wordpress.org/Template_Tags/the_content).'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`the_content()`—这个标签放在循环中，用于显示帖子的内容。如果您不传递任何 `params`，它将在帖子中使用 `<!--more-->`
    标签时显示一个通用的**阅读更多**链接。否则，您可以传递您想要的“阅读更多”说明（我甚至发现在这里传递现有的标签也起作用。`the_content("Continue
    Reading".the_title())`）。有关更多详细信息，请查看 [http://codex.wordpress.org/Template_Tags/the_content](http://codex.wordpress.org/Template_Tags/the_content)。'
- en: '`the_category()`—this tag also has to go into the loop and it displays a link
    or links to the categories assigned to the post. You can pass it the text separators
    of your choice if there''s more than one category. `the_category(", ")`. For more
    details, have a look at [http://codex.wordpress.org/Template_Tags/the_category](http://codex.wordpress.org/Template_Tags/the_category).'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`the_category()`—这个标签也必须放在循环中，它显示分配给帖子的类别的链接或链接。如果有多个类别，您可以传递您选择的文本分隔符。`the_category(",
    ")`。有关更多详细信息，请查看 [http://codex.wordpress.org/Template_Tags/the_category](http://codex.wordpress.org/Template_Tags/the_category)。'
- en: '`the_author_meta()`—this tag also has to go into the loop. It has a wealth
    of parameters that can be passed to it. You''ll be most familiar with `the_author_meta("nickname")`,
    or `the_author_meta("first_name")`, or `the_author_meta("last_name")`. You can
    also get the author''s bio, `the_author_meta("description")`, as well as e-mail
    and website URLs. Your best bet is to review the codex for all that you can do
    with this tag: [http://codex.wordpress.org/Template_Tags/the_author_meta](http://codex.wordpress.org/Template_Tags/the_author_meta).'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`the_author_meta()`—这个标签也必须放在循环中。它有丰富的参数可供传递。你可能最熟悉的是 `the_author_meta("nickname")`，或者
    `the_author_meta("first_name")`，或者 `the_author_meta("last_name")`。你还可以获取作者的简介，`the_author_meta("description")`，以及电子邮件和网站的
    URL。最好的办法是查看 Codex，了解可以使用这个标签做什么：[http://codex.wordpress.org/Template_Tags/the_author_meta](http://codex.wordpress.org/Template_Tags/the_author_meta)。'
- en: Note
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The WordPress template tag library is extensive and the creative ways you can
    use the tags in your themes can just stretch to infinity. I''ve included the tags
    that make a template useful and great, but by all means, do check out the codex:'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: WordPress 模板标签库非常丰富，您可以在主题中使用这些标签的创造性方式几乎无限。我包括了使模板有用且出色的标签，但请务必查看 Codex：
- en: '[http://codex.wordpress.org/Template_Tags](http://codex.wordpress.org/Template_Tags).'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[http://codex.wordpress.org/Template_Tags](http://codex.wordpress.org/Template_Tags)。'
- en: Conditional tags
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 条件标签
- en: The conditional tags can be used in your template files to change what content
    is displayed and how that content is displayed on a particular page depending
    on what conditions that page matches. For example, you might want to display a
    snippet of text above the series of posts, but only on the main page of your blog.
    With the `is_home()` conditional tag, that task is made easy.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 条件标签可以在模板文件中使用，根据页面匹配的条件改变显示的内容以及如何显示该内容。例如，您可能希望在一系列帖子上方显示一小段文字，但只在博客的主页上显示。使用
    `is_home()` 条件标签，这个任务就变得很容易。
- en: 'There are conditional tags for just about everything; out of all of them, these
    are the few that I find I need most in my theme development:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎可以为一切内容编写条件标签；在所有条件标签中，以下是我在主题开发中最常需要的几个：
- en: '`is_page()`'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`is_page()`'
- en: '`is_home()` or `is_front_page()`'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`is_home()` 或 `is_front_page()`'
- en: '`is_single()`'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`is_single()`'
- en: '`is_sticky()`'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`is_sticky()`'
- en: 'All of those functions can take the following parameters: the post ID or page
    ID number, the post or page title, or the post or page slug. As great as themes
    are, I''m sure you''ve run into the conundrum that you or your client doesn''t
    want the exact same sidebar on every single page or post.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些函数都可以使用以下参数：帖子 ID 或页面 ID 数字，帖子或页面标题，或帖子或页面别名。尽管主题很棒，但我相信您已经遇到过这样的困境，即您或您的客户不希望每个页面或帖子上都有完全相同的侧边栏。
- en: I use these conditional tags to ensure specific pages can have particular styles
    or divs of content turned on and off and display or not display specific content.
    These tags really help give project sites a true, custom website feel.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用这些条件标签来确保特定页面可以打开或关闭特定样式或内容 div，并显示或不显示特定内容。这些标签真的有助于使项目站点具有真正的自定义网站感觉。
- en: Note
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The conditional tag fun doesn''t end there. There are many more that you may
    find invaluable in aiding your theme''s customization:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 条件标签的乐趣并不止于此。你可能会发现还有许多其他标签在帮助你的主题自定义方面非常有用：
- en: '[http://codex.wordpress.org/Conditional_Tags](http://codex.wordpress.org/Conditional_Tags).'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://codex.wordpress.org/Conditional_Tags](http://codex.wordpress.org/Conditional_Tags).'
- en: Template include tags
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模板包含标签
- en: 'In the `index.php` template page and other template pages like `single.php`
    or `page.php` and so on, you probably noticed these include tags. They let you
    include standard page includes into the other template pages:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `index.php` 模板页面和其他模板页面，比如 `single.php` 或 `page.php` 等等，你可能会注意到这些包含标签。它们允许你将标准页面包含到其他模板页面中：
- en: '`get_header()`'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_header()` '
- en: '`get_footer()`'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_footer()`'
- en: '`get_sidebar()`'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_sidebar()`'
- en: '`comments_template()`'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`comments_template()`'
- en: 'custom include: `include(TEMPLATEPATH."/file-name.php")`'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义包含：`include(TEMPLATEPATH."/file-name.php")`
- en: Creating custom header, footer, sidebar includes
  id: totrans-110
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建自定义头部、尾部、侧边栏包含
- en: 'A while back, WordPress 2.7 introduced the ability to create *custom* headers,
    footers, and sidebar templates for a theme. You simply create your custom header,
    footer, or sidebar and call it using the standard include template tag. Be sure
    to add a file *prefix* of `header-, footer-`, or `sidebar-`, and your own file
    name. You can then call your custom template file as follows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 有一段时间了，WordPress 2.7 引入了创建*自定义*头部、尾部和侧边栏模板的能力。你只需创建自定义的头部、尾部或侧边栏，并使用标准的 include
    模板标签调用它。确保添加一个文件*前缀*为 `header-`、`footer-` 或 `sidebar-`，以及你自己的文件名。然后，你可以按如下方式调用你的自定义模板文件：
- en: '`get_header(''customHeader'')` will include `header-customHeader.php`'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_header(''customHeader'')` 将包含 `header-customHeader.php`'
- en: '`get_footer(''customFooter'')` will include `footer-customFooter.php`'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_footer(''customFooter'')` 将包含 `footer-customFooter.php`'
- en: '`get_sidebar(''customSidebar'')` will include `sidebar-customSidebar.php`'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_sidebar(''customSidebar'')` 将包含 `sidebar-customSidebar.php`'
- en: Plugin hooks
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 插件钩子
- en: 'In general, unless you''re a plugin developer, you probably don''t have much
    need to pour over the plugin API. There are, however, a few hooks that should
    be placed into themes in order for plugins to work effectively with your theme.
    If you''re editing a theme, be sure to not remove these hook tags, or if you''re
    creating a custom theme, be sure to include them:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，除非你是插件开发者，否则你可能没有太多需要研究插件 API 的需求。然而，有一些钩子应该放在主题中，以便插件能够有效地与你的主题配合使用。如果你正在编辑一个主题，请确保不要删除这些钩子标签，或者如果你正在创建一个自定义主题，请确保包含它们：
- en: '`wp_head:` Place within the `<head>` tags of a `header.php` template:'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wp_head:` 放在 `header.php` 模板的 `<head>` 标签内：'
- en: '[PRE2]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`wp_footer:` Place within the `footer.php` template:'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wp_footer:` 放在 `footer.php` 模板中：'
- en: '[PRE3]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`wp_meta:` You''ll most likely place this hook within the `sidebar.php` template.
    However, it''s best to add this hook wherever you intend plugins and widgets to
    appear:'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wp_meta:` 你最有可能将这个钩子放在`sidebar.php`模板中。但是，最好在你打算让插件和小部件出现的任何地方添加这个钩子：'
- en: '[PRE4]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`comment_form:` Goes in `comments.php` and `comments-popup.php`, before the
    `</form>` closing tag:'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`comment_form:` 放在 `comments.php` 和 `comments-popup.php` 中，在 `</form>` 结束标签之前：'
- en: '[PRE5]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Project: Editing the main loop and sidebar in the default theme'
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 项目：编辑默认主题中的主循环和侧边栏
- en: 'Alright! That may seem like a lot to know about themes! As someone just looking
    to enhance a WordPress site with jQuery, you may be asking: "Is it really necessary
    to know all that?" Even if you have no interest in creating custom themes, from
    time to time, when working with jQuery, you''ll find it very useful to be able
    to understand how WordPress themes work, what HTML markup the theme is outputting,
    and what most of the different tags and functions do.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 好了！那看起来可能是关于主题的很多知识！作为一个只是想用 jQuery 增强 WordPress 网站的人，你可能会问：“真的有必要了解这些吗？”即使你对创建自定义主题没有兴趣，但是偶尔在使用
    jQuery 时，了解 WordPress 主题的工作原理、主题输出的 HTML 标记以及大多数不同标记和函数的作用，对你会非常有用。
- en: Granted, in [Chapter 2](ch02.html "Chapter 2. Working with jQuery in WordPress"),
    *Working with jQuery in WordPress*, I strongly advocated that you learn how to
    handle jQuery's selectors, inside and out, specifically so that you would be able
    to enhance any WordPress site without having to edit its theme. While you should
    know your jQuery selectors and filters like the back of your hand, it's not always
    the quickest or easiest approach. Sometimes, while you can select and edit anything
    that you want on the page, the jQuery selection process and statement chain is
    bloated; it could be cleaned up and trimmed down if only some element just had
    a specific HTML tag, `class` or `id` attribute. There will be lots of situations
    where being able to edit the theme directly will allow you to create your jQuery
    enhancements faster and with less code. Not to mention, many themes are great,
    but can usually be made a little better and more customized to your site with
    just the simplest theme tweaks. Let's do that now and take what we've just learned
    about themes and put it to use.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，在[第 2 章](ch02.html "第 2 章。在WordPress中使用jQuery")中，*在WordPress中使用jQuery*，我强烈建议您学习如何精通jQuery的选择器，以便能够在不编辑其主题的情况下增强任何WordPress网站。虽然您应该对
    jQuery 的选择器和过滤器了如指掌，但这并不总是最快或最简单的方式。有时，虽然您可以选择和编辑页面上的任何内容，但 jQuery 的选择过程和语句链显得臃肿；如果某些元素只有特定的HTML标签，`class`或`id`属性，那么它或许可以被清理并缩减代码。有很多情况下直接编辑主题将使您能够更快地创建jQuery增强功能，并减少代码。更不用说，许多主题都很棒，但通常能够通过简单的主题调整使其更好并更加个性化适合您的网站。现在让我们做这个，并将我们刚刚学到的关于主题的东西付诸实践。
- en: Now, the new Twenty Ten default theme we're using is great, but it would be
    better if the date was a bit more prominent in the posts and if the Sidebar was
    cleaned up to look more like "official" links, instead of just lists of bullets.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们使用的新的 Twenty Ten 默认主题很好，但是如果在帖子中日期更加突出，并且侧边栏被清理得更像“官方”链接，而不只是项目列表，会更好。
- en: Changing the loop
  id: totrans-129
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 改变循环
- en: Since we're touching up the theme, I want to change what the loop displays.
    We're going to assume this is a site for a client, and I know the client will
    *eventually* want to focus on the post's authors (there are many authors on this
    "hypothetical" site) and while the date is important, it shouldn't be on the same
    line as the author's name. I'm sure you've seen some blogs that have a little
    calendar or iCal-ish icons next to the post. I think that's a visually appealing
    way to display information like that, and not have the date take up a lot of room.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们正在修改主题，我想改变循环显示的内容。我们要假设这是一个客户的网站，我知道客户*最终*会想要关注帖子的作者（在这个“假设”的网站上有很多作者），尽管日期很重要，但它不应该与作者的姓名放在同一行。我相信你肯定见过一些博客在帖子旁边有一个小日历或
    iCal 样式的图标。我认为那是显示类似信息的一种视觉上吸引人的方式，而且不会占据太多空间。
- en: Using the free open source vector editor Inkscape ([http://inkscape.org](http://inkscape.org)),
    I made a calendar background icon that can have the day's date up top in red and
    the three letter month below it. The icon is about 32 pixels square. You can use
    whichever graphic program you prefer, GIMP, Photoshop, Illustrator, and so on,
    to create a similar icon, or you can probably find a royalty-free image on the
    Web.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 使用免费的开源矢量编辑器 Inkscape ([http://inkscape.org](http://inkscape.org))，我制作了一个可以在顶部显示当天日期并在下面显示三个月份缩写的日历背景图标。该图标约为
    32 像素正方形。您可以使用您喜欢的任何图形程序，比如 GIMP，Photoshop，Illustrator 等，来创建一个类似的图标，或者您可能在网上找到免版税的图像。
- en: '![Changing the loop](img/1742_03_10.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![改变循环](img/1742_03_10.jpg)'
- en: To get our calendar background behind our date and formatted properly, let's
    dig into the loop. The default theme's loop is located inside the template file
    called `loop.php`. This is a much longer loop than you may be used to if this
    is your first time working with the Twenty Ten default theme. Ultimately, we're
    interested in the "normal" or "everything else" view that is displayed on the
    site's "home" or default blog page. You'll find this code around line **127**
    starting with `<div class="entry-meta">`.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让我们的日历背景在日期后面并且格式正确，让我们深入循环。默认主题的循环位于名为 `loop.php` 的模板文件中。如果这是您第一次使用 Twenty
    Ten 默认主题，那么这个循环可能比您所习惯的要长得多。最终，我们对显示在网站“主页”或默认博客页面上的“正常”或“其他一切”视图感兴趣。您会在代码的第 **127**
    行左右找到它，以 `<div class="entry-meta">` 开头。
- en: 'To start, comment out the custom PHP function `twentyten_posted_on` (it references
    a custom function in the theme''s `function.php` file, getting into which is a
    bit beyond the scope of this title), and then add the following HTML markup and
    PHP template tags in bold:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '要开始，注释掉自定义的PHP函数 `twentyten_posted_on`（它引用了主题的`function.php`文件中的自定义函数，这有点超出了这个标题的范围），然后在粗体中添加以下HTML标记和PHP模板标签:'
- en: '[PRE6]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: What we're focusing on is the date display. The date is displayed with a template
    tag called `the_time` which has parameters set to display the full month, the
    day "as said", and the year; for example; February 4, 2010.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要关注的是日期显示。日期以称为`the_time`的模板标签显示，其中的参数设置为显示完整的月份，"如所说"的日期和年份；例如；2010年2月4日。
- en: 'I just want to display the date''s number and the three-letter abbreviation
    of the month underneath that. `the_time` tag''s parameters don''t really let me
    add HTML break tags, so I''ll separate my date into two separate `the_time` tag
    calls so that I can control the HTML a little better. I''ll also want to ensure
    my style only applies to this loop and not the `<small>` date and content that''s
    wrapped in other template page''s loops, so I''ll be sure to add a custom `date`
    class to the `<small>` tag. I''ll also wrap the year date display inside some
    `<span>` tags so that I can have some additional style control over it. My date
    display and classes end up looking like this:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我只想显示日期的数字和月份的三个字母缩写。`the_time`标签的参数实际上不允许我添加HTML换行标记，因此我将我的日期分为两个独立的`the_time`标签调用，以便我可以更好地控制HTML。我还希望确保我的样式仅适用于这个循环，而不适用于其他模板页面循环中包裹的`<small>`日期和内容，因此我一定要为`<small>`标签添加自定义`date`类。我还将年份日期显示包含在一些`<span>`标签中，以便我可以对其进行额外的样式控制。我的日期显示和类最终如下：
- en: '[PRE7]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We'll then open up the CSS `style.css` stylesheet and add the rules for the
    special class name that we added to the date display, and modify the header display.
    I simply add my modifications to the very bottom of the `style.css` stylesheet.
    If on the odd chance, any of my style names are the same as anything already defined
    in the stylesheet, my rules will inherit from the previous rule and amend it (Either
    that, or make it blatantly clear that I need a more unique style name.)
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们打开CSS的`style.css`样式表，并添加特殊类名的规则到日期显示，并修改标题显示。我只是简单地将我的修改添加到`style.css`样式表的底部。如果碰巧我的样式名称与样式表中已经定义的任何东西相同，我的规则将继承自上一个规则并进行更改（或者明确表示我需要更独特的样式名称）。
- en: 'First, I''ll move the `h2` headers on the home page itself that are inside
    the `.post` class over 40 pixels, in order to make room for my date. Next, I''ll
    move my date inside the `.post` class up about 25 pixels to have it sit next to
    the header. Within this rule, I also assign the `dateBackground.png` that I created
    in Inkscape and tweak the date number''s size, color, and a few other properties
    a bit. Lastly, I set my month display size and color inside the span tag as follows:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我会将主页上的`h2`标题（位于`.post`类中）向上移动40个像素，以便为我的日期腾出空间。接下来，我将把我的日期移到`.post`类中，向上移动约25个像素，使其与标题并排。在这条规则中，我还为自己在Inkscape中创建的`dateBackground.png`分配了背景，并微调日期数字的大小、颜色和其他一些属性。最后，我在span标签中设置了月份显示大小和颜色，结果如下：
- en: '[PRE8]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'And with that, the next screenshot shows what our post''s headers and dates
    appear like now:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，下一张截图展示了我们帖子的标题和日期的现在的样子：
- en: '![Changing the loop](img/1742_03_11.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![修改循环](img/1742_03_11.jpg)'
- en: Not bad! Now, let's tackle the sidebar.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 不错！现在，让我们来处理一下侧边栏。
- en: Changing the sidebar
  id: totrans-145
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 改变侧边栏
- en: The sidebar will be easy. The whole thing in the Twenty Ten default theme is
    widgetized, so any reordering that we want to do can be done through the administration
    panel. However, we do want to adjust the CSS of the sidebar's bulleted lists a
    bit. When amending a theme you didn't create yourself from scratch, it's always
    best to add new classes to the markup and stylesheet, rather than change or edit
    any of the original styles that the author put in. This just makes it easier to
    revert for various reasons. As you must have noticed earlier, I always add my
    new custom styles to the bottom of the `style.css` stylesheet.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 侧边栏很容易。Twenty Ten默认主题中的整个侧边栏都是小部件化的，因此我们想要重新排序的任何内容都可以通过管理面板进行。但是，我们确实想微调一下侧边栏项目的项目符号列表的CSS。在修改一个不是从头开始创建的主题时，最好总是将新的类添加到标记和样式表中，而不是更改或编辑作者放置的任何原始样式。这样做只会使多种原因下还原更容易。正如你之前可能已经注意到的，我总是将我的新自定义样式添加到`style.css`样式表的底部。
- en: Let's start off by opening up `sidebar.php` in our editor and just adding in
    a new class name that we can use to style any widgets that get loaded up into
    any of the widget areas. Wherever I find a `<ul class="xoxo">` tag, I'll just
    add an additional class called `.currentsidebar` after the .xoxo class. This appears
    twice in the `sidebar.php` file approximately around line **12**, and again, approximately
    around line **51**.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从在编辑器中打开`sidebar.php`开始，只需添加一个新的类名，我们可以用来为加载到任何小部件区域的任何小部件设置样式。无论我在哪里找到`<ul
    class="xoxo">`标签，我都会在.xoxo类之后添加一个额外的类，称为.currentsidebar。这在`sidebar.php`文件中大约在第**12**行附近出现了两次，还有一次大约在第**51**行附近。
- en: '[PRE9]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Next, we''ll now simply open up our `style.css` stylesheet, and again at its
    bottom, let''s write up our new `.currentsidebar` CSS rules to affect the list
    items:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们现在只需打开我们的`style.css`样式表，在其底部再次编写我们的新的.currentsidebar CSS 规则以影响列表项：
- en: '[PRE10]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Tada! As you can see in the next screenshot, our page and sidebar navigation
    now look like this:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 哇！正如您在下一个截图中所见，我们的页面和侧边栏导航现在是这样的：
- en: '![Changing the sidebardefault thememain loop, changing](img/1742_03_12.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![更改侧边栏默认主循环，更改](img/1742_03_12.jpg)'
- en: As you can see, touching up a WordPress theme is easy. Not only can you customize
    your theme to look and work the way you want, you can imagine how easy it is to
    tweak the theme's HTML markup so that your jQuery enhancements are easier to add
    in. Next, let's move on to WordPress plugins.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，对 WordPress 主题进行微调很容易。您不仅可以自定义主题以满足您的外观和功能需求，还可以想象调整主题的 HTML 标记以便更轻松地添加您的
    jQuery 增强功能有多容易。接下来，让我们转向 WordPress 插件。
- en: The basics of a WordPress plugin
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WordPress插件的基础知识
- en: Now honestly, the details of writing WordPress plugins are far beyond the scope
    of this title; my goal is to show you the structure of a simple WordPress plugin
    and the basics of how to construct one. Understanding this, you can begin to write
    your own basic plugins and feel more confident looking through other people's
    plugins when assessing what kind of features they provide to your WordPress site
    and if you need to tweak anything for your jQuery enhancements. Even as simply
    and basically as we're going to work, you'll see how truly powerful WordPress
    plugins can be.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 现在说实话，撰写 WordPress 插件的细节远远超出了本标题的范围；我的目标是向您展示简单 WordPress 插件的结构以及如何构建插件的基础知识。理解这一点，您可以开始编写自己的基本插件，并且在评估其他人的插件时更有信心，看看它们为您的
    WordPress 站点提供了什么样的功能，以及您是否需要为您的 jQuery 增强功能进行任何调整。即使是我们将要进行的简单和基本的工作，您也会看到 WordPress
    插件确实有多么强大。
- en: Tip
  id: totrans-156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Want to become a WordPress plugin rockstar?**'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '**想成为 WordPress 插件之星？**'
- en: 'You can start off with, yet again, **WordPress 2.7 Complete** by *April Hodge
    Silver* and *Hasin Hayder*. There''s a chapter on plugins that walks you through
    creating very useful simple plugins, as well as a more complex plugin that writes
    to the WordPress database. Beyond that, you''ll want to check out **WordPress
    Plugin Development: Beginner''s Guide** by *Vladimir Prelovac*. Don''t let the
    title fool you, Vladimir will have you generating feature rich and dynamic WordPress
    plugins using WordPress'' coding standards all explained with clear, step-by-step
    code.'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以再次选择**WordPress 2.7完全手册**，作者是*April Hodge Silver*和*Hasin Hayder*。其中有一章介绍了插件，指导您创建非常有用的简单插件，以及一个更复杂的插件，可以写入
    WordPress 数据库。此外，您还可以查看*Vladimir Prelovac*的**WordPress插件开发入门指南**。不要被标题迷惑，Vladimir将通过清晰的、逐步的代码讲解，使您按照
    WordPress 的编码标准生成功能丰富、动态的 WordPress 插件。
- en: Working with plugins does require some experience with PHP. I'll keep this explanation
    fairly straightforward for non-PHP developers, and those of you with PHP experience
    should be able to see how to expand on this example to your advantage in WordPress.
    On the whole, if you've been following the jQuery and WordPress PHP examples in
    this book so far, you should be fine.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 使用插件需要一些 PHP 经验。对于非 PHP 开发人员，我将保持这个解释相当简单，而有 PHP 经验的人应该能够看到如何在 WordPress 中扩展此示例以便于您。总的来说，如果您迄今为止一直在本书中跟随
    jQuery 和 WordPress PHP 示例，那么您应该没问题。
- en: Just as with themes, WordPress plugins require a little structure to get started
    with them. There's no defined hierarchy for plugin files, but you do need, at
    the very least, a PHP file with a special comment up top so that WordPress can
    display it within the Plugin Management page. While there are some single-file
    plugins out there, such as the Hello Dolly plugin, which comes with your WordPress
    installation, you never know when you first start developing, the ways in which
    a plugin may grow. To be safe, I like to organize my plugins into a uniquely named
    folder. Again, like with themes, WordPress relies on the plugin directory's namespace,
    so uniqueness is of key importance!
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 与主题一样，WordPress插件需要一点结构才能开始使用它们。插件文件没有明确定义的层次结构，但你至少需要一个带有特殊注释的PHP文件，以便WordPress可以在插件管理页面中显示它。虽然有一些单文件插件存在，比如你的WordPress安装中自带的Hello
    Dolly插件，但是当你开始开发时，你永远不知道一个插件可能会如何增长。为了安全起见，我喜欢将我的插件组织成一个唯一命名的文件夹。再次强调，与主题一样，WordPress依赖于插件目录的命名空间，因此唯一性非常重要！
- en: In the `wp-content/plugins` directory you can place a unique folder and inside
    that, create a `.php` file, and at the beginning of the file, inside the `<?php
    ?>` tags, include the following header information. Only the bold information
    is absolutely required. The rest of the information is optional and populates
    the **Manage Plugins** page in the Administration panel.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在`wp-content/plugins`目录中，你可以放置一个独特的文件夹，在其中创建一个`.php`文件，并在文件的开头，在`<?php ?>`标签内包含以下头信息。只有粗体信息是绝对必需的。其余信息是可选的，并填充了管理插件页面中的**管理插件**。
- en: '[PRE11]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Tip
  id: totrans-163
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Make sure that you don't have any **spaces** *before* your `<?php` tag or after
    your `?>` tag. If you do, WordPress will display some errors because the system
    will get some errors about page headers already being sent.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你的`<?php`标签前后没有任何**空格**。如果有的话，WordPress会显示一些错误，因为系统会出现关于页面标题已经被发送的错误。
- en: 'Once you have your `.php` file set up in its own directory, inside your plugin
    directory, you can add a basic PHP function. You can then decide how you want
    to evoke that function, using an **action hook** or a **filter hook**. For example:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你在插件目录中设置好了自己的`.php`文件，你就可以在其中添加一个基本的PHP函数。然后，你可以决定如何调用该函数，使用一个**动作挂钩**或一个**过滤器挂钩**。例如：
- en: '[PRE12]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Remember that in the theme section earlier, I covered plugin hooks and how it's
    important to have them in your theme? This is why. If you didn't have `wp_head`
    or `wp_footer` in your theme, many plugins can't function, and you limit yourself
    to the plugins you can write. In my plugins, I mostly use `wp_header` and the
    `init` action hooks.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 记得在前面的主题部分，我讲解了插件挂钩以及它们在主题中的重要性吗？这就是原因所在。如果你的主题中没有`wp_head`或`wp_footer`，许多插件就无法正常运行，而且你只能使用你自己编写的插件。在我的插件中，我主要使用`wp_header`和`init`动作挂钩。
- en: Luckily, most filter hooks will work in your plugins as WordPress will run through
    them in The Loop. For the most part, you'll get the most work done in your plugin
    using `the_title` and `the_content` filter hooks. Each of these filter's hooks
    will execute your function when WordPress loops through those template tags in
    the loop.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，大多数过滤器挂钩在你的插件中也会起作用，因为WordPress会在循环中运行它们。在很大程度上，你将在插件中使用`the_title`和`the_content`过滤器挂钩完成大部分工作。当WordPress在循环中循环这些模板标签时，每个过滤器挂钩都会执行你的函数。
- en: Tip
  id: totrans-169
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Want to know what filter and action hooks are available?**'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '**想知道有哪些可用的过滤器和动作挂钩吗？**'
- en: The list is exhaustive. In fact, it's so immense that the WordPress codex doesn't
    seem to have them all documented! For the most complete listing available of all
    action and filter hooks, including newer hooks available in version 2.9.x, you'll
    want to check out Adam Brown's **WordPress Hooks Database:** [http://adambrown.info/p/wp_hooks](http://adambrown.info/p/wp_hooks)
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 列表是详尽的。事实上，它是如此之庞大，以至于WordPress codex似乎没有将它们全部记录下来！如果你想要查看所有动作和过滤器挂钩的最完整列表，包括2.9.x版本中可用的新挂钩，你应该查看亚当·布朗的**WordPress挂钩数据库：**
    [http://adambrown.info/p/wp_hooks](http://adambrown.info/p/wp_hooks)
- en: 'Overwhelmed by the database? Of course, checking out Vladimir''s **WordPress
    Plugin Development: Beginner''s Guide** will get you started with an arsenal of
    action and filter hooks as well.'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 对数据库感到不知所措？当然，查看弗拉基米尔的**WordPress插件开发：初学者指南**将帮助你入门，并提供一系列动作和过滤器挂钩。
- en: You now understand the basics of a WordPress plugin! Let's do something with
    it.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在理解了WordPress插件的基础知识！让我们开始做点什么吧。
- en: 'Project: Writing a WordPress plugin to display author bios'
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目：编写一个WordPress插件以显示作者简介
- en: As we've discussed, plugins can help expand WordPress and give it new functionality.
    However, we've seen that adding jQuery scripts directly to the theme and editing
    its template pages here and there will do the trick in most cases. But let's imagine
    a more complicated scenario using our modified default theme and the hypothetical
    client mentioned in the previous project in this chapter.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所讨论的，插件可以帮助扩展 WordPress 并赋予其新功能。然而，我们已经看到，在大多数情况下，直接向主题添加 jQuery 脚本并在各处编辑其模板页面即可完成任务。但让我们想象一个更复杂的情况，使用我们修改过的默认主题和本章前一个项目中提到的假想客户。
- en: While we tweaked the default theme, I figured that this client might want to
    have her site's focus be more journalism oriented, and thus, she'd want some attention
    drawn to the author of each post upfront. I was right, she does. However, there's
    a catch. She doesn't just want their WordPress nickname displayed; she'd prefer
    their full first and last name be displayed as well, as it's more professional.
    She'd also like their quick biography displayed with a link to their own URL and
    yet, not have that information "get in the way" of the article itself, or lost
    down at the bottom of the post. And here's the really fun part; she wants this
    change affected not just on this site, but across her network of genre-specific
    news sites, over 20 of them at last count (dang, I forgot she had so many sites!
    Good thing she's hypothetical).
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们调整默认主题时，我想到这个客户可能希望她网站的重点更加倾向于新闻报道，因此，她希望每篇文章的作者引起一些关注。我是对的，她是这样希望的。然而，有一个问题。她不只是想要显示他们的
    WordPress 昵称；她更希望显示他们完整的名字，因为这更加专业。她还想显示他们简要的自传，并附带一个指向他们自己网址的链接，但又不想让这些信息“妨碍”文章本身，也不想让它们丢失在文章底部。这里真正有趣的是；她希望这种变化不仅影响到这个站点，还要覆盖她的一系列特定类型新闻站点的网络，至少有
    20 个（天啊，我忘记了她有这么多站点！幸好她只是假设的）。
- en: 'For this specific WordPress site, it''s easy enough to go in and comment out
    the custom function we dealt with earlier: add in `the_author` tag and display
    it twice, passing each tag some parameters to display the first and last name.
    I can also add a tag to display the author''s biography snippet from the user
    panel and URL (if they''ve filled out that information). Also, it''s certainly
    easy enough to add a little jQuery script to make that bio `div` show up on a
    rollover of the author''s name. However, having to take all that work and then
    re-copy it into 20 different sites, many of which are not using the default theme,
    and most of which have not had jQuery included into their theme, does sound like
    an unnecessary amount of work (to boot, the client has mentioned that she''s deciding
    on some new themes for some of the sites, but she doesn''t know which sites will
    get what new themes yet).'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个特定的 WordPress 站点，很容易进入并注释掉我们之前处理过的自定义函数：添加 `the_author` 标签并显示两次，为每个标签传递一些参数以显示名字的第一个和最后一个字。我还可以添加一个标签来显示用户面板中的作者简介片段和
    URL（如果他们填写了该信息）。此外，很容易添加一小段 jQuery 脚本，使得该简介 `div` 在鼠标悬停在作者姓名上时显示出来。然而，将所有这些工作复制并重新复制到其他
    20 个不同的站点中，其中许多站点不使用默认主题，大多数站点也没有将 jQuery 包含到他们的主题中，听起来确实是一项不必要的工作（此外，客户提到她正在考虑一些新主题用于一些站点，但她还不知道哪些站点将获得哪些新主题）。
- en: It is an unnecessary amount of work. Instead of amending this theme and then
    poking through, pasting, testing, and tweaking in 20 other themes, we'll spend
    that time creating a WordPress plugin. It will then be easy to deploy it across
    all the client's sites, and it shouldn't matter what theme each site is using.
    Let's get started!
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一项不必要的工作量。与其修改这个主题，然后在其他 20 个主题中来回测试、粘贴、测试和调整，不如花费这些时间创建一个 WordPress 插件。然后，将其轻松部署到客户的所有站点上，而且每个站点使用的主题都不重要。让我们开始吧！
- en: Coding the plugin
  id: totrans-179
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编写插件
- en: First up, looking through the client's network of sites, not many display the
    author's nickname or name. Only a handful do and of those, the name is listed
    unobtrusively. It will be much easier to have a plugin display the author's name
    and then comment out or remove `the_author` tag from a few themes.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，浏览客户的站点网络，不多的站点显示作者的昵称或姓名。只有少数几个这样做，而其中的姓名是不引人注意的。有一个插件显示作者的姓名会更容易，然后注释掉或删除一些主题中的
    `the_author` 标签。
- en: 'Here''s a quick detail to note: template tags don''t do so well in plugins.
    This is because the template tag, which is a function, is set to display text,
    which, within another function, we don''t really want. What we want to do is get
    the information and pass it to our hook, which will display it when the plugin
    function runs. Most template tags have comparable WordPress functions, which will
    only get the information and not write or display it immediately. For writing
    plugins, instead of looking through the WordPress Codex''s **Template Tag** function
    list, I like to look through the **Function Reference**. Just about anything that
    starts with `get_` will work great in a plugin. For more details, have a look
    at [http://codex.wordpress.org/Function_Reference](http://codex.wordpress.org/Function_Reference).'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个需要注意的小细节：模板标签在插件中表现得不太好。这是因为模板标签，即一个函数，被设置为显示文本，而在另一个函数内，我们实际上不需要这样。我们想要做的是获取信息并将其传递给我们的钩子，当插件函数运行时显示它。大多数模板标签都有可比的WordPress函数，它们只会获取信息而不会立即写入或显示它。对于编写插件，我喜欢查看**函数参考**，而不是查看WordPress
    Codex的**模板标签**函数列表。几乎以`get_`开头的任何内容都适用于插件。有关更多详细信息，请参阅[http://codex.wordpress.org/Function_Reference](http://codex.wordpress.org/Function_Reference)。
- en: The Codex Function Reference has `get_the_author()` which would suit some of
    my needs for this project, but I prefer to use a newer function that came about
    in WordPress version 2.8, called `get_the_author_meta()`. Unlike `get_the_author`,
    you can pass this function over 25 parameters to find out just about anything
    you care to on a WordPress user.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: Codex函数参考有一个`get_the_author()`，它将满足我在这个项目中的一些需求，但我更喜欢使用在WordPress版本2.8中出现的一个新函数，称为`get_the_author_meta()`。与`get_the_author`不同，您可以向此函数传递超过25个参数，以了解您在WordPress用户上关心的几乎任何内容。
- en: 'Given next is my plugin''s base `addAuthor` function, followed by my `add_filter`
    hook which will run my function on every post''s content. You can read the comments
    in bold for more detail:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来给出的是我的插件基本的`addAuthor`函数，然后是我的`add_filter`钩子，它将在每个帖子的内容上运行我的函数。您可以阅读加粗的注释以获取更多详细信息：
- en: '[PRE13]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: You'll note that in the previous code snippet I took some extra care to check
    if the WordPress user has a URL filled out in their profile, and if they've added
    in their first and last name as well as a bio description. If they don't, my plugin
    will merely display the user's nickname (the nickname is a required field) which
    is usually the same as the user's login name.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到在上一个代码片段中，我特别注意检查WordPress用户的个人资料中是否填写了URL，并且他们是否已添加了他们的名字和姓氏以及简介描述。如果没有，我的插件将仅显示用户的昵称（昵称是必填字段），通常与用户的登录名相同。
- en: If any author doesn't have their first and last name, or a biography filled
    out, I'll leave it up to our client to force them to update their profile. In
    the meantime, the plugin won't display anything blank, empty, or broken, so no
    harm done.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 如果任何作者没有填写他们的名字和姓氏，或者没有填写简介，我会让我们的客户强制他们更新他们的个人资料。与此同时，插件不会显示任何空白、空的或损坏的内容，因此不会造成任何损害。
- en: Right now I'm just focused on getting the author's name and bio into WordPress,
    and now that the name and bio should be getting generated, I just want to make
    sure that the biography is styled nicely so that it stands apart from the post
    content but doesn't draw too much attention to itself.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我只关注将作者的姓名和简介放入WordPress中，现在姓名和简介应该已经生成了，我只是想确保简介的样式漂亮，以便与帖子内容区分开来，但又不会太过显眼。
- en: 'To accomplish this, I''ll add a stylesheet called `authover.css` to my plugin
    directory and add the following style to it:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我将在我的插件目录中添加一个名为`authover.css`的样式表，并添加以下样式：
- en: '[PRE14]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Now, the reason why I placed the CSS inside its own stylesheet instead of scripted
    as a string into the plugin as another function was mostly to illustrate the best
    practice of using the `wp_register_style` and `wp_enqueue_style` functions from
    the Script API. Just as using the `wp_enqueue_scripts` function helps us avoid
    conflict with other JavaScript and jQuery libraries, these functions register
    the new stylesheet and load it up, ensuring that there won't be any conflicts
    with other same-named stylesheets.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我将CSS放在自己的样式表中，而不是作为另一个功能脚本化到插件中的字符串，主要是为了演示使用Script API中的`wp_register_style`和`wp_enqueue_style`函数的最佳实践。正如使用`wp_enqueue_scripts`函数帮助我们避免与其他JavaScript和jQuery库冲突一样，这些函数注册新样式表并加载它，确保不会与其他同名样式表冲突。
- en: For a stylesheet I'm pretty sure it will be unique to my plugin, and even more,
    just for a single rule, this may be overkill, but you should be aware of this
    method, especially since you'll probably run into it looking through more robust
    popular plugins. Also, this makes the plugin more easily extendable in the future.
    You won't need to futz through your PHP string to edit or amend the CSS. In fact,
    if you were to write a plugin that had a lengthy enough stylesheet, you could
    hand the stylesheet over to a CSS designer while you focused on the PHP functionality.
    Not to mention, this makes your plugin useful to other users. A WordPress user
    with no PHP experience could download and install this plugin and easily edit
    its CSS stylesheet so that it looks good with their site's design.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 对于样式表，我很确定它将是我插件的独特之处，甚至更甚的是，仅仅针对一个单一规则来说，这可能有些小题大作，但你应该了解这种方法，特别是当你查阅更健壮的常用插件时，你可能会遇到它。而且，这会使插件在未来更容易扩展。你不需要在PHP字符串中编辑或修改CSS。事实上，如果你要编写一个样式表足够长的插件，你可以把样式表交给一个CSS设计师，而你专注于PHP功能。更不用说，这样可以使你的插件对其他用户更有用。一个没有PHP经验的WordPress用户可以下载并安装这个插件，并轻松编辑其CSS样式表，使其在其网站设计中看起来很好。
- en: Here's my `addCSS` function. Also, afterward instead of activating the stylesheet
    off a filter hook, I want the stylesheet to register and load as soon as WordPress
    loads up, even before the `wp_head` hook! Hence, you'll see that I've used the
    `init` action hook.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是我的`addCSS`函数。此外，不同于通过过滤挂钩激活样式表，我希望样式表可以在WordPress加载之前注册并加载，甚至在`wp_head`挂钩之前！因此，你会看到我使用了`init`动作挂钩。
- en: You'll note in addition to my comments in bold, the use of the `WP_PLUGIN_URL`
    variable. This is similar to the `TEMPLATEPATH` variable I showed you in the theme
    section to create a custom include, except of course, this works inside plugins
    to help WordPress dynamically find your plugin files without you hard coding them
    in.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 除了我加粗的评论之外，你还会注意到`WP_PLUGIN_URL`变量的使用。这类似于我在主题部分向你展示的`TEMPLATEPATH`变量，用于创建一个自定义包含，不同的是，这个变量在插件中使用，帮助WordPress动态地找到你的插件文件，而不是硬编码它们。
- en: 'Please read the bold comments in the next code block to understand what each
    code statement does:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 请阅读下一个代码块中加粗的评论，了解每个代码语句的作用：
- en: '[PRE15]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: OK! That should do it. We now need to activate our plugin and check it out in
    WordPress.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 好了！应该没问题了。现在我们需要激活我们的插件并在WordPress中检查一下。
- en: Activating our plugin in WordPress
  id: totrans-197
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在WordPress中激活我们的插件
- en: Our plugin is already in the WordPress `wp-content/plugins` directory. That
    means all we have to do is navigate over to our **Manage Plugins** page and activate
    it.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的插件已经在WordPress的`wp-content/plugins`目录中。这意味着我们只需要导航到我们的**管理插件**页面并激活它即可。
- en: 'The plugin called **jQuery Add Author Biography** in the `Plugin Name:` space
    in the code''s comment header appears in the plugins table as shown in the next
    screenshot:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 代码注释头中的`Plugin Name：`空间中名为**jQuery Add Author Biography**的插件显示在插件表中，如下截图所示：
- en: '![Activating our plugin in WordPress](img/1742_03_13.jpg)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![在WordPress中激活我们的插件](img/1742_03_13.jpg)'
- en: 'Once the plugin is activated, we can navigate to the site to see it in action:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦插件被激活，我们可以导航到网站上查看它的运行情况：
- en: '![Activating our plugin in WordPress](img/1742_03_14.jpg)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![在WordPress中激活我们的插件](img/1742_03_14.jpg)'
- en: It's working! The theme, which does not have `the_author_meta` tags in it, is
    now displaying the author's full name and bio description underneath it. The biography
    description is styled using the CSS rule in our plugin's class.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 它正在工作！主题中不包含`the_author_meta`标签，现在显示作者的全名和简介描述。简介描述使用了我们插件类中的CSS规则来进行样式设置。
- en: You've now edited a theme by hand and further extended the site by creating
    a WordPress plugin from scratch. Great job! But what's that you say? You were
    expecting to do a little more jQuery? You're right. Let's enhance this site a
    little further by creating a jQuery plugin.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在已经手动编辑了一个主题，并进一步通过从头开始创建一个WordPress插件来扩展了这个网站。干得好！但是你说什么？你希望再做一点jQuery？你是对的。让我们通过创建一个jQuery插件来进一步增强这个网站。
- en: The basics of a jQuery plugin
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: jQuery插件的基础
- en: We'll discover that compared to WordPress themes and plugins, jQuery plugins
    are actually not that complex.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 我们会发现，与WordPress主题和插件相比，jQuery插件实际上并不那么复杂。
- en: To set up a jQuery plugin, you need to follow jQuery's **plugin construct**.
    The basic construct consists of setting up a jQuery function for your plugin as
    follows. Note the bold `.fn` added to the jQuery object. This is what makes your
    function a jQuery function.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置一个jQuery插件，你需要遵循jQuery的**插件结构**。基本结构包括如下设置jQuery函数来定义你的插件。请注意加粗的`.fn`添加到jQuery对象中。这是使你的函数成为jQuery函数的关键。
- en: '[PRE16]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Within that, it's best practice to then add a return `this.each(function(){...})`;
    so that your function will run through each item in the jQuery selector.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在其中，最好的做法是添加一个`this.each(function(){...})`来确保你的函数会运行每个jQuery选择器中的每个项目。
- en: '[PRE17]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Unlike WordPress, which requires specifically formatted comments in theme CSS
    stylesheets and in plugin headers, jQuery does not require a commented-out header,
    but it's nice to add one up top.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 与WordPress不同，WordPress在主题CSS样式表和插件头部需要特定格式的注释，而jQuery不需要注释头部，但在顶部添加一个是很好的习惯。
- en: '[PRE18]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Note that each function and method you wrap your plugin in and use inside your
    plugin *must* end in a ";" semicolon. Your code may otherwise break, and if you
    ever compress it, it will definitely break.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，你在插件中包装和使用的每个函数和方法都必须以一个";"分号结尾。否则你的代码可能会出错，如果你压缩它，它肯定会出错。
- en: That's it, all that's required of a jQuery plugin. Now, let's dive in to enhancing
    the output of our WordPress plugin with a jQuery plugin.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是，一个jQuery插件所需要的全部。现在，让我们深入了解如何使用jQuery插件来增强我们的WordPress插件的输出。
- en: 'Project: jQuery fade in a child div plugin'
  id: totrans-215
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目：jQuery淡入子div插件
- en: Taking the required jQuery function discussed previously, I'm going to write
    up a basic function, which can be passed not only to the main jQuery wrapper selection,
    but an additional selector parameter so that it's easy to target the child `div`
    of a selection, or the specific parameter of the jQuery selection that's passed
    the parameter.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 采用前面讨论过的所需的jQuery函数，我将编写一个基本函数，它不仅可以传递给主要的jQuery包装选择器，还可以传递一个额外的选择器参数，以便轻松地定位所选择的`div`的子元素，或者传递参数的jQuery选择器的特定参数。
- en: 'Again, note the bold comments in my `authorHover` function to follow along:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 再次注意，跟着我的`authorHover`函数里的粗体注释一起看：
- en: '[PRE19]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'That''s all it takes. Now that we''ve created a jQuery plugin script, let''s
    quickly test it out in our theme first. All we have to do is embed our new jQuery
    plugin named `jquery.authover.js` to our theme, *under* the `wp_enque_script`
    call, *below* the `wp_head` hook and evoke it with a simple script:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。现在我们已经创建了一个jQuery插件脚本，让我们首先在我们的主题中快速测试一下。我们所需要做的就是将我们的新jQuery插件命名为`jquery.authover.js`嵌入到我们的主题中，在`wp_enque_script`调用下面，在`wp_head`
    hook下方调用它：
- en: '[PRE20]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We can take a look at the results in our site. I''ve grabbed two screenshots
    so that you can see the fade-in effect. In the following screenshot you can see
    the new `div` start to fade in:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在我们的网站上查看结果。我截取了两张截图，这样你就可以看到淡入效果。在下面的截图中，你可以看到新的`div`开始淡入：
- en: '![Project: jQuery fade in a child div plugin](img/1742_03_15.jpg)'
  id: totrans-222
  prefs: []
  type: TYPE_IMG
  zh: '![项目：jQuery淡入子div插件](img/1742_03_15.jpg)'
- en: 'In this next screenshot you can see the completed fade animation:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的截图中，你可以看到完成的淡入动画：
- en: '![Project: jQuery fade in a child div plugin](img/1742_03_16.jpg)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
  zh: '![项目：jQuery淡入子div插件](img/1742_03_16.jpg)'
- en: 'Extra credit: Adding your new jQuery plugin to your WordPress plugin'
  id: totrans-225
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 额外加分：将你的新jQuery插件添加到你的WordPress插件中
- en: Now you're free to go and install your WordPress plugin and include jQuery plugin
    on as many sites as needed! However, in case you're wondering, yes, we can refine
    the installation process a bit more and just incorporate this jQuery plugin inside
    our WordPress plugin.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以自由地安装你的WordPress插件，并在需要时在尽可能多的网站上包含jQuery插件！但是，如果你想知道的话，是的，我们可以进一步完善安装过程，只需将此jQuery插件合并到我们的WordPress插件中即可。
- en: The first step is to simply drop our `jquery.authover.js` script inside our
    plugin directory and then use the `wp_enqueue_script` to evoke it. You'll want
    to pay particular attention to this use of the `wp_enqueue_script` function, as
    it will also include jQuery 1.4.2 IF its NOT already registered in the theme or
    plugin! This means that client's sites, which don't already have jQuery included,
    don't need to worry! Just installing this plugin will automatically include it!
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是简单地将我们的`jquery.authover.js`脚本放在我们的插件目录中，然后使用`wp_enqueue_script`来调用它。你需要特别注意`wp_enqueue_script`函数的使用，因为如果主题或插件中还没有注册jQuery
    1.4.2，它将会自动包含jQuery 1.4.2！这意味着客户的网站，如果还没有包含jQuery，也不用担心！只需安装此插件即可自动包含它！
- en: '[PRE21]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We''ll then add a function to our WordPress plugin which writes in the jQuery
    script that uses the `authorHover` function of the plugin. Normally, it would
    be better, and it is recommended to load up all scripts through the `wp_enque_script`
    function, but for very small scripts that are so customized, you''re sure will
    not ever conflict, and you know jQuery is already loading in properly (as we are
    with the plugin), if you want, you can just hardcode script tags like so:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将在 WordPress 插件中添加一个函数，该函数会写入使用插件的`authorHover`函数的 jQuery 脚本。通常情况下，最好并且推荐通过`wp_enque_script`函数加载所有脚本，但对于非常小的、定制化程度极高的脚本，你确信不会出现冲突，并且你知道
    jQuery 已经正确加载（就像我们使用插件一样），如果你愿意，你可以像这样硬编码脚本标签：
- en: '[PRE22]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Lastly, we add the action filters which will evoke those functions:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们添加激活这些功能的动作过滤器：
- en: '[PRE23]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Now, if you remove your jQuery plugin from your theme and make sure that your
    plugin is activated, you should see the exact same results as before! In the next
    screenshot, you'll notice that I've added a URL to my profile, and now the **Find
    Out More** feature set to degrade nicely if no URL was present, just automatically
    works. Wonderful.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你从主题中移除你的 jQuery 插件，并确保你的插件已被激活，你应该看到与之前完全相同的结果！在下一个截图中，你会注意到我已经添加了一个 URL
    到我的个人资料中，现在**了解更多**功能设置得非常好，如果没有 URL 存在，它会自动降级。太棒了。
- en: '![Extra credit: Adding your new jQuery plugin to your WordPress plugin](img/1742_03_17.jpg)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
  zh: '![额外加分：将新的 jQuery 插件添加到您的 WordPress 插件中](img/1742_03_17.jpg)'
- en: 'Putting it all together: Edit the theme or create a custom plugin?'
  id: totrans-235
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 综合起来：编辑主题还是创建自定义插件？
- en: We've learned in this chapter how easy it is to edit a theme, create a WordPress
    plugin, and a jQuery plugin. For the majority of your WordPress development work,
    adding jQuery enhancements right to the theme will do the trick. If you feel your
    jQuery scripts are a bit cumbersome and you're allowed to edit the theme (assuming
    of course, you don't break the layout or dramatically alter the look) you'll probably
    find that being able to wrap WordPress content in custom HTML tags with special
    `class` or `id` attributes is a huge help and time saver.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了编辑主题、创建 WordPress 插件和 jQuery 插件的简易方法。对于大部分 WordPress 开发工作，直接将 jQuery
    增强功能添加到主题中就可以了。如果你觉得你的 jQuery 脚本有点复杂，并且你被允许编辑主题（当然，假设你不会破坏布局或大幅改变外观），你可能会发现在 WordPress
    内容中包裹自定义 HTML 标签，带有特殊的`class`或`id`属性是一个巨大的帮助和时间节省。
- en: This chapter's project example's "hypothetical client request" also showed that
    if there's any chance that your work can or will be reused or deployed across
    multiple individual WordPress installations, you should consider encapsulating
    the work in either a jQuery plugin, a WordPress plugin, or as we discovered, both.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 本章项目示例中的“假设客户请求”还表明，如果你的工作有可能或将被重复使用或部署到多个单独的 WordPress 安装中，你应该考虑将工作封装在 jQuery
    插件、WordPress 插件中，或者我们发现的两者都要考虑。
- en: In addition to considering if your work will need to be reused or deployed,
    you may also want to consider the lifespan of the jQuery enhancement and that
    of the WordPress theme. It's easy to think that the jQuery enhancement is really
    more a part of the theme as it visually affects it, but is it really? I've found
    that more often than not, a large part of my WordPress and jQuery development
    seems to center around encapsulating jQuery development into a WordPress plugin,
    or making WordPress plugins more effective with jQuery.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 除了考虑你的工作是否需要被重复使用或部署之外，你可能还想考虑 jQuery 增强和 WordPress 主题的寿命。很容易认为 jQuery 增强实际上更多是主题的一部分，因为它在视觉上影响主题，但真的是这样吗？我发现，我更多的
    WordPress 和 jQuery 开发工作似乎集中在将 jQuery 开发封装到 WordPress 插件中，或者使 WordPress 插件更有效地使用
    jQuery。
- en: As there are only two ways to include jQuery into a WordPress site, through
    the theme, or a plugin, if you're at all comfortable with editing and creating
    plugins, you'll probably start to find that its the better way to go (sure, there
    are always exceptions). Enhancing WordPress plugins with jQuery and even encapsulating
    jQuery plugins in WordPress plugins will allow you to easily scale your theme
    design and any jQuery functionality/enhancements independently of each other.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 由于将 jQuery 包含到 WordPress 站点中只有两种方法，通过主题或插件，如果你对编辑和创建插件感到舒适，你可能会发现这是更好的方法（当然，总是有例外的）。使用
    jQuery 增强 WordPress 插件，甚至将 jQuery 插件封装在 WordPress 插件中，都将使您能够轻松地独立扩展主题设计和任何 jQuery
    功能/增强。
- en: This approach comes in very handy if you do like to redesign or update your
    theme a lot, or perhaps you have a client who's a little "theme swap happy". If
    you want to keep the cool jQuery enhanced forms, image and gallery lightboxing,
    and various other functionality, or even just "neat eye candy" that you've created
    for a site, without having to manually update a new theme constantly with all
    of that over and over again, creating a plugin is the way to go, be it for jQuery,
    WordPress, or both.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法非常方便，如果你喜欢经常重新设计或更新主题，或者你有一个有点“主题换来换去”的客户。如果你想保留酷炫的 jQuery 增强表单、图像和画廊灯箱以及各种其他功能，甚至只是你为网站创建的“整洁眼睛糖果”，而不必一次又一次地手动更新一个新主题，创建一个插件是一个不错的选择，不管是为了
    jQuery、WordPress 还是两者兼有。
- en: Ultimately, it's up to you and your comfort level, and what's best for the project,
    but I've found, with a few exceptions, which we will cover examples of in later
    chapters, that trying to keep most jQuery enhancements from being embedded in
    the WordPress theme has served me well.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，这取决于你和你的舒适度，以及对项目最有利的做法，但我发现，除了一些例外，我们将在后面的章节中提到的例子，尝试让大多数 jQuery 增强功能不要嵌入
    WordPress 主题中对我来说效果很好。
- en: Summary
  id: totrans-242
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'You should now understand the following:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你应该理解以下内容：
- en: What WordPress themes, WordPress plugins, and jQuery plugins are.
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WordPress 主题、WordPress 插件和 jQuery 插件是什么。
- en: How to edit a theme and create your own basic WordPress and jQuery plugins.
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何编辑主题并创建自己的基本 WordPress 和 jQuery 插件。
- en: Best practices for knowing when to edit and customize a theme, or make a WordPress
    plugin, a jQuery plugin, or all three!
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解何时编辑和自定义主题，或者制作 WordPress 插件、jQuery 插件或三者兼有的最佳实践！
- en: Armed with this information, we're going to move on to the next chapter where
    we'll take a look at using a jQuery plugin with a plug-n-play WordPress plugin.
    We will also discuss enhancing and expanding the capabilities of WordPress plugins
    with jQuery. Get ready to dazzle with lightbox modal windows and wow users with
    easy-to-use forms.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 掌握了这些信息，我们将继续进行下一章，在那里我们将看看如何使用一个 jQuery 插件与一个即插即用的 WordPress 插件。我们还将讨论如何通过
    jQuery 增强和扩展 WordPress 插件的功能。准备好用灯箱模态窗口迷住用户，并用易于使用的表单给用户带来惊喜。
