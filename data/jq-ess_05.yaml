- en: Chapter 5. Making Your Site Snazzy with jQuery
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 5 章 用 jQuery 使你的网站漂亮
- en: It is easy to underestimate the importance animation has for any modern, polished
    web application. At times, it can seem frivolous and nearly gratuitous to waste
    time adding animations since they don't seem to add anything to the application.
    But for users, animations make a huge difference. They help ease the transition
    from one application state to the next. They also help give the user a sense of
    location. When a user clicks on a button that causes the page to shift to the
    left and clicking another button causes the page to shift back to the right, the
    user derives a sense of location from the animation. In this chapter, we will
    learn how use jQuery animation and effects to make our site snazzy.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 动画对于任何现代、精致的 Web 应用程序的重要性很容易被低估。有时，添加动画似乎是一种轻率且几乎是不必要的浪费时间，因为它们似乎并没有为应用程序增添任何内容。但对于用户来说，动画有着巨大的影响。它们有助于平稳过渡从一个应用程序状态到下一个。它们还有助于给用户一种位置感。当用户点击一个按钮导致页面向左移动，点击另一个按钮导致页面向右移动时，用户从动画中得到了一种位置感。在本章中，我们将学习如何使用
    jQuery 动画和效果来使我们的网站漂亮起来。
- en: 'We will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖以下主题：
- en: The importance of animation
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动画的重要性
- en: Hiding and showing elements
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 隐藏和显示元素
- en: Sliding elements around
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 滑动元素
- en: Creating custom effects
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义效果
- en: Using effects correctly
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正确使用效果
- en: The importance of animations
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动画的重要性
- en: As developers, it is easy for us to forget how abstract our applications can
    be. The concept of a *home* is embedded in our developer brains, but there is
    nothing really homey about one page of our site compared to any another. But if
    all of the other pages appear to center on one page without even labeling it,
    that becomes the home page in the eyes of most users.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 作为开发人员，我们很容易忘记我们的应用程序有多抽象。一个 *home* 的概念被嵌入到我们的开发人员大脑中，但与任何其他页面相比，我们网站的一页并没有什么家的感觉。但如果所有其他页面都似乎集中在一个页面上而没有标记它，那么在大多数用户眼中，那个页面就成了主页。
- en: Animation effects help when transitioning from one application state to the
    next. Without animation, it is easy to miss when elements are added to or removed
    from the page. The trick is to be skilled in the use of animation. Animations
    should never feel like they are impeding the user from their goals.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 动画效果在过渡到下一个应用程序状态时非常有帮助。没有动画，很容易忽略页面中添加或删除元素的情况。诀窍在于熟练使用动画。动画永远不应该让用户感觉它们阻碍了他们的目标。
- en: Hiding and showing elements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 隐藏和显示元素
- en: 'Let''s take a look at animations in jQuery with two of the most useful ones:
    `hide` and `show`. jQuery provides us with the `.hide()` and `.show()` methods,
    which do exactly what their names suggest. Straight out of the box, these two
    methods don''t animate; they act as simple switches, immediately hiding or showing
    the attached set of elements. However, both of them have several ways it can be
    called. First, let''s take a look at the `.hide()` method, and then look at its
    companion, the `.show()` method.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用 jQuery 来看一下动画，其中最有用的两个是 `hide` 和 `show`。jQuery 为我们提供了 `.hide()` 和 `.show()`
    方法，它们正如它们的名字所暗示的那样。直接使用这两种方法，它们不会动画化；它们作为简单的开关，立即隐藏或显示附加的一组元素。然而，它们都有几种调用方式。首先，让我们看一下
    `.hide()` 方法，然后再看看它的伴侣，`.show()` 方法。
- en: 'In its most basic mode, the `.hide()` method is called with no parameters,
    as follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在其最基本的模式下，`.hide()` 方法被调用时不带任何参数，如下所示：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'When called like this, it immediately hides the specified set of elements.
    Internally, jQuery adds a style attribute to the elements with the property of
    "`display: none`". This means that the element is both invisible and gives up
    its space in the DOM. The `.hide()` method accepts optional parameters as well:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '在这种情况下调用时，它立即隐藏指定的一组元素。在内部，jQuery 向元素添加了一个样式属性，属性为 "`display: none`"。这意味着元素既不可见，也在
    DOM 中放弃了它的空间。`.hide()` 方法还接受可选参数：'
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The first parameter is duration. It can be either a string or an integer. If
    it is an integer, it is the number of milliseconds the complete animation should
    take. If it is a string, it must be one of the two supplied convenience names
    for duration, either `fast` or `slow`. Fast is equivalent to 200 milliseconds
    and slow is equivalent to 600 milliseconds.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数是持续时间。它可以是字符串或整数。如果是整数，则是完成动画所需的毫秒数。如果是字符串，则必须是持续时间的两个提供的便利名称之一，即 `fast`
    或 `slow`。Fast 相当于 200 毫秒，slow 相当于 600 毫秒。
- en: 'In its basic mode, the `.show()` method is also called with no parameters,
    as follows:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在其基本模式下，`.show()` 方法也是不带任何参数被调用的，如下所示：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'When called like this, it will immediately show the specified set of elements.
    jQuery will remove the style attribute with the property of "`display: none;`".
    The `.show()` method accepts parameters identical to those of the `.hide()` method.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '当以这种方式调用时，它将立即显示指定的元素。jQuery将删除具有属性"`display: none;`"的样式属性。`.show()`方法接受与`.hide()`方法相同的参数。'
- en: 'Let''s take a more practical look at using these methods:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更实际地看看如何使用这些方法：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In our example app, we have four thumbnail images supplied by the super useful
    site, lorem pixel ([http://lorempixel.com](http://lorempixel.com)). Lorem pixel
    supplies web designers with placeholder images, which are used while building
    your site. These images should not be used in production.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例应用中，有四个缩略图图像，由非常有用的网站提供，即lorem pixel ([http://lorempixel.com](http://lorempixel.com))。Lorem
    pixel为网页设计师提供占位图像，用于构建网站时使用。这些图像不应该用于生产。
- en: The placeholder URL consists of the host site, followed by the width and height
    of the desired image in pixels. The category of the image is next; in our case,
    it is `nature`, and the final number identifies a specific picture. There is detailed
    information on the lorem pixel site on how to create your own URL for placeholder
    images.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 占位符URL由主机站点组成，后面跟着所需图像的宽度和高度（以像素为单位）。接下来是图像的类别；在我们的案例中，它是`nature`，最后的数字标识了特定的图片。lorem
    pixel网站上有关于如何为占位图像创建自己的URL的详细信息。
- en: Above the images is a set of buttons that trigger actions on the thumbnails.
    The buttons are cached in the `$hide` and `$show` variables. When the hide button
    is clicked on, we hide the images. When the show button is clicked on, we do the
    opposite and show the images. Take note of the way we cache the jQuery objects
    by storing them in JavaScript objects rather than looking them up again. Caching
    them results in speed improvement when they are used again. In this small app,
    it makes no difference, but it can result in a significant increase in speed in
    more complex apps. We will discuss this in more detail in [Chapter 7](part0054_split_000.html#1JFUC1-6309aac535bb4c1b83b0d7aa1f605023
    "Chapter 7. Talking to Your Server"), *Talking to Your Server*.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 图像上方是一组按钮，触发缩略图上的操作。按钮被缓存在`$hide`和`$show`变量中。当单击隐藏按钮时，我们隐藏图像。当单击显示按钮时，我们执行相反的操作并显示图像。请注意我们如何通过将它们存储在JavaScript对象中而不是重新查找它们来缓存jQuery对象的方式。缓存它们在再次使用时会提高速度。在这个小应用中，这没有任何区别，但在更复杂的应用中，这可能会导致速度显著提高。我们将在[第7章](part0054_split_000.html#1JFUC1-6309aac535bb4c1b83b0d7aa1f605023
    "Chapter 7. Talking to Your Server")中更详细地讨论这个问题，*与服务器交互*。
- en: Tip
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: In order to make it easier to know which variables hold jQuery objects, we have
    adopted the standard of beginning such variables with the dollar sign, `$`. Some
    developers don't like the use of mnemonic devices in variable names, but I find
    it helps a lot, especially when reading code written by other developers on my
    team.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更容易知道哪些变量保存了jQuery对象，我们采用了以美元符号`$`开头的标准。一些开发人员不喜欢在变量名中使用助记符，但我发现这对我很有帮助，尤其是在阅读我的团队其他开发人员编写的代码时。
- en: '`hide` and `show` are so closely related that jQuery has a special method that
    executes both. The `.toggle()` method will hide the elements when they are shown
    and show the elements when they are hidden. It is a more appropriate method for
    our use case, so let''s modify the code:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`hide`和`show`是如此密切相关，以至于jQuery有一个特殊的方法可以执行两者。`.toggle()`方法会在显示时隐藏元素，并在隐藏时显示元素。对于我们的用例来说，这是一个更合适的方法，所以让我们修改代码：'
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We've only had to change a few lines of our code. First, we needed a variable
    to hold the toggle button. Then, we added code to hook the click of the toggle
    button, and finally, we made a call to the `.toggle()` method. A nice thing about
    the toggle button is that we can just continuously click on it and it will keep
    on toggling the state of the pictures.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需要更改几行代码。首先，我们需要一个变量来保存切换按钮。然后，我们添加了钩子点击切换按钮的代码，最后，我们调用了`.toggle()`方法。切换按钮的好处是我们可以不断点击它，它将继续切换图片的状态。
- en: 'Hiding and showing the pictures is interesting, but not exactly thrilling.
    So, let''s add duration to the code. Here are the modifications to the app:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 隐藏和显示图片是有趣的，但并不是非常令人激动。因此，让我们在代码中添加持续时间。以下是应用程序的修改：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This time, we've made changes to only three lines. Each of the lines calls one
    of the effect methods. We're passing `slow` to the `.hide()` method, `fast` to
    the `.show()` method, and `1500` to the `.toggle()` method. Remember, when an
    integer is passed to an effect method, it is the time in milliseconds, so 1,500
    means 1.5 seconds.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，我们只对三行进行了更改。每行都调用一个效果方法。我们将`slow`传递给`.hide()`方法，`fast`传递给`.show()`方法，将`1500`传递给`.toggle()`方法。记住，当一个整数被传递给一个效果方法时，它表示的是以毫秒为单位的时间，因此1,500表示1.5秒。
- en: 'Adding some duration to the effects we have so far is more appealing than simply
    turning the elements on and off, but it might be nice to have the images fade
    in and out instead of shrinking and growing. Luckily, jQuery has us covered with
    some methods that do exactly that: fade out and fade in.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 对我们目前已有的效果添加一些持续时间比简单地打开和关闭元素更吸引人，但让图像淡入淡出而不是缩小和放大可能更好。幸运的是，jQuery 提供了一些恰好可以做到这一点的方法：淡出和淡入。
- en: .fadeOut()
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`.fadeOut()`'
- en: The `.fadeOut()` method gradually reduces the CSS opacity property down to 0
    so that the elements are no longer visible, and then it sets the display property
    to `none`. This method has parameters identical to `.hide()`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`.fadeOut()`方法逐渐将 CSS 不透明度属性减小到 0，使元素不再可见，然后将显示属性设置为`none`。该方法的参数与`.hide()`相同。'
- en: .fadeIn()
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`.fadeIn()`'
- en: The `.fadeIn()` method does the opposite of the `.fadeOut()` method. It first
    sets the display property to increase the opacity property to 1 so that the elements
    are fully opaque.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`.fadeIn()`方法与`.fadeOut()`方法相反。它首先将显示属性设置为增加不透明度属性为1，以便元素完全不透明。'
- en: .fadeToggle()
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`.fadeToggle()`'
- en: Just like the `.toggle()` method, the `.fadeToggle()` method will fade out elements
    if they are visible and fade in elements if they are not visible.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 与`.toggle()`方法类似，`.fadeToggle()`方法将会淡出元素（如果它们可见）并且淡入元素（如果它们不可见）。
- en: 'For a more practical example, let''s replace the `.hide()`, `.show()`, and
    `.toggle()` methods with `.fadeOut()`, `.fadeIn()`, and `.fadeToggle()`, respectively:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更实际的例子，让我们将`.hide()`、`.show()`和`.toggle()`方法分别替换为`.fadeOut()`、`.fadeIn()`和`.fadeToggle()`：
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In the preceding code, we''ve replaced the hide/show methods with their fade
    equivalents. The code still functions as it did earlier, only now, we have a new
    animation effect: fading.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们用它们的淡入淡出等效方法替换了隐藏/显示方法。代码仍然像之前一样运行，只是现在，我们有了一个新的动画效果：淡入淡出。
- en: 'So far, we''ve only used the duration parameter, but we know that there are
    two more: `easing` and `complete`. Let''s check out `complete` first because it
    is fairly easy to understand.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们只使用了持续时间参数，但我们知道还有两个：`easing`和`complete`。让我们先查看`complete`，因为它相当容易理解。
- en: 'The complete parameter is a function that is called once the animation is finished.
    It is not passed any parameters explicitly, but it is implicitly passed the `this`
    object pointing to the animated element. We can see this in action by making a
    small modification to our example program:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`complete`参数是一个在动画完成后调用的函数。它没有显式传递任何参数，但隐式传递了指向动画元素的`this`对象。通过对我们的示例程序进行一些小的修改，我们可以看到这一点：'
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'After the duration, we add an inline anonymous function, which is called once
    the animation is complete. The `this` object points to the animated element, so
    we display its `id` in an alert message box. The complete function is called once
    for every animated element, which may be surprising. In our current example, we
    are animating the contents of a `<div>` that holds the images. Consider that we
    change our code to the following:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在持续时间之后，我们添加了一个内联匿名函数，该函数在动画完成后调用。`this`对象指向动画元素，因此我们在警报消息框中显示它的`id`。完整函数对每个动画元素调用一次，这可能会让人感到惊讶。在我们当前的例子中，我们正在动画显示一些图片的`<div>`的内容。考虑到我们将我们的代码更改为以下内容：
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: By changing our code to point to the individual `<img>` tags instead of their
    parent `<div>` container, the complete function is now called once for each of
    the tags, and we will see the alerts walk through the `<img>` tags one by one.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将我们的代码更改为指向各个`<img>`标签而不是它们的父`<div>`容器，完整函数现在针对每个标签调用一次，我们将逐个查看`<img>`标签的警报信息。
- en: The easing parameter deals with how animating objects move. In the real world,
    objects rarely move at a constant speed. Think of a train leaving a station. It
    slowly builds up speed as it pulls away. It slowly accelerates until it reaches
    its desired speed, and then at some point, it will begin to slow down as it approaches
    the next station. If we were to graph the train's speed, it would be a curve,
    not a straight line. This acceleration and deceleration of objects seems natural
    to us since it is the way things move in nature, whether it is a train, a cheetah
    chasing a gazelle, or us as we get up from our desk to get a glass of water.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 缓动参数处理动画对象的移动方式。在现实世界中，物体很少以恒定的速度移动。想象一下火车离开车站的情景。它慢慢加速离开。它缓慢加速直到达到所需速度，然后在某个时刻，它将开始减速，因为它接近下一个车站。如果我们将火车的速度图表化，它将是一条曲线，而不是一条直线。物体的加速和减速对我们来说似乎很自然，因为这是自然界中物体移动的方式，无论是火车，还是猎豹追逐羚羊，还是我们从桌子上站起来拿杯水。
- en: 'Out of the box, jQuery comes with two easings: the default one named swing
    and a second one called linear. We have been using swing in all of the examples
    so far since it is the default. Let''s also take a look at linear and compare
    the two:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 开箱即用提供了两种缓动效果：默认的名为 swing 和第二个称为 linear。到目前为止，我们一直在使用 swing，因为它是默认的。让我们也看看
    linear，并比较两者：
- en: '[PRE9]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In the preceding code, we get rid of the toggle button and replace it with
    two new toggles: one using `"swing"` and the other using `"linear"`. We also create
    two event handlers to implement the appropriate fade in and fade out. While the
    difference between the two easings is subtle, it is there. It is more noticeable
    when objects are moving around. So, in the next section, we will introduce the
    slide animation and see how our two easings look with it.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在前述代码中，我们去掉了切换按钮，并用两个新的切换替换它：一个使用 `"swing"`，另一个使用 `"linear"`。我们还创建了两个事件处理程序来实现适当的淡入和淡出。虽然两种缓动之间的差异很细微，但确实存在。当物体在移动时更加明显。因此，在下一节中，我们将介绍滑动动画，并看看我们的两种缓动效果如何。
- en: Sliding elements around
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将元素滑动
- en: The next sets of methods is called just like the previous two sets. The slide
    methods are very similar to the show and hide methods, except that instead of
    shrinking and growing the set elements' width and height dimensions, only the
    height is changed.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 下一组方法的调用方式与前两组相同。滑动方法与显示和隐藏方法非常相似，不同之处在于，它只改变集合元素的高度维度，而不是宽度维度。
- en: .slideUp()
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .slideUp()
- en: 'The `.slideUp()` method shrinks the height of the set of elements down to zero,
    and then it sets the display property to `none`. The method takes the same three
    optional parameters that have been discussed already: `duration`, `easing`, and
    `complete`:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`.slideUp()` 方法将一组元素的高度减小到零，然后将显示属性设置为 `none`。该方法采用了与之前讨论过的相同的三个可选参数：`duration`、`easing`
    和 `complete`：'
- en: '[PRE10]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: .slideDown()
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .slideDown()
- en: 'The `.slideDown()` method grows the height of the set of elements to 100%.
    Its call looks like this:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`.slideDown()` 方法将一组元素的高度增加到 100%。它的调用如下：'
- en: '[PRE11]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: .slideToggle()
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .slideToggle()
- en: 'The final member of this set is the `.slideToggle()` method, which will alternate
    the set of elements between the shown and hidden states:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 此组的最后一个成员是 `.slideToggle()` 方法，它会在显示状态和隐藏状态之间交替切换一组元素：
- en: '[PRE12]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We''ve modified our code to use the slide methods instead of the fade methods.
    The easing methods are more noticeably different now. Here is the changed code:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经修改了代码，使用了滑动方法而不是淡入淡出方法。缓动方法现在更加明显不同。这是更改后的代码：
- en: '[PRE13]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Since the jQuery animation methods are all called similarly, we were able to
    simply replace the words `fadeOut`, `fadeIn`, and `fadeToggle` with their slide
    equivalents.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 jQuery 动画方法的调用方式都很相似，我们只需简单地将 `fadeOut`、`fadeIn` 和 `fadeToggle` 这些词替换为它们的滑动效果对应词即可。
- en: I think we have spent enough time studying the basic animation effects. The
    real fun and graphical wow is in the custom effects.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为我们已经花了足够的时间研究基本动画效果。真正有趣和引人注目的是自定义效果。
- en: Creating custom effects
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义效果
- en: jQuery doesn't include many effects; out of the box, there are just the hide
    and show, fade in and fade out, and slide methods. If these were all it could
    include, it would probably not have been worth including them in the library.
    Luckily, jQuery lets us create our own animations.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 并没有包含许多效果；开箱即用，只有隐藏和显示、淡入和淡出以及滑动方法。如果只有这些，可能不值得将它们包含在库中。幸运的是，jQuery 让我们可以创建自己的动画。
- en: .animate()
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .animate()
- en: 'Understanding the `.animate()` method is the key to understanding how to create
    custom effects. While the other methods are important, none of them do anything
    until you get the animate method working, which isn''t too hard luckily, especially
    if you keep in mind how the animate property actually works. It works by manipulating
    the value of CSS properties. Most—but not all—properties can be manipulated. Let''s
    take a quick look in order to better explain how the `.animate()` method works:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 理解 `.animate()` 方法是理解如何创建自定义效果的关键。虽然其他方法也很重要，但在让动画方法生效之前，它们都无济于事，而让动画方法生效其实并不太难，特别是如果你记住动画属性的工作原理的话。它通过操纵
    CSS 属性的值来实现。大多数——但不是全部——属性都可以操纵。让我们快速查看一下，以更好地解释 `.animate()` 方法的工作原理：
- en: '[PRE14]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We've made a few more modifications to our venerable example. We've changed
    the text of the buttons, added the two `.animate()` methods, and also had to add
    a style of position that's relative to `allPictures<div>`. The addition of the
    position relative is critical, and its absence can be the source of a great deal
    of animation frustration. jQuery's animate function doesn't change the rules of
    CSS. In order to move `<div>`, it must be moveable. Elements missing a position
    property default to being position static, which means that they are positioned
    with the layout of the page and can't be moved. So if you try to animate it, nothing
    will happen. Placing `<div>` in relative positioning means that it can be moved
    relative to its layout position.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对我们值得尊敬的示例进行了一些修改。我们改变了按钮的文本，添加了两个 `.animate()` 方法，并且还不得不添加一个相对于 `allPictures<div>`
    的定位样式。相对定位的添加非常重要，其缺失可能是动画困扰的根源。jQuery 的动画函数不会改变 CSS 规则。为了移动 `<div>`，它必须是可移动的。缺少位置属性的元素默认为位置
    static，这意味着它们与页面的布局一起定位，无法移动。所以如果你尝试对其进行动画，什么也不会发生。将 `<div>` 放置在相对定位中意味着它可以相对于其布局位置移动。
- en: 'The `.animate()` method takes the three parameters that we''ve already become
    familiar with—duration, easing, and complete—and adds a new one: properties, which
    include the one or more CSS properties we wish to animate. The value of the property
    can either be absolute or relative. If you simply put a value in the property,
    it is absolute. jQuery will animate to the value. If you attempt to run an absolute
    animation a second time, nothing will happen since the property will already hold
    the desired value. Relative values, on the other hand, are more directional. In
    the earlier example app, we use two different relative property values. The first
    one tells jQuery to animate `<div>` 200 pixels to the right. The second one, attached
    to the toggle linear button, tells jQuery to move `<div>` 200 pixels to the left.
    To use a relative value, just wrap the value in quotes and precede it with either
    `+=xx` or `-=xx`, where `xx` is the amount to change the property.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`.animate()` 方法接受我们已经熟悉的三个参数——持续时间、缓动和完成回调——并添加一个新参数：properties，其中包括我们希望动画的一个或多个
    CSS 属性。属性的值可以是绝对的或相对的。如果你只是在属性中放入一个值，那么它是绝对的。jQuery 将会动画到这个值。如果你尝试第二次运行绝对动画，什么也不会发生，因为属性已经包含了所需的值。另一方面，相对值更具方向性。在早期的示例应用程序中，我们使用了两个不同的相对属性值。第一个告诉
    jQuery 将 `<div>` 向右移动 200 像素。第二个，附加到切换线性按钮，告诉 jQuery 将 `<div>` 向左移动 200 像素。要使用相对值，只需将值放在引号中，并在前面加上
    `+=xx` 或 `-=xx`，其中 `xx` 是要更改属性的量。'
- en: 'You can modify more than one property at a time. When you add more properties,
    jQuery will animate each to its value:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以一次修改多个属性。当你添加更多属性时，jQuery 将逐个动画到其值：
- en: '[PRE15]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In the preceding example, we''ve added two more properties to each `.animate()`
    method: top and opacity, both of which are relative like the left property. An
    important thing to note about the animate method is that unlike the show/hide,
    fade, or slide methods, it never adds the `"display: none"` style to the element.
    Even when the opacity is 0, the element still occupies all of its space on the
    page.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '在前面的示例中，我们给每个 `.animate()` 方法添加了两个更多属性：top 和 opacity，都像 left 属性一样是相对的。关于动画方法的一个重要事项是，与
    show/hide、fade 或 slide 方法不同，它从不将 `"display: none"` 样式添加到元素。即使不透明度为 0，元素仍然占据页面上的所有空间。'
- en: .delay()
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .delay()
- en: 'Animations can run sequentially one after the other by chaining the animate
    methods together. You can also introduce a delay in the animation using the `.delay()`
    method. It takes two parameters: duration and queue name. `Duration` tells you
    how long in milliseconds you should pause the animation engine for, and `queueName`
    is the name of the queue to be delayed. We won''t use named queues in this book,
    so we won''t talk about the queue name:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 动画可以通过将动画方法链接在一起按顺序运行。您还可以使用`.delay()`方法为动画引入延迟。它接受两个参数：持续时间和队列名称。`持续时间`告诉您应该暂停动画引擎多长时间（以毫秒为单位），而`queueName`是要延迟的队列的名称。在本书中，我们不会使用命名队列，因此我们不会讨论队列名称：
- en: '[PRE16]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In this example, we chain together two separate animations with a 1 second delay
    between them. Note that if you rapidly press either button, pretty soon, `<div>`
    will disappear off the page and might not be visible again. This problem is caused
    by the fact that jQuery adds each new animation request to a queue. It is pretty
    easy to add items to the queue faster than jQuery can execute them. We will take
    a look at this problem in the next section.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，我们将两个单独的动画链接在一起，并在它们之间延迟1秒。请注意，如果您快速按下任一按钮，很快，`<div>`将从页面中消失，并且可能再也看不到。这个问题是由于jQuery将每个新的动画请求添加到队列中引起的。很容易比jQuery执行它们更快地将项目添加到队列中。我们将在下一节中解决这个问题。
- en: .queue(), .dequeue(), and .clearQueue()
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`.queue()`、`.dequeue()`和`.clearQueue()`'
- en: The queue methods give us access to the animation queue that jQuery uses to
    run the animations. jQuery allows us to have more than one queue, but there is
    seldom a need for more than one. The `.queue()` method can be used to both get
    and set either the standard animation queue or a custom one. We can use the queue
    method to see how many items are in the current queue, and we can pass a callback
    function to it that is called once the queue is empty.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 队列方法为我们提供了访问jQuery用于运行动画的动画队列。jQuery允许我们有多个队列，但很少需要多个队列。`.queue()`方法可用于获取和设置标准动画队列或自定义队列。我们可以使用队列方法查看当前队列中有多少项目，并且我们可以将回调函数传递给它，一旦队列为空，就会调用该函数。
- en: The `.dequeue()` method is handy when the queue has been stopped and a new item
    has been added to it. In order to get the queue going again, the `.dequeue()`
    method must be called. The `.clearQueue()` method removes all of the queued up
    items that haven't yet executed from the queue.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 当队列被停止并添加了新项目时，`.dequeue()`方法很方便。为了让队列再次运行，必须调用`.dequeue()`方法。`.clearQueue()`方法从队列中移除尚未执行的所有排队项目。
- en: .stop() and .finish()
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`.stop()`和`.finish()`'
- en: The `.stop()` method stops the current animation. If there are callbacks associated
    with an animation running, they are not called. The `.finish()` method is very
    similar to this, except that it does everything. It stops the running animation,
    clears the queues, and completes all the animations for the matched set.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`.stop()`方法停止当前动画。如果正在运行动画有关联的回调，则不会调用它们。`.finish()`方法与此非常相似，只是它做了所有事情。它停止正在运行的动画，清除队列，并完成匹配集的所有动画。'
- en: jQuery.fx.interval and jQuery.fx.off
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jQuery.fx.interval和jQuery.fx.off
- en: These are two global variables within jQuery. The `jQuery.fx.interval` method
    sets the animation rate. The lower the value, the faster and possibly smoother
    the animation. In general, you probably don't want to mess around with this value.
    It is the global animation timer. Changing it changes the timing for all the animations,
    not just yours. The `jQuery.fx.off` method kills all the animations when set to
    true.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是jQuery内部的两个全局变量。`jQuery.fx.interval`方法设置动画速率。值越低，动画运行得越快，可能更平滑。一般来说，您可能不想改变此值。这是全局动画计时器。更改它会更改所有动画的时间，而不仅仅是您的动画。当`jQuery.fx.off`方法设置为true时，它会停止所有动画。
- en: Using effects correctly
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 正确使用效果
- en: When jQuery encounters a new bit of animation that it needs to do, it places
    the new animation at the end of the animation queue. While this is mostly a great
    way to handle things, it is possible that it might overwhelm the queue by putting
    items into it faster than they can be pulled out. In general, you should take
    care when adding more items into the queue. You may want to clear the queue before
    adding more items to it.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 当jQuery遇到需要执行的新动画时，它将新动画放在动画队列的末尾。虽然这在大多数情况下是处理事情的好方法，但可能会通过更快地将项目放入队列中而超载队列。一般来说，当向队列中添加更多项目时，您应该小心。您可能希望在向队列添加更多项目之前清除队列。
- en: 'While the animation features of jQuery are very convenient, they are not exactly
    state of the art, and they are start showing their age. An example can be seen
    in the jQuery source code. The following code comes from the source code of jQuery
    version 2.1.1:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 jQuery 的动画特性非常方便，但它们并不完全是最先进的，它们开始显得有些过时了。jQuery 源代码中可以看到一个例子。以下代码来自 jQuery
    版本 2.1.1 的源代码：
- en: '[PRE17]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: When running an animation, jQuery uses the `setInterval()` method to time each
    animation frame; in fact, the `jQuery.fx.interval` global value is used as the
    timer value. While this was cool a few years ago, most modern browser use the
    `window.requestAnimationFrame()` method instead, and for browsers that lack it,
    there are polyfills available. The end of effect of using the `setInterval` method
    instead of `requestAnimationFramework` is that jQuery's animation will always
    seem a bit flicker even in the latest browser on the fastest hardware since there
    is no coordination between the rendering of a frame and the `setInterval` method,
    like there is with `requestAnimationFrame`.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行动画时，jQuery 使用 `setInterval()` 方法来定时每个动画帧；事实上，`jQuery.fx.interval` 全局值被用作计时器值。虽然几年前这很酷，但大多数现代浏览器使用
    `window.requestAnimationFrame()` 方法，对于缺乏该方法的浏览器，有可用的 polyfill。使用 `setInterval`
    方法而不是 `requestAnimationFramework` 的最终效果是，即使在最新的浏览器和最快的硬件上，jQuery 的动画看起来仍然有点闪烁，因为渲染帧和
    `setInterval` 方法之间没有协调，就像使用 `requestAnimationFrame` 一样。
- en: Summary
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We covered a lot of code this chapter. Animations may seem to be easy to code,
    but when done well, they can add a lot of content to an application and help make
    the user aware of the application state change. We first learned how to use jQuery's
    easy-to-use, built-in animation methods. Once we understood them, we moved on
    to the `.animate()` and `.delay()` methods, which allow us to create our own custom
    animation.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本章涵盖了大量代码。动画可能看起来很容易编写，但是当做得好时，它们可以为应用程序增加很多内容，并帮助用户了解应用程序状态的变化。我们首先学习了如何使用
    jQuery 的易于使用的内置动画方法。一旦我们理解了它们，我们就转向了 `.animate()` 和 `.delay()` 方法，这些方法允许我们创建自己的自定义动画。
- en: We closed the chapter with a bit of information about the way jQuery performs
    animations. While it is fine in the simple examples shown, it is actually a bit
    antiquated. If you wish to perform more complicated animations, you might want
    to look at more sophisticated libraries, such as `Velocity.js`, `GSAP`, or others.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们用一点关于 jQuery 执行动画的信息结束了本章。虽然在示例中显示的简单示例中是可以的，但实际上有点过时。如果您想执行更复杂的动画，您可能想看看更复杂的库，如
    `Velocity.js`、`GSAP` 或其他库。
- en: In the next chapter, we will look at submitting data via forms with jQuery.
    In particular, we will look at how to validate our forms before we send data to
    our server.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习使用 jQuery 提交表单数据。特别是，我们将学习如何在发送数据到服务器之前验证我们的表单。
