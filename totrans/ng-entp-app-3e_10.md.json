["```js\n$ npm i -D @web/test-runner \n```", "```js\n\"test\": {\n  \"builder\": \"@angular-devkit/build-angular:web-test-runner\"\n} \n```", "```js\n$ npx ng add @cypress/schematic \n```", "```js\n$ npx ng e2e \n```", "```js\n$ npx ng run local-weather-app:cypress-run\n$ npx ng run lemon-mart:cypress-run \n```", "```js\n**cypress/e2e/app.****cy****.****ts**\nimport '../support/commands'\ndescribe('LocalCast Weather', () => {\n  beforeEach(() => {\n    cy.visit('/')\n  })\n  it('has the correct title', () => {\n    cy.byTestId('title').should('have.text', 'LocalCast Weather')\n  })\n}) \n```", "```js\n**src/app/app.****component****.****ts**\n<span data-testid=\"title\">LocalCast Weather</span> \n```", "```js\n    **.circleci/config.yml**\n    version: 2.1\n    orbs:\n      browser-tools: circleci/browser-tools@1\n      cypress: cypress-io/cypress@3\n    commands:\n      install:\n        description: 'Install project dependencies'\n        steps:\n          - checkout\n          - restore_cache:\n              keys:\n                - node_modules-{{ checksum \"package-lock.json\" }}\n          - run: npm install\n          - save_cache:\n              key: node_modules-{{ checksum \"package-lock.json\" }}\n              paths:\n                - node_modules\n      lint:\n        description: 'Check for code style and linting errors'\n        steps:\n          - run: npm run style\n          - run: npm run lint\n      build_and_test:\n        description: 'Builds and tests Angular project'\n        steps:\n          - run: npx ng build --configuration production\n          - attach_workspace:\n              at: ~/\n          - browser-tools/install-chrome\n          - browser-tools/install-chromedriver\n          - run: npx ng test --watch=false --code-coverage\n      store:\n        description: 'Stores build_and_test artifacts'\n        steps:\n          - store_test_results:\n              path: ./test_results\n          - store_artifacts:\n              path: ./coverage\n    jobs:\n      run_build_and_test:\n        docker:\n          - image: cimg/node:lts-browsers\n        working_directory: ~/repo\n        steps:\n          - install\n          - cypress/install\n          - lint\n          - build_and_test\n          - run: npx ng run local-weather-app:cypress-run\n          - store\n    workflows:\n      build-and-test:\n        jobs:\n          - run_build_and_test \n    ```", "```js\n$ npm i -D vercel\n$ npx vercel login \n```", "```js\n    **package.json**\n    ...\n    \"prevercel:publish\": \"npm run build:prod\",\n    \"vercel:publish\": \n      \"vercel deploy --prod dist/local-weather-app --yes\" \n    ```", "```js\n    $ npm run vercel:publish \n    ...\n    Build at: 2023-11-07T03:51:23.229Z - Hash: d6b1388088df7136 - Time: 5403ms\n    ...\n    ![](img/B20960_10_001.png)  Production: https://local-weather-hhk9xi3wz-duluca.vercel.app [1s] to clipboard] [4s] \n    ```", "```js\n$ npx ng add @angular/fire\n![](img/B20960_10_002.png) ng deploy -- hosting \n```", "```js\n**angular.json**\n...\n\"deploy\": {\n  \"builder\": \"@angular/fire:deploy\",\n  \"options\": {\n    \"version\": 2,\n    \"browserTarget\": \"lemon-mart:build:firebase\"\n  }\n} \n```", "```js\n$ npx ng deploy\n...\nBuild at: 2023-11-07T04:27:36.842Z - Hash: ad999f95a270f4e6 - Time: 14141ms\n=== Deploying to 'lemon-mart-007'...\n...\n![](img/B20960_10_003.png)  Deploy complete!\nProject Console: https://console.firebase.google.com/project/lemon-mart-007/overview\nHosting URL: https://lemon-mart-007.web.app \n```", "```js\n**Dockerfile**\nFROM duluca/minimal-nginx-web-server:1-alpine\nCOPY /dist/local-weather-app /var/www\nCMD 'nginx' \n```", "```js\n**Dockerfile**\nFROM duluca/minimal-node-web-server:lts-alpine\nWORKDIR /usr/src/app\nCOPY dist/local-weather-app public\nENTRYPOINT [ \"npm\", \"start\" ]\nENV ENFORCE_HTTPS=xProto \n```", "```js\n$ npx mrm npm-docker \n```", "```js\n    **package.json**\n      ...\n      \"config\": {\n        \"imageRepo\": \"[namespace]/[repository]\",\n        \"imageName\": \"custom_app_name\",\n        \"imagePort\": \"0000\",\n        \"internalContainerPort\": \"3000\"\n      },\n      ... \n    ```", "```js\n        **package.json**\n        ...\n          \"scripts\": {\n            ...\n            \"predocker:build\": \"npm run build\",\n            \"docker:build\": \"cross-conf-env docker image build --platform linux/amd64,linux/arm64 . -t $npm_package_config_imageRepo:$npm_package_version\",\n            \"postdocker:build\": \"npm run docker:tag\",\n            ... \n        ```", "```js\n    \"predocker:build\": \"npm run build:prod && npm test -- --watch=false\" \n    ```", "```js\n        **package.json**\n            ...\n            \"docker:tag\": \" cross-conf-env docker image tag $npm_package_config_imageRepo:$npm_package_version $npm_package_config_imageRepo:latest\",\n            ... \n        ```", "```js\n        **package.json**\n            ...\n            \"docker:stop\": \"cross-conf-env docker stop $npm_package_config_imageName || true\",\n            ... \n        ```", "```js\n        **package.json**\n            ...\n            \"docker:run\": \"run-s -c docker:stop docker:runHelper\",\n            \"docker:runHelper\": \"cross-conf-env docker run -e NODE_ENV=local --rm --name $npm_package_config_imageName -d -p $npm_package_config_imagePort:$npm_package_config_internalContainerPort $npm_package_config_imageRepo\",\n            ... \n        ```", "```js\n        **package.json**\n            ...\n            \"predocker:publish\": \"echo Attention! Ensure `docker login` is correct.\",\n            \"docker:publish\": \"cross-conf-env docker image push $npm_package_config_imageRepo:$npm_package_version\",\n            \"postdocker:publish\": \"cross-conf-env docker image push $npm_package_config_imageRepo:latest\",\n            ... \n        ```", "```js\n        **package.json**\n            ...\n            \"docker:taillogs\": \"cross-conf-env docker logs -f $npm_package_config_imageName\",\n            ... \n        ```", "```js\n        **package.json**\n            ...\n            \"docker:open\": \"sleep 2 && cross-conf-env open-cli http://localhost:$npm_package_config_imagePort\",\n            ... \n        ```", "```js\n        **package.json**\n            ...\n            \"predocker:debug\": \"run-s docker:build docker:run\",\n            \"docker:debug\": \"run-s -cs docker:open:win docker:open:mac docker:taillogs\"\n          },\n        ... \n        ```", "```js\n    **package.json**\n        \"build\": \"ng build\",\n        \"build:prod\": \"ng build --prod\",\n        \"predocker:build\": \"npm run build:prod && npm test -- --watch=false\", \n    ```", "```js\n    export const environment = {   \n      production: true,\n      appId: '01ff1xxxxxxxxxxxxxxxxxxxxx',\n      username: 'localcast',\n      baseUrl: 'https://',\n      geonamesApi: 'secure',\n    } \n    ```", "```js\n    **Dockerfile**\n    FROM duluca/minimal-node-web-server:lts-alpine \n    WORKDIR /usr/src/app\n    COPY dist/local-weather-app public \n    ```", "```js\n    $ npm run docker:debug \n    ```", "```js\n        Current Environment: local.\n        Server listening on port 3000 inside the container\n        Attention: To access server, use http://localhost:EXTERNAL_PORT\n        EXTERNAL_PORT is specified with 'docker run -p EXTERNAL_PORT:3000'. See 'package.json->imagePort' for the default port.      \n        GET / 304 2.194 ms - -\n        GET /runtime-es2015.js 304 0.371 ms - -\n        GET /polyfills-es2015.js 304 0.359 ms - -\n        GET /styles-es2015.js 304 0.839 ms - -\n        GET /vendor-es2015.js 304 0.789 ms - -\n        GET /main-es2015.js 304 0.331 ms - - \n        ```", "```js\n    $ npm run docker:publish \n    ```", "```js\n        The push refers to a repository [docker.io/duluca/localcast- weather]\n        60f66aaaaa50: Pushed\n        ...\n        latest: digest: sha256:b680970d76769cf12cc48f37391d8a542fe226b66d9a6f8a7ac81ad77be4 f58b size: 2827 \n        ```", "```js\n    **.circleci/config.yml**\n    ...\n    jobs:\n      build_and_test:\n        ...       \n        - run:\n            name: Move compiled app to workspace\n            command: |\n              set -exu\n              mkdir -p /tmp/workspace/dist\n              mv dist/local-weather-app /tmp/workspace/dist/\n        - persist_to_workspace:\n            root: /tmp/workspace\n            paths:\n              - dist/local-weather-app\n      deploy:\n        docker:\n          - image: circleci/node:lts\n        working_directory: ~/repo\n        steps:\n          - attach_workspace:\n              at: /tmp/workspace\n          - run: npx vercel deploy --token $VERCEL_TOKEN --prod /tmp/\n                 workspace/dist/<< parameters.project >> --yes \n    ```", "```js\n    **.circleci/config.yml**\n    ...\n    workflows:\n      version: 2\n      build-test-and-deploy:\n        jobs:\n          - build_and_test\n          - deploy:\n             requires:\n               - build_and_test \n    ```", "```js\n**.circleci/config.yml**\nworkflows:\n  version: 2\n  build-and-deploy:\n    jobs:\n      - build\n      - hold:\n          type: approval\n          requires:\n            - build\n      - deploy:\n          requires:\n            - hold \n```", "```js\nbuild and test steps are broken out into two separate jobs:\n```", "```js\nworkflows:\n  version: 2\n    build-test-and-approval-deploy:\n      jobs:\n      - build \n      - test\n      - hold:\n         type: approval\n         requires:\n           - build\n           - test\n         filters:\n           branches:\n             only: main\n      - deploy:\n        requires:\n          - hold \n```", "```js\n$ npx ng test --watch=false --code-coverage \n```", "```js\n$ npx http-server -c-1 -o -p 9875 ./coverage \n```", "```js\n    **.circleci/config.yml**\n    version: 2.1\n    orbs:\n    **coveralls:****coveralls/coveralls@2** \n    ```", "```js\n    **.circleci/config.yml**\n    jobs:\n      build_and_test:\n        ...\n          - run: npm test -- --watch=false --code-coverage\n          - store_test_results:\n              path: ./test_results\n          **-****store_artifacts:**\n              **path:****./coverage**\n          **-****coveralls/upload**\n          - run:\n              name: Tar & Gzip compiled app\n              command: tar zcf dist.tar.gz dist/lemon-mart\n          - store_artifacts:\n              path: dist.tar.gz \n    ```"]