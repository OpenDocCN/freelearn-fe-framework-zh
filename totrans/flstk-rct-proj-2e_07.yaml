- en: Growing the Skeleton into a Social Media Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Social media is an integral part of the web these days, and many of the user-centric
    web applications we build end up requiring a social component down the line to
    drive user engagement.
  prefs: []
  type: TYPE_NORMAL
- en: For our first real-world MERN application, we will modify the MERN skeleton
    application we developed in [Chapter 3](a9dedbd8-baf6-4ec8-b766-0b370227fbe4.xhtml), *Building
    a Backend with MongoDB, Express, and Node*, and [Chapter 4](6f2ca10a-8079-4e3a-9d42-a3db8e85b9d9.xhtml), *Adding
    a React Frontend to Complete MERN*, to build a simple social media application
    in this chapter. While doing this, you will learn how to extend the integration
    of the MERN stack technologies and add new features to grow your own full-stack
    web applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will go over the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing MERN Social
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating the user profile
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Following users in MERN Social
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Posting messages with photos
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing interactions on posts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing MERN Social
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'MERN Social is a social media application with rudimentary features inspired
    by existing social media platforms such as Facebook and Twitter. The main purpose
    of this application is to demonstrate how to use the MERN stack technologies to
    implement features that allow users to connect or follow each other, and interact
    over shared content. While building out MERN Social in this chapter, we will go
    over the implementation of the following social media-flavored features:'
  prefs: []
  type: TYPE_NORMAL
- en: User profile with a description and a photo
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Users following each other
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Who to follow suggestions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Posting messages with photos
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Newsfeed with posts from followed users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listing posts by user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Liking posts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Commenting on posts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can extend these implementations further, as desired, for more complex
    features. The MERN Social home page looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f5366a8d-d429-400a-96ce-de8f53327195.png)'
  prefs: []
  type: TYPE_IMG
- en: The code for the complete MERN Social application is available on GitHub at
    [https://github.com/PacktPublishing/Full-Stack-React-Projects-Second-Edition/tree/master/Chapter05/mern-social](https://github.com/PacktPublishing/Full-Stack-React-Projects-Second-Edition/tree/master/Chapter05/mern-social). You
    can clone this code and run the application as you go through the code explanations
    for the rest of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The views needed for the MERN Social application will be developed by extending
    and modifying the existing React components in the MERN skeleton application.
    The following component tree shows all the custom React components that make up
    the MERN Social frontend and also exposes the composition structure we will use
    to build out the views in the rest of this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5355a21c-bde7-47b7-a95d-9a57de794243.png)'
  prefs: []
  type: TYPE_IMG
- en: Besides updating the existing components, we will also add new custom components
    to compose views, including a Newsfeed view where the user can create a new post
    and also browse a list of all the posts from people they follow on MERN Social.
    In the next section, we will begin by updating the user profile to demonstrate
    how to upload a profile photo and add a short bio for each user on the platform.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the user profile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The existing skeleton application only has support for a user''s name, email,
    and password. But in MERN Social, we will allow users to add a description about
    themselves, as well as upload a profile photo while editing the profile after
    signing up, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c3572610-108c-4d6f-8239-d62751914893.png)'
  prefs: []
  type: TYPE_IMG
- en: In order to implement this feature update, we need to modify both the user backend
    and frontend. In the following sections, we will learn how to update the user
    model and user update API in the backend, and then the user profile and user profile
    edit form views in the frontend to add a short description and a profile photo
    for users in MERN Social.
  prefs: []
  type: TYPE_NORMAL
- en: Adding an about description
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To store the short description that''s entered in the `about` field by a user,
    we need to add an `about` field to the user model in `server/models/user.model.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Then, to get the description as input from the user, we need to add a multiline
    `TextField` to the `EditProfile` form and handle the value change the same way
    we did for the user's name input.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/user/EditProfile.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Finally, to show the description text that was added to the `about` field on
    the user profile page, we can add it to the existing profile view.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/user/Profile.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: With this modification to the user feature in the MERN skeleton code, users
    can now add and update a description about themselves to be displayed on their
    profiles. Next, we will add the ability to upload a photo to complete the user
    profile.
  prefs: []
  type: TYPE_NORMAL
- en: Uploading a profile photo
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Allowing a user to upload a profile photo will require that we store the uploaded
    image file and retrieve it on request to load it in the view. There are multiple
    ways of implementing this upload feature while considering the different file
    storage options:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Server filesystem**: Upload and save files to a server filesystem and store
    the URL in MongoDB.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**External file storage**: Save files to external storage such as Amazon S3
    and store the URL in MongoDB.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Store as data in MongoDB**: Save files that are small in size (less than
    16 MB) to MongoDB as data of the Buffer type.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For MERN Social, we will assume that the photo files that are uploaded by the
    user will be small in size and demonstrate how to store these files in MongoDB
    for the profile photo upload feature. In [Chapter 8](7514f26d-29e1-46e2-ac46-7515b2c3a6d0.xhtml),
    *Extending the Marketplace for Orders and Payments*, we will discuss how to store
    larger files in MongoDB using GridFS.
  prefs: []
  type: TYPE_NORMAL
- en: 'To implement this photo upload feature, in the following sections, we will
    do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Update the user model to store the photo.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrate updated frontend views to upload the photo from the client- side.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modify the user update controller in the backend to process the uploaded photo.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating the user model to store a photo in MongoDB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to store the uploaded profile photo directly in the database, we will
    update the user model to add a `photo` field that stores the file as data of the `Buffer` type,
    along with the file's `contentType`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/server/models/user.model.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: An image file that's uploaded by the user from the client- side will be converted
    into binary data and stored in this `photo` field for documents in the Users collection
    in MongoDB. Next, we will look at how to upload the file from the frontend.
  prefs: []
  type: TYPE_NORMAL
- en: Uploading a photo from the edit form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Users will be able to upload an image file from their local files when editing
    the profile. In order to implement this interaction, we will update the `EditProfile`
    component in `client/user/EditProfile.js` with an upload photo option and then
    attach the user selected file in the form data that's submitted to the server.
    We will discuss this in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: File input with Material-UI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will utilize the HTML5 file input type to let the user select an image from
    their local files. The file input will return the filename in the change event
    when the user selects a file. We will add the file input element to the edit profile
    form as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/user/EditProfile.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'To integrate this file `input` element with Material-UI components, we apply
    `display:none` to hide the `input` element from the view, then add a Material-UI
    button inside the label for this file input. This way, the view displays the Material-UI
    button instead of the HTML5 file input element. The `label` is added as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/user/EditProfile.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: When the Button's `component` prop is set to `span`, the `Button` component
    renders as a `span` element inside the `label` element. A click on the `Upload`
    span or label is registered by the file input with the same ID as the label, and
    as a result, the file select dialog is opened. Once the user selects a file, we
    can set it to state in the call to `handleChange(...)` and display the name in
    the view, as shown in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/user/EditProfile.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This way, the user will see the name of the file they are trying to upload as
    the profile photo. With the file selected for uploading, next, we have to attach
    and send this file with the request to the server to update the user information
    in the database.
  prefs: []
  type: TYPE_NORMAL
- en: Form submission with the file attached
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Uploading files to the server with a form requires a multipart form submission.
    This is in contrast to the stringified object we sent in previous implementations
    of fetch. We will modify the `EditProfile` component so that it uses the `FormData`
    API to store the form data in the format needed for encoding in the `multipart/form-data` type.
  prefs: []
  type: TYPE_NORMAL
- en: You can learn more about the FormData API at [developer.mozilla.org/en-US/docs/Web/API/FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData).
  prefs: []
  type: TYPE_NORMAL
- en: First, we will update the input `handleChange` function so that we can store
    input values for both the text fields and the file input, as shown in the following
    code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/user/EditProfile.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Then, on form submission, we need to initialize `FormData` and append the values
    from the fields that were updated, as shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/user/EditProfile.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: After appending all the fields and values to it, `userData` is sent with the
    fetch API call to update the user, as shown in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/user/EditProfile.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Since the content type of the data that's sent to the server is no longer `'application/json'`,
    we also need to modify the `update` fetch method in `api-user.js` to remove `Content-Type`
    from the headers in the `fetch` call, as shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/user/api-user.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Now, if the user chooses to upload a profile photo when editing the profile,
    the server will receive a request with the file attached, along with the other
    field values. Next, we need to modify the server-side code to be able to process
    this request.
  prefs: []
  type: TYPE_NORMAL
- en: Processing a request containing a file upload
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'On the server, to process the request to the update API that may now contain
    a file, we will use the `formidable` Node module. Run the following command from
    the command line to install `formidable`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The `formidable` will allow the server to read the `multipart` form data and
    give us access to the fields and the file, if there are any. If there is a file,
    `formidable` will store it temporarily in the filesystem. We will read it from
    the filesystem using the `fs` module, which will retrieve the file type and data,
    and store it in the `photo` field in the user model. The `formidable` code will
    go in the `update` controller in `user.controller.js`, as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/server/controllers/user.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This will store the uploaded file as data in the database. Next, we will set
    up file retrieval so that we can access and display the photo that's uploaded
    by the user in the frontend views.
  prefs: []
  type: TYPE_NORMAL
- en: Retrieving a profile photo
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The simplest option to retrieve the image stored in the database and then show
    it in a view is to set up a route that will fetch the data and return it as an
    image file to the requesting client. In this section, we will learn how to set
    up this route to expose a photo URL, as well as how to use this URL to display
    the photo in the frontend views.
  prefs: []
  type: TYPE_NORMAL
- en: Profile photo URL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will set up a route to the photo stored in the database for each user, and
    also add another route that will fetch a default photo if the given user did not
    upload a profile photo. These routes will be defined as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/server/routes/user.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: We will look for the photo in the `photo` controller method and, if found, send
    it in the response to the request at the photo route; otherwise, we'll call `next()`
    to return the default photo, as shown in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/server/controllers/user.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The default photo is retrieved and sent from the server's file system, as shown
    here.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/server/controllers/user.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: We can use the route defined here to display the photo in the views, as described
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Showing a photo in a view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the photo URL routes set up to retrieve the photo, we can simply use these
    in the `img` element's `src` attribute to load the photo in the view. For example,
    in the `Profile` component, we use the user ID from the `values` in the state
    to construct the photo URL, as shown in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/user/Profile.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: To ensure the `img` element reloads in the `Profile` view after the photo is
    updated, we have to add a time value to the photo URL to bypass the browser's
    default image caching behavior.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we can set the `photoUrl` to the Material-UI `Avatar` component, which
    renders the linked image in the view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The updated user profile in MERN Social can now display a user uploaded profile
    photo and an `about` description, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e2289c32-d165-4502-9c83-7bdd1c779a2e.png)'
  prefs: []
  type: TYPE_IMG
- en: We have successfully updated the MERN skeleton application code to let users
    upload a profile photo and add a short bio description to their profiles. In the
    next section, we will update this further and implement the social media flavored
    feature that allows users to follow each other.
  prefs: []
  type: TYPE_NORMAL
- en: Following users in MERN Social
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In MERN Social, users will be able to follow each other. Each user will have
    a list of followers and a list of people they follow. Users will also be able
    to see a list of users they can follow; in other words, the users in MERN Social
    they are not already following. In the following sections, we will learn how to
    update the full-stack code to implement these features.
  prefs: []
  type: TYPE_NORMAL
- en: Following and unfollowing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to keep track of which user is following which other users, we will
    have to maintain two lists for each user. When one user follows or unfollows another
    user, we will update one's `following` list and the other's `followers` list.
    First, we will update the backend to store and update these lists, then modify
    the frontend views to allow users to perform follow and unfollow actions.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the user model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To store the list of `following` and `followers` in the database, we will need
    to update the user model with two arrays of user references, as shown in the following
    code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/server/models/user.model.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: These references will point to the users in the collection being followed by
    or following the given user. Next, we will update the user controllers to ensure
    the details of the users that are referenced in these lists are returned in a
    response to client-side requests.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the userByID controller method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When a single user is retrieved from the backend, we want the `user` object
    to include the names and IDs of the users referenced in the `following` and `followers`
    arrays. To retrieve these details, we need to update the `userByID` controller
    method so that it populates the returned user object, as shown in the highlighted
    code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/server/controllers/user.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: We use the Mongoose `populate` method to specify that the user object that's
    returned from the query should contain the name and ID of the users referenced
    in the `following` and `followers` lists. This will give us the names and IDs
    of the user references in the `followers` and `following` lists when we fetch
    the user with the read API call.
  prefs: []
  type: TYPE_NORMAL
- en: With the user model updated, we are ready to add API endpoints that will update
    these lists to either add or remove users from the lists, as discussed in the
    next section.
  prefs: []
  type: TYPE_NORMAL
- en: Adding APIs to follow and unfollow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When a user follows or unfollows another user from the view, both users' records
    in the database will be updated in response to the `follow` or `unfollow` requests.
  prefs: []
  type: TYPE_NORMAL
- en: Set up `follow` and `unfollow` routes in `user.routes.js` as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/server/routes/user.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The `addFollowing` controller method in the user controller will update the
    `following` array for the current user by pushing the followed user's reference
    into the array, as shown in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/server/controllers/user.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: On successful update of the `following` array, `next()` is invoked, and as a
    result, the `addFollower` method is executed to add the current user's reference
    to the followed user's `followers` array. The `addFollower` method is defined
    as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/server/controllers/user.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: For unfollowing, the implementation is similar. The `removeFollowing` and `removeFollower`
    controller methods update the respective `'following'` and `'followers'` arrays
    by removing the user references with `$pull` instead of `$push`. `removeFollowing` and `removeFollower` will
    look as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/server/controllers/user.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The user backend on the server-side is ready for the follow and unfollow features.
    Next, we will update the frontend to utilize these new backend APIs and complete
    this feature.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing the follow and unfollow APIs in views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to access these API calls in the views, we will update `api-user.js`
    with the `follow` and `unfollow` fetch methods. The `follow` and `unfollow` methods
    will be similar, making calls to the respective routes with the current user's
    ID and credentials, and the followed or unfollowed user's ID. The `follow` method
    will be as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/user/api-user.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The `unfollow` fetch method is similar; it takes the unfollowed user's ID and
    calls the `unfollow` API, as shown in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/user/api-user.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: With the API fetch code implemented, we can use these two methods to integrate
    the backend updates in the views, as discussed in the next section, which will
    allow users to follow or unfollow another user in the application.
  prefs: []
  type: TYPE_NORMAL
- en: Follow and unfollow buttons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The button that will allow a user to follow or unfollow another user will appear
    conditionally, depending on whether the user is already followed or not by the
    current user, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dbd4cd37-3142-46e9-bcd3-3c129241d59f.png)'
  prefs: []
  type: TYPE_IMG
- en: In the following sections, we will add this button in a separate React component,
    integrate it with the existing user profile view, and connect it to the follow
    and unfollow fetch methods.
  prefs: []
  type: TYPE_NORMAL
- en: The FollowProfileButton component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will create a separate component for the follow button called `FollowProfileButton`,
    which will be added to the `Profile` component. This component will show the `Follow`
    or `Unfollow` button, depending on whether the current user is already a follower
    of the user in the profile. The `FollowProfileButton` component will look as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/user/FollowProfileButton.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'When `FollowProfileButton` is added to the profile, the `following` value will
    be determined and sent from the `Profile` component as a prop to `FollowProfileButton`,
    along with the click handler that takes the specific `follow` or `unfollow` fetch
    API to be called as a parameter. The resulting profile views will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ccda800f-39dd-4ff2-97e6-457375a33cbb.png)'
  prefs: []
  type: TYPE_IMG
- en: In order to integrate this `FollowProfileButton` component with the profile
    view, we need to update the existing `Profile` component, as discussed next.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the Profile component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the `Profile` view, `FollowProfileButton` should only be shown when the
    user views the profile of other users, so we need to modify the condition for
    showing the `Edit` and `Delete` buttons when viewing a profile, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: In the `Profile` component, after the user data is successfully fetched in `useEffect`,
    we will check whether the signed-in user is already following the user in the
    profile or not and set the `following` value to the respective state, as shown
    in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/user/Profile.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: To determine the value to set in `following`, the `checkFollow` method will
    check if the signed-in user exists in the fetched user's `followers` list, then
    return `match` if found; otherwise, it will return `undefined` if a match is not
    found. The `checkFollow` method is defined as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/user/Profile.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: The `Profile` component will also define the click handler for `FollowProfileButton` so
    that the state of the `Profile` can be updated when the follow or unfollow action
    completes, as shown in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/user/Profile.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: The click handler definition takes the fetch API call as a parameter and is
    passed as a prop to `FollowProfileButton`, along with the `following` value when
    it is added to the `Profile` view, as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/user/Profile.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: This will load `FollowProfileButton` into the profile view, with all the necessary
    conditions accounted for, and provide the current user the option to follow or
    unfollow other users in the MERN Social application. Next, we will extend this
    feature to allow users to view the list of followings or followers in the user
    profile view.
  prefs: []
  type: TYPE_NORMAL
- en: Listing followings and followers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to give users easy access to the users they are following and the
    users who are following them on MERN Social, we will add these lists to their
    profile views. In each user''s profile, we will add a list of their followers
    and the people they are following, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/699fc1d1-f5f6-4a94-bca8-e97269344764.png)'
  prefs: []
  type: TYPE_IMG
- en: The details of the users referenced in the `following` and `followers` lists
    are already in the user object that is fetched using the `read` API when the profile
    is loaded. In order to render these separate lists of followers and followings,
    we will create a new component called `FollowGrid`.
  prefs: []
  type: TYPE_NORMAL
- en: Making a FollowGrid component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `FollowGrid` component will take a list of users as props, display the avatars
    of the users with their names, and link them to each user's own profile. We can
    add this component to the `Profile` view to display `followings` or `followers`.
    The `FollowGrid` component is defined as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/user/FollowGrid.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'To add the `FollowGrid` component to the `Profile` view, we can place it as
    desired in the view and pass the list of `followers` or `followings` as the `people`
    prop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: As shown previously, in MERN Social, we chose to display the `FollowGrid` components
    in tabs within the `Profile` component. We created a separate `ProfileTabs` component
    using Material-UI tab components and added that to the `Profile` component. This
    `ProfileTabs` component contains the two `FollowGrid` components with following
    and followers lists, along with a `PostList` component that shows the posts by
    the user.
  prefs: []
  type: TYPE_NORMAL
- en: This `PostList` component will be discussed later in this chapter. In the next
    section, we will add a feature that will allow a user to discover other users
    on the platform who they are not following yet.
  prefs: []
  type: TYPE_NORMAL
- en: Finding people to follow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Who to follow feature will show the signed-in user a list of people in
    MERN Social that they are not currently following, thus giving them the option
    to follow them or view their profiles, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/382878d9-dbbd-4454-a09f-5d446469e7b4.png)'
  prefs: []
  type: TYPE_IMG
- en: To implement this feature, we need to add a backend API that returns the list
    of users not followed by the currently signed-in user, and then update the frontend
    by adding a component that loads and displays this list of users.
  prefs: []
  type: TYPE_NORMAL
- en: Fetching users not followed
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will implement a new API on the server to query the database and fetch the
    list of users the current user is not following. This route will be defined as
    follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/server/routes/user.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: In the `findPeople` controller method, we will query the User collection in
    the database to find the users that are not in the current user's `following`
    list.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/server/controllers/user.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: This query will return an array of users that are not followed by the current
    user. To use this list of users in the frontend, we will update the `api-user.js` file
    and add a fetch for this API. The `findPeople` fetch method is defined as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/user/api-user.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: We can use this `findPeople` fetch method in the component that will display
    this list of users. In the next section, we will create the FindPeople component
    for this purpose.
  prefs: []
  type: TYPE_NORMAL
- en: The FindPeople component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To display the *who to follow* feature, we will create a component called `FindPeople`,
    which can be added to any of the views or rendered on its own. In this component,
    we will fetch the users not being followed by calling the `findPeople` method
    in `useEffect`, as shown in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/user/FindPeople.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: The fetched list of users will be iterated over and rendered in a Material-UI `List`
    component, with each list item containing the user's avatar, name, a link to the
    profile page, and a `Follow` button, as shown in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/user/FindPeople.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Clicking the `Follow` button will make a call to the follow API and update the
    list of users to follow by splicing out the newly followed user. The `clickFollow`
    method implements this behavior as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/user/FindPeople.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: We will also add a Material-UI `Snackbar` component that will open temporarily
    when the user is successfully followed in order to tell the user that they started
    following this new user. `Snackbar` will be added to the view code as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/user/FindPeople.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'As shown in the following screenshot, `Snackbar` will display the `message` containing
    the followed user''s name at the bottom-right corner of the page, and then auto-hide
    it after the set duration:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/75e760a8-de50-4ea1-a1ee-de7baab28315.png)'
  prefs: []
  type: TYPE_IMG
- en: MERN Social users can now follow each other, view lists of followings and followers
    for each user, and also see a list of people they can follow. The main purpose
    of following another user in MERN Social is to see and interact with their shared
    posts. In the next section, we will look at the implementation of the post feature.
  prefs: []
  type: TYPE_NORMAL
- en: Posting on MERN Social
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The post feature in MERN Social will allow users to share content on the MERN
    Social application platform and also interact with each other over the content
    by commenting on or liking a post, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e22285cb-cb09-4f0a-8a38-d1d5317d52fa.png)'
  prefs: []
  type: TYPE_IMG
- en: For this feature, we will implement a complete full-stack slice containing the
    post backend and frontend. The post backend will be comprised of a new Mongoose
    model for structuring the post data to be stored in the database, while the post
    CRUD API endpoints will allow the frontend to interact with the Post collection
    in the database. The post frontend will consist of post-related React components
    that will allow users to view posts, add new posts, interact with posts, and delete
    their own posts. In the following sections, we will define the data structure
    for posts in the Post schema, and then learn how to incrementally add the post
    backend APIs and frontend components according to the specific post-related feature
    we are implementing.
  prefs: []
  type: TYPE_NORMAL
- en: Mongoose schema model for Post
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To define the structure for storing details about each post and to store each
    post as a document in a collection in MongoDB, we will define the Mongoose schema
    for a post in `server/models/post.model.js`. The Post schema will store a post's
    text content, a photo, a reference to the user who posted, time of creation, likes
    on the post from users, and comments on the post by users. The schema will store
    these details in the following fields, each defined as shown with the corresponding
    code.
  prefs: []
  type: TYPE_NORMAL
- en: '**Post text**: `text` will be a required field that needs to be provided by
    the user on new post creation from the view:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '**Post photo**: `photo` will be uploaded from the user''s local files during
    post creation and stored in MongoDB, similar to the user profile photo upload
    feature. The photo will be optional for each post:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '**Post by**: Creating a post will require a user to be signed-in first so that
    we can store a reference to the user who is posting in the `postedBy` field:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '**Created time**: The `created` time will be generated automatically at the
    time of post creation in the database:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '**Likes**: References to the users who liked a specific post will be stored
    in a `likes` array:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '**Comments**: Each comment on a post will contain text content, the time of
    creation, and a reference to the user who posted the comment. Each post will have
    an array of `comments`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: This schema definition will enable us to implement all the post-related features
    in MERN Social. Next, we will start with a discussion of the Newsfeed feature
    to learn how to compose frontend React components.
  prefs: []
  type: TYPE_NORMAL
- en: The Newsfeed component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'On MERN Social, each user will see posts that have been shared by people they
    follow, along with posts that they themselves share, all aggregated in a Newsfeed
    view. Before delving further into the implementations of the post-related features
    in MERN Social, we will look at the composition of this Newsfeed view to showcase
    a basic example of how to design nested UI components that share state. The `Newsfeed`
    component will contain two main child components – a new post form and a list
    of posts from followed users, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6f274663-1fc2-41fe-bfaa-ea5fdd7dbe1a.png)'
  prefs: []
  type: TYPE_IMG
- en: The basic structure of the `Newsfeed` component will be as follows, with the
    `NewPost` component and the `PostList` component inside it.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/post/Newsfeed.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: As the parent component, `Newsfeed` will control the state of the posts' data
    that's rendered in the child components. It will provide a way to update the state
    of posts across the components when the post data is modified within the child
    components, such as the addition of a new post in the `NewPost` component or the
    removal of a post from the `PostList` component.
  prefs: []
  type: TYPE_NORMAL
- en: Here specifically, in the `Newsfeed` component we initially make a call to the
    server to fetch a list of posts from people that the currently signed-in user
    follows. Then we set this list of posts to the state to be rendered in the `PostList` component..
    The `Newsfeed` component provides the `addPost` and `removePost` functions to
    `NewPost` and `PostList`, which will be used when a new post is created or an
    existing post is deleted to update the list of posts in the Newsfeed's state and
    ultimately reflect it in the `PostList`.
  prefs: []
  type: TYPE_NORMAL
- en: The `addPost` function defined in the `Newsfeed` component will take the new
    post that was created in the `NewPost` component and add it to the posts in the
    state. The `addPost` function will look as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/post/Newsfeed.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: The `removePost` function defined in the `Newsfeed` component will take the
    deleted post from the `Post` component in `PostList` and remove it from the posts
    in the state. The `removePost` function will look as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/post/Newsfeed.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: As the posts are updated in the Newsfeed's state this way, the `PostList` will
    render the changed list of posts to the viewer. This mechanism of relaying state
    updates from parent to child components and back will be applied across other
    features, such as comment updates in a post and when a `PostList` is rendered
    for an individual user in the `Profile` component.
  prefs: []
  type: TYPE_NORMAL
- en: To begin the complete implementation of the `Newsfeed`, we need to be able to
    fetch a list of posts from the server and display it in the `PostList`. In the
    next section, we will make this `PostList` component for the frontend and add
    PostList API endpoints to the backend.
  prefs: []
  type: TYPE_NORMAL
- en: Listing posts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In MERN Social, we list posts in the `Newsfeed` and in the profile of each user.
    We will create a generic `PostList` component that will render any list of posts
    provided to it, which we can use in both the `Newsfeed` and the `Profile` components.
    The `PostList` component is defined as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/post/PostList.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: The `PostList` component will iterate through the list of posts passed to it
    as props from the `Newsfeed` or the `Profile`, and pass the data of each post
    to a `Post` component that will render details of the post. `PostList` will also
    pass the `removeUpdate` function that was sent as a prop from the parent component
    to the `Post` component so that the state can be updated when a single post is
    deleted. Next, we will complete the post lists in the Newsfeed view after fetching
    the relevant posts from the backend.
  prefs: []
  type: TYPE_NORMAL
- en: Listing posts in Newsfeed
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will set up an API on the server that queries the Post collection and returns
    a list of posts from the people a specified user is following. Then, to populate
    the Newsfeed view, these posts will be retrieved in the frontend by calling this
    API and they will be displayed in the `PostList` in `Newsfeed`.
  prefs: []
  type: TYPE_NORMAL
- en: Newsfeed API for posts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To implement the Newsfeed-specific API, we need to add the route endpoint that
    will receive the request for Newsfeed posts and respond accordingly to the requesting
    client-  side.
  prefs: []
  type: TYPE_NORMAL
- en: On the backend, we need to define the route path that will receive the request
    for retrieving Newsfeed posts for a specific user, as shown in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`server/routes/post.routes.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'We are using the `:userID` parameter in this route to specify the currently
    signed-in user. We will utilize the `userByID` controller method in `user.controller`
    to fetch the user details, as we did previously, and append these to the request
    object that is accessed in the `listNewsFeed` post controller method. Add the
    following to `mern-social/server/routes/post.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: The `post.routes.js` file will be very similar to the `user.routes.js` file.
    To load these new routes in the Express app, we need to mount the post routes
    in `express.js`, just like we did for the auth and user routes. The post-related
    routes are mounted as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/server/express.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: The `listNewsFeed` controller method in `post.controller.js` will query the
    Post collection in the database to get the matching posts. The `listNewsFeed` controller
    method is defined as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/server/controllers/post.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: In the query to the Post collection, we find all the posts that have `postedBy`
    user references that match the current user's followings and the current user.
    The posts that are returned will be sorted by the `created` timestamp, with the
    most recent post listed first. Each post will also contain the `id` and `name`
    of the user who created the post and of the users who left comments on the post.
    Next, we will fetch this API in the frontend `Newsfeed` component and render the
    list details.
  prefs: []
  type: TYPE_NORMAL
- en: Fetching Newsfeed posts in the view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will use the Newsfeed API in the frontend to fetch the related posts and
    display these posts in the Newsfeed view. First, we will add a fetch method to
    make a request to the API, as shown in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`client/post/api-post.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: This is the fetch method that will load the posts that are rendered in `PostList`,
    which is added as a child component to the `Newsfeed` component. So, this fetch
    needs to be called in the `useEffect` hook in the `Newsfeed` component, as shown
    in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/post/Newsfeed.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'This will retrieve the list of posts from the backend and set it to the state
    of the `Newsfeed` component to initially load the posts that are rendered in the
    `PostList` component, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/644c9140-8d5b-497a-b6f5-bb399df82d20.png)'
  prefs: []
  type: TYPE_IMG
- en: The implementation of how the individual post details are rendered in this list
    will be discussed later in this chapter. In the next section, we will render this
    same `PostList` for the `Profile` component and render the posts that are shared
    by a specific user.
  prefs: []
  type: TYPE_NORMAL
- en: Listing posts by user in Profile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The implementation of getting a list of posts created by a specific user and
    showing it in `Profile` will be similar to what we discussed in the previous section regarding
    listing posts in the Newsfeed. First, we will set up an API on the server that
    queries the Post collection and returns posts from a specific user to the `Profile`
    view.
  prefs: []
  type: TYPE_NORMAL
- en: API for posts by a user
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To retrieve posts that have been shared by a specific user, we need to add a
    route endpoint that will receive the request for these posts and respond accordingly
    to the requesting client- side.
  prefs: []
  type: TYPE_NORMAL
- en: On the backend, we will define another post-related route that will receive
    a query to return posts by a specific user, as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/server/routes/post.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: The `listByUser` controller method in `post.controller.js` will query the Post
    collection to find posts that have a matching reference in the `postedBy` field
    to the user specified in the `userId` param in the route. The `listByUser` controller
    method will look as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/server/controllers/post.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: This query will return the list of posts that were created by a specific user.
    We need to call this API from the frontend, which we will do in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Fetching user posts in the view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will use the list-posts-by-user API in the frontend to fetch the related
    posts and display these posts in the profile view. To use this API, we will add
    a fetch method to the frontend, as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/post/api-post.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: This `fetch` method will load the required posts for `PostList`, which is added
    to the `Profile` view. We will update the `Profile` component so that it defines
    a `loadPosts` method that calls the `listByUser` fetch method. The `loadPosts` method
    will look as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/user/Profile.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `Profile` component, the `loadPosts` method will be called with the
    user ID of the user whose profile is being loaded, after the user details have
    been fetched from the server in the `useEffect()` hook function. The posts that
    are loaded for the specific user are set to the state and rendered in the `PostList`
    component that''s added to the `Profile` component. The `Profile` component also
    provides a `removePost` function, similar to the `Newsfeed` component, as a prop
    to the `PostList` component so that the list of posts can be updated if a post
    is removed. The resulting `PostList` in the `Profile` component will render similar
    to what can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7458628a-ba76-41c9-b4da-5c97b802928f.png)'
  prefs: []
  type: TYPE_IMG
- en: The features that list posts that have been shared on MERN Social are now complete.
    But before these can be tested out, we need to implement the feature that will
    allow users to create new posts. We will do this in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new post
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The create new post feature will allow a signed-in user to post a message and
    optionally add an image to the post by uploading it from their local files. To
    implement this feature, in the following sections, we will add a create post API
    endpoint to the backend that allows uploading an image file, as well as add a
    `NewPost` component to the frontend that will utilize this endpoint to let users
    create new posts.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the post API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'On the server, we will define an API to create the post in the database, starting
    by declaring a route to accept a POST request at `/api/posts/new/:userId` in `mern-social/server/routes/post.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: The `create` method in `post.controller.js` will use the `formidable` module
    to access the fields and the image file, if any, as we did for the user profile
    photo update. The `create` controller method will look as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/server/controllers/post.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: Similar to the profile photo upload, the photo that's uploaded with a new post
    will be stored in the `Post` document in binary format. We need to add a route
    to retrieve and return this photo to the frontend, which we will do next.
  prefs: []
  type: TYPE_NORMAL
- en: Retrieving a post's photo
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To retrieve the uploaded photo, we will also set up a `photo` route endpoint
    that, on request, will return the photo associated with a specific post. The photo
    URL route will be defined with the other post-related routes, as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/server/routes/post.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: The `photo` controller will return the `photo` data stored in MongoDB as an
    image file. This is defined as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/server/controllers/post.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: Since the photo route uses the `:postID` parameter, we will set up a `postByID`
    controller method to fetch a specific post by its ID before returning it to the
    photo request. We will add the `param` call to `post.routes.js`, as shown in the
    following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/server/routes/post.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: '`postByID` will be similar to the `userByID` method, and it will attach the
    post retrieved from the database to the request object so that it can be accessed
    by the `next` method. The `postByID` method is defined as follows.'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/server/controllers/post.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: The attached post data in this implementation will also contain the ID and name
    of the `postedBy` user reference since we are invoking `populate()`. In the next
    section, we will add a fetch method to access this API endpoint in the frontend.
  prefs: []
  type: TYPE_NORMAL
- en: Fetching the create post API in the view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will update `api-post.js` by adding a `create` method to make a `fetch` call
    to the create API. The `create` fetch method will look as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/post/api-post.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: This method, like the user `edit` fetch method, will send a multipart form submission
    using a `FormData` object that will contain the text field and the image file.
    Finally, we are ready to integrate this create new post feature in the backend
    with a frontend component that will allow users to compose a post and submit it
    to the backend.
  prefs: []
  type: TYPE_NORMAL
- en: Making the NewPost component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `NewPost` component that we added in the `Newsfeed` component will allow
    users to compose a new post containing a text message and, optionally, an image,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d1b1fe4e-5e34-411b-9da4-376ab005a012.png)'
  prefs: []
  type: TYPE_IMG
- en: The `NewPost` component will be a standard form with a Material-UI `TextField`
    and a file upload button, as implemented in `EditProfile`, that takes the values
    and sets them in a `FormData` object to be passed in the call to the `create`
    fetch method on post submission. Post submission will invoke the following `clickPost`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/post/NewPost.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: The `NewPost` component is added as a child component in the `Newsfeed` and
    given the `addUpdate` method as a prop, as we discussed earlier. On successful
    post creation, the form view is emptied and `addUpdate` is executed so that the
    post list in the `Newsfeed` is updated with the new post. In the next section,
    we will add the `Post` component in order to display each post and its details.
  prefs: []
  type: TYPE_NORMAL
- en: The Post component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Post details in each post will be rendered in the `Post` component, which will
    receive the post data as props from the `PostList` component, as well as the `onRemove`
    prop, which needs to be applied if a post is deleted. In the following sections,
    we will look at the different parts of the Post interface and how to implement
    each.
  prefs: []
  type: TYPE_NORMAL
- en: Layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `Post` component layout will have a header showing details of the poster,
    the content of the post, an actions bar with a count of likes and comments, and
    a comments section, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/31db151a-6054-4cf7-8461-a1e8a9f43bd8.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, we will look into the implementation details of the header, content, actions,
    and comments sections of this Post component.
  prefs: []
  type: TYPE_NORMAL
- en: Header
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The header will contain information such as the name, avatar, and link to the
    profile of the user who posted, as well as the date the post was created. The
    code to display these details in the header section will be as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/post/Post.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: The header will also conditionally show a `delete` button if the signed-in user
    is viewing their own post. This header section will be above the main content
    section, which is discussed next.
  prefs: []
  type: TYPE_NORMAL
- en: Content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The content section will show the text of the post and the image if the post
    contains a photo. The code to display these details in the content section will
    be as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/post/Post.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: The image is loaded by adding the photo API to the `src` attribute in the `img`
    tag if the given post contains a photo. Followed by this content section is the
    actions section.
  prefs: []
  type: TYPE_NORMAL
- en: Actions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The actions section will contain an interactive `"like"` option with a display
    of the total number of likes on the post and a comment icon with the total number
    of comments on the post. The code to display these actions will be as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/post/Post.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: We will discuss the implementation of the "like" button later in this chapter.
    The details of the likes for each post are retrieved within the `post` object
    that's received in the props.
  prefs: []
  type: TYPE_NORMAL
- en: In the Post component, the final section will display the comments that have
    been left on the given post. We'll discuss this next.
  prefs: []
  type: TYPE_NORMAL
- en: Comments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The comments section will contain all the comment-related elements in the `Comments`
    component and will get `props` such as the `postId` and the `comments` data, along
    with a `state` updating method that can be called when a comment is added or deleted
    in the `Comments` component.
  prefs: []
  type: TYPE_NORMAL
- en: The comments section will be rendered in the view with the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/post/Post.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: The implementation of this `Comments` component will be detailed later in this
    chapter. These four sections make up the individual post view that we implemented
    in the `Post` component, which is rendered in `PostList` component. Each post's
    header also shows a `delete` button to the creator of the post. We will implement
    this remove post functionality next.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting a post
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `delete` button is only visible if the signed-in user and `postedBy` user
    are the same for the specific post being rendered. For the post to be deleted
    from the database, we will have to set up a delete post API in the backend which
    will also have a fetch method in the frontend that will be applied when `delete`
    is clicked. The route for the delete post API endpoint will be as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/server/routes/post.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: The delete route will check for authorization before calling `remove` on the
    post by ensuring the authenticated user and `postedBy` user are the same users. The
    `isPoster` method, which is implemented in the following code, checks whether
    the signed-in user is the original creator of the post before executing the `next`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/server/controllers/post.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: The rest of the implementation for the delete API with a `remove` controller
    method and fetch method for the frontend are the same as for the other API implementations.
    The important difference here, in the delete post feature, is the call to the
    `onRemove` update method in the `Post` component when delete succeeds. The `onRemove`
    method is sent as a prop from either `Newsfeed` or `Profile` to update the list
    of posts in the state when the delete is successful.
  prefs: []
  type: TYPE_NORMAL
- en: The following `deletePost` method, which is defined in the `Post` component,
    is called when the `delete` button is clicked on a post.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/post/Post.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: This method makes a fetch call to the delete post API and on success, updates
    the list of posts in the state by executing the `onRemove` method, which is received
    as a prop from the parent component.
  prefs: []
  type: TYPE_NORMAL
- en: This wraps up the implementation of the Post CRUD features in the backend and
    the frontend. However, we have not completed the features that will allow MERN
    Social users to interact with these posts. In the next section, we will add the
    ability to like posts and comment on posts.
  prefs: []
  type: TYPE_NORMAL
- en: Interacting with Posts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A core feature of any social media platform is the ability for users to interact
    with shared content. For the posts that are created in the MERN Social application,
    we will add the options to like and leave comments on individual posts.
  prefs: []
  type: TYPE_NORMAL
- en: To complete the implementation of this feature, first, we will have to modify
    the backend so that we can add API endpoints that update an existing post with
    details of who liked the post and details of comments left on the post.
  prefs: []
  type: TYPE_NORMAL
- en: Then, in the frontend, we will have to modify the UI so that users can like
    and leave a comment on a post.
  prefs: []
  type: TYPE_NORMAL
- en: Likes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The like option in the `Post` component's action bar section will allow the
    user to like or unlike a post, and also show the total number of likes for the
    post. To record a "like", we will have to set up like and unlike APIs that can
    be called in the view when the user interacts with the action bar that's rendered
    in each post.
  prefs: []
  type: TYPE_NORMAL
- en: The Like API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The like API will be a PUT request that will update the `likes` array in the
    `Post` document. The request will be received at the `api/posts/like` route, which
    is defined as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/server/routes/post.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: In the `like` controller method, the post ID that's received in the request
    body will be used to find the specific `Post` document and update it by pushing
    the current user's ID to the `likes` array, as shown in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/server/controllers/post.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: To use this API, a fetch method called `like` will be added to `api-post.js`,
    which will be used when the user clicks the `like` button. The `like` fetch is
    defined as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/post/api-post.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: Similarly, in the next section, we will also implement an unlike API endpoint
    so that a user can unlike a previously liked post.
  prefs: []
  type: TYPE_NORMAL
- en: The Unlike API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `unlike` API will be implemented similar to the like API, with its own route.
    This will be declared as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/server/routes/post.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: The `unlike` method in the controller will find the post by its ID and update
    the `likes` array by removing the current user's ID using `$pull` instead of `$push`.
    The `unlike` controller method will look as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/server/controllers/post.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: The unlike API will also have a corresponding fetch method, similar to the `like`
    method in `api-post.js`.
  prefs: []
  type: TYPE_NORMAL
- en: These APIs will be called when the user interacts with the like button in the
    view. But whether the like button should allow a like or an unlike action needs
    to be determined first. We will take a look at this in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Checking if a post has been liked and counting likes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When the `Post` component is rendered, we need to check if the currently signed-in
    user has liked the post or not so that the appropriate `like` option can be shown.
    The following `checkLike` method checks whether the currently signed-in user is
    referenced in the post's `likes` array or not.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/post/Post.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'This `checkLike` function can be called while setting the initial value of
    the `like` state variable, which keeps track of whether the current user liked
    the given post or not. The following screenshot shows how the like button renders
    when a post has not been liked versus when it has been liked by the current user:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3f2ad7bd-98ee-4dec-9835-2803d7fb2218.png)'
  prefs: []
  type: TYPE_IMG
- en: The `like` value that's set in the state using the `checkLike` method can be
    used to render a heart outline button or a full heart button. A heart outline
    button will render if the user has not liked the post; clicking it will make a
    call to the `like` API, show the full heart button, and increment the `likes`
    count. The full heart button will indicate the current user has already liked
    this post; clicking this will call the `unlike` API, render the heart outline
    button, and decrement the `likes` count.
  prefs: []
  type: TYPE_NORMAL
- en: The `likes` count is also set initially when the `Post` component mounts and
    props are received by setting the `likes` value to the state with `props.post.likes.length`,
    as shown in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/post/Post.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: The likes-related values are updated again when a "like" or "unlike" action
    takes place, and the updated post data is returned from the API call. Next, we
    will look at how to handle these clicks on the like button.
  prefs: []
  type: TYPE_NORMAL
- en: Handling like clicks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To handle clicks on the `like` and `unlike` buttons, we will set up a `clickLike`
    method that will call the appropriate fetch method based on whether it is a "like"
    or "unlike" action, and then update the state of the `like` and `likes` count
    for the post. This `clickLike` method will be defined as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/post/Post.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: Which of the like or unlike API endpoints will be called on a click depends
    on the value of the `like` variable in the state. Once the chosen API endpoint
    is called successfully, the values are updated in the state so that they can be
    reflected in the view.
  prefs: []
  type: TYPE_NORMAL
- en: This completes the likes feature implementation, complete with backend APIs
    integrated with the frontend to enable liking and unliking a given post. Next,
    we will add the comments feature to complete the social media application features
    we had set out for MERN Social.
  prefs: []
  type: TYPE_NORMAL
- en: Comments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The comments section in each post will allow signed-in users to add comments,
    see the list of comments, and delete their own comments. Any changes to the comment
    list, such as a new addition or removal, will update the comments, as well as
    the comment count in the action bar section of the `Post` component. The resulting
    comments section can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1f58c1be-b6e1-4aff-acbd-7eb189a20eac.png)'
  prefs: []
  type: TYPE_IMG
- en: To implement a functional comments section, we will update the backend with
    the corresponding comment and uncomment API endpoints, and also create this `Comments`
    component so that it integrates with the backend update.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a comment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When a user adds a comment, the `Post` document will be updated in the database
    with the new comment. First, we need to implement an API that receives the comment
    details from the client- side and updates the `Post` document. Then, we need to
    create the UI in the frontend, which allows us to compose a new comment and submit
    it to the backend API.
  prefs: []
  type: TYPE_NORMAL
- en: The Comment API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To implement the add comment API, we will set up a `PUT` route as follows to
    update the post.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/server/routes/post.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: The `comment` controller method, which is defined in the following code, will
    find the relevant post to be updated by its ID and push the comment object that's
    received in the request body to the `comments` array of the post.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/server/controllers/post.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: In the response, the updated post object will be sent back with details of the
    `postedBy` users populated in the post and in the comments.
  prefs: []
  type: TYPE_NORMAL
- en: To use this API in the view, we will set up a fetch method in `api-post.js`,
    which takes the current user's ID, the post ID, and the `comment` object from
    the view, and sends it with the add comment request. The `comment` fetch method
    will look as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/post/api-post.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: We can use this fetch method in the UI when the user submits a new comment,
    as discussed in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Writing something in the view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The *add comment* section in the `Comments` component will allow the signed-in
    user to type in the comment text:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/df6466bd-209c-469e-b3c4-6533606272c1.png)'
  prefs: []
  type: TYPE_IMG
- en: This will contain an avatar showing the user's photo and a text field, which
    will add the comment when the user presses the *Enter* key. This add comment section
    will be rendered in the view with the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/post/Comments.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: The text will be stored in the state when the value changes, and on the `onKeyDown`
    event, the `addComment` method will call the `comment` fetch method if the *Enter*
    key is pressed. The *Enter* key corresponds to `keyCode` 13, as shown in the following
    code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/post/Comments.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: The `Comments` component receives the `updateComments` method (as discussed
    in the previous section) as a prop from the `Post` component. This will be executed
    when the new comment is added in order to update the comments list and the comment
    count in the Post view. The part of `Comments` that lists all the comments for
    the post will be added in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Listing comments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `Comments` component receives the list of comments for the specific post
    as props from the `Post` component. Then, it iterates over the individual comments
    to render the details of the commenter and the comment content. This view is implemented
    with the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/post/Comments.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: '`commentBody` renders the content, including the name of the commenter linked
    to their profile, the comment text, and the date of comment creation. `commentBody`
    is defined as follows.'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/post/Comments.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: '`commentBody` will also render a delete option for the comment if the `postedBy`
    reference of the comment matches the currently signed-in user. We will look at
    the implementation of this comment deletion option in the next section.'
  prefs: []
  type: TYPE_NORMAL
- en: Deleting a comment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Clicking the delete button in a comment will update the post in the database
    by removing the comment from the `comments` array in the corresponding post. The
    delete button can be seen underneath the comment shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b800d038-e4bb-4704-b12e-ebdc6a44226e.png)'
  prefs: []
  type: TYPE_IMG
- en: To implement this delete comment feature, we need to add an uncomment API to
    the backend and then use it in the frontend.
  prefs: []
  type: TYPE_NORMAL
- en: The Uncomment API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will implement an `uncomment` API at the following PUT route.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/server/routes/post.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: The `uncomment` controller method will find the relevant post by ID and pull
    the comment with the deleted comment's ID from the `comments` array in the post,
    as implemented in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/server/controllers/post.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: The updated post will be returned in the response, similar to the comment API.
  prefs: []
  type: TYPE_NORMAL
- en: To use this API in the view, we will also set up a fetch method in `api-post.js`,
    similar to the `addComment` fetch method, that takes the current user's ID, the
    post ID, and the deleted `comment` object to send with the `uncomment` request.
    Next, we will learn how to use this fetch method when the delete button is clicked.
  prefs: []
  type: TYPE_NORMAL
- en: Removing a comment from the view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When a comment's delete button is clicked by the commenter, the `Comments` component
    will call the `deleteComment` method to fetch the `uncomment` API and update the
    comments, along with the comment count, when the comment is successfully removed
    from the server. The `deleteComment` method is defined as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/post/Comments.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: On successfully removing a comment from the backend, the `updateComments` method
    that's sent in the props from the `Post` component will be invoked. This will
    update the state of the `Post` component to update the view. This will be discussed
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Comment count update
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `updateComments` method, which will allow the `comments` and comment count
    to be updated when a comment is added or deleted, is defined in the `Post` component
    and passed as a prop to the `Comments` component. The `updateComments` method
    will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/post/Post.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: This method takes the updated list of comments as a parameter and updates the
    state that holds the list of comments rendered in the view. The initial state
    of comments in the `Post` component is set when the `Post` component mounts and
    receives the post data as props. The comments that are set here are sent as props
    to the `Comments` component and used to render the comment count next to the likes
    action in the action bar of the Post layout, as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/post/Post.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: This relationship between the comment count in the `Post` component and the
    comments that are rendered and updated in the `Comments` component gives a simple
    demonstration of how changing data is shared among nested components in React
    to create dynamic and interactive user interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: The MERN Social application now contains the set of features we defined earlier
    for the application. Users are able to update their profiles with a photo and
    description, follow each other on the application, and create posts with photos
    and text, as well as like and comment on posts. The implementations shown here
    can be tuned and extended further to add more features in order to utilize the
    revealed mechanisms of working with the MERN stack.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The MERN Social application we developed in this chapter demonstrated how the
    MERN stack technologies can be used together to build out a fully-featured and
    functioning web application with social media features.
  prefs: []
  type: TYPE_NORMAL
- en: We began by updating the user feature in the skeleton application to allow anyone
    with an account on MERN Social to add a description about themselves, as well
    as upload a profile picture from their local files. In the implementation of uploading
    a profile picture, we explored how to upload multipart form data from the client,
    then receive it on the server to store the file data directly in the MongoDB database,
    and then be able to retrieve it back for viewing.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we updated the user feature further to allow users to follow each other
    on the MERN Social platform. In the user model, we added the capability to maintain
    arrays of user references to represent lists of followers and followings for each
    user. Extending this capability, we incorporated follow and unfollow options in
    the view and displayed lists of followers, followings, and even lists of users
    not followed yet.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we added the ability to allow users to post content and interact over
    the content by liking or commenting on the post. On the backend, we set up the
    Post model and corresponding APIs, which are capable of storing the post content
    that may or may not include an image, as well as maintaining records of likes
    and comments that are incurred on a post by any user.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, while implementing the views for the posting, liking, and commenting
    features, we explored how to use component composition and share changing state
    values across the components to create complex and interactive views.
  prefs: []
  type: TYPE_NORMAL
- en: By completing this MERN Social application implementation, we learned how to
    extend and modify the base application code to grow it into a full-fledged web
    application according to our desired features. You can apply similar strategies
    to grow the skeleton application into any real-world application of your choosing.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will expand further on these abilities in the MERN stack and
    unlock new possibilities as we develop an online classroom application by extending
    the skeleton application.
  prefs: []
  type: TYPE_NORMAL
