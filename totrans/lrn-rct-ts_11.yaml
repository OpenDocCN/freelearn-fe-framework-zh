- en: '11'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '11'
- en: Reusable Components
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可重用组件
- en: In this chapter, we will build a checklist component and use various patterns
    to make it highly reusable but still strongly typed.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将构建一个清单组件，并使用各种模式使其高度可重用，同时仍然具有强类型。
- en: We will start by using TypeScript **generics** to strongly type the data passed
    to the component. Then, we will use the **props spreading** pattern to make the
    component API-flexible, and allow consumers of the component to custom render
    parts of the component using the **render props** pattern. After that, we will
    learn how to make custom hooks and use this to extract logic for checked items
    and how to make the state within a component controllable to change the component’s
    behavior.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先使用TypeScript **泛型**来为传递给组件的数据提供强类型。然后，我们将使用**属性展开**模式使组件API灵活，并允许组件消费者使用**渲染属性**模式自定义渲染组件的部分。之后，我们将学习如何创建自定义钩子，并使用它来提取勾选项的逻辑，以及如何使组件内的状态可控制以改变组件的行为。
- en: 'We’ll cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖以下主题：
- en: Creating the project
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建项目
- en: Using generic props
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用泛型属性
- en: Using props spreading
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用属性展开
- en: Using render props
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用渲染属性
- en: Adding checked functionality
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加勾选功能
- en: Creating custom hooks
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义钩子
- en: Allowing the internal state to be controlled
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许内部状态受控
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'We will use the following technologies in this chapter:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用以下技术：
- en: '**Node.js** and **npm**: You can install them here: [https://nodejs.org/en/download/](https://nodejs.org/en/download/).'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Node.js**和**npm**：您可以从这里安装它们：[https://nodejs.org/en/download/](https://nodejs.org/en/download/)。'
- en: '**Visual Studio Code**: You can install it here: [https://code.visualstudio.com/](https://code.visualstudio.com/).'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Visual Studio Code**：您可以从这里安装它：[https://code.visualstudio.com/](https://code.visualstudio.com/)。'
- en: All the code snippets in this chapter can be found online at [https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/tree/main/Chapter11](https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/tree/main/Chapter11).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的所有代码片段都可以在以下网址找到：[https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/tree/main/Chapter11](https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/tree/main/Chapter11)。
- en: Creating the project
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建项目
- en: In this section, we will create the project for the app we will build and its
    folder structure. The folder structure will be straightforward because it contains
    a single page with the checklist component we will build.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将为我们将要构建的应用程序及其文件夹结构创建项目。文件夹结构将非常简单，因为它包含一个带有我们将构建的清单组件的单页。
- en: 'We will develop the app using Visual Studio Code as in previous chapters, so
    open Visual Studio Code and carry out the following steps:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用与之前章节相同的方式，使用Visual Studio Code开发应用程序，因此请打开Visual Studio Code并执行以下步骤：
- en: Create the project using Create React App. See [*Chapter 3*](B19051_03.xhtml#_idTextAnchor072),
    *Setting up React and TypeScript*, if you can’t remember the steps for this.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Create React App创建项目。如果您记不起这些步骤，请参阅[*第3章*](B19051_03.xhtml#_idTextAnchor072)，*设置React和TypeScript*。
- en: We will style the app with Tailwind CSS, so install this into the project and
    configure it. See [*Chapter 5*](B19051_05.xhtml#_idTextAnchor127), *Approaches
    to Styling Frontends*, if you can’t remember the steps for this.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用Tailwind CSS来设计应用程序，因此请将此安装到项目中并配置它。如果您记不起这些步骤，请参阅[*第5章*](B19051_05.xhtml#_idTextAnchor127)，*前端设计方法*。
- en: That completes the project setup.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这就完成了项目设置。
- en: Using generic props
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用泛型属性
- en: In this section, we’ll take some time to understand how to create our own generic
    types and also learn about the `keyof` TypeScript feature, which is useful for
    generic types. We will use this knowledge to build the first iteration of the
    checklist component with a generic type for its props.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将花一些时间了解如何创建我们自己的泛型类型，并了解TypeScript中的`keyof`功能，这对于泛型类型非常有用。我们将使用这些知识来构建具有泛型属性的第一版清单组件。
- en: Understanding generics
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解泛型
- en: 'We have used generics throughout this book. For example, the `useState` hook
    has an optional generic parameter for the type of state variable:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这本书中使用了泛型。例如，`useState`钩子有一个可选的泛型参数，用于状态变量的类型：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Generic parameters in a function allow that function to be reusable with different
    types and be strongly typed. The following function returns the first element
    in an array, or `null` if the array is empty. However, the function only works
    with a `string` array:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 函数中的泛型参数允许该函数使用不同的类型进行重用，并且具有强类型。以下函数返回数组中的第一个元素，如果数组为空，则返回`null`。然而，该函数仅适用于`string`数组：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Generics allows us to make this function usable with any type of array.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 泛型使我们能够使这个函数适用于任何类型的数组。
- en: Generic functions
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 泛型函数
- en: 'Although we have used generic functions throughout this book, we haven’t created
    our own generic function yet. Generic type parameters are defined in angled brackets
    before the function’s parentheses:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们在这本书中使用了泛型函数，但我们还没有创建自己的泛型函数。泛型类型参数在函数括号之前的尖括号中定义：
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The name of a generic type can be anything you like, but it should be meaningful
    so that it is easy to understand.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 泛型类型的名称可以是任何你喜欢的，但应该是有意义的，以便于理解。
- en: 'Here is a generic version of the function we saw earlier. Now, it can work
    with arrays containing any type of element:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是之前看到的函数的泛型版本。现在，它可以与包含任何类型元素的数组一起工作：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The function has a single generic parameter called `Item`, which is used in
    the type of the `array` function parameter, as well as the function’s return type.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 函数有一个名为`Item`的单个泛型参数，它在`array`函数参数的类型以及函数的返回类型中使用。
- en: Generic types
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 泛型类型
- en: 'Custom types can be generic as well. For a `type` alias, its generic parameters
    are defined in angled brackets after the type name:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义类型也可以是泛型的。对于`type`别名，其泛型参数在类型名称之后的尖括号中定义：
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'For example, the props of a React component can be generic. An example of a
    generic props type is as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，React组件的属性可以是泛型的。以下是一个泛型属性类型的示例：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `Props` type has a single generic parameter called `Item`, which is used
    in the type of the `items` prop.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`Props`类型有一个名为`Item`的单个泛型参数，它在`items`属性的类型中使用。'
- en: Generic React components
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 泛型React组件
- en: 'Generic props can be integrated into a generic function to produce a generic
    React component. Here’s an example of a generic `List` component:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 泛型属性可以被集成到一个泛型函数中，以生成一个泛型React组件。以下是一个泛型`List`组件的示例：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `items` prop in the `List` component can now have any type, making the component
    flexible and reusable.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`List`组件中的`items`属性现在可以是任何类型，这使得组件更加灵活和可重用。'
- en: Now that we understand how to create a component with generic props, we will
    create the first iteration of the checklist component.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了如何创建具有泛型属性的组件，我们将创建检查列表组件的第一迭代。
- en: Creating a basic list component
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个基本的列表组件
- en: We will now start to create our reusable component. In this iteration, it will
    be a basic list containing some primary and secondary text obtained from an array
    of data.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在开始创建我们的可重用组件。在这个迭代中，它将是一个包含从数据数组中获取的一些主要和次要文本的基本列表。
- en: 'Carry out the following steps:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤：
- en: Start by creating a folder for the component called `Checklist` in the `src`
    folder. Then, create a file called `Checklist.tsx` in this folder.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在`src`文件夹中创建一个名为`Checklist`的组件文件夹。然后，在这个文件夹中创建一个名为`Checklist.tsx`的文件。
- en: 'Open `Checklist.tsx` and add the following `Props` type:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Checklist.tsx`并添加以下`Props`类型：
- en: '[PRE7]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Here is an explanation of each prop:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是对每个属性的说明：
- en: The `data` prop is the data that drives the items in the list
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data`属性是驱动列表中项的数据'
- en: The `id` prop is the property’s name in each data item that uniquely identifies
    the item
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`id`属性是每个数据项中唯一标识该项的属性名'
- en: The `primary` prop is the property’s name in each data item that contains the
    main text to render in each item
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`primary`属性是每个数据项中包含要渲染在各个项中的主要文本的属性名'
- en: The `secondary` prop is the property’s name in each data item that includes
    the supplementary text to render in each item
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`secondary`属性是每个数据项中包含要渲染在各个项中的补充文本的属性名'
- en: This is the first time we have encountered the `keyof` operator in a type annotation.
    It queries the type specified after it for the property names and constructs a
    union type from them, so the type for `id`, `primary`, and `secondary` will be
    a union type of all the property names for each data item.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们第一次在类型注解中遇到`keyof`运算符。它查询其后的指定类型以获取属性名，并从它们构造一个联合类型，因此`id`、`primary`和`secondary`的类型将是从每个数据项的所有属性名组成的联合类型。
- en: 'Next, start to implement the component function as follows:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，开始按照以下方式实现组件函数：
- en: '[PRE13]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The component renders a gray, unordered list element with rounded corners. We
    also map over the data items where we will eventually render each item.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 组件渲染一个灰色、无序列表元素，具有圆角。我们还遍历数据项，我们最终将在其中渲染每个项。
- en: 'We will start by implementing the function inside `data.map`. The function
    checks whether the unique identifier (`idValue`) is a string or number, and if
    not, it won’t render anything. The function also checks that the primary text
    property (`primaryText`) is a string, and again, if not, doesn’t render anything:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先在 `data.map` 函数内部实现该功能。该函数检查唯一标识符（`idValue`）是否为字符串或数字，如果不是，则不会渲染任何内容。该函数还检查主文本属性（`primaryText`）是否为字符串，如果不是，同样不会渲染任何内容：
- en: '[PRE26]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Finish the implementation by rendering the list item as follows:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过以下方式完成实现，将列表项渲染如下：
- en: '[PRE40]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: The list items are rendered with a white background and rounded corners. The
    primary text is rendered as large, gray text with the secondary text rendered
    much smaller.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 列表项以白色背景和圆角渲染。主文本以大号灰色文本渲染，次要文本则渲染得小得多。
- en: 'Create a new file in the `Checklist` folder called `index.ts` and export the
    `Checklist` component into it:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Checklist` 文件夹中创建一个名为 `index.ts` 的新文件，并将 `Checklist` 组件导出到其中：
- en: '[PRE58]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: This file will simplify `import` statements for the `Checklist` component.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件将简化 `Checklist` 组件的 `import` 语句。
- en: 'The final step before seeing the component in action is to add it to the component
    tree in the app. Open `App.tsx` and replace the content within it with the following:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在看到组件的实际效果之前，最后的步骤是将它添加到应用程序的组件树中。打开 `App.tsx` 并将其内容替换为以下内容：
- en: '[PRE59]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: We reference the `Checklist` component and pass some data into it. Notice how
    type-safe the `id`, `primary`, and `secondary` attributes are – we are forced
    to enter a valid property name with the data items.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们引用 `Checklist` 组件并将其传递一些数据。注意 `id`、`primary` 和 `secondary` 属性的类型安全性 – 我们被迫使用有效的属性名与数据项一起输入。
- en: 'Run the app by entering `npm start` in the terminal. The checklist component
    appears as shown here:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在终端中输入 `npm start` 来运行应用程序。清单组件将如图所示出现：
- en: '![Figure 11.1 – Our basic checklist component](img/B19051_11_01.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.1 – 我们的基本清单组件](img/B19051_11_01.jpg)'
- en: Figure 11.1 – Our basic checklist component
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.1 – 我们的基本清单组件
- en: Currently, the component renders a basic list – we will add the checked functionality
    later in this chapter.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，该组件渲染一个基本列表 – 我们将在本章后面添加已检查的功能。
- en: That completes this section on generic props.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 这完成了关于泛型属性的部分。
- en: 'To recap, here are some key points:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾一下，以下是一些关键点：
- en: TypeScript generics allow reusable code to be strongly typed.
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TypeScript 泛型允许可重用代码具有强类型。
- en: Functions can have generic parameters that are referenced within the implementation.
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数可以有泛型参数，这些参数在实现中被引用。
- en: Types can also have generic parameters that are referenced within the implementation.
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类型也可以有泛型参数，这些参数在实现中被引用。
- en: A React component can be made generic by feeding a generic props type into a
    generic function component. The component implementation will then be based on
    generic props.
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过向泛型函数组件中传递泛型属性类型，可以使 React 组件成为泛型。组件实现将基于泛型属性。
- en: Next, we will learn about a pattern that allows the prop type to inherit props
    from an HTML element.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将了解一个允许属性类型从 HTML 元素继承属性的模式的用法。
- en: Using props spreading
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用属性展开
- en: In this section, we’ll learn about a pattern called `ul` element. This will
    allow consumers of the component to specify props, such as the height and width
    of the checklist.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将了解一个名为 `ul` 元素的模式。这将允许组件的消费者指定属性，例如清单的高度和宽度。
- en: 'So, carry out the following steps:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，执行以下步骤：
- en: 'Open `Checklist.tsx` and import the following type from React:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `Checklist.tsx` 并从 React 中导入以下类型：
- en: '[PRE76]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: This type allows us to reference the props of an HTML element such as `ul`.
    It is a generic type that takes the HTML element name as a generic parameter.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 此类型允许我们引用 HTML 元素（如 `ul`）的属性。它是一个泛型类型，它将 HTML 元素名称作为泛型参数。
- en: 'Add the props from the `ul` element to the component props type as follows:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `ul` 元素的属性添加到组件属性类型中，如下所示：
- en: '[PRE77]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '[PRE79]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[PRE80]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[PRE81]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[PRE82]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'Add a `ulProps` to collect all the props for the `ul` element into a single
    `ulProps` variable:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个 `ulProps` 来收集 `ul` 元素的所有属性到一个单一的 `ulProps` 变量中：
- en: '[PRE83]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '[PRE84]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '[PRE85]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '[PRE86]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '[PRE87]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '[PRE88]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '[PRE90]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '[PRE91]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE91]'
- en: This is the first time we have used rest parameters in this book. They collect
    multiple arguments that are passed into the function into an array, so any props
    that aren’t called `data`, `id`, `primary`, or `secondary` will be collected into
    the `ulProps` array. For more information on rest parameters, see [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters).
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们在这本书中第一次使用剩余参数。它们将传递到函数中的多个参数收集到一个数组中，所以任何未称为 `data`、`id`、`primary` 或 `secondary`
    的属性都将收集到 `ulProps` 数组中。有关剩余参数的更多信息，请参阅 [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters)。
- en: 'Now, we can spread `ulProps` onto the `ul` element using the spread syntax:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以使用扩展运算符将 `ulProps` 传播到 `ul` 元素上：
- en: '[PRE92]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '[PRE93]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '[PRE94]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[PRE95]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '[PRE96]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '[PRE97]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '[PRE98]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '[PRE99]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '[PRE100]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '[PRE101]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '[PRE102]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '[PRE103]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '[PRE104]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '[PRE105]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE105]'
- en: 'We can use this new feature of `Checklist` to specify the list height and width.
    Open `App.tsx` and add the following `style` attribute, as well as more data items:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以使用 `Checklist` 的新功能来指定列表的高度和宽度。打开 `App.tsx` 并添加以下 `style` 属性，以及更多数据项：
- en: '[PRE106]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE106]'
- en: '[PRE107]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '[PRE108]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[PRE109]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '[PRE110]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '[PRE111]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '[PRE112]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '[PRE113]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '[PRE114]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '[PRE115]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '[PRE116]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE116]'
- en: '[PRE117]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '[PRE118]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '[PRE119]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE119]'
- en: '[PRE120]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE120]'
- en: '[PRE121]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '[PRE122]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '[PRE123]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE123]'
- en: 'If the app isn’t running, run it by entering `npm start` in the terminal. The
    checklist component appears sized as we expect:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果应用程序没有运行，请在终端中输入 `npm start` 来运行它。清单组件以我们预期的尺寸出现：
- en: '![Figure 11.2 – The sized checklist component](img/B19051_11_02.jpg)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.2 – 尺寸化的清单组件](img/B19051_11_02.jpg)'
- en: Figure 11.2 – The sized checklist component
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.2 – 尺寸化的清单组件
- en: The component now has a fixed height with a vertical scrollbar as a result of
    the style we passed into the component.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们传递到组件中的样式，组件现在具有固定的高度，并带有垂直滚动条。
- en: 'That completes our use of the props spreading pattern. Here’s a recap of the
    key points:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 这就完成了我们对属性传播模式的运用。以下是对关键点的回顾：
- en: We intersect the props type with `ComponentPropsWithoutRef` to add props for
    the HTML element we want to spread onto
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将属性类型与 `ComponentPropsWithoutRef` 交集，以添加我们想要传播到 HTML 元素上的属性
- en: We use a rest parameter in the component props to collect all the HTML element
    props into an array
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们在组件属性中使用剩余参数来收集所有 HTML 元素属性到一个数组中
- en: We can then spread the rest parameter onto the HTML element in the JSX
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，我们可以在 JSX 中的 HTML 元素上扩展剩余参数
- en: Next, we will learn about a pattern that allows consumers to render parts of
    a component.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将学习一种允许消费者渲染组件部分的模式。
- en: Using render props
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用渲染属性
- en: In this section, we will learn about the **render props** pattern and use it
    to allow the consumer of the component to render items within the checklist component.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习关于 **渲染属性** 模式的知识，并使用它来允许组件的消费者在清单组件内渲染项目。
- en: Understanding the render props pattern
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解渲染属性模式
- en: 'A way of making a component highly reusable is to allow the consumer to render
    internal elements within it. The `children` prop on a `button` element is an example
    of this because it allows us to specify any button content we like:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 使组件高度可重用的方法之一是允许消费者在其内部渲染内部元素。`button` 元素上的 `children` 属性就是这样一个例子，因为它允许我们指定我们喜欢的任何按钮内容：
- en: '[PRE124]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: 'The render props pattern allows us to use a prop other than `children` to provide
    this capability. This is useful when the `children` prop is already used for something
    else, as in the following example:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染属性模式允许我们使用除 `children` 之外的属性来提供这种能力。当 `children` 属性已经被用于其他目的时，这非常有用，如下面的例子所示：
- en: '[PRE125]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: Here, `heading` is a render prop in a `Modal` component.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`heading` 是 `Modal` 组件中的一个渲染属性。
- en: 'Render props are useful when allowing the consumer to render elements associated
    with the data passed into the component because the render prop can be a function:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 当允许消费者渲染与传递到组件中的数据相关的元素时，渲染属性非常有用，因为渲染属性可以是一个函数：
- en: '[PRE126]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: The preceding example has a render prop called `renderItem` that renders each
    list item in a `List` component. The data item is passed into it so it can include
    its properties in the list item. This is similar to what we will implement next
    for our checklist component.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的例子有一个名为 `renderItem` 的渲染属性，它在 `List` 组件中渲染每个列表项。数据项传递给它，以便它可以在列表项中包含其属性。这与我们接下来将为我们的清单组件实现的内容类似。
- en: Adding a renderItem prop
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加 `renderItem` 属性
- en: 'We will add a prop called `renderItem` to the checklist that allows consumers
    to take control of the rendering of the list items. Carry out the following steps:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在清单中添加一个名为 `renderItem` 的属性，允许消费者控制列表项的渲染。执行以下步骤：
- en: 'Open `Checklist.tsx` and add the `ReactNode` type to the React `import` statement:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `Checklist.tsx` 并将 `ReactNode` 类型添加到 React `import` 语句中：
- en: '[PRE127]'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE127]'
- en: '`ReactNode` represents an element that React can render. Therefore, we will
    use `ReactNode` as the return type for our render prop.'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '`ReactNode`代表React可以渲染的元素。因此，我们将使用`ReactNode`作为我们渲染属性的返回类型。'
- en: 'Add a render prop called `renderItem` to the `Props` type:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向`Props`类型添加一个名为`renderItem`的渲染属性：
- en: '[PRE128]'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE128]'
- en: '[PRE129]'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE129]'
- en: '[PRE130]'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE130]'
- en: '[PRE131]'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE131]'
- en: '[PRE132]'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE132]'
- en: '[PRE133]'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE133]'
- en: '[PRE134]'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE134]'
- en: The prop is a function that takes in the data item and returns what needs rendering.
    We have made the prop optional because we will provide a default implementation
    for list items but also allow consumers to override it.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 该属性是一个函数，它接受数据项并返回需要渲染的内容。我们将其设置为可选，因为我们将为列表项提供默认实现，同时也允许消费者覆盖它。
- en: 'Add `renderItem` to the component function parameters:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`renderItem`添加到组件函数参数中：
- en: '[PRE135]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE135]'
- en: '[PRE136]'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE136]'
- en: '[PRE137]'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE137]'
- en: '[PRE138]'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE138]'
- en: '[PRE139]'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE139]'
- en: '[PRE140]'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE140]'
- en: '[PRE141]'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE141]'
- en: '[PRE142]'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE142]'
- en: '[PRE143]'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE143]'
- en: '[PRE144]'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE144]'
- en: 'In the JSX, at the top of the mapping function, add an `if` statement to check
    whether the `renderItem` prop has been specified. If `renderItem` has been specified,
    call it with the data item, and return its result from the mapping function:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在JSX中，在映射函数顶部添加一个`if`语句来检查是否指定了`renderItem`属性。如果指定了`renderItem`，则使用数据项调用它，并从映射函数中返回其结果：
- en: '[PRE145]'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE145]'
- en: '[PRE146]'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE146]'
- en: '[PRE147]'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE147]'
- en: '[PRE148]'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE148]'
- en: '[PRE149]'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE149]'
- en: '[PRE150]'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE150]'
- en: '[PRE151]'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE151]'
- en: '[PRE152]'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE152]'
- en: '[PRE153]'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE153]'
- en: So, if `renderItem` has been specified, it will be called to get the element
    to render as the list item. If `renderItem` hasn’t been specified, it will render
    the list item as it previously did.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果指定了`renderItem`，它将被调用以获取作为列表项渲染的元素。如果没有指定`renderItem`，它将像之前一样渲染列表项。
- en: 'To try the new prop out, open `App.tsx` and add the following `renderItem`
    attribute:'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了尝试新属性，打开`App.tsx`并添加以下`renderItem`属性：
- en: '[PRE154]'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE154]'
- en: '[PRE155]'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE155]'
- en: '[PRE156]'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE156]'
- en: '[PRE157]'
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE157]'
- en: '[PRE158]'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE158]'
- en: '[PRE159]'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE159]'
- en: '[PRE160]'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE160]'
- en: '[PRE161]'
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE161]'
- en: '[PRE162]'
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE162]'
- en: '[PRE163]'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE163]'
- en: '[PRE164]'
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE164]'
- en: The list items are now rendered as flat, white items with a border between them.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 列表项现在以扁平、白色的形式渲染，它们之间有边框。
- en: 'If the app isn’t running, run it by entering `npm start` in the terminal. The
    checklist component appears with the overridden list items:'
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果应用没有运行，请在终端中输入`npm start`来运行它。带有覆盖列表项的清单组件将出现：
- en: '![Figure 11.3 – Overridden list items](img/B19051_11_03.jpg)'
  id: totrans-277
  prefs: []
  type: TYPE_IMG
  zh: '![图11.3 – 覆盖的列表项](img/B19051_11_03.jpg)'
- en: Figure 11.3 – Overridden list items
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.3 – 覆盖的列表项
- en: Before continuing to the next section, remove the use of `renderItem` in the
    `Checklist` element in `App.tsx`. The default rendering of list items should then
    appear.
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在继续下一节之前，请从`App.tsx`中的`Checklist`元素中移除`renderItem`的使用。然后应该出现列表项的默认渲染。
- en: 'That completes this section on the render props pattern. To recap, here are
    some key points:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 这就完成了关于渲染属性模式的这一节。为了回顾，以下是一些关键点：
- en: The render props pattern allows a component consumer to override the rendering
    of parts of the component
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 渲染属性模式允许组件消费者覆盖组件的部分渲染。
- en: A render prop can either be an element or a function that returns an element
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 渲染属性可以是元素或返回元素的函数。
- en: A common use case for a render prop is a data-driven list in which the rendering
    of list items can be overridden
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 渲染属性的一个常见用例是数据驱动的列表，其中可以覆盖列表项的渲染。
- en: Next, we will add checked functionality to our checklist component.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将向清单组件添加检查功能。
- en: Adding checked functionality
  id: totrans-285
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加检查功能
- en: Currently, our checklist component doesn’t contain the ability to check items,
    so we will now add checkboxes to the list of items, giving users the ability to
    check them. We will track the checked items using a React state.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们的清单组件不包含检查项的能力，因此我们现在将复选框添加到项目列表中，使用户能够检查它们。我们将使用React状态跟踪已检查的项。
- en: 'So, carry out the following steps to add this functionality to our component:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，执行以下步骤将此功能添加到我们的组件中：
- en: 'Open `Checklist.tsx` and add `useState` to the React `import` statement:'
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Checklist.tsx`并在React `import`语句中添加`useState`：
- en: '[PRE165]'
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE165]'
- en: '[PRE166]'
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE166]'
- en: '[PRE167]'
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE167]'
- en: '[PRE168]'
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE168]'
- en: '[PRE169]'
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE169]'
- en: We will use the state to store the IDs of the checked items.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用状态来存储已检查项的ID。
- en: 'At the top of the component implementation, add the state for the IDs of the
    checked items:'
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在组件实现顶部，添加已选中项的ID状态：
- en: '[PRE170]'
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE170]'
- en: We have referenced an `IdValue` type that we haven’t defined yet – we’ll define
    this after we have finished the component implementation in *step 6*.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 我们引用了一个尚未定义的`IdValue`类型 – 我们将在完成组件实现步骤6后定义它。
- en: 'Add checkboxes to the list of items as follows:'
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按如下方式将复选框添加到项目列表中：
- en: '[PRE171]'
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE171]'
- en: '[PRE172]'
  id: totrans-300
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE172]'
- en: '[PRE173]'
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE173]'
- en: '[PRE174]'
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE174]'
- en: '[PRE175]'
  id: totrans-303
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE175]'
- en: '[PRE176]'
  id: totrans-304
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE176]'
- en: '[PRE177]'
  id: totrans-305
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE177]'
- en: '[PRE178]'
  id: totrans-306
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE178]'
- en: '[PRE179]'
  id: totrans-307
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE179]'
- en: '[PRE180]'
  id: totrans-308
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE180]'
- en: '[PRE181]'
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE181]'
- en: '[PRE182]'
  id: totrans-310
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE182]'
- en: '[PRE183]'
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE183]'
- en: '[PRE184]'
  id: totrans-312
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE184]'
- en: '[PRE185]'
  id: totrans-313
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE185]'
- en: '[PRE186]'
  id: totrans-314
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE186]'
- en: '[PRE187]'
  id: totrans-315
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE187]'
- en: '[PRE188]'
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE188]'
- en: '[PRE189]'
  id: totrans-317
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE189]'
- en: '[PRE190]'
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE190]'
- en: '[PRE191]'
  id: totrans-319
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE191]'
- en: '[PRE192]'
  id: totrans-320
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE192]'
- en: The `checkedIds` state powers the `checked` attribute of the checkbox by checking
    whether the list item’s ID is contained within it.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '`checkedIds`状态通过检查列表项的ID是否包含在其中，为复选框的`checked`属性提供动力。'
- en: We will implement the referenced `handleCheckChange` function in the next step.
    Notice that the reference calls the function passing the ID of the list item that
    has been checked.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一步实现引用的`handleCheckChange`函数。注意，引用调用函数时传递了已检查的列表项的ID。
- en: 'Start to implement the `handleCheckChange` function in the component as follows:'
  id: totrans-323
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式在组件中开始实现 `handleCheckChange` 函数：
- en: '[PRE193]'
  id: totrans-324
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE193]'
- en: '[PRE194]'
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE194]'
- en: '[PRE195]'
  id: totrans-326
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE195]'
- en: 'This is a function that returns the handler function. This complexity is because
    a basic checked handler doesn’t pass in the list item’s ID. This approach is called
    **currying**, and more information on it can be found at the following link: [https://javascript.info/currying-partials](https://javascript.info/currying-partials).'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个返回处理函数的函数。这种复杂性是因为基本的已选处理函数没有传入列表项的 ID。这种方法被称为**柯里化**，更多关于它的信息可以在以下链接中找到：[https://javascript.info/currying-partials](https://javascript.info/currying-partials)。
- en: 'Complete the handler implementation as follows:'
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式完成处理函数的实现：
- en: '[PRE196]'
  id: totrans-329
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE196]'
- en: '[PRE197]'
  id: totrans-330
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE197]'
- en: '[PRE198]'
  id: totrans-331
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE198]'
- en: '[PRE199]'
  id: totrans-332
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE199]'
- en: '[PRE200]'
  id: totrans-333
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE200]'
- en: '[PRE201]'
  id: totrans-334
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE201]'
- en: '[PRE202]'
  id: totrans-335
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE202]'
- en: '[PRE203]'
  id: totrans-336
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE203]'
- en: '[PRE204]'
  id: totrans-337
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE204]'
- en: The implementation updates the list item’s ID to the `checkedIds` state if the
    list item has been checked and removes it if it is unchecked.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 实现更新列表项的 ID 到 `checkedIds` 状态，如果列表项已被选中，如果未选中则移除它。
- en: 'Next, let’s define the `IdValue` type. Create a new file in the `Checklist`
    folder called `types.ts` with the definition of `IdValue`:'
  id: totrans-339
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们定义 `IdValue` 类型。在 `Checklist` 文件夹中创建一个名为 `types.ts` 的新文件，其中包含 `IdValue`
    的定义：
- en: '[PRE205]'
  id: totrans-340
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE205]'
- en: Here, the list item’s ID can be a `string` or `number` value.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，列表项的 ID 可以是 `string` 或 `number` 类型的值。
- en: 'Move back to `Checklist.tsx` and import `IdValue`:'
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到 `Checklist.tsx` 并导入 `IdValue`：
- en: '[PRE206]'
  id: totrans-343
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE206]'
- en: The compilation errors should now be resolved.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 现在应该已经解决了编译错误。
- en: 'If the app isn’t running, run it by entering `npm start` in the terminal. The
    checklist component appears with checkboxes for each list item:'
  id: totrans-345
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果应用没有运行，请在终端中输入 `npm start` 来运行它。检查清单组件将带有每个列表项的复选框显示出来：
- en: '![Figure 11.4 – Checkboxes for list items](img/B19051_11_04.jpg)'
  id: totrans-346
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.4 – 列表项的复选框](img/B19051_11_04.jpg)'
- en: Figure 11.4 – Checkboxes for list items
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.4 – 列表项的复选框
- en: The checklist component now includes checkboxes. However, there is an opportunity
    to make the checked logic reusable – we’ll cover this in the next section.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 检查清单组件现在包括复选框。然而，有一个机会可以使已选逻辑可重用——我们将在下一节中介绍这一点。
- en: Creating custom hooks
  id: totrans-349
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义钩子
- en: In this section, we’ll learn about custom React hooks. Then, we will use this
    knowledge to extract the checked logic from the checklist component into a reusable
    custom hook.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将了解自定义 React 钩子。然后，我们将使用这些知识从检查清单组件中提取已选逻辑到一个可重用的自定义钩子。
- en: Understanding custom hooks
  id: totrans-351
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解自定义钩子
- en: As well as standard hooks such as `useState`, React allows us to create our
    own custom hooks. Custom hooks allow logic to be isolated and reused across multiple
    components.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 `useState` 等标准钩子之外，React 允许我们创建自己的自定义钩子。自定义钩子允许逻辑在多个组件之间隔离和重用。
- en: 'A custom hook is defined using a function with a name that starts with the
    word *use*. This naming convention helps ESLint check for problems with the use
    of the custom hook. Here’s a custom hook that provides toggling logic:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义钩子是通过一个以单词 *use* 开头的函数定义的。这种命名约定有助于 ESLint 检查自定义钩子使用中存在的问题。以下是一个提供切换逻辑的自定义钩子：
- en: '[PRE207]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE207]'
- en: The custom hook contains the state of the current toggle value, which is either
    `true` or `false`. It also includes a function called `toggle`, which toggles
    the current value. The current toggle value and the `toggle` function are returned
    from the custom hook in an object structure.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义钩子包含当前切换值的状态，该值可以是 `true` 或 `false`。它还包括一个名为 `toggle` 的函数，该函数切换当前值。当前切换值和
    `toggle` 函数以对象结构从自定义钩子返回。
- en: Note that an object structure doesn’t have to be returned. If the custom hook
    only returns a single item, then that item can be returned directly. If the custom
    hook returns two things (as in the preceding example), it can return a tuple (as
    `useState` does). An object structure is better for more than two items because
    the object keys make it clear what each item is.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，不需要返回对象结构。如果自定义钩子只返回一个项目，则可以直接返回该项目。如果自定义钩子返回两个项目（如前例所示），则可以返回一个元组（如 `useState`
    所做的那样）。对于两个以上的项目，对象结构更好，因为对象键可以清楚地说明每个项目是什么。
- en: Another trait of a custom hook is that it uses other standard React hooks. For
    example, the `useToggle` custom hook uses `useState`. If the custom hook doesn’t
    call a React hook or another custom hook, it’s just a regular function rather
    than a custom hook.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义钩子的另一个特性是它使用了其他标准 React 钩子。例如，`useToggle` 自定义钩子使用了 `useState`。如果自定义钩子没有调用
    React 钩子或另一个自定义钩子，它就只是一个普通函数，而不是自定义钩子。
- en: 'This custom hook can then be used in the implementation of a component as follows:'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 这个自定义钩子可以在组件的实现中如下使用：
- en: '[PRE208]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE208]'
- en: The toggle value (`toggleValue`) and the `toggle` function are destructured
    from the return value of the custom hook. The toggle value is used to render text
    `true` or `false`. The `toggle` function is also assigned to the click handler
    of the button.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 从自定义钩子的返回值中解构出切换值（`toggleValue`）和`toggle`函数。切换值用于渲染文本`true`或`false`。`toggle`函数也被分配给按钮的点击处理函数。
- en: 'Custom hooks can take in parameters as well. In the example here, we have added
    a default value in the `useToggle` hook:'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义钩子也可以接受参数。在这个例子中，我们在`useToggle`钩子中添加了一个默认值：
- en: '[PRE209]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE209]'
- en: In the preceding example, the parameters are in an object structure. An object
    structure is nice when there are multiple parameters and nothing breaks when new
    parameters are added.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，参数以对象结构形式存在。当有多个参数时，对象结构很方便，并且添加新参数时不会出问题。
- en: 'Arguments are passed into the custom hook in an object. Here’s an example of
    using `useToggle` with its value initially being `true`:'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 参数以对象的形式传递到自定义钩子中。以下是一个使用`useToggle`的示例，其初始值为`true`：
- en: '[PRE210]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE210]'
- en: Now that we understand how to create and use custom hooks, we will put this
    into practice in our checklist component.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了如何创建和使用自定义钩子，我们将在我们的清单组件中将其付诸实践。
- en: Extracting checked logic into a custom hook
  id: totrans-367
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将勾选逻辑提取到自定义钩子中
- en: We will extract the logic for checked items into a custom hook. This will allow
    potential future components to use the logic and clean up the code a little.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把勾选项的逻辑提取到一个自定义钩子中。这将允许未来的组件使用这个逻辑，并使代码更加整洁。
- en: The custom hook will be called `useChecked` and will contain the state for the
    checked list item IDs. The hook will also include a handler that can be attached
    to the checkboxes, updating the checked list item ID’s state.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义钩子将被命名为`useChecked`，并将包含勾选列表项ID的状态。钩子还将包括一个可以附加到复选框的处理函数，以更新勾选列表项ID的状态。
- en: 'To do this, carry out the following steps:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，请执行以下步骤：
- en: In the `Checklist` folder, create a file for the custom hook called `useChecked.ts`.
  id: totrans-371
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Checklist`文件夹中，创建一个名为`useChecked.ts`的自定义钩子文件。
- en: 'Open `useChecked.ts` and add the following `import` statements:'
  id: totrans-372
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`useChecked.ts`并添加以下`import`语句：
- en: '[PRE211]'
  id: totrans-373
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE211]'
- en: '[PRE212]'
  id: totrans-374
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE212]'
- en: The hook will use React state that is typed using `IdValue`.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 该钩子将使用通过`IdValue`类型化的React状态。
- en: 'Start to implement the function for the custom hook by initializing the state:'
  id: totrans-376
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开始实现自定义钩子的函数，通过初始化状态：
- en: '[PRE213]'
  id: totrans-377
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE213]'
- en: '[PRE214]'
  id: totrans-378
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE214]'
- en: '[PRE215]'
  id: totrans-379
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE215]'
- en: The hook doesn’t have any parameters. The `useState` call is exactly the same
    as the one currently in the `Checklist` component – this could be copied and pasted
    into the custom hook.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 该钩子没有任何参数。`useState`的调用与当前`Checklist`组件中的调用完全相同——这可以复制粘贴到自定义钩子中。
- en: 'Add a checked handler to the custom hook. This can be copied from the implementation
    of the `Checklist` component:'
  id: totrans-381
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向自定义钩子添加一个勾选处理函数。这可以从`Checklist`组件的实现中复制：
- en: '[PRE216]'
  id: totrans-382
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE216]'
- en: '[PRE217]'
  id: totrans-383
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE217]'
- en: '[PRE218]'
  id: totrans-384
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE218]'
- en: '[PRE219]'
  id: totrans-385
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE219]'
- en: '[PRE220]'
  id: totrans-386
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE220]'
- en: '[PRE221]'
  id: totrans-387
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE221]'
- en: '[PRE222]'
  id: totrans-388
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE222]'
- en: '[PRE223]'
  id: totrans-389
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE223]'
- en: '[PRE224]'
  id: totrans-390
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE224]'
- en: '[PRE225]'
  id: totrans-391
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE225]'
- en: '[PRE226]'
  id: totrans-392
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE226]'
- en: '[PRE227]'
  id: totrans-393
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE227]'
- en: 'The last task in the custom hook implementation is to return the checked IDs
    and the handler function:'
  id: totrans-394
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 自定义钩子实现中的最后一个任务是返回勾选ID和处理函数：
- en: '[PRE228]'
  id: totrans-395
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE228]'
- en: '[PRE229]'
  id: totrans-396
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE229]'
- en: '[PRE230]'
  id: totrans-397
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE230]'
- en: '[PRE231]'
  id: totrans-398
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE231]'
- en: Next, open `Checklist.tsx` and remove the state definition and the `handleCheckChange`
    handler function. Also, remove `useState` and `IdValue` from the `import` statements,
    as they are redundant.
  id: totrans-399
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，打开`Checklist.tsx`并移除状态定义和`handleCheckChange`处理函数。同时，从`import`语句中移除`useState`和`IdValue`，因为它们是多余的。
- en: 'Still in `Checklist.tsx`, import the `useChecked` hook we just created:'
  id: totrans-400
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仍然在`Checklist.tsx`中，导入我们刚刚创建的`useChecked`钩子：
- en: '[PRE232]'
  id: totrans-401
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE232]'
- en: 'Add a call to `useChecked` and destructure the checked IDs and the handler
    function:'
  id: totrans-402
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用`useChecked`并解构勾选ID和处理函数：
- en: '[PRE233]'
  id: totrans-403
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE233]'
- en: '[PRE234]'
  id: totrans-404
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE234]'
- en: '[PRE235]'
  id: totrans-405
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE235]'
- en: '[PRE236]'
  id: totrans-406
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE236]'
- en: If the app isn’t running, run it by entering `npm start` in the terminal. The
    checklist component will appear and behave as it did before we made these changes.
  id: totrans-407
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果应用没有运行，请在终端中输入`npm start`来运行它。清单组件将出现并像我们做出这些更改之前一样表现。
- en: 'That completes the implementation and use of the custom hook. To recap, here
    are some key points:'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 这样就完成了自定义钩子的实现和使用。总结一下，以下是一些关键点：
- en: Custom hooks make code a little cleaner and are reusable because they isolate
    logic, which can be complex.
  id: totrans-409
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义钩子使代码更加整洁，并且由于它们隔离了逻辑，因此是可重用的。
- en: Custom hooks must start with `use`.
  id: totrans-410
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义钩子必须以`use`开头。
- en: Custom hooks must use a standard React hook or another custom hook.
  id: totrans-411
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义钩子必须使用标准的React钩子或另一个自定义钩子。
- en: A custom hook is just a function that returns useful things for components to
    use. Using an object structure for the returned items is ideal when returning
    many items because the object keys make it clear what each item is.
  id: totrans-412
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义钩子只是一个返回组件可以使用的有用东西的函数。当返回许多项目时，使用对象结构是理想的，因为对象键清楚地说明了每个项目是什么。
- en: A custom hook can have parameters. Using an object structure for the parameters
    is ideal for many items and doesn’t break anything when new parameters are added.
  id: totrans-413
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义钩子可以有参数。使用对象结构作为参数对于许多项目来说很理想，并且当添加新参数时不会破坏任何东西。
- en: Next, we will cover a pattern that will allow the consumer of a component to
    control some of its behavior with the state.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将介绍一个模式，允许组件的消费者使用状态来控制其部分行为。
- en: Allowing the internal state to be controlled
  id: totrans-415
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 允许控制内部状态
- en: In this section, we’ll learn how to allow consumers of a component to control
    its internal state. We will use this pattern in the checklist component so that
    users can check just a single item.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何允许组件的消费者控制其内部状态。我们将在清单组件中使用此模式，以便用户可以只检查单个项目。
- en: Understanding how the internal state can be controlled
  id: totrans-417
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解如何控制内部状态
- en: Allowing consumers of a component to control the state allows the behavior of
    a component to be tweaked if that behavior is driven by the state. Let’s go through
    an example using the `useToggle` custom hook we covered in the last section when
    learning about custom hooks.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 允许组件的消费者控制状态可以使组件的行为根据状态进行调整。让我们通过一个例子来了解，这个例子使用了我们在上一节学习自定义钩子时提到的`useToggle`自定义钩子。
- en: 'Two additional props are required to allow the internal state to be controlled
    – one for the current state value and one for a change handler. These additional
    props are `toggleValue` and `onToggleValueChange` in `useToggle`:'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 需要额外的两个属性来允许控制内部状态——一个用于当前状态值，另一个用于变化处理器。这些额外的属性在`useToggle`中是`toggleValue`和`onToggleValueChange`：
- en: '[PRE237]'
  id: totrans-420
  prefs: []
  type: TYPE_PRE
  zh: '[PRE237]'
- en: These props are marked as optional because this pattern doesn’t force the consumer
    of the component to control the state – it’s a feature they can opt in to.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 这些属性被标记为可选，因为此模式并不强制组件的消费者控制状态——这是一个他们可以选择加入的功能。
- en: Note
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The consumer of the component will never specify both `defaultToggleValue` and
    `toggleValue`. `defaultToggleValue` should only be used when the consumer doesn’t
    want to control `toggleValue` with the state. When the consumer does want to control
    `toggleValue` with the state, they can set the initial value of their state.
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 组件的消费者永远不会同时指定`defaultToggleValue`和`toggleValue`。`defaultToggleValue`仅在消费者不想使用状态来控制`toggleValue`时使用。当消费者想要使用状态来控制`toggleValue`时，他们可以设置他们状态的初始值。
- en: 'The `toggleValue` prop now clashes with the `toggleValue` state because they
    have the same name, so the state needs to be renamed:'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 现在`toggleValue`属性与`toggleValue`状态冲突，因为它们有相同的名称，因此需要将状态重命名：
- en: '[PRE238]'
  id: totrans-425
  prefs: []
  type: TYPE_PRE
  zh: '[PRE238]'
- en: 'The default value of the internal state now needs to consider that there might
    be a prop controlling the state:'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 内部状态的默认值现在需要考虑可能存在控制状态的属性：
- en: '[PRE239]'
  id: totrans-427
  prefs: []
  type: TYPE_PRE
  zh: '[PRE239]'
- en: 'When the state is changed, the change handler is called, if it has been defined:'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 当状态改变时，如果已定义变化处理器，则会被调用：
- en: '[PRE240]'
  id: totrans-429
  prefs: []
  type: TYPE_PRE
  zh: '[PRE240]'
- en: Again, it’s important that we still update the internal state in case the consumer
    isn’t controlling the state.
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，即使消费者没有控制状态，我们也需要更新内部状态。
- en: 'The last step in implementing this pattern is to update the internal state
    when the controlled state is updated. We can do this with `useEffect` as follows:'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 实现此模式时的最后一步是在受控状态更新时更新内部状态。我们可以使用`useEffect`来完成此操作：
- en: '[PRE241]'
  id: totrans-432
  prefs: []
  type: TYPE_PRE
  zh: '[PRE241]'
- en: The effect is triggered when the state prop changes. We check whether the state
    prop is being controlled; if so, the internal state is updated with its value.
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 当状态属性改变时，会触发效果。我们检查状态属性是否正在被控制；如果是，则使用其值更新内部状态。
- en: 'Here’s an example of controlling `toggleValue` in `useToggle`:'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个在`useToggle`中控制`toggleValue`的例子：
- en: '[PRE242]'
  id: totrans-435
  prefs: []
  type: TYPE_PRE
  zh: '[PRE242]'
- en: This example stores the toggle value in its own state and passes it to `useToggle`.
    `onToggleValueChange` is handled by updating the state value. The logic for setting
    the state value only allows it to be `true` up to three times.
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例将切换值存储在其自己的状态中，并将其传递给`useToggle`。`onToggleValueChange`通过更新状态值来处理。仅允许状态值设置为`true`最多三次的逻辑。
- en: So, this use case has overridden the default behavior of the toggle so that
    it can only be set to `true` up to three times.
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这个用例已经覆盖了切换的默认行为，使其只能设置为`true`最多三次。
- en: Now that we understand how to allow the internal state to be controlled, we
    will use it in our checklist component.
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了如何允许内部状态受控，我们将在清单组件中使用它。
- en: Allowing checkedIds to be controlled
  id: totrans-439
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 允许`checkedIds`受控
- en: At the moment, our checklist component allows many items to be selected. If
    we allow the `checkedIds` state to be controlled by the consumer, they can change
    the checklist component so that they can select just a single item.
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们的清单组件允许选择多个项目。如果我们允许`checkedIds`状态由消费者控制，他们可以更改清单组件，以便他们只能选择单个项目。
- en: 'So, carry out the following steps:'
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，执行以下步骤：
- en: 'We will start in `useChecked.ts`. Add `useEffect` to the React `import` statement:'
  id: totrans-442
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将从`useChecked.ts`开始。向React `import`语句添加`useEffect`：
- en: '[PRE243]'
  id: totrans-443
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE243]'
- en: 'Add new parameters for the controlled checked IDs and the change handler:'
  id: totrans-444
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为受控的选中ID和更改处理程序添加新参数：
- en: '[PRE244]'
  id: totrans-445
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE244]'
- en: '[PRE245]'
  id: totrans-446
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE245]'
- en: '[PRE246]'
  id: totrans-447
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE246]'
- en: '[PRE247]'
  id: totrans-448
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE247]'
- en: '[PRE248]'
  id: totrans-449
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE248]'
- en: '[PRE249]'
  id: totrans-450
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE249]'
- en: '[PRE250]'
  id: totrans-451
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE250]'
- en: '[PRE251]'
  id: totrans-452
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE251]'
- en: '[PRE252]'
  id: totrans-453
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE252]'
- en: '[PRE253]'
  id: totrans-454
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE253]'
- en: 'Update the internal state name to `resolvedCheckedIds` and default it to the
    passed-in `checkedIds` parameter if defined:'
  id: totrans-455
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新内部状态名称为`resolvedCheckedIds`，并在定义的情况下将其默认为传入的`checkedIds`参数：
- en: '[PRE254]'
  id: totrans-456
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE254]'
- en: '[PRE255]'
  id: totrans-457
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE255]'
- en: '[PRE256]'
  id: totrans-458
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE256]'
- en: '[PRE257]'
  id: totrans-459
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE257]'
- en: '[PRE258]'
  id: totrans-460
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE258]'
- en: '[PRE259]'
  id: totrans-461
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE259]'
- en: '[PRE260]'
  id: totrans-462
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE260]'
- en: '[PRE261]'
  id: totrans-463
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE261]'
- en: '[PRE262]'
  id: totrans-464
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE262]'
- en: '[PRE263]'
  id: totrans-465
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE263]'
- en: '[PRE264]'
  id: totrans-466
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE264]'
- en: '[PRE265]'
  id: totrans-467
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE265]'
- en: '[PRE266]'
  id: totrans-468
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE266]'
- en: '[PRE267]'
  id: totrans-469
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE267]'
- en: '[PRE268]'
  id: totrans-470
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE268]'
- en: '[PRE269]'
  id: totrans-471
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE269]'
- en: '[PRE270]'
  id: totrans-472
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE270]'
- en: 'Update the `handleCheckChange` handler to call the passed-in change handler
    if defined:'
  id: totrans-473
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`handleCheckChange`处理程序以在定义的情况下调用传入的更改处理程序：
- en: '[PRE271]'
  id: totrans-474
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE271]'
- en: '[PRE272]'
  id: totrans-475
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE272]'
- en: '[PRE273]'
  id: totrans-476
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE273]'
- en: '[PRE274]'
  id: totrans-477
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE274]'
- en: '[PRE275]'
  id: totrans-478
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE275]'
- en: '[PRE276]'
  id: totrans-479
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE276]'
- en: '[PRE277]'
  id: totrans-480
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE277]'
- en: '[PRE278]'
  id: totrans-481
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE278]'
- en: '[PRE279]'
  id: totrans-482
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE279]'
- en: '[PRE280]'
  id: totrans-483
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE280]'
- en: '[PRE281]'
  id: totrans-484
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE281]'
- en: '[PRE282]'
  id: totrans-485
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE282]'
- en: '[PRE283]'
  id: totrans-486
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE283]'
- en: 'The last task in `useCheck.ts` is to synchronize the controlled checked IDs
    with the internal state. Add the following `useEffect` hook to achieve this:'
  id: totrans-487
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`useCheck.ts`中的最后一个任务是同步受控的选中ID与内部状态。添加以下`useEffect`钩子以实现此目的：
- en: '[PRE284]'
  id: totrans-488
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE284]'
- en: '[PRE285]'
  id: totrans-489
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE285]'
- en: '[PRE286]'
  id: totrans-490
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE286]'
- en: '[PRE287]'
  id: totrans-491
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE287]'
- en: '[PRE288]'
  id: totrans-492
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE288]'
- en: '[PRE289]'
  id: totrans-493
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE289]'
- en: 'Now, open `Checklist.tsx` and import the `IdValue` type:'
  id: totrans-494
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开`Checklist.tsx`并导入`IdValue`类型：
- en: '[PRE290]'
  id: totrans-495
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE290]'
- en: 'Add the new props for the controlled checked IDs and the change handler:'
  id: totrans-496
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为受控的选中ID和更改处理程序添加新props：
- en: '[PRE291]'
  id: totrans-497
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE291]'
- en: '[PRE292]'
  id: totrans-498
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE292]'
- en: '[PRE293]'
  id: totrans-499
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE293]'
- en: '[PRE294]'
  id: totrans-500
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE294]'
- en: '[PRE295]'
  id: totrans-501
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE295]'
- en: '[PRE296]'
  id: totrans-502
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE296]'
- en: '[PRE297]'
  id: totrans-503
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE297]'
- en: '[PRE298]'
  id: totrans-504
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE298]'
- en: '[PRE299]'
  id: totrans-505
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE299]'
- en: '[PRE300]'
  id: totrans-506
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE300]'
- en: '[PRE301]'
  id: totrans-507
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE301]'
- en: '[PRE302]'
  id: totrans-508
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE302]'
- en: '[PRE303]'
  id: totrans-509
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE303]'
- en: '[PRE304]'
  id: totrans-510
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE304]'
- en: '[PRE305]'
  id: totrans-511
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE305]'
- en: '[PRE306]'
  id: totrans-512
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE306]'
- en: '[PRE307]'
  id: totrans-513
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE307]'
- en: '[PRE308]'
  id: totrans-514
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE308]'
- en: '[PRE309]'
  id: totrans-515
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE309]'
- en: 'Pass these props to `useChecked` and rename the destructured `checkedIds` variable
    `resolvedCheckedIds`:'
  id: totrans-516
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将这些props传递给`useChecked`并将解构的`checkedIds`变量重命名为`resolvedCheckedIds`：
- en: '[PRE310]'
  id: totrans-517
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE310]'
- en: '[PRE311]'
  id: totrans-518
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE311]'
- en: '[PRE312]'
  id: totrans-519
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE312]'
- en: '[PRE313]'
  id: totrans-520
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE313]'
- en: '[PRE314]'
  id: totrans-521
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE314]'
- en: '[PRE315]'
  id: totrans-522
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE315]'
- en: '[PRE316]'
  id: totrans-523
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE316]'
- en: '[PRE317]'
  id: totrans-524
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE317]'
- en: '[PRE318]'
  id: totrans-525
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE318]'
- en: '[PRE319]'
  id: totrans-526
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE319]'
- en: '[PRE320]'
  id: totrans-527
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE320]'
- en: '[PRE321]'
  id: totrans-528
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE321]'
- en: '[PRE322]'
  id: totrans-529
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE322]'
- en: '[PRE323]'
  id: totrans-530
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE323]'
- en: '[PRE324]'
  id: totrans-531
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE324]'
- en: '[PRE325]'
  id: totrans-532
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE325]'
- en: '[PRE326]'
  id: totrans-533
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE326]'
- en: '[PRE327]'
  id: totrans-534
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE327]'
- en: '[PRE328]'
  id: totrans-535
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE328]'
- en: '[PRE329]'
  id: totrans-536
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE329]'
- en: '[PRE330]'
  id: totrans-537
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE330]'
- en: '[PRE331]'
  id: totrans-538
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE331]'
- en: '[PRE332]'
  id: totrans-539
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE332]'
- en: 'Open `index.ts` in the `Checklist` folder. Export the `IdValue` type because
    consumers of the component can now pass in `checkedIds`, which is an array of
    this type:'
  id: totrans-540
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“清单”文件夹中打开`index.ts`文件。导出`IdValue`类型，因为组件的消费者现在可以传入`checkedIds`，这是一个该类型的数组：
- en: '[PRE333]'
  id: totrans-541
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE333]'
- en: The `type` keyword after the `export` statement is required by TypeScript when
    exporting a named type already exported from the referenced file.
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: 在`export`语句之后的`type`关键字是TypeScript在导出已从引用文件中导出的命名类型时必需的。
- en: 'Now, open `App.tsx` and import `useState` from React, as well as the `IdValue`
    type:'
  id: totrans-543
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开`App.tsx`并从React导入`useState`，以及`IdValue`类型：
- en: '[PRE334]'
  id: totrans-544
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE334]'
- en: '[PRE335]'
  id: totrans-545
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE335]'
- en: '[PRE336]'
  id: totrans-546
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE336]'
- en: '[PRE337]'
  id: totrans-547
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE337]'
- en: '[PRE338]'
  id: totrans-548
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE338]'
- en: 'Define the state in the `App` component for the single checked ID:'
  id: totrans-549
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`App`组件中定义状态以用于单个选中ID：
- en: '[PRE339]'
  id: totrans-550
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE339]'
- en: '[PRE340]'
  id: totrans-551
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE340]'
- en: '[PRE341]'
  id: totrans-552
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE341]'
- en: '[PRE342]'
  id: totrans-553
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE342]'
- en: '[PRE343]'
  id: totrans-554
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE343]'
- en: '[PRE344]'
  id: totrans-555
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE344]'
- en: The state is `null` when there is no checked item. This can’t be set to `undefined`
    because `Checklist` will think `checkedIds` is uncontrolled.
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: 当没有选中项时，状态是`null`。这不能设置为`undefined`，因为`Checklist`会认为`checkedIds`是未受控的。
- en: 'Create a handler for when an item is checked:'
  id: totrans-557
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个当项目被选中时的处理程序：
- en: '[PRE345]'
  id: totrans-558
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE345]'
- en: '[PRE346]'
  id: totrans-559
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE346]'
- en: '[PRE347]'
  id: totrans-560
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE347]'
- en: '[PRE348]'
  id: totrans-561
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE348]'
- en: '[PRE349]'
  id: totrans-562
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE349]'
- en: '[PRE350]'
  id: totrans-563
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE350]'
- en: '[PRE351]'
  id: totrans-564
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE351]'
- en: '[PRE352]'
  id: totrans-565
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE352]'
- en: '[PRE353]'
  id: totrans-566
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE353]'
- en: '[PRE354]'
  id: totrans-567
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE354]'
- en: The handler stores the checked ID in the state or sets the state to `null` if
    the checked item has been unchecked.
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: 处理程序将选中ID存储在状态中，或者在选中项被取消选中时将状态设置为`null`。
- en: 'Pass the checked ID and the change handler to the `Checklist` element as follows:'
  id: totrans-569
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按如下方式将选中ID和更改处理程序传递给`Checklist`元素：
- en: '[PRE355]'
  id: totrans-570
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE355]'
- en: '[PRE356]'
  id: totrans-571
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE356]'
- en: '[PRE357]'
  id: totrans-572
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE357]'
- en: '[PRE358]'
  id: totrans-573
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE358]'
- en: '[PRE359]'
  id: totrans-574
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE359]'
- en: Let’s give this a try. If the app isn’t running, run it by entering `npm start`
    in the terminal. You will find that only a single list item can be checked.
  id: totrans-575
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们试一试。如果应用没有运行，请在终端中输入`npm start`来运行它。你会发现只能选中单个列表项。
- en: 'That completes this section on allowing the internal state to be controlled.
    Here’s a recap:'
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: 这样就完成了关于允许内部状态受控的部分。以下是一个总结：
- en: This pattern is useful because it changes the component’s behavior
  id: totrans-577
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这种模式很有用，因为它改变了组件的行为
- en: The component must expose a prop to control the state value and another for
    its change handler
  id: totrans-578
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组件必须公开一个prop来控制状态值，另一个用于其更改处理程序
- en: Internally, the component still manages the state and synchronizes it with the
    consumer’s using `useEffect`
  id: totrans-579
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内部，组件仍然管理状态，并使用`useEffect`与消费者同步
- en: If the state is controlled, the consumer’s change handler is called in the internal
    change handler
  id: totrans-580
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果状态是受控的，则调用消费者的更改处理程序在内部更改处理程序中
- en: Summary
  id: totrans-581
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: In this chapter, we created a reusable checklist component and used many useful
    patterns along the way.
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们创建了一个可重用的清单组件，并在过程中使用了许多有用的模式。
- en: We started by learning how to implement generic props, which allow a component
    to be used with varying data types but still be strongly typed. We used this to
    allow varying data to be passed into the checklist component without sacrificing
    type safety.
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先学习了如何实现泛型属性，这允许组件使用不同的数据类型，但仍然保持强类型。我们使用它来允许将不同的数据传递到清单组件中，而不牺牲类型安全。
- en: We learned how to allow consumers of a component to spread props onto an internal
    element. A common use case is spreading props onto the internal container element
    to allow the consumer to size it, which is what we did with the checklist component.
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学习了如何允许组件的消费者将属性传播到内部元素。一个常见的用例是将属性传播到内部容器元素，以允许消费者调整其大小，这正是我们在清单组件中所做的。
- en: The render prop pattern is one of the most useful patterns when developing reusable
    components. We learned that it allows the consumer to take responsibility for
    rendering parts of the component. We used this pattern to override the rendering
    of list items in our checklist component.
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染属性模式是开发可重用组件时最有用的模式之一。我们了解到它允许消费者负责渲染组件的部分。我们使用这个模式来覆盖我们的清单组件中列表项的渲染。
- en: Custom hooks isolate logic and are useful for sharing logic across components
    and keeping the code within a component clean. Custom hooks must call a standard
    React hook directly or indirectly. We extracted the checked logic from our checklist
    component into a custom hook.
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义钩子隔离逻辑，对于在组件之间共享逻辑并保持组件内的代码整洁非常有用。自定义钩子必须直接或间接地调用标准 React 钩子。我们将我们的清单组件中的选中逻辑提取到一个自定义钩子中。
- en: The last pattern we learned about was allowing a component’s internal state
    to be controlled. This powerful pattern allows the consumer of the component to
    tweak its behavior. We used this to only allow a single list item to be checked
    in our checklist component.
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最后学习的是允许组件的内部状态被控制。这个强大的模式允许组件的消费者调整其行为。我们使用这个模式来只允许在我们的清单组件中检查单个列表项。
- en: In the next chapter, we will learn how to write automated tests for React components.
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何为 React 组件编写自动化测试。
- en: Questions
  id: totrans-589
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'Answer the following questions to check what you have learned in this chapter:'
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: 回答以下问题以检查你在本章中学到的内容：
- en: 'The snippet of the following component renders options and one can be selected:'
  id: totrans-591
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下组件的片段渲染了选项，可以选择其中一个：
- en: '[PRE360]'
  id: totrans-592
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE360]'
- en: '[PRE361]'
  id: totrans-593
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE361]'
- en: '[PRE362]'
  id: totrans-594
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE362]'
- en: '[PRE363]'
  id: totrans-595
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE363]'
- en: '[PRE364]'
  id: totrans-596
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE364]'
- en: '[PRE365]'
  id: totrans-597
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE365]'
- en: '[PRE366]'
  id: totrans-598
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE366]'
- en: '[PRE367]'
  id: totrans-599
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE367]'
- en: '[PRE368]'
  id: totrans-600
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE368]'
- en: '[PRE369]'
  id: totrans-601
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE369]'
- en: '[PRE370]'
  id: totrans-602
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE370]'
- en: '[PRE371]'
  id: totrans-603
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE371]'
- en: 'The following TypeScript error is raised on the component props parameter though:
    **Cannot find name ‘TOption’**. What is the problem?'
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在组件的属性参数上抛出了以下 TypeScript 错误：**找不到名称‘TOption’**。问题是什么？
- en: The `value` and `label` props from the component in *question 1* should only
    be set to a property name in the `options` value. What type can we give `value`
    and `label` so that TypeScript includes them in its type checking?
  id: totrans-605
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在问题 1 中的组件的 `value` 和 `label` 属性应该只设置为 `options` 值中的属性名。我们可以给 `value` 和 `label`
    什么类型，以便 TypeScript 在类型检查中包含它们？
- en: 'A prop called `option` has been added to the `Select` component from the previous
    question as follows:'
  id: totrans-606
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在前一个问题中的 `Select` 组件中添加了一个名为 `option` 的属性，如下所示：
- en: '[PRE372]'
  id: totrans-607
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE372]'
- en: '[PRE373]'
  id: totrans-608
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE373]'
- en: '[PRE374]'
  id: totrans-609
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE374]'
- en: '[PRE375]'
  id: totrans-610
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE375]'
- en: '[PRE376]'
  id: totrans-611
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE376]'
- en: '[PRE377]'
  id: totrans-612
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE377]'
- en: '[PRE378]'
  id: totrans-613
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE378]'
- en: '[PRE379]'
  id: totrans-614
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE379]'
- en: '[PRE380]'
  id: totrans-615
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE380]'
- en: '[PRE381]'
  id: totrans-616
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE381]'
- en: '[PRE382]'
  id: totrans-617
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE382]'
- en: '[PRE383]'
  id: totrans-618
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE383]'
- en: '[PRE384]'
  id: totrans-619
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE384]'
- en: '[PRE385]'
  id: totrans-620
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE385]'
- en: '[PRE386]'
  id: totrans-621
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE386]'
- en: '[PRE387]'
  id: totrans-622
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE387]'
- en: '[PRE388]'
  id: totrans-623
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE388]'
- en: '[PRE389]'
  id: totrans-624
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE389]'
- en: '[PRE390]'
  id: totrans-625
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE390]'
- en: '[PRE391]'
  id: totrans-626
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE391]'
- en: '`option` is supposed to allow the consumer of the component to override the
    rendering of the options. Can you spot the flaw in the implementation?'
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
  zh: '`option` 应该允许组件的消费者覆盖选项的渲染。你能发现实现中的缺陷吗？'
- en: 'The following is a `Field` component that renders a `label` element and an
    `input` element:'
  id: totrans-628
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下是一个渲染 `label` 元素和 `input` 元素的 `Field` 组件：
- en: '[PRE392]'
  id: totrans-629
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE392]'
- en: '[PRE393]'
  id: totrans-630
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE393]'
- en: '[PRE394]'
  id: totrans-631
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE394]'
- en: '[PRE395]'
  id: totrans-632
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE395]'
- en: '[PRE396]'
  id: totrans-633
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE396]'
- en: '[PRE397]'
  id: totrans-634
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE397]'
- en: '[PRE398]'
  id: totrans-635
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE398]'
- en: '[PRE399]'
  id: totrans-636
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE399]'
- en: '[PRE400]'
  id: totrans-637
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE400]'
- en: '[PRE401]'
  id: totrans-638
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE401]'
- en: '[PRE402]'
  id: totrans-639
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE402]'
- en: There is a problem with the implementation though – can you spot it?
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然存在一个问题——你能发现它吗？
- en: How could the consumer specify props to spread onto the `label` element in the
    `Field` component from the previous question? Note that we still want the consumer
    to spread props onto the `input` element.
  id: totrans-641
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 消费者如何指定要传播到前一个问题中的 `Field` 组件中的 `label` 元素的属性？注意我们仍然希望消费者将属性传播到 `input` 元素。
- en: 'A custom hook has been added to the `Field` component from the previous question.
    The custom hook is called `useValid`, which validates that the field has been
    filled in with something:'
  id: totrans-642
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在前一个问题中的 `Field` 组件中添加了一个自定义钩子。这个自定义钩子被命名为 `useValid`，它验证字段是否已填充：
- en: '[PRE403]'
  id: totrans-643
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE403]'
- en: '[PRE404]'
  id: totrans-644
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE404]'
- en: '[PRE405]'
  id: totrans-645
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE405]'
- en: '[PRE406]'
  id: totrans-646
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE406]'
- en: '[PRE407]'
  id: totrans-647
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE407]'
- en: '[PRE408]'
  id: totrans-648
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE408]'
- en: '[PRE409]'
  id: totrans-649
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE409]'
- en: '[PRE410]'
  id: totrans-650
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE410]'
- en: '[PRE411]'
  id: totrans-651
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE411]'
- en: '[PRE412]'
  id: totrans-652
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE412]'
- en: '[PRE413]'
  id: totrans-653
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE413]'
- en: '[PRE414]'
  id: totrans-654
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE414]'
- en: '[PRE415]'
  id: totrans-655
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE415]'
- en: '[PRE416]'
  id: totrans-656
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE416]'
- en: '[PRE417]'
  id: totrans-657
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE417]'
- en: '[PRE418]'
  id: totrans-658
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE418]'
- en: '[PRE419]'
  id: totrans-659
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE419]'
- en: '[PRE420]'
  id: totrans-660
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE420]'
- en: '[PRE421]'
  id: totrans-661
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE421]'
- en: '[PRE422]'
  id: totrans-662
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE422]'
- en: '[PRE423]'
  id: totrans-663
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE423]'
- en: '[PRE424]'
  id: totrans-664
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE424]'
- en: '[PRE425]'
  id: totrans-665
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE425]'
- en: '[PRE426]'
  id: totrans-666
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE426]'
- en: What is wrong with the implementation?
  id: totrans-667
  prefs: []
  type: TYPE_NORMAL
  zh: 实现有什么问题？
- en: How many render props can a function component have?
  id: totrans-668
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 函数组件可以有多少个渲染属性？
- en: Answers
  id: totrans-669
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 答案
- en: 'The generic type must be defined in the component function as well as the prop:'
  id: totrans-670
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 泛型类型必须在组件函数以及属性中定义：
- en: '[PRE427]'
  id: totrans-671
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE427]'
- en: '[PRE428]'
  id: totrans-672
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE428]'
- en: '[PRE429]'
  id: totrans-673
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE429]'
- en: '[PRE430]'
  id: totrans-674
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE430]'
- en: '[PRE431]'
  id: totrans-675
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE431]'
- en: '[PRE432]'
  id: totrans-676
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE432]'
- en: '[PRE433]'
  id: totrans-677
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE433]'
- en: 'The `keyof` operator can be used to ensure `value` and `label` are keys in
    `options`:'
  id: totrans-678
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`keyof`运算符可以用来确保`value`和`label`是`options`中的键：'
- en: '[PRE434]'
  id: totrans-679
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE434]'
- en: '[PRE435]'
  id: totrans-680
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE435]'
- en: '[PRE436]'
  id: totrans-681
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE436]'
- en: '[PRE437]'
  id: totrans-682
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE437]'
- en: '[PRE438]'
  id: totrans-683
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE438]'
- en: 'The consumer is likely to need the data for the option, so the prop should
    be a function containing the data as a parameter:'
  id: totrans-684
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 消费者可能需要选项的数据，因此属性应该是一个包含数据作为参数的函数：
- en: '[PRE439]'
  id: totrans-685
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE439]'
- en: '[PRE440]'
  id: totrans-686
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE440]'
- en: '[PRE441]'
  id: totrans-687
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE441]'
- en: '[PRE442]'
  id: totrans-688
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE442]'
- en: '[PRE443]'
  id: totrans-689
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE443]'
- en: '[PRE444]'
  id: totrans-690
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE444]'
- en: '[PRE445]'
  id: totrans-691
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE445]'
- en: '[PRE446]'
  id: totrans-692
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE446]'
- en: '[PRE447]'
  id: totrans-693
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE447]'
- en: '[PRE448]'
  id: totrans-694
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE448]'
- en: '[PRE449]'
  id: totrans-695
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE449]'
- en: '[PRE450]'
  id: totrans-696
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE450]'
- en: '[PRE451]'
  id: totrans-697
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE451]'
- en: '[PRE452]'
  id: totrans-698
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE452]'
- en: '[PRE453]'
  id: totrans-699
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE453]'
- en: '[PRE454]'
  id: totrans-700
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE454]'
- en: '[PRE455]'
  id: totrans-701
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE455]'
- en: '[PRE456]'
  id: totrans-702
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE456]'
- en: '[PRE457]'
  id: totrans-703
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE457]'
- en: '[PRE458]'
  id: totrans-704
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE458]'
- en: '[PRE459]'
  id: totrans-705
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE459]'
- en: 'There is a syntax error because the rest parameter is the first parameter.
    The rest parameter must be the last one:'
  id: totrans-706
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 存在语法错误，因为剩余参数是第一个参数。剩余参数必须是最后一个：
- en: '[PRE460]'
  id: totrans-707
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE460]'
- en: '[PRE461]'
  id: totrans-708
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE461]'
- en: '[PRE462]'
  id: totrans-709
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE462]'
- en: 'A `labelProps` prop could be added using the `ComponentPropsWithoutRef` type.
    This could then be spread onto the `label` element:'
  id: totrans-710
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以使用`ComponentPropsWithoutRef`类型添加`labelProps`属性。然后可以将这些属性展开到`label`元素上：
- en: '[PRE463]'
  id: totrans-711
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE463]'
- en: '[PRE464]'
  id: totrans-712
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE464]'
- en: '[PRE465]'
  id: totrans-713
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE465]'
- en: '[PRE466]'
  id: totrans-714
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE466]'
- en: '[PRE467]'
  id: totrans-715
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE467]'
- en: '[PRE468]'
  id: totrans-716
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE468]'
- en: '[PRE469]'
  id: totrans-717
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE469]'
- en: '[PRE470]'
  id: totrans-718
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE470]'
- en: '[PRE471]'
  id: totrans-719
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE471]'
- en: '[PRE472]'
  id: totrans-720
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE472]'
- en: '[PRE473]'
  id: totrans-721
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE473]'
- en: '[PRE474]'
  id: totrans-722
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE474]'
- en: '[PRE475]'
  id: totrans-723
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE475]'
- en: '[PRE476]'
  id: totrans-724
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE476]'
- en: '[PRE477]'
  id: totrans-725
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE477]'
- en: '[PRE478]'
  id: totrans-726
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE478]'
- en: '`useValid` doesn’t call a standard React hook. A better implementation would
    be to extract the state into the custom hook as well:'
  id: totrans-727
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`useValid`没有调用标准的React钩子。更好的实现是将状态也提取到自定义钩子中：'
- en: '[PRE479]'
  id: totrans-728
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE479]'
- en: '[PRE480]'
  id: totrans-729
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE480]'
- en: '[PRE481]'
  id: totrans-730
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE481]'
- en: '[PRE482]'
  id: totrans-731
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE482]'
- en: '[PRE483]'
  id: totrans-732
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE483]'
- en: '[PRE484]'
  id: totrans-733
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE484]'
- en: '[PRE485]'
  id: totrans-734
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE485]'
- en: '[PRE486]'
  id: totrans-735
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE486]'
- en: '[PRE487]'
  id: totrans-736
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE487]'
- en: '[PRE488]'
  id: totrans-737
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE488]'
- en: '[PRE489]'
  id: totrans-738
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE489]'
- en: '[PRE490]'
  id: totrans-739
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE490]'
- en: '[PRE491]'
  id: totrans-740
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE491]'
- en: '[PRE492]'
  id: totrans-741
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE492]'
- en: '[PRE493]'
  id: totrans-742
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE493]'
- en: '[PRE494]'
  id: totrans-743
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE494]'
- en: '[PRE495]'
  id: totrans-744
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE495]'
- en: '[PRE496]'
  id: totrans-745
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE496]'
- en: '[PRE497]'
  id: totrans-746
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE497]'
- en: '[PRE498]'
  id: totrans-747
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE498]'
- en: '[PRE499]'
  id: totrans-748
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE499]'
- en: '[PRE500]'
  id: totrans-749
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE500]'
- en: '[PRE501]'
  id: totrans-750
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE501]'
- en: '[PRE502]'
  id: totrans-751
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE502]'
- en: There is no limit on the number of render props a component can have.
  id: totrans-752
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 组件可以拥有的渲染属性数量没有限制。
