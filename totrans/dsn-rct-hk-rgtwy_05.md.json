["```js\nfunction add(a, b) {\n  return a + b\n}\n```", "```js\nlet c = 3\nfunction add(a, b) {\n  console.log(a, b)\n  return a + b + c\n}\n```", "```js\nfunction add(a, b, c, log) {\n  log(a, b)\n  return a + b + c\n}\n```", "```js\nfunction addFunc(c, log) {\n  function add(a, b) {\n    log(a, b)\n    return a + b + c\n  }  \n  return add\n}\n```", "```js\nconst add = addFunc(3, console.log)\n```", "```js\nlet c = 1, d = 2\nfunction add() {\n  c = 2\n  const a = d\n}\n```", "```js\nconst Title = () => {\n  useEffect(() => {\n    window.title = \"Hello World\"\n    return () => {\n      window.title = \"Notitle\"\n    }\n  }, [])\n}\n```", "```js\nfunction useEffect(create, deps) {\n  if (isFiberMounting) {\n    mountEffect(create, deps)\n  } \n  else {\n    updateEffect(create, deps)\n  }\n}\n```", "```js\nfunction mountEffect(create, deps) {\n  const hook = mountHook()\n  hook.state = pushEffect(\n    create,\n    undefined,\n    deps,\n  )\n}\n```", "```js\nfunction pushEffect(create, destroy, deps) {\n  const effect = {\n    create,\n    destroy,\n    deps,\n    next: null,\n  }\n  let queue =  updatingFiber.updateQueue \n  if (queue === null) {\n    queue = { lastEffect: null }\n    updatingFiber.updateQueue = queue\n    queue.lastEffect = effect.next = effect\n  } \n  else { …\n    queue.lastEffect = effect\n  }\n  return effect\n}\n```", "```js\nfunction updateEffect(create, deps) {\n  const hook = updateHook()\n  let destroy = undefined\n  const prevEffect = hook.state\n  destroy = prevEffect.destroy\n  if (deps) {\n    const prevDeps = prevEffect.deps\n    if (areDepsEqual(deps, prevDeps)) {\n      return\n    }\n  }\n  hook.state = pushEffect(\n    create,\n    destroy,\n    deps,\n  )\n}\n```", "```js\nfunction enqueueEffect(fiber, effect) {\n  effectCreateList.push(effect)\n  if (!rootDoesHaveEffects) {\n    rootDoesHaveEffects = true\n    scheduleCallback(() => { flushEffects() })\n  }\n}\n```", "```js\nfunction flushEffects() {\n  effectDestroyList.forEach(effect => {\n    const destroy = effect.destroy\n    effect.destroy = undefined\n    if (typeof destroy === 'function') {\n      destroy()\n    }\n  })\n  ...\n}\n```", "```js\nfunction flushEffects() {\n  ...\n  effectCreateList.forEach(effect => {\n    const create = effect.create\n    effect.destroy = create()\n  })  \n}\n```", "```js\nfunction areDepsEqual(deps, prevDeps) {\n  if (!prevDeps) {\n    return false\n  }\n  for (let i = 0; \n       i < prevDeps.length && i < nextDeps.length; \n       i++)\n  {\n    if (Object.is(deps[i], prevDeps[i])) {\n      continue\n    }\n    return false\n  }\n  return true\n}\n```", "```js\n      useEffect(fn) \n    ```", "```js\n      useEffect(fn, [a, b])\n    ```", "```js\nfunction Title() {\n  useEffect(() => {\n    window.title = \"\" \n  })  \n}\n```", "```js\nfunction Title({ text }) {\n  const a = 2\n  useEffect(() => {\n     console.log(a)\n     console.log(text)\n  })\n}\n```", "```js\nconst Title = ({ text }) => {\n  const [count, setCount] = useState(0)\n     useEffect(() => {\n    setCount(0)\n  }, [text])\n\n  const onClick = () => {\n    setCount(count + 1)\n  }\n\n    console.log('count', count)\n    return (\n    <button onClick={onClick}>\n      {text}: {count}\n    </button>\n  )\n}\n```", "```js\n|-----x-----x------------> click\na-----------------b------> text\nR-----R-----R-----RR-----> update \n0-----1-----2-----20-----> count\n```", "```js\nconst Title = () => {\n  const [count, setCount] = useState(0)\n\n  useEffect(() => {\n    console.log(count)\n  }, [])\n}\n```", "```js\nconst Title = ({ text }) => {\n  const [count, setCount] = useState(0)\n\n  useEffect(() => {\n    console.log(text + count)\n  }, [text])\n}\n```", "```js\n  useEffect(() => {\n    console.log(text + count)\n  }, [count, text])\n```", "```js\nfunction Title() {\n  const [count, setCount] = useState(0)\n  useEffect(() => {\n    setCount(count+1)\n  }, [count])\n  return <h1>{count}</h1>\n}\n```", "```js\nRRRRRRRRRR> update \n0123456789> count\n```", "```js\n  useEffect(() => {\n    if (count >= 1) return\n    setCount(count+1)\n  }, [count])\n```", "```js\nRR--------> update \n01--------> count\n```", "```js\nconst Greeting = () => {\n  const [width, setWidth] = useState(0)\n\n  useEffect(() => {\n    function handleResize() {\n      setWidth(window.innerWidth)\n    }    \n    window.addEventListener(\"resize\", handleResize)\n    handleResize()\n\n    return () => { \n      window.removeEventListener(\"resize\", handleResize)\n    }\n  }, [setWidth])  \n  const on = width > 600\n  return <h1>{on ? \"Hello World\" : \"Hello\"}</h1>\n}\n```", "```js\nconst Title = () => {\n  const [text, setText] = useState(\"\")\n  const [loading, setLoading] = useState(true)\n  useEffect(() => {\n    fetch(\"https://google.com\").then(res => {\n      setText(res.title)\n      setLoading(false)\n    })\n  }, [setText, setLoading])\n  if (loading) return \"loading...\"\n  return (<h1>{text}</h1>)\n}\n```", "```js\n  onClick = () => { setState(1) }\n```", "```js\n  onClick = () => {\n    setState(1)\n    // state value isn't changed yet\n  }\n```", "```js\n  useEffect = (() => {\n    setState(1)\n  }, [])\n```", "```js\n  const [state, dispatch] = useState(1)\n  const onClick = () => {\n    setTimeout(() => {\n      dispatch(3)\n    }, 0)\n    dispatch(5)\n  }\n```"]