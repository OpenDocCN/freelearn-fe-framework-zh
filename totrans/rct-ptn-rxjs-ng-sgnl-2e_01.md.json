["```js\n//HTML code\n<button id='save'>Save</button>\n//JS code\nconst saveElement = document.getElementById('save');\nsaveElement.addEventListener('click', processClick);\nfunction processClick(event) {\n  console.log('Hi');\n}\n```", "```js\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable} from 'rxjs';\nimport { Recipe } from '../model/recipe.model';\n@Injectable()\nexport class RecipesService {\nconstructor(private http: HttpClient) { }\ngetRecipes(): Observable<Recipe[]> {\nreturn this.http.get<Recipe[]>(`api/recipes/`);\n}\n}\n```", "```js\nimport { Injectable } from '@angular/core';\nimport { Router, RouterEvent } from '@angular/router';\nimport { filter } from 'rxjs/operators';\n@Injectable()\nexport class CustomRouteService {\n  constructor(public router: Router) {\n    this.router.events.pipe(\n      filter(event => event instanceof RouterEvent)\n    ).subscribe((event: RouterEvent) => {\n      console.log(`The current event is : ${event.id} |\n        event.url`);\n    });\n  }\n}\n```", "```js\nclass ActivatedRoute {\n  snapshot: ActivatedRouteSnapshot\n  url: Observable<UrlSegment[]>\n  params: Observable<Params>\n  queryParams: Observable<Params>\n  fragment: Observable<string | null>\n  data: Observable<Data>\n  outlet: string\n  component: Type<any> | string | null\n  routeConfig: Route | null\n  root: ActivatedRoute\n  parent: ActivatedRoute | null\n  firstChild: ActivatedRoute | null\n  children: ActivatedRoute[]\n  pathFromRoot: ActivatedRoute[]\n  paramMap: Observable<ParamMap>\n  queryParamMap: Observable<ParamMap>\n  toString(): string\n}\n```", "```js\nimport { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n@Component({\n  selector: 'app-recipes',\n  templateUrl: './recipes.component.html'\n})\nexport class RecipesComponent implements OnInit {\n  criteria: string;\n  constructor(private activatedRoute: ActivatedRoute) { }\n  ngOnInit() {\n    this.activatedRoute.url\n      .subscribe(url => console.log('The URL changed to: '\n        + url));\n    this.activatedRoute.queryParams.subscribe(params => {\n      this.processCriteria(params.criteria);\n    });\n  }\n  processCriteria(criteria: string) {\n    this.criteria = criteria;\n  }\n}\n```", "```js\nclass FormControl extends AbstractControl {\n//other properties here\nvalueChanges: Observable<any>\nstatusChanges: Observable<any>\n}\n```", "```js\nimport { Component, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n@Component({ ...})\nexport class MyComponent implements OnInit {\n  form!: FormGroup;\n  ngOnInit() {\n    const ratingControl = this.form.get('rating');\n    ratingControl?.valueChanges.subscribe(\n      (value) => {\n        console.log(value);\n      }\n    );\n  }\n}\n```", "```js\nclass EventEmitter<T> extends Subject {\n  constructor(isAsync?: boolean): EventEmitter<T>\n  emit(value?: T): void\n  subscribe(next?: (value: T) => void, error?: (error: any)\n    => void, complete?: () => void): Subscription\n}\n```", "```js\nimport { Component, Output } from '@angular/core';\nimport { EventEmitter } from 'events';\n@Component({ ...})\nexport class RecipesComponent {\n  constructor() {}\n  @Output() updateRating = new EventEmitter();\n  updateRecipe(value: string) {\n    this.updateRating.emit(value);\n  }\n}\n```"]