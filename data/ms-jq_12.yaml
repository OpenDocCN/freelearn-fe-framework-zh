- en: Chapter 12. Using jQuery with the Node-WebKit Project
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 12 章。使用 jQuery 与 Node-WebKit 项目
- en: In this modern age, responsive design is the latest buzzword, where websites
    built using jQuery can work correctly on any device or platform. Nevertheless,
    this requires an Internet connection—what if we can develop an offline version
    of the same app?
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个现代化的时代，响应式设计是最新的热门词汇，使用 jQuery 构建的网站可以在任何设备或平台上正确工作。尽管如此，这需要一个互联网连接——如果我们可以开发一个同样的应用的离线版本呢？
- en: Enter Node-WebKit (or NW.js, as it is now known). In this chapter, we're going
    to take a break from exploring jQuery and explore one of the lesser-known ways
    of using the library instead. You'll see how you can use the power of jQuery,
    HTML5, and the desktop, mixing them to produce a replica of your site that works
    offline in any desktop or laptop environment. We'll use it to have a little fun
    with developing a simple file size viewer that uses jQuery, which can be easily
    developed into something more complex that can run online or offline, as needed.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 进入 Node-WebKit（或现在称为 NW.js）。在本章中，我们将暂停探索 jQuery 并探索使用该库的较少知名的方式之一。你将看到如何利用 jQuery、HTML5
    和桌面的强大功能，将它们混合在一起，以在任何桌面或笔记本环境中离线运行您站点的副本。我们将使用它来通过使用 jQuery 开发一个简单的文件大小查看器来进行一些有趣的开发，这可以轻松地开发成可以根据需要在线或离线运行的更复杂的内容。
- en: 'In this chapter, we''ll cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Introducing Node-WebKit
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍 Node-WebKit
- en: Building a simple site
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建一个简单的站点
- en: Packaging and deploying your app
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打包和部署您的应用程序
- en: Taking things further
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 深入了解
- en: Ready to explore the world of Node-WebKit? Let's make a start…
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好探索 Node-WebKit 的世界了吗？让我们开始吧...
- en: Note
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You may see references to NW.js online—this is the new name for Node-WebKit,
    as of January 2015; you may see both names being used throughout this chapter.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会在网上看到对 NW.js 的引用——这是自2015年1月以来 Node-WebKit 的新名称；在本章中，你可能会看到两个名称都被使用。
- en: Setting the scene
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置情景
- en: 'Imagine a scene, if you will, where a client has asked you to produce a web-based
    application; they''ve outlined a specific set of requirements, as follows:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下情景，如果你愿意，客户要求你制作一个基于网络的应用程序；他们概述了一组特定的要求，如下所示：
- en: It must have a simple GUI
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它必须具有简单的 GUI
- en: There shouldn't be any duplicates—it must be one version that works on all platforms
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不应该有重复的内容——必须是一个适用于所有平台的版本
- en: The solution must be easy to install and run
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解决方案必须易于安装和运行
- en: It needs to be portable so that it can be transferred if we change computers
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它需要是可移动的，以便在更换计算机时可以传输
- en: Hands up if you think a website will suffice? Now, hands up if you haven't read
    the requirements properly…!
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你认为一个网站就足够了，请举手？现在，如果你没有仔细阅读需求，请举手...！
- en: In this instance, a website isn't going to be enough; a desktop application
    will deal with the duplication requirement, but it may not be easy to use and
    certainly won't be cross-platform. So, where do we go from here?
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，一个网站是不够的；一个桌面应用程序将处理重复的要求，但可能不易使用，并且肯定不会跨平台。那么，我们从这里该怎么办呢？
- en: Introducing Node-WebKit
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍 Node-WebKit
- en: Node-WebKit (or NW.js, as it is now known) was originally created by Intel but
    open sourced in 2011 and is available at [http://nwjs.io/](http://nwjs.io/); the
    project is an attempt to combine the best of SPA development with an offline environment
    (where hosting a web server is not practical).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Node-WebKit（或现在称为 NW.js）最初由英特尔创建，但在2011年开源，并可在 [http://nwjs.io/](http://nwjs.io/)
    获取；该项目试图将 SPA 开发的优势与离线环境结合起来（在那里托管 Web 服务器并不实际）。
- en: Node-WebKit is based on Chromium, a WebKit-based browser that has been extended
    in order to allow you to control user interface elements that are normally off-limits
    to web developers. The security model has been relaxed (on the basis that the
    code we're running is trusted) and that it integrates NodeJS; this opens up an
    array of possibilities, outside of what would normally be possible with HTML5
    APIs.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Node-WebKit 基于 Chromium，一个基于 WebKit 的浏览器进行了扩展，以便让你控制通常对 Web 开发人员不可用的用户界面元素。安全模型已经放宽（基于我们运行的代码是受信任的）并且它集成了
    NodeJS；这打开了一系列的可能性，超出了HTML5 API的正常范围。
- en: At first, it may seem like a complicated mix. However, fear not as most finished
    solutions built in nothing more than plain HTML, CSS, and JavaScript, with a sprinkling
    of images to finish it off.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 起初，这可能看起来像是一种复杂的混合。然而，请不要害怕，因为大多数最终解决方案仅由普通的 HTML、CSS 和 JavaScript 构建，最后加上一些图像来完成。
- en: 'The basic principle, as we will see throughout this chapter, is to produce
    a normal site and then compress HTML, CSS, and all related resource files into
    one ZIP file. We simply rename it to have an `.nw` extension and then run the
    main `nw.exe` application. Provided that we''ve set up a requisite `package.json`
    file, it will automatically pick up our application and display it on the screen,
    as shown here:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在本章中将要看到的，基本原理是生成一个普通的站点，然后将 HTML、CSS 和所有相关资源文件压缩成一个 ZIP 文件。我们只需将其重新命名为`.nw`扩展名，然后运行主要的`nw.exe`应用程序。只要我们已经设置了一个必需的`package.json`文件，它就会自动获取我们的应用程序并在屏幕上显示出来，如下所示：
- en: '![Introducing Node-WebKit](img/image00458.jpeg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![介绍 Node-WebKit](img/image00458.jpeg)'
- en: 'Hold on though; this book is about jQuery, right? Yes, absolutely; here comes
    the best part: Node-WebKit allows you to run standard JavaScript and jQuery along
    with any Node third-party modules! This opens up a wide variety of opportunities;
    we can use the main library or any of a host of additional jQuery-based libraries,
    such as Three.js, AngularJS, or Ember.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，这本书是关于 jQuery 的，对吗？是的，绝对是；这里就是最棒的部分：Node-WebKit 允许你运行标准的 JavaScript 和 jQuery，以及任何
    Node 的第三方模块！这打开了各种机会；我们可以使用主要库或任何大量基于 jQuery 的附加库，比如 Three.js、AngularJS 或 Ember。
- en: Note
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The only key part that we really have to remember is that there are some quirks
    of using NW.js, such as using a folder dialog to browse and select local folders;
    we will cover this in more detail later in this chapter.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们真正需要记住的唯一关键部分是，使用 NW.js 有一些怪癖，比如使用文件夹对话框浏览和选择本地文件夹；我们稍后将在本章中更详细地介绍这一点。
- en: 'At this point, I am sure you will be asking yourself one question: why would
    I want to use nw.js (or Node-WebKit)? This is a perfectly valid question; it might
    well seem illogical that we''re running a web-based site as a desktop application!
    In this apparent madness, there are some valid reasons for doing this, so let''s
    take a look at them now and see why it makes sense to run a site as a desktop
    application.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我相信你一定会问自己一个问题：为什么我要使用 nw.js（或 Node-WebKit）？这是一个非常合理的问题；我们以桌面应用程序的形式运行基于
    Web 的站点可能看起来很不合逻辑！在这种明显的疯狂中，有一些合理的原因让我们这样做，所以让我们现在看一下它们，看看为什么将站点作为桌面应用程序运行是有意义的。
- en: Operating HTML applications on a desktop
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在桌面上运行 HTML 应用程序
- en: 'As developers, one of the biggest headaches we face is ensuring that users
    have the same experience across all the browsers that we need to support when
    accessing our site. Now, I should make it clear: in terms of the same experience,
    there may be instances where this simply isn''t possible, so we have to at least
    provide a graceful exit path for those browsers that don''t support a particular
    piece of functionality.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 作为开发人员，我们面临的最大头疼之一是确保用户在访问我们的站点时在所有需要支持的浏览器上拥有相同的体验。现在，我应该明确一点：在同样的体验方面，可能存在一些情况，这根本不可能实现，所以我们至少必须为那些不支持特定功能的浏览器提供一个优雅的退出路径。
- en: Thankfully, this concern is slowly but surely becoming less of an issue. The
    great thing about Node-WebKit is that we only have to support Chrome (as this
    is what Node-WebKit is based on).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，这个问题正在逐渐减少。Node-WebKit 的好处在于，我们只需要支持 Chrome（因为 Node-WebKit 就是基于 Chrome
    的）。
- en: 'In most cases, we can simply reuse the code created for Chrome; this allows
    us to easily push out cross-platform applications using frontend frameworks (including
    jQuery!) and Node modules that we already know or use. In addition to this, there
    are several reasons why you will use Node-WebKit to help produce cross-platform
    applications, as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，我们可以简单地重用为 Chrome 创建的代码；这使我们能够轻松地使用我们已经了解或使用的前端框架（包括 jQuery！）和 Node
    模块推出跨平台应用程序。除此之外，还有几个原因可以让你使用 Node-WebKit 来帮助制作跨平台应用程序，如下所示：
- en: Access to the latest web technologies available in Blink, the rendering engine
    behind Google Chrome.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问 Blink 中提供的最新 Web 技术，Blink 是 Google Chrome 后面的渲染引擎。
- en: NW.js supports the *build once, run anywhere* concept—this may not suit all
    applications, but many will benefit from sharing code between the desktop, web,
    and mobile environments.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NW.js 支持 *一次构建，到处运行* 的概念——这可能不适用于所有应用程序，但许多应用程序可以从在桌面、Web 和移动环境之间共享代码中受益。
- en: If you want your app to run at a certain size or do some more advanced things
    with popups, you get this control on the desktop. Most solutions also provide
    a way to access the file system and allow other more advanced controls that you
    wouldn't get with a regular web application.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你想让你的应用程序以特定大小运行或者在弹出窗口中做一些更高级的事情，你可以在桌面上获得这种控制。大多数解决方案还提供了一种访问文件系统并允许其他更高级控件的方式，这些是常规
    Web 应用程序所不能提供的。
- en: Without wanting to appear negative, there are some considerations that you need
    to be aware of; the principal concern is the size of the executable.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 不想显得消极，但有一些需要注意的事项；主要关注的是可执行文件的大小。
- en: 'A site or an application created with native UI libraries, such as jQuery,
    may only be a few kilobytes in size. An equivalent version built using Node-WebKit
    will be significantly bigger, as it includes a cut-down version of Node and Chromium.
    It''s for this reason that you need to be careful about file sizes—you can use
    some of the tips and tricks from [Chapter 2](part0021.xhtml#aid-K0RQ1 "Chapter 2. Customizing
    jQuery"), *Customizing jQuery*, to reduce the size of jQuery. There are a couple
    of other concerns that you need to be mindful of; they include the following:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 使用原生 UI 库（如 jQuery）创建的站点或应用程序可能只有几千字节大小。使用 Node-WebKit 构建的等效版本会显著更大，因为它包含了一个精简版的
    Node 和 Chromium。因此，你需要注意文件大小——你可以使用 [第二章](part0021.xhtml#aid-K0RQ1 "Chapter 2. Customizing
    jQuery") *Customizing jQuery* 中的一些技巧来减小 jQuery 的大小。还有一些其他需要注意的问题；它们包括以下内容：
- en: Compared to native applications, desktop web applications typically require
    a much larger amount of RAM and CPU power to run and render.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与原生应用程序相比，桌面 Web 应用程序通常需要更大量的 RAM 和 CPU 力量来运行和渲染。
- en: In terms of appearance, if you want to make your application look good on the
    platform you're planning on deploying to, then you'll need to either recreate
    common UI elements using CSS or create a totally new UI, including a new design
    for every operating system-provided UI element, such as the title bar, menu bar,
    and context menus.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在外观方面，如果你想要让你的应用程序在你计划部署的平台上看起来好看，那么你需要使用 CSS 重新创建常见的 UI 元素，或者创建一个全新的 UI，包括为每个操作系统提供的
    UI 元素（如标题栏、菜单栏和上下文菜单）创建新的设计。
- en: 'Although Node-WebKit relaxes some of the security issues that are otherwise
    found when using browser applications (such as the same origin policy), you still
    only have access to the Node-WebKit context; and in some instances, you have to
    use WebKit-specific tags, such as `nwdirectory`, when creating a select directory
    dialog. The net effect means an increase in code, if you want to create one file
    that supports both web and desktop environments. You can mitigate against the
    effects of this issue: [http://videlais.com/2014/08/23/lessons-learned-from-detecting-node-webkit/](http://videlais.com/2014/08/23/lessons-learned-from-detecting-node-webkit/)
    provides a useful trick to determine which environment you are in and allows you
    to reference the appropriate files needed for that environment.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虽然 Node-WebKit 放宽了一些在使用浏览器应用程序时发现的安全问题（如同源策略），但你仍然只能访问 Node-WebKit 上下文；而且在某些情况下，你必须使用
    WebKit 特定的标签，比如在创建选择目录对话框时使用 `nwdirectory`。最终效果是代码增加，如果你想要创建一个同时支持 Web 和桌面环境的文件。你可以缓解这个问题的影响：[http://videlais.com/2014/08/23/lessons-learned-from-detecting-node-webkit/](http://videlais.com/2014/08/23/lessons-learned-from-detecting-node-webkit/)
    提供了一个有用的技巧来确定你所处的环境，并允许你引用该环境所需的适当文件。
- en: Note
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For more information on some of the security considerations, take a look at
    the security page on the NW.js Wiki, available at [https://github.com/nwjs/nw.js/wiki/Security](https://github.com/nwjs/nw.js/wiki/Security).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 有关一些安全考虑的更多信息，请查看 NW.js Wiki 上的安全页面，网址为 [https://github.com/nwjs/nw.js/wiki/Security](https://github.com/nwjs/nw.js/wiki/Security)。
- en: Now that we've been introduced, let's delve in and get started with installing
    Node before we start building our jQuery-based application. It should be noted
    that the focus of this chapter will be largely based on Windows, as this is the
    platform that is used by the author; changes will need to be made for those using
    Linux or Mac platforms.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经相互介绍了，让我们深入探讨并开始安装 Node，在我们开始构建基于 jQuery 的应用程序之前。值得注意的是，本章的重点将主要基于 Windows，因为这是作者使用的平台；对于使用
    Linux 或 Mac 平台的人来说，需要进行一些更改。
- en: Preparing our development environment
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备我们的开发环境
- en: Over the next few pages, we're going to build a simple application that displays
    the file sizes of any files dropped into the main window or selected via a file
    dialog. In reality, we wouldn't use the application on its own, but as a basis
    for uploading images for processing or perhaps as the offline version of a compression
    application. There are plenty of ways in which we can develop it further—we will
    touch on some ideas later in the chapter, in the *Taking things further* section.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几页中，我们将构建一个简单的应用程序，该应用程序在主窗口中显示任何拖放的文件的文件大小，或者通过文件对话框选择。实际上，我们不会单独使用该应用程序，而是作为上传图像进行处理的基础，或者可能作为压缩应用程序的离线版本。我们有很多方法可以进一步开发它——我们将在本章后面的
    *深入探讨* 部分中涉及一些想法。
- en: 'In the meantime, let''s get started with installing NW.js. Before doing this,
    we need to avail ourselves of the following tools:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 与此同时，让我们开始安装 NW.js。在这之前，我们需要利用以下工具：
- en: A compression program is needed; on the Windows platform, you can use the in-built
    capabilities or something such as 7-Zip ([http://www.7-zip.org](http://www.7-zip.org)),
    if preferred.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要一个压缩程序；在 Windows 平台上，您可以使用内置功能或类似于 7-Zip ([http://www.7-zip.org](http://www.7-zip.org))
    的东西，如果更喜欢的话。
- en: We will need a text editor; throughout the course of this chapter, we will use
    Sublime 2 or 3, but any good text editor should suffice if you already have a
    personal preference. Sublime Text can be downloaded from [http://www.sublimetext.com](http://www.sublimetext.com),
    with versions available for the Mac, Linux, and Windows platforms.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们需要一个文本编辑器；在本章的过程中，我们将使用 Sublime 2 或 3，但如果您已经有个人偏爱，任何好的文本编辑器都应该足够。Sublime Text
    可以从 [http://www.sublimetext.com](http://www.sublimetext.com) 下载，适用于 Mac、Linux
    和 Windows 平台。
- en: 'We''ll be making use of Node and Grunt to install additional packages. Node
    is available at [http://www.nodejs.org](http://www.nodejs.org), so go ahead and
    install the version suitable for your platform. Once installed, run this command
    from a NodeJS command prompt to install Grunt:'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将利用 Node 和 Grunt 来安装额外的包。Node 可以在 [http://www.nodejs.org](http://www.nodejs.org)
    上获得，所以请继续安装适合您平台的版本。安装完成后，请从 NodeJS 命令提示符中运行以下命令以安装 Grunt：
- en: '[PRE0]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Last, but by no means least, we need the Node-WebKit library (of course), so
    head over to [http://nwjs.io/](http://nwjs.io/) and download the version appropriate
    for your platform. If you expand the folder, you should see something similar
    to what is shown in this screenshot:![Preparing our development environment](img/image00459.jpeg)
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，但绝不是最不重要的，我们需要 Node-WebKit 库（当然），所以请访问 [http://nwjs.io/](http://nwjs.io/)
    并下载适合您平台的版本。如果您展开文件夹，您应该会看到类似于此截图所示的内容：![准备我们的开发环境](img/image00459.jpeg)
- en: As an aside, Node-WebKit can be easily integrated into existing Grunt files,
    which means that we can take the advantage of packages such as `cssmin` to minify
    the CSS style sheets we create for our application. It is definitely worth exploring
    as you become more familiar with Node-WebKit.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便说一下，Node-WebKit 可以很容易地集成到现有的 Grunt 文件中，这意味着我们可以利用诸如`cssmin`之类的包来缩小我们为应用程序创建的
    CSS 样式表。随着您对 Node-WebKit 的了解越来越深入，这绝对值得探索。
- en: Enough of the chit-chat; it's time for us to start developing! As with all other
    things, we need to start somewhere. Let's have a crack at creating a simple "Hello
    World" example, before we look at how to use jQuery.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 废话少说；是时候开始开发了！与其他事物一样，我们需要从某个地方开始。在我们看如何使用 jQuery 之前，让我们试试创建一个简单的 "Hello World"
    示例。
- en: Installing and building our first application
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装和构建我们的第一个应用程序
- en: 'I wonder: how many times have you read books or online articles about a programming
    language, which provide their own take on the ubiquitous "Hello World" example?
    I''ll bet it must be quite a few times over the years…and yes, before you ask,
    we''re not going to break the tradition either! Following in the footsteps of
    anyone who has provided "Hello World" examples, here''s our own take.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我在想：你有多少次读过关于编程语言的书籍或在线文章，它们对无处不在的 "Hello World" 示例都提供了自己的见解？我敢打赌，这些年来肯定有不少次……是的，在你问之前，我们也不打算打破传统！在提供
    "Hello World" 示例的任何人的脚步之后，这是我们自己的见解。
- en: '![Installing and building our first application](img/image00460.jpeg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![安装和构建我们的第一个应用程序](img/image00460.jpeg)'
- en: 'To build this, we need to do the following:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建这个，我们需要做以下事情：
- en: Browse to [http://nwjs.io/](http://nwjs.io/) and download the package for your
    platform; we will assume the use of Windows for now, but packages are available
    for Mac and Linux platforms as well.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览到[http://nwjs.io/](http://nwjs.io/)并下载适用于您平台的软件包；我们暂时假设使用Windows，但也有Mac和Linux平台的软件包可用。
- en: Extract the `node-webkit-vX.XX.XX-win-x64` folder (where `XX` is the version
    number), rename it as `nodewebkit`, and copy it to your main PC drive—Linux or
    Mac users can copy this folder to their user areas. Once done, create a new folder
    called `development` within the `nodewebkit` folder.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提取`node-webkit-vX.XX.XX-win-x64`文件夹（其中`XX`是版本号），将其重命名为`nodewebkit`，并将其复制到主PC驱动器——Linux或Mac用户可以将此文件夹复制到他们的用户区域。完成后，在`nodewebkit`文件夹中创建一个名为`development`的新文件夹。
- en: Next up, we need to install NodeJS. To do this, head over to [http://nodejs.org/download/](http://nodejs.org/download/)
    in order to download and install a version suitable for your platform, accepting
    all the defaults.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要安装NodeJS。为此，请前往[http://nodejs.org/download/](http://nodejs.org/download/)以下载并安装适合您平台的版本，接受所有默认值。
- en: 'Node-WebKit can use any of the standard Node packages available. As an example,
    we''re going to install the `markdown` package, which converts suitably marked
    up plain text to valid HTML. Let''s continue the exercise by installing it and
    seeing how it works:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Node-WebKit可以使用任何可用的标准Node软件包。作为示例，我们将安装`markdown`包，该包将合适标记的纯文本转换为有效的HTML。让我们继续安装它并看看它是如何工作的：
- en: 'In the NodeJS command prompt, change to the `helloworld` folder and then enter
    the following code and press *Enter*:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在NodeJS命令提示符中，切换到`helloworld`文件夹，然后输入以下代码并按*Enter*：
- en: '[PRE1]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![Installing and building our first application](img/image00461.jpeg)'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![安装和构建我们的第一个应用程序](img/image00461.jpeg)'
- en: Close the window as you don't need it. Next, extract a copy of the `index.html`
    and `package.json` files from the `helloWorld` folder in the code download that
    accompanies this book; save these in the `helloWorld` folder in your project area.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭窗口，因为你不需要它。接下来，从附带本书的代码下载中的`helloWorld`文件夹中提取`index.html`和`package.json`文件的副本；将它们保存在项目区域中的`helloWorld`文件夹中。
- en: Create a new ZIP folder called `helloWorld.zip` and then add these two files
    to it; rename `helloWorld.zip` to `helloWorld.nw`.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`helloWorld.zip`的新ZIP文件夹，然后将这两个文件添加到其中；将`helloWorld.zip`重命名为`helloWorld.nw`。
- en: 'We can now run our application; there are three ways to do this with Node-WebKit:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以运行我们的应用程序了；有三种方式可以使用Node-WebKit来执行此操作：
- en: 'In the NodeJS command prompt, switch to the `nodewebkit` folder and then run
    the following command:'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在NodeJS命令提示符中，切换到`nodewebkit`文件夹，然后运行以下命令：
- en: '[PRE2]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Double-click on the `nw.exe` application; this will pick up the `package.json`
    file and run the `helloworld.nw` file automatically
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 双击`nw.exe`应用程序；这将拾取`package.json`文件并自动运行`helloworld.nw`文件
- en: Drag and drop the `helloworld.nw` file onto `nw.exe` to run the application
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`helloworld.nw`文件拖放到`nw.exe`上即可运行该应用程序
- en: Whichever route you prefer to use, running it will show the **Hello World**
    window shown at the start of this exercise. It's a simple, no-frills example of
    using Node-WebKit—granted it won't win any awards, but it shows how simple it
    is to create a functional application from existing HTML pages.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您喜欢使用哪种方式，运行它都会显示在本练习开始时显示的**Hello World**窗口。这是一个简单的、不带花哨的Node-WebKit使用示例——尽管它不会赢得任何奖项，但它展示了如何从现有HTML页面创建一个功能性应用程序是多么简单。
- en: Dissecting the package.json file
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解析`package.json`文件
- en: 'At the heart of our application is the `package.json` file. This manifest file
    tells Node-WebKit how to open the application and controls how the browser should
    behave:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序的核心是`package.json`文件。这个清单文件告诉Node-WebKit如何打开应用程序，并控制浏览器的行为方式：
- en: '![Dissecting the package.json file](img/image00462.jpeg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![解析`package.json`文件](img/image00462.jpeg)'
- en: It's worth getting to know this file in detail; it holds all the metadata for
    the project and follows the standard format for all Node-based packages. If you're
    not familiar with the manifest file, you can see a detailed example at [http://browsenpm.org/package.json](http://browsenpm.org/package.json)
    with interactive explanations for each section; Node-WebKit's version works in
    a similar fashion.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 值得详细了解这个文件；它包含了项目的所有元数据，并遵循所有基于Node的软件包的标准格式。如果您不熟悉清单文件，您可以在[http://browsenpm.org/package.json](http://browsenpm.org/package.json)看到一个详细的示例，其中包含每个部分的交互式解释；Node-WebKit的版本使用方式类似。
- en: Note
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For more in-depth details about the Node-WebKit manifest file and the components
    that make it up, head over to the documentation on the main NW.js site ([https://github.com/nwjs/nw.js/wiki/manifest-format](https://github.com/nwjs/nw.js/wiki/manifest-format)).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 Node-WebKit 清单文件及其组成部分的更深入详细信息，请访问主 NW.js 站点上的文档 ([https://github.com/nwjs/nw.js/wiki/manifest-format](https://github.com/nwjs/nw.js/wiki/manifest-format))。
- en: Right, it's time to get stuck in and build our example application!
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在是时候开始构建我们的示例应用程序了！
- en: Building our simple application
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建我们的简单应用程序
- en: 'Over the next few pages, we''re going to build a simple application that allows
    us to drag and drop a file onto a drop zone in order to render the file sizes.
    It''s based on the tutorial by Martin Angelov, which is available at [http://tutorialzine.com/2013/05/mini-ajax-file-upload-form/](http://tutorialzine.com/2013/05/mini-ajax-file-upload-form/);
    we''ll concentrate on the frontend UI interface and not worry about the backend
    upload facility for the purposes of our demo:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几页中，我们将构建一个简单的应用程序，允许我们将文件拖放到拖放区域以渲染文件大小。它基于 Martin Angelov 的教程，可在 [http://tutorialzine.com/2013/05/mini-ajax-file-upload-form/](http://tutorialzine.com/2013/05/mini-ajax-file-upload-form/)
    上获得；我们将专注于前端 UI 界面，并不考虑后端上传功能，以供我们的演示使用：
- en: '![Building our simple application](img/image00463.jpeg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![构建我们的简单应用程序](img/image00463.jpeg)'
- en: 'Even when just working on the frontend user interface, there''s still a fair
    amount of code involved; our focus will be primarily on the jQuery code, so let''s
    take a look at the demo in action first before exploring it in more detail. To
    do this, perform the following steps:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 即使只是在前端用户界面上工作，仍然需要相当数量的代码；我们的重点将主要放在 jQuery 代码上，因此在更详细地探索之前，让我们先看一下演示的实际操作。要做到这一点，请执行以下步骤：
- en: We use a small bit of PHP code in our demo, so we need to set up web server
    space first, such as WAMP (for a PC—[http://www.wampserver.de/en](http://www.wampserver.de/en))
    or XAMPP (or MAMP for Mac—[http://www.mamp.info/en](http://www.mamp.info/en)).
    Linux users will have something available from within their distro. We'll use
    WAMP for this demo—please adjust locations accordingly if yours are different;
    use the default settings when installing it. If you prefer a cross-browser solution,
    then XAMPP is a good option—it's available at [https://www.apachefriends.org/index.html](https://www.apachefriends.org/index.html).
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的演示中，我们使用了一小部分 PHP 代码，因此我们首先需要设置 Web 服务器空间，如 WAMP（适用于 PC—[http://www.wampserver.de/en](http://www.wampserver.de/en)）或
    XAMPP（或 MAMP 适用于 Mac—[http://www.mamp.info/en](http://www.mamp.info/en)）。Linux
    用户将在其发行版中获得某种可用内容。我们将在此演示中使用 WAMP—如果您的情况不同，请相应调整位置；在安装时使用默认设置。如果您喜欢跨浏览器解决方案，则
    XAMPP 是一个不错的选择—它可在 [https://www.apachefriends.org/index.html](https://www.apachefriends.org/index.html)
    上获得。
- en: Next up, we need to extract a copy of the `FileSizeView` folder from the code
    download that accompanies this book. This contains the markup required for our
    application to work. Save the folder within `C:\wamp\www`.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要从附带本书的代码下载中提取一个`FileSizeView`文件夹的副本。这包含了我们应用程序所需的标记。将文件夹保存在`C:\wamp\www`中。
- en: We need a copy of Node-WebKit to run our application, so go ahead and copy the
    contents of the `nwjs` folder that is in the code download into the `FileSizeView`
    folder. If all is well, you should have the files shown as follows:![Building
    our simple application](img/image00464.jpeg)
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要一个 Node-WebKit 的副本来运行我们的应用程序，所以请复制代码下载中的`nwjs`文件夹的内容到`FileSizeView`文件夹中。如果一切正常，您应该看到如下所示的文件：![构建我们的简单应用程序](img/image00464.jpeg)
- en: At this stage, if we double-click on `nw.exe`, we should see our application
    run. Also, you will see the window displayed at the start of this exercise.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此阶段，如果我们双击`nw.exe`，我们应该可以看到我们的应用程序运行。另外，您将看到在本练习开始时显示的窗口。
- en: Okay, so it shows the window; "how does it all work," I hear you ask? Well,
    there are a few key points to note from this exercise, so let's spend some time
    to go through things in more detail.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，它显示了窗口；“它是如何工作的”，我听到你在问？嗯，从这个练习中有一些关键点需要注意，所以让我们花些时间更详细地讨论一下。
- en: Exploring our demo further
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进一步探索我们的演示
- en: 'If you take a look at the `FileSizeView` folder in more detail, you should
    see that most of the content centers around the `index.html` and `upload.php`
    files, with the associated CSS, image, and JavaScript files needed to make the
    demo work. In addition, we have a number of files from the Node-WebKit folder—these
    provide a cut-down version of Node and Chromium, which is used to host our files:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您仔细查看`FileSizeView`文件夹，您会发现大部分内容围绕着`index.html`和`upload.php`文件展开，还有为使演示工作所需的相关CSS、图像和JavaScript文件。此外，我们还有一些来自Node-WebKit文件夹的文件，这些文件提供了Node和Chromium的精简版本，用于托管我们的文件：
- en: '`nw.exe` and `nw.pak`: This is the main Node-WebKit executable and JavaScript
    library file that runs our code, respectively.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nw.exe` 和 `nw.pak`：这是主要的Node-WebKit可执行文件和JavaScript库文件，分别运行我们的代码。'
- en: '`package.json`: This is a manifest file that we saw in use earlier in the chapter,
    in the *Installing and building our first application* section; this provides
    directions to Node-WebKit on how to display our application.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`package.json`：这是一个清单文件，在本章早些时候的*安装和构建我们的第一个应用程序*部分中就使用过；它向Node-WebKit提供了如何显示我们应用程序的指示。'
- en: '`ffmpegsumo.dll`: This is used to provide video and audio support; it isn''t
    necessary for our demo but can be included for future use.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ffmpegsumo.dll`：用于提供视频和音频支持；对于我们的演示来说并不是必需的，但可以用于将来使用。'
- en: '`filesizeview.nw`: This is our zipped up application; this is the file that
    Node-WebKit runs once it has checked `package.json` to verify how it should be
    displayed.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`filesizeview.nw`：这是我们打包的应用程序；这是Node-WebKit在检查`package.json`以验证应如何显示后运行的文件。'
- en: '`gruntfile.js`: This is the Grunt file for `grunt-node-webkit-builder`, which
    we will use later in *Automating the process* to compile our files into one application.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gruntfile.js`：这是用于`grunt-node-webkit-builder`的Grunt文件，我们稍后会在*自动化流程*中使用它将我们的文件编译成一个应用程序。'
- en: '`icudtl.dll`: This is a network library required by Node-WebKit.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`icudtl.dll`：这是Node-WebKit所需的网络库。'
- en: '`libEGL.dll` and `libGLESv2.dll`: These files are used for **Web Graphics Library**
    (**WebGL**) and GPU acceleration.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`libEGL.dll`和`libGLESv2.dll`：这些文件用于**Web图形库**（**WebGL**）和GPU加速。'
- en: In some Node-WebKit applications that are available online, you may see the
    presence of `D3DCompiler_43.dll` and `d3dx9_43.dll` too. These are from the DirectX
    redistributable and are used to provide increased WebGL support.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在一些可在线使用的Node-WebKit应用程序中，您可能会看到`D3DCompiler_43.dll`和`d3dx9_43.dll`文件。这些来自DirectX可再发行包，用于提供增强的WebGL支持。
- en: Dissecting our content files
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解剖我们的内容文件
- en: Okay, so we have our main Node-WebKit files; what else are we using? Well, in
    addition to the standard HTML markup, images, and styles, we also use a number
    of jQuery-based plugins and some custom jQuery code to tie together.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，那么我们有我们的主要Node-WebKit文件；我们还使用了什么呢？除了标准的HTML标记、图像和样式外，我们还使用了许多基于jQuery的插件和一些自定义的jQuery代码进行连接。
- en: The main plugin files in use are jQuery, jQuery UI, jQuery Knob, and the BlueImp
    file upload plugin. We also use some custom code to tie this all together—they
    are in `window.js` and `script.js`. Let's take a look at these in more detail,
    beginning with `window.js`.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 使用的主要插件文件是jQuery、jQuery UI、jQuery Knob和BlueImp文件上传插件。我们还使用一些自定义代码将它们组合在一起——它们位于`window.js`和`script.js`中。让我们更详细地查看这些，从`window.js`开始。
- en: Exploring window.js
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 探究`window.js`
- en: 'In `window.js`, we first make a call to `nw.gui`, the native UI library for
    Node-WebKit that uses `require()`; this is a standard format for calling any module,
    such as internal ones or even external third-party modules. We then assign this
    to the `gui` variable before using this to get a handle on the window of our application:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在`window.js`中，我们首先调用`nw.gui`，这是Node-WebKit的本机UI库，使用了`require()`；这是调用任何模块（如内部模块或外部第三方模块）的标准格式。然后我们将这分配给`gui`变量，然后使用它来获取我们应用程序窗口的句柄：
- en: '[PRE3]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note that as we can only access the Node-WebKit context, we must use the dedicated
    library; we cannot access the window using a standard JavaScript call.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，由于我们只能访问Node-WebKit上下文，我们必须使用专用库；我们无法通过标准的JavaScript调用访问窗口。
- en: Tip
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: For more information on accessing modules, take a look at the documentation
    available at [https://github.com/nwjs/nw.js/wiki/Using-Node-modules](https://github.com/nwjs/nw.js/wiki/Using-Node-modules).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取有关访问模块的更多信息，请查看位于[https://github.com/nwjs/nw.js/wiki/Using-Node-modules](https://github.com/nwjs/nw.js/wiki/Using-Node-modules)上的文档。
- en: 'Next up, we set two delegated document handlers, one to handle the minimizing
    of the window and the other to close it completely:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们设置了两个委托文档处理程序，一个用于处理窗口的最小化，另一个用于完全关闭它：
- en: '[PRE4]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This scratches the surface of what we can do; there is so much more. Head over
    to [https://github.com/nwjs/nw.js/wiki/Window](https://github.com/nwjs/nw.js/wiki/Window)
    in order to get a feel of what is possible to achieve.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是我们可以做的一小部分；还有很多。前往[https://github.com/nwjs/nw.js/wiki/Window](https://github.com/nwjs/nw.js/wiki/Window)了解我们可以实现的可能性。
- en: Dissecting the BlueImp plugin configuration
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解析BlueImp插件配置
- en: The main functionality within our site is hosted in `script.js`. This contains
    the main configuration object for the BlueImp file upload plugin along with some
    additional helpers. Let's take a look at it in more detail.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们站点的主要功能是在`script.js`中托管的。它包含BlueImp文件上传插件的主配置对象以及一些额外的辅助函数。让我们更详细地看一下。
- en: 'We start with the normal document-ready call before assigning a reference to
    the `#upload li` list item as a variable, as shown here:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从常规的文档准备调用开始，然后将`#upload li`列表项的引用分配给一个变量，如下所示：
- en: '[PRE5]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Next up, we configure the file upload plugin. First, we set the initial drop
    zone to the `#drop` selector:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们配置文件上传插件。首先，我们将初始拖放区域设置为`#drop`选择器：
- en: '[PRE6]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We then set up the `add` callback function. This deals with displaying each
    list item that has been added to the list, either via drag and drop or by browsing
    for the file. We start by creating a template and then cache it in the `tpl` variable:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们设置`add`回调函数。这个函数负责显示已添加到列表中的每个列表项，无论是通过拖放还是通过浏览文件。我们首先创建一个模板，然后将其缓存在`tpl`变量中：
- en: '[PRE7]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We then find the filename that has just been added, before working out and
    appending the `filesize` function to the list:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接着找到刚刚添加的文件名，然后计算并附加`filesize`函数到列表中：
- en: '[PRE8]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Next up, we initialize the jQuery Knob plugin. Although it is nonoperational
    for now, it will produce a good circular status gauge of the progress in uploading
    any file to the remote location:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们初始化jQuery Knob插件。虽然现在它还没有运行，但它将产生一个良好的圆形状态表，显示上传任何文件到远程位置的进度：
- en: '[PRE9]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'At the moment, we''re not using the cancel icon. This will be the event handler
    we''d need to use to work out if we cancel the upload of any item while it is
    in progress:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们没有使用取消图标。这将是我们需要使用的事件处理程序，以确定是否在某个项目正在进行时取消上传：
- en: '[PRE10]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This is the key method handler within the `fileupload` object. This takes care
    of working out the percentage value of progress in uploading the file before triggering
    a change to update the jQuery Knob plugin, as shown here:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`fileupload`对象内的关键方法处理程序。它负责在触发更改更新jQuery Knob插件之前，计算文件上传进度的百分比值，如下所示：
- en: '[PRE11]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'If the file fails to upload, then we set a class of `.error`, which is appropriately
    styled within the accompanying style sheet:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 如果文件上传失败，我们将设置一个`.error`类，这在附带的样式表中有适当的样式：
- en: '[PRE12]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In addition to the main `fileupload` configuration object, we also set a couple
    of helper functions. The first helper function prevents the normal action that
    should take place if we drag anything over the document object, which will be
    an attempt to display it within the browser window:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 除了主要的`fileupload`配置对象之外，我们还设置了一些辅助函数。第一个辅助函数阻止了正常操作，如果我们拖动任何内容到文档对象上，将尝试在浏览器窗口中显示它：
- en: '[PRE13]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The second helper function handles the conversion of the file size from a byte
    value to either its kilobyte, megabyte, or gigabyte equivalent, before returning
    the value for rendering on the screen:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个辅助函数处理文件大小从字节值转换为其对应的千字节、兆字节或千兆字节，然后返回用于在屏幕上渲染的值：
- en: '[PRE14]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'At present, there is definitely scope for improvement in our project: it will
    work fine within a normal browser window but needs modification to make it operate
    100 percent properly within a Node-WebKit context. We''ll cover some ideas as
    to where we can improve the code later, within the *Taking things further* section,
    but for now, there is one important tip we need to cover off before we consider
    debugging our application.'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们的项目肯定有改进的空间：它可以在普通浏览器窗口中正常工作，但需要修改以使其在Node-WebKit环境中100%正常运行。我们稍后将在*进一步探讨*部分讨论一些改进代码的想法，但现在，在我们考虑调试应用程序之前，有一个重要的提示需要说明。
- en: Automating the creation of our project
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自动创建我们的项目
- en: One key theme that I've tried to maintain throughout this book is how we can
    be smarter at doing things; anyone can write code, but the smarter developer knows
    when it is time to automate some of the more mundane tasks and use their time
    on tasks that will return more value.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我在本书中试图保持的一个关键主题是我们如何更聪明地做事；任何人都可以编写代码，但更聪明的开发者知道何时是时候自动化一些更乏味的任务，并将他们的时间用在能够带来更多价值的任务上。
- en: 'One way in which we can improve on creating and building our project is to
    automate the generation of our skeleton project. Thankfully, we can do this using
    the Yeoman generator for node-webkit applications (available at [https://github.com/Dica-Developer/generator-node-webkit](https://github.com/Dica-Developer/generator-node-webkit)),
    which we can install using the following command:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以改进创建和构建项目的方法之一是自动化生成我们的骨架项目。幸运的是，我们可以使用 Yeoman generator for node-webkit
    应用程序（可在 [https://github.com/Dica-Developer/generator-node-webkit](https://github.com/Dica-Developer/generator-node-webkit)
    找到），我们可以使用以下命令安装：
- en: '[PRE15]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The preceding command is followed by this:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令后面是这样的：
- en: '[PRE16]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This displays the following screenshot, which shows the details being entered
    for a test project:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这显示了以下屏幕截图，显示了为测试项目输入详细信息的过程：
- en: '![Automating the creation of our project](img/image00465.jpeg)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![自动化创建我们的项目](img/image00465.jpeg)'
- en: 'If all went well, you should see your predefined folder structure in place,
    ready for you to use, as shown in the following screenshot:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，你应该看到预定义的文件夹结构已经就位，可以供你使用，如下图所示：
- en: '![Automating the creation of our project](img/image00466.jpeg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![自动化创建我们的项目](img/image00466.jpeg)'
- en: This makes it a lot easier to create the folder structure needed and to maintain
    consistency in projects.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做会更容易创建所需的文件夹结构并在项目中保持一致性。
- en: Debugging your application
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调试你的应用程序
- en: At this point, you should have a working application that you can deploy. While
    it has to be said that ours needs more work before it will be ready for release,
    the principles behind deployment are still the same, irrespective of the application!
    There is one small thing I want to cover off, before we look at deployment.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，你应该有一个可以部署的工作应用程序。虽然必须说我们的应用程序在发布前还需要更多的工作，但是部署背后的原理是相同的，不论应用程序如何！在我们看部署之前，有一件小事我想讲一下。
- en: 'Remember how I mentioned Sublime Text will be used throughout this chapter?
    Well, there''s a good reason for this: it lends itself perfectly to build the
    application to a point where we can run it and debug the application. To do this,
    we need to create a new build system file for Sublime Text (such as the one outlined
    as follows, for Windows):'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 还记得我在本章中提到 Sublime Text 将被广泛使用吗？这是有充分理由的：它非常适合构建应用程序，以至于我们可以运行和调试应用程序。为此，我们需要为
    Sublime Text 创建一个新的构建系统文件（例如以下所述的 Windows）：
- en: '[PRE17]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The process to add in the new build file for Sublime is quick—for full details,
    head over to [https://github.com/nwjs/nw.js/wiki/Debugging-with-Sublime-Text-2-and-3](https://github.com/nwjs/nw.js/wiki/Debugging-with-Sublime-Text-2-and-3).
    It's a useful trick to use while developing your application, as the manual build
    process can get very tedious after a while!
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 为 Sublime 添加新的构建文件的过程很快—具体细节，请访问 [https://github.com/nwjs/nw.js/wiki/Debugging-with-Sublime-Text-2-and-3](https://github.com/nwjs/nw.js/wiki/Debugging-with-Sublime-Text-2-and-3)。在开发应用程序时使用这个技巧是很有用的，因为手动构建过程可能会变得非常乏味！
- en: Packaging and deploying your app
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 打包和部署你的应用程序
- en: Okay, so we have a working application that is ready for packaging and deployment;
    how do we turn it into something that we can make available for download?
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，我们有一个可以打包和部署的工作应用程序；我们如何将其转化为可以提供下载的内容？
- en: Packaging a Node-WebKit application is surprisingly easy. There are a couple
    of caveats, but in the main the process centers around dropping all the Node-WebKit
    distributable files into a folder along with our content and shipping it as a
    renamed zipped file.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 打包 Node-WebKit 应用程序出奇的简单。有一些注意事项，但主要过程是将所有的 Node-WebKit 可分发文件和我们的内容一起放入一个文件夹中，然后将其作为重命名的压缩文件发布。
- en: There are several different ways to package our files, depending on the platform
    being used. Let's take a look at a couple of options using the Windows platform,
    beginning with a manual compilation.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种不同的方法可以打包我们的文件，这取决于所使用的平台。让我们看看在 Windows 平台上使用一些选项的情况，首先是手动编译。
- en: Note
  id: totrans-154
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For those of you who work on Apple Macs or Linux, details on how to package
    apps are available at [https://github.com/rogerwang/node-webkit/wiki/How-to-package-and-distribute-your-apps](https://github.com/rogerwang/node-webkit/wiki/How-to-package-and-distribute-your-apps).
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些使用苹果Mac或Linux的人，有关如何打包应用程序的详细信息，请访问[https://github.com/rogerwang/node-webkit/wiki/How-to-package-and-distribute-your-apps](https://github.com/rogerwang/node-webkit/wiki/How-to-package-and-distribute-your-apps)。
- en: Creating packages manually
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 手动创建软件包
- en: 'Assuming that we''re ready to deploy our application, these are the basic steps
    to follow when creating packages manually—for this example, we''ll use the files
    created earlier, in the *Building our simple application* section:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们已经准备好部署我们的应用程序，这些是手动创建软件包时要遵循的基本步骤——对于此示例，我们将使用*构建我们的简单应用程序*部分中早期创建的文件：
- en: Create a new blank ZIP file and add the `package.json`, `ffmpegsumo.dll`, `icudtl.dat`,
    `libEGL.dll`, `libGLESv2.dll`, and `nw.pak` files—these are needed to host the
    site within the cut-down version of Chromium and Node.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的空ZIP文件，并添加`package.json`、`ffmpegsumo.dll`、`icudtl.dat`、`libEGL.dll`、`libGLESv2.dll`和`nw.pak`文件——这些文件是在Chromium和Node的精简版本中托管站点所需的。
- en: Add the `css`, `img`, and `js` folders along with `index.html` to the ZIP file.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`css`、`img`和`js`文件夹以及`index.html`添加到ZIP文件中。
- en: Rename ZIP to the `.nw` file and then run `nw.exe`—this will use the `package.json`
    file to determine what should be run.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将ZIP文件重命名为`.nw`文件，然后运行`nw.exe`——这将使用`package.json`文件来确定应该运行什么。
- en: Note
  id: totrans-161
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that Node-WebKit packages do not protect, obfuscate, digitally sign, or
    make the package secure; this means that making your package open source is a
    much better option, if only to avoid any problems with licensing!
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，Node-WebKit软件包不保护、混淆、数字签名或使软件包安全；这意味着，将您的软件包开源是一个更好的选择，即使只是为了避免任何与许可证相关的问题！
- en: Automating the process
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动化过程
- en: Hang on, creating a package is a manual process that gets tedious after a while
    if we're adding a lot of changes, right?
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 等等，创建一个软件包是一个手动过程，如果我们要添加很多更改，那么这个过程会变得很乏味，对吗？
- en: Absolutely, the smart way forward is to automate the process; we can then combine
    it with a Grunt package, such as `grunt-contrib-watch` (from [https://github.com/gruntjs/grunt-contrib-watch](https://github.com/gruntjs/grunt-contrib-watch)),
    to take care of building our packages as soon as any change is made. There are
    several ways to automate it—my personal favorite is to use `grunt-node-webkit-builder`,
    from [https://github.com/mllrsohn/grunt-node-webkit-builder](https://github.com/mllrsohn/grunt-node-webkit-builder).
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 绝对，智能的前进方式是自动化这个过程；然后，我们可以将其与Grunt软件包结合起来，例如`grunt-contrib-watch`（来自[https://github.com/gruntjs/grunt-contrib-watch](https://github.com/gruntjs/grunt-contrib-watch)），以便在进行任何更改后立即构建我们的软件包。有几种自动化的方法——我个人最喜欢使用`grunt-node-webkit-builder`，来自[https://github.com/mllrsohn/grunt-node-webkit-builder](https://github.com/mllrsohn/grunt-node-webkit-builder)。
- en: Note
  id: totrans-166
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The node-webkit-builder plugin was created by the same developers as the ones
    behind grunt-node-webkit-builder; the only difference is that the latter has additional
    support for use with Grunt. If you want to switch to using Grunt, you can install
    a supplementary package, `grunt-node-webkit-builder-for-nw-updater`, which is
    available at [https://www.npmjs.com/package/grunt-node-webkit-builder-for-nw-updater](https://www.npmjs.com/package/grunt-node-webkit-builder-for-nw-updater).
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: node-webkit-builder插件由与grunt-node-webkit-builder背后的开发人员相同的开发人员创建；唯一的区别是，后者对与Grunt一起使用的额外支持。如果您想切换到使用Grunt，您可以安装一个补充包，`grunt-node-webkit-builder-for-nw-updater`，可在[https://www.npmjs.com/package/grunt-node-webkit-builder-for-nw-updater](https://www.npmjs.com/package/grunt-node-webkit-builder-for-nw-updater)上找到。
- en: 'Let''s take a look at the plugin in action—the exercise assumes that you have
    NodeJS already installed, before continuing with the demo:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看插件的运行情况——在继续演示之前，假设您已经安装了NodeJS：
- en: 'In a new file within the project folder, add the following code and save it
    as `gruntfile.js`:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目文件夹中的一个新文件中，添加以下代码并将其保存为`gruntfile.js`：
- en: '[PRE18]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Next up, we need to install grunt-node-webkit-builder; therefore, go ahead and
    fire up an instance of the NodeJS command prompt and then navigate to the project
    folder, which we used earlier in the *Building our simple application* section.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要安装grunt-node-webkit-builder；因此，请启动NodeJS命令提示符的一个实例，然后导航到我们之前在*构建我们的简单应用程序*部分中使用过的项目文件夹。
- en: 'Enter this command, then press *Enter*, and wait for it to complete:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入此命令，然后按*Enter*，等待其完成：
- en: '[PRE19]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'In the `package.json` file, you will see that the following lines have been
    added, as indicated:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`package.json`文件中，您会看到已添加了以下行，如下所示：
- en: '[PRE20]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Tip
  id: totrans-176
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If you need to see what the `package.json` will look like, then head over to
    [https://github.com/3dd13/sample-nw](https://github.com/3dd13/sample-nw). There
    is a sample file at [https://github.com/3dd13/sample-nw/blob/master/package.json](https://github.com/3dd13/sample-nw/blob/master/package.json),
    which shows the contents of the code we've just entered into our own version of
    the file.
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您需要查看 `package.json` 将会是什么样子，请转到 [https://github.com/3dd13/sample-nw](https://github.com/3dd13/sample-nw)。有一个样本文件位于
    [https://github.com/3dd13/sample-nw/blob/master/package.json](https://github.com/3dd13/sample-nw/blob/master/package.json)，显示了我们刚刚输入到我们自己版本文件中的代码的内容。
- en: At this stage, we're now ready to build our package. At the prompt, type `grunt`
    and then wait for it to complete; you should see it build the package, as shown
    in the following screenshot:![Automating the process](img/image00467.jpeg)
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此阶段，我们现在准备构建我们的包。在提示符处，键入 `grunt`，然后等待它完成；您应该看到它构建了包，如下面的截图所示：![自动化过程](img/image00467.jpeg)
- en: If you revert to the folder where our files are stored, you should now see that
    a `builds` folder has appeared; navigating through it will show you something
    similar to this screenshot, where you have the contents of the `win64` build folder
    displayed:![Automating the process](img/image00468.jpeg)
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您回到我们的文件存储的文件夹，现在应该可以看到一个名为 `builds` 的文件夹已经出现了；在其中导航将会显示类似于此截图的内容，在其中显示了 `win64`
    构建文件夹的内容：![自动化过程](img/image00468.jpeg)
- en: At this stage, we can double-click on the `FileSizeView.exe` application to
    launch the program. This will display our application in all its glory, ready
    for use. Perfect! We can deploy the files now, right?
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此阶段，我们可以双击 `FileSizeView.exe` 应用程序来启动该程序。这将以所有荣耀展示我们的应用程序，准备好使用。完美！我们现在可以部署文件了，对吧？
- en: Deploying your application
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署您的应用程序
- en: Mmm…hold your horses; as you should know by now, we can always do better!
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯…慢点；你现在应该知道，我们总是可以做得更好！
- en: 'Absolutely; in this instance, better comes in the form of creating a setup
    installer so that we only need to distribute a single file. This is much easier
    to work with! It has the added bonus of compressing the files further; in our
    example, by using the open source Inno Setup package, the results drop from approximately
    80 MB to around 30 MB. Let''s take a look at what''s required to produce a setup
    file for the Windows platform:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 绝对可以；在这种情况下，更好的方式是创建一个设置安装程序，这样我们只需要分发一个单个文件。这样更容易处理！它还有额外的好处，可以进一步压缩文件；在我们的示例中，使用开源的
    Inno Setup 软件包，结果从大约 80 MB 降低到约 30 MB。让我们看看为在 Windows 平台上生成安装文件所需的内容：
- en: We first need to download and install Inno Setup. Head over to [http://www.jrsoftware.org/isinfo.php](http://www.jrsoftware.org/isinfo.php)
    and then click on **Download Inno Setup**; the `setup.exe` file can be downloaded
    from the table about halfway down the page.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先需要下载并安装 Inno Setup。前往 [http://www.jrsoftware.org/isinfo.php](http://www.jrsoftware.org/isinfo.php)，然后点击
    **下载 Inno Setup**；`setup.exe` 文件可以从页面中部的表格中下载。
- en: Double-click on the `setup.exe` file and run through the process, accepting
    all the defaults.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击 `setup.exe` 文件并完成流程，接受所有默认设置。
- en: In our project folder, we need to create a new folder called `setup`. This will
    store the source scripts for Inno Setup and the final builds.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的项目文件夹中，我们需要创建一个名为 `setup` 的新文件夹。这将存储用于 Inno Setup 的源脚本和最终构建的文件。
- en: From the code download, go ahead and extract `filesizeview-1.0.iss` and store
    it within the `setup` folder.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从代码下载中，继续提取 `filesizeview-1.0.iss` 并将其存储在 `setup` 文件夹中。
- en: Double-click on the file to launch it and then click on the highlighted icon,
    shown in the following screenshot, to compile the build file:![Deploying your
    application](img/image00469.jpeg)
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击文件以启动它，然后点击下面的高亮图标，如下面的截图所示，编译构建文件：![部署您的应用程序](img/image00469.jpeg)
- en: When completed, Inno Setup will automatically start the newly created installer,
    as shown here:![Deploying your application](img/image00470.jpeg)
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，Inno Setup 将自动启动新创建的安装程序，如此处所示：![部署您的应用程序](img/image00470.jpeg)
- en: We can now follow through the installation process to completion, before using
    the application in anger. Inno Setup has also taken care of the uninstallation
    process, by including a `unins000.exe` file that we can use if we need to remove
    the application from our system.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以跟随安装过程直至完成，在愤怒中使用该应用程序之前。 Inno Setup 还通过包含一个 `unins000.exe` 文件来处理卸载过程，如果我们需要从系统中移除应用程序，我们可以使用它。
- en: For those of you using Mac, there will be similar packages available. Try the
    instructions listed at [http://www.codepool.biz/tech-frontier/mac/make-pkg-installer-on-mac-os-x.html](http://www.codepool.biz/tech-frontier/mac/make-pkg-installer-on-mac-os-x.html)
    as a starting point. You can also try using Inno Setup on Linux, using Wine—the
    instructions are listed at [http://derekstavis.github.io/posts/creating-a-installer-using-inno-setup-on-linux-and-mac-os-x/](http://derekstavis.github.io/posts/creating-a-installer-using-inno-setup-on-linux-and-mac-os-x/),
    although they are not for beginners!
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些使用Mac的人，可能会有类似的软件包可用。作为起点，请尝试[http://www.codepool.biz/tech-frontier/mac/make-pkg-installer-on-mac-os-x.html](http://www.codepool.biz/tech-frontier/mac/make-pkg-installer-on-mac-os-x.html)中列出的说明。您还可以尝试在Linux上使用Wine使用Inno
    Setup，说明列在[http://derekstavis.github.io/posts/creating-a-installer-using-inno-setup-on-linux-and-mac-os-x/](http://derekstavis.github.io/posts/creating-a-installer-using-inno-setup-on-linux-and-mac-os-x/)，尽管它们不适合初学者！
- en: Taking things further
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接下来的事情
- en: Phew! We've certainly covered a lot over the last few pages!
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 哎呀！在过去的几页中，我们确实覆盖了很多内容！
- en: 'However, in the grand scheme of life, we''ve only scratched the surface. We
    can do a lot more with our application or even explore it to help improve our
    skills when using Node-WebKit with jQuery. To get you started, here are a few
    ideas:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，在生活的大计划中，我们只是触及了表面。我们可以在我们的应用程序中做更多的事情，甚至可以探索它来帮助我们在使用Node-WebKit和jQuery时提高技能。为了让你开始，这里有一些想法：
- en: The application is a perfect base for resizing images or even compressing them;
    we can do this online, but there are implications, principally around confidentiality
    and the size of image.
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该应用程序是调整图像大小甚至压缩它们的理想基础；我们可以在线完成这些操作，但有一些影响，主要是关于保密性和图像大小的问题。
- en: The upload facility is only partially working. We use the BlueImp file upload
    plugin, but it's not actually doing anything. How about getting it working within
    our application?
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上传功能只有部分可用。我们使用BlueImp文件上传插件，但它实际上并没有做任何事情。在我们的应用程序中让它正常工作怎么样？
- en: How about displaying an icon for the file type or even a small thumbnail if
    we're uploading an image?
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何显示文件类型的图标，甚至是如果我们上传的是图像的小缩略图？
- en: There's no way to clear the list without restarting the application—it should
    be easy to fix this…
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有办法在不重新启动应用程序的情况下清除列表——修复这个问题应该很容易……
- en: We deliberately didn't include any error checking to keep things simple; how
    about adding in some now?
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们故意没有包括任何错误检查，以保持事情简单；现在加入一些如何？
- en: 'I think the interface is a little limiting in one respect: if we upload a file
    with a really long name, then it is truncated; the truncation is a little messy!'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我认为界面在某种程度上有些受限制：如果我们上传一个文件名非常长的文件，那么它就会被截断；截断有点混乱！
- en: We haven't added any menu controls. While Node-WebKit is perfect for applications
    where speed isn't an issue, it will still be good to be able to navigate around,
    once we've added more functionality. For an example of how to add such a menu,
    take a look at [http://www.4elements.com/blog/2013/12](http://www.4elements.com/blog/2013/12).
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们还没有添加任何菜单控件。虽然Node-WebKit非常适合速度不是问题的应用程序，但一旦我们添加了更多功能，能够进行导航仍然是很好的。要了解如何添加这样的菜单的示例，请参阅[http://www.4elements.com/blog/2013/12](http://www.4elements.com/blog/2013/12)。
- en: 'Hopefully, here you should find a few ideas to inspire you to take things further.
    Once you''ve grasped the basics and allow the occasions where we have to use Node-specific
    tags, the sky is the limit! A fair few people have produced applications of varying
    complexity and released them online—it''s definitely worth doing some research
    online to see what is available. Here are a few ideas:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 希望在这里你能找到一些启发你进一步学习的想法。一旦掌握了基础知识，并允许我们必须使用Node特定标签的场合，就没有限制了！相当多的人已经制作了各种复杂性的应用程序并将它们发布在网上——一定要在网上进行一些研究，看看有什么可用的。以下是一些想法：
- en: The Irish developer Shane Gavin has created a useful video-based tutorial on
    using Node-WebKit. This explores some of the techniques you can use when creating
    Node-WebKit applications, and we've used some of them in our example. The tutorials
    are available at [http://nodehead.co](http://www.nodehead.co).
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 爱尔兰开发人员Shane Gavin创建了一个有用的基于视频的教程，介绍了使用Node-WebKit的方法。这探讨了在创建Node-WebKit应用程序时可以使用的一些技术，我们在我们的示例中使用了其中一些技术。教程可在[http://nodehead.co](http://www.nodehead.co)找到。
- en: I am sure we've all heard of or played games such as *Pong* or *Breakout* in
    some form or other. We can use the Phaser game library at [http://phaser.io](http://phaser.io)
    to produce some of these classic games (and others). Have a look at the example
    shown at [https://github.com/kandran/pong](https://github.com/kandran/pong) that
    uses Node-WebKit to create *Pong*.
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我相信我们都听说过或以某种形式玩过*乒乓球*或*打砖块*等游戏。我们可以使用Phaser游戏库在[http://phaser.io](http://phaser.io)上制作一些经典游戏（以及其他游戏）。看一看在[https://github.com/kandran/pong](https://github.com/kandran/pong)上展示的示例，该示例使用Node-WebKit创建了*乒乓球*。
- en: David Neumann wrote a blog post about how the free educational game *Caterpillar
    Count* was repackaged to work in Node-WebKit; leaving aside the nature of the
    game, the post highlights some useful tips and tricks on the transfer process
    ([http://blog.leapmotion.com/building-applications-for-simultaneous-deployment-on-web-and-native-platforms-or-how-i-learned-to-stop-worrying-and-love-node-webkit/](http://blog.leapmotion.com/building-applications-for-simultaneous-deployment-on-web-and-native-platforms-or-how-i-learned-to-stop-worrying-and-love-node-webkit/)).
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: David Neumann写了一篇关于如何将免费教育游戏*Caterpillar Count*重新打包以在Node-WebKit中运行的博客文章；撇开游戏的性质不谈，这篇文章强调了一些关于转移过程的有用提示和技巧（[http://blog.leapmotion.com/building-applications-for-simultaneous-deployment-on-web-and-native-platforms-or-how-i-learned-to-stop-worrying-and-love-node-webkit/](http://blog.leapmotion.com/building-applications-for-simultaneous-deployment-on-web-and-native-platforms-or-how-i-learned-to-stop-worrying-and-love-node-webkit/)）。
- en: Interested in experimenting with your webcam using HTML5 and Node-WebKit? Head
    over to [http://webcamtoy.com/](http://webcamtoy.com/)—it should be relatively
    easy to adapt the standard code to work from Node-WebKit, as it supports `getUserMedia`.
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对使用HTML5和Node-WebKit尝试你的网络摄像头感兴趣吗？去[http://webcamtoy.com/](http://webcamtoy.com/)吧——将标准代码调整为从Node-WebKit工作应该相对容易，因为它支持`getUserMedia`。
- en: If we're working with video or webcams, we can always look at taking screenshots.
    There is a package available for Node-WebKit to help with this ([https://www.npmjs.com/package/node-webkit-screenshot](https://www.npmjs.com/package/node-webkit-screenshot));
    it can easily form the basis of a useful little application.
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我们要处理视频或网络摄像头，我们可以考虑截图。有一个可用于Node-WebKit的包来帮助实现这一点（[https://www.npmjs.com/package/node-webkit-screenshot](https://www.npmjs.com/package/node-webkit-screenshot)）；它可以很容易地成为一个有用的小应用程序的基础。
- en: We talked earlier about using other JavaScript libraries, such as Ember or Angular,
    that can be easily used with Node-WebKit and jQuery—for two examples, head over
    to [http://www.sitepoint.com/building-chat-app-node-webkit-firebase-angularjs/](http://www.sitepoint.com/building-chat-app-node-webkit-firebase-angularjs/)
    and [http://sammctaggart.com/build-a-markdown-editor-with-node-webkit-and-ember/](http://sammctaggart.com/build-a-markdown-editor-with-node-webkit-and-ember/).
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们之前讨论过使用其他JavaScript库，例如Ember或Angular，这些库可以轻松与Node-WebKit和jQuery一起使用——有两个例子，你可以访问[http://www.sitepoint.com/building-chat-app-node-webkit-firebase-angularjs/](http://www.sitepoint.com/building-chat-app-node-webkit-firebase-angularjs/)和[http://sammctaggart.com/build-a-markdown-editor-with-node-webkit-and-ember/](http://sammctaggart.com/build-a-markdown-editor-with-node-webkit-and-ember/)。
- en: There is an increasing amount of content available online. There have been some
    recent name changes to the library (as was mentioned earlier), so if you want
    to learn more about using Node-WebKit, then it is worth searching for both Node-WebKit
    and NW.js to ensure full coverage.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 现在网上的内容越来越多。图书馆最近进行了一些名称更改（如前所述），所以如果你想了解更多关于使用Node-WebKit的信息，那么值得搜索Node-WebKit和NW.js两个词以确保全面覆盖。
- en: Summary
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In recent years, the dividing line between online and offline applications has
    blurred, with many people using mobile devices to access the Internet in place
    of normal desktop browsers. With the advent of Node-WebKit, this opens up a lot
    of opportunities to merge those boundaries even further—let's recap what we learned
    over the last few pages.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 近年来，在线和离线应用之间的分界线变得模糊，许多人使用移动设备访问互联网来代替正常的桌面浏览器。随着Node-WebKit的出现，这进一步扩大了许多融合这些界限的机会——让我们回顾一下我们在过去几页学到的东西。
- en: We kicked off with what seems to be a typically simple request, where most developers
    will automatically think of designing a site. However, with the introduction of
    Node-WebKit, we can explore creating an offline version of our application or
    site. We explored a little of how the library works as well as discussed the pros
    and cons of running such an application from the desktop.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 我们以似乎是一个典型简单请求开始，大多数开发人员将自动考虑设计一个网站。然而，随着Node-WebKit的引入，我们可以探索创建我们的应用程序或网站的离线版本。我们稍微探讨了一下库的工作原理，以及从桌面运行这种应用程序的利弊。
- en: We then moved on to prepare our development environment before taking a brief
    look at installing Node-WebKit and using it to create our first application. We
    delved into the `package.json` file, which is key to running our application,
    before moving on to build our file size viewer application. Next up came a more
    in-depth look at the code used behind the application; we also covered how we
    can create the basic skeleton of our application using the Yeoman Node-WebKit
    generator.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 接着，我们开始准备开发环境，然后简要介绍了安装 Node-WebKit 并使用它创建我们的第一个应用程序。我们深入研究了 `package.json`
    文件，这对于运行我们的应用程序至关重要，然后开始构建我们的文件大小查看器应用程序。接下来更深入地看了应用程序背后使用的代码；我们还介绍了如何使用 Yeoman
    Node-WebKit 生成器创建应用程序的基本框架。
- en: Next up came a look at a quick tip for debugging Node-WebKit apps, before moving
    on to examine how we can package and deploy our applications either manually or
    automate them using Grunt. The final stage in our journey covered the deployment
    of our application. We looked at using Inno Setup to produce a `setup.exe` file
    that can be deployed for use. We then rounded out the chapter with a look at a
    few ideas of how we can take things further when developing with Node-WebKit.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 接着，我们看了一个快速调试 Node-WebKit 应用程序的小窍门，然后继续研究如何手动打包和部署应用程序，或者使用 Grunt 自动化部署它们。我们旅程的最后阶段涵盖了应用程序的部署。我们研究了使用
    Inno Setup 生成 `setup.exe` 文件以供部署使用。然后我们在章节结束时看了一些在使用 Node-WebKit 开发时可以进一步发展的想法。
- en: 'Phew! We''ve certainly covered a lot, but as they always say, there is no rest
    for the wicked. In the next chapter, we will be taking a look at one of the most
    important parts of using jQuery: optimizing and enhancing the performance of our
    projects.'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 哎呀！我们确实涵盖了很多内容，但正如他们常说的那样，恶人永无休息之日。在下一章中，我们将重点研究 jQuery 使用中最重要的部分之一：优化和提高项目性能。
