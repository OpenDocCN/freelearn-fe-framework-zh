- en: Chapter 4. Managing KnockoutJS Events
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章 管理 KnockoutJS 事件
- en: Interaction between our app and the user is the most important issue we need
    to resolve. In the last three chapters, we have focused on the business requirements,
    so now it is time to think about how to make it easy to use our app to the end
    user.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序与用户之间的交互是我们需要解决的最重要问题。在过去的三章中，我们一直专注于业务需求，现在是时候考虑如何使最终用户更容易使用我们的应用程序了。
- en: Event-driven programming is a powerful paradigm that allows us to isolate our
    code better. KnockoutJS gives us several ways to work with events. We can use
    click binding or event binding if we want to use the declarative paradigm.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 事件驱动编程是一种强大的范式，它能让我们更好地隔离我们的代码。KnockoutJS 给了我们几种处理事件的方式。如果我们想使用声明范式，可以使用点击绑定或者事件绑定。
- en: There are two different paradigms to declare events. The declarative paradigm
    says that we can write JavaScript and custom tags in our HTML. On the other hand,
    we have the imperative paradigm that tells us that we should isolate JavaScript
    code from HMTL markup. For this purpose, we can use jQuery to write unobtrusive
    events and also custom ones. We can wrap custom events using `bindingHandlers`
    in order to reuse them along our applications.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种不同的方式来声明事件。声明范式说我们可以在我们的 HTML 中写 JavaScript 和自定义标签。另一方面，命令范式告诉我们应该将 JavaScript
    代码与 HMTL 标记分开。为此，我们可以使用 jQuery 来编写不显眼的事件，也可以编写自定义事件。我们可以使用 `bindingHandlers` 来包装自定义事件，以便在我们的应用程序中重复使用它们。
- en: Event-driven programming
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件驱动编程
- en: When we use sequential programming to write our apps, we know exactly how our
    app is going to behave. We usually use this kind of programming paradigm when
    our app has no interaction with external agents. In web development, we need to
    use the event-driven programming paradigm because it is the end user who is going
    to lead the flux of the application.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用顺序编程来编写我们的应用程序时，我们会准确地知道我们的应用程序将会如何行为。通常情况下，我们在我们的应用程序与外部代理没有交互时使用这种编程范式。在网页开发中，我们需要使用事件驱动的编程范式，因为最终用户会主导应用程序的流程。
- en: Even though we haven't talked about events earlier, we know what they are because
    we have been using one of the most important events in web development, the click
    event.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 即使我们之前还没谈论过事件，我们知道它们是什么，因为我们一直在使用网页开发中最重要的事件之一，即点击事件。
- en: There are many events that users can throw. A click event, as we mentioned earlier,
    is where the user can press a key on the keyboard; we can also receive events
    from the computer like the ready event to notify us that DOM elements are all
    loaded. Nowadays we also have touch events, if our screen is touchable.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 用户可以触发许多事件。正如我们之前提到的，点击事件是用户可以在键盘上按键的地方；我们还可以从计算机那里接收事件，比如就绪事件，以通知我们 DOM 元素都已加载完毕。现在，如果我们的屏幕是可以触摸的，我们也有触摸事件。
- en: 'We can also define our custom events. This is useful if we want to communicate
    to entities but we don''t want to create a dependency between them. For example,
    suppose we want to add items to our cart. Now the responsibility to add items
    to our cart lies with the view-model. We can create a Cart entity that encapsulates
    all cart behavior: add, edit, delete, show, hide, and so on. If we begin to write
    in our code: `cart.add`, `cart.delete` or `cart.show`, our application will depend
    on the `cart` object. If we create events inside our application, we just need
    to trigger them and forget about what is going to happen, as the event handler
    will manage it for us.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以定义我们自定义的事件。如果我们想要通知实体但又不想创建它们之间的依赖关系，这就很有用。例如，假设我们想向购物车中添加物品。现在添加物品到购物车的责任在于视图模型。我们可以创建一个购物车实体，它封装了所有的购物车行为：添加、编辑、删除、显示、隐藏等等。如果我们开始在我们的代码中写：
    `cart.add`, `cart.delete` 或 `cart.show`，那么我们的应用程序将依赖于 `cart` 对象。如果我们在我们的应用程序中创建事件，那么我们只需要触发它们，然后忘记接下来会发生什么，因为事件处理程序将为我们处理。
- en: 'Event-driven programming allows us to reduce coupling but also reduces cohesion.
    We should choose in which grade you want to maintain your code readable. Event-driven
    programming is sometimes a good solution, but there is one rule we should always
    follow: KISS (Keep It Simple, Stupid). So if an event is an easy solution, get
    it. If events just increase lines in the code and don''t give us a better result,
    maybe you should consider dependency injection as a better approach.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 事件驱动编程能够减少耦合，但也降低内聚。我们应该选择在多大程度上要保持你的代码可读。事件驱动编程有时候是一个好的解决方案，但有一条规则我们应该始终遵循：KISS（保持简单，傻瓜）。所以，如果一个事件是一个简单的解决方案，就采用它。如果事件只是增加了代码行数，却没有给我们带来更好的结果，也许你应该考虑依赖注入作为更好的方法。
- en: '![Event-driven programming](img/7074OS_04_01.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![事件驱动的编程](img/7074OS_04_01.jpg)'
- en: Event-driven programming workflow
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 事件驱动的编程工作流程
- en: The click event
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 点击事件
- en: We have been using the click binding in the last three chapters. In this one,
    you are going to learn more about this event. The click event is the basic event
    that users use to interact with an application since the mouse has been the peripheral
    par excellence (also the keyboard).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的三章中，我们一直在使用点击绑定。在这一章中，您将学习更多关于这个事件。点击事件是用户与应用程序进行交互的基本事件，因为鼠标一直是外设的首选（也是键盘）。
- en: You must have learned that if you attach a function to the click binding, this
    function is fired with the click event. The problem is that in Knockout the click
    event doesn't accept parameters. The arguments of our click function are predefined,
    as far as we know.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经了解到，如果将函数附加到点击绑定上，那么这个函数将会随着点击事件触发。问题在于，在Knockout中，点击事件不接受参数。据我们所知，我们点击函数的参数是预定义的。
- en: Passing more parameters
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 传递更多参数
- en: 'As we have mentioned, the function we bind to the click event has a predefined
    signature: `function functionName(data, event){...}`, and both the parameters
    are already assigned: data is the data bound to the element and event is the click
    event object. So what happens if we want to pass more parameters? We have three
    solutions, which are as follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所提到的，我们绑定到点击事件的函数具有预定义的签名：`function functionName(data, event){...}`，并且这两个参数已经被分配：data是绑定到元素的数据，event是点击事件对象。那么如果我们想传递更多的参数会发生什么呢？我们有三种解决方案，如下所示：
- en: 'The first one is to bind the parameters in the view-model:'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一种是在视图模型中绑定参数：
- en: '[PRE0]'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The second option is to write the function inline. This is interesting if we
    want to pass the parameters directly from context objects in the template.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二种选择是内联编写函数。如果我们想直接从模板中的上下文对象传递参数，那么这是一个有趣的选择。
- en: '[PRE1]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Our third and final solution is a variant of the second one but more elegant:'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们的第三个和最终的解决方案是第二个的变体，但更加优雅：
- en: '[PRE2]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We can use the one that best approximates our needs. For example, if the parameters
    we want to pass are constants or observables from the view-model, we can use the
    first one. But if we need to pass context variables, such as `$parent`, we can
    use the last one.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用最接近我们需求的那个。例如，如果我们想要传递的参数是视图模型中的常量或可观察对象，我们可以使用第一个。但是，如果我们需要传递上下文变量，比如`$parent`，我们可以使用最后一个。
- en: The `bind` function is native to JavaScript. It creates another function using
    `$data` as its context and then applies the rest of the arguments to itself. You
    will find more information at [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`bind`函数是JavaScript原生的。它使用`$data`作为上下文创建另一个函数，然后将其余的参数应用到自身。您可以在[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind)找到更多信息。'
- en: Allowing the default click action
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 允许默认点击操作
- en: 'By default, KnockoutJS prevents the default action on click. This means that
    if you use the click action in an anchor tag (`<a>`), the browser will run the
    action we have linked and will not navigate to the link''s `href`. This default
    behavior is useful because if you use a click binding, it is usually because you
    want to perform a different action. If you want to allow the browser to run the
    default action, just return `true` at the end of your function:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，KnockoutJS阻止了点击时的默认操作。这意味着如果您在锚标签(`<a>`)中使用了点击操作，浏览器将执行我们已经链接的操作，而不会导航到链接的`href`。这种默认行为非常有用，因为如果您使用点击绑定，通常是因为您想执行不同的操作。如果您想允许浏览器执行默认操作，只需在函数末尾返回`true`：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Event bubbling
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 事件冒泡
- en: By default, Knockout allows the click event to continue to bubble up to any
    higher level event handlers. If your element has a parent that also handles the
    click event, you will fire both functions. To avoid the bubbling event, you need
    to include an additional binding that is named `clickBubble` and you should set
    it to `false`.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Knockout允许点击事件继续冒泡到任何更高级别的事件处理程序。如果您的元素有一个也处理点击事件的父级，那么您将触发两个函数。为了避免冒泡事件，您需要包含一个名为`clickBubble`的附加绑定，并将其设置为`false`。
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![Event bubbling](img/7074OS_04_02.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![事件冒泡](img/7074OS_04_02.jpg)'
- en: Event-bubbling workflow
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 事件冒泡的工作流程
- en: Event types
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件类型
- en: There are many types of events that a browser can throw. You can find a complete
    reference at [https://developer.mozilla.org/en-US/docs/Web/Events](https://developer.mozilla.org/en-US/docs/Web/Events).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器可以抛出许多类型的事件。 您可以在[https://developer.mozilla.org/en-US/docs/Web/Events](https://developer.mozilla.org/en-US/docs/Web/Events)找到完整的参考资料。
- en: 'As we know, each browser has its own set of instructions; therefore, we can
    classify events into the following groups:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所知，每个浏览器都有自己的一套指令； 因此，我们可以将事件分类为以下几组：
- en: '**Standard events**: These events are defined in official Web specifications,
    and should be common across browsers.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标准事件**：这些事件在官方 Web 规范中定义，应该在各种浏览器中普遍存在。'
- en: '**Non-standard events**: These events are defined for each browser engine specifically.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**非标准事件**：这些事件是为每个浏览器引擎专门定义的。'
- en: '**Mozilla-specific events**: These events are used in add-ons development and
    include the following:'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Mozilla特定事件**：这些事件用于插件开发，包括以下内容：'
- en: Add-on-specific events
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插件特定事件
- en: XUL events
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: XUL 事件
- en: Event binding
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件绑定
- en: 'To catch and handle all these different events, Knockout has the `event` binding.
    We are going to use it to show and hide the debug panel when the mouse goes over
    and out of text, with the help of the following code:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 为了捕获和处理所有这些不同的事件，Knockout 有`event`绑定。 我们将使用它在文本上方和离开时显示和隐藏调试面板，借助以下代码的帮助：
- en: 'The first update of the `index.html` template is as follows. Replace the debug
    div with this new HTML:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`index.html` 模板的第一个更新如下。 用这个新的 HTML 替换调试 div：'
- en: '[PRE5]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This code says that when we set the mouse over the `div` element, we will show
    the debug panel. Initially, only the `h3` tag content will be displayed.
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该代码表示，当我们将鼠标悬停在`div`元素上时，我们将显示调试面板。 最初，只显示`h3`标签内容。
- en: 'When we set the mouse over the `h3` tag, we will update the debug variable
    value and the debug panel will be displayed. To achieve this, we need to update
    our view-model with this code:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们将鼠标悬停在`h3`标签上时，我们将更新调试变量的值，并显示调试面板。 为了实现这一点，我们需要使用以下代码更新我们的视图模型：
- en: '[PRE6]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Then we need to update our interface (the return value of our view-model).
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们需要更新我们的接口（视图模型的返回值）。
- en: '[PRE7]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now when the mouse goes over the `h3` tag, the debug panel will be showed. Try
    it!
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在当鼠标悬停在`h3`标签上时，调试面板将显示。 试试吧！
- en: Unobtrusive events with jQuery
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无侵入 jQuery 事件
- en: In the last few years, it has been a good practice to remove all JavaScript
    from HTML templates. If we remove all JavaScript code from HTML templates and
    encapsulate it in JavaScript files, we are doing imperative programming. On the
    other hand, if we write JavaScript code or use components and bindings in HTML
    files, we are using declarative programming. Many programmers don't like to use
    declarative programming. They think this makes it more difficult for designers
    to work with templates. We should note that designers are not programmers and
    they may not understand JavaScript syntax. Besides, declarative programming splits
    related code into different files and may make it difficult to understand how
    the entire application works. Also, they point out that the two-way binding makes
    models inconsistent because they are updated on the fly, without any validation.
    On the other side, we have people who think that declarative programming makes
    code more maintainable, modular, and readable, and say that if you use imperative
    programming, you need to fill the markup with unnecessary IDs and classes.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去几年里，从 HTML 模板中删除所有 JavaScript 代码已经成为一个良好的做法。 如果我们从 HTML 模板中删除所有 JavaScript
    代码并将其封装在 JavaScript 文件中，我们就是在进行命令式编程。 另一方面，如果我们在 HTML 文件中编写 JavaScript 代码或使用组件和绑定，我们就是在使用声明式编程。
    许多程序员不喜欢使用声明式编程。 他们认为这使得设计人员更难以处理模板。 我们应该注意，设计人员不是程序员，他们可能不理解 JavaScript 语法。 此外，声明式编程将相关代码拆分为不同的文件，可能使人们难以理解整个应用程序的工作方式。
    此外，他们指出，双向绑定使模型不一致，因为它们在没有任何验证的情况下即时更新。 另一方面，有人认为声明式编程使代码更易于维护，模块化和可读性强，并且说如果您使用命令式编程，您需要在标记中填充不必要的
    ID 和类。
- en: There is no absolute truth. You should find the balance between both paradigms.
    The declarative nature works great at removing regularly-used features and making
    them simple. The `foreach` binding and its brothers, along with semantic HTML
    (components), make the code easy to read and remove complexity. We'd have to write
    on our own in JavaScript with selectors to interact with the DOM, and provide
    a common platform for teams so they can focus on how the application works, and
    not on how templates and models communicate with each other.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 没有绝对的真理。你应该在两种范式之间找到平衡。声明式本质在消除常用功能并使其变得简单方面表现得很出色。`foreach` 绑定及其兄弟，以及语义 HTML（组件），使代码易于阅读并消除了复杂性。我们必须自己用
    JavaScript 编写，使用选择器与 DOM 交互，并为团队提供一个共同的平台，使他们可以专注于应用程序的工作原理，而不是模板和模型之间的通信方式。
- en: There are other frameworks such as Ember, React, or AngularJS that use declarative
    paradigm with success, so it isn't such a bad idea after all. But if you feel
    more comfortable defining events with jQuery, you are going to learn how to do
    it. We are going to write the **Confirm Order** button in an unobtrusive way.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他框架，如 Ember、React 或 AngularJS，它们成功地使用了声明式范式，因此这并不是一个坏主意。但是，如果你感觉更舒适地使用 jQuery
    定义事件，你将学会如何做。我们将以不引人注目的方式编写 **确认订单** 按钮。
- en: 'First of all, remove the `data-bind` attribute and add an ID to locate the
    button:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除 `data-bind` 属性并添加一个 ID 来定位按钮：
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now write this JavaScript code just over the `applyBindings` method:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在 `applyBindings` 方法的上方写入这段 JavaScript 代码：
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Both the methods are correct; it's the programmer who makes the decision about
    which paradigm to choose.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种方法都是正确的；决定选择哪种范式是程序员的决定。
- en: If we choose to write our events in a jQuery manner, it is also a good practice
    to join all your events in files. If you don't have many events, you can have
    a file called `events.js`, or if you have many events, you can have several files
    such as `catalog.events.js` or `cart.events.js`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们选择以 jQuery 的方式编写我们的事件，将所有事件合并到文件中也是一个好习惯。如果你没有很多事件，你可以有一个名为 `events.js`
    的文件，或者如果你有很多事件，你可以有几个文件，比如 `catalog.events.js` 或 `cart.events.js`。
- en: '![Unobtrusive events with jQuery](img/7074OS_04_03.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![使用 jQuery 实现不引人注目的事件](img/7074OS_04_03.jpg)'
- en: Imperative paradigm versus declarative paradigm
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 命令式范式与声明式范式
- en: Delegation pattern
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 委托模式
- en: When we work with a big amount of data, normal event handling can impact the
    performance. There is a technique to improve the response time of the events.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们处理大量数据时，普通的事件处理会影响性能。有一种技术可以提高事件的响应时间。
- en: When we link the event directly to the item, the browser creates an event for
    each item. However, we can delegate the event to other elements. Usually, this
    element can be the document or the parent of the element. In this case, we are
    going to delegate it to the document that is the event for adding or removing
    one unit from a product. The problem is that if we just define one event manager
    for all the products, how do we set the product we are managing? KnockoutJS gives
    us some useful methods to succeed in this, `ko.dataFor` and `ko.contextFor`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们直接将事件链接到项目时，浏览器为每个项目创建一个事件。然而，我们可以将事件委托给其他元素。通常，这个元素可以是文档或元素的父级。在这种情况下，我们将其委托给文档，即添加或移除产品中的一个单位的事件。问题在于，如果我们只为所有产品定义一个事件管理器，那么我们如何设置我们正在管理的产品？KnockoutJS
    为我们提供了一些有用的方法来成功实现这一点，`ko.dataFor` 和 `ko.contextFor`。
- en: 'We should update the `cart-item.html` file''s add and remove buttons by adding
    the `add-unit` and `remove-unit` classes respectively:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们应该通过分别添加 `add-unit` 和 `remove-unit` 类来更新 `cart-item.html` 文件中的添加和移除按钮：
- en: '[PRE10]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Then we should add two new events just below the `Confirm Order` event:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们应该在 `确认订单` 事件的下方添加两个新事件：
- en: '[PRE11]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Using the `ko.dataFor` method, we can get the same content we obtain with `$data`
    if we were inside a KnockoutJS context. For more information on unobstrusive event
    handlers, go to [http://knockoutjs.com/documentation/unobtrusive-event-handling.html](http://knockoutjs.com/documentation/unobtrusive-event-handling.html)
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `ko.dataFor` 方法，我们可以获得与我们在 KnockoutJS 上下文中使用 `$data` 获得的相同内容。有关不引人注目的事件处理的更多信息，请访问[http://knockoutjs.com/documentation/unobtrusive-event-handling.html](http://knockoutjs.com/documentation/unobtrusive-event-handling.html)
- en: 'If we want to access the context, we should use `ko.contextFor`; as in this
    example:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们想要访问上下文，我们应该使用 `ko.contextFor`；就像这个例子一样：
- en: '[PRE12]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'So if we have thousands of products, we continue to have only two event handlers
    instead of thousands. The following diagram shows how the delegate pattern improves
    performance:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果我们有数千种产品，我们仍然只有两个事件处理程序，而不是数千个。以下图表显示了代理模式如何提高性能：
- en: '![Delegation pattern](img/7074OS_04_04.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![代理模式](img/7074OS_04_04.jpg)'
- en: The delegate pattern improves performance
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 代理模式提高了性能。
- en: Building custom events
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建自定义事件
- en: Sometimes we need to make two or more entities of our application communicate
    with each other, that are not related. For example, we want to keep our cart independent
    of the application. We can create custom events to update it from the outside
    and the cart will react to this event; applying the business logic that is required.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我们需要使应用程序中的两个或多个实体进行通信，这些实体彼此不相关。例如，我们希望将我们的购物车保持独立于应用程序。我们可以创建自定义事件来从外部更新它，购物车将对此事件做出反应；应用所需的业务逻辑。
- en: 'We can split the event in two different events: the click and the action. So
    when we click on the up arrow to add a product, we fire a new custom event that
    handles the addition of a new unit, and the same to remove it. This give us more
    information about what is happening in our application, and we realize that a
    general meaning event such as click just gets the data and sends it to a more
    specialized event handler that knows what to do with it. This means we can reduce
    the number of events to just one.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将事件拆分为两个不同的事件：点击和动作。因此，当我们点击上箭头添加产品时，我们触发一个新的自定义事件来处理添加新单位的操作，删除产品时同样如此。这为我们提供了关于应用程序中正在发生的事情的更多信息，我们意识到一个通用含义的事件，比如点击，只是获取数据并将其发送到更专业的事件处理程序，该处理程序知道该怎么做。这意味着我们可以将事件数量减少到只有一个。
- en: 'Create a `click` event handler at the end of the `viewmodel.js` file that throws
    a custom event:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`viewmodel.js`文件末尾创建一个`click`事件处理程序，抛出一个自定义事件：
- en: '[PRE13]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Bold lines show how we should use the jQuery trigger method to emit a custom
    event. Instead of focusing on the element that triggers an action, custom events
    put the spotlight on the element being acted upon. That gives us some benefits,
    such as clarity in the code because custom events have a meaning about their behavior
    in their names (of course we can call an event `event1`, but we don't like this
    practice, do we?).
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 粗体行展示了我们如何使用 jQuery 触发方法来发出自定义事件。与关注触发动作的元素不同，自定义事件将焦点放在被操作的元素上。这给了我们一些好处，比如代码清晰，因为自定义事件在其名称中有关于其行为的含义（当然我们可以称事件为`event1`，但我们不喜欢这种做法，对吧？）。
- en: You can read more about custom events and see some examples in the jQuery documentation
    at [http://learn.jquery.com/events/introduction-to-custom-events/](http://learn.jquery.com/events/introduction-to-custom-events/).
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以在 jQuery 文档中阅读更多关于自定义事件的内容，并查看一些示例，网址为[http://learn.jquery.com/events/introduction-to-custom-events/](http://learn.jquery.com/events/introduction-to-custom-events/)。
- en: Now that we have defined our events, it is time to move all of them to an isolated
    file. We call this file `cart/events.js`. This file will contain all the events
    of our application.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经定义了我们的事件，是时候将它们全部移到一个隔离的文件中了。我们将这个文件称为`cart/events.js`。这个文件将包含我们应用程序的所有事件。
- en: '[PRE14]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Finally, add the file to the end of the script section just below the `viewmodel.js`
    script:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将文件添加到脚本部分的末尾，就在`viewmodel.js`脚本的下方：
- en: '[PRE15]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: We should notice that now the communication with the cart is done using events,
    and we have no evidence that there is an object called `cart`. We just know that
    the object we talk to has an interface that has two methods, `addUnit` and `removeUnit`.
    We can change the object in the interface (HTML) and if we respect the interface,
    it will work as we expect.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该注意到现在与购物车的通信是使用事件完成的，并且我们没有证据表明有一个名为`cart`的对象。我们只知道我们要与之通信的对象具有两个方法的接口，即`addUnit`和`removeUnit`。我们可以更改接口中的对象（HTML），如果我们遵守接口，它将按照我们的期望工作。
- en: Events and bindings
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件和绑定
- en: We can wrap events and custom events inside `bindingHandlers`. Suppose we want
    filter products just when we press the *Enter* key. This allows us to reduce the
    calls we make to the filter method, and if we are making calls to the server,
    this practice can help us reduce traffic.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将事件和自定义事件包装在`bindingHandlers`中。假设我们希望仅在按下*Enter*键时过滤产品。这使我们能够减少对过滤方法的调用，并且如果我们正在对服务器进行调用，这种做法可以帮助我们减少流量。
- en: 'Define the custom binding handler in the `custom/koBindings.js` file:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在`custom/koBindings.js`文件中定义自定义绑定处理程序：
- en: '[PRE16]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Since this is an event, we should remember that event initialization can be
    set in the `init` method itself. We catch the `keypress` event with jQuery and
    track the key that has been pressed. The key code for the *Enter* key is 13\.
    If we press the *Enter* key, we will call the `executeOnEnter` binding value in
    the context of the view-model. That is what `allBindings.executeOnEnter.call(viewModel);`
    does.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这是一个事件，我们应该记住事件初始化可以在`init`方法本身中设置。我们用 jQuery 捕获`keypress`事件并跟踪被按下的键。*Enter*键的键码是13。如果我们按下*Enter*键，我们将在视图模型的上下文中调用`executeOnEnter`绑定值。这就是`allBindings.executeOnEnter.call(viewModel);`所做的。
- en: 'Then we need to update our view-model because our filtered catalog is a computed
    observable that updates itself every time a key goes down. Now we need to convert
    this computed observable into a simple observable array. So update your `filteredCatalog`
    variable as follows:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们需要更新我们的视图模型，因为我们的过滤目录是一个计算的可观察数组，每当按下键时都会更新自身。现在我们需要将这个计算的可观察数组转换为一个简单的可观察数组。因此，请根据以下方式更新您的`filteredCatalog`变量：
- en: '[PRE17]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Realize the consequence of the following change:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 意识到以下更改的后果：
- en: '[PRE18]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: We are not making a copy, but instead we are creating a reference. If we do
    it that way, we will lose items when we filter the catalog, and we will not be
    able to get them again.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不是在制作副本，而是在创建一个引用。如果我们这样做，当我们过滤目录时，我们将丢失项目，而且我们将无法再次获取它们。
- en: 'Now we should create a method that filters the items of the catalog. The code
    for this function is similar to the computed value we had in the previous version:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们应该创建一个过滤目录项目的方法。这个函数的代码与我们在上一个版本中拥有的计算值类似：
- en: '[PRE19]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now add it to the `return` statement:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将其添加到`return`语句中：
- en: '[PRE20]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The last step is to update the search element inside the `catalog.html` template:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是更新`catalog.html`模板中的搜索元素：
- en: '[PRE21]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Now, if you write in the search, the input items are not updated; however, when
    you press *Enter*, the filter is applied.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您在搜索框中输入内容，输入项目将不会更新；然而，当您按下*Enter*键时，过滤器会应用。
- en: 'This is how our folder structure looks after inserting the new code:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在插入新代码后我们的文件夹结构的样子：
- en: '![Events and bindings](img/7074OS_04_05.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![事件和绑定](img/7074OS_04_05.jpg)'
- en: Folder structure
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 文件夹结构
- en: Summary
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you have learned how to manage events using Knockout and jQuery.
    You have learned how to combine both technologies to apply different techniques
    depending on the requirements of your project. We can use declarative paradigms
    to combine event attaching, `bindingHandlers` and HTML markup, or we can isolate
    events in the JavaScript code using jQuery events.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您已经学会了如何使用 Knockout 和 jQuery 管理事件。您已经学会了如何结合这两种技术，以根据项目的要求应用不同的技术。我们可以使用声明性范例来组合事件附加、`bindingHandlers`和
    HTML 标记，或者我们可以使用 jQuery 事件将事件隔离在 JavaScript 代码中。
- en: In the next chapter, we will address the issue of communicating with the server.
    You will learn how to validate the input from the user to be sure that we send
    clean and proper data to the server.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将解决与服务器通信的问题。您将学习如何验证用户输入，以确保我们向服务器发送干净和正确的数据。
- en: Also we will go through mocking techniques to fake the data server-side. Using
    mock libraries will help us to develop our frontend application without the necessity
    for a full operative server. In order to send an AJAX request, we will get a very
    simple server to run our application because browsers don't allow local AJAX requests
    by default.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将学习模拟数据服务器端的技术。使用模拟库将帮助我们开发我们的前端应用程序，而无需一个完整的操作服务器。为了发送 AJAX 请求，我们将启动一个非常简单的服务器来运行我们的应用程序，因为浏览器默认不允许本地
    AJAX 请求。
- en: 'Remember that you can check the code for this chapter at GitHub:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，您可以在 GitHub 上检查本章的代码：
- en: '[https://github.com/jorgeferrando/knockout-cart/tree/chapter4](https://github.com/jorgeferrando/knockout-cart/tree/chapter4)'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/jorgeferrando/knockout-cart/tree/chapter4](https://github.com/jorgeferrando/knockout-cart/tree/chapter4)'
