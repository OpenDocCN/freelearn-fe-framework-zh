- en: Chapter 4. DOM Manipulation Methods
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章。 DOM操作方法
- en: Washed his hands of a deadly fate
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 洗手不干拯救灾厄
- en: ''
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: He put himself in an altered state
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 他让自己处于一种改变的状态。
- en: ''
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: —Devo,
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: -Devo，
- en: ''
  id: totrans-6
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '"Mecha-mania Boy"'
  id: totrans-7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “机械狂热男孩”
- en: All of the methods in this chapter manipulate the DOM in some manner. A few
    of them simply change one of the attributes of an element, while others set an
    element's style properties. Still others modify entire elements (or groups of
    elements) themselves—inserting, copying, removing, and so on.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的所有方法都以某种方式操作DOM。其中一些只是改变元素的某个属性，而另一些则设置元素的样式属性。还有一些修改了整个元素（或元素组）本身-插入、复制、删除等等。
- en: A few of these methods such as `.attr(), .html()`, and `.val()` also act as
    **getters**, retrieving information from DOM elements for later use.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法中的一些，如`.attr()`、`.html()`和`.val()`，也充当**获取器**，从DOM元素中检索信息以供以后使用。
- en: General Attributes
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通用属性
- en: .attr(attribute)
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .attr(attribute)
- en: '| Gets the value of an attribute for the first element in the set of matched
    elements.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '| 获取匹配元素集合中第一个元素的属性值。'
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '|'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数
- en: 'attribute: The name of the attribute to get'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 属性：要获取的属性名称
- en: Return Value
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: A string containing the attribute value.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 包含属性值的字符串。
- en: Description
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: 'We can get any attribute of an element rather easily without jQuery, by using
    the native JavaScript function `getAttribute`. Additionally, most of these attributes
    are available through JavaScript as DOM node properties. Some of the more common
    properties are:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以利用原生JavaScript函数`getAttribute`非常容易地获取元素的任何属性，而无需使用jQuery。此外，这些属性中的大多数都可以通过JavaScript作为DOM节点属性使用。其中一些更常见的属性是：
- en: '`className`'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`className`'
- en: '`tagName`'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`标签名`'
- en: '`id`'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`id`'
- en: '`href`'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`href`'
- en: '`title`'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`title`'
- en: '`rel`'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rel`'
- en: '`src`'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src`'
- en: 'Let''s consider the following link:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑以下链接：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Using jQuery''s `.attr` method to get an element''s attribute has two main
    advantages:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 使用jQuery的`.attr`方法获取元素的属性有两个主要优点：
- en: '**Convenience**: it can be chained to a jQuery object.'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**便利性**：它可以链接到jQuery对象。'
- en: '**Cross-browser consistency**: The `.attr` method always gets the actual attribute
    text, regardless of which browser is being used. On the other hand, when using
    `getAttribute()` with attributes such as `href, src`, and `cite`, some browsers
    (correctly) get the attribute text, while others get the absolute URL, regardless
    of whether the attribute has an absolute URL or a relative one.'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**跨浏览器一致性**：`.attr`方法始终获取实际的属性文本，而不管使用哪个浏览器。另一方面，当使用`getAttribute()`获取诸如`href、src`和`cite`等属性时，一些浏览器（如正确地）获取属性文本，而另一些浏览器获取绝对URL，而不管属性是绝对URL还是相对URL。'
- en: In order to use `getAttribute()` or any of an element's properties as a substitute
    for `.attr()`, we need to make sure that we are working with a DOM node rather
    than a jQuery object. To convert the first element represented in a jQuery object
    to a DOM node, we can use either `[0]` or `.get(0)`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用`getAttribute()`或元素的任何属性替换`.attr()`，我们需要确保我们使用的是DOM节点，而不是jQuery对象。要将jQuery对象中表示的第一个元素转换为DOM节点，我们可以使用`[0]`或`.get(0)`。
- en: 'All of the following use `getAttribute(''title'')` to get its `title` attribute:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 以下所有用`getAttribute('title')`获取其`title`属性：
- en: '`document.getElementById(''myid'').getAttribute(''title'')`'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`document.getElementById(''myid'').getAttribute(''title'')`'
- en: '`$(''#myid'').get(0).getAttribute(''title'')`'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''#myid'').get(0).getAttribute(''title'')`'
- en: '`$(''#myid'')[0].getAttribute(''title'')`'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''#myid'')[0].getAttribute(''title'')`'
- en: With any of these options, we could replace `.getAttribute('title')` with `.title`.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 通过任何这些选项，我们都可以用`.title`替换`.getAttribute('title')`。
- en: .attr()
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .attr()
- en: '| Sets one or more attributes for the set of matched elements.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '| 设置匹配元素集合中一个或多个属性。'
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '|'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters (first version)
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数（第一个版本）
- en: 'attribute: The name of the attribute to set'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 属性：要设置的属性名称
- en: 'value: A value to set for the attribute'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 值：要为属性设置的值
- en: Parameters (second version)
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数（第二个版本）
- en: 'map: A map of attribute-value pairs to set'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 映射：要设置的属性-值对映射
- en: Parameters (third version)
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数（第三个版本）
- en: 'attribute: The name of the attribute to set'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 属性：要设置的属性名称
- en: 'function: A function returning the value to set'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数：返回要设置的值的函数
- en: Return Value
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: The jQuery object, for chaining purposes.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery对象，用于链接目的。
- en: Description
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: 'The `.attr` method is a convenient and powerful way to set the value of attributes
    especially when setting multiple attributes or values returned by a function.
    Let''s consider the following image:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`.attr`方法是一种方便而强大的设置属性值的方式，尤其是在设置多个属性或函数返回的值时。我们来考虑以下图片：'
- en: '[PRE3]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: .attr(attribute, value)
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: .attr(attribute, value)
- en: 'We change the `alt` attribute by putting `''alt''` followed by a comma and
    the new value inside the `.attr` method''s parentheses:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过在`.attr`方法的括号内放置`'alt'`后跟逗号和新值来更改`alt`属性：
- en: '[PRE4]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We can *add* an attribute in the same way:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过相同的方式*添加*一个属性：
- en: '[PRE5]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: .attr({map})
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`.attr({map})`'
- en: 'To change the `alt` attribute and add the `title` attribute at the same time,
    we can pass both sets of names and values into the method at once using a map
    (JavaScript object syntax). We join each attribute to its value with a colon and
    separate each pair with a comma:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 要同时更改`alt`属性并添加`title`属性，我们可以将名字和值的两套都一次传递到方法中，使用映射（JavaScript对象语法）。我们用冒号将每个属性连接到其值，并用逗号分隔每对：
- en: '[PRE6]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: When setting multiple attributes, the quotation marks around the attribute names
    are optional.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置多个属性时，围绕属性名称的引号是可选的。
- en: .attr(attribute, function)
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`.attr(属性, 函数)`'
- en: 'By using a function to set attributes, we can concatenate a new value with
    an existing value:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用函数设置属性，我们可以将新值与现有值连接起来：
- en: '[PRE7]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This use of a function can be even more useful when we apply the attributes
    to multiple elements.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将属性应用于多个元素时，函数的这种用法甚至更有用。
- en: .removeAttr()
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`.removeAttr()`'
- en: '| Removes an attribute from each element in the set of matched elements.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '| 从匹配元素集中的每个元素中删除一个属性。'
- en: '[PRE8]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '|'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数
- en: 'attribute: An attribute'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 属性：属性
- en: Return Value
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: The jQuery object, for chaining purposes.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 用于链式调用的jQuery对象。
- en: Description
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: The `.removeAttr` method uses the JavaScript `removeAttribute` function, but
    it has the advantage of being able to be chained to a jQuery selector expression.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`.removeAttr`方法使用JavaScript的`removeAttribute`函数，但它具有可以链接到jQuery选择器表达式的优势。'
- en: Style Properties
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 样式属性
- en: .css(property)
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`.css(属性)`'
- en: '| Gets the value of a style property for the first element in the set of matched
    elements.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '| 获取匹配元素集中第一个元素的样式属性值。'
- en: '[PRE9]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '|'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数
- en: 'property: A CSS property'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 属性：CSS属性
- en: Return Value
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: A string containing the CSS property value.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 包含CSS属性值的字符串。
- en: Description
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: 'The `.css` method is a convenient way to get a style property from the first
    matched element, especially in the light of the different terms browser''s use
    for certain properties. For example, Internet Explorer''s DOM implementation refers
    to the `float` property as `styleFloat`, while Mozilla-based browsers refer to
    it as `cssFloat`. The `.css` method accounts for such differences, producing the
    same result no matter which term we use. For example, an element that is floated
    left will return the string `left` for each of the following three lines:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`.css`方法是一种方便的方法，可以从第一个匹配的元素中获取样式属性，尤其是考虑到不同浏览器对某些属性使用不同术语的情况。例如，Internet Explorer的DOM实现将`float`属性称为`styleFloat`，而基于Mozilla的浏览器将其称为`cssFloat`。`.css`方法考虑到这些差异，无论我们使用哪个术语，都会产生相同的结果。例如，一个向左浮动的元素将为以下三行中的每行返回字符串`left`：'
- en: '`$(''div.left'').css(''float'')`;'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''div.left'').css(''float'')`;'
- en: '`$(''div.left'').css(''cssFloat'')`;'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''div.left'').css(''cssFloat'')`;'
- en: '`$(''div.left'').css(''styleFloat'')`;'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''div.left'').css(''styleFloat'')`;'
- en: Also, jQuery can equally interpret the CSS and DOM formatting of multiple-word
    properties. For example, jQuery understands and returns the correct value for
    both `.css('background-color')` and `.css('backgroundColor')`.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，jQuery可以同样解释多词属性的CSS和DOM格式。例如，jQuery能正确理解和返回`.css('background-color')`和`.css('backgroundColor')`的正确值。
- en: .css()
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`.css()`'
- en: '| Sets one or more CSS properties for the set of matched elements.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '| 设置匹配元素集的一个或多个CSS属性。'
- en: '[PRE10]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '|'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters (first version)
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数（第一个版本）
- en: 'property: A CSS property name'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 属性：CSS属性名称
- en: 'value: A value to set for the property'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 值：要设置的值
- en: Parameters (second version)
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数（第二个版本）
- en: 'map: A map of property-value pairs to set'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: map：要设置的属性值对的映射
- en: Parameters (third version)
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数（第三个版本）
- en: 'property: A CSS property name'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 属性：CSS属性名称
- en: 'function: A function returning the value to set'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数：返回要设置的值
- en: Return Value
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: The jQuery object, for chaining purposes.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 用于链式调用的jQuery对象。
- en: Description
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: As with the `.attr` method, the `.css` method makes setting properties of elements
    quick and easy. This method can take either a comma-separated key-value pair or
    a map of colon-separated key-value pairs (JavaScript object notation).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 与`.attr`方法一样，`.css`方法使得设置元素属性变得快速而简便。这个方法可以接受以逗号分隔的键值对或以冒号分隔的键值对的映射（JavaScript对象表示法）。
- en: 'Also, jQuery can equally interpret the CSS and DOM formatting of multiple-word
    properties. For example, jQuery understands and returns the correct value for
    both `.css({''background-color'':''#ffe'', ''border-left'': ''5px solid #ccc''})`
    and `.css({backgroundColor:''#ffe'', borderLeft: ''5px solid #ccc''})`. Notice
    that with the DOM notation, quotation marks around the property names are optional,
    but with CSS notation they''re required due to the hyphen in the name.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '此外，jQuery 可以同样解释多词属性的 CSS 和 DOM 格式。例如，jQuery 理解并返回了 `.css({''background-color'':''#ffe'',
    ''border-left'': ''5px solid #ccc''})` 和 `.css({backgroundColor:''#ffe'', borderLeft:
    ''5px solid #ccc''})` 两者的正确值。请注意，使用 DOM 标记，属性名称周围的引号是可选的，但使用 CSS 标记时，由于名称中的连字符，它们是必需的。'
- en: 'Since the `.css` method calls the `.attr` method internally, we can also pass
    a function as the property value:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 `.css` 方法在内部调用 `.attr` 方法，我们也可以将函数作为属性值传递：
- en: '[PRE11]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This example sets the widths of the matched elements to incrementally larger
    values.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例将匹配元素的宽度设置为逐渐增大的值。
- en: .height()
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .height()
- en: '| Gets the current computed height for the first element in the set of matched
    elements.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '| 获取匹配元素集中第一个元素的当前计算高度。'
- en: '[PRE12]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '|'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数
- en: None.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 无。
- en: Return Value
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: The height of the element, in pixels.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 元素的高度，以像素为单位。
- en: Description
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: The difference between `.css('height')` and `.height()` is that the latter returns
    a unit‑less pixel value (for example, `400`) while the former returns a value
    with units intact (for example, `400px`). The `.height` method is recommended
    when an element's height needs to be used in a mathematical calculation.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '`.css(''height'')` 和 `.height()` 之间的区别在于后者返回无单位的像素值（例如，`400`），而前者返回单位完整的值（例如，`400px`）。当需要在数学计算中使用元素的高度时，推荐使用
    `.height` 方法。'
- en: .height(value)
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .height(value)
- en: '| Sets the CSS height of each element in the set of matched elements.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '| 设置匹配元素集中每个元素的 CSS 高度。'
- en: '[PRE13]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '|'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数
- en: 'value: An integer representing the number of pixels, or an integer with an
    optional unit of measure appended'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'value: 表示像素数量的整数，或附加了可选计量单位的整数'
- en: Return Value
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: The jQuery object, for chaining purposes.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 用于链接目的的 jQuery 对象。
- en: Description
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: With `.height('value')`, unlike with `.css('height','value')`, the value can
    be either a string (number and unit) or a number. If only a number is provided
    for the value, jQuery assumes a pixel unit.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `.css('height','value')` 不同，使用 `.height('value')`，值可以是字符串（数字和单位）或数字。如果只提供了数字作为值，则
    jQuery 假定为像素单位。
- en: .width()
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .width()
- en: '| Gets the current computed width for the first element in the set of matched
    elements.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '| 获取匹配元素集中第一个元素的当前计算宽度。'
- en: '[PRE14]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '|'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数
- en: None.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 无。
- en: Return Value
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: The width of the element, in pixels.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 元素的宽度，以像素为单位。
- en: Description
  id: totrans-142
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: The difference between `.css(width)` and `.width()` is that the latter returns
    a unit‑less pixel value (for example, `400)` while the former returns a value
    with units intact (for example, `400px)`. The `.width` method is recommended when
    an element's width needs to be used in a mathematical calculation.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '`.css(width)` 和 `.width()` 之间的区别在于后者返回无单位的像素值（例如，`400`），而前者返回单位完整的值（例如，`400px`）。当需要在数学计算中使用元素的宽度时，推荐使用
    `.width` 方法。'
- en: .width(value)
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .width(value)
- en: '| Sets the CSS width of each element in the set of matched elements.'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '| 设置匹配元素集中每个元素的 CSS 宽度。'
- en: '[PRE15]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '|'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数
- en: 'value: An integer representing the number of pixels, or an integer along with
    an optional unit of measure appended'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'value: 表示像素数量的整数，或附加了可选计量单位的整数'
- en: Return Value
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: The jQuery object, for chaining purposes.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 用于链接目的的 jQuery 对象。
- en: Description
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: With `.width('value')`, unlike with `.css('width','value')`, the value can be
    either a string (number and unit) or a number. If only a number is provided for
    the value, jQuery assumes a pixel unit.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `.css('width','value')` 不同，使用 `.width('value')`，值可以是字符串（数字和单位）或数字。如果只提供了数字作为值，则
    jQuery 假定为像素单位。
- en: Class Attribute
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类属性
- en: .addClass()
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .addClass()
- en: '| Adds one or more classes to each element in the set of matched elements.'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '| 向匹配元素集中的每个元素添加一个或多个类。'
- en: '[PRE16]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '|'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters
  id: totrans-159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数
- en: 'class: One or more class names to be added to the class attribute of each matched
    element'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'class: 要添加到每个匹配元素的 class 属性的一个或多个类名'
- en: Return Value
  id: totrans-161
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: The jQuery object, for chaining purposes.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 用于链接目的的 jQuery 对象。
- en: Description
  id: totrans-163
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: It's important to note that this method does *not* replace a class; it simply
    *adds* the class.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，此方法不会 *替换* 类；它只是 *添加* 类。
- en: 'More than one class may be added at a time, separated by a space, to the set
    of matched elements, like so: `$(''p'').addClass(''myclass yourclass'')`.'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 可以一次添加多个类，以空格分隔，到匹配元素集，例如：`$('p').addClass('myclass yourclass')`。
- en: 'This method is often used with `.removeClass()` to switch elements'' classes
    from one to another, like so:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法通常与`.removeClass()`一起使用，以将元素的类从一个类切换到另一个类，如下所示：
- en: '[PRE17]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Here, the `myclass` and `noclass` classes are removed from all paragraphs, while
    `yourclass` is added.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，所有段落中都将删除`myclass`和`noclass`类，而添加`yourclass`类。
- en: .removeClass()
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .removeClass()
- en: '| Removes one or all classes from each element in the set of matched elements.'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '| 从匹配元素集的每个元素中删除一个或所有类。'
- en: '[PRE18]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '|'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters
  id: totrans-173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数
- en: 'class (optional): A class name to be removed from the class attribute of each
    matched element'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类（可选）：要从每个匹配元素的类属性中删除的类名
- en: Return Value
  id: totrans-175
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: The jQuery object, for chaining purposes.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 用于链式操作的 jQuery 对象。
- en: Description
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: If a class name is included as a parameter, then only that class will be removed
    from the set of matched elements. If no class names are specified in the parameter,
    all classes will be removed.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在参数中包含类名，则只从匹配元素集中删除该类。如果在参数中未指定类名，则将删除所有类。
- en: 'More than one class may be removed at a time, separated by a space, from the
    set of matched elements, like so: `$(''p'').removeClass(''myclass yourclass'')`.'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 可以一次从匹配元素集中删除多个类，例如：`$('p').removeClass('myclass yourclass')`。
- en: 'This method is often used with `.addClass()` to switch elements'' classes from
    one to another, like so:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法通常与`.addClass()`一起使用，以将元素的类从一个类切换到另一个类，例如：
- en: '[PRE19]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Here, the class `myclass` is removed from all the paragraphs, while yourclass
    is added.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，所有段落都将删除`myclass`类，而添加`yourclass`类。
- en: To replace all existing classes with another class, use `.attr('class','new-class')`
    instead.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 要用另一个类替换所有现有类，可以使用`.attr('class','new-class')`。
- en: .toggleClass()
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .toggleClass()
- en: '| If the class is present, `.toggleClass()` removes it from each element in
    the set of matched elements; if it is not present, it adds the class.'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '| 如果类存在，`.toggleClass()` 将删除它从匹配元素集中的每个元素；如果不存在，它将添加该类。'
- en: '[PRE20]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '|'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters
  id: totrans-188
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数
- en: 'class: A class name to be toggled in the class attribute of each element in
    the matched set'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'class: 在匹配集合中的每个元素的类属性中要切换的类名'
- en: Return Value
  id: totrans-190
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: The jQuery object, for chaining purposes.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 用于链式操作的 jQuery 对象。
- en: Description
  id: totrans-192
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: 'This method takes one or more class names as its parameter. If an element in
    the matched set of elements already has the class, then it is removed; if an element
    does not have the class, then it is added. For example, we can apply `.toggleClass()`
    to a simple `<div>`:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法以其参数作为一个或多个类名。如果匹配集中的元素已经具有该类，则删除它；如果元素没有该类，则添加它。例如，我们可以将`.toggleClass()`应用到一个简单的`<div>`上：
- en: '[PRE21]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The first time we apply `$(''div.tumble'').toggleClass(''bounce'')`, we get
    the following:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次应用`$('div.tumble').toggleClass('bounce')`后，我们得到以下结果：
- en: '[PRE22]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The second time we apply `$(''div.tumble'').toggleClass(''bounce'')`, the `<div>`
    class is returned to the single `tumble` value:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 第二次应用`$('div.tumble').toggleClass('bounce')`后，`<div>`类返回到单个的`tumble`值：
- en: '[PRE23]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Applying `.toggleClass('bounce spin')` to the same `<div>` alternates between
    `<div class="tumble bounce spin'>` and `<div class="tumble'>`.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 对同一个`<div>`应用`.toggleClass('bounce spin')`可交替呈现`<div class="tumble bounce spin'>`和`<div
    class="tumble'>`。
- en: DOM Replacement
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DOM 替换
- en: .html()
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .html()
- en: '| Gets the HTML contents of the first element in the set of matched elements.'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '| 获取匹配元素集中第一个元素的 HTML 内容。'
- en: '[PRE24]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '|'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters
  id: totrans-205
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数
- en: None.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 无。
- en: Return Value
  id: totrans-207
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: A string containing the HTML representation of the element.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 包含元素的 HTML 表示的字符串。
- en: Description
  id: totrans-209
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: This method is not available on XML documents.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法不适用于 XML 文档。
- en: 'In an HTML document, we can use the `.html` method to get the contents of any
    element. If our selector expression matches more than one element, only the first
    one''s HTML content is returned. Consider this code:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在 HTML 文档中，我们可以使用`.html`方法来获取任何元素的内容。如果我们的选择器表达式匹配多个元素，则只返回第一个元素的 HTML 内容。考虑以下代码：
- en: '[PRE25]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'In order for the following `<div>` tag''s content to be retrieved, it would
    have to be the first one in the document:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 要检索以下 `<div>` 标记的内容，它必须是文档中的第一个标记：
- en: '[PRE26]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The result would look like this:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下所示：
- en: '[PRE27]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: .html(HTML)
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .html(HTML)
- en: '| Sets the HTML contents of each element in the set of matched elements.'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '| 设置匹配元素集中每个元素的 HTML 内容。'
- en: '[PRE28]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '|'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters
  id: totrans-221
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数
- en: 'HTML: A string of HTML to set as the content of each matched element'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'HTML: 要设置为每个匹配元素的内容的 HTML 字符串'
- en: Return Value
  id: totrans-223
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: The jQuery object, for chaining purposes.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 对象，用于链接目的。
- en: Description
  id: totrans-225
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: The `.html(HTML)` is not available in XML documents.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '`.html(HTML)` 在 XML 文档中不可用。'
- en: 'When we use `.html(HTML)` to set elements'' contents, any contents that were
    in those elements is completely replaced by the new contents. Consider the following
    HTML:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用 `.html(HTML)` 来设置元素内容时，任何已在这些元素中的内容都会完全被新内容替换。考虑以下 HTML：
- en: '[PRE29]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'We can set the HTML contents of `<div class="demo-container">` like so:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以这样设置 `<div class="demo-container">` 的 HTML 内容：
- en: '[PRE30]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'That line of code will replace everything inside `<div class="demo-container">`:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 那行代码将会替换 `<div class="demo-container">` 中的所有内容：
- en: '[PRE31]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: .text()
  id: totrans-233
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`.text()`'
- en: '| Gets the combined text contents of each element in the set of matched elements,
    including their descendants.'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '| 获取匹配元素集合中每个元素及其后代的组合文本内容。'
- en: '[PRE32]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '|'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters
  id: totrans-237
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数
- en: None.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 无。
- en: Return Value
  id: totrans-239
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: A string containing the combined text contents of the matched elements.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 包含匹配元素的组合文本内容的字符串。
- en: Description
  id: totrans-241
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: 'Unlike the `.html` method, the `.text` method can be used in both XML and HTML
    documents. The result of the `.text` method is a string containing the combined
    text of all matched elements. Consider the following HTML:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `.html` 方法不同，`.text` 方法可用于 XML 和 HTML 文档中。`.text` 方法的结果是一个包含所有匹配元素的组合文本的字符串。考虑以下
    HTML：
- en: '[PRE33]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The code `$(''div.demo-container'').text()` would produce the following result:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 代码 `$('div.demo-container').text()` 将产生以下结果：
- en: '[PRE34]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: .text(text)
  id: totrans-246
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .text(text)
- en: '| Sets the content of each element in the set of matched elements to the specified
    text.'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '| 设置匹配元素集合中每个元素的内容为指定文本。'
- en: '[PRE35]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '|'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters
  id: totrans-250
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数
- en: 'text: A string of text to set as the content of each matched element'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'text: 要设置为每个匹配元素内容的文本字符串'
- en: Return Value
  id: totrans-252
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: The jQuery object, for chaining purposes.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 对象，用于链接目的。
- en: Description
  id: totrans-254
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: Unlike the `.html(html)` method, `.text(text)` can be used in both XML and HTML
    documents.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `.html(html)` 方法不同，`.text(text)` 方法可用于 XML 和 HTML 文档中。
- en: 'We need to be aware that this method replaces `<` and `>` with `&lt`; and `&gt`;,
    respectively. Consider the following HTML:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要注意，此方法将`<`和`>`分别替换为`&lt`;和`&gt`;。考虑以下 HTML：
- en: '[PRE36]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The code `$(''div.demo-container'').text(''<p>This is a test.</p>'')` will
    produce the following HTML:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 代码 `$('div.demo-container').text('<p>This is a test.</p>')` 将产生以下 HTML：
- en: '[PRE37]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'It will appear on a rendered page as though the tags were exposed, like this:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 在渲染的页面上，它会呈现为标签被暴露的样子，就像这样：
- en: '[PRE38]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: .val()
  id: totrans-262
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`.val()`'
- en: '| Gets the current value of the first element in the set of matched elements.'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '| 获取匹配元素集合中第一个元素的当前值。'
- en: '[PRE39]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '|'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters
  id: totrans-266
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数
- en: None.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 无。
- en: Return Value
  id: totrans-268
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: A string containing the value of the element.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 包含元素值的字符串。
- en: Description
  id: totrans-270
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: The `.val` method is primarily used to get the value of form elements.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '`.val` 方法主要用于获取表单元素的值。'
- en: .val(value)
  id: totrans-272
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .val(value)
- en: '| Sets the value of each element in the set of matched elements.'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '| 设置匹配元素集合中每个元素的值。'
- en: '[PRE40]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '|'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters
  id: totrans-276
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数
- en: 'value: A string of text to set as the value property of each matched element'
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'value: 要设置为每个匹配元素值属性的文本字符串'
- en: Return Value
  id: totrans-278
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: The jQuery object, for chaining purposes.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 对象，用于链接目的。
- en: Description
  id: totrans-280
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: This method is typically used to set the value of form fields.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法通常用于设置表单字段的值。
- en: DOM Insertion, Inside
  id: totrans-282
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DOM 插入，内部
- en: .prepend()
  id: totrans-283
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .prepend()
- en: '| Inserts content, specified by the parameter, at the beginning of each element
    in the set of matched elements.'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '| 在匹配元素集合中的每个元素的开头插入指定参数指定的内容。'
- en: '[PRE41]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '|'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters
  id: totrans-287
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数
- en: 'content: An element, HTML string, or jQuery object to insert at the beginning
    of each element in the set of matched elements'
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'content: 要在匹配元素集合中的每个元素的开头插入的元素、HTML 字符串或 jQuery 对象'
- en: Return Value
  id: totrans-289
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: The jQuery object, for chaining purposes.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 对象，用于链接目的。
- en: Description
  id: totrans-291
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: The `.prepend` and `.prependTo` methods perform the same task. The only difference
    is in the syntax—specifically, in the placement of the content and target. With
    `.prepend()`, the selector expression preceding the method is the container into
    which the content is inserted. With `.prependTo()`, on the other hand, the content
    precedes the method, either as a selector expression or as markup created on the
    fly, and it is inserted into the target container.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '`.prepend` 和 `.prependTo` 方法执行相同的任务。唯一的区别在于语法，具体来说是在内容和目标的放置上。使用 `.prepend()`
    方法，方法之前的选择器表达式是插入内容的容器。另一方面，`.prependTo()` 的语法则相反，内容出现在方法之前，可以是选择器表达式，也可以是即时创建的标记，在目标容器中插入。'
- en: 'Consider the following HTML:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下 HTML：
- en: '[PRE42]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The two `<div>`s, with a little CSS, are rendered on the right side of the
    page as follows:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 两个 `<div>`，加上一点 CSS，呈现在页面右侧，如下所示：
- en: '![Description.prepend()about](img/3810_04_01.jpg)'
  id: totrans-296
  prefs: []
  type: TYPE_IMG
  zh: '![关于.prepend()的描述](img/3810_04_01.jpg)'
- en: 'We can insert an HTML structure into the beginning of `<div class="demo-box">`
    like so:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将 HTML 结构插入到 `<div class="demo-box">` 的开头，如下所示：
- en: '[PRE43]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'The new `<div>` and `<strong>` elements as well as the text nodes are created
    on the fly and added to the DOM. The result is a new `<div>` positioned just before
    the **Demonstration Box** text:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 新的 `<div>` 和 `<strong>` 元素以及文本节点是动态创建的并添加到 DOM 中。结果是一个新的 `<div>` 位于 **演示框**
    文本之前：
- en: '![Description.prepend()about](img/3810_04_02.jpg)'
  id: totrans-300
  prefs: []
  type: TYPE_IMG
  zh: '![关于.prepend()的描述](img/3810_04_02.jpg)'
- en: 'An element (or array of elements) that already exists on the page could be
    moved to the beginning of `<div class="demo-box">` as well. The following code,
    for example, moves the document''s first paragraph by using a jQuery object:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 已经存在于页面上的元素（或元素数组）也可以移动到 `<div class="demo-box">` 的开头。例如，以下代码通过使用 jQuery 对象将文档的第一个段落移动到目标位置：
- en: '[PRE44]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: .prependTo()
  id: totrans-303
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`.prependTo()`'
- en: '| Inserts every element in the set of matched elements at the beginning of
    the target.'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '| 将匹配元素集合中的每个元素插入到目标的开头。'
- en: '[PRE45]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '|'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters
  id: totrans-307
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数
- en: 'target: A selector, element, HTML string, or jQuery object; the matched set
    of elements will be inserted at the beginning of the element(s) specified by this
    parameter'
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'target: 选择器、元素、HTML 字符串或 jQuery 对象；匹配的元素集将插入到由此参数指定的元素的开头'
- en: Return Value
  id: totrans-309
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: The jQuery object, for chaining purposes.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 用于链式操作的 jQuery 对象。
- en: Description
  id: totrans-311
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: The `.prepend` and `.prependTo` methods perform the same task. The only difference
    is in the syntax—specifically, in the placement of the content and target. With
    `.prepend()`, the selector expression preceding the method is the container into
    which the content is inserted. With `.prependTo()`, on the other hand, the *content*
    precedes the method, either as a selector expression or as markup created on the
    fly, and it is inserted into the target container.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: '`.prepend` 和 `.prependTo` 方法执行相同的任务。唯一的区别在于语法 - 具体来说，在内容和目标的放置方面。使用 `.prepend()`，在方法之前的选择器表达式是要插入内容的容器。另一方面，使用
    `.prependTo()`，*内容* 在方法之前，可以是选择器表达式，也可以是动态创建的标记，它被插入到目标容器中。'
- en: 'Consider the following HTML:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下 HTML：
- en: '[PRE46]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'The two `<div>`s, with a little CSS, are rendered on the right side of the
    page as follows:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 两个 `<div>`，加上一点 CSS，呈现在页面右侧，如下所示：
- en: '![Description](img/3810_04_03.jpg)'
  id: totrans-316
  prefs: []
  type: TYPE_IMG
  zh: '![描述](img/3810_04_03.jpg)'
- en: 'Using `.prependTo()`, we can insert an HTML structure into the beginning of
    `<div class="demo-box">` like so:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `.prependTo()`，我们可以将 HTML 结构插入到 `<div class="demo-box">` 的开头，如下所示：
- en: '[PRE47]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'The new `<div>` and `<strong>` elements, as well as the text nodes, are created
    on the fly and added to the DOM. The result is a new `<div>` positioned just before
    the **Demonstration Box** text:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 新的 `<div>` 和 `<strong>` 元素，以及文本节点，是动态创建的并添加到 DOM 中。结果是一个新的 `<div>` 位于 **演示框**
    文本之前：
- en: '![Description](img/3810_04_04.jpg)'
  id: totrans-320
  prefs: []
  type: TYPE_IMG
  zh: '![描述](img/3810_04_04.jpg)'
- en: 'An element (or array of elements) that already exists on the page could be
    moved to the beginning of `<div class="demo-box">` as well. The following code,
    for example, moves the document''s first paragraph by using a selector expression
    both for the content to be inserted and for the target:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 已经存在于页面上的元素（或元素数组）也可以移动到 `<div class="demo-box">` 的开头。例如，以下代码通过使用选择器表达式将文档的第一个段落移动到目标位置：
- en: '[PRE48]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: .append()
  id: totrans-323
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`.append()`'
- en: '| Inserts content specified by the parameter at the end of each element in
    the set of matched elements.'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: '| 将参数指定的内容插入到匹配元素集合中每个元素的末尾。'
- en: '[PRE49]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '|'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters
  id: totrans-327
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数
- en: 'content: A selector, element, HTML string, or jQuery object to insert at the
    end of each element in the set of matched elements.'
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'content: 要插入到匹配元素集合中每个元素末尾的选择器、元素、HTML 字符串或 jQuery 对象。'
- en: Return Value
  id: totrans-329
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: The jQuery object, for chaining purposes.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 用于链式操作的 jQuery 对象。
- en: Description
  id: totrans-331
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: The `.append` and `.appendTo` methods perform the same task. The only difference
    is in the syntax—specifically, in the placement of the content and target. With
    `.append()`, the selector expression preceding the method is the container into
    which the content is inserted. With `.appendTo()`, on the other hand, the *content*
    precedes the method, either as a selector expression or as markup created on the
    fly, and it is inserted into the target container.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '`.append` 和 `.appendTo` 方法执行相同的任务。唯一的区别在于语法——具体来说，是内容和目标的放置位置。使用 `.append()`，方法前面的选择器表达式是要插入内容的容器。另一方面，使用
    `.appendTo()`，*内容*在方法之前，可以是选择器表达式，也可以是即时创建的标记，然后插入到目标容器中。'
- en: 'Consider the following HTML:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下的 HTML：
- en: '[PRE50]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'The two `<div>`s, with a little CSS, are rendered on the right side of the
    page as follows:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 两个 `<div>`，通过一点 CSS，呈现在页面的右侧如下：
- en: '![Description](img/3810_04_05.jpg)'
  id: totrans-336
  prefs: []
  type: TYPE_IMG
  zh: '![描述](img/3810_04_05.jpg)'
- en: 'We can insert an HTML structure into the end of `<div class="demo-box">` like
    so:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以像这样将 HTML 结构插入到 `<div class="demo-box">` 的末尾：
- en: '[PRE51]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'The new `<div>` and `<strong>` elements, as well as the text nodes, are created
    on the fly and added to the DOM. The result is a new `<div>` positioned just after
    the **Demonstration Box** text:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 新的 `<div>` 和 `<strong>` 元素，以及文本节点，是即时创建的并添加到 DOM 中。结果是一个新的 `<div>` 定位在 **演示框**
    文本之后：
- en: '![Description](img/3810_04_06.jpg)'
  id: totrans-340
  prefs: []
  type: TYPE_IMG
  zh: '![描述](img/3810_04_06.jpg)'
- en: 'An element (or array of elements) that already exists on the page could be
    moved to the end of `<div class="demo-box">` as well. The following code, for
    example, moves the document''s first paragraph by using a jQuery object:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 页面上已经存在的元素（或元素数组）也可以移动到 `<div class="demo-box">` 的末尾。例如，下面的代码通过使用 jQuery 对象来移动文档的第一个段落：
- en: '[PRE52]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: .appendTo()
  id: totrans-343
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .appendTo()
- en: '| Inserts every element in the set of matched elements at the end of the target.'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: '| 在匹配元素集的每个元素之后插入到目标中。'
- en: '[PRE53]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '|'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters
  id: totrans-347
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数
- en: 'target: A selector, element, HTML string, or jQuery object; the matched set
    of elements will be inserted at the end of the element(s) specified by this parameter'
  id: totrans-348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目标：选择器、元素、HTML 字符串或 jQuery 对象；匹配的元素集将插入到由此参数指定的元素的末尾
- en: Return Value
  id: totrans-349
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: The jQuery object, for chaining purposes.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 对象，用于链接目的。
- en: Description
  id: totrans-351
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: The `.append` and `.appendTo` methods perform the same task. The only difference
    is in the syntax—specifically, in the placement of the content and target. With
    `.append()`, the selector expression preceding the method is the container into
    which the content is inserted. With `.appendTo()`, on the other hand, the *content*
    precedes the method, either as a selector expression or as markup created on the
    fly, and it is inserted into the target container.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: '`.append` 和 `.appendTo` 方法执行相同的任务。唯一的区别在于语法——具体来说，是内容和目标的放置位置。使用 `.append()`，方法前面的选择器表达式是要插入内容的容器。另一方面，使用
    `.appendTo()`，*内容*在方法之前，可以是选择器表达式，也可以是即时创建的标记，然后插入到目标容器中。'
- en: 'Consider the following HTML:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下的 HTML：
- en: '[PRE54]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'The two `<div>`s, with a little CSS, are rendered on the right side of the
    page as follows:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 两个 `<div>`，通过一点 CSS，呈现在页面的右侧如下：
- en: '![Description](img/3810_04_07.jpg)'
  id: totrans-356
  prefs: []
  type: TYPE_IMG
  zh: '![描述](img/3810_04_07.jpg)'
- en: 'Using `.appendTo()`, we can insert an HTML structure into the end of `<div
    class="demo-box">` like so:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `.appendTo()`，我们可以像这样将 HTML 结构插入到 `<div class="demo-box">` 的末尾：
- en: '[PRE55]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'The new `<div>` and `<strong>` elements, as well as the text nodes, are created
    on the fly and added to the DOM. The result is a new `<div>` positioned just after
    the **Demonstration Box** text:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 新的 `<div>` 和 `<strong>` 元素，以及文本节点，是即时创建的并添加到 DOM 中。结果是一个新的 `<div>` 定位在 **演示框**
    文本之后：
- en: '![Description](img/3810_04_08.jpg)'
  id: totrans-360
  prefs: []
  type: TYPE_IMG
  zh: '![描述](img/3810_04_08.jpg)'
- en: 'An element (or array of elements) that already exists on the page could be
    moved to the end of `<div class="demo-box">` as well. The following code, for
    example, moves the document''s first paragraph by using a selector expression
    both for the content to be inserted and for the target:'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 页面上已经存在的元素（或元素数组）也可以移动到 `<div class="demo-box">` 的末尾。例如，下面的代码通过使用选择器表达式来移动文档的第一个段落：
- en: '[PRE56]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: DOM Insertion, Outside
  id: totrans-363
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DOM 插入，外部
- en: .before()
  id: totrans-364
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .before()
- en: '| Inserts content specified by the parameter before each element in the set
    of matched elements.'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: '| 在匹配元素集的每个元素之前插入参数指定的内容。'
- en: '[PRE57]'
  id: totrans-366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '|'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters
  id: totrans-368
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数
- en: 'content: An element, HTML string, or jQuery object to insert before each element
    in the set of matched elements'
  id: totrans-369
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内容：要在匹配元素集的每个元素之前插入的元素、HTML 字符串或 jQuery 对象
- en: Return Value
  id: totrans-370
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: The jQuery object, for chaining purposes.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 对象，用于链式调用。
- en: Description
  id: totrans-372
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: The `.before` and `.insertBefore` methods perform the same task. The only difference
    is in the syntax—specifically, in the placement of the content and target. With
    `.before()`, the selector expression preceding the method is the container into
    which the content is inserted. With `.insertBefore()`, on the other hand, the
    *content* precedes the method, either as a selector expression or as markup created
    on the fly, and it is inserted before the target container.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: '`.before`和`.insertBefore`方法执行相同的任务。唯一的区别在于语法——具体来说，在内容和目标的放置方面不同。对于`.before()`，在方法之前的选择器表达式是要插入内容的容器。而对于`.insertBefore()`，另一方面，*内容*在方法之前，可以作为选择器表达式或即时创建的标记插入，并且它会在目标容器之前插入。'
- en: 'Consider the following HTML:'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下 HTML：
- en: '[PRE58]'
  id: totrans-375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'The two `<div>`s, with a little CSS, are rendered on the right side of the
    page as follows:'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 两个`<div>`经过一点 CSS 处理后，在页面的右侧呈现如下：
- en: '![Description](img/3810_04_09.jpg)'
  id: totrans-377
  prefs: []
  type: TYPE_IMG
  zh: '![描述](img/3810_04_09.jpg)'
- en: 'We can insert an HTML structure before `<div class="demo-box">` like so:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以这样在`<div class="demo-box">`之前插入一个 HTML 结构：
- en: '[PRE59]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'The new `<div>` and `<strong>` elements, as well as the text nodes, are created
    on the fly and added to the DOM. The result is a new `<div>` positioned outside
    of, just before, `<div class="demo-box">`:'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 新的`<div>`和`<strong>`元素以及文本节点是即时创建的，并添加到 DOM 中。结果是一个新的`<div>`被定位在`<div class="demo-box">`的外部，就在它之前：
- en: '![Description](img/3810_04_10.jpg)'
  id: totrans-381
  prefs: []
  type: TYPE_IMG
  zh: '![描述](img/3810_04_10.jpg)'
- en: 'An element (or array of elements) that already exists on the page could be
    moved to the DOM position just before `<div class="demo-box">` as well. The following
    code, for example, moves the document''s first paragraph by using a jQuery object:'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 已经存在于页面上的一个元素（或元素数组）也可以移动到 DOM 位置，就在`<div class="demo-box">`之前。例如，以下代码通过使用 jQuery
    对象移动文档的第一个段落：
- en: '[PRE60]'
  id: totrans-383
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: .insertBefore()
  id: totrans-384
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`.insertBefore()`'
- en: '| Inserts every element in the set of matched elements before the set of elements
    specified in the parameter.'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: '| 在参数中指定的一组元素之前插入匹配元素集合中的每个元素。'
- en: '[PRE61]'
  id: totrans-386
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '|'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters
  id: totrans-388
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数
- en: 'content: A selector or element before which the matched set of elements will
    be inserted'
  id: totrans-389
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内容：要插入的一组匹配元素之前的选择器或元素
- en: Return Value
  id: totrans-390
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: The jQuery object, for chaining purposes.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 对象，用于链式调用。
- en: Description
  id: totrans-392
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: The `.before` and `.insertBefore` methods perform the same task. The only difference
    is in the syntax—specifically, in the placement of the content and target. With
    `.before()`, the selector expression preceding the method is the container into
    which the content is inserted. With `.insertBefore()`, on the other hand, the
    *content* precedes the method, either as a selector expression or as markup created
    on the fly, and it is inserted before the target container.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: '`.before`和`.insertBefore`方法执行相同的任务。唯一的区别在于语法——具体来说，在内容和目标的放置方面不同。对于`.before()`，在方法之前的选择器表达式是要插入内容的容器。而对于`.insertBefore()`，另一方面，*内容*在方法之前，可以作为选择器表达式或即时创建的标记插入，并且它会在目标容器之前插入。'
- en: 'Consider the following HTML:'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下 HTML：
- en: '[PRE62]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'The two `<div>`s, with a little CSS, are rendered on the right side of the
    page as follows:'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 两个`<div>`经过一点 CSS 处理后，在页面的右侧呈现如下：
- en: '![Description](img/3810_04_11.jpg)'
  id: totrans-397
  prefs: []
  type: TYPE_IMG
  zh: '![描述](img/3810_04_11.jpg)'
- en: 'We can insert an HTML structure just before `<div class="demo-box">` like so:'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以这样在`<div class="demo-box">`之前插入一个 HTML 结构：
- en: '[PRE63]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'The new `<div>` and `<strong>` elements, as well as the text nodes, are created
    on the fly and added to the DOM. The result is a new `<div>` positioned outside
    of, just before, `<div class="demo-box">`:'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 新的`<div>`和`<strong>`元素以及文本节点是即时创建的，并添加到 DOM 中。结果是一个新的`<div>`被定位在`<div class="demo-box">`的外部，就在它之前：
- en: '![Description](img/3810_04_12.jpg)'
  id: totrans-401
  prefs: []
  type: TYPE_IMG
  zh: '![描述](img/3810_04_12.jpg)'
- en: 'An element (or array of elements) that already exists on the page could be
    moved to the DOM position just before `<div class="demo-box">` as well. The following
    code, for example, moves the document''s first paragraph by using a jQuery object:'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 已经存在于页面上的一个元素（或元素数组）也可以移动到 DOM 位置，就在`<div class="demo-box">`之前。例如，以下代码通过使用 jQuery
    对象移动文档的第一个段落：
- en: '[PRE64]'
  id: totrans-403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: .after()
  id: totrans-404
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`.after()`'
- en: '| Inserts content specified by the parameter after each element in the set
    of matched elements.'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: '| 在匹配元素集合中的每个元素后插入参数指定的内容。'
- en: '[PRE65]'
  id: totrans-406
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '|'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters
  id: totrans-408
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数
- en: 'content: An element, HTML string, or jQuery object to insert after each element
    in the set of matched elements.'
  id: totrans-409
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内容：要在一组匹配元素中的每个元素后插入的元素、HTML 字符串或 jQuery 对象。
- en: Return Value
  id: totrans-410
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: The jQuery object, for chaining purposes.
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 对象，用于链式调用。
- en: Description
  id: totrans-412
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: The `.after` and `.insertAfter` methods perform the same task. The only difference
    is in the syntax—specifically, in the placement of the content and target. With
    `.after()`, the selector expression preceding the method is the container after
    which the content is inserted. With `.insertAfter()`, on the other hand, the *content*
    precedes the method, either as a selector expression or as markup created on the
    fly, and it is inserted after the target container.
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: '`.after` 和 `.insertAfter` 方法执行相同的任务。唯一的区别在于语法，具体来说，在内容和目标的放置上有所不同。对于 `.after()`，方法之前的选择器表达式是将内容插入的容器。另一方面，对于
    `.insertAfter()`，*内容*在方法之前，可以是选择器表达式，也可以是即时创建的标记，它被插入到目标容器之后。'
- en: 'Consider the following HTML:'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下 HTML：
- en: '[PRE66]'
  id: totrans-415
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'The two `<div>`s, with a little CSS, are rendered on the right side of the
    page as follows:'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 两个 `<div>`，稍加 CSS 处理，渲染在页面的右侧，如下所示：
- en: '![Description](img/3810_04_13.jpg)'
  id: totrans-417
  prefs: []
  type: TYPE_IMG
  zh: '![描述](img/3810_04_13.jpg)'
- en: 'We can insert an HTML structure after `<div class="demo-box">` like so:'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在 `<div class="demo-box">`之后插入 HTML 结构，如下所示：
- en: '[PRE67]'
  id: totrans-419
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'The new `<div>` and `<strong>` elements, as well as the text nodes, are created
    on the fly and added to the DOM. The result is a new `<div>` positioned outside
    of, just after, `<div class="demo-box">`:'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 新的 `<div>` 和 `<strong>` 元素，以及文本节点，都是即时创建并添加到 DOM 中的。结果是一个新的 `<div>`，在 `<div
    class="demo-box">`之外，紧接着它之后：
- en: '![Description](img/3810_04_14.jpg)'
  id: totrans-421
  prefs: []
  type: TYPE_IMG
  zh: '![描述](img/3810_04_14.jpg)'
- en: 'An element (or array of elements) that already exists on the page could be
    moved to the DOM position just after `<div class="demo-box">` as well. The following
    code, for example, moves the document''s first paragraph by using a jQuery object:'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 将页面上已经存在的元素（或元素数组）移动到 DOM 位置后面的`<div class="demo-box">`也是可以的。例如，以下代码通过使用 jQuery
    对象将文档的第一个段落移动：
- en: '[PRE68]'
  id: totrans-423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: .insertAfter()
  id: totrans-424
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`.insertAfter()`'
- en: '| Inserts every element in the set of matched elements after the set of elements
    specified in the parameter.'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: '| 将匹配元素集合中的每个元素插入到指定参数中的元素集合之后。'
- en: '[PRE69]'
  id: totrans-426
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '|'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters
  id: totrans-428
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数
- en: 'content: A selector or element after which the matched set of elements will
    be inserted'
  id: totrans-429
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'content: 一个选择器或元素，用于指定将要插入的匹配元素集合之后'
- en: Return Value
  id: totrans-430
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: The jQuery object, for chaining purposes.
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 用于链式调用的 jQuery 对象。
- en: Description
  id: totrans-432
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: The `.after` and `.insertAfter` methods perform the same task. The only difference
    is in the syntax—specifically, in the placement of the content and target. With
    `.after()`, the selector expression preceding the method is the container after
    which the content is inserted. With `.insertAfter()`, on the other hand, the *content*
    precedes the method, either as a selector expression or as markup created on the
    fly, and it is inserted after the target container.
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: '`.after` 和 `.insertAfter` 方法执行相同的任务。唯一的区别在于语法，具体来说，在内容和目标的放置上有所不同。对于 `.after()`，方法之前的选择器表达式是将内容插入的容器。另一方面，对于
    `.insertAfter()`，*内容*在方法之前，可以是选择器表达式，也可以是即时创建的标记，它被插入到目标容器之后。'
- en: 'Consider the following HTML:'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下 HTML：
- en: '[PRE70]'
  id: totrans-435
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'The two `<div>`s, with a little CSS, are rendered on the right side of the
    page as follows:'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 两个 `<div>`，稍加 CSS 处理，渲染在页面的右侧，如下所示：
- en: '![Description](img/3810_04_15.jpg)'
  id: totrans-437
  prefs: []
  type: TYPE_IMG
  zh: '![描述](img/3810_04_15.jpg)'
- en: 'Using `.insertAfter()`, we can insert an HTML structure after `<div class="demo-box">`
    like so:'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `.insertAfter()`，我们可以在 `<div class="demo-box">`之后插入 HTML 结构，如下所示：
- en: '[PRE71]'
  id: totrans-439
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'The new `<div>` and `<strong>` elements, as well as the text nodes, are created
    on the fly and added to the DOM. The result is a new `<div>` positioned outside
    of, just after, `<div class="demo-box">`:'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 新的 `<div>` 和 `<strong>` 元素，以及文本节点，都是即时创建并添加到 DOM 中的。结果是一个新的 `<div>`，在 `<div
    class="demo-box">`之外，紧接着它之后：
- en: '![Description](img/3810_04_16.jpg)'
  id: totrans-441
  prefs: []
  type: TYPE_IMG
  zh: '![描述](img/3810_04_16.jpg)'
- en: 'An element (or array of elements) that already exists on the page could be
    moved to the DOM position just after `<div class="demo-box">` as well. The following
    code, for example, moves the document''s first paragraph by using a jQuery object:'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 将页面上已经存在的元素（或元素数组）移动到 DOM 位置后面的`<div class="demo-box">`也是可以的。例如，以下代码通过使用 jQuery
    对象将文档的第一个段落移动：
- en: '[PRE72]'
  id: totrans-443
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: DOM Insertion, Around
  id: totrans-444
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DOM 插入，环绕
- en: .wrap()
  id: totrans-445
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`.wrap()`'
- en: '| Wraps a structure of elements around each element in the set of matched elements.'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: '| 将一系列元素的结构包装在匹配元素集合中的每个元素周围。'
- en: '[PRE73]'
  id: totrans-447
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '|'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters (first version)
  id: totrans-449
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数（第一版本）
- en: 'html: A string of HTML tags to wrap around the set of matched elements'
  id: totrans-450
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'html: 一串 HTML 标记，用于围绕匹配元素集合'
- en: Parameters (second version)
  id: totrans-451
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数（第二版本）
- en: 'element: An existing element to wrap around the set of matched elements'
  id: totrans-452
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'element: 一个现有的元素，用于围绕匹配元素集合'
- en: Return Value
  id: totrans-453
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: The jQuery object, for chaining purposes.
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 对象，用于链式调用。
- en: Description
  id: totrans-455
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: 'Note: The HTML must include only well-formed, valid element structures. If
    any text is included, or if any tags are left unclosed, the `.wrap()` will fail.'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：HTML 必须仅包含格式正确、有效的元素结构。如果包含任何文本，或者任何标签未关闭，`.wrap()` 将失败。
- en: 'Consider the following HTML:'
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下 HTML：
- en: '[PRE74]'
  id: totrans-458
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'The two `<div>`s, with a little CSS, are rendered on the right side of the
    page as follows:'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 两个 `<div>`，通过一些 CSS，呈现在页面的右侧如下：
- en: '![Description](img/3810_04_17.jpg)'
  id: totrans-460
  prefs: []
  type: TYPE_IMG
  zh: '![描述](img/3810_04_17.jpg)'
- en: 'Using `.wrap()`, we can insert an HTML structure around `<div class="demo-box">`
    like so:'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`.wrap()`，我们可以在 `<div class="demo-box">` 周围插入 HTML 结构，如下所示：
- en: '[PRE75]'
  id: totrans-462
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'The new `<div>` element is created on the fly and added to the DOM. The result
    is a new `<div>` wrapped around `<div class="demo-box">`:'
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 新的 `<div>` 元素是即时创建的，并添加到 DOM 中。结果是一个新的 `<div>` 包裹在 `<div class="demo-box">`
    周围：
- en: '![Description](img/3810_04_18.jpg)'
  id: totrans-464
  prefs: []
  type: TYPE_IMG
  zh: '![描述](img/3810_04_18.jpg)'
- en: 'Using a DOM node as our parameter instead, we could wrap the new `<div>` around
    an element with `id="demo-box1"` like so:'
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 DOM 节点作为我们的参数，我们可以将新的 `<div>` 包装在具有 `id="demo-box1"` 的元素周围，如下所示：
- en: '[PRE76]'
  id: totrans-466
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: DOM Copying
  id: totrans-467
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DOM 复制
- en: .clone()
  id: totrans-468
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .clone()
- en: '| Creates a copy of the set of matched elements.'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: '| 创建匹配元素集的副本。'
- en: '[PRE77]'
  id: totrans-470
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '|'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters
  id: totrans-472
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数
- en: 'deep (optional): A Boolean. Default is `true`. If set to `false`, the `.clone`
    method copies only the matched elements themselves, excluding any child/descendant
    elements and text.'
  id: totrans-473
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: deep（可选）：布尔值。默认为`true`。如果设置为`false`，`.clone`方法仅复制匹配的元素本身，而不包括任何子/后代元素和文本。
- en: Return Value
  id: totrans-474
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: A new jQuery object, referencing the created elements.
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 一个新的 jQuery 对象，引用了创建的元素。
- en: Description
  id: totrans-476
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: 'The `.clone` method, when used in conjunction with one of the insertion methods,
    is a convenient way to duplicate elements on a page. Consider the following HTML:'
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: 当与其中一种插入方法结合使用时，`.clone`方法是在页面上复制元素的便捷方式。考虑以下 HTML：
- en: '[PRE78]'
  id: totrans-478
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'The two `<div>`s, with a little CSS, are rendered on the right side of the
    page as follows:'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: 两个 `<div>`，通过一些 CSS，呈现在页面的右侧如下：
- en: '![Description](img/3810_04_19.jpg)'
  id: totrans-480
  prefs: []
  type: TYPE_IMG
  zh: '![描述](img/3810_04_19.jpg)'
- en: 'To copy `<div class="demo-box">` and paste that copy after the original, we
    could write the following:'
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 要复制`<div class="demo-box">`并将该副本粘贴到原始内容之后，我们可以编写以下内容：
- en: '[PRE79]'
  id: totrans-482
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'Now we have **Demonstration Box twice**:'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有两个**演示框**：
- en: '![Description](img/3810_04_20.jpg)'
  id: totrans-484
  prefs: []
  type: TYPE_IMG
  zh: '![描述](img/3810_04_20.jpg)'
- en: Notice that we use the `:last` selector here so that we are sure to only copy
    (`.clone()`) and paste (`.insertAfter()`) a single copy. We need to be aware of
    the potential to inadvertently clone or insert more than we intend, and take the
    necessary precautions to prevent that from occurring.
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们在这里使用`:last`选择器，以确保只复制(`.clone()`)并粘贴(`.insertAfter()`)一次。我们需要注意潜在的意外克隆或插入超出我们意图的数量，并采取必要的预防措施防止发生这种情况。
- en: Tip
  id: totrans-486
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: With the `.clone` method, we can modify the cloned elements or their contents
    before inserting them into the document.
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`.clone`方法，我们可以在将克隆的元素或其内容插入文档之前修改它们。
- en: 'The optional `deep` parameter accepts a Boolean—`true` or `false`. Since in
    most cases we want to clone child nodes as well, and since the default is `true`,
    the parameter is rarely used. However, imagine that we wanted to copy the **Demonstration
    Box** without its text and then append a paragraph to every `<div class="demo-box">`.
    We could make this happen with the following code:'
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: 可选的 `deep` 参数接受一个布尔值 — `true` 或 `false`。由于在大多数情况下，我们希望克隆子节点，而默认值为`true`，因此该参数很少被使用。但是，想象一下我们想要复制**演示框**而不带其文本，然后将段落附加到每个
    `<div class="demo-box">`。我们可以使用以下代码实现这一点：
- en: '[PRE80]'
  id: totrans-489
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'Now the two boxes look like this:'
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: 现在两个框看起来像这样：
- en: '![Description](img/3810_04_21.jpg)'
  id: totrans-491
  prefs: []
  type: TYPE_IMG
  zh: '![描述](img/3810_04_21.jpg)'
- en: The first box now has both the original **Demonstration Box** text and the additional
    **New Message** text while the new, cloned box has only the additional text.
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个框现在既有原始**演示框**文本，又有额外的**新消息**文本，而新克隆的框只有额外的文本。
- en: DOM Removal
  id: totrans-493
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DOM 删除
- en: .empty()
  id: totrans-494
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .empty()
- en: '| Removes all child nodes of the set of matched elements from the DOM.'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: '| 从 DOM 中删除匹配元素集的所有子节点。'
- en: '[PRE81]'
  id: totrans-496
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '|'
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters
  id: totrans-498
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数
- en: None.
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: 无。
- en: Return Value
  id: totrans-500
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: The jQuery object, for chaining purposes.
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 对象，用于链式调用。
- en: Description
  id: totrans-502
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: 'This method removes not only child (and other descendant) elements, but also
    any text within the set of matched elements. This is because, according to the
    DOM, any string of text within an element is considered a child node of that element.
    Consider the following HTML:'
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法不仅会移除子元素（和其他后代元素），还会移除匹配元素集合中的任何文本。这是因为根据 DOM，元素内的任何文本字符串被视为该元素的子节点。考虑以下
    HTML：
- en: '[PRE82]'
  id: totrans-504
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'The two `<div>`s, with a little CSS, are rendered on the right side of the
    page as follows:'
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 两个 `<div>` 经过一点 CSS 处理后，显示在页面的右侧如下：
- en: '![Description](img/3810_04_22.jpg)'
  id: totrans-506
  prefs: []
  type: TYPE_IMG
  zh: '![描述](img/3810_04_22.jpg)'
- en: 'If we apply `$(''div.demo-box'').empty()`; to it, the **Demonstration Box**
    text string is removed:'
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们对其应用 `$('div.demo-box').empty()`;，则**演示框**文本字符串被移除：
- en: '![Description](img/3810_04_23.jpg)'
  id: totrans-508
  prefs: []
  type: TYPE_IMG
  zh: '![描述](img/3810_04_23.jpg)'
- en: If we had any number of nested elements inside `<div class="demo-box">`, they
    would be removed, too.
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在 `<div class="demo-box">` 内有任意数量的嵌套元素，它们也会被移除。
- en: .remove()
  id: totrans-510
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .remove()
- en: '| Removes the set of matched elements from the DOM.'
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: '| 从 DOM 中移除一组匹配的元素。'
- en: '[PRE83]'
  id: totrans-512
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '|'
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters
  id: totrans-514
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数
- en: 'selector (optional): A selector that filters the set of matched elements to
    be removed'
  id: totrans-515
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择器（可选）：用于筛选要移除的一组匹配元素
- en: Return Value
  id: totrans-516
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: The jQuery object, for chaining purposes.
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: 用于链接目的的 jQuery 对象。
- en: Description
  id: totrans-518
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: 'Similar to.empty, the `.remove` method takes elements out of the DOM. We use
    `.remove()` when we want to remove the element itself, as well as everything inside
    it. Consider the following HTML:'
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: 与 .empty 类似，`.remove` 方法将元素从 DOM 中移除。我们使用 `.remove()` 当我们想要移除元素本身以及其中的所有内容。考虑以下
    HTML：
- en: '[PRE84]'
  id: totrans-520
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'The two `<div>`s, with a little CSS, are rendered on the right side of the
    page as follows:'
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: 两个 `<div>` 经过一点 CSS 处理后，显示在页面的右侧如下：
- en: '![Description](img/3810_04_24.jpg)'
  id: totrans-522
  prefs: []
  type: TYPE_IMG
  zh: '![描述](img/3810_04_24.jpg)'
- en: 'If we apply `$(''div.demo-box'').remove()` to it, the entire `<div class="demo-box>`
    along with everything in it is removed:'
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们对其应用 `$('div.demo-box').remove()`，整个 `<div class="demo-box>` 以及其中的所有内容都会被移除：
- en: '![Description](img/3810_04_25.jpg)'
  id: totrans-524
  prefs: []
  type: TYPE_IMG
  zh: '![描述](img/3810_04_25.jpg)'
- en: 'We can also include a selector as an optional parameter. For example, we could
    rewrite the previous DOM removal code as follows: `$(''div'').remove(''.demo-box'')`.
    Or, if we had multiple elements with the same class name and wanted to remove
    only the first one the one with `id="temporary-demo-box"`, we could write the
    following:'
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以将选择器作为可选参数包含在内。例如，我们可以将前面的 DOM 移除代码重写为：`$('div').remove('.demo-box')`。或者，如果我们有多个具有相同类名的元素，并且只想移除第一个带有
    `id="temporary-demo-box"` 的元素，我们可以这样编写：
- en: '[PRE85]'
  id: totrans-526
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
