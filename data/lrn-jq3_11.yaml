- en: Advanced Effects
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高级效果
- en: Since learning about jQuery's animation capabilities, we have found many uses
    for them. We can hide and reveal objects on the page with ease, we can gracefully
    resize elements, and we can smoothly reposition elements. This effects library
    is versatile, and contains even more techniques and specialized abilities than
    we have seen so far.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 自从了解了 jQuery 的动画功能以来，我们发现了许多用途。我们可以轻松地隐藏和显示页面上的对象，我们可以优雅地调整元素的大小，我们可以平滑地重新定位元素。这个效果库是多功能的，包含的技术和专业能力甚至比我们迄今看到的还要多。
- en: 'In [Chapter 4](6544cf68-239c-4a0b-99f6-2d128dc5f7b1.xhtml), *Styling and Animating*,
    you learned about jQuery''s basic animation capabilities. In this more advanced
    chapter, we will cover:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第 4 章](6544cf68-239c-4a0b-99f6-2d128dc5f7b1.xhtml)中，*样式和动画*，您学习了 jQuery 的基本动画功能。在这个更高级的章节中，我们将涵盖：
- en: Ways to gather information about the state of animations
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 收集关于动画状态的信息的方法
- en: Methods for interrupting active animations
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 中断活动动画的方法
- en: Global effect options that can affect all animations on the page at once
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 全局效果选项，可以一次性影响页面上的所有动画
- en: Deferred objects, which allow us to act once animations have completed
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Deferred 对象允许我们在动画完成后执行操作
- en: Easing, which alters the rate at which animations occur
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缓动，改变动画发生的速率
- en: Animation revisited
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动画再访
- en: 'To refresh our memory about jQuery''s effect methods, we''ll set up a baseline
    from which to build in this chapter, starting with a simple hover animation. Using
    a document with photo thumbnails on it, we''ll make each photo *grow* slightly
    when the user''s mouse is over it, and shrink back to its original size when the
    mouse leaves. The HTML tags we''ll use also contain some textual information that''s
    hidden for now, which we''ll use later in the chapter:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 为了刷新我们关于 jQuery 效果方法的记忆，我们将在本章中建立一个基线，从一个简单的悬停动画开始构建。使用带有照片缩略图的文档，当用户的鼠标悬停在上面时，我们将使每张照片略微*增大*，并在鼠标离开时恢复到原始大小。我们将使用的
    HTML 标签目前还包含一些暂时隐藏的文本信息，稍后在本章中将使用：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Getting the example code
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 获取示例代码
- en: You can access the example code from the following GitHub repository: [https://github.com/PacktPublishing/Learning-jQuery-3](https://github.com/PacktPublishing/Learning-jQuery-3).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从以下 GitHub 存储库访问示例代码：[https://github.com/PacktPublishing/Learning-jQuery-3](https://github.com/PacktPublishing/Learning-jQuery-3)。
- en: 'The text associated with each image is initially hidden by the CSS by moving
    each `<div>` to the left of its `overflow: hidden` container:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '每张图像相关联的文本最初由 CSS 隐藏，通过将每个 `<div>` 移动到其 `overflow: hidden` 容器的左侧来实现：'
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The HTML and CSS together produce a vertically arranged list of images:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: HTML 和 CSS 一起产生一个垂直排列的图像列表：
- en: '![](img/5297_11_01.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5297_11_01.png)'
- en: 'To alter the size of the image, we will increase its height and width from
    `75` pixels to `85` pixels. At the same time, to keep the image centered, we will
    decrease its padding from `5` pixels to `0` pixels:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 为了改变图像的大小，我们将把其高度和宽度从 `75` 像素增加到 `85` 像素。同时，为了保持图像居中，我们将其填充从 `5` 像素减少到 `0` 像素：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Listing 11.1
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 11.1
- en: Here we repeat a pattern we saw in [Chapter 10](d150ca06-e7dc-4100-8c91-060f0272ff67.xhtml),
    *Advanced Events*, because much of the work we are performing when the mouse enters
    the region, is the same as when it leaves; we are combining the handlers for `mouseenter`
    and `mouseleave` into one function rather than calling `.hover()` with two separate
    callbacks. Inside this handler, we determine the values of `size` and `padding`
    based on which of the two events is being triggered, and pass these property values
    on to the `.animate()` method.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们重复了我们在[第 10 章](d150ca06-e7dc-4100-8c91-060f0272ff67.xhtml)中看到的一种模式，*高级事件*，因为当鼠标进入区域时，我们执行的大部分工作与离开时相同；我们将
    `mouseenter` 和 `mouseleave` 的处理程序合并为一个函数，而不是使用两个单独的回调调用 `.hover()`。在这个处理程序内部，我们根据触发的两个事件中的哪一个来确定
    `size` 和 `padding` 的值，并将这些属性值传递给 `.animate()` 方法。
- en: When you see the object literal notation surrounding function arguments `({
    type, target})`, it's called **object destructuring**. This is simply a convenient
    way to get the exact properties we need out of the event object, leading to more
    concise code in the function itself.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当您看到将对象字面量表示法包围在函数参数 `({ type, target})` 周围时，这被称为**对象解构**。这只是一种方便的方法，可以从事件对象中获取我们需要的确切属性，从而在函数本身中编写更简洁的代码。
- en: 'Now when the mouse cursor is over an image, it is slightly larger than the
    rest:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在当鼠标光标位于图像上时，它比其他图像稍大：
- en: '![](img/5297_11_02.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5297_11_02.png)'
- en: Observing and interrupting animations
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 观察和中断动画
- en: Our basic animation already reveals a problem. As long as there is enough time
    for the animation to complete after each `mouseenter` or `mouseleave` event, the
    animations proceed as intended. When the mouse cursor moves rapidly and the events
    are triggered quickly, however, we see that the images also grow and shrink repeatedly,
    well after the last event is triggered. This occurs because, as discussed in [Chapter
    4](6544cf68-239c-4a0b-99f6-2d128dc5f7b1.xhtml), *Styling and Animating*, animations
    on a given element are added to a queue and called in order. The first animation
    is called immediately, completes in the allotted time, and then is removed from the
    queue, at which point the next animation becomes first in line, is called, completes,
    is shifted, and so on until the queue is empty.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的基本动画已经显示出一个问题。只要每次`mouseenter`或`mouseleave`事件后有足够的时间完成动画，动画就会按预期进行。然而，当鼠标光标快速移动并且事件被快速触发时，我们会看到图像在最后一个事件被触发后仍然反复变大和缩小。这是因为，如[第4章](6544cf68-239c-4a0b-99f6-2d128dc5f7b1.xhtml)所述，给定元素上的动画被添加到队列中并按顺序调用。第一个动画立即调用，按分配的时间完成，然后从队列中移除，此时下一个动画变为队列中的第一个，被调用，完成，被移除，依此类推，直到队列为空。
- en: There are many cases in which this animation queue, known within jQuery as `fx`,
    causes desirable behavior. In the case of hover actions such as ours, though,
    it needs to be circumvented.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多情况下，jQuery中称为`fx`的动画队列会引起期望的行为。但在我们这样的悬停动作中，需要绕过它。
- en: Determining the animation state
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 确定动画状态
- en: 'One way to avoid the undesirable queuing of animations is to use jQuery''s
    custom `:animated` selector. Inside the `mouseenter`/`mouseleave` event handler,
    we can use the selector to check the image and see if it is currently being animated:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 避免动画不良排队的一种方法是使用jQuery的自定义`:animated`选择器。在`mouseenter`/`mouseleave`事件处理程序中，我们可以使用该选择器来检查图像并查看它是否正在动画中：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Listing 11.2
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 清单11.2
- en: When the user's mouse enters the member `<div>`, the image will only animate
    if it isn't already being animated. When the mouse leaves, the animation will
    occur regardless of its state, because we always want it to ultimately restore
    the image to its original dimensions and padding.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户的鼠标进入成员`<div>`时，图像只有在没有被动画化时才会进行动画。当鼠标离开时，动画将无论其状态如何都会发生，因为我们始终希望最终将图像恢复到其原始尺寸和填充状态。
- en: 'We''ve successfully avoided the runaway animations that occur in *Listing 11.1*,
    but the animations still need improvement. When the mouse quickly enters and leaves
    the `<div>` tag, the image still has to complete the entire `mouseenter` animation
    (growing) before it starts the `mouseleave` animation (shrinking). This is not
    ideal, for sure, but the test of the `:animated` pseudo-class has introduced an
    even greater problem: if the mouse enters the `<div>` tag while the image is *shrinking*,
    the image will fail to grow again. Only a subsequent `mouseleave` and `mouseenter`
    animation after the animation has stopped will execute another animation. While
    using the `:animated` selector can be useful in some situations, here it doesn''t
    help enough.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们成功地避免了在*清单11.1*中发生的无限动画，但是动画仍然需要改进。当鼠标快速进入和离开`<div>`标记时，图像仍然必须完成整个`mouseenter`动画（增大）才会开始`mouseleave`动画（缩小）。这肯定不是理想的情况，但是`:animated`伪类的测试引入了一个更大的问题：如果鼠标在图像*缩小*时进入`<div>`标记，那么图像将无法再次增大。只有在动画停止后，下一个`mouseleave`和`mouseenter`动画才会执行另一个动画。在某些情况下使用`:animated`选择器可能很有用，但在这里并没有帮助太多。
- en: Halting a running animation
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 停止运行的动画
- en: 'Fortunately, jQuery has a method to help us with both of the problems evident
    in *Listing 11.2*. The `.stop()` method can halt an animation in its tracks. To
    use it, we can return the code to the way it was in *Listing 11.1* and simply
    insert `.stop()` between `.find()` and `.animate()`:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，jQuery有一个方法可以帮助我们解决*清单11.2*中显而易见的两个问题。`.stop()`方法可以立即停止动画。要使用它，我们可以将代码恢复到*清单11.1*中的样子，然后在`.find()`和`.animate()`之间简单地插入`.stop()`：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Listing 11.3
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 清单11.3
- en: It's worth noting that we stop the current animation *before* proceeding with
    the new one. Now when the mouse enters and leaves repeatedly, the undesirable
    effect of our previous attempts is gone. The current animation always completes
    immediately, so there is never more than one in the `fx` queue. When the mouse
    finally rests, the final animation completes, so the image is either fully grown
    (`mouseenter`) or restored to its original dimensions (`mouseleave`) depending
    on the last triggered event.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，在进行新动画之前我们会在当前动画*之前*停止它。现在当鼠标重复进入和离开时，我们之前尝试的不良效果消失了。当前动画总是立即完成，因此`fx`队列中永远不会超过一个。当鼠标最终停下时，最终动画完成，因此图像要么完全增长（`mouseenter`），要么恢复到其原始尺寸（`mouseleave`），这取决于最后触发的事件。
- en: Caution when halting animations
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 停止动画时要小心
- en: Because the `.stop()` method, by default, halts animations at their current
    position, it can lead to surprising results when used with shorthand animation
    methods. Before animating, these shorthand methods determine the final value and
    then animate to that value. For example, if `.slideDown()` is halted with `.stop()`
    midway through its animation and then `.slideUp()` is called, the next time `.slideDown()`
    is called on the element, it will only slide down to the height at which it stopped
    the previous time. To mitigate this type of problem, the `.stop()` method can
    accept two Boolean (`true`/`false`) arguments, the second of which is known as
    `goToEnd`. If we set this argument to `true`, the current animation not only stops,
    but also jumps immediately to the final value. Still, the `goToEnd` feature can
    make the animation look *jerky*, so a better solution might be to store the final
    value in a variable and animate to it explicitly using `.animate()` rather than
    rely on jQuery to determine that value.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`.stop()`方法默认在当前位置停止动画，当与速记动画方法一起使用时可能会导致意外结果。在动画之前，这些速记方法确定最终值，然后对该值进行动画处理。例如，如果在其动画过程中使用`.stop()`停止`.slideDown()`，然后调用`.slideUp()`，那么下一次在元素上调用`.slideDown()`时，它只会滑动到上次停止的高度。为了减轻这种问题，`.stop()`方法可以接受两个布尔值（`true`/`false`）参数，第二个称为`goToEnd`。如果我们将此参数设置为`true`，则当前动画不仅停止，而且立即跳转到最终值。尽管如此，`goToEnd`功能可能会使动画看起来*不流畅*，因此更好的解决方案可能是将最终值存储在变量中，并显式地使用`.animate()`进行动画处理，而不是依赖jQuery来确定该值。
- en: Another jQuery method, `.finish()`, is available for halting animations. It's
    similar to `.stop(true, true)` in that it clears all queued animations and jumps
    the current animation to the final value. However, unlike `.stop(true, true)`,
    it jumps all the *queued* animations to their final values as well.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个jQuery方法`.finish()`可用于停止动画。它类似于`.stop(true, true)`，因为它清除所有排队的动画，并将当前动画跳转到最终值。但是，与`.stop(true,
    true)`不同，它还会将所有*排队的*动画跳转到它们的最终值。
- en: Using global effect properties
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用全局效果属性
- en: The effects module in jQuery includes a handy `$.fx` object that we can access
    when we want to change the characteristics of our animations across the board.
    Although some of this object's properties are undocumented and intended to use
    solely within the library itself, others are provided as tools for globally altering
    the way our animations run. In the following examples, we'll take a look at a
    few of the documented properties.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery中的效果模块包含一个方便的`$.fx`对象，当我们想要全面改变动画特性时可以访问该对象。虽然该对象的一些属性未记录，并且只能在库内部使用，但其他属性则作为工具提供，用于全局改变动画运行方式。在以下示例中，我们将看一些已记录属性。
- en: Disabling all effects
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 禁用所有效果
- en: 'We have already discussed a way to halt animations that are currently running,
    but what if we need to disable all animations entirely? We may, for example, wish
    to provide animations by default, but disable those animations for low-resource
    devices where animations could look choppy, or for users who find animations distracting.
    To do so, we can simply set the `$.fx.off` property to `true`. For our demonstration,
    we will display a previously hidden button to allow the user to toggle animations
    on and off:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论了如何停止当前正在运行的动画，但是如果我们需要完全禁用所有动画怎么办？例如，我们可能希望默认情况下提供动画，但是在低资源设备（动画可能看起来断断续续）或对于发现动画分散注意力的用户中禁用这些动画。为此，我们只需将`$.fx.off`属性设置为`true`。为了演示，我们将显示一个之前隐藏的按钮，以允许用户切换动画的开启和关闭：
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Listing 11.4
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 列表11.4
- en: 'The hidden button is displayed between the introductory paragraph and the subsequent
    images:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 隐藏按钮显示在介绍段落和随后的图像之间：
- en: '![](img/5297_11_03.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5297_11_03.png)'
- en: When the user clicks on the button to toggle animations off, subsequent animations
    such as our growing and shrinking images will occur instantaneously (with a duration
    of `0` milliseconds), and any callback functions will be called immediately thereafter.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击按钮将动画切换关闭时，随后的动画，如我们的放大和缩小图像，将立即发生（持续时间为`0`毫秒），然后立即调用任何回调函数。
- en: Defining effect durations
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义效果持续时间
- en: 'Another property of the `$.fx` object is `speeds`. This property is an object
    itself, consisting of three properties, as evidenced by the jQuery core file:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`$.fx`对象的另一个属性是`speeds`。该属性本身是一个对象，由jQuery核心文件证实，由三个属性组成：'
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You''ve already learned that all of jQuery''s animation methods provide an
    optional speed, or duration, argument. Looking at the `$.fx.speeds` object, we
    see that the strings `slow` and `fast` map up to 600 milliseconds and 200 milliseconds
    respectively. Each time an animation method is called, jQuery goes through the
    following steps to determine the duration of the effect, in this order:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经学会了jQuery的所有动画方法都提供了一个可选的速度或持续时间参数。查看`$.fx.speeds`对象，我们可以看到字符串`slow`和`fast`分别映射到600毫秒和200毫秒。每次调用动画方法时，jQuery按照以下顺序执行以下步骤来确定效果的持续时间：
- en: It checks if `$.fx.off` is `true`. If so, it sets the duration to `0`.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它检查`$.fx.off`是否为`true`。如果是，它将持续时间设置为`0`。
- en: It checks if the duration passed is a number. If so, it sets the duration to
    that number of milliseconds.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它检查传递的持续时间是否为数字。如果是，则将持续时间设置为该数字的毫秒数。
- en: It checks if the duration pass matches one of the property keys of the `$.fx.speeds`
    object. If so, it sets the duration to the value of the property.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它检查传递的持续时间是否匹配`$.fx.speeds`对象的属性键之一。如果是，则将持续时间设置为属性的值。
- en: If the duration is not set by any of the above checks, it sets the duration
    to the value of `$.fx.speeds._default`.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果持续时间未由上述任何检查设置，则将持续时间设置为`$.fx.speeds._default`的值。
- en: 'Given this information, we now know that passing any string duration other
    than `slow` or `fast` will result in a duration of 400 milliseconds. We can also
    see that adding our own custom speed is as easy as adding another property to
    `$.fx.speeds`. If we write `$.fx.speeds.crawl = 1200`, for example, we can use
    `''crawl''` for any animation method''s speed argument to run the animation for
    1200 milliseconds, like so:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 综合这些信息，我们现在知道，传递除`slow`或`fast`之外的任何字符串持续时间都会导致持续时间为400毫秒。我们还可以看到，添加我们自己的自定义速度就像添加另一个属性到`$.fx.speeds`一样简单。例如，如果我们写`$.fx.speeds.crawl
    = 1200`，我们可以在任何动画方法的速度参数中使用`'crawl'`以运行动画1200毫秒，如下所示：
- en: '[PRE7]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Although typing `'crawl'` is no easier than typing `1200`, custom speeds can
    come in handy in larger projects when a number of animations that share a certain
    speed need to change. In such cases, we could just change the value of `$.fx.speeds.crawl`
    rather than searching throughout the project for `1200` and replacing each one
    only if it represents an animation speed.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管键入`'crawl'`不比键入`1200`更容易，但在较大的项目中，当许多共享某个速度的动画需要更改时，自定义速度可能会派上用场。在这种情况下，我们可以更改`$.fx.speeds.crawl`的值，而不是在整个项目中搜索`1200`并仅在表示动画速度时替换每个值。
- en: 'While custom speeds can be useful, perhaps even more useful is the ability
    to change the default speed. We can do this by setting the `_default` property:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然自定义速度可能很有用，但也许更有用的是能够更改默认速度的能力。我们可以通过设置`_default`属性来做到这一点：
- en: '[PRE8]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Listing 11.5
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 列表11.5
- en: 'Now that we have defined a new faster default speed, any new animations we
    add will use it unless we override their durations. To see this at work, we will
    introduce another interactive element to the page. When the user clicks on one
    of the portraits, we want to display the details associated with that person.
    We will create the illusion of the details *unfolding* from the portrait by moving
    them out from under the portrait into their final positions:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经定义了一个新的更快的默认速度，除非我们覆盖它们的持续时间，否则任何新添加的动画都将使用它。为了看到这个过程，我们将向页面引入另一个交互元素。当用户点击其中一个肖像时，我们希望显示与该人物相关联的详细信息。我们将通过将它们从肖像下面移出到最终位置来创建详细信息从肖像中*展开*的错觉：
- en: '[PRE9]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Listing 11.6
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 列表11.6
- en: When a member is clicked, we use the `showDetails()` function as a handler.
    This function first sets the detail `<div>` elements in their starting positions,
    underneath the member's portrait. Then it animates each of the elements into its
    final position. By calling `.each()`, we can calculate a separate final `top`
    position for each element.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 当点击成员时，我们使用`showDetails()`函数作为处理程序。该函数首先将详细信息`<div>`元素设置在成员肖像的下方的起始位置。然后将每个元素动画到其最终位置。通过调用`.each()`，我们可以计算每个元素的单独最终`top`位置。
- en: 'After the animation, the detail text is visible:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 动画完成后，详细信息文本可见：
- en: '![](img/5297_11_04.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5297_11_04.png)'
- en: Since the `.animate()` method calls are made on different elements, they happen
    simultaneously rather than being queued. And, since the calls do not specify a
    duration, they all use the new default duration of 250 milliseconds.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`.animate()`方法调用是在不同的元素上进行的，所以它们是同时进行的，而不是排队进行的。而且，由于这些调用没有指定持续时间，它们都使用了新的默认持续时间
    250 毫秒。
- en: 'When another member is clicked, we want to hide the previously displayed one.
    We can easily track which details are currently on the screen with the use of
    a class:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 当点击另一个成员时，我们希望隐藏先前显示的成员。我们可以轻松地通过类来跟踪当前屏幕上显示的详细信息：
- en: '[PRE10]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Listing 11.7
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 11.7
- en: 'Ouch! Ten functions chained together? Well hang on a second, this might actually
    be better than splitting them apart. For one thing, chaining calls together like
    this means that there''s no need for temporary variables to hold intermediary
    DOM values. Instead, we can just read one line after another to figure out what''s
    happening. Let''s walk through these now:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 哎呀！十个函数链接在一起？等等，这其实可能比拆分它们更好。首先，像这样链接调用意味着不需要使用临时变量来保存中间的 DOM 值。相反，我们可以一行接一行地读取以了解发生了什么。现在让我们逐个解释一下这些：
- en: '`.siblings(''.active'')`: This finds the active `<div>` siblings'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.siblings(''.active'')`: 这会找到活动的`<div>`兄弟元素。'
- en: '`.removeClass(''active'')`: This removes the `.active` class'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.removeClass(''active'')`: 这会移除`.active`类。'
- en: '`.children(''div'')`: This finds the child `<div>` elements'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.children(''div'')`: 这会找到子`<div>`元素。'
- en: '`.fadeOut()`: This removes them'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.fadeOut()`: 这会将它们移除。'
- en: '`.end()`: This clears out the `.children(''div'')` query'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.end()`: 这会清除`.children(''div'')`查询结果。'
- en: '`.end()`: This clears out the `.siblings(''.active'')` query'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.end()`: 这会清除`.siblings(''.active'')`查询结果。'
- en: '`.addClass(''active'')`: This adds the `.active` class to the event target,
    the container `<div>`'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.addClass(''active'')`: 这会将`.active`类添加到事件目标，即容器`<div>`上。'
- en: '`.find(''div'')`: This finds all child `<div>` elements to display'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.find(''div'')`: 这会找到所有子`<div>`元素以显示。'
- en: '`.css()`: This sets relevant display CSS'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.css()`: 这会设置相关的显示 CSS。'
- en: '`.each()`: This adds animations to the `top` and `left` CSS properties'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.each()`: 这会向`top`和`left`CSS属性添加动画。'
- en: Note that our `.fadeOut()` call also uses the faster 250 millisecond duration
    we've defined. The defaults apply to jQuery's pre-packaged effects just as they
    do to custom `.animate()` calls.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们的`.fadeOut()`调用也使用了我们定义的更快的 250 毫秒持续时间。默认值适用于 jQuery 的预打包效果，就像它们适用于自定义`.animate()`调用一样。
- en: Multi-property easing
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多属性缓动
- en: The `showDetails()` function almost accomplishes the unfolding effect we set
    out to achieve, but because the `top` and `left` properties are animating at the
    same rate, it looks more like a sliding effect. We can subtly alter the effect
    by changing the easing equation to `easeInQuart` for the `top` property only,
    causing the element to follow a curved path rather than a straight one. Remember,
    however, that using any easing other than `swing` or `linear` requires a plugin,
    such as the effects core of jQuery UI ([http://jqueryui.com/](http://jqueryui.com/)).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`showDetails()`函数几乎实现了我们想要的展开效果，但由于`top`和`left`属性以相同的速率进行动画，它看起来更像是一个滑动效果。我们可以通过仅为`top`属性更改缓动方程式为`easeInQuart`来微妙地改变效果，从而使元素沿着曲线路径而不是直线路径移动。但请记住，除了`swing`或`linear`之外的任何缓动都需要插件，例如
    jQuery UI 的效果核心（[http://jqueryui.com/](http://jqueryui.com/)）。'
- en: '[PRE11]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Listing 11.8
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 11.8
- en: The `specialEasing` option allows us to set a different acceleration curve for
    each property that is being animated. Any properties that aren't included in the
    option will use the `easing` option's equation if it is provided, or the default
    `swing` equation if not.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`specialEasing`选项允许我们为每个正在动画化的属性设置不同的加速曲线。如果选项中不包括的属性，则将使用`easing`选项的方程式（如果提供）或默认的`swing`方程式。'
- en: We now have an attractive animation presenting most of the details associated
    with a team member. We aren't yet displaying a member's biography, however. Before
    we do this, we need to take a small digression to talk about jQuery's deferred
    object mechanism.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个引人注目的动画，展示了与团队成员相关的大部分细节。但我们还没有展示成员的传记。在这之前，我们需要稍微偏离一下话题，谈谈jQuery的延迟对象机制。
- en: Using deferred objects
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用延迟对象
- en: At times, we come across situations in which we want to act when a process completes,
    but we don't necessarily know how long the process will take, or even if it will
    be successful. To handle these cases, jQuery offers us **deferred objects** (promises).
    A deferred object encapsulates an operation that takes some time to complete.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我们会遇到一些情况，我们希望在过程完成时采取行动，但我们并不一定知道这个过程需要多长时间，或者是否会成功。为了处理这些情况，jQuery为我们提供了**延迟对象**（promises）。延迟对象封装了需要一些时间来完成的操作。
- en: A new deferred object can be created at any time by calling the `$.Deferred()`
    constructor. Once we have such an object, we can perform long-running operations
    and then call the `.resolve()` or `.reject()` methods on the object to indicate
    whether the operation was successful or unsuccessful. It is somewhat unusual to
    do this manually, however. Typically, rather than creating our own deferred objects
    by hand, jQuery or its plugins will create the object and take care of resolving
    or rejecting it. We just need to learn how to use the object that is created.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 可以随时通过调用`$.Deferred()`构造函数创建一个新的延迟对象。一旦我们有了这样的对象，我们可以执行长时间运行的操作，然后在对象上调用`.resolve()`或`.reject()`方法来指示操作是否成功或失败。然而，手动这样做有点不寻常。通常，我们不是手动创建自己的延迟对象，而是jQuery或其插件会创建对象，并负责解决或拒绝它。我们只需要学习如何使用创建的对象。
- en: Rather than detailing how the `$.Deferred()` constructor operates, we will focus
    here on how jQuery effects take advantage of deferred objects. In [Chapter 13](6bf83967-6247-454a-b1d2-3f3f48937865.xhtml),
    *Advanced Ajax*, we will further explore deferred objects in the context of Ajax
    requests.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不打算详细介绍`$.Deferred()`构造函数的操作方式，而是在这里重点讨论jQuery效果如何利用延迟对象。在[第13章](6bf83967-6247-454a-b1d2-3f3f48937865.xhtml)中，*高级Ajax*，我们将进一步探讨在Ajax请求的背景下的延迟对象。
- en: 'Every deferred object makes a promise to provide data to other code. This promise
    is represented as another object with its own set of methods. From any deferred
    object, we can obtain its promise object by calling its `.promise()` method. Then,
    we can call methods of the promise to attach handlers that are executed when the
    promise is fulfilled:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 每个延迟对象都承诺向其他代码提供数据。这个承诺作为另一个具有自己一套方法的对象来表示。从任何延迟对象，我们可以通过调用它的`.promise()`方法来获得它的promise对象。然后，我们可以调用promise的方法来附加处理程序，当promise被履行时执行：
- en: The `.then()` method attaches a handler that is called when the deferred object
    is resolved successfully
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.then()`方法附加了一个处理程序，当延迟对象成功解决时调用。'
- en: The `.catch()` method attaches a handler that is called when the deferred object
    is rejected
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.catch()`方法附加了一个处理程序，当延迟对象被拒绝时调用。'
- en: The `.always()` method attaches a handler that is called when the deferred object
    completes its task, either by being resolved or by being rejected
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.always()`方法附加了一个处理程序，当延迟对象完成其任务时被调用，无论是被解决还是被拒绝。'
- en: These handlers are much like the callbacks we provide to `.on()`, in that they
    are the functions called when some event happens. We can also attach multiple
    handlers to the same promise and all will be called at the appropriate time. There
    are a few important differences, however. Promise handlers will only ever be called
    once; the deferred object cannot resolve a second time. A promise handler will
    also be called immediately if the deferred object is already resolved at the time
    we attach the handler.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这些处理程序非常类似于我们提供给`.on()`的回调函数，因为它们是在某个事件发生时调用的函数。我们还可以附加多个处理程序到同一个承诺上，所有的会在适当的时候被调用。然而，这里也有一些重要的区别。承诺处理程序只会被调用一次；延迟对象无法再次解决。如果在我们附加处理程序时延迟对象已经被解决，那么承诺处理程序也会立即被调用。
- en: In [Chapter 6](3a5a790f-4c0a-4b63-bb00-cc38e78309c6.xhtml), *Sending Data with
    Ajax*, we saw a very simple example of how jQuery's Ajax system uses deferred
    objects. Now we will put this powerful tool to use once again by investigating
    the deferred objects that jQuery's animation system creates.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第6章](3a5a790f-4c0a-4b63-bb00-cc38e78309c6.xhtml)中，*使用Ajax发送数据*，我们看到了一个非常简单的例子，说明了jQuery的Ajax系统如何使用延迟对象。现在，我们将再次利用这个强大的工具，通过研究jQuery动画系统创建的延迟对象来使用它。
- en: Animation promises
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动画的承诺
- en: Every jQuery collection has a set of deferred objects associated with it tracking
    the status of queued operations on the elements in the collection. By calling
    the `.promise()` method on the jQuery object, we get a promise object that is
    resolved when a queue completes. In particular, we can use this promise to take
    action upon the completion of all of the animations running on any of the matched
    elements.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 jQuery 集合都有一组延迟对象与其关联，用于跟踪集合中元素的排队操作的状态。通过在 jQuery 对象上调用 `.promise()` 方法，我们得到一个在队列完成时解析的
    promise 对象。特别是，我们可以使用此 promise 在任何匹配元素上运行的所有动画完成时采取行动。
- en: 'Just as we have a `showDetails()` function to display the member name and location
    information, we can write a `showBio()` function for bringing the biographical
    information into view. But first, we''ll append a new `<div>` tag to the `<body>`
    tag and set up two options objects:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们有一个 `showDetails()` 函数来显示成员的名称和位置信息一样，我们可以编写一个 `showBio()` 函数来显示传记信息。但首先，我们将向
    `<body>` 标签附加一个新的 `<div>` 标签并设置两个选项对象：
- en: '[PRE12]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Listing 11.9
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '[11.9 清单](https://wiki.example.org/11.9_listing)'
- en: This new `movable`  `<div>` element is the one that we will actually animate
    after injecting it with a copy of a biography. Having a wrapper element like this
    is particularly useful when animating an element's width and height. We can set
    its `overflow` property to `hidden` and set an explicit width and height for the
    biographies within it to avoid the continual reflowing of text that would have
    occurred if we had instead animated the biography `<div>` elements themselves.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这个新的可移动 `<div>` 元素是我们实际上将要动画化的元素，在注入了传记副本后。像这样拥有一个包装元素在动画化元素的宽度和高度时特别有用。我们可以将其
    `overflow` 属性设置为 `hidden`，并为其中的传记设置显式的宽度和高度，以避免在我们动画化传记 `<div>` 元素本身时持续不断地重新排列文本。
- en: 'We''ll use the `showBio()` function to determine what the movable `<div>`''s
    starting and ending styles should be based on the member image that is clicked.
    Note that we''re using the `$.extend()` method to merge the set of base styles
    that remain constant with the `top` and `left` properties that vary depending
    on the member''s position. Then, it''s just a matter of using `.css()` to set
    the starting styles and `.animate()` for the ending styles:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 `showBio()` 函数根据点击的成员图像确定可移动 `<div>` 的起始和结束样式。请注意，我们使用 `$.extend()` 方法将保持不变的一组基本样式与根据成员位置变化的
    `top` 和 `left` 属性进行合并。然后，只需使用 `.css()` 设置起始样式和 `.animate()` 设置结束样式：
- en: '[PRE13]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Listing 11.10
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '[11.10 清单](https://wiki.example.org/11.10_listing)'
- en: We're queuing two `.animate()` methods so that the biography first flies from
    the left as it grows wider and fully opaque, and then slides down to its full
    height once it is in position.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们排队了两个 `.animate()` 方法，以便传记首先从左侧飞出并变宽和完全不透明，然后在到位后向下滑动到其完整高度。
- en: In [Chapter 4](6544cf68-239c-4a0b-99f6-2d128dc5f7b1.xhtml), *Styling and Animating*,
    we saw that callback functions in jQuery's animation methods are called when the
    animation completes for each element in the collection. We want to show the member's
    biography after the other `<div>` elements appear. Before jQuery introduced the
    `.promise()` method, this would have been an onerous task, requiring us to count
    down from the total number of elements each time the callback was executed until
    the last time, at which point we could execute the code to animate the biography.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [第 4 章](6544cf68-239c-4a0b-99f6-2d128dc5f7b1.xhtml)，*样式和动画* 中，我们看到 jQuery
    动画方法中的回调函数在集合中每个元素的动画完成时被调用。我们希望在其他 `<div>` 元素出现后显示成员的传记。在 jQuery 引入 `.promise()`
    方法之前，这将是一项繁重的任务，需要我们在每次执行回调时从总元素数倒计时，直到最后一次，此时我们可以执行动画化传记的代码。
- en: 'Now we can simply chain the `.promise()` and `.then()` methods to the `.each()`
    method inside our `showDetails()` function:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以简单地将 `.promise()` 和 `.then()` 方法链接到我们的 `showDetails()` 函数内部的 `.each()`
    方法中：
- en: '[PRE14]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Listing 11.11
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '[11.11 清单](https://wiki.example.org/11.11_listing)'
- en: 'The `.then()` method takes a reference to our `showBio()` function as its argument.
    Now a click on an image brings all of that member''s information into view with
    an attractive animation sequence:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`.then()` 方法将我们的 `showBio()` 函数的引用作为其参数。现在，点击图像将以吸引人的动画序列将所有成员信息显示出来：'
- en: '![](img/Image5297_11_05-1.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Image5297_11_05-1.png)'
- en: Since jQuery 3.0, the promises returned by the `promise()` method are fully
    compatible with native ES 2015 promises. This means that where possible, we should
    use the same API. For example, use `then()` instead of `done()`. They do the same
    thing, and your asynchronous code will be consistent with other asynchronous code.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 自 jQuery 3.0 起，`promise()` 方法返回的 promises 与原生 ES 2015 promises 完全兼容。这意味着在可能的情况下，我们应该使用相同的
    API。例如，使用 `then()` 代替 `done()`。它们做的是一样的事情，你的异步代码将与其他异步代码保持一致。
- en: Taking fine-grained control of animations
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对动画进行细粒度控制
- en: 'Even though we''ve looked at a number of advanced features, jQuery''s effects
    module has much more to explore. A rewrite of this module for jQuery 1.8 introduced
    a number of ways for advanced developers to fine-tune various effects and even
    change the underlying engine that drives the animations. For example, in addition
    to offering options such as `duration` and `easing`, the `.animate()` method provides
    a couple of callback options that let us inspect and modify an animation each
    step of the way:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 即使我们已经研究了许多高级功能，jQuery 的效果模块还有很多可以探索的地方。jQuery 1.8 的重写为这个模块引入了许多高级开发者调整各种效果甚至更改驱动动画的底层引擎的方法。例如，除了提供
    `duration` 和 `easing` 等选项外，`.animate()` 方法还提供了一些回调选项，让我们在动画的每一步检查和修改动画：
- en: '[PRE15]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The `step()` function, which is called roughly once every 13 milliseconds for
    each animated property during the animation, allows us to adjust properties of
    the `tween` object such as the end value, the type of easing, or the actual property
    being animated based on the current value of a property via the passed `now` argument.
    A complex demonstration might, for example, use the `step()` function to detect
    a collision between two moving elements and adjust their trajectories on impact.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`step()` 函数，每次动画属性动画期间大约每 13 毫秒调用一次，允许我们根据传递的 `now` 参数的当前值调整 `tween` 对象的属性，如结束值、缓动类型或实际正在动画的属性。例如，一个复杂的演示可能会使用
    `step()` 函数来检测两个移动元素之间的碰撞，并根据碰撞调整它们的轨迹。'
- en: 'The `progress()` function is similarly called multiple times throughout the
    lifecycle of an animation:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '`progress()` 函数在动画的生命周期中被多次调用：'
- en: It differs from `step()` in that it is called only once per element at each
    step, regardless of how many properties are being animated
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它与 `step()` 不同之处在于，它每一步仅在每个元素上调用一次，而不管正在动画多少个属性
- en: It makes available different aspects of the animation, including the animation's
    promise object, the progress, which is a number between `0` and `1`, and the number
    of milliseconds remaining in the animation
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它提供了动画的不同方面，包括动画的 promise 对象、进度（一个介于 `0` 和 `1` 之间的数字）以及动画中剩余的毫秒数。
- en: All of jQuery's animations use a JavaScript timer function called `setTimeout()`
    to repeatedly call functions--every 13 milliseconds by default--and change the
    style properties during each tick. Some modern browsers, however, provide a new
    `requestAnimationFrame()` function that has advantages over `setTimeout()`, including
    increased precision (and therefore perceived smoothness of animations) and improved
    battery consumption for mobile devices.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 所有 jQuery 的动画都使用一个名为 `setTimeout()` 的 JavaScript 计时器函数来重复调用函数 —— 默认情况下每 13 毫秒一次
    —— 并在每个时刻改变样式属性。然而，一些现代浏览器提供了一个新的 `requestAnimationFrame()` 函数，它相对于 `setTimeout()`
    有一些优势，包括增加了精度（因此动画的平滑度更高）和改善了移动设备的电池消耗。
- en: At the lowest level of jQuery's animation system lie its `$.Animation()` and
    `$.Tween()` functions. These functions and their corresponding objects can be
    used to tweak every possible aspect of an animation. For example, we can use `$.Animation`
    to create an animation **prefilter****.** One such prefilter could take a
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在 jQuery 的动画系统的最低级别上，有它的 `$.Animation()` 和 `$.Tween()` 函数。这些函数及其对应的对象可以用来调整动画的每一个可能的方面。例如，我们可以使用
    `$.Animation` 来创建一个动画**预处理**。这样的预处理可以采用一个
- en: particular
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 特别
- en: 'action at the end of an animation based on the existence of a property passed
    to the `.animate()` method''s `options` object:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 基于传递给 `.animate()` 方法的 `options` 对象中的属性的存在，在动画结束时执行动作：
- en: '[PRE16]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'With this code in place, calling `$(''#my-div'').fadeOut({ removeAfter: true
    })` would automatically remove `<div>` from the DOM after it has finished fading
    out.'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '使用这段代码，调用 `$(''#my-div'').fadeOut({ removeAfter: true })` 将在淡出完成后自动从 DOM 中删除
    `<div>`。'
- en: Summary
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have further investigated several techniques that can assist
    us in crafting beautiful animations that are helpful to our users. We can now
    individually control the acceleration and deceleration of each property we are
    animating, and halt these animations individually or globally if needed. We learned
    about the properties that jQuery's effects library defines internally, and how
    to change some of them to suit our needs. We made our first foray into the jQuery
    deferred object system, which we will explore further in [Chapter 13](6bf83967-6247-454a-b1d2-3f3f48937865.xhtml),
    *Advanced Ajax*, and we got a taste of the many opportunities to fine-tune jQuery's
    animation system.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们进一步研究了几种可以帮助我们制作对用户有用的漂亮动画的技术。我们现在可以单独控制我们正在动画化的每个属性的加速度和减速度，并在需要时单独或全局停止这些动画。我们了解了
    jQuery 的效果库内部定义的属性，以及如何更改其中一些属性以适应我们的需求。我们初次涉足了 jQuery 延迟对象系统，我们将在[第 13 章](6bf83967-6247-454a-b1d2-3f3f48937865.xhtml)
    *高级 Ajax*中进一步探索，并且我们品尝到了调整 jQuery 动画系统的许多机会。
- en: Further reading
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: A complete list of effect and animation methods is available in *Appendix B* of
    this book, or in the official jQuery documentation at [http://api.jquery.com/](http://api.jquery.com/).
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 本书附录 B 中提供了完整的效果和动画方法列表，或者您可以在[官方 jQuery 文档](http://api.jquery.com/)中找到。
- en: Exercises
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: The challenge exercises may require the use of the official jQuery documentation
    at [http://api.jquery.com/](http://api.jquery.com/).
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 挑战练习可能需要使用[官方 jQuery 文档](http://api.jquery.com/)。
- en: Define a new animation speed constant called `zippy` and apply this to the biography
    display effect.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个名为`zippy`的新动画速度常数，并将其应用于传记显示效果。
- en: Change the easing of the horizontal movement of member details so that they
    bounce into place.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更改成员详细信息的水平移动的缓动，使其反弹到位。
- en: Add a second deferred callback function to the promise that adds a `highlight`
    class to the current member's location `<div>`.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向 promise 添加一个第二个延迟回调函数，将`highlight`类添加到当前成员位置的`<div>`中。
- en: 'Challenge: Add a delay of two seconds before animating the biography. Use the
    jQuery `.delay()` method.'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 挑战：在动画传记之前添加两秒的延迟。使用 jQuery 的`.delay()`方法。
- en: 'Challenge: When the active photo is clicked, collapse the bio details. Stop
    any running animation before doing so.'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 挑战：当点击活动照片时，折叠生物详细信息。在执行此操作之前停止任何正在运行的动画。
