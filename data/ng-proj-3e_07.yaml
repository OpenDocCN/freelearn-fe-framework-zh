- en: '7'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '7'
- en: Building an SSR Application for a GitHub Portfolio Using Angular
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Angular为GitHub资料构建SSR应用程序
- en: A typical Angular application follows the **Single-Page Application (SPA)**
    approach, where each page is created in the DOM of the browser while the user
    interacts with the application. A web server hosts the application and serves
    only the main page, usually called `index.html`, at application startup.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 一个典型的Angular应用程序遵循**单页应用程序（SPA）**的方法，其中每个页面都在浏览器的DOM中创建，同时用户与应用程序进行交互。一个网络服务器托管应用程序，并在应用程序启动时仅提供主页面，通常称为`index.html`。
- en: '**Server-Side Rendering (SSR)** is a technique that follows an entirely different
    approach for application rendering than SPA. It uses the server to prerender pages
    when the user requests them at runtime. Rendering content on the server dramatically
    enhances the performance of a web application and improves its **Search Engine
    Optimization (SEO)** capabilities. To perform SSR in an Angular application, we
    use a library called **Angular Universal**.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**服务器端渲染（SSR）**是一种与SPA完全不同的应用程序渲染方法。它在用户在运行时请求页面时使用服务器进行预渲染页面。在服务器上渲染内容极大地提高了Web应用程序的性能，并改善了其**搜索引擎优化（SEO）**能力。要在Angular应用程序中执行SSR，我们使用一个名为**Angular
    Universal**的库。'
- en: 'In this chapter, we will learn how to benefit from Angular Universal by building
    a portfolio application using the **GitHub API**. We will cover the following
    topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何通过构建使用**GitHub API**的资料应用程序来从Angular Universal中获益。我们将涵盖以下主题：
- en: Building an Angular application with the GitHub API
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用GitHub API构建Angular应用程序
- en: Integrating Angular Universal
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成Angular Universal
- en: Prerendering content during build
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在构建过程中预渲染内容
- en: Enhancing SEO capabilities
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提升SEO能力
- en: Essential background theory and context
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重要的背景理论和上下文
- en: 'An Angular application consists of several pages created dynamically in the
    DOM of the browser by the Angular framework while we use the application. Angular
    Universal enables the Angular framework to create these pages on the server statically
    during application runtime. In other words, it can create a fully static version
    of an Angular application that can run even without needing to have JavaScript
    enabled. Prerendering an application on the server has the following advantages:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 一个Angular应用程序由几个页面组成，这些页面在我们使用应用程序时由Angular框架在浏览器DOM中动态创建。Angular Universal使Angular框架能够在应用程序运行时在服务器上静态地创建这些页面。换句话说，它可以创建一个完全静态的Angular应用程序版本，即使不需要启用JavaScript也可以运行。在服务器上预渲染应用程序有以下优点：
- en: It allows web crawlers to index the application and make it discoverable and
    linkable on social media websites.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它允许网络爬虫索引应用程序，并在社交媒体网站上使其可发现和可链接。
- en: It makes the application usable on mobile and other low-performant devices that
    cannot afford to execute JavaScript on their side.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这使得应用程序在移动和其他性能较低的设备上可用，这些设备无法在其侧执行JavaScript。
- en: It improves the user experience by loading the first page quickly and, at the
    same time, loading the actual client page in the background (**First Contentful
    Paint (FCP)**).
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它通过快速加载第一页并在后台同时加载实际客户端页面（**首次内容绘制（FCP）**）来提高用户体验。
- en: The GitHub API is an HTTP REST API for interacting with GitHub data. It can
    be used publicly or privately using an authentication mechanism provided out of
    the box.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub API是一个用于与GitHub数据交互的HTTP REST API。它可以通过提供的开箱即用的认证机制公开或私下使用。
- en: Unauthorized requests to the GitHub API are limited to 60 requests per hour.
    For an overview of the available authentication methods, you can find more details
    at [https://docs.github.com/en/rest/overview/authenticating-to-the-rest-api](https://docs.github.com/en/rest/overview/authenticating-to-the-rest-api).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 对GitHub API的无授权请求限制为每小时60次。有关可用认证方法的概述，您可以在[https://docs.github.com/en/rest/overview/authenticating-to-the-rest-api](https://docs.github.com/en/rest/overview/authenticating-to-the-rest-api)找到更多详细信息。
- en: We use the built-in HTTP client available in the `@angular/common/http` npm
    package to communicate over HTTP in Angular. Interacting with HTTP in SSR applications
    may result in duplicated HTTP requests due to the page prerendering at the FCP.
    However, Angular Universal can overcome this type of duplication using a mechanism
    called **TransferState**.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`@angular/common/http` npm包中可用的内置HTTP客户端在Angular中进行HTTP通信。在SSR应用程序中与HTTP交互可能会导致由于在FCP时页面预渲染而导致的HTTP请求重复。然而，Angular
    Universal可以通过称为**TransferState**的机制克服这种类型的重复。
- en: Project overview
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目概述
- en: In this project, we will build a portfolio application for our GitHub user profile.
    We will initially use the Angular CLI to scaffold an Angular application that
    interacts with the GitHub API. We will learn how to use the GitHub API and fetch
    user-specific data. We will also use the **Bootstrap CSS** library to style our
    application and create a beautiful user interface.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们将为我们的GitHub用户资料构建一个个人资料应用程序。我们最初将使用Angular CLI来搭建一个与GitHub API交互的Angular应用程序。我们将学习如何使用GitHub
    API并获取特定用户的数据。我们还将使用**Bootstrap CSS**库来美化我们的应用程序并创建一个美观的用户界面。
- en: After creating our Angular application, we will turn it into a server-side-rendered
    application using Angular Universal. We will see how to install and configure
    Angular Universal, and we will learn how to prerender it during build time.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建我们的Angular应用程序后，我们将使用Angular Universal将其转换为服务器端渲染的应用程序。我们将了解如何安装和配置Angular
    Universal，并学习如何在构建时进行预渲染。
- en: 'Then, we will configure our application to render using SEO in the most popular
    social platforms correctly. The following diagram depicts an architectural overview
    of the project:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将配置我们的应用程序以在最受欢迎的社会平台上正确地使用SEO进行渲染。以下图表展示了项目的架构概述：
- en: '![](img/B18465_07_01.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B18465_07_01.png)'
- en: Figure 7.1 – Project architecture
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.1 – 项目架构
- en: 'Build time: 2 hours'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 构建时间：2小时
- en: Getting started
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入门
- en: 'The following prerequisites and software tools are required to complete this
    project:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此项目所需的先决条件和软件工具如下：
- en: '**GitHub account**: A valid GitHub user account.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GitHub账户**：一个有效的GitHub用户账户。'
- en: '**Angular CLI**: A CLI for Angular that you can find at [https://angular.io/cli](https://angular.io/cli).'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Angular CLI**：Angular的CLI，您可以在[https://angular.io/cli](https://angular.io/cli)找到。'
- en: '**GitHub material**: The related code for this chapter can be found in the
    `Chapter07` folder at [https://github.com/PacktPublishing/Angular-Projects-Third-Edition](https://github.com/PacktPublishing/Angular-Projects-Third-Edition).'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GitHub材料**：本章的相关代码可以在[https://github.com/PacktPublishing/Angular-Projects-Third-Edition](https://github.com/PacktPublishing/Angular-Projects-Third-Edition)的`Chapter07`文件夹中找到。'
- en: Building an Angular application with the GitHub API
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用GitHub API构建Angular应用程序
- en: 'GitHub contains an API that we can use to fetch various information about the
    profile of a GitHub user. The Angular application we are building will communicate
    with the GitHub API and display a brief portfolio for our GitHub profile. Our
    application will consist of the following features:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub包含一个API，我们可以使用它来获取有关GitHub用户资料的各项信息。我们正在构建的Angular应用程序将与GitHub API通信并显示我们GitHub资料的简要个人资料。我们的应用程序将包含以下功能：
- en: '**Dashboard**: This will be the landing page of the application, and it will
    display a summary of our GitHub profile.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**仪表板**：这将是应用程序的着陆页，它将显示我们的GitHub资料的摘要。'
- en: '**Info**: This will display personal information about us.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**信息**：这将显示关于我们的个人信息。'
- en: '**Repositories**: This will display a list of our *public* repositories.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**仓库**：这将显示我们的**公共**仓库列表。'
- en: '**Organizations**: This will display a list of GitHub organizations of which
    we are members.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**组织**：这将显示我们作为成员的GitHub组织列表。'
- en: The resulting output of each feature that is displayed in the screenshots of
    this chapter will be different according to your GitHub profile.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 本章截图显示的每个功能的结果输出将根据您的GitHub资料而有所不同。
- en: The dashboard will be the main page of the application, and it will contain
    all the other features. We will learn how to build the dashboard page in the following
    section.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 仪表板将是应用程序的主页，它将包含所有其他功能。我们将在下一节学习如何构建仪表板页面。
- en: Building the dashboard
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建仪表板
- en: 'Before we can start creating the main features of our application, we need
    to scaffold and configure an Angular application by running the following command:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始创建应用程序的主要功能之前，我们需要通过运行以下命令来搭建和配置一个Angular应用程序：
- en: '[PRE0]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The preceding command will use the `ng new` command of the Angular CLI, passing
    the following options:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令将使用Angular CLI的`ng new`命令，传递以下选项：
- en: '`gh-portfolio`: The name of the Angular application that we want to create'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gh-portfolio`：我们想要创建的Angular应用程序的名称'
- en: '`--routing=false`: Disables routing because our application will consist of
    a single page'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--routing=false`：禁用路由，因为我们的应用程序将只包含一个页面'
- en: '`--style=scss`: Configures the Angular application to use the SCSS stylesheet
    format when working with CSS styles'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--style=scss`：配置Angular应用程序在处理CSS样式时使用SCSS样式表格式'
- en: 'We will use the Bootstrap CSS library for styling our portfolio application.
    Let’s see how to install and configure it in the Angular CLI application that
    we have just created:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Bootstrap CSS库来为我们的投资组合应用程序进行样式设计。让我们看看如何在刚刚创建的Angular CLI应用程序中安装和配置它：
- en: 'Execute the following `npm` command to install the Bootstrap CSS library:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下`npm`命令安装Bootstrap CSS库：
- en: '[PRE1]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Open the `src\styles.scss` file and import the Bootstrap SCSS stylesheet:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`src\styles.scss`文件并导入Bootstrap SCSS样式表：
- en: '[PRE2]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `styles.scss` file contains CSS styles that are applied globally to the
    application. The `@import` CSS rule accepts the absolute path of a stylesheet
    file we want to load.
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`styles.scss`文件包含应用于应用程序的全局CSS样式。`@import` CSS规则接受我们想要加载的样式表的绝对路径。'
- en: When we import a stylesheet format using the `@import` rule, we omit the extension
    of the file.
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当我们使用`@import`规则导入样式表格式时，我们省略了文件的扩展名。
- en: 'Execute the following command to install **Bootstrap Icons**, a free and open-source
    icon library:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下命令安装**Bootstrap Icons**，这是一个免费的开源图标库：
- en: '[PRE3]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Bootstrap Icons can be used in various formats, such as SVG or font. In this
    project, we are going to use the latter.
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Bootstrap Icons可以使用多种格式，如SVG或字体。在这个项目中，我们将使用后者。
- en: 'Import the font icon format of the Bootstrap Icons library into the `styles.scss`
    file:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Bootstrap Icons库的字体图标格式导入到`styles.scss`文件中：
- en: '[PRE4]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We have already created the Angular application and added the necessary artifacts
    for styling it. We are now ready to start creating the main page of our Angular
    application:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经创建了Angular应用程序并添加了必要的样式元素。现在我们准备开始创建Angular应用程序的主页：
- en: Download an Angular logo of your choice from the **press kit** of the official
    Angular documentation at [https://angular.io/presskit](https://angular.io/presskit).
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从官方Angular文档的[https://angular.io/presskit](https://angular.io/presskit)的**媒体包**中下载您选择的Angular标志。
- en: Copy the downloaded logo file into the `src\assets` folder of the Angular CLI
    workspace. The `assets` folder is used for static files such as images, fonts,
    and JSON files.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将下载的标志文件复制到Angular CLI工作区的`src\assets`文件夹中。`assets`文件夹用于静态文件，如图像、字体和JSON文件。
- en: 'Open the `app.component.ts` file and create a `username` property in the `AppComponent`
    class that holds your GitHub login as a value:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`app.component.ts`文件，并在`AppComponent`类中创建一个`username`属性，该属性以GitHub登录名作为值：
- en: '[PRE5]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Open the `app.component.html` file and replace its content with the following
    HTML template:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`app.component.html`文件，并用以下HTML模板替换其内容：
- en: '[PRE6]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the preceding template, we define the header of our application. It contains
    an anchor element that links to our GitHub profile. We have also added the GitHub
    icon using the `bi-github` class from the Bootstrap Icons set.
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在前面的模板中，我们定义了我们的应用程序的标题。它包含一个锚点元素，链接到我们的GitHub个人资料。我们还使用了Bootstrap Icons集中的`bi-github`类添加了GitHub图标。
- en: 'Insert the following HTML snippet after the header of the application:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在应用程序的标题之后插入以下HTML片段：
- en: '[PRE7]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Open the `app.component.scss` file and add the following CSS styles for the
    header and the content of our application:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`app.component.scss`文件，并为应用程序的标题和内容添加以下CSS样式：
- en: '[PRE8]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Run `ng serve` to start the application and navigate to `http://localhost:4200`.
    The header of the application should look like the following:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`ng serve`以启动应用程序并导航到`http://localhost:4200`。应用程序的标题应如下所示：
- en: '![Figure 7.2 – Application header](img/B18465_07_02.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![图7.2 – 应用程序标题](img/B18465_07_02.png)'
- en: Figure 7.2 – Application header
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.2 – 应用程序标题
- en: The main page of our portfolio application is now ready. It contains a header
    and an empty container element for adding the main features. In the following
    section, we will start building the *personal information* feature of our application.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的投资组合应用程序的主页现在准备好了。它包含一个标题和一个用于添加主要功能的空容器元素。在下一节中，我们将开始构建应用程序的*个人信息*功能。
- en: Displaying personal information
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 显示个人信息
- en: 'The first feature of our application will be to display personal information
    from our GitHub profile, such as the full name, the profile photo, and some social
    media links. Before creating the feature, we first need to configure our application
    so that it can communicate with the GitHub API:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应用程序的第一个功能将是显示来自GitHub个人资料的个人信息，例如全名、个人照片和一些社交媒体链接。在创建功能之前，我们首先需要配置我们的应用程序，使其能够与GitHub
    API通信：
- en: 'Open the main module of the application, the `app.module.ts` file, and add
    the `HttpClientModule` class to the `imports` array of the `@NgModule` decorator:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开应用程序的主模块，即`app.module.ts`文件，并将`HttpClientModule`类添加到`@NgModule`装饰器的`imports`数组中：
- en: '[PRE9]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `HttpClientModule` class is the main Angular module of the built-in HTTP
    library that exports all the necessary services for interacting with an HTTP resource.
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`HttpClientModule`类是内置HTTP库的主要Angular模块，它导出了与HTTP资源交互所需的所有必要服务。'
- en: 'Create a new Angular service using the following Angular CLI command:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下Angular CLI命令创建一个新的Angular服务：
- en: '[PRE10]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Open the `github.service.ts` file and inject the `HttpClient` service into
    the `constructor` of the `GithubService` class:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`github.service.ts`文件，将`HttpClient`服务注入到`GithubService`类的`constructor`中：
- en: '[PRE11]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `HttpClient` class is an Angular service of the built-in HTTP client that
    provides all the primary methods for interacting with HTTP, such as **GET**, **POST**,
    and **PUT**.
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`HttpClient`类是Angular内置HTTP客户端的服务，它提供了与HTTP交互的所有主要方法，例如**GET**、**POST**和**PUT**。'
- en: 'Add the following properties in the `GithubService` class:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`GithubService`类中添加以下属性：
- en: '[PRE12]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Make sure that you set the value of the `username` property to your GitHub login.
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保将`username`属性的值设置为您的GitHub登录名。
- en: 'Modify the `app.component.ts` file so that it uses the `username` property
    from `GithubService`:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`app.component.ts`文件，使其使用`GithubService`中的`username`属性：
- en: '[PRE13]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'All interaction between our application and the GitHub API will be delegated
    to `GithubService`. Now, let’s focus on building our feature:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序与GitHub API之间的所有交互都将委托给`GithubService`。现在，让我们专注于构建我们的功能：
- en: 'Execute the following command of the Angular CLI to create a new Angular component
    for our feature:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下Angular CLI命令来创建我们功能的新Angular组件：
- en: '[PRE14]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Create a `user` interface to define the data model of our component using the
    following Angular CLI command:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下Angular CLI命令创建一个`user`接口，以定义组件的数据模型：
- en: '[PRE15]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Open the `user.ts` file and add the following properties to the `User` interface:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`user.ts`文件，并将以下属性添加到`User`接口中：
- en: '[PRE16]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Open the `github.service.ts` file and add the following `import` statements:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`github.service.ts`文件，并添加以下`import`语句：
- en: '[PRE17]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Create a new method to get the details of our profile from the GitHub API:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新方法，从GitHub API获取我们个人资料详情：
- en: '[PRE18]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Open the `personal-info.component.ts` file and modify the `import` statements
    accordingly:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`personal-info.component.ts`文件，并相应地修改`import`语句：
- en: '[PRE19]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Inject `GithubService` into the `constructor` of the `PersonalInfoComponent`
    class and create a component property to get the result of the `getUser` method:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`GithubService`注入到`PersonalInfoComponent`类的`constructor`中，并创建一个组件属性以获取`getUser`方法的结果：
- en: '[PRE20]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Open the `personal-info.component.html` file and replace its content with the
    following HTML template:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`personal-info.component.html`文件，将其内容替换为以下HTML模板：
- en: '[PRE21]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: In the preceding template, we use the `async` pipe because the `user$` property
    is an observable, and we need to subscribe to it to get its values. The main advantage
    of the `async` pipe is that it unsubscribes from the observable automatically
    when a component is destroyed, avoiding potential memory leaks.
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在前面的模板中，我们使用`async`管道，因为`user$`属性是一个可观察对象，我们需要订阅它以获取其值。`async`管道的主要优点是当组件被销毁时，它会自动取消订阅可观察对象，从而避免潜在的内存泄漏。
- en: We also create the `user` alias for the observable to reference it easily in
    various locations around the component template.
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们还创建了`user`别名，以便在组件模板的各个位置轻松引用它。
- en: 'Open the `app.component.html` file and add the `<app-personal-info>` component
    to the element with the `col-sm-3` class selector:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`app.component.html`文件，并将`<app-personal-info>`组件添加到具有`col-sm-3`类选择器的元素中：
- en: '[PRE22]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'If we run `ng serve` to preview the application, we should see the personal
    information panel on the left side of the page:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行`ng serve`来预览应用程序，我们应该在页面左侧看到个人信息面板：
- en: '![Figure 7.3 – Personal information](img/B18465_07_03.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![图7.3 – 个人信息](img/B18465_07_03.png)'
- en: Figure 7.3 – Personal information
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.3 – 个人信息
- en: The first feature of our portfolio application is now complete. It displays
    the personal information of our GitHub profile along with a short bio and some
    social network links. In the next section, we will build the *repositories* feature
    of our application.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的投资组合应用程序的第一个功能现在已完成。它显示了我们GitHub个人资料的个人信息、简短的个人简介和一些社交网络链接。在下一节中，我们将构建应用程序的*仓库*功能。
- en: Listing user repositories
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列出用户仓库
- en: The GitHub user profile contains a list of repositories the user owns, called
    **sources**, and another list of repositories that contribute, called **forks**.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub 用户资料包含用户拥有的仓库列表，称为 **sources**，以及另一个贡献的仓库列表，称为 **forks**。
- en: The repositories feature of our application will only display the source repositories.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应用程序的仓库功能将仅显示源仓库。
- en: 'The *repositories* and *organizations* features will have a similar user interface.
    Thus, we need to create a component for both features:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '*repositories* 和 *organizations* 功能将具有类似的用户界面。因此，我们需要为这两个功能创建一个组件：'
- en: 'Execute the following command of the Angular CLI to create a new component:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下 Angular CLI 命令来创建一个新的组件：
- en: '[PRE23]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Open the `panel.component.ts` file and define two input properties using the
    `@Input` decorator:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `panel.component.ts` 文件，并使用 `@Input` 装饰器定义两个输入属性：
- en: '[PRE24]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Open the `panel.component.html` file and replace its content with the following
    HTML template:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `panel.component.html` 文件，并用以下 HTML 模板替换其内容：
- en: '[PRE25]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The panel component is a Bootstrap card element that consists of a header and
    a body. The header uses the `caption` and `icon` input properties to display text
    with an icon. The body uses the `<ng-content>` Angular component to define a placeholder
    where the content from our features will be displayed.
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 面板组件是一个 Bootstrap 卡片元素，由标题和主体组成。标题使用 `caption` 和 `icon` 输入属性来显示带图标的文本。主体使用 `<ng-content>`
    Angular 组件来定义一个占位符，其中将显示我们的功能内容。
- en: 'We can now start using the panel component to create our feature:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以使用面板组件来创建我们的功能：
- en: 'Create an interface for representing the data model of a GitHub repository:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个接口来表示 GitHub 仓库的数据模型：
- en: '[PRE26]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Open the `repository.ts` file and add the following properties in the `Repository`
    interface:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `repository.ts` 文件，并在 `Repository` 接口中添加以下属性：
- en: '[PRE27]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Open the `github.service.ts` file and import the `Repository` interface:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `github.service.ts` 文件，并导入 `Repository` 接口：
- en: '[PRE28]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Now, it is time for some refactoring in our service. The URL we will use for
    getting repositories is similar to that of the `getUser` method. Extract the URL
    of that method in a property of the `GithubService` class:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，是我们对服务进行重构的时候了。我们将用于获取仓库的 URL 与 `getUser` 方法的 URL 类似。将那个方法的 URL 提取为 `GithubService`
    类的一个属性：
- en: '[PRE29]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Create a new method to fetch repositories of the current GitHub user:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的方法来获取当前 GitHub 用户的仓库：
- en: '[PRE30]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Now that we have created the prerequisites for fetching the user repositories
    from the GitHub API, we can start building the component that will display those
    repositories:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经为从 GitHub API 获取用户仓库创建了先决条件，我们可以开始构建将显示这些仓库的组件：
- en: 'Execute the following command to create a new Angular component using the Angular
    CLI:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下命令使用 Angular CLI 创建一个新的 Angular 组件：
- en: '[PRE31]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Open the `repositories.component.ts` file and modify the `import` statements
    accordingly:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `repositories.component.ts` 文件，并相应地修改 `import` 语句：
- en: '[PRE32]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Inject `GithubService` into the `constructor` of the `RepositoriesComponent`
    class and create a component property to get the result of the `getRepos` method:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `RepositoriesComponent` 类的 `constructor` 中注入 `GithubService`，并创建一个组件属性以获取
    `getRepos` 方法的结果：
- en: '[PRE33]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: In the preceding class, we use the `pipe` RxJS operator to combine the observable
    returned from the `getRepos` method with the `map` operator to filter out `fork`
    repositories and get only sources. Filtering is accomplished using the standard
    `filter` method for arrays.
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在前面的类中，我们使用 RxJS 的 `pipe` 操作符将 `getRepos` 方法返回的可观察对象与 `map` 操作符结合，以过滤掉 `fork`
    仓库并仅获取源。过滤是通过使用数组的标准 `filter` 方法完成的。
- en: 'Open the `repositories.component.html` file and replace its content with the
    following HTML template:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `repositories.component.html` 文件，并用以下 HTML 模板替换其内容：
- en: '[PRE34]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: In the preceding template, we wrap the main content of the component inside
    the `<app-panel>` component and set the `caption` and `icon` properties for the
    header.
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在前面的模板中，我们将组件的主要内容包裹在 `<app-panel>` 组件内部，并为标题设置了 `caption` 和 `icon` 属性。
- en: Our component iterates over the `repos$` observable and displays the `name`
    and the `description` of each repository. The name is an anchor element that points
    to the actual GitHub URL of the repository.
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们的组件遍历 `repos$` 可观察对象，并显示每个仓库的 `name` 和 `description`。名称是一个锚点元素，指向仓库的实际 GitHub
    URL。
- en: 'Add the following list immediately after the element with the `card-body` class
    selector:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在具有 `card-body` 类选择器的元素之后立即添加以下列表：
- en: '[PRE35]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Open the `app.component.html` file and add the `<app-repositories>` component
    in the first HTML element with the `col-12 col-sm-12` class selector:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`app.component.html`文件，并在第一个HTML元素中使用`col-12 col-sm-12`类选择器添加`<app-repositories>`组件：
- en: '[PRE36]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Run `ng serve` to preview the application, and you should see the new panel
    next to the *personal information* feature:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`ng serve`来预览应用程序，你应该能在*个人信息*功能旁边看到新的面板：
- en: '![Figure 7.4 – Repositories](img/B18465_07_04.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![图7.4 – 仓库](img/B18465_07_04.png)'
- en: Figure 7.4 – Repositories
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.4 – 仓库
- en: The second feature of our application has been completed. It displays a list
    of public repositories that exist in our GitHub profile. Our application now also
    features a panel component that we can use to build the organizations feature
    of our application in the following section.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应用程序的第二个功能已经完成。它显示了我们GitHub个人资料中存在的公共仓库列表。我们的应用程序现在还提供了一个面板组件，我们可以在下一节中使用它来构建应用程序的组织功能。
- en: Visualizing the organization membership
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可视化组织成员资格
- en: A GitHub user can be a member of a GitHub organization. Our application will
    display a list of user organizations and additional information about each.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 一个GitHub用户可以是GitHub组织的成员。我们的应用程序将显示用户组织列表以及每个组织的附加信息。
- en: 'Let’s start building our organization list:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始构建我们的组织列表：
- en: 'Create an interface to define the properties of an organization:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个接口来定义组织的属性：
- en: '[PRE37]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Open the `organization.ts` file and add the following properties in the `Organization`
    interface:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`organization.ts`文件，并在`Organization`接口中添加以下属性：
- en: '[PRE38]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Open the `github.service.ts` file and import the `Organization` interface:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`github.service.ts`文件并导入`Organization`接口：
- en: '[PRE39]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Create a new method to get organizations of the current GitHub user:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的方法来获取当前GitHub用户的组织：
- en: '[PRE40]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Execute the following command to create an Angular component for our feature:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下命令来创建我们的功能对应的Angular组件：
- en: '[PRE41]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Open the `organizations.component.ts` file and modify the `import` statements
    accordingly:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`organizations.component.ts`文件并相应地修改`import`语句：
- en: '[PRE42]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Inject `GithubService` into the `constructor` of the `OrganizationsComponent`
    class and set the result of its `getOrganizations` method to an observable component
    property:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`OrganizationsComponent`类的`constructor`中注入`GithubService`，并将其`getOrganizations`方法的结果设置为可观察的组件属性：
- en: '[PRE43]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Open the `organizations.component.html` file and replace its content with the
    following HTML template:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`organizations.component.html`文件，并用以下HTML模板替换其内容：
- en: '[PRE44]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: In the preceding HTML template, we place the main content of our component inside
    the `<app-panel>` component, passing an appropriate `caption` and `icon`. We display
    the `login` and `description` of each organization. Each organization is wrapped
    in an anchor element that points to the GitHub page of the organization.
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在前面的HTML模板中，我们将组件的主要内容放在`<app-panel>`组件内部，传递适当的`caption`和`icon`。我们显示每个组织的`login`和`description`。每个组织都被一个指向组织GitHub页面的锚元素包裹。
- en: 'Open the `organizations.component.scss` file and add the following CSS styles
    for the organization logos:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`organizations.component.scss`文件，为组织徽标添加以下CSS样式：
- en: '[PRE45]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Open the `app.component.html` file and add the `<app-organizations>` component
    in the second element with the `col-12 col-sm-12` class selector:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`app.component.html`文件，并在第二个元素中使用`col-12 col-sm-12`类选择器添加`<app-organizations>`组件：
- en: '[PRE46]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Run `ng` `serve` to start the application, and you should see the organization
    list under the *repositories* feature:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`ng serve`以启动应用程序，你应该能在*仓库*功能下看到组织列表：
- en: '![Figure 7.5 – Organizations](img/B18465_07_05.png)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![图7.5 – 组织](img/B18465_07_05.png)'
- en: Figure 7.5 – Organizations
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.5 – 组织
- en: 'Our application now features a complete portfolio for the profile of a GitHub
    user. It displays the following:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序现在为GitHub用户的个人资料提供了一个完整的组合。它显示以下内容：
- en: Personal information, a short biography, and social media links
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 个人信息、简短的个人简介和社交媒体链接
- en: A list of public user repositories that contains links to each one for more
    information
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含链接到每个仓库以获取更多信息的公共用户仓库列表
- en: A list of organizations where the user is a member with links to each one for
    further details
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户是成员的组织列表，每个组织都有链接以获取更多详细信息
- en: In the next section, we will learn how to integrate Angular Universal and render
    our application on the server.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习如何集成Angular Universal并在服务器上渲染我们的应用程序。
- en: Integrating Angular Universal
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集成Angular Universal
- en: Angular Universal is an Angular library that enables an Angular CLI application
    to be rendered on the server. An SSR application increases the loading speed of
    an Angular application and improves the loading of the first page.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: Angular Universal是一个Angular库，它使Angular CLI应用程序能够在服务器上渲染。SSR应用程序可以提高Angular应用程序的加载速度并改善第一页的加载。
- en: 'To install Angular Universal in an existing Angular CLI application, we will
    use the following command of the Angular CLI:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 要在现有的Angular CLI应用程序中安装Angular Universal，我们将使用以下Angular CLI命令：
- en: '[PRE47]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: The previous command uses the `ng add` command of the Angular CLI to install
    the `@nguniversal/express-engine` npm package. The `@nguniversal/express-engine`
    package is the heart of the Angular Universal library and consists of a **Node.js
    Express** web server at its core.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的命令使用了Angular CLI的`ng add`命令来安装`@nguniversal/express-engine` npm包。`@nguniversal/express-engine`包是Angular
    Universal库的核心，其核心是一个**Node.js Express**网络服务器。
- en: 'When we execute the preceding command to install Angular Universal, we are
    not only installing the library but also modifying our Angular CLI workspace with
    the following files:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们执行前面的命令来安装Angular Universal时，我们不仅安装了库，还修改了我们的Angular CLI工作区中的以下文件：
- en: '`angular.json`: This creates new entries in the `architect` section to build
    and enable our Angular Universal application. One of these entries is the `server`
    property, which is responsible for building our application with SSR. It outputs
    the generated bundle into a separate `server` folder inside the standard output
    folder of the Angular CLI application:'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`angular.json`: 这在`architect`部分创建新的条目以构建和启用我们的Angular Universal应用程序。其中之一是`server`属性，它负责使用SSR构建我们的应用程序。它将生成的包输出到Angular
    CLI应用程序标准输出文件夹内的一个单独的`server`文件夹中：'
- en: '[PRE48]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: The original application bundle is now generated into the `browser` folder inside
    the standard output folder of the Angular CLI application, as described in the
    `outputPath` property of the `build` section.
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 原始应用程序包现在已生成到Angular CLI应用程序标准输出文件夹内的`browser`文件夹中，如`build`部分的`outputPath`属性所述。
- en: Thus, an Angular Universal application generates two versions of the same Angular
    application, one for the server and another for the browser.
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 因此，Angular Universal应用程序生成相同Angular应用程序的两个版本，一个用于服务器，另一个用于浏览器。
- en: '`package.json`: This adds all the necessary npm dependencies and creates a
    handful set of npm `scripts` to start building with Angular Universal:'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`package.json`: 这将添加所有必要的npm依赖项，并创建一组npm `scripts`以使用Angular Universal开始构建：'
- en: '[PRE49]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Scripts that contain the `:ssr` suffix are related to building and serving the
    Angular Universal application. The `prerender` script will create a prerendered
    version of an Angular application during build time. We will learn about the `prerender`
    script in the *Prerendering content during build* section.
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 包含`:ssr`后缀的脚本与构建和提供Angular Universal应用程序相关。`prerender`脚本将在构建时创建Angular应用程序的预渲染版本。我们将在*构建期间预渲染内容*部分了解`prerender`脚本。
- en: '`server.ts`: This contains the Node.js Express application that will host the
    server-side-rendered version of our portfolio application.'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`server.ts`: 这包含将托管我们的个人项目应用程序服务器端渲染版本的Node.js Express应用程序。'
- en: '`main.server.ts`: This is the main entry point of our Angular Universal application.'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`main.server.ts`: 这是我们的Angular Universal应用程序的主要入口点。'
- en: '`app.server.module.ts`: This is the main application module of the server-side-rendered
    application.'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app.server.module.ts`: 这是服务器端渲染应用程序的主要应用程序模块。'
- en: '`tsconfig.server.json`: This is the TypeScript configuration for our Angular
    Universal application.'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tsconfig.server.json`: 这是我们的Angular Universal应用程序的TypeScript配置。'
- en: 'Global JavaScript objects such as `window` and `document` are unavailable when
    rendering an Angular application in the server because there is no browser. Angular
    provides abstraction APIs for some objects, such as the `DOCUMENT` injection token.
    If you need to enable them conditionally, you can inject the `PLATFORM_ID` token
    and use the `isPlatformServer` or `isPlatformBrowser` methods from the `@angular/common`
    npm package to check on which platform your application is currently running:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务器上渲染Angular应用程序时，全局JavaScript对象如`window`和`document`不可用，因为没有浏览器。Angular为一些对象提供了抽象API，例如`DOCUMENT`注入令牌。如果您需要有条件地启用它们，可以注入`PLATFORM_ID`令牌，并使用`@angular/common`
    npm包中的`isPlatformServer`或`isPlatformBrowser`方法来检查您的应用程序当前正在哪个平台上运行：
- en: '[PRE50]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'We can now run our GitHub portfolio application on the server using the following
    `npm` command:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以使用以下`npm`命令在服务器上运行我们的GitHub个人项目应用程序：
- en: '[PRE51]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: To preview your GitHub portfolio application on the server, open your browser
    at `http://localhost:4200`.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 要在服务器上预览您的GitHub个人项目应用程序，请在浏览器中打开`http://localhost:4200`。
- en: 'You should typically see the application as it was before. So, what have we
    gained here? Angular Universal applications do not reveal their full potential
    when running on a development machine with a powerful processor and a lot of memory.
    Instead, we need to run and preview them in real-world cases like a slow network.
    We can use Google Chrome developer tools to emulate a slow network in a development
    environment:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 你通常会看到应用程序在之前的版本。那么，我们在这里得到了什么？Angular Universal应用程序在运行在具有强大处理器和大量内存的开发机器上时，并没有完全发挥其潜力。相反，我们需要在现实世界的情况中运行和预览它们，比如在慢速网络中。我们可以使用Google
    Chrome开发者工具在开发环境中模拟慢速网络：
- en: Open the Google Chrome browser.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Google Chrome浏览器。
- en: Toggle the developer tools and select the **Network** tab.
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到开发者工具并选择**网络**选项卡。
- en: Select the **Slow 3G** option from the **Throttling** dropdown.
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**限制**下拉菜单中选择**慢速3G**选项。
- en: Enter `http://localhost:4200` in the address bar of your browser.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器地址栏中输入`http://localhost:4200`。
- en: The server first loads a static version of your application to display to the
    user until the actual Angular application loads in the background. When fully
    loaded in the background, Angular Universal will switch to the complete application.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器首先加载一个静态版本的应用程序以向用户显示，直到实际的Angular应用程序在后台加载完成。当在后台完全加载后，Angular Universal将切换到完整的应用程序。
- en: In the following section, we will investigate how to improve the loading speed
    of our application even more, using prerendering.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨如何使用预渲染技术进一步提高我们应用程序的加载速度。
- en: Prerendering content during build
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建过程中的预渲染内容
- en: 'The `package.json` file of our Angular CLI workspace contains the `prerender`
    npm script, which we can use to improve the first loading of our application.
    The script runs the `prerender` command from the `architect` section of the `angular.json`
    configuration file and prerenders the content of our application during build
    time. Let’s see the effect that prerendering will have on our GitHub portfolio
    application:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 我们Angular CLI工作区的`package.json`文件包含一个`prerender` npm脚本，我们可以使用它来改善我们应用程序的首次加载。该脚本从`angular.json`配置文件的`architect`部分运行`prerender`命令，并在构建时间预渲染我们应用程序的内容。让我们看看预渲染将对我们的GitHub个人项目应用程序产生什么影响：
- en: 'Execute the following `npm` command to generate a prerendered version of the
    application:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下`npm`命令以生成应用程序的预渲染版本：
- en: '[PRE52]'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: The preceding command will output a production bundle of the application into
    the `dist\gh-portfolio\browser` folder.
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述命令将应用程序的生产版本输出到`dist\gh-portfolio\browser`文件夹。
- en: Navigate to the `dist\gh-portfolio\browser` folder and you should see two HTML
    files, the `index.html` and `index.original.html` files.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到`dist\gh-portfolio\browser`文件夹，你应该会看到两个HTML文件，即`index.html`和`index.original.html`文件。
- en: Open the `index.original.html` file and locate the `<app-root>` HTML element.
    This is the main component of our Angular application, where Angular will render
    the content of our application in the browser.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`index.original.html`文件，找到`<app-root>` HTML元素。这是我们的Angular应用程序的主要组件，Angular将在浏览器中渲染我们应用程序的内容。
- en: Open the `index.html` file now and look again at the `<app-root>` element.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在打开`index.html`文件，再次查看`<app-root>`元素。
- en: The main component is not empty this time. Angular Universal has made all HTTP
    requests to the GitHub API and prefetched the content of our application during
    runtime. All component templates and styles have been prerendered in the main
    HTML file, meaning we can view our application on a browser even without JavaScript
    enabled!
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这次主要组件不为空。Angular Universal在运行时对GitHub API进行了所有HTTP请求，并预取了应用程序的内容。所有组件模板和样式都已在主HTML文件中预渲染，这意味着我们可以在浏览器中查看我们的应用程序，即使没有启用JavaScript！
- en: 'Execute the following command to start the prerendered version of our GitHub
    portfolio application:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下命令以启动我们GitHub个人项目应用程序的预渲染版本：
- en: '[PRE53]'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: The preceding command will start a Node.js Express server that hosts our application
    at `http://localhost:4000`.
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述命令将启动一个Node.js Express服务器，该服务器托管我们的应用程序在`http://localhost:4000`。
- en: Disable JavaScript from the settings of your browser and navigate to `http://localhost:4000`.
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器设置中禁用JavaScript，并导航到`http://localhost:4000`。
- en: Our GitHub portfolio application remains fully operational without having JavaScript
    enabled. The main page of the application is also rendered instantly without having
    the user wait for the application to load.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的GitHub个人项目应用程序即使在没有启用JavaScript的情况下也能完全正常运行。应用程序的主页也会立即渲染，无需用户等待应用程序加载。
- en: 'The previous scenario is a perfect fit for users who cannot afford to enable
    JavaScript on their devices. But what happens when a user with JavaScript enabled
    uses the same prerendered version of the application? Let’s learn more about that:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的场景非常适合那些无法在设备上启用JavaScript的用户。但是，当启用JavaScript的用户使用相同的预先渲染版本的应用程序时会发生什么？让我们了解更多关于这一点：
- en: Enable JavaScript in your browser and toggle the developer tools.
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的浏览器中启用JavaScript并切换开发者工具。
- en: Navigate to `http://localhost:4000`. Nothing different seems to happen at first
    sight. Nevertheless, the application loads instantly due to the prerendered content.
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到`http://localhost:4000`。乍一看，似乎没有什么不同。然而，由于预先渲染的内容，应用程序立即加载。
- en: 'Inspect the **Network** tab, and you will notice the following:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查**网络**标签页，您将注意到以下内容：
- en: '![Figure 7.6 – Network tab (Google Chrome)](img/B18465_07_06.jpg)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
  zh: '![图7.6 – 网络标签页（Google Chrome）](img/B18465_07_06.jpg)'
- en: Figure 7.6 – Network tab (Google Chrome)
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.6 – 网络标签页（Google Chrome）
- en: Our application initiates all HTTP requests to the GitHub API as if it were
    rendered from a browser. It duplicates all HTTP requests the application needs,
    even if data has already been prerendered on the HTML page. Why is that?
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序将所有HTTP请求到GitHub API初始化，就像它是由浏览器渲染的一样。即使HTML页面已经预先渲染了数据，它也会复制应用程序需要的所有HTTP请求。为什么是这样呢？
- en: The application makes one HTTP request for the browser-rendered version and
    another for the SSR application because both versions have a different state.
    We can prevent the previous behavior by sharing the state between the server and
    the browser. More specifically, we can transfer the state of the server to the
    browser using a special-purpose Angular module of the Angular Universal library
    called `TransferHttpCacheModule`.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 该应用程序为浏览器渲染版本和SSR应用程序分别发送一个HTTP请求，因为这两个版本有不同的状态。我们可以通过在服务器和浏览器之间共享状态来防止之前的行为。更具体地说，我们可以使用Angular
    Universal库中的一个特殊用途的Angular模块`TransferHttpCacheModule`将服务器的状态传输到浏览器。
- en: If we use `TransferHttpCacheModule`, the server will cache responses from the
    GitHub API, and the browser will use the cache instead of initiating a new request.
    `TransferHttpCacheModule` solves the problem by installing an **HTTP interceptor**
    in the Angular application that ignores HTTP requests that have been handled by
    the server initially.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用`TransferHttpCacheModule`，服务器将缓存GitHub API的响应，浏览器将使用缓存而不是发起新的请求。`TransferHttpCacheModule`通过在Angular应用程序中安装一个**HTTP拦截器**来解决该问题，该拦截器忽略最初由服务器处理的HTTP请求。
- en: An HTTP interceptor is an Angular service that intercepts HTTP requests and
    responses originating from the built-in HTTP client of the Angular framework.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP拦截器是一个Angular服务，它拦截来自Angular框架内置HTTP客户端的HTTP请求和响应。
- en: 'To install `TransferHttpCacheModule` in our GitHub portfolio application, follow
    these steps:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 要在我们的GitHub个人项目应用程序中安装`TransferHttpCacheModule`，请按照以下步骤操作：
- en: 'Open the main module file of the Angular application, `app.module.ts`, and
    import `TransferHttpCacheModule` from the `@nguniversal/common` npm package:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Angular应用程序的主模块文件`app.module.ts`，并从`@nguniversal/common`npm包中导入`TransferHttpCacheModule`：
- en: '[PRE54]'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Add the `TransferHttpCacheModule` class to the `imports` array of the `@NgModule`
    decorator:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`TransferHttpCacheModule`类添加到`@NgModule`装饰器的`imports`数组中：
- en: '[PRE55]'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Execute the following command to prerender your application:'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下命令以预先渲染您的应用程序：
- en: '[PRE56]'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Run the following command to start your prerendered application:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下命令以启动您的预先渲染应用程序：
- en: '[PRE57]'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: If you preview the portfolio application and inspect the **Network** tab of
    your browser, you will notice that it does not make additional HTTP requests.
    `TransferHttpCacheModule` intercepted all HTTP requests and stored them in the
    **TransferState** store of our application. TransferState is a key-value store
    that can be transferred from the server to the browser. The browser version of
    the application can later read the HTTP responses directly from the store without
    making an extra call.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您预览个人项目应用程序并检查浏览器中的**网络**标签页，您将注意到它不会发起额外的HTTP请求。`TransferHttpCacheModule`拦截了所有HTTP请求并将它们存储在我们的应用程序的**TransferState**存储中。TransferState是一个键值存储，可以从服务器传输到浏览器。应用程序的浏览器版本可以稍后直接从存储中读取HTTP响应，而不需要额外的调用。
- en: We now have a fully prerendered version of our GitHub portfolio. But how can
    we optimize it further to share it on a social media platform? We will learn more
    about SEO optimization techniques in the following section.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在有了GitHub个人资料的完整预渲染版本。但如何进一步优化以便在社交媒体平台上分享？我们将在下一节中了解更多关于SEO优化技术的内容。
- en: Enhancing SEO capabilities
  id: totrans-250
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提升SEO能力
- en: SEO optimizes a website to be correctly indexed by a **web crawler**. A web
    crawler is special-purpose software on most search engines and can identify and
    index websites so that they are easily discoverable and linkable through their
    platforms.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: SEO通过优化网站，使其能够被**网络爬虫**正确索引。网络爬虫是大多数搜索引擎上的专用软件，可以识别和索引网站，以便通过其平台轻松发现和链接。
- en: Angular Universal does a great job of SEO by prerendering content during build
    time. Some web crawlers cannot execute JavaScript and build the dynamic content
    of an Angular application. Prerendering with Angular Universal eliminates the
    need for JavaScript, thus allowing web crawlers to do their best to identify the
    web application.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: Angular Universal通过在构建时预渲染内容，在SEO方面做得很好。一些网络爬虫无法执行JavaScript并构建Angular应用程序的动态内容。使用Angular
    Universal进行预渲染消除了对JavaScript的需求，从而允许网络爬虫尽其所能地识别网络应用程序。
- en: 'We can also help SEO by defining several tags in the `<head>` element of the
    main `index.html` file of an Angular application, such as `title`, `viewport`,
    and `charset`:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过在Angular应用程序的主要`index.html`文件的`<head>`元素中定义几个标签来帮助SEO，例如`title`、`viewport`和`charset`：
- en: '[PRE58]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: You can find a list of available tags at [https://developer.mozilla.org/docs/Web/HTML/Element/meta/name](https://developer.mozilla.org/docs/Web/HTML/Element/meta/name).
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://developer.mozilla.org/docs/Web/HTML/Element/meta/name](https://developer.mozilla.org/docs/Web/HTML/Element/meta/name)找到可用的标签列表。
- en: 'However, setting a tag in the `index.html` file is inadequate, especially when
    an Angular application has routing enabled and contains several routes. The Angular
    framework provides a couple of handy services that we can use to set tags programmatically.
    First, let’s see how to set the title tag in our application:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在`index.html`文件中设置标签是不够的，尤其是当Angular应用程序启用了路由并包含多个路由时。Angular框架提供了一些方便的服务，我们可以使用这些服务来程序化地设置标签。首先，让我们看看如何在我们的应用程序中设置标题标签：
- en: 'Open the `app.component.ts` file and add the following `import` statement:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`app.component.ts`文件并添加以下`import`语句：
- en: '[PRE59]'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Inject the `Title` service into the `constructor` of the `AppComponent` class:'
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Title`服务注入到`AppComponent`类的`constructor`中：
- en: '[PRE60]'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Call the `setTitle` method of the `titleService` variable in the `ngOnInit`
    method:'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`ngOnInit`方法中调用`titleService`变量的`setTitle`方法：
- en: '[PRE61]'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Run `npm run dev:ssr` to preview the application, and you should see the title
    in the browser tab:'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`npm run dev:ssr`以预览应用程序，您应该在浏览器标签中看到标题：
- en: '![Figure 7.7 – Browser tab title](img/B18465_07_07.png)'
  id: totrans-264
  prefs: []
  type: TYPE_IMG
  zh: '![图7.7 – 浏览器标签页标题](img/B18465_07_07.png)'
- en: Figure 7.7 – Browser tab title
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.7 – 浏览器标签页标题
- en: 'Similar to the `Title` service, we can use the `Meta` service to set meta tags
    for our application:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 与`Title`服务类似，我们可以使用`Meta`服务为我们的应用程序设置元标签：
- en: 'Open the `app.component.ts` file and import `Meta` from the `@angular/platform-browser`
    npm package:'
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`app.component.ts`文件并从`@angular/platform-browser` npm包中导入`Meta`：
- en: '[PRE62]'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Inject the `Meta` service into the `constructor` of the `AppComponent` class:'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Meta`服务注入到`AppComponent`类的`constructor`中：
- en: '[PRE63]'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Use the `addTags` method of the `meta` variable to add some meta tags to the
    `ngOnInit` method:'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`meta`变量的`addTags`方法在`ngOnInit`方法中添加一些元标签：
- en: '[PRE64]'
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: In the preceding code, we added two meta tags. The first one sets the `description`
    that contains the username of the current GitHub profile. The second one sets
    the `author` tag to be the same as the username of the GitHub profile.
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们添加了两个元标签。第一个设置了包含当前GitHub个人资料用户名的`description`。第二个将`author`标签设置为与GitHub个人资料的用户名相同。
- en: Run `npm run dev:ssr` to start the application and navigate to `http://localhost:4200`.
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`npm run dev:ssr`以启动应用程序并导航到`http://localhost:4200`。
- en: 'Use your browser to inspect the page, and you should see the following meta
    tags in the **<head>** element of the page:'
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您的浏览器检查页面，您应该在页面的**<head>**元素中看到以下元标签：
- en: '![Figure 7.8 – Application head element](img/B18465_07_08.png)'
  id: totrans-276
  prefs: []
  type: TYPE_IMG
  zh: '![图7.8 – 应用程序头部元素](img/B18465_07_08.png)'
- en: Figure 7.8 – Application head element
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.8 – 应用程序头部元素
- en: Each popular social platform, such as Twitter, Facebook, and LinkedIn, requires
    its own meta tags so that the URL of an SSR application can be correctly displayed
    on their platforms.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 每个流行的社交平台，如 Twitter、Facebook 和 LinkedIn，都需要其自己的元标签，以便 SSR 应用的 URL 可以在其平台上正确显示。
- en: Summary
  id: totrans-279
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: In this project, we built a portfolio application for our GitHub profile. Initially,
    we learned how to interact with the GitHub API in a new Angular application. We
    also used Bootstrap CSS and Bootstrap Icons to provide a beautiful user interface
    for our portfolio application.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们为我们的 GitHub 个人资料构建了一个投资组合应用程序。最初，我们学习了如何在新的 Angular 应用程序中与 GitHub API
    交互。我们还使用了 Bootstrap CSS 和 Bootstrap 图标为我们的投资组合应用程序提供美观的用户界面。
- en: We then saw how to convert our Angular application into an SSR application using
    Angular Universal. We learned how to benefit from prerendering content when users
    have low-end and slow-performing devices and some of the potential pitfalls of
    this technique.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到了如何使用 Angular Universal 将我们的 Angular 应用程序转换为 SSR 应用程序。我们学习了当用户拥有低端和性能较慢的设备时，如何从预渲染内容中受益，以及这种技术的潜在陷阱。
- en: We used some of the available SEO techniques that the Angular framework offers
    to improve the discoverability of our application.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了 Angular 框架提供的某些可用的 SEO 技术来提高我们应用程序的可发现性。
- en: In the next chapter, we will learn about the monorepo architecture and how we
    can manage the state of an Angular application.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习关于 monorepo 架构以及我们如何管理 Angular 应用的状态。
- en: Practice questions
  id: totrans-284
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习题
- en: 'Let’s take a look at a few practice questions:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一些练习题：
- en: How do we subscribe to an observable in the template of a component?
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何在组件的模板中订阅一个可观察对象？
- en: What command do we use to install Angular Universal?
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用什么命令来安装 Angular Universal？
- en: How can we differentiate programmatically between browser and server platforms?
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何通过编程区分浏览器和服务器平台？
- en: What command generates a prerendered version of an SSR application?
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么命令可以生成一个 SSR 应用的预渲染版本？
- en: What Angular module do we use to transfer the state from the server to the browser?
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用哪个 Angular 模块将状态从服务器传输到浏览器？
- en: What Angular service do we use to set the title of an Angular application?
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在 Angular 应用中设置标题时使用哪个 Angular 服务？
- en: What Angular service do we use to set meta tags in an Angular application?
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在 Angular 应用中设置元标签时使用哪个 Angular 服务？
- en: Further reading
  id: totrans-293
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Here are some links to build upon what we learned in the chapter:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些链接，可以帮助我们巩固本章所学的内容：
- en: 'Angular Univeral guide: [https://angular.io/guide/universal](https://angular.io/guide/universal)'
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular Universal 指南：[https://angular.io/guide/universal](https://angular.io/guide/universal)
- en: 'GitHub REST API: [https://docs.github.com/rest](https://docs.github.com/rest)'
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitHub REST API：[https://docs.github.com/rest](https://docs.github.com/rest)
- en: 'Bootstrap CSS: [https://getbootstrap.com](https://getbootstrap.com)'
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bootstrap CSS：[https://getbootstrap.com](https://getbootstrap.com)
- en: 'Bootstrap Icons: [https://icons.getbootstrap.com](https://icons.getbootstrap.com)'
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bootstrap 图标：[https://icons.getbootstrap.com](https://icons.getbootstrap.com)
- en: 'Angular HTTP guide: [https://angular.io/guide/http](https://angular.io/guide/http)'
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular HTTP 指南：[https://angular.io/guide/http](https://angular.io/guide/http)
- en: '`TransferHttpCacheModule`: [https://github.com/angular/universal/blob/master/docs/transfer-http.md](https://github.com/angular/universal/blob/master/docs/transfer-http.md)'
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TransferHttpCacheModule`：[https://github.com/angular/universal/blob/master/docs/transfer-http.md](https://github.com/angular/universal/blob/master/docs/transfer-http.md)'
