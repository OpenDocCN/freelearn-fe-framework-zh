["```js\n// principles/store.js\n\nclass Store {\n  getState() {\n    return {\n      jedis: [\n        { name: \"Yoda\", id: 1 },\n        { name: \"Palpatine\", id: 2 },\n        { name: \"Darth Vader\", id: 3 }\n      ],\n      selectedJedi: {\n        name: \"Yoda\",\n        id: 1\n      }\n    };\n  }\n}\n\nconst store = new Store();\nconsole.log(store.getState());\n\n/*\n{\n  jedis: [\n    { name: 'Yoda', id: 1 },\n    { name: 'Palpatine', id: 2 },\n    { name: 'Darth Vader', id: 3 }\n  ],\n  selectedJedi: {\n    name: 'Yoda', id: 1\n  }\n}\n*/\n```", "```js\n// principles/action.js\n\n// the action\nlet action = {\n  // expresses intent, loading jedis\n  type: \"LOAD_JEDIS\", \n  payload:[\n    { name: \"Yoda\", id: 1 },\n    { name: \"Palpatine\", id: 2 }, \n    { name: \"Darth Vader\", id: 3 }\n  ]\n};\n```", "```js\n// principles/storeII.js\n\nclass Store {\n  constructor() {\n    this.state = {\n      jedis: [],\n      selectedJedi: null\n    }\n  }\n\n  getState() {\n    return this.state;\n  }\n}\n\nconst store = new Store();\n\nconsole.log(store.getState());\n// state should now be\n/*\n{\n  jedis : [],\n  selectedJedi: null\n}\n*/\n```", "```js\n// principles/storeII-with-dispatch.js\n\nclass Store {\n  constructor() {\n    this.state = {\n      jedis: [],\n      selectedJedi: null\n    }\n  }\n\n  getState() {\n    return this.state;\n  }\n\n  dispatch(action) {\n // to be implemented in later sections\n }\n}\n\n// the action\nlet action = {\n  type: 'LOAD_JEDIS',\n  payload:[\n    { name: 'Yoda', id: 1 },\n    { name: 'Palpatine', id: 2 }, \n    { name: 'Darth Vader', id: 3 }\n  ]\n}\n\n// dispatching the action, producing a new state\nstore.dispatch(action);\n\nconsole.log(store.getState());\n// state should now be\n/*\n{\n  jedis : [\n { name: 'Yoda', id: 1 },\n { name: 'Palpatine', id: 2 }, \n { name: 'Darth Vader', id: 3 }\n ],\n  selectedJedi: null\n}\n*/\n```", "```js\n// principles/first-reducer.js\n\nmodule.exports = function reducer(state = {}, action) {\n  switch(action.type) {\n    case \"SELECT_JEDI\":\n      return Object.assign({}, action.payload);\n    default:\n      return state;\n  }\n}\n```", "```js\nconst reducer = require(\"./first-reducer\");\n\nlet initialState = {};\nlet action = { type: \"SELECT_JEDI\", payload: { id: 1, name: \"Jedi\" } };\nlet state = reducer(initialState, action);\nconsole.log(state);\n\n/* this produces the following:\n{ id: 1, name: 'Yoda' }\n*/\n```", "```js\nold state + action = new state\n```", "```js\n// sum is 0\nlet sum = 0;\n\n// sum is now 3\nsum +=3;\n```", "```js\nlet sum = 0;\nlet sumWith3 = sum + 3;\nlet sumWith6 = sumWith3 + 3; \n```", "```js\n// core-concepts/list.js\n\n// old way\nlet list = [1, 2, 3];\nlist.push(4);\n\n// redux way\nlet immutablelist = [1, 2, 3];\nlet newList = [...immutablelist, 4];\n\nconsole.log(\"new list\", newList);\n/*\n  [1, 2, 3, 4]\n*/\n\n```", "```js\n// core-concepts/list-remove.js\n\n// old way\nlet list = [1, 2, 3];\nlet index = list.indexOf(1);\nlist.splice(index, 1);\n\n// redux way\nlet immutableList = [1, 2, 3];\nlet newList = immutableList.filter(item => item !== 1);\n\n```", "```js\n// core-concepts/object.js\n\n// the old way\nlet anakin = { name: \"anakin\" };\nanakin.name = \"darth\";\nconsole.log(anakin);\n\n// the Redux way\nlet anakinRedux = { name: \"anakin\" };\nlet darth = Object.assign({}, anakinRedux, { name: \"darth\" });\n\nconsole.log(anakinRedux);\nconsole.log(darth);\n```", "```js\n// core-concepts/object-add.js\n\n// the old way\nlet anakin = { name: \"anakin\" };\nconsole.log(\"anakin\", anakin);\n\nanakin[\"age\"] = \"17\";\nconsole.log(\"anakin with age\", anakin);\n\n// the Redux way\nlet anakinImmutable = { name: \"anakin\" };\nlet anakinImmutableWithAge = Object.assign({}, anakinImmutable, { age: 17 });\n\nconsole.log(\"anakin redux\", anakinImmutable);\nconsole.log(\"anakin redux with age\", anakinImmutableWithAge);\n```", "```js\n// core-concepts/jedilist-reducer.js\n\nlet actionLuke = { type: \"ADD_ITEM\", payload: { name: \"Luke\" } };\nlet actionVader = { type: \"ADD_ITEM\", payload: \"Vader\" }; \n\nfunction jediListReducer(state = [], action) {\n  switch(action.type) {\n    case \"ADD_ITEM\": \n      return [... state, action.payload];\n    default: \n      return state;\n  }\n}\n\nlet state = jediListReducer([], actionLuke);\nconsole.log(state);\n/*\n[{ name: 'Luke '}]\n*/\n\nstate = jediListReducer(state, actionVader);\nconsole.log(state);\n/*\n[{ name: 'Luke' }, { name: 'Vader' }] \n*/\n\nmodule.exports = jediListReducer;\n```", "```js\n// core-concepts/selectjedi-reducer.js\n\nlet actionPerson = { type: \"SELECT_JEDI\", payload: { id: 1, name: \"Luke\" } };\nlet actionVader = { type: \"SELECT_JEDI\", payload: { id: 2, name: \"Vader\" } };\n\nfunction selectJediReducer({}, action) {\n  switch (action.type) {\n    case \"SELECT_JEDI\":\n      return Object.assign({}, action.payload);\n    default:\n      return state;\n  }\n}\n\nstate = selectJediReducer({}, actionPerson);\nconsole.log(state);\n/*\n{ name: 'Luke' }\n*/\n\nstate = selectJediReducer(state, actionVader);\nconsole.log(state);\n/*\n{ name: 'Vader' }\n*/\n\nmodule.exports = selectJediReducer;\n```", "```js\n// core-concepts/merged-reducers.js\n\nfunction store(state = { jedis: [], selectedJedi: null }, action) {\n  return {\n    jedis: jediListReducer(state.jedis, action),\n    selectedJedi: selectJediReducer(state.selectedJedi, action)\n  };\n}\n\nlet newJediActionYoda = { type: \"ADD_ITEM\", payload: { name: \"Yoda\"} };\nlet newJediActionVader = { type: \"ADD_ITEM\", payload: { name: \"Vader\"} };\nlet newJediSelection = { type: \"SELECT_JEDI\", payload: { name: \"Yoda\"} };\n\nlet initialState = { jedis: [], selectedJedi: {} };\n\nlet state = store(initialState, newJediActionYoda);\nconsole.log(\"Merged reducers\", state);\n/*\n  { \n    jedis: [{ name: 'Yoda' }], \n    selectedJedi: {} \n  }\n*/\n\nstate = store(state, newJediActionVader);\nconsole.log(\"Merged reducers\", state);\n/*\n { \n   jedis: [{ name 'Yoda' }, {name: 'Vader'}], \n   selectedJedi: {} \n }\n*/\n\nstate = store(state, newJediSelection);\nconsole.log(\"Merged reducers\", state);\n\nconsole.log(state);\n/*\n{\n  jedis: [{ name: 'Yoda' }, { name: 'Vader'}],\n  selectedJedi: { name: 'Yoda' }\n}\n*/\n```", "```js\n// dataflow/actions.js\n\nexport function createItem(title){\n  return { type: \"CREATE_ITEM\", payload: { title: title } };\n}\n```", "```js\n// dataflow/create-view.js\n\nimport { createItem } from \"./actions\";\nimport { dispatch, select } from \"./redux\";\n\nconsole.log(\"create item view has loaded\");\n\nclass CreateItemView {\n  saveItem() {\n    const elem = document.getElementById(\"input\");\n    dispatch(createItem(elem.value));\n    const items = select(\"items\");\n    console.log(items);\n  }\n}\n\nconst button = document.getElementById(\"saveButton\");\nconst createItemWiew = new CreateItemView();\n\nbutton.addEventListener(\"click\", createItemWiew.saveItem);\n\nexport default createItemWiew;\n```", "```js\ndispatch(createItem(elem.value));\n```", "```js\n// dataflow/redux.js\n\nexport function dispatch(action) {\n  // implement this\n}\n```", "```js\n// dataflow/redux-stepI.js\n\n// 1)\nfunction itemsReducer(state = [], action) {\n switch(action.type) {\n case \"CREATE_ITEM\":\n return [...state, Object.assign(action.payload) ];\n default: \n return state;\n } \n}\n\n// 2)\nlet state = {\n items: []\n};\n\n// 3\nfunction store(state = { items: [] }, action) {\n return {\n items: itemsReducer(state.items, action)\n };\n}\n\n// 4)\nexport function getState() {\n return state;\n}\n\n// 5)\nexport function dispatch(action) {\n  state = store(state, action);\n}\n```", "```js\n// dataflow/redux-demo.js\n\nimport { dispatch, getState, select, subscribe } from \"./redux\";\n\nconst { addItem } = require(\"./actions\");\nsubscribe(() => {\nconsole.log(\"store changed\");\n});\nconsole.log(\"initial state\", getState());\ndispatch(addItem(\"A book\"));\ndispatch(addItem(\"A second book\"));\nconsole.log(\"after dispatch\", getState());\nconsole.log(\"items\", select(\"items\"));\n\n/* \nthis will print the following\n\nstate before: { items: [] }\nstate after: { items: [{ title: 'a new book'}] }\n*/\n\n```", "```js\n// dataflow/reducer.js\n\nfunction itemsReducer(state = [], action) {\n  switch(action.type) {\n    case \"CREATE_ITEM\":\n      return [...state, Object.assign(action.payload) ];\n    default: \n      return state;\n  }    \n}\n```", "```js\n// dataflow/redux-stepII.js\n // this now refers to the reducers.js file we broke out\nimport { itemsReducer } from \"./reducers\";\n\nlet state = {\n  items: []\n};\n\nfunction store(state = { items: [] }, action) {\n  return {\n   items: itemsReducer(state.items, action)\n  };\n}\n\nexport function getState() {\n  return state;\n}\n\nexport function dispatch(action) {\n  state = store(state, action);\n}\n\nexport function select(slice) {\n  return state[slice];\n}\n```", "```js\n// dataflow/list-view.js\n\nimport { createItem } from \"./actions\";\nimport { select, subscribe } from \"./redux\";\n\nconsole.log(\"list item view has loaded\");\n\nclass ListItemsView {\n  constructor() {\n    this.render();\n    subscribe(this.render);\n  }\n\n  render() {\n    const items = select(\"items\");\n    const elem = document.getElementById(\"list\");\n\n    elem.innerHTML = \"\";\n    items.forEach(item => {\n      const li = document.createElement(\"li\");\n      li.innerHTML = item.title;\n      elem.appendChild(li);\n    });\n  }\n}\n\nconst listItemsView = new ListItemsView();\nexport default listItemsView;\n```", "```js\n// dataflow/redux.js\n\nimport { itemsReducer } from \"./reducer\";\nimport EventEmitter from \"events\";\nconst emitter = new EventEmitter();\n\nlet state = {\n  items: []\n};\n\nfunction store(state = { items: [] }, action) {\n  return {\n    items: itemsReducer(state.items, action)\n  };\n}\n\nexport function getState() {\n  return state;\n}\n\nexport function dispatch(action) {\n  const oldState = state;\n  state = store(state, action);\n  emitter.emit(\"changed\");\n}\n\nexport function select(slice) {\n  return state[slice];\n}\n\nexport function subscribe(cb) {\n  emitter.on(\"changed\", cb);\n}\n```", "```js\nnpm install webpack webpack-cli --save-dev\n```", "```js\n// dataflow/webpack.config.js\n\nmodule.exports = {\n  entry: \"./todo-app.js\",\n  output: {\n    filename: \"bundle.js\"\n  },\n  watch: true\n};\n```", "```js\n// dataflow/package.json excerpt\n\n\"scripts\": {\n  \"start\" : \"webpack -d\"\n}\n```", "```js\n// dataflow/dist/index.html\n\n<html>\n  <body>\n    <div>\n      <input type=\"text\" id=\"input\">\n      <button id=\"saveButton\">Save</button>\n    </div>\n    <div>\n      <ul id=\"list\"></ul>\n    </div>\n    <button id=\"saveButton\">Save</button>\n    <script src=\"img/bundle.js\"></script>\n  </body>\n</html>\n\n```", "```js\n// dataflow/todo-app.js\n\n// import create view\nimport createView from \"./create-view\";\n// import list view\nimport listView from \"./list-view\";\n```", "```js\n// dataflow/list-view.js\n\nimport { createItem } from \"./actions\";\nimport { select, subscribe } from \"./redux\";\n\nconsole.log(\"list item view has loaded\");\n\nclass ListItemsView {\n  constructor() {\n    this.render();\n    subscribe(this.render);\n  }\n\n  render() {\n    const items = select(\"items\");\n    const elem = document.getElementById(\"list\");\n    elem.innerHTML = \"\";\n    console.log(\"items\", items);\n\n    items.forEach(item => {\n      const li = document.createElement(\"li\");\n      li.innerHTML = item.title;\n      elem.appendChild(li);\n    });\n  }\n}\n\nconst listItemsView = new ListItemsView();\nexport default listItemsView;\n```", "```js\n// async/book-reducer.js\n\nlet initialState = {\n  loading: false,\n  data: void 0,\n  error: void 0\n};\n\nconst bookReducer = (state = initialState, action) => {\n  switch(action.type) {\n    case 'FETCH_BOOK_LOADING':\n      return {...state, loading: true };\n    case 'FETCH_BOOK_SUCCESS':\n      return {...state, data: action.payload.map(book => ({ ... book })) };\n    case 'FETCH_BOOK_ERROR': \n      return {...state, error: { ...action.payload }, loading: false }; \n  }\n}\n\nmodule.exports = bookReducer;\n```", "```js\n// async/book-actions.js\n\nconst fetchBookLoading = () => ({ type: 'FETCH_BOOK_LOADING' });\nconst fetchBookSuccess = (data) => ({ type: 'FETCH_BOOK_SUCCESS', payload: data });\nconst fetchBookError = (error) => ({ type: 'FETCH_BOOK_ERROR', payload: error });\n\nmodule.exports = {\n  fetchBookLoading,\n  fetchBookSuccess,\n  fetchBookError\n};\n```", "```js\n// async/redux.js\n\nconst bookReducer = require('./book-reducer');\nconst EventEmitter = require('events');\nconst emitter = new EventEmitter();\n\nlet state = {\n  book: {}\n};\n\nfunction store(state = {}, action) {\n  return {\n    book: bookReducer(state.book, action)\n  };\n}\n\nfunction getState() {\n  return state;\n}\n\nfunction dispatch(action) {\n  const oldState = state;\n  state = store(state, action);\n  emitter.emit('changed');\n}\n\nfunction select(slice) {\n  return state[slice];\n}\n\nfunction subscribe(cb) {\n  emitter.on('changed', cb);\n}\n\nmodule.exports = {\n  getState, dispatch, select, subscribe\n}\n```", "```js\nconst { fetchBookLoading, fetchBookSuccess, fetchBookError } = require('./book-actions');\nconst { dispatch, getState } = require('./redux');\n\nfunction fetchBook() {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve({ title: 'A new hope  - the book' });\n    }, 1000);\n  })\n}\n```", "```js\nconsole.log(getState());\n// { book: {} }\n\ndispatch(fetchBookLoading());\n\nconsole.log(getState());\n// { book: { loading: true } }\n```", "```js\nasync function main() {\ntry {\n  const book = await fetchBook();\n  dispatch(fetchBookSuccess(book));\n  console.log(getState());\n\n  // { book: { data: { title: 'A new hope - the book'}, loading: false } }\n} catch(err) {\n  dispatch(fetchBookError(err));\n  console.log(getState());\n\n  // { book: { data: undefined, error: { title: 'some error message' } } }\n  }\n}\n\nmain();\n```", "```js\n// async/demo.js\n\nconst { fetchBookLoading, fetchBookSuccess, fetchBookError } = require('./book-actions');\nconst { dispatch, getState } = require('./redux');\n\nfunction fetchBook() {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve({ title: 'A new hope - the book' });\n    }, 1000);\n  })\n}\n\nconsole.log(getState());\ndispatch(fetchBookLoading());\nconsole.log(getState());\n\nasync function main() {\n  try {\n    const book = await fetchBook();\n    dispatch(fetchBookSuccess(book));\n    console.log(getState());\n  } catch(err) {\n    dispatch(fetchBookError(err));\n    console.log(getState());\n  }\n}\n\nmain();\n```", "```js\nconst booksReducer = require(\"./books/reducer\");\nconst personReducer = require(\"./reducer\");\n\nfunction combineReducers(config) {\n  const states = Object.keys(config);\n  let stateObject = {};\n\n  states.forEach(state => {\n    stateObject[state] = config[state];\n  });\n\n  return stateObject;\n}\n\nconst rootReducer = combineReducers({\n  books: booksReducer,\n  person: personReducer\n});\n\nconst store = createStore(rootReducer);\n\nstore.reduce({ type: \"SOME_ACTION\", payload: \"some data\" });\n```", "```js\nconst rootReducer = combineReducers({\n  books: booksReducer,\n  person: personReducer\n});\n\nconst store = createStore(rootReducer);\n```", "```js\nconst store = createStore(getRootReducer());\n```", "```js\n// best-practices/root-reducer.js\n\nfunction combineReducers(config) {\n  const states = Object.keys(config);\n  let stateObject = {};\n\n  states.forEach(state => {\n    stateObject[state] = config[state];\n  });\n\n  return stateObject;\n}\n\nlet rootReducer = {};\n\nfunction registerReducer(reducer) {\n  const entry = combineReducers(reducer);\n  rootReducer = { ...rootReducer, ...entry };\n}\n\nfunction getRootReducer() {\n  return rootReducer;\n}\n\nmodule.exports = {\n  registerReducer,\n  getRootReducer\n};\n```", "```js\n// best-practies/books/reducer.js\n\nconst { registerReducer } = require('../root-reducer');\n\nlet initialState = [];\n\nfunction bookReducer(state = initialState, action) {\n  switch(action.type) {\n    case 'LIST_BOOKS':\n      return state;\n    case 'ADD_BOOK':\n      return [...state, {...action.payload}];\n  }\n}\n\nregisterReducer({ books: bookReducer });\n```"]