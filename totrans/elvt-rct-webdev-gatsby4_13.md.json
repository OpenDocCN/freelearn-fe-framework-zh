["```js\n    exports.onPreInit = () => console.log(\"Plugin\n    Started!\")\n    ```", "```js\n    GITHUB_PROFILE_BEARER_TOKEN=your-token-here\n    ```", "```js\n    npm i dotenv\n    ```", "```js\n    npm init -y\n    ```", "```js\n    npm i node-fetch@2.6.5\n    ```", "```js\n    const fetch = require(\"node-fetch\");\n    const crypto = require(\"crypto\");\n    /* \n      Code added here in the next step\n    */\n    ```", "```js\n    exports.sourceNodes = async ({ actions },\n     configOptions) => {\n      const { createNode } = actions;\n      /* \n        Code added here in the next step\n      */\n    };\n    ```", "```js\n      const headers = {\n        Authorization: 'bearer ${configOptions.token}',\n      };\n      const body = {\n        query: 'query {\n                  user(login: \"${configOptions.username}\") {\n                    contributionsCollection {\n                      contributionCalendar {\n                          totalContributions\n                      }\n                    }\n                  }\n                }',\n      };\n      const response = await\n      fetch(\"https://api.github.com/graphql\", {\n        method: \"POST\",\n        body: JSON.stringify(body),\n        headers: headers,\n      });\n      const data = await response.json();\n      /* \n        Code added here in the next step\n      */\n    ```", "```js\n    const { contributionsCollection } = data.data.user;\n      const totalContributions =\n        contributionsCollection.contributionCalendar.totalCont\n     ributions;\n      createNode({\n        totalContributions: Number(totalContributions),\n        id: \"Github-Contributions\",\n        internal: {\n          type: 'GitHubContributions',\n          contentDigest: crypto\n            .createHash('md5')\n            .update(\n              JSON.stringify({\n                totalContributions,\n              })\n            )\n            .digest('hex'),\n          description: 'Github Contributions Information',\n        },\n      });\n    ```", "```js\n    require(\"dotenv\").config({\n      path: '.env',\n    });\n    module.exports = {\n      // rest of config\n      plugins: [\n       {\n          resolve: 'gatsby-source-github-profile',\n          options: {\n            token:\n             process.env.GITHUB_PROFILE_BEARER_TOKEN,\n             username: \"your-github-username-here\",\n          },\n        },\n       // other plugins\n      ]\n    }\n    ```", "```js\n    query Contributions {\n      gitHubContributions {\n        totalContributions\n      }\n    }\n    ```", "```js\n    export default function About({ data }) {\n      const {\n        markdownRemark: { html },\n        data prop and render it to the screen, as shown in the highlighted section of code.\n    ```", "```js\n    npm init -y\n    ```", "```js\n    import React from \"react\";\n    const Sample = () => {\n      return (\n        <div>\n          <h1>Sample page</h1>\n        </div>\n      );\n    };\n    export default Sample;\n    ```", "```js\n    module.exports = {\n      // rest of config\n      plugins: [\n        'gatsby-theme-sample-page',\n       // other plugins\n      ]\n    }\n    ```", "```js\n    {\n        \"title\": \"Elevating Your Hack\",\n        \"description\": \"Tips & tricks to make your hack\n          stand out from the crowd.\",\n        \"location\": \"King's College\",\n        \"date\": \"2021-12-25\"\n      }\n    ```", "```js\n    npm init -y\n    ```", "```js\n    npm i gatsby-transformer-json\n    ```", "```js\n    module.exports = {\n      plugins: [\n        'gatsby-transformer-json',\n        {\n          resolve: 'gatsby-source-filesystem',\n          options: {\n            path: './events',\n          },\n        },\n      ],\n    };\n    ```", "```js\n    const { createFilePath } = require('gatsby-source-\n      filesystem');\n    exports.onCreateNode = ({ node, getNode, actions }) => {\n      const { createNodeField } = actions;\n      if (node.internal.type === 'EventsJson') {\n        const slug = createFilePath({ node, getNode });\n        createNodeField({\n          node,\n          name: 'slug',\n          value: slug,\n        });\n      }\n    };\n    ```", "```js\n    exports.createPages = async ({ actions, graphql,\n     reporter }) => {\n      const { createPage } = actions;\n      const EventTemplate =\n        require.resolve('./src/templates/event');\n      const EventsQuery = await graphql('\n      {\n        allEventsJson {\n          nodes {\n            fields {\n              slug\n            }\n          }\n        }\n      }\n      ');\n      if (EventsQuery.errors) {\n        reporter.panicOnBuild('Error while running GraphQL\n          query.');\n        return;\n      }\n      const events = EventsQuery.data.allEventsJson.nodes;\n      events.forEach(({ fields: { slug } }) => {\n        createPage({\n          path: 'event${slug}',\n          component: EventTemplate,\n          context: {\n            slug: slug,\n          },\n        });\n      });\n    };\n    ```", "```js\n    import React from \"react\";\n    import { graphql } from \"gatsby\";\n    export default function Event({ data }){\n      const {\n        event: { description, title, location, date },\n      } = data;\n      return (\n        <div className=\"prose max-w-5xl\">\n          <h1>{title}</h1>\n          <p>\n            {date} - {location}\n          </p>\n          <p>{description}</p>\n        </div>\n      );\n    }\n    ```", "```js\n    export const pageQuery = graphql'\n      query($slug: String!) {\n        event: eventsJson(fields: { slug: { eq: $slug } }) {\n          description\n          title\n          location\n          date(formatString: \"dddd Do MMMM yyyy\")\n        }\n      }\n    ';\n    ```", "```js\n    import React from \"react\";\n    import { graphql, Link } from \"gatsby\";\n    const Events = ({ data }) => {\n      const events = data.allEventsJson.nodes;\n      return (\n        <div className=\"prose max-w-5xl\">\n          <h1>Upcoming Events:</h1>\n          {events.map(({ title, location, date, fields: {\n           slug } }) => (\n            <Link to={'/event${slug}'}>\n              <h2>{title}</h2>\n              <p>\n                {date} - {location}\n              </p>\n            </Link>\n          ))}\n        </div>\n      );\n    };\n    export default Events\n    ```", "```js\n    export const query = graphql'\n      {\n        allEventsJson {\n          nodes {\n            location\n            title\n            date\n            fields {\n              slug\n            }\n          }\n        }\n      }\n    ';\n    ```", "```js\n    npm login\n    ```", "```js\n    package.json file and retry.Quick TipAfter your first publish, you will most likely find things you want to change. If you follow these instructions again, be sure to bump the version number in your `package.json` file as npm will reject a publish with the same version number. \n    ```"]