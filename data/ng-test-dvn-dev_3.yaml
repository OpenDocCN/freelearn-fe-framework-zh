- en: Chapter 3. The Karma Way
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。Karma的方式
- en: JavaScript testing has hit the mainstream, thanks to Karma. Karma makes it seamless
    to test JavaScript. Angular was created around testing.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Karma，JavaScript测试已经成为主流。Karma使JavaScript测试变得无缝。Angular是围绕测试创建的。
- en: 'In this chapter, we will learn a few things about Karma, including the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习关于Karma的一些东西，包括以下内容：
- en: The origin of Karma
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Karma的起源
- en: Why and how Karma will work with an Angular project
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么以及如何Karma将与Angular项目一起工作
- en: The Karma configuration and implementation with an Angular project
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Angular项目中的Karma配置和实现
- en: An overview of **Travis CI**
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Travis CI概述
- en: The birth of Karma
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Karma的诞生
- en: When picking up a new tool, it is important to understand where it comes from
    and why it is built. This section will give us a background of the origin of Karma.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用新工具时，了解其来源和构建原因非常重要。本节将为我们提供Karma起源的背景。
- en: The Karma difference
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Karma的区别
- en: Karma was created by Vojta Jína. The project was originally called **Testacular**.
    In Vojtech Jína's thesis, he discusses the design, purpose, and implementation
    of Karma.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Karma是由Vojta Jína创建的。该项目最初被称为Testacular。在Vojtech Jína的论文中，他讨论了Karma的设计、目的和实现。
- en: 'In his thesis (*JavasScript Test Runner*, [https://github.com/karma-runner/karma/raw/master/thesis.pdf](https://github.com/karma-runner/karma/raw/master/thesis.pdf)),
    he describes Karma as follows:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在他的论文（JavasScript Test Runner，[https://github.com/karma-runner/karma/raw/master/thesis.pdf](https://github.com/karma-runner/karma/raw/master/thesis.pdf)）中，他描述了Karma如下：
- en: '*"...a test runner that helps web application developers to be more productive
    and effective by making automated testing simpler and faster. In fact, I have
    a much higher ambition and this thesis is only a part of it - I want to promote
    Test Driven Development (TDD) as "the" way to develop web applications, because
    I believe it is the most effective way to develop high quality software."*'
  id: totrans-12
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “……一个测试运行器，可以帮助Web应用程序开发人员通过使自动化测试更简单和更快速来提高生产力和效率。事实上，我有更高的抱负，这篇论文只是其中的一部分
    - 我想推广测试驱动开发（TDD）作为开发Web应用程序的“方式”，因为我相信这是开发高质量软件的最有效方式。”
- en: Karma has the ability to easily and automatically run JavaScript unit tests
    on real browsers. Traditionally, tests were run by launching a browser manually
    and checking for results by continually clicking on the refresh button. This method
    was awkward and often resulted in developers limiting the number of tests that
    were written.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Karma具有在真实浏览器上轻松自动运行JavaScript单元测试的能力。传统上，测试是通过手动启动浏览器并不断点击刷新按钮来进行的。这种方法很笨拙，通常会导致开发人员限制编写的测试数量。
- en: With Karma, a developer can write a test in almost any standard test framework,
    choose a browser to run against, set the files to watch for changes, and bam!
    We have continuous automated testing. We have to simply check the output window
    for failed or passed tests.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Karma，开发人员几乎可以在任何标准测试框架中编写测试，选择要运行的浏览器，设置要监视更改的文件，然后就可以进行持续的自动化测试了。我们只需简单地检查输出窗口以查看测试是失败还是通过。
- en: The importance of combining Karma and Angular
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结合Karma和Angular的重要性
- en: Karma was built for AngularJS. Before Karma, there was a lack of automated testing
    tools for web-based JavaScript developers.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Karma是为AngularJS构建的。在Karma之前，缺乏面向Web的JavaScript开发人员的自动化测试工具。
- en: Remember that Karma is a test runner, not a test framework. Its job is to run
    tests and report which tests will pass or fail. Why is this helpful? A test framework
    is where you will write your tests. Apart from doing this, you will need to be
    focused on running the tests easily and seeing the results. Karma easily runs
    tests across several different browsers. It also has some other features, such
    as file watching, which will be discussed in detail later in the book.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，Karma是一个测试运行器，而不是一个测试框架。它的工作是运行测试并报告哪些测试将通过或失败。为什么这有帮助呢？测试框架是你将编写测试的地方。除了这样做，你还需要专注于轻松运行测试并查看结果。Karma可以轻松地在多个不同的浏览器上运行测试。它还具有一些其他功能，比如文件监视，这将在本书的后面详细讨论。
- en: Installing Karma
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Karma
- en: It's time to start using Karma. Installations and applications are constantly
    changing. The following guide is intended to be brief; you can go to the Karma
    website at [http://karma-runner.github.io/](http://karma-runner.github.io/) and
    find the latest instructions there.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候开始使用Karma了。安装和应用程序不断变化。以下指南旨在简要介绍；你可以去Karma网站[http://karma-runner.github.io/](http://karma-runner.github.io/)查找最新的说明。
- en: The main focus of this section will be the specific configuration used in this
    book and not an in-depth installation guide.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 本节的主要重点将是本书中使用的特定配置，而不是深入的安装指南。
- en: Installation prerequisites
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装前提条件
- en: To install Karma, we will need to have Node.js on our computer. Node.js runs
    on Google's V8 engine and allows JavaScript to be run on several operating systems.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装Karma，我们需要在计算机上安装Node.js。Node.js在Google的V8引擎上运行，并允许JavaScript在多个操作系统上运行。
- en: Developers can publish node applications and modules using **NPM** (**Node Package
    Manager**). NPM allows developers to quickly integrate applications and modules
    into their applications.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员可以使用**NPM**（**Node Package Manager**）发布节点应用程序和模块。NPM允许开发人员快速将应用程序和模块集成到他们的应用程序中。
- en: Karma runs and is installed through the `npm` package; therefore, we need Node.js
    before we can use or install Karma. To install Node.js, go to [http://nodejs.org/](http://nodejs.org/)
    and follow the installation instructions.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Karma通过`npm`包运行和安装；因此，在使用或安装Karma之前，我们需要Node.js。要安装Node.js，请转到[http://nodejs.org/](http://nodejs.org/)并按照安装说明进行操作。
- en: 'Once we have Node.js installed, lets type the following command in the Command
    Prompt to install Karma:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们安装了Node.js，让我们在命令提示符中输入以下命令来安装Karma：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The preceding command uses `npm` to install Karma globally using `-g`. This
    means that we can use Karma on the Command Prompt by simply typing the following:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令使用`npm`全局安装Karma使用`-g`。这意味着我们可以在命令提示符中简单地输入以下内容来使用Karma：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: By default, installing Karma will install `karma-chrome-launcher` and `karma-jasmine`
    as dependencies. Ensure that these modules are installed globally as well.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，安装Karma将安装`karma-chrome-launcher`和`karma-jasmine`作为依赖项。确保这些模块也全局安装。
- en: Configuring Karma
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置Karma
- en: 'Karma comes equipped with an automated way to create a configuration file.
    To use the automated way, type the following command:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Karma配备了一个自动创建配置文件的方法。要使用自动方式，请输入以下命令：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here is a sample of the options chosen:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是所选选项的示例：
- en: '![Configuring Karma](graphics/image_03_001.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![配置Karma](graphics/image_03_001.jpg)'
- en: Customizing Karma's configuration
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义Karma的配置
- en: 'The following instructions describe the specific configuration required to
    get Karma running for the project. Customization includes the test framework (Jasmine),
    the browser (Chrome) to test with, and the files to test. To customize the configuration,
    open `karma.conf.js` and perform the following steps:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 以下说明描述了为项目运行Karma所需的特定配置。自定义包括测试框架（Jasmine）、要测试的浏览器（Chrome）和要测试的文件。要自定义配置，请打开`karma.conf.js`并执行以下步骤：
- en: 'Ensure that the enabled framework says `jasmine` using the following code:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保启用的框架使用以下代码说`jasmine`：
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Configure the `test` directory. Note that the following definition needs to
    include the tests that are required to be run along with any potential dependencies.
    The directory that will hold our tests is `/test/unit/`:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置`test`目录。请注意，以下定义需要包括需要运行的测试以及可能的任何依赖项。将保存我们的测试的目录是`/test/unit/`：
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Set the test browser to Chrome, as follows. It will then be initialized and
    will run a popup after every test:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将测试浏览器设置为Chrome，如下所示。然后它将被初始化，并且在每个测试后都会弹出一个弹窗：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Confirming Karma's installation and configuration
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 确认Karma的安装和配置
- en: 'To confirm Karma''s installation and configuration, perform the following steps:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 要确认Karma的安装和配置，请执行以下步骤：
- en: 'Run the following command to confirm that Karma starts with no errors:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令确认Karma启动时没有错误：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The output should be something like this:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输出应该是这样的：
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In addition to this, the output should state that no test files were found:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 除此之外，输出应该指出没有找到测试文件：
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The output should do this along with a failed test message:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该这样做，还有一个失败的测试消息：
- en: '[PRE9]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Note
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: An important point to note is that we will need to install `jasmine-core` globally
    on the system, or else Karma will not run successfully.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 一个重要的要点是，我们需要在系统上全局安装`jasmine-core`，否则Karma将无法成功运行。
- en: 'This is expected as no tests have been created yet . Continue to the next step
    if Karma starts, and we will see our Chrome browser with the following output:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这是预期的，因为还没有创建测试。如果Karma启动，请继续下一步，我们将看到我们的Chrome浏览器显示以下输出：
- en: '![Confirming Karma''s installation and configuration](graphics/image_03_002.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![确认Karma的安装和配置](graphics/image_03_002.jpg)'
- en: Common installation/configuration issues
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 常见的安装/配置问题
- en: 'If the Jasmine or Chrome launcher are missing, perform the following steps:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果缺少Jasmine或Chrome Launcher，请执行以下步骤：
- en: 'When running the test, an error might occur saying **missing Jasmine or Chrome
    Launcher**. If you get this error, type the following command to install the missing
    dependencies:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行测试时，可能会出现错误，提示**缺少Jasmine或Chrome Launcher**。如果出现此错误，请输入以下命令安装缺少的依赖项：
- en: '[PRE10]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Retry the test and confirm that the errors have been resolved.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重试测试并确认错误已经解决。
- en: 'In some cases, you might not be able to install `npm_modules` globally using
    the `-g` command. This is generally due to permission issues on your computer.
    The following is what you need to do to provide permissions (sudo/administrator):'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，您可能无法使用`-g`命令全局安装`npm_modules`。这通常是由于计算机上的权限问题。以下是您需要做的以提供权限（sudo/administrator）：
- en: 'The resolution is to install Karma directly in your project folder. Use the
    same command without `-g` to do this:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解决方法是直接在项目文件夹中安装Karma。使用相同的命令而不带`-g`来执行此操作：
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Run Karma using the relative path:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用相对路径运行Karma：
- en: '[PRE12]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Now that Karma is installed and running, it's time to put it to use.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在Karma已安装并运行，是时候投入使用了。
- en: Testing with Karma
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Karma进行测试
- en: 'In this section, we will create a test to confirm that Karma is working as
    expected. To do this, perform the following steps:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将创建一个测试来确认Karma是否按预期工作。为此，请执行以下步骤：
- en: 'Create the test directory. In the Karma configuration, tests were defined in
    the following directory:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建测试目录。在Karma配置中，测试被定义在以下目录中：
- en: '[PRE13]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Go ahead and create the `test/unit` directory.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继续创建`test/unit`目录。
- en: Create a new `firstTest.js` file in the `test/unit` directory.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`test/unit`目录中创建一个新的`firstTest.js`文件。
- en: 'Write the first test as follows:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写第一个测试如下：
- en: '[PRE14]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The preceding test uses the Jasmine functions and has the following properties:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的测试使用了Jasmine函数，并具有以下属性：
- en: '`describe`: This provides a brief string description of the test suite, the
    things that will be tested.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`describe`：这提供了测试套件的简短字符串描述，即将被测试的东西。'
- en: '`it`: This provides a brief string of the specific assertion called a test
    spec'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`it`：这提供了一个特定断言的简短字符串，称为测试规范'
- en: '`expect`: This provides a way to assert values'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`expect`：这提供了一种断言值的方式'
- en: '`toBeTruthy`: This is one of the several properties of an expectation that
    can be used to make assertions'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`toBeTruthy`：这是期望的几个属性之一，可用于进行断言'
- en: This test has no real value other than to confirm the output of a passing test.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这个测试除了确认通过测试的输出之外没有任何实际价值。
- en: 'Bam! Let''s check our console window and see that Karma has executed our test.
    And our command line should say something like this:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 砰！让我们检查一下控制台窗口，看看Karma是否执行了我们的测试。我们的命令行应该显示类似于这样的内容：
- en: '[PRE15]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This output means that Karma automatically recognized that a new file was added.
    The next output should be something like this:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这个输出意味着Karma自动识别到有一个新文件被添加了。接下来的输出应该是这样的：
- en: '[PRE16]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This means that our test has passed!
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们的测试已经通过了！
- en: Confirming the Karma installation
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 确认Karma的安装
- en: 'Now, the initial set up and configuration of Karma is complete. Here is a review
    of the steps:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，Karma的初始设置和配置已经完成。以下是步骤的回顾：
- en: We installed Karma through the `npm` command.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们通过`npm`命令安装了Karma。
- en: We initialized a default configuration through the `karma init` command.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们通过`karma init`命令初始化了一个默认配置。
- en: Next, we configured Karma with Jasmine and a `test/unit` test directory.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们用Jasmine和一个`test/unit`测试目录配置了Karma。
- en: We started Karma and confirmed that it could be opened with Chrome.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们启动了Karma，并确认它可以在Chrome中打开。
- en: Then, we added a Jasmine test, `firstTest.js`, to our `test/unit` test directory.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们在`test/unit`测试目录中添加了一个Jasmine测试`firstTest.js`。
- en: Karma recognized that `firstTest.js` had been added to the test directory.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Karma认识到`firstTest.js`已经被添加到了测试目录中。
- en: Finally, Karma executed our `firstTest.js` and reported our output.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，Karma执行了我们的`firstTest.js`并报告了我们的输出。
- en: With a couple of steps, we were able to see Karma running and executing tests
    automatically. From a TDD perspective, we can focus on moving tests from failing
    to passing without much effort. There is no need to refresh the browser; just
    check the command output window. Keep Karma running and all our tests and files
    will automatically be added and run.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 通过几个步骤，我们能够看到Karma自动运行和执行测试。从TDD的角度来看，我们可以专注于将测试从失败转移到通过，而不需要太多的努力。无需刷新浏览器；只需检查命令输出窗口。保持Karma运行，所有的测试和文件都将自动添加和运行。
- en: In the subsequent sections, we will see how to apply Karma with a TDD approach.
    If you're okay with Karma so far and want to move on to Protractor, skip to the
    next chapter.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将看到如何将Karma与TDD方法相结合。如果你对Karma目前还可以，并且想继续使用Protractor，请跳到下一章。
- en: Using Karma with Angular
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Karma与Angular
- en: 'Here, we will walk through a TDD approach to an Angular component. By the end
    of this chapter, we should be able to do the following:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将演示如何对Angular组件进行TDD方法的实践。在本章结束时，我们应该能够做到以下几点：
- en: Feel confident about using Karma and its configuration
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对使用Karma及其配置感到自信
- en: Understand the basic components of a Jasmine test
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解Jasmine测试的基本组件
- en: Start understanding the integration of a TDD approach in an Angular application
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始理解如何在Angular应用程序中集成TDD方法
- en: Getting Angular
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取Angular
- en: Angular installation is not possible via Bower; as it was with Angular1, it
    has to be installed via npm. Bootstrapping the Angular application is not as simple
    as Angular1 because Angular doesn't use plain JavaScript. It uses TypeScript or
    ES6 (ES2015), both of which need to be compiled to plain JavaScript before running
    them.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 通过Bower无法安装Angular；与Angular1不同，它必须通过npm安装。引导Angular应用程序不像Angular1那样简单，因为Angular不使用普通的JavaScript。它使用TypeScript或ES6（ES2015），这两者在运行之前都需要编译为普通的JavaScript。
- en: We believe that most of the developer are already aware of the Angular changes
    and how its compilation works. Just a quick recap--we will use TypeScript in our
    Angular example project here as long as Angular recommends that, though there
    is an option to use ES6 instead. We will use the node/npm tsc module to compile
    the TypeScript to plain JavaScript; node/npm will be our CLI tools as well to
    build/start a project and run the test.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们相信大多数开发人员已经了解了Angular的变化以及它的编译工作原理。简单回顾一下--在这里，我们将在我们的Angular示例项目中使用TypeScript，因为Angular建议使用它，尽管也有使用ES6的选项。我们将使用node/npm
    tsc模块将TypeScript编译为普通的JavaScript；node/npm也将是我们的CLI工具，用于构建/启动项目和运行测试。
- en: A basic understanding of node/npm modules is required here, specifically, how
    the npm commands works.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这里需要对node/npm模块有基本的了解，特别是npm命令的工作原理。
- en: Angular project
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Angular项目
- en: We will not demonstrate how to install Angular and how to build a project from
    scratch, as the Angular doc site shows that nicely. So, we will get a simple Angular
    project from the Angular teams' example and update that one for our implementation.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会演示如何安装Angular以及如何从头开始构建项目，因为Angular文档网站已经很好地展示了这一点。因此，我们将从Angular团队的示例中获取一个简单的Angular项目，并为我们的实现更新它。
- en: We will clone the `quickstart` project from the Angular GitHub repo and will
    start on that one. Hope we all have `git` installed globally besides the node/npm.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从Angular GitHub仓库克隆`quickstart`项目，并从那个项目开始。希望除了node/npm之外，我们都已经全局安装了`git`。
- en: '[PRE17]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This will copy the project locally as `angular-karma` and the folder structure
    will look as illustrated:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把项目本地复制为`angular-karma`，文件夹结构将如图所示：
- en: '![Angular project](graphics/image_03_003.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![Angular项目](graphics/image_03_003.jpg)'
- en: 'Let''s proceed with it and get ready to run:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续进行并准备运行：
- en: '[PRE18]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Here are a couple of steps to get ready with the example project. The `npm install`
    command will install the required modules for the project dependencies that are
    defined in the `package.json` file in the project root.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是准备示例项目的几个步骤。`npm install`命令将安装在项目根目录的`package.json`文件中定义的项目依赖的所需模块。
- en: Then, we will run the project with `npm start`; this script, defined in `package.json`,
    is used to run the project in the local server.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将使用`npm start`来运行项目；在`package.json`中定义的这个脚本用于在本地服务器上运行项目。
- en: 'Let''s compile and run the project:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们编译并运行项目：
- en: '[PRE19]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: If all the required dependencies are installed, this command will compile the
    TypeScript to plain JavaScript and will run the project in the local server.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如果所有必需的依赖都已安装，此命令将把TypeScript编译为普通的JavaScript，并在本地服务器上运行项目。
- en: 'The project will launch in a browser and will look as follows:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 项目将在浏览器中启动，并将如下所示：
- en: '![Angular project](graphics/image_03_004.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![Angular项目](graphics/image_03_004.jpg)'
- en: If this sample project runs successfully, then we are good to go in the next
    step, where we will add a test spec, which will include Karma, and run those tests
    with the Karma runner.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这个示例项目成功运行，那么我们就可以进行下一步了，在下一步中，我们将添加一个测试规范，其中将包括Karma，并使用Karma运行这些测试。
- en: Getting ready
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 准备工作
- en: As we cloned the sample `quickstart` project, it already integrated and configured
    Karma in the project. For the purpose of learning, we would like to integrate
    Karma in the existing project.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们克隆了示例`quickstart`项目时，它已经在项目中集成和配置了Karma。为了学习的目的，我们想要在现有项目中集成Karma。
- en: To do so, we will have to remove the existing `karma.conf.js` file from the
    project root directory. Also, we will remove the Karma, Jasmine, and related modules
    from `node_modules`.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们将不得不从项目根目录中删除现有的`karma.conf.js`文件。此外，我们还将从`node_modules`中删除Karma、Jasmine和相关模块。
- en: Interestingly, instead of doing it manually, we can easily create the basic
    Karma config file with a simple command. And with that command, it will ask some
    basic questions as we saw in the previous part of this chapter.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，我们可以通过一个简单的命令轻松创建基本的Karma配置文件，而不是手动操作。而且通过这个命令，它会询问一些基本问题，就像我们在本章的前一部分看到的那样。
- en: Setting up Karma
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置Karma
- en: To set up Karma in an Angular project, the first job is to create a `karma.conf.js`
    file in the project root directory. This file basically contains some configuration
    in key-value pairs.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在Angular项目中设置Karma，第一步是在项目根目录创建一个`karma.conf.js`文件。这个文件基本上包含一些键值对的配置。
- en: 'Interestingly, instead of doing it manually, we can easily create the basic
    Karma config file with a simple command. And with that command, it will ask some
    basic questions as we saw in the previous part of this chapter:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，我们可以通过一个简单的命令轻松创建基本的Karma配置文件。通过这个命令，它会询问一些基本问题，就像我们在本章的前一部分看到的那样：
- en: '[PRE20]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Use the default answers. After `karma.conf.js` has been created in the current
    directory, open the configuration. A few configurations may need to change, mostly
    the one that is the definition of the files for Karma to use.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 使用默认答案。在当前目录创建了`karma.conf.js`之后，打开配置。可能需要更改一些配置，主要是Karma要使用的文件的定义。
- en: 'Use the following definition in the `files` section, which defines the files
    required to run the test:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在`files`部分使用以下定义，定义运行测试所需的文件：
- en: '[PRE21]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Note
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Here, with the pattern, we have passed two options, `included` and `watched`.
    `included` refers to whether or not we want to include the file with the `<script>`
    tag; here, we will add it via SystemJS, so this is passed as `false`. And `watched`
    refers to whether or not this file will be watched during changes to the file.
    We have set `true`, as we want to watch the changes.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，通过模式，我们传递了两个选项，`included`和`watched`。`included`指的是我们是否想要使用`<script>`标签包含文件；在这里，我们将通过SystemJS添加它，所以传递为`false`。`watched`指的是文件在更改时是否会被监视。我们设置为`true`，因为我们想要监视这些更改。
- en: There seem to be a lot of files added, but these are basic and a must for running
    the test.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 似乎添加了很多文件，但这些是运行测试的基本必需品。
- en: Let's take a closer look at what the files are. In the first chunk, these are
    mostly library files, including SystemJS as a module loader, zonejs as a sync
    handler, RxJS as a reactive library, and the Angular library itself.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们仔细看看这些文件是什么。在第一部分，这些主要是库文件，包括SystemJS作为模块加载器，zonejs作为同步处理程序，RxJS作为响应式库，以及Angular库本身。
- en: Importantly, a new file in the second chunk is `karma-test-shim.js`, which we
    need to use with Karma as the module loader in test suites, that is, use SystemJS
    to load the modules in the Karma test runner. We will look at that file later
    in this section.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是，第二部分中的一个新文件是`karma-test-shim.js`，我们需要在测试套件中与Karma一起使用作为模块加载器，也就是说，使用SystemJS在Karma测试运行器中加载模块。我们将在本节后面看一下那个文件。
- en: And then, it's all our app source file; we will put test/spec files on the same
    directory as well so that they will load all of our module files, including their
    test/spec files.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，这是我们所有的应用程序源文件；我们也会把测试/规范文件放在同一个目录下，这样它们就会加载所有的模块文件，包括它们的测试/规范文件。
- en: 'In addition to the files, we may need to change a few more configuration points
    based on requirements, as follows:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 除了文件之外，根据需求，我们可能需要更改一些配置点，如下所示：
- en: '`plugins`: This is required as Karma will use these `npm` modules to perform.
    If we plan to use more `npm` modules, we will need to add them here; for example,
    if we plan to use PhantomJS as our browser, we will need to add `''karma-phantomjs-launcher''`
    in the list:'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`plugins`：这是必需的，因为Karma将使用这些`npm`模块来执行。如果我们计划使用更多的`npm`模块，我们需要在这里添加它们；例如，如果我们计划将PhantomJS作为我们的浏览器使用，我们需要在列表中添加`''karma-phantomjs-launcher''`：'
- en: '[PRE22]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '`frameworks`: This doesn''t need to change for now, as by default it chooses
    Jasmine; however, it will need to be updated if we plan to use other frameworks,
    such as Mocha. In that case, the following option should be updated:'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`frameworks`：目前不需要更改这个，因为默认情况下它选择Jasmine；但是，如果我们计划使用其他框架，比如Mocha，那么应该更新以下选项：'
- en: '[PRE23]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '`browsers`: This is useful when we need to run the test in multiple browsers,
    and most of the time, we may need to run the test in PhantomJS, so we can add
    multiple browsers, as shown:'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`browsers`：当我们需要在多个浏览器中运行测试时，这是有用的，大多数情况下，我们可能需要在PhantomJS中运行测试，因此我们可以添加多个浏览器，如下所示：'
- en: '[PRE24]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: So far, these are the basic changes we need in the `karma.con.js` files.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，这些是我们在`karma.con.js`文件中需要的基本更改。
- en: 'Let''s take a look at our `karma.conf.js` file and see what it looks like:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看我们的`karma.conf.js`文件，看看它是什么样子的：
- en: '[PRE25]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Another important file that we added in the files list is `karma-test-shim.js`;
    and as we mentioned earlier, it's needed for us to use SystemJS (the module loader)
    with Karma. We have copied the file from the Angular quick start project and it's
    possible to change this based on the project structure.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在文件列表中添加的另一个重要文件是`karma-test-shim.js`；正如我们之前提到的，这对我们使用SystemJS（模块加载器）与Karma是必需的。我们从Angular快速启动项目中复制了该文件，根据项目结构可能需要进行更改。
- en: 'Let''s take a look at our `karma.conf.js` file:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看我们的`karma.conf.js`文件：
- en: '[PRE26]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Testing the Karma runner
  id: totrans-153
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试Karma运行器
- en: 'The initial set up of Karma is almost done; we will have to run our test and
    see how it''s coming along. One more step before we run--we have to add the `karma`
    task in the `npm` script to run via the `npm` command. For that, we will have
    to add a task, as `test`, in the script section of the `package.json` file:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: Karma的初始设置几乎完成了；我们将不得不运行我们的测试并查看它的进展。在我们运行之前还有一步--我们必须在`npm`脚本中添加`karma`任务以通过`npm`命令运行。为此，我们将不得不在`package.json`文件的脚本部分中添加一个名为`test`的任务。
- en: '[PRE27]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'After adding this snippet, we can run the test via `npm`, with `npm test`,
    which works the same way as `karma start`:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在添加了这个片段之后，我们可以通过`npm`运行测试，使用`npm test`，这与`karma start`的方式相同：
- en: '[PRE28]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: So, finally, we are ready to run our test via Karma. However, oops, we are getting
    some error! It's missing the `jasmine-core` module that is needed to run the test;
    in fact, there could be more modules missing.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，最终，我们准备通过Karma运行我们的测试。然而，糟糕，我们遇到了一些错误！它缺少运行测试所需的`jasmine-core`模块；实际上，可能还缺少更多的模块。
- en: 'The output with the error looks as follows:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 带有错误的输出如下：
- en: '![Testing the Karma runner](graphics/image_03_005.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![测试Karma运行器](graphics/image_03_005.jpg)'
- en: Yes, we are indeed missing the modules and these are actually the development
    dependencies in our test suite. We will get to know a bit more about them in the
    following section.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，我们确实缺少模块，这些实际上是我们测试套件中的开发依赖项。我们将在下一节中更多地了解它们。
- en: Missing dependencies
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 缺少的依赖项
- en: 'Though we are building a basic test suite for Angular, we are still missing
    a few required npm modules and these are the development dependencies for our
    test suite, which are as follows:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们正在为Angular构建一个基本的测试套件，但我们仍然缺少一些必需的npm模块，这些是我们测试套件的开发依赖项，如下所示：
- en: '`jasmine-core`: This states that Jasmine is our test framework'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jasmine-core`：这表明Jasmine是我们的测试框架'
- en: '`karma`: This is the Karma test runner of our test suite'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`karma`：这是我们测试套件的Karma测试运行程序'
- en: '`karma-chrome-launcher`: This is required to launch Chrome from Karma, as we
    defined Chrome as our browser in `karma.config`'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`karma-chrome-launcher`：这是从Karma启动Chrome所需的，因为我们在`karma.config`中定义了Chrome作为我们的浏览器'
- en: '`karma-jasmine`: This is the Karma adapter for Jasmine'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`karma-jasmine`：这是Jasmine的Karma适配器'
- en: As long as these are the dependencies, we should install these modules and include
    them in `package.json` as well.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 只要这些是依赖项，我们应该安装这些模块并在`package.json`中包含它们。
- en: 'We can install all of these together, as shown here:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以一起安装所有这些，如下所示：
- en: '[PRE29]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'After successfully installing all the required dependencies, it seems like
     we are done with our configuration process, and we are ready to run `test` again:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 成功安装所有必需的依赖项后，我们似乎已经完成了配置过程，准备再次运行`test`：
- en: '[PRE30]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The command output should state something like this:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 命令输出应该像这样：
- en: '[PRE31]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: That is it. Karma is now running for the first Angular application.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。Karma现在正在为第一个Angular应用程序运行。
- en: Testing with Angular and Karma
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Angular和Karma进行测试
- en: 'The purpose of this first test using Karma is to create a dynamic to-do list.
    This walk-through will follow the TDD steps we discussed in [Chapter 1](ch01.html
    "Chapter 1. Introduction to Test-Driven Development"), *Introduction to Test-Driven
    Development*: test first, make it run, and make it better. This will allow us
    to gain more experience in using TDD with an Angular application.'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Karma进行的第一个测试的目的是创建一个动态的待办事项清单。这个演练将遵循我们在[第1章](ch01.html "第1章。测试驱动开发简介")中讨论的TDD步骤，*测试驱动开发简介*：先测试，使其运行，然后改进。这将使我们能够在Angular应用程序中使用TDD获得更多经验。
- en: A development to-do list
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个开发待办事项清单
- en: Before we start the test, let's set our focus on what needs to be developed
    using a development to-do list. This will allow us to organize our thoughts.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始测试之前，让我们把注意力集中在使用开发待办事项清单需要开发的内容上。这将使我们能够组织我们的想法。
- en: 'Here is the to-do list:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 这是待办事项清单：
- en: '**Maintain a list of items**: The example list consists of test, execute, and
    refactor'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**维护项目列表**：示例列表包括test，execute和refactor'
- en: '**Add an item to the list**: The example list after we add the item is test,
    execute, refactor, and repeat'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**向列表中添加项目**：添加项目后的示例列表是test，execute，refactor和repeat'
- en: '**Remove an item from the list**: The example list after we add and remove
    the item is test, execute, and refactor'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**从列表中删除项目**：添加和删除项目后的示例列表是test，execute和refactor'
- en: Testing a list of items
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试项目列表
- en: The first development item is to provide us with the ability to have a list
    of items on a component. The next couple of steps will walk us through the TDD
    process of adding the first feature using the TDD life cycle.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个开发项目是为我们提供在组件上有一个项目列表的能力。接下来的几个步骤将引导我们通过使用TDD生命周期添加第一个功能的TDD过程。
- en: Test first
  id: totrans-186
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 先测试
- en: 'Determining where to start is often the most difficult part. The best way is
    to remember the three **A**s (**Assemble**, **Act**, and **Assert**) and start
    with the base Jasmine template format. The code to do this is as follows:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 确定从哪里开始通常是最困难的部分。最好的方法是记住三个**A**（**组装**，**行动**和**断言**）并从基本的Jasmine模板格式开始。要做到这一点的代码如下：
- en: '[PRE32]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Let''s look at the explanation:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下解释：
- en: '`describe`: This defines the main feature that we are testing. The string will
    explain the feature in readable terms, and then the function will follow the test.'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`describe`：这定义了我们正在测试的主要功能。字符串将以可读的方式解释该功能，然后函数将遵循测试。'
- en: '`beforeEach`: This is the assemble step. The function defined in this step
    will be executed before every assert. It is best to put the required test setup
    before each test in this function.'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`beforeEach`：这是组装步骤。在这一步中定义的函数将在每次断言之前执行。最好在这个函数中放置每个测试之前所需的测试设置。'
- en: '`it`: This is the act and assert step. In the `it` section, we will perform
    the action being tested, followed by some assertion. The act step doesn''t have
    to go into the `it` function. Depending on the test, it might be more suited in
    the `beforeEach` function.'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`it`：这是行动和断言步骤。在`it`部分，我们将执行正在测试的操作，然后进行一些断言。行动步骤不必进入`it`函数。根据测试的需要，它可能更适合在`beforeEach`函数中。'
- en: The three As - Assemble, Act, and Assert
  id: totrans-193
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 三个A - 组装，行动和断言
- en: Now that the template is ready, we can start fitting in the pieces. We will
    again follow the three As mantra.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 现在模板准备好了，我们可以开始拼凑这些部分。我们将再次遵循三个A的原则。
- en: The following are the two parts of the assemble section.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是组装部分的两个部分。
- en: 'In the first part, we initialize the component and execute the contractor of
    the class using the following code:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一部分中，我们初始化组件并使用以下代码执行类的构造函数：
- en: '[PRE33]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Here, we imported some Angular testing APIs, such as `async` and `Testbed`.
    Here, `async` is used to load the required module to Bootstrap the application
    for the test suite, and `TestBed` is the primary API for writing a unit test for
    the Angular API. It has some service to create, compile, and initiate the components
    in the test suite.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们导入了一些Angular测试API，例如`async`和`Testbed`。在这里，`async`用于加载所需的模块以为测试套件引导应用程序，`TestBed`是编写Angular
    API单元测试的主要API。它具有一些服务，用于在测试套件中创建，编译和初始化组件。
- en: We haven't defined the `AppComponent` component, but we will do this after we
    get a failing test.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还没有定义`AppComponent`组件，但我们会在获得失败的测试之后这样做。
- en: 'The second part talks about the `AppComponent` object. The `AppComponent` object
    will contain the list of items on its `this` variable. Add the following code
    to `beforeEach` to get the component object:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 第二部分讨论了`AppComponent`对象。`AppComponent`对象将在其`this`变量上包含项目列表。添加以下代码到`beforeEach`以获取组件对象：
- en: '[PRE34]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'In assert, there are two parts again:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在断言中，再次有两个部分：
- en: 'The first assertion is to ensure that the `AppComponent` object has an `items`
    variable defined with three items. The `items` variable will be used to hold the
    list of all the items:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个断言是确保`AppComponent`对象具有定义为三个项目的`items`变量。`items`变量将用于保存所有项目的列表：
- en: '[PRE35]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The second and third assertions will be used to confirm whether the data in
    the list is correct:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 第二和第三个断言将用于确认列表中的数据是否正确：
- en: '[PRE36]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: That's it; the first is test, the second is execute, and the third is refactor.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样；第一个是测试，第二个是执行，第三个是重构。
- en: Make it run
  id: totrans-208
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使其运行
- en: 'The next step in the TDD life cycle is to make the application run and fix
    the code so that the tests pass. Remember, think about the smallest components
    that can be added to make the test pass by proceeding with the following steps:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: TDD生命周期中的下一步是使应用程序运行并修复代码，以使测试通过。记住，考虑可以添加的最小组件，以便通过以下步骤进行测试：
- en: 'Run the Karma test by typing the following command:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过输入以下命令来运行Karma测试：
- en: '[PRE37]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'If we encounter the `TypeError: app_component_1.AppComponent is not a constructor`
    error, then it can be due to the following:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '如果我们遇到`TypeError: app_component_1.AppComponent is not a constructor`错误，那么可能是由于以下原因：'
- en: The preceding error message is saying that the `AppComponent` object hasn't
    been defined. Since the error message is telling us what is required, this is
    the perfect place to start.
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 前面的错误消息表明`AppComponent`对象尚未定义。由于错误消息告诉我们需要什么，这是开始的完美地方。
- en: 'Add the `AppComponent` class to the `app.component.ts` file, as follows:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`AppComponent`类添加到`app.component.ts`文件中，如下所示：
- en: '[PRE38]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Run the `start` and `test` command again from the `npm` console. We should now
    see a new error. **Error:** `The expected undefined to be defined as follow`
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次从`npm`控制台运行`start`和`test`命令。现在我们应该看到一个新的错误。**错误：**`预期的未定义为以下定义`
- en: 'The new error message is again clear. We can also see that the code has now
    passed up to the point of our assertion at the following point:'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的错误消息再次很清晰。我们还可以看到，代码现在已经通过了我们在以下位置的断言点：
- en: '[PRE39]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'As there are no items in the object, we need to add one. Update the `app/app.component.ts`
    file as follows:'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于对象中没有项目，我们需要添加一个。更新`app/app.component.ts`文件如下：
- en: '[PRE40]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Let's run the `start` and `test` commands again from the `npm` console. We should
    now see one of the three tests pass! This means that we have successfully used
    TDD and Karma to get our first test to pass. Now, we need to fix the other three.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们再次从`npm`控制台运行`start`和`test`命令。现在我们应该看到三个测试中的一个通过了！这意味着我们成功地使用了TDD和Karma来使我们的第一个测试通过了。现在，我们需要修复其他三个。
- en: 'The next error is: `expected 0 to equal 3 `'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下一个错误是：`预期的0等于3`
- en: 'The error output again describes exactly what needs to happen. We just need
    to initialize the array with the elements test, execute, and run. Let''s go to
    `app/app.component.ts` and add the data to the array initialization:'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误输出再次准确描述了需要发生的事情。我们只需要用元素测试、执行和运行初始化数组。让我们去`app/app.component.ts`并将数据添加到数组初始化：
- en: '[PRE41]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Run the `start` and `test` commands again from the npm console. Excellent!
    The output is in green and states that all the tests have passed. The result component
    and class code from this step are as follows:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次从npm控制台运行`start`和`test`命令。太棒了！输出是绿色的，并且声明所有测试都通过了。此步骤的结果组件和类代码如下：
- en: '[PRE42]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Now that the *Make it run* step is complete, we can move on to the next step
    and make it better.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 现在*使其运行*步骤完成了，我们可以继续下一步，使其更好。
- en: Make it better
  id: totrans-228
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使其更好
- en: 'Until this point, there was nothing required to directly refactor or that had
    been identified in the development to-do list. A review of the development to-do
    list shows that an item can be crossed out:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，没有直接重构或在开发待办事项列表中标识的内容。对开发待办事项列表的审查显示可以划掉一个项目：
- en: '**View a list of to-do list items**: The example list consists of test, execute,
    and refactor'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看待办事项列表：示例列表包括测试、执行和重构
- en: '**Add an item to a to-do-list**: The example list after we add the item will
    consist of test, execute, refactor, and new item'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**向待办事项列表添加项目**：在添加项目后的示例列表将包括测试、执行、重构和新项目'
- en: 'Next up is the requirement to add a new item to the list. The TDD rhythm will
    be followed again: test first, make it run, and make it better.'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的要求是向列表中添加一个新项目。将再次遵循TDD节奏：先测试，使其运行，然后使其更好。
- en: Adding a function to the component class
  id: totrans-233
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向组件类添加一个函数
- en: The next task is to give the class the ability to add items to the object. This
    will require the addition of a method to the object. This walk-through will follow
    the same TDD steps that we followed previously.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个任务是赋予类添加项目到对象的能力。这将需要向对象添加一个方法。这个演练将遵循我们之前遵循的相同的TDD步骤。
- en: Test first
  id: totrans-235
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 首先测试
- en: 'Instead of creating a new file and duplicating some of the assemble steps,
    the following test will be inserted under the last `it` method. The reason is
    that the same module and controller will be used:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 不要创建新文件并复制一些组装步骤，而是将以下测试插入到最后一个`it`方法下。原因是将使用相同的模块和控制器：
- en: '[PRE43]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: The three As - Assemble, Act, and Assert
  id: totrans-238
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 三个A - 组装、行动和断言
- en: 'Now that the template is ready, we can start filling in the gaps using the
    3 As mantra:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 现在模板准备好了，我们可以开始使用3A法则填补空白：
- en: '**Assemble**: There is no initialization or setup required as the component
    and object will be inherited.'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组装：组件和对象将被继承，无需初始化或设置。
- en: '**Act**: Here, we need to act on the `add` method with a new item. We place
    the `act` function into the `beforEach` function. This allows us to repeat the
    same step if/when more tests are added:'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**行动**：在这里，我们需要对`add`方法进行操作，添加一个新项目。我们将`act`函数放入`beforEach`函数中。这样可以在添加更多测试时重复相同的步骤：'
- en: '[PRE44]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '**Assert**: Here, an item should be added to the list, and then you need to
    confirm that the last item in the array is as expected:'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**断言**：在这里，应该向列表中添加一个项目，然后确认数组中的最后一个项目是否符合预期：'
- en: '[PRE45]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Make it run
  id: totrans-245
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使其运行
- en: 'The next step in the TDD life cycle is to make it run. Remember, think about
    the smallest components that can be added to make the test pass, as follows:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: TDD生命周期中的下一步是使其运行。记住，考虑可以添加以使测试通过的最小组件，如下所示：
- en: 'Ensure that Karma is running in our console by typing in the following commands:'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保Karma在我们的控制台中运行，方法是输入以下命令：
- en: '[PRE46]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'The first error will state `TypeError: undefined is not a function`.'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '第一个错误将声明“TypeError: undefined is not a function”。'
- en: 'This error refers to the following line of code:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 此错误是指以下代码行：
- en: '[PRE47]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'The error is telling us that the `add` method hasn''t been defined. The `add`
    function will need to be added to the `app/app.component.ts` code. The class has
    already been defined, so the `add` function needs to be placed in the class:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 错误告诉我们`add`方法尚未定义。`add`函数将需要添加到`app/app.component.ts`代码中。类已经定义，因此需要将`add`函数放入类中：
- en: '[PRE48]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Note how the `add` function doesn't contain any logic. The smallest component
    has been added to get the test to satisfy the error message.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`add`函数不包含任何逻辑。已添加了最小的组件以使测试满足错误消息。
- en: Review the console window for the next error.
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在控制台窗口查看下一个错误。
- en: Success! All five tests have now passed.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 成功！现在所有五个测试都已通过。
- en: 'The resulting code added to get the tests to pass is as follows:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使测试通过，添加的代码如下所示：
- en: '[PRE49]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Make it better
  id: totrans-259
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使其更好
- en: The main thing that we need to refactor is that the `add` function still hasn't
    been fully implemented. It contains a hard coded value, and the minute we send
    in a different item into the `add` function, the test will fail.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要重构的主要问题是`add`函数仍未完全实现。它包含一个硬编码的值，一旦我们将不同的项目发送到`add`函数中，测试就会失败。
- en: 'Keep Karma running so that we can keep passing the tests as changes are made.
    The main issue with the current `add` method is as follows:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 保持Karma运行，以便在进行更改时继续通过测试。当前`add`方法的主要问题如下：
- en: It doesn't accept any parameters
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它不接受任何参数
- en: It doesn't push a parameter onto the list but uses a hardcoded value
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它不会将参数推送到列表中，而是使用硬编码的值
- en: 'The resultant `add` function should now look as follows:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，生成的`add`函数应如下所示：
- en: '[PRE50]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Run the `start` and `test` commands again from the `npm` console. Confirm that
    the Karma output still displays `SUCCESS`:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 再次从`npm`控制台运行`start`和`test`命令。确认Karma输出仍然显示“SUCCESS”：
- en: '[PRE51]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Configuring Karma with Travis CI
  id: totrans-268
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置Karma与Travis CI
- en: '**Continuous integration** (**CI**) is a development practice where developers
    need to integrate code into a shared repository. It is run in the automated build
    process with a test when any change happens in the codebase. This detects the
    error early, before it is pushed to production. There are lot of CI services around,
    including Travis CI, Jenkin CI, Circle CI, and so on.'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '**持续集成**（**CI**）是开发实践，开发人员需要将代码集成到共享存储库中。它在代码库发生任何更改时在自动化构建过程中运行测试。这可以在推送到生产环境之前及早检测到错误。有许多CI服务，包括Travis
    CI、Jenkin CI、Circle CI等。'
- en: In this section, we will see how we can integrate Karma with Travis.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到如何将Karma与Travis集成。
- en: Travis CI
  id: totrans-271
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Travis CI
- en: Travis CI is a popular hosted continuous integration platform that integrates
    with the GitHub project/repository to automatically run the test with every change
    in the code base of any branch or even with a pull request. It's easy to get the
    integration system just by putting a `.travis.yml` file in the project root with
    some configuration information about the project.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: Travis CI是一个流行的托管式持续集成平台，它与GitHub项目/仓库集成，可以在代码库的任何分支中的每次更改或者拉取请求时自动运行测试。只需在项目根目录中放置一个`.travis.yml`文件，其中包含有关项目的一些配置信息，就可以轻松获得集成系统。
- en: 'So, we may ask, why Travis? There are a few other CI services around. If we
    compare Travis to the other CI services, it has some benefits over the others:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们可能会问，为什么选择Travis？还有其他几个CI服务。如果我们将Travis与其他CI服务进行比较，它比其他服务有一些优势：
- en: It's a hosted service; there is no need to host, install, and configure
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是一个托管服务；无需主机、安装和配置
- en: It's free and open source
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它是免费和开源的
- en: It has a separate test code for every branch, so it is easy to run a test for
    an individual branch
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它为每个分支都有单独的测试代码，因此很容易为单个分支运行测试
- en: Configuring Travis
  id: totrans-277
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置Travis
- en: As we said, we will have a `.travis.yml` file in our project directory with
    some configuration and information about our project.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所说，我们将在项目目录中有一个`.travis.yml`文件，其中包含有关我们的项目的一些配置和信息。
- en: 'Here is what the basic configuration in the YAML file looks like:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是YAML文件中的基本配置：
- en: '**Specify the language**: We have used Node.js here:'
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**指定语言**：我们在这里使用了Node.js：'
- en: '[PRE52]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '**Command or script**: This is required to run before or after each build;
    as shown here, this script will set the `git` username every time before running
    the build:'
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**命令或脚本**：这是在每次构建之前或之后运行的必需内容；如下所示，此脚本将在每次运行构建之前设置`git`用户名：'
- en: '[PRE53]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'In the preceding example, we have passed the configuration to run the build
    process in a real browser (Firefox) with a virtual screen, by default, with karma.
    It has run the process in the PhantomJS headless browser. This might come in handy,
    as long as Travis supports the real browser beside PhantomJS:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们已经传递了配置，以在真实浏览器（Firefox）中使用karma在虚拟屏幕上运行构建过程，默认情况下使用PhantomJS无头浏览器运行该过程。只要Travis支持PhantomJS之外的真实浏览器，这可能会很方便：
- en: '[PRE54]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '**Notifications**: This is required to set the notifications for e-mail and
    chat. Here, we have set `false` for `email`, as we do not want overtime e-mail
    notifications about the builds:'
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通知**：这是设置电子邮件和聊天通知所必需的。在这里，我们将`email`设置为`false`，因为我们不希望收到有关构建的加班电子邮件通知：'
- en: '[PRE55]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Setting up the test with Karma
  id: totrans-288
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Karma设置测试
- en: 'As seen earlier, we are guessing that we have the `package.json` file in our
    project root among the npm packages; if not, let''s create a `package.json` file
    over there and add these configuration snips. Here, the first one is a dependency
    of Karma and the second one is to set the required params for the `npm test`,
    as Travis will run this to trigger our test. These will tell Travis how to run
    our test:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 正如之前所见，我们猜测在npm包中的项目根目录中有`package.json`文件；如果没有，让我们在那里创建一个`package.json`文件并添加这些配置片段。这里，第一个是Karma的依赖项，第二个是为`npm
    test`设置所需的参数，因为Travis将运行此命令来触发我们的测试。这些将告诉Travis如何运行我们的测试：
- en: '[PRE56]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Our initial setup and configuration are ready for testing. We defined the Karma
    dependency, as Travis will run `nmp install` for every suite, and will take the
    necessary steps for adding Karma. And for running the test, it will call the `npm
    test`, and we defined how that test task will run the test. Here, we have set
    the default browser to PhantomJS so that the test will run with it. However, if
    we need to run the test with a different browser, we should define that in the
    `.travis.yml` file with the `before_script` command, as we showed earlier for
    Firefox.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的初始设置和配置已经准备好进行测试。我们定义了Karma依赖项，因为Travis将为每个套件运行`nmp install`，并将采取必要的步骤来添加Karma。并且为了运行测试，它将调用`npm
    test`，我们定义了测试任务将如何运行测试。在这里，我们将默认浏览器设置为PhantomJS，以便测试将使用它运行。但是，如果我们需要使用不同的浏览器运行测试，我们应该在`.travis.yml`文件中使用`before_script`命令进行定义，就像我们之前为Firefox所示的那样。
- en: 'In that case, `npm test` will not run the test with the custom browser; for
    that, we have to do a custom call with the browser name, as follows:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，`npm test`将不会使用自定义浏览器运行测试；为此，我们必须使用浏览器名称进行自定义调用，如下所示：
- en: '[PRE57]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Self-test questions
  id: totrans-294
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自测问题
- en: 'The following self-test questions will help you further test your knowledge
    of using TDD with AngularJS and Karma:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 以下自测问题将帮助您进一步测试使用AngularJS和Karma进行TDD的知识：
- en: Q1\. How do you use Karma to create a configuration file?
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: Q1.  如何使用Karma创建配置文件？
- en: '`karma config`'
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`karma config`'
- en: '`karma init`'
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`karma init`'
- en: '`karma -config karma.conf.js`'
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`karma -config karma.conf.js`'
- en: Q2\. The Jasmine test method, named `before`, gets executed before every test.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: Q2.  Jasmine测试方法名为`before`，在每次测试之前执行。
- en: 'True'
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正确
- en: 'False'
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 错误
- en: Q3\. Bower is used to install Karma.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: Q3.  Bower用于安装Karma。
- en: 'True'
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正确
- en: 'False'
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 错误
- en: Q4\. The 3 As stand for which one of these?
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: Q4.  这三个A代表哪一个？
- en: A group of super heroes
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一组超级英雄
- en: Assemble, Act, and Assert
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 集合，行动和断言
- en: Accept, Approve, and Act
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接受，批准和行动
- en: Summary
  id: totrans-310
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we discussed how Karma became important. We saw how to install,
    configure, and run Karma. Finally, we walked through an Angular example project
    using Karma with TDD.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了Karma如何变得重要。我们看到了如何安装，配置和运行Karma。最后，我们通过一个使用Karma进行TDD的Angular示例项目进行了演示。
- en: In the next chapter, we will learn about end-to-end testing with Protractor.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何使用Protractor进行端到端测试。
