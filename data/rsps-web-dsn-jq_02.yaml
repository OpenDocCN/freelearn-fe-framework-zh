- en: Chapter 2. Designing Responsive Layouts/Grids
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章。设计响应式布局/网格
- en: '"To think about the web responsively is to think in proportions, not pixels."'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “考虑网页响应式设计意味着考虑比例，而不是像素。”
- en: The previous quote by *Trent Walton* summarizes the ideas in this chapter because,
    when we are working with responsive design, we must think about fluidity, adaptation,
    and not about being pixel perfect. This is the reason that the habit of checking
    pixel-by-pixel is in a fast decline.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '*特伦特·沃尔顿*之前的引用总结了本章的思想，因为当我们在进行响应式设计时，我们必须考虑流动性、适应性，而不是追求像素完美。这就是检查每个像素的习惯正在快速衰落的原因。'
- en: 'But, there are two ways to solve this problem and keep our site responsive:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，有两种方法可以解决这个问题并保持我们的网站响应性：
- en: Performing the site conversions using a little math to ensure a good result
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进行网站转换时使用一些数学方法以确保良好的结果
- en: Using responsive grid systems where you pick a bunch of columns and keep your
    code within this column using relative dimensions
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用响应式网格系统，在其中选择一堆列，并使用相对尺寸保持代码在此列中
- en: These advances in mobile technology and the quick evolution of websites' techniques
    have pushed everyone to review the concept of the limited dimensions of sites
    and start to think in terms of a structure that will adapt itself and offer the
    content required for each situation.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 移动技术的这些进步以及网站技术的快速发展已经推动了每个人重新审视网站的有限尺寸概念，并开始考虑一个能够自适应并为每种情况提供所需内容的结构。
- en: 'In this chapter, we will learn the following:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习以下内容：
- en: Adapting the site using JavaScript
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 JavaScript 调整网站
- en: How viewing objects in the percentage format gives flexibility to the structure
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何以百分比格式查看对象给结构带来的灵活性
- en: How to assimilate features of responsive grid systems
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何吸收响应式网格系统的特点
- en: How to code three different responsive grids
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何编写三种不同的响应式网格
- en: How to Photoshop grid templates
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用 Photoshop 网格模板
- en: How to set up the `meta` tag of `viewport` before starting
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在开始之前设置`viewport`的`meta`标签
- en: How to implement wireframes using Foundation4 Grid
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用 Foundation4 Grid 实现线框
- en: Adapting the site using JavaScript
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 JavaScript 调整网站
- en: 'As we saw in the previous chapter, we may use media queries to identify the
    current available area and render specific design customizations. This property
    is very useful, but does not work in older browsers, such as Internet Explorer
    8 and older. There are two main solutions we will take a look at that handle media
    queries very well: **Adapt.js** and **Respond.js**.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前一章中看到的，我们可以使用媒体查询来识别当前可用的区域并呈现特定的设计自定义。这个属性非常有用，但在旧版浏览器中不起作用，比如 Internet
    Explorer 8 及更早版本。有两个主要解决方案我们将会深入了解，它们能很好地处理媒体查询：**Adapt.js** 和 **Respond.js**。
- en: Let's undertake further analysis of the characteristics of each solution and
    see what it offers in addition to capturing the device dimensions dynamically
    (much like the `@media` query does) as an alternative to projects that need support
    for older browsers.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们进一步分析每种解决方案的特点，看看它提供了哪些功能，除了动态捕获设备尺寸（非常类似于`@media`查询）作为对需要支持旧版浏览器的项目的替代方案。
- en: Adapt.js
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Adapt.js
- en: 'The following are the characteristics of Adapt.js:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 Adapt.js 的特点：
- en: After capturing the browser's dimensions, Adapt.js serves only the CSS that
    is needed, when it is needed
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 捕获浏览器的尺寸后，Adapt.js 仅在需要时提供所需的 CSS。
- en: It has a very lightweight file
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它拥有非常轻量级的文件
- en: 'Some points that should be considered before adopting it are as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在采用之前应考虑以下几点：
- en: This analysis of the size of the browser window is done on demand and short
    delays may occur in order to render the correct CSS
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个分析浏览器窗口大小的过程是按需进行的，可能会出现短暂延迟，以渲染正确的 CSS。
- en: The script must be inserted at the beginning of the code (in the `head` tag)
    and the initial loading of the page may take a bit longer.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 脚本必须插入到代码的开头（在`head`标签中），页面的初始加载可能需要更长的时间。
- en: 'There are some default CSS files and media queries that come with Adapt.js
    as a suggestion, which can be used on our site. The following are the files provided
    by [http://adapt.960.gs/](http://adapt.960.gs/) by default:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Adapt.js 提供了一些默认的 CSS 文件和媒体查询作为建议，可以在我们的网站上使用。以下是[http://adapt.960.gs/](http://adapt.960.gs/)默认提供的文件：
- en: '![Adapt.js](img/3602OS_02_01.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![Adapt.js](img/3602OS_02_01.jpg)'
- en: How to do it
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何做
- en: 'After you download and place the files in your project, add the following piece
    of code in the `<head>` tag. In the following code, we are able to change the
    default path of the CSS file, the frequency of dynamic adaptation (once or whenever
    each window changes), and the CSS files based on ranges:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在您下载并将文件放置在项目中之后，将以下代码片段添加到`<head>`标签中。在下面的代码中，我们能够更改 CSS 文件的默认路径，动态适应的频率（一次或每次窗口更改时），以及基于范围的
    CSS 文件：
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Respond.js
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Respond.js
- en: 'The Respond.js files can be downloaded from [https://github.com/scottjehl/Respond](https://github.com/scottjehl/Respond).
    The following are the characteristics of Respond.js:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Respond.js 文件可以从[https://github.com/scottjehl/Respond](https://github.com/scottjehl/Respond)下载。以下是
    Respond.js 的特点：
- en: This solution seems to be easier than Adaptive.js
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这种解决方案似乎比 Adaptive.js 更容易
- en: It has a lightweight file
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有一个轻量级文件
- en: You will need to first check if the browser really requires this script, executing
    it only if needed
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您需要首先检查浏览器是否真的需要此脚本，仅在需要时才执行它
- en: There are two useful APIs helping us to debug
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有两个有用的API帮助我们调试
- en: 'The cons are as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 缺点如下：
- en: It also has a certain delay in executing the correct CSS choice at the right
    time
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它还在正确的时间执行正确的 CSS 选择方面存在一定的延迟
- en: How to do it
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何操作
- en: 'After you download and place the files in our project, just add the following
    code in the `head` tag and it will execute the solution:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在您下载并将文件放置在我们的项目中之后，只需在`head`标签中添加以下代码，它就会执行解决方案：
- en: '[PRE1]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Tip
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Respond.js uses the `@media` query that we already should be using in our code
    and applies the styles dynamically. There is no extra work!
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Respond.js 使用我们已经应该在代码中使用的`@media`查询，并动态应用样式。没有额外的工作！
- en: How percentage gives flexibility to the structure
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 百分比如何给结构提供灵活性
- en: Some old websites, and even recent ones, that do not care about the flexible
    structure, still use pixel as the unit of measurement. Pixel provides us greater
    control of its structure and accuracy. But, nowadays, we no more have control
    over where the website will be displayed (as we saw in [Chapter 1](ch01.html "Chapter 1. Exploring
    Responsive Web Design"), *Exploring Responsive Web Design*), which generates the
    need to build flexible structures where elements may stretch and fit the dimension.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 一些老网站，甚至是最近的网站，都不关心灵活的结构，仍然使用像素作为测量单位。像素为我们提供了更大的结构控制和精度。但是，现在，我们不再控制网站将在何处显示（正如我们在[第1章](ch01.html
    "第1章。探索响应式网页设计")中看到的，*探索响应式网页设计*），这引发了构建灵活结构的需求，其中元素可以拉伸并适应尺寸。
- en: 'Percentage always works as it is related to the value declared in its parent
    element. So, if a `div` tag is of size 50 percent and its parent element has 600
    px, the `div` tag will be of the size 300 px, as the following figure shows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 百分比始终按照其父元素中声明的值运行。因此，如果一个`div`标签的大小为50%，其父元素的大小为600像素，则`div`标签的大小将为300像素，如下图所示：
- en: '![How percentage gives flexibility to the structure](img/3602OS_02_02.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![百分比如何给结构提供灵活性](img/3602OS_02_02.jpg)'
- en: 'The same applies to a percentage where its parent element is of 50 percent
    of the actual size of an object, the `div` tag that is of 50 percent of the size
    will look like it is 25 percent, maintaining proportions. Let''s see the following
    figure:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 同样适用于百分比，其中其父元素的大小为对象的实际大小的50%，则大小为50%的`div`标签看起来像是25%，保持比例。让我们看下面的图：
- en: '![How percentage gives flexibility to the structure](img/3602OS_02_03.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![百分比如何给结构提供灵活性](img/3602OS_02_03.jpg)'
- en: 'But, the question is: what if we do not set the width of our parent element?
    *Maurício Samy Silva* explains this very well in his blog at [http://www.maujor.com/blog/2013/03/08/por-que-height-100-nao-funciona/](http://www.maujor.com/blog/2013/03/08/por-que-height-100-nao-funciona/).
    In this case, the parent element takes the default width of our current viewport.
    In other words, with each resizing of the browser window, this width changes automatically
    and this event is exactly what gives us the power of flexible structure.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，问题是：如果我们不设置父元素的宽度会怎样呢？*Maurício Samy Silva*在他的博客[http://www.maujor.com/blog/2013/03/08/por-que-height-100-nao-funciona/](http://www.maujor.com/blog/2013/03/08/por-que-height-100-nao-funciona/)中对此进行了很好的解释。在这种情况下，父元素会采用当前视口的默认宽度。换句话说，随着浏览器窗口的调整，此宽度会自动更改，这一事件正是赋予我们灵活结构的力量。
- en: 'Going back to the previous example, where `div` is set to 50 percent, it visually
    appears to be half the size of the usable area as shown in the following figure:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 回到之前的例子，其中`div`设置为50%，在可用区域内的视觉上看起来是一半大小，如下图所示：
- en: '![How percentage gives flexibility to the structure](img/3602OS_02_04.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![百分比如何给结构带来灵活性](img/3602OS_02_04.jpg)'
- en: Now that you've seen the importance of the fluidity of the structure, another
    important task is to transform the padding and margins as well as the percentage.
    It has an impact, for example, when we need a big horizontal padding showing on
    large screens because, if the same website is seen on a smartphone and the padding
    has been defined in pixels, it will take a lot of space on the screen.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经了解了结构的流动性的重要性，另一个重要任务是将填充和边距以及百分比转换。例如，当我们需要在大屏幕上显示大的水平填充时，它会产生影响，因为如果同一个网站在智能手机上看到，并且填充已经定义为像素，它将在屏幕上占据大量空间。
- en: We could make an exception to the rule for mobile phones, decreasing this blank
    space. But, try to imagine the hard work that we would have to do for all the
    elements! The best option is to convert this spacing from pixel to percentage.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以为手机制定一个例外规则，减少这个空白空间。但是，试想一下，为所有元素做这项工作将需要多少努力！最好的选择是将此间距从像素转换为百分比。
- en: Converting pixel to percentage
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将像素转换为百分比
- en: The topic of converting pixel to percentage is important because this is where
    the magic starts to unfold; in other words, we will see with an example how to
    abandon the absolute size in pixels and convert it to percentage. The process
    of converting pixel to percentage should be used especially if the purpose of
    our project is to have greater flexibility in controlling the elements.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 将像素转换为百分比的主题很重要，因为这是魔法开始展现的地方；换句话说，我们将通过一个例子看到如何放弃像素的绝对大小并将其转换为百分比。如果我们的项目的目的是更好地控制元素的灵活性，那么应该特别使用将像素转换为百分比的过程。
- en: 'Let''s practice converting the following sample pixel-based structure into
    percentage:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们练习将以下基于像素的结构转换为百分比：
- en: '![Converting pixel to percentage](img/3602OS_02_05.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![将像素转换为百分比](img/3602OS_02_05.jpg)'
- en: 'The following code is a sample of the CSS code representing the details in
    the previous screenshot:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码是前一个屏幕截图中详细信息的 CSS 代码示例：
- en: '[PRE2]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Let''s see the magical formula: *Target / Context = Result*.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看这个神奇的公式：*目标 / 上下文 = 结果*。
- en: 'In the previous formula, *Target* is the original element width in pixels,
    which is `690` in the following code, *Context* is the width of its container,
    which is `960`, and *Result* is the flexible value:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在前述公式中，*目标* 是以像素为单位的原始元素宽度，在以下代码中为 `690`，*上下文* 是其容器的宽度，在此为 `960`，*结果* 是灵活的值：
- en: '[PRE3]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Tip
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Sharing a bit of my experience, I would suggest putting the original values
    ahead of the result. This makes a difference when we want to convert the size
    again and we forget the original pixel value.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 分享一点我的经验，我建议在结果之前放置原始值。当我们想再次转换大小并且忘记了原始像素值时，这将产生差异。
- en: Also, I would like to emphasize the importance of not rounding up the math result.
    This is important for accuracy about the flexibility of the elements, preventing
    undesired breaks.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我还想强调不要四舍五入数学结果的重要性。这对于元素的灵活性至关重要，可以防止不希望的断裂。
- en: 'The following figure is the result of conversion to a flexible structure:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图是转换为灵活结构的结果：
- en: '![Converting pixel to percentage](img/3602OS_02_06.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![将像素转换为百分比](img/3602OS_02_06.jpg)'
- en: To help make this conversion easier, there is a tool named **Flexible Math**
    that may be found at [http://responsv.com/flexible-math/](http://responsv.com/flexible-math/).
    This site does exactly the math necessary for pixel conversion as long as it is
    based on the parent element size (as we've seen in the previous section).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助简化此转换，有一个名为**Flexible Math**的工具，可以在 [http://responsv.com/flexible-math/](http://responsv.com/flexible-math/)
    找到。只要基于父元素大小进行转换的像素计算（正如我们在前一节中看到的）。
- en: There is also another kind of conversion that is from em to px of font sizes
    and line heights, but we'll learn about it in more detail in [Chapter 4](ch04.html
    "Chapter 4. Designing Responsive Text"), *Designing Responsive Text*. Although
    we are talking about EM, the magical formula used will be the same, requiring
    some attention on other determined points.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 还有另一种转换方式，即从 em 转换为字体大小和行高的像素，但我们将在[第四章](ch04.html "第四章. 设计响应式文本")*设计响应式文本*中更详细地学习。虽然我们正在谈论
    EM，但使用的神奇公式将是相同的，需要在其他确定的点上留意一些。
- en: We'll see in [Chapter 5](ch05.html "Chapter 5. Preparing Images and Videos"),
    *Preparing Images and Videos*, that not specifying the size of the `<img>` tag
    is only the first step to scaling the image. Later, we'll see in detail how to
    make images fluid and also some ways to display images and videos in the best-suited
    way for each situation.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第 5 章](ch05.html "第 5 章。准备图像和视频")中看到，*准备图像和视频*，不指定 `<img>` 标签的大小只是缩放图像的第一步。后来，我们将详细了解如何使图像流动，并且还有一些在每种情况下最适合显示图像和视频的方法。
- en: If we have a lot of work with math conversions and it is consuming a lot of
    time, we should think of another way of doing it. There is a more convenient and
    faster solution to get this flexible structure, the name of which is the responsive
    grid system, as we will see in the following section.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在数学转换上有很多工作，并且它花费了很多时间，我们应该考虑另一种方法。有一种更方便和更快速的方法来获得这种灵活的结构，其名称是响应式网格系统，我们将在以下部分中看到。
- en: What is a responsive grid system?
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是响应式网格系统？
- en: A grid system itself may be labeled as a development kit or a small collection
    of CSS files that will help us develop websites quickly. Some of them have a fixed
    width of columns (that may vary depending on the tool used). Columns are a grid
    system's smallest unit of measurement. Most grid systems contain 12-16 columns.
    Gutters are margins used to create space between columns.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 网格系统本身可以被标记为开发工具包或一小组 CSS 文件，这些文件将帮助我们快速开发网站。其中一些具有固定宽度的列（可能会根据使用的工具而变化）。列是网格系统的最小度量单位。大多数网格系统包含
    12-16 列。间隔是用于在列之间创建空间的边距。
- en: In addition, grid systems save development time if the design is made grid-based.
    Sometimes, the layout creation may be limited by the use of columns, but this
    is not too common. The advantages of grid systems are that they help us achieve
    better readability and balance the visual weight, flexibility, and overall page
    cohesiveness.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果设计基于网格，网格系统会节省开发时间。有时，布局创建可能会受到列的限制，但这并不太常见。网格系统的优势在于它们帮助我们实现更好的可读性，并平衡视觉权重、灵活性和整体页面的凝聚性。
- en: 'To better understand how the grid system works, look at the following screenshot
    and notice that the header region''s width could be measured as 12 columns (full
    width) and the **Sidebar** region as only 3 columns:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解网格系统的工作原理，请查看以下截图，并注意可以将标题区域的宽度测量为 12 列（全宽），而**侧边栏**区域仅为 3 列：
- en: '![What is a responsive grid system?](img/3602OS_02_07.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![什么是响应式网格系统？](img/3602OS_02_07.jpg)'
- en: When shouldn't we use a grid? Implementing a grid will probably be impossible
    if your site's layout uses irregular column sizes and irregular gutters.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 何时不应该使用网格？如果您的网站布局使用不规则的列尺寸和不规则的间距，则可能无法实现网格的实施。
- en: 'Here comes the question: what are the main differences between the responsive
    grid system and the non-responsive grid system?'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在问题来了：响应式网格系统和非响应式网格系统之间的主要区别是什么？
- en: 'The following are the distinguishing characteristics of the responsive grid
    system:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是响应式网格系统的特点：
- en: It must have different traits at different sizes
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它必须在不同尺寸下具有不同的特征
- en: It must be fluid between breakpoints
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它必须在断点之间流动
- en: It must have enough control to decide which columns will transform and at which
    point
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它必须具有足够的控制权来决定哪些列会在哪一点转换
- en: Classes should ideally still make sense at all breakpoints
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类应该在所有断点上都能理想地有意义
- en: Responsive grid systems
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 响应式网格系统
- en: Now, we are going to see three different systems to apply, but for our progressive
    understanding, I would like to start with describing the less complex systems
    and then those with more options and resources.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将看到三种不同的应用系统，但为了我们渐进的理解，我想从描述较不复杂的系统开始，然后再描述具有更多选项和资源的系统。
- en: Tip
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Read all these grid systems before you choose the one that matches your project
    best. Also, there are other types of responsive grids that I have not tried to
    implement in a real project yet.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择最适合您项目的网格之前，请阅读所有这些网格系统。此外，还有其他类型的响应式网格，我尚未尝试在实际项目中实施。
- en: Fluid Baseline Grid system
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 流动基线网格系统
- en: The objective of this development kit is to provide ease and agility in developing
    for responsive websites. The Fluid Baseline Grid code ([http://fluidbaselinegrid.com/](http://fluidbaselinegrid.com/))
    is simple, lightweight, non-intrusive, and is able to be customized depending
    on the needs of the project.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 此开发工具包的目标是为响应式网站的开发提供便捷和灵活性。Fluid Baseline Grid 代码（[http://fluidbaselinegrid.com/](http://fluidbaselinegrid.com/)）简单、轻量、非侵入性，并且可以根据项目的需求进行定制。
- en: 'This grid system is based on a three-column folding layout: one column for
    mobile devices, two for tablets, and three for desktops and beyond. Let''s see
    its usage.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 此网格系统基于三列折叠布局：移动设备一列，平板电脑两列，桌面及以上三列。让我们看看它的用法。
- en: 'To set the code this way, we just need to use the class `g1` when we want the
    content to fill just one column of the structure; then, `g2` for two columns and
    `g3` for three columns. Look at the following sample of code:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 要这样设置代码，我们只需在想要内容填充的结构中使用类 `g1`，然后对于两列使用 `g2`，三列使用 `g3`。看下面的代码示例：
- en: '[PRE4]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The following figure is a preview of this code:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是该代码的预览：
- en: '![Fluid Baseline Grid system](img/3602OS_02_08.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![Fluid Baseline Grid 系统](img/3602OS_02_08.jpg)'
- en: 'Now, let''s see a website sample first and then try to code a structure using
    the classes:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们先看一个网站示例，然后尝试使用类来编写结构：
- en: '![Fluid Baseline Grid system](img/3602OS_02_09.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![Fluid Baseline Grid 系统](img/3602OS_02_09.jpg)'
- en: 'The HTML result should be the following:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: HTML 结果应该如下：
- en: '[PRE5]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Did you notice that the compass image was hidden on the mobile phone screen?
    In this case, the solution was to hide the carousel on the mobile CSS and show
    it on the tablet CSS (and desktop as well).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 你注意到指南针图像在手机屏幕上是隐藏的吗？在这种情况下，解决方案是在手机 CSS 上隐藏轮播图，然后在平板电脑 CSS 上显示它（以及桌面）。
- en: 'The major advantages to using Fluid Baseline Grid are as follows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Fluid Baseline Grid 的主要优势如下：
- en: Fluid columns
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 流式列
- en: Baseline grid with beautiful typographic standards
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有美观排版标准的基线网格
- en: Responsive design behaviors
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**响应式设计行为**'
- en: Uses Normalize.css to fix common browser inconsistencies
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Normalize.css 修复常见的浏览器不一致性
- en: Simple file structure containing only the minimum number of files to get started
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含了开始所需的最少文件的简单文件结构
- en: 'Polyfills support for IE6/7/8: Respond.js (media queries) and html5shim (HTML5
    elements)'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对 IE6/7/8 的 Polyfills 支持：Respond.js（媒体查询）和 html5shim（HTML5 元素）
- en: '**Fluid Columns** are defaulted to a minimum three-column folding grid with
    columns around 31 percent wide and gutters 2 percent wide between columns. If
    the website design requires more columns, it''s not a problem, because it may
    be changed in the CSS code.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '**流式列**默认为最小三列折叠网格，列宽约为 31%，列之间的间隔为 2%。如果网站设计需要更多列，那也没问题，因为可以在 CSS 代码中进行更改。'
- en: '**The Baseline Grid** brings the cross-browser solution to typography, improving
    the readability and creating better harmony within the text. The main fonts used
    are Georgia and Futura and they can easily be changed to match the project''s
    needs.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '**基线网格**为排版带来了跨浏览器的解决方案，改善了可读性，并在文本内部创建了更好的和谐。主要使用的字体是 Georgia 和 Futura，它们可以轻松更改以匹配项目的需求。'
- en: '**Fluid Baseline Grid** is designed for mobile-first and provides common breakpoints
    to our implementation of responsive design. The CSS code is prepared to start
    customization from the small screen and suggest differences on content displays,
    depending upon the usable area in the device. As long as it is based on columns,
    the Fluid Baseline Grid is divided into: one column for mobile devices, two for
    tablets, and three for desktops and other devices.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '**Fluid Baseline Grid** 设计为移动优先，为我们的响应式设计实现提供了常见的断点。CSS 代码准备从小屏幕开始定制，并根据设备的可用区域在内容显示上建议差异。只要它基于列，Fluid
    Baseline Grid 就被分为：移动设备一列，平板电脑两列，桌面及其他设备三列。'
- en: 1140 Grid
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 1140 网格
- en: The 1140 Grid ([http://cssgrid.net/](http://cssgrid.net/)) has a simple structure.
    Its objective is to offer more agility in code development when we define the
    width of each main element. It was divided into 12 columns that will or will not
    be merged for your ease, depending on your preference. But, when this project
    was designed, the width dimension was limited to a maximum of 1280 px. If the
    project does not require display on a big device, 1140 Grid works very well for
    all other smaller dimensions.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 1140 Grid（[http://cssgrid.net/](http://cssgrid.net/)）有一个简单的结构。它的目标是在定义每个主要元素的宽度时提供更高的代码开发效率。它被分为
    12 列，这些列将根据您的偏好合并或不合并。但是，当设计这个项目时，宽度尺寸被限制在最大 1280 px。如果项目不需要在大设备上显示，1140 Grid
    对于所有其他较小的尺寸都非常有效。
- en: 'To clarify, the following code shows how, in fact, you can do it:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 为了澄清，以下代码显示了您实际上可以这样做：
- en: '[PRE6]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The following figure shows the result:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的图示展示了结果：
- en: '![1140 Grid](img/3602OS_02_10.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![1140 Grid](img/3602OS_02_10.jpg)'
- en: 'As part of our knowledge assimilation process, let''s go back to the Pixelab
    sample and code using the 1140 Grid:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 作为我们知识吸收过程的一部分，让我们回到 Pixelab 示例并使用 1140 Grid 进行编码：
- en: '[PRE7]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The row class centers the inner columns and defines `1140px` as `max-width`.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 行类将内部列居中，并将`1140px`定义为`max-width`。
- en: The classes, `.onecol` , `.twocol` , `.threecol` , `.fourcol` , `.fivecol` ,
    `.sixcol` , `.sevencol`, `.eightcol` , `.ninecol` , `.tencol` , `.elevencol`,
    and `.twelvecol` can be used for each column. Also, they will be used in any combination
    within a row that adds up to twelve columns or less. In the last element, remember
    to add a class `last` too; that will remove the extra margins.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 类`.onecol`，`.twocol`，`.threecol`，`.fourcol`，`.fivecol`，`.sixcol`，`.sevencol`，`.eightcol`，`.ninecol`，`.tencol`，`.elevencol`和`.twelvecol`可用于每个列。此外，它们将在任何组合中使用，以便在行内添加的列总和为十二列或更少。在最后一个元素中，请记得也添加一个类`last`；这将去除额外的边距。
- en: In comparison with Fluid Baseline Grid, one of the few differences is that the
    1140 Grid would have already implemented more columns (providing more options
    to a developer), but Fluid Baseline Grid developers are free to implement it there
    if they need it.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Fluid Baseline Grid 相比，其中一些少许不同之处是 1140 Grid 已经实现了更多的列（为开发者提供更多的选项），但是 Fluid
    Baseline Grid 的开发者们可以自由地在那里实现它。
- en: 'In addition to the simple structure, Grid 1140 is also highlighted by the following
    characteristics:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 除了简单的结构之外，1140 Grid 还因以下特点而备受关注：
- en: CSS code prepared to scale images
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备好缩放图像的 CSS 代码。
- en: Gutters based in percentages
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 百分比间距。
- en: Browser support (except for IE6)
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 浏览器支持（除 IE6 外）
- en: Minimal file structure
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最小文件结构
- en: Downloadable PS template
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可下载的 PS 模板
- en: Foundation4
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Foundation4
- en: Foundation4, [http://foundation.zurb.com](http://foundation.zurb.com), is a
    complete framework with many components inside. They are predefined and stylized
    so professionally that they will serve as the basis for our projects. Focusing
    only on the grid component of Foundation4 surprises us again as it provides many
    options.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: Foundation4，[http://foundation.zurb.com](http://foundation.zurb.com)，是一个完整的框架，内含许多组件。它们是预定义的，并且被专业地样式化，将作为我们项目的基础。仅关注
    Foundation4 的网格组件会让我们惊讶，因为它提供了许多选项。
- en: 'This framework is different due to its download area, where it shows the screen
    shown in the following screenshot, because it gives developers the freedom to
    start their project in the way that best suits them (if they already have some
    knowledge about grid in general):'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 由于下载区域的存在，这个框架是与众不同的，它展示了下面的截图所示的屏幕，因为它给了开发者们以最适合他们的方式开始他们的项目的自由（如果他们已经对网格有一些通用知识）：
- en: '![Foundation4](img/3602OS_02_11.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![Foundation4](img/3602OS_02_11.jpg)'
- en: But, no worries; if you are still learning about it, by default, it comes with
    most-used values such as 12 columns and 62.5 em (1000 px) of maximum screen size.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，不用担心；如果你仍然在学习，它默认使用最常用的值，如 12 列和 62.5 em（1000 px）的最大屏幕尺寸。
- en: 'There are other good features in Foundation4 which are as follows:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: Foundation4 中还有其他好的功能，如下所示：
- en: Predefined HTML classes.
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预定义的 HTML 类。
- en: Small and large grids.
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 小网格和大网格。
- en: Nesting our grid.
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 嵌套我们的网格。
- en: Offsets.
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 偏移。
- en: Centered columns.
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 居中的列。
- en: Source ordering.
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 源顺序。
- en: Mobile-first.
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 面向移动端。
- en: Normalize and Modernizr scripts supporting browsers.
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持浏览器的 Normalize 和 Modernizr 脚本。
- en: There is no support for browsers such as Internet Explorer 7 and older. Also,
    Internet Explorer 8 has limited support for the Grid and some UI components such
    as the Input Switcher.
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不支持像 Internet Explorer 7 及更早版本的浏览器。此外，Internet Explorer 8 对网格和一些 UI 组件（如输入切换器）的支持有限。
- en: To work with Internet Explorer 8, Foundation4 drives developers to use a complementary
    solution from its previous version which may be found at [http://foundation.zurb.com/docs/support.html](http://foundation.zurb.com/docs/support.html).
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要在Internet Explorer 8中使用Foundation4，它推动开发者使用其之前版本的补充解决方案，该解决方案可在[http://foundation.zurb.com/docs/support.html](http://foundation.zurb.com/docs/support.html)找到。
- en: This framework deserves more attention because it has more options and advantages.
    That is the reason we see their characteristics in detail. In the next examples,
    we will use 12 columns as suggested by the tool as reference.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 该框架值得更多的关注，因为它有更多的选项和优势。这就是我们详细了解它们的原因。在接下来的例子中，我们将使用工具建议的12列作为参考。
- en: 'Foundation4 has a bunch of predefined HTML classes that help our development
    a lot because all the code is already created and we just need to call it using
    the class name. In the following example, we see a small class and the number
    of columns that the element will occupy:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: Foundation4拥有一堆预定义的HTML类，这些类对我们的开发很有帮助，因为所有的代码都已经创建好了，我们只需要通过类名来调用它。在下面的例子中，我们看到一个小类和元素将占据的列数：
- en: '[PRE8]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The following figure shows the result:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示结果：
- en: '![Foundation4](img/3602OS_02_12.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![Foundation4](img/3602OS_02_12.jpg)'
- en: Notice that the sum of 3, 6, and 3 is equal to 12\. Also, there is an option
    to change the class from `small` to `large`. If we swap these classes, when we
    are decreasing the browser width reaching upto 768 px, each `<div>` tag takes
    up the maximum width. There is the possibility of having these two classes together—the
    content being shown for the small screens with dimensions smaller than 768 px—and
    for large dimensions, the width is as given the previous example.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到3、6和3的和等于12。另外，还有一个选项可以将类从`small`更改为`large`。如果我们交换这些类，当我们减小浏览器宽度达到768像素时，每个`<div>`标签将占据最大宽度。这两个类可能会同时出现——在小于768像素的小屏幕上显示内容——而在大屏幕上，宽度就像前面的示例中给出的那样。
- en: 'In this case, the code would look as follows:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，代码将如下所示：
- en: '[PRE9]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Foundation4 Grid allows for nesting down as far as we would like. This technique
    is normally used to perform a quite complex design implementation or to better
    position the form elements. The following code is a sample of its usage:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: Foundation4 Grid允许我们嵌套到任何深度。这个技术通常用于执行相当复杂的设计实现，或者更好地定位表单元素。以下代码是其用法的一个示例：
- en: '[PRE10]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The following figure shows the result:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图显示结果：
- en: '![Foundation4](img/3602OS_02_13.jpg)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![Foundation4](img/3602OS_02_13.jpg)'
- en: 'We can create additional space between columns in a row using `offset`. Manipulating
    this parameter, we may align the column as we want. Remember that all the offset
    comes to the left of element. Again, the sum of numbers should be equal to 12\.
    Let''s see this in the following example, where the first `div` tag fills two
    columns, then there are two columns offset, and then another `div` tag fills eight
    columns:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`offset`在行中的列之间创建额外的间距。通过调整这个参数，我们可以对齐列的位置。记住，所有的offset都位于元素的左侧。同样，数字的和应该等于12。让我们在下面的例子中看一下这个，第一个`div`标签填充了两列，然后有两列的偏移，然后另一个`div`标签填充了八列：
- en: '[PRE11]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The result is as follows:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下所示：
- en: '![Foundation4](img/3602OS_02_14.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![Foundation4](img/3602OS_02_14.jpg)'
- en: 'The `centered column` class was created to position a specific column (not
    the content inside) to the center of the row. Foundation4 offers two classes:
    `large-centered` and `small-centered`. As we''ve seen before, a small version
    will be shown as it is not overridden by a large version. For example, if we want
    to display a `div` tag filling six columns and that is centered (for small and
    large versions), we should use the following code before:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '`centered column`类是用来将特定列（而不是内部内容）定位在行的中间的。Foundation4提供了两个类：`large-centered`和`small-centered`。就像我们之前看到的，小版本将显示为前面没有被大版本覆盖的样子。例如，如果我们想要显示一个占据六列并且居中（适用于小屏幕和大屏幕）的`div`标签，我们应该在之前使用以下代码：'
- en: '[PRE12]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The following is the result:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Foundation4](img/3602OS_02_15.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![Foundation4](img/3602OS_02_15.jpg)'
- en: 'Maybe the following feature is a little confusing, but it is very useful when
    we want to order the source code to be placed on top of our relevant content.
    To do this, we just need to use the classes `push` and `pull`. The following feature
    will also affect each version separately (using `small` or `large` before the
    function, that is, `large-push-8`) or the two versions together:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 也许以下功能有点令人困惑，但当我们想要将源代码放置在相关内容的顶部时非常有用。要做到这一点，我们只需要使用`push`和`pull`类。以下功能也会分别影响每个版本（在函数前使用`small`或`large`，即`large-push-8`）或两个版本一起使用：
- en: '[PRE13]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The following is the result:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是结果：
- en: '![Foundation4](img/3602OS_02_16.jpg)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![Foundation4](img/3602OS_02_16.jpg)'
- en: Photoshop grid templates
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Photoshop网格模板
- en: To facilitate the visualization of columns while creating our design, there
    is a Photoshop plugin named Guideguide.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在创建设计时方便查看列，有一个名为Guideguide的Photoshop插件。
- en: 'The Guideguide plugin ([http://guideguide.me/](http://guideguide.me/)) is supported
    for some versions of Photoshop, which are: CS5, CS6, and CC. However, if you have
    Photoshop CS4, Version 2.03 of this plugin will work, but it will no longer be
    updated with new features. This is a tool that guides us in creating custom guidelines
    for our Photoshop documents.'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: Guideguide插件([http://guideguide.me/](http://guideguide.me/))支持一些版本的Photoshop，包括：CS5、CS6和CC。但是，如果你使用Photoshop
    CS4，该插件的2.03版本将可用，但不会再更新新功能。这是一个指导我们为Photoshop文档创建自定义参考线的工具。
- en: 'After installing the Guideguide plugin and creating a blank file, when we are
    accessing it in Photoshop, it will open the window shown in the following screenshot;
    I suggest filling it with the initial values shown, if you are not too familiar
    with grids:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Guideguide插件并创建一个空白文件后，当我们在Photoshop中进行访问时，它将打开下面截图中显示的窗口；我建议使用所示的初始值填充，如果您对网格不太熟悉的话：
- en: '![Photoshop grid templates](img/3602OS_02_17.jpg)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![Photoshop网格模板](img/3602OS_02_17.jpg)'
- en: Then, clicking on the **GG** button, it will create guidelines in our document
    which will be very useful in layout creation.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，点击**GG**按钮，它会在我们的文档中创建参考线，在布局创建中非常有用。
- en: Setting up the meta tag of viewport before starting
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在开始之前设置viewport的meta标签
- en: 'The `meta` tag of `viewport` works by displaying just a portion of the full
    viewable area. This configuration is very important when we are crafting a responsive
    website because, without it, the mobile device browser will return a zoomed-out
    version of the website to the user. There is no standard syntax for its usage,
    but all common mobile browsers support the following tag:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '`viewport`的`meta`标签通过显示可视区域的一部分来工作。这种配置在我们设计响应式网站时非常重要，因为如果没有它，移动设备浏览器将向用户显示网站的缩小版本。对于它的使用，没有标准的语法，但是所有常见的移动浏览器都支持以下标签：'
- en: '[PRE14]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Other features such as `initial-scale` can be used to define the `meta` tag
    of `viewport`, which may prevent the user from opening the website in the zoomed-in
    mode and `maximum-scale` will restrict the user from zooming in on the content.
    The following code is an example of `viewport` restricting the user experience,
    giving no permission to use the zoom feature:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 其他功能，比如`initial-scale`可以用来定义`viewport`的`meta`标签，可以阻止用户在网站中以放大模式打开，并且 `maximum-scale`会限制用户放大内容。以下代码是`viewport`限制用户体验的一个例子，不允许使用缩放功能：
- en: '[PRE15]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Exercise 2a – creating the layout design for wireframes
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2a练习 - 为线框创建布局设计
- en: 'Now that we already have the wireframe and knowledge of how to operate the
    columns of the grid, we need to adapt the wireframe to fit the main elements in
    the columns, as shown in the following screenshot:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经有了线框并了解如何操作网格的列，我们需要根据列中的主要元素调整线框，如下截图所示：
- en: '![Exercise 2a – creating the layout design for wireframes](img/3602OS_02_18.jpg)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![2a练习 - 为线框创建布局设计](img/3602OS_02_18.jpg)'
- en: After that, it's about time we colorize it and imagine offering the user the
    best experience for all devices.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在那之后，该是时候给它上色，并设想为所有设备提供最佳的用户体验。
- en: 'Based on the wireframe from *Exercise 1* in [Chapter 1](ch01.html "Chapter 1. Exploring
    Responsive Web Design"), *Exploring Responsive Web Design*, the following screenshot
    shows a suggestion for the layout design:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 根据[第1章](ch01.html "第1章. 探索响应式网站设计")中*练习1*的线框，*探索响应式网站设计*，以下截图显示了布局设计的建议：
- en: '![Exercise 2a – creating the layout design for wireframes](img/3602OS_02_19b.jpg)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![2a练习 - 为线框创建布局设计](img/3602OS_02_19b.jpg)'
- en: When we are customizing the main elements, remember to keep it inside the guidelines,
    which will make the next step easier. Otherwise, we'll consume more time to code
    it than expected.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们正在自定义主要元素时，请记住将其保持在指导方针内，这将使下一步更容易。否则，我们将花费比预期更多的时间来编码它。
- en: 'The following screenshot shows how the main elements fit in columns:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了主要元素如何适应列：
- en: '![Exercise 2a – creating the layout design for wireframes](img/3602OS_02_20.jpg)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![练习2a – 为线框创建布局设计](img/3602OS_02_20.jpg)'
- en: Exercise 2b – using Foundation4 Grid to structure our website
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习2b – 使用 Foundation4 Grid 结构化我们的网站
- en: After seeing the use of some Responsive Grid Systems (starting from a simpler
    solution and going for a more complete solution), let's structure our code using
    the Foundation4 Grid, creating the response quickly, and without writing one line
    of CSS code to do that. Also, remember to configure the viewport in the `<head>`
    tag.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在看到了一些响应式网格系统的使用（从简单解决方案开始，然后进入更完整的解决方案），让我们使用 Foundation4 Grid 来结构化我们的代码，快速创建响应，并且不需要编写一行
    CSS 代码来完成。同时，请记得在 `<head>` 标签中配置视口。
- en: 'Using the Foundation4 Grid, perform the following recommended steps:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Foundation4 Grid，执行以下推荐步骤：
- en: Start coding the HTML script.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开始编写 HTML 脚本。
- en: Identify the rows in the structure and add a `row` class to the existent element
    or to a new `div` tag.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确定结构中的行并将 `row` 类添加到现有元素或新的 `div` 标记中。
- en: Measure how many columns each main element will fill and set this value in the
    classes.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测量每个主要元素将填充多少列，并将此值设置为类中。
- en: 'Let''s see how it is done in the following HTML:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看以下 HTML 是如何完成的：
- en: '[PRE16]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In this code, I broke one extra line, making it easy to see each row, and also
    highlighted the classes used by the grid. Let''s observe the sum of the columns
    from each row:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，我折断了一行额外的内容，使每一行都容易看到，并且还突出显示了网格使用的类。让我们观察每行的列之和：
- en: '`small` = 12 columns'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`small` = 12 列'
- en: '`small` = 12 columns (4 + 4 + 4) and `large` = 12 columns (one column per line)'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`small` = 12 列（4 + 4 + 4）和 `large` = 12 列（每行一个列）'
- en: '`small` = 12 columns (4 + 4 + 4)'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`small` = 12 列（4 + 4 + 4）'
- en: '`small` = 12 columns and `large` = 12 columns (2 + 8 + 2)'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`small` = 12 列和 `large` = 12 列（2 + 8 + 2）'
- en: 'The following screenshot shows the result without writing any CSS code, in
    a device with a width greater than 768 px:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了在大于 768 px 宽度的设备上没有编写任何 CSS 代码的结果：
- en: '![Exercise 2b – using Foundation4 Grid to structure our website](img/3602OS_02_21.jpg)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![练习2b – 使用 Foundation4 Grid 结构化我们的网站](img/3602OS_02_21.jpg)'
- en: 'The following screenshot shows the same site in a device with a width less
    than 768 px:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了在宽度小于 768 px 的设备上相同站点的屏幕截图：
- en: '![Exercise 2b – using Foundation4 Grid to structure our website](img/3602OS_02_22.jpg)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![练习2b – 使用 Foundation4 Grid 结构化我们的网站](img/3602OS_02_22.jpg)'
- en: Be calm; the website still looks horrible because this is only the first step
    of the project. We need to do some visual adjustments to complete our mission.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 请放心；网站看起来仍然很糟糕，因为这只是项目的第一步。我们需要做一些视觉调整来完成我们的任务。
- en: Tip
  id: totrans-206
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: I would suggest that you search for some beautiful images to use in your website,
    improving its look and feel. Otherwise, you can go to [http://placehold.it/](http://placehold.it/)
    to create a placeholder reserving the space for images.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议你搜索一些漂亮的图片来使用在你的网站上，改善它的外观和感觉。否则，您可以转到[http://placehold.it/](http://placehold.it/)
    创建一个占位符来保留图片的空间。
- en: 'It is a good approach that avoids altering the CSS that comes with the solution.
    In this case, we''ll create a new CSS file and include it on our website. In the
    `header` section, after the Zurb Foundation CSS file, include your own CSS code:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种很好的方法，可以避免修改解决方案附带的 CSS。在这种情况下，我们将创建一个新的 CSS 文件并将其包含在我们的网站上。在 `header` 部分，在
    Zurb Foundation CSS 文件之后，包含您自己的 CSS 代码：
- en: '[PRE17]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Inside this CSS, we are splitting the customization into three parts, applying
    the cascade style, and avoiding duplicating parts of the code:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个 CSS 中，我们将自定义分成三个部分，应用级联样式，并避免重复代码的部分：
- en: Both versions
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个版本
- en: Small version (lower than 768 px)
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 小版本（小于 768 px）
- en: Large version (greater than 768 px)
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大版本（大于 768 px）
- en: The following code is used at the beginning of customizing from our site. Feel
    free to use it as long as it is only a suggestion to match the layout.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码用于从我们的网站开始定制。随意使用它，只要它只是匹配布局的建议。
- en: '[PRE18]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Summary
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, we have learned three different ways to render the specific
    CSS code using JavaScript solutions: Adapt.js, Respond.js, and Breakpoints.js.
    We now also understand how to convert pixels to percentages by doing the math
    and discovering the result. We have also learned what the responsive grid system
    is and how to use each type of the responsive grid system.'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了三种使用 JavaScript 解决方案呈现特定 CSS 代码的不同方法：Adapt.js、Respond.js 和 Breakpoints.js。现在，我们也明白了如何通过数学运算将像素转换为百分比，并发现结果。我们还学习了什么是响应式网格系统，以及如何使用每种类型的响应式网格系统。
- en: Finally, we have started to code our site using grid (based on the wireframe
    from [Chapter 1](ch01.html "Chapter 1. Exploring Responsive Web Design"), *Exploring
    Responsive Web Design*), which connects to the next chapter, in which we will
    cover the different ways to implement responsive menu navigations such as the
    Toggle menu, the off-canvas menu (such as Facebook), and others.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们开始使用网格（基于来自[第 1 章](ch01.html "第 1 章。探索响应式 Web 设计")的线框图，*探索响应式 Web 设计*），编写我们的网站，这与下一章相连接，下一章我们将涵盖不同的方法来实现响应式菜单导航，例如切换菜单、侧栏菜单（如
    Facebook 等）等。
