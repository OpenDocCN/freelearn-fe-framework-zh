- en: Chapter 3. Data Flow and Life Cycle Events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we saw the power of JSX. JSX makes it easy to write
    the React components.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will focus on the data flow between components and how to
    manage state and life cycle of components.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following points:'
  prefs: []
  type: TYPE_NORMAL
- en: Data flow in React
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Props
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PropTypes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: State
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: State versus props
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When to use state and props
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Component life cycle overview
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Component life cycle methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At the end of the chapter, we will get familiar with the data flow in the React
    components and the ways of maintaining and managing state. We will also get used
    to the life cycle of a component and various life cycle hooks provided by React.
  prefs: []
  type: TYPE_NORMAL
- en: Data flow in React
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Shawn and Mark were getting ready to start working on a rainy day with a cup
    of coffee.
  prefs: []
  type: TYPE_NORMAL
- en: '"Hey Mike, I have a question about props that we used to pass the `headings`
    and `changeSet` data to other components."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Shoot!" Mike exclaimed.'
  prefs: []
  type: TYPE_NORMAL
- en: '"It seems to me that we are passing data to the components that are below the
    current component, but how can a component pass the data to the parent component?"'
  prefs: []
  type: TYPE_NORMAL
- en: '"Ah. In React, by default, all the data flows only in one direction: from parent
    component to child component. That''s it."'
  prefs: []
  type: TYPE_NORMAL
- en: This makes the job of the child component simple and predictable. Take props
    from the parent and render." Mike explained.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '"Let''s look at our example. The `RecentChangesTables` component passes the
    props to the `Headings` and `Rows` components. So basically, we can say that `RecentChangesTables`
    owns the `Headings` and `Rows` components."'
  prefs: []
  type: TYPE_NORMAL
- en: '"In React, an owner component sets props for another components." Mike explained.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Got it. Therefore, in the preceding case, `<table>` is also owned by `RecentChangesTables`?"
    Shawn asked.'
  prefs: []
  type: TYPE_NORMAL
- en: '"No. The owner relationship is specific to the React components. In this case,
    table is the parent of `Headings` and `Rows`, similar to the parent-child relationship
    in DOM. But it''s not an owner of them." explained Mike.'
  prefs: []
  type: TYPE_NORMAL
- en: '"A component is the owner of a child component if that child gets created in
    the render method of the parent. I guess this will solve the confusion." Mike
    added.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Yes. Got the difference between owner and parent-child relationship." said
    Shawn.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Furthermore, a component should not mutate its props. They should always be
    consistent with what the parent has set. It''s a very important point that makes
    React''s behavior consistent as well as fast, as we''ll see soon." Mike further
    added.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Props can be accessed by `this.props`, as we have already seen. If anything
    in the parent''s props changes, React will make sure that the changes are flown
    downstream and will re-render the component tree." Mike.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Excellent. Yesterday, I was reading something about validating the props."
    remembered Shawn.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Yes. React allows validating the props using `PropTypes`. Let''s take a look
    at them." said Mike, taking a sip from his freshly ground coffee.'
  prefs: []
  type: TYPE_NORMAL
- en: Props validation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"React provides a way to validate the props using PropTypes. This is extremely
    useful to ensure that the components are used correctly. Here is an example of
    using `propTypes` for our app." explained Mike.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '"Oh! Will it show an error as we are not passing the author, which is required,
    I assume? I see that `propTypes` has set the author value to be `isRequired`."
    Shawn asked.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Props validation](img/4730_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '"No. It will not throw an error, but it will show a nice warning for us to
    take a look at." said Mike.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Also, `propTypes` are only checked in development. Their job is to just check
    that all the assumptions that we are making about our components are being met."
    Mike added.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Got it. I agree that it''s better to have it rather than getting surprised
    by random hiccups during production," Shawn.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Yes. It''s especially useful as, along with standard types, we can also validate
    the custom types." Mike informed.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '"Therefore, if the structure of the props is not as per your assumption, you
    can raise a warning by defining a custom validator as shown in the previous case",
    Mike explained.'
  prefs: []
  type: TYPE_NORMAL
- en: Specifying default props
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"Shawn, React also allows us to define some default values for props. This
    is useful when parent component is passing props based on some condition or not
    passing some props at all due to some change," Mike said.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '"Here, we updated the code to not send the headings from props. Instead, we
    used the `getDefaultProps` function to define the default props that will be used
    in case they are not passed."'
  prefs: []
  type: TYPE_NORMAL
- en: '![Specifying default props](img/4730_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '"Therefore, our output looks like this."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Oh, ok. Makes sense. Rather than fiddling with the if-else clauses to check
    whether the prop is present, default props make it simple enough to predefine
    our data." said Shawn.'
  prefs: []
  type: TYPE_NORMAL
- en: Modifying this.props.children
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"Shawn. There is one special prop that we should know about. It''s `this.props.children`,"
    continued Mike.'
  prefs: []
  type: TYPE_NORMAL
- en: '"React captures all the children that are present in the opening and closing
    tag into props that can be accessed through `this.props.children`." said Mike.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Let''s try to modify our code to use `this.props.children`. This is also required
    as we want to display a header for our output table." Mike added.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![Modifying this.props.children](img/4730_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '"Cool. So we extracted the table in its own component and also added a header."
    Shawn confirmed.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Yes and we rendered `Headings` and `Rows` using `this.props.children`." Mike
    explained.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Awesome. Let me change our code based on our discussion about props." Shawn
    said excitedly.'
  prefs: []
  type: TYPE_NORMAL
- en: State
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"Shawn, let''s talk about one more technique of handling data in a component,
    state. Every component can have its own state in React. The main difference between
    state and props is that props are passed to the component from the parent component;
    whereas, state is something that is internal to the component.'
  prefs: []
  type: TYPE_NORMAL
- en: Props are passed when a component gets instantiated. State is something that
    can change over time. Therefore, changes in state affect the rendering of components.
    Consider state as some sort of private data structure of the component." Mike
    added.
  prefs: []
  type: TYPE_NORMAL
- en: '"Mike, but then we have not used state at all until now. We were just using
    props." Shawn asked.'
  prefs: []
  type: TYPE_NORMAL
- en: '"True. That is because state should be introduced only when it is required.
    You already know managing state is hard. As we were playing with static data of
    `ChangeSets` API, we didn''t require state. However, we will need it very soon."
    Mike added.'
  prefs: []
  type: TYPE_NORMAL
- en: Setting initial state
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"The initial state can be set using the `getInitialState` function." said Mike.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '"State can be accessed similar to props using `this.state`." Mike explained
    further.'
  prefs: []
  type: TYPE_NORMAL
- en: Setting state
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"We might need to update the initial state based on some user events. Updating
    state is also easy using the `setState()` function." informed Mike.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Avoiding state
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"Currently, we don''t need state; however, when we fetch the dynamic data from
    `RecentChanges` API, we will use state with props." Mike added.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Cool. Based on our discussion, I think that we should avoid state as much
    as possible." Shawn suggested.'
  prefs: []
  type: TYPE_NORMAL
- en: '"True. If a component does not change, then there is no need to use state.
    It''s better to depend on props passed by the parent component in that case. This
    also avoids re-rendering of the component again and again as changes to state
    initiate a re-render of the component." Mike explained.'
  prefs: []
  type: TYPE_NORMAL
- en: State versus props
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"Shawn, it''s important to understand the difference between props and state
    and where to use what." informed Mike.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Props are immutable. They should not be updated by the component to which
    they are passed. They are are owned by the component which passes them to some
    other component. State is something internal and private to the component. State
    can and will change depending on the interactions with the outer world." said
    Mike.'
  prefs: []
  type: TYPE_NORMAL
- en: '"State should store as simple data as possible, such as whether an input checkbox
    is checked or not or a CSS class that hides or displays the component." Mike added.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Another thing to make sure is to not duplicate props in state." said Mike.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '"It is possible to set the state based on data passed in props. However, the
    parent component can update the props and send them again. In this case, the state
    will be muddled up with new data if there have been any changes to the state."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Also, the data is present at two places now, therefore, it becomes harder
    to manage two sources of data." Mike explained.'
  prefs: []
  type: TYPE_NORMAL
- en: '"I think that in such cases, it''s best to use props directly, right?" Shawn
    asked.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Yes. The state is entirely optional. It''s best to avoid it as much as possible.
    You got that right." Mike said happily.'
  prefs: []
  type: TYPE_NORMAL
- en: Component life cycle overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"Shawn, now let''s start taking a look at how to dynamically fetch data from
    [https://openlibrary.org/](https://openlibrary.org/), store it in our component,
    and render it after making it compatible to render.'
  prefs: []
  type: TYPE_NORMAL
- en: A component goes through different life cycle events. They help facilitate when
    we should initialize which part of a component or when should some external data
    be fetched.
  prefs: []
  type: TYPE_NORMAL
- en: We have already seen some of these methods such as `render`, `getInitialState`,
    and `getDefaultProps`.
  prefs: []
  type: TYPE_NORMAL
- en: An updated detailed list and example for the same can be found at [http://videos.bigbinary.com/react/react-life-cycle-methods-in-depth.html](http://videos.bigbinary.com/react/react-life-cycle-methods-in-depth.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go through each of these, one by one, and how they can be used so that
    we can start fetching dynamic information for display. Here is a list of methods
    that we will discuss:'
  prefs: []
  type: TYPE_NORMAL
- en: '`componentWillMount`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`componentDidMount`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`componentWillReceiveProps(object nextProps)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`boolean shouldComponentUpdate(object nextProps, object nextState)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`componentWillUpdate(object nextProps, object nextState)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`componentDidUpdate(object prevProps, object prevState)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`componentWillUnmount()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`React.unmountComponentAtNode(document.body)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You can follow along the next example at [http://jsbin.com/tijeco/3/edit](http://jsbin.com/tijeco/3/edit).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Component life cycle methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"Shawn, let''s start with an exhaustive example that triggers these methods."
    Mike informed.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![Component life cycle methods](img/4730_03_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '"It simply displays a body with the `true` text and then on clicking, it changes
    it to display `false`." Mike.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Shawn, to keep things simple, I have added just a simple `console.log()` method
    for every life cycle method so that we know it was called. If we do a fresh run,
    the following is printed:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '"Ah, got it. Basically, the window first printed `Start` to signal the file
    has been loaded." Shawn said.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Correct. Next, it printed out `componentWillMount`. That''s the entry point
    for our component. This method is called when a component gets mounted on the
    body for the first time. If you can see, we are calling `React.render`."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This is what triggers `componentWillMount`. In this method, we can call `setState`
    to perform some changes to our internal data. However, that doesn't call a new
    re-render or this method again.
  prefs: []
  type: TYPE_NORMAL
- en: Next is the actual `render` method call. This is responsible for the actual
    component display.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we have a call to `componentDidMount`. This is invoked immediately
    after mounting the component and only once after the component is rendered.
  prefs: []
  type: TYPE_NORMAL
- en: We can make use of this to fetch the dynamic information that we want to display
    in our component after the initial render of the component.
  prefs: []
  type: TYPE_NORMAL
- en: '"Once that''s done, we are done with our initial run for the display of a component!"'
  prefs: []
  type: TYPE_NORMAL
- en: '"Nice." exclaimed Shawn.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Now, we have added a simple `onClick` event. This calls `this.toggleState`,
    which toggles the current status from `true` to `false` and vice versa."'
  prefs: []
  type: TYPE_NORMAL
- en: As the state is affected, React re-renders the `App` component. We can see the
    method call sequence when this happens, as follows:"
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '"Ah, nice. It went through another re-render cycle." said Shawn.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Correct. When the state was changed, React knew it needed to re-render the
    `App` component. It calls `shouldComponentUpdate` first. This method returns `true`
    or `false` indicating React to render the component or not.'
  prefs: []
  type: TYPE_NORMAL
- en: '"We can also control whether the component should be re-rendered or not even
    if the state gets updated. This method can return `false` and then React will
    not re-render the component even if the state is changed."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '"We can also compare `nextProps` and `nextState` to the existing values and
    then decide whether to re-render."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Awesome, this means that we could get faster components!" Shawn exclaimed.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Exactly. By default, it always returns true, to always render on changes."
    Mike concluded.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Next up, `componentWillUpdate` will get called just before `rendering`. We
    can take care of any changes that we would like to do or any housekeeping. One
    thing to note is that we can''t call `setState` in this method. State updates
    should be handled elsewhere."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Oh, ok," Shawn.'
  prefs: []
  type: TYPE_NORMAL
- en: '"We are only left with `componentWillReceiveProps`."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '"It receives `nextProps`, which are the new props that the child component
    receives from the parent component. This method is not called for initial render.
    We can update the state or do some other housekeeping work based on the changes
    in props."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Nice, Mike. I think I am getting a better hang of this."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Finally, we have `componentWillUnmount`. This is called when the component
    is unmounted from the body. We can use this to release the resources, perform
    cleanups, unset any timers, and so on."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Got it."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Alright! Let''s update our component to start fetching the information from
    [https://openlibrary.org/](https://openlibrary.org/)."'
  prefs: []
  type: TYPE_NORMAL
- en: '"So, what we will be doing is updating the `componentDidMount` to perform an
    AJAX call and fetch data to display."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '"Here, we are making a call to [http://openlibrary.org/recentchanges.json?limit=10](http://openlibrary.org/recentchanges.json?limit=10)
    and asking for the ten most-recent changes. We will get the data in the following
    format:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '"We will need to format the data as per our requirements so that it''s displayed
    nicely. Let''s take a look at it:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '"Here, we are extracting the timestamp, author information, and description
    of the change, which is the comment in the change. As the changed time is a timestamp,
    we have made use of the `jQuery.timeago` plugin to get desirable display of time,
    such as `2 minutes ago` and so forth. To use this plugin, we need to include it
    in our HTML `head` tag." Mike explained.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '"Looks like it''s all coming together." Shawn.'
  prefs: []
  type: TYPE_NORMAL
- en: '"It is, let''s take a look at everything in action, shall we?"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '"Here''s our final product!", exclaimed Mike.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Awesome, I can''t wait to see what we build next!" Shawn added.'
  prefs: []
  type: TYPE_NORMAL
- en: Another productive day at Adequate. Mike and Shawn, happy with the progress,
    headed back.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at how to pass around data in the React components
    using props and state. We also discussed how and when to use state and props.
    We looked at how `propTypes` can be used to validate the props. After that, we
    discussed the component's life cycle. We discussed about the various life cycle
    methods and how they can be used. After that, we used these life cycle methods
    to get real-time data from Open Library API.
  prefs: []
  type: TYPE_NORMAL
