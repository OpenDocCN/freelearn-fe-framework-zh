- en: '1'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building Your First Angular Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Web development has undergone huge growth during the last decade. Frameworks,
    libraries, and tools have emerged that enable developers to build great web applications.
    Angular has paved the way by creating a framework focusing on application performance,
    development ergonomics, and modern web techniques.
  prefs: []
  type: TYPE_NORMAL
- en: Before developing Angular applications, we need to learn some basic but essential
    things to have a great experience with the Angular framework. One of the primary
    things we should know is what Angular is and why we should use it for web development.
    We will also take a tour in this chapter of Angular history to understand how
    the framework has evolved.
  prefs: []
  type: TYPE_NORMAL
- en: Another important but sometimes challenging introductory topic is setting up
    our development environment. It must be done at the beginning of a project and
    getting this right early can reduce friction as our application grows. Therefore,
    a large part of this chapter is dedicated to the **Angular CLI** , a tool developed
    by the Angular team that provides scaffolding and automation tasks in an Angular
    application, eliminating configuration boilerplate and enabling developers to
    focus on the coding process. We will use the Angular CLI to create our first application
    from scratch, get a feel for the anatomy of an Angular application, and take a
    sneak peek at how Angular works under the hood.
  prefs: []
  type: TYPE_NORMAL
- en: Working on an Angular project without help from development tools, such as an
    **Integrated Development Environment** ( **IDE** ), can be painful. Our favorite
    code editor can provide an agile development workflow that includes compilation
    at runtime, static type checking, introspection, code completion, and visual assistance
    to debug and build our application. We will highlight some of the most popular
    tools in the Angular ecosystem in this chapter, such as **Angular DevTools** and
    **Visual Studio Code** ( **VSCode** ).
  prefs: []
  type: TYPE_NORMAL
- en: 'To sum up, here are the main topics that we will explore in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: What is Angular?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why choose Angular?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up the Angular CLI workspace
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The structure of an Angular application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Angular tooling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**GitHub** : [https://github.com/PacktPublishing/Learning-Angular-Fifth-Edition/tree/main/ch01](https://github.com/PacktPublishing/Learning-Angular-Fifth-Edition/tree/main/ch01
    )'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Node.js** : [https://nodejs.org](https://nodejs.org )'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Git** : [https://git-scm.com](https://git-scm.com )'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**VSCode** : [https://code.visualstudio.com](https://code.visualstudio.com
    )'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Angular DevTools** : [https://angular.dev/tools/devtools](https://angular.dev/tools/devtools
    )'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is Angular?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Angular is a web framework written in the **TypeScript** language and includes
    a CLI, a language service, a debugging tool, and a rich collection of first-party
    libraries.
  prefs: []
  type: TYPE_NORMAL
- en: Libraries included in the Angular framework provided out of the box are called
    first-party libraries.
  prefs: []
  type: TYPE_NORMAL
- en: Angular enables developers to build scalable web applications with TypeScript,
    a strict syntactic superset of JavaScript, which we will learn about in *Chapter
    2* , *Introduction to TypeScript* .
  prefs: []
  type: TYPE_NORMAL
- en: The official Angular documentation can be found at [https://angular.dev](https://angular.dev)
    .
  prefs: []
  type: TYPE_NORMAL
- en: The official Angular documentation is the most up-to-date resource for Angular
    development. It’s preferable to use it over other external resources while developing
    with Angular.
  prefs: []
  type: TYPE_NORMAL
- en: Google created Angular. The first version, 1.0, was released in 2012 and was
    called **AngularJS** . AngularJS was a JavaScript framework, and web applications
    built with it were written in JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: In 2016, the Angular team decided to make a revolutionary change in AngularJS.
    They collaborated with the TypeScript team at Microsoft and introduced the TypeScript
    language into the framework. The next version of the framework, 2.0, was written
    in TypeScript and rebranded as **Angular** with a different logo than AngularJS.
  prefs: []
  type: TYPE_NORMAL
- en: 'In 2022, Angular entered a new era of evolutionary advancements known as the
    *Angular Renaissance* . During that period, the framework picked up momentum in
    web development by introducing major innovations focused on enhancing the **Developer
    Experience** ( **DX** ) and optimizing application performance, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: A simple and modern approach to authoring Angular applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved reactivity patterns to manage application state efficiently
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The integration of **Server-Side Rendering** ( **SSR** ) techniques to improve
    performance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A major milestone in the Angular Renaissance era was **Angular 17** , when the
    Angular team decided to rebrand the framework with a new logo and colors, reflecting
    the recent changes and setting the vision for future advancements.
  prefs: []
  type: TYPE_NORMAL
- en: In this book, we will cover **Angular 19** , the latest major *stable* version
    of the Angular framework. AngularJS reached the end of its life in 2022, and it
    is no longer supported and maintained by the Angular team.
  prefs: []
  type: TYPE_NORMAL
- en: Angular is based on the most modern web standards and supports all the evergreen
    browsers. You can find more details about the specific version support of each
    browser at [https://angular.dev/reference/versions#browser-support](https://angular.dev/reference/versions#browser-support)
    .
  prefs: []
  type: TYPE_NORMAL
- en: In the following section, we will learn the benefits of choosing Angular for
    web development.
  prefs: []
  type: TYPE_NORMAL
- en: Why choose Angular?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The power of the Angular framework is based on the combination of the following
    characteristics:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The main pillars of the framework:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cross-platform
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Incredible tooling
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Easy onboarding
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The usage of Angular worldwide:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An amazing community
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Battle-tested against Google products
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In the following sections, we will examine each characteristic in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Cross-platform
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Angular applications can run on different platforms: web, server, desktop,
    and mobile. Angular can run natively only on the web because it is a web framework;
    however, it is open-source and is backed by incredible tooling that enables the
    framework to run on the remaining three using the following tools:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Angular SSR** : Renders Angular applications server-side'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Angular service worker** : Enables Angular applications to run as **Progressive
    Web Applications** ( **PWAs** ) that can execute in desktop and native mobile
    environments'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ionic** / **NativeScript** : Allows us to build mobile applications using
    Angular'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The next pillar of the framework describes the tooling available in the Angular
    ecosystem.
  prefs: []
  type: TYPE_NORMAL
- en: Tooling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Angular team has built two great tools that make Angular development easy
    and fun:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Angular CLI** : A command-line interface that allows us to work with Angular
    projects, from scaffolding to testing and deployment'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Angular DevTools** : A browser extension that enables us to inspect and profile
    Angular applications from the comfort of our browser'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Angular CLI is the de facto solution to work with Angular applications.
    It allows the developer to focus on writing application code, eliminating the
    boilerplate of configuration tasks such as scaffolding, building, testing, and
    deploying an Angular application.
  prefs: []
  type: TYPE_NORMAL
- en: Onboarding
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It is simple and easy to start with Angular development because when we install
    Angular, we also get a rich collection of first-party libraries out of the box,
    including:'
  prefs: []
  type: TYPE_NORMAL
- en: An Angular HTTP client to communicate with external resources over HTTP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Angular forms to create HTML forms to collect input and data from users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An Angular router to perform in-app navigations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The preceding libraries are installed by default when we create a new Angular
    application using the Angular CLI. However, they are only used in our application
    if we import them explicitly into our project.
  prefs: []
  type: TYPE_NORMAL
- en: The usage of Angular worldwide
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Many companies use Angular for their websites and web applications. The website
    [https://www.madewithangular.com](https://www.madewithangular.com) contains an
    extensive list of those companies, including some popular ones.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, Angular is used in thousands of projects by Google and by millions
    of developers worldwide. The fact that Angular is already used internally at Google
    is a crucial factor in the reliability of the framework. Every new version of
    Angular is thoroughly tested in those projects before becoming available to the
    public. The testing process helps the Angular team catch bugs early and delivers
    a top-quality framework to the rest of the developer community.
  prefs: []
  type: TYPE_NORMAL
- en: 'Angular is backed and supported by a thriving developer community. Developers
    can access many available communities worldwide, online or locally, to get help
    and guidance with the Angular framework. On the other hand, communities help the
    Angular framework progress by sharing feedback on new features, testing new ideas,
    and reporting issues. Some of the most popular online communities are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Tech Stack Nation** : The world’s friendliest Angular study group that brings
    together Angular developers who are passionate about improving their confidence
    in building amazing Angular applications. Tech Stack Nation is a community where
    Angular developers can collaborate, learn from each other’s expertise, and push
    the boundaries of what Angular can achieve. You can join Tech Stack Nation at
    [https://techstacknation.com](https://techstacknation.com) .'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Angular Community Discord** : Angular’s official Discord server that brings
    the incredible Angular community together. Everyone is welcome to join the community
    with the click of a button. It is the central location to connect Angular team
    members, **Google Developer Experts** ( **GDEs** ), library authors, meetup groups,
    and anyone interested in learning the framework. You can join the Angular Community
    Discord server at [https://discord.gg/angular](https://discord.gg/angular) .'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Angular.love** : A community platform for Angular enthusiasts, supported
    by *House of Angular* , to facilitate the growth of Angular developers through
    knowledge-sharing initiatives. It started as a blog where experts published articles
    about Angular news, features, and best practices. Now, Angular.love also organizes
    in-person and online meetups, frequently featuring GDEs. You can join Angular.love
    at [https://angular.love](https://angular.love) .'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we have seen what Angular is and why someone should choose it for web
    development, we will learn how to use it and build great web applications.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Angular CLI workspace
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Setting up a project with Angular can be tricky. You need to know what libraries
    to import and ensure that files are processed in the correct order, which leads
    us to the topic of scaffolding. Scaffolding is a tool to automate tasks, such
    as generating a project from scratch, and it becomes necessary as complexity grows
    and where every hour counts toward producing business value, rather than being
    spent fighting configuration problems.
  prefs: []
  type: TYPE_NORMAL
- en: The primary motivation behind creating the Angular CLI was to help developers
    focus on application building, eliminating the configuration boilerplate. Essentially,
    with a simple command, you should be able to initialize an application, add new
    artifacts, run tests, update applications, and create a production-grade bundle.
    The Angular CLI supports all of this using special commands called **schematics**
    .
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we begin, we must ensure that our development environment includes software
    tools essential to the Angular development workflow.
  prefs: []
  type: TYPE_NORMAL
- en: Node.js
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Node.js is a JavaScript runtime built on top of Chrome’s v8 JavaScript engine.
    Angular requires an active or maintenance **Long-Time Support** ( **LTS** ) version.
    If you have already installed it, you can run `node -v` on the command line to
    check which version you are running.
  prefs: []
  type: TYPE_NORMAL
- en: If you need to work with applications that use different Node.js versions or
    can’t install the runtime due to restricted permissions, use **nvm** , a version
    manager for Node.js designed to be installed per user. You can learn more at [https://github.com/nvm-sh/nvm](https://github.com/nvm-sh/nvm)
    .
  prefs: []
  type: TYPE_NORMAL
- en: npm
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: npm is a software package manager that is included by default in Node.js. You
    can check this out by running `npm -v` in the command line. An Angular application
    consists of various libraries, called *packages* , that exist in a central place
    called the *npm registry* . The npm client downloads and installs the libraries
    needed to run your application from the npm registry to your local computer.
  prefs: []
  type: TYPE_NORMAL
- en: Git
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Git is a client that allows us to connect to distributed version-control systems,
    such as GitHub, Bitbucket, and GitLab. It is optional from the perspective of
    the Angular CLI. You should install it if you want to upload your Angular project
    to a Git repository, which you might want to do.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Angular CLI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Angular CLI is part of the Angular ecosystem and can be downloaded from
    the npm package registry. Since it is used to create Angular projects, we must
    install it globally in our system. Open a terminal window and run the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You may need elevated permissions on some Windows systems, so you should run
    your terminal as an administrator. Run the preceding command in Linux/macOS systems
    by adding the `sudo` keyword as a prefix to execute with administrative privileges.
  prefs: []
  type: TYPE_NORMAL
- en: 'The command that we used to install the Angular CLI uses the `npm` client,
    followed by a set of runtime arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '`install` or `i` : Denotes the installation of a package'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-g` or `--global` : Indicates that the package will be installed on the system
    globally'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@angular/cli` : The name of the package to install'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Angular CLI follows the same version as the Angular framework, which in
    this book is 19. The preceding command will install the latest *stable* version
    of the Angular CLI. You can check which version you have installed by running
    `ng version` or `ng v` in the command line. If you have a different version than
    19 after installing it, you can run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The preceding command will fetch and install the latest version of Angular CLI
    19.
  prefs: []
  type: TYPE_NORMAL
- en: CLI commands
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Angular CLI is a command-line interface tool that automates specific tasks
    during development, such as serving, building, bundling, updating, and testing
    an Angular project. As the name implies, it uses the command line to invoke the
    `ng` executable file and run commands using the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, `[command]` is the name of the command to be executed, and `[options]`
    denotes additional parameters that can be passed to each command. To view all
    available commands, you can run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Some commands can be invoked using an alias instead of the name. In this book,
    we cover the most common ones (the alias of each command is shown inside parentheses):'
  prefs: []
  type: TYPE_NORMAL
- en: '`new` ( `n` ): Creates a new Angular CLI workspace from scratch'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`build` ( `b` ): Compiles an Angular application and outputs generated files
    in a predefined folder'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`generate` ( `g` ): Creates new files that comprise an Angular application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`serve` ( `dev` ): Builds an Angular application and serves it using a pre-configured
    web server'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`test` ( `t` ): Runs the unit tests of an Angular application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`add` : Installs an Angular library in an Angular application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`update` : Updates an Angular application to the latest Angular version'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can find more Angular CLI commands at [https://angular.dev/cli](https://angular.dev/cli)
    .
  prefs: []
  type: TYPE_NORMAL
- en: Updating an Angular application is one of the most critical tasks from the preceding
    list. It helps us stay up to date by upgrading our Angular applications to the
    latest version.
  prefs: []
  type: TYPE_NORMAL
- en: Try to keep your Angular projects up to date because each new version of Angular
    comes packed with many exciting new features, performance improvements, and bug
    fixes.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, you can use the Angular upgrade guide, which contains tips and
    step-by-step instructions on updating your applications, at [https://angular.dev/update-guide](https://angular.dev/update-guide)
    .
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we have prepared our development environment, we can start creating
    our first Angular application. We will use the `ng new` command of the Angular
    CLI and pass the name of the application that we want to create as an option:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a terminal window, navigate to a folder of your choice, and run the command
    `ng new my-app` . Creating a new Angular application is a straightforward process.
    The Angular CLI will ask for details about the application we want to create so
    that it can scaffold the Angular project as best as possible.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Initially, it will ask if we want to enable Angular analytics:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The Angular CLI will ask this question once when we create the first Angular
    project and apply it globally in our system. However, we can change the setting
    later in a specific Angular workspace.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next question is related to the styling of our application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: It is common to use CSS to style Angular applications. However, we can use preprocessors
    like **SCSS** or **Less** to add value to our development workflow. In this book,
    we work with CSS directly, so accept the default choice, `CSS` , and press *Enter*
    .
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, the Angular CLI will prompt us if we want to enable SSR and **Static
    Site Generation** ( **SSG** ) in our application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: SSR and SSG are concerned with improving the startup and load performance of
    an Angular application. We will learn more about them in *Chapter 15* , *Optimizing
    Application Performance* . For now, accept the default choice, `No` , by pressing
    *Enter* .
  prefs: []
  type: TYPE_NORMAL
- en: The process may take some time, depending on your internet connection. During
    this time, the Angular CLI downloads and installs all necessary packages and creates
    default files for your Angular application. When finished, it will have created
    a folder called `my-app` . The folder represents an Angular CLI workspace that
    contains a single Angular application called `my-app` at the root level.
  prefs: []
  type: TYPE_NORMAL
- en: 'The workspace contains various folders and configuration files that the Angular
    CLI needs to build and test the Angular application:'
  prefs: []
  type: TYPE_NORMAL
- en: '`.vscode` : Includes VSCode configuration files'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`node_modules` : Includes installed npm packages that are needed to develop
    and run the Angular application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`public` : Contains static assets such as fonts, images, and icons'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`src` : Contains the source files of the application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.editorconfig` : Defines coding styles for the default editor'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.gitignore` : Specifies the files and folders that Git should not track'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`angular.json` : The main configuration file of the Angular CLI workspace'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`package.json` and `package-lock.json` : Provide definitions of npm packages,
    along with their exact versions, which are needed to develop, test, and run the
    Angular application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`README.md` : A README file that is automatically generated from the Angular
    CLI'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tsconfig.app.json` : A TypeScript configuration that is specific to the Angular
    application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tsconfig.json` : A TypeScript configuration that is specific to the Angular
    CLI workspace'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tsconfig.spec.json` : A TypeScript configuration that is specific to unit
    tests of the Angular application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As developers, we should only care about writing the source code that implements
    features for our application. Nevertheless, having basic knowledge of how the
    application is orchestrated and configured helps us better understand the mechanics
    and ways to intervene if necessary.
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to the newly created folder and start your application with the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Remember that any Angular CLI command must be run inside an Angular CLI workspace
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: The Angular CLI compiles the Angular project and starts a web server that watches
    for changes in project files. This way, whenever you change your application code,
    the web server rebuilds the project to reflect the new changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'After compilation has been completed successfully, you can preview the application
    by opening your browser and navigating to `http://localhost:4200` :'
  prefs: []
  type: TYPE_NORMAL
- en: '![Εικόνα που περιέχει κείμενο, στιγμιότυπο οθόνης, γραμματοσειρά  Περιγραφή
    που δημιουργήθηκε αυτόματα](img/B21418_01_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.1: Angular application landing page'
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! You have created your first Angular CLI workspace. The Angular
    CLI created a sample web page that we can use as a reference to build our project.
    In the next section, we will explore the main parts of our application and learn
    how to modify this page.
  prefs: []
  type: TYPE_NORMAL
- en: The structure of an Angular application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will take the first intrepid steps in examining our Angular application.
    The Angular CLI has already scaffolded our project and done much of the heavy
    lifting for us. All we need to do is fire up our favorite IDE and start working
    with the Angular project. We will use VSCode in this book, but feel free to choose
    any editor you are comfortable with:'
  prefs: []
  type: TYPE_NORMAL
- en: Open VSCode and select **File** | **Open Folder…** from the main menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the `my-app` folder and select it. VSCode will load the associated
    Angular CLI workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Expand the `src` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When we develop an Angular application, we’ll likely interact with the `src`
    folder. It is where we write the code and tests of our application. It contains
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`app` : All the Angular-related files of the application. You interact with
    this folder most of the time during development.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`index.html` : The main HTML page of the Angular application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`main.ts` : The main entry point of the Angular application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`styles.css` : CSS styles that apply globally to the Angular application. The
    extension of this file depends on the stylesheet format you choose when creating
    the application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `app` folder contains the actual source code we write for our application.
    Developers spend most of their time inside that folder. The Angular application
    that was created automatically from the Angular CLI contains the following files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`app.component.css` : Contains CSS styles specific to the sample page. The
    extension of this file depends on the stylesheet format you choose when creating
    the application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`app.component.html` : Contains the HTML content of the sample page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`app.component.spec.ts` : Contains unit tests for the sample page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`app.component.ts` : Defines the *presentational logic* of the sample page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`app.config.ts` : Defines the configuration of the Angular application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`app.routes.ts` : Defines the routing configuration of the Angular application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The filename extension `.ts` refers to TypeScript files.
  prefs: []
  type: TYPE_NORMAL
- en: In the following sections, we will learn how Angular orchestrates some of those
    files to display the sample page of the application.
  prefs: []
  type: TYPE_NORMAL
- en: Components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The files whose names start with `app.component` constitute an **Angular component**
    . A component in Angular controls part of a web page by orchestrating the interaction
    of the presentational logic with the HTML content of the page, called a **template**
    .
  prefs: []
  type: TYPE_NORMAL
- en: 'Each Angular application has a main HTML file, named `index.html` , that exists
    inside the `src` folder and contains the following `<body>` HTML element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The `<app-root>` tag is used to identify the main component of the application
    and acts as a container to display its HTML content. It instructs Angular to render
    the template of the main component inside that tag. We will learn how it works
    in *Chapter 3* , *Structuring User Interfaces with Components* .
  prefs: []
  type: TYPE_NORMAL
- en: When the Angular CLI builds an Angular application, it parses the `index.html`
    file and identifies HTML tags inside the `<body>` element. An Angular application
    is always rendered inside the `<body>` element and comprises a tree of components.
    When the Angular CLI finds a tag that is not a known HTML element, such as `<app-root>`
    , it starts searching through the components of the application tree. But how
    does it know where to start?
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrapping
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The startup method of an Angular application is called **bootstrapping** ,
    and it is defined in the `main.ts` file inside the `src` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The main task of the bootstrapping file is to define the component that will
    be loaded at application startup. It calls the `bootstrapApplication` method,
    passing `AppComponent` as a parameter to specify the starting component of the
    application. It also passes the `appConfig` object as a second parameter to specify
    the configuration that will be used in the application startup. The application
    configuration is described in the `app.config.ts` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The `appConfig` object contains a `providers` property to define services provided
    throughout the Angular application. We will learn more about services in *Chapter
    5* , *Managing Complex Tasks with Services* .
  prefs: []
  type: TYPE_NORMAL
- en: 'A new Angular CLI application provides routing services by default. Routing
    is related to in-app navigation between different components using the browser
    URL. It is activated using the `provideRouter` method, passing a `routes` object,
    called **route configuration** , as a parameter. The route configuration of the
    application is defined in the `app.routes.ts` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Our application does not have a route configuration yet, as indicated by the
    empty `routes` array. We will learn how to set up routing and configure it in
    *Chapter 9* , *Navigating through Applications with Routing* .
  prefs: []
  type: TYPE_NORMAL
- en: Template syntax
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we have taken a brief overview of our sample application, it’s time
    to start interacting with the source code:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command in a terminal window to start the application if
    it is not running already:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you are working with VSCode, it is preferable to use its integrated terminal,
    which is accessible from the **Terminal** | **New Terminal** option in the main
    menu.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the application with your browser at `http://localhost:4200` , and notice
    the text below the Angular logo that reads **Hello, my-app** . The word **my-app**
    , which corresponds to the application name, comes from a variable declared in
    the TypeScript file of the main component. Open the `app.component.ts` file and
    locate the `title` variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `title` variable is a **component property** that is used in the component
    template.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `app.component.html` file and go to line 228:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `title` property is surrounded by double curly braces syntax called **interpolation**
    , which is part of the Angular template syntax. In a nutshell, interpolation converts
    the value of the `title` property to text and prints it on the page.
  prefs: []
  type: TYPE_NORMAL
- en: Angular uses specific template syntax to extend and enrich the standard HTML
    syntax in the application template. We will learn more about the Angular template
    syntax in *Chapter 3* , *Structuring User Interfaces with Components* .
  prefs: []
  type: TYPE_NORMAL
- en: 'Change the value of the `title` property in the `AppComponent` class to `World`
    , save the changes, wait for the application to reload, and examine the output
    in the browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Εικόνα που περιέχει κείμενο, γραμματοσειρά, γραφικά, λογότυπο  Περιγραφή
    που δημιουργήθηκε αυτόματα](img/B21418_01_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.2: Landing page title'
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! You have successfully interacted with the source code of your
    application.
  prefs: []
  type: TYPE_NORMAL
- en: By now, you should have a basic understanding of how Angular works and what
    the basic parts of an Angular application are. As a reader, you have had to absorb
    a lot of information so far. However, you will get a chance to get more acquainted
    with the components in the upcoming chapters. For now, the focus is to get you
    up and running, by giving you a powerful tool like the Angular CLI and showing
    you how only a few steps are needed to display an application on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: Angular tooling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One of the reasons that the Angular framework is popular among developers is
    the rich ecosystem of available tools. The Angular community has built amazing
    tools to complete and automate various tasks, such as debugging, inspecting, and
    authoring Angular applications:'
  prefs: []
  type: TYPE_NORMAL
- en: Angular DevTools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VSCode Debugger
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VSCode Profiles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will learn how to use each in the following sections, starting with Angular
    DevTools.
  prefs: []
  type: TYPE_NORMAL
- en: Angular DevTools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Angular DevTools is a browser extension created and maintained by the Angular
    team. It allows us to inspect and profile Angular applications directly in the
    browser. It is currently supported by Google Chrome and Mozilla Firefox and can
    be downloaded from the following browser stores:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Google Chrome: [https://chrome.google.com/webstore/detail/angular-developer-tools/ienfalfjdbdpebioblfackkekamfmbnh](https://chrome.google.com/webstore/detail/angular-developer-tools/ienfalfjdbdpebioblfackkekamfmbnh
    )'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Mozilla Firefox: [https://addons.mozilla.org/firefox/addon/angular-devtools](https://addons.mozilla.org/firefox/addon/angular-devtools
    )'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To open the extension, open the browser developer tools and select the **Angular**
    tab. It contains three additional tabs:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Components** : Displays the component tree of the Angular application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Profiler** : Allows us to profile and inspect the Angular application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Injector Tree** : Displays the services provided by the Angular application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this chapter, we will explore how to use the **Components** tab. We will
    learn how to use the **Profiler** tab in *Chapter 3* , *Structuring User Interfaces
    with Components* , and the **Injector Tree** tab in *Chapter 5* , *Managing Complex
    Tasks with Services* .
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Components** tab allows us to preview the components and directives of
    an Angular application and interact with them. If we select a component from the
    tree representation, we can view its properties and metadata:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Εικόνα που περιέχει κείμενο, στιγμιότυπο οθόνης, γραμματοσειρά, αριθμός  Περιγραφή
    που δημιουργήθηκε αυτόματα](img/B21418_01_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.3: Component preview'
  prefs: []
  type: TYPE_NORMAL
- en: 'From the **Components** tab, we can also look up the respective HTML element
    in the DOM or navigate to the actual source code of the component or directive.
    Clicking the **< >** button will take us to the TypeScript file of the current
    component:'
  prefs: []
  type: TYPE_NORMAL
- en: '![img](img/B21418_01_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.4: TypeScript source file'
  prefs: []
  type: TYPE_NORMAL
- en: 'Double-clicking a selector from the tree representation of the **Components**
    tab will navigate us to the DOM of the main page and highlight the individual
    HTML element:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Εικόνα που περιέχει κείμενο, στιγμιότυπο οθόνης, γραμματοσειρά, αριθμός  Περιγραφή
    που δημιουργήθηκε αυτόματα](img/B21418_01_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.5: Main page DOM'
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, one of the most useful features of the component tree is that we can
    alter the value of a component property and inspect how the component template
    behaves:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Εικόνα που περιέχει κείμενο, στιγμιότυπο οθόνης, γραμματοσειρά, γραμμή  Περιγραφή
    που δημιουργήθηκε αυτόματα](img/B21418_01_06_A.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.6: Change component state'
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding image, you can see that when we changed the value of the **title**
    property to `Angular World` , the change was also reflected in the component template.
  prefs: []
  type: TYPE_NORMAL
- en: VSCode Debugger
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can debug an Angular application using standard debugging techniques for
    web applications or the tooling that VSCode provides out of the box.
  prefs: []
  type: TYPE_NORMAL
- en: The `console` object is the most commonly used web API for debugging. It is
    a very fast way to print data and inspect values in the browser console. To inspect
    the value of an object in an Angular component, we can use the `debug` or `log`
    method, passing the object we want to inspect as a parameter. However, it is considered
    an old-fashioned approach, and a codebase with many `console.log` methods is difficult
    to read. An alternate way is to use **breakpoints** inside the source code using
    the VSCode debug menu.
  prefs: []
  type: TYPE_NORMAL
- en: VSCode is an open-source code editor backed by Microsoft. It is very popular
    in the Angular community, primarily because of its robust support for TypeScript.
    TypeScript has been, to a great extent, a project driven by Microsoft, so it makes
    sense that one of its popular editors was conceived with built-in support for
    this language. It contains a rich collection of useful features, including syntax,
    error highlighting, automatic builds, and debugging.
  prefs: []
  type: TYPE_NORMAL
- en: VSCode contains a built-in debugging tool that uses breakpoints to debug Angular
    applications. We can add breakpoints inside the source code from VSCode and inspect
    the state of an Angular application. When an Angular application runs and hits
    a breakpoint, it will pause and wait. During that time, we can investigate and
    inspect several values involved in the current execution context.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see how to add breakpoints to our sample application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `app.component.ts` file and click on the left of line 11 to add a
    breakpoint. A red dot denotes breakpoints:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Εικόνα που περιέχει κείμενο, στιγμιότυπο οθόνης, γραμματοσειρά, αριθμός  Περιγραφή
    που δημιουργήθηκε αυτόματα](img/B21418_01_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.7: Adding a breakpoint'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Run and Debug** button in the left sidebar of VSCode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the play button to start the application using the **ng serve** command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![img](img/B21418_01_08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.8: Run and debug menu'
  prefs: []
  type: TYPE_NORMAL
- en: 'VSCode will build our application, open the default web browser, and hit the
    breakpoint inside the editor:'
  prefs: []
  type: TYPE_NORMAL
- en: '![img](img/B21418_01_09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.9: Hitting a breakpoint'
  prefs: []
  type: TYPE_NORMAL
- en: We can now inspect various aspects of our component and use the buttons in the
    debugger toolbar to control the debugging session.
  prefs: []
  type: TYPE_NORMAL
- en: Another powerful feature of VSCode is **VSCode Profiles** , which help developers
    customize VSCode according to their development needs.
  prefs: []
  type: TYPE_NORMAL
- en: VSCode Profiles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'VSCode Profiles allows us to customize the following aspects of the VSCode
    editor:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Settings** : The configuration settings of VSCode'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Keyboard shortcuts** : Shortcuts to execute VSCode commands with the keyboard'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Snippets** : Reusable template code snippets'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tasks** : Tasks that automate the execution of scripts and tools directly
    from VSCode'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Extensions** : Tools that enable us to add new capabilities in VSCode, such
    as languages, debuggers, and linters'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Profiles can also be shared, which helps us maintain a consistent development
    setup and workflow across our team. VSCode contains a set of built-in profiles,
    including one for Angular, that we can further customize according to our development
    needs. To install the Angular profile:'
  prefs: []
  type: TYPE_NORMAL
- en: Click the **Manage** button represented by the gear icon at the bottom of the
    left sidebar in VSCode and select the **Profiles** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the arrow of the **New Profile** button and select the **From Template**
    | **Angular** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the gear button if you want to select a custom icon for your profile.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Create** button to create your profile.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: VSCode will automatically apply the new profile after it has been created successfully.
  prefs: []
  type: TYPE_NORMAL
- en: In the following sections, we will explore some of the extensions in the VSCode
    Angular profile.
  prefs: []
  type: TYPE_NORMAL
- en: Angular Language Service
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The **Angular Language Service** extension is developed and maintained by the
    Angular team and provides code completion, navigation, and error detection inside
    Angular templates. It enriches VSCode with the following features:'
  prefs: []
  type: TYPE_NORMAL
- en: Code completion
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A go-to definition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Quick info
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Diagnostic messages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To get a glimpse of its powerful capabilities, let’s look at the code completion
    feature. Suppose we want to display a new property called `description` in the
    template of the main component. We can set this up by going through the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Define the new property in the `app.component.ts` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `app.component.html` file and add the property name in the template
    using Angular interpolation syntax. The Angular Language Service will find it
    and suggest it for us automatically:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![img](img/B21418_01_10.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.10: Angular Language Service'
  prefs: []
  type: TYPE_NORMAL
- en: The `description` property is a *public* property. We can omit the keyword `public`
    when using public properties and methods. Code completion does not work for private
    properties and methods. If the property had been declared `private` , then the
    Angular Language Service and the template would not have been able to recognize
    it.
  prefs: []
  type: TYPE_NORMAL
- en: 'You may have noticed that a red line appeared instantly underneath the HTML
    element as you typed. The Angular Language Service did not recognize the property
    until you typed it correctly and gave you a proper indication of this lack of
    recognition. If you hover over the red indication, it displays a complete information
    message about what went wrong:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Εικόνα που περιέχει κείμενο, γραμματοσειρά, γραμμή, στιγμιότυπο οθόνης  Περιγραφή
    που δημιουργήθηκε αυτόματα](img/B21418_01_11.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.11: Error handling in the template'
  prefs: []
  type: TYPE_NORMAL
- en: The preceding information message comes from the diagnostic messages feature.
    The Angular Language Service supports various messages according to the use case.
    You will encounter more of these messages as you work more with Angular.
  prefs: []
  type: TYPE_NORMAL
- en: Material Icon Theme
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'VSCode has a built-in set of icons to display different types of files in a
    project. The Material Icon Theme extension provides additional icons that conform
    to the Material Design guidelines by Google; a subset of this collection targets
    Angular-based artifacts:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Εικόνα που περιέχει κείμενο, στιγμιότυπο οθόνης, γραμματοσειρά  Περιγραφή
    που δημιουργήθηκε αυτόματα](img/B21418_01_12.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.12: Material Icon Theme'
  prefs: []
  type: TYPE_NORMAL
- en: Using this extension, you can easily spot the type of Angular files in a project,
    such as components, and increase developer productivity, especially in large projects
    with many files.
  prefs: []
  type: TYPE_NORMAL
- en: EditorConfig
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'VSCode editor settings, such as indentation or spacing, can be set at a user
    or project level. **EditorConfig** can override these settings using the `.editorconfig`
    configuration file, which can be found in the root folder of an Angular CLI project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: You can define unique settings in this file to ensure the consistency of the
    coding style across your team.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: That’s it! Your journey into the world of Angular has just begun. Let’s recap
    the features that you have learned so far. We learned what Angular is, looked
    over the brief history of the framework, and examined the benefits of using it
    for web development.
  prefs: []
  type: TYPE_NORMAL
- en: We saw how to set up our development workspace and find the tools to bring TypeScript
    into the game. We introduced the Angular CLI tool, the Swiss army knife for Angular,
    which automates specific development tasks. We used some of the most common commands
    to scaffold our first Angular application. We also examined the structure of our
    application and learned how to interact with it.
  prefs: []
  type: TYPE_NORMAL
- en: Our first application gave us a basic understanding of how Angular works internally
    to render our application on a web page. We embarked on our journey, starting
    with the main HTML file of an Angular application. We saw how Angular parses that
    file and starts searching the component tree to load the main component. We learned
    the process of Angular bootstrapping and how it is used to load the application
    configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we met some of the most important Angular tools that could empower
    you as a software developer. We explored how to use Angular DevTools to inspect
    Angular applications and VSCode Debugger for debugging. We also examined VSCode
    Profiles and how it can help us maintain a consistent development environment
    across our team.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn some of the basics of the TypeScript language.
    The chapter will cover what problems can be solved by introducing types and the
    language itself. TypeScript, as a superset of JavaScript, contains a lot of powerful
    concepts and marries well with the Angular framework, as you are about to discover.
  prefs: []
  type: TYPE_NORMAL
- en: Join us on Discord
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Join our community’s Discord space for discussions with the author and other
    readers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/LearningAngular5e](https://packt.link/LearningAngular5e)'
  prefs: []
  type: TYPE_NORMAL
- en: '![img](img/QR_Code1314413148229661500.png)'
  prefs: []
  type: TYPE_IMG
