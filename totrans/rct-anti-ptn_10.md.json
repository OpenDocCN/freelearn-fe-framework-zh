["```js\nconst report = (content: string) => {\n  const header = \"=== Header ===\";\n  const footer = \"=== Footer ===\";\n  return [header, content, footer].join(\"\\n\");\n};\n```", "```js\n=== Header ===\nhello world\n=== Footer ===\n```", "```js\nconst report = (content: string, transformer: (s: string) => string) => {\n  const header = \"=== Header ===\";\n  const footer = \"=== Footer ===\";\n  return [header, transformer(content), footer].join(\"\\n\");\n};\n```", "```js\nconst report = (\n  content: string,\n  transformer: (s: string) => string = (s) => s\n) => {\n  const header = \"=== Header ===\";\n  const footer = \"=== Footer ===\";\n  return [header, transformer(content), footer].join(\"\\n\");\n};\n```", "```js\nconst checkAuthorization = () => {\n    // Perform authorization check, e.g., check local storage or send \n        a request to a remote server\n}\nconst withAuthorization = (Component: React.FC): React.FC => {\n  return (props: any) => {\n    const isAuthorized = checkAuthorization();\n    return isAuthorized ? <Component {...props} /> : <Login />;\n  };\n};\n```", "```js\nconst Profile = withAuthorization(ProfileComponent);\n```", "```js\nexport type PanelProps = {\n  heading: string;\n  content: ReactNode;\n};\nconst ExpandablePanel = ({ heading, content }: PanelProps) => {\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n  return (\n    <article>\n      <header onClick={() => setIsOpen((isOpen) => \n       !isOpen)}>{heading}</header>\n      {isOpen && <section>{content}</section>}\n    </article>\n  );\n};\n```", "```js\nconst AutoCloseExpandablePanel = ({ heading, content }: PanelProps) => {\n  const [isOpen, setIsOpen] = useState<boolean>(true);\n  useEffect(() => {\n    const id = setTimeout(() => {\n      setIsOpen(false);\n    }, 3000);\n    return () => {\n      clearTimeout(id);\n    };\n  }, []);\n  return (\n    <article>\n      <header onClick={() => setIsOpen((isOpen) => \n       !isOpen)}>{heading}</header>\n      {isOpen && <section>{content}</section>}\n    </article>\n  );\n};\n```", "```js\ninterface Toggleable {\n  isOpen: boolean;\n  toggle: () => void;\n}\nconst withAutoClose = <T extends Partial<Toggleable>>(\n  Component: React.FC<T>,\n  duration: number = 2000\n) => (props: T) => {\n  const [show, setShow] = useState<boolean>(true);\n  useEffect(() => {\n    if (show) {\n      const timerId = setTimeout(() => setShow(false), duration);\n      return () => clearTimeout(timerId);\n    }\n  }, [show]);\n  return (\n    <Component\n      {…props}\n      isOpen={show}\n      toggle={() => setShow((show) => !show)}\n    />\n  );\n};\n```", "```js\ntype PanelProps = {\n  heading: string;\n  content: ReactNode;\n}  & Partial<Toggleable>;\n```", "```js\nconst ExpandablePanel = ({\n  isOpen,\n  toggle,\n  heading,\n  content,\n}: PanelProps) => {\n  return (\n    <article>\n      <header onClick={toggle}>{heading}</header>\n      {isOpen && <section>{content}</section>}\n    </article>\n  );\n};\n```", "```js\nexport default withAutoClose(ExpandablePanel, 3000);\n```", "```js\nconst AutoDismissToast = withAutoClose(Toast, 3000);\nconst TimedTooltip = withAutoClose(Tooltip, 3000);\n```", "```js\nconst noop = () => {};\nconst withKeyboardToggle =\n  <T extends Partial<Toggleable>>(Component: React.FC<T>) =>\n  (props: T) => {\n    const divRef = useRef<HTMLDivElement>(null);\n    const handleKeyDown = (event: KeyboardEvent<HTMLDivElement>) => {\n      if (event.key === \"Enter\" || event.key === \" \") {\n        event.preventDefault();\n        (props.toggle ?? noop)();\n      }\n      if (event.key === \"Escape\" && divRef.current) {\n        divRef.current.blur();\n      }\n    };\n    return (\n      <div onKeyDown={handleKeyDown} tabIndex={0} ref={divRef}>\n        <Component {...props} />\n      </div>\n    );\n  };\nexport default withKeyboardToggle;\n```", "```js\nconst AccessibleAutoClosePanel = withAutoClose(withKeyboardToggle(ExpandablePanel), 2000);\n```", "```js\nconst useAutoClose = (duration: number) => {\n  const [isOpen, setIsOpen] = useState<boolean>(true);\n  useEffect(() => {\n    if (isOpen) {\n      const timerId = setTimeout(() => setIsOpen(false), duration);\n      return () => clearTimeout(timerId);\n    }\n  }, [duration, isOpen]);\n  const toggle = () => setIsOpen((show) => !show);\n  return { isOpen, toggle };\n};\nexport default useAutoClose;\n```", "```js\nconst ExpandablePanel = ({ heading, content }: PanelProps) => {\n  const { isOpen, toggle } = useAutoClose(2000);\n  return (\n    <article>\n      <header onClick={toggle}>{heading}</header>\n      {isOpen && <section>{content}</section>}\n    </article>\n  );\n};\n```", "```js\nconst useKeyboard = (toggle: () => void) => {\n  const handleKeyDown = (event: KeyboardEvent) => {\n    if (event.key === \"Enter\" || event.key === \" \") {\n      event.preventDefault();\n      toggle();\n    }\n  };\n  return { handleKeyDown };\n};\n```", "```js\nconst ExpandablePanel = ({ heading, content }: PanelProps) => {\n  const { isOpen, toggle } = useAutoClose(2000);\n  const { handleKeyDown } = useKeyboard(toggle);\n  return (\n    <article onKeyDown={handleKeyDown} tabIndex={0}>\n      <header onClick={toggle}>{heading}</header>\n      {isOpen && <section>{content}</section>}\n    </article>\n  );\n};\n```", "```js\n//...\n  const [loading, setLoading] = useState<boolean>(false);\n  const [data, setData] = useState<Item[] | null>(null);\n  const [error, setError] = useState<Error | undefined>(undefined);\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n      try {\n        const response = await fetch(\"/api/users\");\n        if (!response.ok) {\n          const error = await response.json();\n          throw new Error(`Error: ${error.error || response.status}`);\n        }\n        const data = await response.json();\n        setData(data);\n      } catch (e) {\n        setError(e as Error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, []);\n//...\n```", "```js\nconst fetchUsers = async () => {\n  const response = await fetch(\"/api/users\");\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error('Something went wrong');\n  }\n  return await response.json();\n};\n```", "```js\nconst useService = <T>(fetch: () => Promise<T>) => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [data, setData] = useState<T | null>(null);\n  const [error, setError] = useState<Error | undefined>(undefined);\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n      try {\n        const data = await fetch();\n        setData(data);\n      } catch(e) {\n        setError(e as Error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, [fetch]);\n  return {\n    loading,\n    error,\n    data,\n  };\n}\n```", "```js\nconst { loading, error, data } = useService(fetchProducts);\n//or\nconst { loading, error, data } = useService(fetchTickets);\n```", "```js\nimport { useState } from \"react\";\ninterface Item {\n  icon: string;\n  text: string;\n  id: string;\n  description: string;\n}\ntype DropdownProps = {\n  items: Item[];\n};\nconst Dropdown = ({ items }: DropdownProps) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [selectedItem, setSelectedItem] = useState<Item | null>(null);\n  return (\n    <div className=\"dropdown\">\n      <div className=\"trigger\" tabIndex={0} onClick={() => \n       setIsOpen(!isOpen)}>\n        <span className=\"selection\">\n          {selectedItem ? selectedItem.text : \"Select an item...\"}\n        </span>\n      </div>\n      {isOpen && (\n        <div className=\"dropdown-menu\">\n          {items.map((item) => (\n            <div\n              key={item.id}\n              onClick={() => setSelectedItem(item)}\n              className=\"item-container\"\n            >\n              <img src={item.icon} alt={item.text} />\n              <div className=\"details\">\n                <div>{item.text}</div>\n                <small>{item.description}</small>\n              </div>\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n```", "```js\nconst Trigger = ({\n  label,\n  onClick,\n}: {\n  label: string;\n  onClick: () => void;\n}) => {\n  return (\n    <div className=\"trigger\" tabIndex={0} onClick={onClick}>\n      <span className=\"selection\">{label}</span>\n    </div>\n  );\n};\n```", "```js\nconst DropdownMenu = ({\n  items,\n  onItemClick,\n}: {\n  items: Item[];\n  onItemClick: (item: Item) => void;\n}) => {\n  return (\n    <div className=\"dropdown-menu\">\n      {items.map((item) => (\n        <div\n          key={item.id}\n          onClick={() => onItemClick(item)}\n          className=\"item-container\"\n        >\n          <img src={item.icon} alt={item.text} />\n          <div className=\"details\">\n            <div>{item.text}</div>\n            <small>{item.description}</small>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n```", "```js\nconst Dropdown = ({ items }: DropdownProps) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [selectedItem, setSelectedItem] = useState<Item | null>(null);\n  return (\n    <div className=\"dropdown\">\n      <Trigger\n        label={selectedItem ? selectedItem.text : \"Select an item...\"}\n        onClick={() => setIsOpen(!isOpen)}\n      />\n      {isOpen && <DropdownMenu items={items} \n       onItemClick={setSelectedItem} />}\n    </div>\n  );\n};\n```", "```js\nconst Dropdown = ({ items }: DropdownProps) => {\n  // ... previous state variables ...\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    switch (e.key) {\n      // ... case blocks ...\n    }\n  };\n  return (\n    <div className=\"dropdown\" onKeyDown={handleKeyDown}>\n      {/* ... rest of the JSX ... */}\n    </div>\n  );\n};\n```", "```js\nconst DropdownMenu = ({\n  items,\n  selectedIndex,\n  onItemClick,\n}: {\n  items: Item[];\n  selectedIndex: number;\n  onItemClick: (item: Item) => void;\n}) => {\n  return (\n    <div className=\"dropdown-menu\" role=\"listbox\">\n      {/* ... rest of the JSX ... */}\n    </div>\n  );\n};\n```", "```js\nconst useDropdown = (items: Item[]) => {\n  // ... state variables ...\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    // ... switch statement ...\n  };\n  const toggleDropdown = () => setIsOpen((isOpen) => !isOpen);\n  return {\n    isOpen,\n    toggleDropdown,\n    handleKeyDown,\n    selectedItem,\n    setSelectedItem,\n    selectedIndex,\n  };\n};\n```", "```js\nconst Dropdown = ({ items }: DropdownProps) => {\n  const {\n    isOpen,\n    selectedItem,\n    selectedIndex,\n    toggleDropdown,\n    handleKeyDown,\n    setSelectedItem,\n  } = useDropdown(items);\n  return (\n    <div className=\"dropdown\" onKeyDown={handleKeyDown}>\n      <Trigger\n        onClick={toggleDropdown}\n        label={selectedItem ? selectedItem.text : \"Select an item...\"}\n      />\n      {isOpen && (\n        <DropdownMenu\n          items={items}\n          onItemClick={setSelectedItem}\n          selectedIndex={selectedIndex}\n        />\n      )}\n    </div>\n  );\n};\n```", "```js\nconst Dropdown = () => {\n  const { data, loading, error } = useService(fetchUsers);\n  const {\n    toggleDropdown,\n    dropdownRef,\n    isOpen,\n    selectedItem,\n    selectedIndex,\n    updateSelectedItem,\n    getAriaAttributes,\n  } = useDropdown<Item>(data || []);\n  const renderContent = useCallback(() => {\n    if (loading) return <Loading />;\n    if (error) return <Error />;\n    if (data) {\n      return (\n        <DropdownMenu\n          items={data}\n          updateSelectedItem={updateSelectedItem}\n          selectedIndex={selectedIndex}\n        />\n      );\n    }\n    return null;\n  }, [loading, error, data, updateSelectedItem, selectedIndex]);\n  return (\n    <div\n      className=\"dropdown\"\n      ref={dropdownRef as RefObject<HTMLDivElement>}\n      {...getAriaAttributes()}\n    >\n      <Trigger\n        onClick={toggleDropdown}\n        text={selectedItem ? selectedItem.text : \"Select an item...\"}\n      />\n      {isOpen && renderContent()}\n    </div>\n  );\n};\n```", "```js\nfunction useDropdownLogic() {\n  // ... all the dropdown logic\n  return {\n    // ... exposed logic\n  };\n}\nfunction MyDropdown() {\n  const dropdownLogic = useDropdownLogic();\n  return (\n    // ... render the UI using the logic from dropdownLogic\n  );\n}\n```"]