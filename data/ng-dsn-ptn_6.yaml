- en: Performance Patterns
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 性能模式
- en: In the previous chapter, we investigated stability patterns. Stability patterns
    are here for your application so that it can survive bugs. It is ludicrous to
    expect applications to be shipped without any bugs, and trying to achieve this
    will wear your team out. Instead, we learned how to live with it and made sure
    that our application is resilient enough to live through bugs. In this chapter,
    we will focus on performance patterns and anti-patterns. These patterns define
    architectures and practices that significantly affect the performance of your
    application in a positive or negative way.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们调查了稳定性模式。稳定性模式是为了使您的应用程序能够在出现错误时生存下来。期望应用程序在没有任何错误的情况下发货是荒谬的，而试图实现这一点将使您的团队筋疲力尽。相反，我们学会了如何与之共存，并确保我们的应用程序足够弹性，可以经受住错误。在本章中，我们将专注于性能模式和反模式。这些模式定义了架构和实践，对您的应用程序的性能产生积极或消极的影响。
- en: 'In detail, we will learn about the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，我们将学习以下内容：
- en: AJAX overkill
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AJAX过度使用
- en: Unbound result sets
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无限结果集
- en: Proxy
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代理
- en: Filters and Pipes
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过滤器和管道
- en: Loops
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 循环
- en: Change detection
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变更检测
- en: Immutability
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不可变性
- en: Prototype and the reusable pool
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 原型和可重用池
- en: AJAX overkill
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AJAX过度使用
- en: If your application is a bit more than a throwaway prototype or a glorified
    one-pager, you are likely dealing with remote APIs. These remotes APIs, in turn,
    are communicating with a backend layer (for example, PHP, Ruby, or Golang) and
    databases (for example, MySQL, MS SQL, or Oracle).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的应用程序不仅仅是一个一次性的原型或一个华丽的单页应用程序，那么您可能正在处理远程API。这些远程API又在与后端层（例如PHP、Ruby或Golang）和数据库（例如MySQL、MS
    SQL或Oracle）进行通信。
- en: While this book focuses on *Angular* application, we cannot ignore the fact
    that they do not usually exist by themselves. Indeed, any meaningful application
    will need to pull and push data from/to somewhere.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然本书侧重于*Angular*应用程序，但我们不能忽视它们通常不会单独存在的事实。事实上，任何有意义的应用程序都需要从某个地方拉取和推送数据。
- en: With that in mind, let's imagine that your application is some sort of frontend
    for an online e-commerce site such as Amazon. This made-up application would certainly
    have a profile page where your users can see their past and ongoing commands.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到这一点，让我们想象一下，您的应用程序是某种在线电子商务网站（如亚马逊）的前端。这个虚构的应用程序肯定会有一个个人资料页面，用户可以在其中查看他们的过去和正在进行的命令。
- en: 'Let''s further specify our application by imagining that your APIs, endpoints
    are specified as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们进一步指定我们的应用程序，假设您的API，端点如下所示：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This returns the orders of logged-in users.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回已登录用户的订单。
- en: 'Here is an example of a JSON return call:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个JSON返回调用的示例：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: For the sake of clarity and brevity, we will assume that our users are magically
    authenticated and that their authorization to access given API endpoints is magical
    as well.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 为了清晰和简洁起见，我们将假设我们的用户被神奇地认证，并且他们访问特定API端点的授权也是神奇的。
- en: 'For each command, you have access to a `GET` /`command_details` API where,
    for a given ID, you can retrieve the details of the command:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个命令，您可以访问一个`GET` /`command_details` API，在其中，您可以检索给定ID的命令的详细信息：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The Angular side of things could be a simple expansion panel that''s implemented
    using the expansion panel of the Google Material Design components suite as shown
    in the following screenshot:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在Angular方面，可以是一个简单的扩展面板，使用Google Material Design组件套件的扩展面板实现，如下面的屏幕截图所示：
- en: '![](assets/5f2d0dda-baa9-4314-8de2-0c40b3e25fa4.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5f2d0dda-baa9-4314-8de2-0c40b3e25fa4.png)'
- en: We could also add a `GET` /`items_details` that returns the details of an item,
    but let's stop here for now.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以添加一个`GET` /`items_details`，返回项目的详细信息，但现在让我们暂停在这里。
- en: Now, let's assume that every API call takes 100 ms to complete and another 10
    ms for transforming the JSON into TypeScript objects. An experienced developer
    would certainly first fetch all the commands of the given user and pre-fetch the
    details of each command so that the user will not have to wait when a given panel
    is expanded. If our APIs can handle 100 requests per second, which is respectable,
    then we could only serve nine clients per second, assuming that they each have
    ten commands. Nine clients per second don't sound impressive...
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们假设每个API调用需要100毫秒才能完成，另外需要10毫秒来将JSON转换为TypeScript对象。有经验的开发人员肯定会首先获取给定用户的所有命令，并预先获取每个命令的细节，这样用户在展开给定面板时就不必等待。如果我们的API能够处理每秒100个请求，这是令人尊敬的，那么我们每秒只能为九个客户提供服务，假设他们每个人都有十个命令。每秒只能为九个客户提供服务听起来并不令人印象深刻...
- en: Indeed, 10 clients hitting the *order resume*page at once will cost us 1/10 of
    our capacity and provoke an additional 100 calls (10 clients × 10 commands). Consequently,
    the 10^(th) client will not be served during the first second. It may not sound
    that alarming, however, we are only talking about 10 users.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，同时点击*订单简历*页面的10个客户将耗费我们1/10的容量，并引发额外的100次调用（10个客户×10个命令）。因此，第十个客户在第一秒内将得不到服务。这可能听起来并不那么令人担忧，但是，我们只谈论了10个用户。
- en: This effect is known as the AJAX overkill performance anti-pattern. As a frontend
    developer, I have access to APIs that fulfill my every need, and I use them to
    make my clients happy. However, pre loading every detail of every command, and
    potentially every detail of every item, is a terrible idea. You put unnecessary
    stress on your backend architecture on the off chance that your customer wants
    to access the details of the last commands immediately.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这种效果被称为AJAX过度性能反模式。作为前端开发人员，我可以访问满足我所有需求的API，并且我使用它们来让我的客户满意。然而，预加载每个命令的每个细节，甚至可能是每个项目的每个细节，都是一个糟糕的主意。你会在后端架构上施加不必要的压力，只是因为你的客户可能想立即访问最后命令的细节。
- en: For the sake of your backend infrastructure, it might be worth it to only request
    the details of the commands when the user actually wants to see them.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 出于后端基础设施的考虑，当用户真正想要查看命令的详细信息时，只请求命令的细节可能是值得的。
- en: This goes hand in hand with unbound APIs. Once again, the backend architecture
    is not within the scope of this book, however, if we were to talk about the performance
    of Angular applications, we would have to mention it. If you have control over
    the APIs you consume, then make sure that they expose some sort of pagination
    and that you use it properly.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这与无限制的API密切相关。再次强调，后端架构不在本书的范围内，但是，如果我们要谈论Angular应用程序的性能，我们就必须提到它。如果你能控制你使用的API，那么确保它们暴露出某种分页，并且你要正确地使用它。
- en: Proxy patterns
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代理模式
- en: Continuing our investigation into unbounded APIs and AJAX overkill, in the previous
    recipe, we established that both should be avoided, but the solution to this was
    to make APIs change in case the APIs were not paginated. This assumes that you
    have access to these APIs or to someone who has. While this is a reasonable assumption
    to make, it will not hold true in all cases.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们对无限制的API和AJAX过度的调查中，我们在前一篇文章中确定了两者都应该避免，但是解决这个问题的方法是使API在API没有分页的情况下发生变化。这假设你能访问这些API或者能够找到有这种访问权限的人。虽然这是一个合理的假设，但并非在所有情况下都成立。
- en: What can we do, besides not making requests (obviously), to preserve those poorly
    designed and out-of-control APIs? Well, an elegant way to resolve this problem
    would be to use the proxy pattern. The proxy pattern is used to control access
    to an object. You surely know that the web proxy can control access to web pages
    given a user's credentials. In this recipe, we will not talk about the web proxy,
    but the objected-oriented proxy. In the object-oriented proxy, we do not control
    so much the access to the object regarding security, but regarding features.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 除了不发出请求（显然），我们还能做什么来保护那些设计不良且失控的API？嗯，解决这个问题的一个优雅方式是使用代理模式。代理模式用于控制对对象的访问。您肯定知道Web代理可以根据用户的凭据控制对网页的访问。在这个示例中，我们不会讨论Web代理，而是面向对象的代理。在面向对象的代理中，我们不太关心对象的安全访问，而是关心功能访问。
- en: As an example, an image manipulation software is to list and display high-resolution
    photo objects that are in a folder, but users will not always visualize all the
    images in the given folder. Consequently, some images will have been loaded for
    nothing.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，图像处理软件要列出并显示文件夹中的高分辨率照片对象，但用户并不总是会查看给定文件夹中的所有图像。因此，一些图像将会被无谓地加载。
- en: 'How does that relate to our API problem, though? Using the proxy pattern, we
    can control at which time we actually want to perform our API request, while keeping
    our collection of commands neat and tidy. First, let''s have a look at the proxy
    UML:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这与我们的API问题有什么关系呢？使用代理模式，我们可以控制我们实际想要执行API请求的时间，同时保持我们的命令集合整洁有序。首先，让我们看一下代理UML：
- en: '![](assets/2f6547fa-c386-4fdf-b702-83c66c3bf60a.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2f6547fa-c386-4fdf-b702-83c66c3bf60a.png)'
- en: First, we have the `Subject` interface that defines the `doOperation()` method.
    This interface is implemented by the `Proxy` and `RealSubject` classes. The `Proxy`
    class contains a reference to a `realSubject` class, which will be populated at
    the right time. What could it look like for our purposes?
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们有一个定义`doOperation()`方法的`Subject`接口。这个接口由`Proxy`和`RealSubject`类实现。`Proxy`类包含对`realSubject`类的引用，该引用将在适当的时候填充。对于我们的目的，它可能是什么样子呢？
- en: 'First, we have a simple interface named `OnlineCommand`:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们有一个名为`OnlineCommand`的简单接口：
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In this interface, the only method is defined: `fetchItems()`. This method
    returns the items contained in the command.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个接口中，只定义了一个方法：`fetchItems()`。这个方法返回命令中包含的项目。
- en: 'Then, our component has an array of commands that represent the commands of
    our customer:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们的组件有一个代表我们客户命令的命令数组：
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In this short component, we only have the commands of our customer in addition
    to what makes an Angular component a component.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个简短的组件中，我们只有我们客户的命令，以及使Angular组件成为组件的内容。
- en: 'For the HTML part, we simply iterate over the collection of commands and, on
    click, call the `fetchItems` function:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 对于HTML部分，我们只需遍历命令集合，并在点击时调用`fetchItems`函数：
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Then, we have the `RealCommand` class that implements the `OnlineCommand` interface:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们有一个实现`OnlineCommand`接口的`RealCommand`类：
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The last piece of the puzzle, albeit the most important one, is the proxyfied
    version of the online command:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 谜题的最后一部分，尽管是最重要的一部分，是在线命令的代理版本：
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As discussed previously, the proxyfied version of the online command contains
    a reference to a real command that, for all intents and purposes, is our actual
    command. The point here is that the costly operation is the feature we only want
    to access when we really need to. On the HTML side, everything is elegantly hidden
    behind the encapsulation. On the TypeScript side, we only perform the call when
    the user requests the details and not before.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，在线命令的代理版本包含对实际命令的引用，实际上就是我们的实际命令。关键在于，昂贵的操作是我们只在真正需要时才想要访问的功能。在 HTML 方面，一切都优雅地隐藏在封装后。在
    TypeScript 方面，我们只在用户请求详细信息时才执行调用，而不是之前。
- en: Loop count
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 循环计数
- en: Web applications of any kind are often filled with loops. It could be a loop
    on products for *Amazon.com*, a loop on your transactions for your bank website,
    a loop on your phone calls for your phone carrier website, and so on. Worst of
    all, you can have many loops on a page. When these loops iterate over static collections,
    it sure takes time to process when the page is being generated, unless there is
    nothing you can do about it. You can still apply the patterns we saw earlier in
    this chapter to reduce your collection depth and to save on heavy calls made on
    a per-item basis. Where real performance problem arise, however, is when these
    loops are bound to a collection that evolves asynchronously. Indeed, Angular,
    and all frameworks allowing these kinds of bindings for that matter, repaint the
    collection every time it changes. Indeed, it can now show which items inside the
    collection have been modified and how to select them within the DOM. Consequently,
    if you have 1,000 elements in a collection, if one of the elements is modified,
    then the whole collection has to be repainted. In practice, this is quite transparent
    to both the user and the developer. Nevertheless, selecting and updating 1,000
    DOM elements regarding the value of the JavaScript collection is computationally
    expansive.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 任何类型的网络应用程序通常都充满了循环。它可能是 *Amazon.com* 上的产品循环，银行网站上的交易循环，电话运营商网站上的电话循环等等。最糟糕的是，页面上可能有很多循环。当这些循环遍历静态集合时，在生成页面时肯定需要花费时间，除非你无能为力。你仍然可以应用我们在本章前面看到的模式，来减少集合深度，并节省每个项目的大量调用。然而，真正的性能问题出现在这些循环与异步发展的集合绑定时。确实，Angular
    和所有允许这种绑定的框架，每次集合发生变化时都会重新绘制集合。它现在可以显示集合中哪些项目已被修改，以及如何在 DOM 中选择它们。因此，如果集合中有 1,000
    个元素，如果其中一个元素被修改，那么整个集合都必须重新绘制。实际上，这对用户和开发人员来说是相当透明的。然而，根据 JavaScript 集合的值选择和更新
    1,000 个 DOM 元素在计算上是昂贵的。
- en: 'Let''s simulate a collection of books:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们模拟一组书籍：
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The `Book` class is straightforward. It only contains two properties: `id`
    and `title`. In the default app component, we add a list of books and a few methods.
    In the constructor, we populate the books. We also have a refresh method that
    will randomly select a book and update its title. Finally, the `makeid` method
    generates a random string ID that we can use to populate the book title:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`Book` 类很简单。它只包含两个属性：`id` 和 `title`。在默认的应用组件中，我们添加了一系列书籍和一些方法。在构造函数中，我们填充了书籍。我们还有一个刷新方法，它会随机选择一本书并更新其标题。最后，`makeid`
    方法生成一个随机字符串ID，我们可以用它来填充书名：'
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The last piece of our experiment is the HTML template below:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们实验的最后一部分是下面的 HTML 模板：
- en: '[PRE10]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Our book class, the app component, and the `html` template, when put together,
    create the following page:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的书籍类、应用组件和 `html` 模板放在一起，创建了以下页面：
- en: '![](assets/b3862bcb-3535-49a5-a703-69654d994d70.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b3862bcb-3535-49a5-a703-69654d994d70.png)'
- en: 'We have our 10 books and our Refresh button, which is linked to the `refresh`
    function. When pressed, one book will be randomly selected and updated. Now, by
    default, the entire list would have to be recomputed. Of course, the *refresh*
    mechanism is manual here but, in a more realistic scenario, the refresh will be
    asynchronous from a remote API update, for example. To help Angular figure out
    which element has been changed and needs to be refreshed, we can use the `trackBy`
    option of `ngFor` like so:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有我们的10本书和我们的刷新按钮，它链接到`refresh`函数。按下时，将随机选择并更新一本书。现在，默认情况下，整个列表都必须重新计算。当然，这里的*刷新*机制是手动的，但在更现实的情况下，刷新将是异步的，例如来自远程API的更新。为了帮助Angular找出哪个元素已更改并需要刷新，我们可以使用`ngFor`的`trackBy`选项，如下所示：
- en: '[PRE11]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This function helps Angular know how to track our elements in the book collection.
    Now, when the Refresh button is pressed, only the modified element will be recomputed
    and repainted. In other words, only one DOM element will be manipulated. Once
    again, for 10 elements, the difference will not be noticeable. For a few dozen,
    however, one may start to feel the page become a bit sluggish, depending on one''s
    hardware. We can assert that the `trackByFn` function operates as intend by using
    the Chrome development tools. While inspecting the DOM, if you click the Refresh
    button, then only one of the `<li>` markups should light up. DOM elements are
    lighting up when modified. In the following screenshot, you can see that only
    the element at index 6 is being recomputed rather than all the elements of the
    list:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数帮助Angular知道如何跟踪我们书集合中的元素。现在，当按下刷新按钮时，只有修改过的元素将被重新计算和重绘。换句话说，只有一个DOM元素将被操作。再次强调，对于10个元素，差异是不明显的。然而，对于几十个元素，根据硬件的不同，页面可能会变得有点迟缓。我们可以通过使用Chrome开发工具来确认`trackByFn`函数的操作方式。在检查DOM时，如果单击刷新按钮，那么只有一个`<li>`标记会亮起。DOM元素在修改时会亮起。在下面的截图中，您可以看到只有索引6的元素被重新计算，而不是列表中的所有元素：
- en: '![](assets/649968bd-d2da-4677-915e-743005b4079d.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/649968bd-d2da-4677-915e-743005b4079d.png)'
- en: Change detection and immutable states
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 变更检测和不可变状态
- en: The problem we ealluded to in our previous recipe is inherent to any framework
    that maps some sort of view and model. It isn't an Angular particularity. That
    being said, this problem, while exacerbated within loops, also exists in other
    places. To be precise, it exists everywhere we bind everything between our models
    and out the view. In other words, every time we have `{{ myValue }}` somewhere
    in our HTML model, it is a performance hit for our application.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在上一篇文章中提到的问题是任何映射某种视图和模型的框架固有的。这不是Angular的特殊性。也就是说，这个问题虽然在循环中被加剧，但也存在于其他地方。准确地说，它存在于我们的模型和视图之间的每一个绑定的地方。换句话说，每当我们的HTML模型中有`{{
    myValue }}`时，这对我们的应用程序来说都是性能上的打击。
- en: 'So, what is the solution? Stop using binding altogether? Well, that would not
    be very practical, as we would give up on what makes JavaScript attractive in
    the first place. No, the real solution is to make our objects immutable. However,
    to understand why, we need to take a look at how change detection is achieved
    in Angular. Change detection is, as its name suggests, the process that Angular
    performs to detect if anything has changed. If so, the objects are reprocessed
    and repainted to the DOM. The way Angular does this by default is by attaching
    a *watcher* to our models. Watchers watch the model and, for each value bound
    to the view, keeps a few things. It keeps the reference of the bound object, the
    old value of each property of the object, and the new value of each property of
    the object. The old and new values are used when the object is changing state.
    In the book example from the previous section, the watcher for our model would
    have, for each book, its reference, old and new ID, and old and new title. At
    each detection cycle, Angular will check if the old and new properties of the
    object match, as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，解决方案是什么呢？完全停止使用绑定吗？嗯，这并不是非常实际的，因为这样我们就放弃了JavaScript最初的吸引力。不，真正的解决方案是使我们的对象不可变。然而，要理解为什么需要这样做，我们需要看一下Angular是如何实现变更检测的。变更检测就像它的名字所暗示的那样，是Angular执行的用于检测是否有任何变化的过程。如果有变化，对象将被重新处理并重新绘制到DOM中。Angular默认的做法是将一个*watcher*附加到我们的模型上。观察者会观察模型，并为视图中绑定的每个值保留一些信息。它会保留绑定对象的引用，对象的每个属性的旧值和新值。当对象的状态发生变化时，旧值和新值就会被使用。在上一节的书籍示例中，我们的模型的观察者会为每本书保留其引用、旧ID和新ID，以及旧标题和新标题。在每个检测周期，Angular都会检查对象的旧属性和新属性是否匹配，如下所示：
- en: '[PRE12]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'As usual, taken individually, these actions do not weigh much. However, when
    having hundreds of objects with dozens of mapped properties within your page,
    well, you will feel the performance hit. As I said before, the answer to this
    is immutability. Immutability of objects means that our objects cannot change
    their properties. If we want to change the values displayed in our view, then
    we must change the object altogether. If you follow the principle of immutability,
    then the control flow from before would look like this:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，单独进行这些操作并不会有太大的影响。但是，当页面中有数百个对象，每个对象都有几十个映射属性时，性能就会受到影响。正如我之前所说，解决这个问题的方法就是不可变性。对象的不可变性意味着我们的对象不能改变它们的属性。如果我们想要改变视图中显示的值，那么我们必须整体改变对象。如果你遵循不可变性的原则，那么之前的控制流将如下所示：
- en: '[PRE13]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This saves us a lot of ifs and buts everywhere in our application, but it also
    means that the modification to bound variables in our models such as `book.title
    = "qwerty"` will not be reflected in the view. What we will have to do to make
    this modification visible is feed the view with a new book object. Let''s experiment
    a bit with this new concept. Here''s our HTML template:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这样可以节省我们在应用程序中到处使用的大量条件语句，但这也意味着我们在模型中绑定变量的修改，比如 `book.title = "qwerty"`，不会在视图中反映出来。为了使这种修改可见，我们需要用一个新的书籍对象来更新视图。让我们用这个新概念做一些实验。这是我们的HTML模板：
- en: '[PRE14]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'And here''s our component:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的组件：
- en: '[PRE15]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The book class stays as presented in the previous section. Now, on serving
    this application, you''ll be greeted with the following:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 书籍类保持在上一节中所呈现的状态。现在，在提供此应用程序时，您将会看到以下内容：
- en: '![](assets/42b05852-662d-4166-a3d8-f64162fe9034.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/42b05852-662d-4166-a3d8-f64162fe9034.png)'
- en: 'And pressing the CHANGE button will change the displayed title, as follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 按下“CHANGE”按钮将会改变显示的标题，如下所示：
- en: '![](assets/ae34d832-bc9b-4fd6-b953-4e84b67fa122.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ae34d832-bc9b-4fd6-b953-4e84b67fa122.png)'
- en: 'If we tell Angular that we would prefer to only check if the references have
    changed rather than checking for the values of every property by using the `ChangeDetection.OnPush`
    method, then the button will not have any effect on the view anymore. Indeed,
    the value of the model will have been changed, but the change will not have been
    caught by the change detection algorithm as the reference of the book is still
    the same, as we explained earlier. Consequently, if you do want to propagate your
    changes to the view, you have to change the reference. Here''s what our component
    looks like with all this in mind:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们告诉Angular，我们更希望只检查引用是否发生了变化，而不是通过使用`ChangeDetection.OnPush`方法检查每个属性的值，那么按钮将不再对视图产生任何影响。实际上，模型的值已经发生了变化，但是变化不会被变化检测算法捕捉到，因为书的引用仍然是相同的，正如我们之前解释的那样。因此，如果你确实想要将你的变化传播到视图中，你必须改变引用。考虑到所有这些，我们的组件看起来是这样的：
- en: '[PRE16]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We added `changeDetection: ChangeDetectionStrategy.OnPush` to our component
    and changed the `changeMe` method so that it creates a new book rather than updating
    the old one. Of course, creating a new object is more expensive than updating
    an existing object. However, this technique brings better performance to Angular
    applications because there are infinitely more cycles where nothing changes, but
    the properties of each object are still compared to their old values, than cycles
    where something is actually changed.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '我们向我们的组件添加了`changeDetection: ChangeDetectionStrategy.OnPush`，并修改了`changeMe`方法，使其创建一个新的书，而不是更新旧的书。当然，创建一个新对象比更新现有对象更昂贵。然而，这种技术为Angular应用程序带来了更好的性能，因为有无数个周期，什么都没有发生，但是每个对象的属性仍然与它们的旧值进行比较，比实际发生变化的周期要多得多。'
- en: With this technique, we significantly improve the performance of our applications
    to the cost of having to think when we want an update to an object to be propagated
    to the view. Note that this also applies to filter and pipe. If your application
    only has a bound value from the model to the view, you might think that it does
    not matter and you could go mutable all the way. You would be right if your application
    indeed only had one bonded value, and this value was never piped or filtered using
    the `{{ myValue | myPipe }}` notation.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种技术，我们显著提高了应用程序的性能，但代价是必须考虑何时希望将对象的更新传播到视图中。请注意，这也适用于过滤器和管道。如果你的应用程序只有一个从模型到视图的绑定值，你可能会认为这并不重要，你可以一路使用可变的方式。如果你的应用程序确实只有一个绑定值，并且这个值从未使用`{{
    myValue | myPipe }}`符号进行管道或过滤，那么你是对的。
- en: Indeed, each pipe is treated asynchronously by our application. In fact, if
    you have 100 calls to `myPipe`, you are effectively creating the equivalent of
    100 watchers that watch the value of `myValue` and will apply your pipe to it.
    It makes sense because your pipe cannot know what's coming its way and cannot
    anticipate that the results of its computation will be identical for the 100 calls.
    Consequently, it watches and executes as many times as needed. If you find yourself
    with a template filled with a pipe invocation that returns all the same values,
    you are better off creating a dummy component with that value as input or storing
    the transformed value in your model altogether.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，每个管道都是由我们的应用程序异步处理的。实际上，如果你调用了100次`myPipe`，你实际上创建了相当于100个观察者来观察`myValue`的值，并将你的管道应用到它。这是有道理的，因为你的管道无法知道它将要处理什么，并且无法预料到其计算结果对于这100次调用来说是相同的。因此，它会根据需要观察和执行多次。如果你发现自己的模板中充满了返回相同值的管道调用，最好是创建一个带有该值作为输入的虚拟组件，或者完全将转换后的值存储在你的模型中。
- en: Prototype and the reusable pool
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 原型和可重用池
- en: Object-oriented developers look at ways to reduce the cost of creating objects
    – especially when those objects are expensive to create because they require,
    for example, a database pull or complex mathematical operations. Another reason
    to invest in reducing the creation cost of a particular object is when you create
    a lot of them. Nowadays, backend developers tend to disregard this aspect of optimization
    as on-demand CPU/memory have become cheap and easy to adjust. It'll literally
    cost you a few bucks more a month to have an additional core or 256 MB of RAM
    on your backend.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 面向对象的开发人员寻找减少创建对象成本的方法-特别是当这些对象因为需要数据库拉取或复杂的数学运算而昂贵时。减少特定对象创建成本的另一个原因是当你创建大量对象时。如今，后端开发人员倾向于忽视优化的这一方面，因为按需的CPU/内存已经变得便宜且易于调整。每月多花几美元就可以在后端拥有额外的核心或256
    MB的RAM。
- en: 'This used to be a big deal for desktop application developers too. On a client
    desktop, there is no way to add CPU/RAM on demand, but fairly cadenced quad cores
    and a ridiculous amount of RAM for a consumer PC made the issue less problematic.
    Nowadays, only games and intensive analytics solutions developers seem to care.
    So, why should you care about the creation time of your object after all? Well,
    you are building something that is likely to be accessed from old devices (I still
    use an iPad 1 for casual browsing in the kitchen or on the couch). While desktop
    application developers can publish minimum and recommended configurations – and
    enforce them by refusing to install them themselves – we, as web developers, don''t
    have this luxury. Now, if your website doesn''t behave properly, users won''t
    question their machines, but your skills... Ultimately, they won''t use your products,
    even when on a capable machine. Let''s see how to use the `Prototype` design pattern.
    First, we''ll need a `Prototype` interface like so:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于桌面应用程序开发人员来说曾经也是一个大问题。在客户端桌面上，没有办法按需添加CPU/RAM，但是相当节奏的四核处理器和消费级PC上可怕的大量RAM使这个问题变得不那么棘手。如今，似乎只有游戏和密集的分析解决方案开发人员才关心这个问题。那么，毕竟为什么你应该关心对象的创建时间呢？嗯，你正在构建的东西很可能会被旧设备访问（我仍然在厨房或沙发上使用iPad
    1进行休闲浏览）。虽然桌面应用程序开发人员可以发布最低和推荐配置，并通过拒绝安装它们来强制执行它们，但是作为Web开发人员，我们没有这种奢侈。现在，如果你的网站表现不佳，用户不会质疑他们的设备，而是质疑你的技能...最终，即使在一台性能强大的机器上，他们也不会使用你的产品。让我们看看如何使用“原型”设计模式。首先，我们需要一个“原型”接口，如下所示：
- en: '[PRE17]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The `Prototype` interface only defines the`clone` method that returns a `Prototype`-compliant
    object. You''ve guessed it, the optimized way of creating objects is to clone
    them when needed! So, let''s say you have an object called `Movie` that, for some
    reasons, takes time to build:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: “原型”接口只定义了返回符合“原型”标准的对象的“克隆”方法。你已经猜到了，创建对象的优化方式是在需要时克隆它们！所以，假设你有一个名为“电影”的对象，由于某些原因，需要花费时间来构建：
- en: '[PRE18]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'As you can see, the way we override functions in TypeScript is different from
    most languages. Here, the two signatures of the constructor are on top of each
    other and share the same implementation. And that''s it for the `Prototype` pattern.
    One another pattern that often goes with the `Prototype` pattern is the object
    pool pattern. While working with expensive-to-create objects, cloning them sure
    makes a difference. A bigger difference would be to not do anything at all: no
    creation, no cloning. To achieve this, we can use the pool pattern. In this pattern,
    we have a pool of objects ready to be shared by any clients or components in the
    case of an Angular 2 application. The pool implementation is simple:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，TypeScript中覆盖函数的方式与大多数语言不同。在这里，构造函数的两个签名位于彼此之上，并共享相同的实现。这就是`Prototype`模式的全部内容。另一个经常与`Prototype`模式一起使用的模式是对象池模式。在处理昂贵的创建对象时，克隆它们确实会产生巨大的差异。更大的差异是根本不做任何事情：不创建，不克隆。为了实现这一点，我们可以使用池模式。在这种模式中，我们有一组对象池，可以被任何客户端或组件共享，特别是在Angular
    2应用程序的情况下。池的实现很简单：
- en: '[PRE20]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'First and foremost, the pool is also a singleton. Indeed, it wouldn''t make
    much sense to have this costly object reusable design if anyone can create pools
    at will. Consequently, we have the static `instance:MoviePool` and the private
    constructor to ensure that only one pool can be created. Then, we have the following
    attribute: `private static movies:[{movie:Movie, used:boolean}] = [];`.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，这个池也是一个单例。实际上，如果任何人都可以随意创建池，那么这种昂贵的可重用设计就没有多大意义。因此，我们有静态属性`instance:MoviePool`和私有构造函数，以确保只能创建一个池。然后，我们有以下属性：`private
    static movies:[{movie:Movie, used:boolean}] = [];`。
- en: The `movies` attribute stores a collection of movies and a boolean that determines
    if anyone is currently using any given movie. As the movie objects are hypothetically
    taxing to create or maintain in memory, it makes sense to have a hard limit on
    how many such objects we can have in our pool. This limit is managed by the private
    static `nbMaxMovie = 10;` attribute. To obtain movies, components would have to
    call the `getMovie():Movie` method. This method does a hard create on the first
    movie and then leverages the `Prototype` pattern to create any subsequent movie.
    Every time a movie is checked out of the pool, the `getMovie` method changes the
    `used` boolean to true. Note that, in the case where the pool is full and we don't
    have any free movies to give away, an error is thrown.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`movies`属性存储了一系列电影和一个布尔值，用于确定当前是否有人在使用任何给定的电影。由于假设电影对象在内存中创建或维护是很耗费资源的，因此有必要对我们的对象池中可以拥有多少这样的对象进行硬性限制。这个限制由私有静态属性`nbMaxMovie
    = 10;`来管理。要获取电影，组件必须调用`getMovie():Movie`方法。这个方法在第一部电影上进行硬性创建，然后利用`Prototype`模式来创建任何后续的电影。每当从池中取出一部电影时，`getMovie`方法会将`used`布尔值更改为true。需要注意的是，在池满了并且没有空闲电影可供分配的情况下，会抛出错误。'
- en: Finally, components need a way to check their movies back to the pool so that
    others can use them. This is achieved by the `releaseMovie` method. This method
    receives a hypothetically checked-out movie, and iterates over the movies of the
    pool to set them, according to the boolean, to false. Hence, the movie becomes
    usable for other components.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，组件需要一种方法来将他们的电影归还给池，以便其他人可以使用它们。这是通过`releaseMovie`方法实现的。这个方法接收一个假设已经取出的电影，并遍历池中的电影，根据布尔值将它们设置为false。因此，电影对其他组件变得可用。
- en: Summary
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned how to avoid major performance pitfalls in our *Angular*
    application by limiting our AJAX call, and with the proxy design pattern. We also
    learned how to control the undesirable effects of our loops performance-wise.
    We then took a dive into the change detection process of Angular to make it work
    nicely with immutable objects for the times where our object count gets too high.
    Finally, we also learned about the prototype and reusable pool pattern, which
    can help in reducing the footprint of our application regarding required resources.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何通过限制我们的AJAX调用和代理设计模式来避免在*Angular*应用程序中遇到主要性能问题。我们还学习了如何在性能方面控制循环的不良影响。然后，我们深入研究了Angular的变更检测过程，以使其与不可变对象很好地配合，以应对对象数量过高的情况。最后，我们还学习了关于原型和可重用池模式，这可以帮助减少应用程序所需资源的占用空间。
- en: In the next chapter, we will learn about operations patterns for our Angular
    application. Operations patterns are patterns that help in monitoring and diagnosing
    live applications.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习关于我们Angular应用程序的操作模式。操作模式是帮助监视和诊断实时应用程序的模式。
