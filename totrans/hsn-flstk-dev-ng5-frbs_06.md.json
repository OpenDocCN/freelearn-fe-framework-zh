["```js\n<div *ngFor=\"let friend of friends\" class=\"card\">\n    <img class=\"card-img-top\"  src={{friend.image}} \n     alt=\"Card image cap\">\n    <div class=\"card-block\">\n        <h4 class=\"card-title\">{{friend.name}}</h4>\n        <p class=\"card-text\">{{friend.email}} | {{friend.mobile}}</p>\n    </div>\n    <div class=\"card-footer\">\n        <small class=\"text-muted\">Friends from {{friend.time | \n         friendsdate}}</small>\n    </div>\n</div>\n```", "```js\n<div *ngIf=\"isLeftVisible\" (click)=\"onLeft()\" class=\"left\"></div>\n```", "```js\n<div class=\"main_container\">\n    <div *ngIf=\"friends\" class=\"content_container\">\n        <div *ngIf=\"isLeftVisible\" (click)=\"onLeft()\" class=\"left\">\n            <img src=\"img/left.png\">\n        </div>\n        <div class=\"card-deck list\">\n            <div *ngFor=\"let friend of friends\" class=\"card\">\n                <img class=\"card-img-top\"  src={{friend.image}} \n                 alt=\"Card image cap\">\n                <div class=\"card-block\">\n                    <h4 class=\"card-title\">{{friend.name}}</h4>\n                    <p class=\"card-text\">{{friend.email}} | \n                     {{friend.mobile}}</p>\n                </div>\n                <div class=\"card-footer\">\n                    <small class=\"text-muted\">Friends from \n                     {{friend.time | friendsdate}}</small>\n                </div>\n            </div>\n        </div>\n        <div *ngIf=\"isRightVisible\" (click)=\"onRight()\" class=\"right\">\n            <img src=\"img/right.png\">\n        </div>\n    </div>\n    <div *ngIf=\"!friends || friends.length === 0\" \n     class=\"no_info_container\">\n        <h1>No friends in your list</h1>\n    </div>\n</div>\n```", "```js\n.main_container {\n    margin-top: 10px;\n    margin-left: 80px;\n    .content_container {\n        display: inline;\n        .list {\n            float: left;\n            .card-img-top {\n                height: 180px;\n                width: 260px;\n                background-image: \n                url('../../../assets/images/person.png');\n            }\n        }\n\n        .left {\n            float: left;\n            margin-top: 140px;\n        }\n\n        .right {\n            float: left;\n            margin-top: 140px;\n        }\n    }\n}\n```", "```js\nexport class Friend {\n\n   name: string;\n\n   mobile: string;\n\n   email: string;\n\n   uid: string;\n\n   time: string;\n\n   image: string;\n\n   constructor(name: string,\n            mobile: string,\n            email: string,\n            uid: string,\n            time: string,\n            image: string) {\n      this.name = name;\n      this.mobile = mobile;\n      this.email = email;\n      this.uid = uid;\n      this.time = time;\n      this.image = image;\n\n   }\n\n}\n```", "```js\ngetFirstPage(uid: string, pageSize: number): Observable<Friend[]> \n{\n  return this.fireDb.list<Friend> \n  (`${USER_DETAILS_CHILD}/${FRIENDS_CHILD}/${uid}`,\n    ref => ref.limitToFirst(pageSize)\n  ).valueChanges();\n}\n```", "```js\nloadNextPage(uid: string, friendKey: string, pageSize: number): Observable<Friend[]> {\n  return this.fireDb.list<Friend>\n  (`${USER_DETAILS_CHILD}/${FRIENDS_CHILD}/${uid}`,\n    ref => ref.orderByKey().startAt(friendKey)\n           .limitToFirst(pageSize + 1)\n  ).valueChanges();\n}\n```", "```js\nloadPreviousPage(uid: string, friendKey: string, pageSize: number): Observable<Friend[]> {\n  return this.fireDb.list<Friend>\n  (`${USER_DETAILS_CHILD}/${FRIENDS_CHILD}/${uid}`,\n    ref => ref.orderByKey().startAt(friendKey)\n           .limitToLast(pageSize + 1)\n  ).valueChanges();\n}\n```", "```js\nimport {Injectable} from '@angular/core';\nimport {AngularFireDatabase} from 'angularfire2/database';\nimport {Observable} from 'rxjs/Observable';\nimport 'rxjs/add/operator/map';\nimport {Friend} from './friend';\nimport {FRIENDS_CHILD, USER_DETAILS_CHILD} from './database-constants';\n\n/**\n * Friends service\n *\n */\n@Injectable()\nexport class FriendsService {\n\n    /**\n     * Constructor\n     *\n     * @param {AngularFireDatabase} fireDb provides \n       the functionality related to authentication\n     */\n    constructor(private fireDb: AngularFireDatabase) {\n    }\n\n    getFirstPage(uid: string, pageSize: number): Observable<Friend[]> \n{\n        return this.fireDb.list<Friend>\n        (`${USER_DETAILS_CHILD}/${FRIENDS_CHILD}/${uid}`,\n            ref => ref.limitToFirst(pageSize)\n        ).valueChanges();\n    }\n\n    loadNextPage(uid: string, friendKey: string, pageSize: number): \n    Observable<Friend[]> {\n        return this.fireDb.list<Friend>\n        (`${USER_DETAILS_CHILD}/${FRIENDS_CHILD}/${uid}`,\n            ref => \n            ref.orderByKey().startAt(friendKey)\n            .limitToFirst(pageSize + 1)\n        ).valueChanges();\n    }\n\n    loadPreviousPage(uid: string, friendKey: string, pageSize: number): \n    Observable<Friend[]> {\n        return this.fireDb.list<Friend>\n       (`${USER_DETAILS_CHILD}/${FRIENDS_CHILD}/${uid}`,\n            ref => \n            ref.orderByKey().startAt(friendKey)\n            .limitToLast(pageSize + 1)\n        ).valueChanges();\n    }\n}\n```", "```js\nngOnInit() {\n    this.user = this.userService.getSavedUser().getValue();\n    this.friendService.getFirstPage(this.user.getUid() , this.pageSize)\n        .subscribe(friends => {\n            this.friends = friends;\n            ...\n        });\n}\n```", "```js\nnext() {\n    this.friendService.loadNextPage(this.user.getUid() ,\n        this.friends[this.friends.length - 1].getUid(),\n        this.pageSize\n    ).subscribe(friends => {\n        this.friends = friends;\n        ...\n    });\n\n}\n```", "```js\nprivate friendcount: number\n```", "```js\nngOnInit() {\n        this.user = this.userService.getSavedUser().getValue();\n        this.totalCount = this.user.getFriendcount();\n        this.friendService.getFirstPage(this.user.getUid() , \n        this.pageSize)\n            .subscribe(friends => {\n                ...\n                let count: number = this.friends.length;\n                this.currentCount = count;\n                this.leftArrowVisible();\n                this.rightArrowVisible();\n            });\n    }\n```", "```js\nleftArrowVisible(): void{\n    this.isLeftVisible = this.currentCount > this.pageSize;\n}\n\nrightArrowVisible(): void{\n    this.isRightVisible = this.totalCount > this.currentCount;\n}\n```", "```js\nimport {Component, OnInit} from '@angular/core';\nimport {FriendsService} from '../../services/friends.service';\nimport {Friend} from '../../services/friend';\nimport {UserService} from '../../services/user.service';\nimport {User} from '../../services/user';\nimport 'firebase/storage';\nimport {Router} from '@angular/router';\n\n@Component({\n  selector: 'app-friends-userfriends',\n  styleUrls: ['user-friends.component.scss'],\n  templateUrl: 'user-friends.component.html'\n})\nexport class UserFriendsComponent implements OnInit {\n\n  friends: Friend[];\n\n  totalCount: number;\n\n  pageSize = 3;\n\n  currentCount = 0;\n\n  previousCount = 0;\n\n  isLeftVisible = false;\n\n  isRightVisible = true;\n\n  user: User;\n\n  constructor(private friendService: FriendsService,\n              private userService: UserService) {\n  }\n\n  ngOnInit() {\n    this.user = this.userService.getSavedUser().getValue();\n    this.totalCount = this.user.friendcount;\n    this.friendService.getFirstPage(this.user.uid, this.pageSize)\n      .subscribe(friends => {\n        this.friends = friends;\n        const count: number = this.friends.length;\n        this.currentCount = count;\n        this.leftArrowVisible();\n        this.rightArrowVisible();\n      });\n  }\n\n  onLeft(): void {\n    this.previous();\n  }\n\n  onRight(): void {\n    this.next();\n  }\n\n  next() {\n    this.friendService.loadNextPage(this.user.uid,\n      this.friends[this.friends.length - 1].uid,\n      this.pageSize\n    ).subscribe(friends => {\n      this.friends = friends;\n      const count: number = this.friends.length;\n      this.previousCount = count - 1;\n      this.currentCount += this.previousCount;\n      this.leftArrowVisible();\n      this.rightArrowVisible();\n    });\n\n  }\n\n  previous() {\n    this.friendService.loadPreviousPage(this.user.uid,\n      this.friends[0].uid,\n      this.pageSize\n    ).subscribe(friends => {\n      this.friends = friends;\n      const count: number = this.friends.length;\n      this.currentCount -= this.previousCount;\n      this.leftArrowVisible();\n      this.rightArrowVisible();\n    });\n\n  }\n\n  leftArrowVisible(): void {\n    this.isLeftVisible = this.currentCount > this.pageSize;\n  }\n\n  rightArrowVisible(): void {\n    this.isRightVisible = this.totalCount > this.currentCount;\n  }\n\n}\n```", "```js\nimport * as moment from 'moment';\nimport {Pipe, PipeTransform} from '@angular/core';\n\n/**\n * It is used to format the date\n */\n@Pipe({\n  name: 'friendsdate'\n})\nexport class FriendsDatePipe implements PipeTransform {\n  transform(dateInMillis: string) {\n    if (dateInMillis === '0' || dateInMillis === '-1') {\n      return 'Invalid Date';\n    }\n    return moment(dateInMillis, 'x').format('MM/DD/YY');\n  }\n}\n```", "```js\n@NgModule({\n    imports: [\n        ...\n    ],\n    declarations: [\n        ...\n        FriendsDatePipe\n    ]\n})\nexport class UserModule {\n}\n```", "```js\n<div class=\"card-footer\">\n    <small class=\"text-muted\">Friends from {{friend.getTime() | friendsdate}}</small>\n</div>\n```"]