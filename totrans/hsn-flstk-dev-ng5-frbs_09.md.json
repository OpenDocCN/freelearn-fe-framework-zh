["```js\nexport const ROUTES: Routes = [\n    { path: 'app-friends-chat/:id', component: ChatComponent }\n];\n```", "```js\n<div *ngFor=\"let friend of friends\" class=\"card\" [routerLink]=\"['/app-friends-chat' , friend.getUid()]\"></div>\n```", "```js\n<div *ngFor=\"let friend of friends\" class=\"card\">\n    ...\n        <button (click)=\"onChat(friend.uid)\" class=\"btn btn-outline-\n         success my-2 my-sm-0\" type=\"submit\">Chat</button>\n    </div>\n    ...\n</div>\n```", "```js\nonChat(id: string): void {\n    this.router.navigate(['/app-friends-chat' , id]);\n}\n```", "```js\nimport {Component} from '@angular/core';\nimport {ActivatedRoute} from '@angular/router';\n\n@Component({\n    selector: 'friends-chat',\n    styleUrls: ['chat.component.scss'],\n    templateUrl: 'chat.component.html',\n})\nexport class ChatComponent {\n\n    uid: string;\n\n    private sub: any;\n\n    constructor(private route: ActivatedRoute) {\n\n    }\n\n    ngOnInit() {\n        this.sub = this.route.params.subscribe(params => {\n            this.uid = params['id'];\n        });\n    }\n\n    ngOnDestroy() {\n        this.sub.unsubscribe();\n    }\n}\n```", "```js\nchat-message-list.component.ts:\n```", "```js\nexport class ChatMessageListComponent implements OnInit , AfterViewChecked{\n    @Input() friendUid: string;\n\n}\nchat-message-form.component.ts file:\n```", "```js\nexport class ChatMessageFormComponent implements OnInit {\n  @Input() friendUid: string;\n```", "```js\n<div class=\"col-md-8 col-md-offset-2\">\n    <app-chat-message-list [friendUid]=\"uid\">\n    </app-chat-message-list>\n    <app-chat-message-form [friendUid]=\"uid\">\n    </app-chat-message-form>\n</div>\n```", "```js\nconst key = this.fireDb.createPushId();\n```", "```js\nfreshlyCreateChatIDEntry(uid: string, friendUid: string): string {\n  const key = this.fireDb.createPushId();\n  this.fireDb.object(`${USER_DETAILS_CHILD}/${CHAT_MESSAGES_CHILD}/${uid}/${friendUid}`).set({key: key});\n  this.fireDb.object(`${USER_DETAILS_CHILD}/${CHAT_MESSAGES_CHILD}/${friendUid}/${uid}`).set({key: key});\n  return key;\n}\n```", "```js\ncreateNewMessage(newMessage: Message) {\n  const messageKey = this.fireDb.createPushId();\n  this.fireDb.object(`${MESSAGE_DETAILS_CHILD}/${this.key}/\n  ${messageKey}`).set(newMessage).catch(error => {\n    console.log(error);\n  });\n}\n```", "```js\nexport class Message {\n\n   message: string;\n\n   senderUid: string;\n\n   receiverUid: string;\n\n   timestamp: number;\n\n   constructor(message: string,\n            senderUid: string,\n            receiverUid: string,\n            timestamp: number) {\n      this.message = message;\n      this.senderUid = senderUid;\n      this.receiverUid = receiverUid;\n      this.timestamp = timestamp;\n   }\n\n}\n```", "```js\nexport const USER_DETAILS_CHILD = 'user-details';\nexport const CHAT_MESSAGES_CHILD = \"chat_messages\";\nexport const MESSAGE_DETAILS_CHILD = \"message_details\";\n```", "```js\nimport {Injectable} from '@angular/core';\nimport {AngularFireDatabase} from 'angularfire2/database';\nimport {CHAT_MESSAGES_CHILD, MESSAGE_DETAILS_CHILD, USER_DETAILS_CHILD} from './database-constants';\nimport {FirebaseApp} from 'angularfire2';\nimport 'firebase/storage';\nimport {Observable} from 'rxjs/Observable';\nimport {Message} from './message';\n\n/**\n * Messaging service\n *\n */\n@Injectable()\nexport class MessagingService {\n\n  key: string;\n\n  /**\n   * Constructor\n   *\n   * @param {AngularFireDatabase} fireDb provides the functionality \n     related to authentication\n   */\n  constructor(private fireDb: AngularFireDatabase) {\n  }\n\n  isMessagePresent(uid: string, friendUid: string): Observable<any> {\n    return  \n    this.fireDb.object(`${USER_DETAILS_CHILD}/${CHAT_MESSAGES_CHILD}/\n    ${uid}/${friendUid}`).valueChanges();\n  }\n\n  createNewMessage(newMessage: Message) {\n    const messageKey = this.fireDb.createPushId();\n    this.fireDb.object(`${MESSAGE_DETAILS_CHILD}/${this.key}/\n    ${messageKey}`).set(newMessage).catch(error => {\n      console.log(error);\n    });\n  }\n\n  freshlyCreateChatIDEntry(uid: string, friendUid: string): string {\n    const key = this.fireDb.createPushId();\n    this.fireDb.object(`${USER_DETAILS_CHILD}/\n    ${CHAT_MESSAGES_CHILD}/${uid}/${friendUid}`).set({key: key});\n    this.fireDb.object(`${USER_DETAILS_CHILD}/\n    ${CHAT_MESSAGES_CHILD}/${friendUid}/${uid}`).set({key: key});\n    return key;\n  }\n\n  getMessages(key: string): Observable<Message[]> {\n    return this.fireDb.list<Message> \n    (`${MESSAGE_DETAILS_CHILD}/${key}`).valueChanges();\n  }\n\n  setKey(key: string) {\n    this.key = key;\n  }\n}\n```", "```js\nngOnInit() {\n    this.user = this.userService.getSavedUser().getValue();\n    this.messageService.isMessagePresent(this.user.getUid(),  \n    this.friendUid).subscribe(snapshot => {\n        let snapshotValue = snapshot.val();\n        let friend: Friend;\n        if (snapshotValue == null) {\n            console.log(\"Message is empty\");\n            this.key = \n            this.messageService.freshlyCreateChatIDEntry\n            (this.user.getUid(), this.friendUid);\n        } else {\n            this.key = snapshotValue.key;\n        }\n        this.messageService.setKey(this.key);\n        this.subscribeMessages();\n    });\n}\n```", "```js\nsubscribeMessages() {\n    this.messageService.getMessages(this.key)\n        .subscribe(\n            messages => {\n                this.messages = messages;\n            });\n\n}\n```", "```js\nimport {AfterViewChecked, ChangeDetectorRef, Component, ElementRef, Input, OnInit, ViewChild} from '@angular/core';\nimport {MessagingService} from '../../services/messaging.service';\nimport {Message} from '../../services/message';\nimport {UserService} from '../../services/user.service';\nimport {User} from '../../services/user';\n\n@Component({\n   selector: 'app-chat-message-list',\n   styleUrls: ['chat-message-list.component.scss'],\n   templateUrl: 'chat-message-list.component.html'\n})\nexport class ChatMessageListComponent implements OnInit, AfterViewChecked {\n   @Input() friendUid: string;\n   private user: User;\n   messages: Message[];\n   key: string;\n   @ViewChild('scrollContainer') private scrollContainer: \n   ElementRef;\n\n   constructor(private messageService: MessagingService,\n            private userService: UserService,\n            private cdRef: ChangeDetectorRef) {\n   }\n\n   ngOnInit() {\n      this.user = this.userService.getSavedUser().getValue();\n      this.messageService.isMessagePresent(this.user.uid , \n      this.friendUid).subscribe(snapshot => {\n         if (snapshot == null) {\n            console.log('Message is empty');\n            this.key = \n            this.messageService.freshlyCreateChatIDEntry\n            (this.user.uid, this.friendUid);\n         } else {\n            this.key = snapshot.key;\n         }\n         this.messageService.setKey(this.key);\n         this.subscribeMessages();\n      });\n   }\n\n   ngAfterViewChecked() {\n      this.scrollToBottom();\n      this.cdRef.detectChanges();\n   }\n\n   scrollToBottom(): void {\n      try {\n         this.scrollContainer.nativeElement.scrollTop = \n         this.scrollContainer.nativeElement.scrollHeight;\n      } catch (err) {\n         console.log('Error');\n      }\n   }\n\n   subscribeMessages() {\n      this.messageService.getMessages(this.key)\n         .subscribe(\n            messages => {\n               this.messages = messages;\n            });\n\n   }\n\n}\n```", "```js\nsendMessage() {\n   const message: Message = new Message(this.newMessage, \n   this.uid, this.friendUid, Date.now());\n   this.messageService.createNewMessage(message);\n}\n```", "```js\nimport {Component, Input, OnInit} from '@angular/core';\nimport {MessagingService} from '../../services/messaging.service';\nimport {Message} from '../../services/message';\nimport {UserService} from '../../services/user.service';\n\n@Component({\n   selector: 'app-chat-message-form',\n   styleUrls: ['chat-message-form.component.scss'],\n   templateUrl: 'chat-message-form.component.html'\n})\nexport class ChatMessageFormComponent implements OnInit {\n   @Input() friendUid: string;\n\n   uid: string;\n\n   newMessage: string;\n\n   constructor(private messageService: MessagingService,\n            private userService: UserService) {\n   }\n\n   ngOnInit() {\n      this.uid = this.userService.getSavedUser().getValue().uid;\n   }\n\n   sendMessage() {\n      const message: Message = new Message(this.newMessage, \n      this.uid, this.friendUid, Date.now());\n      this.messageService.createNewMessage(message);\n   }\n\n}\n```"]