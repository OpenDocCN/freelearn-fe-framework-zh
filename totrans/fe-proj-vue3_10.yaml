- en: '10'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: State Management with Pinia
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you were introduced to the idea of a *state* and how
    it can be used to synchronize data between multiple components in a Vue application.
    You first saw an example of handling states via event broadcasting and then improved
    upon that by including a simple state library.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you’ll learn about the Pinia project and understand how it
    can help manage complex state interactions in your Vue applications. You’ll learn
    how to install the library and start using it right away.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: What Pinia is
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Pinia
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Pinia to create a store
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding and using getters in your Pinia store
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with Pinia actions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging Pinia in Devtools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are no technical requirements for this chapter outside of the `git` CLI
    that you will have already used by now. You can find this chapter’s source here:
    [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter10](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter10)'
  prefs: []
  type: TYPE_NORMAL
- en: What Pinia is
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Pinia** ([https://pinia.vuejs.org](https://pinia.vuejs.org)) is a state management
    library for Vue.js applications. As you saw in [*Chapter 9*](B18645_09.xhtml#_idTextAnchor407),
    *The State of Vue State Management*, handling data that must be synchronized between
    multiple different components requires some form of management. Pinia helps with
    this by providing a simple method of setting up a central *store* that contains
    your application’s state. Your components make use of this store to ensure they’re
    all using the same information.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Pinia began as an experiment for Vue 3 but evolved to support Vue 2 as well.
    Pinia is now the *recommended* state management library for Vue applications,
    with the venerable Vuex ([https://vuex.vuejs.org/](https://vuex.vuejs.org/)) now
    in maintenance mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.1 – The Pinia website](img/Figure_10.01_B18645.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.1 – The Pinia website
  prefs: []
  type: TYPE_NORMAL
- en: 'Along with state management, using Pinia also provides other benefits, including
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Devtools support via the Vue extension. This extension supports Chrome, Edge,
    and Firefox. There’s also a standalone Electron desktop application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hot Module Replacement** (**HMR**), which lets you edit your store and update
    it in your development environment without needing to reload the entire web page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optional TypeScript support.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Server-Side Rendering** (**SSR**) support.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Plugins to extend Pinia’s functionality.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In general, there’s a few core aspects of Pinia you need to be aware of. Developers
    with previous experience with Vuex will recognize these.
  prefs: []
  type: TYPE_NORMAL
- en: At a high level, a **store** is the combination of the data and logic that needs
    to be shared throughout an application. The **state** of a Pinia application is
    the data of your application’s store. Pinia provides APIs to both read and write
    to this data. **Getters** act much like virtual properties in Vue applications.
    **Actions** let you define custom logic for a store – for example, using an AJAX
    call to validate changes to data before they are committed. While Pinia has more
    to it, these three core concepts will be our focus in this chapter and the meat
    of any use of Pinia.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Pinia
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To use Pinia in a Vue application, you’ve got two ways to add it. First, when
    creating a new Vue application via the standard method (`npm init vue@latest`),
    one of the questions asked will be whether you wish to include Pinia. Simply say
    *Yes* here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.2 – Indicating whether you wish to add Pinia to a new Vue project](img/Figure_10.02_B18645.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.2 – Indicating whether you wish to add Pinia to a new Vue project
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have an existing Vue 3 application, adding support is nearly as easy.
    First, in the project, add Pinia via `npm`: `npm install pinia`. Next, you need
    to include Pinia in the application. Your `main.js` file (located in the `/src`
    directory) will look like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Begin by importing Pinia:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, modify the `createApp` line. We break it out into a few lines so that
    we can inject Pinia:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Now that we’ve been introduced to the basic aspects of Pinia and how to include
    it in a Vue application, let’s start working on our first example.
  prefs: []
  type: TYPE_NORMAL
- en: Using Pinia to create a store
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let’s start using Pinia by demonstrating how to define a store within it and
    then use the state data in an application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new Vue application and enable Pinia, as shown in *Figure 10**.2*.
    This will give you a Vue application with a store already created. You will find
    it under `src/stores/counter.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This simple Pinia file demonstrates all three of the major aspects we defined
    previously – the state, getters, and actions. In this section, we’re only concerned
    with the state. When installed, Pinia defined one piece of data, `counter`, with
    a value of `1`. How can we access this in our application?
  prefs: []
  type: TYPE_NORMAL
- en: 'Switch to the `App.vue` file and remove all the contents. We’re going to greatly
    simplify it. First, let’s define the layout to simply output the value of `counter`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we need to make our store available to the component. We’ll define this
    in a `script` `setup` block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We begin by importing the store. Once imported, we create an instance of the
    store so that it can be used in our template. While not terribly exciting, *Figure
    10**.3* demonstrates how this looks in the browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_10.03_B18645.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.3 – Our store value correctly displayed in the App component
  prefs: []
  type: TYPE_NORMAL
- en: 'To get any benefits from a shared state at all, we need at least one more component.
    In the `components` folder, create a new file, `EditCounter.vue`, and use the
    following short snippet of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'As with the `App.vue` component, we use the `setup` block to import the store
    and create an instance. This time, we use a simple edit field and v-model to bind
    its value to the store’s `counter` value. Return to `App.vue` and edit it to import
    and use the `EditCounter` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we’re getting somewhere. We’ve got one component, `App`, simply rendering
    the shared state, and another, `EditCounter`, which also displays it but in an
    editable fashion. Now, you can edit the value and see it update:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.4 – Multiple components using the same shared state](img/Figure_10.04_B18645.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.4 – Multiple components using the same shared state
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve seen how to install and initialize Pinia, and use a simple store,
    we can create a simple demonstration of it in action.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 10.01 – building a Color Preview app with a shared state
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we’ve seen a simple example of using a shared state with Pinia, let’s
    build a simple application that will use it. Our application will let you use
    sliders to specify the red, green, and blue values of a color. One component will
    be used for the editor and another component will provide a preview.
  prefs: []
  type: TYPE_NORMAL
- en: 'The complete code for this exercise can be found at [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter10/Exercise10.01](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter10/Exercise10.01):'
  prefs: []
  type: TYPE_NORMAL
- en: 'To begin, create a new Vue.js application and ensure Pinia support is selected.
    As prompted, change into the directory, run `npm` install, and then `npm run dev`
    to start the application running. Clear the contents of the `App.vue` component
    and enter the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We begin by importing two components (which we will define next). The template
    portion includes some simple explanatory text and then renders the two components.
    Finally, a bit of CSS is used to display these components in a grid. Note that
    `App.vue` doesn’t make use of the store at all, but our two components will.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s define the child components. We’re going to create them as essentially
    empty so that we can simply test that our application is working. In `src/components`,
    create `RGBEdit.vue`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, create `PreviewColor.vue`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that you can remove the existing components the Vue initialization script
    created. We won’t need those. At this point, you should see the following in your
    browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.5 – The color application starting to come together](img/Figure_10.05_B18645.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.5 – The color application starting to come together
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s define our sites store. In `src/stores`, make a new file (and feel
    free to remove the default one) named `color.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Our store has three state values, each representing part of a color as defined
    in `0`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let’s flesh out our `RGBEdit.vue`. First, we’ll import and create an
    instance of the store:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we’ll edit the template portion to add three `range`-style editing fields.
    This will make it much easier for the user to quickly preview colors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: 'Each `range` control has a min of `0` and a max of `255`, which represents
    the valid range for colors in web applications. Next, we will add a bit of styling
    to control the size of the `label` elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: 'Save this and now confirm in the browser that you have editing controls for
    the color:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.6 – Our application now has controls to edit the color](img/Figure_10.06_B18645.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.6 – Our application now has controls to edit the color
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, we’ve got an editing component, but we need to finish the `preview`
    component. Open `PreviewColor.vue` and first import the store:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE89]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE90]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE91]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In order to render a preview of the color, we need to convert the numerical
    colors to hex, which is how colors are defined on the web. Given that we have
    three numbers in our store, let’s say `100`, `50`, and `100` for red, green, and
    blue respectively, we need to convert them into `#64324`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can write a computed property to handle this translation for us. Edit the
    `script` portion to include computed support and define the following `computed`
    property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: 'Moving on to the `template` section, let’s use this in the display:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that the empty `div` is using the `computed` property to dynamically update
    the background color of the element. One last thing to add is a basic size for
    that `div` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: For the final step, simply play with the application and find a color that looks
    amazing!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.7 – The final version of the color application](img/Figure_10.07_B18645.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.7 – The final version of the color application
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we’ll introduce getters in Pinia and demonstrate how to
    use them.
  prefs: []
  type: TYPE_NORMAL
- en: Adding and using getters in your Pinia store
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As stated earlier, getters in Pinia act just like computed properties. They
    allow you to request a simple value that’s generated by custom logic written in
    a function.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you go back to the original Pinia store created by default, you’ll see it
    had a getter defined:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: The `doubleCount` getter simply takes the current value of `counter` and returns
    the double of it. As demonstrated, getters are automatically passed the current
    state as an argument, which can then be used in whatever logic makes sense in
    your particular getter function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Just like regular values defined in the state, getters can be addressed in
    your components, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: Let’s build upon the last exercise and give this feature a try.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 10.02 – improving the Color Preview app with getters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous exercise, you used Pinia to store the state of a color value
    comprising three components – red, green, and blue. In the application, the `PreviewColor`
    component displayed the `hex` value of the combined color. In this exercise, that
    custom logic will be removed from the component and stored within a getter in
    the store.
  prefs: []
  type: TYPE_NORMAL
- en: The complete code for this exercise can be found at [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter10/Exercise10.02](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter10/Exercise10.02)
  prefs: []
  type: TYPE_NORMAL
- en: 'In the store, `src/stores/color.js`, add a new section for the getter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE98]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE99]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE100]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE101]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE102]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE103]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE104]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE105]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE106]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE107]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE108]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE109]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE110]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE111]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE112]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE113]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE114]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE115]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `hex` getter returns a string, starting with the pound symbol and followed
    by the `hex` values of the RGB numbers. Given that all values are `255` (the color
    white), the result would be `#FFFFFF`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `PreviewColor.vue`, we need to update the code to make use of the getter.
    Remove all the custom code used to translate the various values and simply use
    the getter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE117]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE118]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE119]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE120]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE121]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE122]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE123]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE124]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE125]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE126]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As you can see, the component’s code is much simpler now that the logic has
    moved into the Pinia store, and we get to reuse that logic elsewhere if we expand
    upon the application.
  prefs: []
  type: TYPE_NORMAL
- en: Additional getter features
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before moving on to actions, let’s quickly discuss two additional things you
    can do with getters. The first is creating a getter that makes use of another
    getter. You can do this with arrow functions by simply using a state:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are using regular function syntax, access the store via `this` or via
    a passed-in argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, while getters don’t allow for additional arguments, you can create
    a getter that returns a function itself, not a regular value, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: 'To use this within a component, you would pass a value to `countPlusN`, like
    so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: Note that getters defined in this way will not have any caching applied to them.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve enhanced our store with getters, let’s see how actions further
    add to the flexibility of Pinia.
  prefs: []
  type: TYPE_NORMAL
- en: Working with Pinia actions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Actions are the Pinia equivalent of component methods. They let you define
    custom logic for a store and can be asynchronous as well. This is useful for times
    when server-side logic needs to be called to validate a change to the state. Actions
    are defined with the `actions` block of a Pinia object, and you can see an example
    in the default store created by Pinia:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: 'In this example, the `increment` action simply takes the `counter` value and
    adds one to it. Actions access state values by using the `this` scope and, as
    stated previously, can be asynchronous as well. An example of an action with a
    bit of logic could look like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: This action will apply a bit of validation before decreasing the value of `counter`
    and ensure that it never goes below zero.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s improve on our color editor by adding a few actions.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 10.03 – adding lightening and darkening features to the Color Preview
    app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The last exercise had you improve the Color Preview application by moving the
    logic of generating hex strings to a getter with the Pinia store. In this exercise,
    you’re going to add two new features – buttons that either lighten and darken
    the current color.
  prefs: []
  type: TYPE_NORMAL
- en: The complete code for this exercise can be found at [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter10/Exercise10.03](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter10/Exercise10.03)
  prefs: []
  type: TYPE_NORMAL
- en: We’ll begin by using a third-party library to handle our color logic. The `pSBC`
    library was developed by a user helping out on Stack Overflow. The author took
    his Stack Overflow answer and turned it into a mini library that you can use for
    free.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This code is documented on his GitHub at [https://github.com/PimpTrizkit/PJs/wiki/12.-Shade,-Blend-and-Convert-a-Web-Color-(pSBC.js)](https://github.com/PimpTrizkit/PJs/wiki/12.-Shade,-Blend-and-Convert-a-Web-Color-(pSBC.js)).
    If you scroll down to the `src/stores/color.js`. Once copied into the store, the
    `pSBC` function can be used in the store.
  prefs: []
  type: TYPE_NORMAL
- en: 'To lighten a hex color, you pass a positive value – for example, `pSBC(0.5,
    "#0022FF")`. The number represents a percentage – in this case, 50 percent. To
    darken a color, you simply pass a negative value: `pSBC(-0.5, "#0022FF")`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'With the `pSBC` library pasted into the store, add a new `actions` block to
    the store:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE134]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, add the `lighten` function. This function will get the current hex value
    (which is much easier now with our getter!), pass it to the library, and then
    take the result and convert it back into decimal numbers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE135]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE136]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE137]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE138]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE139]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE140]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE141]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, add the `darken` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE142]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE143]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE144]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE145]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE146]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE147]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE148]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now that the store includes the actions we need, let’s add the buttons to make
    use of them. In `src/components/RGBEdit.vue`, add the following beneath the last
    label:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE149]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE150]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE151]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE152]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Each button calls the respective action in the store. When run and viewed in
    the browser, you can see the new UI:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.8 – The Color Preview app with new Darken and Lighten buttons](img/Figure_10.08_B18645.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.8 – The Color Preview app with new Darken and Lighten buttons
  prefs: []
  type: TYPE_NORMAL
- en: To test out the functionality, simply move the sliders around and then try clicking
    on the buttons.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging Pinia in Devtools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Earlier in [*Chapter 3*](B18645_03.xhtml#_idTextAnchor107), *Vite and Vue Devtools*,
    you were introduced to Vue Devtools. **Devtools** are an incredibly powerful way
    to debug and optimize web applications, and the Vue plugin makes them even more
    vital for Vue developers. What makes Vue Devtools even more powerful is automatic
    recognition and support for applications using Pinia.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s take a quick tour of what this support looks like by using the Color
    Preview application last modified in *Exercise 10.03*. Run the application from
    the command line, open the URL in your browser, and open your developer tools.
    Note the **Pinia** tab on the right in *Figure 10**.9*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.9 – Pinia support in Vue Devtools](img/Figure_10.09_B18645.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.9 – Pinia support in Vue Devtools
  prefs: []
  type: TYPE_NORMAL
- en: 'Right away, you can see you’ve got access to the complete state as well as
    any getters. If you start modifying the RGB values, you can see them immediately
    reflected:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.10 – The state values update as the user works with the app](img/Figure_10.10_B18645.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.10 – The state values update as the user works with the app
  prefs: []
  type: TYPE_NORMAL
- en: 'If you hover the mouse over one of the values in the state, you will see both
    a pencil icon and a three-dot menu icon. The pencil icon lets you directly edit
    state values, while the three-dot menu gives you the ability to copy the value
    to the clipboard or the path:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.11 – Tools to edit or copy state values](img/Figure_10.11_B18645.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.11 – Tools to edit or copy state values
  prefs: []
  type: TYPE_NORMAL
- en: 'The icons in the upper-right portion allow you to copy the entire state to
    your clipboard, replace the state with the contents of your state, save the state
    to the filesystem, or import a saved state. As an example, if you save the state
    to the filesystem, it will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE153]'
  prefs: []
  type: TYPE_PRE
- en: 'If you click the **Timeline** tab, you will get a history of changes related
    to your Pinia store:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.12 – Pinia modifications history](img/Figure_10.12_B18645.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.12 – Pinia modifications history
  prefs: []
  type: TYPE_NORMAL
- en: In *Figure 10**.12*, you can see detailed information showing changes along
    with previous and new values. You can click on any of the previous mutations to
    see historical changes.
  prefs: []
  type: TYPE_NORMAL
- en: Hopefully, this demonstrates just how useful it is to use Vue Devtools and how
    nicely integrated Pinia is. Make sure to fully use it when trying to solve any
    gnarly bugs you run into in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Activity 10.01 – creating a simple shopping cart and price calculator
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Imagine a hypothetical corporate hardware site that lets employees select products
    they need to be shipped to their office. This cart is much simpler than a typical
    e-commerce site, as it doesn’t need to process credit cards or even ask the person
    where they are (IT knows where you sit!).
  prefs: []
  type: TYPE_NORMAL
- en: It still needs to present you with a list of items, let you select how much
    you want, and then provide you with a total price that will be billed to your
    department.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this activity, you need to build a Pinia store that represents the available
    products and their prices. You will need multiple components to handle the different
    aspects of the application and properly interact with the store data:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Begin by creating a new Pinia store. Your store should use two values in the
    state, an array of products with hardcoded names and values, and an empty cart
    array. Here’s an example list of products:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE154]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE155]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE156]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE157]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE158]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE159]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE160]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Your application will consist of three components. The first is a `Products`
    component to list products. The second is a `Cart` component that renders the
    current cart. Finally, there is a `Checkout` component, which renders the total
    along with a not-really-functional **Checkout** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `Products.vue` component should render each product and have a button to
    add and remove it from the cart. These buttons should call actions in the Pinia
    store and either add or remove an item from the cart:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.13 – The Products component](img/Figure_10.13_B18645.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.13 – The Products component
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Cart.vue` component renders a table of items in the cart. It should show
    the name of the product and the current quantity. If a line item ever goes to
    zero, it should not be displayed in the table. The following figure demonstrates
    this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.14 – The Cart component](img/Figure_10.14_B18645.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.14 – The Cart component
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Checkout.vue` component will render two things. First, it will render
    a total cost. This is based on the products and quantity in the cart. Secondly,
    it will render a **Checkout** button but only if there is an actual cost. The
    **Checkout** button does not need to do anything:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.15 – The Checkout component](img/Figure_10.15_B18645.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.15 – The Checkout component
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The solution for this activity can be found at [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter10/Activity10.01](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter10/Activity10.01)
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! You’ve now built a real, if simple, application making use
    of Pinia. Your application has three components kept perfectly in sync via Pinia’s
    store, and you’ve gotten the hang of working with state management using the officially
    recommended library.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter introduced you to Pinia, Vue’s recommended library for handling
    a shared state in a complex, multi-component application.
  prefs: []
  type: TYPE_NORMAL
- en: We began by discussing how to install Pinia. Next, we introduced states and
    showed you how to use those values in your components.
  prefs: []
  type: TYPE_NORMAL
- en: You looked at getters as a way of handling *virtual* properties and encapsulating
    logic.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you saw how actions let you define custom methods for working with
    your state.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you’ll be introduced to testing with Vue, specifically
    unit testing, which will prepare you for end-to-end testing in the chapter after
    that.
  prefs: []
  type: TYPE_NORMAL
- en: 'Part 4: Testing and Application Deployment'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the final part of the book, we will be going head first into the testing
    aspect of Vue.js applications. We will learn about the fundamentals of testing,
    different types of testing, and when and where it is required, and start testing
    our applications using the Jest testing framework for unit and snapshot tests
    and Cypress for End-to-End tests. By writing tests, we will be making sure that
    our applications behave in the intended way. The final chapter will cover how
    to deploy our Vue applications to the web.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following chapters in this part:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 11*](B18645_11.xhtml#_idTextAnchor444), *Unit Testing*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 12*](B18645_12.xhtml#_idTextAnchor463), *End-to-End Testing*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 13*](B18645_13.xhtml#_idTextAnchor478), *Deploying Your Code to the
    Web*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
