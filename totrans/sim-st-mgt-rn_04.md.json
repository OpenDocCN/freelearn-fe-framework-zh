["```js\n// …\n  headerTransparent: true,\n  headerTitleAlign: \"left\",\n  headerTitleStyle: {\n  paddingTop: 140,\n  paddingBottom: 40,\n  textAlign: \"left\",\n  fontWeight: \"bold\",\n},\n// …\n```", "```js\n// src/components/ListHeaderComponent\nimport React from \"react\";\nimport { View, Text } from \"react-native\";\nexport const ListHeaderComponent = () => {\n  return (\n    <View>\n      <Text>List Header component placeholder</Text>\n    </View>\n  );\n};\n```", "```js\n// src/components/ListOfAvatars.js\nimport React from \"react\";\nimport { View, Text, FlatList} from \"react-native\";\nimport { ListHeaderComponent } from \"./ListHeaderComponent\";\nconst arrayOfAvatars = [\n  {\n    id: 1,\n    url: \"\",\n  },\n  {\n    id: 2,\n    url: \"\",\n  },\n  {\n    id: 3,\n    url: \"\",\n  },\n];\nexport const ListOfAvatars = () => {\n  const renderItem = ({ item }) => {\n    return <Text>{item.id}</Text>\n  };\n  return (\n    <View style={{ paddingTop: 30 }}>\n      <FlatList\n        data={arrayOfAvatars}\n        renderItem={renderItem}\n        keyExtractor={(item) => item.id}\n        horizontal\n        ListHeaderComponent={<ListHeaderComponent />}\n      />\n    </View>\n  );\n};\n```", "```js\n// src/components/ListOfCards.js\nexport const ListOfCards = () => {\n  const renderItem = ({ item }) => {\n    return (\n      <Image\n        style={{\n          width: \"100%\",\n          height: 288,\n          borderRadius: 20,\n          marginBottom: 32,\n        }}\n        source={{\n          uri: item.url,\n        }}\n      />\n    );\n  };\n  return (\n    <View style={{ paddingVertical: 30 }}>\n      <FlatList\n        data={arrayOfImages}\n        renderItem={renderItem}\n        keyExtractor={(item) => item.id}\n        showsVerticalScrollIndicator={false}\n      />\n    </View>\n  );\n};\n```", "```js\n// src/surfaces/Feed.js\nexport const Feed = () => {\n  const headerHeight = useHeaderHeight();\n  return (\n    <SafeAreaView\n        style={{ flex: 1, paddingTop: headerHeight + 20,          paddingHorizontal: 20 }}\n    >\n      <View>\n        <ListOfAvatars />\n        <ListOfCards />\n      </View>\n    </SafeAreaView>\n  );\n};\n```", "```js\n// src/surfaces/ConversationsNavigation.js\nimport React from \"react\";\nimport { Conversations } from \"./Conversations\";\nimport { Messages } from \"./Messages\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nconst Stack = createStackNavigator();\nexport const ConversationsNavigation = () => {\n  return (\n    <Stack.Navigator\n      screenOptions={{\n        //…\n      }}\n    >\n        <Stack.Screen name='Conversations'          component={Conversations} />\n      <Stack.Screen\n        name='Messages'\n        component={Messages}\n        options={({ route }) => ({\n          title: route.params.name,\n          //…\n        })}\n      />\n    </Stack.Navigator>\n  );\n};\n```", "```js\noptions={({ route }) => ({\n          title: route.params.name,\n          //…\n```", "```js\n<Pressable onPress={() => navigation.navigate(\"Messages\", { name: item.name })} >\n```", "```js\n// src/App.js\nexport default function App() {\n  //…\n  return (\n    <SafeAreaProvider>\n      <NavigationContainer>\n        <Stack.Navigator>\n          {!userLoggedIn ? (\n            <Stack.Screen name='Login' component={Login} />\n          ) : (\n            <>\n              <Stack.Screen\n                name='Home'\n                component={Home}\n                options={{ headerShown: false }}\n              />\n              <Stack.Screen\n                name='ConversationsNav'\n                component={ConversationsNavigation}\n                options={{ headerShown: false }}\n              />\n            </>\n          )}\n        </Stack.Navigator>\n      </NavigationContainer>\n    </SafeAreaProvider>\n  );\n}\n```", "```js\n// src/surfaces/Home.js\n<Tab.Screen name='Feed' component={Feed} />\n      <Tab.Screen\n        name='ConversationsMain'\n          component={ConversationsBase} // just a dummy             component which will never be called\n        options={{\n          tabBarIcon: ({ size }) => (\n              <Ionicons name='chatbox-outline' color='#000000'                size={size} />\n          ),\n        }}\n        listeners={({ navigation }) => ({\n          tabPress: (e) => {\n            e.preventDefault();\n            navigation.navigate(\"ConversationsNav\");\n          },\n        })}\n      />\n      <Tab.Screen name='AddPost' component={AddPost} />\n// …\n```", "```js\n// src/surfaces/Home.js\nfunction Home() {\n  return (\n    <Tab.Navigator>\n//…\n   <Tab.Screen\n        name='AddPost'\n        component={AddPost}\n        options={{\n          tabBarIcon: ({ size }) => (\n            <View\n              style={{\n                marginTop: -30,\n              }}\n            >\n              <View\n                style={{\n                  position: \"absolute\",\n                  backgroundColor: \"#000000\",\n                  padding: 30,\n                  bottom: -10,\n                  left: -13,\n                  borderRadius: 23,\n                  transform: [{ rotate: \"-45deg\" }],\n                  shadowColor: \"#000000\",\n                  shadowOffset: { width: 0, height: 4 },\n                  shadowOpacity: 0.2,\n                  shadowRadius: 4,\n                }}\n              />\n                <Ionicons name='add-circle-outline'                  color='#ffffff' size={36} />\n            </View>\n          ),\n        }}\n      />\n//…\n```", "```js\n// src/App.js\nexport default function App() {\n  const [userLoggedIn, setIsUserLoggedIn] = useState(true);\n  const [userList, setUserList] = useState(null);\n//…\n  async function fetchUserData(id) {\n    const response = await fetch(requestBase + \"/users.json\");\n    setUserList(await response.json());\n  }\n  useEffect(() => {\n    fetchUserData();\n  }, []);\n  //…\n  if (!userList) {\n    return <AppLoading />;\n  }\n```", "```js\n<Stack.Screen name='Home' options={{ headerShown: false }}>\n    {(props) => <Home {...props} userList={userList} />}\n</Stack.Screen>\n```", "```js\nconst UserListContext = React.createContext(null);\n```", "```js\n// src/App.js\nreturn (\n    <SafeAreaProvider>\n      <UserListContext.Provider value={{ userList: userList }}>\n        <NavigationContainer theme={MyTheme}>\n          <Stack.Navigator>\n//…\n```", "```js\n// src/components/ListOfAvatars.js\nexport const ListOfAvatars = () => {\n  const renderItem = ({ item }) => {\n   //…\n  };\n  return (\n    <UserListContext.Consumer>\n      {({ userList }) => (\n          <View\n          //…\n          >\n            <FlatList\n              data={userList}\n              renderItem={renderItem}\n              keyExtractor={(item) => item.id}\n              horizontal\n              //…\n```", "```js\n// src/components/ListOfCards.js\nimport AppLoading from \"expo-app-loading\";\nimport { requestBase } from \"../utils/constants\";\nexport const ListOfCards = () => {\n  const [cardList, setCardList] = useState(null);\n  async function fetchCardData() {\n    const response = await fetch(requestBase + \"/home.json\");\n    setCardList(await response.json());\n  }\n  useEffect(() => {\n    fetchCardData();\n  }, []);\n  if (!cardList) {\n    return <AppLoading />;\n  }\n  return (\n  //…\n      <FlatList\n        data={cardList.listOfitems}\n        renderItem={renderItem}\n        keyExtractor={(item) => item.itemId}\n```", "```js\n// src/components/Card.js\nimport { UserListContext } from \"../context\";\nexport const Card = ({ item }) => {\n  return (\n    <UserListContext.Consumer>\n      {({ userList }) => {\n        const currentUser = userList.filter(\n          (user) => user.id === item.authorId\n        );\n        return (\n          <View>\n            <Image\n            //…\n```", "```js\n// src/components/ConversationItem.js\nexport const ConversationItem = ({ navigation, item }) => {\n  return (\n    <UserListContext.Consumer>\n      {({ userList }) => {\n          const currentUser = userList.filter((user) =>            user.id === item.userId);\n        return (\n          <Pressable\n            onPress={() =>\n              navigation.navigate(\"Messages\", {\n                name: currentUser[0].name,\n                avatar: currentUser[0].url,\n              })\n            }\n            style={{\n              height: 103,\n         //…\n```", "```js\nexport const ConversationContext = React.createContext(null);\n```", "```js\n// src/surfaces/ConversationsNavigation.js\nimport { ConversationContext } from \"../context\";\n//…\nexport const ConversationsNavigation = () => {\n  const [conversationId, setConversationId] = useState(null);\n  return (\n    <ConversationContext.Provider\n      value={{\n        conversationId: conversationId,\n        setConversationId: setConversationId,\n      }}\n    >\n      <Stack.Navigator\n        screenOptions={{\n          headerBackTitleVisible: false,\n// …\n```", "```js\n// src/components/ConversationItem.js\nexport const ConversationItem = ({ navigation, item }) => {\n  const onPressItem = (setConversationId, currentUser) => {\n    setConversationId(item.id);\n    navigation.navigate(\"Messages\", {\n      name: currentUser[0].name,\n      avatar: currentUser[0].url,\n    });\n  };\n  return (\n    <ConversationContext.Consumer>\n      {({ setConversationId }) => (\n        <UserListContext.Consumer>\n          {({ userList }) => {\n            const currentUser = userList.filter(\n              (user) => user.id === item.userId\n            );\n            return (\n              <Pressable\n                  onPress={() => onPressItem(setConversationId,                    currentUser)}\n                //…\n```", "```js\n// src/surfaces/Messages.js\nexport const Messages = ({ route }) => {\n  const headerHeight = useHeaderHeight();\n  return (\n      <SafeAreaView style={{ flex: 1, paddingTop: headerHeight         + 100 }}>\n      <ConversationContext.Consumer>\n        {({ conversationId }) => (\n```", "```js\n// src/components/ListOfMessages.js\nimport AppLoading from \"expo-app-loading\";\nimport { requestBase } from \"../utils/constants\";\nexport const ListOfMessages = ({ conversationId }) => {\n  const [messages, setMessages] = useState(null);\n  async function fetchMessages() {\n    const response = await fetch(\n      requestBase + \"/messages/\" + conversationId + \".json\"\n    );\n    setMessages(await response.json());\n  }\n  useEffect(() => {\n    fetchMessages();\n  }, []);\n  if (!messages) {\n    return <AppLoading />;\n  }\n  const renderItem = ({ item }) => {\n    //…\n  };\n  return (\n    //…\n      <FlatList\n        data={messages.messages}\n        renderItem={renderItem}\n        keyExtractor={(item) => item.id}\n        showsVerticalScrollIndicator={false}\n        inverted\n      />\n    </View>\n  //…\n```"]