["```js\nreact-native init Friends \n\n```", "```js\nnpm install --save react-native-fbsdk \n\n```", "```js\nreact-native link react-native-fbsdk \n\n```", "```js\n// Friends/index.ios.js \n\nimport React, { Component } from 'react'; \nimport { \n  AppRegistry, \n  StyleSheet, \n  View \n} from 'react-native'; \n\nimport { \n  AccessToken, \n  LoginButton \n} from 'react-native-fbsdk'; \n\n```", "```js\nexport default class Friends extends Component { \n  render() { \n    return ( \n      <View style={ styles.container }> \n        <LoginButton \n          readPermissions={[\"public_profile\", \"user_photos\", \n          \"user_posts\", \"user_events\", \"user_likes\"]} \n\n```", "```js\n          async onLoginFinished={        \n            async (error, result) => { \n              if (error) { \n              } else if (result.isCancelled) { \n                alert(\"login is cancelled.\"); \n              } else { \n                 const data = await AccessToken.getCurrentAccessToken() \n                 alert(data); \n              } \n            } \n          } \n          onLogoutFinished={() => alert(\"logout.\")} \n        /> \n      </View> \n    ); \n  } \n} \n\nconst styles = StyleSheet.create({ \n  container: { \n    flex: 1, \n    justifyContent: 'center', \n    alignItems: 'center', \n    backgroundColor: '#F5FCFF', \n  } \n}); \n\nAppRegistry.registerComponent('Friends', () => Friends); \n\n```", "```js\nconst requestMyPhotos = new GraphRequest('/me/photos/uploaded',  \n  null, this._responseInfoCallback); \n\n_responseInfoCallback (error, result) { \n  if (error) { \n    console.log('Error fetching data: ' + error.toString()) \n  } else { \n    console.log(result); \n  } \n} \n\n```", "```js\nnew GraphRequestManager().addRequest(requestMyPhotos).start(); \n\n```", "```js\n// Friends/index.ios.js \n\n... \nimport { \n  ... \n  GraphRequest, \n  GraphRequestManager, \n} from 'react-native-fbsdk'; \n\nexport default class Friends extends Component { \n  render() { \n    return ( \n      <View style={ styles.container }> \n        <LoginButton \n          ... \n          onLoginFinished={ \n            async (error, result) => { \n              ... \n              } else { \n                  await AccessToken.getCurrentAccessToken(); \n                  this._getFeed(); \n\n```", "```js\n              } \n            } \n          } \n          ... \n        /> \n      </View> \n    ); \n  }\n\n```", "```js\n  _getFeed () { \n    const infoRequest = new GraphRequest('/me/feed', null,\n    this._responseInfoCallback); \n\n```", "```js\n    new GraphRequestManager().addRequest(infoRequest).start(); \n  } \n\n```", "```js\n  _responseInfoCallback (error, result) { \n    if (error) { \n      console.log('Error fetching data: ', error.toString()); \n      return; \n    } \n\n    console.log(result); \n  } \n} \n... \n\n```", "```js\n// Friends/app/utils/graphMethods.js \n\nimport { \n  GraphRequest, \n  GraphRequestManager \n} from 'react-native-fbsdk'; \n\nconst makeSingleGraphRequest = (request) => { \n  return new GraphRequestManager().addRequest(request).start(); \n} \n\nexport const getFeed = (callback) => { \n  const request = new GraphRequest('/me/feed', null, callback); \n\n  makeSingleGraphRequest(request) \n} \n\n```", "```js\n// Friends/app/App.js \n\nimport React, { Component } from 'react'; \nimport { \n  View \n} from 'react-native'; \n\nimport { \n  AccessToken, \n  LoginButton \n} from 'react-native-fbsdk'; \n\n```", "```js\nimport { getFeed } from './utils/graphMethods'; \n\n```", "```js\nimport styles from './styles'; \n\nexport default class App extends Component { \n  render() { \n    return ( \n      <View style={ styles.container }> \n        <LoginButton \n        readPermissions={[\"public_profile\", \"user_photos\", \n        \"user_posts\", \"user_events\", \"user_likes\"]} \n          onLoginFinished={ \n            async (error, result) => { \n              if (error) { \n              } else if (result.isCancelled) { \n                alert(\"login is cancelled.\"); \n              } else { \n                  await AccessToken.getCurrentAccessToken(); \n                  getFeed((error, result) =>\n                  this._responseInfoCallback(error, result)) \n              } \n            } \n          } \n          onLogoutFinished={() => alert(\"logout.\")} \n        /> \n      </View> \n    ); \n  } \n\n  _responseInfoCallback (error, result) { \n    if (error) { \n      console.log('Error fetching data: ', error.toString()); \n      return; \n    } \n\n    console.log(result); \n  } \n}\n\n```", "```js\n// Friends/app/styles.js \n\nimport { StyleSheet } from 'react-native'; \n\nconst styles = StyleSheet.create({ \n  container: { \n    flex: 1, \n    justifyContent: 'center', \n    alignItems: 'center', \n    backgroundColor: '#F5FCFF', \n  } \n}); \n\nexport default styles;  \n\n```", "```js\n// Friends/index.ios.js \n\nimport React, { Component } from 'react'; \nimport { \n  AppRegistry, \n  NavigatorIOS, \n  StyleSheet, \n} from 'react-native'; \n\nimport App from './app/App'; \n\nexport default class Friends extends Component { \n  render() { \n    return ( \n      <NavigatorIOS \n        initialRoute={{ \n          component: App, \n          title: 'Friends' \n        }} \n        style={ styles.container } \n      /> \n    ); \n  } \n} \n\nconst styles = StyleSheet.create({ \n  container: { \n    flex: 1, \n    backgroundColor: '#F5FCFF', \n  } \n}); \n\nAppRegistry.registerComponent('Friends', () => Friends); \n\n```", "```js\n// Friends/app/App.js \n\n... \nimport { \n  Text, \n  ... \n} from 'react-native'; \n\nimport { \n  ... \n} from 'react-native-fbsdk'; \n\n```", "```js\n... \nexport default class App extends Component { \n  componentWillMount () { \n    this._checkLoginStatus(); \n  } \n\n```", "```js\n  render() { \n    return ( \n      <View style={ styles.container }> \n        <Text>Logged In</Text> \n      </View> \n    ); \n  } \n\n```", "```js\n  async _checkLoginStatus ( ){ \n    const result = await AccessToken.getCurrentAccessToken(); \n\n    if (result === null) { \n      alert('You are not logged in!'); \n      return; \n    } \n\n    getFeed((error, result) => this._responseInfoCallback(error,\n    result)); \n  } \n  ... \n} \n\n```", "```js\n// Friends/app/App.js \n\n... \nimport LoginPage from './components/LoginPage'; \n\nexport default class App extends Component { \n  ... \n  async _checkLoginStatus ( ){ \n    ... \n    if (result === null) { \n      this.props.navigator.push({ \n        component: LoginPage, \n        title: 'Log In to Facebook', \n        navigationBarHidden: true, \n        passProps: { \n          getFeed: () => getFeed() \n        } \n      }); \n      return; \n    } \n    ... \n  } \n  ... \n} \n\n```", "```js\n// Friends/app/components/LoginPage/index.js \n\nimport React, { Component } from 'react'; \nimport { \n  View \n} from 'react-native'; \n\nimport { \n  LoginButton \n} from 'react-native-fbsdk'; \n\nimport styles from './styles'; \n\nexport default class LoginPage extends Component { \n  render() { \n    return ( \n      <View style={ styles.container }> \n        <LoginButton \n        readPermissions={[\"public_profile\", \"user_photos\",\n        \"user_posts\", \"user_events\", \"user_likes\"]} \n          onLoginFinished={ \n            (error, result) => { \n              if (error) { \n                console.log('Error logging in: ', error.toString()); \n                return; \n              } \n\n```", "```js\n              if (result.isCancelled) { \n                console.log('login was cancelled'); \n                return; \n              } \n\n```", "```js\n              this.props.getFeed(); \n              this.props.navigator.pop(); \n\n            } \n          } \n          onLogoutFinished={() => alert(\"logout.\")} \n        /> \n      </View> \n    ); \n  } \n} \n\n```", "```js\n// Friends/app/utils/storageMethods.js \n\nimport { AsyncStorage } from 'react-native'; \n\nexport const getAsyncStorage = async (key) => { \n  let response = await AsyncStorage.getItem(key); \n  let parsedData = JSON.parse(response) || {}; \n\n  return parsedData; \n} \n\nexport const setAsyncStorage = async (key, value, callback) => { \n  await AsyncStorage.setItem(key, JSON.stringify(value)); \n\n  if (callback) { \n    return callback(); \n  } \n\n  return true; \n} \n\n```", "```js\nexport const resetAsyncStorage = (key) => { \n  return setAsyncStorage(key, {}); \n} \n\nexport const logAsyncStorage = async (key) => { \n  let response = await getAsyncStorage(key); \n\n  console.log('Logging Async Storage'); \n  console.table(response); \n} \n\n```", "```js\n// Friends/app/App.js \n\n... \nimport { getAsyncStorage, setAsyncStorage } from './utils\n/storageMethods'; \n... \nexport default class App extends Component { \n  ... \n  async _checkLoginStatus () { \n    ... \n    const feed = await getAsyncStorage('feed'); \n\n    if (feed && feed.length > 0) { \n      this.setState({ \n        feed \n      }); \n      return; \n    } \n\n```", "```js\n    getFeed((error, result) => this._responseInfoCallback\n    (error, result)); \n\n  } \n\n  _responseInfoCallback (error, result) { \n    ... \n    setAsyncStorage('feed', result.data); \n    this.setState({ \n      feed: result.data \n    }); \n  } \n} \n\n```", "```js\n// Friends/app/App.js \n\n... \nimport { \n  ActivityIndicator, \n  ... \n} from 'react-native'; \n... \nexport default class App extends Component { \n  constructor (props) { \n    super (props); \n\n    this.state = { \n      feed: undefined, \n      spinning: true \n    } \n  } \n\n```", "```js\n  ... \n  render() { \n    return ( \n      <View style={ styles.container }> \n        { this._renderView() } \n      </View> \n    ); \n  } \n\n```", "```js\n  async _checkLoginStatus () { \n    ... \n    if (feed && feed.length > 0) { \n      this.setState({ \n        feed, \n        spinning: false \n      }); \n      return; \n    } \n    ... \n  } \n\n```", "```js\n  _renderView () { \n    if (this.state.spinning) { \n      return ( \n        <ActivityIndicator \n          animating={ this.state.spinning } \n          size={ 'large' } \n        /> \n      ); \n    } \n\n    return ( \n      <Text>Logged In</Text> \n    ) \n  } \n\n```", "```js\n  _responseInfoCallback (error, result) { \n    ... \n    setAsyncStorage('feed', result.data); \n    this.setState({ \n      feed: result.data, \n      spinning: false \n    }); \n  } \n} \n\n```", "```js\n// Friends/app/App.js \n\n... \nimport FeedList from './components/FeedList'; \n...\n\n```", "```js\nexport default class App extends Component { \n  ... \n  _renderView () { \n    if (this.state.spinning) { \n      ... \n    } \n\n    return ( \n      <FeedList \n        feed={ this.state.feed } \n        navigator={ this.props.navigator } \n      /> \n    ); \n  } \n  ... \n} \n\n```", "```js\n// Friends/app/components/FeedList/index.js \n\nimport React, { Component } from 'react'; \nimport { \n  ListView, \n  View \n} from 'react-native'; \n\nimport FeedListRow from '../FeedListRow'; \n\nimport styles from './styles'; \n\nexport default class FeedList extends Component {\n\n```", "```js\n  constructor (props) { \n    super (props); \n\n    this.state = { \n      ds: new ListView.DataSource({ \n        rowHasChanged: (r1, r2) => r1 !== r2 \n      }) \n    } \n  } \n\n```", "```js\n   render () { \n    const dataSource = this.state.ds.cloneWithRows\n    (this.props.feed || []); \n\n```", "```js\n    return ( \n      <View style={ styles.container }> \n        <ListView \n          automaticallyAdjustContentInsets={ false } \n          dataSource={ dataSource } \n          renderRow={ (rowData, sectionID, rowID) => \n            <FeedListRow \n              createdTime={ rowData.created_time } \n              message={ rowData.message } \n              navigator={ this.props.navigator } \n              postID={ rowData.id } \n              story={ rowData.story } \n            /> \n\n          } \n          renderSeparator={ (sectionID, rowID) => \n            <View \n              key={ rowID } \n              style={ styles.separator } \n            /> \n          } \n        /> \n      </View> \n    ) \n  } \n}\n\n```", "```js\n// Friends/app/components/FeedList/styles.js \n\nimport { StyleSheet } from 'react-native'; \n\nconst styles = StyleSheet.create({ \n  container: { \n    flex: 1, \n    marginTop: 65 \n  }, \n  separator: { \n    flex: 1, \n    height: StyleSheet.hairlineWidth, \n    marginLeft: 15, \n    marginRight: 15, \n    backgroundColor: '#1d2129' \n  } \n}); \n\nexport default styles; \n\n```", "```js\n// Friends/app/utils/dateMethods.js \n\nimport moment from 'moment'; \n\nexport const getDateTimeString = (date) => { \n\n  return moment(date).format('lll'); \n} \n\n```", "```js\n// Friends/app/components/FeedListRow/index.js \n\nimport React, { Component } from 'react'; \nimport { \n  Text, \n  TouchableHighlight, \n  View \n} from 'react-native'; \n\nimport { getDateTimeString } from '../../utils/dateMethods'; \n\n```", "```js\nimport styles from './styles'; \n\nexport default class FeedListRow extends Component { \n  render () { \n    return ( \n      <View style={ styles.container }> \n        <TouchableHighlight \n          onPress={ () => this._navigateToPostView() } \n          underlayColor={ '#D3D3D3' } \n        > \n          <View> \n            <Text style={ styles.created }> \n              { this._renderCreatedString() } \n            </Text> \n              { this._renderStoryString() } \n            <Text style={ styles.message }> \n              { this._renderMessageString() } \n            </Text> \n          </View> \n        </TouchableHighlight> \n      </View> \n    ) \n  }\n\n```", "```js\n  _navigateToPostView () { \n    // TODO: Push to navigator \n    console.log('pushed'); \n  } \n\n```", "```js\n  _renderCreatedString () { \n    return 'Posted ' + getDateTimeString(this.props.createdTime); \n  } \n\n  _renderMessageString () { \n    return this.props.message \n  } \n\n  _renderStoryString () { \n    if (this.props.story) { \n      return ( \n        <Text style={ styles.story }> \n          { this.props.story } \n        </Text> \n      ) \n    } \n  } \n} \n\n```", "```js\n// Friends/app/components/FeedListRow/styles.js \n\nimport { StyleSheet } from 'react-native'; \n\nconst styles = StyleSheet.create({ \n  container: { \n    flex: 1, \n    margin: 10 \n  }, \n  created: { \n    color: '#365899', \n    fontWeight: 'bold', \n    marginBottom: 5 \n  }, \n  story: { \n    marginBottom: 5, \n    textDecorationLine: 'underline' \n  } \n}); \n\nexport default styles;  \n\n```"]