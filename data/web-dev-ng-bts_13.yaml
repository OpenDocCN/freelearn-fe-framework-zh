- en: Unit Testing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单元测试
- en: You've probably written unit tests for traditional server-side code, such as
    for Java, Python, or C#. Unit testing is, of course, just as important on the
    client side, and, in this chapter, you will learn about Angular testing, including
    the Jasmine and Karma frameworks, two excellent tools for unit testing your client-side
    code.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经为传统的服务器端代码编写了单元测试，比如Java、Python或C#。当然，在客户端，单元测试同样重要，在本章中，您将了解Angular测试，包括Jasmine和Karma框架，这两个优秀的工具用于对客户端代码进行单元测试。
- en: Together, we'll explore how we can unit test various parts of our Angular application,
    such as our components, routes, and **dependency injection (DI**).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将一起探讨如何对Angular应用的各个部分进行单元测试，例如组件、路由和依赖注入（DI）。
- en: 'This chapter will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: An introduction to Jasmine and Karma
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jasmine和Karma简介
- en: Testing directives
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试指令
- en: Testing components
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试组件
- en: Testing routing
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试路由
- en: Testing dependency injection
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试依赖注入
- en: Testing HTTP
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试HTTP
- en: Introduction to testing frameworks
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试框架简介
- en: In this section, we will learn about two important testing frameworks, namely
    Jasmine and Karma.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习两个重要的测试框架，即Jasmine和Karma。
- en: Testing is as important as development itself. It's a highly debatable topic,
    with some experts believing in **test-driven development** (**TDD**), which means
    that writing test scripts is important even before we write development code.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 测试和开发本身一样重要。这是一个备受争议的话题，一些专家认为**测试驱动开发**（TDD）非常重要，这意味着在编写开发代码之前编写测试脚本非常重要。
- en: The beauty about Angular framework is that it natively supports testing frameworks
    and offers a lot of testing utilities that make the developer's job happy and
    easy. We are not complaining at all.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Angular框架的美妙之处在于它原生支持测试框架，并提供了许多测试工具，使开发人员的工作变得轻松愉快。我们一点也不抱怨。
- en: 'Angular provides us with a core testing module, which has a lot of awesome
    classes we can make use of, and natively supports two important testing frameworks,
    namely Jasmine and Karma:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Angular为我们提供了一个核心测试模块，其中有很多我们可以利用的优秀类，并且原生支持两个重要的测试框架，即Jasmine和Karma：
- en: We write our test scripts using the Jasmine framework.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用Jasmine框架编写我们的测试脚本。
- en: We use the Karma framework to execute the test scripts.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用Karma框架来执行测试脚本。
- en: About the Jasmine framework
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于Jasmine框架
- en: Jasmine is a leading open source testing framework for writing and testing automated
    test scripts for modern web frameworks.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Jasmine是一个领先的开源测试框架，用于编写和测试现代Web框架的自动化测试脚本。
- en: 'Certainly, for Angular, Jasmine has become the de facto, go-to framework. The
    following is taken from the official website:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，对于Angular来说，Jasmine已经成为事实上的首选框架。以下摘自官方网站：
- en: '"Jasmine is a behavior-driven development framework for testing JavaScript
    code. It does not depend on any other JavaScript frameworks. It does not require
    a DOM. And it has a clean, obvious syntax so that you can easily write tests."'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '"Jasmine是一个用于测试JavaScript代码的行为驱动开发框架。它不依赖于任何其他JavaScript框架。它不需要DOM。它有一个清晰明了的语法，让您可以轻松编写测试。"'
- en: 'The idea behind writing Jasmine test scripts are behaviorally and functionally
    driven. Test scripts have two important elements—`describe` and the specs (`it`):'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 编写Jasmine测试脚本的理念是基于行为和功能驱动的。测试脚本有两个重要的元素——`describe`和规范（`it`）：
- en: The `describe` function is for grouping related specs together.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`describe`函数用于将相关的规范分组在一起。'
- en: The specs are defined by calling the `it` function.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 规范是通过调用`it`函数来定义的。
- en: 'Here''s a sample test script, which is written in Jasmine:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个用Jasmine编写的示例测试脚本：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In the process of writing test specs, we have to use a lot of conditional checks
    to match data, elements, results, asserting conditions, and much more. The Jasmine
    framework provides a lot of matchers, which we can readily use while writing our
    test specs. In the preceding sample code, toBe is one such example of a matcher.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写测试规范的过程中，我们必须使用大量的条件检查来匹配数据、元素、结果、断言条件等等。Jasmine框架提供了许多匹配器，我们可以在编写测试规范时方便地使用。在前面的示例代码中，toBe就是一个匹配器的例子。
- en: 'Here''s a list of the most commonly and frequently used matchers in Jasmine:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是Jasmine中最常用的匹配器列表：
- en: '`toBe`'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 等于
- en: '`toBeTruthy`'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为真
- en: '`toBeFalsy`'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为假
- en: '`toBeGreaterThanOrEqual`'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大于或等于
- en: '`toBeLessThanOrEqual`'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 小于或等于
- en: '`toHaveBeenCalled`'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已调用
- en: '`toHaveClass`'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有类
- en: '`toMatch`'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 匹配
- en: We will learn how to use these matchers in the next few sections. OK, we have
    written our test specs, so now what? How do we run them? What will run them for
    us? The answers can be found in the next section.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在接下来的几节中学习如何使用这些匹配器。好的，我们已经编写了我们的测试规范，那么现在怎么办？我们如何运行它们？谁会为我们运行它们？答案可以在下一节找到。
- en: About the Karma framework
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于Karma框架
- en: Karma is a test-runner framework for executing test scripts on a server and
    generating the reports.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Karma是一个测试运行器框架，用于在服务器上执行测试脚本并生成报告。
- en: 'The following is taken from the official website:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 以下内容来自官方网站：
- en: '"Karma is essentially a tool which spawns a web server that executes source
    code against test code for each of the browsers connected. The results of each
    test against each browser are examined and displayed via the command line to the
    developer such that they can see which browsers and tests passed or failed."'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: “Karma本质上是一个工具，它生成一个Web服务器，针对每个连接的浏览器执行源代码与测试代码。针对每个浏览器的每个测试的结果都会被检查，并通过命令行显示给开发人员，以便他们可以看到哪些浏览器和测试通过或失败。”
- en: The Karma framework gets added in our list of dependencies as it is included
    in the Angular CLI installation. Before we proceed to write and execute our test
    scripts, it's good practice to verify whether we have installed both Jasmine and
    Karma correctly in our `package.json` file. We can also verify the version numbers
    of the libraries that are being used.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Karma框架被添加到我们的依赖列表中，因为它包含在Angular CLI安装中。在我们继续编写和执行测试脚本之前，验证我们是否已在`package.json`文件中正确安装了Jasmine和Karma是一个良好的实践。我们还可以验证正在使用的库的版本号。
- en: I bet you figured out that this is also the place to specify any particular
    version of Jasmine and Karma you want to use.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我敢打赌你已经猜到这也是指定要使用的Jasmine和Karma的特定版本的地方。
- en: 'In the following screenshot, we can verify that we have added Jasmine and Karma
    to our list of `devDependencies` in our `package.json` file:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的截图中，我们可以验证我们已将Jasmine和Karma添加到`package.json`文件中的`devDependencies`列表中：
- en: '![](assets/2e79829a-5f66-40fa-8453-e8ff426ea822.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2e79829a-5f66-40fa-8453-e8ff426ea822.png)'
- en: Great. Now, it's time to dig deep into Angular testing concepts and write some
    test scripts.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了。现在，是时候深入了解Angular测试概念并编写一些测试脚本了。
- en: Angular test automation
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Angular测试自动化
- en: I am sure you will agree with me that test automation is one of the most important
    aspects of product development. In the preceding sections, we explored Jasmine
    and Karma frameworks. In the sections to follow, we will work through some hands-on
    examples of how we can automate various Angular framework building blocks. We
    will learn how to test Angular components, directives, routing, and much more.
    Let's jump right in.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我相信你会同意测试自动化是产品开发中最重要的方面之一。在前面的部分中，我们探讨了Jasmine和Karma框架。在接下来的部分中，我们将通过一些实际示例来学习如何自动化各种Angular框架构建模块。我们将学习如何测试Angular组件、指令、路由等等。让我们开始吧。
- en: Testing Angular components
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试Angular组件
- en: Over the course of using the Angular CLI, we have generated multiple components
    and services. Take a pause and review the files and folder structure. You will
    notice that, for each component and service, a `.spec.ts` file has been generated.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用Angular CLI的过程中，我们已经生成了多个组件和服务。暂停一下，查看文件和文件夹结构。您会注意到，对于每个组件和服务，都生成了一个`.spec.ts`文件。
- en: 'Eureka moment! The Angular CLI has been generating the required shell test
    scripts for the respective components and services. Let''s do a quick hands-on
    exercise here. Let''s generate a component named `auto-list`:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 恍然大悟！Angular CLI一直在为相应的组件和服务生成所需的外壳测试脚本。让我们在这里进行一个快速的实践练习。让我们生成一个名为`auto-list`的组件：
- en: '[PRE1]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The Angular CLI autogenerates the required files and also makes entries in the
    required files (`AppModule`, `Angular.json`, and so on).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Angular CLI会自动生成所需的文件，并在所需的文件（`AppModule`，`Angular.json`等）中进行条目。
- en: 'The following screenshot depicts the test specs generated by the CLI:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图描述了CLI生成的测试规格：
- en: '![](assets/b5672937-3116-499f-8c6b-0fc1a37a54f7.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b5672937-3116-499f-8c6b-0fc1a37a54f7.png)'
- en: 'Take a closer look at the files that were generated. You will see the following
    files generated for the component:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细看一下生成的文件。您会看到为组件生成了以下文件：
- en: '`auto-list.component.html`'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`auto-list.component.html`'
- en: '`auto-list.component.spec.ts`'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`auto-list.component.spec.ts`'
- en: '`auto-list.component.ts`'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`auto-list.component.ts`'
- en: '`auto-list.component.scss`'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`auto-list.component.scss`'
- en: We are interested in the spec file generated by the Angular CLI. A spec file
    is the test script that was generated for the corresponding component. The spec
    file will have the basic required modules imported, along with the `Component`
    class. The spec file will also have some basic test specs already written, which
    can be used as a starting point or, alternatively, as our motivation.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对Angular CLI生成的spec文件感兴趣。spec文件是为相应组件生成的测试脚本。spec文件将导入基本所需的模块，以及`Component`类。spec文件还将包含一些基本的测试规格，可以用作起点，或者作为我们的动力。
- en: 'Let''s take a closer look at the code generated in the spec file:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更仔细地看一下在spec文件中生成的代码：
- en: '[PRE2]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In the preceding code, you will notice that the required modules are imported
    from the Angular testing core. This is certainly not the final list of modules
    we will work with but just basic starter ones. You will also notice that the newly
    created component, `AutoListComponent`, is also imported into our spec file, which
    means that we can create an instance of our class inside the spec file and start
    mocking the objects for testing purposes. Pretty cool? Moving on to the lines
    of code, we can see the following:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，您会注意到所需的模块是从Angular测试核心导入的。这当然不是我们将使用的模块的最终列表，而只是基本的起始模块。您还会注意到新创建的组件`AutoListComponent`也被导入到我们的spec文件中，这意味着我们可以在spec文件中创建我们类的一个实例，并开始模拟测试目的的对象。很酷，对吧？继续看代码行，我们可以看到以下内容：
- en: '[PRE3]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the preceding code, you will notice some key points. There is a `describe` statement,
    which is used for grouping related test specs together. We will create test specs
    inside the `describe` function. There are two `beforeEach` methods defined in
    the spec file.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，您会注意到一些关键点。有一个`describe`语句，用于将相关的测试规格分组在一起。我们将在`describe`函数内创建测试规格。在spec文件中定义了两个`beforeEach`方法。
- en: The first `beforeEach` method is an async promise, which will set up our `TestBed`,
    which means everything declared in it has to be resolved before moving on; otherwise,
    our tests won't work. The second `beforeEach` method will create an instance of
    our `AutoList` component for testing. You will notice the call to `fixture.detectChanges()`,
    which forces Angular's change detection to run and affect the elements in the
    test beforehand.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个`beforeEach`方法是一个异步promise，它将设置我们的`TestBed`，这意味着在继续之前必须解决其中声明的所有内容；否则，我们的测试将无法工作。第二个`beforeEach`方法将为测试创建一个`AutoList`组件的实例。您会注意到调用`fixture.detectChanges()`，这会强制Angular的变更检测运行并影响测试中的元素。
- en: 'Now, it''s time to understand the actual test spec, which is generated in the
    spec file:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候了解实际的测试规范了，这是在规范文件中生成的：
- en: '[PRE4]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As we mentioned earlier, the Jasmine test specs are written inside the `it`
    statement, which, in this case, is just a simple assert to check whether the component
    exists and is true, using the `toBeTruthy` matcher.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前提到的，Jasmine测试规范是写在`it`语句内的，这种情况下，只是一个简单的断言，用于检查组件是否存在并且为真，使用`toBeTruthy`匹配器。
- en: 'That''s all about our spec file. The joy lies in seeing it work. Let''s just
    run the default tests that Angular has generated for us. To run the tests written
    inside the Angular application, we use the `ng test` command on the command-line
    interface:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们的规范文件。乐趣在于看到它的工作。让我们运行Angular为我们生成的默认测试。要运行Angular应用程序中编写的测试，我们在命令行界面上使用`ng
    test`命令：
- en: '[PRE5]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If you see a new window being opened, don''t panic. You will notice that a
    new browser window is opened by the Karma runner to execute the tests, and the
    test execution report is generated. The following screenshot displays the report
    that was generated for our test spec for the component:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到一个新窗口被打开，不要惊慌。您会注意到Karma运行器打开了一个新的浏览器窗口来执行测试，并生成了测试执行报告。以下截图显示了为我们的组件生成的测试规范的报告：
- en: '![](assets/571e4b63-7965-449c-b422-0f6984cca8d2.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/571e4b63-7965-449c-b422-0f6984cca8d2.png)'
- en: 'So, our test passed. Now, let''s modify the script a bit. We will create a
    variable called `title` in our component and assign a value. In our test spec,
    we will verify whether the value matches or not. It''s a straightforward use case
    and, trust me, it''s also the most frequent use case you will implement in your
    applications. Let''s open the `app.component.spec.ts` file and make the changes
    in the test script:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 测试通过了。现在，让我们稍微修改一下脚本。我们将在组件中创建一个名为`title`的变量并赋值。在我们的测试规范中，我们将验证该值是否匹配。这是一个直接的用例，相信我，这也是您在应用程序中实现的最常见的用例。让我们打开`app.component.spec.ts`文件并在测试脚本中进行更改：
- en: '[PRE6]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In the preceding code, we are writing a test spec and, using `TestBed`, we
    are creating a fixture element of `AppComponent`. Using the fixture element''s
    `debugElement` interface, we are getting the `componentInstance` property. Next,
    we are writing an `expect` statement to assert if the value of the `title` variable
    is equal to `AutoStop`. That was neat. Let''s try and write one more test spec.
    The use case we will address is as follows: we have an `H1` element and we want
    to assert it if the value inside the `H1` tag is equal to `Welcome to Autostop`.
    The following is the relevant sample code:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，我们正在编写一个测试规范，并使用`TestBed`创建了`AppComponent`的fixture元素。使用fixture元素的`debugElement`接口，我们获取了`componentInstance`属性。接下来，我们编写了一个`expect`语句来断言`title`变量的值是否等于`AutoStop`。很整洁。让我们尝试再写一个测试规范。我们要解决的用例是：我们有一个`H1`元素，并且我们想要断言它，如果`H1`标签内的值等于`Welcome
    to Autostop`。以下是相关的示例代码：
- en: '[PRE7]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In the preceding code, we are asserting if the `textContent` of the `h1` element
    contains the text `Welcome to AutoStop`. Notice that, in previous test specs,
    we used the `componentInstance` interface and that, in this test spec, we are
    using the `nativeElement` property. Again, run the tests using the `ng test` command.
    The following screenshot shows the test report that was generated:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们断言`h1`元素的`textContent`是否包含文本`Welcome to AutoStop`。请注意，在以前的测试规范中，我们使用了`componentInstance`接口，在这个测试规范中，我们使用了`nativeElement`属性。再次使用`ng
    test`命令运行测试。以下屏幕截图显示了生成的测试报告：
- en: '![](assets/3f162038-f763-42e7-956c-60b616869076.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3f162038-f763-42e7-956c-60b616869076.png)'
- en: So far, we have had an overview of the Jasmine and Karma frameworks, and also
    learned how to run our test scripts. We also learned about the default spec files
    that Angular generates for us and learned how to modify the test specs.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经概述了Jasmine和Karma框架，还学习了如何运行我们的测试脚本。我们还了解了Angular为我们生成的默认spec文件，并学习了如何修改测试规范。
- en: In the upcoming sections, we will learn how to write test specs and scripts
    to test Angular built-in directives, services, routes, and much more.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将学习如何编写测试规范和脚本，以测试Angular内置指令、服务、路由等等。
- en: Testing directives
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试指令
- en: 'Angular provides a lot of built-in powerful directives, such as `ngFor`, `ngIf`,
    and so on, which can be used to extend the behavior and functionality of the native
    HTML elements. We learned about the Angular templates and directives in [Chapter
    7](cd8509d5-4bce-4056-8156-557186df18cd.xhtml), *Templates, Directives, and Pipes.* A
    quick recap has never hurt anyone. Angular offers us two types of directives that
    we can use to develop and extend the behavior of elements:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Angular提供了许多内置的强大指令，如`ngFor`、`ngIf`等，可以用于扩展原生HTML元素的行为和功能。我们在[第7章](cd8509d5-4bce-4056-8156-557186df18cd.xhtml)中学习了关于Angular模板和指令的知识，快速回顾从未有过害处。Angular为我们提供了两种类型的指令，我们可以用来开发和扩展元素的行为：
- en: Built-in directives
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内置指令
- en: Custom-defined directives
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义指令
- en: The focus of this section is to learn how to write test scripts for built-in
    Angular directives, such as `ngIf`, `ngFor`, `ngSwitch`, and `ngModel`. Before
    we start writing our test scripts, we need to do some groundwork to update our
    component so that we can start writing the test use cases. We will write a few
    variables, which will hold various types of data. We will display the data in
    our template using `ngFor` and also write some conditional checks using `ngIf`.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 本节的重点是学习如何编写用于内置Angular指令（如`ngIf`、`ngFor`、`ngSwitch`和`ngModel`）的测试脚本。在开始编写测试用例之前，我们需要做一些准备工作，以更新我们的组件，以便我们可以开始编写测试用例。我们将编写一些变量，用于保存各种类型的数据。我们将使用`ngFor`在模板中显示数据，并使用`ngIf`编写一些条件检查。
- en: If you want a quick revision of Angular templates and directives, refer to [Chapter
    7](cd8509d5-4bce-4056-8156-557186df18cd.xhtml), *Templates, Directives, and Pipes*.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想快速复习Angular模板和指令，请参阅[第7章](cd8509d5-4bce-4056-8156-557186df18cd.xhtml) *Templates,
    Directives, and Pipes*。
- en: 'We will continue to use the same component, `AutoListComponent`, which we created
    in the previous section. Let''s start the party. Our starting point will be the `AutoListComponent`
    class, so let''s modify the `auto-list.component.ts` file:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将继续使用在上一节中创建的相同组件`AutoListComponent`。让我们开始吧。我们的起点将是`AutoListComponent`类，所以让我们修改`auto-list.component.ts`文件：
- en: '[PRE8]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In the preceding code, we are adding a variable of a JSON object type called
    `cars` and assigning data to it. We will use this data by displaying it in the
    template. We are also declaring a variable, `tab`, and assigning a value, `1`.
    We will use the `tab` variable for conditional checks in the template. Finally,
    we are adding a method, `findAuto`, and just displaying the output in the console.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，我们添加了一个名为`cars`的JSON对象类型的变量，并为其分配了数据。我们将通过在模板中显示数据来使用这些数据。我们还声明了一个名为`tab`的变量，并分配了一个值`1`。我们将在模板中使用`tab`变量进行条件检查。最后，我们添加了一个名为`findAuto`的方法，并在控制台中显示输出。
- en: 'We have modified our component class. We will also need to update our template
    file in order to process the data inside the component. The following is the sample
    code that we will add in our template file, `auto-list.component.html`:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经修改了我们的组件类。我们还需要更新我们的模板文件，以便在组件内部处理数据。以下是我们将在模板文件`auto-list.component.html`中添加的示例代码：
- en: '[PRE9]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In the preceding code, we are making the changes to the template file. First,
    we are using the `ngFor` directive to loop the rows and display the cars. Next,
    we are adding an `ngIf` condition to check whether the length of the car is more
    than 0, and then we will display the count of the `carLength` element. We have
    added an `ngSwitch` directive to check whether the value of the `tab` variable
    is set and, based on the value of the tab, we will display the respective tab,
    accordingly. In our case, since the value assigned to the tab is `1`, we will
    display the first tab. Finally, we have added a button and associated the `findAuto`
    method with the click event.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，我们正在对模板文件进行更改。首先，我们使用`ngFor`指令循环行并显示汽车。接下来，我们添加了一个`ngIf`条件来检查汽车的长度是否大于0，然后我们将显示`carLength`元素的计数。我们已经添加了一个`ngSwitch`指令来检查`tab`变量的值是否设置，并根据选项卡的值来相应地显示相应的选项卡。在我们的情况下，由于选项卡分配的值为`1`，我们将显示第一个选项卡。最后，我们添加了一个按钮，并将`findAuto`方法与单击事件相关联。
- en: 'Beautiful. Our component and template are ready, and now it''s time to write
    some good test scripts to test the preceding logic and, especially, the Angular
    built-in directives. Some of the use cases we will test include testing the count
    of cars displayed in the UI, testing which tab is active, verifying the content
    inside an element, and many more. Some of the use cases follow, and we will learn
    how to write test scripts for the use cases:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 很好。我们的组件和模板已经准备好了，现在是时候编写一些良好的测试脚本来测试前面的逻辑，特别是Angular内置指令。我们将测试的一些用例包括测试UI中显示的汽车数量，测试哪个选项卡是活动的，验证元素内的内容等等。以下是一些用例，并且我们将学习如何为这些用例编写测试脚本：
- en: '**Use case #1**: We have a list of cars and we want to verify that the total
    count is `3`:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '**用例＃1**：我们有一列汽车，我们想要验证总数为`3`：'
- en: '[PRE10]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In the preceding code, we are creating a fixture of the `AutoListComponent` component.
    We have already learned how to target an element using `debugElement` and, in
    this test spec, we are using the `queryAll` method to get the list of elements
    with `className` `.cars-list > li`. Finally, we are writing an `expect` statement
    to assert if the total count equals `3`.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，我们正在创建`AutoListComponent`组件的fixture。我们已经学会了如何使用`debugElement`来定位元素，并且在这个测试规范中，我们使用`queryAll`方法来获取具有`className`
    `.cars-list > li`的元素列表。最后，我们编写了一个`expect`语句来断言总数是否等于`3`。
- en: 'Run the tests using the `ng test` command. We should see the following output:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`ng test`命令运行测试。我们应该看到以下输出：
- en: '![](assets/aabd75b5-5309-43a1-b46e-55a970e65321.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/aabd75b5-5309-43a1-b46e-55a970e65321.png)'
- en: '**Use case #2**: We want to verify that the text inside an HTML element contains
    the `vehicles` keyboard:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '**用例＃2**：我们要验证HTML元素内的文本是否包含`vehicles`键盘：'
- en: '[PRE11]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: There are some important things to note in the preceding code. We continue to
    use the same fixture element of the component, `AutoListComponent`. This time,
    using the `debugElement` interface, we are using the `querySelector` method to
    find an element that has its identifier as `carLength`. Finally, we are writing
    an `expect` statement to assert if the text content contains the `vehicles` keyword.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中有一些重要的事情需要注意。我们继续使用组件`AutoListComponent`的相同装置元素。这一次，我们使用`debugElement`接口，使用`querySelector`方法来查找具有标识符`carLength`的元素。最后，我们编写一个`expect`语句来断言文本内容是否包含`vehicles`关键字。
- en: 'Let''s run the tests again using the `ng test` command. We should see the following output:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再次使用`ng test`命令运行测试。我们应该看到以下输出：
- en: '![](assets/8800f60e-eb85-4fa2-b621-5c1908861a28.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8800f60e-eb85-4fa2-b621-5c1908861a28.png)'
- en: '**Use case #3:** We want to use `ngSwitch` to verify that tab1 is selected
    and, if so, display the corresponding div:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '**用例＃3：**我们想使用`ngSwitch`来验证是否选择了`tab1`，如果是，则显示相应的div：'
- en: '[PRE12]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In the preceding code, we continue to use the fixture element of the `AutoListComponent`
    component. Using the `debugElement` and `querySelector` methods, we are targeting
    the element using `className ''.data-tab > div''`. We are asserting whether the `ngSwitch` condition
    is `true` and the corresponding `div` is displayed. Since we have set the value
    of the tab to `1` in our component, tab1 is displayed on the screen and the test
    spec passes:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们继续使用`AutoListComponent`组件的fixture元素。使用`debugElement`和`querySelector`方法，我们正在使用`className
    '.data-tab > div'`来定位元素。我们断言`ngSwitch`条件是否为`true`，并显示相应的`div`。由于我们在组件中将选项卡的值设置为`1`，因此选项卡1显示在屏幕上，并且测试规范通过：
- en: '![](assets/752b84ac-61f6-4d59-bba5-64d062a30440.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/752b84ac-61f6-4d59-bba5-64d062a30440.png)'
- en: '**Use case #4:** Test the methods defined inside `AutoListComponent` and assert
    whether the method has been called:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '**用例＃4：**测试`AutoListComponent`中定义的方法，并断言该方法是否已被调用：'
- en: '[PRE13]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In the preceding code, we are creating a fixture of the `AutoListComponent`
    component. We are using the `spyOn` method to spy on the component instance. We
    are calling the `findAuto()` method. Finally, we are writing an `expect` statement
    to assert whether the `findAuto` method, using `toHaveBeenCalled`, has been called
    or not.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '在上述代码中，我们正在创建`AutoListComponent`组件的fixture。我们使用`spyOn`方法来监听组件实例。我们正在调用`findAuto()`方法。最后，我们编写一个`expect`语句来断言`findAuto`方法是否已被调用，使用`toHaveBeenCalled`。 '
- en: 'Run the tests using the `ng test` command. We should see the following output:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`ng test`命令运行测试。我们应该看到以下输出：
- en: '![](assets/b594dedb-f283-4c25-9cd3-5df794e0ac52.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b594dedb-f283-4c25-9cd3-5df794e0ac52.png)'
- en: In this section, we learned how to write unit test scripts for testing Angular
    built-in directives, such as `ngFor`, `ngIf`, `ngSwitch`, and finally, asserting
    whether a method was clicked and called.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了如何编写单元测试脚本来测试Angular内置指令，例如`ngFor`，`ngIf`，`ngSwitch`，最后，断言方法是否被点击和调用。
- en: In the next section, we will learn about testing Angular routing.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习有关测试Angular路由的知识。
- en: Testing Angular routing
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试Angular路由
- en: Most likely, you will have multiple links throughout the application in the
    form of a navigation menu or deep links. These links are treated as routes in
    Angular and are usually defined in your `app-routing.module.ts` file.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 很可能，您的应用程序中会有多个链接，以导航菜单或深链接的形式存在。这些链接在Angular中被视为路由，并且通常在您的`app-routing.module.ts`文件中定义。
- en: We learned about and mastered how to use Angular routing in [Chapter 4](66c21daa-b131-470d-a21b-0fbed56c3ec9.xhtml),
    *Routing*. In this section, we will learn how to write test scripts for testing
    Angular routing and testing the links and navigation in our application.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第4章](66c21daa-b131-470d-a21b-0fbed56c3ec9.xhtml)中学习并掌握了如何使用Angular路由。在本节中，我们将学习如何编写用于测试Angular路由和测试应用程序中的链接和导航的测试脚本。
- en: 'We will need a beautiful `menu` component for our application. Using the `ng
    generate component menu` command, we will generate the `menu` component. Now,
    let''s navigate to `menu.component.html` and create a menu called `navbar` with
    two links in it:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序需要一个漂亮的`menu`组件。使用`ng generate component menu`命令，我们将生成`menu`组件。现在，让我们转到`menu.component.html`并创建一个名为`navbar`的菜单，其中包含两个链接：
- en: '[PRE14]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The preceding code is nothing fancy, at least not yet. It is standard code that
    uses Bootstrap to generate a `navbar` component. Look carefully and you will see
    that we have defined two links in the menu bar, `list-cars` and `list-trucks`,
    with the classes as `nav-link`.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码并不花哨，至少目前还不是。这是使用Bootstrap生成`navbar`组件的标准代码。仔细看，你会发现我们在菜单栏中定义了两个链接，`list-cars`和`list-trucks`，它们的类是`nav-link`。
- en: We can now write a few test specs around the menu functionality to test the
    `navbar` component, which will cover navigation, the count of links, and so on.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以围绕菜单功能编写一些测试规范，以测试`navbar`组件，其中将涵盖导航、链接计数等。
- en: '**Use case #1**: We need to test that the `navbar` menu has exactly two links.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '**用例＃1**：我们需要测试`navbar`菜单是否恰好有两个链接。'
- en: 'Here''s the code to check whether there are exactly two links:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是检查是否有确切两个链接的代码：
- en: '[PRE15]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In the preceding code, we are creating a fixture for our `MenuComponent` component.
    Since we have assigned the `nav-link` class, it's easy to target the corresponding
    links in the component. Using the `debugElement` and `queryAll` methods, we are
    finding all the links with `className` as `nav-link`. Finally, we are writing
    an `expect` statement to assert whether the length of the array of links returned
    is equal to `2`.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们正在为我们的`MenuComponent`组件创建一个固定装置。由于我们分配了`nav-link`类，因此很容易定位组件中对应的链接。使用`debugElement`和`queryAll`方法，我们正在查找所有类名为`nav-link`的链接。最后，我们正在编写一个`expect`语句来断言返回的链接数组的长度是否等于`2`。
- en: 'Run the tests using the `ng test` command. We should see the following output:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`ng test`命令运行测试。我们应该会看到以下输出：
- en: '![](assets/cb3ca628-e055-4f31-a9d2-0589fd3f02f8.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/cb3ca628-e055-4f31-a9d2-0589fd3f02f8.png)'
- en: That's a good start to testing our menu functionality. Now that we know there
    are two links in our menu, the next use case we want to test is whether the first
    link is `list-cars`.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这是测试我们菜单功能的一个良好开端。现在我们知道我们的菜单中有两个链接，我们想要测试的下一个用例是第一个链接是否为`list-cars`。
- en: 'The following is the code to test whether the first link in the array of links
    is `list-cars`:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是测试链接数组中第一个链接是否为`list-cars`的代码：
- en: '[PRE16]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In the preceding code, we are creating a fixture for our `MenuComponent` component. Using
    the `debugElement` and `queryAll` methods, we are finding all the links with `className`
    as `nav-link`. We will be getting all the links that have the class name as `nav-link`.
    There can be multiple links in the menu, but we are interested in reading the
    `href` property of the first element through `index [0]` and asserting whether
    the value matches `/list-cars`.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们正在为我们的`MenuComponent`组件创建一个固定装置。使用`debugElement`和`queryAll`方法，我们正在查找所有类名为`nav-link`的链接。我们将获得所有具有类名`nav-link`的链接。菜单中可能有多个链接，但我们感兴趣的是通过`index
    [0]`读取第一个元素的`href`属性，并断言该值是否匹配`/list-cars`。
- en: 'Again, run the `ng test` command. We should see our test report updated, as
    shown in the following screenshot:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行`ng test`命令。我们应该会看到我们的测试报告已更新，如下图所示：
- en: '![](assets/549a54fe-1de2-4743-9569-c0f55abf7c6a.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/549a54fe-1de2-4743-9569-c0f55abf7c6a.png)'
- en: OK, fair enough. We got a clue that the `list-cars` menu link is the first in
    the menu list. What if we don't know the index or position of the link we are
    searching for? Let's tackle that use case as well.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，公平的。我们得到了一个线索，即`list-cars`菜单链接是菜单列表中的第一个。如果我们不知道我们正在搜索的链接的索引或位置会怎么样？让我们也解决这个用例。
- en: 'Take a look at the following code snippet:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下以下代码片段：
- en: '[PRE17]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Some things to note are that we are finding the index of the route path, `/list-cars`,
    and we are also making use of the assigned classes, `nav-link`, and getting an
    array of all matching elements using the `queryAll` method. Using the `findIndex`
    method, we are looping the array elements to find the index of the matching `href`
    to `/list-cars`.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的一些事情是，我们正在查找路由路径`/list-cars`的索引，并且我们还在使用分配的类`nav-link`，并使用`queryAll`方法获取所有匹配元素的数组。使用`findIndex`方法，我们正在循环数组元素以找到匹配`href`为`/list-cars`的索引。
- en: 'Run the tests again using the `ng test` command and the updated test report
    should look as follows:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 再次使用`ng test`命令运行测试，更新后的测试报告应如下所示：
- en: '![](assets/549a54fe-1de2-4743-9569-c0f55abf7c6a.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/549a54fe-1de2-4743-9569-c0f55abf7c6a.png)'
- en: In this section, we learned about various ways to target a router link. The
    same principle applies to hunting down a deep link or a child link.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了各种方法来定位路由链接。同样的原则也适用于查找深链接或子链接。
- en: That's your homework.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是你的作业。
- en: Testing dependency injection
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试依赖注入
- en: In the previous sections, we learned how to write test scripts for testing Angular
    components and routing. In this section, we will learn how to test dependency
    injection and how to test services in Angular applications. We will also learn
    how to inject services into Angular components and write test scripts to test
    them.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，我们学习了如何编写测试脚本来测试Angular组件和路由。在本节中，我们将学习如何测试依赖注入以及如何测试Angular应用程序中的服务。我们还将学习如何将服务注入到Angular组件中，并编写测试脚本来测试它们。
- en: What is dependency injection?
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是依赖注入？
- en: '**Dependency injection **(**DI**), in the Angular framework, is an important
    design pattern that allows the flexibility to inject services, interfaces, and
    objects into a class at runtime.'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '**依赖注入**（**DI**）在Angular框架中是一个重要的设计模式，它允许在运行时将服务、接口和对象注入到类中，从而实现灵活性。'
- en: The DI pattern helps with writing efficient, flexible, and maintainable code
    that is testable and easy to extend.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: DI模式有助于编写高效、灵活、可维护的可测试和易于扩展的代码。
- en: If you need a quick recap, head over to [Chapter 11](437face8-d59c-42f3-a49a-af43f2892f7a.xhtml),
    *Dependency Injection and Services*, which covers and explains the DI mechanism
    in depth.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要快速回顾，请转到[第11章](437face8-d59c-42f3-a49a-af43f2892f7a.xhtml)，*依赖注入和服务*，其中深入介绍和解释了DI机制。
- en: Testing Angular services
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试Angular服务
- en: In this section, we will learn how to test Angular dependency injection through
    services and interfaces. In order to test an Angular service, we will first need
    to create a service in our app!
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何通过服务和接口测试Angular依赖注入。为了测试一个Angular服务，我们首先需要在我们的应用程序中创建一个服务！
- en: 'Use the `ng generate` command in the Angular CLI; we will generate the service
    in the project folder:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在Angular CLI中使用`ng generate`命令，我们将在项目文件夹中生成服务：
- en: '[PRE18]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Upon successful execution, we should see that the following files have been
    created:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 成功执行后，我们应该看到以下文件已被创建：
- en: '`services/dealers.service.spec.ts`'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`services/dealers.service.spec.ts`'
- en: '`services/dealers.service.ts`'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`services/dealers.service.ts`'
- en: '![](assets/16932a86-4c60-4be2-b764-e7b7d5b96c69.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/16932a86-4c60-4be2-b764-e7b7d5b96c69.png)'
- en: 'Now that we have our dealers service and the corresponding test spec file generated,
    we will work on our service to add a few methods and variables, so we will use
    them in our test specs. Navigate to our service class and update the `dealers.service.ts`
    file. The updated code should look as follows:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经生成了我们的经销商服务和相应的测试规范文件，我们将在服务中添加一些方法和变量，以便在我们的测试规范中使用它们。导航到我们的服务类并更新`dealers.service.ts`文件。更新后的代码应如下所示：
- en: '[PRE19]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In the preceding code, we are making simple changes so that we can write a few
    test specs around the dealers service. We have defined a variable of the `any` type.
    We are defining a `getDealers` method, which will return a JSON response with
    an `id` and `name` key pair. Alright, now let's come up with some use cases to
    write our test scripts, such as getting the count of dealers, finding a matching
    dealer, and so on.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们进行了简单的更改，以便我们可以围绕经销商服务编写一些测试规范。我们定义了一个`any`类型的变量。我们正在定义一个`getDealers`方法，它将返回一个带有`id`和`name`键对的JSON响应。好了，现在让我们想出一些用例来编写我们的测试脚本，比如获取经销商的数量，查找匹配的经销商等。
- en: '**Use case #1**: When the `getDealers` method is called, it should return the
    list of dealers, and the count should be equal to `4`.'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 使用案例＃1：当调用`getDealers`方法时，它应返回经销商列表，计数应等于`4`。
- en: 'The following is the test spec for this:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是此测试规范：
- en: '[PRE20]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '**Use case #2**: We want to check whether the first dealer name is `North Auto`.'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 使用案例＃2：我们想要检查第一个经销商的名称是否为`North Auto`。
- en: 'The following is the test spec for this:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是此测试规范：
- en: '[PRE21]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Amazing! So far, so good. So, we have learned how to write test specs for our
    newly created dealers service. That's only one part of dependency injection. As
    part of dependency injection, we may need to inject additional required classes
    at runtime into the service.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！到目前为止，一切顺利。因此，我们已经学会了如何为我们新创建的经销商服务编写测试规范。这只是依赖注入的一部分。作为依赖注入的一部分，我们可能需要在运行时将其他所需的类注入到服务中。
- en: 'Let''s quickly create a class called `Dealers` and define two variables in
    it, namely `username` and `name`. Now, let''s save this file as `dealers.ts`:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速创建一个名为`Dealers`的类，并在其中定义两个变量，即`username`和`name`。现在，让我们将此文件保存为`dealers.ts`：
- en: '[PRE22]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'We will now include the newly created class in our dealers service and create
    a method to initialize the class and create an object to return some data:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将在我们的经销商服务中包含新创建的类，并创建一个方法来初始化该类并创建一个对象来返回一些数据：
- en: '[PRE23]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: That brings us to our next use case to test.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 这将引出我们下一个要测试的用例。
- en: '**Use case #3**: Testing dependency injection via classes that have been injected
    into a service.'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 使用案例＃3：测试通过已注入到服务中的类进行依赖注入。
- en: 'Have a look at the following code:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下以下代码：
- en: '[PRE24]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: In the preceding code, we have created an instance of our service and invoked
    the `getDealerObject()` method. We are asserting whether the value returned matches
    the `name` property of the response to `Auto`.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们创建了我们服务的一个实例并调用了`getDealerObject()`方法。我们断言返回的值是否与响应的`name`属性匹配`Auto`。
- en: We are calling the method defined in a service, which, internally, is dependent
    on the `Dealers` class.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在调用服务中定义的方法，该方法在内部依赖于`Dealers`类。
- en: '**Use case #4**: What if we want to test just the properties of the `Dealers` class?'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 使用案例＃4：如果我们只想测试`Dealers`类的属性怎么办？
- en: 'We can test that, too. The following is the sample code for this:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以测试。以下是此示例代码：
- en: '[PRE25]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Now, let''s run the `ng test` command. We should see the following output:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们运行`ng test`命令。我们应该看到以下输出：
- en: '![](assets/c07cd08c-8543-4d7f-9cbf-27c68f294423.png)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c07cd08c-8543-4d7f-9cbf-27c68f294423.png)'
- en: On the same lines, you can write test scripts to test your services, dependency
    classes, or interface classes.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在同一行上，您可以编写测试脚本来测试您的服务、依赖类或接口类。
- en: '**Use case #5**: Testing Angular services inside a component.'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '**用例＃5**：在组件内测试Angular服务。'
- en: We will continue to test Angular dependency injection. This time, we will import
    our services into the component and verify that it's working as expected.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将继续测试Angular依赖注入。这一次，我们将把我们的服务导入到组件中，并验证它是否按预期工作。
- en: In order to implement this use case, we will need to make changes to `AutoListComponent`.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这个用例，我们需要对`AutoListComponent`进行更改。
- en: 'Take a look at the changes we will make in the `auto-list.component.ts` file:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下我们将在`auto-list.component.ts`文件中进行的更改：
- en: '[PRE26]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'In the preceding code, we are importing the dealers service into the component. We
    are creating an instance of the service in the constructor method. We added a
    `findAuto` method, which calls the `getDealers` method using the instance of the
    `class _dealersService` service. In order to test the service in our component,
    let''s modify the `auto-list.component.spec.ts` file by adding the following code:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，我们将服务商服务导入到组件中。我们在构造方法中创建了服务的实例。我们添加了一个`findAuto`方法，它使用`class _dealersService`服务的实例调用`getDealers`方法。为了在我们的组件中测试服务，让我们通过添加以下代码修改`auto-list.component.spec.ts`文件：
- en: '[PRE27]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'In the preceding code, we have imported our service dealers into the test spec
    file of `AutoListComponent`. We are creating an instance of the service using
    `TestBed` in the `beforeEach` method. We are now good to start writing our test
    specs in order to test the service. Add the following code to `auto-list.component.spec.ts`:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，我们已经将我们的服务商导入到`AutoListComponent`的测试规范文件中。我们在`beforeEach`方法中使用`TestBed`创建了服务的实例。现在我们可以开始编写我们的测试规范，以测试服务。在`auto-list.component.spec.ts`中添加以下代码：
- en: '[PRE28]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: In the preceding code, using the instance of the component, we are calling the
    `findAuto` method, which will return the data from the service. It expects the
    count to be equal to `4`.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，使用组件的实例，我们调用`findAuto`方法，它将从服务返回数据。它期望计数等于`4`。
- en: 'Run the tests using the `ng test` command. We should see the following output:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`ng test`命令运行测试。我们应该看到以下输出：
- en: '![](assets/e5594392-e6b7-4f21-9b7c-e7734dda862a.png)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e5594392-e6b7-4f21-9b7c-e7734dda862a.png)'
- en: In this section, we learned about various techniques to test Angular dependency
    injection, including services, dependency classes, and testing services inside
    Angular components.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了各种测试Angular依赖注入的技术，包括服务、依赖类和在Angular组件内测试服务。
- en: Testing HTTP
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试HTTP
- en: In [Chapter 12](9610f27b-03db-4258-8a68-24eb3901117b.xhtml), *Integrating Backend
    Data Services*, we learned about integrating backend services and also learned
    about `HTTPModule` and `HTTPClient`. We also learned how to make HTTP requests
    to the server and process the responses.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第12章](9610f27b-03db-4258-8a68-24eb3901117b.xhtml)中，*集成后端数据服务*，我们学习了如何集成后端服务，还学习了`HTTPModule`和`HTTPClient`。我们还学习了如何向服务器发出HTTP请求并处理响应。
- en: In this section, we will learn how to write test scripts to test HTTP requests
    and responses. We will continue to use the same project we created in this chapter—the
    AutoStop project. Before we proceed further, it's important to have the REST API
    endpoints ready so that we can use them in our application.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何编写测试脚本来测试HTTP请求和响应。我们将继续使用本章中创建的同一个项目——AutoStop项目。在我们进一步进行之前，有必要准备好REST
    API端点，以便我们可以在我们的应用程序中使用它们。
- en: We will learn how to use the public API, `https://jsonplaceholder.typicode.com/`,
    which is available on the internet for free. We will also create a local server
    to return a mock JSON response from a local static JSON file.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将学习如何使用公共API `https://jsonplaceholder.typicode.com/`，这在互联网上是免费的。我们还将创建一个本地服务器，从本地静态JSON文件返回模拟的JSON响应。
- en: We must import `HttpClientModule` and `HttpClientTestingModule` into our `app.module.ts`
    file.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须将`HttpClientModule`和`HttpClientTestingModule`导入到我们的`app.module.ts`文件中。
- en: Before we proceed to write our test scripts for testing Angular HTTP, we will
    need to update our dealers service, which we have used throughout this chapter.
    We will implement a few methods that will make HTTP calls—POST/GET to process
    data to the REST API endpoints.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续编写用于测试Angular HTTP的测试脚本之前，我们需要更新我们在本章中一直使用的经销商服务。我们将实现一些方法，这些方法将进行HTTP调用
    - POST/GET以处理数据到REST API端点。
- en: 'We are working on the `dealers.service.ts` file, as follows:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在按照以下方式处理`dealers.service.ts`文件：
- en: '[PRE29]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: In the preceding code, we are importing the required HTTP modules; that is,
    `HttpClient`, `HttpHeaders`, `HttpParams`, and `HttpErrorResponse`, and also defining
    two REST endpoints that have the API URL for users and a specific user.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们正在导入所需的HTTP模块；即`HttpClient`、`HttpHeaders`、`HttpParams`和`HttpErrorResponse`，并定义了两个具有用户API
    URL和特定用户的REST端点。
- en: We can also have a local server up and running. You can have local APIs using
    the JSON server. You can learn more about this at [https://github.com/typicode/json-server](https://github.com/typicode/json-server).
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以启动本地服务器。您可以使用JSON服务器创建本地API。您可以在[https://github.com/typicode/json-server](https://github.com/typicode/json-server)了解更多信息。
- en: 'It''s time to add a few methods, through which we will make the HTTP calls
    to the REST endpoints:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候添加一些方法了，通过这些方法我们将对REST端点进行HTTP调用：
- en: '[PRE30]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: In the preceding code, we are creating two methods, which make an HTTP GET request.
    The first method, `getAllDealers`, makes a call and expects a JSON response of
    users. The second method, `getDealerById`, will pass `id` as `1` and expect a
    single user data response. In the `getDealerById` method, we are using `HttpParams`
    to set the parameters to send to the endpoint. We will also modify our `autoListComponent`
    component to add a few methods to our `Component` class.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们正在创建两个方法，它们进行HTTP GET请求。第一个方法`getAllDealers`进行调用，并期望获得用户的JSON响应。第二个方法`getDealerById`将传递`id`为`1`，并期望获得单个用户数据的响应。在`getDealerById`方法中，我们使用`HttpParams`来设置要发送到端点的参数。我们还将修改我们的`autoListComponent`组件，向我们的`Component`类中添加一些方法。
- en: 'We are adding the following code to our `auto-list.component.ts` file:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将向我们的`auto-list.component.ts`文件添加以下代码：
- en: '[PRE31]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: In the preceding code, we are adding a few methods, namely `findAuto`, `listDealerById`,
    and `getCarList`, which are making HTTP calls and calling methods that are in
    the dealers service.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们正在添加一些方法，即`findAuto`、`listDealerById`和`getCarList`，它们进行了HTTP调用并调用了经销商服务中的方法。
- en: Alright, now that we have our component and services set up, which are making
    HTTP calls, we are good to write our tests for HTTP.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，现在我们已经设置好了进行HTTP调用的组件和服务，我们可以开始编写我们的HTTP测试了。
- en: '**Use case #1**: We want to test whether a `GET` call was made to a particular
    URL.'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '**用例＃1**：我们要测试是否对特定URL进行了`GET`调用。'
- en: 'We will add the following code to the `auto-list.component.spec.ts` file:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将向`auto-list.component.spec.ts`文件添加以下代码：
- en: '[PRE32]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: In the preceding code, we are creating the instance of `AutoListComponent`, using
    which we will make a call to its `getCarList` method. In the `getCarList` method,
    we are making a call to the `http://localhost:3000/cars` URL to retrieve data.
    We are creating an instance of the `HttpTestingController` class named `httpMock`.
    Using the `httpMock` instance, we are asserting that at least one call should
    be made to the URL.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们正在创建`AutoListComponent`的实例，使用它来调用`getCarList`方法。在`getCarList`方法中，我们正在调用`http://localhost:3000/cars`的URL来检索数据。我们创建了一个名为`httpMock`的`HttpTestingController`类的实例。使用`httpMock`实例，我们断言至少应该对该URL进行一次调用。
- en: '**Use case #2**: We want to expect that the data returned as the result is
    more than `1`:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '**用例＃2**：我们希望期望结果返回的数据多于`1`：'
- en: '[PRE33]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: In the preceding code, using the instance of `AutoListComponent`, we are calling
    the `listDealerById` method. Using `subscribe`, we are mapping the result and
    verifying that the result data length is greater than `0`.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们使用`AutoListComponent`的实例调用`listDealerById`方法。使用`subscribe`，我们正在映射结果并验证结果数据长度是否大于`0`。
- en: '**Use case #3**: We want to verify that the data returned from the HTTP call
    matches the data. The following is the sample code for this use case scenario.'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '**用例＃3**：我们想要验证从HTTP调用返回的数据是否匹配数据。以下是此用例场景的示例代码。'
- en: '[PRE34]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: In the preceding code, using the `DealersService` instance, we are making a
    call to the `getDealers` methods. We are asserting data of the first index property
    name to be `North Auto`.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们使用`DealersService`实例调用`getDealers`方法。我们断言第一个索引属性名称的数据应为`North Auto`。
- en: 'Run the tests using the `ng test` command. We should see the following output,
    as displayed and highlighted in the following screenshot:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`ng test`命令运行测试。我们应该看到以下输出，如下面的截图所示：
- en: '![](assets/949ad4eb-06bf-4092-a884-3c8e71f19e27.png)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/949ad4eb-06bf-4092-a884-3c8e71f19e27.png)'
- en: If you see the preceding output, that's brilliant.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您看到了上述输出，那太棒了。
- en: In this section, we have learned how to test components, services, and methods
    that are making HTTP request calls.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了如何测试进行HTTP请求调用的组件、服务和方法。
- en: Summary
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Testing is an important aspect of the application life cycle, and writing test
    scripts is crucial for application development success. We started with an overview
    of the frameworks supported by Angular, namely Jasmine and Karma. We learned how
    to run our tests using the `ng test` command. Then, we learned how to use the
    spec files autogenerated by Angular for all the components and services.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 测试是应用程序生命周期中的重要方面，编写测试脚本对于应用程序开发成功至关重要。我们首先概述了Angular支持的框架，即Jasmine和Karma。我们学习了如何使用`ng
    test`命令运行测试。然后，我们学习了如何使用Angular自动生成的spec文件来为所有组件和服务编写测试脚本。
- en: We learned how to write test scripts to test Angular components, built-in directives,
    services, and routing. We wrote test scripts for built-in directives, such as `ngFor`,
    `ngIf`, `ngSwitch`, and `ngModel`. We also covered use cases for testing Angular
    routing. Then, we created a `menu` component and wrote test scripts to test various
    use cases for the `menu` component.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学习了如何编写测试脚本来测试Angular组件、内置指令、服务和路由。我们为内置指令编写了测试脚本，例如`ngFor`、`ngIf`、`ngSwitch`和`ngModel`。我们还涵盖了用于测试Angular路由的用例。然后，我们创建了一个`menu`组件，并编写了测试脚本来测试`menu`组件的各种用例。
- en: We also explored testing dependency injection and services. We learned about
    various use cases and wrote test scripts for Angular services and HTTP calls.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还探讨了测试依赖注入和服务。我们学习了各种用例，并为Angular服务和HTTP调用编写了测试脚本。
- en: In the next chapter, we will explore advanced Angular topics, such as custom
    directives and custom form validations.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨高级的Angular主题，如自定义指令和自定义表单验证。
- en: Read on!
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 继续阅读！
