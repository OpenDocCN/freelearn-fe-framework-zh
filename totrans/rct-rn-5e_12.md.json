["```js\nvar xhr = new XMLHttpRequest();\nxhr.onreadystatechange = function() {\n  if (xhr.readyState == XMLHttpRequest.DONE) {\n    if (xhr.status === 200) {\n      console.log(xhr.responseText);\n    } else {\n      console.error('Error fetching data');\n    }\n  }\n};\nxhr.open('GET', 'http://example.com', true);\nxhr.send(); \n```", "```js\nfetch('http://example.com/data')\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error('Error:', error)); \n```", "```js\naxios.get('http://example.com/data')\n  .then(response => console.log(response.data))\n  .catch(error => console.error('Error:', error)); \n```", "```js\nimport { GraphQLClient, gql } from 'graphql-request';\nconst endpoint = 'http://example.com/graphql';\nconst client = new GraphQLClient(endpoint);\nconst query = gql'\n  query {\n    user(id: 123) {\n      name\n      email\n    }\n  }\n';\nclient.request(query)\n  .then(data => console.log(data))\n  .catch(error => console.error('Error:', error)); \n```", "```js\nimport { useQuery } from 'react-query';\nfunction UserProfile({ userId }) {\n  const { data, error, isLoading } = useQuery(userId, fetchUser);\n  if (isLoading) return <div>Loading...</div>;\n  if (error) return <div>Error: {error.message}</div>;\n  return (\n    <div>\n      <h1>{data.name}</h1>\n      <p>Email: {data.email}</p>\n    </div>\n  );\n} \n```", "```js\nconst socket = new WebSocket('ws://example.com');\nsocket.onopen = function(event) {\n  console.log('Connection established');\n};\nsocket.onmessage = function(event) {\n  console.log('Message from server ', event.data);\n};\nsocket.onerror = function(error) {\n  console.error('WebSocket Error ', error);\n}; \n```", "```js\nnpm create vite@latest \n```", "```js\nexport interface GitHubUser {\n  login: string;\n  id: number;\n  avatar_url: string;\n  html_url: string;\n  gists_url: string;\n  repos_url: string;\n  name: string;\n  company: string | null;\n  location: string | null;\n  bio: string | null;\n  public_repos: number;\n  public_gists: number;\n  followers: number;\n  following: number;\n} \n```", "```js\nconst UserInfo = ({ user }: GitHubUserProps) => {\n  return (\n    <div>\n      <img src={user.avatar_url} alt={user.login} width=\"100\" height=\"100\" />\n      <h2>{user.name || user.login}</h2>\n      <p>{user.bio}</p>\n      <p>Location: {user.location || \"Not specified\"}</p>\n      <p>Company: {user.company || \"Not specified\"}</p>\n      <p>Followers: {user.followers}</p>\n      <p>Following: {user.following}</p>\n      <p>Public Repos: {user.public_repos}</p>\n      <p>Public Gists: {user.public_gists}</p>\n      <p>\n        GitHub Profile:{\" \"}\n        <a href={user.html_url} target=\"_blank\" rel=\"noopener noreferrer\">\n          {user.login}\n        </a>\n      </p>\n    </div>\n  );\n}; \n```", "```js\nfunction App() {\n  const [user, setUser] = useState<GitHubUser>();\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    setLoading(true);\n    fetch(\"https://api.github.com/users/sakhnyuk\")\n      .then((response) => response.json())\n      .then((data) => setUser(data))\n      .catch((error) => console.log(error))\n      .finally(() => setLoading(false));\n  }, []); \n```", "```js\n return (\n    <div>\n      {loading && <p>Loading...</p>}\n      {!loading && !user && <p>No user found.</p>}\n      {user && <UserInfo user={user} />}\n    </div>\n  );\n} \n```", "```js\nnpm run dev \n```", "```js\nnpm install axios \n```", "```js\nclass API {\n  private apiInstance: AxiosInstance;\n  constructor() {\n    this.apiInstance = axios.create({\n      baseURL: \"https://api.github.com\",\n    });\n    this.apiInstance.interceptors.request.use((config) => {\n      console.log(\"Request:\", '${config.method?.toUpperCase()} ${config.url}');\n      return config;\n    });\n    this.apiInstance.interceptors.response.use(\n      (response) => {\n        console.log(\"Response:\", response.data);\n        return response;\n      },\n      (error) => {\n        console.log(\"Error:\", error);\n        return Promise.reject(error);\n      }\n    );\n  }\n  getProfile(username: string) {\n    return this.apiInstance.get<GitHubUser>('/users/${username}');\n  }\n}\nexport default new API(); \n```", "```js\nfunction App() {\n  const [user, setUser] = useState<GitHubUser>();\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    setLoading(true);\n    api\n      .getProfile(\"sakhnyuk\")\n      .then((res) => setUser(res.data))\n      .finally(() => setLoading(false));\n  }, []);\n  return (\n    <div>\n      {loading && <p>Loading...</p>}\n      {!loading && !user && <p>No user found.</p>}\n      {user && <UserInfo user={user} />}\n    </div>\n  );\n} \n```", "```js\nnpm install @tanstack/react-query \n```", "```js\nconst queryClient = new QueryClient();\nReactDOM.createRoot(document.getElementById(\"root\")!).render(\n  <QueryClientProvider client={queryClient}>\n    <App />\n  </QueryClientProvider>\n); \n```", "```js\nconst userFetcher = (username: string) =>\n  fetch(\"https://api.github.com/users/sakhnyuk\")\n  .then((response) => response.json()); \n```", "```js\nfunction App() {\n  const {\n    data: user,\n    isPending,\n    isError,\n  } = useQuery({\n    queryKey: [\"githubUser\"],\n    queryFn: () => userFetcher(\"sakhnyuk\"),\n  });\n  return (\n    <div>\n      {isPending && <p>Loading...</p>}\n      {isError && <p>Error fetching data</p>}\n      {user && <UserInfo user={user} />}\n    </div>\n  );\n} \n```", "```js\nnpm install @apollo/client graphql \n```", "```js\nconst client = new ApolloClient({\n  uri: \"https://api.github.com/graphql\",\n  cache: new InMemoryCache(),\n  headers: {\n    Authorization: 'Bearer YOUR_PAT', // Put your GitHub personal access token here\n  },\n});\nReactDOM.createRoot(document.getElementById(\"root\")!).render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>\n); \n```", "```js\nconst GET_GITHUB_USER = gql'\n  query GetGithubUser($username: String!) {\n    user(login: $username) {\n      login\n      id\n      avatarUrl\n      bio\n      name\n      company\n      location\n    }\n  }\n'; \n```", "```js\nfunction App() {\n  const { data, loading, error } = useQuery(GET_GITHUB_USER, {\n    variables: { username: \"sakhnyuk\" },\n  });  \n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error fetching data</p>;\n  const user = data.user;\n  return (\n    <div>\n      <UserInfo user={user} />\n    </div>\n  );\n} \n```"]