["```js\ngit clone https://github.com/PacktPublishing/React-Application-Architecture-for-Production.git\n```", "```js\nnpm install\n```", "```js\ncp .env.example .env\n```", "```js\nnpm run stage:switch\n```", "```js\n? What stage do you want to switch to? (Use arrow\n keys)\n❯ chapter-02\n  chapter-03\n  chapter-03-start\n  chapter-04\n  chapter-04-start\n  chapter-05\n  chapter-05-start\n(Move up and down to reveal more choices)\n```", "```js\nconst Page = () => {\n     return <div>Welcome to the page!</div>\n}\nexport default Page;\n```", "```js\n// pages/users/[userId].tsx\nimport { useRouter } from 'next/router';\nconst UserProfile = () => {\n     const router = useRouter();\n     const userId = router.query.userId;\n     return <div>User: {userId}</div>;\n}\nexport default UserProfile\n```", "```js\n// pages/users/[userId].tsx\nimport { useRouter } from 'next/router';\nimport { useUser } from './api';\nconst UserProfile = () => {\n     const router = useRouter();\n     const userId = router.query.userId;\n     const { user, isLoading } = useUser(userId);\n     if(!user && isLoading) return <div>Loading...</div>;\n     if(!user) return <div>User not found!</div>;\n     return <div>User: {user.name}</div>;\n}\n```", "```js\n<div>Loading...</div>\n```", "```js\n<div>User: {user.name}</div>\n```", "```js\n// pages/users/[userId].tsx\nimport { useRouter } from 'next/router';\nimport { getUser } from './api';\nconst UserProfile = ({ user }) => {\n     const router = userRouter();\n     const userId = router.query;\n     const { user } = useUser(userId);\n     if(!user) return <div>User not found!</div>;\n     return <div>User: {user.name}</div>;\n}\nexport const getServerSideProps = async ({ params }) => {\n     const userId = params.userId;\n     const user = await getUser(userId);\n     return {\n          props: {\n               user\n          }\n     }\n}\n```", "```js\n<div>User: {user.name}</div>\n```", "```js\nimport Head from 'next/head';\nexport type SeoProps = {\n  title: string;\n};\nexport const Seo = ({ title }: SeoProps) => {\n  return (\n    <Head>\n      <title>{title}</title>\n    </Head>\n  );\n};\n```", "```js\nimport { Seo } from '@/components/seo';\n```", "```js\nconst LandingPage = () => {\n  return (\n    <>\n      <Seo title=\"Jobs App\" />\n      <Center>\n      {/* rest of the component */}\n      </Center>\n    </>\n  );\n};\nexport default LandingPage\n```", "```js\nconst Layout = ({ children }) => {\n     return (\n          <div>\n               <Header />\n               {children}\n               <Footer />\n          </div>\n     )\n}\n```", "```js\nconst Page1 = () => {\n     const user = useUser();\n     if (!user) {\n          return (\n               <Layout>\n                    <div>Unauthenticated!</div>\n               </Layout\n          )\n     }\n     return (\n          <Layout>\n               <h1>Page 1</h1>\n          </Layout\n     )\n}\n```", "```js\nimport { NextPage } from 'next';\nimport type { AppProps } from 'next/app';\nimport { ReactElement, ReactNode } from 'react';\nimport { AppProvider } from '@/providers/app';\ntype NextPageWithLayout = NextPage & {\n  getLayout?: (page: ReactElement) => ReactNode;\n};\ntype AppPropsWithLayout = AppProps & {\n  Component: NextPageWithLayout;\n};\nconst App = ({\n  Component,\n  pageProps,\n}: AppPropsWithLayout) => {\n  const getLayout =\n    Component.getLayout ?? ((page) => page);\n  const pageContent = getLayout(\n    <Component {...pageProps} />\n  );\n  return <AppProvider>{pageContent}</AppProvider>;\n};\nexport default App;\n```", "```js\nimport { Heading, Stack } from '@chakra-ui/react';\nimport {\n  GetServerSidePropsContext,\n  InferGetServerSidePropsType,\n} from 'next';\nimport { ReactElement } from 'react';\nimport { NotFound } from '@/components/not-found';\nimport { Seo } from '@/components/seo';\nimport { JobsList, Job } from '@/features/jobs';\nimport { OrganizationInfo } from '@/features/\n  organizations';\nimport { PublicLayout } from '@/layouts/public-layout';\nimport {\n  getJobs,\n  getOrganization,\n} from '@/testing/test-data';\n```", "```js\ntype PublicOrganizationPageProps =\n  InferGetServerSidePropsType<typeof getServerSideProps>;\nconst PublicOrganizationPage = ({\n  organization,\n  jobs,\n}: PublicOrganizationPageProps) => {\n  if (!organization) return <NotFound />;\n  return (\n    <>\n      <Seo title={organization.name} />\n      <Stack\n        spacing=\"4\"\n        w=\"full\"\n        maxW=\"container.lg\"\n        mx=\"auto\"\n        mt=\"12\"\n        p=\"4\"\n      >\n        <OrganizationInfo organization={organization} />\n        <Heading size=\"md\" my=\"6\">\n          Open Jobs\n        </Heading>\n        <JobsList\n          jobs={jobs}\n          organizationId={organization.id}\n          type=\"public\"\n        />\n      </Stack>\n    </>\n  );\n};\n```", "```js\nPublicOrganizationPage.getLayout = function getLayout(\n  page: ReactElement\n) {\n  return <PublicLayout>{page}</PublicLayout>;\n};\n```", "```js\nexport default PublicOrganizationPage;\n```", "```js\nexport const getServerSideProps = async ({\n  params,\n}: GetServerSidePropsContext) => {\n  const organizationId = params?.organizationId as string;\n  const [organization, jobs] = await Promise.all([\n    getOrganization(organizationId).catch(() => null),\n    getJobs(organizationId).catch(() => [] as Job[]),\n  ]);\n  return {\n    props: {\n      organization,\n      jobs,\n    },\n  };\n};\n```", "```js\nimport { Stack, Button } from '@chakra-ui/react';\nimport {\n  GetServerSidePropsContext,\n  InferGetServerSidePropsType,\n} from 'next';\nimport { ReactElement } from 'react';\nimport { NotFound } from '@/components/not-found';\nimport { Seo } from '@/components/seo';\nimport { PublicJobInfo } from '@/features/jobs';\nimport { PublicLayout } from '@/layouts/public-layout';\nimport {\n  getJob,\n  getOrganization,\n} from '@/testing/test-data';\n```", "```js\ntype PublicJobPageProps = InferGetServerSidePropsType<\n  typeof getServerSideProps\n>;\nexport const PublicJobPage = ({\n  job,\n  organization,\n}: PublicJobPageProps) => {\n  const isInvalid =\n    !job ||\n    !organization ||\n    organization.id !== job.organizationId;\n  if (isInvalid) {\n    return <NotFound />;\n  }\n  return (\n    <>\n      <Seo title={`${job.position} | ${job.location}`} />\n      <Stack w=\"full\">\n        <PublicJobInfo job={job} />\n        <Button\n          bg=\"primary\"\n          color=\"primaryAccent\"\n          _hover={{\n            opacity: '0.9',\n          }}\n          as=\"a\"\n          href={`mailto:${organization?.email}?subject=\n            Application for ${job.position} position`}\n          target=\"_blank\"\n        >\n          Apply\n        </Button>\n      </Stack>\n    </>\n  );\n};\n```", "```js\nPublicJobPage.getLayout = function getLayout(\n  page: ReactElement\n) {\n  return <PublicLayout>{page}</PublicLayout>;\n};\nexport default PublicJobPage;\n```", "```js\nexport const getServerSideProps = async ({\n  params,\n}: GetServerSidePropsContext) => {\n  const organizationId = params?.organizationId as string;\n  const jobId = params?.jobId as string;\n  const [organization, job] = await Promise.all([\n    getOrganization(organizationId).catch(() => null),\n    getJob(jobId).catch(() => null),\n  ]);\n  return {\n    props: {\n      job,\n      organization,\n    },\n  };\n};\n```", "```js\nimport { PlusSquareIcon } from '@chakra-ui/icons';\nimport { Heading, HStack } from '@chakra-ui/react';\nimport { ReactElement } from 'react';\nimport { Link } from '@/components/link';\nimport { Loading } from '@/components/loading';\nimport { Seo } from '@/components/seo';\nimport { JobsList } from '@/features/jobs';\nimport { DashboardLayout } from '@/layouts/dashboard-layout';\nimport { useJobs, useUser } from '@/testing/test-data';\n```", "```js\nconst DashboardJobsPage = () => {\n  const user = useUser();\n  const jobs = useJobs(user.data?.organizationId ?? '');\n  if (jobs.isLoading) return <Loading />;\n  if (!user.data) return null;\n  return (\n    <>\n      <Seo title=\"Jobs\" />\n      <HStack\n        mb=\"8\"\n        align=\"center\"\n        justify=\"space-between\"\n      >\n        <Heading>Jobs</Heading>\n        <Link\n          icon={<PlusSquareIcon />}\n          variant=\"solid\"\n          href=\"/dashboard/jobs/create\"\n        >\n          Create Job\n        </Link>\n      </HStack>\n      <JobsList\n        jobs={jobs.data || []}\n        isLoading={jobs.isLoading}\n        organizationId={user.data.organizationId}\n        type=\"dashboard\"\n      />\n    </>\n  );\n};\nDashboardJobsPage.getLayout = function getLayout(\n  page: ReactElement\n) {\n  return <DashboardLayout>{page}</DashboardLayout>;\n};\nexport default DashboardJobsPage;\n```", "```js\nimport { useRouter } from 'next/router';\nimport { ReactElement } from 'react';\nimport { Loading } from '@/components/loading';\nimport { NotFound } from '@/components/not-found';\nimport { Seo } from '@/components/seo';\nimport { DashboardJobInfo } from '@/features/jobs';\nimport { DashboardLayout } from '@/layouts/\n  dashboard-layout';\nimport { useJob } from '@/testing/test-data';\n```", "```js\nconst DashboardJobPage = () => {\n  const router = useRouter();\n  const jobId = router.query.jobId as string;\n  const job = useJob(jobId);\n  if (job.isLoading) {\n    return <Loading />;\n  }\n  if (!job.data) {\n    return <NotFound />;\n  }\n  return (\n    <>\n      <Seo\n        title={`${job.data.position} | ${job.data.\n          location}`}\n      />\n      <DashboardJobInfo job={job.data} />\n    </>\n  );\n};\nDashboardJobPage.getLayout = function getLayout(\n  page: ReactElement\n) {\n  return <DashboardLayout>{page}</DashboardLayout>;\n};\nexport default DashboardJobPage;\n```", "```js\nimport { Heading } from '@chakra-ui/react';\nimport { useRouter } from 'next/router';\nimport { ReactElement } from 'react';\nimport { Seo } from '@/components/seo';\nimport { CreateJobForm } from '@/features/jobs';\nimport { DashboardLayout } from '@/layouts/\n  dashboard-layout';\n```", "```js\nconst DashboardCreateJobPage = () => {\n  const router = useRouter();\n  const onSuccess = () => {\n    router.push(`/dashboard/jobs`);\n  };\n  return (\n    <>\n      <Seo title=\"Create Job\" />\n      <Heading mb=\"8\">Create Job</Heading>\n      <CreateJobForm onSuccess={onSuccess} />\n    </>\n  );\n};\nDashboardCreateJobPage.getLayout = function getLayout(\n  page: ReactElement\n) {\n  return <DashboardLayout>{page}</DashboardLayout>;\n};\nexport default DashboardCreateJobPage;\n```", "```js\nimport { Center } from '@chakra-ui/react';\nimport { Link } from '@/components/link';\nimport { NotFound } from '@/components/not-found';\nconst NotFoundPage = () => {\n  return (\n    <>\n      <NotFound />\n      <Center>\n        <Link href=\"/\">Home</Link>\n      </Center>\n    </>\n  );\n};\nexport default NotFoundPage;\n```"]