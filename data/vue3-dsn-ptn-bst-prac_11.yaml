- en: '11'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '11'
- en: Bonus Chapter - UX Patterns
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 奖励章节 - UX模式
- en: A long time ago, computer software was sold with heavy, printed manuals and
    in many cases, also with specialized training. While some of this still applies
    to corporate applications and specialized hardware, such a concept has almost
    completely disappeared from the consumer market. Imagine that, for each website,
    you had to read a manual and attend three months of training classes before even
    using it. How come, today, a user can be presented with a new application and
    somehow manage to accomplish basic tasks at first sight? No doubt, a great contributor
    to this current situation is the years of study and progress in the areas of human-computer
    interactions, a discipline almost as old as computers themselves.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 很久以前，计算机软件是与重型印刷手册一起销售的，在许多情况下，还附有专门的培训。虽然其中一些仍然适用于企业应用程序和专用硬件，但这种概念几乎已经完全从消费市场消失。想象一下，对于每个网站，你都必须阅读手册并参加三个月的培训课程，才能开始使用它。那么，为什么今天，用户可以面对一个新应用程序，并且能够一眼就完成基本任务呢？毫无疑问，对这种当前情况做出巨大贡献的是人类计算机交互领域多年的研究和进步，这个学科几乎与计算机本身一样古老。
- en: 'In this chapter, we will take a step back from the intricacies of inner-working
    software patterns and architecture and look at some of the well-established patterns
    for designing a **user interface** (**UI**) and **user experience** (**UX**).
    We will do the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将从软件模式和工作原理的复杂性以及架构中退一步，看看一些为设计**用户界面**（**UI**）和**用户体验**（**UX**）而建立的良好模式。我们将做以下几件事：
- en: Understand the differences between UI and UX
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解UI和UX之间的区别
- en: Become familiar with common UX patterns in web applications
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 熟悉网络应用中的常见UX模式
- en: Learn about the evil side of UX with dark patterns.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解UX的阴暗面——暗模式。
- en: By the end of this chapter, you will have a broad understanding of what UX patterns
    are, the principles they are based on, what the most common approaches are today,
    and the effects they produce for the user, be they positive or negative. You will
    also learn and develop a common language to interact with UI and UX designers
    and other developers.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将广泛了解UX模式是什么，它们基于哪些原则，目前最常见的方法有哪些，以及它们对用户产生的影响，无论是积极的还是消极的。你还将学习和发展一种共同的语言，以便与UI和UX设计师以及其他开发者进行交流。
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: This chapter is mostly informative; however, small examples are discussed and
    implemented in Vue 3, as they demonstrate the use of a technique not seen this
    far in the book. For the complete source code, please refer to the project folder
    for the chapter in the book’s repository at [https://github.com/PacktPublishing/Vue.js-3-Design-Patterns-and-Best-Practices/tree/main/Chapter11](https://github.com/PacktPublishing/Vue.js-3-Design-Patterns-and-Best-Practices/tree/main/Chapter11).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章主要是信息性的；然而，本章讨论并实现了Vue 3中的小型示例，因为它们展示了本书到目前为止尚未见到的技术。对于完整的源代码，请参考书中项目文件夹的完整源代码，该文件夹位于书籍仓库的[https://github.com/PacktPublishing/Vue.js-3-Design-Patterns-and-Best-Practices/tree/main/Chapter11](https://github.com/PacktPublishing/Vue.js-3-Design-Patterns-and-Best-Practices/tree/main/Chapter11)。
- en: 'Check out the following video to see the Code in Action: [https://packt.link/5ymkr](https://packt.link/5ymkr)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频，看看代码的实际应用：[https://packt.link/5ymkr](https://packt.link/5ymkr)
- en: UI design versus UX design
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: UI设计与UX设计对比
- en: 'It is common to hear these two terms associated or used indistinctively, and
    in some cases, both responsibilities are merged into the same role in a team,
    which adds to the confusion. While there is some overlapping, as often happens
    in computer science disciplines, we will focus on the differences for learning
    purposes:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 常常听到这两个术语被关联或无区别地使用，在某些情况下，这两个职责合并为一个团队中的同一角色，这增加了混乱。虽然有些重叠，正如在计算机科学学科中经常发生的那样，我们将专注于学习目的的差异：
- en: '**UI design** is in charge of defining the visual language to represent information
    and capture user input to interact with the application. It covers the design
    of visual styles, typography, interactions, colors, sizes, animations, sounds,
    and so on that make up the interface between humans and computers (software and
    hardware). This applies to visual mediums (web, mobile, etc.) as well as other
    types such as natural language interfaces (think of AI assistants such as Siri,
    Alexa, etc.).'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**UI设计**负责定义表示信息和捕获用户输入以与应用程序交互的视觉语言。它涵盖了视觉风格、排版、交互、颜色、尺寸、动画、声音等设计，这些构成了人与计算机（软件和硬件）之间的界面。这适用于视觉媒介（网络、移动等）以及其他类型，如自然语言界面（例如，考虑Siri、Alexa等AI助手）。'
- en: '**UX design** includes the conditions that affect and guide the UI design but
    encompasses a broader view focused on the user’s perception of the system, company,
    or feature they come to interact with. It involves elements beyond software or
    hardware, with aspects such as support, promotion, post-services, and so on. The
    aim is to create a wide and, hopefully, successful positive experience from the
    user’s perspective. Under this definition, it also collaborates with other disciplines,
    such as marketing, customer support, distribution, product management, brand recognition,
    and so on. It has the primary objective to alter or create the user’s perception
    that the product, service, or system is easy to use, efficient, and above all,
    useful for their purposes.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**UX设计**包括影响和指导UI设计的条件，但具有更广泛的视角，关注用户对系统、公司或他们与之互动的功能的认知。它涉及软件或硬件之外的元素，如支持、推广、售后服务等。目标是创造一个广泛且希望成功的正面用户体验。根据这个定义，它还与其他学科合作，如营销、客户支持、分销、产品管理、品牌识别等。其主要目标是改变或创造用户对产品、服务或系统易于使用、高效，并且最重要的是，对他们有用的认知。'
- en: Understanding the principles and objectives of each discipline will help us
    develop better software and have a common ground for understanding when collaborating
    with those in these assignments. Without UI and UX, even the best-produced software
    may fall into oblivion. Software history is full of examples of companies that
    went the way of the dodo bird, even with superior products to their competitors,
    for neglecting the user experience or having a bad visual design. Sometimes, the
    cover of the book is as important as the content...
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 理解每个学科的原则和目标将帮助我们开发更好的软件，并在与这些任务中的合作者交流时有一个共同的基础。没有UI和UX，即使是最优秀的软件也可能被遗忘。软件历史充满了公司走向灭绝的例子，即使他们的产品比竞争对手更优越，也是因为忽视了用户体验或视觉设计不佳。有时，书的封面和内容一样重要...
- en: The principles of UI design
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: UI设计的原则
- en: At its core, UI design has the objective of creating an interface that the user
    finds easy to use, efficient, informative, and enjoyable. Marketing concepts such
    as user retention and satisfaction rely heavily on product design. For our purposes,
    we will limit the introduction of UIs to on-display application interfaces (presented
    through a visual medium, such as a screen or touch device).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: UI设计的核心目标是创建一个用户认为易于使用、高效、信息丰富且令人愉悦的界面。用户保留和满意度等营销概念在很大程度上依赖于产品设计。就我们的目的而言，我们将UI的介绍限制在显示屏上的应用程序界面（通过视觉媒介，如屏幕或触摸设备展示）。
- en: There is ample documentation studying UI design in detail, with engineering
    precision and well-defined industry standards. Each aspect has its own set of
    rules that a good UI designer needs to keep in mind. A web designer will see things
    differently from an industrial designer, for example. In our case, most of the
    patterns for UI design have been included since the beginning in the HTML standard,
    so most, if not all, of what we will see as patterns are already familiar to you
    and the end user. How they work, or the principles they follow, however, is not
    something that is commonly discussed or self-evident. For example, why is the
    “X” to close a window in the top-right corner? What does each different menu icon
    mean? Why does the **Start** button appear on the top or bottom-left corner of
    the screen? Why are some features hard to find, while others are accessible at
    first sight? All these questions have a solution rooted in UI design and UX patterns.
    With that in mind, let’s review some of the UI principles, and then move on to
    the UX patterns.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 有大量的文档详细研究了UI设计，具有工程精度和明确的行业标准。每个方面都有自己的规则，优秀的UI设计师需要牢记。例如，网页设计师和工业设计师看待事物的方式不同。在我们的案例中，UI设计的模式大多数从一开始就被包含在HTML标准中，所以我们将看到的模式大多数，如果不是全部，对你和最终用户来说都是熟悉的。然而，它们是如何工作的，或者它们遵循的原则，并不是通常讨论或显而易见的事情。例如，为什么关闭窗口的“X”在右上角？每个不同的菜单图标代表什么？为什么“开始”按钮出现在屏幕的右上或左下角？为什么有些功能难以找到，而其他功能则一目了然？所有这些问题都有根植于UI设计和UX模式的解决方案。考虑到这一点，让我们回顾一些UI原则，然后继续讨论UX模式。
- en: Sufficient contrast or distinction between elements
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 元素之间要有足够的对比度或区分度
- en: 'This principle states that the elements of a page should be clearly distinguishable
    from each other and representative of their function. It reflects the need to
    organize the visual elements in a hierarchy using size, colors, typography, margins,
    and white space in such a way that each function is clearly represented and distinct
    from others. The main objective is to direct the user’s attention to the focal
    point of the interface. Let’s see the Packt home page ([https://www.packtpub.com/](https://www.packtpub.com/))
    as an example:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这个原则指出，页面上的元素应该彼此清晰可辨，并代表其功能。它反映了使用大小、颜色、字体、边距和空白来组织视觉元素，以便每个功能都能清晰表示并与其他功能区分开来。主要目标是引导用户的注意力到界面的焦点。让我们以Packt主页（[https://www.packtpub.com/](https://www.packtpub.com/））为例：
- en: '![Figure 11.1 – Packt’s home page and color contrast](img/Figure_11.01_B18602.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![图11.1 – Packt的主页和颜色对比](img/Figure_11.01_B18602.jpg)'
- en: Figure 11.1 – Packt’s home page and color contrast
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.1 – Packt的主页和颜色对比
- en: 'In this example, most of the content uses a limited number of colors (a “palette”),
    and the two buttons have high contrast, which draws the attention of the user:
    the **TRY FOR FREE** and **START LEARNING NOW** buttons. Clearly, the designer
    has set the focus point for these two actions.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，大部分内容使用有限的颜色（一个“调色板”），两个按钮具有高对比度，这吸引了用户的注意力：**免费试用**和**立即开始学习**按钮。显然，设计师已经为这两个动作设置了焦点。
- en: 'Related to this principle, there is a design “rule” applied in this screenshot
    that is handy to keep in mind: the *60-30-10 color rule*. This means that 60%
    of the section must have a base color (here, it is dark brown), 30% is a primary
    color (used for regular text, menus, and the image, which, here, is white), and
    10% is reserved for the secondary color or high contrast (used for the focal point,
    or the “call to action” buttons in orange). Let’s continue analyzing this page
    to see the other principles of UI design.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 与此原则相关，在这个截图中有一种设计“规则”被应用，这是一个值得记住的实用规则：*60-30-10颜色规则*。这意味着该部分必须有60%的基础色（在这里是深棕色），30%是主色（用于常规文本、菜单和图像，在这里是白色），而10%则保留用于辅助色或高对比度（用于焦点或“行动号召”按钮，在这里是橙色）。让我们继续分析这个页面，看看其他UI设计原则。
- en: Stimulating repetition and being consistent
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 激发重复和保持一致性
- en: This principle is based on the concept that people learn through repetition.
    It indicates that the same task, even done through different interfaces, should
    emulate more or less the same repetitive behavior from the user. For example,
    if you ask a user to open a word processor, and you ask them to open a file, where
    will they try to click? Most “seasoned” users will take their mouse to the upper-left
    part of the window and look for either an icon that represents “**Open**,” or
    the **File** menu. Why is this? It is because this placement has become standard,
    and we have learned through repetition where to find it. If you placed the **File**
    menu at the bottom right of the screen, most, if not all, of your users would
    have trouble finding it without direction.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这个原则基于人们通过重复学习的概念。它表明，即使是通过不同的界面完成的相同任务，也应该模拟出更多或更少的重复行为。例如，如果你要求用户打开一个文字处理器，并要求他们打开一个文件，他们会尝试在哪里点击？大多数“经验丰富”的用户会将鼠标移到窗口的左上角，寻找代表“**打开**”的图标，或者**文件**菜单。为什么是这样？因为这已经成为了标准，我们通过重复学习知道了在哪里可以找到它。如果你将**文件**菜单放置在屏幕的右下角，大多数，如果不是所有用户，在没有指示的情况下都会很难找到它。
- en: 'Another example of repetition and consistency appears when displaying visual
    elements – more importantly, when they are part of a list or common set. Let’s
    follow with an example from the Packt Publishing website:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 当显示视觉元素时，重复和一致性的另一个例子出现在它们是列表或常见集合的一部分时。让我们通过Packt出版社网站的一个例子来继续：
- en: '![Figure 11.2 – Cards with books](img/Figure_11.02_B18602.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![图11.2 – 书籍卡片](img/Figure_11.02_B18602.jpg)'
- en: Figure 11.2 – Cards with books
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.2 – 书籍卡片
- en: 'In the preceding example, the designer used repetition to display the books
    in prime time, by using vertical “cards” for each item. Each card repeats a similar
    layout, colors, and format. Once you understand what one displays, the same applies
    to all the others: this is a repetition of visual design and is important, so
    the user doesn’t have to “re-learn” the interface for each book.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，设计师通过重复使用垂直的“卡片”来展示黄金时段的书籍。每个卡片都重复了相似的布局、颜色和格式。一旦你理解了一个卡片显示的内容，同样的规则也适用于其他所有卡片：这是视觉设计的重复，这一点很重要，因此用户不需要为每一本书重新学习界面。
- en: In short, it is the repetition of placements, actions, and visual styles. Let’s
    move to the next one.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，它是放置、动作和视觉风格的重复。让我们转向下一个。
- en: Be mindful of alignment and direction
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 注意对齐和方向
- en: The alignment of elements (graphics, fonts, etc.) creates a sense of order and
    organization, showing that such elements belong to the same group or have the
    same weight or importance. We are mostly familiar with alignment (and spacing)
    when working with fonts, but the same concept applies to graphical elements such
    as icons, sections, images, and so on. From the previous figure, notice how the
    tabs are aligned, as well as the cards and the content therein. Just by alignment
    and style alone, we can distinguish what belongs to which natural group.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 元素（图形、字体等）的对齐创造出一种秩序和组织感，表明这些元素属于同一组或具有相同的权重或重要性。我们在处理字体时大多熟悉对齐（和间距），但同样的概念也适用于图标、部分、图像等图形元素。从上一幅图中，注意标签是如何对齐的，以及卡片及其内容。仅通过对齐和风格，我们就可以区分哪些属于哪个自然分组。
- en: 'Another example of alignment is clearly seen when only using typography for
    menus and features. For example, in the footer of this page, even without the
    use of icons or visual boundaries, it is easy to see what option belongs to each
    natural group just by using space and alignment:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当仅使用排版来显示菜单和功能时，可以看到对齐的另一个例子。例如，在这个页面的页脚中，即使没有使用图标或视觉边界，仅通过使用空间和对齐，也很容易看出哪个选项属于每个自然分组：
- en: '![Figure 11.3 – Packt’s website footer, using alignment to display natural
    groups](img/Figure_11.03_B18602.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.3 – Packt 网站页脚，使用对齐显示自然分组](img/Figure_11.03_B18602.jpg)'
- en: Figure 11.3 – Packt’s website footer, using alignment to display natural groups
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.3 – Packt 网站页脚，使用对齐显示自然分组
- en: 'This example, though simple, already shows the use of contrast (bold versus
    normal font-weight), consistency through repetition, alignment, and also the next
    principle we will see here: proximity.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这个例子很简单，但它已经展示了对比（粗体与正常字体粗细）、重复的一致性、对齐，以及我们接下来将要看到的下一个原则：邻近性。
- en: Use proximity and distance to show natural groups
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用邻近性和距离来显示自然分组
- en: 'This principle is simple to follow: place the elements that are naturally related
    close to each other. This makes it easier for the user to find and understand.
    Typography and iconography can also be used to show proximity and similar functionality.
    The famous “ribbon bar” introduced by Microsoft in its Office applications uses
    this concept heavily and soon became a standard. For example, here is a segment
    of the **Home** tab that deals with alignment, lists, spacing, and indentation:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这个原则遵循起来很简单：将自然相关的元素放置在彼此附近。这使得用户更容易找到和理解。排版和图标学也可以用来显示邻近性和类似的功能。微软在其 Office
    应用程序中引入的著名“功能区”就大量使用了这个概念，并很快成为标准。例如，这里是一个处理对齐、列表、间距和缩进的**主页**标签段：
- en: '![Figure 11.4 – Paragraph icons](img/Figure_11.04_B18602.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.4 – 段落图标](img/Figure_11.04_B18602.jpg)'
- en: Figure 11.4 – Paragraph icons
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.4 – 段落图标
- en: Notice how the icons that modify the type of paragraph, spacing, and alignment
    are close to each other, without being “mixed.”
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到修改段落类型、间距和对齐的图标彼此靠近，而没有“混合”。
- en: These are not the only principles of UI design but are the most basic ones that
    we should keep in mind when developing our components. If you work with a team
    that includes a UI designer, you may receive templates or mockups, even storyboards,
    to implement into Vue components, as we saw in [*Chapter 4*](B18602_04.xhtml#_idTextAnchor102),
    *User Interface Composition with Components*. If instead, you are on a *“one-man
    band team”* and the design of the interfaces falls in your lap, these principles
    will help you greatly to create a professional and useful UI. But there is more...
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这些不是 UI 设计的唯一原则，但它们是我们开发组件时应该牢记的最基本的原则。如果你与包括 UI 设计师在内的团队一起工作，你可能会收到模板或原型，甚至故事板，以实现
    Vue 组件，正如我们在[*第 4 章*](B18602_04.xhtml#_idTextAnchor102)，“组件的用户界面组合”中看到的。如果你是“单打独斗的团队”的一员，并且界面的设计落在了你的肩上，这些原则将极大地帮助你创建专业且实用的
    UI。但还有更多...
- en: Laws for UI design
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: UI 设计定律
- en: Just like we have principles, several studies have issued or identified “laws”
    of design, which are measurable functions to predict certain software attributes,
    such as usability and friendliness. In particular, the following stand out.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们有原则一样，几个研究已经发布或确定了设计“定律”，这些是可以预测某些软件属性的可测量函数，例如可用性和友好性。特别是以下这些突出。
- en: Fitt’s law
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Fitt’s 定律
- en: 'This law specifies that the time taken for a user to acquire a target is a
    function of the distance from the pointer and the size of the target. The important
    concepts here are the distance and size of the target: the longer the distance
    between targets, the larger these should be.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这条规则规定，用户获取目标所需的时间是目标距离指针和目标大小的函数。这里的重要概念是目标距离和大小：目标之间的距离越长，这些目标应该越大。
- en: The application of this law is what places the window close button (**X**) in
    one of the corners of the screen (when the window is maximized), the **Start**
    button at the lower left of the screen, *Show desktop* at the bottom right of
    the screen, and so on. If a user moves the mouse in any of these directions, it
    will sooner or later arrive at these targets, and continuing in the same direction
    will not affect the result. In the language of UI design, these buttons are “infinite”
    as once the cursor has reached a corner by the edge of the screen, continuing
    scrolling in the same direction with the mouse will still hit the target.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这条规则的应用使得窗口关闭按钮（**X**）位于屏幕的一个角落（当窗口最大化时），**开始**按钮位于屏幕左下角，*显示桌面*位于屏幕右下角，等等。如果用户将鼠标移动到这些方向中的任何一个，迟早会到达这些目标，并且继续在同一方向上移动不会影响结果。在UI设计的语言中，这些按钮是“无限”的，因为一旦光标通过屏幕边缘到达一个角落，继续用鼠标在同一方向上滚动仍然会击中目标。
- en: Another implication of this law is that functions that are similar should also
    be placed in proximity to each other (such as the examples in *Figure 11**.4*).
    You can find more information about this law on Wikipedia, at [https://en.wikipedia.org/wiki/Fitts’s_law](https://en.wikipedia.org/wiki/Fitts’s_law).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这条规则的一个影响是，相似的功能也应该放置在彼此附近（例如*图11.4*中的例子）。有关这条规则更详细的信息可以在维基百科上找到，网址为[https://en.wikipedia.org/wiki/Fitts’s_law](https://en.wikipedia.org/wiki/Fitts’s_law)。
- en: Hick’s law
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Hick’s law
- en: 'This law says that the time it takes a user to make a choice is a logarithmic
    function based on the number of available options and their complexity. In simpler
    terms, too many options are confusing and will make the user take more time to
    decide. Some implications of this law are as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这条规则表示，用户做出选择所需的时间是基于可用选项数量及其复杂性的对数函数。简单来说，选项过多会让人困惑，并使用户花费更多时间来做出决定。这条规则的一些影响如下：
- en: Break complex tasks into smaller groups, manageable by the user to speed up
    their decision time
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将复杂任务分解成更小的组，以便用户可以快速做出决定
- en: Avoid creating interfaces overloaded with options, as they will overwhelm the
    user
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免创建选项过多的界面，因为它们会使用户感到不知所措
- en: If a function is time-sensitive, minimize the options to the bare minimum for
    the situation
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果一个功能是时间敏感的，将选项减少到最基本的情况
- en: 'In everyday software, we can see the application of this law in multiple places
    – for example, in “installers” for a particular software, where successive windows
    with options are presented to the user during or before starting the installation
    in a sequential manner, as opposed to a form to fill in. More information about
    this law can be found on Wikipedia: [https://en.wikipedia.org/wiki/Hick%27s_law](https://en.wikipedia.org/wiki/Hick%27s_law).'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在日常软件中，我们可以在多个地方看到这条规则的应用——例如，在特定软件的“安装程序”中，在安装开始前或开始时，以顺序方式向用户展示带有选项的连续窗口，而不是填写表格。有关这条规则更详细的信息可以在维基百科上找到：[https://en.wikipedia.org/wiki/Hick%27s_law](https://en.wikipedia.org/wiki/Hick%27s_law)。
- en: Ben Schneiderman’s eight rules
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 本·施奈德曼的八条规则
- en: 'In 1986, Professor Ben Schneiderman published his book titled *Designing the
    User Interface: Strategies for Effective Human-Computer Interaction*, where he
    stipulated eight rules for interface design. These rules are as relevant today
    as on the day they were created, so they are worth mentioning here:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 1986年，本·施奈德曼教授出版了名为《设计用户界面：有效人机交互策略》的书籍，其中他规定了八条界面设计规则。这些规则自创建以来一直具有相关性，因此在这里值得提及：
- en: Strive for consistency (in actions, steps, placements, etc.).
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 力求一致性（在动作、步骤、位置等方面）。
- en: Enable the use of shortcuts for common tasks (be it using a keyboard or icons).
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 允许使用快捷键执行常见任务（无论是使用键盘还是图标）。
- en: Offer informative feedback (especially when an error occurs).
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供有信息的反馈（尤其是在发生错误时）。
- en: Design dialogs with an end.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设计带有终点的对话框
- en: Offer simple error handling, so the user can take action quickly and avoid serious
    errors by the user. The classical implementation of rules *#4* and *#5* are “confirmation
    dialogs” before performing permanent actions, such as deleting content.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供简单的错误处理，以便用户可以快速采取行动，避免用户犯严重错误。规则*#4*和*#5*的经典实现是在执行永久性操作（如删除内容）之前进行“确认对话框”。
- en: Permit easy reversal of actions (thanks to this, we have *Ctrl* + *Z*!).
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 允许轻松撤销操作（多亏了这一点，我们才有 *Ctrl* + *Z*！）。
- en: Support the sense of control in the user. Nothing is worse for a user than to
    feel that the machine is “doing its own thing, out of control.” If you ever sent
    an 800-page file to print by mistake, and it took you a dozen pages before you
    could actually cancel the operation... this is what this is about.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 支持用户的控制感。没有什么比用户感觉到机器“在做它自己的事情，失控”更糟糕的了。如果你不小心发送了一个800页的文件去打印，并且在你能够真正取消操作之前需要翻到第12页……这就是这个问题所在。
- en: Reduce short-term memory. The user can only keep in their short-term memory
    a handful of items and tasks at a time, and too many elements on a screen (menu,
    and so on) create rejection. This principle also relates to Hick’s law.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 减少短期记忆负担。用户一次只能记住少量项目和任务，屏幕上的元素（菜单等）过多会引发拒绝。这一原则也与希克定律有关。
- en: For practical applications and an introduction to the topic, these principles,
    rules, and laws should give us a sure footing.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 对于实际应用和该主题的介绍，这些原则、规则和法律应该为我们提供一个稳固的基础。
- en: More information about these rules and Ben Schneiderman can be found on Wikipedia
    ([https://en.wikipedia.org/wiki/Ben_Shneiderman](https://en.wikipedia.org/wiki/Ben_Shneiderman)).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 关于这些规则和本·施奈德曼的更多信息可以在维基百科上找到（[https://en.wikipedia.org/wiki/Ben_Shneiderman](https://en.wikipedia.org/wiki/Ben_Shneiderman)）。
- en: UX design principles
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: UX设计原则
- en: 'UX design also has its own objectives and principles that apply to patterns.
    Above all, the main objective of UX is to provide a good perception to the user,
    to create a bond with the brand or product, by carefully tailoring a flow of interactions.
    In this case, the solutions must be as follows:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: UX设计也有其自己的目标和原则，这些原则适用于模式。最重要的是，UX的主要目标是向用户提供良好的感知，通过精心定制交互流程，与品牌或产品建立联系。在这种情况下，解决方案必须如下：
- en: '*Useful and usable:* First and foremost, the application must do what it intended
    to do, do it well, and be easy for the user to use'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*有用且易用*：首先，应用程序必须完成它打算做的事情，做得好，并且用户使用起来容易。'
- en: '*Learnable and memorable*: The user must be able to learn and understand what
    information is presented and internalize it for future use as well'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*易于学习和记忆*：用户必须能够学习和理解所呈现的信息，并将其内化以供将来使用。'
- en: '*Credible and give control to the user*: When the user interacts with the application,
    it must feel that it is doing what the user intends and that the result is “safe”
    for the user'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*可信并赋予用户控制权*：当用户与应用程序交互时，必须感觉到它正在执行用户意图的事情，并且结果对用户来说是“安全”的。'
- en: This last principle is very important. If the user feels that the application
    somewhere during the interaction has “lost control” of what is going on, it is
    a recipe for disaster. Sadly, this occurs all too often with the dark patterns
    that we will see later in this chapter, but now, let’s see some good patterns
    that result in a good experience for the user.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一条原则非常重要。如果用户感觉在交互过程中应用程序在某个地方“失去了对正在发生的事情的控制”，那将是一场灾难。遗憾的是，这种情况在我们将在本章后面看到的暗模式中发生得太频繁了，但现在，让我们看看一些好的模式，这些模式可以为用户提供良好的体验。
- en: Common patterns for data manipulation
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据操作常见模式
- en: These patterns are often matched by pure HTML elements, while others have emerged
    in recent years through the clever use of styling of such elements. These have
    become standard in the industry and are well understood by users at first sight.
    What follows here is a non-exclusive list with a short description of when to
    use each one.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这些模式通常由纯HTML元素匹配，而另一些则是近年来通过巧妙地使用这些元素的样式而出现的。这些已成为行业标准，并且用户一眼就能理解。以下是一个非排他性的列表，简要描述了何时使用每个模式。
- en: HTML input elements
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HTML输入元素
- en: 'The standard input fields provided by HTML are a clear pattern for receiving
    input from the user. Nowadays, the input element has many variants due to the
    `type` attribute, allowing for input other than plain text. Used in forms and
    validation libraries, these elements are as good as they come, ready to read and
    format from text and numbers to URL, date, time, images, and colors. The full
    list of available types supported by today’s browsers can be found here: [https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Input#input_types](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Input#input_types).'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: HTML提供的标准输入字段是接收用户输入的清晰模式。如今，由于`type`属性，输入元素有许多变体，允许输入除了纯文本以外的内容。在表单和验证库中使用，这些元素是现成的，可以读取和格式化从文本和数字到URL、日期、时间、图像和颜色。今天浏览器支持的可用类型完整列表可以在此处找到：[https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Input#input_types](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Input#input_types)。
- en: For the most part, these elements are used with basic functionality and some
    heavy CSS styling. Use `inputs` (and `textareas`) any time that you need the user
    to enter text information. Browsers today offer native-looking widgets for the
    more complex types, such as date and color pickers.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，这些元素与基本功能和一些重CSS样式一起使用。当需要用户输入文本信息时，使用`inputs`（和`textareas`）。今天的浏览器为更复杂类型提供了原生外观的小部件，例如日期和颜色选择器。
- en: Checkboxes, radios, and toggle switches
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 复选框、单选按钮和切换开关
- en: 'Checkboxes and radio buttons are provided natively by HTML and are presented
    to the user following the format of the local OS or environment. **Checkboxes**
    represent multiple options to the user, which they can select freely from the
    group. In contrast, **radio** buttons only allow the selection of one option from
    the list:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 复选框和单选按钮由HTML原生提供，并按照本地操作系统或环境的格式呈现给用户。**复选框**向用户表示多个选项，他们可以从组中自由选择。相比之下，**单选按钮**只允许从列表中选择一个选项：
- en: '![Figure 11.5 – Checkboxes on the left, and radio buttons on the right](img/Figure_11.05_B18602.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![图11.5 – 左侧的复选框和右侧的单选按钮](img/Figure_11.05_B18602.jpg)'
- en: Figure 11.5 – Checkboxes on the left, and radio buttons on the right
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.5 – 左侧的复选框和右侧的单选按钮
- en: 'With the release of the original iPhone, a new variant of the checkbox became
    very popular: the **toggle switch**. It is not provided natively by the HTML standard,
    but it is easily styled through CSS to “disguise” a checkbox. A toggle switch
    has two states, enabled and disabled, and it is often used to activate or deactivate
    a function or feature. This is an important distinction as the checkbox should
    focus on options or alternatives. Here is an example:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 随着**原始iPhone**的发布，一种新的复选框变体变得非常流行：**切换开关**。它不是HTML标准原生提供的，但可以通过CSS轻松地“伪装”成复选框。切换开关有两种状态，启用和禁用，它通常用于激活或禁用功能或特性。这是一个重要的区别，因为复选框应该关注选项或替代方案。以下是一个例子：
- en: '![Figure 11.6 – Toggle switches in each state](img/Figure_11.06_B18602.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![图11.6 – 每个状态的切换开关](img/Figure_11.06_B18602.jpg)'
- en: Figure 11.6 – Toggle switches in each state
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.6 – 每个状态的切换开关
- en: The toggle switch is in an “off” state (or false) when the toggle is to the
    left, and “on” when to the right. Often, switching also affects the color, showing
    it in a mute scale of gray when off or in vibrant colors when activated. Internally,
    these two states are often represented by `true` (on) and `false` (off), and they
    should be used to activate or deactivate settings, features, and so on. You can
    find the `Toggle` component that implements the styling and the `v-model` code
    in the repository for this chapter.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 当切换开关向左时，切换开关处于“关闭”状态（或false），当向右时处于“开启”状态。通常，切换还会影响颜色，关闭时以灰度哑光色调显示，激活时以鲜艳的颜色显示。内部，这两个状态通常表示为`true`（开启）和`false`（关闭），它们应该用于激活或禁用设置、功能等。您可以在本章的存储库中找到实现样式和`v-model`代码的`Toggle`组件。
- en: Chips, pills, or tags
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 芯片、药丸或标签
- en: This pattern encompasses short text (or “copy” in UI lingo) inside a round box.
    The copy can be accompanied by an icon to emphasize the state when selected, or
    an action such as an “`span` element).
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这种模式包括一个圆形框内的简短文本（或“副本”在UI术语中），副本可以伴随一个图标以强调选中时的状态，或者一个动作，例如“`span`元素”）。
- en: '![Figure 11.7 – A list of items with pills](img/Figure_11.07_B18602.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![图11.7 – 带有药丸的物品列表](img/Figure_11.07_B18602.jpg)'
- en: Figure 11.7 – A list of items with pills
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.7 – 带有药丸的物品列表
- en: 'This is a short list of UI patterns to capture user input, but it does cover
    the most common types: the HTML inputs and styling variations.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个捕获用户输入的UI模式简短列表，但它确实涵盖了最常见的类型：HTML输入和样式变化。
- en: Common patterns for data visualization
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据可视化的常见模式
- en: These patterns display information back to the user, either in response to a
    user action or an application event. What follows is a non-exclusive list of patterns.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这些模式将信息反馈给用户，无论是响应用户操作还是应用程序事件。以下是一个非排他性的模式列表。
- en: Tooltips
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工具提示
- en: 'This pattern shows the user some floating small text with information regarding
    the target element, usually when the user activates the element using some action
    (a hover, click, selection, etc.). The information is displayed above, below,
    or to the side of the element in the form of a “speech bubble” (like in comic
    books). Here is an example:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 此模式向用户显示有关目标元素的一些浮动小文本信息，通常当用户使用某些操作（悬停、点击、选择等）激活元素时。信息以“话泡”的形式显示在元素上方、下方或旁边（如漫画书中）。以下是一个示例：
- en: '![Figure 11.8 – A tooltip displaying the name/action of the icon and a shortcut](img/Figure_11.08_B18602.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![图11.8 – 显示图标名称/操作的提示和快捷键的工具提示](img/Figure_11.08_B18602.jpg)'
- en: Figure 11.8 – A tooltip displaying the name/action of the icon and a shortcut
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.8 – 显示图标名称/操作的提示和快捷键的工具提示
- en: 'This pattern is mostly used to display help regarding the target object, but
    it can be used also to display contextual menus. For example, selecting a word
    from this paragraph in a text editor online will display a popup with a menu:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 此模式主要用于显示有关目标对象的帮助信息，但也可以用于显示上下文菜单。例如，在在线文本编辑器中选择此段落中的单词将显示一个带有菜单的弹出窗口：
- en: '![Figure 11.9 – A tooltip pattern used to display a contextual menu](img/Figure_11.09_B18602.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![图11.9 – 用于显示上下文菜单的工具提示模式](img/Figure_11.09_B18602.jpg)'
- en: Figure 11.9 – A tooltip pattern used to display a contextual menu
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.9 – 用于显示上下文菜单的工具提示模式
- en: There may be some discussion regarding whether this last use is a tooltip or
    a contextual menu, but the fact that it opens on selection would indicate the
    first. Traditionally, contextual menus are opened with a secondary action, such
    as the right mouse button (in Windows and Linux). In either case, the concept
    to remember for this pattern is to show information to the user on selection or
    pre-activation to help them decide what to do next.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 可能会有一些关于这种最后使用的是工具提示还是上下文菜单的讨论，但它在选择时打开的事实表明是前者。传统上，上下文菜单是通过次要操作打开的，例如右键鼠标按钮（在Windows和Linux中）。在任何情况下，此模式的概念是要在用户选择或预激活时向用户显示信息，以帮助他们决定下一步要做什么。
- en: Notification dots, bubbles, marks, or badges
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通知点、气泡、标记或徽章
- en: 'This pattern consists of displaying a small icon on top of a larger icon to
    indicate that an event has happened and requires the attention of the user, yet
    it is not urgent. This small icon can be a dot, a bubble, and so on. If the notification
    has a number in it, it is also called a **badge.** Some examples of this pattern
    are as follows:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 此模式由在较大图标上显示的小图标组成，以表示已发生事件并需要用户的注意，但不是紧急的。这个小图标可以是点、气泡等。如果通知中包含数字，它也被称为**徽章**。以下是一些此模式的示例：
- en: The small circle with a number for new emails received in the email icon
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在电子邮件图标中的带有数字的小圆圈表示收到的新电子邮件
- en: The double checkmark in a chat application indicating that the other party has
    received and read the message
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在聊天应用程序中的双勾表示对方已接收并阅读了消息
- en: A small mark in a taskbar showing that an application has been opened
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在任务栏上的一个小标记表示已打开应用程序
- en: The key concept is to use some sort of small variance to the icon to indicate
    the need for future attention, but it is not urgent and won’t affect the current
    activity for the user.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 关键概念是使用某种小变化来表示图标需要未来关注，但这不是紧急的，也不会影响用户当前的活动。
- en: Toast notifications
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 吐司通知
- en: 'This pattern is used in multiple applications and OSes. It consists of displaying,
    for a short amount of time, an overlayed floating window with quick information
    for the user. Often, it includes a short text fragment paired with a sensible
    icon. Depending on the OS, this can be displayed natively at the top center, right
    of the screen, or at the bottom right above the system tray. Web applications
    can either implement their own toast notification within the browser window or
    require permission from the user and display a “native toast notification” using
    the local OS. Here is an example of a toast notification:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这种模式在多个应用程序和操作系统中被使用。它包括在短时间内显示一个带有用户快速信息的叠加浮动窗口。通常，它包括一个简短的文字片段和合适的图标。根据操作系统，这可以在屏幕顶部中央、右侧或系统托盘上方右侧显示。Web应用程序可以在浏览器窗口内实现自己的通知，或者要求用户授权并使用本地操作系统显示“原生通知”。以下是一个通知的例子：
- en: '![Figure 11.10 – A native toast notification on the desktop](img/Figure_11.10_B18602.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![图11.10 – 桌面上的原生通知](img/Figure_11.10_B18602.jpg)'
- en: Figure 11.10 – A native toast notification on the desktop
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.10 – 桌面上的原生通知
- en: These notifications are useful to inform the user of changes in the environment
    that require their attention, to report back the result of an asynchronous operation
    (success, error, etc.), and so on. These calls to attention are ephemeral, so
    they should not be a critical part of an important workflow, except for the conditions
    just mentioned.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这些通知有助于通知用户需要他们注意的环境变化，报告异步操作的结果（成功、错误等），等等。这些引起注意的调用是短暂的，因此它们不应该成为重要工作流程的关键部分，除非是上述提到的条件。
- en: Carousel or image sliders
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 旋转木马或图片滑块
- en: Carousel or image sliders are a pattern for displaying, in the same space, different
    sections with images and content in sequential order. Usually, using a timer,
    these sections are presented to the user a few seconds apart, also offering the
    option to skip to any of them through dotted navigation. While they were very
    popular some years ago, there are counterpoints to the use of these, as “impatient”
    users may never see the entire content of a carousel. In practice, the recommendation
    is to keep the list of sections as short as possible, somewhere between three
    to five elements.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 旋转木马或图片滑块是一种在同一空间内按顺序显示不同带有图像和内容的板块的模式。通常，使用计时器，这些板块每隔几秒钟向用户展示一次，同时也提供了通过点状导航跳转到任何一个板块的选项。虽然它们几年前非常流行，但使用这些模式也有一些反对方，因为“不耐烦”的用户可能永远看不到旋转木马的全部内容。在实践中，建议尽可能缩短板块列表，大约在三个到五个元素之间。
- en: 'Examples of this implementation abound on the internet, as they are implemented
    primarily on the landing page of a site. Practically all shopping and news websites
    make use of this pattern – for example, the Amazon landing page ([www.amazon.de](http://www.amazon.de)):'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '这种实现的例子在互联网上随处可见，因为它们主要在网站的首页实现。实际上，几乎所有购物和新闻网站都使用了这种模式——例如，亚马逊的首页([www.amazon.de](http://www.amazon.de)):'
- en: '![Figure 11.11 – Amazon’s carousel displays offers from the store](img/Figure_11.11_B18602.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![图11.11 – 亚马逊的旋转木马式展示商店的优惠](img/Figure_11.11_B18602.jpg)'
- en: Figure 11.11 – Amazon’s carousel displays offers from the store
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.11 – 亚马逊的旋转木马式展示商店的优惠
- en: 'Image sliders can be as big as a carousel but can also be much smaller and
    used to display thumbnails. Here is again an example from Amazon:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 图片滑块可以像旋转木马一样大，也可以小得多，用于显示缩略图。这里再次给出一个来自亚马逊的例子：
- en: '![Figure 11.12 – Amazon makes good use of image sliders to display items to
    the user](img/Figure_11.12_B18602.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![图11.12 – 亚马逊很好地利用图片滑块向用户展示商品](img/Figure_12_12_B18602.jpg)'
- en: Figure 11.12 – Amazon makes good use of image sliders to display items to the
    user
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.12 – 亚马逊很好地利用图片滑块向用户展示商品
- en: While trivial to implement, the use of carousels and image sliders is a good
    way to display information to the user. There is a warning, though, that abusing
    this pattern could lead to an overwhelming and saturated experience, create confusion,
    and even trigger undesirable side effects, such as sensory overwhelming and content
    avoidance.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然实现起来很简单，但使用旋转木马和图片滑块是向用户展示信息的好方法。不过，有一个警告，滥用这种模式可能会导致用户感到压倒性和饱和，造成混淆，甚至引发不希望出现的副作用，如感官过载和内容回避。
- en: Progress bars and spinners
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进度条和旋转器
- en: 'A progress bar is any element that gives the user an idea of how far down the
    workflow the current state of a process is. While the name seems to indicate a
    “bar,” in practice, any element that displays progress through a limited number
    of actions falls into this category. The basic objective is to notify the user
    of the progress of tasks that take a long time and show that the system is “busy”
    working on them, thus providing visibility and a sense of control to the user.
    Progress bars are very important to prevent involuntary negative actions from
    the user. If a long-running task is being executed in the background (let’s say
    in a web worker) without any feedback on the progress, the user may believe that
    the task has not started, has failed, or the computer has “hung up.” It is a negative
    user experience to leave the user wondering what is going on. Here are some examples
    of progress bar elements:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 进度条是任何能够向用户展示工作流程当前状态进度的元素。虽然名字似乎暗示了一个“条”，但实际上，任何通过有限数量的动作显示进度的元素都属于这一类别。基本目标是通知用户耗时任务的进度，并显示系统正在“忙碌”地处理它们，从而为用户提供可见性和控制感。进度条对于防止用户无意识地执行负面操作非常重要。如果一个长时间运行的任务在后台（比如在web
    worker中）执行，没有任何关于进度的反馈，用户可能会认为任务尚未开始，已经失败，或者计算机“挂起了”。让用户感到困惑是一种负面的用户体验。以下是一些进度条元素的示例：
- en: '![Figure 11.13 – Example of progress bars](img/Figure_11.13_B18602.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![图11.13 – 进度条的示例](img/Figure_11.13_B18602.jpg)'
- en: Figure 11.13 – Example of progress bars
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.13 – 进度条的示例
- en: In addition to styling, progress bars can also be used in an “undetermined state,”
    meaning that it is not possible for the application to calculate how much time
    or how many steps a process may take; however, it still wants to inform the user
    that the system is busy and shouldn’t be interrupted. The HTML standard does provide
    an element specifically for progress bars that can manage these situations (the
    progress element; see [https://developer.mozilla.org/en-US/docs/Web/HTML/Element/progress](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/progress)),
    but there are other patterns to use in these cases, such as **spinners**.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 除了样式之外，进度条还可以用于“不确定状态”，这意味着应用程序无法计算一个过程可能需要多少时间或多少步骤；然而，它仍然想通知用户系统正在忙碌，不应该被打断。HTML标准确实提供了一个专门用于处理这些情况的元素（进度元素；见[https://developer.mozilla.org/en-US/docs/Web/HTML/Element/progress](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/progress)），但在这些情况下还有其他模式可以使用，例如**spinner**。
- en: 'As the name “spinner” indicates, this is an icon that “spins” on itself, giving
    the notion that the application is busy and working. Here is an example of a spinner
    with a text indicator:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 如“spinner”这个名字所暗示的，这是一个“自转”的图标，给人一种应用程序正在忙碌并工作的印象。以下是一个带有文本指示器的spinner示例：
- en: '![Figure 11.14 – Spinner circle, indicating the application is busy](img/Figure_11.14_B18602.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![图11.14 – Spinner圆形，指示应用程序正在忙碌](img/Figure_11.14_B18602.jpg)'
- en: Figure 11.14 – Spinner circle, indicating the application is busy
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.14 – Spinner圆形，指示应用程序正在忙碌
- en: 'This approach has been used in OSes and applications for some time now, so
    users understand its meaning. There is one caveat when using this pattern and
    that is that after a long period of time, it can create anxiety, so it is recommended
    to accompany it with some sort of indicator of action. Implementing a `spinner`
    component in Vue is rather trivial, and mostly CSS:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法在操作系统和应用程序中已经使用了一段时间，因此用户理解其含义。在使用这种模式时有一个需要注意的问题，那就是经过一段时间后，它可能会引起焦虑，因此建议伴随某种动作指示器。在Vue中实现`spinner`组件相当简单，主要使用CSS：
- en: ./components/Spinner.vue
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: ./components/Spinner.vue
- en: '[PRE0]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In this simple component, we only need to define a prop for the text, and a
    class for our spinning elements. The circle is made here by setting the border
    radius and defining a color for one border, so the spinning action is noticeable.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个简单的组件中，我们只需要定义一个用于文本的prop和一个用于旋转元素的class。这里通过设置边框半径并定义一个边框的颜色来制作圆形，这样旋转动作就非常明显。
- en: Pagination and infinite scroller
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分页和无限滚动
- en: 'When we need to display a long list of items to the user, there are two patterns
    that come to mind as a well-understood solution: pagination and infinite scrollers.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们需要向用户显示长列表项时，有两种模式会浮现在脑海中，作为人们熟知的解决方案：分页和无限滚动。
- en: 'In **pagination**, the dataset is divided into smaller parts of fixed size
    in sequential order. Each subset is called a **page** and is referenced by an
    ordinal (usually a number). This allows for easy navigation between pages, such
    as random and sequential access by the page number. Also, giving the same order
    function in the data allows a quick and easy way to “come back” to the data in
    different sessions. The element that allows the user to navigate in the paged
    data is usually referred to as a **pager**, and it is common practice to place
    it at the top and bottom of the item list. A typical pager might look like this:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在 **分页** 中，数据集被分成顺序排列的固定大小的更小部分。每个子集被称为 **页面**，并通过序号（通常是数字）进行引用。这允许在页面之间进行轻松导航，例如通过页码进行随机和顺序访问。此外，在数据中提供相同的排序函数允许在不同的会话中快速轻松地“返回”到数据。允许用户在分页数据中导航的元素通常被称为
    **分页器**，并且通常的做法是将它放置在项目列表的顶部和底部。一个典型的分页器可能看起来像这样：
- en: '![Figure 11.15 – The elements of a typical pager](img/Figure_11.15_B18602.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.15 – 典型呼机元素](img/Figure_11.15_B18602.jpg)'
- en: Figure 11.15 – The elements of a typical pager
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.15 – 典型呼机元素
- en: In the preceding figure, you can see the different elements of a typical pager,
    usually used for tables or lists of content. However, this is not the only shape
    that a pager may take. It could, for example, use a drop-down menu for the page
    numbers, display ranges of pages, and so on. The important concept of this pattern
    is the division of the set and the quick navigation to each individual subgroup.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的图中，你可以看到典型分页器的不同元素，通常用于表格或内容列表。然而，分页器可能采取的形状不止这一种。例如，它可以使用下拉菜单来显示页码，显示页面范围等。这个模式的重要概念是集合的划分和快速导航到每个单独的小组。
- en: 'An alternative to pagination is to use an **infinite scroller**. In this pattern,
    the exact location of each item in the dataset may or may not be needed, and the
    items are presented to the user as they scroll the web page. When the user reaches
    the end of the list, new items are loaded on the page, chunk by chunk, until the
    user stops scrolling or the entire dataset has been loaded. Here is a graphical
    representation of this pattern:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 分页的另一种选择是使用 **无限滚动器**。在这个模式中，数据集中每个项目的确切位置可能需要也可能不需要，项目在用户滚动网页时呈现给用户。当用户到达列表的末尾时，新项目会以块的形式加载到页面上，直到用户停止滚动或整个数据集已加载完毕。以下是这种模式的图形表示：
- en: '![Figure 11.16 – The implementation of an infinite scroller](img/Figure_11.16_B18602.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.16 – 无限滚动器的实现](img/Figure_11.16_B18602.jpg)'
- en: Figure 11.16 – The implementation of an infinite scroller
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.16 – 无限滚动器的实现
- en: 'A number of techniques are used to detect user behavior and load or pre-load
    data. One of the easiest implementations is through the use of an **intersection
    observer**, a native element provided by browsers in JavaScript that triggers
    an event when such an observer intersects with other elements and, in this case,
    with the viewport. Since this is a new concept, we will implement a minimal infinite
    scroller that will look like this:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 为了检测用户行为和加载数据或预加载数据，使用了多种技术。其中一种最简单的实现方式是通过使用一个 **交叉观察者**，这是浏览器在 JavaScript
    中提供的一个原生元素，当这样的观察者与其它元素（在这种情况下，与视口）相交时，会触发一个事件。由于这是一个新概念，我们将实现一个最小化的无限滚动器，其外观如下：
- en: '![Figure 11.17 – The example infinite scroller limited to a div element](img/Figure_11.17_B18602.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.17 – 限制在 div 元素上的示例无限滚动器](img/Figure_11.17_B18602.jpg)'
- en: Figure 11.17 – The example infinite scroller limited to a `div` element
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.17 – 限制在 `div` 元素上的示例无限滚动器
- en: 'If you scroll down on the `div` boundary, by any available means (mouse, keyboard,
    etc.), the list will generate new items and will never stop, giving the impression
    that the scrolling is infinite. Here is the source code for that component:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你通过任何可用的方式（鼠标、键盘等）在 `div` 边界处向下滚动，列表将生成新的项目，并且永远不会停止，给人一种滚动是无限的印象。以下是该组件的源代码：
- en: ./src/components/InfiniteScroller.vue
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: ./src/components/InfiniteScroller.vue
- en: '[PRE1]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The preceding component is minimal, but it does illustrate the technique. We
    will have a list of numbers with an initial limit that will trigger an overflow
    in the container (`#1`). This is important as, on the first load, the user will
    know that there is a scrollbar and more content below (as in *Figure 11**.17*).
    Now, the technique here is to define a reactive variable, `_scroll_watcher`, pointing
    to `null`. This variable will later have the value of an element at the bottom
    of the list, which we mark as a reference (`#5`). We use `null` so Vue does not
    run any optimization at this point. In line `#3`, we create a new `IntersectionObserver`,
    and pass as value the reference to our `triggerEvent` function, where we will
    simply increment the boundary of our list. In our template, we use a `v-for` directive
    to generate the elements for each integer in the list, which should appear before
    our scroll watcher element. The magic happens in line `#4`, once our component
    has been created and mounted into the page. At this moment, Vue has already assigned
    to `_scroll_watcher` the reference for the HTML element, so we can pass it to
    our instance of `IntersectionObserver`. As we are using it with defaults, it will
    run the `triggerEvent` function each time the div in question appears in the viewport,
    which will happen when we reach the end of the list. In that function, we increment
    again the number of items, making Vue inject more elements into the web page and
    pushing the scroll watcher div again out of the viewport. This process repeats
    *ad infinitum*, giving us a simple but effective infinite scroller.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的组件是最基本的，但它确实说明了这种技术。我们将有一个数字列表，初始限制将触发容器中的溢出（`#1`）。这很重要，因为在第一次加载时，用户会知道有一个滚动条和更多内容在下面（如*图11.17*所示）。现在，这里的技巧是定义一个指向`null`的响应式变量`_scroll_watcher`。这个变量将后来具有列表底部元素的值，我们将其标记为参考（`#5`）。我们使用`null`是为了Vue在此点不运行任何优化。在行`#3`中，我们创建了一个新的`IntersectionObserver`，并将`triggerEvent`函数的引用作为值传递，我们将简单地增加列表的边界。在我们的模板中，我们使用`v-for`指令生成列表中每个整数的元素，这些元素应该出现在我们的滚动监视器元素之前。魔法发生在行`#4`，一旦我们的组件被创建并挂载到页面上。在这个时候，Vue已经将`_scroll_watcher`分配给了HTML元素的引用，因此我们可以将其传递给我们的`IntersectionObserver`实例。由于我们使用默认值，它将在相关div出现在视口中时运行`triggerEvent`函数，这将在我们到达列表末尾时发生。在这个函数中，我们再次增加项目数量，使Vue将更多元素注入到网页中，并将滚动监视器div再次推出视口。这个过程无限重复，给我们一个简单但有效的无限滚动器。
- en: Beyond the implementation of the UX pattern, this technique is the correct approach
    to binding a reactive variable to an element in the DOM, and it saves us from
    writing direct JavaScript DOM manipulation, such as `document.getElementById("#someId")`
    and dealing with issues such as ID collisions. Vue resolves this for us.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 除了实现UX模式之外，这种技术是将响应式变量绑定到DOM元素上的正确方法，并且它使我们免于编写直接的JavaScript DOM操作，例如`document.getElementById("#someId")`和处理诸如ID冲突等问题。Vue为我们解决了这个问题。
- en: Common patterns for interaction and navigation
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 交互和导航的常见模式
- en: These patterns control the interaction or offer the user options to control
    the process and navigation of the application. As usually happens, some of these
    patterns could also fit into other categories.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这些模式控制着交互或为用户提供控制应用程序过程和导航的选项。通常情况下，其中一些模式也可能适合其他类别。
- en: Placement of menus
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 菜单的位置
- en: 'The placement of menus is also a pattern that has been standardized in three
    basic layouts:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 菜单的位置也是三种基本布局中已经标准化的模式之一：
- en: '**Menu bars** (horizontal) are often placed in a “sticky” position at the top
    of the screen (meaning they will not scroll with the page).'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**菜单栏**（水平）通常放置在屏幕顶部的一个“粘性”位置（这意味着它们不会随着页面滚动而滚动）。'
- en: '**Navigation bars** (horizontal), mostly popular for mobile devices, are an
    iconography menu placed at the bottom of the screen to navigate to different sections
    of the application.'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**导航栏**（水平），主要适用于移动设备，是在屏幕底部放置的一个图标菜单，用于导航到应用程序的不同部分。'
- en: '**Sidebars** cover the full height of the screen, and with variable widths.
    These show menus with icons and/or text. In mobile and desktop applications where
    the screen’s real state is important, there is usually an option to toggle it
    in or out of the viewport. The standard icon to trigger this feature has become
    the “hamburger” icon (see later in this chapter).'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**侧边栏**覆盖整个屏幕高度，并且具有可变宽度。这些显示带有图标和/或文本的菜单。在屏幕真实状态对移动和桌面应用程序很重要的应用中，通常有一个选项可以切换它进入或退出视口。触发此功能的标准图标已成为“汉堡”图标（见本章后面的内容）。'
- en: Following these standard placements for desktop and mobile will ensure that
    the user knows how to navigate the site easily. Often, some applications such
    as video games break these standards, but unless there is a powerful reason to
    do so, it should be avoided.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循桌面和移动端的标准布局将确保用户能够轻松地导航网站。通常，一些应用如视频游戏会打破这些标准，但除非有强有力的理由这样做，否则应避免。
- en: Breadcrumbs
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 面包屑
- en: 'Breadcrumbs are a hierarchical list of links that show the current position
    of the web page in the overall website organization. Each link allows the user
    to go back to a level, without having to use the browser’s **Back** button or
    dig deep into the main menu. The current approach is to place breadcrumbs at the
    top of the page, before the main content. Here is an example of a breadcrumb path:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 面包屑是一个链接的层级列表，显示了网页在整体网站组织中的当前位置。每个链接都允许用户返回一个层级，无需使用浏览器的**后退**按钮或深入主菜单。当前的做法是将面包屑放置在页面顶部，在主要内容之前。以下是一个面包屑路径的示例：
- en: '[PRE2]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The convention is to use the more-than symbol (`>`) to separate each navigation
    page, but there are many artistic licenses taken on this matter. Another representation
    for this navigation is to use a tree structure, such as this:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 习惯上使用大于号（`>`）来分隔每个导航页面，但在这方面有很多艺术许可。这种导航的另一种表示方法是使用树状结构，如下所示：
- en: '[PRE3]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This “folder-like” structure is not so common for main navigations but is mostly
    used for nested content such as comments and replies in forums.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 这种“文件夹式”结构在主要导航中并不常见，但主要用于嵌套内容，如论坛中的评论和回复。
- en: Modal dialogs
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模态对话框
- en: 'A modal dialog is a small window that opens in front of the application, taking
    full control of the focus. It prevents the user from interacting with the rest
    of the application until the activity presented in the dialog is resolved. Modal
    dialogs should focus on one action only and provide sufficient information for
    the user to take action by giving clear options. Here is an example:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 模态对话框是一个在应用程序前面打开的小窗口，完全控制焦点。它阻止用户与应用程序的其他部分交互，直到对话框中展示的活动得到解决。模态对话框应专注于单一操作，并通过提供清晰的选项，为用户提供足够的信息以便采取行动。以下是一个示例：
- en: '![Figure 11.18 – A confirmation dialog](img/Figure_11.18_B18602.jpg)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![图11.18 – 确认对话框](img/Figure_11.18_B18602.jpg)'
- en: Figure 11.18 – A confirmation dialog
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.18 – 确认对话框
- en: We have previously implemented a system to display modal dialogs in Vue 3, so
    you can review the code from [*Chapter 5*](B18602_05.xhtml#_idTextAnchor130),
    *Single-Page Applications*, to see an implemented approach.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前已经实现了一个在Vue 3中显示模态对话框的系统，因此您可以查看[*第5章*](B18602_05.xhtml#_idTextAnchor130)，“单页应用程序”中的代码，以查看实现方法。
- en: Menu icons
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 菜单图标
- en: 'Other than the plain copy (text) naming convention for menu items, there are
    a number of icons used today to show the user at first glance what kind of interaction
    to expect when presenting a menu. Here are some of the standard icons you can
    find and use today:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 除了菜单项的普通文本命名约定外，今天还有许多图标用于在用户第一眼看到菜单时展示预期的交互类型。以下是您今天可以找到并使用的标准图标：
- en: '![Figure 11.19 – Menu icons](img/Figure_11.19_B18602.jpg)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![图11.19 – 菜单图标](img/Figure_11.19_B18602.jpg)'
- en: Figure 11.19 – Menu icons
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.19 – 菜单图标
- en: 'And here are their descriptions:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是它们的描述：
- en: '**Hamburger icon** (three horizontal lines): Reserved for *main menus* and
    navigation, this toggles the display of a wide site menu in a sidebar. These types
    of sidebars that show and hide on convenience are called **drawers** and are very
    popular in mobile sites and applications.'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**汉堡图标**（三个水平线）：用于*主菜单*和导航，此图标切换侧边栏中宽网站菜单的显示。这些显示和隐藏方便的侧边栏类型被称为**抽屉**，在移动网站和应用中非常流行。'
- en: '**Kebab icon** (three vertical dots): Made popular by Google’s Material Design,
    this indicates that there are more *options* for the current element or activity
    and that they will be displayed in a modal dialog.'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**咖喱棒图标**（三个垂直点）：由谷歌的Material Design流行起来，表示当前元素或活动有更多*选项*，它们将在模态对话框中显示。'
- en: '**Meatball icon** (three horizontal dots): This is displayed next to an item
    on a list and indicates that there is a pop-up menu with additional *actions*
    for the element.'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**肉丸图标**（三个水平点）：显示在列表项旁边，表示有包含额外*操作*的弹出菜单。'
- en: '**Bento icon** (9 squares in a 3x3 grid): This is used to indicate a pop-up
    menu to navigate between different *applications* inside the same solution or
    environment.'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Bento图标**（3x3网格中的9个方块）：用于指示弹出菜单，在同一个解决方案或环境中导航不同的*应用程序*。'
- en: '**Döner icon** (three stack lines with different sizes): This indicates options
    to *sort* the entries of a list using a selectable order option (usually in a
    popup). This icon, however, has not become as popular as the others.'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**多纳圈图标**（不同大小的三个堆叠线条）：这表示使用可选顺序选项（通常在弹出窗口中）对列表条目进行*排序*的选项。然而，这个图标并没有像其他图标那样流行。'
- en: Accordion menus
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 展开菜单
- en: 'This pattern’s basic use is to group content under a title and to display it
    only when the user selects it, allowing only one group to be displayed at a time.
    Nowadays, it is used commonly for *Frequently Asked Questions* pages, and in sidebar
    menus. Here is an example from the Packt website ([https://www.packtpub.com/](https://www.packtpub.com/)):'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 这种模式的基本用途是在标题下分组内容，并在用户选择时显示它，一次只显示一个组。如今，它常用于*常见问题解答*页面和侧边栏菜单。以下是从Packt网站([https://www.packtpub.com/](https://www.packtpub.com/))的一个示例：
- en: '![Figure 11.20 – Accordion menu used for FAQ](img/Figure_11.20_B18602.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.20 – 用于常见问题解答的展开菜单](img/Figure_11.20_B18602.jpg)'
- en: Figure 11.20 – Accordion menu used for FAQ
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.20 – 用于常见问题解答的展开菜单
- en: The accordion menu is a pattern well understood by users, and one rather simple
    to implement. It helps keep the design clean and allows the user to focus only
    on what matters to them.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 展开菜单是一个用户理解良好的模式，并且实现起来相对简单。它有助于保持设计整洁，并使用户能够只关注对他们重要的事情。
- en: Mega menus
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 大菜单
- en: 'Thus far, most of the patterns we have seen have the objective of hiding complexity
    from the user to avoid overwhelming them. However, this pattern seems to break
    this rule at first sight. When the complexity of navigation would make the features
    hard to find (for example, more than three levels of depth: group -> subgroup
    -> sub-subgroup), an alternative is to use a **mega menu**. This pattern is commonly
    used in government websites and other complex organizations with heavy unavoidable
    content. The basic concept is to present a large menu containing all (or most)
    of the options to choose from. This doesn’t mean that there will not be a “drilling
    down” after reaching these sections, but it does make access faster. For example,
    let’s see the official website for the city of Hyvinkää, Finland ([www.hyvinkaa.fi](http://www.hyvinkaa.fi)):'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们看到的多数模式的目标是隐藏复杂性，以避免使用户感到不知所措。然而，这种模式乍一看似乎打破了这一规则。当导航的复杂性会使功能难以找到（例如，超过三个级别的深度：组
    -> 子组 -> 子子组）时，一个替代方案是使用**大菜单**。这种模式通常用于政府网站和其他具有大量不可避免内容的复杂组织。基本概念是展示一个包含所有（或大多数）可选选项的大菜单。这并不意味着在这些部分之后不会有“深入挖掘”，但它确实使访问更快。例如，让我们看看芬兰Hyvinkää市的官方网站([www.hyvinkaa.fi](http://www.hyvinkaa.fi))：
- en: '![](img/Figure_11.21_B18602.jpg)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_11.21_B18602.jpg)'
- en: 'Figure11.21: Hyvinkää city home page mega menu'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.21：Hyvinkää 市主页大菜单
- en: 'As you can see, it is a compelling number of options with just one click in
    the top menu. However, notice how well organized they are and visually separated
    from each other. The mega menu pattern breaks the *simplicity* rule but does not
    forget other rules and principles of UI design, making it still pleasing to the
    eye. In other cases, it is also possible to consider the mega menu as a placeholder
    for other patterns, such as a sidebar or accordion menu. The official Packt website
    ([https://www.packtpub.com/](https://www.packtpub.com/)) uses this pattern in
    the main menu **BOOKS &** **VIDEOS** option:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，在顶部菜单中只需单击一下，就有许多引人注目的选项。然而，请注意它们的组织多么井然有序，并且彼此之间视觉上分离。大菜单模式打破了*简单性*规则，但并未忘记UI设计的其他规则和原则，使其仍然赏心悦目。在其他情况下，也可以考虑将大菜单视为其他模式的占位符，例如侧边栏或展开菜单。官方Packt网站([https://www.packtpub.com/](https://www.packtpub.com/))在主菜单**书籍
    & 视频**选项中使用了这种模式：
- en: '![Figure 11.22 – Packt mega menu with a sidebar to categorize and filter options](img/Figure_11.22_B18602.jpg)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.22 – Packt 大菜单带有侧边栏以分类和筛选选项](img/Figure_11.22_B18602.jpg)'
- en: Figure 11.22 – Packt mega menu with a sidebar to categorize and filter options
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.22 – Packt 大菜单带有侧边栏以分类和筛选选项
- en: A mega menu could be a place for innovation as it is easier for the user to
    understand and use. It is not a viable option for every web application but can
    be very powerful when properly used. When there is no other option than to show
    a large number of shortcuts or options, this is a good pattern to keep in mind.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 大菜单可能是一个创新的地方，因为它更容易让用户理解和使用。它并不是每个Web应用的可行选项，但使用得当的话可以非常强大。当没有其他选项，只能显示大量快捷方式或选项时，这是一个值得记住的好模式。
- en: Drop-down menus
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 下拉菜单
- en: Drop-down menus and selection boxes display a list of options to the user when
    they are activated (by a click or touch, for example) through a trigger area (icon,
    text, or button). Here, the concept of hiding the options and showing them upon
    “request” by the user is more important than a specific implementation. The accordion
    and mega menus make use of this concept, for example. The accordion menu could
    be considered a list of drop-down menus and is not that far off. HTML provides
    a native solution for selection lists (the `select` element), but the same concept
    can be applied in many circumstances and, with some creativity, can birth new
    implementations.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 当下拉菜单和选择框通过触发区域（图标、文本或按钮）被激活（例如点击或触摸）时，它们会向用户显示一个选项列表。在这里，隐藏选项并在用户“请求”时显示它们的概念比具体的实现更重要。例如，手风琴菜单和超级菜单就利用了这个概念。手风琴菜单可以被视为一系列下拉菜单，并不那么遥远。HTML为选择列表提供了一个原生解决方案（`select`元素），但同样的概念可以在许多情况下应用，并且通过一些创意，可以产生新的实现。
- en: Common patterns for content organization
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内容组织常见模式
- en: The patterns we will see next have to do with the overall organization and layout
    of the website or application.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来要看到的模式与网站或应用的总体组织和布局有关。
- en: Responsive applications
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 响应式应用
- en: The term *responsive* relates to the way the layout of an application adapts
    to the size of the screen. Perhaps you have heard of the “mobile-first approach,”
    which is a philosophy to design first for smaller screens, and then move upward
    to the possible resolutions to reach the desktop, which is considered the largest.
    While there are ways to accomplish this with JavaScript, the most sensible direct
    approach is to use well-thought-out designs with CSS media queries.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: “响应式”这个术语与应用布局如何适应屏幕大小有关。你可能听说过“移动优先方法”，这是一种设计理念，首先为较小的屏幕设计，然后向上移动到可能的分辨率，达到桌面，这被认为是最大的。虽然可以通过JavaScript实现这一点，但最合理的直接方法还是使用经过深思熟虑的设计和CSS媒体查询。
- en: 'Depending on the application, there are certain formulas to create a responsive
    site, but analyzing the many alternatives goes beyond the objectives of this book.
    Instead, we will see only one as an example, using the “switch columns” method.
    This method basically sets for mobile (or narrow portrait screens) the main content
    inside a single vertical column, section by section. A main navigation bar or
    menu is placed at the top or bottom of the screen, always visible. Then, for the
    desktop, the navigation bar totally or partially moves to the top menu or to a
    sidebar, and the content from the main column moves to horizontal sections, stacked
    one after the other. This method is illustrated and better understood with this
    figure:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 根据应用的不同，有一些公式可以创建一个响应式网站，但分析许多替代方案超出了本书的目标。相反，我们将只看到一个例子，使用“切换列”方法。这种方法基本上为移动（或窄肖像屏幕）设置了单个垂直列中的主要内容，部分部分。主导航栏或菜单放置在屏幕的顶部或底部，始终可见。然后，对于桌面，导航栏完全或部分移动到顶部菜单或侧边栏，主列的内容移动到水平部分，一个接一个地堆叠。这个方法通过这个图例来说明，更容易理解：
- en: '![Figure 11.23 – Transformation from mobile first to desktop](img/Figure_11.23_B18602.jpg)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![图11.23 – 从移动优先到桌面端的转换](img/Figure_11.23_B18602.jpg)'
- en: Figure 11.23 – Transformation from mobile first to desktop
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.23 – 从移动优先到桌面端的转换
- en: As you can see from the preceding figure, the sections are always in the same
    order, but the content inside adapts from a vertical to horizontal layout direction.
    This concept is so simple and clean to design that it has become the standard
    for most landing pages. Once you understand this pattern, you begin to see it
    everywhere it is implemented.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 如前图所示，部分始终保持在相同的顺序，但内容内部从垂直布局方向适应到水平布局方向。这个概念设计起来既简单又干净，已经成为大多数着陆页的标准。一旦你理解了这个模式，你开始看到它在任何地方的应用。
- en: 'A simple coding approach to do this change is by using the CSS flexbox model
    and changing the orientation from column to horizontal at the section level. Here
    is an example:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用CSS flexbox模型并在部分级别改变方向从垂直到水平，这是一种简单的编码方法来实现这种变化。以下是一个例子：
- en: '[PRE4]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Notice how the code has included a breakpoint at 600-px wide. You can control
    different screen sizes by applying multiple media queries with breakpoints.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 注意代码中已经包含了一个在600像素宽度的断点。你可以通过应用多个带有断点的媒体查询来控制不同的屏幕尺寸。
- en: Home link
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 首页链接
- en: 'This pattern is so ubiquitous that we do not even think about it. The main
    corporate logo is placed at the top left of the page, as a link to the home screen.
    The position is not random, and it has its origins in the way users “scan” a page.
    Different users will take a quick look when a page loads, guiding the eyes in
    a *Z*, *L*,or *T* movement through the page. Placing the logo as a link at the
    top left ensures that it is the first item the user will register. In this chapter,
    *Figures 11.21* and *11**.22* are good examples of this pattern. But there are
    exceptions to the placement, such as Google’s home page:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 这种模式如此普遍，以至于我们甚至没有意识到它。主要的公司标志被放置在页面左上角，作为返回主页的链接。这个位置不是随机的，它源于用户“扫描”页面的一种方式。不同的用户在页面加载时会快速浏览，引导眼睛在页面中做*Z*、*L*或*T*形状的运动。将标志作为链接放置在左上角确保它是用户首先注意到的项目。在本章中，*图11.21*和*图11**.22*是这种模式的良好例子。但是，也有一些位置上的例外，比如谷歌的主页：
- en: '![Figure 11.24 – Google’s home page is an exception to this pattern as the
    logo is not a link](img/Figure_11.24_B18602.jpg)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![图11.24 – 谷歌的主页是这种模式的例外，因为标志不是链接](img/Figure_11.24_B18602.jpg)'
- en: Figure 11.24 – Google’s home page is an exception to this pattern as the logo
    is not a link
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.24 – 谷歌的主页是这种模式的例外，因为标志不是链接
- en: 'However, the exception shown in the preceding figure is only temporal, as Google
    goes back to this pattern once it presents the search results:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，前面图示中的例外只是暂时的，因为谷歌在展示搜索结果后会回到这个模式：
- en: '![Figure 11.25 – Google’s search result applies the pattern](img/Figure_11.25_B18602.jpg)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![图11.25 – 谷歌的搜索结果应用了这种模式](img/Figure_11.25_B18602.jpg)'
- en: Figure 11.25 – Google’s search result applies the pattern
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.25 – 谷歌的搜索结果应用了这种模式
- en: The home link pattern should bring you back to either the home page or the first
    step of the process. This pattern is so widespread and understood by users, that
    any exception should be made very carefully with a good understanding of the behavior
    and interaction of the user base.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 主页链接模式应该将您带回到主页或流程的第一步。这种模式非常普遍，并且用户都能理解，因此任何例外都应该非常谨慎地做出，并且对用户群体的行为和交互有很好的理解。
- en: Hero section, call to action, and social media icons
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 英雄部分、行动号召和社交媒体图标
- en: The **hero section** is the first part that displays when the page loads in
    the browser and goes from the very top (where the home link and main menu reside)
    to, at most, the visible bottom of the screen. All content below this section
    is referred to as “below the fold,” meaning that to see it, the user needs to
    scroll down the page. The hero section is considered the most important part of
    the home page, and the place where the initial **call to action** is placed. We
    visited this concept previously in this chapter when talking about UI design principles
    and contrast. Nowadays, most websites will adhere to this pattern and display
    the hero section in contrast, with large images or a carousel, and a predominant
    call to action.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '**英雄部分**是当页面在浏览器中加载时首先显示的部分，从最顶部（主页链接和主菜单所在的位置）延伸到屏幕的可见底部。这个部分以下的所有内容被称为“页脚以下”，意味着要看到它，用户需要滚动页面。英雄部分被认为是主页最重要的部分，也是初始**行动号召**放置的地方。我们在这章之前讨论UI设计原则和对比时已经提到了这个概念。如今，大多数网站都会遵循这个模式，并通过对比显示英雄部分，使用大图像或轮播图，以及突出的行动号召。'
- en: '![Figure 11.26 – Kobold Press home page’s hero section – colorful and direct](img/Figure_11.26_B18602.jpg)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
  zh: '![图11.26 – Kobold Press主页的英雄部分 – 鲜艳且直接](img/Figure_11.26_B18602.jpg)'
- en: Figure 11.26 – Kobold Press home page’s hero section – colorful and direct
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.26 – Kobold Press主页的英雄部分 – 鲜艳且直接
- en: 'In the preceding example from Kobold Press ([https://koboldpress.com/](https://koboldpress.com/)),
    we can see how they have applied several patterns seen here, from the home link
    and main menu to the hero section and the call to action. Notice also, on the
    left side, the display of social media icons as a floating sidebar. It is becoming
    a pattern to place such icons with links to the social media address for each
    institution, or in the case of posts or articles, a link to “share” the content.
    Common places to locate the social icon’s bar are as follows:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在Kobold Press的先例（[https://koboldpress.com/](https://koboldpress.com/)）中，我们可以看到他们如何应用了这里看到的一些模式，从主页链接和主菜单到英雄部分和行动号召。注意，在左侧，社交媒体图标作为浮动侧边栏的显示。将此类图标及其链接放置到每个机构的社交媒体地址，或者在某些帖子或文章中，链接到“分享”内容，已经成为一种模式。以下是一些常见的放置社交媒体图标栏的位置：
- en: In the footer of the website
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在网站页脚
- en: At the beginning and/or end of an article
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在文章的开头和/或结尾
- en: In the description of a product
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在产品描述中
- en: When including links to share direct content from a Vue application (for example,
    a product from an online store), it is important that the link and the Vue application
    point directly to such an item. Careful attention needs to be placed on the way
    the navigation URL is formed and interpreted on the first load by the Vue application,
    to avoid sharing links that will open the home screen instead of the desired section
    of the application.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 当包括链接以分享来自 Vue 应用程序（例如，来自在线商店的产品）的直接内容时，链接和 Vue 应用程序直接指向此类项目非常重要。需要仔细注意导航 URL
    的形成和 Vue 应用程序在首次加载时的解释方式，以避免分享会打开主屏幕而不是应用程序所需部分的链接。
- en: Other patterns
  id: totrans-223
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他模式
- en: 'There are other patterns, hundreds if not thousands, that have a direct influence
    on the user experience. I encourage you to continue investigating these, such
    as the following:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他模式，如果不说数百也有数千，它们对用户体验有直接影响。我鼓励你继续调查这些模式，例如以下内容：
- en: Shopping cart patterns
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 购物车模式
- en: User onboarding
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户入门
- en: Gamification patterns
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 游戏化模式
- en: Registration and de-registration patterns
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注册和注销模式
- en: There is, however, a dark side to user experience, and it has to do with the
    use of manipulative and deceitful practices. As an ethical developer, you should
    avoid using any of these dark patterns.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，用户体验也有其阴暗面，这与使用操纵和欺骗性做法有关。作为一名道德的开发者，你应该避免使用任何这些暗模式。
- en: Dark patterns
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 暗模式
- en: Dark patterns are carefully designed interfaces and interactions with the sole
    purpose of manipulating or tricking the user into performing unintended actions
    or even entangling them into malicious results. After such a definition, you may
    think that such actions belong to the deepest shady corners of the internet. Sadly,
    even mainstream companies often follow these unethical practices. As a matter
    of fact, the reproduced examples in these sections all belong to such a category,
    and as often happens with design patterns, many of these overlaps or can be found
    nested within each other. Let’s see them one by one.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 暗模式是精心设计的界面和交互，其唯一目的是操纵或欺骗用户执行非预期操作，甚至使他们陷入恶意结果。在这样定义之后，你可能认为这样的行为属于互联网最阴暗的角落。遗憾的是，即使是主流公司也经常遵循这些不道德的做法。实际上，这些章节中复制的例子都属于这一类，而且正如设计模式经常发生的那样，许多这些模式相互重叠或可以嵌套在一起。让我们逐一看看。
- en: Trick questions
  id: totrans-232
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 陷阱问题
- en: 'This pattern is a simple or complex play on words to trick the user to do the
    opposite of what their intention is. Here is an example:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 这种模式是一种简单或复杂的文字游戏，目的是欺骗用户去做与他们意图相反的事情。以下是一个例子：
- en: '![Figure 11.27 – A trick question for a newsletter subscription](img/Figure_11.27_B18602.jpg)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.27 – 有关订阅通讯的陷阱问题](img/Figure_11.27_B18602.jpg)'
- en: Figure 11.27 – A trick question for a newsletter subscription
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.27 – 有关订阅通讯的陷阱问题
- en: 'As you can see in this example, a user filling in a form would be tempted to
    leave this checkbox unchecked if they don’t want to receive a newsletter from
    the company. The common tendency is to pay attention to the marked text in bold,
    which is a sort of title. The real action for the checkbox can be found at the
    end of the paragraph, which the majority of users would not read: **Check this
    option if you do not want to receive** **our newsletter**.'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在本例中看到的，如果一个用户填写表格时不想收到公司的通讯，他们可能会被诱惑不勾选这个复选框。常见的倾向是关注加粗的文字，这相当于一个标题。复选框的实际操作可以在段落的末尾找到，但大多数用户不会阅读：**如果您不想收到**
    **我们的通讯**，请勾选此选项。
- en: Sneak into the basket
  id: totrans-237
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 悄悄放入购物车
- en: 'This dark pattern appears in many shopping applications, quite commonly in
    services such as hosting and airline tickets. It consists of placing items into
    the shopping cart at checkout, but that the user has not selected, usually presented
    as an offer or a “necessary” item of a small amount. Here is an example:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 这种暗模式出现在许多购物应用中，在诸如托管和机票等服务中相当常见。它包括在结账时将商品放入购物车，但用户并未选择，通常以优惠或“必需”的小额商品的形式呈现。以下是一个例子：
- en: '![Figure 11.28 – An additional item has been added to the shopping cart](img/Figure_11.28_B18602.jpg)'
  id: totrans-239
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.28 – 购物车中已添加额外项目](img/Figure_11.28_B18602.jpg)'
- en: Figure 11.28 – An additional item has been added to the shopping cart
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.28 – 购物车中已添加额外项目
- en: In this example, after ordering for a new domain, a new item, **First time setup**,
    has been automatically added to the shopping cart. This item does not have any
    other explanation, and the amount appears to be “small” in comparison to the main
    purpose of the purchase. Often, these types of items are “scammish” and have no
    other intent than to add penny by penny to the final amount. In some cases, there
    may be options to remove such items before confirming the purchase, but quite
    often there are none.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，在订购新域名后，购物车中自动添加了一个新项目，**首次设置**。这个项目没有其他解释，与购买的主要目的相比，金额看起来“很小”。通常，这类项目是“欺诈性”的，没有其他意图，只是通过一点一滴地增加最终金额。在某些情况下，在确认购买之前可能有选项移除此类项目，但很多时候却没有。
- en: Roach motels
  id: totrans-242
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 蟑螂旅馆
- en: 'This pattern appears quite often for services and subscriptions. It consists
    of making a very easy purchase, often after a free trial period, with the condition
    that charges will continue until explicitly canceled by the user. Here is where
    the dark pattern appears: by making this “unsubscribe” process complicated or
    impossible to complete. For example, some companies require that the user contact
    the support team with a signed letter accompanied by a legal ID. The basic concept
    is to “trap” the user so rescinding the contracted service becomes near impossible.'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 这种模式在服务和订阅中相当常见。它包括在免费试用期后进行非常容易的购买，条件是费用将继续，直到用户明确取消。这就是暗模式出现的地方：通过使“取消订阅”过程变得复杂或无法完成。例如，一些公司要求用户通过带有法律身份证件的签字信件联系支持团队。基本概念是“陷阱”用户，使取消合同服务变得几乎不可能。
- en: Privacy Zuckering
  id: totrans-244
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 隐私诱导
- en: This dark pattern is named after the founder of a recognizable social media
    company. It consists of offering to the user a large number of services, for free,
    while the use of the applications monitors the user’s activity and behavior. This
    data is then collected and sold behind the scenes to third-party companies without
    the knowledge of the user. Often, this practice is somehow named in a rather lengthy
    contract of terms of service, which the user needs to accept before using the
    services. This way, the company alleges that the user has given their consent
    and is aware, while very few users ever read or interpret properly such an agreement.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 这种暗模式是以一家知名社交媒体公司的创始人为名的。它包括向用户提供大量免费服务，同时应用程序会监控用户的活动和行为。然后，这些数据在幕后被收集并出售给第三方公司，而用户并不知情。通常，这种做法会在相当长的服务条款合同中提及，用户在使用服务之前需要接受。这样，公司声称用户已经给予了同意并且知情，而实际上很少有用户会正确阅读或解释这样的协议。
- en: Preventing price comparison
  id: totrans-246
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 阻止价格比较
- en: In this pattern, the website presents to the user a number of plans for services,
    but purposely hides or disguises either features or individual prices, so the
    user is unable to make a direct comparison to select the most suitable option.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种模式中，网站向用户展示了一系列服务计划，但故意隐藏或伪装了功能或个别价格，因此用户无法直接比较以选择最合适的选项。
- en: The price is hidden or disguised in such a way that the user cannot make an
    informed decision and must select an option based on features or other attributes.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 价格被隐藏或伪装得让用户无法做出明智的决定，必须根据功能或其他属性选择选项。
- en: Misdirection
  id: totrans-249
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 引导错误
- en: This is another pattern often used in shopping cart workflows. It consists of
    using names and options that are confusing to the user, with pre-selected options
    that hide alternatives and better price deals. If the system has a floating price
    value (for example, for hotels or airplane tickets), this pattern is often used
    to manipulate the user into selecting the option that is in the best interest
    of the company.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 这是另一种常用于购物车工作流程的模式。它包括使用对用户来说令人困惑的名称和选项，以及预先选择的选项，这些选项隐藏了替代方案和更好的价格优惠。如果系统有一个浮动价格值（例如，酒店或飞机票），这种模式通常被用来操纵用户选择对公司最有利的选项。
- en: Hidden costs
  id: totrans-251
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 隐藏成本
- en: In this pattern, the user’s selection of products or services does not disclose
    a total or comprehensive description of the associated costs involved (beyond
    taxes). Either in the initial purchase or subsequent purchases, the total amount
    paid results in a higher price than what the user estimated in the first instance.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种模式中，用户选择的产品或服务并未披露涉及的相关成本的总和或全面描述（除税收外）。无论是在初始购买还是后续购买中，支付的总金额都高于用户最初估计的价格。
- en: Bait and switch
  id: totrans-253
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 诱饵和更换
- en: This pattern is widely used by online advertisers and is one that causes the
    most hate in captive users. It simply disguises one option to perform another
    or the exact opposite the user intended. A classic example is when a pop-up window
    displays a **Close** button (usually a simple **X**), but when the user clicks
    it intending to close the dialog window, it opens a new tab with the advertised
    website.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 这种模式被在线广告商广泛使用，并且是导致用户最讨厌的一种。它简单地将一个选项伪装成执行另一个或用户原本意图的相反操作。一个典型的例子是，当弹出窗口显示一个**关闭**按钮（通常是简单的**X**）时，但用户点击它意图关闭对话框窗口时，它会打开一个新标签页，显示广告网站。
- en: Confirm shaming
  id: totrans-255
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 确认羞辱
- en: 'A highly manipulative pattern, it involves deliberately using wording or actions
    to shame and ridicule the user into doing something they didn’t want at the beginning
    of the transaction. It can go from mildly annoying to outspoken insulting. It
    is often used together with other dark patterns. Here is an example:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个高度操纵性的模式，它涉及故意使用措辞或行动来羞辱和嘲笑用户，使他们做交易开始时不想做的事情。它可以从轻微的烦恼到直言不讳的侮辱。它经常与其他暗黑模式一起使用。以下是一个例子：
- en: '![Figure 11.29 – A confirmation dialog when removing a service from the cart](img/Figure_11.29_B18602.jpg)'
  id: totrans-257
  prefs: []
  type: TYPE_IMG
  zh: '![图11.29 – 从购物车中删除服务时的确认对话框](img/Figure_11.29_B18602.jpg)'
- en: Figure 11.29 – A confirmation dialog when removing a service from the cart
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.29 – 从购物车中删除服务时的确认对话框
- en: Notice in the example how the wording in the action buttons is highly manipulative,
    even though the original question is not so. This pattern is a double-edged sword,
    as users may feel the rejection of the entire service and cancel the entire operation.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例中注意，操作按钮的措辞非常具有操纵性，尽管原始问题并非如此。这种模式是一把双刃剑，因为用户可能会感到整个服务的拒绝并取消整个操作。
- en: Disguised ads
  id: totrans-260
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 伪装广告
- en: 'When an advertisement is injected into a page, it can disguise itself as proper
    content, imitating styles and action buttons with the intent of tricking the user
    to trigger a redirection or download a file. In some cases, the camouflage is
    such that it is not possible to distinguish the site’s call to action and the
    advertisements. This pattern is popular on free sites that offer to host files
    for download, where it is common to find multiple **Download** buttons on the
    page, yet only one does actually download the desired file and the others redirect
    the user to a third-party site. Here is one example:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 当广告被注入到页面中时，它可以伪装成适当的内容，模仿样式和操作按钮，目的是欺骗用户触发重定向或下载文件。在某些情况下，伪装如此之好，以至于无法区分网站的号召性用语和广告。这种模式在提供托管文件下载的免费网站上很受欢迎，在这些网站上，页面上通常会有多个**下载**按钮，但只有一个是实际下载所需文件，其他则将用户重定向到第三方网站。以下是一个例子：
- en: '![Figure 11.30 – FileHippo.com hosts free software. Some ads disguise as Download
    buttons](img/Figure_11.30_B18602.jpg)'
  id: totrans-262
  prefs: []
  type: TYPE_IMG
  zh: '![图11.30 – FileHippo.com托管免费软件。一些广告伪装成下载按钮](img/Figure_11.30_B18602.jpg)'
- en: Figure 11.30 – FileHippo.com hosts free software. Some ads disguise as Download
    buttons
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.30 – FileHippo.com托管免费软件。一些广告伪装成下载按钮
- en: In this screenshot from [FileHippo.com](http://FileHippo.com), if you access
    the download page for VLC Media Player, the site presents multiple **Download**
    buttons. If a user does not pay attention, it may trigger a different action than
    the intended software download.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个来自[FileHippo.com](http://FileHippo.com)的屏幕截图中，如果你访问VLC媒体播放器的下载页面，该网站会提供多个**下载**按钮。如果用户没有注意，可能会触发与预期软件下载不同的操作。
- en: Friendly spam
  id: totrans-265
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 友好型垃圾邮件
- en: In this dark pattern, the application requests access to the user’s contacts,
    with the idea of expanding their network or social circle. If the user accepts,
    their entire contact list will be “spammed” with emails as if coming from the
    user, offering the service. Often, once this information has been shared, it is
    also shared with third-party entities and advertisers.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个暗黑模式中，应用程序请求访问用户的联系人，目的是扩大他们的网络或社交圈。如果用户同意，他们的整个联系人列表将被“垃圾邮件”式地发送电子邮件，仿佛来自用户，提供该服务。通常，一旦这些信息被分享，也会与第三方实体和广告商分享。
- en: The list of dark patterns may not be directly associated with a single media
    or framework, but it is the ethical responsibility of people in this industry
    to avoid or prevent them.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 暗黑模式的列表可能不直接与单一媒体或框架相关联，但这个行业的从业人员的道德责任是避免或预防它们。
- en: Summary
  id: totrans-268
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we saw important patterns to present the user with a satisfactory
    user experience. We also learned important terms to speak with designers in equal
    terms and with mutual understanding – a necessary point for collaboration and
    presenting the user base with the best possible positive experience. We also reviewed
    some of the most common dark patterns, which are techniques and workflow implementations
    to manipulate users and often deprive them of privacy and resources. While mostly
    informative, this chapter should give you a better understanding of the environment
    where web applications are built, and what standards to follow for easy use. This
    is all knowledge that a good engineer and developer should be aware of.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到了向用户呈现满意用户体验的重要模式。我们还学习了与设计师平等对话并相互理解的重要术语——这是协作和向用户基础提供最佳可能积极体验的必要点。我们还回顾了一些最常见的暗模式，这些模式是操纵用户的技术和工作流程实现，通常剥夺他们的隐私和资源。虽然主要是信息性的，但本章应该让你更好地理解构建网络应用程序的环境，以及为了易于使用应遵循的标准。所有这些都是优秀工程师和开发者应该了解的知识。
- en: Review questions
  id: totrans-270
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 复习问题
- en: 'Here are some simple questions to help you summarize what you learned in this
    chapter:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些简单的问题可以帮助您总结本章学到的内容：
- en: What are UI and UX patterns?
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: UI 和 UX 模式是什么？
- en: Can you name the benefits of using UX patterns?
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你能说出使用 UX 模式的益处吗？
- en: How can you benefit of using standard patterns in your Vue 3 components?
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你如何在 Vue 3 组件中使用标准模式获得好处？
- en: What are dark patterns and why should they be avoided?
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是暗模式，为什么应该避免它们？
- en: 'Appendix: Migrating from Vue 2'
  id: totrans-276
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录：从 Vue 2 迁移
- en: Migrating a Vue 2 application to Vue 3 is not as straightforward as just replacing
    the framework. While the Options API remains fully compatible and there should
    not be a need to migrate to the Composition API, there are other breaking changes
    that we should be aware of.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 将 Vue 2 应用程序迁移到 Vue 3 并不像只是替换框架那样简单。虽然 Options API 仍然完全兼容，并且不应该需要迁移到 Composition
    API，但还有一些其他破坏性变化我们应该注意。
- en: The changes between versions affect not only the core framework but also the
    ecosystem (new router, state management, etc.) and other dependencies. In Vue
    3, there is also a new official bundler, **Vite** (which replaces **WebPack**),
    a new router and state management (**Pinia**, the replacement for **Vuex**), and
    other plugins as well. The list of changes included here is a quick reference
    to help you migrate your application but may not be exhaustive with all the nuances
    of specific needs for each particular project. Because of this, I will refer you
    to the official documentation for migration at [https://v3-migration.vuejs.org/](https://v3-migration.vuejs.org/).
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 版本之间的变化不仅影响核心框架，还影响生态系统（新路由、状态管理等）和其他依赖项。在 Vue 3 中，还有一个新的官方打包器 **Vite**（取代 **WebPack**），一个新的路由和状态管理（**Pinia**，取代
    **Vuex**），以及其他插件。这里列出的变化列表是一个快速参考，以帮助您迁移应用程序，但可能不会详尽无遗地涵盖每个特定项目特定需求的细微差别。因此，我将向您推荐官方迁移文档
    [https://v3-migration.vuejs.org/](https://v3-migration.vuejs.org/)。
- en: 'Here is a non-exclusive list of the major changes, other than the new Composition
    API:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个非排他性的主要变化列表，除了新的 Composition API 之外：
- en: A different way to bootstrap and start the application
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动和启动应用程序的不同方式
- en: Changes in global components and plugins registration
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 全局组件和插件注册的变化
- en: Changes in the `data` property
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data` 属性的变化'
- en: Changes to `v-model`, `props`, and `emits`
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`v-model`、`props` 和 `emits` 的变化'
- en: Reactivity options
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 响应式选项
- en: Framework browser compatibility
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 框架浏览器兼容性
- en: Changes in directory and file organization
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目录和文件组织的变化
- en: Changes in the router and state management
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 路由和状态管理的变化
- en: This list doesn’t show all the changes *under the hood* that the framework went
    through, but it will give you a starting point to migrate your working application
    from Vue 2 to Vue 3\. Now, let’s see each of these in more detail.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 这个列表并没有显示框架在内部经历了所有变化，但它将为您提供一个起点，将您的工作应用程序从 Vue 2 迁移到 Vue 3。现在，让我们更详细地看看这些变化。
- en: A different way to bootstrap and start the application
  id: totrans-289
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动和启动应用程序的不同方式
- en: 'The way to bootstrap and start our application has changed. It is now required
    that we import a constructor from the Vue bundle. Let’s compare both implementations
    from `main.js`:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 启动和启动我们的应用程序的方式已经改变。现在需要我们从 Vue 包中导入一个构造函数。让我们从 `main.js` 中比较两种实现：
- en: '**Vue 2** **application instantiation**:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '**Vue 2** **应用程序实例化**：'
- en: '[PRE5]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In Vue 2, we import the Vue constructor and pass an object with options. In
    Vue 3, after the application has been created, we attach components, plugins,
    and so on before mounting our application to the top-level component. Here is
    the example rewritten for Vue 3:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 在Vue 2中，我们导入Vue构造函数并传递一个包含选项的对象。在Vue 3中，在创建应用程序之后，在将应用程序挂载到顶级组件之前，我们附加组件、插件等。以下是针对Vue
    3重写的示例：
- en: '**Vue 3** **application instantiation**:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '**Vue 3** **应用程序实例化**：'
- en: '[PRE6]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The location of the `index.html` file has also changed and is now placed at
    the root of our application. You can see more changes to the document structure
    in [*Chapter 3*](B18602_03.xhtml#_idTextAnchor079), *Setting Up a* *Working Project*.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: '`index.html`文件的位置也已经改变，现在放置在我们的应用程序的根目录下。你可以在[*第3章*](B18602_03.xhtml#_idTextAnchor079)，*设置工作项目*中看到对文档结构的更多更改。'
- en: Register global components, plugins, and so on
  id: totrans-297
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 注册全局组件、插件等
- en: 'In Vue 2, we declare an application-wide component (global) by attaching it
    to the Vue root instance. Here is an example:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 在Vue 2中，我们通过将其附加到Vue根实例来声明一个应用程序范围内的组件（全局）。以下是一个示例：
- en: '[PRE7]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In Vue 3, we instead register components and plugins with the application *after*
    it has been created and *before* it is mounted. The `component` (for components),
    `use` (for plugins), and `directive` (for directives) methods are all chainable.
    Here is how the preceding example looks in Vue 3:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 在Vue 3中，我们而是在创建并挂载应用程序之后注册组件和插件。`component`（用于组件）、`use`（用于插件）和`directive`（用于指令）方法都是可链式的。以下是前面示例在Vue
    3中的样子：
- en: '[PRE8]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'If we do not need to reference the application, we can just concatenate the
    instantiation of the application as in this example:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们不需要引用应用程序，我们只需像这个示例中那样连接应用程序的实例化即可：
- en: '[PRE9]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The application bootstrap is independent of the syntax used to describe components
    (Options API, Composition API, or script setup).
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序引导与描述组件（选项API、组合API或script setup）所使用的语法无关。
- en: The data property is now always a function
  id: totrans-305
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据属性现在始终是一个函数
- en: In Vue 2 applications, there is a discrepancy in the `data` attribute. The root
    component has a property that is directly a reactive definition, while all other
    components need to provide a function that returns an object as the `data` property.
    This created an inconsistency in the creation of components. This issue has been
    resolved in Vue 3, so now *all components are treated equally*, meaning the data
    attribute always has to be a function that returns an object whose members will
    be reactive properties.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 在Vue 2应用程序中，`data`属性存在差异。根组件有一个直接是响应式定义的属性，而所有其他组件都需要提供一个函数作为`data`属性，该函数返回一个对象。这导致了组件创建的不一致性。这个问题在Vue
    3中得到了解决，因此现在*所有组件都被同等对待*，这意味着数据属性始终必须是一个返回对象的函数，该对象的成员将是响应式属性。
- en: 'Here is an example of the root component in `main.js`:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是`main.js`中根组件的一个示例：
- en: '[PRE10]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'And then in all other components, you have the following:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在所有其他组件中，你有以下内容：
- en: '[PRE11]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Notice that for these examples, we are using the Options API for clarity. When
    using the `script setup` syntax, you do not need to declare a `data` attribute.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，对于这些示例，我们使用选项API来提高清晰度。当使用`script setup`语法时，你不需要声明`data`属性。
- en: There are more reactive options to choose from
  id: totrans-312
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 有更多可选择的响应式选项
- en: 'When using the Composition API, we have two options to create reactive properties:
    `ref()` and `reactive()`. The first one returns an object with a `.value` propertythat
    is reactive. The second converts an object passed as an argument and returns the
    same object with reactive properties. Here is one example:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用组合式API时，我们有两种选项来创建响应式属性：`ref()`和`reactive()`。第一个返回一个具有`.value`属性的响应式对象。第二个将作为参数传递的对象转换为具有响应式属性的相同对象。以下是一个示例：
- en: '[PRE12]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Notice the difference in syntax. At this point, you may think about when to
    use one or the other. Here is a small comparison of when to use each one:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 注意语法上的差异。在这个阶段，你可能需要考虑何时使用其中一个。以下是对何时使用每个选项的小比较：
- en: '| `ref()` | `reactive()` |'
  id: totrans-316
  prefs: []
  type: TYPE_TB
  zh: '| `ref()` | `reactive()` |'
- en: '|'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Applies to any data type, not only primitives.
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 适用于任何数据类型，而不仅仅是原始类型。
- en: When applied to objects or arrays, you can replace them.
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当应用于对象或数组时，你可以替换它们。
- en: It uses getters and setters to detect changes and trigger reactivity.
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它使用getter和setter来检测更改并触发响应性。
- en: Use it by default for simple data. For arrays and objects (complex types), it
    is recommended to use `reactive()` when working with their internal elements.
    When the entire object will be replaced, it is convenient to use `ref()`.
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于简单数据，默认使用它。对于数组和对象（复杂类型），建议在处理其内部元素时使用`reactive()`。当整个对象将被替换时，使用`ref()`会更方便。
- en: '|'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Applies to objects and arrays, but not primitives. Makes their attributes reactive.
  id: totrans-323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 适用于对象和数组，但不适用于原始数据类型。使它们的属性具有响应性。
- en: The object cannot be replaced, only its attributes.
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象不能被替换，只能替换其属性。
- en: It uses the native implementation of the `Proxy()` handlers to detect changes
    and trigger reactivity.
  id: totrans-325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它使用`Proxy()`处理器的本地实现来检测变更并触发响应性。
- en: Use when you need to group a large number of variables that must “travel” together.
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当您需要将大量必须“一起旅行”的变量分组时使用。
- en: '|'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Table A.1 - A simple guide to choose between ref() and reactive()
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 表A.1 - 选择ref()和reactive()之间的简单指南
- en: Each method has its own advantages. From the point of view of reactive properties
    with complex types, it doesn’t matter which one you use. In some cases, `reactive()`
    can be more performant due to the use of native implementations in the browser.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 每种方法都有自己的优点。从复杂类型响应属性的角度来看，您使用哪个都无关紧要。在某些情况下，由于浏览器中使用了本地实现，`reactive()`可能更高效。
- en: Changes to v-model, props, and events
  id: totrans-330
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: v-model、props和事件的变更
- en: This is a big change from Vue 2 that can and will break your code. In Vue 3,
    we no longer receive and emit the property value. Instead, any prop can be input/output,
    such as `v-model`. The default `v-model` attribute is received in a *prop* named
    `modelValue`, and the counterpart *emit* prepends `update:`, so it is called `update:modelValue`.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 这是从Vue 2的一个重大变化，可能会破坏您的代码。在Vue 3中，我们不再接收和发射属性值。相反，任何属性都可以作为输入/输出，例如`v-model`。默认的`v-model`属性以名为`modelValue`的**prop**接收，对应的**emit**前缀为`update:`，因此称为`update:modelValue`。
- en: In Vue 3, we can now have multiple *v-models* at the same time. For example,
    we can have `v-model:person="person"` in our component, and define the prop as
    `"modelPerson"` and the event as `"update:modelPerson"`.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 在Vue 3中，我们现在可以同时拥有多个*v-models*。例如，我们可以在组件中使用`v-model:person="person"`，并将属性定义为`"modelPerson"`，事件定义为`"update:modelPerson"`。
- en: Props and emits are now macros (a macro is a special function provided by the
    bundler or framework). **Props** have the same footprint as in Vue 2, so you can
    define them as arrays, objects, include types, default values, and so on.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: Props和emits现在是宏（宏是打包器或框架提供的特殊函数）。**Props**与Vue 2中的占用空间相同，因此您可以将其定义为数组、对象、包含类型、默认值等。
- en: 'Here is an example with a default v-model and a notated model:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个带有默认v-model和注记模型的示例：
- en: '[PRE13]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Props and emits are discussed in this book in more detail in [*Chapter 4*](B18602_04.xhtml#_idTextAnchor102),
    *User Interface Composition* *with Components*.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的[*第4章*](B18602_04.xhtml#_idTextAnchor102)中更详细地讨论了Props和emits，*组件的用户界面组合*。
- en: Removed old browser compatibility
  id: totrans-337
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移除了旧浏览器的兼容性
- en: 'Vue 3 was built for speed and “modern” JavaScript. Backward compatibility for
    older browsers has been removed. Many internal functions used for reactivity now
    use native implementations by default (for example, the Proxy API). If you need
    to support an application in an outdated browser, you should consider staying
    with Vue 2, but fear not! There is an official plugin for Vue 2 to use the new
    *Composition API*, including the `script` `setup` syntax:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: Vue 3是为了速度和“现代”JavaScript而构建的。已移除对旧浏览器的向后兼容性。现在，用于响应性的许多内部函数默认使用本地实现（例如，Proxy
    API）。如果您需要支持旧版浏览器中的应用程序，您应该考虑继续使用Vue 2，但不必担心！有一个官方插件可以让Vue 2使用新的*Composition API*，包括`script`
    `setup`语法：
- en: Vue 2.7 includes it without plugins ([https://blog.vuejs.org/posts/vue-2-7-naruto.html](https://blog.vuejs.org/posts/vue-2-7-naruto.html))
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vue 2.7无需插件即可包含它（[https://blog.vuejs.org/posts/vue-2-7-naruto.html](https://blog.vuejs.org/posts/vue-2-7-naruto.html)）
- en: 'If you are on Vue 2.6 or below, you can find the plugin here: [https://github.com/vuejs/composition-api](https://github.com/vuejs/composition-api)'
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您使用Vue 2.6或以下版本，您可以在以下位置找到插件：[https://github.com/vuejs/composition-api](https://github.com/vuejs/composition-api)
- en: If you still want the speed of Vue 3, there is a special migration build that
    has almost the same API as Vue 2 (see [https://v3-migration.vuejs.org/migration-build.html](https://v3-migration.vuejs.org/migration-build.html))
  id: totrans-341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您仍然想要Vue 3的速度，有一个特殊的迁移构建，其API几乎与Vue 2相同（见[https://v3-migration.vuejs.org/migration-build.html](https://v3-migration.vuejs.org/migration-build.html)）
- en: 'Why remove old browsers’ compatibility? There are many reasons, including the
    following:'
  id: totrans-342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么移除旧浏览器的兼容性？原因有很多，包括以下：
- en: The global usage of older browsers has fallen below a significant percentage,
    and it is expected to continue to drop over time.
  id: totrans-343
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 旧浏览器的全球使用率已经下降到显著百分比以下，预计未来还会继续下降。
- en: With the removal of old code and compatibility checks, the resulting Vue core
    implementation is lighter and more performant. The increase in speed and reduction
    in bundle size is significant, making our applications load faster and be more
    responsive.
  id: totrans-344
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过移除旧代码和兼容性检查，得到的 Vue 核心实现更轻量级和性能更高。速度的提升和包大小的减少非常显著，使得我们的应用程序加载更快，响应更灵敏。
- en: 'In practice, there are two browser engines that take up most of the market:
    browsers based on Chromium, and ones based on Mozilla Firefox. Check [www.caniuse.com](http://www.caniuse.com)
    if you need to use a feature that may not be available in older browsers.'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，有两个浏览器引擎占据了大部分市场份额：基于 Chromium 的浏览器和基于 Mozilla Firefox 的浏览器。如果您需要使用可能在旧浏览器中不可用的功能，请检查
    [www.caniuse.com](http://www.caniuse.com)。
- en: Changes in directory and file organization
  id: totrans-346
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 目录和文件组织的变化
- en: The organization for the directory structure in Vue 2 was influenced to some
    degree by the bundler at the time, `index.html`, which has moved to the root folder
    out of the `Public/` folder. It now has a more prominent place in the bundling
    process. This and other changes appear in [*Chapter 3*](B18602_03.xhtml#_idTextAnchor079),
    *Setting Up a* *Working Project*.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: Vue 2 中目录结构的组织在一定程度上受到当时打包器的影响，`index.html` 已经从 `Public/` 文件夹移动到根文件夹。现在它在打包过程中有更突出的位置。这些和其他变化可以在
    [*第 3 章*](B18602_03.xhtml#_idTextAnchor079)，*设置工作项目* 中找到。
- en: Changes in the router and state management
  id: totrans-348
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 路由和状态管理的变化
- en: The new approach to components and modularity also affects the router and the
    state management. While a new version of the router has been provided for Vue
    3, the state management’s official solution has moved away from **Vuex** to **Pinia**.
    More information about the new router and Pinia can be found in [*Chapter 5*](B18602_05.xhtml#_idTextAnchor130),
    *Single-Page Applications*, and in [*Chapter 7*](B18602_07.xhtml#_idTextAnchor173),
    *Data Flow* *Management*, respectively.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 组件和模块化的新方法也影响了路由和状态管理。虽然 Vue 3 提供了新的路由版本，但状态管理的官方解决方案已经从 **Vuex** 转向 **Pinia**。关于新路由和
    Pinia 的更多信息可以在 [*第 5 章*](B18602_05.xhtml#_idTextAnchor130)，*单页应用程序* 和 [*第 7 章*](B18602_07.xhtml#_idTextAnchor173)，*数据流管理*
    中找到。
- en: The new router now has a different approach to defining modes, using constructors
    such as `createWebHashHistory` (hash mode), `createWebHistory` (history mode),
    and `createMemoryHistory` (navigation in memory alone). This change also affected
    the configuration of the production bundle. In WebPack, when in history mode,
    the deployment path was part of the bundler configuration. Now, the path is passed
    to the constructor as a parameter, being handled completely by the router.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 新的路由现在采用不同的方法来定义模式，使用构造函数如 `createWebHashHistory`（哈希模式）、`createWebHistory`（历史模式）和
    `createMemoryHistory`（仅内存导航）。此更改还影响了生产包的配置。在 WebPack 中，当处于历史模式时，部署路径是打包器配置的一部分。现在，路径作为参数传递给构造函数，由路由器完全处理。
- en: New components and other changes
  id: totrans-351
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 新组件和其他变化
- en: Vue 3 also introduces new components such as `teleport` (a special component
    that allows placing reactive templates outside the Vue component tree, inside
    another DOM element), but also breaks free of some limitations in Vue 2\. For
    example, components now can have more than one root element. Please refer to the
    official documentation to learn more about the new components in Vue 3.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: Vue 3 还引入了新的组件，例如 `teleport`（一个特殊组件，允许将响应式模板放置在 Vue 组件树之外，另一个 DOM 元素内部），同时也突破了
    Vue 2 的一些限制。例如，组件现在可以有多个根元素。请参阅官方文档了解 Vue 3 中的新组件。
- en: Other breaking changes
  id: totrans-353
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他破坏性变化
- en: To see a full list of breaking changes not mentioned here, please check the
    official documentation at [https://v3-migration.vuejs.org/breaking-changes/](https://v3-migration.vuejs.org/breaking-changes/).
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看此处未提及的所有破坏性变化的完整列表，请检查官方文档 [https://v3-migration.vuejs.org/breaking-changes/](https://v3-migration.vuejs.org/breaking-changes/)。
- en: Summary
  id: totrans-355
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Migrating from Vue 2 to Vue 3 has a clear path, with only a few breaking changes
    to be aware of. The new Composition API however, does require a change of mentality,
    but it comes naturally when using the `script setup` syntax. But the most important
    feature of Vue 3 is the performance gains and the size reduction. In short, Vue
    3 is fast, very fast, and well worth the migration. For projects supporting outdated
    browsers, there are plugins for the Vue 2.x branch that provide some of the advantages
    of Vue 3, but for other projects seeking the positive gains of Vue 3, it is well
    worth the migration.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 从Vue 2迁移到Vue 3有一条清晰的路径，只需要注意少数破坏性变更。然而，新的组合API确实需要心态上的改变，但在使用`script setup`语法时，这种改变是自然而然的。但Vue
    3最重要的特性是性能的提升和体积的减小。简而言之，Vue 3速度快，非常快，迁移是值得的。对于支持过时浏览器的项目，Vue 2.x分支的插件提供了一些Vue
    3的优势，但对于寻求Vue 3积极收益的其他项目，迁移是值得的。
- en: Final words
  id: totrans-357
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最后的话
- en: 'Congratulations on reaching the end of this book! We have covered a wide spectrum
    of topics, from the very basics of Vue to the deployment of the final product.
    Let’s review together the main concepts for each chapter:'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜你到达这本书的结尾！我们已经涵盖了从Vue的非常基础到最终产品部署的广泛主题。让我们一起来回顾每一章的主要概念：
- en: In [*Chapter 1*](B18602_01.xhtml#_idTextAnchor017), *The Vue 3 Framework*, we
    introduced the key Vue concepts and the different syntax options available for
    writing components
  id: totrans-359
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 [*第1章*](B18602_01.xhtml#_idTextAnchor017)，*Vue 3框架*，我们介绍了Vue的关键概念和编写组件时可用的一些不同语法选项
- en: In [*Chapter 2*](B18602_02.xhtml#_idTextAnchor040), *Software Design Principles
    and Patterns*, we took a deep-dive into important conceptual and well-tested patterns
    for architecting our code
  id: totrans-360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 [*第2章*](B18602_02.xhtml#_idTextAnchor040)，*软件设计原则和模式*，我们深入探讨了构建代码时的重要概念和经过良好测试的模式
- en: In [*Chapter 3*](B18602_03.xhtml#_idTextAnchor079), *Setting Up a Working Project*,
    and [*Chapter 4*](B18602_04.xhtml#_idTextAnchor102), *User Interface Composition
    with Components*, we learned how to start a Vue project and how to translate designs
    into working code
  id: totrans-361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 [*第3章*](B18602_03.xhtml#_idTextAnchor079)，*设置工作项目*，和 [*第4章*](B18602_04.xhtml#_idTextAnchor102)，*使用组件的用户界面组合*，我们学习了如何启动Vue项目以及如何将设计转换为可工作的代码
- en: In [*Chapter 5*](B18602_05.xhtml#_idTextAnchor130), *Single-Page Applications*,
    and [*Chapter 6*](B18602_06.xhtml#_idTextAnchor148), *Progressive Web Applications*,
    possibly the most important chapters, we learned how to create advanced applications
    with navigation and installation via the browser’s native functions
  id: totrans-362
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 [*第5章*](B18602_05.xhtml#_idTextAnchor130)，*单页应用程序*，和 [*第6章*](B18602_06.xhtml#_idTextAnchor148)，*渐进式Web应用程序*，可能是最重要的章节，我们学习了如何通过浏览器的原生功能创建具有导航和安装的高级应用程序
- en: In [*Chapter 7*](B18602_07.xhtml#_idTextAnchor173), *Data Flow Management*,
    and [*Chapter 8*](B18602_08.xhtml#_idTextAnchor186), *Multithreading with Web
    Workers*, we learned more about how to improve performance and control the information
    flow with good practices
  id: totrans-363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 [*第7章*](B18602_07.xhtml#_idTextAnchor173)，*数据流管理*，和 [*第8章*](B18602_08.xhtml#_idTextAnchor186)，*使用Web
    Workers的多线程*，我们学习了更多关于如何通过良好的实践提高性能和控制信息流的方法
- en: '[*Chapter 9*](B18602_09.xhtml#_idTextAnchor199), *Testing and Source Control*,
    introduced tools to automate programmatic tests to secure the good quality of
    our code'
  id: totrans-364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第9章*](B18602_09.xhtml#_idTextAnchor199)，*测试和源代码控制*，介绍了自动化程序测试的工具，以确保我们代码的良好质量'
- en: '[*Chapter 10*](B18602_10.xhtml#_idTextAnchor224), *Deploying Your Application*,
    gave us a view into the steps and resources needed to publish and secure our server
    with a secure protocol'
  id: totrans-365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第10章*](B18602_10.xhtml#_idTextAnchor224)，*部署您的应用程序*，展示了发布和通过安全协议保护我们的服务器所需的步骤和资源'
- en: '[*Chapter 11*](B18602_11.xhtml#_idTextAnchor238), *Bonus Chapter -UX,* gave
    us a view from the user perspective, and a common vocabulary to collaborate with
    UI/UX designers'
  id: totrans-366
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第11章*](B18602_11.xhtml#_idTextAnchor238)，*bonus章节 -UX*，从用户的角度提供了视角，以及与UI/UX设计师协作的常用词汇'
- en: Indeed, this has been a long journey, but I’m confident and positive that this
    content will improve your skills as a developer and professional.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 的确，这是一段漫长的旅程，但我有信心和积极的态度相信，这些内容将提高你作为开发者和专业人士的技能。
- en: Where to go from here
  id: totrans-368
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接下来去哪里
- en: Technology keeps advancing daily, so there is much to learn ahead. New tools
    and patterns are created regularly. Because of this, it is not possible to cover
    them all in just one book. Often, while preparing a chapter, I’ve been limited
    to touching on some technologies and concepts only at a surface level due to the
    scope and breadth of this book. For example, beyond the web, Vue can also be used
    to develop hybrid applications with tools such as **NW.js** ([https://nwjs.io/](https://nwjs.io/)),
    **Electron** ([https://www.electronjs.org/](https://www.electronjs.org/)), **Tauri**
    ([https://tauri.app/](https://tauri.app/)), and more.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 技术每天都在进步，因此还有很多东西需要学习。新的工具和模式经常被创造出来。正因为如此，不可能在一本书中涵盖所有这些内容。通常，在准备章节时，由于本书的范围和广度，我仅限于对一些技术和概念进行表面上的探讨。例如，除了网页之外，Vue
    还可以用 **NW.js** ([https://nwjs.io/](https://nwjs.io/))、**Electron** ([https://www.electronjs.org/](https://www.electronjs.org/))、**Tauri**
    ([https://tauri.app/](https://tauri.app/)) 等工具开发混合应用程序。
- en: Learning about this framework and the technologies it is based upon will give
    you important skills.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 了解这个框架及其所基于的技术将为你提供重要的技能。
- en: Finally...
  id: totrans-371
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最后...
- en: I express my appreciation for your dedication to this discipline and thank you
    for purchasing this book. I wish you well and brilliant success in your future
    endeavors and professional career.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 我对你在这一学科上的奉献表示感谢，并感谢你购买这本书。祝愿你在未来的努力和职业生涯中取得美好和辉煌的成就。
- en: Sincerely,
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 诚挚地，
- en: Pablo David Garaguso
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 巴勃罗·大卫·加拉斯索
- en: '[www.pdgaraguso.com](http://www.pdgaraguso.com)'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: '[www.pdgaraguso.com](http://www.pdgaraguso.com)'
