- en: Tabs - Grouping Content into Tab Sections
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you''ll learn about the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: AppBar integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tab alignment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rendering tabs based on state
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Abstracting tab content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tab navigation with routes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `Tabs` Material-UI component is used to organize content on your screen.
    The tabs are organized in a horizontal fashion and they should feel natural for
    your users. You can use tabs any time your screen has lots of content that could
    be split into different category sections.
  prefs: []
  type: TYPE_NORMAL
- en: AppBar integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`AppBar` components can be used with the `Tabs` component. You can do this
    so that the tab buttons are rendered within an App Bar. This provides a container
    for your tab buttons—by default, there is nothing surrounding them.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s say that you have a `Tabs` component with three `Tab` buttons. Instead
    of rendering the tabs so that they look as though they''re floating on the screen,
    you can wrap them in an `AppBar` component to give them a contained look and feel.
    Here''s the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When the screen first loads, you''ll see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/09960806-49a4-4d67-976e-75b0667b6abe.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When you click on one of the tab buttons, the selected tab changes, along with
    the content underneath the tabs. For example, clicking on the ITEM THREE tab results
    in this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e7b18d8b-8848-4de1-b7fe-04f5edcb640b.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `Tabs` and `Tab` components are rendered inside the `AppBar` component.
    Usually, `AppBar` has a `Toolbar` component as its child, but `Tab` can work too:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Your component has a `value` state that is used to keep track of the selected
    tab. The `onChange()` handler is used to update this state; it gets set to the
    current index of the selected tab. Then, you can use the `value` state to determine
    which content to render below the `AppBar` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: If the first tab is selected, then the value is `0` and the `Item One` text
    is rendered. The same logic follows for the other two tabs.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you want tabs but you don''t want the indicator that''s rendered underneath
    the text, you can set it to be the same color as the `AppBar` component. This
    is done using the `indicatorColor` property, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'By setting the `indicatorColor` value to `primary`, the indicator should now
    be the same color as the `AppBar` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b21a3313-39ab-43f7-a191-f791bc18cc2a.png)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Tabs` API documentation: [https://material-ui.com/api/tabs/](https://material-ui.com/api/tabs/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Tabs` demos: [https://material-ui.com/demos/tabs/](https://material-ui.com/demos/tabs/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tab alignment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `Tabs` component has two properties to help you align your tab buttons.
    The `centered` property centers the tabs, while the `fullWidth` property spreads
    out the tabs.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s say that you have three basic tabs using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what you should see when the screen first loads:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/39fbb81c-8587-4e7d-baef-56929e5508ce.png)'
  prefs: []
  type: TYPE_IMG
- en: 'By default, tabs are aligned to the left. You can center your tabs by setting
    the `centered` property, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what centered tabs look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d8af98bd-1853-465b-9ba1-86100051bcbf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When your tabs are centered, all of the empty space goes to the left and right
    of the tabs. The alternative is setting the `variant` property to `fullWidth`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what full width tabs look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e9bf778b-ce3f-4224-b2a3-36a7f5cb8fa5.png)'
  prefs: []
  type: TYPE_IMG
- en: The tabs are centered, but they're spaced evenly to cover the width of the screen.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `centered` property is just a convenient way of specifying the `justifyContent`
    style on the `Tabs` component. Whenever there is a property to style Material-UI
    components in a specific way, you should use it instead of applying your own styles.
    Future versions of the library could include fixes that rely on the property that
    you'll miss out on.
  prefs: []
  type: TYPE_NORMAL
- en: Another reason to style components using the property is that Material-UI might
    behave differently depending on how other properties are set. For example, with
    the `Tabs` component, you can't set the `centered` property while the `scrollable`
    property is set to true; Material-UI checks for this and handles it.
  prefs: []
  type: TYPE_NORMAL
- en: The `fullWidth` value of the `variant` property is actually passed to the `Tab`
    component, which alters the styles it uses based on this value. The result is
    the even spacing of tabs within the container element.
  prefs: []
  type: TYPE_NORMAL
- en: You can set the `centered` and `variant` properties at the same time. However,
    `centered` isn't necessary if `variant` has a value of `fullWidth`. Using both
    is harmless though.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The centered layout for tabs works well on smaller screens, while the full width
    layout looks good on larger screens. You can use Material-UI utilities that tell
    you about breakpoint changes. You can then use this information to change the
    alignment of your tabs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s a modified version of this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now when you resize your screen, the alignment properties of the grid can change
    in response to breakpoint changes. Let''s break down these changes from the bottom
    up, starting with the `variant` property value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The value will be `fullWidth` if the `width` property is anything but the `xs`
    or `sm` breakpoint. In other words, if it's a larger screen, the value will be `fullWidth`.
  prefs: []
  type: TYPE_NORMAL
- en: Next, you need the width property to be passed to your component somehow. You
    can use the `withWidth()` utility from Material-UI. It works like `withStyles()`
    in that it returns a new component with new properties assigned to it. The component
    returned by `withWidth()` will update its `width` prop any time the breakpoint
    changes. For example, if the user resizes their screen from `sm` to `md`, this
    will trigger a width change and `fullWidth` will change from false to true.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use the `withWidth()` component—along with the `withStyles()` component—you
    can use the `compose()` function from `recompose`. This function makes your code
    more readable when you''re applying several higher-order functions that decorate
    your component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: You could call `withWidth(withStyles(styles))(TabAlignment)` if you really don't
    want to use `recompose`, but as a general rule, I like to use it any time more
    than one higher-order function is involved.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Tabs` demos: [https://material-ui.com/demos/tabs/](https://material-ui.com/demos/tabs/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Tabs` API documentation: [https://material-ui.com/api/tabs/](https://material-ui.com/api/tabs/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Tools for composing React components: [https://github.com/acdlite/recompose/](https://github.com/acdlite/recompose/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rendering tabs based on state
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Tabs in your React application might be driven by data. If so, you can set tab
    data in the state of your component to have them render initially and update if
    anything changes.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s say that you have some data that determines the tabs to render in your
    app. You can set this data in the state of your component and use it to render
    the `Tab` components, as well as the tab content when tab selections are made.
    Here''s the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'When you first load the screen, you''ll see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/59bf0bed-1616-4cc2-9921-b16103e6f1da.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you click on the ITEM TWO tab, here''s what you''ll see:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bdbaebd1-78ec-4887-b5e3-2a8142bc7904.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s start by looking at the state of your component that drives the `tabs`
    that are rendered:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The `tabs` state is an array, and each object within it represents a tab to
    be rendered. The `active` Boolean property determines which tab is `active`. The
    `label` property is what is rendered as the actual tab button and the content
    is rendered below the tabs when the tab is clicked on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let''s take a look at the markup used to render the `tabs` and the content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Instead of manually rendering `Tab` components, you're iterating over the `tabs`
    state to render each tab. For the selected content, you now only have to render
    one `Typography` component that references `content`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the two `active` and `content` values, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The `active` constant is the index of the active tab. This value is passed to
    the `value` property of the `Tabs` component. It's also used by the `content`
    value—the content of the active tab. Both of these constants simplify the markup
    that your component needs to render.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that you''re controlling your tabs with `state`, you can control more aspects
    of your rendered tabs. For instance, you could add `disabled` and `hidden` states
    to each tab. You could also place an `icon` property to render in your tab state.
    Here''s a new version of the `tabs` state:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you have the ability to render `disabled` tabs that cannot be clicked on—as
    is the case with the SEARCH tab. You can also hide tabs completely by setting
    `hidden` to `true`—as is the case with the Add tab. Every tab now has an icon
    as well. Let''s see what this looks like when you load the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d1c63de0-6440-4891-8cb8-2e87825e78ff.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The icons for every tab are rendered as expected, even for the SEARCH tab,
    which has been marked as `disabled`. There''s no Add tab because it was marked
    as `hidden`. Let''s take a look at the changes to the `Tabs` markup that were
    necessary to accommodate these new state values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The `disabled` and `icon` properties of `Tab` are passed directly from the tab
    in your component state. The `filter()` call was added to remove tabs that are
    marked as hidden.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Tabs` API documentation: [https://material-ui.com/api/tabs/](https://material-ui.com/api/tabs/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Tabs` demos: [https://material-ui.com/demos/tabs/](https://material-ui.com/demos/tabs/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Abstracting tab content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If your application uses tabs in several places, you can create abstractions
    that simplify the markup involved with rendering tabs and tab content. Instead
    of having tab content defined outside of the tabs component, why not have everything
    be self-contained and easier to read?
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s say that your app uses tabs in several places throughout your app, and
    you want to simplify the markup used to create the tabs and the tab content. In
    the places where you use tabs, you just want to be able to render the content
    and not have to worry about handing state for the active tab. Here''s some code
    that creates two new components that simplify the **JavaScript XML** (**JSX**)
    required for rendering tab content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'When you load the screen, you''ll see three tabs rendered with the first tab
    selected by default. The content of the first tab is also visible. The following
    screenshot shows what it looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e048c474-bfd1-4b15-932a-08fafd552787.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s start by looking at the markup used to render the tabs in this following
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: This markup is much more concise than using the `Tab` and `Tabs` components
    directly. This approach also handles rendering the content of the selected tab.
    Everything is self-contained with this approach.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let''s take a look at the `TabContainer` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The `TabContainer` component handles the state of the selected tab and changing
    the state when a different tab is selected. This component renders a `Fragment`
    component so that it can place the selected tab content after the `Tabs` component.
    It's using `Children.map()` to render the individual `Tab` components. The label
    of the tab comes from the `label` property of the child. In this example, there
    are three children (`TabContent`). The next call to `Children.map()` renders the
    content of the selected tab. This is based on the `value` state—if the child index
    matches, it's the `active` content. Otherwise, it gets mapped to `null` and nothing
    is rendered.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, let''s take a look at the `TabContent` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '`TabContent` takes care of styling the `Typography` component and renders the
    child text within. Although the `label` property is passed to `TabContent`, it
    doesn''t actually use it; instead, it''s used by `TabContainer` when rendering
    tabs.'
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can add a `value` property to the `TabsContainer` component so that you
    can set whichever tab to activate initially. For example, you might want the second
    tab to be `active` instead of the first tab when the screen first loads. To do
    this, you''ll have to add a default property value for `value`, call `setValue()`
    if the `value` state hasn''t been set yet, and remove `value` from the initial
    state:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The default property is necessary because the `value` state is now undefined
    by default. The `setValue()` method is called if the `value` state is undefined.
    If it is, then you can set it by passing it the `value` property value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you can pass this property to your component to change the initially-active
    tab:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The value property is set to `1`. It''s a zero-based index, which means that
    the second tab will be active by default:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3e1099f3-0513-4a71-a2f5-af4903b1a7ed.png)'
  prefs: []
  type: TYPE_IMG
- en: When the user starts clicking on other tabs, the `value` state updates as expected—only
    the initially-active tab is impacted by this change.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Tabs` API documentation: [https://material-ui.com/api/tabs/](https://material-ui.com/api/tabs/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Tabs` demos: [https://material-ui.com/demos/tab/](https://material-ui.com/demos/tab/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Working with React child components: [https://reactjs.org/docs/react-api.html#reactchildren](https://reactjs.org/docs/react-api.html#reactchildren)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tab navigation with routes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can base your tab content on routes in a routing solution, such as `react-router`.
    To do this, you have to make your tab buttons into links, and you need to have `Route`
    components below the `Tabs` component to render the current URL.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s say that your app has three URLs and you want tabs as the navigation
    mechanism to navigate between the routes. The first step is turning the `Tab`
    buttons into links. The second step is having `Route` components render the appropriate
    tab content, based on which one was clicked on. Here''s the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'When you load the screen, the first tab should be selected and the first tab
    content should be rendered:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fdbe0165-c323-49ce-88ad-4aa37321aee5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you click on the ITEM TWO tab, you''ll be taken to the `/page2` URL. This
    results in the active `Route` component changing the tab content, and the changed
    tab state changes the selected tab:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f376d9f6-76c1-42d7-9caf-2adc0dd7315c.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The state portion of your component remains the same as any other component
    that uses the `Tabs` component. The `onChange` event changes the `value` state,
    which is passed to `Tabs` as a property to mark the selected tab.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a closer look at the `Tab` components:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: A major difference with this implementation compared to something more standard
    is that you're using `Link` as the component property value. The `Link` component,
    from `react-router-dom`, is used to make the tab button into a link that the router
    will process. The `to` property is actually passed to `Link`, which is how it
    knows where the link should take the user.
  prefs: []
  type: TYPE_NORMAL
- en: 'Below the `Tabs` component are the routes that render the tab content, based
    on the tab that the user has clicked on. Let''s take a look at one of these Routes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The content that is rendered below the tab is based on the current URL, not
    the `value` state of your component. The `value` state is only used to control
    the state of the selected tab.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Given that the active tab depends on the active route, you could completely
    remove any tab-related state. First, you create a `TabContainer` component to
    render the `Tabs` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Instead of supplying an `onChange()` handler to the `Tabs` component, the `value`
    property is passed from `TabContainer`. Now, you can `render` this component in
    each `Route` component, passing the appropriate `value` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: There's no more confusing the component state with the current `Route` and how
    the two interact. Everything is handled by the route.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Tabs` API documentation: [https://material-ui.com/api/tabs/](https://material-ui.com/api/tabs/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Tabs` demos: [https://material-ui.com/demos/tabs/](https://material-ui.com/demos/tabs/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'React Router documentation: [https://reacttraining.com/react-router/](https://reacttraining.com/react-router/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
