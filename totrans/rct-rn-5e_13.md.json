["```js\nconst ThemeContext = createContext();\nconst ThemeProvider = ({ children }) => {\n  const theme = 'dark';\n  return (\n    <ThemeContext.Provider value={theme}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\nconst useTheme = () => useContext(ThemeContext);\nexport { ThemeProvider, useTheme }; \n```", "```js\nconst MyComponent = () => {\n  const theme = useTheme();\n  return (\n    <div>\n      <p>Current theme: {theme}</p>\n    </div>\n  );\n}; \n```", "```js\nimport React, { useReducer } from 'react';\nconst initialState = { count: 0 };\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'increment':\n      return { count: state.count + 1 };\n    case 'decrement':\n      return { count: state.count - 1 };\n    default:\n      throw new Error();\n  }\n}\nfunction Counter() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return (\n    <>\n      Count: {state.count}\n      <button onClick={() => dispatch({ type: 'increment' })}>+</button>\n      <button onClick={() => dispatch({ type: 'decrement' })}>-</button>\n    </>\n  );\n} \n```", "```js\nfunction counterReducer(state = { count: 0 }, action) {\n  switch (action.type) {\n    case 'INCREMENT':\n      return { count: state.count + 1 };\n    case 'DECREMENT':\n      return { count: state.count - 1 };\n    default:\n      return state;\n  }\n}\nconst store = createStore(counterReducer);\nstore.subscribe(() => console.log(store.getState()));\nstore.dispatch({ type: 'INCREMENT' });\nstore.dispatch({ type: 'DECREMENT' }); \n```", "```js\nfunction fetchUserData() {\n  return (dispatch) => {\n    dispatch({ type: 'LOADING_USER_DATA' });\n    fetch('/api/user')\n      .then((response) => response.json())\n      .then((data) => dispatch({ type: 'FETCH_USER_DATA_SUCCESS', payload: data }))\n      .catch((error) => dispatch({ type: 'FETCH_USER_DATA_ERROR', error }));\n  };\n}\nconst store = createStore(reducer, applyMiddleware(thunk));\nstore.dispatch(fetchUserData()); \n```", "```js\nfunction Counter() {\n  const count = useSelector((state) => state.count);\n  const dispatch = useDispatch();\n  return (\n    <div>\n      <div>Count: {count}</div>\n      <button onClick={() => dispatch({ type: 'INCREMENT' })}>+</button>\n      <button onClick={() => dispatch({ type: 'DECREMENT' })}>-</button>\n    </div>\n  );\n} \n```", "```js\nclass Store {\n  @observable accessor count = 0;\n  @computed get doubleCount() {\n    return this.count * 2;\n  }\n  @action increment() {\n    this.count += 1;\n  }\n  @action decrement() {\n    this.count -= 1;\n  }\n}\nconst myStore = new Store(); \n```", "```js\nclass Store {\n  @observable count = 0;\n  @computed get doubleCount() {\n    return this.count * 2;\n  }\n  @action increment() {\n    this.count += 1;\n  }\n  @action decrement() {\n    this.count -= 1;\n  }\n  @action async fetchCountFromServer() {\n    const response = await fetch('/count');\n    const data = await response.json();\n    this.count = data.count;\n  }\n}\nconst myStore = new Store(); \n```", "```js\nimport React from 'react';\nimport { observer } from 'mobx-react';\nimport myStore from './myStore';\nconst Counter = observer(() => {\n  return (\n    <div>\n      <div>Count: {myStore.count}</div>\n      <div>Double: {myStore.doubleCount}</div>\n      <button onClick={() => myStore.increment()}>-</button>\n      <button onClick={() => myStore.decrement()}>+</button>\n    </div>\n  );\n}); \n```"]