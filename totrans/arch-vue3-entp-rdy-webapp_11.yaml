- en: '11'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Industry-Standard End-to-End Testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned about everything related to **integration
    testing**. We learned in depth how to perform an integration test on a Vue.js
    3 component and pages. Additionally, we learned about integration testing tools
    such as Vue Test Library and how to use them to test an enterprise project effectively.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will explore everything related to **end-to-end testing**
    (**E2E**). We will learn how to perform E2E testing on a Vue.js 3 component and
    pages. In addition, we will learn about E2E testing tools, such as Cypress and
    Puppeteer, and how to use them to perform an E2E test in an enterprise project
    effectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following key topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to E2E testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is E2E testing?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Importance of E2E testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Benefits of E2E testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Best practices in creating E2E test
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JavaScript E2E testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: E2E-testing a Vue app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To get started with this chapter, I recommend you to read through [*Chapter
    10*](B17237_10.xhtml#_idTextAnchor363), *Integration Testing in Vue.js 3*, where
    we explored everything related to integration testing. Also, we learned in depth
    how to perform an integration test on a Vue.js 3 component and pages. We will
    rely heavily on the knowledge from that chapter in this chapter to learn about
    Vue.js 3 enterprise E2E testing.
  prefs: []
  type: TYPE_NORMAL
- en: All the code files for this chapter can be found at [https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications/tree/chapter-11](https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications/tree/chapter-11).
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to E2E testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: E2E is a complex testing process that assesses the working order of a complex
    application from start to finish. Additionally, you can use E2E testing to work
    through a complete application exactly how you intend your end users to use the
    product and discover any bugs before pushing the code to production for real users.
  prefs: []
  type: TYPE_NORMAL
- en: In most organizations, E2E testing is a standard used to access the complete
    features of an application after developing them in isolation with different developers
    in your team.
  prefs: []
  type: TYPE_NORMAL
- en: E2E testing in large teams is possible by having a central repository system
    that is used to build and combine the code base. Next, E2E testing runs through
    the completed features and ensures they work as intended before approving and
    pushing them to the production stage.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will examine the definition of E2E testing and explore how
    developers can create and manage E2E test cases within their enterprise-ready
    Vue.js 3 application.
  prefs: []
  type: TYPE_NORMAL
- en: What is E2E testing?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: E2E testing is a methodology that assesses the working order of a complex product
    in a start-to-finish process. It ensures that the application behaves as expected
    and that the data is maintained and flows in the same direction as expected for
    each task and process.
  prefs: []
  type: TYPE_NORMAL
- en: This testing aims to replicate real user scenarios to validate the system for
    integration and data integrity. The test goes through every operation the application
    can perform, including communicating with external devices, to make sure the actions
    of the end users are replicated and tested.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will examine the importance and benefits of E2E testing
    for agile and enterprise-level teams.
  prefs: []
  type: TYPE_NORMAL
- en: Importance of E2E testing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: E2E testing makes it simpler to catch problems before releasing the software
    to end users. Additionally, it helps managers prioritize tasks in the development
    backlog by identifying the importance of a workflow to end users.
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, for enterprise-level applications, E2E testing improves the user experience
    for multiple application interfaces such as web, desktop, and mobile apps because
    user expectations are the basis for the test cases.
  prefs: []
  type: TYPE_NORMAL
- en: E2E testing has been widely adopted because it helps reduce the overall cost
    of building and maintaining software by decreasing the time it takes to test software.
  prefs: []
  type: TYPE_NORMAL
- en: It helps a team expand its test coverage by adding more detailed test cases
    than other testing methods such as unit and functional testing.
  prefs: []
  type: TYPE_NORMAL
- en: It also ensures that the application performs correctly by running the test
    cases based on an end user’s behavior.
  prefs: []
  type: TYPE_NORMAL
- en: Benefits of E2E testing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: E2E testing is a very complex form of testing as it tests the behaviors of the
    end user. Therefore, it is crucial to follow the practices outlined in the following
    subsections to ensure smooth testing.
  prefs: []
  type: TYPE_NORMAL
- en: Reducing risks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The E2E testing process ensures rigorous testing of the software under test
    at the end of each iteration, thereby reducing the risk of future failures in
    production.
  prefs: []
  type: TYPE_NORMAL
- en: Consistent user experience
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: E2E testing involves testing the frontend. It ensures that the software under
    test provides a user experience that works across multiple devices, platforms,
    and environments.
  prefs: []
  type: TYPE_NORMAL
- en: Reducing cost and time
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The cost and the number of times you need to test enterprise applications can
    be reduced by automating your E2E tests This reduces the amount of time and money
    it takes to maintain and improve the application.
  prefs: []
  type: TYPE_NORMAL
- en: Increasing confidence
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: E2E testing not only ensures that the application functions correctly but also
    increases confidence in its performance because it has been tested across multiple
    devices and platforms.
  prefs: []
  type: TYPE_NORMAL
- en: Less repetitive efforts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It reduces the chances of frequent breakdowns and, ultimately, reduces repetitive
    testing efforts due to more thorough and rigorous E2E testing.
  prefs: []
  type: TYPE_NORMAL
- en: Ensuring the correctness of the application
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: E2E is an essential software testing methodology because it validates an application
    at all layers – data, business rules, integration, and presentation. Therefore,
    it helps to ensure the correctness and health of the application.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we discussed the importance and benefits of E2E testing, illustrating
    why companies need to integrate it into their development pipelines. In the next
    section, we will explore the best practices involved in creating E2E testing.
  prefs: []
  type: TYPE_NORMAL
- en: Best practices in E2E test creation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: E2E testing mimics the actions, activities, and experiences of a real user using
    the application. When creating E2E test cases, you should follow these best practices
    to produce consistent E2E test cases to test every possible case properly. Consider
    the following points to create good test cases.
  prefs: []
  type: TYPE_NORMAL
- en: Prioritizing the end use
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When creating test cases, test like the user, and get into the mindset of someone
    using the app for the first time. Furthermore, ask and answer some of the user’s
    questions such as *is it easy to find all the options? Are the features marked?
    Can users get what they want in* *fewer steps?*
  prefs: []
  type: TYPE_NORMAL
- en: Prioritizing the right aspects
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It’s important to prioritize what you’re testing because this can easily become
    cumbersome and complex. Therefore, it’s important to prioritize business-impacted
    features before going over other less important edge cases.
  prefs: []
  type: TYPE_NORMAL
- en: Making testing realistic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Sometimes, you want to make E2E testing a little realistic. In most cases, real
    users stop by to look at images, or pause and watch a few videos before moving
    on with their actions. E2E testing should mirror real-life interactions as much
    as possible.
  prefs: []
  type: TYPE_NORMAL
- en: Testing repeated user scenarios
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: E2E testing is very complex and requires time to test out all the possible edge
    cases completely. Avoid testing every possible edge case and focus only on the
    most common and important scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: Error monitoring
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: E2E testing is a very complex process because it encompasses the walk-through
    of the whole application or, sometimes, only features that have been newly added.
    However, the complexity can be reduced by making sure many errors are resolved
    during coding before E2E testing.
  prefs: []
  type: TYPE_NORMAL
- en: Optimizing the testing environment
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can facilitate the testing process by creating an optimum test environment.
    Creating an optimum test environment allows for minimal setup when it’s time to
    test and clear out data for your next test.
  prefs: []
  type: TYPE_NORMAL
- en: We have explored the best practices when it comes to implementing E2E testing
    and discussed a few points that you must consider when building E2E testing solutions.
    In the next section, we will learn more about different JavaScript E2E testing
    libraries.
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript E2E testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Various frameworks are helpful for unit testing in JavaScript. They are as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Selenium WebDriver
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cypress
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Playwright
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Puppeteer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Karma
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, we will explore each of the libraries, discuss their popularities, similarities,
    and differences, and look at why you should choose any of these libraries for
    your E2E testing solution.
  prefs: []
  type: TYPE_NORMAL
- en: Selenium WebDriver
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Selenium WebDriver is the most popular E2E testing software. It’s a web framework
    that allows you to execute cross-browser tests by automating web-based application
    testing to verify that it performs as expected:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_11.01_B17237.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.1 – A diagram showing Selenium statistics
  prefs: []
  type: TYPE_NORMAL
- en: Some of the growth statistics of the Selenium library at the time of writing,
    according to GitHub ([https://github.com/seleniumhq/selenium](https://github.com/seleniumhq/selenium)),
    include more than **25.4k GitHub Stars** and about **172k GitHub Usage**, making
    Selenium among the most popular testing frameworks.
  prefs: []
  type: TYPE_NORMAL
- en: Cypress
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Cypress is an E2E JavaScript-based testing framework that changes how developers
    approach software testing. It is a testing framework that does not use Selenium
    or WebDriver, making it faster and easy to set up for enterprise-level testing.
  prefs: []
  type: TYPE_NORMAL
- en: 'This feature makes Cypress the ideal tool for testing a JavaScript/TypeScript
    library that is meant to be used in the browser, and setting up automated testing
    with it in your enterprise project is a breeze:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_11.02_B17237.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.2 – A diagram showing Cypress statistics
  prefs: []
  type: TYPE_NORMAL
- en: Some of the growth statistics of the Cypress library at the time of writing,
    according to GitHub ([https://github.com/cypress-io/cypress](https://github.com/cypress-io/cypress)),
    include more than **42.1k GitHub Stars** and about **648k GitHub Usage**, making
    Cypress among the most popular testing frameworks.
  prefs: []
  type: TYPE_NORMAL
- en: Playwright
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Playwright enables reliable E2E testing for modern web apps. It supports all
    modern rendering engines including Chromium, Webkit, and Firefox. Additionally,
    it supports cross-platform testing for Windows, Linux, and macOS including local,
    CI, headless, or headed testing. Most importantly, you can test with mobile web
    and with different programming languages:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_11.03_B17237.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.3 – A diagram showing Playwright statistics
  prefs: []
  type: TYPE_NORMAL
- en: Some of the growth statistics of the Playwright library at the time of writing,
    according to GitHub ([https://github.com/microsoft/playwright](https://github.com/microsoft/playwright)),
    include more than **46k GitHub Stars**, making Playwright among the most popular
    testing frameworks.
  prefs: []
  type: TYPE_NORMAL
- en: Puppeteer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Puppeteer is a Node.js library developed by Google that lets you control headless
    Chrome programmatically. You can automate the testing of your web applications,
    run testing in the browser, and see the results in real time on your Terminal
    session:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_11.04_B17237.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.4 – A diagram showing Puppeteer statistics
  prefs: []
  type: TYPE_NORMAL
- en: Some of the growth statistics of the Puppeteer library at the time of writing,
    according to GitHub ([https://github.com/puppeteer/puppeteer](https://github.com/puppeteer/puppeteer)),
    include more than **81.3k GitHub Stars** and about **271k GitHub Usage**, making
    Puppeteer among the most popular testing frameworks.
  prefs: []
  type: TYPE_NORMAL
- en: Karma
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Karma is an E2E testing framework that spawns a web server that executes source
    code against test code for each of the browsers connected. The results are displayed
    to the developers to see whether the test case failed or passed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Angular team created the Karma test library to fit their ever-changing
    testing requirements to make life easier:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_11.05_B17237.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.5 – A diagram showing Karma statistics
  prefs: []
  type: TYPE_NORMAL
- en: Some of the growth statistics of the Karma library at the time of writing, according
    to GitHub ([https://github.com/karma-runner/karma](https://github.com/karma-runner/karma)),
    include more than **11.8k GitHub Stars** and about **2.8m GitHub Usage**, making
    Karma among the most popular testing frameworks.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will explore how to write your E2E test with JavaScript
    and how to run your test manually. Additionally, we will explore how to automate
    your testing suite during a deployment pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: E2E testing a Vue.js 3 app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we created a Pinterest application using Strapi for
    the backend and Vue.js 3 for the frontend.
  prefs: []
  type: TYPE_NORMAL
- en: In the previous chapters, we added internationalization, structured the project,
    implemented unit and integration testing, and built out a complete Pinterest clone.
    In this section, we will continue by using the official project we created for
    this book to set up E2E testing to make up a full-blown enterprise-ready Pinterest
    clone application.
  prefs: []
  type: TYPE_NORMAL
- en: You can clone the project from [https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications](https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications)
    and jump right in.
  prefs: []
  type: TYPE_NORMAL
- en: In the previous chapter, we set up basic unit testing using Vitest and demonstrated
    how to implement basic unit testing with a helper file.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will explore more advanced ways of implementing E2E testing
    on the Pinterest clone application we use throughout this book. We will be using
    Cypress for our E2E testing.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Cypress
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Writing an E2E test is simpler than you think using some of the popular testing
    frameworks listed previously. In this section of the JavaScript E2E testing tutorial,
    we will use the Cypress framework to write E2E test cases.
  prefs: []
  type: TYPE_NORMAL
- en: We will write some E2E test cases to log a user in to our Pinterest clone application
    and check whether the user details are correct or not, but before that, let’s
    install and configure Cypress.
  prefs: []
  type: TYPE_NORMAL
- en: Installing and configuring Cypress
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can set up a new project and install and configure Cypress by following
    this chapter. However, you can also clone the `chapter 11` folder from the official
    repository to follow along. At the time of writing, the following libraries will
    need to be installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]bash'
  prefs: []
  type: TYPE_NORMAL
- en: yarn add cypress @cypress/vue @cypress/webpack-dev-server
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, add the following script to your `package.json` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]bash'
  prefs: []
  type: TYPE_NORMAL
- en: '"test:e2e": "cypress open --e2e",'
  prefs: []
  type: TYPE_NORMAL
- en: '"test:e2e:ci": "cypress run --e2e"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The new script will allow you to run only the E2E test and see the outputs without
    running other test cases.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, create a `cypress.config.js` file in the root directory of your project
    and add the following configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The variables inside `env` are optional and only contain variables specific
    to my environment variables; you should update this to reflect your environment
    variables.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will configure our E2E instance to read files from a specific pattern
    and set `supportFolder` and `supportFile` to `false` because we don’t want to
    include any support files or folders for this demo.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will create our first `e2e` test file and test out our
    login functionalities using E2E testing.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the test file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create the test file, open or create a `Login.spec.js` file inside the `e2e`
    test folder and add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**Code walk-through**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s walk through the code together and understand the nitty-gritty of it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Step 1*: Loading the login page inside `beforeEach`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'First, we create the function to visit our login page using the Cypress `visit()`
    method that will be executed inside the `beforeEach` hook:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '*Step 2*: Creating the `beforeEach` block:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Inside the `beforeEach` block, we execute `loginFunction` to open the login
    page for every test case:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '*Step 3*: Writing each test case:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Lastly, we start writing each test case and defining what we expect to test.
    The following is an example of using E2E testing to submit a button in our login
    form to mimic how a user will interact with the login form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: After writing all your test cases, you can execute your test. Before you run
    your test, make sure that your development server is up and running.
  prefs: []
  type: TYPE_NORMAL
- en: Running the test
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To run your test, type the following command into your root Terminal session:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]bash'
  prefs: []
  type: TYPE_NORMAL
- en: yarn test:e2e
  prefs: []
  type: TYPE_NORMAL
- en: yarn test:e2e:ci
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The first command will visually show you how your users will interact with your
    application using a headless browser, while the last command will only show you
    the result of your test such as unit tests.
  prefs: []
  type: TYPE_NORMAL
- en: 'After successfully running the test, you should be greeted with green passes
    for your test, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_11.06_B17237.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.6 – A screenshot of the E2E test result
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter explored everything related to E2E testing. We learned about E2E
    testing tools such as Cypress, Karma, and Selenium and used Cypress to effectively
    test an enterprise project.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, we explored the benefits, importance, and best practices in writing
    and executing effective E2E testing strategies. We also learned how to write E2E
    test cases.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn how to deploy Vue.js 3 projects to the AWS
    cloud. We will learn about the best practices for deploying to AWS. In addition,
    we will learn how enterprise companies deploy their enterprise Vue applications.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, we will learn about and explore different deployment options and
    master best practices in deploying your Vue.js 3 project to various cloud providers.
    We will learn how to deploy to AWS and Azure.
  prefs: []
  type: TYPE_NORMAL
- en: 'Part 5: Deploying Enterprise-ready Vue.js 3'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this part, you will learn and explore different deployment options and master
    best practices to deploy your Vue.js 3 project to various cloud providers. You
    will learn how to deploy to AWS and Azure.
  prefs: []
  type: TYPE_NORMAL
- en: We will explore Nuxt.JS to build and deliver enterprise-ready, server-side rendering
    Vue.js 3 web applications. We will also explore Gridsome to build and deploy high-,
    client-side rendering Vue.js 3 applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this part, we will cover the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 12*](B17237_12.xhtml#_idTextAnchor471), [*Deploying Vue.js 3 to the
    Cloud*](https://epic.packtpub.services/index.php?module=oss_Chapters&action=DetailView&record=88eb0800-c67f-3335-0e01-61d6c97f9301)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 13*](B17237_13.xhtml#_idTextAnchor518), [*Advanced Vue.js Frameworks*](https://epic.packtpub.services/index.php?module=oss_Chapters&action=DetailView&record=451c03c4-2abc-f5b6-26ae-61d6c928e87d)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
