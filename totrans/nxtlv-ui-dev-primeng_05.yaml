- en: '5'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Introducing Input Components and Form Controls
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Diving deeper into the world of Angular and PrimeNG, we’re about to embark on
    a journey through the realm of input components and form controls.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter is dedicated to providing a comprehensive understanding of how
    to effectively utilize various input components and form controls in your Angular
    applications. We’ll be exploring the use of text inputs, checkboxes, radio buttons,
    dropdowns, and more. Additionally, we’ll delve into the intricacies of form validation
    and handling user input.
  prefs: []
  type: TYPE_NORMAL
- en: By harnessing the power of these input components and mastering form controls,
    we will be able to create intuitive and user-centric applications, which is paramount
    in today’s digital landscape.
  prefs: []
  type: TYPE_NORMAL
- en: 'The chapter will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing input components and form controls
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with text inputs, checkboxes, and radio buttons
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using dropdowns, multi-selects, and date pickers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing form validation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter contains various working code samples on input components and
    Angular forms. You can find the related source code in the `chapter-05` folder
    of the following GitHub repository: [https://github.com/PacktPublishing/Next-Level-UI-Development-with-PrimeNG/tree/main/apps/chapter-05](https://github.com/PacktPublishing/Next-Level-UI-Development-with-PrimeNG/tree/main/apps/chapter-05).'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing input components and form controls
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before getting into the main content of this chapter, let’s set the stage with
    an overview of input components and form controls. Angular provides two ways to
    handle user inputs through forms: template-driven and reactive forms. Both methods
    have their unique strengths, and choosing between them depends on the specific
    needs of your application.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s have a look at a simple Angular form:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.1 – Angular sample form](img/B18805_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.1 – Angular sample form
  prefs: []
  type: TYPE_NORMAL
- en: We will use both approaches to recreate this form.
  prefs: []
  type: TYPE_NORMAL
- en: Template-driven forms
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Template-driven forms** define controls directly within the DOM and then
    link them back to the underlying model. They shine in their simplicity, making
    them a go-to choice for straightforward use cases. For instance, when dealing
    with a form that has a small number of fields and uncomplicated validation rules,
    template-driven forms offer a rapid and effortless approach to implementing form
    functionality.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Using template-driven forms, here is how we would recreate *Figure 5**.1*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s a breakdown of important parts of the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`FormsModule`: This module is imported when you want to use template-driven
    forms in your Angular application. It provides directives such as `NgForm` and
    `NgModel`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NgForm`: This is a directive that automatically attaches to any `<form>` tag.
    It keeps track of the form’s value and its validity. On form submission, it aggregates
    all form control values, accessible via its `value` property.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NgModel`: This directive creates a `FormControl` instance from a domain model
    and binds it to a form control element. It ensures real-time synchronization between
    the UI and the component’s model.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`#form="ngForm"`: This creates a local template variable named `form`, which
    you can use to access the `NgForm` directive instance. This allows you to use
    its properties and methods elsewhere in the template.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onSubmit(form: NgForm)`: This is a method that gets called when the form is
    submitted. It logs the value of the form to the console.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reactive forms
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In **reactive forms**, you create and manage form control objects within the
    component class. They are known for their robustness, scalability, reusability,
    and testability, making them a preferred choice for complex scenarios and large
    forms. Here is how we would recreate *Figure 5**.1* using the reactive forms method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s a breakdown of important parts of the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ReactiveFormsModule`, `FormControl`, and `FormGroup`: These are used when
    you want to use reactive forms in your Angular application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[formGroup]="profileForm"`: This is used to bind the `FormGroup` instance
    defined in the component class to a form element in the DOM.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`formControlName`: This directive is used to link the input element to the
    `first` form control.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onSubmit()`: This is a method that gets called when the form is submitted.
    In the example, the submit function gets the value of `profileForm` and prints
    the form value to the browser console.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enhancing Angular forms with PrimeNG input components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Input components and form controls are the backbone of any interactive application.
    They allow users to interact with the application, input data, and make choices.
    Without these elements, an application would be a static entity, incapable of
    interacting with its users in an aesthetic way.
  prefs: []
  type: TYPE_NORMAL
- en: PrimeNG steps in to enhance the standard input elements. It offers a rich set
    of components with a unified approach to handling user input. PrimeNG’s components
    are designed to be easy to use and integrate into your Angular applications, while
    also providing a high degree of customization.
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, let’s take a look at how PrimeNG enhances the previous reactive
    forms field:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In this code, `pInputText` and `pButton` are PrimeNG directives that improve
    the standard input field and button and enhance them with additional features
    such as theming, styles, and more. Compared to *Figure 5**.1*, you can see the
    new form in *Figure 5**.2*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.2 – Angular form with PrimeNG styles](img/B18805_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.2 – Angular form with PrimeNG styles
  prefs: []
  type: TYPE_NORMAL
- en: In conclusion, understanding input components and form controls is crucial for
    building interactive and user-friendly applications. Angular provides powerful
    tools for handling user input, and PrimeNG enhances these tools with a rich set
    of customizable components. In the following sections, we’ll delve deeper into
    how to use these components and controls in your Angular applications.
  prefs: []
  type: TYPE_NORMAL
- en: Working with text inputs, checkboxes, and radio buttons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we delve deeper into the practical aspects of Angular and PrimeNG, we’ll
    focus on the implementation of text inputs, checkboxes, and radio buttons. These
    form controls are fundamental to any application, enabling users to interact with
    the application and provide necessary data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s take a look at this contact form component:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.3 – Sample contact form](img/B18805_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.3 – Sample contact form
  prefs: []
  type: TYPE_NORMAL
- en: The contact form utilizes various PrimeNG components such as InputText, InputMask,
    Checkbox, and RadioButton. Let’s take a look at each part.
  prefs: []
  type: TYPE_NORMAL
- en: InputText
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `pInputText` directive in your Angular project, you first need to import
    the `InputTextModule` module from PrimeNG. You can do this by adding the following
    `import` statement to your component file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, you can use the `pInputText` directive in your template file to create
    a text input field. Here’s the example that we used in the contact form from *Figure
    5**.3*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s break down the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<label for="name">Name</label>`: This is a standard HTML label element. The
    `for` attribute associates the label with the input field that has an ID of `name`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pInputText`: This directive tells Angular to apply the PrimeNG text input
    functionality and styling to this input field.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`id="name"`: This attribute sets the ID of the input field, which is used to
    associate it with the label.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`type="text"`: This attribute sets the type of the input field. In this case,
    it’s a text field.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`formControlName="name"`: This attribute is part of Angular’s reactive forms
    module. It binds the input field to a `FormControl` named `name` in the component
    class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: InputMask
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As we delve deeper into PrimeNG’s form controls, let’s turn our attention to
    a component that offers a more controlled input experience: **p-inputMask**. This
    component is designed to handle inputs that follow a specific format, such as
    phone numbers, dates, or social security numbers.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To use the `p-inputMask` component in your Angular project, you first need
    to import the `InputMaskModule` module from PrimeNG. You can do this by adding
    the following `import` statement to your component file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s the example that we used in the contact form in *Figure 5**.3*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'In this example, we’re creating an input field for a phone number. The `p-inputMask`
    component is used as an input field, enforcing the phone number format. Let’s
    break down the code further:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<label for="phone">Phone</label>`: This is a standard HTML label element.
    The `for` attribute associates the label with the input field that has an ID of
    `phone`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`p-inputMask`: This PrimeNG component is used to apply the PrimeNG styles to
    the input field and to define the input format for the phone number.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mask="(999)-999-9999"`: This attribute sets the input pattern for a specific
    field. In this case, the mask consists of placeholders represented by the character
    9, which indicates that only numeric characters can be entered in those positions.
    By applying this mask, users are restricted to inputting numbers in the designated
    places, ensuring data consistency and accuracy.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`formControlName="phone"`: This attribute is part of Angular’s reactive forms
    module. It binds the input field to a `FormControl` named `phone` in the component
    class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checkbox
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As we continue to explore PrimeNG’s form controls, let’s focus on a component
    that allows users to make binary choices: **p-checkbox**. This component is used
    to create checkboxes, which let users select one or more options from a set.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To use the `p-checkbox` component in your Angular project, you first need to
    import the `CheckboxModule` module from PrimeNG. You can do this by adding the
    following `import` statement to your component file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s the example that we used in the previous contact form in *Figure 5**.3*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s break down the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`p-checkbox`: This PrimeNG component is used to apply the PrimeNG styles to
    the checkbox field.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`formControlName="subscribe"`: This attribute is part of Angular’s reactive
    forms module. It binds the checkbox to a `FormControl` named `subscribe` in the
    component class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[binary]="true"`: This attribute sets the checkbox’s value to either `true`
    or `false`. If the checkbox is checked, the value is `true`; otherwise, it’s `false`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`label="Subscribe to newsletter"`: This attribute sets the label displayed
    next to the checkbox.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RadioButton
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PrimeNG’s `p-radioButton` is a UI component that can be used to create radio
    button inputs in Angular forms. It is a useful component that allows users to
    make a single choice from a set of mutually exclusive options, such as in surveys,
    preference selection, form validation, filtering, sorting, and step-by-step processes.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use the `p-radioButton` component in your Angular project, you first need
    to import the `RadioButtonModule` module from PrimeNG. You can do this by adding
    the following `import` statement to your component file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s the example that we used in the previous contact form in *Figure 5**.3*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s break down the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`p-radioButton`: This is where we define our PrimeNG radio buttons.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`*ngFor="let gender of genders`”: This is Angular’s built-in directive for
    rendering a list. It creates a new radio button for each gender in the `genders`
    array.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name="gender"`: This attribute sets the name of the radio button group. All
    radio buttons with the same name belong to the same group, and only one can be
    selected at a time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`value="{{ gender.value }}"`: This attribute sets the value of the radio button.
    It’s bound to the `value` property of the current `gender` object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`label="{{ gender.name }}"`: This attribute sets the label displayed next to
    the radio button. It’s bound to the `name` property of the current `gender` object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`formControlName="gender"`: This attribute is part of Angular’s reactive forms
    module. It binds the group of radio buttons to a `FormControl` named `gender`
    in the component class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have learned about some fundamental form controls that allow users to interact
    with your application. In the next section, we will go over more complex components
    such as dropdowns, multi-selects, and date pickers.
  prefs: []
  type: TYPE_NORMAL
- en: Using dropdowns, multi-selects, and date pickers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we continue our exploration of PrimeNG’s form controls, we’re about to venture
    into the realm of more complex components: dropdowns, multi-selects, and date
    pickers. These components offer a higher level of interactivity and are essential
    for many types of applications.'
  prefs: []
  type: TYPE_NORMAL
- en: Dropdown
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Dropdown** component (also known as Select) is one of the most commonly
    used form elements in web applications, allowing users to choose a single option
    from a list of options.
  prefs: []
  type: TYPE_NORMAL
- en: PrimeNG Dropdown offers an intuitive and interactive way to select an option
    from a dropdown list. It enhances the user experience by providing a wide range
    of options, including single and multiple selection, filtering, custom templates,
    lazy loading, and support for keyboard navigation. With its customizable styling
    and seamless integration with Angular, PrimeNG Dropdown is a powerful tool for
    creating enhanced dropdown functionality in Angular applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started with the PrimeNG Dropdown, first import the `DropdownModule`
    in your component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s a basic example of how to use the `Dropdown` component using the template-driven
    approach:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'In this example, `cities` is an array of options, and `ngModel` is a two-way
    binding property that holds the selected option. The `optionLabel` attribute configures
    the Dropdown to display the name property of each option as the label. Here is
    the result in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.4 – Sample dropdown component](img/B18805_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.4 – Sample dropdown component
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: When options are simple primitive values such as a string array, you don’t have
    to specify `optionLabel` and `optionValue` in the component.
  prefs: []
  type: TYPE_NORMAL
- en: The Dropdown component is packed with features that make it flexible and adaptable
    to various use cases. Let’s have a look at those options.
  prefs: []
  type: TYPE_NORMAL
- en: Filtering
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'One of the standout features of the Dropdown component is its built-in filtering
    capability. This feature allows users to narrow down the options by typing into
    the dropdown, making it easier to find the desired option in a long list. To enable
    filtering, we simply set the `filter` attribute to `true`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'After adding the `filter` attribute to the Dropdown component, you will have
    the option to search in the dropdown. Here, I searched for `van`, which shows
    the result **Vancouver**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.5 – Dropdown With Filter](img/B18805_05_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.5 – Dropdown With Filter
  prefs: []
  type: TYPE_NORMAL
- en: Grouping
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For better organization of options, the Dropdown component supports grouping.
    We can group options under certain categories by using the [group] attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'In this example, the cities are grouped according to a property specified in
    the `groupedCities` array. The `ng-template let-group pTemplate="group"` code
    defines a template for the group header with a map maker icon on the left. Let’s
    have a look at the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.6 – Sample dropdown with Grouping](img/B18805_05_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.6 – Sample dropdown with Grouping
  prefs: []
  type: TYPE_NORMAL
- en: Templating
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The Dropdown component also supports templating, which means we can customize
    how the options are displayed. Let’s take a look at the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'In this example, we can see that there are two `ng-template` elements for supporting
    how we style the option, and the selected value:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<ng-template pTemplate="selectedItem">`: This defines a template that is used
    to customize the rendering of the selected item in a dropdown component. It shows
    the `name` property of the selected city in the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<ng-template let-city pTemplate="item">`: This is a template for each item
    in the option list.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s have a look at the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.7 – Sample dropdown with Templating](img/B18805_05_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.7 – Sample dropdown with Templating
  prefs: []
  type: TYPE_NORMAL
- en: We can see the styling for the selected city with a map maker icon on the left.
    The dropdown also has the ability to clear the selected item with a `[showClear]="true"`
    option in the component.
  prefs: []
  type: TYPE_NORMAL
- en: Working with events
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'PrimeNG’s Dropdown component provides several events that developers can utilize
    to enhance the functionality and interactivity of their applications:'
  prefs: []
  type: TYPE_NORMAL
- en: '`onChange`: This is emitted when the value of the dropdown changes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onFilter`: This is triggered when data is filtered in the dropdown'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onFocus`: This is fired when the dropdown gains focus'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onBlur`: This is invoked when the dropdown loses focus'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onClick`: This is called when the component is clicked'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onShow`: This is triggered when the dropdown overlay becomes visible'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onHide`: This is fired when the dropdown overlay becomes hidden'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onClear`: This is invoked when the dropdown value is cleared'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onLazyLoad`: This is called in lazy mode to load new data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here’s an example of how you can use the `onChange` event of the PrimeNG Dropdown
    when a user selects an option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: In this example, the `onCityChange` method is called whenever the selected city
    changes and shows an alert in the browser.
  prefs: []
  type: TYPE_NORMAL
- en: To wrap up, the Dropdown component in PrimeNG is a powerful tool that offers
    a wide range of features, from basic selection to advanced features such as filtering,
    grouping, and templating. In the next section, we will delve into the MultiSelect
    component.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: There are more features and configurations that you can do with the Dropdown
    component. Please visit [https://primeng.org/dropdown](https://primeng.org/dropdown)
    for updated documentation.
  prefs: []
  type: TYPE_NORMAL
- en: MultiSelect
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **MultiSelect** component is a form of select input that allows the user
    to choose multiple options from a dropdown list, which comes in handy when you
    need to provide a list of options and allow users to select more than one. For
    instance, in a survey form, you might ask users to select all the programming
    languages they are proficient in. The MultiSelect component would be an ideal
    choice for this scenario.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started with the PrimeNG `MultiSelect` component, first import the `MultiSelectModule`
    in your component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s a basic example of how to use the `MultiSelect` component using the
    template-driven approach:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'In the code snippet, `cities` is an array of options that you want to display
    in the `MultiSelect` list, while `optionLabel` indicates the dropdown to display
    the `name` property of each option as the label. Let’s look at the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.8 – Sample of MultiSelect](img/B18805_05_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.8 – Sample of MultiSelect
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding screenshot, we have a basic `MultiSelect` component, in which
    **Toronto** and **Montreal** are selected.
  prefs: []
  type: TYPE_NORMAL
- en: The `MultiSelect` component comes with several features that make it a powerful
    tool for creating interactive forms. Let’s take a look at some of them.
  prefs: []
  type: TYPE_NORMAL
- en: Filtering
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'One of the standout features of the `MultiSelect` component is its built-in
    filtering capability, which allows users to narrow down the options in the dropdown
    list by typing into a search box. This is particularly useful when dealing with
    a large number of options, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: groupedCities = [
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: 'label: ''Canada'','
  prefs: []
  type: TYPE_NORMAL
- en: 'value: ''ca'','
  prefs: []
  type: TYPE_NORMAL
- en: 'items: ['
  prefs: []
  type: TYPE_NORMAL
- en: '{ label: ''Vancouver'', value: ''Vancouver'' },'
  prefs: []
  type: TYPE_NORMAL
- en: '{ label: ''Toronto'', value: ''Toronto'' },'
  prefs: []
  type: TYPE_NORMAL
- en: '{ label: ''Montreal'', value: ''Montreal'' },'
  prefs: []
  type: TYPE_NORMAL
- en: '{ label: ''Ottawa'', value: ''Ottawa'' },'
  prefs: []
  type: TYPE_NORMAL
- en: '],'
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: <p-multiSelect
  prefs: []
  type: TYPE_NORMAL
- en: '[options]="groupedCities"'
  prefs: []
  type: TYPE_NORMAL
- en: '[group]="true"'
  prefs: []
  type: TYPE_NORMAL
- en: ngModel
  prefs: []
  type: TYPE_NORMAL
- en: name="cityWithGroup"
  prefs: []
  type: TYPE_NORMAL
- en: defaultLabel="Select a City"
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <ng-template let-group pTemplate="group">
  prefs: []
  type: TYPE_NORMAL
- en: <div>
  prefs: []
  type: TYPE_NORMAL
- en: <span class="pi pi-map-marker"></span>
  prefs: []
  type: TYPE_NORMAL
- en: <span>{{ group.label }}</span>
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: </ng-template>
  prefs: []
  type: TYPE_NORMAL
- en: </p-multiSelect>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: <p-multiSelect
  prefs: []
  type: TYPE_NORMAL
- en: '[options]="cities"'
  prefs: []
  type: TYPE_NORMAL
- en: ngModel
  prefs: []
  type: TYPE_NORMAL
- en: defaultLabel="Select a Country"
  prefs: []
  type: TYPE_NORMAL
- en: name="cityWithTemplating"
  prefs: []
  type: TYPE_NORMAL
- en: optionLabel="name"
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <ng-template let-cities pTemplate="selectedItems">
  prefs: []
  type: TYPE_NORMAL
- en: <div *ngFor="let city of cities">
  prefs: []
  type: TYPE_NORMAL
- en: <span class="pi pi-map-marker"></span>
  prefs: []
  type: TYPE_NORMAL
- en: <span>{{ city.name }}</span>
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: <div *ngIf="cities?.length === 0">Select Cities</div>
  prefs: []
  type: TYPE_NORMAL
- en: </ng-template>
  prefs: []
  type: TYPE_NORMAL
- en: <ng-template let-city pTemplate="item">
  prefs: []
  type: TYPE_NORMAL
- en: <div>
  prefs: []
  type: TYPE_NORMAL
- en: <span class="pi pi-map-marker"></span>
  prefs: []
  type: TYPE_NORMAL
- en: <span>{{ city.name }}</span>
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: </ng-template>
  prefs: []
  type: TYPE_NORMAL
- en: </p-multiSelect>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: import { CalendarModule } from 'primeng/calendar'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: <p-calendar ngModel name="calendar" />
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: <p-calendar
  prefs: []
  type: TYPE_NORMAL
- en: ngModel
  prefs: []
  type: TYPE_NORMAL
- en: name="calendarWithFormat"
  prefs: []
  type: TYPE_NORMAL
- en: dateFormat="dd-mm-yy"
  prefs: []
  type: TYPE_NORMAL
- en: />
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: <p-calendar
  prefs: []
  type: TYPE_NORMAL
- en: ngModel
  prefs: []
  type: TYPE_NORMAL
- en: name="calendarDateRange"
  prefs: []
  type: TYPE_NORMAL
- en: selectionMode="range"
  prefs: []
  type: TYPE_NORMAL
- en: />
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: <input
  prefs: []
  type: TYPE_NORMAL
- en: name="first"
  prefs: []
  type: TYPE_NORMAL
- en: ngModel
  prefs: []
  type: TYPE_NORMAL
- en: required
  prefs: []
  type: TYPE_NORMAL
- en: minlength="4"
  prefs: []
  type: TYPE_NORMAL
- en: '#name="ngModel"'
  prefs: []
  type: TYPE_NORMAL
- en: />
  prefs: []
  type: TYPE_NORMAL
- en: <ng-container *ngIf="name.invalid && (name.dirty || name.touched)">
  prefs: []
  type: TYPE_NORMAL
- en: <div *ngIf="name.errors?.['required']">
  prefs: []
  type: TYPE_NORMAL
- en: This field is required
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: <div *ngIf="name.errors?.['minlength']">
  prefs: []
  type: TYPE_NORMAL
- en: Name must be at least 4 characters long.
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: </ng-container>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: contactForm = this.formBuilder.group({
  prefs: []
  type: TYPE_NORMAL
- en: 'name: ['''', [Validators.required, Validators.minLength(4)]],'
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: <input pInputText id="name" type="text" formControlName="name" />
  prefs: []
  type: TYPE_NORMAL
- en: <ng-container *ngIf="contactForm.controls.name as name">
  prefs: []
  type: TYPE_NORMAL
- en: <div *ngIf="name.dirty && name.hasError('required')">
  prefs: []
  type: TYPE_NORMAL
- en: This field is required
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: <div *ngIf="name.dirty && name.hasError('minlength')">
  prefs: []
  type: TYPE_NORMAL
- en: Name must be at least 4 characters long.
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: </ng-container>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: import { AbstractControl, ValidationErrors, ValidatorFn } from '@angular/forms'
  prefs: []
  type: TYPE_NORMAL
- en: 'export const invalidNameValidator = (nameRe: RegExp): ValidatorFn => {'
  prefs: []
  type: TYPE_NORMAL
- en: 'return (control: AbstractControl): ValidationErrors | null => {'
  prefs: []
  type: TYPE_NORMAL
- en: const invalid = nameRe.test(control.value)
  prefs: []
  type: TYPE_NORMAL
- en: 'return invalid ? { invalidName: { value: control.value } } : null'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: contactForm = this.formBuilder.group({
  prefs: []
  type: TYPE_NORMAL
- en: 'name: ['
  prefs: []
  type: TYPE_NORMAL
- en: ''''','
  prefs: []
  type: TYPE_NORMAL
- en: '['
  prefs: []
  type: TYPE_NORMAL
- en: Validators.required,
  prefs: []
  type: TYPE_NORMAL
- en: Validators.minLength(4),
  prefs: []
  type: TYPE_NORMAL
- en: // custom validator
  prefs: []
  type: TYPE_NORMAL
- en: invalidNameValidator(/test/i),
  prefs: []
  type: TYPE_NORMAL
- en: '],'
  prefs: []
  type: TYPE_NORMAL
- en: '],'
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: '----'
  prefs: []
  type: TYPE_NORMAL
- en: <div *ngIf="name.dirty && name.hasError('invalidName')">
  prefs: []
  type: TYPE_NORMAL
- en: Name cannot be "{{ name.errors?.['invalidName'].value }}".
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: <label for="name">Name</label>
  prefs: []
  type: TYPE_NORMAL
- en: <input pInputText id="name" type="text" formControlName="name" />
  prefs: []
  type: TYPE_NORMAL
- en: <ng-container *ngIf="contactForm.controls.name as name">
  prefs: []
  type: TYPE_NORMAL
- en: <small
  prefs: []
  type: TYPE_NORMAL
- en: class="p-error"
  prefs: []
  type: TYPE_NORMAL
- en: ngIf="name.dirty && name.hasError('required')"
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: This field is required
  prefs: []
  type: TYPE_NORMAL
- en: </small>
  prefs: []
  type: TYPE_NORMAL
- en: <small
  prefs: []
  type: TYPE_NORMAL
- en: class="p-error"
  prefs: []
  type: TYPE_NORMAL
- en: ngIf="name.dirty && name.hasError('minlength')"
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: The name is too short
  prefs: []
  type: TYPE_NORMAL
- en: </small>
  prefs: []
  type: TYPE_NORMAL
- en: </ng-container>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
