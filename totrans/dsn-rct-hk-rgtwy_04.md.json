["```js\nlet updatingFiber = ...\nfunction updateFunctionComponent(Component, props) {\n  let prevHook = null\n  let children = Component(props)\n  ...\n  reconcileChildren(children)\n  return updatingFiber.child\n}\n```", "```js\nconst Title = () => {\n  const [state, dispatch] = useState(initialState)\n  const onClick = () => {\n    dispatch(newState)\n  }\n  return <button onClick={onClick} />\n}\n```", "```js\nfunction useState(initialState) {\n  if (isFiberMounting) {\n    return mountState(initialState)\n  } \n  else {\n    return updateState(initialState)\n  }\n}\n```", "```js\nfunction mountState(initialState) { \n    const hook = mountHook ()\n    if (typeof initialState === 'function') {\n      initialState = intialState()\n    }\n    hook.state = initialState\n    hook.queue = {\n      pending: null \n      dispatch: dispatchAction.bind(\n        null,\n        updatingFiber,\n        hook.queue\n      )\n    }\n    return [hook.state, hook.queue.dispatch]  \n}\n```", "```js\n    useState(1)        // a value\n    useState(() => 1)  // a function\n```", "```js\nfunction dispatchAction(fiber, queue, action) {\n  const update = {\n    action\n    next: null\n  }\n\n  const pending = queue.pending\n  if (pending === null) {\n    update.next = update\n  } \n  else {\n    update.next = pending.next\n    pending.next = update\n  }\n  queue.pending = update\n\n  // Appendix A: Skip dispatch\n  scheduleUpdateOnFiber(fiber)\n}\n```", "```js\n    dispatch(1)         // a value\n    dispatch(() => 1)   // a function\n```", "```js\nfunction updateState(initialState) {\n    const hook = updateHook()\n    const queue = hook.queue\n    let updates = queue.pending\n    queue.pending = null\n    if (updates != null) {\n      const first = updates.next\n      let newState = hook.state\n      let update = first\n      do {\n        const action = update.action\n        newState = typeof action === 'function' \n          ? action(newState) : action\n        update = update.next\n      } \n      while (update !== null && update !== first)        \n      if (!Object.is(newState, hook.state)) { … }      \n      hook.state = newState \n    }\n    return [hook.state, hook.queue.dispatch]  \n}\n```", "```js\n      // Appendix B - Bailing out an update\n      if (!Object.is(newState, hook.state)) {\n        didReceiveUpdate = true\n      }\n```", "```js\n  return [hook.state, hook.queue.dispatch]  \n```", "```js\n  return {\n    state: hook.state,\n    dispatch: hook.queue.dispatch\n  }\n```", "```js\nconst [state, dispatch] = useState(\"\")\nconst [count, setCount] = useState(0)\nconst [a, d] = useState(null)\n```", "```js\n  dispatch(state)\n  dispatch({ state })\n  dispatch([ state ])\n  dispatch(null)\n```", "```js\n  dispatch(state => state + 1)\n```", "```js\nconst [state, dispatch] = useState(1)\nconst onClick = () => { dispatch(3) }\n```", "```js\n1 === 1                 true\n\"Hello\" === \"World\"     false\nfalse === true          false\n```", "```js\nnull === null           true\nundefined === undefined true\n```", "```js\n{} === {}               false\nv === v                 true\n```", "```js\nconst [v, dispatch] = useState({})\nconst onClick = () => {\n  v.abc = 3\n  dispatch(v)\n}\n```", "```js\nconst [v, dispatch] = useState({})\nconst onClick = () => {\n  dispatch({ ...v, abc: 3 })\n}\n```", "```js\nconst [state, dispatch] = useState(1)\nconst onClick = () => {\n  dispatch(3)\n  ...\n  dispatch(5)\n}\n```", "```js\nconst Title = () => {\n  let [count, setCount] = useState(0)\n\n  const onClick = () => {\n    setCount(count + 1)\n  }\n\n  return (\n    <>\n      <button onClick={onClick}>+</button>\n      <h1>Hello World+{count}</h1>\n    </>\n  )\n}\n```", "```js\nfunction Title() {\n  let [count, setCount] = useState(0)\n\n  const onClick = () => {\n    setCount(count + 1)\n    console.log('clicked', count)   ➀\n  }\n\n  console.log('rendered', count)    ➁\n  return ...\n }\n```", "```js\n|-----0-----1------2-----> clicked  ➀\n0-----1-----2------3-----> updated  ➁\n```", "```js\nconst App = () => {\n  const [count, setCount] = useState(0)\n  const onClick = () => {\n    console.log('clicked', count)   ➀\n    setCount(count + 1)\n  }\n  console.log('rendered', count)    ➁  \n  return <Title onClick={onClick} />\n}\nconst Title = ({ onClick }) => {\n  return <button onClick={onClick}>+</button>\n}\n```", "```js\n|-----0-----1------2-----> clicked  ➀\n0-----1-----2------3-----> updated  ➁\n```", "```js\nconst App = () => {\n  return (\n    <>\n      <Title />\n      <Content />\n    </>\n  )\n}\nconst Title = () => {\n  const [count, setCount] = useState(0)\n  return <button>+</button>\n}\nconst Content = () => {\n  return ...\n}\n```", "```js\nconst App = () => {\n  const [count, setCount] = useState(0)\n  const onClick = () => {\n    setCount(count + 1)\n  }  \n  return (\n    <>\n      <Title onClick={onClick} />\n      <Content count={count} />\n    </>\n  )\n}\n```", "```js\nconst Avatar = ({ src, username }) => {\n  const [error, setError] = useState(false)\n  const onError = () => { setError(true) }\n  return (\n    <AvatarStyle>\n      {error ? (\n        <div>{username}</div>\n      ) : (\n        <img\n          src={src}\n          alt={username}\n          onError={onError}\n        />\n      )}\n    </AvatarStyle>\n  )\n}\n```", "```js\n  { error ? A : B }\n```", "```js\nconst LOGO = 'https://gravatar.com/avatar/7aa1ac6'\nconst App = () => {\n  return <Avatar src={LOGO} username=\"F\" />\n}\n```", "```js\nconst Tooltip = ({ children, tooltip }) => {\n  const [entered, setEntered] = useState(false)\n  return (\n    <TooltipStyle>\n      <div\n        onMouseEnter={() => { setEntered(true) }}\n        onMouseLeave={() => { setEntered(false) }}\n      >\n        {children}\n      </div>\n      {entered && (\n        <div className=\"__tooltip\">\n          {tooltip}\n        </div>\n      )}\n    </TooltipStyle>\n  )\n}\n```", "```js\n{ entered && A }\n```", "```js\nconst TooltipBox = <div>Account</div>\nconst Title = () => {\n  return (\n    <Tooltip tooltip={<TooltipBox />}>\n      <Avatar>\n    </Tooltip>\n  )\n}\n```", "```js\nfunction dispatchAction(fiber, queue, action) {\n  ...\n\n  if (NoWorkUnderFiber) {\n    const currentState = queue.lastRenderedState\n    const newState = typeof action === 'function' \n      ? action(currentState) : action\n    if (Object.is(newState, currentState)) {\n      return\n    }\n  }\n  scheduleUpdateOnFiber(fiber)\n}\n```", "```js\nlet updatingFiber = ...\nfunction updateFunctionComponent(Component, props) {\n  let prevHook = null\n  let didReceiveUpdate = false  \n  let children = Component(props)  \n  if (!isFiberMounting && !didReceiveUpdate) {\n    return bailout(updatingFiber)\n  }\n  ...\n}\n```"]