["```js\nit(\"renders the customer first name\", () => {  const customer = { firstName: \"Ashley\" };  render(<Appointment customer={customer} />);  expect(document.body.textContent).toContain(\"Ashley\");});\n```", "```js\nexport const Appointment = ({ customer }) => (  <div>{customer.firstName}</div>);\n```", "```js\nif (!anyErrors(validationResult)) {\n  ...\n} else {\nsetValidationErrors(validationResult); \n} \n```", "```js\nif (!anyErrors(validationResult)) {\n  setSubmitting(true);\n  const result = await window.fetch(...);\nsetSubmitting(false); \n  ... \n}\n```", "```js\nnpx relay-compiler\n```", "```js\nconst inc = arg => arg + 1;\n```", "```js\nconst inc = arg =>\n  arg + 1;\n```", "```js\nconst add = (a, b) => a + b;\n```", "```js\nconst dailyTimeSlots = (salonOpensAt, salonClosesAt) => {\n  ...\n  return timeIncrements(totalSlots, startTime, increment);};\n```", "```js\nsetAppointment(appointment => ({  ...appointment,  [name]: value }); \n```", "```js\nconst handleSelectBoxChange = (\n  { target: { value, name } }\n) => {\n  ...\n}; \n```", "```js\nconst handleSelectBoxChange = (event) => {\n  const target = event.target;\n  const value = target.value;\n  const name = target.name;\n  ...\n}; \n```", "```js\nconst [customer, setCustomer] = useState({});\n```", "```js\nconst customerState = useState({});\nconst customer = customerState[0];\nconst setCustomer = customerState[1];\n```"]