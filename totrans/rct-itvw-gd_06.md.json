["```js\n    console.log(store.getState());\n    ```", "```js\n    cities state by dispatching an action:\n    ```", "```js\n    store.dispatch({\n      type: 'ADD_CITY',\n      payload: \"London\"\n    })\n    ```", "```js\n    function cities(cities = [], action) {\n      switch (action.type) {\n        case 'ADD_CITY':\n          return [\n            ...cities,\n            {\n              name: action.payload,\n              position: 1\n            }\n          ]\n        default:\n          return cities;\n      }\n    }\n    ```", "```js\n    addTodo that returns a todo action:\n    ```", "```js\n    function addTodo(todo) {\n      return {\n        type: 'ADD_TODO',\n        payload: todo\n      }\n    }\n    ```", "```js\n    const todoReducer = (state = initialState, action) => {\n      switch (action.type) {\n        case \"ADD_TODO\":\n          const { name, priority } = action.payload;\n          return [...state.todos, { name, priority }];\n        default:\n          return state;\n      }\n    };\n    ```", "```js\nimport { createStore } from \"redux\";\nimport todoReducer from \"reducers/todoReducer\";\nconst store = createStore(todoReducer); // Create a store\nconst firstTodo = addTodo({ name: \"Running\", priority: 2 });\nconsole.log(firstTodo);\nstore.dispatch(firstTodo); // Dispatch a todo\nconst secondTodo = addTodo({ name: \"Eating\", priority: 1 });\nconsole.log(secondTodo);\nstore.dispatch(secondTodo);\nconsole.log(store.getState()); // Returns the todos list\ncreateStore from plain Redux, and you will see the usage of the configureStore method when we introduce the RTK.\n```", "```js\nconst mapStateToProps = (state) => {\n  return {\n    city: state.user.address.city,\n  };\n};\nconnect(mapStateToProps)(WeatherReport);\n```", "```js\n<WeatherReport city={city} />\n```", "```js\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    changeCity: (city) => {\n      dispatch(changeCity(city));\n    },\n  };\n};\n```", "```js\nconst mapDispatchToProps = {\n   toggleCity\n};\n```", "```js\nconst ourCustomEnhancer =\n  (createStore) => (reducer, initialState, enhancer) => {\n    const customReducer = (state, action) => {\n      // Logic to return new state\n    };\n    const store = createStore(customReducer, initialState, enhancer);\n    //Add enhancer logic\n    return {\n      ...store,\n      //Override the some store properties or add new properties\n    };\n  };\n```", "```js\n    import { applyMiddleware } from \"redux\";\n    ```", "```js\n    const loggerMiddleware = (store) => (next) =>\n      (action) => {\n      console.log(\"action\", action);\n      return next(action);\n    };\n    ```", "```js\n    const middleware = applyMiddleware(loggerMiddleware);\n    ```", "```js\n    const store = createStore(reducer, middleware);\n    ```", "```js\nconst middleware = applyMiddleware(\n  loggerMiddleware,\n  firstMiddleware,\n  secondMiddleware,\n  thirdMiddleware\n);\n```", "```js\nconst thunkFunction = (dispatch, getState) => {\n  // This is the place where you can write logic to\n     dispatch other actions or read state\n}\nstore.dispatch(thunkFunction);\n```", "```js\nexport const getPostsByAuthor = (authorId) => async (dispatch) => {\n  const response = await client.get(`/api/posts/${authorId}`);\n  dispatch(postsLoaded(response.posts));\n};\n```", "```js\nfunction AuthorComponent({ authorId }) {\n  //...\n  const onLazyLoading = () => {\n    dispatch(getPostsByAuthor(authorId))\n  }\n}\n```", "```js\nimport { takeLatest, put, call } from \"redux-saga/effects\";\nimport { GET_POSTS } from \"./actionTypes\";\nimport { getPostsSuccess, getPostsFail } from \"./actions\";\nimport { getPosts } from \"../backend/api/posts \";\nfunction* fetchAuthorPosts() {\n  try {\n    const response = yield call(getPosts);\n    yield put(getPostsSuccess(response));\n  } catch (error) {\n    yield put(getPostsFail(error.response));\n  }\n}\nfunction* postsSaga() {\n  yield takeLatest(GET_POSTS, fetchAuthorPosts);\n}\nexport default postsSaga;\n```", "```js\nimport { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\nexport const usersServerApi = createApi({\n  reducerPath: \"api\",\n  baseQuery: fetchBaseQuery({\n    baseUrl: \"https://jsonplaceholder.typicode.com/\",\n  }),\n  endpoints: (builder) => ({\n    users: builder.query({\n      query: (page = 1) => `users?page=${page}&limit=10`,\n    }),\n    createUser: builder.mutation({\n      query: (name) => ({\n        url: \"users\",\n        method: \"POST\",\n        body: { name },\n      }),\n    }),\n  }),\n});\nexport const { useUsersQuery, useCreateUserMutation } = usersServerApi;\n```", "```js\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport { setupListeners } from \"@reduxjs/toolkit/query\";\nimport { usersServerApi } from \"./services/usersAPI\";\nexport const store = configureStore({\n  reducer: {\n    [usersServerApi.reducerPath]: usersServerApi.reducer,\n  },\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware().concat(usersServerApi.middleware),\n});\nsetupListeners(store.dispatch);\n```", "```js\nconst rootElement = document.getElementById(\"root\");\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  rootElement\n);\n```", "```js\nconst { data, error, isLoading } = useUsersQuery(2)\n```"]