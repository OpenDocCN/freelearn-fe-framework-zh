- en: '10'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '10'
- en: State Management with Pinia
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Pinia 进行状态管理
- en: In the previous chapter, you were introduced to the idea of a *state* and how
    it can be used to synchronize data between multiple components in a Vue application.
    You first saw an example of handling states via event broadcasting and then improved
    upon that by including a simple state library.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，你被介绍到 *状态* 的概念以及它如何用于在 Vue 应用程序中同步多个组件之间的数据。你首先看到了通过事件广播处理状态的一个例子，然后通过包括一个简单的状态库来改进这一点。
- en: In this chapter, you’ll learn about the Pinia project and understand how it
    can help manage complex state interactions in your Vue applications. You’ll learn
    how to install the library and start using it right away.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将了解 Pinia 项目，并了解它如何帮助管理 Vue 应用程序中的复杂状态交互。你将学习如何安装库并立即开始使用它。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下主题：
- en: What Pinia is
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pinia 是什么
- en: Installing Pinia
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Pinia
- en: Using Pinia to create a store
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Pinia 创建 store
- en: Adding and using getters in your Pinia store
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在你的 Pinia store 中添加和使用 getters
- en: Working with Pinia actions
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Pinia 动作进行工作
- en: Debugging Pinia in Devtools
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Devtools 中调试 Pinia
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'There are no technical requirements for this chapter outside of the `git` CLI
    that you will have already used by now. You can find this chapter’s source here:
    [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter10](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter10)'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 除了你现在已经使用的 `git` CLI 以外，本章没有其他技术要求。你可以在这里找到本章的源代码：[https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter10](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter10)
- en: What Pinia is
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Pinia 是什么
- en: '**Pinia** ([https://pinia.vuejs.org](https://pinia.vuejs.org)) is a state management
    library for Vue.js applications. As you saw in [*Chapter 9*](B18645_09.xhtml#_idTextAnchor407),
    *The State of Vue State Management*, handling data that must be synchronized between
    multiple different components requires some form of management. Pinia helps with
    this by providing a simple method of setting up a central *store* that contains
    your application’s state. Your components make use of this store to ensure they’re
    all using the same information.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**Pinia** ([https://pinia.vuejs.org](https://pinia.vuejs.org)) 是 Vue.js 应用的状态管理库。正如你在
    [*第 9 章*](B18645_09.xhtml#_idTextAnchor407) 中所看到的，“Vue 状态管理状态”，处理需要在多个不同组件之间同步的数据需要某种形式的管理。Pinia
    通过提供一种简单的方法来设置一个包含你的应用程序状态的中央 *store* 来帮助解决这个问题。你的组件使用这个 store 来确保它们都在使用相同的信息。'
- en: 'Pinia began as an experiment for Vue 3 but evolved to support Vue 2 as well.
    Pinia is now the *recommended* state management library for Vue applications,
    with the venerable Vuex ([https://vuex.vuejs.org/](https://vuex.vuejs.org/)) now
    in maintenance mode:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Pinia 最初是 Vue 3 的一个实验，但后来也支持了 Vue 2。现在，Pinia 是 Vue 应用程序的 *推荐* 状态管理库，而备受尊敬的 Vuex
    ([https://vuex.vuejs.org/](https://vuex.vuejs.org/)) 现已进入维护模式：
- en: '![Figure 10.1 – The Pinia website](img/Figure_10.01_B18645.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.1 – Pinia 网站](img/Figure_10.01_B18645.jpg)'
- en: Figure 10.1 – The Pinia website
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.1 – Pinia 网站
- en: 'Along with state management, using Pinia also provides other benefits, including
    the following:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 除了状态管理之外，使用 Pinia 还提供了以下其他好处：
- en: Devtools support via the Vue extension. This extension supports Chrome, Edge,
    and Firefox. There’s also a standalone Electron desktop application.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过 Vue 扩展提供的 Devtools 支持。此扩展支持 Chrome、Edge 和 Firefox。还有一个独立的 Electron 桌面应用程序。
- en: '**Hot Module Replacement** (**HMR**), which lets you edit your store and update
    it in your development environment without needing to reload the entire web page.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**热模块替换**（**HMR**），这让你可以在开发环境中编辑你的 store 并更新它，而无需重新加载整个网页。'
- en: Optional TypeScript support.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可选的 TypeScript 支持。
- en: '**Server-Side Rendering** (**SSR**) support.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务器端渲染**（**SSR**）支持。'
- en: Plugins to extend Pinia’s functionality.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展 Pinia 功能的插件。
- en: In general, there’s a few core aspects of Pinia you need to be aware of. Developers
    with previous experience with Vuex will recognize these.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，你需要了解 Pinia 的几个核心方面。有 Vuex 经验的开发者会认出这些。
- en: At a high level, a **store** is the combination of the data and logic that needs
    to be shared throughout an application. The **state** of a Pinia application is
    the data of your application’s store. Pinia provides APIs to both read and write
    to this data. **Getters** act much like virtual properties in Vue applications.
    **Actions** let you define custom logic for a store – for example, using an AJAX
    call to validate changes to data before they are committed. While Pinia has more
    to it, these three core concepts will be our focus in this chapter and the meat
    of any use of Pinia.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 从高层次来看，**存储**是需要在应用程序中共享的数据和逻辑的组合。Pinia 应用程序的状态是应用程序存储的数据。Pinia 提供了读取和写入此数据的
    API。**获取器**在 Vue 应用程序中类似于虚拟属性。**动作**允许您为存储定义自定义逻辑——例如，使用 AJAX 调用来验证在提交之前对数据的更改。虽然
    Pinia 有更多内容，但这三个核心概念将是本章的重点，也是任何 Pinia 使用的主要部分。
- en: Installing Pinia
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Pinia
- en: 'To use Pinia in a Vue application, you’ve got two ways to add it. First, when
    creating a new Vue application via the standard method (`npm init vue@latest`),
    one of the questions asked will be whether you wish to include Pinia. Simply say
    *Yes* here:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Vue 应用程序中使用 Pinia，您有两种添加它的方法。首先，当通过标准方法创建新的 Vue 应用程序时（`npm init vue@latest`），其中一个问题将是您是否希望包含
    Pinia。在这里简单地回答 *是*：
- en: '![Figure 10.2 – Indicating whether you wish to add Pinia to a new Vue project](img/Figure_10.02_B18645.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.2 – 指示您是否希望将 Pinia 添加到新的 Vue 项目中](img/Figure_10.02_B18645.jpg)'
- en: Figure 10.2 – Indicating whether you wish to add Pinia to a new Vue project
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.2 – 指示您是否希望将 Pinia 添加到新的 Vue 项目中
- en: 'If you have an existing Vue 3 application, adding support is nearly as easy.
    First, in the project, add Pinia via `npm`: `npm install pinia`. Next, you need
    to include Pinia in the application. Your `main.js` file (located in the `/src`
    directory) will look like so:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有一个现有的 Vue 3 应用程序，添加支持几乎同样简单。首先，在项目中通过 `npm` 添加 Pinia：`npm install pinia`。接下来，您需要在应用程序中包含
    Pinia。您的 `main.js` 文件（位于 `/src` 目录）将如下所示：
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Begin by importing Pinia:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，导入 Pinia：
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then, modify the `createApp` line. We break it out into a few lines so that
    we can inject Pinia:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，修改 `createApp` 行。我们将它拆分成几行，以便我们可以注入 Pinia：
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now that we’ve been introduced to the basic aspects of Pinia and how to include
    it in a Vue application, let’s start working on our first example.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经介绍了 Pinia 的基本概念以及如何在 Vue 应用程序中包含它，让我们开始我们的第一个示例。
- en: Using Pinia to create a store
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Pinia 创建存储
- en: 'Let’s start using Pinia by demonstrating how to define a store within it and
    then use the state data in an application:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过演示如何在其中定义存储以及如何在应用程序中使用状态数据来开始使用 Pinia：
- en: 'Create a new Vue application and enable Pinia, as shown in *Figure 10**.2*.
    This will give you a Vue application with a store already created. You will find
    it under `src/stores/counter.js`:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的 Vue 应用程序并启用 Pinia，如图 10**.2** 所示。这将为您提供一个已经创建了存储的 Vue 应用程序。您可以在 `src/stores/counter.js`
    下找到它：
- en: '[PRE3]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This simple Pinia file demonstrates all three of the major aspects we defined
    previously – the state, getters, and actions. In this section, we’re only concerned
    with the state. When installed, Pinia defined one piece of data, `counter`, with
    a value of `1`. How can we access this in our application?
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这个简单的 Pinia 文件展示了我们之前定义的三个主要方面——状态、获取器和动作。在本节中，我们只关注状态。安装后，Pinia 定义了一个名为 `counter`
    的数据项，其值为 `1`。我们如何在我们的应用程序中访问它？
- en: 'Switch to the `App.vue` file and remove all the contents. We’re going to greatly
    simplify it. First, let’s define the layout to simply output the value of `counter`:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到 `App.vue` 文件并删除所有内容。我们将极大地简化它。首先，让我们定义布局以简单地输出 `counter` 的值：
- en: '[PRE18]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Next, we need to make our store available to the component. We’ll define this
    in a `script` `setup` block:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要使我们的存储对组件可用。我们将在一个 `script` `setup` 块中定义它：
- en: '[PRE23]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'We begin by importing the store. Once imported, we create an instance of the
    store so that it can be used in our template. While not terribly exciting, *Figure
    10**.3* demonstrates how this looks in the browser:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先导入存储。一旦导入，我们就创建存储的一个实例，以便它可以在我们的模板中使用。虽然这并不十分令人兴奋，但 *图 10**.3* 展示了它在浏览器中的样子：
- en: '![](img/Figure_10.03_B18645.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_10.03_B18645.jpg)'
- en: Figure 10.3 – Our store value correctly displayed in the App component
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.3 – 在 App 组件中正确显示的存储值
- en: 'To get any benefits from a shared state at all, we need at least one more component.
    In the `components` folder, create a new file, `EditCounter.vue`, and use the
    following short snippet of code:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要从共享状态中获得任何好处，我们至少需要另一个组件。在 `components` 文件夹中创建一个新的文件，`EditCounter.vue`，并使用以下简短的代码片段：
- en: '[PRE27]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'As with the `App.vue` component, we use the `setup` block to import the store
    and create an instance. This time, we use a simple edit field and v-model to bind
    its value to the store’s `counter` value. Return to `App.vue` and edit it to import
    and use the `EditCounter` component:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与 `App.vue` 组件一样，我们使用 `setup` 块来导入 store 并创建一个实例。这次，我们使用一个简单的编辑字段和 v-model 来将其值绑定到
    store 的 `counter` 值。回到 `App.vue` 并编辑它以导入和使用 `EditCounter` 组件：
- en: '[PRE35]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Now, we’re getting somewhere. We’ve got one component, `App`, simply rendering
    the shared state, and another, `EditCounter`, which also displays it but in an
    editable fashion. Now, you can edit the value and see it update:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们正在取得进展。我们有一个组件 `App`，它简单地渲染共享状态，还有一个组件 `EditCounter`，它也显示它，但以可编辑的形式。现在，你可以编辑值并看到它更新：
- en: '![Figure 10.4 – Multiple components using the same shared state](img/Figure_10.04_B18645.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.4 – 使用相同共享状态的多个组件](img/Figure_10.04_B18645.jpg)'
- en: Figure 10.4 – Multiple components using the same shared state
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.4 – 使用相同共享状态的多个组件
- en: Now that we’ve seen how to install and initialize Pinia, and use a simple store,
    we can create a simple demonstration of it in action.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经看到了如何安装和初始化 Pinia，以及使用一个简单的 store，我们可以创建一个简单的演示来展示其作用。
- en: Exercise 10.01 – building a Color Preview app with a shared state
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 10.01 – 使用共享状态构建颜色预览应用程序
- en: Now that we’ve seen a simple example of using a shared state with Pinia, let’s
    build a simple application that will use it. Our application will let you use
    sliders to specify the red, green, and blue values of a color. One component will
    be used for the editor and another component will provide a preview.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经看到了使用 Pinia 共享状态的一个简单示例，让我们构建一个将使用它的简单应用程序。我们的应用程序将允许你使用滑块来指定颜色的红色、绿色和蓝色值。一个组件将用于编辑，另一个组件将提供预览。
- en: 'The complete code for this exercise can be found at [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter10/Exercise10.01](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter10/Exercise10.01):'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 本练习的完整代码可以在 [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter10/Exercise10.01](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter10/Exercise10.01)
    找到：
- en: 'To begin, create a new Vue.js application and ensure Pinia support is selected.
    As prompted, change into the directory, run `npm` install, and then `npm run dev`
    to start the application running. Clear the contents of the `App.vue` component
    and enter the following:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，创建一个新的 Vue.js 应用程序，并确保选中 Pinia 支持。按照提示，切换到目录，运行 `npm install`，然后运行 `npm run
    dev` 以启动应用程序。清空 `App.vue` 组件的内容，并输入以下内容：
- en: '[PRE46]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: We begin by importing two components (which we will define next). The template
    portion includes some simple explanatory text and then renders the two components.
    Finally, a bit of CSS is used to display these components in a grid. Note that
    `App.vue` doesn’t make use of the store at all, but our two components will.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先导入两个组件（我们将在下一节定义）。模板部分包含一些简单的解释性文本，然后渲染这两个组件。最后，使用一些 CSS 来以网格形式显示这些组件。注意，`App.vue`
    完全没有使用 store，但我们的两个组件会使用。
- en: 'Now, let’s define the child components. We’re going to create them as essentially
    empty so that we can simply test that our application is working. In `src/components`,
    create `RGBEdit.vue`:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们定义子组件。我们将创建它们作为基本上空的，这样我们就可以简单地测试应用程序是否工作。在 `src/components` 中创建 `RGBEdit.vue`：
- en: '[PRE67]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Next, create `PreviewColor.vue`:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建 `PreviewColor.vue`：
- en: '[PRE72]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'Note that you can remove the existing components the Vue initialization script
    created. We won’t need those. At this point, you should see the following in your
    browser:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，你可以移除 Vue 初始化脚本创建的现有组件。我们不需要那些。此时，你应该能在浏览器中看到以下内容：
- en: '![Figure 10.5 – The color application starting to come together](img/Figure_10.05_B18645.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.5 – 颜色应用程序开始成形](img/Figure_10.05_B18645.jpg)'
- en: Figure 10.5 – The color application starting to come together
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.5 – 颜色应用程序开始成形
- en: 'Now, let’s define our sites store. In `src/stores`, make a new file (and feel
    free to remove the default one) named `color.js`:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们定义我们的站点 store。在 `src/stores` 中创建一个新文件（并且可以随意删除默认文件），命名为 `color.js`：
- en: '[PRE73]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '[PRE79]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[PRE80]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[PRE81]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: Our store has three state values, each representing part of a color as defined
    in `0`.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有三种状态值，每个值代表颜色的一部分，如 `0` 中定义的那样。
- en: 'Next, let’s flesh out our `RGBEdit.vue`. First, we’ll import and create an
    instance of the store:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们完善我们的 `RGBEdit.vue`。首先，我们将导入并创建 store 的一个实例：
- en: '[PRE82]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '[PRE83]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '[PRE84]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '[PRE85]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'Next, we’ll edit the template portion to add three `range`-style editing fields.
    This will make it much easier for the user to quickly preview colors:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将编辑模板部分，添加三个`range`风格的编辑字段。这将使用户能够快速预览颜色变得容易得多：
- en: '[PRE86]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'Each `range` control has a min of `0` and a max of `255`, which represents
    the valid range for colors in web applications. Next, we will add a bit of styling
    to control the size of the `label` elements:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 每个`range`控件的最小值为`0`，最大值为`255`，这代表了在Web应用中颜色的有效范围。接下来，我们将添加一些样式来控制`label`元素的大小：
- en: '[PRE87]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'Save this and now confirm in the browser that you have editing controls for
    the color:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 保存这个，现在在浏览器中确认你有了编辑颜色的控件：
- en: '![Figure 10.6 – Our application now has controls to edit the color](img/Figure_10.06_B18645.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![图10.6 – 我们的应用现在有了编辑颜色的控件](img/Figure_10.06_B18645.jpg)'
- en: Figure 10.6 – Our application now has controls to edit the color
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.6 – 我们的应用现在有了编辑颜色的控件
- en: 'At this point, we’ve got an editing component, but we need to finish the `preview`
    component. Open `PreviewColor.vue` and first import the store:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经有一个编辑组件，但我们需要完成`preview`组件。打开`PreviewColor.vue`，首先导入store：
- en: '[PRE88]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '[PRE90]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '[PRE91]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE91]'
- en: In order to render a preview of the color, we need to convert the numerical
    colors to hex, which is how colors are defined on the web. Given that we have
    three numbers in our store, let’s say `100`, `50`, and `100` for red, green, and
    blue respectively, we need to convert them into `#64324`.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 为了渲染颜色的预览，我们需要将数值颜色转换为十六进制，这是在网络上定义颜色的方式。鉴于我们在store中有三个数字，比如红色、绿色和蓝色分别为`100`、`50`和`100`，我们需要将它们转换为`#64324`。
- en: 'We can write a computed property to handle this translation for us. Edit the
    `script` portion to include computed support and define the following `computed`
    property:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以编写一个计算属性来为我们处理这个转换。编辑`script`部分以包含计算支持并定义以下`computed`属性：
- en: '[PRE92]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'Moving on to the `template` section, let’s use this in the display:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 进入到`模板`部分，让我们在显示中使用这个：
- en: '[PRE93]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'Note that the empty `div` is using the `computed` property to dynamically update
    the background color of the element. One last thing to add is a basic size for
    that `div` element:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，空的`div`正在使用`computed`属性动态更新元素的背景颜色。最后，还需要为那个`div`元素添加一个基本的大小：
- en: '[PRE94]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: For the final step, simply play with the application and find a color that looks
    amazing!
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一步，只需在应用中尝试并找到一个看起来很棒的颜色！
- en: '![Figure 10.7 – The final version of the color application](img/Figure_10.07_B18645.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![图10.7 – 颜色应用的最终版本](img/Figure_10.07_B18645.jpg)'
- en: Figure 10.7 – The final version of the color application
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.7 – 颜色应用的最终版本
- en: In the next section, we’ll introduce getters in Pinia and demonstrate how to
    use them.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将介绍Pinia中的getter，并演示如何使用它们。
- en: Adding and using getters in your Pinia store
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在你的Pinia store中添加和使用getter
- en: As stated earlier, getters in Pinia act just like computed properties. They
    allow you to request a simple value that’s generated by custom logic written in
    a function.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Pinia中的getter就像计算属性一样工作。它们允许你请求一个由函数中编写的自定义逻辑生成的简单值。
- en: 'If you go back to the original Pinia store created by default, you’ll see it
    had a getter defined:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你回到默认创建的原始Pinia store，你会看到它定义了一个getter：
- en: '[PRE95]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: The `doubleCount` getter simply takes the current value of `counter` and returns
    the double of it. As demonstrated, getters are automatically passed the current
    state as an argument, which can then be used in whatever logic makes sense in
    your particular getter function.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '`doubleCount` getter只是简单地取`counter`的当前值，并返回它的两倍。如演示所示，getter会自动传递当前状态作为参数，然后可以在你特定的getter函数中用于任何合理的逻辑。'
- en: 'Just like regular values defined in the state, getters can be addressed in
    your components, as shown here:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 正如在状态中定义的常规值一样，getter可以在你的组件中被引用，如下所示：
- en: '[PRE96]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: Let’s build upon the last exercise and give this feature a try.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们基于上一个练习继续前进，并尝试这个功能。
- en: Exercise 10.02 – improving the Color Preview app with getters
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习10.02 – 使用getter改进颜色预览应用
- en: In the previous exercise, you used Pinia to store the state of a color value
    comprising three components – red, green, and blue. In the application, the `PreviewColor`
    component displayed the `hex` value of the combined color. In this exercise, that
    custom logic will be removed from the component and stored within a getter in
    the store.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个练习中，你使用了Pinia来存储由三个组件组成的一个颜色值的状态——红色、绿色和蓝色。在应用中，`PreviewColor`组件显示了组合颜色的`hex`值。在这个练习中，将移除组件中的自定义逻辑，并将其存储在store中的getter中。
- en: The complete code for this exercise can be found at [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter10/Exercise10.02](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter10/Exercise10.02)
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 本练习的完整代码可以在[https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter10/Exercise10.02](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter10/Exercise10.02)找到。
- en: 'In the store, `src/stores/color.js`, add a new section for the getter:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在存储中，`src/stores/color.js`，为获取器添加一个新的部分：
- en: '[PRE97]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '[PRE98]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '[PRE99]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '[PRE100]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '[PRE101]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '[PRE102]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '[PRE103]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '[PRE104]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '[PRE105]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '[PRE106]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE106]'
- en: '[PRE107]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '[PRE108]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[PRE109]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '[PRE110]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '[PRE111]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '[PRE112]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '[PRE113]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '[PRE114]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '[PRE115]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE115]'
- en: The `hex` getter returns a string, starting with the pound symbol and followed
    by the `hex` values of the RGB numbers. Given that all values are `255` (the color
    white), the result would be `#FFFFFF`.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '`hex` 获取器返回一个字符串，以井号符号开头，后跟 RGB 数字的 `hex` 值。鉴于所有值都是 `255`（白色），结果将是 `#FFFFFF`。'
- en: 'In `PreviewColor.vue`, we need to update the code to make use of the getter.
    Remove all the custom code used to translate the various values and simply use
    the getter:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `PreviewColor.vue` 中，我们需要更新代码以使用获取器。移除所有用于转换各种值的自定义代码，并简单地使用获取器：
- en: '[PRE116]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE116]'
- en: '[PRE117]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '[PRE118]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '[PRE119]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE119]'
- en: '[PRE120]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE120]'
- en: '[PRE121]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '[PRE122]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '[PRE123]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE123]'
- en: '[PRE124]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '[PRE125]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '[PRE126]'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE126]'
- en: As you can see, the component’s code is much simpler now that the logic has
    moved into the Pinia store, and we get to reuse that logic elsewhere if we expand
    upon the application.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，现在逻辑已移动到 Pinia 存储中，组件的代码变得更加简单，如果我们扩展应用程序，我们还可以在其他地方重用该逻辑。
- en: Additional getter features
  id: totrans-216
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取器的附加功能
- en: 'Before moving on to actions, let’s quickly discuss two additional things you
    can do with getters. The first is creating a getter that makes use of another
    getter. You can do this with arrow functions by simply using a state:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续讨论动作之前，让我们快速讨论你可以使用获取器做的两件事。第一是创建一个利用另一个获取器的获取器。你可以通过使用箭头函数并简单地使用状态来实现这一点：
- en: '[PRE127]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: 'If you are using regular function syntax, access the store via `this` or via
    a passed-in argument:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是常规函数语法，可以通过 `this` 或通过传入的参数访问存储：
- en: '[PRE128]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: 'Finally, while getters don’t allow for additional arguments, you can create
    a getter that returns a function itself, not a regular value, such as the following:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，虽然获取器不允许额外的参数，但你可以创建一个返回函数本身的获取器，而不是常规值，如下所示：
- en: '[PRE129]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: 'To use this within a component, you would pass a value to `countPlusN`, like
    so:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在组件中使用此功能时，你需要向 `countPlusN` 传递一个值，如下所示：
- en: '[PRE130]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: Note that getters defined in this way will not have any caching applied to them.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，以这种方式定义的获取器将不会应用任何缓存。
- en: Now that we’ve enhanced our store with getters, let’s see how actions further
    add to the flexibility of Pinia.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经通过获取器增强了我们的存储，让我们看看动作如何进一步增加 Pinia 的灵活性。
- en: Working with Pinia actions
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Pinia 动作
- en: 'Actions are the Pinia equivalent of component methods. They let you define
    custom logic for a store and can be asynchronous as well. This is useful for times
    when server-side logic needs to be called to validate a change to the state. Actions
    are defined with the `actions` block of a Pinia object, and you can see an example
    in the default store created by Pinia:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 动作是 Pinia 的组件方法的等价物。它们允许你为存储定义自定义逻辑，也可以是异步的。这在需要调用服务器端逻辑来验证状态更改时非常有用。动作通过 Pinia
    对象的 `actions` 块定义，你可以在 Pinia 默认创建的存储中看到一个示例：
- en: '[PRE131]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: 'In this example, the `increment` action simply takes the `counter` value and
    adds one to it. Actions access state values by using the `this` scope and, as
    stated previously, can be asynchronous as well. An example of an action with a
    bit of logic could look like so:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`increment` 动作只是简单地取 `counter` 值并加一。动作通过使用 `this` 作用域访问状态值，如前所述，也可以是异步的。一个带有一些逻辑的动作示例可能如下所示：
- en: '[PRE132]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: This action will apply a bit of validation before decreasing the value of `counter`
    and ensure that it never goes below zero.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 此动作在减少 `counter` 值之前会进行一些验证，并确保其永远不会低于零。
- en: Let’s improve on our color editor by adding a few actions.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过添加一些动作来改进我们的颜色编辑器。
- en: Exercise 10.03 – adding lightening and darkening features to the Color Preview
    app
  id: totrans-234
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 10.03 – 向颜色预览应用程序添加亮度和暗度功能
- en: The last exercise had you improve the Color Preview application by moving the
    logic of generating hex strings to a getter with the Pinia store. In this exercise,
    you’re going to add two new features – buttons that either lighten and darken
    the current color.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个练习要求你通过将生成十六进制字符串的逻辑移动到 Pinia 存储的获取器中，来改进颜色预览应用程序。在这个练习中，你将添加两个新功能——按钮，可以调整当前颜色的亮度或暗度。
- en: The complete code for this exercise can be found at [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter10/Exercise10.03](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter10/Exercise10.03)
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 本练习的完整代码可以在 [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter10/Exercise10.03](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter10/Exercise10.03)
    找到。
- en: We’ll begin by using a third-party library to handle our color logic. The `pSBC`
    library was developed by a user helping out on Stack Overflow. The author took
    his Stack Overflow answer and turned it into a mini library that you can use for
    free.
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将开始使用第三方库来处理我们的颜色逻辑。`pSBC` 库是由在 Stack Overflow 上帮忙的用户开发的。作者将他的 Stack Overflow
    答案转换成了一个迷你库，您可以免费使用。
- en: This code is documented on his GitHub at [https://github.com/PimpTrizkit/PJs/wiki/12.-Shade,-Blend-and-Convert-a-Web-Color-(pSBC.js)](https://github.com/PimpTrizkit/PJs/wiki/12.-Shade,-Blend-and-Convert-a-Web-Color-(pSBC.js)).
    If you scroll down to the `src/stores/color.js`. Once copied into the store, the
    `pSBC` function can be used in the store.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码在他的 GitHub 上有文档说明，地址为 [https://github.com/PimpTrizkit/PJs/wiki/12.-Shade,-Blend-and-Convert-a-Web-Color-(pSBC.js)](https://github.com/PimpTrizkit/PJs/wiki/12.-Shade,-Blend-and-Convert-a-Web-Color-(pSBC.js))。如果您滚动到
    `src/stores/color.js`。一旦复制到商店中，`pSBC` 函数就可以在商店中使用。
- en: 'To lighten a hex color, you pass a positive value – for example, `pSBC(0.5,
    "#0022FF")`. The number represents a percentage – in this case, 50 percent. To
    darken a color, you simply pass a negative value: `pSBC(-0.5, "#0022FF")`.'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 要使十六进制颜色变亮，您传递一个正值——例如，`pSBC(0.5, "#0022FF")`。数字代表百分比——在这种情况下，50%。要使颜色变暗，您只需传递一个负值：`pSBC(-0.5,
    "#0022FF")`。
- en: 'With the `pSBC` library pasted into the store, add a new `actions` block to
    the store:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `pSBC` 库粘贴到商店中后，向商店添加一个新的 `actions` 块：
- en: '[PRE133]'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE133]'
- en: '[PRE134]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE134]'
- en: 'Next, add the `lighten` function. This function will get the current hex value
    (which is much easier now with our getter!), pass it to the library, and then
    take the result and convert it back into decimal numbers:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，添加 `lighten` 函数。这个函数将获取当前的十六进制值（现在有了我们的 getter，这要容易得多！），将其传递给库，然后将结果转换回十进制数字：
- en: '[PRE135]'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE135]'
- en: '[PRE136]'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE136]'
- en: '[PRE137]'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE137]'
- en: '[PRE138]'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE138]'
- en: '[PRE139]'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE139]'
- en: '[PRE140]'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE140]'
- en: '[PRE141]'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE141]'
- en: 'Now, add the `darken` function:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，添加 `darken` 函数：
- en: '[PRE142]'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE142]'
- en: '[PRE143]'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE143]'
- en: '[PRE144]'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE144]'
- en: '[PRE145]'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE145]'
- en: '[PRE146]'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE146]'
- en: '[PRE147]'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE147]'
- en: '[PRE148]'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE148]'
- en: 'Now that the store includes the actions we need, let’s add the buttons to make
    use of them. In `src/components/RGBEdit.vue`, add the following beneath the last
    label:'
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在商店已经包含了我们需要的操作，让我们添加按钮来使用它们。在 `src/components/RGBEdit.vue` 中，在最后一个标签下面添加以下内容：
- en: '[PRE149]'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE149]'
- en: '[PRE150]'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE150]'
- en: '[PRE151]'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE151]'
- en: '[PRE152]'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE152]'
- en: 'Each button calls the respective action in the store. When run and viewed in
    the browser, you can see the new UI:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 每个按钮都会调用商店中的相应操作。当在浏览器中运行并查看时，您可以看到新的用户界面：
- en: '![Figure 10.8 – The Color Preview app with new Darken and Lighten buttons](img/Figure_10.08_B18645.jpg)'
  id: totrans-265
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.8 – 带有新的变暗和变亮按钮的颜色预览应用程序](img/Figure_10.08_B18645.jpg)'
- en: Figure 10.8 – The Color Preview app with new Darken and Lighten buttons
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.8 – 带有新的变暗和变亮按钮的颜色预览应用程序
- en: To test out the functionality, simply move the sliders around and then try clicking
    on the buttons.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试功能，只需移动滑块，然后尝试点击按钮。
- en: Debugging Pinia in Devtools
  id: totrans-268
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Devtools 中调试 Pinia
- en: Earlier in [*Chapter 3*](B18645_03.xhtml#_idTextAnchor107), *Vite and Vue Devtools*,
    you were introduced to Vue Devtools. **Devtools** are an incredibly powerful way
    to debug and optimize web applications, and the Vue plugin makes them even more
    vital for Vue developers. What makes Vue Devtools even more powerful is automatic
    recognition and support for applications using Pinia.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *第 3 章* 中，*Vite 和 Vue Devtools*，您被介绍了 Vue Devtools。**Devtools** 是调试和优化 Web
    应用程序的一种非常强大的方式，Vue 插件使它们对 Vue 开发者来说更加重要。Vue Devtools 更强大的地方在于自动识别和支持使用 Pinia 的应用程序。
- en: 'Let’s take a quick tour of what this support looks like by using the Color
    Preview application last modified in *Exercise 10.03*. Run the application from
    the command line, open the URL in your browser, and open your developer tools.
    Note the **Pinia** tab on the right in *Figure 10**.9*:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速浏览一下这种支持的外观，通过使用最后修改于 *练习 10.03* 的颜色预览应用程序。从命令行运行应用程序，在您的浏览器中打开 URL，并打开开发者工具。注意
    *图 10*.9* 中的右侧的 **Pinia** 选项卡：
- en: '![Figure 10.9 – Pinia support in Vue Devtools](img/Figure_10.09_B18645.jpg)'
  id: totrans-271
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.9 – Vue Devtools 中的 Pinia 支持](img/Figure_10.09_B18645.jpg)'
- en: Figure 10.9 – Pinia support in Vue Devtools
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.9 – Vue Devtools 中的 Pinia 支持
- en: 'Right away, you can see you’ve got access to the complete state as well as
    any getters. If you start modifying the RGB values, you can see them immediately
    reflected:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 立即，您可以看到您有权访问完整的状态以及任何获取器。如果您开始修改 RGB 值，您可以看到它们立即反映出来：
- en: '![Figure 10.10 – The state values update as the user works with the app](img/Figure_10.10_B18645.jpg)'
  id: totrans-274
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.10 – 状态值在用户与应用交互时更新](img/Figure_10.10_B18645.jpg)'
- en: Figure 10.10 – The state values update as the user works with the app
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.10 – 状态值在用户与应用交互时更新
- en: 'If you hover the mouse over one of the values in the state, you will see both
    a pencil icon and a three-dot menu icon. The pencil icon lets you directly edit
    state values, while the three-dot menu gives you the ability to copy the value
    to the clipboard or the path:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将鼠标悬停在状态中的某个值上，你将看到一个铅笔图标和一个三个点的菜单图标。铅笔图标允许你直接编辑状态值，而三个点的菜单则允许你将值复制到剪贴板或路径：
- en: '![Figure 10.11 – Tools to edit or copy state values](img/Figure_10.11_B18645.jpg)'
  id: totrans-277
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.11 – 编辑或复制状态值的工具](img/Figure_10.11_B18645.jpg)'
- en: Figure 10.11 – Tools to edit or copy state values
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.11 – 编辑或复制状态值的工具
- en: 'The icons in the upper-right portion allow you to copy the entire state to
    your clipboard, replace the state with the contents of your state, save the state
    to the filesystem, or import a saved state. As an example, if you save the state
    to the filesystem, it will look like this:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 上右上角的图标允许你将整个状态复制到剪贴板，用你的状态内容替换状态，将状态保存到文件系统，或导入一个保存的状态。例如，如果你将状态保存到文件系统，它将看起来像这样：
- en: '[PRE153]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: 'If you click the **Timeline** tab, you will get a history of changes related
    to your Pinia store:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你点击 **时间线** 选项卡，你将获得与你的 Pinia 商店相关的更改历史：
- en: '![Figure 10.12 – Pinia modifications history](img/Figure_10.12_B18645.jpg)'
  id: totrans-282
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.12 – Pinia 修改历史](img/Figure_10.12_B18645.jpg)'
- en: Figure 10.12 – Pinia modifications history
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.12 – Pinia 修改历史
- en: In *Figure 10**.12*, you can see detailed information showing changes along
    with previous and new values. You can click on any of the previous mutations to
    see historical changes.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 在 **图 10**.12 中，你可以看到显示更改的详细信息，包括先前和新的值。你可以点击任何先前的突变来查看历史更改。
- en: Hopefully, this demonstrates just how useful it is to use Vue Devtools and how
    nicely integrated Pinia is. Make sure to fully use it when trying to solve any
    gnarly bugs you run into in the future!
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 希望这能展示出使用 Vue Devtools 的有用性以及 Pinia 的良好集成。确保在尝试解决未来遇到的任何棘手问题时充分利用它！
- en: Activity 10.01 – creating a simple shopping cart and price calculator
  id: totrans-286
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动 10.01 – 创建一个简单的购物车和价格计算器
- en: Imagine a hypothetical corporate hardware site that lets employees select products
    they need to be shipped to their office. This cart is much simpler than a typical
    e-commerce site, as it doesn’t need to process credit cards or even ask the person
    where they are (IT knows where you sit!).
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一个假设的硬件公司网站，允许员工选择需要运送到办公室的产品。这个购物车比典型的电子商务网站简单得多，因为它不需要处理信用卡，甚至不需要询问人员的位置（IT
    知道你在哪里！）。
- en: It still needs to present you with a list of items, let you select how much
    you want, and then provide you with a total price that will be billed to your
    department.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 它仍然需要向你提供一个项目列表，让你选择你想要的数量，然后提供一个总计价格，该价格将记入你的部门账单。
- en: 'In this activity, you need to build a Pinia store that represents the available
    products and their prices. You will need multiple components to handle the different
    aspects of the application and properly interact with the store data:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个活动中，你需要构建一个代表可用产品和它们价格的 Pinia 商店。你需要多个组件来处理应用程序的不同方面，并正确与商店数据交互：
- en: 'Begin by creating a new Pinia store. Your store should use two values in the
    state, an array of products with hardcoded names and values, and an empty cart
    array. Here’s an example list of products:'
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，创建一个新的 Pinia 商店。你的商店应该在状态中使用两个值，一个包含硬编码名称和值的数组，以及一个空的购物车数组。以下是一个产品列表的示例：
- en: '[PRE154]'
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE154]'
- en: '[PRE155]'
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE155]'
- en: '[PRE156]'
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE156]'
- en: '[PRE157]'
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE157]'
- en: '[PRE158]'
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE158]'
- en: '[PRE159]'
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE159]'
- en: '[PRE160]'
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE160]'
- en: Your application will consist of three components. The first is a `Products`
    component to list products. The second is a `Cart` component that renders the
    current cart. Finally, there is a `Checkout` component, which renders the total
    along with a not-really-functional **Checkout** button.
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你的应用程序将包括三个组件。第一个是 `Products` 组件，用于列出产品。第二个是 `Cart` 组件，用于渲染当前的购物车。最后是 `Checkout`
    组件，它渲染总计以及一个实际上并不起作用的 **结账** 按钮。
- en: 'The `Products.vue` component should render each product and have a button to
    add and remove it from the cart. These buttons should call actions in the Pinia
    store and either add or remove an item from the cart:'
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Products.vue` 组件应该渲染每个产品，并有一个按钮来添加和移除它到购物车中。这些按钮应该调用 Pinia 商店中的操作，并从购物车中添加或移除一个项目：'
- en: '![Figure 10.13 – The Products component](img/Figure_10.13_B18645.jpg)'
  id: totrans-300
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.13 – 产品组件](img/Figure_10.13_B18645.jpg)'
- en: Figure 10.13 – The Products component
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.13 – 产品组件
- en: 'The `Cart.vue` component renders a table of items in the cart. It should show
    the name of the product and the current quantity. If a line item ever goes to
    zero, it should not be displayed in the table. The following figure demonstrates
    this:'
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Cart.vue` 组件渲染购物车中的项目表格。它应该显示产品的名称和当前数量。如果某项商品的数量降到零，则不应在表格中显示。以下图示展示了这一点：'
- en: '![Figure 10.14 – The Cart component](img/Figure_10.14_B18645.jpg)'
  id: totrans-303
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.14 – 购物车组件](img/Figure_10.14_B18645.jpg)'
- en: Figure 10.14 – The Cart component
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.14 – 购物车组件
- en: 'The `Checkout.vue` component will render two things. First, it will render
    a total cost. This is based on the products and quantity in the cart. Secondly,
    it will render a **Checkout** button but only if there is an actual cost. The
    **Checkout** button does not need to do anything:'
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Checkout.vue` 组件将渲染两个东西。首先，它将渲染总费用。这是基于购物车中的产品和数量。其次，它将渲染一个 **结算** 按钮，但只有当实际存在费用时才会渲染。**结算**
    按钮不需要做任何事情：'
- en: '![Figure 10.15 – The Checkout component](img/Figure_10.15_B18645.jpg)'
  id: totrans-306
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.15 – 结算组件](img/Figure_10.15_B18645.jpg)'
- en: Figure 10.15 – The Checkout component
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.15 – 结算组件
- en: Note
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The solution for this activity can be found at [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter10/Activity10.01](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter10/Activity10.01)
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 该活动的解决方案可以在 [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter10/Activity10.01](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter10/Activity10.01)
    找到。
- en: Congratulations! You’ve now built a real, if simple, application making use
    of Pinia. Your application has three components kept perfectly in sync via Pinia’s
    store, and you’ve gotten the hang of working with state management using the officially
    recommended library.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你现在已经构建了一个真实、尽管简单的应用，它利用了 Pinia。你的应用有三个组件，通过 Pinia 的存储保持完美同步，并且你已经掌握了使用官方推荐库进行状态管理的方法。
- en: Summary
  id: totrans-311
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter introduced you to Pinia, Vue’s recommended library for handling
    a shared state in a complex, multi-component application.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 本章向您介绍了 Pinia，这是 Vue 推荐的用于处理复杂、多组件应用中共享状态的库。
- en: We began by discussing how to install Pinia. Next, we introduced states and
    showed you how to use those values in your components.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从讨论如何安装 Pinia 开始。接下来，我们介绍了状态，并展示了如何在组件中使用这些值。
- en: You looked at getters as a way of handling *virtual* properties and encapsulating
    logic.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 你将获取器视为处理 *虚拟* 属性和封装逻辑的方法。
- en: Finally, you saw how actions let you define custom methods for working with
    your state.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你看到了如何使用操作定义与你的状态一起工作的自定义方法。
- en: In the next chapter, you’ll be introduced to testing with Vue, specifically
    unit testing, which will prepare you for end-to-end testing in the chapter after
    that.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将了解如何使用 Vue 进行测试，特别是单元测试，这将为你准备下一章的端到端测试。
- en: 'Part 4: Testing and Application Deployment'
  id: totrans-317
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 4 部分：测试和应用部署
- en: In the final part of the book, we will be going head first into the testing
    aspect of Vue.js applications. We will learn about the fundamentals of testing,
    different types of testing, and when and where it is required, and start testing
    our applications using the Jest testing framework for unit and snapshot tests
    and Cypress for End-to-End tests. By writing tests, we will be making sure that
    our applications behave in the intended way. The final chapter will cover how
    to deploy our Vue applications to the web.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的最后部分，我们将深入探讨 Vue.js 应用程序的测试方面。我们将学习测试的基础知识、不同类型的测试以及何时何地需要测试，并开始使用 Jest
    测试框架进行单元和快照测试，以及使用 Cypress 进行端到端测试来测试我们的应用程序。通过编写测试，我们将确保我们的应用程序按预期的方式运行。最后一章将涵盖如何将我们的
    Vue 应用程序部署到网络。
- en: 'We will cover the following chapters in this part:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 在本部分，我们将涵盖以下章节：
- en: '[*Chapter 11*](B18645_11.xhtml#_idTextAnchor444), *Unit Testing*'
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第 11 章*](B18645_11.xhtml#_idTextAnchor444)，*单元测试*'
- en: '[*Chapter 12*](B18645_12.xhtml#_idTextAnchor463), *End-to-End Testing*'
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第 12 章*](B18645_12.xhtml#_idTextAnchor463)，*端到端测试*'
- en: '[*Chapter 13*](B18645_13.xhtml#_idTextAnchor478), *Deploying Your Code to the
    Web*'
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第 13 章*](B18645_13.xhtml#_idTextAnchor478)，*将您的代码部署到网络*'
