- en: '7'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Working with Tree, TreeTable, and Timeline Components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Data presentation in applications isn’t just about tables, lists, and cards.
    Sometimes, the nature of the data demands a more hierarchical or chronological
    structure. That’s where components such as `Tree`, `TreeTable`, and `Timeline`
    come into play. In this chapter, we’ll dive deep into these specialized components,
    each offering unique ways to display and interact with data in Angular applications
    using PrimeNG.
  prefs: []
  type: TYPE_NORMAL
- en: The primary objective is to familiarize yourself with the specialized PrimeNG
    components that cater to specific data presentation needs. As we progress through
    this chapter, we’ll be equipped with the knowledge to handle diverse data presentation
    challenges and how to implement them effectively in their Angular applications.
    Mastering these components means being prepared to offer solutions that enhance
    user experience and data clarity.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Working with Tree components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with TreeTable components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with Timeline components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter contains various code samples of PrimeNG displaying components.
    You can find the related source code in the `chapter-07` folder of the following
    GitHub repository: [https://github.com/PacktPublishing/Next-Level-UI-Development-with-PrimeNG/tree/main/apps/chapter-07](https://github.com/PacktPublishing/Next-Level-UI-Development-with-PrimeNG/tree/main/apps/chapter-07).'
  prefs: []
  type: TYPE_NORMAL
- en: Working with Tree components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The PrimeNG **Tree** component is a powerful tool for displaying hierarchical
    data in an organized and visually appealing way, providing a tree-like structure
    where data can be presented as nodes and can be expanded or collapsed to reveal
    or hide child nodes.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will explore the various aspects of working with the PrimeNG
    `Tree` component, including its purpose, usage, and key features. The component
    also offers a wide range of features, including node expansion and collapse, selection
    modes, lazy loading of data, drag-and-drop functionality, and context menu support,
    which we will explore too.
  prefs: []
  type: TYPE_NORMAL
- en: When to use the PrimeNG Tree component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The PrimeNG `Tree` component is particularly useful in scenarios where data
    needs to be organized and presented in a hierarchical manner. It is commonly used
    in applications that deal with categories, file directories, organizational structures,
    and any other data that exhibits a parent-child relationship.
  prefs: []
  type: TYPE_NORMAL
- en: For example, let’s consider a product catalog application. The catalog may have
    categories, subcategories, and products organized in a hierarchical structure.
    In such a case, the PrimeNG `Tree` component can be used to visually represent
    the product catalog, allowing users to navigate through the categories and subcategories
    and select specific products.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a basic Tree component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To better understand how the PrimeNG `Tree` component can be used, let’s take
    a look at an example of a product catalog – mentioned in the previous section.
    Suppose we have the following hierarchical structure for our products:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Using the PrimeNG `Tree` component, we can represent this hierarchical structure.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started, we need to import the necessary modules from the PrimeNG library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we have the dependencies installed and imported, we can use the `Tree`
    component in our Angular template. Here’s an example of how we can display the
    products in a tree layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s break down the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<p-tree [value]="products" />`: This represents the usage of the PrimeNG `Tree`
    component. It binds the `value` property of the `Tree` component to the `products`
    variable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Products: TreeNode[]`: This defines the `products` variable as an array of
    `TreeNode` objects. `TreeNode` is a type defined by PrimeNG for representing a
    node in the tree component. Each `TreeNode` object has the following properties:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`key`: A unique identifier for the node.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`label`: The text that will be displayed for the node.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`data`: Additional data associated with the node. In this example, it represents
    the level of the node (category level, subcategory level, or product level).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`icon`: An optional icon associated with the node.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`children`: An array of child nodes. This property allows the tree to have
    a nested structure.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'That is an example of a simplified tree structure representing a store. Here
    is the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.1 – Basic Tree](img/B18805_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.1 – Basic Tree
  prefs: []
  type: TYPE_NORMAL
- en: Expanding and collapsing nodes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the fundamental features of the PrimeNG `Tree` component is the ability
    to expand and collapse nodes. This allows users to navigate through the tree and
    reveal or hide child nodes based on their interests.
  prefs: []
  type: TYPE_NORMAL
- en: By default, the PrimeNG `Tree` component starts with all nodes collapsed. Users
    can expand a node by clicking on its expand icon, and they can collapse a node
    by clicking on its collapse icon.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to user interactions, you can also programmatically control the
    expansion and collapse of nodes by manipulating the state of the nodes. For example,
    you can programmatically expand all nodes or collapse all nodes using the `expandAll()`
    and `collapseAll()` methods, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s an example that demonstrates the use of the expand and collapse functionality:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Here, we have added two buttons to the UI for expanding and collapsing nodes.
    The `expandAll()` and `collapseAll()` methods are bound to the respective buttons’
    click events. When a user clicks the **Expand all** button, all nodes in the tree
    will be expanded, and when the **Collapse all** button is clicked, all nodes will
    collapse.
  prefs: []
  type: TYPE_NORMAL
- en: The `expandRecursive(...)` method is a private method that recursively expands
    or collapses the nodes in the tree. It takes a `TreeNode` object (`node`) and
    a `boolean` value (`isExpand`) as parameters, and sets the `expanded` property
    of `node` to the value of `isExpand`, thus expanding or collapsing the node.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the result when clicking on the **Expand** **all** button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.2 – Tree with expanding and collapsing abilities](img/B18805_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.2 – Tree with expanding and collapsing abilities
  prefs: []
  type: TYPE_NORMAL
- en: Using node selection events
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The PrimeNG `Tree` component provides a set of events and methods that allow
    you to interact with the component and respond to user actions. These events and
    methods enable you to perform tasks such as handling node selection, capturing
    node expansion and collapse events, and dynamically loading data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before enabling node selection events, we need to add `selectionMode` to the
    component. There are four types of selection:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<p-tree [value]="products"` `selectionMode="single" />`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<p-tree [value]="products"` `selectionMode="single" [metaKeySelection]="true"/>`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<p-tree [value]="products"` `selectionMode="multiple" />`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<p-tree [value]="products"` `selectionMode="checkbox" />`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After adding the node selection type, the PrimeNG `Tree` component emits events
    when a node is selected or unselected. You can use these events to perform actions
    based on the user’s node selection.
  prefs: []
  type: TYPE_NORMAL
- en: 'To capture the node selection event, you can use the `(onNodeSelect)` and `(onNodeUnselect)`
    event bindings. Here’s an example of `single` selection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In the code, the `(onNodeSelect)` event is bound to the `onNodeSelected()` method,
    and the `(onNodeUnselect)` event is bound to the `onNodeUnselected()` method.
    These methods will be invoked when a node is selected or unselected, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s have a look at a sample event when selecting the **Electronics** node:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.3 – Tree with selection events](img/B18805_07_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.3 – Tree with selection events
  prefs: []
  type: TYPE_NORMAL
- en: 'As a result, we can see that after selecting the `node` data, which has the
    following details:'
  prefs: []
  type: TYPE_NORMAL
- en: '`expanded: true`: This indicates the current node is in the expanded state'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`parent: undefined`: This shows that the current node doesn’t have a parent'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`data, icon, key, label, children`: This shows the existing values of the current
    node'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using node expansion and collapse events
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The PrimeNG `Tree` component emits events when a node is expanded or collapsed.
    You can utilize these events to perform actions when nodes are expanded or collapsed
    by the user.
  prefs: []
  type: TYPE_NORMAL
- en: 'To capture node expansion or collapse events, you can use the `(onNodeExpand)`
    and `(onNodeCollapse)` event bindings. Here’s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Here, the `(onNodeExpand)` event is bound to the `onNodeExpanded()` method,
    and the `(onNodeCollapse)` event is bound to the `onNodeCollapsed()` method. These
    methods will be triggered when a node is expanded or collapsed, respectively.
    The event value after expanding or collapsing is the same as when we select or
    unselect a node.
  prefs: []
  type: TYPE_NORMAL
- en: Working with lazy loading
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The PrimeNG `Tree` component supports lazy loading of data, which is beneficial
    when dealing with large datasets. Instead of loading all the nodes at once, you
    can load nodes dynamically as the user expands them.
  prefs: []
  type: TYPE_NORMAL
- en: To enable lazy loading, you need to use the `[loading]` property and the `(onNodeExpand)`
    event. The `[loading]` property allows you to indicate whether the tree is currently
    loading data, and the `(onNodeExpand)` event is triggered when a node is expanded,
    allowing you to load the child nodes dynamically.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s an example that demonstrates lazy loading:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, the `[loading]` property is bound to the `loading` variable
    in the Angular component, which indicates whether the tree is currently loading
    data. The `(onNodeExpand)` event is bound to the `loadChildNodes()` method, which
    is responsible for loading the child nodes of the expanded node. Here is the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.4 – Tree with loading](img/B18805_07_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.4 – Tree with loading
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The `loadChildNodes()` method should be implemented in the Angular component
    to fetch the child nodes dynamically based on the expanded node.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we discussed when to use the PrimeNG `Tree` component, such
    as in scenarios where data needs to be organized hierarchically, such as product
    catalogs or file systems, and its various features. In the next section, let’s
    delve into the `TreeTable` component.
  prefs: []
  type: TYPE_NORMAL
- en: Working with TreeTable components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When it comes to presenting hierarchical data structures in a tabular format,
    PrimeNG’s **TreeTable** emerges as a powerful tool, combining the best of both
    worlds: the nested structure of a tree and the organized columns of a table. Let’s
    embark on a journey to understand this component better and see how it can elevate
    our data presentation game.'
  prefs: []
  type: TYPE_NORMAL
- en: When to use the PrimeNG TreeTable component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The PrimeNG `TreeTable` component is particularly useful in scenarios where
    you need to represent data that has a hierarchical structure. It provides an intuitive
    and user-friendly way to navigate and interact with hierarchical data, making
    it ideal for applications that deal with organizational structures, file systems,
    product categories, and any other data that exhibits parent-child relationships.
  prefs: []
  type: TYPE_NORMAL
- en: The `TreeTable` component is more suitable for presenting hierarchical data
    in a tabular format with advanced interaction options such as sorting, filtering,
    and pagination, while the `Tree` component is best suited for displaying and navigating
    hierarchical data in a compact and collapsible tree-like structure.
  prefs: []
  type: TYPE_NORMAL
- en: By leveraging the `TreeTable` component, you can present complex hierarchical
    data in a structured and organized manner, allowing users to expand and collapse
    nodes, perform sorting and filtering operations, and interact with the data in
    a seamless manner.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a basic TreeTable component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Imagine you have a list of products categorized under different product families.
    Each product has details such as price, availability, and ratings. The `TreeTable`
    component can be an excellent choice to represent this data.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started, we need to import the necessary modules from the PrimeNG library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we have the dependencies installed and imported, we can use the `TreeTable`
    component in our Angular template. Here’s an example of how we can display the
    products in a `TreeTable` layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s break down the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<p-treeTable>`: This is the Angular component from the PrimeNG library used
    to display hierarchical tabular data in a tree-like structure.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[value]="products"`: This attribute binding sets the `products` property as
    the data source for the `TreeTable` component. The `products` variable in the
    component’s code contains an array of `TreeTableNode` objects representing the
    hierarchical data structure.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[scrollable]="true"`: This attribute binding enables scrolling within the
    `TreeTable` component if the content overflows the available space.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[tableStyle]="{ ''min-width'': ''50rem'' }"`: This attribute binding applies
    an inline CSS style object to the `tableStyle` attribute of the `<p-treeTable>`
    component. In this case, it sets the minimum width of the `TreeTable` component
    to `50rem`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<ng-template pTemplate="header">`: This element defines a template for rendering
    the header row of the `TreeTable` component.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<ng-template pTemplate="body" let-rowNode let-product="rowData">`: This element
    defines a template for rendering the body (rows) of the `TreeTable` component.
    This template also has two other properties:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`let-rowNode`: This declares a local variable named `rowNode` that represents
    the current row node being rendered'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`let-product="rowData"`: This declares a local variable named `product` that
    represents the data associated with the current row'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<p-treeTableToggler [rowNode]="rowNode" />`: This component is used to display
    a toggle button for expanding and collapsing child nodes in the `TreeTable` component.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`products: TreeTableNode[]`: This defines the `products` array as the data
    source for the `TreeTable` component. The products array consists of `TreeTableNode`
    objects representing the hierarchical data structure. Each node has a data property
    containing the product information, such as `name`, `price`, `rating`, and `category`.
    The example shows a nested structure with a parent node, `Electronics`, and a
    child node, `Computers`, which further contains a `MacBook Air` child node with
    its respective properties.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'That is an example of a simplified `TreeTable` structure representing a store.
    Here is the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.5 – Basic TreeTable structure](img/B18805_07_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.5 – Basic TreeTable structure
  prefs: []
  type: TYPE_NORMAL
- en: Using dynamic columns
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`TreeTable` component allow us to create columns on the fly based on the data
    or configuration we provide. Instead of defining each column manually in the template,
    we can bind a collection of columns from our component and let the `TreeTable`
    component generate the necessary columns dynamically. This approach is not only
    efficient but also offers a high degree of flexibility.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s consider an example of an e-commerce application that displays products
    in a `TreeTable` format. The application needs to handle different product categories,
    each with its own set of attributes. The goal is to dynamically render the columns
    based on the selected product category. Here is the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s break down the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<button (click)="updateColumns(...)" >`: This is a button element that triggers
    the `updateColumns()` method when clicked.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<th *ngFor="let col of columns">{{ col.header }}</th>`: This line uses an
    `*ngFor` directive to iterate over the `columns` array and generates a `<th>`
    element for each column. The column’s `header` property is displayed as the content
    of the `header` cell.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<td *ngFor="let col of columns; let i = index">`: This line uses an `*ngFor`
    directive to iterate over the `columns` array and generates a `<td>` element for
    each column.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<p-treeTableToggler [rowNode]="rowNode" *ngIf="i === 0" />`: This `<p-treeTableToggler>`
    component is used to display a toggle button for expanding and collapsing child
    nodes in the `TreeTable` component.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'With this implementation, the `TreeTable` will display the product data with
    the appropriate columns based on the selected type. Let’s look at the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.6 – TreeTable with dynamic columns](img/B18805_07_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.6 – TreeTable with dynamic columns
  prefs: []
  type: TYPE_NORMAL
- en: If the user switches from the **Rating** type to the **Quantity** type, the
    table will automatically update to show the **Quantity** column instead of **Rating**,
    as depicted back in *Figure 7**.5*.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling the TreeTable paginator
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `TreeTable` component that allows us to break down large sets of data into
    smaller, more manageable chunks or pages. Instead of displaying hundreds or thousands
    of rows all at once, the paginator lets users navigate through the data one page
    at a time. It provides controls for moving to the next page or previous page,
    jumping to the start or the end, and even selecting the page size.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can easily enable the paginator in our `TreeTable` component by adding `paginator`
    and `rows` attributes, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we’ve enabled pagination by setting `[paginator]="true"` and
    specified that we want to display two rows per page with `[rows]="2"`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `TreeTable` component will now display pagination controls, and users can
    navigate through the product data page by page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.7 – TreeTable with paginator](img/B18805_07_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.7 – TreeTable with paginator
  prefs: []
  type: TYPE_NORMAL
- en: Associated events and methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `TreeTable` component provides various events and methods that you can
    leverage to enhance the functionality and interactivity of your application. Here
    are some commonly used events and methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`onNodeExpand`: This event is triggered when a node is expanded'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onNodeCollapse`: This event is triggered when a node is collapsed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onNodeSelect`: This event is triggered when a node is selected'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onNodeUnselect`: This event is triggered when a node is unselected'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`reset`: This method clears the sort and paginator state*   `resetScrollTop`:
    This method resets scroll to top*   `scrollToVirtualIndex`: This method scrolls
    to a given index when using virtual scrolling*   `scrollTo`: This method scrolls
    to the given index'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can use these events and methods to customize the behavior of the `TreeTable`
    component based on your application’s requirements. For example, you can listen
    to the `onNodeCollapse` event to perform certain actions when a node is collapsed,
    such as removing detailed information or triggering additional operations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s break down the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`(onNodeCollapse)="handleNodeCollapse($event)"`: This binds the `handleNodeCollapse`
    method to the event that occurs when a node in the `TreeTable` component is collapsed.
    The method will be called with the `event` object as an argument.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`handleNodeCollapse(event: TreeTableNodeCollapseEvent) { ... }`: This takes
    the `event` object of the `TreeTableNodeCollapseEvent` type as an argument. This
    `event` object contains information about the collapsed node, which you can use
    to handle the event.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Throughout our exploration of the PrimeNG `TreeTable` component, we’ve seen
    its power in presenting hierarchical data in a structured and user-friendly manner.
    From dynamic columns to efficient pagination, the `TreeTable` component offers
    a robust solution for various data representation challenges. Now, let’s shift
    our focus to the PrimeNG `Timeline` component, a tool that beautifully visualizes
    data in a chronological sequence.
  prefs: []
  type: TYPE_NORMAL
- en: Working with Timeline components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The PrimeNG `Timeline` component is a powerful component provided by the PrimeNG
    library for Angular applications, allowing you to visualize a series of chained
    events in chronological order. The timeline provides a user-friendly and interactive
    way to display events, making it easier for users to understand the sequence of
    activities or changes over time.
  prefs: []
  type: TYPE_NORMAL
- en: The PrimeNG `Timeline` component is designed to present events in a linear fashion,
    allowing users to navigate through different stages or milestones. Each event
    in the timeline is represented by a marker, which can be customized to show relevant
    information such as status, date, or any other meaningful data.
  prefs: []
  type: TYPE_NORMAL
- en: The timeline offers various features to enhance the user experience – it supports
    both vertical and horizontal layouts, providing flexibility in terms of the orientation
    of the timeline, plus alignment options to position the timeline bar relative
    to the content.
  prefs: []
  type: TYPE_NORMAL
- en: When to use the PrimeNG Timeline component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The PrimeNG `Timeline` component can be used in a wide range of applications
    and scenarios. Here are a few examples of when the `Timeline` component can be
    beneficial:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Project management**: Use a timeline to showcase project milestones, such
    as project initiation, requirements gathering, development phases, and project
    completion. It helps stakeholders and team members visualize the project’s progress
    and understand the sequence of key events.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Order tracking**: If you have an e-commerce application, you can utilize
    a timeline to display the different stages of order processing, such as order
    placement, payment verification, order fulfillment, and delivery. This gives customers
    a clear overview of the order’s progress.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Historical events**: A timeline is also suitable for presenting historical
    events or significant achievements. For instance, you can use it to illustrate
    the timeline of scientific discoveries, major historical events, or the evolution
    of a specific industry.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Product updates**: If you maintain a product roadmap or want to showcase
    the release history of your software product, a timeline can be an effective way
    to present the different versions, updates, and new features over time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Whenever there’s a need to represent a series of events in the order they took
    place, the PrimeNG `Timeline` component is an excellent choice.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a basic timeline
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started, we need to import the necessary modules from the PrimeNG library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we have the dependencies installed and imported, we can use the `Timeline`
    component in our Angular template. Here’s an example of how we can display the
    order status in a timeline layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s break down the code and understand its functionality:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<p-timeline [value]="orderStatuses">`: This represents the usage of the PrimeNG
    `Timeline` component. It binds the `value` property of the `Timeline` component
    to the `orderStatuses` variable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<ng-template pTemplate="content" let-order>`: This defines the template for
    rendering the content of each status in the timeline.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`orderStatuses`: This represents different stages or statuses of an order.
    Each element in the array corresponds to a specific event that will be displayed
    on the timeline.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overall, the code demonstrates how to use the PrimeNG `Timeline` component to
    display a timeline of order status. The timeline is populated with status data
    from the `orderStatuses` array, and each status is rendered using a template that
    includes an icon and a title. This allows for a visually appealing and informative
    representation of events in chronological order.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the result of the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.8 – Basic timeline](img/B18805_07_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.8 – Basic timeline
  prefs: []
  type: TYPE_NORMAL
- en: Timeline alignment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The PrimeNG **timeline alignment** feature enables you to control the location
    of the content relative to the timeline. You can align the content to the left,
    right, top, bottom, or alternate sides of the timeline. This flexibility allows
    you to customize the appearance and layout of the timeline based on your design
    preferences or application needs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s imagine we’re building a timeline to showcase the order statuses of a
    product. You can customize the alignment by choosing different values for the
    `align` attribute, such as `left`, `right`, or `alternate`, depending on your
    specific design requirements. Let’s update the alignment in our existing order
    status timeline:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'In the code snippet, we have used the `align` attribute with the `alternate`
    value to align the content of each activity on alternate sides of the timeline
    line. This layout creates an interesting visual pattern, with activities appearing
    on both the left and right sides of the timeline:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.9 – Timeline alignment](img/B18805_07_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.9 – Timeline alignment
  prefs: []
  type: TYPE_NORMAL
- en: Timeline horizontal layout
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In addition to the alignment options, the PrimeNG `Timeline` component also
    provides a horizontal layout option. The horizontal layout is designed to present
    events or milestones in a linear fashion from left to right, which is particularly
    useful when you want to showcase a timeline that spans across a wide area, such
    as a project timeline or a historical sequence of events.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use `Timeline` with a horizontal layout, you can set the `layout` attribute
    to `horizontal` in the `Timeline` component. Let’s take a look at an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'In the code snippet, we have set the `layout` attribute to `horizontal`, indicating
    that we want to display the timeline events in a horizontal manner. Here is the
    result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.10 – Horizontal timeline](img/B18805_07_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.10 – Horizontal timeline
  prefs: []
  type: TYPE_NORMAL
- en: Through our exploration of the PrimeNG `Timeline` component, we’ve seen how
    it offers a dynamic way to visually represent events, milestones, or processes.
    Its flexibility, from basic event representation to features such as alignment
    or layout, ensures that we can craft narratives tailored to our needs. As we wrap
    up this section, let’s take a moment to reflect on our journey and summarize the
    key takeaways.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigating through the chapter, we explored the intricacies of representing
    hierarchical and chronological data using PrimeNG’s `Tree`, `TreeTable`, and `Timeline`
    components. These powerful tools play a pivotal role in presenting structured
    data in a visually appealing and user-friendly manner, whether it’s displaying
    a hierarchical structure of items or visualizing a sequence of events over time.
  prefs: []
  type: TYPE_NORMAL
- en: We began by uncovering the capabilities of the `Tree` component and understanding
    its significance in effectively representing data with parent-child relationships.
    The `TreeTable` component expanded on this concept by offering a seamless integration
    of tabular and hierarchical data presentation. Additionally, the `Timeline` component
    showcased its prowess in visualizing sequences, milestones, or events in chronological
    order, providing us with the flexibility to present narratives or process flows
    with clarity and coherence.
  prefs: []
  type: TYPE_NORMAL
- en: By mastering these components, we equip ourselves with the necessary tools to
    effectively present complex data structures in an intuitive manner. This not only
    enhances the user experience but also ensures that our applications are functional
    and aesthetically pleasing.
  prefs: []
  type: TYPE_NORMAL
- en: As we gear up for the next journey, we will delve into another set of PrimeNG
    components that further elevate our application’s interactivity and functionality.
    Get ready to explore navigation and layout components in the next chapter.
  prefs: []
  type: TYPE_NORMAL
