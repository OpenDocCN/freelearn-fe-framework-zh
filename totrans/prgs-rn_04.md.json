["```js\nimport {Appearance} from 'react-native';\nconst isDarkMode = Appearance.getColorScheme() === 'dark';\nconst FontConstants = {\n  familyRegular: 'sans-serif',\n  sizeTitle: 18,\n  sizeRegular: 14,\n  weightBold: 'bold',\n};\nconst ColorConstants = {\n  background: isDarkMode ? '#333333' : '#efefef',\n  backgroundMedium: isDarkMode ? '#666666' : '#dddddd',\n  font: isDarkMode ? '#eeeeee' : '#222222',\n};\nconst SizeConstants = {\n  paddingSmall: 2,\n  paddingRegular: 8,\n  paddingLarge: 16,\n  borderRadius: 8,\n};\nexport {FontConstants, ColorConstants, SizeConstants};\n```", "```js\ninterface BackButtonProps{\n  text: string;\n  onPress: () => void;\n}\nconst BackButton = (props: BackButtonProps) => {\n  return (\n    <Pressable onPress={props.onPress}\n      style={styles.backButton}>\n      <Text>{props.text}</Text>\n    </Pressable>\n  );\n};\nconst styles = StyleSheet.create({\n  backButton: {\n    padding: SizeConstants.paddingLarge,\n    marginBottom: SizeConstants.paddingLarge,\n    backgroundColor: ColorConstants.backgroundMedium,\n  },\n});\n```", "```js\nconst Header = (props: HeaderProps) => {\n  return <Text style={{\n          fontSize: 18,\n          fontWeight: 'bold',\n          marginBottom: 16}\n        }>\n            {props.text}\n        </Text>;\n};\n```", "```js\nconst Header = (props: HeaderProps) => {\n  return <Text style={styles.title}>{props.text}</Text>;\n};\nconst styles = StyleSheet.create({\n  title: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    marginBottom: 16,\n  },\n});\n```", "```js\n<Text style={[styles.title, {color:props.color}]}>{props.text}</Text>\n```", "```js\nimport styled from 'styled-components/native';\nconst Header = (props: HeaderProps) => {\n  return <StyledText>{props.text}</StyledText>;\n};\nconst StyledText = styled.Text`\n  font-size: ${FontConstants.sizeTitle};\n  font-weight: ${FontConstants.weightBold};\n  margin-bottom: ${SizeConstants.paddingLarge};\n  color: ${ColorConstants.font};\n`;\n```", "```js\n<StyledText primary>{props.text}</StyledText>;\n```", "```js\nconst StyledText = styled.Text`\n  font-size: ${props => props.primary ?\n                          FontConstants.sizeTitle :\n                            FontConstants.sizeRegular};\n`;\n```", "```js\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n// set item\nconst jsonValue = JSON.stringify(value)\nawait AsyncStorage.setItem('@key', jsonValue)\n// get item\nconst strValue = await AsyncStorage.getItem('@key')\nconst jsonValue = strValue != null ? JSON.parse(strValue) : null\n```", "```js\nimport { MMKV } from 'react-native-mmkv'\nexport const storage = new MMKV()\n// set data\nconst jsonValue = JSON.stringify(value)\nstorage.set('@key', jsonValue)\n// get data\nconst strValue = storage.getString('@key')\nconst jsonValue = strValue!= null ? JSON.parse(strValue) : null\n```", "```js\nimport { QuickSQLite } from 'react-native-quick-sqlite';\nconst dbOpenResult = QuickSQLite.open('myDB', 'databases');\n// set data\nlet { status, rowsAffected } = QuickSQLite.executeSql(\n  'myDB',\n  'UPDATE users SET name = ? where userId = ?',\n  ['John', 1]\n);\nif (!status) {\n  console.log(`Update affected ${rowsAffected} rows`);\n}\n// get data\nlet { status, rows } = QuickSQLite.executeSql(\n  'myDB',\n  'SELECT name FROM users'\n);\nif (!status) {\n  rows.forEach((row) => {\n    console.log(row);\n  });\n}\n```", "```js\nconst MainStack = createNativeStackNavigator<MainStackParamList>();\nconst App = () => {\n  return (\n    <NavigationContainer>\n      <MainStack.Navigator>\n        <MainStack.Screen\n          name=\"Home\"\n          component={Home}\n          options={{title: 'Movie Genres'}}\n        />\n        <MainStack.Screen\n          name=\"Genre\"\n          component={Genre}\n          options={{title: 'Movies'}}\n        />\n        <MainStack.Screen\n          name=\"Movie\"\n          component={Movie}\n          options={({route}) =>\n          ({title: route.params.movie.title})}\n        />\n      </MainStack.Navigator>\n    </NavigationContainer>\n  );\n};\n```", "```js\ntype GenreProps = NativeStackScreenProps<MainStackParamList, 'Genre'>;\nconst Genre = (props: GenreProps) => {\n  const [movies, setMovies] = useState<IMovie[]>([]);\n  useEffect(() => {\n    if (typeof props.route.params.genre !== 'undefined') {\n      setMovies(getMovieByGenreId(props.route.params.genre.\n        id));\n    }\n  }, [props.route.params.genre]);\n  return (\n    <ScrollContainer>\n      {movies.map(movie => {\n        return (\n          <Pressable\n            onPress={() =>\n              props.navigation.navigate('Movie',\n                {movie: movie})}>\n            <Text\n             style={styles.movieTitle}>{movie.title}</Text>\n          </Pressable>\n        );\n      })}\n    </ScrollContainer>\n  );\n};\n```", "```js\nconst MainStackScreen = () => {\n  return (\n    <MainStack.Navigator>\n      <MainStack.Screen component={Home}/>\n      <MainStack.Screen component={Genre}/>\n      <MainStack.Screen component={Movie}/>\n    </MainStack.Navigator>\n  );\n};\nconst App = () => {\n  return (\n    <NavigationContainer>\n      <TabNavigator.Navigator>\n        <TabNavigator.Screen\n          name=\"Main\"\n          component={MainStackScreen}\n          options={{\n            headerShown: false,\n          }}\n        />\n        <TabNavigator.Screen\n          name=\"User\"\n          component={User}\n        />\n      </TabNavigator.Navigator>\n    </NavigationContainer>\n  );\n```"]