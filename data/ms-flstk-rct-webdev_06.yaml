- en: AWS S3 for Image Upload and Wrapping Up Key Application Features
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS S3用于图片上传和总结关键应用功能
- en: 'Currently we have an app that works but is missing some key features. Our focus
    for this chapter will include the following feature implementations/improvements:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 目前我们有一个工作但缺少一些关键功能的app。本章的重点将包括以下功能实现/改进：
- en: Opening a new AWS account
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打开一个新的AWS账户
- en: Creating **Identity and Access Management** (**IAM**) for your AWS account
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为您的AWS账户创建**身份和访问管理**（**IAM**）
- en: Setting up an AWS S3 bucket
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置AWS S3存储桶
- en: Adding the ability to upload a photo for an article (add and edit article covers)
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为文章添加上传照片的功能（添加和编辑文章封面）
- en: Adding the ability to set up a title, subtitle, and "overlay subtitle" (on the
    add/edit article views)
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加设置标题、副标题和“叠加副标题”的功能（在添加/编辑文章视图中）
- en: 'Articles on the dashboard currently have HTML in the content; we need to improve
    that:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 仪表板上的文章目前内容中包含HTML；我们需要改进这一点：
- en: '![](img/00053.jpeg)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00053.jpeg)'
- en: We need to finish this stuff. After we are done with these improvements, we
    will do some refactoring.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要完成这些事情。在我们完成这些改进后，我们将进行一些重构。
- en: AWS S3 - an introduction
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS S3 - 简介
- en: Amazon's AWS S3 is a simple storage service for static assets such as images
    on Amazon's servers. It helps you host safe, secure, and highly scalable objects
    (as images) in the cloud.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊的AWS S3是亚马逊服务器上静态资产（如图片）的简单存储服务。它帮助您在云中托管安全、安全且高度可扩展的对象（如图片）。
- en: This approach of storing static assets online is quite convenient and easy--this
    is why we will use it throughout our book.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在线存储静态资产的方法相当方便且简单--这就是为什么我们将在整本书中使用它。
- en: We will use it in our application, as it gives us many scalability features
    that wouldn't be so easy to access when hosting image assets on our own Node.js
    server.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在我们的应用中使用它，因为它为我们提供了许多在托管图像资产时在自家的Node.js服务器上难以访问的可扩展性功能。
- en: In general, Node.js shouldn't be used for hosting assets larger than what we
    use it for now. Don't even think of implementing an image-upload mechanism (not
    recommended at all) on the Node.js server--we will employ Amazon's services for
    that.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，Node.js不应该用于托管比我们现在使用的更大的资产。甚至不要考虑在Node.js服务器上实现图像上传机制（根本不推荐）--我们将使用亚马逊的服务来处理。
- en: Generating keys (access key ID and secret key)
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成密钥（访问密钥ID和秘密密钥）
- en: Before we start adding a new S3 bucket, we need to generate keys for our AWS
    account (`accessKeyId` and `secretAccessKey`).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始添加新的S3存储桶之前，我们需要为我们AWS账户生成密钥（`accessKeyId`和`secretAccessKey`）。
- en: 'An example set of details that we will need to keep in our Node.js app is as
    follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在Node.js应用中保留以下示例详细信息的集合：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: What is a bucket in Amazon S3? A **bucket** is a kind of namespace for files
    that you have in Amazon S3\. You can have several buckets associated with different
    projects. As you can see, our next steps will be creating the `accessKeyId` and
    `secretAccessKey` associated with your `accountDefine` and `bucketKey` (kind of
    a namespace for the pictures for our articles). Define a region where you want
    to keep the files physically. If your project has a target specified for a location,
    it will speed up the loading of images and, in general, limit the latency because
    an image will be hosted closer to the client/user of our publishing application.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊S3中的存储桶是什么？**存储桶**是您在亚马逊S3中拥有的文件的一种命名空间。您可以为不同的项目拥有几个存储桶。如您所见，我们的下一步将是创建与您的`accountDefine`和`bucketKey`（为我们文章的图片的命名空间）相关的`accessKeyId`和`secretAccessKey`。定义一个您希望物理存储文件的区域。如果您的项目指定了目标位置，这将加快图像的加载速度，并且通常可以减少延迟，因为图像将托管在离我们发布应用的客户端/用户更近的地方。
- en: 'To create an AWS account, go to [https://aws.amazon.com/](https://aws.amazon.com/):'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建AWS账户，请访问[https://aws.amazon.com/](https://aws.amazon.com/)：
- en: '![](img/00054.jpeg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00054.jpeg)'
- en: 'Create an account or sign in to your account:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 创建账户或登录您的账户：
- en: '![](img/00055.jpeg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00055.jpeg)'
- en: The next step is to create the IAM, described in detail in the next section.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是创建IAM，将在下一节中详细介绍。
- en: '**Regarding AWS creation** After you create an account for a certain region,
    if you want to create an S3 bucket, you need to choose the same region your account
    is assigned to; otherwise, you may have problems while setting up S3 in the following
    pages.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**关于AWS创建** 在您为某个区域创建账户后，如果您想创建一个S3存储桶，您需要选择与您的账户分配到相同区域的区域；否则，在以下页面设置S3时可能会遇到问题。'
- en: IAM
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IAM
- en: 'Let''s prepare our new `accessKeyId` and `secretAccessKey`. You need to visit
    the IAM page in your Amazon console. You can find it in the Services list:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们准备新的`accessKeyId`和`secretAccessKey`。你需要访问你的Amazon控制台中的IAM页面。你可以在服务列表中找到它：
- en: '![](img/00056.jpeg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00056.jpeg)'
- en: 'The IAM page looks like this ([https://console.aws.amazon.com/iam/home?#home](https://console.aws.amazon.com/iam/home?#home)):'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: IAM页面看起来像这样 ([https://console.aws.amazon.com/iam/home?#home](https://console.aws.amazon.com/iam/home?#home))：
- en: '![](img/00057.jpeg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00057.jpeg)'
- en: 'Go to IAM Resources | Users:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 前往IAM资源 | 用户：
- en: '![](img/00058.jpeg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00058.jpeg)'
- en: 'On the next page, you will see a button; click on it:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一页，你会看到一个按钮；点击它：
- en: '![](img/00059.jpeg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00059.jpeg)'
- en: 'After clicking, you will see a form. Fill it in with at least one user, as
    in this screenshot (the screenshots are giving you the exact steps that you must
    accomplish, even if AWS''s UX has been changed in the meantime):'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 点击后，你会看到一个表单。至少填写一个用户，如截图所示（截图提供了你必须完成的精确步骤，即使在此期间AWS的用户体验已经改变）：
- en: '![](img/00060.jpeg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00060.jpeg)'
- en: 'After clicking on the Create button, copy the keys to a safe place (we will
    use them in a moment):'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“创建”按钮后，将密钥复制到安全的地方（我们将在稍后使用它们）：
- en: '![](img/00061.jpeg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00061.jpeg)'
- en: Do not forget to copy the keys (access key ID and secret access key). You will
    learn where to put them in the code in order to use S3 services later in the book.
    Of course, the ones in the screenshot aren't active. They are only examples; you
    need to have your own.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记复制密钥（访问密钥ID和秘密访问密钥）。你将在本书后面的代码中学习如何放置它们以使用S3服务。当然，截图中的密钥不是活动的；它们只是示例；你需要有自己的。
- en: Setting up S3 permissions for the user
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为用户设置S3权限
- en: 'The last thing is to add AmazonS3FullAccess permissions with the following
    steps:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是按照以下步骤添加AmazonS3FullAccess权限：
- en: 'Go to the Permissions tab:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往“权限”选项卡：
- en: '![](img/00062.jpeg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00062.jpeg)'
- en: 'Click on Attach Policy and choose AmazonS3FullAccessAfter. After attaching
    it, it will be listed as in the following example:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“附加策略”并选择AmazonS3FullAccessAfter。附加后，它将列在以下示例中：
- en: '![](img/00063.jpeg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00063.jpeg)'
- en: Now we'll move on to creating a new bucket for the image files.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将进入创建用于图像文件的新存储桶。
- en: 'You are done with the keys and you have granted the S3 policy for the keys;
    now, we need to prepare the bucket that will keep the images. First of all, you
    need to go to the AWS console main page, which looks as follows ([https://console.aws.amazon.com/console/home](https://console.aws.amazon.com/console/home)):'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你已经完成了密钥的设置，并授予了密钥的S3策略；现在，我们需要准备将保存图像的存储桶。首先，你需要转到AWS控制台主页面，它看起来如下 ([https://console.aws.amazon.com/console/home](https://console.aws.amazon.com/console/home))：
- en: '![](img/00064.jpeg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00064.jpeg)'
- en: 'You will see something like AWS Services SHOW ALL SERVICES (alternatively,
    find it from the Services list the same way as IAM):'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你会看到类似AWS服务显示所有服务（或者，你可以像IAM一样从服务列表中找到它）的内容：
- en: '![](img/00065.jpeg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00065.jpeg)'
- en: 'Click on S3 - Scalable Storage in the Cloud (as in the previous screenshot).
    After that, you will see a view similar to this (I have six buckets; you will
    have zero when you have a new account):'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在S3 - 云可扩展存储（如前一张截图所示）上点击。之后，你会看到一个类似这样的视图（我这里有六个存储桶；当你有一个新账户时，你将有一个零）：
- en: '![](img/00066.jpeg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00066.jpeg)'
- en: In that bucket, we will keep the static images of our articles (you will learn
    how exactly in the coming pages).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在该存储桶中，我们将保存我们文章的静态图像（你将在接下来的页面中了解具体方法）。
- en: 'Create a bucket by clicking on the Create Bucket button:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击“创建存储桶”按钮来创建一个存储桶：
- en: '![](img/00067.jpeg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00067.jpeg)'
- en: Choose thepublishing-app name (or another that works for you).
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择publishing-app名称（或者选择对你有效的其他名称）。
- en: '![](img/00068.jpeg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00068.jpeg)'
- en: In the screenshot, we have chosen Frankfurt. But if, for example, when you create
    an account and your URL shows `"?region=us-west-2"`, then choose Oregon. It's
    important to create the S3 bucket in the region that you have assigned your account
    to.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在截图中，我们选择了法兰克福。但是，例如，当你创建账户并且你的URL显示`"?region=us-west-2"`时，请选择俄勒冈州。在创建S3存储桶时，将账户分配到相应的区域是很重要的。
- en: 'After the bucket has been created, click on it from the bucket list:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 存储桶创建完成后，从存储桶列表中点击它：
- en: '![](img/00069.jpeg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00069.jpeg)'
- en: 'The empty bucket with the publishing-app name will look as follows:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以publishing-app名称命名的空存储桶看起来如下：
- en: '![](img/00070.jpeg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00070.jpeg)'
- en: 'When you are in this view, the URL in the browser tells you the exact region
    and bucket (so you can use it later when performing configuration on the backend):'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你在这个视图中时，浏览器中的URL会告诉你确切的区域和存储桶（这样你就可以在稍后进行后端配置时使用它）：
- en: '[PRE1]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The last thing is to make sure that the CORS configuration for the publishing-app
    bucket is correct. Click on the Properties tab in that view, and you will get
    a detailed view of it:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，确保publishing-app存储桶的CORS配置正确。点击该视图中的“属性”选项卡，你将获得其详细视图：
- en: '![](img/00071.jpeg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00071.jpeg)'
- en: 'Then, click on the Add CORS button:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，点击“添加CORS”按钮：
- en: '![](img/00072.jpeg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00072.jpeg)'
- en: 'After that, paste the following into the text area  (the following is the cross-origin
    resource sharing definition; it defines a way for the Pub app which is loaded
    in one domain to interact with resources in a different domain within the AWS
    services):'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，将以下内容粘贴到文本区域（以下为跨源资源共享定义；它定义了在同一个域中加载的Pub应用程序与AWS服务中不同域的资源交互的方式）：
- en: '[PRE2]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'It will now look like the following example:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它现在将看起来像以下示例：
- en: '![](img/00073.jpeg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00073.jpeg)'
- en: Click on the Save button. After all the steps are done, we can start with coding
    the image upload feature.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“保存”按钮。完成所有步骤后，我们可以开始编写图像上传功能。
- en: Coding the image upload feature in the AddArticleView
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在AddArticleView中编写图像上传功能
- en: 'Before you are able to continue, you need to have your access details for your
    S3 bucket that you created in the previous pages. `AWS_ACCESS_KEY_ID` comes from
    a previous subsection, where we created a user while being in that view:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在你能够继续之前，你需要有你在前几页创建的S3存储桶的访问详情。`AWS_ACCESS_KEY_ID`来自前一小节，我们在那个视图中创建了一个用户：
- en: '![](img/00074.jpeg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00074.jpeg)'
- en: '`AWS_SECRET_ACCESS_KEY` is the same as the AWS access key (as you can already
    guess by the name itself). `AWS_BUCKET_NAME` is the name of your bucket (in our
    book, we''ve called it publishing-app). For `AWS_REGION_NAME`, we will use `eu-central-1`.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`AWS_SECRET_ACCESS_KEY`与AWS访问密钥相同（正如你从名称本身就可以猜到）。`AWS_BUCKET_NAME`是存储桶的名称（在我们的书中，我们称之为publishing-app）。对于`AWS_REGION_NAME`，我们将使用`eu-central-1`。'
- en: The easiest way to find `AWS_BUCKET_NAME` and `AWS_REGION_NAME` is to look at
    the URL while you are in that view (described in the previous subsection).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 要找到`AWS_BUCKET_NAME`和`AWS_REGION_NAME`的最简单方法是在你处于该视图（如前一小节所述）时查看URL。
- en: '![](img/00075.jpeg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00075.jpeg)'
- en: 'Check the browser''s URL in that view: `https://console.aws.amazon.com/s3/home?region=eu-central-1#&bucket=publishing-app&prefix=`'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 检查浏览器中的URL：`https://console.aws.amazon.com/s3/home?region=eu-central-1#&bucket=publishing-app&prefix=`
- en: The region and bucket names are clearly in that URL (I want to make this very
    clear as your region and bucket name can be different, depending on where you
    live).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 区域和存储桶名称在URL中非常明显（我想强调这一点，因为你的区域和存储桶名称可能因你所在的位置而不同）。
- en: Also, make sure that your CORS are set up correctly and your permissions/attach
    policy is done exactly as described above. Otherwise, you can have problems with
    everything described in the following subsections.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，确保你的CORS设置正确，并且你的权限/附加策略与上述描述完全一致。否则，你可能会在以下子节中遇到问题。
- en: Environment variables in Node.js
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Node.js中的环境变量
- en: We will pass all four parameters (`AWS_ACCESS_KEY_ID`, `AWS_SECRET_ACCESS_KEY`,
    `AWS_BUCKET_NAME`, and `AWS_REGION_NAME`) via the node's environment variables.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过node的环境变量传递所有四个参数（`AWS_ACCESS_KEY_ID`、`AWS_SECRET_ACCESS_KEY`、`AWS_BUCKET_NAME`和`AWS_REGION_NAME`）。
- en: 'First, let''s install a node library that will create environment variables
    from a file so that we will be able to use them within our localhost:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们安装一个node库，它可以从文件中创建环境变量，这样我们就可以在本地主机中使用它们：
- en: '[PRE3]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: What are these environment variables? In general, we will use them to pass the
    variables of some sensitive data to the app--we are talking here specifically
    about AWS secret keys and MongoDB's login/password information for the current
    environment setup (if it is development or production).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这些环境变量是什么？一般来说，我们将使用它们将一些敏感数据的变量传递给应用程序--我们在这里具体谈论的是当前环境设置（开发或生产）的AWS密钥和MongoDB的登录/密码信息。
- en: 'You can read those environment variables via accessing them, like in the following
    examples:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过访问它们来读取这些环境变量，如下面的示例所示：
- en: '[PRE4]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In our local development environment, we will keep that information in the
    server''s directory, so do this from your command prompt:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的本地开发环境中，我们将在服务器的目录中保留这些信息，所以从你的命令提示符执行此操作：
- en: '[PRE5]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You have created a `server/.env` file; the next step is to put content in it
    (from this file, the `node-env-file` will read the environment variables when
    our app is running):'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经创建了一个`server/.env`文件；下一步是将内容放入其中（从该文件，`node-env-file`将在我们的应用程序运行时读取环境变量）：
- en: '[PRE6]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here, you can see the structure of a node''s environment file. Each new line
    comes with a key and value. There, you need to paste the keys you created while
    reading this chapter. Replace those values with your own: `*_*_ACCESS_KEY_HERE_*_`
    and `_*_SECRET_KEY_HERE_**_`.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以看到节点环境文件的结构。每一行新内容都包含一个键和值。在那里，你需要粘贴你在阅读本章时创建的键。将这些值替换为你自己的：`*_*_ACCESS_KEY_HERE_*_`
    和 `_*_SECRET_KEY_HERE_**_`。
- en: 'After you have created the `server/.env` file, install the required dependency
    that will abstract the whole gig with the image upload; use `npm` for this when
    in the project''s directory:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在你创建了 `server/.env` 文件后，安装所需的依赖项，该依赖项将抽象整个图像上传过程；在项目目录中使用 `npm` 进行此操作：
- en: '[PRE7]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `react-s3-uploader` component works quite well for our use case, and it
    abstracts the `aws-sdk` features for us quite well. The main point here is that
    we need to have configured the `.env` file well (with the correct variables) and
    the `react-s3-uploader` will do the job at the backend and frontend for us (as
    you will see soon).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`react-s3-uploader` 组件非常适合我们的用例，并且很好地抽象了 `aws-sdk` 的功能。这里的主要点是，我们需要正确配置 `.env`
    文件（使用正确的变量），然后 `react-s3-uploader` 将为我们处理后端和前端的工作（正如你很快就会看到的）。'
- en: Improving our Mongoose article schema
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 改进我们的 Mongoose 文章模式
- en: 'We need to improve the schema, so we will have a place in our article collection
    for storing the URL of an image. Edit the old article schema:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要改进模式，以便在我们的文章集合中有一个存储图片 URL 的位置。编辑旧的文章模式：
- en: '[PRE8]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Change it to the new, improved version:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 更改为新的、改进的版本：
- en: '[PRE9]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: As you can see, we have introduced the `articlePicUrl` with a default value
    of `/static/placeholder.png`. Now, we will be able to save an article with a picture's
    URL variable in the article's object.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们引入了 `articlePicUrl`，默认值为 `/static/placeholder.png`。现在，我们将能够保存包含图片 URL
    变量的文章对象。
- en: If you forgot to update the Mongoose model, then it won't let you save that
    value into the database.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你忘记更新 Mongoose 模型，那么它不会让你将此值保存到数据库中。
- en: Adding routes for S3's upload
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加 S3 的上传路由
- en: 'We need to import one new library into the `server/server.js` file:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要将一个新库导入到 `server/server.js` 文件中：
- en: '[PRE10]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We''ll end up with something like the following:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最终会得到以下内容：
- en: '[PRE11]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: I'm putting all this here so you can make sure that your `server/server.js`
    file matches this.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我把所有这些都放在这里，这样你可以确保你的 `server/server.js` 文件与此匹配。
- en: 'One more thing to do is to modify the `server/index.js` file. Find this:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一件事要做，就是修改 `server/index.js` 文件。找到以下内容：
- en: '[PRE12]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Change it to the following improved version:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 更改为以下改进版本：
- en: '[PRE13]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Just for clarification, `env(__dirname + '/.env');` is telling us the location
    of the `.env` file in our structure (you can find from `console.log` that the
    `__dirname` variable is a system location of a server's file--this must match
    the real `.env` file's location so it can be found by the system).
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 为了澄清，`env(__dirname + '/.env');` 告诉我们结构中 `.env` 文件的位置（你可以从 `console.log` 中找到，`__dirname`
    变量是服务器文件的系统位置--这必须与真实的 `.env` 文件位置匹配，以便系统能够找到它）。
- en: 'The next part is to add this to our `server/server.js` file:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是将以下内容添加到我们的 `server/server.js` 文件中：
- en: '[PRE14]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: As you can see here, we have started using the environment variable that we
    defined in the `server/.env` file. For me, the `process.env.AWS_BUCKET_NAME` is
    equal to `publishing-app`, but if you have defined it differently, then it will
    retrieve another value from `server/.env` (thanks to the `env` express middleware
    that we just defined).
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们已经开始使用在 `server/.env` 文件中定义的环境变量。对我来说，`process.env.AWS_BUCKET_NAME` 等于
    `publishing-app`，但如果你定义了不同的值，那么它将从 `server/.env` 中检索另一个值（多亏了我们刚刚定义的 `env` express
    中间件）。
- en: Based on that backend configuration (environment variables and setting up `s3router`
    with `import s3router from 'react-s3-uploader/s3router'`), we will be able to
    use the AWS S3 bucket. We need to prepare the frontend, which first will be implemented
    on the add-an-article view.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 基于那个后端配置（环境变量和通过 `import s3router from 'react-s3-uploader/s3router'` 设置 `s3router`），我们将能够使用
    AWS S3 存储桶。我们需要准备前端，这首先将在添加文章视图上实现。
- en: Creating the ImgUploader component on the frontend
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在前端创建 ImgUploader 组件
- en: 'We will create a dump component called `ImgUploader`. This component will use
    the `react-s3-uploader` library, which does the job of abstracting the upload
    to Amazon S3\. On a callback, you receive `information:onProgress`, and you can
    find the progress in percent with that callback, so a user can see the status
    of an `uploadonError`. This callback is fired when an error `occursonFinish`:
    this callback sends us back the location of a file that has been uploaded to S3.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个名为 `ImgUploader` 的组件。这个组件将使用 `react-s3-uploader` 库，该库负责将上传抽象到 Amazon
    S3。在回调中，你将收到 `information:onProgress`，你可以通过那个回调找到百分比进度，所以用户可以看到上传的状态。当发生错误时，这个回调会被触发：这个回调会发送给我们已上传到
    S3 的文件的位置。
- en: 'You will learn more details further in the chapter; let''s create a file first:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在后续章节中了解更多细节；让我们先创建一个文件：
- en: '[PRE15]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'You have created the `src/components/articles/ImgUploader.js` file, and the
    next step is to prepare the imports. So to the top of the `ImgUploader` file,
    add the following:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经创建了 `src/components/articles/ImgUploader.js` 文件，下一步是准备导入。所以，将以下内容添加到 `ImgUploader`
    文件的顶部：
- en: '[PRE16]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: As you can see here, we have initiated the `ImgUploader` component with `div`
    that returns a temporary placeholder in the `render` function.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们在 `render` 函数中初始化了 `ImgUploader` 组件，使用 `div` 返回一个临时的占位符。
- en: We have also prepared `propTypes` with a required property called `updateImgUrl`.
    This will be a callback function that will send a final, uploaded image's location
    (which has to be saved in the database--we will use this `updateImgUrl` props
    in a moment).
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还准备了 `propTypes`，其中有一个名为 `updateImgUrl` 的必需属性。这将是一个回调函数，它将发送最终上传的图像的位置（必须保存在数据库中--我们将在稍后使用这个
    `updateImgUrl` 属性）。
- en: 'In the state of that `ImgUploader` component, we have the following:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在那个 `ImgUploader` 组件的状态中，我们有以下内容：
- en: '[PRE17]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In these variables, we will store all the states of our components, depending
    on the current status and `props.articlePicUrl`, and we'll send the URL details
    up to the `AddArticleView` component (we will do it later in the chapter, after
    finishing the `ImgUploader` component).
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些变量中，我们将存储我们组件的所有状态，根据当前状态和 `props.articlePicUrl`，并将 URL 细节发送到 `AddArticleView`
    组件（我们将在本章稍后，在完成 `ImgUploader` 组件后完成）。
- en: Wrapping up the ImgUploader component
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结 `ImgUploader` 组件
- en: 'The next step is to improve the `uploadFinished` function in our `ImgUploader`,
    so find the old empty function:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是改进 `ImgUploader` 中的 `uploadFinished` 函数，所以找到旧的空函数：
- en: '[PRE18]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Replace it with the following:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 用以下内容替换它：
- en: '[PRE19]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: As you can see, the `uploadDetails.filename` variable comes from the `ReactS3Uploader`
    component, which we have imported on top of the `ImgUploader` file. After a successful
    upload, we set the `uploadProgress` back to `null`, set the details of our upload,
    and send back the details via the callback using `this.props.updateImgUrl(articlePicUrl)`.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，`uploadDetails.filename` 变量来自我们导入到 `ImgUploader` 文件顶部的 `ReactS3Uploader`
    组件。在上传成功后，我们将 `uploadProgress` 重置为 `null`，设置上传的详细信息，并通过回调使用 `this.props.updateImgUrl(articlePicUrl)`
    发送详细信息。
- en: 'The next step is to improve our `render` function in `ImgUploader`:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是改进 `ImgUploader` 中的 `render` 函数：
- en: '[PRE20]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This render is incomplete, but let''s describe what we have added so far. The
    code is simply all about getting information about `uploadProgress` via `this.state`
    (the first `if` statement). The `else if(this.state.articlePicUrl)` is all about
    rendering the image after the upload is complete. Okay, but where we will get
    that information? Here is the rest:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这个渲染过程还不完整，但让我们描述一下到目前为止我们已经添加了什么。代码主要是通过 `this.state`（第一个 `if` 语句）获取 `uploadProgress`
    的信息。`else if(this.state.articlePicUrl)` 是关于在上传完成后渲染图像的内容。好吧，但我们从哪里获取这些信息呢？下面是其余部分：
- en: '[PRE21]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The `uploaderJSX` variable is the exact same as our `react-s3-uploader` library.
    As you can see from the code, for progress, we set the state with `uploadProgress:
    { progressInPercent, uploadStatusText }` and we set up `uploadError: null` (in
    case the user receives an error message). On error, we set the state, so we can
    tell the user. On finish, we run the `uploadFinished` function, which was described
    in detail previously.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '`uploaderJSX` 变量与我们的 `react-s3-uploader` 库完全相同。从代码中可以看出，对于进度，我们使用 `uploadProgress:
    { progressInPercent, uploadStatusText }` 来设置状态，并设置 `uploadError: null`（以防用户收到错误消息）。在出错时，我们设置状态，以便告知用户。在完成时，我们运行
    `uploadFinished` 函数，该函数之前已经详细描述过。'
- en: 'The complete `render` function of `ImgUploader` will look as follows:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '`ImgUploader` 的完整 `render` 函数将如下所示：'
- en: '[PRE22]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: As you can see, this is the whole render of `ImgUploader`. We use an inline-styled
    `Paper` component (from `material-ui`), so the whole thing will look better to
    an article's end user/editor.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，这是`ImgUploader`的全部渲染。我们使用内联样式的`Paper`组件（来自`material-ui`），这样整个界面对于文章的最终用户/编辑来说会看起来更好。
- en: AddArticleView improvements
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AddArticleView改进
- en: 'We need to add the `ImgUploader` component to `AddArticleView`; first, we need
    to import it into the `src/views/articles/AddArticleView.js` file, like this:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要将`ImgUploader`组件添加到`AddArticleView`中；首先，我们需要将其导入到`src/views/articles/AddArticleView.js`文件中，如下所示：
- en: '[PRE23]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Next, in the constructor of `AddArticleView`, find this old code:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在`AddArticleView`的构造函数中找到以下旧代码：
- en: '[PRE24]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Change it to the following improved version:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 更改为以下改进版本：
- en: '[PRE25]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: As you can see, we have bound this to the `updateImgUrl` function and added
    a new state variable called `articlePicUrl` (by default, we will point to `/static/placeholder.png`
    in case a user doesn't choose a cover).
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们已经将其绑定到`updateImgUrl`函数，并添加了一个新的状态变量`articlePicUrl`（默认情况下，我们将指向`/static/placeholder.png`，以防用户没有选择封面）。
- en: 'Let''s improve the functions of this component:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们改进这个组件的功能：
- en: '[PRE26]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Change this code to the following:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 将此代码更改为以下内容：
- en: '[PRE27]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'As you can see, we have added `articlePicUrl: this.state.articlePicUrl` to
    the `newArticle` object. We have also introduced a new function called `updateImgUrl`,
    which is simply a callback that sets a new state with the `articlePicUrl` variable
    (in `this.state.articlePicUrl`, we keep the image URL of the current article that
    is going to be saved to the database).'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '如您所见，我们已经将`articlePicUrl: this.state.articlePicUrl`添加到`newArticle`对象中。我们还引入了一个名为`updateImgUrl`的新函数，它是一个简单的回调，用于设置一个新的状态，包含`articlePicUrl`变量（在`this.state.articlePicUrl`中，我们保留即将保存到数据库的当前文章的图片URL）。'
- en: 'The only thing to improve in `src/views/articles/AddArticleView.js` is our
    current render. Here is the old one:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在`src/views/articles/AddArticleView.js`中需要改进的只有我们当前的渲染。以下是旧版本：
- en: '[PRE28]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'We need to improve this code using `ImgUploader`:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要使用`ImgUploader`改进此代码：
- en: '[PRE29]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: You can see that we use the properties for sending down the current `articlePicUrl`
    (this will be handy later and also give us the default `placeholder.png` location)
    and the callback to update the `img` URL, called `updateImgUrl`.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到，我们使用属性发送当前的`articlePicUrl`（这将在以后很有用，并且也会给我们提供默认的`placeholder.png`位置）以及更新`img`
    URL的回调，称为`updateImgUrl`。
- en: 'If you visit `http://localhost:3000/add-article`, you will see a new image
    picker between the WYSIWYG box and the SUBMIT ARTICLE button (check the screenshot):'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您访问`http://localhost:3000/add-article`，您将在WYSIWYG框和提交文章按钮之间看到一个新图像选择器（查看截图）：
- en: '![](img/00076.jpeg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00076.jpeg)'
- en: 'Of course, if you followed all the instructions correctly, after clicking on
    Choose File, you will be able to upload a new image to the S3 bucket, and the
    image in the thumbnail will be replaced, as in the following example:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，如果您正确地遵循了所有指示，在点击选择文件后，您将能够上传新的图片到S3存储桶，缩略图中的图片将被替换，如下例所示：
- en: '![](img/00077.jpeg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00077.jpeg)'
- en: As you can see, we can upload an image. The next step is to unmock viewing them
    so we can see that our article has a dog on the cover (and the dog's image comes
    from our article collection in the DB).
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们可以上传图片。下一步是取消模拟查看，这样我们就可以看到我们的文章封面有一只狗（并且狗的图片来自数据库中的文章集合）。
- en: Some remaining tweaks for PublishingApp, ArticleCard, and DashboardView
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对PublishingApp、ArticleCard和DashboardView的一些剩余调整
- en: We can add an article. We need to unmock the image URLs in our views so we can
    see the real URL from the database (instead mocked in an `img src` property).
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以添加一篇文章。我们需要取消模拟视图中的图片URL，这样我们就可以看到数据库中的真实URL（而不是在`img src`属性中模拟）。
- en: 'Let''s start with `src/layouts/PublishingApp.js` and improve the old `_fetch`
    function:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从`src/layouts/PublishingApp.js`开始，改进旧版的`_fetch`函数：
- en: '[PRE30]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Replace this code with the following:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 将此代码替换为以下内容：
- en: '[PRE31]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: As you can see, we have started to fetch `articlePicUrl` via the `falcorModel.get`
    method.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们已经开始通过`falcorModel.get`方法获取`articlePicUrl`。
- en: 'The next step, also in the `PublishingApp` file, is to improve the `render`
    function, so you need to improve the following code:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步，同样在`PublishingApp`文件中，是改进`render`函数，因此您需要改进以下代码：
- en: '[PRE32]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Add to it a new property, which will pass down the image URL:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 向其中添加一个新的属性，该属性将传递图片URL：
- en: '[PRE33]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: As you can see, we are passing the fetched `articlePicUrl` to the `ArticleCard`
    component.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们正在将获取的`articlePicUrl`传递给`ArticleCard`组件。
- en: Improving the ArticleCard component
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 改进ArticleCard组件
- en: 'After we pass the `articlePicUrl` variable via properties, we need to improve
    the following (`src/components/ArticleCard.js`):'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们通过属性传递`articlePicUrl`变量之后，我们需要改进以下内容（`src/components/ArticleCard.js`）：
- en: '[PRE34]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Change it to the following:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 改成以下内容：
- en: '[PRE35]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: At the beginning of `render`, we use `let articlePicUrl = this.props.articlePicUrl
    || '/static/placeholder.png';`, and later, we use that in our image's JSX (`img
    src={articlePicUrl} height='190'`).
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在`render`的开始处，我们使用`let articlePicUrl = this.props.articlePicUrl || '/static/placeholder.png';`，稍后，我们在我们的图像的JSX中使用它（`img
    src={articlePicUrl} height='190'`）。
- en: 'After these two changes, you can see the article with a real cover, like this:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两个更改之后，您可以看到带有真实封面的文章，如下所示：
- en: '![](img/00078.jpeg)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00078.jpeg)'
- en: Improving the DashboardView component
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 改进DashboardView组件
- en: 'Let''s improve the dashboard with the cover, so in `src/views/DashboardView.js`,
    find the following code:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过封面改进仪表板，所以请在`src/views/DashboardView.js`中找到以下代码：
- en: '[PRE36]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Replace it with the following:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 用以下内容替换它：
- en: '[PRE37]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: As you can see, we have replaced the mocked placeholder with a real cover photo,
    so on our articles dashboard (which is available after login) we will find real
    images in the thumbnails.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们已经将模拟占位符替换为真实的封面照片，因此在我们的文章仪表板（在登录后可用）中，我们将找到真实的缩略图。
- en: Editing an article's cover photo
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编辑文章的封面照片
- en: 'Regarding the article''s photo, we need to make some improvements in the `src/views/articles/EditArticleView.js`
    file, such as importing `ImgUploader`:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 关于文章的照片，我们需要在`src/views/articles/EditArticleView.js`文件中做一些改进，例如导入`ImgUploader`：
- en: '[PRE38]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'After you have imported `ImgUploader`, improve the constructor of `EditArticleView`.
    Find the following code:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在您导入`ImgUploader`之后，改进`EditArticleView`的构造函数。找到以下代码：
- en: '[PRE39]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Replace it with the new, improved constructor:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 用以下改进的构造函数替换它：
- en: '[PRE40]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: As you can see, we have bound this to the new `updateImgUrl` function (which
    will be the `ImgUploader` callback), and we create a new default state for the
    `articlePicUrl`.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们已经将其绑定到新的`updateImgUrl`函数（它将是`ImgUploader`的回调），并为`articlePicUrl`创建了一个新的默认状态。
- en: 'The next step is to improve the current `_fetchArticleData` function:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是改进当前`_fetchArticleData`函数：
- en: '[PRE41]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Replace it with the following improved code:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 用以下改进的代码替换它：
- en: '[PRE42]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Here, we have added to an initial fetch some new `this.setState` variables,
    such as `articlePicUrl`, `contentJSON`, and `htmlContent`. The article fetch is
    here because we need to set up a cover in the `ImgUploader` of a current image
    that might potentially be changed. The `contentJSON` and `htmlContent` is here
    in case the user doesn't edit anything in the WYSIWYG editor and we need to have
    a default value from the database (otherwise, the edit button would save empty
    values into the database and break the whole editing experience).
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们在初始获取中添加了一些新的`this.setState`变量，例如`articlePicUrl`、`contentJSON`和`htmlContent`。文章获取在这里是因为我们需要在`ImgUploader`中设置一个可能被更改的当前图像的封面。`contentJSON`和`htmlContent`在这里是为了以防用户在WYSIWYG编辑器中没有进行任何编辑，我们需要从数据库中获取默认值（否则，编辑按钮会将空值保存到数据库中，并破坏整个编辑体验）。
- en: 'Let''s improve the `_articleEditSubmit` function. This is the old code:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们改进`_articleEditSubmit`函数。这是旧代码：
- en: '[PRE43]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Change to the following improved version:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 改成以下改进版本：
- en: '[PRE44]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The next step is to add a new function to the `EditArticleView` component:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是为`EditArticleView`组件添加一个新函数：
- en: '[PRE45]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'The last step in order to finish the article-editing cover is to improve the
    old render:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成文章编辑封面，最后一步是改进旧的渲染：
- en: '[PRE46]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Replace it with the following:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 用以下内容替换它：
- en: '[PRE47]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: As you can see, we have added `ImgUploader` and styled it exactly the same way
    as in `AddArticleView`. The rest of `ImgUploader` does the job for us in order
    to allow our users to edit article photos.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们已经添加了`ImgUploader`并将其样式设置为与`AddArticleView`中完全相同。`ImgUploader`的其余部分为我们完成工作，以便我们的用户可以编辑文章照片。
- en: '![](img/00079.jpeg)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00079.jpeg)'
- en: In this screenshot, you can see how the edit view should look after all the
    recent improvements.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个屏幕截图中，您可以看到经过最近的所有改进后编辑视图应该是什么样子。
- en: Adding the ability to add/edit the title and subtitle of an article
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加添加/编辑文章标题和副标题的功能
- en: 'In general, we shall improve the article''s model in the `server/configMongoose.js`
    file. Start by finding the following code:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，我们应在`server/configMongoose.js`文件中改进文章模型。首先找到以下代码：
- en: '[PRE48]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Replace it with the improved code, as follows:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 用以下改进的代码替换它，如下所示：
- en: '[PRE49]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: As you can see, we have added a lot of required properties in our model; this
    will affect the ability to save incomplete objects, so in general, our model will
    be more consistent throughout the life of our publishing app.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们在我们的模型中添加了许多必需的属性；这将影响保存不完整对象的能力，所以一般来说，我们的模型将在我们的发布应用的生命周期中保持一致性。
- en: We have also added a new property to our model called `articleSubTitle`, which
    we will be using later in this chapter.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还在我们的模型中添加了一个新的属性，名为 `articleSubTitle`，我们将在本章的后面使用它。
- en: AddArticleView improvements
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AddArticleView 的改进
- en: 'In general, we will add two `DefaultInput` components (title and subtitle),
    and the whole form will be using `formsy-react`, so in `src/views/articles/AddArticleView.js`,
    add new imports:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，我们将添加两个 `DefaultInput` 组件（标题和副标题），整个表单将使用 `formsy-react`，所以请在 `src/views/articles/AddArticleView.js`
    中添加新的导入：
- en: '[PRE50]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'The next step is to improve `async _articleSubmit`, so change the old code:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是改进 `async _articleSubmit`，所以更改旧代码：
- en: '[PRE51]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Replace it with the following:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 用以下内容替换它：
- en: '[PRE52]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: As you can see, we have added `articleModel` in the `_articleSubmit` arguments;
    this will come from `formsy-react`, the same way we implemented it in the `LoginView`
    and `RegisterView`. We have also added the `articleSubTitle` property to the `newArticle`
    object.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们在 `_articleSubmit` 参数中添加了 `articleModel`；这将从 `formsy-react` 中来，就像我们在
    `LoginView` 和 `RegisterView` 中实现的那样。我们还向 `newArticle` 对象中添加了 `articleSubTitle`
    属性。
- en: 'The old `render` function return looks like this:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 旧的 `render` 函数返回值如下：
- en: '[PRE53]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Change it to the following:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 更改为以下内容：
- en: '[PRE54]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Based on the changes in the Mongoose config and in the `AddArticleView` component,
    you are now able to add a title and subtitle to a new article, as in the following
    screenshot:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 根据 Mongoose 配置和 `AddArticleView` 组件的变化，你现在可以给新文章添加标题和副标题，如下截图所示：
- en: '![](img/00080.jpeg)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00080.jpeg)'
- en: We're still missing the ability to edit the title and subtitle, so let's implement
    that now.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 我们仍然缺少编辑标题和副标题的功能，所以现在让我们来实现它。
- en: Ability to edit an article title and subtitle
  id: totrans-242
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编辑文章标题和副标题的能力
- en: 'Go to the `src/views/articles/EditArticleView.js` file and add new imports
    (in a similar way to the `add` view):'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 前往 `src/views/articles/EditArticleView.js` 文件并添加新的导入（类似于 `add` 视图）：
- en: '[PRE55]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Improve the old `_articleEditSubmit` function from the current version:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 改进旧的 `_articleEditSubmit` 函数，从当前版本：
- en: '[PRE56]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Change it to the following:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 更改为以下内容：
- en: '[PRE57]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'As you can see, we do the same thing as in the `AddArticleView`, so you should
    be familiar with it. The last thing to do is update `render` so that we are able
    to input the title and subtitle that will be sent as a callback to `_articleEditSubmit`
    with data in the `articleModel`. The old return in the `render` function is as
    follows:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们和 `AddArticleView` 中做的是一样的事情，所以你应该熟悉它。最后要做的就是更新 `render`，以便我们能够输入将作为回调发送给
    `_articleEditSubmit` 的标题和副标题，数据在 `articleModel` 中。`render` 函数中的旧返回值如下：
- en: '[PRE58]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'The new improved return in the `render` function is as follows:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '`render` 函数中的新改进返回值如下：'
- en: '[PRE59]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: We are doing the same thing here as we did in the `AddArticleView`. We are introducing
    `Formsy.Form`, which is calling back the article's title and subtitle when a user
    hits the submit button (SUBMIT EDITION).
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里做的是和之前在 `AddArticleView` 中做的一样。我们引入了 `Formsy.Form`，当用户点击提交按钮（提交编辑）时，它会回调文章的标题和副标题。
- en: 'Here is an example of how it should look:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个示例，展示它应该如何看起来：
- en: '![](img/00081.jpeg)'
  id: totrans-255
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00081.jpeg)'
- en: ArticleCard and PublishingApp improvements
  id: totrans-256
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ArticleCard 和 PublishingApp 的改进
- en: 'Improve the `render` function in `ArticleCard` so it will also show the subtitle
    (currently, it''s mocked). The `src/components/ArticleCard.js` file''s old content
    is as follows:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 改进 `ArticleCard` 中的 `render` 函数，使其也能显示副标题（目前是模拟的）。`src/components/ArticleCard.js`
    文件中的旧内容如下：
- en: '[PRE60]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Let''s change this to the following:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将其更改为以下内容：
- en: '[PRE61]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: As you can see, we have defined a new `subTitle` variable and have then used
    it in the `CardHeader` and `CardMedia` components, so now it will show the subtitle
    as well.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们定义了一个新的 `subTitle` 变量，并在 `CardHeader` 和 `CardMedia` 组件中使用它，因此现在它也会显示副标题。
- en: 'Another thing to do is to make the `PublishingApp` also fetch the subtitle
    that has been introduced in the chapter, so we need to improve the following old
    code:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 另一件事是要让 `PublishingApp` 也获取本章中引入的副标题，因此我们需要改进以下旧代码：
- en: '[PRE62]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Replace it with the following:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 用以下内容替换它：
- en: '[PRE63]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: As you can see, we have started `falcorModel.get` with the `articleSubTitle`
    property.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们已经以 `articleSubTitle` 属性开始了 `falcorModel.get`。
- en: 'Of course, we need to pass this `subTitle` property to the `ArticleCard` component
    in the `PublishingApp` class''s `render` function:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们需要将这个`subTitle`属性传递给`PublishingApp`类中的`render`函数的`ArticleCard`组件：
- en: '[PRE64]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'In the end, we will get the following:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将得到以下结果：
- en: '[PRE65]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'After all these changes on the main page, you can find an edited article with
    the title, subtitle, cover photo, and content (created by our WYSIWYG editor):'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 在主页上所有这些更改之后，你可以找到一个带有标题、副标题、封面照片和内容（由我们的WYSIWYG编辑器创建）的编辑过的文章：
- en: '![](img/00082.jpeg)'
  id: totrans-272
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00082.jpeg)'
- en: Dashboard improvement (now we can strip the remaining HTML)
  id: totrans-273
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 仪表板改进（现在我们可以去除剩余的HTML）
- en: 'The last step in this chapter is to improve the dashboard. It will string the
    HTML from the props in order to make a better look and feel when a user will browse
    our application. Find the following code:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的最后一步是改进仪表板。它将根据props中的HTML进行字符串连接，以便在用户浏览我们的应用时有一个更好的外观和感觉。找到以下代码：
- en: '[PRE66]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Replace it with the following:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 用以下内容替换：
- en: '[PRE67]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'As you can see, we simply strip the HTML tags from the HTML so that we will
    get better `secondaryText` without the HTML markup, as in this example:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们只是从HTML中去除HTML标签，这样我们就会得到更好的`secondaryText`，没有HTML标记，就像这个例子一样：
- en: '![](img/00083.jpeg)'
  id: totrans-279
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00083.jpeg)'
- en: Summary
  id: totrans-280
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We have implemented all of the features that are within the book's scope. The
    next step is to start working on the deployment of this application.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经实现了书中涵盖的所有功能。下一步是开始部署这个应用。
- en: If you want to improve your coding skills, it's a good idea to implement some
    features completely on your own. These are some ideas for features that are still
    missing from our publishing app.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想提高你的编码技能，自己完全实现一些功能是个不错的主意。以下是我们发布应用中仍缺失的一些功能想法。
- en: We could have a separate link to a certain article so you can share it with
    a friend. This could be useful if you want to create a human-readable unique slug
    associated with a certain article in the database. So, instead of linking to something
    such as [http://reactjs.space/570b6e26ae357d391c6ebc1d](http://reactjs.space/570b6e26ae357d391c6ebc1d)
    (`reactjs.space` is a domain that we will use on our production server), a user
    can share a link such as [http://reactjs.space/an-article-about-a-dog](http://reactjs.space/an-article-about-a-dog).
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以有一个指向特定文章的单独链接，这样你就可以与朋友分享。如果你想在数据库中创建一个与特定文章相关的人可读的唯一slug，这可能很有用。所以，而不是链接到像[http://reactjs.space/570b6e26ae357d391c6ebc1d](http://reactjs.space/570b6e26ae357d391c6ebc1d)（`reactjs.space`是我们将在生产服务器上使用的域名）这样的东西，用户可以分享一个像[http://reactjs.space/an-article-about-a-dog](http://reactjs.space/an-article-about-a-dog)这样的链接。
- en: There could be a way to associate an article with the editor who posted it.
    Currently, it's mocked. You can unmock it.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 可能有一种方法可以将文章与发布它的编辑器关联起来。目前它是模拟的。你可以取消模拟。
- en: A user can't change their user details while they are logged in--this could
    be a good way to practice more full-stack development.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 用户在登录时无法更改他们的用户详情--这可能是一个练习更多全栈开发的不错方式。
- en: A user can't set up their avatar's image--you can add this feature in a similar
    way to how we implemented the image cover.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 用户无法设置他们的头像图片--你可以以我们实现图片封面类似的方式添加这个功能。
- en: Create a more robust Draft.JS WYSIWYG editor with plugins. Robust plugins are
    easy to implement for mentions, stickers, emoji, hashtags, undo/redo, and more.
    Visit [https://www.draft-js-plugins.com/](https://www.draft-js-plugins.com/) for
    more details about them. Implement one or two that you like the most.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个更健壮的带有插件的Draft.JS WYSIWYG编辑器。对于提及、贴纸、表情符号、标签、撤销/重做等功能，健壮的插件易于实现。访问[https://www.draft-js-plugins.com/](https://www.draft-js-plugins.com/)获取更多关于它们的信息。实现一个或两个你最喜欢的。
- en: In the next chapter, we will start deploying our MongoDB instance online using
    [www.mLab.com](http://www.mLab.com), which is a Database-as-a-Service provider
    and helps us build scalable MongoDB nodes with ease.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将开始使用[www.mLab.com](http://www.mLab.com)在线部署我们的MongoDB实例，它是一个数据库即服务提供商，帮助我们轻松构建可扩展的MongoDB节点。
- en: Let's start with the deployment fun!
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从部署的乐趣开始吧！
