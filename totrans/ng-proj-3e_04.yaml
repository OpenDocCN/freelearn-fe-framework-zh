- en: '4'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building a PWA Weather Application Using Angular Service Worker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can access a web application using different types of devices, such as a
    desktop, mobile, or tablet, and over various types of network, such as broadband,
    Wi-Fi, and cellular. A web application should work seamlessly and provide the
    same user experience independently of the device and the network of the user.
  prefs: []
  type: TYPE_NORMAL
- en: '**Progressive Web Apps (PWAs)** are applications built with a collection of
    techniques with the previous considerations in mind. One popular technique is
    the **service worker**, which improves the loading time of a web application.
    In this chapter, we will use the service worker implementation of the Angular
    framework to build a PWA that displays the weather of a city using the **OpenWeather
    API**.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the OpenWeather API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying weather data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling offline mode with the service worker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Staying up to date with in-app notifications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying our app with **Firebase Hosting**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Essential background theory and context
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Traditional web applications are usually hosted in a web server and are immediately
    available to any user at any given time. Native applications are installed on
    the device of the user, have access to its native resources, and can work seamlessly
    with any network. PWAs straddle the two worlds of web and native applications
    and share characteristics from both, summarized by the following pillars:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Capable**: It can access locally saved data and interact with peripheral
    hardware that is connected to the device of the user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reliable**: It can have the same performance and experience in any network
    connection, even in areas with low connectivity and coverage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Installable**: It can be installed on the device of the user, can be launched
    directly from the home screen, and interact with other installed native applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Converting a web application into a PWA involves several steps and techniques.
    The most essential one is configuring a service worker. The service worker is
    a mechanism that runs on the web browser and acts as a proxy between the application
    and an external HTTP endpoint or other in-app resources such as JavaScript and
    CSS files. The main job of the service worker is to intercept requests to those
    resources and act on them by providing a cached or live response.
  prefs: []
  type: TYPE_NORMAL
- en: The service worker is persisted after the tab of the browser is closed.
  prefs: []
  type: TYPE_NORMAL
- en: The Angular framework provides an implementation for the service worker that
    we can use to convert our Angular applications into PWAs.
  prefs: []
  type: TYPE_NORMAL
- en: It also contains a built-in HTTP client that we can use to communicate with
    a server over HTTP. The Angular HTTP client exposes an observable-based API with
    all standard HTTP methods, such as POST and GET. Observables are based on the
    **observer pattern**, the core of reactive programming. In the observer pattern,
    multiple objects called **observers** can subscribe to an observable and get notified
    about any changes to its state. Observables dispatch changes to observers by emitting
    event streams asynchronously. The Angular framework uses a library called **RxJS**
    that contains various artifacts for working with observables. One of these artifacts
    is a set of functions called **operators** that can apply various actions on observables,
    such as transformations and filtering. Next, let’s get an overview of our project.
  prefs: []
  type: TYPE_NORMAL
- en: Project overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this project, we will build a PWA to display the weather conditions of a
    city. Initially, we will learn how to configure the OpenWeather API, which we
    will use to get weather data. We will then learn how to use the API to display
    weather information in an Angular component. We will see how to convert our Angular
    application into a PWA using a service worker. We will also implement a notification
    mechanism for our application updates. Finally, we will deploy our PWA into the
    Firebase Hosting provider. The following diagram presents an architectural overview
    of the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Εικόνα που περιέχει διάγραμμα  Περιγραφή που δημιουργήθηκε αυτόματα](img/B18465_04_01.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.1 – Project architecture
  prefs: []
  type: TYPE_NORMAL
- en: 'Build time: 90 minutes'
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following software tools are required to complete this project:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Angular CLI**: A command-line interface for Angular that you can find at
    [https://angular.io/cli](https://angular.io/cli).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GitHub material**: The related code for this chapter can be found in the
    `Chapter04` folder at [https://github.com/PacktPublishing/Angular-Projects-Third-Edition](https://github.com/PacktPublishing/Angular-Projects-Third-Edition).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up the OpenWeather API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The OpenWeather team created the OpenWeather API, which contains current and
    historical weather information from over 200,000 cities worldwide. It also supports
    forecast weather data for more detailed information.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to get an API key first to start using the OpenWeather API:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the OpenWeather API website at [https://openweathermap.org/api](https://openweathermap.org/api).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will see a list of all available APIs from the OpenWeather team.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Find the **Current Weather Data** section and click the **Subscribe** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will be redirected to the page with the available pricing schemes of the
    service. Each scheme supports a different combination of API calls per minute
    and month. For this project, we are going to use the **Free** tier.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on the **Get API key** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will be redirected to the sign-up page of the service.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Complete all the required details and click the **Create Account** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A confirmation message will be sent to the email address you used to create
    your account.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Find the confirmation email and click the **Verify your email** button to complete
    your registration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will shortly receive another email from OpenWeather with details about your
    current subscription, including your API key and the HTTP endpoint you will use
    to communicate with the API.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The API key may take some time to be activated, usually a couple of hours before
    you can use it.
  prefs: []
  type: TYPE_NORMAL
- en: Once the API key has been activated, we can use it within an Angular application.
    We will learn how to do this in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying weather data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will create an Angular application to display weather information
    for a given city. The user will enter the name of the city in an input field,
    and the application will use the OpenWeather API to get weather data for the specified
    city. We will cover the following topics in more detail:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Angular application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Communicating with the OpenWeather API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying weather information for a city
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s start by creating the Angular application first in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Angular application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will use the `ng new` command of the Angular CLI to create a new Angular
    application from scratch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command will create a new Angular CLI application with the following
    properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`weather-app`: The name of the Angular application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--style=scss`: Indicates that our Angular application will use the SCSS stylesheet
    format'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--routing=false`: Disables Angular routing in the application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The user should be able to enter the name of the city in an input field, and
    the weather information of the city should be visualized in a card layout. The
    **Angular Material** library provides a set of UI components for our needs, including
    an input and a card.
  prefs: []
  type: TYPE_NORMAL
- en: 'Angular Material components adhere to the **Material Design** principles and
    are maintained by the **Components** team of Angular. We can install the Angular
    Material library using the following command of the Angular CLI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code uses the `ng add` command of the Angular CLI, passing additional
    configuration options:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@angular/material`: The npm package name of the Angular Material library.
    It will also install the **Angular CDK** package, a set of behaviors and interactions
    used to build Angular Material. Both packages will be added to the `dependencies`
    section of the `package.json` file of the application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--theme=indigo-pink`: The name of the Angular Material theme we want to use.
    Adding a theme involves modifying several files of the Angular CLI workspace.
    It adds entries of the CSS theme file to the `angular.json` configuration file:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'It also includes the Material Design icons in the `index.html` file:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Angular Material comes with a set of predefined themes that we can use. Alternatively,
    we can build a custom one that fits our specific needs.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`--animations=enabled`: Enables browser animations in our application by importing
    `BrowserAnimationsModule` into the main application module, `app.module.ts`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`--typography`: Enables Angular Material typography globally in our application.
    Typography defines how text content is displayed and uses the **Roboto** font
    by default, which is included in the `index.html` file:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'It adds the following class to the `<body>` tag of the HTML file:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'It also adds some CSS styles to the global `styles.scss` file of our application:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We now have all the moving parts to build our Angular application. In the following
    section, we will create a mechanism for interacting with the OpenWeather API.
  prefs: []
  type: TYPE_NORMAL
- en: Communicating with the OpenWeather API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The application should interact with the OpenWeather API over HTTP to get weather
    data. Let’s see how we can set up this type of communication in our application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we must create an interface describing the data type we will get from
    the API. Use the following command of the Angular CLI to create one:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding command will create the `weather.ts` file in the `src\app` folder
    of our Angular CLI project.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `weather.ts` file and modify it as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Each property corresponds to a weather field in the OpenWeather API response.
    You can find a description for each one at [https://openweathermap.org/current#parameter](https://openweathermap.org/current#parameter).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Then, we must set up the built-in HTTP client provided by the Angular framework.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `app.module.ts` file and add `HttpClientModule` to the `imports` array
    of the `@NgModule` decorator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the following command of the Angular CLI to create a new Angular service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding command will create the `weather.service.ts` file in the `src\app`
    folder of our Angular CLI project.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `weather.service.ts` file and inject the `HttpClient` service into
    its `constructor`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following properties to define the endpoint URL of the OpenWeather
    API and our API key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Replace the value of the `apiKey` property with the API key that you have.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add a method in the service that accepts the name of the city as a single parameter
    and queries the OpenWeather API for that city:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: The `getWeather` method uses the `get` method of the `HttpClient` service that
    accepts two parameters. The first one is the URL endpoint of the OpenWeather API.
    The second parameter is an `options` object used to pass additional configuration
    to the request, such as URL query parameters with the `params` property.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We use the constructor of the `HttpParams` object and call its `set` method
    for each query parameter we want to add to the URL. In our case, we pass the `q`
    parameter for the city name, the `appId` for the API key, and the type of `units`
    we want to use. You can learn more about supported units at [https://openweathermap.org/current#data](https://openweathermap.org/current#data).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We used the `set` method to create query parameters because the `HttpParams`
    object is immutable. Calling the constructor for each parameter you want to pass
    will throw an error.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We also set the response data type as `Weather` in the `get` method. Notice
    that the `getWeather` method does not return `Weather` data but instead an `Observable`
    of this type.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following `import` statements at the top of the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The Angular service that we created contains all the necessary artifacts for
    interacting with the OpenWeather API. In the following section, we will create
    an Angular component for initiating requests and displaying data from it.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying weather information for a city
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The user should be able to use the UI of our application and enter the name
    of a city for which they want to view weather details. The application will use
    that information to query the OpenWeather API, and the request result will be
    displayed on the UI using a card layout. Let’s start building an Angular component
    for creating all these types of interactions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the following command of the Angular CLI to create an Angular component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the template of the main component, `app.component.html`, and replace
    its content with the selector of the new component, `<app-weather>`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `app.module.ts` file and add the following modules from the Angular
    Material library to the `imports` array of the `@NgModule` decorator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Also, add the necessary `import` statements at the top of the file:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `weather.component.ts` file, create a `weather` property of the `Weather`
    type, and inject `WeatherService` into the `constructor` of the `WeatherComponent`
    class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a component method that subscribes to the `getWeather` method of `WeatherService`
    and assigns the result to the `weather` component property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We have already finished working with the TypeScript class file of our component.
    Let’s wire it up to its template. Open the `weather.component.html` file and replace
    its content with the following HTML code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding template consists of several components from the Angular Material
    library, including a `<mat-form-field>` component that contains the following
    child elements:'
  prefs: []
  type: TYPE_NORMAL
- en: An `<input>` HTML element for entering the name of the city. When the user has
    finished editing and presses the *Enter* key, it calls the `search` component
    method passing the value property of the `cityCtrl` variable as a parameter. The
    `cityCtrl` variable is a **template reference variable** and indicates the actual
    object of the native HTML `<input>` element.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `<mat-icon>` component displays a magnifier icon at the end of the input element,
    as indicated by the `matSuffix` directive. It also calls the `search` component
    method when clicked.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `cityCtrl` template reference variable is indicated by a `#` and is accessible
    everywhere inside the component template.
  prefs: []
  type: TYPE_NORMAL
- en: 'A `<mat-card>` component presents information in a card layout and is displayed
    only when the `weather` component property has a value. It consists of the following
    child elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<mat-card-header>`: The header of the card. It consists of a `<mat-card-title>`
    component that displays the name of the city and the country code and a `<mat-card-subtitle>`
    component that displays the current weather conditions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mat-card-image`: The image of the card that displays the icon of the weather
    conditions, along with a description as an alternate text.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<mat-card-content>`: The main content of the card. It displays the temperature,
    pressure, humidity, and wind speed of the current weather. The temperature is
    displayed without any decimal points, as indicated by the `number` pipe.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s now spice things up a bit by adding some styles to our component:'
  prefs: []
  type: TYPE_NORMAL
- en: '`weather.component.scss`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The `:host` selector is an Angular unique CSS selector that targets the HTML
    element hosting our component, which in our case, is the `<app-weather>` HTML
    element.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we run our application using `ng serve`, navigate to `http://localhost:4200`,
    and search for weather information in `Athens`, we should get the following output
    on the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18465_04_02.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.2 – Application output
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! Now, you have a fully working Angular application that displays
    weather information for a specific city. The application consists of a single
    Angular component that communicates with the OpenWeather API using an Angular
    service through HTTP. We learned how to style our component using Angular Material
    and give our users a pleasant experience with our app. But what happens when we
    are offline? Does the application work as expected? Does the user’s experience
    remain the same? Let’s find out in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling offline mode with the service worker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Users from anywhere can now access our Angular application to get weather information
    for any city they are interested in. When we say *anywhere*, we mean any network
    type, such as broadband, cellular (3G/4G/5G), and Wi-Fi. Consider the case where
    a user is in a place with low coverage or frequent network outages. How is our
    application going to behave? Let’s find out by experimenting:'
  prefs: []
  type: TYPE_NORMAL
- en: Run the Angular application using the `ng serve` command of the Angular CLI.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open your favorite browser and navigate to `http://localhost:4200`, the default
    address and port number for an Angular CLI project. You should see the input field
    for entering the name of the city:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Εικόνα που περιέχει κείμενο  Περιγραφή που δημιουργήθηκε αυτόματα](img/B18465_04_03.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.3 – Entering the name of a city
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the developer tools of your browser and navigate to the **Network** tab.
    Set the value of the **Throttling** dropdown to **Offline**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.3 – Offline network mode](img/B18465_04_04.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.4 – Offline network mode
  prefs: []
  type: TYPE_NORMAL
- en: 'Try to refresh your browser. You will see an indication that you are disconnected
    from the internet, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.4 – No internet connection (Google Chrome)](img/B18465_04_05.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.5 – No internet connection (Google Chrome)
  prefs: []
  type: TYPE_NORMAL
- en: The previous case is standard in areas with low-quality internet connections.
    So, what can we do for our users in such places? Luckily, the Angular framework
    contains an implementation of a service worker that can significantly enhance
    the UX of our application when running in offline mode. It can cache certain application
    parts and deliver them accordingly instead of making real requests.
  prefs: []
  type: TYPE_NORMAL
- en: The Angular service worker can also be used in environments with large network
    latency connections. Consider using a service worker in this type of network also
    to improve the experience of your users.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command of the Angular CLI to enable the service worker in
    our Angular application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command will transform the Angular CLI workspace accordingly
    for PWA support:'
  prefs: []
  type: TYPE_NORMAL
- en: It adds the `@angular/service-worker` npm package to the `dependencies` section
    of the `package.json` file of the application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It creates the `manifest.webmanifest` file in the `src` folder of the application.
    The manifest file contains information about the application needed to install
    and run it natively. It also adds it to the `assets` array of the `build` options
    in the `angular.json` file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It creates the `ngsw-config.json` file at the root of the project, which is
    the service worker configuration file. We use it to define configuration-specific
    artifacts, such as which resources are cached and how they are cached. You can
    find more details about the configuration of the service worker at the following
    link: [https://angular.io/guide/service-worker-config#service-worker-configuration](https://angular.io/guide/service-worker-config#service-worker-configuration).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The configuration file is also set in the `ngswConfigPath` property of the `build`
    configuration in the `angular.json` file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It sets the `serviceWorker` property to `true` in the `build` configuration
    of the `angular.json` file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It registers the service worker in the `app.module.ts` file:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `ngsw-worker.js` file is the JavaScript file that contains the actual implementation
    of the service worker. It is created automatically for us when we build our application.
    Angular uses the `register` method of the `ServiceWorkerModule` class to register
    it within our application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It creates several icons to be used when the application is installed as a native
    one on the device of the user.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It includes the manifest file and a `<meta>` tag for `theme-color` in the `<head>`
    element of the `index.html` file:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now that we have completed the service worker installation, it is time to test
    it! Before moving on, we should install an external web server because the built-in
    function of the Angular CLI does not work with service workers. A good alternative
    is **http-server**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the `install` command of the npm client to install `http-server`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding command will install `http-server` as a development dependency
    of our Angular CLI project.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Build the Angular application using the `ng build` command of the Angular CLI.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `package.json` file of the Angular CLI workspace and add the following
    entry to the `scripts` property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start the HTTP web server using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding command will start http-server at port 8080 and have caching disabled.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open your browser and navigate to `http://localhost:8080`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Prefer opening the page in private or incognito mode to avoid unexpected behavior
    from the service worker.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Repeat the process we followed at the beginning of the section for switching
    to offline mode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you refresh the page now, you will notice that the application is working
    as expected.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The service worker did all the work for us, and the process was so seamless
    that we could not tell whether we were online or offline. You can verify that
    by inspecting the **Network** tab:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.5 – Service worker (offline mode)](img/B18465_04_06.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 4.6 – Service worker (offline mode)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The **(ServiceWorker)** value in the **Size** column indicates that the service
    worker served a cached version of our application.
  prefs: []
  type: TYPE_NORMAL
- en: We have successfully installed the service worker and moved closer to converting
    our application into a PWA. In the following section, we will learn how to notify
    users of the application about potential updates.
  prefs: []
  type: TYPE_NORMAL
- en: Staying up to date with in-app notifications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we want to apply a change in a web application, we make the change and
    build a new version of our application. The application is then deployed to a
    web server, and every user can access the latest version immediately. But PWAs
    are different.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we deploy a new version of our PWA, the service worker must act accordingly
    and apply a specific update strategy. It should notify the user of the new version
    or install it immediately. Which update strategy we follow depends on our requirements.
    In this project, we want to show a prompt to the user and let them decide whether
    they want to update the app. Let’s see how to implement this feature in our application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `app.module.ts` file and add `MatSnackBarModule` to the `imports`
    array of the `@NgModule` decorator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`MatSnackBarModule` is an Angular Material module that allows us to interact
    with **snack** **bars**. A snack bar is a pop-up window that usually appears on
    the bottom of the page and is used for notification purposes.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `app.component.ts` file and add the `OnInit` interface to the implemented
    interfaces of the `AppComponent` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inject the `MatSnackBar` and `SwUpdate` services in the `constructor` of the
    `AppComponent` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `MatSnackBar` service is an Angular service exposed from `MatSnackBarModule`.
    The `SwUpdate` service is part of the service worker and contains observables
    that we can use to notify the user on the update process of our application.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create the following `ngOnInit` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `ngOnInit` method is an implementation method of the `OnInit` interface
    and is called upon component initialization. The `SwUpdate` service contains a
    `versionUpdates` observable property that we can use to get notified when a new
    version of our application is available. Typically, we tend to subscribe to observables,
    but in this case, we don’t. Instead, we subscribe to the `pipe` method, an RxJS
    operator for composing multiple operators.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following `import` statements at the top of the `app.component.ts`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'A lot is going on inside the `ngOnInit` method that we defined previously,
    so let’s break it down into pieces to understand it further. The `pipe` operator
    combines four RxJS operators:'
  prefs: []
  type: TYPE_NORMAL
- en: '`filter:` We use it to filter out any emitted values from the `versionUpdates`
    observable other than the one that indicates when the version is ready to be installed`.`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`switchMap`: This is called when a new version of our application is available.
    It uses the `open` method of the `snackbar` property to show a snack bar with
    an action button and subscribes to its `afterDismissed` observable. The `afterDismissed`
    observable emits when the snack bar is closed either by clicking the action button
    or programmatically using its API methods.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`filter`: This is called when the snack bar is dismissed using the action button.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`map`: This calls the `activateUpdate` method of the `updates` property to
    apply the new version of the application. Once the application has been updated,
    it reloads the browser window for the changes to take effect.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s see the whole process of updating to a new version in action:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command of the Angular CLI to build the Angular application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start the HTTP server to serve the application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open a private or incognito browser window and navigate to `http://localhost:8080`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Without closing the browser window, let’s introduce a change in our application
    and add a UI header. Run the `generate` command of the Angular CLI to create a
    component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `app.module.ts` file and import the following Angular Material modules:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `header.component.html` file and create a `<mat-toolbar>` component
    with two HTML `<button>` elements, each one containing a `<mat-icon>` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following CSS style to the `header.component.scss` file to position
    buttons at the far-right end of the header:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `app.component.html` file and add the `<app-header>` component at
    the top:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Repeat steps 1 and 2 and refresh the browser window that points to `http://localhost:8080`.
    You should see the following notification at the bottom of the page after a few
    seconds:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.6 – New version notification](img/B18465_04_07.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.7 – New version notification
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **Update now** button, wait for the browser window to reload,
    and you should see your change:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18465_04_08.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.8 – Application output
  prefs: []
  type: TYPE_NORMAL
- en: Our Angular application has begun to transform into a PWA one. Along with the
    caching mechanism that the Angular service worker provides, we have added a mechanism
    for installing new versions of our application. In the following section, we will
    learn how to deploy and install our application natively on our device.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying our app with Firebase Hosting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Firebase is a hosting solution provided by Google that we can use to deploy
    our Angular applications. The Firebase team has put much effort into creating
    an Angular CLI schematic for deploying an Angular application using one single
    command. Before diving deeper, let’s learn how to set up Firebase Hosting:'
  prefs: []
  type: TYPE_NORMAL
- en: Use a Google account to log in to Firebase at [https://console.firebase.google.com](https://console.firebase.google.com).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Add project** button to create a new Firebase project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the name of the project, `weather-app`, and click the **Continue** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Firebase generates a unique identifier for your project, such as *weather-app-b11a2*,
    underneath the name of the project. The identifier will be used in the hosting
    URL of your project later on.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Disable the use of **Google Analytics** for your project and click the **Create
    project** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the project has been created, the following will appear on the screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.8 – Firebase project creation](img/B18465_04_09.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.9 – Firebase project creation
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Continue** button, and you will be redirected to the dashboard
    of your new Firebase project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We have now completed the configuration of Firebase Hosting. It is now time
    to integrate it with our Angular application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command in a terminal window to install **Firebase tools**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following command in the same terminal window to authenticate with
    the Firebase CLI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, run the following command of the Angular CLI to install the `@angular/fire`
    npm package in your Angular CLI project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding command will find the latest version of the library and prompt
    us to install it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'First, it will ask what features of Firebase we want to enable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Ensure the `ng deploy -- hosting` option is selected, and press *Enter*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Then, it will ask us to select which Firebase account we want to use:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Ensure the account you used earlier is selected, and press *Enter*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the next question, we will choose the project with which we are going to
    deploy our application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Select the `weather-app` project that we created earlier and press *Enter*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Finally, we must choose the site that will host our application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Select the hosting website that we created earlier and press *Enter*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The previous process will modify the Angular CLI workspace accordingly to accommodate
    its deployment to Firebase:'
  prefs: []
  type: TYPE_NORMAL
- en: It will create a `.firebaserc` file in the root folder that contains details
    of the selected Firebase project.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It will create a `firebase.json` file in the root folder, which is the Firebase
    configuration file. The configuration file specifies settings such as the folder
    that will be deployed to Firebase and any rewrite rules.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The folder deployed by default is the `dist` output folder created by the Angular
    CLI when we run the `ng build` command.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: It will add a `deploy` target in the `angular.json` configuration file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To deploy the application, we only need to run a single Angular CLI command,
    and the Angular CLI will take care of the rest:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command will build and deploy the application to the selected
    Firebase project. Once deployment is complete, the Angular CLI will report back
    the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Project Console**: The dashboard of the Firebase project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hosting URL**: The URL of the deployed version of the application. It consists
    of the unique identifier of the Firebase project and the `.web.app` suffix that
    is added automatically from Firebase.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The service worker requires an application to be served with HTTPS to work properly
    as a PWA, except in the localhost that is used for development. Firebase hosts
    web applications with HTTPS by default.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have deployed our application, let’s see how we can install it
    as a PWA on our device:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the hosting URL and click on the **Install weather-app** button
    next to the address bar of the browser:![Εικόνα που περιέχει κείμενο  Περιγραφή
    που δημιουργήθηκε αυτόματα](img/B18465_04_10.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 4.10 – Installing the application (Google Chrome)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The installation button may be found in different locations in other browsers.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The browser will prompt us to install the application.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click the **Install** button, and the application will open as a native window
    on our device:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18465_04_11.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.11 – PWA
  prefs: []
  type: TYPE_NORMAL
- en: It will also install a shortcut for launching the application directly from
    our device. Congratulations! We now have a full PWA that displays weather information
    for a city.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we built a PWA that displays weather information for a given
    city.
  prefs: []
  type: TYPE_NORMAL
- en: Initially, we set up the OpenWeather API to get weather data and created an
    Angular application from scratch to integrate it. We learned how to use the built-in
    HTTP client of the Angular framework to communicate with the OpenWeather API.
    We also installed the Angular Material library and used some ready-made UI components
    for our application.
  prefs: []
  type: TYPE_NORMAL
- en: After creating the Angular application, we introduced the Angular service worker
    and enabled it to work offline. We learned how to interact with the service worker
    and provide notifications for updates in our application. Finally, we deployed
    a production version of our application into Firebase Hosting and installed it
    locally on our device.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn how to create an Angular desktop application
    with Electron, the big rival of PWAs.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Use the OpenWeather API to display a weekly forecast for the selected city.
    The OpenWeather API provides the **5 Day / 3 Hour Forecast** collection that can
    be used. The collection returns a forecast every 3 hours for each day, so, for
    a weekly forecast, you should just focus on the weather at 12:00pm each day. The
    forecast should be displayed as a grid list of card components and should be positioned
    below the current weather of the city.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the solution to the exercise in the `Chapter04` folder of the `exercise`
    branch at [https://github.com/PacktPublishing/Angular-Projects-Third-Edition/tree/exercise](https://github.com/PacktPublishing/Angular-Projects-Third-Edition/tree/exercise).
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'PWAs: [https://web.dev/progressive-web-apps](https://web.dev/progressive-web-apps)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'OpenWeather API: [https://openweathermap.org/api](https://openweathermap.org/api)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Angular Material: [https://material.angular.io](https://material.angular.io)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Angular HTTP client: [https://angular.io/guide/http](https://angular.io/guide/http)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Angular service worker: [https://angular.io/guide/service-worker-getting-started](https://angular.io/guide/service-worker-getting-started
    )'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Communicating with the Angular service worker: [https://angular.io/guide/service-worker-communications](https://angular.io/guide/service-worker-communications)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'HTTP server: [https://www.npmjs.com/package/http-server](https://www.npmjs.com/package/http-server)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Firebase Hosting: [https://firebase.google.com/docs/hosting](https://firebase.google.com/docs/hosting)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Deployment in Angular: [https://angular.io/guide/deployment#automatic-deployment-with-the-cli](https://angular.io/guide/deployment#automatic-deployment-with-the-cli)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
