- en: Lists - Display Simple Collection Data
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列表 - 显示简单集合数据
- en: 'In this chapter, you''ll cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将涵盖以下食谱：
- en: Using state to render list items
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用状态来渲染列表项
- en: List icons
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列表图标
- en: List avatars and text
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列表头像和文本
- en: List sections
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列表部分
- en: Nested lists
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 嵌套列表
- en: List controls
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列表控制
- en: Scrolling lists
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 滚动列表
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: The `List` component in Material-UI is used to render data collections. Lists
    are like tables, only simpler. If you need to display an array of users, for example, you
    can render them in a list, showing only the most relevant data, instead of several
    properties in a tabular format. Material-UI lists are generic and provide a lot
    of flexibility.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Material-UI中的`List`组件用于渲染数据集合。列表就像表格，但更简单。如果你需要显示用户数组，例如，你可以将它们渲染成列表，只显示最相关的数据，而不是在表格格式中显示多个属性。Material-UI列表是通用的，并提供了很多灵活性。
- en: Using state to render list items
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用状态来渲染列表项
- en: The data source used to render `List` components often comes from the state
    of your component. A collection—usually an array of objects—is mapped to `ListItem`
    components. As the objects in this array change, the Material-UI list items change
    on the screen.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 用于渲染`List`组件的数据源通常来自你的组件状态。一个集合——通常是一个对象数组——被映射到`ListItem`组件。当这个数组中的对象发生变化时，Material-UI列表项会在屏幕上相应地改变。
- en: How to do it...
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Let''s say that you have an array of three objects that you need to display
    as a list on one of your screens. You can add this array to the state of your
    component, then map each array item to a `ListItem` component. Here''s the code:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你有一个包含三个对象的数组，你需要将其显示在你的屏幕上的列表中。你可以将这个数组添加到你的组件状态中，然后将每个数组项映射到一个`ListItem`组件。以下是代码：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here''s what you''ll see when you first load the screen:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当你首次加载屏幕时，你会看到以下内容：
- en: '![](img/94276506-36f9-41c5-80a9-64c12c56496a.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/94276506-36f9-41c5-80a9-64c12c56496a.png)'
- en: How it works...
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Let''s start by looking at the `items` state:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从查看`items`状态开始：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The `name` property is the `primary` text, and the `timestamp` property is
    the `secondary` text for each list item. Next, let''s look at the `List` markup
    that transforms this state into rendered list items:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`name`属性是每个列表项的`primary`文本，而`timestamp`属性是每个列表项的`secondary`文本。接下来，让我们看看将这个状态转换为渲染列表项的`List`标记：'
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `ListItem` component has two Boolean properties passed to it – `button`
    and `dense`. The `button` property makes the list item behave like a button. For
    example, if you move your mouse pointer over an item in the list, you'll see the
    hover styles applied to it. The `dense` property removes extra padding from the
    list item. Without this property, the list takes up more space on the screen.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`ListItem`组件有两个布尔属性传递给它——`button`和`dense`。`button`属性使列表项表现得像一个按钮。例如，如果你将鼠标指针移到列表中的某个项上，你会看到应用于它的悬停样式。`dense`属性从列表项中移除了额外的填充。如果没有这个属性，列表在屏幕上会占用更多的空间。'
- en: The `ListItemText` component uses the `primary` and `secondary` properties to
    render the `name` and `timestamp` properties respectively. The `primary` text
    is meant to stand out relative to the `secondary` information displayed in the
    item – in this case, the `timestamp`.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`ListItemText`组件使用`primary`和`secondary`属性分别渲染`name`和`timestamp`属性。`primary`文本旨在相对于显示在项中的`secondary`信息脱颖而出——在这个例子中，是`timestamp`。'
- en: There's more...
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'This example could have used props instead of state, because the items never
    changed. Let''s modify it so that the user can select items from the list. Here''s
    what the new `List` markup looks like:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子原本可以使用属性而不是状态，因为列表中的项目从未改变。让我们修改它，以便用户可以从列表中选择项目。下面是新的`List`标记的样式：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `selected` property passed to the `ListItem` component will apply selected
    styles to the item when `true`. This value comes from the `item.selected` state,
    which is `false` by default for every item (nothing is selected). Next, the `ListItem`
    component has an `onClick` handler.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给`ListItem`组件的`selected`属性将在`true`时应用选中样式到该项。这个值来自`item.selected`状态，默认情况下每个项都是`false`（没有选中）。接下来，`ListItem`组件有一个`onClick`处理程序。
- en: The `ListItemText` component also has styles applied to it based on the selected
    state of the item. Behind the scenes, item text is rendered using the `Typography`
    component. You can use the `primaryTypographyProps` property to pass properties
    to the `Typography` component. In this case, you're changing the `color` of the
    text to `primary` when it's selected.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`ListItemText`组件也会根据项目的选择状态应用样式。在幕后，项目文本是通过`Typography`组件渲染的。你可以使用`primaryTypographyProps`属性将属性传递给`Typography`组件。在这种情况下，当项目被选中时，你正在将文本的`color`更改为`primary`。'
- en: 'Let''s look at the `onClick()` handler as follows:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看以下是如何处理`onClick()`处理器的：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This is a higher-order function, which returns an event handler function based
    on the `index` argument. It toggles the selected state for the item at the given
    index.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个高阶函数，它根据`index`参数返回一个事件处理函数。它切换给定索引处的项目选择状态。
- en: The `onClick` property isn't a `ListItem` property. It's a `button` property.
    Since you've set the `button` property to `true`, `ListItem` uses a `button` property
    and passes it to your `onClick` property.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`onClick`属性不是`ListItem`属性，而是`button`属性。由于你已经将`button`属性设置为`true`，`ListItem`使用`button`属性并将其传递给你的`onClick`属性。'
- en: 'Here''s what the list looks like when First Item is selected:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当选择第一个项目时，列表看起来是这样的：
- en: '![](img/7ae5643d-2472-454a-bd5a-0104eea6d755.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7ae5643d-2472-454a-bd5a-0104eea6d755.png)'
- en: The change to the background color is caused by the selected property of `ListItem`.
    The change to the text color is caused by the `primaryTypographyProps` property
    of `ListItemText`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 背景颜色的变化是由`ListItem`的`selected`属性引起的。文本颜色的变化是由`ListItemText`的`primaryTypographyProps`属性引起的。
- en: See also
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: '`List` demos: [https://material-ui.com/demos/lists/](https://material-ui.com/demos/lists/)'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`List`演示：[https://material-ui.com/demos/lists/](https://material-ui.com/demos/lists/)'
- en: '`Typography` API documentation: [https://material-ui.com/api/typography/](https://material-ui.com/api/typography/)'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Typography` API 文档：[https://material-ui.com/api/typography/](https://material-ui.com/api/typography/)'
- en: List icons
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列表图标
- en: '`ListItem` components have first-class support for icons. By rendering icons
    in each list item, you can make it clear to the user what types of objects are
    displayed in the list.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`ListItem`组件对图标有第一级支持。通过在每个列表项中渲染图标，你可以清楚地让用户知道列表中显示的对象类型。'
- en: How to do it...
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'Let''s say that you have an array of user objects that you want to render in
    a `List`. You could render each item with a user icon to make it clear what each
    item in the list is. The code for this is as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你有一个用户对象的数组，你想要在`List`中渲染这些对象。你可以为列表中的每个项目渲染一个用户图标，以便清楚地表明列表中的每个项目是什么。下面是这个功能的代码实现：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'When you load the screen, this is what the list should look like:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当你加载屏幕时，列表应该看起来是这样的：
- en: '![](img/8a97d33c-9391-4968-8c8a-f40ec04cd137.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8a97d33c-9391-4968-8c8a-f40ec04cd137.png)'
- en: How it works...
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The `ListItemIcon` component can be used as a child of `ListItem` components.
    In the previous example, it comes before the text, so it ends up to the left of
    the item text:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`ListItemIcon`组件可以用作`ListItem`组件的子组件。在上一个示例中，它位于文本之前，因此最终位于项目文本的左侧：'
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You could place the icon after the text as well:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以将图标放置在文本之后：
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Here''s how it looks:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是它的样子：
- en: '![](img/2e1235f3-5d00-43c5-923e-004d4bb25ea5.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2e1235f3-5d00-43c5-923e-004d4bb25ea5.png)'
- en: There's more...
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'You can mark `ListItem` components as selected by setting the `selected` property
    to `true`. You can also change the icon to give a better visual indication that
    an item has been selected. Here''s the updated code:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过将`selected`属性设置为`true`来标记`ListItem`组件为选中状态。你还可以更改图标，以更好地提供项目已选中的视觉指示。以下是更新后的代码：
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Here''s what the list looks like with First User selected:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这是选择第一个用户时列表的样子：
- en: '![](img/62929b69-1f2a-4163-8a45-8201860a0956.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/62929b69-1f2a-4163-8a45-8201860a0956.png)'
- en: 'The icon for the selected items changes into a circled checkmark. Let''s break
    down the changes that were introduced to make this happen, starting with the `MaybeSelectedIcon`
    component:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 选择项目的图标变为圆形勾选标记。让我们分析一下引入的更改，从`MaybeSelectedIcon`组件开始：
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This component will render either `CheckCircleOutlineIcon` or the `Icon` component
    that is passed in as a property. This depends on the `selected` property. Next,
    let''s look at how this component is used inside `ListItemIcon`:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 此组件将渲染`CheckCircleOutlineIcon`或作为属性传入的`Icon`组件。这取决于`selected`属性。接下来，让我们看看这个组件如何在`ListItemIcon`内部使用：
- en: '[PRE10]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: When a list item is clicked on, the `selected` state for that item is toggled.
    Then, the `selected` state is passed to `MaybeSelectedIcon`. The `AccountCircleIcon`
    component is the icon that's rendered when the list item isn't selected, because
    it's passed to the `Icon` property.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 当点击列表项时，该项目的`selected`状态会被切换。然后，`selected`状态会被传递给`MaybeSelectedIcon`。`AccountCircleIcon`组件是在列表项未被选中时渲染的图标，因为它被传递给了`Icon`属性。
- en: See also
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '`List` demos: [https://material-ui.com/demos/lists/](https://material-ui.com/demos/lists/)'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`List`演示：[https://material-ui.com/demos/lists/](https://material-ui.com/demos/lists/)'
- en: '`ListItemIcon` API documentation: [https://material-ui.com/api/list-item-icon/](https://material-ui.com/api/list-item-icon/)'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ListItemIcon` API 文档：[https://material-ui.com/api/list-item-icon/](https://material-ui.com/api/list-item-icon/)'
- en: List avatars and text
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列表头像和文本
- en: If your list items have `primary` and `secondary` text, using an icon on its
    own can be less visually appealing than with an avatar surrounding the icon. It
    fills the space within the list item better.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的列表项有`primary`和`secondary`文本，单独使用图标可能不如围绕图标的头像在视觉上吸引人。它更好地填充了列表项内的空间。
- en: How to do it...
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'Let''s say that you have four categories of messages that can be displayed
    by your app. To access a given category, the user clicks on one of the list items.
    To help the user understand the categories, you''ll use icons. And to make the
    icons stand out against the `primary` and `secondary` text of the list item, you''ll
    wrap it with an `Avatar` component. Here''s the code:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你的应用可以显示四种消息类别。要访问某个类别，用户点击列表中的一个项。为了帮助用户理解类别，你会使用图标。为了让图标在列表项的`primary`和`secondary`文本中脱颖而出，你会用`Avatar`组件包裹它。以下是代码：
- en: '[PRE11]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Here''s what the list looks like when rendered:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是列表渲染后的样子：
- en: '![](img/d61c49f7-3d39-4b51-8fbc-ca11ddcf042b.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d61c49f7-3d39-4b51-8fbc-ca11ddcf042b.png)'
- en: 'The circle that surrounds the icon is the `Avatar` component, and it helps
    the icon stand out. Here''s what this list looks like without avatars:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 围绕图标的圆圈是`Avatar`组件，它帮助图标脱颖而出。以下是这个没有头像的列表的样子：
- en: '![](img/696b5773-89c1-45a4-a07f-45fc82433fac.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/696b5773-89c1-45a4-a07f-45fc82433fac.png)'
- en: It's the same content and the same icons, but because of the height of the list
    item text, there's a lot of excess space surrounding the icon. The `Avatar` component
    helps fill this space while drawing attention to the icon.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 内容和图标都是相同的，但由于列表项文本的高度，图标周围有大量的多余空间。`Avatar`组件帮助填充这个空间，同时吸引人们对图标的注意。
- en: How it works...
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The `Avatar` component is used on icons with a circular shape. The color of
    the circle comes from the theme palette – the shade of grey used depends on whether
    the theme is light or dark. The icon itself is passed as the child element:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`Avatar`组件用于圆形形状的图标。圆圈的颜色来自主题调色板——使用的灰色阴影取决于主题是亮色还是暗色。图标本身作为子元素传递：'
- en: '[PRE12]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: There's more...
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'If you use an `Avatar` with the icons in your list items, you can change the
    color of the `Avatar` and you can apply a badge to indicate unacknowledged actions
    to be taken. Let''s modify the example so that each item in the items state can
    have a `notifications` property; that is, a number representing the number of
    unread messages for the category. If this number is greater than 0, you can change
    the `Avatar` color and display number of `notifications` in a badge. Here''s what
    the result looks like:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用`Avatar`在你的列表项中的图标，你可以改变`Avatar`的颜色，并且可以应用徽章来指示未确认的操作。让我们修改示例，使得`items`状态中的每个项都可以有一个`notifications`属性；即表示该类别未读消息数量的数字。如果这个数字大于0，你可以改变`Avatar`的颜色，并在徽章中显示通知数量。以下是结果的样子：
- en: '![](img/d35471a6-7ea4-4786-89ea-fae941c44423.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d35471a6-7ea4-4786-89ea-fae941c44423.png)'
- en: The first item in the list has an `Avatar` that's using the primary `theme`
    color and a badge showing the number of `notifications`. The rest of the items
    don't have any `notifications`, so the `Avatar` color uses the default, and the
    badge isn't displayed.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 列表中的第一个项有一个使用主要`theme`颜色和显示通知数量的徽章的`Avatar`。其余的项没有通知，所以`Avatar`颜色使用默认值，徽章不显示。
- en: 'Let''s see how this is done, starting with the styles:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这是如何实现的，从样式开始：
- en: '[PRE13]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The `activeAvatar` style is applied to the `Avatar` component when the `notifications`
    state is a number greater than 0\. It looks up the primary `theme` color based
    on the theme type (light or dark). Next, let''s look at the state of the first
    item in the items array:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 当`notifications`状态为一个大于0的数字时，`activeAvatar`样式会被应用到`Avatar`组件上。它会根据主题类型（浅色或深色）查找主要的`theme`颜色。接下来，让我们看看`items`数组中第一个项目的状态：
- en: '[PRE14]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Because the `notifications` value is `1`, the color of the avatar changes,
    and the badge is displayed. Lastly, let''s see how all of this comes together
    in the component markup using the `Badge` and `Avatar` components:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 因为`notifications`的值是`1`，所以头像的颜色会改变，徽章会显示。最后，让我们看看如何使用`Badge`和`Avatar`组件在组件标记中组合所有这些内容：
- en: '[PRE15]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The `color` property of `Badge` is based on the `notifications` state of the
    item being greater than 0\. If it is, the primary color is used. If it isn't,
    `undefined` is passed to `Badge`. In this case, this is necessary so that an empty
    badge circle doesn't show up when there aren't any notifications.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`Badge`的`color`属性基于项目`notifications`状态是否大于0。如果是，则使用主要颜色。如果不是，则将`undefined`传递给`Badge`。在这种情况下，这是必要的，这样当没有通知时，就不会显示空的徽章圆圈。'
- en: Passing `undefined` as a property value is equivalent to not setting the property
    at all.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 将`undefined`作为属性值相当于根本未设置该属性。
- en: Next, the `badgeContent` property is set based on the `notifications` state
    of the item. If it's not greater than 0, then you don't want any value set. Finally,
    setting the color of the `Avatar` component uses `clsx()` to apply the `activeAvatar`
    class if the `notifications` state for the item is greater than 0.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，根据项目的`notifications`状态设置`badgeContent`属性。如果它不大于0，那么你不想设置任何值。最后，设置`Avatar`组件的颜色时，如果项目的`notifications`状态大于0，则使用`clsx()`应用`activeAvatar`类。
- en: See also
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: '`Badge` demos: [https://material-ui.com/demos/badges/](https://material-ui.com/demos/badges/)'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Badge`演示：[https://material-ui.com/demos/badges/](https://material-ui.com/demos/badges/)'
- en: '`Avatar` demos: [https://material-ui.com/demos/avatars/](https://material-ui.com/demos/avatars/)'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Avatar`演示：[https://material-ui.com/demos/avatars/](https://material-ui.com/demos/avatars/)'
- en: '`List` demos: [https://material-ui.com/demos/lists/](https://material-ui.com/demos/lists/)'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`List`演示：[https://material-ui.com/demos/lists/](https://material-ui.com/demos/lists/)'
- en: List sections
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列表部分
- en: Once your lists have more than just a few items in them, you might want to consider
    organizing the items into sections. To do this, you split your lists into several
    smaller lists, which are stacked on top of one another with a divider in between
    them.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的列表中包含的不仅仅是几个项目时，你可能想要考虑将项目组织到部分中。为此，你将你的列表分成几个更小的列表，这些列表彼此堆叠，中间用分隔符隔开。
- en: How to do it...
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Let''s say that you have several list items that can be divided into three
    sections. You can use three `List` components to group your items into their respective
    sections, and use a `Divider` component to visually indicate the section boundary
    for the user. Here''s what the code looks like:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你有几个可以分成三个部分的项目。你可以使用三个`List`组件将你的项目分组到各自的区域，并使用`Divider`组件来向用户视觉上指示部分边界。以下是代码的样子：
- en: '[PRE16]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Here''s what the rendered list looks like:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是渲染后的列表看起来像什么：
- en: '![](img/ec27a12f-f55d-421a-b5e3-8991cbf43b87.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ec27a12f-f55d-421a-b5e3-8991cbf43b87.png)'
- en: How it works...
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Each section is its own `List` component, with its own `ListItem` components.
    The `Divider` component separates the lists. For example, the first section looks
    like this:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 每个部分都是一个独立的`List`组件，有自己的`ListItem`组件。`Divider`组件用于分隔列表。例如，第一个部分看起来是这样的：
- en: '[PRE17]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: There's more...
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'Instead of having a `Divider` component separate your list sections, you can
    use `Typography` to label your sections. This could help your users make sense
    of the items in each section:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`Typography`来标记你的部分，而不是使用`Divider`组件分隔你的列表部分。这可以帮助你的用户理解每个部分中的项目：
- en: '[PRE18]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Here''s what the list looks like now:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在列表看起来是这样的：
- en: '![](img/0b49890e-e663-4f48-ad56-a0cbd12cf698.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0b49890e-e663-4f48-ad56-a0cbd12cf698.png)'
- en: See also
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: '`List` demos: [https://material-ui.com/demos/lists/](https://material-ui.com/demos/lists/)'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`List`演示：[https://material-ui.com/demos/lists/](https://material-ui.com/demos/lists/)'
- en: '`Typography` API documentation: [https://material-ui.com/api/typography/](https://material-ui.com/api/typography/)'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Typography` API 文档：[https://material-ui.com/api/typography/](https://material-ui.com/api/typography/)'
- en: Nested lists
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 嵌套列表
- en: Lists can be nested. This is useful when you have a large number of items to
    render. Instead of showing everything all at once, you can only display those
    item categories. Then the user can click on these categories to display the items.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 列表可以嵌套。当你需要渲染大量项目时，这很有用。你不必一次性显示所有内容，而只需显示这些项目类别。然后用户可以点击这些类别来显示项目。
- en: How to do it...
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'Let''s say that you have two item categories. When the user clicks on a category,
    the items in that category should be displayed. Here''s the code to do this, by
    using the `List` component:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你有两个项目类别。当用户点击一个类别时，该类别中的项目应该显示出来。以下是通过使用 `List` 组件来实现此功能的代码：
- en: '[PRE19]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'When you first load the screen, you''ll see the following:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 当你首次加载屏幕时，你会看到以下内容：
- en: '![](img/b3b01e21-0be0-4c9c-a1aa-082685c016e1.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b3b01e21-0be0-4c9c-a1aa-082685c016e1.png)'
- en: 'If you click on each of these categories, you''ll see the following:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你点击每个这些类别，你会看到以下内容：
- en: '![](img/8f278173-7b83-4634-bcc2-b76537911c8b.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8f278173-7b83-4634-bcc2-b76537911c8b.png)'
- en: How it works...
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'When you click on a category, the down arrow icon changes to an up arrow. Beneath
    the category, the list items belonging to that category are displayed. Let''s
    break down what''s happening in this code, starting with the component state:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 当你点击一个类别时，向下箭头图标会变成向上箭头。在类别下方，显示属于该类别的列表项。让我们分析一下代码中发生的事情，从组件状态开始：
- en: '[PRE20]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Each object in the items array represents a list category. In this case, the
    categories are `Messages` and `Contacts`. The `Icon` property is the icon component
    to render for the category. The `expanded` property determines the state of the
    expand arrow icon, and whether or not the items in the category should be displayed.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 项目数组中的每个对象代表一个列表类别。在这种情况下，类别是 `Messages` 和 `Contacts`。`Icon` 属性是用于渲染类别的图标组件。`expanded`
    属性确定展开箭头图标的状态，以及类别中的项目是否应该显示。
- en: The `children` array contains the items that belong to the category. They have
    a `name` and an `Icon` property just like the category items, because they're
    all rendered using `ListItem` components.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`children` 数组包含属于该类别的项目。它们具有 `name` 和 `Icon` 属性，就像类别项目一样，因为它们都是使用 `ListItem`
    组件渲染的。'
- en: 'Next, let''s look at the markup used to render each category and its child
    items:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看用于渲染每个类别及其子项的标记：
- en: '[PRE21]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The category `ListItem` component has an `onClick` handler that toggles the
    `expanded` state of the category. Next, the `Collapse` component is used to control
    the visibility of the child items of the category, based on the value of `expanded`.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 类别 `ListItem` 组件有一个 `onClick` 处理器，用于切换类别的 `expanded` 状态。接下来，使用 `Collapse` 组件根据
    `expanded` 的值来控制类别子项的可见性。
- en: There's more...
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: You can improve on the appearance of your nested list by differentiating the
    appearance of the sub-items. Right now, the only difference between the category
    items and subitems is that the category items have expand and collapse arrows.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过区分子项的外观来改善嵌套列表的外观。目前，类别项目和子项之间的唯一区别是类别项目有展开和折叠箭头。
- en: 'Typically, list items are indented to indicate that they''re part of another
    item in the hierarchy. Let''s create a style that will allow you to indent subitems:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，列表项会缩进以表示它们是另一个项目层次结构的一部分。让我们创建一个样式，允许你缩进子项：
- en: '[PRE22]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The `paddingLeft` style property will shift everything in the list item to
    the right. Now, let''s apply this class to `subItem` while also making the item
    smaller than the category items:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '`paddingLeft` 样式属性会将列表项中的所有内容向右移动。现在，让我们将这个类应用到 `subItem` 上，同时使项目比类别项目更小：'
- en: '[PRE23]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'By adding the `dense` and the `className` properties to `ListItem`, your users
    should be more easily able to differentiate between the category and its subitems:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将 `dense` 和 `className` 属性添加到 `ListItem` 中，用户应该能够更容易地区分类别及其子项：
- en: '![](img/ca35d0b4-d02d-4886-b3e2-743e689d23ad.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ca35d0b4-d02d-4886-b3e2-743e689d23ad.png)'
- en: See also
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 相关内容
- en: '`List` demos: [https://material-ui.com/demos/lists/](https://material-ui.com/demos/lists/)'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`List` 示例：[https://material-ui.com/demos/lists/](https://material-ui.com/demos/lists/)'
- en: '`Collapse` API documentation: [https://material-ui.com/api/collapse/](https://material-ui.com/api/collapse/)'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Collapse` API 文档：[https://material-ui.com/api/collapse/](https://material-ui.com/api/collapse/)'
- en: List controls
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列表控件
- en: List items can be clickable, resulting in a change in state, or a link being
    followed, or something else entirely. This is the primary action of the item.
    You can have secondary actions on lists called controls. These are common actions
    that you might perform, depending on the type of item.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 列表项可以是可点击的，导致状态改变，或者跟随链接，或者完全是其他操作。这是项目的主要操作。你可以在列表上拥有次要操作，称为控件。这些是你可能会执行的一些常见操作，具体取决于项目的类型。
- en: How to do it...
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Let''s say that you have a list of devices. When you click on a list item,
    it might take you to a details page for the device. Each device has Bluetooth
    connectivity that can be toggled on or off. This is a good candidate secondary
    action to render in the item. Here''s the code to do this:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你有一个设备列表。当你点击列表项时，它可能会带你到设备的详细信息页面。每个设备都有可以开启或关闭的蓝牙连接。这是在项目中渲染的很好的候选次要操作。以下是实现此功能的代码：
- en: '[PRE24]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Here''s what the screen looks like when it first loads:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这是屏幕首次加载时的样子：
- en: '![](img/84d6128b-bdbc-489d-a004-910521d8d36d.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](img/84d6128b-bdbc-489d-a004-910521d8d36d.png)'
- en: 'You can toggle the Bluetooth state of one of the items by clicking on the icon
    buttons. Here''s what it looks like after toggling the Bluetooth state of the
    first item:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过点击图标按钮来切换其中一个项目的蓝牙状态。以下是切换第一个项目蓝牙状态后的样子：
- en: '![](img/18e9886d-4239-4341-b5e0-863729df9965.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![](img/18e9886d-4239-4341-b5e0-863729df9965.png)'
- en: The Bluetooth icon has changed to indicate the `disabled` state. Clicking on
    the icon again will enable Bluetooth.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 蓝牙图标已更改以表示 `disabled` 状态。再次点击图标将启用蓝牙。
- en: How it works...
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Let''s look at the markup that''s used to render each list item:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看用于渲染每个列表项的标记：
- en: '[PRE25]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The `ListItemSecondaryAction` component is used as a container for any controls
    in your list item. In this example, an `IconButton` is used as the control. It
    shows a different icon depending on the state of the item, using the `MaybeBluetoothIcon`
    component. The `onBluetoothClick()` function is used to return the event handler
    function for the item. Let''s take a look at this function:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '`ListItemSecondaryAction` 组件被用作列表项中任何控件的外壳。在这个例子中，`IconButton` 被用作控件。它使用 `MaybeBluetoothIcon`
    组件显示根据项目状态的不同图标。`onBluetoothClick()` 函数用于返回项目的处理函数。让我们看看这个函数：'
- en: '[PRE26]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The device item is looked up in the `items` array. Then, the Bluetooth state
    is toggled, and the new `items` array is returned to set as the new state. This
    results in the updated icon in the list item control.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `items` 数组中查找设备项。然后，切换蓝牙状态，并返回新的 `items` 数组以设置为新状态。这导致列表项控件中的图标更新。
- en: There's more...
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: You can have more than one control in your list item. For example, let's say
    that in addition to toggling the Bluetooth state of a device, another common action
    for your users is toggling the `power` state of the device. When the device is
    powered off, the list item and the Bluetooth control should be displayed.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在列表项中拥有多个控件。例如，假设除了切换设备的蓝牙状态外，用户还可能执行切换设备的 `power` 状态的常见操作。当设备关闭电源时，列表项和蓝牙控件应该显示。
- en: Avoid having too many controls as secondary actions in your list items. Doing
    so detracts from the convenience of having one or two common actions easily accessible
    by your users.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 避免在列表项中拥有太多的控件作为次要操作。这样做会减少用户轻松访问一两个常见操作的便利性。
- en: 'Let''s start by adding a new `power` state to each item in your component state:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从为你的组件状态中的每个项目添加一个新的 `power` 状态开始：
- en: '[PRE27]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Next, let''s create a toggle click handler that can handle updating both the
    Bluetooth and the `power` state of items:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们创建一个可以处理更新蓝牙和项目 `power` 状态的切换点击处理程序：
- en: '[PRE28]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'This is very similar to the `onBluetoothClick()` handler. Now, it accepts an
    additional `prop` argument. This is used to tell the function which property to
    update – `bluetooth` or `power`. Finally, let''s look at the updated `ListItem`
    markup:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 这与 `onBluetoothClick()` 处理程序非常相似。现在，它接受一个额外的 `prop` 参数。这用于告诉函数更新哪个属性 - `bluetooth`
    或 `power`。最后，让我们看看更新的 `ListItem` 标记：
- en: '[PRE29]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The changes can be summarized as follows:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 变更可以总结如下：
- en: The `disabled` property of `ListItem` depends on  the `power` state of the item.
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ListItem` 的 `disabled` 属性取决于项目的 `power` 状态。'
- en: There's another `IconButton` control for toggling the `power` state of the item.
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另有一个用于切换项目 `power` 状态的 `IconButton` 控件。
- en: The `onToggleClick()` function is used by both controls to toggle the state
    of the item.
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onToggleClick()` 函数被两个控件用来切换项目的状态。'
- en: 'Here''s how the screen looks now, when first loaded:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 这是首次加载时的屏幕外观：
- en: '![](img/a24567fe-1600-4059-a6b3-b60dd23d470e.png)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24567fe-1600-4059-a6b3-b60dd23d470e.png)'
- en: 'When you click on the power icon, the list item and the Bluetooth button become
    disabled. Here''s what it looks like when the first item is powered off:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 当你点击电源图标时，列表项和蓝牙按钮将变为禁用状态。以下是第一个项目关闭电源时的样子：
- en: '![](img/a714fd66-3ce9-44a2-9b34-e0f5b5f22682.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a714fd66-3ce9-44a2-9b34-e0f5b5f22682.png)'
- en: See also
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考也
- en: '`ListItemSecondaryAction` API documentation: [https://material-ui.com/api/list-item-secondary-action/](https://material-ui.com/api/list-item-secondary-action/)'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ListItemSecondaryAction` API文档：[https://material-ui.com/api/list-item-secondary-action/](https://material-ui.com/api/list-item-secondary-action/)'
- en: '`IconButton` API documentation: [https://material-ui.com/api/icon-button/](https://material-ui.com/api/icon-button/)'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`IconButton` API文档：[https://material-ui.com/api/icon-button/](https://material-ui.com/api/icon-button/)'
- en: Scrolling lists
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 滚动列表
- en: When your lists contain a limited number of items in them, you're safe to just
    iterate over the item data, and render `ListItem` components. This becomes a problem
    when you have the potential for lists with over 1,000 items in them. You can render
    these items fast enough, but having this many items in the **Document Object Model**
    (**DOM**) eats a lot of browser resources, and can lead to unpredictable performance
    challenges for the user. The solution is to virtualize your Material-UI lists
    using `react-virtualized`.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的列表中包含有限数量的项目时，你可以安全地遍历项目数据并渲染`ListItem`组件。当你有超过1,000个项目的列表时，这就会成为一个问题。你可以快速渲染这些项目，但这么多项目在**文档对象模型**（**DOM**）中会消耗大量的浏览器资源，并可能导致用户面临不可预测的性能挑战。解决方案是使用`react-virtualized`虚拟化你的Material-UI列表。
- en: How to do it...
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Let''s say that you have a list of 1,000 items in it. You want to render these
    items inside a list with a fixed height. In order to provide predictable performance
    characteristics for your users, you only want to render items that are actually
    visible to the user as they scroll through the list. Here''s the code:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你有一个包含1,000个项目的列表。你希望在具有固定高度的列表中渲染这些项目。为了为用户提供可预测的性能特性，你只想渲染用户在滚动列表时实际可见的项目。以下是代码：
- en: '[PRE30]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'When you first load the screen, you''ll see the following:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 当你首次加载屏幕时，你将看到以下内容：
- en: '![](img/968263e2-fde7-4907-9cee-79eafd2ab234.png)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![](img/968263e2-fde7-4907-9cee-79eafd2ab234.png)'
- en: 'As you scroll through the list, here''s what you''ll see:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 当你滚动浏览列表时，你将看到以下内容：
- en: '![](img/165daa3f-47fc-46df-bdf3-00593ab6c915.png)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![](img/165daa3f-47fc-46df-bdf3-00593ab6c915.png)'
- en: 'Lastly, here''s what the bottom of the list looks like:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，这是列表底部的样子：
- en: '![](img/c148fa82-2065-4378-ac8f-0dc5585ff994.png)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c148fa82-2065-4378-ac8f-0dc5585ff994.png)'
- en: How it works...
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'First, let''s take a look at how the `items` state is generated. First, there''s
    a `genItems()` generator function:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们看看`items`状态是如何生成的。首先，有一个`genItems()`生成器函数：
- en: '[PRE31]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Then, the spread operator is used to turn the generated `items` into an array
    for the component state:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，使用扩展运算符将生成的`items`转换为组件状态中的数组：
- en: '[PRE32]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Next, let''s look at the `rowRenderer()` function:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看`rowRenderer()`函数：
- en: '[PRE33]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: This function returns the `ListItem` component that should be rendered at the
    given index. Instead of manually mapping this component to `items`, the `List`
    component from `react-virtualized` orchestrates when to call it for you, based
    on how the user scrolls through the list.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数返回在给定索引处应渲染的`ListItem`组件。而不是手动将此组件映射到`items`上，`react-virtualized`中的`List`组件会根据用户如何滚动列表来为你安排调用它的时间。
- en: 'The `key` and the `style` values that are passed to this function are required
    by `react-virtualized` in order to work correctly. For example, the `style` value
    is used to control the visibility of the item as scrolling happens. The `isScrolling`
    value is used to render different data while the list is actively being scrolled.
    For example, imagine that instead of just a text label within the list item, you
    also had an icon, along with other controls that are all based on state. Trying
    to render these things while scrolling is going on is expensive and wasteful.
    Instead, you can render something that''s less resource intensive, such as a placeholder
    string: `''...''`.'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给此函数的`key`和`style`值是`react-virtualized`正确工作所必需的。例如，`style`值用于控制项目在滚动时的可见性。`isScrolling`值用于在列表被积极滚动时渲染不同的数据。例如，想象一下，在列表项中除了文本标签之外，你还有一个图标，以及其他所有基于状态的控制。在滚动过程中尝试渲染这些内容是昂贵且浪费的。相反，你可以渲染一些资源消耗较少的内容，例如占位符字符串：`'...'`。
- en: 'Finally, let''s examine the markup used to render this list:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们检查用于渲染此列表的标记：
- en: '[PRE34]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: The `List` component is the container for everything else. Next, the `AutoSizer`
    component from `react-virtualized` figures out the width of the list, which is
    needed as a `VirtualList` property.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '`列表`组件是其他所有内容的容器。接下来，`react-virtualized`中的`AutoSizer`组件确定列表的宽度，这是作为`VirtualList`属性所需的。'
- en: '`List` is imported from `react-virtualized` using the alias `VirtualList`.
    This is to avoid the naming conflict with `List` from `material-ui`. You could
    import `List` from `material-ui` as an alias instead, if you prefer.'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 使用别名`VirtualList`从`react-virtualized`导入`List`。这样做是为了避免与`material-ui`中的`List`命名冲突。如果你更喜欢，你也可以将`List`从`material-ui`导入为一个别名。
- en: The `List` component from `react-virtualized` also takes the height of the list,
    the height of each row, and the row count, in order to determine which rows to
    render. With this in place, you never have to worry about the performance of your
    application because of a list component with too many items.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '`react-virtualized`中的`List`组件还接受列表的高度、每行的高度和行数，以确定要渲染哪些行。有了这个，你永远不必担心由于列表组件包含太多项目而导致应用程序的性能问题。'
- en: See also
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: 'React Virtualized documentation: [https://bvaughn.github.io/react-virtualized/](https://bvaughn.github.io/react-virtualized/)'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: React Virtualized 文档：[https://bvaughn.github.io/react-virtualized/](https://bvaughn.github.io/react-virtualized/)
- en: '`List` demos: https://material-ui.com/demos/lists/'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`列表`演示：[https://material-ui.com/demos/lists/](https://material-ui.com/demos/lists/)'
