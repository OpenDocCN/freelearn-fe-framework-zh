- en: Chapter 13. Becoming an expert - Build an RSS Reader application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 13 章. 成为专家 - 构建一个 RSS 阅读器应用程序
- en: Now that you've been introduced to jQuery Mobile and its features, it's time
    to build our final, full application — an RSS Reader.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经了解了 jQuery Mobile 及其功能，是时候构建我们最终的完整应用程序了 —— 一个 RSS 阅读器。
- en: 'In this chapter, we will:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将：
- en: Discuss the RSS Reader application and its features
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 讨论 RSS 阅读器应用程序及其功能
- en: Create the application
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建应用程序
- en: Discuss what could be added to the application
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 讨论可以添加到应用程序的内容
- en: RSS Reader — the application
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: RSS 阅读器 —— 应用程序
- en: Before diving into the code, it may make sense to quickly demonstrate the application
    in its final working form so you can see the pieces and how they work together.
    The RSS Reader application is exactly that, an application meant to take RSS feeds
    (for example from CNN, ESPN, and other sites), parse them into readable data,
    and provide a way for the user to view the articles. This application will allow
    you to add and delete feeds, providing both a name and a URL, and then provide
    a way to view the current entries from the feed.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入代码之前，可能有必要快速展示应用程序的最终工作形式，以便您可以看到各个部分及其如何一起工作。RSS 阅读器应用程序就是这样一个应用程序，它旨在获取
    RSS 源（例如来自 CNN、ESPN 和其他网站的源），将它们解析为可读数据，并提供一种查看文章的方式。该应用程序将允许您添加和删除源，提供名称和 URL，并提供一种查看源当前条目的方法。
- en: 'The application begins with a basic set of instructions. These instructions
    are only visible when you run the application without any known feeds:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序始于一组基本说明。只有在您运行应用程序而没有任何已知源时才会显示这些说明：
- en: '![RSS Reader — the application](img/7263_13_1.jpg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![RSS 阅读器 — 应用程序](img/7263_13_1.jpg)'
- en: 'Clicking the **Add Feed** button brings you to a simple form allowing for both
    a name and a URL. (Unfortunately the URL has to be typed in manually. Luckily
    modern mobile devices allow for copy and paste. I''d strongly recommend using
    that!):'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 单击 **添加源** 按钮会带您进入一个简单的表单，允许输入名称和 URL。（不幸的是，URL 必须手动输入。幸运的是，现代移动设备支持复制和粘贴。我强烈建议使用这个！）：
- en: '![RSS Reader — the application](img/7263_13_2.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![RSS 阅读器 — 应用程序](img/7263_13_2.jpg)'
- en: 'After adding the feed, you are returned back to the home page. The following
    screenshot shows the view after a few feeds are added:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 添加源后，您将返回到主页。以下截图显示添加了一些源后的视图：
- en: '![RSS Reader — the application](img/7263_13_3.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![RSS 阅读器 — 应用程序](img/7263_13_3.jpg)'
- en: 'To begin reading entries, the user simply selects one of the feeds. This will
    then fetch the feed and display the current entries:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始阅读条目，用户只需选择其中一个源。然后，它将获取该源并显示当前的条目：
- en: '![RSS Reader — the application](img/7263_13_4.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![RSS 阅读器 — 应用程序](img/7263_13_4.jpg)'
- en: 'The final part of the application is the entry view itself. Some blogs don''t
    provide a "full" copy of the entry via RSS, and obviously you may want to comment
    on the blog itself. So, at the bottom we provide a simple way to hit the real
    web site, as shown in the following screenshot:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序的最后部分是入口视图本身。有些博客不会通过 RSS 提供“完整”的入口副本，显然您可能希望在博客本身发表评论。因此，在底部我们提供了一种简单的方法来访问真正的网站，如下图所示：
- en: '![RSS Reader — the application](img/7263_13_5.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![RSS 阅读器 — 应用程序](img/7263_13_5.jpg)'
- en: Now that you've seen the application, let's build it. Once again we're going
    to use PhoneGap Build to create the final result, but this application will actually
    run as is on a regular website as well. (We will discuss exactly why in a bit.)
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经看到了应用程序，让我们来构建它。我们将再次使用 PhoneGap Build 来创建最终结果，但这个应用程序实际上也可以在常规网站上运行。（我们将稍后讨论为什么。）
- en: Creating the RSS Reader Application
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 RSS 阅读器应用程序
- en: 'Our application begins with the first page, `index.html`. This page will load
    in jQuery and jQuery Mobile as well. Its core mission is to list your current
    feeds, but it has to recognize when the user has no feeds at all and provide a
    bit of text encouraging them to add their first feed:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序从第一个页面 `index.html` 开始。此页面将加载 jQuery 和 jQuery Mobile。它的核心任务是列出您当前的源，但它必须在用户没有任何源时识别出来，并提供一些文本鼓励他们添加他们的第一个源：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As mentioned before the code listing, we need to load up our jQuery and jQuery
    Mobile templates first. You can see that in the beginning of the previous code
    listing. Most of the rest of the page is boiler-plate HTML you've seen in the
    previous chapter, so let's call out a few specifics.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如代码清单前所述，我们需要首先加载 jQuery 和 jQuery Mobile 模板。您可以在前面的代码清单的开头看到这一点。页面的大部分是您在上一章中看到的模板
    HTML，所以让我们指出一些具体的内容。
- en: First make note of the introductory paragraph. Notice the CSS to hide the text?
    The assumption here is that — most of the time — the user won't need this text
    as they will have feeds. Our code then is going to handle showing it when necessary.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 首先注意下导语段落。注意 CSS 来隐藏文本吗？这里的假设是 — 大多数情况下 — 用户不会需要这段文字，因为他们会有订阅源。我们的代码将在必要时处理显示它。
- en: Following that paragraph is an empty list that will display our feeds. Right
    below that is the button that will be used for adding new feeds.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在该段落之后是一个空列表，将显示我们的 feeds。在下面是用于添加新 feeds 的按钮。
- en: Finally, we've got a bit of script at the end. This creates an event listener
    for the jQuery Mobile page event, `pagecreate`, that we tie into to then start
    up our application tasks.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们在最后放了一小段脚本。这创建了一个 jQuery Mobile 页面事件 `pagecreate` 的事件监听器，我们将它与启动我们的应用程序任务相关联。
- en: 'All of our code (our custom code that is) will be stored in `main.js`. This
    file is a bit big, so we''ll simply show parts of it that relate to each section.
    Please keep that in mind as we go through the chapter. The entire file can be
    found with the rest of the book''s sample code:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所有的代码（我们的自定义代码）都将存储在 `main.js` 中。这个文件有点大，所以我们只显示与每个部分相关的部分。在阅读本章时，请记住这一点。整个文件可以在书中的示例代码中找到：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Our first snippet from `main.js` comes from the `init` function. Remember this
    is run on `pagecreate` for the home page. It's run before the page shows up. That
    makes it a good place to go ahead and register a function for when the page is
    displayed. We've taken most of that logic out into its own function, so let's
    take a look at that next.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从 `main.js` 中的 `init` 函数开始。记住这个函数在首页的 `pagecreate` 上运行。它在页面显示之前运行。这使得它成为一个很好的地方去注册一个函数，用于页面显示时。我们已经将大部分逻辑提取到自己的函数中，所以接下来让我们来看看它。
- en: The displayFeeds function
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`displayFeeds` 函数'
- en: '`displayFeeds` handles retrieving our feeds and displaying them. The logic
    is simple. If there are no feeds, we want to display the introductory text:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`displayFeeds` 处理检索我们的 feeds 并显示它们。逻辑很简单。如果没有 feeds，我们想要显示导语文本：'
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Notice we also clean out the list. It's possible, a user had feeds and deleted
    them. By resetting the list to an empty string we ensure that we don't leave anything
    behind. If there are feeds, we create the list dynamically ensuring we call the
    `listview("refresh")` API at the end to ask jQuery Mobile to pretty up the list.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们还清空了列表。可能用户有 feeds 并删除了它们。通过将列表重置为空字符串，我们确保我们不留下任何东西。如果有 feeds，我们动态创建列表，确保在最后调用
    `listview("refresh")` API，请求 jQuery Mobile 对列表进行美化。
- en: Storing our feeds
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 存储我们的 feeds
- en: 'So where do the feeds come from? How do we store them? While we are using PhoneGap
    and could make use of the embedded SQLite database implementation, we can use
    something simpler `localStorage. localStorage` is an HTML5 feature that allows
    you to store key/value pairs on the client. While you can''t store complex data,
    you can use JSON serialization to encode complex data before it''s stored. This
    makes storage of data extremely simple. Do keep in mind though that `localStorage`
    involves file storage. Your application needs to read from a file whenever a change
    is made to the data. Since we are talking about a simple list of feeds, though,
    this data should be relatively small:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 那 feeds 是从哪里来的？我们如何存储它们？虽然我们正在使用 PhoneGap 并且可以使用嵌入式 SQLite 数据库实现，但我们可以使用更简单的东西
    `localStorage`。`localStorage` 是一个 HTML5 功能，允许你在客户端存储键值对。虽然你不能存储复杂的数据，但你可以在存储之前使用
    JSON 序列化来编码复杂的数据。这使得数据的存储非常简单。但请记住 `localStorage` 包含文件存储。当数据发生变化时，您的应用程序需要从文件中读取。尽管我们谈论的是一个简单的
    feed 列表，但这些数据应该相对较小：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The previous three functions represent the entire wrapper to our storage system.
    `getFeeds` simply checks `localStorage` for the value, and if it exists, handles
    converting the JSON data into a native JavaScript object. `addFeed` takes a feed
    name and URL, creates a simple object out of it, and stores the JSON version.
    Finally, the `removeFeed` function simply handles finding the right item in the
    array, removing it, and storing it back to `localStorage`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 前三个函数代表了我们存储系统的整个封装。`getFeeds` 简单地检查 `localStorage` 的值，如果存在，则处理将 JSON 数据转换为原生
    JavaScript 对象。`addFeed` 接受一个 feed 名称和 URL，创建一个简单的对象，并存储 JSON 版本。最后，`removeFeed`
    函数简单地处理找到数组中的正确项，删除它，并将其存储回 `localStorage`。
- en: Adding an RSS feed
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加一个 RSS feed
- en: 'So far so good. Now let''s look at the logic necessary to add a feed. If you
    remember, the link we used to add a feed went to `addfeed.html`. Let''s take a
    look at it:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 目前一切顺利。现在让我们看看添加 feed 所需的逻辑。如果你记得，我们用来添加 feed 的链接指向`addfeed.html`。让我们来看看它：
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: There isn't much to this page outside of the form. Note that our form has no
    action. We aren't using a server here. Instead our code is going to handle picking
    up the form submission and doing something with it. Also note that we've not done
    something we recommended earlier - putting the jQuery and jQuery Mobile includes
    on top. Those includes are necessary in desktop applications because it's possible
    the user may bookmark a page outside of your application's home page. Since the
    eventual target for this code is a PhoneGap application, we don't have to worry
    about that. This makes our HTML files a bit smaller. Now let's return to `main.js`
    and look at the code that handles this logic.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 除了表单外，这个页面没有太多内容。请注意，我们的表单没有 action。我们在这里不使用服务器。相反，我们的代码将处理表单提交并执行某些操作。还要注意，我们没有按照之前建议的做法——将
    jQuery 和 jQuery Mobile 包含在顶部。在桌面应用程序中，这些包含是必需的，因为用户可能会将页面添加到应用程序的主页之外的书签中。由于该代码的最终目标是
    PhoneGap 应用程序，我们不必担心这一点。这使得我们的 HTML 文件稍微小了一点。现在让我们返回到`main.js`，看看处理这一逻辑的代码。
- en: 'The following code is a snippet from the `init` method of `main.js`. It handles
    the button click on the form:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码是`main.js`的`init`方法的片段。它处理表单上的按钮点击：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now we can take a look at `handleAddFeed`. I''ve abstracted this code, just
    to make things simpler:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以看看`handleAddFeed`了。我已经将这段代码抽象出来，只是为了简化事情：
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: For the most part, the logic here should be simple to understand. We get the
    feed name and URL values, ensure they aren't blank, and optionally alert any error.
    If an error didn't occur, then we run the `addFeed` method described earlier.
    Notice we make use of the `changePage` API to return the user to the home page.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在大部分情况下，这里的逻辑应该很容易理解。我们获取 feed 名称和 URL 值，确保它们不为空，并可选地提醒任何错误。如果没有发生错误，那么我们运行之前描述的`addFeed`方法。请注意，我们使用`changePage`API
    返回用户到主页。
- en: 'I''ll call out one particular bit of code here, the line that handles displaying
    the error:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我在这里特别指出一段代码，处理显示错误的那一行：
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This line comes from the PhoneGap API. It creates a mobile-specific alert notification
    for your device. You can think of it as a fancier JavaScript `alert()` call. The
    second argument is a callback function for the alert window dismissal. Because
    we don't need to do anything in that situation, we provide an empty callback that
    does nothing.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行来自于 PhoneGap API。它为您的设备创建了一个针对移动设备的特定警报通知。你可以把它想象成一个更高级的 JavaScript `alert()`
    调用。第二个参数是警报窗口解除时的回调函数。因为我们在那种情况下不需要执行任何操作，所以我们提供了一个什么都不做的空回调。
- en: Viewing a feed
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查看 feed
- en: 'Moving on what happens when a user clicks to view a feed? This is probably
    the most complex aspect of the application. We begin with the HTML template, which
    is rather simple because most of the work is going to be done in JavaScript:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击查看 feed 时会发生什么？这可能是应用程序中最复杂的部分。我们从 HTML 模板开始，这相当简单，因为大部分工作将在 JavaScript
    中完成：
- en: '[PRE8]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This page basically acts as a shell. Note it has no real content at all, just
    empty HTML elements waiting to be filled. Let''s return to `main.js` and see how
    this works:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这个页面基本上充当一个外壳。请注意，它根本没有真正的内容，只是空的 HTML 元素等待填充。让我们返回到`main.js`，看看这是如何工作的：
- en: '[PRE9]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This first snippet handles listening for the `pageshow` event on `feed.html`.
    This means it will run every time the file is viewed, which is what we want since
    it is used for every different feed. How does that work? Remember that our list
    of feeds included an identifier for the feed itself:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码片段处理了对`feed.html`上的`pageshow`事件的监听。这意味着每次查看该文件时都会运行该代码，这正是我们想要的，因为它用于每个不同的
    feed。这是如何工作的？记得我们的 feeds 列表包括了 feed 本身的标识符：
- en: '[PRE10]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: jQuery Mobile provides us access to the URL via the data ("url") API. Since
    this returns the entire URL and we only care about stuff after the question mark,
    we can use some string functions to clean it up. The end result is a numeric value
    query, that we can use to fetch the data out of our feed query. In a regular desktop
    application it would be pretty simple for a user to mess with the URL parameters.
    Therefore, we'd do some checking here to ensure that the value requested actually
    exists. Since this is a single user application on a mobile device, it really
    isn't necessary to worry about that.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery Mobile通过数据（"url"）API为我们提供了对URL的访问。由于这会返回整个URL，而我们只关心问号后的内容，因此我们可以使用一些字符串函数来清理它。最终结果是一个数值查询，我们可以使用它来从我们的feed查询中提取数据。在常规的桌面应用程序中，用户很容易搞乱URL参数。因此，我们在这里进行一些检查，以确保请求的值确实存在。由于这是一个移动设备上的单用户应用程序，因此不需要担心这个问题。
- en: 'Before we try to fetch the feed, we make use of a simple caching system. The
    very first line in `main.js` creates an empty object:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们尝试获取feed之前，我们利用了一个简单的缓存系统。在 `main.js` 中的第一行创建了一个空对象：
- en: '[PRE11]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This object will store the results from our feeds so that we don''t have to
    constantly re-fetch them. That''s why the following line:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 此对象将存储我们的feeds结果，以便我们不必不断重新获取它们。这就是为什么有下面这行代码：
- en: '[PRE12]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: is run before we do any additional network calls. So how do we actually get
    the feed? Google has a cool service called the Feed API ([https://developers.google.com/feed/](https://developers.google.com/feed/)).
    It lets us use Google to handle fetching in the XML of an RSS feed and converting
    it to JSON. JavaScript can work with XML, but JSON is far easier since it becomes
    regular, simple JavaScript objects. We've got a bit of error handling, but if
    everything works well, we simply cache the result. The final bit is a call to
    `displayFeed:`
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们执行任何额外的网络调用之前运行。那么我们如何实际获取feed呢？Google有一个很酷的服务叫做Feed API（[https://developers.google.com/feed/](https://developers.google.com/feed/)）。它允许我们使用Google来处理获取RSS
    feed的XML并将其转换为JSON。JavaScript可以处理XML，但JSON更容易，因为它变成了常规的、简单的JavaScript对象。我们有一些错误处理，但如果一切顺利，我们只需缓存结果。最后一部分是对
    `displayFeed:` 的调用：
- en: '[PRE13]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: All that the previous block does is iterate over the result feed. When Google
    parsed the XML from the feed, it turned into an array of objects we can loop over.
    While there are a number of properties in the feed we may be interested in, for
    the list we care about the title only. Notice how we build our link. We pass the
    numeric index and the URL (which we will use in the next portion). This is then
    rendered to a simple jQuery Mobile listview.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码块只是迭代了结果feed。当Google解析feed中的XML时，它转换为我们可以循环的对象数组。虽然feed中有许多我们可能感兴趣的属性，但我们只关心标题。注意我们如何构建我们的链接。我们传递数值索引和URL（我们将在下一部分中使用）。然后，这被呈现为一个简单的jQuery
    Mobile listview。
- en: Creating the entry view
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建条目视图
- en: 'Ready for the last part? Let''s look at the individual entry display. As before,
    we''ll begin with the template:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好了最后一部分了吗？让我们来看看个别条目的显示。与之前一样，我们将从模板开始：
- en: '[PRE14]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Similar to `feed.html` before it, `entry.html` is an empty shell. Note that
    the header, the content, and the link are empty. All of these will be replaced
    with real code. Let''s head back to `main.js` and look at the code that handles
    this page:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前的 `feed.html` 类似，`entry.html` 是一个空壳。请注意，标题、内容和链接都是空的。所有这些都将被真实的代码替换。让我们返回到
    `main.js` 并查看处理此页面的代码：
- en: '[PRE15]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: So what's going on here? Remember that we passed an index value (which entry
    was clicked, the first, the second?) and the URL of the feed. We parse out those
    values from the URL. Once we know the URL of the feed, we can use our cache to
    get the specific entry. Once we have that, it's a simple matter to update the
    header, contents, and link. And that's it!
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 那么这里发生了什么？记得我们传递了一个索引值（点击了哪个条目，第一个，第二个？）和feed的URL。我们从URL中解析出这些值。一旦我们知道了feed的URL，我们就可以使用我们的缓存来获取特定的条目。一旦我们有了这个，更新标题、内容和链接就是一件简单的事情了。就是这样！
- en: Going further
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更进一步
- en: 'You can take the code from this application and upload it to the PhoneGap Build
    service now to try it out on your own device. But what else could we have done?
    Here''s a short list of things to consider:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以从此应用程序中获取代码，并将其上传到PhoneGap Build服务，以便在您自己的设备上尝试。但是我们还能做些什么？以下是考虑的一些事项：
- en: PhoneGap provides a connection API ([http://docs.phonegap.com/en/1.4.1/phonegap_connection_connection.md.html](http://docs.phonegap.com/en/1.4.1/phonegap_connection_connection.md.html))
    that returns information about the device's connection status. You could add support
    for this to prevent the user from trying to read a feed when the device isn't
    online.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PhoneGap 提供了一个连接 API（[http://docs.phonegap.com/en/1.4.1/phonegap_connection_connection.md.html](http://docs.phonegap.com/en/1.4.1/phonegap_connection_connection.md.html)），返回设备连接状态的信息。你可以添加对此的支持，以防止用户在设备离线时尝试阅读订阅。
- en: While we store the user's feeds in `localStorage`, the cached data from reading
    the RSS entry is stored temporarily. You could also store that data and use it
    when the user is offline.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虽然我们将用户的订阅存储在`localStorage`中，但从阅读 RSS 条目缓存的数据是临时存储的。你也可以存储这些数据，并在用户离线时使用它。
- en: 'PhoneGap has an excellent plugin API and a great variety of plugins are already
    available. ([https://github.com/phonegap/phonegap-plugins](https://github.com/phonegap/phonegap-plugins))
    One of these plugins allow for easier sending of SMS messages. You could add an
    option to send an entry title and link to a friend via SMS. Did we mention PhoneGap
    also lets you work with your contacts? See the Contacts API for more information:
    [http://docs.phonegap.com/en/1.4.1/phonegap_contacts_contacts.md.html](http://docs.phonegap.com/en/1.4.1/phonegap_contacts_contacts.md.html).'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PhoneGap 有一个出色的插件 API，并且已经有很多插件可用（[https://github.com/phonegap/phonegap-plugins](https://github.com/phonegap/phonegap-plugins)）。其中一个插件可以更轻松地发送短信。你可以添加一个选项，通过短信向朋友发送条目标题和链接。我们提到过
    PhoneGap 还让你可以使用你的联系人，详细信息请参见联系人 API：[http://docs.phonegap.com/en/1.4.1/phonegap_contacts_contacts.md.html](http://docs.phonegap.com/en/1.4.1/phonegap_contacts_contacts.md.html)。
- en: Hopefully you get the idea. This is only one example of the power of jQuery
    Mobile and PhoneGap.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你能明白。这只是 jQuery Mobile 和 PhoneGap 强大功能的一个例子。
- en: Summary
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we took what we had learned of PhoneGap from the previous chapter
    and created a full, if rather simple, mobile application making use of jQuery
    Mobile for design and interactivity.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们利用了上一章学到的 PhoneGap 知识，创建了一个完整但相当简单的移动应用程序，利用了 jQuery Mobile 来进行设计和交互。
