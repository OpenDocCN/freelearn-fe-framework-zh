- en: Chapter 6. React on the Server
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。React在服务器端
- en: In the previous chapter, we took a look at refactoring our components. We saw
    how to make use of mixins and extract similar functionalities to use seamlessly
    across components. We also took a look at DOM interactions, using refs, and related
    DOM actions from a component.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们查看了对组件的重构。我们看到了如何使用混入（mixins）提取相似的功能，以便在组件之间无缝使用。我们还查看了一下DOM交互，使用refs以及从组件中相关的DOM操作。
- en: In this chapter, we will explore how React functions on the server side. React
    allows us to render and handle components on the server to pre-render HTML, which
    is useful for several reasons. We will also take a look at how this affects the
    React component life cycle.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨React在服务器端的运行方式。React允许我们在服务器上渲染和处理组件，以预渲染HTML，这有几个原因很有用。我们还将看看这如何影响React组件的生命周期。
- en: 'In this chapter, we will cover the following points:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下要点：
- en: Server-side rendering
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器端渲染
- en: Render functions
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 渲染函数
- en: Server-side component life cycle
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器端组件生命周期
- en: At the end of chapter, we will be able to start using React components on the
    server side and understand its interactions and implications with the server side.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，我们将能够开始在服务器端使用React组件，并理解其与服务器端的交互和影响。
- en: Getting React to render on server
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让React在服务器上渲染
- en: '"Hey Shawn!" Mike startled Shawn, entering their workplace with a cup of coffee.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '"嘿，肖恩！" 迈克带着一杯咖啡闯入他们的工作场所，吓了肖恩一跳。'
- en: '"Good morning, Mike," replied Shawn.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '"早上好，迈克，”肖恩回答道。'
- en: Sun sparkled on Shawn's desk and they entered into a conversation about a new
    project that they were about to begin.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 阳光在肖恩的桌子上闪耀，他们开始讨论即将开始的新项目。
- en: '"Shawn, I just came to know, from Carla, about a new project that we need to
    take. The client has asked us to build a simple search page for our Open Library
    project."'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '"肖恩，我从卡拉那里刚刚得知，我们有一个新的项目需要承担。客户要求我们为我们的Open Library项目构建一个简单的搜索页面。"'
- en: Shawn and Mike had previously build an application to display recent changes
    from `openlibrary.com` API. They were now going to build a search application
    on top of Open Library's Search API.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 肖恩和迈克之前构建了一个应用程序，用于显示来自`openlibrary.com` API的最新更改。他们现在将基于Open Library的搜索API构建一个搜索应用程序。
- en: '"Awesome," Mike was excited about this. He was already loving working on React.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '"太棒了，”迈克对此兴奋不已。他已经非常喜欢在React上工作了。'
- en: '"Shawn, for this project, we will be exploring options on how to use React
    on the server."'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '"肖恩，对于这个项目，我们将探讨如何在服务器上使用React的选项。"'
- en: Until now, we have been manually mounting our components after page load. Until
    the component is rendered, the page doesn't have any HTML content from the component.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在页面加载后手动挂载我们的组件。直到组件被渲染，页面都没有任何来自组件的HTML内容。
- en: '"Let''s see how we will be doing this on the server so that HTML is pre-generated
    on the page instead of after the page has completely loaded."'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '"让我们看看我们如何在服务器上完成这项工作，以便在页面完全加载后预先生成HTML。"'
- en: '"Got it. How is rendering of components on server side useful though?"'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '"明白了。那么，服务器端组件的渲染有什么好处呢？"'
- en: '"It is useful for a couple of reasons. One being that we are generating content
    on the server. This is useful for SEO purpose and better indexing with search
    engines."'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '"这有几个有用的原因。其中一个原因是我们在服务器上生成内容。这对于SEO目的和更好的搜索引擎索引很有用。"'
- en: '"As the content is generated on the server, the first render would display
    the page immediately instead of waiting for the page load to properly finish,
    after which the component would be rendered."'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '"由于内容是在服务器上生成的，第一次渲染将立即显示页面，而不是等待页面加载完全完成后才正确渲染组件。"'
- en: '"This also helps us to avoid a flicker effect on our page loads. There are
    other such niceties that we can harness, we''ll explore them later," Mike explained.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '"这也帮助我们避免了页面加载时的闪烁效果。还有其他这样的优点我们可以利用，我们将在稍后探讨，”迈克解释道。'
- en: '"Cool. Let''s begin then."'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '"好。那我们就开始吧。"'
- en: '"Alright! For this project, let''s begin with a starter Webpack Project to
    manage our code. For the server element, we will be using Express JS. We won''t
    be doing anything complex here, we will simply expose a route from Express JS
    and render a `.ejs` view that consists of our component."'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '"好的！对于这个项目，让我们从一个入门Webpack项目开始，以管理我们的代码。对于服务器端元素，我们将使用Express JS。我们在这里不会做任何复杂的事情，我们只是简单地从Express
    JS中暴露一个路由，并渲染一个包含我们的组件的`.ejs`视图。"'
- en: '"An example of such a starter project can be found on the [http://webpack.github.io/](http://webpack.github.io/)
    website," informed Mike.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '"这样的入门级项目示例可以在[http://webpack.github.io/](http://webpack.github.io/)网站上找到，"迈克告知。'
- en: '"Cool, I think we will divide the code on client/server side as well?"'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '"很好，我想我们也会在客户端/服务器端划分代码？"'
- en: '"Yes. Let''s put them under the `/app` directory to consist our components,
    `/client` for client-specific code, and `/server` for the code to be used on server
    in our `/src` directory," continued Mike.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '"是的。让我们将它们放在`/app`目录下以组成我们的组件，`/client`用于客户端特定的代码，`/server`用于我们`/src`目录中的服务器端代码，"迈克继续说道。'
- en: '"Next, we will be setting up the `server.js` file in `/app/server` directory."'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '"接下来，我们将在`/app/server`目录中设置`server.js`文件。"'
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '"That''s a pretty standard Express App setup. We are specifying the styles
    to be used, static assets path, and so on."'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '"这是一个相当标准的Express应用程序设置。我们指定了要使用的样式，静态资源路径等等。"'
- en: '"For our route, we are simple exposing the root `/` by doing this:"'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '"对于我们的路由，我们通过这样做来简单地暴露根`/`："'
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '"We are asking Express to serve the `index.html` file on request to root. In
    our `index.js` file, which we will be passing to node to run the application,
    we will simply expose the server module that we just wrote."'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '"我们要求Express在请求根目录时服务`index.html`文件。在我们的`index.js`文件中，我们将将其传递给node以运行应用程序，我们只需简单地暴露我们刚刚编写的服务器模块。"'
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '"Mike, why do we require babel/register here?"'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '"迈克，为什么在这里需要`babel/register`？"'
- en: '"Oh right. Here, we require Babel ([http://babeljs.io/](http://babeljs.io/))
    to convert our files to browser-compatible format. We are using some JavaScript
    ES2015 syntax goodness. Babel helps us to add support for the latest version of
    JavaScript through syntax transformers. This allows us to use the latest JavaScript
    syntax, which is not supported by browsers right now."'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '"哦，对了。在这里，我们引入Babel([http://babeljs.io/](http://babeljs.io/))将我们的文件转换为浏览器兼容的格式。我们正在使用一些JavaScript
    ES2015语法的好处。Babel通过语法转换器帮助我们添加对JavaScript最新版本的支持。这允许我们使用目前浏览器不支持的最新的JavaScript语法。"'
- en: '"With this setup, we will define our `index.html` as:"'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '"有了这个设置，我们将定义我们的`index.html`如下："'
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '"Nothing much is going on over here. We are simply defining a single div on
    top of which we will be rendering the React component."'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '"这里没有什么特别的。我们只是在顶部定义一个div，我们将在其上渲染React组件。"'
- en: '"Also, notice that we have included links to the files to add Bootstrap and
    Font Awesome support to our app."'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '"此外，请注意，我们已经包含了添加Bootstrap和Font Awesome支持到我们的应用程序的文件链接。"'
- en: '"Next, on the client-side render handling, we would be doing"'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '"接下来，在客户端渲染处理方面，我们将做"'
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '"Finally, let''s see how the `App` class defined here is used before moving
    to our actual component."'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '"最后，让我们在移动到我们的实际组件之前看看这里定义的`App`类是如何使用的。"'
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '"Wow, that''s a lot to sink in," exhaled Shawn.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '"哇，这需要消化很多东西，"肖恩叹了口气。'
- en: '"Hah! Give it some time. What we are doing here is simply taking care of our
    rendering logic. If we pass an element to this class, contents are rendered onto
    it; otherwise, we will return the rendered string version. Notice how we are using
    `React.renderToString` to achieve the same. Let''s complete this first and we
    will then revisit it when we will be using it to render the contents on the server
    request."'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '"哈哈！给它一些时间。我们在这里所做的只是处理我们的渲染逻辑。如果我们向这个类传递一个元素，内容将被渲染到它上面；否则，我们将返回渲染后的字符串版本。注意我们是如何使用`React.renderToString`来实现相同功能的。让我们先完成这个，然后我们将在使用它来在服务器请求上渲染内容时再次回顾它。"'
- en: '"In a nutshell, we are just asking React to take in a state for a component,
    render it, and return the contents that would be rendered from the `render()`
    method as a string."'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '"简而言之，我们只是要求React接收一个组件的状态，渲染它，并将`render()`方法将渲染的内容作为字符串返回。"'
- en: '"We will then start by defining our root container component."'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '"然后我们将开始定义我们的根容器组件。"'
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '"Here, we simply define a container to hold our main component and require
    all our dependencies. Let''s start building our Search Component next."'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '"在这里，我们简单地定义一个容器来存放我们的主组件，并引入所有依赖。让我们接下来构建我们的搜索组件。"'
- en: '"Awesome. I think I can take that up. Looks like this will just be a simple
    component?"'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '"太棒了。我想我可以处理这个。看起来这只是一个简单的组件？"'
- en: '"Yup. Go ahead," replied Mike.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '"是的。继续吧，"迈克回应道。'
- en: '"Ok, I see that we would be needing to fetch data from the Open Library API
    endpoint."'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '"好的，我明白了我们需要从Open Library API端点获取数据。"'
- en: '[https://openlibrary.org/search.json?page=1&q=searchTerm](https://openlibrary.org/search.json?page=1&q=searchTerm)'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://openlibrary.org/search.json?page=1&q=searchTerm](https://openlibrary.org/search.json?page=1&q=searchTerm)'
- en: '"Here the `q` query parameter will be the search term. An example response
    looks like:"'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '"在这里，`q` 查询参数将是搜索词。一个示例响应看起来像："'
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '"Right," added Mike.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '"没错，" Mike 补充说。'
- en: '"I think I will start by defining the initial status based on the `start`,
    `num_found`, and `docs` fields," said Shawn'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '"我想我会从根据 `start`、`num_found` 和 `docs` 字段定义初始状态开始，" Shawn 说'
- en: '"Okay."'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '"好的。"'
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '"I also added two other states that I will maintain: `searchCompleted` to know
    whether the current search operation has completed or not and `searching` to know
    that we are currently searching something."'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '"我还添加了两个其他状态，我将保持它们：`searchCompleted` 以知道当前搜索操作是否已完成，以及 `searching` 以知道我们目前正在搜索某物。"'
- en: '"Cool. Let''s see the render method next," continued Mike.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '"酷。让我们看看下一个渲染方法，" Mike 继续说。'
- en: '"Let me start by adding the search box in the `render` method."'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '"让我先在 `render` 方法中添加搜索框。"'
- en: '[PRE9]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '"We should now have a display for the search box."'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '"我们现在应该有一个搜索框的显示。"'
- en: '![Getting React to render on server](img/4730_06_01.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![在服务器上使 React 渲染](img/4730_06_01.jpg)'
- en: '"Next, we will add the `performSearch` method that initiates searching based
    on the search term entered by the user."'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '"接下来，我们将添加 `performSearch` 方法，它基于用户输入的搜索词启动搜索。"'
- en: '[PRE10]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '"Here, we are simply fetching the search term entered by the user and passing
    it to the `openLibrarySearch` method, which will actually perform the search.
    Then, we update the state that we are actively performing a search now."'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '"在这里，我们只是获取用户输入的搜索词，并将其传递给 `openLibrarySearch` 方法，它将实际执行搜索。然后，我们更新状态，表明我们现在正在积极执行搜索。"'
- en: '"Let''s complete the search functionality now."'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '"现在让我们完成搜索功能。"'
- en: '[PRE11]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '"Ah, nice Shawn, you are using `fetch` instead of regular Ajax!"'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '"啊，好，Shawn，你正在使用 `fetch` 而不是常规的 Ajax！"'
- en: '"Huh, yeah. I have been using [https://github.com/github/fetch](https://github.com/github/fetch)
    as a polyfill for the `window.fetch` specification."'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '"嗯，是的。我一直在使用 [https://github.com/github/fetch](https://github.com/github/fetch)
    作为 `window.fetch` 规范的 polyfill。"'
- en: '"Nice, isn''t it? It supports simple and clean API, such as Ajax, and a unified
    fetching API."'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '"不错，不是吗？它支持简单且干净的 API，如 Ajax，以及统一的获取 API。"'
- en: After fetching of some resource or request completion, the callbacks fall through
    this are defined by the `then` method. Notice that we have also used ES2015 string
    literal to build the URI," added Shawn.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在获取某些资源或请求完成后，回调会通过 `then` 方法执行。注意，我们还在构建 URI 时使用了 ES2015 字符串字面量，" Shawn 补充说。
- en: '"Cool. Looks like you are fetching the resource, then passing it to `parseJSON`
    to parse and return the JSON result from the response body. Then, are we updating
    the state on top of it?"'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '"酷。看起来你正在获取资源，然后将其传递给 `parseJSON` 以解析并从响应体中返回 JSON 结果。然后，我们是否在它之上更新状态？"'
- en: '"Yes, let me define those"'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '"是的，让我定义那些"'
- en: '[PRE12]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '"After getting the final response, I am updating and setting the state to result
    that is returned as well as updating our `searchCompleted` and searching states
    to indicate the searching job is done."'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '"在获取最终响应后，我正在更新和设置返回的结果状态，以及更新我们的 `searchCompleted` 和 `searching` 状态，以表明搜索工作已完成。"'
- en: '"Ah, nice Shawn, I see that you have started adopting and using new features
    from JS Next!, like the `spread` operator."'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '"啊，好，Shawn，我看到你已经开始采用并使用 JS Next! 的新特性，比如 `spread` 操作符。"'
- en: '"Haha, yeah. I''ve fallen in love with these. I am using this to merge the
    properties of the JSON result with the new keys that I want to add and build a
    new object. This would also be done similarly using `Object.assign` that we previously
    saw."'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '"哈哈，是的。我已经爱上了这些。我正在使用这个来合并 JSON 结果的属性和我想添加的新键，并构建一个新的对象。这也会使用我们之前看到的 `Object.assign`
    以类似的方式完成。"'
- en: '[PRE13]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '"That way, we are building a new object instead of mutating a previous one."'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '"这样，我们是在构建一个新的对象，而不是修改先前的对象。"'
- en: '"Nice Shawn," Mike was happy knowing that Shawn was getting hang of the new
    things.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '"Shawn 很棒，Mike 愉快地知道 Shawn 正在掌握新事物。"'
- en: '"Finally, let me add the loading action display to show a loader icon and display
    of actual results. The render method will now look like this."'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '"最后，让我添加加载动作显示，以显示加载器图标和实际结果的显示。现在渲染方法将看起来像这样。"'
- en: '[PRE14]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '"Here, we are checking the current state of the search operation. Based on
    this, we are displaying the loader of the actual contents, results, or empty div
    element."'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '"在这里，我们正在检查搜索操作当前的状态。基于此，我们正在显示实际内容、结果或空 div 元素的加载器。"'
- en: '"Let me define the loading and rendering of the elements."'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '"让我定义元素的加载和渲染。"'
- en: '[PRE15]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '"This will define the display of the spinner to indicate loading."'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '"这将定义旋转按钮的显示，以指示正在加载。"'
- en: '[PRE16]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '"After adding this, the searching operation should display a loader like so."'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '"添加这个之后，搜索操作应该会显示一个类似这样的加载器。"'
- en: '![Getting React to render on server](img/4730_06_02.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![在服务器上使React渲染](img/4730_06_02.jpg)'
- en: 'The results displayed would look like this:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 显示的结果将如下所示：
- en: '![Getting React to render on server](img/4730_06_03.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![在服务器上使React渲染](img/4730_06_03.jpg)'
- en: '"The completed `SearchPage` component is as follows:"'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '"完成的`SearchPage`组件如下："'
- en: '[PRE17]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '"If you notice, I have used an immediately-invoked function to add an `if`
    statement to display the search icon rendering, as follows:"'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '"如果你注意到，我使用立即调用的函数添加了一个`if`语句来显示搜索图标渲染，如下所示："'
- en: '[PRE18]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '"Here, we have used the `()=>{}` syntax to define the function first and then
    immediately invoke it `(()=>{}))()`, returning the content that we need to display
    during the render."'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '"在这里，我们使用了`()=>{}`语法首先定义函数，然后立即调用它`(()=>{}))()`，返回我们在渲染期间需要显示的内容。"'
- en: '"Great work, Shawn!" Mike was happy with the progress Shawn had made.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '"干得好，肖恩！" 迈克对肖恩取得的进展感到高兴。'
- en: '"This is handy, when we want to add simple logic switches within the render
    itself, instead of defining new methods," continued Mike.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '"这很方便，当我们想在渲染本身中添加简单的逻辑开关时，而不是定义新的方法，"迈克继续说。'
- en: On the server
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在服务器上
- en: '"Now Shawn, let''s pre-render the component on the server. What this means
    is that create an HTML element out of the React component and render its contents
    in our view on first page load itself. Currently, the loading of the element is
    taken care of by the client-side code."'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '"现在肖恩，让我们在服务器上预渲染组件。这意味着从React组件创建一个HTML元素，并在第一次页面加载时本身渲染其内容。目前，元素的加载由客户端代码处理。"'
- en: '[PRE19]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '"Instead of this, we will render the React element in the Express action itself."'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '"而不是这样，我们将在Express动作本身中渲染React元素。"'
- en: '"First, let''s set up an `.ejs` view to display out HTML contents along with
    dynamically-generated React contents."'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '"首先，让我们设置一个`.ejs`视图来显示我们的HTML内容以及动态生成的React内容。"'
- en: '[PRE20]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '"Here, we will pass `reactOutput` to the view as a variable to be rendered."'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '"在这里，我们将`reactOutput`作为变量传递给视图进行渲染。"'
- en: '"We will now change our `server.js` file to include the required component
    and React for rendering."'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '"我们现在将修改`server.js`文件，以包含所需的组件和React进行渲染。"'
- en: '[PRE21]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '"Our action will get changed to:"'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '"我们的动作将变为："'
- en: '[PRE22]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '"Our final server code would look like."'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '"我们的最终服务器代码将如下所示。"'
- en: '[PRE23]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '"Here you have it! We are using React''s `renderToString` method to render
    a component, passing any state if required, to accompany it."'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '"这里就是了！我们正在使用React的`renderToString`方法来渲染一个组件，如果需要，可以传递任何状态，以伴随它。"'
- en: Summary
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we took a look at how server-side rendering can be used with
    React with the help of `Express.js`. We started with a client-side React component
    and in the end, replaced it with server-side rendering using the methods provided
    by the React API.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了如何使用`Express.js`的帮助，将服务器端渲染与React结合使用。我们从一个客户端React组件开始，最后使用React
    API提供的方法将其替换为服务器端渲染。
- en: In the next chapter, we will look at React add ons for doing two-way binding,
    class name manipulation, cloning components, immutability helpers, and PureRenderMixin,
    while continuing with the search project build in this chapter.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨React插件，用于执行双向绑定、类名操作、组件克隆、不可变辅助工具和PureRenderMixin，同时继续在本章中构建的搜索项目。
