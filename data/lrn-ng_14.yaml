- en: SystemJS
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SystemJS
- en: SystemJS is a module loader found at the following GitHub link [https://github.com/SystemJS/SystemJS](https://github.com/systemjs/systemjs).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: SystemJS是一个模块加载器，可以在以下GitHub链接中找到[https://github.com/SystemJS/SystemJS](https://github.com/systemjs/systemjs)。
- en: It is built on top of the original ES6 module loader polyfill. It's meant to
    solve the basic problem of loading modules in the browser, which currently doesn't
    work unless the browser gets some help from a library, such as SystemJS.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 它是建立在原始的ES6模块加载器polyfill之上的。它旨在解决在浏览器中加载模块的基本问题，目前除非浏览器得到一些来自库的帮助，否则是行不通的，比如SystemJS。
- en: 'In this appendix, we will cover:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个附录中，我们将涵盖：
- en: The SystemJS itself
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SystemJS本身
- en: A practical SystemJS example with the quickstart repository for Angular
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个实用的SystemJS示例，使用Angular的快速启动存储库
- en: SystemJS introduction
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SystemJS介绍
- en: SystemJS loads the files from top to bottom, and thereafter instantiates from
    bottom to top. What does that mean, though? Well, it means that if you have a
    file you need to load called `Module1` that has a dependency on `Module2`, then
    `Module1` will be loaded first. So much for loading, then we have the part on
    executing the code that takes the reverse direction. In this case it will execute
    `Module2`, to get an instance of it and pass it to `Module1`.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: SystemJS从上到下加载文件，然后从下到上实例化。不过，这意味着什么呢？这意味着如果你有一个名为`Module1`的文件需要加载，它依赖于`Module2`，那么`Module1`将首先被加载。加载完毕后，我们有了执行代码的部分，它采取相反的方向。在这种情况下，它将执行`Module2`，以获得它的一个实例并将其传递给`Module1`。
- en: 'A typical usage of SystemJS will look like the following:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: SystemJS的典型用法如下：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'There are different steps that SystemJS undertakes when processing a script:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: SystemJS在处理脚本时会进行不同的步骤：
- en: '**Normalizing file paths**: Paths can be relative, absolute, and aliased, and
    SystemJS is turning all those into one format'
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**规范化文件路径**：路径可以是相对的、绝对的和别名的，SystemJS将所有这些转换为一个格式'
- en: '**XHR or serve it up**: When a module is asked for them, one of two things
    can happen; either it is loaded from the internal registry if it''s already been
    preloaded before, or an XHR request is made for it'
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**XHR或提供它**：当一个模块被要求时，可能会发生两种情况；如果它已经在之前被预加载过，它将从内部注册表中加载，或者会为它发出XHR请求'
- en: '**Ready it for use**: In this last step, the module will be executed, added
    to the registry, and it will resolve its promise'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**准备好使用**：在最后一步中，模块将被执行，添加到注册表中，并解析其承诺'
- en: A flying start with the quickstart repository
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用快速启动存储库快速入门
- en: 'To get started with the `quickstart` repository, you need to grab a copy of
    that project by using the following command:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用`quickstart`存储库，你需要使用以下命令获取该项目的副本：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This will copy down all the needed files from GitHub and place them in a directory
    called `quickstart`. Now, navigate into that directory:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这将从GitHub下载所有所需的文件，并将它们放在一个名为`quickstart`的目录中。现在，进入该目录：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The project will have specified a bunch of libraries it is dependent on. You
    need to install these. That is accomplished by typing:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 该项目将指定一堆它依赖的库。你需要安装这些库。这可以通过输入以下命令来完成：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Lastly, we need to serve up the application, that is, display it in a browser.
    That is done by typing the following command:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要提供应用程序，也就是在浏览器中显示它。这可以通过输入以下命令来完成：
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Worth mentioning is that this repository uses SystemJS as a module loader and
    for bootstrapping our Angular application.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 值得一提的是，该存储库使用SystemJS作为模块加载器和引导我们的Angular应用程序。
- en: Understanding the parts
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解各个部分
- en: Being given a GitHub repository or using a scaffolder tool is great. You get
    started quickly, and you will feel productive almost instantly. There is a *but* to
    this, though. If something goes wrong, how do we fix it? To be able to do that,
    we need to have a better understanding of what's going on under the hood.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 获得GitHub存储库或使用脚手架工具是很好的。您可以快速开始，并且几乎立即感到高效。不过，这里有一个*但*。如果出了问题，我们该如何解决？为了能够做到这一点，我们需要更好地了解底层发生了什么。
- en: The essential concepts that makes out any Angular project set up with SystemJS
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用SystemJS设置任何Angular项目的基本概念
- en: 'These are the concepts making up the core of your application. They will be
    there for every project:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这些概念构成了您的应用程序的核心。它们将出现在每个项目中：
- en: Starter web page
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 起始网页
- en: '**Node Package Manager** (**npm**)'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Node包管理器**（**npm**）'
- en: SystemJS
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SystemJS
- en: TypeScript setup and TypeScript definition files
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TypeScript设置和TypeScript定义文件
- en: Linting
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linting
- en: Let's discuss these concepts to give an introduction to the set up.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们讨论这些概念，以介绍设置。
- en: All web projects will need a starter web page.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 所有Web项目都需要一个起始网页。
- en: Node.js is JavaScript on the server side. In the context of an *Angular build*,
    Node.jsis used to pull in a lot of libraries (from npm) to help with tasks such
    as bundling, testing, and minification. It is essential to have at least a decent
    grasp on how to work with Node.js and its echo system. A more detailed description
    of this follows in a following subsection.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js是服务器端的JavaScript。在*Angular构建*的上下文中，Node.js被用来引入许多库（来自npm）来帮助处理诸如打包、测试和最小化等任务。至少要对如何使用Node.js及其生态系统有一定了解是至关重要的。关于这一点的更详细描述将在接下来的小节中进行。
- en: As for SystemJS, it is a module bundler. Projects in JavaScript aren't written
    in just one file any more; sometimes, they're written in 1,000s of files. How
    these files relate to one another is by using a module system, and SystemJS is
    one of many module bundlers out there. The Angular team has chosen TypeScript
    as the *lingua franca* for writing Angular apps, which means we need to set up
    TypeScript properly in terms of compiling it and make sure TypeScript knows how
    to consume dependent libraries written in ES5.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 至于SystemJS，它是一个模块打包工具。JavaScript项目不再只是写在一个文件中；有时候，它们是由成千上万个文件组成的。这些文件之间的关系是通过使用模块系统来实现的，而SystemJS是众多模块打包工具之一。Angular团队选择了TypeScript作为编写Angular应用程序的*通用语言*，这意味着我们需要正确设置TypeScript来编译它，并确保TypeScript知道如何使用ES5编写的依赖库。
- en: Lastly, linting is about ensuring we follow best practices when it comes to
    writing our code, both for consistency and to avoid bugs.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，linting是确保我们在编写代码时遵循最佳实践的过程，既为了一致性，也为了避免错误。
- en: Now, let's dive into these concepts in detail.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们详细讨论这些概念。
- en: Starter web page - index.html
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 起始网页 - index.html
- en: The purpose of this file is to be presented to the web server, which ultimately
    renders it into an app. It will contain some markup, but, most importantly, the `script` tags
    needed for our app to run.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件的目的是呈现给Web服务器，最终将其渲染成一个应用程序。它将包含一些标记，但更重要的是我们应用程序运行所需的`script`标签。
- en: The `index.html` also consists of a lot of `script` tags. These `script` tags
    are needed for your project to run.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`index.html`也包含了许多`script`标签。这些`script`标签是项目运行所需的。'
- en: Core files - that Angular is dependent on
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 核心文件 - Angular依赖的文件
- en: A lot of browsers out there lack some capabilities that come with ES2015\. To
    fix that, we can augment our browser with this missing functionality by adding
    something called a polyfill. Aside from polyfills to leverage modern JavaScript,
    Angular is using a whole new way of detecting changes in the app and does so by
    using the `zone.js` library. Lastly, the Angular teams have decided to use Rxjs
    for handling HTTP requests. They have even taken it one step further to integrate
    it into a lot of things, such as dealing with forms and routing. These three things
    are what make up the core functionality that we need to import for our app to
    work.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 许多浏览器缺乏ES2015带来的一些功能。为了解决这个问题，我们可以通过添加一些称为polyfill的东西来增强我们的浏览器，以弥补这些缺失的功能。除了利用现代JavaScript的polyfill之外，Angular还使用了一种全新的方式来检测应用程序中的变化，这是通过使用`zone.js`库来实现的。最后，Angular团队决定使用Rxjs来处理HTTP请求。他们甚至进一步将其集成到许多其他方面，比如处理表单和路由。这三个东西构成了我们需要导入的核心功能，以使我们的应用程序正常工作。
- en: core-js
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: core-js
- en: 'This file brings ES2015 capabilities to ES5 browsers. As you will be using
    quite a few ES2015 constructs, this is necessary for everything to work:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件将ES2015的功能带给了ES5浏览器。由于您将使用相当多的ES2015构造，这对一切都是必要的：
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: zone.js
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: zone.js
- en: 'This file is used by Angular to handle change detection and data binding, without
    this library nothing would work:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件被Angular用来处理变化检测和数据绑定，没有这个库什么都不会工作：
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: rxjs
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: rxjs
- en: RxJS is the async library that Angular uses heavily to deal with everything
    from HTTP requests to forms and routing.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: RxJS是Angular大量使用的异步库，用于处理从HTTP请求到表单和路由的所有内容。
- en: SystemJS - our module loader
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SystemJS - 我们的模块加载器
- en: 'SystemJS is the library you are using to handle the loading of modules and
    consists of two links:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: SystemJS是您用来处理模块加载的库，由两个链接组成：
- en: SystemJS core files
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SystemJS核心文件
- en: SystemJS configuration file
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SystemJS配置文件
- en: The former is needed for SystemJS to run and the latter is you instructing SystemJS
    what files to load and where to find your app and accompanying assets.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 前者是SystemJS运行所需的，后者是您指示SystemJS加载哪些文件以及找到您的应用程序和相关资产的位置。
- en: 'This points out the core SystemJS file:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这指出了核心SystemJS文件：
- en: '[PRE7]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'And this points out how to configure SystemJS. You need to call this file `SystemJS.config.js`:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这指出了如何配置SystemJS。您需要调用这个文件`SystemJS.config.js`：
- en: '[PRE8]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'A look at `SystemJS.config.js` shows the following configuration call being
    made:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 查看`SystemJS.config.js`显示了以下配置调用：
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'It looks quite long and daunting, but let''s break the different parts down
    which is as follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来相当长而令人生畏，但让我们分解不同的部分，如下所示：
- en: '`paths`:Alias where system files are located. Noteworthy here is that we create
    an alias to `node_modules` by typing:'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`paths`：系统文件的别名位置。值得注意的是，我们通过输入以下内容来创建对`node_modules`的别名：'
- en: '[PRE10]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This will serve us later when we need to mention all the libraries that our
    app needs to function.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在以后为我们服务，当我们需要提及应用程序需要的所有库时。
- en: '`map`: This is where we need to tell SystemJS where it can find all the parts.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`map`：这是我们需要告诉SystemJS它可以在哪里找到所有部分的地方。'
- en: 'The following code snippets show the following:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段显示了以下内容：
- en: Where to find our app, the key called app
  id: totrans-69
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 找到我们的应用程序的位置，名为app的键
- en: Where to find the Angular files, key called `@angular/...`
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 找到Angular文件的位置，名为`@angular/...`
- en: Where to find supporting libraries, these libraries consist of angular libraries
    (the framework is split up in many smaller libraries) as well as the core libraries
    mentioned in the last section
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 找到支持库的位置，这些库包括angular库（框架分成许多较小的库）以及上一节中提到的核心库
- en: '[PRE11]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Here, we can see our alias `npm `in use when referring to `@angular/core`,
    which means the following:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到我们在引用`@angular/core`时使用了别名`npm`，这意味着以下内容：
- en: '[PRE12]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Is using the following full path:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下完整路径：
- en: '[PRE13]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '`packages`: It is the last part of the configuration file. This instructs what
    files in the app folder should be loaded first, aka `main`, and also provides
    the `defaultExtension`.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`packages`: 这是配置文件的最后部分。它指示应该首先加载应用程序文件夹中的哪些文件，也提供了`defaultExtension`。'
- en: Node.js setup - package.json
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Node.js设置 - package.json
- en: 'A `package.json` is a description file for a Node.js project. It consists of
    metadata information such as name, author, and description, but it also contains
    a `script` property that will allow us to run scripts that carry out work for
    us, such as:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`package.json`是Node.js项目的描述文件。它包括元数据信息，如`name`，`author`和`description`，但它还包含一个`script`属性，允许我们运行执行工作的脚本，例如：'
- en: Creating a bundle
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个bundle
- en: Running tests
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行测试
- en: Performing linting
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行linting
- en: 'To run one of the commands in the `script` tag, you need to type:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行`script`标签中的命令之一，您需要输入：
- en: '[PRE14]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Your app will depend on a number of libraries to build and run. Libraries listed
    in either `dependencies` or `devDependencies` will be downloaded using npm, by
    you typing `npm install`.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 您的应用程序将依赖于许多库来构建和运行。列在`dependencies`或`devDependencies`中的库将通过您输入`npm install`来下载。
- en: There is a semantic difference between what libraries should be listed in `dependencies` and `devDependencies`, respectively.
    Anything that will help make the app ultimately run will end up in `dependencies`*,* Angular
    libraries, as well as supporting libraries, will end up here. `devDependencies` is
    somewhat different, though; what you put here is more of a supportive nature.
    Examples are TypeScript, Linter, testing libraries, and different tools used to
    process CSS and create the bundle itself.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在`dependencies`和`devDependencies`中列出哪些库应该有一个语义上的区别。最终将帮助应用程序运行的任何内容都将最终出现在`dependencies`中，包括Angular库以及支持库。`devDependencies`有些不同；这里放置的内容更多是支持性质的。例如TypeScript，Linter，测试库以及用于处理CSS和创建bundle本身的不同工具。
- en: 'As for the angular bits in the `dependencies`, these are pure Angular dependencies
    denoted with `@angular`:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 至于`dependencies`中的angular部分，这些都是纯Angular依赖项，用`@angular`表示：
- en: '`@angular/common`'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@angular/common`'
- en: '`@angular/compiler`'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@angular/compiler`'
- en: '`@angular/core`'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@angular/core`'
- en: '`@angular/forms`'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@angular/forms`'
- en: '`@angular/http`'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@angular/http`'
- en: '`@angular/platform-browser`'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@angular/platform-browser`'
- en: '`@angular/platform-browser-dynamic`'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@angular/platform-browser-dynamic`'
- en: '`@angular/router`'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@angular/router`'
- en: 'The remaining dependencies are the following list, which we mentioned under
    *Core files - that Angular is dependent on* in this section:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 其余的依赖项是我们在本节中提到的*Angular依赖的核心文件*列表：
- en: '`core-js`'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`core-js`'
- en: '`reflect-metadata.js`'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`reflect-metadata.js`'
- en: '`rxjs`'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rxjs`'
- en: '`system.js`'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`system.js`'
- en: '`zone.js`'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`zone.js`'
- en: TypeScript setup
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TypeScript设置
- en: A `tsconfig.json` is a file the TypeScript compiler will process and determine
    how compilation should happen.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`tsconfig.json`是TypeScript编译器将处理并确定编译应该如何发生的文件。'
- en: 'The following are the essential settings:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是基本设置：
- en: '[PRE15]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: As mentioned in the preceding code comments, `emitDecoratorMetadata` and `experimentalDecorators` need
    to be set to `true`, as Angular uses these features heavily.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的代码注释中所述，`emitDecoratorMetadata`和`experimentalDecorators`需要设置为`true`，因为Angular大量使用这些功能。
- en: Summary
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This appendix introduced SystemJS and described how it processes files and in
    what order, due to it being a module loader. Thereafter, the official quickstart
    repo was introduced. We then looked at the different parts that SystemJS either
    needed or problems it needed to solve. At this point, we were ready to dive into
    how to use SystemJS to set up an Angular application. We also looked at what core
    parts the Angular framework needed the SystemJs to load and in what order. Leaving
    this appendix, we now have a clearer understanding of what problems SystemJS solves
    and how it can be made to set up Angular applications. It should be noted that
    most Angular applications are using Angular CLI or webpack, but this is definitely
    a good option that will be supported for some time.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 本附录介绍了SystemJS，并描述了它如何处理文件以及以何种顺序处理文件，因为它是一个模块加载器。随后，介绍了官方的快速启动存储库。然后，我们看了SystemJS需要的不同部分或者它需要解决的问题。在这一点上，我们已经准备好深入了解如何使用SystemJS来设置Angular应用程序。我们还看了Angular框架需要SystemJS加载的核心部分以及顺序。离开这个附录，我们现在对SystemJS解决的问题有了更清晰的理解，以及如何使用它来设置Angular应用程序。值得注意的是，大多数Angular应用程序都在使用Angular
    CLI或webpack，但这绝对是一个将在一段时间内得到支持的好选择。
