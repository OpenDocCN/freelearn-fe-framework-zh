- en: '13'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '13'
- en: Highly Available Cloud Infrastructure on AWS
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS 上的高可用云基础设施
- en: The web is a hostile environment. There are good and bad actors. Bad actors
    can try to poke holes in your security or try to bring down your website with
    a **Distributed Denial-of-Service** (**DDoS**) attack. Good actors, if you're
    lucky, will love your website and won't stop using it. They'll shower you with
    recommendations to improve your site, but they may also run into bugs and may
    be so enthusiastic that your site may slow down to a crawl due to high traffic.
    Real-world deployments on the web require a lot of expertise to get them right.
    As a full-stack developer, you can only know about so many nuances of hardware,
    software, and networking. Luckily, with the advent of cloud service providers,
    a lot of this expertise has been translated into software configurations, with
    the difficult hardware and networking concerns taken care of by the provider.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 互联网是一个充满敌意的环境。有好的和坏的参与者。坏参与者可能会试图在您的安全中找到漏洞，或者试图通过 **分布式拒绝服务**（**DDoS**）攻击使您的网站崩溃。如果您幸运的话，好的参与者会喜欢您的网站，并且不会停止使用它。他们会对您的网站提出改进建议，但他们也可能遇到错误，并且由于高流量，您的网站可能会因为过于热情而变得缓慢。在互联网上的实际部署需要大量的专业知识才能正确完成。作为一名全栈开发者，您只能了解硬件、软件和网络的一些细微差别。幸运的是，随着云服务提供商的出现，许多这种专业知识已经转化为软件配置，而复杂的硬件和网络问题则由提供商处理。
- en: One of the best features of a cloud service provider is cloud scalability, which
    refers to your server automatically scaling out to respond to high volumes of
    unexpected traffic and scaling down to save costs when the traffic returns back
    to normal levels. **Amazon Web Services** (**AWS**) goes beyond basic cloud scalability
    and introduces high-availability and fault-tolerant concepts, allowing resilient
    local and global deployments. I have chosen to introduce you to AWS because of
    its vast capabilities, which go way beyond what I will touch on in this book.
    With Route 53, you can get free DDoS protection; with API Gateway, you create
    API keys; with AWS Lambda, you can handle millions of transactions for only a
    few dollars a month; and with CloudFront, you can cache your content at secret
    edge locations that are scattered around major cities of the world. In addition,
    blue-green deployments allow you to achieve no-downtime deployments of your software.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 云服务提供商的最佳特性之一是云的可扩展性，这指的是您的服务器会自动扩展以应对意外的流量高峰，并在流量恢复正常水平时缩减规模以节省成本。**亚马逊网络服务**（**AWS**）不仅超越了基本的云可扩展性，还引入了高可用性和容错概念，允许实现弹性本地和全球部署。我选择向您介绍
    AWS，是因为其庞大的功能，这些功能远远超出了我在本书中将要涉及的内容。使用 Route 53，您可以获得免费的 DDoS 保护；使用 API Gateway，您可以创建
    API 密钥；使用 AWS Lambda，您每月只需花费几美元就可以处理数百万笔交易；使用 CloudFront，您可以在世界各大城市的秘密边缘位置缓存您的内容。此外，蓝绿部署允许您实现软件的无中断部署。
- en: 'Overall, the tools and techniques you will learn about in this chapter are
    adaptable to any cloud provider and are fast becoming critical knowledge for any
    full-stack developer. We will be going over the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，您将在本章中学到的工具和技术适用于任何云服务提供商，并且正迅速成为任何全栈开发者的关键知识。我们将讨论以下主题：
- en: Creating and protecting AWS accounts
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和保护 AWS 账户
- en: Right-sizing infrastructure, including simple load testing to optimize instances
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 合理配置基础设施，包括简单的负载测试以优化实例
- en: Configuring and deploying to AWS
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置和部署到 AWS
- en: ECS Fargate scripted blue-green deployments
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: ECS Fargate 脚本化蓝绿部署
- en: Billing
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 账单
- en: The most up-to-date versions of the sample code for the book are on GitHub at
    the following repository link. The repository contains the final and complete
    state of the code. Each section contains information boxes to help direct you
    to the correct filename or branch on GitHub that you can use to verify your progress.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本书示例代码的最新版本可在以下 GitHub 仓库链接找到。该仓库包含代码的最终和完整状态。每个部分都包含信息框，以帮助您找到 GitHub 上正确的文件名或分支，以便您可以使用它来验证您的进度。
- en: The sample code for *Chapter 13* removes all optional and alternate implementations
    from previous chapters and only enables auth with **lemon-mart-server**. This
    is so that readers can reference a clean implementation of the **lemon-mart**
    project.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '*第 13 章* 的示例代码移除了之前章节中所有可选和替代实现，并且仅启用与 **lemon-mart-server** 的身份验证。这样，读者可以参考
    **lemon-mart** 项目的干净实现。'
- en: 'For *Chapter 13* examples based on **lemon-mart**:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 基于 **lemon-mart** 的 *第 13 章* 示例：
- en: Clone the repo at [https://github.com/duluca/lemon-mart](https://github.com/duluca/lemon-mart).
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 克隆[https://github.com/duluca/lemon-mart](https://github.com/duluca/lemon-mart)上的仓库。
- en: Use `config.docker-integration.yml` to verify your `config.yml` implementation.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `config.docker-integration.yml` 验证您的 `config.yml` 实现。
- en: Execute `npm install` on the root folder to install dependencies.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在根目录上执行 `npm install` 以安装依赖项。
- en: To run the CircleCI Docker integration configuration, execute `git checkout
    deploy_aws`. Refer to the pull request at [https://github.com/duluca/lemon-mart/pull/27](https://github.com/duluca/lemon-mart/pull/27).
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要运行 CircleCI Docker 集成配置，请执行 `git checkout deploy_aws`。请参阅[https://github.com/duluca/lemon-mart/pull/27](https://github.com/duluca/lemon-mart/pull/27)的拉取请求。
- en: 'The code sample for this chapter is under the sub-folder:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 本章的代码示例位于子文件夹：
- en: '[PRE0]'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To run the Angular app for this chapter, execute:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要运行本章的 Angular 应用程序，请执行：
- en: '[PRE1]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To run Angular unit tests for this chapter, execute:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要运行本章的 Angular 单元测试，请执行：
- en: '[PRE2]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To run Angular e2e tests for this chapter, execute:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要运行本章的 Angular e2e 测试，请执行：
- en: '[PRE3]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'To build a production-ready Angular app for this chapter, execute:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要为本章构建一个生产就绪的 Angular 应用程序，请执行：
- en: '[PRE4]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note that the `dist/ch13` folder at the root of the repository will contain
    the compiled result.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，存储库根目录下的 `dist/ch13` 文件夹将包含编译结果。
- en: Beware that the source code in the book or on GitHub may not always match the
    code generated by the Angular CLI. There may also be slight differences in implementation
    between the code in the book and what's on GitHub because the ecosystem is ever-evolving.
    It is natural for the sample code to change over time. Also on GitHub, expect
    to find corrections, fixes to support newer versions of libraries, or side-by-side
    implementations of multiple techniques for you to observe. You are only expected
    to implement the ideal solution recommended in the book. If you find errors or
    have questions, please create an issue or submit a pull request on GitHub for
    the benefit of all readers.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，书中或 GitHub 上的源代码可能并不总是与 Angular CLI 生成的代码相匹配。由于生态系统不断演变，书中代码与 GitHub 上的代码在实现上也可能存在细微差异。随着时间的推移，示例代码发生变化是自然的。在
    GitHub 上，您可能会找到更正、修复以支持库的新版本，或者观察多种技术并行的实现。您只需实现书中推荐的理想解决方案即可。如果您发现错误或有疑问，请创建问题或提交
    GitHub 上的拉取请求，以惠及所有读者。
- en: You can read more about updating Angular in *Appendix C*, *Keeping Angular and
    Tools Evergreen*. You can find this appendix online from [https://static.packt-cdn.com/downloads/9781838648800_Appendix_C_Keeping_Angular_and_Tools_Evergreen.pdf](https://static.packt-cdn.com/downloads/9781838648800_Appendix_C_Keeping_Angular_and_Tools_Evergreen.)
    or at [https://expertlysimple.io/stay-evergreen](https://expertlysimple.io/stay-evergreen).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在*附录 C*中了解更多关于更新 Angular 的信息，*保持 Angular 和工具始终如一*。您可以从[https://static.packt-cdn.com/downloads/9781838648800_Appendix_C_Keeping_Angular_and_Tools_Evergreen.pdf](https://static.packt-cdn.com/downloads/9781838648800_Appendix_C_Keeping_Angular_and_Tools_Evergreen.)或[https://expertlysimple.io/stay-evergreen](https://expertlysimple.io/stay-evergreen)在线找到此附录。
- en: AWS is an extremely popular service and AWS accounts are even more popular targets
    for hacking attempts. Let's begin by creating a secure AWS account.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 是一个非常流行的服务，AWS 账户更是黑客攻击的热门目标。让我们从创建一个安全的 AWS 账户开始。
- en: Creating a secure AWS account
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建安全的 AWS 账户
- en: Account access and control is of paramount importance in any cloud service,
    and this includes AWS as well. After initial account creation, you will have your
    root credentials, which is your email and password combination.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 账户访问和控制在任何云服务中都是至关重要的，包括 AWS。在初始账户创建后，您将拥有您的根凭据，即您的电子邮件和密码组合。
- en: 'Let''s start by creating an AWS account:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建 AWS 账户开始：
- en: Start by navigating to [https://console.aws.amazon.com](https://console.aws.amazon.com).
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先导航到[https://console.aws.amazon.com](https://console.aws.amazon.com)。
- en: If you don't have one, create a new account.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您还没有，请创建一个新账户。
- en: If you are new to AWS, you can get 12 months of free tier access to various
    services, as shown on the sign-up screen here:![](img/B14091_13_01.png)
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你刚接触 AWS，你可以在注册页面这里获得各种服务的12个月免费层访问权限，如图所示：![](img/B14091_13_01.png)
- en: 'Figure 13.1: AWS account sign up'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 13.1：AWS 账户注册
- en: Your AWS billing is tied to your root credentials. If compromised, a lot of
    damage can be done on your account before you can regain access.
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您的 AWS 账单与您的根凭据相关联。如果遭到破坏，在您恢复访问之前，您的账户可能会遭受大量损失。
- en: Ensure that you enable 2FA on your root credentials.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您已在您的根凭据上启用了双因素认证。
- en: To add another layer of security, going forward, you need to stop logging in
    to your AWS account using your root credentials. You can create user accounts
    using the AWS **Identity and Access Management** (**IAM**) module. If these accounts
    get compromised, unlike your root account, you can easily and quickly delete or
    replace them.
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了增加另一层安全性，从现在开始，您需要停止使用根凭证登录您的AWS账户。您可以使用AWS **身份和访问管理**（**IAM**）模块创建用户账户。如果这些账户被泄露，与您的根账户不同，您可以轻松快速地删除或替换它们。
- en: Navigate to the **IAM module**.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 **IAM模块**。
- en: Create a new user account with global admin rights.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的具有全局管理员权限的用户账户。
- en: Log in to the AWS console using these credentials.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用这些凭证登录AWS控制台。
- en: You should enable 2FA for these credentials as well.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还应该为这些凭证启用双因素认证。
- en: A secure account setup looks as follows, with every status reported as green:![](img/B14091_13_02.png)
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个安全的账户设置如下所示，每个状态都报告为绿色：![img/B14091_13_02.png](img/B14091_13_02.png)
- en: 'Figure 13.2: AWS IAM module after secure setup'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图13.2：安全设置后的AWS IAM模块
- en: The major benefit of working with user accounts is programmatic access. For
    each user account, you can create a public access ID and private access key pair.
    When you're working with third parties, such as hosted continuous integration
    services, your own application code, or CLI tools, you use your programmatic access
    keys to connect to your AWS resources. When, inevitably, the access keys leak,
    it is quick and convenient to disable access to the old keys and create new ones.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 与用户账户合作的主要好处是程序性访问。对于每个用户账户，您都可以创建一个公共访问ID和私有访问密钥对。当您与第三方合作，例如托管持续集成服务、自己的应用程序代码或CLI工具时，您使用程序性访问密钥来连接到您的AWS资源。当不可避免地访问密钥泄露时，禁用旧密钥并创建新密钥既快速又方便。
- en: Furthermore, user account access can be tightly controlled by very granular
    permissions. You can also create roles with a group of permissions and further
    control communication between AWS services and some external services.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，用户账户访问可以通过非常细粒度的权限进行严格控制。您还可以创建具有一组权限的角色，并进一步控制AWS服务与某些外部服务之间的通信。
- en: When creating user accounts and roles, always err on the side of minimal permissions.
    This can be an exercise in frustration when working with clients, contractors,
    or colleagues who are unfamiliar with AWS; however, it is a worthwhile exercise.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建用户账户和角色时，始终采取最小权限原则。当与不熟悉AWS的客户、承包商或同事合作时，这可能是一项令人沮丧的练习；然而，这是一项值得做的练习。
- en: You're only as secure and reliable as your weakest link, so you must plan for
    failures and, most importantly, practice recovery plans on a regular basis.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 您的安全性和可靠性取决于您最薄弱的环节，因此您必须计划失败，并且最重要的是，定期练习恢复计划。
- en: Securing secrets
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保护机密
- en: Password and private key leaks occur more commonly than you may think. Your
    keys may be compromised on unsecured public Wi-Fi networks; you may accidentally
    check them into your code repository or use superbly insecure communication methods
    like email.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 密码和私钥泄露的发生频率可能比你想象的要高。您的密钥可能在未加密的公共Wi-Fi网络上被泄露；您可能不小心将它们检查到代码仓库中，或者使用像电子邮件这样极其不安全的通信方式。
- en: Accidental code check-ins, however, are the biggest issue, since most junior
    developers don't realize that deletion isn't an option in source control systems.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，意外代码检查入是最大的问题，因为大多数初级开发者没有意识到在源代码控制系统中删除不是一种选择。
- en: 'As a developer, there are a few noteworthy best practices to follow to safeguard
    your secrets:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 作为开发者，有一些值得注意的最佳实践需要遵循，以保护您的机密：
- en: Always use a VPN service on public Wi-Fi, such as [tunnelbear.com](http://tunnelbear.com).
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在公共Wi-Fi上始终使用VPN服务，例如[tunnelbear.com](http://tunnelbear.com)。
- en: Leverage the `.aws/credentials` file located under your user's home folder,
    to create profiles and store access keys.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 利用位于您用户主目录下的 `.aws/credentials` 文件来创建配置文件并存储访问密钥。
- en: As a team norm, create an `.env` file in the root of your project that is in
    `.gitignore` to store any secrets that your CI server may later inject.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为团队规范，在项目的根目录下创建一个`.env`文件，并将其添加到`.gitignore`中，以存储CI服务器可能后来注入的任何机密。
- en: Always review commits before pushing them.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在推送之前始终审查提交。
- en: Consider signing up for a service that can monitor your repos for secrets, like
    GitGurdian at [https://gitguardian.com/](https://gitguardian.com/), which is free
    for open source projects.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 考虑注册一个可以监控您的代码库以查找机密的服务的账户，例如GitGurdian在[https://gitguardian.com/](https://gitguardian.com/)，这对于开源项目是免费的。
- en: Note that GitGuardian flags Firebase and OpenWeather API keys as leaks. This
    is a false positive, because the keys in question are public keys and must be
    published for your app to function correctly.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，GitGuardian将Firebase和OpenWeather API密钥标记为泄露。这是一个误报，因为所涉及的密钥是公钥，必须发布以使你的应用程序正确运行。
- en: Following these conventions every single time will get you into the good habit
    of never checking in your secrets to a code repository. In the next section, we
    will delve into resource considerations for your cloud environment.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 每次都遵循这些惯例将使你养成一个良好的习惯，即永远不要将秘密检查到代码库中。在下一节中，我们将深入探讨云环境中的资源考虑因素。
- en: Right-sizing infrastructure
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 适当规模的基础设施
- en: The point of optimizing your infrastructure is to protect your company's revenue
    while minimizing the cost of operating your infrastructure. Your goal should be
    to ensure that users don't encounter high latency, otherwise known as bad performance
    or, worse, unfulfilled or dropped requests, all the while making your venture
    a sustainable endeavor.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 优化你的基础设施的目的是在保护你公司收入的同时，最大限度地减少运营基础设施的成本。你的目标应该是确保用户不会遇到高延迟，否则称为不良性能，更糟糕的是，未满足或丢弃的请求，同时让你的企业成为一个可持续的事业。
- en: 'The three pillars of web application performance are as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 网络应用程序性能的三个支柱如下：
- en: CPU utilization
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CPU利用率
- en: Memory usage
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 内存使用
- en: Network bandwidth
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 网络带宽
- en: I have intentionally left disk access out of the key consideration metrics,
    since only particular workloads executed on an application server or data store
    are affected by it. Disk access would rarely ever impact the performance of serving
    a web application as long as application assets are delivered by a **Content Delivery
    Network** (**CDN**). That said, still keep an eye on any unexpected runaway disk
    access, such as the high-frequency creation of temp and log files. Docker, for
    example, can spit out logs that can easily fill up a drive.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我故意将磁盘访问排除在关键考虑指标之外，因为只有特定的工作负载在应用程序服务器或数据存储上执行时才会受到影响。只要应用程序资源由**内容分发网络**（**CDN**）提供，磁盘访问很少会影响服务网络应用程序的性能。尽管如此，仍然要注意任何意外的失控磁盘访问，例如频繁创建临时和日志文件。例如，Docker可能会输出日志，这些日志很容易填满驱动器。
- en: In an ideal scenario, CPU, memory, and network bandwidth use should be utilized
    evenly at around 60-80% of available capacity. If you encounter performance issues
    due to various other factors, such as disk I/O, a slow third-party service, or
    inefficient code, most likely one of your metrics will peak at or near maximum
    capacity, while the other two are idling or severely underutilized. This is an
    opportunity to use more CPU, memory, or bandwidth to compensate for the performance
    issue and also evenly utilize available resources.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在理想情况下，CPU、内存和网络带宽的使用应该均匀地利用，大约在可用容量的60-80%左右。如果你遇到由于各种其他因素（如磁盘I/O、缓慢的第三方服务或低效的代码）引起的性能问题，很可能会出现你的某个指标达到或接近最大容量，而其他两个则处于闲置或严重未充分利用的状态。这是一个机会，可以使用更多的CPU、内存或带宽来补偿性能问题，并均匀利用可用资源。
- en: The reason behind targeting 60-80% utilization is to allow some time for a new
    instance (server or container) to be provisioned and ready to serve users. After
    your predefined threshold has been crossed, while a new instance is provisioned,
    you can continue serving an increasing number of users, thus minimizing unfulfilled
    requests.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 目标是60-80%的利用率背后的原因是，为了给一个新的实例（服务器或容器）的配置和准备就绪以服务用户留出一些时间。在你预定义的阈值被超过后，当一个新的实例正在配置时，你可以继续服务越来越多的用户，从而最小化未满足的请求。
- en: Throughout this book, I have discouraged over-engineering or perfect solutions.
    In today's complicated IT landscape, it is nearly impossible to predict where
    you will encounter performance bottlenecks. Your engineering may, very easily,
    take $100,000+ worth of engineering hours, where the solution to your problem
    may be a few hundred dollars of new hardware, whether it be a network switch,
    solid state drive, CPU, or more memory.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在整本书中，我一直在劝阻过度工程化或完美解决方案。在当今复杂的IT环境中，几乎不可能预测你将在哪里遇到性能瓶颈。你的工程可能非常容易地花费超过$100,000的工程时数，而你的问题的解决方案可能只需要几百美元的新硬件，无论是网络交换机、固态驱动器、CPU还是更多的内存。
- en: If your CPU is too busy, you may want to introduce more bookkeeping logic to
    your code, via indexes, hash tables, or dictionaries that you can cache in memory
    to speed up subsequent or intermediary steps of your logic. For example, if you
    are constantly running array lookup operations to locate particular properties
    of a record, you can perform an operation on that record, saving the ID and/or
    the property of the record in a hash table that you keep in memory, reducing your
    runtime cost from *O(n)* down to *O(1)*.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的CPU过于繁忙，您可能想在代码中引入更多的账务逻辑，通过索引、哈希表或字典，您可以在内存中缓存它们以加快逻辑的后续或中间步骤。例如，如果您不断运行数组查找操作以定位记录的特定属性，您可以在该记录上执行操作，将记录的ID和/或属性保存到您在内存中保持的哈希表中，从而将您的运行时成本从
    *O(n)* 降低到 *O(1)*。
- en: Following the preceding example, you may end up using too much memory with hash
    tables. In this case, you may want to more aggressively offload or transfer caches
    to slower but more plentiful data stores using your spare network bandwidth, such
    as a Redis instance.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例之后，您可能会使用过多的内存，特别是使用哈希表。在这种情况下，您可能希望更积极地卸载或转移缓存到较慢但更丰富的数据存储中，例如使用您的备用网络带宽的Redis实例。
- en: If your network utilization is too high, you may want to investigate the use
    of CDNs with expiring links, client-side caching, throttling requests, and API
    access limits for customers abusing their quotas, or optimize your instances to
    have disproportionately more network capacity compared to their CPU or memory
    capacity.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的网络利用率过高，您可能想调查使用带有过期链接的CDN、客户端缓存、限制请求以及为滥用配额的客户设置API访问限制，或者优化您的实例，使其网络容量与其CPU或内存容量不成比例地更多。
- en: Optimizing instances
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 优化实例
- en: In an earlier example, I demonstrated the use of my `duluca/minimal-node-web-server`
    Docker image to host our Angular apps. Even though Node.js is a very lightweight
    server, it is simply not optimized to just be a web server. In addition, Node.js
    has a single-threaded execution environment, making it a poor choice for serving
    static content to many concurrent users at once.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我展示了使用我的 `duluca/minimal-node-web-server` Docker镜像来托管我们的Angular应用。尽管Node.js是一个非常轻量级的服务器，但它并不是为了仅仅作为Web服务器而优化的。此外，Node.js具有单线程执行环境，这使得它不适合同时为许多并发用户提供服务静态内容。
- en: 'You can observe the resource that a Docker image is utilizing by executing
    `docker stats`:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过执行 `docker stats` 来观察Docker镜像正在使用的资源：
- en: '[PRE5]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here are comparative results of the system resources that Node and NGINX-based
    servers utilize at rest:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是Node和基于NGINX的服务器在空闲时系统资源利用率的比较结果：
- en: '| **Server** | **Image Size** | **Memory Usage** |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| **服务器** | **镜像大小** | **内存使用** |'
- en: '| `duluca/minimal-nginx-web-server` | 16.8 MB | 1.8 MB |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| `duluca/minimal-nginx-web-server` | 16.8 MB | 1.8 MB |'
- en: '| `duluca/minimal-node-web-server` | 71.8 MB | 37.0 MB |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| `duluca/minimal-node-web-server` | 71.8 MB | 37.0 MB |'
- en: However, at rest values only tell a portion of the story. To get a better understanding,
    we must perform a simple load test to see memory and CPU utilization under load.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，空闲时的值只能讲述故事的一部分。为了更好地理解，我们必须进行简单的负载测试，以查看负载下的内存和CPU利用率。
- en: Simple load testing
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 简单负载测试
- en: 'To get a better understanding of the performance characteristics of our server,
    let''s put them under some load and stress them:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解我们服务器的性能特性，让我们对它们施加一些负载并对其进行压力测试：
- en: 'Start your container using `docker run`:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `docker run` 启动您的容器：
- en: '[PRE6]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If you''re using npm scripts for Docker, execute the following command to start
    your container:'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您使用npm脚本来运行Docker，请执行以下命令以启动您的容器：
- en: '[PRE7]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Execute the following bash script to start the load test:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下bash脚本来启动负载测试：
- en: '[PRE8]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This script will send `100` requests per second to the server until you terminate
    it.
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此脚本将每秒向服务器发送 `100` 个请求，直到您终止它。
- en: Execute `docker stats` to observe the performance characteristics.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行 `docker stats` 来观察性能特性。
- en: 'Here are high-level observations of CPU and memory utilization:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是CPU和内存利用率的总体观察：
- en: '| ****CPU utilization statistics**** | ****Low**** | ****Mid**** | ****High****
    | ****Max memory**** |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| ****CPU利用率统计**** | ****低**** | ****中**** | ****高**** | ****最大内存**** |'
- en: '| `duluca/minimal-nginx-web-server` | 2% | 15% | 60% | 2.4 MB |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| `duluca/minimal-nginx-web-server` | 2% | 15% | 60% | 2.4 MB |'
- en: '| `duluca/minimal-node-web-server` | 20% | 45% | 130% | 75 MB |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| `duluca/minimal-node-web-server` | 20% | 45% | 130% | 75 MB |'
- en: As you can see, there's a significant performance difference between the two
    servers serving the exact same content. Note that this kind of testing based on
    requests per second is good for comparative analysis and does not necessarily
    reflect real-world usage.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，两个服务器在提供相同内容时存在显著的性能差异。请注意，这种基于每秒请求数的测试对于比较分析很有用，但不一定反映实际使用情况。
- en: It is clear that our NGINX server will give us the best bang for our buck. Armed
    with an optimal solution, let's deploy the application on AWS.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 很明显，我们的NGINX服务器将为我们提供最佳性价比。有了最优解决方案，让我们在AWS上部署应用程序。
- en: Deploying to AWS ECS Fargate
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署到AWS ECS Fargate
- en: AWS **Elastic Container Service** (**ECS**) Fargate is a cost-effective and
    easy-to-configure way to deploy your container in the cloud.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: AWS **弹性容器服务**（**ECS**）Fargate是一种成本效益高且易于配置的云部署容器的方法。
- en: 'ECS consists of four major parts:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: ECS由四个主要部分组成：
- en: A container repository, **Elastic Container Registry** (**ECR**), where you
    publish your Docker images.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个容器仓库，**弹性容器注册库**（**ECR**），您可以在其中发布您的Docker镜像。
- en: Services, tasks, and task definitions, where you define runtime parameters and
    port mappings for your container as a task definition that a service runs as tasks.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 服务、任务和任务定义，其中您定义作为服务运行的容器作为任务定义的运行时参数和端口映射。
- en: A cluster, a collection of EC2 instances, where tasks can be provisioned and
    scaled out or in.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个集群，一组EC2实例，其中可以部署和扩展任务。
- en: Fargate, a managed cluster service that abstracts away EC2 instances, load balancer,
    and security group concerns.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Fargate，一种管理集群服务，它抽象化了EC2实例、负载均衡器和安全组的问题。
- en: In the top right corner of the AWS console, be sure to select the region that
    is closest to your users. For me, this is the us-east-1 region.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在AWS控制台右上角，务必选择离您的用户最近的区域。对我来说，这是us-east-1区域。
- en: Our goal is to create a highly available blue-green deployment, meaning that
    at least one instance of our application will be up and running in the event of
    a server failure or even during a deployment. These concepts are explored in detail
    in *Chapter 14*, *Google Analytics and Advanced Cloud Ops*, in the *Cost per user
    in a scalable environment* section.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目标是创建一个高度可用的蓝绿部署，这意味着在服务器故障或甚至在部署期间，我们的应用程序至少有一个实例将处于运行状态。这些概念在*第14章*，*Google
    Analytics和高级云操作*，*可扩展环境中的每用户成本*部分中进行了详细探讨。
- en: Configuring ECS Fargate
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置ECS Fargate
- en: You can access ECS functions under the AWS **Services** menu, selecting the
    **Elastic Container Service** link.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在AWS**服务**菜单下访问ECS功能，选择**弹性容器服务**链接。
- en: If this is your first time logging in, you must go through a tutorial, where
    you will be forced to create a sample app. I would recommend going through the
    tutorial and deleting your sample app afterward. In order to delete a service,
    you need to update your service's number of tasks to 0\. In addition, delete the
    default cluster to avoid any unforeseen charges.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这是您第一次登录，您必须完成一个教程，其中您将被强制创建一个示例应用程序。我建议您完成教程，并在之后删除您的示例应用程序。为了删除服务，您需要将您服务的任务数量更新为0。此外，删除默认集群以避免任何意外费用。
- en: Creating a Fargate cluster
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建Fargate集群
- en: Let's start by configuring a Fargate cluster, which acts as an anchor point
    when configuring other AWS services. Our cluster will eventually run a cluster
    service, which we will gradually build up in the following sections.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先配置一个Fargate集群，它作为配置其他AWS服务时的锚点。我们的集群最终将运行一个集群服务，我们将在接下来的章节中逐步构建。
- en: AWS Fargate is great choice to implement a scalable container orchestration
    solution in the cloud. In recent years, Kubernetes has gained prevalence as a
    go-to solution. Kubernetes is an open source alternative to AWS ECS with richer
    capabilities for container orchestration with on-premises, cloud, and cloud-hybrid
    deployments. AWS does offer Amazon Elastic Container Service for Kubernetes (Amazon
    EKS), however RedHat's open source OpenShift platform is easier to use and comes
    with batteries included compared to vanilla Kubernetes.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Fargate是实施云中可扩展容器编排解决方案的一个很好的选择。近年来，Kubernetes作为首选解决方案已经变得非常流行。Kubernetes是AWS
    ECS的开源替代品，它为容器编排提供了更丰富的功能，适用于本地、云和云混合部署。虽然AWS确实提供了Amazon Elastic Container Service
    for Kubernetes (Amazon EKS)，但与纯Kubernetes相比，RedHat的开源OpenShift平台更容易使用，并且自带电池（即无需额外配置）。
- en: 'Let''s create the cluster:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建集群：
- en: Navigate to **Elastic Container Service**.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**弹性容器服务**。
- en: Click on **Clusters** | **Create Cluster**.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**集群** | **创建集群**。
- en: Select the **Networking only... Powered by AWS Fargate** template.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**仅网络...由AWS Fargate提供**模板。
- en: Click on the **Next step** and you'll see the **Create Cluster** step, as shown:![](img/B14091_13_03.png)
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下一步**，您将看到**创建集群**步骤，如图所示：![图片](img/B14091_13_03.png)
- en: 'Figure 13.3: AWS ECS Create Cluster'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图13.3：AWS ECS创建集群
- en: Enter **Cluster name** as `fargate-cluster`.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**集群名称**输入为`fargate-cluster`。
- en: Create a **VPC** to isolate your resources from other AWS resources.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个**VPC**以隔离您的资源与其他AWS资源。
- en: Click on **Create Cluster** to finish the setup.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建集群**以完成设置。
- en: 'You will see the summary of your actions, as follows:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到您的操作摘要，如下所示：
- en: '![](img/B14091_13_04.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B14091_13_04.png)'
- en: 'Figure 13.4: AWS ECS Fargate cluster'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.4：AWS ECS Fargate集群
- en: Now that you have created a cluster within its own **Virtual Private Cloud**
    (**VPC**), you can view it under **Elastic Container Service** | **Clusters**.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经在自己的**虚拟专用云**（**VPC**）中创建了一个集群，您可以在**弹性容器服务** | **集群**下查看它。
- en: Creating a container repository
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建容器仓库
- en: 'Next, we need to set up a repository where we can publish the container images
    we build in our local or CI environment:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要设置一个仓库，我们可以在此处发布我们在本地或CI环境中构建的容器镜像：
- en: This section presumes that you have set up Docker and npm scripts for Docker
    as detailed in *Chapter 9*, *DevOps Using Docker*. You can get the latest version
    of these scripts by executing `npm i -g mrm-task-npm-docker` and applying them
    with `npx mrm npm-docker`.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 本节假设您已根据*第9章*，*使用Docker的DevOps*中详细说明的设置Docker和npm脚本。您可以通过执行`npm i -g mrm-task-npm-docker`并使用`npx
    mrm npm-docker`应用这些脚本来获取这些脚本的最新版本。
- en: Navigate to **Elastic Container Service**.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**弹性容器服务**。
- en: Click on **Repositories** | **Create Repository**.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**仓库** | **创建仓库**。
- en: Enter the repository name as `lemon-mart`.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将仓库名称输入为`lemon-mart`。
- en: Copy the **Repository URI** generated on the screen.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制屏幕上生成的**仓库URI**。
- en: 'Paste the URI in the `package.json` file of your application as the new `imageRepo`
    variable:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将URI粘贴到您的应用程序的`package.json`文件中作为新的`imageRepo`变量：
- en: '[PRE9]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Click on **Create Repository**.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建仓库**。
- en: Click on **Next step** and then on **Done** to finish the setup.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下一步**，然后点击**完成**以完成设置。
- en: 'On the summary screen, you will get further instructions on how to use your
    repository with Docker. Later in the chapter, we will go over scripts that will
    take care of this for us:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在摘要屏幕上，您将获得有关如何使用Docker与您的仓库一起使用的进一步说明。在本章的后面部分，我们将介绍将为我们处理这些任务的脚本：
- en: '![](img/B14091_13_05.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B14091_13_05.png)'
- en: 'Figure 13.5: AWS ECS repository'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.5：AWS ECS仓库
- en: You can view your new repository under **Elastic Container Service** | **Repositories**.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在**弹性容器服务** | **仓库**下查看您的新仓库。
- en: We will go over how to publish your image in the upcoming *npm scripts for AWS*
    section.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在即将到来的*AWS的npm脚本*部分中介绍如何发布您的镜像。
- en: Let's continue with the setup of ECS.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续设置ECS。
- en: Creating a task definition
  id: totrans-145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建任务定义
- en: 'With a container target defined in our repository, we can define a task definition,
    which contains the necessary metadata to run our container, such as port mappings,
    reserved CPU, and memory allocations:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的仓库中定义了容器目标后，我们可以定义一个任务定义，它包含运行我们的容器所需的所有元数据，例如端口映射、保留CPU和内存分配：
- en: Navigate to **Elastic Container Service**.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**弹性容器服务**。
- en: Click on **Task Definitions** | **Create new Task Definition**.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**任务定义** | **创建新的任务定义**。
- en: Select **Fargate** launch type compatibility.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**Fargate**启动类型兼容性。
- en: Enter **Task Definition Name** as `lemon-mart-task`.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**任务定义名称**输入为`lemon-mart-task`。
- en: Select **Task role** as none (you can add one later to enable access to other
    AWS services).
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**任务角色**为无（您可以在稍后添加一个以启用对其他AWS服务的访问）。
- en: Enter **Task Memory** as `0.5 GB`.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**任务内存**输入为`0.5 GB`。
- en: Enter **Task CPU** as `0.25 CPU`.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**任务CPU**输入为`0.25 CPU`。
- en: 'Click on **Add Container**:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加容器**：
- en: Enter **Container name** as `lemon-mart`.
  id: totrans-155
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将**容器名称**输入为`lemon-mart`。
- en: For **Image**, paste the image repo URI from earlier, but append the `:latest`
    tag to it so that it always pulls the latest image in the repository, such as
    `000000000000.dkr.ecr.us-east-1.amazonaws.com/lemon-mart:latest`.
  id: totrans-156
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于**镜像**，粘贴之前生成的镜像仓库URI，但向其追加`:latest`标签，以便始终从仓库中拉取最新镜像，例如`000000000000.dkr.ecr.us-east-1.amazonaws.com/lemon-mart:latest`。
- en: Set a **Soft limit** of `128 MB` for NGINX or `256 MB` for Node.js.
  id: totrans-157
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为NGINX设置**软限制**为`128 MB`，或为Node.js设置`256 MB`。
- en: Under **Port mappings**, specify **Container port** as `80` for NGINX or `3000`
    for Node.js.
  id: totrans-158
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在**端口映射**下，指定**容器端口**为NGINX的`80`或Node.js的`3000`。
- en: Accept the remaining defaults.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接受剩余的默认设置。
- en: Click on **Add**; this is how your task definition will look before creating
    it:![](img/B14091_13_06.png)
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加**；这是在创建之前您的任务定义将看起来如何：![img/B14091_13_06.png](img/B14091_13_06.png)
- en: 'Figure 13.6: AWS ECS task deﬁnition'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图13.6：AWS ECS任务定义
- en: Click on **Create** to finish the setup.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建**以完成设置。
- en: View your new **Task Definition** under **Elastic Container Service** | **Task
    Definitions**.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在**弹性容器服务** | **任务定义**下查看您的新**任务定义**。
- en: Note that the default settings will enable AWS CloudWatch logging, which is
    a way you can retroactively access the console logs of your container instance.
    In this example, a CloudWatch log group named `/ecs/lemon-mart-task` will be created.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，默认设置将启用AWS CloudWatch日志记录，这是一种您可以事后访问容器实例控制台日志的方式。在这个例子中，将创建一个名为`/ecs/lemon-mart-task`的CloudWatch日志组。
- en: View your new log group under **Cloud Watch** | **Logs**.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在**云监控** | **日志**下查看您的新日志组。
- en: If you're adding a container that needs to persist data, the task definition
    allows you to define a volume and mount a folder to your Docker container. I've
    published a guide for configuring AWS **Elastic File System** (**EFS**) with your
    ECS container at [https://bit.ly/mount-aws-efs-ecs-container](https://bit.ly/mount-aws-efs-ecs-container).
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您添加的容器需要持久化数据，任务定义允许您定义一个卷并将文件夹挂载到您的Docker容器中。我发布了一个关于如何配置AWS **弹性文件系统（EFS**）与您的ECS容器的指南，请参阅[https://bit.ly/mount-aws-efs-ecs-container](https://bit.ly/mount-aws-efs-ecs-container)。
- en: Creating an elastic load balancer
  id: totrans-167
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建一个弹性负载均衡器
- en: 'In a highly available deployment, you want to be running two instances of your
    container, as defined by the task definition we just created, across two different
    **Availability Zones** (**AZs**). For this kind of dynamic scaling out and scaling
    in, we need to configure an **Application Load Balancer** (**ALB**) to handle
    request routing and draining:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在高可用性部署中，您希望运行两个容器实例，正如我们刚才创建的任务定义所定义的，跨越两个不同的**可用区（AZs**）。对于这种动态扩展和缩减，我们需要配置一个**应用程序负载均衡器（ALB**）来处理请求路由和排空：
- en: On a separate tab, navigate to **EC2** | **Load Balancers** | **Create Load
    Balancer**.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在另一个选项卡上，导航到**EC2** | **负载均衡器** | **创建负载均衡器**。
- en: Create an **Application Load Balancer**.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个**应用程序负载均衡器**。
- en: Enter **Name** as `lemon-mart-alb`.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**名称**设置为`lemon-mart-alb`。
- en: In order to support SSL traffic under listeners, you can add a new listener
    for HTTPS on port `443`. An SSL setup can be achieved conveniently via AWS services
    and wizards. During the ALB configuration process, AWS offers links to these wizards
    to create your certificates. However, it is an involved process and one that can
    vary depending on your existing domain hosting and SSL certification setup. I
    will be skipping over SSL-related configuration in this book. You can find SSL
    related steps in the guide I've published at [https://bit.ly/setupAWSECSCluster](https://bit.ly/setupAWSECSCluster).
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了在监听器下支持SSL流量，您可以在端口`443`上添加一个新的HTTPS监听器。通过AWS服务和向导，可以方便地实现SSL设置。在ALB配置过程中，AWS提供了链接到这些向导的选项，以创建您的证书。然而，这是一个复杂的过程，并且可能因您现有的域名托管和SSL证书设置而有所不同。在这本书中，我将跳过与SSL相关的配置。您可以在我在[https://bit.ly/setupAWSECSCluster](https://bit.ly/setupAWSECSCluster)发布的指南中找到与SSL相关的步骤。
- en: Under **Availability Zones**, select the **VPC** that was created for your **fargate-cluster**.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**可用区**下，选择为您的**fargate-cluster**创建的**VPC**。
- en: Select all AZs listed.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择列出的所有AZs。
- en: 'Expand **Tags** and add a key/value pair to be able to identify the ALB, like
    `"App": "LemonMart"`.'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '展开**标签**并添加一个键/值对，以便能够识别ALB，例如`"App": "LemonMart"`。'
- en: 'Click on **Next: Configure Security Settings**.'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下一步：配置安全设置**。
- en: If you added an HTTPS listener, you will see options to configure a certificate.
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您添加了HTTPS监听器，您将看到配置证书的选项。
- en: If configuring a certificate, click on **Choose a certificate from ACM** (AWS
    Certificate Manager) and select the **Default ELB security policy**.
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果配置证书，请点击**从ACM选择证书**（AWS证书管理器）并选择**默认ELB安全策略**。
- en: If you never created a certificate, click on the **Request a new certificate
    from ACM** link to create one. If you have created a certificate before, then
    go to **Certificate Manager** to create a new one. Then, refresh and select your
    certificate.
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您从未创建过证书，请点击**从ACM请求新的证书**链接来创建一个。如果您之前创建过证书，请转到**证书管理器**创建一个新的。然后，刷新并选择您的证书。
- en: 'Click on **Next: Configure Security Groups**.'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下一步：配置安全组**。
- en: Create a new cluster-specific security group, `lemon-mart-sg`, only allowing
    port `80` inbound or `443` if using HTTPS.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的集群特定安全组`lemon-mart-sg`，仅允许端口`80`入站或如果使用HTTPS则允许端口`443`入站。
- en: When creating your cluster service in the next section, ensure that the security
    group created here is the one selected during service creation. Otherwise, your
    ALB won't be able to connect to your instances.
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在下一节创建集群服务时，请确保此处创建的安全组是在服务创建期间选择的。否则，您的ALB将无法连接到您的实例。
- en: 'Click on **Next: Configure Routing**.'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下一步：配置路由**。
- en: Name a new **Target group** as `lemon-mart-target-group`.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为新的**目标组**命名为`lemon-mart-target-group`。
- en: Change the protocol type from `instance` to `ip`.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将协议类型从`instance`更改为`ip`。
- en: Under **Health check**, keep the default route, `/`, if serving a website on
    HTTP.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**健康检查**下，如果通过HTTP提供服务，请保留默认路由`/`。
- en: Health checks are critical for scaling and deployment operations to work. This
    is the mechanism that AWS can use to check whether an instance has been created
    successfully or not.
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 健康检查对于扩展和部署操作至关重要。这是AWS可以用来检查实例是否成功创建的机制。
- en: If deploying an API and/or redirecting all HTTP calls to HTTPS, ensure that
    your app defines a custom route that is not redirected to HTTPS. On an HTTP server,
    `GET /healthCheck` returns a simple 200 message saying `I'm healthy` and verifying
    that this does not redirect to HTTPS. Otherwise, you will go through a lot of
    pain and suffering trying to figure out what's wrong, as all health checks fail
    and deployments inexplicably fail. `duluca/minimal-node-web-server` provides HTTPS
    redirection, along with an HTTP-only `/healthCheck` endpoint out of the box. With
    `duluca/minimal-nginx-web-server`, you will need to provide your own configuration.
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果部署API和/或重定向所有HTTP调用到HTTPS，请确保您的应用程序定义了一个自定义路由，该路由不会被重定向到HTTPS。在HTTP服务器上，`GET
    /healthCheck`返回一个简单的200消息，表示`I'm healthy`并验证这不会重定向到HTTPS。否则，您将经历很多痛苦和苦难，试图找出问题所在，因为所有健康检查都会失败，部署也会莫名其妙地失败。`duluca/minimal-node-web-server`提供HTTPS重定向，以及一个开箱即用的HTTP-only
    `/healthCheck`端点。使用`duluca/minimal-nginx-web-server`，您需要提供自己的配置。
- en: 'Click on **Next: Register Targets**.'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下一步：注册目标**。
- en: Do *not* register any **Targets** or **IP Ranges**. ECS Fargate will magically
    manage this for you. If you do so yourself, you will provision a semi-broken infrastructure.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**不要**注册任何**目标**或**IP范围**。ECS Fargate会神奇地为您管理这些。如果您自己这样做，您将配置一个半损坏的基础设施。'
- en: 'Click on **Next: Review**; your ALB settings should look similar to the ones
    shown:![](img/B14091_13_07.png)'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下一步：审查**；您的ALB设置应类似于图中所示![img/B14091_13_07.png]
- en: 'Figure 13.7: AWS Application Load Balancer settings'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图13.7：AWS应用程序负载均衡器设置
- en: Click on **Create** to finish the setup.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建**以完成设置。
- en: You will be using `lemon-mart-alb` when creating your cluster service in the
    next section.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节创建集群服务时，您将使用`lemon-mart-alb`。
- en: Creating a cluster service
  id: totrans-195
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建集群服务
- en: 'Now, we will bring it all together by creating a service in our cluster using
    the task definition and the ALB we created:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将通过在集群中使用任务定义和创建的ALB来整合所有内容：
- en: Navigate to **Elastic Container Service**.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**弹性容器服务**。
- en: Click on **Clusters** | **fargate-cluster**.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**集群** | **fargate-cluster**。
- en: Under the **Services** tab, click on **Create**.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**服务**选项卡下，点击**创建**。
- en: Select `Fargate` for **Launch type**.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**启动类型**为`Fargate`。
- en: Select the task definition you created earlier.
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择您之前创建的任务定义。
- en: Note that task definitions are versioned, such as `lemon-mart-task:1`. If you
    were to make a change to the task definition, AWS would create `lemon-mart-task:2`.
    You would need to update the service with this new version for your changes to
    take effect.
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，任务定义是版本化的，例如`lemon-mart-task:1`。如果您要更改任务定义，AWS将创建`lemon-mart-task:2`。您需要使用这个新版本更新服务，以便您的更改生效。
- en: Enter **Service name** as `lemon-mart-service`.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**服务名称**输入为`lemon-mart-service`。
- en: For **Number of tasks**, select `2`.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**任务数量**，选择`2`。
- en: For **Minimum healthy percent**, select `50`.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**最小健康百分比**，选择`50`。
- en: For **Maximum percent**, select `200`.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**最大百分比**，选择`200`。
- en: Stick with the **Rolling update** deployment type, as we'll implement our own
    blue/green deployment strategy.
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 保持**滚动更新**部署类型，因为我们将实现自己的蓝绿部署策略。
- en: Click on **Next** **step**.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下一步** **步骤**。
- en: Set **Minimum healthy percent** to `100` for high availability even during deployment.
    Fargate pricing is based on usage per second, so while deploying your application,
    you will be charged extra for the additional instances, while the old ones are
    being deprovisioned.
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了在部署期间实现高可用性，将**最小健康百分比**设置为`100`。Fargate定价基于每秒的使用量，因此在部署应用程序时，您将为额外的实例支付额外费用，而旧的实例正在被取消配置。
- en: Under **Configure network**, select the same `VPC` as your cluster from earlier.
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**配置网络**下，选择与您之前集群相同的`VPC`。
- en: Select all subnets that are available; there should be at least two for high
    availability.
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择所有可用的子网；对于高可用性，至少应该有两个。
- en: Select the security group you created in the previous section, named `lemon-mart-sg`.
    (If you can't see it, refresh the page.)
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择您在上一节中创建的安全组，命名为`lemon-mart-sg`。（如果您看不到它，请刷新页面。）
- en: Select the **Load Balancer** type as **Application Load Balancer**.
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**负载均衡器**类型为**应用程序负载均衡器**。
- en: Select the **lemon-mart-alb** option.
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**lemon-mart-alb**选项。
- en: Add **Container port** to the ALB, such as `80` or `3000`, by clicking on the
    **Add to Load Balancer** button.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击**添加到负载均衡器**按钮，将**容器端口**（例如`80`或`3000`）添加到ALB。
- en: Select the **Production listener port** that you have already defined.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择您已经定义的**生产监听端口**。
- en: Select the **Target group** you have already defined, `lemon-mart-target-group`.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择您已经定义的**目标组**，`lemon-mart-target-group`。
- en: Uncheck **Enable service discovery integration**.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 取消选择**启用服务发现集成**。
- en: Click on **Next step**.
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下一步**。
- en: If you'd like your instances to scale out and in automatically, when their capacities
    reach a certain limit, then set **Auto Scaling**.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您希望实例在达到一定容量限制时自动扩展和缩小，请设置**自动扩展**。
- en: I would recommend skipping the setup of auto scaling during the initial setup
    of your service to make it easier to troubleshoot any potential configuration
    issues. You can come back and set it up later. Automatic task scaling policies
    rely on alarms, such as CPU utilization. In *Chapter 14*, *Google Analytics and
    Advanced Cloud Ops*, in the *Cost per user in scalable environment* section, you
    can read about calculating your optimum target server utilization and set your
    alarms based on this number.
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我建议在服务初始设置期间跳过自动扩展的设置，以便更容易地调试任何潜在的配置问题。您可以在稍后回来设置它。自动任务扩展策略依赖于警报，例如CPU利用率。在*第14章*，*Google
    Analytics和高级云操作*，*可扩展环境中的每用户成本*部分，您可以了解如何计算您的最佳目标服务器利用率并根据这个数字设置警报。
- en: Click on **Next step** and review your changes, as illustrated:![](img/B14091_13_08.png)
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下一步**并审查您的更改，如图所示：![](img/B14091_13_08.png)
- en: 'Figure 13.8: AWS Fargate cluster service settings'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图13.8：AWS Fargate集群服务设置
- en: Finally, click on **Create Service** to finish the setup.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，点击**创建服务**以完成设置。
- en: Observe your new service under **Elastic Container Service** | **Clusters**
    | **fargate-cluster** | **lemon-mart-service**. Until you publish an image to
    your container repository, your AWS service won't be able to provision an instance,
    since the health check will continually fail. After you publish an image, you
    will want to ensure that there are no errors present in the **Events** tab for
    your service.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在**弹性容器服务** | **集群** | **fargate-cluster** | **lemon-mart-service**下观察您的新服务。在您将镜像发布到容器仓库之前，您的AWS服务将无法部署实例，因为健康检查将不断失败。发布镜像后，您需要确保在服务的**事件**标签页中没有错误。
- en: AWS is a complicated beast and with Fargate, you can avoid a lot of complexity.
    However, if you're interested in setting up your own ECS cluster using your own
    EC2 instances, you can get significant discounts with reserved instances of 1-3
    years. I have a 75+ step setup guide available at [https://bit.ly/setupAWSECSCluster](https://bit.ly/setupAWSECSCluster).
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: AWS是一个复杂的野兽，有了Fargate，您可以避免很多复杂性。然而，如果您有兴趣使用自己的EC2实例设置自己的ECS集群，您可以通过1-3年的预留实例获得显著的折扣。我有一个75+步的设置指南可供参考，链接为[https://bit.ly/setupAWSECSCluster](https://bit.ly/setupAWSECSCluster)。
- en: We have executed a lot of steps manually to create our cluster. AWS CloudFormation
    resolves this issue by offering configuration templates that you can customize
    to your needs or script your own templates from scratch. If you would like to
    get serious about AWS, this kind of code-as-infrastructure setup is definitely
    the way to go.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 我们手动执行了许多步骤来创建我们的集群。AWS CloudFormation通过提供可定制的配置模板来解决这个问题，您可以根据自己的需求进行定制，或者从头开始编写自己的模板。如果您想认真对待AWS，这种代码即基础设施的设置绝对是您应该采取的方式。
- en: For production deployments, ensure that your configuration is defined by a CloudFormation
    template, so it can be easily re-provisioned not if, but when a deployment-related
    faux pas occurs.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 对于生产部署，确保您的配置由CloudFormation模板定义，这样它就可以在部署相关的错误发生时轻松重新部署。不是如果，而是当部署相关的错误发生时。
- en: Configuring the DNS
  id: totrans-229
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置DNS
- en: To connect a domain or a subdomain name to your app, you must configure your
    DNS to point to the ALB. AWS offers the Route 53 service to manage your domain.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 要将域名或子域名连接到您的应用程序，您必须配置您的DNS以指向ALB。AWS提供Route 53服务来管理您的域名。
- en: 'Route 53 makes it easy to assign a domain or a subdomain to an ALB dynamically:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: Route 53使动态地将域名或子域名分配给ALB变得容易：
- en: Navigate to **Route 53** | **Hosted Zones**.
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**Route 53** | **托管区域**。
- en: If you already have a domain registered, select it; otherwise, register it with
    **Create Hosted Zone**.
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您已经注册了域名，请选择它；否则，使用**创建托管区域**注册它。
- en: Note that you would need to re-assign the nameservers of your domain to the
    AWS one for this to take effect.
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，您需要将域名的名称服务器重新分配到AWS以使此操作生效。
- en: Click on **Create record set**.
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建记录集**。
- en: Enter **Name** as `lemonmart`.
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入**名称**为`lemonmart`。
- en: Set **Alias** to `yes`.
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**别名**设置为`yes`。
- en: Select **lemon-mart-alb** from the load balancer list.
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从负载均衡器列表中选择**lemon-mart-alb**。
- en: Click on **Create** to finish the setup:![](img/B14091_13_09.png)
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建**以完成设置：![img/B14091_13_09.png](img/B14091_13_09.png)
- en: 'Figure 13.9: Route 53 – Create Record Set'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图13.9：Route 53 – 创建记录集
- en: Now, your site will be reachable on the subdomain you just defined, for example,
    [http://lemonmart.angularforenterprise.com](http://lemonmart.angularforenterprise.com).
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您的网站将可以通过您刚刚定义的子域名访问，例如，[http://lemonmart.angularforenterprise.com](http://lemonmart.angularforenterprise.com)。
- en: If you don't use Route 53, don't panic. On your domain provider's website, edit
    the `Zone` file to create an A record to the ALB's DNS address and you're done.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不使用Route 53，请不要慌张。在您的域名提供商网站上，编辑`Zone`文件以创建指向ALB DNS地址的A记录，然后您就完成了。
- en: Getting the ALB DNS name
  id: totrans-243
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 获取ALB DNS名称
- en: 'In order to get your load balancer''s DNS address, perform these steps:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 为了获取您的负载均衡器的DNS地址，执行以下步骤：
- en: Navigate to **EC2** | **Load Balancers**.
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**EC2** | **负载均衡器**。
- en: Select **lemon-mart-alb**.
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**lemon-mart-alb**。
- en: 'In the **Description** tab, note the DNS name; consider this example:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**描述**选项卡中，注意DNS名称；考虑以下示例：
- en: '[PRE10]'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now that we configured AWS ECS Fargate, let's prep our Angular app to be deployed
    to AWS.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经配置了AWS ECS Fargate，让我们准备我们的Angular应用程序以便部署到AWS。
- en: Adding npm scripts for AWS
  id: totrans-250
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加npm脚本用于AWS
- en: 'Just like npm scripts for Docker, I have developed a set of scripts, called
    **npm scripts for AWS**, that work on Windows 10 and macOS. These scripts will
    allow you to upload and release your Docker images in spectacular, no-downtime,
    blue/green fashion. You can get the latest version of these scripts and automatically
    configure them in your project by executing the following steps:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 就像Docker的npm脚本一样，我开发了一套名为**npm脚本用于AWS**的脚本，这些脚本在Windows 10和macOS上运行。这些脚本将允许您以壮观、无停机、蓝绿方式上传和发布您的Docker镜像。您可以通过执行以下步骤获取这些脚本的最新版本并在项目中自动配置它们：
- en: We are configuring these settings on the **lemon-mart** project.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在**lemon-mart**项目中配置这些设置。
- en: 'Install the npm scripts for the AWS ECS task:'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装AWS ECS任务的npm脚本：
- en: '[PRE11]'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Apply the npm scripts for Docker configuration:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用npm脚本用于Docker的配置：
- en: '[PRE12]'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now let''s configure the scripts:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们配置脚本：
- en: Ensure that `mrm-task-npm-docker` scripts are set up in your project.
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保在您的项目中设置了`mrm-task-npm-docker`脚本。
- en: 'Create a `.env` file and set `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`:'
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`.env`文件并设置`AWS_ACCESS_KEY_ID`和`AWS_SECRET_ACCESS_KEY`：
- en: '[PRE13]'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Ensure that your `.env` file is in your `.gitignore` file to protect your secrets.
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您的`.env`文件已包含在`.gitignore`文件中，以保护您的机密信息。
- en: 'Install or upgrade to the latest AWS CLI:'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装或升级到最新的AWS CLI：
- en: On macOS, `brew install awscli`
  id: totrans-263
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在macOS上，`brew install awscli`
- en: On Windows, `choco install awscli`
  id: totrans-264
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Windows上，`choco install awscli`
- en: 'Log in to the AWS CLI with your credentials:'
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您的凭证登录AWS CLI：
- en: Run `aws configure`.
  id: totrans-266
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`aws configure`。
- en: You'll need your **Access Key ID** and **Secret Access Key** from when you configured
    your IAM account.
  id: totrans-267
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您需要从配置IAM账户时获取您的**访问密钥ID**和**秘密访问密钥**。
- en: Set **Default region name** as `us-east-1`.
  id: totrans-268
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**默认区域名称**设置为`us-east-1`。
- en: 'Update `package.json` to add a new `config` property with the following configuration
    properties:'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`package.json`以添加一个新的`config`属性，包含以下配置属性：
- en: '[PRE14]'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Ensure that you update `package.json` from when you configured npm scripts for
    Docker so that the `imageRepo` property has the address of your new ECS repository.
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保您已从配置npm脚本用于Docker时更新`package.json`，以便`imageRepo`属性具有您的新ECS存储库的地址。
- en: 'Ensure AWS scripts have been added to `package.json`, as illustrated:'
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保已将AWS脚本添加到`package.json`中，如图所示：
- en: '[PRE15]'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Check your AWS CLI version by executing `aws --version`. Depending on your
    version, your `aws:login` needs to be different. The preceding script shows login
    scripts for AWS CLI v1\. If you have v2, your login commands will look like the
    following scripts:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 通过执行`aws --version`来检查您的AWS CLI版本。根据您的版本，您的`aws:login`可能需要不同。前面的脚本显示了AWS CLI
    v1的登录脚本。如果您有v2，您的登录命令将类似于以下脚本：
- en: '**On macOS / Linux**:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '**在macOS / Linux上**：'
- en: aws ecr get-login-password --region $npm_package_config_awsRegion | docker login
    --username AWS --password-stdin $npm_package_config_imageRepo
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '`aws ecr get-login-password --region $npm_package_config_awsRegion | docker
    login --username AWS --password-stdin $npm_package_config_imageRepo`'
- en: '**On Windows**:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '**在Windows上**：'
- en: (Get-ECRLoginCommand).Password | docker login --username AWS --password-stdin
    $npm_package_config_imageRepo:latest
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: (Get-ECRLoginCommand).Password | docker login --username AWS --password-stdin
    $npm_package_config_imageRepo:latest
- en: '`npm run aws:login` calls platform-specific commands that automate an otherwise
    multi-step action to get a `docker login` command from the AWS CLI tool, as shown:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '`npm run aws:login`调用平台特定的命令，自动执行通常需要多步操作的动作，从AWS CLI工具获取`docker login`命令，如下所示：'
- en: '[PRE16]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'You first execute `aws ecr get-login` and then copy-paste the resulting `docker
    login` command and execute it so that your local Docker instance is pointed to
    AWS ECR. Now let''s see how we can deploy a built container:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 您首先执行`aws ecr get-login`，然后复制粘贴生成的`docker login`命令并执行它，以便您的本地Docker实例指向AWS ECR。现在让我们看看我们如何部署构建的容器：
- en: '[PRE17]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: We first build the NGINX version of the Docker image for our web app because
    we're listening to port `80` on ECS. Then, publish the container to ECR and finally
    execute `npm run aws:deploy`, which uses the `silintl/ecs-deploy` Docker container
    that runs a blue/green deployment.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先构建我们的Web应用的NGINX版本Docker镜像，因为我们正在ECS上监听端口`80`。然后，将容器发布到ECR，最后执行`npm run
    aws:deploy`，它使用运行蓝色/绿色部署的`silintl/ecs-deploy` Docker容器。
- en: The details of how blue/green deployment works using ECS commands are beyond
    the scope of this book. To see more examples using native AWS ECS commands, refer
    to the `aws-samples` repository at [https://github.com/aws-samples/ecs-blue-green-deployment](https://github.com/aws-samples/ecs-blue-green-deployment).
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 使用ECS命令如何进行蓝色/绿色部署的详细信息超出了本书的范围。要查看更多使用原生AWS ECS命令的示例，请参阅[https://github.com/aws-samples/ecs-blue-green-deployment](https://github.com/aws-samples/ecs-blue-green-deployment)的`aws-samples`存储库。
- en: 'We can group our commands together to execute them as a singular `release`
    command, as shown here:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将我们的命令组合在一起，作为一个单独的`release`命令来执行，如下所示：
- en: '[PRE18]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Finally, `npm run aws:release` simply runs `aws:login, docker:publish` from
    the npm scripts for Docker and `aws:deploy` commands in the right order.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`npm run aws:release`简单地按照正确的顺序从npm脚本中运行`aws:login`、`docker:publish`和`aws:deploy`命令。
- en: Publish
  id: totrans-288
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发布
- en: 'Your project is configured to be deployed on AWS. You mostly need to use two
    of the commands we created to build and publish an image:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 您的项目配置为在AWS上部署。您主要需要使用我们创建的两个命令来构建和发布镜像：
- en: 'Execute `docker:debug` to test, build, tag, run, tail, and launch your app
    in a browser to test the image:'
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行`docker:debug`来测试、构建、标记、运行、跟踪并在浏览器中启动您的应用程序以测试镜像：
- en: '[PRE19]'
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Execute `aws:release` to configure Docker login with AWS, publish your latest
    image build, and release it on ECS:'
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行`aws:release`以配置Docker登录AWS，发布最新的镜像构建，并在ECS上发布：
- en: '[PRE20]'
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Note that when running multiple commands back to back and one of the commands
    exits with status `1`, then npm considers this a failure. However, this doesn't
    necessarily mean that your action failed. Always scroll through the terminal outputs
    to see if any real errors were thrown.
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，当连续运行多个命令，其中一个命令以状态`1`退出时，npm将其视为失败。然而，这并不一定意味着您的操作失败。始终滚动查看终端输出，以查看是否抛出了任何真实错误。
- en: Verify that your tasks are up and running at the **Service** level:![](img/B14091_13_10.png)
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证您的任务在**服务**级别上是否运行和运行：![img/B14091_13_10.png](img/B14091_13_10.png)
- en: 'Figure 13.10: AWS ECS service'
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图13.10：AWS ECS服务
- en: Ensure that **Running count** and **Desired count** are the same. A mismatch
    or a deploy taking a very long time usually means that the health check on your
    new container is failing. Check out the **Events** tab for more information. Your
    container is either failing to start up or you're likely listening to the wrong
    port.
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保运行计数和期望计数相同。不匹配或部署时间非常长通常意味着您的新容器上的健康检查失败。查看**事件**选项卡以获取更多信息。您的容器可能无法启动，或者您可能监听的是错误的端口。
- en: Verify that your instances are running at the **Task** level:![](img/B14091_13_11.png)
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证您的实例在**任务**级别上是否运行：![img/B14091_13_11.png](img/B14091_13_11.png)
- en: 'Figure 13.11: AWS ECS task instance'
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图13.11：AWS ECS任务实例
- en: Note the **Public IP** address and navigate to it; for example, `http://54.164.92.137`,
    and you should see your application or LemonMart running.
  id: totrans-300
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意 **公共 IP** 地址并导航到它；例如，`http://54.164.92.137`，你应该能看到你的应用程序或 LemonMart 正在运行。
- en: Verify that the **Load Balancer** setup is correct at the DNS level.
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证在 DNS 层面上 **负载均衡器** 设置是否正确。
- en: Navigate to the **ALB DNS address**, for example [http://lemon-mart-alb-681490029.us-east-1.elb.amazonaws.com](http://lemon-mart-alb-681490029.us-east-1.elb.amazonaws.com),
    and confirm that the app renders as follows:![](img/B14091_13_12.png)
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 **ALB DNS 地址**，例如 [http://lemon-mart-alb-681490029.us-east-1.elb.amazonaws.com](http://lemon-mart-alb-681490029.us-east-1.elb.amazonaws.com)，并确认应用程序渲染如下：![图片](img/B14091_13_12.png)
- en: 'Figure 13.12: LemonMart running on AWS Fargate'
  id: totrans-303
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 13.12：LemonMart 在 AWS Fargate 上运行
- en: Et voilà! Your site should be up and running.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: Et voilà！你的网站应该已经上线并运行。
- en: 'In subsequent releases, following your first, you will be able to observe blue-green
    deployment in action, as shown:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 在随后的版本中，在你第一次之后，你将能够观察到蓝绿部署的实际操作，如下所示：
- en: '![](img/B14091_13_13.png)'
  id: totrans-306
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B14091_13_13.png)'
- en: 'Figure 13.13: AWS Service during blue-green deployment'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.13：AWS 服务在蓝绿部署期间
- en: There are two tasks running, with two new ones being provisioned. While the
    new tasks are being verified, **Running count** will rise up to four tasks. After
    the new tasks are verified and the connections from old ones are drained, **Running
    count** will return to two.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 有两个任务正在运行，同时还有两个新的任务正在配置。当新的任务正在验证时，**运行计数**将上升到四个任务。在新任务验证并通过旧任务的连接被释放后，**运行计数**将回到两个。
- en: You can automate your deployments by configuring CircleCI with your AWS credentials,
    using a container that has the `awscli` tool installed and running npm scripts
    for AWS. With this technique, you can achieve continuous deployment to a staging
    environment or continuous delivery to a production environment.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过配置 CircleCI 并使用安装了 `awscli` 工具的容器以及运行 AWS 的 npm 脚本来自动化你的部署。使用这种技术，你可以实现持续部署到预发布环境或持续交付到生产环境。
- en: Deploying to AWS using CircleCI
  id: totrans-310
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 CircleCI 部署到 AWS
- en: In *Chapter 9*, *DevOps Using Docker*, we implemented a CircleCI pipeline based
    on a multi-stage `Dockerfile`, which resulted in a tar and gzipped Docker image.
    We also covered how to implement a deploy step using CircleCI. Leveraging what
    we learned in this chapter, we can combine the two strategies so we can deploy
    to AWS using CircleCI.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *第 9 章*，*使用 Docker 的 DevOps* 中，我们基于多阶段 `Dockerfile` 实现了一个 CircleCI 管道，这产生了一个
    tar 和 gzip 压缩的 Docker 镜像。我们还介绍了如何使用 CircleCI 实现部署步骤。利用本章所学，我们可以结合两种策略，以便使用 CircleCI
    部署到 AWS。
- en: For an AWS deployment, you can use the `aws-cli` orb and a `deploy` job. The
    `deploy` job will have steps to restore the built Docker image from the cache,
    log in to AWS, and push the image to your AWS ECS container repository.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 AWS 部署，你可以使用 `aws-cli` orb 和一个 `deploy` 作业。`deploy` 作业将包含从缓存中恢复构建的 Docker
    镜像、登录 AWS 并将镜像推送到你的 AWS ECS 容器仓库的步骤。
- en: On the **lemon-mart** repo, the `config.yml` file for this section is named
    `.circleci/config.docker-integration.yml`. You can also find a pull request that
    executes the YML file from this chapter on CircleCI at [https://github.com/duluca/lemon-mart/pull/27](https://github.com/duluca/lemon-mart/pull/27)
    using the branch `deploy_aws`.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 在 **lemon-mart** 仓库中，本节使用的 `config.yml` 文件名为 `.circleci/config.docker-integration.yml`。你还可以在
    CircleCI 上找到本章的 YML 文件对应的 pull request，网址为 [https://github.com/duluca/lemon-mart/pull/27](https://github.com/duluca/lemon-mart/pull/27)，使用分支
    `deploy_aws`。
- en: For pushing the containers, we then deploy by running `npm run aws:deploy`.
    Let's add a new `deploy` job to our `config.yml` file.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 为了推送容器，我们通过运行 `npm run aws:deploy` 进行部署。让我们在 `config.yml` 文件中添加一个新的 `deploy`
    作业。
- en: Under **CircleCI Account Settings** or **Organization Settings**, add a new
    **context** named `aws`. Set the `AWS_ACCOUNT_ID`, `AWS_ACCESS_KEY_ID`, `AWS_SECRET_ACCESS_KEY`,
    and `AWS_DEFAULT_REGION` environment variables as a part of the context.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 在 **CircleCI 账户设置** 或 **组织设置** 下，添加一个名为 `aws` 的新 **上下文**。将 `AWS_ACCOUNT_ID`、`AWS_ACCESS_KEY_ID`、`AWS_SECRET_ACCESS_KEY`
    和 `AWS_DEFAULT_REGION` 环境变量作为上下文的一部分设置。
- en: 'See the configuration changes here:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里查看配置更改：
- en: '[PRE21]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: We configure the `aws-cli` orb with the `aws-cli/setup` job. We then execute
    `npm ci`, so we can run our npm script later on. We restore the `.env` file using
    CircleCI environment variables. We configure Docker with our AWS ECR login information,
    so we can push containers to it. We store `built-image.tar.gz` from the prior
    step and load it using the `docker load` comment. We tag and push the image to
    ECR. Finally, we execute `npm run aws:deploy`, which triggers our blue/green deployment.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `aws-cli/setup` 作业配置 `aws-cli` orb。然后执行 `npm ci`，这样我们就可以稍后运行我们的 npm 脚本。我们使用
    CircleCI 环境变量恢复 `.env` 文件。我们使用 AWS ECR 登录信息配置 Docker，这样我们就可以将其容器推送到它。我们将前一步骤的
    `built-image.tar.gz` 存储起来，并使用 `docker load` 命令加载它。我们给镜像打标签并推送到 ECR。最后，我们执行 `npm
    run aws:deploy`，这触发了我们的蓝绿部署。
- en: 'Last, but not least, we update `workflows` to include the `deploy` job and
    configure the `aws context` we defined earlier:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，我们更新 `workflows` 以包括 `deploy` 作业并配置我们之前定义的 `aws context`：
- en: '[PRE22]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Getting the context configured in CircleCI correctly is critically important.
    If misconfigured, you will find yourself in a Kafkaesque labyrinth of errors,
    bad documentation, and misery. Don't say that I didn't warn you.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 在 CircleCI 中正确配置上下文至关重要。如果配置错误，您可能会发现自己陷入一个卡夫卡式的错误迷宫、糟糕的文档和痛苦的境地。不要说我没有警告过你。
- en: 'See the screenshot of a successful deployment here:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 请在此处查看成功部署的截图：
- en: '![](img/B14091_13_14.png)'
  id: totrans-323
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B14091_13_14.png)'
- en: 'Figure 13.14: Successful CircleCI deployment to an AWS Fargate cluster'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.14：成功部署到 AWS Fargate 集群的 CircleCI
- en: Note that the deploy step takes nearly 7 minutes. This is because the blue/green
    deployment makes sure that our new deployment is healthy and then it drains connections
    from existing containers to the new ones, which with the default settings takes
    5 minutes. If the new deployment is not healthy, the deploy step will timeout
    and fail after 10 minutes.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，部署步骤需要近 7 分钟。这是因为蓝绿部署确保我们的新部署是健康的，然后它会从现有容器中移除连接到新容器，默认设置下这需要 5 分钟。如果新部署不健康，部署步骤将在
    10 分钟后超时并失败。
- en: Congratulations! Now we can continuously deploy to AWS in spectacular no-downtime,
    blue/green fashion. This is all great, but how much does a basic highly available
    configuration cost?
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！现在我们可以以无停机、蓝绿的方式持续部署到 AWS。这一切都很棒，但一个基本的高度可用配置的成本是多少呢？
- en: To avoid charges, delete `lemon-mart-service`. To do this, you need to update
    your service's number of tasks to 0 first. In addition, delete the default cluster
    created for you to avoid any unforeseen charges.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免收费，请删除 `lemon-mart-service`。为此，您需要首先将您服务的任务数量更新为 0。此外，删除为您创建的默认集群，以避免任何未预见的费用。
- en: Let's examine the costs in the next section.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在下一节中检查费用。
- en: AWS billing
  id: totrans-329
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS 账单
- en: 'My highly-available deployment of LemonMart on AWS Fargate costs roughly $45
    a month. Here''s the breakdown:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 我在 AWS Fargate 上高度可用的 LemonMart 部署每月大约花费 45 美元。以下是详细费用分解：
- en: '| **Description** | **Cost** |'
  id: totrans-331
  prefs: []
  type: TYPE_TB
  zh: '| **描述** | **费用** |'
- en: '| Amazon Simple Storage Service (S3) | $0.01 |'
  id: totrans-332
  prefs: []
  type: TYPE_TB
  zh: '| 亚马逊简单存储服务 (S3) | $0.01 |'
- en: '| AWS Data Transfer | $0.02 |'
  id: totrans-333
  prefs: []
  type: TYPE_TB
  zh: '| AWS 数据传输 | $0.02 |'
- en: '| Amazon CloudWatch | $0.00 |'
  id: totrans-334
  prefs: []
  type: TYPE_TB
  zh: '| 亚马逊云监控 | $0.00 |'
- en: '| Amazon EC2 Container Service (ECS Fargate) | $27.35 |'
  id: totrans-335
  prefs: []
  type: TYPE_TB
  zh: '| 亚马逊 EC2 容器服务 (ECS Fargate) | $27.35 |'
- en: '| Amazon Elastic Compute Cloud (EC2 Load Balancer instances) | $16.21 |'
  id: totrans-336
  prefs: []
  type: TYPE_TB
  zh: '| 亚马逊弹性计算云 (EC2 负载均衡器实例) | $16.21 |'
- en: '| Amazon EC2 Container Registry (ECR) | $0.01 |'
  id: totrans-337
  prefs: []
  type: TYPE_TB
  zh: '| 亚马逊 EC2 容器注册库 (ECR) | $0.01 |'
- en: '| Amazon Route 53 | $0.50 |'
  id: totrans-338
  prefs: []
  type: TYPE_TB
  zh: '| 亚马逊 Route 53 | $0.50 |'
- en: '| **Total** | **$44.10** |'
  id: totrans-339
  prefs: []
  type: TYPE_TB
  zh: '| **总计** | **$44.10** |'
- en: Note that the bill is very detailed, but it does accurately break down all the
    AWS services we end up using. The major costs are running two instances of our
    web server on **EC2 Container Service** (**ECS**) and running load balancers on
    **Elastic Compute Cloud** (**EC2**). Objectively speaking, $45/month may seem
    like a lot of money to host one web application. It is possible to get a lot more
    for your money if you're willing to set up your own cluster with dedicated EC2
    servers where you can pay in 1 or 3-year increments and get cost savings of up
    to 50%. A similar, highly available deployment with two instances on Heroku starts
    at $50/month with other rich features you can get access to. Similarly, two instances
    on Vercel Now will cost $30/month. Note that both Heroku and Vercel Now don't
    give you access to physically diverse availability zones. Digital Ocean, on the
    other hand, allows you to provision servers in different data centers; however,
    you must code your own infrastructure. For $15/month, you can set up your own
    highly available cluster across three servers and be able to host multiple sites
    on it.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，账单非常详细，但它确实准确地分解了我们最终使用的所有 AWS 服务。主要成本是运行我们的 Web 服务器在 **EC2 容器服务**（**ECS**）上的两个实例，以及在
    **弹性计算云**（**EC2**）上运行负载均衡器。客观地说，每月 45 美元可能看起来很多，用于托管一个 Web 应用程序。如果您愿意设置自己的集群并使用专用的
    EC2 服务器，您可以通过 1 年或 3 年的分期付款来节省高达 50% 的成本。在 Heroku 上具有两个实例的类似、高度可用的部署起价为每月 50 美元，您还可以获得其他丰富的功能。同样，Vercel
    Now 上的两个实例将花费每月 30 美元。请注意，Heroku 和 Vercel Now 都不提供对物理上不同的可用区的访问。另一方面，Digital Ocean
    允许您在不同的数据中心中部署服务器；然而，您必须自己编写基础设施代码。对于每月 15 美元，您可以在三个服务器上设置自己的高度可用集群，并能够在其上托管多个网站。
- en: Summary
  id: totrans-341
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned about the nuances and various security considerations
    in properly protecting your AWS account. We went over the concepts of right-sizing
    your infrastructure. You conducted simple load testing in an isolated manner to
    find out relative differences in performance between two web servers. Armed with
    an optimized web server, you configured an AWS ECS Fargate cluster to achieve
    a highly available cloud infrastructure. Using npm scripts for AWS, you learned
    how to script repeatable and reliable no-downtime blue/green deployments. Finally,
    you became aware of the basic costs of running your infrastructure on AWS and
    other cloud providers such as Heroku, Vercel Now, and Digital Ocean.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了在正确保护您的 AWS 账户时需要注意的细微差别和各种安全考虑。我们讨论了调整基础设施规模的概念。您以隔离的方式进行了简单的负载测试，以找出两个
    Web 服务器之间性能的相对差异。拥有优化的 Web 服务器后，您配置了 AWS ECS Fargate 集群，以实现高度可用的云基础设施。使用 npm 脚本进行
    AWS，您学习了如何编写可重复且可靠的零停机蓝/绿部署脚本。最后，您了解了在 AWS 和其他云服务提供商（如 Heroku、Vercel Now 和 Digital
    Ocean）上运行您的基础设施的基本成本。
- en: In the next and final chapter, we will complete our coverage of the breadth
    of topics that a full-stack web developer should know about when deploying applications
    on the web. We will add Google Analytics to LemonMart to measure user behavior,
    leverage advanced load testing to understand the financial impact of deploying
    a well-configured scalable infrastructure, and measure the actual use of important
    application features with custom analytics events.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章和最后一章中，我们将完成对全栈 Web 开发者在将应用程序部署到网络上时应了解的主题范围的覆盖。我们将向 LemonMart 添加 Google
    Analytics 以衡量用户行为，利用高级负载测试来了解部署良好配置的可扩展基础设施的财务影响，并使用自定义分析事件来衡量重要应用程序功能的实际使用情况。
- en: Exercise
  id: totrans-344
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: 'Deploy LemonMart''s server infrastructure, using its `docker-compse.yml` file,
    to AWS ECS. As a bonus, configure AWS ECS with AWS **Elastic Filesystem** (**EFS**)
    to persist your MongoDB data:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 LemonMart 的 `docker-compse.yml` 文件部署其服务器基础设施到 AWS ECS。作为额外奖励，配置 AWS ECS 以使用
    AWS **弹性文件系统**（**EFS**）持久化您的 MongoDB 数据：
- en: Install the ECS CLI from [https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_CLI_installation.html](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_CLI_installation.html).
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_CLI_installation.html](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_CLI_installation.html)
    安装 ECS CLI。
- en: Add `mrm-task-npm-aws` scripts to the root of `lemon-mart-server`.
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `mrm-task-npm-aws` 脚本添加到 `lemon-mart-server` 的根目录。
- en: Create a new `docker-compose.aws.yml` at version 3.0 and update it to refer
    to already published versions of your containers.
  id: totrans-348
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在版本 3.0 中创建一个新的 `docker-compose.aws.yml` 文件，并将其更新为引用您已发布的容器版本。
- en: Using the `npm run aws:publish:compose` command, deploy your app.
  id: totrans-349
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `npm run aws:publish:compose` 命令部署您的应用程序。
- en: You can use the Minimal MEAN project and the linked GitHub gists as a guide
    at [https://github.com/duluca/minimal-mean#continuous-integration-and-hosting](https://github.com/duluca/minimal-mean#continuous-integration-and-hosting).
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 Minimal MEAN 项目和相关的 GitHub gists 作为指南，在 [https://github.com/duluca/minimal-mean#continuous-integration-and-hosting](https://github.com/duluca/minimal-mean#continuous-integration-and-hosting)。
- en: Further reading
  id: totrans-351
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '*AWS Certified Solutions Architect Official Study Guide*, Joe Baron, Hisham
    Baz, et al. 2016, ISBN-13: 978-1119138556.'
  id: totrans-352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*《AWS 认证解决方案架构师官方指南》*，作者：Joe Baron, Hisham Baz 等，2016年，ISBN-13：978-1119138556。'
- en: '*Configuring AWS ECS to have access to AWS EFS*, 2018, Doguhan Uluca, [https://bit.ly/mount-aws-efs-ecs-container](https://bit.ly/mount-aws-efs-ecs-container).'
  id: totrans-353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*《配置 AWS ECS 以访问 AWS EFS》*，2018年，作者：Dogan Uluca，[https://bit.ly/mount-aws-efs-ecs-container](https://bit.ly/mount-aws-efs-ecs-container)。'
- en: '*BlueGreenDeployment*, Martin Fowler, 2010, [https://martinfowler.com/bliki/BlueGreenDeployment.html](https://martinfowler.com/bliki/BlueGreenDeployment.html).'
  id: totrans-354
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*《蓝绿部署》*，作者：Martin Fowler，2010年，[https://martinfowler.com/bliki/BlueGreenDeployment.html](https://martinfowler.com/bliki/BlueGreenDeployment.html)。'
- en: Questions
  id: totrans-355
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Answer the following questions as best as you can to ensure that you've understood
    the key concepts from this chapter without Googling. Do you need help answering
    the questions? See *Appendix D*, *Self-Assessment Answers* online at [https://static.packt-cdn.com/downloads/9781838648800_Appendix_D_Self-Assessment_Answers.pdf](https://static.packt-cdn.com/downloads/9781838648800_Appendix_D_Self-Assessment_Answers.pdf)
    or visit [https://expertlysimple.io/angular-self-assessment](https://expertlysimple.io/angular-self-assessment).
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 尽可能好地回答以下问题，以确保你已理解本章的关键概念，而无需使用 Google。你需要帮助回答这些问题吗？请参阅 *附录 D*，*自我评估答案*，在线位于
    [https://static.packt-cdn.com/downloads/9781838648800_Appendix_D_Self-Assessment_Answers.pdf](https://static.packt-cdn.com/downloads/9781838648800_Appendix_D_Self-Assessment_Answers.pdf)
    或访问 [https://expertlysimple.io/angular-self-assessment](https://expertlysimple.io/angular-self-assessment)。
- en: What are the benefits of right-sizing your infrastructure?
  id: totrans-357
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 适当规模的基础设施有哪些好处？
- en: What is the benefit of using AWS ECS Fargate over AWS ECS?
  id: totrans-358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 AWS ECS Fargate 相比 AWS ECS 的好处是什么？
- en: Did you remember to turn off your AWS infrastructure to avoid getting billed
    extra?
  id: totrans-359
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你记得关闭你的 AWS 基础设施以避免额外收费吗？
- en: What is blue/green deployment?
  id: totrans-360
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是蓝/绿部署？
