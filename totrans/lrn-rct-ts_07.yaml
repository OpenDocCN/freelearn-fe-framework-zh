- en: '7'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '7'
- en: Working with Forms
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用表单
- en: Forms are extremely common in apps, so it’s essential to be able to efficiently
    implement them. In some apps, forms can be large and complex, and getting them
    to perform well is challenging.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 表单在应用程序中非常常见，因此能够高效地实现它们至关重要。在某些应用程序中，表单可能很大且复杂，使它们表现良好是一项挑战。
- en: In this chapter, we’ll learn how to build forms in React using different approaches.
    The example form we will make here is a contact form that you would often see
    on company websites. It will contain a handful of fields and some validation logic.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何使用不同的方法在React中构建表单。我们将制作的示例表单是您在公司网站上经常看到的联系表单。它将包含一些字段和一些验证逻辑。
- en: The first approach to building a form will be to store field values in the state.
    We will see how this approach can bloat code and hurt performance. The next approach
    embraces the browser’s native form capabilities, reducing the amount of code required
    and improving performance. We will then use React Router’s `Form` component, which
    we briefly covered in [*Chapter 6*](B19051_06.xhtml#_idTextAnchor151), *Routing
    with React Router*. The final approach will be to use a popular library called
    **React Hook Form**. We’ll experience how React Hook Form helps us implement form
    validation and submission logic while maintaining excellent performance.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 构建表单的第一种方法是将字段值存储在状态中。我们将看到这种方法如何使代码膨胀并影响性能。接下来，我们将采用浏览器原生表单功能的方法，减少所需代码量并提高性能。然后我们将使用React
    Router的`Form`组件，这在[*第6章*](B19051_06.xhtml#_idTextAnchor151)中简要介绍过，*使用React Router进行路由*。最后一种方法将是使用一个名为**React
    Hook Form**的流行库。我们将体验React Hook Form如何帮助我们实现表单验证和提交逻辑，同时保持出色的性能。
- en: 'We’ll cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖以下主题：
- en: Using controlled fields
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用受控字段
- en: Using uncontrolled fields
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用非受控字段
- en: Using React Router Form
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用React Router Form
- en: Using native validation
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用原生验证
- en: Using React Hook Form
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用React Hook Form
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'We will use the following technologies in this chapter:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用以下技术：
- en: '**Browser**: A modern browser such as Google Chrome'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**浏览器**：一个现代浏览器，如Google Chrome'
- en: '**Node.js** and **npm**: You can install them from [https://nodejs.org/en/download/](https://nodejs.org/en/download/)'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Node.js**和**npm**：您可以从 [https://nodejs.org/en/download/](https://nodejs.org/en/download/)
    安装它们。'
- en: '**Visual Studio Code**: You can install it from [https://code.visualstudio.com/](https://code.visualstudio.com/)'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Visual Studio Code**: 您可以从 [https://code.visualstudio.com/](https://code.visualstudio.com/)
    安装它。'
- en: All the code snippets in this chapter can be found online at [https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/tree/main/Chapter7](https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/tree/main/Chapter7).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的所有代码片段都可以在[https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/tree/main/Chapter7](https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/tree/main/Chapter7)上找到。
- en: Using controlled fields
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用受控字段
- en: In this section, we will build the first version of our contact form. It will
    contain fields for the user’s name, email address, contact reason, and any additional
    notes the user may want to make.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将构建我们联系表单的第一个版本。它将包含用户姓名、电子邮件地址、联系原因以及用户可能希望添加的任何附加注释字段。
- en: This method will involve the use of **controlled fields**, which is where field
    values are stored in the state. We will use this approach to implement the form
    – however, in doing so, we will pay attention to the amount of code required and
    the negative impact on performance; this will help you see why other methods are
    better.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法将涉及使用**受控字段**，即字段值存储在状态中。我们将使用这种方法来实现表单 - 然而，在这样做的时候，我们将注意所需代码量及其对性能的负面影响；这将帮助您了解为什么其他方法更好。
- en: To get started, first, we need to create a React and TypeScript project, as
    in previous chapters.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，首先，我们需要创建一个React和TypeScript项目，就像之前的章节一样。
- en: Creating the project
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建项目
- en: We will develop the form using Visual Studio Code and a new Create React App
    based project setup. We’ve previously covered this several times, so we will not
    cover the steps in this chapter – instead, refer to [*Chapter 3*](B19051_03.xhtml#_idTextAnchor072),
    *Setting Up React and TypeScript*. Create the project for the contact form with
    the name of your choice.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Visual Studio Code和一个新的Create React App项目设置来开发表单。我们之前已经多次介绍过这一点，所以本章中不会介绍步骤
    - 相反，请参阅[*第3章*](B19051_03.xhtml#_idTextAnchor072)，*设置React和TypeScript*。创建一个名为您选择的联系表单的项目。
- en: We will style the form with Tailwind CSS. We have previously covered how to
    install and configure Tailwind in Create React App in [*Chapter 5*](B19051_05.xhtml#_idTextAnchor127),
    *Approaches to Styling Frontends*, so after you have created the React and TypeScript
    project, install and configure Tailwind.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 Tailwind CSS 来设置表单样式。我们之前在[*第五章*](B19051_05.xhtml#_idTextAnchor127)，“前端样式化方法”中介绍了如何在
    Create React App 中安装和配置 Tailwind，所以在你创建了 React 和 TypeScript 项目之后，安装并配置 Tailwind。
- en: 'We will use a Tailwind plugin to help us style the form – it provides nice
    styles for field elements out of the box. Carry out the steps below to install
    and configure this plugin:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 Tailwind 插件来帮助我们设置表单样式——它为字段元素提供了开箱即用的样式。按照以下步骤安装和配置此插件：
- en: 'Install this plugin by running the following command in a terminal:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中运行以下命令来安装此插件：
- en: '[PRE0]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Open `tailwind.config.js` to configure the plugin. Add the highlighted code
    to this file to tell Tailwind to use the forms plugin we just installed:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `tailwind.config.js` 来配置插件。将高亮代码添加到该文件中，以告诉 Tailwind 使用我们刚刚安装的表单插件：
- en: '[PRE1]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: That completes the project setup. Next, we will create the first version of
    the form.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这完成了项目设置。接下来，我们将创建表单的第一个版本。
- en: Creating a contact form
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建联系表单
- en: 'Now, carry out the following steps to create the first version of the contact
    form:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，按照以下步骤创建联系表单的第一个版本：
- en: 'Create a file called `ContactPage.tsx` in the `src` folder with the following
    `import` statement:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `src` 文件夹中创建一个名为 `ContactPage.tsx` 的文件，并包含以下 `import` 语句：
- en: '[PRE8]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We have imported the `useState` hook and the `FormEvent` type from React, which
    we will eventually use in the implementation.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经从 React 中导入了 `useState` 钩子和 `FormEvent` 类型，我们最终将在实现中使用它们。
- en: 'Add the following `type` alias under the import statement. This type will represent
    all the field values:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在导入语句下添加以下 `type` 别名。此类型将代表所有字段值：
- en: '[PRE9]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Add the following `function` component:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下 `function` 组件：
- en: '[PRE15]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: This displays a heading and some instructions, horizontally centered on the
    page.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在页面上水平居中显示一个标题和一些说明。
- en: 'Add the following fields inside the `form` element:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `form` 元素内部添加以下字段：
- en: '[PRE27]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: We have added fields for the user’s name, email address, contact reason, and
    additional notes. Each field label is associated with its editor by setting the
    `htmlFor` attribute to the editor’s `id` value. This helps assistive technology
    such as screen readers to read out labels when fields gain focus.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加了用户姓名、电子邮件地址、联系原因和附加注释的字段。每个字段标签都与它的编辑器相关联，通过将 `htmlFor` 属性设置为编辑器的 `id`
    值来实现。这有助于辅助技术，如屏幕阅读器，在字段获得焦点时读出标签。
- en: 'Add a `submit` button to the bottom of the `form` element as follows:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按以下方式在 `form` 元素的底部添加一个 `submit` 按钮：
- en: '[PRE50]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'The field containers will all have the same style, so create a variable for
    the style and assign it to all the field containers as follows:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 字段容器都将具有相同的样式，因此创建一个变量来存储样式，并将其分配给所有字段容器，如下所示：
- en: '[PRE61]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '[PRE79]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[PRE80]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: The fields are nicely styled now using a vertically flowing flexbox and a small
    margin under each one.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 现在字段已经使用垂直流动的 flexbox 和每个字段下方的小边距进行了很好的样式化。
- en: 'Add the state to hold the field values as follows:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按以下方式添加用于存储字段值的 `state`：
- en: '[PRE81]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[PRE82]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '[PRE83]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '[PRE84]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '[PRE85]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '[PRE86]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '[PRE87]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '[PRE88]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '[PRE90]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE90]'
- en: We have given the state the `Contact` type we created earlier and initialized
    the field values to empty strings.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经给状态赋予了之前创建的 `Contact` 类型，并将字段值初始化为空字符串。
- en: 'Bind the state to the `name` field editor as follows:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按以下方式将状态绑定到 `name` 字段编辑器：
- en: '[PRE91]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '[PRE92]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '[PRE93]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '[PRE94]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[PRE95]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '[PRE96]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '[PRE97]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '[PRE98]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '[PRE99]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '[PRE100]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '[PRE101]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '`value` is set to the current value of the state. `onChange` is triggered when
    the user fills in the input element, which we use to update the state value. To
    construct the new state object, we clone the current state and override its `name`
    property with the new value from the `onChange` parameter.'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '`value` 设置为状态的当前值。当用户填写输入元素时，会触发 `onChange`，我们使用它来更新状态值。为了构建新的状态对象，我们克隆当前状态，并用
    `onChange` 参数中的新值覆盖其 `name` 属性。'
- en: 'Repeat the same approach for the binding state to the other field editors as
    follows:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照相同的方法将状态绑定到其他字段编辑器，如下所示：
- en: '[PRE102]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '[PRE103]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '[PRE104]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '[PRE105]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '[PRE106]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE106]'
- en: '[PRE107]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '[PRE108]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[PRE109]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '[PRE110]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '[PRE111]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '[PRE112]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '[PRE113]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '[PRE114]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '[PRE115]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '[PRE116]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE116]'
- en: '[PRE117]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '[PRE118]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '[PRE119]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE119]'
- en: '[PRE120]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE120]'
- en: '[PRE121]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '[PRE122]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '[PRE123]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE123]'
- en: '[PRE124]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '[PRE125]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '[PRE126]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE126]'
- en: '[PRE127]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE127]'
- en: '[PRE128]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE128]'
- en: '[PRE129]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE129]'
- en: '[PRE130]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE130]'
- en: '[PRE131]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE131]'
- en: '[PRE132]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE132]'
- en: '[PRE133]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE133]'
- en: '[PRE134]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE134]'
- en: 'Add a submit handler to the `form` element as follows:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按以下方式向 `form` 元素添加提交处理程序：
- en: '[PRE135]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE135]'
- en: '[PRE136]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE136]'
- en: '[PRE137]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE137]'
- en: '[PRE138]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE138]'
- en: '[PRE139]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE139]'
- en: '[PRE140]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE140]'
- en: '[PRE141]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE141]'
- en: '[PRE142]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE142]'
- en: '[PRE143]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE143]'
- en: '[PRE144]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE144]'
- en: '[PRE145]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE145]'
- en: '[PRE146]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE146]'
- en: '[PRE147]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE147]'
- en: The submit handler parameter is typed using React’s `FormEvent` type. The submit
    handler function prevents the form from being sent to the server using the `preventDefault`
    method on the handler parameter. Instead of sending the form to a server, we output
    the `contact` state to the console.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 提交处理程序参数使用 React 的 `FormEvent` 类型。提交处理程序函数通过在处理程序参数上使用 `preventDefault` 方法来阻止表单被发送到服务器。而不是将表单发送到服务器，我们将
    `contact` 状态输出到控制台。
- en: 'The last step is to render `ContactPage` in the `App` component. Open `App.tsx`
    and replace its content with the following:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一步是在 `App` 组件中渲染 `ContactPage`。打开 `App.tsx` 并将其内容替换为以下内容：
- en: '[PRE148]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE148]'
- en: '[PRE149]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE149]'
- en: '[PRE150]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE150]'
- en: '[PRE151]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE151]'
- en: '[PRE152]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE152]'
- en: The `App` component simply renders the `ContactPage` page component we just
    created. The `App` component also remains a default export so that `index.tsx`
    isn’t broken.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '`App` 组件简单地渲染我们刚刚创建的 `ContactPage` 页面组件。`App` 组件也保持为默认导出，这样 `index.tsx` 就不会被破坏。'
- en: 'That completes the first iteration of the form. We will now use the form and
    discover a potential performance problem. Carry out the following steps:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 这样就完成了表单的第一轮迭代。我们现在将使用表单并发现一个潜在的性能问题。执行以下步骤：
- en: 'Run the app in development mode by executing `npm start` in the terminal. The
    form appears as follows:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在终端中执行 `npm start` 来以开发模式运行应用。表单显示如下：
- en: '![Figure 7.1 – Contact form](img/B19051_07_01.jpg)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.1 – 联系表单](img/B19051_07_01.jpg)'
- en: Figure 7.1 – Contact form
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.1 – 联系表单
- en: We are going to highlight component re-rendering using React DevTools, which
    will highlight a potential performance problem.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用 React DevTools 突出显示组件重新渲染，这将突出显示一个潜在的性能问题。
- en: Open the browser DevTools and select the **Components** panel. If there is no
    **Components** panel, ensure that the React DevTools are installed in the browser
    (see [*Chapter 3*](B19051_03.xhtml#_idTextAnchor072) for how to install React
    DevTools).
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 打开浏览器 DevTools 并选择**组件**面板。如果没有**组件**面板，请确保浏览器中已安装 React DevTools（参见[*第 3 章*](B19051_03.xhtml#_idTextAnchor072)了解如何安装
    React DevTools）。
- en: Click on the settings cog to view the React DevTools settings and tick the **Highlight
    updates when components render** option. This option will display a blue-green
    outline around components in the page that re-render.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 点击设置齿轮图标以查看 React DevTools 设置，并勾选**在组件渲染时突出显示更新**选项。此选项将在页面中重新渲染的组件周围显示蓝色绿色轮廓。
- en: 'Fill in the form and notice a bluey green outline appears around the form every
    time a character is entered into a field:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填写表单并注意每次在字段中输入字符时，表单周围都会出现蓝色绿色轮廓：
- en: '![Figure 7.2 – Highlighted re-render for every keystroke](img/B19051_07_02.jpg)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.2 – 每次按键时的突出显示重新渲染](img/B19051_07_02.jpg)'
- en: Figure 7.2 – Highlighted re-render for every keystroke
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.2 – 每次按键时的突出显示重新渲染
- en: So, every time a character is entered into a field, the whole form is re-rendered.
    This makes sense because a state change occurs when a field changes, and a state
    change causes a re-render. This isn’t a huge problem in this small form but can
    be a significant performance problem in larger forms.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，每次在字段中输入字符时，整个表单都会重新渲染。这很有道理，因为字段变化时会发生状态变化，状态变化会导致重新渲染。在这个小型表单中这不是一个大问题，但在大型表单中可能会成为一个重大的性能问题。
- en: Complete all the fields in the form and click on the **Submit** button. The
    field values are output to the console.
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成表单中的所有字段并点击**提交**按钮。字段值将输出到控制台。
- en: That completes the first iteration of the form. Keep the app running as we reflect
    on the implementation and move to the next section.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 这样就完成了表单的第一轮迭代。保持应用运行，我们反思实现并进入下一节。
- en: The key takeaway from this section is that controlling field values with the
    state can lead to performance problems. Having to bind the state to each field
    also feels a bit repetitive.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 本节的关键要点是，使用状态来控制字段值可能会导致性能问题。必须将状态绑定到每个字段也感觉有点重复。
- en: Next, we will implement a more performant and succinct version of the form.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将实现一个更高效、更简洁的表单版本。
- en: Using uncontrolled fields
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用非受控字段
- en: '**Uncontrolled fields** are the opposite of controlled fields – it’s where
    field values *aren’t* controlled by state. Instead, native browser features are
    used to obtain field values. In this section, we will refactor the contact form
    to use uncontrolled fields and see the benefits.'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '**非受控字段**与受控字段相反 – 它是字段值**不由状态控制**的地方。相反，使用原生浏览器功能来获取字段值。在本节中，我们将重构联系表单以使用非受控字段，并查看其优势。'
- en: 'Carry out the following steps:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤：
- en: Open `ContactPage.tsx` and start by removing `useState` from the React import,
    because this is no longer required.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `ContactPage.tsx` 并首先从 React 导入中移除 `useState`，因为现在不再需要它。
- en: Then, at the top of the `component` function, remove the call to `useState`
    (this iteration of the form won’t use any state).
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在 `component` 函数的顶部，移除对 `useState` 的调用（这次表单迭代将不使用任何状态）。
- en: Remove the `value` and `onChange` props from the field editors, because we are
    no longer controlling field values with the state.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从字段编辑器中移除 `value` 和 `onChange` 属性，因为我们不再使用状态来控制字段值。
- en: 'Now, add a `name` attribute on all the field editors as follows:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在所有字段编辑器上添加`name`属性，如下所示：
- en: '[PRE153]'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE153]'
- en: '[PRE154]'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE154]'
- en: '[PRE155]'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE155]'
- en: '[PRE156]'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE156]'
- en: '[PRE157]'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE157]'
- en: '[PRE158]'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE158]'
- en: '[PRE159]'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE159]'
- en: '[PRE160]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE160]'
- en: '[PRE161]'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE161]'
- en: '[PRE162]'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE162]'
- en: '[PRE163]'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE163]'
- en: '[PRE164]'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE164]'
- en: '[PRE165]'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE165]'
- en: '[PRE166]'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE166]'
- en: '[PRE167]'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE167]'
- en: '[PRE168]'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE168]'
- en: '[PRE169]'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE169]'
- en: '[PRE170]'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE170]'
- en: '[PRE171]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE171]'
- en: '[PRE172]'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE172]'
- en: '[PRE173]'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE173]'
- en: '[PRE174]'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE174]'
- en: '[PRE175]'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE175]'
- en: The `name` attribute is important because it will allow us to easily extract
    field values in the form submit handler, which we will do next.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '`name`属性很重要，因为它将允许我们在表单提交处理程序中轻松提取字段值，这是我们接下来要做的。'
- en: 'Add the following code in the submit handler to extract the field values before
    they are output to the console:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在提交处理程序中添加以下代码以在它们输出到控制台之前提取字段值：
- en: '[PRE176]'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE176]'
- en: '[PRE177]'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE177]'
- en: '[PRE178]'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE178]'
- en: '[PRE179]'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE179]'
- en: '[PRE180]'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE180]'
- en: '[PRE181]'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE181]'
- en: '[PRE182]'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE182]'
- en: '[PRE183]'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE183]'
- en: '[PRE184]'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE184]'
- en: '[PRE185]'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE185]'
- en: '[PRE186]'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE186]'
- en: '`FormData` is an interface that allows access to values in a form and takes
    in a form element in its constructor parameter. It contains a `get` method that
    returns the value of the field whose name is passed as an argument. For more information
    on `FormData`, see [https://developer.mozilla.org/en-US/docs/Web/API/FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData).'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '`FormData`是一个接口，允许访问表单中的值，并在其构造函数参数中接受一个表单元素。它包含一个`get`方法，该方法返回作为参数传递的名称的字段值。有关`FormData`的更多信息，请参阅[https://developer.mozilla.org/en-US/docs/Web/API/FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData)。'
- en: That completes the refactoring of the form. To recap, uncontrolled fields don’t
    have values stored in the state. Instead, field values are obtained using `FormData`,
    which relies on field editors having a `name` attribute.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 这样就完成了表单的重构。总结一下，非受控字段没有存储在状态中的值。相反，字段值是通过使用`FormData`获得的，这依赖于字段编辑器具有`name`属性。
- en: 'Notice the reduced code in the implementation compared to the controlled fields
    implementation. We will now try the form and check whether the form is re-rendered
    on every keystroke. Carry out the following steps:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 注意与受控字段实现相比，实现中的代码更少。现在我们将尝试表单并检查表单是否在每次按键时重新渲染。执行以下步骤：
- en: In the running app, make sure DevTools is still open with the **Highlight updates
    when the components render** option still ticked.
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在运行的应用程序中，确保DevTools仍然打开，并且**在组件渲染时突出显示更新**选项仍然勾选。
- en: Fill in the form and you will notice that the re-render outline never appears.
    This makes sense because there is no longer any state, so a re-render can’t occur
    because of a state change.
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填写表格后，你会发现重新渲染的轮廓从未出现。这很有道理，因为没有状态了，所以不会因为状态变化而重新渲染。
- en: Complete all the fields in the form and click on the **Submit** button. The
    field values are output to the console just as they were before.
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成表单中的所有字段并点击**提交**按钮。字段值将像之前一样输出到控制台。
- en: '![Figure 7.3 – Completed form with submitted data in console](img/B19051_07_03.jpg)'
  id: totrans-266
  prefs: []
  type: TYPE_IMG
  zh: '![图7.3 – 完成的表单，提交数据在控制台中](img/B19051_07_03.jpg)'
- en: Figure 7.3 – Completed form with submitted data in console
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.3 – 完成的表单，提交数据在控制台中
- en: Stop the app from running by pressing *Ctrl* + *C*.
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过按*Ctrl* + *C*停止应用程序的运行。
- en: So, this implementation is shorter, more performant, and an excellent approach
    for simple forms. The key points in the implementation are to include a `name`
    attribute for field editors and use the `FormData` interface to extract the form
    values.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这种实现更短、性能更好，是简单表单的优秀方法。实现中的关键点是包括字段编辑器的`name`属性，并使用`FormData`接口提取表单值。
- en: The current implementation is very simple though – for example, there is no
    submission success message. In the next section, we will use React Router and
    add a submission message.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 当前的实现虽然很简单 - 例如，没有提交成功消息。在下一节中，我们将使用React Router并添加提交消息。
- en: Using React Router Form
  id: totrans-271
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用React Router Form
- en: In [*Chapter 6*](B19051_06.xhtml#_idTextAnchor151), we started to learn about
    React Router’s `Form` component. We learned that `Form` is a wrapper around the
    HTML `form` element that handles the form submission. We will now cover `Form`
    in more detail and use it to provide a nice submission success message on our
    contact form.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第6章*](B19051_06.xhtml#_idTextAnchor151)中，我们开始学习React Router的`Form`组件。我们了解到`Form`是HTML
    `form`元素的包装器，用于处理表单提交。现在我们将更详细地介绍`Form`，并使用它在我们联系表单上提供漂亮的提交成功消息。
- en: 'Carry out the following steps:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤：
- en: 'First, install React Router by executing the following command in the terminal:'
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在终端中执行以下命令来安装React Router：
- en: '[PRE187]'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE187]'
- en: 'Now, let’s create a `ThankYouPage` component, which will inform the user that
    their submission has been successful. To do this, create a file called `ThankYouPage.tsx`
    in the `src` folder with the following content:'
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们创建一个`ThankYouPage`组件，它将通知用户他们的提交已成功。为此，在`src`文件夹中创建一个名为`ThankYouPage.tsx`的文件，内容如下：
- en: '[PRE188]'
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE188]'
- en: '[PRE189]'
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE189]'
- en: '[PRE190]'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE190]'
- en: '[PRE191]'
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE191]'
- en: '[PRE192]'
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE192]'
- en: '[PRE193]'
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE193]'
- en: '[PRE194]'
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE194]'
- en: '[PRE195]'
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE195]'
- en: '[PRE196]'
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE196]'
- en: '[PRE197]'
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE197]'
- en: '[PRE198]'
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE198]'
- en: '[PRE199]'
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE199]'
- en: '[PRE200]'
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE200]'
- en: '[PRE201]'
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE201]'
- en: The component uses a route parameter for the person’s name that is included
    in the thank you message.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 该组件使用一个路由参数来表示包含在感谢信息中的人名。
- en: 'Next, open `App.tsx` and add the following imports from React Router:'
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，打开 `App.tsx` 并从 React Router 中添加以下导入：
- en: '[PRE202]'
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE202]'
- en: '[PRE203]'
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE203]'
- en: '[PRE204]'
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE204]'
- en: '[PRE205]'
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE205]'
- en: '[PRE206]'
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE206]'
- en: We haven’t come across React Router’s `Navigate` component before – it is a
    component that performs navigation. We will use this in *step 5*, in the route
    definitions, to redirect from the root path to the contact page.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前没有遇到过 React Router 的 `Navigate` 组件——它是一个执行导航的组件。我们将在 *步骤 5* 中使用它，在路由定义中，从根路径重定向到联系页面。
- en: 'Add `contactPageAction` to the `import` statement for `ContactPage` and also
    import the `ThankYouPage` component:'
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `contactPageAction` 添加到 `ContactPage` 的 `import` 语句中，并导入 `ThankYouPage` 组件：
- en: '[PRE207]'
  id: totrans-300
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE207]'
- en: '[PRE208]'
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE208]'
- en: '[PRE209]'
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE209]'
- en: '[PRE210]'
  id: totrans-303
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE210]'
- en: '[PRE211]'
  id: totrans-304
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE211]'
- en: Note that `contactPageAction` doesn’t exist yet, so a compile error will occur.
    We will resolve this error in *step 9*.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`contactPageAction` 还不存在，因此将发生编译错误。我们将在 *步骤 9* 中解决这个问题。
- en: 'Still in `App.tsx`, set up routes that render the contact and thank you pages:'
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仍然在 `App.tsx` 中，设置渲染联系和感谢页面的路由：
- en: '[PRE212]'
  id: totrans-307
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE212]'
- en: '[PRE213]'
  id: totrans-308
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE213]'
- en: '[PRE214]'
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE214]'
- en: '[PRE215]'
  id: totrans-310
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE215]'
- en: '[PRE216]'
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE216]'
- en: '[PRE217]'
  id: totrans-312
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE217]'
- en: '[PRE218]'
  id: totrans-313
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE218]'
- en: '[PRE219]'
  id: totrans-314
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE219]'
- en: '[PRE220]'
  id: totrans-315
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE220]'
- en: '[PRE221]'
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE221]'
- en: '[PRE222]'
  id: totrans-317
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE222]'
- en: '[PRE223]'
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE223]'
- en: '[PRE224]'
  id: totrans-319
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE224]'
- en: '[PRE225]'
  id: totrans-320
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE225]'
- en: '[PRE226]'
  id: totrans-321
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE226]'
- en: There is an `action` property on the `contact` route that we haven’t covered
    yet – this handles form submission. We have set this to `contactPageAction`, which
    we will create in *step 9*.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `contact` 路由上有一个我们尚未涉及的 `action` 属性——它处理表单提交。我们将其设置为 `contactPageAction`，我们将在
    *步骤 9* 中创建它。
- en: 'The last task in `App.tsx` is to change the `App` component to return `RouterProvider`
    with the route definitions:'
  id: totrans-323
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`App.tsx` 中的最后一个任务是更改 `App` 组件以返回带有路由定义的 `RouterProvider`：'
- en: '[PRE227]'
  id: totrans-324
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE227]'
- en: '[PRE228]'
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE228]'
- en: '[PRE229]'
  id: totrans-326
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE229]'
- en: 'Now, open `ContactPage.tsx` and add the following imports from React Router:'
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开 `ContactPage.tsx` 并从 React Router 中添加以下导入：
- en: '[PRE230]'
  id: totrans-328
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE230]'
- en: '[PRE231]'
  id: totrans-329
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE231]'
- en: '[PRE232]'
  id: totrans-330
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE232]'
- en: '[PRE233]'
  id: totrans-331
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE233]'
- en: '[PRE234]'
  id: totrans-332
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE234]'
- en: 'In the JSX, change the `form` element to be a React Router `Form` component
    and remove the `onSubmit` attribute:'
  id: totrans-333
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 JSX 中，将 `form` 元素改为 React Router 的 `Form` 组件，并移除 `onSubmit` 属性：
- en: '[PRE235]'
  id: totrans-334
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE235]'
- en: '[PRE236]'
  id: totrans-335
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE236]'
- en: '[PRE237]'
  id: totrans-336
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE237]'
- en: We have set the form’s method to `"post"` because the form will mutate data.
    The default form method is `"get"`.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已将表单的方法设置为 `"post"`，因为表单将修改数据。默认表单方法是 `"get"`。
- en: 'Now, move the `handleSubmit` function outside the component, to the bottom
    of the file. Rename the function to `contactPageAction`, allow it to be exported,
    and make it asynchronous:'
  id: totrans-338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将 `handleSubmit` 函数移出组件，到文件的底部。将函数重命名为 `contactPageAction`，允许其导出，并使其异步：
- en: '[PRE238]'
  id: totrans-339
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE238]'
- en: '[PRE239]'
  id: totrans-340
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE239]'
- en: '[PRE240]'
  id: totrans-341
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE240]'
- en: '[PRE241]'
  id: totrans-342
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE241]'
- en: '[PRE242]'
  id: totrans-343
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE242]'
- en: '[PRE243]'
  id: totrans-344
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE243]'
- en: '[PRE244]'
  id: totrans-345
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE244]'
- en: '[PRE245]'
  id: totrans-346
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE245]'
- en: '[PRE246]'
  id: totrans-347
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE246]'
- en: '[PRE247]'
  id: totrans-348
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE247]'
- en: '[PRE248]'
  id: totrans-349
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE248]'
- en: '[PRE249]'
  id: totrans-350
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE249]'
- en: '[PRE250]'
  id: totrans-351
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE250]'
- en: This will now be a React Router action that handles part of the form submission.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 这现在将是一个处理部分表单提交的 React Router 动作。
- en: 'Change the parameters on `contactPageAction` to the following:'
  id: totrans-353
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `contactPageAction` 上的参数更改为以下内容：
- en: '[PRE251]'
  id: totrans-354
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE251]'
- en: '[PRE252]'
  id: totrans-355
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE252]'
- en: '[PRE253]'
  id: totrans-356
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE253]'
- en: React Router will pass in a `request` object when it calls this function.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 当 React Router 调用此函数时，会传入一个 `request` 对象。
- en: Remove the `e.preventDefault()` statement in `contactPageAction` because React
    Router does this for us.
  id: totrans-358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `contactPageAction` 中移除 `e.preventDefault()` 语句，因为 React Router 会为我们处理这个。
- en: 'Change the `formData` assignment to get the data from the React Router’s `request`
    object:'
  id: totrans-359
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `formData` 赋值改为从 React Router 的 `request` 对象中获取数据：
- en: '[PRE254]'
  id: totrans-360
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE254]'
- en: 'The last change to the `contactPageAction` function is to redirect to the thank
    you page at the end of the submission:'
  id: totrans-361
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对 `contactPageAction` 函数的最后更改是在提交结束时重定向到感谢页面：
- en: '[PRE255]'
  id: totrans-362
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE255]'
- en: '[PRE256]'
  id: totrans-363
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE256]'
- en: '[PRE257]'
  id: totrans-364
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE257]'
- en: '[PRE258]'
  id: totrans-365
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE258]'
- en: '[PRE259]'
  id: totrans-366
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE259]'
- en: '[PRE260]'
  id: totrans-367
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE260]'
- en: '[PRE261]'
  id: totrans-368
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE261]'
- en: '[PRE262]'
  id: totrans-369
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE262]'
- en: Remove the `FormEvent` import because this is redundant now.
  id: totrans-370
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 移除 `FormEvent` 导入，因为现在这是多余的。
- en: Run the app in development mode by executing `npm start` in the terminal.
  id: totrans-371
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在终端中执行 `npm start` 来以开发模式运行应用。
- en: The app will automatically redirect to the `Contact` page. Complete the form
    and submit it.
  id: totrans-372
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用将自动重定向到 `Contact` 页面。完成表单并提交。
- en: 'The app will redirect to the thank you page:'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 应用将重定向到感谢页面：
- en: '![Figure 7.4 – Thank you page](img/B19051_07_04.jpg)'
  id: totrans-374
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.4 – 感谢页面](img/B19051_07_04.jpg)'
- en: Figure 7.4 – Thank you page
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.4 – 感谢页面
- en: That completes this section on React Router’s form capability. Keep the app
    running as we recap and move to the next section.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 这就完成了关于 React Router 表单功能的本节内容。在我们回顾并进入下一节之前，保持应用运行。
- en: 'The key points on React Router’s `Form` component are as follows:'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: React Router 的 `Form` 组件的关键点如下：
- en: React Router’s `Form` component is a wrapper around the HTML `form` element
  id: totrans-378
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: React Router 的 `Form` 组件是 HTML `form` 元素的包装器
- en: The form is submitted to the current route by default, but can be submitted
    to a different path using the `path` attribute
  id: totrans-379
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表单默认提交到当前路由，但可以使用 `path` 属性提交到不同的路径
- en: We can write logic inside the submission process using an action function defined
    on the route that is submitted to
  id: totrans-380
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以在提交过程中使用在提交的路由上定义的动作函数来编写逻辑
- en: 'For more information on React Router’s Form component, see the following link:
    [https://reactrouter.com/en/components/form](https://reactrouter.com/en/components/form).'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 React Router 的表单组件更多信息，请参阅以下链接：[https://reactrouter.com/en/components/form](https://reactrouter.com/en/components/form)。
- en: Next, we will implement validation on the form.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将实现表单验证。
- en: Using native validation
  id: totrans-383
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用原生验证
- en: In this section, we will add the required validation to the name, email, and
    reason fields and ensure that the email matches a particular pattern. We will
    use standard HTML form validation to implement these rules.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将添加姓名、电子邮件和原因字段的必填验证，并确保电子邮件匹配特定模式。我们将使用标准HTML表单验证来实现这些规则。
- en: 'Carry out the following steps:'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤：
- en: 'In `ContactPage.tsx`, add a `required` attribute to the name, email, and reason
    field editors to add HTML form required validation for these fields:'
  id: totrans-386
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `ContactPage.tsx` 中，将 `required` 属性添加到姓名、电子邮件和原因字段编辑器，为这些字段添加 HTML 表单必填验证：
- en: '[PRE263]'
  id: totrans-387
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE263]'
- en: '[PRE264]'
  id: totrans-388
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE264]'
- en: '[PRE265]'
  id: totrans-389
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE265]'
- en: '[PRE266]'
  id: totrans-390
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE266]'
- en: '[PRE267]'
  id: totrans-391
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE267]'
- en: '[PRE268]'
  id: totrans-392
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE268]'
- en: '[PRE269]'
  id: totrans-393
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE269]'
- en: '[PRE270]'
  id: totrans-394
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE270]'
- en: '[PRE271]'
  id: totrans-395
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE271]'
- en: '[PRE272]'
  id: totrans-396
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE272]'
- en: '[PRE273]'
  id: totrans-397
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE273]'
- en: '[PRE274]'
  id: totrans-398
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE274]'
- en: '[PRE275]'
  id: totrans-399
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE275]'
- en: '[PRE276]'
  id: totrans-400
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE276]'
- en: '[PRE277]'
  id: totrans-401
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE277]'
- en: 'Add the following pattern-matching validation on the `email` field editor:'
  id: totrans-402
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `email` 字段编辑器上添加以下模式匹配验证：
- en: '[PRE278]'
  id: totrans-403
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE278]'
- en: '[PRE279]'
  id: totrans-404
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE279]'
- en: '[PRE280]'
  id: totrans-405
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE280]'
- en: '[PRE281]'
  id: totrans-406
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE281]'
- en: '[PRE282]'
  id: totrans-407
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE282]'
- en: '[PRE283]'
  id: totrans-408
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE283]'
- en: '[PRE284]'
  id: totrans-409
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE284]'
- en: This pattern will ensure that the entry is in an email format.
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 此模式将确保输入为电子邮件格式。
- en: 'In the running app, without populating any fields, submit the form. Validation
    kicks in and the form submission doesn’t complete. Instead, the name field is
    focused and an error message appears beneath it:'
  id: totrans-411
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在运行的应用程序中，不填写任何字段，提交表单。验证启动，表单提交未完成。相反，姓名字段被聚焦，并在其下方出现错误信息：
- en: '![Figure 7.5 – HTML form validation message for the name field](img/B19051_07_05.jpg)'
  id: totrans-412
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.5 – 姓名字段的 HTML 表单验证信息](img/B19051_07_05.jpg)'
- en: Figure 7.5 – HTML form validation message for the name field
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.5 – 姓名字段的 HTML 表单验证信息
- en: Note that the error message is styled slightly differently in different browsers
    – the preceding screenshot is from Firefox.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，错误信息在不同浏览器中的样式略有不同 – 上述截图来自 Firefox。
- en: Correctly fill in the name field so that it is valid. Then, move on to experiment
    with the email field validation. For example, try entering an email address without
    an @ character; you will find that the email field needs to be populated with
    a correctly formatted email address.
  id: totrans-415
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正确填写姓名字段以确保其有效。然后，继续尝试电子邮件字段验证。例如，尝试输入没有 @ 符号的电子邮件地址；你会发现电子邮件字段需要填写一个格式正确的电子邮件地址。
- en: '![Figure 7.6 – HTML form validation message for the email field](img/B19051_07_06.jpg)'
  id: totrans-416
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.6 – 电子邮件字段的 HTML 表单验证信息](img/B19051_07_06.jpg)'
- en: Figure 7.6 – HTML form validation message for the email field
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.6 – 电子邮件字段的 HTML 表单验证信息
- en: Correctly fill in the email field so that it is valid. Then, move on to experiment
    with the reason field validation. Try to select the blank reason and you will
    find that a validation error occurs.
  id: totrans-418
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正确填写电子邮件字段以确保其有效。然后，继续尝试原因字段验证。尝试选择空白原因，你会发现验证错误发生。
- en: Correctly fill in all the fields and submit the form. You will find that the
    thank you message appears as it did previously.
  id: totrans-419
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正确填写所有字段并提交表单。你会发现感谢信息如之前一样出现。
- en: Stop the app from running by pressing *CTRL* + *C*.
  id: totrans-420
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过按 *CTRL* + *C* 停止应用程序运行。
- en: 'The simplicity of the implementation of standard HTML form validation is nice.
    However, if we want to customize the validation user experience, we’ll need to
    write JavaScript to use the constraint validation API. For information on this
    API and more information on HTML form validation, see the following link: [https://developer.mozilla.org/en-US/docs/Learn/Forms/Form_validation](https://developer.mozilla.org/en-US/docs/Learn/Forms/Form_validation).'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 标准HTML表单验证实现的简单性是令人愉快的。然而，如果我们想自定义验证用户体验，我们需要编写JavaScript来使用约束验证API。有关此API和更多关于HTML表单验证的信息，请参阅以下链接：[https://developer.mozilla.org/en-US/docs/Learn/Forms/Form_validation](https://developer.mozilla.org/en-US/docs/Learn/Forms/Form_validation)。
- en: In the next section, we’ll use a popular form library to improve the validation
    user experience. This is a little easier to work with in React than the constraint
    validation API.
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将使用流行的表单库来改进验证用户体验。在 React 中使用它比使用约束验证 API 更容易一些。
- en: Using React Hook Form
  id: totrans-423
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 React Hook Form
- en: In this section, we will learn about React Hook Form and use it to improve the
    validation user experience in our contact form.
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将了解 React Hook Form 并使用它来改进我们的联系表单的验证用户体验。
- en: Understanding React Hook Form
  id: totrans-425
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解 React Hook Form
- en: As the name suggests, React Hook Form is a React library for building forms.
    It is very flexible and can be used for simple forms such as our contact form,
    as well as large forms with complex validation and submission logic. It is also
    very performant and optimised not to cause unnecessary re-renders. It is also
    very popular with tens of thousands of GitHub stars and maturing nicely having
    been first released in 2019.
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 如其名所示，React Hook Form是一个用于构建表单的React库。它非常灵活，可以用于简单的表单，如我们的联系表单，也可以用于具有复杂验证和提交逻辑的大型表单。它也非常高效，经过优化，不会引起不必要的重新渲染。它还非常受欢迎，拥有数万个GitHub星标，并且自2019年首次发布以来一直在稳步成熟。
- en: 'The key part of React Hooks Form is a `useForm` hook, which returns useful
    functions and the state. The following code snippet shows the `useForm` hook being
    called:'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: React Hooks Form的关键部分是`useForm`钩子，它返回有用的函数和状态。以下代码片段显示了如何调用`useForm`钩子：
- en: '[PRE285]'
  id: totrans-428
  prefs: []
  type: TYPE_PRE
  zh: '[PRE285]'
- en: '`useForm` has a generic type parameter for the type of the field values. In
    the preceding example, the field values type is `FormData`.'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: '`useForm`有一个泛型类型参数，用于字段值的类型。在先前的示例中，字段值的类型是`FormData`。'
- en: Understanding the register function
  id: totrans-430
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 理解`register`函数
- en: 'A key function that `useForm` returns is a `register` function, which takes
    in a unique field name and returns the following in an object structure:'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: '`useForm`返回的键函数是一个`register`函数，它接受一个唯一的字段名称，并以对象结构返回以下内容：'
- en: An `onChange` handler, which happens when the field editor’s value changes
  id: totrans-432
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当字段编辑器的值发生变化时触发的`onChange`处理程序
- en: An `onBlur` handler, which happens when the field editor loses focus
  id: totrans-433
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当字段编辑器失去焦点时触发的`onBlur`处理程序
- en: A reference to the field editor element
  id: totrans-434
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字段编辑器元素的引用
- en: The field name
  id: totrans-435
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字段名称
- en: 'These items returned from the `register` function are spread onto the field
    editor element to allow React Hook Form to efficiently track its value. The following
    code snippet allows a name field editor to be tracked by React Hook Form:'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 从`register`函数返回的这些项目被分散到字段编辑器元素上，以便React Hook Form能够高效地跟踪其值。以下代码片段允许React Hook
    Form跟踪名称字段编辑器：
- en: '[PRE286]'
  id: totrans-437
  prefs: []
  type: TYPE_PRE
  zh: '[PRE286]'
- en: 'After the result of `register` has been spread on to the `input` element, it
    will contain `ref`, `name`, `onChange`, and `onBlur` attributes.:'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 在`register`的结果被分散到`input`元素上之后，它将包含`ref`、`name`、`onChange`和`onBlur`属性：
- en: '[PRE287]'
  id: totrans-439
  prefs: []
  type: TYPE_PRE
  zh: '[PRE287]'
- en: The `ref`, `onChange`, and `onBlur` attributes will reference code in React
    Hook Form that tracks the value of the `input` element.
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: '`ref`、`onChange`和`onBlur`属性将引用React Hook Form中跟踪`input`元素值的代码。'
- en: Specifying validation
  id: totrans-441
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 指定验证
- en: 'Field validation is defined in the `register` field in an options parameter
    as follows:'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 字段验证在`register`字段的选项参数中定义为以下内容：
- en: '[PRE288]'
  id: totrans-443
  prefs: []
  type: TYPE_PRE
  zh: '[PRE288]'
- en: 'In the preceding example, required validation is specified. The associated
    error message can be defined as an alternative to the `true` flag as follows:'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，指定了所需的验证。相关的错误信息可以定义为替代`true`标志的选项，如下所示：
- en: '[PRE289]'
  id: totrans-445
  prefs: []
  type: TYPE_PRE
  zh: '[PRE289]'
- en: 'There are a range of different validation rules that can be applied. See this
    page in the React Hook Form documentation for a list of all the rules that are
    available: [https://react-hook-form.com/get-started#applyvalidation](https://react-hook-form.com/get-started#applyvalidation).'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 可以应用一系列不同的验证规则。请参阅React Hook Form文档中的此页面，以获取所有可用规则列表：[https://react-hook-form.com/get-started#applyvalidation](https://react-hook-form.com/get-started#applyvalidation)。
- en: Obtaining validation errors
  id: totrans-447
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 获取验证错误
- en: 'The `useForm` returns a state called `errors`, which contains the form validation
    errors. The `errors` state is an object containing invalid field error messages.
    For example, if a `name` field is invalid because a `required` rule has been violated,
    the `errors` object could be as follows:'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: '`useForm`返回一个名为`errors`的状态，其中包含表单验证错误。`errors`状态是一个包含无效字段错误信息的对象。例如，如果`name`字段无效，因为违反了`required`规则，则`errors`对象可能如下所示：'
- en: '[PRE290]'
  id: totrans-449
  prefs: []
  type: TYPE_PRE
  zh: '[PRE290]'
- en: 'Fields in a valid state don’t exist in the `errors` object, so a field validation
    error message can be conditionally rendered as follows:'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 在有效状态下的字段不存在于`errors`对象中，因此字段验证错误信息可以按如下方式条件性地渲染：
- en: '[PRE291]'
  id: totrans-451
  prefs: []
  type: TYPE_PRE
  zh: '[PRE291]'
- en: In the preceding code snippet, if the name field is valid, `errors.name` will
    be `undefined`, and so the error message won’t render. If the name field is invalid,
    `errors.name` will contain the error and so the error message will render.
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，如果名称字段有效，`errors.name`将是`undefined`，因此错误信息不会渲染。如果名称字段无效，`errors.name`将包含错误，因此错误信息会渲染。
- en: Handling submission
  id: totrans-453
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 处理提交
- en: 'The `useForm` hook also returns a handler called `handleSubmit` that can be
    used for form submission. `handleSubmit` takes in a function that React Hook Form
    calls when it has successfully validated the form. Here’s an example of `handleSubmit`
    being used:'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: '`useForm` 钩子还返回一个名为 `handleSubmit` 的处理程序，可以用于表单提交。`handleSubmit` 接收一个函数，当 React
    Hook Form 成功验证表单时，它会调用此函数。以下是一个使用 `handleSubmit` 的示例：'
- en: '[PRE292]'
  id: totrans-455
  prefs: []
  type: TYPE_PRE
  zh: '[PRE292]'
- en: In the preceding example, `onSubmit` is only called in the submission when the
    form is successfully validated and not when the form is invalid.
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，`onSubmit` 只在表单成功验证时在提交时被调用，而不是在表单无效时。
- en: 'The `isSubmitting` state can be used to disable elements whilst the form is
    being submitted. The following example disables the `submit` button while the
    form is being submitted:'
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: '`isSubmitting` 状态可以在表单提交时禁用元素。以下示例在表单提交时禁用了 `submit` 按钮：'
- en: '[PRE293]'
  id: totrans-458
  prefs: []
  type: TYPE_PRE
  zh: '[PRE293]'
- en: '`isSubmitSuccessful` can be used to conditionally render a successful submission
    message:'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: '`isSubmitSuccessful` 可以用来有条件地渲染成功的提交消息：'
- en: '[PRE294]'
  id: totrans-460
  prefs: []
  type: TYPE_PRE
  zh: '[PRE294]'
- en: There are many more features in React Hook Form, but these are the essential
    functions and states that are commonly used. Refer to the React Hook Form documentation
    for more information at [https://react-hook-form.com/](https://react-hook-form.com/).
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: React Hook Form 中还有许多其他功能，但这些都是常用的基本函数和状态。有关更多信息，请参阅 [https://react-hook-form.com/](https://react-hook-form.com/)
    的 React Hook Form 文档。
- en: Now that we understand React Hook Form’s basics, we will refactor our contact
    form to use it.
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了 React Hook Form 的基础知识，我们将重构我们的联系表单以使用它。
- en: Using React Hook Form
  id: totrans-463
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 React Hook Form
- en: We will refactor the contact form that we have been working on to use React
    Hook Form. The form will contain the same features but the implementation will
    use React Hook Form. After making the code changes, we will check how often the
    form is re-rendered using React’s DevTools.
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将重构我们一直在工作的联系表单，以使用 React Hook Form。表单将包含相同的功能，但实现将使用 React Hook Form。在代码更改后，我们将使用
    React 的 DevTools 检查表单重新渲染的频率。
- en: We will remove the use of React Router’s `Form` component– it currently handles
    form submission. React Hook Form is capable of handling submission as well, and
    we need it to fully control submission to ensure the form is valid as part of
    this process.
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将移除对 React Router 的 `Form` 组件的使用 - 它目前处理表单提交。React Hook Form 也能够处理提交，我们需要它来完全控制提交过程，以确保表单在这个过程中有效。
- en: 'Carry out the following steps:'
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤：
- en: 'Let’s start by installing React Hook Form. Run the following command in the
    terminal:'
  id: totrans-467
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从安装 React Hook Form 开始。在终端中运行以下命令：
- en: '[PRE295]'
  id: totrans-468
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE295]'
- en: TypeScript types are included in this package, so there is no need for a separate
    installation.
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 此包中包含 TypeScript 类型，因此无需单独安装。
- en: 'Open `ContactPage.tsx` and add an `import` statement for `useForm` from React
    Hook Form:'
  id: totrans-470
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `ContactPage.tsx` 并添加从 React Hook Form 导入 `useForm` 的 `import` 语句：
- en: '[PRE296]'
  id: totrans-471
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE296]'
- en: 'Remove `Form`, `redirect`, and `ActionFunctionArgs` from the React Router `import`
    statement and replace them with `useNavigate`:'
  id: totrans-472
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 React Router 的 `import` 语句中移除 `Form`、`redirect` 和 `ActionFunctionArgs`，并用
    `useNavigate` 替换它们：
- en: '[PRE297]'
  id: totrans-473
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE297]'
- en: We will use `useNavigate` to navigate to the thank you page at the end of the
    form submission.
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 `useNavigate` 在表单提交结束时导航到感谢页面。
- en: 'Add the following call to `useForm` at the top of the `ContactPage` component
    and destructure the `register` and `handleSubmit` functions:'
  id: totrans-475
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `ContactPage` 组件的顶部添加以下 `useForm` 调用，并解构 `register` 和 `handleSubmit` 函数：
- en: '[PRE298]'
  id: totrans-476
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE298]'
- en: '[PRE299]'
  id: totrans-477
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE299]'
- en: '[PRE300]'
  id: totrans-478
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE300]'
- en: '[PRE301]'
  id: totrans-479
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE301]'
- en: 'Add the following call to `useNavigate` after the call to `useForm` to get
    a function that we can use to perform navigation:'
  id: totrans-480
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在调用 `useForm` 之后添加以下 `useNavigate` 调用，以获取我们可以用来执行导航的函数：
- en: '[PRE302]'
  id: totrans-481
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE302]'
- en: '[PRE303]'
  id: totrans-482
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE303]'
- en: '[PRE304]'
  id: totrans-483
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE304]'
- en: '[PRE305]'
  id: totrans-484
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE305]'
- en: 'In the JSX, replace the use of React Router’s `Form` element with a native
    `form` element. Remove the `method` attribute on the `form` element, and replace
    it with the following `onSubmit` attribute:'
  id: totrans-485
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 JSX 中，用原生的 `form` 元素替换 React Router 的 `Form` 元素的使用。从 `form` 元素上移除 `method`
    属性，并用以下 `onSubmit` 属性替换它：
- en: '[PRE306]'
  id: totrans-486
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE306]'
- en: '[PRE307]'
  id: totrans-487
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE307]'
- en: '[PRE308]'
  id: totrans-488
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE308]'
- en: We will implement the `onSubmit` function in the next step.
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一步实现 `onSubmit` 函数。
- en: 'Add the following `onSubmit` function after the call to `useNavigate`. React
    Hook Form will call this function with the form data after it has ensured the
    form is valid:'
  id: totrans-490
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在调用 `useNavigate` 之后添加以下 `onSubmit` 函数。React Hook Form 在确保表单有效后，会使用表单数据调用此函数：
- en: '[PRE309]'
  id: totrans-491
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE309]'
- en: '[PRE310]'
  id: totrans-492
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE310]'
- en: '[PRE311]'
  id: totrans-493
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE311]'
- en: '[PRE312]'
  id: totrans-494
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE312]'
- en: '[PRE313]'
  id: totrans-495
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE313]'
- en: The function outputs the form data to the console and then navigates to the
    thank you page.
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数将表单数据输出到控制台，然后导航到感谢页面。
- en: Remove the `contactPageAction` function at the bottom of the file because this
    is no longer required.
  id: totrans-497
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从文件底部移除 `contactPageAction` 函数，因为现在不再需要它。
- en: 'Replace the `name` attribute on the field editors with a call to `register`.
    Pass the field name into `register` and spread the result of `register` as follows:'
  id: totrans-498
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将字段编辑器的 `name` 属性替换为对 `register` 的调用。将字段名称传递给 `register` 并如下展开 `register` 的结果：
- en: '[PRE314]'
  id: totrans-499
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE314]'
- en: '[PRE315]'
  id: totrans-500
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE315]'
- en: '[PRE316]'
  id: totrans-501
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE316]'
- en: '[PRE317]'
  id: totrans-502
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE317]'
- en: '[PRE318]'
  id: totrans-503
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE318]'
- en: '[PRE319]'
  id: totrans-504
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE319]'
- en: '[PRE320]'
  id: totrans-505
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE320]'
- en: '[PRE321]'
  id: totrans-506
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE321]'
- en: '[PRE322]'
  id: totrans-507
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE322]'
- en: '[PRE323]'
  id: totrans-508
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE323]'
- en: '[PRE324]'
  id: totrans-509
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE324]'
- en: '[PRE325]'
  id: totrans-510
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE325]'
- en: '[PRE326]'
  id: totrans-511
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE326]'
- en: '[PRE327]'
  id: totrans-512
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE327]'
- en: '[PRE328]'
  id: totrans-513
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE328]'
- en: '[PRE329]'
  id: totrans-514
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE329]'
- en: '[PRE330]'
  id: totrans-515
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE330]'
- en: '[PRE331]'
  id: totrans-516
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE331]'
- en: '[PRE332]'
  id: totrans-517
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE332]'
- en: '[PRE333]'
  id: totrans-518
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE333]'
- en: '[PRE334]'
  id: totrans-519
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE334]'
- en: React Hook Form will now be able to track these fields.
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: React Hook Form 现在将能够跟踪这些字段。
- en: 'Open `App.tsx` and remove `contactPageAction` from the `import` statement for
    `ContactPage` and remove it from the `/``contact` route:'
  id: totrans-521
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `App.tsx` 并从 `ContactPage` 的 `import` 语句中移除 `contactPageAction`，并从 `/contact`
    路由中移除它：
- en: '[PRE335]'
  id: totrans-522
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE335]'
- en: '[PRE336]'
  id: totrans-523
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE336]'
- en: '[PRE337]'
  id: totrans-524
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE337]'
- en: '[PRE338]'
  id: totrans-525
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE338]'
- en: '[PRE339]'
  id: totrans-526
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE339]'
- en: '[PRE340]'
  id: totrans-527
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE340]'
- en: '[PRE341]'
  id: totrans-528
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE341]'
- en: '[PRE342]'
  id: totrans-529
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE342]'
- en: '[PRE343]'
  id: totrans-530
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE343]'
- en: '[PRE344]'
  id: totrans-531
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE344]'
- en: '[PRE345]'
  id: totrans-532
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE345]'
- en: '[PRE346]'
  id: totrans-533
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE346]'
- en: '[PRE347]'
  id: totrans-534
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE347]'
- en: '[PRE348]'
  id: totrans-535
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE348]'
- en: '[PRE349]'
  id: totrans-536
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE349]'
- en: '[PRE350]'
  id: totrans-537
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE350]'
- en: Run the app in development mode by executing `npm start` in the terminal.
  id: totrans-538
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在终端中执行 `npm start` 来以开发模式运行应用程序。
- en: Open the React DevTools and ensure the **Highlight updates when components render**
    option is still ticked so that we can observe when the form is re-rendered.
  id: totrans-539
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 React DevTools 并确保**当组件渲染时高亮显示更新**选项仍然勾选，这样我们就可以观察表单何时重新渲染。
- en: Fill in the form with valid values. The re-render outline doesn’t appear when
    the field values are entered because they aren’t using the state to cause a re-render
    yet. This is confirmation that React Hook Form efficiently tracks field values.
  id: totrans-540
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用有效值填写表单。当输入字段值时，不会出现重新渲染轮廓，因为它们还没有使用状态来引起重新渲染。这是 React Hook Form 高效跟踪字段值的确认。
- en: Now, click on the **Submit** button. After the form has been successfully submitted,
    the field values are output to the console and the thank you page appears, just
    as before.
  id: totrans-541
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击**提交**按钮。在表单成功提交后，字段值将输出到控制台，并显示感谢页面，就像之前一样。
- en: We’ve had to do a little more work to set up the form in React Hook Form so
    that it can track the fields. This enables React Hook Form to validate the fields,
    which we will implement in the next section.
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不得不做更多的工作来设置 React Hook Form 中的表单，以便它可以跟踪字段。这使 React Hook Form 能够验证字段，我们将在下一节中实现这一点。
- en: Adding validation
  id: totrans-543
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加验证
- en: We will now remove the use of standard HTML form validation and use React Hook
    Form’s validation. Using React Hook Form’s validation allows us to more easily
    provide a great validation user experience.
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将移除标准 HTML 表单验证的使用，并使用 React Hook Form 的验证。使用 React Hook Form 的验证使我们能够更容易地提供出色的验证用户体验。
- en: 'Carry out the following steps:'
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤：
- en: 'Open `ContactPage.tsx` and add the `FieldError` type to the React Hook Form
    `import` statement:'
  id: totrans-546
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `ContactPage.tsx` 并将 `FieldError` 类型添加到 React Hook Form 的 `import` 语句中：
- en: '[PRE351]'
  id: totrans-547
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE351]'
- en: 'Destructure the `errors` state from `useForm` as follows:'
  id: totrans-548
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如下从 `useForm` 中解构 `errors` 状态：
- en: '[PRE352]'
  id: totrans-549
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE352]'
- en: '[PRE353]'
  id: totrans-550
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE353]'
- en: '[PRE354]'
  id: totrans-551
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE354]'
- en: '[PRE355]'
  id: totrans-552
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE355]'
- en: '[PRE356]'
  id: totrans-553
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE356]'
- en: '`errors` will contain validation errors if there are any.'
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有验证错误，`errors` 将包含验证错误。
- en: 'Add a `noValidate` attribute to the form element to prevent any native HTML
    validation:'
  id: totrans-555
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `noValidate` 属性添加到表单元素中，以防止任何原生 HTML 验证：
- en: '[PRE357]'
  id: totrans-556
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE357]'
- en: Remove the native HTML validation rules on all the field editors by removing
    the validation `required` and `pattern` attributes.
  id: totrans-557
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过移除所有字段编辑器的验证 `required` 和 `pattern` 属性来移除所有字段的原生 HTML 验证规则。
- en: 'Add the required validation rules to the `register` function for the name,
    email, and reason fields, as follows:'
  id: totrans-558
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为名称、电子邮件和原因字段添加所需的验证规则到 `register` 函数中，如下所示：
- en: '[PRE358]'
  id: totrans-559
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE358]'
- en: '[PRE359]'
  id: totrans-560
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE359]'
- en: '[PRE360]'
  id: totrans-561
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE360]'
- en: '[PRE361]'
  id: totrans-562
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE361]'
- en: '[PRE362]'
  id: totrans-563
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE362]'
- en: '[PRE363]'
  id: totrans-564
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE363]'
- en: '[PRE364]'
  id: totrans-565
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE364]'
- en: '[PRE365]'
  id: totrans-566
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE365]'
- en: '[PRE366]'
  id: totrans-567
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE366]'
- en: '[PRE367]'
  id: totrans-568
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE367]'
- en: '[PRE368]'
  id: totrans-569
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE368]'
- en: '[PRE369]'
  id: totrans-570
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE369]'
- en: '[PRE370]'
  id: totrans-571
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE370]'
- en: '[PRE371]'
  id: totrans-572
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE371]'
- en: '[PRE372]'
  id: totrans-573
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE372]'
- en: '[PRE373]'
  id: totrans-574
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE373]'
- en: '[PRE374]'
  id: totrans-575
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE374]'
- en: '[PRE375]'
  id: totrans-576
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE375]'
- en: '[PRE376]'
  id: totrans-577
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE376]'
- en: '[PRE377]'
  id: totrans-578
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE377]'
- en: '[PRE378]'
  id: totrans-579
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE378]'
- en: '[PRE379]'
  id: totrans-580
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE379]'
- en: '[PRE380]'
  id: totrans-581
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE380]'
- en: '[PRE381]'
  id: totrans-582
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE381]'
- en: '[PRE382]'
  id: totrans-583
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE382]'
- en: '[PRE383]'
  id: totrans-584
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE383]'
- en: '[PRE384]'
  id: totrans-585
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE384]'
- en: '[PRE385]'
  id: totrans-586
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE385]'
- en: '[PRE386]'
  id: totrans-587
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE386]'
- en: '[PRE387]'
  id: totrans-588
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE387]'
- en: '[PRE388]'
  id: totrans-589
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE388]'
- en: We have specified the validation error message with the validation rules.
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经使用验证规则指定了验证错误消息。
- en: 'Add an additional rule for the email field to ensure it matches a particular
    pattern:'
  id: totrans-591
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为电子邮件字段添加一个额外的规则，以确保它匹配特定的模式：
- en: '[PRE389]'
  id: totrans-592
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE389]'
- en: '[PRE390]'
  id: totrans-593
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE390]'
- en: '[PRE391]'
  id: totrans-594
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE391]'
- en: '[PRE392]'
  id: totrans-595
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE392]'
- en: '[PRE393]'
  id: totrans-596
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE393]'
- en: '[PRE394]'
  id: totrans-597
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE394]'
- en: '[PRE395]'
  id: totrans-598
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE395]'
- en: '[PRE396]'
  id: totrans-599
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE396]'
- en: '[PRE397]'
  id: totrans-600
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE397]'
- en: '[PRE398]'
  id: totrans-601
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE398]'
- en: '[PRE399]'
  id: totrans-602
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE399]'
- en: 'We will now style fields if they are invalid. Each field is going to have the
    same styling logic, so define the style in a function as follows:'
  id: totrans-603
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果字段无效，我们现在将为其设置样式。每个字段都将使用相同的样式逻辑，因此如下定义样式函数：
- en: '[PRE400]'
  id: totrans-604
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE400]'
- en: '[PRE401]'
  id: totrans-605
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE401]'
- en: '[PRE402]'
  id: totrans-606
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE402]'
- en: '[PRE403]'
  id: totrans-607
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE403]'
- en: '[PRE404]'
  id: totrans-608
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE404]'
- en: '[PRE405]'
  id: totrans-609
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE405]'
- en: '[PRE406]'
  id: totrans-610
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE406]'
- en: '[PRE407]'
  id: totrans-611
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE407]'
- en: The field error is passed into the `getEditorStyle` function. The function returns
    a Tailwind CSS class that styles the element with a red border if there is an
    error.
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
  zh: 字段错误被传递到 `getEditorStyle` 函数中。如果存在错误，该函数返回一个 Tailwind CSS 类，用于使用红色边框样式化元素。
- en: 'Use the `getEditorStyle` function to style the name, email, and reasons fields
    when invalid:'
  id: totrans-613
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `getEditorStyle` 函数在无效时样式化名称、电子邮件和原因字段：
- en: '[PRE408]'
  id: totrans-614
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE408]'
- en: '[PRE409]'
  id: totrans-615
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE409]'
- en: '[PRE410]'
  id: totrans-616
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE410]'
- en: '[PRE411]'
  id: totrans-617
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE411]'
- en: '[PRE412]'
  id: totrans-618
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE412]'
- en: '[PRE413]'
  id: totrans-619
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE413]'
- en: '[PRE414]'
  id: totrans-620
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE414]'
- en: '[PRE415]'
  id: totrans-621
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE415]'
- en: '[PRE416]'
  id: totrans-622
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE416]'
- en: '[PRE417]'
  id: totrans-623
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE417]'
- en: '[PRE418]'
  id: totrans-624
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE418]'
- en: '[PRE419]'
  id: totrans-625
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE419]'
- en: '[PRE420]'
  id: totrans-626
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE420]'
- en: '[PRE421]'
  id: totrans-627
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE421]'
- en: React Hook Form’s `errors` state contains a property for a field containing
    a validation error if the field has an invalid value. For example, if the name
    field value is invalid, `errors` will contain a property called `name`.
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
  zh: React Hook Form 的 `errors` 状态包含一个属性，用于包含具有验证错误的字段。例如，如果名称字段值无效，`errors` 将包含一个名为
    `name` 的属性。
- en: 'Now, let’s display the validation error under each field when it’s invalid.
    The structure and style of the error will be the same for each field with a varying
    message, so we will create a reusable validation error component. Create a file
    in the `src` folder called `ValidationError.tsx` with the following content:'
  id: totrans-629
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们在字段无效时在每个字段下显示验证错误。每个字段的错误结构和样式相同，但消息不同，因此我们将创建一个可重用的验证错误组件。在`src`文件夹中创建一个名为`ValidationError.tsx`的文件，内容如下：
- en: '[PRE422]'
  id: totrans-630
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE422]'
- en: '[PRE423]'
  id: totrans-631
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE423]'
- en: '[PRE424]'
  id: totrans-632
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE424]'
- en: '[PRE425]'
  id: totrans-633
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE425]'
- en: '[PRE426]'
  id: totrans-634
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE426]'
- en: '[PRE427]'
  id: totrans-635
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE427]'
- en: '[PRE428]'
  id: totrans-636
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE428]'
- en: '[PRE429]'
  id: totrans-637
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE429]'
- en: '[PRE430]'
  id: totrans-638
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE430]'
- en: '[PRE431]'
  id: totrans-639
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE431]'
- en: '[PRE432]'
  id: totrans-640
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE432]'
- en: '[PRE433]'
  id: totrans-641
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE433]'
- en: '[PRE434]'
  id: totrans-642
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE434]'
- en: '[PRE435]'
  id: totrans-643
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE435]'
- en: The component has a `fieldError` prop for the field error from React Hook Form.
    Nothing is rendered if there is no field error. If there is an error, it is rendered
    with red text inside a `div` element. The `role="alert"` attribute allows a screen
    reader to read the validation error.
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
  zh: 组件有一个`fieldError`属性，用于从React Hook Form接收字段错误。如果没有字段错误，则不会渲染任何内容。如果有错误，它将以红色文本在`div`元素内渲染。`role="alert"`属性允许屏幕阅读器读取验证错误。
- en: 'Return to `ContactPage.tsx` and import the `ValidationError` component:'
  id: totrans-645
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到`ContactPage.tsx`并导入`ValidationError`组件：
- en: '[PRE436]'
  id: totrans-646
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE436]'
- en: 'Add instances of `ValidationError` beneath each field editor as follows:'
  id: totrans-647
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式在每个字段编辑器下添加`ValidationError`实例：
- en: '[PRE437]'
  id: totrans-648
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE437]'
- en: '[PRE438]'
  id: totrans-649
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE438]'
- en: '[PRE439]'
  id: totrans-650
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE439]'
- en: '[PRE440]'
  id: totrans-651
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE440]'
- en: '[PRE441]'
  id: totrans-652
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE441]'
- en: '[PRE442]'
  id: totrans-653
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE442]'
- en: '[PRE443]'
  id: totrans-654
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE443]'
- en: '[PRE444]'
  id: totrans-655
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE444]'
- en: '[PRE445]'
  id: totrans-656
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE445]'
- en: '[PRE446]'
  id: totrans-657
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE446]'
- en: '[PRE447]'
  id: totrans-658
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE447]'
- en: '[PRE448]'
  id: totrans-659
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE448]'
- en: '[PRE449]'
  id: totrans-660
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE449]'
- en: '[PRE450]'
  id: totrans-661
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE450]'
- en: '[PRE451]'
  id: totrans-662
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE451]'
- en: 'That completes the implementation of the form validation. We will now test
    our enhanced form in the following steps:'
  id: totrans-663
  prefs: []
  type: TYPE_NORMAL
  zh: 这完成了表单验证的实现。我们现在将按照以下步骤测试我们的增强表单：
- en: In the running app, ensure the **Highlight updates when components render**
    option is still ticked in DevTools so we can observe when the form is re-rendered.
  id: totrans-664
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在运行的应用程序中，确保DevTools中的**组件渲染时高亮更新**选项仍然勾选，这样我们就可以观察表单何时重新渲染。
- en: Click on the **Submit** button without filling in the form.
  id: totrans-665
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在没有填写表格的情况下点击**提交**按钮。
- en: '![Figure 7.7 – Highlighted re-render and validation errors when the form is
    submitted](img/B19051_07_07.jpg)'
  id: totrans-666
  prefs: []
  type: TYPE_IMG
  zh: '![图7.7 – 表单提交时高亮显示的重新渲染和验证错误](img/B19051_07_07.jpg)'
- en: Figure 7.7 – Highlighted re-render and validation errors when the form is submitted
  id: totrans-667
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.7 – 表单提交时高亮显示的重新渲染和验证错误
- en: Fill in the form and click on the `errors` state. This is a necessary re-render
    because we need the page to update with the validation error messages.
  id: totrans-668
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填写表格并点击`errors`状态。这是必要的重新渲染，因为我们需要页面更新以显示验证错误信息。
- en: Another thing that you may have noticed is that nothing is output to the console
    because our `onSubmit` function is not called until the form is valid.
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个你可能注意到的问题是，没有输出到控制台，因为我们的`onSubmit`函数只有在表单有效时才会被调用。
- en: Fill in the form correctly and submit it. The field values are now output to
    the console and the thank you page appears.
  id: totrans-670
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正确填写表格并提交。现在字段值将输出到控制台，并显示感谢页面。
- en: The form is working nicely now.
  id: totrans-671
  prefs: []
  type: TYPE_NORMAL
  zh: 表单现在工作得很好。
- en: 'One thing you may have spotted is when validation actually happens – it happens
    when the form is submitted. We will change the validation to happen every time
    a field editor loses focus. Carry out the following steps:'
  id: totrans-672
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能注意到的一个问题是验证实际发生的时间——它发生在表单提交时。我们将验证改为每次字段编辑器失去焦点时发生。执行以下步骤：
- en: 'On `ContactPage.tsx`, add the following argument to the `useForm` call:'
  id: totrans-673
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`ContactPage.tsx`中，向`useForm`调用添加以下参数：
- en: '[PRE452]'
  id: totrans-674
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE452]'
- en: '[PRE453]'
  id: totrans-675
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE453]'
- en: '[PRE454]'
  id: totrans-676
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE454]'
- en: '[PRE455]'
  id: totrans-677
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE455]'
- en: '[PRE456]'
  id: totrans-678
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE456]'
- en: '[PRE457]'
  id: totrans-679
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE457]'
- en: '[PRE458]'
  id: totrans-680
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE458]'
- en: '[PRE459]'
  id: totrans-681
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE459]'
- en: The `mode` option now tells React Hook Form to initially validate when a field
    editor loses focus. The `reValidationMode` option now tells React Hook Form to
    validate subsequently when a field editor loses focus.
  id: totrans-682
  prefs: []
  type: TYPE_NORMAL
  zh: '`mode`选项现在告诉React Hook Form在字段编辑器失去焦点时最初进行验证。`reValidationMode`选项现在告诉React
    Hook Form在字段编辑器失去焦点时随后进行验证。'
- en: In the running app, visit the fields in the form without filling them in and
    see the validation happen.
  id: totrans-683
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在运行的应用程序中，访问表单中的字段而不填写它们，以查看验证过程。
- en: 'That completes the form and indeed this section on React Hook Form. Here’s
    a recap of the critical parts of React Hook Form:'
  id: totrans-684
  prefs: []
  type: TYPE_NORMAL
  zh: 这完成了表单的构建，以及React Hook Form这一章节。以下是React Hook Form关键部分的总结：
- en: React Hook Form doesn’t cause unnecessary re-renders when a form is filled in.
  id: totrans-685
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当表单填写时，React Hook Form不会引起不必要的重新渲染。
- en: React Hook Form’s `register` function needs to be spread on field editors. This
    function allows field values to be efficiently tracked and allows validation rules
    to be specified.
  id: totrans-686
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: React Hook Form的`register`函数需要在字段编辑器上展开。此函数允许高效地跟踪字段值，并允许指定验证规则。
- en: React Hook Form’s submit handler automatically prevents a server post and ensures
    the form is valid before our submission logic is called.
  id: totrans-687
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: React Hook Form的提交处理程序自动防止服务器提交，并确保在调用我们的提交逻辑之前表单是有效的。
- en: Next, we will summarize this chapter.
  id: totrans-688
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将总结本章内容。
- en: Summary
  id: totrans-689
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: At the start of this chapter, we learned that field values in a form can be
    controlled by the state. However, this leads to lots of unnecessary re-rendering
    of the form. We then realised that not controlling field values with the state
    and using the `FormData` interface to retrieve field values instead is more performant
    and requires less code.
  id: totrans-690
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的开始，我们了解到表单中的字段值可以通过状态来控制。然而，这会导致表单进行大量的不必要的重新渲染。然后我们意识到，不使用状态来控制字段值，而是使用`FormData`接口来检索字段值，这样更高效，并且需要更少的代码。
- en: We used React Router’s `Form` component, which is a wrapper around the native
    `form` element. It submits data to a client-side route instead of a server. However,
    it doesn’t cover validation – we tried using native HTML validation for that,
    which was simple to implement, but providing a great user experience with native
    HTML validation is tricky.
  id: totrans-691
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了React Router的`Form`组件，它是对原生`form`元素的包装。它将数据提交到客户端路由而不是服务器。然而，它不涵盖验证——我们尝试使用原生的HTML验证来实现这一点，这很简单，但使用原生HTML验证来提供良好的用户体验是棘手的。
- en: We introduced ourselves to a popular forms library called React Hook Form to
    provide a better validation user experience. It contains a `useForm` hook that
    returns useful functions and a state. The library doesn’t cause unnecessary renders,
    so it is very performant.
  id: totrans-692
  prefs: []
  type: TYPE_NORMAL
  zh: 我们介绍了一个流行的表单库React Hook Form，以提供更好的验证用户体验。它包含一个`useForm`钩子，该钩子返回有用的函数和状态。该库不会导致不必要的渲染，因此它非常高效。
- en: We learned that React Hook Form’s `register` function needs to be spread on
    every field editor. This is so that it can efficiently track field values without
    causing unnecessary renders. We learned that React Hook Form contains several
    common validation rules, including required fields and field values that match
    a particular pattern. Field validation rules are specified in the `register` function
    and can be specified with an appropriate validation message. `useForm` returns
    an `errors` state variable, which can be used to render validation error messages
    conditionally.
  id: totrans-693
  prefs: []
  type: TYPE_NORMAL
  zh: 我们了解到React Hook Form的`register`函数需要在每个字段编辑器上展开。这样它就可以高效地跟踪字段值，而不会引起不必要的渲染。我们还了解到React
    Hook Form包含几个常见的验证规则，包括必填字段和与特定模式匹配的字段值。字段验证规则在`register`函数中指定，并且可以使用适当的验证消息指定。`useForm`返回一个`errors`状态变量，可以用来有条件地渲染验证错误消息。
- en: We explored the submit handler that React Hook Form provides. We learned that
    it prevents a server post and ensures that the form is valid. This submit handler
    has an argument for a function that is called with the valid form data.
  id: totrans-694
  prefs: []
  type: TYPE_NORMAL
  zh: 我们探讨了React Hook Form提供的提交处理程序。我们了解到它阻止了服务器端提交并确保表单是有效的。这个提交处理程序有一个用于调用有效表单数据的函数的参数。
- en: In the next chapter, we will focus on state management in detail.
  id: totrans-695
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将详细讨论状态管理。
- en: Questions
  id: totrans-696
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'Answer the following questions to check what you have learned about forms in
    React:'
  id: totrans-697
  prefs: []
  type: TYPE_NORMAL
  zh: 回答以下问题以检查你对React中表单的了解：
- en: How many times will the following form render after the initial render when
    `Bob` is entered into the name field?
  id: totrans-698
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当在姓名字段中输入`Bob`时，以下表单在初始渲染后将会渲染多少次？
- en: '[PRE460]'
  id: totrans-699
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE460]'
- en: '[PRE461]'
  id: totrans-700
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE461]'
- en: '[PRE462]'
  id: totrans-701
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE462]'
- en: '[PRE463]'
  id: totrans-702
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE463]'
- en: '[PRE464]'
  id: totrans-703
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE464]'
- en: '[PRE465]'
  id: totrans-704
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE465]'
- en: '[PRE466]'
  id: totrans-705
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE466]'
- en: '[PRE467]'
  id: totrans-706
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE467]'
- en: '[PRE468]'
  id: totrans-707
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE468]'
- en: '[PRE469]'
  id: totrans-708
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE469]'
- en: '[PRE470]'
  id: totrans-709
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE470]'
- en: '[PRE471]'
  id: totrans-710
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE471]'
- en: '[PRE472]'
  id: totrans-711
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE472]'
- en: '[PRE473]'
  id: totrans-712
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE473]'
- en: '[PRE474]'
  id: totrans-713
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE474]'
- en: '[PRE475]'
  id: totrans-714
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE475]'
- en: '[PRE476]'
  id: totrans-715
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE476]'
- en: How many times will the following form render after the initial render when
    `Bob` is entered into the name field?
  id: totrans-716
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当在姓名字段中输入`Bob`时，以下表单在初始渲染后将会渲染多少次？
- en: '[PRE477]'
  id: totrans-717
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE477]'
- en: '[PRE478]'
  id: totrans-718
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE478]'
- en: '[PRE479]'
  id: totrans-719
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE479]'
- en: '[PRE480]'
  id: totrans-720
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE480]'
- en: '[PRE481]'
  id: totrans-721
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE481]'
- en: '[PRE482]'
  id: totrans-722
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE482]'
- en: '[PRE483]'
  id: totrans-723
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE483]'
- en: '[PRE484]'
  id: totrans-724
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE484]'
- en: '[PRE485]'
  id: totrans-725
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE485]'
- en: '[PRE486]'
  id: totrans-726
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE486]'
- en: '[PRE487]'
  id: totrans-727
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE487]'
- en: '[PRE488]'
  id: totrans-728
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE488]'
- en: '[PRE489]'
  id: totrans-729
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE489]'
- en: '[PRE490]'
  id: totrans-730
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE490]'
- en: The following form contains an uncontrolled search field. When search criteria
    is entered into it and submitted, `null` appears in the console rather than the
    search criteria. Why is that so?
  id: totrans-731
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下表单包含一个未受控的搜索字段。当将搜索条件输入其中并提交时，控制台中出现的是`null`而不是搜索条件。为什么会这样？
- en: '[PRE491]'
  id: totrans-732
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE491]'
- en: '[PRE492]'
  id: totrans-733
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE492]'
- en: '[PRE493]'
  id: totrans-734
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE493]'
- en: '[PRE494]'
  id: totrans-735
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE494]'
- en: '[PRE495]'
  id: totrans-736
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE495]'
- en: '[PRE496]'
  id: totrans-737
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE496]'
- en: '[PRE497]'
  id: totrans-738
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE497]'
- en: '[PRE498]'
  id: totrans-739
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE498]'
- en: '[PRE499]'
  id: totrans-740
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE499]'
- en: '[PRE500]'
  id: totrans-741
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE500]'
- en: '[PRE501]'
  id: totrans-742
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE501]'
- en: '[PRE502]'
  id: totrans-743
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE502]'
- en: '[PRE503]'
  id: totrans-744
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE503]'
- en: '[PRE504]'
  id: totrans-745
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE504]'
- en: The following component is a search form implemented using React Hook Form.
    When search criteria are entered into it and submitted, an empty object appears
    in the console, rather than an object containing the search criteria. Why is that
    so?
  id: totrans-746
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下组件是一个使用React Hook Form实现的搜索表单。当将搜索条件输入其中并提交时，控制台中出现的是一个空对象，而不是包含搜索条件的对象。为什么会这样？
- en: '[PRE505]'
  id: totrans-747
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE505]'
- en: '[PRE506]'
  id: totrans-748
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE506]'
- en: '[PRE507]'
  id: totrans-749
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE507]'
- en: '[PRE508]'
  id: totrans-750
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE508]'
- en: '[PRE509]'
  id: totrans-751
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE509]'
- en: '[PRE510]'
  id: totrans-752
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE510]'
- en: '[PRE511]'
  id: totrans-753
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE511]'
- en: '[PRE512]'
  id: totrans-754
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE512]'
- en: '[PRE513]'
  id: totrans-755
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE513]'
- en: '[PRE514]'
  id: totrans-756
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE514]'
- en: The following component is another search form implemented using React Hook
    Form. The form does function correctly but a type error is raised on the `onSubmit`
    parameter. How can the type error be resolved?
  id: totrans-757
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下组件是另一个使用React Hook Form实现的搜索表单。表单确实可以正常工作，但在`onSubmit`参数上抛出了一个类型错误。如何解决这个类型错误？
- en: '[PRE515]'
  id: totrans-758
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE515]'
- en: '[PRE516]'
  id: totrans-759
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE516]'
- en: '[PRE517]'
  id: totrans-760
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE517]'
- en: '[PRE518]'
  id: totrans-761
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE518]'
- en: '[PRE519]'
  id: totrans-762
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE519]'
- en: '[PRE520]'
  id: totrans-763
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE520]'
- en: '[PRE521]'
  id: totrans-764
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE521]'
- en: '[PRE522]'
  id: totrans-765
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE522]'
- en: '[PRE523]'
  id: totrans-766
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE523]'
- en: '[PRE524]'
  id: totrans-767
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE524]'
- en: '[PRE525]'
  id: totrans-768
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE525]'
- en: '[PRE526]'
  id: totrans-769
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE526]'
- en: '[PRE527]'
  id: totrans-770
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE527]'
- en: '[PRE528]'
  id: totrans-771
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE528]'
- en: '[PRE529]'
  id: totrans-772
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE529]'
- en: '[PRE530]'
  id: totrans-773
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE530]'
- en: Continuing with the search form from the last question, how can we disable the
    `input` element while the search is being performed on the web server?
  id: totrans-774
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继续从上一个问题中的搜索表单，当在Web服务器上执行搜索时，我们如何禁用`input`元素？
- en: Continuing with the search form from the last question, how can we prevent a
    search from executing if the criteria is blank?
  id: totrans-775
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在上一问题中继续使用搜索表单，如果条件为空，我们如何防止搜索执行？
- en: Answers
  id: totrans-776
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 答案
- en: The form will render three times when `Bob` is entered into the name field.
    This is because each change of value causes a re-render because the value is bound
    to the state.
  id: totrans-777
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当`Bob`被输入到名称字段时，表单将渲染三次。这是因为每次值的改变都会导致重新渲染，因为值绑定到了状态上。
- en: The form will never re-render when `Bob` is entered into the name field because
    its value isn’t bound to the state.
  id: totrans-778
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当`Bob`被输入到名称字段时，表单将不会重新渲染，因为它的值没有绑定到状态上。
- en: 'The `FormData` interface requires the `name` attribute to be on the `input`
    element or it won’t be able to find it and it will return `null`:'
  id: totrans-779
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`FormData`接口需要`input`元素上的`name`属性，否则它将无法找到它，并返回`null`：'
- en: '[PRE531]'
  id: totrans-780
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE531]'
- en: 'For React Hook Form to track the field, the `register` function needs to be
    spread on the `input` element as follows:'
  id: totrans-781
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了让React Hook Form跟踪字段，`register`函数需要像以下这样在`input`元素上展开：
- en: '[PRE532]'
  id: totrans-782
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE532]'
- en: '[PRE533]'
  id: totrans-783
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE533]'
- en: '[PRE534]'
  id: totrans-784
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE534]'
- en: '[PRE535]'
  id: totrans-785
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE535]'
- en: '[PRE536]'
  id: totrans-786
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE536]'
- en: '[PRE537]'
  id: totrans-787
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE537]'
- en: '[PRE538]'
  id: totrans-788
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE538]'
- en: '[PRE539]'
  id: totrans-789
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE539]'
- en: '[PRE540]'
  id: totrans-790
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE540]'
- en: '[PRE541]'
  id: totrans-791
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE541]'
- en: '[PRE542]'
  id: totrans-792
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE542]'
- en: '[PRE543]'
  id: totrans-793
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE543]'
- en: '[PRE544]'
  id: totrans-794
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE544]'
- en: '[PRE545]'
  id: totrans-795
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE545]'
- en: 'A type for field values can be defined and specified in the call to `useForm`
    and also the `onSubmit` search parameter:'
  id: totrans-796
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以在调用`useForm`和`onSubmit`搜索参数时定义并指定字段值的类型：
- en: '[PRE546]'
  id: totrans-797
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE546]'
- en: '[PRE547]'
  id: totrans-798
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE547]'
- en: '[PRE548]'
  id: totrans-799
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE548]'
- en: '[PRE549]'
  id: totrans-800
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE549]'
- en: '[PRE550]'
  id: totrans-801
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE550]'
- en: '[PRE551]'
  id: totrans-802
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE551]'
- en: '[PRE552]'
  id: totrans-803
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE552]'
- en: '[PRE553]'
  id: totrans-804
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE553]'
- en: '[PRE554]'
  id: totrans-805
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE554]'
- en: '[PRE555]'
  id: totrans-806
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE555]'
- en: 'React Hook Form’s `isSubmitting` state can be used to disable the `input` element
    while the search is being performed on the web server:'
  id: totrans-807
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以使用React Hook Form的`isSubmitting`状态在Web服务器上执行搜索时禁用`input`元素：
- en: '[PRE556]'
  id: totrans-808
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE556]'
- en: '[PRE557]'
  id: totrans-809
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE557]'
- en: '[PRE558]'
  id: totrans-810
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE558]'
- en: '[PRE559]'
  id: totrans-811
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE559]'
- en: '[PRE560]'
  id: totrans-812
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE560]'
- en: '[PRE561]'
  id: totrans-813
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE561]'
- en: '[PRE562]'
  id: totrans-814
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE562]'
- en: '[PRE563]'
  id: totrans-815
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE563]'
- en: '[PRE564]'
  id: totrans-816
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE564]'
- en: '[PRE565]'
  id: totrans-817
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE565]'
- en: '[PRE566]'
  id: totrans-818
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE566]'
- en: '[PRE567]'
  id: totrans-819
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE567]'
- en: '[PRE568]'
  id: totrans-820
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE568]'
- en: '[PRE569]'
  id: totrans-821
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE569]'
- en: '[PRE570]'
  id: totrans-822
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE570]'
- en: '[PRE571]'
  id: totrans-823
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE571]'
- en: '[PRE572]'
  id: totrans-824
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE572]'
- en: '[PRE573]'
  id: totrans-825
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE573]'
- en: 'The required validation can be added to the search form to prevent a search
    from executing if the criteria are blank:'
  id: totrans-826
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以将所需的验证添加到搜索表单中，以防止在条件为空时执行搜索：
- en: '[PRE574]'
  id: totrans-827
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE574]'
- en: '[PRE575]'
  id: totrans-828
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE575]'
- en: '[PRE576]'
  id: totrans-829
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE576]'
- en: '[PRE577]'
  id: totrans-830
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE577]'
- en: '[PRE578]'
  id: totrans-831
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE578]'
- en: '[PRE579]'
  id: totrans-832
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE579]'
- en: 'Part 3: Data'
  id: totrans-833
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三部分：数据
- en: This part covers different approaches for interacting with both REST and GraphQL
    APIs and the benefits of each approach. We will learn about different approaches
    for efficiently managing the data from these APIs in states, including using several
    popular third-party libraries.
  id: totrans-834
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分涵盖了与REST和GraphQL API交互的不同方法以及每种方法的优点。我们将学习如何高效地管理来自这些API的数据，包括使用几个流行的第三方库。
- en: 'This part includes the following chapters:'
  id: totrans-835
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分包括以下章节：
- en: '[*Chapter 8*](B19051_08.xhtml#_idTextAnchor205), *State Management*'
  id: totrans-836
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第8章*](B19051_08.xhtml#_idTextAnchor205)，*状态管理*'
- en: '[*Chapter 9*](B19051_09.xhtml#_idTextAnchor220), *Interacting with RESTful
    APIs*'
  id: totrans-837
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第9章*](B19051_09.xhtml#_idTextAnchor220)，*与RESTful API交互*'
- en: '[*Chapter 10*](B19051_10.xhtml#_idTextAnchor248), *Interacting with GraphQL
    APIs*'
  id: totrans-838
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第10章*](B19051_10.xhtml#_idTextAnchor248)，*与GraphQL API交互*'
