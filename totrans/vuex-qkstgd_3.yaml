- en: Setting Up Development and Test Environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When I started using Vue, I found it difficult to integrate Vue with webpack.
    I also had trouble configuring Karma to use webpack for my tests, not to mention
    figuring out how to test single file components!
  prefs: []
  type: TYPE_NORMAL
- en: For this reason, in the next pages you will be guided through the process of
    configuring an environment ready for both Vue/Vuex development and testing. I
    think you will find the next pages quite useful.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter you will:'
  prefs: []
  type: TYPE_NORMAL
- en: set up the development environment using npm.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: install, configure and use webpack.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: install, configure and use vue-loader.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: set up the testing environment using Karma + Jasmine.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will be required to have Node.js installed on a system. Finally, to use
    the Git repository of this book, the user needs to install Git.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code files of this chapter can be found on GitHub:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/Vuex-Quick-Start-Guide/tree/master/chapter-3](https://github.com/PacktPublishing/Vuex-Quick-Start-Guide/tree/master/chapter-3)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the code in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://goo.gl/oacFdP](https://goo.gl/oacFdP)'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the development environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Vue provides a tool, `vue-cli`, for scaffolding Vue.js projects. It also supports
    webpack, the web packaging tool we are going to use. To install `vue-cli`*,* you
    just need to type `npm install -g vue-cli` in a console.
  prefs: []
  type: TYPE_NORMAL
- en: Although using `vue-cli` is the fastest way to start a new project, in the following
    paragraphs, I will explain how to set up a Vue project from scratch.
  prefs: []
  type: TYPE_NORMAL
- en: We will set up a Vue/Vuex project using the **npm** (**node package manager**),
    explaining every step and installing only a minimum set of dependencies, as opposed
    to `vue-cli`, which will install a lot of npm packages in order to provide a general-purpose
    project configuration.
  prefs: []
  type: TYPE_NORMAL
- en: By using the GitHub repository of this book and checking out the first commits,
    you can observe what I did to set up the *EveryNote* app development environment.
  prefs: []
  type: TYPE_NORMAL
- en: Using npm to prepare the project for Vue/Vuex
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To use npm, you need to have Node.js installed. You can find information on
    how to install Node.js at [https://nodejs.org/](https://nodejs.org/).
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step to make a Vue/Vuex project is creating a directory and initializing
    it with npm. Open a console and type the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The `npm init` command will ask you some questions. Each question has a default
    value that is normally a good choice. You can just press *Enter* for each question.
    After that, it will create a `package.json` file with the values you provided.
    We will use this file to save project dependencies and to create some commands
    that are useful for the app's development.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s begin by installing webpack and its related utilities. Webpack is a
    module bundler, and it will help us to create the production bundles, as well
    as handle Vue single-file components. If you have never used webpack, you should
    google it to familiarize yourself with its core principles. From now on, I will
    assume that you have basic knowledge of webpack. Type the following commands in
    the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: A directory named `node_modules` has been created, and you can find the source
    code of the packages we have just installed inside this directory. If you use
    `Git`, `node_modules` should be put inside `.gitignore`. The `--save-dev` option
    writes the five package names we've just installed to the `package.json` file.
    This way, each time you type `npm install`, all saved packages will be downloaded,
    if needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see what these packages do:'
  prefs: []
  type: TYPE_NORMAL
- en: '`webpack`: Will take all the source files and bundle them into a folder that
    will have the corresponding production files'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`webpack-dev-server`: Starts a development HTTP server, and helps us to write
    code and debug it in the browser'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`html-webpack-plugin`: Will help us create an `index.html` that will load the
    webpack bundle file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`clean-webpack-plugin`: Removes the distribution folder created by webpack
    when bundling the project'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By typing `npm install`, all the saved packages will be reinstalled inside the
    `node_modules` folder. This way, to initialize a project, you just need to get
    the code (using `git clone`, for example) and type `npm install`, and the project
    will be ready to be used.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s now create a file named `webpack.config.js` to configure webpack. The
    initial file will look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding configuration, we assumed that we have a folder named `src`,
    and inside we have an `index.html` and a `main.js`.
  prefs: []
  type: TYPE_NORMAL
- en: 'You may also have noticed that I used `webpack.DefinePlugin`: This plugin lets
    you define constants that can be used inside the project. In this case, we define
    `process.env.NODE_ENV` to tell the development environment apart from the production
    one.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can create the `src` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Once this is done, create the `index.html` file inside the `src` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now write the `main.js` file, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now use webpack to build the project. We can use the `npx` node command,
    which executes npm package binaries, saving us from having to write the whole
    path to the webpack executable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'A folder named `dist` will be created, and inside you will find the `app.bundle.js`
    and `index.html` files. If you open the HTML file, you may notice that the following
    line has been added at the end of the body tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: That is the `html` tag that will load the webpack bundle. We will see later
    how to tell webpack to use Vue single-file components.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since building each individual bundle and loading them in an HTTP server to
    see the changes during development is not convenient, we will use `webpack-dev-server`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: If you open a browser at `http://localhost:8080/`, you will see a white page
    with a Hello world phrase inside. If you open the browser development tools, you
    will see the same sentence printed in the browser console.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s put some commands to run webpack and `webpack-dev-server` inside the
    `package.json` file so that we can run them by typing `npm run build` and `npm
    start`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Since webpack 4.0, you have needed to specify whether you are running webpack
    for a production environment or a development one. The `--mode` parameter lets
    you specify which environment you are building for. Finally, `--config webpack.config.js`
    can be omitted.
  prefs: []
  type: TYPE_NORMAL
- en: 'You may have noticed that I added `cross-env NODE_ENV=production` in the `build`
    section. That''s because, when building the application for production, we need
    the `NODE_ENV` environment variable to be set to a production value. This way,
    we can use something like the following code to determine whether we are building
    production code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'To use `cross-env`, you need to install it by typing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Finally, let's install Vue and Vuex and use them to check whether everything
    is properly configured.
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the following command in a console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Edit the `main.js` file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Update `index.html` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Now type `npm start` and voilaâ€”the browser shows our very first Vuex application:
    `Hello Vue(x) World!`'
  prefs: []
  type: TYPE_NORMAL
- en: Using vue-loader for single-file components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Vue.js provides a webpack loader, `vue-loader`, to transform single-file components
    into JavaScript modules. To install `vue-loader` and related tools, type the following
    commands into a console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The `file-loader` is needed to import external files, such as images. The other
    packages are needed to tell webpack how to build all the pieces inside the `.vue`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s update `webpack.config.js` to use single-file components that will have
    a file extension of `.vue`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Within the `rules` section inside the configuration, we tell webpack which loader
    to use when a file is imported inside a source file. In the preceding code, we
    configured webpack to use `vue-loader` for every `.vue` file, `css-loader`, and
    `vue-style-loader` for `.css` files, and `file-loader` for images.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to test that everything has been correctly configured, we will create
    an `app.vue` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: You need a `background.jpg` file to build the preceding file. It is enough to
    put any image within the `src` folder and rename it as `background.jpg`.
  prefs: []
  type: TYPE_NORMAL
- en: This file uses `Vuex.Store`, the three parts of a Vue single-file componentâ€”`<template>`,
    `<script>`, and `<style>`â€”and an image as the background. This way, we are going
    to test `vue-loader` and its related packages, `Vuex.Store`, and `file-loader`
    for the background image.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s now update `main.js` to use `app.vue`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Restart `webpack-dev-server` (`npm start`) and open the URL `http://localhost:8080/`,
    and you will see something like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5ca88b5c-b3dc-4acf-82a2-010d7401a8da.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.1: Using app.vue'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the test environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are configuring webpack for single-file components, you will probably
    find it a bit tricky; configuring a test environment is definitely difficult the
    first time.
  prefs: []
  type: TYPE_NORMAL
- en: We will use Karma as the test runner, Jasmine as the test/assertions framework,
    and Chrome as the browser that will run all the tests.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s install all we need:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we need to create a `karma.conf.js` file, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The preceding configuration will run all files that end with `.spec.js` inside
    the `test` folder. In addition, we told Karma to preprocess files using webpack.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a test folder inside `notes-app`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Finally, we will create a simple test that will load a `.vue` file and test
    it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a folder inside `test` named `test-setup` and put it inside a `dummy.vue`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a test file named `dummy.vue.spec.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Update `package.json` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, execute `npm test` to run the test we just created. You should see something
    like the following in the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: We are now ready to begin the development of the EveryNote web application,
    which is the topic of the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we went through all the steps necessary to set up a test and
    development environment, ready to start coding with Vuex and Vue single file components.
    In addition we added some files to test that everything was properly configured.
  prefs: []
  type: TYPE_NORMAL
