- en: Data Iteration Components
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据迭代组件
- en: In this chapter, we will cover the basic and advanced features to visualize
    data with data iteration components provided by PrimeNG, which include DataTable,
    DataList, PickList, OrderList, DataGrid, DataScroller, Tree, and TreeTable. We
    will start with the DataTable component that offers extensive features, such as
    filtering, sorting, pagination, selection, reordering, column resizing, toggling,
    and many more. We will then focus on various other components, such as DataList,
    that render data in a listed format and provide data selection through the listed
    sets such as PickList and OrderList.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖使用PrimeNG提供的数据迭代组件来可视化数据的基本和高级功能，其中包括DataTable、DataList、PickList、OrderList、DataGrid、DataScroller、Tree和TreeTable。我们将从提供了诸多功能的DataTable组件开始，如过滤、排序、分页、选择、重新排序、列调整大小、切换等。然后我们将专注于其他各种组件，如DataList，以列表格式呈现数据，并通过PickList和OrderList等列出的集合提供数据选择。
- en: After that, we will also see two more data variation components such as DataGrid
    that arranges large datasets in the grid-oriented layout and DataScroller that
    lazily loads data according to the page scroll done by the user. The Tree and
    TreeTable components list data in a tree format, and they are mostly based on
    the same data model. At the end of this chapter, we will discuss a sophisticated
    component called Schedule to visualize calendar data, and we will demonstrate
    its usage with its lazy loading feature.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们还将看到两个更多的数据变化组件，如DataGrid，它以网格导向布局排列大型数据集，以及DataScroller，它根据用户滚动页面来懒加载数据。Tree和TreeTable组件以树形式列出数据，并且它们大多基于相同的数据模型。在本章末尾，我们将讨论一个名为Schedule的复杂组件，用于可视化日历数据，并演示其懒加载功能的使用。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Multi feature DataTable
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多功能DataTable
- en: Selecting rows in DataTable
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在DataTable中选择行
- en: Sorting, filtering, and paginating data in DataTable
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在DataTable中对数据进行排序、过滤和分页
- en: Customizing cell content with templating
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用模板自定义单元格内容
- en: Resizing, reordering, and toggling columns in DataTable
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在DataTable中调整、重新排序和切换列
- en: In-cell editing with DataTable
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用DataTable进行单元格编辑
- en: Making DataTable responsive
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使DataTable响应式
- en: Using column and row grouping
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用列和行分组
- en: Handling tons of data with lazy DataTable
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用懒加载DataTable处理大量数据
- en: Row expansion by providing row template
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过提供行模板进行行展开
- en: Exporting data in the CSV format
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以CSV格式导出数据
- en: DataTable events and methods
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DataTable事件和方法
- en: Listing data with DataList
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用DataList列出数据
- en: Listing data with PickList
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用PickList列出数据
- en: Listing data with OrderList
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用OrderList列出数据
- en: Grid-organized data with DataGrid
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用DataGrid进行网格化数据
- en: On demand data loading with DataScroller
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用DataScroller进行按需数据加载
- en: Visualizing data with Tree
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Tree可视化数据
- en: Visualizing data with TreeTable
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用TreeTable可视化数据
- en: Managing events with Schedule
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Schedule管理事件
- en: Multi feature DataTable
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多功能DataTable
- en: 'DataTable displays data in a tabular format. The table is an arrangement of
    data in rows and columns, or possibly in a more complex structure. It requires
    a value as an array of objects bound through the `value` property and columns
    defined with the `p-column` component. A basic example of the component with browser
    details to display in the list format would be written as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: DataTable以表格格式显示数据。表格是数据按行和列排列，或者可能是更复杂的结构。它需要一个作为对象数组的值，通过`value`属性绑定，并且使用`p-column`组件定义列。一个基本的组件示例，用于显示在列表格式中的浏览器详情，将被写成如下形式：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The `browsers` array consists of objects with `engine`, `browser`, `platform`,
    and `grade` properties. The `field` property will map the model object property,
    whereas the `header` property is used to display a column''s heading. In real-time
    applications, we use services to fetch the data from remote data sources. In this
    case, service is created as an injectable service and it uses the HTTP module
    to fetch data. The browser service would be defined with observables as shown
    here:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`browsers`数组由具有`engine`、`browser`、`platform`和`grade`属性的对象组成。`field`属性将映射模型对象属性，而`header`属性用于显示列的标题。在实时应用程序中，我们使用服务从远程数据源获取数据。在这种情况下，服务被创建为可注入的服务，并且它使用HTTP模块来获取数据。浏览器服务将被定义为可观察对象，如下所示：'
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The component class has to define an array of `browser` objects (or items)
    for the `value` property. The items are retrieved from the remote service call
    as shown here:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 组件类必须为`value`属性定义一个`browser`对象（或项目）的数组。项目是从远程服务调用中检索的，如下所示：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The following screenshot shows a snapshot result presented in a tabular format:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了以表格格式呈现的快照结果：
- en: '![](assets/cab55298-f1b0-47cc-b166-6effb9bb9ef1.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/cab55298-f1b0-47cc-b166-6effb9bb9ef1.png)'
- en: In the preceding snapshot, we can observe alternative colors for the rows. This
    is a theme-specific behavior.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的快照中，我们可以观察到行的替代颜色。这是一个特定于主题的行为。
- en: PrimeNG 4.1 handles the change detection feature in a more flexible manner.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: PrimeNG 4.1以更灵活的方式处理变更检测功能。
- en: Change detection
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 变更检测
- en: DataTable uses either setter-based checking or **ngDoCheck** to realize if the
    underlying data has changed to update the **user interface** (**UI**). This is
    configured using the `immutable` property. If you enabled (default) it, then the
    setter-based detection is utilized so your data changes such as adding or removing
    a record should always create a new array reference instead of manipulating an
    existing array. This constraint is due to Angular and does not trigger setters
    if the reference does not change. In this case, use slice instead of splice when
    removing an item or use the spread operator instead of the `push` method when
    adding an item.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: DataTable使用基于setter的检查或**ngDoCheck**来判断基础数据是否发生变化以更新**用户界面**（**UI**）。这是使用`immutable`属性进行配置的。如果启用（默认），则会使用基于setter的检测，因此数据更改（例如添加或删除记录）应始终创建一个新的数组引用，而不是操作现有数组。这个约束是由于Angular，并且如果引用没有改变，就不会触发setter。在这种情况下，删除项目时使用slice而不是splice，或者在添加项目时使用扩展运算符而不是`push`方法。
- en: On the other hand, setting the `immutable` property to `false` removes this
    restriction using ngDoCheck with IterableDiffers to listen to changes without
    the need to create a new reference of data. The setter-based method is faster;
    however, both methods can be used depending on your preference.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，将`immutable`属性设置为`false`会移除使用ngDoCheck的限制，使用IterableDiffers来监听变化，而无需创建数据的新引用。基于setter的方法更快；然而，根据您的偏好，两种方法都可以使用。
- en: Dynamic columns
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动态列
- en: 'In the preceding use case, the columns are defined in a static representation
    using the `p-column` tag. There is another approach to represent columns inside
    a data table via dynamic columns. The table columns need to be instantiated as
    an array. The array will be iterated using the `ngFor` directive as shown here:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的用例中，列是使用`p-column`标签以静态表示定义的。还有另一种方法可以通过动态列在数据表中表示列。表列需要被实例化为一个数组。该数组将使用`ngFor`指令进行迭代，如下所示：
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The `cols` property describes the given column options within the component
    class:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`cols`属性描述了组件类中给定的列选项：'
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The following screenshot shows a snapshot result of dynamic columns in a tabular
    format as an example:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了动态列在表格格式中的快照结果作为示例：
- en: '![](assets/a3408625-374d-4dc8-9d64-fa316e6432df.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a3408625-374d-4dc8-9d64-fa316e6432df.png)'
- en: In the preceding snapshot, the columns are dynamically added or removed using
    a multiselect drop-down menu. For demonstration purposes, we removed the Version
    column field from the table.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的快照中，列是使用多选下拉菜单动态添加或删除的。为了演示目的，我们从表格中删除了版本列字段。
- en: Selecting rows in DataTable
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在DataTable中选择行
- en: In order to perform CRUD operations on the component, there is a need for table
    row selection. PrimeNG supports various kinds of selections such as single, multiple,
    radio, and checkbox with different event callbacks.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在组件上执行CRUD操作，需要对表格行进行选择。PrimeNG支持各种选择，如单选、多选、单选按钮和复选框，并带有不同的事件回调。
- en: Single selection
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单选
- en: In single selection, the row is selected by a click event on a specific row.
    This selection is enabled by setting `selectionMode` as the `single` and `selection`
    property to hold the selected row. By default, the row is unselected with the
    help of the Meta key *(Ctrl* key for Windows or *Command* key for macOS). The
    row can be unselected without pressing the Meta key just by disabling the `metaKeySelection`
    property.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在单选中，通过单击特定行上的单击事件来选择行。通过将`selectionMode`设置为`single`并将`selection`属性设置为所选行来启用此选择。默认情况下，可以通过Meta键（Windows的Ctrl键或macOS的Command键）取消选择行。通过禁用`metaKeySelection`属性，可以在不按下Meta键的情况下取消选择行。
- en: 'The component with a single selection feature to select a specific browser
    record would be written as follows:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 具有单选功能的组件，用于选择特定的浏览器记录，将如下所示编写：
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The component class has to define the `selectedBrower` object to store the
    selected item. The following screenshot shows a snapshot result with single selection
    as an example:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 组件类必须定义`selectedBrower`对象来存储所选项目。以下屏幕截图显示了单选结果的快照：
- en: '![](assets/cb577df9-4538-4189-99c3-86c3eef404ae.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/cb577df9-4538-4189-99c3-86c3eef404ae.png)'
- en: To notify that single selection has worked or not, we displayed the selected
    record information in a footer section. The footer data should always be in sync
    with the selected record.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 为了通知单选是否起作用，我们在页脚部分显示了所选记录的信息。页脚数据应始终与所选记录同步。
- en: Multiple selection
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多选
- en: In multiple selection, the row is selected by a click event on a specific row
    and multiple rows can be selected using the Meta key or *Shift* key. This selection
    is enabled by setting `selectionMode` as `multiple` and the `selection` property
    to hold selected rows in the form of an array. By default, the row is unselected
    with the help of the Meta key *(Ctrl* key for Windows or *Command* key for macOS).
    The row can be unselected without the help of Meta key just by disabling the `metaKeySelection`
    property.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在多选中，通过单击特定行上的单击事件来选择行，并且可以使用Meta键或*Shift*键选择多行。通过将`selectionMode`设置为`multiple`并将`selection`属性设置为以数组形式保存所选行来启用此选择。默认情况下，可以通过Meta键（Windows的Ctrl键或macOS的Command键）取消选择行。通过禁用`metaKeySelection`属性，可以在不使用Meta键的情况下取消选择行。
- en: 'The component with the multiple selection feature to select multiple browser
    records would be written as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 具有多选功能的组件，用于选择多个浏览器记录，将如下所示编写：
- en: '[PRE6]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The component class has to define the `selectedBrowers` array object to store
    the selected records. The following screenshot shows a snapshot result with multiple
    selection as an example:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 组件类必须定义`selectedBrowers`数组对象来存储所选记录。以下屏幕截图显示了多选结果的快照：
- en: '![](assets/1d334d7f-706a-4aa3-bdb5-bb6eabcc5913.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1d334d7f-706a-4aa3-bdb5-bb6eabcc5913.png)'
- en: To notify that multiple selection has worked or not, we displayed the selected
    records information in a footer section. The footer data should always be in sync
    with selected records.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 为了通知多选是否起作用，我们在页脚部分显示了选定记录的信息。页脚数据应始终与选定的记录同步。
- en: Both single and multiple selection support four event callbacks, `onRowClick`,
    `onRowDblClick`, `onRowSelect`, and `onRowUnselect`, which carry selected data
    information within an event object. Refer to the events section for more details.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 单选和多选都支持四个事件回调，`onRowClick`、`onRowDblClick`、`onRowSelect`和`onRowUnselect`，它们在事件对象中携带选定的数据信息。有关更多详细信息，请参阅事件部分。
- en: RadioButton selection
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单选按钮选择
- en: The single selection can be achieved through radio buttons, which exist on each
    row instead of using the click event on a specific row. The selection is enabled
    by setting `selectionMode` as `single` on a column level (remember that previously
    mentioned plain selection works on a table level) and the `selection` property
    to hold the selected row as an object.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 单选可以通过单选按钮实现，每行都有单选按钮，而不是在特定行上使用单击事件。通过在列级别设置`selectionMode`为`single`（请记住，前面提到的普通选择是在表级别上工作的），并将`selection`属性设置为保存选定行的对象来启用选择。
- en: 'The component with the radio selection feature to select specific browser records
    would be written as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 具有单选按钮选择功能的组件，用于选择特定的浏览器记录，将如下编写：
- en: '[PRE7]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The following screenshot shows a snapshot result with a radio button selection
    as an example:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了单选按钮选择的快照结果：
- en: '![](assets/495cc0c0-524b-4bee-b61e-31c6d095a8bc.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/495cc0c0-524b-4bee-b61e-31c6d095a8bc.png)'
- en: As of now, there is no unselected feature for radio button selection (that is,
    the row is unselected once you select another row).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 截至目前，单选按钮选择没有未选择的功能（也就是说，一旦选择了另一行，该行就会被取消选择）。
- en: Checkbox selection
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 复选框选择
- en: The multiple selection can be achieved through checkboxes, which exist on each
    row instead of using a click event on a specific row. The selection is enabled
    by setting `selectionMode` as `multiple` on a column level (remember that plain
    selection provides this on a table level) and the `selection` property to hold
    the selected rows as an array of objects.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 多选可以通过复选框实现，每行都有复选框，而不是在特定行上使用单击事件。通过在列级别设置`selectionMode`为`multiple`（请记住，普通选择在表级别提供此功能），并将`selection`属性设置为保存选定行的对象数组来启用选择。
- en: 'The component with the checkbox selection feature to select multiple browser
    records would be written as follows:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 具有复选框选择功能的组件，用于选择多个浏览器记录，将如下编写：
- en: '[PRE8]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The following screenshot shows a snapshot result with a checkbox selection
    as an example:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了复选框选择的快照结果：
- en: '![](assets/aa4648a3-d61b-4d76-90d5-e7bead2a1093.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/aa4648a3-d61b-4d76-90d5-e7bead2a1093.png)'
- en: In this selection, the selected records can be unselected by unselecting checkboxes.
    The checkbox selection supports the `onHeaderCheckboxToggle` event while toggling
    the header checkbox. Refer to the events section for more details.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种选择中，选定的记录可以通过取消复选框来取消选择。复选框选择支持`onHeaderCheckboxToggle`事件，用于切换标题复选框。有关更多详细信息，请参阅事件部分。
- en: When selection is enabled, use the `dataKey` attribute to avoid deep checking
    when comparing objects. If you cannot provide `dataKey`, use the `compareSelectionBy`
    property as "equals," which uses a reference for comparison instead of the default
    "deepEquals" comparison. The deepEquals comparison is not a good idea (especially
    for huge data) in terms of performance because it checks all the properties.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 启用选择时，请使用`dataKey`属性避免在比较对象时进行深度检查。如果无法提供`dataKey`，请使用`compareSelectionBy`属性设置为"equals"，它使用引用进行比较，而不是默认的"deepEquals"比较。深度比较不是一个好主意（特别是对于大量数据），因为它会检查所有属性。
- en: 'For example, the value of the `browserId` property could be chosen for `dataKey`
    as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，可以选择`browserId`属性的值作为`dataKey`，如下所示：
- en: '`<p-dataTable dataKey="browserId" selection="true">'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`<p-dataTable dataKey="browserId" selection="true">'
- en: '...'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: </p-dataTable>`
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: </p-dataTable>`
- en: Sorting, filtering, and paginating data in DataTable
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在DataTable中对数据进行排序、过滤和分页
- en: Sorting, filtering, and pagination features are very crucial features for any
    kind of data iteration component. These features are going to be very helpful
    while working on large datasets.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 排序、过滤和分页功能对于任何类型的数据迭代组件来说都是非常重要的功能。在处理大型数据集时，这些功能将非常有帮助。
- en: Sorting
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 排序
- en: 'The sorting feature is provided by enabling the `sortable` property on each
    column. By default, the component supports single sorting (`sortMode="single"`).
    We can achieve multi sorting by setting `sortMode="multiple"`. The DataTable component
    with the sorting feature to sort browser records in either ascending or descending
    order would be written as follows:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在每一列上启用`sortable`属性来提供排序功能。默认情况下，组件支持单一排序（`sortMode="single"`）。我们可以通过设置`sortMode="multiple"`来实现多重排序。具有排序功能的DataTable组件，以按升序或降序对浏览器记录进行排序，将如下所示：
- en: '[PRE9]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The following screenshot shows a snapshot result with a single sorting on a
    limited number of records as an example:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了对有限数量记录进行单一排序的快照结果：
- en: '![](assets/a442c658-24dd-48c5-ae38-b47eab29d6ba.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: ！[](assets/a442c658-24dd-48c5-ae38-b47eab29d6ba.png)
- en: We need to use the Meta key *(Ctrl* for Windows and *Command* key for macOS)
    for the multi column sorting feature. The custom sorting is also supported using
    the `sortFunction` function instead of regular sorting on the `field` property.
    The sorting feature also provides the `onSort` event callback, which will be invoked
    on sorting a column. Refer to the event details section for more information.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要使用Meta键（Windows为Ctrl，macOS为Command键）来使用多列排序功能。还支持使用`sortFunction`函数进行自定义排序，而不是在`field`属性上进行常规排序。排序功能还提供了`onSort`事件回调，将在对列进行排序时调用。有关更多信息，请参阅事件详细信息部分。
- en: Filtering
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 过滤
- en: The filtering feature is provided by enabling the `filter` property on each
    column. The filter can be applied on a column level and whole table level as well.
    The table level filtering is also called **global filtering**. To enable global
    filter, the local template variable of input need to be referred in the `globalFilter`
    property. The `keyup` event of global filter input will be listened to for filtering.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在每一列上启用`filter`属性来提供过滤功能。过滤可以应用于列级别和整个表级别。表级别的过滤也称为全局过滤。要启用全局过滤，需要在`globalFilter`属性中引用输入的本地模板变量。全局过滤输入的`keyup`事件将被监听以进行过滤。
- en: 'The filter feature supports optional filter properties such as `filterMatchMode`
    to provide different types of a text search. It has five filter match modes such
    as `startsWith`, `contains`, `endsWith`, `equals`, and `in` and the default match
    mode is `startsWith`, whereas the `filterPlaceholder` property is used to display
    the helper place holder text. The DataTable component with the filtering feature
    on table columns would be written as follows:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 过滤功能支持可选的过滤属性，例如`filterMatchMode`，以提供不同类型的文本搜索。它有五种过滤匹配模式，如`startsWith`、`contains`、`endsWith`、`equals`和`in`，默认匹配模式是`startsWith`，而`filterPlaceholder`属性用于显示辅助占位文本。具有表列过滤功能的DataTable组件将如下所示：
- en: '[PRE10]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The filtering feature is normally applied on a plain input component, but this
    behavior can also be customized by providing a filter on various other inputs
    such as Spinner, Slider, DropDown, and MultiSelect components. The custom input
    filter calls a `filter` function with three parameters. The signature of the `filter`
    function would be written as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 过滤功能通常应用于普通输入组件，但也可以通过在各种其他输入上提供过滤器来自定义此行为，例如Spinner、Slider、DropDown和MultiSelect组件。自定义输入过滤器调用带有三个参数的`filter`函数。`filter`函数的签名将如下所示：
- en: '[PRE11]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The following screenshot shows a snapshot result with a filtering feature on
    a limited number of records as an example:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了一个具有过滤功能的快照结果，作为示例，记录数量有限：
- en: '![](assets/e53d5ecf-0d93-428e-9b70-13428f513f0c.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e53d5ecf-0d93-428e-9b70-13428f513f0c.png)'
- en: In the preceding snapshot, we can observe that the data is filtered by a rating
    slider and multi select grade field. The filtering feature also provides the `onFilter`
    event callback, which will be invoked on filtering an input. Refer to the event
    details section for more information.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的快照中，我们可以观察到数据是通过评分滑块和多选等级字段进行过滤的。过滤功能还提供了`onFilter`事件回调，该回调将在过滤输入时被调用。有关更多信息，请参阅事件详细信息部分。
- en: Pagination
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分页
- en: If the table is backed by huge datasets, then displaying all of the data on
    a single page looks awkward and it is going to be a nightmare for the user when
    scrolling millions of records. The DataTable component supports a pagination feature
    just by enabling the `paginator` property and the `rows` option to display the
    number of records in the page.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如果表格支持大型数据集，那么在单个页面上显示所有数据看起来很尴尬，当滚动数百万条记录时，对用户来说将是一场噩梦。DataTable组件通过启用`paginator`属性和`rows`选项来支持分页功能，仅需显示页面中的记录数量。
- en: 'Apart from the mentioned required features, it also supports various optional
    features such as:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 除了上述必需的功能，它还支持各种可选功能，例如：
- en: The `pageLinks` property shows the number of page link displayed at a time.
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pageLinks`属性显示了一次显示的页面链接数量。'
- en: The `rowsPerPageOptions` property has a provision to change the number of rows
    to be displayed (comma separated values as an array) in a single page.
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rowsPerPageOptions`属性允许更改在单个页面中显示的行数（作为数组的逗号分隔值）。'
- en: The `totalRecords` property displays the logical records which are useful for
    the lazy loading feature.
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`totalRecords`属性显示了对于延迟加载功能有用的逻辑记录。'
- en: The `paginatorPosition` property displays the paginator with possible values
    of `top`, `bottom`, and `both`. The default position of paginator is `bottom`.
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`paginatorPosition`属性显示分页器的可能值为`top`、`bottom`和`both`。分页器的默认位置是`bottom`。'
- en: 'The pagination example, which is used to display a lot of browser''s information,
    would be written as follows:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 用于显示大量浏览器信息的分页示例将如下所示：
- en: '[PRE12]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The following screenshot shows a snapshot result with a pagination feature
    as an example:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了一个具有分页功能的快照结果，作为示例：
- en: '![](assets/900610bd-c5df-41bc-9c74-f433a8db745f.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/900610bd-c5df-41bc-9c74-f433a8db745f.png)'
- en: We can also use an external paginator using the Paginator component apart from
    the one built into DataTable. The pagination feature also provides the `onPage`
    event callback (whereas the external paginator provides the `onPageChange` callback),
    which will be invoked on pagination. Refer to the event details section for more
    information.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 除了内置于DataTable中的分页器之外，我们还可以使用外部分页器来使用Paginator组件。分页功能还提供了`onPage`事件回调（而外部分页器提供了`onPageChange`回调），该回调将在分页时被调用。有关更多信息，请参阅事件详细信息部分。
- en: Customizing the cell content with templating
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用模板自定义单元格内容
- en: By default, the value of the `field` attribute of each column is used to display
    the table content. The content can also be customized in every possible way with
    the help of the `ng-template` template tag, which can be applied on header, body,
    and footer levels. The `template` variable passed to the `ng-template` template
    is used for column definition and row data is used by the `rowData` property.
    There is also an optional row index available through the `rowIndex` variable.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，每列的`field`属性值用于显示表格内容。可以通过`ng-template`模板标签以各种可能的方式自定义内容，该模板标签可以应用于头部、主体和底部级别。传递给`ng-template`模板的`template`变量用于列定义，行数据由`rowData`属性使用。还可以通过`rowIndex`变量获得可选的行索引。
- en: 'The `ng-template` template will have the `pTemplate` directive, which holds
    the type of customization with the possible values of `header`, `body`, and `footer`.
    The customized browser content is displayed with various text colors and row data
    information with a button selection as follows:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`ng-template`模板将具有`pTemplate`指令，其中包含了可能的值为`header`、`body`和`footer`的自定义类型。自定义的浏览器内容以各种文本颜色和行数据信息显示，并带有按钮选择，如下所示：'
- en: '[PRE13]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In the preceding example, we customized the table content to display different
    colors based on grades, each row with button selection using body template and
    button at the header using a header template. The following screenshot shows a
    snapshot result with customized content display as an example:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，我们自定义了表格内容，根据成绩显示不同的颜色，使用body模板每行带有按钮选择，使用header模板在表头处有一个按钮。以下截图显示了自定义内容显示的快照结果：
- en: '![](assets/22ba4594-3a72-4773-a293-2cf44be9615f.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/22ba4594-3a72-4773-a293-2cf44be9615f.png)'
- en: As per the preceding snapshot, the `ng-template` template tag is used with different
    types to provide a full flexibility on customization.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 根据上面的快照，`ng-template`模板标签用于不同类型，以提供完全灵活的自定义。
- en: Resizing, reordering, and toggling columns in DataTable
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在DataTable中调整大小、重新排序和切换列
- en: By default, all the columns of the component are in static representation without
    interaction. The component provides resizing, reordering, and toggling features
    for columns.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，组件的所有列都是静态表示，没有交互。该组件为列提供了调整大小、重新排序和切换功能。
- en: Resizing
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调整大小
- en: Columns can be resized using drag-and-drop behavior just by setting the `resizableColumns`
    property to `true`. There are two types of resize modes available. One is the
    `fit` mode and the other one is the `expand` mode. The default one is the `fit`
    mode. In this mode, when columns are resized, the total width of the table will
    not be changed; whereas in the `expand` mode, the total width of table will be
    changed.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过将`resizableColumns`属性设置为`true`来使用拖放行为调整列的大小。有两种调整大小模式可用。一种是`fit`模式，另一种是`expand`模式。默认模式是`fit`模式。在此模式下，调整列时，表格的总宽度不会改变；而在`expand`模式下，表格的总宽度将会改变。
- en: 'The resizing feature with the `expand` mode would be written as follows:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`expand`模式的调整功能将被编写如下：
- en: '[PRE14]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The following screenshot shows a snapshot result with the `expand` resize mode
    as an example:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了使用`expand`调整大小模式的快照结果：
- en: '![](assets/26c5545b-f4c5-442a-8f27-967a8ea38428.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/26c5545b-f4c5-442a-8f27-967a8ea38428.png)'
- en: In the preceding snapshot, we can observe that both Engine and Grade columns
    are resized considering its content size to optimize the screen area. Because
    of the `expand` mode, the total width of the table is also changed. It can also
    provides the `onColumnResize` event callback which passes the resized column header
    information when the column gets resized. Refer to the event details section for
    more information.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的快照中，我们可以观察到引擎和等级列都根据其内容大小调整大小，以优化屏幕区域。由于“expand”模式，表的总宽度也会改变。当列调整大小时，它还可以提供“onColumnResize”事件回调，该事件在列调整大小时传递调整大小的列标题信息。有关更多信息，请参阅事件详细信息部分。
- en: Reordering
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重新排序
- en: Generally, the order of table columns will appear exactly as it is defined within
    the component. There is an option to reorder the columns using the drag-and-drop
    feature just by setting the `reorderableColumns` property to `true`.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，表列的顺序将完全按照组件中定义的顺序显示。只需将“reorderableColumns”属性设置为“true”，即可使用拖放功能重新排序列。
- en: 'The reordering feature would be written as follows:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 重新排序功能将写成如下形式：
- en: '[PRE15]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The following screenshot shows a snapshot result with a reordering feature
    as an example:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了重新排序功能的快照结果示例：
- en: '![](assets/d950ccd2-0ffb-4bab-aa79-c8a9a96987d4.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d950ccd2-0ffb-4bab-aa79-c8a9a96987d4.png)'
- en: As per the preceding snapshot, both Platform and Browser column fields are mutually
    reordered (that is, the initial column order is `engine`, `browser`, `platform`,
    and `grade`. After reordering, the column's order will be `engine`, `platform`,
    `browser`, and `grade`). It also provides the `onColReorder` event callback whenever
    the column gets reordered. Refer to the events section for more details.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前面的快照，平台和浏览器列字段是相互重新排序的（即，初始列顺序为“engine”、“browser”、“platform”和“grade”。重新排序后，列的顺序将变为“engine”、“platform”、“browser”和“grade”）。每当列重新排序时，它还提供“onColReorder”事件回调。有关更多详细信息，请参阅事件部分。
- en: Toggling
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 切换
- en: Most of the time there will not be enough screen space (or area) to display
    all the columns. In this case, toggling of table columns would be really helpful
    to save available screen space. Because of this feature, only mandatory or primary
    columns can be shown. This feature can be achieved by defining MultiSelect components
    on a dynamic column table in order to toggle the columns. Refer to the dynamic
    columns example which was mentioned at the beginning of this chapter.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数情况下，屏幕空间不足以显示所有列。在这种情况下，切换表列将非常有助于节省可用的屏幕空间。由于此功能，只能显示必需或主要列。可以通过在动态列表上定义MultiSelect组件来实现此功能，以切换列。请参阅本章开头提到的动态列示例。
- en: In-cell editing with DataTable
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用DataTable进行单元格内编辑
- en: 'By default, the component''s content will be in read-only mode (that is, we
    can''t edit the content). An UI will be more interactive with the cell editing
    feature. The cell editing feature is enabled just by setting the `editable` property
    on both table and column levels. When a cell is clicked on, the edit mode will
    be activated. Clicking on the outside of a cell or hitting the *Enter* key switches
    back to the view mode after updating the value. The cell editing feature would
    be written as follows:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，组件的内容将处于只读模式（即，我们无法编辑内容）。使用单元格编辑功能，UI将更具交互性。只需在表和列级别上设置“editable”属性，即可启用单元格编辑功能。单击单元格时，将激活编辑模式。在单元格外部单击或按下“Enter”键后，将切换回查看模式并更新值。单元格编辑功能将写成如下形式：
- en: '[PRE16]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The following screenshot shows a snapshot result with the cell editing feature
    on the `engine` field as an example:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了在“engine”字段上使用单元格编辑功能的快照结果示例：
- en: '![](assets/921af400-6547-4e89-9417-004e2bc3b29e.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/921af400-6547-4e89-9417-004e2bc3b29e.png)'
- en: By default, the editable mode enables the input component on the click of a
    particular cell. We can also use other input components such as DropDown, MultiSelect,
    Calendar, and so on, for a customized input editing. In the preceding example,
    we can edit the cells using Input and Dropdown components.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，可编辑模式在单击特定单元格时启用输入组件。我们还可以使用其他输入组件，如DropDown、MultiSelect、Calendar等，进行自定义输入编辑。在前面的示例中，我们可以使用Input和Dropdown组件编辑单元格。
- en: Making DataTable responsive
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使DataTable响应式
- en: The responsive feature is very useful for both web and mobile apps. The component
    columns are displayed as stacked in a responsive mode if the screen size is smaller
    than a certain breakpoint value. This feature is enabled by setting the `responsive`
    property as `true`. This stacked behavior can also be achieved manually (irrespective
    of the screen size) by enabling the `stacked` property (that is, `stacked="true"`).
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 响应功能对于Web和移动应用程序都非常有用。如果屏幕尺寸小于某个断点值，则组件列将以响应模式堆叠显示。通过将`responsive`属性设置为`true`来启用此功能。此堆叠行为也可以通过手动实现（不考虑屏幕尺寸）来实现，方法是启用`stacked`属性（即`stacked="true"`）。
- en: 'The responsive mode feature of the Table component would be written as follows:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: Table组件的响应模式功能将被编写如下：
- en: '[PRE17]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The component class defines the `toggle` method, which is used to toggle the
    responsive behavior as shown here:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 组件类定义了`toggle`方法，用于切换响应行为，如下所示：
- en: '[PRE18]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The following screenshot shows a snapshot result of the DataTable component
    with stacked columns as an example:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了DataTable组件具有堆叠列的快照结果：
- en: '![](assets/3378e8e2-6fe8-4f3a-abf8-13caf0270c33.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3378e8e2-6fe8-4f3a-abf8-13caf0270c33.png)'
- en: In this use case, the columns are displayed in a stacked manner by manually
    toggling the button, which is placed externally to the table. The responsive mode
    or stacked behavior can also be achieved by reducing or minimizing the screen
    size.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种用例中，列通过手动切换按钮以堆叠的方式显示，该按钮放置在表格外部。响应模式或堆叠行为也可以通过减小或最小化屏幕尺寸来实现。
- en: Using column and row grouping
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用列和行分组
- en: The DataTable component provides grouping on both column and row level.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: DataTable组件在列级和行级都提供了分组功能。
- en: Column grouping
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列分组
- en: 'Columns can be grouped at the header and footer area using `p-headerColumnGroup`
    and `p-footerColumnGroup` tags, which define the array of columns using `colspan`
    and `rowspan` properties. The table rows are defined using the `p-row` tag, which
    holds the column components. The component with column grouping would be written
    as follows:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`p-headerColumnGroup`和`p-footerColumnGroup`标签在表头和表尾区域对列进行分组，这些标签使用`colspan`和`rowspan`属性定义列的数组。表行使用`p-row`标签定义，其中包含列组件。具有列分组的组件将被编写如下：
- en: '[PRE19]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The following screenshot shows a snapshot result of the column grouping feature
    as an example:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了列分组功能的快照结果：
- en: '![](assets/b3c4eef3-4848-49f4-a753-4540361e5adc.png)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b3c4eef3-4848-49f4-a753-4540361e5adc.png)'
- en: In the preceding snapshot, we can observe that the browser-specific information
    is categorized with the help of column grouping.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的快照中，我们可以观察到特定于浏览器的信息是通过列分组进行分类的。
- en: Row grouping
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行分组
- en: By default, the table rows are individual and displayed one by one to represent
    unique records. In many cases, it is required to group multiple rows as one row.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，表行是单独的，并逐个显示以表示唯一记录。在许多情况下，需要将多个行分组为一行。
- en: Expandable row groups
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可展开的行分组
- en: The rows can be grouped on a specific field in such a way that rows can be expanded
    and collapsed using row expander feature. This feature is enabled by setting `rowGroupMode="subheader"`,
    `expandableRowGroups="true"`, and `groupField="browser"`. `groupField` is set
    to a specific categorized column.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 行可以根据特定字段进行分组，以便使用行展开器功能展开和折叠行。通过设置`rowGroupMode="subheader"`、`expandableRowGroups="true"`和`groupField="browser"`来启用此功能。`groupField`设置为特定的分类列。
- en: 'The row grouping feature with expandable row group option would be written
    as follows:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 具有可展开行组选项的行分组功能将被编写如下：
- en: '[PRE20]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The following screenshot shows a snapshot result of the expandable row grouping
    feature as an example:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了可展开的行分组功能的快照结果，作为示例：
- en: '![](assets/53bdc307-5891-4945-973e-21b59329cf01.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/53bdc307-5891-4945-973e-21b59329cf01.png)'
- en: In this use case, we expanded Firefox version 3 group to see all the browser
    details over time.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们展开了Firefox版本3组，以查看随时间变化的所有浏览器细节。
- en: Sub-headers
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 子标题
- en: All related items can be grouped under one sub-group using the sub-headers feature.
    This use case is similar to expanded row groups but these sub-headers cannot be
    collapsed. This behavior is enabled by setting `rowGroupMode="subheader"` and
    `groupField="engine"`. The `groupField` property is set to a specific categorized
    column.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 所有相关项目可以使用子标题功能分组在一个子组下。这个用例类似于展开的行组，但这些子标题不能被折叠。通过设置`rowGroupMode="subheader"`和`groupField="engine"`来启用此行为。`groupField`属性设置为特定的分类列。
- en: 'The row grouping feature with the sub-header option would be written as follows:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 具有子标题选项的行分组功能将被编写如下：
- en: '[PRE21]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The following screenshot shows a snapshot result of the table with the sub-header
    grouping feature as an example:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了具有子标题分组功能的表格的快照结果，作为示例：
- en: '![](assets/22b2b37a-eee9-4b12-b0f9-dd2ea123205a.png)The sub-header grouping
    feature'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/22b2b37a-eee9-4b12-b0f9-dd2ea123205a.png)子标题分组功能'
- en: In the preceding use case, all browser details are grouped based on a unique
    browser engine as a sub-header.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的用例中，所有浏览器细节都基于唯一的浏览器引擎进行分组，作为子标题。
- en: RowSpan groups
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: RowSpan组
- en: 'The rows can be grouped based on the `sortField` property. This feature is
    enabled by setting the `rowGroupMode` property value to `rowspan` (that is, `rowGroupMode="rowspan"`).
    An example of row grouping with row span would be written as follows:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 行可以根据`sortField`属性进行分组。通过将`rowGroupMode`属性值设置为`rowspan`（即`rowGroupMode="rowspan"`）来启用此功能。具有行跨度的行分组示例将被编写如下：
- en: '[PRE22]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The following screenshot shows a snapshot result of the component with the
    row span grouping feature as an example:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了具有行跨度分组功能的组件的快照结果，作为示例：
- en: '![](assets/791fe8fc-8f0d-432e-a5ad-7f1236c98d59.png)The row span grouping feature'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/791fe8fc-8f0d-432e-a5ad-7f1236c98d59.png)行跨度分组功能'
- en: In this version of row grouping, the browser's `engine` field is used for row
    grouping which spans across all of its related items.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个版本的行分组中，浏览器的“引擎”字段用于跨越其所有相关项目的行分组。
- en: Handling tons of data with lazy DataTable
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用延迟加载DataTable处理大量数据
- en: Lazy loading is a very crucial feature to handle huge datasets. This feature
    provides the loading of data chunks through paging, sorting, and filtering operations
    instead of loading all the data at once. The lazy loading is enabled by setting
    the `lazy` mode (`lazy="true"`) and carrying user actions using `onLazyLoad` callback
    with the the event object as a parameter. The event object holds the pagination,
    sorting, and filter data.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 延迟加载是处理大型数据集的非常关键的功能。此功能通过分页、排序和过滤操作加载数据块，而不是一次性加载所有数据。通过设置`lazy`模式（`lazy="true"）并使用`onLazyLoad`回调来进行用户操作，事件对象作为参数。事件对象保存了分页、排序和过滤数据。
- en: It is also required to display a logical number of records to be displayed for
    pagination configuration using projection query. This is needed because we can
    retrieve only the current page data in the lazy loading. There is no information
    available related to the remaining records. Hence, it is required to show the
    paginator links based on actual records in the data source. This can be achieved
    through the `totalRecords` property on a Table component.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 还需要使用投影查询显示要用于分页配置的逻辑记录数量。这是因为在延迟加载中我们只能检索当前页的数据。没有关于剩余记录的信息可用。因此，需要根据数据源中的实际记录显示分页链接。这可以通过表组件上的`totalRecords`属性实现。
- en: 'The component with lazy loading feature would be written as follows:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 具有延迟加载功能的组件将被编写如下：
- en: '[PRE23]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The component class defines lazy loading callback to retrieve data on demand
    as shown:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 组件类定义了延迟加载回调，以根据需要检索数据，如下所示：
- en: '[PRE24]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'As a demonstration of lazy loading, we used a pagination operation for retrieving
    the data. We can also use sorting and filtering features. The following screenshot
    shows a snapshot result to illustrate as an example:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 作为延迟加载的演示，我们使用分页操作来检索数据。我们还可以使用排序和过滤功能。以下截图显示了一个快照结果，以便作为示例进行说明：
- en: '![](assets/a80bbff2-1e08-434a-9115-0dcfc73c468e.png)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a80bbff2-1e08-434a-9115-0dcfc73c468e.png)'
- en: In the preceding snapshot, we can clearly observe that the information on page
    4 is retrieved dynamically from the remote data source. Refer to the events section
    for more details about the lazy loading event callback.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的快照中，我们可以清楚地观察到第4页的信息是动态从远程数据源检索的。有关延迟加载事件回调的更多详细信息，请参考事件部分。
- en: Always prefer lazy loading for large datasets to improve the performance.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 总是更喜欢对大型数据集使用延迟加载以提高性能。
- en: Row expansion by providing a row template
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过提供行模板进行行展开
- en: In many cases, it is not possible to accommodate all of the data in the table.
    The secondary or additional information of table data needs to be populated in
    a different representation. The row expansion features allows displaying detailed
    content for a particular row (that is, display data in a separate block which
    will appear on request). To use this feature, enable the `expandableRows` property
    and add an expander column using the `expander` property as a separate column
    along with regular columns in order to toggle the row. To declare the expanded
    content, provide a `pTemplate` directive with `rowexpansion` as the value. The
    local template reference variable from `ng-template` is used to access the table
    data.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，不可能容纳表中的所有数据。表数据的次要或附加信息需要以不同的表示形式填充。行展开功能允许为特定行显示详细内容（即，在请求时显示在单独的块中显示数据）。要使用此功能，请启用`expandableRows`属性，并使用`expander`属性作为单独列添加扩展列，以及常规列以切换行。要声明扩展内容，请使用`pTemplate`指令，并将`rowexpansion`作为值。从`ng-template`中使用本地模板引用变量来访问表数据。
- en: 'The component with the row expansion feature to display full details of a browser
    would be written as follows:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 具有行展开功能以显示浏览器的完整详细信息的组件将被编写如下：
- en: '[PRE25]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'If required, the expanded rows can be stored in an array variable inside the
    component class using the `expandedRows` property. The following screenshot shows
    a snapshot result of a component with the row expansion feature as an example:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要，可以使用`expandedRows`属性将展开的行存储在组件类内的数组变量中。以下截图显示了具有行展开功能的组件的快照结果作为示例：
- en: '![](assets/315ca686-6d19-4e77-b737-4038ecd4d17c.png)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/315ca686-6d19-4e77-b737-4038ecd4d17c.png)'
- en: By default, multiple rows can be expanded at once. We can make a strict single
    row expansion using the `rowExpandMode` property by setting it as `single`.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，可以一次展开多行。我们可以通过将`rowExpandMode`属性设置为`single`来进行严格的单行展开。
- en: 'We can apply the row expansion behavior for grouped tables as well:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以为分组表格应用行展开行为：
- en: The component provides an `expandableRowGroups` Boolean property which is used
    to create the icon to toggle the row groups.
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该组件提供了一个`expandableRowGroups`布尔属性，用于创建切换行组的图标。
- en: By default, all the rows will be expanded. The `expandedRowGroups` property
    is used to hold the row data instance to expand specific row groups by default.
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认情况下，所有行都将被展开。`expandedRowGroups`属性用于保存要默认展开特定行组的行数据实例。
- en: The method named `toggleRow` is provided in order to toggle table rows with
    the row data.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 提供了名为`toggleRow`的方法，用于切换表格行与行数据。
- en: Exporting data in CSV format
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以CSV格式导出数据
- en: 'The data can be viewed in table format in online mode at any time. But, there
    is a need of data in an offline mode. Also in many cases, we need to take huge
    data reports from the website. PrimeNG DataTable can be exported in CSV format
    using the `exportCSV()` API method. Button components placed inside or outside
    of the table can trigger this method for downloading the data in the CSV format.
    The component with export API method call would be written as follows:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 数据可以在在线模式下随时以表格格式查看。但是，也需要离线模式下的数据。此外，在许多情况下，我们需要从网站获取大量数据报告。PrimeNG DataTable可以使用`exportCSV()`API方法以CSV格式导出。放置在表格内部或外部的按钮组件可以触发此方法，以便以CSV格式下载数据。具有导出API方法调用的组件将被编写如下：
- en: '[PRE26]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: By default, exported CSV uses a comma (`,`) operator as a separator. But, this
    behavior can be changed using the `csvSeparator` property on a DataTable component.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，导出的CSV使用逗号（`,`）作为分隔符。但是，可以使用DataTable组件上的`csvSeparator`属性更改此行为。
- en: DataTable events and methods
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DataTable事件和方法
- en: 'The DataTable component provides many event callbacks and methods with respect
    to each feature. The following table lists out all the table event callbacks with
    name, parameter details, and description:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: DataTable组件针对每个功能提供了许多事件回调和方法。以下表格列出了所有表格事件回调的名称、参数详情和描述：
- en: '| **Name** | **Parameters** | **Description** |'
  id: totrans-209
  prefs: []
  type: TYPE_TB
  zh: '| **名称** | **参数** | **描述** |'
- en: '| `onRowClick` |'
  id: totrans-210
  prefs: []
  type: TYPE_TB
  zh: '| `onRowClick` |'
- en: '`event.originalEvent`: Browser event'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.originalEvent`: 浏览器事件'
- en: '`event.data`: Selected data'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.data`: 选定的数据'
- en: '| Callback to invoke when a row is clicked. |'
  id: totrans-213
  prefs: []
  type: TYPE_TB
  zh: '| 当点击行时调用的回调函数。 |'
- en: '| `onRowSelect` |'
  id: totrans-214
  prefs: []
  type: TYPE_TB
  zh: '| `onRowSelect` |'
- en: '`event.originalEvent`: Browser event'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.originalEvent`: 浏览器事件'
- en: '`event.data`: Selected data'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.data`: 选定的数据'
- en: '`event.type`: Type of selection, valid values are `row`, `radiobutton`, and
    `checkbox`'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.type`: 选择类型，有效值为`row`、`radiobutton`和`checkbox`'
- en: '| Callback to invoke when a row is selected. |'
  id: totrans-218
  prefs: []
  type: TYPE_TB
  zh: '| 当选择行时调用的回调函数。 |'
- en: '| `onRowUnselect` |'
  id: totrans-219
  prefs: []
  type: TYPE_TB
  zh: '| `onRowUnselect` |'
- en: '`event.originalEvent`: Browser event'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.originalEvent`: 浏览器事件'
- en: '`event.data`: Unselected data'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.data`: 未选择的数据'
- en: '`event.type`: Type of unselection, valid values are `row` and `checkbox`'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.type`: 取消选择类型，有效值为`row`和`checkbox`'
- en: '| Callback to invoke when a row is unselected with the Meta key. |'
  id: totrans-223
  prefs: []
  type: TYPE_TB
  zh: '| 当使用Meta键取消选择行时调用的回调函数。 |'
- en: '| `onRowDblclick` |'
  id: totrans-224
  prefs: []
  type: TYPE_TB
  zh: '| `onRowDblclick` |'
- en: '`event.originalEvent`: Browser event'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.originalEvent`: 浏览器事件'
- en: '`event.data`: Selected data'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.data`: 选定的数据'
- en: '| Callback to invoke when a row is selected with double-click. |'
  id: totrans-227
  prefs: []
  type: TYPE_TB
  zh: '| 当双击选择行时调用的回调函数。 |'
- en: '| `onHeaderCheckboxToggle` |'
  id: totrans-228
  prefs: []
  type: TYPE_TB
  zh: '| `onHeaderCheckboxToggle` |'
- en: '`event.originalEvent`: Browser event'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.originalEvent`: 浏览器事件'
- en: '`event.checked`: State of the header checkbox'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.checked`: 头部复选框的状态'
- en: '| Callback to invoke when state of header checkbox changes. |'
  id: totrans-231
  prefs: []
  type: TYPE_TB
  zh: '| 当头部复选框状态改变时调用的回调函数。 |'
- en: '| `onContextMenuSelect` |'
  id: totrans-232
  prefs: []
  type: TYPE_TB
  zh: '| `onContextMenuSelect` |'
- en: '`event.originalEvent`: Browser event'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.originalEvent`: 浏览器事件'
- en: '`event.data`: Selected data'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.data`: 选定的数据'
- en: '| Callback to invoke when a row is selected with right click. |'
  id: totrans-235
  prefs: []
  type: TYPE_TB
  zh: '| 当右键选择行时调用的回调函数。 |'
- en: '| `onColResize` |'
  id: totrans-236
  prefs: []
  type: TYPE_TB
  zh: '| `onColResize` |'
- en: '`event.element`: Resized column header'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.element`: 调整列标题大小'
- en: '`event.delta`: Change of width in number of pixels'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.delta`：宽度变化的像素数'
- en: '| Callback to invoke when a column is resized. |'
  id: totrans-239
  prefs: []
  type: TYPE_TB
  zh: '| 当列调整大小时调用的回调函数。 |'
- en: '| `onColReorder` |'
  id: totrans-240
  prefs: []
  type: TYPE_TB
  zh: '| `onColReorder` |'
- en: '`event.dragIndex`: Index of the dragged column'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.dragIndex`：拖动列的索引'
- en: '`event.dropIndex`: Index of the dropped column'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.dropIndex`：放置列的索引'
- en: '`event.columns`: Columns array after reorder'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.columns`：重新排序后的列数组'
- en: '| Callback to invoke when a column is reordered. |'
  id: totrans-244
  prefs: []
  type: TYPE_TB
  zh: '| 当列重新排序时调用的回调函数。 |'
- en: '| `onLazyLoad` |'
  id: totrans-245
  prefs: []
  type: TYPE_TB
  zh: '| `onLazyLoad` |'
- en: '`event.first`: First row offset'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.first`：第一行偏移'
- en: '`event.rows`: Number of rows per page'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.rows`：每页的行数'
- en: '`event.sortField`: Field name to sort with'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.sortField`：用于排序的字段名称'
- en: '`event.sortOrder`: Sort order as number, `1` for asc and `-1` for desc'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.sortOrder`：排序顺序作为数字，升序为`1`，降序为`-1`'
- en: '`filters`: the `FilterMetadata` object having field as key and filter value,
    filter `matchMode` as value'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`过滤器`：具有字段作为键和过滤器值、过滤器`matchMode`作为值的`FilterMetadata`对象'
- en: '| Callback to invoke when paging, sorting, or filtering happens in lazy mode.
    |'
  id: totrans-251
  prefs: []
  type: TYPE_TB
  zh: '| 当在延迟模式下进行分页、排序或过滤时调用的回调函数。 |'
- en: '| `onEditInit` |'
  id: totrans-252
  prefs: []
  type: TYPE_TB
  zh: '| `onEditInit` |'
- en: '`event.column`: Column object of the cell'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.column`：单元格的列对象'
- en: '`event.data`: Row data'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.data`：行数据'
- en: '| Callback to invoke when a cell switches to the edit mode. |'
  id: totrans-255
  prefs: []
  type: TYPE_TB
  zh: '| 当单元格切换到编辑模式时调用的回调函数。 |'
- en: '| `onEdit` |'
  id: totrans-256
  prefs: []
  type: TYPE_TB
  zh: '| `onEdit` |'
- en: '`event.originalEvent`: Browser event'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.originalEvent`：浏览器事件'
- en: '`event.column`: Column object of the cell'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.column`：单元格的列对象'
- en: '`event.data`: Row data'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.data`：行数据'
- en: '`event.index`: Row index'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.index`：行索引'
- en: '| Callback to invoke when cell data is being edited. |'
  id: totrans-261
  prefs: []
  type: TYPE_TB
  zh: '| 当编辑单元格数据时调用的回调函数。 |'
- en: '| `onEditComplete` |'
  id: totrans-262
  prefs: []
  type: TYPE_TB
  zh: '| `onEditComplete` |'
- en: '`event.column`: Column object of the cell'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.column`：单元格的列对象'
- en: '`event.data`: Row data'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.data`：行数据'
- en: '`event.index`: Row index'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.index`：行索引'
- en: '| Callback to invoke when cell edit is completed (Supported for the *Enter*
    key only). |'
  id: totrans-266
  prefs: []
  type: TYPE_TB
  zh: '| 当单元格编辑完成时调用的回调函数（仅支持*Enter*键）。 |'
- en: '| `onEditCancel` |'
  id: totrans-267
  prefs: []
  type: TYPE_TB
  zh: '| `onEditCancel` |'
- en: '`event.column`: Column object of the cell'
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.column`：单元格的列对象'
- en: '`event.data`: Row data'
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.data`：行数据'
- en: '`event.index`: Row index'
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.index`：行索引'
- en: '| Callback to invoke when cell edit is cancelled with the *Esc* key. |'
  id: totrans-271
  prefs: []
  type: TYPE_TB
  zh: '| 当使用*Esc*键取消单元格编辑时调用的回调函数。 |'
- en: '| `onPage` |'
  id: totrans-272
  prefs: []
  type: TYPE_TB
  zh: '| `onPage` |'
- en: '`event.first`: Index of first record in page'
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.first`：页面中第一条记录的索引'
- en: '`event.rows`: Number of rows on the page'
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.rows`：页面上的行数'
- en: '| Callback to invoke when pagination occurs. |'
  id: totrans-275
  prefs: []
  type: TYPE_TB
  zh: '| 当分页发生时调用的回调函数。 |'
- en: '| `onSort` |'
  id: totrans-276
  prefs: []
  type: TYPE_TB
  zh: '| `onSort` |'
- en: '`event.field`: Field name of the sorted column'
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.field`：已排序列的字段名称'
- en: '`event.order`: Sort order as 1 or -1'
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.order`：排序顺序为1或-1'
- en: '`event.multisortmeta`: Sort metadata in multi sort mode. See multiple sorting
    section for the structure of this object.'
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.multisortmeta`：多重排序模式中的排序元数据。有关此对象结构的多重排序部分，请参见多重排序部分。'
- en: '| Callback to invoke when a column gets sorted. |'
  id: totrans-280
  prefs: []
  type: TYPE_TB
  zh: '| 当列排序时调用的回调函数。 |'
- en: '| `onFilter` | `event.filters`: Filters object having a `field` as the property
    key and an object with value, `matchMode` as the property value. | Callback to
    invoke when data is filtered. |'
  id: totrans-281
  prefs: []
  type: TYPE_TB
  zh: '| `onFilter` | `event.filters`：具有`field`作为属性键和具有值、`matchMode`作为属性值的对象的过滤器对象。
    | 当数据被过滤时调用的回调函数。 |'
- en: '| `onRowExpand` |'
  id: totrans-282
  prefs: []
  type: TYPE_TB
  zh: '| `onRowExpand` |'
- en: '`event.originalEvent`: Browser event'
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.originalEvent`：浏览器事件'
- en: '`data`: Row data to expand'
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data`：要展开的行数据'
- en: '| Callback to invoke when a row is expanded. |'
  id: totrans-285
  prefs: []
  type: TYPE_TB
  zh: '| 当行展开时调用的回调函数。 |'
- en: '| `onRowCollapse` |'
  id: totrans-286
  prefs: []
  type: TYPE_TB
  zh: '| `onRowCollapse` |'
- en: '`event.originalEvent`: Browser event'
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.originalEvent`：浏览器事件'
- en: '`data`: Row data to collapse'
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data`：要折叠的行数据'
- en: '| Callback to invoke when a row is collapsed. |'
  id: totrans-289
  prefs: []
  type: TYPE_TB
  zh: '| 当行折叠时调用的回调函数。 |'
- en: '| `onRowGroupExpand` |'
  id: totrans-290
  prefs: []
  type: TYPE_TB
  zh: '| `onRowGroupExpand` |'
- en: '`event.originalEvent`: Browser event'
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.originalEvent`：浏览器事件'
- en: '`group`: Value of the group'
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`group`：分组的值'
- en: '| Callback to invoke when a row group is expanded. |'
  id: totrans-293
  prefs: []
  type: TYPE_TB
  zh: '| 当行组展开时调用的回调函数。 |'
- en: '| `onRowGroupCollapse` |'
  id: totrans-294
  prefs: []
  type: TYPE_TB
  zh: '| `onRowGroupCollapse` |'
- en: '`event.originalEvent`: Browser event'
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.originalEvent`：浏览器事件'
- en: '`group`: Value of the group'
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`group`：组的值'
- en: '| Callback to invoke when a row group is collapsed. |'
  id: totrans-297
  prefs: []
  type: TYPE_TB
  zh: '| 折叠行组时调用的回调。 |'
- en: 'The following table lists out frequently used table methods with name, parameters,
    and description:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格列出了常用的表格方法及其名称、参数和描述：
- en: '| **Name** | **Parameters** | **Description** |'
  id: totrans-299
  prefs: []
  type: TYPE_TB
  zh: '| **名称** | **参数** | **描述** |'
- en: '| `reset` | - | Resets sort, filter, and paginator state |'
  id: totrans-300
  prefs: []
  type: TYPE_TB
  zh: '| `reset` | - | 重置排序、过滤和分页器状态 |'
- en: '| `exportCSV` | - | Exports the data in CSV format |'
  id: totrans-301
  prefs: []
  type: TYPE_TB
  zh: '| `exportCSV` | - | 以CSV格式导出数据 |'
- en: '| `toggleRow` | `data` | Toggles row expansion for a given row data |'
  id: totrans-302
  prefs: []
  type: TYPE_TB
  zh: '| `toggleRow` | `data` | 切换给定行数据的行扩展 |'
- en: PrimeNG version 4.0.1 reintroduced back the `rowTrackBy` option for iteration
    components such as DataTable, DataGrid, and DataList to improve the DOM optimizations.
    That is, the DOM insertions and updates of each row are optimized by delegating
    the decision to the `ngForTrackBy` directive. In PrimeNG, this will be achieved
    through the `rowTrackBy` property. If the property is not defined, by default,
    the algorithm checks for an object identity. For example, the browser row is identified
    by ID property as
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: PrimeNG版本4.0.1重新引入了`rowTrackBy`选项，用于迭代组件，如DataTable、DataGrid和DataList，以改善DOM优化。也就是说，通过将决策委托给`ngForTrackBy`指令来优化每一行的DOM插入和更新。在PrimeNG中，这将通过`rowTrackBy`属性实现。如果未定义该属性，默认情况下算法会检查对象标识。例如，浏览器行通过ID属性标识为
- en: '`trackById(index, browser) { return browser.id; }`.'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '`trackById(index, browser) { return browser.id; }`。'
- en: The complete demo application with instructions is available on GitHub at
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的演示应用程序及说明可在GitHub上找到
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter5/datatable](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter5/datatable).'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter5/datatable](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter5/datatable)。'
- en: Listing data with DataList
  id: totrans-307
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用DataList列出数据
- en: 'The DataList component is used to display the data in a list layout. It requires
    a collection of items as its value and `ng-template` to display content where
    each item can be accessed using a local template variable. This template also
    provides an index of each item using a variable represented by the `let-i` expression.
    A basic example of the DataList component with all browser details to display
    in a list format would be written as follows:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: DataList组件用于以列表布局显示数据。它需要一个项目集合作为其值，并使用`ng-template`显示内容，其中每个项目都可以使用本地模板变量访问。该模板还使用`let-i`表达式表示每个项目的索引。将所有浏览器详细信息显示为列表格式的DataList组件的基本示例将如下所示：
- en: '[PRE27]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The list of browser details needs to be retrieved from external services. In
    this case, the `BrowserService` service will be injected into the component class
    to retrieve the browser information. We used observables to get the data using
    the HTTP module. The list data will be retrieved on page load as follows:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 需要从外部服务中检索浏览器详细信息的列表。在这种情况下，`BrowserService`服务将被注入到组件类中，以检索浏览器信息。我们使用可观察对象使用HTTP模块获取数据。列表数据将在页面加载时检索如下：
- en: '[PRE28]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'We limited the number of records to five for demonstration purposes. The following
    screenshot shows a snapshot result of the DataList component in a list format
    as an example:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 出于演示目的，我们将记录数限制为五条。以下屏幕截图显示了DataList组件以列表格式的快照结果作为示例：
- en: '![](assets/08a0bc0e-a8e6-499a-83f8-ba98966c0d4a.png)'
  id: totrans-313
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/08a0bc0e-a8e6-499a-83f8-ba98966c0d4a.png)'
- en: The preceding snapshot just displays the data in a tabular format. In the next
    section, you can find many more features to make a data list a powerful component.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的快照只是以表格格式显示数据。在下一节中，您可以找到更多功能，使数据列表成为一个强大的组件。
- en: Facets and pagination
  id: totrans-315
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Facets和分页
- en: The DataList component supports facets such as header and footer for content
    using `p-header` and `p-footer` tags. In order to improve the user experience
    on large datasets, it supports the pagination feature. This feature is enabled
    by setting the `paginator` property as `true` and it sets a number of rows to
    be displayed using the `rows` property. Apart from these mandatory settings, there
    are some optional customized settings for pagination. Among all those optional
    properties, `paginatorPosition` is used to display the paginator either in `top`,
    `bottom`, or `both` positions; `rowsPerPageOptions` is used to display a drop-down
    with a possible number of rows to be displayed in a page, and `emptyMessage` is
    used to display a data list body when no records exist. Pagination also supports
    the `onPage` event callback, which will be invoked on page navigation. Refer to
    the events section for more details.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 数据列表组件支持诸如标题和页脚之类的面板，使用 `p-header` 和 `p-footer` 标签。为了改善大型数据集上的用户体验，它支持分页功能。通过将
    `paginator` 属性设置为 `true` 来启用此功能，并使用 `rows` 属性设置要显示的行数。除了这些必需的设置之外，分页还有一些可选的自定义设置。在所有这些可选属性中，`paginatorPosition`
    用于在 `top`、`bottom` 或 `both` 位置显示分页器；`rowsPerPageOptions` 用于显示一个下拉菜单，其中包含要在一页中显示的可能行数；`emptyMessage`
    用于在没有记录存在时显示数据列表主体。分页还支持 `onPage` 事件回调，该事件将在页面导航时被调用。有关更多详细信息，请参阅事件部分。
- en: 'The DataList component with facets and pagination features to display browser
    information would be as follows:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 具有面板和分页功能的数据列表组件以显示浏览器信息如下：
- en: '[PRE29]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The following screenshot shows a snapshot result with pagination as an example:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了带有分页的快照结果：
- en: '![](assets/159ed065-ba9d-4de1-90db-3f45ecf1a3d7.png)'
  id: totrans-320
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/159ed065-ba9d-4de1-90db-3f45ecf1a3d7.png)'
- en: All the pagination controls are customizable with the options provided in the
    DataList component.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 数据列表组件提供了可自定义的所有分页控件选项。
- en: Lazy loading
  id: totrans-322
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 懒加载
- en: Lazy loading is a very helpful feature to handle large datasets. It will not
    load all the data at once but as small chunks based on user demand. DataList supports
    lazy loading on pagination interaction. This feature is available by enabling
    the `lazy` attribute (that is, `lazy="true"`) and also by invoking the `onLazyLoad`
    callback to retrieve the data from the remote data sources. Refer to the events
    section for the signature and more details.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 懒加载是处理大型数据集的非常有用的功能。它不会一次加载所有数据，而是根据用户需求逐步加载。DataList支持分页交互上的懒加载。通过启用 `lazy`
    属性（即 `lazy="true"`）并调用 `onLazyLoad` 回调来实现此功能，从远程数据源检索数据。有关签名和更多详细信息，请参阅事件部分。
- en: The lazy load event object provides the first record in the page and the number
    of rows in the current page to get the next set of data. Also you should provide
    the total records by projection query for pagination configuration. This is useful
    to display pagination links based on the total number of records available even
    though that many records are not available on page load (that is, only current
    page records exist in a lazy mode).
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 懒加载事件对象提供了页面中的第一条记录和当前页面中的行数，以获取下一组数据。此外，您应该通过投影查询提供总记录以进行分页配置。即使在页面加载时没有那么多记录可用（即，仅在懒惰模式下存在当前页面记录），这对基于可用记录总数显示分页链接非常有用。
- en: 'Let''s take an example of the lazy loading feature for a DataList component
    with a basic prototype as shown here:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以此处显示的基本原型为例，来介绍数据列表组件的懒加载功能：
- en: '[PRE30]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The component class has to define the lazy loading event callback to retrieve
    the records based on user request (in this case, it would be pagination) as shown
    here:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 组件类必须定义懒加载事件回调，以根据用户请求（在本例中，将是分页）检索记录，如下所示：
- en: '[PRE31]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: In the preceding code snippet, you can observe that both the `first` and `rows`
    properties of an event are helpful for retrieving the next bunch of records. Based
    on the `rows` attribute, it tries to fetch the next `rows` number of records on
    every instance.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码片段中，您可以观察到事件的`first`和`rows`属性对于检索下一批记录非常有帮助。根据`rows`属性，它尝试在每个实例上获取下一个`rows`数量的记录。
- en: Events
  id: totrans-330
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件
- en: The component provides two event callbacks, one for pagination and the other
    one for lazy loading. Both events provide two arguments to get the first record
    and number of rows present on the page. The lazy loading event is invoked on pagination,
    filtering, and sorting functionalities by enabling a lazy mode.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 该组件提供两个事件回调，一个用于分页，另一个用于懒加载。两个事件都提供两个参数，以获取页面上第一条记录和行数。懒加载事件在启用懒加载模式的情况下，通过分页、过滤和排序功能来调用。
- en: '| **Name** | **Parameters** | **Description** |'
  id: totrans-332
  prefs: []
  type: TYPE_TB
  zh: '| **名称** | **参数** | **描述** |'
- en: '| `onLazyLoad` |'
  id: totrans-333
  prefs: []
  type: TYPE_TB
  zh: '| `onLazyLoad` |'
- en: '`event.first`: First row offset'
  id: totrans-334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.first`：第一行偏移'
- en: '`event.rows`: Number of rows per page'
  id: totrans-335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.rows`：每页的行数'
- en: '| Callback to invoke when paging, sorting, or filtering happens in a lazy mode.
    |'
  id: totrans-336
  prefs: []
  type: TYPE_TB
  zh: '| 当分页、排序或过滤以懒加载模式发生时调用的回调函数。 |'
- en: '| `onPage` |'
  id: totrans-337
  prefs: []
  type: TYPE_TB
  zh: '| `onPage` |'
- en: '`event.first`: Index of the first record in page'
  id: totrans-338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.first`：页面中第一条记录的索引'
- en: '`event.rows`: Number of rows on the page'
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.rows`：页面上的行数'
- en: '| Callback to invoke when pagination occurs. |'
  id: totrans-340
  prefs: []
  type: TYPE_TB
  zh: '| 当分页发生时调用的回调函数。 |'
- en: It provides many other features such as facets for header and footer display
    (`p-header` and `p-footer`), pagination to navigate between multiple pages, and
    a lazy loading feature for retrieving the data on demand.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 它还提供许多其他功能，例如用于页眉和页脚显示的facets（`p-header`和`p-footer`），用于在多个页面之间导航的分页，以及用于根据需要检索数据的懒加载功能。
- en: The complete demo application with instructions is available on GitHub at
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的演示应用程序及说明可在GitHub上找到
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter5/datalist](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter5/datalist).'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter5/datalist](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter5/datalist)。'
- en: Listing data with PickList
  id: totrans-344
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用PickList列出数据
- en: The PickList component is used to move items between two different lists. You
    can also reorder the items within each list. This provides the overall status
    of selected items. The items can be moved/reordered using either default button
    controls or drag and drop behavior. PickList requires two arrays, one is used
    for the source list and other one is for the target list. The `ng-template` template
    tag is used to display the item's content where each item in the array can be
    accessed using a local `ng-template` variable.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: PickList组件用于在两个不同的列表之间移动项目。您还可以在每个列表内重新排序项目。这提供了所选项目的整体状态。项目可以使用默认按钮控件或拖放行为进行移动/重新排序。PickList需要两个数组，一个用于源列表，另一个用于目标列表。使用`ng-template`模板标签来显示项目的内容，其中数组中的每个项目都可以使用本地`ng-template`变量访问。
- en: 'A basic example of the PickList component with country information would be
    written as follows:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 使用国家信息的PickList组件的基本示例将如下所示：
- en: '[PRE32]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'In the component class, let''s define a source list for available data and
    the target as an empty list to indicate that there is no selection yet. The country
    service needs to be injected to access the country information from external resources:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 在组件类中，让我们定义一个用于可用数据的源列表，以及一个用于表示尚未进行选择的空列表。需要注入国家服务以从外部资源访问国家信息：
- en: '[PRE33]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'By default, both source and target panels are available with default `width`
    and `height` properties. But this default behavior can be customized using `sourceStyle`
    and `targetStyle` properties. The following screenshot shows a snapshot result
    of an initial PickList as an example:'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，源和目标面板都具有默认的`width`和`height`属性。但是可以使用`sourceStyle`和`targetStyle`属性来自定义此默认行为。以下屏幕截图显示了初始PickList的快照结果。
- en: '![](assets/1b53673b-98fa-4b8a-a683-d87d50f81115.png)'
  id: totrans-351
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1b53673b-98fa-4b8a-a683-d87d50f81115.png)'
- en: The PickList component provides six event callbacks which are used for moving
    items between two lists and ordering the items in both source and target areas.
    Among these six callbacks, four of them are used for moving items, `onMoveToTarget`,
    `onMoveToSource`, `onMoveAllToSource`, and `onMoveAllToSource` whereas ordering
    items is performed by `onSourceReorder` and `onTargetReorder`.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: PickList组件提供了六个事件回调，用于在两个列表之间移动项目和对源和目标区域中的项目进行排序。在这六个回调中，有四个用于移动项目，`onMoveToTarget`、`onMoveToSource`、`onMoveAllToSource`和`onMoveAllToSource`，而排序项目则由`onSourceReorder`和`onTargetReorder`执行。
- en: 'The component can be customized from its default behavior in different ways
    as mentioned here:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 该组件可以通过不同的方式进行自定义，如下所述：
- en: Headers can be customized using headers `sourceHeader` and `targetHeader` as
    properties.
  id: totrans-354
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以使用`sourceHeader`和`targetHeader`作为属性来自定义标题。
- en: The web page will become responsive using the `responsive` property (`responsive="true"`),
    which adjusts the button controls based on screen size.
  id: totrans-355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网页将使用`responsive`属性（`responsive="true"`）变得响应式，根据屏幕大小调整按钮控件。
- en: The default multiple selection is prevented (with the help of the Meta key)
    by disabling the `metaKeySelection` attribute (`metaKeySelection="false"`).
  id: totrans-356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认情况下，通过禁用`metaKeySelection`属性（`metaKeySelection="false"`）来防止默认的多重选择（借助Meta键）。
- en: The visibility of button controls is controlled through `showSourceControls`
    and `showTargetControls` properties. For example, `showSourceControls="false"`
    and `showTargetControls="false"`.
  id: totrans-357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按钮控件的可见性通过`showSourceControls`和`showTargetControls`属性进行控制。例如，`showSourceControls="false"`和`showTargetControls="false"`。
- en: 'PrimeNG 4.1 supports the filtering feature on item fields as a new addition
    using the `filterBy` property. Multiple fields can be filtered by placing the
    comma separated fields in the `filterBy` property:'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: PrimeNG 4.1支持使用`filterBy`属性对项目字段进行过滤，这是一个新的功能。可以通过在`filterBy`属性中放置逗号分隔的字段来过滤多个字段：
- en: '[PRE34]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The newer 4.1 version also supports the drag-and-drop feature (within the same
    list or across lists) by enabling the `dragdrop` property. It also provides the
    `dragdropScope` property, which holds the unique key to avoid conflicts with other
    drag-and-drop events. The drag-and-drop feature example would be as follows:'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 新的4.1版本还支持启用`dragdrop`属性来实现拖放功能（在同一列表内或跨列表）。它还提供了`dragdropScope`属性，用于保存唯一键以避免与其他拖放事件发生冲突。拖放功能示例如下：
- en: '[PRE35]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The complete demo application with instructions is available on GitHub at
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的演示应用程序及说明可在GitHub上找到。
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter5/picklist](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter5/picklist).'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter5/picklist](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter5/picklist)。'
- en: Listing data with OrderList
  id: totrans-364
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用OrderList列出数据。
- en: The OrderList component is used to sort a collection of items in different directions
    (up and down). The component requires an array type variable to store its value
    and `ng-template` to display content of an array of items. Each item will be accessed
    inside the `ng-template` template using a local `ng-template` variable. When the
    position of an item changes, the backend array is also updated to store the latest
    item order.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: OrderList组件用于按不同方向（上下）对项目集合进行排序。该组件需要一个数组类型变量来存储其值，并使用`ng-template`来显示项目数组的内容。每个项目将在`ng-template`模板中使用本地`ng-template`变量进行访问。当项目位置发生变化时，后端数组也会更新以存储最新的项目顺序。
- en: 'A basic example of the OrderList component with country information would be
    written as follows:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 使用国家信息的OrderList组件的基本示例将如下编写：
- en: '[PRE36]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'In the component class, let''s define a countries list to display the collection
    of items. The country service needs to be injected to access the country information
    from the external resources or datasources as shown here:'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 在组件类中，让我们定义一个国家列表来显示项目的集合。如下所示，需要注入国家服务以从外部资源或数据源访问国家信息：
- en: '[PRE37]'
  id: totrans-369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'By default, the list panel is available with default `width` and `height` properties.
    But this can be customized using the `listStyle` property. The following screenshot
    shows a snapshot result of the initial order list as an example:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，列表面板具有默认的`width`和`height`属性。但是可以使用`listStyle`属性进行自定义。以下截图显示了初始顺序列表的快照结果作为示例：
- en: '![](assets/8876ef10-8734-4396-8a64-ff4338298a27.png)'
  id: totrans-371
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8876ef10-8734-4396-8a64-ff4338298a27.png)'
- en: 'The OrderList component provides three different event callbacks as mentioned
    here:'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: OrderList组件提供了三种不同的事件回调，如下所示：
- en: '| **Name** | **Parameters** | **Description** |'
  id: totrans-373
  prefs: []
  type: TYPE_TB
  zh: '| **名称** | **参数** | **描述** |'
- en: '| `onReorder` | `event`: browser event | Callback to invoke when list is reordered.
    |'
  id: totrans-374
  prefs: []
  type: TYPE_TB
  zh: '| `onReorder` | `event`：浏览器事件 | 重新排序列表时要调用的回调函数。 |'
- en: '| `onSelectionChange` |'
  id: totrans-375
  prefs: []
  type: TYPE_TB
  zh: '| `onSelectionChange` |'
- en: '`originalEvent`: browser event'
  id: totrans-376
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`originalEvent`：浏览器事件'
- en: '`value`: Current selection'
  id: totrans-377
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`value`：当前选择'
- en: '| Callback to invoke when selection changes. |'
  id: totrans-378
  prefs: []
  type: TYPE_TB
  zh: 选择更改时要调用的回调函数。
- en: '| `onFilterEvent` |'
  id: totrans-379
  prefs: []
  type: TYPE_TB
  zh: '| `onFilterEvent` |'
- en: '`originalEvent`: browser event'
  id: totrans-380
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`originalEvent`：浏览器事件'
- en: '`value`: Current filter values'
  id: totrans-381
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`value`：当前过滤值'
- en: '| Callback to invoke when filtering occurs. |'
  id: totrans-382
  prefs: []
  type: TYPE_TB
  zh: 发生过滤时要调用的回调函数。
- en: 'The component can be customized from it''s default behavior in different ways
    as mentioned here:'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 可以按以下方式以不同方式自定义组件的默认行为：
- en: The header can be customized using the `header` property
  id: totrans-384
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以使用`header`属性自定义标题
- en: The `responsive` property (`responsive="true"`) is used to apply responsive
    behavior, which adjusts the button controls based on the screen size
  id: totrans-385
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`responsive`属性（`responsive="true"`）用于应用响应式行为，根据屏幕大小调整按钮控件'
- en: The default multiple selection is prevented (with the help of the Meta key)
    by disabling the `metaKeySelection` attribute (`metaKeySelection="false"`)
  id: totrans-386
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过禁用`metaKeySelection`属性（`metaKeySelection="false"`）来防止默认的多重选择（借助于Meta键）。
- en: 'The following screenshot shows a snapshot result of a countries list with the
    earlier mentioned customization as an example:'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了具有前面提到的自定义的国家列表的快照结果：
- en: '![](assets/1d2573f1-feb9-4aa7-b23f-cb1c58261d48.png)'
  id: totrans-388
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1d2573f1-feb9-4aa7-b23f-cb1c58261d48.png)'
- en: In the preceding snapshot, you can observe that controls appears at the top
    due to its `responsive` feature (`responsive="true"`). We can also observe that
    the panel width has been adjusted based on viewport size (using the `listStyle`
    property).
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的快照中，您可以观察到由于其`responsive`特性（`responsive="true"`），控件出现在顶部。我们还可以观察到面板宽度已根据视口大小进行了调整（使用`listStyle`属性）。
- en: 'PrimeNG 4.1 version supports filtering and drag and drop features as new additions.
    The filter feature can be applied for single field and multiple fields using the
    `filterBy` property similar to the DataTable component. For example, the multi
    filtering feature on countries data would be as follows:'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: PrimeNG 4.1版本支持过滤和拖放功能作为新的添加。过滤功能可以使用`filterBy`属性应用于单个字段和多个字段，类似于DataTable组件。例如，对国家数据进行多重过滤的功能如下：
- en: '[PRE38]'
  id: totrans-391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The newer 4.1 version also supports a drag-and-drop feature to reorder items
    by enabling the `dragdrop` property. It also provides the `dragdropScope` property,
    which holds the unique key to avoid conflicts with other drag-and-drop events.
    The drag-and-drop feature example would be as follows:'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 新的4.1版本还支持通过启用`dragdrop`属性重新排序项目的拖放功能。它还提供了`dragdropScope`属性，用于保存唯一键以避免与其他拖放事件发生冲突。拖放功能示例如下：
- en: '[PRE39]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: The complete demo application with instructions is available on GitHub at
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的演示应用程序及说明可在GitHub上找到
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter5/orderlist](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter5/orderlist).'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter5/orderlist](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter5/orderlist)。'
- en: Grid-organized data with DataGrid
  id: totrans-396
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以DataGrid为例的网格化数据
- en: DataGrid displays the data in a grid-oriented layout. The data is represented
    in the form of a layout with multiple cells aligned in a regular pattern. It requires
    a collection of items as an array for the `value` attribute and the `ng-template`
    template tag to display its content where each item can be accessed using a local
    template variable. The template content needs to be wrapped within a `div` element
    such that the data is formatted in a grid layout using any grid CSS styles.
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: DataGrid以网格导向布局显示数据。数据以多个单元格以规律的方式排列的布局形式表示。它需要一个作为`value`属性的数组的项目集合和`ng-template`模板标签来显示其内容，其中每个项目都可以使用本地模板变量进行访问。模板内容需要包装在一个`div`元素中，以便使用任何网格CSS样式以网格布局格式化数据。
- en: 'A basic example of a DataGrid component with browser information would be written
    as follows:'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 数据网格组件的基本示例与浏览器信息将如下所示：
- en: '[PRE40]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The component class has to define an array of browser objects, which are retrieved
    from a remote data source using the services. The service accessed on a page load
    would be written as follows:'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 组件类必须定义一个浏览器对象数组，这些对象是使用服务从远程数据源检索的。页面加载时访问的服务将如下所示：
- en: '[PRE41]'
  id: totrans-401
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The following screenshot shows a snapshot result of the DataGrid component
    in a grid layout as an example:'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了数据网格组件在网格布局中的快照结果：
- en: '![](assets/a4de2a0d-97d1-40e6-9a32-78a2667f48ec.png)'
  id: totrans-403
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a4de2a0d-97d1-40e6-9a32-78a2667f48ec.png)'
- en: In the preceding snapshot, between any one of two cells the padding will be
    consistent. This can be customized through skinning classes of this component.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的快照中，任何两个单元格之间的填充将保持一致。这可以通过该组件的皮肤类进行自定义。
- en: Beyond basic usage - advanced features
  id: totrans-405
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本用法之外 - 高级功能
- en: In the preceding snapshot, the browser data is displayed in the grid layout.
    But, you can observe that there is no header or footer to summarize the context.
    The header and footer facets are available using `p-header` and `p-footer` tags.
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的快照中，浏览器数据以网格布局显示。但是，您可以观察到没有标题或页脚来总结上下文。标题和页脚方面可使用 `p-header` 和 `p-footer`
    标签。
- en: To improve the usability on large sets, DataGrid provides a pagination feature
    to display the next chunk of data through page navigation. This feature is provided
    by enabling the `paginator` property and by setting the `rows` attribute. Just
    like any other data components, the pagination features such as `pageLinks`, `rowsPerPageOptions`,
    `paginatorPosition`, and `totalRecords` are available for this customization.
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提高大型数据集的可用性，DataGrid提供了分页功能，通过页面导航显示下一块数据。通过启用`paginator`属性并设置`rows`属性来提供此功能。与任何其他数据组件一样，分页功能如`pageLinks`、`rowsPerPageOptions`、`paginatorPosition`和`totalRecords`都可用于自定义。
- en: To handle huge amounts of data, DataGrid supports a lazy loading feature to
    access this huge amount of data in chunks. This feature is provided by enabling
    the `lazy` attribute. Also the lazy loading method should be called on the pagination
    operation using the `onLazyLoad` event.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理大量数据，DataGrid支持懒加载功能，以便以块的方式访问大量数据。通过启用`lazy`属性来提供此功能。同时，应该在分页操作中使用`onLazyLoad`事件调用懒加载方法。
- en: 'The component class which defines the lazy load event callback with an `event`
    object as a parameter is shown here:'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是定义了懒加载事件回调的组件类，其中`event`对象作为参数显示在这里：
- en: '[PRE42]'
  id: totrans-410
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The following screenshot shows a snapshot result of the lazy loading feature
    as an example:'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了懒加载功能的快照结果示例：
- en: '![](assets/2800c1ee-48f2-4565-a497-a3233f9ae432.png)'
  id: totrans-412
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2800c1ee-48f2-4565-a497-a3233f9ae432.png)'
- en: In the preceding snapshot, it displays the facets (header and footer), customized
    pagination options, and loading data lazily on user demand. The additional information
    about browsers will be displayed in a dialog popup just by clicking the search
    icon available in each cell. By default, the DataGrid component is responsive
    as a layout display across various screen sizes or devices.
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述快照中，它显示了外观（头部和页脚）、自定义分页选项，并在用户需求时延迟加载数据。关于浏览器的附加信息将通过单击每个单元格中可用的搜索图标在对话框中显示。默认情况下，DataGrid组件在各种屏幕尺寸或设备上都是响应式的布局显示。
- en: The complete demo application with instructions is available on GitHub at
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的演示应用程序及说明可在GitHub上找到
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter5/datagrid](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter5/datagrid).'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter5/datagrid](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter5/datagrid)。'
- en: On-demand data loading with DataScroller
  id: totrans-416
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用DataScroller进行按需数据加载
- en: 'DataScroller displays the data on-demand using a scroll feature. It requires
    a collection of items as its value, number of rows to load, and `ng-template`
    template tag to display the content where each item can be accessed using an implicit
    variable. A basic example of the DataScroller component with various browser information
    would be written as follows (remember, here a fluid grid is used to format the
    content of browser records):'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: DataScroller使用滚动功能按需显示数据。它需要一个项目集合作为其值，要加载的行数，以及`ng-template`模板标签来显示内容，其中每个项目都可以使用隐式变量访问。使用各种浏览器信息的DataScroller组件的基本示例将如下所示（请记住，这里使用了流体网格来格式化浏览器记录的内容）：
- en: '[PRE43]'
  id: totrans-418
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Like any other data components, the component class of the data list should
    define an array of browser objects. The data is populated by making a remote call
    to the data source. The following screenshot shows a snapshot result as an example:'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 与任何其他数据组件一样，数据列表的组件类应该定义一个浏览器对象的数组。数据是通过对数据源进行远程调用来填充的。以下屏幕截图显示了一个示例的快照结果：
- en: '![](assets/bdc82140-661a-40fd-a445-5c65b46addb5.png)'
  id: totrans-420
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/bdc82140-661a-40fd-a445-5c65b46addb5.png)'
- en: As shown in the preceding snapshot, the data is displayed on-demand based on
    a window scroll as target. To make this DataScroller element more readable, it
    supports facets such as header and footer using `p-header` and `p-footer` tags.
    By default, the DataScroller component listens to the scroll event of the window.
    There is also one more option to define a container of a component as an event
    target with the help of the inline mode. For this, we should enable the `inline`
    attribute as `true` (that is, `inline="true"`).
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的快照所示，数据根据窗口滚动作为目标按需显示。为了使DataScroller元素更易读，它支持使用`p-header`和`p-footer`标签的头部和页脚等方面。默认情况下，DataScroller组件侦听窗口的滚动事件。还有另一种选项，可以使用内联模式将组件的容器定义为事件目标。为此，我们应该将`inline`属性启用为`true`（即`inline="true"`）。
- en: 'Apart from the scroll-based data loading, further data can be loaded using
    an explicit button action. The component should define a `loader` property which
    refers to the Button component. The DataScroller component with loader button
    would be written as follows:'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 除了基于滚动的数据加载外，还可以使用显式按钮操作加载更多数据。组件应该定义一个引用Button组件的`loader`属性。带有加载器按钮的DataScroller组件将如下所示：
- en: '[PRE44]'
  id: totrans-423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The following screenshot shows a snapshot result with loader display as an
    example:'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了一个带有加载器显示的快照结果：
- en: '![](assets/4b875e41-f344-47eb-98a0-83eb5f519678.png)'
  id: totrans-425
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4b875e41-f344-47eb-98a0-83eb5f519678.png)'
- en: In the preceding snapshot, additional browser information is displayed in a
    dialog format once the user clicks the search button on the left-hand side. This
    gives the ability to show how to select a particular record in a DataScroller
    component.
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的快照中，一旦用户在左侧点击搜索按钮，就会以对话框格式显示附加的浏览器信息。这可以展示如何在DataScroller组件中选择特定记录的能力。
- en: Lazy loading
  id: totrans-427
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 惰性加载
- en: 'To deal with huge datasets, this component supports the lazy loading feature
    as well. Instead of loading whole data, it loads chunks of data on each scroll
    action. It requires both `lazy` and `onLazyLoad` properties to enable this behavior.
    The lazy loading example of DataScroller would be written as follows:'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理大型数据集，该组件还支持惰性加载功能。它不是加载整个数据，而是在每次滚动操作时加载数据块。需要`lazy`和`onLazyLoad`属性来启用此行为。DataScroller的惰性加载示例将如下所示：
- en: '[PRE45]'
  id: totrans-429
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'The component class defines the lazy loading event callback to retrieve the
    data in chunks as shown here:'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 组件类定义了惰性加载事件回调，以按块检索数据，如下所示：
- en: '[PRE46]'
  id: totrans-431
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: In the preceding code snippet, you can observe that the `first` and `rows` properties
    of an `event` object are helpful for retrieving the next bunch of records. Based
    on the `rows` attribute, it tries to fetch the next `rows` number of records on
    every fetch.
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码片段中，您可以观察到`event`对象的`first`和`rows`属性对于检索下一批记录非常有用。根据`rows`属性，它尝试在每次获取时获取下一个`rows`数量的记录。
- en: The API method `reset` is used to reset the content or data of a DataScroller
    component. That is, the component will reset to its default state.
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: API方法`reset`用于重置DataScroller组件的内容或数据。也就是说，组件将重置为其默认状态。
- en: The complete demo application with instructions is available on GitHub at
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的演示应用程序及说明可在GitHub上找到
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter5/datascroller](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter5/datascroller).'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter5/datascroller](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter5/datascroller)。'
- en: Visualizing data with Tree
  id: totrans-436
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用树形结构可视化数据
- en: 'The Tree component is used to display a hierarchical representation of data
    in a graphical format. It provides an array of the `TreeNode` objects as its value.
    The `TreeNode` API provides many properties to create tree node objects. The tree
    structure has basically three major components as listed here:'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: Tree组件用于以图形格式显示数据的分层表示。它提供了`TreeNode`对象数组作为其值。`TreeNode` API提供了许多属性来创建树节点对象。树结构基本上有三个主要组件，如下所示：
- en: The tree elements are called **nodes**
  id: totrans-438
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 树元素称为**节点**
- en: The lines connecting elements are called branches
  id: totrans-439
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接元素的线称为分支
- en: The nodes without children are called leaf nodes or leaves
  id: totrans-440
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有子节点的节点称为叶节点或叶子节点
- en: 'A basic example of a Tree component with nodes would be written as follows
    (the node will represent tourist places):'
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 具有节点的Tree组件的基本示例将如下所示（节点将表示旅游景点）：
- en: '[PRE47]'
  id: totrans-442
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'The data for the Tree component should be provided in a nested parent-child
    hierarchy. Each tree node is created with a set of properties such as `label`,
    `data`, `expandIcon`, `collapsedIcon`, `children`, and so on. The complete list
    of the `TreeNode` properties is shown here:'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: Tree组件的数据应以嵌套的父子层次结构提供。每个树节点都使用一组属性创建，例如`label`、`data`、`expandIcon`、`collapsedIcon`、`children`等等。`TreeNode`属性的完整列表如下所示：
- en: '| **Name** | **Type** | **Default** | **Description** |'
  id: totrans-444
  prefs: []
  type: TYPE_TB
  zh: '**名称** | **类型** | **默认** | **描述**'
- en: '| `label` | `string` | `null` | Label of the node. |'
  id: totrans-445
  prefs: []
  type: TYPE_TB
  zh: '`label` | `string` | `null` | 节点的标签。'
- en: '| `data` | `any` | `null` | Data represented by the node. |'
  id: totrans-446
  prefs: []
  type: TYPE_TB
  zh: '`data` | `any` | `null` | 节点表示的数据。'
- en: '| `icon` | `string` | `null` | Icon of the node to display next to content.
    |'
  id: totrans-447
  prefs: []
  type: TYPE_TB
  zh: '`icon` | `string` | `null` | 节点旁边显示的图标。'
- en: '| `expandedIcon` | `string` | `null` | Icon to use in expanded state. |'
  id: totrans-448
  prefs: []
  type: TYPE_TB
  zh: '`expandedIcon` | `string` | `null` | 展开状态下使用的图标。'
- en: '| `collapsedIcon` | `string` | `null` | Icon to use in collapsed state. |'
  id: totrans-449
  prefs: []
  type: TYPE_TB
  zh: '`collapsedIcon` | `string` | `null` | 折叠状态下使用的图标。'
- en: '| `children` | `TreeNode[]` | `null` | An array of tree nodes as children.
    |'
  id: totrans-450
  prefs: []
  type: TYPE_TB
  zh: '`children` | `TreeNode[]` | `null` | 作为子节点的树节点数组。'
- en: '| `leaf` | `boolean` | `null` | Specifies if the node has children. Used in
    lazy loading. |'
  id: totrans-451
  prefs: []
  type: TYPE_TB
  zh: '`leaf` | `boolean` | `null` | 指定节点是否有子节点。用于延迟加载。'
- en: '| `style` | `string` | `null` | Inline style of the node. |'
  id: totrans-452
  prefs: []
  type: TYPE_TB
  zh: '`style` | `string` | `null` | 节点的内联样式。'
- en: '| `styleClass` | `string` | `null` | Style class of the node. |'
  id: totrans-453
  prefs: []
  type: TYPE_TB
  zh: '`styleClass` | `string` | `null` | 节点的样式类。'
- en: '| `expanded` | `boolean` | `null` | Whether the node is in an expanded or collapsed
    state. |'
  id: totrans-454
  prefs: []
  type: TYPE_TB
  zh: '`expanded` | `boolean` | `null` | 节点是否处于展开或折叠状态。'
- en: '| `type` | `string` | `null` | Type of the node to match the `ng-template`
    type. |'
  id: totrans-455
  prefs: []
  type: TYPE_TB
  zh: '`type` | `string` | `null` | 与`ng-template`类型匹配的节点类型。'
- en: '| `parent` | `TreeNode` | `null` | Parent of the node. |'
  id: totrans-456
  prefs: []
  type: TYPE_TB
  zh: '`parent` | `TreeNode` | `null` | 节点的父节点。'
- en: '| `styleClass` | `string` | `null` | Name of the style class for the node element.
    |'
  id: totrans-457
  prefs: []
  type: TYPE_TB
  zh: '`styleClass` | `string` | `null` | 节点元素的样式类名称。'
- en: '| `draggable` | `boolean` | `null` | Whether to disable dragging for a particular
    node even if `draggableNodes` is enabled. |'
  id: totrans-458
  prefs: []
  type: TYPE_TB
  zh: '`draggable` | `boolean` | `null` | 是否禁用特定节点的拖动，即使启用了`draggableNodes`。'
- en: '| `droppable` | `boolean` | `null` | Whether to disable dropping for a particular
    node even if `droppableNodes` is enabled. |'
  id: totrans-459
  prefs: []
  type: TYPE_TB
  zh: '`droppable` | `boolean` | `null` | 是否禁用特定节点的放置，即使启用了`droppableNodes`。'
- en: '| `selectable` | `boolean` | `null` | Used to disable selection of a particular
    node. |'
  id: totrans-460
  prefs: []
  type: TYPE_TB
  zh: '`selectable` | `boolean` | `null` | 用于禁用特定节点的选择。'
- en: All properties of `TreeNode` are optional.
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: '`TreeNode`的所有属性都是可选的。'
- en: 'The tree node structure for the tourist places example would be as follows:'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 旅游景点示例的树节点结构如下：
- en: '[PRE48]'
  id: totrans-463
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'In real-time applications, the data located in a remote data source is retrieved
    through services. The following service is going to be injected in the component
    class:'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 在实时应用程序中，位于远程数据源中的数据是通过服务检索的。以下服务将被注入到组件类中：
- en: '[PRE49]'
  id: totrans-465
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'The component class loads the data on page load using the service call as shown
    here:'
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 组件类在页面加载时使用服务调用加载数据，如下所示：
- en: '[PRE50]'
  id: totrans-467
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'The following screenshot shows a snapshot result of the hierarchical Tree component
    representation as an example:'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了分层树组件表示的快照结果，以示例为例：
- en: '![](assets/4a5801dc-cbf4-496a-8468-0598b47e5799.png)'
  id: totrans-469
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4a5801dc-cbf4-496a-8468-0598b47e5799.png)'
- en: In the preceding use case, we expanded India and Germany country tree nodes
    to see their child nodes represented as tourist places.
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的用例中，我们展开了印度和德国的国家树节点，以查看它们表示为旅游地点的子节点。
- en: Selection features - single, multiple, and checkbox
  id: totrans-471
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择功能 - 单选、多选和复选框
- en: The Tree component supports three kinds of selections such as single, multiple,
    and checkbox. The single selection is provided by enabling both the `selectionMode`
    property and the `selection` attribute, which holds a selected tree node.
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: 树组件支持三种选择方式，包括单选、多选和复选框。单选是通过启用`selectionMode`属性和`selection`属性来实现的，后者保存了一个选定的树节点。
- en: 'The Tree component with a single selection feature to select a favorite tourist
    place would be written as follows:'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 具有单选功能的树组件，以选择一个喜爱的旅游地点，将如下所示：
- en: '[PRE51]'
  id: totrans-474
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'The following screenshot shows a snapshot result of the Tree component with
    a single selection as an example:'
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了树组件的快照结果，以单选为例：
- en: '![](assets/c6ec7842-e873-4887-bb28-06bb93e0cc42.png)'
  id: totrans-476
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c6ec7842-e873-4887-bb28-06bb93e0cc42.png)'
- en: Here, multiple selection is enabled by setting `selectionMode` as `multiple`
    (`selectionMode="multiple"`). In this case, the `selection` property holds an
    array of objects as selected nodes. The multiple selection is also provided through
    the checkbox selection. This can be achieved just by setting `selectionMode="checkbox"`.
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，通过将`selectionMode`设置为`multiple`（`selectionMode="multiple"`）来启用多重选择。在这种情况下，`selection`属性保存一个作为选定节点的对象数组。多重选择也可以通过复选框选择来实现，只需将`selectionMode="checkbox"`。
- en: 'The Tree component with a multi checkbox selection feature to select multiple
    tourist places would be written as follows:'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 具有多个复选框选择功能的树组件，以选择多个旅游地点，将如下所示：
- en: '[PRE52]'
  id: totrans-479
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'The following screenshot shows a snapshot result of the Tree component with
    checkbox selection as an example:'
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了树组件的快照结果，以复选框选择为例：
- en: '![](assets/9b66a06d-0743-489e-be3d-61cdd6418065.png)'
  id: totrans-481
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9b66a06d-0743-489e-be3d-61cdd6418065.png)'
- en: The selection feature supports two event callbacks such as `onRowSelect` and
    `onRowUnselect`, which provide selected and unselected tree nodes. Refer to the
    events section for more details.
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: 选择功能支持两个事件回调，如`onRowSelect`和`onRowUnselect`，提供了选定和取消选定的树节点。有关更多详细信息，请参阅事件部分。
- en: The propagation (upward and downward directions) of selection nodes is controlled
    through `propagateSelectionUp` and `propagateSelectionDown` properties, which
    are enabled by default.
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 选择节点的传播（向上和向下方向）通过`propagateSelectionUp`和`propagateSelectionDown`属性来控制，默认情况下是启用的。
- en: Beyond basic usage - advanced features
  id: totrans-484
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 超出基本用法 - 高级功能
- en: 'The Tree component also supports many advanced features:'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: 树组件还支持许多高级功能：
- en: The customized content can be displayed using the template tag `ng-template`.
  id: totrans-486
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义内容可以使用模板标签`ng-template`来显示。
- en: The lazy loading feature is available using the `onNodeExpand` event callback.
  id: totrans-487
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以使用`onNodeExpand`事件回调来实现延迟加载功能。
- en: ContextMenu for each tree node is applied using a local template reference variable.
  id: totrans-488
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为每个树节点应用上下文菜单，使用本地模板引用变量。
- en: The horizontal layout of the Tree component is displayed using `layout="horizontal"`
    expression.
  id: totrans-489
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`layout="horizontal"`表达式显示树组件的水平布局。
- en: The drag-and-drop feature between source and target Tree components is achieved
    by enabling `draggableNodes` and `droppableNodes` properties. The `dragdropScope`
    attribute is used to restrict drag-and-drop support to a specific area.
  id: totrans-490
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过启用`draggableNodes`和`droppableNodes`属性，可以在源树组件和目标树组件之间实现拖放功能。`dragdropScope`属性用于将拖放支持限制在特定区域。
- en: 'The row expansion or collapse behavior can be achieved in a programmatic way
    by externalizing the API methods. For example, a tree with external buttons, which
    are used to expand or collapse tree nodes in a programmatic way using event callbacks
    is shown here:'
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过将API方法外部化来以编程方式实现行展开或折叠行为。例如，下面显示了一个带有外部按钮的树，这些按钮用于使用事件回调以编程方式展开或折叠树节点。
- en: '[PRE53]'
  id: totrans-492
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'The component class defined with event callbacks to toggle the tree nodes in
    a recursive nature is shown here:'
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: 在此处显示了使用事件回调函数定义的组件类，以递归方式切换树节点的示例：
- en: '[PRE54]'
  id: totrans-494
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'The component also supports four event callbacks such as `onNodeExpand`, `onNodeCollapse`,
    `onNodeDrop`, and `onNodeContextMenuSelect`. The following events table provides
    complete details of events, parameters, and their description:'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 该组件还支持四个事件回调，如`onNodeExpand`、`onNodeCollapse`、`onNodeDrop`和`onNodeContextMenuSelect`。以下事件表提供了事件、参数及其描述的完整详细信息：
- en: '| **Name** | **Parameters** | **Description** |'
  id: totrans-496
  prefs: []
  type: TYPE_TB
  zh: '| **名称** | **参数** | **描述** |'
- en: '| `onNodeSelect` |'
  id: totrans-497
  prefs: []
  type: TYPE_TB
  zh: '| `onNodeSelect` |'
- en: '`event.originalEvent`: Browser event'
  id: totrans-498
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.originalEvent`: 浏览器事件'
- en: '`event.node`: Selected node instance'
  id: totrans-499
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.node`: 选定的节点实例'
- en: '| Callback to invoke when a node is selected. |'
  id: totrans-500
  prefs: []
  type: TYPE_TB
  zh: '| 当选择节点时调用的回调函数。 |'
- en: '| `onNodeUnselect` |'
  id: totrans-501
  prefs: []
  type: TYPE_TB
  zh: '| `onNodeUnselect` |'
- en: '`event.originalEvent`: Browser event'
  id: totrans-502
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.originalEvent`: 浏览器事件'
- en: '`event.node`: Unselected node instance'
  id: totrans-503
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.node`: 取消选择的节点实例'
- en: '| Callback to invoke when a node is unselected. |'
  id: totrans-504
  prefs: []
  type: TYPE_TB
  zh: '| 当取消选择节点时调用的回调函数。 |'
- en: '| `onNodeExpand` |'
  id: totrans-505
  prefs: []
  type: TYPE_TB
  zh: '| `onNodeExpand` |'
- en: '`event.originalEvent`: Browser event'
  id: totrans-506
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.originalEvent`: 浏览器事件'
- en: '`event.node`: Expanded node instance'
  id: totrans-507
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.node`: 展开的节点实例'
- en: '| Callback to invoke when a node is expanded. |'
  id: totrans-508
  prefs: []
  type: TYPE_TB
  zh: '| 当节点展开时调用的回调函数。 |'
- en: '| `onNodeCollapse` |'
  id: totrans-509
  prefs: []
  type: TYPE_TB
  zh: '| `onNodeCollapse` |'
- en: '`event.originalEvent`: Browser event'
  id: totrans-510
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.originalEvent`: 浏览器事件'
- en: '`event.node`: Collapsed node instance'
  id: totrans-511
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.node`: 折叠的节点实例'
- en: '| Callback to invoke when a node is collapsed. |'
  id: totrans-512
  prefs: []
  type: TYPE_TB
  zh: '| 当节点折叠时调用的回调函数。 |'
- en: '| `onNodeContextMenuSelect` |'
  id: totrans-513
  prefs: []
  type: TYPE_TB
  zh: '| `onNodeContextMenuSelect` |'
- en: '`event.originalEvent`: Browser event'
  id: totrans-514
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.originalEvent`: 浏览器事件'
- en: '`event.node`: Selected node instance'
  id: totrans-515
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.node`: 选定的节点实例'
- en: '| Callback to invoke when a node is selected with right-click. |'
  id: totrans-516
  prefs: []
  type: TYPE_TB
  zh: '| 当通过右键单击选择节点时调用的回调函数。 |'
- en: '| `onNodeDrop` |'
  id: totrans-517
  prefs: []
  type: TYPE_TB
  zh: '| `onNodeDrop` |'
- en: '`event.originalEvent`: Browser event'
  id: totrans-518
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.originalEvent`: 浏览器事件'
- en: '`event.dragNode`: Dragged node instance'
  id: totrans-519
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.dragNode`: 被拖动的节点实例'
- en: '`event.dropNode`: Dropped node instance'
  id: totrans-520
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.dropNode`: 被拖放的节点实例'
- en: '| Callback to invoke when a node is selected with right-click. |'
  id: totrans-521
  prefs: []
  type: TYPE_TB
  zh: '| 当通过右键单击选择节点时调用的回调函数。 |'
- en: The complete demo application with instructions is available on GitHub at
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的演示应用程序及说明可在GitHub上找到
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter5/tree](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter5/tree).'
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter5/tree](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter5/tree)。'
- en: Visualizing data with TreeTable
  id: totrans-524
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用TreeTable可视化数据
- en: TreeTable is used to display hierarchical data in a tabular format. It requires
    an array of `TreeNode` objects as its value and provides a `TreeNode` API with
    many optional properties. TreeTable defines column components as child elements
    with `header`, `footer`, `field`, and `style` attributes similar to DataTable
    component.
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: TreeTable用于以表格格式显示分层数据。它需要一个`TreeNode`对象数组作为其值，并提供了许多可选属性的`TreeNode`API。TreeTable将列组件定义为具有`header`、`footer`、`field`和`style`属性的子元素，类似于DataTable组件。
- en: 'A basic example of a TreeTable component with tourist place tree nodes as information
    would be written as follows:'
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: 将旅游地点树节点作为信息的TreeTable组件的基本示例将如下编写：
- en: '[PRE55]'
  id: totrans-527
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'The component is created by arranging `TreeNode` objects in a hierarchical
    manner. The `TreeNode` object consists of many properties as listed here:'
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: 该组件是通过以分层方式排列`TreeNode`对象来创建的。`TreeNode`对象包括许多属性，如下所列：
- en: '| **Name** | **Type** | **Default** | **Description** |'
  id: totrans-529
  prefs: []
  type: TYPE_TB
  zh: '| **名称** | **类型** | **默认** | **描述** |'
- en: '| `label` | `string` | `null` | Label of the node. |'
  id: totrans-530
  prefs: []
  type: TYPE_TB
  zh: '| `label` | `string` | `null` | 节点的标签。 |'
- en: '| `data` | `any` | `null` | Data represented by the node. |'
  id: totrans-531
  prefs: []
  type: TYPE_TB
  zh: '| `data` | `any` | `null` | 由节点表示的数据。 |'
- en: '| `icon` | `string` | `null` | Icon of the node to display next to content.
    Not used by TreeTable. |'
  id: totrans-532
  prefs: []
  type: TYPE_TB
  zh: '| `icon` | `string` | `null` | 要显示在内容旁边的节点图标。TreeTable不使用。 |'
- en: '| `expandedIcon` | `string` | `null` | Icon to use in expanded state. Not used
    by TreeTable. |'
  id: totrans-533
  prefs: []
  type: TYPE_TB
  zh: '| `expandedIcon` | `string` | `null` | 用于展开状态的图标。TreeTable不使用。 |'
- en: '| `collapsedIcon` | `string` | `null` | Icon to use in collapsed state. Not
    used by TreeTable. |'
  id: totrans-534
  prefs: []
  type: TYPE_TB
  zh: '| `collapsedIcon` | `string` | `null` | 用于折叠状态的图标。TreeTable不使用。 |'
- en: '| `children` | `TreeNode[]` | `null` | An array of tree nodes as children.
    |'
  id: totrans-535
  prefs: []
  type: TYPE_TB
  zh: '| `children` | `TreeNode[]` | `null` | 作为子节点的树节点数组。 |'
- en: '| `leaf` | `boolean` | `null` | Specifies if the node has children. Used in
    lazy loading. |'
  id: totrans-536
  prefs: []
  type: TYPE_TB
  zh: '| `leaf` | `boolean` | `null` | 指定节点是否有子节点。用于延迟加载。 |'
- en: '| `style` | `string` | `null` | Inline style of the node. |'
  id: totrans-537
  prefs: []
  type: TYPE_TB
  zh: '| `style` | `string` | `null` | 节点的内联样式。 |'
- en: '| `styleClass` | `string` | `null` | Style class of the node. |'
  id: totrans-538
  prefs: []
  type: TYPE_TB
  zh: '| `styleClass` | `string` | `null` | 节点的样式类。 |'
- en: 'The `TreeNode` structure for the tourist places example would be as follows:'
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: 旅游景点示例的`TreeNode`结构如下：
- en: '[PRE56]'
  id: totrans-540
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'The injected service and the same service call representation in component
    class is almost similar to the Tree component explained in the previous section.
    The following screenshot shows a snapshot result with hierarchical tourist information
    as an example:'
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: 注入的服务和组件类中的相同服务调用表示几乎与前一节中解释的Tree组件相似。以下屏幕截图显示了以层次结构的旅游信息为例的快照结果：
- en: '![](assets/7698f874-f041-4990-ab56-8b7819a3b249.png)'
  id: totrans-542
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7698f874-f041-4990-ab56-8b7819a3b249.png)'
- en: The component also supports dynamic columns where each column is created by
    looping through the `ngFor` directive.
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: 该组件还支持动态列，其中每列都是通过循环`ngFor`指令创建的。
- en: Selection features - single, multiple, and checkbox
  id: totrans-544
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择功能 - 单选、多选和复选框
- en: The TreeTable component supports three kinds of selections such as single, multiple,
    and checkbox. The single selection is provided by enabling the `selectionMode`
    property on tree table and the `selection` attribute, which holds the selected
    tree table node.
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: TreeTable组件支持三种选择功能，包括单选、多选和复选框。单选通过在树表上启用`selectionMode`属性和`selection`属性来实现，该属性保存了所选的树表节点。
- en: 'The TreeTable component with a single selection feature to select a favorite
    tourist place would be written as follows:'
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: 具有单选功能的TreeTable组件，用于选择喜爱的旅游景点，将如下编写：
- en: '[PRE57]'
  id: totrans-547
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'The following screenshot shows a snapshot result with a single selection as
    an example:'
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了以单选为例的快照结果：
- en: '![](assets/240a8ee6-f425-4e70-b0a3-ced6e5f16c32.png)'
  id: totrans-549
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/240a8ee6-f425-4e70-b0a3-ced6e5f16c32.png)'
- en: Whereas, multiple selection is enabled by setting `selectionMode` as multiple
    (`selectionMode="multiple"`). In this case, the `selection` property holds an
    array of objects as selected nodes. The multiple selection is also provided through
    the checkbox selection. This can be achieved by setting `selectionMode="checkbox"`.
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: 而多选功能是通过将`selectionMode`设置为多选（`selectionMode="multiple"`）来启用的。在这种情况下，`selection`属性保存了所选节点的对象数组。多选也可以通过复选框选择来实现。这可以通过设置`selectionMode="checkbox"`来实现。
- en: 'The TreeTable component with a multi checkbox selection feature to select multiple
    tourist places would be written as follows:'
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: 具有多复选框选择功能的TreeTable组件，用于选择多个旅游景点，将如下所示：
- en: '[PRE58]'
  id: totrans-552
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'The following screenshot shows a snapshot result with checkbox selection as
    an example:'
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了复选框选择的快照结果：
- en: '![](assets/a682056c-6579-4b50-94ce-8a0fb0816f0d.png)'
  id: totrans-554
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a682056c-6579-4b50-94ce-8a0fb0816f0d.png)'
- en: The selection feature supports two event callbacks, such as `onNodeSelect` and
    `onNodeUnselect`, which provides the selected and unselected tree nodes. Refer
    to the events section for more details.
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: 选择功能支持两个事件回调，例如`onNodeSelect`和`onNodeUnselect`，它提供了选定和取消选定的树节点。有关更多详细信息，请参阅事件部分。
- en: Beyond basic usage - advanced features
  id: totrans-556
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本用法之外 - 高级功能
- en: The TreeTable component also supports various advanced features such as lazy
    loading using the `onNodeExpand` callback, customized editable content using the
    `ng-template` template tag, and also context menu implementation, which is similar
    to the DataTable component. It also supports facets for header and footer using
    `p-header` and `p-footer` tags.
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: TreeTable组件还支持各种高级功能，例如使用`onNodeExpand`回调进行延迟加载，使用`ng-template`模板标签进行自定义可编辑内容，以及上下文菜单实现，这与DataTable组件类似。它还支持使用`p-header`和`p-footer`标签为头部和底部添加外观。
- en: The content display of TreeTable is customized using `ng-template`. By default,
    the label of a tree node is displayed inside a tree node. To customize the content,
    define `ng-template` inside the column that gets the column as implicit variable
    (`let-col`) and `rowData` as the node instance (`let-node="rowData"`). In the
    same way, we can customize header and footer of this component.
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: TreeTable的内容显示是使用`ng-template`进行自定义的。默认情况下，树节点的标签显示在树节点内。要自定义内容，请在获取列的列中定义`ng-template`作为隐式变量（`let-col`），并将`rowData`定义为节点实例（`let-node="rowData"`）。同样，我们可以自定义此组件的头部和底部。
- en: 'Let''s take an example of editable tree nodes by placing an input inside each
    template as shown here:'
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以可编辑的树节点为例，通过在每个模板中放置一个输入框来实现：
- en: '[PRE59]'
  id: totrans-560
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'The following screenshot shows a snapshot result with an editable template
    as an example:'
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了具有可编辑模板的快照结果：
- en: '![](assets/15893d60-87e6-4251-983a-bf611a343771.png)'
  id: totrans-562
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/15893d60-87e6-4251-983a-bf611a343771.png)'
- en: In the preceding snapshot, we can edit all the tree node fields. For example,
    we updated tour package days from 9 to 20\. TreeTable also supports event callbacks
    for expansion/collapsing nodes such as `onNodeExpand`, `onNodeCollapse`, and `onContextmenuSelect`
    event for context menu. Refer to the events section for more details.
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述快照中，我们可以编辑所有树节点字段。例如，我们将旅游套餐的天数从9天更新为20天。TreeTable还支持扩展/折叠节点的事件回调，例如`onNodeExpand`、`onNodeCollapse`，以及上下文菜单的`onContextmenuSelect`事件。有关更多详细信息，请参阅事件部分。
- en: PrimeNG 4.1 introduced the `toggleColumnIndex` property, which is used to define
    the index of the column that contains the the `toggler` element. By default, the
    `toggleColumnIndex` value is `0` (TreeTable always shows `toggler` on first column
    if `togglerColumnIndex` is not defined).
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: PrimeNG 4.1引入了`toggleColumnIndex`属性，用于定义包含`toggler`元素的列的索引。默认情况下，`toggleColumnIndex`的值为`0`（如果未定义`togglerColumnIndex`，TreeTable始终在第一列显示`toggler`）。
- en: 'The following events table provides the complete details of events, parameters,
    and their description:'
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: 以下事件表提供了事件、参数及其描述的完整详细信息：
- en: '| **Name** | **Parameters** | **Description** |'
  id: totrans-566
  prefs: []
  type: TYPE_TB
  zh: '| **名称** | **参数** | **描述** |'
- en: '| `onNodeSelect` |'
  id: totrans-567
  prefs: []
  type: TYPE_TB
  zh: '| `onNodeSelect` |'
- en: '`event.originalEvent`: Browser event'
  id: totrans-568
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.originalEvent`：浏览器事件'
- en: '`event.node`: Selected node instance'
  id: totrans-569
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.node`：选定的节点实例'
- en: '| Callback to invoke when a node is selected. |'
  id: totrans-570
  prefs: []
  type: TYPE_TB
  zh: '| 调用节点被选中时的回调。 |'
- en: '| `onNodeUnselect` |'
  id: totrans-571
  prefs: []
  type: TYPE_TB
  zh: '| `onNodeUnselect` |'
- en: '`event.originalEvent`: Browser event'
  id: totrans-572
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.originalEvent`：浏览器事件'
- en: '`event.node`: Unselected node instance'
  id: totrans-573
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.node`：取消选定的节点实例'
- en: '| Callback to invoke when a node is unselected. |'
  id: totrans-574
  prefs: []
  type: TYPE_TB
  zh: '| 当节点取消选定时要调用的回调函数。 |'
- en: '| `onNodeExpand` |'
  id: totrans-575
  prefs: []
  type: TYPE_TB
  zh: '| `onNodeExpand` |'
- en: '`event.originalEvent`: Browser event'
  id: totrans-576
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.originalEvent`: 浏览器事件'
- en: '`event.node`: Expanded node instance'
  id: totrans-577
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.node`: 展开的节点实例'
- en: '| Callback to invoke when a node is expanded. |'
  id: totrans-578
  prefs: []
  type: TYPE_TB
  zh: '| 当节点展开时要调用的回调函数。 |'
- en: '| `onNodeCollapse` |'
  id: totrans-579
  prefs: []
  type: TYPE_TB
  zh: '| `onNodeCollapse` |'
- en: '`event.originalEvent`: Browser event'
  id: totrans-580
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.originalEvent`: 浏览器事件'
- en: '`event.node`: Collapsed node instance'
  id: totrans-581
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.node`: 折叠的节点实例'
- en: '| Callback to invoke when a node is collapsed. |'
  id: totrans-582
  prefs: []
  type: TYPE_TB
  zh: '| 当节点折叠时要调用的回调函数。 |'
- en: '| `onContextMenuSelect` |'
  id: totrans-583
  prefs: []
  type: TYPE_TB
  zh: '| `onContextMenuSelect` |'
- en: '`event.originalEvent`: Browser event'
  id: totrans-584
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.originalEvent`: 浏览器事件'
- en: '`event.node`: Selected node instance'
  id: totrans-585
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.node`: 选定的节点实例'
- en: '| Callback to invoke when a node is selected with right-click. |'
  id: totrans-586
  prefs: []
  type: TYPE_TB
  zh: '| 当右键选择节点时要调用的回调函数。 |'
- en: '| `onRowDblclick` |'
  id: totrans-587
  prefs: []
  type: TYPE_TB
  zh: '| `onRowDblclick` |'
- en: '`event.originalEvent`: Browser event'
  id: totrans-588
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.originalEvent`: 浏览器事件'
- en: '`event.node`: Selected node instance'
  id: totrans-589
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.node`: 选定的节点实例'
- en: '| Callback to invoke when a row is double clicked. |'
  id: totrans-590
  prefs: []
  type: TYPE_TB
  zh: '| 双击行时要调用的回调函数。 |'
- en: The complete demo application with instructions is available on GitHub at
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的演示应用程序及说明可在GitHub上找到
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter5/treetable](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter5/treetable).'
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter5/treetable](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter5/treetable).'
- en: Managing events with Schedule
  id: totrans-593
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用日程安排管理事件
- en: 'Schedule is a full-sized drag-and-drop event calendar based on a `FullCalendar`
    jQuery plugin. The events of Schedule should be formed as an array and defined
    using the `events` property. The Schedule component depends on the `FullCalendar`
    library, so it requires the following resources in your page as listed:'
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
  zh: '日程安排是基于`FullCalendar` jQuery插件的全尺寸拖放事件日历。日程安排的事件应该形成一个数组，并使用`events`属性进行定义。日程安排组件依赖于`FullCalendar`库，因此它需要您页面中列出的以下资源： '
- en: The Schedule component is embedded in a web page using a style sheet and JavaScript
    files. So, we need to include the `FullCalendar` library's style sheet (`.css`)
    and JavaScript (`.js`) files in the HTML page's `head` section.
  id: totrans-595
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日程安排组件嵌入到网页中，使用样式表和JavaScript文件。因此，我们需要在HTML页面的`head`部分包含`FullCalendar`库的样式表（`.css`）和JavaScript（`.js`）文件。
- en: Add `jQuery` and `Moment.js` libraries as mandatory libraries for a full calendar.
    These two libraries must be loaded before loading the `FullCalendar` library's
    JavaScript file.
  id: totrans-596
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`jQuery`和`Moment.js`库添加为完整日历的强制库。这两个库必须在加载`FullCalendar`库的JavaScript文件之前加载。
- en: 'Hence, we included `FullCalendar` and other dependent resources in a root `index.html`
    file as follows:'
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们在根`index.html`文件中包含了`FullCalendar`和其他依赖资源，如下所示：
- en: '[PRE60]'
  id: totrans-598
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'A basic example of the Schedule component defined for the entire month would
    be written as follows:'
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
  zh: 为整个月份定义的日程安排组件的基本示例将如下所示编写：
- en: '[PRE61]'
  id: totrans-600
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Basically, all kinds of events have properties such as title, duration (start
    and end date), type of day (full/partial day), and so on. So, the event class
    would be defined as follows:'
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，所有类型的事件都有标题、持续时间（开始和结束日期）、日期类型（全天/部分天）等属性。因此，事件类将如下所示定义：
- en: '[PRE62]'
  id: totrans-602
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'The data for Schedule events should be defined exactly in the preceding format
    as a prototype. But in real time, data is fetched using a remote service call
    and updated in the Schedule UI immediately whenever there are any changes in the
    events. The event service, which is used to retrieve data from a data source (in
    this case, it retrieves data from a JSON events file) using HTTP module and observables,
    is defined as follows:'
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
  zh: 日程安排事件的数据应该按照上述格式作为原型来定义。但在实时情况下，数据是通过远程服务调用获取的，并且在事件发生变化时立即更新到日程安排界面。用于从数据源检索数据的事件服务（在本例中，它使用HTTP模块和可观察对象从JSON事件文件中检索数据）定义如下：
- en: '[PRE63]'
  id: totrans-604
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'The injected service gets the data during the initial load of a web page. The
    component class has to define the subscription for observable as shown here:'
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
  zh: 注入的服务在网页初始加载时获取数据。如下所示，组件类必须定义可观察对象的订阅：
- en: '[PRE64]'
  id: totrans-606
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'The following screenshot shows a snapshot result of the embedded Schedule component
    display as an example:'
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了嵌入式日程安排组件显示的快照结果作为示例：
- en: '![](assets/35e1cead-b355-417d-8ea0-066647e169bf.png)'
  id: totrans-608
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/35e1cead-b355-417d-8ea0-066647e169bf.png)'
- en: As per the preceding snapshot, the header is displayed with date (month and
    year), the today label, and month navigation controls. The main body or content
    area contains each day in the month and events on the specific days with a blue
    covered area.
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前面的快照，标题显示为日期（月份和年份）、今天标签和月份导航控件。主体或内容区域包含了每个月的每一天以及特定日期上的事件，以蓝色覆盖区域显示。
- en: Header customization
  id: totrans-610
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标题定制
- en: 'In the previous snapshot, we observed the Schedule content area along with
    default header text and controls. The default header configuration object for
    the Schedule element would be written as follows:'
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的快照中，我们观察到了日程安排的内容区域以及默认标题文本和控件。日程安排元素的默认标题配置对象将被编写如下：
- en: '[PRE65]'
  id: totrans-612
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'The mentioned default header display is modified through the `header` property,
    which holds the header configuration object as shown here:'
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`header`属性修改了上述默认标题显示，该属性保存了标题配置对象，如下所示：
- en: '[PRE66]'
  id: totrans-614
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Let''s define the navigation controls on the left-hand side, title in the middle,
    and type of view (month, week, and day) on the right-hand side to represent it
    as a configuration object:'
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们定义左侧的导航控件，中间的标题，以及右侧的视图类型（月、周、日），以将其表示为配置对象：
- en: '[PRE67]'
  id: totrans-616
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'The following screenshot shows a snapshot result of the customized Schedule''s
    header as an example:'
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了自定义日程安排标题的快照结果作为示例：
- en: '![](assets/5ef78c40-0dff-4d5d-9910-509454446dd2.png)'
  id: totrans-618
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5ef78c40-0dff-4d5d-9910-509454446dd2.png)'
- en: Beyond basic usage - advanced features
  id: totrans-619
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本用法之外 - 高级功能
- en: 'Apart from the mentioned regular features, the Schedule component also supports
    lazy loading through the `onViewRender` event callback, which will be invoked
    when the new date range is rendered or when the view type changes. The Schedule
    component with lazy loading event callback invocation would be written as follows:'
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
  zh: 除了上述常规功能之外，日程安排组件还通过`onViewRender`事件回调支持懒加载，当新的日期范围被渲染或视图类型发生变化时将被调用。带有懒加载事件回调调用的日程安排组件将被编写如下：
- en: '[PRE68]'
  id: totrans-621
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'The component class defines a lazy loading callback to retrieve the events
    data on-demand and would be written as follows:'
  id: totrans-622
  prefs: []
  type: TYPE_NORMAL
  zh: 组件类定义了一个懒加载回调，以便按需检索事件数据，并且将被编写如下：
- en: '[PRE69]'
  id: totrans-623
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: The component also supports localization through the `locale` property. For
    example, German labels are represented by setting `locale="de"`. The localized
    labels should be defined in a component similar to calendar.
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
  zh: 该组件还通过`locale`属性支持本地化。例如，通过设置`locale="de"`来表示德语标签。本地化标签应该在类似日历的组件中定义。
- en: The UI is updated automatically when there is any change in the events data.
    This is very helpful for CRUD operations implementation on Schedule.
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
  zh: 当事件数据发生任何变化时，UI会自动更新。这对于在日程安排上实现CRUD操作非常有帮助。
- en: Events and methods
  id: totrans-626
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件和方法
- en: 'The Schedule component provides many event callbacks on click, mouse, resize,
    and drag and drop user actions as listed here:'
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
  zh: 日程安排组件提供了许多事件回调，包括点击、鼠标、调整大小和拖放用户操作，如下所列：
- en: '| **Name** | **Description** |'
  id: totrans-628
  prefs: []
  type: TYPE_TB
  zh: '| **名称** | **描述** |'
- en: '| `onDayClick` | Triggered when the user clicks on a day |'
  id: totrans-629
  prefs: []
  type: TYPE_TB
  zh: '| `onDayClick` | 当用户点击某一天时触发 |'
- en: '| `onEventClick` | Triggered when the user clicks an event |'
  id: totrans-630
  prefs: []
  type: TYPE_TB
  zh: '| `onEventClick` | 当用户点击事件时触发 |'
- en: '| `onEventMouseover` | Triggered when the user mouses over an event |'
  id: totrans-631
  prefs: []
  type: TYPE_TB
  zh: '| `onEventMouseover` | 当用户将鼠标悬停在事件上时触发 |'
- en: '| `onEventMouseout` | Triggered when the user mouses out of an event |'
  id: totrans-632
  prefs: []
  type: TYPE_TB
  zh: '| `onEventMouseout` | 当用户鼠标移出事件时触发 |'
- en: '| `onEventDragStart` | Triggered when event dragging begins |'
  id: totrans-633
  prefs: []
  type: TYPE_TB
  zh: '| `onEventDragStart` | 当事件拖动开始时触发 |'
- en: '| `onEventDragStop` | Triggered when event dragging stops |'
  id: totrans-634
  prefs: []
  type: TYPE_TB
  zh: '| `onEventDragStop` | 当事件拖动停止时触发 |'
- en: '| `onEventDrop` | Triggered when dragging stops and the event has moved to
    a *different* day/time |'
  id: totrans-635
  prefs: []
  type: TYPE_TB
  zh: '| `onEventDrop` | 当拖动停止且事件已移动到*不同*的日期/时间时触发 |'
- en: '| `onEventResizeStart` | Triggered when event resizing begins |'
  id: totrans-636
  prefs: []
  type: TYPE_TB
  zh: '| `onEventResizeStart` | 当事件调整大小开始时触发 |'
- en: '| `onEventResizeStop` | Triggered when event resizing stops |'
  id: totrans-637
  prefs: []
  type: TYPE_TB
  zh: '| `onEventResizeStop` | 当事件调整大小停止时触发 |'
- en: '| `onEventResize` | Triggered when resizing stops and the event has changed
    in duration |'
  id: totrans-638
  prefs: []
  type: TYPE_TB
  zh: '| `onEventResize` | 当调整大小停止且事件持续时间发生变化时触发 |'
- en: '| `onViewRender` | Triggered when a new date-range is rendered, or when the
    view type switches |'
  id: totrans-639
  prefs: []
  type: TYPE_TB
  zh: '| `onViewRender` | 当新的日期范围被渲染或视图类型切换时触发 |'
- en: '| `onViewDestroy` | Triggered when a rendered date-range needs to be torn down
    |'
  id: totrans-640
  prefs: []
  type: TYPE_TB
  zh: '| `onViewDestroy` | 当渲染的日期范围需要被销毁时触发 |'
- en: '| `onDrop` | Triggered when a draggable has been dropped onto the Schedule
    |'
  id: totrans-641
  prefs: []
  type: TYPE_TB
  zh: '| `onDrop` | 当可拖动对象被放置到日程表上时触发 |'
- en: 'Also, it provides many API methods to handle different use cases as shown here:'
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，它提供了许多 API 方法来处理不同的用例，如下所示：
- en: '| **Name** | **Parameters** | **Description** |'
  id: totrans-643
  prefs: []
  type: TYPE_TB
  zh: '| **名称** | **参数** | **描述** |'
- en: '| `prev()` | - | Moves the Schedule one step back (either by a month, week,
    or day) |'
  id: totrans-644
  prefs: []
  type: TYPE_TB
  zh: '| `prev()` | - | 将日程表向后移动一步（可以是一个月、一周或一天） |'
- en: '| `next()` | - | Moves the Schedule one step forward (either by a month, week,
    or day) |'
  id: totrans-645
  prefs: []
  type: TYPE_TB
  zh: '| `next()` | - | 将日程表向前移动一步（可以是一个月、一周或一天） |'
- en: '| `prevYear()` | - | Moves the Schedule back one year |'
  id: totrans-646
  prefs: []
  type: TYPE_TB
  zh: '| `prevYear()` | - | 将日程表向后移动一年 |'
- en: '| `nextYear()` | - | Moves the Schedule forward one year |'
  id: totrans-647
  prefs: []
  type: TYPE_TB
  zh: '| `nextYear()` | - | 将日程表向前移动一年 |'
- en: '| `today()` | - | Moves the Schedule to the current date |'
  id: totrans-648
  prefs: []
  type: TYPE_TB
  zh: '| `today()` | - | 将日程表移动到当前日期 |'
- en: '| `gotoDate(date)` | `date`: Date to navigate | Moves the Schedule to an arbitrary
    date |'
  id: totrans-649
  prefs: []
  type: TYPE_TB
  zh: '| `gotoDate(date)` | `date`: 要导航的日期 | 将日程表移动到任意日期 |'
- en: '| `incrementDate(duration)` | `duration`: Duration to add to current date |
    Moves the Schedule forward/backward an arbitrary amount of time |'
  id: totrans-650
  prefs: []
  type: TYPE_TB
  zh: '| `incrementDate(duration)` | `duration`: 要添加到当前日期的持续时间 | 将日程表向前/向后移动任意时间量
    |'
- en: '| `getDate()` | - | Returns a moment for the current date of the calendar |'
  id: totrans-651
  prefs: []
  type: TYPE_TB
  zh: '| `getDate()` | - | 返回日历当前日期的时刻 |'
- en: '| `changeView(viewName)` | `viewName`: A valid view string to change to | Immediately
    switches to a different view |'
  id: totrans-652
  prefs: []
  type: TYPE_TB
  zh: '| `changeView(viewName)` | `viewName`: 要切换到的有效视图字符串 | 立即切换到不同的视图 |'
- en: 'The preceding API methods will give full control on Schedule. There are many
    use cases, where these method calls are really helpful. For example, the Schedule''s
    next view (month, week, or day) is accessed through the `.next()` method as shown
    here:'
  id: totrans-653
  prefs: []
  type: TYPE_NORMAL
  zh: 上述 API 方法将完全控制日程表。这些方法调用在许多用例中非常有帮助。例如，通过`.next()`方法访问日程表的下一个视图（月、周或日）如下所示：
- en: '[PRE70]'
  id: totrans-654
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'The component class defines the click event callback which will invoke next
    day, week, or month as shown here:'
  id: totrans-655
  prefs: []
  type: TYPE_NORMAL
  zh: 组件类定义了点击事件回调，将调用下一个日期、周或月，如下所示：
- en: '[PRE71]'
  id: totrans-656
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: The complete demo application with instructions is available on GitHub at
  id: totrans-657
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的演示应用程序及说明可在GitHub上找到
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter5/schedule](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter5/schedule).'
  id: totrans-658
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter5/schedule](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter5/schedule).'
- en: Summary
  id: totrans-659
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: At this point of time, you will have an overview of all data iteration components
    and their most used features such as selecting rows, sorting, pagination, filtering
    data, and so on. Next, we were able to display (hierarchical) data in a tabular,
    grid, and list formats. Furthermore, you know how to achieve resizing, reordering,
    toggling, and grouping of columns, customizing of cell content in DataTable and
    visualizing the data with Tree and TreeTable components. In the next chapter,
    you will see amazing overlays such as dialog, confirm dialog, overlay panel, and
    notification components, such as growl and messages along with various features.
  id: totrans-660
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，您将对所有数据迭代组件及其最常用的功能有一个概览，比如选择行、排序、分页、过滤数据等等。接下来，我们能够以表格、网格和列表格式显示（分层）数据。此外，您将了解如何在DataTable中实现调整大小、重新排序、切换和分组列，自定义单元格内容，并使用Tree和TreeTable组件可视化数据。在下一章中，您将看到一些令人惊叹的覆盖层，比如对话框、确认对话框、覆盖面板和通知组件，比如growl和消息，以及各种功能。
