["```js\n\"proxy\": \"http://localhost:4000\"\n```", "```js\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\",\n    \"backend\": \"node server.js\"\n  },\n```", "```js\n$ yarn add express\n```", "```js\nconst express = require('express');\nconst app = express();\nconst port = 4000;\n\napp.use(express.json());\n\napp.get('/', (req, res) => res.json({}));\n\napp.listen(port, () =>\n  console.log(`Simulated backend listening on port ${port}!`)\n);\n```", "```js\n{ description: String, done: Boolean, critical: Boolean }\n```", "```js\n{ id: Number, description: String, done: Boolean, critical: Boolean }\n```", "```js\nconst todos = [\n  { id: 1, description: 'Write some code', done: false, critical: false },\n  { id: 2, description: 'Change the world', done: false, critical: false },\n  { id: 3, description: 'Eat a cookie', done: false, critical: false }\n];\n```", "```js\napp.get('/api/todos', (req, res) => res.json({ todos: todos }));\n```", "```js\napp.post(\"/api/todos\", (req, res) => {\n  const body = { id: todos.length + 1, ...req.body };\n  res.json({ todos: [...todos, body] });\n});\n```", "```js\napp.delete(\"/api/todos/:id\", (req, res) => {\n  const todoId = parseInt(req.params.id);\n  res.json({ todos: todos.filter(t => t.id !== todoId) });\n});\n```", "```js\ndoSomethingAsync().then(doSomething()).then(doSomethingElse())\n```", "```js\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      items: [],\n      loaded: false\n    };\n\n    this.addTodo = this.addTodo.bind(this);\n    this.removeTodo = this.removeTodo.bind(this);\n  }\n```", "```js\n  addTodo(description) {\n    const newItem = {\n      description: description,\n      done: false,\n      critical: false\n    };\n    this.setState({\n      items: [...this.state.items, newItem]\n    });\n  }\n```", "```js\n  removeTodo(removeItem) {\n    const filteredItems = this.state.items.filter(todo => {\n      return todo.description !== removeItem;\n    });\n    this.setState({ items: filteredItems });\n  }\n```", "```js\n  renderItems() {\n    if (this.state.loaded) {\n      return this.state.items.map(todo => (\n        <Fragment key={'item-' + todo.description}>\n          <Todo\n            id={todo.id}\n            key={todo.id}\n            description={todo.description}\n            removeTodo={this.removeTodo}\n            done={todo.done}\n            critical={todo.critical}\n          />\n          <Divider key={'divide-' + todo.description} />\n        </Fragment>\n      ));\n    } else {\n      return <p>Still Loading...</p>;\n    }\n  }\n```", "```js\n  constructor(props) {\n    super(props);\n    this.state = {\n      done: props.done,\n      critical: props.critical\n    };\n\n    this.markAsDone = this.markAsDone.bind(this);\n    this.removeTodo = this.removeTodo.bind(this);\n    this.markCritical = this.markCritical.bind(this);\n  }\n```", "```js\n  async componentDidMount() {\n    this.setState({ loaded: true });\n  }\n```", "```js\nconst res = await fetch('/api/todos', { accept: 'application/json' });\n```", "```js\nconst json = await res.json();\n```", "```js\n{\n  todos: [ ...todo1, ...todo2, ...etc ]\n}\n```", "```js\nthis.setState({ items: json.todos, loaded: true });\n```", "```js\nasync componentDidMount() {\n  const res = await fetch('/api/todos', { accept: 'application/json' });\n  const json = await res.json();\n  this.setState({ items: json.todos, loaded: true });\n}\n```", "```js\n  async addTodo(description) {\n    const res = await fetch('/api/todos', {\n      method: 'POST',\n      headers: { accept: 'application/json', 'content-type': 'application/json'  },\n      body: JSON.stringify({ description: description, critical: false, done: false })\n    });\n    if (res.status === 200) {\n      const newItem = {\n        id: this.state.items.length + 1,\n        description: description,\n        done: false,\n        critical: false\n      };\n      this.setState({\n        items: [...this.state.items, newItem]\n      });\n    }\n  }\n```", "```js\n  async removeTodo(removeItemId) {\n    const res = await fetch(`/api/todos/${removeItemId}`, {\n      method: 'DELETE',\n      headers: { accept: 'application/json', 'content-type': 'application/json' }\n    });\n    if (res.status === 200) {\n      const filteredItems = this.state.items.filter(todo => {\n        return todo.id !== removeItemId;\n      });\n      this.setState({ items: filteredItems });\n    }\n  }\n```", "```js\n  removeTodo() {\n    this.props.removeTodo(this.props.id);\n  }\n```", "```js\n  const component = shallow(\n    <Todo\n      description={description}\n      removeTodo={mockRemoveTodo}\n      critical={false}\n      done={false}\n      id={1}\n    />\n  );\n```", "```js\nconst fetchTodos = async () => {\n  const res = await fetch(\"/api/todos\", { accept: \"application/json\" });\n  const json = await res.json();\n  return { status: res.status, todos: json.todos };\n};\n```", "```js\nconst createTodo = async description => {\n  const res = await fetch(\"/api/todos\", {\n    method: \"POST\",\n    headers: { accept: \"application/json\" },\n    body: JSON.stringify({\n      description: description,\n      critical: false,\n      done: false\n    })\n  });\n  const json = await res.json();\n  return { status: res.status, todos: json.todos };\n};\n```", "```js\nconst deleteTodo = async todoId => {\n  const res = await fetch(`/api/todos/${todoId}`, {\n    method: \"DELETE\",\n    headers: { accept: \"application/json\" }\n  });\n  const json = await res.json();\n  return { status: res.status, todos: json.todos };\n};\n```", "```js\nexport { fetchTodos, createTodo, deleteTodo };\n```", "```js\nimport { fetchTodos, createTodo, deleteTodo } from \"../TodoService\";\n```", "```js\n  async componentDidMount() {\n    const { todos } = await fetchTodos();\n    this.setState({ items: todos, loaded: true });\n  }\n```", "```js\n  async addTodo(description) {\n    const { status } = await createTodo(description);\n    if (status === 200) {\n      const newItem = {\n        id: this.state.items.length + 1,\n        description: description,\n        done: false,\n        critical: false\n      };\n      this.setState({\n        items: [...this.state.items, newItem]\n      });\n    }\n  }\n```", "```js\n  async removeTodo(todoId) {\n    const { status } = await deleteTodo(todoId);\n    if (status === 200) {\n      const filteredItems = this.state.items.filter(todo => {\n        return todo.id !== todoId;\n      });\n      this.setState({ items: filteredItems });\n    }\n  }\n```", "```js\njest.mock(\"../TodoService\", () => ({\n  fetchTodos: jest.fn().mockReturnValue({ status: 200, todos: [] }),\n  createTodo: jest.fn().mockReturnValue({ status: 200, todos: [] }),\n  deleteTodo: jest.fn().mockReturnValue({ status: 200, todos: [] })\n}));\n```", "```js\nit(\"does some thing\", () => {\n  // Do some work here\n});\n```", "```js\nit(\"does some thing\", async () => {\n  // Do some work here\n});\n```", "```js\n  it(\"adds another Todo when the addTodo function is called\", async () => {\n    const before = component.find(Todo).length;\n    await component.instance().addTodo(\"New Item\");\n    component.update();\n    const after = component.find(Todo).length;\n    expect(after).toBeGreaterThan(before);\n  });\n```", "```js\n it(\"removes a Todo from the list when the remove Todo function is called\", async () => {\n const before = component.find(Todo).length;\n const removeMe = component.state(\"items\")[0];\n await component.instance().removeTodo(removeMe.id);\n component.update();\n const after = component.find(Todo).length;\n expect(after).toBeLessThan(before);\n });\n```", "```js\n PASS src/Todo.test.js\n PASS src/App/App.test.js\n PASS src/TodoList/TodoList.test.js\n PASS src/NewTodo/NewTodo.test.js\n PASS src/Todo/Todo.test.js\n\nTest Suites: 4 passed, 4 total\nTests: 21 passed, 21 total\nSnapshots: 3 passed, 3 total\nTime: 5.596s\nRan all test suites.\n```"]