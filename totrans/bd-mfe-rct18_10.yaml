- en: '7'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Deploying Microfrontends to Static Storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Things start to get interesting from this chapter on, because we are now stepping
    out of the frontend/React world and moving into the areas of cloud and full life
    cycle engineering.
  prefs: []
  type: TYPE_NORMAL
- en: As you may recollect from earlier chapters of this book, one of the primary
    goals of a microfrontend architecture is to ensure that we don’t need to deploy
    the entire application each time a small change is made but instead only deploy
    the micro apps that have changed. Hence, a book on microfrontends wouldn’t be
    deemed complete unless we covered the critical topic of deploying our microfrontend
    to production in the right way.
  prefs: []
  type: TYPE_NORMAL
- en: When it comes to deploying SPAs, usually we run the webpack `build` command
    to generate our JavaScript bundles and assets in the `/build` or `/dist` folder,
    which we then simply copy to a static website hosting provider to make our app
    available to our users. However, deploying microfrontends is a bit more complex.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will see how to deploy the client-side-rendered microfrontend
    we built in [*Chapter 5*](B18987_05.xhtml#_idTextAnchor073) to a static storage
    cloud provider such as Firebase. We will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding what static storage is
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up Firebase Hosting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning how to build production bundles with Nx
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning how to only build and deploy modified apps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, we will have our microfrontend apps running on Firebase,
    and we will have also created scripts that only build and deploy the apps that
    have been modified.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we go through the code examples in this chapter, we will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A PC, Mac, or Linux desktop/laptop with at least 8 GB of RAM (16 GB preferred)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An Intel chipset i5+ or Mac M1+ chipset
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At least 256 GB of free hard disk storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You will also need the following software installed on your computer:'
  prefs: []
  type: TYPE_NORMAL
- en: Node.js version 18+ (use **nvm** to manage different versions of Node.js if
    you have to)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Terminal: iTerm2 with OhMyZsh (you will thank me later)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'IDE: We strongly recommend VS Code as we will be making use of some of the
    plugins that come with VS Code for an improved developer experience'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'npm, Yarn, or pnpm: We recommend pnpm because it’s fast and storage efficient'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Browser: Chrome/Microsoft Edge, Firefox'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A basic understanding of Nx.dev monorepos
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A basic understanding of Firebase and static site hosting would be helpful
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The code files for this chapter can be found here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/Building-Micro-Frontends-with-React](https://github.com/PacktPublishing/Building-Micro-Frontends-with-React)'
  prefs: []
  type: TYPE_NORMAL
- en: We also assume you have a basic working knowledge of Git, such as branching,
    committing code, and raising a pull request.
  prefs: []
  type: TYPE_NORMAL
- en: What is Static Storage?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cloud hosting providers such as AWS, Google, and Azure offer a variety of hosting
    solutions. Static storage, also known as blob storage, refers to a type of storage
    service that is optimized for storing large amounts of unstructured data, such
    as **Binary Large Objects** (**Blob**). This data can be of any type, including
    images, videos, audio files, and text file formats such as HTML, CSS, and JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: Static storage is designed to be highly scalable and is usually served via a
    **Content Delivery Network** (**CDN**). This allows it to handle large volumes
    of data without performance degradation, and also makes it highly durable, with
    data replication across different nodes to ensure that data is not lost due to
    hardware failures or other disruptions.
  prefs: []
  type: TYPE_NORMAL
- en: A key point to keep in mind about static storage is that it doesn’t have any
    compute power; that is, it doesn’t have any CPU or RAM resources. It can only
    serve static files. Think of it like a very large external hard disk connected
    to the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: 'Historically, static storage has been used to store and serve images, JavaScript,
    or CSS files, or as backup storage. It was never an option to host web apps. However,
    with the advent of SPAs that execute on the browser, frontend engineers realized
    they could use storage to host JavaScript and CSS bundles and have the apps execute
    and run on the browser. Most hosting providers now officially offer static site
    hosting. Some popular static site hosting providers are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Firebase
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Netlify
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cloudflare
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Static Web Apps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google Cloud Storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Amazon S3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Due to its simplicity and very low costs, static storage is ideal for serving
    client-side-rendered (CSR) React apps. Due to the lack of compute power, they
    cannot be used to serve backend or node-based APIs, or to execute **server-side**
    **rendering** (**SSR**).
  prefs: []
  type: TYPE_NORMAL
- en: In our case, since our microfrontend is client-side-rendered, we will use it
    to deploy our apps.
  prefs: []
  type: TYPE_NORMAL
- en: Of the various hosting options available, we will choose Firebase for our hosting
    solution, and in the next section, we will go about setting up our Firebase application.
  prefs: []
  type: TYPE_NORMAL
- en: Just a note that deploying the microfrontend to any other hosting provider will
    follow a similar process to what we will go through in the rest of the sections
    of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Firebase
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Firebase, which is part of Google Cloud Platform, is an extremely easy-to-use
    and developer-friendly hosting provider. Firebase has a lot of offerings and services
    for building and managing web and mobile applications.
  prefs: []
  type: TYPE_NORMAL
- en: Many of these services have free tiers, which make it ideal for building and
    testing things out. You can access all the products and services by heading over
    to [www.firebase.com](https://www.firebase.com) and logging in with your Google
    account.
  prefs: []
  type: TYPE_NORMAL
- en: Once you’ve logged in to Firebase, head over to **Manage** **Console** ([https://console.firebase.google.com/](https://console.firebase.google.com/)).
  prefs: []
  type: TYPE_NORMAL
- en: Create a new project. Let's call it `ebuy`. In the next section, we will set
    up our sites within this project.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a project with multiple sites
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will be using Firebase’s hosting service to deploy our apps. If you are
    not familiar with Firebase Hosting, we strongly encourage you to head over to
    [https://firebase.google.com/docs/hosting](https://firebase.google.com/docs/hosting)
    and read about it:'
  prefs: []
  type: TYPE_NORMAL
- en: Once in the console, select the **ebuy** project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Head over to the **Build** | **Hosting** link on the left navigation pane. Click
    on the **Get Started** button to start the wizard and follow the steps to create
    a new site within the **ebuy** project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We are going to need a new site for every micro app that we build, so on the
    Dashboard page use the **Add another site** and go ahead and create five sites.
    For the sake of consistency in this chapter, let’s name them as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**ebuy-app-shell.web.app**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ebuy-catalog.web.app**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ebuy-checkout.web.app**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ebuy-recommendations.web.app**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ebuy-datastore.web.app**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that these names need to be unique to the entirety of Firebase. If the
    name is taken (and most likely it would have been taken), you can choose suitable
    names or go with the recommendation Firebase provides.
  prefs: []
  type: TYPE_NORMAL
- en: Once you’ve created these five sites, note down the URLs at which these sites
    will be available, as we will need them later.
  prefs: []
  type: TYPE_NORMAL
- en: Installing and configuring the Firebase CLI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Next, we need to install Firebase tools and connect them to our project and
    site:'
  prefs: []
  type: TYPE_NORMAL
- en: In the terminal, run **npm install -****g firebase-tools**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, run **firebase login**. This will open up a browser window and request
    you to log in to your Firebase account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run **firebase init hosting**. This will take you through a series of steps.
    If all goes well, then you will see new **.firebaserc** and **firebase.json**
    files created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we need to let Firebase know which micro app should be deployed to which
    target site. We do this by running the following commands. The syntax looks as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'So, in our case, given the names we have for our micro apps and the websites
    created within Firebase, our commands would look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**firebase target:apply hosting** **app-shell ebuy-app-shell**'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '**firebase target:apply hosting** **catalog ebuy-catalog**'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '**firebase target:apply hosting** **checkout ebuy-checkout**'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '**firebase target:apply hosting recommendations** **ebuy-recommendations**'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '**firebase target:apply hosting** **store ebuy-datastore**'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Once these commands have been executed successfully, you’ll notice these entries
    being made in the `.``firebaserc` file.
  prefs: []
  type: TYPE_NORMAL
- en: This completes our setup on the Firebase side of things. In the next section,
    we will prepare our microfrontend for production builds.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Microfrontend Production build
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you may recollect, so far, we’ve only run and tested our microfrontends in
    development mode, using the `nx serve` command. For us to deploy applications
    to a hosting server, they need to be built in production mode.
  prefs: []
  type: TYPE_NORMAL
- en: This is usually quite straightforward in regular React apps, but with our microfrontends,
    it needs a bit more work.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open up the ebuy app we built in [*Chapter 5*](B18987_05.xhtml#_idTextAnchor073)
    and follow these steps. Let''s first create a script command to build all our
    apps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open up the **package.json** file on the root and just like the **serve:all**
    command, let''s create a new command for **build:all** as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the **pnpm build:all** command and let us see whether all the apps build.
    Oops! You’ll notice while all the other apps built fine, **app-shell** threw out
    some error about not being able to find **catalog/Module** or **checkout/Module**,
    and so on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's dig a bit into it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open up the `remotes` array is blank. This is the reason why our app-shell build
    command is failing, because webpack doesn’t know the path from where it needs
    to fetch the `remoteEntry.js` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's add our list of remotes to this array. This should mirror the list of
    apps in the remotes array of our `remoteEntry` files will exist.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We update the remotes array in **apps/app-shell/webpack.config.prod.js** as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, rerun the `catalog` and `recommendations` apps also need the array of remotes
    in their `webpack.config.prod.js` files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We also notice that because our catalog and checkout apps were not originally
    built as microfrontend remote apps, they have a slightly different configuration
    and are missing `webpack.config.prod.js` files. Let's fix that first.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: First and foremost, let’s copy and paste the `.prod.js` file when building the
    production builds.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'So, in their respective **project.json** files, we add the following line within
    the **build > configuration > production** object, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will now ensure that all apps use their corresponding `webpack.config.prod.js`
    file to run their production builds.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, let''s go and update the array for the remote paths in our **apps/catalog/webpack.config.prod.js**
    file. Since the catalog app has only one remote, which is the recommendations
    micro app, our remotes array would look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, let''s do the same for our recommendations apps, which use the `store`
    micro app as a remote. So, in the `apps/recommendations/webpack.config.prod.js`
    file, we update the remotes array as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '10\. Since the checkout app also needs to use the store as a remote we update
    the **apps/checkout/webpack.config.prod.js** as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run our **pnpm build:all** command again to generate the production builds based
    on the latest webpack configurations we made.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the build is successful, have a look in the `/dist` folder on the root
    of the project and verify that all our micro-app folders are present within `/dist/apps`.
    Note their paths as we will need them in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we were able to generate production builds for our microfrontends
    by ensuring all the apps used the right webpack configuration, including the correct
    public URLs for the `remoteEntry.js` files.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will see how to deploy these apps to Firebase.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying our Apps to Firebase
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Deploying our apps to Firebase is quite easy using the Firebase CLI’s `deploy`
    command. However, before we run our Firebase `deploy` command, we need to let
    Firebase know which micro-apps go into the corresponding Firebase website. We
    do this in the `/``firebase.json` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Replace the default configuration with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the preceding code is a configuration, where we have an array
    of our target apps, and we define the folder path where Firebase should look for
    the bundles for each of the micro apps. We also have a few settings regarding
    ignoring and not deploying `node_modules` and a rewrite rule, which is essential
    if you want each micro app to also be available as its own SPA within its respective
    site.
  prefs: []
  type: TYPE_NORMAL
- en: With this, we are now ready to deploy our apps to Firebase. Let's first run
    it manually to ensure things work fine.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the terminal of the project, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This would generate a `.firebase` folder with a lot of files. Don’t forget to
    add `.firebase` to your `.gitignore`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let Firebase do its thing, and if all goes well, it should display a success
    message and print out the list of URLs where the sites have been deployed, like
    so:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.1 – List of website URLs published after a successful deployment
    on Firebase](img/Figure_7.01_B18987.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.1 – List of website URLs published after a successful deployment on
    Firebase
  prefs: []
  type: TYPE_NORMAL
- en: Great! Let’s click on the `app-shell` link and check whether we can see our
    microfrontend.
  prefs: []
  type: TYPE_NORMAL
- en: Err, we see a blank page... Have a peek into the browser’s developer tools console
    and you’ll notice what the problem is. Our browser has blocked calls to the `remoteEntry.js`
    files because of **Cross-Origin Resource** **Sharing** (**CORS**).
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.2 – CORS policy headers due to missing Access-Control-Allow-Origin
    header](img/Figure_7.02_B18987.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.2 – CORS policy headers due to missing Access-Control-Allow-Origin
    header
  prefs: []
  type: TYPE_NORMAL
- en: We will see how to fix this in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Fixing CORS issues
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you’ve been building React or any other web apps, you’ll be familiar with
    the dreaded CORS problem. This is where the browser, for security reasons, prevents
    calls to external domains unless it sees an explicit `'Access-Control-Allow-Origin'`
    header. The access control is set on the apps that decide whether they want assets
    from their domain to be consumed and executed on other domains.
  prefs: []
  type: TYPE_NORMAL
- en: So, for our microfrontend apps to work properly, the host app needs to be able
    to load the `remoteEntry.js` file from the public URL where each of the micro
    apps is hosted. This is what we are going to set in the next steps.
  prefs: []
  type: TYPE_NORMAL
- en: With Firebase Hosting, it is quite easy, and we can define a headers array in
    the `firebase.json` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open up `/firebase.json` for all the apps except `app-shell`, and within each
    of the target objects, define the headers we’d like to set:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: firebase deploy --only hosting:<app-name>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: firebase deploy --only hosting:app-shell
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: pnpm nx print-affected --type=app --select=projects
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: pnpm nx affected --target=deploy --base=main --head=HEAD
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '"deploy": {'
  prefs: []
  type: TYPE_NORMAL
- en: '"executor": "@nrwl/workspace:run-commands",'
  prefs: []
  type: TYPE_NORMAL
- en: '"options": {'
  prefs: []
  type: TYPE_NORMAL
- en: '"commands": ["firebase deploy --only hosting:app-shell"],'
  prefs: []
  type: TYPE_NORMAL
- en: '"parallel": true'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: pnpm nx affected -–target=build
  prefs: []
  type: TYPE_NORMAL
- en: pnpm nx affected -–target=deploy
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
