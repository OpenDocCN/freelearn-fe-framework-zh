- en: Routing and Navigation between Components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will cover navigation in an Angular application. We will
    implement routers for our app component and authentication. We will also cover
    router outlets for our component view and create a router module for authentication.
    This will make our authentication feature completely independent of other modules.
    Component navigation in an authentication module will be taken care of by a child
    router module. We will also discuss Angular guard, which will restrict the navigation
    based on the condition to the component. This enhances the security of our application.
    Finally, we will cover Firebase session life cycles in depth and redirect our
    user to the Login or My Profile page.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Enabling routes in an app component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a routing module for authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a router link
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using authentication guard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Firebase session life cycles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Our project structure as of now
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling routes in an app component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we enable routing and create the main navigation bar for our
    application. The steps to enable routes are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Adding the base reference URL**: We will need to add a base element in `index.html`
    to tell the Angular router how to compose the navigation URL.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We added `href` in the head tag of `index.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**Creating the main navigation bar**: Most web applications have a navigation
    bar at the top of the page for navigating to different pages in the application.
    We have added a main navigation bar for our friends application using the bootstrap
    `nav bar` component.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The first step is to include the `nav` tag in `app.component.html`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The second step is to create a list of items using the `ul` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The third step is to create the items using the `li` tag. In our application,
    we have to activate tabs based on the user login condition, for example, a user
    profile tab will appear when the user logs in. We followed these conditions to
    activate tabs in our navigation bar:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**User not signed**: We activated only the about and login tabs. A user can
    navigate to the signup page by clicking on the SIGNUP button.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**User signed**: We deactivated the login page and activated the user profile
    page.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In order to achieve these scenarios, we will access the authentication service
    object, check the user logged-in status, and activate the tabs. We use the `ngIf`
    directive for condition check:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The question mark in `authenticationService?` in `AuthenticationService` in
    the template ensures that the object is not null. This object is defined in `app.component.ts`,
    as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the complete `app.component.html` as of now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**Creating page not found and about component**: The `PageNotFoundComponent`
    component is used to display the view for an incorrect URL and `AboutComponent`
    is used to display information about the site.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Both these components look similar and have a message header with the `h2` tag
    with text. In these components, we defined a template and style sheets in component
    annotation. This is one simple way to create the component.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the complete `page-not-found.component.ts`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the complete `about.component.ts`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '**Creating routes for an app component**: We create routes for our main app
    module for the about and page not found components.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We create the routes for two components with the following path as; the double
    star (**) is a wildcard so that when the user provides any incorrect URL, the
    router navigates to the page not found component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We inject routes for the app module in Angular `RouterModule`; the complete `app.routing.ts` as
    of now is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we integrate the app routing module in our main app module. We add `AppRouting`
    in the import tag as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'When the user is not logged in, the navigation bar will show the About and
    Login tabs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00020.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'When the user is logged in, the navigation bar will show the My Profile, Friends, and About tabs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00021.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Creating a routing module for authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As discussed earlier, we will build the individual routes for each feature
    module. We have two components in authentication:'
  prefs: []
  type: TYPE_NORMAL
- en: Login Component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Signup Component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In order to define the routing module, we will need to create routes constant
    for navigation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Since these routes are child components of the main app component, we inject
    the routes into the child router module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the complete `authentication.routing.ts` as of now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: After creating the routing module, we include the `AuthenticationRouting` module
    in the main authentication module; this makes our authentication module independent
    of the main app module.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a sample `authentication.module.ts`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Exploring more routing techniques
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will explore two navigation methods in our application:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Static Routing**: In static routing, we will provide the navigation in the
    HTML template. Angular router provides a directive to perform the navigation action.
    We will include the `routerLink` directive with we inject the routes into the
    child router module: path for navigation. As seen in the following code, when
    you click on the `SIGNUP` button, the Angular framework navigates to the signup
    component using `Router`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '**Dynamic Routing**: In dynamic routing, we use the `Router` component of the
    Angular framework. The instance is injected using dependency injection in the
    constructor:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Router provides the `navigateByUrl()` method to route to different components;
    in the following scenario, after successful login, we navigate to the user profile
    page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Now we have added navigation to our application; thus, in the next section we
    add conditional-based navigation guards.
  prefs: []
  type: TYPE_NORMAL
- en: Adding authentication guards
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Guard are a really useful feature in Angular for protecting routes. They provide
    the security feature used to restrict resources in our application so that the
    user is not able to consume a resource without proper permission.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are different guard types in Angular:'
  prefs: []
  type: TYPE_NORMAL
- en: '`CanActivate`: This is used to decide whether the route can be activated'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CanActivateChild`: This is used to decide whether the child route can be activated'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CanDeactivate`: This is used to decide whether the route can be deactivated'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CanLoad`: This is used to decide whether the module can be loaded lazily'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We will take a look at an example of the `CanActivate` guard in authentication.
    We will allow the user to access the user profile and friends pages only after
    their authentication is successful. This means that the user will not be allowed
    to access `http://localhost:4200/app-friends-userprofile` without authentication
    and will be redirected to the login page. The steps involved in activating the
    guard are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Guard condition**: We need to provide conditions for activating the guard.
    In this scenario, we are checking the current user status. This condition was
    also used in the app component to show various tabs based on the condition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the complete `authentication.service.ts` as of now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '**Guard implementation**: We implement the guard by extending the `CanActivate` interface
    and overriding the `canActivate` method. In this method, we navigate to the login
    page when the user authentication is not valid and this helps route to the login page
    based on the guard condition.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here''s the complete `authentication.guard.ts` as of now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '**Adding a guard to the user module**: This guard is added in the user module.
    The user module is covered in the next chapter in more detail. Here, we configure
    a guard in the user routing module to restrict the user to accessing the user
    profile and friends pages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '**Adding a guard to protect the component**: As shown in the following code,
    we can add this guard to any component that requires this condition check. We add
    the guard to the user profile and user friend list component. This means that
    these pages are protected from illegal access.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here is the complete `user-routing.module.ts`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '**Testing the guard**: You can test this guard by pasting the user profile
    URL (`http://localhost:4200/app-friends-userprofile`) into the browser, and the
    user is redirected to the login page for authentication.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Firebase session lifecycle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Firebase persists the user state, hence the user is always logged in even if
    they refresh or restart the page again, and the page is redirected to the main
    page instead of the login page. We will cover two navigation scenarios for a Firebase
    session life cycle:'
  prefs: []
  type: TYPE_NORMAL
- en: '**User token exists**: In this scenario, the user token is still valid and
    the user is redirected to the user profile page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AngularFireAuth.auth` provides the `onAuthStateChanged` method to know user
    state information. We subscribe to this method, check for our user, and redirect
    them to the profile page.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s is a sample of `login.component.ts`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '**User token expires**: In this scenario, the user token expires and the user
    is redirected to the login page. Normally, the user token expires on the following
    conditions:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**User clears browsing history**: The user token can expire by clearing the
    browser history. This will clear the token and the user is redirected to the login
    page.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**User changes the password**: When a user changes the password, the user token
    expires and they are directed to the login page. This scenario is covered in the
    next chapter.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**User sign out**: When a user signs out, the user token expires and they are
    directed to the login page. We will cover this scenario in this section.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: We have implemented the sign-out functionality in the user profile page. The
    user profile component is covered in more detail in the next chapter. In this
    section, we will add only a sign-out feature.
  prefs: []
  type: TYPE_NORMAL
- en: We create a button in the user profile template. When the user clicks on the LOGOUT
    button, the user session is cleared and the users are redirected to the login page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s is sample `user-profile.component.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: When the user clicks on the LOGOUT button, then `onLogout()` method of `UserProfileComponent` is
    called and we call `signout`() in the authentication service.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the sample `user-profile.component.ts` as of now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The authentication service has a sign-out functionality in `authentication.service.ts`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Our project structure as of now
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We thus come to the end of our first authentication module. Our authentication
    module will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00022.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about navigation between page views. We enabled
    navigation in the base module. We used the router link directive to create our
    main navigation bar. We saw how to access component variables in the template
    and enabled navigation items based on the condition. We built our first guard
    to restrict our user to navigating to our user profile page so that only authenticated
    users are allowed to view the page. Finally, we covered the Firebase session life
    cycle and implemented navigation based on a user token. Finally, we explored the
    project structure for the authentication module.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will build more complex modules and explore more features
    of Firebase and Angular.
  prefs: []
  type: TYPE_NORMAL
