- en: '7'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Different Approaches to Apply CSS in ReactJS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating aesthetically beautiful and user-friendly interfaces is critical in
    modern web development for establishing engaging and effective applications. ReactJS
    is a popular frontend framework for creating user interfaces and has a number
    of methods for implementing **Cascading Style Sheets** (**CSS**), the language
    responsible for styling online content. This chapter attempts to answer many important
    questions on the topic of CSS that an interviewee might have. By explaining the
    various approaches for incorporating CSS in ReactJS, we will be able to benefit
    from an expanded knowledge set that puts us in a much better position when tackling
    interview questions on this subject.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will look at five different methods for implementing CSS: `CSS Modules`,
    `styled-components`, and **Atomic CSS** (with the Tailwind CSS framework). Each
    of these solutions has advantages and disadvantages, depending on the project
    objectives and preferences. By investigating these options, you will get the knowledge
    and confidence to navigate these questions in an interview environment, which
    will be particularly useful when the time comes for you to create a ReactJS application.
    By learning about the principles of writing and maintaining clean, manageable,
    and scalable code, you will find it much simpler to come up with good-quality
    answers in your interviews.'
  prefs: []
  type: TYPE_NORMAL
- en: Preprocessors such as Sass and Less will also get an introduction in this chapter,
    as we aim to cover all of the relevant use cases for implementing CSS into our
    React projects and have the right answers to any interview questions in these
    areas.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will learn about and go into detail on these important
    CSS-related topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Different ways to apply CSS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring processors and CSS Modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CSS-in-JS approach and `styled-components` and its usage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use styled components in React applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Make sure that you have `Node` and `npm` installed on your computer and that
    the JavaScript Node packages for Create React App and Next.js are installed and
    working. Use your favorite IDE and **command-line interface** (**CLI**) to work
    on these projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'The package for Create React App can be found here: [https://create-react-app.dev/](https://create-react-app.dev/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The package for Next.js can be found here: [https://nextjs.org/](https://nextjs.org/).'
  prefs: []
  type: TYPE_NORMAL
- en: Different ways to apply CSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will be exploring different ways to apply CSS inside React
    projects. The knowledge gained will provide us with crucial interview-ready answers
    to these common questions, and the examples can aid us in explaining in detail
    the differences and how they work. Let’s continue with our learning and take a
    closer look at these CSS solutions.
  prefs: []
  type: TYPE_NORMAL
- en: While ReactJS is a JavaScript library for creating user interfaces, CSS is a
    style sheet language used to describe the appearance and formatting of an HTML
    or XML document. Incorporating CSS with ReactJS helps developers to efficiently
    style their components, resulting in aesthetically pleasing and consistent interfaces.
    There are a few ways to use CSS with ReactJS, which we are going to learn about
    in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: In the upcoming sections, we will learn about importing CSS, CSS Modules, CSS
    preprocessors, Atomic CSS, and inline styling. The latter involves adding styles
    directly to React components using JavaScript objects. While inline styles are
    useful for small components or dynamic styles, they can cause code duplication
    and maintainability problems in bigger applications, which we will talk about.
    First, let us begin with importing style sheets.
  prefs: []
  type: TYPE_NORMAL
- en: How do we import external style sheets?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The standard technique of utilizing CSS in React involves creating separate
    CSS files and styling components with class names. This solution keeps style and
    logic concerns separate, making the code more structured and manageable. The official
    React documentation recommends that developers use production-grade React frameworks
    when starting new React projects. This includes Next.js, Remix, Gatsby, and Expo
    (for native apps). This is now considered the most modern way of developing React
    applications, which you can read about here: [https://react.dev/learn/start-a-new-react-project](https://react.dev/learn/start-a-new-react-project).'
  prefs: []
  type: TYPE_NORMAL
- en: We will take a look at two code examples, one with Next.js and another with
    Create React App, to show the contrast between the two (old versus new) processes
    of building React apps. Next.js is considered to be the most modern recommended
    way for building ReactJS applications, whereas Create React App is now seen as
    a legacy tool. This is because Next.js is seen as a more production-grade ready
    ReactJS framework.
  prefs: []
  type: TYPE_NORMAL
- en: How do we use Create React App to build React apps?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Here’s how to implement the traditional method in a React application using
    Create React App.
  prefs: []
  type: TYPE_NORMAL
- en: 'Firstly, create a React project and then create a CSS file. Use CSS rules and
    class names to specify your styles in a separate CSS file called `App.css`, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, import the created CSS file into your React component file, which should
    be `App.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The `className` attribute is used in JSX elements to apply the corresponding
    CSS classes from the imported style sheet. We are using the `className` attribute
    instead of `class` because a class is a reserved word in JavaScript. This is not
    a problem when writing CSS in CSS files, but it is in JavaScript files. Also,
    JSX is a nomenclature, which means that it requires element properties such as
    class names to use the camelCase naming convention.
  prefs: []
  type: TYPE_NORMAL
- en: Initiate the `npm run start` command in your console, and your application should
    be up and running.
  prefs: []
  type: TYPE_NORMAL
- en: How do we use Next.js to build React apps?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Next.js is a well-known open source web development framework built on ReactJS.
    It is intended to make it easier for developers to create server-rendered React
    apps, allowing them to create high-performance web applications that are optimized
    for **search engine optimization** (**SEO**) and give a fantastic user experience.
  prefs: []
  type: TYPE_NORMAL
- en: Next.js has a slightly different project structure, although importing CSS style
    sheets still works the same way. Fortunately, the process is actually quite similar
    when using the latest App Router feature in Next.js. This is how we would import
    a CSS style sheet in Next.js.
  prefs: []
  type: TYPE_NORMAL
- en: 'Firstly, use Next.js to create a React project and then create a `Home.css`
    file inside of the `app` folder. Use the CSS shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, just replace all of the code inside of the `page.js` file in the `app`
    folder with this code here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Run your application using the `npm run dev` command, and it should work just
    as before.
  prefs: []
  type: TYPE_NORMAL
- en: This has been the default method for importing our style sheets since the days
    of Create React App. It does not, however, enable component-level isolation, and
    global class names might cause naming conflicts and unwanted style overrides.
    CSS Modules and CSS-in-JS frameworks, for example, solve these concerns and provide
    more extensive tools for decorating React components. Some popular CSS frameworks
    include Tailwind CSS, MUI, Chakra UI, Semantic UI, NextUI, React Bootstrap, Ant
    Design, and Emotion. Tailwind CSS is actually an option that you can select when
    configuring your Next.js application for the first time.
  prefs: []
  type: TYPE_NORMAL
- en: It’s also worth mentioning that in the CSS web layout model, the two most popular
    ways to build the structure of a website are by using either Flexbox or CSS Grid.
    Flexbox is by far more popular, although it is common to use either one or both
    together depending on the website design and complexity. We can use these web
    layout models on their own or with a CSS framework. Another area that we might
    want to look into at some point is animation. Aside from using the usual CSS libraries
    for creating animations, we can utilize various third-party libraries as well.
    Some popular libraries are React Spring, Green Sock, Framer Motion, React Move,
    and many others.
  prefs: []
  type: TYPE_NORMAL
- en: We will now talk about another method of styling our ReactJS apps, called inline
    styling, which is a common way to do styling in normal HTML and ReactJS applications.
    It has been one of the default ways of styling HTML for quite some time and is
    possible in React using JSX, too.
  prefs: []
  type: TYPE_NORMAL
- en: Inline styling provides many advantages too, which makes it a very appealing
    option for styling our React applications. We are able to use dynamic styling
    according to component state or props, and there is component isolation, which
    lowers the possibility of unintended style overrides or incompatibilities with
    other components. The faster development, ease of use, and the fact that we don’t
    even need CSS class names all increase the benefits of using this method.
  prefs: []
  type: TYPE_NORMAL
- en: How do we use inline styles?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Inline styles in ReactJS applications allow developers to apply styling to
    specific elements or components directly using JavaScript objects, rather than
    specifying CSS styles in separate style sheets or classes. They are specified
    as object literals that include key-value pairs. Basically, they are objects inside
    JSX curly brackets that look like this `{{ backgroundColor: blue }}`. Inside the
    JSX curlies is where we would then use CSS properties and their values. The object’s
    keys are the CSS property names, and the values are the associated property values.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s take a look at an example so that we can see what this looks like in
    real code. Just replace all of the code in the `page.js` file to convert it to
    an application that now uses inline styles instead of external style sheets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: When we need to apply dynamic styles based on the state or properties of a component,
    React inline styles might be helpful. For example, based on user interactions
    or other events, we might declare a style object as a property of the component’s
    state and change it dynamically.
  prefs: []
  type: TYPE_NORMAL
- en: 'It’s possible to use a variable with our inline styles as well by assigning
    it to state, and this is what it would look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Nevertheless, inline styles have certain drawbacks, including the inability
    to reuse styles across components, the fact that they are less effective than
    external style sheets for large-scale systems, and the possibility of affecting
    readability if not utilized carefully.
  prefs: []
  type: TYPE_NORMAL
- en: One way to address these problems is by using CSS Modules. CSS Modules is an
    approach for writing modular, scoped CSS for your components. It aids in the resolution
    of typical CSS difficulties such as global scope and name conflicts.
  prefs: []
  type: TYPE_NORMAL
- en: Another good strategy for implementing CSS in React is using `styled-components`.
    `styled-components` is a well-known CSS-in-JS package used to style React components.
    It enables you to use tagged template literals to write CSS right in your JavaScript
    code. `styled-components` produces unique class names and injects styles into
    the DOM, scoping them to the individual components. This method improves the developer
    experience and component separation.
  prefs: []
  type: TYPE_NORMAL
- en: Another way we can use CSS in our projects is by using Atomic CSS. Atomic CSS,
    also known as functional CSS, is a style technique that focuses on developing
    tiny, single-purpose CSS classes that are combined to create sophisticated user
    interface components. Each class provides one type of rule or a group of rules
    that are closely linked, and they are generally labeled in a format that defines
    their purpose or the attributes that they apply.
  prefs: []
  type: TYPE_NORMAL
- en: The advantage here is that development is fast because by simply mixing existing
    atomic classes, you can quickly prototype and construct components. A general
    theme or template is followed so that every developer uses the same documentation
    and set of classes. This makes for very simple debugging, and the onboarding process
    is fast because everyone is using the same process.
  prefs: []
  type: TYPE_NORMAL
- en: How do we use Atomic CSS?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Atomic CSS is a strategy for structuring and developing CSS code that emphasizes
    the usage of brief, specialized classes that could be combined to produce sophisticated
    styling. The goal is to deconstruct designs into manageable, reusable parts capable
    of being merged in a variety of ways to produce the desired design.
  prefs: []
  type: TYPE_NORMAL
- en: The Atomic CSS technique is implemented by a number of well-known CSS libraries,
    including Tailwind CSS, Bootstrap CSS, and Bulma, among many others. These libraries
    offer pre-defined collections of atomic classes that can be used to quickly generate
    complicated styling. We will now use the Tailwind CSS library to do some basic
    styling in our Next.js app because of its popularity in the community and the
    fact that Tailwind CSS is integrated into Create Next App, which is the official
    framework for building Next.js applications. It’s possible to use any CSS library
    when you understand the fundamentals.
  prefs: []
  type: TYPE_NORMAL
- en: 'Installing Tailwind CSS is fairly easy; all you have to do is follow the setup
    guide here: [https://tailwindcss.com/docs/guides/nextjs](https://tailwindcss.com/docs/guides/nextjs).'
  prefs: []
  type: TYPE_NORMAL
- en: 'With that completed, we can see what the syntax looks like in this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Next, let us learn about preprocessors and CSS Modules. A CSS preprocessor is
    a program that allows us to build CSS using the preprocessor’s own syntax. In
    a CSS module, every single class name and animation name is now, by definition,
    assigned locally. For greater efficiency and security, CSS Modules allow you to
    create styles in CSS files; however, you need to utilize the styles as JavaScript
    objects.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring processors and CSS Modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can build websites with CSS in two distinct ways—by using CSS processors
    and CSS Modules. CSS processors have been around for quite a long time and were
    designed to be an improvement over traditional CSS. They gave us access to nesting
    our CSS code and the code compiled to regular CSS. CSS Modules, on the other hand,
    give us scoped CSS code in our files, which is better for avoiding name conflicts.
    Let’s now learn about them both, starting with CSS processors.
  prefs: []
  type: TYPE_NORMAL
- en: What are CSS processors?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: CSS processors, commonly referred to as CSS preprocessors, are tools that add
    extra features to CSS, such as variables, mixins, and nesting rules. They enable
    you to write in less repetitive and modular ways that are easier to maintain.
    Sass, also known as SCSS, Less, and Stylus are the three CSS preprocessors that
    are most widely used. To translate the improved CSS syntax into conventional CSS
    that web browsers can understand, these preprocessors need a build step. When
    using build tools such as Webpack, you can incorporate this build phase into your
    development routine.
  prefs: []
  type: TYPE_NORMAL
- en: How do we use CSS processors?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Sass is supported in Next.js natively, utilizing both the `.scss` and `.sass`
    extensions. Through CSS Modules and the `.module.scss` or `.module.sass` extension,
    you can apply component-level Sass. Firstly, install Sass using the `npm install
    –save-dev sass` command. Then, write your styles in Sass syntax in a new `.scss`
    file. Import the generated CSS by referencing the `.scss` file in your React component
    file, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Importing a `.scss` file is exactly the same as importing a normal `.``css`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: What are CSS Modules?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A method for locally scoping CSS in a modular approach is CSS Modules. By automatically
    creating distinct names of classes for each component, it helps prevent conflicts
    between global styles by making sure that styles don’t spread to other areas of
    your program. Writing your CSS styles in distinct files, often with the `module.css`
    extension, and importing them into your JavaScript files is how CSS Modules work.
    The imported styles are handled as an object, having the produced unique class
    names serving as value pairs and the keys serving as the primary class names.
  prefs: []
  type: TYPE_NORMAL
- en: How do we use CSS Modules?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can utilize locally scoped CSS in our components by using CSS Modules. Class
    names are by default locally scoped using CSS Modules, preventing any naming conflicts.
    This is also the default styling method used in Next.js applications. We can see
    what this looks like in the following code snippets.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the CSS for the `Home.module.css` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'And this is the JavaScript for the `page.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, it is similar to using inline styles; however, we still have
    an external style sheet, so it is the best of both worlds. There is another approach
    to implementing CSS, which is by using `styled-components` and a CSS-in-JS approach.
    This gives us another way to set up our project and can offer many advantages
    when compared with other approaches. Let’s learn more about this implementation
    now.
  prefs: []
  type: TYPE_NORMAL
- en: CSS-in-JS approach and styled-components and its usage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is a fundamental learning area for us as the CSS-in-JS methodology applies
    throughout the React framework. We will learn about the approach and how it’s
    possible for us to use a third-party library such as `styled-components` as an
    alternative to the other CSS techniques we learned earlier.
  prefs: []
  type: TYPE_NORMAL
- en: What is CSS-in-JS?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: CSS-in-JS is an innovative web development style solution that incorporates
    CSS into JavaScript code. Instead of having separate CSS files, this method allows
    developers to define and oversee styles for their components right inside their
    JavaScript or TypeScript scripts. CSS-in-JS allows for improved component encapsulation,
    scoped styles, and simpler dynamic styling. It also enables you to use the entirety
    of JavaScript in your styles, which includes dynamically applying styles according
    to the state of the component or computing style values using JavaScript variables.
  prefs: []
  type: TYPE_NORMAL
- en: What are styled-components and how are they used in React projects?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With the help of a popular third-party tool for React, called `styled-components`,
    programmers can specify component styles in JavaScript rather than external CSS
    files. It offers a method for crafting CSS code that is focused on a particular
    component, simplifying the management and reusing styles throughout an application.
  prefs: []
  type: TYPE_NORMAL
- en: Styled components adopt a CSS-in-JS methodology, which implies that JavaScript
    functions and variables are used to define CSS styles for component styles. This
    enables programmers to create dynamic styles by utilizing all of JavaScript’s
    capabilities, such as functions, variables, and other language constructs. When
    using `styled-components`, we have **server-side rendering** (**SSR**), which
    guarantees that our styles are rendered appropriately on the server. In comparison
    to other CSS such as inline styles, it has an advantage because it does not need
    extra effort to ensure good SSR support. The developer experience is additionally
    improved since styled components include syntax highlighting, linting, and auto-completion
    support in most code editors.
  prefs: []
  type: TYPE_NORMAL
- en: This results in a more positive development experience and increased productivity
    because they also enable you to segregate styles from the JSX of the component,
    resulting in cleaner and more maintainable code. We can also use styled components
    to produce unique class names for each component, ensuring that styles are scoped
    to the appropriate components and avoiding inadvertent style leaks or conflicts.
  prefs: []
  type: TYPE_NORMAL
- en: Another bonus we get access to is built-in theming support via React’s context
    API when we use `styled-components`. This makes it simple to build and manage
    uniform themes across our application, which is not possible with other CSS techniques.
    It’s a great plus to have support for all CSS features, such as pseudo-selectors,
    media queries, and keyframes.
  prefs: []
  type: TYPE_NORMAL
- en: How to use styled components in React applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To reinforce this learning, let us go through an example to see what the syntax
    looks like. We will take a quick look at a simple, easy-to-understand, basic setup
    that should make this very clear.
  prefs: []
  type: TYPE_NORMAL
- en: How do we use styled components?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Basically, a styled component can be created in four easy steps. Firstly, we
    have to install the package for the `styled-components` library, which can be
    found here: [https://styled-components.com/](https://styled-components.com/).
    Next, we import the package into the top of our file. Following that, we create
    a JavaScript-type object for our HTML, which has CSS styling. We use the `styled`
    method followed by the HTML element we want to use, such as a `div`, `section`,
    or `p` tag, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: 'And lastly, we render the object on the screen by returning it in our code.
    The following code snippet shows a working example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: We successfully concluded this section and learned about many different CSS-related
    interview questions, which is going to put us in a great position to do well in
    interviews when it comes to this subject area.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We looked at several ways to utilize CSS in ReactJS apps, emphasizing the significance
    of design and styling in creating aesthetically appealing user interfaces. Importing
    external style sheets, inline CSS styles, CSS Modules, `styled-components`, and
    Atomic CSS frameworks such as Tailwind CSS were the five primary options explored.
  prefs: []
  type: TYPE_NORMAL
- en: We discussed how to connect and import external CSS files into a React component,
    allowing for centralized administration and separation of stylistic and component
    logic concerns. This method is perfect for using classic CSS in React apps.
  prefs: []
  type: TYPE_NORMAL
- en: We also looked into Atomic CSS and its utility-first approach, focusing specifically
    on the popular Tailwind CSS framework. By offering a broad collection of utility
    classes that can be used to build bespoke designs, this technique reduces the
    requirement for custom CSS.
  prefs: []
  type: TYPE_NORMAL
- en: On the subject of CSS Modules, we looked at how CSS Modules can help handle
    component-specific styles in a modular fashion. CSS Modules eliminate global style
    conflicts and encourage component reusability by utilizing locally scoped class
    names. We also discussed the popular `styled-components` package, which allows
    you to create styled components using tagged template literals. This method encourages
    component encapsulation, theming support, and a prop-based dynamic style.
  prefs: []
  type: TYPE_NORMAL
- en: You will easily design and style your application components while keeping clean,
    manageable, and scalable code bases by knowing and utilizing these various CSS
    methods in your ReactJS applications.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn how to test and debug our ReactJS applications.
  prefs: []
  type: TYPE_NORMAL
