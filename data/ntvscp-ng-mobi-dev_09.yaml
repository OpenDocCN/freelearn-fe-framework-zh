- en: Empowering Your Views
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 赋能你的视图
- en: The combination of Angular and NativeScript is fun to develop with and powerful
    beyond measure for mobile development. Whether you need to provide services to
    engage with a mobile device's hardware capabilities, such as audio recording or
    enrich your app's usability with engaging views, NativeScript for Angular provides
    exciting opportunities.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Angular和NativeScript的结合在开发中非常有趣，对于移动开发来说功能强大得无法估量。无论你需要提供服务来与移动设备的硬件功能交互，例如音频录制，还是通过引人入胜的视图来丰富你的应用可用性，NativeScript
    for Angular都提供了令人兴奋的机会。
- en: Let's continue with several concepts we developed in the preceding chapter to
    provide an alternate rich view of our tracks while reusing everything we've covered
    so far, in addition to a few new tips/tricks.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续使用在前一章中开发的一些概念，以提供我们轨道的另一种丰富视图，同时重用我们迄今为止所涵盖的一切，以及一些新的技巧/技巧。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Using multiple item row templates with `ListView` and `templateSelector`
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`ListView`和`templateSelector`的多个项行模板
- en: Handling row template changes with `ListView` and when/how to refresh them
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`ListView`处理行模板更改以及何时如何刷新它们
- en: Using `ngModel` data binding via `NativeScriptFormsModule`
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过`NativeScriptFormsModule`使用`ngModel`数据绑定
- en: Leveraging a shared singleton service for sharing state across multiple modules
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用共享的单例服务在多个模块之间共享状态
- en: Serializing data before storing and hydrating upon retrieval from a persisted
    state
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在存储前序列化数据，并在从持久状态检索后进行恢复
- en: Leveraging and reusing Angular directives to enrich the NativeScript Slider
    with more unique characteristics
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用和重用Angular指令来丰富NativeScript Slider，使其具有更多独特的特性
- en: Multiple item templates with NativeScript's ListView
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用NativeScript的ListView的多个项模板
- en: All throughout [Chapter 8](part0101.html#30A8Q0-289fe2426d594f99a90e4363b2c9c34d),
    *Building an audio recorder*, we designed a dual-purpose custom NativeScript Waveform
    view, which taps into various native libraries for iOS and Android, specifically
    to enrich our composition's track listing view. Let's proceed by reusing our versatile
    Waveform view for our track listing view. This will also give us a way to display
    mixing slider controls (often referred to in audio production and sound engineering
    as a Fader) alongside our tracks to allow the user to mix each track's volume
    level in the overall composition. Let's set up our `ListView` of `TrackListComponent` with
    the ability to provide the user with two different ways to view and work with
    their tracks, each with their own unique utility. While we're at it, we'll also
    take this opportunity to finally wire up the `mute` switch on our tracks.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第8章](part0101.html#30A8Q0-289fe2426d594f99a90e4363b2c9c34d)“构建音频录制器”中，我们设计了一个双用途的定制NativeScript
    Waveform视图，它利用iOS和Android的各种本地库，专门用于丰富我们的作品列表视图。让我们通过重用我们的多才多艺的Waveform视图来处理我们的作品列表视图。这将为我们提供一种方法来显示混音滑动控制（通常在音频制作和声音工程中称为Fader），与我们的轨道一起显示，使用户能够在整体作品中调整每个轨道的音量级别。让我们设置我们的`TrackListComponent`的`ListView`，使其能够为用户提供两种不同的方式来查看和处理他们的轨道，每种方式都有其独特的效用。在此同时，我们还将利用这个机会最终连接我们轨道上的`静音`开关。
- en: 'Let''s make the following modifications to `app/modules/player/components/track-list/track-list.component.html`:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们对`app/modules/player/components/track-list/track-list.component.html`进行以下修改：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'There''s a lot of interesting things happening here. First of all, `[itemTemplateSelector]="templateSelector"`
    provides the ability to change our `ListView` item rows on the fly. The result
    of the `templateSelector` function should be a string, which matches the value
    provided on any ng-template''s `ngTemplateKey` attribute. To make all this work,
    we will need several things in place, starting with the `Component` that has access
    to the `ListView` via `#listview` and `ViewChild`:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这里发生了很多有趣的事情。首先，`[itemTemplateSelector]="templateSelector"`提供了在飞行中更改我们的`ListView`项行的能力。`templateSelector`函数的结果应该是一个字符串，它与任何ng-template的`ngTemplateKey`属性提供的值相匹配。为了使所有这些工作，我们需要准备一些事情，首先是具有通过`#listview`和`ViewChild`访问`ListView`的`Component`：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We set up a `ViewChild` to retain a reference to our `ListView` which we will
    use later to call `this._listview.refresh()` . This is required in Angular when
    we need the `ListView` to update the display after changes. The first surprise
    will likely be the injection of `PlayerService`, and the second might be the `this.templateSelector
    = this._templateSelector.bind(this)`. The `templateSelector` binding is not scope
    bound, and since we need it to return a property reference from our `this.playerService`
    on the `Component`, we ensure that it is properly bound to the scope of the `Component` by
    binding a `Function` reference. We will use `PlayerService` as a conduit at this
    point to help communicate the state from the `ActionBarComponent` that lives in
    the `MixerModule`.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们设置了一个`ViewChild`来保留对`ListView`的引用，稍后我们将使用它来调用`this._listview.refresh()`。在Angular中，当我们需要`ListView`在更改后更新显示时，这是必需的。第一个惊喜很可能是`PlayerService`的注入，第二个可能是`this.templateSelector
    = this._templateSelector.bind(this)`。`templateSelector`绑定不是作用域绑定的，并且由于我们需要它从`Component`上的`this.playerService`返回属性引用，我们通过绑定一个`Function`引用来确保它正确地绑定到`Component`的作用域。我们将在这个点上使用`PlayerService`作为沟通的渠道，以帮助从位于`MixerModule`中的`ActionBarComponent`传递状态。
- en: This example shows how services can help communicate the state throughout your
    app. However, this practice can be greatly improved by utilizing `ngrx` to help
    lessen interwoven dependencies and unlock a purely reactive setup with Redux-style
    architecture. @ngrx enhancements will be covered in [Chapter 10](part0121.html#3JCK20-289fe2426d594f99a90e4363b2c9c34d),
    *@ngrx/store + @ngrx/effects for State Management*.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子展示了服务如何帮助在整个应用中传递状态。然而，通过利用ngrx来减少交织的依赖关系并解锁具有Redux风格架构的纯响应式设置，这种做法可以得到极大的改进。ngrx增强功能将在第10章中介绍，即`@ngrx/store
    + @ngrx/effects for State Management`。
- en: 'Our View Toggle button will be in the `ActionBar` (in the `MixerModule`), and
    we will want to tap there to switch our `ListView`, which lives inside our `PlayerModule`.
    The `PlayerService` is a singleton at the moment (provided by `CoreModule`) and
    is shared across the entire app, so it''s a perfect candidate to aid here. Let''s
    take a look at our `ActionBarComponent` changes first in `app/modules/mixer/components/action-bar/action-bar.component.ios.html`:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的视图切换按钮将位于`ActionBar`（在`MixerModule`中），并且我们希望在那里点击以切换我们位于`PlayerModule`内部的`ListView`。`PlayerService`目前是一个单例（由`CoreModule`提供），并在整个应用中共享，因此它是一个完美的候选者来协助这里。让我们首先查看`app/modules/mixer/components/action-bar/action-bar.component.ios.html`中的`ActionBarComponent`更改：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Then, we''ll take a look at the changes in `app/modules/mixer/components/action-bar/action-bar.component.android.html`:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将查看`app/modules/mixer/components/action-bar/action-bar.component.android.html`中的更改：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We''ll also take a look at the changes in the `Component`:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将查看`Component`中的更改：
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'As you can see, we added a button to the `ActionBar`, which will use the label
    `Waveform` or `Default`, depending on its state. Then, we used `PlayerService`
    to modify a new setter, `**this.playerService.trackListViewType** **=** **type**`.
    Let''s take a look at `app/modules/player/services/player.service.ts` now:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们在`ActionBar`中添加了一个按钮，它将使用`Waveform`或`Default`标签，具体取决于其状态。然后，我们使用`PlayerService`修改了一个新的设置器`**this.playerService.trackListViewType**
    **=** **type**`。现在让我们查看`app/modules/player/services/player.service.ts`：
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This gets the job done**.**
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这就完成了这项工作**。**
- en: As mentioned, we will improve this setup in the next chapter with ngrx, which
    is all about polishing and simplifying the way we handle our app's state.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们将在下一章中使用ngrx改进这个设置，ngrx全部关于润色和简化我们处理应用状态的方式。
- en: There are a couple more things that we will need to do to ensure that all our
    new additions work. For starters, the `[(ngModel)]` bindings will *not* work at
    all without the `NativeScriptFormsModule`.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保所有我们的新功能都能正常工作，我们还需要做一些其他事情。首先，没有`NativeScriptFormsModule`，`[(ngModel)]`绑定将完全不起作用。
- en: If you use the `ngModel` bindings in your component's view, you must ensure
    that the module that declares your `Component` imports the `NativeScriptFormsModule`.
    If it uses a `SharedModule`, ensure that the `SharedModule` imports and exports
    the `NativeScriptFormsModule`.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在你的组件视图中使用`ngModel`绑定，你必须确保声明你的`Component`的模块导入了`NativeScriptFormsModule`。如果它使用`SharedModule`，确保`SharedModule`导入了并导出了`NativeScriptFormsModule`。
- en: 'Let''s add the module mentioned in the preceding tip to our `SharedModule`
    so that all of our modules can use `ngModel` wherever needed:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将前一条提示中提到的模块添加到我们的`SharedModule`中，这样我们的所有模块都可以在需要的地方使用`ngModel`：
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We will now need each track''s mute and volume property changes to notify our
    audio player. This involves changing our `TrackModel` slightly to account for
    this new functionality; to do that, open `app/modules/shared/models/track.model.ts`:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要每个轨道的静音和音量属性更改来通知我们的音频播放器。这涉及到稍微修改我们的 `TrackModel` 以适应这个新功能；为此，打开 `app/modules/shared/models/track.model.ts`：
- en: '[PRE7]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We now want to modify our `TrackPlayerModel` to work in tandem with these new
    features. Earlier, we used to retain just the `trackId`; however, with this new
    addition, it would be helpful to keep a reference to the entire `TrackModel` object,
    so open `app/modules/shared/models/track-player.model.ts` and make the following
    changes:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在想要修改我们的 `TrackPlayerModel` 以与这些新功能协同工作。之前，我们只保留 `trackId`；然而，随着这个新功能的加入，保留整个
    `TrackModel` 对象的引用将很有帮助，所以打开 `app/modules/shared/models/track-player.model.ts`
    并进行以下修改：
- en: '[PRE8]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Our audio player can now react to volume changes made via data binding from
    each track by observing the `volume$` subject observable. Since mute essentially
    just requires the modification of the player's volume, we ensure that we update
    the volume accordingly and maintain the original volume if toggling mute on/off,
    so any custom volume set will be retained.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的音乐播放器现在可以通过观察每个轨道通过数据绑定进行的音量更改来响应音量变化。由于静音本质上只需要修改播放器的音量，我们确保相应地更新音量，并在切换静音/取消静音时保持原始音量，这样任何自定义的音量设置都将被保留。
- en: Our new enriched view of our tracks includes our reusable Waveform view but
    this time with `type="file"`, since this will engage the audio file static Waveform
    to be rendered so that we can *see* our audio. We also provide the ability to
    adjust each track's volume (mixing control) and float a label off to the top-left
    corner so that the user still knows what is what. This is all done by utilizing
    an `AbsoluteLayout` container, which allows us to overlap components and manually
    position them on top of each other.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对轨道的新丰富视图包括可重用的波形视图，但这次是 `type="file"`，因为这将激活音频文件静态波形以渲染，这样我们就可以 *看到* 我们的音乐。我们还提供了调整每个轨道音量（混音控制）并将标签浮到左上角的能力，这样用户仍然知道是什么。所有这些操作都是通过利用
    `AbsoluteLayout` 容器来完成的，它允许我们重叠组件并手动将它们放置在彼此之上。
- en: Serializing data for persistence and hydrating it back upon retrieval
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 序列化数据以持久化并在检索时恢复
- en: This all works really nicely, however, we have introduced a problem. Our `MixerService`
    provides the ability to save these compositions with all their tracks. However
    the tracks now contain complex objects such as Observables and even private references
    with getters and setters.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些都工作得非常好，然而，我们引入了一个问题。我们的 `MixerService` 提供了保存这些包含所有轨道的合成的功能。然而，现在的轨道包含复杂对象，如可观察对象，甚至带有获取器和设置器的私有引用。
- en: When persisting data, you will often want to use `JSON.stringify` to serialize
    objects when storing them so that they can be retrieved later and hydrated into
    more complex models if needed.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在持久化数据时，你通常会想使用 `JSON.stringify` 序列化对象以便在存储时可以稍后检索并如果需要的话将其注入到更复杂的模型中。
- en: 'In fact, if you were to attempt to process our `TrackModel` with `JSON.stringify`
    now, it would fail because you cannot stringify certain structures. So, we now
    need a way to serialize our data before storing it, as well as a way to hydrate
    that data when retrieving to restore our more sophisticated models. Let''s make
    a few changes to our `MixerService` to account for this. Open `app/modules/mixer/services/mixer.service.ts`and
    make the following changes:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，如果你现在尝试使用 `JSON.stringify` 处理我们的 `TrackModel`，它将会失败，因为你不能将某些结构序列化为字符串。因此，我们现在需要在存储之前将我们的数据序列化，以及当检索数据时恢复我们的更复杂的模型。让我们对我们的
    `MixerService` 进行一些修改以解决这个问题。打开 `app/modules/mixer/services/mixer.service.ts`
    并进行以下修改：
- en: '[PRE9]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We will now ensure that any time our composition is saved, it's properly serialized
    into a safe and more simplified form, which can be processed by `JSON.stringify`.
    Then, when retrieving data out of our persistent store (in this case, via NativeScript's
    application-settings module being used under the hood of our `DatabaseService`;
    this is covered in [Chapter 2](part0037.html#1394Q0-289fe2426d594f99a90e4363b2c9c34d),
    *Feature Modules*, we hydrate the data back into our models, which will enrich
    the data with our observable properties.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将确保每次保存我们的合成时，它都正确地序列化为一个更安全、更简化的形式，这样就可以通过 `JSON.stringify` 处理。然后，当从我们的持久存储（在这种情况下，通过在
    `DatabaseService` 的底层使用 NativeScript 的应用程序设置模块；这将在 [第 2 章](part0037.html#1394Q0-289fe2426d594f99a90e4363b2c9c34d)，*功能模块*中介绍）检索数据时，我们将数据重新注入到我们的模型中，这将使用我们的可观察属性丰富数据。
- en: Leveraging Angular directives to enrich the NativeScript Slider with more unique
    characteristics
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用Angular指令丰富NativeScript滑块的独特特性
- en: 'For each track fader (also known as our mixing/volume control), it''d be nice
    to actually render a fader-looking control knob so that it''s clear that these
    Sliders are mixing knobs and are not mistaken for shuttling playback of that track,
    for instance. We can create a graphic to be used for these Sliders, which will
    look like this:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个轨道滑块（也称为我们的混音/音量控制），实际上渲染一个看起来像滑块的控件会很好，这样就可以清楚地知道这些滑块是混音旋钮，不会被误认为是该轨道的快进播放。我们可以创建一个用于这些滑块的图形，它看起来会是这样：
- en: '![](img/00042.jpeg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00042.jpeg)'
- en: 'For iOS, we will also want a down/highlighted state, so usability feels good
    when the user presses down on the fader:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 对于iOS，我们还需要一个按下/高亮状态，以便用户按下滑块时用户体验良好：
- en: '![](img/00043.jpeg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00043.jpeg)'
- en: 'We can now create two versions of each of these files and drop them in `app/App_Resources/iOS`;
    the original will be 100x48 for standard resolution, then for iPhone Plus and
    above, we will have a @3x version at 150x72 (basically, 24 plus the standard 48
    height):'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以为这些文件创建两个版本，并将它们放入`app/App_Resources/iOS`；原始版本将是100x48像素用于标准分辨率，而对于iPhone
    Plus及以上型号，我们将有一个@3x版本，大小为150x72像素（基本上是24像素加上标准的48像素高度）：
- en: '`fader-down.png`'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fader-down.png`'
- en: '`fader-down@3x.png`'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fader-down@3x.png`'
- en: '`fader.png`'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fader.png`'
- en: '`fader@3x.png`'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fader@3x.png`'
- en: We can now reuse our `SlimSliderDirective` (currently being used to customize
    the look of the shuttle slider) and provide an input so that we can provide the
    name of a file from our app's resources to use for the thumb.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以重用我们的`SlimSliderDirective`（目前用于自定义快进滑块的样式）并提供一个输入，以便我们可以提供从我们的应用程序资源中使用的文件名：
- en: 'Open `app/modules/player/directives/slider.directive.ios.ts` and make the following
    modifications:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`app/modules/player/directives/slider.directive.ios.ts`并做出以下修改：
- en: '[PRE10]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This allows us to specify the filename to be used as the `Slider` thumb on
    the component itself:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许我们指定要作为组件本身上的`Slider`滑块的文件名：
- en: '[PRE11]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'With this in place, we now have these neat fader controls for iOS when the
    track mixing view toggle is engaged:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在此基础上，我们现在在轨道混音视图切换激活时拥有了这些整洁的滑块控件：
- en: '![](img/00044.jpeg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00044.jpeg)'
- en: Graphic and resource handling for Android
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图形和资源处理（针对Android）
- en: 'Now, let''s handle this for Android as well. We start by taking our standard
    48 height fader graphic and copying it into app/App_Resources/Android/drawable-hdpi
    folder. We can then create appropriate resolutions of this graphic and copy into
    the various resolution dependent folders. The one thing to keep in mind with Android
    is it does ***not*** use the "@3x" suffix identifiers like iOS does so we just
    name all of these "fader.png". Here''s a view of our graphic in one of the resolution
    dependent (in this case **hdpi** which handles "high density" screen resolutions)
    folders:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们也处理Android版本。我们首先将标准的48像素高度的滑块图形复制到app/App_Resources/Android/drawable-hdpi文件夹中。然后我们可以创建这个图形的适当分辨率版本，并将它们复制到各个分辨率相关的文件夹中。在处理Android时，需要注意的一点是它**不**像iOS那样使用"@3x"后缀标识符，所以我们只是将这些文件命名为"fader.png"。以下是我们的图形在分辨率相关文件夹中的一个视图（在这种情况下是**hdpi**，它处理“高密度”屏幕分辨率）：
- en: '![](img/00045.jpeg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00045.jpeg)'
- en: 'We can now customize our Android slider directive with thumb image handling,
    open `app/modules/player/directives/slider.directive.android.ts`:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以自定义我们的Android滑块指令，包括滑块图像处理，打开`app/modules/player/directives/slider.directive.android.ts`：
- en: '[PRE12]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'One of the most unusual and perhaps surprising aspects of the Android implementation
    above is this:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 上述Android实现中最不寻常且可能令人惊讶的方面之一是这一点：
- en: '[PRE13]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Normally you can reuse and extend controls in NativeScript quite easily. However,
    this is one of those exception cases where the default NativeScript setter on
    the slider control is actually going to cause us problems **only on Android**.
    The default setter will attempt to set the color of the thumb to blue along with
    a method to blend it. When it sets this flag on the slider, any graphic shape
    we then set gets the shape set to all blue. So for our version of the slider class
    to handle a custom graphic we have to eliminate the default slider thumb color
    setter on the control. We take control of this by attaching a new "color" setter
    that does absolutely nothing. This way when the NativeScript framework tries to
    setup the default color while initializing or resetting the control, nothing will
    happen allowing us to completely control what happens. As a precaution at the
    end of the `_addThumbImg` method we also call `seekBar.getThumb().clearColorFilter();` for
    good measure to make sure any potential sets to the colorFilter are undone before
    we were able to silence the default color setter.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，在NativeScript中重用和扩展控件相当容易。然而，这是一个例外情况，其中默认的NativeScript滑块控件设置器实际上会在**Android**上给我们带来问题。默认设置器将尝试将滑块的拇指颜色设置为蓝色，并附带一个混合方法。当它将此标志设置为滑块时，我们设置的任何图形形状都会被设置为全蓝色。因此，为了使我们的滑块类能够处理自定义图形，我们必须消除控件上的默认滑块拇指颜色设置器。我们通过附加一个新的“color”设置器来控制这一点，该设置器实际上什么也不做。这样，当NativeScript框架在初始化或重置控件时尝试设置默认颜色时，什么也不会发生，这样我们就可以完全控制发生的事情。作为预防措施，在`_addThumbImg`方法结束时，我们还调用`seekBar.getThumb().clearColorFilter();`以确保在能够使默认颜色设置器沉默之前，任何潜在的颜色过滤器设置都被取消。
- en: 'Lastly we can customize the colors used in the audio waveform shown for each
    track when our track listing view is toggled to mixer mode. Since the waveform
    plugin for Android utilizes the color resources of the app, we can add the proper
    named attributes found in the plugin''s documentation in app/App_Resources/Android/values/colors.xml
    and the same colors should also be copied into app/App_Resources/Android/values-v21/colors.xml:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，当我们的曲目列表视图切换到混音模式时，我们可以自定义显示在每个轨道上的音频波形所使用的颜色。由于Android的波形插件使用应用程序的颜色资源，我们可以在app/App_Resources/Android/values/colors.xml中添加插件文档中找到的正确命名的属性，并且相同的颜色也应该复制到app/App_Resources/Android/values-v21/colors.xml中：
- en: '![](img/00046.jpeg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00046.jpeg)'
- en: 'This now gives us a custom style for Android''s file waveform display in mixing
    mode:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这现在为我们提供了在混音模式下Android文件波形显示的自定义样式：
- en: '![](img/00047.jpeg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00047.jpeg)'
- en: Summary
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We wanted to provide some extra goodies to go along with all the rich content
    you've been learning about throughout Part 3; we hope that you enjoyed it! Using
    multiple item row templates with `ListView` can be handy in many situations, but
    hopefully, this will give you the tools to know how to make it work for you and
    your app.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望提供一些额外的宝贝，与你在第3部分中学到的所有丰富内容一起使用；我们希望你喜欢！使用`ListView`的多个项目行模板在许多情况下都很有用，但希望这会给你提供工具，让你知道如何让它为你和你的应用程序工作。
- en: Special considerations with data persistence is an important factor to any engaging
    app, so we looked at serializing data before storing and hydrating the data when
    restoring it out of a persisted state.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 对于数据持久性，特殊考虑是任何引人入胜的应用程序的重要因素，因此我们研究了在存储之前序列化数据，并在从持久状态恢复数据时注水数据。
- en: Lastly, we looked at further enriching our view components with more Angular
    directive goodness. With Part 3 completed, we have now completed the core competency
    and feature set of our app for the book. However, we are far from done with the
    app. The development workflow and process presented in this book are the typical
    development cycle we bring to any app we build. We will cover improving our architecture
    and further polishing our app to prepare for a public release via Google Play
    and App Store in [Chapter 14](part0154.html#4IRMK0-289fe2426d594f99a90e4363b2c9c34d),
    *Deployment Preparation with webpack Bundling*.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们研究了进一步丰富我们的视图组件，添加更多的Angular指令优点。随着第3部分的完成，我们现在已经完成了为本书提供的应用程序的核心能力和功能集。然而，我们离完成应用程序还远着呢。本书中介绍的开发工作流程和过程是我们为任何我们构建的应用程序带来的典型开发周期。我们将在第14章[部署准备与webpack捆绑](part0154.html#4IRMK0-289fe2426d594f99a90e4363b2c9c34d)中介绍改进我们的架构和进一步打磨我们的应用程序，以准备通过Google
    Play和App Store进行公开发布。
- en: Let's now move on to improving the state handling of our app with `ngrx` integration
    in [Chapter 10](part0121.html#3JCK20-289fe2426d594f99a90e4363b2c9c34d), *@ngrx/store
    + @ngrx/effects for State Management*. It's worth mentioning that using a Redux style
    architecture is a decision better made *before* building out your app as we have
    done here. However, it's not necessarily critical nor is it mandatory, therefore,
    we wanted to build the app excluding it to show that the app fundamentally works
    just fine. Now, we will move on to working it in to show off the various advantages you
    can gain with it.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们继续前进，通过在[第10章](part0121.html#3JCK20-289fe2426d594f99a90e4363b2c9c34d)中使用`ngrx`集成来改进我们应用的状态处理，即使用`@ngrx/store
    + @ngrx/effects`进行状态管理。值得一提的是，使用类似Redux的架构是一个更好的决定，最好在构建应用之前就做出，正如我们在这里所做的那样。然而，这并不是必需的，也不是强制性的，因此，我们希望在不包含它的前提下构建应用，以展示该应用在本质上运行得很好。现在，我们将继续将其整合进来，以展示您可以通过它获得的各项优势。
