- en: Chapter 11. Using Tooltips
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章 使用工具提示
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '在本章中，我们将涵盖:'
- en: Changing the tooltip state
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改变工具提示状态
- en: Using custom markup in tooltips
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在工具提示中使用自定义标记
- en: Displaying mouse movement
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示鼠标移动
- en: Applying effects to the tooltip display
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对工具提示显示应用效果
- en: Tooltips for selected text
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选定文本的工具提示
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: In this chapter, we'll explore the various dimensions of the **tooltip** widget,
    used to provide contextual information to the user. The tooltip widget works well
    with existing code because by default, it uses standard HTML attributes for the
    text of the tooltip. Furthermore, it's easy to create tooltip instances for the
    entire user interface with one line of code.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨用于向用户提供上下文信息的**工具提示**小部件的各个方面。工具提示小部件与现有代码配合得很好，因为默认情况下，它使用标准的 HTML
    属性来设置工具提示的文本。此外，只需一行代码就可以为整个用户界面创建工具提示实例，非常容易。
- en: Going beyond the simple use cases, we'll look at the different types of content
    we can pass into the widget, and how the content can be generated dynamically.
    We'll also look at how the tooltip can aid the development process as a tool,
    and how developers can manipulate the available effects for showing and hiding
    the widget.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 超越简单用例，我们将研究我们可以传递到小部件中的不同类型的内容，以及如何动态生成内容。我们还将探讨工具提示如何作为工具来辅助开发过程，以及开发人员如何操纵可用的效果来显示和隐藏小部件。
- en: Changing the tooltip state
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 改变工具提示状态
- en: The visual display of the tooltip widget has a default state. That is, out of
    the box, the widget is nicely designed, using elements from the theme framework.
    We may want to change that, however, depending on the state of some resource in
    the application. For example, a button that is new to the user as a result of
    a change in permissions might want a tooltip state that stands out visually, relative
    to the other tooltips on the page. By the same token, if there is a broken resource,
    and the user hovers over one of its components, the tooltip displayed should take
    on an error state. Of course, when changing the state of the tooltip, we should
    keep in mind that the state should match the context and tone of the actual tooltip.
    For example, don't put an error state on a tooltip that reads "everything is good
    to go!". Let's look at a quick and easy entry point into tooltip customization.
    We'll use a standard tooltip option to pass the state CSS class in.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 工具提示小部件的视觉显示有一个默认状态。也就是说，默认情况下，该小部件经过精心设计，使用了主题框架中的元素。然而，我们可能会根据应用程序中某些资源的状态而进行更改。例如，由于权限更改而对用户新的按钮可能希望工具提示状态在页面上与其他工具提示有视觉上的差异。同样，如果存在损坏的资源，并且用户将鼠标悬停在其组件上，则显示的工具提示应处于错误状态。当然，当更改工具提示的状态时，我们应该记住状态应该与实际工具提示的上下文和语气相匹配。例如，不要在读取“一切都准备就绪！”的工具提示上放置错误状态。让我们看看自定义工具提示的一个快速而简单的入口点。我们将使用一个标准的工具提示选项来传递状态
    CSS 类。
- en: How to do it...
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: We'll use the following HTML for our tooltip widgets. What we have here are
    three buttons, each with their own states, and their own tooltip instances.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用以下 HTML 为我们的工具提示小部件。这里有三个按钮，每个按钮都有自己的状态和工具提示实例。
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, we''ll create the tooltip widgets for their respective buttons using
    the following JavaScript:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '接下来，我们将使用以下 JavaScript 为其各自的按钮创建工具提示小部件:'
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Hovering over each one of the buttons in the browser shows you the default,
    highlight, and error states as shown in the following images:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '在浏览器中悬停在每个按钮上会显示默认状态、高亮状态和错误状态，如下图所示:'
- en: The default state:![How to do it...](img/2186_11_01.jpg)
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认状态:![如何做...](img/2186_11_01.jpg)
- en: The highlight state:![How to do it...](img/2186_11_02.jpg)
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高亮状态:![如何做...](img/2186_11_02.jpg)
- en: The error state:![How to do it...](img/2186_11_03.jpg)
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误状态:![如何做...](img/2186_11_03.jpg)
- en: How it works...
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: For this particular example, we're utilizing the `tooltipClass` option to pass
    the state CSS classes from the theme framework to the widget. First, we simply
    make each button on the page a tooltip widget. After this call the tooltip constructor,
    we have three tooltip instances, all using the default state. Next, we find the
    button with the `tt-highlight` class and pass the `tooltipClass` option a value
    of `ui-state-highlight`. Finally, we locate the button with the `tt-error` class
    and assign that tooltip widget the `ui-state-error` class using the `tooltipClass`
    option.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个特定的例子，我们使用`tooltipClass`选项将主题框架中的状态CSS类传递给小部件。首先，我们简单地将页面上的每个按钮都设置为提示小部件。调用提示构造函数后，我们有三个使用默认状态的提示实例。接下来，我们找到带有`tt-highlight`类的按钮，并将`tooltipClass`选项的值设为`ui-state-highlight`。最后，我们找到带有`tt-error`类的按钮，并使用`tooltipClass`选项将该提示小部件分配给`ui-state-error`类。
- en: There's more...
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: There are a few downsides to the approach we've used previously. For one thing,
    the user can't tell that something is wrong till they move their mouse over the
    element and see that the tooltip is in an error state. In a more realistic scenario,
    if there were something wrong with the button, it would probably have an error
    state applied to the button itself. So to apply the error state, we had to invent
    our own class names and determine at tooltip-creation time which class to use.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前使用的方法有一些缺点。首先，用户无法知道有什么问题，直到他们将鼠标移到元素上并看到提示处于错误状态。在更现实的情况下，如果按钮有什么问题，它可能会自身应用错误状态。因此，为了应用错误状态，我们不得不发明自己的类名，并在创建提示时确定使用哪个类。
- en: A more robust solution would center around using the actual states from the
    framework on the element instead of inventing our own. Furthermore, the tooltip
    should be intelligent enough to change its class depending on the state of the
    element to which it is applied. In other words, if the button has the `ui-state-error`
    class applied to it, it should use this class as the `tooltipClass` option. Let's
    add an `inheritState` option to the tooltip widget that'll turn on this behavior.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 一个更健壮的解决方案将围绕在元素上使用框架的实际状态而不是发明我们自己的状态。此外，提示小部件应该足够智能，以根据应用的元素的状态更改其类。换句话说，如果按钮应用了`ui-state-error`类，则应该将此类用作`tooltipClass`选项。让我们为提示小部件添加一个`inheritState`选项，以打开此行为。
- en: 'Here is the modified HTML source:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这是修改后的HTML源代码：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'And here is the definition of the tooltip widget extension with the new option
    included:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是包含新选项的提示小部件扩展的定义：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This version of the code should behave identically to the first iteration. The
    difference, of course, is that the buttons themselves have a visible state, and
    we want the tooltip widgets to pick up on that. We tell it to do so by setting
    the `inheritState` option to `true`.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这个版本的代码应该与第一个版本的行为完全相同。当然，区别在于按钮本身具有可见状态，我们希望提示小部件能够捕捉到这一点。我们通过将`inheritState`选项设置为`true`来告诉它这样做。
- en: '![There''s more...](img/2186_11_04.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![还有更多...](img/2186_11_04.jpg)'
- en: Our new option, `inheritState`, gets added to the default `options` object set
    forth by the original implementation of the tooltip widget. In the `_create()`
    method, the widget constructor, we're checking if the `inheritState` option is
    `true`, or if the `tooltipClass` option has already been set. In either case,
    we return, calling the original implementation. Otherwise, we check if the element
    has either of the states in the `states` array, and if so, we set that class as
    the `tooltipClass`.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的新选项`inheritState`被添加到提示小部件的默认`options`对象中，该对象由提示小部件的原始实现设置。在`_create()`方法中，小部件构造函数中，我们检查`inheritState`选项是否为`true`，或者`tooltipClass`选项是否已设置。在任何一种情况下，我们都返回，调用原始实现。否则，我们检查元素是否具有`states`数组中的任何状态，如果是，则将该类设置为`tooltipClass`。
- en: Using custom markup in tooltips
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在提示中使用自定义标记
- en: We're not limited to using the `title` attribute to supply basic text strings
    to the tooltip content. Sometimes, the content of the tooltip widget warrants
    formatting. For example, a title section would have different font styles than
    that of the main text section. The tooltip widget allows developers to pass in
    custom content through the `content` option. This can either be a raw string,
    or a function that returns the content we would like displayed. Let's look at
    how to go about using this option in your application.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不限于使用`title`属性来提供基本文本字符串以供工具提示内容使用。有时，工具提示部件的内容需要格式化。例如，标题部分的字体样式将与主文本部分不同。工具提示部件允许开发人员通过`content`选项传递自定义内容。这可以是原始字符串，也可以是返回我们想要显示的内容的函数。让我们看看如何在您的应用程序中使用此选项。
- en: How to do it...
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: We'll create two `button` elements; each have a `title` attribute, the text
    of which we'll use in the tooltip. We're also going to add the name of the button
    as the tooltip title.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建两个`button`元素；每个都有一个`title`属性，其中的文本将用于工具提示。我们还将添加按钮的名称作为工具提示标题。
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Next, let's create the basic CSS styles that format our tooltip.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们创建格式化我们的工具提示的基本CSS样式。
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Finally, we'll create the tooltip widgets using a custom content function to
    format the tooltip content.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将使用自定义内容函数创建工具提示部件来格式化工具提示内容。
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The tooltip, when we hover over one of the `button` elements, should look something
    like the following screenshot. Notice the formatted title section.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们悬停在其中一个`button`元素上时，工具提示应该看起来像以下屏幕截图一样。注意格式化的标题部分。
- en: '![How to do it...](img/2186_11_05.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/2186_11_05.jpg)'
- en: How it works...
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The `content` function we've passed to each tooltip widget wraps the content
    into a `div` element, stored in the `$content` variable. The purpose is to store
    the title and the main text elements inside this `div`, and that way we simply
    return the `$content` variable from the function. The title `div` uses the button
    text, or, its name. This `div` gets the `ui-tooltip-title` class we defined earlier,
    which simply modifies the font, and adds some space to the bottom of the element.
    Next, we add the main content `span` element, which just uses the `title` attribute
    of the element.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们向每个工具提示部件传递的`content`函数将内容包装成一个`div`元素，存储在`$content`变量中。目的是将标题和主文本元素存储在此`div`中，这样我们就可以简单地从函数中返回`$content`变量。标题`div`使用按钮文本或其名称。这个`div`得到了我们之前定义的`ui-tooltip-title`类，它只是修改了字体，并在元素底部添加了一些空间。接下来，我们添加了主内容`span`元素，它只是使用元素的`title`属性。
- en: There's more...
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The approach to modifying the tooltip we've just examined is free-form—the function
    can return just about anything it wants. Let's look at a more structured approach
    to modifying the tooltip content. We'll alter the tooltip widget so that it accepts
    specific content section options. To demonstrate this, we'll utilize the **Rotten
    Tomatoes API**. The only HTML we'll need is a simple `div` element that looks
    like `<div class="titles"></div>`. Now let's define the CSS styles for the titles
    that we're going to list, as well as the specific tooltip content sections.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚检查过的修改工具提示的方法是自由形式的——函数可以返回几乎任何它想要的东西。让我们看看修改工具提示内容的更结构化的方法。我们将修改工具提示部件，使其接受特定的内容部分选项。为了演示这一点，我们将利用**Rotten
    Tomatoes API**。我们唯一需要的HTML是一个简单的`div`元素，看起来像`<div class="titles"></div>`。现在让我们定义标题的CSS样式，我们将要列出的标题，以及特定的工具提示内容部分。
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Here is the customized tooltip widget declaration which adds the new content
    options. When the document loads, we call the Rotten Tomatoes API and display
    five images in our container `div`. Each image is also a tooltip that uses the
    new specific content options we've added to the widget.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这是自定义的工具提示部件声明，它添加了新的内容选项。当文档加载时，我们调用Rotten Tomatoes API，并在我们的容器`div`中显示五张图片。每张图片也是一个工具提示，它使用了我们已添加到部件的新特定内容选项。
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Viewing this page in the browser should populate the titles `div` with five
    images, and when you hover the mouse pointer over each one, you should see our
    custom tooltip content.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中查看此页面应该会用五张图片填充标题`div`，当您将鼠标悬停在每个图片上时，您应该会看到我们的自定义工具提示内容。
- en: '![There''s more...](img/2186_11_06.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![还有更多...](img/2186_11_06.jpg)'
- en: Let's start by looking at the API call we're making to the Rotten Tomatoes API
    when the document has finished loading. All we're fetching are the first five
    movies from the in-theaters catalog. We're then creating an `img` element and
    setting the `src` attribute to the appropriate thumbnail for the movie. This is
    how the images you see in the example are rendered. We're also calling the tooltip
    constructor on each of the images, passing to it the new options we've defined.
    Namely, these are the sections of the tooltip content, the `header`, `body`, and
    `footer`. Notice, that we have to tell the tooltip that that this is an `img`
    element and it won't find the tooltip content in the usual places—this is done
    using the `items` option.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先查看当文档加载完成时我们正在向 Rotten Tomatoes API 发出的 API 调用。我们要获取的仅是正在上映的目录中的前五部电影。然后，我们创建一个
    `img` 元素并将 `src` 属性设置为相应电影的缩略图。这就是你在示例中看到的图片是如何呈现的。我们还对每个图像调用工具提示构造函数，并向其传递我们定义的新选项。具体来说，这些是工具提示内容的部分，`header`、`body`
    和 `footer`。请注意，我们必须告诉工具提示这是一个 `img` 元素，它不会在通常的位置找到工具提示内容 - 这是使用 `items` 选项完成的。
- en: Looking now at our customizations implemented in the tooltip widget, we can
    see that the options are defined by assigning a new option to the `options` attribute—these
    get merged into the default tooltip `options` object. Next, we have a custom implementation
    of the `_create()` method, which is called when the tooltip is instantiated. The
    goal here is to check if any one of the three content sections has been specified,
    and if not, we have nothing to do and simply exit. The original version of the
    `_create()` method was called using `_super()`, and so at this point, the widget
    has already been created. Our last job in the constructor is to assign the `content`
    option a function that generates the tooltip content. In this case, it is a proxy
    to the `_content()` method.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在看看我们在工具提示小部件中实现的自定义内容，我们可以看到选项是通过向 `options` 属性分配新选项来定义的 - 这些选项会合并到默认工具提示
    `options` 对象中。接下来，我们有一个 `_create()` 方法的自定义实现，当工具提示被实例化时会调用该方法。这里的目标是检查是否已指定了三个内容部分之一，如果没有，则我们无事可做，简单地退出。
    `_create()` 方法的原始版本是使用 `_super()` 调用的，因此在此时，小部件已经被创建。构造函数中的我们的最后一项工作是将 `content`
    选项分配给生成工具提示内容的函数。在这种情况下，它是一个代理到 `_content()` 方法的函数。
- en: The `_content()` method wraps it's returned HTML in a `div` element, this is
    stored in the `$content` variable. We then add the specified content to the `div`
    element as specified in the options. Each content section is a `div` element,
    and they're given a corresponding CSS class to control the appearance—`ui-tooltip-header`,
    `ui-tooltip-body`, and `ui-tooltip-footer`.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`_content()` 方法将其返回的 HTML 包装在一个 `div` 元素中，这存储在 `$content` 变量中。然后，我们根据选项将指定的内容添加到
    `div` 元素中。每个内容部分都是一个 `div` 元素，并且它们被赋予相应的 CSS 类来控制外观 - `ui-tooltip-header`、`ui-tooltip-body`
    和 `ui-tooltip-footer`。'
- en: Displaying the mouse movement
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示鼠标移动
- en: We can use the tooltip widget as an aid during development, and not necessarily
    a widget that ships with the finished product. For example, we can use the tooltip
    widget to track the mouse movements and to display the X and Y coordinates. This
    could help us diagnose some tricky mouse behavior as we're piecing together the
    UI components. We'll look at tracking the mouse coordinates for specific elements,
    but bear in mind, the concept is what counts. We can use this technique to display
    any number of event properties—we simply discard the call when no longer needed.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发过程中，我们可以使用工具提示小部件作为辅助工具，但不一定要将其作为最终产品的一部分。例如，我们可以使用工具提示小部件来跟踪鼠标移动并显示 X 和
    Y 坐标。这有助于我们在组装 UI 组件时诊断一些棘手的鼠标行为。我们将研究跟踪特定元素的鼠标坐标，但请记住，重要的是概念。我们可以使用此技术来显示任意数量的事件属性
    - 当不再需要时，我们只需丢弃调用。
- en: How to do it...
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到…
- en: We'll create the required CSS first. These simply position the `div` elements
    that we'll want to track mouse movements on.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 首先我们将创建所需的 CSS。这些简单地定位我们希望跟踪鼠标移动的 `div` 元素。
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Next comes the HTML itself, two `div` elements that we're in the midst of designing.
    We'd like our mouse tracking utility to show us what happens when the user moves
    the mouse over these elements.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是 HTML 本身，两个我们正在设计中的 `div` 元素。我们希望我们的鼠标跟踪实用程序在用户将鼠标移动到这些元素上时显示出发生了什么。
- en: '[PRE10]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Last but not least, we'll implement our tracker tool. It's a widget called tracker
    and it extends the tooltip widget. We're calling it something else so as to not
    confuse it with the existing tooltip widget that we're probably using in our production
    systems.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，我们将实现我们的跟踪器工具。这是一个名为跟踪器的小部件，它扩展了提示小部件。我们称其为其他内容，以免将其与我们可能在生产系统中使用的现有提示小部件混淆。
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Looking at these two `div` elements in the browser, you should see something
    similar to the following:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中查看这两个`div`元素，您应该会看到类似以下的内容：
- en: '![How to do it...](img/2186_11_07.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/2186_11_07.jpg)'
- en: How it works...
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The tracker widget we've just defined extends the tooltip widget by filling
    in a couple of options with new defaults as well as by providing a new option.
    The `track` tooltip option tells the widget to position itself relative to the
    mouse movement. Since we're implementing a mouse coordinate tracker, it makes
    sense to turn this on by default. The next tooltip option value we want changed
    is the `items` option. This tells the tooltip which target elements make valid
    tooltips, and in our case, we would like it to be the class given to our tracker
    widget—`ui-tracker`. The `relative` option is something new we're adding to the
    widget. This tells the tracker, when `true`, to display the coordinates relative
    to the element in question, instead of relative to the page, which is the default.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚定义的跟踪器小部件通过填充一些新的默认选项以及提供一个新选项来扩展提示小部件。`track`提示选项告诉小部件相对于鼠标移动定位自己。由于我们正在实现鼠标坐标跟踪器，将其默认打开是有道理的。我们希望更改的下一个提示选项值是`items`选项。这告诉提示哪些目标元素可以成为有效的提示，而在我们的情况下，我们希望它是赋予我们跟踪器小部件的类—`ui-tracker`。`relative`选项是我们要添加到小部件中的新内容。这告诉跟踪器，当为`true`时，将坐标显示为相对于问题元素，而不是相对于页面，默认情况下是相对于页面的。
- en: Next, we're extending the `_create()` method of the tooltip widget, which is
    the constructor. The first thing we do before calling the original implementation
    of the constructor is add the track widget class to the element. This is necessary
    in order for the element to be considered a valid tracker— see the `items` option.
    Once we've finished with the `_super()` method, we assign the `content` option
    a callback, which is a proxy to the `_callback()` method of this widget. The `_callback()`
    method simply returns the template content we want displayed in the tooltip. This
    includes the X and Y coordinates of the mouse event. We have to figure out if
    the label should be a page, or if it should be an element, based on the `relative`
    option.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们要扩展提示小部件的`_create()`方法，这是构造函数。在调用构造函数的原始实现之前，我们要做的第一件事是将跟踪小部件类添加到元素中。这是必要的，以便元素被视为有效的跟踪器—参见`items`选项。一旦我们完成了`_super()`方法，我们就会将`content`选项分配给回调函数，这是对此小部件的`_callback()`方法的代理。`_callback()`方法只是返回我们想要显示在提示中的模板内容。这包括鼠标事件的X和Y坐标。根据`relative`选项，我们必须弄清楚标签是应该是一个页面，还是应该是一个元素。
- en: We're overriding the `open()` method to set up our `mousemove` event handling.
    Typically, this would be done in the `_create()` method. But there is no need
    to track the mouse movement when the tooltip isn't open and the callbacks firing
    would be a waste of valuable CPU cycles. We use the `_on()` utility method to
    bind a proxy handler to the `_mousemove()` method of this widget. The `_mousemove()`
    method is responsible for updating the content of the tooltip. Specifically, it
    sets the text value of the `#ui-tracker-x` and `#ui-tracker-y` labels generated
    by our `_content()` method. The values of the X and Y coordinates will be based
    either on the `pageX` and `pageX` properties of the event alone, or in conjunction
    with the offset values, depending on the `relative` option.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们重写`open()`方法来设置我们的`mousemove`事件处理。通常，这将在`_create()`方法中完成。但是当提示未打开时，没有必要跟踪鼠标移动，而且触发回调会浪费宝贵的CPU周期。我们使用`_on()`实用程序方法将代理处理程序绑定到此小部件的`_mousemove()`方法。`_mousemove()`方法负责更新提示的内容。具体来说，它设置由我们的`_content()`方法生成的`#ui-tracker-x`和`#ui-tracker-y`标签的文本值。X和Y坐标的值将基于事件的`pageX`和`pageX`属性的值，或者与偏移值结合，具体取决于`relative`选项。
- en: The tracker widget is instantiated in the same way as the tooltip widget. When
    we no longer need these values displayed, as in, when we're ready to go live,
    these widget calls would be removed.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 跟踪器小部件的实例化方式与提示小部件相同。当我们不再需要显示这些值时，例如，当我们准备好上线时，这些小部件调用将被删除。
- en: Applying effects to the tooltip display
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对提示显示应用效果
- en: The tooltip widget ships with options to control the display, and hide the actions
    of the element. These are the `show` and `hide` options, respectfully, and each
    accepts an object that specifies animation options. Since the `show` and `hide`
    options control different aspects of the widget display, we have the freedom to
    use different settings, such as delay for the show and hide actions. Or, we could
    be drastic about it and use two completely different effects for the animations.
    Let's explore the various `show` and `hide` options available to us in the tooltip
    widget.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 工具提示小部件附带了控制元素显示和隐藏动作的选项。这些分别是`show`和`hide`选项，每个选项都接受指定动画选项的对象。由于`show`和`hide`选项控制小部件显示的不同方面，我们可以自由使用不同的设置，例如显示和隐藏操作的延迟。或者，我们可以彻底改变，对动画使用两种完全不同的效果。让我们探索工具提示小部件中可用的各种`show`和`hide`选项。
- en: How to do it...
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: First, let's create some button elements that we'll use to display the tooltips.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们创建一些按钮元素，我们将用它们来显示工具提示。
- en: '[PRE12]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Next, we'll instantiate a tooltip widget for each of the buttons, passing in
    our custom `show` and `hide` animation options.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将为每个按钮实例化一个工具提示小部件，传递我们自定义的`show`和`hide`动画选项。
- en: '[PRE13]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Look at the three buttons in your web browser and move the mouse over each one.
    You'll notice they each display and hide their tooltips in a unique fashion. For
    example, here is the last tooltip, mid-explosion as it's being hidden.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的网络浏览器中查看三个按钮，并将鼠标移到每个按钮上。您会注意到它们以独特的方式显示和隐藏工具提示。例如，这是最后一个工具提示，正在被隐藏时的中爆炸。
- en: '![How to do it...](img/2186_11_08.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/2186_11_08.jpg)'
- en: How it works...
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Some effects accept options that others don't, such as direction. The `button.drop`
    tooltip widget is using the `drop` effect for both the show and hide actions.
    However, `show` is specifying the `direction` as `up` while the `hide` action
    specifies the `direction` as `down`. This means that the tooltip will enter the
    page in a upward motion, and will exit the page in a downward motion. The same
    concept applies to the `button.slide` widget where we're using the `slide` effect.
    The tooltip will slide in from the left, and will slide out to the right.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 有些效果接受其他效果不接受的选项，例如方向。`button.drop`工具提示小部件同时对显示和隐藏操作使用`drop`效果。然而，`show`指定了`direction`为`up`，而`hide`操作指定了`direction`为`down`。这意味着工具提示将以向上的方式进入页面，并以向下的方式退出页面。相同的概念也适用于`button.slide`小部件，其中我们使用`slide`效果。工具提示将从左侧滑入，并从右侧滑出。
- en: The `button.explode` tooltip is using two different effect types—`show` uses
    the `clip` effect while `hide` uses the `explode` effect. In general, mixing effects
    like this works fine, but often involves some trial and error time in finding
    two effect classes that complement one another as opposed to looking out of place.
    Lastly, we're applying the `delay` and `duration` options to the `show` and `hide`
    options for the tooltips we've created. The `delay` option postpones the actual
    display of the tooltip while the `duration` controls the runtime of the animation.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`button.explode`工具提示使用两种不同的效果类型——`show`使用`clip`效果，而`hide`使用`explode`效果。一般来说，像这样混合效果是可以的，但通常需要一些时间进行尝试和错误，找到两种互补而不是看起来不合适的效果类。最后，我们将`delay`和`duration`选项应用于我们创建的工具提示的`show`和`hide`选项。`delay`选项推迟工具提示的实际显示，而`duration`控制动画的运行时间。'
- en: Tooltips for selected text
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选定文本的工具提示
- en: Most applications use terms that the user is encountering for the first time.
    And so, it's helpful to provide a glossary of sorts so they may look up the meaning
    of a new term. However, deciding on where to put this glossary inside the user
    interface is a big deal. For example, if I'm performing some task, I don't want
    to drop it to go look something up. This is where tooltips help—the user gets
    a contextual explanation of something.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数应用程序使用用户首次遇到的术语。因此，提供类似词汇表的东西是有帮助的，这样他们可以查找新术语的含义。但是，在用户界面中放置这个词汇表的位置是一件大事。例如，如果我正在执行某项任务，我不想中断去查找某些内容。这就是工具提示的帮助之处——用户会得到某些内容的上下文解释。
- en: Out of the box, tooltips work great when applied to a specific element on the
    page, such as a button or a progress bar. But what about paragraphs of text? Let's
    look at how we could allow the user to select some text, and display some contextual
    definition for the selection using the tooltip widget.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，工具提示在应用于页面上特定元素（例如按钮或进度条）时效果很好。但是对于一段文字呢？让我们看看如何允许用户选择一些文本，并使用工具提示小部件显示所选内容的上下文定义。
- en: How to do it...
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: We'll design a new dictionary widget, based on the tooltip widget, used to work
    with text. This widget will handle text selection by displaying a tooltip with
    the appropriate tip if one is found. First, here are the paragraphs we'll use,
    taken from the preceding section.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将设计一个新的词典小部件，基于提示小部件，用于处理文本。这个小部件将通过显示提示（如果找到）来处理文本选择。首先，这里是我们将使用的段落，取自前一节。
- en: '[PRE14]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: And here is the implementation of the dictionary widget, and how to apply it
    to our two paragraphs of text.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是词典小部件的实现以及如何将其应用于我们的两段文本。
- en: '[PRE15]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'If you were to open this page in the browser and select "tooltips" using the
    mouse pointer, you should get a tooltip as is shown in the following screenshot:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在浏览器中打开此页面并使用鼠标指针选择“tooltips”，您应该会得到如下屏幕截图所示的提示。
- en: '![How to do it...](img/2186_11_09.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/2186_11_09.jpg)'
- en: How it works...
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Our new dictionary widget adds the ability for users to select paragraph text
    and get contextual definitions for their selection if one exists. The widget accepts
    a `terms` option, which is just an array of terms and tips. This is the dictionary
    data used to perform lookups when some text is selected. The `ttPos` attribute
    is a reference to the default tooltip `position` settings object. We keep this
    handy because we need to use it each time the user selects text and the tooltip
    widget is displayed. The `_create()` method, called when the widget is instantiated,
    sets up the event handling. In particular, we're interested in the `mouseup` and
    `mouseenter` events, both of which display the tooltip widget depending on a number
    of things. The `_destroy()` method makes sure that the tooltip widget we're using
    is also destroyed by calling `_destroyTooltip()`.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的新词典小部件增加了用户选择段落文本并获取其上下文定义的功能（如果存在）。该小部件接受一个`terms`选项，这只是一个术语和提示的数组。这是用于选择文本时执行查找的词典数据。`ttPos`属性是对默认提示`position`设置对象的引用。我们保持这个便于使用，因为每次用户选择文本并显示提示小部件时都需要使用它。在实例化小部件时调用的`_create()`方法设置了事件处理。特别是，我们对`mouseup`和`mouseenter`事件感兴趣，这两个事件根据许多因素显示提示小部件。`_destroy()`方法确保我们使用的提示小部件也通过调用`_destroyTooltip()`销毁。
- en: The `_tip()` method is like the main program, so to speak, of this widget as
    it ties together all the methods that have specific responsibilities. We get the
    selected text using the `_selectedText()` method. We get the selected term from
    the dictionary using the selected text. Now, either of these values may be undefined—the
    user may not have selected anything when `_tip()` is called, or the user has selected
    text that doesn't exist in the dictionary. If either case is true, we have to
    ensure that the tooltip is destroyed. If, on the other hand, a term is found,
    we create and display the tooltip using the `_createTooltip()` method.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`_tip()`方法可谓是此小部件的主程序，因为它将具有特定责任的所有方法联系在一起。我们使用`_selectedText()`方法获取所选文本。我们使用字典中的选定文本获取所选术语。现在，这些值中的任何一个可能是未定义的—当调用`_tip()`时，用户可能未选择任何内容，或者用户选择的文本在字典中不存在。如果任何一种情况为真，我们必须确保销毁提示。另一方面，如果找到了术语，我们使用`_createTooltip()`方法创建和显示提示。'
- en: The `_createTooltip()` method accepts an event object as well as a term object.
    The event object is used to position the tooltip when it is opened. Recall that
    we stored the default position options of the tooltip in the `ttPos` attribute.
    We create a new `position` object by extending the property with the event. This
    means that we can position the tooltip relative to where the user selected their
    text. Now that we've set the position on the tooltip, we just have to set the
    `title` attribute on the paragraph to the text we want displayed inside the tooltip.
    This is the `tip` attribute of the selected term passed into the method. The `_destroyTooltip()`
    takes care of both destroying the tooltip widget, but only if this element actually
    is a tooltip, and restoring the `title` attribute.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`_createTooltip()`方法接受一个事件对象以及一个术语对象。事件对象用于在打开提示时定位提示。回想一下，我们将提示的默认位置选项存储在`ttPos`属性中。我们通过扩展该属性与事件创建一个新的`position`对象。这意味着我们可以将提示相对于用户选择文本的位置进行定位。现在我们已经设置了提示的位置，我们只需将段落的`title`属性设置为我们希望在提示内显示的文本。这是传递给方法的所选术语的`tip`属性。`_destroyTooltip()`负责销毁提示小部件，但仅在该元素实际上是提示时，并还原`title`属性。'
- en: One final note, you'll notice that we're passing in simple terms strings to
    dictionary instances. But we're able to find several variants of the term in a
    given user selection. For example, "tooltips" will find the term "tooltip" because
    we're comparing with an added "s" in addition to the original string. We're also
    normalizing the white space on either side of the selection in addition to case
    insensitivity.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 最后需要注意的是，您会注意到我们将简单的字符串传递给字典实例。但我们能够在给定的用户选择中找到几个变体的术语。例如，“tooltips”会找到术语“tooltip”，因为我们在原始字符串之外添加了“s”。我们还会对选择两侧的空白进行标准化，以及忽略大小写。
- en: There's more...
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The downside to our approach with the dictionary widget, where we make the user
    select the text in order to get a contextual definition for the word, is that
    the user doesn't know which words our dictionary defines. For example, the two
    paragraphs in the example define a grand total of four terms. For this to work,
    the user has to play a guessing game as to which text is actually defined. Further,
    selecting paragraph text is intuitive, but only if you frequently perform this
    action in the applications you use—most users do not.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用字典小部件的方法的缺点是，用户必须选择文本才能获得单词的上下文定义。例如，示例中的两个段落共定义了四个术语。要使此工作，用户必须猜测哪些文本实际上被定义。此外，选择段落文本是直观的，但仅当您经常在使用的应用程序中执行此操作时——大多数用户并不这样做。
- en: Let's enhance our dictionary widget by introducing a new mode – `hover`. When
    this mode is `true`, we'll actually manipulate the paragraph text so that the
    terms defined within the dictionary stand out. The terms will look like links,
    and the tooltips containing the definition will behave like your typical tooltip.
    First, let's add this simple CSS rule that we'll apply to each term within the
    paragraph.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过引入一个新的模式——`hover`来增强我们的字典小部件。当此模式为`true`时，我们将实际操作段落文本，以使字典中定义的术语突出显示。这些术语看起来像链接，包含定义的工具提示会像您典型的工具提示一样工作。首先，让我们添加这个简单的
    CSS 规则，我们将应用于段落中的每个术语。
- en: '[PRE16]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We''ll keep the same two paragraphs used previously, and the dictionary will
    be instantiated using the new `mode` option and we''ll also modify the widget
    definition to make use of this new option. Here is the new JavaScript code:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将保留先前使用的相同两个段落，并使用新的`mode`选项实例化字典，我们还将修改小部件定义以使用此新选项。以下是新的 JavaScript 代码：
- en: '[PRE17]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Now, when you look at the two paragraphs in the browser, you'll notice that
    the terms we have defined in the dictionary data are underlined. So when the user
    hovers their mouse pointer over the term, they get the help cursor icon, along
    with the tooltip.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当您在浏览器中查看两个段落时，您会注意到我们在字典数据中定义的术语已被下划线标记。因此，当用户将鼠标指针悬停在术语上时，他们将获得带有工具提示的帮助光标图标。
- en: '![There''s more...](img/2186_11_10.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![还有更多...](img/2186_11_10.jpg)'
- en: The new `mode` option we've introduced to the dictionary widget accepts a string
    value of either `select` or `hover`—it defaults to `select`, which is the behavior
    we had originally implemented in this example. In the widget constructor, the
    `_create()` method, we're checking the `mode` value. If we're in the `hover` mode,
    we call the `_formatTerms()` method which changes the visual appearance of the
    terms inside the paragraph. Next, we call `_createTooltip()`, the same method
    used in the original implementation except that it too is now mode-aware. The
    `_formatTerms()` stores the text of the given element and then iterates through
    the dictionary terms. For each term, it builds a regular expression and replaces
    any found terms with a `span` element used to create the tooltips.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们向字典小部件引入的新`mode`选项接受字符串值，可以是`select`或`hover`，默认为`select`，这是我们在此示例中最初实现的行为。在小部件构造函数`_create()`方法中，我们检查`mode`值。如果我们处于`hover`模式，则调用`_formatTerms()`方法，该方法会更改段落内术语的视觉外观。接下来，我们调用`_createTooltip()`，与原始实现中使用的相同方法，只是现在也具有模式感知性。`_formatTerms()`存储给定元素的文本，然后遍历字典术语。对于每个术语，它构建一个正则表达式，并用用于创建工具提示的`span`元素替换找到的任何术语。
