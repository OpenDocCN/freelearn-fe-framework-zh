- en: Chapter 6. User Interface
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章 用户界面
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Manipulating element CSS
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操纵元素的 CSS
- en: Creating a news ticker
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个新闻滚动条
- en: Creating sticky elements
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建固定元素
- en: Implementing smooth scrolling
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现平滑滚动
- en: Creating a dynamic table of contents
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个动态目录表
- en: Creating a basic drag-and-drop functionality
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建基本的拖放功能
- en: Creating a dynamic animated tree menu
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个动态动画树形菜单
- en: Creating an accordion content slider
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个手风琴内容滑块
- en: Creating tabbed content
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建标签式内容
- en: Creating a modal pop up
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个模态框弹出窗口
- en: Creating a draggable content pop up
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个可拖动的内容弹出窗口
- en: Introduction
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: jQuery empowers developers with the ability to easily create complex user interface
    elements. Because of this, there are a vast amount of jQuery plugins that allow
    developers to quickly add such interfaces to their site. Additionally, jQuery's
    own UI framework houses many popular interface elements, such as accordions, tabular
    content, modals, and more. If you would like to know how to use jQuery UI for
    your own site, skip directly to [Chapter 9](ch09.html "Chapter 9. jQuery UI"),
    *jQuery UI*. This chapter will focus on developing some of these popular UI elements
    from scratch, providing for unlimited customizability and allowing you to gain
    an understanding of how these other plugins work.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 赋予开发人员轻松创建复杂用户界面元素的能力。正因为如此，有大量的 jQuery 插件允许开发人员快速将这些界面添加到其网站中。另外，jQuery
    的 UI 框架还拥有许多热门界面元素，如手风琴、表格内容、模态框等。如果您想了解如何在自己的网站上使用 jQuery UI，请直接跳转至[第9章](ch09.html
    "第9章 jQuery UI")，*jQuery UI*。本章将专注于从头开始开发一些这些常见的 UI 元素，提供无限的定制性，并让您了解其他插件的工作原理。
- en: Manipulating element CSS
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操纵元素的 CSS
- en: jQuery allows developers to access the CSS properties of DOM elements directly.
    This provides an easy way to alter the look and feel of your application based
    on data within your JavaScript. This recipe will show you how to manipulate DOM
    CSS in various elements.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 允许开发者直接访问 DOM 元素的 CSS 属性。这为您基于 JavaScript 中的数据轻松改变应用程序的外观和感觉提供了一种简单的方式。本教程将向您展示如何在各种元素中操纵
    DOM CSS。
- en: Getting ready
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You are going to need three files for this recipe. Using your editor of choice,
    create `recipe-1.html`, `recipe-1.js`, and `recipe-1.css` in the same directory
    as the latest version of the jQuery library.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个教程，您将需要三个文件。使用您选择的编辑器，在与最新版本的 jQuery 库相同的目录中创建`recipe-1.html`、`recipe-1.js`和`recipe-1.css`。
- en: How to do it…
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Of the three files you have just created, open each one for editing and perform
    the following steps:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在您刚刚创建的三个文件中，打开每个文件进行编辑，并执行以下步骤：
- en: 'Add the following HTML code to `recipe-1.html`; be sure to change the source
    location of the JavaScript included for the jQuery library, pointing it to where
    the latest version of jQuery is downloaded on your computer:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下 HTML 代码添加到`recipe-1.html`；确保更改包含 jQuery 库的 JavaScript 的源位置，将其指向您计算机上下载的最新版本的
    jQuery：
- en: '[PRE0]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Add the following CSS code to `recipe-1.css`:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下 CSS 代码添加到`recipe-1.css`：
- en: '[PRE1]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Add the following jQuery code to `recipe-1.js` to add functionality to the
    select dropdowns within the HTML code:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下 jQuery 代码添加到`recipe-1.js`中，以为 HTML 代码中的 select 下拉框添加功能：
- en: '[PRE2]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Open `recipe-1.html` in a web browser and you should see the following simple
    web page:![How to do it…](img/recipe-1.jpg)
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 web 浏览器中打开`recipe-1.html`，您应该会看到以下简单的网页：![如何做…](img/recipe-1.jpg)
- en: Use the drop-down menus on the right-hand side to alter the CSS for the header
    and paragraph elements.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用右侧的下拉菜单来修改标题和段落元素的 CSS。
- en: How it works…
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The HTML creates a basic web page to provide elements such that their CSS can
    be manipulated by jQuery and a simple interface to initiate these changes. The
    CSS code in `recipe-1.css` adds basic styling to create our web page layout.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: HTML 创建了一个基本的网页，提供这样的元素，以便它们的 CSS 可以被 jQuery 操纵，并提供一个简单的界面来启动这些更改。`recipe-1.css`中的
    CSS 代码添加了基本的样式来创建我们的网页布局。
- en: 'To change an element''s CSS, a `change` event handler is attached to both select
    dropdowns using their respective class names:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改元素的 CSS，将`change`事件处理程序附加到两个 select 下拉框，使用它们各自的类名：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This will allow us to execute some code when the user changes the values of
    either the title color (`title-colour`) or paragraph size (`p-size`) dropdowns.
    Using `$(this).val()`, it is possible to get the value of the selected option,
    as shown in the following code snippet:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这将允许我们在用户更改标题颜色 (`title-colour`) 或段落大小 (`p-size`) 下拉菜单的值时执行一些代码。使用 `$(this).val()`，可以获取所选选项的值，如下面的代码片段所示：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Using either the `colour` or `size` variable, which hold the selected values
    of their respective dropdowns, we determine whether or not the default option
    has been selected using its value `#`. If it has been selected, we set the `colour`
    or `size` value to blank, allowing the user to reset the manipulated CSS to the
    default values.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `colour` 或 `size` 变量（它们保存了各自下拉菜单中选定的值），我们确定默认选项是否已被选中，使用其值 `#`。如果已选择，则我们将
    `colour` 或 `size` 值设置为空，允许用户将操纵的 CSS 重置为默认值。
- en: 'If an option other than the default has been chosen, the value will be used
    in conjunction with the appropriate CSS option in the jQuery `css()` function
    as highlighted in the following code snippet:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果选择了除默认选项之外的选项，则该值将与 jQuery 的 `css()` 函数中的相应 CSS 选项一起使用，如下面的代码片段中所示：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Creating a news ticker
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个新闻滚动条
- en: This recipe will show you how to create a simple news ticker with a stop/pause
    functionality. A news ticker is a great way to display a lot of information such
    as tweets, quotes, or general news items in a small space.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程将向您展示如何创建一个带有停止/暂停功能的简单新闻滚动条。新闻滚动条是在小空间中显示大量信息（如推文、引用语或一般新闻项目）的绝佳方式。
- en: Getting ready
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Once again, you are going to need to create three files. Create `recipe-2.html`,
    `recipe-2.css`, and `recipe-2.js` in the same directory as the latest version
    of jQuery.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，您需要创建三个文件。在与最新版本的 jQuery 相同的目录中创建 `recipe-2.html`、`recipe-2.css` 和 `recipe-2.js`。
- en: How to do it…
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Carry out the following step-by-step instructions to create an animated news
    ticker:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下逐步说明创建一个动画新闻滚动条：
- en: 'Add the following HTML code to `recipe-2.html` to create a simple web page
    and content for our ticker:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下 HTML 代码添加到 `recipe-2.html` 中，以创建一个简单的网页和我们的滚动条内容：
- en: '[PRE6]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Add the following simple CSS to `recipe-2.css` to add styles to our web page:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下简单的 CSS 添加到 `recipe-2.css` 中，为我们的网页添加样式：
- en: '[PRE7]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Add the following jQuery code to `recipe-2.js` to make our ticker active:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下 jQuery 代码添加到 `recipe-2.js` 中，使我们的滚动条生效：
- en: '[PRE8]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Opening `recipe-2.html` in a web browser will present you with a simple web
    page and an animated ticker that shows a different quote by Einstein every two
    seconds.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在网络浏览器中打开 `recipe-2.html` 将呈现一个简单的网页和一个动画滚动条，每两秒显示爱因斯坦的不同引用语。
- en: How it works…
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: Because the HTML and CSS code are very simple, the only explanation needed is
    for the jQuery code. Note that the HTML web page holds an unordered list element
    with four Einstein quotes inside a division element called `content-frame`. The
    `content-frame` element has its `overflow` attribute set to `hidden` so that only
    one quote is visible at a time.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 HTML 和 CSS 代码非常简单，因此唯一需要解释的是 jQuery 代码。请注意，HTML 网页包含一个无序列表元素，其中包含四条爱因斯坦的引用语，位于名为
    `content-frame` 的 division 元素内。`content-frame` 元素的 `overflow` 属性设置为 `hidden`，以便一次只显示一个引用语。
- en: 'At the top of the `recipe-2.js` file, two variables are declared: `tick` and
    `interval`. The `tick` variable is where the JavaScript `setInterval()` function
    will be declared. The JavaScript `setInterval()` function allows us to specify
    a function and an interval. The specified function will then be called again over
    the specified interval. This allows us to loop through the news ticker content.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `recipe-2.js` 文件的顶部声明了两个变量：`tick` 和 `interval`。`tick` 变量是 JavaScript 的 `setInterval()`
    函数将要声明的地方。JavaScript 的 `setInterval()` 函数允许我们指定一个函数和一个间隔。然后，指定的函数将在指定的间隔内再次调用。这使我们能够循环遍历新闻滚动条内容。
- en: 'By declaring the `tick` variable at the top of the JavaScript file, we can
    stop the interval at a later point to add the pause functionality. The `interval`
    variable simply holds the number of milliseconds we want the `setInterval()` function
    to wait before it calls the specified function again:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在 JavaScript 文件顶部声明 `tick` 变量，我们可以在以后的某个时间点停止间隔以添加暂停功能。`interval` 变量只是保存我们希望
    `setInterval()` 函数在再次调用指定函数之前等待的毫秒数：
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Inside the jQuery on-load function, we assign the `tick` variable to the `setInterval()`
    function, specify that the function be called again, and then use the `interval`
    variable to set the interval duration, as shown in the following code snippet:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在 jQuery 的加载函数内部，我们将`tick`变量分配给`setInterval()`函数，指定函数再次调用，然后使用`interval`变量设置间隔持续时间，如以下代码段所示：
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'To add the stop/start functionality, according to which the ticker will stop
    when the user hovers over it and start up again when they move their mouse away,
    we need to attach two event handlers to the `content-frame` division element as
    follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加停止/启动功能，根据用户将鼠标悬停在滚动条上时停止滚动并在将鼠标移开时重新启动滚动的要求，我们需要为`content-frame`部分元素附加两个事件处理程序，如下所示：
- en: '[PRE11]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `mouseover` event handler uses the JavaScript `clearInterval()` function
    and is passed the `tick` variable as an argument. This will stop the `setInterval()`
    function from calling the `ticker()` function again when the user hovers over
    the `content-frame` element. Within the callback function to the `mouseout` event,
    the `tick` variable is declared again with the same `setInterval()` function as
    before, reinitializing the news ticker and starting it again.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`mouseover`事件处理程序使用 JavaScript 的`clearInterval()`函数，并将`tick`变量作为参数传递。当用户将鼠标悬停在`content-frame`元素上时，这将阻止`setInterval()`函数再次调用`ticker()`函数。在`mouseout`事件的回调函数中，使用相同的`setInterval()`函数重新声明`tick`变量，重新初始化新闻滚动条并再次启动它。'
- en: 'Finally, there is the `ticker()` function itself. This function takes the first
    list element and slides it upwards using the jQuery `slideUp()` function. This
    provides the effect of the next element moving into view. It then takes the element
    that has been hidden using the `slideUp()` function and moves it to the end of
    the ticker list using `appendTo()`. Finally, it slides this element back down
    using `slideDown()`, so it is ready for display when it eventually moves to the
    top of the list again. This is shown in the following code snippet:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，还有`ticker()`函数本身。此函数使用 jQuery 的`slideUp()`函数将第一个列表元素向上滑动。这提供了下一个元素进入视图的效果。然后，它使用`appendTo()`将使用`slideUp()`函数隐藏的元素移动到滚动条列表的末尾。最后，它使用`slideDown()`将此元素再次滑动下来，以便在最终再次移动到列表顶部时准备显示。如以下代码段所示：
- en: '[PRE12]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: There's more…
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容…
- en: It is possible to adopt the start and stop functionality any way you like, for
    example, using start and stop buttons or even a single pause button to make it
    more obvious that it is possible to pause the ticker. The benefit of the method
    used in this recipe is that links will often be displayed within the ticker content.
    When the user goes to click on a link within the ticker, the ticker will stop,
    allowing them to click on the link instead of the link moving away before they
    can initiate the click.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 可以以任何你喜欢的方式采用启动和停止功能，例如，使用启动和停止按钮，或者甚至一个单独的暂停按钮，以便更明显地表明可以暂停滚动。本示例中使用的方法的好处是，链接通常会显示在滚动内容中。当用户试图点击滚动内容中的链接时，滚动将停止，允许他们点击链接，而不是在他们点击之前链接就移开。
- en: See also
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '*Creating a dynamic table of contents*'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建动态目录*'
- en: Creating sticky elements
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建固定元素
- en: Sticky elements are page elements that stick to a position within the user's
    browser, even as they scroll. Sticky elements are used to always keep content
    within the user's line of sight. This content could be navigation, important information,
    or even advertising. This recipe will show you how to create sticky elements and
    also use jQuery to activate them when the user scrolls to a certain point on the
    page.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 固定元素是页面元素，在用户滚动时会固定在浏览器中的位置。固定元素用于始终保持内容在用户视线内。这些内容可以是导航、重要信息，甚至是广告。本示例将展示如何创建固定元素，并且使用
    jQuery 在用户滚动到页面上某一点时激活它们。
- en: Getting ready
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Using your favorite editor, create three files named `recipe-3.html`, `recipe-3.css`,
    and `recipe-3.js`, ensuring that they are in the same directory as your jQuery
    library.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 使用你喜欢的编辑器，在与你的 jQuery 库相同的目录下创建三个文件，分别命名为`recipe-3.html`、`recipe-3.css`和`recipe-3.js`。
- en: How to do it…
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'For each of the newly created files, perform the following steps:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个新创建的文件，执行以下步骤：
- en: 'Add the following HTML code to `recipe-3.html`; it creates a long web page
    that is scrollable and a `div` element with some important content that needs
    to stay within the user''s view at all times:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下 HTML 代码添加到`recipe-3.html`中；它创建了一个长网页，可以滚动，并且一个`div`元素，其中包含一些重要内容需要始终保持在用户视线内：
- en: '[PRE13]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'To style this page, add the following CSS code to `recipe-3.css`; there is
    also a `sticky` class within this code, which will be applied to the important
    elements by jQuery when users scroll down the page:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了给这个页面添加样式，将以下 CSS 代码添加到 `recipe-3.css` 文件中；代码中还包含一个 `sticky` 类，在用户滚动页面时会被
    jQuery 应用到重要元素上：
- en: '[PRE14]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Finally, add the following jQuery code to `recipe-3.js`, which will activate
    the sticky element when the user tries to scroll past it:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将以下 jQuery 代码添加到 `recipe-3.js` 中，当用户试图滚过时，将激活固定元素：
- en: '[PRE15]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: How it works…
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'At the top of `recipe-3.js`, there is a variable called `importantOrigin`,
    which will be used to store the original position of the important division element.
    Within the jQuery on-load block, `$(''.important'').offset()` is used to get the
    top and left positions of the important element and stores these values in the
    previously created `importantOrigin` variable. This is shown in the following
    code snippet:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `recipe-3.js` 的顶部，有一个名为 `importantOrigin` 的变量，它将用于存储重要部分元素的原始位置。在 jQuery 的加载块中，使用
    `$('.important').offset()` 获取重要元素的顶部和左侧位置，并将这些值存储在先前创建的 `importantOrigin` 变量中。如下面的代码片段所示：
- en: '[PRE16]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The jQuery `scroll()` function is used to execute the `sticky()` method every
    time the user scrolls on the page:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 的 `scroll()` 函数用于在用户滚动页面时执行 `sticky()` 方法：
- en: '[PRE17]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The `sticky()` method gets the current vertical position of the page using
    `$(''body, html'').scrollTop()` and then uses this to compare against the important
    element''s top position. If the user has scrolled past the important element,
    the `sticky` CSS class is applied to the important element using the `addClass()`
    method:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`sticky()` 方法使用 `$(''body, html'').scrollTop()` 获取页面的当前垂直位置，然后将其与重要元素的顶部位置进行比较。如果用户滚过了重要元素，则使用
    `addClass()` 方法将 `sticky` CSS 类应用于重要元素：'
- en: '[PRE18]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'If the page''s current vertical position is lower than the top of the `sticky`
    element, the `sticky` class is removed with `removeClass()`, setting the important
    element back into its original state. Using `position: fixed;` in the CSS, it
    is possible to make an element stick to a certain point on the page. Using jQuery
    to conditionally apply this CSS, we can control when the element sticks, because
    it is typically not desired until the user scrolls past the element so that it
    is no longer visible on the screen.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '如果页面的当前垂直位置低于 `sticky` 元素的顶部，则使用 `removeClass()` 将 `sticky` 类移除，将重要元素恢复到其原始状态。在
    CSS 中使用 `position: fixed;`，可以使元素固定在页面的某一点。使用 jQuery 条件性地应用此 CSS，我们可以控制何时应用元素固定，因为通常直到用户滚动过元素，使其不再在屏幕上可见，才希望这样做。'
- en: There's more…
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: There is a popular jQuery plugin called `sticky.js`, which can be found at [http://stickyjs.com/](http://stickyjs.com/).
    This plugin uses the same principles that you have learned as part of this recipe
    and bundles all of the functionality into a plugin so that it is easy to reuse.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个流行的 jQuery 插件叫做 `sticky.js`，可以在 [http://stickyjs.com/](http://stickyjs.com/)
    找到。该插件使用了您在本文档中学到的相同原理，并将所有功能打包成插件，以便于重用。
- en: See also
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '*Creating a dynamic table of contents*'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建一个动态目录表*'
- en: Implementing smooth scrolling
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现平滑滚动
- en: Anchor links to navigate to different sections of the page are useful to allow
    users to easily bypass the information in which they are not interested and go
    directly to that in which they are. However, when there is a lot of textual data
    on the screen, jumping between these different sections can often be confusing
    for the user. Using smooth scrolling and animating the screen to slowly move up
    or down to the selected section, it is easier for a user to visualize where they
    have navigated to without getting disorientated.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 锚点链接用于导航到页面的不同部分，使用户能够轻松地跳过他们不感兴趣的信息，直接进入感兴趣的部分。然而，当屏幕上有大量文本数据时，在这些不同部分之间跳转通常会让用户感到困惑。使用平滑滚动并将屏幕动画地缓慢向上或向下移动到所选部分，用户可以更容易地可视化自己导航到的位置，而不会感到迷失方向。
- en: Getting ready
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Simply create the three standard recipe files, `recipe-4.html`, `recipe-4.css`,
    and `recipe-4.js`, and save them to the same directory as the latest version of
    the jQuery library.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 只需创建三个标准的配方文件，`recipe-4.html`、`recipe-4.css` 和 `recipe-4.js`，并将它们保存到与最新版本的 jQuery
    库相同的目录中。
- en: How to do it…
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现方法...
- en: 'Perform the following simple steps to add smooth scrolling to a website or
    web page:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下简单步骤，为网站或网页添加平滑滚动效果：
- en: 'Create a long web page by adding the following HTML code to `recipe-4.html`:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将以下 HTML 代码添加到 `recipe-4.html` 文件中，可以创建一个较长的网页：
- en: '[PRE19]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Style this page by adding the following CSS code to `recipe-4.css`, which is
    included in the preceding HTML page:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将以下 CSS 代码添加到`recipe-4.css`中（此文件在前面的 HTML 页面中已经包含）来为这个页面添加样式：
- en: '[PRE20]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Add the following jQuery code to `recipe-4.js` to catch anchor element clicks
    and provide the smooth-scrolling effect:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下 jQuery 代码添加到`recipe-4.js`以捕捉锚点元素点击并提供平滑滚动效果：
- en: '[PRE21]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: How it works…
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: 'The jQuery code first attaches a `click` event handler to certain anchor elements:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 代码首先将`click`事件处理程序附加到某些锚点元素上：
- en: '[PRE22]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The preceding code will only attach a `click` event handler to anchors with
    a hash (`#`) in their `href` attribute. The `:not([href=#])` is also used so that
    event handlers will not be attached to anchors that have only a hash as their
    `href` attribute. Now we can specify code to be executed for the links on the
    page that navigate to other sections on the same page. Blank and external links
    will be ignored and operate as usual.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码将仅将`click`事件处理程序附加到其`href`属性中具有哈希（`#`）的锚点。还使用`:not([href=#])`，以便不会将事件处理程序附加到其`href`属性只有一个哈希的锚点。现在，我们可以指定要执行的代码，以便在页面上导航到其他部分的链接。空白和外部链接将被忽略并像往常一样运行。
- en: 'Within the `click` event handler `callback()` function, we can use `this.hash`
    to retrieve the hash value in the `href` attribute of the clicked anchor element.
    If the anchor links to `#two`, we would receive the string value `"#two"`. Using
    `this.hash.length`, we can ensure that the value is valid and that we can continue
    to provide the smooth scroll animation:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在`click`事件处理程序的`callback()`函数内，我们可以使用`this.hash`来检索点击的锚点元素的`href`属性中的哈希值。如果锚点链接到`#two`，我们会收到字符串值`"#two"`。使用`this.hash.length`，我们可以确保值是有效的，并且我们可以继续提供平滑滚动动画：
- en: '[PRE23]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Inside the `if` statement of `this.hash.length`, we use the jQuery `animate()`
    function as follows to animate and scroll the user to the location of the anchor
    target:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在`this.hash.length`的`if`语句内，我们使用jQuery的`animate()`函数如下来动画和滚动用户到锚点目标的位置：
- en: '[PRE24]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The `scrollTop` parameter is the location to which the animation should scroll.
    We get this location by selecting the target element using `$(this.hash)` and
    then using the jQuery `offset()` function to get its top position.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`scrollTop`参数是动画应该滚动到的位置。我们通过使用`$(this.hash)`选择目标元素，然后使用jQuery的`offset()`函数获取其顶部位置。'
- en: Finally, we return `false` after the `if` statement of `this.hash.length` to
    prevent the default action of the click event. If you remove `return false`, you
    will get a flicker on the screen because the default action of the click event
    (which would send the user to the linked section) occurs just before the animation
    kicks in.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在`this.hash.length`的`if`语句之后返回`false`，以防止点击事件的默认操作。如果去掉`return false`，在动画开始之前会出现屏幕闪烁，因为点击事件的默认操作（将用户发送到链接的部分）发生在动画开始之前。
- en: See also
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: '*Creating a dynamic table of contents*'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建一个动态目录*'
- en: Creating a dynamic table of contents
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个动态目录
- en: A table of contents is a common way to allow users to quickly get to the section
    of content they are looking for. With jQuery, it is possible to create a table
    of contents dynamically, based on the HTML header elements on the page. This is
    very useful for blog posts or other sites that have lots of different content
    pages.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 目录是让用户快速找到他们正在寻找的内容部分的常见方式。使用jQuery，可以根据页面上的HTML标题元素动态创建目录。这对于博客文章或其他拥有许多不同内容页面的网站非常有用。
- en: Getting ready
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create `recipe-5.html`, `recipe-5.css`, and `recipe-5.js` as before and have
    all three open and ready for editing.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`recipe-5.html`、`recipe-5.css`和`recipe-5.js`，并像以前一样都准备好进行编辑。
- en: How to do it…
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'With the required files created, perform the following steps to create a dynamic
    table of contents:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 创建了必需的文件之后，按照以下步骤创建一个动态目录：
- en: 'Create a basic web page using the following HTML code, adding it to `recipe-5.html`:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下 HTML 代码创建一个基本网页，并将其添加到`recipe-5.html`中：
- en: '[PRE25]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Add the following HTML code to `recipe-5.html` within the `body` tags you have
    just added; this will create a page with sectioned content and an ordered list
    element that can be populated with content:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下 HTML 代码添加到刚刚添加的 `body` 标签内的 `recipe-5.html` 中；这将创建一个带有分节内容和有序列表元素的页面，可以填充内容：
- en: '[PRE26]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Add the following CSS to `recipe-5.css` to add basic styles to this page. This
    CSS code is once again very similar to that in the last two recipes of this chapter:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下 CSS 添加到`recipe-5.css`以向此页面添加基本样式。这段 CSS 代码再次与本章前两个示例中的代码非常相似：
- en: '[PRE27]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Add the following jQuery code to `recipe-5.js`, which will populate the ordered
    list based on the headed sections in the HTML page we have just created:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下jQuery代码添加到`recipe-5.js`中，它将根据我们刚刚创建的HTML页面中的标题部分填充有序列表：
- en: '[PRE28]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Opening `recipe-5.html` in a web page will present you with the content to the
    left-hand side of the screen and the dynamically-generated contents list to the
    right-hand side as shown in the following screenshot:![How to do it…](img/recipe-5.jpg)
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在网页中打开`recipe-5.html`将向您展示内容在屏幕左侧，动态生成的内容列表在右侧，如下截图所示：![如何做…](img/recipe-5.jpg)
- en: How it works…
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何运行的...
- en: The HTML code provides a content pane with various sections headed by `h1`,
    `h2`, `h3`, and `h4` tags and an empty ordered list element.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: HTML代码提供了一个包含由`h1`、`h2`、`h3`和`h4`标签标头的各种部分以及一个空的有序列表元素的内容窗格。
- en: 'Our jQuery code first selects the content section and then finds all of the
    header elements inside it using the jQuery `find()` function and specifying `h1,
    h2, h3, h4` as the only argument. This will create an array of the found elements
    and store them in the `_headers` array as shown in the following code snippet:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的jQuery代码首先选择内容部分，然后使用jQuery `find()`函数找到其中的所有标题元素，并指定`h1, h2, h3, h4`作为唯一参数。这将创建一个找到的元素数组，并将它们存储在`_headers`数组中，如下代码片段所示：
- en: '[PRE29]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Using the jQuery `each()` function, it is then possible to iterate through all
    of the found header elements and construct the table of contents. The local variable
    `_header` is first declared and the current header element is stored in this variable.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 然后使用jQuery `each()`函数，可以遍历找到的所有标题元素并构建目录。首先声明本地变量`_header`，并将当前标题元素存储在此变量中。
- en: 'To be able to indent subsections in the table of contents, making it easier
    for the user to see the content structure, the code needs to determine what level
    the current header is at: `h1` being the top level and `h5` being the bottom.
    Using `_header.context.localName`, we can get the tag of the header element (for
    example, `h1`) and remove the "`h`" with the JavaScript `replace()`. Then, we
    can convert the remaining value to an integer using `parseInt()`. We are left
    with a value we can use to determine the level of the header element. This process
    is shown in the following code snippet:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够缩进目录中的子节，使用户更容易看到内容结构，代码需要确定当前标题的级别：`h1`为顶级，`h5`为底级。使用`_header.context.localName`，我们可以获取标题元素的标签（例如，`h1`）并使用JavaScript的`replace()`删除"`h`"。然后，我们可以使用`parseInt()`将剩余值转换为整数。我们得到一个值，可以用来确定标题元素的级别。这个过程在以下代码片段中显示：
- en: '[PRE30]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Now we can create the list element, which we will insert into the ordered list.
    In order to link the items in the table of contents to the appropriate section
    of content, we need to check to see whether or not the header element has an ID
    that we can link to. If it does, we create a list element with a link; otherwise,
    we create a basic list element by executing the following code:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以创建列表元素，并将其插入有序列表中。为了将目录中的项目链接到内容的适当部分，我们需要检查标题元素是否有我们可以链接到的ID。如果有，我们通过执行以下代码创建带有链接的列表元素；否则，我们通过执行以下代码创建基本列表元素：
- en: '[PRE31]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Finally, once the list item has been created, the `css()` function and the `level`
    variable are used to add the required padding for indentation and the created
    list item is appended to the content's ordered list.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，创建完列表项后，使用`css()`函数和`level`变量添加所需的缩进填充，并将创建的列表项附加到内容的有序列表中。
- en: There's more…
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: You could combine this recipe with both the *Implementing smooth scrolling*
    and *Creating sticky elements* recipes to force the table of contents to follow
    the user down the page and also provide scrolling animation for a better user
    experience.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将此配方与*实现平滑滚动*和*创建粘性元素*配方结合使用，迫使目录随用户向下滚动页面并为更好的用户体验提供滚动动画。
- en: See also
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '*Creating sticky elements*'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建粘性元素*'
- en: '*Implementing smooth scrolling*'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*实现平滑滚动*'
- en: Creating a basic drag-and-drop functionality
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建基本的拖放功能
- en: It is possible to create interesting and intuitive interfaces by adding drag-and-drop
    elements to your site. jQuery UI comes with a built-in plugin for drag-and-drop
    interfaces. This recipe will show you how to create a basic drag-and-drop functionality
    without the use of any plugins, giving you the freedom and understanding to expand
    the code.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 通过向网站添加拖放元素，可以创建有趣且直观的界面。jQuery UI带有内置插件，用于拖放界面。本产品介绍将向您展示如何创建基本的拖放功能，而无需使用任何插件，从而为您扩展代码提供自由和理解。
- en: Getting ready
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a blank HTML page called `recipe-6.html` with the `recipe-6.css` and
    `recipe-6.js` files in the same directory as the latest version of the jQuery
    library.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为`recipe-6.html`的空白HTML页面，并将`recipe-6.css`和`recipe-6.js`文件放在与最新版本jQuery库相同的目录中。
- en: How to do it…
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Carry out the following step-by-step instructions to complete this recipe:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下分步说明执行以下操作完成此步骤：
- en: 'Add the following HTML code to `recipe-6.html`, creating a basic HTML page
    with three `draggable` elements in a container `div`:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下HTML代码添加到`recipe-6.html`中，在容器`div`中创建一个基本的HTML页面，其中包含三个`draggable`元素：
- en: '[PRE32]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Add the following CSS code to `recipe-6.css` to style the HTML page and `draggable`
    elements:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下CSS代码添加到`recipe-6.css`中，为HTML页面和`draggable`元素添加样式：
- en: '[PRE33]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Insert the following jQuery code in `recipe-6.js` to apply the drag-and-drop
    functionality to the `draggable` elements:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下jQuery代码插入`recipe-6.js`中，为`draggable`元素应用拖放功能：
- en: '[PRE34]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Open `recipe-6.html` in a web browser and click on one of the red boxes. This
    will apply the `dragging` CSS class to the element, allowing you to move it around
    the page within the frame division.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Web浏览器中打开`recipe-6.html`并单击其中一个红色框。这将向元素应用`dragging` CSS类，允许您在页面内的框划分中移动它。
- en: How it works…
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运作原理…
- en: The HTML page provides a container `div` element that acts as the container
    for the `draggable` elements. There are three additional `div` elements inside
    the `frame` element. These three elements have the `draggable` class, which jQuery
    will use to apply the drag-and-drop functionality.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: HTML页面提供一个充当`draggable`元素容器的`div`元素。`frame`元素内有三个额外的`div`元素。这三个元素具有`draggable`类，jQuery将使用这个类应用拖放功能。
- en: The CSS code used in the recipe creates a border on the `frame` element and
    sets the height, width, and background color for the `draggable` elements. There
    is also a `dragging` class, which applies a drop shadow to the `draggable` elements
    when they are being moved.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 配方中使用的CSS代码在`frame`元素上创建边框，并为`draggable`元素设置高度、宽度和背景颜色。还有一个`dragging`类，当移动`draggable`元素时，会为其应用阴影。
- en: 'Within the jQuery code itself, a series of mouse events are used to create
    the drag-and-drop functionality. The jQuery `on()` function is used to apply the
    different event handlers to the `draggable` elements. The first event handler
    applied to the `draggable` elements is the `mousedown` event as shown in the following
    code:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在jQuery代码本身中，使用一系列鼠标事件来创建拖放功能。使用jQuery的`on()`函数将不同的事件处理程序应用于`draggable`元素。应用在`draggable`元素上的第一个事件处理程序是`mousedown`事件，如下所示：
- en: '[PRE35]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: This simply adds the `dragging` class to the element that has just been clicked
    (`mousedown`).
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是向刚刚被点击的元素（`mousedown`）添加`dragging`类。
- en: 'The next event handler to be attached is for both the `mousemove` and `mouseout`
    events. This allows us to update the clicked element''s position based on the
    mouse''s position when the user moves the mouse pointer while still clicking on
    the selected element. We also use the same code for the `mouseout` event for when
    the user moves too quickly and brings the mouse pointer out of the selected `draggable`
    box. The box''s position will then be updated to the mouse''s position thanks
    to the same code being attached to the `mouseout` event:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来要绑定的事件处理程序是`mousemove`和`mouseout`事件。这允许我们根据用户在点击选定元素的同时移动鼠标指针时，根据鼠标位置更新点击元素的位置。我们还针对用户移动太快并将鼠标指针移出选定的`draggable`框时使用相同的代码来处理`mouseout`事件。由于相同的代码附加到`mouseout`事件上，框的位置将被更新为鼠标的位置。
- en: '[PRE36]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The callback function for these two events is where the main functionality
    is added. This code looks complex, but it is easy to understand once we break
    it down. First and foremost, nothing will be done unless the clicked element has
    the `dragging` class. This is done using the following `if` statement that checks
    for the `dragging` class:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个事件的回调函数是添加主要功能的地方。这段代码看起来很复杂，但一旦我们将它分解开来，就很容易理解。首要的是，除非点击的元素有`dragging`类，否则什么也不会发生。这是通过以下`if`语句来实现的，它检查`dragging`类：
- en: '[PRE37]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Inside this `if` statement, we first get the clicked element''s parent''s position
    (the `frame` element) so we can work out the boundary for the `draggable` elements:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个`if`语句内，首先获取了点击元素的父元素位置（`frame`元素），这样我们就可以计算出`draggable`元素的边界：
- en: '[PRE38]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The next block of code looks at the clicked element''s position and determines
    whether or not this is less than the `frame` element''s left position or greater
    than the container element''s right position. If it is either, the `dragging`
    element''s position is set to the boundary limit instead of the mouse pointer''s
    position, stopping the user from being able to drag the element outside of the
    left and right boundaries of the container element:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 下一块代码查看了点击元素的位置，并确定了它是否小于`frame`元素的左侧位置或大于容器元素的右侧位置。如果是其中一个，`dragging`元素的位置被设置为边界限制，而不是鼠标指针的位置，从而阻止用户能够将元素拖到容器元素的左右边界之外：
- en: '[PRE39]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: If the `draggable` element's position is not over the boundary, its position
    is updated to the mouse pointer's left position minus the width of the `dragging`
    element so that the mouse pointer is always in the center of the element while
    dragging.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`draggable`元素的位置不在边界上方，那么它的位置将被更新为鼠标指针的左侧位置减去`dragging`元素的宽度，以便在拖动时鼠标指针始终在元素的中心。
- en: 'Next, the same logic is applied for the top and bottom boundaries:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，相同的逻辑应用于顶部和底部的边界：
- en: '[PRE40]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Finally, now that the new top and left positions for the `draggable` element
    have been calculated, knowing that it is either the mouse pointer''s position
    minus the width/height of the `draggable` element divided by two or the boundary
    limits, the jQuery CSS function is used to apply these positions while also setting
    the CSS `position` attribute to `absolute`:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，现在`draggable`元素的新顶部和左侧位置已经计算出来，知道它是鼠标指针的位置减去`draggable`元素的宽度/高度除以二或边界限制，就可以使用jQuery
    CSS函数应用这些位置，并同时将CSS`position`属性设置为`absolute`：
- en: '[PRE41]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'And last of all, a final event is used—the `mouseup` event—which is fired when
    the user releases the click from the `dragging` element. When this happens, the
    `dragging` CSS class is removed from the dragged element:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，使用了最后一个事件——`mouseup`事件——当用户释放鼠标指针时触发，这时将从`dragging`元素中移除`dragging` CSS类：
- en: '[PRE42]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: See also
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: '*Creating a draggable content pop up*'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建一个可拖动的内容弹出窗口*'
- en: Creating a dynamic animated tree menu
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个动态的动画树状菜单
- en: Tree menus are a great way to display a lot of information in a confined space
    and allow users to choose the information they wish to see. This recipe will show
    you how to dynamically create a tree menu based on a set of JSON objects with
    slide up and down effects.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 树状菜单是在有限的空间内显示大量信息并允许用户选择他们希望看到的信息的好方法。这个配方将向你展示如何基于一组JSON对象动态创建具有上下滑动效果的树状菜单。
- en: Getting ready
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create `recipe-7.html`, `recipe-7.js`, and `recipe-7.css` for this recipe, ensuring
    that they are saved in the same directory as the latest version of jQuery.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 为了这个配方创建`recipe-7.html`、`recipe-7.js`和`recipe-7.css`，并确保它们保存在与jQuery的最新版本相同的目录中。
- en: How to do it…
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'To create an animated tree menu, ensure you complete all of the following instructions:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建一个动态的动画树状菜单，请确保您完成以下所有指示：
- en: 'Add the following HTML code to `recipe-7.html` to create the basic web page
    required for this recipe:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`recipe-7.html`中添加以下HTML代码，以创建此配方所需的基本网页：
- en: '[PRE43]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Add the following styles to `recipe-7.css`:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`recipe-7.css`中添加以下样式：
- en: '[PRE44]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Add the following jQuery code to `recipe-7.js`, which provides the data and
    functionality to create the dynamic tree menu:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`recipe-7.js`中添加以下jQuery代码，该代码提供了创建动态树菜单的数据和功能：
- en: '[PRE45]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Open `recipe-7.html` in a web browser and click on the highlighted list items
    to expand the list for items that have children, as depicted in the following
    screenshot:![How to do it…](img/recipe-7.jpg)
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在web浏览器中打开`recipe-7.html`并单击突出显示的列表项，以展开具有子项的列表，如下图所示：![如何操作…](img/recipe-7.jpg)
- en: How it works…
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何运作…
- en: The HTML code contains only the basic elements for a valid HTML page and a `list-container`
    division element that the jQuery code will use to insert the list HTML once it
    has been created. The CSS code contains basic list styles as well as some styles
    to create the right and down arrows, as shown in the previous screenshot.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: HTML 代码仅包含有效 HTML 页面和`list-container`分区元素的基本元素，jQuery 代码将使用该元素在创建后将列表 HTML 插入其中。CSS
    代码包含基本列表样式以及一些样式以创建右箭头和向下箭头，如上一个屏幕截图所示。
- en: The first part of the JavaScript code is an array of objects that represents
    a family tree. Each person in the family tree can have children, and there is
    no limit to the depth of the tree.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 代码的第一部分是一个对象数组，代表了一个家族谱系。家族谱中的每个人都可以有子女，并且树的深度没有限制。
- en: 'The main functionality of the jQuery code is within the `createList()` function.
    This function takes two arguments: an array of objects (children) and the current
    list level. Within this function, some inline styles are calculated based on the
    value of `level`. If the current value of `level` is not `1`, meaning the current
    level is not the topmost level, the list is hidden by default. A left margin is
    also applied to the list based on the level, so that with each level lower, the
    list is moved further to the right to create the typical tree view you see in
    applications. A `list` variable is created and the HTML for an unordered list
    element is added to it. Next, each of the objects provided are looped through
    and a list item is created for each one. The length of the object''s `children`
    property is checked to determine whether or not the current object has any children
    itself. If it has children, a link and right arrow are added to the list. Then,
    the `createList()` function is called recursively with the updated level and the
    current object''s own children. This function will return the HTML for an unordered
    list populated with the object''s own children. This will happen for each of the
    objects within the tree variable until the list has been fully created. Then,
    using `$(''.list-container'').html(list);`, the list is inserted into the DOM
    and will become visible on the page.'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 代码的主要功能在`createList()`函数中。此函数接受两个参数：对象数组（子女）和当前列表级别。在此函数内，根据`level`的值计算了一些内联样式。如果当前的`level`值不是`1`，这意味着当前级别不是最顶层级别，则列表默认隐藏。还根据级别应用左边距，以便每个较低级别时，列表都会向右移动，以创建您在应用程序中看到的典型树视图。创建一个`list`变量，并将无序列表元素的
    HTML 添加到其中。接下来，循环遍历提供的每个对象，并为每个对象创建一个列表项。检查对象的`children`属性的长度以确定当前对象是否具有子女。如果有子女，则将链接和右箭头添加到列表中。然后，递归调用`createList()`函数，传入更新后的级别和当前对象自己的子女。此函数将返回一个填充有对象自己的子女的无序列表的
    HTML。这将在树变量中的每个对象中发生，直到完全创建列表。然后，使用`$('.list-container').html(list);`将列表插入到 DOM
    中，并将在页面上可见。
- en: 'Because all list items except for the top-level items are hidden, a `click`
    event handler needs to be attached to each of the list items that have children,
    as shown in the following code:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 因为除了顶级项目之外的所有项目都是隐藏的，所以需要将`click`事件处理程序附加到每个具有子女的项目上，如下所示：
- en: '[PRE46]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: A single event that will listen for clicks on any element with the `show-children`
    class is attached to the document. When one of these items has been clicked, the
    `slideToggle()` function is used on the next unordered list element (the children
    list) to either slide it up or down. The `toggleClass()` function is also used
    on the `arrow` element to make the arrow point down when the children list is
    open.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 一个单独的事件将监听任何具有`show-children`类的元素上的点击，并附加到文档上。当这些项目中的一个被点击时，`slideToggle()`函数将用于下一个无序列表元素（子女列表）以将其上下滑动。当子女列表打开时，`toggleClass()`函数也会用于`arrow`元素以使箭头向下指。
- en: There's more…
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: This recipe uses a static JavaScript array, but it could easily be adapted to
    load a set of JSON objects from a web server.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例使用静态 JavaScript 数组，但可以轻松地改为从 Web 服务器加载一组 JSON 对象。
- en: See also
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '*Creating an accordion content slider*'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建手风琴内容滑块*'
- en: '*Creating tabbed content*'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建选项卡内容*'
- en: Creating an accordion content slider
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个手风琴内容滑块
- en: An accordion allows the user to easily skip through content. There are many
    jQuery plugins that provide the accordion functionality. However, this recipe
    will show you how to create a simple and attractive jQuery accordion content slider
    from scratch.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 折叠内容允许用户轻松地跳过内容。有许多提供折叠功能的 jQuery 插件。但是，本示例将向您展示如何从头开始创建一个简单且吸引人的 jQuery 折叠内容滑块。
- en: Getting ready
  id: totrans-208
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create `recipe-8.html`, `recipe-8.css`, and `recipe-8.js` in the same directory
    as the jQuery library.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在与 jQuery 库相同的目录中创建`recipe-8.html`、`recipe-8.css`和`recipe-8.js`。
- en: How to do it…
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做……
- en: 'With your newly created files open, complete the following step-by-step instructions:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 使用您新创建的文件，按照以下逐步说明完成操作：
- en: 'Add the following HTML code to `recipe-8.html` to create a basic web page with
    the accordion and content:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下 HTML 代码添加到`recipe-8.html`中，以创建一个包含折叠和内容的基本网页：
- en: '[PRE47]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Add the following CSS code to `recipe-8.css` to add styles to the accordion:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下 CSS 代码添加到`recipe-8.css`中，以为折叠添加样式：
- en: '[PRE48]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Add the following jQuery code to `recipe-8.js` to ignite the accordion content
    slider into action:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下 jQuery 代码添加到`recipe-8.js`中，以启动折叠内容滑块的操作：
- en: '[PRE49]'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Open `recipe-8.html` in a web browser and you will be provided with the interactive
    accordion content slider shown in the following screenshot:![How to do it…](img/recipe-8.jpg)
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在网络浏览器中打开`recipe-8.html`，您将看到以下截图中显示的交互式折叠内容滑块：
- en: How it works…
  id: totrans-219
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: The HTML code used in this recipe creates a basic web page that contains the
    main accordion markup. There is a main accordion division element that contains
    several sections. Each section contains an anchor tag with the class `header`
    and a content division element that holds the accordion's content. The jQuery
    code uses the header anchor element to hide and show the content sections based
    on the anchor element that was clicked by the user.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例中使用的 HTML 代码创建了一个包含主要折叠标记的基本网页。有一个包含多个部分的主折叠部分元素。每个部分都包含一个带有类`header`的锚标签和一个包含折叠内容的内容部分元素。jQuery
    代码使用头部锚元素根据用户点击的锚元素来隐藏和显示内容部分。
- en: The CSS code is very simple and adds basic styles to the accordion. Like in
    the previous recipe, we are using CSS right and down arrows to indicate whether
    a section is open or closed. We also use CSS3 gradients to add a gradient background
    to the accordion headers.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: CSS 代码非常简单，为折叠添加了基本样式。与前一个示例一样，我们使用 CSS 中的右箭头和下箭头来指示某个部分是否打开或关闭。我们还使用 CSS3 渐变将渐变背景添加到折叠标题中。
- en: 'Thanks to the nature of jQuery, we are able to create the entire accordion
    with only 18 lines of JavaScript. The first part of the jQuery code hides all
    of the accordion content sections except for the first one:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 jQuery 的性质，我们能够仅使用 18 行 JavaScript 创建整个折叠。 jQuery 代码的第一部分隐藏了除第一个以外的所有折叠内容部分：
- en: '[PRE50]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Then, a `click` event handler is attached to the document to listen for clicks
    on any of the accordion content headers, as shown in the following code snippet:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，将一个`click`事件处理程序附加到文档上，以监听折叠内容标题的点击，如下面的代码片段所示：
- en: '[PRE51]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Inside the callback function to this event, we select all of the accordion
    content sections and get the one that belongs to the currently clicked header
    element:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 在此事件的回调函数内部，我们选择所有折叠内容部分，并获取属于当前点击的标题元素的部分：
- en: '[PRE52]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'When an accordion section is selected, we only want that one to be displayed.
    To do this, all of the content sections in the following code are looped through
    to hide them, apart from the selected section:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 选定折叠部分时，我们只想显示其中一个。为此，循环遍历以下代码中的所有内容部分以隐藏它们，除了所选部分：
- en: '[PRE53]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Using the jQuery `slideUp()` function, we can hide the elements with the slide
    effect. The arrow in the header is also changed to the right arrow, indicating
    that the content has not been expanded.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 jQuery 的`slideUp()`函数，我们可以隐藏带有滑动效果的元素。标题中的箭头也更改为右箭头，表示内容尚未展开。
- en: 'Finally, the selected content section is expanded and the down arrow added
    to indicate that the content has been expanded, as shown in the following code:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，扩展所选的内容部分，并添加向下箭头以指示内容已展开，如下代码所示：
- en: '[PRE54]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: See also
  id: totrans-233
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '*Creating a dynamic animated tree menu*'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建动态动画树菜单*'
- en: '*Creating tabbed content*'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建选项卡内容*'
- en: Creating tabbed content
  id: totrans-236
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建选项卡内容
- en: Similar to an accordion, tabbed content is another great way to display a lot
    of information on a single page, allowing users to skip through to the sections
    that are important to them. Like in the previous recipe, there are many jQuery
    plugins that provide this functionality. This recipe shows you how to create this
    functionality on your own from scratch, providing you with a deeper understanding
    of the inner workings of these types of user interfaces.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于手风琴，选项卡式内容是在单个页面上显示大量信息的另一种好方法，允许用户跳转到对他们重要的部分。与前一示例类似，有许多提供此功能的 jQuery 插件。本示例将向您展示如何从头开始创建此功能，使您更深入地了解这些类型的用户界面的内部工作原理。
- en: Getting ready
  id: totrans-238
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create the usual files required for a recipe, `recipe-9.html`, `recipe-9.css`,
    and `recipe-9.js`, in the same directory as the jQuery library.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 在与 jQuery 库相同的目录中创建用于示例的常规文件，`recipe-9.html`、`recipe-9.css` 和 `recipe-9.js`。
- en: How to do it…
  id: totrans-240
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Complete all of the following step-by-step instructions:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下逐步说明完成所有步骤：
- en: 'Create a basic web page in `recipe-9.html` using the following HTML code:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下 HTML 代码在`recipe-9.html`中创建一个基本的网页：
- en: '[PRE55]'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'In the `body` tags of the HTML page you just created, add the following HTML
    code to create the tabbed content:'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您刚创建的 HTML 页面的`body`标签中，添加以下 HTML 代码以创建选项卡式内容：
- en: '[PRE56]'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Open `recipe-9.css` and add the following CSS code to style the tabbed content
    and display the first set of content on page load:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`recipe-9.css`，添加以下 CSS 代码以样式化选项卡式内容，并在页面加载时显示第一组内容：
- en: '[PRE57]'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Insert the following jQuery in `recipe-9.js`:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`recipe-9.js`中插入以下 jQuery 代码：
- en: '[PRE58]'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Open `recipe-9.html` in a web browser and click on the section tabs to switch
    between the content sections.
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Web 浏览器中打开`recipe-9.html`，单击部分选项卡以在内容部分之间切换。
- en: How it works…
  id: totrans-251
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: 'This is a quick and simple recipe, but it has a powerful outcome. The HTML
    code in this recipe creates the tab section, which contains navigation and content.
    Each of the content division elements has an ID that corresponds to the links
    in the navigation. For example, to link to the `section1` content, there needs
    to be a corresponding link within the navigation linking to `#content1` as follows:
    `<a href=''#content1''>TITLE HERE</a>`. This allows jQuery to know which section
    of content to make visible when a tab is clicked.'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个快速简单的示例，但却具有强大的结果。此示例中的 HTML 代码创建了包含导航和内容的选项卡部分。每个内容分区元素都有一个与导航中的链接相对应的
    ID。例如，要链接到`section1`内容，需要在导航中有一个相应的链接链接到`#content1`，如下所示：`<a href='#content1'>标题在此</a>`。这使得
    jQuery 知道在点击选项卡时要显示哪个内容部分。
- en: The CSS in this recipe is very simple and needs no further explanation.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例中的 CSS 非常简单，无需进一步解释。
- en: 'With only nine lines of JavaScript, this is a very simple recipe indeed. The
    jQuery code attaches a click event handler to the document body, listening for
    clicks on the tab navigation. When one of these tabs is clicked, the content section
    ID is collected from the anchor hash as follows:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 仅用了九行 JavaScript，这是一个非常简单的示例。jQuery 代码将点击事件处理程序附加到文档主体，监听对选项卡导航的点击。当点击其中一个选项卡时，将从锚哈希中收集内容部分
    ID，如下所示：
- en: '[PRE59]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Next, the active class is removed from all of the tab navigation items and
    added to the clicked item. This class is used to show which tab is currently active
    by changing the background color using CSS as follows:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，从所有选项卡导航项中删除活动类，并将其添加到点击的项目中。此类用于通过 CSS 更改背景颜色来显示当前活动的选项卡，如下所示：
- en: '[PRE60]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Finally, all of the content sections are hidden, and then, using the recently
    acquired content ID of the selected tab, the chosen content is made visible using
    the `fadeIn()` function, applying an animation as the content appears:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，隐藏所有内容部分，然后使用最近获取的选定选项卡的内容 ID，使用`fadeIn()`函数使所选内容可见，当内容出现时应用动画：
- en: '[PRE61]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: There's more…
  id: totrans-260
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: This recipe uses the fade-in animation provided by jQuery to show the selected
    content. By looking back at [Chapter 4](ch04.html "Chapter 4. Adding Attractive
    Visuals with jQuery Effects"), *Adding Attractive Visuals with jQuery Effects*,
    you will be able to use any of the effects and animations described in that chapter
    to show and hide the content in this recipe.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例使用了 jQuery 提供的淡入动画来显示所选内容。通过回顾[第四章](ch04.html "第四章。使用 jQuery 效果添加吸引人的视觉效果")中的内容，*使用
    jQuery 效果添加吸引人的视觉效果*，你可以使用该章节中描述的任何效果和动画来显示和隐藏此示例中的内容。
- en: Creating a modal pop up
  id: totrans-262
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个模态弹出框
- en: A modal is a pop up within a web page that overlays over all other content and
    focuses the reader's attention. A modal is often opened based on user interaction,
    such as clicking a button. This recipe will show you how to create a simple modal
    that is opened at the pressing of a button and can be closed from within the modal.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 模态是网页内的一个弹出窗口，覆盖在所有其他内容之上，引起读者的注意。模态通常是基于用户交互而打开的，例如点击按钮。本示例将展示如何创建一个简单的模态，该模态在按下按钮时打开，并可以在模态内部关闭。
- en: Getting ready
  id: totrans-264
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Once again, create `recipe-10.html`, `recipe-10.css`, and `recipe-10.js` before
    you start this recipe, ensuring that the latest version of jQuery is available
    in the same directory as these files.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，在开始此示例之前，创建 `recipe-10.html`、`recipe-10.css` 和 `recipe-10.js`，确保最新版本的 jQuery
    可用于与这些文件相同的目录中。
- en: How to do it…
  id: totrans-266
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现…
- en: 'Perform the following steps to create the modal pop up:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤创建模态弹出框：
- en: 'Add the following HTML to `recipe-10.html` to create a basic web page and the
    code that constructs the modal pop up:'
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下 HTML 添加到 `recipe-10.html` 中，以创建一个基本的网页和构建模态弹出框的代码：
- en: '[PRE62]'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Add the following CSS code to `recipe-10.css` to style the modal and allow
    it to cover all other content on the page:'
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下 CSS 代码添加到 `recipe-10.css` 中，以样式化模态框并允许其覆盖页面上的所有其他内容：
- en: '[PRE63]'
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Add the following jQuery code to `recipe-10.js` to open the modal, center it,
    and allow the user to close it:'
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下 jQuery 代码添加到 `recipe-10.js` 中，以打开模态、将其居中并允许用户关闭它：
- en: '[PRE64]'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Open `recipe-10.html` in a web browser and click on the **Open Modal** button.
    You should be presented with the modal pop up shown in the following screenshot:![How
    to do it…](img/recipe-10.jpg)
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Web 浏览器中打开 `recipe-10.html`，然后点击 **打开模态框** 按钮。你将会看到如下截图中显示的模态弹出框：![如何实现…](img/recipe-10.jpg)
- en: How it works…
  id: totrans-275
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何运作…
- en: The HTML creates the basic web page and code to create the modal. The modal
    itself consists of a main modal container, a header, a body, and a footer. The
    footer contains the actions, which in this case is the **OK** button, the header
    holds the title and the close button, and the body contains the modal content.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: HTML 创建了基本的网页和创建模态的代码。模态本身包含一个主模态容器、一个标题、一个主体和一个页脚。页脚包含操作，本例中是 **确定** 按钮，标题包含标题和关闭按钮，主体包含模态内容。
- en: The CSS applies the absolute position style to the modal, allowing it to move
    freely throughout the page without being hindered by other content. To create
    the modal backdrop, its position is set to `absolute` and its left, right, top,
    and bottom positions are set to `0`, allowing it to expand and cover the entire
    page. A `z-index` value is set on the modal and its backdrop elements, ensuring
    that they always sit above other content and that the modal is above the backdrop.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: CSS 应用了绝对定位样式到模态，使其可以自由移动到页面上而不受其他内容的干扰。为了创建模态背景，其位置被设置为 `absolute`，其左、右、上和下位置被设置为
    `0`，使其可以扩展并覆盖整个页面。模态和其背景元素上设置了 `z-index` 值，确保它们始终位于其他内容之上，并且模态位于背景之上。
- en: The jQuery code applies click event handlers to the modal open button and any
    element that has the `close-modal` class. The `fadeIn()` and `fadeOut()` functions
    provided by jQuery are used to show the modal. The `fast` argument is passed to
    both of these functions to speed up the animation.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 代码将点击事件处理程序应用于模态打开按钮和任何具有 `close-modal` 类的元素。使用 jQuery 提供的 `fadeIn()`
    和 `fadeOut()` 函数来显示模态。对这两个函数都传递了 `fast` 参数，以加快动画速度。
- en: 'Additionally, the jQuery code is used to calculate the modal''s left position,
    allowing it to always sit at the center of the screen. The `modalPosition()` function
    is called on page load and when the browser window is resized as follows:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，jQuery 代码用于计算模态的左侧位置，使其始终位于屏幕中心。当页面加载时和当浏览器窗口大小调整时，调用 `modalPosition()` 函数如下：
- en: '[PRE65]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: This ensures that the modal will remain in the center of the browser window,
    even if the user changes the width of the window.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 这样可以确保无论用户如何改变窗口的宽度，模态都将保持在浏览器窗口的中心。
- en: The `modalPosition()` function uses the modal's width and the browser window's
    width to calculate the modal's left position. The function then uses the jQuery
    `css()` function to set this value to the modal.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '`modalPosition()` 函数使用模态的宽度和浏览器窗口的宽度来计算模态的左侧位置。然后，该函数使用 jQuery 的 `css()` 函数将此值设置为模态的位置。'
- en: There's more…
  id: totrans-283
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容…
- en: Twitter Bootstrap is a very popular HTML framework that comes with a brilliant
    modal implementation that is ready for use out of the box. Now that you know how
    modals work, you could benefit from the complete solution that Twitter Bootstrap
    offers.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: Twitter Bootstrap 是一个非常受欢迎的 HTML 框架，它带有一个非常出色的模态框实现，可以立即使用。现在你已经了解了模态框的工作原理，你可以受益于
    Twitter Bootstrap 提供的完整解决方案。
- en: See also
  id: totrans-285
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: '*Creating a draggable content pop up*'
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建一个可拖动的内容弹出框*'
- en: Creating a draggable content pop up
  id: totrans-287
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个可拖动的内容弹出框
- en: A draggable content pop up is similar to a modal window. However, it is movable
    by the user and does not come with a backdrop to focus the user's attention, allowing
    them to view other content at the same time. This recipe will adapt the modal
    code used in the preceding recipe and the jQuery code from the *Creating a basic
    drag-and-drop functionality* recipe that you saw earlier in this chapter.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 可拖动的内容弹出框类似于模态窗口。然而，它可以被用户移动，不会带有背景来引起用户的注意，可以让他们同时查看其他内容。这个教程将适配前一个教程中使用的模态框代码和本章前面看到的
    *创建基本的拖放功能* 教程中的 jQuery 代码。
- en: Getting ready
  id: totrans-289
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Even though we will be re-using code from previous chapters, ensure that you
    have `recipe-11.html`, `recipe-11.css`, and `recipe-11.js` created and ready for
    use.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 即使我们将重用之前章节中的代码，也确保你已经创建并准备好`recipe-11.html`、`recipe-11.css`和`recipe-11.js`。
- en: How to do it…
  id: totrans-291
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Perform the following steps:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤：
- en: 'Add the following HTML code to `recipe-11.html` to create a modal and a basic
    web page:'
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下 HTML 代码添加到`recipe-11.html`中，以创建一个模态框和一个基本的网页：
- en: '[PRE66]'
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Add the following CSS code to `recipe-11.css` to style the modal:'
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下 CSS 代码添加到`recipe-11.css`中以样式化模态框：
- en: '[PRE67]'
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Insert the following jQuery code into `recipe-11.js` to allow the modal to
    be opened, closed, and dragged:'
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下 jQuery 代码插入`recipe-11.js`中，以允许打开、关闭和拖动模态框：
- en: '[PRE68]'
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Open `recipe-11.html` in a web browser and click on the **Open Modal** button
    as in the previous recipe. You will be presented with the same modal pop up without
    the backdrop, allowing you to clearly see the rest of the page content. You will
    also be able to drag the modal around the page by clicking and dragging the mouse
    pointer.
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Web 浏览器中打开`recipe-11.html`，并像在前一个教程中一样点击**打开模态框**按钮。然后你将看到同样的模态弹出框，没有背景，可以清楚地看到页面的其他内容。你还可以通过点击和拖动鼠标指针来在页面上移动模态框。
- en: How it works…
  id: totrans-300
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The previous recipes that have been adapted to create the `draggable` content
    modal go into great detail to explain how the modal and the `draggable` elements
    work, so that will not be repeated in this section.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的一些适配过的食谱已经详细解释了模态框和`draggable`元素的工作原理，因此在本节中不会重复介绍。
- en: The main difference with the HTML from the previous modal recipe is that there
    is no modal backdrop and the modal element has the additional class `draggable`,
    which is used by jQuery to apply the drag functionality to elements.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 与前一个模态框食谱的 HTML 的主要区别是没有模态背景，而模态元素具有额外的`draggable`类，这是 jQuery 用于对元素应用拖放功能的。
- en: The CSS remains very much the same, except that the code for the backdrop has
    been removed and a drop shadow has been added to the modal using the CSS `box-shadow`
    attribute.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: CSS 仍然非常相似，只是背景的代码已被移除，并且使用 CSS `box-shadow`属性向模态框添加了阴影。
- en: The jQuery uses the same code as the previous modal recipe with the window resize
    event handler removed. This event handler was removed because the modal can be
    moved by the user, so there is no need to keep the modal toward the center of
    the page. The `modalPosition()` function is only called on page load so that the
    modal is at the center of the page when it is first opened.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 使用与前一个模态框教程相同的代码，只是移除了窗口调整大小事件处理程序。这个事件处理程序被移除，因为模态框可以被用户移动，所以没有必要保持模态框处于页面中心。`modalPosition()`函数只在页面加载时被调用，这样当首次打开模态框时，它就处于页面的中心位置。
- en: The code used from the basic drag-and-drop recipe is very similar, except that
    instead of using the `draggable` element's parent as the boundary, the browser
    window is used. This removes some complexity because we know that the window's
    left and right positions are always `0`.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 从基本的拖放食谱中使用的代码非常相似，唯一的区别是不再使用`draggable`元素的父元素作为边界，而是使用浏览器窗口。这消除了一些复杂性，因为我们知道窗口的左右位置始终是`0`。
- en: See also
  id: totrans-306
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: '*Creating a basic drag-and-drop functionality*'
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建基本的拖放功能*'
- en: '*Creating a modal pop up*'
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建一个模态弹出框*'
