- en: '9'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '9'
- en: Handling User Input & Forms with Form Actions
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用表单操作处理用户输入和表单
- en: Learning Objectives
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 学习目标
- en: 'By the end of this chapter, you will be able to do the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将能够做到以下几点：
- en: Describe the purpose of React form actions
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述 React 表单操作的目的
- en: Build and use custom form actions to handle form submissions
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建和使用自定义表单操作来处理表单提交
- en: Use the `useActionState()` Hook to manage form-dependent state
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `useActionState()` 钩子管理表单相关的状态
- en: Render a pending UI during submission via the `useFormStatus()` Hook
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过 `useFormStatus()` 钩子渲染提交期间的挂起 UI
- en: Perform optimistic state updates with the `useOptimistic()` Hook
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `useOptimistic()` 钩子执行乐观状态更新
- en: Implement both synchronous and asynchronous actions
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现同步和异步操作
- en: Introduction
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: In *Chapter 4* , *Working with Events and State* , you learned how to handle
    form submissions in React applications. And while there is absolutely nothing
    wrong with the approach shown there—indeed, it’s arguably the approach you’ll
    find in the majority of React projects—React provides an alternative way of handling
    form submissions when working in projects that use React version 19 or later.
    React 19 introduced a new feature called **actions** (also referred to as **form**
    **actions** throughout this chapter) that can simplify the process of handling
    form submissions, extracting user input, and providing validation feedback.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *第4章* ，*与事件和状态一起工作* 中，你学习了如何在 React 应用程序中处理表单提交。虽然那里展示的方法绝对没有问题——实际上，这可能是你在大多数
    React 项目中找到的方法——当在使用 React 19 或更高版本的项目中工作时，React 提供了一种处理表单提交的替代方法。React 19 引入了一个名为
    **actions**（在本章中也将称为 **表单 actions**）的新功能，它可以简化处理表单提交、提取用户输入和提供验证反馈的过程。
- en: This chapter will first revisit form submissions as introduced in *Chapter 4*
    and explore how user input can be extracted and validated. Thereafter, this chapter
    will introduce form actions and explain how to perform the same steps (handle
    submission, extract values, and validate values) using that feature. You will
    also learn about action-related React Hooks like `useActionState()` .
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将首先回顾 *第4章* 中介绍的表单提交，并探讨如何提取和验证用户输入。之后，本章将介绍表单操作，并解释如何使用该功能执行相同的步骤（处理提交、提取值和验证值）。你还将了解与操作相关的
    React 钩子，如 `useActionState()`。
- en: Handling Form Submissions without Actions
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理不带操作的表单提交
- en: As you learned in *Chapter 4* , *Working with Events and State* , when not using
    actions, you can handle form submissions by listening to the `submit` event via
    the `onSubmit` prop on the `<form>` element.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如你在 *第4章* ，*与事件和状态一起工作* 中所学，在不使用操作的情况下，你可以通过在 `<form>` 元素的 `onSubmit` 属性上监听
    `submit` 事件来处理表单提交。
- en: 'Consider the following example code snippet:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下示例代码片段：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You find the full working example on GitHub: [https://github.com/mschwarzmueller/book-react-key-concepts-e2/tree/09-form-actions/examples/01-form-submission-without-actions](https://github.com/mschwarzmueller/book-react-key-concepts-e2/tree/09-form-actions/examples/01-form-submission-without-actions)
    .'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 GitHub 上找到完整的示例：[https://github.com/mschwarzmueller/book-react-key-concepts-e2/tree/09-form-actions/examples/01-form-submission-without-actions](https://github.com/mschwarzmueller/book-react-key-concepts-e2/tree/09-form-actions/examples/01-form-submission-without-actions)。
- en: This code displays a form and handles its submission via the `handleSubmit()`
    function. This function automatically receives an `event` object, which is used
    to prevent the browser’s default behavior of sending an HTTP request to the server
    hosting the website.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码显示了一个表单，并通过 `handleSubmit()` 函数处理其提交。此函数自动接收一个 `event` 对象，用于防止浏览器向托管网站的服务器发送
    HTTP 请求的默认行为。
- en: But, of course, just handling the submission isn’t too useful. Typically, you
    also want to extract and use values entered by the website user.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，当然，仅仅处理提交并不太有用。通常，你还需要提取并使用网站用户输入的值。
- en: Extracting User Input
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提取用户输入
- en: 'When it comes to extracting values entered into a form, you have a couple of
    options:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到提取表单中输入的值时，你有几种选择：
- en: Track the values via state (i.e., by using `useState()` ), as described in *Chapter
    4* .
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过状态（即，使用 `useState()`）跟踪值，如 *第4章* 中所述。
- en: Rely on Refs via `useRef()` , as explained in *Chapter 7* , *Portals and Refs*
    .
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如 *第7章* ，*Portals 和 Refs* 中所述，通过 `useRef()` 依赖 Refs。
- en: Take advantage of the automatically created `event` object.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用自动创建的 `event` 对象。
- en: Tracking State
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 跟踪状态
- en: 'You can track the values entered by the user via state managed by `useState()`
    , as explained in *Chapter 4* . For example, the form input values from the previous
    code snippet can be tracked and used in `handleSubmit()` , as shown in the following
    example:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过 `useState()` 管理的状态跟踪用户输入的值，如 *第 4 章* 中所述。例如，可以从上一个代码片段中跟踪和使用表单输入值，如下面的示例所示：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In this updated example code snippet, the `useState()` Hook is used to manage
    `email` and `password` state values. The state values are updated with every keystroke
    on the input fields. As a result, the latest entered values are available inside
    of `handleSubmit()` when the form is submitted.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个更新的代码片段中，`useState()` 钩子用于管理 `email` 和 `password` 状态值。每当输入字段上的键入时，状态值都会更新。因此，当表单提交时，`handleSubmit()`
    中可以获取到最新的输入值。
- en: 'This approach works well and will be found in many React projects. However,
    there are some potential downsides to using state to track input values:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法效果很好，并且将在许多 React 项目中找到。然而，使用状态来跟踪输入值有一些潜在的缺点：
- en: Since the state is updated on every keystroke, and the component function is
    re-executed whenever some state value changes, application performance could suffer.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于状态在每次键入时都会更新，并且组件函数会在某个状态值更改时重新执行，因此应用程序的性能可能会受到影响。
- en: When working with more complex forms with more input fields, a lot of different
    state values may need to be managed.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当处理具有更多输入字段的更复杂表单时，可能需要管理许多不同的状态值。
- en: You can work around these issues by implementing code optimizations, which will
    be discussed in *Chapter 10* , *Behind the Scenes of React and Optimization Opportunities*
    , and by managing state as an object, as explained in *Chapter 11* , *Working
    with Complex State* .
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过实现代码优化（将在 *第 10 章* ，*React 的幕后场景和优化机会* 中讨论）以及按照 *第 11 章* ，*处理复杂状态* 中解释的方式将状态作为对象来管理，来绕过这些问题。
- en: But you could also consider using Refs to extract input values.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 但您也可以考虑使用 Refs 来提取输入值。
- en: Relying on Refs
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 依赖 Refs
- en: 'If you’re building a form where you don’t plan on setting input values, and
    where you instead only want to read those values upon form submission, using React’s
    ref feature (introduced in *Chapter 7* ) might make sense:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在构建一个不打算设置输入值，而只想在表单提交时读取这些值的表单，使用 React 的 ref 功能（在 *第 7 章* 中介绍）可能是有意义的：
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In this code block, the `useRef()` Hook is used to create two Refs that are
    connected to the email and password input fields. These Refs are then used to
    read the entered values inside of `handleSubmit()` .
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个代码块中，`useRef()` 钩子用于创建两个与电子邮件和密码输入字段连接的 Refs。然后，这些 Refs 被用于在 `handleSubmit()`
    中读取输入值。
- en: When using this approach, the `App` component function is not executed with
    every keystroke anymore. But you still have to write the code where the Refs are
    created via `useRef()` and where they are connected to the JSX elements via the
    `ref` prop.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用这种方法时，`App` 组件函数不再会在每次键入时执行。但您仍然需要编写通过 `useRef()` 创建 Refs 的代码，以及通过 `ref`
    属性将它们连接到 JSX 元素的代码。
- en: That’s why you could consider relying on the browser and the automatically created
    `event` object (which is received in `handleSubmit()` ), instead of using React
    features to extract those entered values.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 正因如此，您可以考虑依赖浏览器和自动创建的 `event` 对象（在 `handleSubmit()` 中接收），而不是使用 React 特性来提取这些输入值。
- en: Taking Advantage of the event Object
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 利用事件对象的优势
- en: In *Chapter 4* , *Working with Events and State* , you learned that the browser
    tries to send an HTTP request when a form is submitted. That’s why `event.preventDefault()`
    is called inside of `handleSubmit()` —this function call ensures that this request
    is not sent.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *第 4 章* ，*处理事件和状态* 中，您了解到当表单提交时，浏览器会尝试发送一个 HTTP 请求。这就是为什么在 `handleSubmit()`
    中调用 `event.preventDefault()` 的原因——这个函数调用确保这个请求不会被发送。
- en: However, the `event` object is not just useful for preventing that default.
    It also carries important information about the `submit` event that occurred.
    For example, you can get access to the underlying form DOM object (i.e., a JavaScript
    object that describes the rendered `<form>` element, its configuration, and its
    current status) via `event.currentTarget` .
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，`event` 对象不仅仅用于防止默认行为。它还携带有关发生的 `submit` 事件的 重要信息。例如，您可以通过 `event.currentTarget`
    获取底层表单 DOM 对象（即一个描述渲染的 `<form>` 元素、其配置及其当前状态的 JavaScript 对象）。
- en: This is very useful because you can pass that form DOM object to the `FormData`
    constructor function that is provided by the browser. This interface can be used
    to extract a form’s input field values.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这非常有用，因为你可以将该表单DOM对象传递给浏览器提供的`FormData`构造函数。这个接口可以用来提取表单的输入字段值。
- en: 'The following example shows the concrete usage of this feature:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例展示了该功能的具体用法：
- en: '[PRE3]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As you can see in the above code snippet, the form data object `fd` is constructed
    by instantiating `FormData` . As mentioned, the `FormData` interface is provided
    by the browser; hence, it doesn’t need to be imported from React or any other
    library.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如上代码片段所示，表单数据对象`fd`是通过实例化`FormData`来构建的。如前所述，`FormData`接口由浏览器提供；因此，不需要从React或任何其他库中导入。
- en: This form data object offers various methods that help with accessing form field
    values—for example, the `get()` method to extract the value of a specific input
    field. In order to identify the input field for which you want to get hold of
    the value, the `get()` method requires the name of the input field as an argument.
    That’s why you must also set the `name` prop on the form control elements (i.e.,
    on the `<input>` elements in the above example).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这个表单数据对象提供了各种方法来帮助访问表单字段值——例如，`get()`方法用于提取特定输入字段的值。为了确定你想要获取值的输入字段，`get()`方法需要一个输入字段名称作为参数。这就是为什么你必须在表单控件元素（即上面示例中的`<input>`元素）上设置`name`属性的原因。
- en: This approach has the advantage that you need neither state nor Refs; hence,
    slightly less code must be written. In addition, since almost no React features
    are used, this code will be less prone to break due to possible future React changes.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的优势在于你不需要状态或refs；因此，需要编写的代码略少。此外，由于几乎不使用任何React特性，这段代码不太可能因为未来的React变化而出现错误。
- en: Consequently, this approach might look like the best way of handling form submissions.
    But is it?
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这种方法可能看起来是处理表单提交的最佳方式。但这是真的吗？
- en: Which Solution Is Best?
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 哪个解决方案最好？
- en: There is no right or wrong way of handling form submissions. Besides personal
    preference, application requirements also might favor one approach over the others.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 处理表单提交没有正确或错误的方式。除了个人偏好外，应用程序的要求也可能使一种方法优于其他方法。
- en: For example, if your application needs to change the input values, using only
    `FormData` as shown above would not be ideal, since you would have to write imperative
    code to update an input field.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你的应用程序需要更改输入值，仅使用上面显示的`FormData`可能不是最佳选择，因为你将不得不编写命令式代码来更新输入字段。
- en: 'That’s a problem because, as explained in *Chapter 1* , *React – What and Why?*
    , you should avoid writing code like this in your React apps:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个问题，因为，如*第一章*中所述，*React – 什么是和为什么？*，你应该避免在你的React应用程序中编写这样的代码：
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Thus, if you need to edit an input’s value, using state (i.e., `useState()`
    ) is preferable:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果你需要编辑输入值，使用状态（即`useState()`）是首选：
- en: '[PRE5]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Even if you don’t need to update any input fields, the `event` object and `FormData`
    alone might not do the trick.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 即使你不需要更新任何输入字段，仅使用`event`对象和`FormData`可能也不够。
- en: For example, if you need to access the input fields outside of `handleSubmit()`
    , the `event` object is not available. As a result, interacting with the form
    element and its child elements is not possible via the `event` object. In such
    scenarios, working with Refs that are directly connected to the individual input
    elements will likely simplify things.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你需要在`handleSubmit()`之外访问输入字段，则`event`对象不可用。结果，通过`event`对象与表单元素及其子元素交互是不可能的。在这种情况下，使用直接连接到单个输入元素的refs可能会简化问题。
- en: 'The following example uses a ref to call the `<input>` element’s built-in `focus()`
    method inside of a function:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例使用ref来在函数内部调用`<input>`元素的内置`focus()`方法：
- en: '[PRE6]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: So, as you can see, there is no silver bullet. All these React features and
    different ways of handling form submissions exist for good reasons. You can mix
    and match them as needed; therefore, it’s helpful to be aware of these different
    options.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，正如你所见，没有一劳永逸的解决方案。所有这些React特性和处理表单提交的不同方式都存在合理的理由。你可以根据需要混合使用它们；因此，了解这些不同的选项是有帮助的。
- en: But even though there are already a couple of ways of handling form submissions,
    with React 19, there’s yet another one.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管已经有几种处理表单提交的方法，但React 19又提供了一种新的方法。
- en: Handling Form Submissions with Actions
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用动作处理表单提交
- en: 'React 19 introduced the concept of (form) actions—a concept that actually consists
    of two kinds of actions: **client actions** and **server actions** . Both types
    of actions can help with handling form submissions, but for the purpose of this
    chapter, the term **form actions** will be used to describe client actions (i.e.,
    form actions that execute in the website user’s browser). Server actions will
    be covered separately in *Chapter 16* , *React Server Components & Server Actions*
    .'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: React 19 引入了（表单）动作的概念——这个概念实际上包含两种类型的动作：**客户端动作**和**服务器动作**。这两种类型的动作都可以帮助处理表单提交，但为了本章节的目的，术语**表单动作**将用于描述客户端动作（即，在网站用户的浏览器中执行的表单动作）。服务器动作将在第
    16 章*React 服务器组件与服务器动作*中单独介绍。
- en: Form actions were introduced to simplify the process of handling form submissions
    and data extraction—especially when building full stack apps with server actions.
    Furthermore, they can also be very useful when combined with some new React Hooks,
    which will be discussed later in this chapter.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 表单动作的引入是为了简化处理表单提交和数据提取的过程——尤其是在构建带有服务器动作的全栈应用程序时。此外，当与一些新的 React Hooks 结合使用时，它们也非常有用，这些
    Hooks 将在本章的后面讨论。
- en: 'Here’s how a form submission can be handled via a client form action:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是如何通过客户端表单动作处理表单提交的示例：
- en: '[PRE7]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'At first sight, this example may look very similar to the code snippet where
    the `event` object and `currentTarget` were used to derive the `FormData` . But
    if you take a closer look, you’ll see that there are some key differences:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 初看，这个例子可能看起来与使用 `event` 对象和 `currentTarget` 来推导 `FormData` 的代码片段非常相似。但如果你仔细观察，你会发现一些关键的区别：
- en: '`handleSubmit` was renamed `submitAction` and accepts a parameter named `formData`
    instead of `event` .'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`handleSubmit` 已更名为 `submitAction`，并接受一个名为 `formData` 的参数，而不是 `event`。'
- en: The `<form>` element no longer has the `onSubmit` prop—instead, it now has an
    `action` prop that points at the `submitAction` function.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<form>` 元素不再有 `onSubmit` 属性——相反，现在它有一个指向 `submitAction` 函数的 `action` 属性。'
- en: The name change of the function is optional; there is no technical requirement
    to name this function `submitAction` or anything like that. But changing the name
    makes sense because the function no longer directly handles the `submit` event.
    Instead, it’s used as a value for the newly added `action` prop.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 函数名称更改是可选的；没有技术要求必须将此函数命名为 `submitAction` 或类似名称。但更改名称是有意义的，因为该函数不再直接处理 `submit`
    事件。相反，它被用作新添加的 `action` 属性的值。
- en: 'And that’s precisely what React’s form action feature is all about: setting
    the `action` prop of a `<form>` element to a function that React will then invoke
    on your behalf when the form is submitted. However, unlike when using the `onSubmit`
    prop, React will prevent the browser default and create a form data object for
    you (and pass that object as an argument to the action function).'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这正是 React 的表单动作功能的核心所在：将 `<form>` 元素的 `action` 属性设置为函数，当表单提交时，React 将代表你调用该函数。然而，与使用
    `onSubmit` 属性不同，React 将阻止浏览器默认行为，并为你创建一个表单数据对象（并将该对象作为参数传递给动作函数）。
- en: You no longer have to perform these steps manually, and as a result, the form
    submission can be handled with a minimal amount of code.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 你不再需要手动执行这些步骤，因此，表单提交可以用最少的代码来处理。
- en: Of course, if you need to set and manage the input values manually, or if you
    need to interact with the form fields at some point (e.g., to call `focus()` ),
    you’ll still need to work with state or Refs. But if you’re just trying to handle
    the submission and get hold of the entered values, using the form actions feature
    can be very handy.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，如果你需要手动设置和管理输入值，或者在某些时候需要与表单字段交互（例如，调用 `focus()`），你仍然需要与状态或 Refs 一起工作。但如果你只是尝试处理提交并获取输入值，使用表单动作功能将非常方便。
- en: But form actions are not just useful because they may require less code.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 但表单动作之所以有用，不仅仅是因为它们可能需要更少的代码。
- en: Synchronous vs Asynchronous Actions
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 同步动作与异步动作
- en: Client form actions can be either synchronous or asynchronous, which means you
    can also use and return a `Promise` in the action function. Therefore, you can
    also use `async / await` with that function.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端表单动作可以是同步的，也可以是异步的，这意味着你还可以在动作函数中使用并返回一个 `Promise`。因此，你还可以使用 `async / await`
    与该函数一起使用。
- en: 'For example, if you have a form in an application that aims to store some task
    data in the browser’s storage (via the `localStorage` API), you can do that with
    a synchronous action (since `localStorage` is a synchronous API):'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你有一个旨在将一些任务数据存储在浏览器存储中的表单（通过`localStorage` API），你可以使用同步操作来完成（因为`localStorage`是一个同步API）：
- en: '[PRE8]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This action function is synchronous, since it doesn’t return a `Promise` or
    use `async / await` . Therefore, as you can see, all form action examples thus
    far have used synchronous actions.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这个操作函数是同步的，因为它不返回`Promise`或使用`async / await`。因此，正如你所看到的，迄今为止的所有表单操作示例都使用了同步操作。
- en: 'But if you’re working on a project that needs to submit entered data to a backend
    via an HTTP request, you can take advantage of the support for asynchronous code:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果你正在开发一个需要通过HTTP请求将输入数据提交到后端的项目，你可以利用对异步代码的支持：
- en: '[PRE9]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In this example, the `async` keyword is added in front of the function. This
    converts the function into an asynchronous one that will return a `Promise` .
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，在函数前添加了`async`关键字。这会将函数转换为异步函数，该函数将返回一个`Promise`。
- en: This flexibility offered by React’s form actions feature is very useful, since
    it allows you to perform a broad variety of operations upon form submission. However,
    it is important to keep in mind that, for now, all these actions always execute
    on the client side, i.e., in the browser of the website visitor. Server-side actions
    will be explored in *Chapter 16* .
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: React表单操作功能提供的这种灵活性非常有用，因为它允许你在表单提交时执行各种操作。然而，重要的是要记住，目前所有这些操作都是在客户端执行的，即在网站访问者的浏览器中。服务器端操作将在*第16章*中探讨。
- en: 'Behind the Scenes: Actions Are Transitions'
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 底层：操作是过渡
- en: Before diving deeper into form actions, it may be helpful to take a brief look
    under the hood.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入研究表单操作之前，简要地看看底层可能有所帮助。
- en: This is because, technically, actions (i.e., both client and server actions)
    in React are so-called **transitions** . To be precise, they are asynchronous
    transitions.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为，从技术上讲，React中的操作（即客户端和服务器操作）被称为所谓的**过渡**。更准确地说，它们是异步过渡。
- en: Thus, the question is, what’s a transition in React?
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，问题是，React中的过渡是什么？
- en: In a React app, a transition is a concept, where React will ensure that some
    potentially time-consuming state updates will not block UI updates.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在React应用中，过渡是一个概念，React将确保一些可能耗时的状态更新不会阻塞UI更新。
- en: Form actions can be considered (potentially) time-consuming state updates; hence,
    under the hood, React handles them such that the remaining UI will stay responsive.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 表单操作可以被认为是（潜在的）耗时的状态更新；因此，在底层，React以使其剩余UI保持响应性的方式处理它们。
- en: 'As a result, any state updating calls you make inside a form action function
    will only be processed by React once that form action is done. For example, the
    following code will, probably unexpectedly, only update the UI after three seconds:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，你在一个表单操作函数内部做出的任何状态更新调用都只会在该表单操作完成后由React处理。例如，以下代码可能会出乎意料地只更新UI三秒后：
- en: '[PRE10]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Even though the `error` state is updated before the delay starts, React will
    not re-execute the component function (and, therefore, update the UI) before the
    form action as a whole is done. Therefore, the error message only shows up on
    the screen after three seconds.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 即使在延迟开始之前更新了`error`状态，React也不会在表单操作整体完成之前重新执行组件函数（因此，更新UI）。因此，错误信息只会在三秒后出现在屏幕上。
- en: '![A screenshot of a computer  Description automatically generated](img/B31339_09_01.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![计算机屏幕截图  自动生成的描述](img/B31339_09_01.png)'
- en: 'Figure 9.1: The error message only shows up with a delay'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.1：错误信息会延迟显示
- en: '**Note**'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: 'You find the complete example code on GitHub: [https://github.com/mschwarzmueller/book-react-key-concepts-e2/tree/09-form-actions/examples/08-transition](https://github.com/mschwarzmueller/book-react-key-concepts-e2/tree/09-form-actions/examples/08-transition)
    .'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在GitHub上找到完整的示例代码：[https://github.com/mschwarzmueller/book-react-key-concepts-e2/tree/09-form-actions/examples/08-transition](https://github.com/mschwarzmueller/book-react-key-concepts-e2/tree/09-form-actions/examples/08-transition)。
- en: Managing State Based on Form Submissions
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于表单提交管理状态
- en: When handling form submissions, it’s quite common that you may also want to
    update the UI after the submission. For asynchronous actions, where the executed
    operation may take a couple of seconds (depending on the operation, of course),
    you might even want to update the UI during the submission, showing some pending
    state while the submitted form is being processed.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理表单提交时，您可能还希望在提交后更新UI。对于异步操作，执行的操作可能需要几秒钟（当然，这取决于操作），您甚至可能希望在提交过程中更新UI，显示一些挂起状态，同时提交的表单正在处理中。
- en: 'React aims to help you with both requirements by offering two specific form
    action-related Hooks: `useActionState()` and `useFormStatus()` .'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: React旨在通过提供两个特定的表单操作相关的Hooks来帮助您满足这两个要求：`useActionState()`和`useFormStatus()`。
- en: Updating UI State with useActionState()
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用useActionState()更新UI状态
- en: React provides a Hook called `useActionState()` , which is meant to be used
    in conjunction with form actions—no matter whether you work with client or server
    actions.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: React提供了一个名为`useActionState()`的Hook，它旨在与表单操作一起使用——无论您是处理客户端还是服务器操作。
- en: The goal of this Hook is to help you update the application’s UI based on the
    result of a form action.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这个Hook的目标是帮助您根据表单操作的结果更新应用程序的UI。
- en: 'This can, for example, be helpful to validate form input values and show an
    error message if there is invalid input. To perform this task, the `useActionState()`
    Hook can be imported from the `react` package and used like this:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这可以帮助验证表单输入值，并在输入无效时显示错误消息。为了执行此任务，可以从`react`包中导入`useActionState()` Hook并按如下方式使用：
- en: '[PRE11]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: When running this example application, users will see validation error messages
    if there is invalid input.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 当运行此示例应用程序时，如果存在无效输入，用户将看到验证错误消息。
- en: '![A screenshot of a computer  Description automatically generated](img/B31339_09_02.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![计算机屏幕截图  自动生成的描述](img/B31339_09_02.png)'
- en: 'Figure 9.2: An error message is shown when submitting an empty input field'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.2：提交空输入字段时显示错误消息
- en: 'A couple of things are going on in this code example:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个代码示例中发生了一些事情：
- en: 'The form action function was changed to accept two parameters instead of just
    one: a previous state ( `prevState` ) and the submitted data ( `formData` ).'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表单操作函数已被修改为接受两个参数而不是一个：前一个状态（`prevState`）和提交的数据（`formData`）。
- en: 'The form action now also returns a value: an object with a key named `error`
    that contains an error message or `null` .'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在表单操作也返回一个值：一个包含名为`error`的键的对象，其中包含错误消息或`null`。
- en: 'The `useActionState()` Hook is imported and used: it receives the form action
    function ( `storeTodoAction` ) as a first argument, and some initial state object
    ( `{error: null}` in this case) as a second argument.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`useActionState()` Hook被导入并使用：它接收表单操作函数（`storeTodoAction`）作为第一个参数，以及一些初始状态对象（在这种情况下为`{error:
    null}`）作为第二个参数。'
- en: 'The `useActionState()` Hook also returns a value: an array from which two elements
    are destructured ( `formState` and `formAction` ).'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`useActionState()` Hook也返回一个值：一个数组，从中解构出两个元素（`formState`和`formAction`）。'
- en: The destructured `formAction` replaces `storeTodoAction` as a value for the
    `<form>` 's `action` prop.
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解构的`formAction`取代了`storeTodoAction`作为`<form>`的`action`属性的值。
- en: '`formState` is used to conditionally display the value stored in the `error`
    key of `formState` .'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`formState`用于有条件地显示存储在`formState`的`error`键中的值。'
- en: So, as you can see, `useActionState()` is a Hook that expects a form action
    function (synchronous or asynchronous) as a first argument and an initial state
    as a second input. That initial state is required to have some state available
    if the form has not been submitted yet. After form submission, the initial state
    will be replaced by new state values returned by the form action function.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如您所见，`useActionState()`是一个Hook，它期望一个表单操作函数（同步或异步）作为第一个参数，以及一个初始状态作为第二个输入。这个初始状态需要有一些状态可用，如果表单尚未提交。在表单提交后，初始状态将被表单操作函数返回的新状态值所取代。
- en: 'Since the purpose of `useActionState()` is to provide some state value that
    can be used to update (parts of) the UI, that derived state is exposed via the
    value returned by `useActionState()` :'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`useActionState()`的目的在于提供一些可以用来更新（部分）UI的状态值，因此这个派生状态通过`useActionState()`返回的值暴露出来：
- en: '[PRE12]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'That returned value is an array with exactly three elements, in the following
    order:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的值是一个包含恰好三个元素的数组，顺序如下：
- en: The current state value, which is either the initial state (if the form wasn’t
    submitted yet) or the state value returned by the form action function.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当前状态值，要么是初始状态（如果表单尚未提交），要么是表单操作函数返回的状态值。
- en: An updated form action function, which is essentially your action function,
    wrapped by React. This is necessary so that React gets access to the value returned
    by your action function (which is the new state).
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个更新的表单操作函数，本质上就是你的操作函数，由React包装。这是必要的，以便React能够访问你的操作函数返回的值（即新状态）。
- en: A boolean value that indicates whether the form is currently being submitted
    or not. This third element is not used in the previous code example and will be
    discussed in the *Managing Pending UI State* section of this chapter.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个布尔值，表示表单当前是否正在提交。这个第三个元素在之前的代码示例中没有使用，将在本章的“管理待处理UI状态”部分进行讨论。
- en: Therefore, when using `useActionState()` , you no longer bind your action function
    to the `action` prop of the `<form>` element. Instead, you use the action function
    created by `useActionState()` —i.e., you use the action function that wraps your
    action function.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当使用`useActionState()`时，你不再将你的操作函数绑定到`<form>`元素的`action`属性上。相反，你使用由`useActionState()`创建的操作函数——即你使用包装你的操作函数的操作函数。
- en: 'When using `useActionState()` , you also must adjust your form action function
    because React will call your function with two arguments instead of just one:
    the previous state and the submitted form data:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用`useActionState()`时，你还必须调整你的表单操作函数，因为React将使用两个参数调用你的函数，而不是一个：前一个状态和提交的表单数据：
- en: '[PRE13]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The previous form state is passed to your action function so that you can use
    it to derive your new state from it (in conjunction with the submitted form data).
    In the above example, this is actually not the case—the previous state parameter
    is not used there. It must be accepted as a parameter nonetheless.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 将前一个表单状态传递给你的操作函数，这样你就可以使用它来从它推导出你的新状态（与提交的表单数据结合使用）。在上面的示例中，这实际上并不是这样——前一个状态参数在那里没有被使用。尽管如此，它仍然必须作为参数接受。
- en: 'However, that’s not the only change made to the form action function. Instead,
    it should now also return a new state value that will then be exposed to the component
    function by `useActionState()` (via the first element in the array returned by
    `useActionState()` ):'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，对表单操作函数所做的更改不止这些。相反，现在它还应该返回一个新的状态值，然后通过`useActionState()`（通过`useActionState()`返回的数组中的第一个元素）暴露给组件函数：
- en: '[PRE14]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: That state value can be anything—a string, a number, an array, an object, etc.
    In the previous code example, it’s an object with a key named `error` that holds
    either `null` or a string error message.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 该状态值可以是任何东西——一个字符串、一个数字、一个数组、一个对象等。在之前的代码示例中，它是一个具有名为`error`的键的对象，该键包含`null`或一个字符串错误消息。
- en: Whenever the form is submitted, and the form action function is therefore executed
    or returns a value, `useActionState()` will trigger React to re-execute the surrounding
    component function. Hence, the updated state is made available. If that sounds
    familiar to `useState()` , you’re right! `useActionState()` is essentially like
    `useState()` , fine-tuned to derive state from actions.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 每当表单提交时，因此表单操作函数被执行或返回一个值，`useActionState()`将触发React重新执行周围的组件函数。因此，更新后的状态变得可用。如果你觉得这与`useState()`相似，你是对的！`useActionState()`本质上就像`useState()`，但经过微调，可以从操作中推导状态。
- en: '`useActionState()` is, therefore, definitely an important Hook, although it’s
    actually not limited to just exposing the values returned by your actions to component
    functions.'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`useActionState()`肯定是一个重要的Hook，尽管它实际上并不仅限于仅将你的操作函数返回的值暴露给组件函数。
- en: Managing Pending UI State with useActionState()
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用`useActionState()`管理待处理UI状态
- en: Consider a scenario where you have a form action that takes a couple of seconds
    to finish its operation. For example, you could have an action that sends a request
    to a slow server or via a slow internet connection. In such scenarios, you might
    want to update the UI during the form submission to show the user that something
    is happening.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个场景，你有一个表单操作需要几秒钟才能完成其操作。例如，你可以有一个向慢速服务器或通过慢速互联网连接发送请求的操作。在这种情况下，你可能想在表单提交期间更新UI，以向用户显示正在发生某些事情。
- en: 'In the following example, a function named `saveTodo()` is called from inside
    the form action. That function adds a deliberate delay of three seconds to simulate
    a slow network or server:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例中，从表单操作内部调用了名为`saveTodo()`的函数。该函数故意延迟三秒钟来模拟缓慢的网络或服务器：
- en: '[PRE15]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'When using form actions, like in this example, updating the UI while the form
    submission is handled is relatively easy because `useActionState()` exposes a
    third element in its returned array: a boolean that indicates whether the action
    is currently executing or not.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用表单操作，如本例所示，在处理表单提交时更新UI相对容易，因为`useActionState()`在其返回的数组中暴露了第三个元素：一个布尔值，指示操作是否正在执行。
- en: 'The above example can, therefore, be adjusted like this to take advantage of
    that boolean value:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，上述示例可以调整如下，以利用该布尔值：
- en: '[PRE16]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The `pending` element is retrieved from the array via destructuring, and then
    it is used to disable the `<button>` and update the button text.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 通过解构从数组中检索`pending`元素，然后使用它来禁用`<button>`并更新按钮文本。
- en: As a result, the UI changes once the form is submitted—until it’s done after
    three seconds (in this case, due to the delay added in the `saveTodo()` function
    earlier).
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，一旦表单提交，UI就会发生变化——直到三秒后完成（在这种情况下，由于之前在`saveTodo()`函数中添加的延迟）。
- en: '![A screenshot of a computer  Description automatically generated](img/B31339_09_03.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![计算机截图，描述自动生成](img/B31339_09_03.png)'
- en: 'Figure 9.3: The button is disabled and shows Saving Todo fallback text during
    form submission'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.3：按钮在表单提交期间被禁用，并显示“保存待办”回退文本
- en: Handling Pending UI State with useFormStatus()
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用`useFormStatus()`处理待处理UI状态
- en: The `pending` element returned by `useActionState()` is a simple and straightforward,
    but not the only, way of updating the UI while a form action executes.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`useActionState()`返回的`pending`元素是一个简单直接的方法，但不是唯一的方法，在表单操作执行时更新UI。'
- en: React also offers a `useFormStatus()` Hook that provides information about the
    current form submission status. To be precise, it’s the `react-dom` package (not
    `react` !) that exports this `useFormStatus()` Hook.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: React还提供了一个`useFormStatus()` Hook，它提供了有关当前表单提交状态的信息。更准确地说，这是`react-dom`包（而不是`react`！）导出的`useFormStatus()`
    Hook。
- en: Unlike `useActionState()` , `useFormStatus()` must be called in some nested
    component that’s wrapped by the `<form>` element whose submission status you’re
    interested in.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 与`useActionState()`不同，`useFormStatus()`必须在某个嵌套组件中调用，该组件被包裹在您感兴趣的提交状态的`<form>`元素中。
- en: 'You could, for example, build a `SubmitButton` component that’s defined and
    used as shown in this code snippet:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，您可以构建一个`SubmitButton`组件，如以下代码片段所示：
- en: '[PRE17]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In this example, the actual code to send the to-do to a backend server is extracted
    into a separate `saveTodo()` function that’s stored in a `todo.js` file. That
    function contains the same code that was shown in earlier examples (i.e., it sends
    an HTTP request to JSONPlaceholder). In addition, `useActionState()` is removed
    to make the code a bit shorter and simpler again. However, you can absolutely
    use `useActionState()` in conjunction with `useFormStatus()` . For example, you
    could use `useActionState()` to output validation errors while managing the submit
    button’s `disabled` state via `useFormStatus()` in a separate, nested component.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，将待办事项发送到后端服务器的实际代码被提取到一个单独的`saveTodo()`函数中，该函数存储在`todo.js`文件中。该函数包含与之前示例中相同的代码（即，它向JSONPlaceholder发送HTTP请求）。此外，移除了`useActionState()`以使代码更短、更简单。然而，您绝对可以在`useFormStatus()`与`useActionState()`结合使用。例如，您可以使用`useActionState()`输出验证错误，同时在单独的嵌套组件中通过`useFormStatus()`管理提交按钮的`disabled`状态。
- en: '`useFormStatus()` is imported from `react-dom` and called inside the `SubmitButton`
    component function. It returns an object that contains a `pending` property yielding
    a boolean value.'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '`useFormStatus()`从`react-dom`导入，并在`SubmitButton`组件函数内部调用。它返回一个包含一个`pending`属性，该属性产生一个布尔值的对象。'
- en: As mentioned before, `useFormStatus()` can’t be used in the component where
    the `<form>` element is rendered. Instead, it must be used in a nested component—that’s
    why the `<SubmitButton>` component is placed between the `<form>` tags.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，`useFormStatus()`不能用于渲染`<form>`元素的组件中。相反，它必须在嵌套组件中使用——这就是为什么`<SubmitButton>`组件被放置在`<form>`标签之间。
- en: 'Besides `pending` , the object returned by `useFormStatus()` also holds three
    other properties:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`pending`之外，`useFormStatus()`返回的对象还包含三个其他属性：
- en: '`data` : A `FormData` object that contains the data with which the parent `<form>`
    was submitted (i.e., the same kind of data that the form action function receives).'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data`：一个`FormData`对象，包含提交父`<form>`时使用的数据（即，与表单操作函数接收的数据相同）。'
- en: '`method` : A string value that’s either `''get''` or `''post''` , reflecting
    the value to which the method prop on the `<form>` element was set. By default,
    it’s `''get''` .'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`method`：一个字符串值，可以是 `''get''` 或 `''post''` ，反映 `<form>` 元素的 `method` 属性设置的值。默认情况下，它是
    `''get''` 。'
- en: '`action` : A pointer to the form action function that’s connected to the `<form>`
    .'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`action`：指向与 `<form>` 相连的表单操作函数的指针。'
- en: If you only care about the pending status, you can, of course, either use `useActionState()`
    or `useFormStatus()` . Working with `useActionState()` has the advantage that
    no separate nested component must be built. On the other hand, creating such an
    extra component and relying on `useFormStatus()` might be useful if you have multiple
    forms on the page—you could then, for example, reuse the `<SubmitButton>` across
    all those forms.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只关心待处理状态，当然你可以使用 `useActionState()` 或 `useFormStatus()` 。使用 `useActionState()`
    的优点是无需构建单独的嵌套组件。另一方面，如果你在页面上有多个表单，创建这样一个额外的组件并依赖于 `useFormStatus()` 可能是有用的——例如，你可以在所有这些表单中重用
    `<SubmitButton>`。
- en: Performing Optimistic Updates
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行乐观更新
- en: 'Besides `useActionState()` and `useFormStatus()` , React offers one last important
    Hook related to forms and form actions: the `useOptimistic()` Hook.'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 `useActionState()` 和 `useFormStatus()` ，React还提供了一个与表单和表单操作相关的重要的最后一个Hook：`useOptimistic()`
    Hook。
- en: The idea behind this Hook is that you can use it to show some temporary, optimistic
    UI while an asynchronous form action (which may take a couple of seconds) is underway.
    “Optimistic” means that you can use this Hook to render a UI that would normally
    only exist after the form submission is finished (e.g., a list of to-dos that
    already includes the newly submitted to-do).
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 这个Hook背后的想法是，你可以用它来显示一些临时的、乐观的UI，同时异步表单操作（可能需要几秒钟）正在进行中。“乐观”意味着你可以使用这个Hook来渲染通常只有在表单提交完成后才存在的UI（例如，已经包括新提交的任务的待办事项列表）。
- en: 'The following example code manages a to-do list with the help of a `<form>`
    and form action, but without using `useOptimistic()` :'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例代码使用 `<form>` 和表单操作管理待办事项列表，但没有使用 `useOptimistic()` ：
- en: '[PRE18]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In this example, since the `saveTodo()` function again has a built-in deliberate
    delay of three seconds, the website user sees the outdated to-do list until the
    form submission process is completed.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，由于 `saveTodo()` 函数再次内置了三秒钟的故意延迟，网站用户会看到过时的待办事项列表，直到表单提交过程完成。
- en: '![img](img/B31339_09_04.png)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![img](img/B31339_09_04.png)'
- en: 'Figure 9.4: Without optimistic updating, the UI updates are delayed'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.4：没有乐观更新时，UI更新被延迟
- en: The user experience can, therefore, be improved by introducing the `useOptimistic()`
    Hook.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，可以通过引入 `useOptimistic()` Hook来提高用户体验。
- en: 'This Hook requires two arguments and returns an array with exactly two elements:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 这个Hook需要两个参数，并返回一个包含恰好两个元素的数组：
- en: '[PRE19]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '`state` (the first argument) is the component state that should be active initially
    or if no form action is pending.'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`state`（第一个参数）是初始时应处于活动状态或没有待处理的表单操作时的组件状态。'
- en: '`updateFunction` (the second argument) is a function defined by you that controls
    how the state should be updated optimistically.'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`updateFunction`（第二个参数）是你定义的函数，它控制状态应该如何乐观地更新。'
- en: '`optimisticState` is the optimistically updated state that will be active during
    the form action execution.'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`optimisticState` 是在表单操作执行期间将处于活动状态的乐观更新状态。'
- en: '`addOptimistic` triggers `updateFunction` and allows you to pass a value to
    that function.'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`addOptimistic` 触发 `updateFunction` 并允许你向该函数传递一个值。'
- en: 'Applied to the above example, `useOptimistic()` can be used to manage an alternative,
    optimistically updated to-dos array that will be active as long as the form action
    is executing. Thereafter, the regular state will be active again (and update the
    UI accordingly):'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 应用到上述示例中，`useOptimistic()` 可以用来管理一个替代的、乐观更新的待办事项数组，只要表单操作正在执行，这个数组就会是活动的。之后，常规状态将再次变得活跃（并相应地更新UI）：
- en: '[PRE20]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: As you can see in this example, the `optimisticTodos` state is now used in the
    JSX code. The value stored in that constant is either the normal `todos` state
    (managed by `useState()` ), if the `storeTodoAction()` form action is not executing,
    or it’s the array derived by the function passed to `useOptimistic()` (as the
    second argument).
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 如此例所示，`optimisticTodos` 状态现在被用于JSX代码中。该常量中存储的值要么是正常的 `todos` 状态（由 `useState()`
    管理），如果 `storeTodoAction()` 表单操作没有执行，要么是传递给 `useOptimistic()` 的函数生成的数组（作为第二个参数）。
- en: '![img](img/B31339_09_05.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![img](img/B31339_09_05.png)'
- en: 'Figure 9.5: With useOptimistic(), the UI updates right away after submission'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.5：使用 `useOptimistic()` 后，提交后UI立即更新
- en: Using the `useOptimistic()` Hook can, therefore, help with building a great
    user experience where your application provides instant feedback, even if some
    slow processes might still be running in the background. Since the temporary optimistic
    state will always be replaced with the regular state (i.e., the `todos` state)
    once the form submission is done, there also is no risk of displaying an incorrect
    UI. If an operation fails, React will automatically replace the temporarily incorrect
    UI with the correct one when it falls back to using the regular state.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `useOptimistic()` 钩子可以帮助构建一个出色的用户体验，即使某些慢速进程可能仍在后台运行，您的应用程序也能提供即时反馈。由于一旦表单提交完成，临时的乐观状态总会被常规状态（即
    `todos` 状态）所取代，因此也不会有显示不正确用户界面的风险。如果操作失败，React 将会自动将暂时不正确的用户界面替换为正确的界面，当它回退到使用常规状态时。
- en: Summary and Key Takeaways
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要和关键要点
- en: Form submissions can be handled by manually listening to the `submit` event
    via the `onSubmit` prop.
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表单提交可以通过手动监听 `submit` 事件通过 `onSubmit` 属性来处理。
- en: Alternatively, form actions can be used—i.e., functions bound to the `action`
    prop of a `<form>` element.
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 或者，可以使用表单操作——即绑定到 `<form>` 元素的 `action` 属性的函数。
- en: When handling form submission manually (via `onSubmit` ), you can extract form
    field values with the help of state ( `useState()` ), Refs ( `useRef()` ), or
    by creating a `FormData` object from `event.currentTarget` .
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当手动处理表单提交（通过 `onSubmit`）时，您可以使用状态（`useState()`）、Refs（`useRef()`）或从 `event.currentTarget`
    创建一个 `FormData` 对象来提取表单字段值。
- en: When using form actions, a form data object with the form field input values
    is automatically passed to the action function as a parameter.
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当使用表单操作时，一个包含表单字段输入值的表单数据对象会自动作为参数传递给操作函数。
- en: The `useActionState()` Hook can be utilized to manage form-dependent state (e.g.,
    validation error messages).
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`useActionState()` 钩子可以用来管理与表单相关的状态（例如，验证错误消息）。'
- en: '`useActionState()` also provides a pending boolean value that may be used to
    update the UI while the form action is processing.'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`useActionState()` 也提供了一个待定布尔值，可以在表单操作处理时用于更新用户界面。'
- en: In nested components (nested within `<form>` ), the `useFormStatus()` Hook can
    be called to get and use information about the parent form submission status.
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在嵌套组件（嵌套在 `<form>` 内）中，可以调用 `useFormStatus()` 钩子来获取和使用有关父表单提交状态的信息。
- en: To provide quick UI updates, even when dealing with slow background processes
    (e.g., slow HTTP requests), the `useOptimistic()` Hook may help.
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了在处理慢速后台进程（例如，慢速 HTTP 请求）时提供快速的用户界面更新，`useOptimistic()` 钩子可能有所帮助。
- en: What’s Next?
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 接下来是什么？
- en: Dealing with forms and handling user input is a very common task in most web
    applications. React apps are, of course, no exception.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 处理表单和处理用户输入是大多数网络应用程序中一个非常常见的任务。当然，React 应用程序也不例外。
- en: 'That’s why React offers a broad variety of approaches and possible patterns
    you can use to handle form submissions and extract user input. This chapter explored
    and compared the two main ways of doing this: using the `onSubmit` prop or relying
    on form actions (only available since React 19).'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 正因如此，React 提供了广泛的方法和可能的模式，您可以使用它们来处理表单提交和提取用户输入。本章探讨了并比较了两种主要的方法：使用 `onSubmit`
    属性或依赖表单操作（仅从 React 19 开始可用）。
- en: As explained and shown throughout this chapter, both approaches are valid and
    have their use cases. Personal preference as well as application requirements
    matter and will influence your decision.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 正如本章中解释和展示的那样，这两种方法都是有效的，并且各有用例。个人偏好以及应用程序需求都很重要，并将影响您的决策。
- en: At this point in the book, you know all the key React concepts you need to build
    feature-rich web applications. The next chapter will look behind the scenes of
    React and explore how it works internally. You will also learn about some common
    optimization techniques that can make your apps more performant.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 到这本书的这一部分，您已经了解了构建功能丰富的网络应用程序所需的所有关键 React 概念。下一章将深入 React 的幕后，探索它是如何内部工作的。您还将了解一些常见的优化技术，这些技术可以使您的应用程序性能更佳。
- en: Test Your Knowledge!
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试你的知识！
- en: 'Test your knowledge of the concepts covered in this chapter by answering the
    following questions. You can then compare your answers to examples that can be
    found at [https://github.com/mschwarzmueller/book-react-key-concepts-e2/blob/09-form-actions/exercises/questions-answers.md](https://github.com/mschwarzmueller/book-react-key-concepts-e2/blob/09-form-actions/exercises/questions-answers.md)
    :'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 通过回答以下问题来测试您对本章所涵盖概念的了解。然后，您可以比较您的答案与可在[https://github.com/mschwarzmueller/book-react-key-concepts-e2/blob/09-form-actions/exercises/questions-answers.md](https://github.com/mschwarzmueller/book-react-key-concepts-e2/blob/09-form-actions/exercises/questions-answers.md)
    找到的示例：
- en: What’s a “form action”?
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: “表单操作”是什么？
- en: How can you access user input inside of a form action?
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何在表单操作内部访问用户输入？
- en: What’s the purpose of the `useActionState()` Hook and how is it used?
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`useActionState()` 钩子的目的是什么？它是如何使用的？'
- en: What’s the purpose of the `useFormStatus()` Hook and how is it used?
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`useFormStatus()` 钩子的目的是什么？它是如何使用的？'
- en: What’s the difference between `useActionState()` and `useFormStatus()` ?
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`useActionState()` 和 `useFormStatus()` 之间的区别是什么？'
- en: What’s the purpose of the `useOptimistic()` Hook and how is it used?
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`useOptimistic()` 钩子的目的是什么？它是如何使用的？'
- en: Apply What You Learned
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用所学知识
- en: With form actions in your React toolbelt, you have another powerful way of handling
    form submissions and extracting user input.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的React工具包中添加表单操作，您又有另一种强大的处理表单提交和提取用户输入的方法。
- en: In the following section, you’ll find an activity that allows you to practice
    working with form actions and the form-related Hooks provided by React. As always,
    you will also need to employ some of the concepts covered in earlier chapters
    (such as working with state or outputting lists).
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下部分，您将找到一个活动，允许您练习使用表单操作和React提供的与表单相关的钩子。一如既往，您还需要应用之前章节中介绍的一些概念（例如处理状态或输出列表）。
- en: 'Activity 9.1: Managing a Feedback Form'
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动九.1：管理反馈表单
- en: In this activity, your job is to build upon an existing, basic feedback form
    application and handle form submissions, with the help of form actions. As part
    of this activity, you should validate the submitted title and feedback text and
    show error messages if empty values are submitted. You should also update the
    list of submitted feedback items optimistically and disable the submit button
    while the form action is underway.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个活动中，您的任务是构建一个现有的、基本的反馈表单应用程序，并使用表单操作处理表单提交。作为此活动的一部分，您应该验证提交的标题和反馈文本，并在提交空值时显示错误消息。您还应该乐观地更新提交的反馈项列表，并在表单操作进行时禁用提交按钮。
- en: '**Note**'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: You can find the starting code for this activity at [https://github.com/mschwarzmueller/book-react-key-concepts-e2/tree/09-form-actions/activities/practice-1-start](https://github.com/mschwarzmueller/book-react-key-concepts-e2/tree/09-form-actions/activities/practice-1-start)
    . When downloading this code, you’ll always download the entire repository. Make
    sure to then navigate to the subfolder with the starting code ( `activities/practice-1-start`
    , in this case) to use the right code snapshot.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://github.com/mschwarzmueller/book-react-key-concepts-e2/tree/09-form-actions/activities/practice-1-start](https://github.com/mschwarzmueller/book-react-key-concepts-e2/tree/09-form-actions/activities/practice-1-start)
    找到此活动的起始代码。在下载此代码时，您将始终下载整个存储库。请确保导航到包含起始代码的子文件夹（在这种情况下为 `activities/practice-1-start`）以使用正确的代码快照。
- en: 'After downloading the code and running `npm install` in the project folder
    to install all required dependencies, the solution steps are as follows:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 下载代码后，在项目文件夹中运行 `npm install` 以安装所有必需的依赖项，解决方案步骤如下：
- en: Replace the existing `onSubmit` handler function with a form action—clean up
    and remove any code that’s not needed anymore thereafter.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将现有的 `onSubmit` 处理器函数替换为表单操作—之后清理并删除不再需要的任何代码。
- en: Disable the form submit button while the form action is processing.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在表单操作处理过程中禁用表单提交按钮。
- en: Validate the user input and output any error messages with the help of the `useActionState()`
    Hook.
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `useActionState()` 钩子验证用户输入并输出任何错误消息。
- en: Update the list of submitted feedback items optimistically by utilizing the
    `useOptimistic()` Hook.
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过利用 `useOptimistic()` 钩子乐观地更新提交的反馈项列表。
- en: 'The expected result should resemble the following screenshots:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 预期结果应类似于以下截图：
- en: '![img](img/B31339_09_06.png)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![img](img/B31339_09_06.png)'
- en: 'Figure 9.6: During form submission, the button is disabled, but the submitted
    item shows up instantly'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.6：在表单提交期间，按钮被禁用，但提交的项目立即显示
- en: '![img](img/B31339_09_07.png)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![img](img/B31339_09_07.png)'
- en: 'Figure 9.7: When submitting invalid values, appropriate error messages are
    shown'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.7：当提交无效值时，会显示适当的错误信息
- en: '**Note**'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: 'You can find a full example solution here: [https://github.com/mschwarzmueller/book-react-key-concepts-e2/tree/09-form-actions/activities/practice-1](https://github.com/mschwarzmueller/book-react-key-concepts-e2/tree/09-form-actions/activities/practice-1)
    .'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在此处找到完整的示例解决方案：[https://github.com/mschwarzmueller/book-react-key-concepts-e2/tree/09-form-actions/activities/practice-1](https://github.com/mschwarzmueller/book-react-key-concepts-e2/tree/09-form-actions/activities/practice-1)
    .
