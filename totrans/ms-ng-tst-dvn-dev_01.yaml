- en: <st c="0">1</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="2">Taking Your First Steps with TDD</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**<st c="34">Test-driven development</st>** <st c="58">(</st>**<st c="60">TDD</st>**<st
    c="63">) is a</st> <st c="70">software development process that’s widely used
    in Angular development to ensure code quality and reduce time spent debugging.</st>
    <st c="198">By writing automated tests before writing production code, developers
    can ensure that their code meets the desired specifications and can be easily
    modified and maintained</st> <st c="370">over time.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="380">In this chapter, we’ll explore the early stages of TDD in Angular.</st>
    <st c="448">We’ll start by discussing the role of TDD in Angular development and
    how it can help improve the quality of your code.</st> <st c="567">Then, we’ll
    set up the development environment, which involves installing the necessary tools</st>
    <st c="661">and dependencies.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="678">Next, we’ll create a new Angular project and explore the various
    files related to writing tests, including the spec files, which contain the actual
    tests, and the</st> `<st c="842">karma.conf.js</st>` <st c="855">file, which is
    used to configure the</st> <st c="893">testing framework.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="911">Throughout this chapter, I will provide examples and best practices
    for writing effective tests in Angular, such as using descriptive test names,
    testing all code paths, and using dummy data to simulate</st> <st c="1115">different
    scenarios.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1135">By the end of this chapter, you’ll have a solid understanding of
    the basics of TDD in Angular and how to start using it.</st> <st c="1257">Whether
    you’re new to TDD or looking to improve your skills, this chapter will provide
    you with the knowledge and tools you’ll need to create high-quality Angular applications
    using</st> <st c="1439">this approach.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1453">We will cover the</st> <st c="1472">following topics:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1489">Understanding TDD and its role</st> <st c="1521">in Angular</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1531">Setting up the</st> <st c="1547">development environment</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1570">Creating a new</st> <st c="1586">Angular project</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1601">Exploring different files related to</st> <st c="1639">writing
    tests</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1652">Technical requirements</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="1675">To follow along with the examples and exercises in this chapter,
    you will need to have a basic understanding of Angular and TypeScript, as well
    as a code editor, such as Visual Studio Code, installed on</st> <st c="1879">your
    computer</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1892">All the code files for this chapter can be found</st> <st c="1942">at</st>
    [<st c="1945">https://github.com/PacktPublishing/Mastering-Angular-Test-Driven-Development/tree/main/Chapter%201</st>](https://github.com/PacktPublishing/Mastering-Angular-Test-Driven-Development/tree/main/Chapter%201)<st
    c="2043">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2044">Understanding TDD and its role in Angular</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="2086">In this section, we will explore</st> <st c="2119">the fundamentals
    of TDD and its role in Angular development.</st> <st c="2181">We’ll start by discussing
    the benefits of using TDD in general, such</st> <st c="2250">as improved code
    quality, faster development cycles, and reduced debugging time.</st> <st c="2331">Then,
    we’ll look at how TDD fits into the overall Angular development process and how
    it can be used to create scalable and</st> <st c="2455">maintainable applications.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2481">What is Angular and TDD?</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="2506">Angular is a popul</st><st c="2525">ar</st> <st c="2529">open source
    JavaScript framework that’s used for building complex web applications.</st> <st
    c="2613">It was developed by Google and is widely used by developers around the</st>
    <st c="2684">world.</st> <st c="2691">Angular provides a set of tools and features
    that make it easy to build dynamic, responsive, and scalable</st> <st c="2797">web
    applications.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2814">Angular is a component-based framework that allows developers to
    build reusable UI components.</st> <st c="2910">These components can be combined
    to create complex user interfaces, making it easy to maintain and extend the application.</st>
    <st c="3033">Angular also provides built-in support for testing, making it easy
    to write and execute tests for</st> <st c="3131">Angular applications.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3152">TDD is a dynamic methodology in software development that prioritizes
    incrementally creating tests before the code is</st> <st c="3270">implemented.</st>
    <st c="3284">The TDD process revolves around a structured sequence known as the</st>
    **<st c="3351">red-green-refactor</st>** <st c="3369">cycle, which consists of
    the</st> <st c="3399">following stages:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="3416">Writing a failing test</st>**<st c="3439">: Initiate the cycle
    by crafting a test that intentionally fails.</st> <st c="3506">This test serves
    as a specification for the</st> <st c="3550">desired functionality.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="3572">Prohibiting overly complex tests</st>**<st c="3605">: Emphasize
    the creation of tests that are only as intricate as necessary.</st> <st c="3681">Avoiding
    unnecessary complexity ensures that tests remain focused on specific functionalities,
    enhancing clarity</st> <st c="3794">and maintainability.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="3814">Minimizing code implementation</st>**<st c="3845">: Write the
    minimum code required to pass the failing test.</st> <st c="3906">This minimalist
    approach ensures that code is dedicated to fulfilling the</st> <st c="3980">specified
    requirements.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '<st c="4003">The iterative nature of TDD</st> <st c="4032">unfolds as follows:
    writing a failing test, implementing the code to pass the test, and refactoring
    the code to enhance code design and maintainability.</st> <st c="4185">This</st>
    <st c="4190">iterative loop persists until the entire code base</st> <st c="4241">is
    complete.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="4253">TDD’s unique approach to writing tests before code execution serves
    a dual purpose.</st> <st c="4338">First, it guarantees code correctness by aligning
    with predefined test requirements.</st> <st c="4423">Second, it fosters the creation
    of clean, maintainable, and adaptable code.</st> <st c="4499">Developers are encouraged
    to adhere to best practices, resulting in code that is easily comprehensible,
    modifiable, and extensible throughout the software development</st> <st c="4666">life
    cycle.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="4677">Now that we know what Angular</st> <st c="4707">is and looked at
    the benefits of using the TDD approach, let’s understand the</st> <st c="4786">red-green-refactor
    cycle.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="4811">The red-green-refactor cycle</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="4840">The red-green-refactor cycle is a fundamental concept in TDD.</st>
    <st c="4903">It serves as a robust and systematic methodology in</st> <st c="4955">software
    development that offers developers a structured framework for incremental progress.</st>
    <st c="5048">This approach is designed to break down the development process into
    discrete, manageable</st> <st c="5137">steps, guaranteeing code correctness and
    alignment with predefined test requirements.</st> <st c="5224">Now, let’s delve
    into the technical nuances of each phase – red, green, and refactor – within this</st>
    <st c="5323">iterative process:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="5341">Red – writing a</st>** **<st c="5358">failing test</st>**<st
    c="5370">:</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="5372">The first step in the red-green-refactor cycle is to write a failing
    test.</st> <st c="5447">The test should define the desired behavior of the code
    and should be written in a way that it fails initially.</st> <st c="5559">This
    is</st> <st c="5566">called the “red” step because the test is expected</st> <st
    c="5618">to fail.</st>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**<st c="5626">Green – writing code to pass</st>** **<st c="5656">the test</st>**<st
    c="5664">:</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="5666">The second step is to write the code that will make the test pass.</st>
    <st c="5733">The code should be minimal, and it should only be written to make
    the test pass.</st> <st c="5814">This is called the “green” step</st> <st c="5846">because
    the test is expected</st> <st c="5875">to pass.</st>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**<st c="5883">Refactor – improving code without</st>** **<st c="5918">changing
    functionality</st>**<st c="5940">:</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="5942">Once the test has passed, the developer can refactor the code to
    enhance its design, readability, and maintainability by eliminating duplication,
    simplifying the code, and improving its readability.</st> <st c="6141">The key
    is to make improvements without altering the functionality covered by</st> <st
    c="6218">the test.</st>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="6228">In the next section, we will take a look at the benefits of the</st>
    <st c="6293">red-green-refactor cycle.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="6318">Benefits of the red-green-refactor cycle</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="6359">The red-green-refactor cycle has several benefits, including</st>
    <st c="6421">the following:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="6435">Enhanced code quality</st>**<st c="6457">: The red-green-refactor
    cycle ensures that the code is correct, reliable, and meets the requirements predefined
    in</st> <st c="6574">the tests</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="6583">Accelerated development</st>**<st c="6607">: The red-green-refactor
    cycle allows developers to catch errors early in the development process, which
    saves time and reduces the cost of</st> <st c="6748">fixing bugs</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="6759">Better collaboration</st>**<st c="6780">: The red-green-refactor
    cycle encourages collaboration between developers, testers, and other stakeholders,
    which improves communication and helps to ensure that everyone is on the</st>
    <st c="6963">same page</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="6972">Simplified maintenance</st>**<st c="6995">: The red-green-refactor
    cycle produces code that is easier to maintain and extend, which reduces the cost
    and effort of</st> <st c="7117">future development</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="7135">By using the red-green-refactor</st> <st c="7167">cycle, developers
    can build reliable, maintainable, and scalable</st> <st c="7233">software applications.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7255">Next, we’ll learn how TDD is an important asset when it’s</st>
    <st c="7314">in use.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7321">The role of TDD in Angular development</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="7360">TDD plays a critical role in Angular development.</st> <st c="7411">By
    writing tests first, developers can ensure that the code is correct and meets
    the requirements defined in the tests.</st> <st c="7531">This ensures that the
    application is reliable</st> <st c="7577">and reduces the risk of bugs and errors.</st>
    <st c="7618">TDD also encourages developers to write clean, maintainable code
    that is easy to modify and extend, making it easier to maintain and update the
    application</st> <st c="7773">over time.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7784">Angular provides built-in support for testing, making it easy to
    write and execute tests for Angular applications.</st> <st c="7900">The Angular
    testing framework provides a set of tools and features that make it easy to write
    unit tests, integration tests, and end-to-end tests for Angular applications.</st>
    <st c="8072">These tests can be run automatically as part of the build process,
    ensuring that the application is always tested</st> <st c="8186">and reliable.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="8199">In the next section, we’ll set up the development environment,
    which involves preparing the tools and resources needed to develop</st> <st c="8330">the
    project.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="8342">Setting up the development environment</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="8381">With a theoretical</st> <st c="8401">understanding of TDD and its
    role in Angular application development, the next step is to configure our development
    environment so that we can apply TDD principles in Angular.</st> <st c="8577">To
    do this, we need to install the required tools to create an Angular project.</st>
    <st c="8657">By following the right steps, we can create a development environment
    that promotes effective and efficient development using TDD principles</st> <st
    c="8798">in Angular.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="8809">Setting up a development environment for Angular can be a bit more
    complex than setting up a general development environment.</st> <st c="8936">However,
    with the right guidance, it can be a straightforward process.</st> <st c="9007">Here,
    we</st> <st c="9016">will go over the steps you need to take to set up your Angular
    development environment.</st> <st c="9104">So, let’s</st> <st c="9114">get started.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="9126">Installing Node.js on Windows or macOS</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="9165">Follow these steps</st> <st c="9184">to install Node.js on</st>
    <st c="9207">Windows</st> <st c="9215">or macOS:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="9224">Go to the official Node.js website (</st>[<st c="9261">https://nodejs.org/en/</st>](https://nodejs.org/en/)<st
    c="9284">) and click on the</st> **<st c="9304">Download</st>** <st c="9312">button
    for the LTS</st> <st c="9332">version.</st> <st c="9341">This will download the
    latest</st> <st c="9370">version of Node.js for</st> <st c="9393">Windows</st>
    <st c="9402">or macOS:</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.1 – Node.js home page](img/B21146_01_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="9542">Figure 1.1 – Node.js home page</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="9572">Once the installer has finished downloading, run it by double-clicking
    on the downloaded file.</st> <st c="9668">You should see the Node.js</st> <st
    c="9695">setup wizard:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.2 – Node.js installation – step 1](img/B21146_01_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="9889">Figure 1.2 – Node.js installation – step 1</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="9931">Read through the license</st> <st c="9956">agreement and click
    the</st> **<st c="9981">Agree</st>** <st c="9986">button if you agree to</st>
    <st c="10010">the terms:</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.3 – Node.js installation – step 2](img/B21146_01_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="11349">Figure 1.3 – Node.js installation – step 2</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="11391">Next, choose</st> <st c="11404">the location where</st> <st c="11424">you
    want to install Node.js.</st> <st c="11453">The</st> <st c="11456">default location</st>
    <st c="11473">is usually fine, but you can choose a different location if</st>
    <st c="11534">you prefer:</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.4 – Node.js installation – step 3](img/B21146_01_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="12028">Figure 1.4 – Node.js installation – step 3</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="12070">On the next screen, you’ll be</st> <st c="12100">asked to</st>
    <st c="12110">choose which components to install.</st> <st c="12146">The</st>
    <st c="12150">default options are usually fine, but</st> <st c="12188">you can
    choose to add or remove</st> <st c="12220">components</st> <st c="12231">as needed:</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.5 – Node.js installation – step 4](img/B21146_01_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="12521">Figure 1.5 – Node.js installation – step 4</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="12563">Choose the folder where you want to create the start menu shortcuts
    for Node.js.</st> <st c="12645">The default folder is</st> <st c="12666">usually
    fine, but you can choose a different folder if</st> <st c="12722">you prefer.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="12733">Click the</st> **<st c="12744">Install</st>** <st c="12751">button
    to</st> <st c="12761">begin the installation</st> <st c="12785">process.</st>
    <st c="12794">This may take a</st> <st c="12809">few minutes to complete, depending</st>
    <st c="12845">on your</st> <st c="12853">computer’s speed:</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.6 – Node.js installation – step 5](img/B21146_01_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="13053">Figure 1.6 – Node.js installation – step 5</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="13095">Once the installation is complete, you should see a message indicating
    that Node.js has been installed successfully.</st> <st c="13213">Click the</st>
    **<st c="13223">Close</st>** <st c="13228">button to close</st> <st c="13245">the
    installer:</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.7 – Node.js installation – step 6](img/B21146_01_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="13563">Figure 1.7 – Node.js installation – step 6</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="13605">To verify</st> <st c="13615">that Node.js has</st> <st c="13633">been
    installed</st> <st c="13647">correctly, open a comman</st><st c="13672">d prompt</st>
    <st c="13682">and run</st> <st c="13690">the</st> <st c="13694">following:</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <st c="13714">This should display the version number of Node.js that you</st>
    <st c="13774">just installed:</st>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.8 – Checking the npm version](img/B21146_01_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="13791">Figure 1.8 – Checking the npm version</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="13828">In the</st> <st c="13836">next section, we’ll learn</st> <st c="13861">how
    to</st> <st c="13868">install</st> <st c="13877">Node.js</st> <st c="13885">on</st>
    <st c="13887">Linux.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="13894">Installing Node.js on Linux</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="13922">Follow these steps</st> <st c="13941">to install Node.js</st>
    <st c="13961">on</st> <st c="13964">Linux:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="13970">Open your terminal and</st> <st c="13993">run the following command
    to update the</st> <st c="14034">package manager:</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <st c="14068">The preceding command will give you the</st> <st c="14109">following
    output:</st>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.9 – Updating Ubuntu packages](img/B21146_01_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="16265">Figure 1.9 – Updating Ubuntu packages</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="16302">Run the following</st> <st c="16321">command to</st> <st c="16332">install
    Node.js:</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <st c="16374">The preceding</st> <st c="16388">command will give you</st> <st
    c="16410">the</st> <st c="16415">following output:</st>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![ Figure 1.10 – Node.js installation on Ubuntu](img/B21146_01_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="17692">Figure 1.10 – Node.js installation on Ubuntu</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="17736">To verify that Node.js has been installed</st> <st c="17778">correctly,
    run the</st> <st c="17798">following command:</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <st c="17826">This should display</st> <st c="17847">the version</st> <st c="17858">number
    of Node.js that you</st> <st c="17886">just installed:</st>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.11 – Node.js version after installing it on Ubuntu](img/B21146_01_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="17921">Figure 1.11 – Node.js version after installing it on Ubuntu</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="17980">npm is the package</st> <st c="17999">manager for Node.js.</st>
    <st c="18021">To install it, if you’ve not already installed it with Node.js,
    run the</st> <st c="18093">following command:</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <st c="18134">Here’s</st> <st c="18142">the output:</st>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.12 – npm installation on Ubuntu](img/B21146_01_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="20579">Figure 1.12 – npm installation on Ubuntu</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="20619">To verify that npm</st> <st c="20638">has been installed</st>
    <st c="20658">correctly, run the</st> <st c="20677">following</st> <st c="20687">command:</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <st c="20704">You should see the</st> <st c="20724">following output:</st>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: "![Figure 1.\uFEFF13 – npm version after Node.js installation](img/B21146_01_13.jpg)"
  prefs: []
  type: TYPE_IMG
- en: <st c="20762">Figure 1.13 – npm version after Node.js installation</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="20814">In the next section, we’ll create a</st> <st c="20850">new</st>
    <st c="20855">Angular project.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="20871">Creating a new Angular project</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="20902">With our development environment set</st> <st c="20940">up and
    ready, we can create our Angular project.</st> <st c="20989">This involves using
    the Angular CLI to generate the basic structure of our project, including files
    and folders.</st> <st c="21102">Once created, we can begin building our Angular
    application using the powerful tools and features provided by</st> <st c="21212">the
    framework.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="21226">After installing the Angular CLI, you can create a new Angular
    project by running the following command in</st> <st c="21334">your terminal:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: <st c="21395">This will create a new Angular project called</st> `<st c="21442">getting-started-angular-tdd</st>`
    <st c="21469">in the</st> <st c="21477">current directory.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="21495">After creating your</st> <st c="21516">Angular project, you can
    serve it by running the following command in</st> <st c="21586">your terminal:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: <st c="21651">This will start a development server and open your application
    in your default browser.</st> <st c="21740">Here, you can make changes to your
    code and see the changes live in</st> <st c="21808">your browser.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="21821">Now, it’s time to explore the different files involved in</st>
    <st c="21880">writing tests.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="21894">Exploring different files related to writing tests</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="21945">Now that we’ve created the</st> <st c="21973">Angular project,
    we will explore the different files related to writing tests in Angular.</st>
    <st c="22063">I will provide insights into their role and best practices for working
    with them.</st> <st c="22145">Let’s</st> <st c="22151">get started.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="22163">*.spec.ts files</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`<st c="22179">*.spec.ts</st>` <st c="22189">files contain the</st> <st c="22208">actual
    test cases that will be run against your code.</st> <st c="22262">These files
    are the backbone of testing in Angular as they define the individual test cases
    that will ensure your code works as</st> <st c="22389">expected.</st> <st c="22400">The
    name of the file should match the name o</st><st c="22444">f the file being tested,
    and it should be located in the same directory as the file being tested.</st>
    <st c="22543">The tests in these files are organized into te</st><st c="22589">st
    suites, which are defined using the</st> `<st c="22629">describe()</st>` <st c="22639">functio</st><st
    c="22647">n.</st> <st c="22651">Each test case is defined using the</st> `<st
    c="22687">it()</st>` <st c="22691">function.</st> <st c="22702">For example, if
    you were testing a component named</st> `<st c="22753">MyComponent</st>`<st c="22764">,
    you would create a file named</st> `<st c="22796">my-component.spec.ts</st>` <st
    c="22816">and define the test cases fo</st><st c="22845">r that component within</st>
    <st c="22870">that file.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '<st c="22880">The</st> `<st c="22885">describe()</st>` <st c="22895">function
    is used to group related test cases together, and it takes two parameters: a string
    that describes the test suite and a function that defines</st> <st c="23046">the
    test cases within that suite.</st> <st c="23081">The</st> `<st c="23085">it()</st>`
    <st c="23089">function is used to define individual test cases, and it takes two
    parameters: a</st> <st c="23170">string that describes the test case and a</st>
    <st c="23212">function that contains the code for the test case.</st> <st c="23264">Within</st>
    <st c="23270">the test case function, you can use the</st> `<st c="23311">expect()</st>`
    <st c="23319">function to define the expected behavior of your code.</st> <st
    c="23375">For example, you might use</st> `<st c="23402">expect(component.title).toEqual(''My
    Title'')</st>` <st c="23445">to test that the</st> `<st c="23463">title</st>`
    <st c="23468">property of a component has the</st> <st c="23501">expected value.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '`<st c="23516">*.spec.ts</st>` <st c="23526">files also typically import the
    component or service being tested, as well as any necessary dependencies.</st>
    <st c="23633">For example, if you were testing a component that used the</st>
    `<st c="23692">HttpClient</st>` <st c="23702">service, you would need to import
    both the component and</st> `<st c="23760">HttpClientTestingModule</st>` <st c="23783">from</st>
    `<st c="23789">@angular/common/http/testing</st>`<st c="23817">.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="23818">The karma.conf.js file</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="23841">The</st> `<st c="23846">karma.conf.js</st>` <st c="23859">file
    is used to</st> <st c="23876">configure the Karma test runner, which is used to
    run your test cases.</st> <st c="23947">Karma is a popular test runner for Angular</st>
    <st c="23990">applications, and it provides a simple way to run your tests in
    a variety of browsers.</st> <st c="24077">The</st> `<st c="24081">karma.conf.js</st>`
    <st c="24094">file specifies the files that should be included in the test run,
    as well as the browsers that should be used to run</st> <st c="24212">the tests.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="24222">The</st> `<st c="24227">karma.conf.js</st>` <st c="24240">file
    typically exports a configuration object that specifies these settings.</st> <st
    c="24318">The configuration object contains several properties, such as frameworks,
    files, reporters, and browsers.</st> <st c="24424">These properties allow you
    to configure various aspects of the test run, such as which testing framework
    to use, which files to include in the test run, which reporters to use to display
    test results, and which browsers to use to run</st> <st c="24658">the tests.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="24668">For example, a typical</st> `<st c="24692">karma.conf.js</st>`
    <st c="24705">file might look</st> <st c="24722">like this:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: <st c="24943">The given configuration outlines the utilization of the</st> `<st
    c="25000">Jasmine</st>` <st c="25007">and</st> `<st c="25011">@angular/cli</st>`
    <st c="25024">frameworks, the</st> <st c="25040">inclusion of the</st> `<st c="25058">./src/test.ts</st>`
    <st c="25071">file during the</st> <st c="25087">test run, the implementation
    of the</st> `<st c="25124">progress</st>` <st c="25132">and</st> `<st c="25137">kjhtml</st>`
    <st c="25143">reporters to showcase test results, and the execution of the tests
    in the</st> <st c="25218">Chrome browser.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="25233">The test.ts file</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="25250">The</st> `<st c="25255">test.ts</st>` <st c="25262">file is the
    entry point for</st> <st c="25290">your test cases.</st> <st c="25308">It sets
    up the testing environment and loads all of the necessary files for the test run.</st>
    <st c="25398">This file typically imports</st> <st c="25426">the</st> `<st c="25430">zone.js</st>`
    <st c="25437">library, which is used to handle asynchronous operations in your
    tests.</st> <st c="25510">It also imports the Karma test runner and starts the</st>
    <st c="25563">test run.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="25572">The</st> `<st c="25577">test.ts</st>` <st c="25584">file is typically
    located in the</st> `<st c="25618">src</st>` <st c="25621">directory of your project,
    and it is usually generated automatically when you create a new Angular project.</st>
    <st c="25730">This file sets up the testing environment and loads the necessary
    files for the</st> <st c="25810">test run.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="25819">Here’s an example of what a</st> `<st c="25848">test.ts</st>`
    <st c="25855">file might</st> <st c="25867">look like:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: <st c="26457">This file initializes the Angular</st> <st c="26491">testing environment
    using the</st> `<st c="26522">getTestBed().initTestEnvironment()</st>` <st c="26556">function,
    which sets up</st> `<st c="26581">TestBed</st>`<st c="26588">. It also</st> <st
    c="26597">loads all of the</st> `<st c="26615">*.spec.ts</st>` <st c="26624">files</st>
    <st c="26631">using</st> `<st c="26637">require.context()</st>`<st c="26654">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="26655">The tsconfig.spec.json file</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="26683">The</st> `<st c="26688">tsconfig.spec.json</st>` <st c="26706">file
    is used to</st> <st c="26723">configure the TypeScript compiler for your test
    cases.</st> <st c="26778">It specifies the compiler options that</st> <st c="26816">should
    be used when compiling your test files.</st> <st c="26864">This file typically
    extends the main</st> `<st c="26901">tsconfig.json</st>` <st c="26914">file for
    your project but may include additional settings specific</st> <st c="26982">to
    testing.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="26993">Here’s an example of what a</st> `<st c="27022">tsconfig.spec.json</st>`
    <st c="27040">file might</st> <st c="27052">look like:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: <st c="27324">This file extends the</st> <st c="27347">main</st> `<st c="27352">tsconfig.json</st>`
    <st c="27365">file and</st> <st c="27374">specifies the compiler options that
    should be used for test files.</st> <st c="27442">It also includes the</st> `<st
    c="27463">src/test.ts</st>` <st c="27474">and</st> `<st c="27479">src/polyfills.ts</st>`
    <st c="27495">files in the</st> <st c="27509">test run.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="27518">The src/test.ts file</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="27539">The</st> `<st c="27544">src/test.ts</st>` <st c="27555">file is
    used to</st> <st c="27571">configure the Angular testing environment.</st> <st
    c="27615">It sets up</st> `<st c="27626">TestBed</st>`<st c="27633">, which is
    used to create</st> <st c="27658">instances of your components and services for
    testing.</st> <st c="27714">It also imports any necessary testing utilities, such
    as</st> `<st c="27771">TestBed</st>` <st c="27778">and</st> `<st c="27783">async</st>`<st
    c="27788">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="27789">Here’s an example of what a</st> `<st c="27818">src/test.ts</st>`
    <st c="27829">file might</st> <st c="27841">look like:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: <st c="28125">This file sets up</st> `<st c="28144">TestBed</st>` <st c="28151">using
    the</st> `<st c="28162">TestBed.initTestEnvironment()</st>` <st c="28191">function.</st>
    <st c="28202">It specifies the</st> <st c="28219">testing module and platform
    module</st> <st c="28254">to use, which are the</st> `<st c="28276">BrowserDynamicTestingModule</st>`
    <st c="28303">and</st> `<st c="28308">platformBrowserDynamicTestingModule</st>`<st
    c="28343">, respectively.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="28358">Summary</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="28366">This chapter covered the basics of TDD and its role in Angular.</st>
    <st c="28431">We explained the benefits of TDD and how it can help developers
    write high-quality code.</st> <st c="28520">Then, we discussed how to set up the
    development environment for Angular and created a new Angular project using the
    Angular programming interface.</st> <st c="28668">We also explored the various
    files related to writing tests in Angular, including</st> `<st c="28750">*.spec.ts</st>`<st
    c="28759">,</st> `<st c="28761">karma.conf.js</st>`<st c="28774">,</st>`<st c="28775">tsconfig.spec.json</st>`<st
    c="28793">, and</st> `<st c="28799">src/test.ts.</st>` <st c="28811">We provided
    detailed explanations of each file and their role in testing Angular applications.</st>
    <st c="28907">By understanding these files and their purpose, developers can write
    and run tests for their Angular applications more effectively and ensure that
    their code performs</st> <st c="29074">as expected.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="29086">In the next chapter, we’ll learn about the process of writing
    and executing unit tests using Jasmine while covering topics such as test suites,
    test specifications,</st> <st c="29252">and matchers.</st>
  prefs: []
  type: TYPE_NORMAL
