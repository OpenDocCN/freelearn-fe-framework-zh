["```js\n…\nexport type ActivityAlignment = 'left' | 'right';\n\nexport interface ActivitySliderSelection {\n  start: number;\n  end: number;\n}\n\nexport interface ActivityBase {\n  kind: string;\n  id?: number;\n  user: User;\n  time: number;\n  category: string;\n  title: string;\n  message: string;\n}\n\nexport interface ProjectActivity extends ActivityBase {\n  kind: 'project';\n  projectId: number;\n}\n\nexport type Activity = ProjectActivity;\n```", "```js\nimport {InMemoryDbService} from 'angular-in-memory-web-api';\nimport {Activity, Project, Task, User} from './model';\n\nexport class Database implements InMemoryDbService {\n  createDb() {\n    …\n\n    const now = +new Date();\n\n const activities: Activity[] = [{\n id: 1,\n kind: 'project',\n user: users[0],\n time: now - 1000 * 60 * 60 * 8,\n projectId: 1,\n category: 'tasks',\n title: 'A task was updated',\n message: 'The task \\'Task 1\\' was updated on #project-1.'\n }, {\n id: 2,\n kind: 'project',\n user: users[0],\n time: now - 1000 * 60 * 60 * 5,\n projectId: 2,\n category: 'tasks',\n title: 'A task was updated',\n message: 'The task \\'Task 1\\' was updated on #project-2.'\n }, {\n id: 3,\n kind: 'project',\n user: users[0],\n time: now - 1000 * 60 * 60 * 2,\n projectId: 2,\n category: 'tasks',\n title: 'A task was updated',\n message: 'The task \\'Task 2\\' was updated on #project-2.'\n }];\n\n    return {users, projects, tasks, activities};\n  }\n}\n\n```", "```js\nng generate service --spec false activities/activities\n```", "```js\nimport {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {BehaviorSubject} from 'rxjs';\nimport {Activity, ProjectActivity, User} from '../model';\nimport {UserService} from '../user/user.service';\nimport {map, mergeMap, take} from 'rxjs/operators';\n\n@Injectable()\nexport class ActivitiesService {\n  private activities = new BehaviorSubject<Activity[]>([]);\n\n  constructor(private http: HttpClient, private userService: UserService) {\n    this.loadActivities();\n  }\n\n  private loadActivities() {\n    this.http.get<Activity[]>('/api/activities')\n      .subscribe((activities) => this.activities.next(activities));\n  }\n\n  getActivities() {\n    return this.activities\n      .asObservable().pipe(\n        map(activities => activities.sort((a, b) => b.time - a.time))\n      );\n  }\n\n  logProjectActivity(projectId: number, category: string, title: string, message: string) {\n    this.userService.getCurrentUser()\n      .pipe(\n        take(1),\n        mergeMap((user: User) => this.http\n          .post('/api/activities', <ProjectActivity>{\n            kind: 'project',\n            time: +new Date(),\n            projectId,\n            user,\n            category,\n            title,\n            message\n          })\n        )\n      ).subscribe(() => this.loadActivities());\n  }\n}\n```", "```js\n…\nimport {ActivitiesService} from '../../activities/activities.service';\nimport {limitWithEllipsis} from '../../utilities/string-utilities';\n\n@Component({\n  selector: 'mac-task-list-container',\n  templateUrl: './task-list-container.component.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TaskListContainerComponent {\n  …\n\n  constructor(private taskService: TaskService,\n              private projectService: ProjectService,\n              private route: ActivatedRoute,\n private activitiesService: ActivitiesService) {\n    …\n  }\n\n  activateFilterType(type: TaskListFilterType) {\n    this.activeTaskFilterType.next(type);\n  }\n\n  addTask(title: string) {\n    this.selectedProject\n      .pipe(\n        take(1)\n      )\n      .subscribe((project) => {\n        const task: Task = {\n          projectId: project.id, title, done: false\n        };\n        this.taskService.addTask(task);\n this.activitiesService.logProjectActivity(\n project.id,\n 'tasks',\n 'A task was added',\n `A new task \"${limitWithEllipsis(title, 30)}\" was added to #project-${project.id}.`\n );\n      });\n  }\n\n  updateTask(task: Task) {\n    this.taskService.updateTask(task);\n this.activitiesService.logProjectActivity(\n task.projectId,\n 'tasks',\n 'A task was updated',\n `The task \"${limitWithEllipsis(task.title, 30)}\" was updated on #project-${task.projectId}.`\n );\n  }\n}\n\n```", "```js\nexport function limitWithEllipsis(str: string, limit: number): string {\n  if (str.length > limit) {\n    return str.slice(0, limit - 1) + '…';\n  } else {\n    return str;\n  }\n}\n```", "```js\n<?xml version=\"1.0\" encoding=\"utf-8\"?>   \n<svg version=\"1.1\"   \n     width=\"20px\" height=\"20px\"> \n  <circle cx=\"10\" cy=\"10\" r=\"10\" fill=\"black\" /> \n</svg> \n```", "```js\n<!doctype html> \n<title>Minimalistic Circle</title> \n<svg width=\"20px\" height=\"20px\"> \n  <circle id=\"circle\" cx=\"10\" cy=\"10\" r=\"10\" fill=\"black\"> \n</svg> \n<script> \n  document \n    .getElementById('circle') \n    .addEventListener('click', function(event) { \n      event.target.setAttribute('fill', 'red'); \n    }); \n</script> \n```", "```js\n<!doctype html> \n<title>Minimalistic Circle</title> \n<svg width=\"20px\" height=\"20px\"> \n  <circle class=\"circle\" cx=\"10\" cy=\"10\" r=\"10\"> \n</svg> \n```", "```js\n.circle { \n  fill: black; \n} \n```", "```js\n@Component({ \n  selector: 'awesome-circle', \n  template: ` \n    <svg [attr.width]=\"size\" [attr.height]=\"size\"> \n      <circle [attr.cx]=\"size/2\" [attr.cy]=\"size/2\" \n              [attr.r]=\"size/2\" fill=\"black\" /> \n    </svg> \n  ` \n}) \nexport class AwesomeCircle { \n  @Input() size; \n} \n```", "```js\n<awesome-circle [size]=\"20\"></awesome-circle>\n```", "```js\n@Component({ \n  selector: '[awesomeCircle]', \n  template: ` \n      <svg:circle [attr.cx]=\"size/2\" [attr.cy]=\"size/2\" \n                  [attr.r]=\"size/2\" fill=\"black\" /> \n  ' \n}) \nexport class AwesomeCircle { \n  @Input('awesomeCircle') size; \n} \n\n@Component({ \n  selector: 'app' \n  template: ` \n   <svg width=\"20\" height=\"20\"> \n    <g [awesomeCircle]=\"20\"></g> \n   </svg> \n  `, \n  directives: [AwesomeCircle] \n}) \nexport class App {} \n```", "```js\nng generate component --spec false -ve none -cd onpush activities/activity-slider\n```", "```js\nimport {\n  ChangeDetectionStrategy, Component, ElementRef, EventEmitter, HostListener,\n  Input, OnChanges, Output, SimpleChanges, ViewEncapsulation\n} from '@angular/core';\nimport {Activity, ActivitySliderSelection} from '../../model';\n\n@Component({\n  selector: 'mac-activity-slider',\n  templateUrl: './activity-slider.component.html',\n  styleUrls: ['./activity-slider.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.Native\n})\nexport class ActivitySliderComponent {\n  @Input() activities: Activity[];\n  @Output() outSelectionChange = new EventEmitter<ActivitySliderSelection>();\n  constructor(private elementRef: ElementRef) {}\n}\n```", "```js\n:host {\n  display: block;\n}\n\n.slide {\n  fill:#f9f9f9;\n}\n\n.activity {\n  fill:#3699cb;\n}\n\n.time {\n  fill:#bbb;\n  font-size:14px;\n}\n\n.tick {\n  stroke:#bbb;\n  stroke-width:2px;\n  stroke-dasharray:3px;\n}\n\n.selection-overlay {\n  fill:#d9d9d9;\n}\n\n```", "```js\nimport {\n  ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Input, Output, ViewEncapsulation\n} from '@angular/core';\nimport {Activity, ActivitySliderSelection} from '../../model';\n\n@Component({\n  selector: 'mac-activity-slider',\n  templateUrl: './activity-slider.component.html',\n  styleUrls: ['./activity-slider.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.Native\n})\nexport class ActivitySliderComponent {\n  @Input() activities: Activity[];\n  @Output() outSelectionChange = new EventEmitter<ActivitySliderSelection>();\n  padding = 20;\n timeFirst: number;\n timeLast: number;\n timeSpan: number;\n\n  constructor(private elementRef: ElementRef) {}\n\n totalWidth() {\n return this.elementRef.nativeElement.clientWidth - this.padding * 2;\n }\n\n projectTime(time: number) {\n const position = this.padding +\n (time - this.timeFirst) / this.timeSpan * this.totalWidth();\n return position / this.elementRef.nativeElement.clientWidth * 100;\n }\n\n projectLength(length: number) {\n return this.timeFirst + (length - this.padding) / this.totalWidth() * this.timeSpan;\n }\n}\n```", "```js\nimport {\n  ChangeDetectionStrategy, Component, ElementRef, EventEmitter, HostListener,\n  Input, Output, OnChanges, SimpleChanges, ViewEncapsulation\n} from '@angular/core';\nimport {Activity, ActivitySliderSelection} from '../../model';\n\n@Component({\n  selector: 'mac-activity-slider',\n  templateUrl: './activity-slider.component.html',\n  styleUrls: ['./activity-slider.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.Native\n})\nexport class ActivitySliderComponent implements OnChanges {\n  @Input() activities: Activity[];\n  @Output() outSelectionChange = new EventEmitter<ActivitySliderSelection>();\n  padding = 20;\n  timeFirst: number;\n  timeLast: number;\n  timeSpan: number;\n\n  constructor(private elementRef: ElementRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n if (changes.activities && this.activities) {\n if (this.activities.length === 1) {\n this.timeFirst = this.timeLast = this.activities[0].time;\n } else if (this.activities.length > 1) {\n this.timeFirst = this.activities[this.activities.length - 1].time;\n this.timeLast = this.activities[0].time;\n } else {\n this.timeFirst = this.timeLast = new Date().getTime();\n }\n\n this.timeSpan = Math.max(1, this.timeLast - this.timeFirst);\n }\n }\n\n  …\n}\n```", "```js\n<svg width=\"100%\" height=\"70px\">\n  <rect x=\"0\" y=\"30\" width=\"100%\" height=\"40\" class=\"slide\"></rect>\n  <rect *ngFor=\"let activity of activities\"\n        [attr.x]=\"projectTime(activity.time) + '%'\"\n        height=\"40\" width=\"2px\" y=\"30\" class=\"activity\"></rect>\n</svg>\n```", "```js\nimport {\n  ChangeDetectionStrategy, Component, ElementRef, EventEmitter,\n  Input, OnChanges, Output, SimpleChanges, ViewEncapsulation\n} from '@angular/core';\nimport {Activity, ActivitySliderSelection} from '../../model';\n\n@Component({\n  selector: 'mac-activity-slider',\n  templateUrl: './activity-slider.component.html',\n  styleUrls: ['./activity-slider.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.Native\n})\nexport class ActivitySliderComponent implements OnChanges {\n  @Input() activities: Activity[];\n  @Output() outSelectionChange = new EventEmitter<ActivitySliderSelection>();\n  padding = 20;\n  timeFirst: number;\n  timeLast: number;\n  timeSpan: number;\n ticks: number[];\n\n  constructor(private elementRef: ElementRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.activities && this.activities) {\n      if (this.activities.length === 1) {\n        this.timeFirst = this.timeLast = this.activities[0].time;\n      } else if (this.activities.length > 1) {\n        this.timeFirst = this.activities[this.activities.length - 1].time;\n        this.timeLast = this.activities[0].time;\n      } else {\n        this.timeFirst = this.timeLast = new Date().getTime();\n      }\n\n      this.timeSpan = Math.max(1, this.timeLast - this.timeFirst);\n      this.computeTicks();\n    }\n  }\n\n  computeTicks() {\n const count = 5;\n const timeSpanTick = this.timeSpan / count;\n this.ticks = Array.from({length: count}).map((element, index) => {\n return this.timeFirst + timeSpanTick * index;\n });\n }\n\n  …\n}\n```", "```js\n<svg width=\"100%\" height=\"70px\">\n  <rect x=\"0\" y=\"30\" width=\"100%\" height=\"40\" class=\"slide\"></rect>\n <g *ngFor=\"let tick of ticks\">\n <text [attr.x]=\"projectTime(tick) + '%'\" y=\"14\" class=\"time\">\n {{tick | calendarTime}}\n </text>\n <line [attr.x1]=\"projectTime(tick) + '%'\" [attr.x2]=\"projectTime(tick) + '%'\"\n y1=\"30\" y2=\"70\" class=\"tick\"></line>\n </g>\n  <rect *ngFor=\"let activity of activities\"\n        [attr.x]=\"projectTime(activity.time) + '%'\"\n        height=\"40\" width=\"2px\" y=\"30\" class=\"activity\"></rect>\n</svg>\n```", "```js\nimport {\n  ChangeDetectionStrategy, Component, ElementRef, EventEmitter, HostListener,\n  Input, OnChanges, Output, SimpleChanges, ViewEncapsulation\n} from '@angular/core';\nimport {Activity, ActivitySliderSelection} from '../../model';\n\n@Component({\n  selector: 'mac-activity-slider',\n  templateUrl: './activity-slider.component.html',\n  styleUrls: ['./activity-slider.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.Native\n})\nexport class ActivitySliderComponent implements OnChanges {\n  @Input() activities: Activity[];\n  @Output() outSelectionChange = new EventEmitter<ActivitySliderSelection>();\n  padding = 20;\n  timeFirst: number;\n  timeLast: number;\n  timeSpan: number;\n  ticks: number[];\n selection: ActivitySliderSelection;\n\n  constructor(private elementRef: ElementRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.activities && this.activities) {\n      if (this.activities.length === 1) {\n        this.timeFirst = this.timeLast = this.activities[0].time;\n      } else if (this.activities.length > 1) {\n        this.timeFirst = this.activities[this.activities.length - 1].time;\n        this.timeLast = this.activities[0].time;\n      } else {\n        this.timeFirst = this.timeLast = new Date().getTime();\n      }\n\n      this.timeSpan = Math.max(1, this.timeLast - this.timeFirst);\n      this.computeTicks();\n\n this.selection = {\n start: this.timeFirst,\n end: this.timeLast\n };\n this.outSelectionChange.next(this.selection);\n    }\n  }\n\n  …\n}\n```", "```js\n<svg width=\"100%\" height=\"70px\">\n  <rect x=\"0\" y=\"30\" width=\"100%\" height=\"40\" class=\"slide\"></rect>\n  <rect *ngIf=\"selection\"\n [attr.x]=\"projectTime(selection.start) + '%'\"\n [attr.width]=\"projectTime(selection.end) - projectTime(selection.start) + '%'\"\n y=\"30\" height=\"40\" class=\"selection-overlay\"></rect>\n  <g *ngFor=\"let tick of ticks\">\n    <text [attr.x]=\"projectTime(tick) + '%'\" y=\"14\" class=\"time\">\n      {{tick | calendarTime}}\n    </text>\n    <line [attr.x1]=\"projectTime(tick) + '%'\" [attr.x2]=\"projectTime(tick) + '%'\"\n          y1=\"30\" y2=\"70\" class=\"tick\"></line>\n  </g>\n  <rect *ngFor=\"let activity of activities\"\n        [attr.x]=\"projectTime(activity.time) + '%'\"\n        height=\"40\" width=\"2px\" y=\"30\" class=\"activity\"></rect>\n</svg>\n```", "```js\nimport {\n  ChangeDetectionStrategy, Component, ElementRef, EventEmitter, HostListener,\n  Input, OnChanges, Output, SimpleChanges, ViewEncapsulation\n} from '@angular/core';\nimport {Activity, ActivitySliderSelection} from '../../model';\n\n@Component({\n  selector: 'mac-activity-slider',\n  templateUrl: './activity-slider.component.html',\n  styleUrls: ['./activity-slider.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.Native\n})\nexport class ActivitySliderComponent implements OnChanges {\n  @Input() activities: Activity[];\n  @Output() outSelectionChange = new EventEmitter<ActivitySliderSelection>();\n  padding = 20;\n  timeFirst: number;\n  timeLast: number;\n  timeSpan: number;\n  ticks: number[];\n  selection: ActivitySliderSelection;\n  modifySelection: boolean;\n\n  constructor(private elementRef: ElementRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.activities && this.activities) {\n      if (this.activities.length === 1) {\n        this.timeFirst = this.timeLast = this.activities[0].time;\n      } else if (this.activities.length > 1) {\n        this.timeFirst = this.activities[this.activities.length - 1].time;\n        this.timeLast = this.activities[0].time;\n      } else {\n        this.timeFirst = this.timeLast = new Date().getTime();\n      }\n\n      this.timeSpan = Math.max(1, this.timeLast - this.timeFirst);\n      this.computeTicks();\n\n      this.selection = {\n        start: this.timeFirst,\n        end: this.timeLast\n      };\n      this.outSelectionChange.next(this.selection);\n    }\n  }\n\n  computeTicks() {\n    const count = 5;\n    const timeSpanTick = this.timeSpan / count;\n    this.ticks = Array.from({length: count}).map((element, index) => {\n      return this.timeFirst + timeSpanTick * index;\n    });\n  }\n\n  totalWidth() {\n    return this.elementRef.nativeElement.clientWidth - this.padding * 2;\n  }\n\n  projectTime(time: number) {\n    const position = this.padding +\n      (time - this.timeFirst) / this.timeSpan * this.totalWidth();\n    return position / this.elementRef.nativeElement.clientWidth * 100;\n  }\n\n  projectLength(length: number) {\n    return this.timeFirst + (length - this.padding) / this.totalWidth() * this.timeSpan;\n  }\n\n @HostListener('mousedown', ['$event'])\n onMouseDown(event) {\n this.selection.start = this.selection.end = this.projectLength(event.offsetX);\n this.outSelectionChange.next(this.selection);\n this.modifySelection = true;\n event.stopPropagation();\n event.preventDefault();\n }\n\n @HostListener('mousemove', ['$event'])\n onMouseMove(event) {\n if (this.modifySelection) {\n this.selection.end = Math.max(this.selection.start, this.projectLength(event.offsetX));\n this.outSelectionChange.next(this.selection);\n event.stopPropagation();\n event.preventDefault();\n }\n }\n\n @HostListener('mouseup')\n onMouseUp() {\n this.modifySelection = false;\n }\n\n @HostListener('mouseleave')\n onMouseLeave() {\n this.modifySelection = false;\n }\n}\n```", "```js\nng generate component --spec false -ve none -cd onpush activities/activity\n```", "```js\n<img [attr.src]=\"activity.user.pictureUrl\"\n     [attr.alt]=\"activity.user.name\"\n     class=\"user-image\">\n<div class=\"info\" [class.info-align-right]=\"isAlignedRight()\">\n  <h3 class=\"title\">{{activity.title}}</h3>\n  <p class=\"author\">by {{activity.user.name}} {{activity.time | fromNow}}</p>\n  <p>{{activity.message}}</p>\n</div>\n```", "```js\nimport {Component, Input, HostBinding, ChangeDetectionStrategy} from '@angular/core';\nimport {Activity, ActivityAlignment} from '../../model';\n\n@Component({\n  selector: 'mac-activity',\n  templateUrl: './activity.component.html',\n  styleUrls: ['./activity.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ActivityComponent {\n  @Input() activity: Activity;\n  @Input() alignment: ActivityAlignment;\n  @Input() @HostBinding('class.start-mark') startMark;\n  @Input() @HostBinding('class.end-mark') endMark;\n\n  isAlignedRight() {\n    return this.alignment === 'right';\n  }\n}\n```", "```js\nng generate component --spec false -ve none -cd onpush activities/activities\n```", "```js\nimport {Component, Input, ChangeDetectionStrategy, EventEmitter, Output} from '@angular/core';\nimport {Activity, ActivitySliderSelection} from '../model';\n\n@Component({\n  selector: 'mac-activities',\n  templateUrl: './activities.component.html',\n  styleUrls: ['./activities.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ActivitiesComponent {\n  @Input() activities: Activity[];\n  @Input() selectedActivities: Activity[];\n  @Output() outSelectionChange = new EventEmitter<ActivitySliderSelection>();\n\n  selectionChange(selection: ActivitySliderSelection) {\n    this.outSelectionChange.emit(selection);\n  }\n}\n```", "```js\n<mac-activity-slider [activities]=\"activities\"\n                     (outSelectionChange)=\"selectionChange($event)\">\n</mac-activity-slider>\n<div class=\"l-container\">\n  <mac-activity *ngFor=\"let activity of selectedActivities, let odd = odd; let first = first; let last =  \n                        last\"\n                [activity]=\"activity\"\n                [alignment]=\"odd ? 'left' : 'right'\"\n                [startMark]=\"first\"\n                [endMark]=\"last\">\n  </mac-activity>\n</div>\n```", "```js\nng generate component --spec false -ve none -cd onpush container/project-activities-container\n```", "```js\nimport {Component, ViewEncapsulation, ChangeDetectionStrategy} from '@angular/core';\nimport {ProjectService} from '../../project/project.service';\nimport {Observable, combineLatest, BehaviorSubject} from 'rxjs';\nimport {Activity, ActivitySliderSelection} from '../../model';\nimport {map} from 'rxjs/operators';\nimport {ActivatedRoute} from '@angular/router';\nimport {ActivitiesService} from '../../activities/activities.service';\n\n@Component({\n  selector: 'mac-project-activities-container',\n  templateUrl: './project-activities-container.component.html',\n  styleUrls: ['./project-activities-container.component.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ProjectActivitiesContainerComponent {\n  activities: Observable<Activity[]>;\n  selection = new BehaviorSubject<ActivitySliderSelection | null>(null);\n  selectedActivities: Observable<Activity[]>;\n\n  constructor(private projectService: ProjectService,\n              private activitiesService: ActivitiesService,\n              private route: ActivatedRoute) {\n    this.activities = combineLatest(\n      this.activitiesService.getActivities(),\n      route.parent.params\n    ).pipe(\n      map(([activities, routeParams]) =>\n        activities\n          .filter(activity => activity.kind === 'project' &&\n            activity.projectId === +routeParams.projectId)\n      )\n    );\n\n    this.selectedActivities = combineLatest(\n      this.activities,\n      this.selection\n    ).pipe(\n      map(([activities, selection]) => {\n        if (selection) {\n          return activities.filter(\n            (activity) => activity.time >= selection.start && activity.time <= selection.end\n          );\n        } else {\n          return activities;\n        }\n      })\n    );\n  }\n\n  selectionChange(selection: ActivitySliderSelection) {\n    this.selection.next(selection);\n  }\n}\n```", "```js\n<mac-activities [activities]=\"activities | async\"\n                [selectedActivities]=\"selectedActivities | async\"\n                (outSelectionChange)=\"selectionChange($event)\">\n</mac-activities>\n```", "```js\nimport {Route} from '@angular/router';\nimport {ProjectContainerComponent} from './container/project-container/project-container.component';\nimport {TaskListContainerComponent} from './container/task-list-container/task-list-container.component';\nimport {ProjectCommentsContainerComponent} from './container/project-comments-container/project-comments-container.component';\nimport {ProjectContainerGuard} from './guards/project-container.guard';\nimport {ProjectActivitiesContainerComponent} from './container/project-activities-container/project-activities-container.component';\n\nexport const routes: Route[] = [{\n  path: 'projects/:projectId',\n  component: ProjectContainerComponent,\n  canActivate: [ProjectContainerGuard],\n  children: [{\n    path: 'tasks',\n    component: TaskListContainerComponent\n  }, {\n    path: 'comments',\n    component: ProjectCommentsContainerComponent\n  }, {\n path: 'activities',\n component: ProjectActivitiesContainerComponent\n }, {\n    path: '**',\n    redirectTo: 'tasks'\n  }]\n}, {\n  path: '',\n  pathMatch: 'full',\n  redirectTo: '/projects/1'\n}];\n```"]