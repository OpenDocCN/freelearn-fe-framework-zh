- en: '13'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '13'
- en: Unveiling Application Issues with the Vue Devtools
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Vue Devtools 揭示应用程序问题
- en: If there is one aspect in which Vue.js is clearly the winner over other frameworks
    and libraries, it is its attention to the **Development Experience** (**DX**).
    Since the beginning, Vue.js has focused on providing great experience to its developers
    and, this reached its peak a few years ago with the creation of the Vue **Devtools**
    by Guillaume Chau.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 如果说 Vue.js 在其他框架和库中有一个明显的优势，那就是其对 **开发体验**（**DX**）的关注。从开始，Vue.js 就专注于为开发者提供良好的体验，并且这种体验在几年前随着
    Guillaume Chau 创建 Vue **Devtools** 达到了顶峰。
- en: The Vue Devtools, which is available as a Firefox and Chrome extension, or a
    standalone Electron app, has been at the core of the Vue.js DX since its creation.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 可作为 Firefox 和 Chrome 扩展程序或独立 Electron 应用程序提供的 Vue Devtools 一直是 Vue.js DX 的核心。
- en: Recently, Vue Devtools has been making headlines for its ability to provide
    great insight for **Nuxt.js** (Vue.js’s meta-framework), helping developers comprehend
    the complexity of full stack JavaScript applications with simple and intuitive
    UI.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 最近，Vue Devtools 因其能够为 **Nuxt.js**（Vue.js 的元框架）提供深入了解而备受关注，帮助开发者通过简单直观的界面理解全栈
    JavaScript 应用程序的复杂性。
- en: We are going to start this chapter by learning how to install and use the extension
    within our preferred browser; we will then learn its layout by understanding how
    each piece of the extension works and how they fit together. We will then examine
    each individual section, Components, Timeline, Pinia, and vue-router, to provide
    you with a complete understanding of the extension.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从这个章节开始，学习如何在我们的首选浏览器中安装和使用扩展程序；然后我们将通过理解扩展程序的每一部分如何工作以及它们如何相互配合来了解其布局。然后我们将检查每个单独的部分，组件、时间轴、Pinia
    和 vue-router，以向您提供对扩展程序的全面理解。
- en: 'This chapter includes the following topics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章包括以下主题：
- en: Getting familiar with the Vue Devtools
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 熟悉 Vue Devtools
- en: Deep diving into the Vue Devtools Timeline tab
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 深入探索 Vue Devtools 时间轴标签
- en: Analyzing additional data with the Vue Devtools plugin
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Vue Devtools 插件分析附加数据
- en: By the end of the chapter, you will have a good understanding of the Vue Devtools
    and be able to use it in your day-to-day life. You will be able to use it to create
    new components, examine your application component tree, record user interactions
    in the Timeline, and finally, make use of package information such as Pinia and
    vue-router.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您将很好地理解 Vue Devtools，并能够在日常生活中使用它。您将能够使用它来创建新组件，检查您的应用程序组件树，在时间轴中记录用户交互，并最终利用
    Pinia 和 vue-router 等包信息。
- en: Getting familiar with the Vue Devtools
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 熟悉 Vue Devtools
- en: Even the most senior developers rely on debugging tools to help them develop
    high-quality and bug-free code (no code is really bug-free, but that is the aim
    when developing). The Vue Devtools goal is to provide quick insight into different
    parts of the Vue.js framework that can be used to help us complete our daily tasks.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 即使是最资深的开发者也依赖于调试工具来帮助他们开发高质量且无错误的代码（没有代码是完全无错误的，但这是开发时的目标）。Vue Devtools 的目标是提供对
    Vue.js 框架不同部分的快速洞察，这可以帮助我们完成日常任务。
- en: It is possible to debug our application by placing `alert` and `console.log`
    or another preferred method within our code, but what if you could find all the
    information you need directly in the browser, using a very nice and clean UI?
    That is the Vue Devtools for you.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过在我们的代码中放置 `alert` 和 `console.log` 或其他首选方法来调试我们的应用程序，但如果您可以直接在浏览器中使用一个非常漂亮且干净的界面找到所有所需信息呢？这就是
    Vue Devtools。
- en: In this section, we are going to learn how to enable the Vue Devtools on our
    browser and learn the different sections of this extension.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何在我们的浏览器上启用 Vue Devtools，并了解此扩展程序的不同部分。
- en: In the course of this chapter, we are going to use the Vue Devtools Chrome extension,
    but the UI and features should match other available sources, such as Firefox
    and the Electron app.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的内容中，我们将使用 Vue Devtools 的 Chrome 扩展程序，但界面和功能应与其他可用资源相匹配，例如 Firefox 和 Electron
    应用程序。
- en: To get started, we need to install the application on our browser; this can
    be done by searching for `Vue.js devtools` in your browser extension store. If
    you use Chrome, this can be found at [https://chromewebstore.google.com/category/extensions](https://chromewebstore.google.com/category/extensions).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用，我们需要在我们的浏览器上安装应用程序；这可以通过在浏览器扩展商店中搜索 `Vue.js devtools` 来完成。如果您使用 Chrome，可以在
    [https://chromewebstore.google.com/category/extensions](https://chromewebstore.google.com/category/extensions)
    找到它。
- en: '![](img/B21130_13_01.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B21130_13_01.jpg)'
- en: 'Figure 13.1: The Chrome extension store'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.1：Chrome 扩展商店
- en: There are a couple of extensions with the name **Vue.js devtools**, but you
    want to install the official one, supported and developed by the core team. This
    is defined by the **vuejs.org** checkmark.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个扩展名为 **Vue.js devtools**，但你想要安装由核心团队支持并开发的官方版本。这可以通过 **vuejs.org** 的勾选标记来识别。
- en: After a quick installation and a browser restart, you should now have full access
    to the extension. In fact, the extension does not need any configuration, and
    it is good to go out of the box.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在快速安装和浏览器重启后，你现在应该可以完全访问扩展。实际上，扩展不需要任何配置，直接使用即可。
- en: To test whether the extension is working, we can access our Companion App site
    at [http://localhost:5173/](http://localhost:5173/) and check the Vue.js extension
    icon. This is grayed out if the extension is not currently working, or colored
    if the Vue Devtools is available and in action.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试扩展是否工作，我们可以访问我们的伴侣应用网站 [http://localhost:5173/](http://localhost:5173/) 并检查
    Vue.js 扩展图标。如果扩展当前未工作，图标会变灰，如果 Vue Devtools 可用并正在运行，图标则会着色。
- en: '![](img/B21130_13_02.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B21130_13_02.jpg)'
- en: 'Figure 13.2: The Vue Devtools extension'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.2：Vue Devtools 扩展
- en: Clicking on the icon will confirm that the extension was able to find Vue.js
    and enable the Vue Devtools, as shown in *Figure 13**.2*. The extension lives
    within Chrome DevTools as a new tab. This tab should be available automatically
    as the last tab available within the DevTools navigation bar under the name of
    **Vue**.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 点击图标将确认扩展能够找到 Vue.js 并启用 Vue Devtools，如图 *图 13*.2* 所示。扩展作为 Chrome DevTools 中的一个新标签存在。这个标签应该会自动作为
    DevTools 导航栏中最后一个可用的标签，名为 **Vue**。
- en: '![](img/B21130_13_03.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B21130_13_03.jpg)'
- en: 'Figure 13.3: Chrome DevTools navigation'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.3：Chrome DevTools 导航
- en: What is Chrome DevTools?
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是 Chrome DevTools？
- en: If you do not know what Chrome DevTools is or have never used it before, I suggest
    you take a look at the official documentation at [https://developer.chrome.com/docs/devtools](https://developer.chrome.com/docs/devtools)
    and start to learn about all the different ways that this tool can be used.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不知道 Chrome DevTools 是什么，或者以前从未使用过它，我建议你查看官方文档 [https://developer.chrome.com/docs/devtools](https://developer.chrome.com/docs/devtools)，并开始了解这个工具可以以不同方式使用的所有不同方法。
- en: The Vue Devtools automatically listens for a Vue.js application and is available
    immediately for all Vue.js sites running in development mode. This is a very important
    point, as the extension will not work on a website built for production. If you
    tried to access a production Vue.js site (such as the Vue.js official site), the
    extension would load but be inactive.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Vue Devtools 会自动监听 Vue.js 应用，并在开发模式下运行的所有 Vue.js 网站上立即可用。这是一个非常重要的点，因为扩展在用于生产的网站上不会工作。如果你尝试访问一个生产
    Vue.js 网站（如 Vue.js 官方网站），扩展会加载但处于非活动状态。
- en: '![](img/B21130_13_04.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B21130_13_04.jpg)'
- en: 'Figure 13.4: The Vue Devtools extension popup when accessing a production-built
    site'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.4：访问生产构建网站时 Vue Devtools 的弹出窗口
- en: It is now time to return to the Companion App, open the Chrome DevTools, and
    click on the **Vue** tab to start to learn what this extension has to offer.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候回到伴侣应用，打开 Chrome DevTools，并点击 **Vue** 选项卡，开始学习这个扩展能提供什么功能。
- en: In this section, we are going to introduce the main parts of the extension,
    but as we will cover later in the chapter, the extension automatically expands
    to provide more information about different packages, such as Pinia or vue-router.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍扩展的主要部分，但正如我们将在本章后面提到的，扩展会自动扩展以提供有关不同包（如 Pinia 或 vue-router）的更多信息。
- en: '![](img/B21130_13_05.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B21130_13_05.jpg)'
- en: 'Figure 13.5: the Vue Devtools'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.5：Vue Devtools
- en: 'The Vue Devtools can be divided into four main parts. We will briefly introduce
    you to all of them, starting from the left and moving toward the right:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Vue Devtools 可以分为四个主要部分。我们将简要介绍所有这些部分，从左到右依次介绍：
- en: '**The main navigation**: This is positioned on the left-hand side as a vertical
    menu. This currently holds two entities– Components and the Timeline.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主要导航**：它位于左侧，作为一个垂直菜单。目前包含两个实体——组件和时序图。'
- en: '**The apps list**: Vue.js 3 allows you to have multiple applications on the
    same site, and the Vue.Devtools allows us to debug each of them easily.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用列表**：Vue.js 3 允许你在同一个网站上拥有多个应用，Vue Devtools 允许我们轻松地调试每一个。'
- en: '**The main content**: This is the area that includes the selected tool. In
    the case of *Figure 13**.5*, we selected the Components, so this section displays
    a component tree.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主要内容**：这是包括所选工具的区域。在*图13*.5中，我们选择了组件，因此本节显示组件树。'
- en: '`<``SocialPost>` component.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<SocialPost>`组件。'
- en: It is now time to start and learn the individual section of the extension. We
    will first start with the default sections, Components and the Timeline, and then
    move into add-on plugins such as Pinia and vue-router.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候开始学习扩展的各个部分了。我们首先从默认部分开始，即组件和时间轴，然后进入如Pinia和vue-router等附加插件。
- en: Debugging components in your Vue Devtools
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Vue Devtools中调试组件
- en: In this section, we are going to see what Vue Devtools has to offer to debug
    and develop our components.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将了解Vue Devtools为我们提供的调试和开发组件的功能。
- en: Having a tool such as Vue Devtools while developing your components can really
    help you improve your skills. Vue Devtools help surface information such as component
    properties, events, and other information that can sometimes be hidden or hard
    to grasp without a visual clue.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发组件时拥有Vue Devtools这样的工具可以真正帮助您提高技能。Vue Devtools可以帮助显示组件属性、事件和其他信息，这些信息有时在没有视觉线索的情况下可能难以发现或理解。
- en: The main goal of the Component section of the extension, which can be reached
    by clicking the top icon in the main navigation, is to provide us with full visibility
    of the component tree and detailed information on each component.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展组件部分的主体目标，可以通过点击主导航中的顶部图标访问，是提供我们对组件树的全面可见性和每个组件的详细信息。
- en: 'Let’s start by looking into the component tree and what information it provides
    us:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先看看组件树以及它为我们提供了哪些信息：
- en: '![](img/B21130_13_06.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21130_13_06.jpg)'
- en: 'Figure 13.6: The component tree'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.6：组件树
- en: The component tree provided by the extension is very similar to the DOM tree
    offered by browse developers’ tools, with the main difference being that the DOM
    tree shows DOM nodes, while the Vue Devtools is made up of Vue components.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展提供的组件树与浏览器开发者工具提供的DOM树非常相似，主要区别在于DOM树显示DOM节点，而Vue Devtools由Vue组件组成。
- en: In *Figure 13**.6*, we can see the relationship between the parent and children
    components. In fact, we can see that `<SocialPosts>` has five `<SocialPost>` children
    and that `<SocialPost>` has three children.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在*图13*.6中，我们可以看到父组件和子组件之间的关系。实际上，我们可以看到`<SocialPosts>`有五个`<SocialPost>`子组件，而`<SocialPost>`有三个子组件。
- en: The tree also shows important information, such as the route used by `<RouterView>`,
    defined by the `home :/` purple pill, the unique key of each individual `<SocialPost>`,
    and the URL defined within each `<RouterLink>`.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 树状图还显示了重要信息，例如由`home :/`紫色药丸定义的`<RouterView>`使用的路由，每个`<SocialPost>`个体的唯一键，以及每个`<RouterLink>`中定义的URL。
- en: Being able to visualize the components that are rendered on a page is important,
    but being able to highlight them is even better. You may not see this as important
    initially, but being able to select a component in the tree and see it on screen
    is a very useful feature.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 能够可视化页面上渲染的组件很重要，但能够突出显示它们则更好。您可能一开始不会觉得这很重要，但能够在树中选择组件并在屏幕上看到它是一个非常实用的功能。
- en: There are two ways to highlight a component. You can click on the component
    directly on the tree or you can select the component in the page by enabling **Select
    a component on the page**, as shown in *Figure 13**.7*. This last feature can
    either be enabled by clicking the icon or by using the keyboard shortcut, hinted
    by the popup shown when hovering over the icon.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种方式可以突出显示组件。您可以直接在树中点击组件，或者通过启用**在页面上选择组件**来在页面上选择组件，如图*图13*.7所示。此功能可以通过点击图标或使用悬停在图标上时显示的弹出窗口中提示的键盘快捷键来启用。
- en: '![](img/B21130_13_07.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21130_13_07.jpg)'
- en: 'Figure 13.7: The Selecting a component in the page button'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.7：页面中选择组件的按钮
- en: When a component is selected, it will be highlighted on screen with a green
    background.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 当选择一个组件时，它将在屏幕上以绿色背景突出显示。
- en: '![](img/B21130_13_08.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21130_13_08.jpg)'
- en: 'Figure 13.8: A social post component highlighted by Vue Devtools'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.8：由Vue Devtools突出显示的社会帖子组件
- en: Now that we can read the tree and select individual components, it is time to
    dive deeper into the extension and see what details are displayed for each component.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经可以读取树并选择单个组件，是时候深入扩展并查看每个组件显示的详细信息。
- en: In fact, selecting a component not only provides you with a visual clue about
    the component by highlighting it in green as displayed in *Figure 13**.8*, but
    also exposes a list of internal information about it.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，选择一个组件不仅通过将其高亮显示为绿色（如图*图 13.8*所示）提供给您一个关于组件的视觉线索，而且还暴露了关于它的内部信息列表。
- en: The sidebar includes all the information available within the component scope
    and is the equivalent of being able to print everything that is available within
    the script setup. It includes basic information such as `props`, Refs, and Reactive
    and also more advanced features, such as Pinia store dependencies and router info.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 侧边栏包括组件作用域内可用的所有信息，相当于能够打印出脚本设置中可用的所有内容。它包括基本信息，如`props`、Refs和响应式，以及更高级的功能，如Pinia存储依赖项和路由信息。
- en: '![](img/B21130_13_09.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B21130_13_09.jpg)'
- en: 'Figure 13.9: A social post’s detailed information displayed by Chrome DevTools'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.9：Chrome DevTools显示的社交帖子详细信息
- en: Having access to internal information of each individual component on the screen
    is the most important and powerful feature of the Vue Devtools. Being able to
    quickly see what the properties that a parent is sending its child are, or the
    current value of a specific R`ef` will save you countless hours of debugging.
    Furthermore, seeing the component state will also help you better understand the
    Vue.js framework. When I first started to learn Vue, I used the Vue Devtools to
    understand how components worked and discover the connections between props, internal
    data, and life cycles, and I have recommended it to all my mentees ever since.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 能够访问屏幕上每个组件的内部信息是Vue Devtools最重要的强大功能。能够快速查看父组件发送给子组件的属性或特定R`ef`的当前值，可以为您节省无数小时的调试时间。此外，查看组件状态也将帮助您更好地理解Vue.js框架。当我最初开始学习Vue时，我使用Vue
    Devtools来了解组件的工作原理，并发现props、内部数据和生命周期之间的联系，并且从那时起我就向我的所有徒弟推荐它。
- en: Use cases for the Vue Devtools information panel
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Vue Devtools信息面板的用例
- en: In this section, we are going to explore a couple of use cases in which we would
    use the Vue Devtools information panel. As previously mentioned, the information
    panel includes lots of useful resources, but they are of no use unless we know
    how and when to use them.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨几个使用Vue Devtools信息面板的用例。如前所述，信息面板包含许多有用的资源，但除非我们知道如何以及何时使用它们，否则它们毫无用处。
- en: Analyzing dynamically loaded data
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 分析动态加载数据
- en: In this first scenario, we are going to consider a case in which a developer
    would be required to debug and understand what data is returned by an API. In
    the case of our Companion App, this situation could have arisen when developing
    **social posts**. In fact, being able to see the data structure and value would
    have helped the development of that component.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个第一个场景中，我们将考虑一个开发者需要调试和理解API返回数据的用例。在我们的Companion App中，这种情况可能在开发**社交帖子**时出现。实际上，能够看到数据结构和值将有助于该组件的开发。
- en: We can see the complete information retrieved by the API as the `posts` array
    in `<SocialPosts>`, as displayed in *Figure 13**.10*.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在*图 13.10*中看到API检索到的完整信息，即`<SocialPosts>`中的`posts`数组。
- en: '![](img/B21130_13_10.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B21130_13_10.jpg)'
- en: 'Figure 13.10: Information about the posts shown in the information panel of
    Vue Devtools'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.10：Vue Devtools信息面板中显示的帖子信息
- en: Modifying Refs and Reactive data
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 修改Refs和响应式数据
- en: JavaScript has gained popularity because of the immense possibility to add interactivity
    to our web pages. Unfortunately, interactivity is not always easy to achieve,
    and it needs many tries before the logic usually works as expected.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 由于为我们的网页添加交互性的巨大可能性，JavaScript已经变得流行。不幸的是，交互性并不总是容易实现，通常需要多次尝试才能使逻辑按预期工作。
- en: While developing a Vue.js component, you will probably find yourself in a situation
    in which you will have to test different scenarios that would require data to
    be in a specific state. This can sometimes be very time-consuming or complicated
    to achieve.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发Vue.js组件时，你可能会发现自己处于需要测试不同场景的情况，这些场景要求数据处于特定状态。这有时可能非常耗时或复杂。
- en: A very common scenario would be the need to develop an “error” screen or a “a
    thank you page” displayed after an ecommerce purchase. To develop this component,
    developers would need to reproduce multiple steps to reach the desired component
    state, making the act of developing the component very slow. Luckily for us, with
    the help of the Vue Devtools, reproducing the states required to develop this
    component can easily be achieved.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 一个非常常见的场景是需要开发一个“错误”屏幕或电子商务购买后显示的“感谢”页面。为了开发这个组件，开发者需要重现多个步骤以达到所需的组件状态，这使得开发组件的过程非常缓慢。幸运的是，有了
    Vue Devtools 的帮助，我们可以轻松地重现开发此组件所需的状态。
- en: In fact, Vue Devtools allows you to modify Refs and Reactive data on the fly.
    This can be done directly in the information panel, as shown in *Figure 13**.11*.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，Vue Devtools 允许您实时修改 Refs 和 Reactive 数据。这可以直接在信息面板中完成，如图 *图 13.11* 所示。
- en: You can modify props too
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以修改 props
- en: With the default setting, the only data that can be modified are Refs and Reactive,
    but there is a setting that allows you to also modify Props. I would personally
    not suggest enabling this, as it can produce unexpected consequences, but knowing
    of its existence can be helpful as a last resource.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 默认设置下，唯一可以修改的数据是 Refs 和 Reactive，但有一个设置允许您修改 Props。我个人不建议启用此功能，因为它可能会产生意外的后果，但了解其存在可能作为最后的手段是有帮助的。
- en: '![](img/B21130_13_11.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B21130_13_11.jpg)'
- en: 'Figure 13.11: A Vue Vue Devtools quick edit'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.11：Vue Vue Devtools 快速编辑
- en: Monitoring changes
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 监控变化
- en: Modifying the data within a component is not the only requirement to develop
    complex components. In fact, another important feature is the ability to see in
    real time the values of component data. For example, you may want to ensure that
    your toggle button works successfully but that a R`ef` changes from `false` to
    `true`, that a computed property changes its value as expected, or finally, that
    a “reset” logic works properly by resetting all data to its initial state. The
    possibilities are endless.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 修改组件内的数据不是开发复杂组件的唯一要求。实际上，另一个重要的功能是能够实时查看组件数据的值。例如，您可能想确保您的切换按钮能够成功工作，同时一个 R`ef`
    从 `false` 变为 `true`，一个计算属性按预期更改其值，或者最后，通过重置所有数据到其初始状态来确保“重置”逻辑正常工作。可能性是无限的。
- en: When working with the Vue Devtools, the data displayed in the information panel
    will change automatically in real time when modified. This allows us to interact
    with the application and see the changes that our interaction yields.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 Vue Devtools 时，信息面板中显示的数据会在修改时自动实时更改。这使我们能够与应用程序交互并看到我们的交互产生的变化。
- en: In this section, we introduced the Vue Devtools by learning how to install and
    enable the extension. We then defined all the different areas of the Vue Devtools
    and learned how to use it to highlight and read the Vue component tree. Finally,
    we learned how to dive into a component by accessing the information panel. In
    this panel, we learned how to see data, monitor changes, and even make changes
    on the fly.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们通过学习如何安装和启用扩展来介绍了 Vue Devtools。然后我们定义了 Vue Devtools 的所有不同区域，并学习了如何使用它来突出显示和读取
    Vue 组件树。最后，我们学习了如何通过访问信息面板来深入一个组件。在这个面板中，我们学习了如何查看数据、监控变化，甚至实时进行更改。
- en: In the next section, we are going to introduce a more advanced section of the
    DevTool, the Timeline section.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将介绍 DevTool 的一个更高级的部分——时间轴部分。
- en: Deep dive into the Vue Devtools Timeline tab
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入 Vue Devtools 时间轴标签
- en: In the previous section, we introduced how to use the Component section of the
    Vue Devtools to analyze and develop our Vue components. In this section, we will
    continue exploring the main navigation to introduce the next available section
    – the Timeline.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们介绍了如何使用 Vue Devtools 的组件部分来分析和开发我们的 Vue 组件。在本节中，我们将继续探索主要导航，介绍下一个可用的部分——时间轴。
- en: The Timeline section is home to tools such as event and performance monitoring
    that help make sense of the application, giving us a glimpse into the framework
    engine.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 时间轴部分是事件和性能监控等工具的家园，这些工具有助于理解应用程序，让我们一窥框架引擎。
- en: This section is probably more for advanced use cases, but being able to know
    what the tools offer is always beneficial, even if they are not used in your day-to-day
    activities.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 本节可能更适合高级用例，但了解工具提供的内容总是有益的，即使它们在日常活动中没有被使用。
- en: The Timeline tab can be accessed from the main navigation on the left-hand side
    of the extension, just below the Component tab that we have been using so far.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 可以从扩展的左侧主导航中访问时间轴标签，就在我们之前使用的组件标签下方。
- en: The Timeline panel includes three sections. The first is the layers section,
    which displays all the different layers on which we are going to collect and display
    information. The second is the Timeline itself. This is provided in two different
    ways, as an actual Timeline or in a table format. Finally, we have the information
    panel, which is very similar to the one provided in the Component section.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 时间轴面板包括三个部分。第一部分是图层部分，它显示我们将要收集和显示信息的所有不同图层。第二部分是时间轴本身。它以两种不同的方式提供，实际的时间轴或表格格式。最后，我们有信息面板，它与组件部分提供的信息面板非常相似。
- en: '![](img/B21130_13_12.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B21130_13_12.jpg)'
- en: 'Figure 13.12: The Vue Devtools Timeline panel'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.12：Vue Devtools时间轴面板
- en: The layer section includes all the different information that the Timeline can
    provide. The layers offered by the Vue Devtools can differ between applications,
    as it can also include an installed package, like the one shown in *Figure 13**.12*,
    where data for Pinia and Router is also available within the layer’s menu.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图层部分包括时间轴可以提供的所有不同信息。Vue Devtools提供的图层在不同应用程序之间可能有所不同，因为它还可以包括一个已安装的包，如*图13.12*中所示，其中Pinia和Router的数据也包含在图层菜单中。
- en: Layers can produce lots of data (as we will see later in the section), and it
    is common to hide most layers and just keep the ones that are relevant to your
    specific task.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 图层可以产生大量数据（我们将在后面的部分中看到），通常隐藏大多数图层，只保留与你的特定任务相关的图层。
- en: Enabling the Timeline is resource-intensive, and it does not run automatically
    all the time. To be able to enable the Timeline, we would need to click the record
    button next to the layer’s header.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 启用时间轴是资源密集型的，并且它不会一直自动运行。要启用时间轴，我们需要点击图层标题旁边的记录按钮。
- en: Being able to start and stop recording will not only help us save some battery
    life; it will also ensure that the data displayed in the Timeline is as compact
    as possible. So, for example, if you want to analyze what happens when a user
    creates a post, you will enable it, create the post, and then stop the recording.
    Doing so will ensure that just the events you are interested in are shown on the
    Timeline.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 能够开始和停止录制不仅可以帮助我们节省一些电池寿命；它还将确保时间轴上显示的数据尽可能紧凑。例如，如果你想分析用户创建帖子时发生的情况，你将启用它，创建帖子，然后停止录制。这样做将确保仅显示你感兴趣的事件。
- en: Debugging a post removal
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 调试帖子删除
- en: To better understand the Timeline, we are going to record and analyze the information
    provided by the Timeline when removing a post and try to determine how this can
    be used for future debugging purposes.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解时间轴，我们将记录和分析在删除帖子时时间轴提供的信息，并试图确定如何将其用于未来的调试目的。
- en: 'To be able to analyze the output of the Vue Devtools Timeline section, I am
    going to perform the following steps within our app. These steps will produce
    a report that we can use to understand what information the Timeline provides:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够分析Vue Devtools时间轴部分的输出，我将在我们的应用中执行以下步骤。这些步骤将生成一个报告，我们可以用它来了解时间轴提供了哪些信息：
- en: '**Access the Timeline tab**: Open DevTools and click on the Timeline tab on
    the main navigation.'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**访问时间轴标签**：打开DevTools并点击主导航中的时间轴标签。'
- en: '**Select the layers**: We will only use the **Component events**, **Performance**,
    and **Pinia** layers. Select them from the layer’s menu.'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**选择图层**：我们只会使用**组件事件**、**性能**和**Pinia**图层。从图层菜单中选择它们。'
- en: '**Start recording**: Now, we are ready to record our actions. Start the recording
    by clicking the record button.'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**开始录制**：现在，我们准备好记录我们的操作。通过点击记录按钮开始录制。'
- en: '`"delete"` icon of one of the posts shown on the screen.'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 屏幕上显示的某个帖子中的“删除”图标。
- en: '**Stop the recording**: Click on the record button again to stop the recording.'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**停止录制**：再次点击记录按钮以停止录制。'
- en: After the preceding steps, the Timeline should display something like what is
    shown in *Figure 13**.13*.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成前面的步骤后，时间轴应该显示类似于*图13.13*所示的内容。
- en: '![](img/B21130_13_13.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B21130_13_13.jpg)'
- en: 'Figure 13.13: The Timeline displaying information after deleting a post'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.13：删除帖子后显示的时间轴信息
- en: Let’s see what information is shown after our recorded activity. Before checking
    the output of the recorded session, let’s go back to the application code and
    discover what action we expect from the aforementioned action. The code shows
    that when clicking the delete icon within the `<SocialPost>` component, it should
    emit an event called `"delete"` that is then used in `<SocialPosts>` to trigger
    a Pinia action, subsequently deleting the post from the store.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看记录活动后显示的信息。在检查记录会话的输出之前，让我们回到应用程序代码中，发现我们期望上述操作执行的动作。代码显示，当在`<SocialPost>`组件内部点击删除图标时，它应该发出一个名为`"delete"`的事件，然后用于`<SocialPosts>`触发Pinia操作，从而从存储中删除帖子。
- en: If we go back to our recorded activity, we can see that the Timeline shows some
    activity in all three layers. The first layer, `"delete"`, and it has been triggered
    by `<SocialPost>`, just as we expected. The information panel shows detailed information
    about the event, such as params, but in this case, we have none and the array
    is empty.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们回到我们的记录活动，我们可以看到时间线显示了所有三个层的一些活动。第一层是`"delete"`，正如我们所期望的那样，是由`<SocialPost>`触发的。信息面板显示了有关事件的详细信息，例如参数，但在这个案例中，我们没有参数，数组为空。
- en: 'Next, we are going to see what the **Pinia** layer shows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将查看**Pinia**层显示的内容：
- en: '![](img/B21130_13_14.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B21130_13_14.jpg)'
- en: 'Figure 13.14: Pinia’s timeline event'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.14：Pinia的时间线事件
- en: After selecting the `removePost` action, with detailed information displayed
    in the information panel. Next, we have a mutation; this is called from `removePost`
    and is the actual deletion of the post from the `posts` array. Then, we have the
    end of `removePost` with the `removePost end` event. Overall, the action took
    0.8 ms to complete. So far, we have been able to analyze whether an event was
    triggered and follow the steps of a Pinia action.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择`removePost`操作后，信息面板中显示了详细的信息。接下来，我们有一个突变；这是从`removePost`调用的，是实际从`posts`数组中删除帖子的操作。然后，我们有`removePost
    end`事件的`removePost`结束。总的来说，该操作耗时0.8毫秒完成。到目前为止，我们已经能够分析事件是否被触发，并跟踪Pinia操作的步骤。
- en: Keep track of your actions
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 跟踪您的操作
- en: Our `removePost` action was very fast and completed in less than 1 ms. This
    is not always the case, as some actions may include complicated code or external
    operations that may delay its execution. Using the Timeline can help you debug
    and fix slow actions.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`removePost`操作非常快，在不到1毫秒内完成。这并不总是如此，因为某些操作可能包括复杂的代码或外部操作，这可能会延迟其执行。使用时间线可以帮助您调试和修复慢速操作。
- en: Finally, we are going to check what information is shown in the performance
    layer. Just like the other two layers, when selecting this layer, we are presented
    with individual events and information about the events.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将检查性能层显示的信息。就像其他两个层一样，当选择此层时，我们会看到单个事件及其信息。
- en: '![](img/B21130_13_15.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B21130_13_15.jpg)'
- en: 'Figure 13.15: The performance Timeline layer'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.15：性能时间线层
- en: The performance layer is used for advanced use cases, and it is usually accessed
    to unearth performance-related issues or to highlight an incorrectly configured
    code base that forces you to re-render one or more components.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 性能层用于高级用例，通常用于挖掘性能相关的问题或突出显示配置错误的代码库，这迫使您重新渲染一个或多个组件。
- en: This layer displays when a specific component is rendered or updated. In this
    scenario, it just recorded four events, but this can be extremely complex for
    larger applications.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 此层显示特定组件何时渲染或更新。在这种情况下，它只记录了四个事件，但对于大型应用程序来说，这可能会非常复杂。
- en: Being able to analyze the rendering time and how many times a component renders
    can be very useful for applications that suffer from performance issues. Incorrect
    use of **computed properties** or **watch** can result in the unnecessary re-rendering
    of components, and the performance Timeline is the best tool to help you debug
    and fix performance bottlenecks.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 能够分析渲染时间和组件渲染的次数对于性能问题严重的应用程序非常有用。**计算属性**或**监视器**的不正确使用可能导致组件的不必要重新渲染，性能时间线是帮助您调试和修复性能瓶颈的最佳工具。
- en: In this section, we have learned how to use the Timeline section of Vue Devtools.
    We have defined its structure, recorded a sample test to see how our application
    performs and learned what information is shown by the individual layers.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了如何使用Vue Devtools的时间线部分。我们定义了其结构，记录了一个示例测试以查看我们的应用程序性能，并了解了各个层显示的信息。
- en: In the next and last section, we are going to see how Vue Devtools can be expanded
    with the help of custom plugins.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节和最后一节中，我们将看到如何通过自定义插件扩展 Vue Devtools。
- en: Analyzing additional data with Vue Devtools plugins
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Vue Devtools 插件分析附加数据
- en: You have probably noticed from the previous section that Vue Devtools not only
    includes information regarding the core framework but also exposes extra information,
    such as the Pinia store and vue-router.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，从上一节中，Vue Devtools 不仅包括有关核心框架的信息，还公开了额外的信息，例如 Pinia 存储 和 vue-router。
- en: This happened automatically, as we did not have to do anything extra to expand
    the Vue Devtools capabilities. In fact, the plugins are actually part of the packages
    that we installed in the application, so installing a package can sometimes result
    in an additional feature being displayed in our Vue Devtools.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这一切都是自动发生的，因为我们没有做任何额外的事情来扩展 Vue Devtools 的功能。事实上，插件实际上是我们在应用程序中安装的包的一部分，因此安装一个包有时会导致在
    Vue Devtools 中显示额外的功能。
- en: Any plugin offers something different. In our case, both Pinia and vue-router
    adds a layer in the Timeline view, information in the component details panel,
    and finally, an extra tab on the main navigation.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 任何插件都提供不同的功能。在我们的例子中，Pinia 和 vue-router 都在时间轴视图中添加了一层，在组件详细信息面板中添加了信息，最后在主导航中添加了一个额外的选项卡。
- en: In this section, we are going to deep dive into the two available plugins –
    Pinia and vue-router.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将深入了解两个可用的插件——Pinia 和 vue-router。
- en: The Pinia Vue Devtools plugin
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Pinia Vue Devtools 插件
- en: The first extension plugin that we are going to analyze is the one provided
    by the Pinia store.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要分析的第一款扩展插件是由 Pinia 存储提供的。
- en: The Pinia store, distinguished by its iconic Pineapple logo, can be accessed
    from the main navigation on the left-hand side of the extension.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 以其标志性的菠萝标志而闻名的 Pinia 存储，可以从扩展的左侧主导航中访问。
- en: This plugin will feel somewhat familiar, as it has a similar layout to the Component
    section.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这个插件可能会让你感到有些熟悉，因为它与组件部分的布局相似。
- en: '![](img/B21130_13_16.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21130_13_16.jpg)'
- en: 'Figure 13.16: The Pinia Vue Devtools plugin'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.16：Pinia Vue Devtools 插件
- en: In the Pinia extension, we are able to inspect our stores. The plugin offers
    the ability to see all stores together, by selecting **Pinia (root)** or the individual
    store available within our state management.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Pinia 扩展中，我们能够检查我们的存储。该插件提供了通过选择 **Pinia (root**) 或我们状态管理中可用的单个存储来查看所有存储的能力。
- en: The data shown in the information panel is divided by `state` and `getters`,
    and just like the Component section, it can be modified on the fly.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 信息面板中显示的数据按 `state` 和 `getters` 分隔，就像组件部分一样，它可以随时修改。
- en: Just like most of the features we have explored so far, being able to quickly
    review the current state of your stores and modify their values is extremely valuable.
    Having access to this information on the fly will save you countless hours of
    development.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们迄今为止探索的大多数功能一样，能够快速查看存储的当前状态并修改它们的值非常有价值。能够随时访问这些信息将节省你无数小时的开发时间。
- en: The vue-router Vue Devtools plugin
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: vue-router Vue Devtools 插件
- en: As you may remember, back in [*Chapter 10*](B21130_10.xhtml#_idTextAnchor135),
    where we introduced the router within the Companion App, we had to create a set
    of rules that would be used by the router to decide which route to display to
    our users.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所记，在[*第 10 章*](B21130_10.xhtml#_idTextAnchor135)中，我们介绍了在伴侣应用中引入的路由，我们必须创建一组规则，这些规则将由路由器使用以决定向用户显示哪个路由。
- en: The vue-router plugin helps visualize and examine these rules directly in your
    browser. The plugin provides a complete list of the routes defined with their
    full information, including names, regex matches, and required keys.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: vue-router 插件可以帮助你在浏览器中直接可视化并检查这些规则。该插件提供了一个包含完整信息的路由列表，包括名称、正则表达式匹配和所需键。
- en: '![](img/B21130_13_17.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21130_13_17.jpg)'
- en: 'Figure 13.17: The vue-router rules list'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.17：vue-router 规则列表
- en: 'The list displayed in *Figure 13**.17* shows the following information:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 13.17* 中显示的列表显示了以下信息：'
- en: The URL defined for a specific router (`/about)`.
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为特定路由定义的 URL (`/about`)。
- en: The name of the route shown as a blue pill (`user-profile`).
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 蓝色药丸中显示的路由名称（`user-profile`）。
- en: The current active route, defined by a blue pill with the `active` label.
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当前活动路由，由带有 `active` 标签的蓝色药丸表示。
- en: Extra information such as `redirect` and `exact`. That signifies respectively
    the presence of a redirect rule (`/user/:userId`) and the notion that the currently
    active route matches perfectly to the rule match regex.
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如`redirect`和`exact`之类的额外信息。这分别表示存在重定向规则（`/user/:userId`）以及当前活动路由与规则匹配正则表达式完美匹配的概念。
- en: 'Now that we have defined all the information available within the vue-router
    rules list, it is time to see what information is provided for each individual
    router rule. Let’s click `/user/:userId` to see what it shows:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经定义了vue-router规则列表中可用的所有信息，是时候看看为每个单独的路由规则提供了哪些信息。让我们点击`/user/:userId`来查看它显示的内容：
- en: '![](img/B21130_13_18.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B21130_13_18.jpg)'
- en: 'Figure 13.18: Route information from the vue-router Vue Devtools plugin'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.18：vue-router Vue Devtools插件的路由信息
- en: The plugin displays all the data that is available within the routes array,
    such as `path`, `name`, and `redirect`. Furthermore, the plugin exposes more advanced
    data, such as the regex used by the package to decide the correct route to display,
    details information on the keys, such as `optional` and `repeatable`, and, last
    but not least, the `score` value of each entry within the path.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 该插件显示路由数组中可用的所有数据，例如`path`、`name`和`redirect`。此外，该插件还公开了更高级的数据，例如包用于决定显示正确路由所使用的正则表达式，以及关于键的详细信息，例如`optional`和`repeatable`，最后但同样重要的是，路径中每个条目的`score`值。
- en: During your career, you are probably not going to spend lots of time in this
    area, but when you do so, it will have everything you need to solve your problems.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的职业生涯中，您可能不会在这个区域花费很多时间，但当你这样做时，它将拥有解决您问题的所有所需。
- en: Summary
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: The Vue ecosystem prides itself on offering one of the best DX available within
    the whole industry, and Vue Devtools is probably the one to blame for this.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: Vue生态系统自豪地提供整个行业中最好的开发体验之一，Vue Devtools可能是造成这种情况的罪魁祸首。
- en: Detailed information, performance metrics, and an automatic plugin extension
    make the extension a must-have for all Vue developers. The most important take
    from this chapter is for you to install the extension locally and start to use
    it during your projects.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 详细信息、性能指标和自动插件扩展使该扩展成为所有Vue开发者的必备品。本章最重要的收获是您需要在本地安装扩展并开始在项目中使用它。
- en: In this chapter, we learned how to install and navigate Vue Devtools. We covered
    the individual default sections offered – Components and the Timelin. Finally,
    we ended the chapter by introducing the power of the package plugin within the
    Vue Devtools, by showing the additional information that Pinia and vue-router
    provide within the debugging extension.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何安装和导航Vue Devtools。我们涵盖了提供的各个默认部分——组件和时间线。最后，我们通过展示Pinia和vue-router在调试扩展中提供的附加信息，介绍了Vue
    Devtools中包插件的强大功能。
- en: In the next and final chapter, we are going to touch upon future learnings and
    resources that you can use to continue your journey to becoming a Vue developer.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章和最后一章中，我们将探讨未来的学习和资源，您可以使用这些资源继续您的Vue开发者之旅。
