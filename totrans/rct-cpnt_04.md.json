["```js\nconstructor() {\n    super();\n\n    var pages = LocalStore.get(\"pages\", []);\n\n    this.id = 1;\n\n    this.pages = pages.map((page) => {\n        page.id = this.id++;\n        return page;\n    });\n}\n\ninsert() {\n    this.pages.push({\n        \"id\": this.id,\n        \"title\": \"New page \" + this.id,\n        \"body\": \"\"\n    });\n\n    this.id++;\n\n    LocalStore.set(\"pages\", this.pages);\n\n    this.emit(\"update\", this.pages);\n}\n```", "```js\nonInsert() {\n    this.props.backend.insert();\n}\n```", "```js\nrender() {\n    return <div>\n        <div>\n <button onClick={this.onInsert}>\n create new page\n </button>\n </div>\n        <ol>\n            ...\n        </ol>\n    </div>;\n}\n```", "```js\nrender() {\n    var rowStyle = this.props.rowStyle || {\n \"fontSize\": \"18px\",\n \"fontFamily\": \"Helvetica\"\n };\n\n var labelStyle = this.props.labelStyle || {\n \"whiteSpace\": \"nowrap\"\n };\n\n var buttonStyle = this.props.buttonStyle || {\n \"margin\": \"0 0 0 10px\",\n \"verticalAlign\": \"middle\",\n };\n\n    return <div style={rowStyle}>\n        <label style={labelStyle}>\n            {this.props.title}\n        </label>\n        <button\n            style={buttonStyle}\n            onClick={this.props.onEdit}>\n            edit\n        </button>\n        <button\n            style={buttonStyle}\n            onClick={this.props.onDelete}>\n            delete\n        </button>\n    </div>;\n}\n```", "```js\nrender() {\n    var itemStyle = this.props.itemStyle || {\n        \"minHeight\": \"40px\",\n        \"lineHeight\": \"40px\",\n \"fontSize\": \"18px\",\n \"fontFamily\": \"Helvetica\"\n\n    };\n\n    return <div>\n        <div>\n            <button\n                onClick={this.onInsert}>\n                create new page\n            </button>\n        </div>\n        <ol>\n            {this.state.pages.map((page, i) => {\n                return <li key={i} style={itemStyle}>\n                    <Page\n                        {...page}\n                        onUpdate={this.onUpdate}\n                        onDelete={this.onDelete}\n                        />);\n                </li>;\n            })}\n        </ol>\n    </div>;\n}\n```", "```js\nconstructor(props) {\n    super(props);\n\n    this.state = {\n        \"changed\": false\n    };\n\n    this.bind(\n        \"onCancel\",\n        \"onSave\",\n        \"onUpdate\",\n    );\n}\n\nrender() {\n    var cancelButtonStyle = null;\n var saveButton = null;\n\n if (this.state.changed) {\n cancelButtonStyle = this.props.cancelButtonStyle || {\n \"margin\": \"0 0 0 10px\"\n };\n\n saveButton = <button\n onClick={this.onCancel}>\n save\n </button>\n }\n\n    return <form>\n        <div>\n            <input\n                type=\"text\"\n                onChange={this.onUpdate}\n                name=\"title\"\n                value={this.props.title}\n                />\n        </div>\n        <div>\n            <input\n                type=\"text\"\n                onChange={this.onUpdate}\n                name=\"body\"\n                value={this.props.body}\n                />\n        </div>\n        {saveButton}\n <button\n onClick={this.onCancel}\n style={cancelButtonStyle}>\n cancel\n </button>\n    </form>;\n}\n\nonSave(event) {\n    event.perventDefault();\n    this.props.onSave();\n}\n```", "```js\nonEdit() {\n    this.setState({\n        \"isEditing\": true,\n        \"title\": this.props.title\n    });\n}\n```", "```js\nonCancel() {\n    this.props.onUpdate(\n this.props.id,\n \"title\",\n this.state.title\n );\n\n    this.setState({\n        \"isEditing\": false\n    });\n}\n\nonSave() {\n    this.setState({\n        \"isEditing\": false\n    });\n}\n```", "```js\nconstructor(props) {\n    super(props);\n\n    this.state = {\n        \"isEditing\": false\n    };\n\n    this.bind(\n        \"onEdit\",\n        \"onDelete\",\n        \"onCancel\",\n        \"onSave\"\n    );\n}\n```", "```js\nrender() {\n    if (this.state.isEditing) {\n        return <PageEditor\n            {...this.props}\n            onCancel={this.onCancel}\n            onSave={this.onSave}\n            />;\n    }\n\n    return <PageView\n        {...this.props}\n        onEdit={this.onEdit}\n        onDelete={this.onDelete}\n        />;\n}\n```", "```js\nif (this.state.changed) {\n    cancelButtonStyle = this.props.cancelButtonStyle || {\n       \"margin\": \"0 0 0 10px\"\n    };\n\n    saveButton = <button\n        onClick={this. onSave}>\n        save\n    </button>\n}\n```", "```js\nrender() {\n    var itemStyle = this.props.itemStyle || {\n        \"minHeight\": \"40px\",\n        \"lineHeight\": \"40px\",\n \"fontSize\": \"18px\",\n \"fontFamily\": \"Helvetica\"\n    };\n\n    return <div>\n        <div>\n            <button\n                onClick={this.onInsert}>\n                create new page\n            </button>\n        </div>\n        <ol>\n            <React.addons.CSSTransitionGroup\n                transitionName=\"page\"\n                transitionEnterTimeout={150}\n                transitionLeaveTimeout={150}>\n                {this.state.pages.map((page, i) => {\n                    return <li key={i} style={itemStyle}>\n                        <Page\n                            {...page}\n                            onUpdate={this.onUpdate}\n                            onDelete={this.onDelete}\n                            />\n                    </li>;\n                })}\n            </React.addons.CSSTransitionGroup>\n        </ol>\n    </div>;\n}\n```", "```js\n.page-enter {\n    opacity: 0.01;\n    margin-left: -50%;\n}\n\n.page-enter.page-enter-active {\n    opacity: 1;\n    margin-left: 0;\n    transition: all 150ms linear;\n}\n\n.page-leave {\n    opacity: 1;\n    margin-left: 0;\n}\n\n.page-leave.page-leave-active {\n    opacity: 0.01;\n    margin-left: 50%;\n    transition: all 150ms linear;\n}\n```", "```js\n.background-transition {\n    background-color: red;\n    font-size: 16px;\n    transition-property: background-color;\n}\n\n.background-transition:hover {\n    background: blue;\n    font-size: 18px;\n}\n```", "```js\n.all-transition {\n    transition-property: all;\n}\n```", "```js\n.background-transition {\n    transition-duration: 1s;\n}\n```", "```js\n.background-transition {\n    transition-delay: 1s;\n}\n```", "```js\n.background-transition {\n    transition-property: background;\n    transition-duration: 1s;\n    transition-timing-function: linear;\n    transition-delay: 0.5s;\n}\n```", "```js\n.background-transition {\n transition: background 1s linear 0.5s;\n}\n```", "```js\n$ npm install --save node-sass\n\n```", "```js\n$ node_modules/.bin/node-sass index.scss > index.css\n\n```", "```js\n$duration: 150ms;\n$timing-function: linear;\n\n.page-enter {\n    opacity: 0.01;\n    margin-left: -50%;\n\n    &.page-enter-active {\n        opacity: 1;\n        margin-left: 0;\n        transition: all $duration $timing-function;\n    }\n}\n\n.page-leave {\n    opacity: 1;\n    margin-left: 0;\n\n    &.page-leave-active {\n        opacity: 0.01;\n        margin-left: 50%;\n        transition: all $duration $timing-function;\n    }\n}\n```", "```js\n.page-enter {\n    opacity: 0.01;\n    margin-left: -50%;\n}\n\n.page-enter.page-enter-active {\n    opacity: 1;\n    margin-left: 0;\n    transition: all 150ms linear;\n}\n\n.page-leave {\n    opacity: 1;\n    margin-left: 0;\n}\n\n.page-leave.page-leave-active {\n    opacity: 0.01;\n    margin-left: 50%;\n    transition: all 150ms linear;\n}\n```", "```js\n$ npm install --save sass.js\n\n```", "```js\n<script src=\"img/sass.sync.js\"></script>\n<style type=\"text/sass\">\n    $duration: 150ms;\n    $timing-function: linear;\n\n    .page-enter {\n        opacity: 0.01;\n        margin-left: -50%;\n\n        &.page-enter-active {\n            opacity: 1;\n            margin-left: 0;\n            transition: all $duration $timing-function;\n        }\n    }\n\n    .page-leave {\n        opacity: 1;\n        margin-left: 0;\n\n        &.page-leave-active {\n            opacity: 0.01;\n            margin-left: 50%;\n            transition: all $duration $timing-function;\n        }\n    }\n</style>\n<script>\n    var stylesheets = Array.prototype.slice.call(\n document.querySelectorAll(\"[type='text/sass']\")\n );\n\n stylesheets.forEach(function(stylesheet) {\n Sass.compile(stylesheet.innerHTML, function(result) {\n stylesheet.type = \"text/css\";\n stylesheet.innerHTML = result.text;\n });\n });\n</script>\n```"]